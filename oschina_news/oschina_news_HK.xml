<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 Nov 2023 03:00:37 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Qt Creator 12 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Qt Creator 12 現已發佈，一些亮點更新內容如下：</p><h4><strong>新功能</strong></h4><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-explore-compiler-code.html" target="_blank">集成 Compiler Explorer</a></strong></p><p><strong><img alt="" height="337" src="https://oscimg.oschina.net/oscnet/up-f4c52d1dd0998cbb8758b94fa724765e17a.webp" width="500" referrerpolicy="no-referrer"></strong></p><p>使用&nbsp;Tools &gt; Compiler Explorer &gt; Open Compiler Explorer&nbsp;打開集成了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgodbolt.org%2F" target="_blank">https://godbolt.org</a> 的 Compiler Explorer 的編輯器。當你編寫代碼時，Qt Creator 會要求 Compiler Explorer 對代碼進行編譯、生成彙編，並選擇性地執行代碼，然後向你顯示結果，<span style="background-color:#ffffff; color:#09102b">就像在其網站上一樣。</span>你可以打開多個編輯器並配置不同的編譯器。將包括設置在內的文檔保存為 .qtce 文件，以便以後共享或繼續實驗。</p><p>該插件默認為禁用，因此首先要在 Help &gt; About Plugins &gt; CompilerExplorer (or Qt Creator &gt; About Plugins &gt; CompilerExplorer on macOS) 中啓用該插件。</p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-debug-cmake-files.html" target="_blank">CMake Debugging</a>&nbsp;和&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-profile-cmake-code.html" target="_blank">Profiling</a></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>CMake 3.27 及更高版本包含通過 Debug Adapter Protocol (DAP) 進行調試的功能。Qt Creator 12 通過 Debug mode &gt; DAP 中的 DAP 實現了調試，這意味着你現在可以在項目的 CMake 文件中設置斷點並調試 CMake 的配置過程。還可以使用 Debug &gt; Start Debugging &gt; Start CMake Debugging 更直接地觸發 CMake 調試，而不是通過「Debug」模式。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此外，新的 Analyze &gt; CMake Profiler 可在 profiling 模式下啓動 CMake（自 CMake 3.18 起可用），並在 Qt Creator 的跟蹤文件查看器中打開結果。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-record-screens.html" target="_blank">Screen recording</a></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>通過 ScreenRecorder 插件以實現輕鬆創建屏幕（部分）錄音，用於錯誤報告、共享、博客文章等。該插件默認處於禁用狀態，可在&nbsp;Help &gt; About Plugins &gt; ScreenRecorder (or Qt Creator &gt; About Plugins &gt; ScreenRecorder on macOS)&nbsp;<span><span><span><span>中</span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-enable-plugins.html" target="_blank">啓用該插件</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fqt-creator-12-released" target="_blank">查看官方公告</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:58:35 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267922/qt-creator-12-released</guid>
            <link>https://www.oschina.net/news/267922/qt-creator-12-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[egui 0.24 發佈，面向 Web 和原生應用的 Rust GUI 庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>egui 是易於使用、可移植的即時模式 (immediate mode) GUI 庫，採用 Rust 編寫，提供了一種簡單而直觀的方式來創建圖形用户界面，並且可運行在 Web 和原生應用中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-051b7caef2c757433d4cec01c2d77678d2d.gif" referrerpolicy="no-referrer"></p><p>在線體驗：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.egui.rs%2F" target="_blank">https://www.egui.rs/</a></u></em></p><p>最新發布的&nbsp;egui 0.24 新增了許多新功能和改進，包括：</p><ul><li><strong>添加<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.rs%2Fegui%2Flatest%2Fegui%2Fviewport%2Findex.html" target="_blank"><code>viewport</code>API</a>&nbsp;(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Fpull%2F3172" target="_blank">#3172</a>)</strong>，為受支持的後端（如<code>eframe</code>）生成多個原生窗口</li><li>支持使用類似於瀏覽器中的快捷鍵（Cmd+Plus, Cmd+Minus 或 Cmd+0）輕鬆縮放任何 egui 應用程序</li><li>默認隱藏滾動條，直到將鼠標懸停在滾動區域 (<code>ScrollArea</code>) 上</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Freleases%2Ftag%2F0.24.0" target="_blank">詳情查看 Release Notes</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:47:35 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267921/egui-0-24-released</guid>
            <link>https://www.oschina.net/news/267921/egui-0-24-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenSSL 3.2.0 正式 GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenSSL 開發團隊<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openssl.org%2Fblog%2Fblog%2F2023%2F11%2F23%2FOpenSSL32%2F" target="_blank">宣佈</a></u>，OpenSSL 3.2 系列的第一個版本 —— OpenSSL 3.2.0 正式 GA。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e27b90f1a62566b0d27660a44b9e943fb7f.png" referrerpolicy="no-referrer"></p><p>OpenSSL 3.2 實現了針對 QUIC 的初版客户端，QUIC 是 Google 開發的通用傳輸層網絡協議，後來被 IETF 採用。 對於 OpenSSL 3.3 和明年的 OpenSSL 3.4，他們的目標是進一步完成此實現。</p><p>此外還增加了對 TLS 1.3 中 Brainpool 曲線的支持、原始公鑰 (RFC7250) 支持、使用 Brotli 和 Zstd 進行證書壓縮的支持、SM4-XTS 支持、確定性 ECDSA 簽名、AES-GCM-SIV、混合公鑰加密 (HPKE) ），以及其他特性。</p><p>OpenSSL 3.2 還將默認的 SSL/TLS 安全級別從 1 更改為 2。</p><p><strong>OpenSSL 3.2.0 主要變化</strong></p><ol><li>客户端 QUIC 支持，包括對多個流的支持（RFC 9000）</li><li>在 TLS 中支持證書壓縮（RFC 8879），包括對 zlib、zstd 和 Brotli 的支持</li><li>Deterministic ECDSA（RFC 6979）</li><li>除了對 Ed25519 和 Ed448 的現有支持外，還支持 Ed25519ctx、Ed25519ph 和 Ed448ph（RFC 8032）</li><li>AES-GCM-SIV（RFC 8452）</li><li>Argon2（RFC 9106）和支持線程池功能</li><li>HPKE（RFC 9180）</li><li>在 TLS 中使用原始公鑰的能力（RFC 7250）</li><li>如果操作系統允許，支持 TCP Fast Open（RFC 7413）</li><li>在 TLS 中支持基於提供者的可插拔簽名方案，使第三方 post-quantum 和其他算法提供者能夠在 TLS 中使用這些算法</li><li>在 TLS 1.3 中支持 Brainpool 曲線</li><li>SM4-XTS</li><li>支持使用 Windows 系統證書存儲作為受信任根證書的來源。該功能尚未默認啓用，需要使用環境變量進行激活。預計在未來的功能版本中，這將成為默認啓用的功能</li></ol><p>詳情查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fopenssl-3.2.0%2FNEWS.md" target="_blank">NEWS 文件</a>和&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fopenssl-3.2.0%2FCHANGES.md" target="_blank">CHANGES 文件</a>。</p><p>對新的 QUIC 功能感興趣的用户，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fopenssl-3.2%2FREADME-QUIC.md" target="_blank">建議閲讀 QUIC 的 README 文件</a></u>，其中提供了相關文檔和示例代碼的鏈接。</p><p>OpenSSL 3.3 將是 OpenSSL 3.2 之後的下一個功能性更新，最遲將於 2024 年 4 月 30 日發佈。預計該版本將包括 QUIC 服務器支持。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:32:10 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267915/openssl-3-2-0-final</guid>
            <link>https://www.oschina.net/news/267915/openssl-3-2-0-final</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin V23 成功適配國產顯卡摩爾線程 MTT S80]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">deepin <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-v23-adapts-mtt-s80%2F" target="_blank">宣佈</a>，在社區愛好者以及 deepin 研發團隊的推動下，完成了摩爾線程 MTT S80 顯卡的適配工作，成功在 deepin V23 Beta2 版本上驅動 MTT S80 顯卡。</span></p><p><span style="color:#000000">據悉，此次適配的摩爾線程 MTT S80 顯卡，於 2022 年 11 月發佈，搭載了完整的「春曉」芯片核心，內置 4096 個 MUSA 流處理核心、128 個 Tensor 張量核心，在 1.8GHz 的主頻下，能夠提供 14.4TFLOPS 的單精度浮點算力。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-24b90e4c555c3dce9d7c2bd8dcf255ff8c6.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">deepin 面向 MTT S80 的體驗版鏡像已經推出，可以下載試用。MTT S80 顯卡驅動在 deepin V23 Beta2 操作系統上運行穩定，能夠達到主流 Linux 平台顯卡水平。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-bb6700d8bf04b78428d098b799746afe61d.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-21dfd2787d98251884cf766af12fa8cf84e.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-97a82a853f7689b89f6151579e93404022f.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">當前，該驅動程序已支持 Opengl 4.0 、Opengl ES 3.2 ，由於還是技術預覽版本，僅支持 5.15 版本內核，部分用户態驅動還未合入主線。此外，還存在一些其他問題，有待後續更新解決。因此，官方警告在生產環境中請務必謹慎使用。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><strong>鏡像下載地址：</strong></span></p><ul><li style="text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fci.deepin.com%2Frepo%2Fdeepin%2Fdeepin-community%2Fmoore-driver%2Fcdimage%2Fdeepin-23-Beta2-for-moore-s80-amd64.iso" target="_blank">https://ci.deepin.com/repo/deepin/deepin-community/moore-driver/cdimage/deepin-23-Beta2-for-moore-s80-amd64.iso</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:19:06 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267913</guid>
            <link>https://www.oschina.net/news/267913</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LibreOffice 24.2 Alpha 1 發佈，已啓用新的版本號命名規則]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/news/255048/libreoffice-version-yy-m">此前曾報道過</a></u>，從 2024 年開始，文檔基金會 (TDF) 將為 LibreOffice 採用基於日曆的版本號。因此下一個大版本是 2024 年 2 月發佈的&nbsp;<strong>LibreOffice 24.2</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c5b76281fefb613d45058573cae8890f54c.png" referrerpolicy="no-referrer"></p><p>LibreOffice 24.2 昨天發佈了首個 alpha，主要變化如下：</p><ol><li>在 LibreOffice Writer 中改進了多頁浮動表格的功能。</li><li>在 LibreOffice Calc 電子表格的函數側邊欄中添加了一個新的搜索字段。</li><li>在 LibreOffice Impress 中實現了小型大寫字母 (Small Caps) 功能。</li><li>默認啓用「保存自動恢復信息」，以及「始終創建備份副本」，以提高 LibreOffice 在崩潰或其他問題發生時的穩定性。還有許多自動恢復修復。</li><li>在 LibreOffice 選項區域添加了搜索功能。</li><li>當使用來自桌面設置的暗色主題時，自動切換到深色應用程序顏色和深色圖標主題現在適用於基於 Qt 的 UI 變體，如 KDE Plasma。</li><li>LibreOffice 的「使用密碼保存」對話框添加了密碼強度指示器。</li></ol><p>更多關於 LibreOffice 24.2 正在進行的工作的詳細信息可以在<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.documentfoundation.org%2FReleaseNotes%2F24.2" target="_blank">Document Foundation Wiki</a></u>上找到。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.documentfoundation.org%2FReleasePlan%2F24.2" target="_blank">發佈計劃顯示</a></u>，alpha 版本已按時發佈。LibreOffice 24.2 的功能凍結和代碼分支將在 12 月初進行，然後是 beta 版本。預計在 12 月和 1 月之間發佈至少三個候選版本，然後 LibreOffice 24.2 應該在 2 月初發布。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:12:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267911/libreoffice-24-2-alpha1</guid>
            <link>https://www.oschina.net/news/267911/libreoffice-24-2-alpha1</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【直播預告】替代 Oracle，我們還有多長的路要走？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="text-align:center"><img height="450" src="https://oscimg.oschina.net/oscnet/up-7cd126308d5a4478deb0afffc710879fd62.png" width="2400" referrerpolicy="no-referrer"></p><p>早在十多年前，就有了 「去 IOE 」 的提議。2008 年，時任阿里巴巴首席架構師的王堅提議，減少外國供應商，並用內部開發的設備和技術取而代之。</p><p>所謂減少外國供應商，主要就是要擺脱 IOE 系統——服務器 IBM，數據庫軟件 Oracle，存儲設備 EMC，三者構成了一個從軟件到硬件的企業數據庫系統，幾乎佔領了全球大部分商用數據庫系統市場份額。</p><p>原本，「去 IOE 」 只是阿里為了節省成本的一場技術革新。IBM 小型機價格從幾十萬到高達百萬級人民幣，與 Oracle 簽訂的數據庫軟件費用達數千萬，還要再加上一大筆軟硬件支付和一大筆維護費，維持 IOE 的成本太過高昂。</p><p>在我國頻頻遭遇外國技術封鎖之後，「去 IOE 」 成為了軟件行業自主可控的正面戰場之一。在信創的推波助瀾之下，國產化替代更是勢不可擋。Oracle 數據庫作為 IOE 的核心繫統，國產化替代的進程到底如何呢？</p><p>要知道，替代 Oracle 並不是一蹴而就的事情。Oracle 在數據庫領域的地位是建立在多年的技術積累和市場認可之上的。替代 Oracle 需要考慮到企業的具體需求、現有系統的遷移成本以及新技術的可行性和穩定性。同時，替代 Oracle 也需要面對數據遷移、應用兼容性、安全性和性能等方面的挑戰。</p><p>11 月 23 日 19:00，OSCHINA 直播——【開源漫談】第 6 期，將深入地聊一聊：替代 Oracle，我們還有多長的路要走？</p><p><strong>直播主題：替代 Oracle，我們還有多長的路要走？</strong></p><p style="text-align:left"><strong>直播時間：</strong>11 月 29 日（週三） 19:00-21:00</p><p style="text-align:left"><strong>直播平台：</strong>「OSC 開源社區」 視頻號</p><p><strong>主辦方：</strong>開源中國</p><p><strong>直播嘉賓：</strong></p><p><strong>馬繼超，瀚高售前總監</strong></p><p>現任浪潮集團瀚高基礎軟件股份有限公司售前總監，擁有近十年數據庫技術經驗和卓越售前經驗。曾參與多個大型項目的實施，專注於深入洞察客户需求，精心為客户打造數據庫個性化解決方案，並提供卓越的數據庫產品和服務。以其對客户業務的深刻理解，助力客户實現卓越的業務目標。</p><p><strong>吳疆，拓數派產品社區負責人</strong></p><p>深耕雲計算行業和數據庫行業十餘年，熱衷於數據庫技術的雲原生化（數據庫與雲計算技術的深度融合），致力於雲原生虛擬數倉 PieCloudDB 的產品推廣。加入拓數派（Openpie）之前，就職於 Pivotal（現 VMWare）任職大數據平台 Greenplum 資深產品經理，並曾在 EMC 和 IBM 擔任主管工程師，參與過多個大數據和雲計算相關項目。畢業於清華大學計算機系，先後獲得本科和研究生學位。</p><p><strong>趙向前，萬裏數據庫平台產品</strong></p><p>萬裏數據庫產品，有多年運營商、銀行、政企、電網行業的數據庫管理經驗，Oracle OCM、MySQL OCP、 PGCP，目前負責萬裏數據庫相關產品的功能統籌建設，通過投產項目運行數據分析，致力改進完善產品用户體驗。</p><p><strong>直播話題：</strong></p><ul><li><p>當前數據庫國產化進程情況如何？</p></li><li><p>替代 Oracle 的難點在哪裏？（技術角度和非技術角度都談一談）</p></li><li><p>有哪些能夠替代 Oracle 的國產數據庫？優勢在哪？不足之處在於？</p></li><li><p>現有國產數據庫跟 Oracle 相比，有多大的差距？</p></li><li><p>國產數據庫未來要怎麼走？</p></li></ul><p><img height="2416" src="https://oscimg.oschina.net/oscnet/up-6aa123abfaaa251c29aeaf1fc62fc04df2a.png" width="750" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>直播福利</strong></p><ul><li><p style="margin-left:0; margin-right:0">互動抽獎：在直播評論區提問，被直播嘉賓回覆的用户可獲 OSC T 恤 1 件，名額不限。</p></li><li><p style="margin-left:0; margin-right:0">福袋抽獎：直播中將有多輪抽獎，參與就有機會獲得 OSC T 恤、筆記本、馬克杯 、前沿技術書籍等。</p></li></ul><p style="margin-left:0; margin-right:0"><img height="338" src="https://oscimg.oschina.net/oscnet/up-189c7f6fa386b87c3dda724a66c35fca104.jpg" width="600" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">我們直播間見吧～</p><hr><p style="text-align:left"><strong>另外，本次直播得到了諸多社區或組織的大力支持，在此特別表示感謝：</strong></p><p style="text-align:left"><strong>IvorySQL 開源數據庫社區</strong></p><p style="text-align:left">IvorySQL 是由浪潮集團瀚高股份主導研發的一款開源的兼容 Oracle 的 PostgreSQL，致力於為企業和開發者提供一個高性能、可擴展和安全的 Oracle 替代最佳解決方案。</p><p style="text-align:left">IvorySQL 社區以安全、兼容、易用為特色，以鏈接開發者為核心，背後由數十年的全球 PostgreSQL 開發經驗的資深專家和開發愛好者組成。</p><p style="text-align:left">自發布以來，IvorySQL 緊跟 PG 國際社區，快速進行版本迭代，保持與最新版本 PostgreSQL 數據庫內核同步，累計發佈 10 個版本，併兼容豐富的 PG 周邊工具和擴展。推出包括 Package、層級查詢、全局唯一索引、各種兼容函數和類型等 Oracle 兼容功能近百個。</p><p>官網鏈接：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ivorysql.org%2Fzh-cn%2F" target="_blank">https://www.ivorysql.org/zh-cn/</a></u></span></p><p style="text-align:left">社區倉庫：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FIvorySQL%2FIvorySQL" target="_blank">https://github.com/IvorySQL/IvorySQL</a></u></span></p><p>&nbsp;</p><p><strong>GreatSQL 社區 </strong></p><p style="text-align:left">GreatSQL 社區成立於 2021 年，由萬裏數據庫發起，致力於通過開放的社區合作，構建國內自主開源數據庫版本及開源數據庫技術，推動中國開源數據庫及應用生態繁榮發展。GreatSQL 是適用於金融級應用的國內自主開源數據庫，具備高性能、高可靠、高易用性、高安全等多個核心特性，可以作為 MySQL 或 Percona Server 的可選替換，用於線上生產環境，且完全免費併兼容 MySQL 或 Percona Server。</p><p style="text-align:left">官網鏈接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2F">https://greatsql.cn/</a></span></p><p>Gitee 倉庫：<span style="color:#245bdb"><a href="https://gitee.com/GreatSQL">https://gitee.com/GreatSQL</a></span></p><p>&nbsp;</p><p><strong>拓數派（OpenPie）</strong></p><p>拓數派（OpenPie）是國內基礎數據計算領域的高科技創新企業，與雲上數據庫和數據計算領域的引領者，自成立以來專注於數據計算領域，旗下大模型數據計算系統（PieDataComputingSystem, 縮寫：πDataCS），以雲原生技術重構數據存儲和計算，一份存儲，多引擎數據計算，讓 AI 模型更大更快，全面升級大數據系統至大模型時代。</p><p>πDataCS 首款計算引擎 PieCloudDB 雲原生虛擬數倉實現了分析型數據數倉上雲虛擬化，將物理數倉整合，根據數據授權動態創建虛擬數倉，按需靈活計算，打破數據孤島，支撐更大模型所需的數據和計算。在 PieCloudDB，存儲和計算各自作為兩個獨立變量，各自在雲裏彈性伸縮，解決基於 PC 的傳統 MPP 的缺陷，不僅可實現瞬間擴縮容。還支持用户對雲中數據同時開啓多個集羣進行數據計算，並能持續將所有數據在雲中存儲，為已有的應用和未來的應用真正實現數據共享。PieCloudDB 目前提供社區版（免費下載），雲上雲版（免費試用），企業版，與一體機版本。</p><p>官網鏈接：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.openpie.com" target="_blank">www.openpie.com</a></p><p>社區公眾號：PieCloudDB 技術派</p><p>&nbsp;</p><p><strong>重慶軟件園</strong></p><p>重慶軟件園位於重慶經開區，佔地 110 萬平方米，佈局四大組團，是重慶市首批軟件產業園 (綜合型)、A 區入選重慶市軟件和信息服務業「滿天星」示範樓宇 (首批)，於 2019 年 9 月 16 日正式開園，堅持「做生態=做產業，做人才=做產業，做服務=做產業」的發展理念，建設集科技、人文、生態、智慧為一體的領軍型軟件園區。聚焦「3+2」產業佈局，實現新一代信息技術產業集羣發展。園區聚集軟件類企業近 2000 家，軟件人才近 3 萬人，已登記 4000 多項軟件著作權，研發投入超 50 億，40 餘項專利將獲得科技獎，營收上億企業近 20 家。立足南岸區、重慶經開區優質產業資源，聚焦軟件信息服務業、智能製造、綠色環保 、汽車軟件汽車電子、大健康等產業，推動軟件產業高質量發展，重慶軟件園將全面貫徹落實「滿天星」計劃，力爭到 2026 年成功建成中國軟件名園。</p><p>園區官網：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.chongqingpark.com" target="_blank">www.chongqingpark.com</a></p><p>&nbsp;</p><p style="text-align:left"><strong>渠成開源社區</strong></p><p style="text-align:left">渠成開源社區由禪道項目管理軟件團隊發起，社區的經營主體為青島渠成開源計算機網絡技術研究中心，是非營利性社會服務活動的社會組織。 渠成開源社區主要面向一線開源軟件生產者、貢獻者、組織者、贊助商和用户，以解決具體實際問題為宗旨，旨在打造以開源軟件為核心紐帶的開源生態系統，真正做到讓每一個優秀的開源軟件都能實現商業化。</p><p style="text-align:left">官網：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.qucheng.cc">www.qucheng.cc</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>愛可生開源社區</strong></p><p style="text-align:left">愛可生開源社區，一個有深度的 MySQL 開源社區。社區成立於 2017 年，以開源高質量的運維工具、日常分享技術乾貨內容、數據庫技術佈道為己任；目前開源的產品有：SQL 審核工具 SQLE、分佈式中間件 DBLE 和數據傳輸組件 DTLE。在這裏，你將收穫：高質量的技術內容，企業級數據庫工具及服務，豐富的社區活動。</p><p style="text-align:left">鏈接： <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensource.actionsky.com%2F">https://opensource.actionsky.com/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>AllData</strong></p><p style="text-align:left">AllData 大數據產品是可定義數據中台，以數據平台為底座，以數據中台為橋樑，以機器學習平台，GPT 平台為框架，提供全鏈路數字化解決方案。</p><p style="text-align:left">項目地址：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falldatacenter%2Falldata">https://github.com/alldatacenter/alldata</a></span></p><p style="text-align:left">社區官網：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Falldata.readthedocs.io%2Fzh%2Fmaster%2F">https://alldata.readthedocs.io/zh/master/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>東方瑞通 </strong></p><p style="text-align:left">東方瑞通成立於 1998 年，是國內較早的 IT 高級技術培訓企業之一，擁有華為、紅帽、微軟、PMI、VMware、Oracle 等 33 餘家國際廠商授權資質，以培養 it 人才為主，目前覆蓋領域：虛擬化、操作系統、網絡、安全、數據庫、IT 管理、軟件開發等細分領域，提供線上，線下交流培訓課程與活動。</p><p style="text-align:left">官網鏈接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.easthome.co" target="_blank">www.easthome.co</a></span></p><p>&nbsp;</p><p style="text-align:left"><strong>秦派軟件</strong></p><p style="text-align:left">北京秦派軟件科技有限公司 (Pulsarware® Technologies Ltd.) 是一家致力於開發生產力工具軟件的技術公司，成立之初立志要在工具軟件領域深耕，踐行精益求精的研發精神，努力推出優質的生產力工具軟件服務國內外的開發者，提升開發者的工作效率，同時創造出商業價值和社會價值。</p><p style="text-align:left">ATOMDB™ 數據庫管理客户端是秦派軟件研發的一款服務廣大開發者的工具軟件。可以讓開發者方便地執行查詢，創建和管理數據庫，支持管理市場上主流的數據庫管理系統。例如： TIDB, PolarDB, GreatDB, 人大金倉，神舟通用，TDengine, MySQL, PostgreSQL, Microsoft SQL Server, Oracle 等等。軟件設計支持 Windows、MacOS、Linux 等操作系統，軟件採用插件擴展的方式對多數據庫進行支持。</p><p style="text-align:left">官網鏈接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fatomdb.com" target="_blank">atomdb.com</a></span></p><p>&nbsp;</p><p><strong>墨天輪</strong></p><p>墨天輪是中國專業的數據技術社區，創建於 2019 年，目前已覆蓋國內 40 萬數據庫相關從業人員。其圍繞數據人的學習成長提供一站式的全面服務，打造集新聞資訊、技術文章、在線問答、活動直播、視頻課程、文檔閲覽、在線運維等為一體的門户網站。墨天輪致力於在新時代下打造更具創新性的學習形態、構建完整的數據知識體系，共同建設一個有温度的技術社區和全新的數據社羣聚合體。</p><p>鏈接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2F" target="_blank">https://www.modb.pro/</a></p><p>&nbsp;</p><p><strong>示説</strong></p><p>示説是音視頻互動社交 SaaS 平台,提供一站式的自動化營銷和數據分析服務,專注賦能企業在垂直領域建立產品的用户生態,成為行業用户、社區互動和分享的專業平台。</p><p>官網：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.slidestalk.com%2F" target="_blank">https://www.slidestalk.com/</a></p><p>&nbsp;</p><p><strong>盛見開源社區</strong></p><p>盛見開源社區是由盛見團隊的開源項目作者、貢獻者、維護者共同組成的開源社區，提供開源的區塊鏈框架、區塊鏈錢包、區塊鏈監控等系列開源產品及解決方案，專注區塊鏈內核模塊化和數字資產金融衍生品。 同時還進行開源技術內容發佈、開源賽事參與、開源項目共創等開源活動。</p><p>官網: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.shengjian.net" target="_blank">https://www.shengjian.net</a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:12:06 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10150339</guid>
            <link>https://my.oschina.net/u/3859945/blog/10150339</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenTiny Vue 開源組件庫突破 1000 Star]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>你好，我是 Kagol。</p><p>今天是感恩節，我們懷着無比激動的心情，慶祝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 達到 1000 Star ⭐</p><p>感謝所有支持 OpenTiny 開源社區的朋友們！</p><p><img src="https://oscimg.oschina.net/oscnet/up-1992757ee39875aabd70bc8e9d462a970eb.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-87db039989ef9101d4011633ea25be16749.jpg" alt="" referrerpolicy="no-referrer"></p><p>2023 年 2 月 16 日，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 正式開源。</p><p>和業界組件庫相比，<code>OpenTiny Vue</code> 最大的特色就是使用 Renderless 無渲染組件設計架構，實現了一套代碼同時支持 Vue2 / Vue3 / React，支持 PC / Mobile 端，並支持<code>函數級別的邏輯定製</code>和<code>全模板替換</code>，靈活性好、二次開發能力強。</p><p>我們擁有更豐富的組件，目前組件數量已經超過 100 個，除了業界常見組件之外，我們還提供了一些獨有的特色組件，如：Split 面板分割器、IpAddress IP 地址輸入框、Calendar 日曆、Crop 圖片裁切等。</p><p>經過 9 個多月的持續打磨，我們發佈了 6 個大版本，支持了更加豐富的特性，能力更強、體驗更好。</p><ul><li>完成 Monorepo 和 TypeScript 工程改造</li><li>支持 Vue2.7</li><li>支持 VitePress 服務端渲染</li><li>官網提供 Composition API 寫法的示例</li><li>提供 Playground 代碼演練場</li><li>提供 XDesign / Aurora / Infinite 3 套新主題</li><li>增加 RichTextEditor / ColorPicker / Anchor / Guide 等 13 個新組件</li></ul><p>開源不易，請給 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">OpenTiny Vue</a> 點個 Star ⭐ 鼓勵下，感謝你對我們 OpenTiny 的大力支持🌹</p><p>源碼：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><h2>1 圍繞開發者需求，不斷完善自身能力</h2><p>開源的 9 個多月以來，我們收到了非常多友好、耐心的開發者的反饋，這些寶貴的反饋意見對於我們優化 TinyVue 組件庫，打造真正有競爭力的開源項目提供了非常大的幫助，感謝所有耐心地給我們 TinyVue 提交 Issue 的開發者們🌹</p><h3>1.1 Monorepo 和 TypeScript 工程改造</h3><p>今年 2 月份剛開源時，我們的項目結構還不是 Monorepo 工程，整個組件庫分成了 4 個倉庫：</p><ul><li>tiny-vue // 組件模板</li><li>tiny-vue-renderless // 組件邏輯</li><li>tiny-theme // PC 端組件樣式</li><li>tiny-theme-mobile // 移動端組件樣式</li></ul><p>這樣會帶來以下問題：</p><ol><li>第一次 clone 代碼比較麻煩，需要 clone 4 個倉庫的代碼</li><li>clone 完代碼之後，還需要切換 develop 分支 4 次，npm i 安裝 4 次依賴包</li><li>這 4 個工程安裝的依賴包如果有重複的，會在各自的工程目錄下安裝多次，導致更多的磁盤空間佔用</li><li>增加新組件或給組件增加新特性，一般都會涉及模板/邏輯/樣式的同時修改，提交 MR 時需要在三個倉庫都提交一個 MR，不太方便</li><li>填寫 MR 的描述信息時也需要在多個倉庫填寫多次</li><li>檢視 MR 是也需要在多個倉庫進行檢視、提交檢視意見，比較分散</li></ol><p>由於我們是一個開源項目，希望能夠團結社區開發者一起共同建設，肯定希望大家參與貢獻的門檻儘可能降低，貢獻的體驗儘可能流暢，所以我們在 3 月份對項目進行了一次大改造，將原來分散在 4 個代碼倉庫的代碼集中到一個倉庫，通過 Monorepo 方式進行管理。除此之外，我們還將原來的 JavaScript 工程改造成了 TypeScript 工程，並在持續補充組件的 TypeScript 類型聲明。</p><blockquote><p>目前組件 TypeScript 類型聲明還未全部補充完，歡迎朋友們一起參與貢獻。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></p></blockquote><h3>1.2 支持 Vue 2.7</h3><p>説來慚愧，支持 Vue 2.7 的訴求從今年 4 月份就有人提 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F141" target="_blank">#141</a>，我們在最近的大版本 v2.11.0 才正式支持。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7291598231954653240" target="_blank">OpenTiny Vue 支持 Vue2.7 啦！</a></p><p>Vue2.7 是升級 Vue3 的一個過渡版本，支持了 Composition API 寫法，相較於 Vue2.6 差異較大，並且目前是 Vue 2.x 的默認版本，在 Vue2 項目中默認會安裝 Vue 2.7.x，這時安裝和使用 TinyVue v2.x 版本，項目會報錯。</p><p>v2.11.0 版本之後將不再有這個問題，歡迎還在使用 Vue2 的朋友們體驗和使用。</p><h3>1.3 官網提供 Composition API 寫法的示例</h3><p>TinyVue 是一個能同時支持 Vue2 和 Vue3 的組件庫，但是之前我們官網的組件 Demo 只有 Options API 的版本，使用 Vue3 的開發者會覺得很不方便，拷貝 Demo 代碼之後還需要手動轉換成 Composition API 的寫法。</p><p>於是我們優化了文檔的呈現，參考 Vue 官網，增加了 Options(選項式) 和 Composition(組合式) 兩種寫法的切換。</p><p><img src="https://oscimg.oschina.net/oscnet/up-11b40155bd5aad12b5a1a5c253fbbdb557a.png" alt="" referrerpolicy="no-referrer"></p><p>歡迎朋友們到我們官網體驗：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.4 提供 Playground 代碼演練場</h3><p>早期我們的組件 Demo 代碼是可以直接在頁面上編輯，然後查看組件渲染效果的，但是編輯之後的代碼沒法通過鏈接形式分享出來。</p><p>我們缺少代碼演練場功能，這個問題 4 月份就有朋友提 Issue <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F182" target="_blank">#182</a>，8 月初，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmengqiuleo" target="_blank">xiaoy</a> 同學給我們貢獻了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue-playground" target="_blank">TinyVue Playground</a> 項目。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7262349502920523833" target="_blank">但因熱愛，願迎萬難，OpenTiny 社區增加一枚前端程序媛貢獻者🎉</a></p><p>我們將這個項目集成到了 TinyVue 的官網，現在你可以在每個組件 Demo 的右上角點擊「打開演練場」的按鈕，在演練場中編輯這個 Demo，實時查看修改後的組件效果，並通過鏈接形式分享出去。</p><p>這樣提交 Issue 時，可以在 Playground 中實現最小可復現 Demo，並將鏈接貼到 Issue 描述中，大大降低了溝通成本，提升了缺陷修復的效率。</p><h3>1.5 四套主題，總有一套是你喜歡的</h3><p>為了滿足不同業務的需求，我們內置了四套主題，大家可以挑選自己喜歡的一款，如果這四套主題依然沒有一款能完全符合自己的要求，你也可以基於現有主題，修改部分主題變量，擴展出一套自己的主題，或者從 0 到 1 自定義一套主題，都是可以的。</p><p>具體如何自定義主題，可以參考以下文章：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7235603140262838329%23heading-21" target="_blank">自定義 TinyVue 主題</a></p><p><img src="https://oscimg.oschina.net/oscnet/up-84297e83aea2a488ad2f6698221e7bdfcd9.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p>温馨提醒：主題切換入口在組件頁面右上角</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-381625d2749f199ea19c0f6a5dc6e0ab035.png" alt="" referrerpolicy="no-referrer"></p><p>歡迎朋友們在 TinyVue 官網體驗不同主題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.6 更加豐富的組件</h3><p>有很多開發者在 Issue 給我們提出新組件的訴求，經過仔細評估，我們實現了其中一部分通用的組件。</p><ul><li>Anchor 錨點 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenxi-20" target="_blank">@chenxi-20</a></li><li>CalendarView 日曆視圖 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol" target="_blank">@kagol</a></li><li>ColorPicker 顏色選擇器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>ConfigProvider 全局設置 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>Divider 分隔線 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvaebe" target="_blank">@vaebe</a></li><li>Drawer 抽屜 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHuangyilin19" target="_blank">@Huangyilin19</a></li><li>Guide 引導 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyuanningning" target="_blank">@yuanningning</a></li><li>PopConfirm 確認框 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgimmyhehe" target="_blank">@gimmyhehe</a></li><li>RichTextEditor 富文本編輯器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FCaesar-ch" target="_blank">Caesar-ch</a></li><li>...</li></ul><p>還有好多組件未實現，歡迎感興趣的朋友們一起參與共建！</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到頂部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 標籤輸入框</li><li>LoadingBar 加載進度條 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 對話組件</li><li>IpSection 分段 IP 輸入框</li><li>Video 視頻播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思維導圖 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程設計器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>如果你想參與 TinyVue 項目貢獻，可以在對應的 Issue 下評論認領，並仔細閲讀我們的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">貢獻指南</a>。</p><h2>2 酒香也怕巷子深吶</h2><p>俗話説：酒香不怕巷子深，但是在前端組件庫開源方面可能不太適用，近幾年開源的前端組件庫越來越多，這其實是一件好事，百花齊放，前端人也有更多的選擇。</p><p>但是不熟悉這些組件庫的開發者會覺得這些組件庫好像都差不多，何必又要重複造輪子呢？</p><p>因此有必要做一些宣傳，讓大家瞭解 TinyVue 組件庫的核心設計理念，TinyVue 與其他組件庫的不同，有什麼競爭優勢。</p><h3>2.1 開發者大會</h3><p>從今年 4 月份開始，OpenTiny 參加了 17 場開發者大會、開源峯會、高校行活動，包括：</p><ul><li>5.13 重慶的開源未來發展峯會</li><li>5.27 上海的 GOTC</li><li>6.11 北京的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7242676549735776314" target="_blank">開放原子全球峯會</a></li><li>⭐ 7.7 東莞的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7255138771985219639" target="_blank">HDC 大會</a></li><li>9.20 上海的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7287473826061189181" target="_blank">HC 大會</a></li><li>9.26 上海的 KubeCon China</li><li>10.24 長沙的中國程序員節</li><li>10.28 成都的中國開源年會</li><li>...</li></ul><p>通過在大會分享議題，我們能將 TinyVue 的理念傳遞給廣泛的開發者； 通過展台互動，我們可以近距離與開發者互動，給大家分享 OpenTiny 的獨特優勢，傾聽開發者的聲音，瞭解用户的痛點問題； 通過編程訓練營，可以帶着開發者一起體驗 TinyVue 組件，快速搭建 Web 應用。</p><p>值得一提的是，7 月份在東莞華為溪村的 HDC 大會真是一場開發者的盛宴，各種開發者活動非常豐富，只要你有心，可以學到很多技術知識，認識超多業界大佬，哪怕只是去「歐洲小鎮」逛一圈，我覺得也是非常值得推薦的。</p><p>雖然那幾天天氣很熱，也很累，但是卻是非常難忘的一段經歷，OpenTiny 有演講議題、展台、訓練營和挑戰賽，參加人數都非常多，開發者們都很活躍。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09a594762462062dd5c2c95967aae95f29b.png" alt="" referrerpolicy="no-referrer"></p><p>非常高興，TinyVue 也是在 HDC 大會上正式進行發佈！</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7254020450160934973" target="_blank">OpenTiny 前端組件庫正式開源啦！面向未來，為開發者而生</a></p><p>大家可以關注 <code>OpenTiny</code> 公眾號，隨時掌握 OpenTiny 最新活動動態。</p><h3>2.2 直播</h3><p>除了線下開發者大會之外，線上直播也是一種向開發者傳遞項目價值的方式，今年共做了 8 次直播。</p><ul><li>華為雲 DTT 直播 2 次</li><li>與前端知名 UP 主前端楊村長聯合直播 3 次</li><li>與 ToB Dev / Dooring 低代碼聯合直播 1 次</li><li>受邀參加中國開源社區 landscape 直播分享 1 次</li><li>自主策劃 TinyEngine 線上答疑 1 次</li></ul><p>大家感興趣可以關注 OpenTiny 的 B 站賬號，我們會將直播的錄播視頻上傳上去。</p><p>OpenTiny B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><h3>2.3 寫文章</h3><p>相比參加開發者大會和組織直播活動，寫文章相對比較容易，並且寫文章能夠更加全面、細緻地傳遞開源項目價值，也是一種細水長流的傳播方式，門檻相對也比較低，幾乎任何人都可以做。</p><p>不過寫文章並不是一件容易的事，從 4 月份我們發佈第一篇 OpenTiny 的宣傳文章至今，共發佈了 75 篇文章，平均每週 2 篇。</p><p>主要發佈在 OpenTiny 公眾號、掘金、開源中國等平台，累計閲讀量超過 50 萬。</p><p>另外我們也和多位前端 KOL 建立合作關係，如：前端早讀課、前端迷、一飛開源、前端之巔、前端進階之旅、高級前端進階、村長學前端、前端大班車、code 秘密花園、、技術胖學程序、若川視野、前端幫、前端 Q、大廠雜談、LowCode 低碼時代、華為開源、OSC 開源、ITPUB、前端開源星球、前端前沿技術等，感謝前輩們的提攜！</p><p>開源不易，寫文章也不易，推薦朋友們關注以上大佬們的公眾號，也給我們 TinyVue 開源項目點個 Star 鼓勵下🌹</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><p>感謝朋友們對 TinyVue 的支持！</p><p>如果你有一個開源項目，千萬不能抱着酒香不怕巷子深的觀念，而是積極主動地走出去，接觸廣大的開發者，不斷對外宣傳你的開源項目的價值和核心優勢，讓大家瞭解你的開源項目，讓大家評判你的開源項目，讓大家使用你的開源項目。</p><h2>3 規劃</h2><p>2024 年我們將繼續根據用户需求優化組件庫。</p><p>一方面繼續完善組件庫能力，提供更多實用組件和特性，滿足更廣泛的業務場景；</p><p>另一方面持續優化組件庫工程架構和質量，完善組件的 TypeScript 類型聲明、E2E 測試用例、單元測試用例。</p><p>以下是我們 2024 年的規劃。</p><h3>3.1 新特性</h3><p>根據用户提交的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues" target="_blank">Issue</a> 持續修復組件缺陷、完善組件能力。</p><p>新組件：</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到頂部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 標籤輸入框</li><li>LoadingBar 加載進度條 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 對話組件</li><li>IpSection 分段 IP 輸入框</li><li>Video 視頻播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思維導圖 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程設計器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>新特性：</p><ul><li>支持 Nuxt3 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F577" target="_blank">#577</a></li><li>支持 unplugin-vue-components <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F304" target="_blank">#304</a></li><li>支持深色主題 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F415" target="_blank">#415</a></li><li>Tree 支持虛擬滾動 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F256" target="_blank">#256</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F317" target="_blank">#317</a></li><li>RichTextEditor 富文本組件功能增強</li><li>CalendarView 組件功能增強</li></ul><h3>3.2 工程優化</h3><p>工程優化的目的是提升質量和效率，主要包含以下幾個方面：</p><ul><li>完善組件的 TypeScript 類型聲明 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></li><li>優化組件的 Demo/API 文檔 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F484" target="_blank">#484</a></li><li>完善 E2E 測試用例</li><li>完善單元測試用例 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F206" target="_blank">#206</a></li><li>Grid 組件抽離 renderless 邏輯層</li></ul><h2>3.3 生態擴展</h2><p>2023 年我們完成了 TinyReact 組件庫的基礎適配，包括基礎版本的 React 適配層、本地開發和部署流程，提供了 Button / Alert / Switch / Badge 4 個組件，併發布第一個 alpha 版本。</p><p>2024 年我們將持續擴展組件庫生態，主要包含：</p><ul><li>持續完善 TinyReact 組件庫，完善 react-common 適配層，增加更豐富的組件模板</li><li>適配 <a href="https://gitee.com/openInula/inula">openInula</a> 框架，增加 inula-common 適配層</li><li>完善移動端組件庫並部署官網，為 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-engine" target="_blank">TinyEngine</a> 低代碼引擎提供移動端組件物料</li><li>探索和擴展 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsolidjs%2Fsolid" target="_blank">Solid</a> / <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsveltejs%2Fsvelte" target="_blank">Svelte</a> 等新興框架的組件庫</li></ul><p>歡迎廣發開發者朋友一起參與 TinyVue 開源共建！</p><p>如果你有意向參與 TinyVue 開源貢獻，請在對應的 Issue 下面評論，並在參與貢獻之前閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">貢獻指南</a></p><p>最後，再一次感謝所有支持 TinyVue 的朋友們！</p><p><img src="https://oscimg.oschina.net/oscnet/up-7528c4a9c1dd5436bad2907842bfc87e831.png" alt="" referrerpolicy="no-referrer"></p><h2>聯繫我們</h2><p>GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a>（歡迎 Star ⭐）</p><p>官網：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">https://opentiny.design/tiny-vue</a></p><p>B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><p>公眾號：OpenTiny</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:09:06 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/10150927</guid>
            <link>https://my.oschina.net/u/4863191/blog/10150927</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust Web 框架 Rocket 發佈 v0.5：支持異步、SSE、WebSockets 等]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>歷經四年多，四個 RC 版本、一千次 commit、一千多個 issue、討論和 PR 之後，<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frocket.rs%2Fv0.5%2Fnews%2F2023-11-17-version-0.5%2F" target="_blank">Rocket v0.5 正式發佈了</a></u></strong>。</p><blockquote><p>Rocket 是支持異步的後端 Rust Web 框架，專注於可用性、安全性、可擴展性和性能。它使編寫安全的 Web 應用程序變得簡單，而不會犧牲生產力或性能。</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-749db50b650e7b26e57cb9b7f418e05b004.png" referrerpolicy="no-referrer"></p><p>Rocket v0.5 部分重要新功能包括：</p><ol><li><p><strong>支持穩定的 Rust 編譯器</strong>：Rocket v0.5 基於 Rust 穩定版本進行編譯和構建，開發者現在可以使用穩定發佈通道中的<code>rustc</code>編譯和構建 Rocket 應用程序，不再需要使用<code>#![feature(..)]</code>crate<strong>&nbsp;</strong>屬性。<br> &nbsp;</p><pre><code>#[macro_use] extern crate rocket;

#[get("/&lt;name&gt;/&lt;age&gt;")]
fn hello(name: &amp;str, age: u8) -&gt; String {
    format!("Hello, {} year old named {}!", age, name)
}

#[launch]
fn rocket() -&gt; _ {
    rocket::build().mount("/hello", routes![hello])
}</code></pre><p>&nbsp;</p></li><li><p><strong>支持異步 I/O</strong>：Rocket v0.5 重新構建了核心請求處理部分，利用了 Rust 中最新的異步網絡功能。Rocket 現在可以自動在機器上的所有可用核心上多路複用請求處理，使路由處理程序可以聲明為異步並使用 await 語法。<br> &nbsp;</p><pre><code>use rocket::tokio;
use rocket::data::{Data, ToByteUnit};

#[post("/debug", data = "&lt;data&gt;")]
async fn debug(data: Data&lt;'_&gt;) -&gt; std::io::Result&lt;()&gt; {
    // Stream at most 512KiB all of the body data to stdout.
    data.open(512.kibibytes())
        .stream_to(tokio::io::stdout())
        .await?;

    Ok(())
}</code></pre><p>&nbsp;</p></li><li><p><strong>支持 Sentinels</strong>：Rocket v0.5 引入了 Sentinels，這是 Rocket 框架獨有的功能。Sentinels 提供了一種自動的最後防線，可以在出現無效條件時中止應用程序的啓動。Sentinels 可以在 Rocket 之外實現，並且應該儘可能地使用它們。<br> &nbsp;</p><pre><code>use rocket::{Rocket, Ignite, Sentinel};

impl Sentinel for MyResponder {
    fn abort(r: &amp;Rocket&lt;Ignite&gt;) -&gt; bool {
        r.state::&lt;T&gt;().is_none() || !r.catchers().any(|c| c.code == Some(400))
    }
}</code></pre><p>&nbsp;</p></li><li><p><strong>支持流和 SSE</strong>：Rocket v0.5 引入了實時的、類型化的異步流。Rocket 的新異步流部分包含了更多詳細信息，我們鼓勵所有感興趣的人查看新的實時、多房間聊天示例。</p></li><li><p><strong>支持 WebSockets</strong>：Rocket v0.5 通過新的升級 API 引入了對 HTTP 連接升級的支持。這個 API 允許響應器在現有的 HTTP 連接中控制與客户端的原始 I/O，從而允許將 HTTP 連接升級到任何協議，包括 WebSockets。</p></li><li><p><strong>全面的表單功能支持</strong>：Rocket v0.5 完全改進了表單支持，支持多部分上傳、任意嵌套的集合、即時驗證等。Rocket 的新表單協議允許應用程序表達任何結構，任意嵌套和集合，無需任何自定義代碼。</p></li></ol><p>除了上述功能之外，Rocket v0.5 還引入了其他 40 多個新功能和重大改進，包括安全和隱私頭、優雅的關閉、靈活的配置系統、類型系統強制的數據限制等。</p><p>Rocket v0.5 的發佈是一個重要的里程碑，為 Rust 開發者提供了一個強大而易用的 Web 框架。我們鼓勵所有用户升級到 Rocket v0.5，並<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frwf2%2FRocket%2Fblob%2Fv0.5.0%2FCHANGELOG.md" target="_blank">查看完整的 CHANGELOG</a></u>以瞭解所有新功能和改進。</p><p>請注意，Rocket v0.4 仍然會得到支持和安全更新，直到 Rocket v0.6 發佈為止。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 11:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267838/rocketrs-0-5-released</guid>
            <link>https://www.oschina.net/news/267838/rocketrs-0-5-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Git 2.43 值得關注的新特性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Git 發佈了最新版本 2.43，新增了許多改進和新功能。</p><p>以下是 Git 2.43 的部分亮點：</p><ol><li><p><strong><code>git repack</code>的新功能</strong>：在 Git 2.43 中，git repack 學會了一些新技巧。git repack 用於重新組織倉庫中的 pack 文件。在這個版本中，git repack 支持使用多個 cruft pack，並且可以通過對象過濾器將倉庫的內容拆分為多個部分。</p></li><li><p><strong>多 cruft pack</strong>：在過去，Git 將無法訪問的對象存儲在單個 cruft pack 中。但是，這樣做會導致在每次重新打包操作時都需要重寫整個 cruft pack，從而浪費大量的 I/O 時間。在 Git 2.43 中，引入了對多個 cruft pack 的本地支持，可以將無法訪問的對象拆分為多個 pack，從而提高性能。</p></li><li><p><strong>使用對象過濾器拆分倉庫</strong>：Git 的「partial clone」機制允許在包含有限對象子集的倉庫中進行交互。在 Git 2.43 中，git repack 學會了使用對象過濾器規範重新打包倉庫，並可以選擇將過濾後的對象移動到其他位置。這使得可以根據需要輕鬆地過濾和移除不需要的對象。</p></li><li><p><strong>針對 revert 多次回滾的改進</strong>：在過去的 Git 版本中，當多次回滾時，每次回滾都會在提交消息中添加"Revert"，導致提交消息變得冗長。在 Git 2.43 中，Git 意識到進行多次回滾時，會生成更簡潔的提交消息。</p></li></ol><p>詳情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.blog%2F2023-11-20-highlights-from-git-2-43%2F" target="_blank">https://github.blog/2023-11-20-highlights-from-git-2-43/</a></u></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267835/git-2-43-highlights</guid>
            <link>https://www.oschina.net/news/267835/git-2-43-highlights</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲安全之盾：ZStack 雲主機安全防護解決方案全方位保護雲環境]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#000000">隨着雲計算的蓬勃發展，網絡威脅愈發複雜，涵蓋了從勒索病毒到 APT 攻擊的各種威脅類型。在這一風雲變幻的網絡安全環境下，雲主機安全不再僅僅是一個選項，它是信息系統安全的核心要素。</span></span></span><span><span><span style="color:#000000">雲軸科技</span></span></span><span><span><span style="color:#000000">ZStack&nbsp;雲主機安全</span></span></span><span><span><span style="color:#000000">防護</span></span></span><span><span><span style="color:#000000">解決方案是為了滿足這一需求而生的，與 ZStack</span></span></span><span><span><span style="color:#000000">&nbsp;Cloud</span></span></span><span><span><span style="color:#000000">雲</span></span></span><span><span><span style="color:#000000">平台</span></span></span><span><span><span style="color:#000000">全面</span></span></span><span><span><span style="color:#000000">兼容、殺毒性能卓越、具備全面的安全特性，同時支持多部署模式和多操作系統。該方案不僅僅是一個安全防護措施，更是一種安全保障的完整體系，保護</span></span></span><span><span><span style="color:#000000">企業級客户</span></span></span><span><span><span style="color:#000000">的數據和應用安全。<img alt="" height="597" src="https://oscimg.oschina.net/oscnet/up-f056bf758422a99c12e7e04c28f227e5b3a.png" width="1031" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#000000">在雲計算環境下，雲主機承載着關鍵數據和核心業務系統，一旦遭受攻擊，最重要的部分可能會被盜取或破壞。而傳統的殺毒模式資源佔用過多，影響生產系統的性能。因此，一個與底層雲計算平台兼容、功能全面且同時具備穩定性和高性能的雲主機安全解決方案至關重要。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><strong><span><span><span style="color:#000000">ZStack&nbsp;雲主機安全防護解決方案</span></span></span></strong><strong><span><span><span style="color:#000000">亮點</span></span></span></strong></li><li><span><span><span style="color:#000000">雲主機安全</span></span></span><span><span><span style="color:#000000">防護解決方案</span></span></span><span><span><span style="color:#000000">與</span></span></span><span><span><span style="color:#000000">ZStack Cloud</span></span></span><span><span><span style="color:#000000">雲</span></span></span><span><span><span style="color:#000000">平台深度融合，確保雲計算環境的穩定運行。</span></span></span></li><li><span><span><span style="color:#000000">支持無代理模式，通過虛擬化層直接進行病毒查殺，降低性能損耗。</span></span></span></li><li><span><span><span style="color:#000000">支持 0day 漏洞在線補丁修復，保證業務連續性。</span></span></span></li><li><span><span><span style="color:#000000">具備全生命週期的安全能力，包括事前預防、事中防禦和事後溯源。</span></span></span></li><li><span><span><span style="color:#000000">多部署模式支持，兼容多類型操作系統，靈活方案選擇，降低管理成本。</span></span></span></li></ul><p><span><span><span style="color:#000000"><img alt="" height="573" src="https://oscimg.oschina.net/oscnet/up-e5916906c1b1392e81c3895d25fe7c3a429.png" width="1255" referrerpolicy="no-referrer"></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:start"><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#000000">ZStack 雲主機安全</span></span></span><span><span><span style="color:#000000">防護</span></span></span><span><span><span style="color:#000000">解決方案適用於不停機補丁修復、雲主機無代理殺毒、宿主機加固防護以及雲主機安全綜合防護等多個應用場景。能夠降低黑客攻擊帶來的損失，提高運維效率，構建閉環安全系統，為</span></span></span><span><span><span style="color:#000000">雲主機提供全面保護。為數據中心雲平台提供事前防禦措施，事中威脅處理和事後攻擊溯源能力，應對網絡威脅升級帶來的安全挑戰。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:start"><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#000000">ZStack 將繼續改進和創新，以提供更完整的產品和解決方案，支撐和</span></span></span><span><span><span style="color:#000000">保護客户的數據</span></span></span><span><span><span style="color:#000000">和業務，迎接未來的業務和安全挑戰</span></span></span><span><span><span style="color:#000000">。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267832</guid>
            <link>https://www.oschina.net/news/267832</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 內核放棄支持過時的圖形驅動基礎設施]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linux 內核正在準備刪除支持舊的和過時的圖形驅動程序的基礎設施。</p><p>早在 Linux 6.3 內核中就已經移除了許多舊版的 DRM 驅動程序，現在的補丁進一步刪除了支持這些舊的用户空間模式設置圖形/顯示驅動程序的基礎設施。</p><p>在 Linux 6.3 內核中，ATI Rage 128、3Dfx、S3 Savage、Intel 810、SiS、VIA 和 Matrox MGA DRM 驅動程序被淘汰。這是為了清除 DRI1 時代過時 GPU 驅動程序的努力的一部分。</p><p>現在，SUSE 工程師 Thomas Zimmermann 計劃進一步刪除用户空間模式設置的基礎設施。他認為，由於 Linux 6.6 是今年的長期支持版本（LTS）內核。現在是一個很好的時機來刪除這個基礎設施。如果有人仍在使用這些舊的驅動程序或類似的驅動程序，他們可以繼續使用 Linux 6.6 LTS。</p><p>Zimmermann<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2F20231122122449.11588-1-tzimmermann%40suse.de%2F" target="_blank">在 dri-devel 上寫道</a></u>：</p><blockquote><p>舊的用户空間模式設置驅動程序已經在 Linux v6.3 中被刪除。沒有人抱怨或要求它們的恢復。現在是時候從 DRM 核心中刪除這些驅動程序的基礎設施了。</p><p>最近的 Linux v6.6 已被指定為長期支持版本，因此任何剩餘的用户還有幾年時間來購買新的顯卡。通過簡單的 drm 仍然支持這些舊設備。將適當的驅動程序與內核模式設置合併也是一個選擇。</p><p>補丁 1 到 7 修復了在刪除驅動程序過程中被遺忘的一些微不足道的問題。</p><p>補丁 8 和 9 刪除了舊的 ioctl 接口。其中一個操作與其他操作不同，因此它有自己的補丁。</p><p>補丁 10 到 12 從 DRM 中刪除了舊的源代碼。隨着這些代碼的消失，補丁 13 中的 AGP 代碼也可以簡化。以前有一個用於用户空間模式設置的設備文件/dev/agpgart，現在已經過時了。</p><p>這 14 個補丁在直接渲染管理器子系統中消除了另外 8000 行舊代碼。如果沒有提出異議，這個舊的用户空間模式設置基礎設施的刪除可能會在新的一年的 Linux 6.8 內核週期中發生。</p></blockquote><p>這項工作主要是為了清除過時的 GPU 驅動程序，併為用户提供更好的性能和穩定性。對於依賴舊版驅動程序的用户，他們可以繼續使用 Linux 6.6 LTS，直到他們準備好升級到支持新的圖形驅動程序的版本。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267831/linux-drop-old-ums-drm-infra</guid>
            <link>https://www.oschina.net/news/267831/linux-drop-old-ums-drm-infra</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 在新 AMD Zen 4 Threadripper 上的性能比 Windows 11 高約 20%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Freview%2Fthreadripper-7995wx-windows-linux" target="_blank">根據 Phoronix 的報道</a></u>，對於最新的 AMD Zen 4 Threadripper 處理器，運行 Ubuntu 會比 Windows 11 獲得更好的性能，前者較後者大約提升了 20% 的性能。這項測試是在一台配置了 HP Z6 G5 A 工作站的 96 核 AMD Ryzen Threadripper PRO 7995WX 處理器上進行的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c4adb3609ed3dba446e73d67cbfe76cf0a3.png" referrerpolicy="no-referrer"></p><p>測試結果顯示，Linux 在處理高核心數處理器時的性能優勢比 Windows 更明顯。這主要歸功於 Linux 內核調度程序在處理大核心數處理器時的優秀表現。此外，Linux 在處理這類高端台式機和工作站上的性能方面也比 Windows 更出色。</p><p>測試中，HP Z6 G5 A 工作站分別運行了預裝的 Windows 11 Pro 和 Ubuntu 23.10 操作系統。在運行了一系列適用於高端台式機和工作站的基準測試後，結果顯示 Ubuntu Linux 在大部分測試中都表現出更好的性能。這表明 Ubuntu Linux 在處理高核心數處理器時能夠更好地利用硬件資源，從而提供更高的性能。</p><p>需要注意的是，這項測試是在特定硬件配置下進行的，因此結果可能會因為不同的硬件配置而有所不同。此外，這項測試只涉及到 Ubuntu 23.10 操作系統，其他 Linux 發行版的性能可能會有所不同。</p><p>總的來説，根據這項測試結果，如果你在使用 AMD Zen 4 Threadripper 處理器的高端台式機或工作站，選擇 Ubuntu Linux 作為操作系統可能會獲得更好的性能。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267827</guid>
            <link>https://www.oschina.net/news/267827</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 6.8 將更新 Zstd 代碼以獲得更好的壓縮性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FZstd-1.5.5-Patches-Linux-Kernel" target="_blank">根據 Phoronix 的報道</a></u>，Linux 6.8 內核計劃在明年升級其 Zstd 代碼，以提供更好的壓縮性能。</p><p>在 Linux 6.2 中，內核的 Zstd 壓縮/解壓縮代碼已經根據 Zstd 1.5 的最新狀態進行了更新。而在 Linux 6.8 內核中，計劃升級到 Zstd 1.5.5 版本，這將提供更好的壓縮性能。</p><p>這次 Zstd 升級對 Linux 內核的動力之一是英特爾希望在 Linux 內核中使用更新的 Zstd 版本，因為它公開了 Zstd 的外部匹配提供程序 API，從而允許 QuickAssist 技術（QAT）加速 LZ 匹配查找階段。這對於那些擁有 QAT 硬件或將 QAT 加速集成到 Xeon Sapphire Rapids 和即將推出的 Emerald Rapids 處理器的用户來説是個好消息。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b673c0555866551114bd2e08b4c9c512046.png" referrerpolicy="no-referrer"></p><p>除了滿足英特爾的需求之外，內核中更新的 Zstd 代碼經過測試，發現在寫入+壓縮時間上可以減少約 6%。然而，讀取+解壓縮時間略有增加。Zstd 1.5.5 本身是在今年 4 月發佈的，其中包含了一些性能改進、修復和其他變更。</p><p>目前可以在郵件列表的補丁中找到適用於 Linux 內核的 Zstd 1.5.5 版本，內核維護者計劃在 Linux 6.8 合併窗口提交這項工作。</p><p>這次 Zstd 代碼的升級將為 Linux 內核帶來更好的壓縮性能，這對於文件系統驅動程序的透明文件系統壓縮/解壓縮、將各種內核資源壓縮為 Zstd 格式等方面都是有益的。</p><p>詳情查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F20231121010318.524570-1-nickrterrell%40gmail.com%2FT%2F%23m693429838032e235560212b8339b315dcaa02460" target="_blank">https://lore.kernel.org/lkml/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267826/zstd-1-5-5-patches-linux-kernel</guid>
            <link>https://www.oschina.net/news/267826/zstd-1-5-5-patches-linux-kernel</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌將於 2024 年 6 月開始禁用 Manifest V2]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fresuming-the-transition-to-mv3%2F" target="_blank">宣佈</a>恢復&nbsp;<span style="background-color:#ffffff">Manifest V2 的</span><span style="background-color:#ffffff">棄用時間表，以繼續向 Manifest V3 邁進從而提供更高的安全性和隱私保障。</span>計劃最早將於 2024 年 6 月開始在 Chrome 127 及更高版本的 pre-stable 版（開發版、金絲雀版和測試版）中禁用 Manifest V2 擴展。</span></p><p><span style="color:#000000">生效後，Manifest V2 擴展程序將在瀏覽器中被自動禁用，並且無法再從 Chrome 網上商城安裝 Manifest V2 擴展程序。與此同時，Manifest V2 擴展程序將失去 Chrome 網上商城中的精選徽章（如果目前有的話）。</span></p><p><img height="311" src="https://static.oschina.net/uploads/space/2023/1123/174712_jZM4_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">此前谷歌曾宣佈 Chrome 瀏覽器將在 2023 年 1 月停止支持 Manifest V2 擴展，並且也不再支持更新。但後續卻因為 Bug 太多，導致</span></span><a href="https://www.oschina.net/news/221452/google-delays-chrome-manifest-v3">多次推遲發佈</a><span style="background-color:#ffffff; color:#333333"><span>&nbsp;</span></span><span style="color:#000000"><span style="background-color:#ffffff">Manifest V3 版本，延長&nbsp;Manifest V2 的使用日期，</span>並於去年 12 月宣佈暫停了 Manifest V2 的棄用計劃。</span></p><p><span style="color:#000000">在這將近一年的時間裏，項目團隊表示已根據反饋對 Manifest V3 進行了一系列修改，解決了開發人員反饋的問題併為遷移提供了更好的解決方案。</span></p><p><span style="color:#000000">該公司計劃逐步推出這一變更，同時收集用户反饋並收集數據，以確保 Chrome 瀏覽器用户充分了解詳情並尋找到可替代的擴展。預計變更從 pre-stable 版推廣到 Chrome 穩定版至少需要一個月的時間，具體時間可能會根據收集到的數據而有所不同。</span></p><p><span style="color:#000000">對於那些使用 ExtensionManifestV2Availability 策略來確保 Manifest V2 擴展在其組織中持續運行的企業，將有額外一年的時間（直到 2025 年 6 月）來遷移其組織中的 Manifest V2 擴展。在此之前，啓用了該策略的瀏覽器不會受到停用的影響。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">對於仍在發佈 Manifest V2 擴展的開發者，谷歌方面強烈建議他們在 2024 年 6 月之前完成向 Manifest V3 的遷移，並提供了一份</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fextensions%2Fmigrating%2F" target="_blank">遷移指南</a>。</p><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fresuming-the-transition-to-mv3%2F" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267820/google-resuming-the-transition-to-mv3</guid>
            <link>https://www.oschina.net/news/267820/google-resuming-the-transition-to-mv3</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[快來查收 KCL 社區開源快訊 | 雲原生模型、語言和工具鏈更新速遞!]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="258" src="https://oscimg.oschina.net/oscnet/up-10a425f008580d122921fd1db5cbadc672c.jpg" width="520" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:left"><strong>雙週同步開源進展</strong></p><p style="color:#000000; text-align:left"><strong>歡迎加入 KCL 社區進行互動～</strong></p><p style="color:#000000; text-align:left">KCL 是一個&nbsp;CNCF 基金會託管的基於約束的記錄及函數語言，期望通過成熟的編程語言技術和實踐來改進對大量繁雜配置比如雲原生 Kubernetes 配置場景的編寫，致力於構建圍繞配置的更好的模塊化、擴展性和穩定性，更簡單的邏輯編寫，以及更簡單的自動化和生態工具集成。</p><p style="color:#000000; text-align:left">本欄目將會雙週更新 KCL 語言社區最新動態，包括功能、官網更新和最新的社區動態等，幫助大家更好地瞭解 KCL 社區！</p><p style="color:#000000; text-align:left"><em><strong>KCL 官網：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io</a></strong></em></p><h2>內容概述</h2><p style="color:#000000; text-align:left">感謝所有貢獻者過去兩週 (2023 11.09 - 11.23) 的傑出工作，以下是重點內容概述</p><p style="color:#000000; text-align:left"><strong>📦 模型更新</strong></p><ul><li>KCL 模型數量新增至<span>&nbsp;</span><strong>200 個</strong>，主要新增與<span>&nbsp;</span><code>Pod</code>,<span>&nbsp;</span><code>RBAC</code><span>&nbsp;</span>相關的校驗模型及 Kubernetes 1.14-1.28 版本的模型參考文檔</li><li>可以在<span>&nbsp;</span><code>Artifact Hub</code><span>&nbsp;</span>中搜索瀏覽到所有模型的文檔及使用方式:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fsearch%3Forg%3Dkcl%26sort%3Drelevance%26page%3D1" target="_blank">https://artifacthub.io/packages/search?org=kcl&amp;sort=relevance&amp;page=1</a></em></li></ul><p style="color:#000000; text-align:left"><strong>💬 語言更新</strong></p><ul><li><strong>體驗改進</strong><ul><li>優化配置代碼塊的語法縮進檢查，不再強制報錯</li><li>支持通過文件路徑通配符作為編譯入口</li></ul></li><li><strong>錯誤修復</strong><ul><li>修復部分場景字典類型的類型推導錯誤</li><li>修復 Schema 參數數量的檢查</li></ul></li></ul><p style="color:#000000; text-align:left"><strong>🔧 工具鏈更新</strong></p><ul><li><strong>測試工具發佈</strong><ul><li>支持使用 KCL 函數編寫單元測試並使用工具執行測試</li><li>支持使用正則表達式過濾待測試用例</li><li>支持單元測試快速失敗功能</li></ul></li><li><strong>導入工具更新</strong><ul><li>修復 patterns 到正則匹配表達式的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F70" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/70</a></em></li><li>修復 minItems/maxItems 到字段長度校驗規則的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F69" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/69</a></em></li><li>修復 0 或空字符串為默認值的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F69" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/69</a></em></li><li>修復 Kubernetes CRD 到 KCL Package 轉換中包名的生成為：<code>${apiVersion}_${kind}</code>:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F68" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/68</a></em></li></ul></li><li><strong>包管理工具更新</strong><ul><li>新增 update 命令用於自動更新本地依賴:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkpm%2Fpull%2F212" target="_blank">https://github.com/kcl-lang/kpm/pull/212</a></em></li></ul></li></ul><p style="color:#000000; text-align:left"><strong>💻 IDE 更新</strong></p><ul><li><strong>體驗改進</strong><ul><li>支持包管理工具引入的外部包依賴 import 語句補全</li></ul></li><li><strong>錯誤修復</strong><ul><li>修復函數參數未定義類型錯誤顯示位置</li></ul></li></ul><p style="color:#000000; text-align:left"><strong>🏄 API 更新</strong></p><ul><li>新增 KCL 單元測試 API:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F904" target="_blank">https://github.com/kcl-lang/kcl/pull/904</a></em></li><li>新增 KCL 符號重命名 API:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F890" target="_blank">https://github.com/kcl-lang/kcl/pull/890</a></em></li></ul><p style="color:#000000; text-align:left"><strong>🔥 架構升級</strong></p><ul><li>KCL 設計並重構了新的語義模型以及支持最近符號查找和符號語義信息查詢 API</li><li>IDE 補全，跳轉和懸停等功能實現遷移至新語義模型，顯著降低 IDE 功能開發難度和代碼量</li></ul><p style="color:#000000; text-align:left"><strong>🚀 性能提升</strong></p><ul><li>KCL 編譯器支持語法增量解析以及語義增量檢查，大部分場景提升 KCL 編譯構建和 IDE 插件使用性能<span>&nbsp;</span><strong>5-10 倍</strong></li></ul><h2>特別鳴謝</h2><p style="color:#000000; text-align:left">以下排名不分先後</p><ul><li>感謝 @cr7258 對 KCL 模型庫以及 KCL 文檔的貢獻 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F203" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/203</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F209" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/209</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F210" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/210</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F211" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/211</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fmodules%2Fpull%2F67" target="_blank">https://github.com/kcl-lang/modules/pull/67</a></em></li></ul></li><li>感謝 @XiaoK29 為 KCL IDE 的懸停和引用查找功能代碼架構重構以及 KCL 文檔的貢獻 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F887" target="_blank">https://github.com/kcl-lang/kcl/pull/887</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F899" target="_blank">https://github.com/kcl-lang/kcl/pull/899</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F205" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/205</a></em></li></ul></li><li>感謝 @MeenuyD, @negz 對&nbsp;<strong>Crossplane KCL Composition Functions</strong>&nbsp;集成的討論與支持 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues%2F885" target="_blank">https://github.com/kcl-lang/kcl/issues/885</a></em></li></ul></li><li>感謝 @kolloch 對&nbsp;<strong>Bazel KCL</strong>&nbsp;構建規則腳本的寶貴反饋 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Frules_kcl%2Fpull%2F2" target="_blank">https://github.com/kcl-lang/rules_kcl/pull/2</a></em></li></ul></li><li>感謝 @陸雲, @Even Solberg, @Prahalad Ramji @Matt Gowie, @ddh 和 @mouuii 在使用推廣 KCL 過程中的交流與寶貴反饋 🙌</li></ul><h2>精選更新</h2><h3>在 Artifact Hub 上檢索 KCL 代碼包及雲原生模型</h3><ul><li>通過 k8s 模型編寫或者校驗 Kubernetes 配置</li></ul><p style="color:#000000; text-align:left">&nbsp;</p><p><img height="413" src="https://oscimg.oschina.net/oscnet/up-be579d3f163ed2a9ef989f516169d64f9b1.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>通過 Open Application Model (OAM) 開放應用模型配合 KubeVela 控制器進行應用發佈與運維</li></ul><p style="color:#000000; text-align:left">&nbsp;</p><p><img height="770" src="https://oscimg.oschina.net/oscnet/up-8a2737b64f74b1d5a27733ce7a5a084a195.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>查找 KCL 代碼庫如&nbsp;<code>jsonpatch</code>&nbsp;進行配置操作</li></ul><p><img height="718" src="https://oscimg.oschina.net/oscnet/up-15703cf81898b8126bed226fd3e1c45141a.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>通過引入 KusionStack Modules 模型生態並配合 KusionStack 增強客户端的應用交付體驗：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack%2Fcatalog" target="_blank">https://github.com/KusionStack/catalog</a></em></li></ul><p><img height="697" src="https://oscimg.oschina.net/oscnet/up-16ff10fe152afe1ca5321397a39a1b5b41d.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:left">想了解更多？🤔️ 後續我們會通過一系列文章講解各個模型更具體使用場景以及工作流程，敬請期待! 此外，200+ 模型的源代碼位於&nbsp;<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fmodules" target="_blank">https://github.com/kcl-lang/modules</a></em>，歡迎社區的小夥伴進行共建。❤️</p><h2>其他資源</h2><p style="color:#000000; text-align:left">❤️ 感謝所有 KCL 用户和社區小夥伴在社區中提出的寶貴反饋與建議。預計&nbsp;11 月底我們會正式發佈 KCL v0.7 新版本，敬請期待!</p><p style="color:#000000; text-align:left">更多其他資源請參考：</p><ul><li><p>KCL 網站<span>&nbsp;</span><em>:</em><span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io/</a></em></p></li><li><p>KusionStack 網站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkusionstack.io%2F" target="_blank">https://kusionstack.io/</a></p></li><li><p>KCL 2023 路線規劃:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Fcommunity%2Frelease-policy%2Froadmap" target="_blank">https://kcl-lang.io/docs/community/release-policy/roadmap</a></p></li><li><p>KCL v0.7.0 Milestone:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F7" target="_blank">https://github.com/kcl-lang/kcl/milestone/7</a></p></li><li><p>KCL v0.8.0 Milestone:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F8" target="_blank">https://github.com/kcl-lang/kcl/milestone/8</a></p></li><li><p>KCL Github Issues:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues" target="_blank">https://github.com/kcl-lang/kcl/issues</a></p></li><li><p>KCL Github Discussion:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Forgs%2Fkcl-lang%2Fdiscussions" target="_blank">https://github.com/orgs/kcl-lang/discussions</a></p></li><li><p>👉&nbsp;戳鏈接加入 KCL 社區:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity" target="_blank">https://github.com/kcl-lang/community</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267815</guid>
            <link>https://www.oschina.net/news/267815</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[feilong 4.0.3 發佈了，讓 Java 開發更簡便的工具庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#1f2328; text-align:start">feilong 4.0.3 發佈了，讓 Java 開發更簡便的工具庫</p><ol><li>讓你從大量重複的底層代碼中脱身,提高開發效率;</li><li>讓你的代碼<code>更簡煉</code>，<code>易寫</code>、<code>易讀</code>、<code>易於維護</code>;</li></ol><p style="color:#1f2328; text-align:start">文檔地址:<span>&nbsp;</span><a href="http://feilong-core.mydoc.io/">http://feilong-core.mydoc.io/</a></p><p style="color:#1f2328; text-align:start">maven 依賴配置:</p><div><pre>&lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
     &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;com.github.ifeilong&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;
     &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;feilong&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;
     &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;4.0.3&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;
&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;</pre><div>
  &nbsp;
 </div></div><p style="color:#1f2328; text-align:start">Gradle 依賴配置:</p><div><pre><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">com</span>.<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">github</span>.<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">ifeilong</span>:<span>feilong</span>:<span style="color:var(--color-prettylights-syntax-constant)">4.0</span><span style="color:var(--color-prettylights-syntax-constant)">.3</span></pre><div>
  &nbsp;
 </div></div><p style="color:#1f2328; text-align:start">本次升級共有<span>&nbsp;</span><code>12</code><span>&nbsp;</span>處變更, 具體參見<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fmilestone%2F37%3Fclosed%3D1" target="_blank">4.0.3 milestone</a></p><h2>🐛<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Abug%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">bug</a></h2><p style="color:#1f2328; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F626" target="_blank">#626</a><span>&nbsp;</span>log 動態參數，最後一個 e 沒有生效 [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Afeilong-net-bot%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">feilong-net-bot</a>]</p><h2>🍑<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Afeilong-core%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">feilong-core</a></h2><p style="color:#1f2328; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F624" target="_blank">#624</a><span>&nbsp;</span>✨ 新建 com.feilong.core.lang.ThreadUtil.execute(List, Map&lt;String, ?&gt;, PartitionPerHandler) [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]</p><p style="color:#1f2328; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F635" target="_blank">#635</a><span>&nbsp;</span>PartitionEachSizeThreadConfigBuilder 新增 javadoc [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Ajavadoc%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">javadoc</a>]<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F636" target="_blank">#636</a><span>&nbsp;</span>✨ 新建 com.feilong.core.lang.ThreadUtil.execute(List, PartitionPerHandler) [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F630" target="_blank">#630</a><span>&nbsp;</span>✨ 新建 com.feilong.core.net.URLUtil.transformHttpsToHttp(String) [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F631" target="_blank">#631</a><span>&nbsp;</span>✨ 新建 com.feilong.core.net.URLUtil.transformProtocol(String, String, String) [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F627" target="_blank">#627</a><span>&nbsp;</span>✨ 新建 com.feilong.core.net.URLUtil.transformHttpToHttps(String) [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F632" target="_blank">#632</a><span>&nbsp;</span>標識 PartitionEachSizeBuilder<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFunctionalInterface" target="_blank">@FunctionalInterface</a><br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F633" target="_blank">#633</a><span>&nbsp;</span>標識 PartitionPerHandler<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFunctionalInterface" target="_blank">@FunctionalInterface</a><br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F634" target="_blank">#634</a><span>&nbsp;</span>標識 PartitionRunnableBuilder<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFunctionalInterface" target="_blank">@FunctionalInterface</a></p><h2>🍷<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Afeilong-net%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">feilong-net</a></h2><p style="color:#1f2328; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F629" target="_blank">#629</a><span>&nbsp;</span>✨ RequestByteArrayBody 支持字符串格式的 MimeType [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]</p><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Afeilong-net-bot%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">feilong-net-bot</a></h2><p style="color:#1f2328; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%2F625" target="_blank">#625</a><span>&nbsp;</span>✨ 新建個帶簽名類似於短信 [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fifeilong%2Ffeilong%2Fissues%3Fq%3Dis%253Aissue%2Blabel%253Aenhancement%2Bmilestone%253A4.0.3%2Bis%253Aclosed" target="_blank">enhancement</a>]</p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 08:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267802/feilong-4-0-3</guid>
            <link>https://www.oschina.net/news/267802/feilong-4-0-3</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Fortran 2023 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Fortran 2023 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.iso.org%2Fstandard%2F82170.html" target="_blank">已發佈</a>。Fortran 2023 是 Fortran 語言的最新版本，它在性能、易用性和並行編程方面都有顯著的改進。如果您正在編寫一個需要對大型數值數組進行快速計算的程序或庫，Fortran 2023 是您的最佳選擇。</p><p>Fortran 2023 根據 ISO/IEC 1539-1:2023 標準發佈。</p><p><img alt="" src="https://static.oschina.net/uploads/space/2023/1123/163021_T3nW_2720166.png" referrerpolicy="no-referrer"></p><p>Fortran 2023 是 Fortran 編程語言的最新版本。它是一種高性能並行編程語言，專為科學和工程計算而設計。Fortran 2023 具有許多強大的特性，使得它成為處理大規模數值數組的快速計算的理想工具。</p><ol><li><p>高性能：Fortran 2023 針對科學和工程計算應用進行了優化，具有成熟且經過實戰驗證的編譯器和庫，可以編寫接近底層的高效二進制代碼。</p></li><li><p>靜態和強類型：Fortran 是一種靜態和強類型的語言，這使得編譯器能夠在早期捕捉到許多編程錯誤。這也使得編譯器能夠生成高效的二進制代碼。</p></li><li><p>易學易用：Fortran 是一種相對簡單的語言，學習和使用起來非常容易。通過將大多數數學和算術操作表達為方程式，可以輕鬆地處理大型數組。</p></li><li><p>多功能：Fortran 允許您以最適合問題的方式編寫代碼：命令式、過程式、面向數組、面向對象或函數式。</p></li><li><p>本地並行：Fortran 是一種本地並行編程語言，具有直觀的類似數組的語法，用於在 CPU 之間傳遞數據。您可以在單個 CPU 上、共享內存多核系統上或分佈式內存的 HPC 或基於雲的系統上運行幾乎相同的代碼。Coarrays、teams、events 和集體子程序允許您表達最適合當前問題的不同並行編程模式。</p></li></ol><p>有關語法變更的摘要，查看：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffortran.bcs.org%2F2022%2FAGM22_Reid.pdf" target="_blank">https://fortran.bcs.org/2022/AGM22_Reid.pdf</a></u>。</p><p><img alt="" src="https://static.oschina.net/uploads/space/2023/1123/162951_mnjD_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 08:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267801/fortran-2023</guid>
            <link>https://www.oschina.net/news/267801/fortran-2023</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TQUIC - 高性能輕量級跨平台 QUIC 協議庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#1f2328; text-align:start">TQUIC 是 IETF QUIC 協議的實現。它是一個高性能、輕量級、跨平台的 QUIC 庫。</p><h4 style="text-align:start"><strong>特性及優點</strong></h4><ul><li><p><strong>高性能</strong>：TQUIC 是為高性能和低延遲而設計的。相關細節可以參考<a href="https://tquic.net/zh/docs/further_readings/benchmark">基準測試結果</a>。</p></li><li><p><strong>可插拔擁塞控制</strong>：TQUIC 支持多種擁塞控制算法，包括 CUBIC，BBR，BBRv3，COPA。</p></li><li><p><strong>多路徑傳輸</strong>：TQUIC 支持多路徑，一個連接可同時使用多個路徑提高性能及可靠性。</p></li><li><p><strong>易用性</strong>：TQUIC 提供易用的接口，支持靈活的配置參數，提供豐富的可觀測性。</p></li><li><p><strong>跨平台</strong>：TQUIC 可運行在 Rust 語言支持的各種平台，同時提供了 Rust/C/C++語言接口。</p></li><li><p><strong>基於 Rust</strong>：TQUIC 基於用內存安全語言編寫，可避免緩衝區溢出漏洞和其他內存相關錯誤的影響。</p></li><li><p><strong>高質量</strong>：TQUIC 包括充分的自動化測試，包括單元測試、模糊測試、集成測試、性能基準測試、互操作性測試等。</p></li><li><p><strong>協議一致性</strong>：TQUIC 已通過基於 Ivy 的形式化規範驗證。同時通過了 IETF 互操作性測試。</p></li><li><p><strong>豐富的功能</strong>：TQUIC 支持所有 QUIC、HTTP/3 規範中的重大功能。</p></li></ul><h4><strong>架構</strong></h4><p><img height="383" src="https://static.oschina.net/uploads/space/2023/1108/104746_mwuM_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 07:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/tquic</guid>
            <link>https://www.oschina.net/p/tquic</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何做好架構設計，架構設計有章可循嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>設計一個系統的過程，就是建造一座大廈的過程，架構設計的質量直接決定了大廈的質量。</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在我們進行系統的架構設計時，總是會遇到一系列的問題，比如一個大型系統的架構應該如何起步，從哪裏開始設計？系統是否應該劃分成多個模塊，應該怎麼劃分模塊才更加的合理？亦或是覺得產品提出的需求非常不合理，完全影響我們正常的架構設計！對於非功能性的需求，我們是否可以得過且過，不去重視？</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>這些問題，讓我們在剛開始架構設計時手足無措，但是隨着我們完成一個又一個的系統架構設計以後，發現架構設計是有章法可循的，只要我們學習這些章法和套路，並且在工作過程中不斷的積累與沉澱，就會行成一個完整的架構設計方法論，面對新的大型系統架構設計，也會一步一步有節奏進行，最終完成整體的架構設計。</span></span></span></p><span id="OSC_h1_1"></span><h1><span><span><span style="background-color:#b7eb8f">架構設計的原則</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計需要遵循一些原則：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">1、架構設計需要方法體系</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>架構設計並不是一個」單一的方法「，直接拿來進行架構設計，而是多個各具特色的方法，組成的「方法體系」，並且這個體系隨着新技術的發展還會不斷進化。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">2、架構設計是質疑驅動</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計是質疑驅動的過程，在」需求驅動「的基礎上，我們需要不斷的質疑我們架構設計的中間成果，進一步通過「質疑」，引入更多的「質量屬性」及更多「功能場景」。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">3、多階段下的多視圖</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計，是多階段還是多視圖？架構設計首先是「多階段的」，我們將架構設計劃分成多個階段，在每個階段中才會考慮」視圖「這個維度。</span></span></span></p><span id="OSC_h3_2"></span><h3><span><span><em><span>架構設計的三個階段</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>階段一、 預備階段</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>預備階段的目標：全面理解需求，把握需求特點，確定架構設計驅動力。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在預備階段，我們需要全面的梳理與理解需求，不放過任何一個需求細節。同時分析需求產生的各項質量屬性與系統約束，同時兼顧這些約束進行架構設計，才能不遺漏重大的架構屬性。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>階段二、 概念架構</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>概念架構，必須考慮包括</span></span></span><span><span><strong><span>功能</span></strong></span></span><span><span><strong><span>，</span></strong></span></span><span><span><strong><span>質量</span></strong></span></span><span><span><strong><span>，</span></strong></span></span><span><span><strong><span>約束</span></strong></span></span><span><span><span>在內的所有方面的需求。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>階段三、 細化架構</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在細化架構階段，我們從五個不同的角度出發，設計五個視圖，完成整個系統全方位的設計。</span></span></span></p><span id="OSC_h3_3"></span><h3><span><span><em><span>架構設計的一個貫穿環節</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><strong><span>對非功能需求的考慮</span></strong></span></span><span><span><span style="color:black">：</span></span></span><span><span><span>非功能需求無法一蹴而就，因為在設計的過程當中，會有新的需求不斷的被發現，即使設計完成，在開發階段，都會有影響非功能需求的約束出現，所以在整個階段，都應該注意非功能需求。</span></span></span></p><span id="OSC_h1_4"></span><h1><span><span><span style="background-color:#b7eb8f">預備架構階段分析</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>預備架構的最重要的目標，是建立需求大局觀，把握需求特點，確定架構設計驅動力。通過對需求的詳細分析，有一個宏觀的需求感知，同時還要兼顧系統的質量要求和約束對系統設計造成的制約條件。</span></em></span></span></p><span id="OSC_h3_5"></span><h3><span><span><em><span>需求結構化</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>需求是有結構的，而不是零散的需求點，只有將分析後的需求結構化，才能宏觀的感知整個需求。可以藉助 ADMEMS 二維矩陣，將架構影響因素，梳理脈絡。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如以下矩陣分析，將需求劃分為多個維度，橫向上從」廣義功能「」，質量「」，約束「三個方面分析，廣義功能是指需求需要滿足的基本功能，及產品或業務人員的直接要求。質量維度則是系統設計時需要考慮的高併發，高可用，可拓展等技術設計維護，保證系統在滿足基本需求的同時，同時對後續系統進化發展以及極端場景（例如：用户量激增，秒殺）等的滿足。約束則是系統設計時的一些制約，例如上線日期，上線環境，開發人員技能水平等。縱向上劃分為」業務級需求「」，用户級需求「」，開發級需求「三個維護」，業務級需求「是指產品或業務人員提出的基本要求」，用户級需求「則是從系統的使用用户角度出發，發現的例如用户電腦操作水平，用户使用習慣等潛在需求，而」開發級需求「，則是從研發人員角度出發，發現的例如可拓展，可測試，技術環境等不同維度的需求。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通過將需求結構化，我們可以全面的分析整體的需求，對需求進行整體的理解，同時也可以從不同的角度發現系統制約條件，在系統設計的最開始階段就着手設計，防止遺漏重大約束導致架構設計失敗。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-21F216gXpb11EiRfhbt.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_6"></span><h3><span><span><em><span>分析約束影響</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>約束分析的幾個方面：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 來自產品或運營人員的約束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>系統的非功能需求，例如：上線時間，預算，工期要求等</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>業務領域相關的限制，例如業務規則或業務限制，相關法律，專利等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 來自</span></span></span><span><span><strong><span>用户</span></strong></span></span><span><span><span>的約束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>系統的用户，同樣會產生約束性需求，比如用户的計算機水平，年齡段，使用偏好，國家等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如用户計算機水平整體較弱的話，在開發交互方式時就不應太過複雜，同時要兼顧系統的魯棒性，防止系統被用户搞掛。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>用户使用產品時的外部環境同樣可能產生約束條件，比如訪問環境是內網或是外網，則決定了系統提供訪問鏈接不同的網絡權限。訪問環境信號強度若，則系統的性能要求則更高。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 來自</span></span></span><span><span><strong><span>開發或運維人員</span></strong></span></span><span><span><span>的約束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>開發團隊的技術水平，磨合程度，同樣制約着系統的開發，如果開發人員均是高級研發人員且對當前技術棧有深入的瞭解，則開發進度就會更快，如果是新團隊，且需要對技術棧進行學習才可以介入開發，則在工期或系統風險層面需要額外考慮。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 業界</span></span></span><span><span><strong><span>當前技術環境</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>當前技術環境中間件的成熟程度，編程語言及流行度，優缺點等，都會對架構設計產生約束條件。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>約束的分類：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 直接約束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：系統運行於 linux 平台。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 轉換為功能需求的約束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>對於這種約束，可以直接轉換為功能需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：供應商擁有自己的一套城市信息表 -&gt; 引出的功能需求：需要進行城市轉換</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：供應商服務器性能差，tps 最大 10 -&gt; 引出的功能需求：需要進行限流請求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 轉換為質量屬性需求的約束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：系統使用者計算機水平不高</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>轉換為質量屬性：易用性（否則不會用），魯棒性（系統被搞癱）</span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><em><span>確定關鍵質量</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>系統的關鍵質量是需要進行取捨的，需要確認業務人員更注重那方面或在滿足需求的基礎上，確定哪些是必須的，哪些是可以適當忽略的。</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>我們需要首先確定架構重點支持哪些質量屬性，然後對於相互矛盾的質量屬性，進行權衡折中。例如當滿足性能這個質量屬性時，同時就會因為引入新的方案或組件，導致可維護性，可測試性降低；提高可拓展性時，就會對系統的性能和安全性產生影響等等，我們需要做的，就是在各個關鍵質量中進行取捨。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-22LELMr9d22zFXatK50.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_8"></span><h3><span><span><em><span>確定關鍵功能</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>確定關鍵功能的 4 個方面</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 核心功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 必做功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 高風險功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 獨特功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>其他常見系統不存在的功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><strong><span>注意衍生需求：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>從需求轉入設計時，因方案制定過程的複雜，會產生大量的衍生需求，衍生需求是原始需求的數倍。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>舉例：</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>原始需求：定時拉取供應商數據。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>衍生需求：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 由於供應商數量較多，需要引入分佈式定時任務，集羣併發拉取</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 由於供應商數據量大，需要分庫分表設計</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、需要快速搜索，引入存儲引擎組件等等</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-24DBopViOOSWkb7SO.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>這些衍生需求我們必須要考慮，雖然業務需求沒有體現，但缺失架構設計的關鍵影響因素。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>架構驅動力對比：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>業務需求驅動架構：</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-25pbrXAR24YnLHpXB21.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>重大需求驅動架構：</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-2511lKgKmtlkleQWxu.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>由此可以看出，通過重大需求驅動的架構，更能考慮到更關鍵的部分，設計的架構更能滿足需求的要求，架構設計成功的概率會更高。</span></span></span></p><span id="OSC_h1_9"></span><h1><span><span><span style="background-color:#b7eb8f">概念架構階段分析</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>概念架構階段，對系統進行適當的分解，而不陷入細節</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>概念架構的過程是，先根據關鍵功能進行初步設計，然後對設計的系統進行高層分割，接下來考慮非功能性需求（關鍵質量和約束），然後修改自己的初步設計，循環往復，在不斷的質疑和優化過程中，完善架構設計。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-26T7A52xvPwdCSGT7q.png" width="474" referrerpolicy="no-referrer"></div><p>&nbsp;</p><span id="OSC_h3_10"></span><h3><span><span><em><span>初步設計</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>初步設計的目標是發現職責，無需展開細節設計。基於關鍵功能，進行初步設計，</span></span></span><span><span><strong><span>基於主流程，關鍵流程，黃金流程等進行流轉圖設計，從而發現職責。</span></strong></span></span></p><span id="OSC_h3_11"></span><h3><span><span><em><span>高層分割</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>切分複雜系統，為多個二級系統。或者直接切分為具體子系統。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>高層分割的兩種方式：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 系統切分</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>切分的考慮點，包括系統功能、部署環境、語言、系統規模等</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如一個大型系統，切分為訂單，商品，供應鏈等系統。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 系統內切分</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>根據系統的職責、調用關係、通用性等，進行系統內部切分。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>最常見的就是分層，例如一個系統，切分為網關層，服務層，搜索模塊，man 端等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>分層的角度</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 邏輯分層</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>邏輯分層重視職責的劃分，職責直接常常是上層使用下層的關係，上層和下層，可以是分佈在不同的機器，也可以分佈在同一台機器。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 物理分層</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>分佈在不同機器上的軟件單元。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 通用性分層</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通用性不同的，劃分為不同的層，一般通用性越大，所處的層次越靠下。</span></span></span></p><span id="OSC_h3_12"></span><h3><span><span><em><span>考慮非功能需求</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>具體方法是：採用</span></span></span><span><span><strong><span>目標-場景-決策表</span></strong></span></span><span><span><span>，見下圖：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計是質疑驅動的，例如，質疑係統的可用性，考慮系統可能宕機，則引入集羣部署設計，考慮下游接口可能超時或出現異常，則引入接口降級的設計等。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-30khnlGt6Qe939QO21.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>考慮場景的 5 個要素</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 影響來源，來自系統內部還是系統外部</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 如何影響的</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 受影響的對象</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 有什麼問題或有什麼價值</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>5、 所處的環境為何</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>對場景的權衡因素：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>價值，代價，開發難度，出現幾率。對於某些場景，經過全面的權衡和思考，可以不支持，並不是所有的場景都要支持，否則可能存在過度設計。</span></span></span></p><span id="OSC_h1_13"></span><h1><span><span><span style="background-color:#b7eb8f">細化架構階段分析</span></span></span></h1><span id="OSC_h3_14"></span><h3><span><span><span style="color:black">邏輯視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>邏輯視圖是對系統的不同部分</span></span></span><span><span><strong><span>職責</span></strong></span></span><span><span><span>的劃分，根據職責不同，可以將系統進行細粒度的拆分，劃分為多個子系統。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="background-color:#87e8de">分層的細化</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>根據系統設計的需要，可以將系統的分層進行細化，例如展示層 -&gt; 業務層 -&gt; 數據層，可以細化為：展示層 -&gt; 控制層 -&gt; 接口層 -&gt; 接口實現層 -&gt; 數據層。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-32iq0B11mN3f32twUqC.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span style="background-color:#87e8de">分區的引入</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>分區的概念是業務流程相關的，分區的依據是：</span></span></span><span><span><strong><span>職責</span></strong></span></span><span><span><span>，比如結算流程可以作為一個分區，下單流程可以作為一個分區。將系統劃分為多個分區，一方面可以支持並行開發，另一方面也將系統劃分為多個子域，有利於業務概念和業務流程的收斂。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-33tPJdWeJMDcvCT5c.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="background-color:#87e8de">機制的提取</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>機制是指系統可以抽象的公共部分，例如公共工具，公共組件，公共流程等，提取這些公共部分，對於架構設計是至關重要的。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>劃分子系統的原則：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 職責不同的單元，劃分為不同的子系統</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 通用性不同的單元，劃分為不同的子系統</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 需要不同開發技能的單元，劃分為不同的子系統兼顧工作量，進一步切分太大的系統</span></span></span></p><span id="OSC_h3_15"></span><h3><span><span><span style="color:black">開發視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>開發架構視圖的任務，是將「邏輯職責」映射為「程序單元」，例如：要自主編寫的「源程序」，可重用的庫，框架等；同時進行開發技術選型，例如：開發語言，開發工具等，然後也需要確立程序單元間的關係，project 劃分，目錄結構，編譯依賴關係等。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-37jm117lDma8m21KTOo.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><span id="OSC_h3_16"></span><h3><span><span><span>運行視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>運行架構設計的工作內容，是確定引入哪些控制流：進程，線程等；確定每條控制流的任務，同時還要處理相關問題，例如控制流的創建，銷燬，通信機制等，控制流之間的同步關係，是否有資源爭用，是否需要加鎖等也需要考慮。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-37xeumJqiBEAkn0Su.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_17"></span><h3><span><span><span>物理視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>物理架構設計的 3 項任務</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1. 硬件的選擇與物理拓撲</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2. 軟件到硬件的映射關係</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3. 方案的優化</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>思維要點：「開銷」和「爭用」是核心，應避免爭用，降低開銷。</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>數據視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>數據視圖是系統的數據存儲設計，根據對系統的分析，確定一種或多種數據策略，常見的數據分佈策略如下 6 種：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>1、獨立的 Schema</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>不同系統應用，使用不同的數據 schema，數據完全獨立，一般界限清晰的不同系統可以採用這種方式。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-38IAcR6ctu568BXqUB.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">2</span></span></span><span><span><span style="color:black">、集中</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">不同的系統應用，使用同一個數據庫，一般具有關聯屬性的應用可以採用這種方式，比如一個系統分為服務端和管理端，但都屬於一個系統，則可以使用同一個數據庫。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-39lOCEP39j21zaVHggv.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">3</span></span></span><span><span><span style="color:black">、分區</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>水平分區</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>水平分區即我們常見的分表方案，當一個 schema 無法滿足我們的數據量要求時，可以劃分為多個分區，每個分區存儲一部分數據。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-396Zrt9eYBraZnGV0.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">垂直分區</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">垂直分區是分區策略的另外一個維度，當我們單庫無法承載巨大的數據量時，也可以根據數據的類別，進行垂直分區。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40EKfhbfQ13Rmif3x.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>4、複製</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">多個數據庫保存相同的數據，根據制定的更新策略保證不同庫之間的數據同步，</span></span></span><span><span><span>我們常用的讀寫庫分離，即為此方案，主庫提供寫能力，從庫提供讀能力，其中從庫的數據是根據主庫數據同步而來。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40LnrTouVj21EUvpx0.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>5、子集</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>根據一些特殊的場景要求，需要保存原數據的部分數據，例如 application1 保存全量訂單，application2 只需要部分出票成功的訂單，進行後續分析操作，則可以使用子集的策略進行數據視圖設計。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40Moxg9UObMUth8l9.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>6、重組</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">通過多個不同的 application 作為數據來源，異構至其他 application，用於數據的分析或後續流程使用。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-41RIaqyVykQOqcxwX.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h1_19"></span><h1><span><span><span>總結</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計的三個階段：預備架構階段；概念架構階段；細化架構階段</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計的四個要素：需求結構化；分析約束的影響；確定關鍵質量；確定關鍵功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>概念架構的三個步驟：基於關鍵功能初步設計；系統高層分割；分析非功能需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>細化架構的五個視圖：邏輯視圖；開發視圖；運行視圖；物理視圖；數據視圖</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>一個貫穿環節：非功能需求的考慮</span></span></span></p><span id="OSC_h3_20"></span><h3><span><span><span>參考資料</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1.《一線架構設計指南》</span></span></span></p><blockquote><p>作者：京東零售&nbsp;馮曉濤</p><p>來源：京東雲開發者社區，轉載請註明來源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 07:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10149764</guid>
            <link>https://my.oschina.net/u/4090830/blog/10149764</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[特斯拉「完全開源」初代 Roadster 設計和工程]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">埃隆·馬斯克 (Elon Musk)<span>&nbsp;在社交平台發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Felonmusk%2Fstatus%2F1727392569238159491" target="_blank">宣佈</a>，已將</span></span><span style="background-color:#ffffff; color:#222222">特斯拉 (Tesla) 初代 Roadster 跑車的設計和工程細節「完全開源」，併發布了所有人都可以訪問的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fservice.tesla.com%2Froadster" target="_blank">研發文件</a>。</span></p><blockquote><p><span style="color:#000000">「我們擁有的一切，現在你也擁有。」</span></p></blockquote><p><img height="312" src="https://oscimg.oschina.net/oscnet/up-34c1eef102f415f2e8a40190a16e4475a65.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">所披露的研發文件下方聲明指出：</span></span></p><blockquote><div><span style="color:#000000">此處提供的信息是為了向 Roadster 愛好者提供的，是在 Roadster 的研發設計階段創建的。它不是製造商的參考資料或維修保養材料，可能無法準確反映實際生產的車型或銷售的部件。如果您使用這些信息，您有責任確保遵守所有法律和安全協議，因為無論您是否使用此處提供的信息，我們都不對非特斯拉人員所做的任何工作提供任何保證。您還需瞭解，如果您根據此信息製造或設計零件或創建新的維修或程序，我們將不對它們負責，並且它們不是正品 Tesla 零件或配件或 Tesla 批准的程序。</span>&nbsp;
 </div></blockquote><p><span style="color:#000000"><span style="background-color:#ffffff">開源 Roadster 藍圖和技術細節的決定，被<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteslanorth.com%2F2023%2F11%2F22%2Ftesla-opens-up-original-roadster-design-and-engineering-to-public%2F" target="_blank">視為</a>特斯拉促進電動汽車行業創新與合作的戰略步驟。此舉允許世界各地的個人、公司和研究人員訪問、研究特斯拉首款電動跑車所採用的技術，並在此基礎上進行開發。「這標誌着特斯拉對其專有技術的態度發生了重大轉變。」</span></span></p><p><span style="color:#000000">特斯拉初代 <span style="background-color:#ffffff">Roadster&nbsp;</span>於 2008 年推出，是電動汽車行業的里程碑式車型。它是第一輛在高速公路上合法使用鋰離子電池的純電動汽車，也是<span style="background-color:#ffffff">第一款</span>每次充電行駛里程超過 200 英里的電動汽車。</span></p><p><span style="color:#000000">但是特斯拉<span style="background-color:#ffffff">初代 Roadster 當時只生產了 2000 多輛，且已經有十多年沒有進行量產。特斯拉</span><span style="background-color:#ffffff">新一代的 Roadster&nbsp;曾在 </span><span style="background-color:#ffffff">2017 年 11 月的</span><span style="background-color:#ffffff">一場活動中亮相，但在經歷了多次推遲之後，至今仍未正式推出。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 06:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267767/roadster-open-source</guid>
            <link>https://www.oschina.net/news/267767/roadster-open-source</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
