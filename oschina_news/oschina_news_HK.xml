<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 05 Nov 2023 12:35:07 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[OpenELA 公開發布 Enterprise Linux 源代碼]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#000000">Open Enterprise Linux Association (OpenELA)</span><span style="color:#000000"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenela.org%2Fnews%2F2023.11.02-governance_and_code_availability%2F" target="_blank">宣佈</a>公開發布 Enterprise Linux (EL) 源代碼併成立技術指導委員會。</span></p><blockquote><p><span style="color:#000000">「OpenELA 很高興地宣佈，現在所有人都可以獲取構建衍生&nbsp;Enterprise Linux 操作系統所需的全部源代碼包。初步側重點在於 EL8 和 EL9，EL7 的軟件包也即將推出。該項目致力於確保向社區無限期提供 EL 源代碼。」</span></p></blockquote><p><img alt="" height="381" src="https://oscimg.oschina.net/oscnet/up-08878f094d1e8bcafadeca1ea19e8f93ccc.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">OpenELA 是在今年 8 月份，由甲骨文、SUSE 和 CIQ (Rocky Linux 背後的商業實體) 聯合組建的一個開源企業 Linux 發行版開發商的行業協會；旨在通過提供開放和免費的 Enterprise Linux 源代碼，鼓勵<span style="background-color:#ffffff">與 Red Hat Enterprise Linux (RHEL) 兼容的發行版的開發和協作</span>。</span><span style="background-color:#ffffff; color:#000000">OpenELA 的形成源於紅帽</span><a href="https://www.oschina.net/news/246331/red-hat-centos-stream-sources">對 RHEL 源代碼可用性的更改</a><span style="background-color:#ffffff; color:#000000">。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Oracle、SUSE 和 CIQ&nbsp;方面都表達了對這一進展的喜悦之情。CIQ 首席執行官兼 Rocky Linux 創始人 Gregory Kurtzer 發言稱：</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">「幾十年來，各組織都在 CentOS 上進行標準化，因為它是免費的，遵循 Enterprise Linux 標準，並且得到許多供應商的大力支持。CentOS 停產後，不僅在生態系統中留下了一個巨大的漏洞，而且也清楚地表明瞭社區需要團結起來才能做得更好。OpenELA 正是這樣的一個社區答案，它將確保所有專業 IT 部門和企業用例擁有一個協作和穩定的未來。」</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">AlmaLinux 尚未加入該協會。AlmaLinux 操作系統基金會主席 benny Vasquez 評論表示，「</span></span><span style="background-color:#ffffff; color:#000000">我總是很樂於看到一個新的非營利組織站穩腳跟並開始</span><span style="color:#000000"><span style="background-color:#ffffff">運作。不過我們目前還不會使用他們發佈的代碼，因為我們已經建立了自己的工作流程，不需要使用這些代碼。」</span></span></p><p><span style="color:#000000">OpenELA&nbsp;已經<span style="background-color:#ffffff">完成了在美國特拉華州的非營利性非股份公司的註冊，正在向美國國税局申請 501(c)(6) 免税資格。該公司表示，將為有興趣支持開源企業 Linux 發行版開發目標和利益的利益相關者提供一個論壇。「創始公司認為，法律實體是對開源工作產生積極影響的基礎性工具，可以統一開源工作的價值觀，並確保與開源社區的適當接觸。」</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><strong>相關閲讀：</strong></span></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/253319/oracle-suse-ciq-openela" target="_blank">SUSE、甲骨文和 CIQ 組建 OpenELA：企業 Linux 源代碼的社區存儲庫</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 04:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264995/openela-enterprise-linux-source</guid>
            <link>https://www.oschina.net/news/264995/openela-enterprise-linux-source</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenHarmony 4.0 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">OpenHarmony 4.0 版本現已<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/release-notes/OpenHarmony-v4.0-release.md">發佈</a>，</span>開發套件同步升級到 API 10。相比 3.2 Release 版本，新增 4000 多個 ArkTS API，應用開發能力更加豐富；HDF 新增 200 多個 HDI 接口，硬件適配更加便捷；持續優化圖形框架和方舟編譯器（ArkCompiler），用户交互體驗得到進一步提升；ArkUI 組件定製化能力和組件動效能力也得到進一步增強；分佈式硬件支持的範圍擴大到音頻和輸入領域；分佈式數據為開發者數據分享帶來了全新的統一數據管理框架。</span></p><p><span style="color:#000000">另外，該版本在媒體、安全和隱私保護等方面也得到了進一步增強。</span></p><h2>特性説明</h2><h3>應用框架</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Stage 模型完善了以下特性：</p><ul><li><p style="margin-left:0; margin-right:0">新增 Extension 能力最小化管理，支持各類 Extension 滿足業務場景需要。</p></li><li><p style="margin-left:0; margin-right:0">新增 UIExtension 機制，用於實現有界面的 Extension，UIExtension 的界面可以通過 UIExtension 組件的方式嵌入到調用方應用的窗口上顯示。</p><ul><li><p style="margin-left:0; margin-right:0">支持統一的 UIExtension 模板，定義基礎的生命週期和上下文能力。</p></li><li><p style="margin-left:0; margin-right:0">支持原生默認的 Extension 界面展示，方便開發者快速實現 Extension 功能，同時也提供界面定製能力。</p></li><li><p style="margin-left:0; margin-right:0">提供連接和斷連 ExtensionAbility 的能力。</p></li><li><p style="margin-left:0; margin-right:0">支持對 UIExtensionAbility 頁面設置背景色。</p></li><li><p style="margin-left:0; margin-right:0">支持對 UIExtensionAbility 頁面隱私屬性，設置了隱私的頁面不能被錄屏或截屏。</p></li><li><p style="margin-left:0; margin-right:0">支持通過 UIExtensionAbility 連接 Service。</p></li></ul></li><li><p style="margin-left:0; margin-right:0">提供自定義操作業務的 ActionExtension、分享業務的 ShareExtension、備份恢復業務的 BackupExtension、驅動業務的 DriverExtension、打印業務的 PrintExtension。</p></li><li><p style="margin-left:0; margin-right:0">ArkTS 卡片能力增強，支持靜態卡片配置、靜態圖展示，有效降低卡片內存資源佔用，支持通過數據代理的方式刷新內容，有效降低卡片功耗。</p></li><li><p style="margin-left:0; margin-right:0">支持元服務的分享，應用開發者可以使用 UIAbility 組件提供的 UIAbility.onShare() 生命週期方法，設置要分享的數據。用户可以通過分享框把元服務和卡片分享到另外一台終端設備。</p></li><li><p style="margin-left:0; margin-right:0">跨端遷移能力增強，支持調用接口來動態打開和關閉遷移能力。應用可動態選擇遷移成功後是否遷移頁面棧，以及源端是否退出。</p></li></ul><h3>應用包管理</h3><ul><li><p style="margin-left:0; margin-right:0">支持應用安裝包免解壓特性，優化系統啓動性能和應用安裝性能。</p></li><li><p style="margin-left:0; margin-right:0">支持應用、元服務數據共享，在應用安裝時，解析證書文件中的 data-group-ids 列表，建立映射關係，創建數據共享路徑，實現應用與元服務數據共享。</p></li><li><p style="margin-left:0; margin-right:0">支持應用安裝時設置分發類型和附加信息，提供 ArkTS 接口實現應用分發類型和附加信息的設置和查詢。</p></li><li><p style="margin-left:0; margin-right:0">支持根據文件擴展名查詢打開文件的應用列表，實現通過文件擴展名打開文件。</p></li><li><p style="margin-left:0; margin-right:0">支持企業應用，提供企業 MDM 應用和企業 normal 應用的安裝，以及對企業應用的管理和吊銷。</p></li><li><p style="margin-left:0; margin-right:0">支持 overlay 能力，針對不同產品的顯示風格，開發者可以在不重新編譯打包情況下，新增資源文件 overlay 包，實現應用界面風格變換。</p></li><li><p style="margin-left:0; margin-right:0">拆包工具支持多語言，應用市場可查詢包中的多語言信息，支持在不同的語言環境下分發應用。</p></li><li><p style="margin-left:0; margin-right:0">支持 so 文件不解壓使用，即不解壓 so 文件到單獨目錄，運行期直接從包中讀取加載 so 文件，提升安裝速度和減少佔用的 ROM 空間。</p></li></ul><h3>ArkUI</h3><ul><li><p style="margin-left:0; margin-right:0"><strong>基礎組件增加或增強：</strong></p><ul><li>新增 UIExtension 組件，用於將一個應用通過 UIExtensionAblity 的方式，嵌入顯示到另一個應用內。</li><li>繪製組件 Rect/Circle/Ellipse/Line/Polyline/Polygon/Path/Rect/Shape 支持偏移、裁剪、遮罩等通用屬性，增強繪製組件基礎功能。</li><li>自定義彈框支持蒙層顏色及彈出動畫自定義，如允許設置彈出動畫效果的相關參數，增強彈框的開發者自定義功能。</li><li>bindContextMenu/bindMenu 支持自定義位置，允許設置菜單的位置，增強菜單基礎功能。</li><li>ColumnSplit 分隔線支持可拖動，增強組件基礎功能。</li><li>Refresh 組件支持自定義下拉刷新能力，允許設置下拉刷新時的顯示內容，增強組件基礎能力。</li><li>支持文本組件中返回輸入字符串的寬高，用於字符串摺疊顯示時，鼠標懸浮可彈出字符串完整提示框，增強文本組件基礎功能。</li><li>Xcomponent 組件支持 Texture 模式繪製。</li><li>Popup 組件支持自定義位置。</li><li>ArkTS/JS 卡片支持 UI 渲染完成的回調，方便獲取渲染完成的狀態並進行下一步處理。</li><li>Image/Text 組件支持設置隱私遮罩的屬性。</li><li>基礎組件特性增強，提升終端用户的體驗，包括彈框支持通過鍵盤 ESC 鍵逐層退出、ListItem 支持長距離左滑刪除手勢、ContextMenu 支持分段顯示能力等。</li><li>Grid 組件支持設置佈局信息。</li><li>Menu 組件支持設置圓角。</li><li>半模態組件支持設置高度自適應。</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>動畫效果增加或增強：</strong></p><ul><li>支持組件屬性變化的過渡動效，如組件的尺寸、背景色、透明度等屬性發生變化時通過過渡動效銜接變化前後的狀態，提升組件屬性變化時的動畫體驗。</li><li>支持給組件設置球面高階屬性、下邊緣像素擴展、取色模糊、G2 圓角、陰影、漸變等高階圖形屬性，豐富高階動畫效果。</li><li>佈局屬性、背景圖片大小位置屬性、顯隱屬性支持隱式動效。</li><li>List 新增支持 scrollToIndex 動效、Tasb 模糊動效、Popup 出現/消失動效。</li><li>支持自定義動畫，滿足多種多樣的動畫訴求。</li></ul></li><li><p style="margin-left:0; margin-right:0">開發效率增強：支持命名路由的能力，藉助此能力可針對不同頁面設置差異化的切換動效；輕量級 ArkUI 框架支持定義全局數據對象，可進行應用內頁面間的數據共享。</p></li><li><p style="margin-left:0; margin-right:0">框架能力增強，包括：全局 API 支持 Stage 模型多實例場景，支持 Rosen 渲染後端等。</p></li><li><p style="margin-left:0; margin-right:0">對富文本的交互能力增強：新增支持手勢長按選中文本、支持鼠標拖動選中文本、支持設置文本可編輯（通過通用屬性設置富文本框是否使能編輯）、支持對輸入事件的監聽。</p></li><li><p style="margin-left:0; margin-right:0">彈窗功能增強，新增錯誤、信息和詢問三種消息彈窗接口，完善警告彈窗三按鈕場景和交互優化。</p></li></ul><h3>ArkCompiler</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>高級語言調試調優：</strong></p><ul><li><p style="margin-left:0; margin-right:0">熱重載性能優化，支持多 hap 等場景。</p></li><li><p style="margin-left:0; margin-right:0">支持多實例調優。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>高級語言併發增強：</strong></p><ul><li><p style="margin-left:0; margin-right:0">TaskPool 支持任務中斷和取消，支持定義任務組（TaskGroup），支持對任務的狀態和調度信息進行打點，支持超長等待的任務進行識別和恢復。</p></li><li><p style="margin-left:0; margin-right:0">TaskPool 支持優先級設置及自動擴縮容算法。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>高級語言優化編譯：</strong></p><ul><li><p style="margin-left:0; margin-right:0">正式定義 ArkTS 語法規則並新增 ArkTS 語法檢查，在使用 DevEco Studio 進行代碼編譯時會對不符合 ArkTS 語法規則的代碼進行告警。語法檢查的規則詳見<a href="https://gitee.com/openharmony/docs/blob/master/zh-cn/application-dev/quick-start/typescript-to-arkts-migration-guide.md">從 TypeScript 到 ArkTS 的遷移指導</a>。</p></li><li><p style="margin-left:0; margin-right:0">AOT 優化編譯支持端側閒時編譯，增強編譯優化進一步提升性能。</p></li><li><p style="margin-left:0; margin-right:0">PGO 支持採集運行期的類型和函數熱點信息，支持 AOT 優化編譯 JS 代碼，提升動態 JS 代碼的運行性能。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>高級語言運行時其它功能：</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持動態 import 加載 NAPI 庫。</p></li><li><p style="margin-left:0; margin-right:0">NAPI buffer、object、arraybuffer、object type 接口功能補齊。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>編譯工具鏈更新：</strong></p><ul><li><p style="margin-left:0; margin-right:0">clang/llvm 工具鏈升級到 15.0.4 版本。</p></li><li><p style="margin-left:0; margin-right:0">libc 版本升級到 1.2.3 版本，libc 庫接口性能優化。</p></li><li><p style="margin-left:0; margin-right:0">sigaction 函數提供 sigchain 功能。</p></li></ul><h3>分佈式數據管理</h3><ul><li><p style="margin-left:0; margin-right:0">DataShare 客户端提供按 URI 前綴訂閲 DataShareExtension 數據變化的能力，被訂閲的 URI 前綴下任何 DataShareExtension 數據發生變化都會通知 DataShare 客户端。</p></li><li><p style="margin-left:0; margin-right:0">新增統一數據管理框架（Unified Data Management Framework, UDMF），支持數據標準化模型、設備內數據拖拽、UDMF 數據存儲適配、權限管理、生命週期管理。UDMF 框架下支持應用的跨設備拖拽，在此過程中允許對分佈式目錄中的文件臨時授權。</p></li><li><p style="margin-left:0; margin-right:0">提供 RDBstore NDK 接口 ：包含增/刪/改/查/事務、數據加密、數據分級保護、備份/恢復能力。</p></li><li><p style="margin-left:0; margin-right:0">Key-Value 和分佈式數據對象支持根據數據量自動選擇數據同步的通道。系統會根據數據量大小自動選擇藍牙通道或基於 Wi-Fi 的 P2P 通道進行數據的同步。</p></li><li><p style="margin-left:0; margin-right:0">支持系統應用通過數據管理服務代理靜默訪問其他系統應用的 DataShareExtension 數據，即不拉起 DataShareExtension 所在的應用即可訪問應用 DataShareExtension 的數據。</p></li></ul><h3>分佈式軟總線</h3><ul><li><p style="margin-left:0; margin-right:0">支持對基於軟總線連接的 link 信息進行管理。</p></li><li><p style="margin-left:0; margin-right:0">支持會話級的傳輸能力協商，可通過協商確定設備間傳輸的能力。</p></li></ul><h3>分佈式硬件</h3><ul><li><p style="margin-left:0; margin-right:0">分佈式音頻支持揚聲器（speaker），麥克風（mic）的資源池化管理，可以在 native 系統服務中跨設備使用遠端設備的揚聲器和麥克風，並支持控制遠端設備的揚聲器音量。</p></li><li><p style="margin-left:0; margin-right:0">分佈式輸入支持鍵盤，鼠標，觸摸板的資源池化管理，可以在系統應用中觸發跨設備的鍵盤、鼠標和觸摸板的使用。</p></li></ul><h3>文件管理</h3><ul><li><p style="margin-left:0; margin-right:0">支持文件分類視圖管理能力，圖庫等應用以相冊方式管理媒體文件（圖片、視頻無需關注具體存儲位置），相冊內添加、移除文件等功能不涉及具體的 File IO 行為。支持三方應用通過 PhotoAccessHelper 接口獲取相冊列表，訪問相冊內圖片、視頻等文件。</p></li><li><p style="margin-left:0; margin-right:0">提供增強的 FileIO 訪問能力，支持 randomAccessFile、moveDir、copyDir 能力。</p></li><li><p style="margin-left:0; margin-right:0">提供基於 URI 的文件臨時授權訪問及取消授權能力，支持文件的跨應用本地授權或跨設備授權。</p></li><li><p style="margin-left:0; margin-right:0">支持公共圖片文件在設備端和雲端進行同步（設備登錄的帳號需開通雲端服務），支持通過 picker 選擇雲端的圖片。</p></li><li><p style="margin-left:0; margin-right:0">支持應用定製備份恢復的目錄。</p></li><li><p style="margin-left:0; margin-right:0">支持應用監聽沙箱內的文件變化。</p></li></ul><h3>圖形顯示及窗口</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>圖形</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">穩定流暢：</p><ul><li><p style="margin-left:0; margin-right:0">對統一渲染模式進行了性能優化，包含基於共享內存的 IPC 性能優化、基於遮擋剔除和緩存等技術的渲染性能優化、基於硬件合成器能力的能效提升等。</p></li><li><p style="margin-left:0; margin-right:0">圖形處理依賴的渲染庫升級至 Skia 0310 新版本，提升了渲染性能。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">極致動效：</p><ul><li><p style="margin-left:0; margin-right:0">支持組件自繪製內容的屬性動畫。支持組件設置出現和消失的轉場動畫。</p></li><li><p style="margin-left:0; margin-right:0">支持取色能力，支持漸變模糊，支持邊緣像素擴展，支持漸亮效果，支持多種模糊材質能力。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">圖片能力增強：</p><ul><li><p style="margin-left:0; margin-right:0">圖片編解碼能力增強：支持 SVG 格式圖片解碼，ico 格式圖片解碼，GIF 增量解碼，jpeg_IDCT 縮放解碼，png 圖片編碼，圖片 exif 信息拓展。</p></li><li><p style="margin-left:0; margin-right:0">圖片接口能力增強：支持 Pixelmap JS 側的序列化反序列化，提供 ImageReceiver 和圖片解碼 NDK 接口。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>窗口</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持監聽窗口的獲焦狀態，可以監聽單個窗口的獲焦、失焦和顯示隱藏狀態。</p></li><li><p style="margin-left:0; margin-right:0">支持應用將子窗口 z 軸順序調整到當前應用窗口中的頂層。</p></li><li><p style="margin-left:0; margin-right:0">支持查詢屏幕的顯示模式（鏡像、擴展），提供停止鏡像和停止擴展 API。</p></li><li><p style="margin-left:0; margin-right:0">優化了 display 模塊的參數值獲取方式，從原先軟件方式優化為從硬件直接獲取真實值。</p></li><li><p style="margin-left:0; margin-right:0">支持通過窗口設置將屏幕亮度恢復默認值。</p></li><li><p style="margin-left:0; margin-right:0">重構沉浸式實現方式，優化應用打開、退出、跳轉下的動畫效果。</p></li></ul><h3>媒體</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>音頻</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持通過 Native 接口（OHAudio）進行音頻播放和錄製。對於音頻錄製和播放的時延比較敏感的場景，使用 Native 接口可實現更低的時延。</p></li><li><p style="margin-left:0; margin-right:0">支持查詢或監聽當前優先級最高的播放設備。</p></li><li><p style="margin-left:0; margin-right:0">支持鬧鐘音量的獨立調整。</p></li><li><p style="margin-left:0; margin-right:0">支持通過物理按鍵設置靜音。</p></li><li><p style="margin-left:0; margin-right:0">支持音頻焦點：應用播放音頻時無需手動申請焦點，系統會在後台自動申請焦點，並自動執行焦點策略（如暫停、淡出、淡出恢復等）；應用僅需要註冊焦點事件監聽函數，以接收焦點事件並更新狀態，如暫停時停止進度條。支持短音播放。</p></li><li><p style="margin-left:0; margin-right:0">支持音效模式：應用可查詢音頻輸出的音效模式，切換或關閉音效模式。</p></li><li><p style="margin-left:0; margin-right:0">支持系統內錄音能力：可根據音頻場景屬性篩選，錄製系統內播放的音頻數據，支持對錄音設備進行查詢。</p></li><li><p style="margin-left:0; margin-right:0">音頻設備能力增強：支持獲取音頻設備顯示名，播放對象詳細信息內可獲取當前播放輸出歸屬的設備名。支持對藍牙連接的多個可用於音頻播放的設備進行查詢並選擇音頻播放的設備。支持標準 USB 協議的音頻外設。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>播控框架</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持媒體提供方和控制方之間傳遞自定義媒體信息，應用可擴展媒體內容展示方式，如媒體控制方可要求媒體提供方按特殊形式顯示歌曲歌詞。</p></li><li><p style="margin-left:0; margin-right:0">支持媒體播放列表的框架能力，媒體提供方提供播放列表內容，媒體控制方獲取播放列表內容並可以選擇任一媒體內容進行播放。</p></li><li><p style="margin-left:0; margin-right:0">支持播放歷史記錄的框架能力，媒體會話框架提供查詢歷史播放應用的列表，列表項按播放先後順序排序（包含當前播放的和已退出的應用）。</p></li><li><p style="margin-left:0; margin-right:0">提供自定義媒體事件的傳輸通道，如歌詞內容的傳輸通道，媒體提供方提供歌詞內容，媒體控制方獲取歌詞內容。</p></li><li><p style="margin-left:0; margin-right:0">提供自定義的媒體控制命令的傳輸通道，媒體控制方可以利用該自定義命令傳輸通道向媒體提供方發送自定義控制命令，如媒體控制方要求媒體提供方顯示彈幕信息。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>媒體播放</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持基於 HLS 協議的網絡直播功能以及基於 datasource 的流式播放功能。</p></li><li><p style="margin-left:0; margin-right:0">支持基於 HDI 的 H.265 視頻硬解播放能力。</p></li><li><p style="margin-left:0; margin-right:0">支持播放音頻屬性設置，用户在使用播放器的時候可以選擇輸出聲音的類型。</p></li><li><p style="margin-left:0; margin-right:0">支持視頻自帶的旋轉播放功能。</p></li><li><p style="margin-left:0; margin-right:0">支持音效參數配置，可以在音頻框架支持音效的能力基礎上進一步配置音效。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>相機</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持前置預覽鏡像能力，默認情況下，前置預覽畫面呈鏡像狀態。</p></li><li><p style="margin-left:0; margin-right:0">支持分佈式攝像頭查詢該攝像頭的主設備屬性，包括設備名稱和設備類型。</p></li><li><p style="margin-left:0; margin-right:0">支持更精細化的分辨率查詢，可以按照預覽、拍照、錄像用途查詢支持的尺寸、格式和幀率信息。</p></li><li><p style="margin-left:0; margin-right:0">相機框架提供橫向歸一化座標系[0, 0, 1, 1]，所有與座標相關的操作都基於這套座標系完成。</p></li><li><p style="margin-left:0; margin-right:0">不同相機應用使用同一個攝像頭場景下，相機框架具備優先級管控和互斥策略。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>音視頻編解碼</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持獲取系統的音視頻編解碼，可以調用本模塊的 Native API 接口，查詢系統編解碼能力的支持情況。</p></li><li><p style="margin-left:0; margin-right:0">支持音視頻封裝，可以調用本模塊的 Native API 接口，完成音視頻封裝，即將音頻、視頻等編碼後的媒體數據，按一定的格式存儲到文件裏。</p></li><li><p style="margin-left:0; margin-right:0">支持音視頻解封裝，可以調用本模塊的 Native API 接口，完成音視頻解封裝，即從比特流數據中取出音頻、視頻等媒體幀數據。</p></li></ul><h3>事件通知</h3><ul><li><p style="margin-left:0; margin-right:0">支持應用設置靜態事件訂閲的開關。</p></li><li><p style="margin-left:0; margin-right:0">支持系統應用刪除已發佈的粘性事件。</p></li><li><p style="margin-left:0; margin-right:0">支持應用設置代表通知數量的數字角標。</p></li><li><p style="margin-left:0; margin-right:0">支持將通知設置為不可移除。</p></li><li><p style="margin-left:0; margin-right:0">支持選定通知並批量刪除通知。</p></li><li><p style="margin-left:0; margin-right:0">應用內事件處理模塊支持取消已按條件指定訂閲的回調。</p></li></ul><h3>通信與連接</h3><ul><li><p style="margin-left:0; margin-right:0">支持 NFC eSE 卡模擬能力。</p></li><li><p style="margin-left:0; margin-right:0">支持 Wi-Fi 連接 AP 時使用隨機 MAC。</p></li><li><p style="margin-left:0; margin-right:0">支持 Wi-Fi 通過靜態 IP 連接 AP。</p></li></ul><h3>系統服務管理</h3><ul><li><p style="margin-left:0; margin-right:0">支持系統服務按需啓動機制，例如外部調用、事件觸發，同時支持在設備空閒時自動退出系統服務。</p></li><li><p style="margin-left:0; margin-right:0">系統服務配置格式優化，使用 JSON 格式替代 XML 格式。</p></li></ul><h3>電源</h3><ul><li><p style="margin-left:0; margin-right:0">增強系統電量等級查詢及上報能力，支持電量等級的裁剪和定製。</p></li><li><p style="margin-left:0; margin-right:0">支持有線和無線充電類型上報，充電類型包括普通充電、快速充電和超級快速充電。</p></li><li><p style="margin-left:0; margin-right:0">增強運行鎖的管控機制，明確系統電源狀態和等級。</p></li><li><p style="margin-left:0; margin-right:0">提供喚醒源設置能力，支持通過電源鍵、鼠標、鍵盤、觸控板、屏幕、手寫筆、皮套等方式喚醒設備。</p></li><li><p style="margin-left:0; margin-right:0">提供休眠源設置能力，支持通過電源鍵、皮套、及超時自動休眠等方式設置設備休眠。</p></li><li><p style="margin-left:0; margin-right:0">提供電源管理、電池管理、顯示亮度管理、耗電統計及熱管理的開發指南。</p></li><li><p style="margin-left:0; margin-right:0">新增系統接口，支持設置系統立即進入睡眠狀態。</p></li></ul><h3>多模輸入</h3><ul><li><p style="margin-left:0; margin-right:0">支持將鍵盤輸入設備的原始事件映射為歸一化交互的意圖事件。</p></li><li><p style="margin-left:0; margin-right:0">支持用户根據個人習慣設置觸控板功能的個性化配置：</p><ul><li>支持兩種觸發模式映射鼠標左鍵功能：按壓、輕點。</li><li>支持兩種觸發模式映射鼠標右鍵功能：點按左/右下角、雙指點按或輕點。</li><li>跟蹤速度：支持 10 檔速度調節。</li><li>支持兩種交互模式映射鼠標滾輪功能：內容隨手指移動方向、內容隨手指反向移動。</li></ul></li></ul><h3>主題框架</h3><ul><li><p style="margin-left:0; margin-right:0">鎖屏管理服務：支持鎖屏事件回調機制、支持靜態/動態壁紙、支持查詢鎖屏時的業務狀態。</p></li><li><p style="margin-left:0; margin-right:0">壁紙管理服務：支持自定義壁紙、支持鎖屏/解鎖操作、支持重置壁紙。</p></li></ul><h3>上傳下載</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">新增接口，使用統一配置參數與接口完成上傳下載業務任務創建執行，完善業務流程。</p><ul><li><p style="margin-left:0; margin-right:0">支持任務信息持久化記錄，查詢方式靈活多樣，任務信息更加全面，支持按過濾條件查詢任務信息。</p></li><li><p style="margin-left:0; margin-right:0">增強安全隱私保護，增加系統管理接口權限。</p></li><li><p style="margin-left:0; margin-right:0">支持文件覆蓋下載、分片上傳下載、自定義 token 任務創建。</p></li><li><p style="margin-left:0; margin-right:0">支持服務按需啓停，應用調用相關接口時啓動，任務空閒時自動退出。</p></li></ul><h3>時間時區</h3><ul><li><p style="margin-left:0; margin-right:0">獲取系統時間、系統啓動時間提供同步接口。獲取到的時間更精準，且提供較好的開發者體驗。</p></li><li><p style="margin-left:0; margin-right:0">獲取日期接口廢棄，由 ArkTS 公共庫 new Date() 接口替代。</p></li></ul><h3>輸入法</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">新增同步接口，用於獲取編輯框信息。</p><h3>網絡管理</h3><ul><li><p style="margin-left:0; margin-right:0">提供 IPv6 基礎能力，包括 DNS 解析、應用通過 http/https/socket 聯網，蜂窩/Wi-Fi/有線網絡下均可支持 IPv4/IPv6 雙棧接入。</p></li><li><p style="margin-left:0; margin-right:0">新增同步接口，針對@ohos.net.connection 模塊的高頻接口，在原有異步接口基礎上新增了對應的同步接口。</p></li></ul><h3>打印</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">提供打印服務功能，應用可以通過 print 接口觸發打印業務。打印服務提供了系統默認的打印預覽界面和任務管理界面，可以管理網絡打印機設備連接。</p><h3>安全</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>加解密算法庫框架</strong></p><ul><li><p style="margin-left:0; margin-right:0">提供 DSA 數字簽名算法能力。</p></li><li><p style="margin-left:0; margin-right:0">提供 DSA、ECC、RSA 密鑰解析和密鑰參數的獲取能力。</p></li><li><p style="margin-left:0; margin-right:0">提供安全隨機數生成算法類型的獲取能力。</p></li><li><p style="margin-left:0; margin-right:0">提供 SM4 密鑰的隨機生成與轉換，以及加密解密能力。</p></li><li><p style="margin-left:0; margin-right:0">提供 SM3 密鑰的 HMAC 和 HASH 的能力。</p></li><li><p style="margin-left:0; margin-right:0">提供 SM2 密鑰的隨機生成與轉換、簽名及驗籤、以及加密解密能力。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>密鑰管理</strong></p><ul><li><p style="margin-left:0; margin-right:0">基於 GID 派生芯片級密鑰的能力。</p></li><li><p style="margin-left:0; margin-right:0">支持國密密鑰的安全導入。</p></li><li><p style="margin-left:0; margin-right:0">支持二次身份認證的細粒度訪問控制。</p></li><li><p style="margin-left:0; margin-right:0">密鑰管理簽名支持簽名 NO HASH 模式。</p></li><li><p style="margin-left:0; margin-right:0">密鑰管理算法支持運算時指定密鑰參數。</p></li><li><p style="margin-left:0; margin-right:0">支持 HUKS 密鑰加密保護。</p></li><li><p style="margin-left:0; margin-right:0">支持 KeyAttestation 公鑰證書中增加對密鑰所屬業務身份字段。</p></li><li><p style="margin-left:0; margin-right:0">支持標準 HDI 南向接口。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>設備互信認證</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">支持在以下兩種場景的設備間互信認證流程中生成假名，支持識別及標識設備的假名化名稱。</p><ul><li><p style="margin-left:0; margin-right:0">對同帳號登錄的多個設備進行互信認證。</p></li><li><p style="margin-left:0; margin-right:0">對非同帳號的點對點互聯的兩個設備進行互信認證。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>安全基礎能力</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">支持小型設備查詢其它設備的設備安全等級信息。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>證書管理</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">支持外部指定 RSA 密鑰簽名摘要及填充簽名和驗籤能力。</p><h3>程序訪問控制</h3><ul><li><p style="margin-left:0; margin-right:0">支持拉起應用粒度的權限管理界面。</p></li><li><p style="margin-left:0; margin-right:0">支持對系統應用的所屬身份進行校驗。</p></li><li><p style="margin-left:0; margin-right:0">優化權限管理的菜單呈現，拆分媒體和文件的權限組，相應權限的授權粒度更加精細化。</p></li></ul><h3>帳號</h3><ul><li><p style="margin-left:0; margin-right:0">支持帳號授權能力擴展和三方應用使用帳號授權能力。</p></li><li><p style="margin-left:0; margin-right:0">支持域帳號插件管理、域帳號管理、域帳號認證能力。</p></li></ul><h3>用户 IAM</h3><ul><li><p style="margin-left:0; margin-right:0">提供統一身份認證控件，完善用户身份認證能力，方便系統開發者調用身份認證能力並且生態體驗統一。</p></li><li><p style="margin-left:0; margin-right:0">統一身份認證控件提供了系統默認的用户身份認證界面，選擇使用帶控件的接口 getUserAuthInstance, AuthParam 指定認證參數，WidgetParam 指定控件顯示參數。為確保用户在系統上有統一的身份認證體驗，建議開發者使用 API version 10 提供的新用户身份認證接口。</p></li></ul><h3>WebView</h3><ul><li><p style="margin-left:0; margin-right:0">W3C 能力補充完善：補充 Web camere 能力，以及 bindContextMenu、Select、date 類型 input 等 H5 標籤能力。</p></li><li><p style="margin-left:0; margin-right:0">支持多渲染進程的進程拆分。</p></li><li><p style="margin-left:0; margin-right:0">支持文字、圖片基礎拖拽能力。</p></li><li><p style="margin-left:0; margin-right:0">支持 WebRTC 的視頻會議能力（不含攝像頭共享）。</p></li><li><p style="margin-left:0; margin-right:0">支持渲染進程獨立 SELinux 標籤，增強安全基礎能力。</p></li><li><p style="margin-left:0; margin-right:0">支持識別 Web 組件渲染進程、顯示線程和場景信息，並通知系統資源調度進行 CPU 管控。</p></li></ul><h3>內核</h3><ul><li><p style="margin-left:0; margin-right:0">支持 HCK 內核接口框架。</p></li><li><p style="margin-left:0; margin-right:0">支持 Linux 內核 config 多級分層配置。</p></li><li><p style="margin-left:0; margin-right:0">代碼執行權限管控能力增強，新增了以下能力：</p><ul><li>支持安全內存機制。</li><li>支持不同場景的代碼執行權限管控策略。</li><li>支持代碼執行權限管控的全生命週期管理能力。</li><li>支持解析可執行文件獲取代碼段信息。</li><li>支持代碼頁的完整性保護能力。</li></ul></li></ul><h3>驅動</h3><ul><li><p style="margin-left:0; margin-right:0">擴展設備驅動框架提供以下能力：</p><ul><li>擴展設備驅動框架基於「驅動擴展 Ability（DriverExtensionAbility）」的能力，構建應用態擴展驅動包的開發、部署、安裝、更新、卸載、運行能力，開放全流程生命週期管理能力。</li><li>支持三方設備廠商開發的非標準協議的可插拔 USB 設備擴展驅動包，正常安裝到 OpenHarmony 系統。插入 USB 設備後，能正常識別 USB 設備並與擴展驅動包匹配。</li><li>支持三方應用通過擴展外部設備管理框架查詢並綁定 USB 設備擴展驅動包，完成對擴展驅動包定製功能的操作。</li></ul></li><li><p style="margin-left:0; margin-right:0">相機驅動提供以下能力：</p><ul><li>提供 USB 相機熱插拔識別能力，支持開機啓動檢查識別和啓動後熱插拔識別。</li><li>支持 USB 相機的預覽、拍照、錄像能力，提供相機格式、分辨率查詢和配置能力。</li></ul></li><li><p style="margin-left:0; margin-right:0">編解碼驅動提供 JPEG 圖片硬件解碼加速能力，包括獲取硬件解碼信息，初始化/去初始化，解碼，申請/釋放 buffer，提升用户瀏覽圖片流暢度體驗。</p></li><li><p style="margin-left:0; margin-right:0">傳感器驅動提供温濕度傳感器設備驅動能力，支持小型設備温濕度器件查詢，器件使能/去使能，數據查詢能力，豐富智能設備傳感器能力。</p></li></ul><h3>泛 Sensor</h3><ul><li><p style="margin-left:0; margin-right:0">支持對設備所支持的預置振動效果進行查詢，可通過 EffectId 查詢某個振動效果在設備上是否被支持。</p></li><li><p style="margin-left:0; margin-right:0">新增振動全停接口，無需傳入對應的振動模式，可直接停止當前任意模式所設置的振動。</p></li><li><p style="margin-left:0; margin-right:0">新增播放振動配置文件接口，支持從文件播放自定義觸覺的控制模式，播放執行結果依賴設備的振感器件能力。</p></li></ul><h3>測試</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>測試框架 arkxtest</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持自動化腳本測試套嵌套定義能力，提升開發者腳本設計靈活性。</p></li><li><p style="margin-left:0; margin-right:0">支持對象級斷言能力，提升測試腳本斷言能力。</p></li><li><p style="margin-left:0; margin-right:0">支持模擬中文輸入、模擬鼠標操作、區域截圖的能力。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>自測試執行框架 developer_test</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持測試任務管理能力，開發者通過任務 ID 執行歷史任務，提升開發者自測試效率。</p></li><li><p style="margin-left:0; margin-right:0">支持精準測試能力，支持子系統、部件、測試套、測試用例級測試用例篩選執行能力，提升開發者自測試效率。</p></li><li><p style="margin-left:0; margin-right:0">支持對接執行 hats 用例，豐富執行用例範圍。</p></li><li><p style="margin-left:0; margin-right:0">支持穩定性測試能力，支持測試用例亂序執行。</p></li><li><p style="margin-left:0; margin-right:0">支持覆蓋率統計能力，支持開發者本地一鍵式生成代碼覆蓋率數據。</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>穩定性測試工具 wukong</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">支持旋轉事件注入，增強注入能力。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>性能調試開發工具 SmartPerf Host</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持 Frame timeline 抓取和展示能力，開發者可以抓取和展示卡頓丟幀檢測的數據。</p></li><li><p style="margin-left:0; margin-right:0">支持 Scheduling analysis 抓取和展示能力，開發者可以抓取和展示 CPU 調度分析，線程調度分析相關數據。</p></li><li><p style="margin-left:0; margin-right:0">支持調用棧可視化和不同庫函數調用佔比展示能力，開發者可以抓取並通過餅圖的方式展示調用棧及不同庫函數的佔比</p></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>性能數據採集 SmartPerf Device</strong></p><ul><li><p style="margin-left:0; margin-right:0">支持應用冷熱啓、頁面內切換、滑動幀率測試能力，開發者可以測試應用冷熱啓動時延、頁面切換時延、滑動幀率測試能力。</p></li><li><p style="margin-left:0; margin-right:0">支持端側測試數據對接雲端看板能力，開發者可以將端側測試報告上傳雲端查看或下載雲端數據到本地。</p></li></ul><h2>配套關係</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>表 1</strong><span>&nbsp;</span>版本軟件和工具配套關係</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#40485b; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Helvetica,Arial,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Liberation Sans&quot;,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,&quot;Hiragino Sans GB&quot;,&quot;Wenquanyi Micro Hei&quot;,&quot;WenQuanYi Zen Hei&quot;,&quot;ST Heiti&quot;,SimHei,SimSun,&quot;WenQuanYi Zen Hei Sharp&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:942px; word-break:initial; word-spacing:0px"><tbody><tr><th>軟件</th><th>版本</th><th>備註</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">OpenHarmony</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">4.0 Release</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">NA</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Public SDK</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Ohos_sdk_public 4.0.10.13 (API Version 10 Release)</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">面向應用開發者提供，不包含需要使用系統權限的系統接口。通過 DevEco Studio 默認獲取的 SDK 為 Public SDK。</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">HUAWEI DevEco Studio（可選）</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">4.0 Release</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">OpenHarmony 應用開發推薦使用。獲取方式：<br><a href="https://gitee.com/link?target=https%3A%2F%2Fcontentcenter-vali-drcn.dbankcdn.cn%2Fpvt_2%2FDeveloperAlliance_package_901_9%2F9a%2Fv3%2FHBD3TfhiT_GFqeX44Qcwtg%2Fdevecostudio-windows-4.0.0.600.zip%3FHW-CC-KV%3DV1%26HW-CC-Date%3D20231027T004333Z%26HW-CC-Expire%3D315360000%26HW-CC-Sign%3D279824A013505EFC063997614DC1B6AB1C3A2EE5AC48CEF15DDB3E1F79DA435A">Windows(64-bit)</a><br> SHA256 校驗碼：2c88cf43e1ef6ba722aac31eccc8ef92f07a9b72e43a9c1df127017828a22137<br><a href="https://gitee.com/link?target=https%3A%2F%2Fcontentcenter-vali-drcn.dbankcdn.cn%2Fpvt_2%2FDeveloperAlliance_package_901_9%2Fe0%2Fv3%2Fy3Qc4UHsTn6i1M7yr3hVYg%2Fdevecostudio-mac-4.0.0.600.zip%3FHW-CC-KV%3DV1%26HW-CC-Date%3D20231027T004531Z%26HW-CC-Expire%3D315360000%26HW-CC-Sign%3D07F14E7173D87ABF73777BA0CF7ADF1C1264A7D94909976471AC420C1932E8A6">Mac(X86)</a><br> SHA256 校驗碼：25e491458eec50b4abddf5bed6aa85893801d70afbce02958f17bd904619405a<br><a href="https://gitee.com/link?target=https%3A%2F%2Fcontentcenter-vali-drcn.dbankcdn.cn%2Fpvt_2%2FDeveloperAlliance_package_901_9%2F94%2Fv3%2Fb0yynFMFSGGvbe--AQQR9w%2Fdevecostudio-mac-arm-4.0.0.600.zip%3FHW-CC-KV%3DV1%26HW-CC-Date%3D20231027T004429Z%26HW-CC-Expire%3D315360000%26HW-CC-Sign%3D451E5B5C6B6E721A6C35E96FD67791D50ADEC56E987D87CD61E9E5152F8D6626">Mac(ARM)</a><br> SHA256 校驗碼：284cb01f7b819e0da1d4fcacbbbbe8017ba220b5e3b9b1d5e4cc59ea30456acc</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">HUAWEI DevEco Device Tool（可選）</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">4.0 Release</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">OpenHarmony 智能設備集成開發環境推薦使用。<br><a href="https://gitee.com/link?target=https%3A%2F%2Fdevice.harmonyos.com%2Fcn%2Fdevelop%2Fide%23download">請點擊這裏獲取</a>。</td></tr></tbody></table></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 03:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264989/openharmony-4-0-released</guid>
            <link>https://www.oschina.net/news/264989/openharmony-4-0-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Protocol Buffers 25.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Protocol Buffers 25.0 已經發布。Protocol Buffers（protobuf）是&nbsp;Google 開源的語言無關、平台無關的可擴展機制，用於序列化結構化數據。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">具體更新內容包括：</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Announcements</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprotobuf.dev%2Fnews%2F" target="_blank">Protobuf News</a>&nbsp;可能包括針對即將發生的更改的附加公告或預先公告。</p></li></ul><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>Compiler</strong></p><ul><li>實現 proto2/proto3 的版本 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F3813b6622f6490b969c16e1b1ba7dcbd8f4e3209" target="_blank">3813b66</a>&nbsp;)</li><li>將 Protobuf 編譯器版本字符串定義為宏，並分離出後綴字符串定義。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F3c59585bc116bee70f5f00a10005ea1403aef062" target="_blank">3c59585</a>）</li><li>將 utf8_validation 功能添加回全局功能集中。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F153028d7f3029e066bb2287012e14417ca83d55c" target="_blank">153028d</a>）</li><li>設置版本更新程序以準備 poison pills 並將版本信息嵌入到 C++、Python 和 Java gencode 中。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F4322e00e5b4c2f36016f0eee614e0e823a693ed4" target="_blank">4322e00</a>）</li><li>合併 protobuf 和 upb Bazel 存儲庫 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F7286ffceb2f0a4489672a90c823e00425ab8ab5c" target="_blank">7286ffc</a>&nbsp;)</li><li>Editions：向 protoc 引入用於生成版本功能集默認值的功能。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F4019e254322b2312cc7431b45ae71bb8e3dfa035" target="_blank">4019e25</a>）</li><li>為 ExtensionIdentifier 創建 reflection helper。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F4d5ab7324ef4d79eda69c8ed5bcb35f35e6db6f1" target="_blank">4d5ab73</a>）</li><li>Editions：為 C++ 生成器提供指定其特性的 API。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fe897bcf3ff8004b7446bbe43a1fc28f9a92a11d4" target="_blank">e897bcf</a>）</li><li>發佈帶有聲明驗證的擴展聲明。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fe72b0e181b236ff23c03a9f9f97f58e6989f25c9" target="_blank">e72b0e1</a>）</li><li>Editions：將 string_field_validation 移植到 C++ 特性&nbsp;(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F1f9583069f0e2b11790ea36cc760ee371106f232" target="_blank">1f95830</a>&nbsp;)</li><li>Protoc：解析器拒絕顯式使用 map_entry 選項 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fpull%2F13479" target="_blank">#13479</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F8f5929230d5c5d117b84953463ef0da6d29ad36d" target="_blank">8f59292</a>&nbsp;)</li><li>放棄對 Bazel 5 的支持。(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fa80daa2a2caaaac9ebe9ae6bb1b639c2771c5c55" target="_blank">a80daa2</a>&nbsp;)</li><li>允許代碼生成器指定它們是否支持版本。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F2176a145ba210c286177032037e736bf97158f7d" target="_blank">2176a14</a>）</li></ul><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>C++</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>在<code>InternalOutOfLineDeleteMessageLite()</code>上設置<code>PROTOBUF_EXPORT</code>(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fpull%2F14434" target="_blank">#14434</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fdb89a51e4557c40abc8845b13277a83cdf917382" target="_blank">db89a51</a>&nbsp;)</li><li>更新過時的&nbsp;checked-in&nbsp;文件 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fpull%2F14431" target="_blank">#14431</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fada0be86608dc10b3c2c46e7e2a0951015abbcc3" target="_blank">ada0be8</a>&nbsp;)</li><li>將 PROTOBUF_NOINLINE 應用於某些需要它的函數的聲明。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F6e848b00c95556d4f4fc7a1a512cd31a33de75d6" target="_blank">6e848b0</a>）</li><li>使 JSON UTF-8 邊界檢查包含最大可能的 UTF-8 字符。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fe80b8ec620d71cdeca000dce835e5a167a8dc370" target="_blank">e80b8ec</a>）</li><li>減少<code>Map::size_type</code>到 32 位。Protobuf 容器不能超過 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F95d2b2ed5039c1b1606a5f8c9d9cb362a2a33c95" target="_blank">95d2b2e</a>&nbsp;)</li><li>將 Protobuf 編譯器版本字符串定義為宏，並分離出後綴字符串定義。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F3c59585bc116bee70f5f00a10005ea1403aef062" target="_blank">3c59585</a>）</li><li>在生成的 oneof 訪問器上添加<code>ABSL_ATTRIBUTE_LIFETIME_BOUND</code>屬性。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Fe33e0d2ba569c8a7d6d74b5a8b39d804ec2a0169" target="_blank">e33e0d2</a>）</li><li>將 utf8_validation 功能添加回全局功能集中。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F153028d7f3029e066bb2287012e14417ca83d55c" target="_blank">153028d</a>）</li><li>設置版本更新程序以準備 poison pills 並將版本信息嵌入到 C++、Python 和 Java gencode 中。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F4322e00e5b4c2f36016f0eee614e0e823a693ed4" target="_blank">4322e00</a>）</li><li>將 prefetching 添加到 arena allocations 中。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2Ffbdeb5af0b0f89dec79efc371ba75f838ffad2e8" target="_blank">fbdeb5a</a>）</li><li>合併 protobuf 和 upb Bazel 存儲庫 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F7286ffceb2f0a4489672a90c823e00425ab8ab5c" target="_blank">7286ffc</a>&nbsp;)</li><li>在生成的重複和 map&nbsp;字段訪問器上添加<code>ABSL_ATTRIBUTE_LIFETIME_BOUND</code>屬性。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F9a0a3cf0cd8b4ac5c8a06db89f76c5d754f850d0" target="_blank">9a0a3cf</a>）</li><li>gcc 7.5 上的 ICE 解決方法是不讓一個重載使用調用另一個重載。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F0522054f3ee5e32c9df15af7c11f046e91e77998" target="_blank">0522054</a>）</li><li>為 ExtensionIdentifier 創建 reflection helper。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F4d5ab7324ef4d79eda69c8ed5bcb35f35e6db6f1" target="_blank">4d5ab73</a>）</li><li>修復了 32 位 MSVC。(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F66cf6b1d9c22333a20d83ee02472e2e7162a8da6" target="_blank">66cf6b1</a>&nbsp;)</li><li>刪除&nbsp;protoc&nbsp;中禁用表驅動解析器的選項。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F6d03f9b19bd7aa10d541f6c1a11ac71f2851eece" target="_blank">6d03f9b</a>）</li><li>......</li></ul><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Java</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>實現 proto2/proto3 的版本 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F3813b6622f6490b969c16e1b1ba7dcbd8f4e3209" target="_blank">3813b66</a>&nbsp;)</li><li>從 Java gencode 字段訪問器表中刪除合成 oneof。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F9ad2268544a345d9ed449e766999388b895d18a3" target="_blank">9ad2268</a>）</li><li>Timestamps.parse：添加對時區偏移中無效小時/分鐘的錯誤處理。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F8f8513835c0c4ebe206a5ead04a1bd0c8c7d1dbf" target="_blank">8f85138</a>）</li><li>將 Protobuf 編譯器版本字符串定義為宏，並分離出後綴字符串定義。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Fcommit%2F3c59585bc116bee70f5f00a10005ea1403aef062" target="_blank">3c59585</a>）</li><li>在生成的 oneof 訪問器上添加<code>ABSL_ATTRIBUTE_LIFETIME_BOUND</code>屬性。<span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>(ht...</span></li></ul><p>更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprotocolbuffers%2Fprotobuf%2Freleases" target="_blank">查看更新説明</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 02:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264978/protobuf-25-0-released</guid>
            <link>https://www.oschina.net/news/264978/protobuf-25-0-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[崑崙萬維「天工」大模型正式向全社會開放]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 3 日，崑崙萬維「天工」大模型宣佈通過《生成式人工智能服務管理暫行辦法》備案，面向全社會開放服務！</p><p>用户在應用商店下載「天工 APP」或登陸「天工官網」（<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.tiangong.cn" target="_blank">www.tiangong.cn</a>）均可直接註冊使用。</p><p>官方介紹稱，「天工」是國內首個對標 ChatGPT 的雙千億級大語言模型，也是一個 AI 搜索引擎，一個對話式 AI 助手。「天工」擁有強大的自然語言處理和智能交互能力，能夠實現個性化 AI 搜索、智能問答、聊天互動、文本生成、編寫代碼、語言翻譯等多種應用場景，並且具有豐富的知識儲備，涵蓋科學、技術、文化、藝術、歷史等領域。</p><p><img height="232" src="https://oscimg.oschina.net/oscnet/up-4220721cc203df8b9704c1aa7e7fb303f00.png" width="500" referrerpolicy="no-referrer"></p><p>2022 年 12 月 15 日，崑崙萬維在北京舉行 AIGC 技術發佈會，發佈自研 AIGC 全系列算法與模型，覆蓋了圖像、音樂、文本、編程等多模態的 AI 內容生成能力。</p><p>2023 年 4 月 17 日，崑崙萬維正式發佈自研千億級大語言模型「天工」，同時宣佈啓動邀請測試。「天工」用過通過自然語言與用户進行問答式交互，AI 生成能力可滿足文案創作、知識問答、代碼編程、邏輯推演、數理推算等多元化需求。</p><p>2023 年 5 月 19 日，北京市經濟和信息化局公佈第一批《北京市通用人工智能產業創新夥伴計劃成員名單》。崑崙萬維成為第一批模型夥伴和投資夥伴。</p><p>2023 年 8 月 23 日，崑崙萬維推出國內第一款 AI 搜索產品——「天工 AI 搜索」，並開啓內測申請。「天工 AI 搜索」深度融合 AI 大模型能力，通過人性化、智能化的方式全面提升用户的搜索體驗，為用户提供快速、可靠的交互式搜索服務，並集成 AI 對話、AI 寫作等常用功能，幫助用户提升工作效率，全面重塑中文搜索體驗。</p><p>2023 年 9 月，崑崙萬維多模態大模型 Skywork-MM 在騰訊優圖實驗室聯合廈門大學開展的多模態大語言模型測評 MME 中，綜合得分排名第一。該評測首次對全球範圍內 MLLM 模型進行了全面定量評測並公佈了 16 個排行榜，包含感知、認知兩個總榜單以及 14 個子榜單。Skywork-MM 模型位列綜合榜單第一，其中，感知榜單排名第一、認知榜單排名第二。</p><p>2023 年 9 月 16 日，在權威推理榜單 Benchmark GSM8K 測試中，崑崙萬維「天工」大模型以 80% 的正確率脱穎而出，大幅領先 GPT-3.5（57.1%）和 LLaMA2-70B（56.8%）。</p><p>2023 年 9 月 17 日，崑崙萬維通過信通院「可信 AI」評估，並被評選為人工智能實驗室副組長單位。經中國信通院評估，崑崙萬維天工大模型符合 AIIA/PG 0071-2023、AIIA/PG 0072-2023 評估標準，模型開發、以及模型能力均達到了「4+級」。</p><p>10 月 30 日，崑崙萬維開源百億級大語言模型「天工」Skywork-13B 系列，並配套開源了 600GB、150B Tokens 的超大高質量開源中文數據集。「天工」Skywork-13B 系列目前包括 130 億參數的兩大模型，Skywork-13B-Base 模型、Skywork-13B-Math 模型，它們在 CEVAL、GSM8K 等多個權威評測與基準測試上都展現了同等規模模型的最佳效果，其中文能力尤為出色，在中文科技、金融、政務等領域表現均高於其他開源模型。同時，崑崙萬維「天工」Skywork-13B 系列大模型全面開放商用——開發者無需申請，即可商用。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264987</guid>
            <link>https://www.oschina.net/news/264987</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[貴陽銀行迴應證實棄用易鯨捷]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">知名打假人王海發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.toutiao.com%2Farticle%2F7297260518304219682%2F" target="_blank">表示</a>，</span><span style="background-color:#ffffff; color:#000000">11 月 2 日下午，貴陽銀行董事長張正海在 2023 年第三季度業績説明會上，迴應證實了媒體報道的「貴陽銀行棄用了貴州易鯨捷假國產數據庫」。</span></p><p><span style="background-color:#ffffff; color:#000000">在與投資者互動和交流中，面對投資人提出的「易鯨捷在貴陽銀行建設的數據庫進展到什麼程度？」的問題時。貴陽銀行董事長張正海回答稱，「貴陽銀行新核心業務系統目前已經完成的開發測試工作，系統進入上線準備階段，預計於 2023 年 11 月 3 日 17:00 至 11 月 6 日 8:00 進行系統的上線工作。」</span></p><p><img height="199" src="https://oscimg.oschina.net/oscnet/up-54c947b770fd5c4889d4ea002bca25562ad.png" width="700" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">自 2020 年 10 月貴陽銀行耗資 4.26 億元以單一來源方式採購貴州易鯨捷國產數據庫應用項目以來，這是貴陽銀行第一次在與投資者互動和交流中，針對「易鯨捷數據建設到什麼程度」的回答中未提及「貴州易鯨捷」和「國產數據庫應用項目」，而是將 11 月 3 日「貴陽銀行系統升級」明確改為「上線新核心業務系統」，也拒絕回答關於「易鯨捷數據庫項目是否失敗？4.27 億是否存在利益輸送」的提問。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">互動和交流的前一天，已有媒體公開報道稱，貴陽銀行系統升級，即為貴陽銀行醖釀三年的核心業務系統替代工程正式啓動，甲骨文將替代貴州易鯨捷承擔起改行核心交易業務中的數據庫任務，雙方合作事宜將另行商議，貴州易鯨捷通過貼牌假冒國產數據庫這一醜聞震驚業內，成為輿論熱點。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">此前 10 月 23 日，貴陽銀行發佈在 11 月 3 日 17：00 至 11 月 6 日 8：00 進行系統升級暫停服務的公告，以系統升級降低輿論對棄用 4.26 億元天價國產數據的關注。</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-1fd874a630e4c716e5830945c23e9031a97.png" width="300" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264876</guid>
            <link>https://www.oschina.net/news/264876</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WinterJS —— Rust 編寫的 Service Worker]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>WinterJS 是用 Rust 編寫的 JavaScript Service Worker。</p><p>WinterJS 使用 SpiderMonkey 運行時執行 JavaScript（與 Firefox 使用的運行時相同），並遵循 WinterCG 規範，目的是最大限度地兼容 Cloudflare Workers、Deno Deploy 和 Vercel 等其他服務（因此命名為 WinterJS）。</p><p>WinterJS 除了速度極快，還能通過 WASIX&nbsp;<strong>編譯成 WebAssembly</strong>，因此完全支持在 Wasmer 上運行。</p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 02:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/winterjs</guid>
            <link>https://www.oschina.net/p/winterjs</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 基於連接的可擴展消息傳輸協議 SocketD]]>
            </title>
            <description>
                <![CDATA[<h1 align="center"><a id="user-content---socketd" class="anchor" href="https://gitee.com/noear/socketd#--socketd"></a>
  SocketD
</h1><p align="center"><strong>基於連接的可擴展消息傳輸協議</strong></p><p align="center"><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fsearch.maven.org%2Fartifact%2Forg.noear%2Fsocketd"><img src="https://img.shields.io/maven-central/v/org.noear/socketd.svg?label=Maven%20Central" alt="Maven" referrerpolicy="no-referrer"></a><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE-2.0.txt"><img src="https://img.shields.io/:license-Apache2-blue.svg" alt="Apache 2" referrerpolicy="no-referrer"></a><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fjavase%2Fjavase-jdk8-downloads.html"><img src="https://img.shields.io/badge/JDK-8-green.svg" alt="jdk-8" referrerpolicy="no-referrer"></a><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fjavase%2Fjdk11-archive-downloads.html"><img src="https://img.shields.io/badge/JDK-11-green.svg" alt="jdk-11" referrerpolicy="no-referrer"></a><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fjavase%2Fjdk17-archive-downloads.html"><img src="https://img.shields.io/badge/JDK-17-green.svg" alt="jdk-17" referrerpolicy="no-referrer"></a><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fjavase%2Fjdk21-archive-downloads.html"><img src="https://img.shields.io/badge/JDK-21-green.svg" alt="jdk-21" referrerpolicy="no-referrer"></a><br><a target="_blank" href="https://gitee.com/noear/socketd/stargazers"><img src="https://gitee.com/noear/socketd/badge/star.svg" alt="gitee star" referrerpolicy="no-referrer"></a><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fnoear%2Fsocketd%2Fstargazers"><img src="https://img.shields.io/github/stars/noear/socketd.svg?logo=github" alt="github star" referrerpolicy="no-referrer"></a></p><br><p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fjq.qq.com%2F%3F_wv%3D1027%26k%3DkjB5JNiC"><img src="https://img.shields.io/badge/QQ%E4%BA%A4%E6%B5%81%E7%BE%A4-870505482-orange" referrerpolicy="no-referrer"></a></p><hr><p>SocketD 是一個基於連接的、可擴展的、消息驅動的傳輸協議。具有異步，自動分片，背壓流控，雙向通訊，多路複用，斷線重連，支持籤權，基於主題消息等特性。</p><ul><li>具有語言無關性的二進制通信協議（支持 tcp, ws, udp）</li><li>異步非阻塞消息驅動通信</li><li>可以進行流量控制、自動連接恢復</li><li>支持雙向通信（如：單鏈接雙向 RPC 接口調用）</li><li>更加適合分佈式通信場景</li><li>支持 ssl，支持國密 ssl</li><li>消息有由元信息和數據組成，通過元信息實現可擴展性</li><li>接口簡單</li></ul><p>開發時，主要交互只有 2 接口對象（更多可見：<a href="https://gitee.com/noear/socketd/blob/main/API.md">API.md</a> ）：</p><table><thead><tr><th>接口</th><th>描述</th><th>説明</th></tr></thead><tbody><tr><td>listener</td><td>監聽器</td><td>（可雙向互聽）</td></tr><tr><td>session</td><td>會話</td><td>（可雙向互發）</td></tr><tr><td></td><td></td><td></td></tr><tr><td>session::send</td><td>發送</td><td></td></tr><tr><td>session::sendAndRequest</td><td>發送並請求</td><td>要求一次答覆</td></tr><tr><td>session::sendAndSubscribe</td><td>發送並訂閲</td><td>答覆結束之前，不限答覆次數</td></tr><tr><td>session::reply</td><td>答覆</td><td></td></tr><tr><td>session::replyEnd</td><td>答覆結束</td><td></td></tr></tbody></table><h3><a id="user-content-適用場景" class="anchor" href="https://gitee.com/noear/socketd#%E9%80%82%E7%94%A8%E5%9C%BA%E6%99%AF"></a>適用場景：</h3><p>可用於 MSG、RPC、IM、MQ，等一些的場景開發，可替代 http, websocket, grpc 等一些協議。比如移動設備與服務器的連接，比如一些微服務場景等等。</p><h3><a id="user-content-協議格式" class="anchor" href="https://gitee.com/noear/socketd#%E5%8D%8F%E8%AE%AE%E6%A0%BC%E5%BC%8F"></a>協議格式：</h3><ul><li>codec</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">[len:int][flag:int][sid:str][\n][topic:str][\n][metaString:str][\n][data:byte..]</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>flag</li></ul><table><thead><tr><th>Flag</th><th>Server</th><th>Client</th><th>備註</th></tr></thead><tbody><tr><td>Unknown</td><td>::close()</td><td>::close()</td><td></td></tr><tr><td>Connect</td><td>/</td><td>c(Connect)-&gt;s</td><td></td></tr><tr><td>Connack</td><td>s(Connack),s::c.onOpen()-&gt;c</td><td>s(Connack)-&gt;c::onOpen()</td><td></td></tr><tr><td>Ping</td><td>/</td><td>c(Ping)-&gt;s</td><td></td></tr><tr><td>Pong</td><td>s(Pong)-&gt;c</td><td>/</td><td></td></tr><tr><td>Close</td><td>s(Close)-&gt;c</td><td>c(Close)-&gt;s</td><td>用於特殊場景（如：T 人）</td></tr><tr><td>Message</td><td>s(Message)-&gt;c</td><td>c(Message)-&gt;s</td><td></td></tr><tr><td>Request</td><td>s(Request)-&gt;c(Reply)-&gt;s</td><td>c(Request)-&gt;s(Reply)-&gt;c</td><td></td></tr><tr><td>Subscribe</td><td>s(Subscribe)-&gt;c(Reply?..)-&gt;s</td><td>c(Subscribe)-&gt;s(Reply?..)-&gt;c</td><td></td></tr><tr><td>Reply</td><td>s(Reply)-&gt;c</td><td>c(Reply)-&gt;s</td><td></td></tr><tr><td>ReplyEnd</td><td>s(ReplyEnd)-&gt;c</td><td>c(ReplyEnd)-&gt;s</td><td>結束答覆</td></tr></tbody></table><h3><a id="user-content-鏈接示例" class="anchor" href="https://gitee.com/noear/socketd#%E9%93%BE%E6%8E%A5%E7%A4%BA%E4%BE%8B"></a>鏈接示例:</h3><ul><li>tcp://19.10.2.3:9812/path?u=a&amp;p=2</li><li>udp://19.10.2.3:9812/path?u=a&amp;p=2</li><li>ws://19.10.2.3:1023/path?u=a&amp;p=2</li></ul><h3><a id="user-content-簡單演示" class="anchor" href="https://gitee.com/noear/socketd#%E7%AE%80%E5%8D%95%E6%BC%94%E7%A4%BA"></a>簡單演示:</h3><ul><li>java</li></ul><p><a href="https://gitee.com/noear/socketd/blob/main/java">java/README.md</a></p>]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 02:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/noear/socketd</guid>
            <link>https://gitee.com/noear/socketd</link>
        </item>
        <item>
            <title>
                <![CDATA[Hyprland —— 動態平鋪式 Wayland 合成器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Hyprland 是一款基於 wlroots 的動態平鋪式 Wayland 合成器。</p><p>它提供最新的 Wayland 功能，可高度自定義，擁有所有美觀的外觀、最強大的插件、簡易的 IPC，以及比其他基於 wlr 的合成器更多的 QoL 功能等等...</p><p><strong>特性：</strong></p><ul><li>所有令人賞心悦目的內容：漸變邊框、模糊、動畫、陰影等等</li><li>大量定製</li><li>比其他基於 wlr 的合成器提供更多的生活質量內容</li><li>自定義貝塞爾曲線以獲得最佳動畫</li><li>強大的插件支持</li><li>撕裂支持以獲得更好的遊戲性能</li><li>易於擴展和可讀的代碼庫</li><li>快速、積極的開發</li><li>不害怕提供尖端功能</li><li>保存後立即重新加載配置</li><li>完全動態的工作空間</li><li>兩個內置佈局以及更多可用作插件的佈局</li><li>緊隨<code>wlroots-git</code></li><li>全局按鍵綁定傳遞給你選擇的應用程序</li><li>平鋪/偽平鋪/浮動/全屏窗口</li><li>特殊工作區（便籤本）</li><li>窗口組（選項卡模式）</li><li>強大的窗口/監視器/圖層規則</li><li>基於套接字的 IPC</li><li>原生 IME 和輸入面板支持</li></ul><p>&nbsp;<img height="282" src="https://static.oschina.net/uploads/space/2023/1030/172906_LCd1_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://static.oschina.net/uploads/space/2023/1030/172925_yXI2_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><img height="313" src="https://static.oschina.net/uploads/space/2023/1030/172946_yrzI_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 02:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/hyprland</guid>
            <link>https://www.oschina.net/p/hyprland</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 複用性風控：軟件複用成本的量化管理]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:justify">複用性（Reusability）是軟件工程中一個被頻頻使用的術語，它一般作為產品的賣點被宣傳，或者出現在技術設計文檔之中。大部分看到這個概念的的受眾只是將其作為一個積極的軟件非功能屬性去理解，但卻忽略了其背後隱藏的風險。本文從另一個角度出發，去分析「複用性」這一概念背後的風險及成因，藉助筆者在業務安全和基礎安全的一點經驗，提出了一個在軟件研發流程中，管理「複用性成本風險」的風險管理模型。從模型出發，我們可以認識到實現複用時面臨的各項挑戰、開發認知謬誤、複用成本的形式化定義方法等，希望這些輸入能為讀者在後續的技術決策和軟件研發流程提供些許幫助。</p><p style="text-align:justify">本文主要分為三個部分：第一部分介紹複用性的定義以及不合理複用引入的主要技術債，第二部分分析複用性失效的原因；第三部分為複用性軟件資產的構建方和使用方提供一個形式化的度量工具，該工具將奠定後續風險管理模型評估階段定量分析的基礎；第四部分提出一個用於管理「複用性風險」的模型，覆蓋軟件研發生命週期的全流程，通過事前評估、事中緩釋和事後迭代三個環節最大程度地降低由於軟件複用帶來的軟件開發和維護成本。</p><span id="OSC_h3_1"></span><h3>一、複用性的理想與現實</h3><span id="OSC_h4_2"></span><h4><strong>1.1 複用定義：從代碼到系統</strong></h4><p style="text-align:justify">軟件複用是解決軟件質量和生產力問題的一種方法，它指的是在軟件開發過程中重複使用相同或相似的軟件元素。通過合理利用軟件複用技術，我們可以提高開發效率，並且降低開發過程中的錯誤率。同時，軟件複用還可以促進團隊協作和知識共享，使得開發者們能夠更好地利用彼此的經驗和資源。因此，在當今快節奏的開發環境中，軟件複用已經成為提高生產力和質量的關鍵策略之一。在過去幾十年的時間裏，很多編程語言的成功（Python、Java 等）和開源文化的蓬勃發展，都與複用密不可分。軟件複用可以在不同粒度上進行，包括代碼和設計拷貝、源代碼複用、設計和軟件體系結構複用以及領域特定的軟件體系結構複用等。早期的軟件複用主要集中在代碼級別，例如共享方法、抽象類、庫、微服務和 Docker 鏡像等。隨着時間推移，其外延拓展至領域知識、開發經驗、設計文檔、需求分析和測試用例及數據等在不同階段所產生的各種軟件產品。<strong>在本文中，除非特別説明，複用性主要指的就是聚焦代碼的複用，下文中的「組件複用」，不僅限於通常我們認知中的公共庫，還包括代碼方法、公共類、軟件框架、可集成系統等軟件開發中的可複用元素。</strong></p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-963651fba23c39dc34c4a58a1a6eaacb_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_3"></span><h4><strong>1.2 複用風險：複雜度和成本</strong></h4><p style="text-align:justify">誠然，通過組件的複用可以提高軟件開發效率和質量，但複用不是銀彈，複用也會有一些副作用：</p><p style="text-align:justify">1.兼容性/安全性/性能；</p><p style="text-align:justify">2.增加了系統間的依賴；</p><p style="text-align:justify">3.增加了開發和維護成本。</p><p style="text-align:justify"><strong>首先，兼容性/安全性/性能</strong>等這幾類問題，是針對可複用組件的使用方來説的，一般來説，在決策是否複用之前就可以評估，其指標和過程也比較清晰，這裏就不具體展開了。</p><p style="text-align:justify"><strong>其次，複用會增加系統依賴。</strong>依賴關係是軟件的基本組成部分，無法消除，但軟件設計的目標之一是儘可能消除依賴關係，並使依賴關係儘可能簡單和明顯。當我們引入外部組件進行復用時，軟件組件之間的依賴關係會導致組件變更範圍的擴大以及組件認知負荷的增加，前者是針對組件維護方而言的，即看似簡單的變更需要在許多不同的地方修改代碼，<strong>隨着消費者數量的增長，在不同需求之間進行平衡變得越來越困難；</strong>後者是對於組件使用方而言的，即開發人員需要了解大量組件領域知識才能實現有效的組件複用。比如，需要了解待使用接口中若干入參的設計意圖、是否存在隱式依賴傳遞從而導致依賴衝突等。依賴的增加會為系統引入更多的複雜性，而我們知道，構建軟件系統的核心挑戰就是管理複雜性，複用組件只會在一定程度上轉移複雜性，但並不能消除複雜性。因此，我們需要在「複用組件降低成本」和「複用組件引入依賴（複雜性）」之間取得平衡。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-3612b21399b66c7600b9f27155d86f92_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify"><strong>最後，複用會增加各項成本。</strong>包括開發的成本、變更的成本、集成的成本、領域知識遷移的成本。對於一個面向複用設計的組件來説，實現正確抽象和通用框架的設計和開發成本，比一次性的解決方案高得多，對於組件的後續維護者來説，這樣的可複用框架和庫通常也會帶來陡峭的學習曲線（因為文檔一般是缺失的），組件會逐漸走向腐化，最後不得不推倒重來。此外，對於可複用組件的使用方來説，其理解和集成組件的成本通常也是被忽略的，一些強推的業務層的「偽複用框架」給前台集成的同學帶來了巨大的集成、學習和維護成本。</p><p style="text-align:justify">上述複用帶來問題，有一些是可以規避的，如兼容性、性能、容量等的匹配度，有一些是無法避免的，如設計通用化組件的開發成本、不合理的抽象導致的代碼腐化、不合理的複用導致的維護成本等。事實上，無論我們在技術上做多麼精妙的設計，技術的創新永遠滯後於系統的腐化速度。</p><p style="text-align:justify">為了最大程度的降低複用帶來的風險，本文提出一套從類比於安全風險管理的「複用性風險」應對模型，從事前評估、事中緩釋、事後迭代三個階段出發，最大程度地降低我們在開發可複用組件、使用可複用組件中遇到的各類風險。需要説明的是，<strong>上面以及後面指的「複用性風險」，定義為「由於不合理的複用決策，導致依賴和複雜度膨脹過快，從而導致軟件維護成本過高」的問題，</strong>除了成本風險外，由於複用組件的不合理使用或存在的缺陷而導致的兼容性、安全性、性能等方面的風險，其風險更為顯著和易於治理，因此不是本文論述的重點。此外，複用開發過程中的開發目標偏移、迭代和發佈計劃的延期、人員短缺等風險，限於篇幅也不在這裏展開。</p><p style="text-align:justify">第二部分首先會介紹導致「複用提升軟件開發效率」這一原則失效的幾類主要原因，第三部分會重點介紹用於評估複用性的若干工具，有了對複用性本質的認識後，再第四部分我們會簡要介紹複用性風險管理模型。</p><span id="OSC_h3_4"></span><h3>二、複用性風險根因分析</h3><span id="OSC_h4_5"></span><h4><strong>2.1 現實挑戰：正確和錯誤的抽象</strong></h4><p style="text-align:justify">我們複用組件的一個初衷，除了是為了提升研發效率之外，也是希望可複用組件可以將領域的複雜性隔離在一個我們永遠看不到的地方，從而整體降低組件使用方的系統複雜度。因此，一個可複用的組件，無論其規模大小，其設計過程就是對某個領域高度抽象的過程。在設計組件時，向上面對當前或潛在的需求，需要我們做一定的前向通用設計，向下儘可能屏蔽掉組件的實現細節，抽象的結果直接決定了後續該組件可複用性程度的高低（可複用性的度量將在下一個章節詳述）。但遺憾的是，良好的抽象能力對於大部分開發者來説是一個稀缺的產物，它需要對問題進行清晰的定義、簡化和分解，同時識別和利用通用模式，將子問題的解法組合起來形成一個整體解決方案，依賴對設計模式、開源的庫和框架、數據結構和算法以及大量生產項目的長期實踐和思考。</p><p style="text-align:justify">在日常的代碼中，我們不乏抽象，但大部分都是不合理的抽象。錯誤的抽象造成的危害甚於不抽象，比如常見的一個現象：對設計模式的適用範圍知之甚少，僅僅為了炫技而濫用設計模式，導致代碼的可讀性和可維護性下降。</p><p style="text-align:justify">除了對抽象能力的要求外，很多時候需求緊迫度、開發資源、責任心以及組件所在領域職責的變更等因素，都會導致可複用組件從出生就帶着「高成本」的原罪，其後續的使用成本和維護成本會急劇上升，這裏就不一一展開了。</p><span id="OSC_h4_6"></span><h4><strong>2.2 認知謬誤：複用不是設計目標</strong></h4><p style="text-align:justify">一個對於複用性的認知謬誤就是，把「不重複」等效為「複用」，這兩個概念之間有相似之處，但還是有一些微妙的差別。「不重複」即我們所熟知的 DRY 原則（Don’t Repeat Yourself），其目標是通過減少重複建設從而避免承擔副本不一致的維護成本，而 Reusability 是從所有代碼中找到重複的部分，然後在複雜度可控的前提下，努力抽象出可複用的東西。一堆不重複的代碼，並不代表存在可複用的組件。</p><p style="text-align:justify"><strong>複用只是實現不重複目標的一種手段，「不重複」才是我們設計軟件系統時的目標，單純追逐「複用性」很多時候會出現一些本末倒置的現象。</strong>如出現了一些接入成本非常高的自動測試框架、業務中台框架，一味追逐「（我）一次開發，（你）隨處使用」，殊不知在使用方需要消耗大量的精力去內化框架設計者的設計初衷，面對十幾個接入參數或配置文件一籌莫展。</p><p style="text-align:justify">舉個例子，偶爾會看到我們在業務層代碼中，部分同學會把簡單的新增和修改邏輯抽象為一個方法，美其名曰「提供給接入層複用」，如下面的 insertOrUpdate 方法中，初看是複用了領域對象轉換和用户對象是否存在的代碼，符合 DRY 原則，但實際上卻是混用了兩個不同的業務語義，會給後續的維護帶來較高的成本，如變更用户信息時，需要做更個性化的用户屬性處理，這時候調整領域對象轉換處的代碼，將會影響新增邏輯。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-3c8e7289db213680d7aa473520b964c9_720w.webp" referrerpolicy="no-referrer"></p><p>更合理的實現是，將明顯不同語義的代碼進行拆分，雖然看上去存在一定程度上的代碼重複，但其設計會更利於後續的功能迭代，也更符合代碼的「單一職責」設計原則。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-5f8500b6ba012049c89989be0edced10_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_7"></span><h4><strong>2.3 決策偏差：複用的決策權在哪</strong></h4><p style="text-align:justify">代碼的複用更多的時候是軟件開發者自發完成的，但我們無法忽視的一點是，如何集成、是否複用、如何複用、是否是同一個功能、使用什麼粒度的複用，很多時候是由業務架構決定的，「康威定律」還是無法迴避的。</p><p style="text-align:justify">比如，在一個新的場景裏，產品要求把「PPT 上與其名字相同的一個功能」進行復用，以快速上線，雖然他們除了名字相同，其產品形態、業務流程、環境依賴等都不一樣。最終強行「複用」的結果就是代碼邏輯裏出現了大量的分支判斷，底層技術架構變得臃腫。由於對於領域的理解不同，出現這種情況在所難免。雖然很多時候軟件複用的決策權並不在開發者這裏，但出於技術情懷也好，責任心也罷，開發者有義務去做這種糾偏，最大程度地消除這種差異性。但需要認識到技術的作用在這裏並不是決定性的，卓越的技術是複用成功的必要非充分條件。</p><span id="OSC_h4_8"></span><h4><strong>2.4 工具缺失：如何計算複用成本</strong></h4><p style="text-align:justify">複用性度量，主要分為兩個部分：</p><p style="text-align:justify">1.複用度：決定一個組件複用性高低水平的因素有哪些？</p><p style="text-align:justify">2.複用成本：組件集成方、組件所在的組織，決定實行復用策略後的 ROI 如何計算？</p><p style="text-align:justify">通過複用度和複用成本兩個指標，我們可以進行一定程度上的複用性定量分析，做出更為長遠的技術決策。比如，可以瞭解到一個複用性高的組件，其特徵有哪些？引入一個新的第三方組件時，除了基礎的功能性組件外，我還需要考慮哪些？相較於使用已經存在的組件，是否考慮重新造一個輪子？「複用」和「造輪子」間成本有多大？關於複用性的度量工具，第三部分將重點論述。</p><span id="OSC_h3_9"></span><h3>三、複用性的形式化度量</h3><span id="OSC_h4_10"></span><h4><strong>3.1 組件度量：可複用水平的評估</strong></h4><p style="text-align:justify">我們在設計一段代碼/一個類/一個模塊等可複用的組件時，一些可衡量的軟件指標共同決定了組件的可複用性水平的高低。這些指標包括：可靠性（Reliability）、可讀性（Understandability）、可維護性（Maintainability）、通用性（Generality）與可遷移性（Portability），如下圖所示。每一個指標可由各類代碼度量屬性決定，如組件的可遷移性由「組件的獨立性」和「耦合性」兩個屬性決定，大部分的度量屬性都是可以通過形式化定義並計算出來。不同指標的決定因子及度量值（括號中）如下：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-ae30c926a96772aa3e71efcc921e9e0e_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">1.<strong>可靠性：</strong>性能（響應時間）、容錯程度（恢復時間）；</p><p style="text-align:justify">2.<strong>通用性：</strong>類泛化水平（子類實例個數或接口實現類個數）；</p><p style="text-align:justify">3.<strong>可讀性：</strong>內聚性（類之間耦合度）、複雜度（圈複雜度）、規模（代碼行數）、文檔水平（數量+完整度）；</p><p style="text-align:justify">4.<strong>可維護性：</strong>易於修改、單測和迴歸測試（測試覆蓋度）、組件的獨立性（依賴數）、耦合性（類間耦合度）；</p><p style="text-align:justify">5.<strong>可遷移性：</strong>組件的獨立性（依賴數）、耦合性（類間耦合度）。</p><p style="text-align:justify">為了度量整個組件的的可複用性，有必要定義一個可複用性計算模型。該模型基於上圖所示的複用性屬性模型。主要的可複用性屬性、影響這些屬性的因素以及度量這些因素的量度之間的關係顯示在這個模型中。理論上，軟件組件的可複用性 (用&nbsp;<em>Reusability</em>&nbsp;表示) 可以用表達式來計算：</p><p style="text-align:justify"><em>Reusability = w1*M + w2*R + w3*P + w4*U + w5*G</em></p><p style="text-align:justify">其中&nbsp;<em>w1 ~ w5</em>&nbsp;為不同指標的權重值，指標&nbsp;<em>M（Maintainability）、R（Reliability）、P（Portability）、U（Understandability）、G（Generality）</em>&nbsp;值進行歸一化（0 ... 1）後，乘以每個指標不同的權重值，通過計算得到最終的組件的可複用度。</p><p style="text-align:justify">在上面的分析過程中，存在部分度量無法進行定量分析的情況，但不同因子組合計算還是有意義的，我們可以拿這些指標去評估我們目前的系統，存在的問題的嚴重程度。當下次別人問我們為什麼要複用組件 A 而不是組件 B 時，我們可以給出更令人信服的理由，而不僅僅是「我覺得」、「A 比 B 好很多」等論述。</p><span id="OSC_h4_11"></span><h4><strong>3.2 組織度量：複用的投入產出比</strong></h4><p style="text-align:justify">對組件的複用性有了一個感性認知後，更加一步地，讓我們從經濟的角度去思考複用性背後的成本問題。首先，我們先定義幾個變量&nbsp;<strong>RL、NUC、RCR、RCWR</strong>。</p><ul><li><strong>RL（Reuse Level）</strong>：可複用組件在應用中的比例，即 RL=複用的組件中代碼行數/應用總的代碼行數；</li><li><strong>NUC（Not Use Cost）</strong>：應用開發過程中完全不使用可複用組件的成本，注意不包括後續的維護成本；</li><li><strong>RCR（Relative Cost of Reuse）</strong>：複用既有的組件與重新造一個相似的輪子，這兩者之間工作量的比值，一般在 0.03~0.4 之間，經驗值為 20%，即這意味着複用所花費的成本大約是編寫新組件所投入的 20%；</li><li><strong>RCWR（Relative Cost of Writing for Reuse）</strong>：開發可複用的組件與開發一次性使用的模塊，這兩者之間工作量的比值，一般在 1.0~2.2 之間，經驗值為 1.5，即這意味着編寫可複用軟件需要大約 50% 的額外成本。</li></ul><p style="text-align:justify">對於集成方而言，可以計算因複用節省的成本（DCA，Development Cost Avoidance）以及複用後的成本節省比佔比（ DCAR，Development Cost Avoidance Ratio）：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-ac493599b0c28acc0e45e8e36f988186_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">舉例，如果複用度 RL = 40%， RCR = 0.2，則軟件集成方節約成本佔比 = 0.64，即節省了 64% 的成本。同時我們可以得到一個簡單的結論，對於組件的集成方來説，如果想要提升成本佔比，則需要：<strong>可複用組件在項目中的複用度越高越好，同時可複用組件的 RCR 應較低。</strong>這意味着可複用組件拓展性、可讀性需要保持在一個較高的水平，這樣集成方在集成時的二次開發和適配成本會較低，這個結論也是契合我們研發時的直覺的。</p><p style="text-align:justify">對於組織而言，假如某可複用組件的 N 個場景被使用了，則組織複用收益 OROI 可計算如下：</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-6d2fc9255a7e8362245fea5bbc0424ab_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">舉例：如果複用度 RL = 40%，RCR = 0.2，RCWR = 1.5，複用次數為 5 次，則，組織收益 OROI = 167%，這意味着開發一個可複用的組件，同時在多個場景進行復用，是有超額回報的。但是不是隻要複用了就會有收益呢？另 OROI = (N*(1-RCR) - RCWR)/RCWR &gt; 0 可以得到 N &gt; RCWR/(1-RCR)，帶入上面預設的 RCR = 0.2，RCWR = 1.5 這兩個值，得到 N &gt; 2，這意味着需要兩個或兩個以上的場景複用了此組件，我們此次研發活動才會取得正向的收益。與此同時，我們可以從上面的公式得到以下幾個關於提升組織複用 ROI 的結論：<strong>可複用組件在項目中複用度越高越好，開發可複用組件時，RCWR 和 RCR 越低越好。</strong>RCWR 低意味着不要去過度設計，組件的泛化性需要在領域內得到一定的控制，RCR 低意味着可複用組件可讀性好、拓展性高，集成時的成本不高。</p><p style="text-align:justify">馬丁·福勒（Martin Fowler）在《重構》一書提出了一條代碼重構經驗法則「Rule of Three 」，即我們可以複製和粘貼一次代碼，但是當複製相同的代碼三次時，應將其提取到新過程中進行抽象以便於複用，法則裏面的最小重複次數 3，其值亦符合上述 N &gt; RCWR/(1-RCR) 的結論。</p><span id="OSC_h4_12"></span><h4><strong>3.3 重複度量：複用和複製的邊界</strong></h4><p style="text-align:justify">回到我們第二節中所提到的問題：為什麼説 DRY 原則不等價於複用？假設以下場景：1. 項目中設計了全局的字符串常量類，所有的公共常量都放在此處，其他模塊中的類都引用此常量，這是一個好的實踐嗎，是不是定義模塊內的常量類或類中的常量字段會更好？2. 我需要進行字符串判重邏輯，是自己重寫一個字符串工具類，還是直接使用如 commons-lang 或 guava 包中的代碼呢？上面的場景都沒有絕對的答案，但就我目前看到的情況來看，在很多開發者的編碼習慣中，因為過度去追逐「複用性」，出現了一些沒有必要的依賴負擔，如使用全局常量類，出現沒必要的類加載，第三方包的隨意使用，造成應用包膨脹或者集成時的包衝突問題。<strong>有時候，複製一些類似的代碼比嘗試泛化再實例要好得多，過度使用抽象只會模糊真正關鍵的問題。</strong></p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-0ce4791fa1d8b3d3c325d20da80465f7_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">那什麼時候可以複製，什麼時候不建議呢？除了 2.2 中提到的語義不一致時的適度複製（就不是複用），當我們真實使用的代碼佔可複用組件整體代碼邏輯的比例較低時（譬如只使用了 commons-lang 包中的 StringUitls 類），可以考慮重寫一份，進行適度的複製粘貼，實現該處邏輯和集成方「自治」。對應前面的結論，這種情況下意味着 RL 較低，同時&nbsp;<strong>RCR 較高，比如 RL = 0.01，RCR = 0.8，則，軟件集成方節約成本佔比只有 RL*(1-RCR) = 0.2%</strong>，這一點收益同後續可能潛在的風險（包膨脹和包衝突）相比，複製可能是一個更好的選擇。</p><span id="OSC_h3_13"></span><h3>四、複用性風險管理模型</h3><p style="text-align:justify">有了前面兩個部分的鋪墊，我們再回頭去審視因為複用引入的成本風險，應該採取哪些措施能使得風險最小化呢？在業務風控和數據安全等泛信息安全的業務中，我們對風險管理的抽象，都會強調事前、事中、事後的風險控制流程。相似地，我們可以在代碼研發過程中，<strong>通過建立事前評估、事中緩釋及事後迭代的複用性風險管控手段</strong>，降低風險發生的可能性及其造成的影響，並根據業務架構和技術架構的發展趨勢採取規避、降低和轉移風險的措施，將風險控制到團隊可承受的水平之內，最大程度地避免或延緩因為複用導致的維護成本高、系統快速腐化等問題。</p><p style="text-align:justify">事前評估、事中緩釋、事後迭代形成的全生命週期複用性風險管理模型如下圖所示：</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-68fe36560c29dea37111fa27bd2310e9_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_14"></span><h4><strong>4.1 事前評估：成本與啓發式決策</strong></h4><p style="text-align:justify">風控的事前階段（評估+分析），一般基於某些黑樣本出發，挖掘出適用於後續風險對抗階段的某些風險行為特徵或模型，並基於歷史樣本計算出準確率和召回率。在複用性風險的事前階段，我們也可以通過定性和定量的評估手段，儘早發現各種複用時的「壞味道」，立即予以糾正或防範，把風險消滅在萌芽狀態，避免因為錯誤的複用引入過多技術債。評估的流程主要分為：可複用組件評估、複用成本和收益的度量、啓發式決策這三個階段，具體地：</p><p style="text-align:justify">1.如果待複用的組件是已存在的，則可以計算或估算出已複用組件的可複用水平，考量的指標即上面提到的可靠性、可讀性、可維護性、通用性和可遷移性，不同場景的指標權重不一，可以結合具體場景進行判斷；</p><p style="text-align:justify">2.如果待複用的組件是需要新建的，則可以計算出後續集成節約的人力成本，以及中長期的時間裏組織通過複用組件獲取的整體收益，通過結合複用成本、複用收益、當前組織人力現狀、後續業務進行最終的決策；</p><p style="text-align:justify">3.如果步驟 1 和 2 都得不到一個最終的結論，下面還有一些啓發式的經驗幫助我們決定是否真的需要複用。</p><p style="text-align:justify"><strong>可能需要複用的場景</strong>（抽象組件或複用既有組件）：</p><p style="text-align:justify">1.待複用的業務邏輯非常專業，如 Json 序列化、加解密；</p><p style="text-align:justify">2.相同或相似業務語義的代碼已經存在多（3）處，需要重構；</p><p style="text-align:justify">3.待選的可複用組件文檔非常全面，易於接入、拓展、替換或移除；</p><p style="text-align:justify">4.業務邏輯變更頻繁，每次變更需要同時變更多個系統或模塊以保持同步；</p><p style="text-align:justify">5.需要即時共享且對不一致性容忍度較低的一些業務邏輯單元，如表的元信息。</p><p style="text-align:justify"><strong>可能無需複用的場景</strong>（那就再造一個輪子吧）：</p><p style="text-align:justify">1.沒有文檔，或文檔質量較差；</p><p style="text-align:justify">2.重複造一個不太難，同時維護成本較低；</p><p style="text-align:justify">3.只使用了可複用組件所有功能裏的很少一點邏輯；</p><p style="text-align:justify">4.要花費大量的時間去了解可複用組件的設計思路；</p><p style="text-align:justify">5.可複用組件在拓展新功能時，需要投入大量的精力去協同推進；</p><p style="text-align:justify">6.可複用組件集成時的適配或拓展代碼，比單獨重寫該組件的代碼還要多；</p><p style="text-align:justify">7.可複用的組件是整個應用的核心，且後續業務發展迅速有較多的定製需求；</p><p style="text-align:justify">8.可複用組件的產品文檔或系統設計中承諾了太多的功能（餅），過於「雄心勃勃」；</p><p style="text-align:justify">9.最後一點：如果決策時覺得可用可不用，那大概率也是不需要複用的，相信自己的第一判斷。</p><p style="text-align:justify">通過成本和收益估算，以及若干啓發式的決策經驗，大多數的場景我們都可以評估得到一個清晰的是否複用的答案。軟件複用可能會在短期內提高生產力，但它可能會產生長期後果，所以這一步需要慎之又慎。</p><span id="OSC_h4_15"></span><h4><strong>4.2 事中緩釋：HCLC&amp;測試&amp;文檔</strong></h4><p style="text-align:justify">事中緩釋階段是控制複用性風險的核心環節，它主要聚焦在可複用組件的開發階段，通過一系列的關鍵步驟將複用風險在開發或正式使用前儘可能地降低，主要包括下面幾個要點：</p><ul><li>高內聚低耦合</li><li>單元測試和迴歸測試</li><li>完整且有效的文檔化</li></ul><p style="text-align:justify"><strong>高內聚低耦合（HCLC）。</strong>這是一個老生常談的事情了，內聚和耦合會影響可複用水平中的多個指標，如是否內聚會影響可讀性和可遷移性，耦合會影響可維護性、可遷移性和可讀性。軟件工程中已經有很多設計原則或模式供我們選擇了，如在代碼開發階段，優先組合、依賴倒置、裏式替換、接口隔離、單一職責、開放封閉、23 種設計模式等，在架構設計階段，也有若干的架構設計模式或方法論，如分層、CQRS、異步事件驅動、領域驅動設計等。</p><p style="text-align:justify"><strong>完整且有效的文檔。</strong>「好的代碼是自解釋性的」，這句話不完全對。首先，無論是我們的架構設計抑或是代碼設計，很多東西是無法在代碼中體系出來的，如對於領域抽象的取捨、決策的思考過程等，即便是我們的的接口、成員變量、實現，其命名和設計過程已經到了一個非常高的水平，代碼中「隱藏信息」還是會損失，而註釋可以儘可能去彌補這部分損失。其次，需要認識到：人類的感知與溝通速度是很慢且低效的，需要通過文檔去填補雙方溝通時的這一道鴻溝。當然，這裏討論的是一般情況，依託「無文檔化」構建核心「競爭力」的行為模式不應歸入此類。最後，一個正常的組織，人員是會流失的，大部分人最終都會離開這個組織，可複用組件的關鍵設計者如果不在組織裏了，這種知識性的損失將是永久性的，文檔（註釋、設計）起到了一個備份領域知識的作用。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-865f007635a00f99fa6fbed28bc1075e_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify"><strong>單元測試和迴歸測試。</strong>複用理論之所以成立，出發點是我們希望使用已經存在的、成熟的軟件資產來提升研發效率，同時降低系統缺陷，一套全面的自動化迴歸測試，不僅有利於集成方，也會讓後續和此可複用組件相關的每一個人受益。如果我們開發的可複用組件沒有自動化的迴歸測試，那這樣的組件是不合格的，是不應該發佈公共倉庫的。缺少自動化測試或核心流程自動化測試覆蓋度較低的組件，對於集成方和組件後續的維護者來説是一場災難，它給系統引入的巨大的技術債甚於完全沒有配套文檔的可複用組件。</p><span id="OSC_h4_16"></span><h4><strong>4.3 事後迭代：捕捉領域變化&amp;組織</strong></h4><p style="text-align:justify">在開發可複用組件時，如果一開始就大刀闊斧地投入研發資源，最終可能會創建與直接需求無關的軟件資產，並由於設計、開發和測試時間的增加而產生重大的進度風險，相反，通過多次迭代改進可複用組件來降低這些風險，<strong>一個良好的組件、框架和軟件架構需要時間來設計、實現、優化、驗證、應用、維護和增強。</strong>與此同時，第一階段的開發和集成結束後，在迭代的過程中進行持續性的風險管理，可以使得可複用組件的風險保持在一個較低的水位，儘可能地延長組件的生命力，需要做的主要事項包括：持續捕捉領域變化以及相應的組織支持。</p><p style="text-align:justify"><strong>捕捉領域變化。</strong>上面提到了，代碼中有部分內隱的知識，事實上，<strong>一個可複用的組件就是開發者對於某個領域思考的結果</strong>，無論它是以類文件、模塊還是系統的方式呈現。而領域都是會變化的，變化包括：領域的邊界會拓展、領域內部分實體內涵會變化、不同領域之間的邊界會重疊或者融合等。領域變化後，如果在這其中的可複用組件沒有進行適當的調整，就會出現技術和業務配速失效的問題。可複用組件在封裝了領域知識的同時，也一定程度上屏蔽了複雜度，當組件不足以承擔起領域的實體或功能出現偏差時，就會出現「複雜度泄漏」的問題。</p><p style="text-align:justify">捕捉域變化的兩個關鍵動作：統一領域上下文以及關註上遊需求池。統一領域上下文重要性不言而喻，<strong>很多時候各方意見出現偏差的根本原因是大家沒有形成統一溝通的語言，無法簡單、準確且清晰地描述各自的訴求。</strong>我在進行某風險域架構治理時，做的第一件事情就是拉上了業產研三方，統一大家對「規則」和「策略」兩個概念的內涵和邊界的認知。其次，開發人員和架構師需緊密關注需求池，從需求本身出發，區分領域中可變性和通用性的關鍵來源。識別出問題域中的所有變化是不現實的，我們可以關注一些關鍵問題，如面對一個新的需求，可以考慮：</p><p style="text-align:justify">1.我們討論的概念是否一致？</p><p style="text-align:justify">2.該需求涉及哪些領域實體？</p><p style="text-align:justify">3.該需求是否需要有我們新增實體？</p><p style="text-align:justify">4.新增實體是否會與既有實體產生二義性？</p><p style="text-align:justify">5.之前是否存在類似的需求？有什麼不同？</p><p style="text-align:justify">6.新增的需求是否可以和既有的邏輯進行隔離？</p><p style="text-align:justify">7.......</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-b4a6ff6154f2348778fd424cd86b6cfc_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">是否有一種指導原則，可以讓我們在跟蹤這些域變化的時候，進行更合理的設計與取捨呢？熵增原理告訴我們：一個孤立的熱力學系統的熵不減。對於系統的可逆過程熵不變，不可逆過程熵增加。因此，類比軟件工程領域，在組件的事後迭代階段，<strong>一個儘可能消除代碼設計/軟件架構中熵增的設計原則：在既有組件中新增的功能點需要存在逆向的刪除機制</strong>，這樣就可以儘可能讓可複用組件跳出逐漸混亂無法維護的宿命。功能可逆的具體操作具體可以表現為：SPI 機制（Service Provider Interface ）、面向接口的編程、通過模塊隔離隨機的或一次性的需求等。</p><p style="text-align:justify"><strong>組織和配套的文化。首先，組織是業務架構的投射</strong>，當複用組件內的領域實體和組織負責的領域實體出現偏差時，就會出現因錯位產生的技術債，結果無非是兩種：一種是之前的可複用組件直接被拋棄，任由其自生自滅；另一種缺少破釜沉舟進行重構勇氣與擔當，既然不是我負責的，那就改一改重新用，原先統一均衡的結構會快速打破。<strong>其次，可複用組件和框架的好壞取決於構建和使用它們的人</strong>，我們需要能評估風險和機遇的管理者，需要能識別領域本質複雜度和偶然複雜度、同時能很好掌握設計模式和架構模式的架構師，以及，在開發原則、模式和實踐上經驗豐富的開發人員，組件是否可複用、可以複用多久，很大程度上是具備良好設計和經驗豐富的開發人員的副產品。<strong>再者，在事後迭代階段，我們需要專門的團隊或負責人為此可複用資產負責</strong>，不斷監控平台代碼庫的健康，跟蹤和修復錯誤，堅持正確抽象，不斷完善文檔。當然上述只是理想情況，更多的時候，這樣的人或團隊是不存在的，或者即便存在，相應的組織激勵也是缺失的，在一個沒有複用的文化土壤中，組件腐化只是時間問題。最後，有了正確的組織和優秀的人，長期的<strong>信心、熱情、激勵以及管理層的支持與響應</strong>，也都是成功的複用必不可少的條件。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-2228938440622697c56b0d0ace934f73_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_17"></span><h3>五、關於複用的一點感想</h3><p style="text-align:justify">本文想重點去表達的幾個觀點：不要過度去追逐「複用」、可複用的水平以及複用投入產出比是可量化的、可複用資產是內隱的領域知識、適度的重複也是可接受的、文檔可以彌補領域知識的損失、架構演進中新增功能需可逆。</p><p style="text-align:justify">撰寫此篇文章的初衷，一方面源於近幾年來在指導新同學時，發現出現較多的「偽複用」現象，例如為了減少代碼，將共享的方法簽名放在接口中，形成「過程式接口」，另一方面，自己也寫過一些「為了複用」而設計的組件或模塊，從中間件到業務組件大概有十幾個了。但最近逐漸開始意識到，很多時候為了後續的可遷移性，一些架構或代碼層的的前向防禦性設計作用並不大，過度抽象反而是給使用方造成了一些理解上的困難。到底哪些真的需要複用，哪些可以妥協，梳理完這篇文章後，堅定了一部分想法（例如全程文檔化），也給一些既有觀念做了糾偏。</p><p style="text-align:justify">上面也一直在傳遞一個觀點，好的軟件資產是一個優秀團隊的副產品。當把複用的目光從軟件聚焦到人，我們自己身上，哪些是可以複用的，哪些又是平台或組織賦予我們的？去除掉那些光怪陸離的虛幻部分，不可變的部分又有哪些？授權後的高價值專利算一種，其有效期為二十年。思考過程中沉澱可能算另一種，它們或多或少且階段性地概述了當時的所思所想，無論內容是否全面、正確，也塗抹上了時光的顏色，這也是這篇文章產生的另一個動機。</p><p style="text-align:justify">作者｜齊光</p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">點擊立即免費試用雲產品，開啓雲上實踐之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1364680%3Futm_content%3Dg_1000382902" target="_blank">原文鏈接</a></strong></p><p style="text-align:justify"><strong>本文為阿里雲原創內容，未經允許不得轉載</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10140476</guid>
            <link>https://my.oschina.net/yunqi/blog/10140476</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | vivo 網絡端口安全建設技術實踐]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="letter-spacing: 0.578px;text-wrap: wrap;font-size: 15px;"><section powered-by="xiumi.us" style="text-align: center;font-size: 14px;"><p><span style="color: rgb(0, 82, 255);"><span style="letter-spacing: 0.578px;">揭秘 vivo 互聯網海量服務的研發之路&nbsp;</span><span style="letter-spacing: 0.034em;">報名中👇</span></span></p></section><section powered-by="xiumi.us" style="margin-top: 0.5em;margin-bottom: 0.5em;padding-right: 0.5em;padding-left: 0.5em;text-align: center;"><section style="border-width: 5px;border-style: solid;border-color: rgb(255, 255, 255);display: inline-block;line-height: 0;box-shadow: rgb(102, 102, 102) 0.2em 0.2em 0.5em;width: 394.094px;height: auto;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.vivo.com.cn%2Fvdc%2F2023%2Findex.html%23%2F" textvalue="‍‍" linktype="text" imgurl="" tab="outerlink" data-linktype="1"><span class="js_jump_icon h5_image_link"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="384" data-cropsely1="0" data-cropsely2="384" data-ratio="0.21944444444444444" data-s="300,640" src="https://oscimg.oschina.net/oscnet/67276678-97b5-4d79-8ae3-651f665ab878.png" data-type="jpeg" data-w="1080" style="height: 127px;vertical-align: middle;width: 578px;" referrerpolicy="no-referrer"></span></a></section></section></section><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">作者：vivo 互聯網安全團隊 - Peng Qiankun</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="font-size: 14px;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p style="text-wrap: wrap;">隨着互聯網業務的快速發展，網絡攻擊的頻率和威脅性也在不斷增加，端口是應用通信中的門户，它是數據進出應用的必經之路，因此端口安全也逐漸成為了企業內網的重要防線之一，然而網絡端口因其數量龐大、端口開放和關閉的影響評估難度大，業務影響程度高、以及異常識別技術複雜度高等特點給網絡端口安全治理帶來了一定挑戰，如何對端口風險進行有效治理幾乎是每個企業安全團隊在攻擊面管理工作中持續探索的重點項。</p></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、網絡端口簡介</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">在網絡空間中，標記一個服務資源實體最基本的兩個要素就是 IP 和邏輯端口，二者構建服務資源實體的唯一標誌符。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>1. &nbsp;常見的端口分佈劃分：</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（1）知名端口 (Well-Known Ports)</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">知名端口即眾所周知的端口號，範圍從 0 到 1023，這些端口號一般固定分配給一些服務。比如 21 端口分配給 FTP 服務，25 端口分配給 SMTP(簡單郵件傳輸協議) 服務，80 端口分配給 HTTP 服務，135 端口分配給 RPC(遠程過程調用) 服務等等。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（2）動態端口 (Dynamic Ports)</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">動態端口的範圍從 1024 到 65535，這些端口號一般不固定分配給某個服務，也就是説許多服務都可以使用這些端口。只要運行的程序向系統提出訪問網絡的申請，那麼系統就可以從這些端口號中分配一個供該程序使用。比如 1024 端口就是分配給第一個向系統發出申請的程序。在關閉程序進程後，就會釋放所佔用的端口號。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.&nbsp;&nbsp;另外，端口還會按照協議類型劃分</strong></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">（1）TCP 端口</p><p style="text-wrap: wrap;">&nbsp;</p><p style="text-wrap: wrap;">即傳輸控制協議端口，需要在客户端和服務器之間建立連接，這樣可以提供可靠的數據傳輸。常見的包括 FTP 服務的 21 端口，Telnet 服務的 23 端口，SMTP 服務的 25 端口，以及 HTTP 服務的 80 端口等等。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">（2）&nbsp;UDP 端口</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">即用户數據包協議端口，無需在客户端和服務器之間建立連接，安全性得不到保障。常見的有 DNS 服務的 53 端口，SNMP(簡單網絡管理協議) 服務的 161 端口，QQ 使用的 8000 和 4000 端口等等。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.&nbsp;&nbsp;常用的網絡端口映射表</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6138917262512769" data-s="300,640" src="https://oscimg.oschina.net/oscnet/affd180b-4e93-4677-a843-2a267a05b99a.png" data-type="png" data-w="979" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">&nbsp;圖 1 常用網絡端口映射表</span></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">PS：更多詳細端口規範可查閲：</p><p style="text-wrap: wrap;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.iana.org%2Fassignments%2Fservice-names-port-numbers%2Fservice-names-port-numbers.xhtml" textvalue="http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml" linktype="text" imgurl="" tab="outerlink" data-linktype="2">http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml</a></p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、端口利用方式</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 基於傳輸層的資源耗盡攻擊（DDoS）</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">該攻擊是非常有效的利用小流量衝擊大帶寬的攻擊手段，也是十分常見的攻擊方式。其本質還是利用 TCP 協議的鏈接建立（三次握手）及鏈接關閉（四次揮手）階段機制漏洞進行攻擊，鏈接資源耗盡攻擊方式主要分為以下幾個類別：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）&nbsp;SYN flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">SYN flood 是基於 TCP 協議產生的，它利用三次握手機制，製造多個半連接，消耗服務器的連接數。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.44166666666666665" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8c97a12b-6829-4190-9266-30e097022e4a.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 2&nbsp;SYN flood 示意圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">攻擊者偽造源 IP 地址向服務器發送大量的 SYN 報文，請求建立三次握手。由於發送源 IP 是偽造的，所以服務器迴應了 SYN-ACK 報文後，源 IP 並不會再繼續迴應 ACK 報文進行確認。這樣服務器就會維持一個龐大的等待列表，不停地重試發送 SYN-ACK 報文，同時佔用着大量的資源無法釋放。這就導致，被攻擊的服務器被惡意半連接佔滿，不再接受新的 SYN 請求，而合法用户無法完成三次握手建立 TCP 連接。另外，隨着對抗技術的持續演進，攻擊者通過肉雞或 Ddos 服務發起大規模分佈式真實 IP 集中進行資源耗盡攻擊，此類攻擊成功率更高。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）SYN-ACK Flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通信雙方通過三次握手建立一個 TCP 連接的過程中，SYN-ACK 報文出現在第二次握手中，是用來確認第一次握手的。一方收到 SYN-ACK 報文後，首先會判斷該報文是不是屬於三次握手範疇之內的報文。如果都沒有進行第一次握手就直接收到了第二次握手的報文，那麼就會向對方發送 RST 報文，告知對方其發來報文有誤，不能建立連接。SYN-ACK Flood 攻擊正是利用了這一點，攻擊者利用工具或者操縱殭屍主機，向目標服務器發送大量的 SYN-ACK 報文，這些報文都屬於憑空出現的第二次握手報文，服務器忙於回覆 RST 報文，導致資源耗盡，無法響應正常的請求。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（3）ACK Flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">在 TCP 三次握手的過程中，ACK 報文出現在第三次握手中，用來確認第二次握手中的 SYN-ACK 報文。ACK Flood 攻擊指的是攻擊者利用工具或者操縱殭屍主機，向目標服務器發送大量的 ACK 報文，服務器忙於回覆這些憑空出現的第三次握手報文，導致資源耗盡，無法響應正常的請求。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（4）FIN/RST Flood</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">TCP 交互過程中還存在 FIN 和 RST 報文，FIN 報文用來關閉 TCP 連接，RST 報文用來斷開 TCP 連接。這兩種報文也可能會被攻擊者利用來發起 DDoS 攻擊，導致目標服務器資源耗盡，無法響應正常的請求。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（5）TCP connection Flood</strong></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">TCP 是面向連接的協議，通信雙方必須保持連接狀態，並且通過確認、重傳、滑動窗口等機制，保證數據傳輸的可靠性和穩定性。攻擊者利用 TCP 協議的上述特點，在 TCP 連接上做文章，利用 TCP 連接來消耗被攻擊目標的系統資源。例如，攻擊者與被攻擊目標完成三次握手後，立刻發送 FIN 或 RST 報文，釋放本端連接，同時快速發起新的連接，以此來消耗被攻擊目標的系統資源，或者攻擊者與被攻擊目標完成三次握手後，發送很少的報文來維持連接狀態，通過這種異常的 TCP 連接來消耗被攻擊目標的系統資源。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.2 基於應用層的資源耗盡攻擊（cc）</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">CC 攻擊的原理就是攻擊者控制某些主機不停地發大量數據包給對方服務器造成服務器資源耗盡，一直到宕機崩潰。CC 主要是用來消耗服務器資源的，每個人都有這樣的體驗：當一個網頁訪問的人數特別多的時候，打開網頁就慢了，CC 就是模擬多個用户 (多少線程就是多少用户) 不停地進行訪問那些需要大量數據操作 (就是需要大量 CPU 時間) 的頁面，造成服務器資源的浪費，CPU 長時間處於 100%，永遠都有處理不完的連接直至就網絡擁塞，正常的訪問被中止。以下介紹一些 cc 攻擊的常用變種。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）基於 HTTP-header 慢速 cc 攻擊</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">Web 應用在處理 HTTP 請求之前都要先接收完所有的 HTTP 頭部，因為 HTTP 頭部中包含了一些 Web 應用可能用到的重要的信息。攻擊者利用這點，發起一個 HTTP 請求，一直不停的發送 HTTP 頭部，消耗服務器的連接和內存資源。抓包數據可見，攻擊客户端與服務器建立 TCP 連接後，每 30 秒才向服務器發送一個 HTTP 頭部，而 Web 服務器再沒接收到 2 個連續的\r\n 時，會認為客户端沒有發送完頭部，而持續的等等客户端發送數據。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）基於 HTTP-body 慢速 cc 攻擊</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">攻擊者發送一個 HTTP POST 請求，該請求的 Content-Length 頭部值很大，使得 Web 服務器或代理認為客户端要發送很大的數據。服務器會保持連接準備接收數據，但攻擊客户端每次只發送很少量的數據，使該連接一直保持存活，消耗服務器的連接和內存資源。抓包數據可見，攻擊客户端與服務器建立 TCP 連接後，發送了完整的 HTTP 頭部，POST 方法帶有較大的 Content-Length，然後每 10s 發送一次隨機的參數。服務器因為沒有接收到相應 Content-Length 的 body，而持續的等待客户端發送數據。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（3）基於 HTTP-read 慢速 cc 攻擊</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">客户端與服務器建立連接併發送了一個 HTTP 請求，客户端發送完整的請求給服務器端，然後一直保持這個連接，以很低的速度讀取 Response，比如很長一段時間客户端不讀取任何數據，通過發送 Zero Window 到服務器，讓服務器誤以為客户端很忙，直到連接快超時前才讀取一個字節，以消耗服務器的連接和內存資源。抓包數據可見，客户端把數據發給服務器後，服務器發送響應時，收到了客户端的 ZeroWindow 提示（表示自己沒有緩衝區用於接收數據），服務器不得不持續的向客户端發出 ZeroWindowProbe 包，詢問客户端是否可以接收數據。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">剖析其原理，本質上還是對任何一個開放了 HTTP 訪問的服務器 HTTP 服務器，先建立了一個連接，指定一個比較大的 content-length，然後以非常低的速度發包，比如 1-10s 發一個字節，然後維持住這個連接不斷開。如果客户端持續建立這樣的連接，那麼服務器上可用的連接將一點一點被佔滿，從而導致拒絕服務。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3&nbsp;基於端口發起的滲透測試</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">IP 和端口作為應用暴露在公網的唯一入口，攻擊者通常發起滲透測試的起點便是通過掃描目標 IP 上的開放端口來發現系統的漏洞、薄弱點或安全隱患。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">往往服務器系統本身或引入的應用服務就具備一定的脆弱性，攻擊者獲取到目標服務器的端口列表後會逐一去比對自己的武器庫進行漏洞利用嘗試。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">以下是整理的常見端口利用清單及攻擊利用方式：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.787962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/ffff7d43-b2d6-4387-8509-ca5522e4afd4.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 3 常見的端口利用清單</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、基於端口利用的案例</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>Equifax 數據泄露案落幕：七億賠款，索賠期限延長四年</strong></p></section></section></section><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6046511627906976" data-s="300,640" src="https://oscimg.oschina.net/oscnet/67512766-7039-4567-9399-288fd0ae5076.jpg" data-type="jpeg" data-w="860" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;letter-spacing: 0.034em;color: rgb(136, 136, 136);">圖 4 EQUIFAX （圖片來源：<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fglobalnews.ca%2F" textvalue="globalnews.ca" linktype="text" imgurl="" tab="outerlink" data-linktype="2">globalnews.ca</a>）<br></span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">2017 年 9 月，Equifax 系統遭到黑客攻擊，導致超過 1.45 億美國消費者的個人信息，以及 1520 萬英國居民的記錄和 8000 名加拿大用户的數據遭到泄露，其中包括姓名、地址、出生日期、身份證號、護照、駕照、信用卡等信息。事件曝光後，Equifax 股票暴跌 30%，相當於蒸發掉 50 億美元市值，成為史上罕見大型數據泄露事件之一。2018 年 12 月，美國國會眾議院的政府改革暨監督委員會發布報告指出，因 Equifax 公司組織架構的缺陷，導致公司部門間的溝通失效，從而致使大量的關鍵系統補丁沒有被及時開發，其中包括一個超 19 個月未做更新的漏洞。最終，黑客對 Equifax 進行了長達 76 天的攻擊，先後 265 次從公司獲取未被加密的數據。該事件最初是由於 Equifax 未修補針對 Apache Struts 的漏洞而導致的，攻擊者利用該漏洞訪問了 Equifax 的數據庫，這個漏洞是通過開放的 80 端口進行攻擊的。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>愛爾蘭國家醫療保健局數據泄露事件</strong></p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6926829268292682" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e6de8c64-5e42-4524-9573-34df37515805.jpg" data-type="jpeg" data-w="615" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 5 愛爾蘭衞生部&nbsp;</span></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">（圖片來源：<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sohu.com%2Fa%2F480716983_121123851" textvalue="https://www.sohu.com/a/480716983_121123851" linktype="text" imgurl="" tab="outerlink" data-linktype="2">https://www.sohu.com/a/480716983_121123851</a>）</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">愛爾蘭國家醫療保健局（HSE）是負責為愛爾蘭居民提供醫療保健的機構。在 2021 年 5 月，該機構發生了一起數據泄露事件，影響到數百萬個患者的個人信息。該事件起因於攻擊者通過暴露的 VPN 服務端口進行攻擊，成功登錄了 HSE 的 IT 系統。接着，攻擊者開始利用系統漏洞，並最終獲取了 HSE 服務器的管理員權限。攻擊者隨後將一個 WastedLocker 勒索軟件的惡意代碼安裝在服務器上，並要求贖金以釋放數據。在攻擊過程中，攻擊者還利用了 HSE 的 Exchange 電子郵件系統，以及 HSE 員工用於管理患者信息的軟件系統。這些系統中的漏洞使得攻擊者能夠訪問和竊取大量患者的個人信息，包括姓名、出生日期、地址、電話號碼、診斷信息和病歷等。據稱，該事件涉及到的患者數量達到了數百萬。HSE 在發現事件後，立即關閉了受影響的系統，並採取措施保護患者數據的安全。HSE 還與執法部門和網絡安全專家合作，以追查攻擊者的身份和追回數據。截至目前，尚未有人或組織宣稱對此次攻擊負責。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、端口風險防護及治理實踐</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.1&nbsp;端口風險防護</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">無論是 Flood 還是 cc 防護，一般都是藉助一些安全設備及安全設備提供的策略定製能力，流量級的可以依靠運營商提供的抗 D 服務，如雲盾、雲堤，流量清洗服務等，面向應用層的攻擊可以藉助防火牆，WAF，NIDS 等安全設備/節點提供的能力。無論是藉助廠商還是自身建設抗 D 能力，<strong>都需要摸清企業所面臨的資源耗盡風險，一方面理清基礎架構的脆弱點，治理脆弱點；另一方面需要熟悉攻擊利用原理，制定針對性策略來進行異常檢測及攻擊緩解。</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">這裏簡述一些對抗思路，例如上文提到 SYN Flood 攻擊，其本質上是利用 TCP 建立鏈接的機制漏洞，只要持續發送建立鏈接請求，服務端就會進行響應同時在連接池裏記錄一條鏈接，那麼依據該原理，防護思路就很明確了：</p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>1. 對發起源進行主動認證</strong></p><p style="text-wrap: wrap;"><strong><br></strong></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="1.5030549898167007" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4f91784c-a5bc-44b3-874a-575b58e44aa2.png" data-type="png" data-w="982" style="font-size: 15px;letter-spacing: 0.578px;text-align: center;text-wrap: wrap;" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">圖 6 主動認證示意圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>當連續一段時間內去往目標服務器的 SYN 報文超過告警閾值後，抗 DDoS 設備啓動源認證機制。源認證機制啓動後，抗 DDoS 設備將會代替服務器向客户端響應帶有正確確認序號的 SYN-ACK 報文；</p></li><li><p>如果這個源是虛假源，是一個不存在的地址或者是存在的地址但卻沒有發送過 SYN 報文，不會做出任何響應；</p></li><li><p>如果這個源是真實客户端，則會向服務器發送 ACK 報文，對收到的 SYN-ACK 報文進行確認。抗 DDoS 設備收到 ACK 報文後，將該客户端的源 IP 地址加入白名單。同時，抗 DDoS 設備會向客户端發送 RST 報文，要求重新建立連接；</p></li><li><p>後續這個客户端發出的 SYN 報文命中白名單直接通過。</p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.&nbsp;首包丟棄</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="1.0574074074074074" data-s="300,640" src="https://oscimg.oschina.net/oscnet/afd85ac0-8ab8-4f3c-874c-b655dcb18041.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">圖 7 首包丟棄示意圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">TCP 的可靠性保證除了面向連接（三次/四次握手）之外，還體現在超時與重傳機制。TCP 協議規範要求發送端每發送一個報文，就啓動一個定時器並等待確認信息；如果在定時器超時前還沒有收到確認，就會重傳報文。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">首包丟棄功能就是利用了 TCP 的超時重傳機制，Anti-DDoS 系統對收到的第一個 SYN 報文直接丟棄，然後觀察客户端是否重傳。如果客户端重傳了 SYN 報文，再對重傳的 SYN 報文進行源認證，即反彈 SYN-ACK 報文，這樣就可以大大減少反彈報文的數量。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>混合使用，效果更佳</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">實際部署時，一般將首包丟棄和源認證結合使用。防禦 SYN Flood 攻擊時，先通過首包丟棄功能來過濾掉一些攻擊報文，當重傳的 SYN 報文超過告警閾值後，再啓動源認證。這樣就能夠減少反彈的 SYN-ACK 報文的數量，緩解網絡擁塞情況。對於虛假源攻擊，尤其是對於不斷變換源 IP 和源端口的虛假源攻擊，可以達到最佳防禦效果。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>針對連接耗盡場景，其防禦思路可以總結為以下內容：</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">針對此攻擊會耗盡服務器的 TCP 連接資源的特點，對目的 IP 地址的新建連接速率和併發連接數分佈進行統計，當新建連接速率或併發連接數大於閾值時，則觸發對源 IP 地址的相應檢查，當檢查發現異常時，將異常源 IP 地址加入黑名單，切斷其 TCP 流量。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>源 IP 地址新建連接速率檢查：啓動源 IP 地址新建連接速率檢查後，如果某個源 IP 地址在檢查週期內發起的 TCP 新建連接數大於閾值，則將該源 IP 地址判定為攻擊源。</p><p><br></p></li><li><p>源 IP 地址併發連接數檢查：啓動源 IP 地址併發連接數檢查後，如果某個源 IP 地址的 TCP 併發連接數大於閾值，則將該源 IP 地址判定為攻擊源。</p><p><br></p></li><li><p>慢速連接速率檢查：啓動慢速連接速率檢查後，統計同一源 IP 地址對同一目的 IP 地址的連接次數，在各統計時間間隔內，如果連續多次連接數相同並超過閾值，則判定為 TCP 慢速連接攻擊。</p><p><br></p></li><li><p>異常會話檢查：如果在檢查週期內，某個源 IP 地址發起的 TCP 異常會話的連接數大於閾值時，則將該源 IP 地址判定為攻擊源。</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">判定 TCP 異常會話依據如下：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【空連接檢查】：如果在檢查週期內，在某條 TCP 連接上通過的報文數小於閾值，則判定該連接為異常連接。</p></li><li><p>【重傳會話檢查】：當某條 TCP 連接上重傳報文數量大於閾值時，則判定該連接為異常連接。</p></li><li><p>【慢啓動連接檢查】：當某條 TCP 連接上通過的報文窗口小於閾值時，則判定該連接為異常連接。</p></li><li><p>當異常會話數超過一定數量時，將此源加入黑名單。異常會話數量可配置。</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>同樣的，應用層 CC 攻擊，按照相對應的原理進行內容檢查，這也是一般 WAF 或 NIDS 設備提供的基礎能力，這裏就不再累述。</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.2&nbsp;端口風險治理實踐</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">上段內容有提到的防護思路，理解協議的脆弱性原理再依據攻擊者的視角進行防護措施的定製，則會有比較清晰的防護思路和防護效果，因此在端口安全治理實踐上，我們通過建立常態化端口發現機制以及常態化的漏洞掃描機制，將網絡端口及端口漏洞風險進行持續統一治理，同時建立基於流量的異常識別能力豐富基於行為的異常端口檢測能力，再輔以脆弱性管理以及端口生命週期管理（規範與流程）來形成整個端口安全治理體系。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>1. 建立常態化的端口發現機制</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">使用網絡發現工具進行異常端口識別，設計思路是首先通過 vscheduler 中間件觸發掃描（支持兩種模式：一網段配置表全表網段掃描、二是：指定網段掃描。），調用掃描工具（以 nmap 為例）進行掃描，通過增加兩個異步線程去讀取緩衝區內容以解決緩衝區擁塞問題，通過異步線程進行緩衝區內容讀取以及清理的同時通過錯誤緩衝區內容判斷是否掃描失敗。掃描結果輸出 xml 後通過 dom4j 進行解析，再進行分批保存，避免大事務以及減少 jvm 內存佔用。最後把文件刪除，釋放存儲空間。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.34629629629629627" data-s="300,640" src="https://oscimg.oschina.net/oscnet/70667ba7-7a93-43b8-9c41-cca278403648.jpg" data-type="jpeg" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 8 端口掃描架構圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.&nbsp;建立常態化漏洞掃描機制</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">結合漏洞掃描工具及端口掃描工具構建自動化漏洞掃描平台，漏掃平台架構設計思路如下圖：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6351851851851852" data-s="300,640" src="https://oscimg.oschina.net/oscnet/090f99ff-bff8-4792-9c61-7362919ce184.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">圖 9 漏掃平台架構圖</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">該系統架構的核心功能點包括：資產收集、Web 漏洞掃描、依賴包掃描、端口掃描，輔助功能包括：掃描任務管理、風險管理等。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【資產收集】：</p></li><li><p>掃描的目標是公司的網絡資產，沒有資產無法進行掃描，資產不全面掃描的效果也會打折扣，所以平台採集了多種途徑進行資產的採集，力求做到無遺漏，持續豐富採集的手段。</p></li><li><p>【Web 漏洞掃描】：</p><p>用於發現暴露在公網的站點、URL 等 Web 資源是否存在漏洞。<br></p></li><li><p>【依賴包掃描】：</p><p>用於發現線上業務是否使用了高危的 Java 依賴包。</p></li><li><p>【端口掃描】：</p><p>用於發現公司服務器是否對公網開放了高危端口。</p></li><li><p>【掃描任務管理】：</p><p>無論是依賴包掃描、端口掃描，都是通過創建掃描任務的形式來發起的，掃描任務分為立即掃描任務和定時掃描任務兩種類型，用户可以創建立即掃描任務來一次性執行掃描，也可以創建定時任務來週期性執行掃描。</p></li><li><p>【風險管理】：</p><p>對於掃描出來的 Web、依賴包和端口風險，系統能夠對其處理狀態進行管理，以便安全工程師對風險狀態進行跟蹤和處理。</p></li><li><p>【工單管理】：</p><p>對於掃描出來的 Web、依賴包和端口風險，運營人員可對其創建工單，工單會對接到漏洞管理系統，通過漏洞管理系統的工單體系來對跟蹤風險的處理進程。</p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">常用的漏掃工具：</p><section style="font-size: 15px;line-height: 1.5;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【Nmap】：</p><p>Nmap 是一款常用的網絡發現和安全審計工具，支持多種掃描技術和掃描選項，可以快速掃描本地或遠程計算機上的開放端口和服務。</p></li><li><p>【Masscan】：</p><p>Masscan 是一款高速的端口掃描工具，可以在短時間內掃描數百萬個端口，支持 TCP 和 UDP 掃描，適用於大規模網絡掃描。</p></li><li><p>【Zenmap】：</p><p>Zenmap 是 Nmap 的圖形用户界面（GUI）版本，可以方便地進行掃描選項配置和結果分析。</p></li><li><p>【Angry IP Scanner】：</p><p>Angry IP Scanner 是一款輕量級的端口掃描工具，支持多線程掃描和快速掃描本地網絡和遠程主機。</p></li><li><p>【SuperScan】：</p><p>SuperScan 是一款 Windows 平台上的端口掃描工具，支持 TCP 和 UDP 掃描、多線程掃描、服務版本識別等功能。</p></li><li><p>【Unicornscan】：</p><p>Unicornscan 是一款高速的網絡掃描工具，支持 TCP、UDP、ICMP 等多種掃描方式和掃描選項。</p></li><li><p>【Netcat】：</p><p>Netcat 是一款多功能的網絡工具，其中包括端口掃描功能，支持 TCP 和 UDP 掃描，可以快速掃描本地或遠程計算機上的開放端口和服務。</p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong><br></strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.&nbsp;建立基於流量的異常識別能力</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（1）流量基線學習</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">流量基線一般對五元組進行配置學習，通過對比應用流量基線，發現孤立的端口流量，對比端口開放庫以發現異常開放的端口，另外，可以同步建設告警能力與處置能力，在發現異常的第一時間切斷風險源頭。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.5585106382978723" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7a8242ee-8c70-4d47-8f96-d25e0bc636ca.png" data-type="png" data-w="752" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 10 基線學習</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">流量基線學習的核心表：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>【策略快照表】：</p><p>從離線同步過來的每個小時的服務維度的多種策略計算結果</p></li><li><p>【學習配置表】：</p><p>用於存放學習配置，包括各種策略的加解鎖條件（偏離閾值+次數）、偏離告警條件（偏離閾值+次數，可以預留出來，告警下迭代做）</p></li><li><p>【當前策略集】：</p><p>服務維度自定義的的策略集</p></li><li><p>【策略狀態表】：</p><p>記錄各個服務節點的鎖狀態，偏離情況，策略生效時間等</p></li><li><p>【策略目標集】：</p><p>部分策略擁有自己的目標機器/服務結算邏輯，該表用於存放目標範圍，用於定時清理不在目標集的策略</p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（2）異常檢測</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通過對上節提到的流量基線結果的數據分析來識別網絡個體或羣體的異常行為，一方面建立行為偏離預警機制，另一方面需要引入一些統計分析模型幫助建立閾值點，在偏離預警機制這塊我們做了一些架構實踐，其邏輯簡單描述如下：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6716981132075471" data-s="300,640" src="https://oscimg.oschina.net/oscnet/94966a61-a614-46b5-8441-05525442a106.jpg" data-type="jpeg" data-w="795" style="" referrerpolicy="no-referrer"></p><p><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">行為偏離比對邏輯：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.42362002567394097" data-s="300,640" src="https://oscimg.oschina.net/oscnet/89ad5fbd-82ed-46d0-9ebc-a7dcfd769801.png" data-type="png" data-w="779" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">總結四個關鍵點分別為：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><strong>配置文件</strong>，用於描述對應服務的流量特徵</p></li><li><p><strong>上鎖</strong>，參數或配置文件在滿足預設規則條件下或人工幹預下停止動態學習行為</p></li><li><p><strong>解鎖</strong>，參數或配置文件在滿足預設規則條件下或人工幹預下重新開始動態學習行為</p></li><li><p><strong>偏離</strong>，指同一服務下某一時間切片的配置文件與已上鎖的配置文件的參數值對比，發生超過閾值的變化</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">此外便是閾值的設定問題，通過引入統計模型的使用來幫助我們制定閾值，常用的入侵檢測統計模型有以下幾類：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><strong>操作模型</strong>：該模型假設異常可通過測量結果與一些固定指標相比較得到，固定指標可以根據經驗值或一段時間內的統計平均得到，舉例來説，在短時間內多次針對某一端口嘗試建立連接失敗，則可能是針對端口的拒絕服務</p></li><li><p><strong>方差</strong>：這也是常用的模型，通過計算參數的方差，設定置信區間，當測量值超過置信區間的範圍時表明可能存在異常</p></li><li><p><strong>多元模型</strong>：操作模型的擴展，通過同時分析多個參數實現異常檢測</p></li><li><p><strong>馬爾柯夫過程模型</strong>：將每種類型的事件定義為系統狀態，用狀態轉移矩陣來表示狀態的變化，當一個事件發生時，如果狀態矩陣中該轉移的概率較小則可能是異常事件</p></li><li><p><strong>時間序列分析</strong>：將流量切片特徵提取出來按照時間排成序列，如果一個新的請求或一個新的請求集合在該時間發生的概率較低，則該事件可能是異常</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">在異常識別這塊通常也會引入基於圖的數據分析方法，針對網絡個體和網絡羣體進行流量行為分析來發現異常行為，但應用起來相對較為複雜，也需要較高學習與實踐成本，這塊更多在 NIDS 的應用範疇，在此模塊不再贅述。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">需要提醒的是以上這種方法還是存在一些侷限，如爬蟲類服務，商業廣告類服務因為其服務的特殊性，以上機制比較難進行準確的基線生成，雖説無法解決 100% 的問題，但也能 cover 住大部分的服務類型，同樣的，在這個領域還需要持續探索來提升服務類型的覆蓋率以及異常檢測精度。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>4. 健全脆弱性管理能力實現風險追蹤與閉環</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">端口暴露的最核心問題就是脆弱性利用，因此健全基礎架構的脆弱性管理能力是阻斷外部威脅，有效控制風險的重要手段，我們通過建立統一的脆弱性管理平台來建立業務關係流，脆弱性庫，資產三者的關聯關係，針對脆弱性做到持續發現，持續修復並將脆弱性作為安全告警關聯分析中的重要評價維度。脆弱性管理系統因其安全管理戰略特殊性，此處只能簡單介紹給讀者一些建設思路：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>脆弱性管理系統核心功能模塊結構</strong><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="1.1944444444444444" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1927c6cb-f74d-4bff-ac4b-21a4364a1376.png" data-type="png" data-w="936" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">另外脆弱性關聯分析 AVC 是脆弱性管理系統的核心功能，讀者可以從以下評價維度進行建設實踐：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.47129629629629627" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4effb9d9-df3a-4e35-9085-79d4b7e1ee29.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>5.&nbsp;完善端口生命週期管理（規範與流程）</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）制定端口管理規範</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us">規範原則</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><strong>最小權限原則</strong>：端口開放遵循最小權限原則，只允許開放運行 http 和 https 的 80/443 端口，其他對外開放的端口必須有合理的業務理由，並且應該只開放業務需要的最小端口集合，由端口使用者提出工作聯絡單進行申請經審批同意後方可開放。</p></li><li><p><strong>可審計原則</strong>：所有端口開放都必須有可追溯的對應申請依據、安全性評估依據、審批依據，不允許私自開放端口。</p></li><li><p><strong>閉環原則</strong>：端口開放應實施閉環管理，在業務不再需要時，應及時關閉端口。</p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">對端口進行明確定義</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.325" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8fa433a8-b65b-4250-93e5-b09f8e6d64d1.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">圖 11 端口定義示例</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">規範內容可包含端口申請規範，端口使用規範，端口關閉規範以及明確的處罰規定。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）端口生命週期管理</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">實現從端口申請到端口關閉全流程管理</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><p style="text-wrap: wrap;">應用申請 → 端口記錄→ 開牆（映射）→ 安全節點納管 → 流量反饋 → 主動關閉 → 端口映射記錄清除→ 安全節點卸載→ 端口資源池回收</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（3）持續評估</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">結合異常端口發現機制和端口開放庫以及相關流程建立起持續端口風險評估機制，用以保障規範以及風險處置有效性的落地。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>五、總結</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">端口作為應用對外暴露的主要入口，是應用暴露在公網上的標識，因此端口安全建設是企業信息安全防護體系中的重要一環，安全團隊需要詳細瞭解其內部網絡中使用的所有端口，以及開放和關閉的端口數量和情況，在理解協議的脆弱性原理基礎上制定合適的安全策略和措施。同時再安全策略和措施制定的過程中，通過對各類端口掃描工具的使用，安全團隊可以快速獲取目標網絡中的端口開放情況。然後根據掃描結果，採取合適的安全策略和措施，禁止不必要端口的開放或者採取過濾、加密等方式對端口進行保護。在技術實踐上，建設常態化端口發現機制以及常態化的漏洞掃描機制，將網絡端口及端口漏洞風險進行持續統一治理，同時建立基於流量的異常識別能力豐富基於行為的異常端口檢測能力，再輔以脆弱性管理以及端口生命週期管理（規範與流程）來形成整個端口安全治理體系。另外值得強調的是，全員網絡安全意識的水位決定整體安全態勢的下限，個人行為和錯誤配置通常是網絡漏洞的一大原因，因此安全管理團隊需要持續加強內部員工的網絡安全教育和培訓，提高其網絡安全意識和知識水平，建立全員參與的安全意識文化。總的來説，可以通過規範，流程，技術和人員意識培訓來構建全面的網絡端口風險治理體系。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(65, 95, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;">參考文獻：</p></section><section powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><span style="font-size: 14px;">《網絡端口安全治理的研究與實踐》（姜雲飛，高國權，張全超，2019）</span></p></li><li><p><span style="font-size: 14px;">《基於漏洞掃描的網絡端口安全治理研究》（黃珂，楊明，張鵬飛，2017）</span></p></li><li><p><span style="font-size: 14px;">《基於流量監測的網絡端口安全治理技術研究》（胡彩玲，申偉，周婷婷，2016）</span></p></li><li><p><span style="font-size: 14px;">《網絡端口安全治理技術研究》（程顯霞，鄭曉寧，2014）</span></p></li><li><p><span style="font-size: 14px;">《網絡端口安全治理策略研究》（朱紹軍，李彥霞，陳琳琳，2013）</span></p></li><li><p><span style="font-size: 14px;">vivo 互聯網端口開放管理規範</span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2FJackMaF%2Farticle%2Fdetails%2F123676195" textvalue="什麼是網絡端口？" linktype="text" imgurl="" tab="outerlink" data-linktype="2">什麼是網絡端口？</a></span></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2FShepherdzhao%2Fp%2F15219310.html" textvalue="【漏洞分析】DDOS 攻防分析（四）——TCP 篇" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 14px;">【漏洞分析】DDOS 攻防分析（四）——TCP 篇</span></a><span style="font-size: 14px;"></span></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2Fkenshinobiy%2Fp%2F10215913.html" textvalue="CC 攻擊原理及防範方法和如何防範 CC 攻擊&nbsp;" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 14px;">CC 攻擊原理及防範方法和如何防範 CC 攻擊&nbsp;</span></a><span style="font-size: 14px;"></span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2Fweixin_50464560%2Farticle%2Fdetails%2F118962399" textvalue="常用的端口攻擊" linktype="text" imgurl="" tab="outerlink" data-linktype="2">常用的端口攻擊</a></span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fforum.huawei.com%2Fenterprise%2Fzh%2Fthread%2F580895552575520769" textvalue="TCP 連接耗盡攻擊與防禦原理" linktype="text" imgurl="" tab="outerlink" data-linktype="2">TCP 連接耗盡攻擊與防禦原理</a></span></p></li><li><p><span style="font-size: 14px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.freebuf.com%2Farticles%2Fnetwork%2F258061.html" textvalue="DDOS 之 TCP 連接耗盡攻擊與防禦" linktype="text" imgurl="" tab="outerlink" data-linktype="2">DDOS 之 TCP 連接耗盡攻擊與防禦</a></span></p></li></ol><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-right: 0%;margin-bottom: 20px;margin-left: 0%;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: middle;width: 20%;align-self: center;flex: 0 0 auto;"><section style="text-align: center;color: rgb(45, 66, 87);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:224.title1"><p>猜你喜歡</p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497432%26idx%3D1%26sn%3Df372c83043de8da859cec802976e371a%26chksm%3Debdb864adcac0f5cf753444f2c9198b08d6b0831e66e4b5b6405a1eaa32e53b8747aa9dc1217%26scene%3D21%23wechat_redirect" textvalue="Dubbo 路由及負載均衡性能優化" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">Dubbo 路由及負載均衡性能優化</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497376%26idx%3D1%26sn%3D5795a683e52f70384a13b34aa3daf731%26chksm%3Debdb8632dcac0f2468a461db09d8de6219af346e51436b91e6c946ee8b37e6ae8175b2f5d55e%26scene%3D21%23wechat_redirect" textvalue="深入理解 Netty FastThreadLocal" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">深入理解 Netty FastThreadLocal</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497343%26idx%3D1%26sn%3D959b66ceb9a8c2fe060b6981b41a807e%26chksm%3Debdb86eddcac0ffb229636ec51ec94433af75c7bc58aaa5ae52b4a2bf6a2d6d2ab11583b3174%26scene%3D21%23wechat_redirect" textvalue="記一次 Redis Cluster Pipeline 導致的死鎖問題" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">記一次 Redis Cluster Pipeline 導致的死鎖問題</a><br></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互聯網技術" data-alias="vivoVMIC" data-signature="分享 vivo 互聯網技術乾貨與沙龍活動，推薦最新行業動態與熱門會議。" data-from="0" data-is_biz_ban="0"></mp-common-profile></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - vivo 互聯網技術（vivoVMIC）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/10140381</guid>
            <link>https://my.oschina.net/vivotech/blog/10140381</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TypeScript 5.3 RC 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>TypeScript 5.3 RC 版本現已發佈。可以通過 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nuget.org%2Fpackages%2FMicrosoft.TypeScript.MSBuild" target="_blank">NuGet</a> 獲取，或通過 npm 使用以下命令獲取：</p><pre><code>npm install -D typescript@rc
</code></pre><p><strong>TypeScript 5.3 中的新特性包括：</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23import-attributes" target="_blank">Import Attributes</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23stable-support-resolution-mode-in-import-types" target="_blank">在 Import Types 中穩定支持<code>resolution-mode</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23resolution-mode-supported-in-all-module-modes" target="_blank"><code>resolution-mode</code>在所有模塊模式均受支持</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23switch-true-narrowing" target="_blank"><code>switch (true)</code>Narrowing</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23narrowing-on-comparisons-to-booleans" target="_blank">Narrowing On Comparisons to Booleans</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23instanceof-narrowing-through-symbolhasinstance" target="_blank"><code>instanceof</code><span>&nbsp;</span>Narrowing Through<span>&nbsp;</span><code>Symbol.hasInstance</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23checks-for-super-property-accesses-on-instance-fields" target="_blank">檢查對實例字段的 super 屬性訪問</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23interactive-inlay-hints-for-types" target="_blank">針對類型的交互式嵌套提示 (Interactive Inlay Hints)</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23settings-to-prefer-type-auto-imports" target="_blank">Prefer<code>type</code>Auto-Imports 的設置</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23optimizations-by-skipping-jsdoc-parsing" target="_blank">通過跳過 JSDoc 解析進行優化</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23optimizations-by-comparing-non-normalized-intersections" target="_blank">通過 Comparing Non-Normalized Intersections 進行優化</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23consolidation-between-tsserverlibraryjs-and-typescriptjs" target="_blank">合併<code>tsserverlibrary.js</code>和<code>typescript.js</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23breaking-changes-and-correctness-improvements" target="_blank">Breaking Changes 和 Correctness Improvements</a></li></ul><p><strong>自&nbsp;Beta&nbsp;<span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>版以來的新變化有：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left">Beta&nbsp;<span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>版<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23resolution-mode-supported-in-all-module-modes" target="_blank">允許<code>resolution-mode</code>跨模塊分辨率設置使用</a>，但並未對此進行記錄。自 </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>Beta&nbsp;<span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>版發佈以來，項目團隊添加了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23settings-to-prefer-type-auto-imports" target="_blank">一個選項，在可能的情況下首選</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F%23settings-to-prefer-type-auto-imports" target="_blank"><code>type</code>-only auto-imports</a><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-import-attributes" target="_blank">import attributes</a></u></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">import attributes 的一個用例是向運行時提供有關模塊預期格式的信息。</p><pre style="margin-left:0; margin-right:0; text-align:left"><code class="language-javascript"><span style="color:#6a737d">// We only want this to be interpreted as JSON,</span><span style="color:#6a737d">// not a runnable/malicious JavaScript file with a `.json` extension.</span><span style="color:#d73a49">import</span> obj <span style="color:#d73a49">from</span><span style="color:#032f62">"./something.json"</span><span style="color:#d73a49">with</span> { <span style="color:#d73a49">type</span>: <span style="color:#032f62">"json"</span> };</code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">TypeScript 不會檢查這些屬性的內容，因為它們是特定於主機的，因此不會對它們進行檢查，只是讓瀏覽器和運行時處理它們（可能會出錯）。</p><pre style="margin-left:0; margin-right:0; text-align:left"><code class="language-javascript"><span style="color:#6a737d">// TypeScript is fine with this.</span><span style="color:#6a737d">// But your browser? Probably not.</span><span style="color:#d73a49">import</span> * <span style="color:#d73a49">as</span> foo <span style="color:#d73a49">from</span><span style="color:#032f62">"./foo.js"</span><span style="color:#d73a49">with</span> { <span style="color:#d73a49">type</span>: <span style="color:#032f62">"fluffy bunny"</span> };</code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">動態 import () 調用也可以通過第二個參數使用 import 屬性。</p><pre style="margin-left:0; margin-right:0; text-align:left"><code class="language-javascript"><span style="color:#d73a49">const</span> obj = <span style="color:#d73a49">await</span><span style="color:#d73a49">import</span>(<span style="color:#032f62">"./something.json"</span>, {
    <span style="color:#d73a49">with</span>: { <span style="color:#d73a49">type</span>: <span style="color:#032f62">"json"</span> }
});</code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">第二個參數的預期類型由一個名為<span>&nbsp;</span><code>ImportCallOptions</code><span>&nbsp;</span>的類型定義，默認情況下，該類型只期望調用一個屬性<span>&nbsp;</span><code>with</code>。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">請注意，導入屬性是從早期的 "導入斷言"（import assertions）提案演變而來的，該提案已在 TypeScript 4.5 中實現。最明顯的區別是使用了<span>&nbsp;</span><code>with</code><span>&nbsp;</span>關鍵字而非<span>&nbsp;</span><code>assert</code><span>&nbsp;</span>關鍵字。但不太明顯的區別是，運行時現在可以自由使用屬性來指導導入路徑的解析和解釋，而導入斷言只能在加載模塊後斷言某些特性。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">隨着時間的推移，TypeScript 將淘汰舊的導入斷言語法，轉而使用建議的導入屬性語法。使用 assert 的現有代碼應遷移到 with 關鍵字。需要導入屬性的新代碼應只使用<span>&nbsp;</span><code>with</code><span>&nbsp;</span>關鍵字。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong><code>switch (true)</code>Narrowing</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">TypeScript 5.3 可以根據<span>&nbsp;</span><code>switch (true)</code><span>&nbsp;</span>中每個<span>&nbsp;</span><code>case</code><span>&nbsp;</span>子句的條件執行 narrowing。</p><pre style="margin-left:0; margin-right:0; text-align:left"><code class="language-javascript"><span><span style="color:#d73a49">function</span><span style="color:#6f42c1">f</span>(<span>x: unknown</span>) </span>{
    <span style="color:#d73a49">switch</span> (<span style="color:#005cc5">true</span>) {
        <span style="color:#d73a49">case</span><span style="color:#d73a49">typeof</span> x === <span style="color:#032f62">"string"</span>:
            <span style="color:#6a737d">// 'x' is a 'string' here</span><span>console</span>.log(x.toUpperCase());
            <span style="color:#6a737d">// falls through...</span><span style="color:#d73a49">case</span><span>Array</span>.isArray(x):
            <span style="color:#6a737d">// 'x' is a 'string | any[]' here.</span><span>console</span>.log(x.length);
            <span style="color:#6a737d">// falls through...</span><span style="color:#d73a49">default</span>:
          <span style="color:#6a737d">// 'x' is 'unknown' here.</span><span style="color:#6a737d">// ...</span>
    }
}</code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3-rc%2F" target="_blank">查看發佈公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 04 Nov 2023 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264869/typescript-5-3-rc</guid>
            <link>https://www.oschina.net/news/264869/typescript-5-3-rc</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TUI 庫開發商 Charm 融資 600 萬，打造下一代命令行]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>TUI 庫開發商 Charm <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcharm.sh%2Fblog%2Fthe-next-generation%2F" target="_blank">宣佈融資 600 萬美金</a></u>。Charm 專注於命令行工具開發，目標是讓命令行變得充滿魅力、功能強大、有趣和現代化。</p><p><img src="https://static.oschina.net/uploads/space/2023/1103/190910_uqZD_2720166.png" referrerpolicy="no-referrer"></p><p>從 Charm 的 GitHub 開源主頁看到，其最歡迎的項目均採用 Go 語言開發。</p><p>簡單列舉幾個：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fbubbletea%23bubble-tea" target="_blank">Bubble Tea</a>：功能強大的輕量級 TUI 框架</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fgum%23gum" target="_blank">Gum</a>：界面優雅的 Shell 腳本工具</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fvhs%23vhs" target="_blank">VHS</a>：CLI 錄製工具</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet%2Fglow%23glow" target="_blank">Glow</a>：命令行界面 Markdown 渲染工具</li></ul><p><img height="1242" src="https://static.oschina.net/uploads/space/2023/1103/192626_xjM1_2720166.png" width="3114" referrerpolicy="no-referrer"></p><p><em>△&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcharmbracelet" target="_blank">https://github.com/charmbracelet</a></u></em></p><p>Charm 公司認為，在過去的 30 多年裏，命令行一直是無處不在的計算平台，部分原因歸功於<strong>它是專注於做好一件事的簡單工具</strong>，並且能夠輕鬆地將這些工具組合成獨特的解決方案，以及有大量的現有命令行程序庫可供使用。這些特性與當代互聯網及其孤立的數據、缺乏可組合性以及大型、不透明的解決方案形成了鮮明對比，後者往往包含大量的跟蹤、廣告和其他「黑暗面」。</p><p>在他們看來，命令行是網絡和封閉移動平台的健康替代品。當前更新的時機也已經成熟，重點是打造以用户為中心的設計和加密的自託管網絡服務。他們希望為下一個 30 年打造命令行平台。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 03 Nov 2023 11:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264838</guid>
            <link>https://www.oschina.net/news/264838</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌放棄 Web Environment Integrity API 提案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2023%2F11%2Fincreasing-trust-for-embedded-media.html" target="_blank">宣佈</a>放棄其備受爭議的&nbsp;<span style="background-color:#ffffff">Web Environment Integrity API 提案，轉而開發&nbsp;</span><span style="background-color:#ffffff">Android WebView Media Integrity API。</span></span></p><p><span style="color:#000000">今年 5 月份，谷歌在開發者郵件列表中宣佈了其&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FRupertBenWiser%2FWeb-Environment-Integrity%2Fblob%2Fmain%2Fexplainer.md%23goals" target="_blank">Web Environment Integrity API</a><span style="color:#000000">，旨在作為一種限制在線欺詐和濫用的方法，同時不會引發跨站點跟蹤或瀏覽器指紋識別等隱私問題。但卻遭受了公眾的強烈反對，認為其更類似於一種網站的數字版權管理（DRM）功能，擔心谷歌藉此限制網絡自由。</span></p><p><span style="color:#000000">因此在收到眾多反饋後，谷歌表示其&nbsp;<span style="background-color:#ffffff">Chrome 團隊不再考慮&nbsp;Web Environment Integrity API；並將重點轉向範圍更窄的解決方案 Android WebView Media Integrity API，僅針對應用程序中嵌入的 WebView。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">根據介紹，這個新的 API 只擴展了具有 Google 移動服務 (GMS) 的 Android 設備上的現有功能，並且沒有計劃提供超出嵌入式媒體（例如流媒體視頻和音頻）或 Android WebView 之外的功能。</span></span></p><p><span style="color:#000000"><img height="248" src="https://oscimg.oschina.net/oscnet/up-79bb6dbdddd857c0a5caad36bd7b735e59e.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Android WebView API 允許應用程序開發人員顯示嵌入媒體的網頁，並增強對 UI 的控制和高級配置選項，以允許在應用程序中無縫集成。這為移動應用開發帶來了很大的靈活性，但同時也為欺詐和濫用提供了途徑；因為它允許應用程序開發人員訪問網頁內容，攔截或修改用户與網頁的交互。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">新的 Android WebView Media Integrity API 旨在使嵌入式媒體提供商能夠訪問定製的完整性響應，其中包含設備和應用程序的完整性判定，以便他們能夠確保他們的流媒體在安全、可信的環境中運行，無論嵌入式應用程序是從哪個應用程序商店安裝的。</span></span></p><p><span style="color:#000000">谷歌方面計劃<span style="background-color:#ffffff">在明年初，與選定的嵌入式媒體供應商一起試點實驗性 Android WebView Media Integrity API。</span></span></p><p><span style="color:#000000">詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2023%2F11%2Fincreasing-trust-for-embedded-media.html" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 03 Nov 2023 04:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264883/google-abandons-web-environment-integrity-api</guid>
            <link>https://www.oschina.net/news/264883/google-abandons-web-environment-integrity-api</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 將 Web 動畫渲染為視頻的框架 WebVideoCreator]]>
            </title>
            <description>
                <![CDATA[<p><a href="https://gitee.com/vblog/web-video-creator/blob/master/README.md">簡體中文</a> | <a href="https://gitee.com/vblog/web-video-creator/blob/master/README.en-US.md">English</a></p><p align="center"><img width="650px" src="https://gitee.com/vblog/web-video-creator/raw/master/assets/web-video-creator.png" referrerpolicy="no-referrer"></p><h1><a id="user-content-簡介" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%AE%80%E4%BB%8B"></a>簡介</h1><p>WebVideoCreator（簡稱 WVC）是一個將 Web 動畫渲染為視頻的框架，基於 Node.js + Puppeteer + Chrome + FFmpeg 實現，它執行確定性的渲染，準確的以目標幀率捕獲任何可在 HTML5 播放動畫（CSS3 動畫/SVG 動畫/Lottie 動畫/GIF 動畫/APNG 動畫/WEBP 動畫）以及任何基於時間軸使用<a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FrequestAnimationFrame">RAF</a>驅動的動畫（<a href="https://gitee.com/link?target=https%3A%2F%2Fanimejs.com%2F">anime.js</a>是一個不錯的選擇 :D），當然您也可以調皮的使用 setInterval 或者 setTimeout 來控制動畫，支持嵌入 mp4 和透明 webm 視頻，還支持轉場合成、音頻合成與字體加載等功能。讓我們<a href="https://gitee.com/vblog/web-video-creator#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B">快速開始</a>。</p><p>WVC 為您酷炫的動畫頁面創造了一個虛擬時間環境（也許可以想象成是一個《楚門的世界》），它的主要職責是將一個 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/renderer-env.md#%E4%B8%8D%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E6%B8%B2%E6%9F%93%E7%8E%AF%E5%A2%83">不確定性渲染的環境</a> 轉化到 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/renderer-env.md#%E7%A1%AE%E5%AE%9A%E6%80%A7%E7%9A%84%E6%B8%B2%E6%9F%93%E7%8E%AF%E5%A2%83">確定性渲染的環境</a>。</p><p>這一切的前提由 Chrome 提供的<a href="https://gitee.com/link?target=https%3A%2F%2Fgoo.gle%2Fchrome-headless-rendering">確定性渲染模式</a>和無頭實驗 API 支持：<a href="https://gitee.com/link?target=https%3A%2F%2Fchromedevtools.github.io%2Fdevtools-protocol%2Ftot%2FHeadlessExperimental%2F%23method-beginFrame">HeadlessExperimental.beginFrame</a></p><p>答疑交流 QQ 羣：752693580</p><br><h1><a id="user-content-特性" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%89%B9%E6%80%A7"></a>特性</h1><ul><li>基於 Node.js 開發，使用非常簡單，易於擴展和開發。</li><li>視頻處理速度非常快，最快 5 分鐘視頻可在 1 分鐘內完成渲染。</li><li>支持單幕和多幕視頻渲染合成，多幕視頻可應用<a href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E8%BD%AC%E5%9C%BA%E6%95%88%E6%9E%9C">轉場效果</a>。</li><li>支持分塊視頻合成，可以將分塊分發到多個設備上渲染回傳再合成為多幕視頻，大幅降低長視頻渲染耗時。</li><li>支持並行多個視頻渲染合成任務，充分利用系統資源。</li><li>API 支持進行<a href="https://gitee.com/vblog/web-video-creator#%E5%88%86%E5%B8%83%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88">分佈式渲染</a>封裝，只需對 WVC 進行一些封裝即可將大量視頻分塊分發到多個設備渲染並最終取回合併輸出</li><li>支持使用 GPU 加速渲染和合成，可以顯著的降低視頻渲染耗時。</li><li>支持在 Windows 和 Linux 平台部署運行。</li></ul><br><h1><a id="user-content-視頻 demo" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%A7%86%E9%A2%91demo"></a>視頻 DEMO</h1><p>我們還缺少動畫設計師，不過還是從開放的平台中使用 WVC 捕獲渲染了一些優秀的動畫 Demo。</p><p>在這裏查看所有 DEMO：<strong><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FVinlic%2FWebVideoCreator%2Fwiki%2FRendering-Example">渲染示例頁面</a></strong></p><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/demo.gif" referrerpolicy="no-referrer"><br><h1><a id="user-content-支持的動畫庫" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%94%AF%E6%8C%81%E7%9A%84%E5%8A%A8%E7%94%BB%E5%BA%93"></a>支持的動畫庫</h1><p>理論上所有的 Web 動畫/圖形庫都能夠在 WVC 環境正常運行，以下僅列出我已驗證可用的庫：</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fanimejs.com%2F">Anime.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgreensock.com%2F">GSAP</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fd3js.org%2F">D3.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fthreejs.org%2F">Three.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fecharts.apache.org%2F">Echart</a> / <a href="https://gitee.com/link?target=http%3A%2F%2Fairbnb.io%2Flottie%2F%23%2Fweb">Lottie-Web</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fpixijs.download%2Frelease%2Fdocs%2Findex.html">PixiJS</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fanimate.style%2F">Animate.css</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fmojs.github.io%2F">Mo.js</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Ftweenjs.github.io%2Ftween.js%2F">Tween.js</a></p><p>需要注意的是，如果您手動使用<a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FWindow%2FrequestAnimationFrame">RAF</a>驅動動畫，請確保從回調中接收 timestamp 參數設置動畫的進度到該時間點，否則可能出現幀率不同步。</p><br><h1><a id="user-content-快速開始" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"></a>快速開始</h1><h2><a id="user-content-安裝" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%AE%89%E8%A3%85"></a>安裝</h2><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 從 NPM 安裝 WebVideoCreator</span></span><span id="LC2" class="line">npm i web-video-creator</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>如遇到 ffmpeg-static 下載失敗，請先設置環境變量：<code>FFMPEG_BINARIES_URL=https://cdn.npmmirror.com/binaries/ffmpeg-static</code></p><h2><a id="user-content-創建本地服務器" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%88%9B%E5%BB%BA%E6%9C%AC%E5%9C%B0%E6%9C%8D%E5%8A%A1%E5%99%A8"></a>創建本地服務器</h2><p>WVC 需要從 Web 頁面中捕獲動畫，您可以在本地創建一個臨時的 Web 服務器來提供靜態頁面服務，方便接下來的測試，使用 live-server 是最簡單的方式之一，如果您已經有靜態頁面可跳過這個步驟。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 從 NPM 全局安裝 live-server</span></span><span id="LC2" class="line">npm i <span class="nt">-g</span> live-server</span><span id="LC3" class="line"><span class="c"># 啓用 Web 服務</span></span><span id="LC4" class="line">live-server</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>創建一個測試頁面到 Web 服務根路徑，以下 html 內容展示一個自動旋轉的三角形 svg 動畫。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="cp">&lt;!DOCTYPE html&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;html&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;head&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;meta</span><span class="na">charset=</span><span class="s">"utf-8"</span><span class="nt">/&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;title&gt;</span>測試頁面<span class="nt">&lt;/title&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/head&gt;</span></span><span id="LC7" class="line"><span class="nt">&lt;body&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;svg</span><span class="na">width=</span><span class="s">"120"</span><span class="na">height=</span><span class="s">"120"</span><span class="na">viewBox=</span><span class="s">"0 0 120 120"</span><span class="na">
                xmlns=</span><span class="s">"http://www.w3.org/2000/svg"</span><span class="na">version=</span><span class="s">"1.1"</span></span><span id="LC9" class="line"><span class="na">
                xmlns:xlink=</span><span class="s">"http://www.w3.org/1999/xlink"</span><span class="nt">&gt;</span></span><span id="LC10" class="line"><span class="nt">&lt;polygon</span><span class="na">points=</span><span class="s">"60,30 90,90 30,90"</span><span class="nt">&gt;</span></span><span id="LC11" class="line"><span class="nt">&lt;animateTransform</span><span class="na">attributeName=</span><span class="s">"transform"</span><span class="na">attributeType=</span><span class="s">"XML"</span><span class="na">type=</span><span class="s">"rotate"</span><span class="na">from=</span><span class="s">"0 60 70"</span><span class="na">to=</span><span class="s">"360 60 70"</span></span><span id="LC12" class="line"><span class="na">dur=</span><span class="s">"10s"</span><span class="na">repeatCount=</span><span class="s">"indefinite"</span><span class="nt">/&gt;</span></span><span id="LC13" class="line"><span class="nt">&lt;/polygon&gt;</span></span><span id="LC14" class="line"><span class="nt">&lt;/svg&gt;</span></span><span id="LC15" class="line"><span class="nt">&lt;/body&gt;</span></span><span id="LC16" class="line"><span class="nt">&lt;/html&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-渲染單幕視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%B8%B2%E6%9F%93%E5%8D%95%E5%B9%95%E8%A7%86%E9%A2%91"></a>渲染單幕視頻</h2><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/single-video.gif" referrerpolicy="no-referrer"><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">logger</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="c1">// 配置 WVC</span></span><span id="LC6" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC7" class="line"><span class="c1">// 根據您的硬件設備選擇適合的編碼器，這裏採用的是 Nvidia 顯卡的 h264_nvenc 編碼器</span></span><span id="LC8" class="line"><span class="c1">// 編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC9" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">NVIDIA</span><span class="p">.</span><span class="nx">H264</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 創建單幕視頻</span></span><span id="LC13" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC14" class="line"><span class="c1">// 需要渲染的頁面地址</span></span><span id="LC15" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/test.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC16" class="line"><span class="c1">// 視頻寬度</span></span><span id="LC17" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC18" class="line"><span class="c1">// 視頻高度</span></span><span id="LC19" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC20" class="line"><span class="c1">// 視頻幀率</span></span><span id="LC21" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC22" class="line"><span class="c1">// 視頻時長</span></span><span id="LC23" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC24" class="line"><span class="c1">// 視頻輸出路徑</span></span><span id="LC25" class="line"><span class="na">outputPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./test.mp4</span><span class="dl">"</span><span class="p">,</span></span><span id="LC26" class="line"><span class="c1">// 是否在 cli 顯示進度條，默認是不顯示</span></span><span id="LC27" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC28" class="line"><span class="p">});</span></span><span id="LC29" class="line"></span><span id="LC30" class="line"><span class="c1">// 監聽合成完成事件</span></span><span id="LC31" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">,</span><span class="nx">result</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC32" class="line"><span class="nx">logger</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">`Render Completed!!!\nvideo duration: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\ntakes: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">takes</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\nRTF: </span><span class="p">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">rtf</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span></span><span id="LC33" class="line"><span class="p">});</span></span><span id="LC34" class="line"></span><span id="LC35" class="line"><span class="c1">// 啓動合成</span></span><span id="LC36" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-渲染多幕視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%B8%B2%E6%9F%93%E5%A4%9A%E5%B9%95%E8%A7%86%E9%A2%91"></a>渲染多幕視頻</h2><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/multi-video.gif" referrerpolicy="no-referrer"><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">TRANSITION</span><span class="p">,</span><span class="nx">logger</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="c1">// 配置 WVC</span></span><span id="LC6" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC7" class="line"><span class="c1">// 根據您的硬件設備選擇適合的編碼器，這裏採用的是 Nvidia 顯卡的 h264_nvenc 編碼器</span></span><span id="LC8" class="line"><span class="c1">// 編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC9" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">NVIDIA</span><span class="p">.</span><span class="nx">H264</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 創建多幕視頻</span></span><span id="LC13" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createMultiVideo</span><span class="p">({</span></span><span id="LC14" class="line"><span class="c1">// 視頻寬度</span></span><span id="LC15" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC16" class="line"><span class="c1">// 視頻高度</span></span><span id="LC17" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC18" class="line"><span class="c1">// 視頻幀率</span></span><span id="LC19" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC20" class="line"><span class="c1">// 視頻段參數</span></span><span id="LC21" class="line"><span class="na">chunks</span><span class="p">:</span><span class="p">[</span></span><span id="LC22" class="line"><span class="p">{</span></span><span id="LC23" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-1.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC24" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC25" class="line"><span class="c1">// 在第一和第二幕之間插入轉場</span></span><span id="LC26" class="line"><span class="na">transition</span><span class="p">:</span><span class="nx">TRANSITION</span><span class="p">.</span><span class="nx">CIRCLE_CROP</span></span><span id="LC27" class="line"><span class="p">},</span></span><span id="LC28" class="line"><span class="p">{</span></span><span id="LC29" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-2.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC30" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span></span><span id="LC31" class="line"><span class="p">}</span></span><span id="LC32" class="line"><span class="p">],</span></span><span id="LC33" class="line"><span class="c1">// 視頻輸出路徑</span></span><span id="LC34" class="line"><span class="na">outputPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./test.mp4</span><span class="dl">"</span><span class="p">,</span></span><span id="LC35" class="line"><span class="c1">// 是否在 cli 顯示進度條，默認是不顯示</span></span><span id="LC36" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC37" class="line"><span class="p">});</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="c1">// 監聽合成完成事件</span></span><span id="LC40" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">,</span><span class="nx">result</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC41" class="line"><span class="nx">logger</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">`Render Completed!!!\nvideo duration: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\ntakes: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">takes</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\nRTF: </span><span class="p">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">rtf</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span></span><span id="LC42" class="line"><span class="p">});</span></span><span id="LC43" class="line"></span><span id="LC44" class="line"><span class="c1">// 啓動合成</span></span><span id="LC45" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-渲染分塊視頻合併為多幕視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%B8%B2%E6%9F%93%E5%88%86%E5%9D%97%E8%A7%86%E9%A2%91%E5%90%88%E5%B9%B6%E4%B8%BA%E5%A4%9A%E5%B9%95%E8%A7%86%E9%A2%91"></a>渲染分塊視頻合併為多幕視頻</h2><img src="https://gitee.com/vblog/web-video-creator/raw/master/assets/chunk-video.gif" referrerpolicy="no-referrer"><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">TRANSITION</span><span class="p">,</span><span class="nx">logger</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="c1">// 配置 WVC</span></span><span id="LC6" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC7" class="line"><span class="c1">// 根據您的硬件設備選擇適合的編碼器，這裏採用的是 Nvidia 顯卡的 h264_nvenc 編碼器</span></span><span id="LC8" class="line"><span class="c1">// 編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC9" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">NVIDIA</span><span class="p">.</span><span class="nx">H264</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 創建分塊視頻 1</span></span><span id="LC13" class="line"><span class="kd">const</span><span class="nx">chunk1</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createChunkVideo</span><span class="p">({</span></span><span id="LC14" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-1.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC15" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC16" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC17" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC18" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC19" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC20" class="line"><span class="p">});</span></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c1">// 創建分塊視頻 2</span></span><span id="LC23" class="line"><span class="kd">const</span><span class="nx">chunk2</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createChunkVideo</span><span class="p">({</span></span><span id="LC24" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-2.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC25" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC26" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC27" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC28" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC29" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC30" class="line"><span class="p">});</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1">// 等待分塊們渲染完成</span></span><span id="LC33" class="line"><span class="k">await</span><span class="nb">Promise</span><span class="p">.</span><span class="nx">all</span><span class="p">([</span><span class="nx">chunk1</span><span class="p">.</span><span class="nx">startAndWait</span><span class="p">(),</span><span class="nx">chunk2</span><span class="p">.</span><span class="nx">startAndWait</span><span class="p">()]);</span></span><span id="LC34" class="line"></span><span id="LC35" class="line"><span class="c1">// 設置 chunk1 和 chunk2 之間的轉場效果為淡入淡出</span></span><span id="LC36" class="line"><span class="nx">chunk1</span><span class="p">.</span><span class="nx">setTransition</span><span class="p">({</span><span class="na">id</span><span class="p">:</span><span class="nx">TRANSITION</span><span class="p">.</span><span class="nx">FADE</span><span class="p">,</span><span class="na">duration</span><span class="p">:</span><span class="mi">500</span><span class="p">});</span></span><span id="LC37" class="line"><span class="c1">// 不設置時長可以直接提供效果 ID</span></span><span id="LC38" class="line"><span class="c1">// chunk1.setTransition(TRANSITION.FADE);</span></span><span id="LC39" class="line"></span><span id="LC40" class="line"><span class="c1">// 創建多幕視頻</span></span><span id="LC41" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createMultiVideo</span><span class="p">({</span></span><span id="LC42" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC43" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC44" class="line"><span class="na">fps</span><span class="p">:</span><span class="mi">30</span><span class="p">,</span></span><span id="LC45" class="line"><span class="c1">// 視頻段</span></span><span id="LC46" class="line"><span class="na">chunks</span><span class="p">:</span><span class="p">[</span></span><span id="LC47" class="line"><span class="nx">chunk1</span><span class="p">,</span></span><span id="LC48" class="line"><span class="nx">chunk2</span></span><span id="LC49" class="line"><span class="p">],</span></span><span id="LC50" class="line"><span class="c1">// 視頻輸出路徑</span></span><span id="LC51" class="line"><span class="na">outputPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./test.mp4</span><span class="dl">"</span><span class="p">,</span></span><span id="LC52" class="line"><span class="c1">// 是否在 cli 顯示進度條</span></span><span id="LC53" class="line"><span class="na">showProgress</span><span class="p">:</span><span class="kc">true</span></span><span id="LC54" class="line"><span class="p">});</span></span><span id="LC55" class="line"></span><span id="LC56" class="line"><span class="c1">// 監聽合成完成事件</span></span><span id="LC57" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">once</span><span class="p">(</span><span class="dl">"</span><span class="s2">completed</span><span class="dl">"</span><span class="p">,</span><span class="nx">result</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC58" class="line"><span class="nx">logger</span><span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="s2">`Render Completed!!!\nvideo duration: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\ntakes: </span><span class="p">${</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">takes</span><span class="o">/</span><span class="mi">1000</span><span class="p">)}</span><span class="s2">s\nRTF: </span><span class="p">${</span><span class="nx">result</span><span class="p">.</span><span class="nx">rtf</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span></span><span id="LC59" class="line"><span class="p">});</span></span><span id="LC60" class="line"></span><span id="LC61" class="line"><span class="c1">// 啓動合成</span></span><span id="LC62" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-全局配置" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE"></a>全局配置</h2><p>您可以全局配置 WVC 調整一些通用參數。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">VIDEO_ENCODER</span><span class="p">,</span><span class="nx">AUDIO_ENCODER</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="kd">const</span><span class="nx">wvc</span><span class="o">=</span><span class="k">new</span><span class="nx">WebVideoCreator</span><span class="p">();</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="nx">wvc</span><span class="p">.</span><span class="nx">config</span><span class="p">({</span></span><span id="LC6" class="line"><span class="c1">// 開啓後將輸出一些 WVC 的調試日誌</span></span><span id="LC7" class="line"><span class="na">debug</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC8" class="line"><span class="c1">// 開啓後將輸出瀏覽器的運行日誌</span></span><span id="LC9" class="line"><span class="na">browserDebug</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC10" class="line"><span class="c1">// 開啓後將輸出每一條執行的 FFmpeg 命令</span></span><span id="LC11" class="line"><span class="na">ffmpegDebug</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC12" class="line"><span class="c1">// ffmpeg 可執行文件路徑，設置後將禁用內部的 ffmpeg-static，建議您默認使用內部的 FFmpeg 以確保功能完整性</span></span><span id="LC13" class="line"><span class="na">ffmpegExecutablePath</span><span class="p">:</span><span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span></span><span id="LC14" class="line"><span class="c1">// ffprobe 可執行文件路徑，設置後將禁用內部的 ffprobe-static，建議您默認使用內部的 ffprobe 以確保功能完整性</span></span><span id="LC15" class="line"><span class="na">ffprobeExecutablePath</span><span class="p">:</span><span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span></span><span id="LC16" class="line"><span class="c1">// 瀏覽器 GPU 加速開關，建議開啓提高渲染性能，如果您沒有 GPU 設備或遭遇了詭異的渲染問題則可以關閉它</span></span><span id="LC17" class="line"><span class="na">browserUseGPU</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC18" class="line"><span class="c1">// 瀏覽器是否使用 Angle 作為渲染後端，建議開啓增強渲染跨平台兼容性和性能</span></span><span id="LC19" class="line"><span class="na">browserUseAngle</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC20" class="line"><span class="c1">// 是否禁用瀏覽器使用共享內存，當/dev/shm 分區較小時建議開啓此選項</span></span><span id="LC21" class="line"><span class="na">browserDisableDevShm</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span></span><span id="LC22" class="line"><span class="c1">// 瀏覽器可執行文件路徑，設置後將禁用內部的瀏覽器，建議您默認使用內部的瀏覽器以確保功能完整性</span></span><span id="LC23" class="line"><span class="na">browserExecutablePath</span><span class="p">:</span><span class="dl">"</span><span class="s2">...</span><span class="dl">"</span><span class="p">,</span></span><span id="LC24" class="line"><span class="c1">// 是否允許不安全的上下文，默認禁用，開啓後能夠導航到不安全的 URL，但由於不安全上下文限制，將無法在頁面中使用動態圖像和內嵌視頻</span></span><span id="LC25" class="line"><span class="na">allowUnsafeContext</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span></span><span id="LC26" class="line"><span class="c1">// 兼容渲染模式，不建議啓用，啓用後將禁用 HeadlessExperimental.beginFrame API 調用改為普通的 Page.screenshot</span></span><span id="LC27" class="line"><span class="c1">// 這會導致渲染性能下降，且部分動畫可能幀率無法同步，當你遭遇 TargetCloseError: Protocol error (HeadlessExperimental.beginFrame): Target closed 錯誤的時候可以嘗試開啓它</span></span><span id="LC28" class="line"><span class="na">compatibleRenderingMode</span><span class="p">:</span><span class="kc">false</span><span class="p">,</span></span><span id="LC29" class="line"><span class="c1">// 資源池最小瀏覽器實例數量</span></span><span id="LC30" class="line"><span class="na">numBrowserMin</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span></span><span id="LC31" class="line"><span class="c1">// 資源池最大瀏覽器實例數量</span></span><span id="LC32" class="line"><span class="na">numBrowserMax</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span></span><span id="LC33" class="line"><span class="c1">// 每個瀏覽器實例最小頁面實例數量</span></span><span id="LC34" class="line"><span class="na">numPageMin</span><span class="p">:</span><span class="mi">1</span><span class="p">,</span></span><span id="LC35" class="line"><span class="c1">// 每個瀏覽器實例最大頁面實例數量</span></span><span id="LC36" class="line"><span class="na">numPageMax</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span></span><span id="LC37" class="line"><span class="c1">// 訪問頁面時的用户 UA</span></span><span id="LC38" class="line"><span class="na">userAgent</span><span class="p">:</span><span class="kc">null</span><span class="p">,</span></span><span id="LC39" class="line"><span class="c1">// 捕獲幀圖質量（0-100），僅 jpeg 有效</span></span><span id="LC40" class="line"><span class="na">frameQuality</span><span class="p">:</span><span class="mi">80</span><span class="p">,</span></span><span id="LC41" class="line"><span class="c1">// 幀圖格式（jpeg/png），建議使用 jpeg，png 捕獲較為耗時</span></span><span id="LC42" class="line"><span class="na">frameFormat</span><span class="p">:</span><span class="dl">"</span><span class="s2">jpeg</span><span class="dl">"</span><span class="p">,</span></span><span id="LC43" class="line"><span class="c1">// BeginFrame 捕獲圖像超時時間</span></span><span id="LC44" class="line"><span class="na">beginFrameTimeout</span><span class="p">:</span><span class="mi">5000</span><span class="p">,</span></span><span id="LC45" class="line"><span class="c1">// MP4 格式的視頻編碼器，默認使用 libx264 軟編碼器，建議根據您的硬件選用合適的硬編碼器加速合成，編碼器選擇可參考 docs/video-encoder.md</span></span><span id="LC46" class="line"><span class="na">mp4Encoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">CPU</span><span class="p">.</span><span class="nx">H264</span><span class="p">,</span></span><span id="LC47" class="line"><span class="c1">// WEBM 格式的視頻編碼器，默認使用 libvpx 軟編碼器，建議根據您的硬件選用合適的硬編碼器加速合成</span></span><span id="LC48" class="line"><span class="na">webmEncoder</span><span class="p">:</span><span class="nx">VIDEO_ENCODER</span><span class="p">.</span><span class="nx">CPU</span><span class="p">.</span><span class="nx">VP8</span><span class="p">,</span></span><span id="LC49" class="line"><span class="c1">// 音頻編碼器，建議採用默認的 aac 編碼器</span></span><span id="LC50" class="line"><span class="na">audioEncoder</span><span class="p">:</span><span class="nx">AUDIO_ENCODER</span><span class="p">.</span><span class="nx">AAC</span></span><span id="LC51" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入音頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E9%9F%B3%E9%A2%91"></a>插入音頻</h2><p>只需在需要渲染的 html 中添加 <code>&lt;audio&gt;</code> 元素，您還可以設置循環，WVC 會自動為視頻合入循環音軌。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">loop</span><span class="nt">&gt;&lt;/audio&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>還可以設置一些其它屬性控制音頻的行為，這些屬性並不總是需要成對出現，您可以根據自己的需求定製。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">&lt;!-- 控制音頻音量為原來的一半 --&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">volume=</span><span class="s">"0.5"</span><span class="nt">&gt;&lt;/audio&gt;</span></span><span id="LC3" class="line"><span class="c">&lt;!-- 控制音頻在 3 秒後開始播放並在 10 秒處停止播放 --&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">startTime=</span><span class="s">"3000"</span><span class="na">endTime=</span><span class="s">"10000"</span><span class="nt">&gt;&lt;/audio&gt;</span></span><span id="LC5" class="line"><span class="c">&lt;!-- 截取音頻第 5 秒到第 15 秒的片段並循環播放它 --&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">seekStart=</span><span class="s">"5000"</span><span class="na">seekEnd=</span><span class="s">"15000"</span><span class="na">loop</span><span class="nt">&gt;&lt;/audio&gt;</span></span><span id="LC7" class="line"><span class="c">&lt;!-- 控制音頻 300 毫秒淡入且 500 毫秒淡出 --&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;audio</span><span class="na">src=</span><span class="s">"bgm.mp3"</span><span class="na">fadeInDuration=</span><span class="s">"300"</span><span class="na">fadeOutDuration=</span><span class="s">"500"</span><span class="nt">&gt;&lt;/audio&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在代碼中添加和移除 <code>&lt;audio&gt;</code> 元素來實現音頻出入場也是被允許的，WVC 將檢測到它們。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">audio</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">audio</span><span class="dl">"</span><span class="p">);</span></span><span id="LC2" class="line"><span class="nx">audio</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">bgm.mp3</span><span class="dl">"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="c1">// 音頻在視頻第 3 秒入場</span></span><span id="LC4" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">audio</span><span class="p">),</span><span class="mi">3000</span><span class="p">);</span></span><span id="LC5" class="line"><span class="c1">// 音頻在視頻第 8 秒出場</span></span><span id="LC6" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">audio</span><span class="p">.</span><span class="nx">remove</span><span class="p">(),</span><span class="mi">8000</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者在頁面中調用 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/capture-ctx.md#capturecontextaddaudiooptions-object">captureCtx.addAudio</a> 添加音頻到視頻中。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 添加單個音頻</span></span><span id="LC2" class="line"><span class="nx">captureCtx</span><span class="p">.</span><span class="nx">addAudio</span><span class="p">({</span></span><span id="LC3" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">bgm.mp3</span><span class="dl">"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="na">startTime</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span></span><span id="LC5" class="line"><span class="na">loop</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC6" class="line"><span class="c1">// 80% 的音量</span></span><span id="LC7" class="line"><span class="na">volume</span><span class="p">:</span><span class="mi">80</span></span><span id="LC8" class="line"><span class="p">});</span></span><span id="LC9" class="line"><span class="c1">// 添加多個音頻</span></span><span id="LC10" class="line"><span class="nx">captureCtx</span><span class="p">.</span><span class="nx">addAudios</span><span class="p">([...]);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>也可以在 WVC 中直接使用 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/api-reference-high-level.md#singlevideoaddaudiooptions-object">addAudio</a> 將本地或遠程的音頻添加到視頻中。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="c1">// 添加單個音頻</span></span><span id="LC3" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">addAudio</span><span class="p">({</span></span><span id="LC4" class="line"><span class="c1">// url: "http://.../bgm.mp3"</span></span><span id="LC5" class="line"><span class="na">path</span><span class="p">:</span><span class="dl">"</span><span class="s2">bgm.mp3</span><span class="dl">"</span><span class="p">,</span></span><span id="LC6" class="line"><span class="na">startTime</span><span class="p">:</span><span class="mi">500</span><span class="p">,</span></span><span id="LC7" class="line"><span class="na">loop</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC8" class="line"><span class="c1">// 80% 的音量</span></span><span id="LC9" class="line"><span class="na">volume</span><span class="p">:</span><span class="mi">80</span></span><span id="LC10" class="line"><span class="p">});</span></span><span id="LC11" class="line"><span class="c1">// 添加多個音頻</span></span><span id="LC12" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">addAudios</span><span class="p">([...]);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>這樣的操作同樣適用於 MultiVideo 和 ChunkVideo 。</p><h2><a id="user-content-插入視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E8%A7%86%E9%A2%91"></a>插入視頻</h2><p>目前支持 <code>mp4</code> 和 <code>webm</code> 格式的視頻，只需在需要渲染的 html 中添加 <code>&lt;video&gt;</code> 元素，您可以設置循環和靜音，如果您的 src 不包含 <code>.mp4</code> 後綴名可能無法被識別，請添加 <code>capture</code> 屬性標識為需要捕獲的元素。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"background.mp4"</span><span class="na">loop</span><span class="na">muted</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>如果希望插入透明通道的視頻請見：<a href="https://gitee.com/vblog/web-video-creator#%E9%80%8F%E6%98%8E%E9%80%9A%E9%81%93%E8%A7%86%E9%A2%91">透明通道視頻</a>，對視頻幀率同步或透明視頻繪製感興趣可以參考：<a href="https://gitee.com/vblog/web-video-creator#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0">技術實現</a>。</p><p>和音頻一樣，它也支持設置一些屬性控制視頻的行為，這些屬性並不總是需要成對出現，您可以根據自己的需求定製。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">&lt;!-- 控制音頻音量為原來的 70% --&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">volume=</span><span class="s">"0.7"</span><span class="nt">&gt;&lt;/video&gt;</span></span><span id="LC3" class="line"><span class="c">&lt;!-- 控制視頻在 3 秒後開始播放並在 10 秒處停止播放 --&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">startTime=</span><span class="s">"3000"</span><span class="na">endTime=</span><span class="s">"10000"</span><span class="nt">&gt;&lt;/video&gt;</span></span><span id="LC5" class="line"><span class="c">&lt;!-- 截取視頻第 5 秒到第 15 秒的片段並循環播放它 --&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">seekStart=</span><span class="s">"5000"</span><span class="na">seekEnd=</span><span class="s">"15000"</span><span class="na">loop</span><span class="nt">&gt;&lt;/video&gt;</span></span><span id="LC7" class="line"><span class="c">&lt;!-- 控制視頻的音頻在 300 毫秒淡入且 500 毫秒淡出 --&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"test.mp4"</span><span class="na">fadeInDuration=</span><span class="s">"300"</span><span class="na">fadeOutDuration=</span><span class="s">"500"</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在代碼中添加和移除 <code>&lt;video&gt;</code> 元素來實現視頻出入場也是被允許的，WVC 將檢測到它們。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="dl">"</span><span class="s2">video</span><span class="dl">"</span><span class="p">);</span></span><span id="LC2" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="dl">"</span><span class="s2">test.mp4</span><span class="dl">"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="c1">// 視頻在第 3 秒入場</span></span><span id="LC4" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">appendChild</span><span class="p">(</span><span class="nx">video</span><span class="p">),</span><span class="mi">3000</span><span class="p">);</span></span><span id="LC5" class="line"><span class="c1">// 視頻在第 8 秒出場</span></span><span id="LC6" class="line"><span class="nx">setTimeout</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">video</span><span class="p">.</span><span class="nx">remove</span><span class="p">(),</span><span class="mi">8000</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-透明通道視頻" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E9%80%8F%E6%98%8E%E9%80%9A%E9%81%93%E8%A7%86%E9%A2%91"></a>透明通道視頻</h3><p>透明視頻非常適合用於將 vtuber 數字人合成到視頻畫面中，結合精美的動畫可以獲得非常好的觀看體驗，合成效果請參考 <strong><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FVinlic%2FWebVideoCreator%2Fwiki%2FRendering-Example">渲染示例頁面</a></strong> 最後一個 Demo。</p><p>透明通道視頻格式需為 <code>webm</code> ，在內部它會被重新編碼為兩個 mp4 容器的視頻，分別是原色底視頻和蒙版視頻後在瀏覽器 canvas 中使用進行 <code>globalCompositeOperation</code> 進行圖像混合並繪製。</p><p>對於使用者是無感的，像下面代碼演示中那樣，只需需要渲染的 html 中添加 <code>&lt;video&gt;</code> 元素，並設置 src 為 webm 格式視頻地址即可。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"vtuber.webm"</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>webm 編解碼通常比較耗時，如果您可以直接獲得原始 mp4 視頻和蒙版 mp4 視頻是更好的方案，只需增加設置 maskSrc 即可。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;video</span><span class="na">src=</span><span class="s">"vtuber.mp4"</span><span class="na">maskSrc=</span><span class="s">"vtuber_mask.mp4"</span><span class="nt">&gt;&lt;/video&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入動態圖像" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E5%8A%A8%E6%80%81%E5%9B%BE%E5%83%8F"></a>插入動態圖像</h2><p>動態圖像指的是 <code>gif</code> / <code>apng</code> / <code>webp</code> 格式的序列幀動畫，他們可以在瀏覽器中自然播放，幀率通常是不可控的，但 WVC 代理了它們的繪製，img 元素被替換為 canvas 並通過 ImageDecoder 解碼繪製每一幀，讓序列幀動畫按照虛擬時間同步繪製。</p><p>以下這些動圖都能夠正常繪製，您也可以照常給他們設置樣式。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;img</span><span class="na">src=</span><span class="s">"test.gif"</span><span class="nt">/&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;img</span><span class="na">src=</span><span class="s">"test.apng"</span><span class="nt">/&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;img</span><span class="na">src=</span><span class="s">"test.webp"</span><span class="nt">/&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入 lottie 動畫" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5lottie%E5%8A%A8%E7%94%BB"></a>插入 Lottie 動畫</h2><p>WVC 已經內置 <a href="https://gitee.com/link?target=http%3A%2F%2Fairbnb.io%2Flottie%2F%23%2Fweb">lottie-web</a> 動畫庫，如果您的頁面有自己實現的 lottie 動效則可以忽略本內容，因為它們也能夠正常工作。</p><p>只需要插入一個 <code>&lt;lottie&gt;</code> 元素並設置 src 即可。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;lottie</span><span class="na">src=</span><span class="s">"example.json"</span><span class="nt">&gt;&lt;/lottie&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-應用字體" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BA%94%E7%94%A8%E5%AD%97%E4%BD%93"></a>應用字體</h2><p>WVC 能夠檢測樣式表中的 <code>@font-face</code> 聲明並等待字體加載完成再開始渲染。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;style&gt;</span></span><span id="LC2" class="line"><span class="k">@font-face</span><span class="p">{</span></span><span id="LC3" class="line"><span class="nl">font-family</span><span class="p">:</span><span class="s1">"FontTest"</span><span class="p">;</span></span><span id="LC4" class="line"><span class="nl">src</span><span class="p">:</span><span class="sx">url("font.ttf")</span><span class="n">format</span><span class="p">(</span><span class="s1">"truetype"</span><span class="p">);</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"><span class="nt">&lt;/style&gt;</span></span><span id="LC7" class="line"><span class="nt">&lt;p</span><span class="na">style=</span><span class="s">'font-family: "FontTest"'</span><span class="nt">&gt;</span>Hello World<span class="nt">&lt;/p&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者，可以通過代碼註冊本地或遠程的字體。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="c1">// 註冊單個字體</span></span><span id="LC3" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">registerFont</span><span class="p">({</span></span><span id="LC4" class="line"><span class="c1">// url: "http://.../font.ttf"</span></span><span id="LC5" class="line"><span class="na">path</span><span class="p">:</span><span class="dl">"</span><span class="s2">font.ttf</span><span class="dl">"</span><span class="p">,</span></span><span id="LC6" class="line"><span class="na">family</span><span class="p">:</span><span class="dl">"</span><span class="s2">FontTest</span><span class="dl">"</span><span class="p">,</span></span><span id="LC7" class="line"><span class="na">format</span><span class="p">:</span><span class="dl">"</span><span class="s2">truetype</span><span class="dl">"</span></span><span id="LC8" class="line"><span class="p">});</span></span><span id="LC9" class="line"><span class="c1">// 註冊多個字體</span></span><span id="LC10" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">registerFonts</span><span class="p">([...]);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>您需要確保字體能夠正常加載，否則可能無法啓動渲染。</p><h2><a id="user-content-插入轉場效果" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E8%BD%AC%E5%9C%BA%E6%95%88%E6%9E%9C"></a>插入轉場效果</h2><p>WVC 支持使用 FFmpeg 所支持的 <a href="https://gitee.com/link?target=https%3A%2F%2Ftrac.ffmpeg.org%2Fwiki%2FXfade">Xfade</a> 濾鏡來合成轉場效果，可參考<a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/transition.md">轉場列表</a>、</p><p>每個分塊視頻參數都能夠設置轉場效果和持續時長。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="nx">WebVideoCreator</span><span class="p">,</span><span class="p">{</span><span class="nx">TRANSITION</span><span class="p">}</span><span class="k">from</span><span class="dl">"</span><span class="s2">web-video-creator</span><span class="dl">"</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="p">...</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createMultiVideo</span><span class="p">({</span></span><span id="LC6" class="line"><span class="p">...</span></span><span id="LC7" class="line"><span class="c1">// 視頻段參數</span></span><span id="LC8" class="line"><span class="na">chunks</span><span class="p">:</span><span class="p">[</span></span><span id="LC9" class="line"><span class="p">{</span></span><span id="LC10" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-1.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC11" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC12" class="line"><span class="c1">// 在第一和第二幕之間插入淡入淡出轉場</span></span><span id="LC13" class="line"><span class="na">transition</span><span class="p">:</span><span class="p">{</span></span><span id="LC14" class="line"><span class="na">id</span><span class="p">:</span><span class="nx">TRANSITION</span><span class="p">.</span><span class="nx">FADE</span><span class="p">,</span></span><span id="LC15" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">500</span></span><span id="LC16" class="line"><span class="p">},</span></span><span id="LC17" class="line"><span class="c1">// 如果不需要設置時長也可以直接設置轉場 ID</span></span><span id="LC18" class="line"><span class="c1">// transition: TRANSITION.FADE</span></span><span id="LC19" class="line"><span class="p">},</span></span><span id="LC20" class="line"><span class="p">{</span></span><span id="LC21" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/scene-2.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC22" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span></span><span id="LC23" class="line"><span class="p">}</span></span><span id="LC24" class="line"><span class="p">],</span></span><span id="LC25" class="line"><span class="p">...</span></span><span id="LC26" class="line"><span class="p">});</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="p">...</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>需要注意的是，應用轉場會導致視頻總時長縮短，轉場效果實際上是兩段視頻的部分重疊，兩段 5 秒的視頻插入轉場，會合成時長為 9 秒的視頻。</p><p>Lottie 動畫也很適合作為轉場效果，您可以在一段視頻的尾部播放一半時長的全屏 Lottie 動畫，然後在下一段視頻開頭播放另一半時長的全屏 Lottie 動畫實現更動感的轉場效果。</p><h2><a id="user-content-延遲啓動渲染" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BB%B6%E8%BF%9F%E5%90%AF%E5%8A%A8%E6%B8%B2%E6%9F%93"></a>延遲啓動渲染</h2><p>WVC 默認頁面導航完成後立即啓動渲染，如果希望在渲染之前進行一些工作，可以在選項中禁用自動啓動渲染，禁用後請記得在您的頁面中調用 <a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/capture-ctx.md#capturecontextstart">captureCtx.start()</a>，否則將永遠阻塞。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/test.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC3" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC4" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC5" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC6" class="line"><span class="c1">// 禁用自動啓動渲染</span></span><span id="LC7" class="line"><span class="na">autostartRender</span><span class="p">:</span><span class="kc">false</span></span><span id="LC8" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>頁面代碼中，在您覺得合適的時機調用啓動。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;script&gt;</span></span><span id="LC2" class="line"><span class="c1">// 數據加載完成後啓動渲染</span></span><span id="LC3" class="line"><span class="nx">loadData</span><span class="p">()</span></span><span id="LC4" class="line"><span class="p">.</span><span class="nx">then</span><span class="p">(()</span><span class="o">=&gt;</span><span class="nx">captureCtx</span><span class="p">.</span><span class="nx">start</span><span class="p">())</span></span><span id="LC5" class="line"><span class="p">.</span><span class="k">catch</span><span class="p">(</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span><span id="LC6" class="line"><span class="nt">&lt;/script&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-啓動渲染前操作頁面" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%90%AF%E5%8A%A8%E6%B8%B2%E6%9F%93%E5%89%8D%E6%93%8D%E4%BD%9C%E9%A1%B5%E9%9D%A2"></a>啓動渲染前操作頁面</h2><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="na">url</span><span class="p">:</span><span class="dl">"</span><span class="s2">http://localhost:8080/test.html</span><span class="dl">"</span><span class="p">,</span></span><span id="LC3" class="line"><span class="na">width</span><span class="p">:</span><span class="mi">1280</span><span class="p">,</span></span><span id="LC4" class="line"><span class="na">height</span><span class="p">:</span><span class="mi">720</span><span class="p">,</span></span><span id="LC5" class="line"><span class="na">duration</span><span class="p">:</span><span class="mi">10000</span><span class="p">,</span></span><span id="LC6" class="line"><span class="na">pagePrepareFn</span><span class="p">:</span><span class="k">async</span><span class="nx">page</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC7" class="line"><span class="c1">// 獲取 puppeteer Page 對象</span></span><span id="LC8" class="line"><span class="kd">const</span><span class="nx">_page</span><span class="o">=</span><span class="nx">page</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span></span><span id="LC9" class="line"><span class="c1">// 點擊按鈕</span></span><span id="LC10" class="line"><span class="k">await</span><span class="nx">_page</span><span class="p">.</span><span class="nx">tap</span><span class="p">(</span><span class="dl">"</span><span class="s2">#play-button</span><span class="dl">"</span><span class="p">);</span></span><span id="LC11" class="line"><span class="p">}</span></span><span id="LC12" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-頁面控制枱輸出" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E9%A1%B5%E9%9D%A2%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA"></a>頁面控制枱輸出</h2><p>如果想看到頁面的日誌，可在視頻選項中開啓 consoleLog。開啓 videoPreprocessLog 將輸出內嵌視頻預處理日誌。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 輸出頁面控制枱打印的日誌</span></span><span id="LC4" class="line"><span class="na">consoleLog</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC5" class="line"><span class="c1">// 輸出內嵌視頻預處理日誌</span></span><span id="LC6" class="line"><span class="na">videoPreprocessLog</span><span class="p">:</span><span class="kc">true</span></span><span id="LC7" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-截取封面圖" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%88%AA%E5%8F%96%E5%B0%81%E9%9D%A2%E5%9B%BE"></a>截取封面圖</h2><p>合成視頻後可以截取某一幀圖像並保存，可以作為視頻封面圖。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 是否截取圖像</span></span><span id="LC4" class="line"><span class="na">coverCapture</span><span class="p">:</span><span class="kc">true</span><span class="p">,</span></span><span id="LC5" class="line"><span class="c1">// 圖像截取時間點（毫秒），默認是視頻時長的 20% 位置）</span></span><span id="LC6" class="line"><span class="na">coverCaptureTime</span><span class="p">:</span><span class="mi">1000</span><span class="p">,</span></span><span id="LC7" class="line"><span class="c1">// 圖像保存格式（jpg/png/bmp），默認 jpg</span></span><span id="LC8" class="line"><span class="na">coverCaptureFormat</span><span class="p">:</span><span class="dl">"</span><span class="s2">jpg</span><span class="dl">"</span></span><span id="LC9" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-插入封面圖" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8F%92%E5%85%A5%E5%B0%81%E9%9D%A2%E5%9B%BE"></a>插入封面圖</h2><p>WVC 支持往視頻的首幀插入圖像，當視頻未被播放時將展示首幀圖像。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置附加的封面圖地址，支持 jpg/png/bmp</span></span><span id="LC4" class="line"><span class="na">attachCoverPath</span><span class="p">:</span><span class="dl">"</span><span class="s2">./cover.jpg</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-調整視頻音量" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%B0%83%E6%95%B4%E8%A7%86%E9%A2%91%E9%9F%B3%E9%87%8F"></a>調整視頻音量</h2><p>您可以控制輸出視頻的總音量。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置視頻音量為原來的 80%</span></span><span id="LC4" class="line"><span class="na">volume</span><span class="p">:</span><span class="mi">80</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-控制輸出視頻質量" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8E%A7%E5%88%B6%E8%BE%93%E5%87%BA%E8%A7%86%E9%A2%91%E8%B4%A8%E9%87%8F"></a>控制輸出視頻質量</h2><p>WVC 支持通過 <code>videoQuality</code> 或 <code>videoBitrate</code> 控制視頻圖像質量。</p><p>videoQuality 是通過圖像總像素量簡單計算碼率，以下 WVC 內計算視頻碼率方法。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">pixels</span><span class="o">=</span><span class="nx">width</span><span class="o">*</span><span class="nx">height</span><span class="p">;</span></span><span id="LC2" class="line"><span class="kd">const</span><span class="nx">videoBitrate</span><span class="o">=</span><span class="p">(</span><span class="mi">2560</span><span class="o">/</span><span class="mi">921600</span><span class="o">*</span><span class="nx">pixels</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">videoQuality</span><span class="o">/</span><span class="mi">100</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>可以在視頻選項中提供 videoQuality（0-100）</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置視頻質量為 80%</span></span><span id="LC4" class="line"><span class="na">videoQuality</span><span class="p">:</span><span class="mi">80</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>如果您認為碼率不合適，可以單獨設置 videoBitrate。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置視頻碼率為 8Mbps</span></span><span id="LC4" class="line"><span class="na">videoBitrate</span><span class="p">:</span><span class="dl">"</span><span class="s2">8192k</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>另外還可以調整幀圖質量，當使用 jpeg 作為幀圖格式時可以調整 frameQuality，詳見 <a href="https://gitee.com/vblog/web-video-creator#%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE">全局配置</a>。</p><p>音頻質量則可以通過設置音頻碼率 audioBitrate 調整。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置音頻碼率為 320Kbps</span></span><span id="LC4" class="line"><span class="na">audioBitrate</span><span class="p">:</span><span class="dl">"</span><span class="s2">320k</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-修改像素格式" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E4%BF%AE%E6%94%B9%E5%83%8F%E7%B4%A0%E6%A0%BC%E5%BC%8F"></a>修改像素格式</h2><p>WVC 目前支持輸出 <code>yuv420p</code> / <code>yuv444p</code> / <code>rgb24</code> 像素格式的視頻，默認採用兼容性更好的 yuv420p ，如果您發現輸出的視頻與頁面的顏色有較大的差異，可以切換為 rgb24 改善這個問題。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span></span><span id="LC2" class="line"><span class="p">...,</span></span><span id="LC3" class="line"><span class="c1">// 設置像素格式為 rgb24</span></span><span id="LC4" class="line"><span class="na">pixelFormat</span><span class="p">:</span><span class="dl">"</span><span class="s2">rgb24</span><span class="dl">"</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><br><h1><a id="user-content-視頻編碼器選擇" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%A7%86%E9%A2%91%E7%BC%96%E7%A0%81%E5%99%A8%E9%80%89%E6%8B%A9"></a>視頻編碼器選擇</h1><p>瀏覽器渲染輸出幀圖流輸入 FFmpeg 時需要通過視頻編碼器將圖像數據按指定幀率編碼為視頻數據並存儲於指定格式容器中，視頻編碼是一項較為消耗資源的操作，選用硬編碼器可以加速這個過程並降低 CPU 的負載。</p><p>WVC 支持的視頻編碼器請參考：<a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/video-encoder.md">視頻編碼器説明</a></p><br><h1><a id="user-content-進度監聽" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E8%BF%9B%E5%BA%A6%E7%9B%91%E5%90%AC"></a>進度監聽</h1><p>您可以通過視頻實例的 <code>progress</code> 事件監聽渲染合成進度。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">progress</span><span class="dl">"</span><span class="p">,</span><span class="p">(</span><span class="nx">progress</span><span class="p">,</span><span class="nx">synthesizedFrameCount</span><span class="p">,</span><span class="nx">totalFrameCount</span><span class="p">)</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC3" class="line"><span class="c1">// 輸出，進度 / 已合成幀數 / 總幀數</span></span><span id="LC4" class="line"><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">progress</span><span class="p">,</span><span class="nx">synthesizedFrameCount</span><span class="p">,</span><span class="nx">totalFrameCount</span><span class="p">);</span></span><span id="LC5" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>這同樣適用於 <code>MultiVideo</code> / <code>ChunkVideo</code> 以及低級別 API 的合成器。</p><br><h1><a id="user-content-異常處理" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86"></a>異常處理</h1><h2><a id="user-content-拋出錯誤" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8A%9B%E5%87%BA%E9%94%99%E8%AF%AF"></a>拋出錯誤</h2><p>您可以在頁面中主動拋出錯誤來中斷渲染。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;script&gt;</span></span><span id="LC2" class="line"><span class="nx">____throwError</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="dl">"</span><span class="s2">Abort</span><span class="dl">"</span><span class="p">);</span></span><span id="LC3" class="line"><span class="nt">&lt;/script&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-監聽頁面崩潰" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%9B%91%E5%90%AC%E9%A1%B5%E9%9D%A2%E5%B4%A9%E6%BA%83"></a>監聽頁面崩潰</h2><p>如果您的頁面存在大量密集計算或者佔用過多的運行內存，頁面將可能崩潰，從而導致渲染中斷。</p><p>如果使用高級別 API，頁面崩潰時通過視頻實例的 <code>error</code> 事件通知。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="c1">// 錯誤時輸出 Page crashed:...</span></span><span id="LC3" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>使用低級別 API 時，頁面崩潰時通過 Page 實例的 <code>crashed</code> 事件通知</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 錯誤時輸出崩潰錯誤</span></span><span id="LC2" class="line"><span class="nx">page</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">crashed</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-監聽其它錯誤" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E7%9B%91%E5%90%AC%E5%85%B6%E5%AE%83%E9%94%99%E8%AF%AF"></a>監聽其它錯誤</h2><p>如果使用高級別 API，頁面崩潰時通過視頻實例的 <code>error</code> 事件通知。</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">const</span><span class="nx">video</span><span class="o">=</span><span class="nx">wvc</span><span class="p">.</span><span class="nx">createSingleVideo</span><span class="p">({</span><span class="p">...</span><span class="p">});</span></span><span id="LC2" class="line"><span class="nx">video</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>使用低級別 API 時，頁面崩潰時通過 Page 實例的 <code>error</code> 事件通知</p><div class="monokai"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nx">page</span><span class="p">.</span><span class="nx">on</span><span class="p">(</span><span class="dl">"</span><span class="s2">error</span><span class="dl">"</span><span class="p">,</span><span class="nx">err</span><span class="o">=&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">err</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><br><h1><a id="user-content-分佈式渲染方案" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%88%86%E5%B8%83%E5%BC%8F%E6%B8%B2%E6%9F%93%E6%96%B9%E6%A1%88"></a>分佈式渲染方案</h1><p>如果您有多台設備可以為這些設備部署 WVC，它提供了 <code>MultiVideo</code> 和 <code>ChunkVideo</code>，您可以將動畫頁面分為很多個分段，如 0-10 秒、10-20 秒...，將它們的參數分發到不同設備的 WVC 上，在這些設備上創建 ChunkVideo 實例並執行並行渲染為多個視頻 <code>ts</code> 分段，將他們回傳到核心節點上，並最終輸入 MultiVideo 進行合併以及轉場、音軌合成輸出。<strong>這個分發以及回傳流程 WVC 還未實現，但它並不難，您可以根據自己的場景進行封裝並歡迎為 WVC 貢獻<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FVinlic%2FWebVideoCreator%2Fpulls">PR</a>！</strong></p><br><h1><a id="user-content-api 參考" class="anchor" href="https://gitee.com/vblog/web-video-creator#api%E5%8F%82%E8%80%83"></a>API 參考</h1><h2><a id="user-content-高級別 api" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E9%AB%98%E7%BA%A7%E5%88%ABapi"></a>高級別 API</h2><p>大部分時候，建議使用高級別 API，因為它足夠的簡單，但可能不夠靈活。</p><p><a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/api-reference-high-level.md">API Reference High Level</a></p><h2><a id="user-content-低級別 api" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E4%BD%8E%E7%BA%A7%E5%88%ABapi"></a>低級別 API</h2><p><a href="https://gitee.com/vblog/web-video-creator/blob/master/docs/api-reference-low-level.md">API Reference Low Level</a></p><br><h1><a id="user-content-性能提示" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%80%A7%E8%83%BD%E6%8F%90%E7%A4%BA"></a>性能提示</h1><p>性能通常受動畫和媒體的複雜程度影響，您可以將長時間動畫分為多個分段動畫播放，比如為每個頁面地址帶一個 seek 參數，加載頁面後 seek 到指定時間點開始播放，然後作為多幕視頻進行渲染合成，可以顯著的降低長視頻的渲染耗時。</p><ul><li>並行更多的視頻塊渲染，如果希望榨乾系統資源，在確保系統內存充足的情況下並行數選定為 CPU 的線程數</li><li>CPU 主頻對於基準速度影響較大，通常消費級 CPU 主頻很高，可以獲得更佳的性能。</li><li>建議使用 GPU 加速渲染和合成，如果您設備有 GPU 但沒有被使用，請檢查配置項或報告問題。</li><li>採用 SSD（固態硬盤）可以提升並行渲染時的硬盤緩存寫入性能從而降低渲染耗時。</li><li>選擇正確的視頻硬編碼器很重要，默認採用的是軟編碼器（mp4 是 libx264，webm 是 libvpx），如果您有核顯或者獨顯請記得配置他們支持的硬編碼器。</li><li>有些耗時可能來自於網絡文件傳輸，建議將靜態文件服務部署於同一台服務器或從局域網訪問文件服務器。</li><li>降低輸出視頻分辨率和幀率是降低耗時最有效的方法。</li></ul><hr><p>目前手上沒有更好的測試設備，我將以我的個人主機的性能參數作為參考：</p><p>系統：Windows10（在 Linux 系統中性能表現更好）</p><p>CPU: AMD Ryzen 7 3700X（主頻 3.6-4.4GHz 8 核 16 線程）</p><p>GPU: Nvidia GeForce GTX 1660 SUPER（6GB 顯存，支持 NVENC）</p><p>RAM: 16GB（DDR4 2400MHz）</p><p>視頻類型：SVG 動畫+GIF+Lottie 動畫播放</p><p>視頻分辨率：1280x720</p><p>視頻幀率：30</p><p>視頻時長：300s（5 分鐘）</p><p>渲染耗時：61s（1 分鐘）</p><p>實時率：4.844</p><p>並行渲染數：16</p><hr><br><h1><a id="user-content-侷限性" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E5%B1%80%E9%99%90%E6%80%A7"></a>侷限性</h1><ul><li>受制於瀏覽器的<a href="https://gitee.com/link?target=https%3A%2F%2Fw3c.github.io%2Fwebappsec-secure-contexts%2F">安全上下文限制</a>，只能訪問 localhost / 127.0.0.1 或者使用 HTTPS 協議且證書有效的域，從安全角度考慮建議使用本機靜態服務器（live-server 是一個不錯的選擇）。</li><li>在 Mac 系統中使用無頭實驗 API 在會發生崩潰，需要改為兼容渲染模式才能運行，但兼容渲染模式存在諸多問題，不建議在 Mac 系統使用，詳見<a href="https://gitee.com/vblog/web-video-creator#%E5%85%BC%E5%AE%B9%E6%B8%B2%E6%9F%93%E6%A8%A1%E5%BC%8F">兼容渲染模式</a></li><li>WebVideoCreator 是純 ESM 包，無法使用 CommonJS 風格引入，如果依然希望使用 require 引入，請參考：<a href="https://gitee.com/link?target=https%3A%2F%2Fgist.github.com%2Fsindresorhus%2Fa39789f98801d908bbc7ff3ecc99d99c">https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c</a></li></ul><br><h1><a id="user-content-技術實現" class="anchor" href="https://gitee.com/vblog/web-video-creator#%E6%8A%80%E6%9C%AF%E5%AE%9E%E7%8E%B0"></a>技術實現</h1><p>正在編寫中...</p>]]>
            </description>
            <pubDate>Fri, 03 Nov 2023 02:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/vblog/web-video-creator</guid>
            <link>https://gitee.com/vblog/web-video-creator</link>
        </item>
        <item>
            <title>
                <![CDATA[遊戲引擎 Godot 4.1.3 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Godot 4.1.3 現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgodotengine.org%2Farticle%2Fmaintenance-release-godot-4-1-3%2F" target="_blank">發佈</a>，共有 76 位貢獻者提出了 128 項 pull-request（或 133 次 commits）。Godot 是一個非營利性的開源遊戲引擎，由數百名貢獻者利用業餘時間開發，也有少數兼職或全職開發人員受僱於 Godot 社區的捐助。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-e95b46d9d794618d76ef3887eeade7270b9.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">v4.1.3 是&nbsp;Godot 4.1 的第三個維護版本，包含了許多針對渲染系統的修復，解決了所有渲染後端、光照貼圖和體素全局照明系統以及 GPU 粒子中的問題。編輯器 UI 和引擎 GUI 系統中的各種問題已得到解決，輸入團隊改進了控制器支持並解決了 Android 平台特有的幾個問題。</span></p><p><span style="color:#000000">此外還添加了一個重要的修復程序，以改進對 Android 14 的支持，並修復了其他目標平台上的各種錯誤。以及糾正了一些文檔錯誤，並且為<code class="language-plaintext">RenderingDevice</code>class 提供了新的文檔。</span></p><p>截至目前，與之前的 Godot 4.1.x 版本沒有已知的不兼容性。官方鼓勵所有用户升級到 4.1.3。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgodotengine.org%2Fdownload%2F" target="_blank"><strong>立即下載 Godot 4.1.3</strong></a>或嘗試<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feditor.godotengine.org%2F4.1.3.stable%2F" target="_blank">在線版本的 Godot 編輯器</a>。</p><p>更多詳情可查看官方公告。</p><p><strong>相關閲讀：</strong></p><ul><li><a href="https://www.oschina.net/news/258085/godot-developer-fund" target="_blank">遊戲引擎項目 Godot 成立開發基金</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 03 Nov 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264867/godot-4-1-3-released</guid>
            <link>https://www.oschina.net/news/264867/godot-4-1-3-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[數據庫國產化，是一門圈錢的生意嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>最近兩天，技術圈掀起了一場關於數據庫國產化的大討論，國產數據庫到底是真自研還是來套殼圈錢的？</p><p><span style="background-color:#ffffff; color:#333333">開源 PG 發行版&nbsp;</span>Pigsty 創始人馮若航在微信公眾號「非法加馮」發佈的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fvh1JE_BdaLetWtt5vvPDDw" target="_blank">《數據庫真被卡脖子了嗎？》</a>一文認為，<strong>很多「國產數據庫」就是爛泥扶不上牆的殘次品。<span style="background-color:#ffffff; color:#3f3f3f">把開源免費的軟件包裝一下，用 Oracle 的價格賣給你！</span></strong></p><p>「真正自研的數據庫出現兩極分化：極少數真正有創新貢獻與使用價值的產品愛惜羽毛，不會刻意標榜「國產」。而剩下的大多數往往多是閉門造車、技術落後的土法數據庫，或者開源古早分叉、負向閹割出來的劣質輪子。國產數據庫並非沒有踏實做事的好公司，只是「國產」這個標籤被大量鑽入數據庫領域的平庸低劣產品污染。</p><p>「更讓人扼腕的是劣幣驅逐良幣。本已稀缺的數據庫研發人力經過這樣的揮霍，反而會真正卡死國內數據庫產業的脖子。特別是核心的 OLTP/關係型數據庫領域因為開源的存在，已經不缺足夠好用的內核了。能把 PostgreSQL / MySQL 用好並提供服務支持，遠比自欺欺人的大煉內核要有價值的多。」</p><p>馮若航認為，業界已經不缺足夠完美的數據庫內核了 —— 比如 PostgreSQL，功能完備且開源免費（BSD-Like）。無數」國產數據庫「基於 PG 換皮套殼魔改而成。如果説誰在數據庫內核上被卡了脖子，那肯定是吃飽了撐着給噎着的。</p><p>但數據庫國產化又是必要的，正如微信公眾號「白鱔的洞穴」發佈的文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F1btCxNVkBOirr_O05P__YA" target="_blank">《數據庫國產化是在套殼圈錢嗎》</a>所言：「<strong>一旦<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">上了老美的黑名單，你想買 Oracle 人家也不賣了。」</span></strong></p><p><strong>文章還認為，利用國產數據庫去圈錢真的有點腦洞太大了。</strong></p><p>「想要圈錢的人，沒必要去搞數據庫，有大量的可以更好圈錢的項目可以去折騰。我所見到的國產數據庫的朋友，大多數還是有些情懷的。就像十年前我見到南大通用當時的董事長崔維力的時候他所説的想幹點點天元的事情的時候的感受一樣，只有有點情懷的人才會去幹這種十分長線的、不知道啥時候能掙着錢的買賣。</p><p>」我認識的朋友中不乏一些在數據庫領域中很成功的人，自從入圈自研數據庫後，雖然也看到他們幾個億幾個億的融資，不過算下來，這些人乾的基本上都是過路財神的活，融來的錢很快就填到無底洞似的研發與營銷中了。雖然如此，國產數據庫企業的技術人員待遇並不高，除了幾家財大氣粗，能夠長期大投入的企業外，大多數國產數據庫企業的研發骨幹和管理高層並沒有像有些人所想象的那樣賺得盆滿缽滿。圈錢之説其實是不成立的，我看到的反而，是有不少國產數據庫的從業人員十年清貧，依然痴心不改。這種人哪怕我們不去尊重，也沒必要去詆譭他們。」</p><p>去 IOE 已經説了很多年了，真要操作起來，不光是嘴上喊喊口號的事。薛曉剛在其公眾號」四海內皆兄弟「發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Feetz1aAfa_oogr9keAjJbg" target="_blank">《替換數據庫的代價與真假國產》</a>認為，<strong>從開發、運維以及成本的角度來看，放棄 Oracle，替換成國產數據庫並不容易。</strong></p><p>」國產也有好的，可能只佔少數吧。這些集中在 2016 年以前從事這個行業的，那可能是真的做。就是這個不被看好的時候就做的是還可以的，最起碼不是騙人的。至於做的好壞另説啊。總之不是在有了政策之後才冒出來的搶錢就行。但凡是大家一窩蜂的去做的，基本就是亂來了。</p><p>」<span style="background-color:#ffffff; color:#000000">日常我看到不少手機用蘋果的，筆記本用 MAC 的，開着特斯拉或者用 IPad 的，對我説要替換某某國產數據庫</span>。這些人可能不參與開發，不參與運維，不參與採購，屬於站着説話不腰疼的。這些成本誰出？出了問題你上不？不少人連鎖是什麼都搞不清楚就來説數據庫選型這不是外行指揮內行嗎？「</p><p><strong>關於數據庫國產化替代，你覺得有必要嗎？至於國產化的路子，應該重新開發數據庫內核，還是基於現有開源數據庫搞國產化？數據庫自研與否，其實並不難分辨，為什麼還會出現那麼多圈錢的企業？在評論區留下你的看法吧~</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 11:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10140824</guid>
            <link>https://my.oschina.net/u/3859945/blog/10140824</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[KubeEdge-Ianvs v0.2 發佈：終身學習支持非結構化場景]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F414430%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">KubeEdge-Ianvs v0.2 發佈：終身學習支持非結構化場景</a>》，作者： 雲容器大未來。</p><p>在邊緣計算的浪潮中，AI 是邊緣雲乃至分佈式雲中最重要的應用。隨着邊緣設備的廣泛使用和性能提升，將人工智能相關的部分任務部署到邊緣設備已經成為必然趨勢。KubeEdge-Ianvs 子項目，作為業界首個分佈式協同 AI 基準測試平台，基於 KubeEdge-Sedna 為算法及服務開發者提供全場景可擴展的分佈式協同 AI 基準測試，以研發、衡量和優化分佈式協同 AI 系統。</p><p>然而在邊緣設備中部署靜態的 AI 模型往往不足以應對複雜多變的真實世界環境，因此終身學習能力對於邊緣 AI 模型來説變得越來越重要。為了方便邊緣 AI 算法研究者開發及測試終身學習算法在真實世界環境中的效果，KubeEdge-Ianvs 在新版本的更新中發佈了支持終身學習範式的相關算法的研發與測試功能。</p><p>本篇文章為大家闡釋相關<strong>背景</strong>和<strong>Ianvs 終身學習架構</strong>，並<strong>以 Ianvs 雲機器人終身學習測試</strong>為例對 Ianvs 終身學習的特性進行介紹。歡迎關注 Ianvs 項目，持續獲得第一手獨家公開數據集與完善基準測試配套。</p><p>開源項目 GitHub 地址：https://github.com/kubeedge/ianvs</p><span id="OSC_h1_1"></span><h1>一、背景</h1><span id="OSC_h2_2"></span><h2>1.1 終身學習能力對邊緣模型越來越重要</h2><p>邊緣設備所處的環境通常是不穩定的，環境變化會導致數據分佈的大幅變化，即數據漂移。數據漂移會顯著降低模型準確性。為瞭解決數據漂移問題，邊緣設備需要具備動態更新模型的能力，以適應環境變化。下圖展示了一個典型的終身學習算法流程框架。在該框架中，終身學習任務被定義為：已處理 N 個任務，將陸續處理 M 個任務。如何維護知識庫並利用其中的模型處理這些任務是關鍵。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/28/28a09244308b8b649ede40334d8c9c5d.png" referrerpolicy="no-referrer"></p><p>終身學習的流程分為四步，首先根據之前已處理的 N 個任務初始化雲端的知識庫中的已知任務處理模型；然後在遇到新的任務時，從雲端知識庫中選取合適的模型部署到邊緣端處理任務，如果新任務是已知的任務則更新原來的模型，如果遇到了未知任務則重新訓練新的模型用於處理該任務；在邊緣端處理好該任務後，對雲端知識庫進行更新；最後遇到新任務時重複前兩步操作。通過以上流程可以確保邊緣部署的模型具備終身學習的能力，從而可以應對數據漂移等問題帶來的影響。</p><span id="OSC_h2_3"></span><h2>1.2 業界缺少合適的終身學習測試工具</h2><p>目前終身學習算法相關測試工具發展較慢，目前比較成熟的測試工具只有 ContinualAI 推出的 Avalanche。Avalanche 支持的特性如下：</p><p>&nbsp;</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/92/92b1cb696aac2abe74896dc16aeefc09.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>Avalanche 支持的特性非常豐富，但是對於終身學習算法開發者來説 Avalanche 還存在一些侷限性：</p><p>&nbsp;</p><ul><li><strong>未能覆蓋終身學習全生命週期算法</strong>：支持的場景主要侷限於增量學習等場景，而終身學習中任務定義、分配以及未知任務識別等流程無法體現在該 benchmark 中。</li><li><strong>缺乏配套真實世界數據集</strong>：配套的數據集主要包括 Split-MNIST、Cifar10 等學術界常用的玩具測試集，缺乏適用的真實世界數據集及配套算法。</li><li><strong>研發算法難以落地</strong>：Avalanche 更多面向終身學習算法的測試實驗，並沒有考慮未來將算法落地部署的需求。</li></ul><p>&nbsp;</p><div><p>因此目前業界亟需一個更好的終身學習測試 benchmarking 工具，Ianvs 發佈的非結構化終身學習新特性可以很好的解決上述問題。</p><span id="OSC_h1_4"></span><h1>二、lanvs 終身學習架構</h1><span id="OSC_h2_5"></span><h2>2.1 Ianvs 終身學習優勢</h2><p>終身學習近年來得到了越來越多的關注，越來越多的邊緣智能從業者認識到了終身學習的重要性。但是終身學習相比其他 AI 算法來説有着更高的研究門檻，經過我們的調研發現終身學習研發存在<strong>模型訓練流程複雜、算法效果難以衡量</strong>和<strong>算法落地應用困難</strong>三大挑戰。</p><p><strong>第一個挑戰是終身學習模型訓練流程較為複雜</strong>，比如對於一個剛入門終身學習的同學來説，可能對終身學習算法流程中的未知任務識別模塊比較感興趣，但是要想完整實現終身學習還需要填補任務定義、任務分配等模塊，而這對於剛入門的同學不太友好，想復現別人的工作還需要去額外完成其他終身學習模塊。</p><p>針對這一挑戰，KubeEdge-Ianvs 中對終身學習全生命週期的各個模塊都進行了設計，包括並不限於任務定義、任務分配、未知任務識別和未知任務處理等多個終身學習核心算法模塊，各個模塊之間是解耦合的，用户可以只研究自己感興趣的模塊，其他模塊採用默認配置即可跑通終身學習實驗。</p><p><strong>第二個挑戰是終身學習算法效果衡量困難</strong>，不同論文中的終身學習算法由於其測試流程不一樣難以比較其工作的優劣。同時大部分論文的工作都是在 MNIST、CIFAR10 這些非真實數據集上進行的實驗，由於缺乏在真實世界數據集上的測試，算法在現實世界中的實際應用效果往往要大打折扣。</p><p>針對這一挑戰，KubeEdge-Ianvs 中對終身學習的測試流程進行了統一，提供 BWT、FWT 等公認的終身學習系統指標，方便衡量算法效果。同時 KubeEdge-Ianvs 開源了 Cloud-Robotics 等真實世界終身學習數據集，並配套了對應的運行樣例，用户可以直接開箱使用該真實世界數據集測試自己提出的算法的效果。</p><p><strong>第三個挑戰是終身學習算法落地較為困難</strong>，算法研發與實際部署之間存在一定鴻溝。用户訓練好的模型需要進一步封裝才能實際在生產環境上使用。</p><p>針對這一挑戰，KubeEdge-Ianvs 在開發時就考慮到了和其姊妹項目 KubeEdge-Sedna 開源服務平台是配套兼容關係，因此在 KubeEdge-Ianvs 上研發的終身學習算法可以直接遷移到 KubeEdge-Sedna 平台上實現落地部署，解決了從研發到落地最後一公里的問題。</p><p>總而言之，Ianvs 終身學習優勢包括：</p><ul><li><p><strong>覆蓋終身學習全生命週期</strong>，包括任務定義、任務分配、未知任務識別和未知任務處理等多個模塊，各個模塊是解耦合的；</p></li><li><p><strong>統一化的測試流程</strong>，系統內置權威的終身學習測試指標，並且支持測試結果的可視化；並提供真實世界數據集用於終身學習測試，能更好測試終身學習算法在真實環境的效果；</p></li><li><p><strong>和</strong><span>&nbsp;</span><strong>KubeEdge-Sedna 終身學習相兼容</strong>，研發算法可以快捷遷移到 Sedna 上實現落地部署。</p></li></ul><span id="OSC_h2_6"></span><h2>2.2 Ianvs 終身學習新特性</h2><p>Ianvs 在去年發佈的 0.1.0 版本中已具備支持單任務學習範式和增量學習範式的算法研發與測試，在新版的 Ianvs 中增加了支持對終身學習範式的相關算法的研發與測試的功能，同時也為終身學習算法測試提供了新的開源數據集。主要新特性如下：</p><span id="OSC_h3_7"></span><h3>特性一：覆蓋終身學習全生命週期</h3><p>Ianvs 終身學習具體架構如下圖所示，主要包括任務定義、任務分配、未知任務識別和未知任務處理等模塊，覆蓋終身學習全生命週期。</p><p>&nbsp;</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/60/6050b9d43e911475220f06f46c31a403.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>對於已處理任務，Ianvs 通過任務定義模塊，將已知任務抽象成若干個模型存儲進雲端知識庫中。在遇到新任務時，Ianvs 首先通過未知任務識別模塊判斷推理樣本屬於未知任務還是已知任務。若是已知任務，則從雲端知識庫中調度對應模型部署在邊側處理該任務，同時基於已知任務樣本對模型進行增量更新。若是未知任務，則 Ianvs 通過未知任務處理模塊處理該任務，利用外部系統標註並重新訓練新的模型用於處理該任務。處理完成後，新的任務模型或是更新後的已知任務模型再重新整合至雲端知識庫中。</p><p>為了方便初學者使用 Ianvs，在 Ianvs 倉庫中的 examples/robot/ 文件夾下提供了一個可以直接運行的樣例 https://github.com/kubeedge/ianvs/examples/robot/ ， 詳細的教程在第三節。</p><span id="OSC_h3_8"></span><h3>特性二：統一化的測試流程和真實世界數據集</h3><p>Ianvs 對終身學習測試流程進行了統一，主要參考了 NIPS2017 的論文 「Gradient Episodic Memory for Continual Learning」，復現了其中提出的 BWT 和 FWT 指標，用於評價終身學習算法的抗遺忘能力和未知任務泛化能力。</p><p>Ianvs 還開源了 Cloud-Robotics 等真實世界數據集，並提供了配套的可以開箱即用的實驗代碼，幫助用户快速上手 Ianvs 終身學習。</p><p>數據集官網鏈接：https://kubeedge-ianvs.github.io/</p><p><img src="https://static001.geekbang.org/infoq/1e/1e8f57b13470035bc9206eb90fe80ec0.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>特性三：支持快捷落地部署</h3><p>如下圖所示，Ianvs 中終身學習算法實現的組件與 Sedna 上終身學習算法實現的組件是相兼容的，因此在 Ianvs 上研發測試的算法可以無障礙遷移部署到 Sedna 上，方便相關從業人員實地部署算法。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/91/913df4ee6292b224808ec6b3e7e3032f.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_10"></span><h1>三、lanvs 終身學習快速教，程</h1><p>在這章中我們通過運行 Ianvs 終身學習的 cloud-robotics 樣例向大家講解 Ianvs 終身學習的基本流程。Ianvs 安裝流程以及終身學習更詳細的介紹可以參考：Ianvs-lifelong-learning-tutorial</p><p>相關鏈接：https://ianvs.readthedocs.io/en/latest/</p><p>1）首先我們需要配置好 Cloud-Robotics 的數據集，先創建數據集的文件夾，注意如果你把數據集放到別的位置，本教程中的部分路徑配置也要一併修改。</p><blockquote><p>mkdir /data</p><p>&nbsp;</p><p>cd /data</p><p>&nbsp;</p><p>mkdir datasets</p><p>&nbsp;</p><p>cd datasets</p></blockquote><p>Cloud-Robotics 數據集可以根據該數據集專屬網站的指示操作獲得，鏈接：https://kubeedge-ianvs.github.io/download.html</p><p>2）下載完成後解壓數據集：unzip cloud-robotics.zip</p><p>3）配置好數據集後，我們可以準備運行示例代碼了。Cloud-Robotics 示例運行的代碼放在 /ianvs/project/ianvs/examples/robot/lifelong_learning_bench/ 下，我們首先要配置 python 路徑（這裏如果 Ianvs 安裝位置不一樣的話需要更改路徑）：</p><blockquote><p>export PYTHONPATH=$PYTHONPATH:/ianvs/project/ianvs/examples/robot/lifelong_learning_bench/testalgorithms/rfnet/RFNet</p></blockquote><p>4）然後我們檢查一下 yaml 文件的信息：</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/4d/4dafcc020a4950e7bd1c6505e75cf829.png" referrerpolicy="no-referrer"></p><p>5）上圖 benchmarkjob.yaml 中 workplace 是存放模型訓練輸出的路徑，可以改成你需要的路徑。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/ae/aebaf7029f5459ef0e0e4458cff0d8b8.png" referrerpolicy="no-referrer"></p><p>6）上圖 testenv-robot.yaml 中 train_url 和 test_url 是數據集索引的路徑，如果你的數據集存放位置和教程不一樣，則需要修改 train_url 和 test_url 的路徑。</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/da/da7c61c3e5bd4110f1bb82f3110c86d8.png" referrerpolicy="no-referrer"></p><p>7）在上圖 rfnet_algorithm.yaml 中可以根據你的需求添加測試的<strong>終身學習算法</strong>，比如任務定義、任務分配等算法。本樣例中提供了一個簡單的示例。</p><p>8）其他的配置文件暫時沒有需要調整的。接下來我們就可以運行示例代碼了：</p><pre>cd /ianvs/project/ianvs
ianvs -f examples/robot/lifelong_learning_bench/benchmarkingjob.yaml</pre><p><img alt="圖片" src="https://static001.geekbang.org/infoq/90/9089fecf78972336f37aaf91c5c30e8a.png" referrerpolicy="no-referrer"></p><p>在模型終身學習任務結束後你可以看到以下內容，包括 BWT、FWT 等終身學習系統衡量指標：</p><p><img alt="圖片" src="https://static001.geekbang.org/infoq/6a/6a86722ddf7ffdf6e21531931fd3c9e6.png" referrerpolicy="no-referrer"></p><p>9）出現以上顯示結果，則成功跑通了一個 Ianvs 終身學習樣例！</p><p>如果讀者對於本次版本發佈的更多細節感興趣，歡迎查閲 Ianvs v0.2 Release Note：https://github.com/kubeedge/ianvs/releases/tag/v0.2.0</p><p>後續 KubeEdge SIG AI 將發佈系列文章，陸續具體介紹終身學習全面升級的特性，歡迎各位讀者繼續關注社區動態。</p><span id="OSC_h3_11"></span><h3>相關鏈接</h3><p><strong>[1]</strong><span>&nbsp;</span>開源項目 GitHub 地址：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubeedge%2Fianvs" rel="nofollow" target="_blank">https://github.com/kubeedge/ianvs</a></u></p><p><strong>[2]<span>&nbsp;</span></strong>數據集官網鏈接：<u>https://kubeedge-ianvs.github.io/</u></p><p><strong>[3]<span>&nbsp;</span></strong>Ianvs 安裝流程以及終身學習更詳細的介紹鏈接：<u>https://ianvs.readthedocs.io/en/latest/</u></p><p><strong>[4]<span>&nbsp;</span></strong>Cloud-Robotics 數據集：<u><strong>https://kubeedge-ianvs.github.io/download.html</strong></u></p><p><strong>[5]<span>&nbsp;</span></strong>Ianvs v0.2 Release Note：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubeedge%2Fianvs%2Freleases%2Ftag%2Fv0.2.0" rel="nofollow" target="_blank">https://github.com/kubeedge/ianvs/releases/tag/v0.2.0</a></u></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 09:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10140642</guid>
            <link>https://my.oschina.net/u/4526289/blog/10140642</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米 HyperOS 內置 32 位 App 轉譯器，性能比原生支持更好]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>小米手機系統軟件部總監張國全介紹了 Xiaomi HyperOS 對第三方應用進行兼容的開發工作。</p><p>據介紹，小米 14&nbsp; 搭載的 CPU 雖然僅支持 64 位架構，但 HyperOS 通過內置 32 位轉譯內核的方式讓用户在新設備上無縫運行 32 位應用。</p><p>相比小米 13 通過 CPU 小核原生運行 32 位應用，<strong>小米 14 憑藉譯碼器可以在大核上運行 32 位應用</strong>，所以即便 CPU 不支持 32 位但依然實現了 32 位應用的兼容支持，而且性能反而更好。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-543d609013f751cb4c431b863bcca7c25bb.png" referrerpolicy="no-referrer"></p><p>此外，小米工程師分析了每年不兼容的三方應用，發現有一大類三方應用修改的內容都比較相似、在應用適配新系統前會出現種閃退和無法使用的問題，因此自研了一套 <strong>CompatEngine 引擎</strong>，可以不依賴三方應用開發者主動做兼容適配第三方應用，經驗證目前超過 90% 未適配應用均可正常使用。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 09:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264814</guid>
            <link>https://www.oschina.net/news/264814</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Chrome 支持運行 Kotlin、Java 等 GC 編程語言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌 Chrome 開發者博客<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fwasmgc%2F" target="_blank">官宣</a></u></strong>：Chrome 已默認啓用 <strong>WebAssembly 垃圾回收 (WasmGC) </strong>功能&nbsp;—— 能夠<strong>將具有 GC 的編程語言編譯為 WebAssembly (Wasm)</strong>。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1103/165225_wBLu_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>下面是示例代碼</p><ul><li><strong>Kotlin Wasm</strong></li></ul><pre><code class="language-java">import kotlinx.browser.document
import kotlinx.dom.appendText
import org.w3c.dom.HTMLDivElement

fun main() {
    (document.getElementById("warning") as HTMLDivElement).style.display = "none"
    document.body?.appendText("Hello, ${greet()}!")
}

fun greet() = "world"</code></pre><p>據介紹，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWebAssembly%2Fgc%2Fblob%2Fmain%2Fproposals%2Fgc%2FOverview.md" target="_blank">WasmGC </a></u>是 WebAssembly 社區羣組發佈的一項提案。當前的 Wasm 最小可行化實現只能處理線性內存中的 number 類型數據，即整數和浮點數。隨着引用類型 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWebAssembly%2Freference-types%2Fblob%2Fmaster%2Fproposals%2Freference-types%2FOverview.md" target="_blank">reference types</a>) 提案的發佈，Wasm 還可以保留外部引用。</p><p>WasmGC 現在添加了結構體和數組堆類型，因此<strong>支持非線性內存分配</strong>。每個 WasmGC 對象都有固定的類型和結構，這使得虛擬機可以輕鬆生成有效的代碼來訪問其字段，而不會像 JavaScript 等動態語言那樣存在去優化的風險。</p><p>因此，<strong>該提案通過結構和數組堆類型為 WebAssembly 增加了對高級託管語言的有效支持</strong>，使得針對 Wasm 的語言編譯器能夠與主機 VM 中的垃圾回收器集成。簡單來説，通過 WasmGC，將編程語言移植到 Wasm 意味着編程語言的垃圾回收器不再需要成為移植的一部分，而是可以<strong>直接使用現有的垃圾回收器</strong>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 09:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264807/wasmgc-chrome</guid>
            <link>https://www.oschina.net/news/264807/wasmgc-chrome</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[查詢平均提速 700%，奇安信基於 Apache Doris 升級日誌安全分析系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong>本文導讀</strong>：數智時代的到來使網絡安全成為了不可忽視的重要領域。奇安信作為一家領先的網絡安全解決方案領軍者，致力於為企業提供先進全面的網絡安全保護，其日誌分析系統在網絡安全中發揮着關鍵作用，通過對運行日誌數據的深入分析，能夠對漏洞和異常行為生成關鍵見解，幫助企業建立有效的防禦策略。本文將深入探討奇安信在網絡安全與日誌分析解決方案的關鍵優勢，瞭解基於 Apache Doris 構建的全新一體化日誌存儲分析平台如何實時監測和分析日誌事件，加強對可疑活動的追蹤與應對，提升系統安全性與快速響應能力。（作者｜奇安信，服務端技術專家，舒鵬）</p><p>奇安信是中國企業級網絡安全市場的領軍者，專注於為政府和企業用户提供新一代網絡安全產品和服務。目前核心產品天擎終端安全系統在國內已有 4000 萬政企用户部署、全國部署服務器超過 100 萬台、服務超 40 萬大型機構。作為網絡安全國家隊，奇安信立志為國家構建安全的網絡空間，在終端安全、雲安全、威脅情報、態勢感知等領域的技術研發持續領先。</p><p>隨着現代企業數字化轉型的不斷深化，大數據、物聯網、5G 等創新技術的廣泛應用加速了企業的數字化轉型步伐，這使得原先的網絡邊界被打破，多源多樣的終端設備成為了新的安全邊界。</p><p>網絡安全系統的防禦性能與日誌分析密不可分，當網絡設備、操作系統以及應用程序在運行時，會產生大量的運行日誌，其中藴涵了豐富的數據價值。最大化地利用運行日誌數據能夠有效檢測內部系統的安全風險、還原攻擊路徑、回溯攻擊入口等，可以進一步提升系統安全性、保障企業網絡安全，因此日誌分析系統在其中發揮着不可或缺的作用。</p><p>本文將介紹奇安信在網絡安全場景中，基於 Apache Doris 進行架構升級迭代並建設全新一體化日誌存儲分析平台的實踐經驗。</p><h1>早期架構痛點與需求</h1><p>安全日誌平台的架構如下圖所示，原始的設備、系統日誌首先經過業務處理環節，包括歸一化和擴充維度等操作。這些處理步驟旨在將來自不同設備和系統日誌轉化為半結構化 JSON 格式的安全日誌，並將其寫入 Kafka 消息隊列中。</p><p>最新的日誌會被寫入實時數倉，安全分析師可以通過分析平台對實時數倉中的最新數據進行交互式查詢，從而進行攻擊研判和追蹤溯源等安全分析工作。另外，離線數倉用於保存歷史數據，以支持長週期數據挖掘的離線分析。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_494_f5c46bcc5d.jpg" alt="WechatIMG494.jpg" referrerpolicy="no-referrer"></p><p>在以上日誌數據平台中，日誌數據的寫入速度與查詢分析效率對上層業務人員進行實時安全事件監控和分析至關重要，這也是當前我們所面對的最主要痛點。</p><p>一方面，每天所生產的安全日誌數據達到千億級，寫入壓力很大。最初我們選擇使用某 Apache Doris 的 Fork 版本來存儲日誌數據，但在實際應用中，隨着每天新增日誌量的不斷增長，入庫速度逐漸降低、集羣寫入壓力過大、高峯期數據積壓嚴重，對集羣穩定性造成很大影響，並且數據壓力較高時、查詢效率也達不到有效果的保證。隨後我們對集羣進行多次擴容，從 3 節點逐步擴容到 13 節點，儘管機器成本已經大幅超過預期、但寫入效率並沒有發生本質的改善。</p><p>另一方面，業務人員在進行安全日誌分析時，經常需要對文本字段（如 URL，payload 等）進行關鍵字匹配。在原系統中只能通過 SQL LIKE 進行全量掃描和暴力匹配，整體查詢性能不佳，千億級數量的數據表查詢耗時接近分鐘級甚至達到數百秒，即便按照時間區間過濾大量數據後、查詢耗時仍在數秒到數十秒。一旦遇到併發查詢性能還會進一步惡化，很難滿足日常安全分析的需求。</p><p>除寫入和查詢效率以外，運維監控也是我們的痛點之一，該廠商提供的可視化運維繫統需要商業 License 授權，對於開源社區用户不友好，集羣維護處於原始手動狀態。</p><h1>架構選型與升級的思考</h1><p>為瞭解決過去版本的痛點、滿足更高效實時的日誌分析訴求，我們亟需對早期系統升級改造。同時面向安全日誌分析場景，我們也對新日誌分析平台的架構提出了更高的要求：</p><ul><li><p><strong>寫入性能</strong>：系統一方面需要支持海量病毒查殺事件等數據實時寫入與存儲，以滿足分析時效性的要求，另一方面需要基於日誌數據 Schema Free 特點支持豐富數據類型的寫入與變更。</p></li><li><p><strong>查詢性能</strong>：由於日誌查詢分析會涉及對文本類型、JSON 數據進行全文檢索、日期或普通數值的範圍查詢，系統需要對字符串提供模糊查詢的能力，還需要支持能夠靈活創建且類型豐富的索引，以加速篩選過濾海量數據，提升查詢效率。</p></li><li><p><strong>存儲成本</strong>：設備每天產生大量的日誌數據，為了挖掘這些有價值的日誌信息，業務人員還需要從數據中進行篩選和分析，並對異常日誌回溯追蹤，這使得日誌存儲的規模很大、存儲週期相對較長，因此高性價比的存儲成本也是系統構建的目標之一。</p></li><li><p><strong>運維成本</strong>：系統自身的運維簡易程度以及是否具備合適的管控工具都能幫助我們進一步提效。</p></li></ul><p>在持續關注業界 OLAP 數據庫的過程中，我們發現 Apache Doris 最近一年的發展非常迅猛，最新的 2.0 版本也把日誌存儲和檢索分析作為新的發力點，推出了倒排索引、NGram BloomFilter 索引等特性，對關鍵詞檢索、LIKE 文本匹配的性能有大幅提升，與我們文本檢索慢的痛點需求非常契合，因此開啓了新架構的升級之旅。</p><h1>架構升級之旅</h1><p>上文中提到，在整體架構選型過程中我們主要關注的地方包括寫入性能、查詢性能、數據存儲成本以及運維成本等方面。在架構升級過程中，我們選擇了 Apache Doris 當時最新發布的 2.0 版本，具體升級收益如下。</p><h3>01 寫入性能提升超 200%</h3><p>為了評估 Apache Doris 寫入的極限性能，我們初期使用與線上系統相同配置的 3 台服務器，從 Kafka 接入線上真實寫入流量，測試期間當 CPU 寫入效率跑滿至 100% 時寫入吞吐達到了 108 萬條/s、1.15 GB/s，寫入數據的可見性延遲保持在秒級。</p><p>而線上運行的原系統集羣規模達 13 台，在同樣的數據寫入情況下，CPU 利用率 30% 左右、寫入吞吐僅 30 萬條/s，並且存在高峯期 CPU Load 高、系統響應慢的問題。</p><p>根據測試結果，我們預估架構<strong>替換為 Apache Doris 後保持同樣 30% 的 CPU 佔用，只需要 3 台服務器即可滿足寫入需求，機器資源成本至少節約 70%</strong>。值得注意的是，在測試中對 Apache Doris 表中一半字段開啓了倒排索引，如果不開啓倒排索引的話，寫入性能在之前基礎上還能夠再提升 50% 左右。</p><h3>02 存儲成本降低近 40%</h3><p>在看到寫入性能的大幅提升後，Apache Doris 存儲空間佔用也給我們帶來了驚喜。<strong>在開啓倒排索引的前提下，存儲空間比原系統不具備倒排索引還要略低，壓縮比從 1 : 4.3 提高至 1 : 5.7。</strong></p><p>通過對比 Apache Doris 在磁盤上存儲的文件大小，同一份數據的索引文件 (.idx) 與數據文件 (.dat) 大小相差無幾。換言而之，增加索引後 Doris 數據膨脹率大約在 1 倍左右，與許多數據庫和檢索引擎 3-5 倍的膨脹率相比，Doris 的數據存儲空間佔用相對較低。經過研究發現，Apache Doris 採用了列式存儲和 ZSTD 壓縮算法來優化存儲空間佔用。Doris 將原始數據和倒排索引都以列的形式存儲，使同一列的數據被存儲在相鄰位置，從而實現了更高的壓縮率。</p><p>ZSTD 是一個優秀的新型壓縮算法，使用了智能優化算法，相較於常見的 GZIP 算法， ZSTD 具有更高的壓縮率和更快的解壓速度，尤其在處理日誌場景時表現非常出色。</p><h3>03 查詢性能平均提升 690%</h3><p>對於業務最關注的查詢性能，我們從線上查詢日誌進行去重後分析出 79 條 SQL，在同一天總數據（1000 億條）、同樣規模的集羣（10 BE 節點）上對比測試 Apache Doris 與原系統的查詢耗時。</p><p><strong>我們發現，與原系統相比，所有的查詢語句均有明顯提升，整體查詢性能提升近 7 倍，有 26 條 SQL 查詢語句性能提升 10 倍以上</strong>，其中 8 條 SQL 查詢提升 10-20 倍、14 條 SQL 查詢提升 20-50 倍、還有 4 條 SQL 查詢提升 50 倍以上。最大差異的一條 SQL 查詢語句為 Q43，在原系統中執行時間接近一分鐘，在 Apache Doris 中僅需不到 1 秒，其性能差異高達到 88 倍。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_495_6ac4f35ed5.jpg" alt="WechatIMG495.jpg" referrerpolicy="no-referrer"></p><p>針對性能提升幅度高的查詢，我們進行了對比分析並發現了其中幾個共同點：</p><p><strong>倒排索引對關鍵詞查找的加速：Q23、Q24、Q30、Q31、Q42、Q43、Q50 等</strong></p><pre><code>1 -- 例如 q43 提升 88.2 倍
2 
3 SELECT count() from table2 
4 WHERE ( event\_time &gt;= 1693065600000 and event\_time &lt; 1693152000000) 
5 &nbsp; AND (rule\_hit\_big MATCH 'xxxx');
</code></pre><p>這種基於倒排索引進行關鍵詞檢索的技術，相較於基本的暴力掃描後進行文本匹配具有顯著的優勢，一方面極大地減少了需要讀取的數據量；另一方面，在查詢過程中無需進行文本匹配操作，因此查詢效率往往提升一個數量級甚至更高。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_496_12be3ae384.jpg" alt="WechatIMG496.jpg" referrerpolicy="no-referrer"></p><p><strong>NGram BloomFilter 索引對 LIKE 的加速：Q75、Q76、Q77、Q78 等</strong></p><pre><code>1 -- 例如 q75 提升 44.4 倍
2 
3 SELECT * FROM table1
4 WHERE  ent_id = 'xxxxx' 
5 &nbsp;  AND event_date = '2023-08-27' 
6 &nbsp;  AND file_level = 70 
7 &nbsp;  AND rule\_group\_id LIKE 'adid:%' 
8 ORDER BY event_time LIMIT 100；
</code></pre><p>對於要查找的非一個完整關鍵詞的場景，LIKE 仍然是有用的查詢方式，Apache Doris 的 NGram BloomFilter 索引能對常規的 LIKE 進行加速。</p><p>NGram BloomFilter 索引與普通 BloomFilter 索引不同，它不是將整個文本放入 BloomFilter ，而是將文本分成連續的子串，每個子串長度為 n ，並將他們放入 NGram BloomFilter 中。對於 <code>cola LIKE '%pattern%'</code> 的查詢，將<code>'pattern'</code>按照同樣的方式分成長度為 n 的子串，判斷每個子串在 BloomFilter 中是否存在，如果有一個子串不存在，則説明 BloomFilter 對應的數據塊中沒有跟<code>'pattern'</code>匹配的數據塊，因此通過跳過數據塊掃描的步驟，達到加速查詢的效果。</p><p><strong>滿足條件的最新 TopN 條日誌明細查詢優化：Q19-Q29 等</strong></p><pre><code>1 -- 例如 q22，提升 50.3 倍
2 
3 SELECT * FROM table1
4 where event\_date = '2023-08-27' and file\_level = 70 
5 &nbsp; and ent\_id = 'nnnnnnn' and file\_name = 'xxx.exe'
6 order by event_time limit 100;
</code></pre><p>這種<code>SELECT * FROM t WHERE xxx ORDER BY xx LIMIT n</code> 的查詢，在查找滿足某種條件的最新 n 條日誌時使用頻率非常高，Apache Doris 針對這種 SQL 查詢模式進行了專門的優化，根據查詢的中間狀態確定排序字段的動態範圍，並利用自動動態謂詞下推的方式，避免讀全部數據進行排序取 TopN，從而減少需要讀取的數據量（有時甚至可以減少一個數量級），進而提升了查詢效率。</p><h3><strong>04 可視化運維管控和可視化查詢 WebUI，最大化減少運維和探索分析成本</strong></h3><p>為了提高日常集羣維護的效率，我們使用了飛輪科技免費開放的可視化集羣管理工具 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.selectdb.com%2Fblog%2F102" target="_blank">Cluster Manager for Apache Doris</a> （以下簡稱 Doris Manager ）。Doris Manager 提供的功能可以滿足日常運維中集羣監控、巡檢、修改配置、擴縮容、升級等操作，降低登陸機器手動操作的麻煩和誤操作風險。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_497_a752c765ea.jpg" alt="WechatIMG497.jpg" referrerpolicy="no-referrer"></p><p>除了管控 Apache Doris 集羣之後，Doris Manager 還集成了類似 Kibana 的可視化日誌探索分析 WebUI，對於習慣 ELK 日誌分析的用户非常友好，支持關鍵詞檢索、趨勢圖展示、趨勢圖拖拽日期範圍、明細日誌平鋪和摺疊展示、字段值過濾等交互方便的探索式分析，跟日誌場景探索下鑽的分析需求很契合。</p><p><img src="https://cdn.selectdb.com/static/Wechat_IMG_498_2e65f945f0.jpg" alt="WechatIMG498.jpg" referrerpolicy="no-referrer"></p><h1><strong>總結與規劃</strong></h1><p>在跟隨 Apache Doris 2.0-alpha，2.0-beta，2.0 正式版本發佈的節奏，我們根據業務場景進行了詳細的評測，也為社區反饋了不少優化建議，得到社區的積極響應和解決。系統經歷試運行一個月之後，我們將 2.0.1 版本正式用於生產環境，替換了原系統集羣，完成架構升級改造，實現了寫入性能、查詢性能、存儲成本、運維成本等多方面收益：</p><ul><li><p><strong>寫入性能提升 3 倍以上</strong>：目前，奇安信的日誌分析平台每日平均有數千億的新增安全日誌數據，通過 Doris 的 Routine Load 能夠將數據實時穩定寫入庫，保障數據低延遲高吞吐寫入。</p></li><li><p><strong>查詢性能平均提升 7 倍</strong>：查詢響應時間大幅減少，與之前的查詢效率相比達到平均 7 倍提升，其中業務特別關注的全文檢索速度達到 20 倍以上的提升，助力日誌分析與網絡安全運營效率。</p></li><li><p><strong>高效便捷的可視化管理</strong>：Cluster Manager for Apache Doris 工具提供了可視化集羣監控告警平台，滿足日常集羣監控等一系列操作，同時 WebUI 多種功能為分析人員提供了操作簡單、使用便捷的交互式分析。總而言之，Doris 的易用性、靈活性大幅降低了開發、運維、分析人員的學習與使用成本。</p></li></ul><p>後續我們還將在日誌分析場景下探索更多 Apache Doris 的能力。我們將擴大 JSON 數據類型的相關應用，加強系統對於半結構化數據深度分析的能力。同時，我們也<strong>非常期待 Apache Doris 2.1 版本中新增的 Variant 可變數據類型，支持存儲任意結構的 JSON 數據，支持字段個數與類型的變化，讓業務人員靈活定義特殊字符，以更好地實現半結構數據 Schema Free 的分析需求</strong>。</p><p>非常感謝 SelectDB 團隊一直以來對我們的技術支持，助力奇安信走向「體系化防禦、數字化運營」的網絡日誌安全管理，幫助客户準確識別、保護和監管網絡設備與各類系統，確保業務人員在任何時候都能夠安全、可信、穩定地訪問數據與業務。</p><p>最後，我們也將持續參與到 Apache Doris 社區建設中，將相關成果貢獻回饋社區，希望 Apache Doris 飛速發展，越來越好！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 02 Nov 2023 08:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5735652/blog/10140250</guid>
            <link>https://my.oschina.net/u/5735652/blog/10140250</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
