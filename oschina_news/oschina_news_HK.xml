<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 21 Nov 2023 09:25:03 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[微軟開源 Terminal Chat]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微軟<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fterminal-chat-in-windows-terminal-canary%2F" target="_blank">宣佈</a>開源其 AI 聊天功能 Terminal Chat 的工作，邀請開發人員嘗試體驗並參與構建。「Windows Terminal 團隊致力於提高透明度，我們希望讓開源社區有機會幫助我們定義 terminal 應用程序中的人工智能。」</p><p><span style="color:#000000">Terminal Chat 是 Windows Terminal Canary 中的一項功能，允許用户保持在 terminal 上下文中的同時，與 AI 服務聊天以獲得智能建議（例如查找命令或解釋錯誤消息）。</span></p><p><img alt="" height="323" src="https://oscimg.oschina.net/oscnet/up-7d85ccd13aaf667d1c3ebcd092187c83cf8.png" width="500" referrerpolicy="no-referrer"></p><p>值得注意的是，Windows Terminal Canary 不提供默認模型或內置 AI 模型。因此要使用 Terminal Chat，用户必須手動在 Windows Terminal Canary 的 Terminal Chat 設置中添加 AI 服務端點和密鑰。</p><p>目前，Terminal Chat 僅支持 Azure OpenAI 服務。要獲取必要的 Azure OpenAI 服務端點和密鑰，用户需要創建和部署 Azure OpenAI 服務資源。</p><p><img alt="" height="337" src="https://oscimg.oschina.net/oscnet/up-3418831b63a1cef6ad618521d5e8e233d0f.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="319" src="https://oscimg.oschina.net/oscnet/up-2698239a8126cd25a2f1bab83a5f1c0f605.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Windows Terminal Canary 僅在用户發送消息時與 AI 服務進行通信，聊天記錄和用户活動 shell 的名稱也會附加到發送給 AI 服務的信息中。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>Terminal Chat&nbsp;<span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>結束後，Windows Terminal Canary 不會保存聊天曆史記錄。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">微軟方面表示，他們知道「AI in a terminal」聽起來令人生畏，因此他們將致力於提高透明度並積極聽取用户反饋。「我們堅信，開源社區的加入將幫助我們確定人工智能路線圖，並幫助我們確定可用於核心產品 Windows Terminal 的最基本的 AI 功能集。」</span></span></p><p style="text-align:left"><span style="color:#000000">Terminal Chat&nbsp;<span style="background-color:#ffffff">功能目前僅在 Windows Terminal Canary 中提供，不會包含在 WindowsTerminal 預覽版或 Windows Terminal 穩定版的構建中。</span></span></p><p style="text-align:left"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fterminal%23installing-windows-terminal-canary" target="_blank"><span style="color:#2980b9"><span style="background-color:#ffffff">下載地址</span></span></a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 09:04:56 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267428/terminal-chat-in-windows-terminal-canary</guid>
            <link>https://www.oschina.net/news/267428/terminal-chat-in-windows-terminal-canary</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[假如你是開源項目維護者，遇到這種回覆能忍到哪步？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>背景：</p><p>Vant 是一個輕量、可定製的移動端組件庫，由有贊團隊開源。近日，一名開發者在 Vant 的 GitHub 倉庫提交了一個 issue：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyouzan%2Fvant%2Fissues%2F12453" target="_blank">https://github.com/youzan/vant/issues/12453</a></u></em>。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d12cf1220dd6a3686fc370d6999fa3ad16f.png" referrerpolicy="no-referrer"></p><hr><p>直奔主題，請閲讀這名開發者與維護者的問答互動：</p><p>Vant 維護者對該 issue 先是進行了如下回復：</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-9b703d704225830325c310edc6473fdd774.png" referrerpolicy="no-referrer"></p></blockquote><p>提問者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-e6c785757085efeac52ec4017730e405587.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-6b53e369e0f7047d703165ef2353d69ef98.png" referrerpolicy="no-referrer"></p><p>提問者（詢問項目維護者這到底是不是 bug）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-9a454d0c5ff658f495c0a716bfa806fea64.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img height="296" src="https://oscimg.oschina.net/oscnet/up-2d3f37ca3537caa4910f618b2ac40813283.png" width="1684" referrerpolicy="no-referrer"></p><p>提問者（沒得到自己想要的答案，開始陰陽怪氣）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-7548ef7e9f27dbe02d902b21a805d3c2b83.png" referrerpolicy="no-referrer"></p><p>項目維護者（準備到此為止）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-cfa1f12f75fcdcc6f4445236b19400921df.png" referrerpolicy="no-referrer"></p><p>提問者繼續追問：</p><p><img src="https://oscimg.oschina.net/oscnet/up-2ac7c06681f933d411c766346ba126c3860.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-717a1ca2200a63fe14ace932a3754887966.png" referrerpolicy="no-referrer"></p><p>提問者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-30cdb4ece4857089a0c6033e18b4d439231.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-945eaa18e070e9c15264da20b49d0cd9978.png" referrerpolicy="no-referrer"></p><p>最後一個來回：</p><p><img src="https://oscimg.oschina.net/oscnet/up-7617f52c138888233e08e5aedb53a49a012.png" referrerpolicy="no-referrer"></p><p>然後，這名提問者去社區發帖分享了「一次 github 跟開源大佬的抬槓經歷」。</p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv2ex.com%2Ft%2F993100" target="_blank">https://v2ex.com/t/993100</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 07:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267411</guid>
            <link>https://www.oschina.net/news/267411</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LineageOS 全球安裝量達 150 萬台]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LineageOS 團隊日前在知名數碼 UP 主 MKBHD 播客中回顧了 LineageOS 的歷史，<strong>並介紹稱目前全球有 150 萬台 Android 設備採用 LineageOS</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-45aadd76321a77a1392775596a7127e39cd.png" referrerpolicy="no-referrer"></p><p>LineageOS 是一個面向智能手機和平板電腦的自由、免費、開源的 Android 系統分支。它是深受歡迎的定製 ROM CyanogenMod 的繼任者，在 2016 年首次推出，至今仍在積極更新。</p><p>LineageOS 可在不同 Android 品牌的各種不同設備上使用，包括谷歌、HMD Global、三星、索尼、一加、小米等，這款&nbsp;ROM&nbsp;也讓一些久遠的品牌繼續前行，例如早期的 Essential Phone、LG 等。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 07:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267410</guid>
            <link>https://www.oschina.net/news/267410</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[基於 Triple 實現 Web 移動端後端全面打通]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><h1 style="line-height: 1.75em;margin-bottom: 8px;" data-mpa-powered-by="yiban.io"><img class="rich_pages wxw-img" data-backh="81" data-backw="578" data-ratio="0.14106583072100312" src="https://oscimg.oschina.net/oscnet/c03fcfd2-fd29-4f40-8a8b-fbc8acf7f63e.gif" data-w="638" style="outline: 0px;display: initial;visibility: visible !important;width: 677px !important;" referrerpolicy="no-referrer"></h1><section style="margin-bottom: 40px;"><span style="color: rgb(136, 136, 136);"><em><span style="color: rgb(136, 136, 136);font-size: 14px;">作者：陳有為，陌陌研發工程師、Apache Dubbo PMC</span></em></span></section><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">01</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">RPC 協議開發微服務</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Aliware</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/11f88a4a-39b5-4f5e-9496-4101a228839b.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">在我們正常開發微服務的時候，傳統 RPC 服務可能在最底層。上層可能是瀏覽器、移動端、外界的服務器、自己的測試、curl 等等。我們可能會通過 Tomcat 這種外部服務器去組裝我們的 RPC 層，也就是 BFF。或者我們沒有 BFF，我們的 RPC 就是對外提供服務。但因為瀏覽器要訪問，所以我們需要有一個網關，比如説 APISIX 或者 ShenYu 等 HTTP 網關。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/79eae4dd-4c7e-45d4-b382-3b7e0fbd8e7a.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">上圖展示的是我們的流程，但是存在一些問題。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">如果我們的服務是非常輕的，我們只需要一個轉發層，無論是配網關還是起一個 webserver 去轉發，怎麼做都很麻煩。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">此外，RPC 服務大部分都是基於二進制的，而二進制正常在本地是沒法測試的。因此我們的公司內都可能就會開發一種後台或者中間的 Proxy 代理讓我們去測試。但這個的前提是你至少得把它部署到測試環境，所以還是沒法在本地測試。</span><o:p></o:p></section><p style="line-height: 1.75em;margin-bottom: 40px;"><span style="font-size: 15px;">總體來説，這兩個問題會導致易用性比較低，且開發成本相對較高，因為要做一些與業務無關的重複勞動。</span></p><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">02</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">全新升級的 Triple 協議</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Apache Dubbo</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;"></span><o:p></o:p></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/601481f3-b469-46d3-a9e5-6bd230a68166.png" data-type="png" data-w="832" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">基於上邊的兩個問題，我們來介紹一下 Triple 協議。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">先來説一下上一代協議，它產出的原因是什麼。我們應該都知道 Dubbo 原來是 Dubbo 協議，它是基於 tcp 的，它只有一個包。因為它的包的設計，導致了網關無法做一些特殊規則判斷、過濾等操作。但也不是絕對的，如果你願意犧牲性能把包完全解出來，組裝回去再透傳還是可以做到的，但一般大家都不太能接受。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">所以我們就在想能不能把原數據和真正的包分開。現在我們有現成的 HTTP，又有一個業界主流的 gRPC，所以我們的目標就是兼容 gRPC。因為 gRPC 目前都是用 IDL，而 IDL 有一個問題，尤其在 Java 側。因為大家都是寫一些接口，定義一些包去實現，這樣就會非常麻煩。Go 側就還好，因為大家已經習慣了這種開發模式。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">所以我們開發了 Triple 協議，<strong>首先它兼容了 gRPC，</strong>所以我們能實現和 gRPC 的完全互通。<strong>其次，我們兼容了自己定義接口的方法。</strong>雖然會損失一定的性能，但提升了一些易用性。而且 RPC 一般不是業務的瓶頸，大多數瓶頸還是在 DB。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">但還有個問題，雖然我們兼容了 gRPC，但 gRPC 是基於 TPC 的，所以如果前端或者其他第三方系統只有 HTTP，它還是接受不了我們的系統。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/979f4ac2-7a4e-423f-9b1b-b4073e2170ac.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;text-align: left;margin-bottom: 24px;"><span style="font-size: 15px;">基於此，我們想推出一個全新的 Triple 協議。為瞭解決上述的所有問題，我們參考了 gRPC、gRPC Web、通用 HTTP 等多種協議，做到瀏覽器訪問，支持&nbsp; Streaming，還支持同時運行在 HTTP/1、HTTP/2 協議上。因為目前 HTTP/3 還沒有大規模推廣，未來也會支持 HTTP/3。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><strong><span style="font-size: 15px;">最終的設計實現是完全基於 HTTP 的，且對人類、開發調試友好。</span></strong><span style="font-size: 15px;">我們可以通過簡單的瀏覽器訪問或者 curl 訪問，尤其是對 unary RPC。此外，我們和 gRPC 是完全互通的，用 HTTP 的業務不用擔心兼容性的問題，也不用擔心籤協議的問題。為了穩定性，我們只會採用業界流行的網絡庫，比如 Java 的 native、Go 的基礎的 net 包。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/2096d161-0996-43b9-a7ae-13dc12461acf.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;text-align: left;margin-bottom: 24px;"><span style="font-size: 15px;">雖然 Triple 協議和 gRPC 協議都基於 HTTP，但 gRPC 是基於 HTTP/2 的，而 Triple 是基於 HTTP/1 和 HTTP/2 的。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">我們在兼容 gRPC 的同時，我們為了易用性也擴展了一些功能。比如請求裏我們支持 Application/Json 的請求格式，支持使用 curl 訪問；</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">此外上一版的協議，為了支持傳統定義接口的方式，我們有一個二次序列化的過程。我們想在這裏通過一個特殊的 content type 來決定我們的 body 的結構，解決二次序列化的問題。同時這個東西是可以擴展的，理論上 HTTP 的所有功能我們在 Triple 協議上都可以實現，也可以拓展。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/df1f6c58-13f2-46f7-be3b-a518882ec9b4.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">用了 Triple 協議之後，我們的開發流程也發生了改變。如果你不需要進行組裝，或者沒有外層的代理，可能你的接入流程就是從外部的請求瀏覽器、對方的服務器、curl、自己測試等直接到了 server。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">和其他的 gRPC 的通信也是沒有問題的，流程就相當於少了一層。對於大多數用户，如果你不需要這個場景，其實是有很大的好處。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/fbad75ed-0049-4471-83cb-525e33e0e7d0.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;text-align: left;margin-bottom: 24px;"><span style="font-size: 15px;">Triple 協議因為最開始兼容 gRPC，那個時候只基於 HTTP/2，HTTP/2 有 Streaming 的能力，所以它天然支持 Streaming。但這裏比較特殊的是，我們新版的協議在 HTTP/1 也支持了 Stream，但因為 HTTP/1 的限制只能支持到 Server Streaming。依賴 HTTP/1 的 Server Push 實現。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3fc79407-e890-4793-a290-6b9f3bc67dd8.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><p style="line-height: 1.75em;margin-bottom: 40px;"><span style="font-size: 15px;">Client Stream 和 Bi Stream 就沒什麼可説的了。但有一個特別的是，在 Java 側沒有 Bi Stream，從編碼上就沒有，但從實現上是有的。</span><o:p></o:p></p><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">03</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">Triple 協議開發微服務</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Apache Dubbo</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e6931bb8-79f4-4cee-91b6-d5d690516fc9.png" data-type="png" data-w="832" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></section><section style="line-height: 1.75em;margin-bottom: 24px;"><strong><span style="font-size: 15px;">目前 Triple 協議比較靈活的支持兩種定義方式，分別是 IDL 定義和直接定義。</span></strong><span style="font-size: 15px;">直接定義支持同步、異步、手寫。還有比較極端一點的，比如在自己定義接口的時候使用 IDL 生成 protobuf 的類，我們不定義它的 service，只用它的生成的 request 和&nbsp; response 類也是沒問題的，Triple 協議會自動識別接口使用 protobuf 還是不使用 protobuf 進行傳輸。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/5ff5bab2-f311-4755-830d-b20806c7cf14.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Server 就是把它的務實現一下。上圖是一個例子，我就直接拿了 API 的組裝方式，真正的業務上可能是註解或者 XML 的方式。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/ce5be064-8661-47b0-a30b-78efa617ab67.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">因為我們支持了 HTTP 這個標準的協議，理論上我們的測試就會變得很簡單。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">因為我們支持 gRPC，所以我們可以用 gRPC curl 去調用我們的服務。但前提是你得有反射服務，然後手動開啓一下，它不是默認開啓的。然後它就可以通過反射拿到接口的源數據，通過 Json 轉成 protobuf 格式發過去。或者我們直接用 Application/Json 的方式直接調過去。這裏有一點比較特別的是在 HTTP/1 下我們也可以用 Sreaming。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">另外，因為我們支持 HTTP，理論上所有第三方的 HTTP 客户端都是可以調用的。然後使用 Dubbo 的 Admin 也可以進行測試，前提是你得把它註冊上。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/59b1ddfb-d5b9-492f-b5be-19d98ac1becb.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">調用端不管是 POJO 還是 IDL，它們都沒有本質的區別。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7915eb90-8133-4eac-a8a9-d6ed2e3e85c5.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><p style="line-height: 1.75em;margin-bottom: 40px;"><span style="font-size: 15px;">現在我們有了 Triple 協議，但如果這個協議沒有承載方也是行不通的。<strong>因此我們還得有一個框架，有一些服務治理才是我們的微服務。</strong>所以服務治理也是微服務中不可或缺的一部分。</span><o:p></o:p></p><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">04</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">Dubbo 為 Triple 協議帶來治理能力</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Apache Dubbo</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/31ad4bc8-c9e8-44c6-be77-ee023944fbba.png" data-type="png" data-w="832" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Triple 的定位只是 Dubbo 裏的其中一個協議，當然你也可以為了兼容性，用原來的 Dubbo 協議或者其他的協議。而且我們支持在同一個端口上開啓多個協議，可以按需選擇。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/72e291fc-3bce-4ba4-9b31-bd339eca8655.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">同時 Dubbo 為 Triple 提供了多語言的實現。目前會在 Rust、Go、Java、JS、node、Python 這幾部分實現官方的實現。這樣用户就不用自己根據實驗協議的 spec 去實現了。如果你有一些定製需求，比如內部的一些框架，你根據 spec 實現也是可以的。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/f151c36d-888d-4ca4-b78d-c84b36bae333.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Dubbo 和服務框架集成的很好，理論上在開發流程中，尤其是在 Java 側服務定義、服務治理、服務註冊發現等都不用客户來操心，<strong>是開箱即用的。</strong></span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e615a1a8-d7bb-4f79-b638-1d3b1fc109d6.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Dubbo 提供了豐富的生態，第三方的生態包括 Nacos、Zookeeper 等等，我們不用創新，直接引入相應的包即可。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/08125323-87f5-4957-bf1f-d44ba434892c.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">這是我們使用 Triple 協議服務註冊的例子。上面你可以選 Nacos、Zookeeper、K8s，左邊是一個 Client 和一個 Server，這麼調用。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/67f6ea46-946c-46a0-a6e4-64776c71c3a6.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">我們在 admin 上看一下實現。這裏提一句，我們的 admin 也在新版重構，是用 Go 實現的，大家可以期待一下。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8bbb56ce-98c2-42b0-91d9-54c1b7a18255.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 0px;"><span style="font-size: 15px;">我們經常會遇到灰度發佈或者流量染色的需求。我們可以從 admin 上發一個 tag 治理規則下去，然後把一些實例打上 tag，然後這個攜帶 tag 的流量就從入口就會挨個傳遞下去，從而實現全鏈路的流量染色。</span><o:p></o:p></section><p style="display: none;margin-bottom: 24px;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - Apache Dubbo（ApacheDubbo）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 04:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6214966/blog/10116068</guid>
            <link>https://my.oschina.net/u/6214966/blog/10116068</link>
            <author>
                <![CDATA[ApacheDubbo]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟 CEO：Sam Altman 可能會重返 OpenAI]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Sam Altman 在被 OpenAI 公司解僱後宣佈轉投微軟，但這一決定並非板上釘釘。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2F2023%2F11%2F20%2F23969586%2Fsam-altman-plotting-return-open-ai-microsoft" target="_blank">The Verge</a> 援引多位知情人士消息稱，如果解僱 Altman 的其餘董事會成員下台，他和聯合創始人 Greg Brockman 仍願意重返 OpenAI。</span></p><p><span style="color:#000000">與此同時，微軟首席執行官 Satya Nadella 在接受</span><span style="color:#333333"></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Falexeheath%2Fstatus%2F1726741601278681400" target="_blank">CNBC</a><span style="color:#333333"><span>&nbsp;</span>和<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Ftechnology%2Fstatus%2F1726751929475150226" target="_blank">Bloomberg TV</a><span style="color:#333333"><span>&nbsp;</span></span><span style="color:#000000">採訪時也明確表示，</span>Altman 可能會以某種身份重返 OpenAI。</p><p>他在被問及&nbsp;<span style="color:#000000">Altman 以及 700 名 OpenAI 員工是否會加入微軟時回答道，「這取決於 OpenAI 董事會、管理層和員工的選擇」。並表示，無論他們是去是留，他都對這兩種選擇持開放態度。「顯然，如果 Sam 和 Greg 不打算留在 OpenAI，我們希望他們有一個美好的歸宿。」</span></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-dc4fe464c1a2cd2a935cf44d7d8bd62f0c8.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">關於「明天誰會是 OpenAI 的 CEO」的直白提問，Nadella 也依舊是同樣的回答："我會把這個問題留給 OpenAI 和它的董事會"。</span></p><p><span style="color:#000000">此外，當被問及微軟是否需要在 OpenAI 董事會中佔有一席之地時，他則表示，OpenAI 的治理方面必須做出一些改革，微軟方面將就此與其董事會進行對話，並隨着事態的發展而逐步推進解決這個問題。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">目前，被認為是此次 「政變」 組織者的 OpenAI 首席科學家 Ilya Sutskever 已經改變了主意，簽署聯名信要求 </span>Altman 迴歸。因此，<span style="background-color:#ffffff">OpenAI 剩下的三名董事會成員中只需要有兩人反轉就能讓 Altman 迴歸。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267384/microsoft-ceo-sam-altman-plotting-return-open-ai</guid>
            <link>https://www.oschina.net/news/267384/microsoft-ceo-sam-altman-plotting-return-open-ai</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TypeScript 5.3 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>TypeScript 5.3 已正式發佈。</p><p><strong>主要變化</strong></p><ul><li><p>支持&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-import-attributes">import attributes</a>&nbsp;提案的最近更新</p></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23stable-support-resolution-mode-in-import-types" target="_blank">在 Import Types</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23stable-support-resolution-mode-in-import-types" target="_blank">中提供對<code>resolution-mode</code>的穩定支持</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23resolution-mode-supported-in-all-module-modes" target="_blank">為所有 Module Modes</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23resolution-mode-supported-in-all-module-modes" target="_blank">提供</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23resolution-mode-supported-in-all-module-modes" target="_blank"><code>resolution-mode</code>支持</a></li><li><p><code>switch (true)</code>Narrowing</p></li><li><p>Narrowing On Comparisons to Booleans</p></li><li><p>檢查對實例字段的<code>super</code>屬性訪問</p></li><li><p>針對類型的交互式嵌套提示 (Interactive Inlay Hints)</p></li><li><p>跳過 JSDoc 解析以進行優化</p></li><li><p>合併<code>tsserverlibrary.js</code>和<code>typescript.js</code></p></li></ul><hr><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-import-attributes">import attributes</a></strong></p><p>import attributes 的一個用例是向運行時提供有關模塊預期格式的信息。</p><pre><code class="language-javascript">// We only want this to be interpreted as JSON,
// not a runnable/malicious JavaScript file with a `.json` extension.
import obj from "./something.json" with { type: "json" };
</code></pre><p>TypeScript 不會檢查這些屬性的內容，因為它們是特定於主機的，因此不會對它們進行檢查，只是讓瀏覽器和運行時處理它們（可能會出錯）。</p><pre><code class="language-javascript">// TypeScript is fine with this.
// But your browser? Probably not.
import * as foo from "./foo.js" with { type: "fluffy bunny" };
</code></pre><p>動態 import () 調用也可以通過第二個參數使用 import 屬性。</p><pre><code class="language-javascript">const obj = await import("./something.json", {
    with: { type: "json" }
});
</code></pre><p>第二個參數的預期類型由一個名為<code>ImportCallOptions</code>的類型定義，默認情況下，該類型只期望調用一個屬性<code>with</code>。</p><p>請注意，導入屬性是從早期的 "導入斷言"（import assertions）提案演變而來的，該提案已在 TypeScript 4.5 中實現。最明顯的區別是使用了<code>with</code>關鍵字而非<code>assert</code>關鍵字。但不太明顯的區別是，運行時現在可以自由使用屬性來指導導入路徑的解析和解釋，而導入斷言只能在加載模塊後斷言某些特性。</p><p>隨着時間的推移，TypeScript 將淘汰舊的導入斷言語法，轉而使用建議的導入屬性語法。使用 assert 的現有代碼應遷移到 with 關鍵字。需要導入屬性的新代碼應只使用<code>with</code>關鍵字。</p><p><strong><code>switch (true)</code>Narrowing</strong></p><p>TypeScript 5.3 可以根據<code>switch (true)</code>中每個<code>case</code>子句的條件執行 narrowing。</p><pre><code class="language-javascript">function f(x: unknown) {
    switch (true) {
        case typeof x === "string":
            // 'x' is a 'string' here
            console.log(x.toUpperCase());
            // falls through...

        case Array.isArray(x):
            // 'x' is a 'string | any[]' here.
            console.log(x.length);
            // falls through...

        default:
          // 'x' is 'unknown' here.
          // ...
    }
}
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F" target="_blank">詳情查看發佈公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267382/typescript-5-3-ga</guid>
            <link>https://www.oschina.net/news/267382/typescript-5-3-ga</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國操作系統調研]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" height="566" src="https://static.oschina.net/uploads/space/2023/1121/112104_Mhtw_3820517.jpg" width="400" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.qq.com%2Fsheet%2FDQ2hmWHpJdk1WYUl3%3Ftab%3DBB08J2" target="_blank">https://docs.qq.com/sheet/DQ2hmWHpJdk1WYUl3?tab=BB08J2</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267381</guid>
            <link>https://www.oschina.net/news/267381</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米 2023Q3 財報：總收入 709 億，研發支出 50 億]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">小米 2023 Q3 財報現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FopJuLdveNeZPOCiYcNAHkw" target="_blank">公佈</a>：總收入 709 億元，本季重回正增長。經調整淨利潤 60 億元，同比增 182.9%。智能電動汽車等創新業務投入 17 億元。小米持續大規模投入底層核心技術，Q3 研發支出 50 億元，同比增長 22.0%，研發人員佔比已超過 53%。</span></p><p><span style="color:#000000">雷軍表示：「作為一家科技公司，小米始終將'技術為本'列為鐵律，我們下定決心大規模研發底層核心技術，堅定不移投入其中。我們有充足的現金儲備來支持持續創新，本季度末，小米現金總儲備達人民幣 1276 億元，又一次創下新高。」</span></p><p><span style="color:#000000">公告指出，本季度小米研發支出人民幣 50 億元，同比增長 22.0%。該公司還計劃五年之內（2022-2026）將投入研發 1000 億元人民幣。人才梯隊方面，截至第三季度末，小米的工程師人數佔比已經超過了 53%。小米的新十年目標（2020-2030）為：大規模投入底層核心技術，致力成為全球新一代硬核科技引領者。</span></p><p><span style="color:#000000">小米智能手機業務在本季度重回增長，全球市佔率達 14.1%，連續 3 個季度環比提升。全球智能手機出貨量為 4180 萬台，同比增長 4.0%，環比增長 27.0%。IoT 業務實現了收入和毛利率的同步增長。Q3 IoT 與生活消費產品收入達到人民幣 207 億元，同比增長 8.5%，毛利率則創下歷史新高，達到 17.8%，同比提升 4.3 個百分點。</span></p><p><span style="color:#000000">互聯網業務總收入達人民幣 78 億元，創歷史新高，毛利率為 74.4%，同比提升 2.3 個百分點。廣告收入創下歷史新高，達人民幣 54 億元；遊戲業務連續 9 個季度實現收入同比增長，達人民幣 11 億元。境外互聯網業務本季度收入達到人民幣 23 億元，同比增長 35.8%，佔整體互聯網收入的比例為 30.0%，同比提升 5.8 個百分點。</span></p><p><span style="color:#000000">本季度，小米全球 MIUI 月活用户達 6.23 億，同比增長 10.5%；中國大陸 MIUI 月活用户達 1.52 億，同比增長 7.4%。</span></p><p><span style="color:#000000"><img alt="" height="400" src="https://oscimg.oschina.net/oscnet/up-84bfe07342c57c14fda453f243618d607d5.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="400" src="https://oscimg.oschina.net/oscnet/up-24b5b3d9caa05b951e0825aed1626215466.png" width="300" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267376</guid>
            <link>https://www.oschina.net/news/267376</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[發動 OpenAI 「政變」幕後黑手浮出水面：Quora 聯合創始人 Adam]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>據報道，隨着局勢日漸明朗，此次宮斗大劇的幕後黑手指向了 OpenAI 董事會成員、問答網站 Quora 聯合創始人亞當·德安格洛（Adam D'Angelo），是他煽動並拉攏了公司首席科學家伊爾亞·蘇茨克維（Ilya Sutskever）一起驅逐山姆·奧爾特曼（Sam Altman）。</p><p><strong>OpenAI 董事會背景</strong></p><p><img src="https://static.oschina.net/uploads/space/2023/1121/111403_8DJZ_2720166.png" referrerpolicy="no-referrer"></p><p>有人指出，德安格洛不滿原因奧爾特曼的原因與 11 月初 OpenAI 開發者大會宣佈的 GPTs 有關，德安格洛認為自己創辦的 AI 機器人產品 Poe 將會被 GPTs 所淘汰，<strong>他對身為董事會成員卻沒有提前得知 GPTs 的存在而感到不滿</strong>，覺得奧爾特曼不該對自己保密。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d6576cd6d0b5a4521931becb8dedd5bf47b.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fwilliamlegate%2Fstatus%2F1726715671487156554" target="_blank">https://twitter.com/williamlegate/status/1726715671487156554</a></u></em></p></blockquote><p>據説德安格洛現在正忙着和律師商量應對方案。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ebba8bbe70d3d6091986c34281eacfde3b8.png" referrerpolicy="no-referrer"></p><p>公開資料顯示，德安格洛出生於 1984 年，他被《財富》雜誌譽為「科技界最聰明的人之一」，大學去了被譽為"天才"搖籃的加州理工，畢業後成為 Facebook 的第一任 CTO，後創辦全球領先問答網站 Quora。他 2016 年上了《福布斯》雜誌 40 歲以下最富有企業家排行榜。</p><p>此外，在納德拉宣佈 OpenAI 創始人奧爾特曼和格雷格・布羅克曼將<u><a href="https://www.oschina.net/news/267272">加入</a></u>微軟領導新的 AI 研究團隊後，微軟股價盤前大漲 57%。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267375</guid>
            <link>https://www.oschina.net/news/267375</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟週二補丁日 (Patch Tuesday) 實施 20 週年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微軟安全響應中心上週慶祝了週二補丁日 (Patch Tuesday) <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmsrc.microsoft.com%2Fblog%2F2023%2F11%2Freflecting-on-20-years-of-patch-tuesday%2F" target="_blank">實施二十週年</a></u>。</p><p>週二補丁日也稱補丁星期二、星期二更新 (Update Tuesday) 等，它是一個在行業內被廣泛使用的非正式術語，指微軟定期在每個月的第二個星期二發佈其軟件產品的更新補丁，經由 Windows Update 推送給用户。具體時間為 UTC 18:00（或 17:00 開始）。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-584f40b5209168b60a127974dbb6c03dc59.png" referrerpolicy="no-referrer"></p><p>微軟有一種習慣，會在偶數月份發佈更多的更新，相應奇數月份的更新會更少。少數更新也會在週二補丁日之外被髮布。某些更新，例如 Microsoft Defender 的病毒庫更新則會每天發佈。有時候，在一次常規的週二補丁日之後會有一次額外的週二補丁日。另外一些更新則可能隨時會被髮布。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a84502b16cff68810870adb778d2491d613.png" referrerpolicy="no-referrer"></p><p>微軟於 2003 年 10 月正式開始了此模式。在統一採用週二補丁日前，安全補丁的發佈是零零散散的，這種零散的模式給 IT 工作者和組織部署重要補丁帶來了挑戰。微軟率先提出的可預測的補丁發佈時間表改變了這一狀況。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267373/20-years-of-patch-tuesday</guid>
            <link>https://www.oschina.net/news/267373/20-years-of-patch-tuesday</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Zadig 推出環境睡眠，平均節省一半測試資源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" height="386" src="https://oscimg.oschina.net/oscnet/up-27ced375dc5b1beb469bf36b2afaa8b1994.png" width="902" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491064%26idx%3D1%26sn%3D4bbe7bfe944feaa8b44a08e6156e04e2%26chksm%3Dcfb45158f8c3d84e40d44d2dd9228a844b9bcdeea1fe32a7b0ae41b9af982c11319a38f6675e%26token%3D481744823%26lang%3Dzh_CN%23rd" target="_blank">閲讀原文</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" target="_blank">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig">Zadig 在 Gitee</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><strong>推薦閲讀：</strong><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" target="_blank">是時候和 Jenkins 説再見了</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" target="_blank">Zadig vs. Jenkins 詳細比對：時代的選擇與開發者之選</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247489682%26idx%3D1%26sn%3Df4ac5ceb38547542061477a45d8dc86d%26chksm%3Dcfb45432f8c3dd24b727e0fb6db276b2d63b2751933e63a25b00b9d9fac2dd68efbd2cbd3863%26scene%3D21%23wechat_redirect" target="_blank">平台工程和 AI 時代的新 10 億開發者</a></p><p style="margin-left:0; margin-right:0">Zadig 起源於環境管理工具，逐漸演變成了全面的雲原生 CI/CD 平台，最終成為了綜合性的 DevOps 解決方案。社區小夥伴一致讚譽它為「中小型企業的得力助手，大型企業的利器」，它有眾多獨特優勢：</p><p style="margin-left:0; margin-right:0"><span><strong>· 現有服務接入<span style="color:#ff2968">姿勢多</span>：</strong></span>無論你的服務定義是 K8s YAML、Helm Chart 還是傳統的主機服務，Zadig 都提供了一鍵接入，實現高效統一的環境治理。</p><p style="margin-left:0; margin-right:0"><span><strong>· 運行時管理<span style="color:#ff2968">能力強</span>：</strong></span>不僅支持環境配置管理，還包括了服務的重啓、更新和配置管理功能，同時還為開發者提供了便捷的實時日誌查看和容器內調試工具。</p><p style="margin-left:0; margin-right:0"><strong><span>· 多環境管理<span style="color:#ff2968">負擔輕</span>：</span></strong>基於一份環境配置，Zadig 能夠秒級內創建多套完整的環境，一鍵複製已有環境到新環境，快速回溯到特定版本的環境，並且利用服務變量功能實現不同環境的個性化配置。</p><p style="margin-left:0; margin-right:0"><strong><span>· 環境更新<span style="color:#ff2968">效率高</span>：</span></strong>支持多服務多環境的並行更新，智能選擇空閒環境，避免資源浪費和低效堵塞。</p><p style="margin-left:0; margin-right:0"><strong><span>· 環境<span style="color:#ff2968">資源佔用少</span>：</span></strong>自測模式可快速創建僅包含部分服務的子環境，支持開發者快速開發和修改目標服務，從而顯著降低團隊協作時的多環境使用成本。</p><p style="margin-left:0; margin-right:0"><span>......</span></p><p style="margin-left:0; margin-right:0">過往社區也沉澱了大量的最佳實踐供大家參考：</p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247486322%26idx%3D1%26sn%3Dbf80ef6f666a9f4d3baa1d1c43382004%26chksm%3Dcfb447d2f8c3cec4606c0370a2f4f885fbf51b97f1407e38a551a0128163c38dff4818cabe84%23rd" target="_blank">簡單極了：Zadig 託管項目支持上千開發者、多業務線、多環境協作</a></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247487967%26idx%3D1%26sn%3Dc50e4a2d2543ee5f771c139c85503abd%26chksm%3Dcfb45d7ff8c3d4690690b800f1f5640fac8d92e06465c9e99d7516960ff3d949a3d308c83ba9%23rd" target="_blank">多套環境的數據庫隔離，域名訪問，差異化配置，香！快解鎖！</a></p><p style="margin-left:0; margin-right:0"><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247487915%26idx%3D1%26sn%3D4719546f8f109733324124bd87c908f9%26chksm%3Dcfb45d0bf8c3d41d581db5e3d957feef9a3a121726bbf66b85eb3a82ded4a88fc98836f247da%23rd" target="_blank">寫代碼 5 分鐘，上線 2 小時？就離譜！來用用 Zadig 環境負載均衡</a></span></p><p style="margin-left:0; margin-right:0"><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247487124%26idx%3D1%26sn%3D062f9a269f16ff91e5e578a9f8456c15%26chksm%3Dcfb44234f8c3cb22d68b608c51327c91fcc06e2bb88d1da5d3f4e5237c9dffa1af9f668ee98e%23rd" target="_blank">在星雲科技，我們使用 Zadig 實現多環境並行發佈，上千次周部署</a></span></p><p style="margin-left:0; margin-right:0"><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247487033%26idx%3D1%26sn%3D645702bbe3e58b957ea960c4b231d819%26chksm%3Dcfb44299f8c3cb8fc664bb7de920eec0d3e587615b04d49cb59ed1b23fe40b83977068626f88%23rd" target="_blank">誰説 Zadig 只能複製環境？數百微服務一套環境實現高效協作</a></span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-c1b0440b31e72d76997ee520ad4540be287.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_1"></span><h2><span style="color:#ff2968"><strong>一、降本增效：推出環境睡眠和喚醒功能</strong></span></h2><p>&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">隨着越來越多的企業深度採用 Zadig，我們關注着環境的易用性、變更效率以及維護負擔等基礎能力，同時積極努力降低環境資源成本。我們明白工程師並非 24 小時都需要使用環境，因此時刻在線的環境會導致資源浪費和企業成本增加。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">在 Zadig 的新版本中，我們引入了環境睡眠/喚醒功能，使環境管理更具智能性。這一功能能夠自動縮減應用程序的大小以節省雲資源成本。環境睡眠/喚醒適用於多種場景，包括但不限於：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span><strong>1. 日常開發和測試：</strong></span><span>&nbsp;</span>工程師進行自測、聯調和集成驗收時，根據使用頻率，可以輕鬆設置環境的睡眠和喚醒，以合理利用資源。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span><strong>2. 不經常迭代的項目：</strong></span><span>&nbsp;</span>對於不經常迭代但仍提供在線服務的項目，需要保留多套完整可驗證的開發、測試和預發佈環境。通過定期設置睡眠，喚起使用時，可以及時釋放資源到公共資源池。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span><strong>3. 定時按需控制：</strong></span><span>&nbsp;</span>您可以設置環境的定時睡眠和喚醒，尤其適用於彈性節點資源。例如每天晚上自動睡眠，早上自動喚醒，或者在節假日休息時自動睡眠，工作日自動喚醒，以避免無人使用時仍然佔用資源。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">這一新功能將使您能夠更智能地管理環境，更有效地利用資源，從而降低成本。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-059a61e53b3cb2a2033421b525584d8db96.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_2"></span><h2><span style="color:#ff2968"><strong>二、關於環境使用的成本優化測算</strong></span></h2><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.5)">實際資源取決於應用本身的佔用及環境使用頻率，Zadig 環境睡眠主張從源頭減少浪費。</span></p><p>&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">以一個典型的微服務項目為例，該項目由 5 名前後端工程師協同，包含 10 個 Java 服務，平均資源 Request 1C2G；1 個 vue 前端服務，資源 Request 1C0.5G；項目迭代過程共包含開發環境 2 套，測試環境 1 套，預發環境 1 套。平均每個服務每人每天構建 2 次；構建時長 6 分鐘。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong>· 正常使用資源消耗：</strong>研發階段大致需要消耗資源<span>&nbsp;</span><span style="color:#ff2968"><strong>44C82G</strong></span><span>&nbsp;</span>(前端 4C2G，後端 40C80G)。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong>· 配置環境睡眠策略後：</strong>該項目在不同迭代頻率下，平均節約<span>&nbsp;</span><strong><span style="color:#ff2968">22C41G</span></strong><span>&nbsp;</span>約一半資源。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-99d72eb1139570e2b7bf667fd8ddd2d855b.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8452cd8960943c012f669980244501130a7.png" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px; text-align:center"><img height="1278" src="https://oscimg.oschina.net/oscnet/up-54779359f43a9840cdac2ba5ac23b7e5af5.png" width="2346" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">下面將展開介紹如何配置環境睡眠及效果的展示。</span></p><span id="OSC_h3_3"></span><h3><span style="color:#ff2968">01-</span><span style="color:#ff2968">如何啓用環境睡眠能力</span></h3><p>&nbsp;</p><p style="color:#ff7faa; margin-left:0; margin-right:0; text-align:justify"><span style="color:rgba(0, 0, 0, 0.5)">前提條件：安裝 Zadig v1.7.0 版本，系統中存在正在使用的環境。</span></p><p style="color:#ff7faa; margin-left:0; margin-right:0; text-align:justify"><span><strong>•<span>&nbsp;</span></strong></span>安裝 Zadig v2.0.0</p><p style="color:#ff7faa; margin-left:0; margin-right:0; text-align:justify"><span><strong>•<span>&nbsp;</span></strong></span>Zadig 環境管理</p><span id="OSC_h3_4"></span><h3><span style="color:#ff2968">02-配置一鍵睡眠/喚醒</span></h3><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">進入環境，點擊睡眠與喚醒 -&gt; 立即睡眠即可將環境一鍵睡眠。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a23a8cfb642b3eec757e317f8bf162ebd9d.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-c9dfbdcb488595269fcafbfe331e1bc7e44.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">需要使用環境時，進入睡眠的環境，點擊睡眠與喚醒 -&gt; 立即喚醒即可將環境喚醒恢復可用。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-2ebf5b3eb9aca3d21beba63bb63497d7e17.png" referrerpolicy="no-referrer"></span></p><span id="OSC_h3_5"></span><h3><span style="color:#ff2968">03-配置定時睡眠/喚醒</span></h3><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">進入環境，點擊睡眠與喚醒 -&gt; 配置定時睡眠和喚醒 Cron 表達式即可。比如，下圖示例中每天 22:00 定時睡眠環境，每天 8:00 環境將定時喚醒恢復可用。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-db2e0c10ffc9d063b4a59de5fe8a9d09b0c.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f4226bd32cc075241b7d87451ab3fb23be.png" referrerpolicy="no-referrer"></span></p><span id="OSC_h3_6"></span><h3><span style="color:#ff2968">04-使用效果一覽</span></h3><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">睡眠後，環境中所有服務實例副本數將會自動調整為 0，CronJob 會被掛起，節省環境所使用雲資源成本。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-45cb0a823997e3471d8dfe59e755369a6aa.png" referrerpolicy="no-referrer"></span></p><p>&nbsp;</p><p style="margin-left:0; margin-right:0">喚醒後，環境中的所有服務會根據服務編排順序恢復到睡眠之前的狀態。</p><p style="margin-left:0; margin-right:0"><img alt="" src="https://oscimg.oschina.net/oscnet/up-d899a41dcd4f828dbfc32a19cfa534dd94c.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h4_7"></span><h4><strong>參考資料</strong></h4><p style="margin-left:0; margin-right:0; text-align:left"><span>[1] 安裝 Zadig v2.0.0</span></p><p style="margin-left:0; margin-right:0; text-align:left">https://docs.koderover.com/zadig/Zadig%20v2.0.0/stable/quick-install</p><p style="margin-left:0; margin-right:0; text-align:left"><span>[2] Zadig 環境管理</span>https://docs.koderover.com/zadig/Zadig%20v2.0.0/project/env/k8s</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-187186c2b990f912cf841796017d7e8ce6f.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0px; margin-right:0px"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491064%26idx%3D1%26sn%3D4bbe7bfe944feaa8b44a08e6156e04e2%26chksm%3Dcfb45158f8c3d84e40d44d2dd9228a844b9bcdeea1fe32a7b0ae41b9af982c11319a38f6675e%26token%3D481744823%26lang%3Dzh_CN%23rd" target="_blank">閲讀原文</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" target="_blank">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig">Zadig 在 Gitee</a></p><p style="color:#333333; margin-left:0px; margin-right:0px"><strong>推薦閲讀：</strong><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" target="_blank">是時候和 Jenkins 説再見了</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" target="_blank">Zadig vs. Jenkins 詳細比對：時代的選擇與開發者之選</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247489682%26idx%3D1%26sn%3Df4ac5ceb38547542061477a45d8dc86d%26chksm%3Dcfb45432f8c3dd24b727e0fb6db276b2d63b2751933e63a25b00b9d9fac2dd68efbd2cbd3863%26scene%3D21%23wechat_redirect" target="_blank">平台工程和 AI 時代的新 10 億開發者</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10149325</guid>
            <link>https://my.oschina.net/koderover/blog/10149325</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Spring Security 6.2 GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Spring Security 6.2&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F11%2F20%2Fspring-security-6-2-goes-ga" target="_blank">已正式 GA</a>。</p><p>Spring Security 是一個能夠為基於 Spring 的企業應用系統提供聲明式的安全訪問控制解決方案的安全框架。它提供了一組可以在 Spring 應用上下文中配置的 Bean，充分利用了 Spring IoC，DI（控制反轉 Inversion of Control ,DI:Dependency Injection 依賴注入）和 AOP（面向切面編程）功能，為應用系統提供聲明式的安全訪問控制功能，減少了為企業系統安全控制編寫大量重複代碼的工作。</p><p>Spring Security 6.2 將 Spring Framework baseline&nbsp;與 Project Reactor 2023.0.0 和 Micrometer 1.12.0 一起升級到了 6.1，同時要求將 Java 17 作為最低平台版本，並支持高達 Java 21 的虛擬線程支持。該版本將包含在即將發佈的 Spring Boot 3.2 GA 版本中。</p><p>一些版本更新亮點內容如下：</p><p><strong>Configuration</strong></p><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fissues%2F5011" target="_blank">gh-5011 - (docs)</a>&nbsp;如果存在<code>CorsConfigurationSource</code> bean ，則自動啓用<code>.cors()</code></p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fissues%2F13204" target="_blank">gh-13204 - (docs)</a>&nbsp;添加<code>AbstractConfiguredSecurityBuilder.with(…​)</code>方法以應用返回構建器的配置器</p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fpull%2F13587" target="_blank">gh-13587 - blog post</a>&nbsp;簡化 OAuth2 客户端組件模型的配置</p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fpull%2F13857" target="_blank">gh-13857 - docs</a>&nbsp;將 servlet 模式支持添加到 AuthorizeHttpRequests</p></li></ul><p><strong>OAuth 2.0/OIDC</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fissues%2F7845" target="_blank">gh-7845 - docs</a>&nbsp;添加 OIDC Back-channel Logout&nbsp;支持</li></ul><p><strong>Messaging</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fpull%2F12532" target="_blank">gh-12532</a>&nbsp;- 添加安全上下文傳播支持</li></ul><p><strong>Web</strong></p><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fpull%2F12817" target="_blank">gh-12817</a>&nbsp;- 使 RedirectStrategy status code 可配置</p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fissues%2F13988" target="_blank">gh-13988</a>&nbsp;- 可配置 HTTP Basic 請求解析</p></li></ul><p><strong>Documentation</strong></p><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fissues%2F13784" target="_blank">gh-13784 - docs</a>- 使用示例更新 OAuth2 文檔登錄頁面</p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-security%2Fissues%2F11926" target="_blank">gh-11926 - docs</a>&nbsp;記錄如何在沒有<code>WebSecurityConfigurerAdapter</code>的情況下發布<code>AuthenticationManager</code>&nbsp;<code>@Bean</code></p></li></ul><p>詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F11%2F20%2Fspring-security-6-2-goes-ga" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267367/spring-security-6-2-ga</guid>
            <link>https://www.oschina.net/news/267367/spring-security-6-2-ga</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 超 700 名員工簽署聯名信，要求董事會集體辭職]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>據紐約時報等媒體統計數據，目前 OpenAI 至少有 743 名員工已簽署聯名信逼迫董事會集體辭職，同時恢復 Sam Altman 和 Greg Brockman 在董事會的職位。<strong>否則所有簽名者集體跳槽微軟</strong>，而且這一人數正在持續增加中（昨晚還只有&nbsp;500 人左右）。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3b5ce54499e3d9390d7173b0cacee47dfbc.png" referrerpolicy="no-referrer"></p><p>出乎意料的是，被認為是 OpenAI&nbsp;此次「政變」組織者的首席科學家 Ilya Sutskever 也簽署了這一聯名信。在這之前，Ilya Sutskever <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Filyasut%2Fstatus%2F1726590052392956028" target="_blank">發表推文稱</a></u>：</p><blockquote><p>「我對自己參與董事會的行動深感遺憾。我從來沒有想過要傷害 OpenAI。我熱愛我們共同建立的一切，我將盡一切努力讓公司重新團結起來。」</p><p><img src="https://oscimg.oschina.net/oscnet/up-498cd7551f25f7cc120902eb390081941de.png" referrerpolicy="no-referrer"></p></blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-08e0a2b4d71953d511d7c02b0bc333b91bf.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-65a525945aa136b1379d133093172eaa368.png" referrerpolicy="no-referrer"></p><p>同時，多位消息人士告訴 The Verge，<strong>如果解僱他的其餘董事會成員下台，Sam Altman&nbsp;和聯合創始人&nbsp;Greg Brockman&nbsp;仍然願意重返 OpenAI。</strong></p><p>公開資料顯示&nbsp;OpenAI 員工人數為 770 名，這批「逼宮」的人佔據了員工總數超 96% 之多。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267364</guid>
            <link>https://www.oschina.net/news/267364</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[修完這個 Bug 後，MySQL 性能提升了 300%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>最近 MySQL 官方在 8.0.35 上修復了一個 bug：</p><p><img src="https://oscimg.oschina.net/oscnet/up-3d378f6a5fb5f8dff83d14e5ff72cab3b1b.png" alt="file" referrerpolicy="no-referrer"></p><p>這個 bug 是由 Mark Callaghan 發現的。Mark 早年在 Google MySQL 團隊，後來去了 Meta MySQL，也主導了 RocksDB 的開發。</p><p><img src="https://oscimg.oschina.net/oscnet/up-378864937e5b51e7e3eccce11e141140199.png" alt="file" referrerpolicy="no-referrer"></p><p>Mark 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.mysql.com%2Fbug.php%3Fid%3D109595" target="_blank">#109595</a> 的 bug report 給出了非常詳細的復現步驟</p><p><img src="https://oscimg.oschina.net/oscnet/up-8b85b0e3e90e67e4818aa415877ce952032.png" alt="file" referrerpolicy="no-referrer"></p><p>在官方修復後，Mark 在他的讀寫 benchmark 上驗證有 300% 的提升 (4x)。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b04bfe95f38c366667868bb63f5182862a1.png" alt="file" referrerpolicy="no-referrer"></p><p>這樣的性能提升在 Hacker News 上也引起了討論，評論區也呈現了 HN 一貫的嘲諷風格。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0dbfce2e26833c161f1e3a3441c51d78a92.png" alt="file" referrerpolicy="no-referrer"></p><p>其實 infra 層這種性能提升的空間並不少。業界缺少的是像 Mark 這樣躬身入局，抽絲剝繭的鑽研態度。之前 Jeff Dean 在 Google 內部也做過一個分享，講了通過優化一小段代碼，就給 Google 一年省了十幾萬核。</p><p>畫根線很容易，難的永遠是知道在哪兒畫。</p><hr><p>💡 更多資訊，請關注 Bytebase 公號：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10143821</guid>
            <link>https://my.oschina.net/u/6148470/blog/10143821</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[目標導向主義失效了？前 OpenAI 科學家現身説法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div>
  「目標感很強」常常被我們用來誇讚一個職場人，並被當作是成功的一大原因。然而，兩位前 OpenAI 科學家——Kenneth Stanley、Joel Lehman 在多年的 AI 研究中發現，目標導向論對於成就偉大的事情並無助益，反而抱着探索的心態去嘗試做有趣的事情更能帶來意想不到的成果。 
</div><div>
  &nbsp; 
</div><div>
  尤其是在人工智能的算法研究中，比如讓機器人通過一條走廊，最終從走廊盡頭的大門中出去。最終實驗證明，在不設定「出門」目標的情況，機器人可以純粹嘗試一些與以往不同的事情，反而最終能找到出門的方法。類似原理的還有 Kenneth Stanley 曾參與的圖片繁育網站的工作，在這個圖片繁育網站上，用户可以從一個簡單的圓點圖形，疊加其他圖形圖片，最終生成出類似汽車、動物等「有用」的圖片，但如果用户開局就抱着」我要生成一張汽車圖片「的目標，反而很難成功。 
</div><div>
  &nbsp; 
</div><div>
  由於認知理念上的轉變，在 ChatGPT 發佈前幾個月，Kenneth 離開 OpenAI 去創業，研究新產品——開放式、偶然性社交網絡 Maven，Joel 離開後到了 Stability，領導 Carper 開放性研究團隊，同時他也在研究機器之愛。Kenneth 和 Joel 也合作創作了一本書《為什麼偉大無法被計劃》，書中認為，許多時候，哪怕我們的探索漫無目的，在前方位置的道路上依然埋藏着無數寶藏。從「目標」中解放出來，或許能成為發現意外之喜的「尋寶者」。 
</div><div>
  &nbsp; 
</div><div>
  「 
 <strong>在我看來，研究工作最重要、最實用的方面之一是開發對於可能性的直覺。」</strong>&nbsp;正如 Joel 現在去研究機器之愛的歷程，在接觸心理學之後，他將對心理學和機器學習的興趣結合起來，找到了更加熱愛的事情，「 
 <strong>我們的生活沒有統一的目標，我們的興趣和心理發展往往是偶然進行的——於是，一個新的研究方向為我打開了。」</strong>在他看來，在機器時代，我們越來越需要人類代理的提醒，技術的目的是為人類的利益服務，而人類是構建和設計這項技術的人。 
</div><div>
  &nbsp; 
</div><div>
  同樣，對於人工智能的看法，Ken 也從人文的角度給出觀點：「一種哲學見解認為，好的人工智能實驗不僅應該帶來強大的系統，還應該帶來對我們人類自身的洞察。畢竟，對智能的任何偉大洞察實際上都是對人類的洞察，因為智能是我們的決定性特徵。」 
</div><div>
  &nbsp; 
</div><div>
  Kenneth 和 Joel 提出的哲學態度與常規認知相反，或許能給我們在這個混亂時刻一些新的啓示，因此，OSCHINA 特別邀請 Kenneth 和 Joel 聊了聊他們理念、觀點和故事。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：Ken 可以詳細介紹下偶然性社交網絡 Maver 的玩法、原理、以及目前的成長狀態嗎？</strong></span></p><div><span style="color:#245bdb"><strong>ken：</strong></span></div><div>
  Maven 是一種新奇的社交網絡，我創辦了一家新公司來開發它。它基於我們《為什麼偉大不能被計劃》一書中的原則，專注於將人們與個性化的偶然發現聯繫起來，而不是增強病毒式傳播。我們從 2023 年開始開發它，所以它還很新。 
</div><div><img height="373" src="https://oscimg.oschina.net/oscnet/up-ea180ad51144df638c6a6b631f4e68e7054.jpg" width="700" referrerpolicy="no-referrer"></div><div><span style="background-color:#ffffff; color:#888888">Kenneth Stanley</span></div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：Stability 現在在全球市場也備受關注，但很多人都不太瞭解開放性研究，能否請 Joel 介紹下正在做的開放性研究是指什麼？</strong></span></p><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  創建生成式 AI 大模型的公司之間的一個主要理念分歧是專有模型與開源模型。 
</div><div>
  &nbsp; 
</div><div>
  例如，現在 OpenAI 和 Anthropic 沒有公開他們最大的模型，以便其他人可以修改或在其基礎上構建 (尤其是對他們來説有商業價值的模型)，而是隻提供一個 API，用户可以在有限範圍內使用模型。支持這種模式的理由通常是：如果大模型被濫用可能造成危險，而 API 可以實現更好的監控，並且訓練大模型成本很高，公司需要一種賺錢的方法。 
</div><div>
  &nbsp; 
</div><div>
  相比之下，由 Stability 和 HuggingFace 等公司採用開源的方式訓練模型、發佈代碼和模型 (通常比閉源模型的模型小)，這樣其他公司和研究人員可以直接在其基礎上進行構建，並根據自己的目的靈活調整。這些公司通常不太關心模型被濫用的危險，而是更關心創建一個蓬勃發展的研究和模型生態系統。但由於他們免費發佈模型，其他人現在可以運行他們的模型，而無需向訓練模型的公司付費，因此他們需要一種不同的商業模式來保持財務上的可行性。 
</div><div>
  &nbsp; 
</div><div>
  這兩種理念都有蓬勃發展的空間，儘管未來存在關鍵的不確定性。例如，如果開源模型在未來變得非常強大，並且不良行為者最終利用這些模型造成了社會問題，則可能會產生負面影響。反之，如果專有大模型的 API 對於大多數希望使用生成式 AI 的公司來説限制過多或是成本過高，也許也導致更多人選擇開源路徑。 
</div><div>
  &nbsp; 
</div><div>
  當然，隨着開源運動模式與方法的日益多樣化，開源似乎更符合 Ken 和我的書中所傳遞的理念。我可以想象，許多有趣的發現將由此產生。但我擔心，如何在開源社羣中加入安全約束和規範引入，使得這些模型在造福社會的同時，也能儘量避免可能的負面影響？以及如何在鼓勵這些規範和約束的同時不必放慢創新速度？這是一個有趣而微妙的問題。 
</div><div><img height="592" src="https://oscimg.oschina.net/oscnet/up-f738a9b408fbacdee21e45d537991e8c562.png" width="700" referrerpolicy="no-referrer"></div><div><span style="background-color:#ffffff; color:#888888">Joel Lehman</span></div><span id="OSC_h3_1"></span><h3>從「繁育」到「提示」，我們該如何對話機器</h3><p><span style="color:#2ea121"><strong>OSCHINA：當年「繁育圖片」的孵化器網站後面的故事是怎樣的？是否還在運行？</strong></span></p><div><span style="color:#245bdb"><strong>ken：</strong></span></div><div>
  你指的是 Picbreeder。它是在我在中佛羅裏達大學 (University of Central Florida) 的實驗室開發的 (該實驗室名為 EPlex-Evolutionary Complexity Research Group)。Jimmy Secretan(當時是一名博士生) 領導了這項工作。這是一個允許互聯網用户培育圖像的網站，就像你培育狗或馬一樣。更深層次地説，其實這是一次開放性實驗。它使我們能夠觀察到在人工環境中發生的大規模開放式搜索過程 (讓人聯想到自然進化)。看到這一過程的展開，我們得到了許多深刻的教訓，其中包括新奇性搜索算法背後的理念，以及《為什麼偉大無法被計劃》一書中的見解。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：「繁育」原理和現在火爆的「輸入 prompt 生成圖片」這類網站可以做比較嗎，二者背後的運行原理有什麼相似得地方，有什麼不同的地方？</strong></span></p><div><span style="color:#245bdb"><strong>ken：</strong></span></div><div>
  它們都是生成藝術的一種形式，但工作方式截然不同。基於提示的現代圖像生成技術之所以有效，是因為生成圖像的模型已經過數百萬或數十億個示例圖像的訓練。所以當它生成圖像時汲取了豐富的經驗。在協議中，Picbreeder 沒有任何訓練數據，用户只是簡單地開始隨機繁育圓點，經過幾代的繁育，就能產生進化，產生更多我們更熟悉的圖像，比如如汽車和蝴蝶。一個一開始並不明顯的巨大差異是，繁育遠沒有那麼密集：像 Picbreeder 頭骨這樣的繁育圖像只需要幾十次迭代搜索，而現代圖像模型已經經過數百萬或數十億次迭代進行優化。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  抽象地説，繁育原理是指人們以發散和協作的方式探索思想空間，是取得新發現和有用發現的關鍵。「輸入提示生成圖片」的方法，在某種意義上與繁育原則是正交關係，因為你可以發散地與他人寫作探索提示空間，也可以自己探索。 
</div><div>
  &nbsp; 
</div><div>
  換句話説，許多人確實分享了他們的提示技巧，展示如何讓模型生成圖像獲得有趣成果。例如，在一些模型中，添加「Trending on Artstation」這一文本將有助於提高質量。所以，人們越能看到他人制作的圖片和提示，就越能從圖片和他人的提示中得到啓發，製作自己的圖像，從而更全面地用擁抱繁育原則。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：Prompt 背後的原理，是更接近目標函數原理，還是無目標探索</strong></span><span style="color:#2ea121"><strong>系統理論</strong></span><span style="color:#2ea121"><strong>？如何解釋？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  因為 prompt 可以傳達任何想法，所以它可以用來表達客觀或非客觀的過程。大多數人可能會客觀地使用它們，因為這是我們大多數人被教導的思考方式，但仍然有可能有人非客觀地使用它們。例如，如果我讓它為我解決一個問題，這是一個客觀使用。但如果我讓它想給出一些有趣的東西，那就更接近於非客觀。然而，重要的是要注意，你可以向 LLM 表達一個非客觀的概念並不意味着它能表現得很好，或像人類一樣。我認為現在的 LLM 通常無法很好地獨立實現非客觀的表達。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  Prompt 原則既可以兼容目標函數原則，又可以兼容探索系統理論。有時，人們會 prompt 進行大量優化，試圖在特定任務中獲得最佳性能。還有一些時候，人們以一種更不定向的方式利用 prompt 進行探索，以找到不同尋常的有趣方法來產生新的輸出——探索特定語言模型或圖像生成模型的邊界。 
</div><div>
  &nbsp; 
</div><div>
  以「思維鏈」提示的驚人發現為例，只需要給模型舉幾個例子，説明如何推理一個問題，最終就能幫助模型更好地完成任務 (即告訴模型「一步步思考」)。模型本身有意想不到的優勢，需要研究人員去發現，而發現方法往往是遵循他們的直覺，並以其他人發現和其他共享出來的 prompt 為基礎。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：現在很多培訓教學，教大家如何使用 Prompt，如果遵循用無目標探索</strong></span><span style="color:#2ea121"><strong>系統理論</strong></span><span style="color:#2ea121"><strong>，採用尋寶原則，我們該如何學習使用 prompt 和機器對話？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  我認為以這種方式探索 prompt 是一個好主意。當你和 LLM 交談時，嘗試去做一些沒有目標的事情，看看當你嘗試一些有趣的事情時會發生什麼。當你發現它以一種有趣的方式響應時，請進一步探索這條路徑。這種方法可能會帶來對模型的更深入的理解，而不是簡單地嘗試實現特定的目標。就像對待一個人一樣，與系統一起探索，以更好地瞭解它是很有價值的。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  一個原則是花一些時間玩這個系統，做你認為有趣的探索。也許你想看看模型有多善於諷刺，或者扮演你最喜歡的名人。你可以通過修改 prompt，或者嘗試他人創建的 prompt 來開發直覺。你可以對意外發現持開放態度，注意到模型以一種本身有趣的方式作出響應——也許你試圖讓語言模型進行諷刺，但它卻以巧妙的雙關語做出了反應。那麼，也許你可以探索它擅長哪種雙關語，以及它何時會犯奇怪的錯誤。很有可能，當你嘗試將模型應用到實際事物中時，你在親手操作模型的過程中形成的直覺最終會對你有用，或者你可能會發現一種新的提示方法，或者至少你可能會在學習提示的過程中獲得樂趣。 
</div><div>
  &nbsp; 
</div><span id="OSC_h3_2"></span><h3>哲學與技術，開發對於可能性的直覺</h3><p><span style="color:#2ea121"><strong>OSCHINA：在開發者羣體中，roadmap、里程碑文化非常盛行，這是典型的目標導向。事實上，我們能看到很多知名軟件都早已偏離最初的預設目標，但很多時候，時候軟件標準、里程碑也能很好地指引開發團隊做事。這個現象可以怎麼理解？對於開發者該如何選擇自己的「開發哲學」，你們有什麼建議？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  目標並不總是壞的。當通往目標的路徑是已知的，設定目標就會有成效。在軟件開發中，完成項目的步驟通常是已知的，所以遵循目標是有意義的。然而，如果項目的目標是創新、發現或創造力，那麼目標就有問題了。這樣的項目可能會被目標扼殺，最終只做了很少有創造性的事情。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  首先我要説明的是，我在大型軟件工程方面沒有太多的個人經驗。但一般來説，里程碑和標準可能非常適合在已知如何做的範圍內進行的工作。距離成功可能只是一步之遙，不需要廣泛探索。將軟件從版本 1 升級到版本 1.1，修復一些現有的 bug 或添加一些有限的功能，可能是非常適合目標的思維的地方。但是從更長遠的角度來看，如果目標是完全重新構想一個軟件，或者創建一個軟件來實現其他軟件從未實現過的功能，那麼就需要更多的探索和墊腳石思維。 
</div><div>
  &nbsp; 
</div><div>
  有時，墊腳石現象發生在更高的層面上。例如，當一個團隊開發併發佈一個開源庫時，一個對他們的目的有用的庫，一個構建在以前存在的庫上的庫，並且將使其他人能夠創建他們自己的新庫——這就是在玩尋寶遊戲。因此，開發人員的哲學中，與尋寶有關的方式是，瞭解目前有哪些軟件墊腳石，這些墊腳石可能使哪些以前沒有的東西成為可能，並向世界推出新的軟件，讓別人能夠以你無法預料的方式去使用的新軟件。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：哲學思想可以如何作用於 IT 領域的研究，可以結合實際的事情來聊一聊嗎？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  我不確定這裏指的是一般哲學還是這本書的哲學。當然，這本書的哲學也可以應用於其中。因為它只是贊同有時走一些有趣的路，即使你不知道它們通向何方。這在信息技術領域是絕對可行的。 關於一般哲學能否應用於 IT 的問題，我認為是可以的。 我認為哲學是對世界可能存在的方式的研究（與研究世界存在方式的科學相對）。 
 <strong>對「可能是什麼 」的理解可以幫助你在做出選擇之前看到眼前的各種可能性。</strong></div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  這很有趣——有些人把哲學和實用性對立起來。我能理解這種觀點，因為我們接觸到的哲學往往是抽象的、象牙塔式的。但在我看來，最重要的哲學是非常實用的。在進行包括 IT 在內的任何領域研究時，掌握一些關於如何進行發現的哲學是非常重要的。你可以通過自己的經驗和觀察發展出自己的個人哲學，但我們這本書的一個貢獻就是強調了雄心勃勃的發現通常是如何發生的。 
</div><div>
  &nbsp; 
</div><div><strong>在我看來，研究工作最重要、最實用的方面之一是開發對於可能性的直覺。</strong>我的意思是，去理解什麼樣的事情是容易完成的，哪些事情是在可能性的邊緣，哪些事情你不清楚你是否能夠解決它們。當一個人剛進入一個領域時，當涉及到可能性時，他們的直覺通常會很差。但是，當你對可能性的直覺很好 (你大致知道一個問題有多難)，並且你的探索哲學也很合理 (如果一個問題很容易，就可以直接攻克；如果一個問題非常困難，可能無法解決，或者至少需要大量耐心的發散性探索)，那麼你成功的機會就會大得多。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：無目標，新奇性搜索等哲學思想對你們的日常生活產生了哪些影響？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  這對我的日常生活很有幫助，因為我對僅僅因為有趣而去做某事的疑慮減少了。我知道它可能會成為一個有趣的墊腳石，即使我還不知道它最終將如何有用。我還把它來對待我的孩子。例如，我 9 歲的兒子有時會選擇一些沒有明顯好處的事情，但我鼓勵他去做，因為我看到他對這些項目很感興趣，所以我相信這些項目可以引導他發現自我。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  寫這本書，以及多年來對新奇性搜索的研究，這種理念不可避免地滲透到一個人的生活中。我比大多數人更樂於改變職業方向 (我目前正處於改變職業方向的過程中)，我努力保持求知慾，樂於看到意想不到的新機會，並努力在生活的不同方面之間找到廣泛的聯繫。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：多年前你們因為圖片產品的啓示，開始研究「無目標」相關的哲學，這些年有沒有一些實踐體驗帶來新的哲學感悟？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span><strong>一種哲學見解認為，好的人工智能實驗不僅應該帶來強大的系統，還應該帶來對我們人類自身的洞察。畢竟，對智能的任何偉大洞察實際上都是對人類的洞察，因為智能是我們的決定性特徵。</strong></div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  這些年來，我有很多頓悟的時刻，事情以一種意想不到的方式突然發生。這些經歷往往發生在閲讀與我正在研究的課題有着抽象聯繫的有趣內容時，一種新的聯繫突然出現，或者當我的兩個看似獨立的興趣突然聯繫在一起時，就達到更深層次的統一。 
</div><div>
  例如，我最近關於「機器之愛」的研究就是將我對心理學和機器學習的興趣結合在一起。起初，這些興趣似乎是完全分開的。但後來，隨着我不斷深入研究心理學， 
 <strong>我開始意識到，人類個體的生活在某種程度上是開放式的，就像生物進化一樣——我們的生活沒有統一的目標，我們的興趣和心理發展往往是偶然進行的——於是，一個新的研究方向為我打開了。 </strong></div><div>
  &nbsp; 
</div><span id="OSC_h3_3"></span><h3><strong>ChatGPT</strong><strong>：或許是目標與非目標導向的產物</strong></h3><p><span style="color:#2ea121"><strong>OSCHINA：當下火熱的 </strong></span><span style="color:#2ea121"><strong>ChatGPT</strong></span><span style="color:#2ea121"><strong>，或者其他</strong></span><span style="color:#2ea121"><strong>人機互動</strong></span><span style="color:#2ea121"><strong>問答產品，其背後的搜索符合新奇性搜索原則嗎？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  這取決於這裏所説的「搜索」是什麼意思。假設是研究人員，確實有一個搜索的組成部分反映了新奇性搜索的各個方面，即使它不是明確的新奇性搜索算法。尤其是，沒有人知道 ChatGPT 會成為一個世界性的現象——相反，他們決定研究它，是因為它既有趣又新奇。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  如果我們回顧一下 OpenAI 的研究歷程，就會發現 ChatGPT 並不是該公司的長期目標。他們一開始就做了很多不同類型的研究，與 ChatGPT 似乎沒有什麼聯繫 (例如，機器人實驗，以及教 AI 玩電子遊戲的實驗)。因此，創建一個功能非常強大的問答系統的道路是出乎意料的，沒有計劃，它取決於並建立在許多其他人鋪設的墊腳石的上。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：</strong></span><span style="color:#2ea121"><strong>OpenAI</strong></span><span style="color:#2ea121"><strong> 或者 </strong></span><span style="color:#2ea121"><strong>ChatGPT</strong></span><span style="color:#2ea121"><strong> 可以稱得上是一項偉大的實驗 OpenAI 現在在做的事情是符合「目標導向」還是「自由探索」路徑？如何解釋？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  因為我已經不在 OpenAI 工作了，所以很難説他們現在正在遵循什麼樣的流程。但我想説的是，這很可能是一個混合體，既要努力優化以獲得更好的性能（這是以目標為導向的），又要嘗試其他有趣的想法（這是以新奇為導向的）。這種混合反映出，他們既需要改進現有的東西，也需要尋找下一個新事物。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  我不代表 OpenAI 發言，也不太瞭解他們目前的計劃 (我一年前離開那裏)。但我認為這兩者兼而有之——既有「自由探索」，也有「目標導向」。這家公司已經不像剛成立時那樣進行純粹的原始探索，但他們仍在繼續做許多有趣的研究。 
</div><div>
  &nbsp; 
</div><span id="OSC_h3_4"></span><h3>關於探索嘗試、關於機器之愛</h3><p><span style="color:#2ea121"><strong>OSCHINA：你們提到一句話：「如果你想在有遠見的人身上投資，就看看那些在附近的不確定性領域中徘徊和探索的人。」這句話裏「附近的不確定性領域」是容易被發現的嗎？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  不，我覺得這不容易發現。這就是為什麼發現這些變革性機會的人如此罕見。我們經常假設世界運行的方式，這讓我們對仍然存在的問題視而不見。然而，一旦有人指出了其中的一點，那麼其他人就很容易看到了。但首先看到它就是一件不平凡的事情。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  一開始不容易發現，但這是一種可以培養的技能。這是一種識別當前存在哪些墊腳石以及這些墊腳石可能帶來什麼的技能。通過一些專業領域知識，更容易識別「鄰近的不確定性區域」。例如，我對量子物理知之甚少，我很難理解什麼是已知的，什麼是未知的，或者當前的墊腳石是什麼樣的。但在我工作多年的人工智能領域，我確實對該領域中有趣的不確定性有豐富的直覺。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：現在的 </strong></span><span style="color:#2ea121"><strong>AI</strong></span><span style="color:#2ea121"><strong> 世界，有哪些很酷的嘗試？</strong></span></p><div><span style="color:#245bdb"><strong>Ken：</strong></span></div><div>
  我認為計算機輔助創作很有趣，多模態 (如文本與圖像) 以及新型音樂的可能性也很有趣。比這些更酷的是幻覺的解決方案或產生真正開創性想法的能力。然而，據我所知，這些問題的解決方案還不存在。 
</div><div>
  &nbsp; 
</div><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  一個很酷的現象是，大模型正在重塑、重新想象舊算法。例如，一個大語言模型可以通過指令來創建一個計算機程序或一段文本的新變體，這將不僅僅是隨機變體，而是智能變體——因為大模型是在大量計算機程序和文本中訓練出來的。因此，你可以使用語言模型作為智能變化的引擎，從而使新型進化算法成為可能。通常，進化算法使用隨機變化——但使用語言模型的進化算法更接近人類發明新想法的方式，即對其進行智能的探索性修改。 
</div><div>
  &nbsp; 
</div><div>
  這只是大模型如何重新發明算法的一個例子，但總的來説，它們是有趣的新工具——令人興奮的新跳板——併為構建以前不可能構建的東西開闢了許多新的有趣的可能性。 
</div><div>
  &nbsp; 
</div><p><span style="color:#2ea121"><strong>OSCHINA：機器之愛真的能實現嗎？個性化推薦、信息繭房、偏見、制度、思想、等等各種有形或事無形的阻礙充斥在各個地方，目之所及似乎都是困難。如果把「美好的人與機器的世界」做為目標，我們大概率會踩到錯誤的墊腳石上。如果用「尋寶原則」做導向，放任當下的機器研究自由發展，會不會使得情況更為糟糕？而現在要做的事情又是什麼呢？</strong></span></p><div><span style="color:#245bdb"><strong>Joel：</strong></span></div><div>
  我相信，機器之愛的某些方面是可以實現的——這似乎是一個簡單的事實，語言模型確實可以使機器開始處理定性和心理方面的工作，這可以讓我們設計出關係自身成長和發展的算法，而這正是機器之愛的核心理念。在我看來，這是一塊值得關注的有趣墊腳石，儘管目前還不清楚它會通向哪裏——我們有理由懷疑，機器之愛的完整願景是否會實現，它想要改變我們的世界確實還有很多障礙。但它可能會帶來其他的墊腳石，以及應對這些障礙的方法——我們還不知道。 
</div><div>
  &nbsp; 
</div><div><strong>除了「機器之愛」（這只是改善機器對我們的影響的一個想法）之外，我們應該大膽地探索機器如何幫助我們人類過上更好的生活的許多不同願景，也許這些願景中的一個可以實現。我們永遠不可能完全知道一塊墊腳石會把我們帶到哪裏，但我們會盡最大努力，在不確定性和希望解決世界難題之間取得平衡。</strong></div><div>
  &nbsp; 
</div><div>
  我堅信， 
 <strong>在開發新技術時，尋寶原則不是我們應該遵循的唯一原則，讓當前的機器學習不受阻礙地發展，可能會給社會帶來許多負面的外部影響。</strong>一種觀點認為，對社會安全的搜索也是一個開放式的搜索過程，就像對更強大的技術 (如大模型) 的探索一樣。在尋找安全的過程中，就像在尋找技術一樣，墊腳石的結構是不明確的，因此我們需要廣泛而好奇地探索可能的幹預空間 (例如，政府政策、新算法、公共教育、文化運動)，同時要知道，安全無法得到完全保證。在鼓勵創新的同時，我們仍應盡最大努力維護社會，這可能需要智慧、剋制和創造力。 
</div><div>
  &nbsp; 
</div><div>
  更具體地説， 
 <strong>在機器時代，我們越來越需要人類代理的提醒。技術的目的是為人類的利益服務，而人類是構建和設計這項技術的人。除了我們自己，還有什麼能讓我們保持謹慎呢?</strong></div><div>
  &nbsp; 
</div><div><hr></div><div>
  👍 為什麼偉大不能被計劃：OpenAI 科學家跨界撰寫的思維奇書，源自人工智能研究的意外發現，找到人類偉大發明的真正入口，顛覆傳統目標理論，重塑認知與思維模型，向普通人描繪一幅不同的成功圖景 。 
</div><div><hr></div><div>
  【💰售價】39.50 元 
</div><div>
  👉購買鏈接：https://j.youzan.com/TTuo6A 
</div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 01:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4489239/blog/10149295</guid>
            <link>https://my.oschina.net/u/4489239/blog/10149295</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Intel SIG 成立！攜手打造 openKylin-Intel 技術生態]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">2023 年 11 月，經 openKylin 社區技術委員會審議通過，</span><strong><span style="color:#000000">Intel SIG</span></strong><span style="color:#000000">正式成立。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Intel SIG 由</span><strong><span style="color:#000000">英特爾中國</span></strong><span style="color:#000000">發起成立，負責 openKylin 社區中桌面操作系統上 Intel 最新平台支持、適配與優化等技術相關的開發工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><em><span><strong><span style="color:#ffae28">01&nbsp;</span></strong></span></em><span><strong><span style="color:#0b43d1">SIG 目標</span></strong></span></p><ul><li><span>創建並維護 openKylin Intel 新平台的規劃和升級，建設更完善的 openKylin-Intel 技術生態；</span></li><li><span>充分利用 openKylin 提供的平台，把最新的 Intel 技術基礎軟件棧融入 openKylin 操作系統，為未來社區的創新和發展提供更廣闊的空間，為推動 Intel 產品的落地提供生態支撐。</span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><em><span><strong><span style="color:#ffae28">02&nbsp;</span></strong></span></em><span><strong><span style="color:#0b43d1">SIG 職責</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#0052ff">1、Intel 新平台</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">根據 openKylin 社區的規劃，並且結合上遊內核的開發，Intel SIG 會對 Intel 最新的平台在下游社區進行全面支持。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#0052ff">2、Intel 新技術</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">根據客户的需求，引入 Intel 優勢技術，更好的提供可行性方案；拓展更廣的技術和商業合作空間。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#0052ff">3、OEM 的支持</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">根據桌面平台的生產商 (OEM)，Intel 可以根據 OEM 的需求以及 openKylin 的要求，合作支持 OEM。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#0052ff">4、與 openKylin 共贏</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Intel SIG 願意與 openKylin 各方合作，共同構建面向未來的良性合作生態環境，為 openKylin 開源桌面操作系統的發展提質提速。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><em><span><strong><span style="color:#ffae28">03&nbsp;</span></strong></span></em><span><strong><span style="color:#0b43d1">歡迎加入 SIG</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Intel SIG 負責 openKylin 社區中 Intel 技術相關的開發和信息交流，本小組擁有國內外頂尖的 Intel 平台研究技術團隊，為拓展 openKylin 的生態提供有力支撐，期待各位感興趣的小夥伴們的加入！</span></span></p><ul><li><span>郵件列表：</span></li><li><span><span style="color:#0052ff">intel@lists.openkylin.top</span></span></li><li><span>SIG 主頁：</span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/Intel-SIG</span></span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 01:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267352</guid>
            <link>https://www.oschina.net/news/267352</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Oracle Linux 9.3 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Oracle Linux 9 系列<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Flinux%2Fpost%2Foracle-linux-9-update-3" target="_blank">發佈了第 3 個版本更新</a></u>，支持 64 位 Intel 和 AMD (<code>x86_64</code>) 以及 64 位 Arm (<code>aarch64</code>) 平台。與所有的 Oracle Linux 版本一樣，此版本與相應 RHEL 版本 100% 應用二進制兼容。</p><p>對於<code>x86_64</code>和<code>aarch64</code>架構，Oracle Linux 提供了 Unbreakable Enterprise Kernel (UEK) 內核，版本為 UEK Release 7 Update 2, 5.15.0-200.131.27。UEK R7 基於上游 Linux Kernel 5.15，同時支持 Oracle Linux 9 和 Oracle Linux 8。此外還為<code>x86_64</code>架構提供兼容紅帽的內核 (RHCK)，版本號為 5.14.0-364。</p><p><strong>主要變化</strong></p><ul><li>Oracle Linux 現在支持通過 DNF 安裝補丁後自動重啓系統。通過增強的 DNF，使用不同選項（從不、更改時、需要時）自動重啓可以加快補丁管理操作</li><li>OpenSSH 默認情況下顯式強制使用 SHA-2 算法進行密鑰測試，對於運行 Oracle Linux 9 Update 3 的系統，SHA-1 在客户端不可用；此增強功能避免了使用 SHA-1 算法中的弱點</li><li>採用 UEK R7U2 的 Oracle Linux 9.3 繼續維護並支持 btrfs 文件系統，以訪問 Linux 上最現代的寫入時複製 (COW) 文件系統之一</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Flinux%2Fpost%2Foracle-linux-9-update-3" target="_blank">詳情查看發佈公告</a></u>、<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Foperating-systems%2Foracle-linux%2F9%2Frelnotes9.3%2F%23Oracle-Linux-9" target="_blank">Release Notes</a></u>。</p><blockquote><p>Oracle Linux 是由 Oracle 支持的企業級 Linux 發行版，它從 RHEL 源代碼包生成。Oracle Linux 的獨有特性包括一份定製且嚴格測試過的名為 「Oracle Unbreakable Kernel」 的 Linux 內核，與 Oracle 的多數數據庫應用在內的軟硬件產品的緊密集成，以及 「零掉線打補丁」 技術 —— 該特性能讓系統管理員在不重啓的情況下更新內核。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-65ef8ba8572130a6b1d0d70109f7d6a0c03.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 10:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267286/oracle-linux-9-update-3</guid>
            <link>https://www.oschina.net/news/267286/oracle-linux-9-update-3</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：Istio 1.20.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Floft-sh%2Fdevpod" target="_blank">DevPod</a></h3><p>DevPod 是一款純客户端工具，可在任何後端基於 devcontainer.json 創建可重現的開發人員環境。每個開發者環境都在一個容器中運行，並通過 devcontainer.json 進行指定。通過 DevPod 提供商，這些環境可以在任何後端創建，如本地計算機、Kubernetes 集羣、任何可訪問的遠程機器或雲中的虛擬機。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFairwindsOps%2Fgemini" target="_blank">Gemini</a></h3><p>Gemini 是用於管理卷快照的 Kubernetes CRD 和 operator。可以定期為 PersistentVolumes 上的數據創建快照，清空舊快照，並以最少的停機時間恢復快照。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fr0binak%2FMTKPI" target="_blank">MTKPI</a></h3><p>MTKPI - 多工具 Kubernetes 滲透測試鏡像。該 docker 映像包含 Kubernetes 滲透測試所需的所有最常用工具。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcollabnix.com%2Ftop-5-alert-and-monitoring-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 5 個最佳告警和監控工具</a></h3><p>這篇文章介紹了針對 Kubernetes 的前五個告警和監控工具。文章指出，Kubernetes 作為容器運行應用程序的首選選擇，具有可伸縮性、靈活性和彈性等優勢。然而，管理和監控 Kubernetes 可能會相當困難。因此，對於保證應用程序平穩可靠運行的關鍵是監控和告警。監控和告警是有效運營 Kubernetes 集羣的實踐方法，它們使您能夠收集集羣、節點、Pod、容器、服務和應用程序的指標、日誌和跟蹤數據，並使用儀錶板、圖表和表格對數據進行可視化和分析。通過規則、閾值和通知對異常、錯誤、故障和 SLA 違規進行告警，並通過調查根本原因、解決問題或升級到適當的團隊來採取行動。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcollabnix.com%2Ftop-5-machine-learning-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 5 大機器學習工具</a></h3><p>這篇文章介紹了在 Kubernetes 上進行機器學習的五個頂級工具。文章介紹了每個工具的特點、優勢和使用案例，以及選擇這些工具的標準，如功能性、易用性、流行度和創新性。通過使用這些工具，用户可以更輕鬆地在 Kubernetes 上進行機器學習任務，並提高其工作流程的效率和可靠性。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspacelift.io%2Fblog%2Fkubernetes-deployment-strategies" target="_blank">8 種不同類型的 Kubernetes 部署策略</a></h3><p>這篇文章介紹了 Kubernetes 的八種不同部署策略，包括 Recreating、Rolling、Blue/Green、Canary、A/B、Ramped Slow Rollout、Best-Effort Controlled Rollout 和 Shadow Deployment。它解釋了每種策略的優點和用途，幫助讀者在應用程序部署和升級時做出明智的選擇。</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubescape.io%2Fblog%2F2023%2F09%2F19%2Fintroducing-kubescape-3%2F" target="_blank">Kubescape 3.0 發佈</a></h3><p>Kubescape 是 CNCF Kubernetes 安全姿態管理工具的下一代，日前發佈了 v3.0。</p><p>Kubescape 3.0 新增以下功能：</p><ul><li>將合規性和容器掃描結果存儲為 Kubernetes 集羣內的資源</li><li>通過命令行界面掃描容器鏡像的漏洞</li><li>報告集羣中所有鏡像的漏洞情況</li><li>全新的概覽安全掃描，幫助你為集羣安全設置基線</li><li>突出顯示高風險工作負載：那些如果受到損害可能造成最大危害的工作負載</li><li>改進的顯示輸出</li><li>新的基於能力的 Helm chart</li><li>每個工作負載、命名空間和集羣的 Prometheus 指標</li><li>通過 Prometheus Alertmanager 進行告警</li><li>將數據發送到集羣外的託管服務</li></ul><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.opencost.io%2Fblog%2Faks-cost-analysis" target="_blank">OpenCost 宣佈與 Microsoft AKS 成本分析工具集成</a></h3><p>OpenCost 正在與 Microsoft 的新 Azure Kubernetes Service（AKS）成本分析工具集成，以實現使用度量收集。Microsoft Azure 的客户現在可以根據 Kubernetes 特定的結構，原生地瞭解成本分配的可見性。</p><p>AKS 成本分析是針對標準和高級 AKS 羣集的附加組件，向客户提供免費的服務。它直接在 Azure 門户中提供成本分配報告。AKS 客户現在可以輕鬆地可視化其 Kubernetes 成本分配，作為進一步優化和異常檢測的基礎。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fistio.io%2Flatest%2Fnews%2Freleases%2F1.20.x%2Fannouncing-1.20%2F" target="_blank">Istio 1.20.0 發佈</a></h3><p>Istio 1.20.0 發佈，這是 2023 年最後一個 Istio 版本，以下是該版本主要變化：</p><ul><li>網關 API</li><li>改進的外部名稱服務支持</li><li>一致的 Envoy 過濾器排序</li><li>對網絡 WasmPlugin 的擴展支持</li><li>TCP 元數據交換增強</li><li>插入根證書輪換</li><li>流量鏡像現在支持多個目標</li><li>...</li></ul><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 10:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10149219</guid>
            <link>https://my.oschina.net/u/4197945/blog/10149219</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[運營商神操作：後台斷網、停用寬帶賬號，強迫用户更換光貓]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，河南電視台都市頻道節目報道稱，河南周口聯通為了強迫用户更換光貓，<strong>公司在後台停掉用户的寬帶賬號，導致用户無法上網，然後讓工程師上門「維修」，謊稱光貓損壞，需要花 299 元換新</strong>。<strong>更換完後，聯通再在後台恢復用户的網絡</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6bca55961849d5db6bafd2b8cf31a04abc6.png" referrerpolicy="no-referrer"></p><p>聯通公司不僅對老用户進行這種強制更換光貓的行為，還會在給新用户裝機的時候，故意使用破舊光貓，也就是之前強迫用户換新留下的，而再過一段時間之後，又會告訴用户使用的是舊光貓無法匹配，必須換新。聯通公司還會故意關掉用户的短信服務，在後台增加增值業務，之後再把短信功能打開，以此牟利。</p><p><img height="826" src="https://static.oschina.net/uploads/space/2023/1120/163843_Utox_2720166.png" width="1518" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1120/164043_bGMp_2720166.png" referrerpolicy="no-referrer"></p><p>周口聯通迴應稱，全力配合省公司調查組進行調查核實。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5af067ca7f5336640898e328da5adc6109b.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.sina.com.cn%2Fs%2F2023-11-20%2Fdoc-imzvfrzw9582625.shtml" target="_blank">https://news.sina.com.cn/s/2023-11-20/doc-imzvfrzw9582625.shtml</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267276</guid>
            <link>https://www.oschina.net/news/267276</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里雲開源大數據產品年度發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文根據 2023 雲棲大會演講實錄整理而成，演講信息如下：</p><p><strong>演講人</strong>：陳守元 | 阿里雲計算平台事業部開源大數據產品總監</p><p><strong>演講主題</strong>：阿里雲開源大數據產品年度發佈</p><p>隨着雲計算的不斷髮展，未來數據處理和應用的趨勢將圍繞 Cloud Native、Severless 和 Data+AI 展開。其中，雲原生架構已成為主流趨勢，因為它可以提高數據處理和應用程序的可伸縮性和靈活性，支持大規模部署和更快的響應時間。同時，Serverless 作為一種新型計算模式，可以提高處理效率、降低運營成本並減少資源浪費，其獨特的特點使得其成為處理大規模數據的理想選擇。此外，Data 與 AI 融合正在快速發展，不斷提高智能化和自動化程度，同時需要高質量的數據來支撐算法的準確性和有效性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a48d65a7b7035e480f3276674b7f31f68a3.png" alt="" referrerpolicy="no-referrer"></p><h2>EMR：面向下一代湖倉和全面 Serverless 化</h2><p>下面進入產品發佈環節，我們將圍繞上面三個點&nbsp;做哪些事情、有哪些發佈更好地服務用户上雲&nbsp;來講述我們產品的重點發布。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4026c36c77d94f189e70fb9fe1cb0464515.png" alt="" referrerpolicy="no-referrer"></p><p>首先，我們來看 EMR。EMR 是一個雲原生開源大數據平台系統。對於 EMR 而言，線下 IDC 大量基於開源 Hadoop 生態構建的線下用户搬站上雲第一站就會選擇 EMR，因為改造代價特別地小，幾乎可以無縫平遷上雲。這對用户來説是具有巨大的人力資本和機器資本的節省。&nbsp;我們將阿里雲 EMR 定位為&nbsp;用户搬站上雲的第一站。</p><p>今年我們的產品矩陣做了升級，我們希望在雲上基於更多樣化的 IaaS 提供多樣化的 EMR 產品形態。EMR 通用版，核心解決的用户問題就是幫助用户的大數據系統平遷上雲，這也是和用户線下部署兼容度最高的方案。第二個是 EMR 容器版，即 EMR ACK 版。現在 IT 基礎設施的雲原生容器化基本上都深入人心，我們大量客户在雲上基於 IT 系統的構建都會選擇容器化的平台，例如阿里雲的 ACK。用户自然而然會聯想到如何把 Data 和 AI 的 workload 遷移到 IT 基礎設施的同一個集羣裏，完成 Data&amp;AI 的負載&nbsp;與 IT 設施負載混用，EMR 容器版，或者説 EMR onACK 就是幫用户解決這類問題的產品。</p><p>最後也是我們今天想強調的重點就是 EMR Serverless 版。對於 EMR Serverless 子產品線而言，內部有些 feature 或者功能&nbsp;在之前雲棲中已做了發佈。今天對於 EMR Serverless 產品線是一個更加完整的矩陣呈現，今天會重點講一下 Serverless Spark、Serverless StrarRocks 兩大主流 EMR 計算引擎的 Serverless 化，今天也是我們正式對外提出一個完整的 EMR Serverless 化的產品線矩陣。</p><p>EMR Serverless 版是 EMR 產品線形態中誕生最晚、發佈最新的一代產品和技術，其實 EMR 圍繞 Serverless 的佈局在一年前、兩年前都在緊鑼密鼓地進行。前面 OSS-HDFS、Serverless HDFS 這一塊其實在去年、前年已有發佈，但是今年我們做了更多的嘗試努力，我們希望把 EMR 上面主流的大數據計算引擎、存儲引擎、開發平台、元數據管理全都 Serverless 化，只有這樣方才能夠更好地滿足雲原生用户更好地利用大數據。Serverless Spark，更好地解決了湖倉場景下 Data ETL 的處理能力，Serverless StrarRocks 更好地解決了湖倉場景下 Data analytic 能力，Serverless HDFS 更好解決了湖倉場景下數據存儲能力，最後 EMR Stutio 幫助用户線下可以平遷體驗上雲，讓用户能夠更好使用雲上大數據基礎設施，同時還能免運維。所以 EMR 今年從計算，到存儲，到開發環境&nbsp;幾乎全部實現了 EMR 主力引擎和平台都能夠做到 Serverless 化，我們希望能夠把整個大數據開發運維閉環，從而進一步幫助雲原生上的開發者更好地把大數據用起來。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e0e494088f0e316e87a203fb7a7b147a1c7.png" alt="" referrerpolicy="no-referrer"></p><p>下面仍然回到 EMR 主力場景， EMR 通用版，圍繞湖倉場景做了大量更新。EMR 主力場景仍然圍繞着湖倉處理，圍繞在湖倉計算、存儲、運維、開發做了大量的更新。在計算層面，我們核心還是降本提效，IaaS 層適配了新的倚天 CPU，PaaS 層做了 Native Spark RunTime，這些都是從 IaaS 層和 PaaS 層更好地幫助用户降本提效。存儲部分，Serverless HDFS (同時也稱之為 OSS-HDFS)&nbsp;很早已有發佈，但是在這一年希望讓 Serverless HDFS 和&nbsp;本地 HDFS 在使用層面給用户體驗完全一致，包括&nbsp;在&nbsp;文件性能、數據訪問、源數據獲取等方案&nbsp;做到幾乎完全一致。為上述目標，我們因此做了大量有關係統性能優化&nbsp;以及&nbsp;系統安全性優化。我們的 Open 文件性能的提升、DU 訪問源數據的提升，這些都是今年的成果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-00bfea3732092d7e26b3743ad341b1f080a.png" alt="" referrerpolicy="no-referrer"></p><p>EMR 運維，這主要體現在兩個方面。在雲上來説 EMR 能結合到雲原生上面給用户創造比較大的平台價值就在於彈性，今年我們做到大量的彈性優化。我們大量客户給我們反饋説 EMR 的平台彈性越來越穩定；另外一個運維重點，即 EMR Doctor，我們希望通過 AI 的方式、自動化、智能化的運維平台方式幫助用户去解決開源大數據運維的問題。從社區開源大數據用户反饋來看，開源大數據使用最大的、最痛的點就是系統運維。如何長期有效地保證我們的業務在雲上健康地運行，這是很多用户上雲和雲下使用開源大數據非常大的痛點，EMR Doctor 就是解決這個問題。EMR 開發，即 EMR Studio，我們希望雲原生 Serverless 化託管了我們的開發平台、調度平台，幫助用户從線下的體驗完全平遷到雲上的一套體驗。以上均是 EMR 圍繞湖倉場景的重大更新。</p><p>最後仍然回到 EMR For AI，我們每個產品都在擁抱積極的變化，這裏分為三部分：EMR DataScience、EMR Doctor、EMR+DataWorks 的 Code Pilot。EMR DataScience 是在 EMR 的容器版裏面，我們提供了一個新的集羣叫 EMR DataScience，裏面內置了不少 AI 最流行的組件，包括 Pytorch、TF。我們希望用户在一個平台上既能夠處理大數據，同時還能夠雲原生地處理 AI 的工具，這是 EMR DataScience 幫助用户做的相關工作。EMR Doctor，這個工作前面提到希望用 AI 化、智能化的方式幫助用户實現 AIOps，能夠用自動化的手段定位問題、診斷問題、及早發現問題。EMR+Dataworks，今年 DataWorks 重磅的發佈就是 code pilot 的發佈，但是那上面作為一個平台實際上底下也對接了 EMR 等等，正好實際上 code pilot 也是平台引擎無關的 Feature，可以生成 EMR 裏面的 HIVE 代碼，用户就可以用 DataWorks 上面開發平台能夠通過自然語言生成 MaxCompute 的 SQL，能夠操作業務，這樣能夠極大地減少用户開發代碼的成本，這在 DataWorks 對外提供公測的時候歡迎去試用一下。</p><h2>Flink Streaming Lakehouse：新一代的流式湖倉新方案</h2><p>下面我們看一下 Flink Streaming Lakehouse。Lakehouse 這個概念其實在前幾年很火，原因就是對於一個 Lakehouse 的系統來説，既兼具了 Data Warehouse 的嚴謹，包括 ACID、版本的管理、數據格式的校驗等等；同時它還有 Data Lake 的靈活性，能夠放很多大量非結構化的文本，包括圖片、視頻、音頻、圖像等等。而 Lakehouse 同時能夠承載結構化的數據和非結構化的數據，這對用户來説是非常好的 AI 和大數據融合的底層存儲方案。但是我們看 Lakehouse 的過程中發現 Lakehouse 在時效性方面有非常大的問題，Flink 核心使命和價值就在幫助我們的客户解決大數據實時化轉型和升級。所以 Flink 社區&nbsp;和&nbsp;我們&nbsp;一起發佈了 Streaming Lakehouse 方案。</p><p><img src="https://oscimg.oschina.net/oscnet/up-37eae0cedf4dbaf6356c5188b319f6e8a02.png" alt="" referrerpolicy="no-referrer"></p><p>回到 Streaming Lakehouse 我主要從產品方向&nbsp;講三個場景要點。前面已經提到 Lakehouse 在 AI 時代下 Lakehouse 的方案會越來越重要，因為它既能存儲結構化的數據又能存儲非階段的數據，這個是大數據和 AI 一體化存儲的重要承載點。但是 Lakehouse 在實踐的過程中仍然遇到時效性的問題，整個 Lakehouse 的 Data Pipeline 串聯起來可能達到小時級別的延遲，從最開始的數據進入到數據價值的發揮，比如 BI、AI，能夠看到整個數據鏈路到小時級別，這其實對於用户來説要構建一個實時湖倉面臨很大的延遲。所以 Flink 希望一起幫助用户做到 Lakehouse 的實時化，通過流式、實時幫助用户做很大的提升。</p><p>最後是 Unified，其實 Flink 社區在前幾年一直主打 Unified Batch &amp; Streaming。我們希望在計算層面做到融合，就是流批一體。我們在開源社區推廣流批一體的方案時，發現如果用户只是計算層面的融合對於用户只能解決一半的問題。還有一半問題在於存儲，存儲仍然是兩套的存儲方案，兩套存儲和兩套數據因此會導致的離線和實時的數據不一致性對於用户來説是非常大的問題，所以 Flink 團隊和社區一起構建了 Paimon。Paimon 基於底層的分佈式文件系統，比如説 OSS 會構建一個 Unified 的 storage，既可以做流，也可以做批，我們稱之為批流一體的存儲。所以 Flink+Paimon 構成 Lakehouse 的方案，既具備 Unified 的 process，也可以具備 Unified 的 Storage，這一層合併在一起能夠真正完整地幫助用户實現流批一體的解決方案。這是我們 Streaming Lakehouse 的價值點，最終我們希望幫助用户在 Data+AI 時代下提供實時化、流式化和 Serverless 化的湖倉方案。</p><p>回到 Flink 主線，我們一直以來的使命就是希望幫助用户做到大數據的升級和轉型，所以追求實時場景下的性價比一直是 Flink 團隊一直以來努力的方向。追求實時化的性價比今年有兩個重要的點，一個是 Flink 全面擁抱了倚天，結合到倚天&nbsp;整個實時計算 Flink 綜合的性價比有 50% 的提升，這是 Flink 團隊結合 IaaS 層面做了大量優化。同時在 PaaS 層 Flink 企業級內核&nbsp;我們仍然在做大量優化，這其中包括算子的優化，以及未來我們會公佈 native runtime 的優化。這部分優化相比於開源 Flink 引擎，我們實時計算 Flink 版&nbsp;會有兩倍的提升，特別是在吞吐部分可以解決很多用户高吞吐量或者大流量的實時計算場景。</p><p><img src="https://oscimg.oschina.net/oscnet/up-93711ed92a4488a619f2f0cfa9e51e70d03.png" alt="" referrerpolicy="no-referrer"></p><h2>Elasticsearch:Serverless 和 Search for Data &amp; AI</h2><p>接下來講一下 Elasticsearch，這也是開源大數據很重要的組成部分。説到 Elasticsearch 可能大家更多仍然停留在比較早期 for data 的 search，就是全文的檢索，類似於搜索引擎要做全文的檢索。但今天我想告訴大家這個思想需要刷新一下，Elasticsearch 不僅是 for data 的 search，也是 for AI 的 search。我今天給大家重點會講一下 ES 如何從 Data 轉變成 Data+AI 的 search 系統。</p><p>第一個是我們的 Elasticsearch 的版本發佈。坦白地説，當前產品形態，即 ES on PaaS 的獨立集羣版本已經非常好地滿足我們中國公有云和專有云客户很多的市場需求，不少中大型公司都非常認可阿里雲的 ES 產品形態，產品客户受眾無論在基數以及未來增長都很不錯。但實際上隨着最近這一兩年客户在降本提效上提上了日程之後，發現有一批非常大的潛在客户以及中長尾的客户其實仍然對雲上的獨立集羣版本所帶來的成本仍然認為是比較大的上雲入門門檻。他們非常希望以低門檻甚至零門檻的方式開啓雲上的 ES，這就是我們 ES Serverless 要做的初衷，我們希望以一個零門檻的方式能夠幫助用户開啓雲上 Elasticsearch 的使用。</p><p><img src="https://oscimg.oschina.net/oscnet/up-dda1df3c99a6593d14261aabceb742084c0.png" alt="" referrerpolicy="no-referrer"></p><p>同時 Elasticsearch Serverless 也是我們國內首家支持通用場景的 ES 版本。去年我們也發佈了一個 Elasticsearch Serverless 版本，但更多解決日誌 ELK 場景的需求。但是該版本在數據一致性上會存在問題，所以今年我們進行大量的產品技術架構重構。本次 ES Serverless 的發佈是一個面向通用場景的升級發佈，這裏面不僅支持包括日誌場景，還支持訂單、金融等等場景，這裏面的數據一致性都可以得到很好的保障。這是我們今年發佈相比於去年發佈升級很不一樣的點。針對 ES Serverless 可以真正按量付費、秒級彈性、簡單運維，同時可以完全兼容開源的 ES，這是很多其他的廠商不一定能做到的。</p><p>下面重點強調 ES for AI 和 Data 的部分，標誌着 ES 真正從 Data 面向 Data&amp;AI 的搜索引擎。雲棲會場外面有很大的廣告欄，主打的是 ESRE 的發佈，這是 ES 公司重大的發佈。發佈的核心簡單跟大家説一下，就是支持 AI 相關檢索，包括向量檢索，包括多路並規的查詢優化，這些東西都是在 ES 內核重點打的點，幫助用户做 AI 檢索。阿里雲 ES 圍繞着 ES 最新的 AI 能力進行了大量方案集成，就是右邊的增強方案。我們跟達摩院 AI 方案做聯合，和 PAI—EAS 方案聯合，甚至會和社區一起做更多的聯合方案，這些方案能夠幫助我們的用户更好地在雲上用上阿里雲、達摩院 AI 的技術，和社區的 ES 更好地結合起來。所以我們希望通過 ES8.9 這個版本能夠幫助用户構建下一代面向 Data+AI 的檢索系統。</p><p><img src="https://oscimg.oschina.net/oscnet/up-47305474e3702aae7f01185fc4b3c7a7d65.png" alt="" referrerpolicy="no-referrer"></p><p>圍繞 ES 自研能力的升級，阿里雲 ES 是和 ES 公司一起合作，也是基於開源的 ES 做更多的優化孵化，其實是完全基於開源，也是完全兼容開源的，我們做了大量的增強。而這裏面做了三個升級，包括場景的升級，也就是日誌場景向通用場景的升級和改造。去年 ES 更多是做日誌場景、ELK 場景，今年的 ES Serverless 面向通用場景進行完全開放。另外就是有關搜索內核引擎的優化，包括讀寫分離、存算分離，這些更好地解決集羣穩定性問題、成本流控問題、資源彈性的問題。最後我們在購買鏈路和相關控制枱上做了比較大的體驗升級，我們非常推薦大家去用一用阿里雲 ES Serverless 版本，感受一下完全 Serverless 化的 ES。</p><h2>Milvus：AI 時代的搜索引擎</h2><p>今天最後一個，也是今年完全新的產品。前面全部是我們現有的功能、現有產品線的疊加，Milvus 這部分是我們今年要發佈的 AI 時代新的搜索引擎。目前，在向量檢索部分 Milvus 幾乎是全球最火、最亮眼的技術。我們會在 12 月份開啓向量檢索 Milvus 版本對外測試，相比於開源的 Milvus 來説會做相應產品企業級的增強。同時在兼容開源的 Milvus 之上，我們還會去結合達摩院的技術能夠提供更好的企業級向量檢索能力。同時在雲上肯定會做大量的產品聯合工作，包括和我們的存儲上有大量非結構化的數據可供用户檢索查詢。同時我們會跟 PAI 平台、達摩院 AI 模型做更多的深度集成，做 AI 向量檢索能力、做大模型向量支撐，這些方案未來都會在我們的產品之上構建。所以我們最終是希望能夠幫助雲上使用 Milvus 的用户更快、更方便、更低門檻構建 AI 時代下的搜索系統。</p><p><img src="https://oscimg.oschina.net/oscnet/up-684d85b432854ecd04eafd9cad2a5a50df8.png" alt="" referrerpolicy="no-referrer"></p><p>回顧一下我們講了大數據的三個趨勢。Cloud Native，整個 IT 投資都在往雲上加速轉型。Serverless 化，我們認為未來的 PaaS 平台最終全部都會歸到 Serverless 化，所有 AI 產品、大數據產品和其他 PaaS 產品都會歸到 Serverless 化。最後是 Data+AI，未來 AI 和大數據會做徹底的融合打通，這也是我們整個開源大數據一直以來在積極圍繞這三個點做佈局。</p><p>最後希望大家多多關注阿里雲，關注阿里雲的開源大數據，謝謝大家！</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5583868/blog/10149103</guid>
            <link>https://my.oschina.net/u/5583868/blog/10149103</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
