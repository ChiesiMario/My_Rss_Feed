<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 20 Feb 2024 13:54:24 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[中國大模型賽道最大單筆融資，月之暗面獲超 10 億美金融資]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>AI 初創公司月之暗面（Moonshot AI）最近完成了一輪超過 10 億美金的融資，投資方包括紅杉中國、小紅書、美團和阿里，老股東也進行了跟投。這一輪融資使月之暗面的估值達到了約 25 億美金，成為國內大模型領域的頭部企業之一。這是自從 ChatGPT 引發全球熱潮以來國內 AI 大模型公司獲得的單輪最大金額融資。</p><p>月之暗面的上一輪融資為 2023 年獲得的超 2 億美金融資，投資方包括紅杉中國、真格基金等。</p><p>月之暗面成立於 2023 年 3 月，迅速成為大模型領域的重要參與者。其核心團隊成員曾參與 Google Gemini、Google Bard、盤古 NLP 和悟道等多個大模型項目的研發工作，擁有多年大模型研究和開發經驗。目前，公司團隊規模已超過 80 人。</p><p>根據官方介紹，Moonshot AI 是下一代跨模態大模型研發商，致力於研發下一代跨模態大模型。目前發明瞭 RoPE 相對位置編碼，是 Meta LLaMa 和 Google PALM 等大多數主流模型的重要組成部分；發明瞭 group normalization，是 Stable Diffusion 等 AI 模型成功的關鍵組件。</p><p>公司創始人楊植麟是 90 後學霸，畢業於清華大學計算機系，師從唐傑教授，之後獲得卡內基梅隆大學計算機博士學位，師從蘋果公司現任 AI 負責人、深度學習奠基人之一 Ruslan Salakhutdinov，曾在 Facebook AI Research， Google Brain 從事自然語言處理研究，獲 DREAM9 全球癌症預測大賽第一名，阿里巴巴天池大數據競賽全球第二名，2017 Nvidia 先鋒研究獎。於 ICLR、NIPS、ICML、KDD、ACL 等頂級 AI 會議發表論文二十餘篇；在所有六個主流語言建模數據集保持世界第一名（State-of-the-art）。</p><p>2023 年 6 月，科技媒體 The Information 將楊植麟列為 「中國 OpenAI」 的五大候選人之一，表明了他在業界得到了高度認可，其餘四位為 MiniMax、智譜 AI、光年之外以及瀾舟科技。</p><p>自成立以來，月之暗面在短短不到一年的時間裏，已經完成了從通用大模型到上層應用的全面佈局。公司已經訓練了千億級別的自研通用大模型，並在 2023 年 10 月推出了面向 C 端的 Kimi 智能助手，這是公司首次嘗試 To C 超級應用。</p><p>Kimi 智能助手支持 20 萬漢字的長文本輸入，主打無損記憶。「長文本（Long Context）」 是月之暗面當前主打的技術之一，這來源於團隊希望突破大模型的落地瓶頸 —— 大模型的智慧之所以能 「湧現」，主要是因為通過擴大參數規模，突破到了千億級別。</p><p>11 月，公司宣佈其 Kimi Chat 聊天機器人面向全社會開放服務，用户可通過官網體驗。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkimi.moonshot.cn%2F" target="_blank">https://kimi.moonshot.cn/</a></p><p><img height="261" src="https://oscimg.oschina.net/oscnet/up-e5902a7ff6a62c3a72f9c3ed663ad23e4ed.png" width="500" referrerpolicy="no-referrer"></p><p>楊植麟認為，在 B2C 領域，AI Native 將開闢新的流量渠道，它們有望成為 AI 時代的 Super App，帶來巨大的商機。</p><p>據悉，月之暗面正在研發通用多模態模型，並預計在今年內推出，多模態模型是近期大模型創業公司的核心競爭點。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 10:31:27 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279462</guid>
            <link>https://www.oschina.net/news/279462</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鴻禕迴應 2024 年 AI 行業十大預言，現已實現四個]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>中國企業家雜誌獨家對話了知名企業家、360 集團董事長周鴻禕，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1193725273%2FO1t4r21L4" target="_blank">共同探討</a></u>了近期備受矚目的 AI 技術 Sora 所帶來的重大影響。在被問及如何看待年初提出的 AI 十大預言時，周鴻禕興奮地表示，目前已經有四個預言得以實現，分別是<strong>開源大模型爆發、大模型運行在終端、文生圖和文生視頻取得突破性進展、多模態成為大模型標配</strong>。周鴻禕認為，特別是 Sora 的出現讓他感到很意外，發展得很快。</p><p>附周鴻禕此前提出的 AI 十大預言：</p><ol><li>大模型無處不在，成為數字系統標配；</li><li><strong>開源大模型爆發；</strong></li><li><strong>"小模型"湧現，運行在更多終端；</strong></li><li>大模型企業級市場崛起，向產業化、垂直化方向發展；</li><li>Agent 智能體激發大模型潛能，成為超級生產力工具；</li><li>2024 年是大模型應用場景之年，To C 出現殺手級應用；</li><li><strong>多模態成為大模型標配；</strong></li><li><strong>文生圖、文生視頻等 AIGC 功能突破性增長；</strong></li><li>具身智能賦能人形機器人產業蓬勃發展；</li><li>大模型推動基礎科學取得突破。</li></ol><hr><p>周鴻禕前幾天在微博<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1708942053%2FO0Sivblel" target="_blank">發表</a></u>了對 Sora 的看法，他認為 Sora 的誕生意味着 AGI（通用人工智能）實現可能從 10 年縮短至一兩年。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9cbd9c40a32b414d55590e86ad84c498a87.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 08:16:08 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279421</guid>
            <link>https://www.oschina.net/news/279421</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[字節跳動推出中文版「Sora」？迴應來了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">近日，市場有消息稱，在 Sora 引爆文生視頻賽道之前，國內的字節跳動也推出了一款新型視頻模型 Boximator，與 Gen-2、Pink1.0 等既有模型相比，Boximator 的獨特之處在於，它能夠通過文本輸入精確地控制視頻中人物或物體的運動。</span></p><p><span style="color:#000000">2 月 20 日，字節跳動相關人士迴應稱，Boximator 是視頻生成領域控制對象運動的技術方法研究項目，目前還無法作為完善的產品落地，距離國外領先的視頻生成模型在畫面質量、保真率、視頻時長等方面還有很大差距。</span></p><p><span style="color:#333333">Sora 是 OpenAI 於日前發佈的首個視頻生成模型。可根據文本描述生成長達 60 秒的視頻，其中包含精細複雜的場景、生動的角色表情以及複雜的鏡頭運動。OpenAI 在技術報告介紹道，</span><strong style="color:#333333">他們將 Sora 視頻生成模型視作世界模擬器</strong><span style="color:#333333">。具體來説就是通過跨越不同持續時間、寬高比和分辨率的視頻和圖像，從而生成最高可達一分鐘的高清視頻。</span></p><p><img height="274" src="https://oscimg.oschina.net/oscnet/up-80cdbef18c0af0f443e5c577f0b8b7d9f0d.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Sora 使用了一種特殊的深度學習模型（即 Transformer）來處理視頻和圖像數據。這種處理方式首先將視頻和圖像編碼成潛在代碼，然後將這些代碼分解成包含時間和空間信息的小塊（即時空補丁），最後利用 Transformer 模型在這些補丁上進行操作。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">這樣的處理方法能夠有效地捕捉和生成視頻和圖像數據中的複雜時空動態，為生成高質量的視頻和圖像提供了一種強大的方法。</p><p><strong>相關閲讀：</strong></p><ul><li><a href="https://www.oschina.net/news/278821/openai-text-to-video-sora" target="_blank">OpenAI 發佈文本生成視頻模型 Sora</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 08:00:14 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279411</guid>
            <link>https://www.oschina.net/news/279411</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Dart 3.3 發佈：擴展類型、JavaScript Interop 等]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Dart 3.3 現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2Fdartlang%2Fdart-3-3-325bf2bf6c13" target="_blank">發佈</a>，公告稱此版本改變了性能和跨平台開發的遊戲規則。</p><p>增強的擴展類型（Extension Types）將徹底改變性能優化以及用户與本地代碼的交互方式。JavaScript interop 模型也得到了改進，引入了強大的類型安全性和開發人員友好的方式來利用 Web 平台的強大功能。「<strong>所有這些都為 WebAssembly 支持鋪平了道路</strong>」。此外，新版本還增加了 Google AI 功能。</p><p><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-3949a01f3c180246795018315421f62eccc.webp" width="300" referrerpolicy="no-referrer"></p><h4><strong>擴展類型</strong></h4><p>擴展類型引入了類型的零成本 wrappers，使用它們可以優化對性能敏感的代碼，尤其是在與 host&nbsp;平台交互時，擴展類型提供了具有特定成員自定義類型的便利性，同時消除了典型的 wrappers 分配開銷。</p><pre><span style="color:#aa0d91">extension</span> type Wrapper(<span style="color:#5c2699">int</span> i) {
  <span style="color:#aa0d91">void</span> showValue() {
    <span style="color:#5c2699">print</span>(<span style="color:#c41a16">'my value is <span style="color:#000000">$i</span>'</span>);
  }
}

<span style="color:#aa0d91">void</span> main() {
  <span style="color:#aa0d91">final</span> wrapper = Wrapper(<span style="color:#1c00cf">42</span>);
  wrapper.showValue(); <span style="color:#007400">// Prints 'my value is 42'</span>
}</pre><p style="color:#242424; margin-left:0; margin-right:0; text-align:start">以上示例<span style="color:#2b2b2b">實現了一個&nbsp;</span><strong><code>Wrapper</code></strong><span style="color:#2b2b2b">&nbsp;擴展類型，但將其用作普通的 Dart 類型，在實際使用裏，開發者可以實例化它並調用函數。主要區別在於 Dart 將其編譯為普通 Dart&nbsp;</span><strong><code>int</code></strong><span style="color:#2b2b2b">&nbsp;類型，擴展類型允許</span><span style="color:#000000">創建具有唯一的成員類型，而無需分配典型 wrappers 類型的間接成本。因此，雖然&nbsp;&nbsp;extension members&nbsp;功能（Dart 2.7 開始）允許向現有類型添加函數和屬性，但擴展類型功能也可以執行相同的操作，並且還允許定義隱藏底層表示的新 API。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">這對於與 host&nbsp;平台的交互特別有用。可以直接使用 Native types，無需創建 wrappers&nbsp;和相關的間接成本，同時還能提供簡潔的 Dart API。有關擴展類型的更多信息，可參閲<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdart.dev%2Flanguage%2Fextension-types" target="_blank">新文檔</a>。</span></p><h4><strong>不斷髮展的 JavaScript Interop</strong></h4><p>Dart 3.3 引入了一種與 JavaScript 庫和 Web 互操作的新模型。它從一組用於與 JavaScript 交互的新 API 開始：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi.dart.dev%2Fdart-js_interop%2Fdart-js_interop-library.html" target="_blank">dart:js_interop</a>&nbsp;庫。現在，Dart 開發人員可以訪問&nbsp;typed API 來與 JavaScript 交互。該 API 通過靜態強制明確定義了兩種語言之間的邊界。這在編譯之前消除了一整類問題。除了用於訪問 JavaScript 代碼的新 API 之外，Dart 現在還包含一個新模型，用於使用擴展類型在 Dart 中表示 JavaScript 類型。</p><pre><span style="color:#aa0d91">import</span><span style="color:#c41a16">'dart:js_interop'</span>;

<span style="color:#007400">/// Represents the `console` browser API.</span><span style="color:#aa0d91">extension</span> type MyConsole(JSObject _) <span style="color:#aa0d91">implements</span> JSObject {
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> log(JSAny? value);
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> debug(JSAny? value);
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> info(JSAny? value);
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> warn(JSAny? value);
}</pre><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">基於 extension types 的語法比 extension members 允許更多的表達和健全性。這簡化了 Dart 中 JavaScript API 的利用。瞭解更多信息，可參閲<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdart.dev%2Finterop%2Fjs-interop" target="_blank">有關 JS interop 的新文檔</a>。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong>改進 browser libraries</strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">從 1.0 版本開始，Dart SDK 就包含了一套全面的 browser libraries。其中包括核心&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi.dart.dev%2Fdart-html%2Fdart-html-library.html" target="_blank">dart:html</a>&nbsp;庫以及 SVG、WebGL 等庫。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">改進的 JavaScript interop 模型提供了重新構想這些庫的機會。</span><span style="color:#2b2b2b">未來 browser libraries&nbsp;</span><span style="color:#242424">支持將集中在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpub.dev%2Fpackages%2Fweb" target="_blank">package:web</a>&nbsp;上。這簡化了版本控制、加速了更新並與&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2F" target="_blank">MDN</a>&nbsp;資源保持一致。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">且這一系列的改進導將推動：將 Dart 編譯為&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwebassembly.org%2F" target="_blank">WebAssembly</a>。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#242424">開啓 WebAssembly 的未來</span></strong></h4><p style="margin-left:0px; margin-right:0px; text-align:start">Dart 3.3 為 WebAssembly 的 Web 應用奠定基礎，雖然 Flutter Web 中的 WebAssembly 支持仍處於試驗階段，<span style="color:#242424">但團隊正在努力穩定實現。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start">要使用 WebAssembly 在 Web 上運行 Flutter 應用，需要使用新的 JavaScript Interop 機制和&nbsp;<code>package:web</code>&nbsp;，舊版 JavaScript 和 browser libraries 保持不變，並支持編譯為 JavaScript 代碼。但是，編譯為 WebAssembly 需要遷移。詳情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdart.dev%2Fgo%2Fpackage-web" target="_blank">遷移指南</a>。</p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#242424">Google AI Dart SDK</span></strong></h4><p style="margin-left:0px; margin-right:0px; text-align:start">谷歌發佈了 Google AI Dart SDK 測試版。用户可以將生成式 AI 功能構建到 Dart 或 Flutter 應用程序中。這些應用程序使用了谷歌最新的 AI 模型系列 Gemini。可查看軟件包&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpub.dev%2Fpackages%2Fgoogle_generative_ai" target="_blank">google_generative_ai</a>。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="130" src="https://oscimg.oschina.net/oscnet/up-904498ac3cf1c5073e4d35bfc96bb71743c.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2Fdartlang%2Fdart-3-3-325bf2bf6c13" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 06:48:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279389/dart-3-3-released</guid>
            <link>https://www.oschina.net/news/279389/dart-3-3-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源日報：目前還沒有「大模型版 Linux」；nginx 核心開發者創建新分支]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。</p><h3><span style="color:#e67e22"><strong># 2024.2.19</strong></span></h3><h2><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日要點</span></span></span></span></span></span></h2><p style="text-align:justify"><strong>OpenSource Daily</strong></p><h3><u><a href="https://www.oschina.net/news/278819/nginx-forked-freenginx" target="_blank">核心 Nginx 開發者創建新分支 Freenginx</a></u></h3><p>作為 Nginx Web 服務器的長期核心開發人員之一，Maxim Dounin 宣佈創建該項目的一個新分支，名為 Freenginx。</p><p>Maxim Dounin 決定分叉 Nginx 是因為與 F5 發生了分歧，F5 於 2019 年收購了 Nginx 公司。Dounin 在宣佈 Freenginx 時表示將不再參與由 F5 負責的 nginx 開發。取而代之的是啓動另一個項目，由開發人員而非公司實體來運營。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3488ed2ae05fcc308c3b208aa3bfbebd210.png" referrerpolicy="no-referrer"></p><h3><u><a href="https://www.oschina.net/news/279147/magika-ai-powered-type-identification" target="_blank">谷歌開源 Magika —— AI 驅動的文件類型檢測工具</a></u></h3><p>谷歌開源了由 AI 驅動的文件內容類型識別工具，聲稱能夠在毫秒級內精確識別超過 100 種不同文件類型，無論是二進制文件還是文本文件。Magika 是基於深度學習技術的文件類型識別系統，用於準確檢測二進制和文本文件類型。在底層，Magika 採用定製的、高度優化的深度學習模型，即使在 CPU 上運行，也能在幾毫秒內實現精確的文件識別。</p><p>在谷歌內部，Magika 被用於提升用户安全，幫助對 Gmail、Drive 和安全瀏覽中的文件進行安全檢查和內容策略掃描。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5f0a4182522f53b7a69907f3cff050925ff.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日觀察</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-c204357960927dcfcfa94bea7bede0ce869.png" referrerpolicy="no-referrer"></p><blockquote><p>很多人看着各種大模型開源了之後就覺着下個開源時代來了，我認為目前的大模型跟開源社區的最終發展結果是相悖的。早期開源運動興起時，個人主機和廉價冗餘服務器逐漸普及，軟件的核心是代碼，開放代碼之後，所有人都可以在此基礎上進行修改、部署和分發；而目前的大模型則依賴於數據和算力，集市模式的開源社區很難具備兩個條件。</p><p>因此，目前的大模型開源運動更像是幾個巨型公司找了社區這麼個的外包組織，雖然大家乾的都很紅火，但能提供模型本身的依然只有幾個公司，能提供模型服務的，也都是商業公司，而不是開發者或者終端用户。最終當大模型的生態平穩之後，社區很難直接擁有大模型的關鍵技術。<br><br> - 微博 <em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1809500942%2FO14ohCDQJ" target="_blank">&nbsp;axb 的自我修養</a></u></em></p></blockquote><blockquote><p>「套殼」只是中國大模型產業現狀的冰山一角，這背後折射出產業發展的五個問題，它們之間互為因果，每個問題都無法獨立解決。</p><ul><li>模型：原創、拼裝還是套殼？</li><li>算力：卡脖子還是不想買？</li><li>數據：低質數據怎麼解決？</li><li>資本：只有資本短視嗎？</li><li>商業化：誰是合適的買單人。</li></ul><p>- 財經十一人 <em>《<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405002841407488086" target="_blank"><strong>中國大模型產業的五個真問題</strong></a></u>》</em></p></blockquote><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日推薦</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-5064f005dfe68164213affe8f74aeffb692.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">開源之聲</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-b13ece2ded33000fc7c2b96deef4a7c0df2.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">每日項目榜</span></span></span></span></span></span></strong></h2><p>Gitee 榜單：</p><p><img src="https://oscimg.oschina.net/oscnet/up-e5c538c2846376405aef6d023e59a916f2f.png" referrerpolicy="no-referrer"></p><blockquote><h4><span style="background-color:#e67e22">在線閲讀完整日報內容，訪問：</span><br><em><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC011%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">開源日報第 011 期：目前還沒有「大模型版 Linux」</a></u></em></h4></blockquote><hr><p><strong>往期回顧</strong></p><ul><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">開源日報第 010 期：Tauri v2 支持 Android 和 iOS，跨平台開發新選擇</a></u></li><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf" target="_blank">開源日報第 009 期：Vue.js 誕生 10 週年；扎克伯格解釋 Meta 為什麼要開源其 AI 技術</a></u></li><li><u><a href="https://www.oschina.net/news/277585" target="_blank">開源日報第 008 期：推動中國開源軟硬件發展的經驗與建議</a></u></li><li><u><a href="https://www.oschina.net/news/277415">開源日報第 007 期：「Linux 中國」 開源社區宣佈停止運營</a></u></li><li><u><a href="https://www.oschina.net/news/277214" target="_blank">開源日報第 006 期：選擇技術棧一定要選擇開源的</a></u></li><li><a href="http://www.oschina.net/news/277040"><u>開源日報第 005 期：RISC-V 萬兆開源交換機發售；npm 存在大量武林外傳視頻</u></a></li><li><u><a href="https://www.oschina.net/news/276864" target="news">開源日報第 004 期：百度輸入法在候選詞區域植入廣告；大神用 Excel 構建 CPU</a></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 03:44:19 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279351</guid>
            <link>https://www.oschina.net/news/279351</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Steam Audio SDK 完整源代碼現已開源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Steam 社區<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsteamcommunity.com%2Fgames%2F596420%2Fannouncements%2Fdetail%2F7745698166044243233" target="_blank">公告稱</a>，隨着 Steam Audio 最新版本（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FValveSoftware%2Fsteam-audio%2Freleases%2Ftag%2Fv4.5.2" target="_blank">v4.5.2</a>）的發佈，Steam Audio SDK 的完整源代碼現已開源。這是 Steam Audio SDK 源代碼的第一個開源版本。</span></p><p><span style="color:#000000">「通過此版本，我們的目標是為開發人員提供更多的控制權，從而為用户帶來更好的體驗，並希望為使用 Steam Audio 的更廣泛的開發者社區做出有價值的貢獻。」</span></p><p><span style="color:#000000">整個 Steam Audio 代碼庫，包括 SDK 和所有插件，現已在 Apache 2.0 許可證下發布。開發人員可以在商業產品中使用 Steam Audio，並根據自己的許可條款修改或重新分發它，而無需包含源代碼。</span></p><p><span style="color:#000000"><img alt="" height="270" src="https://oscimg.oschina.net/oscnet/up-05ddfd635cb1684b81ccf53468f07d2f90f.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">官方表示，在獲取了大量來自社區提供的對開源插件（Unity、Unreal 和 FMOD Studio）的有價值的反饋和貢獻之後，他們決定做出這一開源舉措，以希望將同樣的優勢帶到核心 SDK 中。此舉將使得開發人員能夠根據自己的需求定製 SDK，併為使用該技術的每個人提供更好的體驗。</span></p><blockquote><p><span style="color:#000000">我們所從事的功能的選擇通常是由內部項目的需求驅動的。例如，在開發 Half-Life 期間，我們花了大量時間開發混合混響和路徑功能，並將其作為 Steam Audio 4.0.0 的一部分發布。</span></p><p><span style="color:#000000">但這些優先事項可能並不總是與合作伙伴的優先事項一致，因此我們希望消除阻礙合作伙伴實施需要訪問核心 Steam Audio SDK 的空間音頻功能的障礙。例如，我們可能正在修復 Steam Audio 中影響內部項目的性能問題，但合作伙伴可能需要將 Steam Audio 移植到控制枱平台。</span></p><p><span style="color:#000000">將整個 SDK 作為開源提供給合作伙伴，可以讓他們自己管理移植工作，並根據自己的需要進行優化，同時還允許他們在需要時將自己的修改意見反饋回來。</span></p></blockquote><p><span style="color:#000000">接下來，項目團隊還將繼續對 Steam Audio 進行持續改進，包括髮布錯誤修復和新功能。&nbsp;</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 03:19:34 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279335/steam-audio-sdk-opensource</guid>
            <link>https://www.oschina.net/news/279335/steam-audio-sdk-opensource</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 內核成為 CVE 編號機構 (CNA)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linux 內核已被接受為 CVE 編號機構 (CNA)，這意味着他們將直接管理內核的 CVE。Linus Torvalds 近日在郵件列表<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3Dwi8vZD7EXZfob-yhfDERyfzWxzMOzG9FsOuaKU-v6%2BPHA%40mail.gmail.com%2FT%2F%23u" target="_blank">發佈</a></u>了 Linux 6.8-rc5，並介紹稱文檔添加了 CVE 漏洞處理相關的指南。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7db09f50c2a2dac5a652d9899693a817661.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgit.kernel.org%2Fpub%2Fscm%2Flinux%2Fkernel%2Fgit%2Ftorvalds%2Flinux.git%2Fdiff%2FDocumentation%2Fprocess%2Fcve.rst%3Fid%3D5928d411557ec5d53832cdd39fc443704a3e5b77" target="_blank">CVE 文檔頁面</a></u></em></p></blockquote><p>文檔寫道，Linux 內核開發團隊有能力為潛在的內核安全問題分配 CVE，而分配的 CVE 編號將在 linux-cve-announce 郵件列表上公佈，<strong>修復的安全漏洞才會分配 CVE 編號，未修復的不會自動分配編號</strong>。</p><blockquote><p><img height="1156" src="https://oscimg.oschina.net/oscnet/up-2da79e81f6f9140a562eeb928a92757fe7e.png" width="1400" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flinux-cve-announce%2F" target="_blank">https://lore.kernel.org/linux-cve-announce/</a></u></em></p></blockquote><p>CVE 是通用漏洞披露 (Common Vulnerabilities and Exposures) 的英文縮寫，列出了已公開披露的各種計算機安全缺陷。CVE 識別號由 CVE 編號管理機構&nbsp;(CNA) 分配。</p><p>任何人都可以從任何地方進行 CVE 報告。無論是供應商、研究人員或是個人用户，都有可能發現缺陷，並促使他人予以關注。很多供應商都會提供錯誤報告獎勵，以鼓勵相關人員負責任地披露各種安全問題。</p><p>在 Linux 內核成為 CNA 之前，它無法自行管理內核的 CVE 漏洞編號分配。由於內核是系統的底層，幾乎任何錯誤都可能被用於危害內核安全，但當錯誤被修復時，被利用的可能性通常不明顯。過去 CNA 過於謹慎，幾乎為發現或收到的任何安全漏洞分配了 CVE 編號，導致 Linux 內核團隊需要花費大量時間處理許多未造成重大影響的漏洞。</p><p>因此接下來 Linux 內核中未修復的安全漏洞不會提前分配 CVE 編號，只有在漏洞被修復後才會分配 CVE 編號，這樣可以通過正確的方式來追蹤原始修復的 git commit ID。</p><p>延伸閲讀：<u><em><a href="https://www.oschina.net/news/276167/curl-is-a-cna" target="news">curl 項目已被接受為 CVE 編號機構 (CNA)</a></em></u></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 02:59:34 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279326/linux-kernel-is-a-cna</guid>
            <link>https://www.oschina.net/news/279326/linux-kernel-is-a-cna</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2026 年傳統搜索引擎流量將下降 25%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">市場分析公司 Gartner <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fnewsroom%2Fpress-releases%2F2024-02-19-gartner-predicts-search-engine-volume-will-drop-25-percent-by-2026-due-to-ai-chatbots-and-other-virtual-agents" target="_blank">指出</a>，生成式 AI 已嚴重威脅傳統搜索引擎。預測到 2026 年，傳統搜索引擎的流量將下降 25%，搜索營銷的市場份額將被人工智能聊天機器人和其他虛擬代理所取代。</span></p><p><img height="261" src="https://oscimg.oschina.net/oscnet/up-a7078c146496ef4a1ec0a21edf9088d52e3.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Gartner 副總裁分析師 Alan Antin 稱，有機搜索和付費搜索是科技營銷人員實現認知和需求生成目標的重要渠道。GenAI 解決方案正在成為替代答案引擎，取代以前可能在傳統搜索引擎中執行的用户查詢。隨着 GenAI 越來越深入企業的方方面面，這將迫使企業重新思考其營銷渠道戰略。</span></p><blockquote><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">隨着 GenAI 推動降低內容製作成本，包括關鍵字策略和網站域名權威評分在內的各項活動都將受到影響。搜索引擎算法將進一步重視內容的質量，以抵消人工智能生成內容的數量，因為內容的實用性和質量仍然是有機搜索結果成功的關鍵。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">此外，還將更加重視水印和其他驗證高價值內容的手段。全球各地的政府法規已經開始要求公司對人工智能創建的營銷內容資產承擔責任。這很可能會對搜索引擎如何顯示此類數字內容產生影響。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">公司需要專注於製作對客户和潛在客户有用的獨特內容。內容應繼續展示搜索質量評估者的要素，例如專業知識、經驗、權威性和可信度。</span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 02:26:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279308/gartner-search-engine-2026-ai</guid>
            <link>https://www.oschina.net/news/279308/gartner-search-engine-2026-ai</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Zilliz Cloud 再發新版本：性能提升超 10 倍，AI 應用開發流程再簡化！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Zilliz Cloud 再發新版本！</p><p>本次新版本的主要內容包括：大幅提升的向量搜索性能（性能提升 10 倍以上）、企業級數據安全和無縫數據集成。新版本發佈後，用户無需自定義代碼，便可快速順暢地完成非結構化數據處理和索引。此外，Zilliz Cloud 將有效幫助用户節省成本，簡化支付和採購流程。</p><p>以下為本次發佈的新特性一覽：</p><ul><li><p>Cardinal 搜索引擎</p></li><li><p>Zilliz Cloud 正式升級至 Milvus 2.3 版本</p></li><li><p>基於角色的訪問控制和權限管理（RBAC）</p></li><li><p>Databricks Connector</p></li><li><p>支持 Google Cloud Marketplace 訂閲</p></li><li><p>其他數據安全方面更新</p></li></ul><p><img src="https://assets.zilliz.com/cms-cn/640_2024_02_19_T165818_906_45850c7576.png" alt="" referrerpolicy="no-referrer"></p><h2>01. Cardinal 搜索引擎：搜索速度提升 10 倍，數據容量提升 50%</h2><p>Cardinal 是用現代 C++ 語言和實用的近似最近鄰搜索（ANNS）算法構建的多線程、高效率向量搜索引擎。它同時能夠處理暴搜請求和 ANNS 索引修改請求；處理各種數據格式，包括 FP32、FP16 和 BF16。Cardinal 搜索引擎強調速度和效率，能夠在有限的資源內處理更多用户請求。</p><p>在推動 Cardinal 引擎創新的過程中，我們始終堅持推動異構計算的原則。團隊對算法進行調優，採用了針對計算密集型操作優化的 low-level 內核，並確保支持多種硬件，包括 x86 和 ARM。Cardinal 利用 x86 的 AVX-512 擴展和 ARM 的 NEON 及 SVE 指令集等尖端技術，提供針對高效計算優化的代碼。這些改進保證了 Cardinal 能夠時刻全力運行，是行業內最快的向量搜索引擎。</p><p>有了 Cardinal 搜索引擎的加持，Zilliz Cloud 實現了 10 倍性能提升（與開源 Milvus 相比），能夠實現超快的查詢速度外加高召回率。無論是處理大型數據集還是對快速響應有高要求，Cardinal 都能為此保駕護航，提升用户體驗，提升 AI 應用的競爭力。</p><p>「Zilliz Cloud 的性能給我們留下了深刻的印象，它在數據負載大的情況下尤為出色！」Picdmo 的 CEO 兼創始人 Alex Alexander 稱讚道，「採用 Cardinal 搜索引擎後，Zilliz Cloud 性能比上一個版本提升了 2 倍，搜索查詢的速度和效率更驚人！此外，Zilliz Cloud 還提供增強數據安全保障。得益於 Zilliz Cloud，我們搭建的以圖搜圖應用功能變得更強大了。」</p><h2>02. 開箱即用的 Milvus 2.3：生產就緒的高級向量搜索功能</h2><p>經過為期 4 個月的 Beta 階段後，Zilliz Cloud 正式上線了和 Milvus 2.3 相同的功能。目前，Zilliz Cloud 用户可以在生產環境中使用全新的高級向量搜索和數據管理功能。新版本功能包括：</p><ul><li><p>Cosine 相似度類型： 無需向量歸一化，簡化數據搜索流程。</p></li><li><p>Upsert 數據：提升更新和刪除數據的管理流程效率，適用於頻繁更新數據且追求數據一致性和原子性的場景。</p></li><li><p>範圍搜索（Range Search）: 通過限制查詢向量與其他向量之間的距離，範圍搜索能夠實現對搜索結果的有效細化，適用於搭建推薦引擎的場景。</p></li><li><p>支持 Parquet 文件：提升數據處理能力，支持 Parquet 文件，通過其高效的列式存儲格式，提供更好的查詢性能，適用於具有複雜數據集的場景。</p></li><li><p>支持 Array 數據類型：支持在搜索過程中基於多個屬性進行精確的元數據過濾。在電商領域中，該功能支持根據不同產品標籤進行搜索，為用户返回相關的搜索結果。</p></li></ul><h2>03. RBAC: 對數據訪問進行細粒度的控制</h2><p>Zilliz Cloud 的 RBAC（角色權限訪問控制）功能提供了一種結構化和可擴展的方法來管理數據訪問權限，保障數據安全。在過去的幾個月中，我們新增了多項相關功能，進一步打磨了 Zilliz Cloud 的 RBAC 系統，使其比市面上所有向量數據庫都更加細緻和全面。</p><p>RBAC 分為兩層：控制層和數據層。在控制層，角色管理集羣、項目、用户和計費等資源的操作權限。Zilliz Cloud 在控制層設有 4 種角色，其中組織管理員、項目所有者和項目成員是 3 種常用角色：</p><ul><li><p>組織管理員：擁有組織管理權限，包括管理組織設置、支付方式、賬單、組織 API 密鑰等。此外組織管理員還具備所有組織下資源（如：項目）的管理權限。</p></li><li><p>項目管理員：擁有項目管理權限，包括項目設置、項目內所有集羣、項目 API 密鑰等資源。</p></li><li><p>項目成員：擁有項目讀寫權限，包括讀寫項目下所有集羣、查看項目下所有集羣詳情、管理 Collection 和索引等。</p></li></ul><p>在數據層面，角色權限是指在集羣中添加、刪除、修改和訪問數據的能力。Zilliz Cloud 在數據層級提供了 3 種內置角色：管理員（Admin）、只讀（Read-Only）和讀寫（Read-Write），不同角色對集羣數據的讀寫和管理權限不同。此外，Zilliz Cloud 允許用户創建自定義角色，針對特定 Collection、Partition 或操作分配相應權限，確保數據安全。</p><p>通過 RBAC 功能，企業用户可以實現對數據訪問進行細粒度的控制，提高數據安全性和合規性，同時促進團隊間的協作，並確保用户根據其角色和職責擁有對應的訪問權限和級別。</p><h2>04. Databricks Connector：簡化 AI 應用的開發過程</h2><p>Zilliz 一直致力於為用户提供開箱即用的數據集成解決方案，近期，我們便通過引入 Confluent 和 Airbyte Connector，擴展了 Zilliz Cloud 數據對接和轉換能力。本次版本更新，Zilliz Cloud 再次放大招，集成 Databricks Connector，為 Zilliz 向非結構化數據平台的發展打下了堅實的基礎。</p><p>具體來看，Databricks Connector 提供了一套簡單的數據遷移和轉換解決方案，簡化了 AI 應用的開發過程。無論是你的團隊在研究 ML 並希望更新 Embedding 模型，還是作為個人用户希望直接將 data frame 記錄從 Spark 上傳至 Milvus，靈活的 Databricks Connector 都能一一滿足。</p><p><img src="https://assets.zilliz.com/cms-cn/640_2024_02_19_T165827_910_2d9e7b4d3d.png" alt="" referrerpolicy="no-referrer"></p><p>此外，通過 Databricks Connector，用户就可以通過兩種方式將數據導入到 Zilliz Cloud：流式處理（適用於實時更新）或批處理（適用於大型數據集）。訪問鏈接 （<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzilliz.com%2Fdatabricks_zilliz_demos" target="_blank">https://zilliz.com/databricks_zilliz_demos</a>）瞭解更多細節。</p><h2>05. 支持 GCP Marketplace 訂閲: 簡化支付和採購流程</h2><p>Zilliz Cloud 現已集成 GCP Marketplace，為開發者提供無縫的體驗。用户可以直接用 Google Cloud 賬號在 Marketplace 中購買 Zilliz Cloud，並根據自己的項目進展情況，按需擴展自己的集羣並支付費用。此外，大家可以在 Zilliz Cloud 的操作界面中設置 GCP Marketplace 作為支付方式，或直接通過 GCP Marketplace 訂閲。</p><h2>06. 其他數據安全方面更新</h2><p>Zilliz Cloud 已經通過了 SOC 2 Type II 和 ISO 27001 數據合規認證。我們始終致力於維持最高數據安全標準，為用户在 Zilliz Cloud 的體驗保駕護航。</p><p>立即註冊 Zilliz Cloud（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.zilliz.com.cn%2Fsignup" target="_blank">https://cloud.zilliz.com.cn/signup</a>）即可享受 30 天免費試用。如果在使用過程中遇到任何問題，歡迎通過 Zilliz Cloud 支持中心（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.zilliz.com.cn%2Fhc%2Fzh-cn" target="_blank">https://support.zilliz.com.cn/hc/zh-cn</a>）聯繫我們。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 01:53:27 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/11044004</guid>
            <link>https://my.oschina.net/u/4209276/blog/11044004</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JimuReport 積木報表 v1.7.0 變革版本發佈，低代碼報表設計工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>項目介紹</h3><blockquote><p style="margin-left:0; margin-right:0">一款免費的數據可視化報表，含報表和大屏設計，像搭建積木一樣在線設計報表！功能涵蓋，數據報表、打印設計、圖表報表、大屏設計等！</p><ul><li>Web 版報表設計器，類似於 excel 操作風格，通過拖拽完成報表設計。</li><li>秉承 「簡單、易用、專業」 的產品理念，極大的降低報表開發難度、縮短開發週期、節省成本、解決各類報表難題。</li><li>領先的企業級 Web 報件，採用純 Web 在線技術，專注於解決企業報錶快速製作難題。</li></ul></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>當前版本</strong>：v1.7.0 | 2024-02-18</p><h4>集成依賴</h4><pre><code><span style="color:#333333">&lt;<span style="color:#22863a">dependency</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">groupId</span>&gt;</span>org.jeecgframework.jimureport<span style="color:#333333">&lt;/<span style="color:#22863a">groupId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">artifactId</span>&gt;</span>jimureport-spring-boot-starter<span style="color:#333333">&lt;/<span style="color:#22863a">artifactId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">version</span>&gt;</span>1.7.0<span style="color:#333333">&lt;/<span style="color:#22863a">version</span>&gt;</span><span style="color:#333333">&lt;/<span style="color:#22863a">dependency</span>&gt;</span></code></pre><h4>:: 授權變更::</h4><blockquote><p style="margin-left:0; margin-right:0">從 v1.7.0 + 開始，積木報表做出重大變革，推出付費版本。免費版本會持續發佈，不過功能會受到限制，以便於本項目更好的發展。</p></blockquote><ul><li>積木報表自 2019 年研發以來，一直堅持免費向用户提供服務。然而，隨着項目的不斷髮展和運營成本的增加，目前面臨着一些困難。為了保障項目的良性發展和持續運營，團隊決定從 1.7.0 版本開始變更開源協議，並推出付費版本和免費版。</li><li>付費版本的推出將有助於籌集資金，用於軟件的維護、更新和改進，以及提供更加穩定和優質的服務。同時，免費版仍將繼續存在，但部分功能會受到一定的限制。如果用户不希望受到影響，可以選擇繼續使用 1.7 以下的版本，這些版本將遵循原來開源協議，並會進行一段時間的維護，以保障安全漏洞等級別問題。</li><li>這一變更旨在確保積木報表軟件能夠持續穩定地為用户提供服務，併為未來的發展奠定堅實的基礎，團隊希望用户能夠理解並支持這一決定。</li></ul><h4>升級日誌</h4><p>#升級 SQL</p><pre><code><span style="color:#d73a49">ALTER</span><span style="color:#d73a49">TABLE</span><span style="color:#032f62">`jimu_report_share`</span><span style="color:#d73a49">ADD</span><span style="color:#d73a49">UNIQUE</span><span style="color:#d73a49">INDEX</span><span style="color:#032f62">`uniq_report_id`</span>(<span style="color:#032f62">`report_id`</span>);

<span style="color:#d73a49">ALTER</span><span style="color:#d73a49">TABLE</span> jimu_report_share 
<span style="color:#d73a49">ADD</span><span style="color:#d73a49">COLUMN</span> share_token <span>varchar</span>(<span>50</span>) <span style="color:#005cc5">NULL</span><span style="color:#d73a49">COMMENT</span><span style="color:#032f62">'分享 token'</span><span style="color:#d73a49">AFTER</span> preview_lock_status,
<span style="color:#d73a49">ADD</span><span style="color:#d73a49">UNIQUE</span><span style="color:#d73a49">INDEX</span> uniq_jrs_share_token(share_token);

<span style="color:#d73a49">ALTER</span><span style="color:#d73a49">TABLE</span><span style="color:#032f62">`jimu_report`</span><span style="color:#d73a49">ADD</span><span style="color:#d73a49">COLUMN</span><span style="color:#032f62">`py_str`</span><span>text</span><span>CHARACTER</span><span style="color:#d73a49">SET</span> utf8mb3 <span style="color:#d73a49">COLLATE</span> utf8mb3_general_ci <span style="color:#005cc5">NULL</span><span style="color:#d73a49">COMMENT</span><span style="color:#032f62">'py 增強'</span><span style="color:#d73a49">AFTER</span><span style="color:#032f62">`js_str`</span>;
</code></pre><p>#新功能</p><ul><li>縮放打印</li><li>支持批量、接口、定時導出 PDF/EXCEL</li><li>格式化增加年 / 月 / 年月</li><li>支持隱藏，數據計算單元格</li><li>支持主子表循環打印</li><li>報表分享帶臨時令牌（更安全）</li></ul><p>#issues</p><ul><li>最新版本的搜索框搜索失效・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2255" target="_blank">Issue #2255</a></li><li>配置了 「多租户模式」=「tenant」，並且 「數據源安全」=「false」 後：訪問報表提示 「安全模式下，不允許使用平台數據源（請配置數據源）！」・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2244" target="_blank">Issue #2244</a></li><li>Posgresql 數據庫， timestamp 字段，查詢，提示 timestamp without time zone &gt;= character varying・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2166" target="_blank">Issue #2166</a></li><li>查詢報表中日期範圍和數據集求和同時存在時，查詢報錯，sql 缺失 and 條件・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2258" target="_blank">Issue #2258</a></li><li>積木報表 API 數據顯示不出來・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2Fjeecgboot-vue3%2Fissues%2F881" target="_blank">Issue #881</a></li><li>【1.6.6 版本】SQL 中字段別名使用中文查詢時會報錯，無法解析中文・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2269" target="_blank">Issue #2269</a></li><li>API 數據返回非集合數據，處理時使用了 JSONArray 處理・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2261" target="_blank">Issue #2261</a></li><li>報表條件表達式 case 無短路特性・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2265" target="_blank">Issue #2265</a></li><li>積木報表 API 數據顯示不出來・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2Fjeecgboot-vue3%2Fissues%2F881" target="_blank">Issue #881</a></li><li>函數不能和文字進行組合了・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2211" target="_blank">Issue #2211</a></li><li>通過 api 解析查詢到數據，分組後排序錯亂，不是 sql 查詢，1.5.2 版本還沒有問題，更新到最新版本後錯亂。・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2203" target="_blank">Issue #2203</a></li><li>官網在線體驗，圖表設置單元格背景色後打印和導出 PDF 顯示異常・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2354" target="_blank">Issue #2354</a></li><li>導入報表配置報錯・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2333" target="_blank">Issue #2333</a></li><li>自定義橫向分組，日期排序錯誤，不能排序・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2355" target="_blank">Issue #2355</a></li><li>刪除線，下劃線使用之後再點取消，導出的 excel 仍有兩線・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2345" target="_blank">Issue #2345</a></li><li>圖表 PDF 導出內容異常・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2332" target="_blank">Issue #2332</a></li><li>DBSUM 加查詢條件統計時報 SQL 語法錯誤，條件字段前缺少 and・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2367" target="_blank">Issue #2367</a></li><li>多租户模式下，報表鑽取 url 參數沒有 tenantId・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2288" target="_blank">Issue #2288</a></li><li>重構分組合計計算邏輯，解決合計的系列問題</li><li>報表名稱前後有空格，模糊搜索不顯示</li><li>查詢條件，選中後，點擊不出現下拉項</li><li>查詢框鼠標上下滾動，會出現閃動的情況</li><li>安全模式下存在 select * 的時候，判斷擁有 sql 解析權限的角色，如果有可以走數據庫</li><li>數據源測試連接，測試不了</li><li>年月選中未顯示</li><li>【issues/2194】多租户模式，報表名稱的唯一性校驗邏輯問題</li><li>[issue/#881] api 報表增加字段映射功能</li><li>函數表達式，有空格時失效</li><li>日期函數支持小時顯示</li><li>帶背景導出圖片錯亂<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2379" target="_blank">#2379</a></li><li>帶背景導出圖片時報錯<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2377" target="_blank">#2377</a></li><li>提供 SpringBoot3+JDK17 支持版本</li></ul><h4>代碼下載</h4><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport" target="_blank">https://github.com/jeecgboot/JimuReport</a></li><li><a href="https://gitee.com/jeecg/JimuReport">https://gitee.com/jeecg/JimuReport</a></li></ul><h4>技術文檔</h4><ul><li>體驗官網：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fjimureport.com%2F" target="_blank">http://jimureport.com</a></li><li>快速集成文檔 ：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.jeecg.com%2Fjimureport%2Fquick.html" target="_blank">https://help.jeecg.com/jimureport/quick.html</a></li><li>技術文檔：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.jeecg.com%2Fjimureport" target="_blank">https://help.jeecg.com/jimureport</a></li></ul><h4>為什麼選擇 JimuReport?</h4><blockquote><p style="margin-left:0; margin-right:0">永久免費，支持各種複雜報表，並且傻瓜式在線設計，非常的智能，低代碼時代，這個是你的首選！</p></blockquote><ul><li>採用 SpringBoot 的腳手架項目，都可以快速集成</li><li>Web 版設計器，類似於 excel 操作風格，通過拖拽完成報表設計</li><li>通過 SQL、API 等方式，將數據源與模板綁定。同時支持表達式，自動計算合計等功能，使計算工作量降低</li><li>開發效率很高，傻瓜式在線報表設計，一分鐘設計一個報表，又簡單又強大</li><li>支持 ECharts，目前支持 28 種圖表，在線拖拽設計，支持 SQL 和 API 兩種數據源</li><li>支持分組、交叉，合計、表達式等複雜報表</li><li>支持打印設計（支持套打、背景打印等）可設置打印邊距、方向、頁眉頁腳等參數，一鍵快速打印，同時可實現套打，不動產證等精準、無縫打印</li><li>大屏設計器支持幾十種圖表樣式，可自由拼接、組合，設計炫酷大屏</li><li>可設計各種類型的單據、大屏，如出入庫單、銷售單、財務報表、合同、監控大屏、旅遊數據大屏等</li></ul><h4>報表設計效果</h4><ul><li>報表設計器（專業一流，數據可視化，解決各類報表難題）<span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-a2a8557722593e6c5a5e8f015a0df2b70e9.png" referrerpolicy="no-referrer"></li><li>報表設計器（完全在線設計，簡單易用）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-752b454f64ed87c798b3e8a083fbd6622d4.gif" referrerpolicy="no-referrer"></p><ul><li>打印設計（支持套打、背景打印）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9b6cd73719de68e0e45e1cf95cd6104a103.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-8863ea4e67c02dbd844bb8022652f1be651.png" referrerpolicy="no-referrer"></p><ul><li>數據報表（支持分組、交叉，合計等複雜報表）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fe2ac0dfc3933734961924de0538b3049d2.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-be956cbc19287e4df9cc46c9d15e96da99d.png" referrerpolicy="no-referrer"></p><ul><li>圖形報表（目前支持 28 種圖表）<span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-3eda428ef182cb64a1a8e132e4bfeb87718.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-22096123c5b6a10a801967c33cc33a7af11.png" referrerpolicy="no-referrer"></li><li>數據報表斑馬線</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e77ba28f6fb56d1147c13388e7e5d19d1bc.png" referrerpolicy="no-referrer"></p><p>儀表盤設計器</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c9d41288c31398d76b390bdd400f13a582.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8ebff9357b6a22161f668586af28be31488.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fad98d42b2cf92f92a903c9cff7579f18ec.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4be5b44bf771d8c55aba2adf9ae074eac18.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-57676eb5dcf4726933e0f6e429a4b2e31a9.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-7938331a342ba363a9691d76a53f34298fc.png" referrerpolicy="no-referrer"></p><h4>功能清單</h4><pre><code>├─報表設計器
│  ├─數據源
│  │  ├─支持多種數據源，如 Oracle,MySQL,SQLServer,PostgreSQL 等主流的數據庫
│  │  ├─支持 SQL 編寫頁面智能化，可以看到數據源下面的表清單和字段清單
│  │  ├─支持參數
│  │  ├─支持單數據源和多數數據源設置
│  │  ├─支持 Nosql 數據源 Redis，MongoDB
│  │  ├─支持存儲過程
│  ├─單元格格式
│  │  ├─邊框
│  │  ├─字體大小
│  │  ├─字體顏色
│  │  ├─背景色
│  │  ├─字體加粗
│  │  ├─支持水平和垂直的分散對齊
│  │  ├─支持文字自動換行設置
│  │  ├─圖片設置為圖片背景
│  │  ├─支持無線行和無限列
│  │  ├─支持設計器內凍結窗口
│  │  ├─支持對單元格內容或格式的複製、粘貼和刪除等功能
│  │  ├─等等
│  ├─報表元素
│  │  ├─文本類型：直接寫文本；支持數值類型的文本設置小數位數
│  │  ├─圖片類型：支持上傳一張圖表；支持圖片動態生成
│  │  ├─圖表類型
│  │  ├─函數類型
│  │  └─支持求和
│  │  └─平均值
│  │  └─最大值
│  │  └─最小值
│  ├─背景
│  │  ├─背景顏色設置
│  │  ├─背景圖片設置
│  │  ├─背景透明度設置
│  │  ├─背景大小設置
│  ├─數據字典
│  ├─報表打印
│  │  ├─自定義打印
│  │  └─醫藥箋、逮捕令、介紹信等自定義樣式設計打印
│  │  ├─簡單數據打印
│  │  └─出入庫單、銷售表打印
│  │  └─帶參數打印
│  │  └─分頁打印
│  │  ├─套打
│  │  └─不動產證打印
│  │  └─打印
│  ├─數據報表
│  │  ├─分組數據報表
│  │  └─橫向數據分組
│  │  └─縱向數據分組
│  │  └─多級循環表頭分組
│  │  └─橫向分組小計
│  │  └─縱向分組小計
│  │  └─分版
│  │  └─分欄
│  │  └─動態合併格
│  │  └─自定義分頁條數
│  │  └─合計
│  │  ├─交叉報表
│  │  ├─明細表
│  │  ├─帶條件查詢報表
│  │  ├─表達式報表
│  │  ├─帶二維碼/條形碼報表
│  │  ├─多表頭複雜報表
│  │  ├─主子報表
│  │  ├─預警報表
│  │  ├─數據鑽取報表
│  ├─圖形報表
│  │  ├─柱形圖
│  │  ├─堆疊柱形圖
│  │  ├─折線圖
│  │  ├─餅圖
│  │  ├─動態輪播圖
│  │  ├─折柱圖
│  │  ├─散點圖
│  │  ├─漏斗圖
│  │  ├─雷達圖
│  │  ├─象形圖
│  │  ├─地圖
│  │  ├─儀盤表
│  │  ├─關係圖
│  │  ├─圖表背景
│  │  ├─圖表動態刷新
│  │  ├─圖表數據字典
│  ├─參數
│  │  ├─參數配置
│  │  ├─參數管理
│  ├─導入導出
│  │  ├─支持導入 Excel
│  │  ├─支持導出 Excel、pdf；支持導出 excel、pdf 帶參數
│  ├─打印設置
│  │  ├─打印區域設置
│  │  ├─打印機設置
│  │  ├─預覽
│  │  ├─打印頁碼設置
├─大屏設計器
│  ├─系統功能
│  │  ├─靜態數據源和動態數據源設置
│  │  ├─基礎功能
│  │  └─支持拖拽設計
│  │  └─支持增、刪、改、查大屏
│  │  └─支持複製大屏數據和樣式
│  │  └─支持大屏預覽、分享
│  │  └─支持系統自動保存數據，同時支持手動恢復數據
│  │  └─支持設置大屏密碼
│  │  └─支持對組件圖層的刪除、組合、上移、下移、置頂、置底等
│  │  ├─背景設置
│  │  └─大屏的寬度和高度設置
│  │  └─大屏簡介設置
│  │  └─背景顏色、背景圖片設置
│  │  └─封面圖設置
│  │  └─縮放比例設置
│  │  └─環境地址設置
│  │  └─水印設置
│  │  ├─地圖設置
│  │  └─添加地圖
│  │  └─地圖數據隔離
│  ├─圖表
│  │  ├─柱形圖
│  │  ├─折線圖
│  │  ├─折柱圖
│  │  ├─餅圖
│  │  ├─象形圖
│  │  ├─雷達圖
│  │  ├─散點圖
│  │  ├─漏斗圖
│  │  ├─文本框
│  │  ├─跑馬燈
│  │  ├─超鏈接
│  │  ├─實時時間
│  │  ├─地圖
│  │  ├─全國物流地圖
│  │  ├─地理座標地圖
│  │  ├─城市派件地圖
│  │  ├─圖片
│  │  ├─圖片框
│  │  ├─輪播圖
│  │  ├─滑動組件
│  │  ├─iframe
│  │  ├─video
│  │  ├─翻牌器
│  │  ├─環形圖
│  │  ├─進度條
│  │  ├─儀盤表
│  │  ├─字浮雲
│  │  ├─表格
│  │  ├─選項卡
│  │  ├─萬能組件
└─其他模塊
   └─更多功能開發中。。</code></pre><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 11:44:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279228/jimureport-1-7-0-released</guid>
            <link>https://www.oschina.net/news/279228/jimureport-1-7-0-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RustDesk 新增選擇連接特定 Windows 會話功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">經過春節期間多次重構，RustDesk<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frustdesk%2Frustdesk%2Freleases%2Ftag%2Fnightly" target="_blank">nightly</a>&nbsp;新增選擇連接特定 Windows 會話功能，歡迎大家試用反饋。</p><p><img alt="Image" src="https://pbs.twimg.com/media/GGrOJ2ZXcAAZQMJ?format=jpg&amp;name=medium" referrerpolicy="no-referrer"></p><p>Demo 視頻請查看，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frustdesk%2Frustdesk%2Fpull%2F7184" target="_blank">https://github.com/rustdesk/rustdesk/pull/7184</a></p><p>關於 RustDesk 的最新資訊請訂閲，&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Frustdesk%2Fstatus%2F1759445426267189273" target="_blank">https://twitter.com/rustdesk/status/1759445426267189273</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">RustDesk 是一個開源遠程桌面軟件，開箱即用，無需任何配置。您完全掌控數據，不用擔心安全問題。您可以使用我們的註冊 / 中繼服務器，或者自己設置，亦或者開發您的版本。</p><h3 style="margin-left:0; margin-right:0; text-align:start">主要特性：</h3><ol style="list-style-type:decimal; margin-left:0; margin-right:0"><li>自定義畫面質量</li><li>加密直連，先嚐試打洞直連，不行再由服務器轉發</li><li>內置文件傳輸和 TCP 隧道功能</li><li>RDP 連接</li><li>支持自建中心服務器</li><li>內網 IP 直連</li></ol><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="主界面" height="605" src="https://static.oschina.net/uploads/img/202103/31190948_oYrE.png" width="930" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 07:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279183/rustdesk-updated</guid>
            <link>https://www.oschina.net/news/279183/rustdesk-updated</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Android 15 首個開發者預覽版]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Android 15 首個開發者預覽版已發佈，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2024%2F02%2Ffirst-developer-preview-android15.html" target="_blank">公告寫道</a></u>：「Android 15 繼續致力於構建一個平台，幫助用户提高工作效率，同時提供新功能，讓用户能夠在最多樣化的設備上擁有出色的使用體驗、最大限度地減少電池影響、最大限度地提升流暢的應用性能，以及保護用户隱私和安全。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-92eb319bbaa3f3eaf7f75333f17f8a57f0a.png" referrerpolicy="no-referrer"></p><p>Android 15 支持以下設備：</p><ul style="margin-left:0; margin-right:0"><li>Pixel 6 和 Pixel 6 Pro</li><li>Pixel 6a</li><li>Pixel 7 和 Pixel 7 Pro</li><li>Pixel 7a</li><li>Pixel Fold</li><li>Pixel Tablet</li><li>Pixel 8 和 Pixel 8 Pro</li></ul><p>這也意味着 Pixel 5 和 5a 系列不會再收到新操作系統的更新。</p><p>Android 15 主要新特性：</p><ul><li>改進相機控制</li><li>部分屏幕共享，允許用户共享或錄製單個應用窗口而不是整個屏幕</li><li>支持內核 fs-verity 功能的 API，允許用户在可讀寫文件系統上存儲只讀文件，對其進行加密簽名以確保沒有被惡意篡改</li><li>如果檢測到手機過熱將提供更多動態性能控制 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Fgames%2Foptimize%2Fadpf" target="_blank">Android Dynamic Performance Framework (ADPF)</a>，讓應用根據情況做出相應的迴應</li><li>繼續添加 OpenJDK API，包括圍繞 NIO 緩衝區、流、安全性等改進</li></ul><p>Android 15 還包括最新版本的"隱私沙箱"（Privacy Sandbox）--這是一項正在進行中的計劃，旨在為應用程序找到利用定向廣告的方法，從而在後"末日世界"中保持某種程度的用户隱私。</p><p>按照計劃，Android 15 將在今年下半年正式發佈。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d970a53a257079a56720ec894ea0d49b45e.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 06:23:48 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279171/first-developer-preview-android-15</guid>
            <link>https://www.oschina.net/news/279171/first-developer-preview-android-15</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「我第一次用 GitHub，別 TM 給我代碼，我只要安裝包」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-f7d84901951a7547060708d4c054cada7b0.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fgithub%2Fcomments%2F1at9br4%2Fi_am_new_to_github_and_i_have_lots_to_say%2F" target="_blank">https://www.reddit.com/r/github/comments/1at9br4/i_am_new_to_github_and_i_have_lots_to_say/</a></u></em></p></blockquote><p>上面的截圖來自 reddit 的 GitHub 子版塊。一名自稱是 GitHub 新手的用户因沒有在倉庫找到安裝包而破口大罵：</p><blockquote><p>我 TM 不需要什麼狗屁代碼，我只想下載這個煞筆應用程序。</p><p>為什麼要提供代碼？這些蠢貨以為每個人都是開發者，都懂代碼。我不是，我也不懂，我只會下載和安裝應用程序。所以這 TM 為什麼要提供代碼？臭煞筆程序員！</p></blockquote><p>根據帖子的內容，這名用户需要使用的是名為&nbsp;Sherlock 的 Python 命令行工具，該工具可根據輸入的用户名爬取對應的社交帳號。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e12784c1a46366dfa33002c85069752e7f1.png" referrerpolicy="no-referrer"></p><p>由於 Sherlock 沒有提供可直接安裝使用的二進制文件，需要用户安裝 Python 並在命令行環境中使用 —— 這對於新手來説確實有門檻。但複雜的社會你給我去學習！</p><p><img src="https://oscimg.oschina.net/oscnet/up-6c559086d781033dcdc406e44d1536672f5.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 03:28:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279155/new-to-github</guid>
            <link>https://www.oschina.net/news/279155/new-to-github</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ioGame21 發佈，史詩級增強，質的飛越；Java Netty 輕量級網絡遊戲服務器框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>ioGame21 首發計劃</h3><div><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Freleases%2Ftag%2F21.0" target="_blank"><span>https://github.com/game-town/ioGame/releases/tag/21.0</span></a></p></div><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fab15oe" target="_blank"><span>框架版本更新日誌 (yuque.com)</span></a></span></p><table><tbody><tr><th>功能支持</th><th>完成</th><th>描述</th><th>issu</th></tr></tbody><tbody><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fxeokui" target="_blank">遊戲對外服開放自定義協議</a></td><td>✅</td><td>功能增強</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F213" target="_blank">#213</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkhg23pvbh59a7spm" target="_blank">遊戲對外服緩存</a></td><td>✅</td><td>功能增強、性能提升</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F76" target="_blank">#76</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz%23YQOZ5" target="_blank">FlowContext</a> 增加通信能力，提供同步、異步、異步回調的便捷使用</td><td>✅</td><td>功能增強</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F235" target="_blank">#235</a></td></tr><tr><td>虛擬線程支持; 各邏輯服之間通信阻塞部分，改為使用虛擬線程，避免阻塞業務線程</td><td>✅</td><td>功能增強、性能提升</td><td>&nbsp;</td></tr><tr><td>默認不使用 bolt 線程池，減少上下文切換。<br><br> ioGame17：<br> netty --&gt; bolt 線程池 --&gt; ioGame 線程池。<br><br> ioGame21：<br> 1. netty --&gt; ioGame 線程池。<br> 2. 部分業務將直接在 netty 線程中消費業務。<br><br> 文檔 - <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x" target="_blank">ioGame 線程相關</a></td><td>✅</td><td>性能提升</td><td>&nbsp;</td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq" target="_blank">全鏈路調用日誌跟蹤</a>；日誌增強 traceId</td><td>✅</td><td>功能增強</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F230" target="_blank">#230</a></td></tr><tr><td>移除文檔自動生成，改為由開發者調用觸發。</td><td>✅</td><td>整理</td><td>&nbsp;</td></tr><tr><td>移除過期代碼</td><td>✅</td><td>整理</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F239" target="_blank">#237</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33" target="_blank">分佈式事件總線</a><br><br> 可以代替 redis pub sub 、 MQ ，並且具備全鏈路調用日誌跟蹤，這點是中間件產品做不到的。</td><td>✅</td><td>功能增強</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F228" target="_blank">#228</a></td></tr><tr><td>日誌庫使用新版本 slf4j 2.0</td><td>✅</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffury.apache.org%2F" target="_blank">Fury</a> 支持。<br><br> Fury 是一個基於 JIT 動態編譯和零拷貝的高性能多語言序列化框架</td><td>&nbsp;</td><td>在計劃內，不一定會支持</td><td>因在發佈 ioGame21 時，Fury 還未發佈穩定版本，所以這裏暫不支持。</td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Flxqbnb%23bJ6T8" target="_blank">心跳響應前的回調</a></td><td>✅</td><td>功能增強</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F234" target="_blank">#234</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz%23HQYmm" target="_blank">FlowContext</a> 增加更新、獲取元信息的便捷使用</td><td>✅</td><td>功能增強</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F236" target="_blank">#236</a></td></tr></tbody></table><h3>ioGame21 首發內容簡介</h3><p>在 ioGame21 中，該版本做了數百項優化及史詩級增強。</p><ul><li>文檔方面</li><li>線程管理域方面的開放與統一、減少線程池上下文切換</li><li>FlowContext 得到了<strong>史詩級</strong>的增強。</li><li>新增通訊方式 - 分佈式事件總線</li><li>遊戲對外服方面增強</li><li>全鏈路調用日誌跟蹤</li><li>各邏輯服之間通信阻塞部分，改為使用虛擬線程, 避免阻塞業務線程，從而使得框架的吞吐量得到了巨大的提升。</li></ul><h4>遊戲對外服相關</h4><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F76" target="_blank">#76</a> 遊戲對外服緩存</p><p>更多的介紹，請閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkhg23pvbh59a7spm" target="_blank">遊戲對外服緩存</a>文檔。</p><p>遊戲對外服緩存，可以將一些熱點的業務數據緩存在遊戲對外服中，玩家每次訪問相關路由時，會直接從遊戲對外服的內存中取數據。這樣可以避免反覆請求遊戲邏輯服，從而達到性能的超級提升；</p><pre><code class="language-java">private static void extractedExternalCache() {
    // 框架內置的緩存實現類
    DefaultExternalCmdCache externalCmdCache = new DefaultExternalCmdCache();
    // 添加到配置中
    ExternalGlobalConfig.externalCmdCache = externalCmdCache;
    // 配置緩存 3-1
    externalCmdCache.addCmd(3, 1);
}
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F213" target="_blank">#213</a> 遊戲對外服開放自定義協議</p><p>更多的介紹，請閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fxeokui" target="_blank">遊戲對外服的協議説明</a>文檔。</p><p>開發者可自定義遊戲對外服協議，用於代替框架默認的 ExternalMessage 公共對外協議。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F234" target="_blank">#234</a> 心跳響應前的回調</p><p>更多的介紹，請閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuueq3i" target="_blank">心跳設置與心跳鈎子</a>文檔。</p><p>在部分場景下，在響應心跳前可添加當前時間，使得客户端與服務器時間同步。</p><pre><code class="language-java">@Slf4j
public class DemoIdleHook implements SocketIdleHook {
    ... ... 省略部分代碼
    volatile byte[] timeBytes;

    public DemoIdleHook() {
        updateTime();
        // 每秒更新當前時間
        TaskKit.runInterval(this::updateTime, 1, TimeUnit.SECONDS);
    }

    private void updateTime() {
        LongValue data = LongValue.of(TimeKit.currentTimeMillis());
        // 避免重複序列化，這裏提前序列化好時間數據
        timeBytes = DataCodecKit.encode(data);
    }

    @Override
    public void pongBefore(BarMessage idleMessage) {
        // 把當前時間戳給到心跳接收端
        idleMessage.setData(timeBytes);
    }
}
</code></pre><h4>FlowContext</h4><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F235" target="_blank">#235</a> FlowContext 增加通信能力，提供同步、異步、異步回調的便捷使用</p><p>更多的介紹，請閲讀 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz" target="_blank">FlowContext</a> 文檔。</p><pre><code class="language-java">// 跨服請求 - 同步、異步回調演示
void invokeModuleMessage() {
    // 路由、請求參數
    ResponseMessage responseMessage = flowContext.invokeModuleMessage(cmdInfo, yourData);
    RoomNumMsg roomNumMsg = responseMessage.getData(RoomNumMsg.class);
    log.info("同步調用 : {}", roomNumMsg.roomCount);

    // --- 此回調寫法，具備全鏈路調用日誌跟蹤 ---
    // 路由、請求參數、回調
    flowContext.invokeModuleMessageAsync(cmdInfo, yourData, responseMessage -&gt; {
        RoomNumMsg roomNumMsg = responseMessage.getData(RoomNumMsg.class);
        log.info("異步回調 : {}", roomNumMsg.roomCount);
    });
}

// 廣播
public void broadcast(FlowContext flowContext) {
    // 全服廣播 - 路由、業務數據
    flowContext.broadcast(cmdInfo, yourData);

    // 廣播消息給單個用户 - 路由、業務數據、userId
    long userId = 100;
    flowContext.broadcast(cmdInfo, yourData, userId);

    // 廣播消息給指定用户列表 - 路由、業務數據、userIdList
    List&lt;Long&gt; userIdList = new ArrayList&lt;&gt;();
    userIdList.add(100L);
    userIdList.add(200L);
    flowContext.broadcast(cmdInfo, yourData, userIdList);

    // 給自己發送消息 - 路由、業務數據
    flowContext.broadcastMe(cmdInfo, yourData);

    // 給自己發送消息 - 業務數據
    // 路由則使用當前 action 的路由。
    flowContext.broadcastMe(yourData);
}
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F236" target="_blank">#236</a> FlowContext 增加更新、獲取元信息的便捷使用</p><p>更多的介紹，請閲讀 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz" target="_blank">FlowContext</a> 文檔。</p><pre><code class="language-java">void test(MyFlowContext flowContext) {
    // 獲取元信息
    MyAttachment attachment = flowContext.getAttachment();
    attachment.nickname = "漁民小鎮";

    // [同步]更新 - 將元信息同步到玩家所在的遊戲對外服中
    flowContext.updateAttachment();

    // [異步無阻塞]更新 - 將元信息同步到玩家所在的遊戲對外服中
    flowContext.updateAttachmentAsync();
}

public class MyFlowContext extends FlowContext {
    MyAttachment attachment;

    @Override
    @SuppressWarnings("unchecked")
    public MyAttachment getAttachment() {
        if (Objects.isNull(attachment)) {
            this.attachment = this.getAttachment(MyAttachment.class);
        }

        return this.attachment;
    }
}
</code></pre><h4>線程相關</h4><p>更多的介紹，請閲讀 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x" target="_blank">ioGame 線程相關</a>文檔。</p><p>虛擬線程支持，各邏輯服之間通信阻塞部分使用虛擬線程來處理，避免阻塞業務線程。</p><p>默認不使用 bolt 線程池，減少上下文切換。ioGame21 業務消費的線程相關內容如下：</p><ol><li>netty --&gt; ioGame 線程池。</li><li>部分業務將直接在 netty 線程中消費業務。</li></ol><p>在 ioGame21 中，框架內置了 3 個線程執行器管理域，分別是</p><ol><li>UserThreadExecutorRegion ，用户線程執行器管理域。</li><li>UserVirtualThreadExecutorRegion ，用户虛擬線程執行器管理域。</li><li>SimpleThreadExecutorRegion ，簡單的線程執行器管理域。</li></ol><p><strong>從工具類中得到與用户（玩家）所關聯的線程執行器</strong></p><pre><code class="language-java">@Test
public void userThreadExecutor() {
    long userId = 1;

    ThreadExecutor userThreadExecutor = ExecutorRegionKit.getUserThreadExecutor(userId);

    userThreadExecutor.execute(() -&gt; {
        // print 1
        log.info("userThreadExecutor : 1");
    });

    userThreadExecutor.execute(() -&gt; {
        // print 2
        log.info("userThreadExecutor : 2");
    });
}

@Test
public void getUserVirtualThreadExecutor() {
    long userId = 1;

    ThreadExecutor userVirtualThreadExecutor = ExecutorRegionKit.getUserVirtualThreadExecutor(userId);

    userVirtualThreadExecutor.execute(() -&gt; {
        // print 1
        log.info("userVirtualThreadExecutor : 1");
    });

    userVirtualThreadExecutor.execute(() -&gt; {
        // print 2
        log.info("userVirtualThreadExecutor : 2");
    });
}

@Test
public void getSimpleThreadExecutor() {
    long userId = 1;

    ThreadExecutor simpleThreadExecutor = ExecutorRegionKit.getSimpleThreadExecutor(userId);

    simpleThreadExecutor.execute(() -&gt; {
        // print 1
        log.info("simpleThreadExecutor : 1");
    });

    simpleThreadExecutor.execute(() -&gt; {
        // print 2
        log.info("simpleThreadExecutor : 2");
    });
}
</code></pre><p><strong>從 FlowContext 中得到與用户（玩家）所關聯的線程執行器</strong></p><pre><code class="language-java">void executor() {
    // 該方法具備全鏈路調用日誌跟蹤
    flowContext.execute(() -&gt; {
        log.info("用户線程執行器");
    });

    // 正常提交任務到用户線程執行器中
    // getExecutor() 用户線程執行器
    flowContext.getExecutor().execute(() -&gt; {
        log.info("用户線程執行器");
    });
}

void executeVirtual() {
    // 該方法具備全鏈路調用日誌跟蹤
    flowContext.executeVirtual(() -&gt; {
        log.info("用户虛擬線程執行器");
    });

    // 正常提交任務到用户虛擬線程執行器中
    // getVirtualExecutor() 用户虛擬線程執行器
    flowContext.getVirtualExecutor().execute(() -&gt; {
        log.info("用户虛擬線程執行器");
    });

    // 示例演示 - 更新元信息（可以使用虛擬線程執行完成一些耗時的操作）
    flowContext.executeVirtual(() -&gt; {
        log.info("用户虛擬線程執行器");
        
        // 更新元信息
        flowContext.updateAttachment();
        
        // ... ... 其他業務邏輯
    });
}
</code></pre><h4>日誌相關</h4><p>日誌庫使用新版本 slf4j 2.x</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F230" target="_blank">#230</a> 支持全鏈路調用日誌跟蹤；</p><p>更多的介紹，請閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq" target="_blank">全鏈路調用日誌跟蹤</a>文檔。</p><p><strong>開啓 traceId 特性</strong></p><p>該配置需要在遊戲對外服中設置，因為遊戲對外服是玩家請求的入口。</p><pre><code class="language-java">// true 表示開啓 traceId 特性
IoGameGlobalConfig.openTraceId = true;
</code></pre><p>將<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fxhvpqy" target="_blank">全鏈路調用日誌跟蹤插件</a> TraceIdInOut 添加到業務框架中，表示該遊戲邏輯服需要支持全鏈路調用日誌跟蹤。如果遊戲邏輯服沒有添加該插件的，表示不需要記錄日誌跟蹤。</p><pre><code class="language-java">BarSkeletonBuilder builder = ...;
// traceId
TraceIdInOut traceIdInOut = new TraceIdInOut();
builder.addInOut(traceIdInOut);
</code></pre><h4>分佈式事件總線</h4><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F228" target="_blank">#228</a> 分佈式事件總線是新增的通訊方式，可以代替 redis pub sub 、 MQ ...等中間件產品；分佈式事件總線具備全鏈路調用日誌跟蹤，這點是中間件產品所做不到的。</p><p>文檔 - <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33" target="_blank">分佈式事件總線</a></p><h4>小結</h4><p>在 ioGame21 中，該版本做了數百項優化及史詩級增強。</p><ul><li>在線文檔方面</li><li>線程管理域方面的開放與統一、減少線程池上下文切換</li><li>FlowContext 增強</li><li>新增通訊方式 - 分佈式事件總線</li><li>遊戲對外服方面增強</li><li>全鏈路調用日誌跟蹤</li></ul><h4>ioGame17 遷移到 ioGame21</h4><p>文檔：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fhcgsfobyoph9r74r" target="_blank">17 遷移到 ioGame21</a></p><p>&nbsp;</p><hr><div><h3><span style="color:#40485b">ioGame 使用趨勢數據</span></h3><p style="margin-left:0; margin-right:0"><span>關注 ioGame 的遊戲服務器開發者持續增多，</span><strong><span style="color:#df2a3f">2022-09 ~ 至今</span></strong><span style="color:#000000">各月</span><span>的統計數據；</span></p><p style="margin-left:0; margin-right:0"><span>這裏的統計信息是關於開發者關注 ioGame 框架相關的，從統計數據中可以看出，由於 ioGame 上手簡單，功能強大等優點，得到了眾多開發者的關注。如果你想知道 ioGame 有沒有人在使用，可以先到這裏看下統計數據、開發者的評價與討論。</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgpxk93%23TwVa8" target="_blank"><span>https://www.yuque.com/iohao/game/gpxk93#TwVa8</span></a></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span>這裏展示了每月的統計數據，統計數據來源於語雀後台，這些數據都是</span><strong><span style="color:#df2a3f">真實的、客觀存在的、活的</span></strong><span>。</span></p><div><blockquote><p style="margin-left:0; margin-right:0"><strong><span style="color:#df2a3f">因為成本的原因，某寶某多還沒有出現能提供這種服務的商家，所以這樣的統計數據也更具真實性。</span></strong></p></blockquote></div><p style="margin-left:0; margin-right:0"><span>通過統計數據，我們可以看到每天會有很多開發者在訪問 ioGame 的在線文檔，並且這些統計數據不是來源於口嗨的，也不是主觀創造的。</span></p><p style="margin-left:0; margin-right:0"><span>所以，還在猶豫要不要使用 ioGame 的開發者們，更應該討論的是「為什麼這些開發者會選擇使用 ioGame」，而不是 ioGame 有沒有人在使用的問題。</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao" target="_blank"><span>點擊我，到語雀後台查看 ioGame 的數據</span></a></p><p style="margin-left:0; margin-right:0"><img alt="" height="424" src="https://foruda.gitee.com/images/1707826063452005074/b4b96239_5475.png" width="680" referrerpolicy="no-referrer"></p></div><hr><div><h3><strong><span style="color:#222222">最小依賴</span></strong></h3><p style="margin-left:0; margin-right:0"><span>ioGame 已經上傳到中央倉庫，建議開發者的 maven 倉庫代理使用原生的或騰訊雲的代理，目前不推薦阿里雲的代理。</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fswt3ls%23Amq4K" target="_blank"><span>騰訊雲代理設置可參考這裏</span></a><span>。</span></p><p style="margin-left:0; margin-right:0"><span>ioGame 最新版本查看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fab15oe" target="_blank"><span>https://www.yuque.com/iohao/game/ab15oe</span></a></p><p style="margin-left:0; margin-right:0"><span>ioGame 是輕量級的網絡遊戲服務器框架，</span><strong><span>不依賴任何第三方</span></strong><span>中間件或數據庫</span><strong><span>就能支持集羣、分佈式</span></strong><span>，只需要 java 環境就可以運行。此時，你只需一個依賴即可獲得整個框架，並同時支持開頭介紹的全部功能特性。</span></p><pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.iohao.game&lt;/groupId&gt;
    &lt;artifactId&gt;run-one-netty&lt;/artifactId&gt;
    &lt;version&gt;${ioGame.version}&lt;/version&gt;
&lt;/dependency&gt;</code></pre><div>
  &nbsp;
 </div></div><p>&nbsp;</p><hr><h2>框架整體預覽導圖</h2><p><img alt="" height="468" src="https://foruda.gitee.com/images/1683534421248294819/72c4dfdb_5475.png" width="620" referrerpolicy="no-referrer"></p><p>&nbsp;</p><hr><h2>ioGame 網絡遊戲服務器框架簡介</h2><p>&nbsp;</p><ul><li>無鎖異步化、事件驅動的架構設計；輕量級，無需依賴任何第三方中間件或數據庫就能支持集羣、分佈式</li><li>通過 ioGame 可以很容易的搭建出一個集羣無中心節點、集羣自動化、多進程的分佈式遊戲服務器</li><li>包體小、啓動快、內存佔用少、更加的節約、無需配置文件、提供了優雅的路由訪問權限控制</li><li>讓開發者使用一套業務代碼，無需改動，支持多種連接方式：WebSocket、TCP、UDP</li><li>讓開發者用一套業務代碼，能輕鬆切換和擴展不同的通信協議：Protobuf、JSON</li><li>近原生的性能；業務框架在單線程中平均每秒可以執行 1152 萬次業務邏輯</li><li>代碼即聯調文檔、JSR380 驗證、斷言 + 異常機制 = 更少的維護成本</li><li>框架具備智能的同進程親和性；開發中，業務代碼可定位與跳轉</li><li>架構部署靈活性與多樣性：既可相互獨立，又可相互融合</li><li>可同時與同類型的多個遊戲邏輯服通信並得到數據</li><li>邏輯服之間可相互跨進程、跨機器進行通信</li><li>支持玩家對遊戲邏輯服進行動態綁定</li><li>能與任何其他框架做融合共存</li><li>對 webMVC 開發者友好</li><li>無 spring 強依賴</li><li>零學習成本</li><li>javaSE</li></ul><p><span>你是否想要開發一個</span><strong><span>高性能、穩定、易用、自帶負載均衡、避免類爆炸設計、可跨進程跨機器通信、集羣無中心節點、集羣自動化、有狀態多進程的分佈式的</span></strong><span>網絡編程服務器呢？如果是的話，這裏向你推薦一個由 java 語言編寫的網絡編程框架 ioGame。下面將會從多個方面來對框架做一些簡單的介紹。</span></p><div><p style="margin-left:0; margin-right:0"><span>ioGame 是一個</span><span style="color:#262626">輕量級的</span><span>網絡編程框架，適用於</span><strong><span style="color:#df2a3f">網絡遊戲服務器、物聯網、內部系統</span></strong><span>及各種需要長連接的場景；</span></p><div><blockquote><p style="margin-left:0; margin-right:0"><span>ioGame 有以下特點：</span></p><ul><li><span>無鎖異步化、事件驅動的架構設計</span></li><li><span>同時支持 TCP、WebSocket、UDP 多種連接方式，並且可擴展</span></li><li><span>支持 protobuf、json 等不同的通信協議</span></li><li><span>集羣無中心節點、集羣自動化、分佈式的設計</span></li><li><span style="color:#000000">真輕量級，不依賴任何第三方中間件或數據庫就能支持集羣、分佈式</span></li><li><span>提供多種通訊方式，且邏輯服之間可以相互跨機器通信</span></li><li><span>框架為開發者提供了同步、異步、異步回調的方法，用於邏輯服之間的相互訪問</span></li><li><span>ioGame 是純 javaSE 的，使得 ioGame 能與其他框架方便的進行集成、融合；如 spring ...等</span></li><li><span>學習成本低，開發體驗好</span></li><li><span>支持多服單進程、多服多進程的啓動和部署方式</span></li><li><span>提供遊戲文檔生成的輔助功能</span></li><li><span>包體小、啓動快、內存佔用少</span></li><li><span>提供優雅的路由訪問權限控制</span></li><li><span>提供了靈活的線程擴展、設置</span></li><li><span>具備智能的同進程親和性</span></li><li><span>具備全鏈路調用日誌跟蹤特性</span></li><li><span>業務框架提供了插件機制，插件是可插撥、可擴展的</span></li><li><span>JSR380 驗證、斷言 + 異常機制 = 更少的維護成本</span></li><li><span>action 支持自動裝箱、拆箱基礎類型，用於解決</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>協議碎片</span></a><span>的問題</span></li></ul></blockquote></div><p style="margin-left:0; margin-right:0"><span>ioGame 是一個專為網絡編程設計的</span><span style="color:#262626">輕量級</span><span>框架，它可以幫助你快速地搭建和運行自己的網絡服務器。ioGame 適用於</span><strong><span style="color:#df2a3f">網絡遊戲服務器、物聯網、內部系統</span></strong><span>及各種需要長連接的場景。如各種類型和規模的網絡遊戲，無論是 H5、手遊還是 PC 遊戲，無論是簡單的聊天室，還是複雜的</span><strong><span style="color:#262626">全球同服</span></strong><span style="color:#262626">、回合制遊戲、策略遊戲、放置休閒遊戲、即時戰鬥、</span><span>MMORPG 等，ioGame 都可以滿足你的需求。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">ioGame 在打包、內存佔用、啓動速度等方面也是優秀的。打 jar 包後大約 </span><strong><span style="color:#262626">15MB</span></strong><span style="color:#262626">，應用通常會在 </span><strong><span style="color:#262626">0.x 秒</span></strong><span style="color:#262626">內完成啓動，內存佔用小。詳細請看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzm6qg2%23LF8Qh" target="_blank"><span>快速從零編寫服務器完整示例</span></a><span style="color:#262626">。</span></p><p style="margin-left:0; margin-right:0"><span>在生態融合方面，ioGame 可以很方便的與 spring 集成（5 行代碼）；除了 spring 外，還能與任何其他的框架做</span><strong><span>融合</span></strong><span>，如：solon&nbsp;</span><span>... 等，從而使用其他框架的相關生態。</span></p><p style="margin-left:0; margin-right:0"><span>在輕量級方面，ioGame </span><strong><span style="color:#df2a3f">不依賴任何第三方</span></strong><span>中間件或數據庫</span><strong><span style="color:#df2a3f">就能支持集羣、分佈式</span></strong><span>，只需要 java 環境就可以運行。這意味着在使用上簡單了，在部署上也為企業減少了部署成本、維護難度。使用 ioGame 時，只需一個依賴即可獲得整個框架，而無需在安裝其他服務，如： Nginx、Redis、MQ、Mysql、ZooKeeper、Protobuf 協議編譯工具...等。</span></p><p style="margin-left:0; margin-right:0"><span>ioGame 具備</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq" target="_blank"><span>全鏈路調用日誌跟蹤</span></a><span>特性，這在分佈式下非常的實用。該特性為每個請求分配一個唯一標識，並記錄在日誌中，通過唯一標識可以快速的在日誌中過濾出指定請求的信息。ioGame 提供的全鏈路調用日誌跟蹤特性更是強大，</span><strong><span>支持跨機器、跨進程</span></strong><span>。簡單的説，從玩家的請求進來到結束，無論該請求經過了多少個遊戲邏輯服，都能精準記錄。</span></p><p style="margin-left:0; margin-right:0"><span>在通訊方式方面，大部分框架只能支持推送（廣播）這一類型的通訊方式；ioGame 則提供了多種類型的通訊方式，通過對各種通訊方式的組合使用，可以簡單完成以往難以完成的工作，並且這些通訊方式都支持跨進程、跨機器通信，且具備全鏈路調用日誌跟蹤。這些通訊方式分別是</span></p><ol><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkrzxcmgoispw0gl8" target="_blank"><span>請求響應</span></a><span>（單次請求處理）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fqv4qfo" target="_blank"><span>廣播</span></a><span>（推送）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fanguu6" target="_blank"><span>單個邏輯服間的相互通訊</span></a><span>（可跨機器通信、可跨進程通信）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Frf9rb9" target="_blank"><span>與同類型多個邏輯服相互通訊</span></a><span>（可跨多個機器通信、可跨多個進程通信）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzgaldoxz6zgg0tgn" target="_blank"><span>脈衝通訊</span></a><span>（可跨多個機器通信、可跨多個進程通信）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33" target="_blank"><span>分佈式事件總線</span></a><span>（類似 MQ、Redis 發佈訂閲機制；可跨多個機器通信、可跨多個進程通信）</span></li></ol><p style="margin-left:0; margin-right:0"><span>在編碼風格上，ioGame 為開發者提供了類 MVC 的編碼風格（無入侵的 Java Bean ），這種設計方式很好的</span><strong><span>避免了類爆炸</span></strong><span>。同時，框架為開發者提供了同步、異步、異步回調的方法，用於邏輯服之間的相互訪問；這使得開發者所編寫的代碼會非常的優雅，並且具備全鏈路調用日誌跟蹤。</span></p><p style="margin-left:0; margin-right:0"><span>從 ioGame21 開始，框架添加了虛擬線程的相關支持。各邏輯服之間通信阻塞部分使用虛擬線程，這樣可以很好的避免阻塞業務線程，並大幅提高了框架的吞吐量。</span></p><p style="margin-left:0; margin-right:0"><span>在線程安全方面，框架為開發者解決了單個玩家的</span><strong><span>併發問題</span></strong><span>；即使玩家重新登錄後，也會使用相同的線程來消費業務，並推薦使用</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmfy1k" target="_blank"><span>領域事件</span></a><span>來解決同一房間或業務內多個玩家的併發問題。</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x" target="_blank"><span>框架在線程的擴展性</span></a><span>上提供了友好的支持，開發者可以很容易的編寫出無鎖併發代碼，這得益於 ioGame 獨有的線程執行器設計與擴展。換句話説，你不會因為併發問題煩惱。</span></p><p style="margin-left:0; margin-right:0"><span>在無鎖併發方面，ioGame 提供了優雅、獨特的線程執行器設計。通過該特性，開發者能輕易的編寫出無鎖高併發的代碼。</span></p><p style="margin-left:0; margin-right:0"><span>在連接方式方面，ioGame 允許開發者</span><strong><span>使用一套業務代碼</span></strong><span>，同時支持多種連接方式，無需進行任何修改。ioGame 已經支持了 TCP、WebSocket 和 UDP 連接方式，並且也支持在這幾種連接方式之間進行靈活切換。連接方式是可擴展的，並且擴展操作也很簡單，這意味着之後如果支持了 KCP，無論你當前項目使用的是 TCP、WebSocket 還是 UDP，都可以切換成 KCP；注意了，即使切換到 KCP 的連接方式，現有的業務代碼也無需改變。</span></p><p style="margin-left:0; margin-right:0"><span>在通信協議方面，ioGame 讓開發者</span><strong><span>用一套業務代碼</span></strong><span>，就能輕鬆</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuq2zrltrc7to27bt" target="_blank"><span>切換和擴展不同的通信協議</span></a><span>，如 Protobuf、JSON 等。只需一行代碼，就可以從 Protobuf 切換到 JSON，無需改變業務方法。</span></p><p style="margin-left:0; margin-right:0"><span>在增減協議方面，ioGame 可以讓你在</span><strong><span>新增或減少協議</span></strong><span>時，</span><strong><span>無需重啓</span></strong><span>遊戲對外服與 Broker（遊戲網關）；這樣既能避免玩家斷線，又能避免因新增、減少協議而重啓所有機器的痛點。</span></p><p style="margin-left:0; margin-right:0"><span>在協議碎片方面，action 支持自動裝箱、拆箱基礎類型特性，用於解決</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>協議碎片</span></a><span>的問題。同時該特性除了能使你的業務代碼更加清晰以外，還能大幅提高開發者在該環節的生產力。</span></p><p style="margin-left:0; margin-right:0"><span>在集羣方面，ioGame 的 Broker （遊戲網關）採用無中心節點、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fqmo56c" target="_blank"><span>自動化的集羣設計</span></a><span>，所有節點平等且自治，不存在單點故障。集羣能夠</span><strong><span>自動管理和彈性擴縮</span></strong><span>，節點加入或退出時，能夠自動保證負載均衡和數據一致性，不影響服務可用性。</span></p><p style="margin-left:0; margin-right:0"><span>在分佈式方面，ioGame 的邏輯服使用了分佈式設計思想，將服務器分為</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwotnhl" target="_blank"><span>遊戲對外服</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fensevx" target="_blank"><span>遊戲邏輯服</span></a><span>等不同層次，並且每一層都有明確的職責和接口。這樣可以提高代碼可讀性和可維護性，並且方便進行</span><strong><span>水平擴展</span></strong><span>。</span></p><p style="margin-left:0; margin-right:0"><span>在學習成本方面，ioGame 的學習成本非常低，可以説是</span><strong><span>零學習成本</span></strong><span>，即使沒有遊戲編程經驗，也能輕鬆上手。開發者只需掌握普通的 java 方法或 webMVC 相關知識，就能用框架開發業務。框架不要求開發者改變編碼習慣，而是自身適應開發者的需求。</span></p><p style="margin-left:0; margin-right:0"><span>在</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Funp26u" target="_blank"><span>同進程親和性</span></a><span>方面，在同一進程內，不同 Netty 實例之間的通信，是通過內存進行傳輸的，不需要經過網絡傳輸，數據傳輸速度極快。同進程親和性指的是，優先訪問同進程內的遊戲邏輯服，當同進程內沒有能處理請求的遊戲邏輯服時，才會去其他進程或機器中查找能處理請求的遊戲邏輯服；簡單點説，框架對於請求的處理很智能，會優先將請求給同進程內的邏輯服消費。</span></p><p style="margin-left:0; margin-right:0"><span>在開發體驗方面，ioGame 非常注重開發者的開發體驗；框架提供了 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fghng6g" target="_blank"><span>JSR380 驗證</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Favlo99" target="_blank"><span>斷言 + 異常機制</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fpf3sx0" target="_blank"><span>業務代碼定位</span></a><span>，action 支持自動裝箱、拆箱基礎類型，用於解決</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>協議碎片</span></a><span>的問題 ...等。諸多豐富的功能，使得開發者的業務代碼更加的清晰、簡潔；</span></p><p style="margin-left:0; margin-right:0"><span>業務框架提供了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fbsgvzglvlr5tenao" target="_blank"><span>插件</span></a><span>機制，插件是可插撥、可擴展的。框架內置提供了 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fpf3sx0" target="_blank"><span>DebugInOut</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fznapzm1dqgehdyw8" target="_blank"><span>action 調用統計</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzoqabk4gez3bckis" target="_blank"><span>業務線程監控插件</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fumzk2d6lovo4n9gz" target="_blank"><span>各時間段調用統計插件</span></a><span>...等插件；不同的插件提供了不同的關注點，比如我們可以使用調用、監控等插件相互配合，可以讓我們在開發階段就知道</span><strong><span>是否存在性能問題</span></strong><span>。合理利用好各個插件，可以讓我們在開發階段就能知道問題所在，提前發現問題，提前預防問題。</span></p><p style="margin-left:0; margin-right:0"><span>在分佈式開發體驗方面，通常在開發分佈式應用時是需要啓動多個進程的。這會讓調試與排查問題變得非常困難，從而降低開發者的效率、增加工作量等，這也是很多框架都</span><strong><span>解決不了的問題</span></strong><span>，但 ioGame 做到了！ioGame 支持多服單進程的啓動方式，這使得開發者在開發和調試分佈式系統時更加簡單。</span></p><p style="margin-left:0; margin-right:0"><span>與前端對接聯調方面，ioGame 提供了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Firth38" target="_blank"><span>遊戲文檔生成</span></a><span>的輔助功能，可以做到</span><strong><span>代碼即對接文檔</span></strong><span>。簡單地説，當業務代碼編寫完後，框架會自動生成最新的文檔。如果沒有遊戲文檔的生成，那麼你將要抽出一些時間來編寫、維護對接文檔的工作，而且當團隊人數多了之後，文檔就會很亂、不同步、不是最新的、忘記更新等情況就會出現。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">在部署方面，ioGame 支持</span><strong><span style="color:#262626">多服單進程</span></strong><span style="color:#262626">的方式部署，也支持</span><strong><span style="color:#262626">多服多進程</span></strong><span style="color:#262626">多機器的方式部署；在部署方式上可以隨意的切換而不需要更改代碼。日常中我們可以按照單體思維開發，到了生產可以選擇使用多進程的方式部署。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">在安全方面，所有的遊戲邏輯服</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fcklv8p%23NQ6Oc" target="_blank"><span>不需要開放端口，天然地避免了掃描攻擊</span></a><span style="color:#262626">。由於不需要為每個邏輯服分配獨立的端口，那麼我們在使用諸如雲服務器之類的服務時，就不需要擔心端口開放權限的問題了。別小看這一個環節，通常這些小細節最浪費開發者的時間。由於我們不需要管理這些 IP:Port，</span><strong><span style="color:#262626">這部分的工作量就自然地消失了</span></strong><span style="color:#262626">。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">在模擬客户端測試方面，ioGame 提供了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Ftc83ud" target="_blank"><span>壓測&amp;模擬客户端請求</span></a><span style="color:#333333">模塊。此模塊是用於模擬客户端，簡化模擬工作量，只需要編寫對應請求與回調。除了可以模擬簡單的請求外，通常還可以做一些複雜的請求編排，並支持複雜業務的壓測。</span><strong><span style="color:#333333">與單元測試不同的是，該模塊可以模擬真實的網絡環境，並且在模擬測試的過程中與服務器的交互是可持續的、可互動的，同時也是支持自動化的</span></strong><span style="color:#333333">。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">在</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzqgdv3g9if8w37vr" target="_blank"><span>架構靈活性</span></a><span style="color:#000000">方面，ioGame 的架構由三部分組成：1.遊戲對外服、2.Broker（遊戲網關）、3.遊戲邏輯服；三者既可相互獨立，又可相互融合。這意味着使用 ioGame 可以</span><strong><span style="color:#df2a3f">適應任何類型的遊戲</span></strong><span style="color:#000000">，因為只需通過調整部署方式，就可以滿足不同類型的遊戲需求。在 ioGame 中進行這些調整工作非常簡單，而且不會對現有代碼產生不良影響。</span></p><p style="margin-left:0; margin-right:0"><span>開發者基於 ioGame 編寫的項目模塊，通常是條理清晰的，得益於框架對</span><strong><span>路由的合理設計</span></strong><span>，同時也為路由提供了優雅的</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fnap5y8p5fevhv99y" target="_blank"><span>訪問權限控制</span></a><span>。當我們整理好這些模塊後，對於其他開發者接管項目或後續的維護中，會是一個不錯的幫助（</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fruaqza%2F%23OBwXQ" target="_blank"><span>模塊的整理與建議</span></a><span>）。或許現階段你感受不到這塊的威力，隨着你深入地使用實踐就能體會到這麼設計的諸多好處與優勢。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">開發者基於 ioGame 編寫的項目，通常是語法簡潔的、高性能的、低延遲的。框架最低要求使用 </span><strong><span style="color:#262626">JDK21</span></strong><span style="color:#262626">，這樣即可以讓項目享受到</span><strong><span style="color:#262626">分代 ZGC </span></strong><span style="color:#262626">帶來的改進，還能享受語法上的簡潔。分代 ZGC 遠低於其</span><strong><span style="color:#262626">亞毫秒級</span></strong><span style="color:#262626">暫停時間的目標，</span><span>可以在不影響遊戲速度的情況下，清理掉多餘的內存；這樣就不會出現卡頓或者崩潰的問題了，</span><span style="color:#262626">相當於在項目中變相的引入了一位 JVM 調優大師。</span></p><p style="margin-left:0; margin-right:0"><span>綜上所述，ioGame 是一個非常適合網絡遊戲開發的框架。可以讓你輕鬆地創建高性能、低延遲、易擴展的遊戲服務器，並且節省時間和資源。如果你想要快速地開發出令人驚豔的網絡遊戲，請不要猶豫，立即選擇 ioGame 吧！框架</span><span style="color:#262626">屏蔽了很多複雜且重複性的工作，並可為項目中的功能模塊結構、開發流程等進行</span><strong><span style="color:#262626">清晰的組織定義</span></strong><span style="color:#262626">，減少了後續的項目維護成本。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">框架在開發、部署、壓測&amp;模擬測試 ...等，各個階段都提供了很好的支持。</span><span>相信你已經對 ioGame 有了一個初步的瞭解，雖然還有很多豐富的功能與特性沒有介紹到，但你可以通過後續的實踐過程中來深入瞭解。感謝你的閲讀，並期待你使用 ioGame 來打造自己的遊戲服務器。</span></p></div><hr><div><h2><span>ioGame 的組成</span></h2><p style="margin-left:0; margin-right:0"><span>ioGame 由 [</span><span style="color:#e8323c">網絡通信框架</span><span>] 和 [</span><span style="color:#e8323c">業務框架</span><span>] 組成</span></p><ul><li><span style="color:#333333">網絡通信框架：職責是各服務器之間的網絡通信</span></li><li><span style="color:#333333">業務框架：職責是業務邏輯的處理方式和編寫方式</span></li></ul><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">網絡通信框架</span></strong></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sofastack.tech%2Fprojects%2Fsofa-bolt%2Foverview%2F" target="_blank"><span>SOFABolt</span></a><span> 是螞蟻金融服務集團開發的一套基於 Netty 實現的網絡通信框架。</span></p><ul><li><span>為了讓 Java 程序員能將</span><span style="color:#e8323c">更多的精力放在</span><span>基於網絡通信的</span><span style="color:#e8323c">業務邏輯實現上</span><span>，而不是過多的糾結於網絡底層 NIO 的實現以及處理難以調試的網絡問題，Netty 應運而生。</span></li><li><span>為了讓中間件開發者能將更多的精力放在產品功能特性實現上，而不是重複地一遍遍製造通信框架的輪子，SOFABolt 應運而生。</span></li></ul><p style="margin-left:0; margin-right:0"><span>Bolt 名字取自迪士尼動畫-閃電狗，是一個基於 Netty 最佳實踐的</span><span style="color:#e8323c">輕量、易用、高性能、易擴展</span><span>的通信框架。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">業務框架</span></strong></p><p style="margin-left:0; margin-right:0"><span>如果説 </span><span>sofa-bolt</span><span> 是為了讓 Java 程序員能</span><span style="color:#000000">將更多的精力放在基於網絡通信的業務邏輯實現上</span><span>。而業務框架正是</span><span style="color:#e8323c">解決</span><span>業務邏輯</span><span style="color:#e8323c">如何方便實現</span><span>這一問題上。業務框架是遊戲框架的一部分，職責是簡化程序員的業務邏輯實現，業務框架使程序員能夠快速的開始編寫遊戲業務。</span></p><p style="margin-left:0; margin-right:0"><span>業務框架對於每個 action （即業務的處理方法） 都是通過 </span><a href="https://www.oschina.net/p/reflectasm" target="_blank"><span>asm</span></a><span> 與 Singleton、Flyweight 、Command 等設計模式結合，對 action 的獲取上通過 array 來得到，是一種近原生的方式。</span></p><hr><div><h2><span>架構簡圖</span></h2><p><img alt="" height="387" src="https://foruda.gitee.com/images/1708310869810934709/12963674_5475.jpeg" width="621" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><span style="color:#e8323c">通過 ioGame 你可以很容易的搭建出一個集羣無中心節點、集羣自動化、分佈式的網絡遊戲服務器！</span></p><p style="margin-left:0; margin-right:0; text-align:left"><span>從圖中可以看出，遊戲網關支持以集羣方式啓動多個實例。這個設計選擇了集羣的方式，因為遊戲網關通常是無狀態的，主要作用是解耦各邏輯服之間的關係、負載均衡、調度和轉發任務。</span></p><div><p style="margin-left:0; margin-right:0"><span>而遊戲對外服、遊戲邏輯服使用分佈式設計，支持啓動多個相同類型的服務。這意味着，當玩家數量增加時，我們可以輕鬆增加相應類型的遊戲邏輯服以處理更多請求。</span></p><p style="margin-left:0; margin-right:0"><span>以遊戲邏輯服為例，假設我們啓動了兩個 A 類型的遊戲邏輯服，分別為 A-1 和 A-2。當玩家向 A 類型的遊戲邏輯服發起多次請求時，遊戲網關會使用默認的隨機負載策略將請求分配給 A-1 和 A-2 來處理。</span></p><p style="margin-left:0; margin-right:0"><span>現在我們明白，遊戲對外服和遊戲邏輯服都支持動態增加和減少。無論未來玩家數量增加或減少，我們都能夠輕鬆應對。架構是支持玩家無感知更新的，這得益於分佈式設計。舉例來説，如果 A 類型的遊戲邏輯服需要增加一些新功能，我們可以啓動 A-3、A-4 等已經支持了新功能的服務器，然後逐步將之前的 A-1 和 A-2 下線，從而實現了無感知的更新。</span></p><p style="margin-left:0; margin-right:0"><span>此外，框架還支持玩家</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fidl1wm" target="_blank"><span>動態綁定遊戲邏輯服</span></a><span>；玩家與遊戲邏輯服綁定後，之後的請求都由該遊戲邏輯服來處理。</span></p><p style="margin-left:0; margin-right:0"><span>除了遊戲之外，ioGame 也適用於物聯網相關項目。只需將圖中的玩家視為具體的設備，即使存在數億個設備，ioGame 的架構也可以輕鬆支持。從 2022 年開始，已經有一些物聯網公司開始採用這一解決方案，並得到了很好的體驗。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span>ioGame 適用於</span><strong><span style="color:#df2a3f">網絡遊戲服務器、物聯網、內部系統</span></strong><span>及各種需要長連接的場景；</span></p></div><table border="1" cellspacing="0" style="border-collapse:collapse; border:1px solid #d9d9d9; table-layout:fixed; width:583px"><tbody><tr><td style="background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>名稱</span></p></td><td style="background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>擴展方式</span></p></td><td style="background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>職責</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>遊戲對外服</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>分佈式</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>與玩家連接、交互</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>遊戲邏輯服</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>分佈式</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>處理具體業務邏輯</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Broker（遊戲網關）</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>集羣</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>調度和轉發任務；</span></p></td></tr></tbody></table><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span>無鎖異步化與事件驅動的架構設計、集羣無中心節點、自帶負載均衡、分佈式支持、可動態增減機器、避免類爆炸的設計；</span></p><hr><h2>通過 ioGame 可以使得遊戲編程變得簡單，下面是一個業務示例</h2><div><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">協議文件定義</span></strong></p><p style="margin-left:0; margin-right:0"><span>首先我們自定義一個協議文件，這個協議文件作為我們的業務載體描述。這個協議是純 java 代碼編寫的，使用的是 jprotobuf，jprotobuf 是對 </span><span>google protobuf</span><span> 的簡化使用，性能同等。</span></p><p style="margin-left:0; margin-right:0"><span>可以把這理解成 DTO、POJO、業務數據載體等，其主要目的是用於業務數據的傳輸；</span></p><pre><code class="language-java">/** 請求 */
@ProtobufClass
@FieldDefaults(level = AccessLevel.PUBLIC)
public class HelloReq {
    String name;
}</code></pre><p>&nbsp;</p></div><div><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">Action</span></strong></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">遊戲服務器的編程，遊戲服務器接收業務數據後，對業務數據進行處理；下面這段代碼可以同時支持 TCP、WebSocket、UDP 通信方式。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">示例代碼中展示了玩家的請求與響應處理，還展示了跨服（跨進程、跨機器）的請求處理的示例。</span><span style="background-color:#f5f5f5; color:#262626">無入侵的 Java Bean。</span></p></div><pre><code class="language-java">@ActionController(1)
public class DemoAction {
    @ActionMethod(0)
    public HelloReq here(HelloReq helloReq) {
        // 業務數據
        var newHelloReq = new HelloReq();
        newHelloReq.name = helloReq.name + ", I'm here ";
        return newHelloReq;
    }

    // 注意，這個方法只是為了演示而寫的；（ioGame21 開始支持）
    // 效果與上面的方法一樣，只不過是用廣播（推送）的方式將數據返回給請求方
@ActionMethod(0)
    public void here(HelloReq helloReq, FlowContext flowContext) {
        // 業務數據
        var newHelloReq = new HelloReq();
        newHelloReq.name = helloReq.name + ", I'm here ";

        flowContext.broadcastMe(newHelloReq);
    }

    // 跨服調用示例，下面分別展示了同步與異步回調的寫法
    void testShowInvokeModule(FlowContext flowContext) {
        /*
         * 框架為跨服請求提供了同步、異步、異步回調的編碼風格 api。（ioGame21 開始支持）
         */
        var cmdInfo = CmdInfo.of(1,0);
        var yourData = ... 你的請求參數
        
        // 跨服請求（異步回調 - 無阻塞）-- 路由、請求參數、回調。
        flowContext.invokeModuleMessageAsync(cmdInfo, yourData, responseMessage -&gt; {
            var helloReq = responseMessage.getData(HelloReq.class);
             // --- 此異步回調，具備全鏈路調用日誌跟蹤 ---
            log.info("異步回調 : {}", helloReq);
        });


        // 跨服請求（同步 - 阻塞）-- 路由、請求參數。
        ResponseMessage responseMessage = flowContext.invokeModuleMessage(cmdInfo, yourData);
        var helloReq = responseMessage.getData(HelloReq.class);
        log.info("同步調用 : {}", helloReq);
    }
}</code></pre><div><p style="margin-left:0; margin-right:0"><span>一個方法（here）在業務框架中表示一個 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fsqcevl" target="_blank"><span>Action</span></a><span>（一個業務動作）。</span></p><p style="margin-left:0; margin-right:0"><span>方法聲明的參數是用於接收前端傳入的業務數據，在方法 return 時，數據就可以被遊戲前端接收到。程序員可以不需要關心業務框架的內部細節。</span></p><p style="margin-left:0; margin-right:0"><span>從上面的示例可以看出，這和普通的 java 類並無區別，同時這種設計方式</span><strong><span style="color:#fa8c16">避免了類爆炸</span></strong><span>。如果</span><span style="color:#e8323c">只負責編寫遊戲業務</span><span>，那麼對於業務框架的學習可以</span><span style="color:#e8323c">到此為止</span><span>了。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">遊戲編程就是如此簡單</span><span>！</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span>問：我可以開始遊戲服務</span></strong><strong><span style="color:#333333">器</span></strong><strong><span>的編程了嗎？</span></strong></p><p style="margin-left:0; margin-right:0"><span>是的，你已經可以開始遊戲服務</span><span style="color:#333333">器</span><span>的編程了。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span>訪問示例（控制枱）</span></strong></p><p style="margin-left:0; margin-right:0"><span>當我們訪問 </span><span style="color:#e8323c">here </span><span>方法時（通常由遊戲前端來請求），控制枱將會打印</span></p><pre><code>┏━━━━━ Debug. [(DemoAction.java:4).hello] ━━━━━ [cmd:1-0 65536] ━━━━━ [邏輯服 [xxx 邏輯服] - id:[76526c134cc88232379167be83e4ddfc]]
┣ userId: 1
┣ 參數: active : HelloReq(id=101, name=塔姆)
┣ 響應: HelloReq(name=塔姆, I'm here )
┣ 時間: 1 ms (業務方法總耗時)
┗━━━━━ [ioGameVersion] ━━━━━ [線程:User-8-2] ━━━━━━━ [traceId:956230991452569600] ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</code></pre><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span>控制枱打印説明</span></strong></p><div><blockquote><p style="margin-left:0; margin-right:0"><span style="color:#e8323c">Debug. [(DemoAction.java:4).here]</span><span> : </span></p><p style="margin-left:0; margin-right:0"><span>&nbsp;&nbsp;&nbsp;&nbsp;表示執行業務的是 </span><span style="color:#000000">DemoAction</span><span> 類下的 </span><span style="color:#000000">here</span><span> 方法，</span><span style="color:#f5222d">4</span><span> 表示業務方法所在的代碼行數。</span></p><p style="margin-left:0; margin-right:0"><span>&nbsp;&nbsp;&nbsp;&nbsp;在工具中點擊控制枱的 </span><span style="color:#000000">DemoAction.java:4</span><span> 這條信息，就可以跳轉到對應的代碼中（</span><span style="color:#52c41a">快速導航到對應的代碼</span><span>），這是一個開發良好體驗的開始！</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">userId</span><span> : 當前發起請求的，用户 id。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">參數</span><span> : 通常是遊戲前端傳入的值。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">響應</span><span>：通常是業務方法返回的值 ，業務框架會把這個返回值推送到遊戲前端。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">時間</span><span>：執行業務方法總耗時，我們可根據業務方法總耗時的時長來優化業務。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">路由信息</span><span>：[cmd - subCmd]</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fsoxp4u" target="_blank"><span>路由</span></a><span>是唯一的訪問地址。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">ioGameVersion</span><span>：表示當前所使用的 ioGame 版本。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">線程</span><span>：當前執行 action 所使用的線程。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">traceId</span><span>：全鏈路調用日誌跟蹤 id，每個請求唯一。（該特性在分佈式下非常實用）</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">邏輯服</span><span>：當前遊戲邏輯服與其 id</span></p></blockquote></div><p>&nbsp;</p><p style="margin-left:0; margin-right:0"><span>有了以上信息，遊戲開發者可以很快的定位問題。如果沒有可視化的信息，開發中會浪費很多時間在前後端的溝通上。問題包括：</span></p><ul><li><span>是否傳參問題 （遊戲前端説傳了）</span></li><li><span>是否響應問題（遊戲後端説返回了）</span></li><li><span>業務執行時長問題 （遊戲前端説沒收到響應， 遊戲後端説早就響應了）</span></li></ul><p style="margin-left:0; margin-right:0"><span>其中</span><span style="color:#f5222d">代碼導航</span><span>可以讓開發者快速的跳轉到業務類對應代碼中，在多人合作的項目中，可以快速的知道業務經過了哪些方法的執行，使得我們可以快速的進行閲讀或修改；</span></p><hr><div>
    &nbsp;
   </div><h2><span>框架內置的其他功能</span></h2><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>內置多種可選模塊，可按需選擇，以方便應用開發：</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmfy1k" target="_blank"><span>領域事件</span></a><span> （</span><span style="color:#333333">輕量級</span><span>單機最快 MQ -- </span><strong><span style="color:#333333">disruptor</span></strong><span style="color:#333333">；通過</span><span>領域事件模塊，可為你的系統實現類似 Guava-EventBus、Spring 事件驅動模型 ApplicationEvent、業務解耦、規避併發、不阻塞主線程...等，各種浪操作）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fniflk0" target="_blank"><span>任務延時器</span></a><span> （將來某個時間可對任務進行執行、暫停、取消等操作，並不是類似 Quartz 的任務調度）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fekx6ve" target="_blank"><span>多環境切換</span></a><span> （不同運行環境下的配置支持）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fvpe2t6" target="_blank"><span>light-jprotobuf </span></a><span> （</span><span style="color:#333333">補足 jprotobuf 不能讓多個對象在單個 .proto 源文件中生成的需求，並簡化 jprotobuf 對源文件的註釋</span><span>）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwz7af5" target="_blank"><span>分佈式鎖</span></a><span> (基於 Redisson 的簡單實現)</span></li></ul><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>內置的其他功能：</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuueq3i" target="_blank"><span>心跳相關</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fhv5qqh" target="_blank"><span>用户上線、離線相關的鈎子方法</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwg6lk7" target="_blank"><span>UserSessions</span></a><span> （對所有用户 UserSession 的管理，統計在線用户等）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwg6lk7" target="_blank"><span>UserSession</span></a><span> (與 channel 是 1:1 的關係，可取到對應的 userId、channel 等信息。)</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Ftywkqv" target="_blank"><span>登錄相關</span></a><span>（提供重複登錄、頂號等相關增強功能）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>業務參數基礎類型，自動裝箱、拆箱</span></a><span>（解決協議碎片）</span></li></ul><hr><h2><span>適合人羣？</span></h2><ol><li><span style="color:#333333">長期從事 web 內部系統開發人員， 想了解遊戲的</span></li><li><span style="color:#333333">剛從事遊戲開發的</span></li><li><span style="color:#333333">未從事過遊戲開發，但卻對其感興趣的</span></li><li><span>對設計模式在實踐中的應用和 sofa-bolt 有興趣的學習者</span></li><li><span>可以接受新鮮事物的</span></li><li><span style="color:#40485b">想放棄祖傳代碼的</span></li></ol><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#333333">推薦實際編程經驗一年以上的人員。</span></p></div><p><span style="background-color:#ffffff; color:#333333">ioGame&nbsp;</span><span style="background-color:#ffffff; color:#333333">提供了豐富的在線高質量使用文檔，為你的團隊助力，帶上你們的小夥伴一起，這樣就不用手把手的教了。</span></p></div></div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 03:23:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279153</guid>
            <link>https://www.oschina.net/news/279153</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌開源 Magika —— AI 驅動的文件類型檢測工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌開源了由 AI 驅動的文件內容類型識別工具，聲稱能夠在毫秒級內精確識別超過 100 種不同文件類型，無論是二進制文件還是文本文件。</p><p>在谷歌內部，Magika 被用於提升用户安全，幫助對 Gmail、Drive 和安全瀏覽中的文件進行安全檢查和內容策略掃描。</p><p>Magika 是基於深度學習技術的文件類型識別系統，用於準確檢測二進制和文本文件類型。在底層，Magika 採用定製的、高度優化的深度學習模型，即使在 CPU 上運行，也能在幾毫秒內實現精確的文件識別。</p><p><strong>主要特性</strong></p><ul><li>AI 驅動的準確識別：Magika 使用了一個自定義的、高度優化的深度學習模型，使得它能夠在幾毫秒內準確識別出二進制和文本文件的類型，即便是在 CPU 上運行也能快速完成。</li><li>支持多種文件類型：它能夠識別超過 100 種不同的文件類型，包括常見的文檔、圖片、代碼文件和配置文件等。</li><li>高效性能：在包含 100 萬文件的基準測試中，Magika 的識別性能比其他現有工具高出約 20%，尤其在處理文本文件（包括代碼文件和配置文件）時，展現出更大的性能優勢。</li><li>廣泛應用：Magika 在 Google 內部被廣泛用於提高用户安全，如通過改進的文件類型識別準確性，幫助路由 Gmail、Drive 和安全瀏覽文件到適當的安全和內容政策掃描器。</li><li>簡單易用的安裝和使用：Magika 可以作為 Python 庫和獨立的命令行工具安裝，用户可以通過簡單的命令行指令 pip install magika 進行安裝，無需 GPU。</li><li>開源和易於集成：Magika 的代碼和模型在 GitHub 上免費提供，並且採用 Apache2 許可證，便於其他軟件改進其文件識別準確性和為研究人員提供大規模識別文件類型的可靠方法。</li><li>即將與 VirusTotal 集成：Magika 將與 VirusTotal 集成，提高平台分析和檢測惡意代碼的效率和準確性，有助於全球網絡安全生態系統的建設。</li></ul><p><strong style="color:#1f2328">Magika 命令行輸出示例</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f0a4182522f53b7a69907f3cff050925ff.png" referrerpolicy="no-referrer"></p><p><strong>Magika 性能表現</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a000ebca68cba1bd5474364a310062139b7.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f6613706bdb006061e8d8b1f16111cd4e17.png" referrerpolicy="no-referrer"></p><p>開源地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoogle%2Fmagika" target="_blank">https://github.com/google/magika</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 02:56:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279147/magika-ai-powered-type-identification</guid>
            <link>https://www.oschina.net/news/279147/magika-ai-powered-type-identification</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DuckDB 0.10.0 發佈，進程內 SQL OLAP 數據庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>DuckDB 是高性能的分析型關係數據庫，旨在實現高效的數據分析。它易於安裝，運行速度非常快，並且可以在進程內 (in-process) 運行。</p><p>DuckDB 背後的核心思想是保留 SQLite 的簡單性和易用性，同時通過 R/Python 和 RDBMS 之間的快速分析處理和快速數據傳輸進行增強，以處理 OLAP 工作負載。</p><p><img src="https://oscimg.oschina.net/oscnet/up-caace40d3bce877cf9ab51b22de5f009173.png" referrerpolicy="no-referrer"></p><p>該項目被命名為 「DuckDB」，因為創建者認為鴨子具有彈性並且可以靠任何東西為生，類似於他們設想的數據庫系統運行方式。</p><p>DuckDB 最新版本 "Fusca"&nbsp;<span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">0.10.0 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fduckdb%2Fduckdb%2Freleases%2Ftag%2Fv0.10.0" target="_blank">已發佈</a></u>，主要變化如下：</span></p><ul><li>CSV 讀取器重構</li><li>固定長度數組</li><li>多數據庫支持</li><li>密鑰管理器</li><li>臨時內存管理器</li><li>自適應無損浮點壓縮 (ALP)</li><li>CLI 改進</li></ul><p>其他變化包括破壞性的 SQL 改動、改進向後和向前兼容性，詳情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fduckdb.org%2F2024%2F02%2F13%2Fannouncing-duckdb-0100.html" target="_blank">發佈公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 02:30:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279140/duckdb-0-10-0-released</guid>
            <link>https://www.oschina.net/news/279140/duckdb-0-10-0-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[資深架構師解讀工行基於 Spring Boot 的專利]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><a href="https://www.oschina.net/news/279004">據國家知識產權局公告</a>，中國工商銀行股份有限公司近日取得一項名為 「基於 SpringBoot 的 web 系統後端實現方法及裝置 「的專利，授權公告號 CN112905176B，申請日期為 2021 年 2 月。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c517204b09e40c8390e687c6f85f1da3004.png" alt="" referrerpolicy="no-referrer"></p><p>這項專利很多程序員表示看不懂，或者直接認為是一個 CRUD 專利。我作為一個架構師，嘗試從<strong>深到淺的解讀一下這個專利</strong>，以及專利背後，工行架構師面臨的架構困境。</p><p>從架構觀點來看，此專利本質上「配置驅動的業務開發專利」，用於解決系統架構中易修改性，可觀測的難題。</p><h2>架構師困境</h2><p>我們知道，架構主要目標是對軟件系統分解成較小更容易實現的元素，如模塊或者子系統，並能讓這些元素協同完成業務需求，對於通常的程序員視角來説，架構貌似就是畫幾個框，然後連上線即可。</p><p>如下是一個分佈式系統最簡單的架構。看着很簡單的倆框一線，但架構師卻需要考慮的非常多，這也是架構師和普通程序員區別</p><p><img src="https://oscimg.oschina.net/oscnet/up-cc49cf84d4b55abce840f054f572acfdf4c.jpg" alt="" referrerpolicy="no-referrer"></p><p>A 服務的架構師需要考慮</p><ul><li>如果服務 B 不可用，服務 A 如何保證高可用.比如宕機，故障，虛機漂移，網絡故障</li><li>如果服務 B 出現阻塞，性能下降，服務 A 如何保性能不受影響</li><li>服務 A 調用服務 B，是否一定需要等待服務 B 的響應，能否解耦 A 和 B 調用，避免前面 2 個問題</li><li>服務 A 如果是通過其尋址服務到 B，如果尋址服務不可用，如何調用服務 B</li></ul><p>B 服務作為服務提供者，架構師需要考慮的更多</p><ul><li>如何保證服務 B 支持大併發的操作</li><li>如何保證服務 B 支持大流量操作，甚至是不正常突發高流量下仍然可用，比如斷網恢復後的高流量</li><li>如果服務 B 的下游不可用，如何給服務 A 提供可用接口</li><li>服務 B 的更新重啓，會對服務 A 產生什麼樣的影響</li><li>如何可觀測服務 B 的調用</li><li>如果服務 B 是公網服務，如何保證安全，數據被授權用户調用</li></ul><p>B 服務架構師還需要考慮意外情況，如服務 A 的 Bug</p><ul><li>服務 A 應該只調用服務 B 一次，但實際服務 A 調用了多次</li><li>服務 A 調用頻率應該是 1 分鐘一次，但實際 1 秒一次</li><li>服務 A 應該先後順序調用 B 倆次不同接口，但調用順序相反。這種可能是 A 的 Bug，或者是事件驅動架構裏順序問題。</li></ul><p>對這種「倆框一線」如此簡單的架構，可以看到架構師相比於初級程序員，需要考慮較多，需要考慮 13+種情況。這種考慮其實也不是架構師撓禿頭髮想到的，而是基於技術架構的架構質量考慮的，有種説法，説是架構質量驅動了架構設計。</p><p>我認為現在的大部分系統都受到如下架構質量的驅動</p><ul><li>架構的高可用：是系統能夠正常運行的時間比例。可用性 999，即 99.9% ,一年出故障時間為 8.76 小時。</li><li>架構的高性能：系統的響應時間. 相比單體系統，微服務架構，實現一個功能需要調用若干微服務，每個微服務性能影響了系統響應速度。 一個衡量性能的指標 TP95 TODO 和吞吐量。本書涉及單機，分佈式性能優化的戰術實現</li><li>架構的可觀測：通常架構的可觀測指的是能觀測到系統運行情況，粗到監控服務的主機指標，或者每個服務調用次數，細到監測和統計某個關鍵邏輯調用次數，時長等等。</li><li>架構的可修改，比如通過可配置實現系統的可修改，其他還包括使用 EventBus，使用代理（如 API 網關），使用 DSL 語言（最著名的 DSL 應該是 SQL 了,屏蔽了不同數據庫差異)，使用腳本引擎，使用 classloader，dcevm 等熱加載技術。</li></ul><p>其他架構質量還有可部署，可配置，可升級，跨平台，易用性等。可參考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F261499%3Futm_source%3Dzhihu%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank"> 自動源代碼質量度量（ISO/IEC 5055）</a>,每個質量屬性都對應了大量的軟件技術戰術和實現，但因為篇幅有限，且不是此的重點內容，在這裏不再像詳細敍述。</p><p>針對工行的專利，之所以前面要這麼囉嗦的提到架構的質量，是因為我認為工行的專利背後，是其工行架構師是解決工行業務系統的架構的倆個質量屬性</p><ul><li>可修改性：當業務需求變化，系統如何能快速調整上線。不需要開發，甚至不需要重啓系統，業務變動也能通過灰度上線，或者能回滾。</li><li>可觀測，這裏的可觀測，指的是業務變動的可觀測，系統經歷了多少次業務變動，每次變動，系統做了什麼調整</li></ul><h2>專利解讀</h2><p>在文章開頭·，提到了專利的本質是「配置驅動的業務開發」，可以從專利摘要中解讀出來</p><p><em>本發明公開了一種基於 SpringBoot 的 web 系統後端實現方法及裝置，其中該方法包括：接收頁面顯示層上送的操作數據；從操作數據中提取操作數據對應的業務 ID 和維護對象 ID；從<strong>數據訪問層</strong>存儲的業務參數表中，獲取與業務 ID 對應的配置信息，所述配置信息包括不同數據字段各自對應的業務處理邏輯、每個數據字段所在的數據表，以及每個數據字段與數據表中表字段的<strong>映射關係</strong>；將維護對象 ID 和業務處理邏輯組合為條件表達式；利用所述條件表達式處理所述操作數據。本發明可以減少後端業務層在開發過程中的變動，降低開發成本，同時提升系統的穩定性。</em></p><p>注意到專利提到了<strong>維護對象 ID</strong>和<strong>業務 ID</strong>，維護對象就是 CRUD 的目標對象，業務 ID 則告訴瞭如何 CRUD，業務 ID 最終將生成多個 SQL 語句 (專利中提到的條件表達式)。這種生成是自動的，基於業務 ID 相關配置，這也是我説的專利本質是<strong>配置驅動開發</strong>。以專利中的例子做説明，業務提交如下數據</p><pre><code class="language-JSON">{
sys_busi_id:"31000",
data_inf:{
    stu_name:"張三",
    stu_sex:"男",
    address:"xxxxx"
}
}
</code></pre><p>工行的系統，通過 sys_busi_id，可以將頁面提交的對象映射成倆個 sql 語句並執行，這樣，不需要後台程序員開發任何代碼</p><pre><code class="language-SQL">insert into stu ("id","name","sex") values (?,?,?);
insert into stu_address ("address","stu_id") values (?,?)
</code></pre><p>講到這裏，你可能比較疑惑，如何生成 SQL 語句和相應的參數呢，這專利中並沒有提到。這可能是在其他專利中，或者是此部分實現已經基於某個開源實現。 或者我解讀這是系統更核心部分，過於強大，不方便對外公佈。我這裏列出供參考的開源實現，如</p><ul><li>APIJSON, 騰訊公司開源的工具，零代碼、全功能、強安全 ORM 庫 ，後端接口和文檔零代碼，前端 (客户端) 定製返回 JSON 的數據和結構</li><li>低代碼平台，如 JEECG 等低代碼開源平台，無需編碼即可實現全棧業務功能。</li></ul><p>回到業務 ID，上面説了專利並沒有講清楚業務 ID 是如何維護。但跟普通的對象 ID 一樣，也是需要增刪改查，保持歷史版本以支持可觀察，以及可回滾。業務 ID 的數據結構是一個配置，類似如下 JSON ( 注意：以下 JSON 是我的想象，並非專利一部分「）</p><pre><code class="language-JSON">{
    sys_busi_id:"31000",
    mapping_table:{
        stu:["stu_name","stu_sex"],
        stu_address :["address"]
    },
    validate:{
        "stu_sex":{"in":["男"，"女"]}
        "address":"@adressExpression(?)"
    }
}
</code></pre><p>上面的 json 格式中，mapping_table 指示瞭如何字段映射到數據庫表中，validate 則指示了入庫前，服務端如何校驗數據。這推測這裏的 validate 有可能複用了 Spring Boot 的 validation starter。</p><p>如果你還能耐心讀到這裏，你可能更加疑惑，維護業務 ID 豈不是非常麻煩。答案：是的。 想來工行的架構師設計出來的這套系統，程序員都需要了解這一套新的這種 DSL 而不是用 Java 做 CRUD（上面的 JSON，我在架構的可修改裏提到過 DSL），學過 SQL 都知道 SQL 還是比較難學， 學習一套處理業務的專用 DSL 更難，其他難點還有</p><ul><li>是否有可視化界面管理這些配置對象」業務 ID「，比如可視化界面建立業務對象和數據庫表的映射</li><li>如何驗業務 ID 的正確性，比如上面寫的"@adressExpression(?)"，程序員少寫了個」d「</li><li>即使有可視化界面，最終也要導出成 DSL，在驗收或者生產環境上執行生效，DSL 語言可能非常難學</li><li>這種 DSL 需要有版本概念，這在專利中沒有看到提到，但想來應該為了能回滾，應該支持版本概念。</li><li>業務 ID 的修改和上線，應該有一個完整的流程，涉及了產品，QA，項目經理等人審批，發佈上線。可能還需要跟工行已有的 DevOp 系統結合起來。</li></ul><h2>結論</h2><p>儘管維護<strong>業務 ID</strong>非常麻煩，甚至程序員覺得得不償失，但架構的可修改性和可觀測得到了滿足。對於工行這樣一個大體量的公司和它的大體量系統，這個投入還是很划算的，這也是為什麼此基於配置驅動開發的系統能在工行應用並申請為專利的原因。相比起其他低代碼平台，可能功能弱一點，但基於工行特定應用，應該是能滿足的架構可修改性和可觀測</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 12:04:27 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/xiandafu/blog/11043929</guid>
            <link>https://my.oschina.net/xiandafu/blog/11043929</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[這份判決給軟件開發者吃了定心丸]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center">這份判決給軟件開發者吃了定心丸&nbsp;</p><p style="text-align:center">——最高法知產法庭平衡保護軟件開源社區建設和軟件開發者權益受好評</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-bb51b7fb3d2d3dce3dc1df70b6d8a034349.png" referrerpolicy="no-referrer"></p><p>「最高人民法院對本案的妥善處理，合理地界定了 GPLv2（開源協議——記者注）此類開源許可證軟件二次開發者的權利邊界，為我國正在建設有中國特色的開源社區樹立了標杆，是我國軟件開發行業的重要里程碑，意義非凡。」</p><p>2023 年 11 月 22 日，蘇州某網絡科技有限公司總經理劉繼明專程來到最高人民法院知識產權法庭，向合議庭團隊贈送了錦旗與上述感謝信（節選）。</p><p>「你們的判決，提振了軟件研發企業信心，我真正在自己的身上感受到了人民法院‘努力讓人民羣眾在每一個司法案件中感受到公平正義’。」劉繼明握着法官的手激動地表達着感謝。</p><p><span style="color:#2980b9"><strong>是誰泄露了研發秘密？</strong></span></p><p>蘇州某網絡科技有限公司是一家國家重點高新技術企業，自 2009 年起，該公司陸續投入研發經費約 2589 萬元，完成了一款名稱為「OfficeTen」的網關產品系統軟件，並於 2013 年取得國家版權局「OfficeTen1800 系統軟件（V1.8)」的著作權登記證書。該軟件面向的客户多為中國移動、中國電信等國內大型通信運營商，有廣闊的市場前景。</p><p>直到有一天，他們發現，市場上出現了假李逵。</p><p>2016 年 1 月，蘇州某網絡科技有限公司從浙江某通信科技有限公司的經銷商處購得浙江某通信科技有限公司生產的企業網關一台，經比對，該設備軟件運行結果中存在蘇州某網絡科技有限公司軟件源代碼特殊標記，且兩軟件運行結果存在其他相同的指標。</p><p>是誰泄露了研發秘密？蘇州某網絡科技有限公司深入調查發現，浙江某通信科技有限公司在劉某、吳某從蘇州某網絡科技有限公司離職後，就與二人接觸並將二人聘為其員工。</p><p>劉某、吳某均曾是蘇州某網絡科技有限公司員工，曾分別在蘇州某網絡科技有限公司擔任硬件工程師、嵌入式工程師。二人在職期間是涉案軟件開發項目組的重要成員，均能夠正常接觸到該軟件開發所涉及的技術信息。</p><p>蘇州某網絡科技有限公司深入調查發現，浙江某通信科技有限公司間接設立了關聯網絡公司作為「防火牆」，劉某、吳某名義上受聘於關聯網絡公司，實質上直接為浙江某通信科技有限公司開發網關用軟件。他們非法登錄蘇州某網絡科技有限公司的服務器，下載了涉案軟件的源代碼，使關聯網絡公司在數月時間內完成了與涉案軟件高度相似的被訴軟件；而被訴軟件系專門用於浙江某通信科技有限公司生產的網關產品的嵌入式軟件，浙江某通信科技有限公司在市場上公開銷售相應的網關產品，並直接在各類招標中與蘇州某網絡科技有限公司發生競爭關係，搶奪原本與蘇州某網絡科技有限公司合作的客户，獲利不菲。</p><p>蘇州某網絡科技有限公司於 2016 年 7 月以吳某、浙江某通信科技有限公司涉嫌侵犯著作權罪向蘇州市公安機關報案。經公安機關委託鑑定機構進行鑑定，被訴軟件與涉案軟件的 1800-c 版本非開源源代碼相同率高達 90.2%，二者實質相似。</p><p>隨後，蘇州某網絡科技有限公司又以浙江某通信科技有限公司等未經許可擅自複製、修改、發行蘇州某網絡科技有限公司享有著作權的涉案軟件為由向江蘇省蘇州市中級人民法院提起訴訟。</p><p>浙江某通信科技有限公司與關聯網絡公司基於 GPLv2 協議提出了不侵權抗辯。蘇州中院認為，該不侵權抗辯不能成立。蘇州中院最終認定侵權成立，據此判令浙江某通信科技有限公司等停止侵權，並賠償蘇州某網絡科技有限公司經濟損失及合理費用。</p><p>浙江某通信科技有限公司和關聯網絡公司不服這份判決，向最高人民法院提起上訴。</p><p><span style="color:#2980b9"><strong>不侵權抗辯是否成立？</strong></span></p><p>浙江某通信科技有限公司等被訴侵權人基於 GPLv2 協議提出的不侵權抗辯是否成立？軟件開發者自身存在一定程度上的違反 GPLv2 協議，是否就一定不享有新研發軟件著作權？二審中，這個問題是主要爭議點。</p><p>據介紹，在軟件行業的普遍操作模式中，軟件開發一般都會涉及開源協議的問題，程序員研發軟件時想達到什麼功能，就去尋找相關的模塊來實現。而這個模塊代碼，很多就是開源代碼，受開源協議約束。</p><p>而開源協議是什麼呢？</p><p>本案涉及的開源協議是 General Public License version 2 （簡稱 GPLv2 協議）。GPLv2 協議的發佈者為自由軟件基金會，該協議是國外一些元老級的程序員撰寫的一種關於軟件使用的許可證，根據其條款，在受到 GPLv2 協議約束的軟件基礎上開發出的其他衍生軟件同樣受到該協議的約束。因此，雖然開發者可以免費下載、複製、修改受該協議約束的程序代碼，但由此開發出的新代碼也要根據該協議的約定保持開源狀態。</p><p>本案的承辦法官孔立明在查找這個協議的過程中，發現它的官方有效文本只有英文版，雖然互聯網上有不同版本的中文翻譯，但部分關鍵條款的譯文並不準確。這個協議的真實含義是什麼？他決定自己翻譯。協議是按照英美合同文件起草方式寫的，裏面充滿着算法和邏輯關係。</p><p>幸虧孔立明法官有過涉外項目英文合同撰寫與談判經歷，也是國際法專業科班出身，才最終把這份雲山霧罩的英文版自己翻譯成了中文。他還在協議官網上把問答板塊的上百個問與答全部梳理了一遍。一番艱苦的努力過後，孔立明對於開源協議的真正內涵以及開源組織對各類法律問題所持觀點、美國及歐洲相關案件情況有了深度瞭解。他在專業法官會議上作了分享。</p><p>該案審判長原曉爽法官告訴記者，專業法官會議討論後認為，開源協議是全球軟件行業高度關注的法律與技術深度交織的複雜疑難問題，需審慎妥善處理此類糾紛，建議合議庭召集行業、學界及有關部門專家召開專項研討會，對涉開源軟件著作權司法保護問題進行深入研討。</p><p>知產法庭副庭長周翔告訴記者，對於今後法院如何審理涉開源軟件知識產權案件，通過專家研討和廣泛聽取各方面意見，思路更加明晰了。辦理此類案件要在加強著作權保護、尊重開發者意思自治、支持鼓勵開源社區建設三者間尋求利益平衡，堅持政治效果、社會效果、法律效果的有機統一。</p><p>結合上述調研成果，最後合議庭達成了一致的觀點。</p><p><span style="color:#2980b9"><strong>涉案軟件著作權是否獲保護？</strong></span></p><p>具體到本案，蘇州某網絡科技有限公司研發的「OfficeTen」軟件是以 OpenWRT 系統軟件（OpenWRT 系統軟件是開源軟件，適用的許可證協議為 GPLv2 協議）為基礎經二次開發形成的衍生軟件，具體可分為兩個部分：<strong>一部分是對 OpenWRT 系統軟件所對應源代碼進行增刪、修改、調整而形成的涉案軟件底層系統（以下簡稱底層系統軟件），另一部分則是與涉案軟件具體功能相對應的新增源代碼形成的上層功能軟件（以下簡稱上層功能軟件）</strong>。</p><p><strong>蘇州某網絡科技有限公司聲稱其在底層系統軟件與上層功能軟件之間採用套接字（socket）與命令行（command line）等技術手段建立了隔離層，且二者之間通信內容不涉及內部數據結構信息，由此使得上層功能軟件構成 GPLv2 協議項下「獨立且分離的」的程序</strong>。</p><p>最高法院知產法庭在二審判決中認定，蘇州某網絡科技有限公司投資研發的名稱為「OfficeTen」的網關產品系統軟件，投入了大量成本，涉案軟件具有獨創性且可以複製，構成著作權法項下的作品，依法應當獲得保護。他人未經蘇州某網絡科技有限公司許可，不得擅自複製、修改、發行涉案軟件，否則將構成侵害涉案軟件著作權的違法行為。</p><p>合議庭依在案證據認定關聯網絡公司在開發被訴軟件過程中複製並修改了蘇州某網絡科技有限公司涉案軟件的源代碼；認定浙江某通信科技有限公司實施了銷售被訴軟件的行為。認定該複製、修改、發行行為均未經蘇州某網絡科技有限公司許可，侵害了其享有的涉案軟件著作權。</p><p>二審判決對雙方爭議的、也是軟件開發者普遍關心的開源軟件與軟件開發者著作權權利邊界問題、違反開源軟件協議與侵害軟件著作權之間法律關係問題等予以旗幟鮮明的正面迴應：「<strong>在軟件尚未被開源、該軟件著作權人認為其軟件不受 GPLv2 協議約束、被訴侵權人則依據 GPLv2 協議提出不侵權抗辯的侵權糾紛中，軟件開發者自身是否違反 GPLv2 協議和是否享有軟件著作權，是相對獨立的兩個法律問題，二者不宜混為一談，以免不合理地剝奪或限制軟件開發者基於其獨創性貢獻依法享有的著作權。</strong>」「但需指出，本案最終認定被訴行為構成侵權並支持涉案軟件權利人部分訴請，並不表明該權利人將來在潛在的違約和/或侵權之訴中可免予承擔其依法應當承擔的違約和/或侵權責任。」</p><p>蘇州某網絡科技有限公司代理人、北京德恆（蘇州）律師事務所合夥人呂成偉律師告訴記者，二審判決後，被訴侵權人在執行階段履行了全部賠償並刊登致歉聲明，權利人的合法利益得到了充分保障。權利人由衷感謝最高人民法院的公正判決，並對最高人民法院知產法庭法官的專業程度與敬業態度致以崇高敬意。</p><p><span style="color:#2980b9"><strong>二審判決價值何在？</strong></span></p><p>「本案作為疑難複雜案件，最大的爭議在於原告要求保護的涉案計算機軟件是根據開源軟件開發而來的。涉及原告的計算機軟件是否應當根據開源許可協議開源，原告未按開源協議開源是否違反了協議，以及被告未經原告許可使用該軟件的行為是否侵權的複雜問題。」華東政法大學教授王遷在接受本報記者專訪時表示，本案判決書對於原告的行為是否違反開源協議甚至構成侵權和被告的行為是否侵犯原告的著作權，進行了合理的區分。尤其可貴之處在於，沒有受到「開源協議」這一看似複雜的因素的幹擾，而是透過現象看本質，牢牢把握著作權法的基本原理，從而作出了符合著作權法規定和立法精神的正確判決。</p><p>開源軟件和以開源軟件為基礎獨立開發的新軟件之間的關係，類似於小説和以小説為基礎拍攝的電影之間的關係，也就是原作品與演繹作品之間的關係。即使演繹作品的創作與後續利用未經原作品著作權人的許可或者超越了許可範圍，從而構成違約和對原作品著作權的侵權，也不影響該演繹作品（侵權演繹作品）受到著作權法的保護，他人未經許可利用該演繹作品仍然構成對該演繹作品著作權的侵權。「本案的判決遵循了基本法理，對今後涉及開源軟件著作權侵權案件的審理闡明瞭基本規則，具有很強的指導意義，值得稱道。」</p><p>「開源協議是全世界計算機軟件開發行業普遍關注的法律問題。最高人民法院在該案中確立的裁判規則為我國計算機行業的健康穩定發展創造了相對寬鬆的法律環境。特別是對於一些中小型軟件開發企業來説，他們可以根據其二次開發過程中作出的獨創性貢獻，依照我國著作權法享有相應的計算機軟件著作權。」全國人大代表、南京外國語學校副校長李鴻彬表示，本案給這些中小企業吃了一顆定心丸，有助於增強企業經營信心，進一步加大研發成本投入。「另一方面，本案也確認了 GPLv2 這一國際法律文本的法律效力，並未否認有關當事人的意思自治。該司法理唸完全符合我國鼓勵計算機軟件開源社區建設的政策導向，很好地平衡了軟件開源社區建設和保護軟件開發者權益這兩方面的利益。」</p><p>來源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FBReS5aKDPnhNARWofAqUzg" target="_blank">人民法院報</a></em></u></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 05:53:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279035</guid>
            <link>https://www.oschina.net/news/279035</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[工商銀行取得「基於 SpringBoot 的 web 系統後端實現方法及裝置」專利]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fepub.cnipa.gov.cn%2FDxb%2FPatentDetail" target="_blank">據國家知識產權局公告</a></u>，中國工商銀行股份有限公司近日取得一項名為「<strong>基於 SpringBoot 的 web 系統後端實現方法及裝置</strong>「的專利，授權公告號 CN112905176B，申請日期為 2021 年 2 月。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c517204b09e40c8390e687c6f85f1da3004.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c319310d0c88d46dbaeaae98ddfda13249.png" referrerpolicy="no-referrer"></p><p><strong>專利摘要：</strong></p><p>本發明公開了一種基於 SpringBoot 的 web 系統後端實現方法及裝置，其中該方法包括：接收頁面顯示層上送的操作數據；從操作數據中提取操作數據對應的業務 ID 和維護對象 ID；從數據訪問層存儲的業務參數表中，獲取與業務 ID 對應的配置信息，所述配置信息包括不同數據字段各自對應的業務處理邏輯、每個數據字段所在的數據表，以及每個數據字段與數據表中表字段的映射關係；將維護對象 ID 和業務處理邏輯組合為條件表達式；利用所述條件表達式處理所述操作數據。本發明可以減少後端業務層在開發過程中的變動，降低開發成本，同時提升系統的穩定性。</p><p><strong>專利摘要附圖：</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d9c35128bcaa487fc775e62a18eb221ab15.png" referrerpolicy="no-referrer"></p><p><strong>專利説明書：</strong></p><p><img height="1684" src="https://oscimg.oschina.net/oscnet/up-1a9c96dfe9ae983ccc365fc338d875fa1c7.png" width="1236" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-74400e9352156515f96f943d3d1b0d38f31.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-506b932cba593703d4451b426dc264fa754.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-e294d82482d7164d48096679a54a8c91976.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-e8fa61af87d64ab4c42e04b7fb8441af90b.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-cc869c2cfdfd6e8dd8cf31c892a48280317.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-5f8ebf82699b938e3a3bacba8adb460b928.png" referrerpolicy="no-referrer"></p><hr><p>Spring Boot 是一個用於開發 Java 應用程序的開源框架，它基於 Spring 框架，旨在簡化 Spring 應用程序的開發和部署過程。Spring Boot 提供了一種快速、便捷的方式來構建獨立的、生產級別的 Spring 應用程序。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2f4fd85fe6e77ccca851eede3e41f6b3aaf.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 03:32:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279004</guid>
            <link>https://www.oschina.net/news/279004</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開放籤電子簽章 2024 年第一季度目標]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0.0001pt; margin-right:0px; text-align:center"><strong><span style="color:#e74c3c">龍年伊始，開放籤祝大家開工大吉，龍年大吉。</span></strong></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><span><span><span>開放籤開源工具版將在 24 年第一季度更新驗籤、騎縫簽署、國密簽署等功能，同時開放籤企業版也將上線 PC 端、移動端、API 集成三方面的完整能力。屆時開放籤電子簽章能力將更加完善，從業務至技術層面滿足更多場景，第一季度目標如下：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>一、開源工具版更新迭代目標：</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>1、解決商業版權風險，提供基於 PDFBox 的驗籤功能；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>2、提升電子簽章用户體驗，在開源工具版 DEMO 中添加騎縫簽署功能；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>3、增加基於國密算法的電子簽名能力；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>二、開放籤企業版更新迭代目標：</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>1、上線移動端（H5）簽署功能：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（1）個人用户可通過手機短信鏈接快速完成簽署；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（2）支持手機端登錄、註冊；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）支持手機端查詢簽署文件列表；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（4）支持手機端簽署、填寫、拒籤、拒填文檔。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>2、上線 API 接口功能：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（1）支持用户信息同步；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（2）支持通過接口發起簽署；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）支持通過接口簽署、填寫、拒籤、拒填文檔。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>3、功能體驗升級：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（1）優化系統已知 bug；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（2）優化用户體驗流程；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）優化系統提示語，提升系統引導能力；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（4）優化產品相關文檔，提升用户自助應用能力。</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279002</guid>
            <link>https://www.oschina.net/news/279002</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
