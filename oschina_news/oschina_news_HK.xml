<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 17 Oct 2023 09:06:34 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[JetBrains 推出 Writerside，創建技術文檔的工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">JetBrains 宣佈<span style="background-color:#ffffff">以早期訪問狀態</span>推出&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fwriterside%2F" target="_blank">Writerside</a>，一款基於 IntelliJ 平台的 JetBrains IDE，開發人員可使用它編寫、構建、測試和發佈技術文檔。可以作為 JetBrains IDE 中的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplugins.jetbrains.com%2Fplugin%2F20158-writerside" target="_blank">插件</a>使用，也可以作為獨立工具使用。</span></p><p><span style="color:#000000">Writerside 允許開發人員和編寫人員在產品文檔、API 參考、開發人員指南、教程和操作方法方面進行協作；基於人工智能的拼寫檢查和語法糾正工具支持超過 25 種語言，包括英語、德語、西班牙語和中文。</span></p><p><img height="303" src="https://oscimg.oschina.net/oscnet/up-46d13f13538090b99b398e3c34b0636ffce.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Writerside 的一些功能包括：</span></p><ul><li><span style="color:#000000">內置 Git UI。</span></li><li><span style="color:#000000">實時預覽，文檔完全按照讀者所看到的方式顯示，無需等待構建。</span></li><li><span style="color:#000000">支持 Markdown、XML 或兩者的組合使用。開發人員可以注入語義屬性或語義元素來豐富 Markdown，並且 Markdown 元素可以轉換為 XML。</span></li><li><span style="color:#000000">提供外觀的自定義選項，包括選擇深色或淺色模式、對比度、柔和或生動的皮膚，以及定義適合品牌的強調色。作者可以專注於內容，而無需設計佈局和處理 CSS。</span></li><li><span style="color:#000000">附帶 100 多個內置測試，允許 Writerside 自動測試損壞的鏈接、丟失的資源、不正確的屬性值、非唯一 ID 等。具有代碼高亮顯示和驗證功能，以及內置檢查。</span></li><li><span style="color:#000000">維護項目的單一事實來源，使開發人員能夠重用部分內容並僅從一個位置對其進行編輯，而不必在進行更改時更新每個實例。</span></li></ul><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fhelp%2Fwriterside%2Fgetting-started.html" target="_blank">查看官方文檔</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 08:02:10 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262124/jetbrains-writerside</guid>
            <link>https://www.oschina.net/news/262124/jetbrains-writerside</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ruff v0.1.0 - Rust 編寫的高性能 Python 代碼分析工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Ruff v0.1.0 已發佈，此版本主要變化包括<strong>提升穩定性</strong>、<strong>引入新的預覽模式</strong>、<strong>引入 fix safety 等級</strong>，以及執行正式的版本控制策略。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-18fc830344db5e3f3a3e04cb6ce78cdd47a.png" referrerpolicy="no-referrer"></p><ul><li><strong>新的預覽模式</strong></li></ul><p>通過預覽模式，用户可自行選擇體驗新功能——用於啓用新規則、不穩定修復和實驗性代碼分析。</p><pre><code>[tool.ruff]
preview = true</code></pre><ul><li><strong>引入 fix safety 等級</strong></li></ul><p>Ruff 自動修復違規行為的能力是其最強大的功能之一。然而，考慮到 Python 的動態特性，Ruff 並不總能保證修復是「安全的」。</p><p>自 5 月份以來，開發團隊一直將 Ruff 的修復子集標記為不安全。當應用被安全修復時，代碼的含義和意圖將被保留；當應用不安全修復時，含義可能會改變。</p><p>但在 v0.1.0 中，<strong>Ruff 默認情況下只會使用安全修復</strong>，以增加應用修復時的準確性，並突出顯示需要額外審查的修復。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2Fruff%2Fconfiguration%2F%23fix-safety" target="_blank">查看文檔瞭解更多</a>。</p><ul><li><strong>執行正式的版本控制策略</strong></li></ul><p>隨着 0.1.0 的發佈，Ruff 正式執行完整的版本控制策略，簡單總結如下：</p><ul><li>次要版本號代表發佈穩定預覽功能、更改穩定行為以及進行重大更改。</li><li>補丁版本號代表錯誤修復，以及預覽中的規則或修復的任何更改。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2Fruff%2Fversioning%2F" target="_blank">完整描述查看文檔</a>。</p><p>最後，Ruff 文檔站點已從&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbeta.ruff.rs%2Fdocs" target="_blank">beta.ruff.rs/docs</a>&nbsp;遷移到&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2F" target="_blank">docs.astral.sh</a>。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fastral.sh%2Fblog%2Fruff-v0.1.0" target="_blank">詳情查看發佈公告</a>。</p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Ruff 是基於 Rust 編寫的高性能 Python 代碼分析工具（即 Linter），用於檢查代碼中的語法錯誤、編碼規範問題、潛在的邏輯問題和代碼質量問題等，可以提供實時反饋和自動修復建議。其主打的特性是高性能，宣稱比現有的同類工具快 10~100 倍。</p><blockquote><p style="margin-left:0; margin-right:0"><strong>Ruff 核心特性</strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>通過 pip 安裝</li><li>支持<span>&nbsp;</span><code>pyproject.toml</code></li><li>兼容&nbsp;Python 3.11</li><li>超過 500 條內置規則，與 Flake8 內置的規則集近乎對等</li><li>重新實現了數十個 Flake8 插件，如 flake8-bugbear、flake8-comprehensions 等</li><li>支持自動修復，可自動糾正錯誤（例如，刪除未使用的導入）</li><li>內置緩存，可避免重複分析未更改的文件</li><li>支持 VS Code、Pycharm、Neovim、Sublime Text、Emacs 等編輯器</li><li>對 monorepo 友好，具有分層和級聯配置</li></ul></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://static.oschina.net/uploads/space/2023/0420/144757_TG6X_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 07:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262120/ruff-0-1-0-released</guid>
            <link>https://www.oschina.net/news/262120/ruff-0-1-0-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《開放麒麟社區全覽白皮書（2023）》重磅開啓！內容徵集中！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span>截至目前，openKylin（開放麒麟）開源生態圈匯聚超 300 家合作企業、5000 餘名核心貢獻者、80+SIG 以及超百萬用户<strong>。</strong></span><br> &nbsp;</p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><strong>現誠邀社區各合作伙伴、SIG 組成員及廣大用户共編《開放麒麟社區全覽白皮書（2023）》</strong>，以收錄開放麒麟社區優秀技術創新項目、行業應用場景、用户使用案例等，為有興趣深入瞭解開放麒麟社區的開發者、合作伙伴、用户提供參考和借鑑，讓更多人瞭解、共建開放麒麟社區！</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">主要徵集內容</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>基於開放麒麟操作系統或開放麒麟社區開源模式開發的：</span></p><ul><li><span><strong>技術創新項目：</strong>項目的背景説明、功能或技術架構介紹、項目的應用場景等</span></li><li><span><strong>行業應用場景：</strong>具體的行業應用場景説明、具體實施方案或解決的痛點等</span></li><li><span><strong>用户使用案例：</strong>用户的使用場景説明、解決了哪些用户的問題等</span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>如果您在使用或者開發開放麒麟操作系統的過程中有相關內容積累，歡迎提交到社區，分享給更多有需要的人！</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">提交方式</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>如果您有意願參與本次白皮書內容編寫，可通過鏈接（<br><span style="color:#0052ff"><span>https://gitee.com/openkylin/docs/blob/master/社區參與指南/開放麒麟社區全覽白皮書-案例模板.md</span></span>）獲取案例模板，按照案例模板的要求編寫完成後，發送郵件到：<strong>contact@openkylin.top</strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>徵集截止時間為<strong>2023 年 10 月 31 日</strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">審核收錄</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>收集到的案例將提交至 openKylin 社區生態委員會，由生態委員會審核討論是否收錄進《開放麒麟社區全覽白皮書（2023）》，並通過委員投票的方式得出最終結論。</span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span>期待您的參與，共創開源未來！在過程中有任何疑問，歡迎私信 openKylin 公眾號後台諮詢。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 07:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262116</guid>
            <link>https://www.oschina.net/news/262116</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百川智能 A1 輪獲阿里騰訊小米等 3 億美元投資]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000"><span style="background-color:#ffffff">百川智能<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDhZdVNXqTudAtKZ1JrRvYQ" target="_blank">宣佈</a>已完成 A1 輪戰略融資，融資金額 3 億美元，阿里、騰訊、小米等科技巨頭及多家頂級投資機構均參與了本輪融資。加上天使輪的 5000 萬美元，百川智能的融資金額已達 3.5 億美元。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">百川智能成立於 2023 年 4 月 10 日，由前搜狗公司 CEO 王小川創立。其核心團隊由來自搜狗、Google、騰訊、百度、華為、微軟、字節等知名科技公司的 AI 頂尖人才組成。目前，百川智能的團隊規模 170 餘人，其中碩士及碩士以上學歷員工佔比近 70%，研發人員佔比超 80%。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">目前，百川智能已發佈 Baichuan-7B/13B，Baichuan2-7B/13B 四款開源可免費商用大模型及 Baichuan-53B、Baichuan2-53B 兩款閉源大模型，平均每 28 天發佈一款新的大模型。</span></span></p><p><img height="226" src="https://oscimg.oschina.net/oscnet/up-fe04b7e4bd658757761ef024f6bc89347b2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">公告稱，</span>Baichuan-7B/13B 兩款開源大模型在多個權威評測榜單均名列前茅，累積下載量超過六百萬次。Baichuan2-13B 在 MMLU、CMMLU、MedQA、USMLE 等幾大權威評估基準中，以絕對優勢全方位領先 LLaMA2。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">8 月 31 日百川智能率先通過國家《生成式人工智能服務管理暫行辦法》備案，是首批八家公司中唯一一家今年成立的大模型初創公司，並於 9 月 25 日開放 Baichuan2-53B API 接口，正式進軍 To B 領域，開啓商業化進程。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 07:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262115</guid>
            <link>https://www.oschina.net/news/262115</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenBSD 7.4]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>OpenBSD 項目創始人 Theo de Raadt 宣佈推出<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openbsd.org%2F74.html" target="_blank"> OpenBSD 7.4</a>。這是 OpenBSD 第 55 個版本更新，下圖是慶祝髮版的海報：</p><p><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-30cece035e82615260d56659ea68a36ec27.png" width="400" referrerpolicy="no-referrer"></p><p>主要變化：</p><ul><li>大量內核改進</li><li>改進 SMP</li><li>Direct Rendering Manager 和圖形驅動更新</li><li>改進 VMM/VMD</li><li>針對用户空間 (userland) 的 bug 修正和調整</li><li>改進硬件支持等</li></ul><p>OpenBSD 是開源、支持多平台的的類 UNIX 操作系統，創建於 1996 年，以強調安全性著稱。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4cdb76e5822ddc9197ce757a7f97a83a20d.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 06:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262108/openbsd-7-4-released</guid>
            <link>https://www.oschina.net/news/262108/openbsd-7-4-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雷軍：小米全新操作系統澎湃 OS 正式版已完成封包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>小米創辦人、董事長兼 CEO 雷軍今天在個人微博<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1749127163%2FNoeRxu6Ro%3Frefer_flag%3D1001030103_" target="_blank">宣佈</a>，小米全新的操作系統小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。小米 14 系列，第一款搭載新系統的手機，已交付工廠開始生產。</p><blockquote><p><span style="color:#333333">今天，對小米來説，是一個歷史性時刻。小米全新的操作系統，小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。</span></p><p><span style="color:#333333">小米 14 系列，第一款搭載新系統的手機，已交付工廠，正式開始生產。從這一刻起，</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs.weibo.com%2Fweibo%3Fq%3D%2523%25E5%25B0%258F%25E7%25B1%25B3%25E6%25BE%258E%25E6%25B9%2583OS%2523" target="_blank">#小米澎湃 OS#</a><span style="color:#333333"> 將逐步接替 MIUI。 ​​​</span></p><p><span style="color:#000000">對於小米來説，這是一個劃時代的里程碑，是邁向<strong style="color:#222222">「人車家全生態」</strong>的關鍵跨越。這一刻，我的內心，激動不已，心潮澎湃。</span></p></blockquote><p><img height="243" src="https://oscimg.oschina.net/oscnet/up-1fead1c930f622a1877c21aa62d184206e2.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p><span style="background-color:#ffffff; color:#222222">雷軍在公眾號發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FvjNBvY8Bn9Npnmisru_EKw" target="_blank">介紹</a></span><span style="color:#000000"><span style="background-color:#ffffff">稱，</span><span style="background-color:#ffffff">2014 年，從 IoT 業務開始初具規模，該公司就開始了小米澎湃 OS 的探索式開發和驗證。2017 年，全新系統研發工作正式開啓，以一套融合的系統框架統一支持全生態設備與應用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">時至今日，小米澎湃 OS 正式誕生，秉承</span><strong style="color:rgba(0, 0, 0, 0.9)"><span style="background-color:#ffffff">「以人為中心，打造人車家全生態操作系統」。</span></strong><span style="background-color:#ffffff">基於深度進化的 Android 以及自研的 Vela 系統融合，徹底重寫底層架</span><span style="background-color:#ffffff">構，為未來百億設備、百億連接做好了萬物互聯的公有底座。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-8c53666ec4b5313f3b5983d44ffe6a445b7.jpg" width="500" referrerpolicy="no-referrer"></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262088</guid>
            <link>https://www.oschina.net/news/262088</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心大模型 4.0 發佈，較 GPT-4 毫不遜色]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="background-color:#ffffff; color:#222222">在百度世界 2023 大會上，百度創始人、董事長兼首席執行官李彥宏宣佈文心大模型 4.0 正式發佈，開啓邀請測試。</span></p><p><span style="background-color:#ffffff; color:#222222">李彥宏表示，文心大模型 4.0 </span>是迄今為止最強大的文心大模型，實現了基礎模型的全面升級，在理解、生成、邏輯和記憶能力上都有着明顯提升，綜合水平「與 GPT-4 相比毫不遜色」。</p><p><img height="230" src="https://oscimg.oschina.net/oscnet/up-cb21975862a8f7b014aeea47cbab52da1df.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">李彥宏在現場演示中用文心 4.0 撰寫了一篇武俠小説，並將第四、五輪的生成內容與首輪小説框架結合，文心一言仍然「記得」最初生成的內容，李彥宏稱，這展示了文心大模型 4.0 的記憶能力。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">目前文心 4.0 已同步開始邀測，現場觀眾掃描嘉賓證二維碼，即可登錄文心一言官網或文心一言 App，體驗專業版。其<span style="background-color:#ffffff; color:#222222">隨後將逐步面前全網開啓公測。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 03:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262086</guid>
            <link>https://www.oschina.net/news/262086</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stack Overflow 裁員 28%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">Stack Overflow 是一家擁有 15 年曆史的 IT 技術問答網站，其首席執行官 Prashanth Chandrasekar 近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.blog%2F2023%2F10%2F16%2Fstack-overflow-company-announcement-october-2023%2F" target="_blank">宣佈</a>，該機構將裁員 28%。</span></p><p><span style="color:#000000">該公司沒有具體説明有多少員工會受到影響，但其 LinkedIn 頁面顯示，目前該公司共擁有 501-1000 名員工，LinkedIn 上的員工數為 769，因此大概影響 215 名員工左右。</span></p><p><span style="color:#000000"><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-a695411b01f10f2f0c67268f263266606ca.webp" width="500" referrerpolicy="no-referrer"></span></p><blockquote><p><span style="color:#000000">在過去的 15 年中，我們將 Stack Overflow 打造成數百萬開發人員和技術專家的行業重要知識庫。在此期間，我們經歷了充滿機遇和挑戰的歲月。今年也不例外，從為成功推出 OverflowAI 所做的不懈努力，到應對宏觀經濟壓力對整個技術行業造成的客户預算轉移的持續威脅。這也是為什麼我們在致力於 Stack Overflow for Teams 的持續產品創新以及通過增強我們的人工智能/移動語言能力來確保公共平台健康發展的同時，還如此專注於盈利之路。今年，我們採取了許多措施來減少開支。我們從儘量減少對 Stacker 生活的影響的角度出發進行了改革。不幸的是，這些改變還不夠，我們做出了一個極其艱難的決定，將公司員工人數減少約 28%。</span></p><p style="text-align:start"><span style="color:#000000">當我們結束本財年並進入下一個財年時，我們將重點投資於我們的產品。因此，我們在此期間將大幅縮減市場營銷組織的規模。整個組織的支持團隊和其他團隊也會受到影響。正如我所提到的，我們本財年和下一財年的重點是盈利能力，這一點以及宏觀經濟壓力導致了今天的變化。隨着我們調整工作重點、優先事項和戰略，我們將更好地滿足用户、客户和合作夥伴的需求，這也是我們致力於產品創新和持續推動 OverflowAI 在 Stack Overflow for Teams 和我們的公共平台上發展的一部分。我們的新團隊結構最有利於我們在這些舉措方面取得成功。</span></p></blockquote><p><span style="color:#000000">面對&nbsp;Stack Overflow 的這一裁員之舉，外界紛紛猜測該公司是受到了來自&nbsp;OpenAI 的 ChatGPT 的衝擊。<span style="background-color:#ffffff">人工智能聊天助手 ChatGPT 崛起已經改變了開發者尋求編程幫助方式，能提供更為具體的幫助。</span></span></p><p><span style="color:#000000">倫敦和德國兩地的一家初創公司創始人 Laura Wendel&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FLauramaywendel%2Fstatus%2F1713949264336847318%3Fs%3D20" target="_blank">發帖稱<span style="color:#000000">，</span></a><span style="color:#000000">&nbsp;「這可能是第一次直接因 AI 導致的大規模裁員」，並例舉了「大眾向 ChatGPT 而不是 Stack Overflow 尋求問題答案」的例子。還貼出了一張圖表，顯示從 2023 年 4 月開始，Stack Overflow 的頁面瀏覽量急劇下降；與此同時，聊天機器人正廣受追捧。</span></p><p><span style="color:#000000"><strong>相關閲讀：</strong></span></p><ul><li><a href="https://www.oschina.net/news/237758/stack-overflow-chatgpt" target="news">ChatGPT 的統治正在衝擊 Stack Overflow？</a></li><li><a href="https://www.oschina.net/news/251072/the-fall-of-stack-overflow" target="news">Stack Overflow 訪問量大幅下降，馬斯克稱其已被 LLM 取代</a></li><li><a href="https://www.oschina.net/news/251277/overflow-ai" target="news">Stack Overflow 推出 Overflow AI</a></li><li><a href="https://www.oschina.net/news/253044/chatgpt-stack-overflow-research" target="news">ChatGPT 和 Stack Overflow，誰的解答更勝一籌？</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforc</guid>
            <link>https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforc</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Disjob —— 分佈式任務調度框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="project_detail_above_text_link_1" data-tracepid="project_detail_above_text_link"><a style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>Disjob 是一款分佈式的任務調度框架，天然為支持分佈式長任務執行而設計，它除了具備常規的任務調度功能外，還提供：任務拆分及分佈式並行執行、暫停及取消運行中的任務、恢復執行被暫停的任務、任務執行失敗重試、保存任務的執行快照 (Checkpoint)、任務依賴、任務編排 (DAG)、廣播任務等能力。</p><p>以下是 Disjob 的整體流程圖：</p><p><img alt="" src="https://gitee.com/dromara/disjob/raw/master/docs/images/architecture.jpg" referrerpolicy="no-referrer"></p><hr><p><strong>特性</strong></p><ul><li>分為管理器 (Supervisor) 和執行器 (Worker) 兩種角色，Supervisor 與 Worker 可分離部署</li><li>Supervisor 與 Worker 通過註冊中心相互發現，支持的註冊中心有：Database、Redis、Consul、Nacos、Zookeeper、Etcd</li><li>Supervisor 負責生成任務，把任務派發給 Worker 執行，支持的任務派發方式有：Redis、Http</li><li>需要指定 Job 的分組 (job-group)，Job 的任務只會派發給指定組的 Worker 執行</li><li>提供拆分任務的能力，重寫拆分方法<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/handle/JobSplitter.java">JobHandler#split</a>即可拆分為多個任務，實現分佈式任務及並行執行</li><li>支持暫停和取消運行中的任務，已暫停的任務可恢復繼續執行，執行失敗的任務支持重試</li><li>支持任務保存 (savepoint) 其執行狀態，讓手動或異常暫停的任務能從上一次的執行狀態中恢復繼續執行</li><li>任務在執行時若拋出<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/exception/PauseTaskException.java">PauseTaskException</a>，會暫停對應實例下的全部任務 (包括分佈在不同 worker 機器中的任務)</li><li>支持廣播任務，廣播任務會派發給 job-group 下的所有 worker 執行</li><li>支持 Job 間的依賴，多個 Job 配置好依賴關係後便會按既定的依賴順序依次執行</li><li>支持 DAG 工作流，可把 jobHandler 配置為複雜的 DAG 表達式，如：A-&gt;B,C,(D-&gt;E)-&gt;D,F-&gt;G</li><li>提供 Web 管理後台，通過界面進行作業配置，任務監控等</li></ul><p><strong>項目結構</strong></p><pre><code>disjob                                        # 主項目①
├── disjob-admin                              # 管理後台項目②(基於 Ruoyi 框架二次開發)
├── disjob-bom                                # Maven project bom module
├── disjob-common                             # 公共的工具類模塊
├── disjob-core                               # 任務調度相關的核心類（如數據模型、枚舉類、抽象層接口等）
├── disjob-dispatch                           # 任務派發模塊
│   ├── disjob-dispatch-api                   # 任務派發的抽象接口層
│   ├── disjob-dispatch-http                  # 任務派發的 Http 實現
│   └── disjob-dispatch-redis                 # 任務派發的 Redis 實現
├── disjob-id                                 # 分佈式 ID 生成模塊
├── disjob-registry                           # Server(Supervisor &amp; Worker) 註冊模塊
│   ├── disjob-registry-api                   # Server 註冊中心的抽象接口層
│   ├── disjob-registry-consul                # Server 註冊中心：Consul 實現
│   ├── disjob-registry-database              # Server 註冊中心：Database 實現
│   ├── disjob-registry-etcd                  # Server 註冊中心：Etcd 實現
│   ├── disjob-registry-nacos                 # Server 註冊中心：Nacos 實現
│   ├── disjob-registry-redis                 # Server 註冊中心：Redis 實現
│   └── disjob-registry-zookeeper             # Server 註冊中心：Zookeeper 實現
├── disjob-reports                            # 聚合各個模塊的測試覆蓋率報告
├── disjob-samples                            # Samples 項目③
│   ├── disjob-samples-frameless-worker       # Worker 單獨部署的範例（普通 Java-main 應用）
│   ├── disjob-samples-springboot-common      # Samples Spring-boot 公共模塊
│   ├── disjob-samples-springboot-merged      # Supervisor 與 Worker 合併部署的範例（Spring-boot 應用）
│   ├── disjob-samples-springboot-supervisor  # Supervisor 單獨部署的範例（Spring-boot 應用）
│   └── disjob-samples-springboot-worker      # Worker 單獨部署的範例（Spring-boot 應用）
├── disjob-supervisor                         # Supervisor 代碼
├── disjob-test                               # 用於輔助測試
└── disjob-worker                             # Worker 代碼</code></pre></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 02:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/disjob</guid>
            <link>https://www.oschina.net/p/disjob</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 任天堂紅白機模擬器 Nes4j]]>
            </title>
            <description>
                <![CDATA[<div align="center"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/build/icon/nes4j.png" alt="Nes4j logo" width="200" height="auto" referrerpolicy="no-referrer"><h1><a id="user-content-nes4j" class="anchor" href="https://gitee.com/navigatorCode/nes4j#nes4j"></a>Nes4j</h1><p>Nintendo red and white simulator</p></div><div align="center"><h3><a id="user-content---中文文檔--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3--"></a><a href="https://gitee.com/navigatorCode/nes4j/blob/master/README_zh.md">中文文檔</a></h3><h3><a id="user-content---gitee-repository--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--gitee-repository--"></a><a href="https://gitee.com/navigatorcode/nes4j">gitee repository</a></h3><img src="https://github.com/GZYangKui/nes4j/actions/workflows/maven.yml/badge.svg" alt="Build status" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-Apache%202.0-blue" alt="Apache 2.0" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/I18n-Support-orange.svg" alt="I18n support" referrerpolicy="no-referrer"><img src="https://badgen.net/github/stars/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="stars" referrerpolicy="no-referrer"><img src="https://badgen.net/github/forks/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="forks" referrerpolicy="no-referrer"><br></div><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Main.png" alt="nes4j" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/DuckTables.png" alt="DuckTables" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Super%20Mario.png" alt="Super Mario" referrerpolicy="no-referrer"></p><h2><a id="user-content-project-introduction" class="anchor" href="https://gitee.com/navigatorCode/nes4j#project-introduction"></a>Project introduction</h2><p><strong>nes4j</strong>The Nintendo Red and White Machine Simulator is implemented in Java language, mainly
including <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FCPU">CPU</a>、
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FPPU_programmer_reference">PPU</a> and <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FAPU">APU</a> Three parts.PPU
is a red and white machine
It is difficult to understand the most difficult module.</p><h2><a id="user-content-project-structure" class="anchor" href="https://gitee.com/navigatorCode/nes4j#project-structure"></a>Project Structure</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">nes4j</span><span id="LC2" class="line">├── app UI module(javafx)</span><span id="LC3" class="line">├── bin Simulator core module (CPU/PPU/APU)</span><span id="LC4" class="line">└── document Development Documentation</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-quick-start" class="anchor" href="https://gitee.com/navigatorCode/nes4j#quick-start"></a>Quick start</h2><h3><a id="user-content-download-project" class="anchor" href="https://gitee.com/navigatorCode/nes4j#download-project"></a>Download project</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://gitee.com/navigatorCode/nes4j.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-start-project" class="anchor" href="https://gitee.com/navigatorCode/nes4j#start-project"></a>Start project</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"> mvn run</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-support-cartridge-mapper" class="anchor" href="https://gitee.com/navigatorCode/nes4j#support-cartridge-mapper"></a>Support cartridge mapper</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FNROM">NROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FUxROM">UxROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FINES_Mapper_003">CNROM</a></li></ul><blockquote><p>More cartridge mapper are being implemented, please wait.</p></blockquote><h2><a id="user-content-the-core-module-is-introduced-separately" class="anchor" href="https://gitee.com/navigatorCode/nes4j#the-core-module-is-introduced-separately"></a>The core module is introduced separately</h2><blockquote><p>If you feel that the current game output program cannot meet your needs, you can provide PR to us, and we will try
our best to meet your needs. Another way is to introduce nes4j bin module yourself to achieve video and audio output
of
the game.</p></blockquote><h3><a id="user-content-first-introduce-dependency" class="anchor" href="https://gitee.com/navigatorCode/nes4j#first-introduce-dependency"></a>First introduce dependency</h3><ul><li>Apache Maven</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;groupId&gt;</span>cn.navclub<span class="nt">&lt;/groupId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;artifactId&gt;</span>nes4j-bin<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;version&gt;</span>1.0.2<span class="nt">&lt;/version&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(groovy)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="nl">group:</span><span class="s1">'cn.navclub'</span><span class="o">,</span><span class="nl">name:</span><span class="s1">'nes4j-bin'</span><span class="o">,</span><span class="nl">version:</span><span class="s1">'1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>or</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="s1">'cn.navclub:nes4j-bin:1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(Kotlin)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nf">implementation</span><span class="p">(</span><span class="s">"cn.navclub:nes4j-bin:1.0.2"</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-then-create-an-nes-instance-and-initialize" class="anchor" href="https://gitee.com/navigatorCode/nes4j#then-create-an-nes-instance-and-initialize"></a>Then create an NES instance and initialize</h3><ul><li>GameWorld.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.NES</span><span class="o">;</span></span><span id="LC3" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.io.JoyPad</span><span class="o">;</span></span><span id="LC4" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.ppu.Frame</span><span class="o">;</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">GameWorld</span><span class="o">{</span></span><span id="LC7" class="line"><span class="kd">public</span><span class="no">NES</span><span class="nf">create</span><span class="o">()</span><span class="o">{</span></span><span id="LC8" class="line"><span class="no">NES</span><span class="n">instance</span><span class="o">=</span><span class="no">NES</span><span class="o">.</span><span class="na">NESBuilder</span></span><span id="LC9" class="line"><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span></span><span id="LC10" class="line"><span class="c1">//nes game rom</span></span><span id="LC11" class="line"><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">file</span><span class="o">)</span></span><span id="LC12" class="line"><span class="c1">//Audio Handler </span></span><span id="LC13" class="line"><span class="o">.</span><span class="na">player</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">)</span></span><span id="LC14" class="line"><span class="c1">//Game loop callback</span></span><span id="LC15" class="line"><span class="o">.</span><span class="na">gameLoopCallback</span><span class="o">(</span><span class="nc">GameWorld</span><span class="o">.</span><span class="na">this</span><span class="o">::</span><span class="n">gameLoopCallback</span><span class="o">)</span></span><span id="LC16" class="line"><span class="o">.</span><span class="na">build</span><span class="o">();</span></span><span id="LC17" class="line"><span class="k">try</span><span class="o">{</span></span><span id="LC18" class="line"><span class="c1">//Current method was called current will block current thread until game stop or exception occurred</span></span><span id="LC19" class="line"><span class="n">instance</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span></span><span id="LC20" class="line"><span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span><span class="n">e</span><span class="o">)</span><span class="o">{</span></span><span id="LC21" class="line"><span class="c1">//todo An error occurred during the game.Once error occurred game immediate stop </span></span><span id="LC22" class="line"><span class="o">}</span></span><span id="LC23" class="line"><span class="o">}</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="c1">//This function was callback when a game frame generate</span></span><span id="LC26" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">gameLoopCallback</span><span class="o">(</span><span class="nc">Frame</span><span class="n">frame</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad1</span><span class="o">)</span><span class="o">{</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="o">}</span></span><span id="LC29" class="line"><span class="o">}</span></span><span id="LC30" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>JavaXAudio.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"all"</span><span class="o">)</span></span><span id="LC3" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">JavaXAudio</span><span class="kd">implements</span><span class="nc">Player</span><span class="o">{</span></span><span id="LC4" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kt">byte</span><span class="o">[]</span><span class="n">sample</span><span class="o">;</span></span><span id="LC5" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">Line</span><span class="o">.</span><span class="na">Info</span><span class="n">info</span><span class="o">;</span></span><span id="LC6" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">AudioFormat</span><span class="n">format</span><span class="o">;</span></span><span id="LC7" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">SourceDataLine</span><span class="n">line</span><span class="o">;</span></span><span id="LC8" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">ldx</span><span class="o">;</span></span><span id="LC9" class="line"><span class="c1">//Currnet fill index</span></span><span id="LC10" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">index</span><span class="o">;</span></span><span id="LC11" class="line"><span class="kd">private</span><span class="nc">Thread</span><span class="n">thread</span><span class="o">;</span></span><span id="LC12" class="line"><span class="kd">private</span><span class="kd">volatile</span><span class="kt">boolean</span><span class="n">stop</span><span class="o">;</span></span><span id="LC13" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">SAMPLE_SIZE</span><span class="o">=</span><span class="mi">735</span><span class="o">*</span><span class="mi">2</span><span class="o">;</span></span><span id="LC14" class="line"><span class="c1">//Audio buffer size default 32kb</span></span><span id="LC15" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">DEF_BUF_SIZE</span><span class="o">=</span><span class="mi">32</span><span class="o">*</span><span class="mi">1024</span><span class="o">;</span></span><span id="LC16" class="line"></span><span id="LC17" class="line"><span class="kd">private</span><span class="kd">static</span><span class="kd">final</span><span class="nc">LoggerDelegate</span><span class="n">log</span><span class="o">=</span><span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">logger</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></span><span id="LC18" class="line"></span><span id="LC19" class="line"></span><span id="LC20" class="line"><span class="kd">public</span><span class="nf">JavaXAudio</span><span class="o">()</span><span class="kd">throws</span><span class="nc">LineUnavailableException</span><span class="o">{</span></span><span id="LC21" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC22" class="line"><span class="k">this</span><span class="o">.</span><span class="na">format</span><span class="o">=</span><span class="k">new</span><span class="nc">AudioFormat</span><span class="o">(</span><span class="mi">44100</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span></span><span id="LC23" class="line"><span class="k">this</span><span class="o">.</span><span class="na">info</span><span class="o">=</span><span class="k">new</span><span class="nc">DataLine</span><span class="o">.</span><span class="na">Info</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">format</span><span class="o">);</span></span><span id="LC24" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">=</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">)</span><span class="nc">AudioSystem</span><span class="o">.</span><span class="na">getLine</span><span class="o">(</span><span class="n">info</span><span class="o">);</span></span><span id="LC25" class="line"></span><span id="LC26" class="line"><span class="n">line</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">format</span><span class="o">);</span></span><span id="LC27" class="line"><span class="n">line</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">((</span><span class="k">this</span><span class="o">::</span><span class="n">exec</span><span class="o">));</span></span><span id="LC30" class="line"><span class="o">}</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="nd">@Override</span></span><span id="LC33" class="line"><span class="kd">public</span><span class="kd">synchronized</span><span class="kt">void</span><span class="nf">output</span><span class="o">(</span><span class="kt">byte</span><span class="n">sample</span><span class="o">)</span><span class="o">{</span></span><span id="LC34" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">++]</span><span class="o">=</span><span class="n">sample</span><span class="o">;</span></span><span id="LC35" class="line"><span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lcalculate</span><span class="o">()</span><span class="o">&gt;</span><span class="no">SAMPLE_SIZE</span><span class="o">&amp;&amp;</span><span class="n">thread</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span><span class="o">{</span></span><span id="LC36" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC37" class="line"><span class="o">}</span></span><span id="LC38" class="line"><span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="no">DEF_BUF_SIZE</span><span class="o">;</span></span><span id="LC39" class="line"><span class="o">}</span></span><span id="LC40" class="line"></span><span id="LC41" class="line"></span><span id="LC42" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">exec</span><span class="o">()</span><span class="o">{</span></span><span id="LC43" class="line"><span class="kt">var</span><span class="n">arr</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC44" class="line"><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">=</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span></span><span id="LC45" class="line"><span class="k">while</span><span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">)</span><span class="o">{</span></span><span id="LC46" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">park</span><span class="o">();</span></span><span id="LC47" class="line"><span class="kd">final</span><span class="kt">int</span><span class="n">length</span><span class="o">;</span></span><span id="LC48" class="line"><span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span><span class="o">{</span></span><span id="LC49" class="line"><span class="n">length</span><span class="o">=</span><span class="n">lcalculate</span><span class="o">();</span></span><span id="LC50" class="line"><span class="k">if</span><span class="o">((</span><span class="n">length</span><span class="o">+</span><span class="n">ldx</span><span class="o">&gt;</span><span class="no">DEF_BUF_SIZE</span><span class="o">))</span><span class="o">{</span></span><span id="LC51" class="line"><span class="kt">var</span><span class="n">tmp</span><span class="o">=</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC52" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">tmp</span><span class="o">);</span></span><span id="LC53" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="n">tmp</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">);</span></span><span id="LC54" class="line"><span class="o">}</span><span class="k">else</span><span class="o">{</span></span><span id="LC55" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC56" class="line"><span class="o">}</span></span><span id="LC57" class="line"><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">;</span></span><span id="LC58" class="line"><span class="o">}</span></span><span id="LC59" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC60" class="line"><span class="o">}</span></span><span id="LC61" class="line"><span class="o">}</span></span><span id="LC62" class="line"></span><span id="LC63" class="line"><span class="kd">private</span><span class="kt">int</span><span class="nf">lcalculate</span><span class="o">()</span><span class="o">{</span></span><span id="LC64" class="line"><span class="kt">var</span><span class="n">len</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC65" class="line"><span class="k">if</span><span class="o">(</span><span class="n">len</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span><span class="o">{</span></span><span id="LC66" class="line"><span class="k">return</span><span class="n">len</span><span class="o">;</span></span><span id="LC67" class="line"><span class="o">}</span></span><span id="LC68" class="line"><span class="k">return</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="n">ldx</span><span class="o">+</span><span class="n">index</span><span class="o">;</span></span><span id="LC69" class="line"><span class="o">}</span></span><span id="LC70" class="line"></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="nd">@Override</span></span><span id="LC73" class="line"><span class="kd">public</span><span class="kt">void</span><span class="nf">stop</span><span class="o">()</span><span class="o">{</span></span><span id="LC74" class="line"><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span></span><span id="LC75" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC76" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">close</span><span class="o">();</span></span><span id="LC77" class="line"><span class="o">}</span></span><span id="LC78" class="line"><span class="o">}</span></span><span id="LC79" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-participatory-contributions" class="anchor" href="https://gitee.com/navigatorCode/nes4j#participatory-contributions"></a>Participatory contributions</h2><p>We strongly welcome interested developers to participate in the project construction, and welcome everyone to put
forward valuable suggestions and functional requirements for the project. The project is being actively developed, and
welcome PR 👏。</p><h2><a id="user-content-copyright-description" class="anchor" href="https://gitee.com/navigatorCode/nes4j#copyright-description"></a>Copyright Description</h2><p>At present, most of the game copyrights in the market are owned by <a>Nintendo</a>.
Do not distribute the game without permission from Nintendo If any infringement is caused thereby, it has nothing
to do with the software. If any infringing material is designed in the software, please send an email to
<a href="mailto:GZYangKui@126.com">GZYangKui@126.com</a> Notify me to delete the corresponding infringing materials.</p><h2><a id="user-content-development" class="anchor" href="https://gitee.com/navigatorCode/nes4j#development"></a>Development</h2><h3><a id="user-content-document" class="anchor" href="https://gitee.com/navigatorCode/nes4j#document"></a>document</h3><p>If you want to write your own simulator or understand the internal structure of the simulator, the following resources
can provide you with some basic knowledge of the simulator:</p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fnesdev.com%2FNESDoc.pdf">NES Documentation (PDF)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwiki.nesdev.com%2Fw%2Findex.php%2FNES_reference_guide">NES Reference Guide (Wiki)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.obelisk.me.uk%2F6502%2Freference.html">6502 CPU Reference</a></li></ul><h3><a id="user-content-assembly-debuggingexperimental" class="anchor" href="https://gitee.com/navigatorCode/nes4j#assembly-debuggingexperimental"></a>Assembly debugging(Experimental)</h3><blockquote><p>Main interface -&gt; Tool -&gt; Debug</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/assemblera.png" alt="Assembler" referrerpolicy="no-referrer"></p><blockquote><p>Snapshot memory view (Memory)</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/MemoryView.png" alt="Assembler" referrerpolicy="no-referrer"></p><h2><a id="user-content-special-thanks" class="anchor" href="https://gitee.com/navigatorCode/nes4j#special-thanks"></a>Special thanks</h2><table><thead><tr><th>name</th><th>describe</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.jetbrains.com%2F">Jetbrain</a></td><td>Provide a complete set of integrated development environment</td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fforums.nesdev.org%2F">NES forum</a></td><td>Provide technical support</td></tr></tbody></table>]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/navigatorCode/nes4j</guid>
            <link>https://gitee.com/navigatorCode/nes4j</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Trino 容錯模式深度測評與思考]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411218%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">走向批處理-交互式分析一體化： Trino 容錯模式深度測評與思考</a>》，作者：HetuEngine 九級代言 。</p><p><strong>本文系華為雲大數據研發團隊原創，原創作者：文博，夢月</strong></p><span id="OSC_h1_1"></span><h1>1 Trino 簡介</h1><p>2020 年 12 月 27 日，Presto 社區大佬們——Martin Traverso、 Dain Sundstrom 以及 David Phillips 宣佈將開源項目 PrestoSQL 的名字更名為 TrinoDB（本文簡稱 Trino）。</p><p>Trino 是一款開源的高性能、分佈式 SQL 查詢引擎，專門用於對各種異構數據源運行交互式分析查詢，支持從 GB 到 PB 的數據量範圍。Trino 專門為交互式分析而設計，可以對來自不同數據源的數據（包括：Hive、AWS S3、Alluxio、MySQL、Kafka、ES 等等）進行合併查詢，並提供良好的自定義連接器編程擴展框架。適用於期望響應時間從亞秒到數分鐘不等的分析師場景。</p><p><img alt="1.PNG" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695110884831740337.PNG" referrerpolicy="no-referrer"></p><p>在誕生之初，Trino 是為了填補當時 Facebook 內部實時查詢和 ETL 處理之間的空白。Trino 的核心目標就是提供交互式查詢，也就是我們常説的 Ad-Hoc Query，很多公司都使用它作為 OLAP 計算引擎。近年來業務場景越來越複雜，除了交互式查詢場景，很多公司也需要兼顧批處理作業，技術大佬們開始思考如何用 Trino 來進行大數據集的批加工處理。</p><span id="OSC_h1_2"></span><h1>2 傳統 Trino 架構的侷限性</h1><p>在傳統 Trino 運行架構中，Trino 預先規劃了處理特定查詢的所有 task 。這些 task 彼此關聯，一項 task 的結果是下一項 task 的輸入。對於 MPP 引擎來説，這種相互依賴是必要的。一旦任何任務在此過程中失敗，就會破壞整個任務鏈條，導致整個 SQL 執行退出。</p><p>Trino 執行 SQL 任務過程如下圖（來自 Trino 官網）：</p><p><img alt="2.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111024056590140.png" referrerpolicy="no-referrer"></p><p><strong>優點：</strong></p><p>數據通過 task 進行流式傳輸，沒有中間檢查點，高吞吐低延遲</p><p><strong>不足：</strong></p><ul><li>缺乏細粒度的故障回覆，出現問題只能從頭運行整個 Query</li><li>完全依賴內存資源進行數據裝載和交換</li><li>執行規劃一旦確定就無法根據實際執行進展靈活調整</li></ul><span id="OSC_h1_3"></span><h1>3 Trino 容錯執行架構（FTE）</h1><p>Trino 開源社區設計了一種新的容錯執行架構（fault-tolerant execution architecture），它允許我們實現具有細粒度重試的高級資源感知調度（advanced resource-aware scheduling）。該項目代號為「Tardigrade」。</p><p>Tardigrade 項目旨在打破原有的全有或全無的執行障礙。它為資源管理、自適應查詢優化和故障恢復帶來了許多新的機會。該項目以水熊蟲命名 ，水熊蟲是世界上最堅不可摧的生物，類似於 FTE 為 Trino 帶來的魯棒性。</p><p><img alt="3.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111069158719757.png" referrerpolicy="no-referrer"></p><p>以下是 Tardigrade 項目帶來的一些直觀效果：</p><ul><li>當長時間運行的 SQL Query 遇到故障時，不必從頭開始運行；</li><li>當 Query 需要的內存超過集羣中當前可用的內存時，仍然能夠運行成功；</li><li>當多個 Query 同時提交時，它們能夠以公平的方式共享資源，並穩步運行</li></ul><p>從代碼實現角度看， Trino 直接在內核中實現了 task 級容錯、自動重試、shuffle 等核心功能。如下圖所示（來自 Trino 官網）：</p><p><img alt="4.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111096042877403.png" referrerpolicy="no-referrer"></p><p>Trino 會將一個 Query 執行分成多個 stage。在容錯模式下，上游 stage 的 shuffle 數據會進行落盤（支持寫到 AWS S3、HDFS 及本地存儲）。下游 stage 從中間存儲裏讀取所需要的數據，並在該過程中對後續 task 任務進行重新優化與分配。</p><p><img alt="5.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111122989942394.png" referrerpolicy="no-referrer"></p><p><strong>帶來的改進：</strong></p><ul><li><strong>適應性規劃</strong>：可以在緩衝數據時，動態調整查詢計劃</li><li><strong>資源管理</strong>：在查詢運行時調整資源分配。當集羣空閒時，我們可以允許單個查詢利用集羣上的所有可用資源。當更多工作負載開始時，可​​以逐漸減少初始查詢的資源分配。</li><li><strong>細粒度的故障恢復</strong>：允許透明地重啓失敗的任務，使得 ETL 完成時間更可預測。</li></ul><p>接下來，本文將帶各位深入體驗 Trino 容錯執行模式。</p><span id="OSC_h1_4"></span><h1>4 基礎性能測試</h1><p>首先在計算資源充足的場景下進行基礎性能測試。選取 1TB 數據量的 TPCDS，計算資源規格為 2CN+16Worker 136GB/進程，測試開啓容錯前後，執行 TPCDS99，耗時統計如下：</p><p><img alt="6.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111179677854014.png" referrerpolicy="no-referrer"></p><p>測試寫入性能選擇 TPCDS 表中最大的表 catalog_sales 測試寫入性能，SQL 為：</p><p><em>--- create table catalog_sales_copy as select * from catalog_sales;</em></p><p><strong>測試數據如下：</strong></p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>數據集</strong></p></td><td><p><strong>計算資源</strong></p></td><td><p><strong>執行耗時（單位：秒）</strong></p></td></tr><tr><td><p><strong>不開容錯和</strong><strong>spill</strong></p></td><td><p><strong>Task</strong><strong>容錯</strong></p></td><td><p><strong>Task</strong><strong>容錯+spill</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,20GB/進程</p></td><td><p>622.2</p></td><td><p>673</p></td><td><p>687</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/進程</p></td><td><p>3445</p></td><td><p>1485</p></td><td><p>1486</p></td></tr></tbody></table><p><strong>小結：</strong></p><ul><li>開啓 Task 容錯會進行中間交換區結果落盤，存在性能損耗，執行耗時約為之前的 2 倍；</li><li>Query 容錯沒有落盤的過程，與不開啓容錯性能持平。</li><li>1TB 數據集時，Task 容錯寫入性能也會有 8%-10% 損耗，但在 10TB 數據集時反而有性能提升，待深入分析；</li></ul><span id="OSC_h1_5"></span><h1>5 大數據量場景的穩定性測試</h1><p>本節將在計算資源嚴重不足的場景下進行 TPCDS 壓力測試。測試結果如下：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>數據量</strong></p></td><td><p><strong>計算資源</strong></p></td><td><p><strong>錯誤率</strong></p></td></tr><tr><td><p><strong>不開容錯</strong></p></td><td><p><strong>Task</strong><strong>容錯</strong></p></td><td><p><strong>Task</strong><strong>容錯+<br> spill to disk</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,40GB/進程</p></td><td><p>7.07%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,20GB/進程</p></td><td><p>12.12%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,10GB/進程</p></td><td><p>16.16%</p></td><td><p>4.04%</p></td><td><p>0%</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/進程</p></td><td><p>8.08%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>50TB</p></td><td><p>1CN+16Worker,136GB/進程</p></td><td><p>13.13%</p></td><td><p>6.06%</p></td><td><p>5.05%</p></td></tr></tbody></table><p><strong>小結：</strong></p><ul><li>內存不足情況下使用 Task 容錯，能夠大幅度提高 SQL 執行成功率。與 spill to disk 特性結合使用能帶來更好的容錯效果；</li><li>在 50TB 數據集時，Task 容錯仍然能夠提高執行成功率，但某些複雜 SQL 可能會存在單點瓶頸。目前觀察到主要是單點聚合瓶頸。</li></ul><span id="OSC_h1_6"></span><h1>6 高併發場景測試</h1><span id="OSC_h2_7"></span><h2>6.1 1TB TPCD 標準數據集</h2><p>計算資源規格：1CN+8Worker，136GB/進程</p><p>測試 SQL 用例： Q01（多事實表關聯查詢，即 TPCDS99 中的 Q29）</p><p>測試結果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>測試場景</strong></p></td><td><p><strong>1</strong><strong>併發</strong></p></td><td><p><strong>100</strong><strong>併發</strong></p></td><td><p><strong>200</strong><strong>併發</strong></p></td></tr><tr><td><p>不開啓容錯</p></td><td><p>QUERY 容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開啓容錯</p></td><td><p>QUERY 容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開啓容錯</p></td><td><p>QUERY 容錯</p></td><td><p>TASK 容錯</p></td></tr><tr><td><p>多表關聯查詢（多事實表）Q01-1 輪</p></td><td><p>4.1/min</p></td><td><p>5.2/min</p></td><td><p>2.6/min</p></td><td><p>7.3/min</p></td><td><p>7.2/min</p></td><td><p>8.1/min</p></td><td><p>17.50% 失敗</p></td><td><p>18% 失敗</p></td><td><p>7.9/min</p></td></tr><tr><td><p>多表關聯查詢（多事實表）Q01-5 輪</p></td><td><p>5.2/min</p></td><td><p>4.8/min</p></td><td><p>3.4/min</p></td><td><p>8.3/min</p></td><td><p>8.6/min</p></td><td><p>8.6/min</p></td><td><p>64.9% 失敗</p></td><td><p>74.9% 失敗</p></td><td><p>8.5/min</p></td></tr></tbody></table><p><img alt="7.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114254782786537.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_8"></span><h2>6.2 10TB TPCD 標準數據集</h2><p>計算資源規格：1CN+8Worker，136GB/進程</p><p>測試 SQL 用例：</p><p>單表多列聚合排序查詢 Q02：</p><p><strong>select</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk,</li><li>sum(ws_sales_price) total</li></ul><p><strong>from</strong></p><ul><li>web_sales</li></ul><p><strong>where</strong></p><ul><li>ws_sold_date_sk &gt;= 2450815</li><li>and ws_sold_date_sk &lt;= 2451179</li></ul><p><strong>group by</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk</li></ul><p><strong>having</strong></p><ul><li>sum(ws_sales_price) &gt; 0</li></ul><p><strong>order by</strong></p><ul><li>total desc</li></ul><p><strong>limit 100;</strong></p><p>開啓 TASK 容錯全部能夠執行成功。測結果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>測試場景</strong></p></td><td><p><strong>1</strong><strong>併發</strong></p></td><td><p><strong>100</strong><strong>併發</strong></p></td><td><p><strong>200</strong><strong>併發</strong></p></td><td><p><strong>300</strong><strong>併發</strong></p></td><td><p><strong>400</strong><strong>併發</strong></p></td></tr><tr><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td></tr><tr><td><p>單表多列聚合排序查詢 Q02_1 輪</p></td><td><p>3.3/min</p></td><td><p>1.3/min</p></td><td><p>7.9/min</p></td><td><p>5.7/min</p></td><td><p>9.7/min</p></td><td><p>8.8/min</p></td><td><p>8.5/min</p></td><td><p>5.9/min</p></td><td><p>97.25% 失敗</p></td><td><p>6.8/min</p></td></tr><tr><td><p>單表多列聚合排序查詢 Q02_5 輪</p></td><td><p>7.1/min</p></td><td><p>2.0/min</p></td><td><p>10.7/min</p></td><td><p>9.5/min</p></td><td><p>10.3/min</p></td><td><p>9.3/min</p></td><td><p>8.20% 失敗</p></td><td><p>8.0/min</p></td><td><p>99.1% 失敗</p></td><td><p>6.6/min</p></td></tr></tbody></table><p><strong>小結：</strong></p><p>Task 容錯能夠提升 Trino 引擎的併發上限，很大程度上減少諸如「Encountered too many errors talking to a worker node.」報錯的產生。</p><span id="OSC_h1_9"></span><h1>7 多個引擎橫向對比測試</h1><p>首先從 TPCDS99 中挑選出計算資源受限前提下，Trino 不開啓容錯 100% 會跑失敗的 SQL 用例，包括：</p><p>Q04，Q11，Q23，Q38，Q64，Q65，Q67，Q74，Q75，Q78，Q80，Q81，Q85，Q87，Q93，Q95，Q97</p><p>基於相同計算資源（內存、CPU、Container 個數），橫向對比 Trino、Spark、Hive(TEZ) 的性能表現。</p><p>注：測試 Trino 時實際採用的是華為雲 HetuEngine 2.0 的內核版本。</p><span id="OSC_h2_10"></span><h2>7.1 1TB TPCD 標準數據集</h2><p>&nbsp;</p><p><img alt="8.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112918036114849.png" referrerpolicy="no-referrer"></p><p>可看出，在 1TB 數據量、使用相同資源情況下，開啓 Task 容錯，Trino 能夠將原先跑失敗的 SQL 執行成功，且性能約為 Spark 的 3 倍左右，是 Hive(TEZ) 的數十倍。</p><span id="OSC_h2_11"></span><h2>7.2 10TB TPCDS 標準數據集</h2><p>針對 10TB TPCDS 標準數據集，進行對比測試：</p><p><img alt="9.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112947034508561.png" referrerpolicy="no-referrer"></p><p>可看出，在 10TB 數據量、使用相同資源情況下，開啓 Task 容錯，Trino 能夠將原先跑失敗的 SQL 執行成功，且性能約為 Spark 的 3 倍左右。</p><span id="OSC_h1_12"></span><h1>8 綜合評價</h1><p><strong>綜上，基於測試數據總結歸納如下——</strong></p><p><strong>單併發基礎性能</strong></p><ol><li>內存資源充足：不開啓容錯 = Query 容錯 &gt; Task 容錯</li><li>內存資源不足：Task 容錯可以跑過，不開啓容錯/Query 容錯跑不出結果</li></ol><p><strong>大數據量場景的穩定性</strong></p><p>Task 容錯 + spill to disk &gt; Task 容錯 &gt; 不開啓容錯</p><ul><li>1-10TB 數據集：Task 容錯的表現很穩定，通過率 100%</li><li>50TB 數據集： 結合使用 Task 容錯、spill to disk 相比單獨用 Task 容錯表現更好 (少失敗 1 個用例)</li></ul><p><strong>併發場景的穩定性</strong></p><p>Task 容錯 &gt; 不開啓容錯</p><p><strong>多個引擎橫向性能對比</strong></p><ul><li>1TB TPCDS 數據集：Trino(Task 容錯) &gt; Spark &gt; Hive(TEZ)</li><li>10TB TPCDS 數據集：Trino (Task 容錯) &gt; Spark</li></ul><p>總體而言，Trino 的 FTE 功能在性能、穩定性維度的測試表現超出了預期。隨着該能力的逐步演進與完善，相信 Trino 將在一站式數據加工與分析場景發揮出更大的價值。</p><span id="OSC_h1_13"></span><h1>9 思考與改進</h1><p>在擁有了第一手的測試數據與分析結論後，接下來我們將思考如何利用好 Trino 容錯模式，最大化的發揮其價值，同時要提前識別可能存在的問題，探索解決之道。</p><span id="OSC_h2_14"></span><h2>9.1 容錯模式啓用決策</h2><p>從前面的測試數據可以看出，開啓容錯模式對於短查詢性能存在一定的影響（對大查詢性能反而存在優化的可能）。因此需要思考何時、何種方式來開啓容錯模式。</p><p>有如下思路可供選擇——</p><ul><li><strong>用户自主擇機啓用</strong></li></ul><p>最簡單的辦法就是讓業務用户自主擇機選擇啓用或者關閉容錯模式。通常情況下，有經驗的用户知道哪些查詢可能是計算量大或者運行時間久的查詢。他們可以通過改變 JDBC 連接的 session 參數來實現在「交互式模式」和「容錯模式」之間靈活切換；</p><ul><li><strong>基於代價決策</strong></li></ul><p>可以基於 SQL 執行的預測代價來決定是否開啓「容錯模式」。一般來説，這個技術需要依賴實現統計獲得的列級別統計信息。然而，列級別統計信息有時候是不可用的，而且基於代價估算的預測精度往往不夠理想；</p><ul><li><strong>自適應選擇技術</strong></li></ul><p>默認情況下，查詢可以「交互式模式」啓動，然後在運行 N 分鐘後，經過一段時間學習後，由引擎內核根據可用資源情況、業務特點等維度信息，自主決策啓動或關閉「容錯模式」。這個思路需要將 Trino 引擎與機器學習、AI 技術結合起來，踐行數智融合路線；</p><ul><li><strong>基於歷史信息決策</strong></li></ul><p>針對特定數據源的某些類型的查詢，可以預先收集歷史運行記錄並進行分析建模。基於事先學習掌握的先驗知識模型，在 SQL 執行前選擇最優的執行模式。</p><span id="OSC_h2_15"></span><h2>9.2 水平擴展規模應用</h2><p>Trino 具備了容錯執行模式，測試數據顯示效果不錯，那麼接下來大家就會思考：是否可以基於該能力提供更大規模的分析查詢加速服務呢？</p><p>實際業務場景中，企業可能需要按需進行任務提交與彈性資源調度，尤其是在大規模、雲原生環境中，即使開啓容錯模式，對於單個 Trino 集羣，其協調節點（Coordinator）依然可能存在併發能力的瓶頸。此外，從軟件架構角度看，單一 Trino 集羣的可用性也存在一定的風險，影響雲服務環境下的 SLA 目標達成。</p><p>針對上述問題，華為雲交互式分析引擎 HetuEngine 提供了三層分佈式架構，通過統一的 SQL 訪問入口——<strong>HSFabric</strong>來向業務提供全局唯一的<strong>JDBC</strong>服務地址。</p><p><img alt="10.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113244022274958.png" referrerpolicy="no-referrer"></p><p>通過 HSFabric 統一 SQL 訪問入口，HetuEngine 實現了將業務層邏輯與某個特定的計算實例解耦，單個資源租户內部可以橫向擴展多個計算實例，同一個租户內部的 SQL 任務可以在不同計算實例間靈活分配。</p><p>無論從多租户還是單一租户角度看，HetuEngine 的併發容量可水平擴展，同時也提升了服務可用性和資源利用率。</p><p>基於上述架構，HetuEngine 支持服務管理員自由決定是否開啓/關閉單個租户的容錯執行模式，以便更好的滿足不同場景的業務訴求。</p><p><img alt="11.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114116664351503.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_16"></span><h2>9.3 故障處理與恢復</h2><p>在 Trino 容錯執行過程中，Stage 間的 Shuffle 數據會大量落入到分佈式文件系統上。這裏以 HDFS 為例進行討論可能存在問題。</p><p>假設——1 個大 SQL 在執行過程中，Trino 正在往 HDFS 上寫 shuffle 數據，突然 Trino 所在物理機節點發生意外（比如，停電、斷網、操作系統崩潰等），或者 Trino 本身出現故障停止工作（比如，過載等）。這可能會導致整個 Trino 集羣都徹底停止工作。此時，需要管理員人工介入才能重新恢復 Trino 集羣的正常工作狀態。</p><p>顯而易見，對 Trino 來説，至少存在 2 個問題需要思考和解決：</p><ul><li>如何實現 Trino 集羣的應急快速恢復</li><li>確保 HDFS 上的殘留文件及時被清理，避免存儲空間耗盡</li></ul><p>華為雲交互式分析引擎 HetuEngine 基於三層服務化+容器化架構，可有效應對上述挑戰：</p><p><strong><u>針對問題 1</u></strong><strong>：</strong></p><p>藉助於全容器化的部署架構，HetuEngine 的任一計算實例（對應於 1 個分佈式 Trino 集羣）中的任一軟件進程在發生故障/意外時，均可由 Service 層快速自動拉起新的容器進程來接管和補齊服務缺失，在人工介入前快速完成故障自愈。</p><p>在可用資源可能存在不足時，HetuEngine 支持計算實例在線彈性伸縮，通過自動調整 Worker 數量來動態平衡資源利用率，快速補充因故障而丟失的 Worker 節點資源。</p><p>在 Coordinator 節點發生故障時，HetuEngine 從三方面入手進行應對——</p><ol><li>同一計算實例中的 Worker 節點立即與備 Coordinator 進行組網；</li><li>備 Coordinator 升為新的主 Coordinator；</li><li>統一 SQL 入口立即將新的 SQL 請求引流到新的主 Coordinator</li></ol><p><img alt="12.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113305047480491.png" referrerpolicy="no-referrer"></p><p><strong><u>針對問題 2</u></strong><strong>：</strong></p><p>HetuEngine 的 Service 層全天 24 小時不間斷監控，跟蹤並及時發現、清理各層級作業殘留（包括：數據、文件、目錄、元數據等）。</p><p>同時針對歷史任務進行多維度地深入洞察，生成高價值 SQL 運維圖表和決策推薦信息，最終呈現在控制枱頁面。</p><p>Service 層提供的全方位貼心服務，極大降低了對數據分析平台管理員的專業知識要求，解決管理員對於長期運營的後顧之憂。</p><span id="OSC_h2_17"></span><h2>9.4 大數據平台業務無損的彈性擴縮容</h2><p>通常來説，大數據平台的彈性伸縮方案只會涵蓋 Hive、Spark 這類批處理引擎。因 Hive、Spark 本身具備了容錯執行能力，即使因為大數據平台的管控面下發指令強制縮容一個正在運行 Hive/Spark 作業的物理節點，也不會影響相關作業的最終執行成功，最多隻是引發了局部 task 的重試，增加了執行時長。因此，面向 Hive、Spark 引擎的大數據平台彈性伸縮方案相對來説比較容易，只需要關注資源層面的管理操作即可。</p><p>但對 Trino 這類 MPP 架構引擎來説，上述大數據平台的彈性伸縮管理模式就可能會面臨如下幾個方面的挑戰：</p><ul><li>MPP 架構的 SQL 引擎一般都是常駐形態，在縮容過程中任何一個節點被強殺都可能導致該節點上正在運行中的 SQL 任務失敗；</li><li>Trino 的協調節點 Coordinator 默認為 1 個，在縮容過程中，強殺 Coordinator 所在的節點會導致整個 Trino 集羣不可用，運行中的所有 SQL 任務失敗；</li><li>Trino 集羣的擴容，需要平台管理面深入理解 Trino 集羣的內部服務發現與工作機制，針對具體集羣的 IP 和端口號定製配置，才能順利的將新節點加入到一個已經存在的 Trino 集羣中。</li></ul><p>綜上，要想在大數據平台服務上實現對 Trino 生態引擎的彈性伸縮，且做到業務無損，需要在大數據平台服務層和 Trino 內核層之間抽象出一個面向多資源租户+多個計算實例（Trino 集羣）的資源管理&amp;業務接入 service 層。</p><p>HetuEngine 的 service 層對大數據平台服務層屏蔽底層 Trino 內核細節，對上提供 Rest API 調用，並將大數據平台服務層的管理運維訴求轉換為對具體 Trino 集羣的實際變更。同時要做到對多個 Trino 集羣的日常狀態監控與自維護。</p><p><img alt="13.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113353062381452.png" referrerpolicy="no-referrer"></p><p>在上述架構基礎之上，可以基於 Trino 容錯執行的能力，在開啓彈性伸縮時，進一步降低大數據平台層面彈性伸縮的等待時間。</p><p>一種可行的思路大致是——大數據平台服務層向 HetuEngine 的 service 層下發縮容指令，service 確定即將被縮容的節點上正在運行的計算實例，並將其動態切換到容錯模式。在通常情況下，service 層可以快速向上層服務層答覆縮容操作準備繼續，不用等待 SQL 任務執行完。</p><span id="OSC_h2_18"></span><h2>9.5 小結</h2><p>基於上述架構與思路，華為雲 HetuEngine 能很好地應對容錯執行模式可能引入的新問題，顯著提升生產環境實際運維效率，助力用户很方便地享受容錯執行的新紅利。</p><p>接下來， HetuEngine 將逐步引入和完善在兩個不同執行模式間的智能切換能力，進一步完善對大數據雲服務彈性伸縮的場景適配，在數據湖內一站式 SQL 分析領域持續創新、長期演進。</p><span id="OSC_h1_19"></span><h1>10 HetuEngine 2.0 版本預告</h1><p>預計 2023 年 9 月 30 日，HetuEngine 2.0 將隨華為雲 MRS 3.3.0-LTS 正式發佈。在該版本中，可以看到一系列的新能力，例如——</p><ul><li>基於 Java17 運行全新內核，基礎性能、穩定性再上一個新台階，TPCDS 提速 30%</li><li>大 SQL 主動防禦：事前提示/攔截，事中熔斷，事後統計</li><li>支持容錯執行模式：適用範圍更廣泛，使能一站式 SQL 加工 &amp; 分析</li><li>租户內多計算實例架構：自動負載均衡、針對單個業務的併發能力可水平擴展</li><li>新增數據源類型：Hudi，MySQL</li><li>新增支持新建 Hudi 表、Insert 數據</li><li>新增支持 Hue 對接 HetuEngine，提供可視化 SQL 編輯頁面</li><li>新增支持代理用户模式，支持對客户的自有用户體系的代理鑑權及審計</li></ul><p><img alt="14.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113424230425833.png" referrerpolicy="no-referrer"></p><p>相關鏈接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.huaweicloud.com%2Fintl%2Fzh-cn%2Fcmpntguide-lts-mrs%2Fmrs_01_1711.html" rel="nofollow" target="_blank">https://support.huaweicloud.com/intl/zh-cn/cmpntguide-lts-mrs/mrs_01_1711.html</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10117447</guid>
            <link>https://my.oschina.net/u/4526289/blog/10117447</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：CNCF 宣佈 Cilium 畢業]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fstakater%2FReloader" target="_blank">Reloader</a></h3><p>Reloader 是一個 Kubernetes 控制器，用於監控 ConfigMap 和 Secrets 中的變化，並對 Pod 及其相關部署、StatefulSet、DaemonSet 和 DeploymentConfig 進行滾動升級！</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXenitAB%2Fspegel" target="_blank">Spegel</a></h3><p>Spegel 在瑞典語中意為鏡像，是一種無狀態集羣本地 OCI 註冊鏡像。</p><p>Spegel 使 Kubernetes 集羣中的每個節點都能充當本地註冊鏡像，允許節點之間共享鏡像。一個節點已提取的任何映像都可供集羣中的任何其他節點提取。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkr8s-org%2Fkr8s" target="_blank">kr8s</a></h3><p>這是一個用於 Kubernetes 的簡單、可擴展的 Python 客户端庫，對於已經知道如何使用 kubectl 的人來説，感覺非常熟悉。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40sachin.singh.professional%2Freal-application-industry-based-project-on-devops-b3764c9688b2" target="_blank">基於 DevOps 的真實應用行業項目</a></h3><p>這篇文章是關於基於 DevOps 的真實應用行業項目的介紹。作者在文章中提到了如何設置 AWS 雲環境、安裝和配置必要的工具（如 AWS CLI、eksctl、Helm 和 kubectl），以及如何使用這些工具來創建和管理基於 Kubernetes 的應用集羣。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40saadullahkhanwarsi%2Ftitle-comprehensive-ci-cd-pipeline-with-terraform-packer-jenkins-sonarqube-maven-docker-fa4e51b57971" target="_blank">使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 的綜合 CI/CD 流水線</a></h3><p>這篇文章介紹瞭如何使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 建立一個全面的 CI/CD 流水線。這篇文章提供了一個全面而詳細的指南，介紹了每個步驟的具體操作和配置，並強調了建立可靠和高效的開發流水線的重要性。通過按照文章中的步驟進行操作，讀者可以建立一個完整的 CI/CD 流水線，並實現高質量軟件的快速交付</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fannouncements%2F2023%2F10%2F11%2Fcloud-native-computing-foundation-announces-cilium-graduation%2F" target="_blank">CNCF 宣佈 Cilium 畢業</a></h3><p>日前 CNCF 宣佈 Cilium 畢業。Cilium 是一種基於 eBPF 的開源雲原生解決方案，用於提供、保護和觀測工作負載之間的網絡連接。</p><p>Cilium 最初由 Isovalent 創建，基於 eBPF 從頭開始構建。它於 2021 年 10 月成為 CNCF 孵化項目，現在有來自 7 家不同公司的維護者和 800 多名個人貢獻者。該項目為全球最大的 Kubernetes 集羣提供支持，最終用户涵蓋從數字原生初創企業到全球最大的金融機構和電信運營商。它擁有 46 個來自公司的公開案例研究，包括 Bell Canada、Bloomberg、DB Schenker、S&amp;P Global、Sky 和紐約時報，在其用户文件中列出了 100 多家組織。Cilium 是活躍度第二高的 CNCF 項目，僅次於 Kubernetes。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fcncf-crio-graduation%2F%3FtopicPageSponsorship%3D82a399eb-74a1-4f0b-83c4-ccff2bdfcda1" target="_blank">CNCF 宣佈 CRI-O 項目畢業</a></h3><p>雲原生計算基金會宣佈 CRI-O 項目畢業，該項目為 Kubernetes 生產環境中的 kubelet 提供安全、高性能且穩定的容器運行時接口 (CRI) 實現。該項目已被 7 個新組織採用，發佈了 11 個新的次要版本，並向主分支提交了 4,000 多次提交。</p><p>CRI-O 早在 2016 年就起源於 Kubernetes 孵化器，由 Red Hat 創立。到 2019 年 4 月，它已獲得雲原生計算基金會 (CNCF) 的認可。為了從孵化階段過渡到正式畢業，CRI-O 採取了幾個重要步驟。其中包括加強治理結構、制定行為準則、建立安全列表、接受 Ada Logics 與 CNCF 和 OSTIF 協調進行的安全審計、獲取多元化的用户羣並進行用户訪談、投資全面的文檔以及積極培養新的貢獻者。</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 02:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10118125</guid>
            <link>https://my.oschina.net/u/4197945/blog/10118125</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一份谷歌寫給 CTO 們的報告 - DORA 2023 版全面解讀]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p><img src="https://oscimg.oschina.net/oscnet/up-5eb3d1822561be3b093c8103f70b3865546.png" alt="file" referrerpolicy="no-referrer"></p><h2>背景</h2><p>幾天前，谷歌雲旗下的 DORA (DevOps Research and Assessments) 發佈了一年一度的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Fdevops-sre%2Fannouncing-the-2023-state-of-devops-report" target="_blank">State of DevOps 2023 報告</a>。DORA 在國內不像 Gartner 有那麼高的知名度，但在全球，DORA 是研發效能 / DevOps 領域最具影響力的報告，從 2014 年開始，每年會出一份，2020 因為疫情的原因沒有出，所以加上今年的一共有 9 份。</p><p>DORA 一開始是一家獨立的研究機構，不過在 2018 年底加入了谷歌雲。總體來講 DORA 的報告是整個 DevOps 行業裏面最為專業和客觀的，這也應該是他當初受到谷歌青睞的原因。即使是加入谷歌後，它的報告也基本可以保持中立性。從最初聚焦在軟件發佈指標，到現在延伸到組織文化，業務表現，DORA 的閲讀人羣也從經理，總監為主的技術中層擴展到 CTO, VP 為主的技術管理層，這點尤其在今年的報告中更為突出，也貼合谷歌雲從面向開發者到面向管理者的重心轉移。</p><p>Bytebase 作為一家面向研發團隊，提供前沿數據庫 CI/CD 開源工具的廠商，這也是我們連續第三年對 DORA 進行深度解讀：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247483758%26idx%3D1%26sn%3D61859a6708f6f5b535ed0bd5ff98f199%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2021 報告深度解讀</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247497479%26idx%3D1%26sn%3Da3908d32d14a24b377c937186f8c8cdf%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2022 報告深度解讀</a></li></ul><h2>贊助商</h2><p><img src="https://oscimg.oschina.net/oscnet/up-a571211f81156e33243d22cc85baf809521.png" alt="file" referrerpolicy="no-referrer"> 今年獲取報告需要先留下聯繫方式，在收購 DORA 後的第 5 個年頭，谷歌雲也開始加速了對 DORA 的變現。今年的贊助商相比去年也發生了很大的變化 <img src="https://oscimg.oschina.net/oscnet/up-a4a6a5d060ce086f67922e136fa6647cc5d.png" alt="file" referrerpolicy="no-referrer"></p><h3>去年的老面孔</h3><ol><li>Broadcom Software。Broadcom 算是一家比較傳統的軟件廠商，和 DevOps 相關的產品線多來自於 2018 年對 CA 的收購。總部在硅谷，當年 CA 大大的 Logo 還掛在 Highway 101 旁的唯一一棟高樓上。</li><li>Deloitte。IT 實施諮詢，DORA 報告贊助商的常客。</li></ol><h3>今年的新面孔</h3><ol><li>LinearB。研發流程的優化。通用企業流程挖掘領域的領導者是 Celonis，而 LinearB 可以理解為軟件研發這個特定領域的 Celonis。 <img src="https://oscimg.oschina.net/oscnet/up-de3386de47e94ff6f9827947556a4f0e36e.png" alt="file" referrerpolicy="no-referrer"></li><li>Digital.ai。和 LinearB 類似，只是更加直白地用 AI 來宣傳。 <img src="https://oscimg.oschina.net/oscnet/up-395cb0cd74c0e800da5e2cdeba2f02b0962.png" alt="file" referrerpolicy="no-referrer"></li><li>Opsera。也和前兩家類似。 <img src="https://oscimg.oschina.net/oscnet/up-8b7dcc3e83be5073ef33648e4c85fb8b24a.png" alt="file" referrerpolicy="no-referrer"></li><li>Sleuth。也是做類似的事情，不過更加聚焦在 DORA 上。 <img src="https://oscimg.oschina.net/oscnet/up-521be51a5ff92a6025053bfcb17e834b93b.png" alt="file" referrerpolicy="no-referrer"> 插曲，這家叫 swarmia 有點機智，知道新的 DORA 報告出了，會有人去搜贊助商，然後就投放了對應的關鍵詞？ <img src="https://oscimg.oschina.net/oscnet/up-ccb1f7e5dd1601eb36d716183f45958e27f.png" alt="file" referrerpolicy="no-referrer"></li><li>Qarik。幫用户遷移到雲原生架構的。 <img src="https://oscimg.oschina.net/oscnet/up-610f2b5db5857c3339cafc7b974b4731486.png" alt="file" referrerpolicy="no-referrer"> 從贊助商列表看，做研發流程洞察優化的廠商佔了絕大部分，也貼合 DORA 報告的目標受眾。不過也可以看到這個領域競爭的激烈程度。接下來我們進入正題，解讀一下 DORA 報告本身。</li></ol><h2>受訪人羣</h2><p>樣本量相比去年增加了 3.6 倍，整個業界應該是僅次於 Stack Overflow Developer Survey 的規模。覆蓋人羣則更加全面。 <img src="https://oscimg.oschina.net/oscnet/up-d2964cbd9daae32bd711ab2f1906b0aeca9.png" alt="file" referrerpolicy="no-referrer"></p><p>地域分佈上，除去依然保持低調的某東方大國，也體現了各國軟件業的相對體量。 <img src="https://oscimg.oschina.net/oscnet/up-46905759d065ca9f3bdbf33a66bc3accaae.png" alt="file" referrerpolicy="no-referrer"></p><p>這個分佈也可以作為出海軟件公司的參考，用於選擇進入一個新大陸的落腳點。看非洲，肯尼亞已經排在了南非之前。 <img src="https://oscimg.oschina.net/oscnet/up-47a0ad283cc693b1fe29d3ab4c051ef7d2b.png" alt="file" referrerpolicy="no-referrer"></p><h2>方法論</h2><p><img src="https://oscimg.oschina.net/oscnet/up-236857daf38920f85a315070fd207b3ef72.png" alt="file" referrerpolicy="no-referrer"> DORA 最近幾年的報告都有兩條主線：</p><ul><li>組織線：業務表現，團隊表現，個體感受</li><li>事務線：交付表現和運行表現</li></ul><p>DORA 的風格和海外做軟件的風格一樣，都是從點切入，由小及大。它最初的切入點是軟件交付，後面增加了軟件運行。再在此基礎上推演業務表現 / 團隊表現 / 個體感受。</p><h2>四大核心指標</h2><p>四大核心指標基本沒變：</p><ul><li>Deployment frequency（發佈頻率）</li><li>Change lead time (代碼從提交到上線的時間）</li><li>Change failure rate (上線失敗需要介入的比例）</li><li>Failed deployment recovery time (失敗的部署需要恢復的時間）</li></ul><p>其中最後一個術語做了調整，之前報告用的是更加通用的術語 time-to-restore。因為通用，所以無法區分發布造成的故障和自然災害造成的故障。新的術語更加精確地限定在了發佈領域。 <img src="https://oscimg.oschina.net/oscnet/up-0c7561f6d41f7eb884aee368f442f6af0c3.png" alt="file" referrerpolicy="no-referrer"></p><h2>分級 (Grading) - 精英級的迴歸</h2><p>去年報告因為 Elite 和 High 之間缺乏區分度，本來的四檔變成了三檔。 <img src="https://oscimg.oschina.net/oscnet/up-2b50c2b87c2c2d71b00e52b14c2b1fcea42.png" alt="file" referrerpolicy="no-referrer"></p><p>今年 Elite 精英級又迴歸了，原因是因為樣本量的大幅增加，區分度又出來了 <img src="https://oscimg.oschina.net/oscnet/up-612c3f1d0205e1573279d38a151553c2d47.png" alt="file" referrerpolicy="no-referrer"></p><h2>分類 (Clustering) - 全新的組合</h2><p><img src="https://oscimg.oschina.net/oscnet/up-593502e6fe58556ee4de9a617803a60c51e.png" alt="file" referrerpolicy="no-referrer"></p><p>去年的報告採用了類似 Tuckman 組織發展模型的按階段分類 (Forming &gt; Storming &gt; Norming &gt; Performing &gt; Adjourning)，劃分為 Staring &gt; Flowing &gt; Slowing &gt; Retiring。 <img src="https://oscimg.oschina.net/oscnet/up-a7e04be377333e0575e992aed282c5772ca.png" alt="file" referrerpolicy="no-referrer"></p><p>今年採用了新的基於特質的分類：</p><ul><li>User-centric - 用户導向型</li><li>Feature-driven - 功能導向型</li><li>Developing - 發展型</li><li>Balanced - 均衡型</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-870577da04ed356ac34cbb857cff2d3b907.png" alt="file" referrerpolicy="no-referrer"></p><p>不同分類下各項指標的表現： <img src="https://oscimg.oschina.net/oscnet/up-9cecad6ba3b191fc650daa36a587d3ce4d8.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-aeb3f3797efd9aa334df838820f3eb44da1.png" alt="file" referrerpolicy="no-referrer"></p><p>筆者覺得今年的分類有點模糊，邊界不清晰。拿 Bytebase 自身來説，按照去年的階段分類，可以很清楚地落在 starting 到 flowing 之間。而對於今年的 4 個分類，Bytebase 其實都能沾上邊。按照特質分類，個人感覺需要像 MBTI 人格分析那樣更加的細分才行。</p><h2>關鍵發現</h2><p><img src="https://oscimg.oschina.net/oscnet/up-28145dc564762f1808214447ffad28a4bf3.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>建立健康的文化</li><li>站在用户視角做事</li><li>通過更快的代碼評審提高軟件交付</li><li>通過高質量的文檔加成技術能力</li><li>通過雲提升基礎設施的靈活性</li><li>平衡交付的速度，運行的表現和用户</li><li>公平地分配工作量</li></ul><h3>文化和用户視角</h3><p>用户視角也是文化的一部分，就放在一起講了。 <img src="https://oscimg.oschina.net/oscnet/up-d4b9e7f67efeab0aa7925412e569aff5947.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-e2216b39ddf54ed1c64cf79e94fe1eb2631.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-a58f36f397b485ac33cd22c0b200e56fa9a.png" alt="file" referrerpolicy="no-referrer"></p><blockquote><p>Westrum culture 來自於 Westrum 在 2004 年的論文 A typology of organisational cultures 裏的觀點。高度信任且注重信息交流的組織文化能帶來出色的業務表現。</p></blockquote><p>在所有評估的指標裏，Westrum 文化和以用户為中心是最能帶來正向效果的。前者大家可以進一步閲讀 Westrum 的論文，而後者在 DORA 報告裏還給出了進一步的數據。 <img src="https://oscimg.oschina.net/oscnet/up-fd32e6b68e3a63952fd9181557bbb936d61.png" alt="file" referrerpolicy="no-referrer"></p><p>可以看到以用户為中心能給每一個指標都帶來顯著提升，自然現在的公司都要大力提倡了。</p><h3>影響表現的技術因素</h3><p><img src="https://oscimg.oschina.net/oscnet/up-b4c4307c5e25a57a2a9d52afb54b25dd442.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-5d62680bc8930b6157424dc0775ff2d5417.png" alt="file" referrerpolicy="no-referrer"></p><p>延用了計算機的經典解法 - 分治。松耦合的架構 &gt; 更小的變更 &gt; DORA 四大核心指標的提升。 <img src="https://oscimg.oschina.net/oscnet/up-6b5812b180b6aae192f078f4309b168f867.png" alt="file" referrerpolicy="no-referrer"></p><h2>重新驗證 Reliability 和 Performance 的關係</h2><p><img src="https://oscimg.oschina.net/oscnet/up-36bc9047b6db543a0c8185a3dc00f51f3a6.png" alt="file" referrerpolicy="no-referrer"> 2022 年報告的數據顯示，組織先要投入很長一段時間的穩定性建設，才能看到成果。這個結論多少讓人沮喪，開始沒有正向反饋就容易勸退。</p><p>不過 2023 年通過優化問卷，得出了一個鼓舞人心的結論，就是穩定性和表現的關係符合 J 曲線，投入前期就有效果，然後再經過一段瓶勁期，最終再是顯著的收益。</p><h2>還解決不了主要矛盾的 AI</h2><p><img src="https://oscimg.oschina.net/oscnet/up-fdaf6d7748c0b601b199870f4e087122966.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-946410a6e01eb4391dd33570bd0286f22ac.png" alt="file" referrerpolicy="no-referrer"> 今年的報告自然不能忽視 AI，結論算是澆了一盆冷水，在所有技術影響因子裏是以很大的差距墊底的。這倒也符合個人的預期，因為目前 AI 唯一破圈的場景是幫助寫代碼，屬於「道法術器」裏的「器」，是影響最小的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-36288bc0d74bf857329cfdc1bddc0d7848c.png" alt="file" referrerpolicy="no-referrer"> 這幅圖也比較有意思，展示了當下在研發交付領域，AI 擅長的和不擅長的。除了最後一個 Solving file path issue 是個有點奇怪的問題外，墊底的幾個對應的都是「道法」層面的主要矛盾。</p><h2>總結</h2><h3>一份專業的報告</h3><p>拋開內容本身，DORA 一如即往地給我們展示瞭如何撰寫一份專業的行業報告。方法論，受訪人羣，分析方法都在報告中有清晰闡述。 <img src="https://oscimg.oschina.net/oscnet/up-3d18a669ca3106519c0952cf0ec9b5ae842.png" alt="file" referrerpolicy="no-referrer"></p><p>有反直覺的數據，也不會勉強附和，而是把疑問拋出。 <img src="https://oscimg.oschina.net/oscnet/up-d66aed3bd7c358764137da07ccf5594ce95.png" alt="file" referrerpolicy="no-referrer"></p><p>關注更多的聲音，既讓報告更加全面，也注入了人文的元素。 <img src="https://oscimg.oschina.net/oscnet/up-443671e03d566e7c444137d802adf5be8ff.png" alt="file" referrerpolicy="no-referrer"></p><p>説幾點我讀下來的不足：</p><h3>I. 輕描淡寫的平台工程</h3><p><img src="https://oscimg.oschina.net/oscnet/up-5e850566eedb734896a3ec88d39c1a7f6c3.png" alt="file" referrerpolicy="no-referrer"></p><p>今年的報告裏第一次提到了最近興起的平台工程 (Platform Engineering)。DORA 的主題是研發效能 / DevOps，從行業趨勢看，這部分工作對應到的就是平台工程團隊。</p><p>平台工程的用户是內部的研發工程師，所以這部分也就出現在第 19 頁 User-centric 裏。但作為一份研究研發組織的報告，應該可以展開講講平台工程，畢竟這是近 10 多年裏，繼 DevOps / SRE 後，終於湧現出來的一個新組織形態。</p><h3>II. 老生常談的 Cloud</h3><p><img src="https://oscimg.oschina.net/oscnet/up-bb34887f4cf48b52aca04ad414bde728faf.png" alt="file" referrerpolicy="no-referrer"></p><p>報告裏列舉了 Cloud 的各種優勢，但對於最近業界 Cloud cost 相關的討論以及伴隨着的下雲呼聲沒有涉及，缺少了一點辯證，這是報告出自谷歌雲之手的一點偏心吧。除此之外，谷歌的另外一處植入就是談論自家的 SRE 實踐。 <img src="https://oscimg.oschina.net/oscnet/up-c53fa3904c6646e61ba9f9e618ed89534da.png" alt="file" referrerpolicy="no-referrer"></p><h3>III. 轉型期的 DORA</h3><p><img src="https://oscimg.oschina.net/oscnet/up-ce8afdbe7baf804fcc7c2c4968e6d97eab7.png" alt="file" referrerpolicy="no-referrer"> 業界權威的年度報告裏，Stack Overflow Developer Survey 偏一線，關注具體工作中所使用的產品技術；Gartner 面向管理層，關注行業的趨勢。DORA 介於兩者之間，DORA 裏 DO 所代表的 DevOps 基因決定了報告的一線視角，RA 所代表的 Research &amp; Assessment 又使得它會給出價值判斷。而從這幾年的報告趨勢來看，DORA 正逐步走向管理層。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09fd199bbdf16e597abce5f819dacb538e8.png" alt="file" referrerpolicy="no-referrer"> 比如從贊助商列表來看，往年都有不少研發鏈路某一個環節的工具廠商，像做 IDE 的 JetBrains，製品庫的 JFrog，代碼託管的 GitLab，應用部署的 Octopus，數據庫變更的 Liquibase。而今年則是清一色的研發效能過程優化贊助商，或許這也是和報告背後的金主谷歌雲面向大客的策略調整有關。</p><p>再從正文看，今年的報告弱化了 DORA 一直背書的軟件發佈四大核心指標，而是更多地去敍述核心指標背後的元素。這其中把文化和以用户為中心放在了前兩位。</p><blockquote><p>Culture eats strategy for breakfast - 彼得·德魯克</p></blockquote><p>既然轉型走高層的路線，那就要面臨陣痛，DORA 團隊分析覆盤的能力很強，但相比 Gartner，缺少前瞻性。其本身又綁定在 DevOps 這個早已成熟的概念，再疊加上要宣傳 SRE 這個也已經過了成長期的實踐。對於平台工程，對於 AI，DORA 這次提及的不多，這一方面體現了它務實的部分，但這些未來 3 - 5 年可見的趨勢，才是管理層們更關心的內容。</p><h2>結束語</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0e98a4ed8b4be53aec56928693c2d1406c0.png" alt="file" referrerpolicy="no-referrer"> 度量不是目的，就像發佈軟件並不是目的。數據若能印證假設固然值得欣喜，但更有價值的往往還是揭示錯誤的假設。提高軟件發佈的效率，也是為了形成更短的反饋閉環，發現產品的缺陷，進行改良，更好地滿足用户。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0d34715122deb2e90e01ded95b89e965f32.png" alt="file" referrerpolicy="no-referrer"> 在這個 AI 的黎明，虛擬現實的前夜，一個具備持續改進能力的組織才是面向未來不確定性下的最大確定性🦾。</p><p>能讀到這裏的，也一定是對軟件交付有追求的讀者。可以看一下我們正在做的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">Bytebase</a>，它目前是整個行業裏，數據庫變更 CI/CD 領域的領導者。</p><hr><p>💡 你可以訪問<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">官網</a>，免費註冊雲賬號，立即體驗 Bytebase。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10118131</guid>
            <link>https://my.oschina.net/u/6148470/blog/10118131</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源軟件有漏洞，作者需要負責嗎？是的！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>近日，禪道創始人王春生在開源中國發布的一篇<a href="https://my.oschina.net/oscpyaqxylk/blog/10114031" rel="nofollow">文章</a>引起了眾多同行的圍觀，原因是他分享了一個開源協議在中國面臨的 bug：開源軟件許可協議通常會表明作者不對用户使用該開源軟件所造成的任何問題負責。但是！這種條款，在中國，是違法的——</p><p><strong>2017 年發佈的《中華人民共和國網絡安全法》</strong></p><p><strong>第二十二條規定：</strong></p><p>網絡產品、服務應當符合相關國家標準的強制性要求。網絡產品、服務的提供者不得設置惡意程序；發現其網絡產品、服務存在安全缺陷、漏洞等風險時，<span style="color:#d83931"><strong>應當立即採取補救措施，按照規定及時告知用户並向有關主管部門報告。</strong></span></p><p><span style="color:#d83931"><strong>網絡產品、服務的提供者應當為其產品、服務持續提供安全維護；在規定或者當事人約定的期限內，不得終止提供安全維護。</strong></span></p><p>網絡產品、服務具有收集用户信息功能的，其提供者應當向用户明示並取得同意；涉及用户個人信息的，還應當遵守本法和有關法律、行政法規關於個人信息保護的規定。</p><p><strong>第六十條規定：</strong></p><p>違反本法第二十二條第一款、第二款和第四十八條第一款規定，有下列行為之一的，<span style="color:#d83931"><strong>由有關主管部門責令改正，給予警告；拒不改正或者導致危害網絡安全等後果的，處五萬元以上五十萬元以下罰款，對直接負責的主管人員處一萬元以上十萬元以下罰款：</strong></span></p><p>（一）設置惡意程序的；</p><p>（二）<span style="color:#d83931"><strong>對其產品、服務存在的安全缺陷、漏洞等風險未立即採取補救措施，或者未按照規定及時告知用户並向有關主管部門報告的；</strong></span></p><p>（三）<span style="color:#d83931"><strong>擅自終止為其產品、服務提供安全維護的。</strong></span></p><p><strong>也就是説，不管你寫的這個是不是</strong><strong>開源軟件</strong><strong>，只要你提供給別人用了，那你就得負責到底。</strong></p><p>這無疑是跟我們熟悉的開源協議相違背了，也跟我們習慣的開源規則相牴觸：</p><p>作為開源軟件，我本身就沒收你錢了，開源出來純屬做公益，怎麼你還要我給你免費搞售後啊？那豈不是讓我打白工嗎？</p><p>這樣的條款，讓人還敢參與開源嗎？</p><p>對於這樣的擔憂，開源中國特地邀請了軟件行業的專業律師鄧超，來聽聽他的分享和解讀~</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：《網絡安全法》第二十二條規定是出於怎樣的考量？</strong></span></p><p>鄧超：在我國，建設、運營和使用網絡，都要受到網絡安全法的約束。小到普通人的上網安全，大到國家的信息安全，都是網絡安全法的維護目標。這就要求我們的網絡產品和網絡服務、各種程序，都不能有安全漏洞。</p><p>對於開源軟件的話，一般它都會有一些免責條款，聲明如果軟件出了問題作者會免責之類的。<strong>但是，它這個免責條款，是平等主體之間的免責條款。</strong>比如説開源軟件的提供者和開源軟件的使用者，他們是平等的主體，所以在民事意義上，他是免責的。但是網絡安全法，它瞄準的不是平等主體之間的責任，它是站在國家層面、政府層面，對所有的網絡產品/服務運營商提出的要求，這個跟開源協議的免責條款，並不衝突。</p><p>舉個例子，假設現在有個開源軟件存在漏洞，把 100 個用户的信息泄露了。這時候由於免責條款，你用户不能按照這個開源許可證，來追究我的責任，不能起訴我讓我賠錢。<strong>但是沒有民法的責任，不代表沒有行政法、甚至是刑法的責任。</strong>你把用户的信息泄露了，那國家肯定是要處罰你的，罰款或者督促整改，或者把你關停，都有可能。所以這兩者之間並不矛盾。</p><p>在網絡安全法這裏，它並沒有給開源軟件什麼豁免權。退一步來説，開源軟件，只是免費提供代碼而已，並不代表它在整個過程中不獲利。就好像微信也免費，可是它賣廣告賺錢。開源軟件也一樣，它也有自己的盈利模式的。<strong>反正從法律上來講，開源跟其他形式的軟件比沒有任何的特殊性，</strong>最終還是要受到網絡安全法的監管。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：假設只是免費開源一個項目，例如工具庫，放在碼雲，被另一家公司用來做商業產品了，現在產品找到一個漏洞和這個工具庫有關，請問是誰來負責呢？</strong></span></p><p>鄧超：<strong>根據工信部、互聯網辦公室、公安部《網絡產品安全漏洞管理規定》的通知第 7 條規定，</strong>負責任的應該是網絡產品提供者。包括我剛才提到的網絡安全法，它們主要針對的還是運行網絡產品和提供網絡服務的這些人。你説我只寫了一箇中間件，我給它傳到網上，它能提供網絡服務嗎？從我個人的觀點來講，我可能會認為它是一種半成品或者是零部件兒的東西，不是最終產品。從這個角度上來講，你單獨開發一箇中間件，它不能單獨使用，你也沒有對外提供產品和服務的可能，那這個責任就會小很多。</p><p>回到《網絡產品安全漏洞管理規定》的通知第 7 條，它規定了如果發生安全漏洞方面的問題，首先是網絡產品的運營者來負責，還要通知你的上下游，及時上報工信部。</p><p style="text-align:center"><img height="779" src="https://oscimg.oschina.net/oscnet/up-d964ac2e4d84b1a2c7c8fe1fbe7347f49bc.png" width="1639" referrerpolicy="no-referrer"></p><p>所以説我覺得對於咱們開發者來講，可能需要理清一下，<strong>咱們開發的究竟是一個完整的網絡產品，提供完整的網絡服務，還是咱們僅僅是作為一個個人開發者，開發的是無法提供完整服務的一個網絡組件。</strong></p><p>在前種情況下，受到網絡安全法和相關規定的約束肯定更重一點。雖然説咱不直接收費，但是在法律上講抗辯很難成立，除非説你是非盈利性組織運營的。但這裏是一個公司行為，公司，它本身就是以盈利為目的的。哪怕你説你現在是虧錢的，或者説這個軟件本身你沒有收費，但是不影響它的盈利方式呀，它將來有可能掙錢，你也有可能通過其他的方式掙錢，所以抗辯很難成立。</p><p>相反，如果你是提供一箇中間件，沒有提供完整的網絡服務，只是提供一個插件或者一段代碼，那我覺得可能這個責任要更輕一點，有可能不構成網絡安全法裏面描述的提供網絡服務或者提供網絡產品。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：舉個例子，假如現在出了個國產開源系統，被手機廠商拿來做商業產品了，這個系統出了問題先找誰呢？</strong></span></p><p>鄧超：找手機廠商，然後手機廠商肯定要聯繫開源系統讓他們處理。開源系統屬於上游。但反正第一責任人是手機廠商。誰離用户更近，責任更靠前。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：如果</strong><strong>開源軟件</strong><strong>中有 bug，一般是誰來監管這樣的 bug ？</strong></span></p><p>鄧超：會有網警負責不定期地對一些網絡產品進行抽查，不會説等到出事兒了才去追究。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：如果是對於非盈利的個人開源者的話，沒有收費還要負責維護這個軟件一輩子，負擔是不是太重了，會不會有點不公平？</strong></span></p><p>鄧超：這其實是一件有價值取向的事兒。雖然大家覺得説我是在用愛發電，沒有收費。但至少從咱們現在的法律條款來看，國家肯定還是把安全放在更重要的位置。不能因為我做的東西是免費的，就能獲得一些豁免，或者擁有一些特權。萬一造成一些什麼信息安全的事故，那肯定就因小失大了。所以説，對咱們開源業界來講，即使是開源開發者，如果你提供一種完整的網絡服務，提供完整的網絡產品，那同時也就有義務，維護網絡安全。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：你覺得這樣的條款對開源這個行業來説，提出了什麼樣的要求？有什麼樣的影響？</strong></span></p><p>鄧超：我覺得只要大家盡到一些基礎的義務，避免發生網絡安全的事故，我覺得就夠了。雖説這樣一來有了限制，肯定是比沒限制的時候，要「阻礙」一點，最好就什麼限制什麼義務都沒有，這樣利於開源的發展。但咱們剛才講了，這畢竟不是現實。而且，維護網絡安全，也不是特別嚴苛的義務，提供了完整的網絡產品和網絡服務，才受網絡安全法的約束。所以我覺得對於這些公司來講，進行安全漏洞的審查、提高網絡安全的等級也並不是一個特別嚴苛的要求。相反，對於個人開發者，他可能沒有能力提供完整的網絡服務或網絡產品，可能也不會受到網絡安全法的約束。</p><p>對於開源的發展，我們從網絡安全的角度講，這確保了大家的信息不會被盜取，公司的商業秘密也不會被泄露，這樣對整個社會都有好處。具體到開源，你説這樣做對開源施加了義務，那我覺得這也是一個好的義務。可能有一種想法是——施加義務會有一些負面的影響。但我要説，這要看是從小的圖景看還是從大的圖景看：從小圖景看，人家使用者也要注意網絡安全，使用開源軟件也一樣會有顧慮的；從大的圖景看，確保了網絡安全之後，我們整個網絡社會都會受益，對開源的推廣説不定更友好。</p><p>&nbsp;</p><hr><p><strong>本期嘉賓：</strong>鄧超|律師（微信號：dengchao）</p><p><img height="500" src="https://oscimg.oschina.net/oscnet/up-16343324407e4264d7fe0514fb742b0d6ff.jpg" width="357" referrerpolicy="no-referrer"></p><p>具有理學學士和法學博士學位，有着深厚的法學理論基礎；在知識產權行業從業十餘年，有着豐富的實踐經驗。</p><p>長期專注於科技和媒體領域的知識產權前沿問題的研究和實踐，代表客户處理相關的訴訟和非訴法律事務。</p><p>在進入律師事務所之前，曾就職於世界 500 強公司的法務部以及國內頂尖的知識產權事務所，為眾多跨國公司、國內上市公司等提供知識產權法律服務。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 00:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6852546/blog/10118120</guid>
            <link>https://my.oschina.net/u/6852546/blog/10118120</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Timeplus 為全球開發者開源高性能實時數據平台核心]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>2023 年 9 月 21 日</strong><span>&nbsp;</span>- Timeplus，業界最快最強的實時流式分析平台之一，宣佈將其核心引擎「Proton」正式開源提供給全球開發者。Timeplus 在融合 ClickHouse 的歷史在線分析處理的基礎上，開發了一款全新的流式數據處理優先、統一歷史數據從存儲到計算原生一體化的實時數據平台。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">這意味着企業現在可以使用統一 SQL 語言實時無縫地查詢流式數據和歷史數據，進行實時處理分析，實時生成報表。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">相對於其他流式數據處理技術而言，Timeplus 的高效和簡潔的統一架構，不僅可以提供增強的數據處理及分析功能以及更好的性能，更可以讓企業大大降低實時數據處理的開發、部署和運維成本。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 的聯合創始人兼首席執行官王亭表示：「Timeplus 是一家由工程師創辦，併為工程師服務的公司。我們廣泛的開發者用户都表示十分喜歡 Timeplus 產品的簡單、高效和優雅，許多人也都希望我們能開放源代碼。我們傾聽到大家的心聲，非常高興地正式宣佈核心引擎‘Proton‘的開源，同時和 ClickHouse 成為合作伙伴併為社區作貢獻，這將惠及全球的開發者。用户可以從高效的流式處理分析和 OLAP 歷史分析結閤中受益。」</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 認為僅靠單一的流式處理無法滿足實時分析的複雜需求。要實時找到問題的根源並精確處理相關內容，需要參考歷史數據。通過使用 Timeplus 和 ClickHouse 的集成，開發者現在可以無縫地關聯歷史數據和統一分析，以解決複雜的實時分析需求。例如：在線與離線數據的關聯比較、數據回填和回測等。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">同時，用户現在也能更輕鬆、更經濟、更快速地運行統一的實時分析，來應對一系列具有挑戰性的多樣化用例的分析問題，比如在金融服務和物聯網等領域的分析。在實際使用中，Timeplus 客户使用統一高效的 SQL 流式處理完成實時分析，可以大幅度降低總體擁有成本（TCO），只是使用其他系統的 10%。</p><h2><strong>為應對行業挑戰而生，為業界提供實時分析的創新技術方案</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 解決了一個極其困難的技術挑戰：在單一內核提供了簡單、高效、統一的流式分析與歷史分析的融合。通過與 ClickHouse OLAP 分析能力的無縫整合，Timeplus 提供了強大的流式處理及複雜的增量計算能力，徹底改變了數據工程師和分析師的工作方式。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">許多行業都需要創新的方法來實現實時持續智能。例如資本市場，從優化成本以及基礎設施來支持更可靠的交易，到在不斷變化的市場環境下進行實時的風險控制和欺詐檢測，實時處理技術一直至關重要。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">開發者常常陷入一個「三難選擇」的境地，他們必須在速度、功能和開放性之間做出權衡，通常只能選擇其中一個或兩個。Timeplus 基於 SQL 的開放標準實現了歷史和流式分析的強大功能以及超低延遲。通過將核心開源，Timeplus 為整個社區的開發者提供了機會，一起來參與到實時流式數據分析的平台創新中。Timeplus 強大的流式 SQL 和實時分析能力也能更好地幫助開發者加速各行各業的競爭優勢。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">正如華泰證券信息技術部聯席負責人、數字化運營部總經理王玲表示：「在今天瞬息萬變的市場中，企業必須具備實時運營能力，否則將不進而退。Timeplus 填補了市場上的重要空白，它支持流式 SQL，不僅易於使用且分析速度快。這項技術使企業從流數據中提取洞見變得更加容易，節省了數百小時開發成千上萬行代碼的時間。Timeplus 能夠實時監控並同步分析大量數據，大幅提升企業風控管理和成本分析的水平。」</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 產品在 2022 年 3 月份推出，目前擁有超過 250 家客户在這個平台上使用和測試。迄今為止，公司已經從領先的全球投資者中獲得 900 萬美元的天使輪融資，這些投資者包括高瓴創投、Sentinel Capital 的創始人 Jeremy Kranz、Apple 前供應鏈高級副總裁 Rory Sexton、世界流式數據技術先驅和 StreamBase 的創始人 Richard Tibbetts 等在內的天使投資者。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">全球開發者和技術愛好者還在猶豫什麼，快來訪問<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank">GitHub 上的 Proton</a>，只需幾分鐘的時間就可以啓動預配置的 Docker 鏡像，快速對接各種數據開始體驗流批一站式實時數據處理和分析。歡迎大家查看代碼，運行樣例，提交反饋和貢獻社區。</p><h2><strong>有關 Timeplus</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 是一個「流式優先」的實時數據平台。它提供強大的端到端功能，幫助團隊快速直觀地處理流式數據和歷史數據。該平台使數據工程師和平台工程師能夠通過使用 SQL 解鎖流式數據價值。Timeplus 的控制枱允許開發人員輕鬆連接到各種不同的數據源（如 Apache Kafka, Confluent Cloud, Redpanda, CSV 文件上傳），通過 SQL 查詢探索流式數據模式，向其他系統或個人發送實時洞察和警報，並創建儀錶板和可視化圖標。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">更多信息請訪問：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fwww.timeplus.com%2F" target="_blank">timeplus.com</a>或<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank"><span style="background-color:transparent">https://</span>github.com/timeplus-io/<span style="background-color:transparent">proton</span></a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">最後，希望對 Timeplus 感興趣的朋友可以關注我們的微信公眾號<strong>Timeplus 公司</strong>與知乎號，歡迎體驗<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank">開源</a>，免費註冊試用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fdemo.timeplus.cloud%2F" target="_blank">Timeplus Cloud</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 23:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262043</guid>
            <link>https://www.oschina.net/news/262043</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[D 語言高性能編譯器 LDC 1.35.0 發佈，初步支撐龍芯處理器架構！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>LDC 在編譯器語言排名中非常靠前，其性能與 C++、Rust 相當，遠高於 Go / V / Zig 等語言，對編譯器性能感興趣的可以看下這個排名：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkostya%2Fbenchmarks" target="_blank">https://github.com/kostya/benchmarks</a></p><h4>重大變化</h4><ul><li>D 語言前端編譯器版本升級到 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdlang.org%2Fchangelog%2F2.105.0.html" target="_blank">2.105.2+</a>. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4476" target="_blank">#4476</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4498" target="_blank">#4498</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4513" target="_blank">#4513</a>) <strong>(new)</strong></li><li>Windows 安裝程序現在支持非管理員安裝，而不需要顯式的/CURRENTUSER 開關。 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4495" target="_blank">#4495</a>) <strong>(new)</strong></li></ul><h4>平台支持</h4><ul><li><p>初始編譯器對 LoongArch64 的支持。暫不支持運行時間。(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4500" target="_blank">#4500</a>) <strong>(new)</strong></p></li></ul><h4>Bug 修正</h4><ul><li>ImportC: 
  <ul><li>Fix <code>static</code> linkage. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fissues%2F4484" target="_blank">#4484</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4487" target="_blank">#4487</a>) <strong>(new)</strong></li><li>Make gcc builtins available. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4483" target="_blank">#4483</a>) <strong>(new)</strong></li><li>Apple: Support weird <code>asm("_" "&lt;name&gt;")</code> mangling stuff. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fissues%2F4485" target="_blank">#4485</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4486" target="_blank">#4486</a>) <strong>(new)</strong></li></ul></li><li>AArch64: Fix an ABI-related ICE. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fissues%2F4489" target="_blank">#4489</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4490" target="_blank">#4490</a>) <strong>(new)</strong></li><li>Fix GC2Stack optimization regression introduced in v1.24. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fissues%2F4510" target="_blank">#4510</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4511" target="_blank">#4511</a>) <strong>(new)</strong></li><li>Fix druntime ABI divergence when compiling with sanitizers support. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fissues%2F4508" target="_blank">#4508</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4509" target="_blank">#4509</a>) <strong>(new)</strong></li><li>Windows: Fix an instance of missed backslash-escaping in <code>-ftime-trace</code> JSON. (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fissues%2F4506" target="_blank">#4506</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Fpull%2F4507" target="_blank">#4507</a>) <strong>(new)</strong></li></ul><p><strong>完整的更新可查看</strong>：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fldc-developers%2Fldc%2Freleases%2Ftag%2Fv1.35.0" target="_blank">https://github.com/ldc-developers/ldc/releases/tag/v1.35.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 17:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262037/ldc-1-35-0</guid>
            <link>https://www.oschina.net/news/262037/ldc-1-35-0</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 引擎中國版 ——「團結引擎」開啓內測]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Unity「團結引擎」的首款產品<strong>團結引擎創世版</strong>和<strong>團結引擎車機版</strong>正式開啓內測，官方稱這是「團結引擎」首次面向開發者進行小範圍內測。</p><p><img src="https://static.oschina.net/uploads/space/2023/1016/185215_SpWK_2720166.png" referrerpolicy="no-referrer"></p><p><strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fform.cloud.custouch.com%2Fshow%2F1133685117202554880%3Fsource_id%3D1089517583%2520109238785%26source%3D%25E7%25BA%25BF%25E4%25B8%258A%25E5%2592%25A8%25E8%25AF%25A2%26utm_content%3Dofficialwebsite" target="_blank">試用團結引擎</a></u>&nbsp;|&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fform.cloud.custouch.com%2Fshow%2F1133691357160824832%3Fsource_id%3D1089517583%2520109238785%26source%3D%25E7%25BA%25BF%25E4%25B8%258A%25E5%2592%25A8%25E8%25AF%25A2%26utm_content%3Dofficialwebsite" target="_blank">試用團結引擎車機版</a></u></strong></p><p>測試時間：<strong>2023 年 10 月 16 日至&nbsp;2023 年 12 月 31 日</strong>。</p><blockquote><ul><li>團結引擎創世版內測指南：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.unity.cn%2Fprojects%2F652cd17cedbc2a5e496b4fc5" target="_blank">https://developer.unity.cn/projects/652cd17cedbc2a5e496b4fc5</a></li><li>團結引擎內測常見問題解答：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.unity.cn%2Fask%2Fquestion%2F65228668edbc2ae4d76d40c0" target="_blank">https://developer.unity.cn/ask/question/65228668edbc2ae4d76d40c0</a></li></ul></blockquote><p style="margin-left:0; margin-right:0"><span>團結引擎是 Unity 中國研發團隊推出的 Unity 中國版引擎，它以<strong> Unity 2022 LTS </strong>為研發基礎，推出了微信小遊戲解決方案、團結引擎車機版。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f082776e33a3e9573c60fb125932e11db69.png" referrerpolicy="no-referrer"></p><p>團結引擎主頁：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Funity.cn%2Ftuanjie%2Ftuanjieyinqing" target="_blank">https://unity.cn/tuanjie/tuanjieyinqing</a></u></p><hr><p>延伸閲讀：<a href="https://www.oschina.net/news/255156" target="_blank">Unity 引擎中國版 「團結引擎」 正式發佈</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 10:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261999</guid>
            <link>https://www.oschina.net/news/261999</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【京東開源項目】微前端框架 MicroApp 1.0 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h1><strong>介紹</strong></h1><p>MicroApp 是由京東前端團隊推出的一款微前端框架，它從組件化的思維，基於類 WebComponent 進行微前端的渲染，旨在降低上手難度、提升工作效率。MicroApp 無關技術棧，也不和業務綁定，可以用於任何前端框架。</p><ul><li>源碼地址： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicro-zoe%2Fmicro-app" target="_blank">https://github.com/micro-zoe/micro-app</a></li><li>官網地址： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmicro-zoe.github.io%2Fmicro-app" target="_blank">https://micro-zoe.github.io/micro-app</a></li></ul><p>微前端是一種頁面整合方案，它的核心在於將一個龐大的前端應用拆分成多個獨立靈活的小型應用，每個應用都可以獨立開發、獨立運行、獨立部署，再將這些小型應用融合為一個完整的應用，或者將原本運行已久、沒有關聯的幾個應用融合為一個應用。微前端既可以將多個項目融合為一，又可以減少項目之間的耦合，提升項目擴展性，相比一整塊的前端倉庫，微前端架構下的前端倉庫傾向於更小更靈活。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-09-17-56s9u9k5698xquXhiR.png" alt="" referrerpolicy="no-referrer"></p><h1><strong>升級亮點</strong></h1><p>距離 MicroApp 開源已經有一年多時間，在這段時間裏我們收到了很多問題反饋，包括沙箱的性能、vite 的兼容、路由衝突等等，為瞭解決這些問題我們將很多核心功能進行升級和重構，經過不斷的打磨和驗證，最終推出 MicroApp1.0 正式版。</p><p>正式版的升級主要在以下幾個方面：</p><ol><li><p>更簡潔的接入方式</p></li><li><p>沙箱的性能</p></li><li><p>虛擬路由系統</p></li><li><p>樣式隔離</p></li><li><p>兼容 vite</p></li><li><p>開發工具</p></li></ol><h1>一行代碼嵌入</h1><p>MicroApp 借鑑了 WebComponent 的思想，通過 CustomElement 結合自定義的 ShadowDom，將微前端封裝成一個類 WebComponent 組件，實現微前端的組件化渲染。在此基礎上，通過實現 JS 隔離、樣式隔離、路由隔離，降低子應用的接入成本，子應用只需設置允許跨域請求，不需要改動任何代碼即可接入微前端，使用方式和 iframe 幾乎一致，但卻沒有 iframe 存在的問題。</p><p>接入方式如下：</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37W37IZAN9Rm8zyOgl.png" alt="" referrerpolicy="no-referrer"></p><h1>JS 沙箱的困境</h1><p>在 MicroApp 開源後我們收到社區的一些反饋，其中一條關於性能的問題引起我們的重視。這不是 MicroApp 才存在的問題，而是微前端長久以來的難題，在社區有大量關於沙箱性能問題的討論，卻始終沒有完美的解決方案。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37Tl118FkIfctahnto.png" alt="" referrerpolicy="no-referrer"></p><p>MicroApp 採用的是和 qiankun 一樣的 proxy+with 的沙箱方案，這也是目前 js 沙箱的主流方案 。with 沙箱的功能非常完善，但是性能損耗卻非常明顯，在社區中也不乏對 with 沙箱性能問題的討論，但一直沒有特別完美的解決方案，這是由於 with 改變了 js 的作用域鏈，從而產生大量的重複請求。問題的根源是 with，但又不全是 with 的問題，準確的説是 with 和 proxy 兩者疊加造成的，with 和 proxy 本質上的性能都不高，需要一種方案避免對這兩個方法的頻繁讀取操作，MicroApp 採用的解決方案是變量前置和異步防抖。</p><p>• 變量前置：是指使用 Object.defineProperty 定義全局變量，通過 get 和 set 設置響應數據，一是為了避免在 proxy 的 get 中進行多餘的操作，二是 defineProperty 的性能比 proxy 更優秀 。</p><p>• 異步防抖：是指在子應用運行時對 promise 進行標記，確保在上一個 promise 執行完成之後才會進入下一個，避免並行觸發，防止 promise 被頻繁觸發會造成性能損失。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37ouEY627EsroKJ8rL.png" alt="" referrerpolicy="no-referrer"></p><p>在此基礎上，MicroApp 沙箱還提供了快照、緩存、預加載等功能，在保證功能不變的前提下，徹底解決沙箱的性能問題，升級後的沙箱運行效率媲美原生 JS。</p><h1>虛擬路由系統</h1><p>微前端是將多個不同的 web 應用融合在一起渲染，但瀏覽器只有一個路由系統，這很容易造成應用之間的路由衝突，最常見的就是 vue3 的路由衝突問題。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37Qp37TNOrIGW27NnjK.png" alt="" referrerpolicy="no-referrer"></p><p>上面是 vue-router 作者對於在微前端環境下的衝突問題的回答，他認為 vue-router 已經覆蓋足夠多場景，微前端的問題應該由微前端解決。</p><p>在我們剛開源時，並沒有對路由進行隔離，用户對於 MicroApp 的問題幾乎一半都和路由相關，因為一個路由系統同時滿足多個應用的渲染容易導致衝突，也非常反直覺和難以理解，於是我們推出了虛擬路由系統。</p><p>概念圖：</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37PtwhNaywYgWETFS.png" alt="" referrerpolicy="no-referrer"></p><p>虛擬路由系統與瀏覽器的路由行為一致，它通過自定義 location 和 history 等核心路由 API，重寫了 popState 和 hashChange 事件，攔截路由導航和事件，並提供了一系列自定義 API，模擬了在瀏覽器環境下的 Web 應用程序的渲染、跳轉和返回等路由行為。子應用程序在這個虛擬路由系統中運行，與基座應用程序的路由相互隔離，從而避免相互影響，並增強了子應用程序與基座應用程序之間的交互能力。通過虛擬路由系統，基座應用程序可以方便地獲取子應用程序的路由信息並控制子應用程序的跳轉，子應用程序的路由信息會作為參數同步到瀏覽器地址上。此外，虛擬路由系統還提供了許多功能，幫助開發人員提高工作效率。</p><h1>樣式隔離方案升級</h1><p>MicroApp 最初是基於 style 元素的 CSSStyleSheet 實現的樣式隔離：即將 CSS 字符串插入 style 元素生成 CSSStyleSheet，遍歷每個 CSS 規則，添加前綴實現樣式隔離。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-11-17-29FthmdZweFFtcyXt.png" alt="" referrerpolicy="no-referrer"></p><p>這種一種取巧的方式，利用瀏覽器自身的能力格式化 CSS，並在此基礎上進行修改，省去很多工作量。但問題也出現在這裏，不同瀏覽器對於相同的 CSS 生成的 CSSStyleSheet 可能會不同，這就導致我們在處理 CSSStyleSheet 會遇到不可以預知的問題，導致 CSS 表現不一致。</p><p>於是 MicroApp 換了一種方式來實現樣式隔離，我們使用正則將 CSS 字符串切割成最小單元，每個單元包含一段 CSS 信息，將所有的信息整理生成 CSSTree，遍歷 CSSTree 的每個規則，添加前綴實現樣式隔離。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-11-18-300F8YVeL6CeZjdLr.png" alt="" referrerpolicy="no-referrer"></p><p>新的方案不但抹平了不同平台間的差異，在性能上相較於舊版普遍提升 30% 以上，並且擁有更加靈活的配置：</p><pre><code>/* 對指定的選擇器禁用樣式隔離 *
/*! scopecss-disable .test1, .test2 */
.test1 {
  color: red;
}
.test2 {
  color: yellow;
}
.test3 {
  /* 在某一行中禁用樣式隔離 */
  /*! scopecss-disable-next-line */
  background: url(/test.png);
}
</code></pre><h1>vite 的兼容</h1><p>在之前的版本中，MicroApp 也支持 vite 的接入，但必須關閉沙箱，因為 vite 打包出來的是 esm 類型的 js 文件，而 esm 無法運行在 with 環境中，但這樣容易導致基座和子應用之間的衝突，顯然是需要進一步優化的。</p><p>為此我們為 vite（更準確的説是為 esm 類型的項目）開發了一套 iframe 沙箱方案，將 esm 類型的 js 文件放入 iframe 中運行，並通過重寫子應用底層原型鏈的方式，實現對 js 和元素的攔截和處理。</p><p>iframe 沙箱和 with 沙箱的實現方式不同，功能也略有不同，with 沙箱擁有更加靈活的操作，而 iframe 沙箱擁有更加嚴格的隔離環境，兩者各有優劣。用户可以在兩種沙箱之間靈活切換，以滿足更多特殊場景的覆蓋和兼容。</p><h1>Micro-App-DevTools</h1><p>Micro-App-DevTools 是基於 MicroApp 推出的一款 Chrome 瀏覽器插件，目的是為了在開發和使用 MicroApp 過程中提高效率。通過此插件可以有效的解決調試困難、模擬數據通信、查看視窗範圍、設置路由、獲取環境變量等訴求，進而更好地幫助用户去了解和使用 MicroApp。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37rml6376o0OR6YYL11.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-377XIbxyxtutrT6TB.png" alt="" referrerpolicy="no-referrer"></p><h4>方案詳解</h4><p>Micro-App-DevTools 通過模擬子應用開發環境，獲取父應用數據，來可視化查看通訊數據，提高開發調試效率。對於路由，將會顯示所有應用的路由，包含層層嵌套應用以及一個父應用多個子應用的路由，使不同團隊應用也能快速定位自己問題，方便協作。還提供了全局變量和高亮視窗功能，實現快速定位範圍，提高排查效率的功能，並集結了圖標、右鍵、控制枱的快捷進入方式，使用户快速上手，零成本使用。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37BJKlXGFQbhuSLQV.png" alt="" referrerpolicy="no-referrer"></p><h2>總結</h2><p>MicroApp 1.0 已經發布，我們將積極迴應開發者的問題和反饋，並持續改進，以幫助更多開發者提高效率和改善開發體驗。歡迎大家使用 MicroApp 並參與共建，也希望在 GitHub 上給我們點個 Star 來支持我們~</p><p>MicroApp Github 地址：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicro-zoe%2Fmicro-app" target="_blank">https://github.com/micro-zoe/micro-app</a></p><p>Micro-App-DevTools Github 地址：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicro-zoe%2Fmicro-app-chrome-plugin" target="_blank">https://github.com/micro-zoe/micro-app-chrome-plugin</a></p><p>MicroApp 官網地址：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmicro-zoe.github.io%2Fmicro-app%2F" target="_blank">https://micro-zoe.github.io/micro-app</a></p><blockquote><p>作者：京東零售，馬國華</p><p>來源：京東雲開發者社區，轉載請註明來源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 10:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10117983</guid>
            <link>https://my.oschina.net/u/4090830/blog/10117983</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「Firefox 賬户」更名為「Mozilla 賬户」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Mozilla <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.mozilla.org%2Fzh-CN%2Fkb%2Ffirefox-accounts-renamed-mozilla-accounts" target="_blank">宣佈</a>，從 11 月 1 日，起，「Firefox 賬户」將更名為「Mozilla 賬户」。</p><p><img src="https://static.oschina.net/uploads/space/2023/1016/162545_lOgp_2720166.png" referrerpolicy="no-referrer"></p><p>Mozilla 表示，Firefox 賬户已成為 Mozilla 為各種產品和服務提供的主要身份驗證和賬户管理服務，為全球數百萬活躍賬户客户提供支持。因此，<strong>原來的「Firefox」品牌已不能準確反映 Mozilla 產品的廣泛範圍</strong>。</p><p>重新命名的目的是為所有 Mozilla 產品創造更加一致的品牌體驗，提高人們對&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Ffirefox%2Fproducts%2F" target="_blank">Mozilla 產品組合</a>的認識。</p><p>具體內容查看官方公告：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.mozilla.org%2Fzh-CN%2Fkb%2Ffirefox-accounts-renamed-mozilla-accounts" target="_blank">https://support.mozilla.org/</a></u></p><hr><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37884585" target="_blank">有網友表示</a>，Mozilla&nbsp; 更應該將「<strong>Firefox」</strong>打造成品牌，因為這個名字傳遞了<strong>「快速」</strong>、<strong>「靈活」</strong>的理念，符合 Mozilla 產品的氣質，還自帶有趣且可愛的屬性 。而<strong>「Mozilla」</strong>給人的感覺則是又醜又笨重。</p><p>Mozilla 和 Firefox 的 logo 對比：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f441d71d24ac6d3fae21c3ec85c9957bf63.png" referrerpolicy="no-referrer">&nbsp;<img alt="" src="https://oscimg.oschina.net/oscnet/up-c6fa82516091b2f4eee07b3cdd0a2ea7c87.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 08:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261971/firefox-accounts-renamed-mozilla-accounts</guid>
            <link>https://www.oschina.net/news/261971/firefox-accounts-renamed-mozilla-accounts</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 大屏數據可視化設計器 Light Chaser]]>
            </title>
            <description>
                <![CDATA[<h2 align="middle"><a id="user-content--light-chaser" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#-light-chaser"></a> LIGHT CHASER</h2><p align="middle"><img alt="" src="https://img.shields.io/badge/version-v0.0.3-blue" referrerpolicy="no-referrer"><img alt="" src="https://img.shields.io/badge/language-typescript-blue" referrerpolicy="no-referrer"><img alt="" src="https://img.shields.io/badge/license-MIT-08CE5D?logoColor=08CE5D" referrerpolicy="no-referrer"><img alt="" src="https://img.shields.io/badge/framework-React-61daeb?logoColor=08CE5D" referrerpolicy="no-referrer"></p><p align="middle">light chaser 是一個可拖拽式的 WEB 數據可視化設計器</p><p align="middle"><a href="https://gitee.com/link?target=https%3A%2F%2Fxiaopujun.github.io%2Flight-chaser-app%2F%23%2F" target="_blank">Demo</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1v8411z78f%2F%3Fshare_source%3Dcopy_web%26vd_source%3Dece0559aa5b8c4f5c0d7307cb2b06aac" target="_blank">視頻</a></p><h1><a id="user-content-一簡介" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%B8%80%E7%AE%80%E4%BB%8B"></a>一、簡介</h1><p>Light Chaser(LC) 是一款基於 React 生態的大屏數據可視化設計器。通過簡單的拖拽，即可生成漂亮、美觀的可視化數據大屏和看板。</p><p>她具有以下特點：</p><ul><li>高性能：結合 React 和 Mobx 的特點以及 LC 本身的設計理念。 盡最大努力的避免組件的無效渲染。 使得 LC 的整體性能保持在了一個較好的水平。 在幾百個複雜組件的場景下。 仍能做到流暢的渲染。</li><li>高擴展：LC 提供一個統一接口。只需實現該接口。理論上可以接入任何 react 生態的組件。這使得 LC 的組件庫可以無限擴展。</li><li>高可定製：同樣依賴於設計的統一接口。 對於開發者自己實現的組件。它的配置項完全可以由開發者自定義。你可以使用 LC 提供的默認配置組件。也可以完全使用自己的實現。</li><li>前後端分離：本項目 100% 前後端分離，即使沒有後端服務。LC 設計器也可以像本地應用一樣完美運行（目前僅支持本地運行，後續會支持部署到服務器）。</li><li>主題快速切換：LC 提供了主題切換功能。你可以在全局切換主題。也可以在組件級別切換主題。這使得你可以快速的切換主題。從而快速的生成不同風格的大屏。</li><li>快捷鍵操作：LC 提供了豐富的快捷鍵操作。你可以通過快捷鍵快速的完成一些操作。從而提高你的工作效率。</li><li>拖拽柵格化佈局：LC 提供了拖拽柵格化佈局功能。你可以通過拖拽的方式快速的完成佈局。從而快速的生成大屏。</li></ul><h1><a id="user-content-二效果展示" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%BA%8C%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA"></a>二、效果展示</h1><p><img src="https://s2.loli.net/2023/08/30/SnIYcomQWxaGyfj.png" alt="image.png" referrerpolicy="no-referrer"></p><h1><a id="user-content-三如何運行" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%B8%89%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C"></a>三、如何運行</h1><ol><li>克隆項目到本地</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://gitee.com/xiaopujun/light-chaser.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="2"><li>安裝項目依賴</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">yarn <span class="nb">install</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="3"><li>啓動項目</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">yarn start</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="4"><li>訪問項目</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">http://localhost:3000</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="5"><li>打包項目</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">yarn build</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-四如何使用" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E5%9B%9B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8"></a>四、如何使用</h1><table><thead><tr><th>操作方式/快捷鍵</th><th>説明</th></tr></thead><tbody><tr><td>雙擊左側組件</td><td>添加組件到畫布</td></tr><tr><td>鼠標右鍵長按</td><td>拖拽畫布</td></tr><tr><td>alt + 滑輪</td><td>縮放畫布</td></tr><tr><td>ctrl + v</td><td>複製組件</td></tr><tr><td>ctrl + l</td><td>鎖定組件</td></tr><tr><td>ctrl + 方向上鍵</td><td>置頂組件</td></tr><tr><td>ctrl + 方向下鍵</td><td>置底組件</td></tr><tr><td>delete</td><td>刪除組件</td></tr><tr><td>up</td><td>組件上移</td></tr><tr><td>down</td><td>組件下移</td></tr><tr><td>left</td><td>組件左移</td></tr><tr><td>right</td><td>組件右移</td></tr><tr><td>ctrl + shift + up</td><td>組件向上放大</td></tr><tr><td>ctrl + shift + down</td><td>組件向下放大</td></tr><tr><td>ctrl + shift + left</td><td>組件向左放大</td></tr><tr><td>ctrl + shift + right</td><td>組件向右放大</td></tr><tr><td>ctrl + alt + up</td><td>組件向上縮小</td></tr><tr><td>ctrl + alt + down</td><td>組件向下縮小</td></tr><tr><td>ctrl + alt + left</td><td>組件向左縮小</td></tr><tr><td>ctrl + alt + fight</td><td>組件向右縮小</td></tr><tr><td>ctrl + z</td><td>撤銷</td></tr><tr><td>ctrl + shift + z</td><td>重做</td></tr></tbody></table><h1><a id="user-content-五目錄結構" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%BA%94%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"></a>五、目錄結構</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">src</span><span id="LC2" class="line">├─comps 設計器組件列表（所有可拖拽的組件均在該目錄下實現）</span><span id="LC3" class="line">│  ├─antd antd 組件實現</span><span id="LC4" class="line">│  ├─common-fragment 公共代碼片段</span><span id="LC5" class="line">│  └─lc 設計器自帶組件實現</span><span id="LC6" class="line">├─designer 設計器</span><span id="LC7" class="line">│  ├─canvas 畫布</span><span id="LC8" class="line">│  ├─common 公共代碼</span><span id="LC9" class="line">│  ├─footer 設計器底部</span><span id="LC10" class="line">│  ├─header 設計器頭部</span><span id="LC11" class="line">│  ├─left 設計器左側</span><span id="LC12" class="line">│  ├─operate-provider 設計器事件操作</span><span id="LC13" class="line">│  ├─right 設計器右側</span><span id="LC14" class="line">│  ├─store 設計器狀態管理</span><span id="LC15" class="line">│  ├─structure 設計器頁面框架結構</span><span id="LC16" class="line">│  └─view </span><span id="LC17" class="line">├─framework 框架設計</span><span id="LC18" class="line">│  └─core 自動掃描組件定義</span><span id="LC19" class="line">├─icon </span><span id="LC20" class="line">├─lib 自己實現的組件庫</span><span id="LC21" class="line">├─list 列表頁（首頁）</span><span id="LC22" class="line">└─utils 工具類</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-六如何快速接入自己的組件" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E5%85%AD%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BB%84%E4%BB%B6"></a>六、如何快速接入自己的組件</h1><p>在 LC 中接入自己的組件非常簡單。你僅需要做一件事！！！</p><ol><li>找到 src/comps 目錄，新建一個你自定義組件的文件夾</li><li>假設我的自定義組件名為：MyComp</li><li>新建 ts 文件，命名為：MyComp.ts，在該文件中新建一個 class，並繼承 AbstractCustomComponentDefinition。實現其中的方法。</li><li>新建 ts 文件，命名為：MyCompDefinition.ts，在該文件中新建一個 class，並繼承 AbstractDesignerComponent。實現其中的方法。</li></ol><p>到此就結束了！！！剩下的交給自動掃描器，他會自動掃描你的組件，並將其註冊到 LC 中。</p><p>代碼示例可參考：src/comps/antd/pie 中的實現</p><h1><a id="user-content-七-結語" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%B8%83-%E7%BB%93%E8%AF%AD"></a>七、 結語</h1><p>如果覺得本項目不錯，歡迎 star</p>]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 08:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/xiaopujun/light-chaser</guid>
            <link>https://gitee.com/xiaopujun/light-chaser</link>
        </item>
    </channel>
</rss>
