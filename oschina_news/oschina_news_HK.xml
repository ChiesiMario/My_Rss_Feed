<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 22 Nov 2023 04:05:59 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Sam Altman 與 OpenAI 董事會展開談判]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">彭博社援引知情人士<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-21%2Faltman-openai-board-open-talks-to-negotiate-his-possible-return%23xj4y7vzkg" target="_blank">消息稱</a>，Sam Altman 已經私下和 OpenAI 的新任臨時首席執行官 Emmett Shear，以及至少一名董事會成員 Adam D'Angelo 展開了談判。一些致力於推動 Altman 復職的 OpenAI 投資者也參與了會談。</span></p><p><span style="color:#000000">多位人士表示，本次談判是&nbsp;OpenAI 董事會與&nbsp;Altman 溝通之間的一項重大進展，畢竟直到本週一，董事們在很大程度上都拒絕與其接觸。</span></p><p><span style="color:#000000">如果 Altman 成功迴歸，他將繼續擔任公司的首席執行官一職。在討論中的另一種方案中，Altman 還將成為過渡董事會的董事，且 Salesforce 公司前聯席首席執行官布 Bret Taylor 也可能擔任新董事會的董事。</span></p><p><span style="color:#000000">在與董事會的談判中，由 Airbnb Inc. 首席執行官 Brian Chesky 代表 Altman 進行發言，而 Shear 代表 D’Angelo&nbsp;和董事會。<span style="background-color:#ffffff">Bret Taylor&nbsp;</span>在調解中則更多的扮演的是中立角色。</span></p><p><img height="269" src="https://oscimg.oschina.net/oscnet/up-b769cdef524fa63ef3fca964112655bde21.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">希望 Altman 復職的 OpenAI 股東包括 Thrive Capital、Khosla Ventures 和 Tiger Global Management。董事會和 Altman 希望在感恩節假期前達成解決方案，解決圍繞公司領導層的混亂局面。</span></p><p><span style="color:#000000">此外，Shear 也在要求董事會提供 Altman 錯失行為的證據。如果董事會不能以書面形式向他明確傳達突然解僱 Altman 的理由，他也不打算繼續留在該公司。</span></p><p><span style="color:#000000">針對這一事件，彭博社分析師評論稱：</span></p><blockquote><p><span style="color:#000000">Sam Altman 可能重返 OpenAI 擔任首席執行官，這可能會加強微軟的戰略定位，尤其是如果微軟能夠在新董事會中獲得一席之地的話。這也可能是微軟更希望看到的結果，因為如果微軟僱傭了 OpenAI 的大部分員工，將面臨很高的法律風險。在監管障礙不斷的情況下，我們認為微軟收購 OpenAI 的可能性微乎其微。</span></p></blockquote><p>OpenAI 拒絕對談判發表評論。&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 03:35:55 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267569/altman-openai-board-open-talks</guid>
            <link>https://www.oschina.net/news/267569/altman-openai-board-open-talks</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[國內外開源基金會基於 OpenHarmony 的開源平台 Oniro 達成合作]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>開放原子開源基金會<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FGFKMvckBEgo3m6PQNfIV7w" target="_blank">宣佈</a></u>與 Eclipse 基金會<strong>基於 OpenHarmony 的開源項目 Oniro 正式簽署合作協議</strong>。</p><p><img height="1836" src="https://oscimg.oschina.net/oscnet/up-72d51d192bb234fefe29382583f9e8dc8db.png" width="1588" referrerpolicy="no-referrer"></p><p>據稱本次簽約開放原子開源基金會創造了兩個第一，<strong>一是</strong>開源歷史上第一次兩個基金會通過代碼、品牌、IP、認證等方式共同發展一個開源生態，為開源業內提供了合作的新典範，為開源全球合作探索了發展的新範式。<strong>二是</strong>國內開源基金會第一次同海外基金會完成合作簽約，雙方在技術項目、開發者生態、營銷活動上發揮各自優勢，共同在世界範圍內推動開源項目發展。</p><p>Oniro 是致力於開發<strong>與供應商無關的開源操作系統 (OS) 平台</strong>。Oniro 項目基於兩個全球開源基金會（Eclipse 基金會和 OpenAtom 基金會）之間的合作而建立。Oniro 利用由 OpenAtom 基金會運營的開源項目 OpenHarmony 的堅實基礎，構建了一個以其在各種智能設備上的多功能性而聞名的操作系統平台。</p><p>據介紹，Oniro 優先考慮無縫互操作性、模塊化和具有視覺吸引力的用户界面——面向消費電子、家用電器、工業物聯網設備、智能家居和多媒體等各個行業的技術和應用提供基座。</p><p>他們通過一系列增強功能來實現這些目標，包括採用 React Native 等框架、Servo Web 引擎等系統級操作系統組件。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a180fdd32246279ef20e3577cbca096f455.png" referrerpolicy="no-referrer"></p><p>官方對 Oniro&nbsp;的架構圖進行了如下介紹：</p><ul><li>Eclipse Theia 用於簡化應用程序開發，增強了開發工作流程。</li><li>React Native 在 OpenHarmony 的基礎上擴展了現有應用程序和生態的可用性。</li><li>通過採用 Rust 編程語言，特別是與 Servo Web 引擎的結合，增強了整個系統的安全性。</li><li>未來引入 Eclipse Kanto 和 Matter 等框架將能夠集成更多 AIoT 和智能家居用例。</li></ul><p><em>延伸閲讀：<strong><u><a href="https://www.oschina.net/news/166170/eclipse-foundation-oniro-os" target="_blank">Eclipse 基金會推出 Oniro OS，OpenHarmony 的獨立開源實現</a></u></strong></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 03:30:55 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267568</guid>
            <link>https://www.oschina.net/news/267568</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stability AI 開源視頻生成模型 Stable Video Diffusion]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Stability AI <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstability.ai%2Fnews%2Fstable-video-diffusion-open-ai-video-model" target="_blank">發佈了</a></u>開源視頻生成模型 Stable Video Diffusion，該模型基於該公司現有的 Stable Diffusion 文本轉圖像模型，能夠通過對現有圖像進行動畫化生成視頻。</p><p><strong>主要特性</strong></p><ul><li>文本到視頻</li><li>圖像到視頻</li><li>14 或 25 幀，576 x 1024 分辨率</li><li>多視圖生成</li><li>幀插值</li><li>支持 3D 場景</li><li>通過 LoRA 控制攝像機</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-9679e48d9ea613ddb1fd57e8cec3bf0224a.png" referrerpolicy="no-referrer"></p><p>Stable Video Diffusion 提供兩個模型，分別為 SVD 和 SVD-XT。其中，SVD 將靜止圖像轉換為 14 幀的 576x1024 視頻，而 SVD-XT 在相同的架構下將幀數提升至 24。</p><p>兩者都能以每秒 3 到 30 幀的速度生成視頻。白皮書顯示，這兩個模型最初在數百萬個視頻的數據集上進行訓練，然後在數十萬到百萬數量級的較小數據集上進行「微調」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-939a57be449351948e8a0334edfe83c2c47.png" referrerpolicy="no-referrer"></p><p>Stability AI 稱正在開發一個新的網絡平台，包括一個文本到視頻的界面。這個工具將展示 Stable Video Diffusion 在廣告、教育、娛樂等多個領域的實際應用。</p><p>開源地址</p><ul><li>GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FStability-AI%2Fgenerative-models" target="_blank">https://github.com/Stability-AI/generative-models</a></li><li>論文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstability.ai%2Fresearch%2Fstable-video-diffusion-scaling-latent-video-diffusion-models-to-large-datasets" target="_blank">https://stability.ai/research/stable-video-diffusion-scaling-latent-video-diffusion-models-to-large-datasets</a></li><li>HuggingFace：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fstabilityai%2Fstable-video-diffusion-img2vid-xt" target="_blank">https://huggingface.co/stabilityai/stable-video-diffusion-img2vid-xt</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267563/stable-video-diffusion</guid>
            <link>https://www.oschina.net/news/267563/stable-video-diffusion</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FastCFS V5.0 發佈，原生支持 RDMA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><span><span>經過 4 個多月的預研、開發和測試，FastCFS 5.0 終於和大家見面了。FastCFS 5.0 使用 ibverbs 原生方式適配了 RDMA 網絡，可以充分發揮 RDMA 網絡的低延遲和高吞吐特性。在此特別感謝 @Frank 提供 IB 環境的高端服務器供我們預研；非常感謝 @yunqi 在 ibverbs 編程方面耐心的答疑；十分感謝 @AI 墨墨，公眾號提供了非常好用的 chatGPT 問答服務，幫助我解答了不少疑惑。</span></span></div><div>
  &nbsp;
 </div></div><div><div><span><span>我們租用阿里雲 g8 類型的 ECS，使用其 eRDMA 特性，4KB 隨機讀在 fuse 場景性能下相比 socket 方式提升了 50%；我們直接調用 API（純用户態模式）的 fcfs_beachmark，非 busy polling 模式下性能相比 socket 方式提升 80%，而 busy polling 模式下性能提升了 110%。後續我們將找機會在 IB 網絡環境下進行性能對比測試，預計性能提升會更加明顯。</span></span></div><div>
  &nbsp;
 </div></div><div><div><span><span>是否開啓 busy polling，我們 server 端默認配置為智能模式。當一個連接的 QPS 連續 N 秒（如 3 秒）超過閾值（如 10240），則啓用 busy polling 模式；連續 N 秒低於閾值，則退回非 busy polling 模式。</span></span></div></div><div><div><span><span>友情提示：配置示例及説明參見源碼 conf/full/ 子目錄下的配置文件。</span></span></div><div>
  &nbsp;
 </div></div><div><div><span><span>V5.0 修復的 bug 如下：</span></span></div></div><div><div><span><span>[fdir] bugfixed: dentry_create set loaded_flags correctly</span></span></div></div><div><div><span><span>[fdir] bugfixed: must use lock for db skiplist</span></span></div></div><div><div><span><span>[libfdirstorage] bugfixed: set variable normal_update correctly</span></span></div></div><div><div><span><span>[libfsstorage] segment reclaim more robustly</span></span></div><div>
  &nbsp;
 </div></div><div><div><span><span>FastCFS 5.0 通過了比較充分的測試，歡迎有 RDMA 網絡環境的朋友進行性能測試。建議使用 FastCFS 老版本的用户，儘快升級到最新版本。有任何問題和建議，歡迎在 gitee 上提交 issue，當然也可以加羣交流。</span></span></div></div></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 02:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267561/fastcfs-5-0-released</guid>
            <link>https://www.oschina.net/news/267561/fastcfs-5-0-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 面向所有用户免費開放 ChatGPT Voice]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenAI 今天<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FOpenAI%2Fstatus%2F1727065166188274145" target="_blank">宣佈</a></u>面向所有用户免費開放 <strong>ChatGPT Voice。</strong></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-e1193b4f65f52cea9e6b495cd6f169d3af1.png" referrerpolicy="no-referrer"></p></blockquote><p>OpenAI 於今年 9 月推出了<strong>基於 ChatGPT 的文本轉語音功能&nbsp;&nbsp;ChatGPT Voice</strong>——使用神經網絡模型從文本生成類似人類的語音。該功能此前僅面向 ChatGPT Plus 訂閲用户提供，現在向所有免費用户推出。</p><p>據介紹，ChatGPT Voice 通過採樣配音演員錄製的幾秒鐘音頻，能夠創建具有不同口音和風格的自定義聲音。為用户提供對話功能，其整體對話的信息均以對話的形式輸入輸出，支持暫停、中斷、更換音色等功能，並在對話結束後提供文字版進行參考。</p><p>要使用新的語音選項，ChatGPT 用户只需在 Android 或 iOS 上打開應用程序設置，並切換「耳機」圖標即可激活文本轉語音功能。</p><p>OpenAI 前總裁 Greg Brockman 隨後<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fgdb%2Fstatus%2F1727067288740970877" target="_blank">跟帖表示</a></u>：「ChatGPT Voice 已面向所有免費用户推出。歡迎嘗試 —— 徹底改變 ChatGPT 體驗。」</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 02:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267559/chatgpt-voice</guid>
            <link>https://www.oschina.net/news/267559/chatgpt-voice</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Firefox 120.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Firefox 120.0 現已發佈，具體更新內容如下：</p><p><strong>New</strong></p><ul><li>Firefox 在上下文菜單中支持新的"複製鏈接不帶網站跟蹤"功能，確保複製的鏈接不再包含跟蹤信息。</li></ul><p><img alt="" height="361" src="https://oscimg.oschina.net/oscnet/up-e7e4d23ecc050ac3f60820b1fa1946c0f75.png" width="300" referrerpolicy="no-referrer"></p><ul><li>Firefox 現在支持啓用"全局隱私控制"的設置（在 Preferences → Privacy &amp; Security 中）。有了這項 opt-in&nbsp;功能，Firefox&nbsp;就會通知網站，用户不希望自己的數據被共享或出售。</li></ul><p><img alt="" height="139" src="https://oscimg.oschina.net/oscnet/up-e2c7de7e40d5068002d7503fbe8daf5795e.png" width="500" referrerpolicy="no-referrer"></p><ul><li>現在，Firefox 的隱私窗口和 ETP-Strict 隱私配置通過指紋保護功能增強了 Canvas API，從而繼續保護用户的在線隱私。</li><li>Firefox 已在德國所有用户的隱私窗口中默認啓用 Cookie <span style="background-color:#ffffff"><span style="color:#42425a">Banner Blocker</span></span>。對於支持的網站，Firefox 現在會自動拒絕 Cookie 並屏蔽惱人的&nbsp;cookie banners。</li><li><p>Firefox 已在德國所有用户的隱私窗口中默認啓用 URL 跟蹤保護功能。Firefox 將刪除非必要的 URL 查詢參數，這些參數通常用於在網絡上跟蹤用户。</p></li><li><p>Firefox 現在可以從操作系統根存儲導入 TLS 信任錨（如證書）。這將在 Windows、macOS 和 Android 上默認啓用，如有需要，可在設置（Preferences → Privacy &amp; Security → Certificates）中關閉。</p></li><li><p>現在已添加鍵盤快捷鍵，用於在 about:logins 上編輯和刪除所選證書。editing - Alt + enter (Option + return on macOS)&nbsp;，deleting - Alt + Backspace (Option + Delete on macOS)。</p></li><li><p>Ubuntu Linux 用户現在可以從作為 Snap 軟件包安裝的 Chromium 中導入。</p></li><li><p>畫中畫現在支持 Windows 和 Linux 上的 corner snapping，只需在移動畫中畫窗口時按住 Ctrl 鍵即可。</p></li></ul><p><strong>Fixed</strong></p><ul><li><span style="color:#42425a">各種</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fsecurity%2Fadvisories%2Fmfsa2023-49%2F" target="_blank">安全</a>修復<span style="background-color:#ffffff"><span style="color:#42425a">。</span></span></li></ul><p><strong>Developer</strong></p><ul><li>現在已添加 User Activation API，允許 JavaScript 使用 navigator.userActivation 檢查用户當前是否或曾否激活頁面（點擊等）。</li><li>Early Hints Preconnect（信息狀態代碼 103）現已啓用。這允許服務器在最終 HTTP 響應之前發送 resource Link headers，並提高了使用此功能的服務器的性能。(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.cloudflare.com%2Fearly-hints%2F" target="_blank">更多信息</a>）</li><li>用户現在可以使用新增的 devtools 功能模擬瀏覽器標籤脱機。</li><li>Style Editor 面板的頁腳新增了一個"Pretty Print"按鈕，類似於調試器面板中的 Pretty Print 按鈕。該按鈕可用於格式化樣式表（如已精簡的樣式表）。以前的功能是自動格式化最小化文件，現在已被刪除。</li><li>Inspector&nbsp;面板中的"Rules"面板不再以新的 CSS Color 4 格式（如 OKLCH）顯示十六進制/命名顏色。這樣可以確保與使用的原始值相匹配。</li></ul><p><strong>Web Platform</strong></p><ul><li>lh 和 rlh 單位現在可以作為長度正確解析和計算。這樣，作者就可以根據 element's（或 root element's）的行高來指定長度。</li><li>WebAssembly GC 現在已默認啓用，這允許新語言（如 Dart 或 Kotlin）在 Firefox 上運行。以便收集 guest language 和 host browser 之間的 reference cycles&nbsp;。</li></ul><p><span style="background-color:#ffffff"><span style="color:#333333">詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2F120.0%2Freleasenotes%2F" target="_blank">查看更新説明</a>。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 02:35:51 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267557/firefox-120-0-released</guid>
            <link>https://www.oschina.net/news/267557/firefox-120-0-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FreeBSD 14.0 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>FreeBSD 14.0 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.freebsd.org%2Freleases%2F14.0R%2Fannounce%2F" target="_blank">已正式發佈</a></u>，這是&nbsp;<span style="background-color:#ffffff; color:#000000"><span>&nbsp;</span>stable/14 分支的首個版本，</span>支持 amd64, aarch64, i386, powerpc, powerpc64, powerpc64le, powerpcspe, armv7, 和 riscv64 架構。</p><p>主要變化：</p><ul><li>OpenSSH 升級至 v9.5p1</li><li>OpenSSL 升級至 v3.0.12<br> FreeBSD 13.2-RELEASE 使用 OpenSSL 1.1.1t，所以這是重大升級</li><li>bhyve 虛擬機管理程序支持 TPM 和 GPU 透傳</li><li>FreeBSD 在 amd64 和 arm64 平台支持最多 1024 個內核</li><li>ZFS 升級至 OpenZFS v2.2，顯著改進性能</li><li>實驗性 ZFS 鏡像可用於 AWS 和 Azure</li><li>支持對運行日誌軟更新的 UFS 文件系統執行後台文件系統檢查</li><li>TCP 默認擁塞控制機制為<strong> CUBIC</strong></li><li>……</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.freebsd.org%2Freleases%2F14.0R%2Frelnotes%2F" target="_blank">FreeBSD 14.0-RELEASE Release Notes</a></u></p><hr><p>負責 FreeBSD 發版工作的主管在其個人博客介紹了一些 FreeBSD 14 的破壞性變化，詳情查看&nbsp;<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.daemonology.net%2Fblog%2F2023-11-21-late-breaking-FreeBSD-14-breakage.html" target="_blank">https://www.daemonology.net/blog/2023-11-21-late-breaking-FreeBSD-14-breakage.html</a></u></em>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267555/freebsd-14-0</guid>
            <link>https://www.oschina.net/news/267555/freebsd-14-0</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[scheme-langserver 發佈類型推斷功能，並整合進入 auto-autocomplete.]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Scheme-langserver 是一款面向 scheme 語言的語言服務器，它基於 LSP 協議（Language Server Protocol）提供了自動補全（auto-complete）、尋找變量定義（goto definition）等功能。</p><p>11 月 21 日，scheme-langserver 發佈了類型推斷功能，並將該功能整合進入了自動補全。如圖所示，在補全光標處的引導詞「l」（大寫 L）時，scheme-langserver 給出了多個可選項，並且將類型匹配程度較高的「length-a」、「length-b」放到了比較靠前的位置——因為「&gt;=」過程（也就是其他語言中的函數）要求變量必須是「real?」，而上文可以推斷出「length-a」、「length-b」為「integer?」類型。</p><p><img alt="" height="1152" src="https://oscimg.oschina.net/oscnet/up-a0cf3214c3d3f798bd3281120b07eb57f92.png" width="732" referrerpolicy="no-referrer"></p><p>這項工作的主要特點在於：</p><ol><li>使用了作者自行開發的 DSL（Domain Specific Language）和解釋器實現類型推斷功能。這大大降低了編寫相關功能的難度，讓整個項目的可維護性更強；</li><li>基於 scheme-langserver 的面向「未完成代碼」的自動補全功能，能夠補全局部變量（這在一些競品中是不能實現的）；</li><li>實現了「漸進定型」實現為動態類型語言的類型推導。關於這一點，可以看如下案例：</li></ol><p>例如對於 javascript 代碼，參數 a 的類型是不清楚的——關於這一點，在 typescript 當中的解決方法是第二行中的案例——添加類型標註（number）。</p><pre><code class="language-javascript">function(a){return 1+a}

function(a : number){return 1+a}</code></pre><p>但是實際上，我們當然知道「+」操作符操作的只能是「number」（當然還有 string 等等）。因此，應當由計算機自行推出「a」的類型為「number」而不需要自行推斷（當然，這是有一定的代價和其他問題的）。</p><p>目前這項工作還存在一些問題，主要包括：</p><ol><li>類型推斷工作使得索引構建時間較長，較大程度影響用户使用體驗；</li><li>類型推斷系統引入了一個全排列操作，對於有較多參數（比如 4 個）的過程（或者説函數）的類型推導造成了限制；</li><li>還有大量的測試需要進行，以儘可能減少錯誤；</li><li>通過一些參數限制了涉及遞歸函數的類型推斷以減少操作間隔感，但是這就在類型推斷的可靠性上有了一些問題。</li></ol><p>Scheme-langserver 同時是「2022 中國互聯網發展創新與投資大賽公益項目暨 2022 年中國開源創新大賽」二等獎項目。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 16:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267508</guid>
            <link>https://www.oschina.net/news/267508</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「X」Embedding in NLP｜初識自然語言處理（NLP）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>從情感分析到信息提取，再到機器翻譯、問答系統、聊天機器人……自然語言處理（Natural Language Processing，NLP）的應用可謂複雜多樣。向量數據庫的加入，則為 NLP 注入了更多的可能性。</p><p>為了方便大家能夠深入瞭解向量數據庫與 NLP 的關係及應用，我們上線了「X」Embedding in NLP 系列專題，分為初階和進階兩部分。本文為初階第一篇，將詳細介紹 NLP 以及以 Zilliz Cloud、Milvus 為代表的向量數據庫是如何為 NLP 賦能的。</p><h2>01.什麼是 NLP ？</h2><p>自然語言處理（NLP）是跨學科的機器學習技術，結合了人工智能和計算語言學。其主要目標是讓計算機能夠以有意義和有價值的方式理解和響應人類語言。</p><p>當然，我們可以構建一個包含所有句子的詞典來實現這一目標，但這有些不切實際，因為人類語言中用於構成句子的單詞組合無窮無盡。不僅如此，口音、多樣的同義詞匯、錯誤發音或句中省略單詞等情況，進一步加深了人類語言的複雜性。</p><p>NLP 運用各種技術和算法處理自然語言數據。本質上，NLP 用於處理非結構化數據，特別是非結構化文本，並通過自然語言理解（NLU），使用文本和語音的句法和語義分析來確定句子的含義，並生成計算機可以使用的結構化文本。相反，自然語言生成（NLG）是指計算機根據一些數據輸入生成人類語言文本的響應。</p><p>通過利用 NLP 技術，開發人員可以從文本數據中提取信息和洞見，使機器能夠理解和響應人類查詢，並將所有涉及語言處理的任務自動化。可以説，NLP 使人機交互過程更直觀、高效和流暢。NLP 在現實世界中有眾多應用，如虛擬助手、聊天機器人、信息檢索系統、語言翻譯服務、情感分析工具和自動化內容生成等。而向量數據庫，尤其是其高效的 embedding 向量存儲和檢索能力能夠為 NLP 領域帶來革新，簡化相似文檔或短語的搜索過程。</p><h2>02.NLP 用例</h2><p>開發人員可以使用 NLP 構建多種應用，包括：</p><h3>情感分析</h3><p>情感分析是指確定文本中表達的情感或情緒。情感分析涉及將文本分類為正面、負面或中性。情感分析技術可能使用機器學習算法在標記數據集上訓練模型，或利用預訓練模型捕捉單詞和短語的情感。情感分析常見的場景之一是電影評論分類，可以統計出正負面的影評佔的比例。</p><h3>信息提取</h3><p>信息提取是指從文本中識別特定信息，例如提取名稱、日期或數值。信息提取使用命名實體識別（NER）和關係提取從非結構化文本中提取結構化數據。</p><h3>機器翻譯</h3><p>NLP 通過利用統計或神經網絡機器翻譯模型實現機器翻譯。這些模型從大量平行文本數據中學習語言之間的模式和關係，允許它們適當藉助上下文將文本從一種語言翻譯成另一種語言。</p><h3>問答系統</h3><p>問答系統使用 NLP 技術理解用户問題並從給定的文本語料庫中檢索相關信息。問答系統包含文本理解、文檔檢索和信息提取等步驟，為用户提供準確和相關的查詢答案。</p><h3>虛擬助手或聊天機器人</h3><p>虛擬助手是諸如 Alexa 或 Siri 這樣的產品，它們接收人類的話語並從人類語言中推導出命令從而觸發動作。（例如：嘿，Alexa，打開燈！）。聊天機器人使用書面語言與人類互動，從而協助用户處理賬户或賬單問題或其他一般問題。在完成文本處理後，聊天機器人就可以遍歷決策樹從而做出正確的操作。</p><h3>文本生成</h3><p>NLP 模型可以基於給定的提示或輸入生成文本。這包括語言建模、文本摘要和使用諸如循環神經網絡（RNN）或 Transformer 模型等技術的文本生成等任務。</p><h3>垃圾郵件檢測</h3><p>自然語言處理可以輔助垃圾郵件檢測。例如，通過查看過度使用的單詞、錯誤的語法或不適當的緊急聲明，檢查電子郵件的內容以確定它是否是垃圾郵件。</p><h2>03.NLP 原理</h2><p>NLP 是指通過一系列技術和算法，使計算機能夠處理、理解和生成人類語言。以下是 NLP 工作流程：</p><p>文本預處理—— NLP 的初始步驟通常是文本數據的預處理。預處理涉及諸如分段（將句子分解為組成詞）、token 化（將文本分割為單個單詞或 token）、停用詞（去除像停用詞和普通詞如「the」或「is」這樣不攜帶太多含義的標點）以及應用詞幹提取（為給定標記推導詞幹）或詞形還原（從字典中獲取標記的含義以得到根源）以將單詞還原為其基本形式的任務。</p><p>語言理解—— NLP 算法使用各種技術來理解文本的含義和結構。這些技術包括：詞性標註（通過為每個單詞分配語法標籤進行語法分析）、句法解析（分析句子結構）和命名實體識別（識別和分類命名實體，如人物、組織、地點或流行文化參考）等任務。</p><p><em>「觀其伴而知其意（You shall know a word by the company it keeps）」</em></p><p>-- 英國語言學家 J. R. Firth</p><h2>04.NLP 模型</h2><p>在大型數據集上接受訓練以執行特定 NLP 任務的深度學習模型被稱為 NLP 的預訓練模型（PTM），它們可以通過避免從頭開始訓練新模型來幫助下游 NLP 任務。以下是一些著名的自然語言處理模型，以便模型更準確地執行：</p><ul><li><p>BERT（Bidirectional Encoder Representations from Transformer） 是由 Google 開發的自然語言處理模型，可學習文本的雙向表示。</p></li><li><p>XLNet 是 CMU 和 Google Brain 團隊在 2019 年 6 月份於論文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F1906.08237" target="_blank">《XLNet: Generalized Autoregressive Pretraining for Language Understanding》</a>發佈的模型。</p></li><li><p>RoBERTa 是 2019 年在論文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F1907.11692" target="_blank">《RoBERTa: A Robustly Optimized BERT Pretraining Approach》</a>中被提出的。</p></li><li><p>ALBERT 模型來自 Google 2019 年公佈的論文《ALBERT: A LITE BERT FOR SELF-SUPERVISED LEARNING OF LANGUAGE REPRESENTATIONS》。</p></li><li><p>StructBERT 是阿里對 BERT 的一個改進，於 2019 年在論文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F1908.04577" target="_blank">《StructBERT: Incorporating Language Structures into Pre-training for Deep Language Understanding》</a>中提出。</p></li><li><p>PaLM 2 是下一代大語言模型，已經過大量數據訓練，能夠預測人類輸入後的下一個單詞。</p></li><li><p>GPT-4 是 OpenAI 開發的多模態大語言模型。它是 GPT 系列中的第四個模型，以其強大的自然語言生成能力而聞名。</p></li><li><p>SentenceTransformers 是一個用於句子、文本和圖像 Embedding 的 Python 框架，最初於論文《Sentence-BERT: Sentence Embeddings using Siamese BERT-Networks》中提出。</p></li></ul><h2>05.Zilliz 如何賦能 NLP？</h2><p>開發者正在使用向量數據庫革新 NLP 領域。向量數據庫能夠有效存儲和檢索 NLP 模型生成的 Embedding <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzilliz.com.cn%2Fglossary%2Fembedding-%25E5%2590%2591%25E9%2587%258F" target="_blank">向量</a>，簡化了基於語義相似性尋找相似文檔、短語或甚至單個詞的過程。此外，使用向量數據庫後，開發者可以快速總結 Collection 文檔。使用 NLP 算法可以從文本語料庫中提取最重要的句子，然後藉助 Milvus 便可找到與提取的短語語義上最相似的短語。</p><p>另一個廣泛的向量數據庫 + NLP 用例就是檢索增強生成（Retrieval Augmented Generation，RAG）。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzilliz.com.cn%2Fuse-cases%2Fllm-retrieval-augmented-generation" target="_blank">RAG</a> 通常以聊天機器人的形式出現。大語言模型僅基於公開可用的數據進行訓練。因此，它們可能缺乏特定領域知識或者私有信息。開發者可以在 LLM 之外的向量數據庫中存儲特定領域的數據，進行相似性搜索以返回與用户提問相關的 top-K 結果。最終將這些結果合併發送至 LLM，使其生成準確的答案。</p><h2>06.總結</h2><p>使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzilliz.com.cn%2Fblog%2Fvectordatabase-introduction-milvus" target="_blank">向量數據庫</a>，尤其是其高效的 embedding 向量存儲和檢索能力能夠為 NLP 領域帶來革新，簡化相似文檔或短語的搜索過程。NLP 結合了人工智能和計算語言學，幫助計算機理解並響應人類語言，其應用場景廣泛，包括虛擬助手、聊天機器人、翻譯服務和情感分析等。諸如 BERT、XLNet、RoBERTa、ALBERT 和 GPT-4 之類的 NLP 模型和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzilliz.com.cn%2Fcloud" target="_blank">Zilliz Cloud</a> 之類的向量數據庫能夠進一步增強 NLP，簡化基於語義相似性檢索相似文檔或短語的過程。</p><hr><ul><li><p>如果在使用 Milvus 或 Zilliz 產品有任何問題，可添加小助手微信 「zilliz-tech」 加入交流羣。</p></li><li><p>歡迎關注微信公眾號「Zilliz」，瞭解最新資訊。</p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 11:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/10149535</guid>
            <link>https://my.oschina.net/u/4209276/blog/10149535</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AWebSocket - 基於 OkHttp 封裝的 WebSocket]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:left">AWebSocket for Android 一個基於 okhttp 封裝的<span>&nbsp;</span><strong>WebSocket</strong>，簡潔易用。</p><h2 style="margin-left:0; margin-right:0; text-align:left">Gif 展示</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="" height="581" src="https://oscimg.oschina.net/oscnet/up-ecbee904460eb28c99bfb586b530b5bbefd.gif" width="300" referrerpolicy="no-referrer"></p><blockquote>&nbsp;</blockquote><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你也可以直接下載<span>&nbsp;</span><a href="https://gitee.com/link?target=https%3A%2F%2Fraw.githubusercontent.com%2Fjenly1314%2FAWebSocket%2Fmaster%2Fapp%2Frelease%2Fapp-release.apk">演示 App</a><span>&nbsp;</span>體驗效果</p><h2 style="margin-left:0; margin-right:0; text-align:left">引入</h2><h3 style="margin-left:0; margin-right:0; text-align:left">Gradle:</h3><ol><li><p style="margin-left:0; margin-right:0">在 Project 的<span>&nbsp;</span><strong>build.gradle</strong><span>&nbsp;</span>或<span>&nbsp;</span><strong>setting.gradle</strong><span>&nbsp;</span>中添加遠程倉庫</p><div><div><pre><span><strong style="color:#000000">repositories</strong><span>{</span></span><span><span style="color:#888888">//...</span></span><span><span>mavenCentral</span><span>()</span></span><span><span>}</span></span></pre><div style="text-align:center">&nbsp;</div></div></div></li><li><p style="margin-left:0; margin-right:0">在 Module 的<span>&nbsp;</span><strong>build.gradle</strong><span>&nbsp;</span>裏面添加引入依賴項</p><div><div><pre><span><span>implementation</span><span style="color:#dd1144">'com.github.jenly1314:awebsocket:1.0.0'</span></span></pre></div></div></li></ol><h2 style="margin-left:0; margin-right:0; text-align:left">使用</h2><h3 style="margin-left:0; margin-right:0; text-align:left">主要使用示例</h3><div style="text-align:left"><div><pre><span><span style="color:#888888">//初始化 AWebSocket</span></span><span><strong>val</strong><strong style="color:#336699">aWebSocket</strong><span>=</span><strong style="color:#445588">AWebSocket</strong><span>(</span><span>url</span><span>)</span></span><span><span style="color:#888888">// 設置監聽</span></span><span><span>aWebSocket</span><span>.</span><strong style="color:#990000">setWebSocketListener</strong><span>(</span><strong>object</strong><span style="background-color:#ffadad; color:#a61717">: </span><strong style="color:#445588">WebSocketListener</strong><span>()</span><span>{</span></span><span><strong style="color:#000000">override</strong><strong style="color:#000000">fun</strong><strong style="color:#990000">onOpen</strong><span>(</span><span>webSocket</span><span>:</span><strong style="color:#445588">IWebSocket</strong><span>,</span><span>response</span><span>:</span><strong style="color:#445588">Response</strong><span>)</span><span>{</span></span><span><strong style="color:#000000">super</strong><span>.</span><strong style="color:#990000">onOpen</strong><span>(</span><span>webSocket</span><span>,</span><span>response</span><span>)</span></span><span><span style="color:#888888">// TODO 連接成功，可以進⾏通信了</span></span><span><span>}</span></span><span><strong style="color:#000000">override</strong><strong style="color:#000000">fun</strong><strong style="color:#990000">onMessage</strong><span>(</span><span>webSocket</span><span>:</span><strong style="color:#445588">IWebSocket</strong><span>,</span><span>text</span><span>:</span><strong style="color:#445588">String</strong><span>)</span><span>{</span></span><span><strong style="color:#000000">super</strong><span>.</span><strong style="color:#990000">onMessage</strong><span>(</span><span>webSocket</span><span>,</span><span>text</span><span>)</span></span><span><span style="color:#888888">// TODO 接收消息</span></span><span><span>}</span></span><span><strong style="color:#000000">override</strong><strong style="color:#000000">fun</strong><strong style="color:#990000">onMessage</strong><span>(</span><span>webSocket</span><span>:</span><strong style="color:#445588">IWebSocket</strong><span>,</span><span>bytes</span><span>:</span><strong style="color:#445588">ByteString</strong><span>)</span><span>{</span></span><span><strong style="color:#000000">super</strong><span>.</span><strong style="color:#990000">onMessage</strong><span>(</span><span>webSocket</span><span>,</span><span>bytes</span><span>)</span></span><span><span style="color:#888888">// TODO 接收消息</span></span><span><span>}</span></span><span><strong style="color:#000000">override</strong><strong style="color:#000000">fun</strong><strong style="color:#990000">onClosing</strong><span>(</span><span>webSocket</span><span>:</span><strong style="color:#445588">IWebSocket</strong><span>,</span><span>code</span><span>:</span><strong style="color:#445588">Int</strong><span>,</span><span>reason</span><span>:</span><strong style="color:#445588">String</strong><span>)</span><span>{</span></span><span><strong style="color:#000000">super</strong><span>.</span><strong style="color:#990000">onClosing</strong><span>(</span><span>webSocket</span><span>,</span><span>code</span><span>,</span><span>reason</span><span>)</span></span><span><span style="color:#888888">// TODO 連接關閉中</span></span><span><span>}</span></span><span><strong style="color:#000000">override</strong><strong style="color:#000000">fun</strong><strong style="color:#990000">onClosed</strong><span>(</span><span>webSocket</span><span>:</span><strong style="color:#445588">IWebSocket</strong><span>,</span><span>code</span><span>:</span><strong style="color:#445588">Int</strong><span>,</span><span>reason</span><span>:</span><strong style="color:#445588">String</strong><span>)</span><span>{</span></span><span><strong style="color:#000000">super</strong><span>.</span><strong style="color:#990000">onClosed</strong><span>(</span><span>webSocket</span><span>,</span><span>code</span><span>,</span><span>reason</span><span>)</span></span><span><span style="color:#888888">// TODO 連接已關閉</span></span><span><span>}</span></span><span><strong style="color:#000000">override</strong><strong style="color:#000000">fun</strong><strong style="color:#990000">onFailure</strong><span>(</span><span>webSocket</span><span>:</span><strong style="color:#445588">IWebSocket</strong><span>,</span><span>t</span><span>:</span><strong style="color:#445588">Throwable</strong><span>,</span><span>response</span><span>:</span><strong style="color:#445588">Response</strong><span>?)</span><span>{</span></span><span><strong style="color:#000000">super</strong><span>.</span><strong style="color:#990000">onFailure</strong><span>(</span><span>webSocket</span><span>,</span><span>t</span><span>,</span><span>response</span><span>)</span></span><span><span style="color:#888888">// TODO 連接出錯</span></span><span><span>}</span></span><span><span>})</span></span><span><span style="color:#888888">// 連接</span></span><span><span>aWebSocket</span><span>.</span><strong style="color:#990000">connect</strong><span>()</span></span><span><span style="color:#888888">//---------------------------</span></span><span><span style="color:#888888">//...</span></span><span><span style="color:#888888">// 發送消息</span></span><span><span>aWebSocket</span><span>.</span><strong style="color:#990000">send</strong><span>(</span><span>data</span><span>)</span></span><span><span style="color:#888888">//---------------------------</span></span><span><span style="color:#888888">//...</span></span><span><span style="color:#888888">// 關閉連接</span></span><span><span>aWebSocket</span><span>.</span><strong style="color:#990000">close</strong><span>()</span></span></pre></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">更多使用詳情，請查看<a href="https://gitee.com/jenly1314/AWebSocket/blob/master/app">Demo</a>中的源碼使用示例或直接查看<a href="https://gitee.com/link?target=https%3A%2F%2Fjitpack.io%2Fcom%2Fgithub%2Fjenly1314%2FAWebSocket%2Flatest%2Fjavadoc%2F">API 幫助文檔</a></p><h3 style="margin-left:0; margin-right:0; text-align:left">相關推薦</h3><p style="margin-left:0px; margin-right:0px; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fjenly1314%2FANetty">ANetty</a><span>&nbsp;</span>基於 Netty 封裝的 Android 鏈路通訊庫，用以快速開發高性能，高可靠性的網絡交互。在保證易於開發的同時還保證其應用的性能，穩定性和伸縮性。</p><p style="margin-left:0px; margin-right:0px; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fjenly1314%2FASocket">ASocket</a><span>&nbsp;</span>一個 TCP/UDP 協議的封裝庫，方便快速實現 TCP 的長連接與 UDP 的單播、組播、廣播等相關通信。</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 10:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/awebsocket</guid>
            <link>https://www.oschina.net/p/awebsocket</link>
        </item>
        <item>
            <title>
                <![CDATA[微軟開源 Terminal Chat]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微軟<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fterminal-chat-in-windows-terminal-canary%2F" target="_blank">宣佈</a>開源其 AI 聊天功能 Terminal Chat 的工作，邀請開發人員嘗試體驗並參與構建。「Windows Terminal 團隊致力於提高透明度，我們希望讓開源社區有機會幫助我們定義 terminal 應用程序中的人工智能。」</p><p><span style="color:#000000">Terminal Chat 是 Windows Terminal Canary 中的一項功能，允許用户保持在 terminal 上下文中的同時，與 AI 服務聊天以獲得智能建議（例如查找命令或解釋錯誤消息）。</span></p><p><img alt="" height="323" src="https://oscimg.oschina.net/oscnet/up-7d85ccd13aaf667d1c3ebcd092187c83cf8.png" width="500" referrerpolicy="no-referrer"></p><p>值得注意的是，Windows Terminal Canary 不提供默認模型或內置 AI 模型。因此要使用 Terminal Chat，用户必須手動在 Windows Terminal Canary 的 Terminal Chat 設置中添加 AI 服務端點和密鑰。</p><p>目前，Terminal Chat 僅支持 Azure OpenAI 服務。要獲取必要的 Azure OpenAI 服務端點和密鑰，用户需要創建和部署 Azure OpenAI 服務資源。</p><p><img alt="" height="337" src="https://oscimg.oschina.net/oscnet/up-3418831b63a1cef6ad618521d5e8e233d0f.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="319" src="https://oscimg.oschina.net/oscnet/up-2698239a8126cd25a2f1bab83a5f1c0f605.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Windows Terminal Canary 僅在用户發送消息時與 AI 服務進行通信，聊天記錄和用户活動 shell 的名稱也會附加到發送給 AI 服務的信息中。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>Terminal Chat&nbsp;<span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>結束後，Windows Terminal Canary 不會保存聊天曆史記錄。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">微軟方面表示，他們知道「AI in a terminal」聽起來令人生畏，因此他們將致力於提高透明度並積極聽取用户反饋。「我們堅信，開源社區的加入將幫助我們確定人工智能路線圖，並幫助我們確定可用於核心產品 Windows Terminal 的最基本的 AI 功能集。」</span></span></p><p style="text-align:left"><span style="color:#000000">Terminal Chat&nbsp;<span style="background-color:#ffffff">功能目前僅在 Windows Terminal Canary 中提供，不會包含在 WindowsTerminal 預覽版或 Windows Terminal 穩定版的構建中。</span></span></p><p style="text-align:left"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fterminal%23installing-windows-terminal-canary" target="_blank"><span style="color:#2980b9"><span style="background-color:#ffffff">下載地址</span></span></a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 09:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267428/terminal-chat-in-windows-terminal-canary</guid>
            <link>https://www.oschina.net/news/267428/terminal-chat-in-windows-terminal-canary</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[假如你是開源項目維護者，遇到這種回覆能忍到哪步？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>背景：</p><p>Vant 是一個輕量、可定製的移動端組件庫，由有贊團隊開源。近日，一名開發者在 Vant 的 GitHub 倉庫提交了一個 issue：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyouzan%2Fvant%2Fissues%2F12453" target="_blank">https://github.com/youzan/vant/issues/12453</a></u></em>。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d12cf1220dd6a3686fc370d6999fa3ad16f.png" referrerpolicy="no-referrer"></p><hr><p>直奔主題，請閲讀這名開發者與維護者的問答互動：</p><p>Vant 維護者對該 issue 先是進行了如下回復：</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-9b703d704225830325c310edc6473fdd774.png" referrerpolicy="no-referrer"></p></blockquote><p>提問者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-e6c785757085efeac52ec4017730e405587.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-6b53e369e0f7047d703165ef2353d69ef98.png" referrerpolicy="no-referrer"></p><p>提問者（詢問項目維護者這到底是不是 bug）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-9a454d0c5ff658f495c0a716bfa806fea64.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img height="296" src="https://oscimg.oschina.net/oscnet/up-2d3f37ca3537caa4910f618b2ac40813283.png" width="1684" referrerpolicy="no-referrer"></p><p>提問者（沒得到自己想要的答案，開始陰陽怪氣）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-7548ef7e9f27dbe02d902b21a805d3c2b83.png" referrerpolicy="no-referrer"></p><p>項目維護者（準備到此為止）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-cfa1f12f75fcdcc6f4445236b19400921df.png" referrerpolicy="no-referrer"></p><p>提問者繼續追問：</p><p><img src="https://oscimg.oschina.net/oscnet/up-2ac7c06681f933d411c766346ba126c3860.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-717a1ca2200a63fe14ace932a3754887966.png" referrerpolicy="no-referrer"></p><p>提問者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-30cdb4ece4857089a0c6033e18b4d439231.png" referrerpolicy="no-referrer"></p><p>項目維護者：</p><p><img src="https://oscimg.oschina.net/oscnet/up-945eaa18e070e9c15264da20b49d0cd9978.png" referrerpolicy="no-referrer"></p><p>最後一個來回：</p><p><img src="https://oscimg.oschina.net/oscnet/up-7617f52c138888233e08e5aedb53a49a012.png" referrerpolicy="no-referrer"></p><p>然後，這名提問者去社區發帖分享了「一次 github 跟開源大佬的抬槓經歷」。</p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv2ex.com%2Ft%2F993100" target="_blank">https://v2ex.com/t/993100</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 07:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267411</guid>
            <link>https://www.oschina.net/news/267411</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LineageOS 全球安裝量達 150 萬台]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LineageOS 團隊日前在知名數碼 UP 主 MKBHD 播客中回顧了 LineageOS 的歷史，<strong>並介紹稱目前全球有 150 萬台 Android 設備採用 LineageOS</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-45aadd76321a77a1392775596a7127e39cd.png" referrerpolicy="no-referrer"></p><p>LineageOS 是一個面向智能手機和平板電腦的自由、免費、開源的 Android 系統分支。它是深受歡迎的定製 ROM CyanogenMod 的繼任者，在 2016 年首次推出，至今仍在積極更新。</p><p>LineageOS 可在不同 Android 品牌的各種不同設備上使用，包括谷歌、HMD Global、三星、索尼、一加、小米等，這款&nbsp;ROM&nbsp;也讓一些久遠的品牌繼續前行，例如早期的 Essential Phone、LG 等。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 07:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267410</guid>
            <link>https://www.oschina.net/news/267410</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[基於 Triple 實現 Web 移動端後端全面打通]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><h1 style="line-height: 1.75em;margin-bottom: 8px;" data-mpa-powered-by="yiban.io"><img class="rich_pages wxw-img" data-backh="81" data-backw="578" data-ratio="0.14106583072100312" src="https://oscimg.oschina.net/oscnet/c03fcfd2-fd29-4f40-8a8b-fbc8acf7f63e.gif" data-w="638" style="outline: 0px;display: initial;visibility: visible !important;width: 677px !important;" referrerpolicy="no-referrer"></h1><section style="margin-bottom: 40px;"><span style="color: rgb(136, 136, 136);"><em><span style="color: rgb(136, 136, 136);font-size: 14px;">作者：陳有為，陌陌研發工程師、Apache Dubbo PMC</span></em></span></section><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">01</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">RPC 協議開發微服務</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Aliware</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/11f88a4a-39b5-4f5e-9496-4101a228839b.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">在我們正常開發微服務的時候，傳統 RPC 服務可能在最底層。上層可能是瀏覽器、移動端、外界的服務器、自己的測試、curl 等等。我們可能會通過 Tomcat 這種外部服務器去組裝我們的 RPC 層，也就是 BFF。或者我們沒有 BFF，我們的 RPC 就是對外提供服務。但因為瀏覽器要訪問，所以我們需要有一個網關，比如説 APISIX 或者 ShenYu 等 HTTP 網關。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/79eae4dd-4c7e-45d4-b382-3b7e0fbd8e7a.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">上圖展示的是我們的流程，但是存在一些問題。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">如果我們的服務是非常輕的，我們只需要一個轉發層，無論是配網關還是起一個 webserver 去轉發，怎麼做都很麻煩。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">此外，RPC 服務大部分都是基於二進制的，而二進制正常在本地是沒法測試的。因此我們的公司內都可能就會開發一種後台或者中間的 Proxy 代理讓我們去測試。但這個的前提是你至少得把它部署到測試環境，所以還是沒法在本地測試。</span><o:p></o:p></section><p style="line-height: 1.75em;margin-bottom: 40px;"><span style="font-size: 15px;">總體來説，這兩個問題會導致易用性比較低，且開發成本相對較高，因為要做一些與業務無關的重複勞動。</span></p><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">02</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">全新升級的 Triple 協議</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Apache Dubbo</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;"></span><o:p></o:p></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/601481f3-b469-46d3-a9e5-6bd230a68166.png" data-type="png" data-w="832" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">基於上邊的兩個問題，我們來介紹一下 Triple 協議。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">先來説一下上一代協議，它產出的原因是什麼。我們應該都知道 Dubbo 原來是 Dubbo 協議，它是基於 tcp 的，它只有一個包。因為它的包的設計，導致了網關無法做一些特殊規則判斷、過濾等操作。但也不是絕對的，如果你願意犧牲性能把包完全解出來，組裝回去再透傳還是可以做到的，但一般大家都不太能接受。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">所以我們就在想能不能把原數據和真正的包分開。現在我們有現成的 HTTP，又有一個業界主流的 gRPC，所以我們的目標就是兼容 gRPC。因為 gRPC 目前都是用 IDL，而 IDL 有一個問題，尤其在 Java 側。因為大家都是寫一些接口，定義一些包去實現，這樣就會非常麻煩。Go 側就還好，因為大家已經習慣了這種開發模式。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">所以我們開發了 Triple 協議，<strong>首先它兼容了 gRPC，</strong>所以我們能實現和 gRPC 的完全互通。<strong>其次，我們兼容了自己定義接口的方法。</strong>雖然會損失一定的性能，但提升了一些易用性。而且 RPC 一般不是業務的瓶頸，大多數瓶頸還是在 DB。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">但還有個問題，雖然我們兼容了 gRPC，但 gRPC 是基於 TPC 的，所以如果前端或者其他第三方系統只有 HTTP，它還是接受不了我們的系統。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/979f4ac2-7a4e-423f-9b1b-b4073e2170ac.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;text-align: left;margin-bottom: 24px;"><span style="font-size: 15px;">基於此，我們想推出一個全新的 Triple 協議。為瞭解決上述的所有問題，我們參考了 gRPC、gRPC Web、通用 HTTP 等多種協議，做到瀏覽器訪問，支持&nbsp; Streaming，還支持同時運行在 HTTP/1、HTTP/2 協議上。因為目前 HTTP/3 還沒有大規模推廣，未來也會支持 HTTP/3。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><strong><span style="font-size: 15px;">最終的設計實現是完全基於 HTTP 的，且對人類、開發調試友好。</span></strong><span style="font-size: 15px;">我們可以通過簡單的瀏覽器訪問或者 curl 訪問，尤其是對 unary RPC。此外，我們和 gRPC 是完全互通的，用 HTTP 的業務不用擔心兼容性的問題，也不用擔心籤協議的問題。為了穩定性，我們只會採用業界流行的網絡庫，比如 Java 的 native、Go 的基礎的 net 包。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/2096d161-0996-43b9-a7ae-13dc12461acf.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;text-align: left;margin-bottom: 24px;"><span style="font-size: 15px;">雖然 Triple 協議和 gRPC 協議都基於 HTTP，但 gRPC 是基於 HTTP/2 的，而 Triple 是基於 HTTP/1 和 HTTP/2 的。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">我們在兼容 gRPC 的同時，我們為了易用性也擴展了一些功能。比如請求裏我們支持 Application/Json 的請求格式，支持使用 curl 訪問；</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">此外上一版的協議，為了支持傳統定義接口的方式，我們有一個二次序列化的過程。我們想在這裏通過一個特殊的 content type 來決定我們的 body 的結構，解決二次序列化的問題。同時這個東西是可以擴展的，理論上 HTTP 的所有功能我們在 Triple 協議上都可以實現，也可以拓展。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/df1f6c58-13f2-46f7-be3b-a518882ec9b4.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">用了 Triple 協議之後，我們的開發流程也發生了改變。如果你不需要進行組裝，或者沒有外層的代理，可能你的接入流程就是從外部的請求瀏覽器、對方的服務器、curl、自己測試等直接到了 server。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">和其他的 gRPC 的通信也是沒有問題的，流程就相當於少了一層。對於大多數用户，如果你不需要這個場景，其實是有很大的好處。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/fbad75ed-0049-4471-83cb-525e33e0e7d0.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;text-align: left;margin-bottom: 24px;"><span style="font-size: 15px;">Triple 協議因為最開始兼容 gRPC，那個時候只基於 HTTP/2，HTTP/2 有 Streaming 的能力，所以它天然支持 Streaming。但這裏比較特殊的是，我們新版的協議在 HTTP/1 也支持了 Stream，但因為 HTTP/1 的限制只能支持到 Server Streaming。依賴 HTTP/1 的 Server Push 實現。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3fc79407-e890-4793-a290-6b9f3bc67dd8.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><p style="line-height: 1.75em;margin-bottom: 40px;"><span style="font-size: 15px;">Client Stream 和 Bi Stream 就沒什麼可説的了。但有一個特別的是，在 Java 側沒有 Bi Stream，從編碼上就沒有，但從實現上是有的。</span><o:p></o:p></p><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">03</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">Triple 協議開發微服務</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Apache Dubbo</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e6931bb8-79f4-4cee-91b6-d5d690516fc9.png" data-type="png" data-w="832" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></section><section style="line-height: 1.75em;margin-bottom: 24px;"><strong><span style="font-size: 15px;">目前 Triple 協議比較靈活的支持兩種定義方式，分別是 IDL 定義和直接定義。</span></strong><span style="font-size: 15px;">直接定義支持同步、異步、手寫。還有比較極端一點的，比如在自己定義接口的時候使用 IDL 生成 protobuf 的類，我們不定義它的 service，只用它的生成的 request 和&nbsp; response 類也是沒問題的，Triple 協議會自動識別接口使用 protobuf 還是不使用 protobuf 進行傳輸。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/5ff5bab2-f311-4755-830d-b20806c7cf14.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Server 就是把它的務實現一下。上圖是一個例子，我就直接拿了 API 的組裝方式，真正的業務上可能是註解或者 XML 的方式。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/ce5be064-8661-47b0-a30b-78efa617ab67.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">因為我們支持了 HTTP 這個標準的協議，理論上我們的測試就會變得很簡單。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">因為我們支持 gRPC，所以我們可以用 gRPC curl 去調用我們的服務。但前提是你得有反射服務，然後手動開啓一下，它不是默認開啓的。然後它就可以通過反射拿到接口的源數據，通過 Json 轉成 protobuf 格式發過去。或者我們直接用 Application/Json 的方式直接調過去。這裏有一點比較特別的是在 HTTP/1 下我們也可以用 Sreaming。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">另外，因為我們支持 HTTP，理論上所有第三方的 HTTP 客户端都是可以調用的。然後使用 Dubbo 的 Admin 也可以進行測試，前提是你得把它註冊上。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/59b1ddfb-d5b9-492f-b5be-19d98ac1becb.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">調用端不管是 POJO 還是 IDL，它們都沒有本質的區別。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7915eb90-8133-4eac-a8a9-d6ed2e3e85c5.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><p style="line-height: 1.75em;margin-bottom: 40px;"><span style="font-size: 15px;">現在我們有了 Triple 協議，但如果這個協議沒有承載方也是行不通的。<strong>因此我們還得有一個框架，有一些服務治理才是我們的微服務。</strong>所以服務治理也是微服務中不可或缺的一部分。</span><o:p></o:p></p><section data-role="title" data-tools="135 編輯器" data-id="106625" mpa-from-tpl="t" style="margin-bottom: 0px;outline: 0px;"><section mpa-from-tpl="t" style="margin: 10px auto;outline: 0px;text-align: center;"><section mpa-from-tpl="t" style="outline: 0px;display: inline-block;"><section mpa-from-tpl="t" style="padding-right: 7px;padding-left: 7px;outline: 0px;display: flex;justify-content: center;align-items: flex-end;"><section mpa-from-tpl="t" style="outline: 0px;font-size: 28px;letter-spacing: 1.5px;color: rgb(255, 255, 255);font-style: italic;text-shadow: rgb(255, 85, 50) 1px 1px 0px;line-height: 25px;"><strong mpa-from-tpl="t" style="outline: 0px;">04</strong></section><section data-brushtype="text" hm_fix="343:395" mpa-from-tpl="t" style="margin-left: 15px;outline: 0px;font-size: 16px;letter-spacing: 1.5px;color: rgb(242, 98, 46);"><p style="outline: 0px;vertical-align: inherit;line-height: normal;"><em style="caret-color: red;"><strong style="outline-style: initial;">Dubbo 為 Triple 協議帶來治理能力</strong></em></p></section></section><section data-width="100%" data-role="list" mpa-from-tpl="t" style="margin-top: 6px;outline: 0px;width: 100%;height: 6px;background-color: rgba(245, 224, 179, 0.8);opacity: 0.51;"><p style="outline: 0px;vertical-align: inherit;"><span style="outline: 0px;font-size: 14px;"><em style="outline: 0px;"><span style="outline: 0px;color: rgb(165, 165, 165);">Apache Dubbo</span></em></span></p></section></section></section></section><section style="line-height: 1.75em;margin-top: 40px;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/31ad4bc8-c9e8-44c6-be77-ee023944fbba.png" data-type="png" data-w="832" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Triple 的定位只是 Dubbo 裏的其中一個協議，當然你也可以為了兼容性，用原來的 Dubbo 協議或者其他的協議。而且我們支持在同一個端口上開啓多個協議，可以按需選擇。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/72e291fc-3bce-4ba4-9b31-bd339eca8655.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">同時 Dubbo 為 Triple 提供了多語言的實現。目前會在 Rust、Go、Java、JS、node、Python 這幾部分實現官方的實現。這樣用户就不用自己根據實驗協議的 spec 去實現了。如果你有一些定製需求，比如內部的一些框架，你根據 spec 實現也是可以的。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/f151c36d-888d-4ca4-b78d-c84b36bae333.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Dubbo 和服務框架集成的很好，理論上在開發流程中，尤其是在 Java 側服務定義、服務治理、服務註冊發現等都不用客户來操心，<strong>是開箱即用的。</strong></span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e615a1a8-d7bb-4f79-b638-1d3b1fc109d6.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">Dubbo 提供了豐富的生態，第三方的生態包括 Nacos、Zookeeper 等等，我們不用創新，直接引入相應的包即可。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/08125323-87f5-4957-bf1f-d44ba434892c.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">這是我們使用 Triple 協議服務註冊的例子。上面你可以選 Nacos、Zookeeper、K8s，左邊是一個 Client 和一個 Server，這麼調用。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/67f6ea46-946c-46a0-a6e4-64776c71c3a6.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 24px;"><span style="font-size: 15px;">我們在 admin 上看一下實現。這裏提一句，我們的 admin 也在新版重構，是用 Go 實現的，大家可以期待一下。</span><o:p></o:p></section><section style="line-height: 1.75em;margin-bottom: 24px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5625" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8bbb56ce-98c2-42b0-91d9-54c1b7a18255.png" data-type="png" data-w="832" style="" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-bottom: 0px;"><span style="font-size: 15px;">我們經常會遇到灰度發佈或者流量染色的需求。我們可以從 admin 上發一個 tag 治理規則下去，然後把一些實例打上 tag，然後這個攜帶 tag 的流量就從入口就會挨個傳遞下去，從而實現全鏈路的流量染色。</span><o:p></o:p></section><p style="display: none;margin-bottom: 24px;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - Apache Dubbo（ApacheDubbo）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 04:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6214966/blog/10116068</guid>
            <link>https://my.oschina.net/u/6214966/blog/10116068</link>
            <author>
                <![CDATA[ApacheDubbo]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟 CEO：Sam Altman 可能會重返 OpenAI]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Sam Altman 在被 OpenAI 公司解僱後宣佈轉投微軟，但這一決定並非板上釘釘。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2F2023%2F11%2F20%2F23969586%2Fsam-altman-plotting-return-open-ai-microsoft" target="_blank">The Verge</a> 援引多位知情人士消息稱，如果解僱 Altman 的其餘董事會成員下台，他和聯合創始人 Greg Brockman 仍願意重返 OpenAI。</span></p><p><span style="color:#000000">與此同時，微軟首席執行官 Satya Nadella 在接受</span><span style="color:#333333"></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Falexeheath%2Fstatus%2F1726741601278681400" target="_blank">CNBC</a><span style="color:#333333"><span>&nbsp;</span>和<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Ftechnology%2Fstatus%2F1726751929475150226" target="_blank">Bloomberg TV</a><span style="color:#333333"><span>&nbsp;</span></span><span style="color:#000000">採訪時也明確表示，</span>Altman 可能會以某種身份重返 OpenAI。</p><p>他在被問及&nbsp;<span style="color:#000000">Altman 以及 700 名 OpenAI 員工是否會加入微軟時回答道，「這取決於 OpenAI 董事會、管理層和員工的選擇」。並表示，無論他們是去是留，他都對這兩種選擇持開放態度。「顯然，如果 Sam 和 Greg 不打算留在 OpenAI，我們希望他們有一個美好的歸宿。」</span></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-dc4fe464c1a2cd2a935cf44d7d8bd62f0c8.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">關於「明天誰會是 OpenAI 的 CEO」的直白提問，Nadella 也依舊是同樣的回答："我會把這個問題留給 OpenAI 和它的董事會"。</span></p><p><span style="color:#000000">此外，當被問及微軟是否需要在 OpenAI 董事會中佔有一席之地時，他則表示，OpenAI 的治理方面必須做出一些改革，微軟方面將就此與其董事會進行對話，並隨着事態的發展而逐步推進解決這個問題。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">目前，被認為是此次 「政變」 組織者的 OpenAI 首席科學家 Ilya Sutskever 已經改變了主意，簽署聯名信要求 </span>Altman 迴歸。因此，<span style="background-color:#ffffff">OpenAI 剩下的三名董事會成員中只需要有兩人反轉就能讓 Altman 迴歸。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267384/microsoft-ceo-sam-altman-plotting-return-open-ai</guid>
            <link>https://www.oschina.net/news/267384/microsoft-ceo-sam-altman-plotting-return-open-ai</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TypeScript 5.3 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>TypeScript 5.3 已正式發佈。</p><p><strong>主要變化</strong></p><ul><li><p>支持&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-import-attributes">import attributes</a>&nbsp;提案的最近更新</p></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23stable-support-resolution-mode-in-import-types" target="_blank">在 Import Types</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23stable-support-resolution-mode-in-import-types" target="_blank">中提供對<code>resolution-mode</code>的穩定支持</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23resolution-mode-supported-in-all-module-modes" target="_blank">為所有 Module Modes</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23resolution-mode-supported-in-all-module-modes" target="_blank">提供</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F%23resolution-mode-supported-in-all-module-modes" target="_blank"><code>resolution-mode</code>支持</a></li><li><p><code>switch (true)</code>Narrowing</p></li><li><p>Narrowing On Comparisons to Booleans</p></li><li><p>檢查對實例字段的<code>super</code>屬性訪問</p></li><li><p>針對類型的交互式嵌套提示 (Interactive Inlay Hints)</p></li><li><p>跳過 JSDoc 解析以進行優化</p></li><li><p>合併<code>tsserverlibrary.js</code>和<code>typescript.js</code></p></li></ul><hr><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftc39%2Fproposal-import-attributes">import attributes</a></strong></p><p>import attributes 的一個用例是向運行時提供有關模塊預期格式的信息。</p><pre><code class="language-javascript">// We only want this to be interpreted as JSON,
// not a runnable/malicious JavaScript file with a `.json` extension.
import obj from "./something.json" with { type: "json" };
</code></pre><p>TypeScript 不會檢查這些屬性的內容，因為它們是特定於主機的，因此不會對它們進行檢查，只是讓瀏覽器和運行時處理它們（可能會出錯）。</p><pre><code class="language-javascript">// TypeScript is fine with this.
// But your browser? Probably not.
import * as foo from "./foo.js" with { type: "fluffy bunny" };
</code></pre><p>動態 import () 調用也可以通過第二個參數使用 import 屬性。</p><pre><code class="language-javascript">const obj = await import("./something.json", {
    with: { type: "json" }
});
</code></pre><p>第二個參數的預期類型由一個名為<code>ImportCallOptions</code>的類型定義，默認情況下，該類型只期望調用一個屬性<code>with</code>。</p><p>請注意，導入屬性是從早期的 "導入斷言"（import assertions）提案演變而來的，該提案已在 TypeScript 4.5 中實現。最明顯的區別是使用了<code>with</code>關鍵字而非<code>assert</code>關鍵字。但不太明顯的區別是，運行時現在可以自由使用屬性來指導導入路徑的解析和解釋，而導入斷言只能在加載模塊後斷言某些特性。</p><p>隨着時間的推移，TypeScript 將淘汰舊的導入斷言語法，轉而使用建議的導入屬性語法。使用 assert 的現有代碼應遷移到 with 關鍵字。需要導入屬性的新代碼應只使用<code>with</code>關鍵字。</p><p><strong><code>switch (true)</code>Narrowing</strong></p><p>TypeScript 5.3 可以根據<code>switch (true)</code>中每個<code>case</code>子句的條件執行 narrowing。</p><pre><code class="language-javascript">function f(x: unknown) {
    switch (true) {
        case typeof x === "string":
            // 'x' is a 'string' here
            console.log(x.toUpperCase());
            // falls through...

        case Array.isArray(x):
            // 'x' is a 'string | any[]' here.
            console.log(x.length);
            // falls through...

        default:
          // 'x' is 'unknown' here.
          // ...
    }
}
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Ftypescript%2Fannouncing-typescript-5-3%2F" target="_blank">詳情查看發佈公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267382/typescript-5-3-ga</guid>
            <link>https://www.oschina.net/news/267382/typescript-5-3-ga</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國操作系統調研]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" height="566" src="https://static.oschina.net/uploads/space/2023/1121/112104_Mhtw_3820517.jpg" width="400" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.qq.com%2Fsheet%2FDQ2hmWHpJdk1WYUl3%3Ftab%3DBB08J2" target="_blank">https://docs.qq.com/sheet/DQ2hmWHpJdk1WYUl3?tab=BB08J2</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267381</guid>
            <link>https://www.oschina.net/news/267381</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米 2023Q3 財報：總收入 709 億，研發支出 50 億]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">小米 2023 Q3 財報現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FopJuLdveNeZPOCiYcNAHkw" target="_blank">公佈</a>：總收入 709 億元，本季重回正增長。經調整淨利潤 60 億元，同比增 182.9%。智能電動汽車等創新業務投入 17 億元。小米持續大規模投入底層核心技術，Q3 研發支出 50 億元，同比增長 22.0%，研發人員佔比已超過 53%。</span></p><p><span style="color:#000000">雷軍表示：「作為一家科技公司，小米始終將'技術為本'列為鐵律，我們下定決心大規模研發底層核心技術，堅定不移投入其中。我們有充足的現金儲備來支持持續創新，本季度末，小米現金總儲備達人民幣 1276 億元，又一次創下新高。」</span></p><p><span style="color:#000000">公告指出，本季度小米研發支出人民幣 50 億元，同比增長 22.0%。該公司還計劃五年之內（2022-2026）將投入研發 1000 億元人民幣。人才梯隊方面，截至第三季度末，小米的工程師人數佔比已經超過了 53%。小米的新十年目標（2020-2030）為：大規模投入底層核心技術，致力成為全球新一代硬核科技引領者。</span></p><p><span style="color:#000000">小米智能手機業務在本季度重回增長，全球市佔率達 14.1%，連續 3 個季度環比提升。全球智能手機出貨量為 4180 萬台，同比增長 4.0%，環比增長 27.0%。IoT 業務實現了收入和毛利率的同步增長。Q3 IoT 與生活消費產品收入達到人民幣 207 億元，同比增長 8.5%，毛利率則創下歷史新高，達到 17.8%，同比提升 4.3 個百分點。</span></p><p><span style="color:#000000">互聯網業務總收入達人民幣 78 億元，創歷史新高，毛利率為 74.4%，同比提升 2.3 個百分點。廣告收入創下歷史新高，達人民幣 54 億元；遊戲業務連續 9 個季度實現收入同比增長，達人民幣 11 億元。境外互聯網業務本季度收入達到人民幣 23 億元，同比增長 35.8%，佔整體互聯網收入的比例為 30.0%，同比提升 5.8 個百分點。</span></p><p><span style="color:#000000">本季度，小米全球 MIUI 月活用户達 6.23 億，同比增長 10.5%；中國大陸 MIUI 月活用户達 1.52 億，同比增長 7.4%。</span></p><p><span style="color:#000000"><img alt="" height="400" src="https://oscimg.oschina.net/oscnet/up-84bfe07342c57c14fda453f243618d607d5.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="400" src="https://oscimg.oschina.net/oscnet/up-24b5b3d9caa05b951e0825aed1626215466.png" width="300" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267376</guid>
            <link>https://www.oschina.net/news/267376</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[發動 OpenAI 「政變」幕後黑手浮出水面：Quora 聯合創始人 Adam]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>據報道，隨着局勢日漸明朗，此次宮斗大劇的幕後黑手指向了 OpenAI 董事會成員、問答網站 Quora 聯合創始人亞當·德安格洛（Adam D'Angelo），是他煽動並拉攏了公司首席科學家伊爾亞·蘇茨克維（Ilya Sutskever）一起驅逐山姆·奧爾特曼（Sam Altman）。</p><p><strong>OpenAI 董事會背景</strong></p><p><img src="https://static.oschina.net/uploads/space/2023/1121/111403_8DJZ_2720166.png" referrerpolicy="no-referrer"></p><p>有人指出，德安格洛不滿原因奧爾特曼的原因與 11 月初 OpenAI 開發者大會宣佈的 GPTs 有關，德安格洛認為自己創辦的 AI 機器人產品 Poe 將會被 GPTs 所淘汰，<strong>他對身為董事會成員卻沒有提前得知 GPTs 的存在而感到不滿</strong>，覺得奧爾特曼不該對自己保密。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d6576cd6d0b5a4521931becb8dedd5bf47b.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fwilliamlegate%2Fstatus%2F1726715671487156554" target="_blank">https://twitter.com/williamlegate/status/1726715671487156554</a></u></em></p></blockquote><p>據説德安格洛現在正忙着和律師商量應對方案。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ebba8bbe70d3d6091986c34281eacfde3b8.png" referrerpolicy="no-referrer"></p><p>公開資料顯示，德安格洛出生於 1984 年，他被《財富》雜誌譽為「科技界最聰明的人之一」，大學去了被譽為"天才"搖籃的加州理工，畢業後成為 Facebook 的第一任 CTO，後創辦全球領先問答網站 Quora。他 2016 年上了《福布斯》雜誌 40 歲以下最富有企業家排行榜。</p><p>此外，在納德拉宣佈 OpenAI 創始人奧爾特曼和格雷格・布羅克曼將<u><a href="https://www.oschina.net/news/267272">加入</a></u>微軟領導新的 AI 研究團隊後，微軟股價盤前大漲 57%。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267375</guid>
            <link>https://www.oschina.net/news/267375</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟週二補丁日 (Patch Tuesday) 實施 20 週年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微軟安全響應中心上週慶祝了週二補丁日 (Patch Tuesday) <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmsrc.microsoft.com%2Fblog%2F2023%2F11%2Freflecting-on-20-years-of-patch-tuesday%2F" target="_blank">實施二十週年</a></u>。</p><p>週二補丁日也稱補丁星期二、星期二更新 (Update Tuesday) 等，它是一個在行業內被廣泛使用的非正式術語，指微軟定期在每個月的第二個星期二發佈其軟件產品的更新補丁，經由 Windows Update 推送給用户。具體時間為 UTC 18:00（或 17:00 開始）。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-584f40b5209168b60a127974dbb6c03dc59.png" referrerpolicy="no-referrer"></p><p>微軟有一種習慣，會在偶數月份發佈更多的更新，相應奇數月份的更新會更少。少數更新也會在週二補丁日之外被髮布。某些更新，例如 Microsoft Defender 的病毒庫更新則會每天發佈。有時候，在一次常規的週二補丁日之後會有一次額外的週二補丁日。另外一些更新則可能隨時會被髮布。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a84502b16cff68810870adb778d2491d613.png" referrerpolicy="no-referrer"></p><p>微軟於 2003 年 10 月正式開始了此模式。在統一採用週二補丁日前，安全補丁的發佈是零零散散的，這種零散的模式給 IT 工作者和組織部署重要補丁帶來了挑戰。微軟率先提出的可預測的補丁發佈時間表改變了這一狀況。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 21 Nov 2023 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267373/20-years-of-patch-tuesday</guid>
            <link>https://www.oschina.net/news/267373/20-years-of-patch-tuesday</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
