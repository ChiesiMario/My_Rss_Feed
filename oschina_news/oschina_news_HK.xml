<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 11 Nov 2023 05:52:15 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[IntelliJ IDEA 2023.3 Beta 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span style="display:none">&nbsp;</span><span style="color:#000000">IntelliJ IDEA 2023.3 Beta 版本現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F11%2Fintellij-idea-2023-3-beta%2F" target="_blank">發佈</a>，此版本包括搶先體驗計劃期間引入的所有重要更新。以下是即將發佈的主要版本中最值得注意的改進和新增功能列表：</span></p><ul><li><span style="color:#000000">完全支持 Java 21 功能</span></li><li><span style="color:#000000">調試器中的 Run to Cursor 嵌入選項</span></li><li><span style="color:#000000">具有代碼編輯操作的浮動工具欄</span></li><li><span style="color:#000000">支持 GitLab snippets</span></li><li><span style="color:#000000">All-in-one diff viewer</span></li><li><span style="color:#000000">Maven 和 Gradle 導入的改進</span></li><li><span style="color:#000000">OpenAPI 規範的可視化編輯</span></li><li><span style="color:#000000">Quarkus 和 Micronaut 的增強功能</span></li><li><span style="color:#000000">Spring 6.1 功能支持</span></li><li><span style="color:#000000">Spring for GraphQL 支持</span></li><li><span style="color:#000000">開箱即用的 Kubernetes 工具</span></li><li><span style="color:#000000">Extended Dev Containers 支持</span></li><li><span style="color:#000000">HTTP 客户端改進</span></li></ul><p style="color:#494949"><span style="color:#000000"><strong>最新的 Kotli</strong><strong>n 版本支持現已隨</strong><strong> IDE 更新一起提供</strong></span></p><p style="color:#494949"><span style="color:#000000">從 v2023.3 開始，對新 Kotlin 版本的支持與 IntelliJ IDEA 和 Android Studio 更新一起提供，這意味着用户不再需要從 JetBrains Marketplace 更新 Kotlin 插件。在每個主要 IDE 版本中，都可以有即將推出的 Kotlin Beta 和穩定版本的內置支持。</span></p><p style="color:#494949"><span style="color:#000000"><strong>Java Gradle 項目中的 Kotlin 自動配置</strong></span></p><p style="color:#494949"><span style="color:#000000">如果將 Kotlin 文件添加到 Java 模塊，IntelliJ IDEA 現在可以通過更改構建腳本自動將所有需要的 Kotlin 依賴項添加到模塊。你可以輕鬆查看這些更改並撤消它們。&nbsp;</span></p><p style="color:#494949"><span style="color:#000000">目前，滿足特定標準的 Gradle 項目可以進行自動配置，其中一些標準包括：</span></p><ul><li><span style="color:#000000">Gradle 版本必須與該項目可用的 Kotlin 版本兼容。&nbsp;</span></li><li><span style="color:#000000">模塊不得包含「buildSrc」文件夾。</span></li><li><span style="color:#000000">Gradle sync 不得正在進行，中。&nbsp;</span></li></ul><p style="color:#494949"><span style="color:#000000">如果無法自動配置，IDE 將建議用户可以像以前一樣手動配置 Kotlin。<span style="display:none">&nbsp;</span></span></p><p style="color:#494949"><span style="color:#000000"><strong>插件更新</strong></span></p><p style="color:#494949"><span style="color:#000000">在 IntelliJ IDEA 2023.3 及更高版本中，對插件分發進行了更改。Android、Ant 和 GlassFish 插件現已通過 JetBrains Marketplace 提供。這也適用於 IntelliJ IDEA 社區版的 XPathView 插件。</span></p><p><span style="color:#000000">詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F11%2Fintellij-idea-2023-3-beta%2F" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 06:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265876/intellij-idea-2023-3-beta</guid>
            <link>https://www.oschina.net/news/265876/intellij-idea-2023-3-beta</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mozilla 發佈首款大模型 Fakespot Chat]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mozilla 今年初收購了一家利用 AI 和機器學習識別虛假和欺騙性產品評論的初創公司 Fakespot。現在它推出了自己的首款大模型 Fakespot Chat。</p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.fakespot.com%2Factivate-fakespot-chat" target="_blank">https://www.fakespot.com/activate-fakespot-chat</a></u></em></p><p>根據介紹，Fakespot Chat 會在消費者在線購物時為其提供幫助，評估商品，回答有關產品的問題，甚至提出對產品研究有用的問題。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0c8ba2eab76180ea01cd2354846b379bc1a.png" referrerpolicy="no-referrer"></p><p>Fakespot 一直在利用 AI，包括生成式 AI 技術，來提高而不是降低網上購物過程的可信度。例如，它在去年推出了一項名為"優點和缺點"的人工智能生成功能，通過自己編寫產品的優點和缺點總結，取代了閲讀評論的需要。公司表示，該功能是在數十億個數據點的基礎上訓練出來的，模型本身使用了五種不同的模型。</p><p>本週，Fakespot Chat 開始測試，購物者可以向它詢問正在考慮的產品，就像在現實世界中的實體店購物時向銷售人員尋求幫助一樣。該技術利用 AI 和機器學習對產品評論進行排序，分辨真偽，回答用户的問題。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3195b13d6b959f1bddbd173f9fb8e7c06c6.png" referrerpolicy="no-referrer"></p><p>Mozilla 表示，聊天會話中的信息會被保存下來，這是為了改善體驗，用户可在無需創建賬户或泄露個人信息的前提下使用這項服務。</p><p>Mozilla 也承認，這個 AI 聊天機器人不一定總能做出正確決策，因此它邀請用户提交反饋意見，如果他們認為該模型可以改進的話。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 03:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266008/fakespot-chat-mozillas-first-llm</guid>
            <link>https://www.oschina.net/news/266008/fakespot-chat-mozillas-first-llm</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FFmpeg 6.1]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>FFmpeg 6.1 <u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fffmpeg.org%2Findex.html%23pr6.1" target="_blank">已正式發佈</a></u>，代號 "Heaviside"。</p><p>下載地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fffmpeg.org%2Fdownload.html%23release_6.1" target="_blank">https://ffmpeg.org/download.html#release_6.1</a></u></em></p><p><img src="https://oscimg.oschina.net/oscnet/up-9e1c78a5b6a3b63b266be5b2a83bc994beb.png" referrerpolicy="no-referrer"></p><p>作為重要版本更新，FFmpeg 6.1 包含以下值得關注的新特性：</p><ul><li>新增 Playdate 視頻解碼器和分離器</li><li>為 Windows 版本 libva-win32 擴展 VAAPI 支持</li><li>ffmpeg CLI 新增選項：-readrate_initial_burst</li><li>setpts 和 asetpts 過濾器支持命令</li><li>Vulkan 支持解碼 hwaccel，支持 H264, HEVC and AV1</li><li><strong>新增過濾器</strong><ul><li>afireqsrc audio source filter</li><li>arls filter</li><li>zoneplate video source filter</li><li>color_vulkan filter</li><li>bwdif_vulkan filter</li><li>nlmeans_vulkan filter</li><li>xfade_vulkan filter</li><li>bwdif_cuda filter</li><li>apsnr and asisdr audio filters</li><li>Bitstream filter for editing metadata in VVC streams</li><li>Bitstream filter for converting VVC from MP4 to Annex B</li><li>scale_vt filter for videotoolbox</li><li>transpose_vt filter for videotoolbox</li></ul></li><li><strong>新增解碼器</strong><ul><li>libaribcaption decoder</li><li>RivaTuner video decoder</li><li>vMix video decoder</li><li>OSQ demuxer and decoder</li></ul></li><li><strong>新增編碼器</strong><ul><li>Microsoft RLE video encoder</li><li>VAAPI AV1 encoder</li></ul></li><li>新增解析器、muxer &amp; demuxer 
  <ul><li>Essential Video Coding parser, muxer and demuxer</li><li>Essential Video Coding frame merge bsf</li><li>Raw AC-4 muxer and demuxer</li><li>Raw VVC bitstream parser, muxer and demuxer</li><li>CRI USM demuxer</li></ul></li><li><strong>其他改進</strong><ul><li>support for the P_SKIP hinting to speed up libx264 encoding</li><li>Support HEVC,VP9,AV1 codec in enhanced flv format</li><li>Support HEVC,VP9,AV1 codec fourcclist in enhanced rtmp protocol</li><li>ffmpeg CLI '-top' option deprecated in favor of the setfield filter</li><li>ffprobe XML output schema changed to account for multiple variable-fields elements within the same parent element</li><li>ffprobe -output_format option added as an alias of -of</li></ul></li></ul><p>發佈公告寫道，這個版本已經逾期至少半年了。由於版本庫中的活動不斷，不得不推遲發佈。最近終於能夠在合併 7.0 中的一些大改動之前，對該版本進行分支。</p><p>在內部，開發團隊也進行了一些修改。用於編解碼器和濾波器的 FFT、MDCT、DCT 和 DST 實現已完全替換為速度更快的 libavutil/tx。</p><p>這使得編譯後二進制文件的體積大小減少，這在小規模構建中會很明顯。 在整個視頻解碼器中，每幀的分配總量大幅減少，從而降低了開銷。</p><p>此外還對 DSP 代碼的許多部分進行了 RISC-V 優化，主要是對大型解碼器進行了合併。開發團隊稱他們努力提高每個數據包的時間戳和幀持續時間的正確性，從而提升變幀率視頻的準確性。</p><p>下一個更新將是 7.0 大版本，計劃於二月發佈。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 02:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266003/ffmpeg-6-1-released</guid>
            <link>https://www.oschina.net/news/266003/ffmpeg-6-1-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 中國版——「團結引擎」全面支持 OpenHarmony]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Unity 中國<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPtRYKloNoBFpicvPGiDFgw" target="_blank">宣佈</a></u>與開放原子開源基金會達成平台級戰略合作。</p><p><strong>據稱團結引擎已全面支持 OpenHarmony 操作系統</strong>，同時將為 OpenHarmony 生態快速帶來更多高品質遊戲與實時 3D 內容。Unity 稱現在用户可以「在 OpenHarmony 框架中感受到與安卓和 iOS 同樣絲滑的遊戲體驗」。</p><p>目前，<strong>團結引擎已全面適配 OpenHarmony 各項系統能力</strong>，包括但不限於 Ability 框架適配、XComponent 能力適配、ArkUI 適配等等。同時，開發者可以通過團結引擎完成底層渲染架構、文件系統、觸控系統和音視頻等系統能力相適配。</p><p>據介紹，Unity 中國引擎研發團隊將引擎原來的各項能力在 OpenHarmony 上進行實現，從而兼容原來所有的接口及邏輯實現。現在，開發者可以直接通過 Editor 導出 Ability Project 用於 Deveco Studio 的開發，也能直接打包出安裝包，加速項目的適配開發。</p><p>出包環節，團結引擎延用了 Unity 2022 LTS 版本的高效打包流程，確保開發者不會在陌生的環境下進行打包操作，降低學習成本。通過在團結引擎中新增的 "OpenHarmony 平台"&nbsp;的 BuildTarget，開發者能夠<strong>一鍵切換平台和構建出包</strong>，可使得項目組在不增加額外人手和時間成本的基礎上，快速完成出包、審核、上架的流程。</p><hr><p>團結引擎是 Unity 中國研發團隊推出的 Unity 中國版引擎，它以<strong>Unity 2022 LTS</strong>為研發基礎。上個月，<u><a href="https://www.oschina.net/news/261999">「團結引擎」開啓內測</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 10:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265946</guid>
            <link>https://www.oschina.net/news/265946</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Delphi 12 & C++ Builder 12、RAD Studio 12 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Embarcadero&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.embarcadero.com%2Fannouncing-the-availability-of-rad-studio-12-athens%2F" target="_blank">宣佈推出</a>&nbsp;RAD Studio 12 Athens、Delphi 12 和 C++Builder 12。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a4795d0d48233907f1b605736e791483854.png" referrerpolicy="no-referrer"></p><p><strong>主要變化</strong></p><ul><li><p>將 Visual Assist 集成到 C++Builder 的 IDE，為 C++ 語言提供一流的代碼補全、代碼導航和重命名重構</p></li><li><p>針對 Win64 的基於 Clang 的 C++ 編譯器的顯着更新預覽，支持最新的 C++ 標準語言功能，並提供與外部庫和 C++ 代碼的更好集成</p></li><li><p>Delphi 添加新語法，包括多行字符串文字，以滿足一些相關的客户端請求</p></li><li><p>面向 FireMonkey 的 Skia 支持，通過為 FireMonkey 採用新基礎，在所有目標平台上渲染圖形和 UI 控件時提供更高的性能和質量<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-b9cf21f2bee48c1513779da33754ba3506b.png" referrerpolicy="no-referrer"></p></li><li><p>為 VCL 重新設計的 MDI 和新的選項卡式 UI 架構，可幫助現有應用程序實現現代化視覺風格，用最少的改動為現有程序添加對 HighDPI 和樣式的支持</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e33699c1811a0468b2671c69abedc285d33.png" referrerpolicy="no-referrer"></p></li><li><p>新的 FireDAC 示例查詢 (QBE) 組件可簡化數據過濾，新的 Delphi JSON 嚮導可將流行 JSON 格式的數據映射添加到對象，就像使用 XML 那樣<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-656591200601e9a491ae85969df8b0a6755.png" referrerpolicy="no-referrer"></p></li><li><p>改進 IDE 的生產力和質量，使 RAD Studio 能夠更輕鬆、更快速地執行日常任務<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-1a7c54b8ab0163f5c28e4b9df1734487caf.png" referrerpolicy="no-referrer"></p></li><li><p>支持 RAD Server 中的智能 ID，讓託管的 REST API 更加強大和靈活，同時保持 RAD Server 的易用性</p></li></ul><p>詳情查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.embarcadero.com%2Fannouncing-the-availability-of-rad-studio-12-athens%2F" target="_blank">發佈公告</a>。</p><hr><p>延伸閲讀：<em><u><a href="https://www.oschina.net/news/241121/delphi-11-n-cbuilder-11-ce-released" target="news">Delphi 11 和 C++Builder 11 社區版發佈</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 10:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265941/rad-studio-12-athens</guid>
            <link>https://www.oschina.net/news/265941/rad-studio-12-athens</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.0 - 支持 OceanBase Oracle 模式]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>支持 OceanBase Oracle 模式。</li><li>支持設置 MySQL 在線變更參數。</li><li>新增項目數據庫查看者的角色。</li></ul><h2>🎄 改進</h2><ul><li>支持在項目中直接選擇所有用户併為之添加角色。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-5201834160b7cab041ef604993e52243517.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>調整了項目頁面的佈局。</li><li>在 SQL 編輯器中通過懸浮面板展示表和列的詳情。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-d67bf21c4131f374bed4fd7aefcd4cedef9.png" alt="file" referrerpolicy="no-referrer"></p><h2>🪦 不再支持</h2><ul><li>Bytebase 新版本中將不再提供書籤功能。我們建議您使用瀏覽器的書籤功能作為替代方案。</li></ul><h2>🐞 Bug 修復</h2><p>修復在 Azure DevOps 或 Bitbucket 中重命名文件無法觸發在 Bytebase 中工單創建的問題。</p><h2>🎠 社區</h2><p>感謝 @bds-congnguyen 提交 fix: update bytebase-sql-review.yml for CICD #8984</p><h2>📕 安裝及升級</h2><p>參考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升級指南</a>。如果從之前版本升級，獲取新版本後，重新啓動升級即可。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 09:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10141966</guid>
            <link>https://my.oschina.net/u/6148470/blog/10141966</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stability AI 再融資 5000 萬美元，英特爾領投]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span style="color:#000000">彭博社援引消息人士的話</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-09%2Fstability-ai-gets-intel-backing-in-new-financing%3Fsrnd%3Dtechnology-ai" target="_blank"><span style="color:#2980b9">報道稱</span></a><span style="color:#000000">，AI 初創公司 Stability AI 已獲得了由英特爾領投的新一輪融資。該公司在這筆交易中以可轉換票據的形式籌集了近 5000 萬美元，交易於 10 月份完成。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 是 Stable Diffusion 背後的公司，Stable Diffusion 是一個文本轉圖像模型，是除 OpenAI 之外其他較為流行的生成式 AI 工具之一。</span></p><p style="color:#494949"><span style="color:#000000">彭博社指出，此次現金注入正值 Stability AI 的關鍵時刻，因為該公司最近遇到了一些挑戰。一方面是公司高層出現了一些更替，解僱了包括人力資源主管在內的六名高級員工。</span></p><p style="color:#494949"><span style="color:#000000">另一方面則是董事會代表之間存在一些分歧。Stability AI 的主要投資者 Coatue Management 對其首席執行官 Emad Mostaque 的領導能力有些意見，並考慮增加一名聯合首席執行官或總裁。</span></p><p style="color:#494949"><img height="219" src="https://static.oschina.net/uploads/space/2023/1110/153216_qixm_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#494949"><span style="color:#000000">知情人士透露，Coatue 已於 10 月離開了 Stability AI 董事會。並表示原因在於英特爾對 Stability 的投資，因為 Coatue 持有英特爾的競爭對手 AMD 公司的大量股份。目前 Coatue 公司仍持有 Stability 公司 5000 萬美元的股份。</span></p><p style="color:#494949"><span style="color:#000000">另一位投資者 Lightspeed Venture Partners 的 Gaurav Gupta 最近也辭去了 Stability AI 董事會觀察員的職務，原因是他與管理層在公司發展方向上存在意見分歧。目前，Coatue 和 Lightspeed 的代表都拒絕對此發表評論。</span></p><p style="color:#494949"><span style="color:#000000">此外，Stability AI 還面臨聯合創始人 Cyrus Hodes 的訴訟，他聲稱自己在 Stability AI 達到 10 億美元估值里程碑之前被欺騙以低估值出售了手中的股票。但 Stability AI 對這些説法提出了異議。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 對其未來前景表示樂觀。該公司聲稱，員工流動是初創企業生態系統中的正常現象，並強調其對董事會成員的指導和專業知識的重視。還進一步強調了其顯着的收入增長，稱其在過去一年中增長了十倍，並預測隨着其推出更多產品，到年底收入將進一步擴大。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 發言人在一份聲明中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pymnts.com%2Fartificial-intelligence-2%2F2023%2Freport-stability-ai-secures-50-million-in-financing%2F" target="_blank">表示</a>： 「Stability AI 公司正以強勁、健康的態勢繼續其在生成式 AI 領域的世界領先工作。去年，我們的收入增長了十倍，隨着我們繼續推出新產品，我們的目標是在今年年底前進一步增長。我們是全球唯一一家獨立、開源、多模態（圖像、語言、代碼、三維、音頻）人工智能公司。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265920/stability-ai-intel-50-million</guid>
            <link>https://www.oschina.net/news/265920/stability-ai-intel-50-million</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 開源量化交易框架 AmazingQuant]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-amazingquant" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#amazingquant"></a>AmazingQuant<br></h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fwatchers"><img src="https://img.shields.io/github/watchers/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Watchers&amp;" alt="Github workers" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fstargazers"><img src="https://img.shields.io/github/stars/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Star&amp;" alt="GitHub stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Ffork"><img src="https://img.shields.io/github/forks/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Fork&amp;" alt="GitHub forks" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-1 簡介" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#1%E7%AE%80%E4%BB%8B"></a>1.簡介</h1><p>AmazingaQuant——為交易而生的智能投研 Lab。包含策略模型研究服務、量化數據服務、指標計算服務、績效分析服務四大功能模塊。<br>
1.1 策略研究服務<br>
　　四大策略體系的研究體系<br>
（1）選股體系<br>
　　中低頻組合選股模型、強勢短線模型<br>
（2）風險預警體系<br>
　　事件風險等建立黑白名單模型<br>
（3）擇時體系<br>
　　倉位控制擇時、行業風格輪動<br>
（4）T+0 體系<br>
　  全市場股票分類（活躍型與穩定型），做 T0 模型<br></p><p>1.2 量化數據服務<br>
1.2.1 歷史數據存儲<br>
存儲到服務器的 mongoDB 作為數據服務器，並保存到本地的 HDF5，滿足策略需求。<br>
（1）基礎行情數據<br>
　　tick、1min、5min、日線等週期的股票、指數<br>
（2）基本面數據<br>
　　財務數據<br>
　　股本數據<br>
（3）行情衍生數據<br>
　　龍虎榜數據<br>
　　指數成分股數據<br>
　　行業板塊成分股數據<br>
　　行業指數日線行情數據<br></p><p>1.2.1  實時行情對接<br>
（1）股票、指數的 tick 數據實時全推行情<br>
（2）重採樣為 1min、5min、日線等三個週期數據<br></p><p>1.3 指標計算服務<br>
　　歷史指標計算滿足策略研究，實時指標計算滿足實盤交易<br>
（1）日線、周線、月線、年線週期等低頻指標的歷史數據計算，固定存儲為 HDF5 格式，<br>
（2）分鐘、tick 週期等高頻數據指標計算，歷史數據計算和實時指標計算兩部分<br></p><p>1.4 績效分析服務<br>
　　回測數據格式對接，滿足策略研究的評價；實盤數據格式對接，滿足實盤運行的監控。<br>
1.4.1 淨值數據分析<br>
（1）年化波動率,日收益波動率,月收益波動率，該值表明因子對收益率貢獻的波動程度<br>
（2）日收益率分佈,月收益率分佈,正收益天數,負收益天數,日勝率,月勝率,峯度,偏度<br>
（3）最大回撤<br>
（4）夏普比率,calmar 比率,特雷諾比率,索提諾比率<br>
（5）beta,跟蹤誤差,信息比率<br>
1.4.2 交易數據分析<br>
（1）也針對回測的：滑點損失<br>
（2）總交易次數、日均交易次數、勝率（個股從建倉到完全平倉）、平均持倉週期、換手率、交易費用、總交易金額<br>
（3）分每隻股票統計，交易數量、金額、時間<br>
1.4.3 持倉數據分析<br>
（1）持倉行業市值、佔比<br>
（2）持倉估值風格分析<br>
（3）持倉綜合風格分析<br>
1.4.4 績效歸因<br>
（1）多因子歸因<br>
　　投資收益分為每個風格（行業）因子收益、特殊收益、日內調倉收益 <br>
（2）brinson 歸因<br>
　　投資收益分為基準收益和超額收益，其中超額收益分為：資產配置收益、個股選擇收益和交互收益<br>
（3）收益分解<br>
　　市場中性策略,基本分解公式為：總收益=交易收益+選股收益+擇時收益+基差收益+交易成本<br>
　　純股票策略,基本分解公式為：總收益=交易收益+選股收益+擇時收益+基準收益+交易成本<br></p><p>下圖是總體框架架構。<br><img src="https://github.com/zhanggao2013/AmazingQuant/blob/master/documents/framework_architecture.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li>data_center
<ul><li>to_mongoDB 存放行情、財務等各種數據到 MongoDB 的存儲模塊</li><li>get_data   策略中從數據庫中取數據的接口模塊</li></ul></li><li>trade_center
<ul><li>mossion_engine   包含下單任務（event_order）和風控（event_risk_management）兩部分的 engine，分別完成下單前的檢查和風控</li><li>broker_engine    分為回測時的 simulate 的 broker（主要是 event_deal）撮合成交和連接實盤交易 CTP、xSpeed 等接口兩部分</li></ul></li><li>strategy_center
<ul><li>bar_engine       在回測或者交易模式下，用<code>逐 K 線</code>的方式執行每一根 bar 的交易邏輯，可在日線、分鐘線、分筆下運行</li></ul></li><li>analysis_center
<ul><li>analysis_engine  對回測形成的交易記錄進行分析和可視化，淨值、年化收益、alpha、beta、回撤等指標，brison、Fama 等經典模型的實現</li></ul></li></ul><h1><a id="user-content-2 安裝配置" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE"></a>2.安裝配置</h1><ul><li>MongoDB 3.4 <br>
建議使用 shard，<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fblob%2Fmaster%2Fdocuments%2FMongoDB_config.md">配置啓動項示例</a></li><li>pymongo <br>
python 調用 MongoDB</li><li>talib <br>
技術指標計算庫</li><li>anaconda <br>
python 3.5 的版本，如果大於 3.5 的版本，ctp 的接口暫時不能用，因為編譯問題，後續可以解決</li><li>Linux Ubuntu <br>
開發環境是 ubuntu，當然也可以在 windows 下用，但是數據庫的配置和 ctp 等交易接口需要重新做</li><li>安裝 AmazingQuant
pip install AmazingQuant  直接安裝</li></ul><h1><a id="user-content-3 策略編寫" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#3%E7%AD%96%E7%95%A5%E7%BC%96%E5%86%99"></a>3.策略編寫</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">#-*- coding: utf-8 -*-</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="c1"># ------------------------------</span></span><span id="LC4" class="line"><span class="c1"># @Time    : 2019/11/14</span></span><span id="LC5" class="line"><span class="c1"># @Author  : gao</span></span><span id="LC6" class="line"><span class="c1"># @File    : example_strategy.py.py</span></span><span id="LC7" class="line"><span class="c1"># @Project : AmazingQuant</span></span><span id="LC8" class="line"><span class="c1"># ------------------------------</span></span><span id="LC9" class="line"><span class="kn">import</span><span class="nn">time</span></span><span id="LC10" class="line"></span><span id="LC11" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.utils.performance_test</span><span class="kn">import</span><span class="n">Timer</span></span><span id="LC12" class="line"><span class="c1"># import strategy 基類</span></span><span id="LC13" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.strategy_center.strategy</span><span class="kn">import</span><span class="o">*</span></span><span id="LC14" class="line"></span><span id="LC15" class="line"><span class="c1"># 取各種數據</span></span><span id="LC16" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.data_center.api_data.get_index_member</span><span class="kn">import</span><span class="n">GetIndexMember</span></span><span id="LC17" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.indicator_center.save_get_indicator</span><span class="kn">import</span><span class="n">SaveGetIndicator</span></span><span id="LC18" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.utils.logger</span><span class="kn">import</span><span class="n">Logger</span></span><span id="LC19" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.environment</span><span class="kn">import</span><span class="n">Environment</span></span><span id="LC20" class="line"></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c1"># 繼承 strategy 基類</span></span><span id="LC23" class="line"><span class="k">class</span><span class="nc">MaStrategy</span><span class="p">(</span><span class="n">StrategyBase</span><span class="p">):</span></span><span id="LC24" class="line"><span class="k">def</span><span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">strategy_name</span><span class="o">=</span><span class="s">'ma_strategy'</span><span class="p">):</span></span><span id="LC25" class="line"><span class="s">"""</span></span><span id="LC26" class="line"><span class="s">        用户定義類變量</span></span><span id="LC27" class="line"><span class="s">        取本地數據</span></span><span id="LC28" class="line"><span class="s">        :param strategy_name:</span></span><span id="LC29" class="line"><span class="s">        """</span></span><span id="LC30" class="line"><span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">strategy_name</span><span class="o">=</span><span class="n">strategy_name</span><span class="p">)</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1"># 取指數成分股實例</span></span><span id="LC33" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="o">=</span><span class="n">GetIndexMember</span><span class="p">()</span></span><span id="LC34" class="line"><span class="c1"># 取 K 線數據實例</span></span><span id="LC35" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">data_class</span><span class="o">=</span><span class="n">GetKlineData</span><span class="p">()</span></span><span id="LC36" class="line"><span class="c1"># 取指標實例</span></span><span id="LC37" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="o">=</span><span class="n">SaveGetIndicator</span><span class="p">()</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="c1"># 取指標數據</span></span><span id="LC40" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">ma5</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">get_indicator</span><span class="p">(</span><span class="s">'ma5'</span><span class="p">)</span></span><span id="LC41" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">ma10</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">get_indicator</span><span class="p">(</span><span class="s">'ma10'</span><span class="p">)</span></span><span id="LC42" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span></span><span id="LC43" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="o">=</span><span class="n">Logger</span><span class="p">(</span><span class="n">strategy_name</span><span class="p">)</span></span><span id="LC44" class="line"></span><span id="LC45" class="line"><span class="k">def</span><span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span></span><span id="LC46" class="line"><span class="c1"># 設置運行模式，回測或者交易</span></span><span id="LC47" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">run_mode</span><span class="o">=</span><span class="n">RunMode</span><span class="p">.</span><span class="n">BACKTESTING</span><span class="p">.</span><span class="n">value</span></span><span id="LC48" class="line"><span class="c1"># 設置回測資金賬號</span></span><span id="LC49" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="o">=</span><span class="p">[</span><span class="s">'test0'</span><span class="p">]</span></span><span id="LC50" class="line"><span class="c1"># 設置回測資金賬號資金量</span></span><span id="LC51" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">capital</span><span class="o">=</span><span class="p">{</span><span class="s">'test0'</span><span class="p">:</span><span class="mi">2000000</span><span class="p">}</span></span><span id="LC52" class="line"><span class="c1"># 設置回測基準</span></span><span id="LC53" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">benchmark</span><span class="o">=</span><span class="s">'000300.SH'</span></span><span id="LC54" class="line"><span class="c1"># 設置復權方式</span></span><span id="LC55" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">rights_adjustment</span><span class="o">=</span><span class="n">RightsAdjustment</span><span class="p">.</span><span class="n">FROWARD</span><span class="p">.</span><span class="n">value</span></span><span id="LC56" class="line"><span class="c1"># 設置回測起止時間</span></span><span id="LC57" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">start</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span></span><span id="LC58" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">end</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span></span><span id="LC59" class="line"><span class="c1"># 設置運行週期</span></span><span id="LC60" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">period</span><span class="o">=</span><span class="s">'daily'</span></span><span id="LC61" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_all_index_members</span><span class="p">()</span></span><span id="LC62" class="line"><span class="n">_</span><span class="p">,</span><span class="n">index_members_all</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_index_members</span><span class="p">(</span><span class="s">'000300.SH'</span><span class="p">)</span></span><span id="LC63" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">universe</span><span class="o">=</span><span class="n">index_members_all</span></span><span id="LC64" class="line"></span><span id="LC65" class="line"><span class="c1"># 設置在運行前是否緩存日線，分鐘線等各個週期數據</span></span><span id="LC66" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">daily_data_cache</span><span class="o">=</span><span class="bp">True</span></span><span id="LC67" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">universe</span><span class="p">)</span></span><span id="LC68" class="line"></span><span id="LC69" class="line"><span class="c1"># 回測滑點設置，按固定值 0.01,20-0.01 = 19.99;百分比 0.01,20*(1-0.01) = 19.98;平倉時用'+'</span></span><span id="LC70" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_slippage</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">slippage_type</span><span class="o">=</span><span class="n">SlippageType</span><span class="p">.</span><span class="n">SLIPPAGE_FIX</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="c1"># 回測股票手續費和印花税，賣出印花税，千分之一；開倉手續費，萬分之三；平倉手續費，萬分之三，最低手續費，５元</span></span><span id="LC73" class="line"><span class="c1"># 滬市，賣出有萬分之二的過户費，加入到賣出手續費</span></span><span id="LC74" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_commission</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK_SH</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">tax</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span><span class="n">open_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC75" class="line"><span class="n">close_commission</span><span class="o">=</span><span class="mf">0.00032</span><span class="p">,</span></span><span id="LC76" class="line"><span class="n">close_today_commission</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min_commission</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span><span id="LC77" class="line"><span class="c1"># 深市不加過户費</span></span><span id="LC78" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_commission</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK_SZ</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">tax</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span><span class="n">open_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC79" class="line"><span class="n">close_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC80" class="line"><span class="n">close_today_commission</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min_commission</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span><span id="LC81" class="line"></span><span id="LC82" class="line"><span class="k">def</span><span class="nf">handle_bar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">event</span><span class="p">):</span></span><span id="LC83" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'self.time_tag'</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">,</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">(),</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">)</span></span><span id="LC84" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">bar_position_data_list</span><span class="p">))</span></span><span id="LC85" class="line"><span class="c1"># 取當前 bar 的持倉情況</span></span><span id="LC86" class="line"><span class="k">with</span><span class="n">Timer</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span></span><span id="LC87" class="line"><span class="n">available_position_dict</span><span class="o">=</span><span class="p">{}</span></span><span id="LC88" class="line"><span class="k">for</span><span class="n">position</span><span class="ow">in</span><span class="n">Environment</span><span class="p">.</span><span class="n">bar_position_data_list</span><span class="p">:</span></span><span id="LC89" class="line"><span class="n">available_position_dict</span><span class="p">[</span></span><span id="LC90" class="line"><span class="n">position</span><span class="p">.</span><span class="n">instrument</span><span class="o">+</span><span class="s">'.'</span><span class="o">+</span><span class="n">position</span><span class="p">.</span><span class="n">exchange</span><span class="p">]</span><span class="o">=</span><span class="n">position</span><span class="p">.</span><span class="n">position</span><span class="o">-</span><span class="n">position</span><span class="p">.</span><span class="n">frozen</span></span><span id="LC91" class="line"><span class="n">index_member_list</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_index_member_in_date</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">)</span></span><span id="LC92" class="line"></span><span id="LC93" class="line"><span class="n">close_price_all</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">data_class</span><span class="p">.</span><span class="n">get_market_data</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">daily_data</span><span class="p">,</span><span class="n">stock_code</span><span class="o">=</span><span class="n">index_member_list</span><span class="p">,</span></span><span id="LC94" class="line"><span class="n">field</span><span class="o">=</span><span class="p">[</span><span class="s">'close'</span><span class="p">],</span></span><span id="LC95" class="line"><span class="n">start</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">)</span></span><span id="LC96" class="line"><span class="c1"># 循環遍歷股票池</span></span><span id="LC97" class="line"><span class="k">for</span><span class="n">stock</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC98" class="line"><span class="c1"># 取當前股票的收盤價</span></span><span id="LC99" class="line"><span class="n">close_price</span><span class="o">=</span><span class="n">close_price_all</span><span class="p">[</span><span class="s">'close'</span><span class="p">][</span><span class="n">stock</span><span class="p">]</span></span><span id="LC100" class="line"><span class="k">if</span><span class="n">close_price</span><span class="p">:</span></span><span id="LC101" class="line"><span class="n">ma5</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ma5</span><span class="p">[</span><span class="n">stock</span><span class="p">][</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">]</span></span><span id="LC102" class="line"><span class="n">ma20</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ma10</span><span class="p">[</span><span class="n">stock</span><span class="p">][</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">]</span></span><span id="LC103" class="line"><span class="k">if</span><span class="n">ma5</span><span class="ow">and</span><span class="n">ma20</span><span class="p">:</span></span><span id="LC104" class="line"><span class="c1"># 如果 5 日均線突破 20 日均線，並且沒有持倉，則買入這隻股票 100 股，以收盤價為指定價交易</span></span><span id="LC105" class="line"><span class="k">if</span><span class="n">ma5</span><span class="o">&gt;</span><span class="n">ma20</span><span class="ow">and</span><span class="n">stock</span><span class="ow">not</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span><span class="ow">and</span><span class="n">stock</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC106" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">trade</span><span class="p">.</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC107" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC108" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC109" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'buy'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC110" class="line"><span class="c1"># 如果 20 日均線突破 5 日均線，並且有持倉，則賣出這隻股票 100 股，以收盤價為指定價交易</span></span><span id="LC111" class="line"><span class="k">elif</span><span class="n">ma5</span><span class="o">&lt;</span><span class="n">ma20</span><span class="ow">and</span><span class="n">stock</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span></span><span id="LC112" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">trade</span><span class="p">.</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=-</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC113" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC114" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC115" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'sell'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC116" class="line"><span class="k">for</span><span class="n">stock</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span></span><span id="LC117" class="line"><span class="k">if</span><span class="n">stock</span><span class="ow">not</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC118" class="line"><span class="n">Trade</span><span class="p">(</span><span class="bp">self</span><span class="p">).</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=-</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC119" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC120" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC121" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'sell not in index_member_list'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC122" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC123" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span></span><span id="LC124" class="line"></span><span id="LC125" class="line"></span><span id="LC126" class="line"><span class="k">if</span><span class="n">__name__</span><span class="o">==</span><span class="s">'__main__'</span><span class="p">:</span></span><span id="LC127" class="line"><span class="c1"># 測試運行完整個策略所需時間，滬深 300 動態股票池，一年數據，均線策略,10s 完成,10S 績效分析</span></span><span id="LC128" class="line"><span class="k">with</span><span class="n">Timer</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span></span><span id="LC129" class="line"><span class="c1"># 運行策略，設置是否保存委託，成交，資金，持倉</span></span><span id="LC130" class="line"><span class="n">ma_strategy</span><span class="o">=</span><span class="n">MaStrategy</span><span class="p">()</span></span><span id="LC131" class="line"><span class="n">ma_strategy</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">save_trade_record</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></span><span id="LC132" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-4 聯繫方式" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#4%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F"></a>4.聯繫方式</h1><ul><li>微信號 (轉發我的公眾號文章後，可加入微信羣):：<br>
gao_me150 <br></li><li>微信公眾號：<br>
水善量化説<br><img src="https://github.com/zhanggao2013/AmazingQuant/blob/master/documents/wechat.jpg" alt="" referrerpolicy="no-referrer"></li></ul>]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 08:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/zhanggao2013/AmazingQuant</guid>
            <link>https://gitee.com/zhanggao2013/AmazingQuant</link>
        </item>
        <item>
            <title>
                <![CDATA[Qt for MCUs 2.6 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Qt for MCUs 2.6 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fqt-for-mcus-2.6-released" target="_blank">已正式發佈</a></u>。</p><p><img alt="" height="209" src="https://oscimg.oschina.net/oscnet/up-1d29cb32cd9a03916a5df5f55447b185ac5.png" width="400" referrerpolicy="no-referrer"></p><p><strong>主要變化</strong></p><ul><li>新增適用於 Qt Quick Ultralite 的新 QML API</li><li>全新基準測試功能以性能作為核心</li><li>支持文件系統（技術預覽階段）<br><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-7b08c587742518ad46f54d307a19f79b004.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li><li>GHS MULTI IDE 集成汽車工具<br><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-e4a8e70cbfb8132bdd2875d44b56ff8d0a0.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li><li>支持 AUTOSAR Classic<br><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-d2e6120102dc2cb439a25080c1d3142d307.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li></ul><p>公告寫道，新版本引入代碼生成優化是為了減少生成的 C++ 代碼中的冗餘，進而將大多數應用程序的 .text 部分大小減少 1% 到 8%，從而降低總體 ROM/閃存要求。</p><p>此外，AnimatedSprite 實現進行了一些改進，以查找和優化幀之間的多個獨特區域，從而進一步減少存儲多個幀以顯示啓動序列等複雜動畫所需的閃存佔用空間。</p><p>最後，Qt for MCU 2.7 將於明年 3 月推出，官方稱計劃通過引入新功能和性能提升來繼續改進框架。預計未來版本中的一些令人興奮的功能包括：全功能虛擬鍵盤、靜態全屏 GUI 旋轉、漸變、硬件加速 JPEG、支持自定義圖像解碼器、CMSIS 包等等。</p><p>詳情查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2FQtForMCUs-2.6%2Fqtul-changes.html" target="_blank"><u>Changelog</u></a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 08:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265905/qt-for-mcus-2-6-released</guid>
            <link>https://www.oschina.net/news/265905/qt-for-mcus-2-6-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國電信發佈千億級參數星辰語義大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span><span style="color:#222222">在 2023 數字科技生態大會上，中國</span><span style="color:#222222">國電信發佈千億級參數規模的星辰語義大模型。同時，星辰多模態大模型、星辰系列行業大模型也一併亮相。</span></span></p><p style="color:#494949"><span><span style="color:#222222">根據介紹，星辰語義大模型是中國電信自研大模型的升級，由此前的百萬參數量級升至千億，升級後在抑制幻覺、外推窗口、交互體驗、多輪理解能力上均有所提升。</span></span></p><p style="color:#494949"><span><span style="color:#222222">技術方面，星辰語義擁有超 12 億風格數據、訓練顯存降低 50%、推理提速 4.5 倍；中文意象理解生成能力提升 30%；語義細粒度生成效果提升 25%。在創意提效方面，星辰語義生產時間較此前生產工具減少 92%；設計成本下降 95%。</span></span></p><p style="color:#494949"><span><span style="color:#222222">中國電信方面表示，計劃於今年 12 月開源百億參數大模型；2024 年 4 月開源千億參數大模型，明年 3 月實現平台工具的開放。</span></span></p><p style="color:#494949"><span><span style="color:#222222">此外，中國電信還在會議現場陸續發佈了一連串產品及平台，其中一站式智算服務平台「慧聚」可實現模型開發、任務管理、模型優化、服務部署、模型服務等多項功能；中國電信「天衍」量子計算雲平台則具備指數級加速大模型訓練速率的潛力。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 06:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265881</guid>
            <link>https://www.oschina.net/news/265881</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[諾基亞在開源雲平台 Sylva 成功進行 5G 獨立組網測試]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>諾基亞<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nokia.com%2Fabout-us%2Fnews%2Freleases%2F2023%2F11%2F09%2Fnokia-conducts-successful-tests-of-5g-standalone-core-with-orange-on-sylva-open-source-cloud-stack%2F" target="_blank">發佈新聞稿稱</a></u>，他們與電信運營商 Orange 共同合作，在開源雲平台 Sylva 成功進行了 5G 獨立組網 (5G Standalone Core, 5G SA) 測試。</p><p>文章提到諾基亞 5G SA 核心網絡功能的互操作性測試在法國 Orange 的 Sylva 驗證中心成功完成。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/140712_6l0n_2720166.png" referrerpolicy="no-referrer"></p><p>據介紹，Sylva 的整體目標是提供一個可被廣泛使用的開源雲平台，專為電信和邊緣計算場景而定製，以解決行業的技術挑戰。 Sylva 於 2022 年底在 Linux 歐洲基金會旗下推出，其支持者包括諾基亞和 Orange。</p><p>測試驗證是提供靈活的雲原生解決方案的關鍵一步，該解決方案可實現 5G SA 核心網絡功能的大規模部署。對於 5G 專用無線企業客户，Sylva 旨在提供一種在邊緣設備部署工業 4.0、物聯網和 B2B2X 用例的有效方法。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/142112_gnv5_2720166.png" referrerpolicy="no-referrer"></p><p>諾基亞核心網絡、雲和網絡服務高級副總裁兼總經理 Fran Heeran 表示：「諾基亞完全雲原生的核心網絡產品組合旨在通過開放、靈活的部署選項來支持不斷髮展的電信雲環境，同時大大減少集成度，以及提供先進的自動化能力。由 Orange 主辦的 Sylva 驗證中心成功完成了 5G SA 核心用户平面功能 (User Plane Function) 的互操作性測試，這突顯了我們的承諾和我們正在取得的進步。」</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 06:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265875</guid>
            <link>https://www.oschina.net/news/265875</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GitHub 發佈開源編程字體家族 Monaspace]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GitHub 推出了名為「Monaspace」的開源等寬編程字體家族。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/120711_f6hb_2720166.png" referrerpolicy="no-referrer"></p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmonaspace.githubnext.com%2F" target="_blank">https://monaspace.githubnext.com/</a></u></em></p><blockquote>
 「字體家族」（typeface / font family）和 「單款字體」（font）是不同的概念，雖然通常習慣將兩者都稱作 「字體」，但一個字體家族通常包含多個單款字體，字型之間以字重（粗細）、風格（正斜體）等設置區分開來。
 <br><br> 簡而言之，「字體家族」 是一整套的設計，其中包含若干款 「字體」，即單獨的字體文件。
</blockquote><p>根據介紹，「GitHub Monaspace」作為字體家族，整體可分為<strong>「靜態」和「可變」</strong>兩種類型。</p><ul><li><code>Monaspace _____</code>代表<strong>靜態</strong></li><li><code>Monaspace _____ Var</code>或<code>VF</code>代表<strong>可變</strong></li></ul><p>其中「可變」字體的每個系列都包含一個文件（Neon、Argon 等）。GitHub Monaspace 總共包含 5 種字體，由於它們的屬性相互兼容，因此可以混搭使用。</p><p>官方介紹道，等寬字體通常彼此不兼容。因為每個字體都使用不同的字型度量，所以無法對不同的字體進行混用。不過 GitHub Monaspace 的每款字體都經過精心設計，支持無縫混搭使用和匹配。通過超越顏色和更大膽的權重的調色板，為代碼賦予更多含義，為需要更多結構和層次結構的代碼構建接口。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121225_m9Kc_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121823_4wpr_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1110/123709_02AU_2720166.png" referrerpolicy="no-referrer"></p><p>下面是單獨使用 Xe 字體的效果：</p><p><img height="1228" src="https://static.oschina.net/uploads/space/2023/1110/121353_QrHp_2720166.png" width="1716" referrerpolicy="no-referrer"></p><p>開發者可基於上述 5 種字體任意搭配組合使用，如下：</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121517_ONNu_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265861</guid>
            <link>https://www.oschina.net/news/265861</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[亞馬遜開發基於 Linux 的操作系統，以擺脱 Android 依賴]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Lowpass 記者 Janko Roettgers 從多方消息來源<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lowpass.cc%2Fp%2Famazon-vega-os-fire-tv-android" target="_blank">得知</a>，亞馬遜一直在開發一種新的操作系統 —— 內部代號為「Vega」，以便在 Fire TV、智能顯示器和其他聯網設備上取代 Android 系統。</span></p><p><span style="color:#000000">一直以來，亞馬遜的一些智能家居設備都使用了名為 Fire OS 的 Android 分叉版本。但也正是因為依賴 Android 開源項目來構建 Fire OS，導致該公司操作系統的開發落後於谷歌多年。</span></p><p><span style="color:#000000">而 Vega 並不是一個新的 Android 分叉，也不是基於 AOSP，「是一種基於 Linux 的風格，並採用了一種更加面向網絡的應用模式。應用程序開發人員被告知使用 React Native 作為應用程序框架，這樣他們就可以使用 Javascript 驅動的界面來構建本地應用程序。」</span></p><p><img height="333" src="https://static.oschina.net/uploads/space/2023/1110/120051_g6gS_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">目前，亞馬遜設備操作系統部門已有"數百人"在致力於新操作系統的開發，其中就包括前 Mozilla 工程師和 Javascript 專家 Zibi Braniecki。Branieck 於 2022 年初加入亞馬遜從事 Alexa 工作，然後在 2023 年初過渡到設備操作系統團隊。他當時曾在 LinkedIn 上透露，自己正在「為智能家居、汽車和其他亞馬遜設備產品線開發下一代操作系統」。</span></p><p><span style="color:#000000">Roettgers 指出，Vega 開發進度似乎相當快。該系統已經在 Fire TV 流媒體適配器上進行了測試，且亞馬遜已向部分合作夥伴透露了在不久的將來過渡到新應用框架的計劃。</span></p><p><span style="color:#000000">一位瞭解該公司計劃的消息人士表示，亞馬遜最早可能會在明年開始在部分 Fire TV 設備上搭載 Vega。SDK 也正在準備發佈，以便開發人員在 Vega 上市前將他們的應用程序移植到 Vega 上。</span></p><p><span style="color:#000000">此外，消息稱亞馬遜的<strong>最終目標是在其所有的新設備上擺脱對 Android 的依賴</strong>。Vega 不僅可以在 Fire TV 和智能顯示器上運行，還可以在車載娛樂系統和其他未來的硬件產品上運行。亞馬遜發佈的多份招聘信息顯示，Vega 將成為其汽車業務的關鍵。</span></p><p><span style="color:#000000">Vega 的出現，也幫助亞馬遜避免了與谷歌的進一步衝突。Roettgers 稱，兩家公司長期以來一直為亞馬遜使用 Android 系統的問題爭吵不休，谷歌曾一度向硬件製造商施壓，要求他們不要生產搭載亞馬遜系統的智能電視。直到後來兩家公司達成協議，允許亞馬遜與海信和 TCL 等電視機製造商合作」，但亞馬遜放棄 Android 系統後，應該能更好地掌控自己的命運。「</span></p><p><span style="color:#000000">不過一些業內人士認為，<span style="background-color:#ffffff">競爭壓力可能並不是亞馬遜轉向 Vega 的主要原因。亞馬遜真正關心的是如何在各種廉價設備上吸引數億眼球，然後通過廣告和服務將其貨幣化--而內置定製操作系統可能正是實現這一目標的最佳途徑。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 04:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265858/amazon-vega-linux-based-os</guid>
            <link>https://www.oschina.net/news/265858/amazon-vega-linux-based-os</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心一言用户規模已達 7000 萬]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在前沿數字技術創新與安全論壇和人工智能賦能產業發展論壇上，百度 CTO 王海峯</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FbH6zON1itJDh9bwCAeLfWw" target="_blank"><span style="color:#2980b9">披露</span></a><span style="color:#000000">，文心一言自 8 月 31 日面向全社會開放至今，用户規模現已達到 7000 萬，場景 4300 個，應用 2492 個。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://static.oschina.net/uploads/space/2023/1110/115002_eScQ_4252687.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">王海峯表示，人工智能是新一輪科技革命和產業變革的重要驅動力量，深度學習作為人工智能的核心技術，具有很強的通用性，並具備標準化、自動化和模塊化的工業大生產特徵，而大模型的興起，使得人工智能應用的深度和廣度進一步拓展。人工智能已進入工業大生產階段。</span></p><p><span style="color:#000000">例如，標準化方面，框架和模型聯合優化，多硬件統一適配，應用模式簡潔高效，大幅降低人工智能應用門檻；自動化方面，從訓練、適配，到推理部署，提升人工智能研發全流程效率；模塊化方面，豐富的產業級模型庫，支撐人工智能在廣泛場景的便捷應用。</span></p><p><span style="color:#000000">王海峯認為，人工智能具有多種典型能力，理解、生成、邏輯、記憶是其中的基礎能力，這四項能力越強，越接近通用人工智能，而大語言模型具備了這四項能力，且越來越強，為通用人工智能帶來了曙光。</span></p><p><span style="color:#000000">面對大模型產業化的挑戰，王海峯表示，類似芯片代工廠模式，可以採用「集約化生產，平台化應用」的模式，即具有算法、算力和數據綜合優勢的企業將模型生產的複雜過程封裝起來，通過低門檻、高效率的生產平台，為千行百業提供大模型服務。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 02:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265847</guid>
            <link>https://www.oschina.net/news/265847</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 獲 100 萬歐元投資]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">GNOME 基金會<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffoundation.gnome.org%2F2023%2F11%2F09%2Fgnome-recognized-as-public-interest-infrastructure%2F" target="_blank">宣佈</a></u>收到了來自「<span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund</span>」的 100 萬歐元投資，並表示這筆資金將用於實現平台現代化、改進工具和可訪問性，並支持符合公共利益的功能。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img src="https://static.oschina.net/uploads/space/2023/1110/122408_NeTS_2720166.png" referrerpolicy="no-referrer"></p><p>具體包括：</p><ul><li>改進當前的可訪問性狀態</li><li>設計新的輔助功能堆棧並製作原型</li><li>支持單獨加密 user 主目錄</li><li>實現現代化的秘密存儲</li><li>擴大硬件支持的範圍和質量</li><li>為質量保證和開發者體驗投入資源</li><li>擴展和拓寬 freedesktop API</li><li>整合和改進平台組件</li></ul><p><span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund 是</span>德國政府資助的一項計劃，由 Adriana Groh 和 Fiona Krakenbürg 運營，他們在國家和國際層面擁有「多年推廣開源技術的經驗」。目標是支持「開源數字基礎設施的開發、改進和維護」，這與 GNOME 項目的協同作用是顯而易見的。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/122533_HxD1_2720166.png" referrerpolicy="no-referrer"></p><p>他們在官方網站寫道：「.....開源生態雖然非常成功，但也越來越脆弱。因為使用開源軟件的人永遠比為該軟件做出貢獻的人多。現在是投資數字共享、志願者社區和開源來建設我們希望看到的數字世界的時候了。」</p><p><span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund 投資過的項目</span>包括 curl、Fortran、WireGuard、OpenSSH、Yocto，以及與 OpenJS 基金會合作「改進 Javascript 生態基礎設施和安全性」。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 02:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265839/gnome-sovereign-tech-fund</guid>
            <link>https://www.oschina.net/news/265839/gnome-sovereign-tech-fund</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[正在被代碼折磨到深夜的你，何不請 AI 幫幫你]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>就在生成式 AI 工具規模化應用仍被質疑和觀望的時候，由其生成的內容、視覺、代碼程序已經高速湧入大眾視野。AI 技術一日千里，擁抱 AI 開發工具或將成為向未來工程師的進化的必經之路。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/204756_bv5c_2720166.gif" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="text-align:center"><strong>「半天時間就能梳理 20000 行代碼」</strong></p><p>大星是某電商業務的後端核心研發，入行 3 年，成長很快，已經是項目 owner 獨當一面。但是大星也自有煩惱，電商促銷活動頻繁，且因為需求方複雜，經常需要處理突發狀況，還有一個「重災區」就是頻繁修復歷史技術債，不斷打補丁，使得系統的可維護性越來越差，重構迫在眉睫。</p><p>今年提前兩個月，雙十一大促進入籌備期。大星發現，如果不盡快重構系統，不僅很難繼續補丁式的開發新活動，甚至穩定性也存在風險。但是重構系統又與新的開發工作存在矛盾，人力有限，極容易顧此失彼。這時，大星想到了近期在試用的百度 Comate 研發插件，在理解老代碼、生成註釋方面都有不錯的表現，於是大星和小夥伴，迅速梳理了遺留的老代碼，制定了新優惠邏輯的實現融合方案，快速融合了新舊優惠邏輯，2 名研發只用了半天時間完成了 20000 多行代碼的梳理。</p><p>後來，大星多次分享了這次經歷：「這不僅等於增派了研發人力，更重要的是百度 Comate 理解更準確，註釋生成更規範。這次成功救場，啓發我作為工程師，更應該超前使用新工具，這樣才能跑得更快。」</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/204929_EoB7_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>「不被語言所困，我就是研發 E 人！」</strong></p><p>去年畢業的小韓，作為優秀校招生入職大廠，工作一年有餘，由於好學愛折騰，已經接了不少項目。最近，小韓接手了一個新項目，該項目的實現語言是 Go，但是小韓不太擅長，另外，由於對項目的已有代碼不熟悉，讓他接手項目和快速修改其中的內容有了不少阻礙。</p><p>他想到平時使用的百度 Comate，利用其代碼解釋和使用其它語言實現的能力，快速理解了項目已有的代碼，高質量實現了快速接手任務，得到了團隊內其他成員的一致好評。</p><p>「我屬於程序員 E 人，平時喜歡多交流，百度 Comate 就是小夥伴推薦的，我發現，面對短板，找到方法其實就能快速彎道超車，這對研發新人很重要。」小韓直言不諱。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205015_NLab_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>「用好工具，重組生產要素，提升研發生產力」</strong></p><p>作為研發團隊管理者，大剛最近痛失兩名 QA，新的 QA 遲遲招不到，團隊的 bug 數直線上升，質量危機迫在眉睫，將近年底，眼看質量指標達成就要灰飛煙滅。多年的經驗告訴大剛要沉下心來，仔細分析找到解法，在角色、人力、環節、工時、質量幾個維度上設計出最優解。</p><p>通過分析，大剛逐步梳理出了解法：既然人力缺失，是否儘可能利用自動化能力來減少人工的投入，如在每次迴歸測試中釋放 QA 的人力。再推導一步：如果對現有代碼批量生成單元測試，對於緩解 QA 人力緊缺也將有非常大的幫助。</p><p>最後，大剛決定使用百度 Comate 插件來解決這些問題。大剛和團隊研發成員一起，針對遺留代碼和新增的代碼，使用百度 Comate 的單測生成能力，快速的生成了滿足業務要求的單元測試代碼，通過自動化的方式實現迴歸驗證，保證代碼在變更後的運行結果符合預期情況，將測試環節左移，更早發現問題，減少後續環節的人力投入。</p><p>大剛團隊的案例，是通過百度 Comate 生成了主要流程的單元測試用例，雖然在研發過程中看上去對單個功能的開發時間加長了，但是方案保證了核心流程的正確性，提高驗證效率，最大化的緩解了人員緊缺的情況。</p><p>後來大剛在覆盤中，這樣總結：「研發是一個系統性工程，不僅有人人協同，還有人機協同，用好工具提升人機協同能力，重組生產要素，用技術的力量提升研發生產力。」</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205101_OWD9_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205125_R8fr_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><h3 style="text-align:center"><strong>⭐ 百度 Comate SaaS 有哪些優勢？</strong></h3><p style="color:#000000; text-align:left"><span>依託文心大模型和飛槳，百度 Comate 具備多項卓越能力。例如，在和用户交互的過程中，需要準確理解用户的意圖，以及根據用户的意圖做出合理的解答。藉助文心大模型對自然語言、代碼的理解和</span><span style="color:#1c1d1f">生成</span><span>的能力，百度 Comate 在人與模型交互、代碼內容的理解、知識點輸出方面，都達到了領先水準，能夠回答更加準確、服務更多類型的研發需求。再比如，在代碼續寫的場景中，需要模型能夠跟得上用户的思路，即代碼還沒寫完，就給用户正確的提示，這就需要更快的響應速度，基於飛槳的推理框架，可以讓模型在推理時響應速度更快，用户體驗更好。</span></p><p style="color:#000000; text-align:left"><span>在具體性能表現上，百度 Comate SaaS 支持單行推薦、多行推薦、多條推薦、代碼知識的問答、代碼生成、註釋生成、註釋文檔生成、代碼解釋、生成行間註釋、函數拆分、優化和重構等一系列編碼相關的能力，在編程現場實現幫你想、幫你寫、幫你改代碼的效果。</span></p><p style="color:#000000; text-align:left"><span>此外，經過測試，百度 Comate 在易用性、速度、安全性、使用體驗上具有明顯優勢。功能完備，開箱即用，後續支持私域數據索引，推理結果更精準。在使用體驗上，支持全中文交互，交互速度更快，體驗更好；領先的安全機制保證代碼數據的安全，同時成本和部署方式上也更靈活、更具高性價比。</span></p><h3 style="text-align:center"><strong>🌈 限時福利！</strong></h3><p><span style="color:#2980b9"><strong>福利一：限時免費試用</strong></span>（活動時間：即日起- 11 月 20 日）</p><ul><li><p>掃描或長按下圖二維碼，即裝即用，<span style="color:#c0392b"><strong>限時領取免費試用 1 個月！</strong></span></p></li><li><p>邀請其他人註冊，<span style="color:#c0392b"><strong>每分享 1 人註冊成功，即可獲得+1 個月免費試用期，總計最高獲得 6 個月免費試用</strong>。</span></p></li></ul><p><span style="color:#2980b9"><strong>福利二：限時特價</strong></span>（活動時間：即日起- 11 月 20 日）</p><p style="text-align:center"><img height="557" src="https://static.oschina.net/uploads/space/2023/1110/144509_QoI6_2720166.png" width="1268" referrerpolicy="no-referrer"></p><p style="text-align:center">福利直達鏈接：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.baidu.com%2Fcampaign%2Fcomate%2Findex.html" target="_blank">https://cloud.baidu.com/campaign/comate/index.html</a></u></p><p style="text-align:center">&nbsp;</p><h4 style="text-align:center"><span style="color:#c0392b"><strong>以上福利掃碼立即獲得！</strong></span></h4><p>下載下面圖片➡️轉發小夥伴，成功推薦其他新用户，即可延長免費試用時間，最高得 6 個月免費試用～</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1110/144648_TUoU_2720166.jpg" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 12:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265796</guid>
            <link>https://www.oschina.net/news/265796</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟計劃為 Windows 10 提供 AI 助手 Copilot]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowscentral.com%2Fsoftware-apps%2Fwindows-10%2Fexclusive-microsoft-plans-to-bring-its-ai-copilot-to-1-billion-windows-10-users" target="_blank">根據 Windows Central 的報道</a></u>，微軟計劃將 Copilot 引入 Windows 10。該公司做出這一決定的主要原因是希望為 Copilot 增加更多用户。</p><p>Windows 11 最近發佈的重大更新 v23H2 包含了 AI 助手 Copilot，它直接添加到了桌面的工具欄上。但 Windows 11 的用户數目前還遠不及上一代的 Windows 10，而微軟致力於讓每個用户都能使用 Copilot，它正計劃向有 10 億用户的 Windows 10 提供 Copilot。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7b7b3e6ab4e1286eb6e8ecd2789040a2a53.png" referrerpolicy="no-referrer"></p><p>Windows 10 的 Copilot 和 Windows 11 基本一致，Copilot 按鈕放置在工具欄上，點擊該按鈕會顯示一個可用於對話的側邊欄。</p><p>報道還指出，Windows 10 和 Windows 11 的 Copilot 體驗將是相同的，包括插件的兼容性。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 09:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265760</guid>
            <link>https://www.oschina.net/news/265760</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[reverse_sql —— MySQL 數據閃回恢復工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">reverse_sql 是一個用於解析和轉換 MySQL 二進制日誌（binlog）的工具。它可以將二進制日誌文件中記錄的數據庫更改操作（如插入、更新、刪除）轉換為反向的 SQL 語句，以便進行數據恢復。其運行模式需二進制日誌設置為 ROW 格式。</p><p style="color:#1f2328; text-align:start">該工具的主要功能和特點包括：</p><p style="color:#1f2328; text-align:start">1、解析二進制日誌：reverse_sql 能夠解析 MySQL 的二進制日誌文件，並還原出其中的 SQL 語句。</p><p style="color:#1f2328; text-align:start">2、生成可讀的 SQL：生成原始 SQL 和反向 SQL。</p><p style="color:#1f2328; text-align:start">3、支持過濾和篩選：可以根據時間範圍、表、DML 操作等條件來過濾出具體的誤操作 SQL 語句。</p><p style="color:#1f2328; text-align:start">4、支持多線程併發解析 binlog 事件。</p><h3 style="text-align:start"><a href="https://github.com/hcymysql/reverse_sql#%E4%BD%BF%E7%94%A8">使用</a></h3><div style="text-align:start"><pre><code>shell&gt; chmod 755 reverse_sql
shell&gt; ./reverse_sql --help
usage: reverse_sql [-h] [-ot ONLY_TABLES [ONLY_TABLES ...]] [-op ONLY_OPERATION] -H MYSQL_HOST
                   -P MYSQL_PORT -u MYSQL_USER -p MYSQL_PASSWD -d MYSQL_DATABASE
                   [-c MYSQL_CHARSET] --binlog-file BINLOG_FILE [--binlog-pos BINLOG_POS]
                   --start-time ST --end-time ET [--max-workers MAX_WORKERS] [--print]

Binlog 數據恢復，生成反向 SQL 語句。

options:
  -h, --help            show this help message and exit
  -ot ONLY_TABLES [ONLY_TABLES ...], --only-tables ONLY_TABLES [ONLY_TABLES ...]
                        設置要恢復的表，多張表用,逗號分隔
  -op ONLY_OPERATION, --only-operation ONLY_OPERATION
                        設置誤操作時的命令（insert/update/delete）
  -H MYSQL_HOST, --mysql-host MYSQL_HOST
                        MySQL 主機名
  -P MYSQL_PORT, --mysql-port MYSQL_PORT
                        MySQL 端口號
  -u MYSQL_USER, --mysql-user MYSQL_USER
                        MySQL 用户名
  -p MYSQL_PASSWD, --mysql-passwd MYSQL_PASSWD
                        MySQL 密碼
  -d MYSQL_DATABASE, --mysql-database MYSQL_DATABASE
                        MySQL 數據庫名
  -c MYSQL_CHARSET, --mysql-charset MYSQL_CHARSET
                        MySQL 字符集，默認 utf8
  --binlog-file BINLOG_FILE
                        Binlog 文件
  --binlog-pos BINLOG_POS
                        Binlog 位置，默認 4
  --start-time ST       起始時間
  --end-time ET         結束時間
  --max-workers MAX_WORKERS
                        線程數，默認 4（併發越高，鎖的開銷就越大，適當調整併發數）
  --print               將解析後的 SQL 輸出到終端
  --replace             將 update 轉換為 replace 操作

Example usage:
    shell&gt; ./reverse_sql -ot table1 -op delete -H 192.168.198.239 -P 3336 -u admin -p hechunyang -d hcy \
            --binlog-file mysql-bin.000124 --start-time "2023-07-06 10:00:00" --end-time "2023-07-06 22:00:00" 
</code></pre><div>&nbsp;</div></div><p><a href="https://github.com/hcymysql/reverse_sql#%E5%BD%93%E5%87%BA%E7%8E%B0%E8%AF%AF%E6%93%8D%E4%BD%9C%E6%97%B6%E5%8F%AA%E9%9C%80%E6%8C%87%E5%AE%9A%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%9A%84%E6%97%B6%E9%97%B4%E6%AE%B5%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84binlog%E6%96%87%E4%BB%B6%E9%80%9A%E5%B8%B8%E4%BD%A0%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87show-master-status%E5%BE%97%E5%88%B0%E5%BD%93%E5%89%8D%E7%9A%84binlog%E6%96%87%E4%BB%B6%E5%90%8D%E4%BB%A5%E5%8F%8A%E5%88%9A%E6%89%8D%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%9A%84%E8%A1%A8%E5%92%8C%E5%85%B7%E4%BD%93%E7%9A%84dml%E5%91%BD%E4%BB%A4%E6%AF%94%E5%A6%82update%E6%88%96%E8%80%85delete">當出現誤操作時，只需指定誤操作的時間段，其對應的 binlog 文件（通常你可以通過 show master status 得到當前的 binlog 文件名）以及剛才誤操作的表，和具體的 DML 命令，比如 update 或者 delete。</a></p><p style="color:#1f2328; text-align:start">工具運行時，首先會進行 MySQL 的環境檢測（if binlog_format != 'ROW' and binlog_row_image != 'FULL'），如果不同時滿足這兩個條件，程序直接退出。</p><p style="color:#1f2328; text-align:start">工具運行後，會在當前目錄下生成一個{db}_{table}_recover.sql 文件，保存着原生 SQL（原生 SQL 會加註釋） 和，反向 SQL，如果想將結果輸出到前台終端，可以指定--print 選項。</p><p style="color:#1f2328; text-align:start">如果你想把 update 操作轉換為 replace，指定--replace 選項即可，同時會在當前目錄下生成一個{db}_{table}_recover_replace.sql 文件。</p><p style="color:#1f2328; text-align:start"><a href="https://user-images.githubusercontent.com/19261879/251670057-b06528a6-fbff-4e00-8adf-0cba19737d66.png" target="_blank"><img alt="圖片" src="https://static.oschina.net/uploads/img/202311/08114920_eBdc.png" referrerpolicy="no-referrer"></a></p><p style="color:#1f2328; text-align:start">MySQL 最小化用户權限：</p><div style="text-align:start"><pre><code>&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO `yourname`@`%`;

&gt; GRANT SELECT ON `test`.* TO `yourname`@`%`;
</code></pre></div><h3 style="text-align:start"><br><a href="https://github.com/hcymysql/reverse_sql#%E6%81%A2%E5%A4%8D">恢復</a></h3><p style="color:#1f2328; text-align:start">在{db}_{table}_recover.sql 文件中找到你剛才誤操作的 DML 語句，然後在 MySQL 數據庫中執行逆向工程後的 SQL 以恢復數據。</p><p style="color:#1f2328; text-align:start">如果{db}_{table}_recover.sql 文件的內容過多，也可以通過 awk 命令進行分割，以便更容易進行排查。</p><div style="text-align:start"><pre><code>shell&gt; awk '/^-- SQL 執行時間/{filename = "output" ++count ".sql"; print &gt; filename; next} {print &gt; filename}' test_t1_recover.sql
</code></pre><div>&nbsp;</div></div><p style="color:#1f2328; text-align:start">不支持 drop 和 truncate 操作，因為這兩個操作屬於物理性刪除，需要通過歷史備份進行恢復。</p><h4 style="text-align:start"><a href="https://github.com/hcymysql/reverse_sql#%E6%B3%A8reverse_sql-%E6%94%AF%E6%8C%81mysql-5780-%E5%92%8C-mariadb%E9%80%82%E7%94%A8%E4%BA%8Ecentos-7%E7%B3%BB%E7%BB%9F">注：reverse_sql 支持 MySQL 5.7/8.0 和 MariaDB，適用於 CentOS 7 系統。</a></h4><hr><h3 style="text-align:start"><a href="https://github.com/hcymysql/reverse_sql#docker%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8">Docker 部署使用</a></h3><p style="color:#1f2328; text-align:start">shell&gt; wget<span>&nbsp;</span><a href="https://github.com/hcymysql/reverse_sql/archive/refs/heads/reverse_sql_progress.zip">https://github.com/hcymysql/reverse_sql/archive/refs/heads/reverse_sql_progress.zip</a></p><p style="color:#1f2328; text-align:start">shell&gt; unzip reverse_sql_progress.zip</p><p style="color:#1f2328; text-align:start">shell&gt; cd reverse_sql_progress</p><p style="color:#1f2328; text-align:start">shell&gt; vim Dockerfile</p><div style="text-align:start"><pre><code>FROM centos:7

COPY reverse_sql /root/
RUN chmod 755 /root/reverse_sql
</code></pre></div><p style="color:#1f2328; text-align:start">shell&gt; docker build -t reverse_sql .</p><p style="color:#1f2328; text-align:start">shell&gt; docker run -itd --name reverse_sql reverse_sql /bin/bash</p><p style="color:#1f2328; text-align:start">shell&gt; docker exec -it reverse_sql /root/reverse_sql --help</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 09:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/reverse-sql</guid>
            <link>https://www.oschina.net/p/reverse-sql</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Android 發熱監控實踐]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一、背景</h1><p>相信移動端高度普及的現在，大家或多或少都會存在電量焦慮，擁有過手機發熱發燙的糟糕體驗。而發熱問題是一個長時間、多場景的指標存在，且涉及到端側應用層、手機 ROM 廠商系統、外界環境等多方面的影響。如何有效衡量發熱場景、定位發熱現場、以及歸因發熱問題成為了端側應用層發熱監控的面前的三座大山。本文通過得物 Android 端側現有的一些監控實踐，不深入功耗計算場景無法自拔，優先聚焦於發熱場景本身，希望能給大家一些參考。</p><h1>二、發熱定義</h1><p>温度是最直觀能反映發熱問題的指標，當前 Android 側，我們以體感温度 37° 以上作為分界線，向上每 3° 作為一個發熱温度區間，區間細分上限温度 49° ，即劃分出 37-40，40-43，43-46，46-49，49+ 五個等級。</p><p>以手機温度、CPU 使用率作為第一、第二要素來判斷用户是否發熱的同時，獲取其他參數來支撐發熱現場情況。</p><p><strong>具體指標如下:</strong></p><p>手機温度 CPU 使用率、GPU 使用率；</p><p>線程堆棧；</p><p>系統服務使用頻次；</p><p>設備前後台、亮滅屏時長；</p><p>電量、充電情況；</p><p>熱緩解發熱等級；</p><p>系統機型、版本；</p><p>....</p><h1>三、指標獲取</h1><h2>温度</h2><ul><li><strong>電池温度</strong></li></ul><p>系統 BatteryManger 已經提供了一系列自帶的接口和粘性廣播獲取電池信息。</p><p>BatteryManager.EXTRA_TEMPERATURE 廣播，獲取的温度值是攝氏度為單位的 10 倍數值。</p><pre><code>//獲取電池温度 BatteryManager.EXTRA_TEMPERATURE，華氏温度需要除以 10
fun getBatteryTempImmediately(context: Context): Float {
    return try {
        val batIntent = getBatteryStickyIntent(context) ?: return 0f
        batIntent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0) / 10F
    } catch (e: Exception) {
        0f
    }
}

private fun getBatteryStickyIntent(context: Context): Intent? {
    return try {
        context.registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))
    } catch (e: Exception) {
        null
    }
}
</code></pre><p>BatteryManager 除支持電池温度的系統廣播外，也包含電量、充電狀態等額外信息的讀取，均定義在其源碼中。</p><pre><code>以下羅列幾個值得關注的:
//BATTERY_PROPERTY_CHARGE_COUNTER 剩餘電池容量，單位為微安時
//BATTERY_PROPERTY_CURRENT_NOW 瞬時電池電流，單位為微安
//BATTERY_PROPERTY_CURRENT_AVERAGE 平均電池電流，單位為微安
//BATTERY_PROPERTY_CAPACITY 剩餘電池容量，顯示為整數百分比
//BATTERY_PROPERTY_ENERGY_COUNTER 剩餘能量，單位為納瓦時
// EXTRA_BATTERY_LOW  是否認為電量低
// EXTRA_HEALTH  電量健康常量的常數
// EXTRA_LEVEL  電量值
// EXTRA_VOLTAGE 電壓
// ACTION_CHARGING   進入充電狀態
// ACTION_DISCHARGING  進入放電狀態
</code></pre><ul><li><strong>傳感器温度</strong></li></ul><p>Android 是基於 Linux 基礎上修改的開源操作系統，同樣的在手機系統 sys/class/thermal/ 目錄下存在以 thermal_zoneX 為代表各傳感器的温度分區，以及 cooling_deviceX 為代表風扇或散熱器等冷卻設備。</p><p>以一加 9 為例，共存在 105 個温度傳感器 or 温度分區，以及 48 個冷卻設備。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b5cf3938151953ff43b21f0a681ce4c9b65.jpg" alt="" referrerpolicy="no-referrer"></p><p>每個温度分區下記錄下具體的參數類型，我們重點關注的是 type 文件和&nbsp;temp 文件，分別記錄了該傳感器設備的名稱，以及當前的傳感器温度。以 thermal_zone29 為例，代表了 CPU 第一核心的，第五處理單元的温度值為 33.2 攝氏度。而對單一設備來説分區對應的名稱是固定的，從而我們可以通過讀取 thermal_zone 文件的方式來記錄當前第一個 type 文件名稱包含&nbsp;CPU&nbsp;的傳感器作為&nbsp;CPU&nbsp;温度。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f2279774ca9ce74031e6897a9db4a7ea9dc.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li><strong>殼温</strong></li></ul><p>Android 10 Google 官方推出了熱緩解框架，通過 HAL2.0 框架監聽底層硬件傳感器（主要為 USB 傳感器、Skin 傳感器）提供 USB、殼温的熱信號等級變更監聽， 系統 PowerManager 源碼提供了對應發熱等級變更的回調和發熱等級的獲取，共 7 個等級，提供給開發者主動或被動獲取。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1110179d6d33bc1f87ed57c99e6797dc931.jpg" alt="" referrerpolicy="no-referrer"></p><pre><code>final PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
powerManager.addThermalStatusListener(new PowerManager.OnThermalStatusChangedListener() {
    @Override
    public void onThermalStatusChanged(int status) {
       //返回對應的熱狀態
    }
});
</code></pre><p>但對於發熱等級來説，殼温無疑是最為能夠反應手機的發熱情況的。可以看到 Android 系統的 API 實際上是提供了 AIDL 接口，可以直接註冊 Thermal 變更事件的監聽，獲取到 Temperature 對象。但由於標識了 Hide API 。常規應用層是無法獲取到的，在考慮好 Android 版本兼容性前提下，通過反射代理 ThermalManagerService 方式進行讀取。</p><p><img src="https://oscimg.oschina.net/oscnet/up-50f7b8b0252859eb185129ba23e59b367cb.jpg" alt="" referrerpolicy="no-referrer"></p><p>但事與願違，國內廠商並沒有完全適配官方熱緩解框架，熱狀態回調時常不夠準確，而是需要單獨接入每個廠商的熱緩解 SDK 去直接獲取到殼温，具體 API 則以各應用廠商的內部接入文檔為準。</p><h2>CPU 使用率</h2><p>CPU 使用率的採集通過讀取解析 Proc stat 文件的方式進行計算。</p><p>在系統 proc/[pid]/stat&nbsp; 和&nbsp; /proc/[pid]/task/[tid]/stat &nbsp;分別記錄了對應進程 ID、進程 ID 下的線程 ID 的 CPU 信息。具體的字段描述在此不進行贅述，詳見：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman5%2Fprocfs.5.html" target="_blank">https://man7.org/linux/man-pages/man5/procfs.5.html</a> 。</p><p><img src="https://oscimg.oschina.net/oscnet/up-49d2512961ec5d6361ee15326af3c2c5885.jpg" alt="" referrerpolicy="no-referrer"></p><p>我們重點關注 14.15 位的信息，分別代表進程/線程的用户態運行的時間和內核態運行的時間。 <img src="https://oscimg.oschina.net/oscnet/up-30cbd118f0cbd9df3ddf67043cc22b050ea.jpg" alt="" referrerpolicy="no-referrer"></p><p>通過解析當前進程的 Stat 文件，以及 Task 目錄下所有線程的 Stat 文件，在兩次採樣週期內 (當前設置為 1s) 的 utime+stime 之和的差值/採樣間隔，即可認為是進線程的 CPU 的使用率。即，進線程 CPU 使用率 = ((utime+stime)-(lastutime+laststime)) / period</p><h2>GPU 使用率</h2><p>高通芯片的設備，我們可以參考&nbsp;/sys/class/kgsl/kgsl-3d0/gpubusy&nbsp;下文件內容，參考高通官網的説明。</p><p>GPU 的使用率 = (下圖) 數值 1 / 數值 2 * 100，經過驗證與 SnapDragonProfiler 信息採集獲取的數值基本一致。 <img src="https://oscimg.oschina.net/oscnet/up-0be7cfc4a8df3b97c0a5600c5512c4e415e.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-9496bbec4a96755eb7d59997c3ac6fd12bc.jpg" alt="" referrerpolicy="no-referrer"></p><p>聯發科芯片的設備，我們可以直接通過讀取&nbsp;<strong>/d/ged/hal/gpu_utilization</strong> 下的使用率數值。</p><p>同樣的通過指定週期 (每秒 1 次) 的採樣間隔，即可獲取到每秒的當前 GPU 使用率。</p><h2>系統服務使用</h2><p>Android 系統服務包括 Warelock、Alarm、Sensor、Wifi、Net、Location、Bluetooth、Camera 等。</p><p>與市面上常規的監控手段差異不大，都是通過系統 Hook ServiceManager 的方式，監聽系統服務的 Binder 通信，匹配對應的調用方法名，做對應中間層監控的回調記錄處理。</p><p>熟悉 Android 開發的同學知道 Android 的 Zygote 進程是 Android 系統啓動時的第一個進程。在 Zygote Fork 進程中會孵化出系統服務相關的進程 SystemServer，在其核心的 RUN 方法中，會註冊啓動大量的系統服務，並通過 ServiceManager 進行管理。 <img src="https://oscimg.oschina.net/oscnet/up-f43504f6a7801c8edffd8a299338158a10c.jpg" alt="" referrerpolicy="no-referrer"></p><p>故我們可以通過反射代理 ServiceManager 的方式，以 LocationManager 為例進行監聽，攔截對應 LocationManager 內對應的方法，記錄我們期望獲取的數據。</p><pre><code>// 獲取 ServiceManager 的 Class 對象
Class&lt;?&gt; serviceManagerClass = Class.forName("android.os.ServiceManager");
// 獲取 getService 方法
Method getServiceMethod = serviceManagerClass.getDeclaredMethod("getService", String.class);
// 通過反射調用 getService 方法獲取原始的 IBinder 對象
IBinder originalBinder = (IBinder) getServiceMethod.invoke(null, "location");
// 創建一個代理對象 Proxy
Class&lt;?&gt; iLocationManagerStubClass = Class.forName("android.location.ILocationManager$Stub");
Method asInterfaceMethod = iLocationManagerStubClass.getDeclaredMethod("asInterface", IBinder.class);
final Object originalLocationManager = asInterfaceMethod.invoke(null, originalBinder);
Object proxyLocationManager = Proxy.newProxyInstance(context.getClassLoader(),
        new Class[]{Class.forName("android.location.ILocationManager")},
        new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                // 在這裏進行方法的攔截和處理
                Log.d("LocationManagerProxy", "Intercepted method: " + method.getName());
                // 執行原始的方法
                return method.invoke(originalLocationManager, args);
            }
        });
// 替換原始的 IBinder 對象
getServiceMethod.invoke(null, "location", proxyLocationManager);
</code></pre><p>同理，我們獲取在固定採樣週期內，各系統服務對應，申請次數、計算間隔時長等進行記錄。</p><p>源碼&nbsp;Power_profile&nbsp;文件中定義了每個系統服務狀態下的電流量定義。</p><p>我們在需要記錄每個元器件在不同狀態的工作時間之後，通過以下計算方式，可以得出元器件的發熱貢獻排行，即：</p><p>元器件，電量消耗（發熱貢獻） &nbsp;~~ &nbsp;電流量 * 運行時長 * 電壓（一般為固定值，可忽略）</p><p><img src="https://oscimg.oschina.net/oscnet/up-95b4814576aef6a67210588b65b259c9abf.jpg" alt="" referrerpolicy="no-referrer"></p><h2>線程堆棧</h2><p>由於發熱問題是一個綜合性的問題，並不像 Crash 問題一樣，在發生現場我們就可以知道是哪個線程觸發的。如果將所有線程的堆棧都進行 Dump 記錄的話，得物當前運行時的子線程數量在 200+，全部進行存儲的話無疑是不合理的。問題就轉變為，如何較為準確的找到發熱代碼的線程堆棧？</p><p>上文説到，在計算 CPU 使用率的時讀取進程下所有線程的 Stat 文件，我們可以獲取到子線程的 CPU 使用率，對其使用率進行倒排，篩選超過閾值（當前定義 50% ) 或，佔用 Top N 的線程進行存儲。由於堆棧頻繁採集時機上是有性能折損的，故犧牲了部分的堆棧採樣精度和準確性，在温度、CPU 使用率等指標超過閾值定義後，才開始採集，指定下發時間的堆棧信息。</p><p>我們還要明確一個概念，線程 Stat 文件的文件名即為線程標識名，Thread.id 是指線程 ID。</p><p>其兩者並不等價，但 Native 方法中給我們提供了對應的方式去建立兩者的映射關係。</p><p>在 Art &nbsp;Thread.cc 方法中，將 Java 中的 Thread 對象轉換成 C++ 中的 Thread 對象，調用 ShortDump 打印線程的相關信息，我們通過字符串匹配到核心的 Tid= 的信息，即可獲取到線程的 Tid。 <img src="https://oscimg.oschina.net/oscnet/up-6e69839410035c1793072333c26c962790c.jpg" alt="" referrerpolicy="no-referrer"></p><p>核心代碼邏輯如下:</p><pre><code>//獲取隊列中最近一次 cpu 採樣的數據
 val threadCpuUsageData = cpuProfileStoreQueue.last().threadUsageDataList
       val hotStacks = mutableListOf&lt;HotStack&gt;()
        if (threadCpuUsageData != null) {
            val dataCount = if (threadCpuUsageData.size &lt;= TOP_THREAD_COUNT) {
                threadCpuUsageData.size
            } else {
                TOP_THREAD_COUNT
            }
            val traces: MutableMap&lt;Thread, Array&lt;StackTraceElement&gt;&gt; = Thread.getAllStackTraces()
            //定義 tid 和 thread 的映射關係 map
            val tidMap: MutableMap&lt;String, Thread&gt; = mutableMapOf()
            traces.keys.forEach { thread -&gt;
                //調用 native 方法獲取到 tid 信息
                val tidInfo = hotMonitorListener?.findTidInfoByThread(thread)
                tidInfo?.let {
                    findTidByTidInfo(tidInfo).let { tid -&gt;
                        if (tid.isNotEmpty()) {
                            tidMap[tid] = thread
                        }
                    }
                }
            }
            //採集 topN 的發熱堆棧
            for (index in 1..dataCount) {
                val singleThreadData = threadCpuUsageData[index - 1]
                val isMainThread = singleThreadData.pid == singleThreadData.tid
                val thread = tidMap[singleThreadData.tid.toString()]
                thread?.let { findThread -&gt;
                    traces[findThread]?.let { findStackTrace -&gt;
                        //獲取當前的線程堆棧
                        val sb = StringBuilder()
                        for (element in findStackTrace) {
                            sb.append(element.toString()).append("\n")
                        }
                        sb.append("\n")
                        if (findStackTrace.isNotEmpty()) {
                            //是否為主線程
                            //組裝 hotStack
                            val hotStack = HotStack(
                                //進程 id
                                singleThreadData.pid,
                                singleThreadData.tid,
                                singleThreadData.name,
                                singleThreadData.cpuUseRate,
                                sb.toString(),
                                thread.state
                                isMainThread
                            )
//                        Log.d("HotMonitor", sb.toString())
                            hotStacks.add(hotStack)
                        }
                    }
                }

            }
        }
</code></pre><h1>四、監控方案</h1><p>瞭解核心指標數據是如何獲取的前提下，其實監控方案的核心思路無非就是通過遠端 APM 配置中心下發的採樣閾值、採樣週期、各模塊數據開關等限定採樣配置，子線程 Handler 定時發消息，採集各個模塊的數據進行組裝，在合適的時機進行數據上報即可，具體的數據拆解、分析工作則由發熱平台進一步處理。</p><p><strong>模塊整體架構</strong><img src="https://oscimg.oschina.net/oscnet/up-b5030680856c30aab1b0a1b2d301fbbeea8.jpg" alt="" referrerpolicy="no-referrer"></p><p><strong>上報時機</strong><img src="https://oscimg.oschina.net/oscnet/up-0cbaca499275d7a3292d7a5990c26ced860.jpg" alt="" referrerpolicy="no-referrer"></p><p><strong>核心採集流程</strong><img src="https://oscimg.oschina.net/oscnet/up-81a16007734e761fbece449580c494a4ccb.jpg" alt="" referrerpolicy="no-referrer"></p><p><strong>線上線下區分</strong></p><p>由於所有子線程的 CPU 採集、堆棧採集實際上是會對性能有折損的，200+ 的線程的讀取耗時整體在 200ms 左右，採樣子線程的 CPU 使用率在 10%，考慮到線上用户體驗問題，並不能全量開啓高頻率採樣。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b83fd9a6c760d788fb151f04d854e8c40eb.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-2e9a9a66b142535b29d5dc9793467e73fdf.jpg" alt="" referrerpolicy="no-referrer"></p><p>故整體方案來説: 線下場景以重點側重發現、排查、治理全量問題，上報全量日誌，以 CPU、GPU 使用率為第一衡量指標；</p><p>線上場景以重點側重觀察整體發熱大盤趨勢、分析潛在問題場景，上報核心日誌，以電池温度為第一衡量指標。</p><p><strong>發熱平台</strong></p><p>在平台側同學的支持下，發熱現場數據經過平台側進行消費，將核心的發熱堆棧經過 Android 堆棧反混淆服務進行聚合，補齊充電狀態、主線程 CPU 使用率、問題類型、電池温度等基礎字段，平台側就具備發現、分析、解決的流程化監控推進的能力。</p><p>具體的堆棧信息 &amp; 發熱信息平台展示如下:</p><p><img src="https://oscimg.oschina.net/oscnet/up-3251d963a881ef9e7f09fcc6d73d9b2925d.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-04b122e8d11a65f06b2ed4f71062b718945.jpg" alt="" referrerpolicy="no-referrer"></p><p>由於電池温度、CPU 使用率是針對運行時發熱場景最直觀的指標，且我們一期重點關注發熱場景的治理，不針對元器件 Hook 等耗電場景進行持續深入分析，故當前得物側是以電池温度、CPU 使用率為第一第二指標 &nbsp;建立核心的發熱問題四象限，優先關注高温、高 CPU 的問題場景。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5a65d936a2e2676307b5562a55eb4fca2e7.jpg" alt="" referrerpolicy="no-referrer"></p><p>在數據分析過程中，我們遇到了數據上的效率排查效率不夠高、問題精度不夠準的情況。</p><ul><li>如何定位是高温場景是發生在 App 內部，且在使用過程中明顯上升的？ 通過過濾從啓動開始即高温、後台切換回來即高温的場景，重點關注在 App 內部温度上升的場景。</li><li>線上的採樣後仍舊單日有 6w+ 數據的上報，我們如何篩選出更為核心的數據？當前的做法是定義了温度跨度的概念，優先看在 App 內部温度跨度較大的 Case。</li><li>線程存在調用 Wait 等方法阻塞的堆棧，消耗內核態的時間分配，但實際不消耗整體 CPU 的誤報數據。 補充了線程的運行狀態和 Proc 文件中記錄的 State，方便優先處理 RUNNABLE 線程的 CPU 高温高佔用問題。</li><li>手機温度上升作為漸進式的場景，如何實現温度上升場景下的頁面精確歸因？增加温度採樣頻率的同時，彙總 CPU 使用率和實時堆棧等瞬時數據作為數據支撐，但考慮到數據體量的情況，數據上報聚合裁剪方式仍在逐步探索更為合理的方式，力求在兩者之間找到一個平衡點。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-838ac3d056faa216013c5cf2b87b08cbf57.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-abcc4634539696d10682e28632c278d9415.jpg" alt="" referrerpolicy="no-referrer"></p><h1>五、收益</h1><p>Android 端側發熱監控自上線以來，背靠平台側的支撐，陸續發現了一些問題並聯合開發同學做了對應場景的治理優化工作，如：</p><p>耗時獨立線程任務，接入統一線程池調度管理；</p><p>動畫執行死循環監測修復；</p><p>高 IO 場景的文件讀寫策略優化；</p><p>高併發任務鎖粒度優化；</p><p>日誌庫等 Json 解析頻繁場景，採用效率更高的序列化方；</p><p>系統相機等系統功率過高的採集參數設備分級嘗試；</p><p>基於 Webgl 的遊戲場景，幀率降低和資源及時回收優化運行時內存；</p><p>....</p><p>這無疑給未來體驗工作的場景技術選型、技術實現沉澱了一些有價值的經驗，符合對 App 體驗追求極致的高標準、高要求。</p><h1>六、未來展望</h1><p>手機發熱作為漸進式的體驗場景，涉及手機硬件、系統服務、軟件使用、外界環境多方位因素。對於端側的排查上來説，當前優先級聚焦於應用層的不合理使用上，對於排查工具鏈路增強、問題業務歸因、低電量、低功耗模式下的動態策略降低、自動化診斷報告等環節仍舊有很多值得深入挖掘的點，例如：</p><p><strong>監控/工具增強</strong></p><ul><li>App 浮層分析工具 (CPU\GPU/頻率/温度/功耗等信息)</li><li>借鑑 BatteryHistorian、SnapdragonProfiler、Systrace 等工具，實現自研 TeslaLab 能力增強。</li></ul><p><strong>業務歸因</strong></p><ul><li>發熱堆棧自動分配</li><li>調用溯源歸因精細化</li></ul><p><strong>場景策略、降級</strong></p><ul><li>CPU 調頻、動態幀率、分辨率降級</li><li>端內低功耗模式探索</li></ul><p><strong>自動化診斷報告</strong></p><ul><li>單用户定向自動化分析輸出診斷報告</li></ul><p>‍</p><h1>七、總結</h1><p>在此也只是粗略介紹當前已經做的針對發熱治理的一些初步工作，以及對未來發熱功耗相關開展的思路，希望能讓 App 帶來更好的體驗，給用户帶來更對美好事物的嚮往的感受。</p><p>*文 / GavinX</p><p>本文屬得物技術原創，更多精彩文章請看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F" target="_blank">得物技術官網</a></p><p>未經得物技術許可嚴禁轉載，否則依法追究法律責任！</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 09:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10141675</guid>
            <link>https://my.oschina.net/u/5783135/blog/10141675</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英偉達或將推出針對中國區的最新改良版 AI 芯片]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.chinastarmarket.cn%2Fdetail%2F1512299" target="_blank">據<span style="background-color:#ffffff">《科創板日報》</span>報道</a></u>，產業鏈人士稱英偉達現已開發出針對中國區的最新改良版 AI 芯片：HGX H20、L20 PCle 和 L2 PCle。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-edecf0f4b0f979b064fa454bfd31a0ec4e3.png" referrerpolicy="no-referrer"></p><p>知情人士稱，最新三款芯片是由 H100 改良而來，英偉達最快或將於本月 16 號之後公佈，國內廠商最快將在這幾天拿到產品。</p><p>NVIDIA H100 Tensor Core GPU&nbsp;採用全新 Hopper 架構，基於台積電 N4 工藝，集成了 800 億個晶體管。與上一代產品相比，可為多專家 (MoE) 模型提供高 9 倍的訓練速度。</p><p>它配備第四代 Tensor Core 和 Transformer 引擎（FP8 精度），還具有高度可擴展的 NVLink 互連技術（最多可連接達 256 個 H100 GPU，相較於上一代採用 HDR&nbsp;Quantum&nbsp;InfiniBand 網絡，帶寬高出 9 倍，帶寬速度為 900GB/s）等功能。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-acc6975ca53f0be377caf78b3f05ea055f8.png" referrerpolicy="no-referrer"></p><p>記者向英偉達求證該消息的真實性，但截至發稿，英偉達方面暫無迴應。</p><hr><p>2023 年 10 月 17 日，CNBC 報道稱，美國商務部計劃在未來幾周內限制向中國出售更先進的人工智能芯片。高級政府官員表示，<strong>新政策將限制 NVIDIA A800 和 H800 芯片的出口</strong>。詳情：<em><u><a href="https://www.oschina.net/news/262251/us-bans-export-of-more-ai-chips-including-nvidia-h800-to-china">美國政府限制向中國出口 NVIDIA H800 GPU</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 07:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265728</guid>
            <link>https://www.oschina.net/news/265728</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
