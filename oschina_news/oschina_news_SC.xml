<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 17 Oct 2023 11:09:25 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[大神用 Scratch 手搓 RISC-V 模拟器，并成功运行 Linux 内核]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>刚刚网上冲浪被一个项目震惊到了——完全用 Scratch 代码编写了成功运行 Linux 内核的模拟器。</p><blockquote><p>Scratch 是以积木块为基础的可视化程序设计语言开发平台，通过点击并拖拽的方式可视化完成编程。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e161b056c9c2f0c264e4cedb1ba65c7f52d.png" referrerpolicy="no-referrer"></p></blockquote><p>作者介绍称，他用 Scratch 编写了 RISC-V (rv32ima) 指令集，然后将其作为模拟器运行 Linux 6.1 内核。该模拟器基于纯 C 实现的&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcnlohr%2Fmini-rv32ima" target="_blank">mini-rv32ima 模拟器</a></u>构建。</p><p><img height="895" src="https://static.oschina.net/uploads/space/2023/1017/182117_4pZ6_2720166.png" width="1460" referrerpolicy="no-referrer"></p><p><em>via<u>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscratch.mit.edu%2Fprojects%2F892602496" target="_blank">https://scratch.mit.edu/projects/892602496</a></u></em></p><p>下面是项目的运行截图：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3ffb2ac2bd054e820c5e5d646ff93cc674b.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 10:34:46 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262163/scratch-risc-v</guid>
            <link>https://www.oschina.net/news/262163/scratch-risc-v</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🎁有奖问答 | 大数据时代下机器学习的新范式]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4700705_2331198">高手问答第 307 期 —— 大数据时代下机器学习的新范式</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4700705" class="__user"><span>小白兔爱吃大灰狼</span></a> 发布于，今天 15:41
                    </div><div class="item">阅读 48</div><div class="item collect-btn " data-id="2331198" data-user-id="4700705" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331198" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4700705_2331198#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">0</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手问答</a></div><div class="content" id="articleContent"><p class="ad-wrap"><a data-traceid="question_detail_above_text_link_ad" data-tracepid="question_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></p><div>
  在大数据时代，数据的数量和复杂性都呈指数级增长。然而，这些数据往往分散在不同的组织和个人之间，限制了数据的利用和挖掘。此时，联邦学习应运而生。它是 
 <strong>一种新兴的机器学习方法</strong>，允许多个参与方共同训练模型。在大数据时代和人工智能的发展下，联邦学习成为了应对数据分散和隐私保护的有效解决方案，在医疗、金融、推荐等领域都有广泛的应用。 
</div><div>
  &nbsp; 
</div><div><strong>OSCHINA 本期高手问答 (10 月 18 日 - 10 月 24 日) 我们请来了 <a href="https://my.oschina.net/u/6662337" rel="nofollow">PrimiHub 开源</a> 和大家一起探讨关于「联邦学习技术」的问题。可讨论的问题包括但不限于：</strong></div><ol><li><div>
    什么是联邦学习？与分布式训练的区别和联系 
  </div></li><li><div>
    联邦学习的场景：包括但不限于横向 / 纵向联邦、跨企业、跨设备等 
  </div></li><li><div>
    当前联邦学习面临的问题：计算 / 通信复杂度、数据分布不均衡、安全隐私、公平性等 
  </div></li><li><div>
    联邦学习入门学习、上手开发的建议 
  </div></li></ol><div><span style="background-color:#ffffff; color:#333333"><span style="background-color:white"><span><span><span><span>如有其他</span></span></span></span></span></span>「联邦学习技术」 
 <span style="background-color:#ffffff; color:#333333"><span style="background-color:white"><span><span><span><span>相关的问题，也欢迎提问</span></span></span></span></span><span>&nbsp;</span></span><span style="background-color:#ffffff; color:#333333">！</span></div><div>
  &nbsp; 
</div><div><h2>嘉宾介绍</h2><div><img alt="" height="360" src="https://oscimg.oschina.net/oscnet/up-0687d700c7f88df15e0ff46a3028e2e33ac.jpg" width="360" referrerpolicy="no-referrer"></div><div>
   许雪峰，北航网络安全硕士，北京原语科技隐私计算工程师。从事联邦学习、差分隐私相关算法开发工作。热爱技术和开源，曾多次为知名开源机器学习框架 scikit-learn 贡献代码。 
 </div><div>
   &nbsp; 
 </div><div>
   🎁 为了鼓励踊跃提问， 
  <span style="color:#245bdb"><a href="https://my.oschina.net/u/6662337" rel="nofollow">原语科技 PrimiHub </a></span>会在问答结束后从提问者中抽取 5 名幸运会员，赠予 PrimiHub 定制笔记本礼盒 3 件套（内含：笔记本 * 1、金属签字笔 * 1、U 盘 * 1）。 
 </div><div><img alt="" height="234" src="https://oscimg.oschina.net/oscnet/up-a028c41d78f45ab688976a3135835470f2e.png" width="360" referrerpolicy="no-referrer"></div><div>
   &nbsp; 
 </div><div><p><span style="background-color:#ffffff; color:#27ae60">OSChina 高手问答一贯的风格，不欢迎任何与主题无关的讨论和喷子。</span></p><p>下面欢迎大家就 「联邦学习技术」 相关问题向<span>&nbsp;<a href="https://my.oschina.net/u/6662337" rel="nofollow">PrimiHub&nbsp;</a></span><a href="https://my.oschina.net/u/6662337" rel="nofollow">许雪峰老师</a> 提问，直接回帖提问既可。</p><blockquote><div><p><img alt="" height="143" src="https://oscimg.oschina.net/oscnet/up-60c5967156b3dba3ef12d93811acf8c846d.jpg" width="500" referrerpolicy="no-referrer"></p></div><div><strong>PrimiHub</strong><span>&nbsp;</span>作为一款由密码学专家团队打造的开源隐私框架，具有以下特性： 
   </div><ul><li><div><strong>开源</strong>：完全开源、免费 
     </div></li><li><div><strong>自主研发</strong>：安全多方计算、联邦学习、同态加密、可信计算等隐私计算技术 
     </div></li><li><div><strong>开箱即用</strong>：拥有 Web 界面、命令行和 Python SDK 等多种使用方式 
     </div></li><li><div><strong>功能丰富</strong>：支持隐匿查询、隐私求交、联合统计、数据资源管理等功能 
     </div></li><li><div><strong>灵活配置</strong>：支持自定义扩展语法、语义、安全协议等 
     </div></li></ul><div>
     GitHub 地址：https://github.com/primihub/primihub 
   </div></blockquote></div></div></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331198" data-user-id="4700705" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331198" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331198" data-obj-type="2" data-url="https://www.oschina.net/question/4700705_2331198"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 10:11:46 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4700705_2331198</guid>
            <link>https://www.oschina.net/question/4700705_2331198</link>
        </item>
        <item>
            <title>
                <![CDATA[2023 年度人工智能现状报告 (State of AI Report 2023)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>stateof.ai <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.stateof.ai%2F2023-report-launch" target="_blank">发布</a>了&nbsp;2023 年度人工智能现状报告 (State of AI Report 2023)。</p><p><img height="595" src="https://static.oschina.net/uploads/space/2023/1017/174423_m4u3_2720166.png" width="1405" referrerpolicy="no-referrer"></p><p>这份报告由英国知名风投公司 Air Street Capital 的合伙人 Nathan Benaich 等作者联合撰写，<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">报告从<strong>研究进展 (</strong></span><strong>Research</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>行业局势 (</strong></span><strong>Industry</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>政策影响 (</strong></span><strong>Politics</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>安全问题 (</strong></span><strong>Safety</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>未来预测 (</strong></span><strong>Predictions</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)&nbsp;</strong>五个维度出发，对人工智能发展现状和未来预期进行了深度分析。</span></p><blockquote><p><strong>完整报告查看：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F156WpBF_rGvf4Ecg19oM1fyR51g4FAmHV3Zs0WLukrLQ%2Fedit%3Fusp%3Dsharing" target="_blank">https://docs.google.com/</a></u></strong></p></blockquote><p>报告称，OpenAI 的 GPT-4 在发布八个月后仍然是最强的大语言模型（LLM），「在经典基准测试和旨在评估人类的考试中都击败了所有其他大模型」。</p><p>下面是这份报告的要点。</p><p><strong>1、研究进展</strong></p><ul><li><p>GPT-4 登场，展示了专有技术与次优开源替代方案之间的能力鸿沟，同时也验证了通过人类反馈进行强化学习的威力；</p></li><li><p>在 LLaMa-1/2 的支持下，越来越多的人试图用更小的模型、更好的数据集、更长的上下文来克隆或击败专有模型；</p></li><li><p>目前还不清楚人类生成的数据能维持人工智能扩展趋势多久（有人估计，到 2025 年，数据将被 LLM 耗尽），也不清楚添加合成数据会产生什么影响。企业中的视频和数据可能是下一个目标；</p></li><li><p>LLM 和扩散模型通过为分子生物学和药物发现带来新的突破，继续为生命科学界提供助力；</p></li><li><p>多模态成为新的前沿，各种智能体热度大大增加。</p></li></ul><p><strong>2、行业局势</strong></p><ul><li><p>英伟达凭借各国、初创公司、大型科技公司和研究人员对其 GPU 的巨大需求，跻身市值万亿美元俱乐部；</p></li><li><p>主要芯片供应商开发了不受出口管制影响的替代产品；</p></li><li><p>在 ChatGPT 的带领下，GenAI 的应用程序在图像、视频、编码、语音或 CoPilots 等领域取得了突破性的进展，带动了 180 亿美元的风险投资和企业投资。</p></li></ul><p><strong>3、政策影响</strong></p><ul><li><p>世界已划分出明确的监管阵营，但全球治理的进展仍较为缓慢，最大的人工智能实验室正在填补这一空白；</p></li><li><p>据预测，人工智能将影响一系列敏感领域，包括选举和就业，但我们还没有看到显著的影响。</p></li></ul><p><strong>4、安全问题</strong></p><ul><li><p>关于生存风险的讨论首次进入主流，并明显加剧；</p></li><li><p>许多高性能的模型很容易「越狱」，为了解决 RLHF 的挑战，研究人员正在探索替代方案，例如自对齐（self-alignment）和带有人类偏好的预训练；</p></li><li><p>随着模型性能的提升，一致地评估 SOTA 模型变得越来越困难。</p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262155/state-of-ai-2023-report</guid>
            <link>https://www.oschina.net/news/262155/state-of-ai-2023-report</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[简单三步，让你的软件工程师倦怠]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>如果你是一位想要让你最优秀的工程师疲惫不堪，且摧毁他们对你领导能力的信任的经理，我可以帮助你。</p><p>我曾在两个「疲惫不堪的团队」中工作，默默地看着我周围的聪明工程师离开团队或公司。</p><p>在一个团队中，我是一家小型、种子阶段的风险投资初创公司的首席工程师。我向 CEO 汇报并与他并肩工作。在我加入的第二个团队中，我是一家知名大型科技公司（如 Meta，Google，Apple 等）的 11 个个人贡献者之一。</p><p>以下就是那些团队的完整「倦怠策略」，咱们一步一步来。</p><h2><strong>步骤一：不要信任你的工程师</strong></h2><p style="text-align:start">首先要做的是对你的工程师进行微观管理。工程师很聪明，但他们真的明白你希望产品看起来如何吗？可能并不完全明白。</p><p style="text-align:start">当我在初创公司担任工程主管时，我与 CEO 并肩工作。他每天都会打电话给我，持续数小时，对那些对实际用户体验没有影响的小细节进行吹毛求疵。你确定我们应该使用 DynamoDB 吗？为什么这个 Lambda 函数使用 Python 而不是 Node？&nbsp;</p><p style="text-align:start"><strong>被频繁地叮咚打扰真是让人筋疲力尽。</strong></p><p style="text-align:start">在大型科技公司的团队中，我被赋予的自主权也很有限。这并不一定是因为我的经理，而是因为系统本身。</p><p style="text-align:start">我记得我在设计一个我正在建设的系统时的工作情况。我被婉转地告知：「我们需要以这种方式实施这个项目。我知道这将需要多一个月的时间，但我需要以这种方式进行（以便在我的宣传包上看起来更好）。</p><p style="text-align:start"><img height="556" src="https://static.oschina.net/uploads/space/2023/1017/174716_508S_3820517.png" width="1158" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fmbrandolph%2Fstatus%2F1705809400068497918" target="_blank">马克·兰道夫是 Netflix 的联合创始人。</a></p><h2><strong>步骤二：引入不必要的，浪费时间的流程</strong></h2><p style="text-align:start">当我在创业公司工作时，有一天我突然被迫在实施任何事情之前就要详细编写大量的设计文档。每一个小小的 API 端点创建都必须事先进行深入的讨论。突然间，一个功能的发布从几天变成了几周。这让我感到非常沮丧。</p><p style="text-align:start">最糟糕的是什么？我们甚至还没有发布我们的产品！在我们还没有一丝收入的迹象之前，所有这些流程都没有意义。</p><p style="text-align:start">看，谷歌有着浓厚的写作文化，设计文档在那里是常态。但是，在创业公司，你并不是谷歌。谷歌需要写作文化，因为他们的规模庞大，人员不断地流动。</p><p style="text-align:start">这种情况有时会过于复杂。在大型科技公司的某个团队中，流程处理的时间常常过长。要获取某些类型的数据，我必须提交一个请求，然后由另一个团队手动批准，这让人卡好几天。想要推出我的功能，我必须得到安全、产品、工程、法务、合规，甚至 CEO 的狗的批准。</p><p style="text-align:start">有阵子，我做的事情就只是编辑文件、发送邮件、阅读文档、回复别人。我做的事情没有任何意义，这并不是因为我愿意这样做。</p><p><img height="342" src="https://static.oschina.net/uploads/space/2023/1017/174800_0Yyt_3820517.png" width="1178" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Feshear%2Fstatus%2F1561120335331594240" target="_blank">艾米特·希尔是 Twitch 的联合创始人。</a></p><p style="text-align:start">当然，这些流程是必要的...但是也需要有一个平衡。工程师参与的每一个项目并不都需要经过这些流程，也不应该如此。幸运的是，并非大型科技公司的每个团队都是这样。实际上，大多数并非如此。</p><h2><strong>步骤 3：不要向客户交付</strong></h2><p style="text-align:start">在一个连续 8 个月的项目上辛苦工作，结果却无人得见，没有什么比这更糟糕的了。尤其是在这 8 个月里，你付出了大量的加班时间。</p><p style="text-align:start">更糟糕的是：原本 8 个月的工作被推迟到 12 个月，16 个月，甚至 20 个月。然后，产品被削减，你所付出的努力从未被交付给任何人使用。</p><p style="text-align:start"><strong>从事永远无法交付的项目，据说，是导致倦怠的最大原因之一。</strong></p><p><img height="672" src="https://static.oschina.net/uploads/space/2023/1017/174834_tu8m_3820517.png" width="1346" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.intercom.com%2Fblog%2Fshipping-is-your-companys-heartbeat%2F" target="_blank">Shipping is your company’s heartbeat (2013)</a></p><p style="text-align:start">在我曾经工作的那家创业公司，我们为产品辛勤工作了一年多，却从未向客户交付过。每次我们认为产品已经准备好交付时，我们的 CEO 总会要求「再添加一些功能」。过了一段时间，团队对 CEO 的执行能力失去了信心。我们只能从 CEO，而不是真正的用户的想法中得到反馈，这让我们很难深入关心这件事。</p><p style="text-align:start">产品在交付时应该是无 bug 的，并且用户体验良好。但是，它们并不需要完美无缺。如果他一直在追求完美，那我们将会遭遇非常糟糕的时期。尤其是我们还没有达到产品与市场的匹配度。</p><blockquote><p><em>完美主义往往是拖延的借口。</em><br><em>回顾过去，我认为我们的首席执行官只是在拖延真正销售产品并接受关键反馈的时间。</em></p></blockquote><p style="text-align:start">在我所在的大型科技团队中，随着各级主管和副总裁的更迭，我们经常进行重组。每次重组都会有新的高管加入，他们对组织有着新的愿景。这意味着需求不断变化，我们花了几个月甚至几年时间的许多项目被废弃，我们从未看到我们的项目在现实世界中的影响。</p><p style="text-align:start">由于缺乏专注，导致无法向客户交付。当一个产品没有强烈的领导愿景时，这个产品注定会失败。</p><p><img height="440" src="https://static.oschina.net/uploads/space/2023/1017/174904_ovph_3820517.png" width="1378" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FJonErlichman%2Fstatus%2F1404479095472373761" target="_blank">https://twitter.com/JonErlichman/status/1404479095472373761</a></p><h2><strong>额外步骤：过度承诺而不兑现</strong></h2><p style="text-align:start">这个步骤是所有上述步骤的高潮。如果你愿意，可以把它看作是棺材上的最后一颗钉子，压死骆驼的最后一根稻草。</p><p style="text-align:start">这些团队中的大多数工程师被过度承诺了从未实现的福利。</p><p style="text-align:start">在我创业的那一年，我们一直在开发一个从未上市的产品，而 CEO 则花时间在筹集资金。虽然我最初在公司中拥有相当大的股权，但在产品与市场契合度之前就开始筹资意味着我的股权正在被稀释。稀释得很多。突然间，创业公司对我来说的经济激励消失了。即使创业公司以 10 亿美元的价格退出，我在大型科技公司工作十年也能赚到同样多的钱。除此之外，大型科技公司的薪酬是完全流动且有保障的，而在当前的环境下，10 亿美元的退出越来越少见。</p><p style="text-align:start">在大型科技公司，每一个离职的工程师当初加入的原因都是以下几点：</p><ul><li><p>产品愿景：他们对产品及其解决的问题充满热情</p></li><li><p>发展空间/前途能见度：他们觉得他们将有更多的发展空间，因此，也就有了更多的成长机会</p></li><li><p>更好的晋升机会：更大的发展空间和能见度 → 晋升</p></li></ul><p style="text-align:start">遗憾的是，每年，每位工程师对实现他们的目标都会一点点失去希望。</p><p style="text-align:start"><strong>绝望加速了倦怠感的产生。</strong></p><p style="text-align:start">他们加入公司的原因根本没有实现。当他们的希望降到一定的低点时，他们就离开了。</p><p style="text-align:start">最终，我也无法逃避疲惫的困扰。所以，我选择离开。</p><blockquote><p>节选自：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fengineercodex.substack.com%2F" target="_blank">Engineer’s Codex</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fengineercodex.substack.com%2Fp%2Fhow-to-burnout-a-software-engineer" target="_blank">https://engineercodex.substack.com/p/how-to-burnout-a-software-engineer</a></p></blockquote><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262153/how-to-burnout-a-software-engineer</guid>
            <link>https://www.oschina.net/news/262153/how-to-burnout-a-software-engineer</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1Panel 开源面板 v1.7.0 发布，新增 Node.js 运行环境、新增系统缓存清理功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p style="color:#000000; text-align:start">2023 年 10 月 16 日，现代化、开源的 Linux 服务器运维管理面板 1Panel 正式发布 v1.7.0 版本。</p><p style="color:#000000; text-align:start">在这个版本中，1Panel 新增 Node.js 运行环境；新增系统缓存清理功能；应用安装时支持选择远程数据库。此外，我们进行了 40 多项功能更新和问题修复。1Panel 应用商店新增了 2 款应用，并且更新了 25 款应用。感谢社区用户们的反馈和支持，使得新版本的 1Panel 功能更加完善。</p><span id="OSC_h1_1"></span><h1>亮点更新</h1><p style="color:#000000; text-align:start"><strong><span style="color:#005eeb">■ 新增 Node.js 运行环境</span></strong></p><p style="color:#000000; text-align:start">1Panel v1.7.0 版本新增 Node.js 运行环境。现在，您可以在 1Panel 上轻松创建和管理 Node.js 网站。通过 1Panel，用户可以轻松在几分钟内创建 Node.js 项目。1Panel 提供了直观的设置向导，帮助用户快速启动应用，无需进行复杂的配置，极大地节省时间和精力。</p><p style="color:#000000; text-align:start">此外，我们提供全面的监控功能，您可以实时追踪 Node.js 应用程序的性能和运行状态，及时发现并处理错误，保证了应用的健康运营，用户体验更佳。</p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/38065f745e1641b08cd9e9fe819faa56~tplv-obj.image?from=1038109144&amp;traceid=202310162015152ABC7A7EAF4B33919008&amp;x-expires=2147483647&amp;x-signature=Qx0p8V1rhBIGwik6rpNTTYDMtjQ%3D" referrerpolicy="no-referrer"></div><div><span>▲图 1 Node.js 运行环境</span></div><p style="color:#000000; text-align:start"><strong><span style="color:#005eeb">■ 支持系统缓存清理功能</span></strong></p><p style="color:#000000; text-align:start">1Panel v1.7.0 版本支持系统缓存清理功能。用户可以在 1Panel 上轻松清理系统缓存，释放磁盘空间。目前 1Panel 支持的清理类型包括：</p><p style="color:#000000; text-align:start">1. 系统垃圾：快照、升级等过程中产生的临时文件，以及版本迭代过程中的废弃文件；</p><p style="color:#000000; text-align:start">2. 临时上传文件：系统上传备份列表中上传的临时文件；</p><p style="color:#000000; text-align:start">3. 临时下载文件：系统从第三方备份账号下载的临时文件；</p><p style="color:#000000; text-align:start">4. 系统日志文件：系统日志信息、容器构建或镜像拉取等日志信息，以及计划任务中产生的日志文件。</p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/b772670df524427498c4725e113e8ef8~tplv-obj.image?from=1038109144&amp;traceid=202310162015152ABC7A7EAF4B33919008&amp;x-expires=2147483647&amp;x-signature=GQY1V4mdaLZvn1kxZoW6Zs061I0%3D" referrerpolicy="no-referrer"></div><div><span>▲图 2 系统缓存清理</span></div><p style="color:#000000; text-align:start"><strong><span style="color:#005eeb">■ 应用商店</span></strong></p><p style="color:#000000; text-align:start">1Panel v1.7.0 版本的应用商店进行了全面升级，为用户带来了更加丰富的功能和更便捷的操作体验。</p><p style="color:#000000; text-align:start">首先，我们对应用分类进行了精细化的重构，以方便用户更轻松地找到符合其兴趣和要求的应用程序。</p><p style="color:#000000; text-align:start">其次，在操作界面方面，用户可以更快速地浏览不同应用，并通过改进的导航功能，轻松浏览并发现新的应用。</p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/21545e7958264ae6af222c0b755cd1b2~tplv-obj.image?from=1038109144&amp;traceid=202310162015152ABC7A7EAF4B33919008&amp;x-expires=2147483647&amp;x-signature=e1EqNgIFQf9u86e7a8MS2qFEd8c%3D" referrerpolicy="no-referrer"></div><div><span>▲图 3 应用商店</span></div><span id="OSC_h1_2"></span><h1>新增功能</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：增加 Node.js 运行环境；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>应用商店：应用安装时支持选择远程数据库；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>面板设置：增加系统缓存清理功能。</p><span id="OSC_h1_3"></span><h1>功能优化</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：网站主域名支持设置端口；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：反向代理网站配置默认增加协议转发；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：修改网站日志的关闭参数；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：优化设置页面日志按钮样式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：优化运行环境下拉列表样式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>应用商店：已安装应用列表支持查看应用日志；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>应用商店：调整部分已安装应用的按钮位置；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>应用商店：增加分类标签排序；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>应用商店：应用列表顶部增加分页显示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>应用商店：增加同步所有应用状态的提示信息；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>数据库：支持复制并查看详细的 Redis 外部连接地址；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>数据库：统一 MySQL 数据库设置页面的样式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>数据库：MySQL 部分性能参数区分版本显示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>数据库：远程数据库增加删除提示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：修改创建容器页面选择挂载卷时的交互方式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器升级操作时支持忽略版本比较；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器镜像列表增加是否使用标签的选项；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器镜像列表增加详情显示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>容器：容器列表资源使用率增加详情显示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器支持自定义控制枱的交互方式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：优化删除编排弹出框的提示信息；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：优化容器名称校验规则；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主机：防火墙范围端口规则显示占用详情；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>日志审计：SSH 登录日志增加详情显示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>日志审计：1Panel 系统日志支持根据日期进行筛选，并支持追踪读取；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>面板设置：支持设置服务器默认网卡；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>面板设置：系统授权 IP 支持 IP 段；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>面板设置：两步验证区分操作系统，并支持设置标题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>面板设置：优化暗色模式下面板设置的按钮样式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系统：系统重启成功后同步应用商店应用；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系统：优化监控采集方式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系统：统一部分页面的全屏按钮样式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系统：缓存部分页面已设置的分页条数。</p><span id="OSC_h1_4"></span><h1>Bug 修复</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>网站：修复了域名暂停或者移除后无法重新创建该域名的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：修复了相同域名和端口可以重复添加的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>网站：修复了 HTTP 模式下证书会保存部分错误数据的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>应用商店：修复了强制删除 OpenResty 后没有同步删除 PHP 应用的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：修复了编辑存储卷失败导致容器丢失的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：修复了编辑容器失败时未更新容器 ID 的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主机：修复了部分场景下系统防火墙未显示具体应用占用情况的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主机：修复了 UFW 防火墙并发导致的批量操作失败的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主机：修复了部分操作系统添加防火墙端口备注时不生效的问题；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>系统：修复了演示环境部分功能不能正常查看的问题。</p><span id="OSC_h1_5"></span><h1>应用商店</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>新增 Metabase；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>新增 ShowDoc；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>JumpServer 版本升级至 v3.7.1；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Halo 版本升级至 v2.10.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Jenkins 版本升级至 v2.427；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Alist 版本升级至 v3.28.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>PGAdmin4 版本升级至 v7.7；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Jellyfin 版本升级至 v10.8.11；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Tailchat 版本升级至 v1.9.1；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>RabbitMQ 版本升级至 v3.12.6；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>青龙版本升级至 v2.16.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>MeiliSearch 版本升级至 v1.4.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>EMQX 版本升级至 v5.3.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>VS Code 版本升级至 v4.17.1；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>MongoDB 版本升级至 v7.0.2；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Docker Registry 版本升级至 v2.8.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Nexus Repository 版本升级至 v3.61.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Gitea 版本升级至 v1.20.5；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Memos 版本升级至 v0.16.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Cloudreve 版本升级至 v3.8.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Draw.io 版本升级至 v22.0.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Nextcloud 版本升级至 v27.1.2；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Kodbox 版本升级至 v1.4405；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Uptime Kuma 版本升级至 v1.23.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>ddns-go 版本升级至 v5.6.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Synapse 版本升级至 v1.94.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>AdGuardHome 版本升级至 v0.107.39。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10118158</guid>
            <link>https://my.oschina.net/u/4736111/blog/10118158</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度搜索已基于 AI 大模型完成重构]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>百度创始人、董事长兼首席执行官李彦宏在百度世界 2023 上<a href="https://www.oschina.net/news/262086" target="_blank">正式发布文心大模型 4.0</a> ，并开启邀请测试。李彦宏称这是迄今为止最强大的文心大模型，实现了基础模型的全面升级，在理解、生成、逻辑和记忆能力上都有着明显提升，综合水平「与 GPT-4 相比毫不逊色」。</p><p>此外，李彦宏还宣布，百度搜索已经基于 AI 大模型完成重构，新搜索具有极致满足、推荐激发和多轮交互三个特点。不仅提升了搜索质量，而且突破了搜索的应用范围、扩大了产品边界。他强调说，生成式 AI 与搜索是天作之合。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bdac8a70261d0c8fb68da75bdbffdeb0942.png" referrerpolicy="no-referrer"></p><p>据悉，百度搜索不仅提升了搜索质量，而且突破了搜索的应用范围、扩大了产品边界。百度搜索基于文心大模型进行升级，新版本大模型实现了基础模型的全面升级，在理解、生成、逻辑和记忆能力上都有着明显提升。</p><p>除了搜索，李彦宏还称如流、地图、网盘、文库等，都将以一个全新的面目与大家见面，并表示分享上述这些应用的目的，是为了拓展想象力、激发更多人做出更惊艳的 AI 原生应用。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262141</guid>
            <link>https://www.oschina.net/news/262141</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[为什么前端技术栈如此复杂？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>前端生态系统的复杂性是出了名的。在每一层，似乎都存在着不兼容的，相互竞争的标准。</p><p><strong>没有通用的导入系统</strong>。ES 模块、CommonJS、异步模块定义（AMD）和通用模块定义（UMD）都是你可以导入或分享代码的不同方式。打包器试图通过支持多种方法来解决这个问题。但是代码经历了多层的压缩、混淆和转译。TypeScript 被编译成 JavaScript。网络上的代码会被压缩（以减少网络带宽）或混淆（以防止复制）。源映射可以解决其中一些问题，但这又是另一项需要配置的事情。获取正确的堆栈跟踪可能会很棘手。这需要语言、工具和运行时之间的协调。</p><p><strong>极其不同的环境</strong>。一个特性和一个错误。前端代码预期在任何地方运行 - 不仅仅是浏览器。在不同环境中可用的上下文和 API 各不相同，很难知道你有哪些可用的上下文（更不用说知道你正在导入的库假设了什么）。这段代码能在服务器上运行吗？这段代码能在客户端上运行吗？这对开发者来说很困难（我可以使用什么代码）对于库维护者来说也很困难（我应该为哪些环境优化我的代码？）。</p><p><strong>过度强调文件结构</strong>。太多的前端工具依赖于项目结构来进行行为设定。配置必须在项目的根目录中（导致了一长串的 tailwind.config.js、postcss.config.js、eslint.config.js、next.config.js 等）。文件结构对于导入代码是必要的恶，但在前端中，它却做了更多的事情。它可能是一个 API，用于将特定文件路由为网页，或者作为 API，或者作为静态网页，或者作为动态重新生成的网页。这些都很方便，但有时候很难调试，也很难发现代码库的部分内容。</p><p><strong>配置地狱</strong>。开箱即用的工具有很多。长期以来，我们有 create-react-app，这是一个被赞誉的工具包，它集成了许多这样的工具，从一开始就为开发者提供了一个可用的配置。但是，如果你偏离了这条黄金路径，你就会被 20 多个开发工具和复杂的交互所困扰。几乎每个工具都在与其他工具争斗。ESLint（代码检查工具）和 Prettier（代码格式化工具）经常发生冲突。</p><p><strong>开发失衡</strong>。在代码和部署之间有如此多的步骤，意味着热重载开发往往复杂。这导致了像 webpack-dev-server 这样的工具的出现，它为你处理了大部分问题。但是要警惕魔法。这些开发服务器中有太多的假设，它们可能会迅速偏离生产行为。</p><blockquote><p>原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmatt-rickard.com%2Fwhy-is-the-frontend-stack-so-complicated" target="_blank">https://matt-rickard.com/why-is-the-frontend-stack-so-complicated</a></p><p>作者：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmatt-rickard.com%2F" target="_blank">Matt Rickard</a></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262139/why-is-the-frontend-stack-so-complicated</guid>
            <link>https://www.oschina.net/news/262139/why-is-the-frontend-stack-so-complicated</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JetBrains 推出 Writerside，创建技术文档的工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">JetBrains 宣布<span style="background-color:#ffffff">以早期访问状态</span>推出&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fwriterside%2F" target="_blank">Writerside</a>，一款基于 IntelliJ 平台的 JetBrains IDE，开发人员可使用它编写、构建、测试和发布技术文档。可以作为 JetBrains IDE 中的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplugins.jetbrains.com%2Fplugin%2F20158-writerside" target="_blank">插件</a>使用，也可以作为独立工具使用。</span></p><p><span style="color:#000000">Writerside 允许开发人员和编写人员在产品文档、API 参考、开发人员指南、教程和操作方法方面进行协作；基于人工智能的拼写检查和语法纠正工具支持超过 25 种语言，包括英语、德语、西班牙语和中文。</span></p><p><img height="303" src="https://oscimg.oschina.net/oscnet/up-46d13f13538090b99b398e3c34b0636ffce.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Writerside 的一些功能包括：</span></p><ul><li><span style="color:#000000">内置 Git UI。</span></li><li><span style="color:#000000">实时预览，文档完全按照读者所看到的方式显示，无需等待构建。</span></li><li><span style="color:#000000">支持 Markdown、XML 或两者的组合使用。开发人员可以注入语义属性或语义元素来丰富 Markdown，并且 Markdown 元素可以转换为 XML。</span></li><li><span style="color:#000000">提供外观的自定义选项，包括选择深色或浅色模式、对比度、柔和或生动的皮肤，以及定义适合品牌的强调色。作者可以专注于内容，而无需设计布局和处理 CSS。</span></li><li><span style="color:#000000">附带 100 多个内置测试，允许 Writerside 自动测试损坏的链接、丢失的资源、不正确的属性值、非唯一 ID 等。具有代码高亮显示和验证功能，以及内置检查。</span></li><li><span style="color:#000000">维护项目的单一事实来源，使开发人员能够重用部分内容并仅从一个位置对其进行编辑，而不必在进行更改时更新每个实例。</span></li></ul><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fhelp%2Fwriterside%2Fgetting-started.html" target="_blank">查看官方文档</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 08:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262124/jetbrains-writerside</guid>
            <link>https://www.oschina.net/news/262124/jetbrains-writerside</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ruff v0.1.0 - Rust 编写的高性能 Python 代码分析工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Ruff v0.1.0 已发布，此版本主要变化包括<strong>提升稳定性</strong>、<strong>引入新的预览模式</strong>、<strong>引入 fix safety 等级</strong>，以及执行正式的版本控制策略。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-18fc830344db5e3f3a3e04cb6ce78cdd47a.png" referrerpolicy="no-referrer"></p><ul><li><strong>新的预览模式</strong></li></ul><p>通过预览模式，用户可自行选择体验新功能——用于启用新规则、不稳定修复和实验性代码分析。</p><pre><code>[tool.ruff]
preview = true</code></pre><ul><li><strong>引入 fix safety 等级</strong></li></ul><p>Ruff 自动修复违规行为的能力是其最强大的功能之一。然而，考虑到 Python 的动态特性，Ruff 并不总能保证修复是「安全的」。</p><p>自 5 月份以来，开发团队一直将 Ruff 的修复子集标记为不安全。当应用被安全修复时，代码的含义和意图将被保留；当应用不安全修复时，含义可能会改变。</p><p>但在 v0.1.0 中，<strong>Ruff 默认情况下只会使用安全修复</strong>，以增加应用修复时的准确性，并突出显示需要额外审查的修复。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2Fruff%2Fconfiguration%2F%23fix-safety" target="_blank">查看文档了解更多</a>。</p><ul><li><strong>执行正式的版本控制策略</strong></li></ul><p>随着 0.1.0 的发布，Ruff 正式执行完整的版本控制策略，简单总结如下：</p><ul><li>次要版本号代表发布稳定预览功能、更改稳定行为以及进行重大更改。</li><li>补丁版本号代表错误修复，以及预览中的规则或修复的任何更改。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2Fruff%2Fversioning%2F" target="_blank">完整描述查看文档</a>。</p><p>最后，Ruff 文档站点已从&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbeta.ruff.rs%2Fdocs" target="_blank">beta.ruff.rs/docs</a>&nbsp;迁移到&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2F" target="_blank">docs.astral.sh</a>。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fastral.sh%2Fblog%2Fruff-v0.1.0" target="_blank">详情查看发布公告</a>。</p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Ruff 是基于 Rust 编写的高性能 Python 代码分析工具（即 Linter），用于检查代码中的语法错误、编码规范问题、潜在的逻辑问题和代码质量问题等，可以提供实时反馈和自动修复建议。其主打的特性是高性能，宣称比现有的同类工具快 10~100 倍。</p><blockquote><p style="margin-left:0; margin-right:0"><strong>Ruff 核心特性</strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>通过 pip 安装</li><li>支持<span>&nbsp;</span><code>pyproject.toml</code></li><li>兼容&nbsp;Python 3.11</li><li>超过 500 条内置规则，与 Flake8 内置的规则集近乎对等</li><li>重新实现了数十个 Flake8 插件，如 flake8-bugbear、flake8-comprehensions 等</li><li>支持自动修复，可自动纠正错误（例如，删除未使用的导入）</li><li>内置缓存，可避免重复分析未更改的文件</li><li>支持 VS Code、Pycharm、Neovim、Sublime Text、Emacs 等编辑器</li><li>对 monorepo 友好，具有分层和级联配置</li></ul></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://static.oschina.net/uploads/space/2023/0420/144757_TG6X_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 07:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262120/ruff-0-1-0-released</guid>
            <link>https://www.oschina.net/news/262120/ruff-0-1-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《开放麒麟社区全览白皮书（2023）》重磅开启！内容征集中！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span>截至目前，openKylin（开放麒麟）开源生态圈汇聚超 300 家合作企业、5000 余名核心贡献者、80+SIG 以及超百万用户<strong>。</strong></span><br> &nbsp;</p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><strong>现诚邀社区各合作伙伴、SIG 组成员及广大用户共编《开放麒麟社区全览白皮书（2023）》</strong>，以收录开放麒麟社区优秀技术创新项目、行业应用场景、用户使用案例等，为有兴趣深入了解开放麒麟社区的开发者、合作伙伴、用户提供参考和借鉴，让更多人了解、共建开放麒麟社区！</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">主要征集内容</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>基于开放麒麟操作系统或开放麒麟社区开源模式开发的：</span></p><ul><li><span><strong>技术创新项目：</strong>项目的背景说明、功能或技术架构介绍、项目的应用场景等</span></li><li><span><strong>行业应用场景：</strong>具体的行业应用场景说明、具体实施方案或解决的痛点等</span></li><li><span><strong>用户使用案例：</strong>用户的使用场景说明、解决了哪些用户的问题等</span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>如果您在使用或者开发开放麒麟操作系统的过程中有相关内容积累，欢迎提交到社区，分享给更多有需要的人！</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">提交方式</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>如果您有意愿参与本次白皮书内容编写，可通过链接（<br><span style="color:#0052ff"><span>https://gitee.com/openkylin/docs/blob/master/社区参与指南/开放麒麟社区全览白皮书-案例模板.md</span></span>）获取案例模板，按照案例模板的要求编写完成后，发送邮件到：<strong>contact@openkylin.top</strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>征集截止时间为<strong>2023 年 10 月 31 日</strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">审核收录</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>收集到的案例将提交至 openKylin 社区生态委员会，由生态委员会审核讨论是否收录进《开放麒麟社区全览白皮书（2023）》，并通过委员投票的方式得出最终结论。</span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span>期待您的参与，共创开源未来！在过程中有任何疑问，欢迎私信 openKylin 公众号后台咨询。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 07:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262116</guid>
            <link>https://www.oschina.net/news/262116</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百川智能 A1 轮获阿里腾讯小米等 3 亿美元投资]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000"><span style="background-color:#ffffff">百川智能<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDhZdVNXqTudAtKZ1JrRvYQ" target="_blank">宣布</a>已完成 A1 轮战略融资，融资金额 3 亿美元，阿里、腾讯、小米等科技巨头及多家顶级投资机构均参与了本轮融资。加上天使轮的 5000 万美元，百川智能的融资金额已达 3.5 亿美元。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">百川智能成立于 2023 年 4 月 10 日，由前搜狗公司 CEO 王小川创立。其核心团队由来自搜狗、Google、腾讯、百度、华为、微软、字节等知名科技公司的 AI 顶尖人才组成。目前，百川智能的团队规模 170 余人，其中硕士及硕士以上学历员工占比近 70%，研发人员占比超 80%。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">目前，百川智能已发布 Baichuan-7B/13B，Baichuan2-7B/13B 四款开源可免费商用大模型及 Baichuan-53B、Baichuan2-53B 两款闭源大模型，平均每 28 天发布一款新的大模型。</span></span></p><p><img height="226" src="https://oscimg.oschina.net/oscnet/up-fe04b7e4bd658757761ef024f6bc89347b2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">公告称，</span>Baichuan-7B/13B 两款开源大模型在多个权威评测榜单均名列前茅，累积下载量超过六百万次。Baichuan2-13B 在 MMLU、CMMLU、MedQA、USMLE 等几大权威评估基准中，以绝对优势全方位领先 LLaMA2。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">8 月 31 日百川智能率先通过国家《生成式人工智能服务管理暂行办法》备案，是首批八家公司中唯一一家今年成立的大模型初创公司，并于 9 月 25 日开放 Baichuan2-53B API 接口，正式进军 To B 领域，开启商业化进程。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 07:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262115</guid>
            <link>https://www.oschina.net/news/262115</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenBSD 7.4]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>OpenBSD 项目创始人 Theo de Raadt 宣布推出<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openbsd.org%2F74.html" target="_blank"> OpenBSD 7.4</a>。这是 OpenBSD 第 55 个版本更新，下图是庆祝发版的海报：</p><p><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-30cece035e82615260d56659ea68a36ec27.png" width="400" referrerpolicy="no-referrer"></p><p>主要变化：</p><ul><li>大量内核改进</li><li>改进 SMP</li><li>Direct Rendering Manager 和图形驱动更新</li><li>改进 VMM/VMD</li><li>针对用户空间 (userland) 的 bug 修正和调整</li><li>改进硬件支持等</li></ul><p>OpenBSD 是开源、支持多平台的的类 UNIX 操作系统，创建于 1996 年，以强调安全性著称。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4cdb76e5822ddc9197ce757a7f97a83a20d.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 06:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262108/openbsd-7-4-released</guid>
            <link>https://www.oschina.net/news/262108/openbsd-7-4-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雷军：小米全新操作系统澎湃 OS 正式版已完成封包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>小米创办人、董事长兼 CEO 雷军今天在个人微博<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1749127163%2FNoeRxu6Ro%3Frefer_flag%3D1001030103_" target="_blank">宣布</a>，小米全新的操作系统小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。小米 14 系列，第一款搭载新系统的手机，已交付工厂开始生产。</p><blockquote><p><span style="color:#333333">今天，对小米来说，是一个历史性时刻。小米全新的操作系统，小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。</span></p><p><span style="color:#333333">小米 14 系列，第一款搭载新系统的手机，已交付工厂，正式开始生产。从这一刻起，</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs.weibo.com%2Fweibo%3Fq%3D%2523%25E5%25B0%258F%25E7%25B1%25B3%25E6%25BE%258E%25E6%25B9%2583OS%2523" target="_blank">#小米澎湃 OS#</a><span style="color:#333333"> 将逐步接替 MIUI。 ​​​</span></p><p><span style="color:#000000">对于小米来说，这是一个划时代的里程碑，是迈向<strong style="color:#222222">「人车家全生态」</strong>的关键跨越。这一刻，我的内心，激动不已，心潮澎湃。</span></p></blockquote><p><img height="243" src="https://oscimg.oschina.net/oscnet/up-1fead1c930f622a1877c21aa62d184206e2.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p><span style="background-color:#ffffff; color:#222222">雷军在公众号发文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FvjNBvY8Bn9Npnmisru_EKw" target="_blank">介绍</a></span><span style="color:#000000"><span style="background-color:#ffffff">称，</span><span style="background-color:#ffffff">2014 年，从 IoT 业务开始初具规模，该公司就开始了小米澎湃 OS 的探索式开发和验证。2017 年，全新系统研发工作正式开启，以一套融合的系统框架统一支持全生态设备与应用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">时至今日，小米澎湃 OS 正式诞生，秉承</span><strong style="color:rgba(0, 0, 0, 0.9)"><span style="background-color:#ffffff">「以人为中心，打造人车家全生态操作系统」。</span></strong><span style="background-color:#ffffff">基于深度进化的 Android 以及自研的 Vela 系统融合，彻底重写底层架</span><span style="background-color:#ffffff">构，为未来百亿设备、百亿连接做好了万物互联的公有底座。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-8c53666ec4b5313f3b5983d44ffe6a445b7.jpg" width="500" referrerpolicy="no-referrer"></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262088</guid>
            <link>https://www.oschina.net/news/262088</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心大模型 4.0 发布，较 GPT-4 毫不逊色]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="background-color:#ffffff; color:#222222">在百度世界 2023 大会上，百度创始人、董事长兼首席执行官李彦宏宣布文心大模型 4.0 正式发布，开启邀请测试。</span></p><p><span style="background-color:#ffffff; color:#222222">李彦宏表示，文心大模型 4.0 </span>是迄今为止最强大的文心大模型，实现了基础模型的全面升级，在理解、生成、逻辑和记忆能力上都有着明显提升，综合水平「与 GPT-4 相比毫不逊色」。</p><p><img height="230" src="https://oscimg.oschina.net/oscnet/up-cb21975862a8f7b014aeea47cbab52da1df.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">李彦宏在现场演示中用文心 4.0 撰写了一篇武侠小说，并将第四、五轮的生成内容与首轮小说框架结合，文心一言仍然「记得」最初生成的内容，李彦宏称，这展示了文心大模型 4.0 的记忆能力。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">目前文心 4.0 已同步开始邀测，现场观众扫描嘉宾证二维码，即可登录文心一言官网或文心一言 App，体验专业版。其<span style="background-color:#ffffff; color:#222222">随后将逐步面前全网开启公测。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 03:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262086</guid>
            <link>https://www.oschina.net/news/262086</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stack Overflow 裁员 28%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">Stack Overflow 是一家拥有 15 年历史的 IT 技术问答网站，其首席执行官 Prashanth Chandrasekar 近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.blog%2F2023%2F10%2F16%2Fstack-overflow-company-announcement-october-2023%2F" target="_blank">宣布</a>，该机构将裁员 28%。</span></p><p><span style="color:#000000">该公司没有具体说明有多少员工会受到影响，但其 LinkedIn 页面显示，目前该公司共拥有 501-1000 名员工，LinkedIn 上的员工数为 769，因此大概影响 215 名员工左右。</span></p><p><span style="color:#000000"><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-a695411b01f10f2f0c67268f263266606ca.webp" width="500" referrerpolicy="no-referrer"></span></p><blockquote><p><span style="color:#000000">在过去的 15 年中，我们将 Stack Overflow 打造成数百万开发人员和技术专家的行业重要知识库。在此期间，我们经历了充满机遇和挑战的岁月。今年也不例外，从为成功推出 OverflowAI 所做的不懈努力，到应对宏观经济压力对整个技术行业造成的客户预算转移的持续威胁。这也是为什么我们在致力于 Stack Overflow for Teams 的持续产品创新以及通过增强我们的人工智能/移动语言能力来确保公共平台健康发展的同时，还如此专注于盈利之路。今年，我们采取了许多措施来减少开支。我们从尽量减少对 Stacker 生活的影响的角度出发进行了改革。不幸的是，这些改变还不够，我们做出了一个极其艰难的决定，将公司员工人数减少约 28%。</span></p><p style="text-align:start"><span style="color:#000000">当我们结束本财年并进入下一个财年时，我们将重点投资于我们的产品。因此，我们在此期间将大幅缩减市场营销组织的规模。整个组织的支持团队和其他团队也会受到影响。正如我所提到的，我们本财年和下一财年的重点是盈利能力，这一点以及宏观经济压力导致了今天的变化。随着我们调整工作重点、优先事项和战略，我们将更好地满足用户、客户和合作伙伴的需求，这也是我们致力于产品创新和持续推动 OverflowAI 在 Stack Overflow for Teams 和我们的公共平台上发展的一部分。我们的新团队结构最有利于我们在这些举措方面取得成功。</span></p></blockquote><p><span style="color:#000000">面对&nbsp;Stack Overflow 的这一裁员之举，外界纷纷猜测该公司是受到了来自&nbsp;OpenAI 的 ChatGPT 的冲击。<span style="background-color:#ffffff">人工智能聊天助手 ChatGPT 崛起已经改变了开发者寻求编程帮助方式，能提供更为具体的帮助。</span></span></p><p><span style="color:#000000">伦敦和德国两地的一家初创公司创始人 Laura Wendel&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FLauramaywendel%2Fstatus%2F1713949264336847318%3Fs%3D20" target="_blank">发帖称<span style="color:#000000">，</span></a><span style="color:#000000">&nbsp;「这可能是第一次直接因 AI 导致的大规模裁员」，并例举了「大众向 ChatGPT 而不是 Stack Overflow 寻求问题答案」的例子。还贴出了一张图表，显示从 2023 年 4 月开始，Stack Overflow 的页面浏览量急剧下降；与此同时，聊天机器人正广受追捧。</span></p><p><span style="color:#000000"><strong>相关阅读：</strong></span></p><ul><li><a href="https://www.oschina.net/news/237758/stack-overflow-chatgpt" target="news">ChatGPT 的统治正在冲击 Stack Overflow？</a></li><li><a href="https://www.oschina.net/news/251072/the-fall-of-stack-overflow" target="news">Stack Overflow 访问量大幅下降，马斯克称其已被 LLM 取代</a></li><li><a href="https://www.oschina.net/news/251277/overflow-ai" target="news">Stack Overflow 推出 Overflow AI</a></li><li><a href="https://www.oschina.net/news/253044/chatgpt-stack-overflow-research" target="news">ChatGPT 和 Stack Overflow，谁的解答更胜一筹？</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforce</guid>
            <link>https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforce</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Disjob —— 分布式任务调度框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="project_detail_above_text_link_1" data-tracepid="project_detail_above_text_link"><a style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>Disjob 是一款分布式的任务调度框架，天然为支持分布式长任务执行而设计，它除了具备常规的任务调度功能外，还提供：任务拆分及分布式并行执行、暂停及取消运行中的任务、恢复执行被暂停的任务、任务执行失败重试、保存任务的执行快照 (Checkpoint)、任务依赖、任务编排 (DAG)、广播任务等能力。</p><p>以下是 Disjob 的整体流程图：</p><p><img alt="" src="https://gitee.com/dromara/disjob/raw/master/docs/images/architecture.jpg" referrerpolicy="no-referrer"></p><hr><p><strong>特性</strong></p><ul><li>分为管理器 (Supervisor) 和执行器 (Worker) 两种角色，Supervisor 与 Worker 可分离部署</li><li>Supervisor 与 Worker 通过注册中心相互发现，支持的注册中心有：Database、Redis、Consul、Nacos、Zookeeper、Etcd</li><li>Supervisor 负责生成任务，把任务派发给 Worker 执行，支持的任务派发方式有：Redis、Http</li><li>需要指定 Job 的分组 (job-group)，Job 的任务只会派发给指定组的 Worker 执行</li><li>提供拆分任务的能力，重写拆分方法<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/handle/JobSplitter.java">JobHandler#split</a>即可拆分为多个任务，实现分布式任务及并行执行</li><li>支持暂停和取消运行中的任务，已暂停的任务可恢复继续执行，执行失败的任务支持重试</li><li>支持任务保存 (savepoint) 其执行状态，让手动或异常暂停的任务能从上一次的执行状态中恢复继续执行</li><li>任务在执行时若抛出<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/exception/PauseTaskException.java">PauseTaskException</a>，会暂停对应实例下的全部任务 (包括分布在不同 worker 机器中的任务)</li><li>支持广播任务，广播任务会派发给 job-group 下的所有 worker 执行</li><li>支持 Job 间的依赖，多个 Job 配置好依赖关系后便会按既定的依赖顺序依次执行</li><li>支持 DAG 工作流，可把 jobHandler 配置为复杂的 DAG 表达式，如：A-&gt;B,C,(D-&gt;E)-&gt;D,F-&gt;G</li><li>提供 Web 管理后台，通过界面进行作业配置，任务监控等</li></ul><p><strong>项目结构</strong></p><pre><code>disjob                                        # 主项目①
├── disjob-admin                              # 管理后台项目②(基于 Ruoyi 框架二次开发)
├── disjob-bom                                # Maven project bom module
├── disjob-common                             # 公共的工具类模块
├── disjob-core                               # 任务调度相关的核心类（如数据模型、枚举类、抽象层接口等）
├── disjob-dispatch                           # 任务派发模块
│   ├── disjob-dispatch-api                   # 任务派发的抽象接口层
│   ├── disjob-dispatch-http                  # 任务派发的 Http 实现
│   └── disjob-dispatch-redis                 # 任务派发的 Redis 实现
├── disjob-id                                 # 分布式 ID 生成模块
├── disjob-registry                           # Server(Supervisor &amp; Worker) 注册模块
│   ├── disjob-registry-api                   # Server 注册中心的抽象接口层
│   ├── disjob-registry-consul                # Server 注册中心：Consul 实现
│   ├── disjob-registry-database              # Server 注册中心：Database 实现
│   ├── disjob-registry-etcd                  # Server 注册中心：Etcd 实现
│   ├── disjob-registry-nacos                 # Server 注册中心：Nacos 实现
│   ├── disjob-registry-redis                 # Server 注册中心：Redis 实现
│   └── disjob-registry-zookeeper             # Server 注册中心：Zookeeper 实现
├── disjob-reports                            # 聚合各个模块的测试覆盖率报告
├── disjob-samples                            # Samples 项目③
│   ├── disjob-samples-frameless-worker       # Worker 单独部署的范例（普通 Java-main 应用）
│   ├── disjob-samples-springboot-common      # Samples Spring-boot 公共模块
│   ├── disjob-samples-springboot-merged      # Supervisor 与 Worker 合并部署的范例（Spring-boot 应用）
│   ├── disjob-samples-springboot-supervisor  # Supervisor 单独部署的范例（Spring-boot 应用）
│   └── disjob-samples-springboot-worker      # Worker 单独部署的范例（Spring-boot 应用）
├── disjob-supervisor                         # Supervisor 代码
├── disjob-test                               # 用于辅助测试
└── disjob-worker                             # Worker 代码</code></pre></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/disjob</guid>
            <link>https://www.oschina.net/p/disjob</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 任天堂红白机模拟器 Nes4j]]>
            </title>
            <description>
                <![CDATA[<div align="center"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/build/icon/nes4j.png" alt="Nes4j logo" width="200" height="auto" referrerpolicy="no-referrer"><h1><a id="nes4j" class="anchor" href="https://gitee.com/navigatorCode/nes4j#nes4j"></a>Nes4j</h1><p>任天堂红白机模拟器</p></div><div align="center"><h3><a id="--english-document--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--english-document--"></a><a href="https://gitee.com/navigatorCode/nes4j/blob/master/README.md">English Document</a></h3><h3><a id="--github 仓库--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--github%E4%BB%93%E5%BA%93--"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGZYangKui%2Fnes4j">github 仓库</a></h3><img src="https://github.com/GZYangKui/nes4j/actions/workflows/maven.yml/badge.svg" alt="Build status" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-Apache%202.0-blue" alt="Apache 2.0" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/I18n-Support-orange.svg" alt="I18n support" referrerpolicy="no-referrer"><img src="https://badgen.net/github/stars/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="stars" referrerpolicy="no-referrer"><img src="https://badgen.net/github/forks/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="forks" referrerpolicy="no-referrer"><br></div><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Main.png" alt="nes4j" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/DuckTables.png" alt="DuckTables" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Super%20Mario.png" alt="Super Mario" referrerpolicy="no-referrer"></p><h2><a id="项目介绍" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p><strong>nes4j</strong>是使用 java 语言实现任天堂红白机模拟器,主要包括<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FCPU">CPU</a>、
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FPPU_programmer_reference">PPU</a>和<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FAPU">APU</a>三部分组成.其中 PPU 是红白机
实现难度最大的一个模块,理解起来有点困难.</p><h2><a id="项目结构" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84"></a>项目结构</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">nes4j</span><span id="LC2" class="line">├── app UI 模块 (javafx)</span><span id="LC3" class="line">├── bin 模拟器核心模块 (CPU/PPU/APU)</span><span id="LC4" class="line">└── document 开发文档</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="快速启动" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8"></a>快速启动</h2><h3><a id="下载项目" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE"></a>下载项目</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://gitee.com/navigatorCode/nes4j.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="启动项目" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE"></a>启动项目</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"> mvn run</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="已实现卡带 mapper" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%B7%B2%E5%AE%9E%E7%8E%B0%E5%8D%A1%E5%B8%A6mapper"></a>已实现卡带 Mapper</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FNROM">NROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FUxROM">UxROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FINES_Mapper_003">CNROM</a></li></ul><blockquote><p>更多卡带 Mapper 正在实现中,敬请期待。</p></blockquote><h2><a id="自定义音视频输出" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E8%A7%86%E9%A2%91%E8%BE%93%E5%87%BA"></a>自定义音视频输出</h2><blockquote><p>如果你觉得当前游戏输出程序无法满足你的需求,你可以给我们提 PR,我们会尽可能满足你的需求,另外一种方法就是你自己引入 nes4j-bin 模块自己实现
游戏视屏和音频输出</p></blockquote><h3><a id="首先引入依赖" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A6%96%E5%85%88%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96"></a>首先引入依赖</h3><ul><li>Apache Maven</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;groupId&gt;</span>cn.navclub<span class="nt">&lt;/groupId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;artifactId&gt;</span>nes4j-bin<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;version&gt;</span>1.0.2<span class="nt">&lt;/version&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(groovy)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="nl">group:</span><span class="s1">'cn.navclub'</span><span class="o">,</span><span class="nl">name:</span><span class="s1">'nes4j-bin'</span><span class="o">,</span><span class="nl">version:</span><span class="s1">'1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>or</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="s1">'cn.navclub:nes4j-bin:1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(Kotlin)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nf">implementation</span><span class="p">(</span><span class="s">"cn.navclub:nes4j-bin:1.0.2"</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="创建 nes 实例并初始化" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%88%9B%E5%BB%BAnes%E5%AE%9E%E4%BE%8B%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96"></a>创建 NES 实例并初始化</h3><ul><li>GameWorld.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.NES</span><span class="o">;</span></span><span id="LC3" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.io.JoyPad</span><span class="o">;</span></span><span id="LC4" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.ppu.Frame</span><span class="o">;</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">GameWorld</span><span class="o">{</span></span><span id="LC7" class="line"><span class="kd">public</span><span class="no">NES</span><span class="nf">create</span><span class="o">()</span><span class="o">{</span></span><span id="LC8" class="line"><span class="no">NES</span><span class="n">instance</span><span class="o">=</span><span class="no">NES</span><span class="o">.</span><span class="na">NESBuilder</span></span><span id="LC9" class="line"><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span></span><span id="LC10" class="line"><span class="c1">//nes 游戏 rom</span></span><span id="LC11" class="line"><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">file</span><span class="o">)</span></span><span id="LC12" class="line"><span class="c1">//音频输出程序 </span></span><span id="LC13" class="line"><span class="o">.</span><span class="na">player</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">)</span></span><span id="LC14" class="line"><span class="c1">//Game loop 回调</span></span><span id="LC15" class="line"><span class="o">.</span><span class="na">gameLoopCallback</span><span class="o">(</span><span class="nc">GameWorld</span><span class="o">.</span><span class="na">this</span><span class="o">::</span><span class="n">gameLoopCallback</span><span class="o">)</span></span><span id="LC16" class="line"><span class="o">.</span><span class="na">build</span><span class="o">();</span></span><span id="LC17" class="line"><span class="k">try</span><span class="o">{</span></span><span id="LC18" class="line"><span class="c1">//一旦当前方法被调用将会阻塞当前线程直到游戏结束或者异常发生</span></span><span id="LC19" class="line"><span class="n">instance</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span></span><span id="LC20" class="line"><span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span><span class="n">e</span><span class="o">)</span><span class="o">{</span></span><span id="LC21" class="line"><span class="c1">//todo 当异常发生当前游戏立即停止</span></span><span id="LC22" class="line"><span class="o">}</span></span><span id="LC23" class="line"><span class="o">}</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="c1">//当 PPU 输出一帧视屏时回调该函数</span></span><span id="LC26" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">gameLoopCallback</span><span class="o">(</span><span class="nc">Frame</span><span class="n">frame</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad1</span><span class="o">)</span><span class="o">{</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="o">}</span></span><span id="LC29" class="line"><span class="o">}</span></span><span id="LC30" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>JavaXAudio.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"all"</span><span class="o">)</span></span><span id="LC3" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">JavaXAudio</span><span class="kd">implements</span><span class="nc">Player</span><span class="o">{</span></span><span id="LC4" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kt">byte</span><span class="o">[]</span><span class="n">sample</span><span class="o">;</span></span><span id="LC5" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">Line</span><span class="o">.</span><span class="na">Info</span><span class="n">info</span><span class="o">;</span></span><span id="LC6" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">AudioFormat</span><span class="n">format</span><span class="o">;</span></span><span id="LC7" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">SourceDataLine</span><span class="n">line</span><span class="o">;</span></span><span id="LC8" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">ldx</span><span class="o">;</span></span><span id="LC9" class="line"><span class="c1">//当前填充下标</span></span><span id="LC10" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">index</span><span class="o">;</span></span><span id="LC11" class="line"><span class="kd">private</span><span class="nc">Thread</span><span class="n">thread</span><span class="o">;</span></span><span id="LC12" class="line"><span class="kd">private</span><span class="kd">volatile</span><span class="kt">boolean</span><span class="n">stop</span><span class="o">;</span></span><span id="LC13" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">SAMPLE_SIZE</span><span class="o">=</span><span class="mi">735</span><span class="o">*</span><span class="mi">2</span><span class="o">;</span></span><span id="LC14" class="line"><span class="c1">//音频默认缓存区大小为 32kb</span></span><span id="LC15" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">DEF_BUF_SIZE</span><span class="o">=</span><span class="mi">32</span><span class="o">*</span><span class="mi">1024</span><span class="o">;</span></span><span id="LC16" class="line"></span><span id="LC17" class="line"><span class="kd">private</span><span class="kd">static</span><span class="kd">final</span><span class="nc">LoggerDelegate</span><span class="n">log</span><span class="o">=</span><span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">logger</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></span><span id="LC18" class="line"></span><span id="LC19" class="line"></span><span id="LC20" class="line"><span class="kd">public</span><span class="nf">JavaXAudio</span><span class="o">()</span><span class="kd">throws</span><span class="nc">LineUnavailableException</span><span class="o">{</span></span><span id="LC21" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC22" class="line"><span class="k">this</span><span class="o">.</span><span class="na">format</span><span class="o">=</span><span class="k">new</span><span class="nc">AudioFormat</span><span class="o">(</span><span class="mi">44100</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span></span><span id="LC23" class="line"><span class="k">this</span><span class="o">.</span><span class="na">info</span><span class="o">=</span><span class="k">new</span><span class="nc">DataLine</span><span class="o">.</span><span class="na">Info</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">format</span><span class="o">);</span></span><span id="LC24" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">=</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">)</span><span class="nc">AudioSystem</span><span class="o">.</span><span class="na">getLine</span><span class="o">(</span><span class="n">info</span><span class="o">);</span></span><span id="LC25" class="line"></span><span id="LC26" class="line"><span class="n">line</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">format</span><span class="o">);</span></span><span id="LC27" class="line"><span class="n">line</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">((</span><span class="k">this</span><span class="o">::</span><span class="n">exec</span><span class="o">));</span></span><span id="LC30" class="line"><span class="o">}</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="nd">@Override</span></span><span id="LC33" class="line"><span class="kd">public</span><span class="kd">synchronized</span><span class="kt">void</span><span class="nf">output</span><span class="o">(</span><span class="kt">byte</span><span class="n">sample</span><span class="o">)</span><span class="o">{</span></span><span id="LC34" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">++]</span><span class="o">=</span><span class="n">sample</span><span class="o">;</span></span><span id="LC35" class="line"><span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lcalculate</span><span class="o">()</span><span class="o">&gt;</span><span class="no">SAMPLE_SIZE</span><span class="o">&amp;&amp;</span><span class="n">thread</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span><span class="o">{</span></span><span id="LC36" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC37" class="line"><span class="o">}</span></span><span id="LC38" class="line"><span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="no">DEF_BUF_SIZE</span><span class="o">;</span></span><span id="LC39" class="line"><span class="o">}</span></span><span id="LC40" class="line"></span><span id="LC41" class="line"></span><span id="LC42" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">exec</span><span class="o">()</span><span class="o">{</span></span><span id="LC43" class="line"><span class="kt">var</span><span class="n">arr</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC44" class="line"><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">=</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span></span><span id="LC45" class="line"><span class="k">while</span><span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">)</span><span class="o">{</span></span><span id="LC46" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">park</span><span class="o">();</span></span><span id="LC47" class="line"><span class="kd">final</span><span class="kt">int</span><span class="n">length</span><span class="o">;</span></span><span id="LC48" class="line"><span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span><span class="o">{</span></span><span id="LC49" class="line"><span class="n">length</span><span class="o">=</span><span class="n">lcalculate</span><span class="o">();</span></span><span id="LC50" class="line"><span class="k">if</span><span class="o">((</span><span class="n">length</span><span class="o">+</span><span class="n">ldx</span><span class="o">&gt;</span><span class="no">DEF_BUF_SIZE</span><span class="o">))</span><span class="o">{</span></span><span id="LC51" class="line"><span class="kt">var</span><span class="n">tmp</span><span class="o">=</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC52" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">tmp</span><span class="o">);</span></span><span id="LC53" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="n">tmp</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">);</span></span><span id="LC54" class="line"><span class="o">}</span><span class="k">else</span><span class="o">{</span></span><span id="LC55" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC56" class="line"><span class="o">}</span></span><span id="LC57" class="line"><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">;</span></span><span id="LC58" class="line"><span class="o">}</span></span><span id="LC59" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC60" class="line"><span class="o">}</span></span><span id="LC61" class="line"><span class="o">}</span></span><span id="LC62" class="line"></span><span id="LC63" class="line"><span class="kd">private</span><span class="kt">int</span><span class="nf">lcalculate</span><span class="o">()</span><span class="o">{</span></span><span id="LC64" class="line"><span class="kt">var</span><span class="n">len</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC65" class="line"><span class="k">if</span><span class="o">(</span><span class="n">len</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span><span class="o">{</span></span><span id="LC66" class="line"><span class="k">return</span><span class="n">len</span><span class="o">;</span></span><span id="LC67" class="line"><span class="o">}</span></span><span id="LC68" class="line"><span class="k">return</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="n">ldx</span><span class="o">+</span><span class="n">index</span><span class="o">;</span></span><span id="LC69" class="line"><span class="o">}</span></span><span id="LC70" class="line"></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="nd">@Override</span></span><span id="LC73" class="line"><span class="kd">public</span><span class="kt">void</span><span class="nf">stop</span><span class="o">()</span><span class="o">{</span></span><span id="LC74" class="line"><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span></span><span id="LC75" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC76" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">close</span><span class="o">();</span></span><span id="LC77" class="line"><span class="o">}</span></span><span id="LC78" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="参与贡献" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>参与贡献</h2><p>我们强烈欢迎有兴趣的开发者参与到项目建设中来，同时欢迎大家对项目提出宝贵意见建议和功能需求，项目正在积极开发，欢迎 PR 👏。</p><h2><a id="版权说明" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E"></a>版权说明</h2><p>目前市场上绝大部分游戏版权为<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nintendo.com%2F">任天堂</a>所有,请勿在未取得任天堂授权的情况下私自分发游戏.
如果因此引发的任何侵权行为均与本软件无关.如果本软件中设计任何侵权素材请发送邮件到<a href="mailto:GZYangKui@126.com">GZYangKui@126.com</a>通知我删除对应侵权素材.</p><h2><a id="文档" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%96%87%E6%A1%A3"></a>文档</h2><p>如果你也想编写自己的模拟器或想了解模拟器内部结构,以下资源可以给你提供一些模拟器基础知识:</p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fnesdev.com%2FNESDoc.pdf">NES Documentation (PDF)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwiki.nesdev.com%2Fw%2Findex.php%2FNES_reference_guide">NES Reference Guide (Wiki)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.obelisk.me.uk%2F6502%2Freference.html">6502 CPU Reference</a></li></ul><h3><a id="汇编调试实验功能" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%B1%87%E7%BC%96%E8%B0%83%E8%AF%95%E5%AE%9E%E9%AA%8C%E5%8A%9F%E8%83%BD"></a>汇编调试 (实验功能)</h3><blockquote><p>主界面 -&gt; 工具 -&gt; 调试</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/assemblera.png" alt="Assembler" referrerpolicy="no-referrer"></p><blockquote><p>程序内存快照 (内存)</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/MemoryView.png" alt="Assembler" referrerpolicy="no-referrer"></p><h2><a id="技术交流学习" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%AD%A6%E4%B9%A0"></a>技术交流学习</h2><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/document/im_qq.jpg" alt="qq" referrerpolicy="no-referrer"></p><h2><a id="特别感谢" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E7%89%B9%E5%88%AB%E6%84%9F%E8%B0%A2"></a>特别感谢</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.jetbrains.com%2F">Jetbrain</a></td><td>免费提供全套集成开发环境</td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fforums.nesdev.org%2F">NES forum</a></td><td>提供技术支持</td></tr></tbody></table>]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/navigatorCode/nes4j</guid>
            <link>https://gitee.com/navigatorCode/nes4j</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Trino 容错模式深度测评与思考]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411218%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">走向批处理-交互式分析一体化： Trino 容错模式深度测评与思考</a>》，作者：HetuEngine 九级代言 。</p><p><strong>本文系华为云大数据研发团队原创，原创作者：文博，梦月</strong></p><span id="OSC_h1_1"></span><h1>1 Trino 简介</h1><p>2020 年 12 月 27 日，Presto 社区大佬们——Martin Traverso、 Dain Sundstrom 以及 David Phillips 宣布将开源项目 PrestoSQL 的名字更名为 TrinoDB（本文简称 Trino）。</p><p>Trino 是一款开源的高性能、分布式 SQL 查询引擎，专门用于对各种异构数据源运行交互式分析查询，支持从 GB 到 PB 的数据量范围。Trino 专门为交互式分析而设计，可以对来自不同数据源的数据（包括：Hive、AWS S3、Alluxio、MySQL、Kafka、ES 等等）进行合并查询，并提供良好的自定义连接器编程扩展框架。适用于期望响应时间从亚秒到数分钟不等的分析师场景。</p><p><img alt="1.PNG" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695110884831740337.PNG" referrerpolicy="no-referrer"></p><p>在诞生之初，Trino 是为了填补当时 Facebook 内部实时查询和 ETL 处理之间的空白。Trino 的核心目标就是提供交互式查询，也就是我们常说的 Ad-Hoc Query，很多公司都使用它作为 OLAP 计算引擎。近年来业务场景越来越复杂，除了交互式查询场景，很多公司也需要兼顾批处理作业，技术大佬们开始思考如何用 Trino 来进行大数据集的批加工处理。</p><span id="OSC_h1_2"></span><h1>2 传统 Trino 架构的局限性</h1><p>在传统 Trino 运行架构中，Trino 预先规划了处理特定查询的所有 task 。这些 task 彼此关联，一项 task 的结果是下一项 task 的输入。对于 MPP 引擎来说，这种相互依赖是必要的。一旦任何任务在此过程中失败，就会破坏整个任务链条，导致整个 SQL 执行退出。</p><p>Trino 执行 SQL 任务过程如下图（来自 Trino 官网）：</p><p><img alt="2.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111024056590140.png" referrerpolicy="no-referrer"></p><p><strong>优点：</strong></p><p>数据通过 task 进行流式传输，没有中间检查点，高吞吐低延迟</p><p><strong>不足：</strong></p><ul><li>缺乏细粒度的故障回复，出现问题只能从头运行整个 Query</li><li>完全依赖内存资源进行数据装载和交换</li><li>执行规划一旦确定就无法根据实际执行进展灵活调整</li></ul><span id="OSC_h1_3"></span><h1>3 Trino 容错执行架构（FTE）</h1><p>Trino 开源社区设计了一种新的容错执行架构（fault-tolerant execution architecture），它允许我们实现具有细粒度重试的高级资源感知调度（advanced resource-aware scheduling）。该项目代号为「Tardigrade」。</p><p>Tardigrade 项目旨在打破原有的全有或全无的执行障碍。它为资源管理、自适应查询优化和故障恢复带来了许多新的机会。该项目以水熊虫命名 ，水熊虫是世界上最坚不可摧的生物，类似于 FTE 为 Trino 带来的鲁棒性。</p><p><img alt="3.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111069158719757.png" referrerpolicy="no-referrer"></p><p>以下是 Tardigrade 项目带来的一些直观效果：</p><ul><li>当长时间运行的 SQL Query 遇到故障时，不必从头开始运行；</li><li>当 Query 需要的内存超过集群中当前可用的内存时，仍然能够运行成功；</li><li>当多个 Query 同时提交时，它们能够以公平的方式共享资源，并稳步运行</li></ul><p>从代码实现角度看， Trino 直接在内核中实现了 task 级容错、自动重试、shuffle 等核心功能。如下图所示（来自 Trino 官网）：</p><p><img alt="4.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111096042877403.png" referrerpolicy="no-referrer"></p><p>Trino 会将一个 Query 执行分成多个 stage。在容错模式下，上游 stage 的 shuffle 数据会进行落盘（支持写到 AWS S3、HDFS 及本地存储）。下游 stage 从中间存储里读取所需要的数据，并在该过程中对后续 task 任务进行重新优化与分配。</p><p><img alt="5.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111122989942394.png" referrerpolicy="no-referrer"></p><p><strong>带来的改进：</strong></p><ul><li><strong>适应性规划</strong>：可以在缓冲数据时，动态调整查询计划</li><li><strong>资源管理</strong>：在查询运行时调整资源分配。当集群空闲时，我们可以允许单个查询利用集群上的所有可用资源。当更多工作负载开始时，可​​以逐渐减少初始查询的资源分配。</li><li><strong>细粒度的故障恢复</strong>：允许透明地重启失败的任务，使得 ETL 完成时间更可预测。</li></ul><p>接下来，本文将带各位深入体验 Trino 容错执行模式。</p><span id="OSC_h1_4"></span><h1>4 基础性能测试</h1><p>首先在计算资源充足的场景下进行基础性能测试。选取 1TB 数据量的 TPCDS，计算资源规格为 2CN+16Worker 136GB/进程，测试开启容错前后，执行 TPCDS99，耗时统计如下：</p><p><img alt="6.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111179677854014.png" referrerpolicy="no-referrer"></p><p>测试写入性能选择 TPCDS 表中最大的表 catalog_sales 测试写入性能，SQL 为：</p><p><em>--- create table catalog_sales_copy as select * from catalog_sales;</em></p><p><strong>测试数据如下：</strong></p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>数据集</strong></p></td><td><p><strong>计算资源</strong></p></td><td><p><strong>执行耗时（单位：秒）</strong></p></td></tr><tr><td><p><strong>不开容错和</strong><strong>spill</strong></p></td><td><p><strong>Task</strong><strong>容错</strong></p></td><td><p><strong>Task</strong><strong>容错+spill</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,20GB/进程</p></td><td><p>622.2</p></td><td><p>673</p></td><td><p>687</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/进程</p></td><td><p>3445</p></td><td><p>1485</p></td><td><p>1486</p></td></tr></tbody></table><p><strong>小结：</strong></p><ul><li>开启 Task 容错会进行中间交换区结果落盘，存在性能损耗，执行耗时约为之前的 2 倍；</li><li>Query 容错没有落盘的过程，与不开启容错性能持平。</li><li>1TB 数据集时，Task 容错写入性能也会有 8%-10% 损耗，但在 10TB 数据集时反而有性能提升，待深入分析；</li></ul><span id="OSC_h1_5"></span><h1>5 大数据量场景的稳定性测试</h1><p>本节将在计算资源严重不足的场景下进行 TPCDS 压力测试。测试结果如下：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>数据量</strong></p></td><td><p><strong>计算资源</strong></p></td><td><p><strong>错误率</strong></p></td></tr><tr><td><p><strong>不开容错</strong></p></td><td><p><strong>Task</strong><strong>容错</strong></p></td><td><p><strong>Task</strong><strong>容错+<br> spill to disk</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,40GB/进程</p></td><td><p>7.07%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,20GB/进程</p></td><td><p>12.12%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,10GB/进程</p></td><td><p>16.16%</p></td><td><p>4.04%</p></td><td><p>0%</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/进程</p></td><td><p>8.08%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>50TB</p></td><td><p>1CN+16Worker,136GB/进程</p></td><td><p>13.13%</p></td><td><p>6.06%</p></td><td><p>5.05%</p></td></tr></tbody></table><p><strong>小结：</strong></p><ul><li>内存不足情况下使用 Task 容错，能够大幅度提高 SQL 执行成功率。与 spill to disk 特性结合使用能带来更好的容错效果；</li><li>在 50TB 数据集时，Task 容错仍然能够提高执行成功率，但某些复杂 SQL 可能会存在单点瓶颈。目前观察到主要是单点聚合瓶颈。</li></ul><span id="OSC_h1_6"></span><h1>6 高并发场景测试</h1><span id="OSC_h2_7"></span><h2>6.1 1TB TPCD 标准数据集</h2><p>计算资源规格：1CN+8Worker，136GB/进程</p><p>测试 SQL 用例： Q01（多事实表关联查询，即 TPCDS99 中的 Q29）</p><p>测试结果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>测试场景</strong></p></td><td><p><strong>1</strong><strong>并发</strong></p></td><td><p><strong>100</strong><strong>并发</strong></p></td><td><p><strong>200</strong><strong>并发</strong></p></td></tr><tr><td><p>不开启容错</p></td><td><p>QUERY 容错</p></td><td><p>TASK 容错</p></td><td><p>不开启容错</p></td><td><p>QUERY 容错</p></td><td><p>TASK 容错</p></td><td><p>不开启容错</p></td><td><p>QUERY 容错</p></td><td><p>TASK 容错</p></td></tr><tr><td><p>多表关联查询（多事实表）Q01-1 轮</p></td><td><p>4.1/min</p></td><td><p>5.2/min</p></td><td><p>2.6/min</p></td><td><p>7.3/min</p></td><td><p>7.2/min</p></td><td><p>8.1/min</p></td><td><p>17.50% 失败</p></td><td><p>18% 失败</p></td><td><p>7.9/min</p></td></tr><tr><td><p>多表关联查询（多事实表）Q01-5 轮</p></td><td><p>5.2/min</p></td><td><p>4.8/min</p></td><td><p>3.4/min</p></td><td><p>8.3/min</p></td><td><p>8.6/min</p></td><td><p>8.6/min</p></td><td><p>64.9% 失败</p></td><td><p>74.9% 失败</p></td><td><p>8.5/min</p></td></tr></tbody></table><p><img alt="7.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114254782786537.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_8"></span><h2>6.2 10TB TPCD 标准数据集</h2><p>计算资源规格：1CN+8Worker，136GB/进程</p><p>测试 SQL 用例：</p><p>单表多列聚合排序查询 Q02：</p><p><strong>select</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk,</li><li>sum(ws_sales_price) total</li></ul><p><strong>from</strong></p><ul><li>web_sales</li></ul><p><strong>where</strong></p><ul><li>ws_sold_date_sk &gt;= 2450815</li><li>and ws_sold_date_sk &lt;= 2451179</li></ul><p><strong>group by</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk</li></ul><p><strong>having</strong></p><ul><li>sum(ws_sales_price) &gt; 0</li></ul><p><strong>order by</strong></p><ul><li>total desc</li></ul><p><strong>limit 100;</strong></p><p>开启 TASK 容错全部能够执行成功。测结果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>测试场景</strong></p></td><td><p><strong>1</strong><strong>并发</strong></p></td><td><p><strong>100</strong><strong>并发</strong></p></td><td><p><strong>200</strong><strong>并发</strong></p></td><td><p><strong>300</strong><strong>并发</strong></p></td><td><p><strong>400</strong><strong>并发</strong></p></td></tr><tr><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td></tr><tr><td><p>单表多列聚合排序查询 Q02_1 轮</p></td><td><p>3.3/min</p></td><td><p>1.3/min</p></td><td><p>7.9/min</p></td><td><p>5.7/min</p></td><td><p>9.7/min</p></td><td><p>8.8/min</p></td><td><p>8.5/min</p></td><td><p>5.9/min</p></td><td><p>97.25% 失败</p></td><td><p>6.8/min</p></td></tr><tr><td><p>单表多列聚合排序查询 Q02_5 轮</p></td><td><p>7.1/min</p></td><td><p>2.0/min</p></td><td><p>10.7/min</p></td><td><p>9.5/min</p></td><td><p>10.3/min</p></td><td><p>9.3/min</p></td><td><p>8.20% 失败</p></td><td><p>8.0/min</p></td><td><p>99.1% 失败</p></td><td><p>6.6/min</p></td></tr></tbody></table><p><strong>小结：</strong></p><p>Task 容错能够提升 Trino 引擎的并发上限，很大程度上减少诸如「Encountered too many errors talking to a worker node.」报错的产生。</p><span id="OSC_h1_9"></span><h1>7 多个引擎横向对比测试</h1><p>首先从 TPCDS99 中挑选出计算资源受限前提下，Trino 不开启容错 100% 会跑失败的 SQL 用例，包括：</p><p>Q04，Q11，Q23，Q38，Q64，Q65，Q67，Q74，Q75，Q78，Q80，Q81，Q85，Q87，Q93，Q95，Q97</p><p>基于相同计算资源（内存、CPU、Container 个数），横向对比 Trino、Spark、Hive(TEZ) 的性能表现。</p><p>注：测试 Trino 时实际采用的是华为云 HetuEngine 2.0 的内核版本。</p><span id="OSC_h2_10"></span><h2>7.1 1TB TPCD 标准数据集</h2><p>&nbsp;</p><p><img alt="8.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112918036114849.png" referrerpolicy="no-referrer"></p><p>可看出，在 1TB 数据量、使用相同资源情况下，开启 Task 容错，Trino 能够将原先跑失败的 SQL 执行成功，且性能约为 Spark 的 3 倍左右，是 Hive(TEZ) 的数十倍。</p><span id="OSC_h2_11"></span><h2>7.2 10TB TPCDS 标准数据集</h2><p>针对 10TB TPCDS 标准数据集，进行对比测试：</p><p><img alt="9.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112947034508561.png" referrerpolicy="no-referrer"></p><p>可看出，在 10TB 数据量、使用相同资源情况下，开启 Task 容错，Trino 能够将原先跑失败的 SQL 执行成功，且性能约为 Spark 的 3 倍左右。</p><span id="OSC_h1_12"></span><h1>8 综合评价</h1><p><strong>综上，基于测试数据总结归纳如下——</strong></p><p><strong>单并发基础性能</strong></p><ol><li>内存资源充足：不开启容错 = Query 容错 &gt; Task 容错</li><li>内存资源不足：Task 容错可以跑过，不开启容错/Query 容错跑不出结果</li></ol><p><strong>大数据量场景的稳定性</strong></p><p>Task 容错 + spill to disk &gt; Task 容错 &gt; 不开启容错</p><ul><li>1-10TB 数据集：Task 容错的表现很稳定，通过率 100%</li><li>50TB 数据集： 结合使用 Task 容错、spill to disk 相比单独用 Task 容错表现更好 (少失败 1 个用例)</li></ul><p><strong>并发场景的稳定性</strong></p><p>Task 容错 &gt; 不开启容错</p><p><strong>多个引擎横向性能对比</strong></p><ul><li>1TB TPCDS 数据集：Trino(Task 容错) &gt; Spark &gt; Hive(TEZ)</li><li>10TB TPCDS 数据集：Trino (Task 容错) &gt; Spark</li></ul><p>总体而言，Trino 的 FTE 功能在性能、稳定性维度的测试表现超出了预期。随着该能力的逐步演进与完善，相信 Trino 将在一站式数据加工与分析场景发挥出更大的价值。</p><span id="OSC_h1_13"></span><h1>9 思考与改进</h1><p>在拥有了第一手的测试数据与分析结论后，接下来我们将思考如何利用好 Trino 容错模式，最大化的发挥其价值，同时要提前识别可能存在的问题，探索解决之道。</p><span id="OSC_h2_14"></span><h2>9.1 容错模式启用决策</h2><p>从前面的测试数据可以看出，开启容错模式对于短查询性能存在一定的影响（对大查询性能反而存在优化的可能）。因此需要思考何时、何种方式来开启容错模式。</p><p>有如下思路可供选择——</p><ul><li><strong>用户自主择机启用</strong></li></ul><p>最简单的办法就是让业务用户自主择机选择启用或者关闭容错模式。通常情况下，有经验的用户知道哪些查询可能是计算量大或者运行时间久的查询。他们可以通过改变 JDBC 连接的 session 参数来实现在「交互式模式」和「容错模式」之间灵活切换；</p><ul><li><strong>基于代价决策</strong></li></ul><p>可以基于 SQL 执行的预测代价来决定是否开启「容错模式」。一般来说，这个技术需要依赖实现统计获得的列级别统计信息。然而，列级别统计信息有时候是不可用的，而且基于代价估算的预测精度往往不够理想；</p><ul><li><strong>自适应选择技术</strong></li></ul><p>默认情况下，查询可以「交互式模式」启动，然后在运行 N 分钟后，经过一段时间学习后，由引擎内核根据可用资源情况、业务特点等维度信息，自主决策启动或关闭「容错模式」。这个思路需要将 Trino 引擎与机器学习、AI 技术结合起来，践行数智融合路线；</p><ul><li><strong>基于历史信息决策</strong></li></ul><p>针对特定数据源的某些类型的查询，可以预先收集历史运行记录并进行分析建模。基于事先学习掌握的先验知识模型，在 SQL 执行前选择最优的执行模式。</p><span id="OSC_h2_15"></span><h2>9.2 水平扩展规模应用</h2><p>Trino 具备了容错执行模式，测试数据显示效果不错，那么接下来大家就会思考：是否可以基于该能力提供更大规模的分析查询加速服务呢？</p><p>实际业务场景中，企业可能需要按需进行任务提交与弹性资源调度，尤其是在大规模、云原生环境中，即使开启容错模式，对於单个 Trino 集群，其协调节点（Coordinator）依然可能存在并发能力的瓶颈。此外，从软件架构角度看，单一 Trino 集群的可用性也存在一定的风险，影响云服务环境下的 SLA 目标达成。</p><p>针对上述问题，华为云交互式分析引擎 HetuEngine 提供了三层分布式架构，通过统一的 SQL 访问入口——<strong>HSFabric</strong>来向业务提供全局唯一的<strong>JDBC</strong>服务地址。</p><p><img alt="10.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113244022274958.png" referrerpolicy="no-referrer"></p><p>通过 HSFabric 统一 SQL 访问入口，HetuEngine 实现了将业务层逻辑与某个特定的计算实例解耦，单个资源租户内部可以横向扩展多个计算实例，同一个租户内部的 SQL 任务可以在不同计算实例间灵活分配。</p><p>无论从多租户还是单一租户角度看，HetuEngine 的并发容量可水平扩展，同时也提升了服务可用性和资源利用率。</p><p>基于上述架构，HetuEngine 支持服务管理员自由决定是否开启/关闭单个租户的容错执行模式，以便更好的满足不同场景的业务诉求。</p><p><img alt="11.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114116664351503.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_16"></span><h2>9.3 故障处理与恢复</h2><p>在 Trino 容错执行过程中，Stage 间的 Shuffle 数据会大量落入到分布式文件系统上。这里以 HDFS 为例进行讨论可能存在问题。</p><p>假设——1 个大 SQL 在执行过程中，Trino 正在往 HDFS 上写 shuffle 数据，突然 Trino 所在物理机节点发生意外（比如，停电、断网、操作系统崩溃等），或者 Trino 本身出现故障停止工作（比如，过载等）。这可能会导致整个 Trino 集群都彻底停止工作。此时，需要管理员人工介入才能重新恢复 Trino 集群的正常工作状态。</p><p>显而易见，对 Trino 来说，至少存在 2 个问题需要思考和解决：</p><ul><li>如何实现 Trino 集群的应急快速恢复</li><li>确保 HDFS 上的残留文件及时被清理，避免存储空间耗尽</li></ul><p>华为云交互式分析引擎 HetuEngine 基于三层服务化+容器化架构，可有效应对上述挑战：</p><p><strong><u>针对问题 1</u></strong><strong>：</strong></p><p>借助于全容器化的部署架构，HetuEngine 的任一计算实例（对应于 1 个分布式 Trino 集群）中的任一软件进程在发生故障/意外时，均可由 Service 层快速自动拉起新的容器进程来接管和补齐服务缺失，在人工介入前快速完成故障自愈。</p><p>在可用资源可能存在不足时，HetuEngine 支持计算实例在线弹性伸缩，通过自动调整 Worker 数量来动态平衡资源利用率，快速补充因故障而丢失的 Worker 节点资源。</p><p>在 Coordinator 节点发生故障时，HetuEngine 从三方面入手进行应对——</p><ol><li>同一计算实例中的 Worker 节点立即与备 Coordinator 进行组网；</li><li>备 Coordinator 升为新的主 Coordinator；</li><li>统一 SQL 入口立即将新的 SQL 请求引流到新的主 Coordinator</li></ol><p><img alt="12.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113305047480491.png" referrerpolicy="no-referrer"></p><p><strong><u>针对问题 2</u></strong><strong>：</strong></p><p>HetuEngine 的 Service 层全天 24 小时不间断监控，跟踪并及时发现、清理各层级作业残留（包括：数据、文件、目录、元数据等）。</p><p>同时针对历史任务进行多维度地深入洞察，生成高价值 SQL 运维图表和决策推荐信息，最终呈现在控制枱页面。</p><p>Service 层提供的全方位贴心服务，极大降低了对数据分析平台管理员的专业知识要求，解决管理员对于长期运营的后顾之忧。</p><span id="OSC_h2_17"></span><h2>9.4 大数据平台业务无损的弹性扩缩容</h2><p>通常来说，大数据平台的弹性伸缩方案只会涵盖 Hive、Spark 这类批处理引擎。因 Hive、Spark 本身具备了容错执行能力，即使因为大数据平台的管控面下发指令强制缩容一个正在运行 Hive/Spark 作业的物理节点，也不会影响相关作业的最终执行成功，最多只是引发了局部 task 的重试，增加了执行时长。因此，面向 Hive、Spark 引擎的大数据平台弹性伸缩方案相对来说比较容易，只需要关注资源层面的管理操作即可。</p><p>但对 Trino 这类 MPP 架构引擎来说，上述大数据平台的弹性伸缩管理模式就可能会面临如下几个方面的挑战：</p><ul><li>MPP 架构的 SQL 引擎一般都是常驻形态，在缩容过程中任何一个节点被强杀都可能导致该节点上正在运行中的 SQL 任务失败；</li><li>Trino 的协调节点 Coordinator 默认为 1 个，在缩容过程中，强杀 Coordinator 所在的节点会导致整个 Trino 集群不可用，运行中的所有 SQL 任务失败；</li><li>Trino 集群的扩容，需要平台管理面深入理解 Trino 集群的内部服务发现与工作机制，针对具体集群的 IP 和端口号定制配置，才能顺利的将新节点加入到一个已经存在的 Trino 集群中。</li></ul><p>综上，要想在大数据平台服务上实现对 Trino 生态引擎的弹性伸缩，且做到业务无损，需要在大数据平台服务层和 Trino 内核层之间抽象出一个面向多资源租户+多个计算实例（Trino 集群）的资源管理&amp;业务接入 service 层。</p><p>HetuEngine 的 service 层对大数据平台服务层屏蔽底层 Trino 内核细节，对上提供 Rest API 调用，并将大数据平台服务层的管理运维诉求转换为对具体 Trino 集群的实际变更。同时要做到对多个 Trino 集群的日常状态监控与自维护。</p><p><img alt="13.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113353062381452.png" referrerpolicy="no-referrer"></p><p>在上述架构基础之上，可以基于 Trino 容错执行的能力，在开启弹性伸缩时，进一步降低大数据平台层面弹性伸缩的等待时间。</p><p>一种可行的思路大致是——大数据平台服务层向 HetuEngine 的 service 层下发缩容指令，service 确定即将被缩容的节点上正在运行的计算实例，并将其动态切换到容错模式。在通常情况下，service 层可以快速向上层服务层答复缩容操作准备继续，不用等待 SQL 任务执行完。</p><span id="OSC_h2_18"></span><h2>9.5 小结</h2><p>基于上述架构与思路，华为云 HetuEngine 能很好地应对容错执行模式可能引入的新问题，显著提升生产环境实际运维效率，助力用户很方便地享受容错执行的新红利。</p><p>接下来， HetuEngine 将逐步引入和完善在两个不同执行模式间的智能切换能力，进一步完善对大数据云服务弹性伸缩的场景适配，在数据湖内一站式 SQL 分析领域持续创新、长期演进。</p><span id="OSC_h1_19"></span><h1>10 HetuEngine 2.0 版本预告</h1><p>预计 2023 年 9 月 30 日，HetuEngine 2.0 将随华为云 MRS 3.3.0-LTS 正式发布。在该版本中，可以看到一系列的新能力，例如——</p><ul><li>基于 Java17 运行全新内核，基础性能、稳定性再上一个新台阶，TPCDS 提速 30%</li><li>大 SQL 主动防御：事前提示/拦截，事中熔断，事后统计</li><li>支持容错执行模式：适用范围更广泛，使能一站式 SQL 加工 &amp; 分析</li><li>租户内多计算实例架构：自动负载均衡、针对单个业务的并发能力可水平扩展</li><li>新增数据源类型：Hudi，MySQL</li><li>新增支持新建 Hudi 表、Insert 数据</li><li>新增支持 Hue 对接 HetuEngine，提供可视化 SQL 编辑页面</li><li>新增支持代理用户模式，支持对客户的自有用户体系的代理鉴权及审计</li></ul><p><img alt="14.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113424230425833.png" referrerpolicy="no-referrer"></p><p>相关链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.huaweicloud.com%2Fintl%2Fzh-cn%2Fcmpntguide-lts-mrs%2Fmrs_01_1711.html" rel="nofollow" target="_blank">https://support.huaweicloud.com/intl/zh-cn/cmpntguide-lts-mrs/mrs_01_1711.html</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10117447</guid>
            <link>https://my.oschina.net/u/4526289/blog/10117447</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云原生周刊：CNCF 宣布 Cilium 毕业]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h2>开源项目推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fstakater%2FReloader" target="_blank">Reloader</a></h3><p>Reloader 是一个 Kubernetes 控制器，用于监控 ConfigMap 和 Secrets 中的变化，并对 Pod 及其相关部署、StatefulSet、DaemonSet 和 DeploymentConfig 进行滚动升级！</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXenitAB%2Fspegel" target="_blank">Spegel</a></h3><p>Spegel 在瑞典语中意为镜像，是一种无状态集群本地 OCI 注册镜像。</p><p>Spegel 使 Kubernetes 集群中的每个节点都能充当本地注册镜像，允许节点之间共享镜像。一个节点已提取的任何映像都可供集群中的任何其他节点提取。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkr8s-org%2Fkr8s" target="_blank">kr8s</a></h3><p>这是一个用于 Kubernetes 的简单、可扩展的 Python 客户端库，对于已经知道如何使用 kubectl 的人来说，感觉非常熟悉。</p><h2>文章推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40sachin.singh.professional%2Freal-application-industry-based-project-on-devops-b3764c9688b2" target="_blank">基于 DevOps 的真实应用行业项目</a></h3><p>这篇文章是关于基于 DevOps 的真实应用行业项目的介绍。作者在文章中提到了如何设置 AWS 云环境、安装和配置必要的工具（如 AWS CLI、eksctl、Helm 和 kubectl），以及如何使用这些工具来创建和管理基于 Kubernetes 的应用集群。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40saadullahkhanwarsi%2Ftitle-comprehensive-ci-cd-pipeline-with-terraform-packer-jenkins-sonarqube-maven-docker-fa4e51b57971" target="_blank">使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 的综合 CI/CD 流水线</a></h3><p>这篇文章介绍了如何使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 建立一个全面的 CI/CD 流水线。这篇文章提供了一个全面而详细的指南，介绍了每个步骤的具体操作和配置，并强调了建立可靠和高效的开发流水线的重要性。通过按照文章中的步骤进行操作，读者可以建立一个完整的 CI/CD 流水线，并实现高质量软件的快速交付</p><h2>云原生动态</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fannouncements%2F2023%2F10%2F11%2Fcloud-native-computing-foundation-announces-cilium-graduation%2F" target="_blank">CNCF 宣布 Cilium 毕业</a></h3><p>日前 CNCF 宣布 Cilium 毕业。Cilium 是一种基于 eBPF 的开源云原生解决方案，用于提供、保护和观测工作负载之间的网络连接。</p><p>Cilium 最初由 Isovalent 创建，基于 eBPF 从头开始构建。它于 2021 年 10 月成为 CNCF 孵化项目，现在有来自 7 家不同公司的维护者和 800 多名个人贡献者。该项目为全球最大的 Kubernetes 集群提供支持，最终用户涵盖从数字原生初创企业到全球最大的金融机构和电信运营商。它拥有 46 个来自公司的公开案例研究，包括 Bell Canada、Bloomberg、DB Schenker、S&amp;P Global、Sky 和纽约时报，在其用户文件中列出了 100 多家组织。Cilium 是活跃度第二高的 CNCF 项目，仅次于 Kubernetes。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fcncf-crio-graduation%2F%3FtopicPageSponsorship%3D82a399eb-74a1-4f0b-83c4-ccff2bdfcda1" target="_blank">CNCF 宣布 CRI-O 项目毕业</a></h3><p>云原生计算基金会宣布 CRI-O 项目毕业，该项目为 Kubernetes 生产环境中的 kubelet 提供安全、高性能且稳定的容器运行时接口 (CRI) 实现。该项目已被 7 个新组织采用，发布了 11 个新的次要版本，并向主分支提交了 4,000 多次提交。</p><p>CRI-O 早在 2016 年就起源于 Kubernetes 孵化器，由 Red Hat 创立。到 2019 年 4 月，它已获得云原生计算基金会 (CNCF) 的认可。为了从孵化阶段过渡到正式毕业，CRI-O 采取了几个重要步骤。其中包括加强治理结构、制定行为准则、建立安全列表、接受 Ada Logics 与 CNCF 和 OSTIF 协调进行的安全审计、获取多元化的用户群并进行用户访谈、投资全面的文档以及积极培养新的贡献者。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10118125</guid>
            <link>https://my.oschina.net/u/4197945/blog/10118125</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一份谷歌写给 CTO 们的报告 - DORA 2023 版全面解读]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p><img src="https://oscimg.oschina.net/oscnet/up-5eb3d1822561be3b093c8103f70b3865546.png" alt="file" referrerpolicy="no-referrer"></p><h2>背景</h2><p>几天前，谷歌云旗下的 DORA (DevOps Research and Assessments) 发布了一年一度的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Fdevops-sre%2Fannouncing-the-2023-state-of-devops-report" target="_blank">State of DevOps 2023 报告</a>。DORA 在国内不像 Gartner 有那么高的知名度，但在全球，DORA 是研发效能 / DevOps 领域最具影响力的报告，从 2014 年开始，每年会出一份，2020 因为疫情的原因没有出，所以加上今年的一共有 9 份。</p><p>DORA 一开始是一家独立的研究机构，不过在 2018 年底加入了谷歌云。总体来讲 DORA 的报告是整个 DevOps 行业里面最为专业和客观的，这也应该是他当初受到谷歌青睐的原因。即使是加入谷歌后，它的报告也基本可以保持中立性。从最初聚焦在软件发布指标，到现在延伸到组织文化，业务表现，DORA 的阅读人群也从经理，总监为主的技术中层扩展到 CTO, VP 为主的技术管理层，这点尤其在今年的报告中更为突出，也贴合谷歌云从面向开发者到面向管理者的重心转移。</p><p>Bytebase 作为一家面向研发团队，提供前沿数据库 CI/CD 开源工具的厂商，这也是我们连续第三年对 DORA 进行深度解读：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247483758%26idx%3D1%26sn%3D61859a6708f6f5b535ed0bd5ff98f199%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2021 报告深度解读</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247497479%26idx%3D1%26sn%3Da3908d32d14a24b377c937186f8c8cdf%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2022 报告深度解读</a></li></ul><h2>赞助商</h2><p><img src="https://oscimg.oschina.net/oscnet/up-a571211f81156e33243d22cc85baf809521.png" alt="file" referrerpolicy="no-referrer"> 今年获取报告需要先留下联系方式，在收购 DORA 后的第 5 个年头，谷歌云也开始加速了对 DORA 的变现。今年的赞助商相比去年也发生了很大的变化 <img src="https://oscimg.oschina.net/oscnet/up-a4a6a5d060ce086f67922e136fa6647cc5d.png" alt="file" referrerpolicy="no-referrer"></p><h3>去年的老面孔</h3><ol><li>Broadcom Software。Broadcom 算是一家比较传统的软件厂商，和 DevOps 相关的产品线多来自于 2018 年对 CA 的收购。总部在硅谷，当年 CA 大大的 Logo 还挂在 Highway 101 旁的唯一一栋高楼上。</li><li>Deloitte。IT 实施咨询，DORA 报告赞助商的常客。</li></ol><h3>今年的新面孔</h3><ol><li>LinearB。研发流程的优化。通用企业流程挖掘领域的领导者是 Celonis，而 LinearB 可以理解为软件研发这个特定领域的 Celonis。 <img src="https://oscimg.oschina.net/oscnet/up-de3386de47e94ff6f9827947556a4f0e36e.png" alt="file" referrerpolicy="no-referrer"></li><li>Digital.ai。和 LinearB 类似，只是更加直白地用 AI 来宣传。 <img src="https://oscimg.oschina.net/oscnet/up-395cb0cd74c0e800da5e2cdeba2f02b0962.png" alt="file" referrerpolicy="no-referrer"></li><li>Opsera。也和前两家类似。 <img src="https://oscimg.oschina.net/oscnet/up-8b7dcc3e83be5073ef33648e4c85fb8b24a.png" alt="file" referrerpolicy="no-referrer"></li><li>Sleuth。也是做类似的事情，不过更加聚焦在 DORA 上。 <img src="https://oscimg.oschina.net/oscnet/up-521be51a5ff92a6025053bfcb17e834b93b.png" alt="file" referrerpolicy="no-referrer"> 插曲，这家叫 swarmia 有点机智，知道新的 DORA 报告出了，会有人去搜赞助商，然后就投放了对应的关键词？ <img src="https://oscimg.oschina.net/oscnet/up-ccb1f7e5dd1601eb36d716183f45958e27f.png" alt="file" referrerpolicy="no-referrer"></li><li>Qarik。帮用户迁移到云原生架构的。 <img src="https://oscimg.oschina.net/oscnet/up-610f2b5db5857c3339cafc7b974b4731486.png" alt="file" referrerpolicy="no-referrer"> 从赞助商列表看，做研发流程洞察优化的厂商占了绝大部分，也贴合 DORA 报告的目标受众。不过也可以看到这个领域竞争的激烈程度。接下来我们进入正题，解读一下 DORA 报告本身。</li></ol><h2>受访人群</h2><p>样本量相比去年增加了 3.6 倍，整个业界应该是仅次于 Stack Overflow Developer Survey 的规模。覆盖人群则更加全面。 <img src="https://oscimg.oschina.net/oscnet/up-d2964cbd9daae32bd711ab2f1906b0aeca9.png" alt="file" referrerpolicy="no-referrer"></p><p>地域分布上，除去依然保持低调的某东方大国，也体现了各国软件业的相对体量。 <img src="https://oscimg.oschina.net/oscnet/up-46905759d065ca9f3bdbf33a66bc3accaae.png" alt="file" referrerpolicy="no-referrer"></p><p>这个分布也可以作为出海软件公司的参考，用于选择进入一个新大陆的落脚点。看非洲，肯尼亚已经排在了南非之前。 <img src="https://oscimg.oschina.net/oscnet/up-47a0ad283cc693b1fe29d3ab4c051ef7d2b.png" alt="file" referrerpolicy="no-referrer"></p><h2>方法论</h2><p><img src="https://oscimg.oschina.net/oscnet/up-236857daf38920f85a315070fd207b3ef72.png" alt="file" referrerpolicy="no-referrer"> DORA 最近几年的报告都有两条主线：</p><ul><li>组织线：业务表现，团队表现，个体感受</li><li>事务线：交付表现和运行表现</li></ul><p>DORA 的风格和海外做软件的风格一样，都是从点切入，由小及大。它最初的切入点是软件交付，后面增加了软件运行。再在此基础上推演业务表现 / 团队表现 / 个体感受。</p><h2>四大核心指标</h2><p>四大核心指标基本没变：</p><ul><li>Deployment frequency（发布频率）</li><li>Change lead time (代码从提交到上线的时间）</li><li>Change failure rate (上线失败需要介入的比例）</li><li>Failed deployment recovery time (失败的部署需要恢复的时间）</li></ul><p>其中最后一个术语做了调整，之前报告用的是更加通用的术语 time-to-restore。因为通用，所以无法区分发布造成的故障和自然灾害造成的故障。新的术语更加精确地限定在了发布领域。 <img src="https://oscimg.oschina.net/oscnet/up-0c7561f6d41f7eb884aee368f442f6af0c3.png" alt="file" referrerpolicy="no-referrer"></p><h2>分级 (Grading) - 精英级的回归</h2><p>去年报告因为 Elite 和 High 之间缺乏区分度，本来的四档变成了三档。 <img src="https://oscimg.oschina.net/oscnet/up-2b50c2b87c2c2d71b00e52b14c2b1fcea42.png" alt="file" referrerpolicy="no-referrer"></p><p>今年 Elite 精英级又回归了，原因是因为样本量的大幅增加，区分度又出来了 <img src="https://oscimg.oschina.net/oscnet/up-612c3f1d0205e1573279d38a151553c2d47.png" alt="file" referrerpolicy="no-referrer"></p><h2>分类 (Clustering) - 全新的组合</h2><p><img src="https://oscimg.oschina.net/oscnet/up-593502e6fe58556ee4de9a617803a60c51e.png" alt="file" referrerpolicy="no-referrer"></p><p>去年的报告采用了类似 Tuckman 组织发展模型的按阶段分类 (Forming &gt; Storming &gt; Norming &gt; Performing &gt; Adjourning)，划分为 Staring &gt; Flowing &gt; Slowing &gt; Retiring。 <img src="https://oscimg.oschina.net/oscnet/up-a7e04be377333e0575e992aed282c5772ca.png" alt="file" referrerpolicy="no-referrer"></p><p>今年采用了新的基于特质的分类：</p><ul><li>User-centric - 用户导向型</li><li>Feature-driven - 功能导向型</li><li>Developing - 发展型</li><li>Balanced - 均衡型</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-870577da04ed356ac34cbb857cff2d3b907.png" alt="file" referrerpolicy="no-referrer"></p><p>不同分类下各项指标的表现： <img src="https://oscimg.oschina.net/oscnet/up-9cecad6ba3b191fc650daa36a587d3ce4d8.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-aeb3f3797efd9aa334df838820f3eb44da1.png" alt="file" referrerpolicy="no-referrer"></p><p>笔者觉得今年的分类有点模糊，边界不清晰。拿 Bytebase 自身来说，按照去年的阶段分类，可以很清楚地落在 starting 到 flowing 之间。而对于今年的 4 个分类，Bytebase 其实都能沾上边。按照特质分类，个人感觉需要像 MBTI 人格分析那样更加的细分才行。</p><h2>关键发现</h2><p><img src="https://oscimg.oschina.net/oscnet/up-28145dc564762f1808214447ffad28a4bf3.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>建立健康的文化</li><li>站在用户视角做事</li><li>通过更快的代码评审提高软件交付</li><li>通过高质量的文档加成技术能力</li><li>通过云提升基础设施的灵活性</li><li>平衡交付的速度，运行的表现和用户</li><li>公平地分配工作量</li></ul><h3>文化和用户视角</h3><p>用户视角也是文化的一部分，就放在一起讲了。 <img src="https://oscimg.oschina.net/oscnet/up-d4b9e7f67efeab0aa7925412e569aff5947.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-e2216b39ddf54ed1c64cf79e94fe1eb2631.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-a58f36f397b485ac33cd22c0b200e56fa9a.png" alt="file" referrerpolicy="no-referrer"></p><blockquote><p>Westrum culture 来自于 Westrum 在 2004 年的论文 A typology of organisational cultures 里的观点。高度信任且注重信息交流的组织文化能带来出色的业务表现。</p></blockquote><p>在所有评估的指标里，Westrum 文化和以用户为中心是最能带来正向效果的。前者大家可以进一步阅读 Westrum 的论文，而后者在 DORA 报告里还给出了进一步的数据。 <img src="https://oscimg.oschina.net/oscnet/up-fd32e6b68e3a63952fd9181557bbb936d61.png" alt="file" referrerpolicy="no-referrer"></p><p>可以看到以用户为中心能给每一个指标都带来显著提升，自然现在的公司都要大力提倡了。</p><h3>影响表现的技术因素</h3><p><img src="https://oscimg.oschina.net/oscnet/up-b4c4307c5e25a57a2a9d52afb54b25dd442.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-5d62680bc8930b6157424dc0775ff2d5417.png" alt="file" referrerpolicy="no-referrer"></p><p>延用了计算机的经典解法 - 分治。松耦合的架构 &gt; 更小的变更 &gt; DORA 四大核心指标的提升。 <img src="https://oscimg.oschina.net/oscnet/up-6b5812b180b6aae192f078f4309b168f867.png" alt="file" referrerpolicy="no-referrer"></p><h2>重新验证 Reliability 和 Performance 的关系</h2><p><img src="https://oscimg.oschina.net/oscnet/up-36bc9047b6db543a0c8185a3dc00f51f3a6.png" alt="file" referrerpolicy="no-referrer"> 2022 年报告的数据显示，组织先要投入很长一段时间的稳定性建设，才能看到成果。这个结论多少让人沮丧，开始没有正向反馈就容易劝退。</p><p>不过 2023 年通过优化问卷，得出了一个鼓舞人心的结论，就是稳定性和表现的关系符合 J 曲线，投入前期就有效果，然后再经过一段瓶劲期，最终再是显著的收益。</p><h2>还解决不了主要矛盾的 AI</h2><p><img src="https://oscimg.oschina.net/oscnet/up-fdaf6d7748c0b601b199870f4e087122966.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-946410a6e01eb4391dd33570bd0286f22ac.png" alt="file" referrerpolicy="no-referrer"> 今年的报告自然不能忽视 AI，结论算是浇了一盆冷水，在所有技术影响因子里是以很大的差距垫底的。这倒也符合个人的预期，因为目前 AI 唯一破圈的场景是帮助写代码，属于「道法术器」里的「器」，是影响最小的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-36288bc0d74bf857329cfdc1bddc0d7848c.png" alt="file" referrerpolicy="no-referrer"> 这幅图也比较有意思，展示了当下在研发交付领域，AI 擅长的和不擅长的。除了最后一个 Solving file path issue 是个有点奇怪的问题外，垫底的几个对应的都是「道法」层面的主要矛盾。</p><h2>总结</h2><h3>一份专业的报告</h3><p>抛开内容本身，DORA 一如即往地给我们展示了如何撰写一份专业的行业报告。方法论，受访人群，分析方法都在报告中有清晰阐述。 <img src="https://oscimg.oschina.net/oscnet/up-3d18a669ca3106519c0952cf0ec9b5ae842.png" alt="file" referrerpolicy="no-referrer"></p><p>有反直觉的数据，也不会勉强附和，而是把疑问抛出。 <img src="https://oscimg.oschina.net/oscnet/up-d66aed3bd7c358764137da07ccf5594ce95.png" alt="file" referrerpolicy="no-referrer"></p><p>关注更多的声音，既让报告更加全面，也注入了人文的元素。 <img src="https://oscimg.oschina.net/oscnet/up-443671e03d566e7c444137d802adf5be8ff.png" alt="file" referrerpolicy="no-referrer"></p><p>说几点我读下来的不足：</p><h3>I. 轻描淡写的平台工程</h3><p><img src="https://oscimg.oschina.net/oscnet/up-5e850566eedb734896a3ec88d39c1a7f6c3.png" alt="file" referrerpolicy="no-referrer"></p><p>今年的报告里第一次提到了最近兴起的平台工程 (Platform Engineering)。DORA 的主题是研发效能 / DevOps，从行业趋势看，这部分工作对应到的就是平台工程团队。</p><p>平台工程的用户是内部的研发工程师，所以这部分也就出现在第 19 页 User-centric 里。但作为一份研究研发组织的报告，应该可以展开讲讲平台工程，毕竟这是近 10 多年里，继 DevOps / SRE 后，终于涌现出来的一个新组织形态。</p><h3>II. 老生常谈的 Cloud</h3><p><img src="https://oscimg.oschina.net/oscnet/up-bb34887f4cf48b52aca04ad414bde728faf.png" alt="file" referrerpolicy="no-referrer"></p><p>报告里列举了 Cloud 的各种优势，但对于最近业界 Cloud cost 相关的讨论以及伴随着的下云呼声没有涉及，缺少了一点辩证，这是报告出自谷歌云之手的一点偏心吧。除此之外，谷歌的另外一处植入就是谈论自家的 SRE 实践。 <img src="https://oscimg.oschina.net/oscnet/up-c53fa3904c6646e61ba9f9e618ed89534da.png" alt="file" referrerpolicy="no-referrer"></p><h3>III. 转型期的 DORA</h3><p><img src="https://oscimg.oschina.net/oscnet/up-ce8afdbe7baf804fcc7c2c4968e6d97eab7.png" alt="file" referrerpolicy="no-referrer"> 业界权威的年度报告里，Stack Overflow Developer Survey 偏一线，关注具体工作中所使用的产品技术；Gartner 面向管理层，关注行业的趋势。DORA 介于两者之间，DORA 里 DO 所代表的 DevOps 基因决定了报告的一线视角，RA 所代表的 Research &amp; Assessment 又使得它会给出价值判断。而从这几年的报告趋势来看，DORA 正逐步走向管理层。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09fd199bbdf16e597abce5f819dacb538e8.png" alt="file" referrerpolicy="no-referrer"> 比如从赞助商列表来看，往年都有不少研发链路某一个环节的工具厂商，像做 IDE 的 JetBrains，制品库的 JFrog，代码托管的 GitLab，应用部署的 Octopus，数据库变更的 Liquibase。而今年则是清一色的研发效能过程优化赞助商，或许这也是和报告背后的金主谷歌云面向大客的策略调整有关。</p><p>再从正文看，今年的报告弱化了 DORA 一直背书的软件发布四大核心指标，而是更多地去敍述核心指标背后的元素。这其中把文化和以用户为中心放在了前两位。</p><blockquote><p>Culture eats strategy for breakfast - 彼得·德鲁克</p></blockquote><p>既然转型走高层的路线，那就要面临阵痛，DORA 团队分析覆盘的能力很强，但相比 Gartner，缺少前瞻性。其本身又绑定在 DevOps 这个早已成熟的概念，再叠加上要宣传 SRE 这个也已经过了成长期的实践。对于平台工程，对于 AI，DORA 这次提及的不多，这一方面体现了它务实的部分，但这些未来 3 - 5 年可见的趋势，才是管理层们更关心的内容。</p><h2>结束语</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0e98a4ed8b4be53aec56928693c2d1406c0.png" alt="file" referrerpolicy="no-referrer"> 度量不是目的，就像发布软件并不是目的。数据若能印证假设固然值得欣喜，但更有价值的往往还是揭示错误的假设。提高软件发布的效率，也是为了形成更短的反馈闭环，发现产品的缺陷，进行改良，更好地满足用户。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0d34715122deb2e90e01ded95b89e965f32.png" alt="file" referrerpolicy="no-referrer"> 在这个 AI 的黎明，虚拟现实的前夜，一个具备持续改进能力的组织才是面向未来不确定性下的最大确定性🦾。</p><p>能读到这里的，也一定是对软件交付有追求的读者。可以看一下我们正在做的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">Bytebase</a>，它目前是整个行业里，数据库变更 CI/CD 领域的领导者。</p><hr><p>💡 你可以访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">官网</a>，免费注册云账号，立即体验 Bytebase。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10118131</guid>
            <link>https://my.oschina.net/u/6148470/blog/10118131</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
