<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 29 Sep 2023 04:52:57 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Mistral AI 发布 73 亿参数模型，「碾压」 Llama 2 13B]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">法国人工智能初创公司&nbsp;Mistral AI <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fannouncing-mistral-7b%2F" target="_blank">宣布</a>推出其首款大语言模型 Mistral 7B 是一个，号称是迄今为止同规模产品中最强大的语言模型；在 Apache-2.0 许可下开源，可完全免费使用，不受任何限制。</span></p><p><span style="color:#000000">Mistral AI 是一个成立仅六个月的初创公司，于 6 月份筹集了 1.18 亿美元的巨额种子轮资金，据称是欧洲历史上最大的种子轮融资。Mistral 7B 是一个拥有 73 亿参数的模型。该公司声称在涵盖一系列任务的基准测试中，Mistral 7B 的表现均显著优于 Llama 2 7B 和 13B，并且与 Llama 34B 相当。</span></p><p><span style="color:#000000">在涵盖数学、美国历史、计算机科学、法律等 57 个科目的大规模多任务语言理解 (MMLU) 测试中，Mistral 7B 模型的准确率为 60.1%，Llama 2 7B 和 13B 的准确率略高于分别为 44.4% 和 55.6%。</span></p><p><span style="color:#000000">在常识推理和阅读理解测试中，Mistral 7B 的准确率也超过了两个 Llama 模型。在世界知识测试中，Llama 2 13B 与 Mistral 7B 不相上下，Mistral 称这可能是由于模型的参数数量有限，限制了它可以压缩的知识量。</span></p><p><span style="color:#000000">唯一 Llama 2 13B 和 Mistral 7B 不相上下的领域则是世界知识测试，Mistral 声称「这可能是由于 Mistral 7B 的参数数量有限，从而限制了其可压缩的知识量。」</span></p><p><span style="color:#000000">在编码任务方面，虽然 Mistral 称 Mistral 7B 的性能大为提高；但基准测试结果表明，它仍然没有超过经过微调的 CodeLlama 7B。在 0-shot Humaneval 和 3-shot MBPP 测试中，CodeLlama 7B 的准确率分别为 31.1% 和 52.5%，Mistral 7B 则分别为 30.5% 和 47.5%。</span></p><p><img alt="" height="228" src="https://oscimg.oschina.net/oscnet/up-ccc9734e545847f6997b2b0303aeebc5bc0.png" width="700" referrerpolicy="no-referrer"></p><p><img alt="" height="97" src="https://oscimg.oschina.net/oscnet/up-1098191388bff1fba8deba0dbc560f0f30f.png" width="700" referrerpolicy="no-referrer"></p><p><img alt="" height="485" src="https://oscimg.oschina.net/oscnet/up-e6a3887b8c2e50e96c9da3a78f6b0c69fa7.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Mistral AI 表示，Mistral 7B 使用了 Grouped-query attention (GQA) 实现更快的推理，并使用 Sliding Window Attention (SWA) 以较小的成本处理更长的序列。</span></p><p><span style="color:#000000">「Mistral 7B 采用了 SWA，其中每一层都关注先前的 4096 个隐藏状态。主要改进以及最初研究的原因是 O(sliding_window.seq_len) 的线性计算成本。在实际应用中，对 FlashAttention 和 xFormers 所做的更改使得在序列长度为 16k 且窗口为 4k 的情况下，速度提高了 2 倍。」</span></p><p><span style="color:#000000">此外，该公司还计划在这项工作的基础上发布一个更大的模型，能够更好地推理并支持多种语言，预计将于 2024 年亮相。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fannouncing-mistral-7b%2F" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 04:11:21 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259954/mistral-ai-mistral-7b</guid>
            <link>https://www.oschina.net/news/259954/mistral-ai-mistral-7b</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1-8 月我国规上互联网企业完成业务收入 9067 亿元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">工信部最新</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Fhlw%2Fart%2F2023%2Fart_d6cf975ca04449a4b079073551cd9e4a.html" target="_blank">发布</a><span style="color:#000000"><span style="background-color:#ffffff">的&nbsp;2023 年 1－8 月份互联网和相关服务业运行情况指出，</span>1－8 月份，互联网业务收入保持平稳，利润总额快速增长，研发经费降幅持续收窄。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><strong>一、总体运行情况</strong></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><strong>互联网业务收入保持平稳</strong><strong>。</strong>1－8 月份</span><span style="display:none">&nbsp;</span><span>，我国规模以上互联网和相关服务企业<span>1</span>（以下简称互联网企业）完成互联网业务收入 9067 亿元，同比增长 2.6</span><span>%。</span><span style="display:none">&nbsp;</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="252" src="https://oscimg.oschina.net/oscnet/up-03083ff7a0573ef952ceb153cae6dc12489.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>利润</span></strong><strong><span>总额</span></strong><strong><span>快速增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，我国规模以上互联网企业营业成本同比增长</span></span><span>5.4%。实现利润总额</span><span>913.8</span><span>亿元，同比增长 28%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="242" src="https://oscimg.oschina.net/oscnet/up-db3d44cf3265a7a1f2a4a2cf6737a2e6925.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>研发经费</span></strong><strong><span>降幅持续收窄</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，我国规模以上互联网企业共投入研发经费</span></span><span>477 亿元，同比下降 0.8</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="240" src="https://oscimg.oschina.net/oscnet/up-dcb0f66bd3c2a7509fa2f1567da737d4dcb.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong><span>二、分领域运行情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（一）信息服务领域企业</span></strong><strong><span>收入小幅回落</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，以信息服务为主的企业（包括新闻资讯、搜索、社交、游戏、音乐视频等）互联网业务收入同比</span></span><span>下降 3.1</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（二）生活服务领域企业收入</span></strong><strong><span>较快增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，以提供生活服务为主的平台企业（包括本地生活、租车约车、旅游出行、金融服务、汽车、房屋住宅等）互联网业务收入同比增长</span></span><span>11.3%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（三）网络销售领域企业收入</span></strong><strong><span>高速增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span>，主要提供网络销售服务的企业（包括大宗商品、农副产品、综合电商、医疗用品、快递等）互联网业务收入同比增长</span><span>45.1%。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong><span>三、分地区运行情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>东部地区互联网业务收入</span></strong><strong><span>保持平稳</span></strong><strong><span>增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，东部地区完成互联网业务收入</span></span><span>8474 亿元，同比增长 3.7%，增速较</span><span>1</span><span>－7 月份回落 0.3</span><span><span>个百分点</span></span><span>，占全国互联网业务收入的比重为 93.5%。中部地区完成互联网业务收入</span><span><span>289.2</span></span><span>亿元，同比下降 9.7%，降幅较</span><span>1</span><span>－7 月份扩大 1.7</span><span><span>个百分点。西部地区完成互联网业务收入</span></span><span>281.4 亿元，同比下降 8.3%，降幅较</span><span>1</span><span>－7 月份收窄 1.6</span><span><span>个百分点。东北地区完成互联网业务收入</span></span><span>22.3 亿元，同比下降 38.5%，降幅较</span><span>1</span><span>－7 月份收窄 2.1</span><span><span>个百分点。</span></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="245" src="https://oscimg.oschina.net/oscnet/up-9bed8dc21ec2637d6f7bb4730165f5dbae8.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>近半数</span></strong><strong><span>地区互联网业务</span></strong><strong><span>增速实现正增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span>，互联网业务累计收入居前</span><span>5 名的</span><span>北京</span><span>（增长 0.4</span><span>%）、上海</span><span>（增长 16.2</span><span>%）、浙江</span><span>（增长 3.6%）、</span><span>广东</span><span>（下降 9.5%）和天津（增长</span><span><span>21.9</span></span><span>%）共完成业务收入</span><span><span>7995</span></span><span>亿元，同比增长 4.6%，占全国（扣除跨地区企业）比重达 88.2%。全国互联网业务增速实现正增长的省（区、市）有 14 个。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="243" src="https://oscimg.oschina.net/oscnet/up-4a22e931c722a693cb22702142dcadd6b5f.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:2px; margin-right:0px; text-align:justify"><strong><span>四、我国移动应用程序（APP）发展情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>根据全国 APP 技术检测平台统计，截至 8 月底，我国国内市场上监测到活跃的 APP 数量<span><span>2</span></span>为 260 万款（包括安卓和苹果商店）。移动应用开发者数量为 83 万,其中安卓开发者为 25 万，苹果开发者为 58 万。8 月份，安卓应用商店在架应用累计下载量 82 亿次。</span></p><p style="color:#070707; margin-left:2px; margin-right:0; text-align:justify"><span><strong><span>附注：</span></strong></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>1.规模以上互联网和相关服务企业口径由上年互联网和相关服务收入 500 万元以上调整为 2000 万元及以上，文中所有同比增速均按可比口径计算。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>2.活跃的移动应用程序数量是指报告期内我国市场上经过用户主动下载安装的第三方移动应用的总个数，其中安卓应用数的计算方法是根据智能手机记录的已安装移动应用去重后获得。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:17:45 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259952</guid>
            <link>https://www.oschina.net/news/259952</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[耗时两年倒贴 1.5 万美元，Chrome 扩展如何盈利]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一名开发者 Steve Jones <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40stevemacxcode%2Fi-spent-2-years-building-a-chrome-extension-lost-15k-dollars-in-the-process-and-made-just-over-7b2481c2b394" target="_blank">发文</a>表示，自己在两年前开始开发一个 Chrome 扩展程序，过程中投入了大量的资金，但却始终无法实现盈利。目前为止只赚到了 200 美元，而这些钱还都是近一周收到的打赏。</span></p><p><span style="color:#000000">具体来说，这名开发者在两年前推出了一个名为 Zecento 的 Chrome 扩展程序，其功能是帮助用户在亚马逊上做出更好的购买决策并节省金钱。主要通过分析产品/卖家的历史数据，告诉用户是否是购买的好时机，然后在价格下降（或其他商家以更优惠的价格提供相同产品）时给买家发送通知。目前，该扩展只在意大利地区可用，作者计划后续将在美国和加拿大推出。</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-fc6ebf5126370f72408ffe6a55cc9672b04.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Zecento 以免费的形式面向大众提供；但为了盈利，作者还推出了一个功能更完善的付费计划。但这就是问题所在，只有极少数用户的选择了付费计划，从而导致开发者严重的入不敷出。</span></p><p><span style="color:#000000">面对这种情况，Steve 也与其他一些开发了 Chrome 扩展的开发者进行了沟通交流，结果发现大差不差：大家都有一个正在被使用的产品，但却没有任何赚钱的途径。</span></p><p><span style="color:#000000">为了改善自己的处境，Steve 在大概一周前新开发了一个库，提供了一个可以通过 API 向 Chrome 浏览器扩展开发者进行打赏的渠道。在此后的一周时间内，Steve 陆陆续续收到了 200 多美元的资助，「我觉得如果能将它开源用于其他 Chrome 浏览器扩展也会很酷。」</span></p><p><span style="color:#000000">在文章的最后，Steve 也提出了一个问题：在为你的 Chrome 扩展程序（或者任何其他没有稳定商业模式的有价值网站）实现盈利方面，你遇到的最大问题是什么？你认为这个产品可能存在哪些问题？</span></p><p><span style="color:#000000"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fprogramming%2Fcomments%2F16sq2jk%2Fi_spent_2_years_building_a_chrome_extension_lost%2F" target="_blank">Reddit </a>上针对这个帖子也进行了热烈的讨论。有网友指出，Zecento 是一个 Chrome 扩展程序，但作者发文所配的主图上却是 Firefox，「令人恼火」。「这也就解释了为什么他们损失了 1.5 万美元。」</span></p><p><span style="color:#000000">还有人提出疑问：这 1.5 万美元是怎么花的？市场上是否早就已经有同类型产品的存在？以及作者为什么不通过 affiliate links 促进用户购买来实现盈利？</span></p><p><span style="color:#000000">对此，作者则回复表示，自己做了很多愚蠢的决定：包括在意大利花了约 6000 美元注册了一家公司，还花费了 2000 美元的会计费用。并花费了 2000 美元找了一些有影响力的人进行推广，以及定制品牌 T 恤等推广消耗。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259832/spent-2-years-building-a-chrome-extension-lost-15k</guid>
            <link>https://www.oschina.net/news/259832/spent-2-years-building-a-chrome-extension-lost-15k</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DataSophon —— 云原生大数据管家]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div style="text-align:left"><p style="color:rgba(249,250,251,var(--bs-text-opacity)) !important; margin-left:0; margin-right:0">DataSophon 是 Java 为主要语言开发的新一代云原生大数据管家，致力于快速实现部署、管理、监控以及自动化运维大数据云原生平台，帮助用户快速构建起稳定、高效、可弹性伸缩的大数据云原生平台。</p><h2 style="text-align:start"><a href="https://github.com/datavane/datasophon/blob/dev/README_CN.md#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">主要特性</a></h2></div><ul><li>极易部署，用户仅需几步即可完成初始化环境配置，从而快速地完成大规模大数据集群的部署，支持数千个节点规模。</li><li>全面兼容开源生态，基于开放式的管理架构，已集成多种常用大数据组件，包括数据集成、数据存储、计算引擎、任务调度、权限管理等大数据处理的各个环节。</li><li>兼容复杂环境，极简的架构设计，使其极易适配各种复杂环境，支持 arm 和 x86 机器混合部署，支持常用的 Linux 生态操作系统。</li><li>便捷运维，基于生产实践展示用户最关心的监控指标，可方便地对集群、节点和服务进行监控和运维操作，助您大幅提升运维工作效率。</li><li>安全可靠，DataSophon 支持 Kerberos 身份认证和数据加密，使用 Ranger 数据访问控制，从而支持数据加密和权限控制，保证数据安全。</li><li>便捷告警，支持告警组和告警指标管理，监控指标全面丰富，用户可根据监控指标自定义告警组和告警指标。</li></ul><p><img height="883" src="https://oscimg.oschina.net/oscnet/up-20ccfba2265462539d7eaf8b767ec24e177.png" width="1587" referrerpolicy="no-referrer"></p><p><strong>产品架构</strong></p><p><img height="286" src="https://static.oschina.net/uploads/space/2023/0927/102225_EzMI_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><strong>技术架构</strong></p><p><img height="351" src="https://static.oschina.net/uploads/space/2023/0927/102300_8rho_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/datasophon</guid>
            <link>https://www.oschina.net/p/datasophon</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 为开发者打造的代码解释器 Octopus]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img width="200px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/86af130f-7d0d-4cfb-9410-fc338426938e" align="center" referrerpolicy="no-referrer"></p><p><img src="https://img.shields.io/github/actions/workflow/status/dbpunk-labs/octogen/ci.yaml" alt="GitHub Workflow Status (with event)" referrerpolicy="no-referrer"><a href="https://gitee.com/link?target=https%3A%2F%2Fdiscord.gg%2FUjSHsjaz66"><img src="https://badgen.net/badge/icon/discord?icon=discord&amp;label" alt="Discord" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2FOCopilot7817"><img src="https://img.shields.io/twitter/follow/OCopilot7817?style=flat-square" alt="Twitter Follow" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fpypi.org%2Fproject%2Fog-chat%2F"><img src="https://img.shields.io/pypi/v/og_chat" alt="PyPI - Version" referrerpolicy="no-referrer"></a><img src="https://img.shields.io/pypi/dm/og_chat?logo=pypi" alt="PyPI - Downloads" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/dbpunk-labs/octogen/blob/main/README_zh_cn.md">中文</a></p><blockquote><h2><a id="user-content-octogen" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#octogen"></a>Octogen</h2><p>an open-source code interpreter for developers</p></blockquote><p align="center"><img width="1000px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/8ec0a02b-20a9-47ec-9b15-1ede8fa94dbb" align="center" referrerpolicy="no-referrer"></p><table><thead><tr><th>OS</th><th>Platform</th></tr></thead><tbody><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/31b907e9-3a6f-4e9e-b0c0-f01d1e758a21" referrerpolicy="no-referrer"></td><td>✅</td></tr><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/565d5f93-baac-4a77-ab1c-7d845e2fdb6d" referrerpolicy="no-referrer"></td><td>✅</td></tr><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/acb7f919-ef09-446e-b1bc-0b50bc28de5a" referrerpolicy="no-referrer"></td><td>✅</td></tr></tbody></table><h2><a id="user-content-getting-started" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#getting-started"></a>Getting Started</h2><p>Requirement</p><ul><li>python 3.10 and above</li><li>pip</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.docker.com%2Fproducts%2Fdocker-desktop%2F">docker</a> 24.0.0 and above, docker desktop is recommended</li></ul><blockquote><p>To deploy Octogen, the user needs permission to run Docker commands.<br>
To use codellama, your host must have at least 8 CPUs and 16 GB of RAM.</p></blockquote><p>Install the octogen on your local computer</p><ol><li>Install og_up</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">pip <span class="nb">install </span>og_up</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>try to change the pip mirror if the step install octopus terminal cli takes a lot of time</p></blockquote><ol start="2"><li>Set up the Octogen service</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">og_up</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>You have the option to select from OpenAI, Azure OpenAI, CodeLlama, and Octogen agent services.
If you opt for CodeLlama, Octogen will automatically download it from huggingface.co.
In case the installation of the Octogen Terminal CLI is taking longer than expected, you might want to consider switching to a different pip mirror.</p></blockquote><ol start="3"><li>Open your terminal and execute the command <code>og</code>, you will see the following output</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">Welcome to use octogen❤️ . To ask a programming question, simply type your question and press esc + enter</span><span id="LC2" class="line">You can use /help to look for help</span><span id="LC3" class="line"></span><span id="LC4" class="line">[1]🎧&gt;</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-supported-api-service" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#supported-api-service"></a>Supported API Service</h2><table><thead><tr><th>name</th><th>type</th><th>status</th><th>installation</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fopenai.com%2Fproduct%23made-for-developers">Openai GPT 3.5/4</a></td><td>LLM</td><td>✅ fully supported</td><td>use <code>og_up</code> then choose the <code>OpenAI</code></td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fazure.microsoft.com%2Fen-us%2Fproducts%2Fai-services%2Fopenai-service">Azure Openai GPT 3.5/4</a></td><td>LLM</td><td>✅ fully supported</td><td>use <code>og_up</code> then choose the <code>Azure OpenAI</code></td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fggerganov%2Fllama.cpp%2Ftree%2Fmaster%2Fexamples%2Fserver">LLama.cpp Server</a></td><td>LLM</td><td>✔️  supported</td><td>use <code>og_up</code> then choose the <code>CodeLlama</code></td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Foctogen.dev">Octopus Agent Service</a></td><td>Code Interpreter</td><td>✅ supported</td><td>apply api key from <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.octogen.dev%2F">octogen.dev</a> then use <code>og_up</code> then choose the <code>Octogen</code></td></tr></tbody></table><h2><a id="user-content-the-internal-of-local-deployment" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#the-internal-of-local-deployment"></a>The internal of local deployment</h2><p><img src="https://github.com/dbpunk-labs/octogen/assets/8623385/95dd6f84-6de8-476a-9c66-9ab591ed9b0e" alt="octogen-internal drawio" referrerpolicy="no-referrer"></p><ul><li>Octogen Kernel: The code execution engine, based on notebook kernels.</li><li>Octogen Agent: Manages client requests, uses ReAct to process complex tasks, and stores user-assembled applications.</li><li>Octogen Terminal Cli: Accepts user requests, sends them to the Agent, and renders rich results. Currently supports Discord, iTerm2, and Kitty terminals.</li></ul><h2><a id="user-content-features" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#features"></a>Features</h2><ul><li>Automatically execute AI-generated code in a Docker environment.</li><li>Experiment feature, render images in iTerm2 and kitty.</li><li>Upload files with the <code>/up</code> command and you can use it in your prompt</li><li>Experiment feature, assemble code blocks into an application and you can run the code directly by <code>/run</code> command</li><li>Support copying output to the clipboard with <code>/cc</code> command</li><li>Support prompt histories stored in the octopus cli</li></ul><p>if you have any feature suggestion. please create a discuession to talk about it</p><h2><a id="user-content-roadmap" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#roadmap"></a>Roadmap</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdbpunk-labs%2Foctogen%2Fissues%2F64">roadmap for v0.5.0</a></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/dbpunk-labs/octogen</guid>
            <link>https://gitee.com/dbpunk-labs/octogen</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 代码层面探索前端性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>前言</h1><p>最近在做性能优化，具体优化手段，网上铺天盖地，这里就不重复了。</p><p>性能优化可分为以下几个维度：代码层面、构建层面、网络层面。<br> 本文主要是从代码层面探索前端性能，主要分为以下 4 个小节。</p><ul><li><p>使用 CSS 替代 JS</p></li><li><p>深度剖析 JS</p></li><li><p>前端算法</p></li><li><p>计算机底层</p></li></ul><span id="OSC_h1_2"></span><h1>使用 CSS 替代 JS</h1><p>这里主要从动画和 CSS 组件两个方面介绍。</p><span id="OSC_h3_3"></span><h3>CSS 动画</h3><p>CSS2 出来之前，哪怕要实现一个很简单的动画，都要通过 JS 实现。比如下面红色方块的水平移动：</p><p><img src="https://img11.360buyimg.com/imagetools/jfs/t1/154413/5/36918/38344/64d78222Fa380ff2e/b29ece75883b69d1.gif" alt="水平移动" referrerpolicy="no-referrer"></p><p>对应 JS 代码：</p><pre><code>let redBox = document.getElementById('redBox')
let l = 10

setInterval(() =&gt; {
    l+=3
    redBox.style.left = `${l}px`
}, 50)


</code></pre><p>1998 年的 CSS2 规范，定义了一些动画属性，但由于受当时浏览器技术限制，这些特性并没有得到广泛的支持和应用。</p><p>直到 CSS3 的推出，CSS 动画得到了更全面地支持。同时，CSS3 还引入了更多的动画效果，使得 CSS 动画在今天的 Web 开发中得到了广泛的应用。</p><p>那么 CSS3 都能实现什么动画，举几个例子：</p><ul><li><p><em>过渡（Transition）</em>- 过渡是 CSS3 中常用的动画效果之一，通过对一个元素的某些属性进行变换，使元素在一段时间内从一个状态平滑地过渡到另一个状态。</p></li><li><p><em>动画（Animation）</em>- 动画是 CSS3 中另一个常用的动画效果，其用于为一个元素添加一些复杂的动画效果，可以通过关键帧（@keyframes）来定义一串动画序列。</p></li><li><p><em>变换（Transform）</em>- 变换是 CSS3 中用于实现 2D/3D 图形变换效果的一种技术，包括旋转、缩放、移动、斜切等效果。</p></li></ul><p>把上面的例子改写成 CSS 代码如下：</p><pre><code>#redBox {
    animation: mymove 5s infinite;
}

@keyframes mymove
{
    from {left: 0;}
    to {left: 200px;}
}


</code></pre><p>同样的效果，用样式就能实现，何乐而不为呢。</p><p>需要指出的是，CSS 的动画仍在不断发展和改进，随着新的浏览器特性和 CSS 版本的出现，CSS 动画的特性也在不断地增加和优化，以满足日益复杂的动画需求和更好的用户体验。</p><span id="OSC_h3_4"></span><h3>CSS 组件</h3><p>在一些知名的组件库中，有些组件的大部分 props 是通过修改 CSS 样式实现的，比如 Vant 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvant-ui.github.io%2Fvant%2F%23%2Fzh-CN%2Fspace" rel="nofollow" target="_blank">Space</a>组件。</p><table><tbody><tr><th>Props</th><th>功能</th><th>CSS 样式</th></tr></tbody><tbody><tr><td>direction</td><td>间距方向</td><td>flex-direction: column;</td></tr><tr><td>align</td><td>对齐方式</td><td>align-items: xxx;</td></tr><tr><td>fill</td><td>是否让 Space 变为一个块级元素，填充整个父元素</td><td>display: flex;</td></tr><tr><td>wrap</td><td>是否自动换行</td><td>flex-wrap: wrap;</td></tr></tbody></table><p>再比如 Ant Design 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fant.design%2Fcomponents%2Fspace-cn" rel="nofollow" target="_blank">Space</a>组件。</p><table><tbody><tr><th>Props</th><th>功能</th><th>CSS 样式</th></tr></tbody><tbody><tr><td>align</td><td>对齐方式</td><td>align-items: xxx;</td></tr><tr><td>direction</td><td>间距方向</td><td>flex-direction: column;</td></tr><tr><td>size</td><td>间距大小</td><td>gap: xxx;</td></tr><tr><td>wrap</td><td>是否自动换行</td><td>flex-wrap: wrap;</td></tr></tbody></table><p>这类组件完全可以封装成 SCSS 的 mixin 实现（LESS 也一样），既能减少项目的构建体积（两个库的 Space 组件 gzip 后的大小分别为 5.4k 和 22.9k），又能提高性能。</p><blockquote><p>查看组件库某个组件的体积，可访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbundlephobia.com%2F" rel="nofollow" target="_blank">连接</a>。</p></blockquote><p>比如下面的 space mixin：</p><pre><code>/* 
* 间距
* size: 间距大小，默认是 8px
* align: 对齐方式，默认是 center，可选 start、end、baseline、center
* direction: 间距方向，默认是 horizontal，可选 horizontal、vertical
* wrap: 是否自动换行，仅在 horizontal 时有效，默认是 false
*/
@mixin space($size: 8px, $direction: horizontal, $align: center, $wrap: false) {
    display: inline-flex;
    gap: $size;

    @if ($direction == 'vertical') {
        flex-direction: column;
    }

    @if ($align == 'center') {
        align-items: center;
    }

    @if ($align == 'start') {
        align-items: flex-start;
    }

    @if ($align == 'end') {
        align-items: flex-end;
    }

    @if ($align == 'baseline') {
        align-items: baseline;
    }

    @if ($wrap == true) {
        @if $direction == 'horizontal' {
            flex-wrap: wrap;
        }
    }
}


</code></pre><p>类似的组件还有 Grid、Layout 等。</p><p>再说下图标，下面是 Ant Design 图标组件的第一屏截图，有很多仅用 HTML + CSS 就可以轻松实现。</p><p><img src="https://img14.360buyimg.com/imagetools/jfs/t1/180707/33/35268/43627/64d24737Fe70bfa62/5ff7dcc4a24e0b54.jpg" alt="Ant Design 方向图标" referrerpolicy="no-referrer"></p><p>实现思路：</p><ul><li><p>优先考虑只使用样式实现</p></li><li><p>仅靠样式满足不了，就先增加一个标签，通过这个标签和它的两个伪元素 ::before 和 ::after 实现</p></li><li><p>一个标签实在不够，再考虑增加额外的标签</p></li></ul><p>比如实现一个支持四个方向的实心三角形，仅用几行样式就可以实现（上面截图是 4 个图标）：</p><pre><code>/* 三角形 */
@mixin triangle($borderWidth: 10, $shapeColor: #666, $direction: up) {
    width: 0;
    height: 0;
    border: if(type-of($borderWidth) == 'number', #{$borderWidth} + 'px', #{$borderWidth}) solid transparent;

    $doubleBorderWidth: 2 * $borderWidth;
    
    $borderStyle: if(type-of($doubleBorderWidth) == 'number', #{$doubleBorderWidth} + 'px', #{$doubleBorderWidth}) solid #{$shapeColor};

    @if($direction == 'up') {
        border-bottom: $borderStyle;
    }

    @if($direction == 'down') {
        border-top: $borderStyle;
    }

    @if($direction == 'left') {
        border-right: $borderStyle;
    }

    @if($direction == 'right') {
        border-left: $borderStyle;
    }
}


</code></pre><p>总之，<em>能用 CSS 实现的就不用 JS</em>，不仅性能好，而且还跨技术栈，甚至跨端。</p><span id="OSC_h1_5"></span><h1>深度剖析 JS</h1><p>介绍完了 CSS，再来看 JS，主要从基本语句和框架源码两个方面深入。</p><span id="OSC_h3_6"></span><h3>if-else 语句的优化</h3><p>先了解下 CPU 是如何执行条件语句的。参考如下代码：</p><pre><code>const a = 2
const b = 10
let c
if (a &gt; 3) {
    c = a + b
} else {
    c = 2 * a
}


</code></pre><p>CPU 执行流程如下：</p><p><img src="https://img10.360buyimg.com/imagetools/s800x600_jfs/t1/161135/14/39555/33039/64d24b5eF7de3c3f5/ac2e1a47b7dd0a46.jpg" alt="条件语句" referrerpolicy="no-referrer"></p><p>我们看到，在执行到指令 0102 时候，由于不满足 a &gt; 3 这个条件，就直接跳转到 0104 这个指令去执行了；而且，计算机很聪明，如果它在编译期间发现 a 永远不可能大于 3，它就会直接删除 0103 这条指令，然后，0104 这条指令就变成了下一条指令，直接顺序执行，也就是编译器的优化。</p><p>那么回到正题，假如有以下代码：</p><pre><code>function check(age, sex) {
    let msg = ''
    if (age &gt; 18) {
        if (sex === 1) {
            msg = '符合条件'
        } else {
            msg = ' 不符合条件'
        }
    } else {
        msg = '不符合条件'
    }
}


</code></pre><p>逻辑很简单，就是筛选出 age &gt; 18 并且 sex == 1 的人，代码一点儿问题都没有，但是太啰嗦，站在 CPU 的角度来看，需要执行两次跳转操作，当 age &gt; 18 时，就进入内层的 if-else 继续判断，也就意味着再次跳转。</p><p>其实我们可以直接优化下这个逻辑（通常我们也是这样做的，但是可能知其然而不知其所以然）：</p><pre><code>function check(age, sex){
    if (age &gt; 18 &amp;&amp; sex ==1) return '符合条件'
    return '不符合条件'
}


</code></pre><p>所以，<em>逻辑能提前结束就提前结束</em>，减少 CPU 的跳转。</p><span id="OSC_h3_7"></span><h3>Switch 语句的优化</h3><p>其实 switch 语句和 if-else 语句的区别不大，只不过写法不同而已，但是，switch 语句有个特殊的优化，那就是数组。</p><p>参考以下代码：</p><pre><code>function getPrice(level) {
    if (level &gt; 10) return 100
    if (level &gt; 9) return 80
    if (level &gt; 6) return 50
    if (level &gt; 1) return 20
    return 10
}


</code></pre><p>我们改成 switch 语句：</p><pre><code>function getPrice(level) {
    switch(level)
        case 10: return 100
        case 9: return 80
        case 8: 
        case 7: 
        case 6: return 50
        case 5:
        case 4: 
        case 3:
        case 2: 
        case 1: return 20
        default: return 10
}


</code></pre><p>看着没啥区别，其实编译器会把它优化成一个数组，其中数组的下标为 0 到 10，不同下标对应的价格就是 return 的数值，也就是：</p><p><img src="https://img10.360buyimg.com/imagetools/s600x400_jfs/t1/175596/15/37588/20396/64d843c7F89354a5e/ca2e5f45d0bdb94a.jpg" alt="Swich 数组" referrerpolicy="no-referrer"></p><p>而我们又知道，数组是支持随机访问的，速度极快，所以，编译器对 switch 的这个优化就会大大提升程序的运行效率，这可比一条一条执行命令快多了。</p><p>那么，我还写个毛的 if-else 语句啊，我直接全部写 switch 不就行了？</p><p>不行！因为编译器对 switch 的优化是有条件的，它要求你的 code 必须是紧凑的，也就是连续的。</p><p>这是为什么呢？因为我要用数组来优化你啊，你如果不是紧凑的，比如你的 code 是 1、50、51、101、110，我就要创建一个长度 110 的数组来存放你，只有这几个位置有用，岂不是浪费空间！</p><p>所以，我们在使用 switch 的时候，尽量保证_code 是紧凑的数字类型_的。</p><span id="OSC_h3_8"></span><h3>循环语句的优化</h3><p>其实循环语句跟条件语句类似，只不过写法不同而已，循环语句的优化点是以减少指令为主。</p><p>我们先来看一个中二的写法：</p><pre><code>function findUserByName(users) {
   let user = null
   for (let i = 0; i &lt; users.length; i++) {
       if (users[i].name === '张三') {
           user = users[i]
       }
   }
   return user
}


</code></pre><p>如果数组长度是 10086，第一个人就叫张三，那后面 10085 次遍历不就白做了，真拿 CPU 不当人啊。</p><p>你直接这样写不就行了：</p><pre><code>function findUserByName(users) {
    for (let i = 0; i &lt; users.length; i++) {
        if (users[i].name === '章三') return users[i]
    }
}


</code></pre><p>这样写效率高，可读性强，也符合我们上述的_逻辑能提前结束就提前结束_这个观点。CPU 直接感谢你全家。</p><p>其实，这里还有一点可以优化的地方，就是我们的数组长度可以提取出来，不必每次都访问，也就是这样：</p><pre><code>function findUserByName(users) {
    let length = users.length
    for (let i = 0; i &lt; length; i++) {
        if (users[i].name === '章三') return users[i]
    }
}


</code></pre><p>这看起来好像有点吹毛求疵了，确实是，但是如果考虑到性能的话，还是有点用的。比如有的集合的 size() 函数，不是简单的属性访问，而是每次都需要计算一次，这种场景就是一次很大的优化了，因为省了很多次函数调用的过程，也就是省了很多个 call 和 return 指令，这无异是提高了代码的效率的。尤其是在循环语句这种容易量变引起质变的情况下，差距就是从这个细节拉开的。</p><p>函数调用过程参考：</p><p><img src="https://img11.360buyimg.com/imagetools/s600x400_jfs/t1/131395/2/38988/49150/64d84d80Fd23ae780/ecbcc25c4864d6be.jpg" alt="函数调用" referrerpolicy="no-referrer"></p><p>对应代码如下：</p><pre><code>let a = 10
let b = 11

function sum (a, b) {
    return a + b
}


</code></pre><p>说完了几个基础语句，再来看下我们经常使用的框架内部，很多地方的性能都值得探索。</p><span id="OSC_h3_9"></span><h3>diff 算法</h3><p>Vue 和 React 中都使用了虚拟 DOM，当执行更新时，要对比新旧虚拟 DOM。如果没有任何优化，直接严格 diff 两颗树，时间复杂度是 O(n^3)，根本不可用。所以 Vue 和 React 必须使用 diff 算法优化虚拟 DOM：</p><p>Vue2 - 双端比较：</p><p><img src="https://img11.360buyimg.com/imagetools/s800x400_jfs/t1/198309/31/39725/133039/64e066d4Fd910f65f/8755ff579c61ecfc.png" alt="Vue2 - 双端比较" referrerpolicy="no-referrer"></p><p>类似上面的图：</p><ul><li><p>定义 4 个变量，分别为：oldStartIdx、oldEndIdx、newStartIdx 和 newEndIdx</p></li><li><p>判断 oldStartIdx 和 newStartIdx 是否相等</p></li><li><p>判断 oldEndIdx 和 newEndIdx 是否相等</p></li><li><p>判断 oldStartIdx 和 newEndIdx 是否相等</p></li><li><p>判断 oldEndIdx 和 newStartIdx 是否相等</p></li><li><p>同时 oldStartIdx 和 newStartIdx 向右移动；oldEndIdx 和 newEndIdx 向左移动</p></li></ul><p>Vue3 - 最长递增子序列：</p><p><img src="https://img11.360buyimg.com/imagetools/s600x300_jfs/t1/216465/32/35923/163040/64e066d4Fdc67f7dd/a7849b21373e218a.png" alt="Vue3 - 最长递增子序列" referrerpolicy="no-referrer"></p><p>整个过程是基于 Vue2 的双端比较再次进行优化。比如上面这个截图：</p><ul><li><p>先进行双端比较，发现前面两个节点（A 和 B）和最后一个节点（G）是一样的，不需要移动</p></li><li><p>找到最长递增子序列 C、D、E（新旧 children 都包含的，最长的顺序没有发生变化的一组节点）</p></li><li><p>把子序列当成一个整体，内部不用进行任何操作，只需要把 F 移动到它的前面，H 插入到它的后面即可</p></li></ul><p>React - 仅右移：</p><p><img src="https://img13.360buyimg.com/imagetools/s600x400_jfs/t1/151594/6/34260/221810/64e066d4F4bcceae1/8a8f00e131d94c49.png" alt="React - 仅右移" referrerpolicy="no-referrer"></p><p>上面截图的比较过程如下：</p><ul><li><p>遍历 Old 存下对应下标 Map</p></li><li><p>遍历 New，b 的下标从 1 变成了 0，不动（是左移不是右移）</p></li><li><p>c 的下标从 2 变成了 1，不动（也是左移不是右移）</p></li><li><p>a 的下标从 0 变成了 2，向右移动，b、c 下标都减 1</p></li><li><p>d 和 e 位置没变，不需要移动</p></li></ul><p>总之，不管用什么算法，它们的原则都是：</p><ul><li><p>只比较同一层级，不跨级比较</p></li><li><p>Tag 不同则删掉重建（不再去比较内部的细节）</p></li><li><p>子节点通过 key 区分（key 的重要性）</p></li></ul><p>最后也都成功把时间复杂度降低到了 O(n)，才可以被我们实际项目使用。</p><span id="OSC_h3_10"></span><h3>setState 真的是异步吗</h3><p>很多人都认为 setState 是异步的，但是请看下面的例子：</p><pre><code>clickHandler = () =&gt; {
    console.log('--- start ---')

    Promise.resolve().then(() =&gt; console.log('promise then'))

    this.setState({val: 1}, () =&gt; {console.log('state...', this.state.val)})

    console.log('--- end ---')
}

render() {
    return &lt;div onClick={this.clickHandler}&gt;setState&lt;/div&gt;
}


</code></pre><p>实际打印结果：</p><p><img src="https://img10.360buyimg.com/imagetools/s600x300_jfs/t1/160906/37/39538/26895/64e06fe1F4dfbd3cb/e780ba03077aa591.jpg" alt="setState 打印结果" referrerpolicy="no-referrer"></p><p>如果是异步的话，state 的打印应该在微任务 Promise 后执行。</p><p>为了解释清这个原因，必须先了解 JSX 里的事件机制。</p><p>JSX 里的事件，比如 onClick={() =&gt; {}}，其实叫合成事件，区别于我们常说的自定义事件：</p><pre><code>// 自定义事件
document.getElementById('app').addEventListener('click', () =&gt; {})


</code></pre><p>合成事件都是绑定在 root 根节点上，有前置和后置操作，拿上面的例子举例：</p><pre><code>function fn() { // fn 是合成事件函数，内部事件同步执行
    // 前置
    clickHandler()
    
    // 后置，执行 setState 的 callback
}


</code></pre><p>可以想象有函数 fn，里面的事件都是同步执行的，包括 setState。fn 执行完，才开始执行异步事件，即 Promise.then，符合打印的结果。</p><p>那么 React 为什么要这么做呢？<br> 因为要考虑性能，如果要多次修改 state，React 会先合并这些修改，合并完只进行一次 DOM 渲染，避免每次修改完都渲染 DOM。</p><p>所以 setState_本质是同步_，日常说的「异步」是不严谨的。</p><span id="OSC_h1_11"></span><h1>前端算法</h1><p>讲完了我们的日常开发，再来说说算法在前端中的应用。</p><blockquote><p>友情提示：算法一般都是针对大数据量而言，区别于日常开发。</p></blockquote><span id="OSC_h3_12"></span><h3>能用值类型就不用引用类型</h3><p>先来看一道题。</p><p>求 1-10000 之间的所有对称数，例如：0, 1, 2, 11, 22, 101, 232, 1221...</p><p>思路 1 - 使用数组反转、比较：数字转换为字符串，再转换为数组；数组 reverse，再 join 为字符串；前后字符串进行对比。</p><pre><code>function findPalindromeNumbers1(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        // 转换为字符串，转换为数组，再反转，比较
        const s = i.toString()
        if (s === s.split('').reverse().join('')) {
            res.push(i)
        }
    }

    return res
}


</code></pre><p>思路 2 - 字符串头尾比较：数字转换为字符串；字符串头尾字符比较。</p><pre><code>function findPalindromeNumbers2(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        const s = i.toString()
        const length = s.length

        // 字符串头尾比较
        let flag = true
        let startIndex = 0 // 字符串开始
        let endIndex = length - 1 // 字符串结束
        while (startIndex &lt; endIndex) {
            if (s[startIndex] !== s[endIndex]) {
                flag = false
                break
            } else {
                // 继续比较
                startIndex++
                endIndex--
            }
        }

        if (flag) res.push(res)
    }

    return res
}


</code></pre><p>思路 3 - 生成翻转数：使用 % 和 Math.floor 生成翻转数；前后数字进行对比 (全程操作数字，没有字符串类型)。</p><pre><code>function findPalindromeNumbers3(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        let n = i
        let rev = 0 // 存储翻转数

        // 生成翻转数
        while (n &gt; 0) {
            rev = rev * 10 + n % 10
            n = Math.floor(n / 10)
        }

        if (i === rev) res.push(i)
    }

    return res
}


</code></pre><p>性能分析：越来越快</p><ul><li><p>思路 1- 看似是 O(n)，但数组转换、操作都需要时间，所以慢</p></li><li><p>思路 2 VS 思路 3 - 操作数字更快（电脑原型就是计算器）</p></li></ul><p>总之，尽量不要转换数据结构，尤其数组这种有序结构，尽量不要用内置 API，如 reverse，不好识别复杂度，数字操作最快，其次是字符串。</p><span id="OSC_h3_13"></span><h3>尽量用「低级」代码</h3><p>还是直接上一道题。</p><p>输入一个字符串，切换其中字母的大小写<br> 如，输入字符串 12aBc34，输出字符串 12AbC34</p><p>思路 1 - 使用正则表达式。</p><pre><code>function switchLetterCase(s) {
    let res = ''

    const length = s.length
    if (length === 0) return res

    const reg1 = /[a-z]
    const reg2 = /[A-Z]

    for (let i = 0; i &lt; length; i++) {
        const c = s[i]
        if (reg1.test(c)) {
            res += c.toUpperCase()
        } else if (reg2.test(c)) {
            res += c.toLowerCase()
        } else {
            res += c
        }
    }

    return res
}


</code></pre><p>思路 2 - 通过 ASCII 码判断。</p><pre><code>function switchLetterCase2(s) {
    let res = ''

    const length = s.length
    if (length === 0) return res

    for (let i = 0; i &lt; length; i++) {
        const c = s[i]
        const code = c.charCodeAt(0)

        if (code &gt;= 65 &amp;&amp; code &lt;= 90) {
            res += c.toLowerCase()
        } else if (code &gt;= 97 &amp;&amp; code &lt;= 122) {
            res += c.toUpperCase()
        } else {
            res += c
        }
    }

    return res
}


</code></pre><p>性能分析：前者使用了正则，慢于后者</p><p>所以，尽量用「低级」代码，慎用语法糖、高级 API 或者正则表达式。</p><span id="OSC_h1_14"></span><h1>计算机底层</h1><p>最后说一些前端需要了解的计算机底层。</p><span id="OSC_h3_15"></span><h3>从「内存」读数据</h3><p>我们通常说的：从内存中读数据，就是把数据读入寄存器中，但是我们的数据不是直接从内存读入寄存器的，而是先读入一个高速缓存中，然后才读入寄存器的。</p><blockquote><p>寄存器是在 CPU 内的，也是 CPU 的一部分，所以 CPU 从寄存器读写数据非常快。</p></blockquote><p>这是为啥呢？因为从内存中读数据太慢了。</p><p>你可以这么理解：CPU 先把数据读入高速缓存中，以备使用，真正使用的时候，就从高速缓存中读入寄存器；当寄存器使用完毕后，就把数据写回到高速缓存中，然后高速缓存再在合适的时机将数据写入到存储器。</p><p>CPU 运算速度非常快，而从内存读数据非常慢，如果每次都从内存中读写数据，那么势必会拖累 CPU 的运算速度，可能执行 100s，有 99s 都在读取数据。为了解决这个问题，我们就在 CPU 和存储器之间放了个高速缓存，而 CPU 和高速缓存之间的读写速度是很快的，CPU 只管和高速缓存互相读写数据，而不管高速缓存和存储器之间是怎么同步数据的。这样就解决了内存读写慢的问题。</p><span id="OSC_h3_16"></span><h3>二进制的位运算</h3><p>灵活运用二进制的位运算不仅能提高速度，熟练使用二进制还能节省内存。</p><p>假如给定一个数 n，怎么判断 n 是不是 2 的 n 次方呢？</p><p>很简单啊，直接求余就行了。</p><pre><code>function isPowerOfTwo(n) {
    if (n &lt;= 0) return false
    let temp = n
    while (temp &gt; 1) {
        if (temp % 2 != 0) return false
        temp /= 2
    }
    return true
}


</code></pre><p>嗯，代码没毛病，不过不够好，看下面代码：</p><pre><code>function isPowerOfTwo(n) {
    return (n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0)
}


</code></pre><p>大家可以用 console.time 和 console.timeEnd 对比下运行速度便知。</p><p>我们可能还会看到一些源码里面有很多 flag 变量，对这些 flag 进行按位与或按位或运算来检测标记，从而判断是否开启了某个功能。他为什么不直接用布尔值呢？很简单，这样效率高还节省内存。</p><p>比如 Vue3 源码中的这段代码，不仅用到了按位与和按位或，还用到了左移：</p><pre><code>export const enum ShapeFlags {
  ELEMENT = 1,
  FUNCTIONAL_COMPONENT = 1 &lt;&lt; 1,
  STATEFUL_COMPONENT = 1 &lt;&lt; 2,
  TEXT_CHILDREN = 1 &lt;&lt; 3,
  ARRAY_CHILDREN = 1 &lt;&lt; 4,
  SLOTS_CHILDREN = 1 &lt;&lt; 5,
  TELEPORT = 1 &lt;&lt; 6,
  SUSPENSE = 1 &lt;&lt; 7,
  COMPONENT_SHOULD_KEEP_ALIVE = 1 &lt;&lt; 8,
  COMPONENT_KEPT_ALIVE = 1 &lt;&lt; 9,
  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT
}


if (shapeFlag &amp; ShapeFlags.ELEMENT || shapeFlag &amp; ShapeFlags.TELEPORT) {
  ...
}


if (hasDynamicKeys) {
      patchFlag |= PatchFlags.FULL_PROPS
    } else {
    if (hasClassBinding) {
      patchFlag |= PatchFlags.CLASS
    }
    if (hasStyleBinding) {
      patchFlag |= PatchFlags.STYLE
    }
    if (dynamicPropNames.length) {
      patchFlag |= PatchFlags.PROPS
    }
    if (hasHydrationEventBinding) {
      patchFlag |= PatchFlags.HYDRATE_EVENTS
    }
}


</code></pre><span id="OSC_h1_17"></span><h1>结语</h1><p>文章从代码层面讲解了前端的性能，有深度维度的：</p><ul><li><p>JS 基础知识深度剖析</p></li><li><p>框架源码</p></li></ul><p>也有广度维度的：</p><ul><li><p>CSS 动画、组件</p></li><li><p>算法</p></li><li><p>计算机底层</p></li></ul><p>希望能让大家拓宽前端性能的视野，如果对文章感兴趣，欢迎留言讨论～～～</p><blockquote><p>作者：京东零售&nbsp;杨进军</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 02:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10114289</guid>
            <link>https://my.oschina.net/u/4090830/blog/10114289</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust GUI 库 egui 0.23 发布，新增简单且强大的图像 API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">egui 0.23 版本已经发布了。egui 是易于使用、可移植的即时模式 (immediate mode) GUI 库，采用 Rust 编写，可运行在 Web 和原生应用中。</span></p><p><img height="382" src="https://static.oschina.net/uploads/space/2023/0928/160731_qsi2_3820517.png" width="338" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#1f2328">此版本包含一个简单且强大的图像 API：</span></p><pre><span style="color:var(--color-prettylights-syntax-comment)">// Load from web:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">image</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">"https://www.example.com/some_image.png"</span><span>)</span><span>;</span><span style="color:var(--color-prettylights-syntax-comment)">// Include image in the binary using `include_bytes`:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">image</span><span>(</span>egui<span>::</span>include_image!<span>(</span><span style="color:var(--color-prettylights-syntax-string)">"../assets/ferris.svg"</span><span>)</span><span>)</span><span>;</span><span style="color:var(--color-prettylights-syntax-comment)">// With options:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">add</span><span>(</span>
    egui<span>::</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Image</span><span>::</span><span style="color:var(--color-prettylights-syntax-entity)">new</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">"file://path/to/image.jpg"</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">max_width</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">200.0</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">rounding</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">10.0</span><span>)</span><span>,</span><span>)</span><span>;</span></pre><p><span style="background-color:#ffffff; color:#1f2328">该 API 基于插件系统，开发者可以告诉<span></span></span><code>egui</code><span style="background-color:#ffffff; color:#1f2328"><span></span>如何加载图像，以及从何处加载。</span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><code>egui_extras</code>&nbsp;配备了加载器，只需要在 <code>Cargo.toml</code> 中添加以下内容：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">egui_extras</span> = { <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">version</span> = <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>0.23<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">features</span> = [<span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>all_loaders<span style="color:var(--color-prettylights-syntax-string)">"</span></span>] }
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">image</span> = { <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">version</span> = <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>0.24<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">features</span> = [<span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>jpeg<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>png<span style="color:var(--color-prettylights-syntax-string)">"</span></span>] } <span style="color:var(--color-prettylights-syntax-comment)"><span style="color:var(--color-prettylights-syntax-comment)">#</span> Add the types you want support for</span></pre><p><span style="background-color:#ffffff; color:#1f2328">并将此添加到代码中：</span></p><pre>egui_extras<span>::</span><span style="color:var(--color-prettylights-syntax-entity)">install_image_loaders</span><span>(</span>egui_ctx<span>)</span><span>;</span></pre><p>详情查看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Freleases%2Ftag%2F0.23.0" target="_blank">https://github.com/emilk/egui/releases/tag/0.23.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 08:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259867/egui-0-23-released</guid>
            <link>https://www.oschina.net/news/259867/egui-0-23-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[oauth2-shiro 2.0.0 版本发布，安全大升级]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p>oauth2-shiro v2.0.0 版本正式发布，在距上一次发布 7 年后，更新了大版本，对安全漏洞等问题进行大升级。</p><p>该版本主要更新内容：</p><ol><li>升级使用 springboot，调整工程结构，打包由 war 换成 jar，使用 thymeleaf 替换 servlet/jsp；spring 大版本升级到 5.3 提升安全性。</li><li>JDK 由 1.7 升级到 1.8，日志框架使用 logback 替换 log4j（处理掉 log4j 安全漏洞）。</li><li>升级 shiro 版本到 v1.11.0，解决相应的 shiro 版本漏洞。</li><li>密码存储算法由 MD5 替换为 SHA-256，并支持盐 (salt)，让密码存储更安全可靠（通过配置参数 authz.store.credentials.alg 来控制与向下兼容）。</li><li>OAuth token 支持使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjwt.io%2F" target="_blank">JWT</a>格式（通过配置参数 authz.token.generator.type 来控制与向下兼容）。</li><li>对初始的账户密码与 client secret 使用更加安全的密码策略：包括大小写字母，数字与特殊符号，长度至少 10 位。</li></ol><p>v2.0.0 版本链接：<a href="https://gitee.com/mkk/oauth2-shiro/tree/2.0.0/">https://gitee.com/mkk/oauth2-shiro/tree/2.0.0/</a>。</p><p>【推荐升级】</p></div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 08:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259866/oauth2-shiro-2-0-0-released</guid>
            <link>https://www.oschina.net/news/259866/oauth2-shiro-2-0-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Raspberry Pi 5 将于 10 月底发布，60 美元起售]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在 <a href="https://www.oschina.net/news/107700/raspberry-pi-4-model-b">Raspberry Pi 4</a> 发布四年后，<span style="background-color:#ffffff">Raspberry Pi 公司</span><span style="background-color:#ffffff">宣布 Raspberry Pi 5 将于 10 月底推出。此前，</span><span style="background-color:#ffffff">Raspberry Pi 首席执行官 Eben Upton 在访谈中</span></span><a href="https://www.oschina.net/news/222527/raspberry-pi-5" target="_blank">表示</a><span style="color:#000000"><span style="background-color:#ffffff">，由于持续的供应链复苏，Raspberry Pi 可能不会在 2023 年发布 Raspberry Pi 5。</span></span></p><p><span style="color:#000000">根据介绍，Raspberry Pi 5 4GB 型号的售价为 60 美元，8GB 版本的售价为 80 美元。与 Raspberry Pi 4 相比，Raspberry Pi 5&nbsp;的 CPU 和 GPU 性能提高了两到三倍；内存和 I/O 带宽大约是两倍；并且是首款采用英国剑桥内部设计的芯片的 Raspberry Pi 计算机。</span></p><p><img height="333" src="https://oscimg.oschina.net/oscnet/up-d361cf4dc5042dc2ca363c929128c72f516.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><strong><span style="color:#000000">主要特点包括：</span></strong></p><ul><li><span style="color:#000000">2.4GHz 四核 64 位 Arm Cortex-A76 CPU</span></li><li><span style="color:#000000">VideoCore VII GPU，支持 OpenGL ES 3.1、Vulkan 1.2</span></li><li><span style="color:#000000">双 4Kp60 HDMI 显示输出</span></li><li><span style="color:#000000">4Kp60 HEVC 解码器</span></li><li><span style="color:#000000">双频 802.11ac Wi-Fi</span></li><li><span style="color:#000000">Bluetooth 5.0 / Bluetooth Low Energy (BLE)</span></li><li><span style="color:#000000">支持 SDR104 模式的高速 microSD 卡接口</span></li><li><span style="color:#000000">2 个 USB 3.0 端口，支持 5Gbps 同步运行</span></li><li><span style="color:#000000">2 个 USB 2.0 端口</span></li><li><span style="color:#000000">千兆位以太网，支持 PoE+（需要单独的 PoE+ HAT，即将推出）</span></li><li><span style="color:#000000">2 × 4-lane MIPI 摄像头/显示收发器</span></li><li><span style="color:#000000">PCIe 2.0 x1 接口，用于快速外设</span></li><li><span style="color:#000000">Raspberry Pi 标准 40-pin GPIO 接头</span></li><li><span style="color:#000000">Real-time clock</span></li><li><span style="color:#000000">电源按钮</span></li></ul><h4><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>新平台、新芯片组</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="background-color:#ffffff; color:#222222">三款新芯片均专为 Raspberry Pi 5 程序设计。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BCM2712</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="background-color:#ffffff; color:#222222">BCM2712 是 Broadcom 的一款新型 16 纳米应用处理器 (AP)，源自为 Raspberry Pi 4 提供动力的 28 纳米 BCM2711 AP，并具有众多架构增强功能。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="337" src="https://oscimg.oschina.net/oscnet/up-8c726b4de45a468c3271117d7ce5b99aca5.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>RP1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">RP1 是用于 Raspberry Pi 5 的 I/O 控制器，由 Raspberry Pi 提供 RP2040 微控制器的同一团队设计，并与 RP2040 一样，在 TSMC 成熟的 40LP 工艺上实现。RP1 自 2016 年开始开发，是在 Raspberry Pi 上开展过的运行时间最长、最复杂且（耗资 1500 万美元）最昂贵的项目。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="333" src="https://oscimg.oschina.net/oscnet/up-efd812a0420b676ba96d4b1be955ae094ed.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>DA9091</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BCM2712 和 RP1 由芯片组的第三个新组件&nbsp;Renesas DA9091 "Gilmour" power-management IC (PMIC) 支持。它集成了八个独立的开关模式电源，以生成电路板所需的各种电压，其中包括一个四相核心电源，能够提供 20 安培的电流，为 Cortex-A76 cores 和 BCM2712 中的其他数字逻辑供电。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#222222">与 BCM2712 一样，DA9091 是多年共同开发的成果。</span></p><div><img height="327" src="https://oscimg.oschina.net/oscnet/up-38bf4f1f2b6741bd33d457c7e5946f51be8.png" width="500" referrerpolicy="no-referrer"></div><h4><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>外形演变</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">从外观上看，</span>Raspberry Pi 5 与前代产品非常相似。不过，在保留信用卡大小的整体尺寸的同时，团队也借此机会更新了一些设计元素，以适应新芯片组的功能。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="335" src="https://oscimg.oschina.net/oscnet/up-86995819166a105d1ba44dca761548db40d.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fnews%2Fintroducing-raspberry-pi-5%2F" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 07:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259858/introducing-raspberry-pi-5</guid>
            <link>https://www.oschina.net/news/259858/introducing-raspberry-pi-5</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LMDE 6]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">LMDE 6 已正式</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.linuxmint.com%2F%3Fp%3D4570" target="_blank">发布</a><span style="background-color:#ffffff; color:#333333">，代号 "Faye"；新版</span><span style="color:#000000">本基于 Debian 12 Bookworm。</span></p><p><span style="color:#000000"><img alt="" height="322" src="https://oscimg.oschina.net/oscnet/up-d8017bac4462c4427dfb0cbfd2b95577a75.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">LMDE 是 "</span><span style="background-color:#ffffff">Linux Mint Debian Edition</span><span style="background-color:#ffffff">" 的缩写，即基于 Debian 的 Linux Mint。其目标是在不使用 Ubuntu 的前提下，确保可提供与 Linux Mint 相同的体验，软件包仓库来自 Debian。LMDE 还有一个目标是开发兼容除 Ubuntu 之外的软件。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">下载地址：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.linuxmint.com%2F%3Fp%3D4570" target="_blank">https://blog.linuxmint.com/?p=4570</a></p><p>具体更新内容包括：</p><h4><span style="color:#000000">已知的问题</span></h4><p style="text-align:left"><strong><span style="color:#000000">LMDE 安装程序</span></strong></p><p style="text-align:left"><span style="color:#000000">要以 expert 模式启动安装程序，需运行以下命令：</span></p><pre><code>sudo live-installer-expert-mode</code></pre><p style="text-align:left"><span style="color:#000000">要在现有 LVM 分区上安装 LMDE，必须首先将其从其所属的 LVM volumes 和 groups 中删除。</span></p><p style="text-align:left"><span style="color:#000000">在手动分区模式下，需要注意的是安装程序将自动挂载所有交换分区。这些分区也将被放置在已安装系统的 /etc/fstab 中。</span></p><p style="text-align:left"><span style="color:#000000"><strong>Locked root account</strong></span></p><p style="text-align:left"><span style="color:#000000">root 帐户默认被锁定。</span></p><p style="text-align:left"><span style="color:#000000">要使用恢复控制枱（从 Grub 菜单）或以 root 身份登录，首先需要为 root 提供一个新密码：</span></p><pre><code>sudo passwd root</code></pre><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>Virtualbox Guest Additions</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">要在 Virtualbox 中添加对共享文件夹、拖放、适当加速和显示分辨率的支持，可单击 Virtualbox 的「Devices」菜单，然后选择「Insert Guest Additions CD Image」。在出现询问时选择"download"，然后按说明操作。</span></p><p style="text-align:left"><span style="color:#000000">有关更多信息，可阅读</span><span style="color:#495057"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fcd%2FE36500_01%2FE36502%2Fhtml%2Fqs-guest-additions.html" target="_blank">安装 VirtualBox Guest Additions</a>。</span></p><p style="text-align:left"><strong><span style="color:#343a40">DVD Playback with VLC</span></strong></p><p style="text-align:left"><span style="color:#000000">如果 VLC 找不到你的 DVD 播放器，可单击 Media-&gt;Open Disc，然后指定「/dev/sr0」作为光盘设备。</span></p><h4 style="text-align:left"><strong><span style="color:#000000">Tips</span></strong></h4><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>实时会话中的用户名和密码</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">在实时会话中，用户名是「mint」，密码为空（即，如果要求输入密码，只需按 Enter 键）。</span></p><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>移动不适配屏幕的窗口</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">如果屏幕分辨率太低，有些窗口可能无法在屏幕上显示。按下 ALT 键时，可以使用鼠标抓取窗口的任何部分并将其在屏幕上移动。</span></p><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>32 位内核中的 PAE 支持</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">为了保证与非 PAE 处理器的兼容性，Linux Mint Debian 的 32 位版本默认配备 686 非 PAE 内核。要获得 PAE 支持，只需安装 686-PAE 内核并重新启动计算机即可。</span></p><p style="text-align:left"><span style="color:#000000">键入以下命令并重新启动计算机：</span></p><pre><code>apt update
apt install linux-headers-686-pae linux-image-686-pae</code></pre><p>详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinuxmint.com%2Frel_faye.php" target="_blank">查看发行说明</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 06:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259853/lmde-6-released</guid>
            <link>https://www.oschina.net/news/259853/lmde-6-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apache Dubbo 首个 Node.js 3.0-alpha 版本正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>关于 Apache Dubbo3</h3><p style="text-align:justify">Apache Dubbo 是一款易用、高性能的 WEB 和 RPC 框架，同时为构建企业级微服务提供服务发现、流量治理、可观测、认证鉴权等能力、工具与最佳实践。经过近几年发展，Dubbo3 已在阿里巴巴集团各条业务线实现全面推广，成功取代运行多年的 HSF 框架，同时 Dubbo3 的多语言体系也有了快速发展，目前涵盖的多语言体系有</p><ul><li>apache/dubbo<strong>[1]</strong>&nbsp;(java)</li><li>apache/dubbo-go<strong>[2]</strong></li><li>apache/dubbo-js<strong>[3]</strong>&nbsp;(web、node.js)</li><li>apache/dubbo-rust<strong>[4]</strong></li></ul><p style="text-align:justify">基于 Dubbo3 定义的 Triple 协议，你可以轻松编写浏览器、移动端、gRPC 兼容的 RPC 服务，并让这些服务同时运行在 HTTP/1 和 HTTP/2 上。Dubbo Node.js SDK 支持使用 IDL 或编程语言特有的方式定义服务，并提供一套轻量的 API 来发布或调用这些服务。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-6dd39f09768f62d955dde2fb6ceeafef_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_2"></span><h3>关于 Dubbo3 Node.js 首个发布版</h3><p style="text-align:justify">Dubbo-js 项目于 9 月份刚刚发布了支持 Dubbo3 协议的首个 alpha 版本，该项目是 Dubbo3 的 Typescript 版本实现，提供了 Web、Node.js 两种发布包。其中，Web 框架能让开发者直接在浏览器页面访问后端服务，Node.js 则进一步丰富了后端微服务技术栈的选择。当前 Node.js 版本主要是实现了 Triple 协议的完整支持，接下来的版本中，社区将继续完善地址发现、负载均衡等服务治理能力。</p><span id="OSC_h4_3"></span><h4>Node.js 微服务开发完整示例</h4><p style="text-align:justify">本示例基于最新发布的 Node.js 版本，演示了基于 Triple 协议的 RPC 通信模式，示例使用 Protocol Buffer 定义 RPC 服务，并演示了代码生成、服务发布和服务访问等过程。</p><p style="text-align:justify"><strong>前置条件</strong></p><p style="text-align:justify">因为使用 Protocol Buffer 的原因，我们首先需要安装相关的代码生成工具，这包括 @bufbuild/protoc-gen-es、@bufbuild/protobuf、@apachedubbo/protoc-gen-apache-dubbo-es、@apachedubbo/dubbo。</p><pre><code>npm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo</code></pre><p style="text-align:justify"><strong>定义服务</strong></p><p style="text-align:justify">现在，使用 Protocol Buffer (IDL) 来定义一个 Dubbo 服务。</p><p style="text-align:justify">创建目录，并生成文件：</p><pre><code>mkdir -p proto &amp;&amp; touch proto/example.proto</code></pre><p style="text-align:justify">写入内容：</p><pre><code>syntax = "proto3";

package apache.dubbo.demo.example.v1;

message SayRequest {
  string sentence = 1;
}

message SayResponse {
  string sentence = 1;
}

service ExampleService {
  rpc Say(SayRequest) returns (SayResponse) {}
}</code></pre><p style="text-align:justify">这个文件声明了一个叫做 ExampleService 的服务，为这个服务定义了 Say 方法以及它的请求参数 SayRequest 和返回值 SayResponse。</p><p style="text-align:justify"><strong>生成代码</strong></p><p style="text-align:justify">创建 gen 目录，做为生成文件放置的目标目录。</p><pre><code>mkdir -p gen</code></pre><p style="text-align:justify">运行以下命令，在 gen 目录下生成代码文件：</p><pre><code>PATH=$PATH:$(pwd)/node_modules/.bin \
  protoc -I proto \
  --es_out gen \
  --es_opt target=ts \
  --apache-dubbo-es_out gen \
  --apache-dubbo-es_opt target=ts \
  example.proto</code></pre><p style="text-align:justify">运行命令后，应该可以在目标目录中看到以下生成的文件:</p><pre><code>├── gen
│   ├── example_dubbo.ts
│   └── example_pb.ts
├── proto
│   └── example.proto</code></pre><p style="text-align:justify"><strong>实现服务</strong></p><p style="text-align:justify">接下来我们就需要添加业务逻辑了，实现 ExampleService ，并将其注册到 DubboRouter 中。</p><p style="text-align:justify">创建 dubbo.ts 文件：</p><pre><code>import { DubboRouter } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";

export default (router: DubboRouter) =&gt;
  // registers apache.dubbo.demo.example.v1
  router.service(ExampleService, {
    // implements rpc Say
    async say(req) {
      return {
        sentence: `You said: ${req.sentence}`,
      };
    },
  }, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });</code></pre><p style="text-align:justify"><strong>启动 Server</strong></p><p style="text-align:justify">Dubbo 服务可以嵌入到普通的 Node.js 服务器、Next.js、Express 或 Fastify 中。在这里我们将使用 Fastify，所以让我们安装 Fastify 以及我们为 Fastify 准备的插件。</p><pre><code>npm install fastify @apachedubbo/dubbo-fastify</code></pre><p style="text-align:justify">创建 server.ts 文件，新建一个 Server，把上一步中实现的 ExampleService 注册给它。</p><p style="text-align:justify">接下来就可以直接初始化和启动 Server 了，它将在指定的端口接收请求。</p><pre><code>import { fastify } from "fastify";
import { fastifyDubboPlugin } from "@apachedubbo/dubbo-fastify";
import routes from "./dubbo";

async function main() {
  const server = fastify();
  await server.register(fastifyDubboPlugin, {
    routes,
  });
  server.get("/", (_, reply) =&gt; {
    reply.type("text/plain");
    reply.send("Hello World!");
  });
  await server.listen({ host: "localhost", port: 8080 });
  console.log("server is listening at", server.addresses());
}

void main();</code></pre><p style="text-align:justify">最后，运行代码启动服务。</p><pre><code>npx tsx server.ts</code></pre><p style="text-align:justify"><strong>访问服务</strong></p><p style="text-align:justify">最简单的方式是使用 HTTP/1.1 POST 请求访问服务，参数则作以标准 JSON 格式作为 HTTP 负载传递。如下是使用 cURL 命令的访问示例:</p><pre><code>curl \
 --header 'Content-Type: application/json' \
 --header 'TRI-Service-Version: 1.0.0' \
 --header 'TRI-Service-group: dubbo' \
 --data '{"sentence": "Hello World"}' \
 http://localhost:8080/apache.dubbo.demo.example.v1.ExampleService/Say</code></pre><p style="text-align:justify">也可以使用标准的 Dubbo client 请求服务，我们首先需要从生成代码即 dubbo-node 包中获取服务代理，为它指定 server 地址并初始化，之后就可以发起起 RPC 调用了。</p><p style="text-align:justify">创建 client.ts 文件。</p><pre><code>import { createPromiseClient } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";
import { createDubboTransport } from "@apachedubbo/dubbo-node";

const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
  httpVersion: "1.1",
});

async function main() {
  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });
  const res = await client.say({ sentence: "Hello World" });
  console.log(res);
}
void main();</code></pre><p style="text-align:justify">运行客户端：</p><pre><code>npx tsx client.ts</code></pre><span id="OSC_h3_4"></span><h3>总结</h3><p style="text-align:justify">当前 Node.js 版本主要是实现了 Triple 协议的完整支持，接下来的版本中，社区将继续完善地址发现、负载均衡等服务治理能力</p><p style="text-align:justify"><strong>相关链接：</strong></p><p style="text-align:justify">[1] apache/dubbo</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo" target="_blank">https://github.com/apache/dubbo</a></em></u></p><p style="text-align:justify">[2] apache/dubbo-go</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-go" target="_blank">https://github.com/apache/dubbo-go</a></em></u></p><p style="text-align:justify">[3] apache/dubbo-js</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-js" target="_blank">https://github.com/apache/dubbo-js</a></em></u></p><p style="text-align:justify">[4] apache/dubbo-rust</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-rust" target="_blank">https://github.com/apache/dubbo-rust</a></em></u></p><p style="text-align:justify"><em>作者：蔡建怿</em></p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">点击立即免费试用云产品，开启云上实践之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1333160%3Futm_content%3Dg_1000381068" target="_blank">原文链接</a></strong></p><p style="text-align:justify"><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 06:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10114644</guid>
            <link>https://my.oschina.net/yunqi/blog/10114644</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Pika v3.5.1 发布，兼容 Redis 的 NoSQL 数据库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Pika 社区很高兴宣布，我们今天发布已经过我们生产环境验证 v3.5.1 版本 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Freleases%2Ftag%2Fv3.5.1" target="_blank">https://github.com/OpenAtomFoundation/pika/releases/tag/v3.5.1</a> 。</p><p>该版本不仅做了很多优化工作，还引入了多项新功能。这些新功能包括，动态关闭 WAL、ReplicationID 检测是否增量复制、在 K8s 环境上 Pika 服务的自动注册从而实现集群的自组织、以及 exporter 检测集群指标等等，无疑将会让用户享受到更为稳定和高效的 NoSQL 使用体验。</p><h2>1 新特性</h2><ul><li><p>1 Slow log 增加队列等待时间统计，在队列阻塞的时候方便我们进行问题定位。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1997" target="_blank">PR 1997</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwangshao1" target="_blank">wangshao1</a>。</p></li><li><p>2 主从复制使用 ReplicationID 判断是否进行增量同步，解决原主从同步方式切主后整个数据集会进行全量复制的问题，可以提升 Pika 性能。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1951" target="_blank">PR 1951</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>3 WAL 以 'disablewal' 命令方式支持动态关闭，在写性能遇到瓶颈的时候，可以通过命令关闭 WAL &nbsp;缓解写性能下降的问题，关闭 WAL 有机器宕机后丢失数据的风险，用户需要根据自己的使用习惯权衡。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2015" target="_blank">PR 2015</a>，作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>4 flush 线程数和 compaction 线程数合二为一，在 Compaction 性能瓶颈时，可以动态调整线程数，缓解 Comapction 损耗 Pika 性能的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2014" target="_blank">PR 2014</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTianpingan" target="_blank">Tianpingan</a>。</p></li><li><p>5 升级了 RocksDB 版本到 v8.3.3。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2000" target="_blank">PR 2000</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdingxiaoshuai123" target="_blank">dingxiaoshuai123</a>。</p></li><li><p>6 新增周期性打印工作队列的长度功能，在队列阻塞的时候可以快速定位问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1978" target="_blank">PR 1978</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTianpingan" target="_blank">Tianpingan</a>。</p></li><li><p>7 新增利用一个&nbsp;<code>pika_exporter</code>&nbsp;监测整个集群的指标，实现一个 Pika Exporter 实例监控整个集群，解决了 3.5.0 版本一个&nbsp;Pika Exporter &nbsp;监测一个 Pika 实例消耗资源的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1953" target="_blank">PR 1953</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenbt-hz" target="_blank">chenbt-hz</a>。</p></li><li><p>8 实现在&nbsp; K8s &nbsp;环境上&nbsp; Pika &nbsp;服务的自动注册，在启动时自动注册，从而实现集群的自组织 ，实现了通过命令拉起整个 Pika Cluster 集群。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1931" target="_blank">PR 1931</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmachinly" target="_blank">machinly</a>。</p></li></ul><h2>2 bug 修复</h2><ul><li><p>1 调整了 Rate_limit 参数，修复了压测时出现 RPS 为 0 的情况 。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2009" target="_blank">PR 2009</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>2 修复了 INFODATA 命令中对于遍历数据文件时出现空路径的逻辑判断。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1996" target="_blank">PR 1996</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>3 修复了 Codis 在线上出现大毛刺的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2016" target="_blank">PR 2016</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchejinge" target="_blank">chejinge</a>。</p></li><li><p>4 修复了 macOS 环境下编译使用 tools 导致编译不过的问题 。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2011" target="_blank">PR 2011</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FA2ureStone" target="_blank">A2ureStone</a>。</p></li><li><p>5 减少了 exporter 非必要日志的打印，降低，了资源利用率。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1945" target="_blank">PR 1945</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li></ul><h2>3 使用建议</h2><p>本次新增了几个配置参数，大家在使用过程中，需要根据使用情况按需调整：</p><ul><li><p>1 max-rsync-parallel-num：主从全量复制线程数，需要根据自己机器 CPU 核数和部署实例个数进行调整，建议最小设置为 2。</p></li><li><p>2 rate-limiter-bandwidth:&nbsp;限制 RocksDB 数据库读写速度，限制数据库在一定时间内可以读写的数据量，默认 2000MiB/s，需要根据自己的机器性能和部署实例做调整。</p></li><li><p>max-background-jobs: compaction 和 flushdb 线程数，要根据自己机器 CPU 核数和部署实例个数进行调整，建议最小设置为 4。</p></li><li><p>3 throttle-bytes-per-second:&nbsp;主从复制传输限速参数，默认为 200MiB/s，该参数可以根据机器网卡的配置及部署 pika 实例的个数进行调整。</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-d55384ab133b76068b38aa4c6549a956cfd.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 06:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/dubbogo/blog/10114890</guid>
            <link>https://my.oschina.net/dubbogo/blog/10114890</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stellarium 23.3 发布，开源 3D 天象模拟软件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Stellarium 23.3 已发布。从 v23.1 开始，发布的版本号将显示 year.release scheme。对于 Windows，所使用的 Qt 框架版本作为包名称的一部分可见。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Stellarium 是一款免费开源 GPL（自由软件基金会 GNU 通用公共许可证）软件，它使用 OpenGL 图形接口对星空进行实时渲染。软件可以模拟肉眼、双筒望远镜和小型天文等观察天空，根据观测者所处时间和位置，计算出天空中太阳、月球、行星等天体位置，并将其精确地显示出来。还可以绘制星座、演示天文现象，如流星雨、日食和月食等。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">Stellarium 还被应用于天文馆中作为教学展示软件，作为天文爱好者星空望远镜观测辅助软件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="374" src="https://oscimg.oschina.net/oscnet/up-0aa6143a3e2a1325d21d488ecfd731d4a83.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">此版本的主要变化内容如下：</p><ul><li>新插件：Missing Stars</li><li>允许半透明景观</li><li>添加了太阳系天体的发现环境</li><li>改进小天体的轨道绘制</li><li>将 named impact features 显示为 ellipses</li><li>Navigational Stars 插件的主要变化</li><li>Observing List 修复</li><li>明确的彗星名称</li><li>以及许多小问题的修复</li></ul><p><strong>TELESCOPE USERS</strong></p><ul><li><span style="color:#000000">已经发现并修复了基于 Qt6 版本的 TelescopeControl 插件中的一些错误。</span></li></ul><p><span style="color:#000000">Telescope users 可检查一下问题是否已经解决。如果没有解决的话，</span>Stellarium 团队正在寻求有能力解决该问题的开发者的协助，可能会有奖励。</p><p><span style="color:#000000">详情可</span><span style="color:#333333">参阅</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstellarium.org%2Frelease%2F2023%2F09%2F25%2Fstellarium-23.3.html" target="_blank">完整的更改列表</a><span style="background-color:#ffffff; color:#333333">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 02:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259821/stellarium-23-3-released</guid>
            <link>https://www.oschina.net/news/259821/stellarium-23-3-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[电力行业首个自主可控的大模型发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">南方电网人工智能科技有限公司负责研发的电力行业人工智能创新平台及自主可控电力大模型正式公开<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWqir8vzxkVkDvwpTXtYKKQ" target="_blank">发布</a>。</span></p><p><span style="color:#000000">电力行业人工智能创新平台提供模型即服务（MaaS），支持模型快速迭代开发，并支撑电力人工智能资源面向全社会开放共享。百度提供了昆仑芯 AI 芯片、飞桨框架、开发套件等技术产品支持。</span></p><p><span style="color:#000000">电力大模型是电力行业人工智能创新平台首个产品，覆盖智能创作、设备巡检、电力调度等七大应用场景，也可应用于特定业务场景。其中，电力调度场景功能通过百度智能云千帆大模型平台，基于文心大模型打造。</span></p><p><span style="color:#000000">南方电网人工智能公司表示，将深度挖掘电网企业在电力人工智能领域的数据、场景、专业优势，同时将携手各方共同推进人工智能与能源电力行业深度融合，为数字时代经济体系优化升级和满足人民美好生活的电力需要做出更大贡献。</span></p><p><span style="color:#000000">发布会现场演示了「南网调度值班助手」，一个基于百度文心大模型打造的 AI 原生应用。根据介绍，电力调度值班助手遇到问题第一时间就能给出高质量解答，让员工不再需要投入大量时间去死记硬背常规内容。面对紧急情况，它可以秒级生成处置方案，及时响应 15 分钟电力市场调节要求。</span></p><p><span style="color:#000000"><img alt="" height="235" src="https://oscimg.oschina.net/oscnet/up-7f687c2312fb31fc129b37f1e57f71bcef3.jpg" width="700" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">而且，员工只需要说一句话，电力调度值班助手就可以把各种安全预警归类总结，整理地清清楚楚，自动生成工单和交接班日报，让管理和调度人员，能快速知晓全局态势。电力调度值班助手增强了应急响应能力，在应对突发事件的紧急情况时，可以快速响应，制定合理的调度策略，保障电力供应的稳定和安全。</span></p><p><span style="color:#000000">南方电网人工智能科技有限公司研发的电力行业人工智能创新平台，可面向内外部用户提供训练、微调、部署等服务，是算法模型的训练工厂，将有效降低电力企业获取大模型能力的门槛。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259815</guid>
            <link>https://www.oschina.net/news/259815</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Omnivore —— 稍后阅读应用程序]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Omnivore 是一款免费、开源、适合认真阅读的稍后阅读应用程序。不受干扰、注重隐私、开源，专为知识工作者和终身学习者而设计。适合喜欢阅读的人。</p><p>保存文章、新闻通讯和文档并稍后阅读，专注且无干扰。添加注释和亮点。按照你想要的方式整理你的阅读列表并在所有设备上同步。</p><p><img alt="" height="333" src="https://static.oschina.net/uploads/space/2023/0927/164637_a7IE_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><strong>特点：</strong></p><ul><li>高亮显示、备注、搜索和共享</li><li>全键盘导航</li><li>在长文章中自动保存你的位置</li><li>通过电子邮件添加通讯文章（支持 substack）</li><li>支持 PDF</li><li>用 Node.js 和 TypeScript 编写的网络应用程序</li><li>Native iOS app</li><li>Android app (source)</li><li>面向 Android 用户的渐进式网络应用程序</li><li>适用于 Chrome、Safari、Firefox 和 Edge 的浏览器扩展</li><li>Labels (又称 tagging)</li><li>离线支持</li><li>文本转语音（仅限 iOS）</li><li>通过<span>&nbsp;</span><a href="https://github.com/omnivore-app/logseq-omnivore">Logseq Plugin</a>&nbsp;支持&nbsp;<a href="https://logseq.com/">Logseq</a></li><li>通过 <a href="https://github.com/omnivore-app/obsidian-omnivore">Obsidian Plugin</a>&nbsp;支持 <a href="https://obsidian.md/">Obsidian</a></li></ul><p><img height="337" src="https://static.oschina.net/uploads/space/2023/0927/164600_K6T2_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 02:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/omnivore</guid>
            <link>https://www.oschina.net/p/omnivore</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 Vue 的大屏设计器 DataRoom]]>
            </title>
            <description>
                <![CDATA[<div align="center"><h1><a id="user-content-dataroom" class="anchor" href="https://gitee.com/gcpaas/DataRoom#dataroom"></a>DataRoom</h1><strong>简单、免费、开源的大屏设计器</strong></div><p align="center"><img alt="stars" src="https://gitee.com/gcpaas/DataRoom/badge/star.svg?theme=dark" referrerpolicy="no-referrer"><img alt="forks" src="https://gitee.com/gcpaas/DataRoom/badge/fork.svg?theme=dark" referrerpolicy="no-referrer"><img alt="GitHub license" src="https://img.shields.io/badge/license-Apache%20License%202.0-blue.svg" referrerpolicy="no-referrer"><img alt="Company" src="https://img.shields.io/badge/%E5%85%AC%E5%8F%B8-%E7%A7%91%E5%A4%A7%E5%9B%BD%E5%88%9B%E4%BA%91%E7%BD%91%E7%A7%91%E6%8A%80%E6%9C%89%E9%99%90%E5%85%AC%E5%8F%B8-blue.svg" referrerpolicy="no-referrer"><a href="https://gitee.com/link?target=http%3A%2F%2Fgcpaas.gccloud.com"><img src="https://img.shields.io/badge/%E9%A2%84%E8%A7%88-%E6%BC%94%E7%A4%BA%E7%8E%AF%E5%A2%83-yellow" alt="预览" referrerpolicy="no-referrer"></a></p>
🔥DataRoom 是一款基于 SpringBoot、MyBatisPlus、Vue、ElementUI、G2Plot、Echarts 等技术栈的大屏设计器，具备大屏设计、预览能力，支持 MySQL、Oracle、PostgreSQL、SQLServer、ElasticSearch、JSON、JS、HTTP、Groovy 等数据集接入，使用简单，完全免费，代码开源。<br><p><strong>最新版本</strong><img alt="npm" src="https://img.shields.io/npm/v/@gcpaas/data-room-ui" referrerpolicy="no-referrer"><img alt="Maven Central" src="https://img.shields.io/maven-central/v/com.gccloud/dataroom-core" referrerpolicy="no-referrer"></p><h2><a id="user-content-功能介绍" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D"></a>功能介绍</h2><h3><a id="user-content-1-大屏管理" class="anchor" href="https://gitee.com/gcpaas/DataRoom#1-%E5%A4%A7%E5%B1%8F%E7%AE%A1%E7%90%86"></a>1. 大屏管理</h3><p>支持大屏【新增】、【编辑】、【设计】、【预览】、【复制】、【删除】操作</p><br><img src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/%E5%A4%A7%E5%B1%8F%E7%AE%A1%E7%90%86.png" height="200" referrerpolicy="no-referrer"><h3><a id="user-content-2-设计器" class="anchor" href="https://gitee.com/gcpaas/DataRoom#2-%E8%AE%BE%E8%AE%A1%E5%99%A8"></a>2. 设计器</h3><p>采用拖拉拽可视化设计，支持 20+种图表组件、15 种边框组件、10 多种修饰组件</p><br><img src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/%E8%AE%BE%E8%AE%A1%E5%99%A8.png" height="200" referrerpolicy="no-referrer"><h3><a id="user-content-3-资源库" class="anchor" href="https://gitee.com/gcpaas/DataRoom#3-%E8%B5%84%E6%BA%90%E5%BA%93"></a>3. 资源库</h3><p>支持资源自定义上传、在大屏设计器中直接引用资源，如：3D 图片、边框图片、装饰条、背景图</p><br><img alt="logo" src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/%E8%B5%84%E6%BA%90%E5%BA%93.png" height="200" referrerpolicy="no-referrer"><h3><a id="user-content-4-数据源" class="anchor" href="https://gitee.com/gcpaas/DataRoom#4-%E6%95%B0%E6%8D%AE%E6%BA%90"></a>4. 数据源</h3><p>支持 MySQL、PostgreSQL、Oracle 、ClickHouse 数据库接入</p><br><img alt="logo" src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/%E6%95%B0%E6%8D%AE%E6%BA%90.png" height="200" referrerpolicy="no-referrer"><h3><a id="user-content-5-数据集" class="anchor" href="https://gitee.com/gcpaas/DataRoom#5-%E6%95%B0%E6%8D%AE%E9%9B%86"></a>5. 数据集</h3><p>支持原始数据集、自助数据集、存储过程数据集、JSON 数据集、脚本数据集、JS 脚本数据集、HTTP 数据集多种方式接入数据</p><br><img alt="logo" src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/%E6%95%B0%E6%8D%AE%E9%9B%86.png" height="200" referrerpolicy="no-referrer"><br><img alt="logo" src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/%E6%95%B0%E6%8D%AE%E9%9B%862.png" height="200" referrerpolicy="no-referrer"><h2><a id="user-content-优势" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E4%BC%98%E5%8A%BF"></a>优势</h2><p>✅ 一站式大屏解决方案，从<span><strong>数据源接入</strong></span>-&gt;<span><strong>数据清洗处理</strong></span>-&gt;<span><strong>大屏设计</strong></span>-&gt;<span><strong>大屏预览</strong></span>-&gt;<span><strong>大屏发布上线</strong></span><br>
✅ 支持<span><strong>多种数据集接入</strong></span>，如：原始数据集、自助数据集 (支持多表关联)、存储过程、JSON(静态数据)、JS 脚本、Groovy 脚本、ElasticSearch、HTTP 接口，满足大多数数据接入需求<br>
✅ 支持大屏🔥<span><strong>独立部署</strong></span>，不对原有工程产生影响，适用于老项目<br>
✅ 支持大屏🔥<span><strong>嵌入式集成</strong></span>，引入依赖包即可，与项目无缝融合，无其他系统框架依赖，减少运维成本，适用于新项目<br>
✅ 支持🔥<span><strong>组件在线、离线开发</strong></span>，在线开发业务组件、离线开发系统组件，轻松解决图表不满足需求问题<br>
✅ 支持自定义接口权限、数据权限，轻松对接🔥<span><strong>Shiro、Security</strong></span>等认证框架，保证大屏数据安全<br></p><br><h2><a id="user-content-特性" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E7%89%B9%E6%80%A7"></a>特性</h2><table><thead><tr><th>特性</th><th align="left"></th></tr></thead><tbody><tr><td>支持大屏、设计、预览、导出图片</td><td align="left">✅</td></tr><tr><td>支持图层上下调整，支持置于顶层、置于底层</td><td align="left">✅</td></tr><tr><td>支持画布组件任意框选、组合、取消组合、锁定、批量删除、复制功能</td><td align="left">✅</td></tr><tr><td>支持多组件框选后对齐，如：左对齐、右对齐、上对齐、下对齐、中部对齐、水平均分、垂直均分</td><td align="left">✅</td></tr><tr><td>支持文本、超链接、时间选择器、输入框、按钮、Tab 标签、图片、轮播表、播放器、排名表、翻牌器、基础表格、倒计时、系统时间、外链集成、主题切换基础组件</td><td align="left">✅</td></tr><tr><td>支持折线图、柱状图、面积图、条形图、饼图、环图、水波图、仪表盘、进度条、词云图、雷达图、漏斗图、梯形图、中国地图、飞线图等图表组件</td><td align="left">✅</td></tr><tr><td>支持组件库，包含系统组件、业务组件、自定义组件，在线编辑器二次开发业务或自定义图表组件</td><td align="left">✅</td></tr><tr><td>支持图表数据定时刷新能力</td><td align="left">✅</td></tr><tr><td>支持 15 种边框组件，具备动画、渐变色设置</td><td align="left">✅</td></tr><tr><td>支持 10 多种修饰组件，具备动画、渐变色设置</td><td align="left">✅</td></tr><tr><td>支持资源库，包含 LOGO、3D 图标、2D 图标、修饰条、背景图等上百个大屏设计资源，资源支持自定义上传</td><td align="left">✅</td></tr><tr><td>支持多种数据源，目前支持 MySQL、PostgreSQL、Oracle、ClickHouse 数据库</td><td align="left">✅</td></tr><tr><td>支持多种数据集，目前支持原始数据集、自助数据集 (支持多表关联)、存储过程数据集、JSON 数据集 (静态数据)、JS 数据集、Groovy 脚本数据集、ElasticSearch 数据集、HTTP 数据集，接入不同数据来源</td><td align="left">✅</td></tr><tr><td>支持自定义接口权限、数据权限，可对接项目已有权限管理完成对大屏的安全管控</td><td align="left">✅</td></tr><tr><td>支持老项目外链集成、新项目依赖包集成</td><td align="left">✅</td></tr></tbody></table><br><h2><a id="user-content-快速开始" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"></a>快速开始</h2><p>1️⃣ 如果你想源码启动体验，<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.yuque.com%2Fchuinixiongkou%2Fbigscreen%2Fofy1bqhqgua1fu0f">请点击这里</a></p><p>2️⃣ 如果你想使用 Docker 启动体验 ，<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.yuque.com%2Fchuinixiongkou%2Fbigscreen%2Fahhq3i7zxea46ox2">请点击这里</a></p><p>3️⃣ 如果你想将大屏集成到项目中，<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.yuque.com%2Fchuinixiongkou%2Fbigscreen%2Fofy1bqhqgua1fu0f">请点击这里</a></p><p>4️⃣ 如果你想设计一个大屏，<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.yuque.com%2Fchuinixiongkou%2Fbigscreen%2Fofy1bqhqgua1fu0f">请点击这里</a></p><p>5️⃣ 如果你想独立部署大屏，<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.yuque.com%2Fchuinixiongkou%2Fbigscreen%2Fxd78cw7t12q7kfbl%23gGrS2">请点击这里</a></p><br><h2><a id="user-content-演示环境" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E6%BC%94%E7%A4%BA%E7%8E%AF%E5%A2%83"></a>演示环境</h2><p>演示环境会不定时进行更新  <a href="https://gitee.com/link?target=http%3A%2F%2Fgcpaas.gccloud.com%2FbigScreen" target="_blank">点击立即体验</a><span><strong>（请不要在演示环境中放入生产数据）</strong></span></p><br><h2><a id="user-content-常见问题" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"></a>常见问题</h2><p>⚠️&nbsp;&nbsp;<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.yuque.com%2Fchuinixiongkou%2Fbigscreen%2Findex">使用手册、二次开发、部署手册、常见问题</a><br>
⚠️&nbsp;&nbsp;<a href="https://gitee.com/gcpaas/DataRoom">(码云仓库</a><br>
⚠️&nbsp;&nbsp;<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgcpaas%2FDataRoom">GitHub 仓库</a><br></p><h2><a id="user-content-生态插件" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E7%94%9F%E6%80%81%E6%8F%92%E4%BB%B6"></a>生态插件</h2><table><thead><tr><th>组件</th><th>地址</th></tr></thead><tbody><tr><td>大屏设计器</td><td><a href="https://gitee.com/gcpaas/DataRoom">码云</a>、<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgcpaas%2FDataRoom">GitHub</a></td></tr><tr><td>仪表盘设计器</td><td><a href="https://gitee.com/gcpaas/DashBoard">码云</a>、<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgcpaas%2FDashBoard">GitHub</a></td></tr><tr><td>数据集</td><td><a href="https://gitee.com/gcpaas/dataset">码云</a>、<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgcpaas%2Fdataset">GitHub</a></td></tr></tbody></table><br><h2><a id="user-content-联系我们" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>联系我们</h2><p><img alt="logo" width="200" src="https://gitee.com/gcpaas/DataRoom/raw/master/doc/images/qq.png" referrerpolicy="no-referrer"></p><h2><a id="user-content-许可证" class="anchor" href="https://gitee.com/gcpaas/DataRoom#%E8%AE%B8%E5%8F%AF%E8%AF%81"></a>许可证</h2><p>Apache License 2.0</p>]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/gcpaas/DataRoom</guid>
            <link>https://gitee.com/gcpaas/DataRoom</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 揭秘编码器与解码器语言模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       defaultNoSetting
            " id="js_content"><section style="margin-left: 8px;margin-right: 8px;"><img class="rich_pages wxw-img" data-backh="461" data-backw="578" data-ratio="0.7972222222222223" src="https://oscimg.oschina.net/oscnet/7052e54b-97a3-4169-b237-d3d5dccd698d.png" data-w="1080" style="letter-spacing: 0.578px;text-wrap: wrap;width: 100%;height: auto;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;text-wrap: wrap;"><section style="outline: 0px;background-color: rgb(25, 25, 25);visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-style="max-width: 100%; background-color: rgb(255, 255, 255); letter-spacing: 0.544px; font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important; color: rgb(163, 163, 163) !important;" class="js_darkmode__0" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;background-color: rgb(255, 255, 255);visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section style="margin-right: 8px;margin-left: 8px;outline: 0px;visibility: visible;line-height: 1.75em;"><section data-darkmode-bgcolor-16221004879619="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16221004879619="rgb(168, 168, 168)" data-darkmode-original-color-16221004879619="#fff|rgb(62, 62, 62)" data-style="padding: 10px; max-width: 100%; background-color: rgb(239, 239, 239); color: rgb(62, 62, 62); line-height: 25.6px; display: inline-block; width: 670px; border-width: 2px; border-style: dashed; border-color: transparent; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;" class="js_darkmode__1" data-darkmode-bgcolor-16339314364542="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16339314364542="rgb(168, 168, 168)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)|rgb(62, 62, 62)" style="padding: 10px;outline: 0px;background-color: rgb(239, 239, 239);line-height: 25.6px;display: inline-block;width: 670px;border-width: 2px;border-style: dashed;border-color: transparent;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16221004879619="rgb(168, 168, 168)" data-darkmode-original-color-16221004879619="#fff|rgb(62, 62, 62)" data-darkmode-bgcolor-16339314364542="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16339314364542="rgb(168, 168, 168)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)|rgb(62, 62, 62)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16221004879619="rgb(168, 168, 168)" data-darkmode-original-color-16221004879619="#fff|rgb(62, 62, 62)" data-darkmode-bgcolor-16339314364542="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16339314364542="rgb(168, 168, 168)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)|rgb(62, 62, 62)" style="outline: 0px;visibility: visible;"><p style="letter-spacing: 0.578px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;"><span style="font-size: 16px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(239, 239, 239);">Transformer 架构的问世</span><span style="font-size: 16px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(239, 239, 239);">标志着现代语言大模型时代的开启。</span><span style="font-size: 16px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(239, 239, 239);">自 2018 年以来，<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491825%26idx%3D1%26sn%3D6b7494f1a24520f5e76fbca4b739e199%26chksm%3Dfe426ec7c935e7d10925628ee95207e9cd7e4c61b36c176d1e1dbb89bc1c79f1729dde095301%26scene%3D21%23wechat_redirect" textvalue="各类语言大模型层出不穷" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2"><strong>各类语言大模型层出不穷</strong></a>。</span></span></p><p style="letter-spacing: 0.578px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;"><br></span></p><p style="letter-spacing: 0.578px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;">通过 LLM 进化树（<span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;color: rgb(136, 136, 136);"><em><span style="font-size: 16px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(239, 239, 239);">github.com/Mooler0410/LLMsPracticalGuide</span></em></span>）来看<span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-wrap: wrap;background-color: rgb(239, 239, 239);font-size: 16px;letter-spacing: 1px;">，这些语言模型主要分为三类：一是「仅编码器」，该类语言模型擅长文本理解，因为它们允许信息在文本的两个方向上流动；二是「仅解码器」，该类语言模型擅长文本生成，因为信息只能从文本的左侧向右侧流动，并以自回归方式有效生成新词汇；三「编码器-解码器」组，该类语言模型对上述两种模型进行了结合，用于完成需要理解输入并生成输出的任务，例如翻译。</span></span></p><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;"></span><p><br></p><p style="letter-spacing: 0.578px;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;">本文作者 Sebastian Raschka 对这三类语言模型的工作原理进行了详细解读。他是人工智能平台 Lightning AI 的 LLM 研究员，也是《<span style="font-size: 16px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(239, 239, 239);">Machine Learning Q an</span><span style="font-size: 16px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(239, 239, 239);">d AI》的作者。</span></span></p><p style="letter-spacing: 0.578px;"><span style="letter-spacing: 0.578px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);"><br></span></p><p style="letter-spacing: 0.578px;text-align: left;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: justify;font-size: 16px;letter-spacing: 1px;"><span style="text-align: left;">（以下内容由 OneFlow 编译发布，转载请联系授权。</span></span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;">原文</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 1px;">：https://magazine.sebastianraschka.com/p/understanding-encoder-and-decoder)</span><span style="font-size: 16px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></span></p></section></section></section></section></section></section></section></section></section></section></section></section></section></section><p><br></p><p ql-global-para="true" line="7sj5" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(63, 63, 63);"><strong style="outline: 0px;"><span style="outline: 0px;font-size: 16px;letter-spacing: 2px;">来源 | Ahead of AI</span></strong></span></p><p ql-global-para="true" line="Zq0W" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(63, 63, 63);"><strong style="outline: 0px;"><span style="outline: 0px;font-size: 16px;letter-spacing: 2px;">OneFlow 编译</span></strong></span></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(63, 63, 63);"><strong style="outline: 0px;"><span style="outline: 0px;font-size: 16px;letter-spacing: 2px;">翻译｜杨婷、宛子琳</span></strong></span></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;">有人希望我能深入介绍一下语言大模型（LLM）的相关术语，并解释我们现在认为理所当然的一些技术性更强的术语，包括「编码器式」和「解码器式」LLM 等。这些术语是什么意思？</span></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;"><br></span></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;">编码器和解码器架构基本上都使用了相同的自注意力层对单词词元（token）进行编码，然而，不同的是：编码器被设计为学习可以用于各种预测建模任务（如分类）的嵌入；解码器被设计用于生成新的文本，例如回答用户的查询等。</span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><br></p><span id="OSC_h2_1"></span><h2 style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">1</span></strong></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><span style="font-size: 17px;color: rgb(30, 35, 128);"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;">原始 Transformer</span></strong></span></p></h2><p ql-global-para="true" line="gFkG" ql-global="true" style="line-height: 100%;margin-bottom: 0pt;margin-top: 0pt;font-size: 11pt;color: #494949;">&nbsp;</p><p ql-global-para="true" line="V6BC" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">原始 Transformer 架构（"Attention Is All You Need"，2017 年）是为英法和英德语言翻译而开发的，它同时使用了编码器和解码器，如下图所示。</span></p><p ql-global-para="true" line="V6BC" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><section style="line-height: 100%;margin: 0pt 8px;font-size: 11pt;color: rgb(73, 73, 73);"><img class="rich_pages wxw-img" data-backh="594" data-backw="578" data-ratio="1.026851851851852" src="https://oscimg.oschina.net/oscnet/30371c43-cd3c-460e-89a2-b8950862e798.png" data-type="png" data-w="1080" height="auto" style="width: 100%;height: auto;" width="1422" referrerpolicy="no-referrer"></section><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><section style="margin-bottom: 0px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;margin-left: 8px;margin-right: 8px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">上图中，输入文本（即要翻译的句子）首先被分词为单独的单词词元，然后通过嵌入层对这些词元进行编码，完成后进入编码器部分。接下来，在每个嵌入的单词上添加位置编码向量，之后，这些嵌入会通过多头自注意力层。多头注意力层之后会进行残差与层归一化（Add &amp; normalize），它进行了一层标准化操作，并通过跳跃连接（skip connection，也称为残差连接或快捷连接）添加原始嵌入。最后，进入「全连接层」（它是由两个全连接层（全连接层之间有一个非线性激活函数）组成的小型多层感知器）之后，输出会被再次"<span style="font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 2px;text-wrap: wrap;background-color: rgb(255, 255, 255);">残差与层归一化</span>"，然后再将输出传递到解码器模块的多头自注意力层。</span></section><section style="margin-bottom: 0px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;margin-left: 8px;margin-right: 8px;"><span style="font-size: 16px;letter-spacing: 2px;"><br></span></section><section style="margin-bottom: 0px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;margin-left: 8px;margin-right: 8px;"><span style="font-size: 16px;letter-spacing: 2px;">上图的解码器部分与编码器部分的整体结构十分相似，关键区别是它们的输入和输出内容。编码器要接收进行翻译的输入文本，而解码器则负责生成翻译后的文本。</span></section><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><br></p><span id="OSC_h2_2"></span><h2 style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">2</span></strong></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><span style="color: rgb(30, 35, 128);font-size: 17px;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;">编码器</span></strong></span></p></h2><p ql-global-para="true" line="wHxM" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;letter-spacing: 2px;color: rgb(30, 35, 128);font-size: 17px;">&nbsp;</span></p><p ql-global-para="true" line="Ih2s" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: justify;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">上图展示的原始 Transformer 架构中的编码器部分负责理解和提取输入文本中的相关信息，它输出的是输入文本的一个连续表示（嵌入），然后将其传递给解码器。最终，解码器根据从编码器接收到的连续表示生成翻译后的文本（目标语言）。</span></p><p ql-global-para="true" line="EiXb" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: justify;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">&nbsp;</span></p><p ql-global-para="true" line="WF2B" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: justify;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">多年来，基于原始 Transformer 模型中的编码器模块开发了多种仅编码器架构。其中两个最具代表性的例子是 BERT（ </span><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">用于语言理解的深度双向 Transformer 预训练 2018</span><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">）和 RoBERTa（</span><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">鲁棒优化的 BERT 预训练方法，2018</span><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">）。</span></p><p ql-global-para="true" line="7kNX" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: justify;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">&nbsp;</span></p><p ql-global-para="true" line="dTUz" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: left;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">BERT（Bidirectional Encoder Representations from Transformers）是一种基于 Transformer 编码器模块的仅编码器架构，它使用掩码语言建模（如下图所示）和下一个句子预测任务，在大型文本语料库上进行预训练。</span></p><p ql-global-para="true" line="dTUz" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: center;"><br></p><section style="line-height: 100%;margin: 0pt 8px;font-size: 11pt;color: rgb(73, 73, 73);text-align: center;"><img class="rich_pages wxw-img" data-backh="340" data-backw="562" data-ratio="0.6046296296296296" src="https://oscimg.oschina.net/oscnet/9181fed3-ebd9-4431-910a-6876353bfdd0.png" data-type="png" data-w="1080" height="auto" style="width: 100%;height: auto;" width="1456" referrerpolicy="no-referrer"><em><span style="font-size: 12px;text-align: center;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;color: rgb(136, 136, 136);">BERT 式 Transformer 中使用的掩码语言建模预训练目标图示。</span></em></section><p ql-global-para="true" line="KqmY" style="line-height: 100%;margin-bottom: 0pt;margin-top: 0pt;font-size: 11pt;color: rgb(73, 73, 73);text-align: center;"><br></p><p ql-global-para="true" line="KqmY" style="line-height: 100%;margin-bottom: 0pt;margin-top: 0pt;font-size: 11pt;color: #494949;"><br></p><p ql-global-para="true" line="v1Tx" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">掩码语言建模的主要思路是在输入序列中随机掩码（或替换）一些单词词元，并训练模型根据上下文来预测原始的掩码词元。</span></p><p ql-global-para="true" line="bVfy" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="WFlZ" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">除上图所示的掩码语言建模预训练任务之外，下一个句子预测任务要求模型去预测两个随机排列的句子在原始文档中的语句顺序是否正确。例如，两个用[SEP]标记分隔开的随机句子：</span></p><p ql-global-para="true" line="WFlZ" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;"></span><br></p><ul class="list-paddingleft-1" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><li style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;letter-spacing: 2px;">[CLS] Toast is a simple yet delicious food [SEP] It’s often served with butter, jam, or honey.</span></p></li><li style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;letter-spacing: 2px;">[CLS] It’s often served with butter, jam, or honey. [SEP] Toast is a simple yet delicious food.</span></p></li></ul><p ql-global-para="true" line="XE3v" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="YIyR" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">其中，[CLS]词元是模型的占位符，提示模型返回一个 True 或 False 标签，用来表示句子顺序是否正确。</span></p><p ql-global-para="true" line="32qe" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="G4mq" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">掩码语言和下一个句子预训练目标使得 BERT 可以大量学习输入文本的上下文表示，然后可以针对各种下游任务（如情感分析、问答和命名实体识别）对这些表示进行微调。</span></p><p ql-global-para="true" line="53Rw" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="qq5c" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">RoBERTa（Robustly optimized BERT approach）是 BERT 的优化版本。它与 BERT 保持了相同的整体架构，但进行了一些训练和优化改进，例如更大的 batch 尺寸，更多的训练数据，并去除了下一个句子预测任务。这些改进使得 RoBERTa 拥有更好的性能，相比 BERT，RoBERTa 能更好地处理各种自然语言理解任务。</span></p><p ql-global-para="true" line="KqmY" style="line-height: 100%;margin-bottom: 0pt;margin-top: 0pt;font-size: 11pt;color: #494949;"><br></p><span id="OSC_h2_3"></span><h2 style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong inline-dir="ltr" ql-global="true" style="font-size: 12pt;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">3</span></strong></strong></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><span style="font-size: 17px;"><strong inline-dir="ltr" ql-global="true" style="font-size: 12pt;"><span style="font-size: 17px;color: rgb(30, 35, 128);"><strong style="outline: 0px;"><span style="font-size: 17px;outline: 0px;letter-spacing: 2px;">解码器</span></strong></span></strong></span></p></h2><p ql-global-para="true" line="ssPl" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><strong inline-dir="ltr" ql-global="true" style="font-size: 12pt;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></strong></p><p ql-global-para="true" line="ggKv" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;letter-spacing: 2px;font-size: 16px;">回到本节开头的原始 Transformer 架构，解码器中的多头自注意机制与编码器中的类似，但经过掩码处理，以防模型关注到未来位置，确保对位置 i 的预测仅基于已知的小于 i 的输出位置。下图为解码器逐词生成输出的过程。</span></p><p ql-global-para="true" line="ggKv" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"></span><br></p><section style="line-height: 100%;margin: 0pt 8px;font-size: 11pt;color: rgb(73, 73, 73);"><img class="rich_pages wxw-img" data-backh="508" data-backw="578" data-ratio="0.8796296296296297" src="https://oscimg.oschina.net/oscnet/4cb53146-0bdd-4ab8-b165-bf38c2119643.png" data-type="png" data-w="1080" height="auto" style="width: 100%;height: auto;" width="1162" referrerpolicy="no-referrer"></section><p ql-global-para="true" line="ByIX" style="text-align:center;line-height: 100%;margin-bottom: 0pt;margin-top: 0pt;font-size: 11pt;color: #494949;"><span style="color: rgb(136, 136, 136);"><em><span style="font-size: 12px;">原始 Transformer 中的下一个句子预测任务示意图。</span></em></span><strong inline-dir="ltr" ql-global="true" style="text-align: justify;letter-spacing: 0.034em;font-size: 12pt;"></strong></p><p ql-global-para="true" line="LD42" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><strong inline-dir="ltr" ql-global="true" style="font-size: 12pt;"><br></strong></p><p ql-global-para="true" line="LD42" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">这种掩码操作（在上图中可明确看到，但实际上在解码器的多头自注意机制内部发生）对于在训练和推理过程中保持 Transformer 模型的自回归特性至关重要。自回归特性能确保模型逐个生成输出词元，并使用先前生成的词元作为上下文，以生成下一个词元。</span></p><p ql-global-para="true" line="6Phy" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="VuCc" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">多年来，研究人员在原始编码器-解码器 Transformer 架构的基础上进行扩展，开发出了几种仅解码器模型，这些模型能高效处理各种自然语言任务，其中最著名的是 GPT（Generative Pre-trained Transformer）系列模型。</span></p><p ql-global-para="true" line="KShm" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="mTt2" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">GPT 系列模型为仅解码器模型，它们在大规模无监督文本数据上进行预训练，然后针对特定任务进行微调，如文本分类、情感分析、问答和摘要生成等。GPT 模型包括 GPT-2、GPT-3（GPT-3 于 2020 年发布，具备少样本学习能力）以及最新的 GPT-4，这些模型在各种基准测试中展现出了卓越性能，是目前最受欢迎的自然语言处理架构。</span></p><p ql-global-para="true" line="mTt2" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgba(0, 0, 0, 0.9);"><br></span></p><p ql-global-para="true" line="mTt2" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgba(0, 0, 0, 0.9);">GPT 模型最引人注目的特性之一是涌现特性。涌现特性指的是模型在下一个词预测的预训练中发展出来的能力和技能。尽管这些模型只是被训练预测下一个词，但预训练后的模型却能够执行各种任务，如文本摘要生成、翻译、问答和分类等。此外，这些模型可通过上下文学习来完成新任务，而无需更新模型参数。</span></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><br></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong inline-dir="ltr" ql-global="true" style="font-size: 12pt;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">4</span></strong></strong></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong inline-dir="ltr" ql-global="true" style="font-size: 12pt;"><span style="font-size: 17px;color: rgb(30, 35, 128);"><strong style="outline: 0px;"><span style="font-size: 17px;outline: 0px;letter-spacing: 2px;">编码器-解码器混合模型</span></strong></span></strong></p><p ql-global-para="true" line="KqmY" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><br></p><ul class="list-paddingleft-1" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><li style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: left;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">BART (</span><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">Denoising Sequence-to-Sequence Pre-training for Natural Language Generation, Translation, and Comprehension, 2019</span><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">)</span></p></li><li style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;text-align: left;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">and T5 (</span><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">Exploring the Limits of Transfer Learning with a Unified Text-to-Text Transformer, 2019</span><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">).</span></p></li></ul><p ql-global-para="true" line="9kOd" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="o411" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">除传统的编码器和解码器架构之外，新型编码器-解码器模型的发展取得了重大突破，充分发挥了编码器和解码器模型的优势。这些模型融合了新颖技术、预训练目标或架构修改，以提高在各种自然语言处理任务中的性能表现。下面是一些值得关注的新型编码器-解码器模型：</span></p><p ql-global-para="true" line="brLj" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><ul class="list-paddingleft-1" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><li style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">BART（用于自然语言生成、翻译和理解的去噪序列到序列预训练模型，2019 年发布）</span></p></li></ul><p ql-global-para="true" line="uBa7" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><ul class="list-paddingleft-1" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><li style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">T5（通过统一的文本到文本 Transformer 来探索迁移学习的极限，2019 年发布）。</span></p></li></ul><p ql-global-para="true" line="3BS0" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="1jaN" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">编码器-解码器模型通常用于自然语言处理，这些任务涉及理解输入序列并生成相应的输出序列。这些序列往往具有不同的长度和结构。这种模型在需要复杂映射以及捕捉输入序列和输出序列之间的元素关系的任务中表现出色。编码器-解码器模型常用于文本翻译和摘要生成等任务。</span></p><p ql-global-para="true" line="1jaN" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><span id="OSC_h2_4"></span><h2 style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">5</span></strong></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><span style="color: rgb(30, 35, 128);font-size: 17px;"><strong style="outline: 0px;"><span style="font-size: 17px;color: rgb(30, 35, 128);outline: 0px;letter-spacing: 2px;">术语和行话</span></strong></span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><br><strong style="letter-spacing: 0.544px;font-size: var(--articleFontsize);outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);"></span></strong></p></h2><p ql-global-para="true" line="xTxg" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">这些模型（包括仅编码器、仅解码器和编码器-解码器模型）都属于序列到序列模型（通常简称为「seq2seq」）。值得注意的是，虽然我们将 BERT 模型称为仅编码器模型，但「仅编码器」这个描述可能会引起误解，因为这些模型在预训练期间也会将嵌入解码为输出的词元或文本。</span></p><p ql-global-para="true" line="ffbc" ql-global="true" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">&nbsp;</span></p><p ql-global-para="true" line="olef" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">换句话说，仅编码器和仅解码器架构都在进行「解码」。然而，与仅解码器和编码器-解码器架构不同，仅编码器架构不是以自回归的方式进行解码。自回归解码是指逐个词元地生成输出序列，其中每个词元都基于先前生成的词元。相比之下，仅编码器模型不会以这种方式生成连贯的输出序列。相反，它们专注于理解输入文本并生成特定任务的输出，如标签预测或词元预测。</span></p><p ql-global-para="true" line="olef" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><span id="OSC_h2_5"></span><h2 style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">6</span></strong></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);text-align: center;line-height: 1.6em;"><span style="color: rgb(30, 35, 128);font-size: 17px;"><strong style="outline: 0px;"><span style="font-size: 17px;color: rgb(30, 35, 128);outline: 0px;letter-spacing: 2px;">结论</span></strong></span></p></h2><p ql-global-para="true" line="oXY9" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;"><br></span></p><p ql-global-para="true" line="oXY9" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">简而言之，编码器模型在学习用于分类任务的嵌入表示方面非常受欢迎，编码器-解码器模型用于生成任务，这些任务依赖输入，以生成输出（例如翻译和摘要生成），而仅解码器模型则用于其他类型的生成任务，包括问答。</span></p><p ql-global-para="true" line="oXY9" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;"><br></span></p><p ql-global-para="true" line="oXY9" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">自首个 Transformer 架构问世以来，已经开发出数百种编码器、解码器和编码器-解码器混合模型，模型概览如下图所示：</span></p><p ql-global-para="true" line="oXY9" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><section style="line-height: 100%;margin: 0pt 8px;font-size: 11pt;color: rgb(73, 73, 73);text-align: center;"><img class="rich_pages wxw-img" data-backh="780" data-backw="578" data-ratio="1.349074074074074" src="https://oscimg.oschina.net/oscnet/b7af6163-1ad1-4fe1-bee9-5e7645230015.png" data-type="png" data-w="1080" height="auto" style="width: 100%;height: auto;" width="1456" referrerpolicy="no-referrer"><span style="color: rgb(136, 136, 136);"><em><span style="color: rgb(136, 136, 136);text-align: center;font-size: 12px;">按架构类型和开发者分类的部分最受欢迎的大型语言 Transformer。</span></em></span></section><p ql-global-para="true" line="PDtt" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><p ql-global-para="true" line="ddC0" style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="font-size: 16px;outline: 0px;letter-spacing: 2px;">尽管仅编码器模型逐渐失去了关注度，但 GPT-3、ChatGPT 和 GPT-4 等仅解码器模型在文本生成方面取得了重大突破，并开始广泛流行。然而，仅编码器模型在基于文本嵌入进行预测模型训练方面仍然非常有用，相较于生成文本，它具备独特优势。</span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);line-height: 1.6em;"><br></p><section style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;background-color: rgb(255, 255, 255);caret-color: rgba(0, 0, 0, 0.9);text-size-adjust: inherit;line-height: 1.75em;text-align: left;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 14px;letter-spacing: 1px;">其他人都在看</span></section><span id="OSC_h3_6"></span><h3 style="letter-spacing: 0.578px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);"><ul class="list-paddingleft-1" style="width: 577.422px;outline: 0px;"><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491825%26idx%3D1%26sn%3D6b7494f1a24520f5e76fbca4b739e199%26chksm%3Dfe426ec7c935e7d10925628ee95207e9cd7e4c61b36c176d1e1dbb89bc1c79f1729dde095301%26scene%3D21%23wechat_redirect" textvalue="语言大模型的进化轨迹" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">语言大模型的进化轨迹</a><br style="outline: 0px;"></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491908%26idx%3D1%26sn%3D208a592f66f2cb2f412f9b58bca87401%26chksm%3Dfe426f72c935e6641a14837bb0a600bcbf28b9b2d427ca01477b492cfff2116aafedfd66c900%26scene%3D21%23wechat_redirect" textvalue="通俗解构语言大模型的工作原理" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="color: var(--weui-LINK);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 1px;text-wrap: wrap;background-color: rgb(255, 255, 255);outline: 0px;cursor: pointer;">通俗解构语言大模型的工作原理</a><br></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247492001%26idx%3D1%26sn%3D8ee2ef77916c2992f570c294adc1ec19%26chksm%3Dfe426f97c935e6819fbd0cad4ca972da01c1ba40baef933db2a3eadfaed12a7605444ad86132%26scene%3D21%23wechat_redirect" textvalue="PyTorch 创始人：开源成功的方法论" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">PyTorch 创始人：开源成功的方法论</a><br style="outline: 0px;"></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491721%26idx%3D1%26sn%3D71fd215ca3625f276913db5f62d6791e%26chksm%3Dfe426ebfc935e7a96d0437566485a5774b6e3063ba4c768093eaffc25f054730e0f7f836be3f%26scene%3D21%23wechat_redirect" textvalue="GPT 总设计师：大型语言模型的未来" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="color: var(--weui-LINK);outline: 0px;cursor: pointer;"></a><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491882%26idx%3D1%26sn%3D7fabac6b07025d2e4e3a5db652bdab69%26chksm%3Dfe426f1cc935e60a8e203870b2ad09e2f2c9c0a48d1b6b9f826f70270875672d26e3775bf272%26scene%3D21%23wechat_redirect" textvalue="大模型的无限上下文与数据集组合艺术" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="color: var(--weui-LINK);outline: 0px;cursor: pointer;">大模型的无限上下文与数据集组合艺术</a></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491926%26idx%3D1%26sn%3Da442e6e93d8fb60106c952a96f37883f%26chksm%3Dfe426f60c935e676e569842cee9e4c60b82471e41dcbb9e6c126d79d3d383ba5e37a8e6b3113%26scene%3D21%23wechat_redirect" textvalue="GPT-4.5 前瞻：代码解释器，编程新纪元" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="color: var(--weui-LINK);outline: 0px;cursor: pointer;">GPT-4.5 前瞻：代码解释器，编程新纪元</a></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491988%26idx%3D1%26sn%3Dc5fcc5f3fa27bb00bf8ef9af05e7ca89%26chksm%3Dfe426fa2c935e6b4ebb279bf19471f39629ccfb6733e6d8a580fdcbb01e80bd59266f3830bac%26scene%3D21%23wechat_redirect" textvalue="OpenAI 首席科学家：通向无监督学习之路" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">OpenAI 首席科学家：通向无监督学习之路</a><br style="outline: 0px;"></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><section style="outline: 0px;line-height: 1.75em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491935%26idx%3D1%26sn%3D9535636ca06c16345b432a9de5383f1e%26chksm%3Dfe426f69c935e67f717ca8a968b9dd2a3f69b45f330b561b3584ba1b196149c8ba00d3d452eb%26scene%3D21%23wechat_redirect" textvalue="OpenAI 超级对齐负责人：「驾驭」超级智能的四年计划" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="color: var(--weui-LINK);outline: 0px;cursor: pointer;">OpenAI 对齐负责人：「驾驭」超级智能四年计划</a><br style="outline: 0px;"></section></li></ul><section style="outline: 0px;line-height: 1.75em;text-align: left;"><span style="outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;font-size: 14px;color: rgb(63, 63, 63);">试用 OneFlow: github.com/Oneflow-Inc/oneflow/</span></section></h3><h2 style="margin-right: 8px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);"><hr style="outline: 0px;border-style: solid;border-right-width: 0px;border-bottom-width: 0px;border-left-width: 0px;border-color: rgba(0, 0, 0, 0.1);transform-origin: 0px 0px;transform: scale(1, 0.5);"></h2><p style="margin-bottom: 0px;letter-spacing: 0.578px;white-space: normal;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;background-color: rgb(255, 255, 255);"><img class="rich_pages wxw-img" data-backh="162" data-backw="578" data-galleryid="" data-ratio="0.2802690582959641" data-s="300,640" src="https://oscimg.oschina.net/oscnet/37608b32-0850-4062-ad9e-62704a14d974.png" data-type="png" data-w="892" style="outline: 0px;letter-spacing: 0.578px;text-align: center;font-size: var(--articleFontsize);display: inline;width: 100%;visibility: visible !important;height: auto;" referrerpolicy="no-referrer"></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - OneFlow（OneFlowTechnology）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Sep 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oneflow/blog/10109514</guid>
            <link>https://my.oschina.net/oneflow/blog/10109514</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1-8 月我国软件业务收入 75178 亿元，同比增长 13.5%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333"><span style="color:#222222">工信部</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Frjy%2Fart%2F2023%2Fart_6971a3c0ea6c49c19e364c9597a79077.html" target="_blank">发布</a><span style="background-color:#ffffff; color:#222222">公告指出，</span>1－8 月份，我国软件和信息技术服务业（以下简称「软件业」）运行态势平稳，软件业务收入保持较快增长，利润总额保持两位数增长，软件业务出口小幅回落。</p><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong>一、总体运行情况</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>软件业务收入保持较快增长。</strong>1－8 月份，我国软件业务收入 75178 亿元，同比增长 13.5%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="247" src="https://oscimg.oschina.net/oscnet/up-f59dae23160a190f074b176bc35b4b355cc.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>利润总额保持两位数增长。</strong>1－8 月份，软件业利润总额 8628 亿元，同比增长 13.9%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="240" src="https://oscimg.oschina.net/oscnet/up-a5be7b7ce2f6094b7ce524cb85d2fbae3ae.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>软件业务出口小幅回落。</strong>1－8 月份，软件业务出口 319.3 亿美元，同比下降 4.5%，其中，软件外包服务出口同比增长 3.4%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="245" src="https://oscimg.oschina.net/oscnet/up-02c6fcf5f78b3c28e5a1d42f26fd56c8475.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:left">二、分领域运行情况</h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>软件产品收入保持两位数增长。</strong>1－8 月份，软件产品收入 17437 亿元，同比增长 10.8%，占全行业收入的比重为 23.2%。其中，工业软件产品收入 1704 亿元，同比增长 12.5%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>信息技术服务收入较快增长。</strong>1－8 月份，信息技术服务收入 50116 亿元，同比增长 14.8%，在全行业收入中占比为 66.7%。其中，云计算、大数据服务共实现收入 7532 亿元，同比增长 15.7%，占信息技术服务收入的比重为 15%；集成电路设计收入 1994 亿元，同比增长 5%；电子商务平台技术服务收入 6981 亿元，同比增长 9%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>信息安全收入稳步增长。</strong>1－8 月份，信息安全产品和服务收入 1211 亿元，同比增长 10%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>嵌入式系统软件收入平稳增长。</strong>1－8 月份，嵌入式系统软件收入 6413 亿元，同比增长 11.7%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="240" src="https://oscimg.oschina.net/oscnet/up-ca04e9482bac3cc3bfa58966553072bb78c.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong>三、分地区运行情况</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>东北、中、西部地区软件业务收入小幅回落，东部地区增势突出。</strong>1－8 月份，东部地区完成软件业务收入 62244 亿元，同比增长 14%，增速较 1－7 月份提高 0.1 个百分点；中部地区完成软件业务收入 3619 亿元，同比增长 13.1%，增速较 1－7 月份回落 1 个百分点；西部地区完成软件业务收入 7604 亿元，同比增长 10.1%，增速较 1－7 月份回落 0.1 个百分点；东北地区完成软件业务收入 1711 亿元，同比增长 13.3%，增速较 1－7 月份回落 1.1 个百分点。四个地区软件业务收入在全国总收入中的占比分别为 82.8%、4.8%、10.1% 和 2.3%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="411" src="https://oscimg.oschina.net/oscnet/up-014347b37905d0dfbf6bf0c75b012606161.png" width="853" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>主要软件大省收入占比持续提升。</strong>1－8 月份，软件业务收入居前 5 名的省份中,北京市、广东省、江苏省、山东省、上海市软件收入分别为 16277 亿元、13224 亿元、8820 亿元、7813 亿元和 6599 亿元，分别增长 18%、14%、8%、16.9% 和 19.2%，五省 (市) 合计软件业务收入 52733 亿元，占全国比重为 70.1%，占比较去年同期提高 1 个百分点。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="245" src="https://oscimg.oschina.net/oscnet/up-532e0fecf7e23b162e945c871453a347556.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>中心城市软件业务收入平稳增长。</strong>1－8 月份，全国 15 个副省级中心城市实现软件业务收入 36850 亿元，同比增长 10.8%，增速较 1－7 月份回落 0.3 个百分点，占全国软件业务收入比重为 49%，占比较去年同期回落 1.2 个百分点。其中，大连、济南、成都、深圳 、厦门和青岛软件业务收入增速超过全行业整体增速。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="252" src="https://oscimg.oschina.net/oscnet/up-8dd2fb16da3fed178ef346f447a3e12b3c6.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 09:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259757</guid>
            <link>https://www.oschina.net/news/259757</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「根本不需要 TypeScript，JS + JSDoc 够了」，大佬说我想多了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本月，Ruby on Rails 作者 DHH 宣布移除其团队开源项目 Turbo 8 中的 TypeScript 代码。</p><p><img height="768" src="https://oscimg.oschina.net/oscnet/up-58c4155f83bbd826f4bb0ec1ab8d1e32ccd.png" width="1080" referrerpolicy="no-referrer"></p><p>他认为，TypeScript 对他来说只是阻碍。不仅因为它需要显式的编译步骤，还因为它用类型编程污染了代码，很影响开发体验。</p><p>无独有偶，不久前，知名前端 UI 框架 Svelte 也<span style="color:#245bdb"><a href="https://www.oschina.net/news/240489/svelte-ts-to-jsdoc" rel="nofollow">宣布从 TypeScript 切换到 JavaScript</a></span>。负责 Svelte 编译器的开发者说，改用 JSDoc 后，代码不需要编译构建即可进行调试 —— 简化了编译器的开发工作。</p><p>Svelte 不是第一个放弃 TypeScript 的前端框架。早在 2020 年，Deno 就迁移了一部分内部 TypeScript 代码到 JavaScript，以减少构建时间。</p><p>Deno 团队给出的理由，总结一下就是：<strong>减少构建时间</strong>、<strong>降低发布的代码体积</strong>、<strong>减少编写的代码量</strong>。</p><p>加上今年短期内已经有两个项目从 TypeScript 切换到 JavaScript 了，这个状况就很令人迷惑。<strong>难道从</strong><strong> TypeScript 切回 JavaScript</strong><strong> 已经成了当下的新潮流？</strong>在推特和 GitHub 上，讨论也是纷纷扬扬。有人赞同，表示欣赏他们的勇气；有人反对，表示这是开历史倒车。网友觉得，编译速度慢，改进编译器就行了，因噎废食有点想不通。</p><p>所以，放弃 TypeScript 回归 JavaScript 是在追求舒适的 partner，还是在开历史的倒车？</p><p>对此，开源中国找来了 3 位使用过 TypeScript 和 JavaScript 的前端大佬，听听他们的看法。他们分别是：</p><ul><li><p><span style="color:#245bdb">刘勇，社区暱称天猪，某大厂 Node.js </span><span style="color:#245bdb">Infra</span><span style="color:#245bdb"> 负责人，EggJS / CNPM 核心开发者。</span></p></li><li><p><span style="color:#245bdb">刘易成，社区暱称 xcatliu（流浪小猫），《</span><span style="color:#245bdb">TypeScript</span><span style="color:#245bdb"> 入门教程》作者，来自腾讯文档团队。</span></p></li><li><p><span style="color:#245bdb">李振，社区暱称 tick，来自腾讯文档团队。</span></p></li></ul><p>&nbsp;</p><span id="OSC_h1_1"></span><h1>一、开历史倒车？谈不上</h1><p><span style="color:#245bdb"><strong>Q1：</strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong> 是基于 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 推出的新语言，理论上应该比 JavaScript 完善的，为什么大家还会倒回去用旧的 JavaScript 呢？这算不算开历史的倒车？</strong></span></p><p><strong>刘勇：</strong>不算倒车，这只是一个选择，在某些场景下，写 TypeScript 会带来一些额外成本。譬如我看过一些开源库的源码，核心逻辑可能就几十行，但为了实现准确的类型提示，写出来的类型体操反而远远多于核心源码，孰是孰非对于不同的开发者有不同的准绳，需要找到其中的平衡点。当然，就目前的情况，在力所能及的情况下，我个人推荐能用 TypeScript 就用 TypeScript ，但是否要玩类型体操则根据开发者自身情况来决策。</p><p><strong>刘易成：</strong>已经使用了 TypeScript 的项目改回使用 JavaScript 是很少见的，更多的项目是从 JavaScript 升级到 TypeScript。TypeScript 完善了 JavaScript 的类型系统，使得代码的可维护性更高了，但同时也增加了编译步骤和一些开发成本。对于一些项目而言，JavaScript 已经能够满足需求了，就没必要增加 TypeScript 类型系统的复杂性了，但是对于另一些复杂项目，更需要类型系统来帮助提高代码可维护性，所以这不算开历史的倒车，而是根据实际情况做技术选型。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q2：以上从 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong> 切回到 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 的项目，都是做开发框架的，所以这是不是跟项目类型有关呢？做框架的项目更有可能选择</strong></span><span style="color:#245bdb"><strong> JavaScript</strong></span><span style="color:#245bdb"><strong> 吗？</strong></span></p><p><strong>李振：</strong>是的，项目类型可以是影响选择 JavaScript 还是 TypeScript 的一个因素。在开发框架或库时，特别是前端框架或库，选择使用 JavaScript 的情况较为常见。</p><p>一方面，开发框架需要具备广泛的兼容性，以便开发者可以在各种项目中使用。由于 JavaScript 是 Web 开发的基础语言，几乎所有的浏览器和环境都支持 JavaScript。这使得使用 JavaScript 编写的框架更容易被广泛采用和集成。</p><p>另一方面，开发框架通常需要提供简单易用的 API 和灵活的扩展机制，以满足各种项目的需求。使用 JavaScript 可以更加直接地表达这些概念，而不需要过多的类型注解和编译步骤。这使得开发者可以更快地理解和使用框架，并且更容易进行自定义和扩展。</p><p><strong>刘勇：</strong>框架和类库的开发者，往往需要考虑到很多 edge case，在这种情况下，编写完善的类型是一件很费心力的事，代码量会多了不少，从而会导致维护成本的增加。其实现在社区还是在探索的阶段，需要找到一个平衡点，哪一些是需要完善的，哪一些是可以取舍的。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q3：基于</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 改进的语言却遭到了开发者的嫌弃，这能说是 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>设计的失败吗？</strong></span></p><p><strong>李振：</strong>这并不能被视为 TypeScript 设计的失败。每个项目和开发团队都有自己的需求和偏好。有些开发者可能认为 TypeScript 增加了额外的复杂性和学习曲线，或者觉得它在某些方面不符合他们的开发风格。这并不意味着 TypeScript 设计的失败，而是反映了不同开发者对工具和语言的不同看法和需求。</p><p>TypeScript 仍然在许多项目中被广泛使用，并且持续发展和改进。它提供了许多有价值的功能，如类型安全、代码智能感知和重构支持等，这些功能对于大型项目和团队协作非常有益。因此，无论是否有一些项目选择回到 JavaScript，TypeScript 仍然是一个受欢迎和成功的语言。</p><p><strong>刘易成：</strong>TypeScript 的成功无需质疑，已经有无数的项目证明了它的成功。开发者并没有「嫌弃」 TypeScript，只是认为并不是所有项目都适合使用 TypeScript。不管开发者用的是 JavaScript 还是 TypeScript ，都受益于 TypeScript 的 language service 太多了。TypeScript 已经是前端生态系统中最不可或缺的一环了。</p><p>&nbsp;</p><span id="OSC_h1_2"></span><h1>二、TypeScript 和 JavaScript 并不是简单地互为替身</h1><p><span style="color:#245bdb"><strong>Q4：有评论认为，</strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>编译速度慢，改进编译器就行了，转回</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 是因噎废食，你怎么看？</strong></span></p><p><strong>刘勇：</strong>需要提醒的是，目前社区一些转回 JavaScript 的都是框架和类库，这些作者的决策点并不是只因为 TypeScript 编译速度。</p><p>另外，「改进编译器」这事其实没那么简单，就像 TypeScript-node 在某个版本更新后，动态解析的速度慢了非常多，但也没计划优化。像 esbuild 目前还不支持装饰器。同时应用侧又开始一窝蜂上 monorepo，更加剧了整体耗时。我们只能寄希望于 TypeScript 官方的大神们再出绝招。</p><p><strong>刘易成：</strong>即使是 JavaScript 项目，也有编译/打包/构建等过程，绝大部分项目都不会因为加入了 TypeScript 编译就慢很多。是否转回 JavaScript 还是需要综合考虑项目复杂度、团队协作规模等因素。</p><p>另外，改进 TypeScript 编译速度并不是一个容易的事，TypeScript 的类型系统和语言特性很复杂，这只能靠 TypeScript 团队下功夫了。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q5：我们一开始用 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong> 是因为 TypeScript 提供了类型检查，弥补了 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 只有逻辑没有类型的问题，那如果我们用 JavaScript + JSDoc 来解决类型声明，是不是就不用使用 TypeScript 了？</strong></span></p><p><strong>刘勇：</strong>首先，JSDoc 并不能完全解决类型声明问题，它也不能在开发期就帮助开发者发现一些问题。</p><p>其次，这两者并不冲突，我个人在写 TypeScript 的时候也会写对应的 JSDoc，因为 TypeScript 的类型没法有更多的注释和描述。我更期望看到后续 TypeScript 团队能优化这块的体验。</p><p><strong>刘易成：</strong>JSDoc 只能解决一部分类型的问题，而 TypeScript 是一个完整的类型系统。TypeScript 生态更繁荣，对于普通开发者和普通的项目而言，使用 JSDoc 的开发和维护成本可能会比 TypeScript 更高。</p><p><strong>李振：</strong>理论上也是可行的，但与 TypeScript 相比，它仍然存在一些限制：</p><ul><li><p>静态类型检查的完整性：JSDoc 注释是基于注释的方式，而不是直接嵌入到语言中，因此它的类型检查可能不如 TypeScript 的类型系统完整和准确。</p></li><li><p>工具支持的差异：尽管一些工具和编辑器可以利用 JSDoc 注释进行类型检查，但与 TypeScript 相比，它们的功能和智能感知可能有所限制。</p></li><li><p>生态系统的差异：TypeScript 有一个独立的类型系统和类型声明文件生态系统，这使得与现有的 JavaScript 库和工具更加无缝集成。而使用 JavaScript + JSDoc 可能需要更多的手动工作来编写和维护类型注释。</p></li></ul><p>&nbsp;</p><span id="OSC_h1_3"></span><h1>三、TypeScript 和 JavaScript ，其实各有千秋</h1><p><span style="color:#245bdb"><strong>Q6：你觉得</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>有什么特别的长处，对开发者来说是</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 做不到的？</strong></span></p><p><strong>刘勇：</strong>类型的元数据描述能力，这个是 JavaScript 目前还不具备的，除非 TC39 的 「JavaScript 类型标注」（ Types as Comments）等提案能落地。像我们就很重视 「API 元数据」，通过工程化的方式，可以从代码中提取出来接口 API 信息，从而可以在 codegen，mock，前后端协作等很多方面来提升研发体验和研发效能。</p><p><strong>李振：</strong>TypeScript 相对于 JavaScript ，主要是引入了静态类型系统，并且可以兼容 JavaScript 生态。本质上来看，并没有哪些功能是 JavaScript 完全无法实现的。但是 TypeScript 经过这么多年的发展，已经形成自己良好的生态系统。比如 TypeScript 类型声明文件，提供了丰富的类型定义，与第三方库的集成更加顺畅。JavaScript 要实现类似的功能，需要开发者做更多的工作。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q7：你觉得对普通项目来说，使用</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>有什么不方便或者不利的地方吗？</strong></span></p><p><strong>刘勇：</strong>主要还是工作流的复杂化带来开发成本的提升，我记得之前在 StackOverflow 看过一个关于 TypeScript 的回答是，我开发一个简单的功能，但是解决类型问题就花了一整天的时间，在我们公司内部做日常的技术答疑的时候，也经常发现有不少用户对 TypeScript 问题完全不知道从何下手。举一个 Node.js 项目的例子，很多用户就不理解为什么 tsconfig.json 里的 paths 在代码编译成 JavaScript 后会不生效，因为这些问题，就会容易导致产生计划之外的工作量。</p><p><strong>刘易成：</strong>使用 TypeScript 需要增加一个「编译」的过程，不过现在各种脚手架已经帮你做好了这些步骤，所以成本已经很低了。还有就是 TypeScript 有一些学习成本，如果是新手很容易不注意类型检查，把 TypeScript 写成了 AnyScript，失去了使用 TypeScript 的意义，所以建议通过一些约束和培训，让项目中的 TypeScript 更加标准。</p><p>&nbsp;</p><span id="OSC_h1_4"></span><h1>四、TypeScript VS JavaScript ，你 Pick 谁？</h1><p style="text-align:left">根据 Stack Overflow <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsurvey.stackoverflow.co%2F2023%2F" rel="nofollow">发布</a></span>的 2023 年开发者调查报告，JavaScript 连续 11 年成为最流行编程语言，使用占比达 63.61%，TypeScript 则排名第五，使用占比 38.87%。在人气方面，JavaScript 的开发者社区仍然是巨大而活跃的，在社区中可以很方便地找到大量成熟的开发项目和可用资源。在框架和工具方面，随着 TypeScript 的日益受欢迎，已经有了很多支持它的框架和工具。而 JavaScript，由于其历史的深厚，几乎所有的前端框架和库都会优先支持。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q8：有人认为，</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>的出现是因为一般人驾驭不了</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> ，有人则觉得「水平越差的人越喜欢自由」，你怎么看？这两个语言的选择跟程序员的水平有关吗？</strong></span></p><p><strong>李振：</strong>拿爱好来判断个人水平是挺无聊的事情。写 JavaScript<strong></strong>和写 TypeScript 都有大牛。</p><p><strong>刘勇：</strong>笑～ 平时可没少见有同学吐槽，好好的 TypeScript 项目，被人提交了一堆 Any。也见过很多吐槽接手了一个 TypeScript 仓库，要硬着头皮看一大堆类型定义，搞清楚这些奇奇怪怪的类型是如何工作的。我觉得语言的选择主要看团队的工程化和规范化程度，过犹不及。如果一个 TypeScript 类库写了一大堆类型，但却连一个单测都没有，那我觉得它是不合格的。</p><p><strong>刘易成：</strong>TypeScript<strong></strong>的出现确实有一部分原因是 JavaScript<strong></strong>比较难「驾驭」，JavaScript<strong></strong>太灵活了，缺少类型的约束，很容易写出 bug 代码，TypeScript 一定程度上解决了这个问题，使得代码的可维护性更高了。</p><p>JavaScript<strong></strong>和 TypeScript 不能用来衡量程序员的水平。对于简单的项目或者个人项目而言，JavaScript<strong></strong>可能更加轻量和灵活，但对于需要大团队协作，复杂的项目而言，TypeScript 的类型系统就可以带来更好的代码维护性和可靠性了。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q9：你认为这两个语言是不是分别有不同的适用项目？什么时候该用 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>什么时候该用 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 呢？对个人和企业开发者来说，应该怎么选？</strong></span></p><p><strong>刘易成：</strong>对于大型项目、多人协作和需要高可靠性的项目来说，使用 TypeScript 更好；对于小型项目、个人项目，可以使用 JavaScript<strong></strong>更快迭代，当然也建议使用 TypeScript 保持更高的可维护性。</p><p>另外企业也需要根据员工技术能力和项目历史包袱来灵活选择技术栈。</p><p><strong>李振：</strong>个人觉得大型项目首选 TypeScript，拿我所在的团队，腾讯文档来说，团队有上百个项目，包括前端项目和一些 node 项目，大家都是首选 TypeScript 作为开发语言，可以降低团队协作的成本。个人开发者，如果是小型项目，其实无所谓，根据自己的爱好选择就行了。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q10：你如何看待 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>的未来发展？你觉得它是一时流行还是会终将取代 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> ？你认为谁的技术生态更好一点呢？</strong></span></p><p><strong>刘勇：</strong>TypeScript<strong></strong>的定位是 JavaScript<strong></strong>的一个超集，它的能力是以 TC39 制定的 ECMAScript 规范为基准（即 JavaScript<strong></strong>）。我觉得它也谈不上会取代 JavaScript<strong></strong>，毕竟它并不是官方规范，而且 JavaScript<strong></strong>的存量生态实在是太庞大了。</p><p>当然，TypeScript 现在已经某种程度上成为事实的标准，尤其是因为 Node.js 官方对 ESM 和 CJS 何去何从的犹豫，导致社区开发者长时间的割裂，越来越多的人被迫选择用 TypeScript 来写类库，然后同时编译为 ESM 和 CJS。目前 TypeScript 的生态已经成规模，所以它不会像 CoffeeScript 那样昙花一现。</p><p><strong>刘易成：</strong>我个人认为 TypeScript 会持续流行并得到更广泛的应用。但并不会「取代」 JavaScript<strong></strong>。TypeScript 的目标一直都不是「取代」 JavaScript<strong></strong>，而是基于 JavaScript<strong></strong>提供类型系统，作为 JavaScript<strong></strong>的一个补充，在不同的项目和场景中发挥各自的优势。</p><p>JavaScript<strong></strong>和 TypeScript 的技术生态早已融合在一起了吧，几乎所有库都会有 TypeScript 类型文件。</p><p><strong>李振：</strong>我认为 TypeScript 不太可能完全取代 JavaScript，而是作为 JavaScript 的一个补充和增强。两者暂时不会出现零和博弈，也希望这两种语言都可以有更好的发展。目前来看 JavaScript 的生态更庞大一些，但是 TypeScript 的地位和影响力不断增长。作为普通开发者，在两者并不冲突的当下，最好都能关注其发展。</p><p>&nbsp;</p><p>对此，你怎么看？你手上用着的是 JavaScript<strong></strong>还是 TypeScript 呢？哪个更顺手？评论区见吧~</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 09:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6852546/blog/10114672</guid>
            <link>https://my.oschina.net/u/6852546/blog/10114672</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DamiBus v0.29 发布，本地多模块解耦框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; text-align:start">DamiBus，专为<span style="background-color:#f1c40f">本地多模块</span>之间通讯<span style="background-color:#f1c40f">解耦</span>而设计（尤其是未知模块、隔离模块、领域模块）。零依赖，特适合 DDD。</p><h3>特点</h3><p style="color:#24292e; text-align:start">结合 Bus 与 RPC 的概念，可作事件分发，可作接口调用，可作异步响应。</p><ul><li>支持事务传导（同步分发、异常透传）</li><li>支持事件标识、拦截器（方便跟踪）</li><li>支持监听者排序、附件传递（多监听时，可相互合作）</li><li>支持 Bus 和 Api 两种体验风格</li></ul><h3>与常见的 EventBus、ApiBean 的区别</h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,"><tbody><tr><th>&nbsp;</th><th>Dami</th><th>EventBus</th><th>Api</th><th>Dami 的情况说明</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">广播</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">无</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发送 (send) + 监听 (listen) 以及 Api 模式</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">应答</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">无</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发送并等响应 (sendAndResponse) + 监听 (listen) + 答复 (reply) 以及 Api 模式</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">回调</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有+</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">无</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有-</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发送并等回调 (sendAndCallback) + 监听 (listen) + 答复 (reply)</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">耦合</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">弱-</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">弱+</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">强++</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td></tr></tbody></table><p style="color:#24292e; text-align:start">如果涉及类加载器隔离：请在主程序标为编译，在其它模块标为可选。</p><h3>本次更新了什么？</h3><ul><li>TopicRouterPatterned 增加排序支持</li><li>TopicRouterPatterned 分离路由能力，可定制</li><li>增加基于 Tag 的路由模式定制</li><li>增加 @DamiTopic:index 注解属性</li><li>dami-springboot-starter，增加 spronboot 2.0 的兼容</li><li>修复 dami-springboot-starter 实现类被代理后不能正常注册与注销的问题</li></ul><p style="color:#24292e; text-align:start">新增加的定制效果（详见仓库主页。也可按需定制自己的 Routing）：</p><pre><code class="language-java"><span style="color:#a626a4">public</span><span style="color:#a626a4">class</span><span style="color:#c18401">Demo15_path</span> {
    <span style="color:#a626a4">public</span><span style="color:#a626a4">void</span><span style="color:#4078f2">main</span><span>()</span>{
        <em>//切换为模式匹配路由器 + RoutingPath（支持 * 和 ** 占位符；支持 / 或 . 做为间隔）</em>
        DamiConfig.configure(<span style="color:#a626a4">new</span><span style="color:#c18401">TopicRouterPatterned</span>(RoutingPath::<span style="color:#a626a4">new</span>));

        <em>//拦截</em>
        Dami.bus().listen(<span style="color:#50a14f">"demo/a/*"</span>, (payload) -&gt; {
            System.err.println(payload);
        });

        <em>//发送事件</em>
        Dami.bus().send(<span style="color:#50a14f">"demo/a/1"</span>, <span style="color:#50a14f">"world1"</span>);
        Dami.bus().send(<span style="color:#50a14f">"demo/a/2"</span>, <span style="color:#50a14f">"world2"</span>);
    }
}
</code></pre><pre><code class="language-java"><span style="color:#a626a4">public</span><span style="color:#a626a4">class</span><span style="color:#c18401">Demo15_tag</span> {
    <span style="color:#a626a4">public</span><span style="color:#a626a4">void</span><span style="color:#4078f2">main</span><span>()</span>{
        <em>//切换为模式匹配路由器 + RoutingTag（":"前为主题，后按 "," 号分割作为 tag）</em>
        DamiConfig.configure(<span style="color:#a626a4">new</span><span style="color:#c18401">TopicRouterPatterned</span>(RoutingTag::<span style="color:#a626a4">new</span>));

        <em>//拦截</em>
        Dami.bus().listen(<span style="color:#50a14f">"demo.a:id"</span>, (payload) -&gt; {
            System.err.println(payload);
        });

        <em>//发送事件</em>
        Dami.bus().send(<span style="color:#50a14f">"demo.a:id"</span>, <span style="color:#50a14f">"world1"</span>);
        Dami.bus().send(<span style="color:#50a14f">"demo.a:id,name"</span>, <span style="color:#50a14f">"world2"</span>);
    }
}
</code></pre><p style="color:#24292e; text-align:start">疑问： 为什么不用分布式消息队列呢？不好意思，真的是不同的维度。</p><h3>项目地址</h3><ul><li><a href="https://gitee.com/noear/dami">https://gitee.com/noear/dami</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fdami" target="_blank">https://github.com/noear/dami</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 09:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259748/damibus-0-29-released</guid>
            <link>https://www.oschina.net/news/259748/damibus-0-29-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
