<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 28 Dec 2023 02:40:40 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[中国信通院发布「方升」大模型基准测试体系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 24 日，中国信息通信研究院（简称「中国信通院」）发布「方升」大模型评测体系，旨在建立业界大模型基准测试统一的「度量衡」。「方升」测试体系涵盖大模型基准测试的关键四要素，即测试指标、测试方法、测试数据集和测试工具，目前已形成《大规模预训练模型基准测试-总体技术要求》标准。</span></p><p><img height="167" src="https://oscimg.oschina.net/oscnet/up-ebb8952d715044001bb29e8d67808584ad5.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-8b441a7bb22997359392d02a0644c603284.png" width="500" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试指标方面，「方升」测试体系主要针对行业、应用、通用和安全四个维度对大模型进行全面、客观、统一的评估，为了加速大模型应用落地，重点强化了行业和应用导向能力的考查。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">在测试方法方面，「方升」测试体系创新性提出自适应动态测试方法，从测试数据标签化、测试题库实时化、测试方案定制化、测试流程自动化四个方面全面提升大模型基准测试质量，重点解决大模型「刷榜」问题。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试数据方面，<span>「</span>方升」测试体系搭建动态测试数据库，涵盖测试数据集 107 个，测试数据条数达到 123 万，联合产业界多家机构首次推出面向行业、通用、应用、安全领域的评测数据集 6 个。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试框架与工具方面，中国信通院在构建超自动化测试平台和智能化结果评估系统方面持续发力，探索解决国内外人工智能自动化测试流程中存在的「阻塞点」，全面提高测试效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">「方升」大模型基准测试体系由中国信通院联合北京智源研究院、认知智能全国重点实验室和天津大学共同发布。此外，国网智能电网研究院、首都之窗、天津大学、中国电信研究院、中国联通软件研究院、华为、甲骨易、海天瑞声、东方财富 9 家单位成为「方升」大模型基准测试首批合作伙伴。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:36:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273067</guid>
            <link>https://www.oschina.net/news/273067</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中国开源开发者报告》]]>
            </title>
            <description>
                <![CDATA[此报告由开源中国与 Gitee 发布，整体分为三章，分别是：第一章《开源开发者事件回顾》、第二章《2023 LLM 技术报告》、第三章《<gitee ×="" oss="" compass=""> Insight：中国开发者开源新动向》...</gitee>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:37 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[《2023 大语言模型 LLM 技术报告》]]>
            </title>
            <description>
                <![CDATA[从基础设施、大模型、Agent、AI 编程、工具和平台，以及算力几个方面，为开发者整理了当前 LLM 中最为热门和硬核的技术领域以及相关的软件产品和开源项目。]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:37 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[BMF —— 下一代视频处理引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BMF（Babit Multimedia Framework）是字节跳动开发的跨平台、可定制的多媒体处理框架。经过 4 年多的测试和改进，BMF 已经过量身定制，能够熟练地应对现实生产环境中的挑战。目前广泛应用于字节跳动的视频串流、直播转码、云剪辑以及移动端前/后处理场景。该框架每天处理超过 20 亿个视频。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>以下是一些主要功能：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p><span><span>跨平台支持：与 Linux、Windows 和 Mac OS 原生兼容，并针对 x86 和 ARM CPU 进行优化。</span></span></p></li><li><p><span><span>易于使用：BMF 提供 Python、Go 和 C++ API，使开发人员能够灵活地用自己喜欢的语言进行编码。</span></span></p></li><li><p><span><span>可定制性：由于其解耦的架构，开发人员可以通过添加自己的模块来增强框架的功能。</span></span></p></li><li><p><span><span>高性能：BMF 拥有强大的调度器，对异构加速硬件的强大支持。此外还有与&nbsp;<a href="https://www.nvidia.com/"><strong>NVIDIA</strong></a>&nbsp;合作开发的高度优化的 GPU 管道，用于视频转码和 AI 推理。</span></span></p></li><li><p><span><span>高效的数据转换：BMF 提供跨流行框架（PyTorch/OpenCV/TensorRT）以及硬件设备（CPU/GPU）之间的无缝数据格式转换。</span></span></p></li></ul><p style="text-align:start"><img alt="" height="375" src="https://static.oschina.net/uploads/space/2023/0824/164846_r8VC_4252687.gif" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:24:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bmf</guid>
            <link>https://www.oschina.net/p/bmf</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 跨平台的 hap 查看器 HapViewer]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-hapviewer" class="anchor" href="https://gitee.com/westinyang/hap-viewer#hapviewer"></a>HapViewer</h1><img src="https://gitee.com/westinyang/hap-viewer/raw/master/src/main/resources/icon/icon.png" width="128px" referrerpolicy="no-referrer"><h2><a id="user-content-项目介绍" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p>一个跨平台的 hap 查看器，方便开发者在电脑上预览 hap 的信息，并提供一键安装到设备等功能</p><p>目前支持解析的应用</p><ul><li>应用平台：OpenHarmony、HarmonyOS</li><li>编译目标：API9+</li><li>应用模型：Stage（FA 模型暂不考虑）</li></ul><p>开源仓库</p><ul><li><a href="https://gitee.com/westinyang/hap-viewer">Gitee</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwestinyang%2Fhap-viewer">Github</a></li></ul><h3><a id="user-content-系列项目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E7%B3%BB%E5%88%97%E9%A1%B9%E7%9B%AE"></a>系列项目</h3><ul><li><strong>电脑版（跨平台）</strong>：<a href="https://gitee.com/westinyang/hap-viewer">westinyang/hap-viewer</a></li><li>手机版（Android）：<a href="https://gitee.com/westinyang/hap-viewer-android">westinyang/hap-viewer-android</a></li></ul><h3><a id="user-content-衍生项目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A1%8D%E7%94%9F%E9%A1%B9%E7%9B%AE"></a>衍生项目</h3><ul><li><a href="https://gitee.com/ericple/hapv-cli">hapv-cli</a><code>命令行版的 hap 查看器，目前由@ericple 维护</code></li></ul><h2><a id="user-content-下载安装" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85"></a>下载安装</h2><ul><li><a href="https://gitee.com/westinyang/hap-viewer/releases">https://gitee.com/westinyang/hap-viewer/releases</a></li></ul><h2><a id="user-content-使用说明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用说明</h2><ul><li>安装和卸载功能需要自己配置好 hdc 到环境变量</li><li>由于目前 hdc 的 bug，hdc list targets 不显示 Android 设备，但安装时候会监测到 Android 设备，如果同时连接 Android 和 OpenHarmony 设备，使用 hdc 安装命令会提示需要指定一个（我觉得这是个 bug），那目前软件本身还没有做设备列表的读取和选择，只支持连接一个设备进行操作</li></ul><h2><a id="user-content-开发技术" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF"></a>开发技术</h2><blockquote><p>GraalVM 让 Java 再次变得强大，使用<code>NativeImage</code>把程序编译为目标平台的可执行文件，脱离 jvm 直接运行，启动速度快，内存负载低。<br>
关于 GraalVM 技术的最佳实践和教程，请参考我的另一个开源项目：<a href="https://gitee.com/westinyang/java-graalvm-start">westinyang/java-graalvm-start</a></p></blockquote><ul><li>GraalVM CE 22.3.0 (Java 17) Native Image</li><li>JavaFX 21-ea+5</li><li>ControlsFX 11.1.2</li><li>gluonfx-maven-plugin</li></ul><h2><a id="user-content-功能列表" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8"></a>功能列表</h2><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 打开应用（选择、拖拽、默认打开方式）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析应用（基本信息、逆向解析 resources.index 读取应用名称）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 技术探测（原生开发、Cocos、Flutter、Qt）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 实用工具（安装、重装、卸载、解压）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析 API9 Stage 模型的安装包</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""><del>解析 API9 FA 模型 (ArkTS/JS) 的安装包</del></li></ul><h2><a id="user-content-兼容测试" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%95"></a>兼容测试</h2><ul><li>Windows 7 <code>未测试，理论兼容</code></li><li>Windows 10/11 <code>已测试</code></li><li>macOS 11.x Big Sur (Intel) <code>已测试</code></li><li>Ubuntu 20.04 <code>已测试</code></li></ul><h2><a id="user-content-截图预览" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E6%88%AA%E5%9B%BE%E9%A2%84%E8%A7%88"></a>截图预览</h2><p><img src="https://gitee.com/westinyang/hap-viewer/raw/master/screenshot/all.png" alt="" referrerpolicy="no-referrer"></p><h2><a id="user-content-视频演示" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A7%86%E9%A2%91%E6%BC%94%E7%A4%BA"></a>视频演示</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1HX4y127ub">OpenHarmony 首个跨平台的 hap 查看器，将 Open 进行到底，为开源鸿蒙生态助力</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1cg4y197mc">开源鸿蒙 hap 查看器，新增探测 Flutter、Qt 技术，安卓版新主题</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Wb4y1T7VL">开源鸿蒙 hap 查看器，里程碑式新算法，API9~10、系统应用也支持</a></li></ul><h2><a id="user-content-许可声明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%AE%B8%E5%8F%AF%E5%A3%B0%E6%98%8E"></a>许可声明</h2><ul><li>本项目是以 Apache2.0 许可开源，如需衍生或商用请注明出处</li><li>软件图标出处：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.flaticon.com%2Ffree-icon%2Fapk_9704667">https://www.flaticon.com/free-icon/apk_9704667</a></li></ul>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:10:37 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/westinyang/hap-viewer</guid>
            <link>https://gitee.com/westinyang/hap-viewer</link>
        </item>
        <item>
            <title>
                <![CDATA[博通宣布终止现有 VMware 合作伙伴计划]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.crn.com%2Fnews%2Fvirtualization%2Fbroadcom-hands-vmware-partners-termination-notice" target="_blank">外媒报道称</a></u>，博通近日宣布将在 2024 年 2 月 4 日终止 VMware 此前与经销商签订的「所有合作伙伴协议」，要求原有经销商必须与博通重新签约，且只有营收流水超过 50 万美元（当前约 357 万元人民币）以上的经销商才能加入新的计划，其他合作伙伴都无法再销售 VMware 产品。 &nbsp;</p><p>这一策略引发了部分经销商的不满和担忧。他们认为博通此举破坏了信任，并表示对于小型经销商而言，这将是一个艰难的年末。一些合作伙伴表示，他们需要重新审视与 VMware 的关系，并考虑是否继续销售 VMware 产品。</p><p>博通对 VMware 的重组不仅对合作伙伴关系产生影响，也引发了对 VMware 未来发展的关注。业界观察家表示，博通需要平衡 VMware 的既有业务和新战略方向，以确保公司的长期发展。</p><p>随着博通对 VMware 业务重组的深入推进，业界将关注其未来的战略动向，以及如何平衡既有业务和新战略的关系。对于合作伙伴和经销商而言，他们将面临重新签约和适应新战略的挑战。</p><p>博通（Broadcom）此前以 690 亿美元（当前约 4926.6 亿元人民币）并购 VMware，之后解雇了 1300 名 VMWare 员工，并将 VMware 云服务「永久许可证」改为订阅制度。</p><p><strong>延伸阅读</strong></p><ul><li><a href="https://www.oschina.net/news/270967/vmware-by-broadcom-business-transformation" target="news">VMware 产品全面改为订阅制</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</guid>
            <link>https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 万字带你熟悉静态分析工具的评估测试]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F418850%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">静态分析工具的评估测试</a>》，作者： Uncle_Tom。</p><span id="OSC_h1_1"></span><h1>1. 垂直极限</h1><p>还是先说故事。那是 2014 年参加的一个测试驱动（TDD）的培训，培训是 TDD 推广的志愿者组织的，在一个咖啡馆里搞的，周末两天的免费培训。</p><p>培训过程中的一张图和一个视频让我至今记忆尤新。</p><span id="OSC_h2_2"></span><h2>1.1. 一张图</h2><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421009200317830.png" referrerpolicy="no-referrer"></p><p>上面的两个图（原来培训的那个图找不到了，自己随手涂鸦了一下）。</p><p>左边是经过完整的系统的测试的软件产品，每个节点都通过测试，这样一层层的搭建起来的系统。看着就坚实可靠。</p><p>右边的测试则是随意的，很多地方都缺失了。任何一个风吹草动，一个异常都可能造成整个大厦倾覆。</p><p>不用说大家立刻就可以看懂，那个软件产品更可靠，更让人放心。</p><span id="OSC_h2_3"></span><h2>1.2. 一段影像</h2><p>视频是电影《垂直极限》中开头的一段。虽然过去 20 多年了，但这部电影仍然被奉做山难电影的经典之作，有兴趣的朋友还是可以找来看一看的。</p><p><img alt="Vertical_limit" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703420993405166999.png" referrerpolicy="no-referrer"></p><p>一个风和日丽的日子里，老爸带着儿子、女儿在一个高耸、陡峭的山峰上攀岩。他们已经来到了山峰的一半，在他们的上面个还有另一群攀岩爱好者。</p><p>老爸一边整理着自己的安全栓（攀岩过程中打在岩石中，然后利用登山绳固定自己的安全扣），一边对儿子说：「检查下你妹妹的安全栓。」</p><p>儿子看向下面的妹妹，妹妹说：「告诉他我们已经不是小孩子了。」</p><p>儿子打趣的对老爸说：「爸，她还需要一个安全栓。」</p><p>爸爸看向下面的兄妹两人说：「万一出事，那样可撑不住。安妮，我不管你有多老练，聪明的攀岩者都会做好安全措施，两个栓才安全，三个更好。在岩壁上再放个安全栓，我们才继续攀。」</p><p>女儿生气的对爸爸说：「爸，你别听哥哥的，他在开玩笑，我放了三个安全栓。」</p><p>电影总是这样，一段舒缓的节奏后面，总会有段紧张的让人喘不过气来的场面。不出意外，意外就会发生。</p><p>话音未落，先是一个登山包从山上面坠落下来，快速的经过三人。上面的菜鸟在登山的过程中揹包意外脱落，帮着的圣山包的登山绳造成一连串的连锁反应，两个登山者也不幸地被连带着坠落下去。老爸、儿子也被着一连串的变故拖累到挂在了半空中，女儿的三个安全栓无法承担三个人的重量，一个、两个先后崩飞，只靠着最后的一个安全栓勉强的维持着女儿，以及挂在半空的老爸和儿子。最后在老爸的要求下，儿子不得不割断了绳索，女儿和儿子看着老爸坠了下去。</p><p>看到这里，大家都不禁须臾不已，再看看上面的图，对系统的完整的测试有了更深刻的认识。</p><span id="OSC_h2_4"></span><h2>1.3. 思考</h2><p>在软件的开发过程中，每一个节点的测试都是在为系统增加一个安全栓。由这样一层层搭建起来的系统，整个系统才是安全、可靠的。否则任何一个意外都可能将整个系统带飞。做工具和做单点能力验证不同，需要更多的测试节点来保障工具的稳定性和可靠性。这个从学院里出来的大部分朋友还没有意识到这个问题，加之项目的管理的问题，就会把各种坑坑洼洼带到生产中，使后期维护陷入无尽的深渊。</p><p>大家都喜欢做 0 到 1 的事情，出彩啊。很少有人愿意做为 0 到 1 填坑的基础工作，但一个工具要生存，能够赢得最终的胜利，需要无数的这些幕后英雄。就像长津湖战役一样，指挥很重要，但更多的是需要后面无数的无名英雄，那些人才是撑起整个胜利的英雄。</p><p>那么对于静态分析工具，我们该如何构建一个稳定、可靠的静态分析工具？如何评价一个静态分析工具的检查能力？</p><p>自从程序的诞生，程序分析便紧随其后，人们视图通过一个程序来分析编制的程序，保证编制程序运行结果的正确性。尽管后面的莱斯定理给出了这个问题的「不可判定性」，但并不会妨碍程序分析在这方面的卓越表现。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421059373679236.png" referrerpolicy="no-referrer"></p><p>尽管现在大模型能够帮助我们生成程序代码和对已有程序进行问题检查，这似乎可以绕过我们一值以来使用的模式匹配的检查方式，可以简化模式的提炼，和根据模式再编写检查规则。 但如何保障生成代码的安全性和可靠性，以及如何评估大模型的能力，仍然将是人工智能在今后很长一段时间需要解决的问题。</p><p>通过下面对三组测试用例的分析，希望能够给静态分析工具的测试和评估给大家一个指导性的启发。</p><span id="OSC_h1_5"></span><h1>2. Juliet Java、C/CPP 测试用例集</h1><span id="OSC_h2_6"></span><h2>2.1. 创建背景</h2><p>2005 年美国国家标准与技术研究院 (National Institute of Standards and Technology (NIST))，简称 NIST，下属的软件质量组，成立了软件保障指标和工具评估项目（Software Assurance Metrics And Tool Evaluation (SAMATE)），简称 SAMATE 项目。项目组的主要目的是通过开发支持软件工具评估的方法、衡量工具和技术的有效性以及识别工具和方法中的差距来改善软件保障，主要工作包括定义错误类，收集具有已知错误的程序语料库，以及更好地了解工具的有效性。</p><p>围绕这个目标，软件保障指标和工具评估项目（SAMATE）建立了两个子项目：</p><ul><li><p>软件保障参考数据集（Software Assurance Reference Dataset (SARD)），简称 SARD，用于收集整理 C、C++、Java、PHP 和 C#针对软件弱点的测试用例集；</p></li><li><p>软件工具博览会（Static Analysis Tool Exposition (SATE)），简称 SATE，用于工具制造商对用例进行测试和工具研讨。截至 2021 年，已经举办了六场 SATE 活动。</p></li></ul><span id="OSC_h2_7"></span><h2>2.2. Juliet 用例集简介</h2><p>Juliet 测试用例集就是软件保障参考数据集 (SARD) 下的一个是用于检测 C/C++ 和 Java 程序已知缺陷的集合。</p><p><strong>2010 年 12 月 1.0 版本。</strong>Juliet 测试用例集最早的 1.0 发布于 2010 年 12 月，由软件保障指标和工具评估项目（SAMATE）的开发团队完成，名字选取了当时软件保障参考数据集（SARD）的第十个贡献者：国际无线电（International Radiotelephony）的字母表中的第十个单词 「Juliet」 而的得名。</p><div><p><strong>2011 年 1.1 - 1.1.1 版本。</strong>Juliet 1.1 版本，是 Juliet 的开发团队根据多个因素为选定的缺陷创建了测试用例，包括团队的经验、缺陷的重要性或严重性以及其出现的频率。测试用例涵盖了 2011 年 CWE/SAN TOP 25 个最危险的编程错误中的 14 个。剩下的 11 个缺陷是设计问题，例如 CWE-862 授权机制缺失，和 CWE-250 带着不必要的权限执行，这些问题不适合用静态分析的方式来检测，所以未包含在测试用例中。</p><p><strong>2012 年 1.2 版本。</strong>2012 年的 Juliet 1.2 版本。基本形成了现在使用版本。是我们现在使用最多的版本，程序分析、自动修复、深度学习的论文基本上都使用了这里面的用例，用于证明理论、工具的有效性。</p></div><div><p><strong>2017 年 1.3 版本。</strong>只对 1.2 版本的个别错误进行了修正。</p><ul><li>Juliet C/C++ 涵盖 118 个 CWE 问题，1689 个场景，用例数: 181,140, 其中正例：117,041, 反例：64,099。</li><li>Juliet Java 涵盖 112 个 CWE 问题，933 个场景，用例数: 96,537, 其中正例：67,656, 反例：28,881。</li></ul><strong>2022 年 1.3.1 版本。</strong>增加了 SARIF 的支持，试图通过 SARIF 精确的给出告警的位置信息，但对数据流的支持的并不好，不能完全依靠现有的 SARIF 版本。 
 <p>注：关于 SARIF 请参考：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F245851" rel="nofollow" target="_blank">DevSecOps 工具与平台交互的桥梁 – SARIF 入门</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F254864" rel="nofollow" target="_blank">DevSecOps 工具与平台交互的桥梁 – SARIF 进阶</a></li></ul><span id="OSC_h2_8"></span><h2>2.3. Juliet 用例构造的特点</h2><span id="OSC_h3_9"></span><h3>2.3.1. 统一明确的命名方式</h3><p>测试用例使用 CWE 作为命名和组织的基础。测试用例力求对目标缺陷使用最具体的 CWE 条目。每个测试用例文件与一个 CWE 条目相关联。</p><span id="OSC_h4_10"></span><h4>2.3.1.1. 测试用例文件名命名规范</h4><p>测试用例名由四个元素的组合唯一标识：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>组成部分</th><th>描述</th><th>是否强制</th></tr></tbody><tbody><tr><td>CWE</td><td>字符</td><td>是</td></tr><tr><td>CWE ID</td><td>CWE 的编号</td><td>是</td></tr><tr><td>_</td><td>分隔，下划线</td><td>是</td></tr><tr><td>CWE 短描述</td><td>CWE 英文名称的缩短版本，单词之间用下划线"_"连接</td><td>是</td></tr><tr><td>__</td><td>分隔，两个下划线"_"</td><td>是</td></tr><tr><td>问题场景</td><td>表示用例场景。场景描述单词之间用下划线"_"连接</td><td>是</td></tr><tr><td>_</td><td>分隔，下划线，问题场景和案例编号之间进行连接</td><td>是</td></tr><tr><td>案例编号</td><td>基础案例编号采用「01」</td><td>是</td></tr><tr><td>一个案例多文件定义</td><td>对同一个案例，如使用多个文件，可采用 a，b 等进行区别，或采用下划线加不同的作用定义，例如_good 或_bad，表示正例或反例</td><td>否</td></tr></tbody></table><p>例如：</p><p>单文件用例：</p><strong>CWE190_Integer_Overflow__byte_console_readLine_add_01.java</strong><ul><li>CWE190： CWE 的编号，可以在 CWE 网站上查询到这个编号对应的问题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的简写，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 场景描述：通过 readLine 函数从控制界面读取字节流；</li><li>01：代表基础用例。</li></ul><p><strong>多文件用例, 下面的一组文件构成了一个用例：</strong></p><ul><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_bad.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_base.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodB2G.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodG2B.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81a.java 
   <ul><li>CWE190： CWE 的编号，可以在 CWE 网站上查询到这个编号对应的问题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的简写，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 场景描述：通过 readLine 函数从控制界面读取字节流；</li><li>81: 数据流案例，案例将参数传递给通过引用调用的抽象方法；</li><li>_bad: 表示这是个反例的文件；</li><li>_base: 表示这个是用例的主文件；</li><li>_goodB2G: good 表示这是个正例的文件，同时 B2G 表示污点（Bad）会经过清洗到达（2(to)）爆发点，但由于做了清洗，变成了无污染的，不会引起问题（Good）;</li><li>_goodG2B: good 表示这是个正例的文件，同时 G2B 表示污点经过清洗变成无污染（Good）到达（2(to)）爆发点（Bad），但由于是无污染的数据，也不会引起问题;</li><li>a: 表示这是个辅助文件。</li></ul></li></ul><span id="OSC_h4_11"></span><h4>2.3.1.2. 测试用例函数名命名规范</h4><p>有问题（反例）函数，通常以 bad 命名, 并可使用正则表达式匹配：<code>^bad$</code>;</p><p>没问题（正例）的函数，通常以 good 命名, 并可使用正则表达式匹配：<code>^good$</code>;</p> 对于用例中存在多个正例的函数，有以下三种命名方式，可使用正则表达式匹配： 
 <code>^good(\d+|G2B\d*|B2G\d*)$</code>; 
 <ul><li>默认或通用的方式，采用例如： good1（）、good2（）、good3（）的命名方式；</li><li>当一个好的源将安全数据传递到一个潜在的坏接收器时，采用例如：goodG2B（）、goodG2B1（）、goodG2B2（）、goodG2B3（） 的方式命名;</li><li>当不良源将不安全或潜在不安全的数据传递给良好源时，采用例如：goodB2G（）、goodB2G1（）、goodB2G2（）、goodB2G3（）的方式命名；</li></ul><ul><li>对于数据流用例还遵守以下命名方式：有问题的污染源，采用正则表达式：<code>^badSource$；</code>有问题的爆发点，采用正则表达式：<code>^badSink$；</code>无问题的污染源，采用正则表达式：<code>^good(G2B\d*|B2G\d*)?Source$；</code>无问题的爆发点，采用正则表达式：<code>^good(G2B\d*|B2G\d*)?Sink$</code>。</li></ul><span id="OSC_h4_12"></span><h4>2.3.1.3. 命名规则在测试中带来的好处</h4><p>从文件名就能判断出检测问题、场景、适用的案例类型，有的还可以知道文件是正例、还是反例；</p><p>从发生问题的函数名就可以知道，所处的函数是正例，还是反例；</p><p>通常检测工具都会给出问题所在的文件和函数，这样在查看问题的时候能够立刻判断出检测结果的有效性；</p> 严格的命名方式，也便于使用程序自动化的检查结果做出快速的判断。 
 <span id="OSC_h3_13"></span><h3>2.3.2. 每个问题给出发生问题的可能场景</h3><p>Juliet 还为每个问题（CWE）枚举了一些发生场景，一些场景还使用模板结合控制流和数据流进行了枚举，从而测试更加广泛的问题发生的可能性，以提高问题的覆盖率。</p><p>Juliet 一共采用了三类模板：</p><ul><li>控制流模板（point-flaw）</li><li>单一污点源和爆发点模板（source-sink）；</li><li>多污点源和爆发点模板（sources-sinks);</li></ul><p>Juliet Java</p><ul><li>Juliet Java 一共 122 个 CWE, 覆盖 933 个场景。</li><li>用模板生成的场景 823 个，这包括：point-flaw： 92 个场景；sources-sink： 197 个场景；sources-sinks： 534 个场景;</li></ul><ul><li>单一场景 110 个。</li></ul><p>Juliet C/C++</p><ul><li>Juliet C/C++ 一共 118 个 CWE, 覆盖 1689 个场景。</li><li>用模板生成的场景 1509 个，这包括：</li></ul><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>Template</th><th>C</th><th>CPP</th><th>Total</th></tr></tbody><tbody><tr><td>point-flaw</td><td>259</td><td>18</td><td>277</td></tr><tr><td>sources-sink</td><td>499</td><td>233</td><td>723</td></tr><tr><td>sources-sinks</td><td>357</td><td>152</td><td>509</td></tr><tr><td>Total</td><td>1106</td><td>403</td><td>1509</td></tr></tbody></table></div><div><p>而单一场景 180 个。</p><span id="OSC_h3_14"></span><h3>2.3.3. 每个场景使用不同的案例进行覆盖</h3><p>Juliet 用例还真对每个场景结合控制流和数据流进行了枚举，以达到每个场景在不同代码条件下的检测能力的覆盖。</p><p>从下表我们看到类型基本上涵盖了编程语言通常所需要的基本语法，例如条件判断（if），条件分支（swith），循环（while，for），函数间和程序间不同层数的调用，以及不同类型的参数传递方式。</p><p>案例类型明细</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>案列编号</th><th>案例类型（流类型）</th><th>类型描述</th><th>C</th><th>CPP</th><th>JAVA</th></tr></tbody><tbody><tr><td>01</td><td>无</td><td>基线——最简单的缺陷形式</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>02</td><td>控制流</td><td>if(true) 和 if(false)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>03</td><td>控制流</td><td>if(5==5) 和 if(5!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>04</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_TRUE) 和 if(PRIVATE_STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>05</td><td>控制流</td><td>if(privateTrue) 和 if(privateFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>06</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_FIVE==5) 和 if(PRIVATE_STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>07</td><td>控制流</td><td>if(privateFive==5) 和 if(privateFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>08</td><td>控制流</td><td>if(privateReturnsTrue()) 和 if(privateReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>09</td><td>控制流</td><td>if(IO.STATIC_FINAL_TRUE) 和 if(IO.STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>10</td><td>控制流</td><td>if(IO.staticTrue) 和 if(IO.staticFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>11</td><td>控制流</td><td>if(IO.staticReturnsTrue()) 和 if(IO.staticReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>12</td><td>控制流</td><td>if(IO.staticReturnsTrueOrFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>13</td><td>控制流</td><td>if(IO.STATIC_FINAL_FIVE==5) 和 if(IO.STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>14</td><td>控制流</td><td>if(IO.staticFive==5) 和 if(IO.staticFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>15</td><td>控制流</td><td>switch(6) and switch(7)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>16</td><td>控制流</td><td>while(true)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>17</td><td>控制流</td><td>for 循环</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>18</td><td>控制流</td><td>goto 语句</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>21</td><td>控制流</td><td>流由私有变量的值控制。所有方法都包含在一个文件中。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>22</td><td>控制流</td><td>流由公共静态变量的值控制。source 和 sink 在两个不同的文件里。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>31</td><td>数据流</td><td>在同一方法中使用数据副本流动</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>32</td><td>数据流</td><td>在同一个函数中使用两个指向同一个值的指针的数据流</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>33</td><td>数据流</td><td>在同一函数中使用对数据的 C++ 引用</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>34</td><td>数据流</td><td>使用包含两个访问相同数据的方法的联合（在同一函数内）</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>41</td><td>数据流</td><td>作为参数从一个方法传递到同一类中的另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>42</td><td>数据流</td><td>在同一类中从一个方法返回到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>43</td><td>数据流</td><td>数据使用 C++ 引用从同一源文件中的一个函数流向另一个函数</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>44</td><td>数据流</td><td>数据作为参数从一个函数传递到通过函数指针调用的同一源文件中的函数</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>45</td><td>数据流</td><td>作为私有类成员变量从一个方法传递到同一类中的另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>51</td><td>数据流</td><td>在同一个包的不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>52</td><td>数据流</td><td>在同一个包的三个不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>53</td><td>数据流</td><td>在同一个包的四个不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>54</td><td>数据流</td><td>在同一个包的五个不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>61</td><td>数据流</td><td>在同一个包的不同类中通过一个方法的返回值传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>62</td><td>数据流</td><td>使用 C++ 引用从不同源文件中的一个函数到另一个函数的数据流</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>63</td><td>数据流</td><td>指向不同源文件中从一个函数传递到另一个函数的数据的指针</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>64</td><td>数据流</td><td>void 指向不同源文件中从一个函数传递到另一个函数的数据的指针</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>65</td><td>数据流</td><td>数据作为参数从一个函数传递到通过函数指针调用的不同源文件中的函数</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>66</td><td>数据流</td><td>在同一个包中的不同类中通过数组从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>67</td><td>数据流</td><td>在同一个包中的不同类中通过类从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>68</td><td>数据流</td><td>在同一个包中的不同类中通过类的成员变量从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>71</td><td>数据流</td><td>在同一个包中的不同类中通过类的引用从一个方法传递到另一个方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>72</td><td>数据流</td><td>在同一个包中的不同类中将向量从一个方法传递到另一个方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>73</td><td>数据流</td><td>在同一个包中的不同类中将 LinkedList 从一个方法传递到另一个方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>74</td><td>数据流</td><td>在同一个包中的不同类中将 HashMap 从一个方法传递到另一个方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>75</td><td>数据流</td><td>将序列化对象从一个方法传递到同一包中不同类中的另一个方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>81</td><td>数据流</td><td>将参数传递给通过引用调用的抽象方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>82</td><td>数据流</td><td>将参数传递给通过指针调用的虚函数的数据</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>83</td><td>数据流</td><td>通过在堆栈上声明类对象将数据传递给类构造函数和析构函数</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>84</td><td>数据流</td><td>通过在堆上声明类对象并在使用后将其删除来传递给类构造函数和析构函数的数据</td><td>N</td><td>Y</td><td>N</td></tr></tbody></table><span id="OSC_h3_15"></span><h3>2.3.4. 缺点</h3><p>Juliet 可以说是堪称完美的测试用例集，但随着时间的推移，编程语言的迭代，它也显现出一些缺点：</p><ul><li>一些用例的写法开始变得老旧，可能不能胜任新的场景；</li><li>没有对语言的所有语法特点做覆盖，特别是新的一些语法类型；比如：lamda 表达式；</li><li>用例的设计存在大量的重叠，特别是对数据流的检测，每个场景都使用了相同的模板，产生了大量的用例。其实对于数据流的处理，完全可以分成：污染源、污染传递、污染清理、以及爆发四个不同的维度进行分别测试，这样可以大大提升测试效率。</li></ul><span id="OSC_h1_16"></span><h1>3. OwaspBenchmark 测试用例集</h1><span id="OSC_h2_17"></span><h2>3.1. 用例背景</h2><p>OWASP(Open Worldwide Application Security Project (OWASP)) 基金会致力于通过其社区主导的开源软件项目、全球数百个分会、数万名成员以及举办当地和全球会议来提高软件的安全性。</p><span id="OSC_h2_18"></span><h2>3.2. 用例简介</h2><p>OWASP Benchmark Project 是一个 Java 测试套件，旨在评估自动化软件漏洞检测工具的准确性、覆盖率和速度。</p><ul><li>1.0 版本于 2015 年 4 月 15 日发布，共有 20983 个测试用例。</li><li>1.1 版本于 2015 年 5 月 23 日发布。1.1 版本在前一版本的基础上进行了改进，确保每个漏洞区域都有真阳性和假阳性。</li><li>1.2 版本于 2016 年 6 月 5 日首次发布（1.2 测试版于 2015 年 8 月 15 日发布）。自那以后，v1.2 版本一直在不断调整。1.2 版本将测试用例数量控制在小于 3000 个测试用例，以便快速得到测试结果。</li></ul><span id="OSC_h2_19"></span><h2>3.3. 用例设计和组成方式</h2><p>下面以 1.2 版本为例进行说明。</p><span id="OSC_h3_20"></span><h3>3.3.1. 用例问题的覆盖</h3><p>从下面这个表可以看出 Benchmark 更多的注重复盖 Web 类的问题的检查，同时重点覆盖了 OWASP TOP 10 中的主要能够通过静态检查工具检查的问题。关于 OWASP TOP 10 可以参考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F312926" rel="nofollow" target="_blank">CWE 4.6 和 OWASP TOP10(2021)</a>。</p><p>Benchmark 用例集主要以加密问题，以及注入类问题为主，这也巧合的与静态检查技术相互匹配。加密问题多用抽象语法树（AST）的遍历来返现加密函数，并对其做出判断。而注入类问题多用数据流的污点分析技术来追踪外部输入是否会对爆发点形成可达的路径。有关污点分析技术，可以参考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F330804" rel="nofollow" target="_blank">使用污点分析检查 log4j 问题</a>。</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>检测问题</th><th>CWE TOP 25（2023）</th><th>OWASP TOP 10（2021）</th><th>正确用例</th><th>错误用例</th><th>用例总数</th></tr></tbody><tbody><tr><td>CWE-22 对路径名的限制不恰当 (路径遍历)</td><td>8</td><td>A01：2021-中断访问控制</td><td>135</td><td>133</td><td>268</td></tr><tr><td>CWE-327 使用已被攻破或存在风险的密码学算法</td><td>-</td><td>A02：2021-加密故障</td><td>116</td><td>130</td><td>246</td></tr><tr><td>CWE-328 可逆的单向哈希</td><td>-</td><td>A02：2021-加密故障</td><td>107</td><td>129</td><td>236</td></tr><tr><td>CWE-330 使用不充分的随机数</td><td>-</td><td>A02：2021-加密故障</td><td>275</td><td>218</td><td>493</td></tr><tr><td>CWE-501 违背信任边界</td><td>-</td><td>A04：2021-不安全的设计</td><td>43</td><td>83</td><td>126</td></tr><tr><td>CWE-614 HTTPS 会话中未设置’Secure’属性的敏感 Cookie</td><td>-</td><td>A02：2021-加密故障</td><td>31</td><td>36</td><td>67</td></tr><tr><td>CWE-643 XPath 表达式中数据转义处理不恰当 (XPath 注入)</td><td>-</td><td>A03：2021-注入</td><td>20</td><td>15</td><td>35</td></tr><tr><td>CWE-78 OS 命令中使用的特殊元素转义处理不恰当 (OS 命令注入)</td><td>5</td><td>A03：2021-注入</td><td>125</td><td>126</td><td>251</td></tr><tr><td>CWE-79 在 Web 页面生成时对输入的转义处理不恰当 (跨站脚本)</td><td>2</td><td>A03：2021-注入</td><td>209</td><td>246</td><td>455</td></tr><tr><td>CWE-89 SQL 命令中使用的特殊元素转义处理不恰当 (SQL 注入)</td><td>3</td><td>A03：2021-注入</td><td>232</td><td>272</td><td>504</td></tr><tr><td>CWE-90 LDAP 查询中使用的特殊元素转义处理不恰当 (LDAP 注入)</td><td>-</td><td>A03：2021-注入</td><td>32</td><td>27</td><td>59</td></tr></tbody></table><span id="OSC_h3_21"></span><h3>3.3.2. 问题场景的覆盖</h3><p>Benchmark 用例对每个问题采用: 场景枚举 + 组合的方式完成用例的设计，并通过此方法形成问题的覆盖。</p><p>这里以我们熟悉的：CWE89 SQL 注入问题来说明这种用例的设计方式。用例集中 CWE 89 SQL 注入问题一共有 232 个正例，272 个反例，共计 504 个用例。</p><p>因为 SQL 是注入是通过外部不可信数据，传播到 SQL 脚本执行的位置而导致的安全问题。这个外部数据传播的过程可以分为：</p><ul><li>接收数据</li></ul><p>用例使用了我们常用的从 http 请求中得到外部数据，然后将数据以不同方法存入不同类型的字段。用例中列举了下面 9 种不同的方法。例如放入：字符串、枚举、数组等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604543686840668.png" referrerpolicy="no-referrer"></p><ul><li>数据传递</li></ul><p>用例接收到数据后，使用不同的传递方式，向程序内传递，并对信息采用不同的操作方式进行加工。用例中列举了下面 10 种不同的方法。例如：通过，创建一个新类然后调用函数传递、if 条件表达式、内部类等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604561629143041.png" referrerpolicy="no-referrer"></p><ul><li>问题爆发</li></ul><p>最终数据会拼装成 SQL 语句，并通过不同的调用方式执行。用例中列举了 3 类，28 种不同的执行方式。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604573373250631.png" referrerpolicy="no-referrer"></p><ul><li>场景组合</li></ul><p>得到上面三种基本节点后，通过组合的方式形成用例。下表列举了 CWE89 SQL 注入 272 个反例组合的场景：</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604585829917726.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_22"></span><h3>3.3.3. OwaspBenchmark 用例集的缺点</h3><p>OwaspBenchmark 应为涵盖了 Web 应用的主要安全问题，使用例集基本上成为了 Web 应用安全测试的基本用例集。但它也存在一些缺点。</p><ul><li>用例名只采用了简单的编号方式，从用例看不出测试目标：用例反应的问题、场景、正例、反例这些基本信息，而不得不给每个用例加了一个 xml 文件来说明这些用例的基础信息。</li><li>用例缺少场景的描述，工具测试后，无法得到覆盖场景和非覆盖场景的统计信息，只知道覆盖率。具体哪些场景缺失，要一个个用例去自己分析。</li><li>缺少检测语言语法级别的场景的覆盖，例如 lamda 表达式，工具在数据流的分析过程中，任何一个语法的不适配都会导致分析中断。</li></ul><span id="OSC_h1_23"></span><h1>4. Alipay 测试用例集</h1><span id="OSC_h2_24"></span><h2>4.1. 用例背景</h2><p>针对 xAST 领域缺乏有效衡量技术能力标准的业界痛点，蚂蚁安全团队联合蚂蚁程序分析团队、浙江大学网络空间安全学院的 20 余位专家学者，共同设计了 xAST 评价体系及其测试样本套件 Benchmark，致力于成为应用安全测试工具的「度量衡」。</p><ul><li><p>目标：打造具备行业共识的 xAST 能力评价体系技术标准</p></li><li><p>价值：衡量 xAST 产品技术能力，指引 xAST 技术发展方向，辅助企业产品选型</p></li></ul><span id="OSC_h2_25"></span><h2>4.2. 用例设计和组成方式</h2><p>用例设计的核心思想是：分层设计，降低评价复杂度。</p><p>从底层到上层分成引擎能力、规则能力和产品化能力这三层。对这三层分别设计评价体系和测试样本，既降低了每一层评价的复杂度，又使测试结果可以直接反映问题出在哪一层。</p><p>看的出，用例集的设计者试图希望结合 Juliet、Owaspbenchmark 的优点，在形成一种分层的评估测试方式。来完善前面两个用例集在语法层面的不足。</p><p>目前用例集只推出了一个雏形，还在建设中。</p><span id="OSC_h1_26"></span><h1>5. 理想的测试用例集</h1><p>最后再来总结下，理想的测试用例集应该是怎样的。</p><ul><li>能够从用例的命名上，清楚的反映：测试问题、场景、正例、反例；或从目标函数上明确知道在这个函数内的告警是正确的告警，还是误报；</li><li>能够覆盖业界主要的安全问题，例如：CWE TOP 25、OWASP TOP 10 等常见的问题；</li><li>能够覆盖检测语言的主要语法和语言的主要使用方式；</li><li>能够有一定的场景枚举和组合，以增加测试用例的复杂度，这有点类似 fuzzy 测试了。</li></ul><p>写在最后，测试用例集的结果，只能反映一个工具的基础能力，并不能取代通过实际的工程来打磨检查工具。</p><p>一般的程序员只需要在问题和实现上建立一条通道就好，但程序分析的程序员却需要考虑各种程序员实现问题的可能性。</p><span id="OSC_h1_27"></span><h1>6. 参考</h1><ul><li>SAMATE:<span>&nbsp;</span>https://www.nist.gov/itl/ssd/software-quality-group/samate</li><li>SARD:<span>&nbsp;</span>https://samate.nist.gov/SARD/</li><li>Juliet C/CPP 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/112</li><li>Juliet Java 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/111</li><li>owasp benchmark:<span>&nbsp;</span>https://owasp.org/www-project-benchmark/</li><li>Alipay sast:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falipay%2Fant-application-security-testing-benchmark" rel="nofollow" target="_blank">https://github.com/alipay/ant-application-security-testing-benchmark</a></li></ul><p>&nbsp;</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:01:37 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10433132</guid>
            <link>https://my.oschina.net/u/4526289/blog/10433132</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鸿祎：鸿蒙原生必将成功]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>360 集团创始人、董事长周鸿祎今日在微博宣布，360 浏览器等应用完成了鸿蒙原生核心版本的开发。并表示，未来还会把全线产品转移到鸿蒙生态里。</p><blockquote><p><span style="color:#333333">我在直播里很多次旗帜鲜明地表态，任何情况下都会支持华为，不能只停留在口号。今天我们正式宣布 360 浏览器等应用完成了鸿蒙原生核心版本的开发，未来我们还会把全线产品转移到鸿蒙生态里。我相信鸿蒙会成为中国最大的操作系统，鸿蒙原生必将成功。</span></p></blockquote><p><img height="391" src="https://oscimg.oschina.net/oscnet/up-f5c3b4b96af20fc9564ad022c5e8336ee24.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272979</guid>
            <link>https://www.oschina.net/news/272979</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一个公司到底需要几个 DBA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>前段时间某家公司透露自家有 1000 人的 DBA 团队，一时成为了数据库圈内讨论的焦点。昨天又读到「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDIxNDg5Mg%3D%3D%26mid%3D2247486204%26idx%3D1%26sn%3D179fbefbee62f538f07dfcbc81fe9585%26scene%3D21%23wechat_redirect" target="_blank">DBA 团队的规模应该是什么样的配置</a>」。正好到年底了，不少公司也要做新年的预算，其中就包括 HC 的规划。所以也分享一点想法。</p><p>先明确这里讲的 DBA 指的是专职负责数据库管理的人员，不算还身兼其他职责的人员，也不包括数据库内核开发人员。</p><p>首先 1000 人的 DBA 团队肯定是言过其实的，这也是当初新闻公布后，引起大家讨论的原因。在我们所居住的蓝色星球上，应该还不存在 1000 人规模的 DBA 天团。那么正常一个公司该养几个 DBA 比较合适呢？下面就按照公司的发展阶段进行阐述。</p><h2>&lt; 30 人 - 不需要 DBA</h2><p>公司研发人数在 30 人以下规模时是不需要 DBA 的，通常这个阶段的职责由团队里的后端工程师，DevOps / 平台工程师或者技术负责人来兼职。这个阶段建议无脑选择云数据库托管服务，因为自带开箱即用的运维，监控，备份。至于数据库的日常变更，可以引入工具，也可以选择不引入。如果不引入的话，由技术负责人通过设计评审，代码审核等方式也能应付。</p><h2>30 人 ～ 50 人 - 第一个 DBA 和工具</h2><p>数据库相关工作的并发加大，兼职已经很难应付。同时因为业务开始有起色，所以需要为更长期的数据治理做铺垫。所以这个阶段公司就需要考虑引入专门的 DBA 来负责数据库相关事宜，随着引入第一个 DBA，也要同时考虑引入相关的数据库工具，其中最核心的就是涉及研发流程的数据库变更审核工具。至于究竟在哪个节点引入，一个是看之前兼职同学处理 DBA 事务的占比，50% 是一个零界点。另一个是看整个技术团队高优先级工作项里， 是否超过 50% 都是数据库相关。当然还有一个指标，就是故障数，如果已经连续两个月发生过影响业务的数据库故障，那引入 DBA 就是迫在眉睫了。</p><p>再说一下引入的第一个 DBA 的定位。通常在这个阶段，公司还很难吸引到比较优秀的 DBA，也没有必要。第一个 DBA 不需要构建体系，只要建立起机制。机制分两部分，一部分是数据库运维的常态化，比如优化监控，巡检以及备份。另一部分则是规范数据库访问和变更上线的流程。这两件事情都需要依托工具来落地。前者通常是围绕云平台提供的能力，通过配置或者少量的二开来实现；后者则基本完全依赖于引入工具，业内比较流行的 Archery, Yearning 便是出自 DBA 之手，解决这块的问题。Bytebase 同样也是由兼具研发和 DBA 背景的团队打造的开源产品。</p><p>这个阶段，也需要研发负责人在一旁做策应。因为引入 DBA 和工具，会限制研发的自由度，而 DBA 和研发的诉求点并不一致，DBA 又是新加入的成员。这个时候需要研发负责人从中斡旋，避免双方抵触，产生部门墙。说到底，在这个阶段，仍然是业务绝对优先，所以如果研发以业务优先为理由不愿意配合，DBA 建立的流程工具都能被绕过。</p><p>另一方面研发负责人也要着力培养 DBA 去熟悉业务，帮助他能跟随公司成长到下一阶段。</p><h2>100 人 - 第二个 DBA</h2><p>通常在研发规模达到百人左右时，就必须引入第二个 DBA。这里最重要的是能有一个互备。至于引入的 DBA 定位，如果第一个 DBA 成长起来的话，那第二个 DBA 可以是相对初级的，老人带新人。但如果第一个 DBA 没有跟上公司的成长，那么这时就需要引入一个相对资深的 DBA。这个阶段要开始构建体系，首先要审视当前使用的数据库种类，之前业务发展，可能对于数据库选型并没有做约束，现在就到了决策数据库选型的时候，尽可能统一。另外也要审视使用的数据库工具链，是否需要进行替换。关健就是这两件事情，选对数据库，选对工具。这也是为什么需要一个更资深的 DBA，所谓观千剑而识器。如果是一个相对经验不足的 DBA，在强势的业务研发面前，很难据理力争。这个阶段之后，无论是要换数据库还是相关工具，那都是浩大的工程，绝对比找一个有经验的 DBA 代价要大。</p><p>研发负责人在这个阶段算是基本退出了数据库日常工作，交由这组 DBA 二人转了。</p><h2>&gt; 200 人 - DBA 团队</h2><p>极限操作的话，公司也可以维持 2 个 DBA 的配置很长时间。国内上市公司，千人研发团队，2 个 DBA 配置也不是个例。但 DBA 人数还是和风险挂钩的，这里还是建议按照人员配比，尽量 DBA : 研发的配比不要低于 1:200。业务上了规模后，一个 DBA 但凡一年能帮助公司规避掉一次故障，就能收回人力成本。</p><p>另一方面，到这个阶段势必会出现一系列定制化需求，标准工具往往无法全部满足，所以这个时候也需要 DBA 亲自下场做深度二开。</p><p>不过在公司研发达到 500 人规模前，也要谨慎控制 DBA 团队的扩张。DBA 团队扩充到 5 人后，通常都会走上自研工具链的道路，否则无法支撑团队规模。但这个阶段选择自研道路，往往不会对业务带来增量。因为自研虽然在某些功能点更贴近业务，但从整体的产品体验来说，肯定是远远不如市面上成熟的标品，此消彼长。</p><p>那该如何给 DBA 团队尤其是 DBA 团队负责人提供成长空间呢。这里有两条路径，一是培养 DBA 负责人去超越 DBA 的职能，往职责更大的存储负责人/基础设施负责人方向走；另一条路，是鼓励 DBA 负责人走出公司，在行业内建立起影响力。</p><p>总之就是避免让 DBA 团队自己往前走的太快。虽然数据库在整个研发链路里是一块基石，但它不是枢纽。自研数据库工具链的时机，是要配合公司整体研发平台的自研规划，而且通常是在整体研发平台自研规划基本确立后，再进行数据库相关的规划。</p><h2>&gt; 1000 人 - 中央和地方</h2><p>能走到这步，公司往往已经形成了 BU 编制，这就会牵扯到是否每个 BU 会自建 DBA 团队。这通常就不再是技术问题，而是组织问题了。一个强势的业务 BU 通常都会希望可以有独立的建制，但是往往自己运行一段时间后，又发现招不到/留不住人，然后即使名义上还是独立，实际还是回退到中央集权。国内几家大厂有中央集权的，也有地方自治的。到了这个阶段兵无常势，水无常形。</p><h2>如何评估 DBA 团队的绩效</h2><p>两句话：</p><ul><li>专业的人做专业的事</li><li>善战者无赫赫之功</li></ul><p>地铁在既定的轨道上运行，依然也还是要配备 2 名驾驶员。事前预防，事中止血，事后补救，目前围绕数据库的日常工作，无论是云平台还是第三方工具，还只能承担 co-pilot 的角色，最终还需要 DBA 拍板。希望每个研发都具备数据库常识的理想很丰满，但现实很骨感。面试时虽然都考察了 MVCC 原理的八股文，但真的上了前线，往往连最基本的执行计划也看不懂。</p><h2>总结</h2><p><img src="https://oscimg.oschina.net/oscnet/up-f36de6034e654d8a673cf05664d8e135703.png" alt="file" referrerpolicy="no-referrer"></p><p>新的一年也希望 DBA 们稳如泰山，数据库都平平安安。</p><p><img src="https://oscimg.oschina.net/oscnet/up-07e2c0e2378dffdef4b198c2c7ec24344e0.png" alt="file" referrerpolicy="no-referrer"></p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10433139</guid>
            <link>https://my.oschina.net/u/6148470/blog/10433139</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三星成功验证 CXL 内存与 Red Hat Linux 的互操作性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">三星电子发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.samsung.com%2Fglobal%2Fsamsung-electronics-and-red-hat-partnership-to-lead-expansion-of-cxl-memory-ecosystem-with-key-milestone" target="_blank">公告称</a>，已与 Red Hat 合作，在真实用户环境中成功验证了 CXL (Compute Express Link) 内存操作；此举系业内首次，将进一步扩大其 CXL 生态系统。</span></p><p><span style="color:#000000">该公司表示，他们针对 Red Hat Enterprise Linux 9.3 发行版优化了 CXL 内存，并在 Red Hat 的 KVM 和 Podman 环境中验证了内存识别、读取和写入操作。由此，数据中心客户将无需对现有硬件进行额外调整，即可使用三星 CXL 内存。</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">红帽公司高级副总裁兼亚太区负责人 Marjet Andriesse 称，「三星 CXL 内存扩展器与红帽企业级 Linux 互操作性的成功验证具有重要意义，因为它拓展了 CXL 内存扩展器在基于 IaaS 和 PaaS 的红帽软件中的适用性。这是硬件和软件集成的重要里程碑，为下一代内存开发构建了一个开源生态系统。」</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="317" src="https://oscimg.oschina.net/oscnet/up-902ea73f4e148bd1626fdd7de2c37b4b0dd.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，双方正在合作制定《RHEL 9.3 CXL 内存启用指南》，帮助用户在 RHEL 9.3 上利用三星的 CXL 内存，并在各种用户环境中构建高性能计算系统。</span></p><p><span style="color:#000000">两家公司于 2022 年 5 月首次签署了一份谅解备忘录（MOU），开始在 CXL 上进行合作。合作关系涵盖一系列存储和内存产品，包括 NVMe SSD、CXL 内存、计算内存/存储和结构。</span></p><p><span style="color:#000000">三星执行副总裁兼内存产品规划主管 Yongcheol Bae 在接受 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zdnet.com%2Farticle%2Fsamsung-verifies-cxl-memory-with-red-hat%2F" target="_blank">ZDNet</a> 采访时表示：通过最新的验证，三星将成为业内第一家提供支持 CXL 2.0 的 CXL 模块、开源软件和 CXL DRAM 的公司。双方还将致力于灵活的数据放置和汽车以及其他项目，以实现为 CXL 内存打造强大生态系统的最终目标。</span></p><p><span style="color:#000000">CXL 是一个统一的接口标准，于 2019 年推出，通过 PCIe 接口以比以前更低的延迟和更高的带宽连接各种处理器和内存设备。这样，现有的数据中心就能以低成本提高速度、延迟和可扩展性。</span></p><p><span style="color:#000000">市场研究公司 Yole Group 数据指出，CXL 市场目前估值约为 1400 万美元；且得益于 2024 年底 CXL 2.0 的推出，预计到 2028 年还将增长至 160 亿美元。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</guid>
            <link>https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ClkLog —— 免费、可商用的轻量级完全开源的埋点用户分析系统]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-项目简介" class="anchor" href="https://gitee.com/clklog/clklog#%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B"></a>项目简介</h1><p>ClkLog 是一款记录用户行为分析和画像的免费可商用开源软件，技术人员可快速搭建私有的应用系统。项目基于神策分析 SDK，采用 ClickHouse 数据库对采集数据进行存储，采用前后端分离的方式来实现的访问统计和用户画像分析系统。在这里，你可以轻松看到用户访问网页、APP、小程序或业务系统的行为轨迹，同时也可以从时间、地域、渠道、用户访客类型等多维度了解用户的全方位信息。</p><h1><a id="user-content-核心功能" class="anchor" href="https://gitee.com/clklog/clklog#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"></a>核心功能</h1><ul><li><p><strong>数据采集</strong>：支持网页、小程序、IOS、Android 等多端数据采集</p></li><li><p><strong>流量概览</strong>：提供流量渠道、设备、地域、访客类型多维度分析</p></li><li><p><strong>用户画像</strong>：解析用户唯一 ID，定位追踪用户全生命周期画像</p></li><li><p><strong>数据下载</strong>：支持各项汇总数据、明细数据的下载</p></li></ul><h1><a id="user-content-技术栈选择" class="anchor" href="https://gitee.com/clklog/clklog#%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E6%8B%A9"></a>技术栈选择</h1><ul><li><p><strong>后端</strong>：Redis 、Zookeeper、Kafka 、Flink</p></li><li><p><strong>前端</strong>：vue、vue-element-admin、element-ui 、echarts</p></li><li><p><strong>数据</strong>：Clickhouse</p></li></ul><h1><a id="user-content-示意图" class="anchor" href="https://gitee.com/clklog/clklog#%E7%A4%BA%E6%84%8F%E5%9B%BE"></a>示意图</h1><table><thead><tr><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/1.png" alt="" referrerpolicy="no-referrer"></th><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/2.png" alt="" referrerpolicy="no-referrer"></th></tr></thead><tbody><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/3.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/4.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/5.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/6.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/7.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/8.png" alt="" referrerpolicy="no-referrer"></td></tr></tbody></table><h1><a id="user-content-在线体验" class="anchor" href="https://gitee.com/clklog/clklog#%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C"></a>在线体验</h1><p>演示地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com" target="_blank"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com">https://demo.clklog.com</a></p><h1><a id="user-content-快速接入" class="anchor" href="https://gitee.com/clklog/clklog#%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5"></a>快速接入</h1><p>官方文档：<a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com">https://clklog.com</a></p><h1><a id="user-content-协议许可" class="anchor" href="https://gitee.com/clklog/clklog#%E5%8D%8F%E8%AE%AE%E8%AE%B8%E5%8F%AF"></a>协议许可</h1><ul><li><p>开源协议：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.gnu.org%2Flicenses%2Fagpl-3.0.en.html">AGPL V3.0</a></p></li><li><p>免费使用：Clklog 遵循 AGPL V3.0 开源许可证, 使用的组织或个人在复制、分发、转发或修改时请遵守相关条款，不得移除 ClkLog 相关版权标识进行。如有违反，ClkLog 将保留对侵权者追究责任的权利。</p></li><li><p>商业使用：请联系客服进行细节咨询</p></li></ul><h1><a id="user-content-联系我们" class="anchor" href="https://gitee.com/clklog/clklog#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>联系我们</h1><ul><li><p>客服邮箱：<a href="mailto:info@clklog.com">info@clklog.com</a></p></li><li><p>客服手机：16621363853</p></li><li><p>客服微信：opensoft66</p></li><li><p>客服二维码：<img title="" src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/contactqrcode.jpg" alt="" width="120" referrerpolicy="no-referrer"></p></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/clklog/clklog</guid>
            <link>https://gitee.com/clklog/clklog</link>
        </item>
        <item>
            <title>
                <![CDATA[华为云多个开源项目通过信通院可信认证]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>2023</span></span></span><span><span><span>年 12 月 21 日，由中国信息通信研究院主办的《2024 中国信通院 ICT 深度观察报告会》开源和软件供应链分论坛上重磅发布了可信开源评估结果。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云共计 3 个开源社区、5 个开源项目通过可信开源社区、可信开源项目认证，其中，三个开源社区：KubeEdge、Karmada、Volcano 在社区运营、社区治理与社区开发能力方面均获得了先进级评级。</span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px; text-align:center"><img height="2594" src="https://oscimg.oschina.net/oscnet/up-8c3992cba052f6407c45af867bb5b58ff96.jpg" width="3892" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:center">&nbsp;</p><span id="OSC_h2_1"></span><h2><span><span><span><strong><span><span><span>3</span></span></span></strong><strong><span><span><span>大开源社区通过可信开源社区 4 大专项测评，获先进级评级</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云 3 大开源社区（KubeEdge、Volcano、Karmada）顺利通过信通院可信开源社区成熟度能力检验，并在社区运营、社区治理与社区开发能力方面获得先进级社区评级，该认证为中国信通院可信开源治理能力成熟度认证的最高等级。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="790" src="https://oscimg.oschina.net/oscnet/up-42e95f4a1bd080702470d5d9ffe006ece7f.jpg" width="563" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信开源社区评估从基础设施、社区治理、社区运营与社区开发等角度，梳理开源社区应关注的内容及指标，聚焦于如何构建活跃的开发者生态与可信的开源社区。先进级评级是可信开源社区评估的最高级别，相较于基础级和增强级而言，先进级要求社区能够针对开源社区进行更加专业化和自动化等管理。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>先进级认证不仅是对华为云 3 大开源社区在开源软件的开发流程、产生的技术贡献、贡献者管理、社区氛围营造等维度结果的认可，更是对开源社区工作的肯定，未来这些社区将会持续加大技术研发投入，与社区用户、合作伙伴共建开源生态，持续创新。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="1864" src="https://oscimg.oschina.net/oscnet/up-f9465e80d1c92d3bb6719470eea23494dbf.jpg" width="4096" referrerpolicy="no-referrer"></p><span id="OSC_h2_2"></span><h2><span><span><span><strong><span><span><span>5</span></span></span></strong><strong><span><span><span>个开源项目通过中国信通院可信开源项目测评</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云一键构建分布式云原生平台 Kurator、云原生无代理服务网格 Sermant、时序数据库 openGemini、企业级前端组件库 DevUI、OpenTiny Vue 均已通过中国信通院的可信开源项目认证检测，并获得可信开源项目评估证书。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="829" src="https://oscimg.oschina.net/oscnet/up-f237b87e138d721a6a69683b4b3edcc989f.jpg" width="582" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信开源项目重点考察开源项目在许可证合规性、软件安全性、软件活跃度、技术成熟度、服务支持力和软件兼容性六个方面的能力。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>通过可信开源项目认证，意味着以上这些项目通过了业界开源项目认证标准的检验，项目具有高质量、高可靠性、高安全性和高可维护性，这些项目可以为用户提供更好的开源软件使用体验。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>本次通过可信认证的开源社区与开源项目目前已广泛应用于各行各业，通过不断完善开发者生态，提升产品易用性，为企业或个人提供更多的选择和机会，帮助个人或企业更好的利用开源技术提升业务效率和创新能力。</span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6410005/blog/10332529</guid>
            <link>https://my.oschina.net/u/6410005/blog/10332529</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[你好！Apache Seata]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>北京时间 2023 年 10 月 29 日，分布式事务开源项目 Seata 正式通过 Apache 基金会的投票决议，<strong>以全票通过的优秀表现正式成为 Apache 孵化器项目！</strong></p><p>根据 Apache 基金会邮件列表显示，在包含 13 个约束性投票 (binding votes) 和 6 个无约束性投票 (non-binding votes) 的投票全部持赞同意见，无弃权票和反对票，投票顺利通过。</p><p><em>「Welcome&nbsp;Seata&nbsp;to&nbsp;the&nbsp;ASF&nbsp;incubator.」</em></p><p><img src="https://oscimg.oschina.net/oscnet/up-240076d1009f584bb6fe458f33fe0bedb6f.png" alt="" referrerpolicy="no-referrer"></p><h2>项目历史</h2><ul><li><p>**早在&nbsp;**2007 年****阿里巴巴和蚂蚁集团内部开发了分布式事务中间件，用于解决电商、支付、物流等业务场景中应用数据的一致性问题。内部项目分别被称为 TXC (Taobao Transaction Constructor)/XTS (eXtended Transaction Service)，该项目几乎在每笔订单的交易支付链路几乎都有使用。</p></li><li><p><strong>自 2013 年以来</strong></p><p>阿里巴巴和蚂蚁集团已在阿里云和金融云上向企业客户分别发布了分布式事务云服务产品 GTS(global transaction service)/DTX(Distributed Transaction-eXtended)，在各个行业领域积累了大量用户。</p></li><li><p><strong>2019 年 1 月</strong></p><p>阿里巴巴集团正式开源了该项目，项目命名为 Fescar (Fast &amp; Easy Commit and Rollback)）。项目开源以来，它受到了众多开发人员的热烈欢迎和赞扬，开源一周收获了超 3k star，曾一度蝉联 GitHub Trending 排行榜第一。</p></li><li><p><strong>2019 年 4 月</strong></p><p>蚂蚁集团数据中间件团队加入了 Fescar 社区。为了创建一个更加开放和中立的社区，Fescar 改名为 Seata（Simple Extensible Autonomous Transaction Architecture），代码仓库从 Alibaba organization 迁移到其独立的 Seata organization。</p></li><li><p><strong>2019 年 12 月</strong></p><p>Seata 开源项目正式发布 1.0.0 GA 版本，标志着项目已基本可生产使用。</p></li><li><p><strong>2023 年 10 月</strong></p><p>为了更好的通过社区驱动技术的演进，阿里和蚂蚁集团正式将 Seata 捐赠给 Apache 基金会，提案通过了 Apache 基金会的投票决议。</p></li></ul><h2>项目现状</h2><ul><li>Seata 开源 4 年来主项目在 GitHub&nbsp;<strong>累计收获 star 超 24k，累计发布版本超 40 次，参与代码贡献人数超 300 人。</strong></li><li>Seata 被各领域企业/组织广泛应用于解决分布式事务问题，在 GitHub「Used by」超过 3.1k 的仓库依赖，金融领域企业纷纷试点使用。</li><li>Seata 对于市面上主流的关系数据库，RPC 框架做了广泛的支持，同时被许多第三方社区做了主动和被动集成。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-c486e4329d5fe25e8f7bbd6d4290fdf4740.png" alt="" referrerpolicy="no-referrer"></p><h2>项目特性</h2><ul><li>提供 AT、TCC、Saga 和 XA 事务模式，支持事务模式的混用，满足不同业务场景的数据一致性需求。</li><li>提供 Java、Golang 等多语言 SDK 支持。</li><li>支持了 Apache Dubbo、Spring Cloud Alibaba、gRPC、Motan、sofaRPC、HttpClient 等服务调用框架。</li><li>支持了 MySQL、MariaDB、Oracle、PostgreSQL、OceanBase、TiDB、SQLServer、PolarDB、Dameng 等关系数据库无侵入 AT 事务模式的支持。</li><li>支持基于多种关系数据库、Redis 存储的存算分离的集群模式，支持基于 Raft 的存算不分离集群模式，满足不同运维场景下的集群高可用需求。</li><li>支持了市面上主流的注册中心和配置中心。</li><li>提供了丰富的插件化扩展机制，支持用户自定义 SDK 侧 30 多个扩展点。</li></ul><h2>致谢</h2><p>感谢所有曾经参与到社区的贡献者。</p><p>特别感谢愿意给 Seata 提供指导的 champion 和 mentors。</p><p>Champion：</p><ul><li>Sheng&nbsp;Wu(wusheng&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li></ul><p>Mentors：</p><ul><li>Sheng&nbsp;Wu(wusheng&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li><li>Justin&nbsp;Mclean(justin&nbsp;at&nbsp;classsoftware&nbsp;dot&nbsp;com)</li><li>Huxing&nbsp;Zhang(huxing&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li><li>Heng&nbsp;Du(duhengforever&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li></ul><p>我们坚信将 Seata 引入 ASF 可以推动更强大、更多元化的开源社区的发展。我们将努力践行 Apache Way，同时欢迎更多的公司和个人加入到开发者队伍中来，让 Seata 社区更加健康和健壮的成长，让更多人享受开源带来的技术红利！</p><h2>项目寄语</h2><p>四年前，我们秉持开源开放的理念，在社区写下了第一行代码。回顾过去四年，Seata 开源社区的技术演进和社区运营就像一次创业旅程。这四年我们取得了不菲的成绩，Seata 的出现快速占领了开发者的心智，<strong>成为了分布式事务领域的事实标准，在理论实践中我们牵头推动了行业标准的建立。</strong> Seata 捐赠给 ASF 是我们迈向更多元化社区治理和全球化发展的重要里程碑。</p><p><em>--&nbsp;季敏｜Seata&nbsp;开源社区创始人</em></p><p>阿里云是开源的受益方，也在持续贡献开源，继 Apache RocketMQ、Apache Dubbo 之后，我们将 Seata 也捐赠给了 ASF。相信 Seata 的捐赠，将进一步推动云原生微服务领域的技术发展。一直以来，阿里云通过投入开源，建立技术标准，帮助千万开发者使用更先进的云原生技术，让社区生态和云之间建立起非常好的连接，助力企业和云协同发展。</p><p><em>--&nbsp;丁宇｜阿里云云原生应用平台负责人</em></p><p>分布式事务是微服务架构最复杂，技术水位最深的部分，阿里&amp;蚂蚁在开源捐献之前申请了数十个专利，开源之后在社区推动下高速发展，<strong>吸收 70%+ 外部开发者，大幅降低分布式的复杂度，扩展了分布式事务的生态；</strong> 未来随着微服务高速发展，随着数据一致性要求越来越高，相信分布式事务会发挥越来越大的作用！</p><p><em>-- 李艳林｜阿里云微服务团队负责人</em></p><p>Seata 是一款由阿里巴巴和蚂蚁集团共同参与开发的分布式事务解决方案，广泛应用于两家公司的内部系统。它的突出特点在于高性能和简单易用，为微服务架构下的分布式事务处理提供了高效且可靠的解决方案。我们坚信将 Seata 捐赠给 ASF，社区将会得到更好的发展，能为更多的开发者提供更优质的服务。同时，我们也期待更多的开发者能够加入到 Seata 的开发中来，共同推动分布式事务解决方案的进步和发展。</p><p><em>--&nbsp;谢吉宝｜阿里云云原生中间件负责人</em></p><p>恭喜 Seata 全票通过进入 Apache 孵化器！2019 年，蚂蚁集团和阿里集团携手一起开源了分布式事务框架 Seata，各自贡献了内部分布式事务的最佳实践。经过了四年的发展，Seata 早已成为一个被社区广泛认可的分布式事务项目，大量的贡献者在 Seata 里面贡献代码，丰富了 Seata 的各种功能，很多用户在自己的环境中使用 Seata，给 Seata 带来了大量的实践落地案例。<strong>Seata 进入 Apache 孵化器不是终点，而是新的起点，</strong> 期待 Seata 后面能够持续按照 The Apache Way 的方式运作，以更加中立的姿态，吸引更多的贡献者和用户，走向更加宽阔的未来。</p><p><em>--&nbsp;黄挺｜蚂蚁集团中间件负责人</em></p><p>非常高兴 Seata 这个阿里和蚂蚁合作多年的开源项目进入 Apache 基金会进行孵化，相信 Apache Way 会帮助项目更加社区化、服务更多人，也期待 Apache 的 Seata 能为社区带来更多微小而美好的改变。对于蚂蚁开源来说，Seata 进入 Apache 孵化也是一个重要的里程碑，希望未来有更多蚂蚁团队发起的项目也能走上 Apache 之路。</p><p><em>--&nbsp;王旭｜蚂蚁开源技术委员会副主席</em></p><p>很高兴能够作为 Champion 和 Mentor ，帮助 Seata 社区进入到 Apache 孵化器。Seata 项目在过去的 4 年，在分布式事务领域取得了长足的进度，并以开放的心态面向社区，并一步步的做好走进 Apache 孵化器的各项准备工作。希望在未来的一到两年的实践中，项目成员能够很好的学习以及融入 ASF 的文化中，并进一步增加社区的多元化和国际化。进入孵化器是一个里程碑，更是一个新的开始，祝贺 Seata 项目。</p><p><em>--&nbsp;吴晟｜Apache&nbsp;软件基金会会员、Apache&nbsp;软件基金会首位中国董事、Apache&nbsp;软件基金会孵化器 PMC 成员和项目导师</em></p><p>我关注 Seata 这个项目关注很长时间，从 Fescar 到 Seata，该项目从诞生之初就保持了旺盛的生命力，在近几年社区和逐步壮大，逐步成长为分布式事务这个领域杰出的一个开源项目，很高兴看到 Seata 加入 Apache 基金会进行孵化，相信 Seata 今后会以更加中立的身份，吸引更多的贡献者，一群走一起走可以走的更稳更远。很荣幸以导师的身份陪伴 Seata 的孵化之旅，预祝 Seata 一切顺利！&nbsp;</p><p><em>--&nbsp;张乎兴｜Apache&nbsp;基金会成员、Apache Tomcat&nbsp;和&nbsp;Apache Dubbo&nbsp;社区&nbsp;PMC&nbsp;成员、Apache Seata(incubating)&nbsp;导师</em></p><p>Seata 作为在阿里跟蚂蚁久经验证的分布式事务框架，不仅经历了历年海量流量的验证，而且在开源之后迅速成长为国内分布式事务领域的事实标准。很高兴看到 Seata 成为 Apache 基金会孵化项目，作为一个新的开始，希望 Seata 能够吸引更多的开发者，打磨更多的场景，行稳致远，相信在众多开发者的共同努力下，Seata 一定能够成为数据与应用之间的坚实桥梁。&nbsp;</p><p><em>--&nbsp;杜恒｜ASF member、Apache RocketMQ PMC member</em></p><p>Seata 作为分布式事务协调器，是微服务架构中最重要的独立组件之一，也是整个阿里巴巴微服务领域最精华的部分之一。Seata 项目从开源以来就受到了广泛的开发者支持，而现在它将进入 Apache 基金会孵化，我相信会在 Apache Way 开放的文化帮助下，Seata 项目将继续成为微服务架构中的一颗明星，为我们带来更多便利和创新。</p><p><em>--&nbsp;王小瑞｜AutoMQ&nbsp;联合创始人&nbsp;&amp;&nbsp;CEO、Apache RocketMQ&nbsp;作者、PMC Chair</em></p><p>在分布式、微服务领域，Seata 绝对占得重要的一席，它开创性的创造了多种事务模式。Dubbo &amp; Spring Cloud Alibaba 一直和 Seata 有深度的集成与合作，我本人也与作者季敏、社区核心成员有过多次深入交流，<strong>这是一个有技术追求、有责任心、充满活力的开源社区。</strong> 非常高兴见证 Seata 加入 ASF 大家庭，开启新的旅程，祝一切顺利。</p><p><em>--&nbsp;刘军｜Apache Dubbo PMC Chair、Spring Cloud Alibaba&nbsp;负责人</em></p><p>分布式事务一直是一个被大众敬而远之，视而不见却实际存在的问题,四年前 Seata 将业界对待分布式事务的「鸵鸟心态」转为轻松面对，将一个业界最难攻克的问题，以一种标准化、无侵入、低成本的方式引进，<strong>目前登记在册已有数百家企业，覆盖各式各样的业务场景。</strong> 如果说四年前 Seata 是一粒种在这个领域的种子，那么目前已经枝繁叶茂了，相信捐赠给 ASF 后更加的中立与开放,吸引更多开发者共同建设，共同演进分布式事务领域的未来技术架构，将这颗已经枝繁叶茂的大树做到硕果累累。</p><p><em>--&nbsp;陈健斌｜Apache Seata（incubating）PPMC&nbsp;成员</em></p><p>作为分布式事务领域的重要项目，Seata 自诞生以来，一直致力于解决微服务架构下的数据一致性问题，<strong>帮助开发者构建高性能、易扩展、易使用的分布式应用。</strong> 现在，Seata 即将踏上新的征程。我们相信 Seata 在捐赠给 ASF 这个大家庭后，将会得到更广泛的关注和使用，也相信在未来的日子里，Seata 将会为更多的开发者解决分布式事务的难题。</p><p><em>--&nbsp;王良｜Apache Seata（incubating）PPMC&nbsp;成员</em></p><p>Seata 作为一个强大而稳定的开源分布式事务解决方案，为广大开发者在分布式事务的场景下，提供了极大的帮助和便利。贡献给 Apache 将进一步推动项目发展和全球社区的参与度。祝愿在 Apache 的托管下，能够不断发展，更加中立化，标准化，助力全球更多的开发者构建可靠的分布式事务业务。</p><p><em>--&nbsp;雷志远｜Apache Seata（incubating）PPMC&nbsp;成员</em></p><p>作为一名中间件老兵，有幸见证：微服务浪潮下，源自国内的分布式事务中间件从阿里、蚂蚁内部创新孵化，到商业化，再到开源，一步步走向更广阔的天地，产生更大的价值。相信，捐赠给 ASF 将让 SEATA 成为世界上更多「苦分布式事务久矣」的开发者们的解药！</p><p><em>--&nbsp;申海强｜Apache Seata（incubating）PPMC&nbsp;成员、前阿里分布式事务中间件核心成员</em></p><p>有幸跟随着这个项目从 Fescar 到 Seata 再到现在捐献给 Apache 基金会，见证了在这四年时间里一间又一间的企业因为 Seata 而解决了分布式事务的难题。现在 Seata 站在了全新的起点上将以开放、包容的姿态去面对每一个用户，悉心聆听每一个声音，开拓出这条能够通往全球的道路。</p><p><em>--&nbsp;张嘉伟｜Apache Seata(incubating)&nbsp;PPMC&nbsp;成员</em></p><p>非常高兴看到 Seata 成为 Apache 孵化项目，这定会是分布式事务领域的标杆解决方案。从最初的 Fescar 到 Seata，我与你一路相伴，让我们一起努力，期待 Seata 蜕变成 Apache Seata。</p><p><em>--&nbsp;吴江坷｜Apache Seata（incubating)PPMC&nbsp;成员</em></p><p>在微服务开发模式下，分布式系统的数据一致性常常成为系统的难题。Seata 开源以来，社区积累了各种事务模式解决方案和丰富的用户使用案例。非常高兴 Seata 项目能加入 Apache 基金会，社区将更加开放和多元化，将吸引更多的提交者，帮助更多的用户，项目成为分布式事务的事实标准。</p><p><em>--&nbsp;王欣｜Apache Dubbo&nbsp;社区&nbsp;PMC&nbsp;成员、Apache Seata（incubating）PPMC&nbsp;成员</em></p><h2>写到最后</h2><p>为促进分布式事务技术的普及和实践，增进 Apache Seata（incubating）使用者的交流与学习，我们将定期邀请业内资深的技术专家，分享实战经验。</p><p>欢迎订阅 <a href="https://www.oschina.net/action/GoToLink?url=mailto%3Adev-subscribe%40seata.apache.org" target="_blank">dev-subscribe@seata.apache.org</a> 邮件组，关注 Apache Seata（incubating）社区技术发展。</p><p>Seata 官网：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseata.io%2Fzh-cn%2F" target="_blank">https://seata.io/zh-cn/</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10419504</guid>
            <link>https://my.oschina.net/u/3874284/blog/10419504</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[dubbo-go v3.2.0 -alpha 版本预览]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><em>作者：王宇轩， Apache Dubbo Committer</em></p><p>随着 Dubbo3 在云原生微服务方向的快速发展，Dubbo 的 go 语言实现迎来了 Dubbo3 版本以来最全面、最大幅度的一次升级，这次升级是全方位的，涉及 API、协议、流量管控、可观测能力等。</p><p>总的来说，新版本的 dubbo-go：</p><ul><li><strong>全面升级 Triple 协议，</strong> 兼容 gRPC、标准 HTTP 客户端，提供简单明了的 API 用于编写 RPC server 与 client，解决组件间的基本通信问题。</li><li><strong>针对微服务场景，提供了完善的服务治理能力，</strong> 这包括配置管理、可观测性、流量管控规则、生态集成与适配等的全面升级。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-1ba6bcbccf62c5e941408b62bab31e2ff20.png" alt="" referrerpolicy="no-referrer"></p><h2>全新升级的 Triple 协议</h2><p>基于 dubbo-go 实现的 Triple 协议，你可以轻松编写浏览器、gRPC 兼容的 RPC 服务，并让这些服务同时运行在 HTTP/1 和 HTTP/2 上。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c2f770e1d49c85a280727a64e462490922a.png" alt="" referrerpolicy="no-referrer"></p><p>如上图所示，你可以使用 "http+json" 的标准形式访问 dubbo-go 发布的后端 triple 服务，基于这一特性， 我们可以在 dubbo 客户端在浏览器页面、移动设备上访问后端服务，使用标准 cURL 工具访问服务，也可以让比如 Spring 体系的应用轻松的调通 Dubbo 服务。</p><p>由于 Triple 协议完全兼容 gRPC 协议，Dubbo 后端服务有可以直接调通标准的 gRPC 服务，它们之间可以无缝的互通，不论是 unary 还是 streaming 通信模式。</p><h3>发布一个 triple rpc 服务</h3><p>为了体验升级后的 triple 协议，我们接下来会尝试启动一个 dubbo-go server，并发布一个基于 triple 协议的服务。</p><p>创建一个新的 server 并启动 server，它将在指定的端口监听 triple 协议请求。</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServerProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50051),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><h3>cURL 访问服务</h3><p>Triple 服务启动完成之后，最简单方式是使用 HTTP/1.1 POST 访问服务，参数则作以标准 JSON 格式作为 HTTP 负载传递。如下是使用 cURL 命令的访问示例：</p><pre><code>curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50051/greet.GreetService/Greet
</code></pre><p>Triple 协议的一项重大升级是支持标准 http 工具直接访问，通过 cURL 可以极大的降低 dubbo-go 服务的测试验证、前端接入成本。</p><h2>简单明了的 API</h2><p>Dubbo Go SDK 支持使用 IDL 或编程语言特有的方式定义服务，并提供一套轻量的 API 来发布或调用这些服务。在上一节的示例中，我们已经看到了部分 dubbo-go API 的使用方式，接下来，让我们更仔细全面的看一下新版本的 API 设计。</p><h3>RPC Server 与 Client</h3><p>对于一些 RPC 通信的场景，开发者只需要使用 dubbo-go 编写一个最简单的 RPC server 或者 RPC client，这在新版本 dubbo-go 中只需要几行代码即可完成。</p><p>通常，我们会使用 Protocol Buffer (IDL) 来定义一个 Dubbo 服务。</p><pre><code>syntax = "proto3";
package greet;

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}
</code></pre><p>使用 Protocol Buffers Compiler 从 IDL 生成 stub 代码（篇幅关系，我们不在此展示，具体请参见官网 dubbo-go 快速开始）。接下来，我们实现 greettriple.GreeterClient 接口并提供自定义服务实现。</p><pre><code>type GreeterServer struct {
}

func (s *GreeterServer) SayHello(ctx context.Context, in *greet.HelloRequest) (*greet.User, error) {
  return &amp;greet.User{Name: "Hello " + in.Name, Id: "12345", Age: 21}, nil
}
</code></pre><p>以下是一个简单的 RPC server 示例，执行协议信息，并注册服务到 server 中：</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServer_Protocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><p>如前面 Triple 协议一节所述，你可以使用 cURL 直接测试以上 server 服务运行正常。与此同时，对应的 RPC client 示例如下：</p><pre><code>func main() {
  // for the most brief RPC case
  cli, err := client.NewClient(
    client.WithURL("tri://127.0.0.1:50052"),
  )
  if err != nil {
    panic(err)
  }
  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  common.TestClient(svc)
}
</code></pre><h3>微服务开发</h3><p>如果你正在开发微服务应用，那么除了 RPC 通信之外，你通常还需要为应用配置一些服务治理能力，比如 retistry 注册中心、配置中心、可观测能力等。</p><p>以下展示了如何使用 dubbo-go 开发一个微服务应用。</p><p>首先，创建一个代表微服务的应用 Server，将服务注册给它，添加注册中心等服务治理配置。</p><pre><code>
func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
    // create a server with registry and protocol set above
  srv, err := ins.NewServer()
  if err != nil {
    panic(err)
  }
    // register a service to server
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
    // start the server
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><p>其中，Instance 是我们在新版本中引入的全局配置，你可以将所有微服务全局配置在这里进行初始化。这里，我们设置了微服务通信协议 protocol 和注册中心 registry，如以下代码片段所示：</p><pre><code>ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
        registry.WithZookeeper(),
        registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
        protocol.WithTriple(),
        protocol.WithPort(50052),
    ),
)
</code></pre><p>接下来的操作就非常简单明了了，我们创建一个 server，将服务注册给它并启动，如下所示。如果有更多的服务，则可以依次注册到 server 后再启动。</p><pre><code>// create a server with registry and protocol set above
srv, err := ins.NewServer()
// register a service to server
if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
}
// start the server
if err := srv.Serve(); err != nil {
    panic(err)
}
</code></pre><p>以上就是一个微服务应用的基本开发过程，如果你的微服务应用要调用一些远程 Dubbo 服务，那么你只需要参照以下方式创建一个 client 就行了。</p><p>下面的代码示例创建了一个 client，紧接着生成了一个 GreetService 远程服务代理，之后，就可以像调用本地方法一样调用远端 Dubbo 服务了。client 将基于注册中心实现 server 实例的自动发现并自动为流量应用负载均衡策略。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
  )
  
  // configure the params that only client layer cares
  cli, err := ins.NewClient()
  if err != nil {
    panic(err)
  }

  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  resp, err := svc.Greet(context.Background(), &amp;greet.GreetRequest{Name: "triple"})
  if err != nil {
    return err
  }
  logger.Infof("TRIPLE unary call resp: %s", resp.Greeting)
}
</code></pre><h2>企业级服务治理能力</h2><h3>动态配置</h3><p>除了 API 模式之外，Dubbo-go 支持基于配置文件驱动的编码方式，这对于一些更大规模的微服务开发场景非常适用。在这种模式下，我们将 registry、protocol 等组件配置，甚至包括服务声明等都放在 dubbogo.yml 文件中，框架会在启动过程中完成配置文件加载。</p><p>以下是一个基于 dubbogo.yml 的微服务应用的开发示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-428c365aca1834e8772eaabd7bdbe8c423d.png" alt="" referrerpolicy="no-referrer"></p><p>其中，server.go 定义如下：</p><pre><code>func main() {
  greettriple.SetProviderService(&amp;GreeterServiceImpl{})
  if err := dubbo.Load(); err != nil {
    panic(err)
  }
}
</code></pre><p>dubbogo.yml 示例内容如下：</p><pre><code>dubbo:
  application: # 应用信息，服务启动后会将相关信息注册到注册中心，可被客户端从 url 中识别
    name: myApp
  registries:
    nacos:
      protocol: nacos # 注册中心选择 nacos 
      address: 127.0.0.1:8848 # nacos ip
      group: DEFAULT_GROUP # nacos group, 默认 DEFAULT_GROUP
      namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1 # nacos namespaceID, should be created before. 默认 public
      username: abc
      password: abc
  protocols:
    dubbo:
      name: tri
      port: 20000
  provider:
    services:
      UserProviderWithCustomGroupAndVersion: # 接口三元组：接口名、版本号、分组。client 和 server 需要保持一致。
        interface: org.apache.dubbo.UserProvider.Test # 接口名必填
        version: myInterfaceVersion # 默认为空
        group: myInterfaceGroup # 默认为空
</code></pre><p>可以看到相比于之前的 API 编码方式，这里的 server.go 只有两行代码，dubbo.Load() 会完成所有配置的自动组装并启动相关组件，我们只需要在启动应用时指定 export DUBBO_GO_CONFIG_PATH=$ABSOLUTE_PATH/conf/dubbogo.yml 即可。</p><h3>可观测性</h3><p>自 3.2.0 版本开始，dubbo-go 重点升级了内置 metrics 指标采集能力，提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合。</p><p>dubbo-go 内置 metrics 指标导出到 Prometheus + Grafana 体系的能力，以下是 dubbo-go v3.2.0 示例在 Grafana 的监控效果图，具体示例我们将与随后发布在 dubbo-go-samples/metrics。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d75533206a38fc2219b6f61e4a677d4d907.png" alt="" referrerpolicy="no-referrer"></p><h3>流量管控</h3><p>Dubbo 提供了丰富的流量管控策略：</p><ul><li><strong>地址发现与负载均衡，</strong> 地址发现支持服务实例动态上下线，负载均衡确保流量均匀的分布到每个实例上。</li><li><strong>基于路由规则的流量管控，</strong> 路由规则对每次请求进行条件匹配，并将符合条件的请求路由到特定的地址子集。</li></ul><p>服务发现保证调用方看到最新的提供方实例地址，服务发现机制依赖注册中心 (Zookeeper、Nacos、Istio 等) 实现。在消费端，Dubbo 提供了多种负载均衡策略，如随机负载均衡策略、一致性哈希负载、基于权重的轮询、最小活跃度优先、P2C 等。</p><p>Dubbo 的流量管控规则可以基于应用、服务、方法、参数等粒度精准的控制流量走向，根据请求的目标服务、方法以及请求体中的其他附加参数进行匹配，符合匹配条件的流量会进一步的按照特定规则转发到一个地址子集。以下是 dubbo-go 流量管控规则可以实现的一些具体管控场景示例：</p><ul><li>基于权重的比例流量分发</li><li>灰度验证</li><li>金丝雀发布</li><li>按请求参数的路由</li><li>同区域优先</li><li>超时时间调整</li><li>重试</li><li>限流降级</li></ul><p>以下是一个基于 dubbo-go 实现的全链路灰度示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-5db7bb3a33e5312c6b284dee83c2f07e978.png" alt="" referrerpolicy="no-referrer"></p><p>以下是一个基于 dubbo-go 实现的按比例流量转发示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-feff2328b1b30e38c9f80fedf30ef7d4849.png" alt="" referrerpolicy="no-referrer"></p><p>关于 dubbo-go 流量管控，我们以一个商城系统提供了一个完整的 demo 示例，感兴趣的读者可以参考详细信息：</p><ul><li>流量管控规则详情 <strong>[</strong><strong>1]</strong></li><li>流量管控商场示例解读 <strong>[</strong><strong>2]</strong></li></ul><h3>生态</h3><p>dubbo-go 总体上遵循框架内核+插件的的设计理念，左侧的框架内核定义了 dubbo-go 作为微服务框架的一些核心概念，右侧的插件部分则提供了核心概念扩展实现。</p><p><img src="https://oscimg.oschina.net/oscnet/up-130d4ae7744867b2043dfa8d36fc953563e.png" alt="" referrerpolicy="no-referrer"></p><p>框架内核，可分为 4 个层次，从上到下依次为：</p><ul><li><p><strong>API 层</strong></p><p>dubbo-go 同时支持基于 IDL、interface/struct 的服务契约定义，兼顾跨语言与易用性诉求；支持基于纯 yaml 文件的微服务配置模式；提供了同步、异步、单次 (unary)、流式 (streaming) 等 RPC 通信与编码模型。</p></li><li><p><strong>服务治理层</strong></p><p>dubbo-go 内置了多维度的服务治理能力抽象，确保满足微服务开发与集群治理的核心诉求，这包括地址发现（Service Discovery）、负载均衡（Load Balancing）、可观测指标（Metrics）、流量管控（Traffic Management）、全链路追踪（Tracing）等。</p></li><li><p><strong>RPC 协议层</strong></p><p>dubbo-go 实现的最核心的 RPC 协议是 - triple 协议，triple 可同时工作在 http1/2 之上 (支持 CURL 直接访问)，兼容 gRPC；从设计上，dubbo-go 还提供了多协议发布服务的支持，你可以在一个进程内同时发布 triple、dubbo2、rest、jsonRPC 等多种不同通信协议的服务。</p></li><li><p><strong>传输层</strong>支持 HTTP1/2、TCP 传输层，兼顾性能与通用性，同时支持多种序列化方式。</p></li></ul><p>插件体系极大的丰富了 dubbo-go 功能与生态，社区内置提供了大量的内置扩展实现，同时，开发者可以非常容易的根据需求增加扩展实现。以下是一些典型的插件定义：</p><ul><li><p><strong>Protocol</strong></p><p>dubbo-go 基于 protocol 插件内置提供了 triple、dubbo2、rest 等协议支持，通过扩展 protocol 可以为 dubbo-go 扩展更多协议。</p></li><li><p><strong>Service Discovery</strong></p><p>支持 Nacos、Zookeeper、Polaris 等主流注册中心集成。</p></li><li><p><strong>Traffic Management</strong></p><p>dubbo-go 支持 Dubbo 体系定义的流量规则，可以实现在运行期动态的调整服务行为如超时时间、重试次数、限流参数等，通过控制流量分布可以实现 A/B 测试、金丝雀发布、多版本按比例流量分配、条件匹配路由、黑白名单等。</p></li><li><p><strong>Metrics</strong></p><p>提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合。</p></li><li><p><strong>Logging</strong></p><p>提供通用的日志采集接口定义，内置 Zap、Logrus 支持。</p></li><li><p><strong>Tracing</strong></p><p>提供分布式链路追踪能力，通过此插件扩展可接入 Zipkin、Jaeger、Skywalking 等链路追踪系统。</p></li></ul><h2>总结</h2><p>dubbo-go 3.2.0 的首个 alpha 版本将于 11 月底发布，本文是发版前的抢先预览，感兴趣的读者也可以访问源码尝鲜：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%2Ftree%2Ffeature-triple%2Fprotocol%2Ftriple%2Finternal" target="_blank">https://github.com/apache/dubbo-go/tree/feature-triple/protocol/triple/internal</a></em></p><p>接下来，我们将持续推进 3.2.0 版本迭代并计划与 2 月份发布正式稳定版本，详细 Roadmap 请关注项目仓库：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go" target="_blank">https://github.com/apache/dubbo-go</a></em></p><p>社区期待 Go 语言相关开发者的加入，可搜索关注&nbsp;「apachedubbo」&nbsp;微信公众号并回复 「dubbogo」 接受邀请，加入官方社群组织。</p><p><strong>相关链接：</strong></p><p>[1]&nbsp;流量管控规则详情</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fcore-features%2Ftraffic%2F" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/core-features/traffic/</a></em></p><p>[2]&nbsp;流量管控商场示例解读</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Ftasks%2Ftraffic-management%2F" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/tasks/traffic-management/</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10422864</guid>
            <link>https://my.oschina.net/u/3874284/blog/10422864</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin-IDE 版本更新，旧貌换新颜]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#000000">deepin-IDE（Deepin Union Code）<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FpPUEscN83gvcbKAwnK4vtQ" target="_blank">新版本</a>现已推出，具体更新内容如下：</span></p><h4><strong style="color:#020000">旧貌换新颜：从 Qt 到 DTK</strong></h4><p><span style="background-color:#ffffff; color:#000000">界面风格直接从 Qt 改为了 DTK。最新的设计图如下：</span></p><p><strong style="color:#000000"><span style="color:#000000">最近打开页面</span></strong></p><p><img height="350" src="https://oscimg.oschina.net/oscnet/up-cffc46c71bb34b82ff1e883d2da77193738.png" width="500" referrerpolicy="no-referrer"></p><p><strong style="color:#000000"><span style="color:#000000">编辑器界面</span></strong></p><p><img height="346" src="https://oscimg.oschina.net/oscnet/up-b076d0132b515149ab4328d485580c3df2a.png" width="500" referrerpolicy="no-referrer"></p><p><strong style="color:#000000"><span>调试界面</span></strong></p><p><img height="339" src="https://oscimg.oschina.net/oscnet/up-b40d7e22d09e7701b521c61213c58eb66aa.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">与此同时，<span style="background-color:#ffffff">deepin-IDE 也终于有了新图标（设计灵感来源于</span><strong style="color:#000000">代码里面的 「&lt;/&gt;」 符号</strong><span style="background-color:#ffffff">）：</span></span></p><p><span style="background-color:#ffffff; color:#000000"><img alt="" height="200" src="https://oscimg.oschina.net/oscnet/up-59d41e000d8b29907d53e4d2e7e66e65d83.png" width="200" referrerpolicy="no-referrer"></span></p><h4><span style="color:#000000"><span style="background-color:#ffffff"><strong>上架 deepin</strong></span><span style="background-color:#ffffff">&nbsp;</span><span style="background-color:#ffffff"><strong>应用商</strong></span><span style="background-color:#ffffff"><strong>店</strong></span></span></h4><p><span style="color:#000000"><span style="background-color:#ffffff">deepin-IDE 已经上架 deepin 应用商店，用户可以一键下载安装。</span></span></p><p><img height="318" src="https://oscimg.oschina.net/oscnet/up-7fa9f0e093913d11a7afcfa5664499699d1.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">也支持从仓库安装，在终端运行以下命令即可：</span></p><pre style="margin-left:0; margin-right:0"><code><span><span style="color:#0e9ce5">sudo</span> apt install deepin-unioncode</span></code></pre><h4><strong><span style="color:#000000">AI&nbsp;<span style="background-color:#ffffff">智能插件</span></span></strong></h4><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span>deepin-IDE 中的智能插件是和智谱厂商合作，现已实现了智能问答、代码翻译、添加注释、代码生成等功能：</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><strong><span>智能问答</span></strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span>开发中遇到的技术问题，可直接向 AI 提问。无需离开 IDE 环境去搜索引擎寻找答案，让开发者更沉浸于开发环境。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><img height="341" src="https://oscimg.oschina.net/oscnet/up-35da352f3dd017b20ed2ddd0404487019dc.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><strong>代码翻译</strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">基于 AI 大模型对代码进行语义级翻译，支持多种编程语言互译。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><img height="353" src="https://oscimg.oschina.net/oscnet/up-6e1018bbef2d2ca10e2edc1a12c23e18897.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><strong><span>自动添加注释</span></strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span>支持给代码自动添加行级注释，节省大量开发时间。没有注释的历史代码，也不再是问题。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><img height="312" src="https://oscimg.oschina.net/oscnet/up-23a91249eb343214cb0258b818b157f65fa.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><strong><span>代码生成和补全</span></strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span>根据自然语言注释描述的功能自动生成代码，也可以根据已有的代码自动生成后续代码，补全当前行或生成后续若干行，帮助提高编程效率。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><img height="285" src="https://oscimg.oschina.net/oscnet/up-8b8dce51b03eab7e6d8722ab2d3bdb64ca1.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong style="color:#020000">重磅：DTK 从此变简单</strong></h4><p>本次最重要的更新是 deepin-IDE 的智能插件现已支持生成 DTK 风格的代码。基于智谱大模型，以深度仓库代码、开发文档、知识资产等作为训练数据，经过深度调教、优化后，目前可以直接在问答模块中生成 DTK 风格的代码。以下是一些应用示例：</p><p>首先来一个「hello world」热热身：</p><p><img alt="" height="440" src="https://oscimg.oschina.net/oscnet/up-616813204fe4e1c1a59e3feab44ec1cb06e.png" width="300" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#000000">接下来继续提问，让其写一个 DTK 弹窗：</span></p><p><span style="background-color:#ffffff; color:#000000"><img alt="" height="438" src="https://oscimg.oschina.net/oscnet/up-c566d97ee7af8ae2aba0f7baca6b163d5a1.png" width="300" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#000000">最后让其写一个文本编辑器：</span></p><p><span style="background-color:#ffffff; color:#000000"><img alt="" height="438" src="https://oscimg.oschina.net/oscnet/up-e40307e83fab53794a71888095e39889e76.png" width="300" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#000000">相比于其它 AI 问答插件或同类型产品，deepin-IDE 插件回答的内容更加准确，给研发人员的效率带来了巨大的</span><span style="background-color:#ffffff; color:#000000">提升。随着后续 AI 模型的不断调试、优化，相信能够生成更多、更准确并且更贴合 deepin（深度）操作系统的回答。</span></p><p><span style="background-color:#ffffff; color:#000000">公告称，「本次&nbsp;</span><span style="background-color:#ffffff; color:#000000">deepin-IDE&nbsp;</span><span style="background-color:#ffffff; color:#000000">更新的重点是在颜值提升和 AI 能力上，但 deepin-IDE 的目标是要成为 deepin（深度）操作系统生态建设的利器，仅是这些内容显然是不够的。所以后续会将首次官宣中的计划逐步实现，把系统能力整合其中，让其成为 deepin 生态建设中服务和流程的统一入口。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 02:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272886</guid>
            <link>https://www.oschina.net/news/272886</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Pororoca —— HTTP 测试工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Pororoca 是一个</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#1f2328">支持 HTTP/2 和 HTTP/3 的</span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>&nbsp;HTTP 测试工具，受到 Postman 的启发，但有许多改进。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>适用于 Windows、Mac OSX 和 Linux。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="300" src="https://static.oschina.net/uploads/space/2023/1128/164543_T3WY_4252687.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>特性：</strong></p><ul><li>支持<a href="https://http2.github.io/">HTTP/2</a>和<a href="https://developers.cloudflare.com/http3/">HTTP/3</a>。</li><li>集合范围的环境。</li><li>轻松的变量管理。</li><li><span style="background-color:#ffffff; color:#1f2328">Secret&nbsp;</span>变量。</li><li>集合和环境可以一起导出到单个文件中。</li><li>与 Postman 完全导出和导入兼容性。</li><li>内存使用量低得多 - 比 Postman 少两到三倍。</li><li>自动化测试。</li><li>WebSockets。</li><li>启动时间快。</li><li>免费且开源。</li></ul><p><strong>注意：</strong>在 Windows 上，对 HTTP/2 的支持需要 Windows 10 或更高版本。支持 HTTP/3 需要 Linux 或 Windows 11 及更高版本。HTTP/3 仍处于实验阶段。</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 02:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/pororoca</guid>
            <link>https://www.oschina.net/p/pororoca</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 物联网终端操作系统 TencentOS Tiny]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-开放原子开源基金会首批孵化项目" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%BC%80%E6%94%BE%E5%8E%9F%E5%AD%90%E5%BC%80%E6%BA%90%E5%9F%BA%E9%87%91%E4%BC%9A%E9%A6%96%E6%89%B9%E5%AD%B5%E5%8C%96%E9%A1%B9%E7%9B%AE"></a>开放原子开源基金会首批孵化项目</h1><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_log.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fblob%2Fmaster%2FLICENSE"><img src="http://img.shields.io/badge/license-BSD-blue.svg" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fpulls"><img src="https://img.shields.io/badge/PRs-welcome-blue.svg" alt="PRs Welcome" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/README_en.md">(English Documents Available)</a></p><h1><a id="user-content-一 tencentos-tiny-简介" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%80tencentos-tiny-%E7%AE%80%E4%BB%8B"></a>一、TencentOS Tiny 简介</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Ftos-tiny">TencentOS tiny</a> 是腾讯面向物联网领域开发的实时操作系统，具有低功耗，低资源占用，模块化，安全可靠等特点，可有效提升物联网终端产品开发效率。TencentOS tiny 提供精简的 RTOS 内核，内核组件可裁剪可配置，可快速移植到多种主流 MCU (如 STM32 全系列) 及模组芯片上。而且，基于 RTOS 内核提供了丰富的物联网组件，内部集成主流物联网协议栈（如 CoAP/MQTT/TLS/DTLS/LoRaWAN/NB-IoT 等），可助力物联网终端设备及业务快速接入腾讯云物联网平台。</p><h2><a id="user-content-1tencentos-tiny 整体架构" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1tencentos-tiny%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84"></a>1、TencentOS tiny 整体架构</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_Architecture.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 主体架构图，从下到上主要包括：</p><p><strong>CPU 库</strong> ：TencentOS tiny 支持的 CPU IP 核架构，当前主要支持 ARM Cortex M0/3/4/7，Cortex A7，RISC-V、MSP430、AVR、STM8 等。</p><p><strong>驱动管理层</strong> ：包括板级支持包（BSP，主要由 MCU 芯片厂家开发与维护）、硬件抽象层（HAL，主要由 TencentOS tiny 提供，方便不同芯片的适配与移植）、设备驱动（Drivers，例如 Wi-Fi、GPRS、LoRa 等模块的驱动程序）。</p><p><strong>内核</strong> ：TencentOS tiny 实时内核包括任务管理、实时调度、时间管理、中断管理、内存管理、异常处理、软件定时器、链表、消息队列、信号量、互斥锁、事件标志等模块。</p><p><strong>IoT 协议栈</strong>：TencentOS tiny 提供 lwip、AT Adapter、SAL 层，支持不同的网络硬件，例如以太网、串口 Wi-Fi、GPRS、NB-IoT、4G 等通信模块。TCP/IP 网络协议栈上提供常用的物联网协议栈，例如 CoAP、MQTT，支撑终端业务快速接入腾讯云。</p><p><strong>安全框架</strong>：TencentOS tiny 为了确保物联网终端数据传输安全以及设备认证安全，提供了完整的安全解决方案。安全框架提供的 DTLS 和 TLS 安全协议，加固了 COAP 及 MQTT 的传输层，可确保物联网终端在对接腾讯云时实现安全认证和数据加密；另外针对低资源的终端硬件，安全框架还提供与腾讯云 IoTHub 配套的密钥认证方案，确保资源受限设备也能在一定程度上实现设备安全认证。</p><p><strong>组件框架</strong>：TencentOS tiny 提供文件系统、KV 存储、自组网、JS 引擎、低功耗框架、设备框架、OTA、调试工具链等一系列组件，供用户根据业务场景选用。</p><p><strong>开放 API（规划开发中）</strong>：TencentOS tiny 将在协议中间件和框架层上提供开放 API 函数，方便用户调用中间件功能，使用户无需过多关心中间件具体实现，快速对接腾讯云，实现终端业务上云的需求，期望最大程度减少终端物联网产品开发周期，节省开发成本。</p><p><strong>示例应用</strong>：TencentOS tiny 提供的示例代码，模块测试代码等，方便用户参考使用。</p><h2><a id="user-content-2tencentos-tiny-优势" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E4%BC%98%E5%8A%BF"></a>2、TencentOS tiny 优势</h2><h3><a id="user-content-1 小体积" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E5%B0%8F%E4%BD%93%E7%A7%AF"></a>(1).小体积</h3><p>最小内核：RAM 0.6KB，ROM 1.8KB
典型 LoraWAN 及传感器应用：RAM 3.3KB，ROM 12KB</p><h3><a id="user-content-2 低功耗" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2%E4%BD%8E%E5%8A%9F%E8%80%97"></a>(2).低功耗</h3><p>休眠最低功耗低至 2uA
支持外设功耗管理框架</p><h3><a id="user-content-3 丰富的-iot-组件" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3%E4%B8%B0%E5%AF%8C%E7%9A%84-iot-%E7%BB%84%E4%BB%B6"></a>(3).丰富的 IoT 组件</h3><p>集成主流 IoT 协议栈
多种通信模组 SAL 层适配框架；
支持 OTA 升级
提供简单易用端云 API，加速用户业务接入腾讯云</p><h3><a id="user-content-4 可靠的安全框架" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#4%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6"></a>(4).可靠的安全框架</h3><p>多样化的安全分级方案
均衡安全需求&amp;成本控制</p><h3><a id="user-content-5 良好的可移植性" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#5%E8%89%AF%E5%A5%BD%E7%9A%84%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7"></a>(5).良好的可移植性</h3><p>内核及 IoT 组件高度解耦，提供标准适配层
提供自动化移植工具，提升开发效率</p><h3><a id="user-content-6 便捷的调试手段" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#6%E4%BE%BF%E6%8D%B7%E7%9A%84%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5"></a>(6).便捷的调试手段</h3><p>提供云化的最后一屏调试功能
故障现场信息自动上传云平台，方便开发人员调试分析</p><h2><a id="user-content-3tencentos-tiny 携手合作伙伴共建 iot 生态" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny%E6%90%BA%E6%89%8B%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%E5%85%B1%E5%BB%BAiot%E7%94%9F%E6%80%81"></a>3、TencentOS tiny 携手合作伙伴共建 IoT 生态</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/Partners.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 自开源发布以来也在努力发展合作伙伴，期待合作共赢，共同扩展 IoT 应用生态。目前已经与多家 MCU/IP 核厂家达成了合作，包括意法半导体、恩智浦半导体、兆易半导体、ARM、华大半导体、芯来科技等；也与无线 SOC 和模组厂家达成了广泛的合作关系，包括瑞兴恒方、国民技术、Nordic 蓝牙、亮牛半导体、有人物联网等，</p><p>除了 MCU 和模组外，TencentOS tiny 也积极推进终端产品及项目的落地，目前已经形成了 AI 智慧农业、智能货柜、智慧会议室等方案，并且在腾讯内部与微信支付、腾讯云智慧行业、 AI 平台部、腾讯微瓴、QQ family 达成内部合作，共同扩展行业生态；同时也开始积极发展外部客户，目前与深圳光合显示科技的墨水屏零售标签、鑫悦购充电桩等达成业务合作。TencentOS tiny 将携手合作伙伴为物联网终端厂家提供更优质的 IoT 终端软件解决方案，方便各种物联网设备快速接入腾讯云，共同扩展 IoT 生态，更好地支撑智慧城市、智能水表、智能家居、智能穿戴、车联网等多种行业应用。</p><p>欢迎 IoT 相关项目合作，有合作需求的请邮件联系 TencentOS tiny 官方工作人员，邮箱地址 ： <a href="mailto:supowang@tencent.com">supowang@tencent.com</a></p><h1><a id="user-content-二 tencentos-tiny-代码目录" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%8Ctencentos-tiny-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95"></a>二、TencentOS tiny 代码目录</h1><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/09.Code_Directories.md">TencentOS tiny 代码目录说明</a></li></ul><h1><a id="user-content-三 tencentos-tiny-参考文档" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%89tencentos-tiny-%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>三、TencentOS tiny 参考文档</h1><h2><a id="user-content-1 移植指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E7%A7%BB%E6%A4%8D%E6%8C%87%E5%8D%97"></a>1、移植指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/10.Porting_Manual_for_KEIL.md">TencentOS tiny 移植指南（KEIL 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/11.Porting_Manual_for_IAR.md">TencentOS tiny 移植指南（IAR 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/12.Porting_Manual_for_GCC.md">TencentOS tiny 移植指南（GCC 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/mdk_pack/Documentation/README.md">TencentOS tiny 移植指南（基于 MDK pack)</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/STM32CubeMX_pack/Documentation/README.md">TencentOS tiny 移植指南（基于 STM32 CubeMx)</a></li></ul><h2><a id="user-content-2tencentos-tiny-开发指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97"></a>2、TencentOS tiny 开发指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/04.Development_Manual.md">TencentOS tiny 内核开发指南</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/05.SDK_Manual.md">TencentOS tiny API 参考</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/08.QCloud_IoTHub_Quick_Start.md">TencentOS tiny 对接腾讯云 IoTHub 开发指南</a></li></ul><h2><a id="user-content-3tencentos-tiny-腾讯云大学视频教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%A4%A7%E5%AD%A6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>3、TencentOS tiny 腾讯云大学视频教程</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fedu%2Fpaths%2Fseries%2FIoT">TencentOS tiny 端侧开发实践课</a></li></ul><h1><a id="user-content-四 tencentos-tiny-开源协议" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%9B%9Btencentos-tiny-%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>四、TencentOS tiny 开源协议</h1><ul><li>TencentOS tiny 遵循 <a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/LICENSE">BSD-3 开源许可协议</a></li></ul><h1><a id="user-content-五 tencentos-tiny-支持的物联网平台" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%94tencentos-tiny-%E6%94%AF%E6%8C%81%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0"></a>五、TencentOS tiny 支持的物联网平台</h1><p>TencentOS tiny 能支持物联网终端设备和业务快速接入<a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Fiotexplorer">腾讯云物联网平台 IoT Explorer</a>。</p><p>TencentOS tiny 结合腾讯云物联网开发平台 IoT Explorer，已经构筑起连接通讯芯片到云开发的能力，加上已经建设完成的国内最大规模 LoRa 网络，腾讯彻底打通从芯片通讯开发、网络支撑服务，物理设备定义管理，数据分析和多场景应用开发等全链条 IoT 云开发服务能力，重新定义了物联网开发模式，助力亿级设备多方式多模式低门槛接入腾讯云服务。作为物联网基础设施建设服务者，腾讯将持续打造开放的物联网生态体系，促进物联网生态良性发展。</p><h1><a id="user-content-六 tencentos-tiny-快速入门参考" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%ADtencentos-tiny-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%82%E8%80%83"></a>六、TencentOS tiny 快速入门参考</h1><p>TencentOS tiny 联合合作伙伴 (南京厚德物联网) 设计了定制开发板，如下图：
<img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/EVB_MX.png" alt="" referrerpolicy="no-referrer"></p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.holdiot.com%2Fproduct%2Fshowproduct.php%3Fid%3D8">TencentOS tiny 定制开发板介绍页</a>，开发者可以基于定制开发板进行快速入门学习，点击下载参考文档</li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/15.TencentOS_tiny_EVB_MX_Plus_Quick_Start.md">TencentOS-tiny 定制开发板入门指南</a></li></ul><h1><a id="user-content-七贡献代码" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%83%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81"></a>七、贡献代码</h1><ul><li><ol><li>在您自己的 GitHub 账户下 Fork TencentOS tiny 开源项目；</li></ol></li><li><ol start="2"><li>根据您的需求在本地 clone 一份 TencentOS tiny 代码；</li></ol></li><li><ol start="3"><li>您修改或者新增功能后，push 到您 fork 的远程分支；</li></ol></li><li><ol start="4"><li>创建 pull request，向 TencentOS tiny 官方开发分支提交合入请求；</li></ol></li><li><ol start="5"><li>TencentOS tiny 研发团队会定期 review 代码，通过测试后合入。</li></ol></li></ul><h1><a id="user-content-八加入 tencentos-tiny 官方 qq 技术交流群" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%AB%E5%8A%A0%E5%85%A5tencentos-tiny%E5%AE%98%E6%96%B9qq%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>八、加入 TencentOS tiny 官方 QQ 技术交流群</h1><p>扫码加群，请备注 TencentOS tiny 开发者，工作人员会根据备注进行审核：</p><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/qq.png" alt="" referrerpolicy="no-referrer"></p><h1><a id="user-content-九第三方开发者评测" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B9%9D%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E5%8F%91%E8%80%85%E8%AF%84%E6%B5%8B"></a>九、第三方开发者评测</h1><p>1.基于 TencentOS tiny 的环境监测实战项目
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav73782956%3Ffrom%3Dsearch%26seid%3D4421984671929108231">【TencentOS tiny】环境监测实战项目最终完整版</a>
感谢阿正的贡献</p><p>2.基于野火 stm32f103 开发板上移植的 TencentOS tiny 例程、源码剖析、视频讲解。
感谢 CSDN 博客专家杰杰的贡献</p><h2><a id="user-content-简单上手" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B"></a>简单上手：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101034426">超详细的 TencentOS tiny 移植到 STM32F103 全教程</a></li></ul><h2><a id="user-content-深度源码分析" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E6%B7%B1%E5%BA%A6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"></a>深度源码分析：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99618912">【TencentOS tiny 学习】源码分析（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99665883">【TencentOS tiny 学习】源码分析（2）——调度器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99687678">【TencentOS tiny 学习】源码分析（3）——队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99781093">【TencentOS tiny 学习】源码分析（4）——消息队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100052643">【TencentOS tiny 学习】源码分析（5）——信号量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100056641">【TencentOS tiny 学习】源码分析（6）——互斥锁</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100492219">【TencentOS tiny 学习】源码分析（7）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101846089">【TencentOS tiny 学习】源码分析（8）——软件定时器</a></p></li></ul><h2><a id="user-content-配套例程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E9%85%8D%E5%A5%97%E4%BE%8B%E7%A8%8B"></a>配套例程：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2Fhello-world">【TencentOS tiny 学习】例程（0）——hello world</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F01-task">【TencentOS tiny 学习】例程（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F02-queue">【TencentOS tiny 学习】例程（2）——队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F03-msg_queue">【TencentOS tiny 学习】例程（3）——消息队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F04-sem">【TencentOS tiny 学习】例程（4）——信号量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F05-mutex">【TencentOS tiny 学习】例程（5）——互斥锁</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F06-event">【TencentOS tiny 学习】例程（6）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F07-timer">【TencentOS tiny 学习】例程（7）——软件定时器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F08-mmblk">【TencentOS tiny 学习】例程（8）——内存池</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F09-mmheap">【TencentOS tiny 学习】例程（9）——内存堆</a></p></li></ul><h2><a id="user-content-视频教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>视频教程：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%3Ffrom%3Dsearch%26seid%3D10160676184801585522">【TencentOS tiny 学习】视频汇总</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D1">【视频】01-初识 TencentOS tiny</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D2">【视频】02-TencentOS tiny 基础知识</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D3">【视频】03-TencentOS tiny 移植</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D4">【视频】04-TencentOS tiny 任务-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D5">【视频】05-TencentOS tiny 任务-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D6">【视频】06-TencentOS tiny 队列-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D7">【视频】07-TencentOS tiny 队列-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D8">【视频】08-TencentOS tiny 消息队列</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D9">【视频】09-TencentOS tiny 信号量-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D10">【视频】10-TencentOS tiny 信号量-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【视频】11-TencentOS tiny 互斥锁-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D12">【视频】12-TencentOS tiny 互斥锁-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D13">【视频】13-TencentOS tiny 互斥锁-3</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D14">【视频】14-TencentOS tiny 事件-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D15">【视频】15-TencentOS tiny 事件-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D16">【视频】16-TencentOS tiny 软件定时器-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【视频】17-TencentOS tiny 软件定时器-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D18">【视频】18-TencentOS tiny 软件定时器-3</a></li></ul><h2><a id="user-content-相关 ppt 资料" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%9B%B8%E5%85%B3ppt%E8%B5%84%E6%96%99"></a>相关 PPT 资料：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2FPPT">【TencentOS tiny 学习】视频 PPT</a></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 01:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/TencentOS/TencentOS-tiny</guid>
            <link>https://gitee.com/TencentOS/TencentOS-tiny</link>
        </item>
        <item>
            <title>
                <![CDATA[RISC-V 新成果！openKylin 社区完成对 RV64G 架构支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 社区继与深度数智联合发布默认搭载 openKylin 1.0 操作系统的全球首款 RISC-V 笔记本电脑 DC-ROMA 后，近日，联合苏州睿芯公司，</span><strong><span style="color:#000000">openKylin 平台正式部署上线对 RV64G 架构支持</span></strong><span style="color:#000000">，后续 RV64G 非压缩指令集爱好者可以通过社区平台开发编译并部署自己的代码。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-d435b9748188f6ead24dab10652e7b259f4.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RISC-V 是一个自由的指令集，硬件厂商可以基于国际基金会认可的标准，自主扩展，目前市场上很多厂商是基于 RV64GC 来生产产品，但是也有厂商基于 RV64G 来生产产品，为配合国内厂商的市场需求，openKylin 社区率先推出对 RV64G 架构支持。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">一、RV64G 架构简介</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">相比较于目前在嵌入式小型设备上应用更广泛的 RV64GC（即大家比较熟悉的 riscv64）, RV64G 更加聚焦于通用计算场景功能，服务器或者桌面系统。其中：</span></span></p><ul><li><span><span style="color:#000000">「RV」代表 RISC-V；</span></span></li></ul><ul><li><span><span style="color:#000000">「64」代表所支持的指令是 64 位的（实际上，交叉编译器在生成代码时可能会采用 32 位指令减小生成的目标代码长度），地址长度和寄存器长度都为 64 位；</span></span></li><li><span><span style="color:#000000">「G」代表通用（General）计算平台。实际上，「G」等效于「IMAFD」，其中「I」代表整数（Integer）计算指令、整数 load、整数 store 以及控制流（如分支跳转）指令，这些指令在任何 RISC-V 的实现中都是必须的；「M」代表乘法（Multiply），即平台支持乘法和除法运算；「A」代表原子（Atomic）扩展，支持对寄存器进行的原子读、修改和原子写操作，这些操作在多核设计中非常有用；「F」代表单精度浮点（Float）运算支持，「D」代表双精度浮点（Double）运算支持。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RV64G 和 RV64GC 之间的主要区别在于是否包含压缩指令集（C 指令集）。RV64GC 在 RV64G 的基础上增加了 C 指令集，这些指令用于缩小指令长度，降低代码占用空间，RV64G 则不包含这些压缩指令，因此 RV64G 的应用程序可以在 RV64GC 的硬件上运行，反之则不行。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">比较而言，RV64GC 比 RV64G 具有更高的代码密度，程序具有更小的 footprint，可以更有效地利用内存空间，这些特点让 RV64GC 指令在嵌入式应用中更有优势；另一方面，RV64G 的硬件实现可能比 RV64GC 更简单，可采用简化指令译码逻辑，更容易预测指令预取模式，减少内存访问次数、提高指令执行速度，降低功耗，设计人员可以更好的对高性能计算进行优化。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">二、开发过程</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">1.基础工具链改造编译验证。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">第一阶段，对基础编译工具进行适配，包括 gcc，glibc，binutils 源码包的修改编译，技术攻关，以适配 RV64G 新架构。运行新编译的 gcc 版本，检查相关输出参数，确认为-- -with-arch=rv64imafd 表示修改成功。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">2.stage0/ bootstroop 阶段相关包的编译。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">基于第一阶段完成的基础编译工具链，开始 bootstroo 阶段相关包的编译工作。包括 apt，dpkg，llvm，python3，perl，cmake，make，openmpi，netplan.io，openssl，meson 等软件包的编译工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">3.初期上层应用包编译工作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">完成前两步中的软件包编译工作后，需要进一步扩展软件包的数量。在本地编译环境下通过脚本逐层编译更多上层应用包。同时验证使用 RV64GC 相关依赖包与现有 RV64G 包混合编译没有问题。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">4.Choort 平台编译环境调试制作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">使用目前已重新编译的 RV64G 架构新软件包，来构建 OKBS 平台的 chroot 基础环境，调试过程碰到架构符号相关的较多问题，需要多次重构测试，过程中不断尝试修改 chroot 的系统文件。直到可以正常编译出 rv64g.deb 格式的二进制文件。制作完成的 chroot 地址为：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#0052ff">http://api.build.openkylin.top/devel/openkylin/yangtze/rv64g</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">5.平台架构新增部署，与编译机搭建。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">为了与现有 RV64GC 架构做区分，在 OKBS 系统上增加 RV64G 架构相关配置数据。利用之前基于新架构编译完成的软件包，新增创建 source.list 源，作为编译环境的依赖源。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">6.初期编译环境调试。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">上线初期，解决新架构 chroot 与 OKBS 系统融合，编译依赖源 RV64G 架构修改等问题。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">三、RV64G 架构支持优势</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">1.</span><strong><span style="color:#000000">支持 RV64G 架构的代码同源编译</span></strong><span style="color:#000000">，即</span><strong><span style="color:#000000">代码一次提交</span></strong><span style="color:#000000">。可在 OKBS 平台同源编译出 AMD64、I386、ARM64、RV64GC、RV64G 五个架构的二进制包，无需再单独维护一套 RV64G 软件源及代码仓库，提升 RV64G 架构代码开发维护效率。</span></span></p><div><p style="text-align:center"><img height="343" src="https://oscimg.oschina.net/oscnet/up-e3b0d0deee341c3cf2c9b95667d25b56b29.png" width="921" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">2.</span><strong><span style="color:#000000">支持 RV64G 架构软件仓库的同源发布</span></strong><span style="color:#000000">，有效提升 RV64G 架构软件仓库的管理和维护升级效率。</span></span></p><div><p style="text-align:center"><img alt="" height="521" src="https://oscimg.oschina.net/oscnet/up-c9f3cf8283f562f55599cdc9ece977b4ecb.png" width="1358" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="224" src="https://oscimg.oschina.net/oscnet/up-989b966311f60b0bceab547c82705c8fde3.png" width="640" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">3.</span><strong><span style="color:#000000">镜像制作与版本发布统一规范化</span></strong><span style="color:#000000">。在镜像制作与版本发布管理上可与其他架构以同流程处理，统一 RV64G 架构版本构建规范。</span></span></p><div><p style="text-align:center"><img alt="" height="418" src="https://oscimg.oschina.net/oscnet/up-ff54131837683f63c926c6bcabafa8a63cd.png" width="652" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">4.</span><strong><span style="color:#000000">解决与 RV64GC 架构名称冲突的问题</span></strong><span style="color:#000000">，至此可以兼容 RISCV-V 规范的两种指令集架构的编译工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">5.</span><strong><span style="color:#000000">编译机可同时支持 RV64GC 和 RV64G 两种架构</span></strong><span style="color:#000000">，有效提升编译机资源利用率。</span></span></p><div><p style="text-align:center"><img height="484" src="https://oscimg.oschina.net/oscnet/up-78f5b565841630b75a362cc5f5ff57d9363.png" width="909" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="408" src="https://oscimg.oschina.net/oscnet/up-28aee798583cba92a8d59b14df44d4e814c.png" width="360" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">后续苏州睿芯公司将继续携手 openKylin 社区，成立 RV64G SIG 组，加大资源投入，解决软件包编译过程中遇到的问题，并完成该架构镜像制作、硬件适配、软件源管理和生态需求软件自主构建等，进一步集成基于 RV64G 架构的桌面与服务器整机系统。欢迎感兴趣的小伙伴加入我们，携手共创！</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272960</guid>
            <link>https://www.oschina.net/news/272960</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openGemini 获 1 项大奖，2 项认证，一年一个台阶]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="306" src="https://oscimg.oschina.net/oscnet/up-2305df6d4314acb367af05d3ada47349caa.jpg" width="1021" referrerpolicy="no-referrer"></p><p>最近，openGemini 先后获得开放原子基金会授予的 「2023 快速成长开源项目」 奖项，以及由中国信通院评估颁发的 「可信开源项目」 和 「可信数据库」 两项证书，成为社区最值得庆贺的事，可谓是「寒冬喜来茶当酒，竹炉汤沸火初红」。回头望，旭日东升，社区就像一个朝气蓬勃的小孩，正在一天天长大。这些荣誉的背后，是 openGemini 团队、众多社区开发者不断努力和创新的结果。</p><ul><li><span id="OSC_h3_1"></span><h3><span><strong>2023 年度快速成长开源项目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">开放原子基金会「2023 年度快速成长开源项目」评委会从时间范围内的定量指标数据增长速度和定性指标情况发展速度两个维度考察，综合衡量了开源项目在 2023 年度社区治理（社区管理、开源合规管理、社区运营、基础设施能力、安全治理）和社区活跃度（生态参与度、社区影响力和项目活跃度）方面的表现，决定授予 openGemini 社区「2023 年度快速成长开源项目」，充分肯定了 openGemini 社区在治理与生态方面做出的努力。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-6cfaf4c1a329a2a347fa19b42618269367e.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_2"></span><h3><span><strong>可信开源项目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信开源项目」 是由中国信通院推动的开源项目评估，对开源项目的健康程度与可持续性展开评测，以降低开源项目的安全风险，完善开源项目的开发者、用户生态。重点考察开源项目在许可证合规性、软件安全性、软件活跃度、技术成熟度、服务支持力和软件兼容性六个方面的能力，全面衡量社区版开源项目的健康程度，为开源项目使用方提供选型的参考依据。openGemini 通过该项认证，充分证明了社区的健康程度和可持续性发展。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="807" src="https://oscimg.oschina.net/oscnet/up-c0917d6ee0589169bff1269025c1be55999.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_3"></span><h3><span><strong>可信数据库</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信数据库」是由中国信通院开展的面向数据库产品及周边工具、数据库服务商和应用侧为评价目标的权威评测体系，重点考察时序数据库基础能力、兼容能力、管理能力、高可用能力、扩展性、兼容性等七个方面能力。openGemini 通过该项认证，再次证明 openGemini 项目是高质量、高安全的，能够满足海量时序数据存储、处理、应用等各类场景数据管理需求。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="803" src="https://oscimg.oschina.net/oscnet/up-659dbe1066941e46180a914be7c208ddc31.jpg" width="600" referrerpolicy="no-referrer"></p><span id="OSC_h3_4"></span><h3><span><strong>再接再厉</strong></span><span><strong><em>✦</em></strong></span></h3><p style="margin-left:0; margin-right:0">作为一个开源项目，openGemini 一直致力于为开发者提供更好的平台和软件，帮助他们了解数据库架构、功能原理和内核开发过程，降低开发门槛，最终具备问题自我定位、自我修复的能力。同时也为最终用户提供更好的工具（目前社区的派生项目已达 20 余个），帮助他们更好的使用 openGemini，降低生产成本，提高产品竞争力。在这个过程中，openGemini 团队不仅注重技术的创新和优化，还积极投入社区建设，与其他开源项目合作，推动整个开源社区的发展。</p><p style="margin-left:0; margin-right:0">在未来，openGemini 社区将继续努力，不断提升自身的技术实力和社区影响力，为用户和开发者提供更好的时序数据库软件。同时，openGemini 也将继续与其他开源项目合作，共同推动整个开源社区的发展，为技术的进步和社会的发展做出贡献。一年一个台阶，明年我们拭目以待！</p><p style="margin-left:0; margin-right:0">今日恰值冬至，祝福大家冬至欢愉，常安常乐。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="288" src="https://oscimg.oschina.net/oscnet/up-1ccc6c43a3a6a9ae796c53a6365d4d0d6e5.png" width="200" referrerpolicy="no-referrer"></p><hr><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 官网：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.opengemini.org%2F" target="_blank">http://www.openGemini.org</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 开源地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FopenGemini" target="_blank">https://github.com/openGemini</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 公众号：</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify"><img src="https://oscimg.oschina.net/oscnet/up-9c3a28f01ff2ece95893e6eb22755543105.jpg" style="margin-top:20px" referrerpolicy="no-referrer"></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">欢迎关注～ 诚邀你加入 openGemini 社区，共建、共治、共享未来！</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3234792/blog/10331495</guid>
            <link>https://my.oschina.net/u/3234792/blog/10331495</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软悄然推出 Copilot Android 版应用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软在一周前悄然<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Ftechosarusrex%2Fstatus%2F1739569672058450165" target="_blank">上线</a>了 Android 版本的 Copilot 应用，目前可从 Google Play 商店进行下载，但 iOS 版本尚未推出。</span></p><p><span style="color:#000000"><img alt="" height="423" src="https://oscimg.oschina.net/oscnet/up-fbbce70c8deda05fed32340399295f80d10.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">Android 版的 Copilot 应用与 ChatGPT 非常相似，可以访问聊天机器人功能，通过 DALL-E 3 生成图像，并可以为电子邮件和文档起草文本。它还能够免费访问 OpenAI 最新的 GPT-4 模型，而如果用户使用 ChatGPT，就必须付费。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272891/microsoft-copilot-app-for-android</guid>
            <link>https://www.oschina.net/news/272891/microsoft-copilot-app-for-android</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
