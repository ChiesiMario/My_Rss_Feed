<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 28 Dec 2023 10:49:59 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[广电运通加入 openKylin，助力社区创新技术发展！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>近日，广电运通集团股份有限公司（以下简称」广电运通「）签署了 openKylin 社区 CLA（Contributor License Agreement 贡献者许可协议），正式加入 openKylin 开源社区。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-cab724551f7e2a4ba37a2d71058d9f83c08.png" referrerpolicy="no-referrer"></p><p><span>广电运通创立于 1999 年，隶属于广州无线电集团，是国有控股的高科技上市企业，主营业务覆盖智能金融、公共安全、智能交通、数字政府、大文旅、新零售及智慧教育等领域，为全球客户提供具有竞争力的智能终端、运营服务及大数据解决方案。</span></p><p><span>广电运通已连续 15 年位列智能金融设备市场第一，是国内最大的金融智能自助设备供应商和服务商，旗下信创软硬件产品已在各大金融机构广泛应用和验证，持续为金融信创繁荣发展输入源源不断的动能。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e6b2fb1b3ecd1366d41e1da581a52ad6d78.png" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>加入 openKylin 社区后，广电运通将充分发挥自身在金融科技领域的技术和资源优势，联合上下游合作伙伴，建立互利共赢的良性循环，与社区在金融智能终端技术迁移等方面开展合作，丰富产业生态，助力创新技术发展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273155</guid>
            <link>https://www.oschina.net/news/273155</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[深耕开发者生态，openKylin 入选 2023 中国技术品牌影响力企业榜]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>2023 年 12 月 26 日，中国技术先锋年度评选&nbsp;| 2023 中国技术品牌影响力企业榜单正式发布。作为中国领先的新一代开发者社区，SegmentFault 思否依托数百万开发者用户数据分析，各科技企业在国内技术领域的行为及影响力指标，最终评选出 30 家上榜企业。<strong>openKylin 作为中国领先的开源操作系统根社区，凭借在技术领域和开发者生态领域的持续贡献，入选 30 强之列。</strong></span></p><p style="text-align:center"><img alt="" height="3508" src="https://oscimg.oschina.net/oscnet/up-f71b87d34c96069fbcb15077685dcb8cfdf.png" width="2481" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>相信开发者的力量，一直以来 openKylin 社区都坚持大力推动开发者生态建设。2023 年，openKylin 社区曾组织和参与顶级技术大会、开发者大赛、技术沙龙</span><span>等活动</span><span><strong>70+</strong>场，以领先技术回馈社区。截至目前，openKylin 已累计发布<strong>6</strong>个社区版本，下载量<strong>100 万+</strong>；汇聚<strong>400+</strong>社区会员<strong>、5500+</strong>开发者加入社区，并累计成立<strong>94</strong>个 SIG 组开展技术研究与创新，<span>和开发者共同成长。</span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>未来，openKylin 也将保持初心，加强生态建设，服务广大开发者，为营造良好开源生态和技术发展持续努力，也期待越来越多的开发者参与进来，为建设开源、贡献开源添砖加瓦！&nbsp;</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span style="color:#7f7f7f">附：《2023 中国技术品牌影响力企业》</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f8de216bffebbb3744628f4612997a427f.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>openKylin（开放麒麟）社区旨在以「共创」为核心，在开源、自愿、平等、协作的基础上，通过开源、开放的方式与企业构建合作伙伴生态体系，共同打造桌面操作系统顶级社区，推动 Linux 开源技术及其软硬件生态繁荣发展。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff">社区理事成员单位包括麒麟软件、普华基础软件、中科方德、麒麟信安、凝思软件、一铭软件、中兴新支点、元心科技、中国电科 32 所、技德系统、北京麟卓、先进操作系统创新中心、飞腾、兆芯、龙芯中科、景美、京东科技、玄铁、申泰信息、海光等 21 家产业同仁和行业机构。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273154</guid>
            <link>https://www.oschina.net/news/273154</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[养乐多公司确认 95 G 数据被泄露]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一个自称为 DragonForce 的组织，将澳大利亚养乐多公司 (Yakult Australia)&nbsp;的 95.19 GB 数据进行了公开泄露。<span style="background-color:#ffffff">Yakult Australia&nbsp;</span>方面也证实了此次网络攻击的真实性，并表示<span style="background-color:#ffffff">该公司的澳大利亚和新西兰 IT 系统均受到了影响。</span></span></p><p><span style="color:#000000">「12 月 15 日上午，我们首次意识到发生了一起网络事件。我们还不能确认事件的严重程度。我们正在与网络安全专家合作，紧急调查这一事件。」</span></p><p><span style="color:#000000">目前，该公司还无法确认事件究竟是如何发生的。"我们的调查正在进行中。一旦获得信息，我们将提供进一步的更新信息。"</span></p><p><span style="color:#000000"><img alt="" height="355" src="https://oscimg.oschina.net/oscnet/up-5616ae7257ff54615cc8746288f71f8244c.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="424" src="https://oscimg.oschina.net/oscnet/up-ddf22101150476fbae2414443ea235cfa22.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">DragonForce 方称，所泄露的数据包含公司数据库、合同、护照等。科技网站&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bleepingcomputer.com%2Fnews%2Fsecurity%2Fyakult-australia-confirms-cyber-incident-after-95-gb-data-leak%2F" target="_blank">BleepingComputer</a> 对泄露的一小部分数据进行了分析，发现其中似乎包含一些商业文件、电子表格、澳大利亚养乐多公司的信贷申请、员工记录以及护照等身份证件的复印件。</span></p><p><span style="color:#000000">DragonForce （又名 DragonLeaks）打出的口号是"companies that refused to cooperate"。这表明其首要目的是进行钱财勒索，如果勒索不成，就会公开泄露窃取的资产和数据。目前有关"DragonForce"的信息还不多，迄今为止，该组织已在其泄密网站上列出了 20 名受害者。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 08:35:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273141/yakult-australia-95-gb-data-leak</guid>
            <link>https://www.oschina.net/news/273141/yakult-australia-95-gb-data-leak</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Julia 1.10 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>经过 3 个 beta 版本和 3 次候选发布版本后，Julia 1.10 现已正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjulialang.org%2Fblog%2F2023%2F12%2Fjulia-1.10-highlights%2F" target="_blank">发布</a>。<span style="background-color:#ffffff; color:#333333">这是一种通用的高性能语言，在科学计算和数值分析中较为流行。</span></p><p><span style="background-color:#ffffff; color:#333333">新版本的一些亮点内容如下：</span></p><ul><li><h4><strong>用 Julia 编写的新解析器</strong></h4></li></ul><p>将之前用 Scheme 编写的默认解析器替换为用 Julia 编写的新解析器，称为&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJuliaLang%2FJuliaSyntax.jl%2F" target="_blank">JuliaSyntax.jl</a>。此更改引入了多项改进：<strong style="color:#212529">提高解析性能、详细的语法错误消息、高级源代码映射。</strong></p><ul><li><h4><strong>包加载时间改进</strong></h4></li></ul><p>这项工作主要是通过分析和改进 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJuliaComputing%2FOmniPackage.jl" target="_blank">OmniPackage.jl</a> 的加载时间来完成的，OmniPackage.jl 是一个人造的"mega package"，其唯一目的就是依赖和加载大量的依赖项。<span style="background-color:#ffffff; color:#212529">总的来说，OmniPackage.jl 最终会加载大约 650 个软件包，其中许多软件包都非常大。</span></p><pre style="margin-left:auto; margin-right:auto; text-align:left"><code class="language-julia"><em># Julia 1.9:</em><span style="color:#008080">48.041773</span> seconds (<span style="color:#008080">102.17</span> M allocations: <span style="color:#008080">6.522</span> GiB, <span style="color:#008080">5.82</span>% gc time, <span style="color:#008080">1.21</span>% compilation time: <span style="color:#008080">86</span>% of which was recompilation)

<em># Julia 1.10:</em><span style="color:#008080">19.125309</span> seconds (<span style="color:#008080">30.38</span> M allocations: <span style="color:#008080">2.011</span> GiB, <span style="color:#008080">11.54</span>% gc time, <span style="color:#008080">10.38</span>% compilation time: <span style="color:#008080">61</span>% of which was recompilation)</code></pre><ul><li><h4><strong>堆栈跟踪渲染的改进</strong></h4></li></ul><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>随着 Julia 1.10 的改进，堆栈跟踪现在更加简洁：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="margin-left:auto; margin-right:auto; text-align:left"><span><span style="background-color:#fafafa"><span><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span><span><code class="language-julia">Stacktrace: [<span><span><span style="color:#008080">1</span></span></span>] error() @ Base ./error.jl:<span><span><span style="color:#008080">44</span></span></span> [<span><span><span style="color:#008080">2</span></span></span>] f(g::<span><span><span style="color:#0086b3">Function</span></span></span>, a::<span><span><span style="color:#0086b3">Int64</span></span></span>; kw::<span><span><span style="color:#b14e8f"><strong>@Kwargs</strong></span></span></span>{}) @ Main ./REPL[<span><span><span style="color:#008080">1</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span> [<span><span><span style="color:#008080">3</span></span></span>] f(a::<span><span><span style="color:#0086b3">Int64</span></span></span>) @ Main ./REPL[<span><span><span style="color:#008080">2</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span> [<span><span><span style="color:#008080">4</span></span></span>] top-level scope @ REPL[<span><span><span style="color:#008080">3</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span></code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此更新导致堆栈跟踪更短且更易于阅读。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>并行垃圾收集</strong></h4></li></ul><p>在 1.10 版中对垃圾收集器（GC）的标记阶段进行了并行化处理，并引入了与应用线程同时运行部分清扫阶段的可能性。这大大加快了多线程分配繁重工作负载的垃圾回收时间。</p><p>多线程 GC 可通过命令行选项 --gcthreads=M 启用，该选项可指定在 GC 的标记阶段使用的线程数。也可以通过 --gcthreads=M,1 启用上述并发页面扫描，这意味着在 GC 标记阶段将使用 M 个线程，而一个 GC 线程负责与应用程序同时执行部分扫描阶段。</p><p>默认情况下，GC 线程数设置为计算线程数（--threads）的一半。</p><ul><li><h4><strong>Tracy 和英特尔 VTune ITTAPI 分析集成</strong></h4></li></ul><p><img alt="" height="395" src="https://oscimg.oschina.net/oscnet/up-920a63319481f6cd753b044f04fc799eaaf.png" width="500" referrerpolicy="no-referrer"></p><ul><li><h4><strong>升级到 LLVM 15</strong></h4></li></ul><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Julia 1.10 版本使用 LLVM 15。这带来了新处理器和一般现代化更新的配置文件。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>特别值得注意的是新的 pass-manager 的迁移，有望改进编译时间。LLVM 15 改进了对 x86 上 Float16 的支持。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>Linux AArch64 稳定性改进</strong></h4></li></ul><p>升级到 LLVM 15 后，可以在 Linux 的 aarch64 CPU 上使用 JITLink。这种 linker 最初是在 Julia v1.8 中引入的，仅适用于 Apple Silicon（macOS 上的 aarch64 CPU），它解决了在该平台上影响 Julia 的频繁 segmentation fault 问题。不过，由于 LLVM 内存管理器中的一个错误，非重要工作负载可能会生成过多的内存映射 (mmap)，从而超出允许映射的上限。如果遇到这个问题，可阅读有关如何<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.julialang.org%2Fen%2Fv1.10.0%2Fdevdocs%2Fbuild%2Farm%2F%23AArch64-%28ARMv8%29" target="_blank">更改<code>mmap</code>限制</a>的文档。</p><ul><li><h4><strong>system images 和 package images 的并行本机代码生成</strong></h4></li></ul><p>通过在 LLVM 编译阶段 exposing 并行性，加速了&nbsp;Ahead-of-time compilation (AOT)。现在，编译工作不再是编译一个大型的整体编译单元，而是分成多个小块。这种多线程方式加快了 system images 和大型 package images 的编译速度，从而缩短了其预编译时间。</p><p>可以通过环境变量 JULIA_IMAGE_THREADS=n 来控制并行的使用量。此外，由于 Windows 本地 COFF 二进制文件的限制，在 Windows 上编译大型 images 时，多线程将被禁用。</p><ul><li><h4><strong>避免并行预编译期间&nbsp;races</strong></h4></li></ul><p>&nbsp;</p><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>1.10 引入了一种「pidfile」（process id file）锁定机制，该机制可确保只有一个 Julia 进程能够预编译给定的缓存文件，而缓存文件是预编译过程中针对特定 Julia 设置的。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>这种安排既有利于可能同时运行多个进程的本地用户，也有利于可能在同一共享仓库中运行数百个工作程序的高性能计算用户。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>使用时并行预编译</strong></h4></li></ul><p>&nbsp;虽然 Pkg 会在安装后自动并行预编译依赖包，但在使用/导入时进行的预编译以前是串行的，每次预编译一个依赖包。</p><p>当用户开发一个软件包时，最终可能会在加载时进行预编译，而且如果开发的软件包中的代码变更深入到正在加载的软件包的依赖关系树中，串行预编译过程可能会特别慢。</p><p>1.10 引入了加载时的并行预编译，以捕捉这些情况并加快预编译速度。</p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjulialang.org%2Fblog%2F2023%2F12%2Fjulia-1.10-highlights%2F" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 07:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273118/julia-1-10-released</guid>
            <link>https://www.oschina.net/news/273118/julia-1-10-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Golang 通用代码生成器仙童发布 2.4.0 电音仙女尝鲜版二，改进三大部分生成功能群]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Golang 通用代码生成器仙童发布 2.4.0 电音仙女尝鲜版二，改进三大部分生成功能群</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童已发布 2.4.0 电音仙女尝鲜版二及其介绍视频。尝鲜版二改进了三大部分生成功能群。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">视频请见：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Q64y1H75r%2F" target="_blank">https://www.bilibili.com/video/BV1Q64y1H75r/</a></p><p>Golang 通用代码生成器仙童已发布 2.4.0 电音仙女尝鲜版一介绍视频请见：</p><p>正常模式：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fw411V77i%2F" target="_blank">https://www.bilibili.com/video/BV1fw411V77i/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">哑数据模式：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1nu4y1K7sz%2F" target="_blank">https://www.bilibili.com/video/BV1nu4y1K7sz/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">电音仙女版本支持日期和日期时间。支持三大部分生成功能群。支持枚举。支持哑数据模式。支持用户管理自己的资料和密码。技术状态和最新版的 Rust 通用代码生成器红莲的技术状态一致。非常便利大家的使用。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">代码生成器项目地址：</span><a href="https://gitee.com/jerryshensjf/Fairchild">https://gitee.com/jerryshensjf/Fairchild</a><br><span style="background-color:#ffffff; color:#333333">二进制发布包下载地址：</span><a href="https://gitee.com/jerryshensjf/Fairchild/attach_files">https://gitee.com/jerryshensjf/Fairchild/attach_files</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h1>Go 语言通用代码生成器：仙童</h1><h3>简介</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器：仙童</p><h3>百度话题</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">#通用代码生成器#</p><h3>版本更新</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童已发布 2.4.0 电音仙女（TechnoFairy）尝鲜版二，改进了三大部分生成功能群。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童已发布 2.4.0 电音仙女（TechnoFairy）尝鲜版一，支持日期和日期时间。支持三大部分生成功能群。支持枚举。支持哑数据模式。支持用户管理自己的资料和密码。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童 Beta 7 版。完善支持 Oracle 数据库，并有错误修正。可以从源码编译生成构建。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童 Beta6 版，发布最新介绍视频，支持从源码构建代码生成器。您只需下载源码，即可以 mvn install 编译构建 Go 语言通用代码生成器仙童。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器：仙童 Beta5 版。彻底修复弹性登录模块，修复了注册，修改密码，管理员新增用户时使用过时加密算法问题。更多测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器：仙童 Beta3 版。修复几处错误。包括登录权限问题和图形报表 UI 的语言问题。更多测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">GO 语言通用代码生成器仙童已发布 Beta2 版，支持 Rust 语言兼容性，即可以使用 Rust 通用代码生成器莲花的 SGS2 模板直接生成 Go 语言代码生成物。同时支持 Java 语言兼容性。即支持 Java 通用代码生成器的模板直接生成 Go 语言代码生成物。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童 Beta 版，此版本修复了 Excelize 组件 API 变化引起的编译错误，另有文档更新和更多检查。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童尝鲜版十二。支持 PDF 格式数据导出。在尝鲜版十一基础上有增强和修错。流畅支持模板向导代码生成。支持三大变形功能群，支持四种数据库。已完成所有功能规划，下一个版本即可进入 Beta 阶段。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十一。在尝鲜版十基础上有增强和修错，并支持数据库表与字段的中文注释和兼容所有 java 通用代码生成器的 SGS2 模板，直接生成 go 语言后端和 Vue 前端，并自动格式化 java 语言 SGS2 模板至 go 语言模板。支持三大变形功能群，支持四种数据库，支持 Excel 数据导出。支持图形报表和复杂版面，支持弹性登录模块。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十是第一个稳定版本。功能基本完备，所有示例通过检测，初步完整测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版九在尝鲜版八基础上有功能增强和缺陷修复。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版八初步支持 SimpleAuth 弹性登录界面。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 7 是一个错误修复版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 5 支持前端和后端的复杂版面和图形报表功能</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 4 支持 Vue 和 ElementUI 的基于 Node.js 的独立前端。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 3 进行了广泛的测试和修错。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版２新增对 Oracle 数据库的支持。</p><h3>架构</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">基于 Java 通用代码生成器：光的架构。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">生成的代码基于 go 语言，使用 gin 作为 web 框架。目前支持 MariaDB,MySQL,PostgreSQL 和 Oracle 四种数据库。支持生成 Vue 和 ElementUI 的基于 Node.js 的独立前端。支持 Excel,PDF 两种数据导出格式。</p><h3>开发测试环境</h3><ul><li>jdk 17</li><li>Apache Tomcat 9</li><li>Node.js 14</li><li>golang 1.19</li><li>MariaDB 15.1</li><li>MySQL 8</li><li>PostgreSQL 14</li><li>Oracle 11</li></ul><h3>B 站介绍视频</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童 2.4.0 电音仙女尝鲜版二介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Q64y1H75r%2F">https://www.bilibili.com/video/BV1Q64y1H75r/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童 2.4.0 电音仙女尝鲜版一介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fw411V77i%2F">https://www.bilibili.com/video/BV1fw411V77i/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1nu4y1K7sz%2F">https://www.bilibili.com/video/BV1nu4y1K7sz/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童已发布 Beta7 版视频,请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1uM4y1774F%2F">https://www.bilibili.com/video/BV1uM4y1774F/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童 Beta6 版视频,请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Jg4y1473X%2F">https://www.bilibili.com/video/BV1Jg4y1473X/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">​Go 语言通用代码生成器仙童已发布 Beta5 版，发布最新介绍视频，彻底修复弹性登录模块。修复了注册，修改密码，管理员新增用户时使用过时加密算法问题。更多测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xg4y1E7FA%2F">https://www.bilibili.com/video/BV1xg4y1E7FA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">​Beta3 版，请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1g84y1n73B%2F">https://www.bilibili.com/video/BV1g84y1n73B/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta 版两个视频的合集，请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV13D4y1G7L4%2F">https://www.bilibili.com/video/BV13D4y1G7L4/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta2 版：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV13M411A7nH%2F">https://www.bilibili.com/video/BV13M411A7nH/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta 版：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV19j411T7wx%2F">https://www.bilibili.com/video/BV19j411T7wx/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十二：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV14K411i7DM%2F">https://www.bilibili.com/video/BV14K411i7DM/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十一：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1ce411P7qU%2F">https://www.bilibili.com/video/BV1ce411P7qU/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版九：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1a5411R7Zt%2F">https://www.bilibili.com/video/BV1a5411R7Zt/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1pR4y1w7aB%2F">https://www.bilibili.com/video/BV1pR4y1w7aB/</a></p><h3>项目图片</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1104/210826_16fb1ca2_1203742.jpeg" referrerpolicy="no-referrer"></p><h3>最新大版本号</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">正在研发的最新大版本号是仙童 2.4.0 电音仙女　TechnoFairy 短名 TF。对标 java 通用代码生成器光 2.4.0 电音之王和 Rust 通用代码生成器红莲。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/tf2.jpg" referrerpolicy="no-referrer"></p><h3>百度话题</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">＃通用代码生成器＃</p><h3>代码生成器截图</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代码生成器正在研发中，Beta7 版已发布，这是一个稳定版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1112/202857_c7a40dc0_1203742.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1112/202911_c2b9a341_1203742.png" referrerpolicy="no-referrer"></p><h3>电音仙女尝鲜版二下载</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">下载地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/Fairchild/attach_files">https://gitee.com/jerryshensjf/Fairchild/attach_files</a></p><h3>仙童的安装运行</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童是使用 Java 语言写成的代码生成器。运行仙童您需要装好 Java8 和安装好 Tomcat9 或 8.5 应用服务器。并把仙童的 war 包部署在 Tomcat 的 webapps 目录下。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代码生成物的运行还需要安装好 Go 语言开发环境，您要使用 go mod 管理依赖，并把代码生成物解压在 go 语言工作空间的 src 文件夹的一级子目录下。还需要对应的数据库服务器运行代码生成物的建库 sql 脚本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">前端代码生成物的运行需要装好 node.js 运行环境并安装 js 依赖库。</p><h3>Vue 独立前端截图</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/Fc_login.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_list.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_img.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_mtm2.png" referrerpolicy="no-referrer"></p><h3>代码生成物截图</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1122/151921_f4271962_1203742.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1122/151935_cf6c7223_1203742.png" referrerpolicy="no-referrer"></p><h3>源码编译用户指南</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通用代码生成器已经支持自己编译源码，我已把原来缺的前端代码生成器的 jar 包上传。支持大家自行编译源码。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">需要注意的是，现在我的开发平台是 Fedora 37 上的 openjdk 17。所以大家编译源码最好使用 openjdk17。编译好的 war 包运行在 apache tomcat 9.0 上。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">已有 jdk8 的用户报告默认下载的代码生成器 war 包在他的平台上无法运行。您如果遇到类似问题请报告。我的电子邮件是：<a href="https://www.oschina.net/action/GoToLink?url=mailto%3Ajerry_shen_sjf%40qq.com" target="_blank">jerry_shen_sjf@qq.com</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">附 openjdk 17 下载地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fjdk.java.net%2Fjava-se-ri%2F17">https://jdk.java.net/java-se-ri/17</a></p><h3>使用前端功能的注意事项</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">由于图片文件比较大，原来前端使用 cnpm instll 安装类型，npm run dev 运行有所改动，改为先使用 npm install --registry=<a href="https://gitee.com/link?target=https%3A%2F%2Fregistry.npm.taobao.org%25E5%25AE%2589%25E8%25A3%2585%25E7%25B1%25BB%25E5%25BA%2593%25EF%25BC%258C%25E5%2587%25BA%25E9%2594%2599%25E5%2590%258E%25E4%25BD%25BF%25E7%2594%25A8cnpm">https://registry.npm.taobao.org 安装类库，出错后使用 cnpm</a><span>&nbsp;</span>install 安装类库， 使用 node --max-http-header-size=1000000 ./node_modules/.bin/webpack-dev-server --inline --progress --config build/webpack.dev.conf.js　 运行系统。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">您也可以从安装好的本系列代码生成器的前端项目中拷贝 node_modules 目录，即可运行前端。</p><h4>node-sass 不兼容的解决办法</h4><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">办法一：</p><div><div><pre><span>npm uninstall node-sass</span><span>npm install sass-loader</span><span>npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">办法二：</p><div><div><pre><span>npm uninstall sass-loader node-sass //卸载</span><span>npm install sass-loader@7.3.1 node-sass@4.14.1 --save-dev //安装对应的版本</span></pre><div>
   &nbsp;
  </div></div></div><h3>动词算子式代码生成器的应用场景</h3><ol><li>快速原型：项目或演示场景使用。可以生成具有关系型数据库后端，使用 MyBatis 的数据库后端和 Vue 和 ElementUI 前端。</li><li>项目前期：如果项目和动词算子式代码生成器兼容，可以使用动词算子式代码生成器执行项目前期的自动化生成。</li></ol><h3>源码研读者注意事项</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">无垠式代码生成器第一个完整版本源码，有兴趣可以抄写一下：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5">https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">相关技术视频：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fX4y1u7Bn%2F">https://www.bilibili.com/video/BV1fX4y1u7Bn/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1rv41187qY%2F">https://www.bilibili.com/video/BV1rv41187qY/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xv41187cA%2F">https://www.bilibili.com/video/BV1xv41187cA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1t64y1v7WA%2F">https://www.bilibili.com/video/BV1t64y1v7WA/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273087/fairchild-2-4-0-released</guid>
            <link>https://www.oschina.net/news/273087/fairchild-2-4-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中国开源开发者报告》正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center">《2023 中国开源开发者报告》正式发布。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-acb8a37b712e865f5503ef42f50d1364d40.png" referrerpolicy="no-referrer"></p><p>此报告由开源中国与 Gitee 发布，整体分为三章，分别是：</p><ul><li><p>第一章《开源开发者事件回顾》</p></li><li><p>第二章《2023 LLM 技术报告》</p></li><li><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中国开发者开源新动向》</p></li></ul><p>&nbsp;</p><p>毫无疑问，开源开发者圈子来看，2023 年是大模型 LLM 年、生成式 AI GenAI 年。</p><p>LLM 领域大放异彩，此报告浓墨重彩地在《2023 LLM 技术报告》中梳理了 2023 年 LLM 的技术行情。报告整体围绕 LLM Tech Map 梳理逻辑来展开，从基础设施、大模型、Agent、AI 编程、工具和平台，以及算力几个方面，为开发者整理了当前 LLM 中最为热门和硬核的技术领域以及相关的软件产品和开源项目。</p><p style="text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-8ed4d8f6c27fc4df42c56ed8660ba9ec23b.png" referrerpolicy="no-referrer"></p><p><strong>《2023 LLM 技术报告》详情可查看（这是子报告）：</strong><br><strong><a href="https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf</a></strong></p><p>&nbsp;</p><p>除了 LLM，开源开发者圈当然还有更多高亮事件，此次年度报告中整理成了另一篇章《开源开发者事件回顾》，这一篇章梳理成了 9 个大块：</p><ul><li><p>【AIGC】回顾 2023 大语言模型 LLM 元年的重磅事件。</p></li><li><p><span style="color:#27ae60"><strong>【1024 黄金眼】关注 IT 相关民生事件，以老百姓的眼睛看 IT 圈，和开发者零距离接触。</strong></span></p></li><li><p>【项目停更】到了该说「再见」的时候了，江湖有缘再见。</p></li><li><p><span style="color:#27ae60"><strong>【生产事故】冥场面！速来围观 2023 十大生产事故「名场面」。</strong></span></p></li><li><p>【开源治理】开源健康发展必不可少的一环。</p></li><li><p><span style="color:#27ae60"><strong>【硬核发版】最硬核、最极客的年度发版汇总！</strong></span></p></li><li><p>【热门话题】回顾 2023 年度热门开发者事件！</p></li><li><p><span style="color:#27ae60"><strong>【重磅官宣】2023 年度开源官宣。</strong></span></p></li><li><p>【R.I.P.】谨以此篇纪念今年离我们而去的行业巨擘。</p></li></ul><p>这些事件，作为圈内人的你还有印象吗？</p><p>&nbsp;</p><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中国开发者开源新动向》中，采用 Gitee 与 OSS Compass 作为数据来源，试图通过数据来反映 2023 年开源开发者圈子的相关情况。亮点数据：</p><ul><li><p>TypeScript 是增长最快的编程语言，增长率达到 49.04%</p></li><li><p>MulanPSL-2.0 在「2023 年使用增长率最快的开源许可证」中排行第二，增长率为 18.34%</p></li><li><p>较为活跃的社区代表： OpenHarmony、openEuler 与 MindSpore</p></li></ul><p>&nbsp;</p><p><strong><span style="background-color:#e67e22">详情请查看完整报告：</span><br><a href="https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273070/china-open-source-2023-annual-report</guid>
            <link>https://www.oschina.net/news/273070/china-open-source-2023-annual-report</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国信通院发布「方升」大模型基准测试体系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 24 日，中国信息通信研究院（简称「中国信通院」）发布「方升」大模型评测体系，旨在建立业界大模型基准测试统一的「度量衡」。「方升」测试体系涵盖大模型基准测试的关键四要素，即测试指标、测试方法、测试数据集和测试工具，目前已形成《大规模预训练模型基准测试-总体技术要求》标准。</span></p><p><img height="167" src="https://oscimg.oschina.net/oscnet/up-ebb8952d715044001bb29e8d67808584ad5.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-8b441a7bb22997359392d02a0644c603284.png" width="500" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试指标方面，「方升」测试体系主要针对行业、应用、通用和安全四个维度对大模型进行全面、客观、统一的评估，为了加速大模型应用落地，重点强化了行业和应用导向能力的考查。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">在测试方法方面，「方升」测试体系创新性提出自适应动态测试方法，从测试数据标签化、测试题库实时化、测试方案定制化、测试流程自动化四个方面全面提升大模型基准测试质量，重点解决大模型「刷榜」问题。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试数据方面，<span>「</span>方升」测试体系搭建动态测试数据库，涵盖测试数据集 107 个，测试数据条数达到 123 万，联合产业界多家机构首次推出面向行业、通用、应用、安全领域的评测数据集 6 个。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试框架与工具方面，中国信通院在构建超自动化测试平台和智能化结果评估系统方面持续发力，探索解决国内外人工智能自动化测试流程中存在的「阻塞点」，全面提高测试效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">「方升」大模型基准测试体系由中国信通院联合北京智源研究院、认知智能全国重点实验室和天津大学共同发布。此外，国网智能电网研究院、首都之窗、天津大学、中国电信研究院、中国联通软件研究院、华为、甲骨易、海天瑞声、东方财富 9 家单位成为「方升」大模型基准测试首批合作伙伴。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273067</guid>
            <link>https://www.oschina.net/news/273067</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中国开源开发者报告》]]>
            </title>
            <description>
                <![CDATA[此报告由开源中国与 Gitee 发布，整体分为三章，分别是：第一章《开源开发者事件回顾》、第二章《2023 LLM 技术报告》、第三章《<gitee ×="" oss="" compass=""> Insight：中国开发者开源新动向》...</gitee>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[《2023 大语言模型 LLM 技术报告》]]>
            </title>
            <description>
                <![CDATA[从基础设施、大模型、Agent、AI 编程、工具和平台，以及算力几个方面，为开发者整理了当前 LLM 中最为热门和硬核的技术领域以及相关的软件产品和开源项目。]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[BMF —— 下一代视频处理引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BMF（Babit Multimedia Framework）是字节跳动开发的跨平台、可定制的多媒体处理框架。经过 4 年多的测试和改进，BMF 已经过量身定制，能够熟练地应对现实生产环境中的挑战。目前广泛应用于字节跳动的视频串流、直播转码、云剪辑以及移动端前/后处理场景。该框架每天处理超过 20 亿个视频。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>以下是一些主要功能：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p><span><span>跨平台支持：与 Linux、Windows 和 Mac OS 原生兼容，并针对 x86 和 ARM CPU 进行优化。</span></span></p></li><li><p><span><span>易于使用：BMF 提供 Python、Go 和 C++ API，使开发人员能够灵活地用自己喜欢的语言进行编码。</span></span></p></li><li><p><span><span>可定制性：由于其解耦的架构，开发人员可以通过添加自己的模块来增强框架的功能。</span></span></p></li><li><p><span><span>高性能：BMF 拥有强大的调度器，对异构加速硬件的强大支持。此外还有与&nbsp;<a href="https://www.nvidia.com/"><strong>NVIDIA</strong></a>&nbsp;合作开发的高度优化的 GPU 管道，用于视频转码和 AI 推理。</span></span></p></li><li><p><span><span>高效的数据转换：BMF 提供跨流行框架（PyTorch/OpenCV/TensorRT）以及硬件设备（CPU/GPU）之间的无缝数据格式转换。</span></span></p></li></ul><p style="text-align:start"><img alt="" height="375" src="https://static.oschina.net/uploads/space/2023/0824/164846_r8VC_4252687.gif" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bmf</guid>
            <link>https://www.oschina.net/p/bmf</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 跨平台的 hap 查看器 HapViewer]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-hapviewer" class="anchor" href="https://gitee.com/westinyang/hap-viewer#hapviewer"></a>HapViewer</h1><img src="https://gitee.com/westinyang/hap-viewer/raw/master/src/main/resources/icon/icon.png" width="128px" referrerpolicy="no-referrer"><h2><a id="user-content-项目介绍" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p>一个跨平台的 hap 查看器，方便开发者在电脑上预览 hap 的信息，并提供一键安装到设备等功能</p><p>目前支持解析的应用</p><ul><li>应用平台：OpenHarmony、HarmonyOS</li><li>编译目标：API9+</li><li>应用模型：Stage（FA 模型暂不考虑）</li></ul><p>开源仓库</p><ul><li><a href="https://gitee.com/westinyang/hap-viewer">Gitee</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwestinyang%2Fhap-viewer">Github</a></li></ul><h3><a id="user-content-系列项目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E7%B3%BB%E5%88%97%E9%A1%B9%E7%9B%AE"></a>系列项目</h3><ul><li><strong>电脑版（跨平台）</strong>：<a href="https://gitee.com/westinyang/hap-viewer">westinyang/hap-viewer</a></li><li>手机版（Android）：<a href="https://gitee.com/westinyang/hap-viewer-android">westinyang/hap-viewer-android</a></li></ul><h3><a id="user-content-衍生项目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A1%8D%E7%94%9F%E9%A1%B9%E7%9B%AE"></a>衍生项目</h3><ul><li><a href="https://gitee.com/ericple/hapv-cli">hapv-cli</a><code>命令行版的 hap 查看器，目前由@ericple 维护</code></li></ul><h2><a id="user-content-下载安装" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85"></a>下载安装</h2><ul><li><a href="https://gitee.com/westinyang/hap-viewer/releases">https://gitee.com/westinyang/hap-viewer/releases</a></li></ul><h2><a id="user-content-使用说明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用说明</h2><ul><li>安装和卸载功能需要自己配置好 hdc 到环境变量</li><li>由于目前 hdc 的 bug，hdc list targets 不显示 Android 设备，但安装时候会监测到 Android 设备，如果同时连接 Android 和 OpenHarmony 设备，使用 hdc 安装命令会提示需要指定一个（我觉得这是个 bug），那目前软件本身还没有做设备列表的读取和选择，只支持连接一个设备进行操作</li></ul><h2><a id="user-content-开发技术" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF"></a>开发技术</h2><blockquote><p>GraalVM 让 Java 再次变得强大，使用<code>NativeImage</code>把程序编译为目标平台的可执行文件，脱离 jvm 直接运行，启动速度快，内存负载低。<br>
关于 GraalVM 技术的最佳实践和教程，请参考我的另一个开源项目：<a href="https://gitee.com/westinyang/java-graalvm-start">westinyang/java-graalvm-start</a></p></blockquote><ul><li>GraalVM CE 22.3.0 (Java 17) Native Image</li><li>JavaFX 21-ea+5</li><li>ControlsFX 11.1.2</li><li>gluonfx-maven-plugin</li></ul><h2><a id="user-content-功能列表" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8"></a>功能列表</h2><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 打开应用（选择、拖拽、默认打开方式）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析应用（基本信息、逆向解析 resources.index 读取应用名称）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 技术探测（原生开发、Cocos、Flutter、Qt）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 实用工具（安装、重装、卸载、解压）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析 API9 Stage 模型的安装包</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""><del>解析 API9 FA 模型 (ArkTS/JS) 的安装包</del></li></ul><h2><a id="user-content-兼容测试" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%95"></a>兼容测试</h2><ul><li>Windows 7 <code>未测试，理论兼容</code></li><li>Windows 10/11 <code>已测试</code></li><li>macOS 11.x Big Sur (Intel) <code>已测试</code></li><li>Ubuntu 20.04 <code>已测试</code></li></ul><h2><a id="user-content-截图预览" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E6%88%AA%E5%9B%BE%E9%A2%84%E8%A7%88"></a>截图预览</h2><p><img src="https://gitee.com/westinyang/hap-viewer/raw/master/screenshot/all.png" alt="" referrerpolicy="no-referrer"></p><h2><a id="user-content-视频演示" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A7%86%E9%A2%91%E6%BC%94%E7%A4%BA"></a>视频演示</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1HX4y127ub">OpenHarmony 首个跨平台的 hap 查看器，将 Open 进行到底，为开源鸿蒙生态助力</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1cg4y197mc">开源鸿蒙 hap 查看器，新增探测 Flutter、Qt 技术，安卓版新主题</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Wb4y1T7VL">开源鸿蒙 hap 查看器，里程碑式新算法，API9~10、系统应用也支持</a></li></ul><h2><a id="user-content-许可声明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%AE%B8%E5%8F%AF%E5%A3%B0%E6%98%8E"></a>许可声明</h2><ul><li>本项目是以 Apache2.0 许可开源，如需衍生或商用请注明出处</li><li>软件图标出处：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.flaticon.com%2Ffree-icon%2Fapk_9704667">https://www.flaticon.com/free-icon/apk_9704667</a></li></ul>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/westinyang/hap-viewer</guid>
            <link>https://gitee.com/westinyang/hap-viewer</link>
        </item>
        <item>
            <title>
                <![CDATA[博通宣布终止现有 VMware 合作伙伴计划]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.crn.com%2Fnews%2Fvirtualization%2Fbroadcom-hands-vmware-partners-termination-notice" target="_blank">外媒报道称</a></u>，博通近日宣布将在 2024 年 2 月 4 日终止 VMware 此前与经销商签订的「所有合作伙伴协议」，要求原有经销商必须与博通重新签约，且只有营收流水超过 50 万美元（当前约 357 万元人民币）以上的经销商才能加入新的计划，其他合作伙伴都无法再销售 VMware 产品。 &nbsp;</p><p>这一策略引发了部分经销商的不满和担忧。他们认为博通此举破坏了信任，并表示对于小型经销商而言，这将是一个艰难的年末。一些合作伙伴表示，他们需要重新审视与 VMware 的关系，并考虑是否继续销售 VMware 产品。</p><p>博通对 VMware 的重组不仅对合作伙伴关系产生影响，也引发了对 VMware 未来发展的关注。业界观察家表示，博通需要平衡 VMware 的既有业务和新战略方向，以确保公司的长期发展。</p><p>随着博通对 VMware 业务重组的深入推进，业界将关注其未来的战略动向，以及如何平衡既有业务和新战略的关系。对于合作伙伴和经销商而言，他们将面临重新签约和适应新战略的挑战。</p><p>博通（Broadcom）此前以 690 亿美元（当前约 4926.6 亿元人民币）并购 VMware，之后解雇了 1300 名 VMWare 员工，并将 VMware 云服务「永久许可证」改为订阅制度。</p><p><strong>延伸阅读</strong></p><ul><li><a href="https://www.oschina.net/news/270967/vmware-by-broadcom-business-transformation" target="news">VMware 产品全面改为订阅制</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</guid>
            <link>https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 万字带你熟悉静态分析工具的评估测试]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F418850%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">静态分析工具的评估测试</a>》，作者： Uncle_Tom。</p><span id="OSC_h1_1"></span><h1>1. 垂直极限</h1><p>还是先说故事。那是 2014 年参加的一个测试驱动（TDD）的培训，培训是 TDD 推广的志愿者组织的，在一个咖啡馆里搞的，周末两天的免费培训。</p><p>培训过程中的一张图和一个视频让我至今记忆尤新。</p><span id="OSC_h2_2"></span><h2>1.1. 一张图</h2><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421009200317830.png" referrerpolicy="no-referrer"></p><p>上面的两个图（原来培训的那个图找不到了，自己随手涂鸦了一下）。</p><p>左边是经过完整的系统的测试的软件产品，每个节点都通过测试，这样一层层的搭建起来的系统。看着就坚实可靠。</p><p>右边的测试则是随意的，很多地方都缺失了。任何一个风吹草动，一个异常都可能造成整个大厦倾覆。</p><p>不用说大家立刻就可以看懂，那个软件产品更可靠，更让人放心。</p><span id="OSC_h2_3"></span><h2>1.2. 一段影像</h2><p>视频是电影《垂直极限》中开头的一段。虽然过去 20 多年了，但这部电影仍然被奉做山难电影的经典之作，有兴趣的朋友还是可以找来看一看的。</p><p><img alt="Vertical_limit" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703420993405166999.png" referrerpolicy="no-referrer"></p><p>一个风和日丽的日子里，老爸带着儿子、女儿在一个高耸、陡峭的山峰上攀岩。他们已经来到了山峰的一半，在他们的上面个还有另一群攀岩爱好者。</p><p>老爸一边整理着自己的安全栓（攀岩过程中打在岩石中，然后利用登山绳固定自己的安全扣），一边对儿子说：「检查下你妹妹的安全栓。」</p><p>儿子看向下面的妹妹，妹妹说：「告诉他我们已经不是小孩子了。」</p><p>儿子打趣的对老爸说：「爸，她还需要一个安全栓。」</p><p>爸爸看向下面的兄妹两人说：「万一出事，那样可撑不住。安妮，我不管你有多老练，聪明的攀岩者都会做好安全措施，两个栓才安全，三个更好。在岩壁上再放个安全栓，我们才继续攀。」</p><p>女儿生气的对爸爸说：「爸，你别听哥哥的，他在开玩笑，我放了三个安全栓。」</p><p>电影总是这样，一段舒缓的节奏后面，总会有段紧张的让人喘不过气来的场面。不出意外，意外就会发生。</p><p>话音未落，先是一个登山包从山上面坠落下来，快速的经过三人。上面的菜鸟在登山的过程中揹包意外脱落，帮着的圣山包的登山绳造成一连串的连锁反应，两个登山者也不幸地被连带着坠落下去。老爸、儿子也被着一连串的变故拖累到挂在了半空中，女儿的三个安全栓无法承担三个人的重量，一个、两个先后崩飞，只靠着最后的一个安全栓勉强的维持着女儿，以及挂在半空的老爸和儿子。最后在老爸的要求下，儿子不得不割断了绳索，女儿和儿子看着老爸坠了下去。</p><p>看到这里，大家都不禁须臾不已，再看看上面的图，对系统的完整的测试有了更深刻的认识。</p><span id="OSC_h2_4"></span><h2>1.3. 思考</h2><p>在软件的开发过程中，每一个节点的测试都是在为系统增加一个安全栓。由这样一层层搭建起来的系统，整个系统才是安全、可靠的。否则任何一个意外都可能将整个系统带飞。做工具和做单点能力验证不同，需要更多的测试节点来保障工具的稳定性和可靠性。这个从学院里出来的大部分朋友还没有意识到这个问题，加之项目的管理的问题，就会把各种坑坑洼洼带到生产中，使后期维护陷入无尽的深渊。</p><p>大家都喜欢做 0 到 1 的事情，出彩啊。很少有人愿意做为 0 到 1 填坑的基础工作，但一个工具要生存，能够赢得最终的胜利，需要无数的这些幕后英雄。就像长津湖战役一样，指挥很重要，但更多的是需要后面无数的无名英雄，那些人才是撑起整个胜利的英雄。</p><p>那么对于静态分析工具，我们该如何构建一个稳定、可靠的静态分析工具？如何评价一个静态分析工具的检查能力？</p><p>自从程序的诞生，程序分析便紧随其后，人们视图通过一个程序来分析编制的程序，保证编制程序运行结果的正确性。尽管后面的莱斯定理给出了这个问题的「不可判定性」，但并不会妨碍程序分析在这方面的卓越表现。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421059373679236.png" referrerpolicy="no-referrer"></p><p>尽管现在大模型能够帮助我们生成程序代码和对已有程序进行问题检查，这似乎可以绕过我们一值以来使用的模式匹配的检查方式，可以简化模式的提炼，和根据模式再编写检查规则。 但如何保障生成代码的安全性和可靠性，以及如何评估大模型的能力，仍然将是人工智能在今后很长一段时间需要解决的问题。</p><p>通过下面对三组测试用例的分析，希望能够给静态分析工具的测试和评估给大家一个指导性的启发。</p><span id="OSC_h1_5"></span><h1>2. Juliet Java、C/CPP 测试用例集</h1><span id="OSC_h2_6"></span><h2>2.1. 创建背景</h2><p>2005 年美国国家标准与技术研究院 (National Institute of Standards and Technology (NIST))，简称 NIST，下属的软件质量组，成立了软件保障指标和工具评估项目（Software Assurance Metrics And Tool Evaluation (SAMATE)），简称 SAMATE 项目。项目组的主要目的是通过开发支持软件工具评估的方法、衡量工具和技术的有效性以及识别工具和方法中的差距来改善软件保障，主要工作包括定义错误类，收集具有已知错误的程序语料库，以及更好地了解工具的有效性。</p><p>围绕这个目标，软件保障指标和工具评估项目（SAMATE）建立了两个子项目：</p><ul><li><p>软件保障参考数据集（Software Assurance Reference Dataset (SARD)），简称 SARD，用于收集整理 C、C++、Java、PHP 和 C#针对软件弱点的测试用例集；</p></li><li><p>软件工具博览会（Static Analysis Tool Exposition (SATE)），简称 SATE，用于工具制造商对用例进行测试和工具研讨。截至 2021 年，已经举办了六场 SATE 活动。</p></li></ul><span id="OSC_h2_7"></span><h2>2.2. Juliet 用例集简介</h2><p>Juliet 测试用例集就是软件保障参考数据集 (SARD) 下的一个是用于检测 C/C++ 和 Java 程序已知缺陷的集合。</p><p><strong>2010 年 12 月 1.0 版本。</strong>Juliet 测试用例集最早的 1.0 发布于 2010 年 12 月，由软件保障指标和工具评估项目（SAMATE）的开发团队完成，名字选取了当时软件保障参考数据集（SARD）的第十个贡献者：国际无线电（International Radiotelephony）的字母表中的第十个单词 「Juliet」 而的得名。</p><div><p><strong>2011 年 1.1 - 1.1.1 版本。</strong>Juliet 1.1 版本，是 Juliet 的开发团队根据多个因素为选定的缺陷创建了测试用例，包括团队的经验、缺陷的重要性或严重性以及其出现的频率。测试用例涵盖了 2011 年 CWE/SAN TOP 25 个最危险的编程错误中的 14 个。剩下的 11 个缺陷是设计问题，例如 CWE-862 授权机制缺失，和 CWE-250 带着不必要的权限执行，这些问题不适合用静态分析的方式来检测，所以未包含在测试用例中。</p><p><strong>2012 年 1.2 版本。</strong>2012 年的 Juliet 1.2 版本。基本形成了现在使用版本。是我们现在使用最多的版本，程序分析、自动修复、深度学习的论文基本上都使用了这里面的用例，用于证明理论、工具的有效性。</p></div><div><p><strong>2017 年 1.3 版本。</strong>只对 1.2 版本的个别错误进行了修正。</p><ul><li>Juliet C/C++ 涵盖 118 个 CWE 问题，1689 个场景，用例数: 181,140, 其中正例：117,041, 反例：64,099。</li><li>Juliet Java 涵盖 112 个 CWE 问题，933 个场景，用例数: 96,537, 其中正例：67,656, 反例：28,881。</li></ul><strong>2022 年 1.3.1 版本。</strong>增加了 SARIF 的支持，试图通过 SARIF 精确的给出告警的位置信息，但对数据流的支持的并不好，不能完全依靠现有的 SARIF 版本。 
 <p>注：关于 SARIF 请参考：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F245851" rel="nofollow" target="_blank">DevSecOps 工具与平台交互的桥梁 – SARIF 入门</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F254864" rel="nofollow" target="_blank">DevSecOps 工具与平台交互的桥梁 – SARIF 进阶</a></li></ul><span id="OSC_h2_8"></span><h2>2.3. Juliet 用例构造的特点</h2><span id="OSC_h3_9"></span><h3>2.3.1. 统一明确的命名方式</h3><p>测试用例使用 CWE 作为命名和组织的基础。测试用例力求对目标缺陷使用最具体的 CWE 条目。每个测试用例文件与一个 CWE 条目相关联。</p><span id="OSC_h4_10"></span><h4>2.3.1.1. 测试用例文件名命名规范</h4><p>测试用例名由四个元素的组合唯一标识：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>组成部分</th><th>描述</th><th>是否强制</th></tr></tbody><tbody><tr><td>CWE</td><td>字符</td><td>是</td></tr><tr><td>CWE ID</td><td>CWE 的编号</td><td>是</td></tr><tr><td>_</td><td>分隔，下划线</td><td>是</td></tr><tr><td>CWE 短描述</td><td>CWE 英文名称的缩短版本，单词之间用下划线"_"连接</td><td>是</td></tr><tr><td>__</td><td>分隔，两个下划线"_"</td><td>是</td></tr><tr><td>问题场景</td><td>表示用例场景。场景描述单词之间用下划线"_"连接</td><td>是</td></tr><tr><td>_</td><td>分隔，下划线，问题场景和案例编号之间进行连接</td><td>是</td></tr><tr><td>案例编号</td><td>基础案例编号采用「01」</td><td>是</td></tr><tr><td>一个案例多文件定义</td><td>对同一个案例，如使用多个文件，可采用 a，b 等进行区别，或采用下划线加不同的作用定义，例如_good 或_bad，表示正例或反例</td><td>否</td></tr></tbody></table><p>例如：</p><p>单文件用例：</p><strong>CWE190_Integer_Overflow__byte_console_readLine_add_01.java</strong><ul><li>CWE190： CWE 的编号，可以在 CWE 网站上查询到这个编号对应的问题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的简写，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 场景描述：通过 readLine 函数从控制界面读取字节流；</li><li>01：代表基础用例。</li></ul><p><strong>多文件用例, 下面的一组文件构成了一个用例：</strong></p><ul><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_bad.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_base.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodB2G.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodG2B.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81a.java 
   <ul><li>CWE190： CWE 的编号，可以在 CWE 网站上查询到这个编号对应的问题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的简写，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 场景描述：通过 readLine 函数从控制界面读取字节流；</li><li>81: 数据流案例，案例将参数传递给通过引用调用的抽象方法；</li><li>_bad: 表示这是个反例的文件；</li><li>_base: 表示这个是用例的主文件；</li><li>_goodB2G: good 表示这是个正例的文件，同时 B2G 表示污点（Bad）会经过清洗到达（2(to)）爆发点，但由于做了清洗，变成了无污染的，不会引起问题（Good）;</li><li>_goodG2B: good 表示这是个正例的文件，同时 G2B 表示污点经过清洗变成无污染（Good）到达（2(to)）爆发点（Bad），但由于是无污染的数据，也不会引起问题;</li><li>a: 表示这是个辅助文件。</li></ul></li></ul><span id="OSC_h4_11"></span><h4>2.3.1.2. 测试用例函数名命名规范</h4><p>有问题（反例）函数，通常以 bad 命名, 并可使用正则表达式匹配：<code>^bad$</code>;</p><p>没问题（正例）的函数，通常以 good 命名, 并可使用正则表达式匹配：<code>^good$</code>;</p> 对于用例中存在多个正例的函数，有以下三种命名方式，可使用正则表达式匹配： 
 <code>^good(\d+|G2B\d*|B2G\d*)$</code>; 
 <ul><li>默认或通用的方式，采用例如： good1（）、good2（）、good3（）的命名方式；</li><li>当一个好的源将安全数据传递到一个潜在的坏接收器时，采用例如：goodG2B（）、goodG2B1（）、goodG2B2（）、goodG2B3（） 的方式命名;</li><li>当不良源将不安全或潜在不安全的数据传递给良好源时，采用例如：goodB2G（）、goodB2G1（）、goodB2G2（）、goodB2G3（）的方式命名；</li></ul><ul><li>对于数据流用例还遵守以下命名方式：有问题的污染源，采用正则表达式：<code>^badSource$；</code>有问题的爆发点，采用正则表达式：<code>^badSink$；</code>无问题的污染源，采用正则表达式：<code>^good(G2B\d*|B2G\d*)?Source$；</code>无问题的爆发点，采用正则表达式：<code>^good(G2B\d*|B2G\d*)?Sink$</code>。</li></ul><span id="OSC_h4_12"></span><h4>2.3.1.3. 命名规则在测试中带来的好处</h4><p>从文件名就能判断出检测问题、场景、适用的案例类型，有的还可以知道文件是正例、还是反例；</p><p>从发生问题的函数名就可以知道，所处的函数是正例，还是反例；</p><p>通常检测工具都会给出问题所在的文件和函数，这样在查看问题的时候能够立刻判断出检测结果的有效性；</p> 严格的命名方式，也便于使用程序自动化的检查结果做出快速的判断。 
 <span id="OSC_h3_13"></span><h3>2.3.2. 每个问题给出发生问题的可能场景</h3><p>Juliet 还为每个问题（CWE）枚举了一些发生场景，一些场景还使用模板结合控制流和数据流进行了枚举，从而测试更加广泛的问题发生的可能性，以提高问题的覆盖率。</p><p>Juliet 一共采用了三类模板：</p><ul><li>控制流模板（point-flaw）</li><li>单一污点源和爆发点模板（source-sink）；</li><li>多污点源和爆发点模板（sources-sinks);</li></ul><p>Juliet Java</p><ul><li>Juliet Java 一共 122 个 CWE, 覆盖 933 个场景。</li><li>用模板生成的场景 823 个，这包括：point-flaw： 92 个场景；sources-sink： 197 个场景；sources-sinks： 534 个场景;</li></ul><ul><li>单一场景 110 个。</li></ul><p>Juliet C/C++</p><ul><li>Juliet C/C++ 一共 118 个 CWE, 覆盖 1689 个场景。</li><li>用模板生成的场景 1509 个，这包括：</li></ul><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>Template</th><th>C</th><th>CPP</th><th>Total</th></tr></tbody><tbody><tr><td>point-flaw</td><td>259</td><td>18</td><td>277</td></tr><tr><td>sources-sink</td><td>499</td><td>233</td><td>723</td></tr><tr><td>sources-sinks</td><td>357</td><td>152</td><td>509</td></tr><tr><td>Total</td><td>1106</td><td>403</td><td>1509</td></tr></tbody></table></div><div><p>而单一场景 180 个。</p><span id="OSC_h3_14"></span><h3>2.3.3. 每个场景使用不同的案例进行覆盖</h3><p>Juliet 用例还真对每个场景结合控制流和数据流进行了枚举，以达到每个场景在不同代码条件下的检测能力的覆盖。</p><p>从下表我们看到类型基本上涵盖了编程语言通常所需要的基本语法，例如条件判断（if），条件分支（swith），循环（while，for），函数间和程序间不同层数的调用，以及不同类型的参数传递方式。</p><p>案例类型明细</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>案列编号</th><th>案例类型（流类型）</th><th>类型描述</th><th>C</th><th>CPP</th><th>JAVA</th></tr></tbody><tbody><tr><td>01</td><td>无</td><td>基线——最简单的缺陷形式</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>02</td><td>控制流</td><td>if(true) 和 if(false)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>03</td><td>控制流</td><td>if(5==5) 和 if(5!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>04</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_TRUE) 和 if(PRIVATE_STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>05</td><td>控制流</td><td>if(privateTrue) 和 if(privateFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>06</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_FIVE==5) 和 if(PRIVATE_STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>07</td><td>控制流</td><td>if(privateFive==5) 和 if(privateFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>08</td><td>控制流</td><td>if(privateReturnsTrue()) 和 if(privateReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>09</td><td>控制流</td><td>if(IO.STATIC_FINAL_TRUE) 和 if(IO.STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>10</td><td>控制流</td><td>if(IO.staticTrue) 和 if(IO.staticFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>11</td><td>控制流</td><td>if(IO.staticReturnsTrue()) 和 if(IO.staticReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>12</td><td>控制流</td><td>if(IO.staticReturnsTrueOrFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>13</td><td>控制流</td><td>if(IO.STATIC_FINAL_FIVE==5) 和 if(IO.STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>14</td><td>控制流</td><td>if(IO.staticFive==5) 和 if(IO.staticFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>15</td><td>控制流</td><td>switch(6) and switch(7)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>16</td><td>控制流</td><td>while(true)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>17</td><td>控制流</td><td>for 循环</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>18</td><td>控制流</td><td>goto 语句</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>21</td><td>控制流</td><td>流由私有变量的值控制。所有方法都包含在一个文件中。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>22</td><td>控制流</td><td>流由公共静态变量的值控制。source 和 sink 在两个不同的文件里。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>31</td><td>数据流</td><td>在同一方法中使用数据副本流动</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>32</td><td>数据流</td><td>在同一个函数中使用两个指向同一个值的指针的数据流</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>33</td><td>数据流</td><td>在同一函数中使用对数据的 C++ 引用</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>34</td><td>数据流</td><td>使用包含两个访问相同数据的方法的联合（在同一函数内）</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>41</td><td>数据流</td><td>作为参数从一个方法传递到同一类中的另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>42</td><td>数据流</td><td>在同一类中从一个方法返回到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>43</td><td>数据流</td><td>数据使用 C++ 引用从同一源文件中的一个函数流向另一个函数</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>44</td><td>数据流</td><td>数据作为参数从一个函数传递到通过函数指针调用的同一源文件中的函数</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>45</td><td>数据流</td><td>作为私有类成员变量从一个方法传递到同一类中的另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>51</td><td>数据流</td><td>在同一个包的不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>52</td><td>数据流</td><td>在同一个包的三个不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>53</td><td>数据流</td><td>在同一个包的四个不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>54</td><td>数据流</td><td>在同一个包的五个不同类中作为参数从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>61</td><td>数据流</td><td>在同一个包的不同类中通过一个方法的返回值传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>62</td><td>数据流</td><td>使用 C++ 引用从不同源文件中的一个函数到另一个函数的数据流</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>63</td><td>数据流</td><td>指向不同源文件中从一个函数传递到另一个函数的数据的指针</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>64</td><td>数据流</td><td>void 指向不同源文件中从一个函数传递到另一个函数的数据的指针</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>65</td><td>数据流</td><td>数据作为参数从一个函数传递到通过函数指针调用的不同源文件中的函数</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>66</td><td>数据流</td><td>在同一个包中的不同类中通过数组从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>67</td><td>数据流</td><td>在同一个包中的不同类中通过类从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>68</td><td>数据流</td><td>在同一个包中的不同类中通过类的成员变量从一个方法传递到另一个方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>71</td><td>数据流</td><td>在同一个包中的不同类中通过类的引用从一个方法传递到另一个方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>72</td><td>数据流</td><td>在同一个包中的不同类中将向量从一个方法传递到另一个方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>73</td><td>数据流</td><td>在同一个包中的不同类中将 LinkedList 从一个方法传递到另一个方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>74</td><td>数据流</td><td>在同一个包中的不同类中将 HashMap 从一个方法传递到另一个方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>75</td><td>数据流</td><td>将序列化对象从一个方法传递到同一包中不同类中的另一个方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>81</td><td>数据流</td><td>将参数传递给通过引用调用的抽象方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>82</td><td>数据流</td><td>将参数传递给通过指针调用的虚函数的数据</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>83</td><td>数据流</td><td>通过在堆栈上声明类对象将数据传递给类构造函数和析构函数</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>84</td><td>数据流</td><td>通过在堆上声明类对象并在使用后将其删除来传递给类构造函数和析构函数的数据</td><td>N</td><td>Y</td><td>N</td></tr></tbody></table><span id="OSC_h3_15"></span><h3>2.3.4. 缺点</h3><p>Juliet 可以说是堪称完美的测试用例集，但随着时间的推移，编程语言的迭代，它也显现出一些缺点：</p><ul><li>一些用例的写法开始变得老旧，可能不能胜任新的场景；</li><li>没有对语言的所有语法特点做覆盖，特别是新的一些语法类型；比如：lamda 表达式；</li><li>用例的设计存在大量的重叠，特别是对数据流的检测，每个场景都使用了相同的模板，产生了大量的用例。其实对于数据流的处理，完全可以分成：污染源、污染传递、污染清理、以及爆发四个不同的维度进行分别测试，这样可以大大提升测试效率。</li></ul><span id="OSC_h1_16"></span><h1>3. OwaspBenchmark 测试用例集</h1><span id="OSC_h2_17"></span><h2>3.1. 用例背景</h2><p>OWASP(Open Worldwide Application Security Project (OWASP)) 基金会致力于通过其社区主导的开源软件项目、全球数百个分会、数万名成员以及举办当地和全球会议来提高软件的安全性。</p><span id="OSC_h2_18"></span><h2>3.2. 用例简介</h2><p>OWASP Benchmark Project 是一个 Java 测试套件，旨在评估自动化软件漏洞检测工具的准确性、覆盖率和速度。</p><ul><li>1.0 版本于 2015 年 4 月 15 日发布，共有 20983 个测试用例。</li><li>1.1 版本于 2015 年 5 月 23 日发布。1.1 版本在前一版本的基础上进行了改进，确保每个漏洞区域都有真阳性和假阳性。</li><li>1.2 版本于 2016 年 6 月 5 日首次发布（1.2 测试版于 2015 年 8 月 15 日发布）。自那以后，v1.2 版本一直在不断调整。1.2 版本将测试用例数量控制在小于 3000 个测试用例，以便快速得到测试结果。</li></ul><span id="OSC_h2_19"></span><h2>3.3. 用例设计和组成方式</h2><p>下面以 1.2 版本为例进行说明。</p><span id="OSC_h3_20"></span><h3>3.3.1. 用例问题的覆盖</h3><p>从下面这个表可以看出 Benchmark 更多的注重复盖 Web 类的问题的检查，同时重点覆盖了 OWASP TOP 10 中的主要能够通过静态检查工具检查的问题。关于 OWASP TOP 10 可以参考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F312926" rel="nofollow" target="_blank">CWE 4.6 和 OWASP TOP10(2021)</a>。</p><p>Benchmark 用例集主要以加密问题，以及注入类问题为主，这也巧合的与静态检查技术相互匹配。加密问题多用抽象语法树（AST）的遍历来返现加密函数，并对其做出判断。而注入类问题多用数据流的污点分析技术来追踪外部输入是否会对爆发点形成可达的路径。有关污点分析技术，可以参考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F330804" rel="nofollow" target="_blank">使用污点分析检查 log4j 问题</a>。</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>检测问题</th><th>CWE TOP 25（2023）</th><th>OWASP TOP 10（2021）</th><th>正确用例</th><th>错误用例</th><th>用例总数</th></tr></tbody><tbody><tr><td>CWE-22 对路径名的限制不恰当 (路径遍历)</td><td>8</td><td>A01：2021-中断访问控制</td><td>135</td><td>133</td><td>268</td></tr><tr><td>CWE-327 使用已被攻破或存在风险的密码学算法</td><td>-</td><td>A02：2021-加密故障</td><td>116</td><td>130</td><td>246</td></tr><tr><td>CWE-328 可逆的单向哈希</td><td>-</td><td>A02：2021-加密故障</td><td>107</td><td>129</td><td>236</td></tr><tr><td>CWE-330 使用不充分的随机数</td><td>-</td><td>A02：2021-加密故障</td><td>275</td><td>218</td><td>493</td></tr><tr><td>CWE-501 违背信任边界</td><td>-</td><td>A04：2021-不安全的设计</td><td>43</td><td>83</td><td>126</td></tr><tr><td>CWE-614 HTTPS 会话中未设置’Secure’属性的敏感 Cookie</td><td>-</td><td>A02：2021-加密故障</td><td>31</td><td>36</td><td>67</td></tr><tr><td>CWE-643 XPath 表达式中数据转义处理不恰当 (XPath 注入)</td><td>-</td><td>A03：2021-注入</td><td>20</td><td>15</td><td>35</td></tr><tr><td>CWE-78 OS 命令中使用的特殊元素转义处理不恰当 (OS 命令注入)</td><td>5</td><td>A03：2021-注入</td><td>125</td><td>126</td><td>251</td></tr><tr><td>CWE-79 在 Web 页面生成时对输入的转义处理不恰当 (跨站脚本)</td><td>2</td><td>A03：2021-注入</td><td>209</td><td>246</td><td>455</td></tr><tr><td>CWE-89 SQL 命令中使用的特殊元素转义处理不恰当 (SQL 注入)</td><td>3</td><td>A03：2021-注入</td><td>232</td><td>272</td><td>504</td></tr><tr><td>CWE-90 LDAP 查询中使用的特殊元素转义处理不恰当 (LDAP 注入)</td><td>-</td><td>A03：2021-注入</td><td>32</td><td>27</td><td>59</td></tr></tbody></table><span id="OSC_h3_21"></span><h3>3.3.2. 问题场景的覆盖</h3><p>Benchmark 用例对每个问题采用: 场景枚举 + 组合的方式完成用例的设计，并通过此方法形成问题的覆盖。</p><p>这里以我们熟悉的：CWE89 SQL 注入问题来说明这种用例的设计方式。用例集中 CWE 89 SQL 注入问题一共有 232 个正例，272 个反例，共计 504 个用例。</p><p>因为 SQL 是注入是通过外部不可信数据，传播到 SQL 脚本执行的位置而导致的安全问题。这个外部数据传播的过程可以分为：</p><ul><li>接收数据</li></ul><p>用例使用了我们常用的从 http 请求中得到外部数据，然后将数据以不同方法存入不同类型的字段。用例中列举了下面 9 种不同的方法。例如放入：字符串、枚举、数组等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604543686840668.png" referrerpolicy="no-referrer"></p><ul><li>数据传递</li></ul><p>用例接收到数据后，使用不同的传递方式，向程序内传递，并对信息采用不同的操作方式进行加工。用例中列举了下面 10 种不同的方法。例如：通过，创建一个新类然后调用函数传递、if 条件表达式、内部类等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604561629143041.png" referrerpolicy="no-referrer"></p><ul><li>问题爆发</li></ul><p>最终数据会拼装成 SQL 语句，并通过不同的调用方式执行。用例中列举了 3 类，28 种不同的执行方式。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604573373250631.png" referrerpolicy="no-referrer"></p><ul><li>场景组合</li></ul><p>得到上面三种基本节点后，通过组合的方式形成用例。下表列举了 CWE89 SQL 注入 272 个反例组合的场景：</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604585829917726.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_22"></span><h3>3.3.3. OwaspBenchmark 用例集的缺点</h3><p>OwaspBenchmark 应为涵盖了 Web 应用的主要安全问题，使用例集基本上成为了 Web 应用安全测试的基本用例集。但它也存在一些缺点。</p><ul><li>用例名只采用了简单的编号方式，从用例看不出测试目标：用例反应的问题、场景、正例、反例这些基本信息，而不得不给每个用例加了一个 xml 文件来说明这些用例的基础信息。</li><li>用例缺少场景的描述，工具测试后，无法得到覆盖场景和非覆盖场景的统计信息，只知道覆盖率。具体哪些场景缺失，要一个个用例去自己分析。</li><li>缺少检测语言语法级别的场景的覆盖，例如 lamda 表达式，工具在数据流的分析过程中，任何一个语法的不适配都会导致分析中断。</li></ul><span id="OSC_h1_23"></span><h1>4. Alipay 测试用例集</h1><span id="OSC_h2_24"></span><h2>4.1. 用例背景</h2><p>针对 xAST 领域缺乏有效衡量技术能力标准的业界痛点，蚂蚁安全团队联合蚂蚁程序分析团队、浙江大学网络空间安全学院的 20 余位专家学者，共同设计了 xAST 评价体系及其测试样本套件 Benchmark，致力于成为应用安全测试工具的「度量衡」。</p><ul><li><p>目标：打造具备行业共识的 xAST 能力评价体系技术标准</p></li><li><p>价值：衡量 xAST 产品技术能力，指引 xAST 技术发展方向，辅助企业产品选型</p></li></ul><span id="OSC_h2_25"></span><h2>4.2. 用例设计和组成方式</h2><p>用例设计的核心思想是：分层设计，降低评价复杂度。</p><p>从底层到上层分成引擎能力、规则能力和产品化能力这三层。对这三层分别设计评价体系和测试样本，既降低了每一层评价的复杂度，又使测试结果可以直接反映问题出在哪一层。</p><p>看的出，用例集的设计者试图希望结合 Juliet、Owaspbenchmark 的优点，在形成一种分层的评估测试方式。来完善前面两个用例集在语法层面的不足。</p><p>目前用例集只推出了一个雏形，还在建设中。</p><span id="OSC_h1_26"></span><h1>5. 理想的测试用例集</h1><p>最后再来总结下，理想的测试用例集应该是怎样的。</p><ul><li>能够从用例的命名上，清楚的反映：测试问题、场景、正例、反例；或从目标函数上明确知道在这个函数内的告警是正确的告警，还是误报；</li><li>能够覆盖业界主要的安全问题，例如：CWE TOP 25、OWASP TOP 10 等常见的问题；</li><li>能够覆盖检测语言的主要语法和语言的主要使用方式；</li><li>能够有一定的场景枚举和组合，以增加测试用例的复杂度，这有点类似 fuzzy 测试了。</li></ul><p>写在最后，测试用例集的结果，只能反映一个工具的基础能力，并不能取代通过实际的工程来打磨检查工具。</p><p>一般的程序员只需要在问题和实现上建立一条通道就好，但程序分析的程序员却需要考虑各种程序员实现问题的可能性。</p><span id="OSC_h1_27"></span><h1>6. 参考</h1><ul><li>SAMATE:<span>&nbsp;</span>https://www.nist.gov/itl/ssd/software-quality-group/samate</li><li>SARD:<span>&nbsp;</span>https://samate.nist.gov/SARD/</li><li>Juliet C/CPP 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/112</li><li>Juliet Java 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/111</li><li>owasp benchmark:<span>&nbsp;</span>https://owasp.org/www-project-benchmark/</li><li>Alipay sast:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falipay%2Fant-application-security-testing-benchmark" rel="nofollow" target="_blank">https://github.com/alipay/ant-application-security-testing-benchmark</a></li></ul><p>&nbsp;</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10433132</guid>
            <link>https://my.oschina.net/u/4526289/blog/10433132</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鸿祎：鸿蒙原生必将成功]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>360 集团创始人、董事长周鸿祎今日在微博宣布，360 浏览器等应用完成了鸿蒙原生核心版本的开发。并表示，未来还会把全线产品转移到鸿蒙生态里。</p><blockquote><p><span style="color:#333333">我在直播里很多次旗帜鲜明地表态，任何情况下都会支持华为，不能只停留在口号。今天我们正式宣布 360 浏览器等应用完成了鸿蒙原生核心版本的开发，未来我们还会把全线产品转移到鸿蒙生态里。我相信鸿蒙会成为中国最大的操作系统，鸿蒙原生必将成功。</span></p></blockquote><p><img height="391" src="https://oscimg.oschina.net/oscnet/up-f5c3b4b96af20fc9564ad022c5e8336ee24.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272979</guid>
            <link>https://www.oschina.net/news/272979</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RISC-V 新成果！openKylin 社区完成对 RV64G 架构支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 社区继与深度数智联合发布默认搭载 openKylin 1.0 操作系统的全球首款 RISC-V 笔记本电脑 DC-ROMA 后，近日，联合苏州睿芯公司，</span><strong><span style="color:#000000">openKylin 平台正式部署上线对 RV64G 架构支持</span></strong><span style="color:#000000">，后续 RV64G 非压缩指令集爱好者可以通过社区平台开发编译并部署自己的代码。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-d435b9748188f6ead24dab10652e7b259f4.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RISC-V 是一个自由的指令集，硬件厂商可以基于国际基金会认可的标准，自主扩展，目前市场上很多厂商是基于 RV64GC 来生产产品，但是也有厂商基于 RV64G 来生产产品，为配合国内厂商的市场需求，openKylin 社区率先推出对 RV64G 架构支持。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">一、RV64G 架构简介</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">相比较于目前在嵌入式小型设备上应用更广泛的 RV64GC（即大家比较熟悉的 riscv64）, RV64G 更加聚焦于通用计算场景功能，服务器或者桌面系统。其中：</span></span></p><ul><li><span><span style="color:#000000">「RV」代表 RISC-V；</span></span></li></ul><ul><li><span><span style="color:#000000">「64」代表所支持的指令是 64 位的（实际上，交叉编译器在生成代码时可能会采用 32 位指令减小生成的目标代码长度），地址长度和寄存器长度都为 64 位；</span></span></li><li><span><span style="color:#000000">「G」代表通用（General）计算平台。实际上，「G」等效于「IMAFD」，其中「I」代表整数（Integer）计算指令、整数 load、整数 store 以及控制流（如分支跳转）指令，这些指令在任何 RISC-V 的实现中都是必须的；「M」代表乘法（Multiply），即平台支持乘法和除法运算；「A」代表原子（Atomic）扩展，支持对寄存器进行的原子读、修改和原子写操作，这些操作在多核设计中非常有用；「F」代表单精度浮点（Float）运算支持，「D」代表双精度浮点（Double）运算支持。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RV64G 和 RV64GC 之间的主要区别在于是否包含压缩指令集（C 指令集）。RV64GC 在 RV64G 的基础上增加了 C 指令集，这些指令用于缩小指令长度，降低代码占用空间，RV64G 则不包含这些压缩指令，因此 RV64G 的应用程序可以在 RV64GC 的硬件上运行，反之则不行。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">比较而言，RV64GC 比 RV64G 具有更高的代码密度，程序具有更小的 footprint，可以更有效地利用内存空间，这些特点让 RV64GC 指令在嵌入式应用中更有优势；另一方面，RV64G 的硬件实现可能比 RV64GC 更简单，可采用简化指令译码逻辑，更容易预测指令预取模式，减少内存访问次数、提高指令执行速度，降低功耗，设计人员可以更好的对高性能计算进行优化。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">二、开发过程</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">1.基础工具链改造编译验证。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">第一阶段，对基础编译工具进行适配，包括 gcc，glibc，binutils 源码包的修改编译，技术攻关，以适配 RV64G 新架构。运行新编译的 gcc 版本，检查相关输出参数，确认为-- -with-arch=rv64imafd 表示修改成功。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">2.stage0/ bootstroop 阶段相关包的编译。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">基于第一阶段完成的基础编译工具链，开始 bootstroo 阶段相关包的编译工作。包括 apt，dpkg，llvm，python3，perl，cmake，make，openmpi，netplan.io，openssl，meson 等软件包的编译工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">3.初期上层应用包编译工作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">完成前两步中的软件包编译工作后，需要进一步扩展软件包的数量。在本地编译环境下通过脚本逐层编译更多上层应用包。同时验证使用 RV64GC 相关依赖包与现有 RV64G 包混合编译没有问题。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">4.Choort 平台编译环境调试制作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">使用目前已重新编译的 RV64G 架构新软件包，来构建 OKBS 平台的 chroot 基础环境，调试过程碰到架构符号相关的较多问题，需要多次重构测试，过程中不断尝试修改 chroot 的系统文件。直到可以正常编译出 rv64g.deb 格式的二进制文件。制作完成的 chroot 地址为：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#0052ff">http://api.build.openkylin.top/devel/openkylin/yangtze/rv64g</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">5.平台架构新增部署，与编译机搭建。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">为了与现有 RV64GC 架构做区分，在 OKBS 系统上增加 RV64G 架构相关配置数据。利用之前基于新架构编译完成的软件包，新增创建 source.list 源，作为编译环境的依赖源。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">6.初期编译环境调试。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">上线初期，解决新架构 chroot 与 OKBS 系统融合，编译依赖源 RV64G 架构修改等问题。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">三、RV64G 架构支持优势</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">1.</span><strong><span style="color:#000000">支持 RV64G 架构的代码同源编译</span></strong><span style="color:#000000">，即</span><strong><span style="color:#000000">代码一次提交</span></strong><span style="color:#000000">。可在 OKBS 平台同源编译出 AMD64、I386、ARM64、RV64GC、RV64G 五个架构的二进制包，无需再单独维护一套 RV64G 软件源及代码仓库，提升 RV64G 架构代码开发维护效率。</span></span></p><div><p style="text-align:center"><img height="343" src="https://oscimg.oschina.net/oscnet/up-e3b0d0deee341c3cf2c9b95667d25b56b29.png" width="921" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">2.</span><strong><span style="color:#000000">支持 RV64G 架构软件仓库的同源发布</span></strong><span style="color:#000000">，有效提升 RV64G 架构软件仓库的管理和维护升级效率。</span></span></p><div><p style="text-align:center"><img alt="" height="521" src="https://oscimg.oschina.net/oscnet/up-c9f3cf8283f562f55599cdc9ece977b4ecb.png" width="1358" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="224" src="https://oscimg.oschina.net/oscnet/up-989b966311f60b0bceab547c82705c8fde3.png" width="640" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">3.</span><strong><span style="color:#000000">镜像制作与版本发布统一规范化</span></strong><span style="color:#000000">。在镜像制作与版本发布管理上可与其他架构以同流程处理，统一 RV64G 架构版本构建规范。</span></span></p><div><p style="text-align:center"><img alt="" height="418" src="https://oscimg.oschina.net/oscnet/up-ff54131837683f63c926c6bcabafa8a63cd.png" width="652" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">4.</span><strong><span style="color:#000000">解决与 RV64GC 架构名称冲突的问题</span></strong><span style="color:#000000">，至此可以兼容 RISCV-V 规范的两种指令集架构的编译工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">5.</span><strong><span style="color:#000000">编译机可同时支持 RV64GC 和 RV64G 两种架构</span></strong><span style="color:#000000">，有效提升编译机资源利用率。</span></span></p><div><p style="text-align:center"><img height="484" src="https://oscimg.oschina.net/oscnet/up-78f5b565841630b75a362cc5f5ff57d9363.png" width="909" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="408" src="https://oscimg.oschina.net/oscnet/up-28aee798583cba92a8d59b14df44d4e814c.png" width="360" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">后续苏州睿芯公司将继续携手 openKylin 社区，成立 RV64G SIG 组，加大资源投入，解决软件包编译过程中遇到的问题，并完成该架构镜像制作、硬件适配、软件源管理和生态需求软件自主构建等，进一步集成基于 RV64G 架构的桌面与服务器整机系统。欢迎感兴趣的小伙伴加入我们，携手共创！</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272960</guid>
            <link>https://www.oschina.net/news/272960</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一个公司到底需要几个 DBA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>前段时间某家公司透露自家有 1000 人的 DBA 团队，一时成为了数据库圈内讨论的焦点。昨天又读到「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDIxNDg5Mg%3D%3D%26mid%3D2247486204%26idx%3D1%26sn%3D179fbefbee62f538f07dfcbc81fe9585%26scene%3D21%23wechat_redirect" target="_blank">DBA 团队的规模应该是什么样的配置</a>」。正好到年底了，不少公司也要做新年的预算，其中就包括 HC 的规划。所以也分享一点想法。</p><p>先明确这里讲的 DBA 指的是专职负责数据库管理的人员，不算还身兼其他职责的人员，也不包括数据库内核开发人员。</p><p>首先 1000 人的 DBA 团队肯定是言过其实的，这也是当初新闻公布后，引起大家讨论的原因。在我们所居住的蓝色星球上，应该还不存在 1000 人规模的 DBA 天团。那么正常一个公司该养几个 DBA 比较合适呢？下面就按照公司的发展阶段进行阐述。</p><h2>&lt; 30 人 - 不需要 DBA</h2><p>公司研发人数在 30 人以下规模时是不需要 DBA 的，通常这个阶段的职责由团队里的后端工程师，DevOps / 平台工程师或者技术负责人来兼职。这个阶段建议无脑选择云数据库托管服务，因为自带开箱即用的运维，监控，备份。至于数据库的日常变更，可以引入工具，也可以选择不引入。如果不引入的话，由技术负责人通过设计评审，代码审核等方式也能应付。</p><h2>30 人 ～ 50 人 - 第一个 DBA 和工具</h2><p>数据库相关工作的并发加大，兼职已经很难应付。同时因为业务开始有起色，所以需要为更长期的数据治理做铺垫。所以这个阶段公司就需要考虑引入专门的 DBA 来负责数据库相关事宜，随着引入第一个 DBA，也要同时考虑引入相关的数据库工具，其中最核心的就是涉及研发流程的数据库变更审核工具。至于究竟在哪个节点引入，一个是看之前兼职同学处理 DBA 事务的占比，50% 是一个零界点。另一个是看整个技术团队高优先级工作项里， 是否超过 50% 都是数据库相关。当然还有一个指标，就是故障数，如果已经连续两个月发生过影响业务的数据库故障，那引入 DBA 就是迫在眉睫了。</p><p>再说一下引入的第一个 DBA 的定位。通常在这个阶段，公司还很难吸引到比较优秀的 DBA，也没有必要。第一个 DBA 不需要构建体系，只要建立起机制。机制分两部分，一部分是数据库运维的常态化，比如优化监控，巡检以及备份。另一部分则是规范数据库访问和变更上线的流程。这两件事情都需要依托工具来落地。前者通常是围绕云平台提供的能力，通过配置或者少量的二开来实现；后者则基本完全依赖于引入工具，业内比较流行的 Archery, Yearning 便是出自 DBA 之手，解决这块的问题。Bytebase 同样也是由兼具研发和 DBA 背景的团队打造的开源产品。</p><p>这个阶段，也需要研发负责人在一旁做策应。因为引入 DBA 和工具，会限制研发的自由度，而 DBA 和研发的诉求点并不一致，DBA 又是新加入的成员。这个时候需要研发负责人从中斡旋，避免双方抵触，产生部门墙。说到底，在这个阶段，仍然是业务绝对优先，所以如果研发以业务优先为理由不愿意配合，DBA 建立的流程工具都能被绕过。</p><p>另一方面研发负责人也要着力培养 DBA 去熟悉业务，帮助他能跟随公司成长到下一阶段。</p><h2>100 人 - 第二个 DBA</h2><p>通常在研发规模达到百人左右时，就必须引入第二个 DBA。这里最重要的是能有一个互备。至于引入的 DBA 定位，如果第一个 DBA 成长起来的话，那第二个 DBA 可以是相对初级的，老人带新人。但如果第一个 DBA 没有跟上公司的成长，那么这时就需要引入一个相对资深的 DBA。这个阶段要开始构建体系，首先要审视当前使用的数据库种类，之前业务发展，可能对于数据库选型并没有做约束，现在就到了决策数据库选型的时候，尽可能统一。另外也要审视使用的数据库工具链，是否需要进行替换。关健就是这两件事情，选对数据库，选对工具。这也是为什么需要一个更资深的 DBA，所谓观千剑而识器。如果是一个相对经验不足的 DBA，在强势的业务研发面前，很难据理力争。这个阶段之后，无论是要换数据库还是相关工具，那都是浩大的工程，绝对比找一个有经验的 DBA 代价要大。</p><p>研发负责人在这个阶段算是基本退出了数据库日常工作，交由这组 DBA 二人转了。</p><h2>&gt; 200 人 - DBA 团队</h2><p>极限操作的话，公司也可以维持 2 个 DBA 的配置很长时间。国内上市公司，千人研发团队，2 个 DBA 配置也不是个例。但 DBA 人数还是和风险挂钩的，这里还是建议按照人员配比，尽量 DBA : 研发的配比不要低于 1:200。业务上了规模后，一个 DBA 但凡一年能帮助公司规避掉一次故障，就能收回人力成本。</p><p>另一方面，到这个阶段势必会出现一系列定制化需求，标准工具往往无法全部满足，所以这个时候也需要 DBA 亲自下场做深度二开。</p><p>不过在公司研发达到 500 人规模前，也要谨慎控制 DBA 团队的扩张。DBA 团队扩充到 5 人后，通常都会走上自研工具链的道路，否则无法支撑团队规模。但这个阶段选择自研道路，往往不会对业务带来增量。因为自研虽然在某些功能点更贴近业务，但从整体的产品体验来说，肯定是远远不如市面上成熟的标品，此消彼长。</p><p>那该如何给 DBA 团队尤其是 DBA 团队负责人提供成长空间呢。这里有两条路径，一是培养 DBA 负责人去超越 DBA 的职能，往职责更大的存储负责人/基础设施负责人方向走；另一条路，是鼓励 DBA 负责人走出公司，在行业内建立起影响力。</p><p>总之就是避免让 DBA 团队自己往前走的太快。虽然数据库在整个研发链路里是一块基石，但它不是枢纽。自研数据库工具链的时机，是要配合公司整体研发平台的自研规划，而且通常是在整体研发平台自研规划基本确立后，再进行数据库相关的规划。</p><h2>&gt; 1000 人 - 中央和地方</h2><p>能走到这步，公司往往已经形成了 BU 编制，这就会牵扯到是否每个 BU 会自建 DBA 团队。这通常就不再是技术问题，而是组织问题了。一个强势的业务 BU 通常都会希望可以有独立的建制，但是往往自己运行一段时间后，又发现招不到/留不住人，然后即使名义上还是独立，实际还是回退到中央集权。国内几家大厂有中央集权的，也有地方自治的。到了这个阶段兵无常势，水无常形。</p><h2>如何评估 DBA 团队的绩效</h2><p>两句话：</p><ul><li>专业的人做专业的事</li><li>善战者无赫赫之功</li></ul><p>地铁在既定的轨道上运行，依然也还是要配备 2 名驾驶员。事前预防，事中止血，事后补救，目前围绕数据库的日常工作，无论是云平台还是第三方工具，还只能承担 co-pilot 的角色，最终还需要 DBA 拍板。希望每个研发都具备数据库常识的理想很丰满，但现实很骨感。面试时虽然都考察了 MVCC 原理的八股文，但真的上了前线，往往连最基本的执行计划也看不懂。</p><h2>总结</h2><p><img src="https://oscimg.oschina.net/oscnet/up-f36de6034e654d8a673cf05664d8e135703.png" alt="file" referrerpolicy="no-referrer"></p><p>新的一年也希望 DBA 们稳如泰山，数据库都平平安安。</p><p><img src="https://oscimg.oschina.net/oscnet/up-07e2c0e2378dffdef4b198c2c7ec24344e0.png" alt="file" referrerpolicy="no-referrer"></p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10433139</guid>
            <link>https://my.oschina.net/u/6148470/blog/10433139</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三星成功验证 CXL 内存与 Red Hat Linux 的互操作性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">三星电子发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.samsung.com%2Fglobal%2Fsamsung-electronics-and-red-hat-partnership-to-lead-expansion-of-cxl-memory-ecosystem-with-key-milestone" target="_blank">公告称</a>，已与 Red Hat 合作，在真实用户环境中成功验证了 CXL (Compute Express Link) 内存操作；此举系业内首次，将进一步扩大其 CXL 生态系统。</span></p><p><span style="color:#000000">该公司表示，他们针对 Red Hat Enterprise Linux 9.3 发行版优化了 CXL 内存，并在 Red Hat 的 KVM 和 Podman 环境中验证了内存识别、读取和写入操作。由此，数据中心客户将无需对现有硬件进行额外调整，即可使用三星 CXL 内存。</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">红帽公司高级副总裁兼亚太区负责人 Marjet Andriesse 称，「三星 CXL 内存扩展器与红帽企业级 Linux 互操作性的成功验证具有重要意义，因为它拓展了 CXL 内存扩展器在基于 IaaS 和 PaaS 的红帽软件中的适用性。这是硬件和软件集成的重要里程碑，为下一代内存开发构建了一个开源生态系统。」</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="317" src="https://oscimg.oschina.net/oscnet/up-902ea73f4e148bd1626fdd7de2c37b4b0dd.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，双方正在合作制定《RHEL 9.3 CXL 内存启用指南》，帮助用户在 RHEL 9.3 上利用三星的 CXL 内存，并在各种用户环境中构建高性能计算系统。</span></p><p><span style="color:#000000">两家公司于 2022 年 5 月首次签署了一份谅解备忘录（MOU），开始在 CXL 上进行合作。合作关系涵盖一系列存储和内存产品，包括 NVMe SSD、CXL 内存、计算内存/存储和结构。</span></p><p><span style="color:#000000">三星执行副总裁兼内存产品规划主管 Yongcheol Bae 在接受 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zdnet.com%2Farticle%2Fsamsung-verifies-cxl-memory-with-red-hat%2F" target="_blank">ZDNet</a> 采访时表示：通过最新的验证，三星将成为业内第一家提供支持 CXL 2.0 的 CXL 模块、开源软件和 CXL DRAM 的公司。双方还将致力于灵活的数据放置和汽车以及其他项目，以实现为 CXL 内存打造强大生态系统的最终目标。</span></p><p><span style="color:#000000">CXL 是一个统一的接口标准，于 2019 年推出，通过 PCIe 接口以比以前更低的延迟和更高的带宽连接各种处理器和内存设备。这样，现有的数据中心就能以低成本提高速度、延迟和可扩展性。</span></p><p><span style="color:#000000">市场研究公司 Yole Group 数据指出，CXL 市场目前估值约为 1400 万美元；且得益于 2024 年底 CXL 2.0 的推出，预计到 2028 年还将增长至 160 亿美元。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</guid>
            <link>https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ClkLog —— 免费、可商用的轻量级完全开源的埋点用户分析系统]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-项目简介" class="anchor" href="https://gitee.com/clklog/clklog#%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B"></a>项目简介</h1><p>ClkLog 是一款记录用户行为分析和画像的免费可商用开源软件，技术人员可快速搭建私有的应用系统。项目基于神策分析 SDK，采用 ClickHouse 数据库对采集数据进行存储，采用前后端分离的方式来实现的访问统计和用户画像分析系统。在这里，你可以轻松看到用户访问网页、APP、小程序或业务系统的行为轨迹，同时也可以从时间、地域、渠道、用户访客类型等多维度了解用户的全方位信息。</p><h1><a id="user-content-核心功能" class="anchor" href="https://gitee.com/clklog/clklog#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"></a>核心功能</h1><ul><li><p><strong>数据采集</strong>：支持网页、小程序、IOS、Android 等多端数据采集</p></li><li><p><strong>流量概览</strong>：提供流量渠道、设备、地域、访客类型多维度分析</p></li><li><p><strong>用户画像</strong>：解析用户唯一 ID，定位追踪用户全生命周期画像</p></li><li><p><strong>数据下载</strong>：支持各项汇总数据、明细数据的下载</p></li></ul><h1><a id="user-content-技术栈选择" class="anchor" href="https://gitee.com/clklog/clklog#%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E6%8B%A9"></a>技术栈选择</h1><ul><li><p><strong>后端</strong>：Redis 、Zookeeper、Kafka 、Flink</p></li><li><p><strong>前端</strong>：vue、vue-element-admin、element-ui 、echarts</p></li><li><p><strong>数据</strong>：Clickhouse</p></li></ul><h1><a id="user-content-示意图" class="anchor" href="https://gitee.com/clklog/clklog#%E7%A4%BA%E6%84%8F%E5%9B%BE"></a>示意图</h1><table><thead><tr><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/1.png" alt="" referrerpolicy="no-referrer"></th><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/2.png" alt="" referrerpolicy="no-referrer"></th></tr></thead><tbody><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/3.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/4.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/5.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/6.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/7.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/8.png" alt="" referrerpolicy="no-referrer"></td></tr></tbody></table><h1><a id="user-content-在线体验" class="anchor" href="https://gitee.com/clklog/clklog#%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C"></a>在线体验</h1><p>演示地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com" target="_blank"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com">https://demo.clklog.com</a></p><h1><a id="user-content-快速接入" class="anchor" href="https://gitee.com/clklog/clklog#%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5"></a>快速接入</h1><p>官方文档：<a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com">https://clklog.com</a></p><h1><a id="user-content-协议许可" class="anchor" href="https://gitee.com/clklog/clklog#%E5%8D%8F%E8%AE%AE%E8%AE%B8%E5%8F%AF"></a>协议许可</h1><ul><li><p>开源协议：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.gnu.org%2Flicenses%2Fagpl-3.0.en.html">AGPL V3.0</a></p></li><li><p>免费使用：Clklog 遵循 AGPL V3.0 开源许可证, 使用的组织或个人在复制、分发、转发或修改时请遵守相关条款，不得移除 ClkLog 相关版权标识进行。如有违反，ClkLog 将保留对侵权者追究责任的权利。</p></li><li><p>商业使用：请联系客服进行细节咨询</p></li></ul><h1><a id="user-content-联系我们" class="anchor" href="https://gitee.com/clklog/clklog#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>联系我们</h1><ul><li><p>客服邮箱：<a href="mailto:info@clklog.com">info@clklog.com</a></p></li><li><p>客服手机：16621363853</p></li><li><p>客服微信：opensoft66</p></li><li><p>客服二维码：<img title="" src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/contactqrcode.jpg" alt="" width="120" referrerpolicy="no-referrer"></p></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/clklog/clklog</guid>
            <link>https://gitee.com/clklog/clklog</link>
        </item>
        <item>
            <title>
                <![CDATA[华为云多个开源项目通过信通院可信认证]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>2023</span></span></span><span><span><span>年 12 月 21 日，由中国信息通信研究院主办的《2024 中国信通院 ICT 深度观察报告会》开源和软件供应链分论坛上重磅发布了可信开源评估结果。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云共计 3 个开源社区、5 个开源项目通过可信开源社区、可信开源项目认证，其中，三个开源社区：KubeEdge、Karmada、Volcano 在社区运营、社区治理与社区开发能力方面均获得了先进级评级。</span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px; text-align:center"><img height="2594" src="https://oscimg.oschina.net/oscnet/up-8c3992cba052f6407c45af867bb5b58ff96.jpg" width="3892" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:center">&nbsp;</p><span id="OSC_h2_1"></span><h2><span><span><span><strong><span><span><span>3</span></span></span></strong><strong><span><span><span>大开源社区通过可信开源社区 4 大专项测评，获先进级评级</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云 3 大开源社区（KubeEdge、Volcano、Karmada）顺利通过信通院可信开源社区成熟度能力检验，并在社区运营、社区治理与社区开发能力方面获得先进级社区评级，该认证为中国信通院可信开源治理能力成熟度认证的最高等级。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="790" src="https://oscimg.oschina.net/oscnet/up-42e95f4a1bd080702470d5d9ffe006ece7f.jpg" width="563" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信开源社区评估从基础设施、社区治理、社区运营与社区开发等角度，梳理开源社区应关注的内容及指标，聚焦于如何构建活跃的开发者生态与可信的开源社区。先进级评级是可信开源社区评估的最高级别，相较于基础级和增强级而言，先进级要求社区能够针对开源社区进行更加专业化和自动化等管理。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>先进级认证不仅是对华为云 3 大开源社区在开源软件的开发流程、产生的技术贡献、贡献者管理、社区氛围营造等维度结果的认可，更是对开源社区工作的肯定，未来这些社区将会持续加大技术研发投入，与社区用户、合作伙伴共建开源生态，持续创新。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="1864" src="https://oscimg.oschina.net/oscnet/up-f9465e80d1c92d3bb6719470eea23494dbf.jpg" width="4096" referrerpolicy="no-referrer"></p><span id="OSC_h2_2"></span><h2><span><span><span><strong><span><span><span>5</span></span></span></strong><strong><span><span><span>个开源项目通过中国信通院可信开源项目测评</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云一键构建分布式云原生平台 Kurator、云原生无代理服务网格 Sermant、时序数据库 openGemini、企业级前端组件库 DevUI、OpenTiny Vue 均已通过中国信通院的可信开源项目认证检测，并获得可信开源项目评估证书。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="829" src="https://oscimg.oschina.net/oscnet/up-f237b87e138d721a6a69683b4b3edcc989f.jpg" width="582" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信开源项目重点考察开源项目在许可证合规性、软件安全性、软件活跃度、技术成熟度、服务支持力和软件兼容性六个方面的能力。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>通过可信开源项目认证，意味着以上这些项目通过了业界开源项目认证标准的检验，项目具有高质量、高可靠性、高安全性和高可维护性，这些项目可以为用户提供更好的开源软件使用体验。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>本次通过可信认证的开源社区与开源项目目前已广泛应用于各行各业，通过不断完善开发者生态，提升产品易用性，为企业或个人提供更多的选择和机会，帮助个人或企业更好的利用开源技术提升业务效率和创新能力。</span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6410005/blog/10332529</guid>
            <link>https://my.oschina.net/u/6410005/blog/10332529</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openGemini 获 1 项大奖，2 项认证，一年一个台阶]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="306" src="https://oscimg.oschina.net/oscnet/up-2305df6d4314acb367af05d3ada47349caa.jpg" width="1021" referrerpolicy="no-referrer"></p><p>最近，openGemini 先后获得开放原子基金会授予的 「2023 快速成长开源项目」 奖项，以及由中国信通院评估颁发的 「可信开源项目」 和 「可信数据库」 两项证书，成为社区最值得庆贺的事，可谓是「寒冬喜来茶当酒，竹炉汤沸火初红」。回头望，旭日东升，社区就像一个朝气蓬勃的小孩，正在一天天长大。这些荣誉的背后，是 openGemini 团队、众多社区开发者不断努力和创新的结果。</p><ul><li><span id="OSC_h3_1"></span><h3><span><strong>2023 年度快速成长开源项目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">开放原子基金会「2023 年度快速成长开源项目」评委会从时间范围内的定量指标数据增长速度和定性指标情况发展速度两个维度考察，综合衡量了开源项目在 2023 年度社区治理（社区管理、开源合规管理、社区运营、基础设施能力、安全治理）和社区活跃度（生态参与度、社区影响力和项目活跃度）方面的表现，决定授予 openGemini 社区「2023 年度快速成长开源项目」，充分肯定了 openGemini 社区在治理与生态方面做出的努力。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-6cfaf4c1a329a2a347fa19b42618269367e.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_2"></span><h3><span><strong>可信开源项目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信开源项目」 是由中国信通院推动的开源项目评估，对开源项目的健康程度与可持续性展开评测，以降低开源项目的安全风险，完善开源项目的开发者、用户生态。重点考察开源项目在许可证合规性、软件安全性、软件活跃度、技术成熟度、服务支持力和软件兼容性六个方面的能力，全面衡量社区版开源项目的健康程度，为开源项目使用方提供选型的参考依据。openGemini 通过该项认证，充分证明了社区的健康程度和可持续性发展。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="807" src="https://oscimg.oschina.net/oscnet/up-c0917d6ee0589169bff1269025c1be55999.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_3"></span><h3><span><strong>可信数据库</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信数据库」是由中国信通院开展的面向数据库产品及周边工具、数据库服务商和应用侧为评价目标的权威评测体系，重点考察时序数据库基础能力、兼容能力、管理能力、高可用能力、扩展性、兼容性等七个方面能力。openGemini 通过该项认证，再次证明 openGemini 项目是高质量、高安全的，能够满足海量时序数据存储、处理、应用等各类场景数据管理需求。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="803" src="https://oscimg.oschina.net/oscnet/up-659dbe1066941e46180a914be7c208ddc31.jpg" width="600" referrerpolicy="no-referrer"></p><span id="OSC_h3_4"></span><h3><span><strong>再接再厉</strong></span><span><strong><em>✦</em></strong></span></h3><p style="margin-left:0; margin-right:0">作为一个开源项目，openGemini 一直致力于为开发者提供更好的平台和软件，帮助他们了解数据库架构、功能原理和内核开发过程，降低开发门槛，最终具备问题自我定位、自我修复的能力。同时也为最终用户提供更好的工具（目前社区的派生项目已达 20 余个），帮助他们更好的使用 openGemini，降低生产成本，提高产品竞争力。在这个过程中，openGemini 团队不仅注重技术的创新和优化，还积极投入社区建设，与其他开源项目合作，推动整个开源社区的发展。</p><p style="margin-left:0; margin-right:0">在未来，openGemini 社区将继续努力，不断提升自身的技术实力和社区影响力，为用户和开发者提供更好的时序数据库软件。同时，openGemini 也将继续与其他开源项目合作，共同推动整个开源社区的发展，为技术的进步和社会的发展做出贡献。一年一个台阶，明年我们拭目以待！</p><p style="margin-left:0; margin-right:0">今日恰值冬至，祝福大家冬至欢愉，常安常乐。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="288" src="https://oscimg.oschina.net/oscnet/up-1ccc6c43a3a6a9ae796c53a6365d4d0d6e5.png" width="200" referrerpolicy="no-referrer"></p><hr><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 官网：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.opengemini.org%2F" target="_blank">http://www.openGemini.org</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 开源地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FopenGemini" target="_blank">https://github.com/openGemini</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 公众号：</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify"><img src="https://oscimg.oschina.net/oscnet/up-9c3a28f01ff2ece95893e6eb22755543105.jpg" style="margin-top:20px" referrerpolicy="no-referrer"></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">欢迎关注～ 诚邀你加入 openGemini 社区，共建、共治、共享未来！</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3234792/blog/10331495</guid>
            <link>https://my.oschina.net/u/3234792/blog/10331495</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
