<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 15 Jan 2024 07:15:47 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[GNOME 46 发布首个 Alpha，支持远程桌面协议 (RDP)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNOME 46 首个 Alpha 已发布。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e10ceb0b7c47c704211dd7fb403e0579ae5.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-36c8c3d9facf2955d08c4dbebcce405f052.png" referrerpolicy="no-referrer"></p><p><span style="color:#374151">主要变化</span></p><ul><li>GNOME 桌面环境<u><a href="https://www.oschina.net/news/274575/gnome-rdp-remote-login">支持远程桌面协议 (RDP)</a></u></li><li>改进 GNOME Shell 和 Mutter</li><li>由于服务条款发生变化，GNOME Web (Epiphany) 不再支持 Google 安全浏览</li><li>Nautilus 文件管理器现在将在创建受保护的 ZIP 存档、新样式横幅以及其他改进和修复时确认密码</li><li>GNOME System Monitor 移植到 GTK4</li><li>GNOME 背景支持 JPEG-XL 格式，并添加了新的默认背景</li><li>……</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.gnome.org%2Ft%2Fgnome-46-alpha-released%2F18940%2F2" target="_blank">详情查看发布公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 06:27:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275799/gnome-46-alpha-released</guid>
            <link>https://www.oschina.net/news/275799/gnome-46-alpha-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[从分享一个小工具到首个 GitHub 1K Star 小成就]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>2021 年 11 月，Python 版 trzsz 工具</h2><ul><li><p><strong>背景</strong>：在 iTerm2 中使用 rz sz 又卡死了，才想起当前是 tmux 环境，然后 kill 并重登录，真的很浪费时间。</p></li><li><p><strong>原因</strong>：rz sz 在传输时会有一些特殊字符，tmux 的存在导致传不过去。</p></li><li><p><strong>解法</strong>：如果先将文件 Base64 编码再传输，就可以顺利穿过 tmux 了。</p></li><li><p><strong>结果</strong>：写了个小工具 trzsz ( trz / tsz ) 自用，接着在 GitHub 上开源分享出来：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz" target="_blank">https://github.com/trzsz/trzsz</a></p></li></ul><h2>2022 年 2 月，TypeScript 版 trzsz.js 库</h2><ul><li><p><strong>背景</strong>：trzsz 开始只支持 iTerm2，网友提出想要支持其他终端，例如 electerm 和 tabby 等。</p></li><li><p><strong>结果</strong>：用 TypeScript 写了个 trzsz.js 的库，顺便支持在浏览器 webshell 中使用。这个库主要是面向终端或 webshell 开发者的，用来接入并支持 trzsz ( trz / tsz )：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz.js" target="_blank">https://github.com/trzsz/trzsz.js</a></p></li></ul><h2>2022 年 3 月，Go 版 trzsz 工具</h2><ul><li><p><strong>背景 1</strong>: trzsz 还有很多其他终端未支持，有网友特别想支持 Linux 的原生终端，但是提 PR 过去大概率会被拒绝。</p></li><li><p><strong>背景 2:</strong> 有网友在 V2 分享了 [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbeordle%2Ftermtunnel" target="_blank">termtunnel</a>](<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbeordle%2Ftermtunnel" target="_blank">https://github.com/beordle/termtunnel</a>)，让我突然想到，可以写个工具作为 ssh 进程的父进程，就可以完全控制 ssh 的输入和输出了，从而实现对 trzsz ( trz / tsz ) 的支持。</p></li><li><p><strong>结果</strong>：为了支持所有平台，为了便于分发（独立的程序，无任何依赖），选择了用 Go 来开发，于是便有了 Go 版的 trzsz ( trz / tsz )：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz-go" target="_blank">https://github.com/trzsz/trzsz-go</a></p></li></ul><h2>2023 年 5 月，实现 ssh 客户端</h2><ul><li><p><strong>背景 1</strong>: Windows 中的 ConPTY 和 ConHost 存在性能问题，导致 Go 版 trzsz 只有几十 K 的速度。</p></li><li><p><strong>背景 2:</strong> 有网友来咨询 trzsz.js 的问题，他用的是 Go [wails](<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwailsapp%2Fwails" target="_blank">https://github.com/wailsapp/wails</a>)，才知道 Go 有强大的 ssh 库，可以把 Go 版 trzsz 改造成一个库让他接入。</p></li><li><p><strong>背景 3</strong>: 在 ssh 登录不常用的服务器时，总是不能准确地记住别名是什么，然后就是 cat ~/.ssh/config，很不丝滑。</p></li><li><p><strong>结果</strong>：把 Go 版 trzsz 改造成一个库，自己写一个 ssh 客户端，完全兼容原生 ssh 的，然后定制自己想要的功能，顺便解决 trzsz 在 Windows 慢的问题，叫 trzsz-ssh ( tssh )：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz-ssh" target="_blank">https://github.com/trzsz/trzsz-ssh</a></p></li></ul><h2>2024 年 1 月，tssh 率先突破 1k star</h2><ul><li><p>trzsz-ssh ( tssh ) 是以上几个最后开源的，却是最先达到 1k star 的，为期不到一年。</p></li><li><p>trzsz-ssh ( tssh ) 也支持原生 zmodem ( rz / sz )，只要有本地 shell 的终端就能使用。凡是没有原生支持 rz / sz 的终端，配合 tssh 使用大概率会有惊喜。</p></li><li><p>截止到现在，star 和 fork 数量的汇总 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz" target="_blank">https://github.com/trzsz</a></p></li></ul><p>- Python 版 958 star 48 fork</p><p>- TypeScript 版 177 star 14 fork</p><p>- Go 版 752 star 46 fork</p><p>- tssh 1000 star 62 fork</p><h2>总结与感想</h2><ul><li><p>在日常工作中会遇到很多的小痛点，当重复遇到的次数多了，那怕只是几秒的浪费，我就会去思考有没有优化的空间，会去网上看看别人是如何做的，实在找不到就只好自己动手丰衣足食了。</p></li><li><p>开始并没有想着要投身开源，因为找不到 tmux 中使用 rz sz 的解决方案，而自己写了个小工具，只是想简单分享给同样为 tmux 不支持 rz sz 而苦恼的人。</p></li></ul><p><span>- </span>最后说明一下，以上其实省略了大量的优化过程，那是用很多很多的周末堆起来的<span>……</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 05:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275788</guid>
            <link>https://www.oschina.net/news/275788</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[.NET MAUI 是合适的 Xamarin 继任者吗？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">众所周知，跨平台移动应用开发框架 Xamarin 将于 2024 年 5 月 1 日结束其生命周期。这一重要里程碑促使许多开发人员和组织评估从 Xamarin 升级到其继任者 .NET MAUI 的可能性，或者借此机会探索如 Flutter 或 React Native 之类的替代框架。</span></p><p><span style="color:#000000">但每个公司都有不同的需求，需要不同的解决方案。因此，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsdtimes.com%2Fmobile-app-development%2Fis-net-maui-the-right-xamarin-successor-for-you%2F" target="_blank">SDTimes </a>详细对比研究了一下各备选项的优缺点，为有需要的用户提供参考。</span></p><h4><strong><span style="color:#000000">什么是 .NET MAUI 以及它与 Xamarin 有何关系？</span></strong></h4><p><span style="color:#000000">随着 Xamarin 的生命周期结束，Microsoft 推出了 .NET MAUI 作为替代品。MAUI 是 Xamarin.Forms 的演变，专注于通过质量、性能、设计和平台可用性来增强开发人员体验。它将 Xamarin.Android 和 Xamarin.iOS 吸收到 .NET 框架中，符合 Microsoft 在任何平台上运行 .NET 的愿景。.NET 6 标志着这一转变的开始，它将接替 Xamarin 构建 Android、iOS 和跨平台应用程序。</span></p><p><span style="color:#000000">.NET MAUI 的引入为开发人员和组织提供了一个重新评估 .NET 是否仍然最适合其移动项目的机会。随着 Flutter 和 React Native 等竞争者越来越受欢迎，必须考虑从 Xamarin 迁移到 .NET MAUI 是否是最合适的选择。</span></p><p><span style="color:#000000">.NET MAUI 旨在通过重写 UI 组件来改进 Xamarin.Forms，以获得更好的性能和可扩展性。该框架的重点是减少应用程序启动时间并将 UI 组件与其平台对应组件解耦。这使得开发人员可以为每个平台使用正确的组件，而无需明确指定，从而实现更加无缝和高效的开发过程。</span></p><p><span style="color:#000000">MAUI 通过引入统一的项目结构而不是每个平台单独的项目，极大地改善了开发人员体验。现在可以将特定于平台的代码添加到统一项目内的「Platforms」文件夹中。此更改简化了项目组织，并使跨不同平台的代码管理变得更加容易。此外，MAUI 还提供了有关常用平台功能的抽象，例如权限、通信以及地理定位和媒体选择器等特定于设备的功能。这些抽象有助于减少所需的特定于平台的代码量，进一步简化开发过程。</span></p><p><span style="color:#000000">MAUI 中提供了 XAML 和 C# 的热重载，使开发人员能够实时查看应用程序 UI 的变化。虽然有些开发人员反映热重载的性能不稳定，但它仍然是一个有价值的功能，可以显着加快开发过程。捆绑后，C# 代码被编译为本地代码，针对 Android、iOS、macOS 和 Windows 应用程序采用不同的编译过程，确保每个平台上的最佳性能。</span></p><p><span style="color:#000000">Microsoft 方面表示将与开源社区一起支持 .NET MAUI，表明了该公司将致力于根据开发人员反馈改进该框架。这种协作确保 .NET MAUI 在不断发展的同时，适应开发人员和组织的需求。</span></p><h4><strong><span style="color:#000000">从 Xamarin 迁移到 .NET MAUI</span></strong></h4><p><span style="color:#000000">从 Xamarin 迁移到 .NET MAUI 涉及多个步骤，包括将 Xamarin.Android 和 Xamarin.iOS 项目升级到最新的稳定 .NET 版本，以及将 Xamarin.Forms 项目更新到 .NET MAUI。Microsoft 提供命令行工具和 Visual Studio 插件来在迁移过程中自动执行许多代码转换。这些工具可以节省时间和精力，使迁移过程更加顺利且更易于管理。</span></p><p><span style="color:#000000">升级最广泛的部分涉及更新 UI，这可能需要更改命名空间和 API。根据现有 UI 的复杂性和第三方 UI 元素的使用，此过程的难度可能会有所不同。Microsoft 已与主要 Xamarin UI 组件构建商合作，以确保与 MAUI 的兼容性，从而帮助简化迁移过程。</span></p><h4><strong><span style="color:#000000">.NET MAUI 的缺点</span></strong></h4><p><span style="color:#000000">虽然 .NET MAUI 作为跨平台解决方案具有多种优势，但它也存在一些缺点，开发人员和组织在项目中采用它之前应加以考虑。</span></p><p><span style="color:#000000">使用 .NET MAUI 的一个显着缺点是它在市场上的地位相对较新。作为 Xamarin.Forms 的演变，MAUI 可能仍然存在一些成长的烦恼和未解决的问题。开发人员可能会遇到可能影响项目开发时间表和整体稳定性的错误或限制。尽管 Microsoft 支持 .NET MAUI，但该框架可能需要一段时间才能成熟并达到与 React Native 或 Flutter 等更成熟的替代方案相同的稳定性和可靠性水平。</span></p><p><span style="color:#000000">.NET MAUI 的另一个潜在缺点是它对 .NET 生态系统的依赖。虽然这对于已经熟悉 .NET 技术的开发人员来说可能是有利的，但对于来自不同背景或编程语言的开发人员来说，它可能会带来陡峭的学习曲线。相比之下，Flutter 和 React Native 等框架分别使用 Dart 和 JavaScript，这可能更容易访问，并且对更广泛的开发人员有吸引力。</span></p><p><span style="color:#000000">最后，.NET MAUI 的性能虽然比 Xamarin.Forms 有所提高，但可能无法始终与 native development 或 Flutter 等其他跨平台解决方案相匹配。这可能会导致应用程序启动时间稍慢或在某些情况下响应能力降低，从而可能影响用户体验。</span></p><h4><strong><span style="color:#000000">.NET MAUI 的替代品</span></strong></h4><p><span style="color:#000000">虽然 .NET MAUI 为 Xamarin 开发人员提供了自然的进步，但必须考虑替代框架并评估它们对特定项目的适用性。如果 UI 需要大量重构才能升级到 MAUI，那么对 native development 或具有更大社区的跨平台框架的投资可能更有意义。以下是 .NET MAUI 的一些流行替代品：</span></p><p><strong><span style="color:#000000">Native Development</span></strong></p><p><span style="color:#000000">Native Development 具有许多优势，包括最佳性能、无缝用户体验、访问所有设备功能、增强的安全性、应用程序商店优化、更紧密的系统集成以及访问尖端平台功能。这也是 SDTimes 的首要推荐。</span></p><p><span style="color:#000000"><strong>Flutter</strong></span></p><p><span style="color:#000000">Flutter 是一个由 Google 支持的跨平台框架，允许开发人员编写一次 Dart 代码并将其部署在多个平台上。它提供快速开发、可定制的小部件、高性能、与其他技术的轻松集成以及不断发展的社区。对于寻求高质量、高效的跨平台框架而不牺牲性能或可定制性的开发人员来说，Flutter 是一个绝佳的选择。</span></p><p><span style="color:#000000">Flutter 与其他框架之间的主要区别之一是其渲染引擎，它使 Flutter 的 UI 在所有平台上看起来都一致。它还包括通过一些额外的努力来显示特定于平台的组件的选项。Flutter 路线图包括渲染引擎升级，以实现流畅的动画和有前途的 3D 图形实验。</span></p><p><span style="color:#000000">总体而言，Flutter 是一个不错的选择，推荐给那些希望快速高效地构建高质量跨平台应用程序，同时在不同平台上保持一致用户体验的开发人员。</span></p><p><span style="color:#000000"><strong>React Native</strong></span></p><p><span style="color:#000000">React Native 由 Facebook 支持，支持使用 JavaScript 进行跨平台开发。与 Xamarin 和 MAUI 一样，它利用原生组件来实现一致的平台体验，但可能需要平台之间进行额外的 QA，以确保一切按预期呈现。虽然 React Native 的性能可能无法与 native development 相匹配，但它仍然在开发速度、跨平台兼容性和性能之间提供了良好的平衡。此外，React Native 内置支持与其他流行技术（例如 Redux 和 GraphQL）集成，从而可以轻松地将状态管理和数据获取等功能添加到你的应用程序中。</span></p><p><span style="color:#000000">React Native 的热重载功能可以让开发者实时看到应用 UI 的变化，让开发过程更快、更高效。它拥有一个庞大而活跃的开发人员社区，这意味着有大量的资源、库和工具可用于帮助开发。</span></p><p><span style="color:#000000">与 Flutter 相比，升级 React Native 应用程序可能更具挑战性，因为它依赖原生组件并且需要 JavaScript bridge，这可能会在更新依赖项或特定于平台的代码时引入兼容性问题。可能需要平台之间进行额外的 QA 和手动调整，以确保更新过程顺利进行。另一方面，Flutter 使用单一渲染引擎和 Dart 语言，通过提供跨平台一致的 UI 并减少对特定于平台的组件的依赖来简化更新。因此，Flutter 提供了更加简化和高效的更新流程，有时只需数小时而不是数周即可完成，从而降低了 Flutter 应用程序的维护成本。</span></p><p><span style="color:#000000">总的来说，对于想要用自己熟悉的语言构建跨平台应用程序的 React/JavaScript/TypeScript 开发人员来说，React Native 是一个合理的选择。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275780/is-net-maui-the-right-xamarin-successor-for-you</guid>
            <link>https://www.oschina.net/news/275780/is-net-maui-the-right-xamarin-successor-for-you</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[主审法官谈国内首例 AI 生成图侵权案：判决激励大家用新工具创作]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>1 月 12 日下午，首例 AI 生成图侵权案一审主审法官、北京互联网法院综合审判一庭副庭长朱阁做客中国法学交流基金会举办的公益讲座，就「人工智能生成图著作权相关问题」回应公众关切。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bc90cdf5515a7be6c0726c8ec1182ce0406.png" referrerpolicy="no-referrer"></p><p>在整场讲座过程中，朱阁围绕公众关注的焦点问题即 AI 生成的内容是否构成作品、作品的独创性该怎么认定等进行回应，并分享了此案判决的思路和过程。</p><p>2023 年 2 月，原告李昀锴使用 Stable Diffusion 模型，通过在模型上输入数十个提示词，设置相关迭代步数、图片高度、提示词引导系数以及随机数种子等，生成了数张人像图片。随后，李昀锴以「春风送来了温柔」为名发布在社交平台小红书上。2023 年 3 月，百家号一自媒体账号发布的文章使用了李昀锴制作的图片。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f0cd7df7758aee50b325d92bf0e90a113b.png" referrerpolicy="no-referrer"></p><p><em>李昀锴用 Stable Diffusion 模型生成的图片</em></p><p>李昀锴认为，对方未获得他的许可就截掉了他在小红书平台有署名水印进行发布，侵犯了署名权及信息网络传播权，应当承担法律责任。</p><p>2023 年 5 月，李昀锴起诉被告刘某侵害作品署名权、信息网络传播权纠纷一案在北京互联网法院立案。此案最关键的争议在于李昀锴基于自己设定的提示词和参数，使用 Stable Diffusion 模型制作的图片「春风送来了温柔」是否构成作品，以及构成哪一种类型的作品。</p><p><strong>法院认为，原告李昀锴使用开源软件 Stable Diffusion 创作的图片由其独立完成，体现了他的个性化表达，因此涉案图片具备「独创性」要件。涉案图片符合作品的定义，属于美术作品，受到著作权法的保护。最终判决李昀锴胜诉，被告需在百家号平台公开道歉，并向原告赔偿 500 元</strong>。</p><p>此案为 AI 生成图片相关领域著作权第一案，判决在司法层面上具有哪些典型意义？</p><p>朱阁认为，由于生成式人工智能大模型的技术特性，人工智能生成物的可版权性及权利归属相关问题，成为人工智能产业发展需要解决的核心法律问题之一。</p><p>学界关于 AI 生成内容是否享有著作权，是否受版权保护的讨论从未停止，观点大致可以分为三类：一是激进观点，认为人工智能本身可以作为作者，相关生成内容系人工智能的作品。二是保守观点，认为 AI 作图工具的使用者对 AI 绘图的文字提示和描述，即使再具体，也只是文字作品的创作，而不是美术作品的创作。用户对于生成结果不能预见、无法控制。三是较为折中的观点，人类作出独创性表达的 AI 生成物可以作为作品受到著作权法保护。</p><p>朱阁表示，在本案的判决中采纳了较为折中的观点。</p><p>首先，<strong>人工智能大模型不是民法典规定的民事主体，只是创作工具</strong>。依据著作权法规定，「著作权属于作者，本法另有规定的除外。」关于「作者」，依据著作权法第十一条规定，作者限于自然人、法人或非法人组织，这与民法典规定的民事主体一致，因此，人工智能模型本身无法成为我国著作权法上的作者。</p><p>其次，若将 AI 绘图单纯视为机器人的作品，即要求机器人与人享有同等的权利，这在现有的法律体系中是难以回应的，朱阁称「如果将人工智能作为著作权法中的作者，未来在侵权责任认定的对象等问题上，机器都将与人享有同等的法律地位和资格，如何认定机器的真实意思，如何考虑机器在侵权行为中的主观过错，如何让机器承担责任，现行法律体系无法解决。」</p><p>综上，朱阁称，现阶段，生成式人工智能模型不具备自由意志，不是法律上的主体。因此，人们利用人工智能模型生成图片时，不存在两个主体之间确定谁为创作者的问题，本质上，仍然是人利用工具进行创作，即整个创作过程中进行智力投入的是人而非人工智能模型。</p><p>「在本案中，在一定条件下给予 AI 生成内容作品一个（法律意义）上的身份，就是为了激励大家用新工具进行创作。我们认为，此案的判决是契合著作权法鼓励创作的目标的。」朱阁说。</p><p><strong>来源</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_25963744" target="_blank">首例 AI 生成图片侵权案始末：原告胜诉放弃赔偿，有律师质疑判决</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_26010981" target="_blank">主审法官谈首例 AI 生成图侵权案：判决激励大家用新工具创作</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275777</guid>
            <link>https://www.oschina.net/news/275777</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🔥 周热点 | C# 荣获年度编程语言；知名安卓框架因「作者遭受恶意攻击」停更；Sam Altman 与男友结婚.....]]>
            </title>
            <description>
                <![CDATA[回顾一周热门资讯。2024.01.08-2024.01.11]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;tempkey=MTI1Ml9EY2lKYk82L3o2TzRMVm1DMm5NX3VjTnhUSmkxWVRtcWJLQV9OODh6V1Z1NXVtcVBpSE5ya1FuUUZxRXlYWW1MSmtXZVk2ZGlrZ1JZbklTUXhrSlhNbjhkV3lFRlVEUTNRQzVUTVluenUwRkpld3dBR3g2c1VwUEhfOHdUZldGN2pQcndxZ1BaQ2t0TkxEWkhIXzZiaFh2MHhSUU9xS21hZTYxZ0tBfn4%3D&#38;chksm=880c4ccebf7bc5d83392ab82eabdb4cef0939b2e2bd8ad56cac7a68fe14a92096b9cad3248c2&#38;token=935085254&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;tempkey=MTI1Ml9EY2lKYk82L3o2TzRMVm1DMm5NX3VjTnhUSmkxWVRtcWJLQV9OODh6V1Z1NXVtcVBpSE5ya1FuUUZxRXlYWW1MSmtXZVk2ZGlrZ1JZbklTUXhrSlhNbjhkV3lFRlVEUTNRQzVUTVluenUwRkpld3dBR3g2c1VwUEhfOHdUZldGN2pQcndxZ1BaQ2t0TkxEWkhIXzZiaFh2MHhSUU9xS21hZTYxZ0tBfn4%3D&#38;chksm=880c4ccebf7bc5d83392ab82eabdb4cef0939b2e2bd8ad56cac7a68fe14a92096b9cad3248c2&#38;token=935085254&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[全球首发 ｜ 原生开源大模型托管项目 CSGHub]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><strong><span><span>关于</span></span></strong><strong><span><span><span>CSGHub</span></span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>大模型百花齐放的时代，数据和模型已成为企业和个人用户最核心的数字资产。然而，当前面临的挑战是模型文件和数据集的管理工具分散、管理手段单机化碎片化等问题。这些问题不仅带来了安全运营的巨大风险，也成为企业大模型能力更新迭代的阻力。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>如果您像我们一样坚信大模型将成为信息革命的最重要推动力，您可能也会思考如何更高效、更安全、更可靠地管理大模型的核心资产：<strong>模型、数据以及代码</strong>。正是出于对这一挑战的深刻认知，我们推出了</span></span><strong><span><span><span>CSGHub&nbsp; ——&nbsp; </span></span></span></strong><strong><span><span>一个旨在解决大模型相关资产治理难题的开源项目。</span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>的使命是为用户提供一个开源开放的、针对大模型原生设计的资产管理平台，支持私有化部署和离线运行。我们的目标是为用户创造一个安全、高效且可信赖的环境，使其能够更好地管理和运用大模型核心资产数据。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>实现了类似私有化</span></span><span><span><span>Huggingface</span></span></span><span><span>的功能，以类比</span></span><span><span><span>OpenStack Glance</span></span></span><span><span>管理虚拟机镜像、</span></span><span><span><span>Harbor</span></span></span><span><span>管理容器镜像以及</span></span><span><span><span>Sonatype Nexus</span></span></span><span><span>管理制品的方式，以开源软件的方式实现对</span></span><span><span><span>LLM</span></span></span><span><span>资产的安全、高效管理。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>官网：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fportal.opencsg.com%2F" target="_blank"><span><span><span>https://portal.opencsg.com/</span></span></span></a></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>源码：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenCSGs%2Fcsghub" target="_blank"><span><span><span><span style="color:#3370ff"><span><span>https://github.com/OpenCSGs/csghub</span></span></span></span></span></span></a>&nbsp;&nbsp; <span><span>（欢迎</span></span><span><span><span>Star🌟</span></span></span><span><span>）</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span><span>CSGHub </span></span></span></strong><strong><span><span>帮助用户治理</span></span></strong><strong><span><span><span>LLM</span></span></span></strong><strong><span><span>及</span></span></strong><strong><span><span><span>LLM</span></span></span></strong><strong><span><span>应用生命周期</span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>是一个开源、可信的大模型资产管理平台，帮助用户治理</span></span><span><span><span>LLM</span></span></span><span><span>和</span></span><span><span><span>LLM</span></span></span><span><span>应用生命周期中涉及到的资产（数据集、模型文件、代码等）。</span></span></span></span></span></p><ol><li><span><span><span><span><span>基于</span></span><span><span><span>CSGHub</span></span></span><span><span>，用户可以通过</span></span><span><span><span>Web</span></span></span><span><span>界面、</span></span><span><span><span>Git</span></span></span><span><span>命令行或者自然语言</span></span><span><span><span>Chatbot</span></span></span><span><span>等方式，实现对模型文件、数据集、代码等资产的操作，包括上传、下载、存储、校验和分发；</span></span></span></span></span></li></ol><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>2.同时平台提供微服务子模块和标准化</span></span><span><span><span>API</span>，便于用户与自有系统集成。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>具有以下功能特性：</span></span></span></span></span></p><ul><li><span><span><span><strong><span><span>资产统一管理：</span></span></strong><span><span>一站式</span></span><span><span><span>Hub</span></span></span><span><span>统一管理模型文件、数据集、大模型应用代码。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>研发生态兼容：</span></span></strong><span><span>同时支持</span></span><span><span><span>HTTPS</span></span></span><span><span>和</span></span><span><span><span>SSH</span></span></span><span><span>协议的</span></span><span><span><span>Git</span></span></span><span><span>命令和</span></span><span><span><span>Web</span></span></span><span><span>界面操作，</span></span><span><span>确保不同用户均可方便使用。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>大模型能力扩展：</span></span></strong><span><span>原生支持版本化管理、模型格式转化、数据自动预处理、数据集预览等功能。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>权限与安全：</span></span></strong><span><span>支持与企业用户系统集成、支持资产可见范围设置、外部内部零信任的鉴权接口设计，</span></span><span><span>最大化满足企业安全。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>私有化部署支持：</span></span></strong><span><span>无互联网依赖、无云厂商依赖等外部依赖，可一键启动私有化部署。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>大模型原生设计：</span></span></strong><span><span>支持自然语言交互、支持模型一键微调与部署、支持</span></span><span><span><span>Agent</span></span></span><span><span>与</span></span><span><span><span>Copilot</span></span></span><span><span>应用。</span></span></span></span></span></li></ul><h4 style="margin-left:0px; margin-right:0px; text-align:left"><span><span><span><strong><span><span>关于</span></span></strong><strong><span><span><span>CSGHub</span></span></span></strong><strong><span><span>技术架构</span></span></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>在技术架构上，</span></span><span><span><span>CSGHub</span></span></span><span><span>是一个综合了先进技术的资产管理平台，具有以下技术特点：</span></span></span></span></span></p><ul><li><span><span><span><span><span><span>CSGHub</span></span></span><span><span>整合了开源</span></span><span><span><span>Git Server</span></span></span><span><span>、</span></span><span><span><span>Git LFS</span></span></span><span><span>大文件存储协议和对象存储</span></span><span><span><span>OSS</span></span></span><span><span>等技术，提供可靠的数据存储层、灵活的基础设施接入层和高兼容的研发工具支持。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>通过服务化的架构，</span></span><span><span><span> CSGHub</span></span></span><span><span>提供</span></span><span><span><span>CSGHub Server</span></span></span><span><span>后台服务和</span></span><span><span><span>CSGHub Web Service</span></span></span><span><span>的管理界面，普通用户可以快速使用</span></span><span><span><span>Docker compose</span></span></span><span><span>或</span></span><span><span><span>Kubernetes Helm Chart</span></span></span><span><span>启动服务，实现生产级的资产管理。具备自研能力的用户可利用</span></span><span><span><span>CSGHub Server</span></span></span><span><span>进行二次开发，将核心管理功能集成到外部系统或自定义高级功能。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span><span>CSGHub</span></span></span><span><span>借助</span></span><span><span><span>Apache Arrow</span></span></span><span><span>和</span></span><span><span><span>DuckDB</span></span></span><span><span>等优秀开源项目，支持</span></span><span><span><span>Parquet</span></span></span><span><span>数据文件格式的预览，便于算法研究人员和爱好者进行本地化数据集管理。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span><span>CSGHub</span></span></span><span><span>提供直观的</span></span><span><span><span>Web</span></span></span><span><span>界面和面向企业组织架构的权限设计，用户可通过</span></span><span><span><span>Web UI</span></span></span><span><span>实现版本控制管理、在线浏览和下载，也可以设置数据集和模型文件的可见范围，实现数据安全隔离，还可以对模型和数据集发起用户讨论话题。</span></span></span></span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span>我们持续更新</span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>我们致力于将</span></span><span><span><span>CSGHub</span></span></span><span><span>打造为一个高效、易用的大模型资产管理平台，未来我们将继续实现以下技术</span></span><span><span><span>/</span></span></span><span><span>功能点：</span></span></span></span></span></p><ul><li><span><span><span><strong><span><span>资产管理</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>多源同步</span></span><strong><span><span><span>: </span></span></span></strong><span><span>支持配置并启用远端仓库</span></span><span><span><span>, </span></span></span><span><span>自动数据同步，支持</span></span><span><span><span>OpenCSG</span></span></span><span><span>传神社区、</span></span><span><span><span>Huggingface</span></span></span><span><span>等远端源。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>代码仓库<strong>：</strong>内置代码</span></span><span><span><span>Repo</span></span></span><span><span>管理功能，可关联模型、数据集、</span></span><span><span><span>Space</span></span></span><span><span>空间应用的代码。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span><span>AI</span></span></span></strong><strong><span><span>能力增强</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>一键微调</span></span><strong><span><span><span>: </span></span></span></strong><span><span>支持与</span></span><span><span><span>OpenCSG llm-finetune</span></span></span><span><span>集成，一键启动模型微调训练。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>一键推理</span></span><strong><span><span><span>:</span></span></span></strong><span><span>支持与</span></span><span><span><span>OpenCSG llm-inference</span></span></span><span><span>集成，一键启动模型推理服务。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>应用与企业功能</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>应用空间</span></span><strong><span><span><span>: </span></span></span></strong><span><span>支持托管</span></span><span><span><span>Gradio/Streamlit</span></span></span><span><span>应用并发布到</span></span><span><span><span>Space</span></span></span><span><span>应用空间</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>细粒度权限<strong>：</strong>面向企业架构的细粒度权限和访问控制设置</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>安全合规</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>资产元数据</span></span><strong><span><span><span>: </span></span></span></strong><span><span>资产的元数据管理机制，支持自定义元数据类型和对应的</span></span><span><span><span>AutoTag</span></span></span><span><span>规则。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>合规验证</span></span><strong><span><span><span>: </span></span></span></strong><span><span>模型和</span></span><span><span><span>License</span></span></span><span><span>的合规性校验与溯源验证</span></span></span></span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span>选择</span></span></strong><strong><span><span><span> CSGHub </span></span></span></strong><strong><span><span>开源项目</span></span></strong></span></span></span></p><ul><li><span><span><span><span><span>开源许可证友好、可商用，</span></span><span><span><span>Apache2</span></span></span><span><span>。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>开放式合作：我们欢迎大家加入我们开源项目的建设，贡献自己的想法、建议或代码。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>持续更新与改进：我们承诺不断更新</span></span><span><span><span>CSGHub</span></span></span><span><span>，并积极采纳社区反馈，不断改进项目。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>传统</span></span><span><span><span>DevOps</span></span></span><span><span>快速适配最佳选择，通过原生大模型项目与传统</span></span><span><span><span>DevOps</span></span></span><span><span>工具结合和集成。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>无论您是开发者、数据科学家，还是热衷于这个领域的爱好者，您都可以参与其中：</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>贡献代码：浏览我们的</span></span><span><span><span>GitHub</span></span></span><span><span>仓库，提交您的代码或修复</span></span><span><span><span>bug</span></span></span><span><span>。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>提供反馈：提交问题或建议，帮助我们改进和发展项目。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>分享经验：在社交媒体上分享您使用</span></span><span><span><span>CSGHub</span></span></span><span><span>的经验和见解。</span></span></span></span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span>共建</span></span></strong><strong></strong><strong><span><span>共享</span></span></strong><strong></strong><strong><span><span>开源</span></span></strong><strong></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>在</span></span><span><span><span> CSGHub </span></span></span><span><span>中，</span></span><span><span><span> C </span></span></span><span><span>代表</span></span><strong><span><span><span>Converged</span></span></span></strong><span><span>，我们将利用混合云的优势，算力降本增效，充分释放混合云的算力及存储资源；</span></span><span><span><span>S </span></span></span><span><span>代表</span></span><strong><span><span><span>Software refined</span></span></span></strong><span><span>，我们将利用自然语言技术，发掘</span></span><span><span><span>LLM</span></span></span><span><span>的潜力，重新定义软件的交付方式。通过大模型编程，人力降本增效；</span></span><span><span><span>G </span></span></span><span><span>代表</span></span><strong><span><span><span>Generative</span></span></span></strong><span><span>，我们将致力于大模型的民主化和大众化，让大模型更易于访问、更廉价、更容易定制，更适合垂直行业使用。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>是一个刚刚起步的项目，我们相信它将在解决大模型资产管理方面能够发挥积极作用。</span></span><span><span><span>OpenCSG </span></span></span><span><span>旨在成为中国开源领域和软件开发领域的新变革者，推出的首个大模型原生托管平台，这一举措标志着中国大模型开源社区发展已经迈入新的里程碑。加入我们的社区，共同创造更美好的未来！</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>官网：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fportal.opencsg.com%2F" target="_blank"><span><span><span>https://portal.opencsg.com/</span></span></span></a></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>源码：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenCSGs%2Fcsghub" target="_blank"><span><span><span><span style="color:#3370ff"><span><span>https://github.com/OpenCSGs/csghub</span></span></span></span></span></span></a>&nbsp;&nbsp; </span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275770</guid>
            <link>https://www.oschina.net/news/275770</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LG 洗衣机每日使用的数据流量高达 3.6GB？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>推特用户&nbsp;Johnie 发帖称自己的 LG 洗衣机每日使用的数据流量高达 3.6GB。根据推文的附图，这是华硕路由器的后台界面，从统计数据来看，这台 LG 洗衣机在一天内的下载数据流量是&nbsp;100MB 左右，但上传的数据流量高达 3.57GB，占这名用户每天上网流量的 5%。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d8749eb7537cb6b1cd4c0999273f8730d7a.png" referrerpolicy="no-referrer"></p><p>via<u><em>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FJohnie%2Fstatus%2F1744556503183585471" target="_blank">https://twitter.com/Johnie/status/1744556503183585471</a></em></u></p></blockquote><p>据介绍，LG 为具备联网功能的洗衣机提供了名为 SmartThinQ 的应用程序，供用户控制和自动化所有兼容的家用设备。连接洗衣机后，可以下载额外的洗涤程序等功能。但在这种情况下使用的数据量显然有些问题。</p><p>有人回复称，这台洗衣机可能是被攻击者入侵后用于「挖矿」，所以才会如此耗费数据流量。</p><p>Johnie 后续在路由器屏蔽了该设备，以阻止它使用数据流量。一天后，他发布了一篇跟帖，称这很可能只是华硕路由器界面工具的报告不准确。其他一些用户也证实了软件中可能会出现这种错误。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-5ccae8de5a5ecb50a8ca73fe7c43e7b1479.png" referrerpolicy="no-referrer"></p><p>via<u><em>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FJohnie%2Fstatus%2F1745194782463508672" target="_blank">https://twitter.com/Johnie/status/1745194782463508672</a></em></u></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275768</guid>
            <link>https://www.oschina.net/news/275768</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SpringBoot 2.x 正式停更了。Java 8 由 Solon 接收！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; text-align:start">最近有好多个新闻说：SpringBoot 2.x 正式停更了，Java 8 怎么办？当然用 Solon 喽！</p><pre><code class="language-java"><strong><span style="background-color:#f1c40f">Solon，同时支持 jdk8, jdk11, jdk17, jdk21。也支持 graalvm </span><span style="color:#a626a4"><span style="background-color:#f1c40f">native</span></span><span style="background-color:#f1c40f"> image。</span></strong></code></pre><p style="color:#24292e; text-align:start">既支持 java8，也支持 java21 的：</p><pre><code class="language-java"><span style="color:#4078f2">@SolonMain</span><span style="color:#a626a4">public</span><span style="color:#a626a4">class</span><span style="color:#c18401">App</span> {
    <span style="color:#a626a4">public</span><span style="color:#a626a4">static</span><span style="color:#a626a4">void</span><span style="color:#4078f2">main</span><span>(String[] args)</span> {
        Solon.start(App.class, args, app-&gt;{
            app.onEvent(HttpServerConfigure.class, e-&gt;{
                <em>//启用 Java 21 的虚拟线程</em>
                e.setExecutor(Executors.newVirtualThreadPerTaskExecutor());
            });
        });
    }
}
</code></pre><h2>Solon 是什么框架？</h2><p style="color:#24292e; text-align:start"><strong>Java 新的"生态级"应用开发框架</strong>。<span style="background-color:#f1c40f">从零开始构建，有自己的标准规范与开放生态</span>，所以才能支持 java8 - java21（历时「六」年，具备全球第二级别的生态规模）。</p><h2>相对于 Spring，有什么特点？</h2><ul><li>国产！国产！国产！</li><li>启动快 5 ～ 10 倍。<span>&nbsp;</span><strong>（更快）</strong></li><li>qps 高 2～ 3 倍。<span>&nbsp;</span><strong>（更高）</strong></li><li>低流量内存节省 1/3 ~ 1/2。<span>&nbsp;</span><strong>（更少）</strong></li><li>打包可以缩小到 1/2 ~ 1/10；比如，300Mb 的变成了 23Mb。<span>&nbsp;</span><strong>（更小）</strong></li></ul><h2>项目仓库地址？</h2><ul><li>gitee：<a href="https://gitee.com/noear/solon">https://gitee.com/noear/solon</a></li><li>github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fsolon" target="_blank">https://github.com/noear/solon</a></li></ul><h2>架构图？</h2><ul><li>Solon 生态架构图</li></ul><p style="color:#24292e; text-align:start"><img src="https://teamx.noear.org/img/686b4cb1435e4ce1a05f1b47971a443f.png" width="600" referrerpolicy="no-referrer"></p><ul><li>Solon Cloud 生态架构图</li></ul><p style="color:#24292e; text-align:start"><img src="https://teamx.noear.org/img/07ee442b58774aabb350484304690eb3.png" width="600" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275767</guid>
            <link>https://www.oschina.net/news/275767</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「商业版本」 Qt 6.5 LTS 系列发布首个更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#09102b">Qt 6.5.4 LTS<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fcommercial-lts-qt-6.5.4-released" target="_blank"> 已发布</a>，</span>此版本原计划在 11 月底推出。<span style="background-color:#ffffff; color:#09102b">这是&nbsp;</span>Qt 6.5 系列进入<strong>「仅限商业客户使用」</strong>周期后的首次更新，意味着只有付费的 Qt 客户才能访问这些新的点版本更新。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3937be561be37b8fd3fb09bed596cfa755f.png" referrerpolicy="no-referrer"></p><p>公告写道，Qt 6.5.4 没有添加任何新功能，主要是修复错误和提供其他改进。与 Qt 6.5.3 相比，Qt 6.5.4 包含约 355 个错误修复、安全更新和其他改进。此外还提供了针对 CVE-2023-51714 和 CVE-2023-45872 安全漏洞的修复。&nbsp;这些错误包括 Qt 的 HTTP2 代码中的整数溢出、加载无效的 QML 图像源可能会导致 Qt 内崩溃或其他问题。</p><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/262391/qt-6-5-lts-commercial-only" target="_blank">Qt 6.5 LTS 转为 「仅面向商业客户提供」 阶段</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275760/qt-6-5-4-lts</guid>
            <link>https://www.oschina.net/news/275760/qt-6-5-4-lts</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[全球 AI 专利申请量达 129 万，中国占比 64% 位列第一]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>中国信息通信研究院（简称「中国信通院」）近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8PeEO825PgxrTaPmhOr4ug" target="_blank">发布</a>了《全球数字经济白皮书（2023 年）》，总结了全球数字经济政策布局新动向、分析了全球数字经济发展最新态势、研究了全球数字经济重点领域发展情况并做出未来发展展望。</p><p>从产业规模看，全球人工智能产业规模快速增长。2023 年全球人工智能市场收入预计达 5132 亿美元，同比增长 20.7%。从企业发展看，截至 2023 年三季度，全球人工智能企业有 29542 家，中美人工智能企业数占全球总数的近一半，美国有 9914 家 (占比为 34%)，中国有 4469 家 (占比为 15%)。</p><p>白皮书还提到，大模型掀起时代浪潮，相关产品及应用研发加速。如，OpenAl 发布千亿级参数的多模态预训练模型 GPT-4，谷歌发布在多语言翻译上表现突出的 PaLM2，IBM 发布 Watsonx 等。</p><p>此外，在 AI 投融资金额方面，2022 年，全球 466 亿美元，同比下降 43%，2023 年前三季度，全球 243 亿美元，同比下降 38%。值得关注的是，AIGC 成为最热门领域，融资金额为 55.6 亿美元，同比增长 137%，占融资总额的 23%。</p><p>在 AI 论文发表方面，2013-2023 年 Q3，全球论文 117 万篇，中国论文达 36.8 万篇，位列全球第一，全球高水平论文 11 万篇。在专利申请授权方面，2013-2023 年 Q3，全球 AI 专利申请量累计达 129 万，全球 AI 专利授权量累计超 51 万，中国 AI 专利申请量占全球 64%，位列全球第一。</p><p><img height="311" src="https://oscimg.oschina.net/oscnet/up-e10dd424de8202d2026f3ba76891fa6b055.png" width="500" referrerpolicy="no-referrer"></p><p><img height="307" src="https://oscimg.oschina.net/oscnet/up-0a747a4d8a9619f057d9d5f54fd93c530e7.png" width="500" referrerpolicy="no-referrer"></p><p><img height="317" src="https://oscimg.oschina.net/oscnet/up-55234762406a96d9879a82e6b01fca4e871.png" width="500" referrerpolicy="no-referrer"></p><p><img height="306" src="https://oscimg.oschina.net/oscnet/up-ee5736d9947bb79c55fb6014fd60b63140a.png" width="500" referrerpolicy="no-referrer"></p><p><img height="300" src="https://oscimg.oschina.net/oscnet/up-a602e2e0cdfcd0a44a5c35b057a6564e544.png" width="500" referrerpolicy="no-referrer"></p><p><img height="313" src="https://oscimg.oschina.net/oscnet/up-843b623cbf5497a7f11f244e285c3df3c7c.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 02:29:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275758</guid>
            <link>https://www.oschina.net/news/275758</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一款 StarRocks 可视化建表和数据编辑的神器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span style="color:#1c1e21">什么是 StarRocks？</span></h1><p style="margin-left:0; margin-right:0"><span style="color:#1c1e21">StarRocks 是</span><strong><span style="color:#1c1e21">新一代极速全场景 MPP (Massively Parallel Processing) 数据库</span></strong><span style="color:#1c1e21">。StarRocks 的愿景是能够让用户的</span><strong><span style="color:#1c1e21">数据分析变得更加简单和敏捷</span></strong><span style="color:#1c1e21">。用户无需经过复杂的预处理，就可以用 StarRocks 来支持多种数据分析场景的极速分析。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">为了满足业务上的分析需求 </span><span>StarRocks 设计了四种数据模型（明细模型、聚合模型、更新模型、主键模型），它们有各自的特点以适配不同的业务场景。本文将从创建数据模型表开始，配合简洁的案例，来讲解明细模型的用法和特点。</span></p><span id="OSC_h1_2"></span><h1><span style="color:#4d4d4d">明细模型究竟是啥？</span></h1><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">首先我们来看 StarRocks 官方的定义：</span></p><div><p style="margin-left:0; margin-right:0"><span style="color:#1c1e21">明细模型是默认的建表模型。如果在建表时</span><strong><span style="color:#1c1e21">未指定任何模型，默认创建的是明细类型的表</span></strong><span style="color:#1c1e21">。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#1c1e21">创建表时，支持定义排序键。如果</span><strong><span style="color:#1c1e21">查询的过滤条件包含排序键，则 StarRocks 能够快速地过滤数据</span></strong><span style="color:#1c1e21">，提高查询效率。明细模型适用于日志数据分析等场景，</span><strong><span style="color:#1c1e21">支持追加新数据，不支持修改历史数据</span></strong><span style="color:#1c1e21">。</span></p></div><p style="margin-left:0; margin-right:0"><span>其次我们来看下 StarRocks 明细模型的标准建表语句与 MySQL 的差异：</span></p><p style="margin-left:0; margin-right:0"><img height="739" src="https://oscimg.oschina.net/oscnet/up-bc67c8412574134b5b87b53c3ffbbdbad77.png" width="1500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>可以看到除了 StarRocks 特有的关键字之外，两者语法大致是相同的。通过上述内容，我们可以总结以下关于 StarRocks 明细模型的信息：</span></p><ul><li><span style="color:#1c1e21">如果在建表语句中不指定具体模型，也就是省略不写，默认就是 DUPLICATE KEY 明细模型，并且会自动选取前三列作为排序键</span></li><li><span style="color:#1c1e21">指定排序键的作用类似于 MySQL 给列设置普通索引，目的是为了提高查询效率</span></li><li><span style="color:#1c1e21">写入的数据无论是否完全一致，都会插入到数据库中而且不支持 Update 语法</span></li></ul><p style="margin-left:0; margin-right:0"><span>以上信息就是明细模型的特点，我们从对比的角度讲，明细模型大致相当于：</span></p><p style="margin-left:0; margin-right:0"><strong><span>MySQL 具有普通索引的无主键表，并且不支持 Update 操作</span></strong><span>。</span></p><span id="OSC_h1_3"></span><h1><span style="color:#1c1e21">怎么建表？</span></h1><ul><li><span>使用 </span><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fclouddm-personal" target="_blank" rel="nofollow"><span>CloudDM</span></a></strong><span>，</span><span>添加完 </span><span>StarRocks 数据源之后，在表视图中右键方式开始新建表操作：</span></li></ul><p><img height="784" src="https://oscimg.oschina.net/oscnet/up-6b18873a50a6fcd0f85a7a45178d6ce645c.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>配置表名等基本信息</span></strong></li></ul><p><img height="787" src="https://oscimg.oschina.net/oscnet/up-a9413b095e530473a74df87c41e2f32df88.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>添加列信息</span></strong><span>，在结构设计器中选择列，然后点击增加按钮新建一个列，在右侧可以配置列的信息</span></li></ul><p style="margin-left:0; margin-right:0"><img height="784" src="https://oscimg.oschina.net/oscnet/up-b72f2bce2808716519ee13e20a6a7741fd8.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>设置表的数据模型</span></strong><span>，点击数据模型，点击添加类型选择「明细模型」，接着在下方选择排序键</span></li></ul><p style="margin-left:0; margin-right:0"><img height="784" src="https://oscimg.oschina.net/oscnet/up-41aa96fcf76a5b82fd136143da5919cc047.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>配置排序键</span></strong><span>，在右方具体选择列，多个排序键列需要多次点击增加。</span></li></ul><p style="margin-left:0; margin-right:0"><img height="784" src="https://oscimg.oschina.net/oscnet/up-f0acd773ced7134f8fc4005d3662ac6d27f.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>点击保存</span></strong><span>，生成建表语句，可选择立即执行或者复制 SQL 语句</span></li></ul><p style="margin-left:0; margin-right:0"><img height="787" src="https://oscimg.oschina.net/oscnet/up-f0bd5e94df2b2e63789388e9f5fdc4b6a68.png" width="1500" referrerpolicy="no-referrer"></p><span id="OSC_h1_4"></span><h1><span style="color:#1c1e21">怎么写数据？</span></h1><ul><li><span>右键点击新建表，并选择 </span><strong><span>编辑数据</span></strong></li></ul><p style="margin-left:0; margin-right:0"><img height="796" src="https://oscimg.oschina.net/oscnet/up-717792fcba330d6c78b2680e456868d028b.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>准备三行数据，前两行数据完全相同，点击 "+" 符号，填写完成后点击提交，保存这三条数据</span></li></ul><p style="margin-left:0; margin-right:0"><img height="783" src="https://oscimg.oschina.net/oscnet/up-da69383bcc5763f7770e6894862283bb858.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>查看</span><span>插</span><span>入的数据，发现三条都已</span><span>写入</span><span>，验证明细模型的特点:</span><span style="color:#1c1e21">写入的数据无论是否完全一致，都会插入到数据库中</span><span>。如果选择的是 </span><span>StarRocks 聚合模型，上面三条数据插入之后就会变为 2 条</span></li></ul><p style="margin-left:0; margin-right:0"><img height="783" src="https://oscimg.oschina.net/oscnet/up-34560e3ba343532c0abb329b57d1363c8f3.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>验证是否支持 Update，双击 「SR_TEST」 库打开新的查询窗口，针对这个表尝试做一次 UPDATE 操作，结果执行报错：</span></li></ul><p style="margin-left:0; margin-right:0"><img height="783" src="https://oscimg.oschina.net/oscnet/up-a60b30a85c8a83de75bf963af24f77ed2e3.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>CloudDM 可视化数据编辑会直接禁用更改，和 StarRocks 数据库约束保持一致</span></li></ul><p style="margin-left:0; margin-right:0"><img height="789" src="https://oscimg.oschina.net/oscnet/up-5f8843a772ab21cbbeac5fc97a0da025786.png" width="1500" referrerpolicy="no-referrer"></p><span id="OSC_h1_5"></span><h1><span>总结</span></h1><p style="margin-left:0; margin-right:0"><span>本文我们使用&nbsp;</span><span style="color:#1c1e21">CloudDM 可视化的方式创建了</span><span>&nbsp;StarRocks </span><span style="color:#1c1e21">明细模型表，并且同样可视化的方式对明细模型表进行了数据编辑操作。</span></p><p style="margin-left:0; margin-right:0">以下是这款小工具的下载链接，感兴趣的小伙伴可以下载试用一下：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fclouddm-personal" target="_blank" rel="nofollow"><span>https://www.clougence.com/clouddm-personal</span></a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 02:19:11 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5170379/blog/10823556</guid>
            <link>https://my.oschina.net/u/5170379/blog/10823556</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024 技术招聘状况：AI 工具被视为作弊，Python 需求最大]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">技术招聘平台 CoderPad 最新发布了一份「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcoderpad.io%2Fsurvey-reports%2Fcoderpad-and-codingame-state-of-tech-hiring-2024%2F" target="_blank">State of Tech Hiring 2024</a>」报告，基于来自 149 个不同国家/地区的 13,000 多名开发者、以及 143 个国家/地区约 5500 名 HR 人员的反馈。研究了开发人员对工作的期望和需求、技术招聘流程的演变以及 2024 年开发人员招聘优先事项和潜在障碍。</span></p><p><span style="color:#000000">报告指出，70% 的开发人员认为 AI 将有助于减少他们的工作量，并列举了一些好处：代码辅助、学习和教程、自动完成/代码生成以及文档和 API 支持等。ChatGPT 是最常用的 AI 工具，其他的还包括 Copilot、Bard、Bing AI 等。60% 的开发人员希望在工作中更多地使用 AI。</span></p><p><span style="color:#000000">但也有 33% 的受访开发人员表示在工作中不使用任何 AI 工具：其中 29% 是因为本人不信任该技术，28% 的是因为雇主反对；四分之一的开发人员认为 AI 不可靠或效率低下。43% 的受访者表示对 AI 所带来的影响持乐观态度；23% 的人持怀疑态度，还有 6% 甚至担心这项技术会影响其职业或工作前景。</span></p><p><span style="color:#000000">值得一提的是，尽管有 67% 的开发者和 38% 的 HR 表示已经在工作中使用了 AI 工具，但对于招聘过程中 AI 工具的使用却还存在一些争议。近四分之一（23%）的 HR 认为面试者使用 AI 工具属于作弊。只有 8% 的公司鼓励在招聘过程中使用 AI，48% 的受访者表示它的可接受性取决于使用情况。</span></p><p><span style="color:#000000">只有 19% 的开发人员会在招聘过程中公开使用 AI，还有三分之一的开发人员认为在面试或技术测试中使用 AI 工具是一种作弊行为。</span></p><p><span style="color:#000000">在被问及知名度以及招聘中需求最高的<strong>编程语言</strong>时，排名前十的分别是：Python、JavaScript、Java、C#、SQL、C++、TypeScript、HTML CSS、PHP、C。知名度和需求最高的框架则是 React 和 Node.js。</span></p><p><img height="1112" src="https://oscimg.oschina.net/oscnet/up-159c837d701bf90f73a6c17dbfc39c4cf78.png" width="500" referrerpolicy="no-referrer"></p><p>其他的一些发现还包括：</p><ul><li><span style="color:#000000">36% 的开发人员表示对承担管理职责不感兴趣。</span></li><li><span style="color:#000000">开发人员还希望有机会在工作中磨练自己的技术技能，其中最想学习的三项技能分别是 Web 开发、机器学习/深度学习和游戏开发。</span></li><li><span style="color:#000000">全栈、后端和前端开发人员仍然是需求最大的岗位。此外，还有 21% 的组织希望在 2024 年聘请 ML/AI 专家，去年的这一比例为 18%。</span></li><li><span style="color:#000000">开发人员对工作安全的担忧与日俱增，21% 的人表示，与一年前相比，他们的工作安全感降低了（去年为 17%）。37% 的人表示在过去 12 个月中没有明显变化，32% 的人表示感觉更有安全感。</span></li><li><span style="color:#000000">近一半的开发人员考虑在未来 12 个月内离职。</span></li></ul><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcoderpad.io%2Fsurvey-reports%2Fcoderpad-and-codingame-state-of-tech-hiring-2024%2F" target="_blank">查看完整报告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 03:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275663/state-of-tech-hiring-2024</guid>
            <link>https://www.oschina.net/news/275663/state-of-tech-hiring-2024</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Git 开发人员讨论引入 Rust 的可能性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Git 开发人员正讨论在其代码库中使用 Rust 编程语言，以补充现有的 C 和 Python 语言的想法。</p><blockquote><p>去年年底的假期我花了一些时间思考如何将 Rust 引入 Git 项目。</p><p>将 Rust 引入 Linux 内核的工作正在紧锣密鼓地进行中（见 [1]、[2]）。在他们既定的目标中，我认为有几个这可能与 Git 项目潜在相关：</p><ul><li>降低内存安全错误、数据争用、内存泄漏等风险。 得益于该语言的安全保证。</li><li>在 Rust 中重构或引入新代码时更容易（假设几乎不使用语言的「不安全」功能）。</li><li>通过使用更现代的语言，为 Git 做贡献变得更容易，也更容易为更多程序员所使用。</li></ul><p>鉴于这些优势的诱惑力，我认为至少值得考虑和讨论如何让 Rust 进入 Junio 的树中。</p></blockquote><p><img height="296" src="https://oscimg.oschina.net/oscnet/up-89b0fcaa21f05d837885d3b9e645f5dcb9c.png" width="300" referrerpolicy="no-referrer"></p><p>然而，虽然 Rust 的内存安全特性对许多人来说是个利好，但 Git 开发者的反应却好坏参半。部分<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FGCC-Rust-Developer-Discussion" target="_blank">原因是</a> Git 广泛应用于多种不同的平台和 CPU 架构。目前，使用 Rust 几乎必须使用基于 LLVM 的 rustc 编译器。虽然 GCC 编译器等正在努力添加可用的 Rust 支持，但目前这些替代方案还没有投入生产。因此，如果 Rust 代码被强制使用，Git 的使用可能会受到限制，否则他们可能不得不在初期将基于 Rust 的 Git 功能作为可选项。&nbsp;</p><p>更多详情可以通过此<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fgit%2FCALNs47s3tUQoOD4ejdoTn6y12ywjL0j5hWU-fUnBLe_o3vV5SQ%40mail.gmail.com%2FT%2F" target="_blank">邮件列表线程</a>进行了解。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275659/git-rust-discussion</guid>
            <link>https://www.oschina.net/news/275659/git-rust-discussion</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Motūrus OS —— 适用于 x64 虚拟机的 Rust 优先操作系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Motūrus 项目为云构建了一个简单、快速、安全的操作系统（Motūrus OS）。</p><p>更具体地说，Motūrus OS（有时也称作 Motor OS）是一种新的操作系统，针对基于虚拟机的工作负载，如网络服务、"无服务器"、边缘缓存等。</p><p>Motūrus OS 是基于 Rust 的微内核操作系统，专门针对虚拟化工作负载。它目前支持基于 x64 KVM 的虚拟机，可在 Qemu 或 Cloud Hypervisor 中运行。</p><p><img alt="" height="559" src="https://static.oschina.net/uploads/space/2024/0108/153945_gPrH_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 02:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/motor-os</guid>
            <link>https://www.oschina.net/p/motor-os</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 捕获数据更改 (CDC) 平台 Debezium]]>
            </title>
            <description>
                <![CDATA[<p><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE-2.0.html"><img src="http://img.shields.io/:license-apache%202.0-brightgreen.svg" alt="License" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=http%3A%2F%2Fsearch.maven.org%2F%23search%257Cga%257C1%257Cg%253A%2522io.debezium%2522"><img src="https://maven-badges.herokuapp.com/maven-central/io.debezium/debezium-parent/badge.svg" alt="Maven Central" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdebezium.zulipchat.com%2F%23narrow%2Fstream%2F302529-users"><img src="https://img.shields.io/badge/chat-users-brightgreen.svg" alt="User chat" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdebezium.zulipchat.com%2F%23narrow%2Fstream%2F302533-dev"><img src="https://img.shields.io/badge/chat-devs-brightgreen.svg" alt="Developer chat" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgroups.google.com%2Fforum%2F%23%21forum%2Fdebezium"><img src="https://img.shields.io/:mailing%20list-debezium-brightgreen.svg" alt="Google Group" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=http%3A%2F%2Fstackoverflow.com%2Fquestions%2Ftagged%2Fdebezium"><img src="http://img.shields.io/:stack%20overflow-debezium-brightgreen.svg" alt="Stack Overflow" referrerpolicy="no-referrer"></a></p><p>Copyright Debezium Authors.
Licensed under the <a href="https://gitee.com/link?target=http%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE-2.0">Apache License, Version 2.0</a>.
The Antlr grammars within the debezium-ddl-parser module are licensed under the <a href="https://gitee.com/link?target=https%3A%2F%2Fopensource.org%2Flicenses%2FMIT">MIT License</a>.</p><p>中文 | <a href="https://gitee.com/opengauss/debezium/blob/master/README.md">English</a> | <a href="https://gitee.com/opengauss/debezium/blob/master/README_JA.md">Japanese</a></p><h1><a id="user-content-debezium-简介" class="anchor" href="https://gitee.com/opengauss/debezium#debezium-%E7%AE%80%E4%BB%8B"></a>Debezium 简介</h1><p>Debezium 是一个开源项目，为捕获数据更改 (change data capture,CDC) 提供了一个低延迟的流式处理平台。你可以安装并且配置 Debezium 去监控你的数据库，然后你的应用就可以消费对数据库的每一个行级别 (row-level) 的更改。只有已提交的更改才是可见的，所以你的应用不用担心事务 (transaction) 或者更改被回滚 (roll back)。Debezium 为所有的数据库更改事件提供了一个统一的模型，所以你的应用不用担心每一种数据库管理系统的错综复杂性。另外，由于 Debezium 用持久化的、有副本备份的日志来记录数据库数据变化的历史，因此，你的应用可以随时停止再重启，而不会错过它停止运行时发生的事件，保证了所有的事件都能被正确地、完全地处理掉。</p><p>监控数据库，并且在数据变动的时候获得通知一直是很复杂的事情。关系型数据库的触发器可以做到，但是只对特定的数据库有效，而且通常只能更新数据库内的状态 (无法和外部的进程通信)。一些数据库提供了监控数据变动的 API 或者框架，但是没有一个标准，每种数据库的实现方式都是不同的，并且需要大量特定的知识和理解特定的代码才能运用。确保以相同的顺序查看和处理所有更改，同时最小化影响数据库仍然非常具有挑战性。</p><p>Debezium 提供了模块为你做这些复杂的工作。一些模块是通用的，并且能够适用多种数据库管理系统，但在功能和性能方面仍有一些限制。另一些模块是为特定的数据库管理系统定制的，所以他们通常可以更多地利用数据库系统本身的特性来提供更多功能。</p><h2><a id="user-content-debezium 基础架构" class="anchor" href="https://gitee.com/opengauss/debezium#debezium%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84"></a>Debezium 基础架构</h2><p>Debezium 是一个捕获数据更改 (CDC) 平台，并且利用 Kafka 和 Kafka Connect 实现了自己的持久性、可靠性和容错性。每一个部署在 Kafka Connect 分布式的、可扩展的、容错性的服务中的 connector 监控一个上游数据库服务器，捕获所有的数据库更改，然后记录到一个或者多个 Kafka topic(通常一个数据库表对应一个 kafka topic)。Kafka 确保所有这些数据更改事件都能够多副本并且总体上有序 (Kafka 只能保证一个 topic 的单个分区内有序)，这样，更多的客户端可以独立消费同样的数据更改事件而对上游数据库系统造成的影响降到很小 (如果 N 个应用都直接去监控数据库更改，对数据库的压力为 N，而用 debezium 汇报数据库更改事件到 kafka，所有的应用都去消费 kafka 中的消息，可以把对数据库的压力降到 1)。另外，客户端可以随时停止消费，然后重启，从上次停止消费的地方接着消费。每个客户端可以自行决定他们是否需要 exactly-once 或者 at-least-once 消息交付语义保证，并且所有的数据库或者表的更改事件是按照上游数据库发生的顺序被交付的。</p><p>对于不需要或者不想要这种容错级别、性能、可扩展性、可靠性的应用，他们可以使用内嵌的 Debezium connector 引擎来直接在应用内部运行 connector。这种应用仍需要消费数据库更改事件，但更希望 connector 直接传递给它，而不是持久化到 Kafka 里。</p><h2><a id="user-content-常见使用场景" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"></a>常见使用场景</h2><p>Debezium 有很多非常有价值的使用场景，我们在这儿仅仅列出几个更常见的使用场景。</p><h3><a id="user-content-缓存失效 cache-invalidation" class="anchor" href="https://gitee.com/opengauss/debezium#%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88cache-invalidation"></a>缓存失效 (Cache invalidation)</h3><p>在缓存中缓存的条目 (entry) 在源头被更改或者被删除的时候立即让缓存中的条目失效。如果缓存在一个独立的进程中运行 (例如 Redis，Memcache，Infinispan 或者其他的)，那么简单的缓存失效逻辑可以放在独立的进程或服务中，从而简化主应用的逻辑。在一些场景中，缓存失效逻辑可以更复杂一点，让它利用更改事件中的更新数据去更新缓存中受影响的条目。</p><h3><a id="user-content-简化单体应用 simplifying-monolithic-applications" class="anchor" href="https://gitee.com/opengauss/debezium#%E7%AE%80%E5%8C%96%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8simplifying-monolithic-applications"></a>简化单体应用 (Simplifying monolithic applications)</h3><p>许多应用更新数据库，然后在数据库中的更改被提交后，做一些额外的工作：更新搜索索引，更新缓存，发送通知，运行业务逻辑，等等。这种情况通常称为双写 (dual-writes)，因为应用没有在一个事务内写多个系统。这样不仅应用逻辑复杂难以维护，而且双写容易丢失数据或者在一些系统更新成功而另一些系统没有更新成功的时候造成不同系统之间的状态不一致。使用捕获更改数据技术 (change data capture,CDC)，在源数据库的数据更改提交后，这些额外的工作可以被放在独立的线程或者进程 (服务) 中完成。这种实现方式的容错性更好，不会丢失事件，容易扩展，并且更容易支持升级。</p><h3><a id="user-content-共享数据库 sharing-databases" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%BA%93sharing-databases"></a>共享数据库 (Sharing databases)</h3><p>当多个应用共用同一个数据库的时候，一个应用提交的更改通常要被另一个应用感知到。一种实现方式是使用消息总线，尽管非事务性 (non-transactional) 的消息总线总会受上面提到的双写 (dual-writes) 影响。但是，另一种实现方式，即 Debezium，变得很直接：每个应用可以直接监控数据库的更改，并且响应更改。</p><h3><a id="user-content-数据集成 data-integration" class="anchor" href="https://gitee.com/opengauss/debezium#%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90data-integration"></a>数据集成 (Data integration)</h3><p>数据通常被存储在多个地方，尤其是当数据被用于不同的目的的时候，会有不同的形式。保持多系统的同步是很有挑战性的，但是可以通过使用 Debezium 加上简单的事件处理逻辑来实现简单的 ETL 类型的解决方案。</p><h3><a id="user-content-命令查询职责分离 cqrs" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E8%81%8C%E8%B4%A3%E5%88%86%E7%A6%BBcqrs"></a>命令查询职责分离 (CQRS)</h3><p>在命令查询职责分离 <a href="https://gitee.com/link?target=http%3A%2F%2Fmartinfowler.com%2Fbliki%2FCQRS.html">Command Query Responsibility Separation (CQRS)</a> 架构模式中，更新数据使用了一种数据模型，读数据使用了一种或者多种数据模型。由于数据更改被记录在更新侧 (update-side)，这些更改将被处理以更新各种读展示。所以 CQRS 应用通常更复杂，尤其是他们需要保证可靠性和全序 (totally-ordered) 处理。Debezium 和 CDC 可以使这种方式更可行：写操作被正常记录，但是 Debezium 捕获数据更改，并且持久化到全序流里，然后供那些需要异步更新只读视图的服务消费。写侧 (write-side) 表可以表示面向领域的实体 (domain-oriented entities)，或者当 CQRS 和 <a href="https://gitee.com/link?target=http%3A%2F%2Fmartinfowler.com%2FeaaDev%2FEventSourcing.html">Event Sourcing</a> 结合的时候，写侧表仅仅用做追加操作命令事件的日志。</p><h2><a id="user-content-building-debezium" class="anchor" href="https://gitee.com/opengauss/debezium#building-debezium"></a>Building Debezium</h2><p>使用 Debezium 代码库并在本地配置它需要以下软件：</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgit-scm.com">Git</a> 2.2.1 or later</li><li>JDK 11 or later, e.g. <a href="https://gitee.com/link?target=http%3A%2F%2Fopenjdk.java.net%2Fprojects%2Fjdk%2F">OpenJDK</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmaven.apache.org%2Findex.html">Apache Maven</a> 3.6.3 or later</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Finstall%2F">Docker Engine</a> or <a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.docker.com%2Fdesktop%2F">Docker Desktop</a> 1.9 or later</li></ul><p>有关平台上的安装说明，请参阅上面的链接。您可以通过以下指令查看安装版本</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ git --version</span><span id="LC2" class="line">$ javac -version</span><span id="LC3" class="line">$ mvn -version</span><span id="LC4" class="line">$ docker --version</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-为什么选用-docker" class="anchor" href="https://gitee.com/opengauss/debezium#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E7%94%A8-docker"></a>为什么选用 Docker?</h3><p>许多开源软件项目使用 Git、Java 和 Maven，但需要 Docker 的情况不太常见。Debezium 被设计用来与许多外部系统进行通信，比如各种数据库和服务，我们的集成测试验证了 Debezium 成功地做到了这一点。但 Debezium 的构建系统使用 Docker 自动下载或创建必要的映像，并为每个系统启动容器，而不是期望您在本地安装所有这些软件系统。然后，集成测试可以使用这些服务并验证 Debezium 的行为是否符合预期，当集成测试完成时，Debezium 将自动停止它启动的所有容器.</p><p>Debezium 还有一些不是用 Java 编写的模块，因此它们必须在目标操作系统上使用。Docker 让我们的构建使用目标操作系统的映像和所有必要的开发工具来完成。</p><p>使用 Docker 有几个优点：</p><ol><li>不需要在本地计算机上安装、配置和运行每个所依赖的外部服务的特定版本，也不必在本地网络上访问它们。即使配置了，Debezium 也不会用到它们。</li><li>我们可以测试外部服务的多个版本。每个模块可以启动它需要的任何容器，因此不同的模块可以轻松地使用不同版本的服务。</li><li>每个人都可以在本地运行完整的构建。 不必依赖远程持续集成服务器在设置了所有必需服务的环境中运行构建。</li><li>所有构建都是一致的。当多个开发人员各自构建相同的代码库时，他们应该看到完全相同的结果——只要他们使用相同或等效的 JDK、Maven 和 Docker 版本。这是因为容器将在相同的操作系统上运行相同版本的服务。另外，所有的测试都是为了连接到运行在容器中的系统而设计的，因此没有人需要修改连接属性或特定于其本地环境的自定义配置。</li><li>不需要清理服务, 即使这些服务在本地修改和存储数据. Docker <em>images</em> 被缓存, 所以 reusing 服务可以快速的启动容器并保持一致性, 但是 Docker <em>containers</em> 永远不会被重用：它们总是在原始的初始状态下启动，在关闭时被丢弃。集成测试依赖于容器，因此清理是自动处理的</li></ol><h3><a id="user-content-配置 docker 环境" class="anchor" href="https://gitee.com/opengauss/debezium#%E9%85%8D%E7%BD%AEdocker%E7%8E%AF%E5%A2%83"></a>配置 Docker 环境</h3><p>Docker Maven 插件通过检查以下环境变量来解析 Docker 主机：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">export DOCKER_HOST=tcp://10.1.2.2:2376</span><span id="LC2" class="line">export DOCKER_CERT_PATH=/path/to/cdk/.vagrant/machines/default/virtualbox/.docker</span><span id="LC3" class="line">export DOCKER_TLS_VERIFY=1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Docker 类似的容器可以自动配置这些参数。</p><h3><a id="user-content-项目编译" class="anchor" href="https://gitee.com/opengauss/debezium#%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91"></a>项目编译</h3><p>首先从 Git 存储库获取代码：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ git clone https://github.com/debezium/debezium.git</span><span id="LC2" class="line">$ cd debezium</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>用 maven 构建项目
$ mvn clean install</p><p>为不同的 dbms 使用不同的容器构建。请注意，如果 Docker 未运行或未配置，则可能会出现一个神秘的错误——如果是这种情况，请始终验证 Docker 是否正在运行，也许可以使用 Docker ps 列出正在运行的容器。</p><h3><a id="user-content-本地没有 docker" class="anchor" href="https://gitee.com/opengauss/debezium#%E6%9C%AC%E5%9C%B0%E6%B2%A1%E6%9C%89docker"></a>本地没有 Docker?</h3><p>您可以使用以下命令跳过集成测试和 docker 来构建项目：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -DskipITs</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-使用 wal2json 或-pgoutput-logical-decoding-plug-ins-运行 postgres-connector 的测试" class="anchor" href="https://gitee.com/opengauss/debezium#%E4%BD%BF%E7%94%A8wal2json%E6%88%96-pgoutput-logical-decoding-plug-ins-%E8%BF%90%E8%A1%8Cpostgres-connector%E7%9A%84%E6%B5%8B%E8%AF%95"></a>使用 wal2json 或 pgoutput logical decoding plug-ins 运行 Postgres connector 的测试</h3><p>Postgres 连接器支持三个逻辑解码插件，用于从 DB 服务器到连接器的流式更改：decoderbufs（默认）、wal2json 和 pgoutput。要使用 wal2json 运行 PG connector 的集成测试，请启用「wal2json decoder」构建配置文件：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -pl :debezium-connector-postgres -Pwal2json-decoder</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>要使用 pgoutput 运行 PG connector 的集成测试，请启用「pgoutput decoder」和「postgres-10」构建配置文件：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -pl :debezium-connector-postgres -Ppgoutput-decoder,postgres-10</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在使用 wal2json 插件时，一些测试目前无法通过。</p><p>查找对<code>io.debezium.connector.postgresql.DecoderDifferences</code>中定义的类型的引用以找到这些测试。</p><h3><a id="user-content-对外部数据库运行 postgres 连接器的测试-例如 amazon-rds" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%AF%B9%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E8%A1%8Cpostgres%E8%BF%9E%E6%8E%A5%E5%99%A8%E7%9A%84%E6%B5%8B%E8%AF%95-%E4%BE%8B%E5%A6%82amazon-rds"></a>对外部数据库运行 Postgres 连接器的测试, 例如：Amazon RDS</h3><p>如果您要针对非 RDS 集群进行测试，请注意须是超级用户，不仅要具有复制权限，而且还要有登录 pg_hba.conf 中所有数据库的权限。它还要求目标服务器上必须有 <em>postgis</em> 包，才能通过某些测试。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -pl debezium-connector-postgres -Pwal2json-decoder \</span><span id="LC2" class="line">     -Ddocker.skip.build=true -Ddocker.skip.run=true -Dpostgres.host=&lt;your PG host&gt; \</span><span id="LC3" class="line">     -Dpostgres.user=&lt;your user&gt; -Dpostgres.password=&lt;your password&gt; \</span><span id="LC4" class="line">     -Ddebezium.test.records.waittime=10</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>根据需要调整超时值。</p><p>有关在 RDS 上设置要测试的数据库的详细信息，请参阅 <a href="https://gitee.com/opengauss/debezium/blob/master/debezium-connector-postgres/RDS.md">PostgreSQL on Amazon RDS</a></p><h2><a id="user-content-贡献源码 contributing" class="anchor" href="https://gitee.com/opengauss/debezium#%E8%B4%A1%E7%8C%AE%E6%BA%90%E7%A0%81contributing"></a>贡献源码 (Contributing)</h2><p>Debezium 社区欢迎任何愿意以任何方式提供帮助的人，无论是报告问题、帮助文档，还是提供代码更改以修复错误、添加测试或实现新功能。有关详细信息，请参阅本<a href="https://gitee.com/opengauss/debezium/blob/master/CONTRIBUTE.md">文档</a>。</p>]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/opengauss/debezium</guid>
            <link>https://gitee.com/opengauss/debezium</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 得物 SRE 视角下的蓝绿发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>一、前言</h1><p style="color:#24292f; text-align:start">发布变更是影响稳定性的一个重大因素，为了发布异常时能快速回滚，增加发布期间的稳定性，也为了解决多服务部署时互相依赖而导致的发布时间增长等问题，得物在今年引入一种新的发布模式--蓝绿发布。这种发布模式带来了稳定性和效率的提升，这里我们以 SRE 的视角来解读下得物的蓝绿发布。</p><span id="OSC_h1_2"></span><h1>二、常见的发布形式有哪些？分别有什么优势？</h1><span id="OSC_h2_3"></span><h2>全量发布</h2><p style="color:#24292f; text-align:start">全量发布是早期企业进行系统升级的一种方式，因为早期的服务大多为大型机，单实例程序为主。并没有形成当下流行的微服务架构，因此当发布时往往需要停机发布。生产环境禁止使用这种方式进行部署！</p><span id="OSC_h2_4"></span><h2>滚动发布</h2><p style="color:#24292f; text-align:start">滚动发布顾名思义，假如生产中 16 台机器，我们可以分成 4 批。每批 4 台机器，每批机器执行更新，从版本 V1 更新为 V2，更新后重新将其投入使用，连续不断的更新其他机器，直到集群中所有的实例都更新为版本 B 后，结束发布。</p><p style="color:#24292f; text-align:start">这种方式的好处就是更新过程体验影响少，费用开销也少，发布期间无需额外新增机器。但是缺点也同样明显，一旦开始发布后，回滚时长很久，在多个有关联的服务部署时，需要上游服务完全发布后，才能发布下游服务，整体发布时间也很长。</p><p style="color:#24292f; text-align:start"><strong>滚动发布流程演示：</strong></p><p style="color:#24292f; text-align:start"><img alt="640.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/640.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="2.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/2.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_5"></span><h2>蓝绿发布</h2><p style="color:#24292f; text-align:start">通常意义上的蓝绿发布一般是将服务分为两组，蓝组和绿组，正常运转的情况下每组承载 50% 的流量。当准备发布服务时, 将蓝组流量设置为 0%，将绿组空闲出来，将服务部署到绿组的机器，然后利用 SLB 将流量切换到绿组的机器，让绿组来运行业务，没问题的话流量全部导向绿组，把蓝组也进行服务更新。</p><p style="color:#24292f; text-align:start">传统意义上的蓝绿发布优点在于发布策略简单，对于用户几乎无感知，可以实现平滑过度，在发布期间发现问题后也可以快速的回滚。而缺点则是通常需要准备正常业务使资源俩倍以上的服务器，需要投入较大的资源成本。</p><p style="color:#24292f; text-align:start"><strong>蓝绿发布流程演示：</strong></p><p style="color:#24292f; text-align:start">切除绿集群流量：</p><p style="color:#24292f; text-align:start"><img alt="12.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/12.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">当 A 组升级完毕，负载均衡重新接入 A 组，再把 B 组从负载列表中摘除，进行新版本的部署，A 组重新提供服务。</p><p style="color:#24292f; text-align:start"><img alt="13.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/13.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">最后，B 组也升级完成，负载均衡重新接入 B 组，此时，AB 组版本都已经升级完成，并且都对外提供服务。</p><span id="OSC_h2_6"></span><h2>灰度发布</h2><p style="color:#24292f; text-align:start">灰度发布，也被叫作金丝雀发布。与蓝绿部署、红黑部署不同的是，<strong>灰度发布属于增量发布方法</strong>。也就是说，服务升级的过程中，新旧版本会同时为用户提供服务。</p><p style="color:#24292f; text-align:start">灰度发布的具体流程是这样的：在集群的一小部分机器上部署新版本，给一部分用户使用，以测试新版本的功能和性能；确认没有问题之后，再对整个集群进行升级。简单地说，灰度发布就是把部署好的服务分批次、逐步暴露给越来越多的用户，直到最终完全上线。</p><p style="color:#24292f; text-align:start"><img alt="23.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/23.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">之所以叫作<strong>灰度发布</strong>，是因为它介于黑与白之间，并不是版本之间的直接切换，而是一个平滑过渡的过程。</p><p style="color:#24292f; text-align:start">AB Test 就是一种灰度发布方式，让一部分用户继续用 A，一部分用户开始用 B，如果用户对 B 没有什么反对意见，那么逐步扩大范围，把所有用户都迁移到 B 上面来。灰度发布可以保证整体系统的稳定，在初始灰度的时候就可以发现并调整问题，以保证其影响度，而我们平常所说的金丝雀部署也就是灰度发布的一种方式。</p><p style="color:#24292f; text-align:start">之所以又被叫作金丝雀发布，是因为金丝雀对瓦斯极其敏感，17 世纪时英国矿井工人会携带金丝雀下井，以便及时发现危险。这就与灰色发布过程中，先发布给一部分用户来测试相似，因而得名。</p><p style="color:#24292f; text-align:start"><img alt="0.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/0.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">对于灰度发布来说，它的优点在于<span>&nbsp;</span><strong>如果前期出问题影响范围很小，相对用户体验也少；可以做到及时发现、及时调整问题，影响范围可控。</strong><span>&nbsp;</span>但是采取这种模式对自动化以及运维监控能力的要求非常高。</p><span id="OSC_h1_7"></span><h1>三、得物的蓝绿布是如何实现的？</h1><p style="color:#24292f; text-align:start">前面讲了「what」，我们现在来说下「how」。</p><p style="color:#24292f; text-align:start">在平时，我们也会保留蓝绿两个集群，在发布时，引入灰度的流量平滑过度，帮助我们完成整个发布过程，下面以 SRE 的视角大致讲一下蓝绿发布的架构与流程。</p><span id="OSC_h2_8"></span><h2>蓝绿发布的流程</h2><p style="color:#24292f; text-align:start">在这种架构下，整体的发布流程如下：</p><ul><li><strong>日常流量</strong></li></ul><p style="color:#24292f; text-align:start">在未发布时，我们接入蓝绿发布的服务是平均分成蓝绿俩个集群的。平时通过网关均匀切分流量，平均每个集群 50% 的流量。</p><p style="color:#24292f; text-align:start"><img alt="9.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/9.png" referrerpolicy="no-referrer"></p><ul><li><strong>开始发布</strong></li></ul><p style="color:#24292f; text-align:start">当进行蓝绿发布时，我们将需要发布的应用创建在一个通道中 (这里先说下只有一个通道部署的情况)。</p><p style="color:#24292f; text-align:start"><img alt="09.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/09.png" referrerpolicy="no-referrer"></p><ul><li><strong>蓝集群 (右侧) 摘流</strong></li></ul><p style="color:#24292f; text-align:start">此时所有流量将只访问绿集群，如下图所示，当蓝集群摘流完成后, 此时集群没有任何流量，即可进行部署。</p><p style="color:#24292f; text-align:start"><img alt="8.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/8.png" referrerpolicy="no-referrer"></p><ul><li><strong>蓝集群 (右侧) 引流</strong></li></ul><p style="color:#24292f; text-align:start">当蓝集群发布完成后，我们需要对蓝集群发布后的服务进行确认。在确认部署成功后，则梯度的将流量引入更新后代码的蓝集群 (右侧)，最开始我们会切 1% 的流量，切流量后，我们可以在线上观察蓝服务的流量、错误率等。以此观测发布的版本是否有异常。之后，我们逐渐将流量切回 50%。注意，需要确保相关缺陷都在该环节暴露出来，因为这个环节另一半老版本的、稳定的代码还在 Standby，可以随时操作流量比例，进行流量迁移。</p><p style="color:#24292f; text-align:start"><img alt="7.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/7.jpeg" referrerpolicy="no-referrer"></p><blockquote><p>发布过程中，蓝、绿节点间流量不会互窜 (对比上图，蓝绿集群间斜向箭头没有了)。 此阶段需要注意 MQ 流量，因为 MQ 当前无法按比例进行切分，因此一旦开始切流，则 MQ 流量会恢复为 50%/50%。</p></blockquote><ul><li><strong>绿集群 (左侧) 摘流</strong></li></ul><p style="color:#24292f; text-align:start">通过扩大流量比例，流量全部切到蓝集群，这个阶段流量已全部切到新代码，可以让测试同学介入进行新功能验证以及回归测试。</p><p style="color:#24292f; text-align:start">在这个阶段只要绿集群还没发布，发现问题，仍然可以全部切回老代码！</p><p style="color:#24292f; text-align:start">当测试验证完成后，即可进行绿集群发布。发布后则不可以回切了！就算要代码回滚，也得等本次发布结束后,再单独对服务进行回滚。</p><p style="color:#24292f; text-align:start"><img alt="67.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/67.png" referrerpolicy="no-referrer"></p><ul><li><strong>绿集群 (左侧) 引流</strong></li></ul><p style="color:#24292f; text-align:start">在发布后则开始进入绿集群引流了，此时可以快速引流，因为已经没有可以回滚的、稳定版本的代码了。同样，还在发布阶段，及时流量均衡，也不会出现互相交叉的流量。</p><p style="color:#24292f; text-align:start"><img alt="34.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/34.png" referrerpolicy="no-referrer"></p><ul><li><strong>发布完成</strong></li></ul><p style="color:#24292f; text-align:start">发布完成后，则去除通道，蓝绿集群可以继续进行交互。</p><p style="color:#24292f; text-align:start"><img alt="32.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/32.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">如上图所示，使用以上发布流程具备以下好处：</p><ul><li><p>整个发布过程是以蓝、绿<strong>集群维度</strong>并行调度、实施的，通过发布平台统一操作，摘流，无需各业务域各自处理。</p></li><li><p>通过请求蓝绿粘性，让下游应用的新老版本代码可以同时存在，无需阻塞等待下游应用全部升级到新代码，解除了批次依赖。</p></li><li><p>发布过程中有灵活的流量控制能力，可以按 1%、50% 等阶梯流量验证应用。</p></li><li><p>上述发布流程，可以同时并存若干个，摘流、引流动作互不影响<span>&nbsp;</span><strong>(多发布通道)</strong>。</p></li></ul><span id="OSC_h2_9"></span><h2>蓝绿发布的架构</h2><ol><li><strong>应用架构 [1]</strong></li></ol><p style="color:#24292f; text-align:start"><img alt="45.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/45.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>1.1 流量规则 SDK</strong></p><p style="color:#24292f; text-align:start">在所有需要接入蓝绿发布的程序中，首先需要升级流量规则 SDK，流量规则 SDK 是应用蓝绿发布能力的代码底座，向中间件组件如 RPC、MQ、JOB 提供了主动查询流量规则和被动接受流量规则变更事件的能力，各中间件组件响应流量规则进行合适的动作，实现各类型流量的动态摘流、动态引流。</p><p style="color:#24292f; text-align:start"><strong>1.2 核心能力</strong></p><ul><li><p>依赖配置中心做持久化存储与事件推送。</p></li><li><p>所有配置读取都是内存操作，只会在启动时读取一次配置中心的配置，后续配置变更都依赖于配置中心的事件推送。</p></li><li><p>提供了如下的能力：</p><ul><li><p>当前应用所在的发布通道，是否在蓝绿发布中。</p></li><li><p>指定应用所在的发布通道，是否在蓝绿发布中。</p></li><li><p>蓝色流量百分比，范围[0, 100]。</p></li></ul></li><li><p>提供了如下的事件推送：</p><ul><li><p>发布开始事件 onStart。</p></li><li><p>发布结束事件 onFinish。</p></li><li><p>切流事件 onFlowChange，切流事件又细分了以下几个事件。</p></li><li><p>切流事件，蓝色流量标占比为 100，绿色流量标占比为 0，onEnterAllBlue。</p></li><li><p>切流事件，蓝色流量标占比从 100 改为非 100，绿色流量标占比从 0 改为非 0，onExitAllBlue。</p></li><li><p>切流事件，蓝色标流量占比为 0，绿色流量标占比为 100，onEnterAllGreen。</p></li><li><p>切流事件，蓝色标流量占比从 0 改为非 0，绿色流量标占比从 100 改为非 100，onExitAllGreen。</p></li></ul></li></ul><ol><li><strong>流量控制</strong></li></ol><p style="color:#24292f; text-align:start">得物目前的流量分为内部流量及外部流量，大部分流量情况如下：</p><ul><li><p>外部流量</p><ul><li><p>通过各类 Gateway 请求</p></li><li><p>通过 k8s Ingress 请求 (暂不支持蓝绿发布)</p></li></ul></li><li><p>内部流量</p><ul><li><p>通过 Gateway 互联</p></li><li><p>通过 Dubbo/Feign RPC 协议互联</p></li><li><p>通过 MQ 异步请求</p></li><li><p>通过 kafka 异步请求 (暂不支持)</p></li><li><p>JOB 类任务发起的流量</p></li><li><p>通过 k8s SVC 请求 (暂不支持蓝绿发布)</p></li></ul></li></ul><p style="color:#24292f; text-align:start">其中 Gateway 也是通过 Dubbo 或者 Feign 请求下游服务，因此也可统一为 RPC 类型，所以得物目前的流量主要包含 RPC、MQ、JOB 三种。</p><p style="color:#24292f; text-align:start"><strong>2.1 RPC</strong></p><p style="color:#24292f; text-align:start">我们 RPC 流量核心主要依赖注册中心，通过 Dubbo 的负载均衡策略进行调整。</p><p style="color:#24292f; text-align:start"><img alt="02.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/02.png" referrerpolicy="no-referrer"></p><ul><li><strong>如何实现 RPC 流量比例控制</strong></li></ul><p style="color:#24292f; text-align:start">RPC 场景下应用的流量比例控制，取决于它的上游应用按照流量规则比例向其发起调用。核心是上游应用感知到下游应用实例权重。</p><p style="color:#24292f; text-align:start"><strong>当前应用通过流量规则 SDK 监听到所在通道的流量规则变更时，修改注册中心上的实例权重。</strong></p><p style="color:#24292f; text-align:start"><strong>上游应用通过注册中心透明的感知下游应用的实例权重，通过加权负载均衡策略实现流量比例控制。</strong></p><p style="color:#24292f; text-align:start">Dubbo 原生的各类负载均衡策略都支持加权，也就是即便上游没有升级蓝绿依赖，下游应用依然可以通过蓝绿实例权重控制自己蓝绿集群被调用的比例。</p><p style="color:#24292f; text-align:start">Feign 原生是不支持的，Fusion 框架重写了负载均衡策略。</p><ul><li><strong>如何控制流量比例</strong></li></ul><p style="color:#24292f; text-align:start">蓝色流量比例 Rate，蓝色集群实例权重 WB，绿色集群实例权重 WG。</p><p style="color:#24292f; text-align:start">假设 Rate 从 1 调整到 99，一共有 4 个节点。</p><p style="color:#24292f; text-align:start">调整前 WB=1，WG=99，调整后 WB=99，WG=1，可能出现以下情况：</p><p style="color:#24292f; text-align:start"><img alt="03.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/03.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">-流量规则变更时，只让蓝或绿某一个集群修改自己的权重。</p><p style="color:#24292f; text-align:start">权重值是相对的，只需要保证蓝、绿集群节点权重相对值服从流量比例即可，无需同时修改蓝绿集群所有节点的权重。实例权重初始值设为 100，修改权重时，尽可能保证一半集群实例权重保持 100 不变，只修改另一侧被调整的集群实例的权重。</p><p style="color:#24292f; text-align:start">规则如下：</p><p style="color:#24292f; text-align:start">蓝色流量比例 Rate，公式：W/(100+W) = Rate/100。</p><p>Rate = 50，蓝色集群实例权重=100，绿色集群实例权重=100。</p><p>Rate &lt; 50，蓝色集群实例权重=100 * Rate / (100-Rate)，绿色集群实例权重=100。</p><p>Rate &gt; 50，蓝色集群实例权重=100，绿色集群实例权重=100 * Rate1 / (100-Rate1)，其中 Rate1=100 - Rate。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;<strong>只有一个颜色的集群时，忽略权重。</strong></p><ul><li><p><strong>如何实现完全摘流</strong></p></li></ul><p style="color:#24292f; text-align:start">Dubbo 框架内置的所有负载均衡策略都会识别下游实例的权重进行加权筛选节点，无需上游升级依赖，下游应用实例权重置 0 后即可实现摘流。</p><p style="color:#24292f; text-align:start">Feign 框架默认不识别实例权重，不进行加权负载均衡，为了避免蓝绿发布项目落地时推动发布链路上下游应用升级的困难，应用摘流时，会将自身注册的所有<strong>Feign 服务反注册</strong>，以保证 Feign 流量能被彻底摘流。</p><ul><li><strong>如何实现请求链路蓝绿粘性 (一蓝到底或一绿到底)</strong></li></ul><p style="color:#24292f; text-align:start">蓝绿子集群的代码是不一样的，按我们制定的发布流程，蓝集群是新代码，绿集群是老代码，如果不能固定请求链路的颜色，实现请求过程一蓝到底或者一绿到底，那么可能会出现上游新代码调用到下游老代码，出现代码不兼容的异常。</p><p style="color:#24292f; text-align:start"><strong>将 RPC 请求第一次进入每个通道时的蓝绿决策结果以 KV 形式 Append 到分布式 Trace 的 baggage 中，全链路透传、隔离、复用。</strong></p><p style="color:#24292f; text-align:start">如果 Trace 中有蓝绿决策结果，则按照蓝绿决策结果筛选节点；</p><p style="color:#24292f; text-align:start">否则按照流量比例筛选节点，并将决策结果（节点集群颜色）Append 到 Trace。</p><p style="color:#24292f; text-align:start"><strong>baggage-key: x-deploy-channel-type。 baggage-value：key=通道标识，value=蓝集群或绿集群标识，多个通道以&amp;分割。</strong><img alt="55.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/55.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>2.2 MQ(RocketMQ)</strong></p><p style="color:#24292f; text-align:start">核心是通过多消费组实现 MQ 流量隔离和控制。业务上创建的一个业务消费组，会在 MQ SDK 层面透明的创建 2 个衍生的颜色消费组。</p><p style="color:#24292f; text-align:start">发送消息时，会在消息头上携带当前节点蓝绿标。3 个消费组收到消息时，根据消息颜色和消费组颜色做颜色请和判断，互斥的消费同一个 TOPIC 上的所有消息。</p><ul><li><p><strong>非摘流状态</strong><img alt="00.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/00.png" referrerpolicy="no-referrer"></p></li><li><p><strong>摘流状态</strong></p></li></ul><p style="color:#24292f; text-align:start">应用感知到通道内蓝集群摘流时，蓝集群节点关闭消费组、绿集群节点启动三种颜色消费组。此时，MQ 流量完全由绿集群接管。</p><p style="color:#24292f; text-align:start"><img alt="24.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/24.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">通道内绿集群摘流时同理。</p><ul><li><p><strong>过程详解</strong></p><ul><li><p>原本一个消费组，拆分成三个消费组。</p></li><li><p>原始消费组 origin-consumer 用于消费无（蓝绿）标识的流量。</p></li><li><p>蓝色消费组 blue-consumer 用于消费「蓝色」标识流量。</p></li><li><p>绿色消费组 green-consumer 用于消费「绿色」标识流量。</p></li></ul></li></ul><p style="color:#24292f; text-align:start"><img alt="98.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/98.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>2.3 JOB(elasticjob)</strong><img alt="76.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/76.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">elasticjob 在运行时会在业务应用集群内利用 ZK 协调产生一个 Master 节点，由 Master 节点来按负载均衡策略将任务分配到各个执行器节点上。这个任务分配关系一经分配就会固定并在后续复用，除非是有应用进程上下线、JOB 分片数有变更。</p><p style="color:#24292f; text-align:start">改造 elasticjob 客户端适配流量规则 SDK，正在蓝绿发布的应用，在感知到有集群已经摘流时，会修改 ZK 上的状态标识，将上述记录的分配关系失效。</p><p style="color:#24292f; text-align:start">失效后，后续 JOB 执行时，会根据流量规则重新进行任务分配，避让已经摘流的节点，以保证已经摘流的节点上不会有 JOB 执行。</p><ul><li><strong>过程详解</strong></li></ul><p style="color:#24292f; text-align:start"><img alt="65.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/65.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_10"></span><h2>蓝绿接入注意事项</h2><p style="color:#24292f; text-align:start">因当前技术限制, 服务接入蓝绿需要注意以下事项：</p><ul><li><p><strong>流量无法摘除的服务暂时无法接入</strong></p><ul><li><p>未通过网关进入服务流量：例如，通过域名 SLB 进入服务、通过 Ingress 进入服务的流量无法摘除。</p></li><li><p>消费 Kafka 的流量无法摘除：由于应用使用的原生 kafka 客户端并全面铺开、无法对切入提供支持。</p></li><li><p>未使用统一框架/注册中心：未使用统一框架和注册中心的 Java 应用、以及非 Java 类应用当前不支持蓝绿发布。</p></li></ul></li><li><p><strong>使用特别提醒</strong></p><ul><li><p>消费消息需幂等：使用消息中间件必须做幂等，这是基本要求，在消费组启停管控中可能产生重复消息。</p></li><li><p>消费组线程数量：由于会有三个消费组、消费线程也会增加两倍，有业务影响时需调低线程数。</p></li><li><p>需要好流量评估：蓝绿发布需一半节点承接线上流量、在应用升级蓝绿集群时做好确认。</p></li><li><p>升级到特定版本：使用蓝绿发布需要应用升级到框架指定版本，详见接入指南。</p></li><li><p>Feign/HTTP 流量：针对使用框架 Feign 的 HTTP 流量，需上下游应用全部升级后方可使用。</p></li><li><p>使用 Dubbo 流量：使用框架 Dubbo 的服务只需要自身服务升级版本即可、无需上下游升级。</p></li></ul></li></ul><span id="OSC_h1_11"></span><h1>四、得物 SRE 团队对蓝绿发布的相关支持</h1><span id="OSC_h2_12"></span><h2>容器集群针对蓝绿的改造</h2><p style="color:#24292f; text-align:start">我们容器的 workload 使用的 OpenKruise 来进行管理。在进行蓝绿发布之前，我们使用的单个 clonesets 进行控制。</p><p style="color:#24292f; text-align:start">以下图所示，为我们一个测试非蓝绿集群，这里就是使用单个 cloneset 进行控制的单实例。</p><p style="color:#24292f; text-align:start"><img alt="41.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/41.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">在进行蓝绿改造后，我们将 workload 分为蓝绿两个 clonesets，通过这样，我们可以实现蓝绿发布时候的单边实例发布。同时在我们管理平台界面，任是单个集群界面， 以此来实现单集群下，蓝绿集群的拆分。</p><p style="color:#24292f; text-align:start"><img alt="80.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/80.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_13"></span><h2>蓝绿发布扩容资源优化</h2><p style="color:#24292f; text-align:start">前面就说过，蓝绿发布的一大缺点是通常需要准备平常流量 2 倍的资源，以应对蓝绿发布期间的流量。我们在加入蓝绿发布集群时，也尽量会提醒需要增加资源以应对蓝绿发布。但如果毫无规划的进行扩容，则会带来以下几个问题，比如长期保留扩容资源，则会带来成本的答复增长，而临时的扩容，则代表着对人力的消耗增加，而且临时的扩容也增长了对资源池管理的难度。可能在用户扩容时，出现资源池不足的情况。</p><p style="color:#24292f; text-align:start">为了应对这个问题，我们针对蓝绿发布进行了优化。首先是在发布流程中加入了扩缩容的环节。让平台自动帮助进行服务的扩缩容。其次，在容器层面，我们利用云服务商的弹性实例功能，来弥补常规资源池不足的情况，通过基于 Virtual Kubelet 技术接入到 k8s 中，<strong>支持秒级启动，按量计费，可快速完成扩缩容，满足业务的实时响应需求。</strong></p><p style="color:#24292f; text-align:start">注意: 在应用加入发布通道时，因蓝绿发布会导致流量减半，请务必对核心服务进行扩容<span>&nbsp;</span><strong>(SRE 建议扩容 30% 以上)。</strong></p><p style="color:#24292f; text-align:start"><img alt="08.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/08.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="06.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/06.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="021.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/021.jpeg" referrerpolicy="no-referrer"></p><span id="OSC_h2_14"></span><h2>发布监控</h2><p style="color:#24292f; text-align:start">加入灰度的蓝绿发布，因为涉及流量切换过程，因此对监控要求非常高，需要及时观测整个通道中的服务状态，而历史中单应用的监控页面无法满足发布 owner 有效观测。因此，针对这个问题，我们专门设计了通道级的蓝绿发布大盘，有效的观测流量分布情况，服务的请求情况等。通过该大盘，发布 owner 能有效掌握本次发布情况，决定是否继续进行切流。</p><p style="color:#24292f; text-align:start"><img alt="043.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/043.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_15"></span><h1>五、蓝绿发布期间可能出现的问题及应急响应策略</h1><span id="OSC_h2_16"></span><h2>资源不足导致的服务异常</h2><ol><li><strong>发布前扩容</strong></li></ol><p style="color:#24292f; text-align:start">根据蓝绿发布原理可知，我们在发布时，只有 50% 的实例来支撑原先 100% 的流量， 因此务必在蓝绿发布前勾选发布前临时扩容。扩容量需要评估以下几个数据：</p><ul><li>服务 CPU 水位情况</li></ul><p style="color:#24292f; text-align:start">根据历史经验，如日常水位 99 值在 20% 以内的服务，无需进行临时扩容，而 99 值在 20%-30 以内的服务，建议扩容 20% 左右。而 99 值在 30-40% 之间的服务，应当扩容 30% 以上。同时也要考虑发布当天的流量情况。</p><p style="color:#24292f; text-align:start">比如我们在七夕大促期间的发布，因大促流量过高，我们许多服务在蓝绿发布时扩容达到了 50% 以上的情况，通过此方式，保证在切流期间，服务也能正常。</p><p style="color:#24292f; text-align:start">因为我们的服务大多以 JAVA 为主，内存大多用固定方式分配给了 JVM 堆，因此内存不是一个核心的参考指标。</p><ul><li>服务线程使用情况</li></ul><p style="color:#24292f; text-align:start">除了服务 CPU 外，服务线程也是一个核心参考指标，特别是 Dubbo 线程池以及 DB/Redis 的线程池。比如原先 Dubbo 线程池，max 为 200,10 个实例的服务，当日常 QPS 大于 1000 的时候，在蓝绿发布时就需要扩容了，否则实例数少了一半，意味着可用线程也少了一半，这个时候就会出现线程拒绝异常了。</p><ol><li><strong>发布期间的资源不足</strong></li></ol><p style="color:#24292f; text-align:start">有些时候，我们评估不足会导致在开始发布后因为资源不足导致的错误率上升，此时需要我们紧急处理，但为了发布期间的稳定性，一旦我们开启了蓝绿通道，就不允许进行集群的扩容了。此时需要 SRE 接入在后台进行处理，处理逻辑如下：</p><ul><li><p>确认待扩容集群未处于发布状态。</p></li><li><p>手动修改蓝/绿单边集群 cloneset 的 replicas 数据。</p></li><li><p>待发布完毕后，手动还原该 cloneset 的 replicas 数据。</p></li></ul><p style="color:#24292f; text-align:start"><strong>因该操作非标准操作，且存在风险，请尽量不要使用以上方式进行。</strong></p><span id="OSC_h2_17"></span><h2>发布中出现流量不均衡的情况</h2><p style="color:#24292f; text-align:start">之前的一次测试中，我们在引流后出现了服务流量不均衡的问题，当时因为 Fusion 框架升级了 Dubbo 异步的改造中存在逻辑缺陷，导致流量无法均衡分布。之后，通过回退 Fusion 框架版本后问题恢复。</p><p style="color:#24292f; text-align:start"><img alt="77.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/77.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">这是个比较危险的情况，某些节点会在发布时承担日常 400% 的流量，很容易造成服务雪崩。因此，在蓝绿发布中，负责人和 SRE 要加强服务的监控和关注力度，及时发现流量不均衡的情况并介入。</p><span id="OSC_h2_18"></span><h2>发布中出现流量互窜的情况</h2><p style="color:#24292f; text-align:start">流量互窜的问题会有许多种情况：有因为切流前的 JOB 持续运行，导致双边集群依旧有流量；有的因为链路中间节点没有升级蓝绿能力，导致流量错位；有的因为 MQ 请求下游导致的流量错位。这里不针对问题进行一一分析，问题的解决仅能依靠框架的升级，这里仅说下问题的影响和排查方法。</p><p style="color:#24292f; text-align:start">在蓝绿发布时，原先我们的预计是老代码连老代码，新代码连新代码，但出现异常请求时，可能出现新代码连老代码，或者老代码连下游新代码的情况，这个时候就会出现因为依赖不匹配，导致的服务异常。<img alt="243.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/243.png" referrerpolicy="no-referrer">要发现此类问题，我们首先要知道，在这种情况下，大多会出现单边集群错误率上升。通过我们的监控页面，我们能很好的发现单边错误率上升的情况。此时，我们就能根据这些错误的情况，在天眼的调用链分析中，查看错误的具体情况。此时需要我们判断链路里是否有出现流量异常的情况，查看节点的 Host name，可以判断是蓝或者绿集群节点。<img alt="123.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/123.png" referrerpolicy="no-referrer"><img alt="60.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/60.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_19"></span><h1>六、历史总结及展望未来</h1><span id="OSC_h2_20"></span><h2>蓝绿发布的效果</h2><p style="color:#24292f; text-align:start">自从交易域进行蓝绿发布以来，平均大版本的发布时效较之前得到了较大的提升，同时近期大版本已没有出现故障事件，在升级蓝绿发布后，我们可以提前在切流阶段发现问题，并快速回切进行修复，避免了故障带入生产。因此，现在蓝绿发布相比过去滚动部署，在效率和稳定性上均大有提升。</p><span id="OSC_h2_21"></span><h2>未来展望</h2><p style="color:#24292f; text-align:start">目前我们核心服务都已切换至蓝绿集群，这种为我们的多活打下了优势，已经天然具备了多活的条件。因此，未来我们可以通过这种架构来部署我们的多活，这样，当任何单机房出现异常后，能够快速切换到另外一个机房，我们的抗风险能力也会有巨大的提升。</p><p style="color:#24292f; text-align:start"><strong>参考引用:</strong><span>&nbsp;</span>[1] 特别鸣谢，本节蓝绿发布架构及原理部分引用了得物中间件平台 「羊羽」同学的文章。</p><p style="color:#24292f; text-align:start"><strong>文/latte</strong></p><p style="color:#24292f; text-align:start">&nbsp;</p><p style="color:#252933; text-align:start">本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" rel="nofollow" target="_blank">得物技术官网</a></p><p style="color:#252933; text-align:start">未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 02:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10773874</guid>
            <link>https://my.oschina.net/u/5783135/blog/10773874</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linus「温馨提示」：Intel Xe 驱动代码严重缺乏测试]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Linux 6.8 的 </span><span style="color:#121212">Direct Rendering Manager (DRM)&nbsp;</span><span style="color:#000000">内核图形/显示驱动程序更新包括新的英特尔"Xe"DRM 和 PowerVR Imagination 驱动程序、实验形式的 AMD 色彩管理属性、Raspberry Pi 5 图形支持等。</span></p><p><span style="color:#000000">但 Linus Torvalds 最近在合并相关</span><span style="color:#333333">代码</span><span style="color:#000000">时却发现，一些新提交的 Intel Xe 驱动程序代码"严重缺乏"测试。对此，他在内核邮件列表中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2FCAHk-%3DwgPJttFz8yrdpPTN-ypMmDXHOKw9yi1nZSEq%2B7%2BtGftZA%40mail.gmail.com%2F" target="_blank">表达</a>了自己的不满：</span></p><blockquote><p><span style="color:#000000">你的测试严重不足。甚至无法构建，原因似乎在于该&nbsp;commit b49e894c3fd8 ("drm/i915: Replace custom intel runtime_pm tracker with ref_tracker library")&nbsp;将"intel_wakeref_t"类型从"deep_stack_handle_t"改为了"unsigned long"......</span></p><p><span style="color:#000000">真令人不悦。我已经修复了那个损坏的 Xe compat 头文件并完成了构建，但这绝对不是事情的本来应该有的样子。我怎么会遇到这种情况？竟然会没有进行任何构建测试。</span></p><p><span style="color:#000000">为什么 %^!@$% 头文件会包含 C 文件？无论如何，这个错误都不应该发生。</span></p></blockquote><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-7e522381a922470c222f72c566df84b3bea.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000">与以前的一些「火爆」回复相比，Linus 这次的措辞可以说是算的上温和，并且也提出了一些合理的问题。事实上，在 2023 年底的&nbsp;Linux 基金会的日本开源峰会上，Linus 就<a href="https://www.oschina.net/news/269762/linus-torvalds-linux-future-ai">表示</a>自己已经收敛了脾气，在吸取了一些教训之后不会再 「对一些公司竖中指」。</span></p><p><span style="color:#000000">但也正如 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FTorvalds-Unhappy-Linux-6.8-DRM" target="_blank">Phoronix</a> 所言，无论如何 Linus 已经将新代码合并到 Linux 6.8 中。希望这只是&nbsp;Intel Xe 驱动程序的一个 one-off issue，而没有更大的代码质量问题。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2FCAHk-%3DwgPJttFz8yrdpPTN-ypMmDXHOKw9yi1nZSEq%2B7%2BtGftZA%40mail.gmail.com%2F" target="_blank">查看邮件列表</a>。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/269762/linus-torvalds-linux-future-ai" target="news">Linus Torvalds 收敛脾气，谈内核社区「老龄化」问题</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 04:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275552/linus-torvalds-intel-xe-drive-code-linux-6-8</guid>
            <link>https://www.oschina.net/news/275552/linus-torvalds-intel-xe-drive-code-linux-6-8</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三部门：到 2025 年初步形成支撑区块链发展标准体系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>工业和信息化部、中央网络安全和信息化委员会办公室、国家标准化管理委员会印发《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fzwgk%2Fzcwj%2Fwjfb%2Ftz%2Fart%2F2024%2Fart_c82be443223e4a5aa9cee2c435112e00.html" target="_blank">区块链和分布式记账技术标准体系建设指南</a>》(下称《指南》)。</p><p>其中提出，区块链和分布式记账技术 (以下简称「区块链」) 是新一代信息技术的重要组成部分，是分布式网络、加密技术、智能合约等多种技术集成的新型数据库软件。区块链技术具有数据透明、不易篡改、可追溯等特性，有望解决网络空间的信任和安全问题，推动互联网从传递信息向传递价值变革，将成为推动元宇宙、Web3.0 等未来产业快速发展的重要数字基础设施。</p><p><img height="316" src="https://oscimg.oschina.net/oscnet/up-380ad5c9a1d0ae2453b5bdb61fc89ff89ca.png" width="700" referrerpolicy="no-referrer"></p><p>《指南》提出建设目标：</p><p>到 2025 年，初步形成支撑区块链发展的标准体系。建立标准体系建设和标准研制的总体规则，重点面向基础共性、应用和服务等标准化领域，制定 30 项以上区块链相关标准，基本满足我国区块链标准化需求。</p><p>到 2027 年，全面形成支撑区块链发展的标准体系。制定 50 项以上区块链相关标准，持续推动区块链基础共性、关键应用示范、安全保障等标准研制。适度超前布局一批支撑未来产业发展需要的关键应用标准，有效指导我国区块链技术和产业发展，提升技术与应用服务水平。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275546</guid>
            <link>https://www.oschina.net/news/275546</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenVoice —— 多功能即时语音克隆]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OpenVoice，这是一种多功能的即时语音克隆方法，只需要参考说话者的一个简短的音频剪辑即可复制他们的声音并生成多种语言的语音。</span></p><p><span style="color:#000000">除了复制参考说话者的音色之外，OpenVoice 还可以对语音风格进行精细控制，包括情感、口音、节奏、停顿和语调。OpenVoice 还可以针对海量说话人训练集中未包含的语言实现零样本跨语言语音克隆。OpenVoice 的计算效率也很高，其成本比性能较差的商用 API 低数十倍。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#000000"><strong><span style="background-color:oklch(1 0 0)">准确的音色克隆</span></strong></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:oklch(1 0 0)">OpenVoice 可以准确克隆参考音色并生成多种语言和口音的语音。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#000000"><span style="background-color:oklch(1 0 0)">灵活的语音风格控制</span></span></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:oklch(1 0 0)">OpenVoice 可以对语音风格（例如情感和口音）以及其他风格参数（包括节奏、停顿和语调）进行精细控制。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#000000"><strong><span style="background-color:oklch(1 0 0)">零样本跨语言语音克隆</span></strong></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:oklch(1 0 0)">参考语音和生成的语音可以是海量说话人多语言数据集之外的任何语言。</span></span></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 03:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/openvoice</guid>
            <link>https://www.oschina.net/p/openvoice</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | Windows 和 iOS 设备间文件传输 AirDropPlus]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-airdrop-plus" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#airdrop-plus"></a>AirDrop Plus</h1><p>用于 iOS 设备和 Windows 电脑之间进行文件传输，基于 HTTP，需要配合快捷指令使用</p><h1><a id="user-content-依赖" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E4%BE%9D%E8%B5%96"></a>依赖</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python==3.10.6</span><span id="LC2" class="line">flask==3.0.0</span><span id="LC3" class="line">win10toast==0.9</span><span id="LC4" class="line">psutil==5.9.6</span><span id="LC5" class="line">pyinstaller==6.2.0</span><span id="LC6" class="line">windows_toasts==1.0.1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-打包" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%89%93%E5%8C%85"></a>打包</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">pyinstaller <span class="nt">--add-data</span><span class="s1">'config;config'</span><span class="nt">-w</span> AirDropPlus.py</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-使用" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E4%BD%BF%E7%94%A8"></a>使用</h1><ol><li>Windows 端安装 bonjour，这样可以通过 「设备名.local」 访问到 Windows，而不需要通过 IP 地址。
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/windows_device_name.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>修改配置文件 config.ini，设置文件保存路径和密钥</li><li>手机端下载快捷指令
<ul><li>文件：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.icloud.com%2Fshortcuts%2Fdbbc2d75a611471babbe69e128db6702">https://www.icloud.com/shortcuts/dbbc2d75a611471babbe69e128db6702</a></li><li>剪贴板：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.icloud.com%2Fshortcuts%2F8b0a81ddf004422fbbb8fc8099546811">https://www.icloud.com/shortcuts/8b0a81ddf004422fbbb8fc8099546811</a></li></ul></li><li>设置快捷指令的主机为 Windows 的设备名 (不是用户名).local，设置快捷指令的密钥和 config.ini 中的密钥相同
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/shortcut_conf.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>发送文件时在文件分享菜单执行 AirDrop Plus 快捷指令。接收文件时，直接执行 AirDrop Plus 快捷指令
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/send_file.png" alt="Image" referrerpolicy="no-referrer"><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/receive_file.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>同步剪贴板直接执行快捷指令，点击发送或者接收!
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/sync_clipboard.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>Windows 端退出在任务管理器中退出
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/exit.png" alt="Image" referrerpolicy="no-referrer"></div></li></ol><h1><a id="user-content-api" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#api"></a>API</h1><h2><a id="user-content-请求头参数" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%8F%82%E6%95%B0"></a>请求头参数</h2><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>ShortcutVersion</td><td>String</td><td>快捷指令的版本，需要和 config.ini 中的 version 一致</td></tr><tr><td>Authorization</td><td>String</td><td>密钥，需要和 config.ini 中的 key 一致</td></tr></tbody></table><h2><a id="user-content-文件发送" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81"></a>文件发送</h2><blockquote><p>移动端发送一个文件到 PC</p></blockquote><h3><a id="user-content-请求" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82"></a>请求</h3><h4><a id="user-content-请求方式" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F"></a>请求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /file/send</li></ul><h4><a id="user-content-请求参数" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0"></a>请求参数</h4><ul><li>发送格式: 表单</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>File</td><td>要发送的文件</td></tr><tr><td>filename</td><td>String</td><td>发送的文件名</td></tr><tr><td>notify_content</td><td>String</td><td>让 PC 端通知显示的内容<br>如果是发送单个文件：这里填写的就是 filename 的内容<br>如果是发送 n 个文件：前 n-1 个的 notify_content 为空，第 n 个的 notify_content 包含 n 个文件的 filename，使用\n 分隔</td></tr></tbody></table><h3><a id="user-content-返回" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E"></a>返回</h3><ul><li>返回类型: JSON</li><li>返回内容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">"发送成功"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="kc">null</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-文件发送列表" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81%E5%88%97%E8%A1%A8"></a>文件发送列表</h2><blockquote><p>移动端发送文件列表到 PC（通知 PC 接下来要发送哪些文件）</p></blockquote><h3><a id="user-content-请求-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-1"></a>请求</h3><h4><a id="user-content-请求方式-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-1"></a>请求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /file/send/list</li></ul><h4><a id="user-content-请求参数-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-1"></a>请求参数</h4><ul><li>发送格式: 表单</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>file_list</td><td>String</td><td>要发送的文件列表，文件之间用\n 分隔，如：aaa.jpg\nbbb.png</td></tr></tbody></table><h3><a id="user-content-返回-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-1"></a>返回</h3><ul><li>返回类型: JSON</li><li>返回内容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">"发送成功"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="kc">null</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-文件接收列表" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E6%8E%A5%E6%94%B6%E5%88%97%E8%A1%A8"></a>文件接收列表</h2><blockquote><p>获取 PC 复制的文件的文件地址列表</p></blockquote><h3><a id="user-content-请求-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-2"></a>请求</h3><h4><a id="user-content-请求方式-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-2"></a>请求方式</h4><ul><li>HTTP 方法: GET</li><li>URL: /file/receive/list</li></ul><h4><a id="user-content-请求参数-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-2"></a>请求参数</h4><ul><li>无</li></ul><h3><a id="user-content-返回-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-2"></a>返回</h3><ul><li>返回类型: JSON</li><li>返回内容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">""</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="p">[</span><span class="s2">"c:/xx/xx/aa.txt"</span><span class="p">,</span><span class="w"></span><span class="s2">"c:/xx/xx/bb.txt"</span><span class="p">]</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-文件接收" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E6%8E%A5%E6%94%B6"></a>文件接收</h2><blockquote><p>移动端接收 PC 上的文件</p></blockquote><h3><a id="user-content-请求-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-3"></a>请求</h3><h4><a id="user-content-请求方式-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-3"></a>请求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /file/receive</li></ul><h4><a id="user-content-请求参数-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-3"></a>请求参数</h4><ul><li>发送格式: 表单</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td>要接收的文件的路径</td></tr></tbody></table><h3><a id="user-content-返回-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-3"></a>返回</h3><ul><li>返回类型: 文件</li><li>返回内容: 文件</li></ul><h2><a id="user-content-剪贴板发送" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%8F%91%E9%80%81"></a>剪贴板发送</h2><blockquote><p>把移动端的剪贴板发送到 PC 的剪贴板</p></blockquote><h3><a id="user-content-请求-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-4"></a>请求</h3><h4><a id="user-content-请求方式-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-4"></a>请求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /clipboard/send</li></ul><h4><a id="user-content-请求参数-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-4"></a>请求参数</h4><ul><li>发送格式: 表单</li></ul><table><thead><tr><th>参数名</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>clipboard</td><td>String</td><td>移动端剪贴板内容</td></tr></tbody></table><h3><a id="user-content-返回-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-4"></a>返回</h3><ul><li>返回类型: JSON</li><li>返回内容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">"发送成功"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="kc">null</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-剪贴板接收" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%8E%A5%E6%94%B6"></a>剪贴板接收</h2><blockquote><p>把 PC 端的剪贴板发送到移动端的剪贴板</p></blockquote><h3><a id="user-content-请求-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-5"></a>请求</h3><h4><a id="user-content-请求方式-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-5"></a>请求方式</h4><ul><li>HTTP 方法: GET</li><li>URL: /clipboard/receive</li></ul><h4><a id="user-content-请求参数-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-5"></a>请求参数</h4><ul><li>无</li></ul><h3><a id="user-content-返回-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-5"></a>返回</h3><ul><li>返回类型: JSON</li><li>返回内容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">""</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="s2">"PC 端剪贴板的内容"</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul>]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/yeytytytytyytyt/air-drop-plus</guid>
            <link>https://gitee.com/yeytytytytyytyt/air-drop-plus</link>
        </item>
    </channel>
</rss>
