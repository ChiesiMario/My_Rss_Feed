<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 29 Dec 2023 03:54:03 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[OpenNJet v2.00 发布啦！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在最新发布的 v2.0.0 版本中，对基础框架进行了大幅优化，增加对 HTTP/3 的支持，进一步丰富了 OpenNJet 的生态，动态能力逐渐成熟。此次更新主要包括以下五个方面：</p><ul><li><strong>基础框架大幅优化。</strong><span>&nbsp;</span>框架的优化对于 CoPilots 进行了加固，实现了 lua vm、高权限执行框架、配置沙箱等能力，从而进一步提高 OpenNJet 的稳定性以及执行效率。</li><li><strong>成熟的动态能力。</strong><span>&nbsp;</span>对模块继续进行动态化改造，优化了动态证书管理，覆盖企业灰度发布等关键场景，动态 location 能力在 v2.0.0 已经进入成熟阶段。</li><li><strong>加入新协议 HTTP/3 。</strong><span>&nbsp;</span>主要实现了 HTTP/3 的 Server 能力，以及 ftp 协议的代理能力。在安全的基础上实现灵活的负载均衡</li><li><strong>继续强化高效安全。</strong><span>&nbsp;</span>强化系统安全，加固自身；实现了业务安全，业务修复无损性能，更好的保护数据、提供可靠的服务，并简化运维任务。</li><li><strong>两个企业特性。</strong><span>&nbsp;</span>实现集群的基本构建，从而避免在故障转移、集群扩容新增加节点等人工操作，减少业务中断时间而无损性能；尝试引入智能化，合理分配资源。</li></ul><p><strong>详细解读：</strong><a href="https://my.oschina.net/u/6606114/blog/10456620">https://my.oschina.net/u/6606114/blog/10456620</a></p><p><strong>Gitee 仓库：</strong><a href="https://gitee.com/njet-rd/njet">https://gitee.com/njet-rd/njet</a></p><p><strong>官网：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnjet.org.cn%2F" target="_blank">https://njet.org.cn/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273260/opennjet-2-00-released</guid>
            <link>https://www.oschina.net/news/273260/opennjet-2-00-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CNCF 报告：Kubernetes 推动云支出增长]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>CNCF 发布的一份调查报告<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F12%2F20%2Fcncf-cloud-native-finops-cloud-financial-management-microsurvey%2F" target="_blank">指出</a>，Kubernetes 的到来导致了云支出急剧增加；有<span style="background-color:#fdfdfd; color:#000000">近一半 (49%) 的受访者表示 Kubernetes 推动了云支出增长。</span>其中，17% 的人表示成本大幅增加，32% 的人表示成本仅略有增加。</p><p>另一方面，13% 的受访者在实施 Kubernetes 后成功显着减少了云支出，11% 的受访者成功略微减少了支出。28% 的受访者表示采用 Kubernetes 后没有任何变化。</p><p><img height="273" src="https://oscimg.oschina.net/oscnet/up-153215e0c5e6743aa6ba642aee27efef80b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">约 28% 的受访者表示，Kubernetes 占用了他们一半的预算，10% 的受访者表示，这一数字高达 75%，还有极少数 5% 的受访者表示，Kubernetes 占用了他们的全部预算。</span></p><p><img height="279" src="https://oscimg.oschina.net/oscnet/up-0189729f7a76027da4a44209791e910f940.png" width="500" referrerpolicy="no-referrer"></p><p>26% 的人每月在云计算上的支出高达 50000 美元；还有 22% 的人表示他们的支出是前者的 20 倍，每月高达 100 万美元以上。此外，21% 的人每月云计算支出不到 1 万美元。</p><p>在受访者中，Kubernetes 基础设施的规模存在很大差异。近一半的受访者 (49%) 只<span style="background-color:#fdfdfd; color:#000000">拥有最多 50 个节点</span>。15% 拥有 51-100 个节点，17% 拥有 101-250 个节点，18% 拥有超过 251 个节点。&nbsp;</p><p>许多人力和技术因素被认为是云环境中支出以及不必要和意外成本增加的原因。过度配置以 70% 的比例遥遥领先，个人或团队层面缺乏责任意识位居第二，为 45%。使用资源后未能停用资源以及存在技术债务（定义为尚未重新架构以利用云原生环境的可扩展性的工作负载）并列第三，各占 43%。</p><p><img alt="" height="417" src="https://oscimg.oschina.net/oscnet/up-4a03450fb93c2128ee80b363c64d6f5c9f6.png" width="500" referrerpolicy="no-referrer"></p><p>只有 19% 的受访者表示他们能够准确监控 Kubernetes 成本。40% 的人只是进行了估计，38% 的人表示他们根本没有进行任何监控。</p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F12%2F20%2Fcncf-cloud-native-finops-cloud-financial-management-microsurvey%2F" target="_blank">查看完整报告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273259/cncf-report-kubernetes-cloud-spen</guid>
            <link>https://www.oschina.net/news/273259/cncf-report-kubernetes-cloud-spen</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.13.0 - 支持 StarRocks]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>支持 StarRocks。</li><li>支持 PostgreSQL, Redshift, RisingWave 高级自动补全。</li></ul><h2>🎄 改进</h2><ul><li>支持在 SQL 编辑器的表结构 DDL 弹窗中展示 index 语句。</li><li>支持在 SQL 编辑器中查询 PostgreSQL 外部表。</li><li>汉化钉钉 webhook 消息。</li></ul><h2>🎠 社区</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1TG411r7rr%2F" target="_blank">盘点常用的 MySQL 可视化客户端</a></li></ul><h2>📕 安装及升级</h2><p>参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升级指南</a>。如果从之前版本升级，获取新版本后，重新启动升级即可。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10456200</guid>
            <link>https://my.oschina.net/u/6148470/blog/10456200</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[写给工程师的 MacBook 商用级大模型知识库部署方案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;visibility: visible;" data-mpa-powered-by="yiban.io"><img class="rich_pages wxw-img __bg_gif" data-backh="96" data-backw="578" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="96" data-imgfileid="503041736" data-ratio="0.16666666666666666" src="https://oscimg.oschina.net/oscnet/990ffd45-801b-45e6-80cd-1b6ebb403d86.gif" data-type="gif" data-w="636" style="outline: 0px;letter-spacing: 0.544px;font-size: var(--articleFontsize);border-radius: 8px;text-align: justify;width: 100%;visibility: visible !important;background-size: 16px !important;height: auto;" referrerpolicy="no-referrer"><br style="outline: 0px;visibility: visible;"></section><section data-mpa-template="t" data-mpa-template-id="502" data-mpa-category="模板" style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);visibility: visible;"><section data-mpa-category="模板" data-mid="" style="padding-right: 1px;padding-left: 1px;outline: 0px;width: 677px;display: flex;justify-content: flex-start;align-items: center;flex-direction: column;visibility: visible;"><section data-mid="" style="outline: 0px;letter-spacing: 0.544px;width: 675px;display: grid;grid-template-columns: 26px auto;visibility: visible;"><section data-mid="" style="outline: 0px;width: 26px;height: 14px;display: flex;justify-content: center;align-items: center;align-self: center;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section data-mid="" style="padding-left: 7px;outline: 0px;display: flex;justify-content: flex-start;align-items: center;visibility: visible;"><section data-mid="" style="margin-right: 7px;outline: 0px;text-align: left;visibility: visible;"><p data-mid="" style="outline: 0px;width: 0px;font-size: 14px;font-family: PingFangSC-Semibold, &quot;PingFang SC&quot;;font-weight: bold;color: rgb(58, 92, 244);line-height: 20px;visibility: visible;"><br style="outline: 0px;visibility: visible;"></p></section><section data-mid="" style="margin-bottom: 4px;outline: 0px;width: 635px;height: 1px;border-top: 1px solid rgb(58, 92, 244);align-self: flex-end;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section></section></section><section data-mid="" style="padding: 7px 14px 9px 19px;outline: 0px;width: 675px;text-align: left;border-bottom: 1px solid rgb(58, 92, 244);visibility: visible;"><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.578px;text-align: justify;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;white-space-collapse: preserve;text-size-adjust: inherit;text-align: left;caret-color: rgb(23, 26, 29);letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(0, 0, 0);visibility: visible;font-size: 15px;">本文介绍了如何在<span style="font-size: 15px;letter-spacing: 1px;text-wrap: wrap;">自己的 MacBook 上部署一套知识库方案辅助自己的知识管理工作，</span><span style="font-size: 15px;letter-spacing: 1px;text-wrap: wrap;">希望能给每位计划自己搭建大模型知识库应用的工程师一点参考。</span></span></p></section></section></section><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);visibility: visible;line-height: 1.75em;"><br style="outline: 0px;visibility: visible;"></p><section style="margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041735" data-ratio="0.3161764705882353" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1447be7f-ff8f-4af0-a27e-b2863660d071.png" data-type="png" data-w="408" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 113px !important;" referrerpolicy="no-referrer"></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;color: rgb(3, 69, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;">背景</span></section><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></h4><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">历史的车轮滚滚向前，大模型技术发展日新月异，每天都有新鲜的技术出炉，让人目不暇接，同时具备可玩性和想象空间的各种应用和开源库，仿佛让自己回到了第一次设置 JAVA_HOME 的日子，作为一枚古典工程师，我专门挑了个可能对手上工作有帮助的方向小试一把，尝试在自己的 MacBook 上部署一套知识库方案，看看能不能辅助自己的知识管理工作。</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">﻿</span></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">我自己的 Macbook 配置情况如下，可以流畅地运行没问题。经过量化处理的大模型，还是对办公本很友好的。</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-top: 8px;line-height: 1.75em;text-align: center;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041733" data-ratio="0.24633431085043989" src="https://oscimg.oschina.net/oscnet/f4f317ea-3d61-4055-91c7-8f6534441328.jpg" data-type="other" data-w="682" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">为什么要在 MacBook 搭建而不是直接采用现成的云服务呢？最核心最重要的是我们手上的文档资料出于安全要求，不能随便上传云服务，也就无法实际验证知识库的实际效用；另外对于工程师来说，自己亲手搭建一个完整的方案、能灵活调整和对接各种不同的模型、评测各种模型不同的表现，也是出于对技术的探索本能使然。</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">﻿</span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">鉴于大模型已经是大模型及其周边概念已经是大家耳熟能详的东西，我这里就不再重复阐述相关的基础概念和理论了，直接进入动手环节，以用最快的速度部署起一个可用的知识库平台为目标，先用起来，再分各个环节优化。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;visibility: visible;"><img class="rich_pages wxw-img" data-imgfileid="503041732" data-ratio="0.3056872037914692" data-s="300,640" src="https://oscimg.oschina.net/oscnet/476e87ec-3926-4421-826d-d28a2c78789f.png" data-type="png" data-w="422" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 117px !important;" referrerpolicy="no-referrer"></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;color: rgb(0, 17, 255);">方案概述</span></section><section style="margin-bottom: 8px;"><br></section><span id="OSC_h4_1"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-bottom: 8px;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">应用架构</span></strong></span></h4><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">首先来看一下最终方案的应用架构是什么样子（下图）。在这套方案中，我们采用实力排上游、并且在使用上对学术和商业都友好的国产大模型 ChatGLM3-6B 对话模型和基于 m3e-base 模型的 embedding search RAG 方案；基于这两个模型封装和 ChatGPT 兼容的 API 接口协议；通过引入 One API 接口管理&amp;分发系统，形成统一的 LLM 接口渠道管理平台规范，并把封装好的接口协议注册进去；搭建与 Dify.ai 齐名的开源大模型知识库平台管理系统 FastGPT，实现集私有知识数据源预处理、嵌入检索、大模型对话一体的完整知识库应用流程。麻雀虽小五脏俱全，最终形成一套既满足商用标准、又能在 MacBook 跑起来的的方案。虽然智能程度和实际需求还有一定差距，但至少我们在不用额外购买显卡或云服务的情况下，以最小成本部署运行、并且能导入实际业务数据（如语雀知识库）进行实操验证，值得每位工程师都来动手尝试一下。</span></section><p style="margin-top: 8px;line-height: 1.75em;text-align: center;margin-bottom: 8px;"><img class="rich_pages wxw-img" data-imgfileid="503041734" data-ratio="0.7546296296296297" src="https://oscimg.oschina.net/oscnet/aa80fe6e-e7fa-4823-9906-d7c8f3ddcd3e.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></p><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><br></h4><span id="OSC_h4_2"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">成型展示</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"></h4><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">在用户终端，我们基于 FastGPT 提供知识库管理及使用方案。引用其官网介绍：FastGPT 是一个基于 LLM 大语言模型的知识库问答系统，提供开箱即用的数据处理、模型调用等能力。同时可以通过 Flow 可视化进行工作流编排，从而实现复杂的问答场景。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">﻿</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">先放一张官网上的图片，来增加一点吸引朋友们动手操作的动力：</span></section><section style="margin-bottom: 8px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="503041740" data-ratio="0.4842592592592593" src="https://oscimg.oschina.net/oscnet/b61b175a-2352-47d3-a57f-826fbb292f26.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></section><section style="margin-bottom: 8px;"><br></section><span id="OSC_h4_3"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">部署要点</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"></h4><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">本套方案部署分为四个主要环节、14 个具体步骤，只要一步步实操下去，每位朋友都可以在自己的本本上拥有属于自己的私有大模型知识库系统，步骤清单如下：</span></section><table width="628"><colgroup style="box-sizing: inherit;"><col width="192" style="box-sizing: inherit;"><col width="436" style="box-sizing: inherit;"></colgroup><tbody style="box-sizing: inherit;"><tr data-cangjie-key="87" data-sticky="false" style="box-sizing: inherit;height: 33px;"><td data-cangjie-key="89" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-weight: bold;letter-spacing: 1px;font-size: 15px;">主要环节</span></section></td><td data-cangjie-key="94" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-weight: bold;font-size: 15px;letter-spacing: 1px;">详细步骤</span></section></td></tr><tr data-cangjie-key="99" data-sticky="false" style="box-sizing: inherit;height: 33px;"><td data-cangjie-key="101" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">一、准备大模型</span></section></td><td data-cangjie-key="106" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">1.1 下载对话语言模型 ChatGLM3-6B</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">1.2 下载文本嵌入模型 m3e-base</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">1.3 使用 chatglm.cpp 对 ChatGLM3-6B 进行量化加速</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">1.4 验证模型问答效果</span></section></td></tr><tr data-cangjie-key="120" data-sticky="false" style="box-sizing: inherit;height: 33px;"><td data-cangjie-key="122" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">二、搭建模型 API 服务</span></section></td><td data-cangjie-key="127" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">2.1 搭建模型 API</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">2.2 搭建 One API 接口管理/分发系统</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">2.3 验证模型接口能力</span></section></td></tr><tr data-cangjie-key="138" data-sticky="false" style="box-sizing: inherit;height: 33px;"><td data-cangjie-key="140" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">三、搭建知识库应用</span></section></td><td data-cangjie-key="145" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">3.1 安装 MongoDB</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">3.2 安装 PostgreSQL &amp; pgvector</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">3.3 搭建 FastGPT 知识库问答系统</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">3.4 验证模型对话能力</span></section></td></tr><tr data-cangjie-key="159" data-sticky="false" style="box-sizing: inherit;height: 33px;"><td data-cangjie-key="161" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">四、知识库问答实战</span></section></td><td data-cangjie-key="166" data-type="table-cell" rowspan="1" colspan="1" data-container-block="true" style="box-sizing: inherit;padding: 8px;border-color: rgba(88, 104, 144, 0.24);"><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">4.1 准备知识库语料</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">4.2 导入知识库数据</span></section><section style="line-height: normal;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">4.3 验证知识库问答效果</span></section></td></tr></tbody></table><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">部分步骤可以简单地通过 Docker 镜像一键部署完成，但本着对细节一杆子插到底的部署思路，还是采取了纯手工作业的方法。注意，下面的步骤中仅包含了关键的命令，完整的命令可以参考对应系统的官网介绍。部分安装步骤如果速度不够理想，可以考虑采用国内源，包含但不限于 go、brew、pip、npm 等。</span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;visibility: visible;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503041737" data-ratio="0.3056872037914692" data-s="300,640" data-type="png" data-w="422" src="https://oscimg.oschina.net/oscnet/c8d6ad94-b394-4e67-a5c3-8464690e8f51.png" style="outline: 0px;letter-spacing: 0.544px;font-size: 14px;visibility: visible !important;width: 117px !important;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;visibility: visible;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;color: rgb(0, 17, 255);">详细步骤</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;visibility: visible;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><br></section><section style="margin-bottom: 8px;"><br></section><span id="OSC_h4_4"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">准备离线模型</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"></h4><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">这个环节我们的主要任务是把模型文件准备好、完成量化，并通过命令行的方式，进行交互式对话验证。</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_5"></span><h4 data-cangjie-key="195" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">下载对话语言模型 ChatGLM3-6B</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">为什么选择 ChatGLM3-6B？常年霸榜的开源国产之光。ChatGLM3 一共开源了对话模型 ChatGLM-6B、基础模型 ChatGLM-6B-Base、长文本对话模型 ChatGLM3-6B-32K，对学术研究完全开放，在填写问卷进行登记后亦允许免费商业使用。无论是用来做上手实践还是微调练习，目前看来都是比较好的选择。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">其实最重要的是，看看排行榜上的可选项，我的 MacBook 16G 内存只能带得动 ChatGLM3-6B 量化版本：</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041741" data-ratio="0.37777777777777777" src="https://oscimg.oschina.net/oscnet/08ae148e-39dc-45c8-9196-b121dbef2503.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">ChatGLM3-6B 现在比较方便的下载渠道有 HuggingFace 和 ModelScope，但是很明显能直接下载下来的可能性不大，所以我用家里的旧电脑科学下载后放到私有云 CDN 上，然后再用公司电脑下载，也方便未来随时随地取用，就是要花点小钱。ModelScope 也试过，不能直接下载文件，并且用 git clone 速度也不太理想，遂放弃。</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">如果用老一点的版本 ChatGLM2-6B 的话，网上也能找到一些比较好用的第三方镜像站。</span></p><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: left;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">HuggingFace:THUDM/chatglm3-6b﻿</span></p></li><li><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: left;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">ModelScope:ZhipuAI/chatglm3-6b（</span><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">地址：https://modelscope.cn/models/ZhipuAI/chatglm3-6b/summary）</span></p></li></ol><section style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 从 Git 仓库下载模型文件</span></code><code><span class="code-snippet_outer">// HuggingFace</span></code><code><span class="code-snippet_outer">git lfs install</span></code><code><span class="code-snippet_outer">git clone https://huggingface.co/THUDM/chatglm3-6b</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">// ModelScope</span></code><code><span class="code-snippet_outer">git lfs install</span></code><code><span class="code-snippet_outer">git clone https://www.modelscope.cn/ZhipuAI/chatglm3-6b.git</span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_6"></span><h4 data-cangjie-key="237" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">下载文本嵌入模型 m3e-base</span></h4></li></ul><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">为什么选择 moka-ai 的 M3E 模型 m3e-base？M3E 向量模型属于小模型，资源使用不高，CPU 也可以运行，使用场景主要是中文，少量英文的情况。用来验证我们的知识库系统足够了</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">官方下载地址：moka-ai/m3e-base，先把所有的模型文件 download 下来，后面使用</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_7"></span><h4 data-cangjie-key="253" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">使用 chatglm.cpp 对 ChatGLM3-6B 进行量化加速</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">当我第一次知道 chatglm.cpp，只能说好人一生平安，chatglm.cpp 的出现拯救了纯 MacBook 党，让我们能在（低性能的）果本上基于 CPU 进行推理，也不会损失过多的精度。（其实损失多少我也不知道，不影响我们正常进行工程部署验证就行）</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">Github Repo: https://github.com/li-plus/chatglm.cpp﻿</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">我使用的 Python 版本：3.11，最好单独准备一个 virtualenv</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041738" data-ratio="0.13240740740740742" src="https://oscimg.oschina.net/oscnet/e1860e0e-5e2f-4eaf-8411-dab67f6a95cd.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">安装依赖：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="properties"><code><span class="code-snippet_outer">cd /Users/yaolu/AGI/github/chatglm.cpp</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"># 先初始化 git 仓库</span></code><code><span class="code-snippet_outer">git submodule update --init --recursive</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"># 构建可执行文件</span></code><code><span class="code-snippet_outer">cmake -B build</span></code><code><span class="code-snippet_outer">cmake --build build -j</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"># 安装 Python 依赖</span></code><code><span class="code-snippet_outer">pip install .</span></code></pre></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">如果发生 No module named 'chatglm_cpp._C' 的错误，把编译出来的文件 _C.cpython-311-darwin.so 放到 chatglm_cpp 目录下。</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">对 ChatGLM3-6B 进行 8-bit 量化处理：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="nginx"><code><span class="code-snippet_outer">python ./chatglm_cpp/convert.py -i /Users/yaolu/AGI/huggingface/THUDM/chatglm3-6b -t q8_0 -o chatglm3-ggml-q8.bin</span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">如果电脑带不动，还可以尝试 4-bit、5-bit 参数量化，完整参数列表见 chatglm.cpp 的 quantization types</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_8"></span><h4 data-cangjie-key="300" data-cangjie-leaf-block="true" data-type="heading-4" style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">验证模型问答效果</span></h4></li></ul><p style="margin-bottom: 8px;margin-top: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">完成模型量化后，就可以在本地把大模型跑起来了，命令如下：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js"><code><span class="code-snippet_outer">./build/bin/main -m chatglm3-ggml-q8.bin -i</span></code></pre></section><p style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><br></p><p style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;text-align: center;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041739" data-ratio="0.5796296296296296" src="https://oscimg.oschina.net/oscnet/a783a6e0-4e31-4f72-81ca-8f9e37688b7f.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><span id="OSC_h4_9"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">搭建模型 API 服务</span></strong></span></h4><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">我们在这个环节要完成的任务是，按照 ChatGPT 的接口规范、基于 FastAPI 封装 ChatGLM3-6B 的对话和 m3e-base 的嵌入能力；并注册到 One API 接口管理/分发系统中。</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_10"></span><h4 data-cangjie-key="325" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">搭建模型 API</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">用 chatglm.cpp 自带的 openai_api.py 魔改了一下，使其支持完成对话和文本 embedding 的两个核心调用：</span></section><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">/v1/chat/completions</span></section></li><li><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">/v1/embeddings</span></section></li></ol><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">代码如下：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="python"><code><span class="code-snippet_outer">import asyncio</span></code><code><span class="code-snippet_outer">import logging</span></code><code><span class="code-snippet_outer">import time</span></code><code><span class="code-snippet_outer">from typing import List, Literal, Optional, Union</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">import chatglm_cpp</span></code><code><span class="code-snippet_outer">from fastapi import FastAPI, HTTPException, status, Depends</span></code><code><span class="code-snippet_outer">from fastapi.middleware.cors import CORSMiddleware</span></code><code><span class="code-snippet_outer">from pydantic import BaseModel, Field#, computed_field</span></code><code><span class="code-snippet_outer">#from pydantic_settings import BaseSettings</span></code><code><span class="code-snippet_outer">from sse_starlette.sse import EventSourceResponse</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">from sentence_transformers import SentenceTransformer</span></code><code><span class="code-snippet_outer">from sklearn.preprocessing import PolynomialFeatures</span></code><code><span class="code-snippet_outer">import numpy as np</span></code><code><span class="code-snippet_outer">import tiktoken</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">logging.basicConfig(level=logging.INFO, format=r"%(asctime)s - %(module)s - %(levelname)s - %(message)s")</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class Settings(object):</span></code><code><span class="code-snippet_outer">    model: str = "/Users/yaolu/AGI/github/chatglm.cpp/chatglm3-ggml-q8.bin"</span></code><code><span class="code-snippet_outer">    num_threads: int = 0</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ChatMessage(BaseModel):</span></code><code><span class="code-snippet_outer">    role: Literal["system", "user", "assistant"]</span></code><code><span class="code-snippet_outer">    content: str</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class DeltaMessage(BaseModel):</span></code><code><span class="code-snippet_outer">    role: Optional[Literal["system", "user", "assistant"]] = None</span></code><code><span class="code-snippet_outer">    content: Optional[str] = None</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ChatCompletionRequest(BaseModel):</span></code><code><span class="code-snippet_outer">    model: str = "default-model"</span></code><code><span class="code-snippet_outer">    messages: List[ChatMessage]</span></code><code><span class="code-snippet_outer">    temperature: float = Field(default=0.95, ge=0.0, le=2.0)</span></code><code><span class="code-snippet_outer">    top_p: float = Field(default=0.7, ge=0.0, le=1.0)</span></code><code><span class="code-snippet_outer">    stream: bool = False</span></code><code><span class="code-snippet_outer">    max_tokens: int = Field(default=2048, ge=0)</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    model_config = {</span></code><code><span class="code-snippet_outer">        "json_schema_extra": {"examples": [{"model": "default-model", "messages": [{"role": "user", "content": "你好"}]}]}</span></code><code><span class="code-snippet_outer">    }</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ChatCompletionResponseChoice(BaseModel):</span></code><code><span class="code-snippet_outer">    index: int = 0</span></code><code><span class="code-snippet_outer">    message: ChatMessage</span></code><code><span class="code-snippet_outer">    finish_reason: Literal["stop", "length"] = "stop"</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ChatCompletionResponseStreamChoice(BaseModel):</span></code><code><span class="code-snippet_outer">    index: int = 0</span></code><code><span class="code-snippet_outer">    delta: DeltaMessage</span></code><code><span class="code-snippet_outer">    finish_reason: Optional[Literal["stop", "length"]] = None</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ChatCompletionUsage(BaseModel):</span></code><code><span class="code-snippet_outer">    prompt_tokens: int</span></code><code><span class="code-snippet_outer">    completion_tokens: int</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    #@computed_field</span></code><code><span class="code-snippet_outer">    @property</span></code><code><span class="code-snippet_outer">    def total_tokens(self) -&gt; int:</span></code><code><span class="code-snippet_outer">        return self.prompt_tokens + self.completion_tokens</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ChatCompletionResponse(BaseModel):</span></code><code><span class="code-snippet_outer">    id: str = "chatcmpl"</span></code><code><span class="code-snippet_outer">    model: str = "default-model"</span></code><code><span class="code-snippet_outer">    object: Literal["chat.completion", "chat.completion.chunk"]</span></code><code><span class="code-snippet_outer">    created: int = Field(default_factory=lambda: int(time.time()))</span></code><code><span class="code-snippet_outer">    choices: Union[List[ChatCompletionResponseChoice], List[ChatCompletionResponseStreamChoice]]</span></code><code><span class="code-snippet_outer">    usage: Optional[ChatCompletionUsage] = None</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    model_config = {</span></code><code><span class="code-snippet_outer">        "json_schema_extra": {</span></code><code><span class="code-snippet_outer">            "examples": [</span></code><code><span class="code-snippet_outer">                {</span></code><code><span class="code-snippet_outer">                    "id": "chatcmpl",</span></code><code><span class="code-snippet_outer">                    "model": "default-model",</span></code><code><span class="code-snippet_outer">                    "object": "chat.completion",</span></code><code><span class="code-snippet_outer">                    "created": 1691166146,</span></code><code><span class="code-snippet_outer">                    "choices": [</span></code><code><span class="code-snippet_outer">                        {</span></code><code><span class="code-snippet_outer">                            "index": 0,</span></code><code><span class="code-snippet_outer">                            "message": {"role": "assistant", "content": "你好👋！我是人工智能助手 ChatGLM2-6B，很高兴见到你，欢迎问我任何问题。"},</span></code><code><span class="code-snippet_outer">                            "finish_reason": "stop",</span></code><code><span class="code-snippet_outer">                        }</span></code><code><span class="code-snippet_outer">                    ],</span></code><code><span class="code-snippet_outer">                    "usage": {"prompt_tokens": 17, "completion_tokens": 29, "total_tokens": 46},</span></code><code><span class="code-snippet_outer">                }</span></code><code><span class="code-snippet_outer">            ]</span></code><code><span class="code-snippet_outer">        }</span></code><code><span class="code-snippet_outer">    }</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">settings = Settings()</span></code><code><span class="code-snippet_outer">app = FastAPI()</span></code><code><span class="code-snippet_outer">app.add_middleware(</span></code><code><span class="code-snippet_outer">    CORSMiddleware, allow_origins=["*"], allow_credentials=True, allow_methods=["*"], allow_headers=["*"]</span></code><code><span class="code-snippet_outer">)</span></code><code><span class="code-snippet_outer">pipeline = chatglm_cpp.Pipeline(settings.model)</span></code><code><span class="code-snippet_outer">lock = asyncio.Lock()</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">embeddings_model = SentenceTransformer('/Users/yaolu/AGI/huggingface/moka-ai/m3e-base', device='cpu')</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">def stream_chat(history, body):</span></code><code><span class="code-snippet_outer">    yield ChatCompletionResponse(</span></code><code><span class="code-snippet_outer">        object="chat.completion.chunk",</span></code><code><span class="code-snippet_outer">        choices=[ChatCompletionResponseStreamChoice(delta=DeltaMessage(role="assistant"))],</span></code><code><span class="code-snippet_outer">    )</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    for piece in pipeline.chat(</span></code><code><span class="code-snippet_outer">        history,</span></code><code><span class="code-snippet_outer">        max_length=body.max_tokens,</span></code><code><span class="code-snippet_outer">        do_sample=body.temperature &gt; 0,</span></code><code><span class="code-snippet_outer">        top_p=body.top_p,</span></code><code><span class="code-snippet_outer">        temperature=body.temperature,</span></code><code><span class="code-snippet_outer">        num_threads=settings.num_threads,</span></code><code><span class="code-snippet_outer">        stream=True,</span></code><code><span class="code-snippet_outer">    ):</span></code><code><span class="code-snippet_outer">        yield ChatCompletionResponse(</span></code><code><span class="code-snippet_outer">            object="chat.completion.chunk",</span></code><code><span class="code-snippet_outer">            choices=[ChatCompletionResponseStreamChoice(delta=DeltaMessage(content=piece))],</span></code><code><span class="code-snippet_outer">        )</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    yield ChatCompletionResponse(</span></code><code><span class="code-snippet_outer">        object="chat.completion.chunk",</span></code><code><span class="code-snippet_outer">        choices=[ChatCompletionResponseStreamChoice(delta=DeltaMessage(), finish_reason="stop")],</span></code><code><span class="code-snippet_outer">    )</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">async def stream_chat_event_publisher(history, body):</span></code><code><span class="code-snippet_outer">    output = ""</span></code><code><span class="code-snippet_outer">    try:</span></code><code><span class="code-snippet_outer">        async with lock:</span></code><code><span class="code-snippet_outer">            for chunk in stream_chat(history, body):</span></code><code><span class="code-snippet_outer">                await asyncio.sleep(0)  # yield control back to event loop for cancellation check</span></code><code><span class="code-snippet_outer">                output += chunk.choices[0].delta.content or ""</span></code><code><span class="code-snippet_outer">                yield chunk.model_dump_json(exclude_unset=True)</span></code><code><span class="code-snippet_outer">        logging.info(f'prompt: "{history[-1]}", stream response: "{output}"')</span></code><code><span class="code-snippet_outer">    except asyncio.CancelledError as e:</span></code><code><span class="code-snippet_outer">        logging.info(f'prompt: "{history[-1]}", stream response (partial): "{output}"')</span></code><code><span class="code-snippet_outer">        raise e</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@app.post("/v1/chat/completions")</span></code><code><span class="code-snippet_outer">async def create_chat_completion(body: ChatCompletionRequest) -&gt; ChatCompletionResponse:</span></code><code><span class="code-snippet_outer">    # ignore system messages</span></code><code><span class="code-snippet_outer">    history = [msg.content for msg in body.messages if msg.role != "system"]</span></code><code><span class="code-snippet_outer">    if len(history) % 2 != 1:</span></code><code><span class="code-snippet_outer">        raise HTTPException(status.HTTP_400_BAD_REQUEST, "invalid history size")</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    if body.stream:</span></code><code><span class="code-snippet_outer">        generator = stream_chat_event_publisher(history, body)</span></code><code><span class="code-snippet_outer">        return EventSourceResponse(generator)</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    max_context_length = 512</span></code><code><span class="code-snippet_outer">    output = pipeline.chat(</span></code><code><span class="code-snippet_outer">        history=history,</span></code><code><span class="code-snippet_outer">        max_length=body.max_tokens,</span></code><code><span class="code-snippet_outer">        max_context_length=max_context_length,</span></code><code><span class="code-snippet_outer">        do_sample=body.temperature &gt; 0,</span></code><code><span class="code-snippet_outer">        top_p=body.top_p,</span></code><code><span class="code-snippet_outer">        temperature=body.temperature,</span></code><code><span class="code-snippet_outer">    )</span></code><code><span class="code-snippet_outer">    logging.info(f'prompt: "{history[-1]}", sync response: "{output}"')</span></code><code><span class="code-snippet_outer">    prompt_tokens = len(pipeline.tokenizer.encode_history(history, max_context_length))</span></code><code><span class="code-snippet_outer">    completion_tokens = len(pipeline.tokenizer.encode(output, body.max_tokens))</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    return ChatCompletionResponse(</span></code><code><span class="code-snippet_outer">        object="chat.completion",</span></code><code><span class="code-snippet_outer">        choices=[ChatCompletionResponseChoice(message=ChatMessage(role="assistant", content=output))],</span></code><code><span class="code-snippet_outer">        usage=ChatCompletionUsage(prompt_tokens=prompt_tokens, completion_tokens=completion_tokens),</span></code><code><span class="code-snippet_outer">    )</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class EmbeddingRequest(BaseModel):</span></code><code><span class="code-snippet_outer">    input: List[str]</span></code><code><span class="code-snippet_outer">    model: str</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class EmbeddingResponse(BaseModel):</span></code><code><span class="code-snippet_outer">    data: list</span></code><code><span class="code-snippet_outer">    model: str</span></code><code><span class="code-snippet_outer">    object: str</span></code><code><span class="code-snippet_outer">    usage: dict</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">def num_tokens_from_string(string: str) -&gt; int:</span></code><code><span class="code-snippet_outer">    """Returns the number of tokens in a text string."""</span></code><code><span class="code-snippet_outer">    encoding = tiktoken.get_encoding('cl100k_base')</span></code><code><span class="code-snippet_outer">    num_tokens = len(encoding.encode(string))</span></code><code><span class="code-snippet_outer">    return num_tokens</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">def expand_features(embedding, target_length):</span></code><code><span class="code-snippet_outer">    poly = PolynomialFeatures(degree=2)</span></code><code><span class="code-snippet_outer">    expanded_embedding = poly.fit_transform(embedding.reshape(1, -1))</span></code><code><span class="code-snippet_outer">    expanded_embedding = expanded_embedding.flatten()</span></code><code><span class="code-snippet_outer">    if len(expanded_embedding) &gt; target_length:</span></code><code><span class="code-snippet_outer">        # 如果扩展后的特征超过目标长度，可以通过截断或其他方法来减少维度</span></code><code><span class="code-snippet_outer">        expanded_embedding = expanded_embedding[:target_length]</span></code><code><span class="code-snippet_outer">    elif len(expanded_embedding) &lt; target_length:</span></code><code><span class="code-snippet_outer">        # 如果扩展后的特征少于目标长度，可以通过填充或其他方法来增加维度</span></code><code><span class="code-snippet_outer">        expanded_embedding = np.pad(expanded_embedding, (0, target_length - len(expanded_embedding)))</span></code><code><span class="code-snippet_outer">    return expanded_embedding</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@app.post("/v1/embeddings", response_model=EmbeddingResponse)</span></code><code><span class="code-snippet_outer">async def get_embeddings(request: EmbeddingRequest):</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    # 计算嵌入向量和 tokens 数量 </span></code><code><span class="code-snippet_outer">    embeddings = [embeddings_model.encode(text) for text in request.input]</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    # 如果嵌入向量的维度不为 1536，则使用插值法扩展至 1536 维度 </span></code><code><span class="code-snippet_outer">    embeddings = [expand_features(embedding, 1536) if len(embedding) &lt; 1536 else embedding for embedding in embeddings]</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    # Min-Max normalization</span></code><code><span class="code-snippet_outer">    embeddings = [embedding / np.linalg.norm(embedding) for embedding in embeddings]</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    # 将 numpy 数组转换为列表</span></code><code><span class="code-snippet_outer">    embeddings = [embedding.tolist() for embedding in embeddings]</span></code><code><span class="code-snippet_outer">    prompt_tokens = sum(len(text.split()) for text in request.input)</span></code><code><span class="code-snippet_outer">    total_tokens = sum(num_tokens_from_string(text) for text in request.input)</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    response = {</span></code><code><span class="code-snippet_outer">        "data": [</span></code><code><span class="code-snippet_outer">            {</span></code><code><span class="code-snippet_outer">                "embedding": embedding,</span></code><code><span class="code-snippet_outer">                "index": index,</span></code><code><span class="code-snippet_outer">                "object": "embedding"</span></code><code><span class="code-snippet_outer">            } for index, embedding in enumerate(embeddings)</span></code><code><span class="code-snippet_outer">        ],</span></code><code><span class="code-snippet_outer">        "model": request.model,</span></code><code><span class="code-snippet_outer">        "object": "list",</span></code><code><span class="code-snippet_outer">        "usage": {</span></code><code><span class="code-snippet_outer">            "prompt_tokens": prompt_tokens,</span></code><code><span class="code-snippet_outer">            "total_tokens": total_tokens,</span></code><code><span class="code-snippet_outer">        }</span></code><code><span class="code-snippet_outer">    }</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    return response</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ModelCard(BaseModel):</span></code><code><span class="code-snippet_outer">    id: str</span></code><code><span class="code-snippet_outer">    object: Literal["model"] = "model"</span></code><code><span class="code-snippet_outer">    owned_by: str = "owner"</span></code><code><span class="code-snippet_outer">    permission: List = []</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">class ModelList(BaseModel):</span></code><code><span class="code-snippet_outer">    object: Literal["list"] = "list"</span></code><code><span class="code-snippet_outer">    data: List[ModelCard] = []</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">    model_config = {</span></code><code><span class="code-snippet_outer">        "json_schema_extra": {</span></code><code><span class="code-snippet_outer">            "examples": [</span></code><code><span class="code-snippet_outer">                {</span></code><code><span class="code-snippet_outer">                    "object": "list",</span></code><code><span class="code-snippet_outer">                    "data": [{"id": "gpt-3.5-turbo", "object": "model", "owned_by": "owner", "permission": []}],</span></code><code><span class="code-snippet_outer">                }</span></code><code><span class="code-snippet_outer">            ]</span></code><code><span class="code-snippet_outer">        }</span></code><code><span class="code-snippet_outer">    }</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@app.get("/v1/models")</span></code><code><span class="code-snippet_outer">async def list_models() -&gt; ModelList:</span></code><code><span class="code-snippet_outer">    return ModelList(data=[ModelCard(id="gpt-3.5-turbo")])</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">让他跑起来的命令，跑在 8000 端口下：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="css"><code><span class="code-snippet_outer">uvicorn chatglm_cpp.openai_api:app --host 127.0.0.1 --port 8000</span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">运行该程序所需的 Python 依赖项：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="ini"><code><span class="code-snippet_outer">accelerate==0.24.1</span></code><code><span class="code-snippet_outer">aiofiles==23.2.1</span></code><code><span class="code-snippet_outer">aiohttp==3.8.6</span></code><code><span class="code-snippet_outer">aiosignal==1.3.1</span></code><code><span class="code-snippet_outer">altair==5.1.2</span></code><code><span class="code-snippet_outer">annotated-types==0.6.0</span></code><code><span class="code-snippet_outer">anyio==3.7.1</span></code><code><span class="code-snippet_outer">async-timeout==4.0.3</span></code><code><span class="code-snippet_outer">attrs==23.1.0</span></code><code><span class="code-snippet_outer">blinker==1.7.0</span></code><code><span class="code-snippet_outer">cachetools==5.3.2</span></code><code><span class="code-snippet_outer">certifi==2023.7.22</span></code><code><span class="code-snippet_outer">charset-normalizer==3.3.2</span></code><code><span class="code-snippet_outer">click==8.1.7</span></code><code><span class="code-snippet_outer">contourpy==1.2.0</span></code><code><span class="code-snippet_outer">cpm-kernels==1.0.11</span></code><code><span class="code-snippet_outer">cycler==0.12.1</span></code><code><span class="code-snippet_outer">fastapi==0.103.2</span></code><code><span class="code-snippet_outer">ffmpy==0.3.1</span></code><code><span class="code-snippet_outer">filelock==3.13.1</span></code><code><span class="code-snippet_outer">fonttools==4.44.0</span></code><code><span class="code-snippet_outer">frozenlist==1.4.0</span></code><code><span class="code-snippet_outer">fsspec==2023.10.0</span></code><code><span class="code-snippet_outer">gitdb==4.0.11</span></code><code><span class="code-snippet_outer">GitPython==3.1.40</span></code><code><span class="code-snippet_outer">gradio==3.50.2</span></code><code><span class="code-snippet_outer">gradio_client==0.6.1</span></code><code><span class="code-snippet_outer">h11==0.14.0</span></code><code><span class="code-snippet_outer">httpcore==1.0.2</span></code><code><span class="code-snippet_outer">httpx==0.25.1</span></code><code><span class="code-snippet_outer">huggingface-hub==0.19.1</span></code><code><span class="code-snippet_outer">idna==3.4</span></code><code><span class="code-snippet_outer">importlib-metadata==6.8.0</span></code><code><span class="code-snippet_outer">importlib-resources==6.1.1</span></code><code><span class="code-snippet_outer">Jinja2==3.1.2</span></code><code><span class="code-snippet_outer">joblib==1.3.2</span></code><code><span class="code-snippet_outer">jsonschema==4.19.2</span></code><code><span class="code-snippet_outer">jsonschema-specifications==2023.7.1</span></code><code><span class="code-snippet_outer">kiwisolver==1.4.5</span></code><code><span class="code-snippet_outer">latex2mathml==3.76.0</span></code><code><span class="code-snippet_outer">linkify-it-py==2.0.2</span></code><code><span class="code-snippet_outer">Markdown==3.5.1</span></code><code><span class="code-snippet_outer">markdown-it-py==2.2.0</span></code><code><span class="code-snippet_outer">MarkupSafe==2.1.3</span></code><code><span class="code-snippet_outer">matplotlib==3.8.1</span></code><code><span class="code-snippet_outer">mdit-py-plugins==0.3.3</span></code><code><span class="code-snippet_outer">mdtex2html==1.2.0</span></code><code><span class="code-snippet_outer">mdurl==0.1.2</span></code><code><span class="code-snippet_outer">mpmath==1.3.0</span></code><code><span class="code-snippet_outer">multidict==6.0.4</span></code><code><span class="code-snippet_outer">networkx==3.2.1</span></code><code><span class="code-snippet_outer">nltk==3.8.1</span></code><code><span class="code-snippet_outer">numpy==1.26.2</span></code><code><span class="code-snippet_outer">orjson==3.9.10</span></code><code><span class="code-snippet_outer">packaging==23.2</span></code><code><span class="code-snippet_outer">pandas==2.1.3</span></code><code><span class="code-snippet_outer">Pillow==10.1.0</span></code><code><span class="code-snippet_outer">protobuf==4.25.0</span></code><code><span class="code-snippet_outer">psutil==5.9.6</span></code><code><span class="code-snippet_outer">pyarrow==14.0.1</span></code><code><span class="code-snippet_outer">pydantic==2.1.1</span></code><code><span class="code-snippet_outer">pydantic_core==2.4.0</span></code><code><span class="code-snippet_outer">pydeck==0.8.1b0</span></code><code><span class="code-snippet_outer">pydub==0.25.1</span></code><code><span class="code-snippet_outer">Pygments==2.16.1</span></code><code><span class="code-snippet_outer">pyparsing==3.1.1</span></code><code><span class="code-snippet_outer">python-dateutil==2.8.2</span></code><code><span class="code-snippet_outer">python-multipart==0.0.6</span></code><code><span class="code-snippet_outer">pytz==2023.3.post1</span></code><code><span class="code-snippet_outer">PyYAML==6.0.1</span></code><code><span class="code-snippet_outer">referencing==0.30.2</span></code><code><span class="code-snippet_outer">regex==2023.10.3</span></code><code><span class="code-snippet_outer">requests==2.31.0</span></code><code><span class="code-snippet_outer">rich==13.6.0</span></code><code><span class="code-snippet_outer">rpds-py==0.12.0</span></code><code><span class="code-snippet_outer">safetensors==0.4.0</span></code><code><span class="code-snippet_outer">scikit-learn==1.3.2</span></code><code><span class="code-snippet_outer">scipy==1.11.3</span></code><code><span class="code-snippet_outer">semantic-version==2.10.0</span></code><code><span class="code-snippet_outer">sentence-transformers==2.2.2</span></code><code><span class="code-snippet_outer">sentencepiece==0.1.99</span></code><code><span class="code-snippet_outer">six==1.16.0</span></code><code><span class="code-snippet_outer">smmap==5.0.1</span></code><code><span class="code-snippet_outer">sniffio==1.3.0</span></code><code><span class="code-snippet_outer">sse-starlette==1.6.5</span></code><code><span class="code-snippet_outer">starlette==0.27.0</span></code><code><span class="code-snippet_outer">streamlit==1.28.2</span></code><code><span class="code-snippet_outer">sympy==1.12</span></code><code><span class="code-snippet_outer">tabulate==0.9.0</span></code><code><span class="code-snippet_outer">tenacity==8.2.3</span></code><code><span class="code-snippet_outer">threadpoolctl==3.2.0</span></code><code><span class="code-snippet_outer">tiktoken==0.5.1</span></code><code><span class="code-snippet_outer">tokenizers==0.13.3</span></code><code><span class="code-snippet_outer">toml==0.10.2</span></code><code><span class="code-snippet_outer">toolz==0.12.0</span></code><code><span class="code-snippet_outer">torch==2.1.0</span></code><code><span class="code-snippet_outer">torchvision==0.16.0</span></code><code><span class="code-snippet_outer">tornado==6.3.3</span></code><code><span class="code-snippet_outer">tqdm==4.66.1</span></code><code><span class="code-snippet_outer">transformers==4.30.2</span></code><code><span class="code-snippet_outer">typing_extensions==4.6.1</span></code><code><span class="code-snippet_outer">tzdata==2023.3</span></code><code><span class="code-snippet_outer">tzlocal==5.2</span></code><code><span class="code-snippet_outer">uc-micro-py==1.0.2</span></code><code><span class="code-snippet_outer">urllib3==2.1.0</span></code><code><span class="code-snippet_outer">uvicorn==0.24.0.post1</span></code><code><span class="code-snippet_outer">validators==0.22.0</span></code><code><span class="code-snippet_outer">websockets==11.0.3</span></code><code><span class="code-snippet_outer">yarl==1.9.2</span></code><code><span class="code-snippet_outer">zipp==3.17.0</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_11"></span><h4 data-cangjie-key="358" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">搭建 One API 接口管理/分发系统</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">﻿One API 是一套兼容多种 LLM 接口规范的 API 路由方案，支持限额和计费管理，通过标准的 OpenAI API 格式访问所有的大模型，开箱即用，其多模型渠道接入、多用户管理、费用管理、额度管理、以及集群化部署支持等功能，对商用场景都很友好。项目使用 MIT 协议进行开源。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">One API 基于 Go 和 Node.js 开发，搭建之前准备好，我的版本是：go1.21.4、Node.js v20.9.0，构建命令如下：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="properties"><code><span class="code-snippet_outer">git clone https://github.com/songquanpeng/one-api.git</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"># 构建前端</span></code><code><span class="code-snippet_outer">cd one-api/web</span></code><code><span class="code-snippet_outer">npm install</span></code><code><span class="code-snippet_outer">npm run build</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"># 构建后端</span></code><code><span class="code-snippet_outer">cd ..</span></code><code><span class="code-snippet_outer">go mod download</span></code><code><span class="code-snippet_outer">go build -ldflags "-s -w" -o one-api</span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">One API 里面预置了很多市面上的可用模型接口，好处是可以直接使用无需配置，缺点是没有添加自定义（本地）接口的能力。由于我们是自己搭建的 LLM 和 embedding 服务，需要修改其源代码，增加 ChatGLM3 和 m3e-base 的选项。</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">改动涉及两个文件，分别是 common/model-ratio.go 和 controller/model.go，改动内容如下图：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041746" data-ratio="0.5166666666666667" src="https://oscimg.oschina.net/oscnet/b980c07e-c638-4726-8149-aa6f42f3df6b.jpg" data-type="other" data-w="1080" style="width: 578px;height: auto;" referrerpolicy="no-referrer"></span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="503041745" data-ratio="0.4564814814814815" src="https://oscimg.oschina.net/oscnet/bc153ea4-f8c8-4029-bef4-d61d6562cb64.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;">注意，改完文件后记得重新编译可执行文件。本地的元数据存储我使用了 MySQL，编译+启动命令是：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="bash"><code><span class="code-snippet_outer">go build -ldflags "-s -w" -o one-api</span></code><code><span class="code-snippet_outer">export SQL_DSN=oneapi:oneapi@tcp(localhost:3306)/oneapi &amp;&amp; ./one-api --port 3001 --log-dir ./log</span></code></pre></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">初始登录进去，创建一个新令牌用于权限管控和计费：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041742" data-ratio="0.4074074074074074" src="https://oscimg.oschina.net/oscnet/633c7cae-c8f2-479a-abdd-7ea0b14593d1.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">令牌可以从这里复制，下面有用：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="letter-spacing: 1px;font-size: 15px;"><img class="rich_pages wxw-img" data-imgfileid="503041743" data-ratio="0.2824074074074074" src="https://oscimg.oschina.net/oscnet/22e2145c-3437-4ad8-8052-d99cf2bed6e6.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">One API 的渠道管理界面如下图，我已经配置了俩渠道，一个 chat 渠道，一个 embedding 渠道：</span></p><p><span style="font-size: 15px;"><img class="rich_pages wxw-img" data-imgfileid="503041744" data-ratio="0.4546296296296296" src="https://oscimg.oschina.net/oscnet/f988f5ad-ffb3-4568-9e4e-12f80431bad8.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">具体的配置值如下图，名称写实际的模型名 ChatGLM3，模型选刚才手动添加上去的 ChatGLM3：</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041751" data-ratio="0.7148148148148148" src="https://oscimg.oschina.net/oscnet/a3ae8bc9-2ce8-466a-8e32-2327dd193a66.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="503041747" data-ratio="0.7185185185185186" src="https://oscimg.oschina.net/oscnet/af7b338e-56ca-42e3-873a-f194005c09cb.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">配置完后可以在列表页点一下测试验证，连通无问题就行，但现在似乎一测就会把模型 API 服务弄挂，不过没关系，不影响后面验证。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><span id="OSC_h4_12"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">搭建知识库应用</span></strong></span></h4><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">在这个环节里，我们采用类似 Dify.ai （地址：https://dify.ai/）的国产化开源 FastGPT 方案搭建属于自己的本地知识库应用平台。FastGPT 是一个基于 LLM 大语言模型的知识库问答系统，提供开箱即用的数据处理、模型调用等能力。同时可以通过 Flow 可视化进行工作流编排，从而实现复杂的问答场景。FastGPT 遵循 Apache License 2.0 开源协议，我们可以 Fork 之后进行二次开发和发布。</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">FastGPT 的核心流程图如下：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041748" data-ratio="0.525" src="https://oscimg.oschina.net/oscnet/dbc410c8-6a51-451c-a9d8-7c05661240c8.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">从 FastGPT 官网得知，这套开源系统基于以下几个基本概念进行知识库检索：</span></p><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">向量：将人类直观的语言（文字、图片、视频等）转成计算机可识别的语言（数组）。</span></p></li><li><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">向量相似度：两个向量之间可以进行计算，得到一个相似度，即代表：两个语言相似的程度。</span></p></li><li><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">语言大模型的一些特点：上下文理解、总结和推理。</span></p></li></ol><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">结合上述 3 个概念，便有了 「向量搜索 + 大模型 = 知识库问答」 的公式。下图是 FastGPT V3 中知识库问答功能的完整逻辑：</span></p><section style="margin-top: 8px;line-height: 1.75em;text-align: center;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041749" data-ratio="0.46296296296296297" src="https://oscimg.oschina.net/oscnet/1bed1c79-1bae-44a9-897a-ac6100c37f67.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">﻿</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">FastGPT 的向量存储方案是 PostgreSQL+pgvector，其他数据放在 MongoDB 里面，因此我们先把这两项依赖搞定。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_13"></span><h4 data-cangjie-key="538" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">安装 MongoDB</span></h4></li></ul><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">MacBook 安装 MongoDB 很简单，如果没有特别的安全诉求，可以先不用设置用户名密码</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="properties"><code><span class="code-snippet_outer">brew install mongodb-community</span></code><code><span class="code-snippet_outer">brew services start mongodb-community</span></code></pre></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">FastGPT 基于 MongoDB 存储知识库索引、会话内容、工作流等管理数据：</span></section><section style="margin-top: 8px;line-height: 1.75em;text-align: center;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041750" data-ratio="1.3333333333333333" src="https://oscimg.oschina.net/oscnet/72381400-16aa-4e0b-b636-70faee6c5c51.jpg" data-type="other" data-w="450" referrerpolicy="no-referrer"></span></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_14"></span><h4 data-cangjie-key="560" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">安装 PostgreSQL &amp; pgvector</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">FastGPT 采用了 RAG 中的 Embedding 方案构建知识库，PostgresSQL 的 PG Vector 插件作为向量检索器，索引为 HNSW。PostgresSQL 仅用于向量检索，MongoDB 用于其他数据的存取。另外也可以采用第三方模型的 Embedding API，比如 ChatGPT embedding，不过为了实现完整的本地化部署，就没有用外部服务。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">我们可以从 PostgreSQL 的官网下载 PostgreSQL 安装包：https://www.postgresql.org/download/macosx/﻿</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">从源码安装 pgvector：https://github.com/pgvector/pgvector</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="typescript"><code><span class="code-snippet_outer">// 安装 pgvector 前指定 PostgreSQL 位置</span></code><code><span class="code-snippet_outer">export PG_CONFIG=/Library/PostgreSQL/16/bin/pg_config</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">// 如果 pgvector 认错了 MacOS SDK 的位置，还得帮他软链一个</span></code><code><span class="code-snippet_outer">sudo ln -s /Library/Developer/CommandLineTools/SDKs/MacOSX13.sdk /Library/Developer/CommandLineTools/SDKs/MacOSX11.sdk</span></code><code><span class="code-snippet_outer">// 或者用这个命令</span></code><code><span class="code-snippet_outer">export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">// 源码编译安装 </span></code><code><span class="code-snippet_outer">make</span></code><code><span class="code-snippet_outer">make install # may need sudo</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">// 确保插件已安装到 PostgreSQL 目录下</span></code><code><span class="code-snippet_outer">cd /Library/PostgreSQL/16/share/postgresql/extension/</span></code><code><span class="code-snippet_outer">ls | grep vector</span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">完成以上步骤后，打开 PostgreSQL 控制枱，随便建立一个连接，运行下面的查询：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer">CREATE EXTENSION vector;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">SELECT * FROM pg_extension WHERE extname = 'vector';</span></code></pre></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">如果能出现下图结果，说明 pgvector 已经安装成功：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041753" data-ratio="0.44166666666666665" src="https://oscimg.oschina.net/oscnet/dac102ea-3331-4cba-9e81-a7bbf955d8ea.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_15"></span><h4 data-cangjie-key="605" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">搭建 FastGPT 知识库问答系统</span></h4></li></ul><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">好，我们的主角终于上场了，下面有请 FastGPT，安装指南见：https://doc.fastgpt.in/docs/development/intro/﻿</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">第一步，按照里面的步骤，配置 .env.local 文件内容，指定 One API、MongoDB 和 PostgreSQL 的访问地址：</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041755" data-ratio="0.3675925925925926" src="https://oscimg.oschina.net/oscnet/ad8bc609-8cdc-4490-9d41-6d0cf05d1086.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">这里的 CHAT_API_KEY 填入上面 OneAPI 创建的令牌</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">第二步，在 config.local.json 里面注册对话模型和向量嵌入模型，注意这里的 model 值要和 One API 里配置的保持一致：</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041752" data-ratio="0.9101123595505618" src="https://oscimg.oschina.net/oscnet/f5654367-e043-4a33-af56-6fa29b073fd5.jpg" data-type="other" data-w="534" referrerpolicy="no-referrer"></span></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="503041754" data-ratio="0.5521885521885522" src="https://oscimg.oschina.net/oscnet/cb497e99-311a-46eb-b6fe-bbbf6a4c9531.jpg" data-type="other" data-w="594" style="width: 529px;height: 292px;" referrerpolicy="no-referrer"></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">第三步，安装 Node.js 依赖并以开发模式启动：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="properties"><code><span class="code-snippet_outer"># 代码根目录下执行，会安装根 package、projects 和 packages 内所有依赖</span></code><code><span class="code-snippet_outer">pnpm i</span></code><code><span class="code-snippet_outer"># 切换到应用目录</span></code><code><span class="code-snippet_outer">cd projects/app</span></code><code><span class="code-snippet_outer"># 开发模式运行</span></code><code><span class="code-snippet_outer">pnpm dev</span></code></pre></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">第四步，访问本地 FastGPT 地址 http://localhost:3000/，如果能顺利登录，则搭建成功。</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_16"></span><h4 data-cangjie-key="673" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">验证模型对话能力</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">创建一个应用：</span></section><p style="margin-top: 8px;line-height: 1.75em;text-align: center;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041756" data-ratio="0.7851851851851852" src="https://oscimg.oschina.net/oscnet/4a48d9ed-303b-4116-ad64-db2e3c14ab62.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">应用创建完成，进入对话界面，注意 AI 模型选择我们在 One API 里配置的 ChatGLM3。试着问他两个问题，可以看到推理速度还是很快的，分别是 5.83s、7.52s：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041759" data-ratio="0.6212962962962963" src="https://oscimg.oschina.net/oscnet/e9a9fe0b-8101-498c-a692-7f17f7d0d35c.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="letter-spacing: 1px;font-size: 15px;">点开单条对话响应，详细的对话参数（消耗 token、响应时长、计费信息）清晰可见：</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="letter-spacing: 1px;font-size: 15px;"><img class="rich_pages wxw-img" data-imgfileid="503041758" data-ratio="1.3190184049079754" src="https://oscimg.oschina.net/oscnet/c1f6a537-1bcf-43e7-b191-0339eba66711.jpg" data-type="other" data-w="978" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="letter-spacing: 1px;font-size: 15px;">查看 MacBook 上的 ChatGLM3 推理资源占用情况，占用了 3.78GB 内存</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><span style="letter-spacing: 1px;font-size: 15px;"><img class="rich_pages wxw-img" data-imgfileid="503041760" data-ratio="0.6240740740740741" src="https://oscimg.oschina.net/oscnet/e9008ab1-d693-4941-bd75-cef91cbe81d1.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><p style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503041757" data-ratio="0.328125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/0fd3c7b5-94e1-4236-9399-af4ec7167e22.png" data-type="png" data-w="256" style="outline: 0px;letter-spacing: 0.544px;font-size: 16px;visibility: visible !important;width: 122px !important;" referrerpolicy="no-referrer"></p><p style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);font-size: 15px;text-align: center;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;font-size: 18px;color: rgb(0, 17, 255);">知识库问答实战</span></p><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><span id="OSC_h4_17"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">准备知识库语料</span></strong></span></h4><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">在有知识库使用诉求的场景，我们一般都积累了比较多的私有知识数据，比如：语雀文档、钉钉文档、PDF、Office 文件等，视知识识图的建设标准，需要将它们一一结构化整理。数据的梳理、清洗、结构化是一项繁杂而重要的工作，但也有比较成熟的办法和工具，在此不再赘述。</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><span id="OSC_h4_18"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">导入知识库数据</span></strong></span></h4><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">FastGPT 提供了很多种原始数据导入的办法，并且为了更好地和企业系统集成，FastGPT 支持通过 API 的方式地二次开发导入能力，支持和已有知识管理系统更好地自动化集成。常见的导入方法有：</span></section><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">导入数据方案 1 - 直接分段导入：直接分段会利用句子分词器对文本进行一定长度拆分，可以理解为原始文档 Chunk。</span></section></li><li><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">导入数据方案 2 - QA 导入：导入时会调用大模型对分段进行学习，然后直接生成问题-答案。</span></section></li><li><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">导入数据方案 3 - 手动录入：手动录入问题和答案。</span></section></li><li><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">导入数据方案 4 - CSV 录入：批量快速录入问题答案对。</span></section></li><li><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: left;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">导入数据方案 5 - API 导入，</span><span style="font-size: 15px;letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">详见：OpenAPI 接口文档（地址：https://doc.fastgpt.in/docs/development/openapi/#%E7%9F%A5%E8%AF%86%E5%BA%93%E6%B7%BB%E5%8A%A0%E6%95%B0%E6%8D%AE）</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">﻿</span></section></li></ol><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">我们先简单地录入几个问题和答案，然后后面快速验证 RAG 效果。</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">新建一个知识库，注意，索引模型一旦选择不可更改。这里我们选择刚部署好的 m3e-base</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041761" data-ratio="0.769620253164557" src="https://oscimg.oschina.net/oscnet/d357e075-29d4-4b82-8032-48ddf63a806a.jpg" data-type="other" data-w="790" referrerpolicy="no-referrer"></span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">进入知识库初始界面，已经默认有了一个「手动录入」文件夹，我们在这里录入几条测试问答</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="503041762" data-ratio="0.387037037037037" src="https://oscimg.oschina.net/oscnet/8812cf81-0f6c-4d49-9e3c-900ff61c2b4b.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">录入内容分两种类型，其中：被搜索的内容指将被向量化的部分，通常是问题，或者精炼扼要的描述，需要准确填写</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: center;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041763" data-ratio="0.33425925925925926" src="https://oscimg.oschina.net/oscnet/6d02fcef-1034-404e-8fe3-6269dece3ada.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_19"></span><h4 data-cangjie-key="820" data-cangjie-leaf-block="true" data-type="heading-4" style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">验证知识库问答效果</span></h4></li></ul><section style="margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">重新打开应用，关联刚才创建好的知识库（注意这里一定要保证才会生效），问他一个简单的问题，回答的质量看起来还可以。</span></section><blockquote style="box-sizing: inherit;margin-top: 0px;margin-bottom: 0px;margin-left: 2px;padding-top: 0px;padding-left: 11px;opacity: 0.5;border-left-width: 4px;border-left-color: rgb(217, 219, 221);color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;font-size: 14.6667px;letter-spacing: normal;text-align: start;white-space: pre-wrap;background-color: rgb(255, 255, 255);"><p style="text-align: justify;"><span style="box-sizing: inherit;font-size: 15px;">问：简单说一下商家共振模型是个啥呗？</span></p></blockquote><blockquote style="box-sizing: inherit;margin-top: 0px;margin-bottom: 0px;margin-left: 2px;padding-top: 0px;padding-left: 11px;opacity: 0.5;border-left-width: 4px;border-left-color: rgb(217, 219, 221);color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;font-size: 14.6667px;letter-spacing: normal;text-align: start;white-space: pre-wrap;background-color: rgb(255, 255, 255);"><p style="text-align: justify;"><span style="box-sizing: inherit;font-size: 15px;">答：商家共振模型是一种商业策略和运营模式，旨在促进商家和平台之间的合作关系，同时提高用户的粘性和平台的影响力。这个模式通过激励商家在站内和站外进行投放活动，帮助商家获得更多的流量和销售机会，从而促进商家的生意增长。同时，这个模式也能够扩大平台的规模和影响力，增加商家对平台的依赖性和忠诚度。总的来说，商家共振模型是一种有效的商业策略和运营模式，对于猫超等平台来说是一个不错的选择。</span></p></blockquote><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="503041764" data-ratio="0.6083333333333333" src="https://oscimg.oschina.net/oscnet/ad7951a6-f135-449a-8cc7-0a6081e1a501.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;text-align: left;white-space: break-spaces;background-color: rgb(255, 255, 255);font-size: 15px;letter-spacing: 1px;">点击答案中的「1 条引用」，还可以看到答案的出处来源：</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: center;"><span style="color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;text-align: left;white-space: break-spaces;background-color: rgb(255, 255, 255);font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503041765" data-ratio="0.6555555555555556" src="https://oscimg.oschina.net/oscnet/af4bb324-f2ed-432d-8dd3-c8c14d6ac63a.jpg" data-type="other" data-w="1080" referrerpolicy="no-referrer"></span></p><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;text-align: left;white-space: break-spaces;background-color: rgb(255, 255, 255);font-size: 15px;letter-spacing: 1px;">至此，我们就完成了一个简单的知识库构建和应用的过程，也验证了整套本地知识库方案的可行性。</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;text-align: left;white-space: break-spaces;background-color: rgb(255, 255, 255);font-size: 15px;letter-spacing: 1px;">﻿</span></p><section style="margin-right: 0cm;margin-bottom: 0px;margin-left: 0cm;outline: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);font-size: 11pt;font-family: DengXian;color: rgb(0, 0, 0);letter-spacing: normal;text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503041766" data-ratio="0.328125" data-s="300,640" data-type="png" data-w="256" src="https://oscimg.oschina.net/oscnet/4454b7bc-70eb-48c3-afc5-445ce122d5f1.png" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 133px !important;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);font-size: 15px;text-align: center;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;font-size: 18px;color: rgb(0, 17, 255);">未来展望</span></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;text-align: left;white-space: break-spaces;background-color: rgb(255, 255, 255);font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">串通了整个知识库应用流程，我们完成了从 0 到 1 的起步。虽然整体应用架构是按实际商用标准来搭建的，但要想使用效果也达到工业级别的标准，还有很多工作值得进一步探索，包括但不限于：</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">1️⃣ 大模型应用层面：</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">1、更好的文档 Chunk、Embedding、多路加权平均搜索召回方案，提升 RAG 整体效能</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">2、更好的 Prompt Engineering，充分挖掘 LLM 的潜力</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">3、工作流编排、CoT、Agent，满足实际的企业应用需求</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">2️⃣ 稳定性层面：如果达到商用级别，需要更高配置的软硬件环境</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">3️⃣ 落地价值层面：从解决身边的问题开始，解决真金白银的商业问题</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">﻿</span></p><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">希望本文能给每位计划自己搭建大模型知识库应用的工程师一点参考，动手跑通一个程序的乐趣是无穷的，更多的实操作经验分享，我们在评论区交流。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="color: rgb(64, 64, 64);font-family: &quot;zh quote&quot;, &quot;Helvetica Neue&quot;, -apple-system, &quot;PingFang SC&quot;, &quot;Microsoft YaHei&quot;, STHeiti, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;;text-align: left;white-space: break-spaces;background-color: rgb(255, 255, 255);font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503041767" data-ratio="0.328125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1e2db517-aad4-4517-add1-0856c0864c05.png" data-type="png" data-w="256" style="outline: 0px;color: rgb(51, 51, 51);font-size: 20px;font-weight: bold;letter-spacing: 0.578px;visibility: visible !important;width: 134px !important;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);font-size: 15px;text-align: center;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;font-size: 18px;color: rgb(0, 17, 255);">团队介绍</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="box-sizing: inherit;font-size: 15px;letter-spacing: 1px;">我们是淘天渠道分销技术团队，负责淘天全渠道一盘货产品技术研发。我们通过用技术手段解决电商多段销售中的多角色商业往来问题，构建了灵活的新零售供应链分销产品平台，致力于为商家提供多元化的供给和销售渠道、助力商家在全平台取得更高的成交额。<br style="background-clip: padding-box;caret-color: rgb(23, 26, 29);color: rgb(23, 26, 29);font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Segoe UI&quot;, system-ui, Roboto, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 14px;letter-spacing: normal;text-align: left;white-space: pre-wrap;text-size-adjust: auto;"><br style="background-clip: padding-box;caret-color: rgb(23, 26, 29);color: rgb(23, 26, 29);font-family: -apple-system, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Segoe UI&quot;, system-ui, Roboto, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 14px;letter-spacing: normal;text-align: left;white-space: pre-wrap;text-size-adjust: auto;">长期招募人才，欢迎投递简历：xieyi.xie@alibaba-inc.com</span></p><section style="margin-bottom: 8px;"><br></section><section data-role="outer" label="Powered by 135editor.com" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section style="margin-top: 8px;outline: 0px;letter-spacing: 0.544px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;text-align: center;line-height: 1.75em;margin-bottom: 8px;"><span style="outline: 0px;color: rgb(0, 17, 255);"><strong style="outline: 0px;">¤</strong></span><span style="outline: 0px;"><strong style="outline: 0px;">&nbsp;拓展阅读&nbsp;</strong></span><span style="outline: 0px;color: rgb(0, 17, 255);"><strong style="outline: 0px;">¤</strong></span></section><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;text-align: center;line-height: 1.75em;"><br style="outline: 0px;"></section><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;min-height: 24px;clear: both;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565944923443904512%23wechat_redirect" textvalue="3DXR 技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">3DXR 技术</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1533906991218294785%23wechat_redirect" textvalue="终端技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">终端技术</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1592015847500414978%23wechat_redirect" textvalue="音视频技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">音视频技术</a></section><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1539610690070642689%23wechat_redirect" textvalue="服务端技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">服务端技术</a><span style="outline: 0px;letter-spacing: 0.544px;">&nbsp;|&nbsp;</span><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565883875634397185%23wechat_redirect" textvalue="技术质量" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">技术质量</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1522425612282494977%23wechat_redirect" textvalue="数据算法" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">数据算法</a></section><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;"><br style="outline: 0px;"></p><section class="mp_profile_iframe_wrp" style="margin-bottom: 24px;outline: 0px;"><mp-common-profile class="custom_select_card mp_profile_iframe js_wx_tap_highlight" data-pluginname="mpprofile" data-id="MzAxNDEwNjk5OQ==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8t5nZGhAatCrc4e2iaDfAaoInribRKxc7MOqdTGygfcLqSDxhj0trCHVEh94Sjl7zuWYzwouYtJ0VQ/300?wx_fmt=png&amp;wxfrom=19" data-nickname="大淘宝技术" data-alias="AlibabaMTT" data-signature="大淘宝技术官方账号" data-from="2" data-index="0" data-origin_num="685" data-isban="0" data-weuitheme="light" data-biz_account_status="0" data-is_biz_ban="0"></mp-common-profile><span style="outline: 0px;color: rgb(0, 0, 0);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;"></span></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - 大淘宝技术（AlibabaMTT）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 03:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4662964/blog/10448445</guid>
            <link>https://my.oschina.net/u/4662964/blog/10448445</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mozilla 和 Firefox 的变迁：市场下滑背后的思考]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>最近 Mozilla 基金会发布的 2023 年度报告引发了广泛关注。报告显示，在 Mozilla CEO 薪酬大幅上涨的同时，其旗舰产品 Firefox 浏览器的市场份额却持续下滑。这一现象不仅反映出 Mozilla 的财务状况尚佳，也揭示了其业务重心可能正在发生变化，但同时也让人不免对 Firefox 前景产生担忧。</p><p style="text-align:center"><img height="919" src="https://oscimg.oschina.net/oscnet/up-4547075666f5a7674598dca51bafe5cc568.png" width="1920" referrerpolicy="no-referrer"></p><p style="color:#999999; text-align:center">The State of Mozilla 网站截图</p><p>具体来看，2022 年 Mozilla CEO 的年薪高达 690 万美元，较去年增加了 130 万美元，达到创纪录的新高。与此形成对比的是，Mozilla 的整体收入出现轻微下滑，由 2021 年的 6 亿美元降至 2022 年的 5.93 亿美元。这表明，尽管财务资产总额继续增长，达到高达 13 亿美元，但收入增长出现停滞。</p><p>更值得关注的是，在 Mozilla 财务数据保持乐观的背景下，其核心产品 Firefox 的市场表现却难掩颓势。据统计，2022 年 Firefox 的全球浏览器市场份额已从 2021 年底的 3.79% 下降至 3.04%，跌幅达 20%。考虑到近年移动互联网的快速发展，这一数据更显示出 Firefox 在移动端的表现不佳。</p><p>面对 Firefox 市场份额的下滑，业内分析普遍认为其背后反映的是 Mozilla 业务重心的转变。在财务报告中可以看出，Mozilla 的「版税收入」有所下降，而「订阅和广告收入」则有所增加，似乎显示出其正在加速多元化业务，减少对 Firefox 的依赖。而今年早些时候，Mozilla CEO 就明确表示，公司将重点转向人工智能等新兴领域。</p><p>因此，有分析指出，Mozilla 可能正处在从浏览器向人工智能等新业务转型的关键节点上。这可能也解释了为何在 Firefox 表现疲软的情况下，企业高管的薪酬水平还能大幅提升。很显然，Mozilla 领导层正在根据新的发展战略进行调整。</p><p>但业内也存在担忧的声音。毕竟，Firefox 曾是开源运动的一面旗帜，同时也是少数能与 Chrome 竞争的浏览器之一。一旦 Mozilla 继续减少 Firefox 投入，将可能对浏览器市场格局和网络开放性产生一定影响。</p><p>最近，Mozilla 基金会报告在 Hacker News 社区也引发了热烈讨论。许多社区成员对报告反映出的 Mozilla 业务战略转变表示不解甚至失望。他们普遍认为，Mozilla 不应过度减少对 Firefox 的投入，而应更专注于维护其核心产品。</p><p>一些用户还表示，由于 Firefox 的私密性保护功能，其实际用户量可能高于统计数据。他们希望 Mozilla 能继续致力于提升 Firefox 的核心功能，如密码管理、广告屏蔽等，这对维系用户群至关重要。此外，一些社区用户还呼吁 Mozilla 应该采取行动巩固 Firefox 的市场地位，确保浏览器市场的开放和多样。</p><p>综合来看，Mozilla 当前的市场表现确实反映了一家企业在变革中的两难处境。CEO 薪酬的大幅提高似乎预示着企业正根据新的发展战略进行市场调整，这在商业上也许可理解。但作为曾经开源界的领军产品，Firefox 的持续下滑无疑让人担忧。维护核心产品与开拓新业务之间的平衡，可能是 Mozilla 当前面临的主要难题。</p><p>无论前景如何，Firefox 在开源浏览器市场的地位和作用还将持续受到业内关注。而 Mozilla 也面临着在财务增长和维系开源社区期望之间找到最佳路径的挑战。我们期待 Mozilla 能继续致力于开放和创新，同时维护其社区支持度。毕竟，只有在社区的积极参与下，开源精神才能持续发扬光大。</p><blockquote><p>注：Mozilla 的报告总是会滞后一年，所以文中提到了很多 2022 年的信息</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 02:57:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273248</guid>
            <link>https://www.oschina.net/news/273248</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust 1.75.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333"><span style="color:#333333">Rust 1.75.0 稳定版已正式</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2023%2F12%2F28%2FRust-1.75.0.html" target="_blank">发布</a><span style="background-color:#ffffff; color:#333333"><span style="color:#333333">，主要带来以下变化：</span></span></p><h4 style="text-align:start">traits 中的<code>async fn</code><span>&nbsp;</span>和 return-position<span>&nbsp;</span><code>impl Trait</code></h4><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Rust 1.75 支持在 Trait 中使用<code>async fn</code>和<code>-&gt; impl Trait</code>。但是，此初始版本存在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2023%2F12%2F21%2Fasync-fn-rpit-in-traits.html%23where-the-gaps-lie" target="_blank">公告帖子</a>中描述的一些限制。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>预计这些限制将在未来的版本中取消。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4><strong><span style="background-color:#ffffff; color:#333333"><span style="color:#333333">指针字节偏移 API</span></span></strong></h4><p style="text-align:start"><span style="background-color:#ffffff; color:#333333">原始指针</span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>（<code>*const T</code>和<code>*mut T</code>）主要用于支持以<code>T</code>为单位的操作。例如，<code>&lt;*const T&gt;::add(1)</code>将&nbsp;<code>size_of::&lt;T&gt;()</code>字节添加到指针的地址。在某些情况下，使用字节偏移量更方便，并且这些新 API 避免了要求调用者首先强制转换为<code>*const u8</code>/&nbsp;<code>*mut u8</code>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_add" target="_blank"><code>pointer::byte_add</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_offset" target="_blank"><code>pointer::byte_offset</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_offset_from" target="_blank"><code>pointer::byte_offset_from</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_sub" target="_blank"><code>pointer::byte_sub</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.wrapping_byte_add" target="_blank"><code>pointer::wrapping_byte_add</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.wrapping_byte_offset" target="_blank"><code>pointer::wrapping_byte_offset</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.wrapping_byte_sub" target="_blank"><code>pointer::wrapping_byte_sub</code></a></li></ul><h4 style="text-align:start"><span><span><strong><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>rustc 的代码布局优化</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></span></span></h4><p><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Rust 编译器的运行速度继续加快，此次发布的二进制版本采用了 BOLT 技术，使基准测试平均运行时间提高了 2%。该工具优化了包含大部分 rustc 代码的 librustc_driver.so 库的布局，从而提高了缓存利用率。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>现在还在使用 -Ccodegen-units=1 构建 rustc，为在 LLVM 中进行优化提供了更多机会。这一优化为基准测试带来了 1.5% </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#000000">的平均运行时间平均提升。</span></p><p><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>在此版本中，这些优化仅限于 x86_64-unknown-linux-gnu 编译器。项目团队计划随着时间的推移将其扩展到更多平台。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h3 style="text-align:start"><span><span><strong><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>稳定的 API</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></span></span></h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fsync%2Fatomic%2Fstruct.AtomicUsize.html%23method.from_ptr" target="_blank"><code>Atomic*::from_ptr</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Ffs%2Fstruct.FileTimes.html" target="_blank"><code>FileTimes</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fos%2Fwindows%2Ffs%2Ftrait.FileTimesExt.html" target="_blank"><code>FileTimesExt</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Ffs%2Fstruct.File.html%23method.set_modified" target="_blank"><code>File::set_modified</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Ffs%2Fstruct.File.html%23method.set_times" target="_blank"><code>File::set_times</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fnet%2Fenum.IpAddr.html%23method.to_canonical" target="_blank"><code>IpAddr::to_canonical</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fnet%2Fstruct.Ipv6Addr.html%23method.to_canonical" target="_blank"><code>Ipv6Addr::to_canonical</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Foption%2Fenum.Option.html%23method.as_slice" target="_blank"><code>Option::as_slice</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Foption%2Fenum.Option.html%23method.as_mut_slice" target="_blank"><code>Option::as_mut_slice</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_add" target="_blank"><code>pointer::byte_add</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_offset" target="_blank"><code>pointer::byte_offset</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_offset_from" target="_blank"><code>pointer::byte_offset_from</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.byte_sub" target="_blank"><code>pointer::byte_sub</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.wrapping_byte_add" target="_blank"><code>pointer::wrapping_byte_add</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.wrapping_byte_offset" target="_blank"><code>pointer::wrapping_byte_offset</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fprimitive.pointer.html%23method.wrapping_byte_sub" target="_blank"><code>pointer::wrapping_byte_sub</code></a></li></ul><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>这些 API 现在在 const</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#000000"><span>&nbsp;</span>contexts&nbsp;</span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>中是稳定的：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fnet%2Fstruct.Ipv6Addr.html%23method.to_ipv4_mapped" target="_blank"><code>Ipv6Addr::to_ipv4_mapped</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fmem%2Funion.MaybeUninit.html%23method.assume_init_read" target="_blank"><code>MaybeUninit::assume_init_read</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fmem%2Funion.MaybeUninit.html%23method.zeroed" target="_blank"><code>MaybeUninit::zeroed</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fmem%2Ffn.discriminant.html" target="_blank"><code>mem::discriminant</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fmem%2Ffn.zeroed.html" target="_blank"><code>mem::zeroed</code></a></li></ul><h4 style="text-align:start"><span><span><strong><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>其他变化</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></span></span></h4><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frust-lang%2Frust%2Freleases%2Ftag%2F1.75.0" target="_blank">Rust</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frust-lang%2Fcargo%2Fblob%2Fmaster%2FCHANGELOG.md%23cargo-175-2023-12-28" target="_blank">Cargo</a>&nbsp;和&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frust-lang%2Frust-clippy%2Fblob%2Fmaster%2FCHANGELOG.md%23rust-175" target="_blank">Clippy</a>&nbsp;中发生的所有变化。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span style="background-color:#ffffff; color:#333333"><span style="color:#333333">详情可</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2023%2F12%2F28%2FRust-1.75.0.html" target="_blank">查看官方公告</a><span style="background-color:#ffffff; color:#333333"><span style="color:#333333">。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 02:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273247/rust-1-75-0-released</guid>
            <link>https://www.oschina.net/news/273247/rust-1-75-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英伟达推出特供中国销售的 GeForce RTX 4090 D]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在 GeForce RTX 4090 被列入了出口管控清单之后，英伟达推出了特供中国市场销售的<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nvidia.cn%2Fgeforce%2Fgraphics-cards%2F40-series%2Frtx-4090-d%2F" target="_blank"> GeForce RTX 4090 D</a></u>，建议零售价 1.3 万人民币，1 月 20 日发售。</p><p>作为英伟达针对美国新出口限制的回应，RTX 4090 D 能满足美国的出口管控要求，旨在为中国游戏玩家提供高性能的游戏体验。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a380dbf4c058357511bfd4b9931862b1751.png" referrerpolicy="no-referrer"></p><p>据介绍，RTX 4090 D 有 14592 个 CUDA Core 核心，频率 2.28GHz-2.52GHz，显存 24 GB GDDR6X。相比下原版 RTX 4090 有 16384 个 CUDA Cores 核心。此外，RTX 4090 D 基础频率高于 RTX 4090，但由于综合运算性能的限制，其 CUDA 和 Tensor 核心数量低于 RTX 4090。因此新版本预计会大幅降低 AI 推理性能，游戏性能可能变化不太显著。</p><p>与 RTX 4090 的主要参数对比：</p><ul><li>CUDA 核心数量：从 16384 个减至 14592 个</li><li>Tensor 核心数量：从 512 个减至 456 个</li><li>RT 核心数量：从 128 个减至 114 个</li><li>基础频率：2280 MHz，高于 RTX 4090 的 2235 MHz</li><li>加速频率：与 RTX 4090 相同，均为 2.52 GHz</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-b9e684e4d8fd2a515232e8171aa8f883882.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-68e049a7a0911bd428574a653036dc7f080.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 02:44:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273243/nvidia-rtx-4090-d</guid>
            <link>https://www.oschina.net/news/273243/nvidia-rtx-4090-d</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ODC —— 全场景数据库开发和数据管理协同工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#1f2328">OceanBase 开发者中心（简称 ODC）是&nbsp;</span>Oceanbase 开源的<span style="background-color:#ffffff; color:#1f2328">全场景数据库开发和数据管理协同工具，通过协同开发解决数据库的变更风险管控、数据管理和数据安全问题。</span></p><p><span style="background-color:#ffffff; color:#1f2328">优点：</span></p><p style="text-align:start"><strong>随时随地高效 SQL 开发</strong></p><ul><li>ODC 基于现代 WEB 架构，随时随地，只要有浏览器就可以访问您的数据库。</li><li>ODC SQL 开发功能全面且易用，桌面开发工具有的功能 ODC 也有，甚至支持 PL 调试。</li></ul><p style="text-align:start"><strong>守护 SQL 开发过程的每一次变更</strong></p><ul><li>在 SQL 开发过程的全部场景，包括可视化对象管理、SQL 查询、数据编辑、数据导入和导出、... ，ODC 都内置了风险控制。</li><li>ODC 提供基于项目的协同和变更审批流程，并且内置了 SQL 检查规则、SQL 窗口规范、风险等级识别。</li></ul><p style="text-align:start"><strong>自动数据生命周期管理</strong></p><ul><li>ODC 支持数据按照保留时长清理或归档，5 分钟构建你的冷热数据分离系统。</li><li>ODC 不仅支持按照数据的时间标记处理，也支持按照分区批量处理。</li><li>还可以通过 ODC SQL 计划任务完成计算任务，为什么还要继续使用你的 CRONTAB ？</li></ul><p style="text-align:start"><strong>全场景敏感数据保护</strong></p><ul><li>ODC 数据脱敏支持静态场景也支持动态场景，结构变更、SQL 查询、结果集导出、数据导出，全部开发场景都会脱敏。</li><li>安全管理员配置敏感数据规则和脱敏算法，DBA 和，开发，都无法接触敏感数据。</li></ul><p style="text-align:start"><strong>无需改变已有系统就可以集成 ODC 到当前工作流程</strong></p><ul><li>无需改变你的系统就可以把 ODC 集成到你当前的数据库开发协同工作流程中.</li><li>SSO、审批集成、SQL 审核集成、堡垒机集成、审计集成，企业管控集成需要的能力全都有。</li></ul><h4 style="text-align:start"><strong>功能特性</strong></h4><p style="color:#1f2328; text-align:start">ODC 产品功能包括 SQL 开发和管控协同 2 个方面，核心功能列举如下。</p><p style="text-align:start"><strong>SQL 开发</strong></p><ul><li>多数据源：支持 OceanBase MySQL 模式/Oracle 模式、ODP Sharing、MySQL 等数据库（不断增加中）。</li><li>数据库对象：表、视图、序列、同义词、触发器、存储过程、函数、程序包、类型，等对象的可视化管理。</li><li>SQL 执行：SQL 编辑和执行、命令行窗口、脚本、代码片段。</li><li>数据查看与编辑：数据查看、数据编辑、结果集 Excel 互操作。</li><li>监控诊断：执行计划、执行剖析、数据库全链路 TRACE。</li><li>数据生成：测试数据生成，场景化数据生成。</li><li>导入和导出：结构导入、结构导出、数据导入、数据导出、整库导入、整库导出。</li><li>PL 生命周期：PL 对象的执行、编译和调试。</li><li>数据库运维：回话管理、变量管理、回收站管理、权限管理（规划中）。</li></ul><p style="text-align:start"><strong>管控协同</strong></p><ul><li>权限管理：用户管理、基于 RBAC 模型的自定义角色。</li><li>团队协同：基于项目的管理员、DBA、开发多角色协同、库级别访问权限管理。</li><li>变更管控：自定义审批流程、基于语法规则的 SQL 检查。</li><li>稳定变更：无锁结构变更、无锁数据变更（规划中）。</li><li>数据生命周期：数据清理、数据归档、自动分区、SQL 定时任务。</li><li>数据安全：敏感列管理、数据导出脱敏、数据查询脱敏、敏感列权限。</li><li>合规审计：操作审计、SQL 审计、审计集成。</li><li>协同效率：批量导入配置、自动授权规则、通知中心。</li><li>系统集成：OAuth2、OIDC 账号集成、堡垒机集成、审批集成、SQL 审核集成。</li><li>体验学习：实验资源、教程和课程、代码库（规划中）。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/odc</guid>
            <link>https://www.oschina.net/p/odc</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 Kotlin 开发的播放器软件 MXVideo]]>
            </title>
            <description>
                <![CDATA[<h1><a id="mxvideo" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#mxvideo"></a>MXVideo</h1><h4><a id="介绍" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#%E4%BB%8B%E7%BB%8D"></a>介绍</h4><p>基于 Kotlin 开发的播放器，默认支持 MediaPlayer 播放器，可扩展 IJK 播放器、EXO 播放器、阿里云播放器、以及任何使用 TextureView 的播放器, 开箱即用，欢迎提 issue 和 pull request</p><blockquote><p>简书相关介绍（待完善）：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.jianshu.com%2Fnb%2F50294642">https://www.jianshu.com/nb/50294642</a></p></blockquote><p>最新版本：<a href="https://gitee.com/link?target=https%3A%2F%2Fjitpack.io%2F%23zhangmengxiong%2FMXVideo"><img src="https://jitpack.io/v/zhangmengxiong/MXVideo.svg" alt="" referrerpolicy="no-referrer"></a></p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="s1">'com.github.zhangmengxiong:MXVideo:1.9.0'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p><img src="https://gitee.com/zhangmengxiong/MXVideo/raw/master/imgs/1.png" alt="Normal" referrerpolicy="no-referrer"><img src="https://gitee.com/zhangmengxiong/MXVideo/raw/master/imgs/2.png" alt="Land Screen" referrerpolicy="no-referrer"><img src="https://gitee.com/zhangmengxiong/MXVideo/raw/master/imgs/3.png" alt="Touch Seek" referrerpolicy="no-referrer"><img src="https://gitee.com/zhangmengxiong/MXVideo/raw/master/imgs/4.png" alt="Pause" referrerpolicy="no-referrer"><img src="https://gitee.com/zhangmengxiong/MXVideo/raw/master/imgs/5.png" alt="Rotation" referrerpolicy="no-referrer"><img src="https://gitee.com/zhangmengxiong/MXVideo/raw/master/imgs/6.png" alt="Light Seek" referrerpolicy="no-referrer"></p><h4><a id="功能特性" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7"></a>功能特性</h4><ul><li>任意播放器内核（包含开源 IJK、谷歌 Exo、阿里云等等）</li><li>单例播放，只能同时播放一个节目</li><li>0 代码集成全屏功能</li><li>可以调节音量、屏幕亮度</li><li>可以注册播放状态监听回调</li><li>播放器高度可以根据视频高度自动调节</li><li>播放器支持设置宽高比，设置宽高比后，高度固定。</li><li>自动保存与恢复播放进度（可关闭）</li><li>支持循环播放、全屏时竖屏模式、可关闭快进快退功能、可关闭全屏功能、可关闭非 WiFi 环境下流量提醒</li><li>支持播放时获取实时截屏 Bitmap</li></ul><h5><a id="1 通过-dependence-引入 mxvideo" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#1%E9%80%9A%E8%BF%87-dependence-%E5%BC%95%E5%85%A5mxvideo"></a>1、通过 dependence 引入 MXVideo</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">dependencies</span><span class="o">{</span></span><span id="LC2" class="line"><span class="n">implementation</span><span class="s1">'com.github.zhangmengxiong:MXVideo:x.x.x'</span></span><span id="LC3" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="2 页面集成" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#2%E9%A1%B5%E9%9D%A2%E9%9B%86%E6%88%90"></a>2、页面集成</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;com.mx.video.MXVideoStd</span></span><span id="LC2" class="line"><span class="na">android:id=</span><span class="s">"@+id/mxVideoStd"</span></span><span id="LC3" class="line"><span class="na">android:layout_width=</span><span class="s">"match_parent"</span></span><span id="LC4" class="line"><span class="na">android:layout_height=</span><span class="s">"wrap_content"</span><span class="nt">/&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// Activity 或者 Fragment 中生命周期变更，处理进入后台/前台时的暂停/续播功能</span></span><span id="LC2" class="line"><span class="k">override</span><span class="k">fun</span><span class="nf">onStart</span><span class="p">()</span><span class="p">{</span></span><span id="LC3" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">onStart</span><span class="p">()</span></span><span id="LC4" class="line"><span class="k">super</span><span class="p">.</span><span class="nf">onStart</span><span class="p">()</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="k">override</span><span class="k">fun</span><span class="nf">onStop</span><span class="p">()</span><span class="p">{</span></span><span id="LC8" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">onStop</span><span class="p">()</span></span><span id="LC9" class="line"><span class="k">super</span><span class="p">.</span><span class="nf">onStop</span><span class="p">()</span></span><span id="LC10" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="3 开始播放" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#3%E5%BC%80%E5%A7%8B%E6%92%AD%E6%94%BE"></a>3、开始播放</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 设置播放占位图</span></span><span id="LC2" class="line"><span class="nc">Glide</span><span class="p">.</span><span class="nf">with</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">load</span><span class="p">(</span><span class="s">"http://www.xxx.com/xxx.png"</span><span class="p">).</span><span class="nf">into</span><span class="p">(</span><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getPosterImageView</span><span class="p">())</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c1">// 默认从上一次进度播放</span></span><span id="LC5" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setSource</span><span class="p">(</span><span class="nc">MXPlaySource</span><span class="p">(</span><span class="nc">Uri</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s">"https://aaa.bbb.com/xxx.mp4"</span><span class="p">),</span><span class="s">"标题 1"</span><span class="p">))</span></span><span id="LC6" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">startPlay</span><span class="p">()</span></span><span id="LC7" class="line"></span><span id="LC8" class="line"><span class="c1">// 从头开始播放</span></span><span id="LC9" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setSource</span><span class="p">(</span><span class="nc">MXPlaySource</span><span class="p">(</span><span class="nc">Uri</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s">"https://aaa.bbb.com/xxx.mp4"</span><span class="p">),</span><span class="s">"标题 1"</span><span class="p">),</span><span class="n">seekTo</span><span class="p">=</span><span class="mi">0</span><span class="p">)</span></span><span id="LC10" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">startPlay</span><span class="p">()</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 从第 10 秒开始播放</span></span><span id="LC13" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setSource</span><span class="p">(</span><span class="nc">MXPlaySource</span><span class="p">(</span><span class="nc">Uri</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s">"https://aaa.bbb.com/xxx.mp4"</span><span class="p">),</span><span class="s">"标题 1"</span><span class="p">),</span><span class="n">seekTo</span><span class="p">=</span><span class="mi">10</span><span class="p">)</span></span><span id="LC14" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">startPlay</span><span class="p">()</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>MXPlaySource 可选参数说明：</p></blockquote><table><thead><tr><th align="left">参数</th><th align="center">说明</th><th align="right">默认值</th></tr></thead><tbody><tr><td align="left">title</td><td align="center">标题</td><td align="right">""</td></tr><tr><td align="left">headerMap</td><td align="center">网络请求头部</td><td align="right">null</td></tr><tr><td align="left">isLooping</td><td align="center">是否循环播放</td><td align="right">false</td></tr><tr><td align="left">enableSaveProgress</td><td align="center">是否存储、读取播放进度</td><td align="right">true</td></tr><tr><td align="left">isLiveSource</td><td align="center">是否直播源，当时直播时，不显示进度，无法快进快退暂停</td><td align="right">false</td></tr></tbody></table><h5><a id="4 监听播放进度" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#4%E7%9B%91%E5%90%AC%E6%92%AD%E6%94%BE%E8%BF%9B%E5%BA%A6"></a>4、监听播放进度</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">addOnVideoListener</span><span class="p">(</span><span class="kd">object</span><span class="err">: </span><span class="nc">MXVideoListener</span><span class="p">()</span><span class="p">{</span></span><span id="LC2" class="line"><span class="c1">// 播放状态变更</span></span><span id="LC3" class="line"><span class="k">override</span><span class="k">fun</span><span class="nf">onStateChange</span><span class="p">(</span><span class="n">state</span><span class="p">:</span><span class="nc">MXState</span><span class="p">)</span><span class="p">{</span></span><span id="LC4" class="line"><span class="p">}</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="c1">// 播放时间变更</span></span><span id="LC7" class="line"><span class="k">override</span><span class="k">fun</span><span class="nf">onPlayTicket</span><span class="p">(</span><span class="n">position</span><span class="p">:</span><span class="nc">Int</span><span class="p">,</span><span class="n">duration</span><span class="p">:</span><span class="nc">Int</span><span class="p">)</span><span class="p">{</span></span><span id="LC8" class="line"><span class="p">}</span></span><span id="LC9" class="line"><span class="p">})</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="5 全屏返回--释放资源" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#5%E5%85%A8%E5%B1%8F%E8%BF%94%E5%9B%9E--%E9%87%8A%E6%94%BE%E8%B5%84%E6%BA%90"></a>5、全屏返回 + 释放资源</h5><blockquote><p>这里 MXVideo 默认持有当前播放的 MXVideoStd，可以使用静态方法操作退出全屏、释放资源等功能。</p><p>也可以直接使用 viewId：mxVideoStd.isFullScreen()，mxVideoStd.isFullScreen()，mxVideoStd.release() 等方法。</p></blockquote><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">override</span><span class="k">fun</span><span class="nf">onBackPressed</span><span class="p">()</span><span class="p">{</span></span><span id="LC2" class="line"><span class="k">if</span><span class="p">(</span><span class="nc">MXVideo</span><span class="p">.</span><span class="nf">isFullScreen</span><span class="p">())</span><span class="p">{</span></span><span id="LC3" class="line"><span class="nc">MXVideo</span><span class="p">.</span><span class="nf">gotoNormalScreen</span><span class="p">()</span></span><span id="LC4" class="line"><span class="k">return</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"><span class="k">super</span><span class="p">.</span><span class="nf">onBackPressed</span><span class="p">()</span></span><span id="LC7" class="line"><span class="p">}</span></span><span id="LC8" class="line"></span><span id="LC9" class="line"><span class="k">override</span><span class="k">fun</span><span class="nf">onDestroy</span><span class="p">()</span><span class="p">{</span></span><span id="LC10" class="line"><span class="nc">MXVideo</span><span class="p">.</span><span class="nf">releaseAll</span><span class="p">()</span></span><span id="LC11" class="line"><span class="k">super</span><span class="p">.</span><span class="nf">onDestroy</span><span class="p">()</span></span><span id="LC12" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="功能相关" class="anchor" href="https://gitee.com/zhangmengxiong/MXVideo#%E5%8A%9F%E8%83%BD%E7%9B%B8%E5%85%B3"></a>功能相关</h3><ul><li>切换播放器内核</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 默认 MediaPlayer 播放器，库默认内置</span></span><span id="LC2" class="line"><span class="n">com</span><span class="p">.</span><span class="n">mx</span><span class="p">.</span><span class="n">video</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="nc">MXSystemPlayer</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c1">// 谷歌的 Exo 播放器</span></span><span id="LC5" class="line"><span class="n">com</span><span class="p">.</span><span class="n">mx</span><span class="p">.</span><span class="n">mxvideo_demo</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="n">exo</span><span class="p">.</span><span class="nc">MXExoPlayer</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="c1">// IJK 播放器</span></span><span id="LC8" class="line"><span class="n">com</span><span class="p">.</span><span class="n">mx</span><span class="p">.</span><span class="n">mxvideo_demo</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="nc">MXIJKPlayer</span></span><span id="LC9" class="line"></span><span id="LC10" class="line"><span class="c1">// 阿里云播放器，仅支持 」armeabi-v7a「、」arm64-v8a「 两种 CPU</span></span><span id="LC11" class="line"><span class="n">com</span><span class="p">.</span><span class="n">mx</span><span class="p">.</span><span class="n">mxvideo_demo</span><span class="p">.</span><span class="n">player</span><span class="p">.</span><span class="nc">MXAliPlayer</span></span><span id="LC12" class="line"></span><span id="LC13" class="line"><span class="c1">// 设置播放源是可以设置内核，默认 = MXSystemPlayer</span></span><span id="LC14" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setPlayer</span><span class="p">(</span><span class="nc">MXSystemPlayer</span><span class="o">::</span><span class="k">class</span><span class="p">.</span><span class="n">java</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放地址，标题，跳转等信息</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setSource</span><span class="p">(</span><span class="nc">MXPlaySource</span><span class="p">(</span><span class="nc">Uri</span><span class="p">.</span><span class="nf">parse</span><span class="p">(</span><span class="s">"xxx"</span><span class="p">),</span><span class="n">title</span><span class="p">=</span><span class="s">"xxx"</span><span class="p">),</span><span class="n">seekTo</span><span class="p">=</span><span class="mi">0</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>视频渲染旋转角度</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 默认旋转角度 = MXOrientation.DEGREE_0</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setTextureOrientation</span><span class="p">(</span><span class="nc">MXOrientation</span><span class="p">.</span><span class="nc">DEGREE_90</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置当前视频静音,不会影响系统音量</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 默认=false</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setAudioMute</span><span class="p">(</span><span class="k">true</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放器音量百分比，实际音量 = (volume * 系统当前音量)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 默认=1f，当设置=0f 时，视频则静音</span></span><span id="LC2" class="line"><span class="c1">// 取值范围：0f -&gt; 1f</span></span><span id="LC3" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setVolumePercent</span><span class="p">(</span><span class="mf">0.5f</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>视频填充规则</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 强制填充宽高 MXScale.FILL_PARENT</span></span><span id="LC2" class="line"><span class="c1">// 根据视频大小，自适应宽高 MXScale.CENTER_CROP</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c1">// 默认填充规则 = MXScale.CENTER_CROP</span></span><span id="LC5" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setScaleType</span><span class="p">(</span><span class="nc">MXScale</span><span class="p">.</span><span class="nc">CENTER_CROP</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>MXVideoStd 控件宽高约束</li></ul><blockquote><p>在页面 xml 中添加，layout_width 一般设置 match_parent，高度 wrap_content</p></blockquote><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;com.mx.video.MXVideoStd</span></span><span id="LC2" class="line"><span class="na">android:id=</span><span class="s">"@+id/mxVideoStd"</span></span><span id="LC3" class="line"><span class="na">android:layout_width=</span><span class="s">"match_parent"</span></span><span id="LC4" class="line"><span class="na">android:layout_height=</span><span class="s">"wrap_content"</span><span class="nt">/&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>可以设置任意宽高比，如果设置宽高比，则控件高度需要设置 android:layout_height="wrap_content"，否则不生效。</p><p>当取消约束、MXVideo 高度自适应、填充规则=MXScale.CENTER_CROP 时，控件高度会自动根据视频宽高自动填充高度</p></blockquote><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// MXVideoStd 控件设置宽高比= 16：9</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setDimensionRatio</span><span class="p">(</span><span class="mf">16.0</span><span class="p">/</span><span class="mf">9.0</span><span class="p">)</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c1">// MXVideoStd 控件设置宽高比= 4：3</span></span><span id="LC5" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setDimensionRatio</span><span class="p">(</span><span class="mf">4.0</span><span class="p">/</span><span class="mf">3.0</span><span class="p">)</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="c1">// 取消约束</span></span><span id="LC8" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">setDimensionRatio</span><span class="p">(</span><span class="mf">0.0</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>进度跳转</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 进度单位：秒，可以在启动播放后、错误或播完之前调用</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">seekTo</span><span class="p">(</span><span class="mi">55</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置不能快进快退</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canSeekByUser</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置不能全屏</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canFullScreen</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置缓冲时显示网速信息</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canShowNetSpeed</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>没有设置 source 时不显示播放按钮</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=false</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">hidePlayBtnWhenNoSource</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置全屏按钮是否显示</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="c1">// 全屏按钮只有在  canFullScreen=true &amp;&amp; showFullScreenButton=true 时显示</span></span><span id="LC3" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">showFullScreenButton</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置不显示控件右上角时间</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canShowSystemTime</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置不显示底部 1dp 高度的进度条</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canShowBottomSeekBar</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置不显示控件右上角电量图</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canShowBatteryImg</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置关闭 WiFi 环境播放前提醒</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">showTipIfNotWifi</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置打开 TextureView 的水平镜像模式</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=false</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">mirrorMode</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">true</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放完成后自动退出全屏</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">gotoNormalScreenWhenComplete</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放错误后自动退出全屏</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">gotoNormalScreenWhenError</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放时用户不可以暂停</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=true</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">canPauseByUser</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">false</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放时如果手机横屏则自动进入全屏播放</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=false</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">autoFullScreenBySensor</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">true</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置全屏播放时屏幕方向自动跟随重力方向</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=MXSensorMode.SENSOR_FIT_VIDEO</span></span><span id="LC2" class="line"><span class="c1">// MXSensorMode.SENSOR_AUTO = 跟随重力方向</span></span><span id="LC3" class="line"><span class="c1">// MXSensorMode.SENSOR_FIT_VIDEO = 跟随视频宽高自动旋转 0 或 180 度</span></span><span id="LC4" class="line"><span class="c1">// MXSensorMode.SENSOR_NO = 根据视频宽高比固定横屏/竖屏，横屏 = 视频宽&gt;=高   --   竖屏 = 视频宽&lt;高</span></span><span id="LC5" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">fullScreenSensorMode</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="nc">MXSensorMode</span><span class="p">.</span><span class="nc">SENSOR_AUTO</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置直播流播放错误时自动重试</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放前设置，默认=false</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">replayLiveSourceWhenError</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">true</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>设置播放器内控件动画效果</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 将动画时长设置为 &lt;=0 时，禁止动画效果</span></span><span id="LC2" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">animatorDuration</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="mi">0L</span><span class="p">)</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c1">// 默认时长 200 毫秒</span></span><span id="LC5" class="line"><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getConfig</span><span class="p">().</span><span class="n">animatorDuration</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="mi">200L</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>播放时截屏</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">if</span><span class="p">(</span><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">isPlaying</span><span class="p">())</span><span class="p">{</span></span><span id="LC2" class="line"><span class="kd">val</span><span class="py">bitmap</span><span class="p">:</span><span class="nc">Bitmap</span><span class="p">?</span><span class="p">=</span><span class="n">mxVideoStd</span><span class="p">.</span><span class="nf">getTextureView</span><span class="p">()</span><span class="o">?.</span><span class="n">bitmap</span></span><span id="LC3" class="line"><span class="n">screenCapImg</span><span class="p">.</span><span class="nf">setImageBitmap</span><span class="p">(</span><span class="n">bitmap</span><span class="p">)</span></span><span id="LC4" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>非全屏时，设置支持滑动快进快退/音量调节/亮度调节功能</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 默认非全屏时不支持滑动相关操作</span></span><span id="LC2" class="line"><span class="n">config</span><span class="p">.</span><span class="n">enableTouchWhenNormalScreen</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="k">true</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>播放倍数设置</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 播放倍数设置，默认 1.0 倍数播放</span></span><span id="LC2" class="line"><span class="n">config</span><span class="p">.</span><span class="n">playSpeed</span><span class="p">.</span><span class="k">set</span><span class="p">(</span><span class="mf">1.0</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div>]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 02:14:07 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/zhangmengxiong/MXVideo</guid>
            <link>https://gitee.com/zhangmengxiong/MXVideo</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 探索 Seata 项目开源开发之旅]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><em>作者：尹祥琨，清华大学，Seata 开源之夏学生参与者</em></p><p>Seata 是一款开源的分布式事务解决方案，致力于在微服务架构下提供高性能和简单易用的分布式事务服务。在今年的开源之夏活动中，我加入了 Apache Seata (Incubator) 社区，完成了开源之夏的课题，并从此一直积极参与社区。我有幸在云栖大会-开发者秀场上分享了我的开发者经验。在本文中，我将与大家分享我在 Seata 社区中的开发者之旅，以及在这个旅程中积累的经验和见解。希望通过我的故事，能够激励更多人踏上这充满挑战和激励的开源之路，为开源社区的繁荣做出自己的贡献。</p><p><img src="https://oscimg.oschina.net/oscnet/up-aebda794f193baa6a525759178f78ec45b8.png" alt="" referrerpolicy="no-referrer"></p><h2>相关背景</h2><p>在正式介绍我的经历之前，我想先提供一些相关的背景信息，以解释为什么我要参与开源以及如何参与开源。关于参与开源的原因，我相信每个人都有不同的动机。以下是我认为一些主要的原因：</p><ul><li><strong>学习：</strong> 参与开源使我们有机会为不同组织开发的开源项目做出贡献，与行业专家互动，提供了学习的机会。</li><li><strong>技能提升：</strong> 以我为例，我通常使用 Java 和 Python 进行后端开发。但在参与 Seata 项目时，我有机会学习 Go 语言，拓宽了我的后端技术栈。此外作为学生，我很难接触到生产级框架或应用，而开源社区为我提供了这个机会。</li><li><strong>兴趣：</strong> 我身边的朋友都是热衷于开源的，他们享受编程，对开源充满热情。</li><li><strong>求职：</strong> 参与开源可以丰富我们的作品集，为简历增加分量。</li><li><strong>工作需求：</strong> 有时参与开源是为了解决工作中遇到的问题或满足工作需求。</li></ul><p>这些都是参与开源的原因，对我来说，学习、技能提升和兴趣是我参与开源的主要动机。无论你是在校学生还是在职人员，如果你有参与开源的意愿，不要犹豫，任何人都可以为开源项目做出贡献。年龄、性别、工作和所在地都不重要，关键是你的热情和对开源项目的好奇心。</p><p><strong>我参与开源的契机是参加了中科院软件所举办的开源之夏活动。</strong></p><p>开源之夏是一个面向高校开发者的开源活动，社区发布开源项目，学生开发者在导师的指导下完成项目的开发，结项成果贡献给社区，合入社区仓库，获得项目奖金和证书。开源之夏是踏入开源社区的一个绝佳契机，也是我第一次比较正式地接触开源项目，而这个经历为我打开了一扇全新的大门。自此我深刻地认识到参与开源项目的建设，分享自己的技术成果，让更多的开发者能够使用你所贡献的东西，是一件极富乐趣和意义的事情。</p><p>下面我分享的这张图片是开源之夏官方公开的数据，从 2020 年开始参与的社区数量还有学生数量都在逐年增加，活动也是越办越好。可以看到今年的参与的社区项目共有 133 个，每个社区又提供了若干个课题，而每位学生只能选择一个课题。想要在这么多个社区中找到想要参与的社区和适合自己的课题是一个相对复杂的任务。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2cb63ff2fddcde028ba35a97e0ee5b21e2f.png" alt="" referrerpolicy="no-referrer"></p><p><strong>综合考虑社区的活跃程度、技术栈契合度、新人引导情况等，最终我选择加入 Seata 社区。</strong></p><p>Seata 是一款开源的分布式事务框架，提供了完整的分布式事务解决方案，包括 AT、TCC、Saga 和 XA 事务模式，可支持多种编程语言和数据存储方案。从 19 年开源起到今年已经走过了&nbsp;<strong>5</strong>&nbsp;个年头，社区中有超过 <strong>300</strong> 多位贡献者，项目收获了&nbsp;<strong>24k+</strong> &nbsp;星标，是一个非常成熟的社区。同时 Seata 兼容&nbsp;<strong>10</strong>&nbsp;余种主流 RPC 框架和 RDBMS，与&nbsp;<strong>20</strong>&nbsp;多个社区存在集成和被集成的关系，被<strong>几千</strong>家客户应用到业务系统中，可以说是分布式事务解决方案的事实标准。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1322af951d1654325b68bb62db27ac119fe.png" alt="" referrerpolicy="no-referrer"></p><p>2023 年 10 月 29 日，Seata 正式捐赠给了 Apache 软件基金会，成为孵化项目。经过孵化之后，Seata 将有望成为首个 Apache 软件基金会的分布式事务框架顶级项目。这次捐赠也将推动 Seata 更广泛地发展，对生态系统的建设产生深远的影响，从而使更多的开发者受益。这个重要的里程碑也为 Seata 带来更广阔的发展空间。</p><h2>开发之旅</h2><p><strong>介绍完了一些基本情况，后文中我将分享我在 Seata 社区的开发之旅。</strong></p><p>在正式开始开发之前，我进行了许多准备工作。因为 Seata 已经经历了五年的发展，积累了数十万行代码，因此直接参与开发需要一定的上手成本。我分享了一些准备经验，希望能够为大家提供一些启发。</p><h3>1. 文档和博客是第一手材料</h3><p>文档和博客这类的文本材料可以帮助社区新人迅速了解项目背景和代码结构。</p><p>首先，官方文档是最主要的参考资料，从这里可以了解到一切官方认为你需要了解的东西。</p><p><img src="https://oscimg.oschina.net/oscnet/up-00cfd6de008e0436da49cf6e2ced547e0ad.png" alt="" referrerpolicy="no-referrer"></p><p>博客，仅次于官方文档的材料，一般是开发者或者是深度用户编写的，和文档不同的点在于博客可能会更深入到某个专项上去介绍，比如一些项目的理论模型、项目结构、某个模块的源码分析等等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3fa38a82a0fb5a68516e1f8917a6bcf914e.png" alt="" referrerpolicy="no-referrer"></p><p>公众号，和博客类似，一般是偏技术性的文章，公众号还有个优点是可以订阅推送，利用碎片时间阅读一些技术。</p><p><img src="https://oscimg.oschina.net/oscnet/up-66dba9d75a4371e6cec17b1f6bcde799b7b.png" alt="" referrerpolicy="no-referrer"></p><p>此外，开源社区的一些在线分享或线下 Meetup 公开的幻灯片也是非常有意义的文本资料。</p><p><img src="https://oscimg.oschina.net/oscnet/up-36ffca7b98bc0d65f0567e08e6e57c3913b.png" alt="" referrerpolicy="no-referrer"></p><p>除了官方资料之外，还有许多第三方资料可供学习，比如可以通过用户分享的 use cases 了解项目的具体实施和实践；通过第三方社区的集成文档了解项目的生态；还有就是通过第三方的视频教程来学习。但在所有这些资料中，我认为官方文档和博客是最有帮助的。</p><h3>2. 熟悉使用框架</h3><p>当然刚才说的这些文本资料肯定不需要面面俱到的看完，纸上得来终觉浅，看到感觉差不多明白了就可以去实践了。可以按照官方文档的"Get Started"章节逐步了解项目的基本流程。另一种方法是查找官方提供的示例或演示，构建并运行它们，理解代码和配置的含义，并通过使用项目了解项目的需求、目标以及现有功能和架构。</p><p>例如，Seata 有一个名为 seata-samples 的仓库，其中包含 20 多种用例，比如 Seata 和 Dubbo 集成，和 SCA, Nacos 集成的案例，基本可以覆盖到支持的所有场景。</p><h3>3. 粗略阅读源代码把握主要逻辑</h3><p>在准备阶段，粗略地阅读源代码以把握项目的主要逻辑也很重要。了解如何高效地把握项目的主要内容是一个需要长期积累的技能。首先，通过前述的准备步骤，了解项目的概念、交互和流程模型是很有帮助的。</p><p>以 Seata 为例，通过官方文档和实际操作，可以了解 Seata 事务领域的三个角色：TC（Transaction Coordinator）、TM（Transaction Manager）和 RM（Resource Manager）。TC 作为独立部署的 Server 用于维护全局和分支事务的状态，是 Seata 实现高可用的关键；TM 用于与 TC 交互，定义全局事务的开始、提交或回滚；RM 用于管理分支事务处理的资源，与 TC 交互以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。粗略地了解这些角色之间的交互后，可以更轻松地把握项目的主要逻辑。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5c6f741753e54c13960a277e28738b6a8b6.png" alt="" referrerpolicy="no-referrer"></p><p>脑海里刻下了这些模型的印象，对源码的主干提取就相对得心应手了一些。比如 Seata TC 事务协调者，作为 Server 端，是一个独立于业务部署的单独应用。那为了分析源码，就可以直接在本地把 server 起起来，通过启动类开始追踪。可以分析到一些初始化的逻辑比如服务注册、全局锁的初始化等等。还有可以通过 RPC 的调用来追踪到交互逻辑的代码，比如 TC 是如何对全局事务和分支事务进行持久化，如何驱动全局事务提交或者回滚的。</p><p>然而内嵌客户端的框架代码，没有一个启动类入口可以入手分析。那其实可以从一个 sample 入手，找到其对框架代码的引用从而进行阅读。比如 Seata 一个很重要的注解是 GlobalTransaction，用于标识一个全局事务。想要知道 TM 是如何对这个注解分析的，那我们通过 IDE 的搜索功能，找到 GlobalTransaction 的拦截器即可分析其中的逻辑。</p><p>还有一个小 tips 分享给大家，往往来说单测注重於单一模块的职能，可以通过阅读单测可以了解一个模块的输入输出、逻辑边界，也可以顺着单测的调用链去阅读代码，也是理解源码一个很重要的手段。</p><p><strong>万事俱备只欠东风，做完充足的准备，下一步就是区积极参与到社区之中。</strong></p><p>参与的方式也有很多种，最常见的参与方式是查看项目的 Issues 列表，社区通常会为新贡献者标记一些带有特殊标签的 Issue，如「good-first-issue」、「contributions-welcome」和「help-wanted」等。可以通过这些标签筛选感兴趣的任务。</p><p><img src="https://oscimg.oschina.net/oscnet/up-77fc64ac1ba403624668e51380910130c78.png" alt="" referrerpolicy="no-referrer"></p><p>除了 Issues，GitHub 还提供了讨论的功能，可以参与一些公开的讨论并获取新的想法。</p><p><img src="https://oscimg.oschina.net/oscnet/up-658832d16529452411c236cdae75a8df324.png" alt="" referrerpolicy="no-referrer"></p><p>此外，社区通常会定期举行会议，比如周会或双周会，可以通过参加这些会议来了解社区的最新进展，提出问题以及与其他社区成员交流。</p><h2>总结与心得</h2><p>我加入 Seata 社区最初是通过开源之夏活动。我完成了我的课题，为 Seata Saga 实现了一些新的功能，也做了一系列的优化。但我不止于此，因为在 Seata 的开源经历中我获得了学生生涯中最宝贵的一次开发者体验，在之后的时间我也持续通过上述参与方式持续活跃在社区中。这主要得益于以下几个方面：</p><ul><li><p><strong>沟通与社交</strong></p><p>导师制度为我提供了重要的支持。在开发过程中，我与我的导师亦夏之间的密切合作对我适应社区文化和工作流程起到了关键作用。他不仅帮助我适应了社区，还为我提供了程序设计的思路，也与我分享了一些在工作中的经验和见解，这些都对我的发展非常有帮助。此外，Seata 社区创始人清铭也提供了很多帮助，包括建立了与其他同学的联系，帮助我进行 Code Review，也为我提供了许多机会。</p></li><li><p><strong>正反馈</strong></p><p>在 Seata 的开发过程中，我经历了一个良性的循环。许多细节为我提供了许多正反馈，例如我的贡献能被用户广泛使用和受益，比如开发得到了社区的认可。这些正反馈加强了我继续在 Seata 社区贡献的意愿。</p></li><li><p><strong>技能提升</strong>再就是参与 Seata 开发，对我能力的提升也是巨大的。在这里，我能学习到生产级别的代码，包括性能优化，接口设计，边界判断的技巧。可以直接参与一个开源项目的运作，包括项目计划，安排，沟通等。当然还了解一个分布式事务框架是如何设计并实现的。</p></li></ul><p>除了这些宝贵的开发者体验，我也从这次经历中体悟到了一些关于参与开源的个人心得，为激励其他有兴趣参与开源社区的同学，我做了简单的总结：</p><ul><li><p><strong>了解和学习社区文化和价值观</strong></p><p>每个开源社区都有不同的文化和价值观。了解社区的文化和价值观对于成功参与社区至关重要。观察和了解社区其他成员的日常开发和交流方式是学习社区文化的好方法。在社区中要尊重他人的意见和包容不同的观点。</p></li><li><p><strong>敢于迈出第一步</strong></p><p>不要害怕面对困难，迈出第一步是参与开源社区的关键。可以通过领取标有"good-first-issue"等标签的 Issue，编写文档、单元测试等方式来开始。重要的是要克服畏难情绪，积极尝试并学习。</p></li><li><p><strong>对自己的工作要充满信心</strong></p><p>不要怀疑自己的能力。每个人都是从零开始的，没有人天生就是专家。参与开源社区是一个学习和成长的过程，需要不断的实践和积累经验。</p></li><li><p><strong>积极参与讨论，持续学习不同技术</strong></p><p>不要害怕提出问题，无论是关于项目的具体技术还是开发过程中的挑战。同时也不要局限于一个领域。尝试学习和掌握不同编程语言、框架和工具，这可以拓宽技术视野，为项目提供有价值的洞见。</p></li></ul><hr><p>通过我的开源之旅，我积累了宝贵的经验和技能，这些不仅帮助我成长为一个更有价值的开发者，也让我深刻地了解了开源社区的力量。然而，我不仅仅是个别的参与者，我代表着 Seata 社区的一部分。Seata 作为一个正在不断成长和演变的开源项目，有着巨大的潜力，同时也面临着新的挑战。因此我要强调 Seata 社区的重要性和未来的潜力，它已经进入 Apache 软件基金会的孵化阶段，这个重要的里程碑将为 Seata 带来更广阔的发展空间。Seata 欢迎更多的开发者和贡献者的加入，让我们共同推动这个开源项目的发展，为分布式事务领域的进步贡献一份力量。</p><p>搜索钉钉群号</p><p>加入 Seata Group 开源交流群（群号：32033786）</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Dec 2023 02:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10439711</guid>
            <link>https://my.oschina.net/u/3874284/blog/10439711</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apideploy 重磅开源，在成熟 API 文档解决方案中又多了一个搅局者]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>背景</h3><p style="color:#333333; text-align:start">当前，在很多中、小型的开发团队或创业团队中，依然用着落后的方式进行着 API 接口的交互，他们写完文档来写代码，或者，写完代码来补文档，更甚者，文档全靠一张嘴，接口描述信息在 IM 中沟通飞扬，在联调的过程中前后端相互扯皮、苦不堪言。</p><p style="color:#333333; text-align:start">当然，也有很多优秀的团队，在使用较成熟的解决方案，诸如：swagger、springfox、springdoc、knife4j、apifox、eolink、smart-doc 等等。作者基于自己多年的研发经验，参考和对比了诸如上述国内外多个 API 管理工具和实现，始终觉得一款精美、高效的 API 平台工具，对开发者的意义重大。在苦苦找寻与对比下，各 API 管理工具依旧没有达到作者的期望，于是亲自下场，一怒之下写下了 Apideploy。</p><h3>设计理念</h3><p style="color:#333333; text-align:start">Apideploy 遵从以下设计理念：</p><ul><li><strong>代码即文档。</strong>API 文档应该通过代码自动生成，并能保持与代码的同步性，而不是通过手写文档来与前端、测试等进行协作；</li><li><strong>主流标准友好。</strong>文档应该支持主流的 OpenAPI 2（OAS2.0）、OpenAPI 3（OAS3.0）等协议标准，同时需要支持 HTTP、WebSocket、SSE 等协议；</li><li><strong>版本可追溯。</strong>每一次的版本迭代，可以快速查阅接口变更的明细，支持不同版本的差异对比，并能支持回滚文档版本；</li><li><strong>接口可 mock。</strong>可以直接在该产品上完成接口的测试、联调甚至接口自动化；</li><li><strong>界面要精美。</strong>友好的用户界面与交互；</li><li><strong>第三方兼容。</strong>支持导入常见的 API 协议标准文档，也支持导出常用的文档格式。</li></ul><h3>产品架构</h3><p style="color:#333333; text-align:start"><img alt="en_intro" src="https://doc.apideploy.cn/getting-started/en_intro.jpg" referrerpolicy="no-referrer"></p><p style="color:#333333; text-align:start">Apideploy 核心分为两部分：<strong>API 文档生成 SDK+API 托管与调试平台</strong>。</p><p style="color:#333333; text-align:start"><strong>API 文档生成 SDK</strong>是完全开放源码的，访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapideploy-team" target="_blank">https://github.com/apideploy-team</a><span>&nbsp;</span>可以查阅。目前仅支持 Java 语言实现，其他语言社区用户可以贡献，或自行直接通过<strong>API 托管与调试平台</strong>的 RESTFull API 进行对接。Java 语言 SDK 实现基于 javadoc 注释方式自动生成 API 文档（无代码侵入方式），也兼容了基于 swagger 的实现。具体使用请参考：</p><p style="color:#333333; text-align:start"><strong>API 托管与调试平台</strong>主要功能包括：项目管理、团队协作、权限管理、API 文档托管、文档调试、接口数据 mock、版本更新记录、版本对比、个性化文档导出、多格式文档导入等，是一个集 API 全生命周期管理的平台，非常适合团队协作。目前<strong>支持公有云与私有化部署</strong>，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.apideploy.cn%2Fgetting-started%2Fwww.apideploy.com" target="_blank">www.apideploy.com</a>是公有云的解决方案。</p><h3>文档生成原理</h3><p style="color:#333333; text-align:start">Apideploy 推崇<strong>文档即代码</strong>的设计理念，所以作者<strong>强烈推荐基于代码注释的文档生成方式</strong>，它不像<strong>swagger</strong>的实现那么笨重。</p><h4>基于代码注释生成文档</h4><p style="color:#333333; text-align:start">基于代码注释生成文档，Apideploy 的实现参考并依赖了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTongchengOpenSource%2Fsmart-doc" target="_blank">smart-doc</a>的开源代码，smart-doc 是一款基于<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fpaul-hammant%2Fqdox" target="_blank">qdox</a>优秀的 Java 文档解析工具，它很方便的实现了基于代码注释到 API 文档的过程。</p><p style="color:#333333; text-align:start">Apideploy 开源了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapideploy-team%2Fapideploy-jakarta-client" target="_blank">Java 代码注释生成文档</a>的所有代码。</p><h4>基于 Swagger / OpenAPI 的文档生成</h4><p style="color:#333333; text-align:start">在基于 Java Web 项目开发的 Swagger 实现中，目前用的比较多的开源实现是<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspringfox%2Fspringfox" target="_blank">Springfox</a>(包括国内的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.xiaominfo.com%2F" target="_blank">Knife4j</a>) 与<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspringdoc%2Fspringdoc-openapi" target="_blank">Springdoc-openapi</a>。Springfox 的用户较多，但貌似已经停止更新，已经不再支持 springboot3.0+的项目。</p><p style="color:#333333; text-align:start">Apideploy 兼容了 springfox 和 springdoc-openapi 的全部实现，所以如果之前的项目使用的是 swagger 项目，也非常方便切换到 Apideploy 进行文档托管和测试。</p><h3>API 托管与调试平台预览</h3><p style="color:#333333; text-align:start"><img src="https://i.v2ex.co/vjQiUAMZl.jpeg" referrerpolicy="no-referrer"></p><p><img height="631" src="https://oscimg.oschina.net/oscnet/up-f3b7e7b16ff2539848c29736048a80f0a60.png" width="1280" referrerpolicy="no-referrer"></p><p><img height="1916" src="https://oscimg.oschina.net/oscnet/up-12ef3871f6c01d514e945c6e367e56b6f84.png" width="3742" referrerpolicy="no-referrer"></p><p><img height="1869" src="https://oscimg.oschina.net/oscnet/up-314606b0148f12694dd771012925d45e33c.png" width="3756" referrerpolicy="no-referrer"></p><p><img height="1600" src="https://oscimg.oschina.net/oscnet/up-ad5b3c3b4d97c98ae6e693a1c749587a94f.png" width="3812" referrerpolicy="no-referrer"></p><p><img height="1893" src="https://oscimg.oschina.net/oscnet/up-e1f3e4b1e7e6abeebdab56dd886314c62ec.png" width="3840" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 15:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273213/apideploy-opensource</guid>
            <link>https://www.oschina.net/news/273213/apideploy-opensource</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WxJava 4.6.0 版本发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#1f2328; text-align:start">本次正式版本更新，主要是增加了视频号模块，已接入大部分接口；企业微信模块主要修复了一些问题，增加了部分实用的接口，针对官方最新文档对一些接口做了调整；小程序模块则主要增加了增加了 openApi 管理、发货信息管理、短剧媒资管理、小程序虚拟支付、退货组件等相关接口，优化部分代码；公众号模块主要增加获取稳定版接口调用凭据的接口；微信支付模块则主要是补充完善部分接口，新增一些字段的支持；其他模块则优化了部分接口，修复一些问题，新增了相关参数。具体更新日志如下：</p><h2>企业微信</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F2993" target="_blank">#2993</a><span>&nbsp;</span>敏感词更新接口参数根据最新官方文档进行调整</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3002" target="_blank">#3002</a><span>&nbsp;</span>修复新增外部联系人回调去重错误问题</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3016" target="_blank">#3016</a><span>&nbsp;</span>增加获取客户数据统计接待人员明细数据的接口，并修复获取企业汇总数据接口返回值问题</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3037" target="_blank">#3037</a><span>&nbsp;</span>修复第三方审批不同回调下实体缺少字段问题</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3047" target="_blank">#3047</a><span>&nbsp;</span>获取员工打卡规则接口返回值增加添加排班信息</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3055" target="_blank">#3055</a><span>&nbsp;</span>获取访问用户敏感信息接口返回值增加若干字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3059" target="_blank">#3059</a><span>&nbsp;</span>客户详情接口新增视频号相关字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3064" target="_blank">#3064</a><span>&nbsp;</span>增加获客助手相关的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3079" target="_blank">#3079</a><span>&nbsp;</span>增加提醒成员群发和停止企业群发的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3145" target="_blank">#3145</a><span>&nbsp;</span>创建企业群发接口新增 chat_id_list 和 allow_select 两个参数</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3149" target="_blank">#3149</a><span>&nbsp;</span>增加支持企业微信多账号配置的 starter</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3156" target="_blank">#3156</a><span>&nbsp;</span>优化企业微信应用参数未配置时的初始化逻辑</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3174" target="_blank">#3174</a><span>&nbsp;</span>批量获取审批单号接口请求中的筛选类型增加审批单类型属性</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3178" target="_blank">#3178</a><span>&nbsp;</span>修复会话存档反序列化接口中 uint64 相关字段定义，使用 BigInteger 类型</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3179" target="_blank">#3179</a><span>&nbsp;</span>群机器人发送消息接口中增加发送语音类型消息的方法</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3184" target="_blank">#3184</a><span>&nbsp;</span>新增第三方组件可查询获客链接的使用详情的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3185" target="_blank">#3185</a><span>&nbsp;</span>获取审批申请详情接口增加对位置控件和公式控件的支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3186" target="_blank">#3186</a><span>&nbsp;</span>增加获取用户登录身份和获取用户二次验证信息的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3187" target="_blank">#3187</a><span>&nbsp;</span>批量获取审批单号接口方法增加对新分页字段的支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3190" target="_blank">#3190</a><span>&nbsp;</span>获取客户群详情接口响应类中增加 member_version 字段，并移除过期的 state 字段</li><li>修复第三方获取访问用户身份等接口地址为最新的</li></ul><h2>公众号</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3006" target="_blank">#3006</a><span>&nbsp;</span>模板消息发送接口增加字段 client_msg_id</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3078" target="_blank">#3078</a><span>&nbsp;</span>模板消息获得模板 ID 的接口增加选用类目模板的关键词的参数</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3084" target="_blank">#3084</a><span>&nbsp;</span>增加获取稳定版接口调用凭据的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3142" target="_blank">#3142</a><span>&nbsp;</span>订阅通知下发接口返回消息 id</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3170" target="_blank">#3170</a><span>&nbsp;</span>修复 is_snapshotuser(是否为快照页模式虚拟账号) 参数位置，在 getAccessToken 接口请求时返回</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3196" target="_blank">#3196</a><span>&nbsp;</span>修复 materialImageOrVoiceDownload 接口无法正常刷新 AccessToken 的问题</li></ul><h2>小程序</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F2998" target="_blank">#2998</a><span>&nbsp;</span>增加获取稳定版接口调用凭据的接口，通过设置 WxMaConfig#useStableAccessToken 方法去开启使用稳定版接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3024" target="_blank">#3024</a><span>&nbsp;</span>发送设备消息接口请求类增加设备型号 id 字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3077" target="_blank">#3077</a><span>&nbsp;</span>增加 openApi 管理的接口支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3083" target="_blank">#3083</a><span>&nbsp;</span>增加发货信息管理相关接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3115" target="_blank">#3115</a><span>&nbsp;</span>增加短剧媒资管理相关接口支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3122" target="_blank">#3122</a><span>&nbsp;</span>增加小程序虚拟支付的相关接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3124" target="_blank">#3124</a><span>&nbsp;</span>实现查询 URL Link 的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3194" target="_blank">#3194</a><span>&nbsp;</span>优化 openApi 部分接口（getApiQuota 和 getRidInfo ）响应类的部分字段信息</li><li>代码审核状态查询接口返回增加三个参数</li><li>增加退货组件相关接口，同时绑定/解绑物流账号接口增加缺失返回值</li><li>添加获取 NFC 的小程序 scheme 接口</li></ul><h2>微信支付</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3009" target="_blank">#3009</a><span>&nbsp;</span>商家转账到零钱接口增加转账场景 ID 字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3023" target="_blank">#3023</a><span>&nbsp;</span>增加根据账户类型查询二级商户实时余额的接口，同时修复批量转账订单相关接口的问题</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3045" target="_blank">#3045</a><span>&nbsp;</span>修复分账接收方列表」姓名「字段加密功能</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3056" target="_blank">#3056</a><span>&nbsp;</span>优化支付/退款结果解析，增加对 V3 版本服务商的下单/退款支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3063" target="_blank">#3063</a><span>&nbsp;</span>增加服务商模式关闭订单的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3066" target="_blank">#3066</a><span>&nbsp;</span>增加服务商模式 V3 查询订单的接口支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3070" target="_blank">#3070</a><span>&nbsp;</span>优化服务商模式下下单接口，去掉部分重复代码</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3089" target="_blank">#3089</a><span>&nbsp;</span>新增代金券详情接口返回类增加商户单据号字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3102" target="_blank">#3102</a><span>&nbsp;</span>修复申请资金账单接口请求里的参数名称</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3103" target="_blank">#3103</a><span>&nbsp;</span>v3 发起商家转账接口的结果类增加批次状态字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3106" target="_blank">#3106</a><span>&nbsp;</span>退款结果通知里退款金额等字段类型修复</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3111" target="_blank">#3111</a><span>&nbsp;</span>分账相关接口增加子商户应用 ID 字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3128" target="_blank">#3128</a><span>&nbsp;</span>提供扩展 httpclientbuilder 的能力</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3136" target="_blank">#3136</a><span>&nbsp;</span>根据最新官方文档补全部分接口的字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3138" target="_blank">#3138</a><span>&nbsp;</span>增加接查询结算账户修改申请状态的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3154" target="_blank">#3154</a><span>&nbsp;</span>修复按日下载提现异常文件接口响应异常</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3162" target="_blank">#3162</a><span>&nbsp;</span>接入服务商微信支付分签约计划相关接口功能</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3169" target="_blank">#3169</a><span>&nbsp;</span>新增商户开户意愿确认相关接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3171" target="_blank">#3171</a><span>&nbsp;</span>修改微信支付分签约计划部分字段类型</li><li>二级商户进件申请接口请求参数里的金融机构许可证图片字段修改为正确的类型</li><li>优化复用订单通知 SignatureHeader</li><li>分账模块解冻剩余资金接口返回类增加几个字段</li><li>增加微信支付服务商 V3 版本说明</li><li>增加服务商查询单笔退款的 v3 接口</li><li>增加服务商模式下分账通知的解析方法</li><li>新增 v3 分账查询接口，同时修改分账查询结果接口增加分账明细单号字段 detail_id</li><li>服务商支付通知接口增加若干字段</li><li>退款查询接口的结果类增加退款总金额、代金券退款总金额、用户退款金额等字段</li><li>重构分账相关接口，重命名接口方法和请求实体，合并分账 v2、v3 实现类，方便同时使用</li><li>优化 WxPayPartnerOrderQueryV3Result 类中 Payer 字段</li><li>优化微信支付异常处理代码，兼容混乱且变态的微信官方字段命名习惯</li></ul><h2>视频号</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F2991" target="_blank">#2991</a><span>&nbsp;</span>增加视频号模块，实现视频号大部分相关接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3167" target="_blank">#3167</a><span>&nbsp;</span>视频号小店分享员订单接口增加几个返回参数，并修复 openid 参数类型</li><li>增加视频号小店的同意和拒绝修改地址的接口 !114</li><li>视频号小店获取订单详情接口增加部分字段 !113</li></ul><h2>开放平台</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3040" target="_blank">#3040</a><span>&nbsp;</span>小程序管理部分接口返回结果类增加参数，同时增加新的接口 (查询小程序线上代码的可见状态，获取小程序业务域名校验文件)</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3116" target="_blank">#3116</a><span>&nbsp;</span>云开发/云托管环境共享接口增加请求环境源参数</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3182" target="_blank">#3182</a><span>&nbsp;</span>设置服务器域名接口方法增加 tcp 合法域名和 udp 合法域名的参数</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3189" target="_blank">#3189</a><span>&nbsp;</span>增加试用小程序快速认证接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3198" target="_blank">#3198</a><span>&nbsp;</span>修改 H5 版授权链接为新版链接</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3083" target="_blank">#3083</a><span>&nbsp;</span>增加第三方平台的购物订单管理等接口</li><li>修复试用小程序快速认证字段类型错误</li></ul><h2>其他公共问题</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F2999" target="_blank">#2999</a><span>&nbsp;</span>修复异步消息路由报错的问题</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3005" target="_blank">#3005</a><span>&nbsp;</span>提供更新 access_token 的消费接口</li><li>修复 AppId 和 appid 同时存在导致 lombok 生成代码异常的问题</li><li>修复使用 java.nio.file.Files 打开公私钥文件无法释放句柄的问题</li><li>兼容 SpringBoot3 中使用的 Jedis4 版本</li><li>提供方法方便第三方类使用 XStreamTransformer 进行序列化, 以及支持 XStream 1.4.18 以上增加安全许可</li></ul><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 14:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273211/wxjava-4-6-0-released</guid>
            <link>https://www.oschina.net/news/273211/wxjava-4-6-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[深耕开发者生态，openKylin 入选 2023 中国技术品牌影响力企业榜]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>2023 年 12 月 26 日，中国技术先锋年度评选&nbsp;| 2023 中国技术品牌影响力企业榜单正式发布。作为中国领先的新一代开发者社区，SegmentFault 思否依托数百万开发者用户数据分析，各科技企业在国内技术领域的行为及影响力指标，最终评选出 30 家上榜企业。<strong>openKylin 作为中国领先的开源操作系统根社区，凭借在技术领域和开发者生态领域的持续贡献，入选 30 强之列。</strong></span></p><p style="text-align:center"><img alt="" height="3508" src="https://oscimg.oschina.net/oscnet/up-f71b87d34c96069fbcb15077685dcb8cfdf.png" width="2481" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>相信开发者的力量，一直以来 openKylin 社区都坚持大力推动开发者生态建设。2023 年，openKylin 社区曾组织和参与顶级技术大会、开发者大赛、技术沙龙</span><span>等活动</span><span><strong>70+</strong>场，以领先技术回馈社区。截至目前，openKylin 已累计发布<strong>6</strong>个社区版本，下载量<strong>100 万+</strong>；汇聚<strong>400+</strong>社区会员<strong>、5500+</strong>开发者加入社区，并累计成立<strong>94</strong>个 SIG 组开展技术研究与创新，<span>和开发者共同成长。</span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>未来，openKylin 也将保持初心，加强生态建设，服务广大开发者，为营造良好开源生态和技术发展持续努力，也期待越来越多的开发者参与进来，为建设开源、贡献开源添砖加瓦！&nbsp;</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span style="color:#7f7f7f">附：《2023 中国技术品牌影响力企业》</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f8de216bffebbb3744628f4612997a427f.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>openKylin（开放麒麟）社区旨在以「共创」为核心，在开源、自愿、平等、协作的基础上，通过开源、开放的方式与企业构建合作伙伴生态体系，共同打造桌面操作系统顶级社区，推动 Linux 开源技术及其软硬件生态繁荣发展。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff">社区理事成员单位包括麒麟软件、普华基础软件、中科方德、麒麟信安、凝思软件、一铭软件、中兴新支点、元心科技、中国电科 32 所、技德系统、北京麟卓、先进操作系统创新中心、飞腾、兆芯、龙芯中科、景美、京东科技、玄铁、申泰信息、海光等 21 家产业同仁和行业机构。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273154</guid>
            <link>https://www.oschina.net/news/273154</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[养乐多公司确认 95 G 数据被泄露]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一个自称为 DragonForce 的组织，将澳大利亚养乐多公司 (Yakult Australia)&nbsp;的 95.19 GB 数据进行了公开泄露。<span style="background-color:#ffffff">Yakult Australia&nbsp;</span>方面也证实了此次网络攻击的真实性，并表示<span style="background-color:#ffffff">该公司的澳大利亚和新西兰 IT 系统均受到了影响。</span></span></p><p><span style="color:#000000">「12 月 15 日上午，我们首次意识到发生了一起网络事件。我们还不能确认事件的严重程度。我们正在与网络安全专家合作，紧急调查这一事件。」</span></p><p><span style="color:#000000">目前，该公司还无法确认事件究竟是如何发生的。"我们的调查正在进行中。一旦获得信息，我们将提供进一步的更新信息。"</span></p><p><span style="color:#000000"><img alt="" height="355" src="https://oscimg.oschina.net/oscnet/up-5616ae7257ff54615cc8746288f71f8244c.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="424" src="https://oscimg.oschina.net/oscnet/up-ddf22101150476fbae2414443ea235cfa22.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">DragonForce 方称，所泄露的数据包含公司数据库、合同、护照等。科技网站&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bleepingcomputer.com%2Fnews%2Fsecurity%2Fyakult-australia-confirms-cyber-incident-after-95-gb-data-leak%2F" target="_blank">BleepingComputer</a> 对泄露的一小部分数据进行了分析，发现其中似乎包含一些商业文件、电子表格、澳大利亚养乐多公司的信贷申请、员工记录以及护照等身份证件的复印件。</span></p><p><span style="color:#000000">DragonForce （又名 DragonLeaks）打出的口号是"companies that refused to cooperate"。这表明其首要目的是进行钱财勒索，如果勒索不成，就会公开泄露窃取的资产和数据。目前有关"DragonForce"的信息还不多，迄今为止，该组织已在其泄密网站上列出了 20 名受害者。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 08:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273141/yakult-australia-95-gb-data-leak</guid>
            <link>https://www.oschina.net/news/273141/yakult-australia-95-gb-data-leak</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Julia 1.10 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>经过 3 个 beta 版本和 3 次候选发布版本后，Julia 1.10 现已正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjulialang.org%2Fblog%2F2023%2F12%2Fjulia-1.10-highlights%2F" target="_blank">发布</a>。<span style="background-color:#ffffff; color:#333333">这是一种通用的高性能语言，在科学计算和数值分析中较为流行。</span></p><p><span style="background-color:#ffffff; color:#333333">新版本的一些亮点内容如下：</span></p><ul><li><h4><strong>用 Julia 编写的新解析器</strong></h4></li></ul><p>将之前用 Scheme 编写的默认解析器替换为用 Julia 编写的新解析器，称为&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJuliaLang%2FJuliaSyntax.jl%2F" target="_blank">JuliaSyntax.jl</a>。此更改引入了多项改进：<strong style="color:#212529">提高解析性能、详细的语法错误消息、高级源代码映射。</strong></p><ul><li><h4><strong>包加载时间改进</strong></h4></li></ul><p>这项工作主要是通过分析和改进 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJuliaComputing%2FOmniPackage.jl" target="_blank">OmniPackage.jl</a> 的加载时间来完成的，OmniPackage.jl 是一个人造的"mega package"，其唯一目的就是依赖和加载大量的依赖项。<span style="background-color:#ffffff; color:#212529">总的来说，OmniPackage.jl 最终会加载大约 650 个软件包，其中许多软件包都非常大。</span></p><pre style="margin-left:auto; margin-right:auto; text-align:left"><code class="language-julia"><em># Julia 1.9:</em><span style="color:#008080">48.041773</span> seconds (<span style="color:#008080">102.17</span> M allocations: <span style="color:#008080">6.522</span> GiB, <span style="color:#008080">5.82</span>% gc time, <span style="color:#008080">1.21</span>% compilation time: <span style="color:#008080">86</span>% of which was recompilation)

<em># Julia 1.10:</em><span style="color:#008080">19.125309</span> seconds (<span style="color:#008080">30.38</span> M allocations: <span style="color:#008080">2.011</span> GiB, <span style="color:#008080">11.54</span>% gc time, <span style="color:#008080">10.38</span>% compilation time: <span style="color:#008080">61</span>% of which was recompilation)</code></pre><ul><li><h4><strong>堆栈跟踪渲染的改进</strong></h4></li></ul><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>随着 Julia 1.10 的改进，堆栈跟踪现在更加简洁：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="margin-left:auto; margin-right:auto; text-align:left"><span><span style="background-color:#fafafa"><span><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span><span><code class="language-julia">Stacktrace: [<span><span><span style="color:#008080">1</span></span></span>] error() @ Base ./error.jl:<span><span><span style="color:#008080">44</span></span></span> [<span><span><span style="color:#008080">2</span></span></span>] f(g::<span><span><span style="color:#0086b3">Function</span></span></span>, a::<span><span><span style="color:#0086b3">Int64</span></span></span>; kw::<span><span><span style="color:#b14e8f"><strong>@Kwargs</strong></span></span></span>{}) @ Main ./REPL[<span><span><span style="color:#008080">1</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span> [<span><span><span style="color:#008080">3</span></span></span>] f(a::<span><span><span style="color:#0086b3">Int64</span></span></span>) @ Main ./REPL[<span><span><span style="color:#008080">2</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span> [<span><span><span style="color:#008080">4</span></span></span>] top-level scope @ REPL[<span><span><span style="color:#008080">3</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span></code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此更新导致堆栈跟踪更短且更易于阅读。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>并行垃圾收集</strong></h4></li></ul><p>在 1.10 版中对垃圾收集器（GC）的标记阶段进行了并行化处理，并引入了与应用线程同时运行部分清扫阶段的可能性。这大大加快了多线程分配繁重工作负载的垃圾回收时间。</p><p>多线程 GC 可通过命令行选项 --gcthreads=M 启用，该选项可指定在 GC 的标记阶段使用的线程数。也可以通过 --gcthreads=M,1 启用上述并发页面扫描，这意味着在 GC 标记阶段将使用 M 个线程，而一个 GC 线程负责与应用程序同时执行部分扫描阶段。</p><p>默认情况下，GC 线程数设置为计算线程数（--threads）的一半。</p><ul><li><h4><strong>Tracy 和英特尔 VTune ITTAPI 分析集成</strong></h4></li></ul><p><img alt="" height="395" src="https://oscimg.oschina.net/oscnet/up-920a63319481f6cd753b044f04fc799eaaf.png" width="500" referrerpolicy="no-referrer"></p><ul><li><h4><strong>升级到 LLVM 15</strong></h4></li></ul><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Julia 1.10 版本使用 LLVM 15。这带来了新处理器和一般现代化更新的配置文件。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>特别值得注意的是新的 pass-manager 的迁移，有望改进编译时间。LLVM 15 改进了对 x86 上 Float16 的支持。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>Linux AArch64 稳定性改进</strong></h4></li></ul><p>升级到 LLVM 15 后，可以在 Linux 的 aarch64 CPU 上使用 JITLink。这种 linker 最初是在 Julia v1.8 中引入的，仅适用于 Apple Silicon（macOS 上的 aarch64 CPU），它解决了在该平台上影响 Julia 的频繁 segmentation fault 问题。不过，由于 LLVM 内存管理器中的一个错误，非重要工作负载可能会生成过多的内存映射 (mmap)，从而超出允许映射的上限。如果遇到这个问题，可阅读有关如何<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.julialang.org%2Fen%2Fv1.10.0%2Fdevdocs%2Fbuild%2Farm%2F%23AArch64-%28ARMv8%29" target="_blank">更改<code>mmap</code>限制</a>的文档。</p><ul><li><h4><strong>system images 和 package images 的并行本机代码生成</strong></h4></li></ul><p>通过在 LLVM 编译阶段 exposing 并行性，加速了&nbsp;Ahead-of-time compilation (AOT)。现在，编译工作不再是编译一个大型的整体编译单元，而是分成多个小块。这种多线程方式加快了 system images 和大型 package images 的编译速度，从而缩短了其预编译时间。</p><p>可以通过环境变量 JULIA_IMAGE_THREADS=n 来控制并行的使用量。此外，由于 Windows 本地 COFF 二进制文件的限制，在 Windows 上编译大型 images 时，多线程将被禁用。</p><ul><li><h4><strong>避免并行预编译期间&nbsp;races</strong></h4></li></ul><p>&nbsp;</p><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>1.10 引入了一种「pidfile」（process id file）锁定机制，该机制可确保只有一个 Julia 进程能够预编译给定的缓存文件，而缓存文件是预编译过程中针对特定 Julia 设置的。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>这种安排既有利于可能同时运行多个进程的本地用户，也有利于可能在同一共享仓库中运行数百个工作程序的高性能计算用户。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>使用时并行预编译</strong></h4></li></ul><p>&nbsp;虽然 Pkg 会在安装后自动并行预编译依赖包，但在使用/导入时进行的预编译以前是串行的，每次预编译一个依赖包。</p><p>当用户开发一个软件包时，最终可能会在加载时进行预编译，而且如果开发的软件包中的代码变更深入到正在加载的软件包的依赖关系树中，串行预编译过程可能会特别慢。</p><p>1.10 引入了加载时的并行预编译，以捕捉这些情况并加快预编译速度。</p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjulialang.org%2Fblog%2F2023%2F12%2Fjulia-1.10-highlights%2F" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 07:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273118/julia-1-10-released</guid>
            <link>https://www.oschina.net/news/273118/julia-1-10-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Golang 通用代码生成器仙童发布 2.4.0 电音仙女尝鲜版二，改进三大部分生成功能群]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Golang 通用代码生成器仙童发布 2.4.0 电音仙女尝鲜版二，改进三大部分生成功能群</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童已发布 2.4.0 电音仙女尝鲜版二及其介绍视频。尝鲜版二改进了三大部分生成功能群。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">视频请见：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Q64y1H75r%2F" target="_blank">https://www.bilibili.com/video/BV1Q64y1H75r/</a></p><p>Golang 通用代码生成器仙童已发布 2.4.0 电音仙女尝鲜版一介绍视频请见：</p><p>正常模式：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fw411V77i%2F" target="_blank">https://www.bilibili.com/video/BV1fw411V77i/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">哑数据模式：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1nu4y1K7sz%2F" target="_blank">https://www.bilibili.com/video/BV1nu4y1K7sz/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">电音仙女版本支持日期和日期时间。支持三大部分生成功能群。支持枚举。支持哑数据模式。支持用户管理自己的资料和密码。技术状态和最新版的 Rust 通用代码生成器红莲的技术状态一致。非常便利大家的使用。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">代码生成器项目地址：</span><a href="https://gitee.com/jerryshensjf/Fairchild">https://gitee.com/jerryshensjf/Fairchild</a><br><span style="background-color:#ffffff; color:#333333">二进制发布包下载地址：</span><a href="https://gitee.com/jerryshensjf/Fairchild/attach_files">https://gitee.com/jerryshensjf/Fairchild/attach_files</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h1>Go 语言通用代码生成器：仙童</h1><h3>简介</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器：仙童</p><h3>百度话题</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">#通用代码生成器#</p><h3>版本更新</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童已发布 2.4.0 电音仙女（TechnoFairy）尝鲜版二，改进了三大部分生成功能群。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童已发布 2.4.0 电音仙女（TechnoFairy）尝鲜版一，支持日期和日期时间。支持三大部分生成功能群。支持枚举。支持哑数据模式。支持用户管理自己的资料和密码。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童 Beta 7 版。完善支持 Oracle 数据库，并有错误修正。可以从源码编译生成构建。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童 Beta6 版，发布最新介绍视频，支持从源码构建代码生成器。您只需下载源码，即可以 mvn install 编译构建 Go 语言通用代码生成器仙童。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器：仙童 Beta5 版。彻底修复弹性登录模块，修复了注册，修改密码，管理员新增用户时使用过时加密算法问题。更多测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器：仙童 Beta3 版。修复几处错误。包括登录权限问题和图形报表 UI 的语言问题。更多测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">GO 语言通用代码生成器仙童已发布 Beta2 版，支持 Rust 语言兼容性，即可以使用 Rust 通用代码生成器莲花的 SGS2 模板直接生成 Go 语言代码生成物。同时支持 Java 语言兼容性。即支持 Java 通用代码生成器的模板直接生成 Go 语言代码生成物。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童 Beta 版，此版本修复了 Excelize 组件 API 变化引起的编译错误，另有文档更新和更多检查。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童尝鲜版十二。支持 PDF 格式数据导出。在尝鲜版十一基础上有增强和修错。流畅支持模板向导代码生成。支持三大变形功能群，支持四种数据库。已完成所有功能规划，下一个版本即可进入 Beta 阶段。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十一。在尝鲜版十基础上有增强和修错，并支持数据库表与字段的中文注释和兼容所有 java 通用代码生成器的 SGS2 模板，直接生成 go 语言后端和 Vue 前端，并自动格式化 java 语言 SGS2 模板至 go 语言模板。支持三大变形功能群，支持四种数据库，支持 Excel 数据导出。支持图形报表和复杂版面，支持弹性登录模块。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十是第一个稳定版本。功能基本完备，所有示例通过检测，初步完整测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版九在尝鲜版八基础上有功能增强和缺陷修复。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版八初步支持 SimpleAuth 弹性登录界面。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 7 是一个错误修复版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 5 支持前端和后端的复杂版面和图形报表功能</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 4 支持 Vue 和 ElementUI 的基于 Node.js 的独立前端。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 3 进行了广泛的测试和修错。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版２新增对 Oracle 数据库的支持。</p><h3>架构</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">基于 Java 通用代码生成器：光的架构。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">生成的代码基于 go 语言，使用 gin 作为 web 框架。目前支持 MariaDB,MySQL,PostgreSQL 和 Oracle 四种数据库。支持生成 Vue 和 ElementUI 的基于 Node.js 的独立前端。支持 Excel,PDF 两种数据导出格式。</p><h3>开发测试环境</h3><ul><li>jdk 17</li><li>Apache Tomcat 9</li><li>Node.js 14</li><li>golang 1.19</li><li>MariaDB 15.1</li><li>MySQL 8</li><li>PostgreSQL 14</li><li>Oracle 11</li></ul><h3>B 站介绍视频</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童 2.4.0 电音仙女尝鲜版二介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Q64y1H75r%2F">https://www.bilibili.com/video/BV1Q64y1H75r/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代码生成器仙童 2.4.0 电音仙女尝鲜版一介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fw411V77i%2F">https://www.bilibili.com/video/BV1fw411V77i/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1nu4y1K7sz%2F">https://www.bilibili.com/video/BV1nu4y1K7sz/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童已发布 Beta7 版视频,请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1uM4y1774F%2F">https://www.bilibili.com/video/BV1uM4y1774F/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 语言通用代码生成器仙童 Beta6 版视频,请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Jg4y1473X%2F">https://www.bilibili.com/video/BV1Jg4y1473X/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">​Go 语言通用代码生成器仙童已发布 Beta5 版，发布最新介绍视频，彻底修复弹性登录模块。修复了注册，修改密码，管理员新增用户时使用过时加密算法问题。更多测试。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xg4y1E7FA%2F">https://www.bilibili.com/video/BV1xg4y1E7FA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">​Beta3 版，请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1g84y1n73B%2F">https://www.bilibili.com/video/BV1g84y1n73B/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta 版两个视频的合集，请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV13D4y1G7L4%2F">https://www.bilibili.com/video/BV13D4y1G7L4/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta2 版：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV13M411A7nH%2F">https://www.bilibili.com/video/BV13M411A7nH/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta 版：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV19j411T7wx%2F">https://www.bilibili.com/video/BV19j411T7wx/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十二：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV14K411i7DM%2F">https://www.bilibili.com/video/BV14K411i7DM/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十一：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1ce411P7qU%2F">https://www.bilibili.com/video/BV1ce411P7qU/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版九：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1a5411R7Zt%2F">https://www.bilibili.com/video/BV1a5411R7Zt/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1pR4y1w7aB%2F">https://www.bilibili.com/video/BV1pR4y1w7aB/</a></p><h3>项目图片</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1104/210826_16fb1ca2_1203742.jpeg" referrerpolicy="no-referrer"></p><h3>最新大版本号</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">正在研发的最新大版本号是仙童 2.4.0 电音仙女　TechnoFairy 短名 TF。对标 java 通用代码生成器光 2.4.0 电音之王和 Rust 通用代码生成器红莲。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/tf2.jpg" referrerpolicy="no-referrer"></p><h3>百度话题</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">＃通用代码生成器＃</p><h3>代码生成器截图</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代码生成器正在研发中，Beta7 版已发布，这是一个稳定版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1112/202857_c7a40dc0_1203742.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1112/202911_c2b9a341_1203742.png" referrerpolicy="no-referrer"></p><h3>电音仙女尝鲜版二下载</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">下载地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/Fairchild/attach_files">https://gitee.com/jerryshensjf/Fairchild/attach_files</a></p><h3>仙童的安装运行</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童是使用 Java 语言写成的代码生成器。运行仙童您需要装好 Java8 和安装好 Tomcat9 或 8.5 应用服务器。并把仙童的 war 包部署在 Tomcat 的 webapps 目录下。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代码生成物的运行还需要安装好 Go 语言开发环境，您要使用 go mod 管理依赖，并把代码生成物解压在 go 语言工作空间的 src 文件夹的一级子目录下。还需要对应的数据库服务器运行代码生成物的建库 sql 脚本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">前端代码生成物的运行需要装好 node.js 运行环境并安装 js 依赖库。</p><h3>Vue 独立前端截图</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/Fc_login.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_list.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_img.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_mtm2.png" referrerpolicy="no-referrer"></p><h3>代码生成物截图</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1122/151921_f4271962_1203742.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1122/151935_cf6c7223_1203742.png" referrerpolicy="no-referrer"></p><h3>源码编译用户指南</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通用代码生成器已经支持自己编译源码，我已把原来缺的前端代码生成器的 jar 包上传。支持大家自行编译源码。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">需要注意的是，现在我的开发平台是 Fedora 37 上的 openjdk 17。所以大家编译源码最好使用 openjdk17。编译好的 war 包运行在 apache tomcat 9.0 上。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">已有 jdk8 的用户报告默认下载的代码生成器 war 包在他的平台上无法运行。您如果遇到类似问题请报告。我的电子邮件是：<a href="https://www.oschina.net/action/GoToLink?url=mailto%3Ajerry_shen_sjf%40qq.com" target="_blank">jerry_shen_sjf@qq.com</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">附 openjdk 17 下载地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fjdk.java.net%2Fjava-se-ri%2F17">https://jdk.java.net/java-se-ri/17</a></p><h3>使用前端功能的注意事项</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">由于图片文件比较大，原来前端使用 cnpm instll 安装类型，npm run dev 运行有所改动，改为先使用 npm install --registry=<a href="https://gitee.com/link?target=https%3A%2F%2Fregistry.npm.taobao.org%25E5%25AE%2589%25E8%25A3%2585%25E7%25B1%25BB%25E5%25BA%2593%25EF%25BC%258C%25E5%2587%25BA%25E9%2594%2599%25E5%2590%258E%25E4%25BD%25BF%25E7%2594%25A8cnpm">https://registry.npm.taobao.org 安装类库，出错后使用 cnpm</a><span>&nbsp;</span>install 安装类库， 使用 node --max-http-header-size=1000000 ./node_modules/.bin/webpack-dev-server --inline --progress --config build/webpack.dev.conf.js　 运行系统。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">您也可以从安装好的本系列代码生成器的前端项目中拷贝 node_modules 目录，即可运行前端。</p><h4>node-sass 不兼容的解决办法</h4><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">办法一：</p><div><div><pre><span>npm uninstall node-sass</span><span>npm install sass-loader</span><span>npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">办法二：</p><div><div><pre><span>npm uninstall sass-loader node-sass //卸载</span><span>npm install sass-loader@7.3.1 node-sass@4.14.1 --save-dev //安装对应的版本</span></pre><div>
   &nbsp;
  </div></div></div><h3>动词算子式代码生成器的应用场景</h3><ol><li>快速原型：项目或演示场景使用。可以生成具有关系型数据库后端，使用 MyBatis 的数据库后端和 Vue 和 ElementUI 前端。</li><li>项目前期：如果项目和动词算子式代码生成器兼容，可以使用动词算子式代码生成器执行项目前期的自动化生成。</li></ol><h3>源码研读者注意事项</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">无垠式代码生成器第一个完整版本源码，有兴趣可以抄写一下：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5">https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">相关技术视频：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fX4y1u7Bn%2F">https://www.bilibili.com/video/BV1fX4y1u7Bn/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1rv41187qY%2F">https://www.bilibili.com/video/BV1rv41187qY/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xv41187cA%2F">https://www.bilibili.com/video/BV1xv41187cA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1t64y1v7WA%2F">https://www.bilibili.com/video/BV1t64y1v7WA/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273087/fairchild-2-4-0-released</guid>
            <link>https://www.oschina.net/news/273087/fairchild-2-4-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中国开源开发者报告》正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center">《2023 中国开源开发者报告》正式发布。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-acb8a37b712e865f5503ef42f50d1364d40.png" referrerpolicy="no-referrer"></p><p>此报告由开源中国与 Gitee 发布，整体分为三章，分别是：</p><ul><li><p>第一章《开源开发者事件回顾》</p></li><li><p>第二章《2023 LLM 技术报告》</p></li><li><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中国开发者开源新动向》</p></li></ul><p>&nbsp;</p><p>毫无疑问，开源开发者圈子来看，2023 年是大模型 LLM 年、生成式 AI GenAI 年。</p><p>LLM 领域大放异彩，此报告浓墨重彩地在《2023 LLM 技术报告》中梳理了 2023 年 LLM 的技术行情。报告整体围绕 LLM Tech Map 梳理逻辑来展开，从基础设施、大模型、Agent、AI 编程、工具和平台，以及算力几个方面，为开发者整理了当前 LLM 中最为热门和硬核的技术领域以及相关的软件产品和开源项目。</p><p style="text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-8ed4d8f6c27fc4df42c56ed8660ba9ec23b.png" referrerpolicy="no-referrer"></p><p><strong>《2023 LLM 技术报告》详情可查看（这是子报告）：</strong><br><strong><a href="https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf</a></strong></p><p>&nbsp;</p><p>除了 LLM，开源开发者圈当然还有更多高亮事件，此次年度报告中整理成了另一篇章《开源开发者事件回顾》，这一篇章梳理成了 9 个大块：</p><ul><li><p>【AIGC】回顾 2023 大语言模型 LLM 元年的重磅事件。</p></li><li><p><span style="color:#27ae60"><strong>【1024 黄金眼】关注 IT 相关民生事件，以老百姓的眼睛看 IT 圈，和开发者零距离接触。</strong></span></p></li><li><p>【项目停更】到了该说「再见」的时候了，江湖有缘再见。</p></li><li><p><span style="color:#27ae60"><strong>【生产事故】冥场面！速来围观 2023 十大生产事故「名场面」。</strong></span></p></li><li><p>【开源治理】开源健康发展必不可少的一环。</p></li><li><p><span style="color:#27ae60"><strong>【硬核发版】最硬核、最极客的年度发版汇总！</strong></span></p></li><li><p>【热门话题】回顾 2023 年度热门开发者事件！</p></li><li><p><span style="color:#27ae60"><strong>【重磅官宣】2023 年度开源官宣。</strong></span></p></li><li><p>【R.I.P.】谨以此篇纪念今年离我们而去的行业巨擘。</p></li></ul><p>这些事件，作为圈内人的你还有印象吗？</p><p>&nbsp;</p><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中国开发者开源新动向》中，采用 Gitee 与 OSS Compass 作为数据来源，试图通过数据来反映 2023 年开源开发者圈子的相关情况。亮点数据：</p><ul><li><p>TypeScript 是增长最快的编程语言，增长率达到 49.04%</p></li><li><p>MulanPSL-2.0 在「2023 年使用增长率最快的开源许可证」中排行第二，增长率为 18.34%</p></li><li><p>较为活跃的社区代表： OpenHarmony、openEuler 与 MindSpore</p></li></ul><p>&nbsp;</p><p><strong><span style="background-color:#e67e22">详情请查看完整报告：</span><br><a href="https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273070/china-open-source-2023-annual-report</guid>
            <link>https://www.oschina.net/news/273070/china-open-source-2023-annual-report</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度 CTO 王海峰：文心一言用户规模破 1 亿]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><span><span><span>「文心一言用户规模突破</span></span></span><span><span><span>1</span></span></span><span><span><span>亿。」1</span></span></span><span><span><span>2 月 28 日，</span></span></span><span><span><span>百度首席技术官</span></span></span><span><span><span>、深度学习技术及应用国家工程</span></span></span><span><span><span>研究中心</span></span></span><span><span><span>主任</span></span></span><span><span><span>王海峰在第十届</span></span></span><span><span><span>WAVE SUMMIT 深度学习开发者</span></span></span><span><span><span>大</span></span></span><span><span><span>会</span></span></span><span><span><span>上宣布。会上，王海峰以《文心加飞桨，翩然赴星河》为题作了主旨演讲，分享了飞桨和文心的最新成果。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="284" src="https://static.oschina.net/uploads/space/2023/1228/192946_d8IJ_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><strong><span><span><span><strong>飞桨开发者已达 1</strong></span></span></span></strong><strong><span><span><span><strong>070</strong></span></span></span></strong><strong><span><span><span><strong>万</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span>WAVE SUMMIT 深度学习开发者大会</span></span></span><span><span><span>始于</span></span></span><span><span><span>2019 年 4 月，每年两次与开发者相聚，如今</span></span></span><span><span><span>已是</span></span></span><span><span><span>五载十届</span></span></span><span><span><span>。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>回顾五年</span></span></span><span><span><span>，</span></span></span><span><span><span>大会一路</span></span></span><span><span><span>见证了</span></span></span><span><span><span>百度对人工智能技术和产业趋势的前瞻判断，指引了技术创新和产业实践的方向。2</span></span></span><span><span><span>019</span></span></span><span><span><span>年王海峰在</span></span></span><span><span><span>首届大会上</span></span></span><span><span><span>提出，深度学习框架是智能时代的操作系统。深度学习的通用性特点，以及深度学习框架及平台的发展，推动人工智能标准化、自动化和模块化，进入工业大生产阶段。2</span></span></span><span><span><span>020</span></span></span><span><span><span>年，王海峰提出了打造 AI 新型基础设施，云智一体加速产业智能化，将 AI 大生产平台升级为云智一体的新型基础设施，为产业智能化奠定坚实的基础。2</span></span></span><span><span><span>021</span></span></span><span><span><span>年，王海峰表示，人工智能呈现出「融合创新」和「降低门槛」的特点：一方面，AI 技术及产业的融合创新越来越多；另一方面，虽然 AI 技术越来越复杂，但 A</span></span></span><span><span><span>I</span></span></span><span><span><span>开发与应用的门槛却越来越低。2</span></span></span><span><span><span>022</span></span></span><span><span><span>年，王海峰进一步提出，深度学习平台加上大模型，贯通了从硬件适配、模型训练、推理部署，到场景应用的 AI 全产业链，夯实了产业智能化基座。今年，大语言模型的出现，为通用人工智能带来曙光。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span>五年来，在持续技术创新和赋能产业的发展历程中，飞桨自身也在不断升级，从深度学习框架，到平台生态，发展成为技术领先、功能丰富的产业级深度学习开源开放平台。飞桨集核心框架、基础模型库、开发套件、工具组件，以及助力开发者成长的星河社区于一体，具有动静统一的深度学习框架、端到端自适应大规模分布式训练、云边端全场景高性能推理等关键核心技术。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>飞桨生态愈加繁荣，</span></span></span><span><span><span>2019 年，凝聚在飞桨平台的开发者规模 150 万，到今年 8 月的 Wave Summit，已经达到 800 万，服务的企业数量、基于飞桨创建的模型数量，也都高速增长</span></span></span><span><span><span>。王海峰现场公布了飞桨生态最新成果，截至 2</span></span></span><span><span><span>023</span></span></span><span><span><span>年 1</span></span></span><span><span><span>2</span></span></span><span><span><span>月底，飞桨已凝聚</span></span></span><span><span><span>1070</span></span></span><span><span><span>万开发者，服务 2</span></span></span><span><span><span>3.5</span></span></span><span><span><span>万家企事业单位，基于飞桨创建了</span></span></span><span><span><span>86</span></span></span><span><span><span>万个模型。</span></span></span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><span><strong><span><span><span><strong>文心一言用户规模破亿，日提问量快速增长</strong></span></span></span></strong></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>据了解，百度自</span></span></span><span><span><span>2019</span></span></span><span><span><span>年起深耕预训练模型研发，发布了文心大模型 1</span></span></span><span><span><span>.0</span></span></span><span><span><span>。经过近四年积累，百度于今年 3 月在全球科技大厂中率先发布了知识增强大语言模型文心一言。1</span></span></span><span><span><span>0</span></span></span><span><span><span>月，文心一言的基础模型升级到 4</span></span></span><span><span><span>.0</span></span></span><span><span><span>，理解、生成、逻辑和记忆四大人工智能基础能力全面提升。文心大模型</span></span></span><span><span><span>4.0</span></span></span><span><span><span>过去两个多月整体效果又提升了</span></span></span><span><span><span>32%</span></span></span><span><span><span>。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img height="283" src="https://static.oschina.net/uploads/space/2023/1228/193026_HXnt_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>王海峰现场披露，文心一言用户规模已突破</span></span></span><span><span><span>1</span></span></span><span><span><span>亿，自 8 月 3</span></span></span><span><span><span>1</span></span></span><span><span><span>日</span></span></span><span><span><span>获准开放对公众提供服务</span></span></span><span><span><span>以来，文心一言的用户提问量一路上扬，基本与文心大模型的效果提升同步。越来越多的用户在信任和使用文心一言。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>王海峰最后表示：「</span></span></span><span><span><span>五</span></span></span><span><span><span>载</span></span></span><span><span><span>十届，</span></span></span><span><span><span>我们与所有开发者一起，踔厉奋发，笃行不怠。愿继续与所有开发者携手并肩，在飞桨和文心的支持下，共赴通用人工智能的星辰大海！」</span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 11:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273184</guid>
            <link>https://www.oschina.net/news/273184</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[广电运通加入 openKylin，助力社区创新技术发展！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>近日，广电运通集团股份有限公司（以下简称」广电运通「）签署了 openKylin 社区 CLA（Contributor License Agreement 贡献者许可协议），正式加入 openKylin 开源社区。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-cab724551f7e2a4ba37a2d71058d9f83c08.png" referrerpolicy="no-referrer"></p><p><span>广电运通创立于 1999 年，隶属于广州无线电集团，是国有控股的高科技上市企业，主营业务覆盖智能金融、公共安全、智能交通、数字政府、大文旅、新零售及智慧教育等领域，为全球客户提供具有竞争力的智能终端、运营服务及大数据解决方案。</span></p><p><span>广电运通已连续 15 年位列智能金融设备市场第一，是国内最大的金融智能自助设备供应商和服务商，旗下信创软硬件产品已在各大金融机构广泛应用和验证，持续为金融信创繁荣发展输入源源不断的动能。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e6b2fb1b3ecd1366d41e1da581a52ad6d78.png" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>加入 openKylin 社区后，广电运通将充分发挥自身在金融科技领域的技术和资源优势，联合上下游合作伙伴，建立互利共赢的良性循环，与社区在金融智能终端技术迁移等方面开展合作，丰富产业生态，助力创新技术发展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273155</guid>
            <link>https://www.oschina.net/news/273155</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国信通院发布「方升」大模型基准测试体系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 24 日，中国信息通信研究院（简称「中国信通院」）发布「方升」大模型评测体系，旨在建立业界大模型基准测试统一的「度量衡」。「方升」测试体系涵盖大模型基准测试的关键四要素，即测试指标、测试方法、测试数据集和测试工具，目前已形成《大规模预训练模型基准测试-总体技术要求》标准。</span></p><p><img height="167" src="https://oscimg.oschina.net/oscnet/up-ebb8952d715044001bb29e8d67808584ad5.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-8b441a7bb22997359392d02a0644c603284.png" width="500" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试指标方面，「方升」测试体系主要针对行业、应用、通用和安全四个维度对大模型进行全面、客观、统一的评估，为了加速大模型应用落地，重点强化了行业和应用导向能力的考查。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">在测试方法方面，「方升」测试体系创新性提出自适应动态测试方法，从测试数据标签化、测试题库实时化、测试方案定制化、测试流程自动化四个方面全面提升大模型基准测试质量，重点解决大模型「刷榜」问题。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试数据方面，<span>「</span>方升」测试体系搭建动态测试数据库，涵盖测试数据集 107 个，测试数据条数达到 123 万，联合产业界多家机构首次推出面向行业、通用、应用、安全领域的评测数据集 6 个。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">测试框架与工具方面，中国信通院在构建超自动化测试平台和智能化结果评估系统方面持续发力，探索解决国内外人工智能自动化测试流程中存在的「阻塞点」，全面提高测试效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">「方升」大模型基准测试体系由中国信通院联合北京智源研究院、认知智能全国重点实验室和天津大学共同发布。此外，国网智能电网研究院、首都之窗、天津大学、中国电信研究院、中国联通软件研究院、华为、甲骨易、海天瑞声、东方财富 9 家单位成为「方升」大模型基准测试首批合作伙伴。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 02:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273067</guid>
            <link>https://www.oschina.net/news/273067</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
