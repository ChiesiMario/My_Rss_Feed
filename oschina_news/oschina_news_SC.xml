<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 02 Nov 2023 23:05:32 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[谷歌宣布「移动优先索引」工作已完成]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Google 搜索的博客<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevelopers.google.com%2Fsearch%2Fblog%2F2023%2F10%2Fmobile-first-is-here" target="_blank">近日更新的文章称</a></u>，<span style="background-color:rgba(255, 255, 255, 0.65); color:#000000">七年前开始的<strong>移动优先索引&nbsp;</strong></span><strong>(Mobile-FirstIndexing) </strong>工作<span style="background-color:rgba(255, 255, 255, 0.65); color:#000000">现已完成。</span></p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1102/184543_fsMq_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>Google 在 6 年半前就开始采用移动优先索引，在发布了一个又一个截止日期后，Google 最终取消了截止日期。</p><p>2016 年 11 月，Google 首次推出了移动优先索引。到 2018 年 12 月，Google 搜索结果中的一半网站都来自移动优先索引。简单地说，移动优先索引就是 Google 将从移动浏览器的视角抓取你的网站，并使用该移动版本进行索引和排名。</p><p>Google 在 2020 年 3 月初，宣布所有网站切换到移动优先索引的截止日期为 2020 年 9 月。当时 Google 表示："为了简化，我们将从 2020 年 9 月开始对所有网站切换到移动优先索引。随后在 2020 年 7 月，Google 再次将最后期限推迟到 2021 年 3 月。"</p><p>但在今年 5 月份，Google 事实上已经完成了网站移动索引的切换，但直到现在才正式宣布。Google 将减少传统桌面 Googlebot 的抓取次数。</p><p>Google 解释说，「有一小部分网站根本无法在移动设备上运行，这些网站主要是页面向所有移动用户显示错误，移动版网站被 robots.txt 屏蔽，而桌面版网站允许抓取，或者移动网站上的所有页面都重定向到主页。」</p><p>Google 表示，这类问题是搜索引擎无法解决的，目前将继续尝试用我们传统的桌面版 Googlebot 爬虫抓取这些网站，并将每年对名单进行几次重新评估。</p><p>Search Console 的变化方面，Google 宣布将关闭 Google 搜索控制枱设置页面中的索引爬虫信息。Google 解释说："由于所有在移动设备上运行的网站现在都主要由我们的移动爬虫抓取，因此不再需要这些信息。"</p><p>由于移动优先索引现在已经真正完成，这意味着 Google 很快将完全停止通过其传统的桌面爬虫进行抓取。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 10:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264670/mobile-first-is-here</guid>
            <link>https://www.oschina.net/news/264670/mobile-first-is-here</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌：正在完善 Android 中的 RISC-V 支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌曾在 2022 年 11 月的 RISC-V 峰会上宣布已开始接受 RISC-V 补丁。一年后的现在，该公司则表示其正在完善 Android 中对 RISC-V 的支持。「我们的最新更新是，现在我们不仅接受补丁，而且还开始在 Android 中成熟地支持 RISC-V。」</span></p><p><span style="color:#000000">负责 Android 平台编程语言的 Lars Bergstrom 和负责低级操作系统的 Greg Simon <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensource.googleblog.com%2F2023%2F10%2Fandroid-and-risc-v-what-you-need-to-know.html" target="_blank">在博客中表示</a>，他们已经确定了一组关键的扩展（包括 rva22 配置文件和矢量/加密扩展），以确保运行 RISC-V 的 CPU 具有高性能。</span></p><p><span style="color:#000000">开发人员现在可以在自己的计算机上构建、测试和运行对 RISC-V 的 Android 支持。可以使用 Cuttlefish 虚拟设备支持：</span></p><pre><code>$ lunch aosp_cf_riscv64_phone-userdebug
$ m -j
$ launch_cvd -cpus=8 -memory_mb=8192</code></pre><p><span style="color:#000000">然后可以使用 vncviewer 连接到正在运行的设备并进行交互。</span></p><p><span style="color:#000000"><img alt="" height="278" src="https://oscimg.oschina.net/oscnet/up-f4e707629f0afb6b046e5c2c412f90a99fd.gif" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，这些补丁将支持构建和运行基本的 Android 开源项目体验，但尚未完全优化。例如，针对 Android Runtime (ART) 的完全优化后端工作仍在进行中。此外，AOSP、外部项目和编译器还没有生成经过全面优化的精简代码，这些代码也没有利用最新批准的扩展（如向量扩展）。但谷歌方面表示，他们相信<span style="background-color:#ffffff">该平台已经为实验和协作做好了准备。</span></span></p><p><span style="color:#000000">展望未来，<span style="background-color:#ffffff">该公司的目标是在今年年底最终确定 NDK ABI，以及在 Android 的公共 CI 上提供金丝雀构建；同时提供 x86-64 和 ARM64 上的 RISC-V，以便在主机上更轻松地测试 riscv64 Android 应用程序。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">到 2024 年，他们则计划推出公开可用的模拟器</span><span style="background-color:#ffffff">；</span><span style="background-color:#ffffff">具有完整的功能集，可以测试各种设备外形尺寸的应用程序。</span>「<span style="background-color:#ffffff">正如我们最近与高通公司合作宣布的那样，我们预计可穿戴设备将成为第一个可用的形式因素</span>」。本月早些时候，高通曾宣布正在与谷歌合作开发&nbsp;RISC-V Wear OS 芯片。</span></p><p><span style="color:#000000">不仅限于 <span style="background-color:#ffffff">Android 操作系统</span>，谷歌方面还透露其正在与社区和 RISE（RISC-V 软件生态系统）积极合作。并表示，接下来将继续并扩大对 RISC-V International 的投资。「Android 对 RISC-V 的支持依赖于从工具链到基本支持库的广泛贡献。我们非常感谢无数项目为支持 RISC-V 构建配置和高质量实施所做的不懈努力。」</span></p><p><span style="color:#000000">RISE 项目的成立旨在为运行高级操作系统的高性能、高能效 RISC-V 处理器内核提供一种加速软件可用性的方法，不仅包括 Android，还包括 Linux 和其他操作系统，涉及高性能计算等多个应用领域。RISE 项目的成员包括 Andes、谷歌、英特尔、Imagination Technologies、联发科、英伟达、高通技术、红帽、Rivos、三星、SiFive、T-Head 和 Ventana。</span></p><p><span style="color:#000000">有兴趣为 Android 中的 RISC-V 支持做出贡献的开发人员可以</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoogle%2Fandroid-riscv64" target="_blank">在 GitHub 上</a><span style="color:#000000">找到有关构建和测试的详细信息。谷歌鼓励开发者社区的参与，以进一步增强该平台。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 10:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264668/android-and-risc-v</guid>
            <link>https://www.oschina.net/news/264668/android-and-risc-v</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DoltgreSQL 发布，基于 Git 的 PostgreSQL]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>DoltSQL 的工作原理是模拟 PostgreSQL 服务器，并将接收到的命令转换为交给底层 Dolt 服务器的 AST。</p></blockquote><p>Dolt 是一个基于 Git 协议的开源 SQL 数据库，「版本控制的数据库」，使用 Golang 语言编写。首先它和 MySQL 关系型数据库一样，用于存储和管理数据，具有表、视图等概念，支持数据的增删改查等操作。它还提供了一个命令行工具，完美支持所有的 Git 命令，允许用户像使用一个 git 仓库一样对数据进行 fork、clone、branch、merge、push 和 pull 等操作。</p><p>Dolt 可以替代 MySQL，因为它实现了 MySQL 的语法和线协议，但它并不包含任何 MySQL 的代码，因为解决数据库版本控制问题的复杂性和挑战需要定制的解决方案。目前 Dolt 也已经准备好投入生产。</p><p><img height="920" src="https://static.oschina.net/uploads/space/2023/1102/183217_nsBr_3820517.png" width="1636" referrerpolicy="no-referrer"></p><p>而当前发布的 DoltSQL 是对 PostgreSQL 的支持。DoltSQL 的工作原理是模拟 PostgreSQL 服务器，并将接收到的命令转换为交给底层 Dolt 服务器的 AST。这使得能够快速启动并运行，同时利用 Dolt 已经提供的特性。DoltSQL 团队解决，在采取这种方法之前，考察了很多其它方法，从编写外部数据包装器，到为 PostgreSQL 构建新的存储后端，甚至是分叉 PostgreSQL 本身。但许多方法都无法完全支持版本控制功能，而其它方法（如分叉 PostgreSQL）可能需要数年的开发时间。</p><p>使用方式：</p><ol><li><p>Download the <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdolthub%2Fdoltgresql%2Freleases" target="_blank"><strong>latest release</strong></a></p></li><li><p>Put the binary on your PATH.</p></li><li><p>Navigate to a directory you want your database data stored (eg. <code>~/doltgresql</code>).</p></li><li><p>Run <code>doltgres</code>. This will create a <code>doltgres</code> user and a <code>doltgres</code> database.</p></li><li><p>Open a new terminal. Connect with the following command: <code>psql -h localhost -U doltgres</code>. This will connect to the <code>doltgres</code> database with the <code>doltgres</code> user.</p></li><li><p>Run <code>CREATE TABLE example (pk INT8 PRIMARY KEY);</code>&nbsp;运行 <code>CREATE TABLE example (pk INT8 PRIMARY KEY);</code></p></li></ol><p>详情查看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dolthub.com%2Fblog%2F2023-11-01-announcing-doltgresql%2F" target="_blank">https://www.dolthub.com/blog/2023-11-01-announcing-doltgresql</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 10:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264666/announcing-doltgresql</guid>
            <link>https://www.oschina.net/news/264666/announcing-doltgresql</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[macOS Sonoma 中的 grep 命令被损坏]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>苹果开发者论坛上的一则帖子<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fforums%2Fthread%2F738862" target="_blank">写道</a>：</p><blockquote><p>macOS Sonoma 中的 grep 命令遭到了损坏，具体情况是出现<strong>断言失败 (Assertion Fails) 问题</strong>。</p><p>目前在新版系统中，macOS 上最新的<code>grep</code><strong>会索引到当前字符串超出的范围</strong>，由于<code>grep</code>终止了当前行缓冲区带有一个额外的空字符（不是原始输入文件的一部分），所以它恰好触发了<code>assert</code>来检查当前字符（在字符串之外）有多少字节宽。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/180554_3aG1_2720166.png" referrerpolicy="no-referrer"></p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fforums%2Fthread%2F738862" target="_blank">https://developer.apple.com/forums/thread/738862</a></em></p></blockquote><p>这名发帖者表示，macOS 工程师原本是试图修复一个错误，没想到却破坏了另一个正常的功能 —— grep 命令。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 10:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264665</guid>
            <link>https://www.oschina.net/news/264665</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Transformers.js 2.7.0 发布，新增文本转语音]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Transformers.js 支持在浏览器中实现最先进的机器学习——无需服务器。它提供预训练模型和熟悉的 API，支持自然语言处理、计算机视觉、音频和多模态领域的任务。</p><p>借助 Transformers.js，开发者可以直接在浏览器中运行文本分类、图像分类、语音识别等任务，这使其成为 ML 从业者和研究人员的强大工具。</p><p>最近发布的<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxenova%2Ftransformers.js%2Freleases%2Ftag%2F2.7.0" target="_blank"> Transformers.js 2.7.0 </a></u></strong>添加了一项重要功能：文本转语音。</p><p>下面是演示视频：</p><div class="ckeditor-html5-video" style="text-align:center"><video controls="controls" src="https://user-images.githubusercontent.com/26504141/277378666-9fa5131d-0e07-47fa-9a13-122c1b69d233.mp4">
  &nbsp;
 </video></div><p>&nbsp;</p><p>开发者表示目前只支持 speecht5 的文本转语音，将来会添加其他模型，如 bark 和 MMS。</p><p>为了展示在浏览器中文本转语音的强大功能，开发者还发布了一个简单的示例应用：</p><ul><li>演示：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fspaces%2FXenova%2Ftext-to-speech-client" target="_blank">https://huggingface.co/spaces/Xenova/text-to-speech-client</a></li><li>代码：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxenova%2Ftransformers.js%2Ftree%2Fmain%2Fexamples%2Ftext-to-speech-client" target="_blank">https://github.com/xenova/transformers.js/tree/main/examples/text-to-speech-client</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 06:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264606/transformers-js-2-7-0-released</guid>
            <link>https://www.oschina.net/news/264606/transformers-js-2-7-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenFunction 1.2.0 发布：集成 KEDA http-addon 作为同步函数运行时]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenFunction%2FOpenFunction" target="_blank">OpenFunction</a> 是一个开源的云原生 FaaS（Function as a Service，函数即服务）平台，旨在帮助开发者专注于业务逻辑的研发。我们非常高兴地宣布 OpenFunction 又迎来了一次重要的更新，即 v1.2.0 版本的发布！</p><p>本次更新中，我们继续致力于为开发者们提供更加灵活和强大的工具，并在此基础上加入了一些新的功能点。该版本集成了 KEDA http-addon 作为同步函数运行时；支持在启用 SkyWalking 跟踪时添加环境变量；支持记录构建时间等。此外，还升级了部分组件及修复了多项 bug。</p><p>以下是该版本更新的主要内容：</p><h2>集成 KEDA http-addon 作为同步函数运行时</h2><p>KEDA http-addon 是一个 KEDA 的附加组件，它可以根据 HTTP 流量的变化自动地调整 HTTP 服务器的规模（包括从零开始扩容和缩容到零）。</p><p>KEDA http-addon 的工作原理是，它会在 Kubernetes 集群中创建一个名为 Interceptor 的组件，用来接收所有的 HTTP 请求，并将请求转发给目标应用。同时，它会将请求队列的长度报告给一个名为 External Scaler 的组件，用来触发 KEDA 的自动扩缩容机制。这样，你的 HTTP 应用就可以根据实际的流量需求动态地调整副本数。</p><p>在 OpenFunction v1.2.0 版本中，我们集成了 KEDA http-addon 作为同步函数运行时的一种选择。这意味着，你可以使用 OpenFunction 来创建和管理基于 HTTP 的函数，并利用 KEDA http-addon 的能力来实现高效且灵活的弹性伸缩。你只需在创建 Function 资源时指定 <code>serving.triggers[*].http.engine</code> 的值为 keda ，并且在 <code>serving.scaleOptions</code> 中配置 <code>keda.httpScaledObject</code> 相关参数，就可以部署和运行你的 HTTP 函数了。</p><h2>支持在启用 SkyWalking 跟踪时添加环境变量</h2><p>SkyWalking 是一个开源的应用性能监控（APM）系统，它可以帮助你观察和分析你的应用在不同环境中的运行状况。OpenFunction 支持在部署函数时启用 SkyWalking 跟踪，以便你可以更好地理解和优化你的函数性能。</p><p>在 OpenFunction v1.2.0 版本中，我们增加了一个新的功能，即支持在启用 SkyWalking 跟踪时添加环境变量。这样，你可以在创建 Function 资源时指定一些自定义的环境变量来控制 SkyWalking 的一些配置参数。这些环境变量会被传递给函数容器，并影响 SkyWalking 的采集和上报行为。</p><h2>当 Function、Builder 和 Serving 状态变化时支持记录事件</h2><p>事件（Event）是 Kubernetes 中一种重要的资源类型，它可以记录集群中发生的一些重要或者有趣的事情。事件可以帮助用户和开发者了解集群中资源的状态变化和异常情况，并采取相应的措施。</p><p>在 OpenFunction v1.2.0 版本中，我们支持当 Function、Builder 和 Serving 状态变化时记录事件。这样，你可以通过查看事件来获取更多关于函数构建和运行过程中发生的事情的信息。例如，你可以看到函数构建开始、结束、失败等事件；函数运行时创建、更新、删除等事件。</p><h2>其他的改进和优化</h2><p>除了上述的主要变化，该版本还有以下更改和增强：</p><ul><li>升级了 KEDA 到 v2.10.1 ，HPA（自动伸缩）API 版本到 v2 ，提高了稳定性和兼容性</li><li>支持记录构建时间，以便你可以了解函数构建的耗时情况</li><li>调整了 CI 流程，修复了一些小问题</li><li>修复了一个在 keda http-addon 运行时中的 bug ，该 bug 会导致函数无法正常运行</li><li>升级了 charts 中的一些组件，包括 keda ，dapr 和 contour ，以保持最新的版本和功能</li></ul><p>以上就是 OpenFunction v1.2.0 的主要功能变化，在此十分感谢各位贡献者的参与和贡献。</p><p>了解更多关于 OpenFunction 和本次版本更新的信息，欢迎访问我们的官方网站和 Github 页面。</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenfunction.dev%2F" target="_blank">官网</a>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenfunction.dev%2F" target="_blank">https://openfunction.dev/</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenFunction%2FOpenFunction%2Freleases%2Ftag%2Fv1.2.0" target="_blank">Github</a>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenFunction%2FOpenFunction%2Freleases%2Ftag%2Fv1.2.0" target="_blank">https://github.com/OpenFunction/OpenFunction/releases/tag/v1.2.0</a></li></ul><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 06:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10140452</guid>
            <link>https://my.oschina.net/u/4197945/blog/10140452</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[计算流体力学 (CFD) 开源软件精选合集]]>
            </title>
            <description>
                <![CDATA[计算流体力学 (CFD) 开源软件精选合集]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 04:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/project/awesome?columnId=17</guid>
            <link>https://www.oschina.net/project/awesome?columnId=17</link>
        </item>
        <item>
            <title>
                <![CDATA[Kotlin 1.9.20 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Kotlin 1.9.20 版本已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-1-9-20-released%2F" target="_blank">发布</a>，适用于所有目标的 K2 编译器已进入 <strong style="color:#19191c">Beta&nbsp;</strong>阶段，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-multiplatform-stable%2F" target="_blank">Kotlin Multiplatform 已进入<strong>稳定阶段</strong></a>。</p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此版本的一些亮点更新如下：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul style="margin-left:0; margin-right:0"><li>适用于所有目标的 K2 现已处于 Beta 阶段</li><li>稳定的 Kotlin Multiplatform</li><li>用于设置多平台项目的新默认&nbsp;hierarchy template</li><li>在 Kotlin Multiplatform 中完全支持 Gradle 配置缓存</li><li>Kotlin/Native 中默认启用自定义内存分配器</li><li>Kotlin/Native 中垃圾收集器的性能改进</li><li>Kotlin/Wasm 中的新目标和重命名目标，支持最新的 Wasm GC</li><li>在 Kotlin/Wasm 标准库中支持 WASI API</li></ul><h4><strong>适用于所有目标的新 Kotlin K2 编译器已达到 Beta 版&nbsp;</strong></h4><p><span style="background-color:#ffffff; color:#19191c">JetBrains 的 Kotlin 团队正在继续稳定新的 K2 编译器，这将带来重大的性能改进，加快新语言功能的开发，统一 Kotlin 支持的所有平台，并为多平台项目提供更好的架构。&nbsp;</span></p><p><strong>随着 1.9.20 版本的发布，新的 K2 编译器已面向所有平台进入 Beta&nbsp;阶段： JVM、Native、JS 和 Wasm。这意味着你现在可以在任何 Kotlin 项目中试用 K2。</strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Kotlin 团队通过成功编译数十个用户和内部项目，确保了新编译器的质量。大量用户也参与了稳定过程，在他们的项目中尝试新的 K2 编译器并报告他们发现的任何问题。大量用户也参与了稳定化过程，在他们的项目中试用新的 K2 编译器，并报告了他们发现的任何问题。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>Kotlin 1.9.20 版本还在 kapt 编译器插件中引入了 K2 支持。</strong>现在，所有重要的 Kotlin 编译器插件都支持 K2。其中包括 kapt、serialization、AtomicFU、Lombok、SAM with receiver、all-open、no-arg、jvm-abi-gen、Android Lint 和 Jetpack Compose 编译器插件。支持 K2 的 Kotlin Symbol Processing (KSP) 将于 Kotlin 1.9.20 后一周内发布。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>如果你使用的是任何其他编译器插件，建议检查其文档以查看它们是否与 K2 兼容。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>Kotlin 的下一个主要版本是 2.0.0，新的 K2 编译器将作为默认和稳定版本全面提供。</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>为了尽快解决发现的任何问题，项目团队计划频繁发布一系列小型 Kotlin 2.0 稳定版，包括 Beta1、Beta2、Beta3、RC1 和 RC2。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>在发布 Kotlin 2.0.0-RC1 时，其计划确保与其他版本的 Kotlin 编译器编译的代码的二进制兼容性，并消除用 K2 编译的二进制文件中毒现象。使用户能够在生产环境中使用新的 K2 编译器。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start">K2 编译器即将完成其稳定化过程并在 Kotlin 2.0 中默认启用，因此项目团队也呼吁尽可能多的开发人员来试用 K2 并报告任何存在的潜在问题。</p><p style="margin-left:0; margin-right:0; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-1-9-20-released%2F" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264577/kotlin-1-9-20-released</guid>
            <link>https://www.oschina.net/news/264577/kotlin-1-9-20-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[搭建高效推荐系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><p style="margin-bottom: 0px;"><img class="rich_pages wxw-img" data-ratio="0.3220338983050847" data-s="300,640" src="https://oscimg.oschina.net/oscnet/07d405a0-fa42-41fe-9e0e-93ef7f5df2f0.png" data-type="png" data-w="708" style="" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><span style="font-family: PingFangSC-light;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(0, 0, 0);font-size: 15px;overflow-wrap: break-word !important;">如何搭建一个高效的推荐系统？</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">简单来说，现代推荐系统由训练/推理流水线（pipeline）组成，涉及数据获取、数据预处理、模型训练和调整检索、过滤、排名和评分相关的超参数等多个阶段。走遍这些流程之后，推荐系统能够给出高度个性化的推荐结果，从而提升产品的用户体验。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">为了方便大家对此进行深入了解，我们邀请到 NVIDIA Merlin 团队，他们将详细介绍推荐系统的上述多个阶段的工作流程，以及推荐系统在电商、流媒体、社交媒体等多个行业领域的实践和用例。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><strong style="color: rgb(20, 114, 255);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 32px;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);outline: 0px;">01.</strong></span></p><span id="OSC_h1_1"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;font-size: 18px;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVIDIA Merlin</span></strong><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;font-size: 18px;box-sizing: border-box !important;overflow-wrap: break-word !important;"> &amp; Milvus</span></strong></h1><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">推荐系统 pipeline 中至关重要的一环便是为用户检索并找到最相关的商品。为了实现这一目标，通常会使用低维向量（embedding）表示商品，使用数据库存储及索引数据，最终对数据库中数据进行近似最近邻（ANN）搜索。这些向量表示是通过深度学习模型获取的，而这些深度学习模型基于用户和产品或服务之间的交互进行训练。使用计算机视觉算法或语言模型，还可以从各种数据模态（例如图像、视频或产品与用户的文本描述）中生成向量表示。获取向量表示后便迎来关键步骤——对数十万甚至数百万/数十亿的向量嵌入数据集（例如电商库存产品 embedding）进行高效的 top-k（即 k 个最相似）搜索。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVIDIA Merlin （</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">https://github.com/NVIDIA-Merlin）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 是一个开源框架，用于训练端到端模型，从而为各类规模的数据生成推荐，轻松集成高效的向量数据库索引和搜索框架。而 Milvus 作为大模型时代备受关注的向量数据库可以提供高效索引和查询功能。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">最近，<strong>Milvus&nbsp;（</strong>https://zilliz.com/what-is-milvus）新增</span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">支持 NVIDIA </span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">GPU 加速&nbsp;</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">https://github.com/milvus-io/milvus/releases/tag/v2.3.0</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">，可提升查寻的并发和速度，这对于现代推荐系统十分有用。截至 2023 年 10 月，Milvus 获得了 689 万次 docker pull 及 2.3 万颗 GitHub Star，被业界<strong>广泛应用 </strong>https://zilliz.com.cn/blog?tag=4。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">接下来，我们将演示 Milvus 如何与 Merlin RecSys 框架集成、Milvus 如何在项目检索阶段与高效的 top-k 向量搜索技术相结合以及如何在推断时使用 NVIDIA Triton Inference Server (TIS)。根据 NVIDIA 性能测试结果显示：使用 Merlin 模型生成向量并使用 GPU 加速版的 Milvus 可以将搜索速度提升 37 至 91 倍。我们使用的 <strong>Merlin-Milvus 集成代码和详细性能测试结果</strong>均可在 （https://github.com/bbozkaya/merlin-milvus/tree/main）处获取。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="596" data-ratio="0.4685185185185185" src="https://oscimg.oschina.net/oscnet/5f8b2f72-9e1d-4427-b54b-f5824a280393.png" data-type="png" data-w="1080" data-width="1272" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">图 1｜Milvus 框架为多阶段推荐系统的检索阶段做出贡献。（原始多阶段图的来源：https://medium.com/nvidia-merlin/recommender-systems-not-just-recommender-models-485c161c755e）</span></strong></span></p><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></h1><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h1_2"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="font-size: 15px;"><strong><span style="font-size: 15px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">挑战</span></strong></span></h1></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">由于推荐系统具备的多阶段的性质以及各种组件和库的可用性问题，其主要挑战就是在端到端流程中无缝集成所有组件，因此我们的目标是在示例 notebook 中尽可能简化集成工作。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">另一个挑战是加速整个推荐流程。虽然加速在训练大型神经网络中扮演着重要的角色，但 GPU 是在近期才被添加到向量数据库和 ANN 搜索领域中的。随着电商库存产品、流媒体等数据规模爆炸式增长和用户数量的井喷，CPU 从性能上而言已经无法满足服务数百万用户的推荐系统的需求。为了解决这个挑战，需要在流程的其他部分进行 GPU 加速。本文提出的解决方案展示了 ANN 搜索时使用 GPU 加速可以有效解决这一问题。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h1_3"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">技术栈</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h1></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">现在，介绍一下即将用到的技术栈。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">首先需要一个推荐系统框架作为基础，本例中我们使用 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVIDIA Merlin</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">&nbsp;https://github.com/NVIDIA-Merlin/Merlin</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">，因为这个开源库提供在 NVIDIA GPU 上加速推荐系统的高级 API （high-level API）。Merlin 可以助力数据科学家、机器学习工程师和研究人员构建高性能推荐系统。除了 Merlin 以外，本例中还使用了以下开源工具/库：</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><ul start="1" class="list-paddingleft-1" style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVTabular</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：用于预处理输入表格数据和特征工程 https://github.com/NVIDIA-Merlin/NVTabular。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><strong>Merlin Models</strong></span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：用于训练深度学习模型，从用户交互数据中学习获取用户和商品向量 https://github.com/NVIDIA-Merlin/models。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Merlin Systems</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：用于集成基于 TensorFlow 的推荐模型与其他组件（例如特征存储、Milvus 的 ANN 搜索功能），以便在 TIS 中提供服务 https://github.com/NVIDIA-Merlin/systems。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Triton Inference Server</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">用于在推断阶段传递用户特征向量并生成产品推荐 https://github.com/triton-inference-server/server。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">容器化：上述所有内容都可以在 NVIDIA 提供的 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NGC 目录</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://catalog.ngc.nvidia.com/）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">中获取。本例使用 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Merlin TensorFlow 23.06 容器</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://catalog.ngc.nvidia.com/orgs/nvidia/teams/merlin/containers/merlin-tensorflow）&nbsp;</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Milvus 2.</span></strong><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">3</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：用于启用 GPU 加速的向量索引和查询 https://github.com/milvus-io/milvus/releases/tag/v2.3.0。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Milvus 2.2.11</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：与上述相同，但在 CPU 上执行向量索引和查询 https://github.com/milvus-io/milvus/releases。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">pymilvus SDK：用于连接 Milvus 服务器、创建向量数据库索引并通过 Python 接口运行查询命令。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Feast</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：用作端到端 RecSys 流程中保存和检索用户、商品向量的（开源）特征存储 https://github.com/feast-dev/feast。</span></p></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">此外，我们还用到了许多底层库和框架。例如，Merlin 依赖于 cuDF 和 Dask 等其他 NVIDIA 库，这两个库均可在 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">RAPIDS cuDF</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">&nbsp;（https://github.com/rapidsai/cudf）中获取。同样，Milvus 依赖于 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVIDIA RAFT</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">&nbsp;（https://github.com/rapidsai/raft）实现 GPU 加速，HNSW &nbsp;和 FAISS 等进行搜索。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><span id="OSC_h1_4"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><strong style="letter-spacing: 0.544px;text-align: left;text-wrap: wrap;color: rgb(20, 114, 255);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 32px;background-color: rgb(255, 255, 255);outline: 0px;">02.</strong></span></h1><p><span style="font-size: 18px;"><strong><span style="font-size: 18px;background-color: rgb(255, 255, 255);color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;">了解向量数据库</span></strong></span><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">ANN 搜索是关系型数据库无法提供的功能。关系型数据库只能用于处理具有预定义结构、可直接比较值的表格型数据。因此，关系数据库索引也是基于这一点来比较数据。但是 Embedding 向量无法通过这种方式直接相互比较。因为我们不知道向量中的每个值代表什么意思，无法使用关系型数据库来确定一个向量是否一定小于另一个向量，唯一能做的就是计算两个向量之间的距离。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">如果两个向量之间的距离很小，可以假设它们所代表的特征相似；如果距离很大，可以假设它们代表的数据十分不同。对我们而言，向量距离及其含义是有用的。我们可以创建索引结构，高效搜索这些数据。但是为向量数据构建索引也有不小挑战：计算两个向量间距离成本高昂，而且向量索引一旦构建完成后，不易于修改。因此，我们无法直接使用传统的关系型数据库来处理向量数据，需要使用专为向量数据而打造的</span><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: unset;">向量数据库。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: unset;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Milvus</span><span style="letter-spacing: 0.544px;">&nbsp;</span><span style="letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;">是一款专为向量数据处理而设计的向量数据库，可以解决传统关系型数据库无法处理向量的问题，为海量向量数据高效构建索引。为了满足云原生的要求，Milvus 将计算和存储以及不同的计算任务（查询、数据处理和索引）分离开来。用户可以根据不同的应用灵活扩展每个组件。无论是数据插入密集型应用还是搜索密集型应用， Milvus 都能够轻松应对。如果有大量插入请求涌入，用户可以临时水平和垂直扩展索引节点以处理数据。同样，如果没有大量插入数据，但有大量搜索操作，用户可以减少索引节点的数量，并提高查询节点的吞吐量。Milvus 的系统架构设计（见图 2）采用并行计算的思维方式，助力我们进一步优化本例中的推荐系统应用。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="903" data-ratio="0.7055555555555556" src="https://oscimg.oschina.net/oscnet/f29cb938-19a8-4b9f-8ec8-f04f86af455c.png" data-type="png" data-w="1080" data-width="1280" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><strong style="color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 0.544px;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);"><span style="outline: 0px;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);">图 2｜Milvus 架构设计</span></strong></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">此外，Milvus 还整合了许多最先进的索引库，以便为用户提供尽可能多的系统自定义功能。稍后，我们将讨论这些索引的区别以及各自的优缺点。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_5"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">向量数据索引</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">大多数向量索引可以分成两种类型——聚类和图。IVF 是聚类类别中的一种算法，它使用 k-means 来计算最近邻的聚类。然后，将查询向量与最近的质心聚类进行比较，并在搜索时进行搜索。</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">HNSW</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">、</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">DiskANN</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 和图类别中的其他基于图的算法主要围绕着导航扩展图进行搜索，这些图在 ANN 搜索时效率更高。但是图算法往往也更加复杂。如果大家对此感兴趣，可以<strong>阅读</strong>（https://zilliz.com/learn/hierarchical-navigable-small-worlds-HNSW）。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">除了上述这些算法，还有一类叫做乘积量化 (PQ) 的算法。PQ 是一种将向量数据压缩以减少资源使用并提高性能的方法，但其代价是降低召回率/准确性。该领域中的大多数算法都是量化的变体，以允许降低内存使用或提高其方法的性能。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">所有这些算法和组合之间的区别是什么？为什么有这么多算法呢？它们之间的区别在于性能、召回率和内存使用之间的权衡。例如，IVF_FLAT 索引是一个平衡了上述 3 个方面的索引，可以在不过多增加内存开销的情况下以较快的速度获得良好的结果。基于压缩的索引，如 IVF_SQ8 和 IVF_PQ，在速度和减少内存使用方面更强大，但根据所使用的压缩级别，会降低召回率。HNSW 则以性能和召回率为目标，但代价是内存消耗。与其他索引相比，DiskANN 是最独特的，因为它是一种基于磁盘的索引。前面的索引都完全存储在内存中，需要大量的 RAM。DiskANN 只在内存中保存少量索引数据，并将大部分数据保存在磁盘存储器中，这样可以大大减少内存使用量，同时仍然保持较高的召回率。但是，使用 DiskANN 会降低吞吐性能，并且根据所使用的 SSD 类型，会影响延迟性能。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">如今，并非只有大型用户/公司才能访问非常大的数据集，小型用户可能会从其数据中生成数十亿个向量，并需要以最经济的方式进行搜索。相比之下，大型用户有时虽然只有几十万个数据，但每秒需要处理数万个查询。为了解决这些问题，索引层面提供很多定制化的参数来支持不同的用例。更多详情，请<strong>访问</strong>&nbsp;（https://milvus.io/docs/index.md）查看。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_6"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">GPU vs CPU</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">对于大多数用户来说，GPU 索引是获得所需性能的关键。GPU 索引提供了许多用例所需的高吞吐量，同时从长期而言可以节省成本。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">构建和搜索索引主要依赖向量化计算，可以在 CPU 上完成，但使用 GPU 效率大大提升。Milvus 将搜索计算迁移到 GPU 后，查询每秒 (QPS) 的性能提高了 37 至 91 倍，性能提升非常显著。想要获得如此大的性能提升的唯一其他途径就是扩展集群规模。但是这种方式开销较大。通过使用 GPU，用户可以提升性能的同时简化集群，减少额外节点和调度开销。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">然而，基于 GPU 的搜索有一个限制，那就是低并发情况。</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Milvus 对高并发有优化，会尝试合并查询并一起做主存和 GPU 内存的搬移，来降低单个查询需要的搬移次数。</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">在低并发情况下，GPU 的延迟较大，因为 CPU 可以比将数据传输到 GPU 再从 GPU 传回的时间内更快地完成搜索。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><span id="OSC_h1_7"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><strong style="letter-spacing: 0.544px;text-align: left;text-wrap: wrap;color: rgb(20, 114, 255);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 32px;background-color: rgb(255, 255, 255);outline: 0px;">03.</strong></span></h1><p><span style="font-size: 18px;"><strong><span style="font-size: 18px;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;background-color: rgb(255, 255, 255);">示例</span></strong></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">我们提供的示例演示了在商品检索阶段如何集成 Milvus 与 Merlin，其中用到了来自 RecSys Challenge 2015 的真实数据集进行训练。同时，我们也训练了一个双塔深度学习模型，用于学习用户和商品向量。在本章节的最后，我们还会提供一些性能测试相关的信息，包括在性能测试过程中观察的指标和使用的参数范围。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_8"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><strong>数据集</strong></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">在集成和性能测试时，我们使用了由 YOOCHOOSE GmbH 在 RecSys Challenge 2015 中提供的数据集，可在 Kaggle 上下载。这个数据集中包含了欧洲在线零售商提供的用户点击/购买事件，其中包括与点击/购买相关的会话 ID、时间戳、商品 ID 和商品类别等信息。这些内容均可在文件</span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">yoochoose-clicks.dat</code><span style="font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;text-align: unset;color: rgb(62, 62, 62);letter-spacing: 0.544px;">中获取。</span><span style="font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;text-align: unset;color: rgb(62, 62, 62);letter-spacing: 0.544px;">各个会话都是独立的，不考虑回购用户的情况。</span><span style="font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;text-align: unset;color: rgb(62, 62, 62);letter-spacing: 0.544px;">因此我们将每个会话视为属于不同用户的会话。</span><span style="font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;text-align: unset;color: rgb(62, 62, 62);letter-spacing: 0.544px;">该数据集包含 9,249,729 个会话（用户）和 52,739 个商品。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;color: rgb(62, 62, 62);"></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">工作流程主要包括：a) 数据获取和预处理。b) 搭建双塔深度学习模型，训练数据。c) 在 Milvus 向量数据库中创建索引。d) 在 Milvus 向量数据库中进行向量相似性搜索。接下来，我们会简要描述每个步骤，如果大家对每个步骤的详情感兴趣，请<strong>参考</strong>&nbsp;（https://github.com/bbozkaya/merlin-milvus/tree/main/notebooks）。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_9"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">数据获取和预处理</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">用 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVTabular</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://github.com/NVIDIA-Merlin/NVTabular）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">对数据进行预处理。这个工具利用了 Merlin 的 GPU 加速能力，是高度可扩展的特征提取和预处理组件，能够帮助我们轻松处理 T 字节级别的数据集、搭建训练基于深度学习的推荐系统。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVTabular 经过抽象，提供一套简化的代码，使用 RAPIDS 的 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Dask-cuDF</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://github.com/rapidsai/dask-cudf）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 库在 GPU 上实现加速计算。用 NVTabular 将数据读入 GPU 内存，并按需重新排列特征，最终导出为 Parquet 文件。最终得到了 7,305,761 个用户向量和 49,008 个商品向量以供后续训练使用。在预处理时，我们还会将每列数据和值进行分类，转换为整数值。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_10"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">模型训练</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">用<strong>双塔</strong> https://github.com/NVIDIA-Merlin/models/blob/main/examples/05-Retrieval-Model.ipynb 深度学习模型来生成用户和商品向量，随后为这些向量创建索引并查询向量。我们将用户属性 (</span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">user_id</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">, </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">user_age</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">) 和商品属性 (</span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">item_id</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">, </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">item_category</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">) 输入到 Two-Tower 模型中。这个过程中，可以选择是否要包含一个目标列，只包括具有正交互作用的行。模型训练完成后，提取学习到的用户和商品嵌入向量。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">接下来是两个可选步骤：</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">1. 使用 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">DLRM</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://arxiv.org/abs/1906.00091）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 模型对检索到的商品进行排序。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">2. 使用特征存储（在本例中为 </span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Feast</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">）存储和检索用户和商品特征。在本示例中，加入了这两个步骤从而更为完整地展示推荐系统的多阶段工作流程。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">最后，将用户和商品向量导出为 parquet 文件，稍后可以重新加载并为其在 Milvus 中创建向量索引。现在，可以启动 Milvus 服务器并上传商品向量、创建向量索引。然后，在推理时使用 NVIDIA TIS 和自定义的 Merlin 系统 Operator 对现有用户和新用户进行相似性搜索查询。请参见 notebook 中的第二个示例。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_11"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">构建和查询 Milvus 索引</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Milvus 通过在推理机上启动一个服务来实现向量索引和相似度搜索。在 notebook 2 中，我们通过 pip 安装了 milvus 服务器和 pymilvus，然后使用默认的监听端口启动了服务器。接下来，我们将演示如何使用两个函数 </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">setup_milvus </code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">和 </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">query_milvus </code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">来构建一个简单的索引 (IVF_FLAT) 并对其进行查询。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">当我们将相同任务作为 TIS 框架中的多阶段推理的一部分完成时，事情变得更有趣了。Merlin 提供了一个高级 API，Merlin Systems，允许将推荐系统的不同阶段组合成一个单独的链式「集成模型」。因此，上述所有阶段都在对 TIS 发送的单个请求中执行。在这里，我们实现了一个自定义的 Merlin Systems 操作符作为集成的一部分，名为</span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;"> QueryMilvus</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">细心的朋友可以已经注意到，pymilvus 库没有使用 GPU 加速，而 NVTabular 和 Merlin Models 却使用了 GPU。这是因为 Milvus 的 GPU 加速版本需要启动多个容器，而我们使用的 Merlin 容器不支持这样做。相反，通过 pymilvus，在 notebook 所在的同一个容器中将 Milvus 服务器作为一个进程启动。要在 GPU 上运行 Milvus，可以参考最新的 Milvus <strong>发版说明</strong>（https://github.com/milvus-io/milvus/releases/tag/v2.3.1）。下面性能测试是在 GPU 上完成的，使用的是 Milvus 最新版。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_12"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">基准测试</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">为了证明使用快速高效的向量索引/搜索库（如 Milvus）的必要性，我们设计了两组性能测试：</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><ol start="1" class="list-paddingleft-1" style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">使用 Milvus 构建向量索引，我们生成了两组向量：1）针对 730 万个用户向量，按照 85% 的训练集（用于索引）和 15% 的测试集（用于查询）进行划分；2）针对 4.9 万个商品向量，按照，照 50% 的训练集（用于索引）和 50% 的测试集（用于查询）进行划分。性能测试针对每个向量数据集独立进行，生成独立的结果。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">使用 Milvus 构建一个针对 4.9 万个商品向量数据集的索引，并基于该索引使用 730 万个用户向量进行相似性搜索。</span></p></li></ol><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">在性能测试中，我们使用了 GPU 和 CPU 版的 IVF_PQ 和 HNSW 索引算法，并尝试了各种参数组合。<strong>详细信息请参见</strong>&nbsp;（https://github.com/bbozkaya/merlin-milvus/tree/main/results）。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">在生产环境中，一个重要的性能考量指标是搜索质量和吞吐量之间的平衡（tradeoff）。Milvus 允许完全控制索引参数，以探索这个 tradeoff，以达到与基准结果相关的更好搜索结果。这可能意味着减少吞吐量或每秒查询数（QPS），增加计算成本。我们使用召回率指标来衡量 ANN 搜索的质量，并提供了 QPS-召回率，曲线来展示 tradeoff。然后，您可以根据计算资源、延迟/吞吐量需求来决定可接受的搜索质量水平。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">还请注意我们基准测试中使用的查询批处理大小（nq）。这在工作流中非常有用，其中会同时向推理发送多个请求（例如，将离线推荐请求发送给一系列电子邮件收件人，或者通过汇集并同时处理到达的并发请求生成在线推荐）。根据具体情况，TIS 还可以帮助以批处理方式处理这些请求。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><span id="OSC_h1_13"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong style="letter-spacing: 0.544px;text-align: left;text-wrap: wrap;color: rgb(20, 114, 255);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 32px;background-color: rgb(255, 255, 255);outline: 0px;">04.</strong></h1><p><span style="font-size: 18px;"><strong><span style="font-size: 18px;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;background-color: rgb(255, 255, 255);">结果</span></strong></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">以下展示基于 CPU 和 GPU 的 3 组性能测试结果。该测试使用了 Milvus 的 HNSW（仅 CPU）和 IVF_PQ（CPU 和 GPU）索引类型。</span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_14"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">商品向量间相似度搜索</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">对于给定的参数组合，将 50% 的商品向量作为查询向量，并从剩余的向量中查询出 top-100 个相似向量。我们发现，在测试的参数设置范围内，HNSW 和 IVF_PQ 的召回率很高，分别在 0.958-1.0 和 0.665-0.997 之间。这表明 HNSW 在召回率方面表现更好，但是 IVF_PQ 在 nlist 较小的情况下也能得到非常高的召回率。此外，召回率的值随着索引和查询参数的变化也会发生很大的变化。报告结果在对一般参数范围进行初步实验并进一步深入选择子集之后获得的。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">在给定参数组合下，使用 HNSW 在 CPU 上执行所有查询的总时间范围在 5.22 到 5.33 秒之间（在 ef 不变的情况下，随着 m 的增大而更快），而使用 IVF_PQ 在 13.67 到 14.67 秒之间（随着 nlist 和 nprobe 的增大而变慢）。如图 3 所示，GPU 加速确实效果更明显。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">图 3 显示了在 CPU 和 GPU 上，使用 IVF_PQ 和这个小数据集时召回率和吞吐量之间的 tradeoff。我们发现，GPU 在所有测试的参数组合下都实现了 4 到 15 倍的加速（随着 nprobe 的增大而加速更明显）。这个结果是比较每个参数组合下 GPU 的每秒查询数与 CPU 的每秒查询数得出的。总体而言，这个小数据集对于 CPU 或 GPU 来说都很容易处理，而且不难看出，还有进一步加速空间。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="786" data-ratio="0.6138888888888889" src="https://oscimg.oschina.net/oscnet/c3165952-2aeb-4408-b1d5-7d3d4f61af16.png" data-type="png" data-w="1080" data-width="1280" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">图 3｜在 NVIDIA A100 GPU 上运行 Milvus IVF_PQ 算法的 GPU 加速（商品与商品相似性搜索）</span></strong></span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_15"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">用户向量间相似性搜索</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">对于更大的第二个数据集（730 万个用户），我们将 85%（约 620 万个）的向量用于「训练」（要建立索引的向量集），剩下的 15%（约 110 万个）作为「测试」或查询向量集。在这种情况下，HNSW 和 IVF_PQ 表现非常出色，召回率分别为 0.884-1.0 和 0.922-0.999。然而，它们在计算上要求更高，尤其是在 CPU 上使用 IVF_PQ 的情况。使用 HNSW 在 CPU 上执行所有查询的总时间范围为 279.89 至 295.56 秒，而使用 IVF_PQ 的总时间范围为 3082.67 至 10932.33 秒。注意，这些查询时间是对 110 万个向量进行查询的累积时间，因此可以说针对索引的单个查询仍然非常快。然而，如果推理服务器要对数百万个商品并发请求运行查询，不推荐使用 CPU 查询。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">使用 IVF_PQ 和 A100 GPU 时，吞吐量（QPS）提升 37 至 91 倍 （平均为 76.1 倍）。这与我们在小数据集中观察到的结果一致，这表明处理数百万向量数据时，Milvus 结合 GPU 加速可以大幅提升性能。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="786" data-ratio="0.6138888888888889" src="https://oscimg.oschina.net/oscnet/bb8ad2c1-8f6f-4d16-bdf4-d978e999a3ca.png" data-type="png" data-w="1080" data-width="1280" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">图 4｜在 NVIDIA A100 GPU 上运行 Milvus IVF_PQ 算法的 GPU 加速比（用户-用户相似性搜索）</span></strong></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">此外，图 5 显示了在 CPU 和 GPU 上使用 IVF_PQ 测试的所有参数组合的召回率-QPS tradeoff。该图中每个点（上为 GPU，下为 CPU）展示了在改变向量索引/查询参数时召回率和吞吐量的 tradeoff：更高召回率的代价是较低吞吐量。注意，在使用 GPU 的情况下，提高召回率时，QPS 会大幅降低。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="442" data-ratio="0.31574074074074077" src="https://oscimg.oschina.net/oscnet/c7aad0d8-1b28-4762-b55e-f541996e5fff.png" data-type="png" data-w="1080" data-width="1400" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">图 5｜在 CPU 和 GPU 上使用 IVF_PQ 进行测试的参数组合及其召回率-吞吐量 tradeoff（User vs. User）。</span></strong></span></p><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></h2><ul class="list-paddingleft-1" style="list-style-type: square;"><li><span id="OSC_h2_16"></span><h2 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">用户与商品向量间相似度搜索</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></h2></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">最后，考虑另一个现实场景，即将用户向量与商品向量进行比较（如上面的 notebook 1 所示）。在这种情况下，我们为 49000 个商品向量创建索引，为每个用户向量查询其 top-100 最相似的商品。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">在 CPU 上进行向量批量查询非常耗时，无论是使用 HNSW 还是 IVF_PQ 索引（请参见图 6）。而 GPU 在这种情况下表现更好。当 </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">nlist = 100</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 时，IVF_PQ 在 CPU 上平均计算时间约为 86 分钟。但计算时间随着 nprobe 值的增加而变化很大（当 </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">nprobe = 5</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 时为 51 分钟，而当 </span><code style="letter-spacing: 0px;text-align: justify;color: rgb(62, 62, 62);font-size: 14px;padding: 2px 4px;border-radius: 4px;margin-right: 2px;margin-left: 2px;background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">nprobe = 20</code><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"> 时为 128 分钟）。NVIDIA A100 GPU 能够将性能提升了 4 至 17 倍（当 nprobe 较大时，速度提升更高）。前文也提到，通过其量化技术，IVF_PQ 算法还可以减少内存占用。这样看来，如果结合 GPU 加速方案，能够得到一个计算上更可行的 ANN 搜索解决方案。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="786" data-ratio="0.6138888888888889" src="https://oscimg.oschina.net/oscnet/7533f280-7518-4f0d-83c1-2d69e6ac978f.png" data-type="png" data-w="1080" data-width="1280" style="color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;text-align: center;text-wrap: wrap;" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">图 6｜在 NVIDIA A100 GPU 上运行 Milvus IVF_PQ 算法的 GPU 加速比（用户-商品相似性搜索）</span></strong></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">与图 5 类似，图 7 显示了使用 IVF_PQ 测试的所有参数组合的召回率-吞吐量间的 tradeoff。我们仍然可以看到在 &nbsp;ANN 搜索中，为了提高吞吐量，可能需要稍微牺牲一些准确性，尤其是在使用 GPU 的情况下。也就是说，我们可以在 GPU 的计算性能上保持相当高的水平，同时实现高召回率。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-height="404" data-ratio="0.31574074074074077" src="https://oscimg.oschina.net/oscnet/4404363d-b57f-4eee-9cb6-d854094db194.png" data-type="png" data-w="1080" data-width="1280" style="color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;text-align: left;text-wrap: wrap;" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">图 7｜</span></strong></span><span style="font-size: 14px;"><strong><span style="font-size: 14px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;color: rgb(136, 136, 136);box-sizing: border-box !important;overflow-wrap: break-word !important;">使用 IVF_PQ 索引在 CPU 和 GPU 上测试的所有参数组合及其对应召回率-吞吐量 tradeoff（用户 vs 商品）。</span></strong></span></p><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></h1><span id="OSC_h1_17"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong style="letter-spacing: 0.544px;text-align: left;text-wrap: wrap;color: rgb(20, 114, 255);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 32px;background-color: rgb(255, 255, 255);outline: 0px;">05.</strong></h1><span id="OSC_h1_18"></span><h1 style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="font-size: 18px;"><strong><span style="font-size: 18px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">结论</span></strong></span></h1><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">最后，和大家分享一些思考。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">现代推荐系统复杂和多阶段的特质对每个环节的性能和效率都有很高的要求。因此，大家可以考虑在推荐系统流程中使用以下两个关键功能：</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><ul start="1" class="list-paddingleft-1" style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVIDIA Merlin 及其 Merlin Systems 库：您能够轻松插入高效的 GPU 加速向量搜索引擎 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Milvus</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://github.com/milvus-io/milvus/tree/2.3.0）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">。</span></p></li><li style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;"><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">使用 GPU 加速计算，用诸如 </span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">RAPIDS RAFT</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">（https://github.com/rapidsai/raft）</span><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">等技术来进行向量数据库索引和 ANN 搜索。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></p></li></ul><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: center;overflow-wrap: break-word !important;"><img class="rich_pages wxw-img" data-ratio="0.2572614107883817" src="https://oscimg.oschina.net/oscnet/803eac97-57b6-476c-b88c-b28e31677811.png" data-type="png" data-w="964" referrerpolicy="no-referrer"></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">上述测试结果表明，本文所提出的 Merlin-Milvus 集成方案在训练和推理方面都非常高效且比其他方案更简单。而且，这两个框架都在积极开发中，每个版本都会添加许多新功能，例如，Milvus 新增了基于 GPU 加速的向量数据库索引。向量相似性搜索是计算机视觉、大语言模型系统、推荐系统等工作流程中的关键组成部分，因此十分推荐大家尝试使用 Milvus 向量数据库。</span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">最后，要感谢 Zilliz/Milvus 和 Merlin 以及 RAFT 团队为完成这个项目和这篇博客文章所做出的贡献。当然，如果大家在自己的推荐系统或其他工作流程中使用了 Merlin 和 Milvus，也欢迎和我们分享。</span><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: unset;"></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><br><strong style="text-wrap: wrap;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);font-size: 16px;text-align: left;"><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;"><strong style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);"><span style="outline: 0px;font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;color: rgb(23, 95, 255);">本文作者</span></strong></span></strong></span></p><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Burcin Bozkaya：</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">NVIDIA 工程师</span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"></span></strong></p></li><li><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Filip Haltmayer：</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Zilliz 软件工程师</span></p></li><li><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;text-align: left;overflow-wrap: break-word !important;"><strong><span style="border-width: 0px;border-style: initial;border-color: initial;vertical-align: baseline;line-height: 24px;outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">William Hicks</span></strong><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：<span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: left;caret-color: rgba(0, 0, 0, 0);text-wrap: wrap;background-color: rgb(255, 255, 255);"></span></span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: left;caret-color: rgba(0, 0, 0, 0);text-wrap: wrap;background-color: rgb(255, 255, 255);">N</span><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: left;caret-color: rgba(0, 0, 0, 0);text-wrap: wrap;background-color: rgb(255, 255, 255);">VIDIA 工程师</span></span><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;"><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: left;caret-color: rgba(0, 0, 0, 0);text-wrap: wrap;background-color: rgb(255, 255, 255);"></span></span></strong></p></li><li><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">刘力：</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">Zilliz 首席工程师</span></p></li><li><p style="margin-bottom: 1px;outline: 0px;max-width: 100%;box-sizing: border-box;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;letter-spacing: 0.544px;white-space: normal;background-color: rgb(255, 255, 255);visibility: visible;overflow-wrap: break-word !important;text-align: left;"><strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">马宇生</span></strong><span style="outline: 0px;max-width: 100%;letter-spacing: 0.544px;text-align: unset;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;visibility: visible;box-sizing: border-box !important;overflow-wrap: break-word !important;">：</span><span style="color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-align: unset;">Zilliz 主任工程师</span></p></li></ul><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: normal;"><span style="outline: 0px;font-size: 14px;"><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;"><span style="outline: 0px;letter-spacing: 0.544px;text-align: unset;color: rgb(23, 95, 255);"><strong style="outline: 0px;"><br></strong></span></span></span></section><section style="line-height: normal;margin-bottom: 0px;"><strong style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);font-size: 16px;text-align: left;"><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;"><strong style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);"><span style="outline: 0px;font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;color: rgb(23, 95, 255);">推荐阅读</span></strong></span></strong></section><section style="line-height: normal;margin-bottom: 0px;"><strong style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);font-size: 16px;text-align: left;"><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;"><strong style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);"><span style="outline: 0px;font-family: system-ui, Pingfang-SC, sans-serif;letter-spacing: 0.544px;text-align: unset;color: rgb(23, 95, 255);"><br></span></strong></span></strong></section><section style="line-height: normal;margin-bottom: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzMDI5OTA5NQ%3D%3D%26mid%3D2247499077%26idx%3D1%26sn%3D567a74286498b524e5b64a5962e4d07d%26chksm%3Dfa515cfdcd26d5ebe080734cbda6b77dc2c1728331498627d4f177ae6fcd0001cd8c6bd9d94b%26scene%3D21%23wechat_redirect" textvalue="‍‍" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="1"><span class="js_jump_icon h5_image_link"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="246" data-galleryid="" data-ratio="0.42592592592592593" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7851d9fe-063e-4adf-9b43-41c946fac005.png" data-type="png" data-w="1080" style="width: 578px;height: 246px;" referrerpolicy="no-referrer"></span></a></section><section style="line-height: normal;margin-bottom: 0px;"><br></section><section style="line-height: normal;margin-bottom: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzMDI5OTA5NQ%3D%3D%26mid%3D2247499126%26idx%3D1%26sn%3D5ef4dc73e6b769cd4830911af924e56c%26chksm%3Dfa515ccecd26d5d8bf05c227aa94d56a0998d3a01179d79bb964e252d3f5e1fabc9c04411936%26scene%3D21%23wechat_redirect" textvalue="‍‍" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="1"><span class="js_jump_icon h5_image_link"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="246" data-galleryid="" data-ratio="0.42592592592592593" data-s="300,640" src="https://oscimg.oschina.net/oscnet/0da673f3-5ca5-4fca-bd8c-b30bbdfe3028.png" data-type="png" data-w="1080" style="width: 578px;height: 246px;" referrerpolicy="no-referrer"></span></a></section><section style="line-height: normal;margin-bottom: 0px;"><br></section><section style="line-height: normal;margin-bottom: 0px;"><img class="rich_pages wxw-img" data-ratio="0.535966149506347" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a42dd686-4a43-4ea1-abab-ea3c6fda6493.png" data-type="png" data-w="709" style="" referrerpolicy="no-referrer"></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - ZILLIZ（Zilliztech）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/10140444</guid>
            <link>https://my.oschina.net/u/4209276/blog/10140444</link>
            <author>
                <![CDATA[Zilliz]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mozilla 计划移除 Firefox 中的 Theora 支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">继谷歌<a href="https://www.oschina.net/news/263239/chrome-remove-theora-support">计划</a>从 Chrome/Chromium 浏览器中移除对 Theora 编解码器格式的支持之后，Mozilla 也计划采取类似举措，逐步将 Theora 从 Firefox 中淘汰。</span></p><p><span style="color:#000000">目前，Theora 约占 Firefox 媒体资源负载的约 0.09%。开发者 Paul Adenot 指出，拥有大量 Theora 内容的大型服务（如维基百科）已不再使用 Theora，而是使用更现代的编解码器。事实上，大多数 Web 服务早已从 Theora 转向 VP9 和 AV1 等更好的替代品，Theora 如今的使用率已经变得很低。</span></p><p><img height="292" src="https://oscimg.oschina.net/oscnet/up-5fc9ddca26e00a210b18198e0b2f1969b65.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">其起草的计划是在 Firefox Nightly&nbsp; 中禁用 Theora 支持，添加一点遥测技术来跟踪是否有任何 Theora 加载尝试发生；然后等待几个 Firefox 的发布周期，再在测试阶段将其移除，最后继续从 Firefox 中移除 Theora 支持。</span></p><ul><li><span style="color:#000000">在 Firefox Nightly 中禁用 Theora，修复大量依赖 Theora 的测试，在合理的情况下将测试向量转换为 vp9 等，否则删除测试。删除 Theora 意味着 Firefox 中不再有 OGG 视频编解码器，并且还简化了 OGG 解码器。</span></li><li><span style="color:#000000">添加一些遥测功能，在以下情况下进行 pings back：</span><ul><li><span style="color:#000000">媒体加载失败 —— 唯一的源是包含 Theora 音轨的媒体</span></li><li><span style="color:#000000">媒体加载成功，但 HTMLMediaElement 有多个 &lt;source&gt; 且 Theora 源高于最终选中的源列表</span></li></ul></li><li><span style="color:#000000">再等待几个周期，也许可以将其扩展到「early beta」，类似于测试版周期的前 3 个或第 4 个测试版。</span></li><li><span style="color:#000000">如果一切顺利，在 Chromium 稳定版发布的同一时间弃用该版本。</span></li></ul><p><span style="color:#121212">更多详情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1860492" target="_blank">此处</a>。</span></p><p><strong><span style="color:#121212">相关阅读：</span></strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/263239/chrome-remove-theora-support" target="_blank">Chrome 将移除 Theora 支持</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 03:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264570/firefox-investigate-removing-theora-support</guid>
            <link>https://www.oschina.net/news/264570/firefox-investigate-removing-theora-support</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Redis 创始人用 C 语言编写最小聊天服务器：Smallchat]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Redis 创始人 antirez 用纯 C 语言代码写了一个聊天服务器的最小编程示例：Smallchat。</p><p><img height="1662" src="https://static.oschina.net/uploads/space/2023/1102/110119_qGgj_2720166.png" width="3050" referrerpolicy="no-referrer"></p><p><em>Smallchat 源代码已托管至 GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantirez%2Fsmallchat" target="_blank">https://github.com/antirez/smallchat</a></em></p><p>可以看到，Smallchat 的核心代码仅 300 多行。antirez 称删除空行和注释后其实只有 200 多行。</p><p><img height="524" src="https://static.oschina.net/uploads/space/2023/1102/110146_uksl_2720166.png" width="1406" referrerpolicy="no-referrer"></p><p>antirez&nbsp;表示，编写这个示例是为了帮助他的前端开发朋友了解系统编程知识，比如单个进程执行多路复用、获取客户端状态，并在客户端拥有新数据后尝试快速访问此类状态，等等。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264564</guid>
            <link>https://www.oschina.net/news/264564</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果 M3、M3 Max 芯片首个 Geekbench 跑分出炉]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>iMac 2023 已经出现在了 Geekbench 上。这款 iMac 搭载了 4.05 GHz 的<strong>基础版 M3 芯片</strong>，配备 16GB 内存，运行 macOS 14.1，单核最高 3076 分，多核 11863 分。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-966efdd0f8e637293209051e4e7778eb47d.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9e898b0752bd8dd21c976fd8a07c2fa8397.png" referrerpolicy="no-referrer"></p><p>作为对比，目前 Geekbench 中收录的 Mac 单核最高分为 Mac Studio (2023) 的 2803 分<strong>（M2 Max）</strong>，多核为 21316 分<strong>（M2 Ultra）</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d660971c507ccf85d086bf70470a9bad4be.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c8c00a499453f65a78223339cd941c947bd.png" referrerpolicy="no-referrer"></p><hr><p>M3 Max 的 Geekbench 初步跑分结果显示，16 英寸 MacBook Pro 与配备 M2 Ultra 的 Mac Studio 不相上下。</p><p>配备 M3 Max 的 16 英寸 MacBook Pro 要到 11 月中旬才能与用户见面，但已经有人开始进行基准测试。初步结果显示，苹果的 M3 系列的高阶型号性能进步惊人。</p><blockquote><p><em>via&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbrowser.geekbench.com%2Fsearch%3Fq%3Dm3%2Bmax" target="_blank">https://browser.geekbench.com/search?q=m3+max</a></u></em></p></blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2edfd240050d6e885d3408299f3a04622c2.png" referrerpolicy="no-referrer"></p><p>在 GeekBench 跑分库上，搭载 M3 Max 芯片的设备标识符为 Mac15,9，目前共有 4 条信息，其中一条单核成绩跑分为 2943 分，多核为 21084 分。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4930b3391b64b1d8b89c8a69491dafe7e6e.png" referrerpolicy="no-referrer"></p><p>相比较而言，搭载 M2 Ultra 的 Mac Studio 单核得分为 2692 分，多核得分为 21231 分。以上述多核成绩最高的一条进行比较，<strong>M3 Max 单核比 M2 Ultra 高 9%，多核仅低 0.6%。</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5c4d0ffb64990a9490c6f696fa881992046.png" referrerpolicy="no-referrer"></p><hr><p>Geekbench 等基准测试工具提供的分数是比较性能指标的简单参考点。由于环境、温度、电池寿命、后台任务等因素的影响，不同硬件在运行时分数会略有波动。</p><p>此外，Geekbench 也无法测试特定的硬件系统，如媒体引擎、硬件光线追踪支持、动态缓存或加速网格映射。更广泛的实际测试数据将揭示 M3 Max 到货后的实际性能表现。</p><p><strong>相关阅读：<u><a href="https://www.oschina.net/news/264233/apple-m3-silicon">苹果发布 M3 系列芯片，采用 3nm 工艺、支持「动态缓存」技术</a></u></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264561</guid>
            <link>https://www.oschina.net/news/264561</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Sermant 1.2.0 release 版本新特性速览]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F413986%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">重磅更新！Sermant 1.2.0 release 版本新特性速览</a>》，作者：华为云开源。</p><p>10 月，Sermant 社区正式发布了 1.2.0 release 版本，距离上一次的大版本发布仅三个月。本次新版本带来了多个令人兴奋的新特性，主要包含 Sermant Agent 框架能力的优化和提升以及新增了流量标签透传插件，将极大地提升用户和开发者的体验，帮助大家将 Sermant 运用到更多的流量治理场景中。</p><p><strong>（Sermant 官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsermant.io%2Fzh" rel="nofollow" target="_blank">https://sermant.io/zh</a>）</strong></p><span id="OSC_h1_1"></span><h1>一、Sermant Agent 框架能力提升</h1><p>1.2.0 release 版本中，对诸多能力进行了优化或新增，包括支持 Sermant Agent 框架和插件的动态安装和动态卸载、支持动态配置服务对接 Nacos 配置中心、更好的类隔离能力、JDK11 和 JDK17 的兼容等。在框架加持这些新版本特性后，可以使 Sermant 的开发和体验更加友好，同时也拓展出更多的 Sermant 的使用场景。</p><span id="OSC_h2_2"></span><h2>1.1 Sermant Agent 框架以及插件的动态安装/卸载</h2><p>新版本中，Sermant 将原本默认的通过 premain 来启动 Sermant Agent 的方式改进为支持 premain 和 agentmain 两种方式启动，其中 premain 方式与此前版本使用方式一致。</p><p>新增的 agentmain 启动方式是为了支持 Agent 和插件的热部署方式，premain 方式需要在应用程序启动时挂载 Agent，而 agentmain 可以在应用程序运行时进行动态挂载 Agent，也可以在运行时动态地卸载 Sermant，在故障注入等需要动态进行字节码增强的场景中起到非常重要的作用。动态安装/卸载插件和动态安装/卸载 Agent 一样，用于服务治理场景中需要在应用运行时动态添加或移除额外功能的场景，例如在故障注入场景中通过动态地挂载不同的插件来实现注入不同的故障类型。</p><p>下图为 Sermant 的热插拔能力的示意图，在初始状态可以通过动态挂载 Agent 的能力安装字节码增强框架，然后可以通过动态挂载/卸载插件的能力在运行态增减所需服务治理能力，也可以直接将整个 Agent 进行卸载。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20231031112130.66449741674660850648477742923963:50001231000000:2800:783EB78C84A7C56ED6FB79C911AC306EA74080AB3A7A46A4A78325B413B6FE03.png" referrerpolicy="no-referrer">​</p><p>图 - Sermant Agent 框架和插件的热插拔示意图</p><p>此项关键能力的更新使得 Sermant 的部署形态更加多样，适用场景更加广泛，使用者不再仅限于在启动时再挂载 Sermant，业务可以实现不停机注入服务治理能力。</p><span id="OSC_h2_3"></span><h2>1.2 支持动态配置服务对接 Nacos 配置中心</h2><p>动态配置中心为 Sermant 动态配置服务的配套组件，动态配置服务允许 Sermant 从动态配置中心拉取配置以实现丰富多样的服务治理能力。以往版本 Sermant 的支持的动态配置中心有 Zookeeper 和 Kie，新版本适配了 nacos 的数据模型，支持从 nacos 下发配置并监听。</p><ul><li><strong>Sermant 动态配置模型基于 Nacos 配置中心的实现方式</strong></li></ul><p>Nacos 自身的数据模型如下，通过 Namespace、Group、Date ID 能够定位到一个配置集：</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20231031112130.94919115110128519717355386037211:50001231000000:2800:725C15EDC238B97EACFA43F52C6D7093EE90C97A369EC8463EDE953F752968A9.png" referrerpolicy="no-referrer">​</p><p>图 - Nacos 数据模型</p><p><strong>Sermant 动态配置的 Group（分组信息）：</strong>将 Nacos 的 Namespace（命名空间）和配置分组（Group）组合起来作为 Sermant 的动态配置模型的分组信息。</p><p><strong>Sermant 动态配置的 Key（配置项名称）：<span>&nbsp;</span></strong>Nacos 的配置集 ID（Data Id）作为 Sermant 的动态配置模型的配置项名称。</p><p>配置集（Data Id）可以通过不同的 Namespace（命名空间）和配置分组（Group）进行隔离，不同的 Namespace（命名空间）和配置分组（Group）下可以存在名称相同的配置集（Data Id）。保证 Sermant 通过不同的 Group（分组信息）来对配置项进行隔离，同一个 Group（分组信息）下可以有相同 Key（配置项名称）。</p><ul><li><strong>使用 Nacos 作为 Sermant 的动态配置中心</strong></li></ul><p>将 Sermant 1.2.0 release 包中的/agent/config/config.properties 配置文件中的相关配置修改如下，即可使用 Nacos 作为动态配置中心：</p><ol><li># 指定配置中心的服务端地址，修改为 nacos 的地址</li><li>dynamic.config.serverAddress=127.0.0.1:8848</li><li># 指定动态配置中心类型, 取值范围为 NOP(无实现)、ZOOKEEPER、KIE、NACOS</li><li>dynamic.config.dynamicConfigType= NACOS</li></ol><p>Sermant 中动态配置的模型和接口是统一抽象的，开发者对于动态配置节点的监听器的开发与此前版本保持一致。动态配置中心在 Sermant 中的角色和作用可以阅读相关博客《如何利用动态配置中心在 JavaAgent 中实现微服务的多样化治理》。</p><span id="OSC_h2_4"></span><h2>1.3 更好的类隔离能力</h2><p>Sermant 在 1.2.0 版本中对此前的类隔离框架和机制做了全面的优化，不仅保证了不向宿主服务引入类冲突问题，避免在开箱即用时对宿主服务造成负面影响，同时也了保障框架与插件、插件与插件之间不会引入类冲突问题，避免插件开发者因为和其他服务治理插件产生类冲突问题而苦恼。</p><ul><li><strong>新版本的类隔离结构</strong></li></ul><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20231031112130.03262753633836709743319426991113:50001231000000:2800:7C7B04FC8522592AC3F6A4DDB2EDA768041F21831F8DE3C3577F22A6B32D27F3.png" referrerpolicy="no-referrer">​</p><p>图 – Sermant 的类隔离结构</p><ul><li>SermantClassLoader，破坏双亲委派，用于加载 Sermant 框架核心逻辑，并在 AppClassLoader 下隔离出 Sermant 的类加载模型。避免受到宿主服务自身复杂类加载结构的影响，减少应对不同类加载结构服务的适配需求。</li><li>FrameworkClassLoader，破坏双亲委派，主要作用是隔离 Sermant 核心能力所引入的三方依赖，避免向宿主服务及服务治理插件引入类冲突问题。目前的主要场景 ①用于隔离 Sermant 的日志系统，避免对宿主服务的日志系统产生影响 ②隔离 Sermant 框架的核心服务（心跳、动态配置、统一消息网关）所需三方依赖。</li><li>PluginClassLoader，遵循双亲委派，主要用于隔离 Sermant 各服务治理插件，避免不同服务治理插件之间产生类冲突问题。</li><li>ServiceClassLoader，破坏双亲委派，主要用于隔离插件中的依赖，通过该类加载器加载插件服务的相关 lib（插件服务会在插件加载时被 Sermant 初始化），开发者可任意引入三方依赖，无需关心对插件主逻辑的影响。</li></ul><p>其中的 PluginClassloader 和 ServiceClassloader 不仅在类隔离中起到至关重要的作用，更是一种长远的考虑，为每个插件设计独立的类加载器，使得 Sermant 可以平滑的进行插件动态安装&amp;卸载以及插件热更新。更详细的类隔离机制的介绍可以参阅相关博客《Sermant 类隔离架构解析——解决 JavaAgent 场景类冲突的实践》。</p><span id="OSC_h1_5"></span><h1>二、插件能力提升</h1><span id="OSC_h2_6"></span><h2>2.1 流量标签透能力</h2><p>在微服务架构中，流量标签用于对流量进行标记和分类，能够在微服务之间实现更精细的路由、负载均衡和流控等流量治理能力。Sermant 新版本插件部分本次主要新增了流量标签透传插件。该插件着手于解决流量标签在各种不同传媒介中 (通信协议、进程内外) 进行透传的问题，基于此能力可以实现全链路灰度发布、基于流量标签的流量控制等高阶服务治理功能。</p><ul><li><strong>流量标签透传插件简介</strong></li></ul><p>Sermant 对于流量标签透传分为两大类：跨进程透传和进程内透传。跨进程透传是指在不同的服务实例进程中传递流量标记，例如 http 请求的客户端和服务端。进程内透传是指在一个服务实例的进程内传递流量标签，包括线程内传递和跨线程传递。</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20231031112130.59757034719402065622390169640105:50001231000000:2800:76293BD5EDF4982F53CC195AC06C0B4057E47E5C52E020D17E8B91FD98E2F2BC.png" referrerpolicy="no-referrer">​图 – Sermant 中 http/rpc 请求的标签透传过程</p><p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20231031112130.96749315765046642733872549374631:50001231000000:2800:ABB2456FD592DE4549BD6EF19232F17C017B9CC36132B4CB581F22FE398BD5B6.png" referrerpolicy="no-referrer">​</p><p>图 – Sermant 中消息队列的标签透传过程</p><p>新版本发布的流量标签透插件实现了上述两类标签的透传，并且支持了 http 协议、rpc 协议、消息队列中间件，目前支持的组件包括 Apache HttpClient、OKHttp、Dubbo、GRPC、Kafka 等。</p><ul><li><strong>流量标签透传插件使用方式</strong></li></ul><p>该插件的使用支持静态配置和动态配置，只需将需要透传的流量标签做好配置，标签即可在全链路中进行透传，具体使用方式可参考官网使用文档。</p><p>流量标签透传作为 JavaAgent 中进行流量治理的基础能力，可以将其运用在全链路灰度发布、标签流控等复杂的流量治理场景，相关介绍可以参阅相关博客<span style="background-color:#ffffff; color:#333333">《</span><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411848" rel="nofollow" target="_blank">流量治理的基石——基于字节码增强的全链路流量标签透传》</a></u></p><span id="OSC_h1_7"></span><h1>三、总结</h1><p>本次更新主要带来了 Sermant Agent 框架和插件的动态挂载/卸载的支持、动态配置服务对 nacos 的支持、类隔离机制的优化以及流量标签透传能力的支持等。基于上述能力，Sermant 可以在诸如故障注入、流量治理、动态配置等服务治理的场景发挥更关键的作用。</p><span id="OSC_h1_8"></span><h1>结束语</h1><p>Sermant 作为专注于服务治理领域的字节码增强框架，致力于提供高性能、可扩展、易接入、功能丰富的服务治理体验，并会在每个版本中做好性能、功能、体验的看护，广泛欢迎大家的加入。</p><ul><li>Sermant 官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsermant.io%2Fzh" rel="nofollow" target="_blank">https://sermant.io/zh</a></li><li>GitHub 仓库地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fhuaweicloud%2FSermant" rel="nofollow" target="_blank">https://github.com/huaweicloud/Sermant</a></li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10140232</guid>
            <link>https://my.oschina.net/u/4526289/blog/10140232</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[何为「玲珑」，它从哪里来又要到哪里去？| 带你一文揭秘]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>2020 年，借鉴沙箱/容器的技术方案，玲珑原型的核心开发悄然完成；</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>2022 年，作为 deepin 发行版未来的核心特性，玲珑随 deepin v23 预览版共同发布，初步具备可用性；</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>2023 年，我们将玲珑项目代码、玲珑官网、玲珑商店等资产捐赠给开放原子开源基金会，欲汇聚更多产业力量，携手推动玲珑发展，加速生态建设......</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>那么到底何为「玲珑」？它从哪里来？又要到哪里去？接下来，此文为你一一揭秘。</span></p><h2><span>前言：软件包管理器的演进</span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>Linux 操作系统一直以其开源性质和灵活性而闻名，而要使 Linux 系统能够顺利安装并运行所需的软件，最关键的部分就是软件包管理器。&nbsp;</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>顾名思义，Linux 软件包管理器是一种在 Linux 操作系统上用于安装、更新和卸载软件包的工具。它的历史可以追溯到上世纪 90 年代，此时 Linux 正处于起步阶段，软件的安装必须手动下载源代码并编译，这对非技术用户来说是一项繁琐且困难的任务。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>这种情况下，先后催生了 dpkg 和 rpm，然而由于不能自动解决依赖关系，其使用起来依旧不便。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>直到 Debian 的 apt、Red Hat 的 up2date 的发布，包管理器可用性有了很大的提升。它们采用了一种被称为「依赖关系解决器」的算法，能够自动解决软件包之间的依赖关系，从而简化软件的安装和升级过程。但这在另一方面大大增加了复杂度，维护者们需要非常谨慎小心地处理，稍有不慎就会陷入「依赖地狱」，导致软件包系统发生故障。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>此外，还有许多其他的软件包管理器，如 yum、portage 和 pacman 等。包管理器的多样性给用户带来了更多选择，但缺点也十分显著：它们的软件包无法互通，这意味着一款软件要在其他发行版上使用，可能需要被重复打包。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>随着 Linux 内核对容器的支持、Docker 的诞生，Snap、Flatpak 等一批容器思想的包管理器也开始崭露头角。这类格式的软件包与系统环境几乎完全解耦，不再依赖系统上的库文件（AppImage 也是如此），应用分发开始逐步变得简单起来。但磁盘、内存占用较高，启动时间被不断延长等问题也随之而来，至今仍未被解决。</span></p><h2><span>探索：「玲珑」应运而生</span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>deepin 自 2015 年放弃基于 Ubuntu 作为上游，选择 Ubuntu 的非商业上游社区 Debian 作为研发的基础起，我们便收到了众多用户关于软件包管理上的问题反馈，常见的有：</span></p><ul><li><span>系统上能用的应用太少，可用的应用版本太老；</span></li><li><span>系统更新后，某些应用无法正常使用；</span></li><li><span>从其他来源获取某些应用软件安装后，包管理器无法正常工作，甚至系统无法继续使用。</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>以上这些问题有一个共性原因：<strong>依赖关系绑定太强。</strong>因系统底层库的关系，应用无法随意更新，在底层库有接口变动时，应用需要重新适配才能正常工作。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>在意识到这些问题后，我们开始尝试使用新的软件包管理器。</span></p><ul><li><span>在 deepin 上适配 Snap：由于 Snap 在除 Ubuntu 系统环境外有诸多兼容性问题，遂放弃。</span></li><li><span>将部分自研应用转化为 AppImage：AppImage 有着不错的可移植性，这些应用可以很轻松地在其他发行版上使用。但它没有集中的仓库存储和软件包管理功能，也不提供 Snap、Flatpak 同一级别的沙箱，安全性无法保障，不适合作为操作系统的默认软件包管理方式。</span></li><li><span>2017 年，deepin 对 Flatpak 格式进行了跟进，完成了 100+ 的软件包构建工作，后因其应用体积较大，磁盘占用过多、Bug 修复缓慢等各种原因没有继续适配。&nbsp;</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>在经历过种种「折腾」后，基于对各类包管理器的了解，我们决定自己设计一套软件包管理系统。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>在经过 3 个多月的技术调研，1 年多的原型验证、技术方案完善和产品打磨后，<strong>最终一套先进的解决方案——「玲珑」应运而生。</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img alt="" height="500" src="https://www.deepin.org/wp-content/uploads/2023/08/1-1-300x192.png" width="782" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span>顶层组件关系图</span></p><ul><li><span>应用沙箱 (ll-box) ：按照 OCI 标准设计的应用沙箱运行环境，利用内核 Cgroup、Namespace 特性将应用与宿主机环境隔离，限制系统资源的使用。</span></li><li><span>应用管理服务 (ll-service/ll-cli) ：提供应用沙箱环境创建，系统兼容性问题处理等功能。完成对应用的安装状态/运行状态管理。</span></li><li><span>权限管理代理服务 (ll-dbus-proxy/ll-fuse-proxy) ：提供权限管理功能，包括 DBus 接口以及文件接口。</span></li><li><span>应用构建工具（ll-builder）：提供容器化的应用构建环境，方便开发者在不同的环境上构建出一致性的应用。</span></li><li><span>单独打包格式（uab/AppBundle）：Uniontech Application Bundle，应用包封装格式，提供可直接运行的二进制包格式。</span></li><li><span>仓库系统（ll-repo-server）：提供包上传、下载、信息统计、查询等功能，底层存储使用 OSTree。</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><img alt="" height="409" src="https://www.deepin.org/wp-content/uploads/2023/08/2-300x172.png" width="713" referrerpolicy="no-referrer"></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span>运行视图</span></p><h2><span>成果：解决兼容性问题、性能大幅提升</span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>此前，国内软件生态建设尚不成熟，软件兼容性、安全性问题频出，在面向不同的操作系统进行应用打包和分发时，会额外耗费大量的时间和资源。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>而玲珑的出现，无疑为解决这一难题提供了新思路。玲珑的隔离技术可以将应用与系统进行完全解耦，从而彻底解决系统与应用、应用与应用之间因升级引起的兼容性问题 ，同时减少不同操作系统下分发时的打包次数。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span><img alt="" height="418" src="https://www.deepin.org/wp-content/uploads/2023/08/3-300x133.png" width="943" referrerpolicy="no-referrer"></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span>传统架构 Vs 玲珑架构</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>当前，玲珑的基础设施已较为完善，衍生出了 5 个项目，共 9 个组件。</span></p><ol><li><img alt="" height="447" src="https://www.deepin.org/wp-content/uploads/2023/08/4-300x145.png" width="925" referrerpolicy="no-referrer"></li></ol><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span>项目组件概述</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>相比其他类似软件包格式，玲珑在启动速度、资源占用方面具有许多优势：</span></p><ul><li><span>使用非全量运行时（宿主系统+Runtime），整体体积较小；</span></li><li><span>由于复用宿主系统上的库，可以使用到部分已经加载到内存中的库文件，启动速度会更快，同一应用在玲珑下启动速度提升显著；</span></li><li><span>提供开发库托管服务，类似 NuGet，方便开发者进行开发；</span></li><li><span>支持 Rootless（无特权）沙箱。</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span><img alt="" height="348" src="https://www.deepin.org/wp-content/uploads/2023/08/5-300x108.png" width="967" referrerpolicy="no-referrer"></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span>软件包大小统计</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span><img alt="" height="555" src="https://www.deepin.org/wp-content/uploads/2023/08/6-300x214.png" width="778" referrerpolicy="no-referrer"></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><span>软件包启动耗时统计</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>在最新版本 deepin v23 上，已预装十多款左右玲珑格式自研应用。玲珑网页商店内，常用应用已上架 120 余款，如 QQ、微信、网易云音乐、迅雷等，累计下载量当前已达 40w+。</span></p><h2><span>未来：助力操作系统软件包生态健康发展</span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>未来，我们将从权限管控、用户交互及可用软件数量等方面着手，对玲珑进行进一步加强优化。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>1、权限管控</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>当前玲珑文件访问文件的权限较为单一，只能在应用启动前处理目录的挂载，未挂载的目录无法被启动后的应用访问到。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>未来将会支持文件访问权限的动态管控，无论应用启动与否均可管理，同时控制中心会同步适配玲珑的权限管控，提供应用权限管理界面。&nbsp;</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>2、用户交互</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>目前玲珑应用的更新需要用户手动命令行更新，需要一定的 Linux 基础。且当软件包出现问题时，无法直接查询到构建源头的信息，如 git 项目的 hash 值。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>未来，应用商店将支持玲珑应用更新。同时支持溯源，对开发者来说能快速查询到软件包使用的源文件 hash 值，更容易追踪和解决问题。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>3、软件包生态</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>生态建设需要大家共同发力，我们目前已在着手开发相关软件包转换工具，可以将现有的 deb、appimage 等格式软件包轻松地转换成玲珑应用。同时也在推动已有合作软件厂商对玲珑的适配。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>与其踽踽独行，不如结伴而行，生态建设需要大家共同努力。此前，deepin 开源社区已和北京航空航天大学开展暑期共建开源生态合作，已有众多北航学子参与到生态共建中来。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>我们衷心希望玲珑能够解决多发行版应用分发困难的问题，同时也期待更多的感兴趣的朋友加入我们，共建应用分发体系，为操作系统软件生态健康发展贡献力量。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264558</guid>
            <link>https://www.oschina.net/news/264558</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[vLLM —— 快速易用的 LLM 推理和服务库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>vLLM 是一个快速且易于使用的 LLM 推理和服务库。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>vLLM 的速度很快：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>最先进的服务吞吐量</li><li><strong>使用 PagedAttention&nbsp;</strong>高效管理 <span style="background-color:#ffffff; color:#1f2328">attention key 和 value memory</span></li><li>连续批处理传入请求</li><li>优化的 CUDA 内核</li></ul><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>vLLM 灵活且易于使用：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>与流行的 Hugging Face 模型无缝集成</li><li>高吞吐量服务与各种解码算法，包括<em>并行采样</em>、<em>波束搜索</em>等</li><li>对分布式推理的张量并行支持</li><li>流输出</li><li>兼容 OpenAI 的 API 服务器</li></ul><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>vLLM 无缝支持许多 Hugging Face 模型，包括以下架构：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>Aquila &amp; Aquila2 (<code>BAAI/AquilaChat2-7B</code>,<span>&nbsp;</span><code>BAAI/AquilaChat2-34B</code>,<span>&nbsp;</span><code>BAAI/Aquila-7B</code>,<span>&nbsp;</span><code>BAAI/AquilaChat-7B</code>, etc.)</li><li>Baichuan (<code>baichuan-inc/Baichuan-7B</code>,<span>&nbsp;</span><code>baichuan-inc/Baichuan-13B-Chat</code>, etc.)</li><li>BLOOM (<code>bigscience/bloom</code>,<span>&nbsp;</span><code>bigscience/bloomz</code>, etc.)</li><li>Falcon (<code>tiiuae/falcon-7b</code>,<span>&nbsp;</span><code>tiiuae/falcon-40b</code>,<span>&nbsp;</span><code>tiiuae/falcon-rw-7b</code>, etc.)</li><li>GPT-2 (<code>gpt2</code>,<span>&nbsp;</span><code>gpt2-xl</code>, etc.)</li><li>GPT BigCode (<code>bigcode/starcoder</code>,<span>&nbsp;</span><code>bigcode/gpt_bigcode-santacoder</code>, etc.)</li><li>GPT-J (<code>EleutherAI/gpt-j-6b</code>,<span>&nbsp;</span><code>nomic-ai/gpt4all-j</code>, etc.)</li><li>GPT-NeoX (<code>EleutherAI/gpt-neox-20b</code>,<span>&nbsp;</span><code>databricks/dolly-v2-12b</code>,<span>&nbsp;</span><code>stabilityai/stablelm-tuned-alpha-7b</code>, etc.)</li><li>InternLM (<code>internlm/internlm-7b</code>,<span>&nbsp;</span><code>internlm/internlm-chat-7b</code>, etc.)</li><li>LLaMA &amp; LLaMA-2 (<code>meta-llama/Llama-2-70b-hf</code>,<span>&nbsp;</span><code>lmsys/vicuna-13b-v1.3</code>,<span>&nbsp;</span><code>young-geng/koala</code>,<span>&nbsp;</span><code>openlm-research/open_llama_13b</code>, etc.)</li><li>Mistral (<code>mistralai/Mistral-7B-v0.1</code>,<span>&nbsp;</span><code>mistralai/Mistral-7B-Instruct-v0.1</code>, etc.)</li><li>MPT (<code>mosaicml/mpt-7b</code>,<span>&nbsp;</span><code>mosaicml/mpt-30b</code>, etc.)</li><li>OPT (<code>facebook/opt-66b</code>,<span>&nbsp;</span><code>facebook/opt-iml-max-30b</code>, etc.)</li><li>Qwen (<code>Qwen/Qwen-7B</code>,<span>&nbsp;</span><code>Qwen/Qwen-7B-Chat</code>, etc.)</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 02:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/vllm</guid>
            <link>https://www.oschina.net/p/vllm</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 跨平台迷你计算视觉库 YMCV]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-ymcv 简介" class="anchor" href="https://gitee.com/yao_mi/ymcv#ymcv%E7%AE%80%E4%BB%8B"></a>YMCV 简介</h1><p>库名中文简称 <strong>妖米 CV</strong>，英文全称 <strong>your mini computer vision</strong>，意为你的迷你计算机视觉，含义有双重，第一重含义是：一个迷你的 CV 库；第二重含义是：可用于迷你计算机（如嵌入式计算机）的视觉库。</p><p>这个库是跨平台的，源码由 C 语言编写，可以在任意平台编译，这个库也可以通过选择开启部分功能从而实现将库裁剪到你所必须的大小，降低对小型计算机的源码空间占用</p><img title="" src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E5%8A%9F%E8%83%BD%E9%80%89%E6%8B%A9%E7%BC%96%E8%AF%91.png" alt="" referrerpolicy="no-referrer"><h2><a id="user-content-项目起源" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E9%A1%B9%E7%9B%AE%E8%B5%B7%E6%BA%90"></a>项目起源</h2><p>起源于我的个人需要，于 2019 年暑假完成了 YMKV 图像处理库编写，当时主要为了运行在 stm32 上，编写环境是 MDK。</p><p>而后为了方便验证算法，将其移植到 PC 环境上开发，除了算法以外，诸如显示，鼠标位置获取，输入等这些交互的内容，借用 EGE 库来完成。老粉估计知道，最初我使用 CodeBlocks 开发，但考虑很多人不怎么用它，后面换到了 vs2019 上进行开发。目前提供了 windows 环境下的 X86 和 STM32 版本的 Demo，以及 Linux 环境下的 ubuntu20.04-amd64 以及 esp32 版本的 Demo，大家可以自行测试。</p><blockquote><p>需要说明一下，windows 版本的 Demo 中文件编码默认编码是 gbk/gb2312，而 Linux 版本用的是 utf-8 编码，如果要在工程中创建文件，需要确保文件编码格式一致</p></blockquote><h2><a id="user-content-项目架构" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E9%A1%B9%E7%9B%AE%E6%9E%B6%E6%9E%84"></a>项目架构</h2><p>这个项目的架构经过多次改良，目前确定了一款耦合度最小的架构，方便与任意平台兼容；另一方面为了方便大家使用，和原始的库相比，采用面向对象的方式进行了重构。</p><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/YMCV%E6%A0%B8%E5%BF%83%E6%9E%B6%E6%9E%84.png" alt="" referrerpolicy="no-referrer"></p><p>项目分为三层架构，顶层是用户层，它是对核心层的包裹，方便用户对他进行调用，核心层的内容为左边那列内容，其中黑体的 QRcode 是二维码相关的编码和解码功能，这部分我是将第三方库进行了压缩打包，底层 congfig 是配置信息，内存管理以及 IO 文件接口的定义。</p><blockquote><p>文件接口是由宏定义来完成，由于读写图片，如果移植到嵌入式可用我之前发布的 uFatfs 文件系统，他是基于 Fatfs 的封装，以便兼容 c 标准库 stdio 的文件系统。图中右侧文件 IO 以及 Debug 都是独立于核心层的，只依赖底层的配置。</p></blockquote><h2><a id="user-content-项目代码命名规则" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81%E5%91%BD%E5%90%8D%E8%A7%84%E5%88%99"></a>项目代码命名规则</h2><p>为了方便辨认数据类型，我约定的命名规则，平台通用数据类型用全小写</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">int8，int16，uint8，uint16，uint32，float32,.....</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>自定义数据类型的话，需要加 CV 头：</p><blockquote><p>结构体采用 CV+小写</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">//图像</span></span><span id="LC2" class="line"><span class="k">typedef</span><span class="k">struct</span></span><span id="LC3" class="line"><span class="p">{</span></span><span id="LC4" class="line"><span class="n">uint16</span><span class="n">width</span><span class="p">;</span></span><span id="LC5" class="line"><span class="n">uint16</span><span class="n">height</span><span class="p">;</span></span><span id="LC6" class="line"><span class="n">CVImgType</span><span class="n">type</span><span class="p">;</span></span><span id="LC7" class="line"><span class="n">_color8_t</span><span class="o">*</span><span class="n">data</span><span class="p">;</span></span><span id="LC8" class="line"><span class="p">}</span><span class="n">CVimage</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>结构体指针采用 CV+大写</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">typedef</span><span class="n">CVimage</span><span class="o">*</span><span class="n">CVIMAGE</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>枚举类型 CV+大小写混合（单词首字大写）</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">//图像类型</span></span><span id="LC2" class="line"><span class="k">typedef</span><span class="k">enum</span></span><span id="LC3" class="line"><span class="p">{</span></span><span id="LC4" class="line"><span class="n">CVBinaryType</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="c1">// 二值图</span></span><span id="LC5" class="line"><span class="n">CVTrimapType</span><span class="p">,</span><span class="c1">//三色图</span></span><span id="LC6" class="line"><span class="n">CVGrayType</span><span class="p">,</span><span class="c1">//灰度图</span></span><span id="LC7" class="line"><span class="n">CVRgb16Type</span><span class="p">,</span><span class="c1">//RGB565</span></span><span id="LC8" class="line"><span class="n">CVFGrayType</span><span class="p">,</span><span class="c1">//float gray</span></span><span id="LC9" class="line"><span class="n">CVIGrayType</span><span class="p">,</span><span class="c1">//int gray</span></span><span id="LC10" class="line"><span class="n">CVCGrayType</span><span class="p">,</span><span class="c1">//complex gray</span></span><span id="LC11" class="line"><span class="p">}</span><span class="n">CVImgType</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>函数名： YMCV+首字母大写</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">//创建一张空图像</span></span><span id="LC2" class="line"><span class="n">CVIMAGE</span><span class="nf">YMCV_Creat_Img_Creat</span><span class="p">(</span><span class="n">uint16</span><span class="n">width</span><span class="p">,</span><span class="n">uint16</span><span class="n">height</span><span class="p">,</span><span class="n">CVImgType</span><span class="n">Imgform</span><span class="p">)</span></span><span id="LC3" class="line"><span class="p">{</span></span><span id="LC4" class="line"><span class="p">....</span></span><span id="LC5" class="line"><span class="p">....</span></span><span id="LC6" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></blockquote><h2><a id="user-content-项目文件分布说明" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E5%88%86%E5%B8%83%E8%AF%B4%E6%98%8E"></a>项目文件分布说明</h2><p>打开项目我们能看到如下几个文件夹，其中最重要的是 YMCV 部分，移植库只需要该部分</p><blockquote><p>-- EGELIB ：交互和显示的库
-- EGE_LCD：基于 ege 库，搭建用于 YMCV 的显示和交互功能，函数
-- ImageSource：用于演示的图片数据，这里是 c 的数组文件</p><p>-- Demo：用于演示库的使用例程，里面有大部分函数的使用方法。我为这个库配备了 150 多个 Demo 供大家使用参考</p><p>-- YMCV：算法库的源码部分</p></blockquote><p>打开 YMCV 文件夹，文件列表如下：</p><blockquote><p>-- -- CONFIG：算法库的配置，移植其他平台的话只需要修改该文件夹的内容</p><p>-- -- OPOBJ：算法使用到的对象管理，对象创建和销毁</p><p>-- -- CORE：算法核心源码部分</p><p>-- -- USER：用户层封装，可以使用 YMCV.funName(...) 方式调用函数</p><p>-- -- DEBUG：调试工具，可以提示错误信息</p><p>-- -- IOFILE：和文件相关的操作，该库使用到的文件读写部分都在这边，比如图片和视频的读写</p><p>-- -- Code：jpeg，avi，gif 等的编码和解码</p><p>-- -- QRCODE：条码，二维码，AprilTag 相关的内容</p></blockquote><h1><a id="user-content-项目使用说明" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>项目使用说明</h1><h2><a id="user-content-运行 windows-x86 示例 demo" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E8%BF%90%E8%A1%8Cwindows-x86%E7%A4%BA%E4%BE%8Bdemo"></a>运行 windows-X86 示例 demo</h2><p>首先你需要安装一下 vs2019，然后下载这个项目并打开（x86-Debug 模式），配置你的 EGE 库路径 (目前已经换成相对路径，下载完不配置也可以运行，如果要移植到你个人的项目中才需要做下面的配置)：</p><blockquote><p>选择 YMCV 项目，右键，选择属性
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE0.png" alt="" referrerpolicy="no-referrer">
更换附加包含目录，我的文件下载下来放在 D:\Documents\GitFiles\YMCV_LIB，所以配置如下图所示
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE1.png" alt="" referrerpolicy="no-referrer">
同样更换附加库目录
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE2.png" alt="" referrerpolicy="no-referrer">
注意这里有两个路径，可以通过编辑展开看到：
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE3.png" alt="" referrerpolicy="no-referrer"></p></blockquote><p>然后就配置完了，接着选择相应的 demo 运行，展开 demo 筛选器：</p><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/demo0.png" alt="" referrerpolicy="no-referrer"></p><p>如先运行环境测试，鼠标移到 0、EGE_Test.c 上，右键，并选择属性，就能看到</p><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7%E6%9F%A5%E7%9C%8B.png" alt="" referrerpolicy="no-referrer"></p><p>然后将 <strong>是</strong>  改成  <strong>否</strong>  即可，然后点击运行，能出现如下画面即可：</p><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/demoOk.png" alt="" referrerpolicy="no-referrer"></p><p>测试完成后，将其属性重新设置为从生成中排除，选择你要运行的 Demo，将排除属性选择否即可。</p><h2><a id="user-content-运行 windows-stm32 示例 demo" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E8%BF%90%E8%A1%8Cwindows-stm32%E7%A4%BA%E4%BE%8Bdemo"></a>运行 windows-stm32 示例 demo</h2><p>首先你需要安装一下 Keil-MDK5，然后下载这个项目并打开，配置你的路径 (目前已经换成相对路径，下载完不配置也可以运行，如果要移植到你个人的项目中才需要做下面的配置)：</p><blockquote><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/stm32-cfg.png" alt="" referrerpolicy="no-referrer"></p></blockquote><p>也就是和配置相关的头文件路径添加，YMCV 内部采用相对路径，可以不需要添加和 YMCV 文件夹相关的路径</p><p>选择要运行的 Demo 编号</p><blockquote><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/stm32demoChose.png" alt="" referrerpolicy="no-referrer">
所有的 Demo 文件名都放置在 DemoChose.txt 中，可以通过它浏览具体运行的是哪个 Demo</p></blockquote><p>查看当前 Demo 源码</p><blockquote><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/stm32scandemo.png" alt="" referrerpolicy="no-referrer"></p></blockquote><p>选择对应的 Demo，右键即可打开，会自动跳转到相应文件中</p><p>运行 Demo</p><blockquote><p>这个我就不细说了吧，能看到这里相信你应该不是小白了，具体情况请去看 stm32 的教程</p></blockquote><h2><a id="user-content-运行 ubuntu-amd64 示例 demo" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E8%BF%90%E8%A1%8Cubuntu-amd64%E7%A4%BA%E4%BE%8Bdemo"></a>运行 ubuntu-amd64 示例 demo</h2><p>首先你需要安装一个 Ubuntu 系统，我的是 Ubuntu20.04，然后你克隆这个项目到本地上。这里我提供了两种方式运行，其中一种是需要安装一个 vscode，然后用 vscode 打开目录所在文件夹</p><blockquote><p>左上角-&gt;文件-&gt;打开文件夹-&gt;选择 Linux-YMCV 文件夹，然后打开就可以了</p></blockquote><p>选择 Demo 并运行（当然前提是你需要去安装一下 C/C++开发环境的插件，这个大家自己网上查一下怎么安装吧，安装很简单的）</p><blockquote><p>直接点击 Demo 展开，点击一下你要运行的 Demo，它会跳到窗口上，然后点击运行
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/ubuntuDemoChose.png" alt="" referrerpolicy="no-referrer">
之所以要这么做，是由.vscode 下面的 task.json 文件决定的
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/ubuntuDemo-cfg.png" alt="" referrerpolicy="no-referrer"></p></blockquote><p>其中绿色的箭头就是我们上面要选择的调试器的名称，红色的箭头即是将当前活动窗口的文件添加编译，若没有选择 Demo 则会报错，所以当你查看其他文件以后，要运行整个项目前需要先将活动窗口切换回 Demo 文件</p><p>运行成功之后便会得到如下画面</p><blockquote><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/ubuntuDemoResult.png" alt="" referrerpolicy="no-referrer"></p></blockquote><p>另一种是直接使用 CMakeLists.txt 运行，你只需要运行脚本文件 makefast.sh，并且后面跟上要运行的 Demo 即可，命令如下：</p><blockquote><p>sh ./makefast.sh  ./Demo/xxxdemo.c
(小提示：xxxdemo 不用完全自己输入，比如选择 1.1、xxxdemo.c，只要输入「1.1、」然后按 Tab 键即可自动补全)
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/ubuntuDemo-shRun.png" alt="" referrerpolicy="no-referrer"></p></blockquote><h2><a id="user-content-运行 ubuntu-esp32 示例 demo" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E8%BF%90%E8%A1%8Cubuntu-esp32%E7%A4%BA%E4%BE%8Bdemo"></a>运行 ubuntu-esp32 示例 demo</h2><p>首先，你需要安装一下乐鑫的 ESP32 开发环境，ubuntu20.04 安装我参考的是<a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fweixin_41594119%2Farticle%2Fdetails%2F121364800">Ubuntu20.04 下 ESP32 环境搭建_Fpits 的博客-CSDN 博客</a></p><p>然后在你的 VScode 上配置开发环境，这些我就详细说了。环境安装好了以后，你可以克隆本项目到本地，然后用 vscode 打开目录所在文件夹</p><blockquote><p>左上角-&gt;文件-&gt;打开文件夹-&gt;选择 ESP32-YMCV 文件夹，然后打开就可以了</p></blockquote><p>将你的 LCD 连接到板子上，我使用的安可信的 esp32-cam 板子，对应 LCD 连接引脚为：</p><blockquote><p>CLK -&gt;IO12</p><p>SDIN -&gt;IO13</p><p>RST -&gt;IO15</p><p>DC -&gt;IO14</p><p>BLK -&gt;IO2</p><p>另外需要注意的是，安可信的板子上：</p><p>IO0 实际上是作为摄像头的 xclk，所以使用摄像头时该引脚务必悬空</p><p>IO4 是摄像头 LED 引脚，该端口也不能接其他器件</p></blockquote><p>选择 Demo 并运行（这个移植的 STM32 版本的 Demo，怎么选择可以参考那边，即下图的箭头 1 处）</p><blockquote><p><img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/esp32demoChose.png" alt="" referrerpolicy="no-referrer"></p></blockquote><p>然后点击箭头 2 所指的圆桶进行编译。编译结束后可以箭头 3 所指的小闪电下载到你的 esp32 上。</p><blockquote><p>当然，下载时会有一些细节，比如说选择对应的 USB 端口，波特率，以及需要 IO0 端口接地然后按复位键等等，大家自行参考 ESP32 官方资料</p></blockquote><p>顺带一提，YMCV 库位于 ESP32 工程的组件目录下。</p><h2><a id="user-content-demo 分类及说明" class="anchor" href="https://gitee.com/yao_mi/ymcv#demo%E5%88%86%E7%B1%BB%E5%8F%8A%E8%AF%B4%E6%98%8E"></a>demo 分类及说明</h2><p>0 - 基础环境测试</p><blockquote><p>0、EGE_Test : YMCV 基础环境测试，EGE 依赖测试</p></blockquote><p>1 - 基础图像操作</p><blockquote><p>1.1、ImageShowTest : 图像显示测试</p><p>1.2、ImageCopyTest : 图像拷贝测试</p><p>1.3、ImageFormChange : 图像格式转换</p><p>1.4、ImageAreaFill : 图像区域填充</p><p>1.5、ImageSeedFill : 图像种子填充</p><p>1.6、ImageRead : 图像文件读取</p></blockquote><p>2 - 图像通道渲染</p><blockquote><p>2.1、ChannelGray2binTest : 灰度图像二值化</p><p>2.2、ChannelGrayExposeAndColorTo : 灰度图曝光与染色</p><p>2.3、ChannelGrayInversAndBright : 灰度图反色与亮度增强</p><p>2.4、ChannelGrayContractAndLiner : 灰度图对比度增强与分段线性增强</p><p>2.5、ChannelGrayLogAndExp : 灰度图 log 对数、exp 指数增强</p><p>2.6、ChannelGrayGamaAndScurve : 灰度图γ曲线，S 曲线增强</p><p>2.7、ChannelGrayCstomAndHeatPalette : 灰度图自定义染色函数增强与热力图调色板渲染</p><p>2.8、ChannelRgb2binTest : 彩色图像二值化</p><p>2.9、ChannelRgbExposeAndColor : 彩色图像曝光与染色</p><p>2.10、ChannelRgbInversAndBright : 彩色图像反色与亮度增强</p><p>2.11、ChannelRgbContractAndLiner :  彩色图像对比度增强与分段线性增强</p><p>2.12、ChannelRgbLogAndExp : 彩色图像 log 对数、exp 指数增强</p><p>2.13、ChannelRgbGamaAndScurve : 彩色图像γ曲线，S 曲线增强</p><p>2.14、ChannelRgbCstom : 彩色图像自定义染色函数增强</p><p>2.15、ChannelRgbInversAndBright_1Param : 单通道渲染器 (反色、亮度增强) 渲染彩色图像</p><p>2.16、ChannelRgbContractAndLiner_1Param : 单通道渲染器 (对比度增强、分段线性增强) 渲染彩色图像</p><p>2.17、ChannelRgbLogAndExp_1Param : 单通道渲染器 (log 对数、exp 指数增强) 渲染彩色图像</p><p>2.18、ChannelRgbGamaAndScurve_1Param : 单通道渲染器 (γ曲线，S 曲线增强) 渲染彩色图像</p></blockquote><p>3 - 图像直方图</p><blockquote><p>3.1、HistGrayHistEq : 灰度图直方图均衡化</p><p>3.2、HistGrayLocalHistEq : 灰度图局部直方图均衡化</p><p>3.3、HistGrayHistMapTo : 灰度图直方图规定化</p><p>3.4、HistRgbHistEq : 彩色图像直方图均衡化</p><p>3.5、HistRgbHistMapTo : 彩色图像直方图规定化</p><p>3.6、HistBackProject : 灰度图直方图反投影</p></blockquote><p>4 - 图像空域渲染</p><blockquote><p>4.1、SpaceGrayGaussFilter : 灰度图空域高斯滤波</p><p>4.2、SpaceGrayLogFilter : 灰度图空域拉普拉斯-高斯滤波</p><p>4.3、SpaceGrayBilateralFilter : 灰度图空域双边滤波</p><p>4.4、SpaceGrayLocalMSEFilter : 灰度图空域局部均方差滤波</p><p>4.5、SpaceGrayAverAndMedFilter : 灰度图空域均值与中值滤波</p><p>4.6、SpaceGrayMinAndMaxFilter : 灰度图空域极大值与极小值滤波</p><p>4.7、SpaceGrayModeAndMidPointFilter : 灰度图空域众数与中点滤波</p><p>4.8、SpaceGrayMeanShiftFilter : 灰度图空域均值漂移滤波</p><p>4.9、SpaceGraySurfaceBlurFilter : 灰度图空域表面模糊滤波</p><p>4.10、SpaceGrayGuideFilter : 灰度图空域导向滤波</p><p>4.11、SpaceGrayCustomKernelFilter : 灰度图空域均自定义滤波核滤波</p><p>4.12、SpaceBinaryMorpRateFilter : 二值图形态学滤波</p></blockquote><p>5 - 图像频域渲染</p><blockquote><p>5.1、FreqGrayFFTAndIFFT : 灰度图像频域 FFT 与 IFFT 变换</p><p>5.2、FreqGrayGaussHFilter : 灰度图像频域高斯高通滤波</p><p>5.3、FreqGrayGaussLFilter : 灰度图像频域高斯低通滤波</p><p>5.4、FreqGrayButtterWorthHFilter : 灰度图像频域巴特沃斯高通滤波</p><p>5.5、FreqGrayButterWorthLFilter : 灰度图像频域巴特沃斯低通滤波</p><p>5.6、FreqGrayBandPassFilter : 灰度图像频域带通滤波</p><p>5.7、FreqGrayBandStopFilter : 灰度图像频域带阻滤波</p><p>5.8、FreqGrayDCTAndIDCT : 灰度图像频域 DCT 和 IDCT 变换</p><p>5.9、FreqGrayHarrDWTAndIDWT : 灰度图像频域 Harr 小波变换 DWT 和 IDWT</p><p>5.10、FreqGrayHarrHardThreshold : 灰度图像频域 Harr 小波硬阈值去噪</p></blockquote><p>6 - 图像几何变换</p><blockquote><p>6.1、GeomGrayStretch : 灰度图像最邻近插值拉伸</p><p>6.2、GeomGrayStretchL2 : 灰度图像线性插值拉伸</p><p>6.3、GeomGrayRotateWauto : 灰度图像旋转 (自适应动态窗口输出)</p><p>6.4、GeomGrayRotateWconst : 灰度图像旋转 (固定窗口输出)</p><p>6.5、GeomGrayLinerPolarAndInverse : 灰度图像线性极座标变换及其逆变换</p><p>6.6、GeomGrayLogPolarAndInverse : 灰度图像对数极座标变换及其逆变换</p><p>6.7、GeomGrayPerspective : 灰度图像透视投影变换</p></blockquote><p>7 - 图像分割</p><blockquote><p>7-1.1、BinaryGraySingleThresh : 灰度图像单阈值二值化</p><p>7-1.2、BinaryGrayDoubleThresh : 灰度图像双阈值二值化</p><p>7-1.3、BinaryGrayHistThresh : 灰度图像直方图 Otsu 阈值二值化</p><p>7-1.4、BinaryGrayIntegralThresh : 灰度图像积分图二值化</p><p>7-1.5、BinaryRGBDoubleThresh : 彩色图像 RGB 双阈值二值化</p><p>7-1.6、BinaryLABDoubleThresh : 彩色图像 LAB 双阈值二值化</p><p>7-1.7、BinaryLogicCal : 二值图逻辑运算 (与、或、非 )</p><p>7-1.8、BinaryMaskCal : 二值图掩码保留</p></blockquote><blockquote><p>7-2.1、EdgeGraySobel : 灰度图像二值化 Sobel 边缘检测</p><p>7-2.2、EdgeGrayLog : 灰度图像，拉普拉斯-高斯，边缘检测</p><p>7-2.3、EdgeGrayLaplace : 灰度图像拉普拉斯边缘检测</p><p>7-2.4、EdgeGrayCanny : 灰度图像 Canny 边缘检测</p><p>7-2.5、EdgeGraySobelConnect : 灰度图像 Sobel 边缘检测 (带局部相似连接)</p></blockquote><blockquote><p>7-3.1、RegionGrayGrowing : 灰度图像区域生长</p><p>7-3.2、RegionGraySplitandAndMerge : 灰度图像区域分裂与合并</p><p>7-3.3、RegionGrayKmeansSegment : 灰度图像 Kmeans 聚类</p><p>7-3.4、RegionGrayGMMSegment : 灰度图像 GMM 聚类</p><p>7-3.5、RegionGrayDistanceTransform : 灰度图像距离变换</p><p>7-3.6、RegionGrayTriMap : 灰度图像 Trimap 三色图生成</p><p>7-3.7、RegionGrayWatershed : 灰度图像分水岭分割</p><p>7-3.8、RegionGraySnake : 灰度图像 snake 轮廓提取</p><p>7-3.9、RegionGrayGrabCut : 灰度图像 grabCut 图割</p><p>7-3.10、RegionBinaryXY_AxisProjSeg : 二值图 xy 轴投影分割</p></blockquote><p>8 - 图像特征提取</p><blockquote><p>8.1、ImageColorBoxFind : 图像双阈值色块提取 (一个色块)</p><p>8.2、ImageColorBolosFind : 图像双阈值色块提取 (多个色块，最多 8 种色块)</p><p>8.3、BinaryAreaSave : 二值图大面积区域保留</p><p>8.4、BinaryWormFindLine : 二值图 Worm 直线查找 (支持 1 像素断裂)</p><p>8.5、ImageEDFindEdge : 灰度图 ED 边缘检测</p><p>8.6、ImageEDFindShape : 灰度图 ED 形状识别</p><p>8.7、ImageEDFindLines : 灰度图 ED 直线检测</p><p>8.8、ImageGrayHogFind : 灰度图 HOG 描述符提取</p><p>8.9、ImageGrayFaceLbpDesc : 灰度图人脸 LBP 直方图描述符提取</p><p>8.10、BinaryLinerRegressCal : 二值图像素回归 (最小二乘、泰尔森、RANSAC)</p><p>8.11、BinaryBoneThinAndCut : 二值图骨架细化与剪枝</p><p>8.12、BinaryEdgeTrance : 二值图边界跟踪</p><p>8.13、ImageFeatureMap : 灰度图特征图提取 (LBP、MRLBP、USAN)</p><p>8.14、GrayFeaturePointGet : 灰度图特征点提取 (susan、fast-9、agast、harris)</p><p>8.15、GrayFeatureDescribeGet : 灰度图 brief 特征描述符提取</p><p>8.16、BinaryHoughGet : 二值图霍夫变换</p><p>8.17、GrayRandonGet : 灰度图拉东变换及其逆变换</p><p>8.18、GrayStereoLM : 灰度图立体匹配 LineMatching</p></blockquote><p>9 - 图像目标匹配</p><blockquote><p>9.1、ImageGraySSIMCal : 灰度图结构相似性匹配</p><p>9.2、ImageGrayTemplate : 灰度图模板匹配</p><p>9.3、ImageGrayFaceCascade : 灰度图人脸 cascade</p><p>9.4、ImageGrayLBPClassify : 灰度图人脸 LBP 特征分类</p><p>9.5、ImageBinaryNumberDecisonTree : 灰度图数字决策树分类</p><p>9.6、ImageGrayPhaseCorrelate : 灰度图相位相关匹配</p><p>9.7、ImageFeatureDescribeMatch : 灰度图 brief 描述符匹配与单应性矩阵矫正</p><p>9.8、ImageGrayMeanShift : 灰度图 MeanShift 跟踪</p><p>9.9、ParticleFilterTracking : 灰度图粒子滤波跟踪</p><p>9.10、ImageGrayFacePointDect : 灰度图 40 点人脸特征点检测</p></blockquote><p>10 - 修复&amp;特效</p><blockquote><p>10.1、GrayRemovalFog : 灰度图何凯明暗通道去雾</p><p>10.2、BadImageColor : 灰度图污渍效果</p><p>10.3、GrayInPainting : 灰度图 inpaint 修复</p><p>10.4、ImageFishEye : 灰度图鱼眼效果及其矫正</p><p>10.5、ImageCartoon : 灰度图卡通效果</p><p>10.6、ImageRigidDeformation : 灰度图刚性变形效果</p></blockquote><p>11 - 数据处理&amp;机器学习</p><blockquote><p>11.1、FFT1d_Test : 一维 FFT 及 IFFT 处理数据测试</p><p>11.2、DCT1d_Test : 一维 DCT 及 IDCT 处理数据测试</p><p>11.3、DWT1d_Test : 一维 Harr 小波 DWT 及 IDWT 处理数据测试</p><p>11.4、FMat_Test : 矩阵运算测试 (转置、乘法、逆、伪逆、雅可比旋转法特征值和特征向量、Cholesky 分解、快速自乘法、初等变换、SVD 分解等等)</p><p>11.5、KmeansTest : Kmeans 数据分类训练和测试</p><p>11.6、GMM_Test : GMM 数据分类训练和测试</p><p>11.7、DecisionTree_Test : ID3 决策树数据分类训练和测试</p><p>11.8、LineSegmentsMerge : 线段合并测试</p><p>11.9、DelauneyTriangle : 由点集创建 Delauney 三角形</p></blockquote><p>12 - 条码&amp;二维码识别</p><blockquote><p>12.1、AprilTagDecode : 灰度图四月标签 (AprilTag) 识别</p><p>12.2、DataMatrixDecode : 灰度图 DM 码识别</p><p>12.3、QRDecode : 灰度图 QR 码 (二维码) 识别</p><p>12.4、BarDecode : 灰度图 bar 码 (条形码) 识别</p><p>12.5、QR_Encode : 灰度图 QR 码编码 (二维码生成)</p></blockquote><p>13 - 其他项目应用</p><blockquote><p>13.1、Scoring_System : 得分系统，自动判卷系统</p><p>13.2、Table_Recognize : 表格识别，表格线提取</p><p>13.3、Calibrating_Data : 40 点人脸特征点数据标定</p><p>13.4、FacePoint_Train : 40 点人脸特征点数据模型训练</p></blockquote><h2><a id="user-content-demo 运行结果展示" class="anchor" href="https://gitee.com/yao_mi/ymcv#demo%E8%BF%90%E8%A1%8C%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA"></a>demo 运行结果展示</h2><p>我把所有 demo 的运行结果示例都录成一个简短的视频，放在「例程测试结果」文件夹下，大家可以自行对照查看
<img src="https://gitee.com/yao_mi/ymcv/raw/master/%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%9B%BE%E7%89%87/%E4%BE%8B%E7%A8%8B%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C.png" alt="" referrerpolicy="no-referrer"></p><p>另外，大家可以先看看 0-1.MP4，这里面有 demo 切换的示例，从 demo0 切换到 demo1 如何配置（这个切换后面我就给切了，后面就没有了）。</p><h2><a id="user-content-移植其他平台" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E7%A7%BB%E6%A4%8D%E5%85%B6%E4%BB%96%E5%B9%B3%E5%8F%B0"></a>移植其他平台</h2><p>如移植 stm32 平台，首先需要将 YMCV 文件夹拷贝走</p><p>添加到你的项目下</p><p>然后打开 CONFIG 文件夹下的文件进行修改</p><p>首先我们打开 YMCV_Mem.c 文件，该文件管理则 YMCV 库的动态计算内存，我们将其改为自己的内存函数</p><p>然后我们打开 YMCV_PubDefine.h 文件，该文件管理着一些常数定义，如果我们用到文件操作，需要修改文件系统定义部分，换成我们自己平台下的文件系统函数（若使用 Fatfs，可以使用我封装过的 uFatfs）</p><p>最后打开 YMCV_PubType.h 文件看一眼，大部分时候该文件都不会需要修改</p><p>最后我们直接编译即可
....</p><p><strong>当然，这里我直接提供了 STM32 平台的 Demo，大家不用自己移植了，可以照着 Demo 移植到其他平台上，需要移植其他平台也可以联系我</strong>，当然我有时间可以帮忙移植，大家一起共筑应用生态，完结撒花。</p><h2><a id="user-content-更多教程" class="anchor" href="https://gitee.com/yao_mi/ymcv#%E6%9B%B4%E5%A4%9A%E6%95%99%E7%A8%8B"></a>更多教程</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F314022084">哔哩哔哩 - 妖米猫人主页</a></p><p>我比较懒，估计更新的比较慢，帮我剪视频的小伙伴工作了时间也不多，更新的就更慢了。。。我自己剪的比较拉跨，也没什么太大动力感觉。</p>]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/yao_mi/ymcv</guid>
            <link>https://gitee.com/yao_mi/ymcv</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何充分发挥 SQL 能力？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote>
  如何充分发挥 SQL 能力，是本篇文章的主题。本文尝试独辟蹊径，强调通过灵活的、发散性的数据处理思维，就可以用最基础的语法，解决复杂的数据场景。 
</blockquote><span id="OSC_h3_1"></span><h3>一、前言</h3><span id="OSC_h4_2"></span><h4><strong>1.1 初衷</strong></h4><p><strong>如何高效地使用 MaxCompute（ODPS）SQL ，将基础 SQL 语法运用到极致。</strong></p><p>在大数据如此流行的今天，不只是专业的数据人员，需要经常地跟 SQL 打交道，即使是产品、运营等非技术同学，也会或多或少地使用到 SQL ，如何高效地发挥 SQL 的能力，继而发挥数据的能力，变得尤为重要。</p><p>MaxCompute（ODPS）SQL 发展到今天已经颇为成熟，作为一种 SQL 方言，其 SQL 语法支持完备，具有非常丰富的内置函数，支持开窗函数、用户自定义函数、用户自定义类型等诸多高级特性，可以高效地应用在各种数据处理场景。</p><p>如何充分发挥 SQL 能力，是本篇文章的主题。本文尝试独辟蹊径，<strong>强调通过灵活的、发散性的数据处理思维，就可以用最基础的语法，解决复杂的数据场景。</strong></p><span id="OSC_h4_3"></span><h4><strong>1.2 适合人群</strong></h4><p>不论是初学者还是资深人员，本篇文章或许都能有所帮助，不过更适合中级、高级读者阅读。</p><p>本篇文章重点介绍数据处理思维，并没有涉及到过多高阶的语法，同时为了避免主题发散，文中涉及的函数、语法特性等，不会花费篇幅进行专门的介绍，读者可以按自身情况自行了解。</p><span id="OSC_h4_4"></span><h4><strong>1.3 内容结构</strong></h4><p>本篇文章将围绕数列生成、区间变换、排列组合、连续判别等主题进行介绍，并附以案例进行实际运用讲解。每个主题之间有轻微的前后依赖关系，依次阅读更佳。</p><span id="OSC_h4_5"></span><h4><strong>1.4 提示信息</strong></h4><p>本篇文章涉及的 SQL 语句只使用到了 MaxCompute（ODPS）SQL 基础语法特性，理论上所有 SQL 均可以在当前最新版本中运行，同时特意注明，运行环境、兼容性等问题不在本篇文章关注范围内。</p><span id="OSC_h3_6"></span><h3>二、数列</h3><p>数列是最常见的数据形式之一，实际数据开发场景中遇到的基本都是有限数列。本节将从最简单的递增数列开始，找出一般方法并推广到更泛化的场景。</p><span id="OSC_h4_7"></span><h4><strong>2.1 常见数列</strong></h4><p><strong>2.1.1 一个简单的递增数列</strong></p><p>首先引出一个简单的递增整数数列场景：</p><ul><li>从数值 0 开始；</li><li>之后的每个数值递增 1 ；</li><li>至数值 3 结束；</li></ul><p>如何生成满足以上三个条件的数列？即 [0,1,2,3] 。</p><p>实际上，生成该数列的方式有多种，此处介绍其中一种简单且通用的方案。</p><pre><code>-- SQL - 1
select
    t.pos as a_n
from (
    select posexplode(split(space(3), space(1), false))
) t;</code></pre><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-7732deab4da1ae67f9bc4a298e28b182_720w.webp" referrerpolicy="no-referrer"></p><p>通过上述 SQL 片段可得知，生成一个递增序列只需要三个步骤：</p><p>1）生成一个长度合适的数组，数组中的元素不需要具有实际含义；</p><p>2）通过 UDTF 函数 posexplode 对数组中的每个元素生成索引下标；</p><p>3）取出每个元素的索引下标。以上三个步骤可以推广至更一般的数列场景：等差数列、等比数列。下文将以此为基础，直接给出最终实现模板。</p><p><strong>2.1.2 等差数列</strong></p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-8416443479890cdc2d3ec834f9d51a6d_720w.webp" referrerpolicy="no-referrer"></p><p>SQL 实现：</p><pre><code>-- SQL - 2
select
    a + t.pos * d as a_n
from (
    select posexplode(split(space(n - 1), space(1), false))
) t;</code></pre><p><strong>2.1.3 等比数列</strong></p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-bbe3a0faeb782d6f2f136214bc67c888_720w.webp" referrerpolicy="no-referrer"></p><p>SQL 实现：</p><pre><code>-- SQL - 3
select
    a * pow(q, t.pos) as a_n
from (
    select posexplode(split(space(n - 1), space(1), false))
) t;</code></pre><p>提示：亦可直接使用 MaxCompute（ODPS）系统函数 sequence 快速生成数列。</p><pre><code>-- SQL - 4
select sequence(1, 3, 1);

-- result
[1, 2, 3]</code></pre><span id="OSC_h4_8"></span><h4><strong>2.2 应用场景举例</strong></h4><p><strong>2.2.1 还原任意维度组合下的维度列簇名称</strong></p><p>在多维分析场景下，可能会用到高阶聚合函数，如&nbsp;<em>cube</em>&nbsp;、&nbsp;<em>rollup</em>&nbsp;、&nbsp;<em>grouping sets</em>&nbsp;等，可以针对不同维度组合下的数据进行聚合统计。</p><p><strong>场景描述</strong></p><p>现有用户访问日志表 visit_log ，每一行数据表示一条用户访问日志。</p><pre><code>-- SQL - 5
with visit_log as (
    select stack (
        6,
        '2024-01-01', '101', '湖北', '武汉', 'Android',
        '2024-01-01', '102', '湖南', '长沙', 'IOS',
        '2024-01-01', '103', '四川', '成都', 'Windows',
        '2024-01-02', '101', '湖北', '孝感', 'Mac',
        '2024-01-02', '102', '湖南', '邵阳', 'Android',
        '2024-01-03', '101', '湖北', '武汉', 'IOS'
    ) 
    -- 字段：日期，用户，省份，城市，设备类型
    as (dt, user_id, province, city, device_type)
)
select * from visit_log;</code></pre><p>现针对省份 province , 城市 city, 设备类型 device_type 三个维度列，通过<em>grouping sets</em>聚合统计得到了不同维度组合下的用户访问量。问：1）如何知道一条统计结果是根据哪些维度列聚合出来的？</p><p>2）想要输出&nbsp;<strong>聚合的维度列的名称</strong>，用于下游的报表展示等场景，又该如何处理？</p><p><strong>解决思路</strong></p><p><strong>可以借助</strong>&nbsp;<strong>MaxCompute（ODPS）提供的 GROUPING__ID 来解决，核心方法是对 GROUPING__ID 进行逆向实现。</strong></p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-bd703256ba0eb478e33155b84482ed35_720w.webp" referrerpolicy="no-referrer"></p><p><strong>一、准备好所有的 GROUPING__ID 。</strong></p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-cf58be1174387bcf38b8c32c235f300b_720w.webp" referrerpolicy="no-referrer"></p><table><tbody><tr><td>GROUPING__ID</td><td>bits</td></tr><tr><td>0</td><td>{ ..., 0, 0, 0 }</td></tr><tr><td>1</td><td>{ ..., 0, 0, 1 }</td></tr><tr><td>2</td><td>{ ..., 0, 1, 0 }</td></tr><tr><td>3</td><td>{ ..., 0, 1, 1 }</td></tr><tr><td>...</td><td>...</td></tr><tr><td>2n2n</td><td>...</td></tr></tbody></table><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-03b742e72cf1234c12320f956ea32e54_720w.webp" referrerpolicy="no-referrer"></p><p><strong>二、准备好所有维度名称。</strong></p><p style="text-align:center"><img src="https://pic3.zhimg.com/v2-84c04cdfe86b38c60d16d3239d86a09e_r.jpg" referrerpolicy="no-referrer"></p><pre><code>{ dim_name_1, dim_name_2, ..., dim_name_n }</code></pre><p><strong>三、将 GROUPING__ID 映射到维度列名称。</strong></p><p>对于 GROUPING__ID 递增数列中的每个数值，将该数值的 2 进制每个比特位与维度名称序列的下标进行映射，输出所有对应比特位 0 的维度名称。例如：</p><pre><code>GROUPING__ID：3 =&gt; { 0, 1, 1 }
维度名称序列：{ 省份, 城市, 设备类型 }

映射：{ 0:省份, 1:城市, 1:设备类型 }

GROUPING__ID 为 3 的数据行聚合维度即为：省份</code></pre><p><strong>SQL 实现</strong></p><pre><code>-- SQL - 6
with group_dimension as (
    select -- 每种分组对应的维度字段
        gb.group_id, concat_ws(",", collect_list(case when gb.placeholder_bit = 0 then dim_col.val else null end)) as dimension_name
    from (
        select groups.pos as group_id, pe.*
        from (
            select posexplode(split(space(cast(pow(2, 3) as int) - 1), space(1), false))
        ) groups -- 所有分组
        lateral view posexplode(regexp_extract_all(lpad(conv(groups.pos,10,2), 3, "0"), '(0|1)')) pe as placeholder_idx, placeholder_bit -- 每个分组的 bit 信息
    ) gb
    left join ( -- 所有维度字段
        select posexplode(split("省份,城市,设备类型", ','))
    ) dim_col on gb.placeholder_idx = dim_col.pos
    group by gb.group_id
)
select 
    group_dimension.dimension_name,
    province, city, device_type,
    visit_count
from (
    select
        grouping_id(province, city, device_type) as group_id,
        province, city, device_type,
        count(1) as visit_count
    from visit_log b
    group by province, city, device_type
    GROUPING SETS(
        (province),
        (province, city),
        (province, city, device_type)
    )
) t
join group_dimension on t.group_id = group_dimension.group_id
order by group_dimension.dimension_name;</code></pre><table><tbody><tr><td>dimension_name</td><td>province</td><td>city</td><td>device_type</td><td>visit_count</td></tr><tr><td>省份</td><td>湖北</td><td>NULL</td><td>NULL</td><td>3</td></tr><tr><td>省份</td><td>湖南</td><td>NULL</td><td>NULL</td><td>2</td></tr><tr><td>省份</td><td>四川</td><td>NULL</td><td>NULL</td><td>1</td></tr><tr><td>省份,城市</td><td>湖北</td><td>武汉</td><td>NULL</td><td>2</td></tr><tr><td>省份,城市</td><td>湖南</td><td>长沙</td><td>NULL</td><td>1</td></tr><tr><td>省份,城市</td><td>湖南</td><td>邵阳</td><td>NULL</td><td>1</td></tr><tr><td>省份,城市</td><td>湖北</td><td>孝感</td><td>NULL</td><td>1</td></tr><tr><td>省份,城市</td><td>四川</td><td>成都</td><td>NULL</td><td>1</td></tr><tr><td>省份,城市,设备类型</td><td>湖北</td><td>孝感</td><td>Mac</td><td>1</td></tr><tr><td>省份,城市,设备类型</td><td>湖南</td><td>长沙</td><td>IOS</td><td>1</td></tr><tr><td>省份,城市,设备类型</td><td>湖南</td><td>邵阳</td><td>Android</td><td>1</td></tr><tr><td>省份,城市,设备类型</td><td>四川</td><td>成都</td><td>Windows</td><td>1</td></tr><tr><td>省份,城市,设备类型</td><td>湖北</td><td>武汉</td><td>Android</td><td>1</td></tr><tr><td>省份,城市,设备类型</td><td>湖北</td><td>武汉</td><td>IOS</td><td>1</td></tr></tbody></table><span id="OSC_h3_9"></span><h3>三、区间</h3><p>区间相较数列具有不同的数据特征，不过在实际应用中，数列与区间的处理具有较多相通性。本节将介绍一些常见的区间场景，并抽象出通用的解决方案。</p><span id="OSC_h4_10"></span><h4><strong>3.1 常见区间操作</strong></h4><p><strong>3.1.1 区间分割</strong></p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-6ba7d81f19eff5e8606c559b54f40ad1_720w.webp" referrerpolicy="no-referrer"></p><p>SQL 实现：</p><pre><code>-- SQL - 7
select
    a + t.pos * d as sub_interval_start, -- 子区间起始值
    a + (t.pos + 1) * d as sub_interval_end -- 子区间结束值
from (
    select posexplode(split(space(n - 1), space(1), false))
) t;</code></pre><p><strong>3.1.2 区间交叉</strong></p><p>已知两个日期区间存在交叉 ['2024-01-01', '2024-01-03'] 、 ['2024-01-02', '2024-01-04']。问：</p><p>1）如何合并两个日期区间，并返回合并后的新区间？</p><p>2）如何知道哪些日期是交叉日期，并返回该日期交叉次数？</p><p>解决上述问题的方法有多种，此处介绍其中一种简单且通用的方案。核心思路是结合数列生成、区间分割方法，先将日期区间分解为最小处理单元，即多个日期组成的数列，然后再基于日期粒度做统计。具体步骤如下：</p><p>1）获取每个日期区间包含的天数；2）按日期区间包含的天数，将日期区间拆分为相应数量的递增日期序列；</p><p>3）通过日期序列统计合并后的区间，交叉次数。</p><p>SQL 实现：</p><pre><code>-- SQL - 8
with dummy_table as (
    select stack(
        2,
        '2024-01-01', '2024-01-03',
        '2024-01-02', '2024-01-04'
    ) as (date_start, date_end)
)
select 
    min(date_item) as date_start_merged, 
    max(date_item) as date_end_merged, 
    collect_set( -- 交叉日期计数
        case when date_item_cnt &gt; 1 then concat(date_item, ':', date_item_cnt) else null end
    ) as overlap_date
from (
    select 
        -- 拆解后的单个日期
        date_add(date_start, pos) as date_item,
        -- 拆解后的单个日期出现的次数
        count(1) over (partition by date_add(date_start, pos)) as date_item_cnt
    from dummy_table
    lateral view posexplode(split(space(datediff(date_end, date_start)), space(1), false)) t as pos, val
) t;</code></pre><table><tbody><tr><td>date_start_merged</td><td>date_end_merged</td><td>overlap_date</td></tr><tr><td>2024-01-01</td><td>2024-01-04</td><td>["2024-01-02:2","2024-01-03:2"]</td></tr></tbody></table><p><strong>增加点儿难度！</strong></p><p>如果有多个日期区间，且区间之间交叉状态未知，上述问题又该如何求解。即：</p><p>1）如何合并多个日期区间，并返回合并后的多个新区间？</p><p>2）如何知道哪些日期是交叉日期，并返回该日期交叉次数？</p><p>SQL 实现：</p><pre><code>-- SQL - 9
with dummy_table as (
    select stack(
        5,
        '2024-01-01', '2024-01-03',
        '2024-01-02', '2024-01-04',
        '2024-01-06', '2024-01-08',
        '2024-01-08', '2024-01-08',
        '2024-01-07', '2024-01-10'
    ) as (date_start, date_end)
)
select
    min(date_item) as date_start_merged, 
    max(date_item) as date_end_merged,
    collect_set( -- 交叉日期计数
        case when date_item_cnt &gt; 1 then concat(date_item, ':', date_item_cnt) else null end
    ) as overlap_date
from (
    select 
        -- 拆解后的单个日期
        date_add(date_start, pos) as date_item,
        -- 拆解后的单个日期出现的次数
        count(1) over (partition by date_add(date_start, pos)) as date_item_cnt,
        -- 对于拆解后的单个日期，重组为新区间的标记
        date_add(date_add(date_start, pos), 1 - dense_rank() over (order by date_add(date_start, pos))) as cont
    from dummy_table
    lateral view posexplode(split(space(datediff(date_end, date_start)), space(1), false)) t as pos, val
) t
group by cont;</code></pre><table><tbody><tr><td>date_start_merged</td><td>date_end_merged</td><td>overlap_date</td></tr><tr><td>2024-01-01</td><td>2024-01-04</td><td>["2024-01-02:2","2024-01-03:2"]</td></tr><tr><td>2024-01-06</td><td>2024-01-10</td><td>["2024-01-07:2","2024-01-08:3"]</td></tr></tbody></table><span id="OSC_h4_11"></span><h4><strong>3.2 应用场景举例</strong></h4><p><strong>3.2.1 按任意时段统计数据</strong></p><p><strong>场景描述</strong></p><p>现有用户还款计划表 user_repayment ，该表内的一条数据，表示用户在指定日期区间内 [date_start, date_end] ，每天还款 repayment 元。</p><pre><code>-- SQL - 10
with user_repayment as (
    select stack(
        3,
        '101', '2024-01-01', '2024-01-15', 10,
        '102', '2024-01-05', '2024-01-20', 20,
        '103', '2024-01-10', '2024-01-25', 30
    ) 
    -- 字段：用户，开始日期，结束日期，每日还款金额
    as (user_id, date_start, date_end, repayment)
)
select * from user_repayment;</code></pre><p>如何统计任意时段内（如：2024-01-15 至 2024-01-16）每天所有用户的应还款总额？</p><p><strong>解决思路</strong></p><p>核心思路是将日期区间转换为日期序列，再按日期序列进行汇总统计。</p><p><strong>SQL 实现</strong></p><pre><code>-- SQL - 11
select 
    date_item as day, 
    sum(repayment) as total_repayment
from (
    select 
        date_add(date_start, pos) as date_item,
        repayment
    from user_repayment
    lateral view posexplode(split(space(datediff(date_end, date_start)), space(1), false)) t as pos, val
) t
where date_item &gt;= '2024-01-15' and date_item &lt;= '2024-01-16'
group by date_item
order by date_item;</code></pre><table><tbody><tr><td>day</td><td>total_repayment</td></tr><tr><td>2024-01-15</td><td>60</td></tr><tr><td>2024-01-16</td><td>50</td></tr></tbody></table><span id="OSC_h3_12"></span><h3>四、排列组合</h3><p>排列组合是针对离散数据常用的数据组织方法，本节将分别介绍排列、组合的实现方法，并结合实例着重介绍通过组合对数据的处理。</p><span id="OSC_h4_13"></span><h4><strong>4.1 常见排列组合操作</strong></h4><p><strong>4.1.1 排列</strong></p><p>已知字符序列 [ 'A', 'B', 'C' ] ，每次从该序列中可重复地选取出 2 个字符，如何获取到所有的排列？</p><p>借助多重 lateral view 即可解决，整体实现比较简单。</p><pre><code>-- SQL - 12
select 
    concat(val1, val2) as perm
from (select split('A,B,C', ',') as characters) dummy
lateral view explode(characters) t1 as val1
lateral view explode(characters) t2 as val2;</code></pre><table><tbody><tr><td>perm</td></tr><tr><td>AA</td></tr><tr><td>AB</td></tr><tr><td>AC</td></tr><tr><td>BA</td></tr><tr><td>BB</td></tr><tr><td>BC</td></tr><tr><td>CA</td></tr><tr><td>CB</td></tr><tr><td>CC</td></tr></tbody></table><p><strong>4.1.2 组合</strong></p><p>已知字符序列 [ 'A', 'B', 'C' ] ，每次从该序列中可重复地选取出 2 个字符，如何获取到所有的组合？</p><p>借助多重 lateral view 即可解决，整体实现比较简单。</p><pre><code>-- SQL - 13
select 
    concat(least(val1, val2), greatest(val1, val2)) as comb
from (select split('A,B,C', ',') as characters) dummy
lateral view explode(characters) t1 as val1
lateral view explode(characters) t2 as val2
group by least(val1, val2), greatest(val1, val2);</code></pre><table><tbody><tr><td>comb</td></tr><tr><td>AA</td></tr><tr><td>AB</td></tr><tr><td>AC</td></tr><tr><td>BB</td></tr><tr><td>BC</td></tr><tr><td>CC</td></tr></tbody></table><p><br> 提示：亦可直接使用 MaxCompute（ODPS）系统函数 combinations 快速生成组合。</p><pre><code>-- SQL - 14
select combinations(array('foo', 'bar', 'boo'),2);

-- result
[['foo', 'bar'], ['foo', 'boo']['bar', 'boo']]</code></pre><span id="OSC_h4_14"></span><h4><strong>4.2 应用场景举例</strong></h4><p><strong>4.2.1 分组对比统计</strong></p><p><strong>场景描述</strong></p><p>现有投放策略转化表，该表内的一条数据，表示一天内某投放策略带来的订单量。</p><pre><code>-- SQL - 15
with strategy_order as (
    select stack(
        3,
        '2024-01-01', 'Strategy A', 10,
        '2024-01-01', 'Strategy B', 20,
        '2024-01-01', 'Strategy C', 30
    ) 
    -- 字段：日期，投放策略，单量
    as (dt, strategy, order_cnt)
)
select * from strategy_order;</code></pre><p>如何按投放策略建立两两对比组，按组对比展示不同策略转化单量情况？</p><table><tbody><tr><td>对比组</td><td>投放策略</td><td>转化单量</td></tr><tr><td>Strategy A-Strategy B</td><td>Strategy A</td><td>xxx</td></tr><tr><td>Strategy A-Strategy B</td><td>Strategy B</td><td>xxx</td></tr></tbody></table><p><strong>解决思路</strong></p><p>核心思路是从所有投放策略列表中不重复地取出 2 个策略，生成所有的组合结果，然后关联 strategy_order 表分组统计结果。</p><p><strong>SQL 实现</strong></p><pre><code>-- SQL - 16
select /*+ mapjoin(combs) */
    combs.strategy_comb,
    so.strategy,
    so.order_cnt
from strategy_order so
join ( -- 生成所有对比组
    select 
        concat(least(val1, val2), '-', greatest(val1, val2)) as strategy_comb,
        least(val1, val2) as strategy_1, greatest(val1, val2) as strategy_2
    from (
        select collect_set(strategy) as strategies
        from strategy_order
    ) dummy
    lateral view explode(strategies) t1 as val1
    lateral view explode(strategies) t2 as val2
    where val1 &lt;&gt; val2
    group by least(val1, val2), greatest(val1, val2)
) combs on 1 = 1
where so.strategy in (combs.strategy_1, combs.strategy_2)
order by combs.strategy_comb, so.strategy;</code></pre><table><tbody><tr><td>对比组</td><td>投放策略</td><td>转化单量</td></tr><tr><td>Strategy A-Strategy B</td><td>Strategy A</td><td>10</td></tr><tr><td>Strategy A-Strategy B</td><td>Strategy B</td><td>20</td></tr><tr><td>Strategy A-Strategy C</td><td>Strategy A</td><td>10</td></tr><tr><td>Strategy A-Strategy C</td><td>Strategy C</td><td>30</td></tr><tr><td>Strategy B-Strategy C</td><td>Strategy B</td><td>20</td></tr><tr><td>Strategy B-Strategy C</td><td>Strategy C</td><td>30</td></tr></tbody></table><span id="OSC_h3_15"></span><h3>五、连续</h3><p>本节主要介绍连续性问题，重点描述了常见连续活跃场景。对于静态类型的连续活跃、动态类型的连续活跃，分别阐述了不同的实现方案。</p><span id="OSC_h4_16"></span><h4><strong>5.1 普通连续活跃统计</strong></h4><p><strong>场景描述</strong></p><p>现有用户访问日志表 visit_log ，每一行数据表示一条用户访问日志。</p><pre><code>-- SQL - 17
with visit_log as (
    select stack (
        6,
        '2024-01-01', '101', '湖北', '武汉', 'Android',
        '2024-01-01', '102', '湖南', '长沙', 'IOS',
        '2024-01-01', '103', '四川', '成都', 'Windows',
        '2024-01-02', '101', '湖北', '孝感', 'Mac',
        '2024-01-02', '102', '湖南', '邵阳', 'Android',
        '2024-01-03', '101', '湖北', '武汉', 'IOS'
    ) 
    -- 字段：日期，用户，省份，城市，设备类型
    as (dt, user_id, province, city, device_type)
)
select * from visit_log;</code></pre><p>如何获取连续访问大于或等于 2 天的用户？</p><p>上述问题在分析连续性时，<strong>获取连续性的结果以超过固定阈值为准</strong>，此处归类为&nbsp;<strong>连续活跃大于 N 天阈值的普通连续活跃场景统计</strong>。</p><p><strong>SQL 实现</strong></p><p><strong>基于相邻日期差实现（ lag / lead 版）</strong></p><p>整体实现比较简单。</p><pre><code>-- SQL - 18
select user_id
from (
    select 
        *,
        lag(dt, 2 - 1) over (partition by user_id order by dt) as lag_dt
    from (select dt, user_id from visit_log group by dt, user_id) t0
) t1
where datediff(dt, lag_dt) + 1 = 2
group by user_id;</code></pre><table><tbody><tr><td>user_id</td></tr><tr><td>101</td></tr><tr><td>102</td></tr></tbody></table><p><strong>基于相邻日期差实现（排序版）</strong></p><p>整体实现比较简单。</p><pre><code>-- SQL - 19
select user_id
from (
    select *, 
        dense_rank() over (partition by user_id order by dt) as dr
    from visit_log
) t1
where datediff(dt, date_add(dt, 1 - dr)) + 1 = 2
group by user_id;</code></pre><table><tbody><tr><td>user_id</td></tr><tr><td>101</td></tr><tr><td>102</td></tr></tbody></table><p><strong>基于连续活跃天数实现</strong></p><p>可以视作&nbsp;<strong>基于相邻日期差实现（排序版）</strong>&nbsp;的衍生版本，该实现能获取到更多信息，如连续活跃天数。</p><pre><code>-- SQL - 20
select user_id
from (
    select 
        *,
        -- 连续活跃天数
        count(distinct dt) 
            over (partition by user_id, cont) as cont_days
    from (
        select 
            *, 
            date_add(dt, 1 - dense_rank() 
                over (partition by user_id order by dt)) as cont
        from visit_log
    ) t1
) t2
where cont_days &gt;= 2
group by user_id;</code></pre><table><tbody><tr><td>user_id</td></tr><tr><td>101</td></tr><tr><td>102</td></tr></tbody></table><p><strong>基于连续活跃区间实现</strong></p><p>可以视作&nbsp;<strong>基于相邻日期差实现（排序版）</strong>&nbsp;的衍生版本，该实现能获取到更多信息，如连续活跃区间。</p><pre><code>-- SQL - 21
select user_id
from (
    select 
        user_id, cont, 
        -- 连续活跃区间
        min(dt) as cont_date_start, max(dt) as cont_date_end
    from (
        select 
            *, 
            date_add(dt, 1 - dense_rank() 
                over (partition by user_id order by dt)) as cont
        from visit_log
    ) t1
    group by user_id, cont
) t2
where datediff(cont_date_end, cont_date_start) + 1 &gt;= 2
group by user_id;</code></pre><table><tbody><tr><td>user_id</td></tr><tr><td>101</td></tr><tr><td>102</td></tr></tbody></table><span id="OSC_h4_17"></span><h4><strong>5.2 动态连续活跃统计</strong></h4><p><strong>场景描述</strong></p><p>现有用户访问日志表 visit_log ，每一行数据表示一条用户访问日志。</p><pre><code>-- SQL - 22
with visit_log as (
    select stack (
        6,
        '2024-01-01', '101', '湖北', '武汉', 'Android',
        '2024-01-01', '102', '湖南', '长沙', 'IOS',
        '2024-01-01', '103', '四川', '成都', 'Windows',
        '2024-01-02', '101', '湖北', '孝感', 'Mac',
        '2024-01-02', '102', '湖南', '邵阳', 'Android',
        '2024-01-03', '101', '湖北', '武汉', 'IOS'
    ) 
    -- 字段：日期，用户，省份，城市，设备类型
    as (dt, user_id, province, city, device_type)
)
select * from visit_log;</code></pre><p>如何获取最长的 2 个连续活跃用户，输出用户、最长连续活跃天数、最长连续活跃日期区间？</p><p>上述问题在分析连续性时，<strong>获取连续性的结果不是且无法与固定的阈值作比较，而是各自以最长连续活跃作为动态阈值</strong>，此处归类为&nbsp;<strong>动态连续活跃场景统计</strong>。</p><p><strong>SQL 实现</strong></p><p>基于&nbsp;<strong>普通连续活跃场景统计</strong>&nbsp;的思路进行扩展即可，此处直接给出最终 SQL ：</p><pre><code>-- SQL - 23
select
    user_id, 
    -- 最长连续活跃天数
    datediff(max(dt), min(dt)) + 1 as cont_days,
    -- 最长连续活跃日期区间
    min(dt) as cont_date_start, max(dt) as cont_date_end
from (
    select 
        *, 
        date_add(dt, 1 - dense_rank() 
            over (partition by user_id order by dt)) as cont
    from visit_log
) t1
group by user_id, cont
order by cont_days desc
limit 2;</code></pre><table><tbody><tr><td>user_id</td><td>cont_days</td><td>cont_date_start</td><td>cont_date_end</td></tr><tr><td>101</td><td>3</td><td>2024-01-01</td><td>2024-01-03</td></tr><tr><td>102</td><td>2</td><td>2024-01-01</td><td>2024-01-02</td></tr></tbody></table><span id="OSC_h3_18"></span><h3>六、扩展</h3><p>引申出更复杂的场景，是本篇文章前面章节内容的结合与变种。</p><span id="OSC_h4_19"></span><h4><strong>6.1 区间连续（最长子区间切分）</strong></h4><p><strong>场景描述</strong></p><p>现有用户扫描或连接 WiFi 记录表 user_wifi_log ，每一行数据表示某时刻用户扫描或连接 WiFi 的日志。</p><pre><code>-- SQL - 24
with user_wifi_log as (
    select stack (
        9,
        '2024-01-01 10:01:00', '101', 'cmcc-Starbucks', 'scan', -- 扫描
        '2024-01-01 10:02:00', '101', 'cmcc-Starbucks', 'scan',
        '2024-01-01 10:03:00', '101', 'cmcc-Starbucks', 'scan',
        '2024-01-01 10:04:00', '101', 'cmcc-Starbucks', 'conn', -- 连接
        '2024-01-01 10:05:00', '101', 'cmcc-Starbucks', 'conn',
        '2024-01-01 10:06:00', '101', 'cmcc-Starbucks', 'conn',
        '2024-01-01 11:01:00', '101', 'cmcc-Starbucks', 'conn',
        '2024-01-01 11:02:00', '101', 'cmcc-Starbucks', 'conn',
        '2024-01-01 11:03:00', '101', 'cmcc-Starbucks', 'conn'
    ) 
    -- 字段：时间，用户，WiFi，状态（扫描、连接）
    as (time, user_id, wifi, status)
)
select * from user_wifi_log;</code></pre><p>现需要进行用户行为分析，如何<strong>划分用户不同 WiFi 行为区间</strong>？满足：</p><p>1）行为类型分为两种：连接（scan）、扫描（conn）；</p><p>2）行为区间的定义为：相同行为类型，且相邻两次行为的时间差不超过 30 分钟；</p><p>3）不同行为区间在满足定义的情况下应取到最长；</p><table><tbody><tr><td>user_id</td><td>wifi</td><td>status</td><td>time_start</td><td>time_end</td><td>备注</td></tr><tr><td>101</td><td>cmcc-Starbucks</td><td>scan</td><td>2024-01-01 10:01:00</td><td>2024-01-01 10:03:00</td><td>用户扫描了 WiFi</td></tr><tr><td>101</td><td>cmcc-Starbucks</td><td>conn</td><td>2024-01-01 10:04:00</td><td>2024-01-01 10:06:00</td><td>用户连接了 WiFi</td></tr><tr><td>101</td><td>cmcc-Starbucks</td><td>conn</td><td>2024-01-01 11:01:00</td><td>2024-01-01 11:02:00</td><td>距离上次连接已经超过 30 分钟，认为是一次新的连接行为</td></tr></tbody></table><p><br> 上述问题稍显复杂，可视作&nbsp;<strong>动态连续活跃统计</strong>&nbsp;中介绍的&nbsp;<strong>最长连续活跃</strong>&nbsp;的变种。可以描述为&nbsp;<strong>结合连续性阈值与行为序列中的上下文信息，进行最长子区间的划分</strong>&nbsp;的问题<strong>。</strong></p><p><strong>SQL 实现</strong></p><p>核心逻辑：以用户、WIFI 分组，结合连续性阈值与行为序列上下文信息，划分行为区间。</p><p>详细步骤：</p><p>1）以用户、WIFI 分组，在分组窗口内对数据按时间正序排序；2）依次遍历分组窗口内相邻两条记录，若两条记录之间的时间差超过 30 分钟，或者两条记录的行为状态（扫描态、连接态）发生变更，则以该临界点划分行为区间。直到遍历所有记录；</p><p>3）最终输出结果：用户、WIFI、行为状态（扫描态、连接态）、行为开始时间、行为结束时间；</p><pre><code>-- SQL - 25
select 
    user_id, 
    wifi,
    max(status) as status,
    min(time) as start_time, 
    max(time) as end_time
from (
    select *,
        max(if(lag_status is null or lag_time is null or status &lt;&gt; lag_status or datediff(time, lag_time, 'ss') &gt; 60 * 30, rn, null)) 
            over (partition by user_id, wifi order by time) as group_idx
    from (
        select *,
            row_number() over (partition by user_id, wifi order by time) as rn,
            lag(time, 1) over (partition by user_id, wifi order by time) as lag_time,
            lag(status, 1) over (partition by user_id, wifi order by time) as lag_status
        from user_wifi_log
    ) t1
) t2
group by user_id, wifi, group_idx
;</code></pre><table><tbody><tr><td>user_id</td><td>wifi</td><td>status</td><td>start_time</td><td>end_time</td></tr><tr><td>101</td><td>cmcc-Starbucks</td><td>scan</td><td>2024-01-01 10:01:00</td><td>2024-01-01 10:03:00</td></tr><tr><td>101</td><td>cmcc-Starbucks</td><td>conn</td><td>2024-01-01 10:04:00</td><td>2024-01-01 10:06:00</td></tr><tr><td>101</td><td>cmcc-Starbucks</td><td>conn</td><td>2024-01-01 11:01:00</td><td>2024-01-01 11:03:00</td></tr></tbody></table><p><br> 该案例中的连续性判别条件可以推广到更多场景，例如基于日期差值、时间差值、枚举类型、距离差值等作为连续性判别条件的数据场景。</p><span id="OSC_h3_20"></span><h3>结语</h3><p><strong>通过灵活的、散发性的数据处理思维，就可以用基础的语法，解决复杂的数据场景</strong>&nbsp;是本篇文章贯穿全文的思想。文中针对数列生成、区间变换、排列组合、连续判别等常见的场景，给出了相对通用的解决方案，并结合实例进行了实际运用的讲解。</p><p>本篇文章尝试独辟蹊径，强调灵活的数据处理思维，希望能让读者觉得眼前一亮，更希望真的能给读者产生帮助。同时毕竟个人能力有限，思路不一定是最优的，甚至可能出现错误，欢迎提出意见或建议。</p><p>作者 | 里戈</p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">点击立即免费试用云产品，开启云上实践之旅！</span></a></strong></blockquote><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1360381%3Futm_content%3Dg_1000382602" target="_blank">原文链接</a></strong></p><p><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 31 Oct 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10139796</guid>
            <link>https://my.oschina.net/yunqi/blog/10139796</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[客服发送一条消息背后的技术和思考]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一、引言</h1><p>在企业客服场景中，客服发送一条消息的背后，需要考虑网络通信、前端展示、后端存储以及安全性等多个方面的技术支持，单从前端层面来说，就需要考虑到消息的显示、状态更新、稳定传输以及极限操作消息不卡顿等场景，随着 IM 系统的不断更新迭代，已经实现了从外采到自研再到一站式全场景工作台的搭建，我们能够很明显地感知到客服对于 IM 的体验要求越来越高了，因此客服发送一条消息背后所涉及的技术和思考也越来越重要。本文将探秘客服发送一条消息背后的技术和思考，帮助大家了解如何在 IM 聊天场景中提供高效、安全、可靠和良好的用户体验。</p><h1>二、IM 聊天消息的重要性</h1><p>IM 聊天消息是客服和用户之间最快速、最直观、最高效的双向沟通方式之一。IM 聊天的重要性体现在以下几个方面：</p><ul><li>即时响应：及时地解答用户咨询的问题，更快捷的服务用户，提高用户满意度。</li><li>个性化互动：可以根据用户的需求快速做出个性化回应，从而更好地满足用户需求。</li><li>数据处理和分析：通过对 IM 聊天消息的处理分析，可以洞察用户需求、用户行为，帮助改进服务质量。</li></ul><p>综上，IM 聊天消息的重要性在于提高用户满意度、提高客服作业效率，这也意味着 IM 消息的可靠、高效、安全尤为重要，接下来本文就从前端视角对客服发送一条消息背后的技术和思考进行详细的讲述。</p><h1>三、客服 IM 消息发展历程</h1><p>以下是客服 IM 消息发展的历程，列举的都是核心技术专项的里程碑节点。 <img src="https://oscimg.oschina.net/oscnet/up-584d1aa46f5bc07e2c715235ac116ca64f0.jpg" alt="" referrerpolicy="no-referrer"></p><p>在这个过程中，我们积累了一定的经验和技能，同时也遇到了各种各样的问题和挑战。比如：消息丢失、消息发送失败、消息重复、消息乱序等等方面的问题，针对这些问题我们也都通过技术专项的方式去逐个解决并达到了预期效果，我们相信，随着技术的不断发展和创新，我们可以更好地提供更加高效便捷的服务。</p><h1>四、技术和思考的细节</h1><p>站在用户/客服角度，发送消息不就是输入消息后点击回车键或点击发送按钮就完成了吗，看似非常简单，但是从开始输入消息到对方收到消息这个过程实际上有非常强大的技术在高效、稳定支撑。我们客服 IM 消息链路会涉及到三个核心端口，发出方、IM 网关以及接收方。以下将以客服发送一条消息到 IM 网关这个过程简单描述一下涉及到的技术点，反之用户侧发送消息也是类似的。 <img src="https://oscimg.oschina.net/oscnet/up-b5cfea2555b27d0ea3e3bd134cd0efa18fe.jpg" alt="" referrerpolicy="no-referrer"></p><p>从上述流程图中可以看到一条消息的旅程还是非常丰富的，当然其中有一些细节点还没有完全列举出来，例如：IM 网关的超时重推机制、前端的异常处理 (网络异常、超时异常、重试无果等)。我们可以很清晰地看到当客服开始输入消息的时候就开始进行通知对方正常输入，触发消息发送后需要进行消息体的创建、排序、去重检测、网络检测、聊天列表渲染、推入超时重试队列、放入消息拦截器中统一进行消息格式转化并发送，到这里只仅仅是完成了前端层面的发送工作而已，此时消息是否发送成功还是未知的，还需要监听消息的发送结果，如果在一定时间未收到响应结果会进行第二次消息的重发，直到发送成功或到达最大重试次数就表示该消息的生命周期结束。一旦收到消息的响应结果就会对消息的状态进行更新 (此时消息已完成了排序，不需要进行二次排序)，至此第一个环节就完成了处理，IM 网关到客户端也会有类似的处理过程。</p><p>纵观整个消息发送以及接收链路，任何一个环节出现问题都会导致消息发送出现问题，就需要非常稳定可靠的技术手段进行保障，主要从以下几个方面讲解一下。</p><h2>消息的可靠性传递</h2><p>消息的可靠性传递确保了消息收发双方信息的一致性。这也是我们为什么把消息可靠性传递放在第一个进行讲解。我们试想一下这样一个场景，经常有消息丢失，客服频繁反馈，每次都要投入研发资源去排查问题，这还是次要的，有可能因为消息的丢失导致用户体验的急剧下降，这就得不偿失了。所有消息的可靠性传递是非常有必要的，而且也是必须的。那么何为可靠性传递？至少要满足 3 个方面：</p><h3>1.1 消息的实时性</h3><p>我们使用 IM 最重要的一方面就是希望对方能够实时接收到我们发送的消息并能够给予回复，这对于提升用户体验尤为重要。如果不在乎实时性我们完全可以使用其他方式，例如邮件、写信甚至飞鸽传书…</p><p>一条消息发送给 IM 网关，网关大致需要经历以下 5 个环节的处理：</p><ul><li>验证消息：敏感词验证、风控送审 (同步审核)</li><li>消息的存储：排序、去重验证等</li><li>给发送消息方回复一个 ACK 响应 (成功、失败)</li><li>把消息发送给接收方，如果存在多端登录的场景，还需要保障消息多端同步</li><li>超时重试、处理接收方返回的 ACK 等</li></ul><p>从消息的实时性的来说，没有绝对的实时，只能尽量优化。核心的处理逻辑都在 IM 网关，无论是前端还是客户端，处理过程都是非常快的，都在毫秒级别。我们 IM 网关是 Go 语言开发的，并发处理的能力也是非常高的，所以整个闭合链路的耗时还是非常低的。 <img src="https://oscimg.oschina.net/oscnet/up-5099c14837901bd35052c87dcaa6bdc2893.jpg" alt="" referrerpolicy="no-referrer"></p><h3>1.2 消息的可靠性</h3><p>众所周知，TCP 本身就是具有可靠性的，但是它只能保障传输层可靠，而应用层之间的可靠性并不能保证，我们后续会有针对性的专项文章进行发表，本次就不再赘述。</p><p>那我们该如何保障应用之间的可靠性呢? 可靠性的保障就是让发送方知道接收方接收到了消息，这样就表示消息成功传递了。我们再回头看一下上面讲述消息丢失的场景，消息丢失的问题也是我们在 IM 消息研发过程中遇到的一个让人头疼的问题，排查一个问题需要投入的技术资源是非常巨大的，需要涉及到 H5、IM 网关、服务端以及客户端，对于用户以及客服的使用体验是非常差的。很简单的一个场景，用户发了消息，客服没有收到，没有回复用户，用户以为客服故意不回复，会影响到用户的满意度。</p><p>那这个问题该如何解决呢？大家可以看下<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247489429%26idx%3D1%26sn%3D0f7c0c2062c56abe6fb69944b6d48fa3%26chksm%3Dc16242caf615cbdc799cb6a073946a42bc4932dc9695e1f9b80f6afc0c8c1b768745614bb88f%26scene%3D21%23wechat_redirect" target="_blank">得物客服 IM 消息通信 SDK 自研之路</a>，其中有讲解过，核心是参考 TCP 协议的 ACK 机制，实现一套基于业务层的 ACK 协议。这里特别的要注意的是针对批量消息 (客服刷新会话、新会话进线等场景)，我们采用的是批量 ACK 机制，如果每一个消息都回复 ACK，成本会比较高。我们当初是通过一个 IM 架构升级技术专项协同各端完成了 IM 整体消息触达实现 0 丢失，保证触达，满足 At least once（通过数据埋点验证后得到 100% 的触达率）。上线后该场景符合预期效果，相应的问题排查投入也减少了至少 70%+。</p><h3>1.3 消息的有序性</h3><p>在开发 IM 过程中有这样一个非常常见的场景，用户问 A 问题后又问题了 B 问题，在客服侧 B 问题排到 A 问题的前面，导致客服的回复也出现了错乱。当然这只是 IM 消息乱序的一种场景而已。诸如此类的还有很多。消息乱序产生的原因有很多，例如发送文件后再立即发送消息，文件需要前端先上传到 OSS 获取到 URL 后再发送给用户，上传文件这个过程，用户以及客服都是可以发送消息的，这种场景处理不好就极易出现消息乱序。</p><p>不做 IM 是真不会想到客服操作的效率会有多高，之前在处理消息乱序问题的时候有遇到客服连续发送了 2 条消息，间隔只有 300 毫秒，这种高频密集的操作场景在客服的工作场景下是持续性的。</p><p>看似一个乱序问题，不考虑清楚用户群体、极限场景、临界值等都不会彻底解决掉这个问题。</p><p>再说回我们客服 IM，我们是如何处理消息排序的呢？在整个开发过程也是比较曲折的，最终是以 IM 网关维护的 Seq 为准，然后返回到发送方，发送再根据消息序号进行排序，确保发送方和接收方消息的排序是一致的。前端处理的流程如下： <img src="https://oscimg.oschina.net/oscnet/up-f6983e465f7b364799f924e55d8345ea887.jpg" alt="" referrerpolicy="no-referrer"></p><h3>1.4 消息的幂等性</h3><p>说到消息的幂等性，我们要思考一个问题，为什么会收到多条 (&gt;1) 相同的消息呢？肯定是发送方重复发送导致的，那在什么场景下会重复发送？前面刚讲过应用层的 ACK 机制，如果没有收到对方的 ACK，会在超时时间到达后继续重复发送直到最大重试次数。参考下面的截图会更容易理解，只是模拟消息重试，真实场景中执行频次肯定要比这个时间更久一些。 <img src="https://oscimg.oschina.net/oscnet/up-9fbc97a0f4430757c05319b8fe94d293131.jpg" alt="" referrerpolicy="no-referrer"></p><p>既然要保证消息的可靠性，消息的重复就是无法避免的。就有可能出现消息幂等性问题。那怎么解决呢？我们是利用消息的 Message ID 做去重的，这里会涉及到一个性能问题，排序、去重以及风控信息验证等都需要一定的计算成本，如何保证处理过程系统不卡顿是一个核心问题。想要了解我们客服 IM 是如何做的，请继续向下看。</p><h2>消息处理的卡顿优化策略</h2><p>我们来想一下为什么会出现卡顿？什么样的场景才能够被视为卡顿呢？我们一般都会说是因为在 16ms 内无法完成渲染导致的。那么为什么需要在 16ms 内完成呢？这里我们就要了解一下刷新率（RefreshRate）与帧率（FrameRate）。</p><ul><li><strong>刷新率</strong>指的是屏幕每秒刷新的次数，是针对硬件而言的。浏览器刷新率都在 60Hz（屏幕每秒钟刷新 60 次）。</li><li><strong>帧率</strong>是每秒绘制的帧数，是针对软件而言的。通常只要帧率与刷新率保持一致，我们看到的画面就是流畅的。所以帧率在 60FPS 时我们就不会感觉到卡。</li></ul><p>如果帧率为每秒钟 60 帧，而屏幕刷新率为 30Hz，那么就会出现屏幕上半部分还停留在上一帧的画面，屏幕的下半部分渲染出来的就是下一帧的画面，这种情况被称为画面撕裂。相反，如果帧率为每秒钟 30 帧，屏幕刷新率为 60Hz，那么就会出现相连两帧显示的是同一画面，这就出现了卡顿。所以单方面的提升帧率或者刷新率是没有意义的，需要两者同时进行提升。浏览器都采用的 60Hz 的刷新率，为了使帧率也能达到 60FPS，那么就要求在 16.67ms 内要完成一帧的绘制（1000ms/60Frame = 16.666ms / Frame)。</p><p>IM 消息处理中出现卡顿的情况非常常见，到一定的量级都是一个很难避免的问题，对比我们经常使用电脑，打开多个浏览器页签，稍微时间长点不关机重启，也会感觉到卡顿，但对于 IM 消息处理还是有很多方式进行优化的，<strong>主要涉及以下几方面的优化策略：</strong></p><h3>2.1 异步处理</h3><p>众所周知 JS 是单线程的，所以采用异步处理机制可以将优先级低的任务推入异步任务队列，让出主线程给优先级高的任务。比如：客服在输入完消息后需要立即显示的聊天页面，如果存在短暂的不显示，会被认为是系统卡顿了，所以发送消息的优先级是高于接收消息的。我们对各场景任务优先级做了区分，低优先级的任务都通过异步的方式进行处理。</p><h3>2.2 分段加载</h3><p>这里主要针对聊天消息列表，对于大量消息的会话处理，只渲染可视区域的消息降低浏览器的负担，提升响应速度。列表优化的方案有很多。如下：</p><p><strong>方案 1：</strong> 使用定时器 setTimeout 来实现分批渲染，这种方式我们一般不推荐，因为在 setTimeout 中对 DOM 进行操作，必须要等到屏幕下次绘制时才能更新到屏幕上，如果两者步调不一致，就可能导致中间某一帧的操作被跨越过去，而直接更新下一帧的元素，从而导致丢帧现象。</p><p><strong>方案 2：</strong> 采用 requestAnimationFrame，相比之下，requestAnimationFrame 的优势还是非常明显的，主要体现在<strong>以下几个方面：</strong></p><ul><li>requestAnimationFrame 会把每一帧中的所有 DOM 操作集中起来，再一次重绘或回流中就完成，并且重绘或回流的时间间隔紧紧跟随浏览器的刷新频率。</li><li>在隐藏或不可见的元素中，requestAnimationFrame 将不会进行重绘或回流，这当然就意味着更少的 CPU、GPU 和内存使用量。</li><li>requestAnimationFrame 是由浏览器专门为动画提供的 API，在运行时浏览器会自动优化方法的调用，并且如果页面不是激活状态下的话，动画会自动暂停，有效节省了 CPU 开销。</li><li>与 setTimeout 相比，requestAnimationFrame 最大的优势是<strong>由系统来决定回调函数的执行时机。</strong></li><li>requestAnimationFrame 的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。</li></ul><p><strong>方案 3：</strong> 采用 IntersectionObserver，IntersectionObserver 接口 (从属于 Intersection Observer API) 为开发者提供了一种可以异步监听目标元素与其祖先或视窗 (viewport) 交叉状态的手段。祖先元素与视窗 (viewport) 被称为根 (root)。 <img src="https://oscimg.oschina.net/oscnet/up-d965531bd2f894fbcbc70fdb8be422da791.jpg" alt="" referrerpolicy="no-referrer"></p><p>可以看到，交叉了就是说明当前元素在视窗里，当前就是可见的了。是代替监听滚动加载的不错方案。</p><p>当然还有其他方案，还是要根据实际的业务场景选择合适的方案，IM 消息分段加载的难点在于消息的不定高 (多种不同类型的消息)，计算成本还是有一些昂贵的。所以优化还是要验证一下临界值的，有时候优化不一定会有效。</p><h3>2.3 消息遍历</h3><p>上面我们讲到消息排序、去重以及消息状态更新等等，多个会话大量的聊天消息，如果处理不当，卡顿是必现的，可以先看一下我们优化之前的处理流程，采用的是第三方的 SDK，一堆 for 循环，消息量大一些基本卡住没反应了。 <img src="https://oscimg.oschina.net/oscnet/up-3fed2d242eb5a6037ecf275fd18b342189f.jpg" alt="" referrerpolicy="no-referrer"></p><p>那我们是如何处理这个问题的呢？基于现有的业务场景重写三方 SDK，将会话维护成独立的实例，核心算法就是采用二分法。感兴趣的同学可以看之前的这篇文章&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247489429%26idx%3D1%26sn%3D0f7c0c2062c56abe6fb69944b6d48fa3%26scene%3D21%23wechat_redirect" target="_blank">得物客服 IM 消息通信 SDK 自研之路</a>，讲述得比较详细。重写了 IM SDK 之后，客服再也没有反馈过聊天相关的卡顿，聊天首响提升了 20%，成果还是比较显著的。</p><h2>消息安全方面的考虑</h2><p>在 IM 系统中，消息的安全性是非常重要，开发同学需要具备较强的安全意识，将安全融入到开发流程中，增强系统的安全性和健壮性。消息安全性方面的事情我们做了很多，这里也不再详细讲解了。</p><h2>消息发送和接收的延迟</h2><p>消息发送和接收的延迟直接影响用户的使用体验和沟通效率，在上面我们已经分析过一条消息的旅程，出现延迟的原因也比较好分析，主要有以下 4 点：</p><ul><li><strong>网络延迟：</strong> IM 消息的发送和接收是以长链接的方式进行网络传输的，而网络传输过程中会产生一定的延迟。如果网络延迟高，就会导致消息发送和接收较慢。</li><li><strong>系统负载：</strong> 客服在一对多的情况下，多个用户同时在线，系统需要处理大量的消息和请求，导致系统响应速度较慢，这会对客服的体验造成影响。</li><li><strong>前端延迟：</strong> 需要经过本地消息队列、缓存等处理，可能导致消息的延迟。</li><li><strong>消息编码和解码：</strong> 部分消息需要对数据进行编码和解码，也会消耗一定的时间，从而导致延迟。</li></ul><p>既然能分析出原因，我们就能对症下药，可以通过一些优化策略来降低发送和接收的延迟，目前规划从<strong>以下 2 个方面来进行优化：</strong></p><ul><li><p><strong>前端方面：</strong> 延迟主要在消息的处理和编解码方面，目前我们 IM 消息的数据格式是 JSON，存在序列化和反序列化的过程，这里我们会采用 ProtoBuf 替换 JSON，目前已完成了相关技术调研和测试验证。我们简单来看一下 ProtoBuf(Protocol Buffers) 和 JSON 处理耗时的对比：</p><p>编码时间：ProtoBuf 的编码时间比 JSON 快得多，因为 ProtoBuf 的编码是二进制的，不需要进行编码转换以及无需进行冗余类型的转换。相对而言，JSON 的编码时间较慢。</p><p>解码时间：相比编码，ProtoBuf 的解码效率要稍微低一些。但是，由于 ProtoBuf 的优势在数据量大、结构复杂的情况下更为明显，对于小型数据解码时，两者的效率差异可能不太明显。</p></li><li><p><strong>网络延迟：</strong> 网络延迟我们很难控制，但是可以通过降低消息传输体积进行相关优化，刚讲了 Protobuf 替换 JSON，Protobuf 是二进制格式，比 JSON 格式更加紧凑，能够使数据包大小大幅度减小，在网络传输中能够减少带宽占用和流量费用。在 IM 系统中，由于用户数量庞大，消息发送频繁，在数据占用和网络带宽方面是一个巨大的问题，使用 ProtoBuf 能够显著地减少网络带宽消耗，提高系统的性能。还有一方面就是消息压缩，但是压缩的深度和压缩算法需要慎重选择、验证。</p></li></ul><p>所以使用 ProtoBuf 格式代替 JSON 格式基本可以解掉一大半延迟问题，也是接下来 IM 优化的一个方向。</p><h2>坐席体验和交互的考虑</h2><p>说到坐席体验和交互方面，我们还是积累了不少经验的，不仅仅是 IM，体验和交互是所有产品都无法绕开的一个话题，自从做 IM 以来，体验可谓是鞭策我们不断前进的动力，卡顿是一直环绕在我耳边的一个话题。客服理解的卡顿和我们正常理解的卡顿还是有点不一样的，前期我们也以为是系统卡住导致无法使用了，类似掉帧的场景，实际却不是，接口请求慢了、有错误的 Tip 提示、页面切换有短暂空白显示、输入消息回车后消息未立刻显示到聊天页面、图片上传的 Loading 提示等等，都会被归为卡顿。针对这些方面我们也是不断的进行职场调研、数据分析、优化，客服的满意度提升到了 18%。可能在大家看来做了这么久提升 18% 并不是一个比较好的数据，但是针对客服域，提升 18% 也是一个相对比较难逾越的数据了。主要的原因在 2 个方面：第一个方面是很多客服都是 3 个月以内入职的，对于我们做的一些功能优化对比体验是无法感知或缺少功能使用对比的；第二个方面是很多一线客服都来自一线大厂的客服服务团队。其实反过来想一下，这也是一种正向的驱动，至少我们每次调研都能收集到新的反馈，同更加成熟、优秀产品的体验差距。</p><p>体验不是一蹴而就的，不要想着一下子就做到位，一个优秀的用户体验和交互设计需要始终与用户需求和反馈相结合，并不断改进和完善。在实际设计和开发过程中，需要进行不断的测试和优化，以确保系统的质量和可接受性。同时，需要与用户进行积极的沟通和反馈，以便更好地理解用户需求和意见，这一点我们之前是做的不够好的，尤其是新版本的推广，系统的易用性并未达到客服的期望，也是我们后期需要持续改进的一个方面。</p><p>体验是以绝大数用户需求为核心的，不能仅仅为了一小部分用户而去牺牲其他用户的使用体验，尤其不能因为某一个用户的反馈意见而做出过多的改变或者牺牲其他用户的利益。体验优化过程的不妥协也是非常重要的策略，在体验优化过程中，必须保持理性和客观，根据用户调研和数据分析进行合理的权衡和决策，以实现最佳的用户体验。</p><p>一些小细节的优化也可以起到事半功倍的效果，在 IM 系统中，一些细节的优化包括：及时的消息提示、清晰的消息展示、精确的消息发送时间等等。这些小细节的优化可以直接提高客服的使用效率和体验，从而提高客服满意度。IM 的体验优化我们会一直做下去，有志者事竟成。</p><h1>五、后续规划</h1><p>上述技术和思考的细节中有讲到消息的可靠性传递、卡顿优化处理、安全性、效率以及体验等，接下来的一段时间我们还是以这几个方面为主线进行，持续优化、完善 IM 相关能力。主要考虑以下几个方面的规划：</p><ul><li><strong>体验优化：</strong> 体验是我们一如既往要做的事情，会持续挖掘视觉、交互等层面的优化点，从细节入手，比如：颜色搭配，按键选择等，提供良好的坐席体验。</li><li><strong>ProtoBuf 替换 JSON：</strong> 降低消息编码时间、提升解码效率、减少数据包体积、减少网络带宽消耗，提高系统的性能。</li><li><strong>消息压缩：</strong> 尤其是针对历史消息、批量消息，使用压缩技术，可以有效的减少数据包的体积。</li><li><strong>功能扩展：</strong> 持续完善机器人消息类型，尤其是针对售前导购、坐席辅助。逐步支持消息引用、标记等功能。</li><li><strong>多语言能力支持：</strong> 虽然目前还没有接入国际化业务，但在设计层面还是要具备快速扩展的能力。</li></ul><p>上述几个方面我们会优先去做重要且紧急的技术改造，并不会一味的创新、优化，还是会以业务为主，紧紧围绕业务和坐席体验展开。</p><h1>六、总结</h1><p>客服发送一条消息在 IM 应用中看似简单，背后需要考虑的技术细节点是很多的。首先，这需要考虑到消息的发送机制和可靠性。即使是一条简单的消息，也需要经过一系列的加密、编码、传输、安全合规等等处理才能被成功接收。</p><p>最重要的是要考虑到数据实时性的问题，各种极限场景下的操作，客服发送的消息需要被及时展示到聊天页并传输给用户，客服同学在一对多的场景下工作，需要确保各会话消息不会出现不一致 (丢失、重复)，还有消息拦截和异常情况等问题。</p><p>因此，客服发送一条消息不仅需要技术能力和数据处理能力，还需要思考坐席体验和数据实时性等方面的问题。开发过程中需要细致入微地处理各种问题并持续优化，从而为客服提供一个稳定、流畅、安全、友好的 IM 应用。</p><p>参考文章：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247489429%26idx%3D1%26sn%3D0f7c0c2062c56abe6fb69944b6d48fa3%26scene%3D21%23wechat_redirect" target="_blank">得物客服 IM 消息通信 SDK 自研之路</a></p><p>*文 / WWQ</p><p>本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" target="_blank">得物技术官网</a></p><p>未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 30 Oct 2023 10:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10140300</guid>
            <link>https://my.oschina.net/u/5783135/blog/10140300</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[公益组织请愿微软延长 Windows 10 支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美国公共利益研究组织 (PIRG) 近日向微软 CEO 萨蒂亚·纳德拉 (Satya Nadella) 发起一项<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpirg.org%2Ftake-action%2Ftell-microsoft-dont-leave-millions-of-computers-behind%2F" target="_blank">请愿</a>，呼吁该公司重新考虑在 2025 年 10 月终止 Windows 10 支持的举措。</span></p><p><span style="color:#000000">该组织认为，<span style="background-color:#ffffff">在目前使用 </span>Windows 10&nbsp;<span style="background-color:#ffffff">的 10 亿台设备中，有超过 4 亿台设备不满足&nbsp;</span>Windows 11&nbsp;<span style="background-color:#ffffff">系统的升级要求。</span>Windows 10 生命周期的结束将意味着它们会失去微软的支持，从而走向报废<span style="background-color:#ffffff">；由此产生的巨量电子垃圾，也</span>与该公司在环保方面的立场相悖。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">「微软需要重新考虑这一决定，继续为数亿无法升级电脑的用户提供安全更新，这既是为了他们的经济利益，也是为了保护环境。」</span></span></p><p><span style="color:#000000">请愿书内容如下：</span></p><blockquote><p><span style="color:#000000">尊敬的微软首席执行官萨蒂亚·纳德拉，</span></p><p><span style="color:#000000">不要让数亿台电脑报废。微软决定终止对 Windows 10 的支持可能会导致垃圾电脑数量出现有史以来最大的增幅，并使微软无法实现其可持续发展目标。新版操作系统对硬件的严格要求可能导致 40% 的在用电脑被抛弃。</span></p><p><span style="color:#000000">微软决定停止为医院、企业和家庭中数亿台功能正常的电脑提供支持，这对那些希望自己的昂贵设备能够经久耐用的客户来说，是一个不公平的交易。</span></p><p><span style="color:#000000">所有软件都会有停止支持的时候，但如果会对我们的环境造成严重的负面影响，我们就不应该接受。</span></p></blockquote><p><img alt="" height="375" src="https://oscimg.oschina.net/oscnet/up-b960c9a173a51ef51f32995e73b51017405.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">微软尚未发布有关 Windows 10 支持终止的公开声明，但外界猜测其可能复制 Windows 7 支持到期时的做法；允许<span style="background-color:#ffffff">专业版和企业版</span>有偿延长支持最长三年，但家庭版除外。</span></p><p><span style="color:#000000">PIRG 的 Designed to Last 活动总监 Lucas Rockett Gutterman <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpirg.org%2Fmedia-center%2F20000-call-on-microsoft-to-save-400-million-pcs%2F" target="_blank">指出</a>，微软过去曾扩展过对旧操作系统的支持。譬如 Windows XP 用户就收到了长达 13 年的安全更新，当其支持结束时，仍然可以在全球 30% 的计算机上运行。<span style="background-color:#ffffff">Windows 10 发布</span>后&nbsp;，在很大程度上是「向后兼容」的，这意味着当微软终止对其现有 Windows 系统的支持时，大多数旧计算机都能够运行新操作系统。</span></p><p><span style="color:#000000">「考虑到微软过去的这些行为，该公司强行过渡到 Windows 11 实在令人吃惊。这不仅对消费者不利，也对地球不利，因为这些过时的电脑将增加我们日益堆积的有毒电子垃圾。」</span></p><p><span style="color:#000000">也有人<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F10%2F27%2Fmicrosoft_petitioned_to_keep_windows%2F" target="_blank">提出</a>了或许可以转用其他操作系统的想法。对此，Gutterman 则解释称，虽然开源社区一直都有在努力支持被其他厂商放弃的硬件，<span style="background-color:#ffffff">但对于学校和医院等依赖仅适用于 Windows 的软件的机构来说，这种转变更为复杂。</span></span></p><p><span style="color:#000000">「<span style="background-color:#ffffff">对于微软来说，推动这些机构处置和更换那些功能正常、且仍在帮助学生和患者的个人电脑是没有意义的。最简单的解决方案就是微软扩展支持。</span>」</span></p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpirg.org%2Ftake-action%2Ftell-microsoft-dont-leave-millions-of-computers-behind%2F" target="_blank">请愿书地址</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 30 Oct 2023 09:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/264497/pigc-microsoft-extends-windows-10-support</guid>
            <link>https://www.oschina.net/news/264497/pigc-microsoft-extends-windows-10-support</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[项目捐给了开源基金会，作者手上还剩了什么？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#3498db"><strong>原标题：Apache 软件基金会项目孵化过程中知识产权转移的讨论</strong></span></p><ul><li><p>作者：张伟玲，谭中意</p></li><li><p>审核：姜宁，张亮</p></li></ul><p style="margin-left:0px; margin-right:0px; text-align:start">作者简介：</p><p style="color:#333333; text-align:start"><em>张伟玲，多年大型互联网知识产权法律经验，擅长商标、开源、著作权等知识产权法律领域的合规制度建设、 培训和诉讼支持，在互联网信息网络传播/合规/品牌等领域有丰富实战经验。</em></p></blockquote><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>讨论背景：</strong></p><p style="color:#333333; text-align:start">自 2002 年 Apache Software Foundation（<strong>ASF</strong>）开始孵化项目以来，ASF 至今已经毕业了 200 多个顶级项目。在这些项目中，无论是个人捐赠还是企业捐赠的，都必须严格遵守其孵化流程和政策要求。尤其是近几年来，越来越多的国人发起的开源项目进入 Apache 基金会孵化，并有不断的项目毕业，Apache 开源基金会在国内的影响力越来越大。而它作为一个国际范围内 host 项目最多的开源基金会，它的各种政策和流程也越来越为更多人熟悉。</p><p style="color:#333333; text-align:start"><img src="https://alc-beijing.github.io/alc-site/images/apache_incubator_IP_policy/apache_incubator_ip_1.png" referrerpolicy="no-referrer"></p><p style="color:#333333; text-align:start">而其中最重要的一个流程—项目孵化，在知识产权方面也有很独特的政策。那么，作为项目所有者的您，在面对这些政策和可能会遇到各种文件时，是否有过困惑「我签署了什么？项目的知识产权还是我的吗？或者说我还剩些什么权利呢？…」，为了解决这些困惑，本文会对您可能遇到的问题进行初步讨论分析，当然本人是从公开发表的资料和文档，并结合亲身经历的项目捐献和孵化过程中总结，也有些认识不到位的地方，请多多讨论，有问题可跟本人微信号<strong>weiweizhang0410</strong>讨论，thanks。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>先说结论：</strong></p><p style="color:#333333; text-align:start">总的来说，捐献项目给 Apache 基金会，Apache 基金会需要您的「版权授权 + 专利授权 + 商标转让」。</p><p style="color:#333333; text-align:start">知识产权即人们常说的 IP（Intellectual Property）,跟开源软件相关的主要有如下三项：版权（即 Copyright），专利（即 Patent），商标（即 Trademark ）。根据 Apache 基金会的 IP 政策，个人或者公司捐献项目给它，该项目的专利和版权必须授权给它，商标必须要转让给它。</p><p style="color:#333333; text-align:start">即它既要商标的所有权（owner），又要专利的使用授权，还要版权的使用授权。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>具体解释：</strong></p><p style="color:#333333; text-align:start">开源项目要进入 Apache 基金会进行孵化，原有版权所有人必须要签署如下两个文件，一个是 SGA（Software Grant Agreement），另外一个是 CCLA/ICLA（公司或者个人贡献协议 ICLA: Individual Contributor License Agreement，CCLA: Corporate Contributor License Agreement）。我们一起来看看这两个文件的内容。</p><p style="color:#333333; text-align:start">先看看 SGA（Software Grant Agreement），以下是协议原文信息：<img src="https://alc-beijing.github.io/alc-site/images/apache_incubator_IP_policy/apache_incubator_IP_2.png" referrerpolicy="no-referrer"></p><p style="color:#333333; text-align:start">下面我们来仔细看下这篇文档的重点部分。</p><p style="color:#333333; text-align:start"><em>「WHEREAS, Licensor owns or has sufficient rights to contribute the software source code and other related intellectual property as itemized on Exhibit A (「Software」) under the terms of this agreement to the Foundation for use within Foundation software development projects (「Projects」).</em></p><p style="color:#333333; text-align:start">首先，实务操作中需要签署人必须有足够的授权来贡献代码和相关的 IP。默认规则下该签署人至少是该公司高级总监以上的职位。</p><p style="color:#333333; text-align:start">然后看关键的部分：<span>&nbsp;</span><em><strong>「Subject to the terms and conditions of this License, Licensor hereby grants to the Foundation:</strong></em></p><p style="color:#333333; text-align:start"><em><strong>a) a non-exclusive, worldwide, royalty-free, irrevocable copyright license to reproduce, prepare derivative works of, publicly display, publicly perform, distribute and sublicense, internally and externally, the Software and such derivative works, in source code and object code form; and</strong></em></p><p style="color:#333333; text-align:start"><em><strong>b) a non-exclusive, worldwide, royalty-free, irrevocable patent license under Licensed Patents to make, use, sell, offer to sell, import and otherwise transfer the Software in source code and object code form. 「Licensed Patents」 mean patent claims owned by Licensor which are necessarily infringed by the use or sale of the Software alone.</strong></em></p><p style="color:#333333; text-align:start"><strong>许可人授予基金会如下权利:</strong></p><ul><li><p>a） 以源代码和目标代码的形式在全球范围内复制、准备衍生作品、公开展示、公开表演、分发和再授权软件及其衍生作品的非排他性、免版税、不可撤销的版权许可；以及，</p></li><li><p>b） 非排他性的、全球范围内的、免版税的、不可撤销的专利许可证，根据许可专利以源代码和目标代码的形式获得、使用、销售、许诺销售、进口和以其他方式转让该软件。」</p></li></ul><p style="color:#333333; text-align:start">我们再看下 CCLA（Corporate Contributor License Agreement），原文相对较长，截取原文知识产权重点部分：</p><p style="color:#333333; text-align:start"><img src="https://alc-beijing.github.io/alc-site/images/apache_incubator_IP_policy/apache_incubator_IP_3.png" referrerpolicy="no-referrer"><img src="https://alc-beijing.github.io/alc-site/images/apache_incubator_IP_policy/apache_incubator_ip_4.png" referrerpolicy="no-referrer"></p><p style="color:#333333; text-align:start"><strong>简单摘要如下：</strong></p><p style="color:#333333; text-align:start"><em>「感谢您对 Apache 软件基金会（「基金会」）的关注。为了阐明由任何个人或实体提供的贡献所授予的知识产权许可，基金会须具有由每个贡献者签署的「贡献者许可协议」（CLA），以表明同意以下许可条款。该许可证是为了保护您作为贡献者，以及保护基金会及其用户；它不会改变您将自己的贡献用于任何其他目的的权利。</em><span>&nbsp;</span>。。。。</p><p style="color:#333333; text-align:start">2.授予版权许可。在遵守本协议前提下，授予接收者永久的，全球的，非独占的，免费的，免版税，不可撤销的版权许可，以复制、公开展示、公开表演，再许可、分发您的作品以及此类的衍生作品。</p><p style="color:#333333; text-align:start">3.授予专利许可。在遵守本协议前提下，授予接收者永久的，全球的，非独占的，免费的，免版税，不可撤销的专利许可（本节所述除外）获得、使用，销售，许诺销售，进口和以其他方式转让作品。。。</p><p style="color:#333333; text-align:start">综上所述，作为项目协议来说，这份两份许可是较简短的，但是从其内容来看却已经足以明晰 ASF 的需求和项目所有者的义务： 项目所有者作为软件权利人，需要授予 ASF 两项权利，即：版权和专利权。 也就是说在这个阶段，ASF 所需要的是您的版权和专利的授权，是在全球范围的 ASF 可以免费复制、分发、再授权等的权利。</p><p style="color:#333333; text-align:start">根据 ASF 孵化政策，项目毕业前需转让项目商标，该审核一般由 ASF 品牌管理负责部门进行审批，在该阶段审批，一般是出于若毕业后再更名，会需要来自技术团队的大量支持，因此，从 ASF 角度会要求尽早提起商标的转让审核。</p><p style="color:#333333; text-align:start">经过上述初步分析来看，无论是签署的协议文件，还是孵化过程中的商标转让义务，ASF 未要求项目所有者对于版权和专利的所有权的转让，作为项目所有者需要承担的义务主要为：版权授权 + 专利授权 + 商标转让。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>发版说明：</strong></p><p style="color:#333333; text-align:start">可能有的同学要问，既然捐献过程中没有发生版权的转移，但是为什么 Apache 毕业项目的 Copyright Owner 都是 Apache Foundation 呢，例如看 apache kafka（这是 linkedin 捐献给 Apache 基金会的项目），每个源码文件的 license header 都指向 Notice 文件。https://github.com/apache/kafka/blob/trunk/NOTICE</p><pre><code>Apache Kafka
Copyright 2020 The Apache Software Foundation.

This product includes software developed at
The Apache Software Foundation (https://www.apache.org/).
</code></pre><p style="color:#333333; text-align:start">再看 apache beam 项目（这是 google 捐献给 apache 基金会的项目），每个源码文件的 license header 都指向 notice 文件，<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fbeam%2Fblob%2Fmaster%2FNOTICE" rel="nofollow" target="_blank">https://github.com/apache/beam/blob/master/NOTICE</a><span>&nbsp;</span>文件内容如下：</p><pre><code>Apache Beam
Copyright 2016-2018 The Apache Software Foundation

This product includes software developed at
The Apache Software Foundation (http://www.apache.org/).
</code></pre><p style="color:#333333; text-align:start">那是因为按照 Apache 基金会发版的要求，每个项目在发布软件版本的时候，是需要把源码中的每个文件的头部都加上 Apache 基金会指定的 License Header，而这个 License Header 的内容统一指向该项目的 NOTICE 文件。（当然如果包含了其他第三方开源代码，需要按照该开源项目许可证的要求，在 Header 上保留源作者的版权申明的，详见 https://www.apache.org/legal/src-headers.html#3party。）</p><pre><code>/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements. See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0

 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
</code></pre><p style="color:#333333; text-align:start">而该 NOTICE 文件一般内容都是指明当前的 Copyright Owner 是 Apache 基金会。但是在该 NOTICE 文件中，是可以保留一些之前版本的 Copyright Owner 的声明的。 例如 Netbeans 这个项目，它最早的 Owner 是 Sun Microsystem，之后 Sun 被 Oracle 收购后，Copyright Owner 变成 Oracle，而之后 Oracle 把这个项目捐献给 Apache 基金会。为了保护各个 Owner 的知识产权，把各个时期的 Copyright Owner 都列了出来，所以现在的内容 https://github.com/apache/netbeans/blob/master/NOTICE 如下：</p><pre><code>Apache Netbeans
Copyright 2017-2020 The Apache Software Foundation

This product includes software developed at
The Apache Software Foundation (http://www.apache.org/).

The code is based on NetBeans, that has been kindly donated to the Apache
Software Foundation by Oracle.

The code was Copyright 1997-2016 Oracle and/or its affiliates.  The Initial
Developer of the Original Software was Sun Microsystems, Inc. Portions
Copyright 1997-2006 Sun Microsystems, Inc.
</code></pre><p style="color:#333333; text-align:start">从上面的文件中能看出，该文件的 Copyright 按照时间列出了前后几个，1997-2006 为 Sun Microsystems，1997-2016 为 Oracle，2017-2020 为 Apache foundation。</p><p style="color:#333333; text-align:start">我们追溯 ASF 在 2004 年的董事会记录，发现，上述操作是基金会为了解决「用户在向 ASF 提供授权时，ASF 文件中版权声明却归他人持有人时的不一致情况」，根据董事会方案： 「版权者的首选处理方式是删除此类声明，或将其放在单独的位置归档，以包含在每个项目的 COPYRIGHT 文件中，或在贡献中包含基金会的书面许可，以进行通知的删除或重新安置；被许可给 ASF 的文件应有版权声明，并进行适当修改，以反映贡献年份和原始发行的任何后续年份。」</p><p style="color:#333333; text-align:start">因此，作为项目所有人的版权信息，有的会在 NOTICE 部分予以体现。但是 Apache 的发版和毕业政策都会约定最新版本的 Copyright Owner 声明是 Apache 基金会，虽然可以保留之前版本的 Copyright 说明。只有统一被授权方均为 Apache 基金会，该软件的用户基于对 Apache 基金会的品牌和信心，才会持续在该项目上进行投入，不担心出现该软件的主导公司未来的某一天把该软件闭源的情况。因为即使出现该软件主导方不再继续投入，或者另起炉灶的情况，Apache 的知识产权制度保证了还有社区的其他人在继续维护。而该软件最新版本的 Copyright Owner 是 Apache 基金会，则在法律上减少了该社区在继续维护上的知识产权纠纷。</p><p style="color:#333333; text-align:start">这是 Apache 开源基金会精心的知识产权政策的设计，为了保证它旗下的项目是一个可信赖的产品，因为知识产权问题已经理清，持续维护的问题也已经解决，所以 Apache 的项目才会如此受到欢迎，所以才会有更多的公司或者个人把项目捐献给 Apache 基金会。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>总结：</strong></p><p style="color:#333333; text-align:start">综合上面的说明来看，当有新的项目需要经 ASF 孵化毕业，作为项目所有人需要承担的义务主要在于版权授权、专利授权和商标转让，版权原始权利并未转让，因此，在项目的实际操作中请记得根据 ASF 的官方格式保留自己的权利声明。 本文主要是基于实践操作和 ASF 官方规定作出的一些讨论，在您具体项目确定孵化或捐赠之前，请一定与您的律师进行个案的综合评估以保障您的权益哦。当然也欢迎微信联系跟本人共同沟通讨论。</p><p style="margin-left:0px; margin-right:0px; text-align:start">参考资料：</p><ul><li><p>ASF Contributor agreement<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.apache.org%2Flicenses%2Fcontributor-agreements.html" rel="nofollow" target="_blank">http://www.apache.org/licenses/contributor-agreements.html</a></p></li><li><p>ASF SGA template<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.apache.org%2Flicenses%2Fsoftware-grant-template.pdf" rel="nofollow" target="_blank">http://www.apache.org/licenses/software-grant-template.pdf</a></p></li><li><p>ASF CCLA<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.apache.org%2Flicenses%2Fcla-corporate.pdf" rel="nofollow" target="_blank">http://www.apache.org/licenses/cla-corporate.pdf</a></p></li><li><p>Apache 文件头说明<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apache.org%2Flegal%2Fsrc-headers.html" rel="nofollow" target="_blank">https://www.apache.org/legal/src-headers.html</a></p></li><li><p>ASF 2004 Board meeting 记录<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apache.org%2Ffoundation%2Frecords%2Fminutes%2F2004%2Fboard_minutes_2004_11_14.txt" rel="nofollow" target="_blank">https://www.apache.org/foundation/records/minutes/2004/board_minutes_2004_11_14.txt</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 30 Oct 2023 09:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oscpyaqxylk/blog/10140275</guid>
            <link>https://my.oschina.net/oscpyaqxylk/blog/10140275</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
