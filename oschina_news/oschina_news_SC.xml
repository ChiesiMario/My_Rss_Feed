<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 18 Mar 2024 10:14:06 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[历时 20 年，GnuCOBOL 已达到工业成熟度]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OCamlPro 创始人兼 GnuCOBOL 贡献者 Fabrice Le Fessant <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fftp.heanet.ie%2Fmirrors%2Ffosdem-video%2F2024%2Fh2215%2Ffosdem-2024-3249-gnucobol-the-free-industrial-ready-alternative-for-cobol-.av1.webm" target="_blank">表示</a>，经过 20 年的发展，开源 GnuCOBOL「已经达到了工业成熟度，可以在所有环境中与专有产品竞争。」</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-f841c8a4f74c37bf76aa87226db78e14e1b.png" width="500" referrerpolicy="no-referrer"></p><blockquote><p><span style="color:#000000">GnuCOBOL 是一款免费的现代 COBOL 编译器，曾用名 OpenCOBOL，于 2013 年更名为 GnuCOBOL。实现了 COBOL 85、X/Open COBOL 和较新的 ISO COBOL 标准（2002、2014、2023）的大部分内容，以及其他 COBOL 编译器（IBM COBOL、MicroFocus COBOL、ACUCOBOL-GT 等）中的许多扩展。</span></p><p><span style="color:#000000">GnuCOBOL 将 COBOL 翻译成 C，并在内部使用 native C 编译器编译翻译后的代码。在各种平台上构建 COBOL 程序，包括 GNU/Linux、Unix、Mac OS X 和 Microsoft Windows。GnuCOBOL 还可在 HP/UX、z/OS、SPARC、RS6000、AS/400 以及其他机器和操作系统组合上构建。</span></p><p><span style="color:#000000">COBOL 是最古老的编程语言之一，历史可以追溯到 1959 年左右；但当下仍被大型组织广泛用于处理来自重要中央系统的数据，例如账单、帐户、工资单和客户交易等。2022 年的一项调查指出，92% 的受访者认为 COBOL 具有战略意义，日常使用的 COBOL 代码量显着增加至 775-8500 亿行；大约是先前估计的三倍。</span></p></blockquote><p><span style="color:#000000">GnuCOBOL 项目负责人 Simon Sobisch 指出，GnuCOBOL 正在进行大量的商业部署，如银行后端应用程序，其中许多是从 Micro Focus 迁移过来的，且用户报告称性能因此得到了提高。GnuCOBOL 代码的实现可以运行数千个处理器，这使项目开发人员有机会在大型用例中调整性能和内存使用情况。</span></p><p><span style="color:#000000">Sobisch 称，GnuCOBOL 在合规性方面通过了 97% 的 COBOL 85 一致性测试，超越了现有的专有产品。不过 GnuCOBOL 暂时还不支持 objects 或 messages。对此 Sobisch 解释道：「objects 是 COBOL 22 中的一个很好的功能，但使用得并不多。」</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/148786/cobol-old-programming-languages" target="_blank">调查：COBOL 程序员后继无人，一些关键岗位或面临空缺</a></p></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/181943/microfocus-cobol-market-research-2022" target="_blank">COBOL 代码行数超 8000 亿，应用现代化是首选发展道路</a></p></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/255047/ibm-ai-translate-cobol-code-to-java" target="_blank">IBM 利用 AI 将 COBOL 代码转换为 Java</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 08:12:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283605/gnucobol-ready-for-industry</guid>
            <link>https://www.oschina.net/news/283605/gnucobol-ready-for-industry</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国信通院发布《绿色算力技术创新研究报告（2024 年）》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">《绿色算力技术创新研究报告（2024 年）》由中国信息通信研究院云计算与大数据研究所编制，旨在梳理绿色算力技术的创新发展趋势，推动中国算力产业的绿色高质量发展。</p><p style="color:#060607; margin-left:0; margin-right:0; text-align:start"><img alt="" height="509" src="https://static.oschina.net/uploads/space/2024/0318/150145_iTRv_4700705.png" width="360" referrerpolicy="no-referrer"></p><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">报告的核心内容包括：</p><ol><li><p style="margin-left:0; margin-right:0"><strong>绿色算力发展态势</strong>：介绍了算力作为数字经济时代的关键生产力，以及绿色低碳、节能环保成为产业发展的底层逻辑。报告强调了技术创新在绿色算力发展中的根本作用，并概述了算力产业的政策背景、市场规模增长、产业生态丰富性以及绿色发展的必然要求。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力概念内涵</strong>：绿色算力是算力基础设施实现绿色、低碳、可持续发展的一种形式，涉及自然资源、环境资源的考量，以及经济效益与环境保护、社会责任的融合。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力发展演进</strong>：报告将绿色算力的发展分为四个阶段：初级阶段（1996-2006 年）、起步阶段（2007-2020 年）、发展阶段（2021-2030 年）和成熟阶段（2030 年及未来），每个阶段的特征和发展重点有所不同。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力属性特征</strong>：绿色算力具有全局性、先导性、长期性等特点，对数字经济发展和高增长企业的孵化具有重要作用。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力设施层技术创新</strong>：探讨了建设绿色能源替代、创新储能部署方式、应用自然冷却技术和液冷技术等，以降低供电传输损耗和数据中心制冷用电需求。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力设备层技术创新</strong>：包括优化服务器硬件节能、开发存储材料及工艺、应用无损网络介质等，以提高数据技术效率和网络传输效率。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力平台层技术创新</strong>：涉及迭代资源管理技术、简化产品开发模式、完善环境监测体系等，以实现算力资源的高效调度和利用。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力技术赋能经济社会发展</strong>：绿色算力技术在加速科研技术革命、赋能产业节能低碳、助力社会治理格局构建等方面的应用和价值。</p></li><li><p style="margin-left:0; margin-right:0"><strong>绿色算力发展的展望与建议</strong>：提出了加强绿色算力政策保障、夯实绿色能源底座支撑、巩固绿色设备技术创新、聚焦绿色平台能力建设和深入挖掘应用场景价值等建议。</p></li></ol><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">报告强调了绿色算力技术创新的重要性，并提出了相应的发展建议，以期实现数字经济的高质量发展和绿色转型。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">报告详情可至<strong><span style="color:#333333"><span style="background-color:#f39c12">「开源中国 APP - 报告模块」</span></span></strong>查看。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">APP 下载地址：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="300" src="https://oscimg.oschina.net/oscnet/up-8ab7bb9f45ecaae87f7a862ea446ae1dacf.png" width="300" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>（<em>目前仅提供 Android 版本）</em></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 07:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283584</guid>
            <link>https://www.oschina.net/news/283584</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[博通 CEO 承认 VMware 社区存在「一些不安」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">博通 (Broadcom) 首席执行官 Hock Tan 将其收购 VMware 后的第一个百天评价为「一个良好的开端」。但他也承认，这家虚拟化巨头的快速变化让一些人难以消化。</span></p><p><span style="color:#000000">Tan 在博通公司的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.broadcom.com%2Fblog%2Fvmware-by-broadcom-the-first-100-days" target="_blank">博客</a>上写道：</span></p><blockquote><p><span style="color:#000000">虽然还有很多工作要做，但我们在打造全球领先的基础设施技术公司方面已经取得了实质性进展。在评估和收购 VMware 的 18 个月过程中，我们审视了一切，以确定为客户创造更多价值所需的条件。自 11 月底完成收购以来，我们采取了果断行动来提高客户价值。</span></p><p><span style="color:#000000">我们彻底改革了我们的软件产品组合、进入市场的方法和整体组织结构。我们改变了销售软件的方式和对象。我们已经完成了从 2019 年开始加速的软件业务模式转型，从销售永久软件到仅订阅许可（行业标准）。</span></p><p><span style="color:#000000">当然，我们认识到这种程度的变化给我们的客户和合作伙伴带来了一些不安，这是可以理解的。但所有这些举措都是为了更快地创新、更有效地满足客户的需求以及让与我们开展业务变得更容易。我们还期望这些变化能够为我们的合作伙伴提供更大的盈利能力和更好的市场机会。</span></p></blockquote><p><img height="255" src="https://oscimg.oschina.net/oscnet/up-9d53649997180c88243beb10341cdfcd9b3.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">他接着还提到了 VMware 的 Cloud Foundation 产品，承诺将投入 10 亿美元的研发资金来改进该产品，并指出博通已将订阅标价减半。</span></p><p><span style="color:#000000">但 The Register 指出，Tan 忽略了一点，即 VMware 现在只销售捆绑产品，这意味着 Cloud Foundation 现在是一些客户重新授权其现有 VMware 财产的唯一途径。Cloud Foundation 涵盖了软件定义的计算、网络、存储和管理工具--并非所有 VMware 客户都使用或需要这样的组合。</span></p><p><span style="color:#000000">因此，被迫购买 Cloud Foundation 意味着有些人被迫支付比他们想要的更多的软件费用--这种情况导致一些客户的账单大幅增加。The Register 虚拟化部门获悉，许可证成本上涨了 500% 或 600%；在某些情况下，在裸机上运行工作负载比使用服务器虚拟化更便宜。</span></p><p><span style="color:#000000">博通公司认为，如果这些客户实施所有 Cloud Foundation，他们将获得更好的收益；因为与不断增加的公共云成本相比，它将「为普通企业客户带来更低的拥有成本」。</span></p><p><span style="color:#000000">Tan 认为，博通迄今所采取的行动解决了 "我们的客户直接向我表达的作为其最关键优先事项的业务成果"。据 The Register 了解，VMware by Broadcom 将在 5 月份左右发布 Cloud Foundation 和其他核心 VMware 产品的增强功能。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 06:56:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283580/vmware-by-broadcom-the-first-100-days</guid>
            <link>https://www.oschina.net/news/283580/vmware-by-broadcom-the-first-100-days</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[北京将发布第一代通用开放人形机器人本体]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">北京青年报消息称，最近，北京人形机器人创新中心传来好消息，近期将发布第一代通用开放人形机器人本体。</span></p><p><span style="color:#000000">北京人形机器人创新中心相关负责人介绍，该中心主要面向人形机器人核心器件、通用本体、通用大模型、运动控制系统、工具链和开源社区等人形机器人行业短板和痛点开展技术攻关，将为整个行业打造出共性技术平台、公共服务平台以及规范人形机器人相关标准等，总体来说，中心将围绕人形机器人产业通用部分发力，服务整个行业发展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 02:54:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283529</guid>
            <link>https://www.oschina.net/news/283529</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Podman Desktop 1.8 发布，带来自己的 K8s GUI]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Podman Desktop 1.8 已经发布，此版本带来：</p><ul><li><strong>Podman 4.9.3</strong>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman%2Freleases%2Ftag%2Fv4.9.3" target="_blank">Podman 4.9.3</a>现在包含在 Windows 和 Mac 安装程序中。</li><li><strong>Kubernetes Explorer</strong>：用于使用 Kubernetes 集群的高级 UI 和新工具。</li><li><strong>Global Onboarding</strong>：通过一组指导工作流程，轻松配置和设置您的环境。</li><li><strong>学习中心</strong>：为开发人员发现新的用例和功能。</li><li><strong>扩展 API 改进</strong>：扩展 API 的另一项重大更新，为 🦭 Podman Desktop 的扩展带来更多好处。</li><li><strong>增强的构建、Pod 列表和故障排除页面</strong>：针对不同平台进行构建、升级的 Pod 视图等。</li></ul><p><img height="944" src="https://static.oschina.net/uploads/space/2024/0318/103731_jmJO_3820517.png" width="1704" referrerpolicy="no-referrer"></p><h3>Podman&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fblog%2Fpodman-desktop-release-1.8%23podman-493" target="_blank">4.9.3</a></h3><p style="margin-left:0px; margin-right:0px; text-align:start">🦭 Podman 4.9.3 包括针对我们用户报告的稳定性和可靠性问题的关键修复 - 特别是如果您使用 Apple 芯片架构。如果您一直在苦苦挣扎，我们强烈建议您更新！</p><h3>Kubernetes<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fblog%2Fpodman-desktop-release-1.8%23kubernetes-explorer" target="_blank">资源管理器</a></h3><p style="margin-left:0px; margin-right:0px; text-align:start">在过去的版本中作为实验性功能逐步引入，我们已准备好扩展我们的功能以帮助开发人员从容器过渡到 Kubernetes。在此版本中，我们引入了一组新功能，使开发人员能够使用更多 Kubernetes 资源，从而对应用程序提供更精细和交互式的控制。</p><p style="margin-left:0px; margin-right:0px; text-align:start">现在，🦭 Podman Desktop 中提供了一个新的 Kubernetes Explorer，除了对 Pod 的现有支持之外，它还能够使用部署、服务、入口和路由。对于每个资源，Podman Desktop 提供有关集群上资源状态的实时信息。在此概述页面的右上角，您还可以单击应用 YAML 在集群上创建或更新资源（类似于「kubectl apply -f」），并查看当前连接状态。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="844" src="https://static.oschina.net/uploads/space/2024/0318/104554_X2mJ_3820517.png" width="1296" referrerpolicy="no-referrer"></p><p>就像本地容器或映像一样，您可以单击「摘要」、「检查」和 Kube (YAML) 页面上的更多详细信息。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="862" src="https://static.oschina.net/uploads/space/2024/0318/104606_xUKa_3820517.png" width="1306" referrerpolicy="no-referrer"></p><p>看到问题了吗？您可以直接从 Kube 选项卡编辑和应用更改。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="860" src="https://static.oschina.net/uploads/space/2024/0318/104617_Knka_3820517.png" width="1302" referrerpolicy="no-referrer"></p><p>🦭 Podman Desktop 继续弥合差距和差异，使使用容器的开发人员能够通过高效的工作流程从本地工作站瞄准 Kubernetes。这是除了一些已经可用的强大功能之外的所有功能：</p><ul><li>Podman 的原生 Kubernetes 支持</li><li>Podify - 将容器转换为 Pod</li><li>使用 Minikube 和 Kind 扩展设置本地 Kubernetes 环境</li><li>部署到 Kubernetes 并将本地映像从 Podman 推送到 Kubernetes 环境</li><li>管理 Kubernetes 上下文</li><li>连接到远程 Kubernetes 集群</li></ul><h3>扩展 API<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fblog%2Fpodman-desktop-release-1.8%23extension-api-improvements" target="_blank">改进</a></h3><p style="margin-left:0px; margin-right:0px; text-align:start">我们继续花费大量时间添加新的扩展 API，为即将推出的扩展提供更多功能，甚至更好地集成到 🦭 Podman Desktop：</p><ul><li>拆分 getMatchingPodmanEngine&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6160" target="_blank">#6160</a></li><li>创建容器时添加 HealthCheck 参数<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5981" target="_blank">#5981</a></li><li>将 listPods 暴露给扩展<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5864" target="_blank">#5864</a></li><li>createPod 的标签<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5862" target="_blank">#5862</a></li><li>允许在 Pod 中创建容器<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5848" target="_blank">#5848</a></li><li>OpenPod 应重定向到 pod 的视图<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5846" target="_blank">#5846</a></li><li>增强 createContainer API 缺少参数的情况<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6011" target="_blank">#6011</a></li><li>允许扩展使用 openDialog/saveDialog&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6009" target="_blank">#6009</a></li><li>允许在贡献的操作中自定义图标<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5995" target="_blank">#5995</a></li><li>添加缺失的类型<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6213" target="_blank">#6213</a></li><li>允许从扩展导航到特定的 Web 视图<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5899" target="_blank">#5899</a></li><li>将 stopPod 和 removePod 暴露给扩展<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5898" target="_blank">#5898</a></li><li>使用新的 API 打开/保存对话框<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6051" target="_blank">#6051</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6050" target="_blank">#6050</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6049" target="_blank">#6049</a></li><li>扩展 Podman Desktop API 构建映像参数<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5882" target="_blank">#5882</a></li><li>允许扩展至统计容器<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fissues%2F6211" target="_blank">#6211</a></li></ul><hr><h2>其他值得注意的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fblog%2Fpodman-desktop-release-1.8%23other-notable-enhancements" target="_blank">增强功能</a></h2><p style="margin-left:0px; margin-right:0px; text-align:start">我们在此版本中添加了 40 多项功能，以下是其他一些亮点：</p><ul><li>改进 Podman Desktop 更新警报<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6068" target="_blank">#6068</a></li><li>在故障排除中添加收集和下载日志按钮<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5119" target="_blank">#5119</a></li><li>为 Linux 启用 podman 机器<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5902" target="_blank">#5902</a></li><li>多次删除动画<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5717" target="_blank">#5717</a></li><li>图像删除动画<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5709" target="_blank">#5709</a></li><li>卷删除动画<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5707" target="_blank">#5707</a></li><li>打开 OpenShift 路线<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5560" target="_blank">#5560</a></li><li>添加打开创建的 Pod 详细信息<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F4499" target="_blank">#4499</a></li><li>部署到 kubernetes 集群时使用 https&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5824" target="_blank">#5824</a></li><li>仪表板页面上的入门轮播<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5142" target="_blank">#5142</a></li><li>删除对象时添加确认对话框<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5445" target="_blank">#5445</a></li></ul><p style="margin-left:0px; margin-right:0px; text-align:start">我们在实施 light 模式方面也取得了一些重大进展：</p><ul><li>使用主题颜色反转内容<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6029" target="_blank">#6029</a></li><li>使用辅助导航的主题颜色<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6028" target="_blank">#6028</a></li><li>为全球导航应用主题颜色<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6027" target="_blank">#6027</a></li><li>为标题栏应用主题颜色<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6025" target="_blank">#6025</a></li><li>一致的关闭按钮<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6060" target="_blank">#6060</a></li><li>在快速选择中使用组件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6057" target="_blank">#6057</a></li><li>为 webview 提供 css 颜色<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5963" target="_blank">#5963</a></li><li>将颜色发布到应用程序的样式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5962" target="_blank">#5962</a></li><li>允许扩展提供带有一组颜色的主题<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5961" target="_blank">#5961</a></li><li>商店颜色<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5960" target="_blank">#5960</a></li><li>包括颜色注册表<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5958" target="_blank">#5958</a></li><li>添加实用方法来获取主题的值<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5947" target="_blank">#5947</a></li><li>当操作系统更改颜色时发送事件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5946" target="_blank">#5946</a></li><li>清理深色：前缀颜色<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5944" target="_blank">#5944</a></li><li>将调色板提取到自己的文件中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5931" target="_blank">#5931</a></li><li>输入组件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5904" target="_blank">#5904</a></li><li>输入错误，在运行图像中使用输入组件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5988" target="_blank">#5988</a></li><li>构建图像时使用输入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5986" target="_blank">#5986</a></li><li>使用代理设置输入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5943" target="_blank">#5943</a></li><li>使用注册表输入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5939" target="_blank">#5939</a></li><li>从容器创建 pod 时使用输入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5935" target="_blank">#5935</a></li><li>在扩展页面中使用输入组件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5934" target="_blank">#5934</a></li><li>在创建卷中使用输入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5933" target="_blank">#5933</a></li><li>重命名图像时使用输入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5964" target="_blank">#5964</a></li><li>在部署到 kube 时使用复选框组件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6030" target="_blank">#6030</a></li></ul><hr><h2>值得注意的错误<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fblog%2Fpodman-desktop-release-1.8%23notable-bug-fixes" target="_blank">修复</a></h2><p style="margin-left:0px; margin-right:0px; text-align:start">我们在此版本中修复了许多错误，包括以下内容：</p><ul><li>将容器复制到 pod 时安装的复制卷<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5640" target="_blank">#5640</a></li><li>更改卷和容器列表中「创建」按钮的顺序<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6092" target="_blank">#6092</a></li><li>上下文值更新时刷新入门项目 (#4597)&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6173" target="_blank">#6173</a></li><li>更好地登录 informer 连接错误<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6158" target="_blank">#6158</a></li><li>网站：替换损坏的链接<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6111" target="_blank">#6111</a></li><li>中心空屏幕<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6077" target="_blank">#6077</a></li><li>不要求确认打开本地文件夹/文件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5743" target="_blank">#5743</a></li><li>强制面包屑垂直对齐<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5741" target="_blank">#5741</a></li><li>身份验证页面中的长用户名<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5737" target="_blank">#5737</a></li><li>用于更新任务名称的消息属性<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5731" target="_blank">#5731</a></li><li>导航项 UI 修复<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5886" target="_blank">#5886</a></li><li>显示回注册表的图标<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5843" target="_blank">#5843</a></li><li>检查路由 tls 以使用 http 或 https&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5825" target="_blank">#5825</a></li><li>白色工具提示<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5887" target="_blank">#5887</a></li><li>限制注册表用户名列宽度<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5718" target="_blank">#5718</a></li><li>删除 Linux 上的 docker 兼容性警告和按钮<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5903" target="_blank">#5903</a></li><li>容器的图像使用情况<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5663" target="_blank">#5663</a></li><li>删除当前上下文时应更改/更新<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5819" target="_blank">#5819</a></li><li>不要折叠侧边栏上的类别<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5727" target="_blank">#5727</a></li><li>使 localhost 成为 env.openExternal 调用的有效域<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5716" target="_blank">#5716</a></li></ul><hr><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fblog%2Fpodman-desktop-release-1.8%23documentation" target="_blank">文档</a></h2><p style="margin-left:0px; margin-right:0px; text-align:start">随着新版本的 🦭 Podman Desktop 的发布，文档也进行了以下改进：</p><ul><li>containerEngine api 的容器和图像相关方法<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5891" target="_blank">#5891</a></li><li>删除了使用 openshift local 安装 podman&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F6070" target="_blank">#6070</a></li><li>文档图像检查器提供程序 API&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5813" target="_blank">#5813</a></li><li>添加 withProgress api 文档<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5736" target="_blank">#5736</a></li><li>添加了故障排除页面的链接<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5734" target="_blank">#5734</a></li><li>macOS M1/M2/M3 上的安装故障排除<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5708" target="_blank">#5708</a></li><li>卷删除<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5707" target="_blank">#5707</a></li><li>添加了<em>从另一个 WSL 实例访问 Podman</em>（配置、验证）<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5706" target="_blank">#5706</a></li><li>使用 typedoc 生成 api 文档<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcontainers%2Fpodman-desktop%2Fpull%2F5705" target="_blank">#5705</a></li></ul><p>下载：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpodman-desktop.io%2Fdownloads" target="_blank">https://podman-desktop.io/downloads</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 02:44:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283526/podman-desktop-1-8-released</guid>
            <link>https://www.oschina.net/news/283526/podman-desktop-1-8-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果公布多模态大模型 MM1 ：具备 300 亿参数、MoE 架构]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Arxiv 页面显示，苹果正式公布了自研多模态大模型 MM1，该模型提供 30 亿、70 亿、300 亿三种参数规模，拥有图像识别和自然语言推理能力。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1830efcd0b15aa4c9ab91a1930b93946ba5.png" referrerpolicy="no-referrer"></p><blockquote><p>论文地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2403.09611.pdf" target="_blank">https://arxiv.org/pdf/2403.09611.pdf</a></u></em></p></blockquote><p>论文显示，MM1 多模态大模型由密集模型和混合专家（MoE）变体组成，不仅在预训练指标中实现 SOTA，在一系列已有多模态基准上监督微调后也能保持有竞争力的性能。</p><p>MM1 在上下文预测、多图像和思维链推理等方面具有不错的表现。同样，MM1 在指令调优后展现出了强大的少样本学习能力。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a87f60da1b565af1fcea6676398fae62c86.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1d2969535bc23054d47b0f450a2247bb2f7.png" referrerpolicy="no-referrer"></p><p>根据介绍，苹果研究团队相关论文主要是利用 MM1 模型做实验，通过控制各种变量，找出影响模型效果的关键因素。研究表明，图像分辨率和图像标记数量对模型性能影响较大，视觉语言连接器对模型的影响较小，不同类型的预训练数据对模型的性能有不同的影响。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 02:40:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283523</guid>
            <link>https://www.oschina.net/news/283523</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报 | RISC-V 正在发生质变？离职后可以删除自己所写的软件吗]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#e67e22"><strong># 2024.3.15</strong></span></h3><h2 style="margin-left:0; margin-right:0; text-align:left"><strong><span style="color:#16a085">今日要点</span></strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>OpenSource Daily</strong></p><h3 style="margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/news/283159" target="_blank">Intel 6.2GHz 限量旗舰 i9-14900KS 正式发布</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">Intel 正式发布了酷睿 14 代家族的顶级限量版本，酷睿 i9-14900KS，国行定价 6299 元。它在历史上第一次将 PC 处理器的加速频率做到了惊人的 6.2GHz，比上代限量版 i9-13900KS 又高出 200MHz。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">i9-14900KS 可以看作是 i9-14900K 的特挑加速版，同样都是 8P+16E 24 核心 32 线程、32MB 二级缓存、36MB 三级缓存、UHD 770 核芯显卡，内存支持 DDR4-3200、DDR5-5600，最大容量 192GB，扩展支持 16 条 PCIe 5.0、4 条 PCIe 4.0，兼容 Z690、Z790 主板。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="272" src="https://oscimg.oschina.net/oscnet/up-3349dddd8640fa732924019627a31b6f3c8.png" width="500" referrerpolicy="no-referrer"></p><h3 style="margin-left:0; margin-right:0; text-align:start"><a href="https://my.oschina.net/u/6148470/blog/11047444" target="_blank">80 岁图灵奖得主再度出山，打造基于数据库的云原生操作系统 DBOS</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">本来以为教授该颐养天年了，没想到以 80 岁高龄，再度出山。这次老爷子还跨界了，把手伸到了操作系统领域，要把操作系统建在数据库上。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">DBOS 故名思义，基于 DB 的 OS，就是把数据库作为操作系统的底层，这样操作系统就获得了数据库的特性。除了给操作系统原生的数据库能力之外，DBOS 的另一个目标是做一个云原生的操作系统。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="file" height="262" src="https://oscimg.oschina.net/oscnet/up-b5045fa7057d6a40319508573b8925b9496.png" width="500" referrerpolicy="no-referrer"></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><strong><span style="color:#16a085">今日观察</span></strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="126" src="https://oscimg.oschina.net/oscnet/up-841f2615590fad9f13ca88fbf3003203b34.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">- 微博&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2418179934%2FO4Z6h2oIv%3Frefer_flag%3D1001030103_" target="_blank"><em><u>飞扬南石</u></em></a></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="100" src="https://oscimg.oschina.net/oscnet/up-cf0d92c02a43754ff97ebac7098f11b5400.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">-&nbsp;微博 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1464484735%2FO54Z4Apf8%3Frefer_flag%3D1001030103_" target="_blank"><em><u>黄建同学</u></em></a></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="109" src="https://oscimg.oschina.net/oscnet/up-b82f753a7b421550bb8b164d63de7077ae0.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">- <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcaifuhao.eastmoney.com%2Fnews%2F20240314183626385310570" target="_blank"><em><u>南方+客户端</u></em></a></span></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#16a085"><strong>今日推荐</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="405" src="https://oscimg.oschina.net/oscnet/up-581275f1990d052c974fbf41769a5d9f841.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkamiyaa%2Fjoshuto" target="_blank">https://github.com/kamiyaa/joshuto</a></u></em></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#16a085"><strong>事件点评</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="467" src="https://oscimg.oschina.net/oscnet/up-0861950873ced1989848f40399ee3e6e763.png" width="500" referrerpolicy="no-referrer"></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#16a085"><strong>每日项目榜</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong><span style="background-color:#e67e22">每日 GitHub 精选</span></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="665" src="https://oscimg.oschina.net/oscnet/up-f7661ba51e0a0b624d2ce624a4c56894528.png" width="500" referrerpolicy="no-referrer"></p><blockquote><h4 style="margin-left:0; margin-right:0"><strong><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span></strong><br><em><u><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/bkpgqfjrsg02gbc/30_i9_14900_ks_hip_rt_PUJjodKP2j.pdf" target="_blank">开源日报第 030 期：RISC-V 正在发生质变？离职后可以删除自己所写的软件吗</a></u></em></h4></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>往期回顾</strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/71npja41p7l4ojy/29_risc_v_ai_smart_B3RnKR88Kl.pdf" target="_blank">开源日报第 029 期：英特尔获准继续向华为出售芯片；明年 AI 将比任何人都聪明</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/q35lx4s6qq9ls4r/28_cognition_labs_devin_Epbxne3xzN.pdf" target="_blank">开源日报第 028 期：全球首位 AI 软件工程师 Devin；谷歌承认 「窃取」 OpenAI 模型关键信息</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/hh291xp9mxksc9i/27_ai_google_50_gpt_4_KfagjDXXfZ.pdf" target="_blank">开源日报第 027 期：AI 接连翻车的 Google 要变天了；互联网大厂 50 款大模型及应用，能否全面超越 GPT-4？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/uwsizmmsnhq8zdk/26_git_hub_22_web_os_22_vue_rolldown_FpVykoR7rJ.pdf" target="_blank">开源日报第 026 期：大模型替代程序员根本就是一个伪命题；GitHub 顶流 "Web OS"</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6ho57sxydzsh9jh/25_ai_5_ax1LWz5GP5.pdf" target="_blank">开源日报第 025 期：买手机送大模型；「钓鱼式维权」 须遏制；「AI 原生」 骗局江湖</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7xd6teyhekcvamw/24_risc_v_x86_arm_5LsjoStPUn.pdf" target="_blank">开源日报第 024 期：RISC-V 能否和 x86、Arm 一起成为三大主流架构；给阎王开发地府管理系统</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/svxac61bjmbmmw5/23_google_microsoft_cM5zZacKru.pdf" target="_blank">开源日报第 023 期：Google = 开源，好评；Microsoft = 闭源收入还低，差评</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/3vmzfjvp7mpvv26/22_sora_cuda_Syy7OJyUvc.pdf" target="_blank">开源日报第 022 期：轻松复现 Sora 模型；事关 CUDA 兼容，英伟达禁止了；百度还差一个 「遥遥领先」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/z3rhs3qkyeqwoax/21_open_ai_JROaEZat3b.pdf" target="_blank">开源日报第 021 期：闭源模型就是比开源安全；起诉 OpenAI 不能更赞同</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/lv84pwvd03it00i/20_open_ai_pingora_yaml_mE5RuB20Vl.pdf" target="_blank">开源日报第 020 期：为什么王炸都来自 OpenAI；Pingora 最好不要用 YAML 当配置文件</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/mx86z1dhywrw71p/19_ai_c_llm_IgpNOVZtCz.pdf" target="_blank">开源日报第 019 期：我让 AI 用 C 语言写一个算法；微软三进制 LLM</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/qdljicvqiqsshd6/187ZiLwG48lc_CngfQJ1Qxs.pdf" target="_blank">开源日报第 018 期：苹果十年造车梦碎；这个开源项目有点...「大胆」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7r8dkz3232v4e7a/17_maria_db_v_linux_GoyNoM85IZ.pdf">开源日报第 017 期：MariaDB 消亡史；写代码我有三不沾；V 神建议马斯克用 Linux</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6typ9w3u98f5mxn/16_1_8_2efTeNfFjN.pdf">开源日报第 016 期：鸿蒙程序员平均月薪超 1 万 8；中美 AI 差距有多大？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/92n4c9ryegpcq1z/015_sora_KcAkRNX93Y.pdf">开源日报第 015 期：为什么挡不住英伟达；Sora 不靠蛮力</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/s7n800w84o6guyv/014_kyezhNxOGD.pdf">开源日报第 014 期：目前的人工智能技术连猫的智能水平都没达到</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC013%E6%9C%9F%EF%BC%9A%E7%AD%89%E5%88%B0%20Sora%20%E5%BC%80%E6%BA%90%E4%BA%86%E7%AB%8B%E5%88%BB%E6%8E%A8%E5%87%BA%E5%B1%9E%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B.pdf">开源日报第 013 期：等到 Sora 开源了立刻推出属于我们自己的大模型</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC012%E6%9C%9F%EF%BC%9ASora%20%E7%BB%99%E4%B8%AD%E5%9B%BD%20AI%20%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%8F%98%E5%8C%96%EF%BC%9BDart%203.3%20%E5%8F%91%E5%B8%83.pdf">开源日报第 012 期：Sora 给中国 AI 带来的真实变化；Dart 3.3 发布</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC11%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有 「大模型版 Linux」</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></li><li><a href="https://www.oschina.net/news/277585">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></li><li><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></li><li><a href="https://www.oschina.net/news/277214">开源日报第 006 期：选择技术栈一定要选择开源的</a></li><li><a href="http://www.oschina.net/news/277040">开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</a></li><li><a href="https://www.oschina.net/news/276864">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 02:34:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283521</guid>
            <link>https://www.oschina.net/news/283521</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[四年增长 100 倍的 Figma，数据库团队是怎么活下来的]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>原文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.figma.com%2Fblog%2Fhow-figmas-databases-team-lived-to-tell-the-scale%2F" target="_blank">链接</a></p><blockquote><p>Figma 是近几年全球增速最快的 SaaS 服务之一。作为新一代的在线协同设计软件，Adobe 曾一度计划以 200 亿美金收购 Figma，最后因为反垄断的顾虑而终止。本文介绍了 Figma 数据库团队过去 9 个月如何赶在数据库无法支撑业务前，完成了技改。</p></blockquote><p>这是一场持续 9 个月的历程，我们对 Figma 的 Postgres 进行了水平分片，来实现（几乎）无限的可扩展性。</p><hr><p>自 2020 年以来，Figma 的数据库增长了近 100 倍。这是一个甜蜜的烦恼，因为这意味着我们的业务在扩张，但也带来了一些棘手的技术挑战。在过去的四年里，我们付出了巨大努力保持领先地位，并避免潜在的成长烦恼。2020 年时，我们运行着一个单体 Postgres 数据库，托管在 AWS 最大的物理实例上；到 2022 年底，我们已经建立起具有缓存、只读副本和十几个垂直分区数据库的分布式架构。我们将相关表组（如「Figma 文件」或「组织」）拆分到它们自己的垂直分区，这使得我们能够获得渐进式扩展收益，并保持足够空间提前应对增长。 尽管我们在渐进式扩展方面取得了进展，但我们始终知道垂直分区只能让我们走到这一步。我们最初的扩展工作集中在减少 Postgres CPU 利用率上。随着我们的集群规模越来越大且更加异构化，我们开始监控一系列瓶颈。我们使用历史数据和负载测试相结合来量化数据库从 CPU 和 IO 到表大小和写入行数的扩展限制。识别这些限制对于预测每个分片还能撑多久至关重要。然后，我们可以在问题发育成主要可靠性风险之前优先处理扩展问题。</p><p>数据显示，我们的一些表格包含数 TB 级，数十亿行数据，已经变得太大以至于无法放入单个数据库中。在这种规模下，我们开始看到 Postgres vaccume 操作期间出现可靠性问题，这些操作是，保持 Postgres 不会用尽事务 ID (Transaction Wraparound) 并崩溃的关键后台操作。我们最高写入量的表格增长太快了，以至于很快就会超过 AWS RDS 支持的每秒最大 IO 操作次数（IOPS）。由于垂直分片不能解决问题，因为分片的最小单位只能一个单独的表。为了防止我们的数据库倒塌，我们需要更大的杠杆。</p><h2>整装待发</h2><p>我们列出了一些目标和必备条件，以解决短期挑战，并为顺利长期增长做好准备。我们的目标是：</p><ul><li><strong>尽可能不影响开发人员</strong>：我们希望能处理大部分应用程序已有的复杂关系数据模型。应用程序开发人员可以专注于在 Figma 中构建令人兴奋的新功能，而不是重构我们代码库中的大部分内容。</li><li><strong>应用无感扩展</strong>：在未来的扩展中，我们不希望在应用程序层面进行额外的更改。这意味着，在做任何初始工作使表兼容之后，未来的规模扩大对我们的产品团队应该是透明的。</li><li><strong>避免昂贵的回填 (Backfill)</strong>：我们避免了涉及在 Figma 的大表或每个表进行回填的解决方案。考虑到我们表格的大小和 Postgres 吞吐量限制，这些回填将需要数月时间。</li><li><strong>递进式扩展</strong>：我们确定了可以逐步扩展的方法，以逐步降低生产变更的主要风险。这减少了重大故障的风险，并使数据库团队能够在迁移过程中保持 Figma 的可靠性。</li><li><strong>避免单向迁移 (one-way migraiton)</strong>：即使在完成物理分片操作后，我们仍保持了回滚的能力。这降低了在发生未知情况时没有回头路。</li><li><strong>保持数据一致性</strong>：我们希望避免像双写这样复杂的解决方案，这些解决方案很难在不停机或牺牲一致性的情况下实施。我们还希望找到一个可以让我们进行水平扩展且几乎零停机时间的解决方案。</li><li><strong>发挥我们的优势</strong>：由于我们是在有严格的死限压力下开展工作，尽可能地，我们倾向于先能逐步解决我们增长最快的那些表。我们希望利用已经具备的专业知识和技术。</li></ul><h2>方案调研</h2><p>有许多流行的开源和托管解决方案可用于水平分片数据库，这些解决方案与 Postgres 或 MySQL 兼容。在我们的评估过程中，我们探索了 CockroachDB、TiDB、Spanner 和 Vitess。然而，切换到任何这些替代数据库都需要进行复杂的数据迁移，以确保两个不同数据库存储之间的一致性和可靠性。此外，在过去几年里，我们已经积累了大量关于如何在内部可靠地运行 RDS Postgres 的专业知识。如果要迁移到这些新数据库，我们将不得不从头开始重建领域专业知识。考虑到我们非常激进的增长速度，剩余时间只有几个月。相比可能更容易但存在更高不确定性的选项，我们更倾向于选择已知的低风险解决方案，可控性更高，</p><p>NoSQL 数据库是另一种常见的默认可扩展解决方案。然而，我们建立在当前 Postgres 架构之上的关系数据模型非常复杂，并且 NoSQL API 并不提供这种多样性。我们希望让工程师专注于发布出色功能和构建新产品，而不是几乎重写整个后端应用程序；NoSQL 并非一个可行的解决方案。</p><p>一番权衡后，我们开始探索在现有的垂直分区 RDS Postgres 基础架构之上构建一个水平分片解决方案。对于我们的小团队来说，在内部重新实现一个通用的水平分片关系数据库是没有意义的；这样做会使我们与大型开源社区或专门的数据库供应商构建的工具竞争。然而，由于我们将水平分片定制为 Figma 的特定架构，因此可以提供更小的功能集合。例如，我们选择不支持原子跨 Shard 事务，因为我们可以通过解决跨 Shard 事务失败来绕过它们。我们采取了一种最大程度减少应用层所需更改的 colocation 策略。这使得我们能够支持与大多数产品逻辑兼容的 Postgres 子集。同时，我们还能够轻松地在带有 Sharded 和未经 Sharded 处理过的 postgres 之间保持向后兼容性。如果遇到未知问题，那么很容易回滚到未经 Sharded 处理过的 Postgres 上去。</p><h2>水平分片 (Sharding) 之路</h2><p>即使有了这些精简的要求，我们知道水平分片将是迄今为止我们最大、最复杂的数据库项目。幸运的是，过去几年里我们采取的增量扩展方法为我们做了准备。在 2022 年底，我们着手解锁几乎无限的数据库可伸缩性，而水平分片——即将单个表或一组表拆分并将数据跨多个物理数据库实例进行划分——就成了关键。一旦一个表在应用层被水平切割，它可以支持任意数量的物理层碎片。通过简单地运行物理碎片拆分，我们总是可以进一步扩展规模。这些操作在后台透明地进行，并且只需很少停机时间，并不需要应用级别变更。这种能力将使我们能够摆脱所剩无几的数据库扩展瓶颈，消除 Figma 的最后一个主要扩展挑战之一。如果垂直分片让我们加速到高速公路速度，那么水平分片则可以关掉限速，并让我们飞起来。</p><p><img src="https://oscimg.oschina.net/oscnet/up-018dff0571bdcd622c2ac921aa9bc3ef1e7.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-445203bb931fda94adbae73ba55a68c1b85.png" alt="file" referrerpolicy="no-referrer"></p><p>水平分片比我们之前的扩展工作复杂得多。当一个表被分割到多个物理数据库中时，我们失去了在 ACID SQL 数据库中视为理所当然的许多可靠性和一致性属性。例如：</p><ul><li>某些 SQL 查询变得低效或无法支持。</li><li>必须更新应用程序代码，以提供足够的信息，尽可能高效地将查询路由到正确的分片。</li><li>必须协调所有分片之间的 Schema 变更，以确保数据库保持同步。</li><li>Postgres 不再能强制执行外键和全局唯一索引。事务现在跨多个分片，这意味着 Postgres 不能再用于强制保持事务性。现在可能会出现对某些数据库的写入成功而其他失败的情况。必须注意确保产品逻辑能应对 「部分提交失败」（脑补一下将团队在两个组织间移动，结果发现他们一半数据丢失了！）。</li></ul><p>我们知道实现完全的水平分片将是一个持续多年的努力。在交付增量价值的同时，我们需要尽可能降低项目风险。我们的第一个目标是尽快对生产中一个相对简单但访问量非常高的表进行分片。这将证明水平分片的可行性，同时延长我们最繁忙数据库上能继续服务的时间。然后，在逐步对更复杂组合的表进行分片时，我们可以继续构建额外功能。即使是最简单可能的功能集仍然是一项重大工作。从头到尾，我们团队花了大约九个月来对第一张表进行分片。</p><h2>我们独特的方法</h2><p>我们的水平分片工作也是基于前人的经验，但有一些不同寻常的设计选择。以下是一些要点：</p><ul><li><strong>Colos</strong>：我们将相关的表组队放在一起，称为 colos，这些表共享相同的分片键和物理分片布局。这为开发人员提供了一个友好的抽象，以与水平分片表进行交互。</li><li><strong>逻辑分片</strong>：我们在应用层将「逻辑分片」的概念与 Postgres 层的「物理分片」区分开来。我们利用视图执行更安全、成本更低的逻辑分片部署，然后再执行风险较高的分布式物理 failover。</li><li><strong>DBProxy 查询引擎</strong>：我们构建了一个 DBProxy 服务，拦截应用程序层生成的 SQL 查询，并动态路由查询到各个 Postgres 数据库。DBProxy 包含一个能够解析和执行复杂水平分片查询的查询引擎。DBProxy 还允许我们实现诸如动态负载调节等功能。</li><li><strong>影子应用准备就绪</strong>：我们添加了一个「影子应用准备就绪」框架，能够预测活跃生产流量在不同分片切割下会如何工作。这使产品团队清楚地知道需要重构或删除哪些应用逻辑以准备应用进行水平切割。</li><li><strong>完整逻辑复制</strong>：我们避免实施「过滤式的逻辑复制」（仅将数据子集复制到每个分片）。相反，我们复制整个数据集，然后只允许读/写操作针对给定分片所属数据子集进行操作。</li></ul><h2>我们的分片实现</h2><p>在水平分片中，最重要的决定之一是选择使用哪个分片键。水平分片增加了许多围绕着分片键的数据模型约束。例如，大多数查询需要包含分片键，以便将请求路由到正确的分片上。某些数据库约束（如外键）只有在外键是分区键时才有效。为了避免引起可靠性问题或影响可伸缩性的热点，分片键还需要将数据均匀地分布在所有分片上。</p><blockquote><p>Figma 跑在网页端，许多用户可以同时在同一个 Figma 文件上进行协作。这意味着我们的产品由一个相当复杂的关系数据模型驱动，保存文件元数据、组织元数据、评论、文件版本等等。</p></blockquote><p>我们考虑使用相同的分片键来处理每个表，但在我们现有的数据模型中没有一个单一的好候选项。要添加统一的分片键，我们必须创建一个复合键，在每个表的架构中添加该列，运行昂贵的回填以填充它，然后大幅重构我们产品逻辑。相反，我们根据 Figma 独特的数据模型量身定制了我们的方法，并选择了像 UserID、FileID 或 OrgID 这样少数几个分片键。Figma 几乎每张表都可以使用这些关键字进行分片。</p><p>我们引入了 colo 的概念，为产品开发人员提供友好的抽象：在 colo 内部的表支持跨表连接和完整事务，当限制为单个分片键时。大多数应用程序代码已经以这种方式与数据库交互，这最大程度地减少了应用程序开发人员需要做的工作，使表适合水平切分。下图展示了使用 UserID 和 FileID 的分区各自组合在了一起。</p><p><img src="https://oscimg.oschina.net/oscnet/up-966b0a5d09812082120a56af79b3253e3a4.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-e34ea3d1c88fc447f849ddc4e6664f3a7f7.png" alt="file" referrerpolicy="no-referrer"></p><p>一旦我们选择了分片键，就需要确保数据在所有后端数据库中均匀分布。不幸的是，我们选择的许多分片键使用了自增或雪花时间戳前缀 ID。这将导致存在显著热点，其中一个单个分片包含大部分数据。我们探索过迁移到更随机化的 ID，但这需要进行昂贵且耗时的数据迁移。相反，我们决定使用分片键的哈希值进行路由。只要选择足够随机的哈希函数，就能确保数据均匀分布。其中一个缺点是，在范围扫描 shard keys 时效率较低，因为连续键会被散列到不同的数据库 shards 上。然而，在我们代码库中这种查询模式并不常见，所以这是一个可以接受的权衡方案。</p><h2>「符合逻辑」的方案</h2><p>为了降低水平分片的风险，我们希望将在应用程序层准备表格的过程与运行分片拆分的物理过程隔离开来。为此，我们将「逻辑分片」与「物理分片」进行了区分。然后，我们可以解耦迁移的两个部分以独立实施和降低风险。逻辑上的切割使我们对技术栈有信心，并采用低风险、基于百分比的发布方式。当发现错误时回滚逻辑分片只需简单更改配置。回滚物理碎片操作是可能的，但需要更复杂的协调以确保数据一致性。</p><p>一旦一个表被逻辑分片后，所有读写操作都会像该表已经被水平分片那样执行。从可靠性、延迟和一致性角度看，尽管数据仍然位於单个数据库主机上，但我们似乎已经完成了水平分片工作。当我们确信逻辑分片按预期工作时，则执行物理分片操作。这是从单个数据库复制数据、到把分片散步到不同数据库上，然后通过新数据库重新路由读写流量的过程。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e147aac41a53ba90fc10f1320ea08b2cae8.png" alt="file" referrerpolicy="no-referrer"></p><p>两个物理分片，每个物理分片又包含两个逻辑分片。</p><h2>刚好的查询引擎</h2><p>为了支持水平分片，我们不得不对后端技术栈进行重大改造。最初，我们的应用服务直接与连接池层 PGBouncer 通信。然而，水平分片需要更复杂的查询解析、规划和执行。为了支持这一点，我们构建了一个新的 golang 服务 DBProxy。DBProxy 位于应用程序层和 PGBouncer 之间。它包括负载均衡逻辑、改进的可观测性、事务支持、数据库拓扑管理以及轻量级查询引擎。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e995976e0fa500b3ae04f731d0ae36ddb9c.png" alt="file" referrerpolicy="no-referrer"></p><p>查询引擎是 DBProxy 的核心。其主要组件包括：</p><ul><li>查询解析器读取应用程序发送的 SQL，并将其转换为抽象语法树（AST）。</li><li>逻辑规划器解析 AST 并从查询计划中提取查询类型（插入、更新等）和逻辑分片 ID。 物理规划器将查询从逻辑分片 ID 映射到物理数据库。它重写查询以在相应的物理分片上执行。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-525c42dc013fcdf4045da938e886110034b.png" alt="file" referrerpolicy="no-referrer"></p><p>在水平分片的世界中，一些查询相对容易实现。例如，单片段查询被过滤到一个单个分片键。我们的查询引擎只需要提取分片键并将查询路由到适当的物理数据库。我们可以将查询执行的复杂性「下推」到 Postgres 中。然而，如果查询缺少分片键，则我们的查询引擎必须执行更复杂的「发散-归并」。在这种情况下，我们需要将查询发到所有分片（发散阶段），然后汇总结果（归并阶段）。在某些情况下，如复杂聚合、连接和嵌套 SQL 等情况下，这种发散-归并可能非常复杂。此外，有太多发散-归并会影响水平划分可伸缩性。因为这些查询必须触及每个单独的数据库，在未经划分时每次发散-归并都会产生同样数量的负载。</p><p><img src="https://oscimg.oschina.net/oscnet/up-12f0cb4f8b9073a7977c0529fe4ea833558.png" alt="file" referrerpolicy="no-referrer"></p><p>如果我们支持完整的 SQL 兼容性，我们的 DBProxy 服务将开始看起来很像 Postgres 数据库查询引擎。我们希望简化 API 以减少 DBProxy 的复杂性，同时也减少应用程序开发人员需要重新编写任何不受支持查询的工作量。为了确定正确的子集，我们构建了一个「影子规划」框架，允许用户为他们的表定义潜在分片方案，然后在实时生产流量之上运行逻辑规划阶段。我们将查询和相关查询计划记录到 Snowflake 数据库中，在那里可以进行离线分析。根据这些数据，我们选择了一种支持最常见 90% 查询的查询语言，但避免了在查询引擎中出现最坏情况下的复杂性。例如，所有范围扫描和点查都是被允许的，但只有当连接两个位于相同 colo 中且连接在分片键上时才允许 join 操作。</p><h2>面向未来的 View（视图）</h2><p>然后我们需要想办法封装我们的逻辑分片。我们探索了使用单独的 Postgres 数据库或 Postgres schemas 对数据进行分区。不幸的是，当我们在应用程序中逻辑地分片时，这将需要物理数据更改，这与执行物理分片拆分一样复杂。相反，我们选择用 Postgres 视图来表示我们的分片。我们可以为每个表创建多个视图，每个视图对应给定分片中数据子集。看起来像：</p><pre><code>CREATE VIEW table_shard1 AS SELECT * FROM table WHERE hash(shard_key) &gt;= min_shard_range AND hash(shard_key) &lt; max_shard_range`）
</code></pre><p>所有对表格的读取和写入都通过这些视图发送。通过在现有未经过划分的物理数据库之上创建划分视图，在执行任何风险较高的物理重新划分操作之前，我们可以在逻辑上进行划分。每个视图通过自己独立的连接池服务，连接到它们所属于的分片实例上。连接池仍然指向未经过分片处理的物理实例，从而呈现出被进行了分片处理后效果。通过查询引擎中特性开关（feature flag）渐进地发布，以减少风险。并且回滚到主表，只需几秒钟即可，将流量重定向回去。当我们第一次执行重新分片操作时, 我们已经对于分片拓扑的安全性胸有成足。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a03c16e3b18647a48c73bf1ee3a67419599.png" alt="file" referrerpolicy="no-referrer"></p><p>通过在非分片数据库中创建多个视图，我们可以像数据已经被物理分片一样查询这些视图。</p><p>当然，依赖视图也引入了额外的风险。视图会增加性能开销，并且在某些情况下可能从根本上改变 Postgres 查询规划器优化查询的方式。为了验证这种方法，我们收集了一组经过脱敏的生产查询语句，并进行了带有和不带有视图的负载测试。我们确认，在大多数情况下，视图只会增加最小的性能开销，在最糟糕的情况下不到 10%。我们还构建了一个影子读取框架，可以通过视图发送所有实时读取流量，比较使用视图与不使用视图查询之间的性能和正确性。然后我们确认，视图是一种可行的解决方案，并且对性能几乎没有影响。</p><h2>应对我们的拓扑</h2><p>为了执行查询路由，DBProxy 必须理解我们表和物理数据库的拓扑结构。因为我们已经将逻辑分片与物理分片的概念分开，所以我们需要一种方式在拓扑结构中表示这些抽象概念。例如，我们需要能够将一个表（用户）映射到其分片键（user_id）。同样地，我们需要能够将逻辑分片 ID（123）映射到相应的逻辑和物理数据库。在垂直划分方面，我们依赖于一个简单、硬编码的配置文件来将表映射到它们的分区。然而，在向水平切割转变时，我们需要更复杂的东西。当进行切片拆分时，我们的拓扑结构会动态改变，并且 DBProxy 需要迅速更新其状态以避免请求被路由至错误的数据库。由于每次对拓扑结构进行更改都是向后兼容的，在网站关键路径上从未出现过这些更改。我们建立了一个包含复杂水平切割元数据并可以在不到一秒内提供实时更新信息的数据库拓扑结构。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8348edc5651a6c3baa8af52279365b5ecd6.png" alt="file" referrerpolicy="no-referrer"></p><p>拥有独立的逻辑和物理拓扑结构也使我们能够简化一些数据库管理工作。例如，在非生产环境中，我们可以保持与生产相同的逻辑拓扑结构，但从更少的物理数据库中提供数据。这样既节约成本又降低复杂性，而不会在各个环境之间进行过多变更。拓扑库还使我们能够强制保证跨整个拓扑结构（例如，每个分片 ID 应映射到一个物理数据库）的约束，这对于维护系统正确性至关重要，特别是在我们建立水平分片的整个过程中。</p><h2>物理分片操作</h2><p>一旦表准备好进行分片，最后一步是从未分片到已分片数据库的物理 failover 转移。我们能够重复使用许多相同的逻辑来进行水平切分，但也有一些显著的不同之处：我们不再将数据从一个数据库移动到另一个数据库，而是从一个数据库移动到 N 个数据库。我们需要使 failover 过程能应对新的失败模式，在这些模式下，分片操作可能仅在我们的部分数据库上成功。尽管如此，在做垂直分片的时候，许多风险最高的组件已经被解决了。我们能够比以往更快地朝着第一次物理分片操作迈进，这本来是不可能实现的。</p><h2>筚路蓝缕</h2><p>当我们开始这段旅程时，我们知道水平分片将是对 Figma 未来可扩展性的多年投资。我们在 2023 年 9 月交付了第一个水平分片表。我们成功进行了故障切换，数据库主节点仅出现了十秒的部分可用性问题，副本没有受到影响。在分片后，我们没有看到延迟或可用性方面的退化。从那时起，我们一直在处理写入速率最高的，并且相对简单的数据库分片。今年，我们将对越来越复杂的数据库进行分片处理，这些数据库有数十个表和成千上万个代码调用点。</p><p>为了拔掉最后阻碍我们无限扩展的钉子，我们需要在 Figma 上水平分片每个表。一个完全水平分片的世界将带来许多其他好处：提高可靠性、节约成本和开发速度。在这过程中，我们需要解决所有这些问题：</p><ul><li>支持水平分片模式更新</li><li>全局唯一 ID 用于生成水平分片主键</li><li>用于核心业务的跨 shard 的原子事务</li><li>分布式全局唯一索引（目前仅支持包含 sharding key 的索引上的唯一索引）</li><li>一个可以增加研发效能，但不会受到水平分片影响的 ORM</li><li>完全自动化的重分片操作，一健运行。</li></ul><p>一旦我们有足够的时间余地，我们还将重新评估内部 RDS 水平分片的整套方案。18 个月前，我们开始了这段旅程，并面临极其紧迫的时间压力。NewSQL 持续精进，而我们也终于将有时间来重新评估沿着当前路径继续下去还是转向开源或者托管方案。我们在水平分片旅程中取得了许多令人振奋的进展，但挑战才刚刚开始。</p><hr><p>点评：Figma 在时间压力下，采用了更稳妥成熟的水平分片方案。类似方案之前已经在国内外互联网公司里广泛应用。国外的 Instgram (Postgres)，GitHub (MySQL) 也都做过详细的分析。而最后 Figma 列出的剩余问题，也正是 NewSQL 路线的强项。比如国内的 TiDB, OceanBase 都能比较好的解决。所以就像 Figma 所说的，等他们缓过来后，也要重新评估一下。</p><p>另外一方面，Figma 也提到了水平分片后对于研发带来的挑战。本来只要变更一个数据库，现在可能就要变更 100 个数据库。如何保证这些变更的一致性？Bytebase 里正好提供了批量变更模式，可以把水平分片的数据库放在一组，一起进行变更。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a342cf0724f826fe5a98e8d9ba2b1697b3b.png" alt="file" referrerpolicy="no-referrer"></p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 02:28:03 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/11047837</guid>
            <link>https://my.oschina.net/u/6148470/blog/11047837</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[马斯克开源 Grok]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">马斯克旗下的 xAI 正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fx.ai%2Fblog%2Fgrok-os" target="_blank">宣布</a>在 Apache 2.0 协议下开源了大模型 Grok-1 的基本模型权重和网络架构。其参数量达到 3140 亿，远超 Meta 的 Llama 2 的 700 亿、Mistral 8x7B 的 120 亿以及 OpenAI GPT-3.5 的 1750 亿；这也是迄今参数量最大的开源大语言模型。</span></p><p><span style="color:#000000">根据介绍，Grok 基础模型基于大量文本数据进行训练，未针对任何特定任务进行微调。其架构于 2023 年 10 月使用 JAX 和 Rust 之上的自定义训练堆栈开发，融合了神经网络设计的创新方法。该模型将 25% 的权重用于给定 token，旨在提高效率和有效性。</span></p><p><img height="214" src="https://oscimg.oschina.net/oscnet/up-c641876e1db3fba6af1c641b80aaa3dc947.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">2023 年 11 月，马斯克旗下的人工智能公司 xAI<span>&nbsp;</span><a href="https://www.oschina.net/news/265129/xai-grok">发布了首款 AI 聊天产品</a>，取名为 「Grok」。Grok 的名字来自罗伯特・安森・海因莱因的科幻小说《异乡异客》，意思是完全理解某事或某人。Grok 具备以下特点：</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>「全面的知识」：Grok 在大量文本和代码数据集上进行了训练，使其能够从中汲取广泛的知识。</li><li>「实时访问信息」：Grok 可以通过 X 平台获取实时信息，这是相对于其他大语言模型的一大优势。</li><li>「幽默」：Grok 被设计成带有幽默感，可以回答一些尖锐的问题，这使得它与用户的互动更具吸引力。</li><li>「理解复杂概念的能力」：Grok 能够理解复杂的概念并以清晰简洁的方式解释它们。</li><li>「生成创意内容的能力」：Grok 可以生成不同类型的创意内容，例如诗歌、代码、图像和音乐作品。&nbsp;</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 02:01:39 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283513/grok-open-source</guid>
            <link>https://www.oschina.net/news/283513/grok-open-source</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ChatGPT 参数规模很可能只有 7B（70 亿）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>南加州大学最新研究，ChatGPT 参数规模很可能只有 7B（70 亿）。南加大团队三位作者破解出了未公布的 gpt-3.5-turbo 嵌入向量维度（embedding size）为 4096 或 4608。而几乎所有已知的开源大模型如 Llama 和 Mistral，嵌入向量维度 4096 的时候都是约 7B 参数规模。其它比例的话，就会造成网络过宽或过窄，已被证明对模型性能不利。</p><p>因此南加大团队指出，可以推测 gpt-3.5-turbo 的参数规模也在 7B 左右，除非是 MoE 架构可能不同。数月前，曾有微软 CODEFUSION 论文意外泄露当时 GPT-3.5 模型参数为 20B，在后续论文版本中又删除了这一信息。（量子位）</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Mar 2024 00:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283500</guid>
            <link>https://www.oschina.net/news/283500</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RXThinkCMF 敏捷开发框架 Laravel10+EleVue 版本 v2.0.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#40485b">v2.0.0 更新如下:</span><br><span style="background-color:#ffffff; color:#40485b">1、新增 Docker 容器化解决方案；</span><br><span style="background-color:#ffffff; color:#40485b">2、优化系统功能模块和文件结构；</span><br><span style="background-color:#ffffff; color:#40485b">3、优化编码规范，统一命名和描述；</span><br><span style="background-color:#ffffff; color:#40485b">4、优化数据库表结构和编码；</span><br><span style="background-color:#ffffff; color:#40485b">5、优化模块页面，提升使用体验度；</span><br><span style="background-color:#ffffff; color:#40485b">6、修复近期用户反馈的问题；</span></p><div><div><div><h2>项目介绍</h2><p style="margin-left:0; margin-right:0">一款 PHP 语言基于 Laravel10、Vue、ElementUI、MySQL 等框架精心打造的一款模块化、插件化、高性能的前后端分离架构敏捷开发框架，可用于快速搭建前后端分离后台管理系统，本着简化开发、提升开发效率的初衷，目前框架已集成了完整的 RBAC 权限架构和常规基础模块，前端 Vue 端支持多主题切换，可以根据自己喜欢的风格选择想一个的主题，实现了个性化呈现的需求；为了敏捷快速开发，提升研发效率，框架内置了一键 CRUD 代码生成器，自定义了模块生成模板，包括后端 PHP 文件模块和前端 Vue 端个性化模板，可以根据已建好的表结构 (字段注释需规范) 快速的一键生成整个模块的所有代码和增删改查等等功能业务，真正实现了低代码开发，极大的节省了人力成本的同时提高了开发效率，缩短了研发周期，是一款真正意义上实现组件化、低代码敏捷开发框架。</p><h2>软件信息</h2><ul><li>软件名称：RXThinkCMF 敏捷开发框架 Laravel10+EleVue 版本</li><li>官网网址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.rxthink.cn" target="_blank">https://www.rxthink.cn</a></li><li>文档网址：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdocs.laravel10.elevue.rxthink.cn" target="_blank">http://docs.laravel10.elevue.rxthink.cn</a></li><li>演示地址：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmanage.laravel10.elevue.rxthink.cn" target="_blank">http://manage.laravel10.elevue.rxthink.cn</a></li></ul><h2>版本说明</h2><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; border:none; box-sizing:border-box; color:#40485b; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Helvetica,Arial,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Liberation Sans&quot;,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,&quot;Hiragino Sans GB&quot;,&quot;Wenquanyi Micro Hei&quot;,&quot;WenQuanYi Zen Hei&quot;,&quot;ST Heiti&quot;,SimHei,SimSun,&quot;WenQuanYi Zen Hei Sharp&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 16px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:635px; word-break:initial; word-spacing:0px"><tbody><tr><th>版本名称</th><th>版本说明</th><th>版本地址</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp3.2+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp3.2、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp3.2_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp3.2_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp5.1+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp5.1、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp5.1_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp5.1_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp6.x+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp6、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp6_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp6_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp8.x+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp8、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp8_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp8_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel8.x+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel8、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_laravel8_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_laravel8_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel9.x+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel9、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel9_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel9_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel10.x+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel10、Layui、MySQL 等框架研发的混编专业版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel10_Layui">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel10_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp3.2+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp3.2、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp3.2_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp3.2_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp3.2+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp3.2、Vue3.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp3.2_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp3.2_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp5.1+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp5.1、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp5.1_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp5.1_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp5.1+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp5.1、Vue2.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp5.1_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp5.1_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp6.x+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp6、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp6_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp6_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp6.x+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp6、Vue3.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp6_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp6_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp8.x+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp8、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp8_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp8_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">ThinkPhp8.x+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 ThinkPhp8、Vue3.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp8_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_ThinkPhp8_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel8.x+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel8、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel8_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel8_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel8.x+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel8、Vue3.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel8_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel8_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel9.x+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel9、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel9_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel9_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel9.x+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel9、Vue3.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel9_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel9_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel10.x+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel10、Vue2.x、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel10_EleVue">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel10_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Laravel10.x+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Laravel10、Vue3.x、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel10_AntdVue">https://gitee.com/rxthinkcmf/RXThinkCMF_Laravel10_AntdVue</a></td></tr></tbody></table><h2>模块展示</h2><p style="margin-left:0; margin-right:0"><img alt="" height="1080" src="https://oscimg.oschina.net/oscnet/up-44c7ba2ba7c06e94c5fc7771e1ec57af447.png" width="1920" referrerpolicy="no-referrer"></p></div></div></div></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Mar 2024 23:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283498</guid>
            <link>https://www.oschina.net/news/283498</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果「有毒」——甲骨文警告新版 macOS 导致 Java 意外终止]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>甲骨文公司称，最新发布的 macOS Sonoma 14.4 版本存在漏洞，<strong>会导致运行 Java 程序的进程意外终止</strong>。因此，依赖 Java 运行程序的 Mac 用户建议暂缓更新至该版本。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6cd6f27327762d79002415929bbc4167e46.png" referrerpolicy="no-referrer"></p><p><strong>该漏洞影响所有版本号高于 8 的 Java 版本</strong>，同时包括当前处于抢先体验阶段的 JDK 22 版本。甲骨文公司表示目前没有可用的临时解决办法。</p><p>甲骨文公司高级产品管理总监 Aurelio Garcia-Ribeyro 指出，此漏洞在 14.4 的测试版中并未发现。他在有关漏洞的警告帖中提到：「使用 GraalVM Native Image 提前编译的应用程序应该不受影响，但创建新镜像可能会出现问题。」</p><p>甲骨文公司已经将此问题<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Fjava%2Fpost%2Fjava-on-macos-14-4" target="_blank">通知</a></u>了 OpenJDK 合作伙伴、用户以及苹果公司。</p><p>由于目前无法简单回滚 macOS 更新，已经升级到 14.4 版本的 Apple Silicon Mac 用户将不得不等待苹果发布修复程序。</p><p>不过，如果用户拥有完整系统配置的克隆备份，则可以暂时恢复到旧版本系统以继续运行 Java 程序，直到出现解决方案为止。</p><p>需要注意的是，由于 Java 早在 2012 年就被苹果公司标记为「过时技术」，因此该问题对于大多数普通 Mac 用户不会产生影响。</p><p>除了影响 Java 程序运行以外，macOS 14.4 的最终版本还存在其他问题。例如，该更新导致了一些第三方显示器集线器无法正常工作，并可能会删除或损坏部分打印机驱动程序。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Mar 2024 14:13:42 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283478/java-on-macos-14-4</guid>
            <link>https://www.oschina.net/news/283478/java-on-macos-14-4</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[零一万物开放笛卡尔向量数据库搜索内核，免费商用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">零一万物<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F3-_KUz7JCTwDbpr1-B5sdA" target="_blank">宣布</a>全面开放笛卡尔向量数据库搜索内核 Binary<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2F01-ai%2FDescartes" target="_blank">下载</a>，将技术成果回馈社区，提供免费商用。</span></p><p><img height="240" src="https://oscimg.oschina.net/oscnet/up-45fabeeb7584826d1eb234098b2a47b92b1.png" width="500" referrerpolicy="no-referrer"></p><p>根据介绍，笛卡尔向量数据库定位专注于大模型场景，能够执行超高精度、超快速度的检索，辅助大模型在 RAG、Agent 等方面达到更佳的性能从而提升整体效果，可说是为大模型而生的内存向量数据库，后续也有持续性增强的系列工作。</p><p><span style="color:#000000">现阶段，<strong style="color:#1b3e36">零一万物没有将向量数据库作为单独商业产品的计划</strong>，笛卡尔数据库将会应用在即将正式亮相的消费级 AI 产品和开发者工具中，在内测中的实际应用场景里已展现出精度更高、性能更强等优势。</span></p><p><span style="color:#000000">出于长期产品策略考量，零一万物暂无计划开源相关源代码，以 Binary 二进制形式开放出来，便于全球开发者下载使用向量数据库搜索内核，丰富大模型开源社区技术工具的多样性。</span></p><p><span style="color:#000000">笛卡尔向量数据库搜索内核商用授权信息表：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lingyiwanwu.com%2Fvector-descartes" target="_blank">https://www.lingyiwanwu.com/vector-descartes</a></p><p><strong>相关阅读：</strong></p><ul><li><a href="https://www.oschina.net/news/282674" target="_blank">零一万物推出自研全导航图向量数据库</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Mar 2024 04:08:07 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283418</guid>
            <link>https://www.oschina.net/news/283418</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Visual Studio App Center 将于 2025 年 3 月停用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fappcenter%2Fretirement" target="_blank">宣布</a>计划于&nbsp;2025 年 3 月 31 日停用 Visual Studio App Center。在此之前，微软将继续提供关键错误修复和技术支持。在此日期之后，用户将无法进行帐户登录，也无法进行 API 调用。</span></p><p><span style="color:#000000">Visual Studio App Center 是一个用于构建、测试和分发移动应用程序的平台，号称可以「自动化 iOS、Android、Windows 和 macOS 应用的生命周期。连接存储库并在几分钟内在云中生成、测试数千台实际设备、向 beta 测试人员和应用存储进行分发、通过故障数据和分析数据监视实际使用情况。 所有操作都可以在一个位置集中执行。」</span></p><p><span style="color:#000000"><img alt="" height="284" src="https://oscimg.oschina.net/oscnet/up-9916f7dc14a140fc667cc3ce5b6579d0fd3.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">微软为用户提供了几项迁移出 App Center 的替代解决方案，包括：使用 Azure Pipelines 进行构建、使用 BrowserStack App Automate（可访问 20,000 多个真实 iOS 和 Android 设备）进行测试，以及使用 Apple AppStore 和 Google Play 等平台进行分发。</span></p><p><span style="color:#000000">此外，他们还准备了一个特殊版本的 CodePush，可集成到用户的应用程序中并独立于 App Center 运行。以及推荐使用 Azure Native ISV 服务，进行分析和诊断。「通过利用这些 Azure Native ISV 服务，您将能够监控从设备到 Azure 后端基础架构的整个堆栈。」</span></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fpartner-solutions%2F" target="_blank">Azure Native ISV Services:</a></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fpartner-solutions%2Fdatadog%2Foverview" target="_blank">Datadog</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fpartner-solutions%2Fdynatrace%2Fdynatrace-overview" target="_blank">Dynatrace</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fazure%2Fpartner-solutions%2Fnew-relic%2Fnew-relic-overview" target="_blank">New Relic</a></li></ul><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fappcenter%2Fretirement" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Mar 2024 03:57:07 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283417/visual-studio-app-center-retirement</guid>
            <link>https://www.oschina.net/news/283417/visual-studio-app-center-retirement</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 基于 K8s 容器集群的容灾架构与方案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>作者：庄宇</p><p>在设计系统架构时，我们必须假设任何组件和任何基础设施可能会在任何时间失效，例如：自然灾害，电力中断，网络中断，错误的系统变更等。为了应对挑战，我们必须设计合适的容灾架构。</p><p>本文介绍如何以 K8s 集群（包括：ACK 集群，他云集群和本地 IDC K8s 集群）为基础，结合阿里云云产品（网络，数据库，中间件，可观测），设计容灾架构，构建一个「韧性」系统。</p><h2>容灾目标</h2><p>Recovery time objective（RTO）：</p><p>服务中断与服务恢复之间可接受的最大延迟时间。决定服务停机的可接受时长。</p><p>Recovery point objective（RPO）：</p><p>自上一个数据恢复点以来可接受的最大时间量。决定可接受的数据丢失或重建。</p><p><img src="https://oscimg.oschina.net/oscnet/up-46753808a06e822727f0720c2bdcec67d3b.png" alt="" referrerpolicy="no-referrer"></p><p>对于 RTO 和 RPO，数值越低代表停机时间和数据丢失越少，但是越低的 RTO 和 RPO 会导致资源成本和运维复杂性越高。因此，您需要根据工作负载的重要性，指定适当的 RTO 和 RPO。</p><h2>容灾策略</h2><p><img src="https://oscimg.oschina.net/oscnet/up-d4cee673e487d5eaa81c35f0186c4e84bfb.png" alt="" referrerpolicy="no-referrer"></p><p>上图中，描述的常见的 3 种容灾策略：备份与恢复、主备、双活，不同的容灾策略对应了不同的收益和成本。您需要综合分析业务的重要性、风险、可投入的成本等，以选择适合的容灾策略。</p><h3>备份与恢复（Backup-Restore）</h3><p>在系统运行时，备份应用和数据，在灾难发生时，在另一个地点恢复应用和数据，并切换业务流量。由于数据无法实时备份，在恢复数据时会有一定的数据丢失，同时如果数据量较大，恢复数据时间可能较长。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c7ac071cfe23b19b06580409fd9374e8bd3.png" alt="" referrerpolicy="no-referrer"></p><h3>主备（Active-Standby）</h3><p>在主备模式中，主 Location 处理所有的业务流量，备用 location 可以启动较少的应用实例节省成本，并周期发送测试流量以验证系统有效性。在灾难发生时，做数据库主备切换，扩容应用实例数，并切换业务流量。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f0e62ba3ca0f2f0be7cd22427c1c6091dec.png" alt="" referrerpolicy="no-referrer"></p><h3>双活（Active-Active）</h3><p>在双活模式中，2 个 Location 启动相同的应用实例数，同时处理业务流量。在灾难发生时，做数据库主备切换，并切换业务流量。</p><p><img src="https://oscimg.oschina.net/oscnet/up-34d8ce915881ea3026ef89a042bf2150632.png" alt="" referrerpolicy="no-referrer"></p><h2>容灾范围</h2><h3>多可用区（Multi-AZ）</h3><p>阿里云地域（Region） <strong>[</strong><strong>11]</strong> 包含多个可用区（AZ），可用区（AZ）是电力和网络互相独立的物理区域，对停电，断网等局部中断的容灾场景，可以使用多个可用区（AZ）设计容灾策略。由于可用区间的网络延时较短，可以更容易实现数据部分的容灾方案，包括数据库、缓存和消息等。</p><h3>多地域（Multi-Region）</h3><p>为了应对更大范围的灾难故障事件，这些事件可能会影响同地域（Region）的多个可用区（AZ），您可以使用多个地域（Region）设计容灾策略。但由于地域间更大网络延时，容灾方案复杂度和实现成本较高。</p><p>在选择多可用区（AZ）或者多地域（Region）容灾方案时，需要重点考虑有状态应用和依赖的云产品（例如：数据库、缓存和消息）是否支持多地域或者多可用区容灾。</p><h2>方案示例</h2><h3>备份与恢复（Backup &amp; Restore）</h3><h4>公共云跨可用区和跨地域备份与恢复</h4><ol><li><p>通过 ACK One 备份中心 <strong>[3</strong><strong>]</strong> ，可以备份 ACK 集群中的应用，包括无状态应用和有状态应用，对有状态应用，在备份应用 YAML 的同时可以备份相关 Storage 数据。</p></li><li><p>ACK One 备份中心集成云产品云盘快照 <strong>[</strong><strong>12]</strong> ，文件存储 NAS <strong>[13</strong><strong>]</strong> ，对象存储 OSS <strong>[14</strong><strong>]</strong> 和云备份 <strong>[15</strong><strong>]</strong> ，分别支持应用 YAML，云盘 PV，文件系统 PV 的一键备份。</p></li><li><p>备份后，可以随时将应用和 Storage 数据，恢复到任意地域和可用区的 ACK 集群。</p></li><li><p>阿里云数据库服务的备份与恢复，可以参考相应数据产品的文档，例如：RDS MySQL 数据库备份恢复 <strong>[</strong><strong>16]</strong> ，RDS 实例间数据迁移 <strong>[17</strong><strong>]</strong> 。</p></li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-e3ec8b21097649223662ed467f0401f1998.png" alt="" referrerpolicy="no-referrer"></p><h4>混合云备份与恢复</h4><ol><li><p>通过 ACK One 注册集群 <strong>[</strong><strong>4]</strong> ，可以将 IDC 自建或者非阿里云 K8s 集群，接入到阿里云 ACK 控制枱。</p></li><li><p>接入 ACK One 注册集群后，通过 ACK One 备份中心，可以备份 IDC 自建和非阿里云 K8s 集群中的应用，包括无状态应用和有状态应用，对有状态应用，在备份应用 YAML 的同时可以备份相关 Storage 数据。</p></li><li><p>备份后，可以随时将应用（Deployment/Statefulset）和数据（PV/PVC），恢复到任意地域和可用区的 ACK 集群。</p></li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-e8a3b923dfe47276112ffba73e827b61e44.png" alt="" referrerpolicy="no-referrer"></p><h4>总结</h4><p>备份恢复方案实施成本较低，但 RTO 和 RPO 相对较长，取决于数据量的大小和应用的复杂度。备份中心能够提供的全量备份+增量备份能力，减少 RTO 和 RPO 时间。</p><p>备份恢复作为容灾的兜底方案，重要性高，在系统运维的过程中，要保证备份的及时性和可恢复性。</p><p>另外，许多用户选择通过备份恢复功能<strong>实现应用的跨集群迁移</strong>，场景如下：</p><ol><li><p>业务上云，将本地 IDC 集群中的应用，迁移到阿里云 ACK 集群中，参考 IDC 应用上云迁移 <strong>[</strong><strong>18]</strong> 。</p></li><li><p>集群版本较老，版本升级有稳定性风险，可以先创建新版本集群，通过备份恢复将应用迁移到新版本集群运行，参考跨版本集群迁移 <strong>[</strong><strong>19]</strong> 。</p></li><li><p>用户在收敛云账号或者组织调整时，需要跨账号集群接入 <strong>[</strong><strong>20]</strong> 和跨集群迁移应用 <strong>[21</strong><strong>]</strong> 。</p></li></ol><p><strong>多集群 Service</strong></p><p>在应用迁移的过程中，由于应用的数量较多，需要分批迁移，同时应用间存在调用关系。此时，在网络打通的前提下，可以使用 ACK One 舰队多集群 Service <strong>[</strong><strong>5]</strong> ，实现应用 Kubernetes Service 跨集群访问。如下图所示，ACK One 舰队多集群 Service，可以将 Cluster1 的 Applcation2 的 Kubernetes Service（包含 endpoints）注入到 Cluster2，Cluster2 上的 Application1 可以访问 Cluster1 上的 Application2。</p><p><img src="https://oscimg.oschina.net/oscnet/up-00a76ccae7ee6905fc50880307b4263ba57.png" alt="" referrerpolicy="no-referrer"></p><p>在专线拉通的前提下，通过 ACK One 注册集群，IDC 和非阿里云的 K8s 集群也可以是用 ACK One 舰队多集群 Service。</p><h3>单地域多可用区容灾</h3><h4>基于 DNS 流量分发</h4><ol><li><p>通过 ACK One GitOps 应用分发 <strong>[6</strong><strong>]</strong> ，在 2 个 ACK 集群中部署应用，实现基于 Git 仓库的持续一致性部署。</p></li><li><p>通过全局流量管理（GTM） <strong>[22</strong><strong>]</strong> 做 DNS 解析实现负载分发，并监控系统运行健康状态，自动触发容灾切换。</p></li><li><p>每个 AZ 内，通过 ACK Ingress <strong>[</strong><strong>7]</strong> 实现 7 层流量管理。</p></li><li><p>备集群和主集群的应用版本相同，但备集群节点较少，应用副本较少，节省成本。</p></li><li><p>在主系统不可用时，全局流量管理（GTM）会将服务域名 DNS 解析到备用系统，完成主备切换。</p></li><li><p>由于流量的增长，备集群中 ACK HPA <strong>[8</strong><strong>]</strong> 会扩容应用副本，进而触发 ACK Cluster Autocaler <strong>[9</strong><strong>]</strong> 扩容集群节点。</p></li><li><p>阿里云中间件（消息，缓存）的跨可用区容灾，可参考相关文档，例如：云消息队列 RocketMQ 版实例规格 <strong>[</strong><strong>23]</strong> ，云消息队列 Kafka 版实例规格 <strong>[</strong><strong>24]</strong> ，云原生内存数据库 Tair 容灾方案 <strong>[</strong><strong>25]</strong> 。</p></li><li><p>阿里云数据库服务的跨可用区容灾，可参考相关文档，例如：RDS MySQL 数据库搭建高可用架构 <strong>[</strong><strong>26]</strong> 。</p></li></ol><p><strong>🔔 注意：</strong></p><ol><li><p>本方案基于 DNS 流量转发，由于 DNS 缓存，在灾难事件发生时，部分业务依然路由到主系统，造成一定的业务损失。</p></li><li><p>需要在 2 个集群中分别配置维护 7 层 ingress 规则，成本高。系统正常运行状态：</p></li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-c2ec60ff7e5ba01351f02132d9fd8f68e8c.png" alt="" referrerpolicy="no-referrer"></p><p>灾难事件发生，AZ 不可用时，系统主备切换，GTM 将流量切换到 AZ2，ACK Cluste2 的应用实例自动扩展，中间件和数据库多可用区高可用切换。</p><p><img src="https://oscimg.oschina.net/oscnet/up-99ba22aec1c2009eec540304d1187008060.png" alt="" referrerpolicy="no-referrer"></p><h4>基于 ACK One 多集群网关</h4><ol><li><p>通过 ACK One GitOps 应用分发，在 2 个 ACK 集群中部署应用，实现基于 Git 仓库的持续一致性部署。</p></li><li><p>通过 ACK One 多集群网关 <strong>[</strong><strong>10]</strong> ，定义标准 K8s Ingress 规则（YAML 格式），实现 7 层流量治理，实现流量的主备模式分发。多集群网关为跨可用区高可用。</p></li><li><p>备集群和主集群的应用版本相同，但备集群节点较少，应用副本较少，节省成本。可以发送特定 http header 的测试流量，多集群网关转发到备集群以验证工作状态。</p></li><li><p>在主系统不可用时，ACK One 多集群网关会自动将业务流量备用系统，完成主备切换。</p></li><li><p>由于流量的增长，备集群中 ACK HPA 会扩容应用副本，进而触发 ACK Cluster Autocaler 扩容集群节点。</p></li><li><p>阿里云数据库服务的跨可用区容灾，可参考相关文档，例如：RDS MySQL 数据库搭建高可用架构。</p></li></ol><p><strong>🔔 注意：</strong></p><ol><li><p>本方案为 HTTP 七层流量转发，配合 7 层健康检查，主备切换时相比 DNS 方案，大幅减低业务流量损失。</p></li><li><p>网关侧统一支持基于 Ingress 规则的流量治理，相比 DNS 方案，合并了四层负载均衡 SLB 和七层 Ingress 网关，降低系统复杂度和维护成本。</p></li></ol><p>系统正常运行状态：</p><p><img src="https://oscimg.oschina.net/oscnet/up-4cf5468be8a7718ececaf10b27912332e59.png" alt="" referrerpolicy="no-referrer"></p><p>灾难事件发生，AZ 不可用时，系统主备切换，多集群网关（MSE 云原生网关）自动将流量切换到 AZ2 的 ACK Cluste2 中， 应用实例自动扩展。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c51c5e534af9db562e28cba6ca84218ec8b.png" alt="" referrerpolicy="no-referrer"></p><h4>跨可用区双活</h4><p>以上 2 个方案以主备模式为例，描述了系统架构。同样的架构，基于 DNS 流量分发和 ACK One 多集群网关也支持双活场景，可以配置流量分发比例（例如：50% : 50%），支持自动 failover 切换。在双活的场景下，每个集群中的应用副本数，需要根据流量分发比例确定，集群中需要配置弹性伸缩，以支持流量切换情况下的流量增长。</p><h4>总结</h4><p>单地域多可用区方案实现的成本较低，可以利用云产品（包括：网关，容器，中间件，数据库）多可用区部署和多可用区高可用，快速实现容灾，对业务改造较小。但此方案仅可应对单个可用区的灾难和故障，无法应对地域级的灾难故障。</p><h3>单地域云+IDC 容灾方案</h3><p>方案架构与单地域多可用区容灾方案类似，要点如下：</p><ol><li><p>云上 VPC 与 IDC 建立专线连接，打通管控与数据通道。</p></li><li><p>通过 ACK One 注册集群接入 IDC 集群，使用阿里云强大可观测和安全能力，统一管理 IDC 集群和 ACK 集群。</p></li><li><p>通过 ACK One GitOps 应用分发，在 2 个集群中部署应用，实现基于 Git 仓库的持续一致性部署。</p></li></ol><h4>基于 DNS 流量分发（单地域云上和云下双活）</h4><p><img src="https://oscimg.oschina.net/oscnet/up-9cddbabaeec411683b298d86225276fb7b4.png" alt="" referrerpolicy="no-referrer"></p><h4>基于 ACK One 多集群网关（单地域云上和云下双活）</h4><p><img src="https://oscimg.oschina.net/oscnet/up-bdc15876cf223cb9af33d12fcc08981a117.png" alt="" referrerpolicy="no-referrer"></p><h3>多地域容灾</h3><p>如果业务规模大重要性高，服务的用户数量多范围广，单地域的容灾方案就无法满足业务高可用要求，这时需要多地域容灾方案。在多个地域独立部署业务系统，保证每个地域的业务系统具有单独闭环提供完整的服务能力。</p><ol><li><p>通过全局流量管理（GTM）实现用户就近接入相应地域。</p></li><li><p>通过 ACK One GitOps 应用分发，在 2 个 ACK 集群中部署应用，实现基于 Git 仓库的持续一致性部署。</p></li><li><p>缓存多地域高可用方案，可以参考阿里云产品相关文档，例如：Tair 全球多话 <strong>[</strong><strong>27]</strong> 。</p></li><li><p>数据库跨地域高可用方案，可以参考阿里数据库云产品相关文档，例如：云原生数据库 PolarDB MySQL 全球数据库 <strong>[</strong><strong>28]</strong> 。</p></li><li><p>地域内，可以采用单地域多可用区容灾方案。</p></li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-dca2fbcba720734cd95de6b2d9bea4837d8.png" alt="" referrerpolicy="no-referrer"></p><h4>单元化多活部署</h4><p>区别与前一方案，多地域单元化多活部署，需要设计分片规则对应用和数据进行分片，使得单元提供面向部分数据分片的完整服务能力，实现业务安全故障隔离，水平扩展，服务庞大的用户群体。一般分为中心单元（拥有所有用户数据）和多个子单元（分片后详细数据）。此种方式需要业务系统支持，自定义分流规则，数据拆分，单元间配合等，复杂度高。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6d93522352716a9d326419df9f4b5608245.png" alt="" referrerpolicy="no-referrer"></p><h2>总结</h2><p>各种灾难事件会影响您业务的可用性，通过使用阿里云的相关云产品的容灾能力，可以减轻或者消除这些影响。首先，需要了解业务可用性需求，从而选择一个适当的容灾策略，然后，使用阿里云相关云产品，包括：容器（容器服务 Kubernetes 版 ACK <strong>[</strong><strong>1]</strong> 和分布式云容器平台 ACK One <strong>[</strong><strong>2]</strong> ）、消息、缓存、数据库等，设计容灾架构，快速达到您业务可用性要求的恢复时间目标 RTO 和恢复点目标 RPO。</p><p><strong>相关链接：</strong></p><p>[1]&nbsp;容器服务 Kubernetes 版 ACK</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2F" target="_blank">https://help.aliyun.com/zh/ack/</a></em></p><p>[2]&nbsp;分布式云容器平台 ACK One</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fproduct-overview%2Fack-one-overview" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/product-overview/ack-one-overview</a></em></p><p>[3]&nbsp;ACK One 备份中心</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fbackup-center-overview" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/backup-center-overview</a></em></p><p>[4]&nbsp;ACK One 注册集群</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Foverview-9" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/overview-9</a></em></p><p>[5]&nbsp;ACK One 舰队多集群 Service</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fmcs-overview" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/mcs-overview</a></em></p><p>[6]&nbsp;ACK One GitOps 应用分发</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fgitops-overview" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/gitops-overview</a></em></p><p>[7]&nbsp;ACK Ingress</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fack-managed-and-ack-dedicated%2Fuser-guide%2Fingress-overview" target="_blank">https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/ingress-overview</a></em></p><p>[8]&nbsp;ACK HPA</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fack-managed-and-ack-dedicated%2Fuser-guide%2Fhorizontal-pod-autoscaling" target="_blank">https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/horizontal-pod-autoscaling</a></em></p><p>[9]&nbsp;ACK Cluster Autocaler</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fack-managed-and-ack-dedicated%2Fuser-guide%2Fauto-scaling-of-nodes" target="_blank">https://help.aliyun.com/zh/ack/ack-managed-and-ack-dedicated/user-guide/auto-scaling-of-nodes</a></em></p><p>[10]&nbsp;ACK One 多集群网关</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fmulti-cluster-gateway-overview" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/multi-cluster-gateway-overview</a></em></p><p>[11]&nbsp;地域（Region）</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F40654.html%23concept-z04-bg5-j8w" target="_blank">https://help.aliyun.com/document_detail/40654.html#concept-z04-bg5-j8w</a></em></p><p>[12]&nbsp;云盘快照</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fecs%2Fuser-guide%2Fcopy-a-snapshot" target="_blank">https://help.aliyun.com/zh/ecs/user-guide/copy-a-snapshot</a></em></p><p>[13]&nbsp;文件存储 NAS</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fnas%2Fproduct-overview%2Fwhat-is-nas" target="_blank">https://help.aliyun.com/zh/nas/product-overview/what-is-nas</a></em></p><p>[14]&nbsp;对象存储 OSS</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Foss%2Fproduct-overview%2Fwhat-is-oss" target="_blank">https://help.aliyun.com/zh/oss/product-overview/what-is-oss</a></em></p><p>[15]&nbsp;云备份</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fcloud-backup%2Fproduct-overview%2Fwhat-is-hbr" target="_blank">https://help.aliyun.com/zh/cloud-backup/product-overview/what-is-hbr</a></em></p><p>[16]&nbsp;RDS MySQL 数据库备份恢复</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fflink%2Fdeveloper-reference%2Flog-service-connector" target="_blank">https://help.aliyun.com/zh/flink/developer-reference/log-service-connector</a></em></p><p>[17]&nbsp;RDS 实例间数据迁移</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Frds%2Fapsaradb-rds-for-mysql%2Fmigrate-data-between-apsaradb-rds-for-mysql-instances" target="_blank">https://help.aliyun.com/zh/rds/apsaradb-rds-for-mysql/migrate-data-between-apsaradb-rds-for-mysql-instances</a></em></p><p>[18]&nbsp;IDC 应用上云迁移</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fmigrate-applications-from-self-managed-kubernetes-clusters-to-ack-clusters" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/migrate-applications-from-self-managed-kubernetes-clusters-to-ack-clusters</a></em></p><p>[19]&nbsp;跨版本集群迁移</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fuse-backup-center-to-migrate-applications-from-clusters-running-lower-kubernetes-versions" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/use-backup-center-to-migrate-applications-from-clusters-running-lower-kubernetes-versions</a></em></p><p>[20]&nbsp;跨账号集群接入</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuse-cases%2Fuse-ack-one-to-manage-clusters-across-cloud-platforms-and-alibaba-cloud-accounts" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/use-cases/use-ack-one-to-manage-clusters-across-cloud-platforms-and-alibaba-cloud-accounts</a></em></p><p>[21]&nbsp;跨集群迁移应用</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fack%2Fdistributed-cloud-container-platform-for-kubernetes%2Fuser-guide%2Fmigrate-applications-across-clusters-in-different-regions" target="_blank">https://help.aliyun.com/zh/ack/distributed-cloud-container-platform-for-kubernetes/user-guide/migrate-applications-across-clusters-in-different-regions</a></em></p><p>[22]&nbsp;全局流量管理（GTM）</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F189587.html" target="_blank">https://help.aliyun.com/document_detail/189587.html</a></em></p><p>[23]&nbsp;云消息队列 RocketMQ 版实例规格</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fapsaramq-for-rocketmq%2Fcloud-message-queue-rocketmq-5-x-series%2Fproduct-overview%2Finstance-specifications" target="_blank">https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-5-x-series/product-overview/instance-specifications</a></em></p><p>[24]&nbsp;云消息队列 Kafka 版实例规格</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fapsaramq-for-kafka%2Fcloud-message-queue-for-kafka%2Fproduct-overview%2Finstance-editions" target="_blank">https://help.aliyun.com/zh/apsaramq-for-kafka/cloud-message-queue-for-kafka/product-overview/instance-editions</a></em></p><p>[25]&nbsp;云原生内存数据库 Tair 容灾方案</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Ftair%2Fproduct-overview%2Fdisaster-recovery" target="_blank">https://help.aliyun.com/zh/tair/product-overview/disaster-recovery</a></em></p><p>[26]&nbsp;RDS MySQL 数据库搭建高可用架构</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Frds%2Fapsaradb-rds-for-mysql%2Fbuild-a-high-availability-architecture" target="_blank">https://help.aliyun.com/zh/rds/apsaradb-rds-for-mysql/build-a-high-availability-architecture</a></em></p><p>[27]&nbsp;Tair 全球多话</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Ftair%2Fuser-guide%2Foverview-of-global-distributed-cache-for-tair" target="_blank">https://help.aliyun.com/zh/tair/user-guide/overview-of-global-distributed-cache-for-tair</a></em></p><p>[28]&nbsp;云原生数据库 PolarDB MySQL 全球数据库</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.aliyun.com%2Fzh%2Fpolardb%2Fpolardb-for-mysql%2Fuser-guide%2Foverview-49" target="_blank">https://help.aliyun.com/zh/polardb/polardb-for-mysql/user-guide/overview-49</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Mar 2024 03:21:17 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/11047123</guid>
            <link>https://my.oschina.net/u/3874284/blog/11047123</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软推出 Sudo for Windows 并开源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软已在 Windows 11 Insider Preview Build 26052 中发布适用于 Windows 的 Sudo，并将其在 MIT 协议下进行开源。Sudo for Windows 将允许用户直接从未提权终端窗口运行提权命令。</span></p><h4><strong><span style="color:#000000">如何启用 Sudo for Windows</span></strong></h4><p><span style="color:#000000">导航至 Settings &gt; For Developers page in Windows Settings and toggle on the 「Enable Sudo」 选项：</span></p><p><img height="254" src="https://oscimg.oschina.net/oscnet/up-c0d02d778cd33c185f3a89594578c804722.png" width="500" referrerpolicy="no-referrer"></p><p>也可以通过运行以下命令：</p><pre><code>sudo config --enable &lt;configuration_option&gt;</code></pre><p><img alt="" height="249" src="https://oscimg.oschina.net/oscnet/up-9380490132ee0ce18ceaef56a7fc3338a03.gif" width="500" referrerpolicy="no-referrer"></p><h4><strong>如何配置&nbsp;Sudo for Windows</strong></h4><p><span style="color:#333333">目前支持三种不同的配置选项：</span></p><ol><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fintroducing-sudo-for-windows%2F%23configuration-option-1-force-a-new-window" target="_blank">开启新窗口</a>&nbsp;(forceNewWindow)</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fintroducing-sudo-for-windows%2F%23configuration-option-2-input-closed" target="_blank">禁用输入</a>&nbsp;(disableInput)</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fintroducing-sudo-for-windows%2F%23configuration-option-3-inline" target="_blank">内联</a>&nbsp;(normal)</li></ol><p><span style="color:#333333">要更改配置选项，可使用&nbsp;Settings &gt; For Developers page in Windows Settings 页面中的下拉菜单：</span></p><p><img height="290" src="https://oscimg.oschina.net/oscnet/up-14021d3fddd3e949cacb8f69dfd71df33cb.png" width="500" referrerpolicy="no-referrer"></p><p>或运行以下命令：</p><pre><code>sudo config --enable &lt;configuration_option&gt;</code></pre><p style="text-align:left"><strong><span style="color:#333333">配置选项 1：</span><span style="color:#000000">开启新窗口</span></strong></p><p style="text-align:left"><span style="color:#333333">在此配置中，Sudo for Windows 将打开一个新的窗口并运行命令。这是启用 sudo 时的默认配置选项。例如，如果运行：</span></p><pre><span style="color:#212529"><code class="language-powershell">sudo netstat <span style="color:#07704a">-ab</span></code></span></pre><p style="text-align:left"><img alt="" height="249" src="https://oscimg.oschina.net/oscnet/up-459386d6e190afc5d1d596b7ce9753ffb16.gif" width="500" referrerpolicy="no-referrer"></p><p><strong>配置选项 2：禁用输入</strong></p><p>在此配置中，Sudo for Windows 将在当前窗口中运行提权后的进程，但新进程生成时将关闭其 stdin。这意味着新进程将不接受任何用户输入，因此此配置不适用于提权后需要用户进一步输入的进程。</p><p><strong>配置选项 3：内联</strong></p><p>此配置与其他操作系统上 sudo 的行为最相似。在此配置中，Sudo for Windows 将运行提权的进程，其 stdin、stdout 和 stderr 均连接到当前窗口。这意味着新的提权进程可以接收输入并 route output 到当前窗口。</p><p><img height="195" src="https://static.oschina.net/uploads/space/2024/0317/105417_8Iia_4252687.png" width="500" referrerpolicy="no-referrer"></p><hr><p>微软方面表示，团队将在接下来几个月中<span style="color:#333333">致力于扩展&nbsp;Sudo for Windows 的文档，并将分享更多有关在"内联"配置中运行 sudo 的安全影响的细节。同时致力于 Sudo for Windows 的开源工作，分享更多相关细节。</span></p><p><span style="color:#333333">详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fintroducing-sudo-for-windows%2F" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Mar 2024 02:58:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283410/sudo-for-windows</guid>
            <link>https://www.oschina.net/news/283410/sudo-for-windows</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[凌夕文件管理系统 v1.0.0 发布 - 网盘系统、文件转码系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><h4>软件简介</h4></div><div><div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">凌夕文件管理系统（lfs）是基于 SpringBoot3.x+Mybatis+Mybatis-Plus+VUE3+Element Plus 开发的文件管理系统， 支持单文件上传、分片上传，视频上传完成后，可以根据视频转码配置转成对应的视频格式（mp4、m3u8），文档上传完成后，会转成 pdf 文件， 支持 word、excel、ppt、wps、text、rtf 文件转成 pdf。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">支持音视频、图片、文档在线预览、下载、重命名、移动文件夹、删除等操作，支持文件分类查看。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">后端 git 地址：<a href="https://gitee.com/lxinet/lfs">https://gitee.com/lxinet/lfs</a></p><p style="margin-left:0; margin-right:0">前端 git 地址：<a href="https://gitee.com/lxinet/lfs-vue">https://gitee.com/lxinet/lfs-vue</a></p><h1>环境支持</h1><p><span style="background-color:#ffffff; color:#40485b">java 环境：jdk17+</span></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">数据库：mysql 8.0</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">缓存：redis</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">文件服务器：nginx</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">部署前需修改 application.yml 文件中的 mysql 和 redis 信息，需要部署 nginx 服务作为文件服务器。</p><h1>开发框架</h1><h2>后端</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">springboot3.x+mybatis+mybatis-plus</p><h2>前端</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">vue3+element-plus+vite</p><h3>用户手册</h3><h4><span><span><span><strong><strong><span><span><strong>新建文件夹</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在文件管理页面，点击【新建文件夹】，就可以在当前文件夹下新建一个文件夹了，默认文件夹名称为 「新建文件夹」，默认会全选，可以重新修改名称，按回车后，就完成文件夹创建。</span></span></p><p style="margin-left:0; margin-right:0"><img height="410" src="https://oscimg.oschina.net/oscnet/up-c2b3f32933b2aee1f5a2a41530b72072688.png" width="1000" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>移动文件</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在文件管理页面，可以选择文件移动到其他文件夹下。</span></span></p><p style="margin-left:0; margin-right:0"><img height="296" src="https://oscimg.oschina.net/oscnet/up-763e729a202a6f69ed4bd39fbb417fccc12.png" width="1000" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="557" src="https://oscimg.oschina.net/oscnet/up-95bc25ea9a93be68472d24ae15914aad4e8.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span><span><span><strong><strong><span><span><strong>上传文件</strong></span></span></strong></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>文件可以在线上传，上传使用分片上传方式，如果上传重复文件，可以直接秒传，秒传是根据文件 md5 进行判断。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在文件管理页面，点击【上传文件】按钮，就会弹出上传文件的弹窗。</span></span></p><p style="margin-left:0; margin-right:0"><img height="392" src="https://oscimg.oschina.net/oscnet/up-b1b95439cb7e590d099a5626dd333b55ed8.png" width="1000" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>可以拖拽文件到窗口或者点击窗口选择文件进行文件上传，上传过程中可以实时查看上传进度。</span></span></p><p style="margin-left:0; margin-right:0"><img height="328" src="https://oscimg.oschina.net/oscnet/up-4d03637e43333c483745a6bda7949f31e9c.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>上传完成后，可以点击右边的【查看】按钮，查看上传文件的详情页。</span></span></p><p style="margin-left:0; margin-right:0"><img height="408" src="https://oscimg.oschina.net/oscnet/up-e5f7f164b6693ea630dd10025281d5d884a.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>文件上传完成后，会自动发起转码，文档会转成 pdf 文件，视频会根据转码配置进行转码。</span></span></p><p style="margin-left:0; margin-right:0"><img height="548" src="https://oscimg.oschina.net/oscnet/up-d3670b909e8bf7cb300fb92d2adbe75113e.png" width="800" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>文档预览</strong></span></span></strong></strong></span></span></span></h4><p style="text-align:justify"><span><span><span><span>文档上传后，会自动转成 pdf 文件，可以在线预览，可以在文件详情页面，点击【转码预览】按钮，就可以在线查看 pdf 文件内容。</span></span></span></span></p><p style="margin-left:0; margin-right:0"><img height="408" src="https://oscimg.oschina.net/oscnet/up-6663a4d8ea70bb3e50b9226e10cb3e7ce1b.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="544" src="https://oscimg.oschina.net/oscnet/up-b77710abd5259fb82d771d86967baadb584.png" width="800" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>视频预览</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>视频上传完成后，会根据转码配置自动转码，在视频详情页面，可以查看原文件和转码文件。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>点击【原文件预览】按钮，就可以预览原文件。</span></span></p><p style="margin-left:0; margin-right:0"><img height="550" src="https://oscimg.oschina.net/oscnet/up-1eff3c6f2c87c03f6bc4450d924c56f92af.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="459" src="https://oscimg.oschina.net/oscnet/up-b98261e3eae1c1dd2c45a63405e468ff7fb.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>点击底下的转码列表右边的预览，就可以查看当前转码后的文件的视频。</span></span></p><p style="margin-left:0; margin-right:0"><img height="550" src="https://oscimg.oschina.net/oscnet/up-99363b6fa8481c02cce2d5fe09746dfa04f.png" width="800" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="458" src="https://oscimg.oschina.net/oscnet/up-1f84b96d6f44b3d7888a9c29653e46ea724.png" width="800" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>转码配置</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>转码配置是针对视频文件转码进行配置的，视频上传后会根据开启的转码配置进行转码，可以在转码配置页面进行添加、修改、删除、开启 / 关闭转码。</span></span></p><p style="margin-left:0; margin-right:0"><img height="276" src="https://oscimg.oschina.net/oscnet/up-18eb5e1ff93eeb21af5d29681f50c9a3617.png" width="1000" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>新增转码配置</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>点击【新增】按钮，系统会弹出新增转码配置界面，填写信息后点击【保存】按钮，即可添加新的转码配置。</span></span></p><p style="margin-left:0; margin-right:0"><img height="427" src="https://oscimg.oschina.net/oscnet/up-198b9db6daa3e4fefbf83f6ead771593cef.png" width="1000" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>修改转码</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在转码配置管理页面，点击每个转码配置右边的编辑，即可进入编辑页面，修改内容完成后，点击【保存】按钮，即可完成修改。</span></span></p><p style="margin-left:0; margin-right:0"><img height="395" src="https://oscimg.oschina.net/oscnet/up-7c98b434dc65e950917e3cd72c21f9d874f.png" width="1000" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>删除转码配置</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在转码配置管理页面，点击每个转码配置右边的删除，点击确定后，就可以删除指定的转码配置。</span></span></p><p style="margin-left:0; margin-right:0"><img height="409" src="https://oscimg.oschina.net/oscnet/up-9e208823da14305cba5884021bef4c361c3.png" width="1000" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>开启转码配置</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在转码配置管理页面，点击每个转码配置状态，就可以切换开启</span></span><span><span><span>&nbsp;</span>/</span></span><span><span><span>&nbsp;</span>关闭转码配置。</span></span></p><p style="margin-left:0; margin-right:0"><img height="250" src="https://oscimg.oschina.net/oscnet/up-1d66d57bbe66c967a8a048e85ddab0faf35.png" width="1000" referrerpolicy="no-referrer"></p><h4><span><span><span><strong><strong><span><span><strong>转码进度</strong></span></span></strong></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span>在转码进度页面可以实时查看转码进度，也可以对文件进行重新转码。</span></span></p><p style="margin-left:0; margin-right:0"><img height="283" src="https://oscimg.oschina.net/oscnet/up-3a41b586d0e603478b03372628a91b3477e.png" width="1000" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span>点击右边的【重新转码】按钮，就可以对文件重新转码。</span></span></p><p style="margin-left:0; margin-right:0"><img height="295" src="https://oscimg.oschina.net/oscnet/up-9879f4bfa8661840df0f33f7a28d679595f.png" width="1000" referrerpolicy="no-referrer"></p></div></div><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Mar 2024 08:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283323/lxinet-1-0-0-released</guid>
            <link>https://www.oschina.net/news/283323/lxinet-1-0-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Krita 2024 规划：更多地关注 GPU 加速和 AI]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Krita 项目团队<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkrita.org%2Fen%2Fposts%2F2024%2F2024-roadmap%2F" target="_blank">发文</a>对 2023 年的工作进行了回顾；同时透露了项目 2024 年的一些工作规划，其中包含了一些 2023 年未完成的事项以及新的内容。</span></p><p><span style="color:#000000">首先提到了就是在 2024 年需要将 Krita 移植到 Qt6。「这是一个大工程，不仅仅是因为功能的消失，还因为对 GPU 渲染支持的改变。在 Windows 上，OpenGL 驱动程序存在很多错误，正因为如此，Qt5 提供了在使用 OpenGL 的应用程序和用于 GPU 渲染的 native Direct3D 库之间使用 Angle 兼容层的可能性。现在，除非我们重写 GPU 渲染系统，否则就必须将 Angle 放回堆栈中。」</span></p><p><span style="color:#000000">移植到 Qt6 势必会花费大量的时间和精力，但同时也会带来很多新功能。项目团队希望能在 2024 年实现的功能包括有：</span></p><ul><li><span style="color:#000000">实现一个系统来创建灵活的 text balloons 并将其与文本对象集成</span></li><li><span style="color:#000000">为 comic book Frameworks 实现新的图层类型</span></li><li><span style="color:#000000">提供与 Blender 的集成</span></li><li><span style="color:#000000">用更灵活、更易于维护的系统替换当前的 docker 系统</span></li><li><span style="color:#000000">建立一个系统来提供工具预设</span></li><li><span style="color:#000000">创建一个新的用户界面来处理调色板</span></li><li><span style="color:#000000">添加动画音频波形显示</span></li><li><span style="color:#000000">添加对动画参考帧工作流程的支持</span></li></ul><p><span style="color:#000000">他们还讨论了使用 GPU 来提高性能。最初的想法是使用 GPU 来实现画笔，但后来开发人员认为画笔性能足够好，反而是 liquefy transform tool、transform masks 和一些滤镜太慢了。因此，他们最终决定将研究使用 GPU 来优化 transform masks。</span></p><p><span style="color:#000000">其中最有争议的一件事情是，他们还在考虑是否在 Krita 中添加 AI 功能。</span></p><blockquote><p><span style="color:#000000">与会的艺术家们认为，生成式 AI 毫无价值，充其量只会产生平淡无奇的重复模板，但辅助式 AI 可能会很有用。为了弄清这是否属实，我们开始研究一个特殊的项目：AI-assisted inking of sketches。这很有用，既能取代艺术创作中的繁琐步骤，又能保留艺术个性。当然，Krita 能否真正实现这一点还不确定，但希望这次调查能帮助我们更好地理解这个问题、可能性和存在的问题。</span></p></blockquote><p><span style="color:#000000">此外，Krita 团队，还面临着一些人手不足的的资源挑战。Krita 的 Android 和 ChromeOS 端口的维护人员已经忙得无法全职开发 Krita&nbsp;。为了维护 Krita 在 Android（和 ChromeOS）上的运行上，原计划为 Krita 在 Android 上开发专门的平板电脑用户界面的工作还没完成；针对 Android 的自动构建功能也不再存在。</span></p><p><span style="color:#000000">在此背景下，还有开发人员退出了&nbsp;Krita 项目。Apple MacOS 商店中 Krita 的证书也已过期，但由于 Krita 的维护者在两年前改了名，新的证书签署过程中遇到了一些问题。</span></p><p><span style="color:#000000">「这些证书必须包含签名者当前的法定姓名，而出于某种原因，商店很难允许拥有相同 ID 和代码但法定姓名不同的开发者上传软件包。我们正在努力解决这个问题。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Mar 2024 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283281/krita-2024-roadmap</guid>
            <link>https://www.oschina.net/news/283281/krita-2024-roadmap</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[金山办公推出鸿蒙星河版 WPS]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">金山办公和华为日前联合举办鸿蒙星河版 (HarmonyOS NEXT) WPS Office 核心功能版本交付仪式。</span></p><p><img height="279" src="https://oscimg.oschina.net/oscnet/up-cd9743945958b8e87678dc40f556ea6a1fe.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">据了解，WPS Offce 核心功能版本基于 HarmonyOS NEXT 的原生互联、原生流畅等特性开发，能够在 PC 端更流畅运行，还能实现与手机、平板、智慧屏等多种设备之间的无缝流转和跨端协同。</span></p><p><span style="color:#000000">例如，在常见的团队办公场景下，同一个文档可以实现小屏联动大屏，在手机、平板上进行的编辑和标注，可在 PC、智慧屏上同步演示。另外使用手机，可以直接对大屏上的 PPT 进行翻页、视频播放等操作，诸多办公痛点将得以解决，多人办公场景真正实现了高效协同。</span></p><p><span style="color:#000000">WPS 团队还针对鸿蒙系统的特性进行了深度优化，使得软件在运行效率、能耗控制以及跨设备协作方面都得到了显著提升。此外，WPS Office 鸿蒙原生版还特别加强了数据安全和隐私保护功能，以适应日益增长的网络安全需求。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Mar 2024 01:30:55 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283280</guid>
            <link>https://www.oschina.net/news/283280</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Transformer Debugger —— Transformer 内部结构分析工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Transformer Debugger 是 OpenAI 的 Superalignment 团队开发的一款工具，旨在支持对小语言模型的特定行为进行研究。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">TDB 可以在编写代码之前进行快速探索，能够干预前向传递并查看它对特定行为的影响。它可以用来回答诸如 "为什么模型会输出 token A 而不是 token B" 或 "为什么 attention head H 会关注 token T" 之类的问题。它通过识别对行为有贡献的特定组件（neurons、attention heads、autoencoder latents），显示自动生成的关于导致这些组件激活最强烈的原因的解释，以及追踪组件之间的连接以帮助发现联系。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">本次开源发布的内容包括：</span></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenai%2Ftransformer-debugger%2Fblob%2Fmain%2Fneuron_viewer%2FREADME.md" target="_blank">Neuron viewer</a>：一个 React 应用程序，托管 TDB 以及包含有关各个模型组件（<span style="color:#1f2328">MLP&nbsp;</span>neurons、attention heads and autoencoder latents for both）信息的页面。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenai%2Ftransformer-debugger%2Fblob%2Fmain%2Fneuron_explainer%2Factivation_server%2FREADME.md" target="_blank">Activation server</a>：对主题模型进行推理，为 TDB 提供数据的后端服务器。它还从公共 Azure 存储桶读取数据并提供数据。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenai%2Ftransformer-debugger%2Fblob%2Fmain%2Fneuron_explainer%2Fmodels%2FREADME.md" target="_blank">Models</a>：一个用于 GPT-2 模型及其自动编码器的简单推理库，带有用于<span style="color:#333333">捕获激活的 hook</span>。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenai%2Ftransformer-debugger%2Fblob%2Fmain%2Fdatasets.md" target="_blank">Collated activation datasets</a>：MLP neurons、attention heads 和 autoencoder latents 的顶级激活数据集示例。</li></ul><div style="text-align:start"><h4><strong><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span>设置</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>按照以下步骤安装存储库。首先需要 python/pip 以及 node/npm。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>虽然可选，但官方建议用户使用虚拟环境或等效环境：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span><span><span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">#</span></span> If you're already in a venv, deactivate it.</span></span>
deactivate
<span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">#</span></span> Create a new venv.</span></span>
python -m venv <span><span style="color:var(--color-prettylights-syntax-keyword)">~</span></span>/.virtualenvs/transformer-debugger
<span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">#</span></span> Activate the new venv.</span></span><span><span style="color:var(--color-prettylights-syntax-constant)">source</span></span><span><span style="color:var(--color-prettylights-syntax-keyword)">~</span></span>/.virtualenvs/transformer-debugger/bin/activate</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><div><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>设置环境后，按照以下步骤操作：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div></div><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span><span>git clone git@github.com:openai/transformer-debugger.git
<span><span style="color:var(--color-prettylights-syntax-constant)">cd</span></span> transformer-debugger

<span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">#</span></span> Install neuron_explainer</span></span>
pip install -e <span><span style="color:var(--color-prettylights-syntax-constant)">.</span></span><span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">#</span></span> Set up the pre-commit hooks.</span></span>
pre-commit install

<span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">#</span></span> Install neuron_viewer.</span></span><span><span style="color:var(--color-prettylights-syntax-constant)">cd</span></span> neuron_viewer
npm install
<span><span style="color:var(--color-prettylights-syntax-constant)">cd</span></span> ..</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><div><p>要运行 TDB 应用程序，需要按照说明设置激活服务器后端和神经元查看器前端。</p><h4 style="text-align:start"><strong>Making changes</strong></h4><p>要验证更改：</p><ul><li>运行<span>&nbsp;</span><code>pytest</code></li><li>运行<span>&nbsp;</span><code>mypy --config=mypy.ini .</code></li><li>运行激活服务器和神经元查看器并确认 TDB 和神经元查看器页面等基本功能仍然有效</li></ul></div></div></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 16 Mar 2024 01:16:55 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/transformer-debugger</guid>
            <link>https://www.oschina.net/p/transformer-debugger</link>
        </item>
    </channel>
</rss>
