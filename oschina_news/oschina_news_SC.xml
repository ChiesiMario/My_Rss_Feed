<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 04 Dec 2023 19:01:43 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[让代码运行起来，比代码可读性重要]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#101828; margin-left:0px; margin-right:0px; text-align:start">"代码的阅读胜于编写"这句话现在已经是程序员共识，它提醒我们，在编写代码时不能仅追求方便，而忽视那些将来需要阅读和修改代码的人。更一般地说，"代码的阅读胜于编写"传达了一个观点：通过保持代码可维护性，保持简洁、编写测试和文档等方式来使得代码易于理解是一个明智的投资。它关乎对软件开发周期的全局视角。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">让我用更简洁的表达方式来表述这个观点：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">维护者 &gt; 作者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我认为这种思路可以超越编写代码，并作为一个经验法则用于问题识别和决策。</p><h3>代码的使用胜于阅读</h3><p style="color:#101828; margin-left:0px; margin-right:0px; text-align:start">代码只是达到目标的手段。软件应该有一个目的，它应该为用户提供服务。无论代码是否编写良好、可维护性如何，以及所使用技术是否先进，如果软件不能实现其目标并给用户带来良好体验，则一切都没有意义：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">用户 &gt; 维护者 &gt; 作者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">或者，既然我们不再需要区分开发人员角色：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">用户 &gt; 开发者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">因此，与其猜测或询问用户需求，最好的方法是尽早、频繁地将程序放在用户面前，并结合他们的反馈来改进。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这是一个强大的思维模式，只要在开发过程中牢记用户，我们就能走得更远。这大致是我学习这个职业以及我职业生涯前半段对它的理解方式。</p><h3>代码的运行胜于阅读</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">当我说"运行"时，我不仅指执行程序，还包括在生产环境中操作它，包括部署、升级、观察、审计、监控、修复和废弃等等。正如丹·麦金利所说：在保持系统可靠工作方面，长期成本几乎总是远远超过你在构建过程中遇到的任何不便。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我们可以将这个观点纳入我们的小模型中：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">用户 &gt; 运维 &gt; 开发</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我花了一些时间才完全理解这一点，因为根据我的经验，很多正在构建的软件实际上从未真正投入生产使用，至少没有达到重要规模。大多数软件都是基于从未经过测试的假设构建而成。但当你将代码运行在生产环境中时，简洁性原则就有了新的维度。它不再仅仅关乎代码本身，而是关乎减少移动部件并了解其故障模式。它关乎交付产品并确保即使在出现故障时也能正常工作。</p><h3>此外，还有商业因素</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我说过，在开发过程中牢记用户可以帮助我们走得更远。这适用于软件对用户有价值且良好运行的假设。对于开发人员来说，这是一个方便的抽象：我们提供优秀、可工作的软件，而业务则负责将其转化为利润。这在消费者和企业软件领域通常有效。但最终，这种抽象会被证明是一种过度简化，并且我们可以从中受益，将一些商业观点纳入我们的工作流程：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; 用户 &gt; 运维 &gt; 开发</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">最明显的例子就是预算：我们没有无限资源来满足用户需求，所以需要衡量成本和收益。还有市场营销、截止日期、利益相关者和投资者等因素。个人兴趣和政治也会产生影响。某些决策在孤立考虑我们的软件、团队或用户时是合理的，但当考虑整个组织时可能不再合适。有时，我们需要关注能够产生收入的事务，而不是只迎合用户。我将再次回到这个问题。</p><h3>反向思考</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我们得到了一个小模型，它表达了软件开发中各种因素的相对重要性，或许可以帮助我们看到更大的图景并专注于重要的事情。现在我想看一下一些常见的软件开发功能障碍，并看看它们如何与该模型相匹配。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>难以维护的代码</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">作者 &gt; 维护者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这是我们起点。这是聪明而懒惰的代码变成了意大利面条和鬼屋，这是过早优化，这是只有卡洛斯才能碰触那个模块等等。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>不可用的软件</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; 用户</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">由那些不从用户那里学习或将技术放在第一位的团队制作的软件。过度工程化程序、恶化用户体验的"现代化"、破坏浏览器功能的 Web 应用等等。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>只在我的机器上运行</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; 运维</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">没有考虑操作问题而设计出来的软件。这是过于复杂、有很多移动部分、为小数据负载设计高级数据库、由单个小团队管理的微服务生态系统。这是过早为规模而架构的软件。这是由与在它出现故障时被叫醒的人不同的人设计的软件。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>正确的事情</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; 商业</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">将代码视为目标本身。这是自命不凡的工匠们、泰坦尼克号上的音乐家和 Lisp 黑客制作的软件。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>以简历为导向的开发</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; *</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">没有风险，开发人员可以做他们想做的任何事情。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>虚构的软件</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; 用户 &gt; <s>运维 &gt;</s><span style="color:#101828">&nbsp;开发</span></p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这是已经构建但很少（或从未）投入生产使用的软件。我称之为虚构的软件。Charity Majors 称之为活在谎言中。</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; <s>用户 &gt;</s><span style="color:#101828">&nbsp;运维 &gt; 开发</span></p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">另一种虚构的软件是那些没有用户但具有可扩展性（大规模）的软件。这是无法解决问题或解决错误问题，可能没有人关心问题。这种软件源于采用一些炒作技术并将其应用于所有事物，直到出现模糊地符合某个用例需求。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>晚期资本主义</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><s>商业 &gt;</s><span style="color:#101828">&nbsp;用户 &gt; 运维 &gt; 开发</span></p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">风险投资支持下没有商业模式或其商业模式是增长至垄断然后剥削用户的软件。</p><h3>全局来看</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">如果你还没有关闭浏览器标签，让我总结一下：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; 用户</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这个观点可能很难接受。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">正如我上面提到的，我学习这个工作时，软件是为最终用户解决问题的。这在《程序员修炼之道》的最后一个提示中得到了总结，该提示说我们的目标是让用户满意，而不仅仅是交付代码。但自从我开始从事程序员工作，并且随着软件变得无处不在，我发现这种假设越来越难以维持。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">有很多正在生产的软件根本不关心其用户，或者操纵用户，或者将其变成产品。这不仅限于社交媒体：作为用户，在没有弹窗试图吸引我的注意力之前，我甚至不能预订房间、订购食物或点击 Windows 开始按钮；在进行谷歌搜索时，我会得到一堆垃圾信息。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我们认为做好工作意味着什么与行业中相当大一部分人认为能够获利是相矛盾的，我认为这解释了许多软件专业人士日益感到不适的原因。虽然我们不能回避对我们领域的经济现实，但也许我们应该更加坚定地站在道德立场上，不伤害用户。承认用户并非始终排在商业之前，但商业也不应无条件地居于第一位：</p><blockquote><p style="color:#101828; margin-left:0px; margin-right:0px; text-align:start">用户 &gt; 运维 &gt; 开发<br> 商业 &gt; 运维 &gt; 开发<br> 商业 ≹ 用户</p></blockquote><p>原文链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Folano.dev%2F2023-11-30-code-is-run-more-than-read%2F" target="_blank">https://olano.dev/2023-11-30-code-is-run-more-than-read</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 10:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269471</guid>
            <link>https://www.oschina.net/news/269471</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8 极致性能优化 AOT]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><strong>前言</strong></h1><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">.NET8 对于性能的优化是方方面面的，所以 AOT 预编译机器码也是不例外的。本篇来看下对于 AOT 的优化。</p><span id="OSC_h1_2"></span><h1><span><strong><span style="color:#3c70c6">概述</span></strong></span></h1><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">首先要明确一个概念，.NET 里面的 AOT 它是原生的。什么意思呢？也就是说通过 ILC 编译器 (AOT 编译器，参考:<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247484180%26idx%3D1%26sn%3D418cc4dc2d124a107f52c34739181e50%26chksm%3Dc01c4e8ff76bc79991e1b1086487f5a60d0068c358969c47945843ac88be74aa90de38ed9302%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>.Net 7 新编译器 ILC 简析</span></strong></a>) 编译出来的代码是各个平台上可以直接运行的二进制代码。比如 MacOS 的二进制，Linux 二进制等等。所以称之为原生。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">C#源码被 ILC 编译之后，生成了一个完全原生态代码的可执行文件。在执行的时候不需要 JIT 来编译任何东西，因为 JIT 已经在 ILC 里面被充分利用过了。实际上 AOT 里面也没有包含 JIT。那么它如何优化呢？只能是在 ILC 里面调用 JIT 的时候了。所以它这个优化依然依靠 JIT。<span>.NET8 里面优化 AOT 的一个典</span><span>型的例子，就是 ASP.NET 应用程序在使用 AOT 的时候表现不错，同时也降低了总成本。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">在.NET8 里面优化 AOT 的一个重要的目标就是减少 AOT 可执行文件的大小，关于这点的效果。我们现在就可以看到</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">下面创建一个控制枱应用程序</p><pre><code><span>dotnet <span style="color:#ca7d37">new</span><span style="color:#ca7d37">console</span> -o nativeaotexample -f net7<span style="color:#0e9ce5">.0</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">由于上面是通过.NET7.0 创建的，我们把这个控制枱的 csproj 更改下</p><pre><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">TargetFramework</span>&gt;</span>net7.0<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">TargetFramework</span>&gt;</span></span></code><code><span>改为</span></code><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">TargetFrameworks</span>&gt;</span>net7.0;net8.0<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">TargetFrameworks</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">可以轻松的构建.NET7.0 或者.NET8.0 的程序</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">继续​​​​​​​</p><pre><code><span>把<span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">PropertyGroup</span>&gt;</span>...<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">PropertyGroup</span>&gt;</span>项中添加如下</span></code><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">PublishAot</span>&gt;</span>true<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">PublishAot</span>&gt;</span>编译成 AOT 文件</span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">下面我们就可以通过 dotnet publish 发布它了，linux 如下：</p><pre><code><span><span style="color:#ca7d37">dotnet</span><span style="color:#ca7d37">publish</span><span style="color:#ca7d37">-f</span><span style="color:#ca7d37">net7</span><span>.0</span><span style="color:#ca7d37">-r</span><span style="color:#ca7d37">linux-x64</span><span style="color:#ca7d37">-c</span><span style="color:#ca7d37">Release</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">现在它生成了一个.NET7.0 版本的独立可执行文件，可通过&nbsp;ls/dir 输出目录以查看生成的二进制大小</p><pre><code><span><span>12820K</span><span style="color:#dd1144">/home/stoub/nativeaotexample/bin/Release/net7.0/linux-x64/publish/nativeaotexample</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">这个大约是 13M 左右，我们再来看下.NET8.0</p><pre><code><span><span style="color:#ca7d37">dotnet</span><span style="color:#ca7d37">publish</span><span style="color:#ca7d37">-f</span><span style="color:#ca7d37">net8</span><span>.0</span><span style="color:#ca7d37">-r</span><span style="color:#ca7d37">linux-x64</span><span style="color:#ca7d37">-c</span><span style="color:#ca7d37">Release</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">生成的可执行文件大小如下:</p><pre><code><span><span>1536K&nbsp;/home/stoub/nativeaotexample/bin/Release/net8.0/linux-x64/publish/nativeaotexample</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff">1.5M 的大小，这个优化的力度不可不大啊。整整优化了将近 10</span>倍<span style="background-color:#ffffff">的体积。</span><span style="background-color:#ffffff">这就是.NET8.0 的优化魔力。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">但是优化的情况远不止如此，比如说我们可以配置 csproj 使 AOT 的体积更小​​​​​​​</p><pre><code><span>csproj 添加如下 size 表示要生成的 AOT 大小</span></code><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">OptimizationPreference</span>&gt;</span>Size<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">OptimizationPreference</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff">如果我们不需要全球化代码和数据，需要特</span>定<span style="background-color:#ffffff">的代码和数据，并且使用不变模式，可以 csproj 添加如下选项</span></p><pre><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">InvariantGlobalization</span>&gt;</span>true<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">InvariantGlobalization</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">如果你不想在 AOT 异常的时候抛出堆栈，那么你也可以在 csproj 里面添加如下</p><pre><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">StackTraceSupport</span>&gt;</span>false<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">StackTraceSupport</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">重新通过 dotnet publish net8.0 发布了之后，它的体积还可以继续减小</p><pre><code><span><span>1248K</span><span style="color:#dd1144">/home/stoub/nativeaotexample/bin/Release/net8.0/linux-x64/publish/nativeaotexample</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">再次缩小了 0.3M 大小。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">然而，你以为到此优化就为止了吗?并没有，.NET8 不仅对 AOT 编译器内部进行了改进，而且还对单个库也进行了性能优化和改进。比如 HttpClient。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">当然除了体积的优化之外，还有其它的优化，比如避免了在读取静态字段时的辅助调用，再比如 BenchmarkDotNet 也是支持 AOT 化的，也就是性能测试上面的支持。我们可以只使用 --runtimes nativeaot7.0 nativeaot8.0，而不使用 --runtimes net7.0 net8.0，如下代码​​​​​​​</p><pre><code><span><em>// dotnet run -c Release -f net7.0 --filter "*" --runtimes nativeaot7.0 nativeaot8.0</em></span></code><code><span><span style="color:#ca7d37">using</span> BenchmarkDotNet.Attributes;</span></code><code><span><span style="color:#ca7d37">using</span> BenchmarkDotNet.Running;</span></code><code><span>BenchmarkSwitcher.FromAssembly(<span style="color:#ca7d37">typeof</span>(Tests).Assembly).Run(args);</span></code><code><span>[<span style="color:#afafaf">HideColumns(<span>"Error"</span>, <span>"StdDev"</span>, <span>"Median"</span>, <span>"RatioSD"</span>)</span>]</span></code><code><span><span style="color:#ca7d37">public</span><span style="color:#ca7d37">class</span><span style="color:#dd1144">Tests</span></span></code><code><span>{</span></code><code><span><span style="color:#ca7d37">private</span><span style="color:#ca7d37">static</span><span style="color:#ca7d37">readonly</span><span style="color:#ca7d37">int</span> s_configValue = <span style="color:#0e9ce5">42</span>;</span></code><code><span>    [<span style="color:#afafaf">Benchmark</span>]</span></code><code><span><span><span style="color:#ca7d37">public</span><span style="color:#ca7d37">int</span><span style="color:#dd1144">GetConfigValue</span>()</span> =&gt; s_configValue;</span></code><code><span>}</span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">上面代码可以通过如下 AOT 化运行</p><pre><code><span><span style="color:#ca7d37">dotnet</span><span style="color:#ca7d37">run</span><span style="color:#ca7d37">-c</span><span style="color:#ca7d37">Release</span><span style="color:#ca7d37">-f</span><span style="color:#ca7d37">net7</span><span>.0</span><span style="color:#ca7d37">--filter</span> "*" <span style="color:#ca7d37">--runtimes</span><span style="color:#ca7d37">nativeaot7</span><span>.0</span><span style="color:#ca7d37">nativeaot8</span><span>.0</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">BenchmarkDotNet 输出如下</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box !important; color:rgba(0, 0, 0, 0.9); display:table; font-family:system-ui,-apple-system,BlinkMacSystemFont,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei UI&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size:17px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:676.989px; word-spacing:0px"><tbody><tr><th>Method</th><th>Runtime</th><th>Mean</th><th>Ratio</th></tr></tbody><tbody><tr><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">GetConfigValue</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">NativeAOT 7.0</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">1.1759 ns</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">1.000</td></tr><tr><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">GetConfigValue</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">NativeAOT 8.0</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">0.0000 ns</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">0.000</td></tr></tbody></table><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">可以看到即使是性能测试的 Benchmark，AOT 优化也是不放过的。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">另外还值得一提的地方就是分层，因为 AOT 里面没有分层的概念。但是即时编译也就是不是 AOT 编译的时候，一个方法从 tier0 提升到 tier1,方法里面的静态字段必须被初始化过了。AOT 里面添加了一个快速路径检查字段是否初始化，避免一些不必要的开销。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">其它的一些改进，比如 AOT 锁的实现方式。使用了一种混合方式，开始使用轻量级自旋锁，后面升级到使用 System.Threading.Lock 类型，这个应该会在.NET9.0 里面释放出来。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#4a4a4a; margin-left:0px; margin-right:0px"><strong>欢迎关注公众号 (jianghupt），文章首发地。</strong></p><p><span><img alt="" height="430" src="https://oscimg.oschina.net/oscnet/up-3243ba74c89867eabc4277de83aa83aa7bb.png" width="430" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 09:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5407571/blog/10316035</guid>
            <link>https://my.oschina.net/u/5407571/blog/10316035</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[美团 CEO 王兴发布内部信：多项技术岗负责人调动]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>美团 CEO 王兴近日发布内部信，公布了多项技术岗负责人的调动。</p><p>内部信显示，由穆荣均、张锦懋牵头筹备技术委员会下成立技术治理筹备小组。锦懋卸任基础研发平台负责人，继续任技术委员会主席并负责技术委员会现有工作；原美团平台技术部负责人韩建换岗担任基础研发平台负责人，汇报至王兴。原快驴事业部产品和运营及技术负责人司天歌换岗担任美团平台技术部负责人，汇报至美团平台负责人李树斌。</p><hr><p>以下为全文：</p><p>为更好的实现「帮大家吃得更好，生活更好」的使命，落实「零售+科技」战略，一方面需要进一步提升科技支撑零售各业务的效能，助力各团队和合作伙伴卓越运营，提升客户体验；另一方面需要进一步加强自动车、无人机、AI 特别是大模型技术等领域的研发投入，在公司丰富的零售业务场景中积极探索新应用、新体验。经公司研究决定：</p><p>1、在技术委员会下成立技术治理筹备小组，由荣均、锦懋牵头筹备。锦懋卸任基础研发平台负责人，继续任技术委员会主席并负责技术委员会现有工作，汇报至王兴。技术治理筹备小组的目标是经过一段时间的筹备，明确后续公司技术治理的范围、目标、原则、组织保障和运作机制等，在公司坚定的决心、长期的耐心支持下，以循序渐进的节奏、稳扎稳打的方式，机制性的长期推进公司技术治理工作。</p><p>2、原美团平台技术部负责人韩建换岗担任基础研发平台负责人，汇报至王兴。</p><p>3、原快驴事业部产品和运营及技术负责人司天歌换岗担任美团平台技术部负责人，汇报至美团平台负责人李树斌。</p><p>过去几年，公司持续建设领导梯队，提升组织能力，鼓励、支持广大同学在前线和后线、区域和总部之间，不同职能、不同业务之间换岗，实现「Z 字型」发展，同时也在不同的角度为公司发展创造价值。期待锦懋、韩建、天歌在新的岗位上为公司长期发展贡献更大力量！</p><p>个人介绍：</p><p>张锦懋，2014 年 7 月加入公司，在公司多次换岗锻炼发展，历任技术工程部、美团平台及酒旅事业群/技术研发部、用户平台/算法与数据研发部、用户平台/大数据与算法部、基础研发平台负责人。锦懋担任多年技术委员会主席，具备优秀的技术判断、架构能力，对公司技术栈有全面深入的理解，在深潜、敢想、学习并好奇方面表现出色，相信未来能站在公司更高的层面贡献更大价值，帮助公司在技术治理工作上往前迈进。</p><p>韩建，2015 年 10 月加入公司，在公司多次换岗锻炼发展，历任外卖事业部/技术部、外卖事业部、到家研发平台、美团平台技术部负责人。韩建兼具业务和平台技术团队管理经验，技术视野广阔，具备主人翁精神，在力求正确、招聘并发展最佳人才方面有优秀的展现，相信在新岗位上能够更好支撑全公司的公共技术平台和服务。</p><p>司天歌，2016 年 12 月加入公司，在公司多次换岗锻炼发展，历任美团 App 技术部负责人、快驴技术部负责人、快驴产品与运营部负责人。天歌兼具平台和业务技术视角，具备主人翁精神，学习并好奇，极度关注客户并深潜，相信能在新岗位上更好的建设美团 App 技术基建，支撑各业务发展。</p><p>以上组织调整与任命自本公告发布之日起生效。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 07:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269428</guid>
            <link>https://www.oschina.net/news/269428</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mozilla 为 Firefox 发布 .deb 包，仅限开发者版和 Beta 版]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2023%2F12%2Fmozilla-firefox-beta-developer-edition-debs" target="_blank">根据 Mozilla 官方博客的公告</a></u>，Firefox 已针对开发者版和 Beta 版提供了 .deb 包。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-18def88ae61fbb45ba2844ceb061858ff05.png" referrerpolicy="no-referrer"></p></blockquote><p>Mozilla 介绍称，Firefox<code>.deb</code>软件包具有多种优势：</p><ul><li><p>因为 Mozilla 基于编译器进行了高级优化，所以 Firefox<code>.deb</code>具有更好的性能</p></li><li><p>及时收到最新的更新，因为&nbsp;<code>.deb</code>&nbsp;已集成到 Firefox 的发布流程中</p></li><li><p>经过增强的二进制文件，并在编译期间启用所有安全 flag</p></li><li><p>升级包后可以继续浏览，这意味着用户可以在方便时重新启动 Firefox 以获取最新版本</p></li></ul><p>要设置 APT 仓库并安装 Firefox&nbsp;<code>.deb</code>&nbsp;软件包，只需执行以下步骤：</p><pre><code># Create a directory to store APT repository keys if it doesn't exist:
sudo install -d -m 0755 /etc/apt/keyrings

# Import the Mozilla APT repository signing key:
wget -q https://packages.mozilla.org/apt/repo-signing-key.gpg -O- | sudo tee /etc/apt/keyrings/packages.mozilla.org.asc &gt; /dev/null

# The fingerprint should be 35BAA0B33E9EB396F59CA838C0BA5CE6DC6315A3
gpg -n -q --import --import-options import-show /etc/apt/keyrings/packages.mozilla.org.asc | awk '/pub/{getline; gsub(/^ +| +$/,""); print "\n"$0"\n"}'

# Next, add the Mozilla APT repository to your sources list:
echo "deb [signed-by=/etc/apt/keyrings/packages.mozilla.org.asc] https://packages.mozilla.org/apt mozilla main" | sudo tee -a /etc/apt/sources.list.d/mozilla.list &gt; /dev/null

# Update your package list and install the Firefox .deb package:</code></pre><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhacks.mozilla.org%2F2023%2F11%2Ffirefox-developer-edition-and-beta-try-out-mozillas-deb-package%2F" target="_blank">点此查看详情</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 07:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269427/firefox-beta-developer-edition-debs</guid>
            <link>https://www.oschina.net/news/269427/firefox-beta-developer-edition-debs</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kyuubi 发起人燕青成为 Apache Incubator PMC 成员]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span>网易杭州研究院、网易数帆大数据专家<span>燕青</span>再添新头衔，这一次，是 Apache Incubator PMC&nbsp;成员。</span></p><p><span>近日，Apache Incubator PMC（Apache 软件基金会孵化器项目管理委员会，简称 IPMC）宣布，接纳<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong><span style="--darkreader-inline-color:#3396ff; color:#0052ff">燕青（Kent Yao）</span></strong></span>为 Apache Incubator PMC 成员，参与对是否接纳项目进入 Apache 基金会孵化的表决。</span></p><p><span>Apache 软件基金会是全球顶尖的开源基金会，是超过 350 个开源项目和计划的全志愿开发者、管理者和孵化者。此次燕青通过投票成为 Apache Incubator PMC 成员，这意味着顶级社区对这位<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>网易开源先锋</strong></span>的认可，也证明了网易杭研、网易数帆团队推进开源实践的成果和<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>贯彻开源战略</strong></span>的决心。</span></p><p><span>在此之前，<span>燕青</span>在开源社区的角色，是 Apache Kyuubi PMC 主席 &amp; VP、Apache Spark 和 Apache Submarine 两个项目 Committer，并曾因其在 Spark 社区的杰出贡献被评为国内唯一的 Databricks 灯塔。</span></p><p><img height="276" src="https://oscimg.oschina.net/oscnet/up-1b6248e9a1e2e3a4c8abb24f22e8891821f.png" width="674" referrerpolicy="no-referrer"></p><p><span><span>燕青主要开源节点：</span></span></p><ul><li>2020 年 11 月，成为 Apache Submarine Committer</li><li>2021 年 02 月，成为 Apache Spark Committer</li><li>2021 年 06 月，将 NetEase/Kyuubi 捐赠给 Apache Software Foundation 孵化器进行孵化</li><li>2021 年 08 月，入选 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.databricks.com%2Fdiscover%2Fbeacons" rel="nofollow" target="_blank">Databricks Beacons Program</a></li><li>2021 年 10 月，获得网易技术奖（NetEase Technology Award）之开源贡献奖、自研开源奖以及共享共建奖</li><li>2022 年 02 月，创建的 Apache Kyuubi 项目入围中国科协 2021 「科创中国」开源创新榜</li><li>2022 年 05 月，创建的 Apache Kyuubi 加入中国信息通信研究院可信开源社区共同体</li><li>2022 年 09 月，创建的 Apache Kyuubi 获评中国信息通信研究院、中国通信标准化协会 2022 OSCAR 开源产业大会尖峰开源项目。</li><li>2022 年 06 月，获得美国计算机协会 The 2022 ACM SIGMOD Systems Award</li><li>2022 年 10 月，网易技术奖（NetEase Technology Award）之最佳技术评委奖</li><li>2022 年 12 月，Apache Kyuubi 项目成为 Top-level Project， 担任 PMC Chair/Vice President</li><li>2023 年 06 月，创建的 Apache Kyuubi 获中央网信办信息化发展局「2022 年中国开源创新大赛」二等奖</li><li>2023 年 09 月，中国信通院 2023 OSCAR 尖峰开源人物</li><li>2023 年 10 月，AI Code 训练营 - CodeMaker/Copilot 优秀案例</li><li>2023 年 10 月，获得网易技术奖（NetEase Technology Award）之社区贡献奖</li><li>2023 年 11 月，成为 Apache Incubator PMC 成员</li></ul><p><span><strong><span>铸就 SQL 网关标准，杭研技术成就数智新基</span></strong></span></p><p><span><span>燕青</span>从 2015 年第一次接触开源，持续贡献 Apache Spark 项目至今已<span>&nbsp;</span><strong><span style="--darkreader-inline-color:#3396ff; color:#0052ff">8 年</span></strong>，并围绕 Apache Spark 生态构建各类个人、公司及基金会开源项目。他发起的 Kyuubi 项目，已在 Apache 基金会孵化器成功毕业为顶级项目。</span></p><p><span>Kyuubi 起步于 Spark 生态，初心是为企业级数据湖探索提供标准化的接口。而随着 Lakehouse 和云原生成为现代数据栈两大核心主题，这个项目已迅速完成对 Flink、Trino、Doris 等主流计算引擎的支持，发展成为了<span>&nbsp;</span></span><span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>Serverless SQL on Lakehouse 的事实标准</strong></span><span>。</span></p><p style="--darkreader-inline-color:rgba(216, 212, 207, 0.6); color:rgba(232, 230, 227, 0.6); margin-left:0px; margin-right:0px; text-align:justify"><span>在数智化需求强劲并倒逼技术变革的今天，Kyuubi 进入了多家头部公有云厂商的产品路线图，成为了中国移动、携程、丁香园、小米、爱奇艺、广发证券、知乎等全球数百家公司数智创新的选择。这正是团队具备卓越的技术洞察与工程实践能力，并成功凝聚社区力量实现技术价值的体现。</span></p><p><span>对此，<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>开放原子开源基金会 TOC 主席谭中意</strong></span>曾有评价：</span></p><p style="margin-left:0; margin-right:0"><span>「Kyuubi 项目的立意很好，<strong><span style="--darkreader-inline-color:#3396ff; color:#0052ff">选中的技术痛点非常精准</span></strong>。现在又通过了 Apache 孵化毕业的考验，IP 问题得到很好的验证，社区健康和持久性也得到了很好的确认。」</span></p><p style="margin-left:0; margin-right:0"><span><strong><span>坚持社区驱动，杭研传递开源精神</span></strong></span></p><p style="--darkreader-inline-color:rgba(216, 212, 207, 0.6); color:rgba(232, 230, 227, 0.6); margin-left:0px; margin-right:0px; text-align:justify"><span>放弃控制权，捐赠给基金会，这是网易副总裁、网易杭州研究院执行院长、网易数帆总经理汪源在 2021 年对杭研旗下开源项目发展明确提出的一个基本策略，蕴含着对技术价值与开源本质的尊重。</span></p><p style="--darkreader-inline-color:rgba(216, 212, 207, 0.6); color:rgba(232, 230, 227, 0.6); margin-left:0px; margin-right:0px; text-align:justify"><span>而 Apache Kyuubi 从孵化到毕业的经历，使得<span>燕青</span>更加深刻地体会到了<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>Apache 之道（Apache Way）</strong></span>的价值，以及「Community over Code（社区胜于代码）」的内涵。正是社区驱动的选择，成就了 Kyuubi 在开放大数据架构中的生命力。</span></p><p><span>在公司开源战略的鼓励下，<span>燕青</span>在网易内部也积极推动同事参与开源，既倡导推进开源办公室（OSPO）成立，在集团内部推广开源经验，也加强生态联动，积极参与外部社区共建。</span></p><p><span>目前，<span>燕青</span>所在团队成员已广泛参与开源项目贡献，覆盖了 Apache Spark, Apache Hadoop, Apache Kyuubi, Apache Hive, Apache Iceberg, Apache Impala, Apache Kudu, Apache Ranger, Apache Zeppelin, Apache Submarine, Apache Celeborn (Incubating), Apache Toree (Incubating), Alluxio, ClickHouse, Gluten 等<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>数十个</strong></span>大数据生态项目。</span></p><p><span>连同燕青在内，团队成员在多个开源社区担任了关键角色，其中包括了<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>四位 Apache Kyuubi PMC 成员、两位 Apache Spark Committer、一位 Apache Celeborn (Incubating) &nbsp;PPMC 成员、两位 Gluten Committer</strong></span>。这也使得杭研成为国内<span style="--darkreader-inline-color:#3396ff; color:#0052ff"><strong>唯一一个拥有两位 Spark Committer 的团队</strong></span>。此外，Apache Celeborn (Incubating) 是阿里云团队发起的项目，在该社区担任 PPMC 成员，也践行了 Apache 孵化经验与精神的传承。</span></p><p><span>开源不辍，薪火相传。对于网易杭研而言，开源是一以贯之的事业，Apache Incubator PMC 也是弘扬技术价值、推动技术普惠的一个新起点。</span></p><div>
  &nbsp; 
</div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 06:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4565392/blog/10315637</guid>
            <link>https://my.oschina.net/u/4565392/blog/10315637</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周热点 | 龙芯宣布兼容 IE 的龙芯浏览器、发布龙芯 3A6000 桌面处理器；滴滴故障罪魁祸首是底层软件 or「降本增笑」......]]>
            </title>
            <description>
                <![CDATA[回顾一周热门资讯。2023.11.28-2023.12.03]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 06:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;tempkey=MTI0Nl9CSzNacnF3Rmg0aExsMXZ2WXBvSXc4WVVnQXlORDZrMDUzSEFNeHIyNjZTMi1PNnhuMTFFejl6Q1FkczJzRFp3cG1oLThfRjZnalp1NGtxZDZzYWdxRmhZanNLemQ4aWVCSzV6NWNNa05OYnpoMHhRZXNaNjB3R1dYRlZuZzI1U1RzeWdoZG1qWkFzZ0JwYkhta01ESTFudm4tclJidXhJUnVzQVVnfn4%3D&#38;chksm=880c4c94bf7bc582929bea57b7c2d9f8225ada40770176c0d8b2cd7326e8191d87cab94f3bc1&#38;token=723426295&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;tempkey=MTI0Nl9CSzNacnF3Rmg0aExsMXZ2WXBvSXc4WVVnQXlORDZrMDUzSEFNeHIyNjZTMi1PNnhuMTFFejl6Q1FkczJzRFp3cG1oLThfRjZnalp1NGtxZDZzYWdxRmhZanNLemQ4aWVCSzV6NWNNa05OYnpoMHhRZXNaNjB3R1dYRlZuZzI1U1RzeWdoZG1qWkFzZ0JwYkhta01ESTFudm4tclJidXhJUnVzQVVnfn4%3D&#38;chksm=880c4c94bf7bc582929bea57b7c2d9f8225ada40770176c0d8b2cd7326e8191d87cab94f3bc1&#38;token=723426295&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[未来软件行业的发展趋势]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4855753_2331437">高手问答第 310 期 —— 未来软件行业的发展趋势</a><div class="ui red label horizontal" data-tooltip="置顶">顶</div></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4855753" class="__user"><span>OSC 哒哒</span></a><span class="org-label org-label--simple primary" data-tooltip="认证官方账号"><i class="oicon oicon-org"></i></span> 发布于 11/28 14:26
                    </div><div class="item">阅读 2K+</div><div class="item collect-btn " data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331437" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4855753_2331437#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">15</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手问答</a></div><div class="content" id="articleContent"><p><span><span><span><span>今天的世界是运行在软件之上的。伟大的软件不是一朝一夕发明出来的，而是人类文明长期积累的结果。可以</span></span><span><span>说</span></span><span><span>，软件文明就是人类文明在电气化时代的延续。那么软件发展史上有哪些关键事件和不为人知的故事呢？</span></span></span></span></p><p><strong><span><span><span><span>OSCHINA 本期高手问答（11 月 29 日-12 月 5 日）我们一起探讨「软件发展史上那些不为人知的故事」，做客高手问答的嘉宾是新书《软件简史》的作者<a href="https://my.oschina.net/u/6992678" rel="nofollow">张银奎</a>老师。</span></span></span></span></strong></p><p><span style="background-color:#ffffff; color:#000000">可讨论的问题包括但不限于：</span></p><ul><li><span><span><span><span>世界上第一个计算机程序是怎么诞生的？</span></span></span></span></li><li><span><span><span><span>两位现代计算机之父图灵与冯·诺依曼有哪些交集和故事？</span></span></span></span></li><li><span><span><span><span>古老的提花织布机与计算机之间有什么渊源？</span></span></span></span></li><li><span><span><span><span>在 ENIAC 出现之前，还有更早的计算机吗？</span></span></span></span></li><li><span><span><span><span>最早的内存采用的是什么技术？</span></span></span></span></li></ul><p><span><span><span><span>有其他相关的问题，也欢迎提问。</span></span></span></span></p><hr><h2>嘉宾介绍</h2><p><span><span><strong><span><span><strong>张银奎</strong></span></span></strong><span><span>&nbsp;，国内知名的调试技术专家。毕业于上海交通大学信息与控制工程系，长期从事软件开发和研究工作，曾在英特尔工作 13 年，对 IA-32 架构、操作系统内核、驱动程序，尤其是对软件调试有较深入的研究。著有畅销书《软件调试》《格蠹汇编》等，格蠹科技（nanocode.cn）创始人，高端调试网站（advdbg.org）创建者。翻译（合译）作品有《二十一世纪机器人》《观止——微软创建 NT 和未来的夺命狂奔》《数据挖掘原理》《机器学习》《人工智能：复杂问题求解的结构和策略》等。</span></span></span></span></p><p><span><span><span><span><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-6c20792bfc000c6d2385b84b080ce1a071b.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>为鼓励踊跃提问，我们会在问答结束后从提问者中抽取 3 名幸运会员赠予《</span></span><span><span>软件简史</span></span><span><span>》（上下册）。</span></span></span></span></p><p><span><span><span><span><img alt="" height="328" src="https://oscimg.oschina.net/oscnet/up-4b1d01a7d62014760f9f4ba80aa1440ef55.png" width="250" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>《</span></span><span><span>软件简史</span></span><span><span>》天猫有售：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdetail.tmall.com%2Fitem.htm%3Fid%3D750806496720" rel="nofollow" target="_blank"><span><span>https://detail.tmall.com/item.htm?id=750806496720</span></span></a></span></span></p><p><span style="color:#27ae60">OSChina 高手问答一贯的风格，不欢迎任何与主题无关的讨论和喷子。</span></p><p><span><span><span><span>下面欢迎大家向 <a href="https://my.oschina.net/u/6992678" rel="nofollow">张银奎</a> 老师积极提问，直接回帖提问即可。</span></span></span></span></p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331437" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331437" data-obj-type="2" data-url="https://www.oschina.net/question/4855753_2331437"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 05:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4855753_2331437</guid>
            <link>https://www.oschina.net/question/4855753_2331437</link>
        </item>
        <item>
            <title>
                <![CDATA[What's new in Pika v3.5.2]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Pika 社区近期发布了备受期待的 v3.5.2 版本 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Freleases%2Ftag%2Fv3.5.2-alpha" target="_blank">https://github.com/OpenAtomFoundation/pika/releases/tag/v3.5.2-alpha</a> ，不仅解决了历史遗留的 Bug 问题，还引入了多项新特性。这些新特性主要包括 Pika 支持 Redis 事务、Pika 上层增加缓存层实现冷热数据分离、提升读性能、Codis-Proxy 支持动态修改配置参数等等，无疑将会让用户感受到更为高效和稳定的使用体验。</p><h1>1 新特性</h1><ul><li>Pika 支持 Redis 事务，使得 Pika 的数据够在一系列命令的执行中保持数据的一致性和可靠性 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2124" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2124</a></li><li>Pika 上层增加缓存层实现冷热数据分离，提升读性能 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2171" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2171</a></li><li>Codis-Proxy 支持动态修改配置参数，方便我们做参数调整 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2110" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2110</a></li><li>补全 Go Test 测试用例 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2082" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2082</a></li><li>CI 增加 cache 提升编译速度 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2093" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2093</a></li><li>增加 redis-copy 流量复制工具 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2060" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2060</a></li></ul><h1>2 bugfix</h1><ul><li>修复 pika 在使用 SETRANGE 命令出现 coredump 的问题 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2141" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2141</a></li><li>修复因删除 Clearreplicationid 写进 binlog 导致的全量复制问题 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2135" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2135</a></li><li>修改锁粒度，提升 pika 写 binlog 的性能 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2129" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2129</a></li><li>修复复杂数据类型成员变量可能出现数据溢出 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2106" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2106</a></li><li>修复 decr 命令返回值错误问题 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2092" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2092</a></li><li>修复 setrange 和 setbit 命令没有保留原 key 的过期时间的问题 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2095" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2095</a></li></ul><h1>3 下期版本规划</h1><p>预计再过两个月左右，我们会在农历新年前发布 3.5.3 版本，相关关键特性有：</p><ul><li>Pika 通过快慢命令分离提升读写性能 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2162" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2162</a></li><li>Redis ACL，在 Pika 中引入用户概念，进行权限控制 <a href="ttps://github.com/OpenAtomFoundation/pika/pull/2013">ttps://github.com/OpenAtomFoundation/pika/pull/2013</a></li><li>Redis Stream，实现消息队列 <a href="ttps://github.com/OpenAtomFoundation/pika/pull/1955">ttps://github.com/OpenAtomFoundation/pika/pull/1955</a></li><li>Pika 特有命令 compactrange，对指定范围内的 key 进行 compact，以解决大 key 删除时读放大的问题 <a href="ttps://github.com/OpenAtomFoundation/pika/pull/2163">ttps://github.com/OpenAtomFoundation/pika/pull/2163</a></li><li>支持 lastsave 指令 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2167" target="_blank">https://github.com/OpenAtomFoundation/pika/pull/2167</a></li></ul><h1>4 致谢</h1><p>向社区的贡献者们致谢。</p><p>感谢大家对 Pika 开源公众号的关注 ，Pika 3.5 版本重大特性及使用规范我们会在稍后的文章中进行介绍，我们下期再见～</p><p><img src="https://oscimg.oschina.net/oscnet/up-f677324a0514b825ee87bd8ebb692130955.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 05:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/dubbogo/blog/10315913</guid>
            <link>https://my.oschina.net/dubbogo/blog/10315913</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kotlin 中文开发者大会 2023]]>
            </title>
            <description>
                <![CDATA[Kotlin 中文开发者大会 2023]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/event/2331466</guid>
            <link>https://www.oschina.net/event/2331466</link>
        </item>
        <item>
            <title>
                <![CDATA[Node.js v18.19.0 (LTS) 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Node.js v18.19.0 已发布，代号 'Hydrogen'。Node v18.19.0 是一个长期支持版本 (LTS)，这意味着它将获得更长的支持和维护。LTS 版本通常更加稳定和可靠，适合用于生产环境。</p><p><strong>主要变化</strong></p><ul><li><strong>将 npm 升级到 v10</strong></li></ul><p>在 Node.js 20 中经过两个月的试用后，npm 10 已被向后移植，以便所有发行版都包含受支持的 npm 版本。Node.js v18.19 已将 npm 工具更新到 v10.2.3 版本。</p><ul><li><strong>改进 ESM（ECMAScript 模块）和自定义钩子</strong></li><li>引入了新的<code>node:module</code>API：<code>register</code>，用于模块自定义钩子的注册和通信</li></ul><p>Node v18.19.0 还包含了一些与 ESM 相关的变化，如<code>import.meta.resolve</code>方法的取消标记，以及<code>--experimental-default-type</code>flag 用于切换模块系统的默认设置。</p><p>此外，Node v18.19.0 还包含了对内置测试运行器的许多改进和新增功能，以及其他一些值得注意的变化，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnodejs.org%2Fen%2Fblog%2Frelease%2Fv18.19.0" target="_blank">详情查看发布公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269377/nodejs-v18-19-0-lts</guid>
            <link>https://www.oschina.net/news/269377/nodejs-v18-19-0-lts</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apache NetBeans 20.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Apache NetBeans 20<span>&nbsp;现</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnetbeans.apache.org%2Ffront%2Fmain%2Fblogs%2Fentry%2Fannounce-apache-netbeans-20-released%2F" target="_blank">已正式发布</a>。NetBeans 是一个主要面向 Java 的集成开发环境，同时支持 C/C++、PHP、JavaScript 和其他编程语言。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">一些更新内容包括：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Gradle</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>返回所有 loaders 的最高质量&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6371" target="_blank">#6371</a></li><li>将 Gradle Tooling API 更新到 8.4&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6553" target="_blank">#6553</a></li><li>不要在每个项目上都要求代理&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6558" target="_blank">#6558</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6536" target="_blank">#6536</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6537" target="_blank">#6537</a>：避免堆栈溢出，捕获要下载的丢失工件&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6548" target="_blank">#6548</a></li><li>删除了一些已失效的 Gradle 设置&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6516" target="_blank">#6516</a></li><li>修复 wrapper.properties 中的 Gradle 版本更改&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6589" target="_blank">#6589</a></li><li>尝试在退出时关闭 Gradle 守护进程&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6598" target="_blank">#6598</a></li><li>当缺少「run」任务时，对「runSingle」更加友好&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6618" target="_blank">#6618</a></li><li>修复 LSP/Micronaut 测试 + 不要忽略 gradle spi 中的异常&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6673" target="_blank">#6673</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Maven</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>Maven Embedder resolve() 修复&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6344" target="_blank">#6344</a></li><li>Micronaut 的生命周期参与者在 Micronaut 4.x 中更改了 FQN&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6386" target="_blank">#6386</a></li><li>当 pom.xml 包含...时，防止在 Maven 内启用 NPE 预览&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6446" target="_blank">#6446</a></li><li>NB 模块项目向导不应使用快照版本&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6483" target="_blank">#6483</a></li><li>UpdateDependencyHint 应该适用于具有默认 Maven 组 id 的插件&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6493" target="_blank">#6493</a></li><li>更新到 maven-indexer 7.0.4 和 lucene 9.8.0 在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6506" target="_blank">#6506</a></li><li>将 maven.embedder 中的 JDOM 库从版本 1.0 升级到 2.0.6.1&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6478" target="_blank">#6478</a></li><li>在 main action 之前使用依赖项进行构建&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6520" target="_blank">#6520</a></li><li>将捆绑的 Maven 更新到 3.9.5&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6533" target="_blank">#6533</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6525" target="_blank">#6525</a>&nbsp;: maven 执行应该在运行 Maven 之前设置 LegacySupport&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6552" target="_blank">#6552</a></li><li>Priming build 和 reload 改进&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6514" target="_blank">#6514</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Ant</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>修复了 JDK 21 上的「error starting modern compiler」问题&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6436" target="_blank">#6436</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Java</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>升级到 JDK 21 nb-java&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6206" target="_blank">#6206</a></li><li>修改代码完成以支持 JDK 21 功能&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6253" target="_blank">#6253</a></li><li>在 VS Code 扩展中支持源文件启动器&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6262" target="_blank">#6262</a></li><li>不要将测试方法标记为未使用&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6277" target="_blank">#6277</a></li><li>添加 nb-javac libwrapper 测试&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6308" target="_blank">#6308</a></li><li>修复：如果前一个参数是 TypeVariable，则不会显示 Java 完成参数工具提示&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6268" target="_blank">#6268</a></li><li>处理注释处理器初始化中的错误&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6422" target="_blank">#6422</a></li><li>将 nb-javac 更新为 jdk-21u&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6425" target="_blank">#6425</a></li><li>用于加载注释处理器的类加载器不会从 getResource/getResources 方法返回目录，而正常的类加载器会返回目录 - 已修复&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6466" target="_blank">#6466</a></li><li>LPS：SignatureHelp implemented&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6476" target="_blank">#6476</a></li><li>Micronaut：添加缺失的路径变量参数修复&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6498" target="_blank">#6498</a></li><li>添加对字符串模板的支持&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6415" target="_blank">#6415</a></li><li>CI：启用 java.editor.base 测试&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6543" target="_blank">#6543</a></li><li>删除 <span style="background-color:#ffffff; color:#1f2328">TreeShims mechanism&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6495" target="_blank">#6495</a></li><li>......</li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>PHP</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>PHP：改进了创建 line breakpoint 时的验证&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6241" target="_blank">#6241</a></li><li>修复了 php 项目测试设置中复选框之间的间隙&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6381" target="_blank">#6381</a></li><li>当 IntroduceSuggestionHint 生成代码时防止 NPE&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6269" target="_blank">#6269</a></li><li>修复标记为已弃用的键入字段不会显示为已弃用的问题&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6310" target="_blank">#6310</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6321" target="_blank">#6321</a></li><li>如果可能的话，保留现有的使用类型种类（类型、函数、常量）的顺序&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6274" target="_blank">#6274</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6322" target="_blank">#6322</a></li><li>修复单行 var doc 字段的代码自动补全&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6359" target="_blank">#6359</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6364" target="_blank">#6364</a></li><li>PHP：添加了对异常断点的支持&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6366" target="_blank">#6366</a></li><li>修复错误<code>IncorectNamedArgumentHintError</code>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F6432" target="_blank">#6432</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6437" target="_blank">#6437</a></li><li>将「After Use Trait」添加到格式选项&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fissues%2F4685" target="_blank">#4685</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6467" target="_blank">#6467</a></li><li>PHP：修复了 php 代码补全设置中的元素定位&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6512" target="_blank">#6512</a></li><li>PHP：修复添加异常断点时异常类的自动完成&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6643" target="_blank">#6643</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>C/C++</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>Stabilize CPPLite：丢弃 STDERR&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Fpull%2F6305" target="_blank">#6305</a></li></ul><p><span style="background-color:#ffffff; color:#333333">详情可查看更新说明：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fnetbeans%2Freleases%2Ftag%2F20" target="_blank">https://github.com/apache/netbeans/releases/tag/20</a></p><p>下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnetbeans.apache.org%2Ffront%2Fmain%2Fdownload%2Fnb20%2F" target="_blank">https://netbeans.apache.org/front/main/download/nb20/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 03:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269376/apache-netbeans-20-released</guid>
            <link>https://www.oschina.net/news/269376/apache-netbeans-20-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[社区月报丨 11 月，deepin 推出了很多新东西]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px">内容来源 ：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社区</a></p><hr><h1><strong>deepin（深度）社区 11 月总览</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>11 月，有</span><span>&nbsp;1084</span><span>位小伙伴加入了 deepin 开源社区大家庭，目前共有论坛伙伴</span><span>148,891</span><span>位</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>11 月 deepin 系统版本共升级</span><span>4</span><span>次，修复 bug 共</span><span>13</span><span>个，功能新增</span><span>19</span><span>个</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>在 11 月，FVP 正式支持 deepin V23 ，deepin V23 成功适配国产显卡摩尔线程 MTT S80</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>11 月 deepin SIG 组共提交 PR<span>&nbsp;</span></span><span>1828</span><span><span>&nbsp;</span>个 ，提交 Issues<span>&nbsp;</span></span><span>210</span><span>个，个人贡献 PR</span><span>316 个</span><span>，个人提交 Issues</span><span>16</span><span>个</span></p><h1><strong>社区产品</strong></h1><h2><strong><span>deepin（深度）操作系统</span></strong></h2><p style="color:#333333; margin-left:0; margin-right:0"><strong>11 月 deepin V23&nbsp; 系统前进行了第 4 次内测推送：</strong></p><ul><li><span>11 月 3 日内测推送，功能新增 4 个，新增仓库 3 个，问题修复 6 个；</span></li><li><span>11 月 10 日内测推送，新增仓库 6 个，问题修复 8 个；</span></li><li><span>11 月 17 日内测推送，功能及优化功能 4 个，问题修复 1 个；</span></li><li><span>11 月 24 日内测推送，功能新增 1 个，新增仓库 2 个，问题修复 4 个</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0"><strong><span>FVP 正式支持 deepin V23</span></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>FVP 是由 ARM 公司开发的，它更准确地模拟了 ARM 的微架构和安全扩展，而且可以支持最新的 ARM 指令集和功能。现在 deepin V23 对 FVP 进行适配，已经可以成功使用 deepin V23 系统运行 FVP 环境，并且在上面模拟 deepin V23。</span></p><p style="color:#333333; margin-left:0; margin-right:0"><strong><span>deepin V23 成功适配摩尔线程 MTT S80</span></strong></p><p style="color:#333333; margin-left:0; margin-right:0"><span>摩尔线程 MTT S80 显卡，于 2022 年 11 月发布，搭载了完整的「春晓」芯片核心，内置 4096 个 MUSA 流处理核心、128 个 Tensor 张量核心，在 1.8GHz 的主频下，能够提供 14.4TFLOPS 的单精度浮点算力。deepin 面向 MTT S80 的体验版镜像已经推出，可以下载试用。MTT S80 显卡驱动在 deepin V23 Beta2 操作系统上运行稳定，能够达到主流 Linux 平台显卡水平。</span></p><h2><strong>SIG 组 11 月进展</strong></h2><ol><li><strong>DDE:&nbsp;</strong></li></ol><ul><li><span>新增&nbsp;dde-shell&nbsp;组件，完善&nbsp;DDE&nbsp;组件，并向内测推送部分与&nbsp;DDE&nbsp;相关的技术预览更新</span></li></ul><ol><li><strong>DDE-port:&nbsp;</strong></li></ol><ul><li><span>持续完善&nbsp;Arch Linux&nbsp;与&nbsp;openSUSE&nbsp;等发行版的移植工作</span></li></ul><ol><li><strong>deepin-ports:&nbsp;</strong></li></ol><ul><li><span>促进改善&nbsp;RISC-V&nbsp;与&nbsp;Loong&nbsp;架构的支持程度</span></li></ul><ol><li><strong>deepin-sysdev-team:&nbsp;</strong></li></ol><ul><li><span>更新&nbsp;Qt&nbsp;以及其它多批系统核心软件包版本</span></li></ul><ol><li><strong>deepin-cicd-team:&nbsp;</strong></li></ol><ul><li><span>&nbsp;prow&nbsp;新增&nbsp;topic&nbsp;仓库相关命令支持，持续完善自动化流水线的智能程度</span></li></ul><ol><li><strong>deepin-shared-libs：</strong></li></ol><ul><li><span>持续降低使用门槛，新增 examples 并添加指导文章"如何结合"deepin-shared-libs"和"ShiroDEB"进行编译 (OBS-Studio)"</span></li><li><span>加强跨社区合作，开始向 shiroDEB 贡献构建脚本&amp;bBnary 资源</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0"><span>更多 SIG 动态欢迎关注：</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fplanet.deepin.org%2F" target="_blank"><span>planet.deepin.org</span></a></p><h2><strong>应用商店</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>应用上新</strong><span>279</span><strong>款</strong><span>：其中，189 款应用上新至 deepin V23，上新的 278 款应用均为 Linux 应用，1 款为浏览器扩展程序</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>其中，包括浩辰 CAD（Linux 版）V2023 以及多款城市、主题大赛精美壁纸与主题；</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>应用更新 185 款</strong><span>：其中包含 121 款应用同步在 deepin V23 中进行了更新。更新的应用中，180 款为 Linux 应用，Android 应用 3 款，wine 应用 2 款。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>11 月更新的应用中包括 QQ、中望 CAD、企业微信、有道云笔记等主流应用。</span></p><h1><strong>deepin 论坛</strong></h1><p style="color:#333333; margin-left:0; margin-right:0"><span>11 月论坛共发布了</span><strong>9078</strong><span>帖子，</span><span>共发布主题帖</span><strong>1274</strong><span>个，</span><span>超过</span><strong>1000+</strong><span>新朋友加入到 deepin 论坛。</span></p><p style="color:#333333; margin-left:0; margin-right:0"><strong>当中，最受论坛用户欢迎的帖子 top5 为：</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>1.</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F264232" target="_blank">我对 deepin 的一些建议</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>2.</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F264520" target="_blank">11 月 17 日 deepin V23 Beta 阶段性内测更新&nbsp;</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>3.</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F264502" target="_blank">恳请开发人员增加一些默认快捷键。</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>4.</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F264236" target="_blank">【新鲜出炉】deepin V23 Beta3 版本规划</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>5.</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F264678" target="_blank">deepin V23 成功适配国产显卡摩尔线程 MTT S80！</a></p><h1><strong>社区活动</strong></h1><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2F2023-dduc%2F" target="_blank"><strong><span>【第十三届 DDUC】</span></strong></a></h2><p style="color:#333333; margin-left:0; margin-right:0"><span>2023 年 11 月 18 日，第十三届深度开发者与用户大会（DDUC）在北京成功召开。作为 deepin（深度）社区一年一度最盛大的社区活动，DDUC 吸引了来自全球各地的开源爱好者、行业精英与用户们齐聚一堂，共同探讨 deepin（深度）操作系统、AI 等相关技术领域的最新发展和应用前景。</span></p><p style="text-align:center"><img height="652" src="https://oscimg.oschina.net/oscnet/up-373432e3585303dd8857d9fc56fac02a309.png" width="992" referrerpolicy="no-referrer"></p><h2><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2F2023-11-whlug%2F" target="_blank"><span>【11 月 WHLUG】</span></a></strong></h2><p style="color:#333333; margin-left:0; margin-right:0"><span>2023 年 11 月 26 日下午，由&nbsp;deepin（深度）&nbsp;社区主办的武汉&nbsp;Linux&nbsp;用户组（WHLUG）沙龙在新青年创客咖啡举行，沙龙邀请了武汉地区的&nbsp;Linux&nbsp;爱好者，共同探讨&nbsp;Linux&nbsp;内核安全架构、软件包构建方案等话题，现场气氛热烈。</span></p><p style="text-align:center"><img height="731" src="https://oscimg.oschina.net/oscnet/up-973f34559c61d7176d995d6a32511015e4e.png" width="991" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0">什么是 WHLUG：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwelcome-to-whlug%2F" target="_blank">https://www.deepin.org/zh/welcome-to-whlug/</a></p><p style="color:#333333; margin-left:0; margin-right:0"><span>查看往期 WHLUG：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-whlug%2F" target="_blank">https://www.deepin.org/zh/deepin-whlug/</a></p><h2><strong><span>【无限主题壁纸大赛】</span></strong></h2><p style="color:#333333; margin-left:0; margin-right:0"><span>11 月，由 deepin（深度）社区主办的题为「无限」的主题壁纸创作大赛已经圆满落幕，活动共计收到来自百余位设计师提交的 1087 份参赛作品，总计近 2000 幅壁纸。 活动最终评选出 48 个获奖作品，包括 3 个原创主题设计奖及 45 个壁纸创作奖。目前大部分获奖作品已经上架 deepin 应用商店，可以在</span><strong>商店&lt;个性美化&gt;分类中查看并快速下载设置为桌面壁纸</strong><span>。此外，本次 deepin 社区的主题壁纸创作大赛还吸引了全国 16 所院校的师生加入，贡献了近千份参赛作品。</span></p><p style="text-align:center"><img height="332" src="https://oscimg.oschina.net/oscnet/up-efc0ba8e855b13f2d9f9b94249a5c884b86.png" width="596" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><span>壁纸设计金奖：飞天&nbsp; &nbsp; &nbsp; &nbsp;</span>设计师：木子 leerin</p><h1><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-campus-alliance%2F" target="_blank"><strong>校园联盟</strong></a></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>为让中国更多高校学生走近开源、了解开源，同时培养行业人才共建开源社区，deepin 社区于 8 月开启校园联盟招募，截至目前已有来自全国各地 126 所高校加入。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>截至 2023 年 11 月，来自全国的校园联盟同学共组织线下校园活动 19 场，11 月围绕校园联盟开展线下活动 8 场，累计参与学生 400+。</span></p><p style="color:#333333; margin-left:0; margin-right:0"><span>其中包括河北师范大学附属民族学院，吉林城市学院，西南大学，浙江工业大学、安阳学院，东北电力大学等。</span></p><h1><strong>社区鸣谢</strong></h1><p style="color:#333333; margin-left:0; margin-right:0"><strong>【论坛最活跃小伙伴】</strong></p><ul><li><span>阿尼樱奈奈</span></li><li><span>buyike</span></li><li><span>fax928</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0"><strong>【内测最活跃小伙伴】</strong></p><ul><li><span>hotime</span></li><li><span>yaoying</span></li><li><span>花雨落逝</span></li><li><span>wlly-lz</span>h</li><li><span>刘定</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0"><strong>【PR 贡献最活跃小伙伴】</strong></p><ul><li><span>xwqlikepsl</span></li><li><span>student-ice</span></li><li><span>TheThreeDog</span></li><li><span>hillwoodroc</span></li><li><span>hotime</span></li><li><span>kt286</span></li><li><span>LLLLSHANG</span></li><li><span>benqin66</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:right">内容来源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社区</a></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269367</guid>
            <link>https://www.oschina.net/news/269367</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[进一步优化 deepin（深度）操作系统的续航和性能 —— TLP 电源管理来了！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:start">内容来源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社区</a></p><hr><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:start">上一篇关于电源配置优化（<a href="https://www.oschina.net/news/268783" target="_blank">关于 deepin V23 的发热、续航问题，我们做了电源配置优化</a>）之后，我们一直在探索如何进一步优化 deepin（深度）操作系统的续航和性能表现，今天它来了：</p><p>TLP 是适用于 Linux 的功能丰富的命令行实用程序，无需深入研究技术细节即可节省笔记本电脑电池电量。比如&nbsp;TLP&nbsp;脚本是被动唤醒，可以以较小的开销完成电源管理相关内容。而且 TLP 文档支持非常完善，所以可以方便用户自行调整相关配置。</p><h2><span><strong>工作原理</strong></span></h2><ul><li>TLP 所做的是调整影响功耗的内核设置，内核态的配置文件存储在 RAM 中，所以并不具备持久性。TLP 将配置存储在用户态中，在内核启动时对其进行配置；</li><li>TLP 处理的大多数内核设置都作为 sysfs 节点导出到用户空间，即 /sys/ 下的文件。tlp-<span>stat</span>的输出将显示路径；</li><li>TLP 提供两组独立的设置，称为配置文件，一组用于电池（BAT），另一组用于交流操作。这意味着 TLP 在每次电源更改时都必须应用适当的配置文件（可以据此实现 AC BT 切换电源调度状态）。</li></ul><h2><span><strong>TLP 触发事件（信号）</strong></span></h2><ul><li><p>充电器插入（交流供电）：应用 AC 配置文件；</p></li><li><p>充电器已拔下（电池供电）：应用 BAT 配置文件；</p></li><li><p>已插入 USB 设备：激活设备的 USB 自动挂起模式（可以在配置文件设置例外或拒绝连接）；</p></li><li><p>系统启动（boot）：应用于当前电源 AC/BAT 相对应的设置配置文件。应用充电阈值并根据您的个人设置切换蓝牙、Wi-Fi 和 WWAN 设备（在默认配置中禁用）；</p></li><li><p>系统关机 (power off)：保存或切换蓝牙、Wi-Fi 和 WWAN 设备状态，并根据你的个人设置禁用 USB 自动挂起（在默认配置中禁用）；</p></li><li><p>系统重启：相当于关机再启动；</p></li><li><p>系统挂起到 ACPI 睡眠状态 S0ix（空闲待机）、S3（挂起到 RAM）或 S4（挂起到磁盘）：保存蓝牙、Wi-Fi 和 WWAN 设备状态，并根据你的个人设置关闭可移动光盘驱动器的电源（在默认配置中禁用）；</p></li><li><p>系统从 ACPI 睡眠状态 S0ix（空闲待机）、S3（挂起到 RAM）或 S4（挂起到磁盘）恢复：应用于当前电源 AC/BAT 相对应的设置配置文件。恢复充电阈值以及蓝牙、Wi-Fi 和 WWAN 设备状态，具体取决于你的个人设置（在默认配置中禁用）；</p></li><li>LAN、Wi-Fi、WWAN 连接/断开连接或笔记本电脑插接/未插接：根据你的个人设置启用或禁用内置蓝牙、Wi-Fi 和 WWAN 设备（在默认配置中禁用）。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>除了上述事件之外，TLP 不会对设置进行动态或自适应更改。特别是，TLP 绝不会因 CPU 负载、电池电量或其他原因而调整设置（如果需要实现这一部分，则可以通过添加一个信号的方式来实现）。</span></p><h2><strong>安装</strong></h2><pre><code>sudo&nbsp;apt install tlp</code></pre><h2><span><strong>使用</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>1、启动</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">安装后 TLP 将在系统启动的时候自动启动，如果你不想重启系统，可以使用<span>&nbsp;</span><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp start&nbsp;</span></em>来启动&nbsp;TLP，也可以使用此命令来应用更改。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>2、状态</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff">tlp-<span>stat</span><span>&nbsp;</span>-<span>s</span><span>&nbsp;</span>TLP</span></em><span>&nbsp;</span>是 bash 脚本，所以不存于 daemon 进程。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>3、命令行</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>TLP：</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp bat</span></em>&nbsp; &nbsp; # 应用电池配置文件并进入手动模式 &nbsp;手动模式意味着对电源的更改将被忽略，直到下一次重新启动或发出 tlp start 以恢复自动模式。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp bat&nbsp;</span></em><span>&nbsp;</span>&nbsp; # 应用电池配置文件并进入手动模式 &nbsp;手动模式意味着对电源的更改将被忽略，直到下一次重新启动或发出 tlp start 以恢复自动模式。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp ac</span></em>&nbsp; &nbsp; &nbsp;# 应用交流配置文件并进入手动模式。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp usb</span></em>&nbsp; &nbsp; # 对所有的 ubs 设备应用自动挂起。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp bayoff</span></em>&nbsp; &nbsp; # 关闭 MediaBay/Ultrabay 中的光驱电源。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff">sudo tlp setcharge [<span>&lt;<span>START_CHARGE_THRESH</span>&gt;</span><span>&nbsp;</span><span>&lt;<span>STOP_CHARGE_THRESH</span>&gt;</span>][BAT0|BAT1|BAT&lt;x&gt;|CMB0|CMB1]&nbsp;</span></em><span>&nbsp;</span>&nbsp; &nbsp;#可以设定对指定电池开始充电百分比和结束充电的百分比，以达到养护电池的目的（如果不带参数会重置电池管理方案。命令只能暂时更改，如果需要持久化更改需要修改配置文件）。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff">sudo tlp fullcharge [BAT0|BAT1|BAT&lt;x&gt;|<span>CMB0</span>|<span>CMB1</span>]&nbsp;</span></em><span>&nbsp;</span>&nbsp; # 设定电池充满。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff">tlp</span><span style="color:#0000ff"><span>&nbsp;</span>dis</span><span style="color:#0000ff">kid</span></em>&nbsp; &nbsp; # 显示已经配置驱动器的磁盘 ID。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">以下部分为 ThinkPad 专属：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp chargeonce</span></em><span><em><span style="color:#0000ff"><span>&nbsp;</span>[BAT0|BAT1]&nbsp;</span><span>&nbsp;</span></em>&nbsp; #<span>&nbsp;</span></span>将电池充电至停止充电阈值一次，这个阈值是使用 setcharge 设置的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span><span>tlp</span><span>&nbsp;</span><span>discharge</span><span>&nbsp;</span><span>[BAT0|BAT1]</span>&nbsp; &nbsp;</span><span>&nbsp;</span></em>&nbsp; # 让电池在交流电源下完全放电。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span><span>tlp</span><span>&nbsp;</span><span>recalibrate</span><span>&nbsp;</span><span>[BAT0|BAT1]</span>&nbsp; &nbsp;</span><span>&nbsp;</span></em>&nbsp; # 校准电池。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>TLP-RDW</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#0000ff"><em>sudo tlp-rdw [</em><span>&nbsp;</span><span>enable</span><span>&nbsp;</span>|<span>&nbsp;</span><span>disable</span><span>&nbsp;</span>]&nbsp;</span><span>&nbsp;</span>&nbsp; &nbsp; # 启用或关闭无线电管理功能</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff">bluetooth [ on | off | toggle ]</span></em><br><em><span style="color:#0000ff">nfc [ on | off | toggle ]</span></em><br><em><span style="color:#0000ff">wifi [ on | off | toggle ]</span></em><br><em><span style="color:#0000ff">wwan [ on | off | toggle ]</span></em></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">启用、禁用、切换或检查内置蓝牙、NFC、Wi-Fi 和 WWAN（3G/UMTS、4G/LTE 或 5G）无线电的状态，如果不带参数则为当前硬件状态（硬件需要支持 rfkill）。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>TLP-STAT</strong></p><p><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp-stat&nbsp;</span></em><span>&nbsp;</span>&nbsp; # 查看 TLP 配置信息，系统信息和内核省电设置以及电池数据。</p><p><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span><span>tlp-stat</span><span>&nbsp;</span><span>[-b /--battery]</span>&nbsp;</span><span>&nbsp;</span></em>&nbsp; &nbsp; # 查看电池信息，部分电池加-v 参数可以查看电压。</p><p><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp-stat<span><span>&nbsp;</span>[-c /--config]</span>&nbsp;</span></em><span>&nbsp;</span>&nbsp; &nbsp; &nbsp;# 查看配置信息。</p><p><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span>tlp-stat --cdiff&nbsp;</span><span>&nbsp;</span></em>&nbsp; &nbsp; &nbsp; &nbsp; # 查看默认配置和用户配置之间的差异。</p><p><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span><span>tlp-stat</span><span>&nbsp;</span><span>[-d /--disk]</span>&nbsp; &nbsp; &nbsp;</span></em><span>&nbsp;</span>&nbsp; &nbsp;# 查看硬盘配置信息。</p><p><em><span style="color:#0000ff"><span>sudo</span><span>&nbsp;</span><span>tlp-stat</span><span>&nbsp;</span><span>[-e/ --pcie]</span>&nbsp;</span><span>&nbsp;</span></em>&nbsp; &nbsp; &nbsp; &nbsp;# 查看 Pcie 配置信息。&nbsp;</p><h2><span><strong>配置</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">TLP 最重要的就是其配置文件，可以说，TLP 是否节电的关键。TLP 使用两个根据电源自动应用的设置配置文件：</p><ul><li>以_AC 结尾的参数在连接交流电源的时候生效</li><li>以_BAT 结尾的参数在使用电池的时候有效</li><li>既不以 &nbsp;_AC &nbsp;结尾也不以 _BAT 结尾的参数适用于这两个配置文件</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>1、配置文件</strong></p><p>按指定顺序从以下文件中读取设置：</p><ul><li><p><em><span style="color:#0000ff">Intrinsic defaults&nbsp;</span><span>&nbsp;</span></em>&nbsp; &nbsp;# 固有默认值（这个配置为 TLP 自带，不可被更改）；</p></li><li><p><em><span style="color:#0000ff">/etc/tlp.d/*.conf&nbsp; &nbsp;</span></em><span>&nbsp;</span>&nbsp;# 插入式自定义片段，按词法（字母顺序）顺序读取，不过建议可以使用一般配置命名方法（00_xxxx.conf)；</p></li><li><em><span style="color:#0000ff">/etc/tlp.d/*.conf&nbsp;</span></em><span>&nbsp;</span>&nbsp; &nbsp;# 用户配置。</li></ul><p>如果多个参数相同，但在同一文件中也存在相同的参数，则最后一个匹配项优先，这也意味着，/etc/tlp.conf 中的参数将覆盖其他任何内容，因为它是最后读取的。</p><p>默认的&nbsp;/etc/tlp.conf 中的所有参数都被禁用，删除前导 # 以激活你的更改。</p><p>/etc/tlp.d/ 目录中的配置文件由用户创建：</p><p>* 文件名必须以 .conf 结尾，否则文件将被忽略；</p><p>* 00-template.conf 作为示例提供。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>2、参数默认值</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">配置中有两种参数，一种是具有默认值的，会在本文档中说明，并且在&nbsp;/etc/tlp.conf 中有<span>&nbsp;</span><span>Default</span><span>&nbsp;</span>前缀。还有一种没有默认值的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>3、参数语法</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">配置文件由参数和注释行组成。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>4、参数行</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>PARAMETER</span>=value</span></em></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果 value 包含空格，则需要使用双引号。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>key</span>=<span>"111 1111 1111"</span></span></em></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>5、注释行</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">以#开头，在 1.6 版本后可以在参数行后接#作为注释。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>6、禁用功能</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">没有默认值：使用注释或者删除即可。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">有默认值：赋空值即可 eg：<span>key</span>=<span>""</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>7、使用</strong>+=<strong>追加配置</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">和 bash 的环境变量一样，支持使用+=作为追加配置。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">使用 root 权限编辑配置文件，在保存更改后可以使用重启，拔插 AC&nbsp;电源或者使用<span>sudo</span><span>&nbsp;</span>tlp start 命令激活配置。</p><h2><span><strong>配置详解</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong><span>1、基础操作</span></strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="605" src="https://storage.deepin.org/thread/202311291630377425_1.png" width="936" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>2、音频</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="303" src="https://storage.deepin.org/thread/202311291630461351_2.png" width="1008" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>3、电池保养</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="302" src="https://storage.deepin.org/thread/202311291630531515_3.png" width="1008" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这些参数用于设置笔记本电脑主/内部电池（BAT0）和辅助电池（BAT1）的充电阈值。启动充电阈值表示在连接充电器时，电池充电水平低于该值时将开始充电。停止充电阈值表示在充电器连接时，电池充电水平超过该值时将停止充电。这些阈值始终具有较低的可用电池容量，因此默认情况下禁用这些设置，并且必须通过删除前导 # 来显式启用这些设置。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>4、光驱</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="303" src="https://storage.deepin.org/thread/202311291635109757_4.png" width="1008" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>5、硬盘</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="1070" src="https://storage.deepin.org/thread/202311291635428010_5.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">注释：DISK_IOSCHED 如果使用是 NVME 设备时，最好使用无 IO 调度程序来减少 CPU 开销（none 和 noop）。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>6、文件系统</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="278" src="https://storage.deepin.org/thread/202311291636283410_6.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>7、图形显卡</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="646" src="https://storage.deepin.org/thread/202311291636375285_7.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这些参数允许用户调整 Intel GPU 和 AMD GPU 在交流电和电池模式下的性能和电源管理行为。在配置这些参数时，建议参考硬件规格和运行 tlp-<span>stat</span>&nbsp;-g&nbsp;查看可用频率。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>8、kernel</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="185" src="https://storage.deepin.org/thread/202311291637168590_8.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">不建议关闭 watchdog，否则可能导致内核崩溃后无法自动重启和内核调试。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>9、网络</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="370" src="https://storage.deepin.org/thread/202311291637243632_9.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这些参数允许用户配置 Wi-Fi 的电源保存模式和控制 Wake-on-LAN（LAN 唤醒）功能。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>10、平台</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="287" src="https://storage.deepin.org/thread/202311291638073098_10.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>11、处理器</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="695" src="https://storage.deepin.org/thread/202311291638188553_11.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这些参数允许用户配置 CPU 的性能和功耗特性，包括缩放驱动程序操作模式、调节器、频率范围、能耗/性能策略、P 状态范围、提升功能以及 HWP 动态提升功能。部分电脑的 BIOS 会干预 PState，所以需要检查 CPU 是否支持。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>12、无线设备</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="652" src="https://storage.deepin.org/thread/202311291639068591_12.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>这些参数允许用户配置在系统启动、关闭或更改电源状态时如何处理内置的蓝牙、Wi-Fi 和 WWAN 设备。可通过设置禁用或启用这些设备，以及在何种条件下执行这些操作。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>13、无线配置向导（自动化配置）</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="1009" src="https://storage.deepin.org/thread/202311291639308582_13.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这些参数允许用户配置在特定事件触发时如何处理内置的蓝牙、Wi-Fi 和 WWAN 设备。用户可以根据 LAN、Wi-Fi 或 WWAN 的连接状态、对接或取消对接等事件来启用或禁用这些设备。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>14、PCIE 电源配置&nbsp;&nbsp;</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="825" src="https://storage.deepin.org/thread/202311291640035384_14.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>这些参数允许用户配置与 PCIe 设备相关的运行时电源管理和 ASPM 等功能。用户可以根据电源来源、设备地址、驱动程序等来调整这些设置，以实现更好的功耗管理。（建议不要对 NVIDIA 驱动进行调整，可能会引发意外）。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>15、USB&nbsp;&nbsp;</strong></p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="917" src="https://storage.deepin.org/thread/202311291640331297_15.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>16、Trace Mode</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><em><span style="color:#0000ff"><span>TLP_DEBUG</span>=<span>"arg bat disk lock nm path pm ps rf run sysfs udev usb"</span></span></em></p><h2><strong>结语</strong></h2><p><span>我们对于系统的优化不仅于此，现阶段 TLP 的配置策略仅对于部分有能力的用户公开，后续经过充分的测试和调优之后，会提供几份默认的配置给普通用户使用。并将来将这些配置文件 GUI 化，集成于深度定制项目中，为用户提供更为方便直观的操作体验。</span><span>从这一阶段对于电源优化的探索可以看出，deepin（深度）操作系统的电源管理方案优化不仅是为了解决用户反馈的问题，更是一种对用户需求的回应和尊重。未来，deepin（深度）操作系统将继续秉持用户至上的原则，不断提升系统的性能和用户体验，为广大用户提供更加优秀的开源操作系统产品。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:right">内容来源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社区</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 01:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269360</guid>
            <link>https://www.oschina.net/news/269360</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OS+AI 的深入思考| openKylin 社区余杰博士受邀在 2023 CCF 中国软件大会上做学术报告]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:justify"><span>12 月 1 日，由中国计算机学会 (CCF) 主办，CCF 软件工程专委会、系统软件专委会、形式化方法专委会以及复旦大学承办的</span><strong><span><span>2023 年 CCF</span>中国软件大会<span>（CCF ChinaSoft 2023）</span></span></strong><span>在上海国际会议中心拉开帷幕。</span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span><span>本次大会以「智能化软件创新推动数字经济与社会发展」为主题，组织特邀报告、院士论坛、</span>NASAC<span>青年创新奖论坛、顶会顶刊论坛、优秀博士生论坛、优秀青年学者论坛以及论文专刊论坛、工业论坛、教育论坛、学科竞赛等活动 40 余场，邀请了全国各地高校、企业、研究机构、政府部门以及各界的学者、专家、专业人员和学生参会。</span></span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="" height="576" src="https://oscimg.oschina.net/oscnet/up-4c4313e02c27047b4dd4f4dbf3ddcf6bdbe.png" width="1262" referrerpolicy="no-referrer"></p><p><span>在大会</span><strong><span>系统软件教育分论坛</span></strong><span>上，</span><strong><span>openKylin 社区秘书长、技术委员会委员余杰</span></strong><span>受邀分享</span><strong><span>《人工智能时代操作系统的机遇与挑战》</span></strong><span>主题演讲，从产业和学术两个维度来介绍操作系统助力人工智能快速发展（OS for AI）、操作系统智能化支撑技术<span>（OS with AI）</span>和操作系统支撑下的大模型云端一体化趋势<span>（OS plus AI）</span>。</span></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-ed2abddecaa6e57b34d4759dd8f1101ca86.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:justify"><span>当前，以大模型为代表的人工智能技术迅猛发展，成为全球技术焦点。openKylin 作为我国桌面操作系统<span>开源</span>根社区，积极布局操作系统终端侧的 AI 基础软件及应用技术，目前，已实现从 openKylin for AI（面向开发者）、openKylin with AI（面向用户）两个方面提升 openKylin AI 能力，成果如下：</span></p><p><strong>0</strong><strong>1 openKylin for AI</strong></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000"><span>完成</span>CCAI<span>（Intel Cloud-Client AI Service Framework）与 openKylin 系统的适配，并将 CCAI 按照 deb 的方式打包，实现 CCAI 在 openKylin 系统上快速简便安装。</span></span></p></li><li><p style="margin-left:0; margin-right:0"><span style="color:#000000"><span>发布 openKylin AI 框架安装助手，支持智能推荐、一键安装</span>PaddlePaddle<span>、PyTorch、TensorFlow 三种框架，后续还将支持更多主流 AI 框架及其套件的安装。</span></span></p></li></ul><p><strong>0</strong><strong>2 openKylin&nbsp;with&nbsp;AI</strong></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">上线智能语音助手，用户可通过语音下达指令，无须键盘鼠标输入，即可触发系统应用功能。</span></p></li><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">上线 AI 大模型插件，安装后可以实现在 openKylin 系统上体验基于大语言模型的聊天机器人功能。</span></p></li></ul><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span>未来，openKylin 社区还将携手</span>主流 CPU<span>、GPU、AI 大模型等厂商，积极探索云端一体化融合趋势，打造操作系统智能化平台，实现大模型与操作系统的协同优化。通过打造 openKylin for AI、openKylin with AI 和 openKylin plus AI 能力，推动应用全面智能化发展，为 openKylin 社区用户和开发者带来更加高效、智能、便捷的操作系统使用和开发体验！</span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 01:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269357</guid>
            <link>https://www.oschina.net/news/269357</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[腾讯视频出现服务故障]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今日晚间，大量网友反馈称腾讯视频陆续出现网络故障，具体表现包括不限于首页无法加载内容、VIP 用户看不了会员视频等等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fbded3b9e2461b9d04e455454ad632a16a.png" referrerpolicy="no-referrer"></p><p>针对这一问题，腾讯视频回应称：目前腾讯视频出现了短暂技术问题，正在加紧修复，各项功能在逐步恢复中。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-899c4218fa5a6cdf5b7eee20ecd37feef59.png" referrerpolicy="no-referrer"></p></blockquote><p>腾讯客服表示：关于腾讯视频会员用户无法观看影片的问题，非常抱歉，技术人员已经紧急修复处理，辛苦您重启 App 再次尝试观看，感谢您的支持和陪伴。</p><p>目前「腾讯视频崩了」已经登顶微博热搜，该话题已经有 11.2 亿的阅读量和 22.8 万次讨论。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8e92af99ecae1719adadcb80374d59c0f61.png" referrerpolicy="no-referrer"></p><p>根据微博网友反馈，自己即使是 VIP 用户，也会出现无法观看会员内容的情况。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 14:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269337</guid>
            <link>https://www.oschina.net/news/269337</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌推迟「最强 AI」Gemini 的发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">The Information 援引知情人士<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fgoogle-postpones-big-ai-launch-as-openai-zooms-ahead" target="_blank">消息称</a>，谷歌已悄悄地将旨在与 OpenAI 竞争的对话式人工智能 Gemini 的公开亮相推迟到 2024 年 1 月。</span></p><p><span style="color:#000000">谷歌在 2023 年 I/O 大会上首次透露正在开发 Gemini 以作为下一代基础模型，据称这是该公司迄今为止创建的最强大的对话式 AI。Gemini 被描述为一个可以处理多种数据的多模态 AI 聊天机器人，能够根据草图和书面描述的结合来理解和生成文本、图像和其他类型的内容。还可以根据用户的要求总结文本、帮助软件工程师编写代码等。</span></p><p><span style="color:#000000">该公司表示，新模型将展现出「令人印象深刻的多模态能力」，这是之前的任何大模型中都从未出现过的。此外，他们还在开发 API，使得开发人员可以直接将 Gemini 集成到第三方应用程序中。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-ce616c5439bca81a98416dd64866cdde1d9.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">谷歌原定于本周在美国纽约、华盛顿和加州举行的发布会上推出 Gemini，但在他们「发现 AI 无法可靠地处理一些非英语查询」后。首席执行官 Sundar Pichai 决定取消原定的一系列活动，并推迟 Gemini 的发布。谷歌希望 Gemini 最终能超越 OpenAI 的 GPT-4 模型，而全球化支持是 Gemini 的主要功能之一。</span></p><p><span style="color:#000000">研究机构 SemiAnalysis 在 8 月份的一篇博文中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsiliconangle.com%2F2023%2F12%2F03%2Fgoogle-reportedly-postpones-launch-next-gen-chatbot-gemini-early-next-year%2F" target="_blank">表示</a>，Gemini 拥有强大的计算能力，它看起来已经准备好 "将 OpenAI 的模型打得落花流水"。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 08:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269444/google-delays-launch-gemini</guid>
            <link>https://www.oschina.net/news/269444/google-delays-launch-gemini</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「亿万富豪找回丢失 25 年儿子」，格灵深瞳自研人脸对比算法立大功]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，「亿万富豪找回丢失 25 年儿子」相关话题引发全网关注。</p><p>25 年前，河北邢台几个月大的男婴解清帅被人偷走，其父亲解克锋悬赏百万寻子。12 月 1 日，在警方的帮助下，解克锋与失散 25 年的儿子解清帅在老家河北邢台相认。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0baa62ab6072765882de6ec6a94acec110d.png" referrerpolicy="no-referrer"></p><p>据介绍，此番寻子成功源于河北邯郸一名男孩人脸识别比对成功。12 月 3 日，人工智能科技公司「北京格灵深瞳信息技术股份有限公司」发布微博称，此次解克锋寻子成功背后的人脸比对算法正是出自该公司。</p><p>格灵深瞳在微博写道：「2023 年 11 月，河北‘亿万富豪’解克锋在警方的帮助下，找到了失散 25 年的儿子解清帅，至此结束了历时 25 年的漫长寻亲路。近日，在公安人员的见证下，一家人得以相认重聚。亲人团聚的背后，是科技的力量在发挥作用，格灵深瞳自主研发的‘跨年龄同亲缘人脸比对算法’功不可没。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-708b52b8691e3e86fa6d1ff008f68ebb868.png" referrerpolicy="no-referrer"></p><p>该公司在视频中解释称，「大部分被拐儿童都是在小时候就与亲人失散，随着岁月流逝，其相貌早已发生了翻天覆地的变化，这给警方的排查带来很大的困难。基于遗传关系，亲属之间的人脸特征相似性会相对较高，利用这一规律，格灵深瞳的‘<strong>跨年龄同亲缘人脸比对算法</strong>’会筛选出相关性较高的疑似者，进行赋分排名，大幅度提升寻亲的整个效率。」</p><p>「这次帮助解克锋寻找儿子，我们直接用他们夫妻俩和大儿子的照片进行人像比对，结果在排位前五中就找到了解清帅。」格灵深瞳公司还提到，「解清帅是近半年来，格灵深瞳帮助警方找到的第 4 个孩子。」</p><p>据公开资料，格灵深瞳是一家专注于计算机视觉和人工智能的公司，公司自成立以来，一直致力于研发具有自主知识产权的人工智能技术，为各行业提供智能化升级改造方案。目前，格灵深瞳已经成功应用于安防、金融、交通、零售等领域。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 06:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269420</guid>
            <link>https://www.oschina.net/news/269420</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[巴西颁布了一部完全由 ChatGPT 编写的法案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">今年 10 月份，巴西市第二大城市阿雷格里港的立法者在不知情的情况下，通过了似乎是该国第一部完全由人工智能编写的法案。该法案旨在防止城市向纳税人收取更换被盗水表的费用；其中 36 名议员投票一致通过了该提案，并于 11 月底生效。</span></p><p><span style="color:#000000">时至今日，市议员 Ramiro Rosário 则向<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapnews.com%2Farticle%2Fbrazil-artificial-intelligence-porto-alegre-5afd1240afe7b6ac202bb0bbc45e08d4" target="_blank">美联社</a>透露，该法案其实是由聊天机器人编写的。他实际上使用 ChatGPT 撰写了相关提案，并在没有做出任何改动的基础上将此呈现给了其他 35 名同僚，同时有意对他们隐瞒了内容的来源。</span></p><p><span style="color:#000000">「如果我在此之前透露了这一消息，该提案肯定不会被付诸表决。如果仅仅因为该项目是由人工智能编写的，就冒着不被批准的风险，这对民众来说是不公平的。」</span></p><p><img height="269" src="https://oscimg.oschina.net/oscnet/up-5cdb167b97dbc135bce51409c0865d3ff48.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Rosário 表示，自己仅在 ChatGPT 中输入了 49 个字的提示，就在几秒钟内收到了该工具返回的完整提案草案，其中还包括理由说明。所以他此举的目的不仅仅是为了解决一个地方性问题，还希望引发一场辩论。</span></p><p><span style="color:#000000">他深信人类将经历一场新的技术革命。并认为，人类文明所开发的所有工具既可以用来为恶，也可以用来为善。「这也就是为什么我们必须展示如何将其用于善」。</span></p><p><span style="color:#000000">法案真相的浮现引发了诸多的反对意见，并对 AI 在公共政策中的作用提出了质疑。市议会主席 Hamilton Sossmeier 此前曾发言谴责 Rosário 的做法，并称这是一个"危险的先例"。但他的想法如今似乎也出现了动摇，"我改变了主意。我开始更深入地阅读，发现不管是不幸还是幸运，这都将成为一种趋势。"</span></p><p><span style="color:#000000">事实上，Rosário 并不是首例。美国<span style="background-color:#ffffff">马萨诸塞州的民主党州参议员 Barry Finegold 早些时候也向 ChatGPT 求助，帮助起草一项旨在监管包括 ChatGPT 在内的人工智能模型的法案。该法案于今年早些时候提交，但目前尚未进行投票。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Finegold 在接受采访时表示，ChatGPT 可以帮助解决立法过程中一些较为繁琐的问题，包括正确、快速地搜索和引用已颁布的法律。不过，他也补充说明，关键是要让每个人都知道在这个过程中使用了 ChatGPT 或类似的工具，保持透明度。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">目前，使用像 ChatGPT 这样的大型语言模型来编写法律文档目前存在争议且存在风险，特别是因为系统往往会伪造信息和产生幻觉。研究表明，所有聊天机器人在总结文档时都有引入错误信息的可能，最先进的 GPT 模型的错误率约为 3%，而谷歌的一个模型的错误率约为 27%。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">今年上半年，纽约就有律师因在诉讼中引用 ChatGPT 编造的虚假法律案例而遭到抨击。</span></span></p><p style="text-align:start"><strong><span style="color:#000000"><span style="background-color:#ffffff">相关阅读：</span></span></strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/242932/lawsuit-chatgpt-false-case-citations" target="news">律师借助 ChatGPT 打官司，资料造假危及职业生涯</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 04:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269286/brazil-ordinance-chatgpt</guid>
            <link>https://www.oschina.net/news/269286/brazil-ordinance-chatgpt</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[深圳 2024 年新规：网络平台不得默认勾选自动续费]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>「i 深圳」微信公众号昨日<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FmanhYbvPiA_3iYqz1w2Y1Q" target="_blank">报道</a></u>，<strong>《深圳经济特区消费者权益保护条例》经市人大常委会会议表决通过，并将于明年 1 月 1 日起正式实施</strong>，针对大数据杀熟、诱导式消费、预付款「跑路」等消费领域的一些突出问题，制定了有针对性的规范性制度和措施，以更好保护消费者的合法益权，维护社会经济秩序，促进社会主义市场经济健康发展。</p><p>针对诱导和欺骗老年人购买保健品的问题，《条例》专门规定，经营者通过上门推销、会议营销、集中授课、健康讲座、专家义诊、免费检查、免费体验、免费或低价旅游等方式向 60 周岁以上的老年消费者推销保健产品或者声称具有保健功能产品的，老年消费者有权自收到产品之日起 7 日内退货，且无需说明理由。</p><p>此次立法还强化对未成年人的保护，规定经营者不得向未成年人提供危害未成年人身心健康的商品或服务，不得刊登、播放、张贴或散发含有危害未成年人身心健康内容的广告。</p><p>针对网络购物的商品评价，《条例》规定，网络交易经营者不得在展示商品或者服务的评价时采用误导性方式，包括将好评前置、差评后置，没有法定理由删除或者隐匿评价，未显著区分不同商品或者服务的评价等。网络经营者不得虚构点击量、播放量、关注度等流量数据，不得虚构点赞、打赏等交易互动数据。</p><p>针对自动续费问题，<strong>《条例》要求采取自动展期、自动续费等方式提供服务的网络交易经营者征得消费者同意，不得默认勾选、强制捆绑开通</strong>；在消费者开通服务前，要以显著方式、清晰易懂的语言向消费者告知服务的内容，扣费的金额和方式等信息；在服务期间，要为消费者提供简便的随时取消或者变更服务的途径；在自动展期、自动续费等日期前 5 日，要以电话、短信、即时通讯工具、电子邮件、消息推送等有效途径将服务内容、扣费金额等事项告知消费者。</p><p>针对盲盒信息不透明、夸大宣传等问题，《条例》要求盲盒等随机销售经营者以显著方式公示抽取规则、商品或者服务分布、提供数量、抽取概率等关键信息。经营者实际市场投放应当与公示信息一致，不得篡改抽取概率，改变抽取结果。鼓励随机销售经营者通过建立保底机制等方式，维护消费者合法权益。</p><p>针对预付式消费存在的问题，《条例》结合深圳市实际，要求加强预收款合同管理，明确经营者应当与消费者约定预收款合同的具体事项，没有约定或者约定不明则作有利于消费者的解释。要求经营者在终止经营、歇业或者变更直接提供商品或服务的经营场所前十五日发布告示，并以电话、短信等有效途径告知消费者，否则将受到处罚。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 04:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269387</guid>
            <link>https://www.oschina.net/news/269387</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 承诺从 Altman 投资的初创公司购买 AI 芯片]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美国《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wired.com%2Fstory%2Fopenai-buy-ai-chips-startup-sam-altman%2F" target="_blank">连线</a>》杂志消息称，OpenAI 公司在 2019 年与芯片开发商 Rain AI 签署了一份意向书，承诺将在该初创公司的芯片上市后将斥资 5100 万美元进行购买。</span></p><p><span style="color:#000000">而这家初创公司的特别之处在于，OpenAI 的首席执行官 Sam Altman 个人对其进行了投资，且投资额已超过 1000 万美元。早在 2018 年，Altman 就领投了 Rain AI 的一次种子轮融资。</span></p><p><span style="color:#000000">Rain AI 的总部与 OpenAI 旧金山总部之间的距离不到一英里。该公司目前正在研发一种 NPU 芯片，旨在「复制」人脑的特征。投资者文件称，Rain AI 最早可能于明年 10 月向客户提供第一批 AI 芯片。</span></p><p><span style="color:#000000">对此，OpenAI 和 Rain 拒绝置评。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-95b0cadcf31fb23a4fe5828c78ac8ff1139.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">OpenAI 与 Rain 的意向书展示了 Altman 的个人投资网络与他 OpenAI 首席执行官职责之间的关联。此前，领导创业公司孵化器 Y Combinator 的职位帮助 Altman 成为了硅谷最著名的交易撮合者之一；他投资了数十家创业公司，并充当创业者和全球最大公司之间的中间人。</span></p><p><span style="color:#000000">与 Rain 的交易也凸显了 OpenAI 不惜花费巨资来确保支撑 AI 先驱项目所需的芯片供应。Altman 曾公开抱怨 AI 芯片供应 "非常紧张"，成本 "令人瞠目"。根据一篇关于他与开发者举行的闭门会议的博文，Altman 表示，AI 的发展速度可能取决于新的芯片设计和供应链。</span></p><p><span style="color:#000000">Rain AI 今年早些时候曾向潜在投资者透露，预计最快本月即可「流片」。但据报道，美国政府一个负责监管国家安全风险投资的跨部门机构要求沙特阿拉伯下属基金 Prosperity7 Ventures 出售其在 Rain AI 的股份，该初创公司最近也对领导层和投资者进行了改组。2022 年初，Rain 宣布由该基金牵头筹集 2500 万美元资金。</span></p><p><span style="color:#000000">而该基金被迫撤资的情况也可能会增加 Rain 将新型芯片技术推向市场的挑战，并有可能推迟 OpenAI 兑现其 5100 万美元预付款订单的日期。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269384/openai-buy-ai-chips-startup-sam-altma</guid>
            <link>https://www.oschina.net/news/269384/openai-buy-ai-chips-startup-sam-altma</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
