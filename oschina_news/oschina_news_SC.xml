<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 26 Feb 2024 07:45:50 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[1024 分辨率下最快模型，字节跳动文生图开放模型 SDXL-Lightning 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-73d9ffe00a0d63e36ff98fa923e79b6bf92.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p>文章来源｜字节跳动智能创作团队</p></blockquote><p>很高兴跟大家分享我们最新的文生图模型 —— SDXL-Lightning，它实现了前所未有的速度和质量，并且已经向社区开放。</p><p>模型：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FByteDance%2FSDXL-Lightning" target="_blank">https://huggingface.co/ByteDance/SDXL-Lightning</a></p><p>论文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2402.13929" target="_blank">https://arxiv.org/abs/2402.13929</a></p><p><img src="https://oscimg.oschina.net/oscnet/up-dbb8391e5301fe0818c07c5007701e0819d.png" alt="" referrerpolicy="no-referrer"></p><h2>闪电般的图像生成</h2><p>生成式 AI 正凭借其根据文本提示（text prompts）创造出惊艳图像乃至视频的能力，赢得全球的瞩目。然而，当前最先进的生成模型依赖于扩散过程（diffusion），这是一个将噪声逐步转化为图像样本的迭代过程。这个过程需要耗费巨大的计算资源并且速度较慢，在生成高质量图像样本的过程中，单张图像的处理时间约为 5 秒，其中通常需要多次（20 到 40 次）调用庞大的神经网络。这样的速度限制了有快速、实时生成需求的应用场景。如何在提升生成质量的同时加快速度，是当前研究的热点领域，也是我们工作的核心目标。</p><p>SDXL-Lightning 通过一种创新技术——<strong>渐进式对抗蒸馏（Progressive Adversarial Distillation）</strong>——突破了这一障碍，实现了前所未有的生成速度。该模型能够在短短 2 步或 4 步内生成极高质量和分辨率的图像，将计算成本和时间降低十倍。我们的方法甚至可以在 1 步内为超时敏感的应用生成图像，虽然可能会稍微牺牲一些质量。</p><p>除了速度优势，SDXL-Lightning 在图像质量上也有显著表现，并在评估中超越了以往的加速技术。在实现更高分辨率和更佳细节的同时保持良好的多样性和图文匹配度。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6b51a9297b11683e92da115b696de953036.gif" alt="" referrerpolicy="no-referrer"> 速度对比示意</p><p>原始模型（20 步），我们的模型（2 步）</p><h2>模型效果</h2><p>我们的模型可以通过 1 步、2 步、4 步和 8 步来生成图像。推理步骤越多，图像质量越好。</p><p>以下是我们的 4 步生成结果： <img src="https://oscimg.oschina.net/oscnet/up-015feba9e22188c5c0903fb75dce3e8b13f.png" alt="" referrerpolicy="no-referrer"></p><p>以下是我们的 2 步生成结果： <img src="https://oscimg.oschina.net/oscnet/up-4943949b28735497159ae73bd6222f0c97a.png" alt="" referrerpolicy="no-referrer"></p><p>与以前的方法（Turbo 和 LCM）相比，我们的方法生成的图像在细节上有显著改进，并且更忠实于原始生成模型的风格和布局。</p><p><img src="https://oscimg.oschina.net/oscnet/up-99a60575458ab118c0706dcfb0fcd00f199.png" alt="" referrerpolicy="no-referrer"></p><h2>回馈社区，开放模型</h2><p>开源开放的浪潮已经成为推动人工智能迅猛发展的关键力量，字节跳动也自豪地成为这股浪潮的一部分。我们的模型基于目前最流行的文字生成图像开放模型 SDXL，该模型已经拥有一个繁荣的生态系统。现在，我们决定将 SDXL-Lightning 开放给全球的开发者、研究人员和创意从业者，以便他们能访问并运用这一模型，进一步推动整个行业的创新和协作。</p><p>在设计 SDXL-Lightning 时，我们就考虑到与开放模型社区的兼容。社区中已有众多艺术家和开发者创建了各种各样的风格化图像生成模型，例如卡通和动漫风格等。为了支持这些模型，我们提供 SDXL-Lightning 作为一个增速插件，它可以无缝地整合到这些多样风格的 SDXL 模型中，为各种不同模型加快图像生成的速度。</p><p><img src="https://oscimg.oschina.net/oscnet/up-9b1d4811ae28daa9f18b7dc72848ab191b5.png" alt="" referrerpolicy="no-referrer"> 我们的模型也可以和目前非常流行的控制插件 ControlNet 相结合，实现极速可控的图片生成。</p><p><img src="https://oscimg.oschina.net/oscnet/up-9215316be3b78c2af2c84a7df0cc9760b1f.png" alt="" referrerpolicy="no-referrer"> 我们的模型也支持开源社区里目前最流行的生成软件 ComfyUI，模型可以被直接加载来使用： <img src="https://oscimg.oschina.net/oscnet/up-db434e5743cd4966699ba28133c7606abfe.png" alt="" referrerpolicy="no-referrer"></p><h2>关于技术细节</h2><p>从理论上来说，图像生成是一个由噪声到清晰图像的逐步转化过程。在这一过程中，神经网络学习在这个转化流（flow）中各个位置上的梯度。</p><p>生成图像的具体步骤是这样的：首先，我们在流的起点，随机采样一个噪声样本，接着用神经网络计算出梯度。根据当前位置上的梯度，我们对样本进行微小的调整，然后不断重复这一过程。每一次迭代，样本都会更接近最终的图像分布，直至获得一张清晰的图像。</p><p><img src="https://oscimg.oschina.net/oscnet/up-586c0cfa75fa7c3308fa9421e66f6bb352d.png" alt="" referrerpolicy="no-referrer"><em>图：生成流程</em><em>（</em><em>图片来自</em><em>：</em><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2011.13456" target="_blank">https://arxiv.org/abs/2011.13456</a></em><em>）</em></p><p>由于生成流复杂且非直线，生成过程必须一次只走一小步以减少梯度误差累积，所以需要神经网络的频繁计算，这就是计算量大的原因。</p><p><img src="https://oscimg.oschina.net/oscnet/up-13ed5521422c15757fe99d8e1c85130cdc0.png" alt="" referrerpolicy="no-referrer"><em>图：曲线流程</em><em>（</em><em>图片来自</em><em>：</em><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2210.05475" target="_blank">https://arxiv.org/abs/2210.05475</a></em><em>）</em></p><p>为了减少生成图像所需的步骤数量，许多研究致力于寻找解决方案。一些研究提出了能减少误差的采样方法，而其他研究则试图使生成流更加直线化。尽管这些方法有所进展，但它们仍然需要超过 10 个推理步骤来生成图像。</p><p>另一种方法是模型蒸馏，它能够在少于 10 个推理步骤的情况下生成高质量图像。不同于计算当前流位置下的梯度，模型蒸馏改变模型预测的目标，直接让其预测下一个更远的流位置。具体来说，我们训练一个学生网络直接预测老师网络完成了多步推理的后的结果。这样的策略可以大幅减少所需的推理步骤数量。通过反复应用这个过程，我们可以进一步降低推理步骤的数量。这种方法被先前的研究称之为渐进式蒸馏。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6d96b685339c4b2a6d8f5b95cf6be348912.png" alt="" referrerpolicy="no-referrer"><em>图：渐进式蒸馏</em><em>，学生网络预测老师网络多步后的结果</em></p><p>在实际操作中，学生网络往往难以精确预测未来的流位置。误差随着每一步的累积而放大，导致在少于 8 步推理的情况下，模型产生的图像开始变得模糊不清。</p><p>为了解决这个问题，我们的策略是不强求学生网络精确匹配教师网络的预测，而是让学生网络在概率分布上与教师网络保持一致。换言之，学生网络被训练来预测一个概率上可能的位置，即使这个位置并不完全准确，我们也不会对它进行惩罚。这个目标是通过对抗训练来实现的，引入了一个额外的判别网络来帮助实现学生网络和教师网络输出的分布匹配。</p><p>这是我们研究方法的简要概述。在我们的技术论文（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2402.13929" target="_blank">https://arxiv.org/abs/2402.13929</a>）中，我们提供了更深入的理论分析、训练策略以及模型的具体公式化细节。</p><h2>SDXL-Lightning 之外</h2><p>尽管本研究主要探讨了如何利用 SDXL-Lightning 技术进行图像生成，但我们所提出的渐进式对抗蒸馏方法的应用潜力不局限于静态图像的范畴。这一创新技术也可以被运用于快速且高质量生成视频、音频以及其他多模态内容。我们诚挚邀请您在 HuggingFace 平台上体验 SDXL-Lightning，并期待您宝贵的意见和反馈。</p><p>模型：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2FByteDance%2FSDXL-Lightning" target="_blank">https://huggingface.co/ByteDance/SDXL-Lightning</a></p><p>论文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2402.13929" target="_blank">https://arxiv.org/abs/2402.13929</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 07:36:47 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6210722/blog/11044777</guid>
            <link>https://my.oschina.net/u/6210722/blog/11044777</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[国内首部文生视频 AI 动画片将在央视开播]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">由中央广播电视总枱制作的中国首部文生视频 AI 动画片《千秋诗颂》，将于 2 月 26 日起在总枱央视综合频道（CCTV-1）18:40 档开播，首次推出六集。</span></p><p><img height="398" src="https://oscimg.oschina.net/oscnet/up-202804fca1b5f2955175a418d3c4a78ad2f.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">《千秋诗颂》是国内首部以我国自主 AIGC 技术支撑制作的系列动画片，</span><span style="color:#000000">依托中央广播电视总枱「央视听媒体大模型」，运用 AI 技术聚焦统编语文教材 200 多首诗词，转化为唯美的国风动画片。</span></p><div style="text-align:start"><span style="color:#000000">节目综合运用可控图像生成、人物动态生成、文生视频等最新技术成果，支持了从美术设计到动效生成，再到后期成片的各个环节，实现了「有声言诗和无声画意」的有机融合。</span></div><div style="text-align:start">
 &nbsp;
</div><p><span style="color:#000000">根据介绍，在同等预算条件下，按照传统动画制作流程计算，《千秋诗颂》至少需要 8 个月时间，依托大模型后，制作周期缩短至 4 个月。目前，这项应用仍处于产研结合阶段，未来大模型研发成熟后，制作周期和动画精细度都会加速迭代升级。</span></p><p><span style="color:#000000">节目的技术总指导、上海人工智能实验室领军科学家林达华介绍称，《千秋诗颂》通过科学家和艺术家的跨界合作，不断突破技术与艺术之间的界限，为 AI 技术和媒体创作深度融合的探索迈出了重要一步。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 07:29:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280320</guid>
            <link>https://www.oschina.net/news/280320</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报 | 为什么挡不住英伟达；Sora 不靠蛮力]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3><span style="color:#e67e22"><strong># 2024.2.23</strong></span></h3><h2><strong><span style="color:#16a085">今日要点</span></strong></h2><p><strong>OpenSource Daily</strong></p><h3><a href="https://www.oschina.net/news/279907/echarts-5-5-0" target="_blank">Apache ECharts 5.5.0 引入 1KB 的客户端轻量运行时</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong style="color:#333333">在 5.5.0 版本中，我们新增了客户端轻量运行时</strong><span style="background-color:#ffffff; color:#333333">，客户端无需加载完整 ECharts 即可实现部分交互。这样，我们可以在服务端渲染图表，然后在客户端加载轻量运行时，实现一些常见的交互。这意味着，</span><strong style="color:#333333">只需要加载&nbsp;4KB 的轻量运行时（gzip 后 1KB），即可实现带初始动画和部分常用交互形式的图表</strong><span style="background-color:#ffffff; color:#333333">。这一改进将极大地提升页面加载速度，特别是对于移动端的体验。</span></p><h3><a href="https://www.oschina.net/news/279954/java-virtual-threads-pinning-issue" target="_blank">Oracle 致力解决 Java 虚拟线程 「Pinning」 问题</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">虚拟线程在 2023 年 9 月发布的 JDK 21 中正式成为一项稳定功能。该功能在 Java 生态系统中反响极佳，但仍存在一些痛点。Oracle 日前在&nbsp;Inside Java 网站上详细<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Finside.java%2F2024%2F02%2F21%2Fquality-heads-up%2F" target="_blank">介绍</a>了虚拟线程的 「Pinning」 问题。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">最常见的两种情况是：(a) 虚拟线程在 synchronized method 中驻留（如执行 socket I/O）；(b)<span>&nbsp;</span><span style="color:#333333">虚拟线程阻塞进入&nbsp;synchronized method</span>，因为对象的相关监视器被另一个线程持有。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6a2e93ce6802a570c1704258c9a589e998e.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span style="color:#16a085">今日观察</span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-b2647b78f90f168fbe94870901603370b9e.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- 微博<span>&nbsp;</span></span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1464484735%2FO1OCA77rn" target="_blank">zibuyu9</a></em></u></p><hr><h2><span style="color:#16a085"><strong>今日推荐</strong></span></h2><p><img src="https://oscimg.oschina.net/oscnet/up-154377718c801865b6bdcbff50e301efb9c.png" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>开源之声</strong></span></h2><p><img height="592" src="https://oscimg.oschina.net/oscnet/up-4ce7cc4480c1bf19d2608d9b28aaefcc0ff.png" width="1650" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-199b252f58314913ee2d31f583785b25af9.png" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>每日项目榜</strong></span></h2><p><strong><span style="background-color:#e67e22">每日 Gitee 精选</span></strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-268a8c2b0c4687d66bb89c8efe12b66fed9.png" referrerpolicy="no-referrer"></p><blockquote><h4><strong><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span></strong><br><u><em><strong><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/92n4c9ryegpcq1z/015_sora_KcAkRNX93Y.pdf">开源日报第 015 期：为什么挡不住英伟达；Sora 不靠蛮力</a></strong></em></u></h4></blockquote><hr><p><strong>往期回顾</strong></p><ul><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC013%E6%9C%9F%EF%BC%9A%E7%AD%89%E5%88%B0%20Sora%20%E5%BC%80%E6%BA%90%E4%BA%86%E7%AB%8B%E5%88%BB%E6%8E%A8%E5%87%BA%E5%B1%9E%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B.pdf">开源日报第 013 期：等到 Sora 开源了立刻推出属于我们自己的大模型</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC012%E6%9C%9F%EF%BC%9ASora%20%E7%BB%99%E4%B8%AD%E5%9B%BD%20AI%20%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%8F%98%E5%8C%96%EF%BC%9BDart%203.3%20%E5%8F%91%E5%B8%83.pdf">开源日报第 012 期：Sora 给中国 AI 带来的真实变化；Dart 3.3 发布</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC11%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有「大模型版 Linux」</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></li><li><a href="https://www.oschina.net/news/277585">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></li><li><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></li><li><a href="https://www.oschina.net/news/277214">开源日报第 006 期：选择技术栈一定要选择开源的</a></li><li><a href="http://www.oschina.net/news/277040">开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</a></li><li><a href="https://www.oschina.net/news/276864">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></li></ul><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 04:06:19 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280290</guid>
            <link>https://www.oschina.net/news/280290</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JetBrains 在其所有 IDE 中推出新终端测试版]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">JetBrains 宣布在其 IDE 中集成了新终端（Beta），并将从 2024.1 版本开始在 UI 中提供。用户可以 Settings/Preferences | Tools | Terminal | Enable New Terminal 中切换旧版和新版终端。目前，它仅支持 Bash、Zsh 和 PowerShell，其他 shell 仍在开发中。</span></p><p><span style="color:#000000"><img alt="" height="200" src="https://oscimg.oschina.net/oscnet/up-e70691932299e4ec5737278cff2d512db84.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">新终端保留了旧终端的主要功能，并添加可提高生产力和效率的新功能。「新终端旨在结合基本功能和高级功能，是一种熟悉的工具，以全新的方式呈现，并具有一组扩展的功能。我们的目标是保留终端工作的功能，增强便利性和简单性，并解决长期存在的问题。」</span></p><h4><strong><span style="color:#000000">视觉变化</span></strong></h4><p><span style="color:#000000">从视觉上看，新终端与新 UI 的外观和风格保持一致，并且可在从 2024.1 版本开始的所有 JetBrains IDE 中使用。新终端的主要视觉区别在于每个命令都以单独的块呈现，以帮助用户快速定位每个命令的开始和结束，增强输出的可读性。此更改还带来了其他新功能：例如使用箭头轻松在块间导航，以及使用户能够轻松在提示和输出之间切换的⌘↑ / ⌘↓（macOS）和 Ctrl+↑ / Ctrl+↓（Windows 和 Linux）快捷键。</span></p><p><img height="201" src="https://oscimg.oschina.net/oscnet/up-39347304fe50e1769512e9e718eea543d82.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">另一个重大变化是 command completio 功能，支持命令、路径、参数和选项，旨在简化命令输入。</span></p><p><img height="206" src="https://oscimg.oschina.net/oscnet/up-94190c719098f89c43bacfda6e1af905baf.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">以及新增了便捷的命令历史记录，可以进行筛选，更容易浏览最近执行的命令。改进了配色方案，使得调色板现在既美观又易于阅读。</span></p><p><img height="204" src="https://oscimg.oschina.net/oscnet/up-8464c12985cb2039b524c53c86e47d95883.png" width="500" referrerpolicy="no-referrer"></p><h4><strong><span style="color:#000000">架构变化</span></strong></h4><p><span style="color:#000000">一些显著变更包括：</span></p><p><span style="color:#000000">完全控制了终端的提示区域。用户现在可以在命令输入期间使用编辑器动作并使用鼠标移动光标。在这个阶段，可能会存在一些问题，比如 shell 快捷键无法工作，行为不符合预期等，团队正在努力解决这些问题。</span></p><p><span style="color:#000000">重新设计了 command completion 功能，将 IDE 的所有知识整合到建议中。由于相关更新仍在进行中，可能会导致一些补全选项不可用，或者与 shell-based completion 不同。</span></p><p><span style="color:#000000">添加了我们自己的命令提示符，显示当前目录、Git 分支、Python 虚拟环境和 Anaconda 环境。此举旨在提供丰富的现代命令提示符，即使在 shell 中未配置也是如此。鉴于有些人更喜欢使用与系统终端中相同的提示符，项目团队还在研究支持这种情况的自定义选项。</span></p><h4><strong><span style="color:#000000">下一步</span></strong></h4><p><span style="color:#000000">JetBrains 计划为新终端提供许多其他功能，比如更多的可视化自定义选项、在内置和 Shell 提示符之间切换的能力、区块的上下文操作、更好的选项卡管理和 AI 新功能。</span></p><p><span style="color:#000000">包括引入更多终端自定义选项（字体、间距等）、改进 command completion 功能、添加在内置提示符和 shell 提示符之间切换的功能、引入块的上下文操作以及简化终端中的选项卡管理。以及计划实施有用的 AI 功能，例如协助输入命令或解释所获得的结果。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2024%2F02%2Fthe-new-terminal-beta-is-now-in-jetbrains-ides%2F" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 03:28:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280280/jetbrains-ides-new-terminal-beta</guid>
            <link>https://www.oschina.net/news/280280/jetbrains-ides-new-terminal-beta</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Windows + VSCode + WSL 的 Web 开发体验秒了 Mac]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Ruby on Rails 作者 DHH 狠狠地吹了一波 Windows 的开发体验，他表示已使用 Windows PC 超过一周，<strong>在 VSCode、WSL 和英特尔 CPU 的加持下，运行编程测试的速度比 M3 Max 还快</strong>，整体感觉完全可以替代 macOS 进行 Web 开发。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-b3c494233cc676d511e7a6f7847642826e0.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fdhh%2Fstatus%2F1761830698758066298" target="_blank">https://twitter.com/dhh/status/1761830698758066298</a></u></em></p></blockquote><p>DHH 说道：「微软竟然能把 Linux 与 Windows 整合得这么好。我原以为在 WSL 下运行肯定会受到性能上的影响。或者说，它会变得笨拙和卡顿。但事实并非如此。……因此，我们要为微软点赞！通过与 Linux 和开源握手言和，微软为开发者提供了极具生产力的工具组合。现在，英特尔和 AMD 的芯片也终于在硬件方面给苹果带去了竞争压力。」</p><p>延伸阅读：<u><em><a href="https://www.oschina.net/news/261816/you-can-t-get-faster-than-no-build" target="_blank">DHH 锐评 「打包工具」：前端根本不需要构建 (No Build)</a></em></u></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 03:09:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280277/vscode-wsl-for-web-development</guid>
            <link>https://www.oschina.net/news/280277/vscode-wsl-for-web-development</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Flax Engine —— 多平台 3D 游戏引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#1f2328">Flax Engine 是一款用 C++ 和 C# 编写的高品质现代 3D 游戏引擎。</span></p><p>特性：</p><ul><li>无缝 C# 和 C++ 脚本编写</li><li>自动绘制调用批处理和实例化</li><li>默认情况下，每个资产都使用异步内容流</li><li>跨平台支持（Windows、Linux、Android、macOS、iOS、PS4、PS5、Switch、Xbox One、Xbox Series X/S...）</li><li>实时全局照明（DDGI 和带有自定义软件光线追踪的反射）</li><li>GPU 光照贴图烘焙</li><li>可视化脚本</li><li>视觉特效工具</li><li>嵌套预制件</li><li>大世界（世界座标的 64 位精度）</li><li>本地化工具</li><li>在线服务（Steam、Xbox Live、PSN...）</li><li>多人游戏网络</li><li>动画工具和功能</li><li>开放世界工具（地形、树叶、雾、关卡流）</li><li>在编辑器中热重载 C#/C++</li><li>技术美术人员的游戏全局变量</li><li>提供完整的源代码</li><li>来自引擎开发人员的直接沟通和帮助</li><li>轻量级开发（完整的仓库克隆 + 编译不到 3 分钟）</li></ul><p><img alt="" height="260" src="https://static.oschina.net/uploads/space/2023/0918/162245_QJFM_4252687.jpg" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="265" src="https://static.oschina.net/uploads/space/2023/0918/162326_omZj_4252687.jpg" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="267" src="https://static.oschina.net/uploads/space/2023/0918/162336_iDUN_4252687.jpg" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 03:05:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/flax-engine</guid>
            <link>https://www.oschina.net/p/flax-engine</link>
        </item>
        <item>
            <title>
                <![CDATA[中国电子拟向中国软件投资 20 亿元，打造操作系统核心技术]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">中国软件与技术服务股份有限公司发布《2024 年度向特定对象发行 A 股股票预案》。</span><span>本次向特定对象发行股票数量不超过 90,130,689 股（含本数），占中国软件<span>本次发行前总股数 10.48%，不超过本次发行前总股本的 30%。</span></span></p><p><span>本次发行各认购对象拟认购金额及股份数量如下：</span></p><p><img height="121" src="https://oscimg.oschina.net/oscnet/up-8d4ed7ad29265e08c048bc38bcc8773ac52.png" width="500" referrerpolicy="no-referrer"></p><p><span>本次向特定对象发行股票拟募集资金总额（含发行费用）<span>不超过 20 亿元，扣除发行费用后的募集资金净额拟全部投入以下项目：</span></span></p><p><img height="144" src="https://oscimg.oschina.net/oscnet/up-81bd21ed796c2a4beeaa9d20999d342b32d.png" width="500" referrerpolicy="no-referrer"></p><p><span>中国电子最近一年及一期主要财务数据如下：</span></p><p><img height="230" src="https://oscimg.oschina.net/oscnet/up-c39035eccf16806bb7c97fc21491281f6c0.png" width="500" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FVakZAoL5LtCSGSWad8jxrw" target="_blank">公告</a>指出，<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">本次全部募集资金以麒麟软件为主体，投入「移固融合终端操作系统产品研发」、「面向云化的服务器操作系统产品研发」、「嵌入式操作系统能力平台建设」三个项目。</span></p><p>详情可<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.sse.com.cn%2Fdisclosure%2Flistedinfo%2Fannouncement%2Fc%2Fnew%2F2023-09-23%2F688418_20230923_K1H9.pdf" target="_blank">查看完整文件</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 26 Feb 2024 02:36:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280270</guid>
            <link>https://www.oschina.net/news/280270</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[基于 Rust 开发的终端应用 Warp 发布 Linux 版本]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Warp 是一个基于 Rust 开发的现代化终端应用，内置 AI 功能，支持 CPU 加速。</p><p>此前 Warp 仅面向 Mac 平台提供，近日其开发团队终于<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.warp.dev%2Fblog%2Fwarp-for-linux" target="_blank">发布</a></u>了 Linux 版本，用户可在大多数主流 Linux 发行版上安装 Warp，包括 Ubuntu、Fedora、Arch Linux 或 Red Hat，目前提供的安装包格式包括：</p><ul><li><strong>.deb (apt)</strong></li><li><strong>.rpm (yum/dnf/zypper)</strong></li><li><strong>.pkg.tar.zst (pacman)</strong></li><li><strong>.AppImage</strong></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4de6b7dfa97856c11c9134895a8dd615060.png" referrerpolicy="no-referrer"></p><p><strong>Warp for Linux 特性</strong></p><ul><li><p>基于 Rust 编写，所有图形渲染都直接在 GPU 上完成，性能极佳</p></li><li><p>支持 zsh、bash 和 fish 等 shell</p></li><li><p>拥有现代化的编辑特性，比如鼠标支持、自动完成、语法高亮和多光标支持</p></li><li><p>Warp AI 可以帮助开发者查找忘记的命令、调试错误或通过自然语言转换为命令行</p></li><li><p>Warp Drive 可以将终端变得协作化，开发者可以将重要的命令保存为可重用的工作流，并与团队成员共享</p></li></ul><hr><p>Warp 团队介绍了开发 Linux 版本的一些技术挑战。由于 Linux 上的 GPU API 与 macOS 上的 Metal API 有很大区别，因此 Warp 团队使用了开源的 Rust 库来实现跨平台渲染，例如 wgpu、winit 和 cosmic-text。<strong>除了平台特定的抽象之外，Linux 版本的 Warp 与 Mac 版本共享了大约 98% 的代码</strong>。</p><p>值得一提的是，为了更好地支持跨平台抽象，Warp 团队还扩展了其内部基于 Rust 的 UI 框架，并计划在未来开源该框架。</p><p>现在，Warp 已经支持 macOS 和 Linux 两个主流平台。Warp 团队正在积极开发 Windows 版本，预计将在今年晚些时候发布。下载地址：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.warp.dev%2Fget_warp%3Flinux%3Dtrue%26auto_download%3Dfalse" target="_blank">https://app.warp.dev/get_warp</a></em></u></p><p><img src="https://oscimg.oschina.net/oscnet/up-606dd90d1e674b566bbb400477a9e8f3704.png" referrerpolicy="no-referrer"></p><hr><p><strong>延伸阅读：<u><em><a href="https://www.oschina.net/news/276588/zed-is-now-open-source" target="news">Rust 编写的 Zed 编辑器正式开源</a></em></u></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 25 Feb 2024 11:09:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280197/warp-for-linux</guid>
            <link>https://www.oschina.net/news/280197/warp-for-linux</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鸿祎：Sora 的技术路线如果被开源，国内将能很快赶上]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>360 集团创始人周鸿祎近日接受了新京报的独家采访，在被问及国内大模型企业如何追赶 Sora 时，他认为：</p><blockquote><p>「Sora 的技术路线如果被开源，国内将能很快赶上，但在追赶 Sora 时，算力有可能成为门槛，对此，集中国内所有 AI 企业的算力或许是方法之一。」</p></blockquote><p>周鸿祎对新京报贝壳财经记者表示，Sora 所代表的技术路线出炉后，国外也有两条路线的斗争，一条是 OpenAI 的闭源，另一条是以 Meta 为代表的开源，「开源路线的目标就要打破闭源，他们会不断去猜测闭源是怎么做的，最后再开源出来。<strong>开源出来的好处是，很多小公司和大公司的个人成员会积极地在开源项目中借鉴他人成果，同时再贡献自己的成果，其化学作用会非常明显</strong>。」</p><p>周鸿祎同时认为，在追赶 Sora 方面，算力可能也是一个坎。Sora 视频分析对算力的消耗应该是远远超过千亿模型的。所以，当现在国内显卡都被卡脖子之后，算力就可能会是一个问题。「目前，Meta 已经有 50 万块 GPU，明年可能会买百万块，微软应该也会按照百万级别去下订单。而国内的所有人工智能公司加在一起可能有 50 万块 GPU，但都分散在各个公司里。」&nbsp;</p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fm.bjnews.com.cn%2Fdetail%2F1708743244168689.html" target="_blank">https://m.bjnews.com.cn/detail/1708743244168689.html</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 25 Feb 2024 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280267</guid>
            <link>https://www.oschina.net/news/280267</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 智能杯垫产品 iCupBox]]>
            </title>
            <description>
                <![CDATA[这是一款智能杯垫产品，基于 GTD 时间管理理念设计，目的是提醒上班族们专心工作和及时喝水休息，提高工作效率。]]>
            </description>
            <pubDate>Sun, 25 Feb 2024 02:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/08/iCupBox</guid>
            <link>https://www.oschina.net/news/08/iCupBox</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | LangChain 原理学习笔记]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;visibility: visible;" data-mpa-powered-by="yiban.io"><img class="rich_pages wxw-img __bg_gif" data-backh="96" data-backw="578" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="96" data-imgfileid="503044953" data-ratio="0.16666666666666666" src="https://oscimg.oschina.net/oscnet/5d6661c6-490a-4660-829f-c96629c9c1aa.gif" data-type="gif" data-w="636" style="outline: 0px;letter-spacing: 0.544px;font-size: var(--articleFontsize);border-radius: 8px;text-align: justify;width: 100%;visibility: visible !important;background-size: 16px !important;height: auto;" referrerpolicy="no-referrer"><br style="outline: 0px;visibility: visible;"></section><section data-mpa-template="t" data-mpa-template-id="502" data-mpa-category="模板" style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);visibility: visible;"><section data-mpa-category="模板" data-mid="" style="padding-right: 1px;padding-left: 1px;outline: 0px;width: 677px;display: flex;justify-content: flex-start;align-items: center;flex-direction: column;visibility: visible;"><section data-mid="" style="outline: 0px;letter-spacing: 0.544px;width: 675px;display: grid;grid-template-columns: 26px auto;visibility: visible;"><section data-mid="" style="outline: 0px;width: 26px;height: 14px;display: flex;justify-content: center;align-items: center;align-self: center;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section data-mid="" style="padding-left: 7px;outline: 0px;display: flex;justify-content: flex-start;align-items: center;visibility: visible;"><section data-mid="" style="margin-right: 7px;outline: 0px;text-align: left;visibility: visible;"><p data-mid="" style="outline: 0px;width: 0px;font-size: 14px;font-family: PingFangSC-Semibold, &quot;PingFang SC&quot;;font-weight: bold;color: rgb(58, 92, 244);line-height: 20px;visibility: visible;"><br style="outline: 0px;visibility: visible;"></p></section><section data-mid="" style="margin-bottom: 4px;outline: 0px;width: 635px;height: 1px;border-top: 1px solid rgb(58, 92, 244);align-self: flex-end;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section></section></section><section data-mid="" style="padding: 7px 14px 9px 19px;outline: 0px;width: 675px;text-align: left;border-bottom: 1px solid rgb(58, 92, 244);visibility: visible;"><p style="outline: 0px;min-height: 24px;letter-spacing: 0.578px;text-align: justify;visibility: visible;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="text-align: left;font-size: 15px;letter-spacing: 1px;">最新越发觉得 AI 的发展，对未来是一场革命，LangChain 已经在工程设计上有了最佳实践，类似于 AI 时代的编程模型或编程框架，有点 Spring 框架的意思。之前在 LangChain 上也有些最佳实践，所以在这里分享记录下。</span></p></section></section></section><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.75em;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503044950" data-ratio="0.3161764705882353" data-s="300,640" src="https://oscimg.oschina.net/oscnet/c23e6652-3a60-4f04-91a9-75c32aeb79c6.png" data-type="png" data-w="408" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 113px !important;" referrerpolicy="no-referrer"></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;color: rgb(3, 69, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;">LangChain 解决什么问题</span></section><p style="outline: 0px;visibility: visible;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: justify;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">LangChain 是基于 LLM 之上的，在应用层和底层 LLM 之前的一个很好的编程框架，如果把 LLM 比喻为各种类型的数据库、中间件等这些基础设施，应用层是各种业务逻辑的组合之外，那么 LangChain 就负责桥接与业务层和底层 LLM 模型，让开发者可以快速地实现对接各种底层模型和快速实现业务逻辑的软件开发框架。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">那么 LangChain 是如何做到的呢？试想一下，现在底层有一个大模型的推理能力，除了在对话框手动输入跟他聊天之外。如何用计算机方式跟它互动呢？如果把一次 LLM 调用当作一个原子能力，如何编排这些原子能力来解决一些业务需求呢？Langchain 就是来解决这个事情的。</span></p><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;visibility: visible;line-height: 1.75em;"><br></section><section style="margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;visibility: visible;"><img class="rich_pages wxw-img" data-imgfileid="503044952" data-ratio="0.3056872037914692" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4a2ee990-1779-43cc-a673-50748e9a264e.png" data-type="png" data-w="422" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 117px !important;" referrerpolicy="no-referrer"></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;color: rgb(0, 17, 255);">LangChain 的几个核心概念</span></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><span id="OSC_h4_1"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">Model I/O</span></strong></span></h4><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">这里重点把背后的 LLM 模型做了一层封装，开发者可以通过更改配置的方式快速切换底层 LLM 模型，比如 chatgpt，chatGLM、通义千问等模型。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">同时还有些高阶功能：比如提供了缓存等功能，这样对于语义上类似的 query，如果缓存有，那么 langchain 可以快速返回结果，而不需要调用大模型。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><span id="OSC_h4_2"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">Retriver</span></strong></span></h4><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">检索是为了解决大模型打通用户的本身数据，做一些面向业务属性的东西。这里的检索并非传统的关系型数据库，更多的是与大模型的本身逻辑相似的，比如向量数据库。</span></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><strong>一个经典的结合 LLM 和外部用户的文档进行智能答疑的场景</strong></span></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">文档-&gt;分词-&gt;embedding-&gt;向量数据库</span></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">query-&gt;向量数据库查询-&gt;TOP N-&gt;上下文+ 用户提问 + prompt -&gt; LLM -&gt; 返回结果</span></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">一个经典的图如下：</span></section><section style="min-height: 24px;text-align: center;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><img class="rich_pages wxw-img" data-backh="368" data-backw="578" data-imgfileid="503044954" data-ratio="0.637962962962963" src="https://oscimg.oschina.net/oscnet/ea3e7438-856d-47b9-b1d4-20042680f627.png" data-type="png" data-w="1080" style="width: 100%;height: auto;" width="2400" referrerpolicy="no-referrer"></section><section style="min-height: 24px;text-align: left;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><strong>关键技术：文档如何拆分、embedding 过程、 TOPN 向量距离的选择</strong></span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">embedding 技术选型</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">embedding 是将现实中的物体通过向量化的方法转化为高维向量，可被机器学习模型所识别。他是一种映射，同时也保证了能清晰地表达现实物体的特征。基于此，可以进行一些归类分析、回归分析等。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">现在市面上常见的 embedding 方法有通义千问的 embedding 等方法。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">向量数据库：</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">向量数据库底层存储的是一堆向量，它提供了根据向量相似度进行查询的能力，一般情况下，向量相似度代表了现实世界中物体的相似度。比如」我的名字是小明「 和「我叫小明」这两句话所代表的含义几乎是相同的，那么在 embedding 之后，基于向量数据库进行查询的时候，它们俩的相似度就会很近。</span></p><section style="min-height: 24px;text-align: justify;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></section><span id="OSC_h4_3"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">Chain</span></strong></span></h4><section style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">各种类型的 chain，chain 代表了各种业务类型的组合，类似于工作流的编排。</span></p><section style="min-height: 24px;text-align: justify;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><span id="OSC_h4_4"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">Memory</span></strong></span></h4><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">LLM 本身提供了记忆的能力，同时提供了接口，开发者可以将历史的对话记录传入给 LLM。LangChain 需要使用外部存储保存这些历史的会话和记忆。可以使用数据库、缓存等进行保存。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><span id="OSC_h4_5"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">Agent</span></strong></span></h4><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">重点是代理工具</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">代理工具可以让应用程序基于大模型的推理能力，然后进行代理工具或代理服务的调用。因为 LLM 是没有「联网」的能力的，如果想解决特定的应用场景，代理工具是个完美的选择。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">代理工具通常包含三个方面：用户输入、prompt 编排 LLM 思考与路由代理的过程、背后的代理服务。其中难点可能就在于 prompt 设计了。通常的「套路」是这样的：</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">ReAct 模型</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">输入：用户的问题</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">思考过程：如果是情况 1（这个是需要 LLM 进行意图识别进行思考的），那么推理和提取出一些关键参数，调用 agent1，如果是情况 2，那么推理和提取出一些关键参数，调用 agent2</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">Act：调用 agent1 对应一个 JSON 格式化的输入，调用 function1，返回结果。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">观察：观察调用后的结果，再结合推理的能力，再进行循环思考。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-wrap: wrap;text-align: center;visibility: visible;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);margin-top: 8px;line-height: 1.75em;"><img class="rich_pages wxw-img" data-imgfileid="503044951" data-ratio="0.3056872037914692" data-s="300,640" src="https://oscimg.oschina.net/oscnet/335c2740-2ac6-4cd0-a8bc-d421b0bc2086.png" data-type="png" data-w="422" style="outline: 0px;letter-spacing: 0.544px;font-size: 14px;visibility: visible !important;width: 117px !important;" referrerpolicy="no-referrer"></section><p style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-wrap: wrap;text-align: center;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;color: rgb(0, 17, 255);letter-spacing: 1px;">LangChain 的在实际场景中的实践</span></p><section style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">集团内部开发了一个 JAVA 版本的 LangChain 框架，以下实践基于此框架与开源大模型 chatGLM-6B 进行。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><span id="OSC_h4_6"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">淘宝开放平台智能问答</span></strong></span></h4><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">淘宝开放平台对内托管了上万个 API，每天在内部群里都会有开发者咨询 API 发布问题，之前我们是通过 NLP 来实现智能问答的，现将它升级为基于大模型的智能问答，以下是具体的技术实现过程。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_7"></span><h4 style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">知识库 Embedding 过程</span></h4></li></ul><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">由于之前已经沉淀好了很多知识库，都是 Question-Answer 的这种形式，这里我们对 Question，也就是问题进行 Embedding，此处采用通义千问提供的 Embedding 方法。</span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">知识库 embedding：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">TongYiEmbeddings embeddings = <span class="code-snippet__keyword">new</span> TongYiEmbeddings();</span></code><code><span class="code-snippet_outer">embeddings.setServerAccessId(ALINLP_EMBEDDINGS_ACCESSID);</span></code><code><span class="code-snippet_outer">embeddings.setServerUrl(ALINLP_EMBEDDINGS_SERVER_URL);</span></code><code><span class="code-snippet_outer">embeddings.setServerUuid(ALINLP_EMBEDDINGS_UUID);</span></code><code><span class="code-snippet_outer">Document <span class="code-snippet__built_in">document</span> = <span class="code-snippet__keyword">new</span> Document();</span></code><code><span class="code-snippet_outer"><span class="code-snippet__built_in">document</span>.setPageContent(rawText);</span></code><code><span class="code-snippet_outer">List&lt;Document&gt; documents = embeddings.embedDocument(Arrays.asList(<span class="code-snippet__built_in">document</span>));</span></code><code><span class="code-snippet_outer">Document  vecDocument= documents.get(<span class="code-snippet__number">0</span>);</span></code><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 向量化知识</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__built_in">String</span> embeddingString = <span class="code-snippet__built_in">JSON</span>.toJSONString(vecDocument.getEmbedding()).replaceAll(<span class="code-snippet__string">"\\["</span>, <span class="code-snippet__string">"{"</span>)</span></code><code><span class="code-snippet_outer">.replaceAll(<span class="code-snippet__string">"\\]"</span>, <span class="code-snippet__string">"}"</span>);</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">return</span> embeddingString;</span></code></pre></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><span id="OSC_h4_8"></span><h4 style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">向量数据库存储和查询</span></h4></li></ul><section style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span><br></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">此处采用 hologres 向量数据库，图中红框表示知识库问题与回答在数据库中具体的向量化存储数据。</span></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="letter-spacing: 1px;"><span style="font-size: 15px;"></span></span></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-backh="129" data-backw="578" data-imgfileid="503044958" data-ratio="0.22255192878338279" src="https://oscimg.oschina.net/oscnet/b1a595f8-7ea6-4f3c-a5d7-ebcc2d405d65.png" data-type="png" data-w="674" style="width: 100%;height: auto;" referrerpolicy="no-referrer"></span></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">向量距离数据库查询：</span></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">select</span> origin_content <span class="code-snippet__keyword">as</span> originContent,</span></code><code><span class="code-snippet_outer">        origin_title <span class="code-snippet__keyword">as</span> originTitle,</span></code><code><span class="code-snippet_outer">        pm_approx_squared_euclidean_distance(embedding_title, <span class="code-snippet__comment">#{embeddingTitle}) as distance</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">from</span> vs_knowledge</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">order</span><span class="code-snippet__keyword">by</span> distance <span class="code-snippet__keyword">asc</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">limit</span><span class="code-snippet__comment">#{limit}</span></span></code><code><span class="code-snippet_outer"></span></code></pre></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="color: rgb(0, 17, 255);"><p style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(0, 17, 255);">大模型问答链路</span></p></li></ul><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;"><strong><br></strong></span></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">问答 chain 的基本实现：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer"><span class="code-snippet__comment">//1. 初始化 ChatGLM 的参数</span></span></code><code><span class="code-snippet_outer">ChatGLMV2Internal chatGLMV2Internal = <span class="code-snippet__keyword">new</span> ChatGLMV2Internal();</span></code><code><span class="code-snippet_outer">chatGLMV2Internal.setTemperature(<span class="code-snippet__number">0.01</span>d);</span></code><code><span class="code-snippet_outer">chatGLMV2Internal.setMaxLength(<span class="code-snippet__number">2048</span>);</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><span class="code-snippet__comment">//2. 提示词编写</span></span></code><code><span class="code-snippet_outer">PromptTemplate prompt = <span class="code-snippet__keyword">new</span> PromptTemplate();</span></code><code><span class="code-snippet_outer"><span class="code-snippet__built_in">String</span> template = <span class="code-snippet__string">"已知信息：\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"{context} \n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"根据上述已知信息，简洁和专业的来回答用户的问题。如果无法从中得到答案，请说 「根据已知信息无法回答该问题」 或 「没有提供足够的相关信息」，不允许在答案中添加编造成分，答案请使用中文。问题是：{question}"</span>;</span></code><code><span class="code-snippet_outer">prompt.setTemplate(template);</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><span class="code-snippet__comment">//3. 向量数据库检索配置，比如最大向量距离</span></span></code><code><span class="code-snippet_outer">RetrievalQA qa = <span class="code-snippet__keyword">new</span> RetrievalQA();</span></code><code><span class="code-snippet_outer">qa.setRecommend(<span class="code-snippet__number">5</span>);</span></code><code><span class="code-snippet_outer">qa.setMaxDistanceValue(<span class="code-snippet__number">10000.0</span>d);</span></code><code><span class="code-snippet_outer">qa.setLlm(chatGLMV2Internal);</span></code><code><span class="code-snippet_outer">qa.setPrompt(prompt);</span></code><code><span class="code-snippet_outer">qa.setRetriever(holoRetriver.asRetriever());</span></code><code><span class="code-snippet_outer">qa.init();</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><span class="code-snippet__comment">//4. LLM 大模型问答</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__built_in">Map</span>&lt;<span class="code-snippet__built_in">String</span>, <span class="code-snippet__built_in">Object</span>&gt; inputs = <span class="code-snippet__keyword">new</span> HashMap&lt;&gt;();</span></code><code><span class="code-snippet_outer">inputs.put(<span class="code-snippet__string">"question"</span>, question);</span></code><code><span class="code-snippet_outer">inputs.put(<span class="code-snippet__string">"input"</span>, question);</span></code><code><span class="code-snippet_outer"><span class="code-snippet__built_in">Map</span>&lt;<span class="code-snippet__built_in">String</span>, <span class="code-snippet__built_in">Object</span>&gt; outputs = qa.run(inputs);</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">llmKonwledgeDO.setContent(<span class="code-snippet__built_in">String</span>.valueOf(outputs.get(<span class="code-snippet__string">"text"</span>)));</span></code><code><span class="code-snippet_outer"><span class="code-snippet__comment">// 补充 doclist</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">return</span> llmKonwledgeDO;</span></code></pre></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><span id="OSC_h4_9"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">AI Agent 实践</span></strong></span></h4><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">以下实现了一个网关</span><span style="font-size: 15px;letter-spacing: 1px;">API 调用日志解析的 agent。</span></p><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">Agent 工具注册：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="powershell"><code><span class="code-snippet_outer">this.setName(<span class="code-snippet__string">"ApiLogTool"</span>);</span></code><code><span class="code-snippet_outer">this.setDescription(<span class="code-snippet__string">"这是一个调用日志查询接口，如果[{question}]中包含 requestId 关键字,你可以请求这个工具与日志系统进行交互，调用这个工具。\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"请先提取出 requestId 的值，将它赋值为 value。调用参数：[{\"</span>requestId\<span class="code-snippet__string">": \"</span>value\<span class="code-snippet__string">", \"</span>type\<span class="code-snippet__string">": \"</span>String\<span class="code-snippet__string">", \"</span>description\<span class="code-snippet__string">": \"</span>调用请求 id\<span class="code-snippet__string">"}]。"</span>);</span></code></pre></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;"><strong><br></strong></span></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">工具解析：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer"><span class="code-snippet__built_in">Map</span>&lt;<span class="code-snippet__built_in">String</span>,<span class="code-snippet__built_in">Object</span>&gt; parse = (<span class="code-snippet__built_in">Map</span>&lt;<span class="code-snippet__built_in">String</span>,<span class="code-snippet__built_in">Object</span>&gt;)<span class="code-snippet__built_in">JSON</span>.parse(toolInput);</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">if</span>(parse.get(<span class="code-snippet__string">"requestId"</span>)==<span class="code-snippet__literal">null</span>){</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">return</span><span class="code-snippet__keyword">new</span> ToolExecuteResult(<span class="code-snippet__string">""</span>);</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__built_in">String</span> requestId = parse.get(<span class="code-snippet__string">"requestId"</span>).toString();</span></code><code><span class="code-snippet_outer">ApiLogSearchQuery apiLogSearchQuery = <span class="code-snippet__keyword">new</span> ApiLogSearchQuery();</span></code><code><span class="code-snippet_outer"><span class="code-snippet__comment">//日志查询解析处理</span></span></code></pre></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;letter-spacing: 1px;">思考决策逻辑：</span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="typescript"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">public</span><span class="code-snippet__keyword">static</span> final <span class="code-snippet__built_in">String</span> FORMAT_INSTRUCTIONS_CH =</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"用户提出了一个问题: {question} \n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"你可以选择使用下面这些工具：\n"</span>+</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"{tool_list_description}"</span>+</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"\n"</span>+</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"同时你的思考过程如下："</span>+</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"Thought: 每一次你需要首先思考你应该做什么\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"Action: 你需要决定是否使用工具，应该是[{tool_names}] 中的一个 Action，格式为 JSON。如果匹配不到工具，就不要思考了，直接返回结果，请不要把思考过程返回给用户。\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"Input: 如果匹配到工具，使用的工具的输入参数，赋值给 params\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"Observation: 如果匹配到工具，工具的输出结果，格式为[]。\n"</span> +</span></code><code><span class="code-snippet_outer"><span class="code-snippet__string">"Answer: 每一步回答问题的答案，格式为 JSON。你可以多次使用 Thought/Action/Input/Observation/Answer 来一步一步的思考如何回答问题。\n"</span>;</span></code></pre></section><p style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);font-size: 15px;background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503044956" data-ratio="0.328125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/457ebbb7-b2db-4f81-af49-cb94bd9aa6dc.png" data-type="png" data-w="256" style="outline: 0px;letter-spacing: 0.544px;font-size: 16px;visibility: visible !important;width: 122px !important;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;font-size: 15px;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);text-align: center;line-height: normal;"><span style="outline: 0px;color: rgb(0, 17, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;">个人小思考</span></section><section style="min-height: 24px;text-align: justify;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;"><strong><br></strong></span></section><ol class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 1.5em;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);min-height: 24px;line-height: 1.75em;"><li style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;text-align: justify;line-height: 1.75em;font-size: 15px;letter-spacing: 1px;"><section style="outline: 0px;min-height: 24px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 1px;">未来微服务 HSF 这种形式会向上往 agent 工厂或者 agent 服务框架这种形式演进，因为这个框架搭好了后，后面各个业务方快速集成到 agent 服务上，可被上层 AI 应用层调用</span></section></li><li style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;text-align: justify;line-height: 1.75em;font-size: 15px;letter-spacing: 1px;"><section style="outline: 0px;min-height: 24px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 1px;">如果多个 agent 联动了，才是真正的智能</span></section></li><li style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;text-align: justify;line-height: 1.75em;font-size: 15px;letter-spacing: 1px;"><section style="outline: 0px;min-height: 24px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 1px;">如何定义 agent？</span></section></li></ol><section style="outline: 0px;min-height: 24px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;">Agent 体系架构可以分为慎思型、反应型和混合型。</span></section><section style="outline: 0px;min-height: 24px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;">慎思型构建负责规划和推理行为，反应型构建处理需要快速响应的重要事件。</span></section><section style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);min-height: 24px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><strong><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;">信念-期望-意图（Belief-Desire-ltension， BDI) 体系架构是混合型体系架构的一个重要类型。</span></strong><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;">Agent 的表示形式，Agent 的行为可以被描述成好像拥有信念、期望和意图等思维状态。<strong>信念表示 Agent 拥有的知识，期望描述 Agent 追求的目标，意图说明 Agent 选择计划以实现哪些目标。</strong></span></section><section style="min-height: 24px;text-align: justify;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="letter-spacing: 1px;"><br></span></section><section style="min-height: 24px;text-align: center;line-height: 1.75em;margin-bottom: 0px;margin-top: 0px;"><img class="rich_pages wxw-img" data-imgfileid="503044957" data-ratio="0.4925925925925926" src="https://oscimg.oschina.net/oscnet/6bf178e3-ef35-4c6d-8abc-81ef9528723d.png" data-type="png" data-w="1080" width="1080" referrerpolicy="no-referrer"></section><section style="min-height: 24px;text-align: center;line-height: 1.75em;margin-bottom: 0px;margin-top: 0px;"><span style="font-size: 12px;color: rgb(136, 136, 136);">openai 提供的 agent 概念</span></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><p style="margin-bottom: 0px;outline: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);font-size: 11pt;font-family: DengXian;color: rgb(0, 0, 0);letter-spacing: normal;text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503044955" data-ratio="0.328125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/319926d9-6e10-4a37-853a-8e49a4bef5bd.png" data-type="png" data-w="256" style="outline: 0px;font-size: 14.6667px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 133px !important;" referrerpolicy="no-referrer"></p><p style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.75em;text-align: center;"><span style="outline: 0px;box-sizing: inherit;color: rgb(0, 17, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;">团队介绍</span></p><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><br></section><section style="min-height: 24px;text-align: justify;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;">我们是淘天集团商家与开放平台团队，目前主要围绕商家的日常经营场景，为中小商家提供高效易用的电商工具。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;font-size: 15px;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);text-align: justify;line-height: normal;"><br></section><section data-role="outer" label="Powered by 135editor.com" style="margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section style="margin-top: 5px;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;font-size: 16px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;text-align: center;line-height: 1.75em;"><span style="outline: 0px;color: rgb(0, 17, 255);"><strong style="outline: 0px;">¤</strong></span><span style="outline: 0px;"><strong style="outline: 0px;">&nbsp;拓展阅读&nbsp;</strong></span><span style="outline: 0px;color: rgb(0, 17, 255);"><strong style="outline: 0px;">¤</strong></span></section><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;letter-spacing: 0.544px;font-size: 16px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;text-align: center;line-height: 1.75em;"><br style="outline: 0px;"></section><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;min-height: 24px;clear: both;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565944923443904512%23wechat_redirect" textvalue="3DXR 技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">3DXR 技术</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1533906991218294785%23wechat_redirect" textvalue="终端技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">终端技术</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1592015847500414978%23wechat_redirect" textvalue="音视频技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">音视频技术</a></section><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1539610690070642689%23wechat_redirect" textvalue="服务端技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">服务端技术</a><span style="outline: 0px;letter-spacing: 0.544px;">&nbsp;|&nbsp;</span><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565883875634397185%23wechat_redirect" textvalue="技术质量" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">技术质量</a>&nbsp;|&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1522425612282494977%23wechat_redirect" textvalue="数据算法" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">数据算法</a></p><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;"><br style="outline: 0px;"></p><section class="mp_profile_iframe_wrp" style="margin-bottom: 24px;outline: 0px;"><mp-common-profile class="custom_select_card mp_profile_iframe js_wx_tap_highlight" data-pluginname="mpprofile" data-id="MzAxNDEwNjk5OQ==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8t5nZGhAatCrc4e2iaDfAaoInribRKxc7MOqdTGygfcLqSDxhj0trCHVEh94Sjl7zuWYzwouYtJ0VQ/300?wx_fmt=png&amp;wxfrom=19" data-nickname="大淘宝技术" data-alias="AlibabaMTT" data-signature="大淘宝技术官方账号" data-from="2" data-index="0" data-origin_num="697" data-isban="0" data-biz_account_status="0" data-weui-theme="light" data-is_biz_ban="0"></mp-common-profile></section></section><section style="display: none;line-height: 1.75em;"><br></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - 大淘宝技术（AlibabaMTT）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 25 Feb 2024 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4662964/blog/11044513</guid>
            <link>https://my.oschina.net/u/4662964/blog/11044513</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Wubuntu：披着 Windows 11 外衣的 Ubuntu]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>众所周知，Ubuntu 是最受欢迎的 Linux 发行版之一。而微软拥抱 Linux 之后，Windows 成为了最好的 Linux 发行版（不是）。如果将两者结合，会碰撞出怎样的火花？</p><p><strong>Wubuntu，又称 "Windows Ubuntu"</strong>，是基于 Ubuntu 开发的操作系统，其最具特色之处在于<strong>完全复刻了 Windows 的所有外观和功能</strong>，而且运行时不需要具备 TPM、安全启动或任何其他硬件要求。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-b78011bce450db4cf20d1bb7cc559cd4cb6.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wubuntu.org%2F" target="_blank">https://www.wubuntu.org/</a></u></em></p></blockquote><p><span>此外，Wubuntu</span>&nbsp;通过集成 Wine 提供了与 Windows 应用的兼容性，开发者称 Wubuntu 支持运行 Windows 的 .exe 和 .msi&nbsp;程序，以及支持 Android 应用。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bc1f4a6dcc383b64786c013151ada03e885.png" referrerpolicy="no-referrer"></p><p>Wubuntu 使用的技术栈：</p><p><img src="https://oscimg.oschina.net/oscnet/up-d127229369e54b269f10365f1fad568a5d1.png" referrerpolicy="no-referrer"></p><p>Wubuntu 运行效果：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2e20ee135339d10eb33a0777b818ad6c9f1.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-ffec60452f4b93085c10c897e93761e16df.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-62e9f8b8a805f7ed3d4598c1d5c957a3119.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-1725fe7868e691dfed08e9814c6661a523e.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-61332db8d1390d860514df218a3d8a55444.png" referrerpolicy="no-referrer"></p><p>这界面不能说和 Windows 11 一模一样，只能说完全一致，微软法务部看了真的不会律师函警告吗？</p><p>此外，根据官网的信息，Wubuntu 提供免费版和专业版，其中专业版需要付费购买密钥才可使用，价格为 35 美元。但官方没有介绍两者的功能差异。</p><p>Wubuntu 下载地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wubuntu.org%2Findex.php%2Fget%2Fwubuntu" target="_blank">https://www.wubuntu.org/index.php/get/wubuntu</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 24 Feb 2024 10:07:14 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280083/wubuntu-windows-ubuntu</guid>
            <link>https://www.oschina.net/news/280083/wubuntu-windows-ubuntu</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Databend 开源周报第 132 期]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-42f77d1f307b752e9544a0efaded2715eae.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend" target="_blank">Databend</a> 是一款现代云数仓。专为弹性和高效设计，为您的大规模分析需求保驾护航。自由且开源。即刻体验云服务：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.databend.cn" target="_blank">https://app.databend.cn</a> 。</p></blockquote><h2>What's On In Databend</h2><p>探索 Databend 本周新进展，遇到更贴近你心意的 Databend 。</p><h3>提供对 <code>CREATE [ OR REPLACE ]</code> 的全面支持</h3><p>Databend 现已提供对 <code>CREATE [ OR REPLACE ]</code> 语法糖的全面支持，以覆盖潜在的 <code>DROP IF EXISTS ...</code> + <code>CREATE ...</code> 用例。</p><p>目前支持该语法糖的对象包括：<code>DATABASE</code>、<code>TABLE</code>、<code>VIEW</code>、<code>AGGREGATING INDEX</code>、<code>STREAM</code>、<code>CONNECTION</code>、<code>FUNCTION</code>、<code>FILE FORMAT</code>、<code>MASKING POLICY</code> 等。</p><p>如果您想了解更多信息，欢迎联系 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdatabend.cn%2Fcontact-us%2F" target="_blank">Databend 团队</a>，或查看下面列出的资源。</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend%2Fissues%2F14299" target="_blank">Issue #14299 | tracking: CREATE OR REPLACE</a></li></ul><h2>Code Corner</h2><p>一起来探索 Databend 和周边生态中的代码片段或项目。</p><h3>利用 Databend Cloud 进行查询剖析</h3><p>Databend Cloud 提供可视化分析工具以简化对复杂查询的剖析和理解。</p><p>该剖析工具可以跟踪每个步骤的性能，从 TableScan 持续时间到 HashJoin 的详细信息，并监控数据外溢情况。帮助您轻松分析查询成本和时间，进行针对性优化。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fc41fb6d19013fb622f80bea9d8bcac3ac8.png" alt="" referrerpolicy="no-referrer"></p><p>Databend 团队也充分利用该工具评估代码变更对查询执行的影响。例如 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend%2Fpull%2F14561" target="_blank">PR #14561 | feat: use materialized cte for standard stream</a> 。</p><h2>Highlights</h2><p>以下是一些值得注意的事件，也许您可以找到感兴趣的内容。</p><ul><li>支持 JSON 运算符 <code>#-</code> 。</li><li>在标准流中使用物化公用表表达式（Materialized CTE），以避免重复扫描。</li><li>阅读文档 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.databend.com%2Fguides%2Fdata-management%2F" target="_blank">Docs | Data Management</a> 了解如何利用 Databend 管理、恢复和保护您的数据。</li></ul><h2>What's Up Next</h2><p>我们始终对前沿技术和创新理念持开放态度，欢迎您加入社区，为 Databend 注入活力。</p><h3>支持多表插入</h3><p>Databend 计划支持多表插入以允许使用一条语句有条件地或无条件地插入多个表。</p><p>多表插入语句可以减少执行多个条件插入所需的表扫描和 SQL 。主要适用于数据仓库中的 ETL 过程，支持并行化和/或将非关系型数据转换为关系型格式。</p><pre><code class="language-sql">-- Unconditional multi-table insert
INSERT [ OVERWRITE ] ALL
  intoClause [ ... ]
&lt;subquery&gt;

-- Conditional multi-table insert
INSERT [ OVERWRITE ] { FIRST | ALL }
  { WHEN &lt;condition&gt; THEN intoClause [ ... ] }
  [ ... ]
  [ ELSE intoClause ]
&lt;subquery&gt;
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend%2Fissues%2F14565" target="_blank">Issue #14565 | Feature: Multi-table Inserts support</a></p><p>如果你对这个主题感兴趣，可以尝试解决其中的部分问题或者参与讨论和 PR review 。或者，你可以点击 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.databend.rs%2Fi-m-feeling-lucky" target="_blank">https://link.databend.rs/i-m-feeling-lucky</a> 来挑选一个随机问题，祝好运！</p><h2>Changelog</h2><p>前往查看 Databend 每日构建的变更日志，以了解开发的最新动态。</p><p>地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend%2Freleases" target="_blank">https://github.com/datafuselabs/databend/releases</a></p><h2>Contributors</h2><p>非常感谢贡献者们在本周的卓越工作。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c21d62bccf01220d44b5608d571b364bb7e.png" alt="" referrerpolicy="no-referrer"></p><h2>Connect With Us</h2><p>Databend 是一款开源、弹性、低成本，基于对象存储也可以做实时分析的新式数仓。期待您的关注，一起探索云原生数仓解决方案，打造新一代开源 Data Cloud。</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdatabend.rs" target="_blank">Databend Website</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatafuselabs%2Fdatabend%2Fdiscussions" target="_blank">GitHub Discussions</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FDatafuse_Labs" target="_blank">Twitter</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.databend.rs%2Fjoin-slack" target="_blank">Slack Channel</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 24 Feb 2024 04:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5489811/blog/11044054</guid>
            <link>https://my.oschina.net/u/5489811/blog/11044054</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024 年，只有搞颜色的 P 站真正关心网站性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2024 年，大家觉得一个网站 JS 文件的平均大小应该是多少？1MB、5MB、10MB，还是更加大呢？</p><p>近年来，层出不穷的现代化前端技术让人眼花缭乱，再加上终端设备的配置越来越高，许多网站似乎不用再过分担心性能问题 —— 常常打开网站就要下载超过 10M 的&nbsp;<span>JS 文件。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-25992e8199a790e84d4276053e0858e1b77.png" referrerpolicy="no-referrer"></p><p>知名开源开发者 Nikita Prokopov 对常见网站的 JS 文件大小进行了统计（未压缩），结果有点令人出乎意料。</p><hr><h3><strong><span style="background-color:#e67e22">以静态页面为主的网站</span></strong></h3><ul><li><h4>Wikipedia, 0.2&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1421231d12c5140f4dc29b93285f2916686.png" referrerpolicy="no-referrer"></p><ul><li><h4>Linear, 3&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e8a9b91df6faa5480f2103efd9cd244aa66.png" referrerpolicy="no-referrer"></p><ul><li><h4>Zoom, 6&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-63b072146754bdd245d2af6dcb63dc79c3e.png" referrerpolicy="no-referrer"></p><ul><li><h4>Vercel, 6&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-158a201b80b904688e2a4f9590f8345b4df.png" referrerpolicy="no-referrer"></p><ul><li><h4>Gitlab,<span style="background-color:#f1c40f"> 13&nbsp;MB</span></h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3de67d966870abe2b064d536d3f770d66bc.png" referrerpolicy="no-referrer"></p><ul><li><h4>Medium, 3&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a132d36ae636b6435528e8d174ad233f7d2.png" referrerpolicy="no-referrer"></p><ul><li><h4>Quora, 4.5&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3a6c4a73ff80a50c4052aa7faeced43118b.png" referrerpolicy="no-referrer"></p><ul><li><h4>Pinterest, <span style="background-color:#f1c40f">10&nbsp;MB</span></h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bb825579fd8f6d787be8051e5b32e081fed.png" referrerpolicy="no-referrer"></p><hr><h3><strong><span style="background-color:#e67e22">以搜索功能为主的网站</span></strong></h3><ul><li><h4>StackOverflow, 3.5&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-860ef367515f1ea0ae55c567ed403a1a9c4.png" referrerpolicy="no-referrer"></p><ul><li><h4>NPM, 4&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e55316c24ebe2e2a885a576106ac801e0b9.png" referrerpolicy="no-referrer"></p><ul><li><h4>Airbnb, 7&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a59cfa95b748bb2888d93b3b647a63ca416.png" referrerpolicy="no-referrer"></p><ul><li><h4>Booking.com, <span style="background-color:#f1c40f">12&nbsp;MB</span></h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fee82c93858ef67b723612d9e1ae53314ed.png" referrerpolicy="no-referrer"></p><ul><li><h4>Google, 9&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d677500f815f8156922beb9938670463a68.png" referrerpolicy="no-referrer"></p><h3><span style="background-color:#e67e22">具有简单交互的单应用网站</span></h3><ul><li><h4>Google Translate, 2.5&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-31a83dfa4eba4b19f6010f5479ce06fc03b.png" referrerpolicy="no-referrer"></p><ul><li><h4>ChatGPT, 7&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-76109ab4826fd1e649be9e2d303e44be5ff.png" referrerpolicy="no-referrer"></p><h3><span style="background-color:#e67e22">视频/多媒体类网站</span></h3><ul><li><h4>Loom, 7&nbsp;MB</h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-35a3913d214fb0b4ee6edc2929f9cec5b77.png" referrerpolicy="no-referrer"></p><ul><li><h4>YouTube, <span style="background-color:#f1c40f">12&nbsp;MB</span></h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-11c1827cfb0fcf18a4d1ab929ce533a8d42.png" referrerpolicy="no-referrer"></p><ul><li><h4>Pornhub, <span style="background-color:#16a085">&nbsp;1.4&nbsp;MB</span></h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6531a939e4e613a4503e6bec46e4e5eb0eb.png" referrerpolicy="no-referrer"></p><p>目前看下来，维基百科网站的 JS 文件最小，仅有 0.2MB。Pornhub 次之，为 1.4MB。</p><p>但这俩在下面这个网站前面都是弟弟——</p><ul><li><h4><strong>jQuery, 0.1 MB</strong></h4></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a30ca6a8e2eb8cbc214df1411e42772b4c4.png" referrerpolicy="no-referrer"></p><hr><p>最后看看本站：</p><p><img src="https://oscimg.oschina.net/oscnet/up-8c7490be3117d1e5730f1bb2d6ab1bb8e77.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 09:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279994/js-bloat-2024</guid>
            <link>https://www.oschina.net/news/279994/js-bloat-2024</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Oracle 致力解决 Java 虚拟线程「Pinning」问题]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>虚拟线程在 2023 年 9 月发布的 JDK 21 中正式成为一项稳定功能。该功能在 Java 生态系统中反响极佳，但仍存在一些痛点。Oracle 日前在&nbsp;Inside Java 网站上详细<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Finside.java%2F2024%2F02%2F21%2Fquality-heads-up%2F" target="_blank">介绍</a>了虚拟线程的「Pinning」问题。</p><p>最常见的两种情况是：(a) 虚拟线程在 synchronized method 中驻留（如执行 socket I/O）；(b) <span style="color:#333333">虚拟线程阻塞进入&nbsp;synchronized method</span>，因为对象的相关监视器被另一个线程持有。</p><p>在这两种情况下，载体或本地线程都不会被释放去做其他工作。因此可能会影响性能和可扩展性，并可能<span style="color:#333333">在某些情况下</span>导致饥饿和死锁。官方最近发布的一个<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Finside.java%2F2024%2F02%2F17%2Fvirtual-threads-next-steps%2F" target="_blank">Virtual Threads Next Steps</a>&nbsp;视频中则更详细地解释了其中的原因，并讨论了一些潜在的解决方案。</p><p><img height="196" src="https://oscimg.oschina.net/oscnet/up-6a2e93ce6802a570c1704258c9a589e998e.png" width="500" referrerpolicy="no-referrer"></p><p>项目团队正在努力解决这些问题。Java Project Loom 的新早期访问版本<span style="color:#4e4242">引入了对对象监视器实现的更改</span><span style="color:#333333">，但不适用这两种常见情况。因此 </span><span style="color:#4e4242">Loom&nbsp;</span><span style="color:#333333">团队正在寻求用户的帮助，以测试这些更新的对象监控器在使用虚拟线程的代码和大量同步的库中的可靠性和性能。可通过&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmail.openjdk.org%2Fpipermail%2Floom-dev%2F" target="_blank">Loom 邮件列表</a>&nbsp;<span style="color:#333333">报告或反馈问题。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 06:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279954/java-virtual-threads-pinning-issue</guid>
            <link>https://www.oschina.net/news/279954/java-virtual-threads-pinning-issue</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Koordinator v1.4 正式发布！为用户带来更多的计算负载类型和更灵活的资源管理机制]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>背景</h3><p style="text-align:justify">Koordinator 作为一个积极发展的开源项目，自 2022 年 4 月发布 v0.1.0 版本以来，经历了多次迭代，持续为 Kubernetes 生态系统带来创新和增强。项目的核心是提供混部工作负载编排、混部资源调度、混部资源隔离和混部性能调优的综合解决方案，帮助用户优化容器性能，并提升集群资源使用效率。</p><p style="text-align:justify">在过去的版本迭代中，Koordinator 社区不断壮大，已经得到了包括阿里巴巴、蚂蚁科技、Intel、小米、小红书、爱奇艺、360、有赞、趣玩、美亚柏科、PITS 等知名企业工程师的积极参与和贡献。每一个版本都是在社区共同努力下推进的，反映了项目在实际生产环境中解决问题的能力。</p><p style="text-align:justify"><strong>今天我们很高兴的向大家宣布，Koordinator v1.4.0 版本正式发布。</strong>在本次发布中，Koordinator 引入了 Kubernetes 与 YARN 负载混部、NUMA 拓扑对齐策略、CPU 归一化和冷内存上报等新特性，同时重点增强了弹性配额管理、宿主机非容器化应用的 QoS 管理、重调度防护策略等领域的功能。这些新增和改进点旨在更好地支持企业级 Kubernetes 集群环境，特别是对于复杂和多样化的应用场景。</p><p style="text-align:justify">v1.4.0 版本的发布，将为用户带来更多的计算负载类型支持和更灵活的资源管理机制，我们期待这些改进能够帮助用户应对更多企业资源管理挑战。在 v1.4.0 版本中，共有 11 位新加入的开发者参与到了 Koordinator 社区的建设，他们是&nbsp;<em>@shaloulcy，@baowj-678，@zqzten，@tan90github，@pheianox，@zxh326，@qinfustu，@ikaven1024，@peiqiaoWang，@bogo-y，@xujihui1985</em>，感谢期间各位社区同学的积极参与和贡献，也感谢所有同学在社区的持续投入。</p><span id="OSC_h3_2"></span><h3>版本功能特性解读</h3><span id="OSC_h4_3"></span><h4>1. 支持 K8s 与 YARN 混部</h4><p style="text-align:justify">Koordinator 已经支持了 K8s 生态内的在离线混部，然而在 K8s 生态外，仍有相当数量的大数据任务运行在传统的 Hadoop YARN 之上。YARN 作为发展多年的大数据生态下的资源管理系统，承载了包括 MapReduce、Spark、Flink 以及 Presto 等在内的多种计算引擎。</p><p style="text-align:justify">Koordinator 社区会同来自阿里云、小红书、蚂蚁金服的开发者们共同启动了 Hadoop YARN 与 K8s 混部项目 Koordinator YARN Copilot，支持将 Hadoop NodeManager 运行在 kubernetes 集群中，充分发挥不同类型负载错峰复用的技术价值。Koordinator YARN Copilot 具备以下特点：</p><ul><li><strong>面向开源生态</strong></li></ul><p style="text-align:justify">基于 Hadoop YARN 开源版本，不涉及对 YARN 的侵入式改造；</p><ul><li><strong>统一资源优先级和 QoS 策略</strong></li></ul><p style="text-align:justify">YARN NM 使用 Koordinator 的 Batch 优先级资源，遵循 Koordinator QoS 管理策略；</p><ul><li><strong>节点级别的资源共享</strong></li></ul><p style="text-align:justify">Koordinator 提供的混部资源，既可被 K8s Pod 使用，也可被 YARN task 使用，不同类型的离线应用可运行在同一节点。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-ac0aa93eb176110201a885bb0d474c31_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">关于 Koordinator YARN Copilot 的详细设计，以及在小红书生产环境的使用情况，请参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fmp.weixin.qq.com%2Fs%253Fspm%253Da2c6h.13046898.publish-article.4.5bb96ffaCJHZTt%2526__biz%253DMzUzNzYxNjAzMg%253D%253D%2526mid%253D2247559704%2526idx%253D1%2526sn%253D3aed8968e50c85f7af7d7e79387b9365%2526chksm%253Dfae7e1d7cd9068c10df63fa4cc9362ee259bcb9c5a4f7d68439d6f9779bb31492b072142582e%2526scene%253D21%2523wechat_redirect" target="_blank">往期文章：《Koordinator 助力云原生应用性能提升：小红书混部技术实践》</a>以及社区官方文档<strong>[1]</strong>。</p><span id="OSC_h4_4"></span><h4>2. 引入 NUMA 拓扑对齐策略</h4><p style="text-align:justify">运行在 Kubernetes 集群中的工作负载日益多样化。尤其是在机器学习等领域，对于高性能计算资源的需求持续上升。在这些领域中，不仅需要大量 CPU 资源，还经常需要 GPU 和 RDMA 等其他高速计算资源配合使用；并且，为了获得最佳的性能，这些资源往往需要在同一个 NUMA 节点，甚至同一个 PCIE 中。</p><p style="text-align:justify">Kubernetes 的 Kubelet 提供了 Topology Manager 来管理资源分配的 NUMA 拓扑，试图在 Kubelet 的 Admission 阶段从节点层面对齐多种资源的拓扑。然而，节点组件没有调度器的全局视角以及为 Pod 选择节点的时机，可能导致 Pod 被调度到无法满足拓扑对齐策略的节点上，从而导致 Pod 由于 Topology Affinity 错误无法启动。</p><p style="text-align:justify">为了解决这一问题，Koordinator 将 NUMA 拓扑选择和对齐的时机放在中心调度器中，从集群级别优化资源之间的 NUMA 拓扑。在本次发布的版本中，Koordinator 将 CPU 资源（包含 Batch 资源）的 NUMA 感知调度和 GPU 设备的 NUMA 感知调度作为 alpha 功能支持，整套 NUMA 感知调度快速演进中。</p><p style="text-align:justify">Koordinator 支持用户通过节点的 Label 配置节点上多种资源的 NUMA 拓扑对齐策略，可配置策略如下：</p><ul><li>None 是默认策略，不执行任何拓扑对齐。</li><li>BestEffort 表示节点不严格按照 NUMA 拓扑对齐来分配资源。只要节点的剩余总量满足 Pods 的需求，调度器总是可以将这样的节点分配给 Pods。</li><li>Restricted 表示节点严格按照 NUMA 拓扑对齐来分配资源，即调度器在分配多个资源时必须只选择相同的一个或多个 NUMA 节点，否则不应使用该节点；可以使用多个 NUMA 节点。例如，如果一个 Pod 请求 33C，并且每个 NUMA 节点有 32C，那么它可以被分配使用两个 NUMA 节点。如果这个 Pod 还需要请求 GPU/RDMA，那么它需要位于与 CPU 相同的 NUMA 节点上。</li><li>SingleNUMANode 与 Restricted 类似，也是严格按照 NUMA 拓扑对齐，但与 Restricted 不同的是，Restricted 允许使用多个 NUMA 节点，而 SingleNUMANode 只允许使用一个 NUMA 节点。</li></ul><p style="text-align:justify">举例，我们可以为 node-0 设置策略 SingleNUMANode：</p><pre><code>apiVersion: v1
kind: Node
metadata:
  labels:
    node.koordinator.sh/numa-topology-policy: "SingleNUMANode"
  name: node-0
spec:
  ...</code></pre><p style="text-align:justify">在生产环境中，用户可能已经开启了 Kubelet 的拓扑对齐策略，这个策略会由 koordlet 更新到 NodeResourceTopologyCRD 对象中的 TopologyPolicies 字段。当 Kubelet 的策略和用户在 Node 上设置的策略相冲突时，以 Kubelet 策略为准。Koordinator 调度器基本采用与 Kubelet Topology Manager 相同的 NUMA 对齐策略语义，Kubelet 策略 SingleNUMANodePodLevel 和 SingleNUMANodeContainerLevel 被映射为 SingleNUMANode。</p><p style="text-align:justify">在为节点配置好 NUMA 对齐策略的前提下，调度器可以为每个 Pod 选出许多个符合条件的 NUMA Node 分配结果。Koordinator 当前支持 NodeNUMAResource 插件配置 CPU 和内存资源的 NUMA Node 分配结果打分策略，包括 LeastAllocated 和 MostAllocated，默认为 LeastAllocated 策略，资源支持配置权重。调度器最终将选择得分最高的 NUMA Node 分配结果。如下例，我们配置 NUMA Node 分配结果打分策略为 MostAllocated：</p><pre><code>apiVersion: kubescheduler.config.k8s.io/v1beta2
kind: KubeSchedulerConfiguration
profiles:
  - pluginConfig:
      - name: NodeNUMAResource
        args:
          apiVersion: kubescheduler.config.k8s.io/v1beta2
          kind: NodeNUMAResourceArgs
          scoringStrategy:  # Here configure Node level scoring strategy
            type: MostAllocated
            resources:
              - name: cpu
                weight: 1
              - name: memory
                weight: 1
              - name: "kubernetes.io/batch-cpu"
                weight: 1
              - name: "kubernetes.io/batch-memory"
                weight: 1
          numaScoringStrategy: # Here configure NUMA-Node level scoring strategy
            type: MostAllocated
            resources:
              - name: cpu
                weight: 1
              - name: memory
                weight: 1
              - name: "kubernetes.io/batch-cpu"
                weight: 1
              - name: "kubernetes.io/batch-memory"
                weight: 1</code></pre><span id="OSC_h4_5"></span><h4>3. ElasticQuota 再进化</h4><p style="text-align:justify">为了充分地利用集群资源、降低管控系统成本，用户常常将多个租户的负载部署在一个集群中。在集群资源有限的情况下，不同租户之间必然会发生资源争抢。有的租户的负载可能一直被满足，而有的租户的负载一直无法得到执行。这就产生对公平性的诉求。配额机制是非常自然地保障租户间公平性的方式，给每个租户一个配额，租户可以使用配额内的资源，超过配额的任务将不被调度和执行。然而，简单的配额管理无法满足租户对云的弹性期待。用户希望除了配额之内的资源请求可以被满足外，配额之外的资源请求也可以按需地被满足。</p><p style="text-align:justify">在之前的版本中，Koordinator 复用了上游 ElasticQuota 的协议，允许租户设置 Min 表达其一定要满足的资源诉求，允许设置 Max 限制其最大可以使用的资源和表达在集群资源不足的情况下对集群剩余资源的使用权重。另外，Koordinator 观察到，一些租户可能通过 Min 申请了配额，但是实际的任务申请可能并没有充分利用该配额。由此，为了更近一步地提高资源利用率，Koordinator 允许租户间借用/归还资源。</p><p style="text-align:justify">除了提供弹性的配额机制满足租户按需诉求外，Koordinator 在 ElasticQuota 上增加注解将其组织成树的结构，方便用户表达树形的组织架构。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-0f15360828d04b31ebe10218c08a8758_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">上图是使用了 Koordinator 弹性配额的集群中常见的 Quota 结构树。Root Quota 是连接配额与集群中实际资源之间的桥梁。在之前的设计中，Root Quota 只在调度器逻辑中存在，在本次发布中，我们将 Root Quota 也通过 CRD 的形式暴露给用户，用户可以通过 koordinator-root-quota 这个 ElasticQuota CRD 查看 Root Quota 信息。</p><p style="text-align:justify"><strong>3.1 引入 Multi QuotaTree</strong></p><p style="text-align:justify">大型集群中的节点的形态是多样的，例如云厂商提供的 ECS VM 会有不同的架构，常见的是 amd64 和 arm64，相同架构又会有不同种类的机型，而且一般会把节点按可用区划分。不同类型的节点放到同一个 Quota Tree 中管理时，其特有的属性将丢失，当用户希望精细化管理机器的特有属性时，当前的 ElasticQuota 显得不够精确。为了满足用户灵活的资源管理或资源隔离诉求，Koordinator 支持用户将集群中的资源划分为多份，每一份由一个 Quota Tree 来管理，如下图所示：</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-e673d71606d710f3a447f0e504527d43_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">同时，为了帮助用户简化管理复杂性，Koordinator 在 v1.4.0 中，引入了 ElasticQuotaProfile 机制，用户可以通过 nodeSelector 快速的将节点关联到不同的 QuotaTree 中，如下实例所示：</p><pre><code>apiVersion: quota.koordinator.sh/v1alpha1
kind: ElasticQuotaProfile
metadata:
  labels:
    kubernetes.io/arch: amd64
  name: amd64-profile
  namespace: kube-system
spec:
  nodeSelector:
    matchLabels:
      kubernetes.io/arch: amd64 // 挑选 amd64 节点
  quotaName: amd64-root-quota   // 匹配的 root quota 名称
---
apiVersion: quota.koordinator.sh/v1alpha1
kind: ElasticQuotaProfile
metadata:
  labels:
    kubernetes.io/arch: arm64   
  name: arm64-profile
  namespace: kube-system
spec:
  nodeSelector:
    matchLabels:
      kubernetes.io/arch: arm64  // 挑选 arm64 节点
  quotaName: arm64-root-quota    // 匹配的 root quota 名称</code></pre><p style="text-align:justify">关联好 QuotaTree 之后，用户在每一个 QuotaTree 中与之前的 ElasticQuota 用法一致。当用户提交 Pod 到对应的 Quota 时，当前仍然需要用户完成 Pod NodeAffinity 的管理，以确保 Pod 运行在正确的节点上。未来，我们会增加一个特性帮助用户自动管理 Quota 到 Node 的映射关系。</p><p style="text-align:justify"><strong>3.2 支持 non-preemptible</strong></p><p style="text-align:justify">Koordinator ElasticQuota 支持把 ElasticQuota 中 min 未使用的部分共享给其他 ElasticQuota 使用从而提高资源利用效率，但当资源紧张时，会通过抢占机制把借用配额的 Pod 抢占驱逐走拿回资源。</p><p style="text-align:justify">在实际生产环境中，有一些在线服务如果从其他 ElasticQuota 中借用了这部分额度，后续又发生了抢占，是可能影响服务质量的。这类工作负载实质上是不能被抢占的。</p><p style="text-align:justify">为了实现这个机制，Koordinator v1.4.0 引入了新的 API，用户只需要在 Pod 上声明 quota.scheduling.koordinator.sh/preemptible: false 表示这个 Pod 不可以被抢占。</p><p style="text-align:justify">调度器调度时发现 Pod 声明了不可抢占，那么此类 Pod 的可用配额的上限不能超过 min，所以这里也需要注意的是，启用该能力时，一个 ElasticQuota 的 min 需要设置的合理，并且集群内有相应的资源保障。</p><p style="text-align:justify">这个特性不会破坏原有的行为。</p><pre><code>apiVersion: v1
kind: Pod
metadata:
  name: pod-example
  namespace: default
  labels:
    quota.scheduling.koordinator.sh/name: "quota-example"
    quota.scheduling.koordinator.sh/preemptible: false
spec:
...</code></pre><p style="text-align:justify"><strong>3.3 其它改进</strong></p><p style="text-align:justify">1. Koordinator Scheduler 过去支持跨 Namespace 使用同一个 ElasticQuota 对象，但有一些场景下，希望只被一个或者多个有限的 Namespace 可以共享同一个对象，为了支持这个场景，用户可以在 ElasticQuota 上增加 annotation quota.scheduling.koordinator.sh/namespaces，对应的值为一个 JSON 字符串数组。</p><p style="text-align:justify">2. 性能优化：过去的实现中，当 ElasticQuota 发生变化时，ElasticQuota 插件会重建整棵 Quota 树，在 v1.4.0 版本中做了优化。</p><p style="text-align:justify">3. 支持忽略 Overhead：当 Pod 使用一些安全容器时，一般是在 Pod 中声明 Overhead 表示安全容器自身的资源开销，但这部分资源成本最终是否归于终端用户承担取决于资源售卖策略。当期望不用用户承担这部分成本时，那么就要求 ElaticQuota 忽略 overhead。在 v1.4.0 版本中，可以开启 featureGate ElasticQuotaIgnorePodOverhead 启用该功能。</p><span id="OSC_h4_6"></span><h4>4. CPU 归一化</h4><p style="text-align:justify">随着 Kubernetes 集群中节点硬件的多样化，不同架构和代数的 CPU 之间性能差异显著。因此，即使 Pod 的 CPU 请求相同，实际获得的计算能力也可能大不相同，这可能导致资源浪费或应用性能下降。CPU 归一化的目标是通过标准化节点上可分配 CPU 的性能，来保证每个 CPU 单元在 Kubernetes 中提供的计算能力在异构节点间保持一致。</p><p style="text-align:justify">为了解决该问题，Koordinator 在 v1.4.0 版本中实现了一套支持 CPU 归一化机制，根据节点的资源放大策略，调整节点上可分配的 CPU 资源数量，使得集群中每个可分配的 CPU 通过缩放实现算力的基本一致。整体的架构如下图所示：</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-b0e335f164d52e400107a5294a2a7dbb_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">CPU 归一化分为两个步骤：</p><p style="text-align:justify">1. CPU 性能评估，计算不同 CPU 的性能基准，可以参考工业级性能评测标准 SPEC CPU<strong>[2]</strong>，这部分 Koordinator 项目未提供；</p><p style="text-align:justify">2. 配置 CPU 归一化系数到 Koordinator，调度系统基于归一化系数来调度资源，这部分 Koordinator 提供。</p><p style="text-align:justify">将 CPU 归一化比例信息配置到 koord-manager 的 slo-controller-config 中，配置示例如下：</p><pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: slo-controller-config
  namespace: koordinator-system
data:
  cpu-normalization-config: |
    {
      "enable": true,
      "ratioModel": {
         "Intel(R) Xeon(R) Platinum 8269CY CPU @ 2.50GHz": {
           "baseRatio": 1.29,
           "hyperThreadEnabledRatio": 0.82,
           "turboEnabledRatio": 1.52,
           "hyperThreadTurboEnabledRatio": 1.0
         },
         "Intel Xeon Platinum 8369B CPU @ 2.90GHz": {
           "baseRatio": 1.69,
           "hyperThreadEnabledRatio": 1.06,
           "turboEnabledRatio": 1.91,
           "hyperThreadTurboEnabledRatio": 1.20
         }
      }
    }
  # ...</code></pre><p style="text-align:justify">对于配置了 CPU 归一化的节点，Koordinator 通过 Webhook 拦截 Kubelet 对 Node.Status.Allocatable 的更新以实现 CPU 资源的缩放，最终在节点上呈现出归一后的 CPU 资源可分配量。</p><span id="OSC_h4_7"></span><h4>5. 改进的重调度防护策略</h4><p style="text-align:justify">Pod 迁移是一个复杂的过程，涉及审计、资源分配、应用启动等步骤，并且与应用升级、扩展场景以及集群管理员的资源操作和维护操作混合在一起。因此，如果同时有大量 Pods 正在进行迁移，可能会对系统的稳定性产生影响。此外，如果同一工作负载的许多 Pods 同时被迁移，也会影响应用的稳定性。此外，如果同时迁移多个作业中的 Pods，可能会造成惊群效应。因此，我们希望顺序处理每个作业中的 Pods。</p><p style="text-align:justify">Koordinator 在之前提供的 PodMigrationJob 功能中已经提供了一些防护策略来解决上述问题。在 v1.4.0 版本中，Koordinator 将之前的防护策略增强为仲裁机制。当有大量的 PodMigrationJob 可以被执行时，由仲裁器通过排序和筛选，来决定哪些 PodMigrationJob 可以得到执行。</p><p style="text-align:justify">排序过程如下：</p><ul><li>根据迁移开始时间与当前时间的间隔进行排序，间隔越小，排名越高。</li><li>根据 PodMigrationJob 的 Pod 优先级进行排序，优先级越低，排名越高。</li><li>按照工作负载分散 Jobs，使得同一作业中的 PodMigrationJobs 靠近。</li><li>如果作业中已有 Pods 正在迁移，则该 PodMigrationJob 的排名更高。</li></ul><p style="text-align:justify">筛选过程如下：</p><ul><li>根据工作负载、节点、命名空间等对 PodMigrationJob 进行分组和筛选。</li><li>检查每个工作负载中正在运行状态的 PodMigrationJob 数量，达到一定阈值的将被排除。</li><li>检查每个工作负载中不可用副本的数量是否超出了最大不可用副本数，超出的将被排除。</li><li>检查目标 Pod 所在节点上正在迁移的 Pod 数量是否超过单个节点的最大迁移量，超出的将被排除。</li></ul><span id="OSC_h4_8"></span><h4>6. 冷内存上报</h4><p style="text-align:justify">为提升系统性能，内核一般尽可能不让应用程序请求的页面缓存空闲，而是尽可能将其分配给应用程序。虽然内核分配了这些内存，但是应用可能不再访问，这些内存被称为冷内存。</p><p style="text-align:justify">Koordinator 在 1.4 版本中引入冷内存上报功能，主要为未来冷内存回收功能打下基础。冷内存回收主要用于应对两个场景：</p><ul><li>对于标准的 Kubernetes 集群，当节点内存水位过高时，突发的内存请求容器导致系统直接内存回收，操作系统的直接内存回收触发时会影响已经运行容器的性能，如果回收不及时极端场景可能触发整机 oom。保持节点内存资源的相对空闲，对提升运行时稳定性至关重要。</li><li>在混部场景中，高优先级应用程序请求但未使用的资源可以被低优先级应用程序回收利用。对内存而言，操作系统未回收的内存，是不能被 Koordinator 调度系统看到的。为了提高混部资源效率，回收容器未使用的内存页面可以提高整机的资源利用效率。</li></ul><p style="text-align:justify">Koordlet 在 Collector Plugins 中添加了一个冷页面回收器，用于读取由 kidled（Anolis 内核）、kstaled（Google）或 DAMON（Amazon）导出的 cgroup 文件 memory.idle_stat。该文件包含页面缓存中的冷页面信息，并存在于 memory 的每个层次结构中。目前 koordlet 已经对接了 kidled 冷页面收集器并提供了其他冷页面收集器接口。</p><p style="text-align:justify">在收集冷页面信息后，冷页面回收器将把收集到的指标（例如节点、Pod 和容器的热页面使用量和冷页面大小）存到 metriccache 中，最后该数据会被上报到 NodeMetric CRD 中。</p><p style="text-align:justify">用户可以通过 NodeMetric 启用冷内存回收和配置冷内存收集策略，当前提供了 usageWithHotPageCache、usageWithoutPageCache 和 usageWithPageCache 三种策略，更多的细节详见社区设计文档<strong>[3]</strong>。</p><span id="OSC_h4_9"></span><h4>7. 非容器化应用的 QoS 管理</h4><p style="text-align:justify">在企业容器化过程中，除了已经运行在 K8s 上的应用，可能还会存在一些非容器化的应用运行在主机上。为了更好兼容企业在容器化过程这一过渡态，Koordinator 开发了节点资源预留机制，可以在尚未容器化的应用预留资源并赋予特定的 QoS 特性。与 Kubelet 提供的资源预留配置不同，Koordinator 主要目标是解决这些非容器化应用与容器化应用运行时的 QoS 问题，整体的方案如下图所示：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-5edba11d4ab8bac0dcef2bc16d12d4f6_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">目前，应用程序需要按照规范将进程启动到对应的 cgroup 中，Koordinator 未实现自动的 cgroup 搬迁工具。针对宿主机非容器化应用，支持 QoS 如下：</p><ul><li><strong>LS (Latency Sensitive)</strong><ul><li>CPU QoS(Group Identity)：应用按照规范将进程运行在 cgroup 的 cpu 子系统中，koordlet 根据 CPU QoS 的配置 resource-qos-config 为其设置 Group Identity 参数；</li><li>CPUSet Allocation：应用按照规范将进程运行在 cgroup 的 cpu 子系统中，koordlet 将为其设置 cpu share pool 中的所有 CPU 核心。</li></ul></li><li><strong>BE (Best-effort)</strong><ul><li>CPU QoS(Group Identity)：应用按照规范将进程运行在 cgroup 的 cpu 子系统中，koordlet 根据 CPU QoS 的配置为其设置 Group Identity 参数。</li></ul></li></ul><p style="text-align:justify">关于宿主机应用 QoS 管理的详细设计，可以参考社区文档<strong>[4]</strong>，后续我们将陆续增加其他 QoS 策略对宿主机应用的支持。</p><span id="OSC_h4_10"></span><h4>8. 其它特性</h4><p style="text-align:justify">除了上述新特性和功能增强外，Koordinator 在 v1.4.0 版本还做了一些如下的 bugfix 和优化：</p><ul><li><strong>RequiredCPUBindPolicy</strong></li></ul><p style="text-align:justify">精细化 CPU 编排支持 Required 的 CPU 绑定策略配置，表示严格按照指定的 CPU 绑定策略分配 CPU，否则调度失败。</p><ul><li><strong>CICD</strong></li></ul><p style="text-align:justify">Koordinator 社区在 v1.4.0 提供了一套 e2e 测试的 Pipeline；提供了 ARM64 镜像。</p><ul><li><strong>Batch 资源计算策略优化</strong></li></ul><p style="text-align:justify">支持了 maxUsageRequest 的计算策略，用于更保守地超卖高优资源；优化了节点上短时间大量 Pod 启停时，Batch allocatable 被低估的问题；完善了对 hostApplication、thirdparty allocatable、dangling pod used 等特殊情况的考虑。</p><ul><li><strong>其它</strong></li></ul><p style="text-align:justify">利用 libpfm4&amp;perf group 优化 CPI 采集、SystemResourceCollector 支持自定义的过期时间配置、BE Pod 支持根据 evictByAllocatable 策略计算 CPU 满足度、Koordlet CPUSetAllocator 修复了对于 LS 和 None Qos 的 Pod 的过滤逻辑、RDT 资源控制支持获得 sandbox 容器的 task IDs 等。</p><p style="text-align:justify">通过 v1.4.0 Release<strong>[5]</strong>页面，可以看到更多包含在 v1.4.0 版本的新增功能。</p><span id="OSC_h3_11"></span><h3>未来计划</h3><p style="text-align:justify">在接下来的版本中，Koordinator 目前规划了以下功能：</p><ul><li><strong>Core Scheduling</strong></li></ul><p style="text-align:justify">在运行时侧，Koordinator 开始探索下一代 CPU QoS 能力，通过利用 Linux Core Scheduling 等内核机制，增强的物理核维度的资源隔离，降低混部的安全性风险，相关工作详见 Issue #1728<strong>[6]</strong>。</p><ul><li><strong>设备联合分配</strong></li></ul><p style="text-align:justify">在 AI 大模型分布式训练场景中，不同机器 GPU 之间通常需要通过高性能网卡相互通信，且 GPU 和高性能网卡就近分配的时候性能更好。Koordinator 正在推进支持多种异构资源的联合分配，目前已经在协议上和调度器分配逻辑上支持联合分配；单机侧关于网卡资源的上报逻辑正在探索中。</p><p style="text-align:justify">更多信息，敬请关注 Milestone v1.5.0<strong>[7]</strong>。</p><span id="OSC_h3_12"></span><h3>结语</h3><p style="text-align:justify">最后，我们十分感谢 Koordinator 社区的所有贡献者和用户，是您们的积极参与和宝贵意见让 Koordinator 不断进步。我们期待您继续提供反馈，并欢迎新的贡献者加入我们的行列。</p><p style="text-align:justify"><strong>相关链接：</strong></p><p style="text-align:justify">[1] 社区官方文档</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fkoordinator.sh%2Fzh-Hans%2Fdocs%2Fnext%2Fdesigns%2Fkoordinator-yarn%2F%253Fspm%253Da2c6h.13046898.publish-article.5.5bb96ffaCJHZTt" target="_blank">https://koordinator.sh/zh-Hans/docs/next/designs/koordinator-yarn/</a></em></u></p><p style="text-align:justify">[2] SPEC CPU</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.spec.org%2Fcpu2017%2F%253Fspm%253Da2c6h.13046898.publish-article.6.5bb96ffaCJHZTt" target="_blank">https://www.spec.org/cpu2017/</a></em></u></p><p style="text-align:justify">[3] 设计文档</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fkoordinator-sh%2Fkoordinator%2Fblob%2Fmain%2Fdocs%2Fproposals%2Fkoordlet%2F20230728-support-cold-memory-compute.md%253Fspm%253Da2c6h.13046898.publish-article.7.5bb96ffaCJHZTt%2526file%253D20230728-support-cold-memory-compute.md" target="_blank">https://github.com/koordinator-sh/koordinator/blob/main/docs/proposals/koordlet/20230728-support-cold-memory-compute.md</a></em></u></p><p style="text-align:justify">[4] 社区文档</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fkoordinator.sh%2Fzh-Hans%2Fdocs%2Fnext%2Fuser-manuals%2Fhost-application-qos%2F%253Fspm%253Da2c6h.13046898.publish-article.8.5bb96ffaCJHZTt" target="_blank">https://koordinator.sh/zh-Hans/docs/next/user-manuals/host-application-qos/</a></em></u></p><p style="text-align:justify">[5] v1.4.0 Release</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fkoordinator-sh%2Fkoordinator%2Freleases%2Ftag%2Fv1.4.0%253Fspm%253Da2c6h.13046898.publish-article.9.5bb96ffaCJHZTt%2526file%253Dv1.4.0" target="_blank">https://github.com/koordinator-sh/koordinator/releases/tag/v1.4.0</a></em></u></p><p style="text-align:justify">[6] Issue #1728</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fkoordinator-sh%2Fkoordinator%2Fissues%2F1728%253Fspm%253Da2c6h.13046898.publish-article.10.5bb96ffaCJHZTt" target="_blank">https://github.com/koordinator-sh/koordinator/issues/1728</a></em></u></p><p style="text-align:justify">[7] Milestone v1.5.0</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fkoordinator-sh%2Fkoordinator%2Fmilestone%2F14%253Fspm%253Da2c6h.13046898.publish-article.11.5bb96ffaCJHZTt" target="_blank">https://github.com/koordinator-sh/koordinator/milestone/14</a></em></u></p><p style="text-align:justify"><em>作者：乔普</em></p><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1423263%3Futm_content%3Dg_1000390303" target="_blank">原文链接</a></strong></p><p style="text-align:justify"><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 06:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/11044520</guid>
            <link>https://my.oschina.net/yunqi/blog/11044520</link>
            <author>
                <![CDATA[阿里云云栖号]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[为什么 Chromebook 键盘采用小写字母？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Chromebook 键盘上的所有按键都是小写字母。自 2010 年推出第一款 Chromebook 原型机 CR-48 以来，他们就一直如此。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fdbc3ca95eb510cf632ffad2f3b12b6bf02.png" referrerpolicy="no-referrer"></p><p>谷歌最近<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Fproducts%2Fchromebooks%2Fchromebooks-lowercase-keyboard%2F" target="_blank">解释</a></u>了他们对「全小写键盘」的设计思路。当时参与早期 Chromebook 设计的 ChromeOS 团队高级主管 Alexander Kuscher 认为可以对按键进行精简，从而打造一款易于使用、对用户友好的键盘。</p><p>Chromebook 团队高级产品经理 Donny Reynolds 提出：</p><blockquote><p>我们已经习惯了键盘上的大写字母，但如果你进入一个文本开始编写文档，并开始在传统键盘上键入，按键就会与屏幕上显示的不一致，对吧？你按下大写'D'键，但出现的却是小写'd'。</p></blockquote><p>因此，他们决定不再为 Chromebook 键盘印上大写字母——确保用户「所见即所得」。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f381533dbaf1652c58fb82ffd2f52aa40f7.png" referrerpolicy="no-referrer"></p><p>其实当时许多手机和平板电脑已经配备了简化的现代键盘——Android 手机在 2008 年首次亮相时就采用了小写键盘。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e678bff4959ef28477371fd4d648545eed9.png" referrerpolicy="no-referrer"></p><p><em>早在 2008 年初代 G1 推出时，Android 就开启了小写键盘革命</em>。</p><p>因此 Donny Reynolds 表示：「当我们开始制造 Chromebook 时，我们自问‘计算机如何才能与众不同，而且没有几十年来的包袱？看起来更友好是我们计算机设计的一个重要组成部分，我认为小写键盘确实已经成为几乎自己的标志性品牌，以帮助实现这一目标。」</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 04:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280052/chromebooks-lowercase-keyboard</guid>
            <link>https://www.oschina.net/news/280052/chromebooks-lowercase-keyboard</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报 | 目前的人工智能技术连猫的智能水平都没达到]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3><span style="color:#e67e22"><strong># 2024.2.22</strong></span></h3><h2><strong><span style="color:#16a085">今日要点</span></strong></h2><p><strong>OpenSource Daily</strong></p><h3><a href="https://www.oschina.net/news/279713/google-gemma-open-models" target="_blank">谷歌发布轻量级开源大语言模型 Gemma</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Gemma 是一款轻量级、先进的开源模型，供开发者和研究人员用于 AI 构建。Gemma 模型家族包括 2B（20 亿参数）和 7B（70 亿参数）两种尺寸，能够在不同的设备类型上运行，包括笔记本电脑、桌面电脑、IoT 设备、移动设备和云端。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fb557d3a75a71eccd7300352b8e419f6dd5.png" referrerpolicy="no-referrer"></p><h3><a href="https://www.oschina.net/news/279741/nightingale-7-0-0-beta-0-released" target="_blank">夜莺监控 V7 第一个 beta 版本</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">夜莺项目从 2024 开始开发 V7 版本，重点做体验优化，V7 和 V6 版本兼容可以平滑升级<span style="background-color:#ffffff; color:#333333">（V6 升级到 V7 只需要替换一下二进制重启即可，如果是容器部署，只需要更新镜像并重启）</span>，第一个 beta 的优化项包括：</p><ul><li>全站暗黑主题</li><li>优化边缘机房机器失联告警的实现逻辑，真正做到边缘机房告警自闭环</li><li>优化内置大盘、内置告警规则的列表页面 UI</li><li>全局回调地址页面展示优化，增加详尽的文档提示信息</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="20240221141801" src="https://download.flashcat.cloud/ulric/20240221141801.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span style="color:#16a085">今日观察</span></strong></h2><p><img height="554" src="https://oscimg.oschina.net/oscnet/up-14e1acb77ab8633d225b3117ebbc7dc7920.png" width="1522" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- 微博<span>&nbsp;</span></span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1233486457%2FO1MdFaqZm" target="_blank">高飞</a></em></u></p><p><img src="https://oscimg.oschina.net/oscnet/up-a2ff0599a45c140a6bf468a7d85524102fa.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- 微博<span>&nbsp;</span></span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1856404484%2FO1JFSAEg0" target="_blank">凤凰网科技</a></em></u></p><hr><h2><span style="color:#16a085"><strong>今日推荐</strong></span></h2><p><img src="https://oscimg.oschina.net/oscnet/up-da11d19579f9cc14d57a12c12f4479f067a.png" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>开源之声</strong></span></h2><p><img src="https://oscimg.oschina.net/oscnet/up-33430582a60711cf56a923991e1fef04da9.png" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>每日项目榜</strong></span></h2><p>GitHub Trending</p><p><img src="https://oscimg.oschina.net/oscnet/up-291d0213846cc3efbd09b526da6bac5ae29.png" referrerpolicy="no-referrer"></p><blockquote><h4><strong><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span></strong><br><u><em><strong><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/s7n800w84o6guyv/014_kyezhNxOGD.pdf">开源日报第 014 期：目前的人工智能技术连猫的智能水平都没达到</a></strong></em></u></h4></blockquote><hr><p><strong>往期回顾</strong></p><ul><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC013%E6%9C%9F%EF%BC%9A%E7%AD%89%E5%88%B0%20Sora%20%E5%BC%80%E6%BA%90%E4%BA%86%E7%AB%8B%E5%88%BB%E6%8E%A8%E5%87%BA%E5%B1%9E%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B.pdf">开源日报第 013 期：等到 Sora 开源了立刻推出属于我们自己的大模型</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC012%E6%9C%9F%EF%BC%9ASora%20%E7%BB%99%E4%B8%AD%E5%9B%BD%20AI%20%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%8F%98%E5%8C%96%EF%BC%9BDart%203.3%20%E5%8F%91%E5%B8%83.pdf">开源日报第 012 期：Sora 给中国 AI 带来的真实变化；Dart 3.3 发布</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC11%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有「大模型版 Linux」</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></li><li><a href="https://www.oschina.net/news/277585">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></li><li><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></li><li><a href="https://www.oschina.net/news/277214">开源日报第 006 期：选择技术栈一定要选择开源的</a></li><li><a href="http://www.oschina.net/news/277040">开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</a></li><li><a href="https://www.oschina.net/news/276864">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 03:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279923</guid>
            <link>https://www.oschina.net/news/279923</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Altman 回应 7 万亿美元半导体计划：所需投资远超想象]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在英伟达发布了强劲的 2024 财年第四季度财报之后的几小时，英特尔首席执行官 Pat Gelsinger 和 OpenAI 首席执行官 Sam Altman 在加利福尼亚州圣何塞的一个会议中心展开了一场对话，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapnews.com%2Farticle%2Fintel-openai-nvidia-chips-boom-dbf20077caafc9b33870f9f6d32d3794" target="_blank">畅谈</a>半导体在 AI 时代塑造社会所扮演的角色。</span></p><p><span style="color:#000000"><img alt="" height="375" src="https://oscimg.oschina.net/oscnet/up-67bd113ff9160357624584468c53d04258a.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">在活动中，Gelsinger 询问了 Altman 有关最近报道的计划从中东地区筹集高达 7 万亿美元的资金，以支持 OpenAI 的一项半导体计划，并与英伟达展开竞争的传闻。对此，Altman 则反驳称，这种匿名人士未经证实的说法比比皆是，「我的主要工作不是到处修正这些错误的文章」。</span></p><p><span style="color:#000000">但 Altman 同时也承认，AI 的发展需要大量的资金。「事实是，我们认为世界将需要更多的 AI 计算（芯片）。这将需要全球范围内大量的投入，超出我们的想象。我们现在还没有一个具体数字。」</span></p><p><span style="color:#000000">他还强调了过去一年加快人工智能发展的重要性。他认为人工智能的进步将为人类带来更美好的未来，不过奥特曼也承认，在前进的过程中会有不利的一面。"我们正在走向这样一个世界：人工智能生成的内容将多于人类生成的内容。这将不仅仅是一个 good story，而是一个 net good story。"</span></p><p><span style="color:#000000">此外，Altman 重申了在 AI 领域进行监管的必要性，强调了政府在制定框架以降低潜在风险方面的关键作用。</span></p><p><span style="color:#000000">Gelsinger 预测，</span><span style="background-color:#ffffff; color:#000000">到 2030 年，英特尔将成为全球第二大代工企业，仅次于台积电。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279911/intel-openai-chips</guid>
            <link>https://www.oschina.net/news/279911/intel-openai-chips</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apache ECharts 5.5.0 引入服务端渲染的新利器：1KB 的客户端轻量运行时]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Apache ECharts 5.5.0 版本已于 2024.2.18 正式发布。</p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fecharts%2Freleases%2Ftag%2F5.5.0" target="_blank">https://github.com/apache/echarts/releases/tag/5.5.0</a></u></em></p><p><strong>主要变化</strong></p><ul><li><p>增强了代码的 ESM 识别，对&nbsp;Node.js&nbsp;环境开发更加友好；</p></li><li><p>为服务端渲染方案提供了一个 gzip 后仅 1KB 的轻量运行时，极大地降低了加载时间；</p></li><li><p>为数据下钻支持了过渡动画，开发者可以方便地实现多级数据的动画效果；</p></li><li><p>为饼图和极座标系图表增加了更多配置项，可以实现更丰富的样式；</p></li><li><p>新增阿拉伯语和荷兰语两种语言的翻译</p></li><li><p>……</p></li></ul><p>以下内容转自：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FIpGQS1GspyXzNe-u9F4B-A" target="_blank">https://mp.weixin.qq.com/s/IpGQS1GspyXzNe-u9F4B-A</a></u></em></p><hr><h2>增强的 ESM 支持</h2><p>为了让开发者在测试和 Node.js 环境使用更方便，我们在这个版本中对 ESM 的识别问题进行了优化。</p><p>以前，ECharts 只在 npm（npm 包的 lib 目录中）导出&nbsp;<code>*.esm</code>&nbsp;文件。虽然这在 bundlers 环境表现良好，但 Node.js 环境和一些基于 Node.js 的测试框架（如 vitest 和 jest）中的表现并不理想。</p><p>有了这个新功能，我们做了几个改变以改善这个问题：</p><ul><li><p>在&nbsp;<code>package.json</code>&nbsp;中添加了&nbsp;<code>"type": "module"</code></p></li><li><p>在&nbsp;<code>package.json</code>&nbsp;中添加了&nbsp;<code>"exports": {...}</code></p></li><li><p>在子目录中添加了一些只包含&nbsp;<code>"type": "commonjs"</code>&nbsp;的&nbsp;<code>package.json</code>&nbsp;文件</p></li></ul><p>这些改变意味着，像&nbsp;<code>echarts/core.js</code>&nbsp;这样的文件现在可以在像纯 Node.js、vitest、jest 和 create-react-app 这样的环境中解析为 ESM。</p><p>我们还确保了这个新功能与各种环境兼容，包括运行时（Node.js/vitest/jest（create-react-app）/ssr/…）和打包器（webpack/rollup/vite/esbuild/…）。</p><p>我们非常期待这一新功能，并相信它将极大地改善开发者的体验。</p><h2>服务端渲染 + 客户端轻量运行时</h2><p>Apache ECharts 功能强大，相应地，包体积也比较大。我们在之前的版本中也做了各种努力来改进这一点。开发者可以使用 TreeShaking 按需加载部分代码，以减少加载的代码量。从 Apache ECharts 5.3 版本起，我们支持了零依赖的服务端 SVG 字符串渲染方案，并支持图表的初始动画。这样，使用服务端渲染的结果作为首屏渲染的画面，可以大大减少首屏加载时间。</p><p>服务端渲染虽然是一种很有效减少包体积的解决方案，但如果需要在客户端实现一些交互，那么不得不仍旧加载 echarts.js，这可能会增加更多的加载时间。对于一些对页面加载速度要求较高的场景，这可能不是一个理想的选择。</p><p><strong>在 5.5.0 版本中，我们新增了客户端轻量运行时</strong>，客户端无需加载完整 ECharts 即可实现部分交互。这样，我们可以在服务端渲染图表，然后在客户端加载轻量运行时，实现一些常见的交互。这意味着，<strong>只需要加载&nbsp;4KB 的轻量运行时（gzip 后 1KB），即可实现带初始动画和部分常用交互形式的图表</strong>。这一改进将极大地提升页面加载速度，特别是对于移动端的体验。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5c9857523986e92155d29f453c6307014c1.png" referrerpolicy="no-referrer"></p><p>以这个带标题的饼图为例，如果按客户端仅打包饼图和标题组件的方案，gzip 后需要 135KB；如果按服务端渲染的方案，渲染结果 SVG gzip 后 1 KB、客户端运行时 gzip 后 1KB，仅为前者体积的 1.5%。交互方面，后者也可以做到初始动画、鼠标移动到图表元素后的高亮，并且获取到点击事件，能够满足大部分的常见交互需求。</p><p>如需使用客户端轻量运行时方案，服务端代码和之前一样，但需要保证 ECharts 版本号在 5.5.0 以上。</p><pre><code>//&nbsp;服务端代码
const&nbsp;echarts&nbsp;=&nbsp;require('echarts');

//&nbsp;在&nbsp;SSR&nbsp;模式下第一个参数不需要再传入&nbsp;DOM&nbsp;对象
const&nbsp;chart&nbsp;=&nbsp;echarts.init(null,&nbsp;null,&nbsp;{
&nbsp;&nbsp;renderer:&nbsp;'svg',&nbsp;//&nbsp;必须使用&nbsp;SVG&nbsp;模式
&nbsp;&nbsp;ssr:&nbsp;true,&nbsp;//&nbsp;开启&nbsp;SSR
&nbsp;&nbsp;width:&nbsp;400,&nbsp;//&nbsp;需要指明高和宽，如果是根据客户端容器大小动态的，该值需要从客户端得到
&nbsp;&nbsp;height:&nbsp;300
});

//&nbsp;像正常使用一样&nbsp;setOption
chart.setOption({
&nbsp;&nbsp;//...
});

//&nbsp;输出字符串
const&nbsp;svgStr&nbsp;=&nbsp;chart.renderToSVGString();

//&nbsp;调用&nbsp;dispose&nbsp;以释放内存
chart.dispose();
chart&nbsp;=&nbsp;null;

//&nbsp;通过 HTTP Response 返回 svgStr 给前端或者缓存到本地（这里以 Express.js 为例）：
res.writeHead(200,&nbsp;{
&nbsp;&nbsp;'Content-Type':&nbsp;'application/xml'
});
res.write(svgStr);
res.end();

</code></pre><p>客户端将得到的 SVG 字符串添加到容器中，并绑定轻量运行时：</p><pre><code>&lt;div&nbsp;id="chart-container"&nbsp;style="width:800px;height:600px"&gt;&lt;/div&gt;

&lt;script&nbsp;src="https://cdn.jsdelivr.net/npm/echarts/ssr/client/dist/index.js"&gt;&lt;/script&gt;
&lt;script&gt;
const&nbsp;ssrClient&nbsp;=&nbsp;window['echarts-ssr-client'];

let&nbsp;isSeriesShown&nbsp;=&nbsp;{
&nbsp;&nbsp;a:&nbsp;true,
&nbsp;&nbsp;b:&nbsp;true
};

function&nbsp;updateChart(svgStr)&nbsp;{
&nbsp;&nbsp;const&nbsp;container&nbsp;=&nbsp;document.getElementById('chart-container');
&nbsp;&nbsp;container.innerHTML&nbsp;=&nbsp;svgStr;

&nbsp;&nbsp;//&nbsp;使用轻量运行时赋予图表交互能力
&nbsp;&nbsp;ssrClient.hydrate(main,&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;on:&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;click:&nbsp;(params)&nbsp;=&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(params.ssrType&nbsp;===&nbsp;'legend')&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;点击图例元素，请求服务器进行二次渲染
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isSeriesShown[params.seriesName]&nbsp;=&nbsp;!isSeriesShown[params.seriesName];
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fetch('...?series='&nbsp;+&nbsp;JSON.stringify(isSeriesShown))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(res&nbsp;=&gt;&nbsp;res.text())
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.then(svgStr&nbsp;=&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;updateChart(svgStr);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;});
}

//&nbsp;通过&nbsp;AJAX&nbsp;请求获取服务端渲染的&nbsp;SVG&nbsp;字符串
fetch('...')
&nbsp;&nbsp;.then(res&nbsp;=&gt;&nbsp;res.text())
&nbsp;&nbsp;.then(svgStr&nbsp;=&gt;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;updateChart(svgStr);
&nbsp;&nbsp;});
&lt;/script&gt;
</code></pre><p>客户端轻量运行时必须配合 SVG 形式的服务端渲染结果使用，支持以下交互：</p><ul><li><p>图表初始动画（实现原理：服务端渲染的 SVG 带有 CSS 动画）</p></li><li><p>高亮样式（实现原理：服务端渲染的 SVG 带有 CSS 动画）</p></li><li><p>动态改变数据（实现原理：轻量运行时请求服务器进行二次渲染）</p></li><li><p>点击图例切换系列是否显示（实现原理：轻量运行时请求服务器进行二次渲染）</p></li></ul><p>可以发现，这能够满足大部分的交互场景需求。如果需要更复杂的交互，则客户端需要加载&nbsp;<code>echarts.js</code>&nbsp;实现完整功能。</p><p>完整的介绍请参见官网使用手册的「应用篇 - 跨平台方案 - 服务端渲染」。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 02:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279907/echarts-5-5-0</guid>
            <link>https://www.oschina.net/news/279907/echarts-5-5-0</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
