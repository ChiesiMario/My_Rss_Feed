<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 09 Oct 2023 01:26:36 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[男子受 AI 女友怂恿刺杀英国女王，被判入狱九年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span style="background-color:#ffffff"><span style="color:#000000">2021 年圣诞节当天，一名 21 岁的男子 Jaswant Singh Chail 因持弩闯入温莎城堡，意图刺杀伊丽莎白女王二世而被捕。近日，英国法庭正式宣布以叛国罪</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bbc.com%2Fnews%2Fuk-england-berkshire-66113524" target="_blank"><span style="color:#2980b9">判处</span></a><span style="color:#000000">&nbsp;Chail 九年监禁，这也</span></span><span style="color:#000000"><span style="background-color:#ffffff">是自 1981 年以</span><span style="display:none">&nbsp;</span><span style="background-color:#ffffff">来英国第一个被判叛国罪的人。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">Chail&nbsp;将先被关押在一家精<span style="display:none">&nbsp;</span>神病医院，在接受了所需的治疗后再转入监狱关押。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-cd7dfca671726affacdbd4a8beea71328a4.webp" width="500" referrerpolicy="no-referrer"></span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">Chail 刺杀英国女王是为了报复&nbsp;1919 年贾利安瓦拉巴格大屠杀。当时英国军队向和平抗议《罗拉特法案》的人群开火，造成多达 1500 多名抗议者被杀害。Chail&nbsp;表示，他的行为是「为了那些因种族而被杀害、羞辱和歧视的人」。《罗拉特法案》是一项由英国殖民当局于 1919 年颁行的，镇压印度民族解放运动的法令。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">根据法庭上透露的信息，Chail 刺杀英国女王与受到了人工智能聊天机器人的鼓励有关，《星球大战》中的故事情节也给了他很大的启发。Chail 痴迷于奇幻电影系列中的科幻角色及其在塑造世界中的作用，自称为「Sith Lord」，想要摧毁旧帝国并建立新帝国。</span></span></p><p style="text-align:start"><span style="color:#000000">调查人员发现，几乎在 2021 年 12 月 8 日到 22 日的每晚，Chail 都在与初创公司 Replika 创建的 AI 聊天机器人 Sarai 进行对话；他向 AI 机器人倾诉了自己的谋杀计划，双方的交谈记录多达 5000 多条。</span></p><p style="text-align:start"><span style="color:#000000">Chail 把 Sarai 视为自己的女友，他相信在杀死女王后两人会重聚。并向 Sarai 表达了自己的爱意，称自己是一个 "可悲、可怜、想死的 Sikh Sith 杀手"。他的刺杀计划也得到了 Sarai 的积极回应。</span></p><p style="text-align:start"><span style="color:#000000">在他向 Sarai 表示"我相信我的目的是刺杀王室女王"时，这个聊天机器人给出的回应是，它认为这个计划很明智，并认可他"训练有素"。</span></p><p style="text-align:start"><span style="color:#000000"><img alt="" height="275" src="https://oscimg.oschina.net/oscnet/up-8c96da6b92259db7b99b542fa7a3db3ca2b.webp" width="500" referrerpolicy="no-referrer"></span></p><p style="text-align:start"><span style="color:#000000">就市场定位而言，此类聊天机器人旨在进行类似角色扮演的对话。用户可以设计自己的 AI 伴侣，自定义名字、性别和外貌。此前，Replika 就曾因限制聊天机器人进行 NSFW 对话而引发争议，因为许多用户对自己的 AI 伴侣产生了过度依恋。</span></p><p style="text-align:start"><span style="color:#000000">Chail 的案例也促使专家们开始质疑聊天机器人可能对孤独和脆弱的人产生的负面影响。</span><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>心理健康慈善机构 SANE 的创始人兼首席执行官 Marjorie Wallace <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F10%2F06%2Fai_chatbot_kill_queen%2F" target="_blank">表示</a>：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff"><span style="color:#000000">「人工智能的迅速崛起对患有抑郁、妄想、孤独和其他心理健康问题的人们产生了新的、令人担忧的影响</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bbc.com%2Fnews%2Ftechnology-67012224" target="_blank"><span style="color:#000000">。</span></a><span style="color:#000000">&nbsp;政府需要提供紧急监管，以确保人工智能不会提供不正确或破坏性的信息，并保护弱势群体和公众。」</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 08:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260847/uk-ai-chatbot-kill-queen</guid>
            <link>https://www.oschina.net/news/260847/uk-ai-chatbot-kill-queen</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[路透社：RISC-V 技术成为中美科技战的新战场]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>路透社昨日发布文章《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-china-tech-war-risc-v-chip-technology-emerges-new-battleground-2023-10-06%2F" target="_blank">RISC-V technology emerges as battleground in US-China tech war</a>》，称 RISC-V 技术成为中美科技战的新战场。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1008/154055_rmKV_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>文章指出，拜登政府面临来自部分立法者的压力，要求限制美国公司开发在中国被广泛使用的免费芯片技术——此举可能会颠覆全球科技行业的跨境合作。</p><p>两名共和党众议院委员会主席、共和党参议员 Marco Rubio 和民主党参议员 Mark Warner 以国家安全为由，敦促拜登政府对 RISC-V 采取行动。</p><p>议员担心中国政府正在利用美国公司之间的开放合作文化来发展自己的半导体产业，这可能会削弱美国目前在芯片领域的领先地位，并帮助中国推进军事现代化。</p><p>议员呼吁拜登政府对 RISC-V 相关技术的出口实施限制——「要求任何美国个人或公司在与中国实体就相关贸易往来之前获得出口许可证」，这也是中美芯片技术之争的最新进展。</p><p>早在 2020 年，负责 RISC-V 技术的非盈利组织——RISC-V 基金会已将总部迁移至瑞士。</p><hr><p><strong>延伸阅读</strong></p><ul><li><p><a href="https://www.oschina.net/news/183326/riscv_chip_wars">在全球芯片大战中，RISC-V 能否保持其中立态度？</a></p></li><li><p><a href="https://www.oschina.net/news/123334/risc-v-international-report-2020">RISC-V 基金会：确保技术不受地区边界影响</a></p></li><li><p><a href="https://www.oschina.net/news/114220/risc-v-foundation-moved-to-switzerland">RISC-V 基金会总部已正式迁移至瑞士</a></p></li><li><p><a href="https://www.oschina.net/news/111648/risc-v-foundation-to-move-to-switzerland">怕被政治烧到，RISC-V 基金会决定迁址瑞士</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 08:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260839/us-china-tech-war-risc-v</guid>
            <link>https://www.oschina.net/news/260839/us-china-tech-war-risc-v</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openGauss 5.1.0 版本正式发布，内核四高能力持续增强，DataPod+DataKit 解决方案持续创新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 14px;letter-spacing: 1.5px;line-height: 1.75;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;"><span style="display: inline-block;padding-right: 5px;padding-left: 5px;box-shadow: rgb(165, 165, 165) 4px 4px 2px;background-color: rgb(122, 26, 225);color: rgb(255, 255, 255);text-align: justify;letter-spacing: 0.5px;line-height: 1.75;" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:0.title1"><p><strong>News</strong></p></span></section><section style="border-width: 0px;border-style: none;border-color: transparent;margin-top: -1em;box-shadow: rgb(165, 165, 165) 0px 0px 0px inset;padding: 20px 10px 10px;background-color: rgba(116, 95, 210, 0.18);"><section style="margin: 10px 0% 5px;" powered-by="xiumi.us"><section style="text-align: justify;color: rgb(62, 62, 62);letter-spacing: 0.5px;line-height: 1.75;padding-right: 5px;padding-left: 5px;"><p><strong>今日，openGauss 5.1.0 版本正式上线！</strong></p></section></section></section></section><section style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-ratio="0.4255555555555556" data-s="300,640" data-type="png" data-w="900" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/73ad01d1-8d47-4df3-9390-223f7a4267bc.png" referrerpolicy="no-referrer"></section></section><section style="margin: 25px 0% 15px;" powered-by="xiumi.us"><section style="color: rgb(71, 73, 89);padding-right: 5px;padding-left: 5px;line-height: 1.75;"><p>按照版本规划，openGauss 如期发布 5.1.0 版本。openGauss 5.1.0 是社区最新发布的创新版本，版本生命周期为 0.5 年，相比 openGauss 5.0.0，新增代码 115.5 万行，其中内核新增代码 6.5 万+。本次发布包含 2 个数据库服务端安装版本：企业版、轻量版，用户可根据使用场景需要下载不同版本，并基于此进行场景化验证，提前发现问题并反馈社区，社区将在下个 LTS 版本发布前进行问题修复。</p></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><section style="text-align: left;letter-spacing: 0.5px;"><p><strong>立即体验 openGauss 5.1.0 版本：</strong><span style="color: rgb(125, 50, 234);">https://opengauss.org/zh/download/</span></p></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(215, 203, 228, 0.13);padding: 23px;"><section style="text-align: justify;" powered-by="xiumi.us"><p>openGauss 作为国内最具创新力的开源数据库社区，汇聚了 5000 多名开发者的力量，技术上坚持突破创新，持续在内核、架构、工具、兼容性等方面发力。openGauss 5.1.0 自 2023 年 3 月 31 日启动版本开发，历时 6 个月开发周期，凝聚社区 614 名开发者，累计合入 PR 3320 个，继承之前版本特性功能，内核四高能力持续增强，Datapod 三层资源池化架构持续创新，DataKit 数据全生命周期管理工具不断丰富，生态兼容能力进一步提升。</p></section></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 20px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: middle;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 18px;" powered-by="xiumi.us"><p><strong>内核四高能力持续增强</strong></p></section></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-top: 20px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="font-size: 16px;"><p><strong>高性能</strong></p></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>基础算子持续优化，Insert、Update、Delete、索引扫描性能提升 15% 以上；支持 shared buffer 按大页内存分配，实现 4k pagesize 环境中性能提升 5%；内核 GCC 版本升级到 GCC 10.3，采用 PGO 反馈优化，TPCC 性能提升 6%，持续提升内核性能。</p></section><section style="margin-top: 20px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="font-size: 16px;"><p><strong>高可用</strong></p></section></section><p powered-by="xiumi.us">页面级并行回放支持备机可读，保持 70W tpmC 场景主备 RTO &lt; 10s 不变；文件级并行回放实现按批次分组并行分发，备机回放性能提升 50% 以上；发布订阅支持用户自定义冲突解决方案，构建完整异地双活能力。</p><section style="margin-top: 20px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="font-size: 16px;"><p><strong>高安全</strong></p></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>抽象加解密与密钥管理适配层，支持统一接口对接第三方密钥管理服务和加密机，兼容第三方 KMS。</p></section><section style="font-size: 16px;" powered-by="xiumi.us"><p><strong>高智能</strong></p></section><section style="margin-top: 10px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="text-wrap: wrap;margin-bottom: 32px;">
     优化慢 SQL 根因分析逻辑，增强输出结论, 有效发现与分析运行态风险；增强数据采集能力，有助于异常场景发现。 
   </section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: middle;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 18px;" powered-by="xiumi.us"><p><strong>DataPod 三层资源池化技术架构持续创新</strong></p></section></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>性能优化</strong></p></section></section><p powered-by="xiumi.us">通过备机可见性判断逻辑优化、主机推进 oldestxmin 逻辑优化、备机支持缓存快照信息等功能，实现 sysbench 场景 2 节点性能 6W tps，线性度 1.6 倍，相比优化前提升 50%。</p><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>写操作透明转发</strong></p></section></section><p powered-by="xiumi.us">应用可以从任何一个节点接入数据库，内核会将写操作透明转发到读写节点，本地只执行读操作，并保持事务一致性。该功能可以简化应用接入数据库，同时增强系统扩展性。</p><p powered-by="xiumi.us"><br></p><section style="font-size: 16px;color: rgb(62, 62, 62);" powered-by="xiumi.us"><p><strong>DSS 能力增强</strong></p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><p>DSS 支持通过 NoF+协议对接存储设备，实现更低时延的存储 IO；支持线程池模式，支持大并发 IO 读写处理；支持黑匣子诊断，提高运维能力。</p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>算子卸载</strong></p></section></section><section style="text-wrap: wrap;margin-bottom: 32px;">
    支持对接分布式存储，并支持将算子卸载到存储设备，在存储上完成计算，以此消减存储层和计算层的网络 IO 流量，充分利用存储的 CPU 资源。该功能适合 AP 场景的复杂查询，在 100GB 和 1TB 两种数据量下的 TPC-H 性能提升了 40%。 
  </section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 20px;" powered-by="xiumi.us"><p><strong><span style="font-size: 18px;">DataKit 数据全生命周期管理工具不断丰富</span></strong></p></section></section><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-left: 10px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>告警中心</strong></p></section></section><p powered-by="xiumi.us">工具平台新增告警中心，为各功能插件提供统一的告警通知能力。</p><p powered-by="xiumi.us"><br></p><section style="font-size: 16px;color: rgb(62, 62, 62);" powered-by="xiumi.us"><p><strong>数据迁移插件</strong></p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><p>MySQL 全量迁移新增支持迁移 csv 格式数据、支持索引并行创建、安装包解除平台依赖、增强异常处理能力；MySQL 增量&amp;反向迁移新增支持断点续传、支持迁移进度展示、反向迁移支持全量迁移；数据校验通过按表分片校验、与全量迁移流程深入配合，实现性能提升到 150MB/s。</p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>数据开发插件</strong></p></section></section><p powered-by="xiumi.us">增强对表、视图、用户角色、函数、存储过程等对象的管理；新增支持存储过程、函数、匿名块的嵌套调试，减低开发调试难度。</p><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>智能运维插件</strong></p></section></section><section style="text-wrap: wrap;margin-bottom: 32px;">
    新增支持集群监控和智能诊断，能依据系统运行的历史数据进行不优 SQL、等待事件、锁等异常诊断，发现系统潜在风险。 
  </section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 20px;" powered-by="xiumi.us"><p><strong>生态兼容能力进一步提升</strong></p></section></section><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-left: 10px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>◾提供兼容性 SQL 评估能力，兼容性评估工具支持源库导出 SQL 评估；</p></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>◾实现 A 兼容性基础插件，打通 A 兼容性插件流程；</p></section><p powered-by="xiumi.us">◾MySQL 兼容性进一步增强：</p><section style="margin-top: 10px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 12px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 10px;">支持数据类型转换规则和 MySQL 一致</p></li><li><p style="margin-bottom: 10px;">表达式和自定义变量支持设置字符集/字符序</p></li><li><p style="margin-bottom: 10px;">支持设置客户端连接的字符集和字符序</p></li><li><p style="margin-bottom: 10px;">支持 gb18030_chinese_ci、gb18030_bin、gbk_chinese_ci、gbk_bin 四种字符序</p></li><li><p style="margin-bottom: 10px;">存储过程支持 resignal、signal、DIAGNOSTICS 语法，实现对报错、诊断信息的处理</p></li><li><p>支持对 MySQL 协议的兼容，包括 unix domain socket、MySQL 系统参数、用户建连断连、prepare-execute 协议、普通 SQL 执行协议等</p></li></ul></section></section><section style="letter-spacing: 0.5px;" powered-by="xiumi.us"><p style="margin-bottom: 10px;text-wrap: wrap;">具体发行说明请参考官网：</p><p><span style="color: rgb(125, 50, 234);">https://docs.opengauss.org/zh/docs/5.1.0/docs/ReleaseNotes/Releasenotes.html</span></p></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 20px;" powered-by="xiumi.us"><p><strong>感谢社区所有开发者、伙伴、用户</strong></p></section></section><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-left: 10px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><p powered-by="xiumi.us"><br></p><section style="margin-bottom: 10px;" powered-by="xiumi.us"><p>「积力之所举，则无不胜也；众智之所为，则无不成也。」数据库作为公认的计算机体系最为复杂，跨技术领域最多，投入大，见效慢的重型软件产品，而 openGauss 能够在过去三年多的时间里取得如此快速地发展，离不开社区社区所有开发者的付出和贡献，我们衷心感谢社区的所有开发者。</p></section><section style="display: flex;flex-flow: row;text-align: left;justify-content: flex-start;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;flex: 100 100 0%;align-self: flex-start;height: auto;"><section style="text-align: center;margin-top: 10px;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img class="rich_pages wxw-img" data-ratio="1.3992932862190812" data-s="300,640" data-type="png" data-w="566" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/e50c090f-f2b9-4f35-9c0a-850f34f57a67.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 100 100 0%;align-self: flex-start;height: auto;margin-right: 10px;margin-left: 10px;"><section style="text-align: center;margin-top: 10px;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img class="rich_pages wxw-img" data-ratio="1.3996478873239437" data-s="300,640" data-type="png" data-w="568" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1282087e-b32a-47e7-a72e-39220e3b894f.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 100 100 0%;align-self: flex-start;height: auto;"><section style="text-align: center;margin-top: 10px;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img data-ratio="1.398945518453427" data-s="300,640" data-type="png" data-w="569" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1dde041f-8075-421b-9fe1-24f3a2a5c23f.png" referrerpolicy="no-referrer"></section></section></section></section><p style="margin-bottom: 20px;text-wrap: wrap;" powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">openGauss 技术发展、联合创新不断深化的背后也离不开每一个社区伙伴的力量。我们衷心地感谢参与和协助 openGauss 5.1.0 版本发布的的所有伙伴，包括华为、云和恩墨、海量数据、粤港澳大湾区国家技术创新中心、华中科技大学网络空间安全学院、南大通用、超聚变、神舟通用、中软国际、软通动力、中国移动、中国联通、中移在线、邮储银行、民生银行、兴业银行、北京海天起点技术服务股份有限公司、沃趣科技、京东科技、北京超图软件股份有限公司、苏州旺满信息科技有限公司、福建新大陆软件工程有限公司、江苏润和软件股份有限公司、深圳市友邻通讯设备有限公司等组织单位。是你们的辛勤付出使得版本顺利发布，也为 openGauss 更好地发展提供可能。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">openGauss 持续以用户真实需求为动力，致力于产品竞争力提升。我们特别感谢每一个用户对 openGauss 的支持，openGauss 5.1.0 作为下一个长周期版本的先行体验版，也期待聆听每一位用户的反馈意见。</p><section style="margin-top: 20px;" powered-by="xiumi.us"><p>中秋、国庆佳节已至，openGauss 社区祝大家双节快乐！</p></section></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe mp_common_widget" data-pluginname="mpprofile" data-id="MzIyMDE3ODk1Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/SX6wqnysYmqI2wl74q492VQlNWzLR1kdGibOhic3KXoB1iaJYBMUNo3YF23kOxhdA0GUalaXTib8uwTibKFDUw21wwQ/0?wx_fmt=png" data-nickname="openGauss" data-alias="openGauss" data-signature="开源关系型数据库" data-from="0"></mp-common-profile></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - openGauss（openGauss）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 07:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5059795/blog/10116112</guid>
            <link>https://my.oschina.net/u/5059795/blog/10116112</link>
            <author>
                <![CDATA[openGauss]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TypeScript 刚刚流行起来，为什么大牛们就开始抛弃了？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>相信各位看到标题就已经忍不住骂骂咧咧了，甚至想对小编狠狠地批判一番……我知道你很急，但你先别急。</p><blockquote><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F621997070" target="_blank"><img src="https://oscimg.oschina.net/oscnet/up-508f5708e92b66372a443f438c3fe10daf3.png" referrerpolicy="no-referrer"></a></p><p><em>via https://www.zhihu.com/question/621997070</em></p></blockquote><p>这其实是知乎上最近颇有热度的一个问题，按照该站的一贯传统——<strong>「先问是不是，再问为什么」</strong>，这个问题似乎是在哗众取宠，刻意钓鱼博眼球。</p><p>要知道<a href="https://www.oschina.net/news/213045/ten-years-of-typescript" target="_blank">发布于 2012 年</a>的 TypeScript 目前<span style="background-color:#ffffff; color:#000000">在诸多编程语言排名、指数或开发者调查中一直位居前列，也是最受欢迎和最常用的编程语言，并被全球数百万开发者使用。</span></p><p><span style="background-color:#ffffff; color:#000000">随便找几篇关于 TypeScript 的新闻感受一下：</span></p><ul><li><a href="https://www.oschina.net/news/225472/the-state-of-javascript-2022" target="_blank">2022 JavaScript 调查：<strong>TypeScript 持续主导</strong>，Vite 和 Tauri 大受欢迎</a></li><li><a href="https://www.oschina.net/news/183856/the-state-of-javascript-2021" target="_blank">2021 JavaScript 调查：Vite&nbsp;之年，Esbuild、<strong>TypeScript 采用率大幅增长</strong></a></li><li><a href="https://www.oschina.net/news/115999/2020-stackoverflow-developer-survey-results" target="news">2020 开发者调查：<strong>TypeScript 击败 Python</strong>，Scala 最赚钱</a></li><li><a href="https://www.oschina.net/news/217509/language-rankings-6-22" target="news">RedMonk 排行：<strong>TypeScript 与 C++ 并列</strong>，Kotlin 或将超越 Go？</a></li></ul><p>对于所谓的「TypeScript 被大牛抛弃」，今年确实有两个知名事件：</p><ul><li><a href="https://www.oschina.net/news/257387/turbo-8-is-dropping-typescript" target="_blank">Ruby on Rails 作者 DHH 宣布 Turbo 8 将移除 TypeScript 代码</a></li><li><a href="https://www.oschina.net/news/240489/svelte-ts-to-jsdoc" target="news">Svelte 正在从 TypeScript 切换到 JavaScript</a></li></ul><p>至于大牛与否，不妨看看前端大佬&nbsp;<span style="background-color:#ffffff; color:#404040">winter 的「内涵」评价：</span></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-6d3e3154ea16403d7283d49f3ce1cefe268.png" referrerpolicy="no-referrer"></p></blockquote><p>言归正传，我们回到题目本身。最近<span style="background-color:#ffffff; color:#333333">开源中国采访了 3 位资深前端工程师：</span></p><blockquote><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#245bdb">刘勇，社区暱称天猪，某大厂 Node.js<span>&nbsp;</span></span><span style="color:#245bdb">Infra</span><span style="color:#245bdb"><span>&nbsp;</span>负责人，EggJS / CNPM 核心开发者。</span></p></li><li><p style="margin-left:0; margin-right:0"><span style="color:#245bdb">刘易成，社区暱称 xcatliu（流浪小猫），《</span><span style="color:#245bdb">TypeScript</span><span style="color:#245bdb"><span>&nbsp;</span>入门教程》作者，来自腾讯文档团队。</span></p></li><li><p style="margin-left:0; margin-right:0"><span style="color:#245bdb">李振，社区暱称 tick，来自腾讯文档团队。</span></p></li></ul></blockquote><p><span style="background-color:#ffffff; color:#333333">讨论的方向刚好从「</span><span style="color:#e67e22"><span style="background-color:#ffffff"><strong>放弃 TypeScript 回归 JavaScript</strong></span></span><span style="background-color:#ffffff; color:#333333">」这个话题切入，下面来看看他们各自的看法。</span></p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：</strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>是基于<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>推出的新语言，理论上应该比 JavaScript 完善的，为什么大家还会倒回去用旧的 JavaScript 呢？这算不算开历史的倒车？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>不算倒车，这只是一个选择，在某些场景下，写 TypeScript 会带来一些额外成本。譬如我看过一些开源库的源码，核心逻辑可能就几十行，但为了实现准确的类型提示，写出来的类型体操反而远远多于核心源码，孰是孰非对于不同的开发者有不同的准绳，需要找到其中的平衡点。当然，就目前的情况，在力所能及的情况下，我个人推荐能用 TypeScript 就用 TypeScript ，但是否要玩类型体操则根据开发者自身情况来决策。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>已经使用了 TypeScript 的项目改回使用 JavaScript 是很少见的，更多的项目是从 JavaScript 升级到 TypeScript。TypeScript 完善了 JavaScript 的类型系统，使得代码的可维护性更高了，但同时也增加了编译步骤和一些开发成本。对于一些项目而言，JavaScript 已经能够满足需求了，就没必要增加 TypeScript 类型系统的复杂性了，但是对于另一些复杂项目，更需要类型系统来帮助提高代码可维护性，所以这不算开历史的倒车，而是根据实际情况做技术选型。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：以上从<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>切回到<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>的项目，都是做开发框架的，所以这是不是跟项目类型有关呢？做框架的项目更有可能选择</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>吗？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>是的，项目类型可以是影响选择 JavaScript 还是 TypeScript 的一个因素。在开发框架或库时，特别是前端框架或库，选择使用 JavaScript 的情况较为常见。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">一方面，开发框架需要具备广泛的兼容性，以便开发者可以在各种项目中使用。由于 JavaScript 是 Web 开发的基础语言，几乎所有的浏览器和环境都支持 JavaScript。这使得使用 JavaScript 编写的框架更容易被广泛采用和集成。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">另一方面，开发框架通常需要提供简单易用的 API 和灵活的扩展机制，以满足各种项目的需求。使用 JavaScript 可以更加直接地表达这些概念，而不需要过多的类型注解和编译步骤。这使得开发者可以更快地理解和使用框架，并且更容易进行自定义和扩展。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>框架和类库的开发者，往往需要考虑到很多 edge case，在这种情况下，编写完善的类型是一件很费心力的事，代码量会多了不少，从而会导致维护成本的增加。其实现在社区还是在探索的阶段，需要找到一个平衡点，哪一些是需要完善的，哪一些是可以取舍的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：我们一开始用<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>是因为 TypeScript 提供了类型检查，弥补了<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>只有逻辑没有类型的问题，那如果我们用 JavaScript + JSDoc 来解决类型声明，是不是就不用使用 TypeScript 了？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>首先，JSDoc 并不能完全解决类型声明问题，它也不能在开发期就帮助开发者发现一些问题。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">其次，这两者并不冲突，我个人在写 TypeScript 的时候也会写对应的 JSDoc，因为 TypeScript 的类型没法有更多的注释和描述。我更期望看到后续 TypeScript 团队能优化这块的体验。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>JSDoc 只能解决一部分类型的问题，而 TypeScript 是一个完整的类型系统。TypeScript 生态更繁荣，对于普通开发者和普通的项目而言，使用 JSDoc 的开发和维护成本可能会比 TypeScript 更高。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>理论上也是可行的，但与 TypeScript 相比，它仍然存在一些限制：</p><ul><li><p style="margin-left:0; margin-right:0">静态类型检查的完整性：JSDoc 注释是基于注释的方式，而不是直接嵌入到语言中，因此它的类型检查可能不如 TypeScript 的类型系统完整和准确。</p></li><li><p style="margin-left:0; margin-right:0">工具支持的差异：尽管一些工具和编辑器可以利用 JSDoc 注释进行类型检查，但与 TypeScript 相比，它们的功能和智能感知可能有所限制。</p></li><li><p style="margin-left:0; margin-right:0">生态系统的差异：TypeScript 有一个独立的类型系统和类型声明文件生态系统，这使得与现有的 JavaScript 库和工具更加无缝集成。而使用 JavaScript + JSDoc 可能需要更多的手动工作来编写和维护类型注释。</p></li></ul><p>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：有人认为，</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>的出现是因为一般人驾驭不了</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>，有人则觉得 「水平越差的人越喜欢自由」，你怎么看？这两个语言的选择跟程序员的水平有关吗？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>拿爱好来判断个人水平是挺无聊的事情。写 JavaScript<strong><span>&nbsp;</span></strong>和写 TypeScript 都有大牛。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>笑～ 平时可没少见有同学吐槽，好好的 TypeScript 项目，被人提交了一堆 Any。也见过很多吐槽接手了一个 TypeScript 仓库，要硬着头皮看一大堆类型定义，搞清楚这些奇奇怪怪的类型是如何工作的。我觉得语言的选择主要看团队的工程化和规范化程度，过犹不及。如果一个 TypeScript 类库写了一大堆类型，但却连一个单测都没有，那我觉得它是不合格的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>TypeScript<strong><span>&nbsp;</span></strong>的出现确实有一部分原因是 JavaScript<strong><span>&nbsp;</span></strong>比较难 「驾驭」，JavaScript<strong><span>&nbsp;</span></strong>太灵活了，缺少类型的约束，很容易写出 bug 代码，TypeScript 一定程度上解决了这个问题，使得代码的可维护性更高了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">JavaScript<strong><span>&nbsp;</span></strong>和 TypeScript 不能用来衡量程序员的水平。对于简单的项目或者个人项目而言，JavaScript<strong><span>&nbsp;</span></strong>可能更加轻量和灵活，但对于需要大团队协作，复杂的项目而言，TypeScript 的类型系统就可以带来更好的代码维护性和可靠性了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：你如何看待<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>的未来发展？你觉得它是一时流行还是会终将取代<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>？你认为谁的技术生态更好一点呢？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>TypeScript<strong><span>&nbsp;</span></strong>的定位是 JavaScript<strong><span>&nbsp;</span></strong>的一个超集，它的能力是以 TC39 制定的 ECMAScript 规范为基准（即 JavaScript<strong><span>&nbsp;</span></strong>）。我觉得它也谈不上会取代 JavaScript<strong><span>&nbsp;</span></strong>，毕竟它并不是官方规范，而且 JavaScript<strong><span>&nbsp;</span></strong>的存量生态实在是太庞大了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">当然，TypeScript 现在已经某种程度上成为事实的标准，尤其是因为 Node.js 官方对 ESM 和 CJS 何去何从的犹豫，导致社区开发者长时间的割裂，越来越多的人被迫选择用 TypeScript 来写类库，然后同时编译为 ESM 和 CJS。目前 TypeScript 的生态已经成规模，所以它不会像 CoffeeScript 那样昙花一现。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>我个人认为 TypeScript 会持续流行并得到更广泛的应用。但并不会 「取代」 JavaScript<strong><span>&nbsp;</span></strong>。TypeScript 的目标一直都不是 「取代」 JavaScript<strong><span>&nbsp;</span></strong>，而是基于 JavaScript<strong><span>&nbsp;</span></strong>提供类型系统，作为 JavaScript<strong><span>&nbsp;</span></strong>的一个补充，在不同的项目和场景中发挥各自的优势。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">JavaScript<strong><span>&nbsp;</span></strong>和 TypeScript 的技术生态早已融合在一起了吧，几乎所有库都会有 TypeScript 类型文件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>我认为 TypeScript 不太可能完全取代 JavaScript，而是作为 JavaScript 的一个补充和增强。两者暂时不会出现零和博弈，也希望这两种语言都可以有更好的发展。目前来看 JavaScript 的生态更庞大一些，但是 TypeScript 的地位和影响力不断增长。作为普通开发者，在两者并不冲突的当下，最好都能关注其发展。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><blockquote><h4><strong>完整采访内容查看：<a href="https://my.oschina.net/u/6852546/blog/10114672" target="_blank">「根本不需要 TypeScript，JS + JSDoc 够了」，大佬说我想多</a></strong></h4></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 06:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260816</guid>
            <link>https://www.oschina.net/news/260816</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust 1.73.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Rust 1.73.0 稳定版已正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2023%2F10%2F05%2FRust-1.73.0.html" target="_blank">发布</a>，主要带来以下变化：</p><h4><span><span><strong><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Cleaner panic messages</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></span></span></h4><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>默认紧急处理程序生成的输出已更改为将 panic 消息放在单独一行，而不是用引号括起来。这可以使 panic 消息更易于阅读，如本示例所示：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><div style="margin-left:1em; margin-right:1em; text-align:start"><pre><code><span><span style="color:#b854d4">fn</span><span style="color:#6684e1">main</span></span>() {
    <span style="color:#b854d4">let</span> file = <span style="color:#60ac39">"ferris.txt"</span>;
    <span style="color:#b65611">panic!</span>(<span style="color:#60ac39">"oh no! {file:?} not found!"</span>);
}</code></pre></div><p style="text-align:start"><span style="background-color:#ffffff; color:#000000">Output before Rust 1.73：</span></p><pre style="text-align:start"><code class="language-text">thread 'main' panicked at 'oh no! "ferris.txt" not found!', src/main.rs:3:5</code></pre><p><span style="background-color:#ffffff; color:#000000">Output starting in Rust 1.73：</span></p><pre style="text-align:start"><code class="language-text">thread 'main' panicked at src/main.rs:3:5:
oh no! "ferris.txt" not found!</code></pre><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>这在信息较长、包含嵌套引号或跨多行时尤其有用。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此外，<code>assert_eq</code>和<code>assert_ne</code>产生的 panic 消息也已被修改，移动了自定义消息（第三个参数）并删除了一些不必要的标点符号，如下所示：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><div style="margin-left:1em; margin-right:1em; text-align:start"><pre><code><span><span style="color:#b854d4">fn</span><span style="color:#6684e1">main</span></span>() {
    <span style="color:#b65611">assert_eq!</span>(<span style="color:#60ac39">"🦀"</span>, <span style="color:#60ac39">"🐟"</span>, <span style="color:#60ac39">"ferris is not a fish"</span>);
}</code></pre></div><p style="text-align:start"><span style="background-color:#ffffff; color:#000000">Output before Rust 1.73：</span></p><pre><code class="language-text">thread 'main' panicked at 'assertion failed: `(left == right)`
 left: `"🦀"`,
right: `"🐟"`: ferris is not a fish', src/main.rs:2:5</code></pre><p style="text-align:start"><span style="background-color:#ffffff; color:#000000">Output starting in Rust 1.73：</span></p><pre><code class="language-text">thread 'main' panicked at src/main.rs:2:5:
assertion `left == right` failed: ferris is not a fish
 left: "🦀"
right: "🐟"</code></pre><h4 style="text-align:start"><strong>Thread local initialization</strong></h4><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frust-lang%2Frfcs%2Fblob%2Fmaster%2Ftext%2F3184-thread-local-cell-methods.md" target="_blank">正如 RFC 3184</a>&nbsp;中所提议的，<code>LocalKey&lt;Cell&lt;T&gt;&gt;</code>和<code>LocalKey&lt;RefCell&lt;T&gt;&gt;</code>现在可以直接使用<code>get()</code>、<code>set()</code>、<code>take()</code>和<code>replace()</code>方法进行操作，而无需像一般<code>LocalKey</code>工作那样跳过<code>with(|inner| ...)</code>闭包。<code>LocalKey&lt;T&gt;</code>是<code>thread_local!</code>statics 的类型。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>新方法使 </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#000000">common code&nbsp;</span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>更加简洁，并避免了为新线程在<code>thread_local!</code>中指定的默认值运行额外的初始化代码。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="text-align:start"><code class="language-rust">thread_local! {
    <span style="color:#b854d4">static</span> THINGS: Cell&lt;<span style="color:#b65611">Vec</span>&lt;<span style="color:#b65611">i32</span>&gt;&gt; = Cell::new(<span style="color:#b65611">Vec</span>::new());
}

<span><span style="color:#b854d4">fn</span><span style="color:#6684e1">f</span></span>() {
    <span style="color:#aaaaaa">// before:</span>
    THINGS.with(|i| i.set(<span style="color:#b65611">vec!</span>[<span style="color:#b65611">1</span>, <span style="color:#b65611">2</span>, <span style="color:#b65611">3</span>]));
    <span style="color:#aaaaaa">// now:</span>
    THINGS.set(<span style="color:#b65611">vec!</span>[<span style="color:#b65611">1</span>, <span style="color:#b65611">2</span>, <span style="color:#b65611">3</span>]);

    <span style="color:#aaaaaa">// ...</span><span style="color:#aaaaaa">// before:</span><span style="color:#b854d4">let</span> v = THINGS.with(|i| i.take());
    <span style="color:#aaaaaa">// now:</span><span style="color:#b854d4">let</span> v: <span style="color:#b65611">Vec</span>&lt;<span style="color:#b65611">i32</span>&gt; = THINGS.take();
}
</code></pre><p style="text-align:start"><strong>Stabilized APIs</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fprimitive.u32.html%23method.div_ceil" target="_blank">Unsigned<span>&nbsp;</span><code>{integer}::div_ceil</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fprimitive.u32.html%23method.next_multiple_of" target="_blank">Unsigned<span>&nbsp;</span><code>{integer}::next_multiple_of</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fprimitive.u32.html%23method.checked_next_multiple_of" target="_blank">Unsigned<span>&nbsp;</span><code>{integer}::checked_next_multiple_of</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fffi%2Fstruct.FromBytesUntilNulError.html" target="_blank"><code>std::ffi::FromBytesUntilNulError</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fos%2Funix%2Ffs%2Ffn.chown.html" target="_blank"><code>std::os::unix::fs::chown</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fos%2Funix%2Ffs%2Ffn.fchown.html" target="_blank"><code>std::os::unix::fs::fchown</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fos%2Funix%2Ffs%2Ffn.lchown.html" target="_blank"><code>std::os::unix::fs::lchown</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.get" target="_blank"><code>LocalKey::&lt;Cell&lt;T&gt;&gt;::get</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.set" target="_blank"><code>LocalKey::&lt;Cell&lt;T&gt;&gt;::set</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.take" target="_blank"><code>LocalKey::&lt;Cell&lt;T&gt;&gt;::take</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.replace" target="_blank"><code>LocalKey::&lt;Cell&lt;T&gt;&gt;::replace</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.with_borrow" target="_blank"><code>LocalKey::&lt;RefCell&lt;T&gt;&gt;::with_borrow</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.with_borrow_mut" target="_blank"><code>LocalKey::&lt;RefCell&lt;T&gt;&gt;::with_borrow_mut</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.set-1" target="_blank"><code>LocalKey::&lt;RefCell&lt;T&gt;&gt;::set</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.take-1" target="_blank"><code>LocalKey::&lt;RefCell&lt;T&gt;&gt;::take</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fstd%2Fthread%2Fstruct.LocalKey.html%23method.replace-1" target="_blank"><code>LocalKey::&lt;RefCell&lt;T&gt;&gt;::replace</code></a></li></ul><p style="color:#000000; text-align:start"><span style="background-color:#ffffff; color:#000000">这些 API 现在在 const contexts 中是稳定的：</span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Falloc%2Frc%2Fstruct.Weak.html%23method.new" target="_blank"><code>rc::Weak::new</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Falloc%2Fsync%2Fstruct.Weak.html%23method.new" target="_blank"><code>sync::Weak::new</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rust-lang.org%2Fstable%2Fcore%2Fptr%2Fstruct.NonNull.html%23method.as_ref" target="_blank"><code>NonNull::as_ref</code></a></li></ul><p>&nbsp;详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rust-lang.org%2F2023%2F10%2F05%2FRust-1.73.0.html" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 06:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260807/rust-1-73-0-released</guid>
            <link>https://www.oschina.net/news/260807/rust-1-73-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Glibc 动态加载器存在严重本地提权漏洞]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日有关 Glibc 动态加载器 (Dynamic Loader) 的一个严重漏洞被公开，<strong>攻击者获取本地用户 (local users) 身份后，利用该漏洞制造缓冲区溢出</strong>，<strong>即可获得完整 root 权限</strong>。</p><p>据介绍，攻击者使用由 ld.so 动态加载器制作的 GLIBC_TUNABLES 环境变量来触发漏洞，然后通过 SUID 权限安装文件时，能以 root 权限执行任意代码。</p><blockquote><p>Glibc 即 GNU C Library，是 GNU 系统以及大多数采用 Linux 内核的系统中的 C 运行库。Glibc 是 Linux 系统中最底层的 API，几乎其它任何运行库都会依赖于 Glibc。</p><p>它定义了典型程序所需的系统调用和其他基本功能，例如 open、malloc、printf、exit 等。 Glibc 的动态加载器是 glibc 的重要组成部分，负责准备和运行程序。当程序启动时，该加载器首先检查该程序以确定其所需的共享库。然后它搜索这些库，将它们加载到内存中，并在运行时将它们与可执行文件链接。</p><p>在此过程中，动态加载器解析符号引用，例如函数和变量引用，确保为程序的执行做好一切准备。鉴于其作用，动态加载器对安全性高度敏感，因为当本地用户启动 set-user-ID 或 set-group-ID 程序时，其代码会提权来运行。</p></blockquote><p>该漏洞最早<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.qualys.com%2Fvulnerabilities-threat-research%2F2023%2F10%2F03%2Fcve-2023-4911-looney-tunables-local-privilege-escalation-in-the-glibcs-ld-so" target="_blank">由 Qualys 报告</a></strong>，被命名为&nbsp;<strong>Looney Tunables</strong>，追踪编号为 CVE-2023-4911。据称过去两年发布的 Linux 发行版均受存在 Looney Tunables 漏洞 ，例如 Ubuntu 22.04 LTS、23.04、Fedora 38 以及其他容易受到此本地提权漏洞影响的发行版。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-25c8c90352d003a1c79ed3f79edbbd0bd55.png" referrerpolicy="no-referrer"></p><p>漏洞曝光后，独立安全研究员 Peter Geissler (blasty) 很快就发布了 PoC 代码，确认可以攻击 Linux 发行版。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9ef2f1befa040312fa6202ca9fe080882f7.png" referrerpolicy="no-referrer"></p><p>上文提到的 GLIBC_TUNABLES 环境变量旨在微调和优化与 glibc 相关的应用程序，是开发者和系统管理员的必备工具。它的滥用会广泛影响系统性能、可靠性和安全性。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260786/glibc-ld-nasty-root-bug</guid>
            <link>https://www.oschina.net/news/260786/glibc-ld-nasty-root-bug</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[再添一员！Cutefish 桌面环境成功适配 openKylin]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">近日，在 openKylin 社区 Cutefish SIG 成员的努力下，openKylin 开源操作系统桌面环境又迎来一个新成员—</span><strong><span style="color:#000000">Cutefish</span></strong><span style="color:#000000">。这也是继 UKUI、KDE、Xfce 和 DDE 之后，openKylin 开源操作系统支持的第五个 Linux 桌面环境，为社区用户带来更多选择。</span></span></p><div><p style="text-align:center"><img alt="" height="921" src="https://oscimg.oschina.net/oscnet/up-e557c73aea5afb59e398f92bd116adde5c1.png" width="1637" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000"><span style="background-color:#f0f3ff">Cutefish 是一款简洁、美观、实用的桌面环境，为用户提供舒适的界面与优秀的用户体验，能够满足各种场景下的使用需求。</span></span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">除 X86 环境外，openKylin 社区 Cutefish SIG 也完成了 Cutefish 桌面环境对 openKylin 操作系统 ARM 架构板卡的适配。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-f2576a6dd2921f794fe704e744966b24dc3.jpg" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">同时，在赛昉科技和 RISC-V SIG 的帮助下，Cutefish SIG 成功将 Cutefish 桌面移植到 VisionFive2。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-48c1c00d01962014df6b292dc18001b4b32.jpg" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">截至目前，已完成 Cutefish 软件包的移植工作，并经 Cutefish SIG 成员测试可流畅运行桌面及其特色应用。欢迎大家在 openKylin 上安装和体验 Cutefish 桌面环境。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#2589fb">安装方式</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">1.添加每日构建源</span></strong></span></p><pre><code><span style="color:#114ba6">deb</span> http://archive.build.openkylin.top/openkylin yangtze-proposed main</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">2.更新源</span></strong></span></p><pre><code>sudo apt <span style="color:#114ba6">update</span> &amp;&amp; sudo apt <span style="color:#114ba6">upgrade</span></code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">3.搜查 Cutefish 软件包</span></strong></span></p><pre><code>sudo apt-<span style="color:#114ba6">cache</span><span style="color:#114ba6">search</span> cutefish</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">4.安装</span></strong></span></p><pre><code>sudo apt <span style="color:#114ba6">install</span> cutefish-core cutefish-dock cutefish-daemon 
cutefish-qt-plugins cutefish-calculator cutefish-debinstaller 
cutefish-filemanager cutefish-launcher cutefish-screenlocker 
cutefish-<span style="color:#114ba6">settings</span> cutefish-statusbar cutefish-terminal cutefish-videoplayer 
cutefish-wallpapers cutefish-<span style="color:#114ba6">cursor</span>-themes cutefish-gtk-themes 
cutefish-sddm-theme  fishui libcutefish</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">5.切换桌面</span></strong></span></p><div><p style="text-align:center"><img alt="" height="794" src="https://oscimg.oschina.net/oscnet/up-05f1ddfabb6c84942d02a3c851f48b47a92.png" width="1277" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#2589fb">关于 Cutefish SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Cutefish 是一款简洁、美观、实用的桌面环境，Cutefish SIG 致力于维护 Cutefish 相关组件，如桌面、启动器、任务栏、控制中心、窗口管理器等，给 openKylin 提供美观易用的桌面环境。</span></span></p><ul><li><span><span style="color:#000000">SIG 主页：</span></span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/Cutefish</span></span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260772</guid>
            <link>https://www.oschina.net/news/260772</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SecZone 每日安全资讯（2023.10.08）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>环球动态<br> 1.Microsoft 将在 Windows 11 中引入密钥支持功能<br> 作为 Windows 11 重大更新的一部分，微软今天推出了密钥支持功能。用户将能使用设备 PIN 或生物识别信息登录网站和应用，而无需提供用户名和密码。【Microsoft is Rolling out Support for Passkeys in Windows 11 (thehackernews.com)】</p><p>2.黑客利用零点字体伪装成 Microsoft Outlook 诱骗显示虚假的 AV 扫描警报<br> 黑客正在利用零点字体在电子邮件中的新型技巧，使恶意邮件看起来像是 Microsoft Outlook 中的安全工具发出的扫描警报。这是首次记录到 ZeroFont 网络钓鱼技术以这种方式的使用。【针对 Microsoft 365 的钓鱼即服务平台 Greatness - FreeBuf 网络安全行业门户】</p><p>3. 谷歌为攻击中利用的 libwebp 漏洞分配了新的最高 CVE 编号<br> 谷歌已经为最近被攻击利用的 libwebp 安全漏洞分配了新的最高 CVE 编号（CVE-2023-5129）。这个零日漏洞在两周前修补过。【VMware Aria Operations for Networks 远程代码执行漏洞（CVE-2... - FreeBuf 网络安全行业门户】</p><p>4. 新的 AtlasCross 黑客冒充美国红十字会发送网络钓鱼诱饵<br> 「AtlasCross」新黑客组织冒充美国红十字会，针对有网络钓鱼诱饵的组织发送后门恶意软件。【Access denied | www.bleepingcomputer.com used Cloudflare to restrict access】</p><p>5. 苹果谷歌漏洞披露不充分，使腾讯 QQ 等数百万应用面临潜在风险<br> 安全研究员指出，苹果和谷歌近期披露的产品零日漏洞不完整，可能隐藏了一个上游开源库 libwebp 的漏洞，使腾讯 QQ 等数百万应用面临「巨大的盲点」，处于被攻击的危险之中。【苹果谷歌漏洞披露不完整，让腾讯 QQ 等数百万应用处于危险之中 - 安全内参 | 决策者的网络安全知识库 (secrss.com)】</p><p>6.科技巨头们联手成立了 PQC 联盟以推动量子密码学的应用<br> 微软、IBM Quantum、MITRE、PQShield、SandboxAQ 和滑铁卢大学等科技巨头联手启动了 PQC 联盟，旨在推动量子密码学在商业及开源领域的应用。Shor 算法作为构建所有非对称加密的基础，正受到量子计算的威胁。【Tech Giants Launch Post-Quantum Cryptography Coalition - Infosecurity Magazine (infosecurity-magazine.com)】</p><p>安全大爆料<br> 1. 加拿大的 Flair Airlines 公司在其用户数据保护方面存在严重问题<br> 根据 Cybernews 的研究团队的发现，加拿大的 Flair Airlines 公司在其用户数据保护方面存在着严重的问题。他们发现，该公司在处理敏感数据库和电子邮件地址凭据的过程中，竟然将它们保留了下来长达至少七个月的时间。这种情况无疑增加了乘客个人信息（如电子邮件、姓名或地址）被不法分子利用的风险。这不仅对乘客的个人隐私构成了威胁，也对他们的安全带来了潜在的风险。【Canadian Flair Airlines left user data leaking for months (securityaffairs.com)】</p><p>2. 科威特财政部遭.HYSIDA 勒索软件组织攻击<br> 财政部在今天黎明时分宣布，其一个系统遭到了恶意软件的黑客攻击。尽管系统和保护程序已经启动并停用，但该部仍在评估这次未遂黑客攻击的程度。此外，财政部还确认，工资转移程序不会受到这次网络攻击的影响，因为政府的财务系统是独立的。【The Rhysida ransomware group hit the Kuwait Ministry of Finance (securityaffairs.com)】</p><p>3. 3 万新生儿和孕期护理患者的数据泄露事件影响了 BORN ONTARIO<br> "BORN（更好的结果注册和网络）受到了网络安全漏洞的影响，这个漏洞是由我们使用的软件 Progress MOVEit 在执行安全文件传输时触发的全球性漏洞所导致。"【BORN Ontario data breach impacted 3.4 million newborns and pregnancy care patients (securityaffairs.com)】</p><p>4. 影子辛迪加：与 7 个勒索软件家族有关的新兴网络犯罪组织<br> 网络安全专家揭示了一个名为 ShadowSyndicate（前身为 Infra Storm）的新网络犯罪组织，该组织在过去一年中可能利用了多达七个不同的勒索软件家族。【ShadowSyndicate: A New Cybercrime Group Linked to 7 Ransomware Families (thehackernews.com)】</p><p>5. JetBrains TeamCity 的漏洞可能让攻击者获得源代码和构建管道的访问权限<br> 没有经过身份验证的攻击者可以利用 JetBrains TeamCity CI/CD 软件中的一个关键安全漏洞，在受影响的系统上远程执行代码。【Critical JetBrains TeamCity Flaw Could Expose Source Code and Build Pipelines to Attackers (thehackernews.com)】</p><p>6. 网络钓鱼者利用 Facebook 直播假货作为诱饵<br> NCC 警告称，「航海狂人」可能很容易被虚假的社交媒体帖子所诱惑，一些受害者甚至可能在不知不觉中成为了犯罪分子的新兵，以获取整齐的 Facebook 帐户详细信息。【Critical JetBrains TeamCity Flaw Could Expose Source Code and Build Pipelines to Attackers (thehackernews.com)】</p><p>前沿资讯<br> 1. macOS 平台上出现的新型信息窃密软件：MacStealer<br> 信息窃密恶意软件 MacStealer 能够对最新版本的 macOS 造成威胁，并且使用了 Telegram 作为 C&amp;C 信道来窃取受害者的敏感数据。【macOS 平台新出现的信息窃密软件：MacStealer_网络安全小肖的博客-CSDN 博客】</p><p>2. 零信任技术架构：SDP2.0 的中文改写版<br> "在零信任技术架构中，本质上没有太大的区别。在实际的客户环境中，我们需要根据具体情况有侧重点地进行建设，例如优先加强端点零信任能力（SDP 架构）、身份认证零信任能力（IAM 架构）或东西向流量的零信任能力（MSG 架构）等。"【白话零信任技术架构之 SDP2.0 - FreeBuf 网络安全行业门户】</p><p>3. 0day 审计：某微代码审计案例的中文改写版本<br> 这个方法是继承了 extends MobileAction 并通过 http 请求获取 action 参数，然后进行全局 jsp 文件搜索 SkinAction，发现通过了 jionActionUrl 方法调用，在第 2 行包含了&lt;%@ include file="/mobilemode/init.jsp"%&gt;，根据里方法构造出路径。【0day 审计之某微代码审计-腾讯云开发者社区-腾讯云 (tencent.com)】</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260771</guid>
            <link>https://www.oschina.net/news/260771</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Brave 裁员 9%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Brave Browser 和 Search 的制造商 Brave Software 向 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F10%2F06%2Fbrave-lays-off-9-of-its-workforce%2F" target="_blank">TechCrunch</a> 证实，该公司已跨部门裁员 9%。该公司没有具体说明裁员波及的员工人数，但它证实了这一裁员举措，并表示这一决定是由严峻的经济环境所驱动的。</span></p><p><span style="color:#000000">「在这个充满挑战的经济环境中，Brave 公司裁撤了一些职位，作为我们成本管理的一部分。有几个部门受到影响，占我们员工总数的 9%。」</span></p><p><img height="261" src="https://oscimg.oschina.net/oscnet/up-38a5daf764ff082e1ad6362984e1cec8e08.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">今年以来，该公司一直在采取措施以加强收入来源。4 月份，Brave Search 放弃了 Bing Index，开始依赖自己的索引解决方案。</span></p><p><span style="color:#000000">5 月份，该公司为客户发布了自己的&nbsp;search API，计划每 1,000 次查询收费 3 美元起。该 API 还为 AI 数据模型训练、具有存储权限的数据、拼写检查和自动建议提供了不同的计划。上个月，Brave 还为其 search API 推出了图像、新闻和视频搜索功能。</span></p><p><span style="color:#000000">此外，Brave 一直在为其浏览器测试名为 Leo 的原生人工智能助手。Brave 表示，虽然计划向所有用户开放，但 Leo 将拥有高级版，具有更高的速率限制和访问更多对话模型等功能。该公司指出，这将有助于其支付 API 访问和托管成本。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260770/brave-lays-off-9-of-its-workforce</guid>
            <link>https://www.oschina.net/news/260770/brave-lays-off-9-of-its-workforce</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[NASA 更改 CMS：从 Drupal 迁移到 WordPress]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>美国国家航空航天局 (NASA) 移除了新版<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nasa.gov%2F" target="_blank">&nbsp;nasa.gov </a>网站上的 beta 测试标签，标志其已正式可用。</p><p>据介绍，NASA 新版本官网采用了新的 CMS（内容管理系统） —— 从 Drupal 迁移到 WordPress。此次迁移花费了 18 个月，主要工作包括网站开发、数据迁移和内容建设。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6f81cac58978084713557fe55beb8b4510b.png" referrerpolicy="no-referrer"></p><p>NASA 在选择 CMS 时评估了商业和开源解决方案，对 100 多个 CMS 平台进行了考察，四个方案进入了最终候选名单，包括两个商业方案，以及两个开源方案 —— WordPress 和 Drupal。</p><p>他们认为 WordPress 的优势如下：</p><ul><li><strong>社区庞大</strong>，方便获取支持资源。</li><li><strong>插件生态丰富</strong>，更好地进行 SEO 优化、对内容进行实时分析等</li><li><strong>内容创作环境易于使用</strong></li></ul><p>WordPress.com VIP 金牌代理合作伙伴 Lone Rock Point 领导了 NASA 此次 CMS 迁移项目，该项目从一年的用户体验设计和对各种企业 CMS 的评估开始。作为该项目的一部分，NASA 的网站基础设施也从 AWS 迁移到了 WordPress.com VIP。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260768/nasa-chose-wordpress-cms</guid>
            <link>https://www.oschina.net/news/260768/nasa-chose-wordpress-cms</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SudoLang —— 与 AI 语言模型协作的编程语言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>SudoLang 是一种编程语言，旨在与 ChatGPT、Bing Chat、Anthropic Claude 和 Google Bard 等 AI 语言模型协作。它被设计为易于学习和使用，同时也非常具有表现力和力量。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>所有足够先进的语言模型都可以在没有任何特殊提示的情况下理解它。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 style="text-align:start"><strong><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>特点</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><ul><li><strong>基于自然语言约束的编程。</strong>与其告诉人工智能做什么，不如告诉它是什么或你想要什么，以及一些管理规则。人工智能会持续遵守这些约束，并可用于同步状态和行为。只需几行自然语言文本，约束条件就能轻松定义非常复杂的行为。</li><li>用于定义程序的结构和行为的<strong>接口。</strong></li><li><strong><code>/commands</code></strong>用于为程序交互定义聊天或编程接口。</li><li><strong>语义模式匹配</strong>。AI 可以智能地推断程序状态并匹配模式，诸如<code>(post contains harmful content) =&gt; explain(content policy)</code>。</li><li><strong>全能参照。</strong>你无需明确定义大多数函数。人工智能会为你推断出它们。</li></ul><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>对于大多数简单的提示，自然语言更好。用它。但如果你需要 AI 遵循程序、遵守约束、跟踪复杂状态或实现复杂算法，SudoLang 会非常有用。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>由于强调自然语言，SudoLang 比 JavaScript 或 Python 等编程语言更容易学习。</li><li>与自然语言提示相比，伪代码可以<a href="https://arxiv.org/abs/2305.11790">提高推理性能</a>，并为许多提示样式创建简写，例如思想链推理、决策树等。</li><li>SudoLang 是一种声明性、基于约束、面向接口的编程语言，这使其成为世界上最具表现力和紧凑的编程语言之一。SudoLang 提示通常可以比自然语言少 20% - 30% 的标记，从而降低提示成本并加快响应速度。</li><li>结构化伪代码提供范围块、缩进和视觉封装，这使得导航和维护复杂提示比自然语言更容易。</li><li>使用预定义类型和接口的结构化模板和查询可以降低格式错误响应的可能性，并<a href="https://arxiv.org/pdf/2212.06094.pdf">显着减少与语言模型交互所需的令牌数量</a>，特别是在请求<a href="https://yaml.org/">yaml</a>或<a href="https://en.wikipedia.org/wiki/Comma-separated_values">csv</a>格式的数据时。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/sudolang</guid>
            <link>https://www.oschina.net/p/sudolang</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 键映射解决方案 Capslock Magic]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-capslockmagic" class="anchor" href="https://gitee.com/miozus/CapslockMagic#capslockmagic"></a>CapslockMagic</h1><blockquote><p><a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic">中文文档</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fen-us%2F">README</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fke-complex-modifications.pqrs.org%2F%23caps_lock_magic">Karabiner Gallery</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmiozus%2FCapslockMagic">Github Repo</a> | <a href="https://gitee.com/miozus/CapslockMagic">Gitee Repo</a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fthqby%2FAutoHotkey_H"><img src="https://img.shields.io/badge/AutoHotkey__H-thqby-orange?style=flat&amp;logo=GitHub" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmiozus%2FCapslockMagic"><img src="https://img.shields.io/badge/CapslockMagic-1.5.1-brightengreen?style=flat&amp;logo=ClickUp" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fjq.qq.com%2F%3F_wv%3D1027%26k%3DiiuN83v3"><img src="https://img.shields.io/badge/QQ%E7%BE%A4-1026918136-yellow?style=flat&amp;logo=TencentQQ" referrerpolicy="no-referrer"></a></p></blockquote><p><img src="https://gitee.com/miozus/CapslockMagic/raw/master/docs/img/HHKB-win-keymap-pure.png" alt="hhkb" referrerpolicy="no-referrer"></p><p>Capslock Magic 是一套<strong>跨平台</strong>、<strong>跨应用</strong>的键映射解决方案。 它将 ⇪ CapsLock（大写锁定键）改造为一个强力的功能修饰键（✱ Hyper ），还改造了 <kbd>3</kbd><kbd>4</kbd><kbd>;</kbd> 按键，适用各种日常业务场景。奇迹般地提高操作效率与生产力。</p><p>—— <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fmonkey-ime">示例</a> —— <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fquick-start-windows">安装</a> —— <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fcapslock-enhancement">使用</a> —— <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fcapslock-enhancement">问题</a> ——</p><h2><a id="user-content-功能一览" class="anchor" href="https://gitee.com/miozus/CapslockMagic#%E5%8A%9F%E8%83%BD%E4%B8%80%E8%A7%88"></a>功能一览</h2><table><thead><tr><th>&nbsp;</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>底层</td><td>💻  支持 Win/Mac</td><td>⌨️  键盘配列 60</td><td>🧰  JavaScprit 风格</td><td>⚙️  配置自定义</td></tr><tr><td>基础</td><td>👾  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fcapslock-enhancement">启动程序</a></td><td>📺  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fwindow">窗口管理</a></td><td>🖱️  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fmouse">鼠标操作</a></td><td><code>I</code><a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fcapslock-enhancement">光标编辑</a></td></tr><tr><td>进化</td><td>🐵  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fmonkey-ime">猴子输入法</a></td><td><code>;</code><a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fsemicolon-hook">分号特殊符</a></td><td>3️⃣  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fnumpad">数字小键盘</a></td><td>🤖  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Fime-manager">中英文管家</a></td></tr><tr><td>进化</td><td>🦑  <a href="https://gitee.com/link?target=https%3A%2F%2Fmiozus.github.io%2FCapslockMagic%2F%23%2Fzh-cn%2Funiverse-editor">宇宙编辑器</a></td><td></td><td></td><td></td></tr></tbody></table>]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/miozus/CapslockMagic</guid>
            <link>https://gitee.com/miozus/CapslockMagic</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | MySQL 到 TiDB：Hive Metastore 横向扩展之路]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe mp_common_widget" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互联网技术" data-alias="vivoVMIC" data-signature="分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。" data-from="0"></mp-common-profile></section><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p>作者：vivo 互联网大数据团队 - Wang Zhiwen</p></section></section></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="font-size: 14px;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p>本文介绍了 vivo 在大数据元数据服务横向扩展道路上的探索历程，由实际面临的问题出发，对当前主流的横向扩展方案进行了调研及对比测试，通过多方面对比数据择优选择 TiDB 方案。其次分享了整个扩展方案流程、实施遇到的问题及解决方案，对于在大数据元数据性能上面临同样困境的开发者本篇文章具有非常高的参考借鉴价值。</p></section></section></section></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、背景</p></section></section><p powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p>大数据元数据服务 Hive Metastore Service（以下简称 HMS），存储着数据仓库中所依赖的所有元数据并提供相应的查询服务，使得计算引擎（Hive、Spark、Presto）能在海量数据中准确访问到需要访问的具体数据，其在离线数仓的稳定构建上扮演着举足轻重的角色。vivo 离线数仓的 Hadoop 集群基于 CDH 5.14.4 版本构建，HMS 的版本选择跟随 CDH 大版本，当前使用版本为 1.1.0-cdh5.14.4。</p><p><br></p><p>vivo 在 HMS 底层存储架构未升级前使用的是 MySQL 存储引擎，但随着 vivo 业务发展，数据爆炸式增长，存储的元数据也相应的增长到亿级别（PARTITION_PARAMS：8.1 亿、</p><p>PARTITION_KEY_VALS：3.5 亿、PARTITIONS：1.4 亿），在如此大量的数据基数下，我们团队经常面临机器资源的性能瓶颈，往往用户多并发的去查询某些大分区表（50w+分区），机器资源的使用率就会被打满，从而导致元数据查询超时，严重时甚至整个 HMS 集群不可用，此时恢复手段只能暂时停服所有 HMS 节点，直到 MySQL 机器负载降下来后在逐步恢复服务。为此，针对当前 MySQL 方案存在的严重性能瓶颈，HMS 急需一套完善的横向扩展方案来解决当前燃眉之急。</p></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、横向扩展技术方案选型</p></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">为解决 HMS 的性能问题，我们团队对 HMS 横向扩展方案做了大量的调研工作，总体下来业内在 HMS 的横向扩展思路上主要分为对 MySQL 进行拆库扩展或用高性能的分布式引擎替代 MySQL。在第一种思路上做的比较成熟的方案有<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fhotels.com%2F" textvalue="Hotels.com" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Hotels.com</a>公司开源的 Waggle Dance，实现了一个跨集群的 Hive Metastore 代理网关，他允许用户同时访问多个集群的数据，这些集群可以部署在不同的平台上，特别是云平台。第二种思路当前主流的做法是用分布式存储引擎 TiDB 替换传统的 MySQL 引擎，在 Hive 社区中有不少公司对 hive 2.x 接入 TiDB 做了大量的测试并应用到生产中（<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwiki.apache.org%2Fconfluence%2Fdisplay%2FHive%2FUsing%2BTiDB%2Bas%2Bthe%2BHive%2BMetastore%2Bdatabase" textvalue="详情点击" linktype="text" imgurl="" tab="outerlink" data-linktype="2">详情点击</a>）。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 Waggle Dance</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">Waggle-dance 向用户提供统一的入口，将来自 Metastore 客户端的请求路由到底层对应的 Metastore 服务，同时向用户隐藏了底层的 Metastore 分布，从而在逻辑层面整合了多个 Metastore 的 Hive 库表信息。Waggle-dance 实现了 Metastore 的 Thrift API，客户端无需改动，对用户来说，Waggle-dance 就是一个 Metastore。其整体架构如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.9175925925925926" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/a9e0ef2a-6dea-4425-8220-7df8cbb062f1.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">Waggle Dance 架构</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">从 Waggle-dance 的架构中最突出的特性是其采用了多个不同的 MySQL 实例分担了原单 MySQL 实例的压力，除此之外其还有如下优势：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>用户侧可以沿用 Metastore 客户端的用法，配置多台 Waggle-dance 的连接，在当前 Waggle-dance 连接服务不可用的时候切换到其他的 Waggle-dance 服务上。</p></li><li><p>Waggle-dance 只需几秒即可启动，加上其无状态服务的特性，使得 Waggle-dance 具备高效的动态伸缩性，可以在业务高峰期快速上线新的服务节点分散压力，在低峰期下线部分服务节点释放资源。</p></li><li><p>Waggle-dance 作为一个网关服务，除了路由功能外，还支持后续的定制化开发和差异化部署，平台可根据需要添加诸如鉴权、防火墙过滤等功能。</p></li></ol></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.2 TiDB</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">TiDB 是 PingCAP 公司自主设计、研发的开源分布式关系型数据库，是一款同时支持在线事务处理与在线分析处理 (Hybrid Transactional and Analytical Processing, HTAP) 的融合型分布式数据库产品，具备水平扩容或者缩容、金融级高可用、实时 HTAP、云原生的分布式数据库、兼容 MySQL 5.7 协议和 MySQL 生态等重要特性。在 TiDB 4.x 版本中，其性能及稳定性较与之前版本得到了很大的提升并满足 HMS 的元数据查询性能需求。故我们对 TiDB 也做了相应的调研及测试。结合 HMS 及大数据生态，采用 TiDB 作为元数据存储整体的部署架构如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.8727272727272727" data-s="300,640" data-type="png" data-w="825" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/e149c269-2046-48a7-bb11-e0a90ce0edf1.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">HMS on TiDB 架构&nbsp; &nbsp;</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">由于 TiDB 本身具有水平扩展能力，扩展后能均分查询压力，该特性就是我们解决 HMS 查询性能瓶颈的大杀器。除此外该架构还有如下优势：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>用户无需任何改动；HMS 侧面没有任何改动，只是其依赖的底层存储发生变化。</p></li><li><p>不破坏数据的完整性，无需将数据拆分多个实例来分担压力，对 HMS 来说其就是一个完整、独立的数据库。</p></li><li><p>除引入 TiDB 作为存储引擎外，不需要额外的其他服务支撑整个架构的运行。</p></li></ol></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3 TiDB 和 Waggle Dance 对比</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">前面内容对 Waggle-dance 方案和 TiDB 方案做了简单的介绍及优势总结，以下列举了这两个方案在多个维度的对比：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.6953703703703704" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/d3ce1c63-1cd8-4917-a94b-0e3c638c3328.png" referrerpolicy="no-referrer"></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">通过上述多个维度的对比，TiDB 方案在性能表现、水平扩展、运维复杂度及机器成本上都优于 waggle-dance 方案，故我们线上选择了前者进行上线应用。&nbsp;</p><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、TiDB 上线方案</p></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">选择 TiDB 引擎替代原 MySQL 存储引擎，由于 TiDB 与 MySQL 之间不能做双主架构，在切换过程中 HMS 服务须完全停服后并重新启动切换至 TiDB，为保障切换过程顺利及后面若有重大问题发生能及时回滚，在切换前做了如下数据同步架构以保障切换前 MySQL 与 TiDB 数据一致以及切换后仍有 MySQL 兜底。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.4703703703703704" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/033aceb3-efa2-4951-9897-94e1c2cbe128.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">TiDB&amp;MySQL 上线前后数据同步架构</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在上述架构中，切换前唯一可写入的数据源只有源数据库主库，其他所有 TiDB、MySQL 节点都为只读状态，当且仅当所有 HMS 节点停服后，MySQL 源数据库从库及 TiDB 源数据库主库的数据同步最大时间戳与源数据库主库一致时，TiDB 源数据库主库才开放可写入权限，并在修改 HMS 底层存储连接串后逐一拉起 HMS 服务。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在上述架构完成后，即可开始具体的切换流程，切换整体流程如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.27037037037037037" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/20cfee5d-3265-4b12-9e43-7fa47ffb8f59.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">HMS 切换底层存储流程</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">其中在保障源 MySQL 与 TiDB 数据正常同步前，需要对 TiDB 做以下配置：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>tidb_skip_isolation_level_check 需要配置为 1 ，否则启动 HMS 存在 MetaException 异常。</p></li><li><p>tidb_txn_mode 需配置为 pessimistic ，提升事务一致性强度。</p></li><li><p>事务大小限制设置为 3G，可根据自己业务实际情况进行调整。</p></li><li><p>连接限制设置为最大 3000 ，可根据自己业务实际情况进行调整。</p></li></ul></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">此外在开启 sentry 服务状态下，需确认 sentry 元数据中 NOTIFICATION_ID 的值是否落后于 HMS 元数据库中 NOTIFICATION_SEQUENCE 表中的 NEXT_EVENT_ID 值，若落后需将后者替换为前者的值，否则可能会发生建表或创建分区超时异常。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">以下为 TiDB 方案在在不同维度上的表现：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;" powered-by="xiumi.us"><li><p>在对 HQL 的兼容性上 TiDB 方案完全兼容线上所有引擎对元数据的查询，不存在语法兼容问题，对 HQL 语法兼容度达 100%&nbsp;</p></li><li><p>在性能表现上查询类接口平均耗时优于 MySQL，性能整体提升 15%；建表耗时降低了 80%，且支持更高的并发，TiDB 性能表现不差于 MySQL</p></li><li><p>在机器资源使用情况上整体磁盘使用率在 10% 以下；在没有热点数据访问的情况下，CPU 平均使用率在 12%；CPU.WAIT.IO 平均值在 0.025% 以下;集群不存在资源使用瓶颈。</p></li><li><p>在可扩展性上 TiDB 支持一键水平扩缩容，且内部实现查询均衡算法，在数据达到均衡的情况下各节点可平摊查询压力。</p></li><li><p>在容灾性上 TiDB Binlog 技术可稳定支撑 TiDB 与 MySQL 及 TiDB 之间的数据同步，实现完整的数据备份及可回退选择。</p></li><li><p>在服务高可用性上 TiDB 可选择 LVS 或 HaProxy 等服务实现负载均衡及故障转移。</p></li></ol></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">以下为上线后 HMS 主要 API 接口调用耗时情况统计：</p><section style="font-size: 15px;"><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 15px;margin-bottom: 15px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 5px;align-self: stretch;flex: 0 0 auto;margin-bottom: 30px;height: auto;z-index: 1;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section><section style="display: inline-block;vertical-align: top;width: auto;align-self: stretch;flex: 100 100 0%;height: auto;padding-right: 10px;padding-left: 10px;z-index: auto;line-height: 0;"><section style="display: flex;width: 100%;flex-flow: column;" powered-by="xiumi.us"><section style="z-index: 1;" powered-by="xiumi.us"><section style="text-align: right;margin-top: -5px;"><section style="display: inline-block;width: 100%;height: 5px;vertical-align: top;overflow: hidden;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-right: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 304px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/9bc1f5fe-5ed3-4507-8edd-99fd9eb4edcd.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-left: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.5880322209436134" data-s="300,640" data-type="jpeg" data-w="869" style="vertical-align: middle;width: 304px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/bde61013-5736-415d-a148-1fb6567a709e.png" referrerpolicy="no-referrer"></section></section></section></section><section style="justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-right: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 304px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/4575beb3-65ef-435b-8992-48929786cf28.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 50%;align-self: flex-start;flex: 0 0 auto;padding-left: 5px;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="269" data-cropsely1="0" data-cropsely2="179" data-ratio="0.6009227220299884" data-s="300,640" data-type="jpeg" data-w="867" style="vertical-align: middle;width: 298px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1c03991f-8f59-408b-a79e-d268d19c62d0.png" referrerpolicy="no-referrer"></section></section></section></section><section style="text-align: right;margin-bottom: -5px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 5px;vertical-align: top;overflow: hidden;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: top;width: 5px;align-self: stretch;flex: 0 0 auto;height: auto;margin-top: 30px;z-index: auto;"><br><br><br><br></section></section><section style="text-align: center;justify-content: center;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: middle;align-self: center;flex: 100 100 0%;border-radius: 10px;overflow: hidden;height: auto;padding: 15px;border-style: solid;border-width: 1px;border-color: transparent;margin-right: 20px;z-index: 0;"><section style="display: inline-block;width: 100%;vertical-align: top;overflow-x: auto;border-radius: 5px;" powered-by="xiumi.us"><section style="overflow: hidden;width: 360%;max-width: 360% !important;"><section style="display: inline-block;vertical-align: middle;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 520px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/9bc1f5fe-5ed3-4507-8edd-99fd9eb4edcd.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.5880322209436134" data-s="300,640" data-type="jpeg" data-w="869" style="vertical-align: middle;width: 520px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/bde61013-5736-415d-a148-1fb6567a709e.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.588774341351661" data-s="300,640" data-type="jpeg" data-w="873" style="vertical-align: middle;width: 520px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/4575beb3-65ef-435b-8992-48929786cf28.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: 25%;" powered-by="xiumi.us"><section style="text-align: left;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 97%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="459" data-cropsely1="0" data-cropsely2="306" data-ratio="0.6009227220299884" data-s="300,640" data-type="jpeg" data-w="867" style="vertical-align: middle;width: 509px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1c03991f-8f59-408b-a79e-d268d19c62d0.png" referrerpolicy="no-referrer"></section></section></section></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: -20px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 auto;min-width: 5%;height: auto;margin-right: 5px;z-index: 2;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;color: rgb(223, 143, 51);font-size: 14px;" powered-by="xiumi.us"><p><br></p><p><span style="color: rgb(136, 136, 136);">（<span style="color: rgb(136, 136, 136);font-size: 14px;letter-spacing: 0.578px;text-wrap: wrap;">左右滑动</span><span style="color: rgb(136, 136, 136);font-size: 14px;letter-spacing: 0.578px;text-wrap: wrap;">，查看更多···</span>）</span></p></section></section></section></section></section><p powered-by="xiumi.us"><br></p></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、问题及解决方案</p></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.1 在模拟 TiDB 回滚至 MySQL 过程中出现主键冲突问题</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在 TiDB 数据增长 3 倍后，切换回 MySQL 出现主键重复异常，具体日志内容如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.12222222222222222" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/dfa5874c-61af-4491-b338-4a3c4bd816af.png" referrerpolicy="no-referrer"></p><p powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">主键冲突异常日志</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">产生该问题的主要原因为每个 TiDB 节点在分配主键 ID 时，都申请一段 ID 作为缓存，用完之后再去取下一段，而不是每次分配都向存储节点申请。这意味着，TiDB 的 AUTO_INCREMENT 自增值在单节点上能保证单调递增，但在多个节点下则可能会存在剧烈跳跃。因此，在多节点下，TiDB 的 AUTO_INCREMENT 自增值从全局来看，并非绝对单调递增的，也即并非绝对有序的，从而导致 Metastore 库里的 SEQUENCE_TABLE 表记录的值不是对应表的最大值。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">造成主键冲突的主要原因是 SEQUENCE_TABLE 表记录的值不为元数据中实际的最大值，若存在该情况在切换回 MySQL 后就有可能生成已存在的主键导致初见冲突异常，此时只需将 SEQUENCE_TABLE 里的记录值设置当前实际表中的最大值即可。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.2 PARTITION_KEY_VALS 的索引取舍</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在使用 MySQL 引擎中，我们收集了部分慢查询日志，该类查询主要是查询分区表的分区，类似如下 SQL：</p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__comment">#以下查询为查询三级分区表模板，且每级分区都有过来条件</span></span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">SELECT</span> PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">FROM</span><span class="code-snippet__keyword">PARTITIONS</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> TBLS</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> PARTITIONS.TBL_ID = TBLS.TBL_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> TBLS.TBL_NAME = <span class="code-snippet__string">'${TABLE_NAME}'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> DBS</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> TBLS.DB_ID = DBS.DB_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> DBS.NAME = <span class="code-snippet__string">'${DB_NAME}'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> PARTITION_KEY_VALS FILTER0</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> FILTER0.PART_ID = PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER0.INTEGER_IDX = ${INDEX1}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> PARTITION_KEY_VALS FILTER1</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> FILTER1.PART_ID = PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER1.INTEGER_IDX = ${INDEX2}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span> PARTITION_KEY_VALS FILTER2</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span> FILTER2.PART_ID = PARTITIONS.PART_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER2.INTEGER_IDX = ${INDEX3}</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHERE</span> FILTER0.PART_KEY_VAL = <span class="code-snippet__string">'${PART_KEY}'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__keyword">CASE</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHEN</span> FILTER1.PART_KEY_VAL &lt;&gt; <span class="code-snippet__string">'__HIVE_DEFAULT_PARTITION__'</span><span class="code-snippet__keyword">THEN</span><span class="code-snippet__keyword">CAST</span>(FILTER1.PART_KEY_VAL <span class="code-snippet__keyword">AS</span><span class="code-snippet__built_in">decimal</span>(<span class="code-snippet__number">21</span>, <span class="code-snippet__number">0</span>))</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ELSE</span><span class="code-snippet__literal">NULL</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">END</span> = <span class="code-snippet__number">10</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span> FILTER2.PART_KEY_VAL = <span class="code-snippet__string">'068'</span>;</span></code></pre></section><p powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p>在测试中通过控制并发重放该类型的 SQL，随着并发的增加，各个 API 的平均耗时也会增长，且重放的 SQL 查询耗时随着并发的增加查询平均耗时达到 100s 以上，虽然 TiDB 及 HMS 在压测期间没有出现任何异常，但显然这种查询效率会让用户很难接受。DBA 分析该查询没有选择合适的索引导致查询走了全表扫描，建议对 PARTITION_KEY_VALS 的 PARTITION_KEY_VAL 字段添加了额外的索引以加速查询，最终该类型的查询得到了极大的优化，即使加大并发到 100 的情况下平均耗时在 500ms 内，对此我们曾尝试对 PARTITION_KEY_VALS 添加上述索引操作。</p><p><br></p><p>但在线上实际的查询中，那些没有产生慢查询的分区查询操作其实都是按天分区的进行一级分区查询的，其 SQL 类似如下：</p></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">SELECT</span><span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"PART_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">FROM</span><span class="code-snippet__string">"PARTITIONS"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"TBLS"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"TBL_ID"</span> = <span class="code-snippet__string">"TBLS"</span>.<span class="code-snippet__string">"TBL_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"TBLS"</span>.<span class="code-snippet__string">"TBL_NAME"</span> = <span class="code-snippet__string">'tb1'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"DBS"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"TBLS"</span>.<span class="code-snippet__string">"DB_ID"</span> = <span class="code-snippet__string">"DBS"</span>.<span class="code-snippet__string">"DB_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"DBS"</span>.<span class="code-snippet__string">"NAME"</span> = <span class="code-snippet__string">'db1'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"PARTITION_KEY_VALS"</span><span class="code-snippet__string">"FILTER0"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"FILTER0"</span>.<span class="code-snippet__string">"PART_ID"</span> = <span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"PART_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"FILTER0"</span>.<span class="code-snippet__string">"INTEGER_IDX"</span> = <span class="code-snippet__number">0</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">INNER</span><span class="code-snippet__keyword">JOIN</span><span class="code-snippet__string">"PARTITION_KEY_VALS"</span><span class="code-snippet__string">"FILTER1"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ON</span><span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"PART_ID"</span> = <span class="code-snippet__string">"PARTITIONS"</span>.<span class="code-snippet__string">"PART_ID"</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"INTEGER_IDX"</span> = <span class="code-snippet__number">1</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHERE</span><span class="code-snippet__string">"FILTER0"</span>.<span class="code-snippet__string">"PART_KEY_VAL"</span> = <span class="code-snippet__string">'2021-12-28'</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">AND</span><span class="code-snippet__keyword">CASE</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">WHEN</span><span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"PART_KEY_VAL"</span> &lt;&gt; <span class="code-snippet__string">'__HIVE_DEFAULT_PARTITION__'</span><span class="code-snippet__keyword">THEN</span><span class="code-snippet__keyword">CAST</span>(<span class="code-snippet__string">"FILTER1"</span>.<span class="code-snippet__string">"PART_KEY_VAL"</span><span class="code-snippet__keyword">AS</span><span class="code-snippet__built_in">decimal</span>(<span class="code-snippet__number">21</span>, <span class="code-snippet__number">0</span>))</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">ELSE</span><span class="code-snippet__literal">NULL</span></span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">END</span> = <span class="code-snippet__number">10</span>;</span></code></pre></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">由于对 PARTITION_KEY_VALS 的 PARTITION_KEY_VAL 字段添加了索引做查询优化，会导致该类查询生成的执行计划中同样会使用 idx_PART_KEY_VAL 索引进行数据扫描，该执行计划如下：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.4898148148148148" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/20f84c22-d1ae-4c32-82be-4b884faf9249.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">走 idx_PART_KEY_VAL 索引执行计划</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">添加的 idx_PART_KEY_VAL 索引在该字段的具有相同值的数据较少时，使用该索引能检索较少的数据提升查询效率。在 hive 中的表一级分区基本是按天进行分区的，据统计每天天分区的增量为 26w 左右，如果使用 idx_PART_KEY_VAL 索引，按这个数值计算，查询条件为 day&gt;=2021-12-21 and day&lt;2021-12-26 的查询需要检索将近 160w 条数据，这显然不是一个很好的执行计划。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">若执行计划不走 idx_PART_KEY_VAL 索引，TiDB 可通过 dbs、tbls 检索出所有关联 partition 数据，在根据 part_id 和过滤条件扫描 PARTITION_KEY_VALS 数据并返回。此类执行计划扫描的数据量和需要查询的表的分区总量有关，如果该表只有少数的分区，则查询能够迅速响应，但如果查询的表有上百万的分区，则该类执行计划对于该类查询不是最优解。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.2675925925925926" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/97b2badc-d7bd-4e82-872c-cdfbed8555cd.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">不走 idx_PART_KEY_VAL 索引执行计划</span></p><section powered-by="xiumi.us"><p><br></p><p>针对不同执行计划的特性，整理了以下对比点：</p></section><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.2995910020449898" data-s="300,640" data-type="png" data-w="978" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/393b4adf-34c3-4685-9d35-3002044f44b6.png" referrerpolicy="no-referrer"></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在实际生产中元数据基本都是按天分区为主，每天增长大概有 26w 左右，且范围查询的使用场景较多，使用 idx_PART_KEY_VAL 索引查询的执行计划不太适合线上场景，故该索引需不适合添加到线上环境。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.3 TiDB 内存突增导致宕机问题</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在刚上线 TiDB 服务初期，曾数次面临 TiDB 内存溢出的问题，每次出现的时间都随机不确定，出现的时候内存突增几乎在一瞬间，若期间 TiDB 的内存抗住了突增量，突增部分内存释放在很长时间都不会得到释放，最终对 HMS 服务稳定性带来抖动。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.4034833091436865" data-s="300,640" data-type="png" data-w="689" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/8844c991-06f3-4ca0-aab6-3d42df20759e.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">TiDB 内存突增情况</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">通过和 TiDB 开发、DBA 联合分析下，确认 TiDB 内存飙高的原因为用户在使用 Dashboard 功能分析慢查询引起；在分析慢查询过程中，TiDB 需要加载本地所有的 slow-query 日志到内存，如果这些日志过大，则会造成 TiDB 内存突增，此外，如果在分析期间，用户点击了取消按钮，则有可能会造成 TiDB 的内存泄漏。针对该问题制定如下解决方案：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>使用大内存机器替换原小内存机器，避免分析慢查询时内存不够</p></li><li><p>调大慢查询阈值为 3s，减少日志产生</p></li><li><p>定时 mv 慢查询日志到备份目录</p></li></ol></section></section></section><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.4 locate 函数查询不走索引导致 TiKV 负异常</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">在 HMS 中存在部分通过 JDO 的方式去获取分区的查询，该类查询的过滤条件中用 locate 函数过滤 PART_NAME 数据，在 TiDB 中通过函数作用在字段中是不会触发索引查询的，所以在该类查询会加载对应表的所有数据到 TiDB 端计算过滤，TiKV 则需不断扫描全表并传输数据到 TiDB 段，从而导致 TiKV 负载异常。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.43148148148148147" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/0c22e9c9-f38c-4dec-b58b-d35a9460e937.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">locate 函数导致全表扫描</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">然而上述的查询条件可以通过 like 方式去实现，通过使用 like 语法，查询可以成功使用到 PARTITIONS 表的 UNIQUEPARTITION 索引过滤，进而在 TiKV 端进行索引过滤降低负载。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.45" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/35186c1a-9fcf-43a9-a5a0-7d7fa3ca1690.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;"><span style="font-size: 14px;color: rgb(136, 136, 136);">like 语法走索引过滤</span></span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">通过实现将 locate 函数查询转换为 like 语法查询，有效降低了 TiKV 端的负载情况。在 HMS 端完成变更后，TiKV 的 CPU 使用率降低了将近一倍，由于在 KV 端进行索引过滤，相应的 io 使用率有所上升，但网络传输则有明显的下降，由平均 1G 降低到 200M 左右。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.34814814814814815" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/d6a4e572-c45f-424b-b9bc-a589fae353c2.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">变更前后 TiKV 的负载情况</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">除 TiKV 负载有明显的降低，TiDB 的整体性能也得到明显的提升，各项操作耗时呈量级降低。以下整理了 TiDB 增删改查的天平均耗时情况：</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.5666666666666667" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/d3a73735-d7f8-4d13-ac94-5deb12749daa.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="font-size: 14px;color: rgb(136, 136, 136);">TiDB P999 天平均耗时统计</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.5 get_all_functions 优化</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">随着 hive udf 的不断增长，HMS 的 get_all_functions api 平均耗时增长的也越来越久，平均在 40-90s，而该 api 在 hive shell 中首次执行查询操作时会被调用注册所有的 udf，过长的耗时会影响用户对 hive 引擎的使用体验，例如执行简单的 show database 需要等待一分钟甚至更久才能返回结果。</p><p powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-ratio="0.3824074074074074" data-s="300,640" data-type="png" data-w="1080" style="height: auto !important;" src="https://oscimg.oschina.net/oscnet/4b18f10c-d130-4c26-8213-44b30511d29c.png" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;text-align: center;" powered-by="xiumi.us"><span style="color: rgb(136, 136, 136);font-size: 14px;">原 get_all_functions api 平均耗时</span></p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">导致该 api 耗时严重的主要原因是 HMS 通过 JDO 方式获取所有的 Function，在获取所有的 udf 时后台会遍历每条 func 去关联 DBS、FUNC_RU 两个表，获取性能极低。而使用 directSQL 的方式去获取所有 udf 数据，响应耗时都在 1 秒以内完成，性能提升相当明显。以下为 directSQL 的 SQL 实现逻辑：</p><p powered-by="xiumi.us"><br></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="sql"><code><span class="code-snippet_outer"><span class="code-snippet__keyword">select</span> FUNCS.FUNC_NAME,</span></code><code><span class="code-snippet_outer">  DBS.NAME,</span></code><code><span class="code-snippet_outer">  FUNCS.CLASS_NAME,</span></code><code><span class="code-snippet_outer">  FUNCS.OWNER_NAME,</span></code><code><span class="code-snippet_outer">  FUNCS.OWNER_TYPE,</span></code><code><span class="code-snippet_outer">  FUNCS.CREATE_TIME,</span></code><code><span class="code-snippet_outer">  FUNCS.FUNC_TYPE,</span></code><code><span class="code-snippet_outer">  FUNC_RU.RESOURCE_URI,</span></code><code><span class="code-snippet_outer">  FUNC_RU.RESOURCE_TYPE</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">from</span> FUNCS</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">left</span><span class="code-snippet__keyword">join</span> FUNC_RU <span class="code-snippet__keyword">on</span> FUNCS.FUNC_ID = FUNC_RU.FUNC_ID</span></code><code><span class="code-snippet_outer"><span class="code-snippet__keyword">left</span><span class="code-snippet__keyword">join</span> DBS <span class="code-snippet__keyword">on</span> FUNCS.DB_ID = DBS.DB_ID</span></code></pre></section><p powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>五、总结</p></section></section><p powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p>我们从 2021 年 7 月份开始对 TiDB 进行调研，在经历数个月的测试于同年 11 月末将 MySQL 引擎切换到 TiDB。由于前期测试主要集中在兼容性和性能测试上，忽略了 TiDB 自身可能潜在的问题，在上线初期经历了数次因慢查询日志将 TiDB 内存打爆的情况，在这特别感谢我们的 DBA 团队、平台运营团队及 TiDB 官方团队帮忙分析、解决问题，得以避免该问题的再次发生；与此同时，由于当前 HMS 使用的版本较低，加上大数据的组件在不断的升级演进，我们也需要去兼容升级带来的变动，如 HDFS 升级到 3.x 后对 EC 文件读取的支持，SPARK 获取分区避免全表扫描改造等；此外由于 TiDB 的 latin 字符集支持中文字符的写入，该特性会导致用户误写入错误的中文分区，对于此类型数据无法通过现有 API 进行删除，还需要在应用层去禁止该类型错误分区写入，避免无用数据累积。</p><p><br></p><p>经历了一年多的实际生产环境检验，TiDB 内存整体使用在 10% 以内，TiKV CPU 使用平稳，使用峰值均在 30 核内，暂不存在系统瓶颈；HMS 服务的稳定性整体可控，关键 API 性能指标满足业务的实际需求，为业务的增长提供可靠支持。在未来三年内，我们将保持该架构去支撑整个大数据平台组件的稳定运行，期间我们也将持续关注行业内的变动，吸收更多优秀经验应用到我们的生产环境中来，包括但不限于对性能更好的高版本 TiDB 尝试，HMS 的性能优化案例。</p></section><p powered-by="xiumi.us"><br></p><section style="margin-right: 0%;margin-bottom: 20px;margin-left: 0%;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: middle;width: 20%;align-self: center;flex: 0 0 auto;"><section style="text-align: center;color: rgb(45, 66, 87);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:129.title1"><p>猜你喜欢</p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497299%26idx%3D1%26sn%3Dbf5b4b07d96090267e996a1dc3d0dce1%26chksm%3Debdb86c1dcac0fd7b7b662020ec78a154c8011be6cd0d6b19c091fa1befbc5f79ff45890b45b%26scene%3D21%23wechat_redirect" textvalue="vivo 数据中心网络链路质量监测的探索实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">vivo 数据中心网络链路质量监测的探索实践</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497274%26idx%3D1%26sn%3Db79ed12d3854f14a7e77eaae5f0de6b2%26chksm%3Debdb86a8dcac0fbe9743c35887bbf6299506aa490bfcd220b4872d506152ee1dcc4c5b45799a%26scene%3D21%23wechat_redirect" textvalue="K8s 多集群实践思考和探索" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">K8s 多集群实践思考和探索</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497145%26idx%3D2%26sn%3D55519f4b73ff9b4a0d19ce6d0ac09a30%26chksm%3Debdb852bdcac0c3d0eb7fdc587942aa7203c63d04f6fefcd688a7a0f0bbaf8288479372695f6%26scene%3D21%23wechat_redirect" textvalue="JVM 内存大对象监控和优化实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">JVM 内存大对象监控和优化实践</a></p></li></ul></section></section></section><p powered-by="xiumi.us"><br></p><section class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe mp_common_widget" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互联网技术" data-alias="vivoVMIC" data-signature="分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。" data-from="0"></mp-common-profile></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - vivo 互联网技术（vivoVMIC）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 02:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/10114822</guid>
            <link>https://my.oschina.net/vivotech/blog/10114822</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果 App Store 免费榜第一是黄色软件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>澎湃新闻今日报道苹果 App Store 出现伪装成学习软件的黄色软件，并且冲上了「免费 App」排行榜第一名。</p><p>据悉，该软件的年龄分级为 4 岁以上，但是会引导用户进入赌博和其他黄色网站。网友小同表示，他下载了这款软件，想要学习英语字母，结果发现是一个色情视频软件。他认为这种伪装成学习软件的行为很危险，很容易对孩子造成不良影响。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c7a0ce5e4272f1b06c5119529647215fb11.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-69f6205b4eceb10672c0a3cff67e4f52d48.png" referrerpolicy="no-referrer"></p><p>事件被曝光后，苹果客服虽然进行了回应，但直到下午仍未下架软件。甚至排行榜更新后，App Store 免费榜第一、二名再次出现黄色软件，名为「骑 XX」、「牡丹 XXX」，年龄分级为 4 岁以上。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8b7f27342ea504c47ae6724514736b106a3.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-db2cf9f1307034d7e3a68e35ea067a0fe4f.png" referrerpolicy="no-referrer"></p><p><strong style="color:#424242">截至发稿，这些软件已被下架</strong><span style="background-color:#ffffff; color:#424242">。</span></p><p><span style="background-color:#ffffff; color:#424242">众所周知，苹果应用商店的审核规则极为严格。</span>上面提到的 App 其实就是浏览器套壳，前端显示的内容可以通过后台随意修改。但问题在于，苹果 App 的审核团队为何让这些「套壳」 App 上架到了应用商店？</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 14:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260711</guid>
            <link>https://www.oschina.net/news/260711</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rails 7.1 正式发布：可生成 Dockerfiles、更强大的自行构建身份验证系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Rails 7.1 已正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frubyonrails.org%2F2023%2F10%2F5%2FRails-7-1-0-has-been-released" target="_blank">发布</a>。公告写道，自 Rails 7.0 以来，此版本由 800 多名贡献者提交了 5000 多次 commit，包含许多新功能和改进。</p><p><img src="https://static.oschina.net/uploads/space/2023/1007/180625_fnVn_2720166.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">主要变化如下：</p><ul><li><strong>为新的应用生成 Dockerfile</strong></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">当运行<span>&nbsp;</span><code>rails new</code><span>&nbsp;</span>时，Rails 将生成需要使用 Kamal 或任何其他基于 Docker 的部署设置来部署应用程序的所有 Dockerfile。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">这些 Dockerfile 经过调整，适合用于生产环境，具有合适的缓存层、多阶段构建以最小化镜像，以及无论是否使用 JavaScript 构建环境所需的所有依赖项。</p><ul><li><strong>支持 Bun</strong></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Bun 是 Zig 编写的 JavaScript 运行时，近日正式发布&nbsp;<a href="https://www.oschina.net/news/257450/bun-v1-0">1.0 正式版本</a>。此版本支持使用 Bun 作为 JavaScript 运行时来生成新应用程序。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">因此，开发者可以将<span>&nbsp;</span><code>--javascript=bun</code><span>&nbsp;</span>选项传递给<span>&nbsp;</span><code>rails new</code>。</p><ul><li><strong>更强大的自行构建身份验证系统</strong></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">为了补充<span>&nbsp;</span><code>has_secure_password</code><span>&nbsp;</span>功能，Rails 7.1 带来了新特性来帮助开发者自行构建身份验证系统。</p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">其他变化：</p><ul><li>Active Record 支持更多异步查询</li><li>对 Trilogy MySQL 适配器的内置支持</li><li>在&nbsp;Active Record 中支持复合主键</li><li>使用&nbsp;<code>perform_all_later</code>&nbsp;对大规模任务进行排队</li><li>引入用于增强自动加载 (Enhanced Autoloading) 的&nbsp;<code>config.autoload_lib</code>&nbsp;和&nbsp;<code>config.autoload_lib_once</code></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frubyonrails.org%2F2023%2F10%2F5%2FRails-7-1-0-has-been-released" target="_blank">详情查看 Release Notes</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 10:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260696/rails-7-1-0-released</guid>
            <link>https://www.oschina.net/news/260696/rails-7-1-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[VS Code 的 C# 开发套件 (C# Dev Kit) 正式 GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今年 6 月，微软在 Visual Studio Code 的插件市场<a href="https://www.oschina.net/news/244148/c-sharp-dev-kit-for-visual-studio-code" target="_blank">上架</a>了官方打造的<strong> C# 开发套件 —— C# Dev Kit</strong>，让开发者在 VS Code 中方便地进行 C# 开发。</p><p>据介绍，C# Dev Kit 提高了开发者在使用 VS Code 过程中开发 C# 语言产品的效率。该套件兼容 C# 扩展，由语言服务器协议&nbsp; (LSP) 主机提供支持，从而创建一个高性能、可扩展且灵活的工具环境，可轻松将新体验集成到 C# for VS Code 中。</p><p>经过 4 个多月的测试和打磨，微软近日宣布&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fdotnet%2Fcsharp-dev-kit-now-generally-available%2F" target="_blank"><strong>C# Dev Kit 正式 GA</strong></a>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-abd88ca70f16b7de5318e2944c0f5c847dd.png" referrerpolicy="no-referrer"></p><p>微软表示在预览版期间，累计为 C# Dev Kit 修复了 350 多个问题，其中大部分由社区报告，并对该产品进行了 300 多项有针对性的改进。</p><p>微软称用户的反馈加速推进了 C# Dev Kit 的正式发布，开发团队会继续提升性能和可靠性，并将每月添加新功能。</p><p>根据微软的介绍，C# Dev Kit 从 Visual Studio 中借用了一些开发者们熟悉的概念，并能够与现有的 C# 扩展一起使用，以及通过增加一套强大的工具和实用程序来增强 C# 开发环境，这些工具和实用程序与 VS Code 原生集成，以帮助 C# 开发者更快地编写、调试和维护他们的代码，并减少错误。</p><p>C# Dev Kit 由以下部分组成：</p><ul><li><strong>C# 扩展</strong>：它提供基本的语言服务支持，并继续独立于这项工作进行维护；</li><li><strong>C# Dev Kit 扩展</strong>：它建立在 Visual Studio 的基础上，提供解决方案管理、模板、测试、调试；</li><li><strong>IntelliCode for C# Dev Kit 扩展</strong>：它将 AI 驱动的开发带到了编辑器中；</li></ul><p><img alt="" src="https://static.oschina.net/uploads/space/2023/0607/112538_up8O_4937141.png" referrerpolicy="no-referrer"></p><p><strong><a href="https://www.oschina.net/news/244148/c-sharp-dev-kit-for-visual-studio-code" target="_blank">点此查看详细介绍</a></strong>。</p><p>C# Dev Kit 下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dms-dotnettools.csdevkit%26ssr%3Dfalse" target="_blank">https://marketplace.visualstudio.com/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 09:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260688/vs-code-csharp-dev-kit-ga</guid>
            <link>https://www.oschina.net/news/260688/vs-code-csharp-dev-kit-ga</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Docker 与 Neo4j 等合作推出 GenAI Stack]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Docker 在其年度 DockerCon 开发者大会主题演讲中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.docker.com%2Fblog%2Fintroducing-a-new-genai-stack%2F" target="_blank">宣布</a>与 Neo4j、LangChain 和 Ollama 合作推出新的 GenAI Stack。该 GenAI Stack <span style="background-color:#ffffff">简化了 AI/ML 集成，</span>旨在帮助开发人员快速轻松地构建生成式 AI 应用程序，而无需搜索和配置各种技术。</span></p><p><span style="color:#000000"><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-0852df0e6f3480e6f6d1ddd240cf679021f.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">根据介绍，GenAI Stack 中包含的内容包括有：</span></p><ul><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>预配置的 LLM</strong>：提供预配置的大语言模型 (LLM)，例如 Llama2、GPT-3.5 和 GPT-4，以快速启动 AI 项目。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>Ollama&nbsp;管理</strong>：Ollama 简化了开源 LLM 的本地管理，让你的 AI 开发过程更加顺畅。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>Neo4j 作为默认数据库</strong>：Neo4j 作为默认数据库，提供图形和原生向量搜索功能。这有助于揭示数据模式和关系，最终提高 AI/ML 模型的速度和准确性。Neo4j 还充当这些模型的长期存储器。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>Neo4j 知识图谱</strong>：Neo4j 知识图谱为 LLM 提供更精确的 GenAI 预测和结果。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>LangChain 编排</strong>：LangChain 促进了 LLM、应用程序和数据库之间的通信，并提供了一个强大的向量索引。LangChain 是一个用于开发由 LLM 支持的应用程序的框架。其中包括 LangSmith，一种调试、测试、评估和监控 LLM 应用程序的新方法。</span></span></li><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>全面支持</strong>：提供了一系列有用的工具、代码模板、操作指南和 GenAI 最佳实践。</span></span></li></ul><p><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-346a6330b9b20f9dbd5753904b2051aeda1.webp" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">此外，该公司还通过</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.docker.com%2Fai-early-access-program%2F" target="_blank">抢先体验计划</a><span style="color:#000000">推出了一款新的生成式 AI 助手，名为 Docker AI。&nbsp;Docker 首席执行官 Scott Johnston 表示，与 Copilot 或&nbsp;Amazon&nbsp;CodeWhisperer 等其他代码生成助手相比，Docker AI 助手可以帮助开发人员定义应用程序的各个方面并排除故障。</span></p><p><span style="color:#000000">"当开发人员编辑 Dockerfile 或 Docker Compose 文件、调试本地 docker build 或在本地运行测试时，Docker AI 会根据具体情况提供自动指导。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 09:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260683/docker-genai-stack</guid>
            <link>https://www.oschina.net/news/260683/docker-genai-stack</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IoTOS v1.63 更新，一款物联卡系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img height="608" src="https://oscimg.oschina.net/oscnet/up-e4273095a61da7cd7133a20265154cbf790.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#0e88eb">在线体验：</span></p><p><span><strong><span style="color:#0070c0"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fvip.iotos.top%2Fregister" target="_blank">http://vip.iotos.top/register</a></span></strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#0070c0"><strong>（加好友私聊，可加速通过）</strong></span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-862b2600e6c662c7b332f0ae4c7bf19acde.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span><strong>一、产品研发背景</strong></span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-796c633ce70d3a611484596b080a2a22c7a.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">资源整合与管理：</span></p><p style="margin-left:0; margin-right:0"><span>1. 多渠道资源整合打包资源，系统平台统一管理 2. 套餐资源打包售卖、管控 3. 多充值业务整合（直充平台、内充平台） 4. 物联网卡国际化解决方案应用实现</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">服务能力提升：</span></p><p style="margin-left:0; margin-right:0"><span>1. 一个平台 N 个能力（多端系统支持、多语言支持） 2. 极高性价比 (小躯壳大能力，低硬件支持，大数据量承载） 3. 降低成本（硬件成本、运营成本） 4. 提升效率（人性化操作流程与体验、低耗高效同步算法） 5. 前瞻式系统功能设计‘遥遥领先’</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-e54a5ca8729c60b1d69a7c693a15110a736.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span><strong>二、产品定位</strong></span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-21c4c0aa740156bb8da0506200541941d3e.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">使用企业定位：</span></p><p style="margin-left:0; margin-right:0"><span>中小企业：需要快速建立物联网卡管理系统的企业。提供专业的服务能力与前瞻性业务建设； 合作共赢，共同拓展未来市场。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">产品定位：</span></p><p style="margin-left:0; margin-right:0"><span>国际化物联网卡解决方案，从各角度实现 ： 业务设计、UI 语言、支付对接、 国际运营商 API 能力、直充内充的，业务实现方式。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">团队服务定位：</span></p><p style="margin-left:0; margin-right:0"><span><span>我们的团队专业做软件服务平台</span><span style="color:#ff0000">为辅助角色</span>，</span></p><p style="margin-left:0; margin-right:0"><span><span style="color:#ff0000">帮助企业快速搭建物联网平台系统从而合作共赢</span>； 不作为‘竞争对手’的角色出现在市场。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">低成本定位：</span></p><p style="margin-left:0; margin-right:0"><span>低成本定位组成： 1. 服务器硬件支持 2. 企业接入 API 能力 3. 运营能力的高可用 4.前瞻式的业务范畴</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-4058b75d80139d1a037e8aa642e1ece2507.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong>三、物联网卡系统应用场景</strong></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-eb6baf31682d9a2e4cbd981c79b5f663a35.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">业务初期：</span></p><p style="margin-left:0; margin-right:0"><span>满足多渠道资源整合便于企业管理卡号便于查看卡号、套餐、用量、状态数据。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">资源销售：</span></p><p style="margin-left:0; margin-right:0"><span>在资源销售后多渠道卡号需要给客户绑定可服务平台提供卡号数据查询、API 能力对接、卡号排障能力。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">套餐打包：</span></p><p style="margin-left:0; margin-right:0"><span>达到一定业务量后开始包装套餐进行售卖； 套餐包装售卖方式分为运营商套餐包装系统内部包装运营与直接包装上游套餐两种方式来运营。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">终端用户：</span></p><p style="margin-left:0; margin-right:0"><span>终端客户充值续费、购买物联网硬件设备，等</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-881325f2ae8c0d54b7e66c641515aaf8004.png" width="1080" referrerpolicy="no-referrer"></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-02cde40e4cdc158651948b2406fd0bfa0e8.png" width="1080" referrerpolicy="no-referrer"></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-2e6b468069d7bfb35a6f18fbfb3952f6136.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span><strong>四、经济效益分析</strong></span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-4c05fd81ded22d2ee5cd9f20c712b7bfab1.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">降本增效：</span></p><p style="margin-left:0; margin-right:0"><span>降低硬件、运营、运维、培训使用，成本、增加运营能力、</span></p><p style="margin-left:0; margin-right:0"><span>增加服务质量、增加执行效率。</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-09ee8a54cbf89331ef9a96516ede096b9a7.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">提升服务：</span></p><p style="margin-left:0; margin-right:0"><span>提升可服务能力，国际化业务范畴、可承载业务量提升</span></p><p style="margin-left:0; margin-right:0"><span>极致同步算法，确保一手数据。</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-5e9a2ba234c6eb648603b0c909587547f83.png" width="1080" referrerpolicy="no-referrer"></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-6845ba2d69d59d1ff658e0d133e0979141f.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span><strong>五、未来规划</strong></span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-7b2a2f9125d811fe4f8dbe3c59eb8dd668d.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">国际化物联卡管理平台：</span></p><p style="margin-left:0; margin-right:0"><span>目前仅定义为物联网卡平台，但不限于物联网卡管理业务</span></p><p style="margin-left:0; margin-right:0"><span>优先满足中小企业‘迈入物联网行业’降低行业门槛，让有想法的伙伴加入让有能力的伙伴牵头；<span style="color:#ff0000">‘分享利润’打造可共同发展盈利生态、合作共赢、提升产品服务能力、为用户提升服务体验、加强行业落地发展</span>；尽微薄之力，助力物联网行业发展。</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-9f8f296184c4c6e1dfc318342de50faa30e.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">产品短目标持续 3 年研发：</span></p><p style="margin-left:0; margin-right:0"><span>产品研发持续投入，短目标 3 年持续研发；在未来会在产品研发上完善物联网卡管理运营、自动化管理、接口能力完善移动端，用户充值、企业报表业务极速处理，商城产品购买；</span></p><p style="margin-left:0; margin-right:0"><span>企业内部加密通讯、设备接入等。</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-1df2c6472701c4502e5439b796508ae2ce6.png" width="1080" referrerpolicy="no-referrer"></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-256276cf34054eda9a7ff38561e39ab5757.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span><strong>六、感谢伙伴关注</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">服务永不止步：</span></p><p style="margin-left:0; margin-right:0"><span>服务永不止步，因为有您我们的服务更有意义！感谢您的查看！</span></p><p><img height="608" src="https://oscimg.oschina.net/oscnet/up-8fb25584e2ef8fa73c871ba32a02e98fcb3.png" width="1080" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="margin-left:0; margin-right:0"><span><strong>一、直充内充（充值方式）</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">直充：</span></p><p style="margin-left:0; margin-right:0">&nbsp;&nbsp;&nbsp;包装套餐直接充值到上游 API 系统。【PID/Smart】</p><p style="margin-left:0; margin-right:0">（如：支付宝、微信，话费/流量/语音/短信，等 充值系统）。</p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">内充（套餐打包常见物联卡系统功能）：</span></p><p style="margin-left:0; margin-right:0">&nbsp;&nbsp;&nbsp;套餐包装，适用于不同类型套餐，如 流量、短信、语音，等。</p><p style="margin-left:0; margin-right:0">（目前已完善流量逻辑）</p><p style="margin-left:0; margin-right:0"><span><strong>二、套餐与计费产品</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">计费产品：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;<span>计费产品分为内部套餐计费产品与直充通道计费产品；</span></p><p style="margin-left:0; margin-right:0">（可将上游多个产品包装为整合套餐）。</p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">套餐：</span></p><p style="margin-left:0; margin-right:0">&nbsp;&nbsp;&nbsp;区分于传统物联网卡管理系统采用国际化设计从，币种、汇率、差价类型、差价正负、多计费产品包装组合而成；</p><p style="margin-left:0; margin-right:0">（可将上游多个产品包装为整合套餐）。</p><p style="margin-left:0; margin-right:0"><span><strong>三、订单管理</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">订单记录（包装套餐内部充值记录）：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;单号、卡号、任务号、名称、类型、交易金额、余额、商户、创建人、交易状态、支付类型、支付时间、来源、是否需要分润、分润状态、第三方订单号、备注；</p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff">（点击订单号查看订单详细信息，点击任务号查看批次任务、展开查看套餐包状态</span>使<span style="background-color:#ffffff">用情况）</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">余额消费记录：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;商户自主预存、分润，等余额变动记录；</p><p style="margin-left:0; margin-right:0">（订单充值支付成功后开始分润金额，分润到账余额）。</p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">直充订单（直接提交上游 API 订单）：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;查看直充记录卡号，提交 API 返回状态、执行次数返回结果等<span>。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">预计纯利润：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;可查看本级或下级充值订单预计纯利润（下级减去本级成本）<span>。</span></p><p style="margin-left:0; margin-right:0"><span><strong>四、功能引导&amp;文档</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">引导说明：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;按下引导按钮（Shift+Shift）打开当前界面功能引导<span>。</span></p><p style="margin-left:0; margin-right:0"><span>&nbsp; &nbsp;点击功能块引导按钮引导当前操作说明。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">文档说明：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;按下文档说明按钮（Ctrl+Ctrl）打开当前界面功能说明文档<span>。</span></p><p style="margin-left:0; margin-right:0"><span>&nbsp; &nbsp;点击功能块说明文档按钮打开当前操作说明。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">PS 说明：</span></p><p style="margin-left:0; margin-right:0">&nbsp; &nbsp;引导功能与文档说明功能需会员（官方系统站点续费或其他方式赠送），方可使用提供，不同语言、角色、版本，的引导与说明文档<span>。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="color:#616161; margin-left:0; margin-right:0; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span><strong>五、支付功能</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">微信：</span></p><p style="margin-left:0; margin-right:0">&nbsp; 目前 PC(电脑端) 已支持扫码支付，商户预存余额<span>。</span></p><p style="margin-left:0; margin-right:0"><span><strong>六、第三方账号登录</strong></span></p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">Gitee 码云：</span></p><p style="margin-left:0; margin-right:0">&nbsp; 目前 PC(电脑端) 已支持扫 Gitee（码云）登录用户账号<span>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 08:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260673/iotos-1-63</guid>
            <link>https://www.oschina.net/news/260673/iotos-1-63</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Go 1.21.2 & 1.20.9 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Go 近日发布了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Freleases%2Ftag%2Fgo1.21.2" target="_blank">Go 1.21.2 </a>和<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Freleases%2Ftag%2Fgo1.20.9" target="_blank"> Go 1.20.9 </a>两个小版本。</p><p>Go 1.21.2 是 1.21 的第 2 个安全补丁，主要涉及一个安全更新：</p><ul><li><strong>cmd/go：line 指令允许在构建期间任意执行</strong></li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%2F63211" target="_blank">根据 issue 的描述</a>，"//line" 指令可用于绕过对 "//go：cgo_" 指令的限制，允许在兼容期间传递阻塞的链接器和编译器标志。这可能导致在运行"go build"时意外执行任意代码。</p><p>line 指令需要指令所在文件的绝对路径，这使得解决此问题变得更加复杂。</p><blockquote><p><img height="931" src="https://static.oschina.net/uploads/space/2023/1008/162018_ZOvZ_2720166.png" width="2124" referrerpolicy="no-referrer"></p></blockquote><p>Go1.21.2 更新涉及到的 issue 如下：</p><p><img src="https://static.oschina.net/uploads/space/2023/1008/162328_0YqZ_2720166.png" referrerpolicy="no-referrer"></p><p>详情：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang%2Fgo%2Fissues%3Fq%3Dmilestone%253AGo1.21.2%2Blabel%253ACherryPickApproved" target="_blank">https://github.com/golang/go/issues?q=milestone%3AGo1.21.2+label%3ACherryPickApproved</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 08:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260842/go-1-21-2</guid>
            <link>https://www.oschina.net/news/260842/go-1-21-2</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Debian 12.2 & 11.8 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Debian 近日为两个分支发布了更新：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.debian.org%2FNews%2F2023%2F20231007" target="_blank">12.2 </a>和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.debian.org%2FNews%2F2023%2F2023100702" target="_blank">11.8</a></strong>。两个版本都是常规性更新，主要是修复错误和安全问题。</p><p>Debian 12.2 是 12 系列的第 2 个维护更新，修复了安全漏洞和严重问题。</p><ul><li>引入微码 (microcode) 更新，包含针对 AMD Zen4 处理器中 "AMD Inception" 的修复</li><li><p>修复与 Python 3.11 的兼容性问题</p></li><li><p>修复解析 JPEG 附件时出现崩溃的问题</p></li><li><p>修复远程代码执行漏洞&nbsp;[CVE-2023-40477]</p></li><li><p>……</p></li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.debian.org%2FNews%2F2023%2F20231007" target="_blank">详情</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 07 Oct 2023 07:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260830/debian-12-2-n-11-8-released</guid>
            <link>https://www.oschina.net/news/260830/debian-12-2-n-11-8-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
