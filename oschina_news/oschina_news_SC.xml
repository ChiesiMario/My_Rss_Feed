<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 Nov 2023 19:15:49 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 Electron 的 Android 投屏工具 Escrcpy]]>
            </title>
            <description>
                <![CDATA[<div><img src="https://gitee.com/viarotel-org/escrcpy/raw/main/electron/resources/build/logo.png" alt="viarotel-escrcpy" referrerpolicy="no-referrer"></div><h1><a id="user-content-escrcpy" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#escrcpy"></a>Escrcpy</h1><p>📱 使用图形界面的 Scrcpy 显示和控制您的 Android 设备，由 Electron 驱动。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fblob%2Fmain%2FREADME.md">English Document</a></p><div><img src="https://gitee.com/viarotel-org/escrcpy/raw/main/screenshots/zh-cn/overview.jpg" alt="viarotel-escrcpy" referrerpolicy="no-referrer"></div><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Ftree%2Fmain%2Fscreenshots%2Fzh-cn">更多截图</a></p><h2><a id="user-content-特点" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%89%B9%E7%82%B9"></a>特点</h2><ul><li>🏃 同步：得益于 Web 技术，将更快速的与 Scrcpy 保持同步</li><li>💡 定制化：支持对多个设备偏好进行独立配置，并且能够添加备注以及导入导出所有配置的功能</li><li>🔗 反向供网：集成了 Gnirehtet 反向供网功能</li><li>🎨 主题：支持浅色模式和深色模式，跟随系统切换</li><li>😎 轻巧度：本机支持，仅显示设备屏幕</li><li>⚡️ 性能：30~120 帧每秒，取决于设备</li><li>🌟 质量：1920×1080 或更高</li><li>🕒 低延迟：35~70 毫秒</li><li>🚀 快速启动：显示第一张图片仅需约 1 秒钟</li><li>🙅‍♂️ 非侵入性：不会在安卓设备上留下任何安装文件</li><li>🤩 用户收益：无需账户、无广告、无需互联网连接</li><li>🗽 自由：免费且开源软件</li></ul><h2><a id="user-content-获取软件包" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%8F%96%E8%BD%AF%E4%BB%B6%E5%8C%85"></a>获取软件包</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Freleases">查看发布地址</a></p><h2><a id="user-content-快速上手" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B"></a>快速上手</h2><h3><a id="user-content-usb-连接" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#usb-%E8%BF%9E%E6%8E%A5"></a>USB 连接</h3><blockquote><p>注意：如果手机上提示调试授权请点击允许</p></blockquote><ol><li>安卓手机需开启开发者模式并打开 USB 调试</li><li>打开 Escrcpy 并将安卓手机连接到你的电脑</li><li>这时 Escrcpy 设备列表应该已经检测到你的手机，点击开始镜像</li><li>开始享受吧</li></ol><h3><a id="user-content-wifi-连接" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#wifi-%E8%BF%9E%E6%8E%A5"></a>WIFI 连接</h3><blockquote><p>注意：如果首次无线连接失败，你可能需要无线配对请参阅 <a href="https://gitee.com/viarotel-org/escrcpy#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></p><p>注意：需同时开启无线调试功能，并在无线调试页面中获取你的当前设备的无线地址（通常为你连接 WIFI 时分配的 IP 地址）及端口号（默认为 5555）</p></blockquote><ol><li>同 USB 连接中的 1-2 步骤</li><li>将获取到的设备 IP 地址及端口号填写到 Escrcpy 中，然后点击连接设备</li><li>这时 Escrcpy 设备列表应该已经检测到你的手机，点击开始镜像</li><li>开始享受吧</li></ol><h3><a id="user-content-macos--linux" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos--linux"></a>macOS &amp;&amp; Linux</h3><blockquote><p>注意：这些平台没有集成 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy">Scrcpy</a> 需要手动安装</p></blockquote><ol><li>Linux 可参阅的 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Flinux.md">安装文档</a></li><li>macOS 可参阅的 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Fmacos.md">安装文档</a></li><li>安装上述依赖成功后步骤同 USB 连接，和 WIFI 连接</li></ol><h3><a id="user-content-gnirehtet-反向供网" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#gnirehtet-%E5%8F%8D%E5%90%91%E4%BE%9B%E7%BD%91"></a>Gnirehtet 反向供网</h3><blockquote><p>注意: macOS 内部没有集成如需使用需要手动安装 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fgnirehtet">安装文档</a></p></blockquote><p>Windows 及 Linux 端内部集成了 Gnirehtet， 用于提供 PC 到安卓设备的反向供网功能。</p><h2><a id="user-content-快捷键" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>快捷键</h2><p>请参阅 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Fshortcuts.md">scrcpy/doc/shortcuts</a></p><h2><a id="user-content-设备交互栏" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E4%BA%A4%E4%BA%92%E6%A0%8F"></a>设备交互栏</h2><ul><li>切换键</li><li>主屏幕键</li><li>返回键</li><li>通知栏</li><li>电源键</li><li>重启设备</li><li>截取屏幕</li><li>安装应用</li><li>反向供网（Gnirehtet）</li></ul><h2><a id="user-content-偏好设置" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE"></a>偏好设置</h2><blockquote><p>持续完善中，目前支持以下常用配置</p></blockquote><h3><a id="user-content-通用" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%80%9A%E7%94%A8"></a>通用</h3><ul><li>Adb 路径</li><li>Scrcpy 路径</li><li>文件存储路径（音视频录制及设备截图都保存在这里）</li><li>Gnirehtet 路径</li><li>Gnirehtet 修复</li><li>Scrcpy 追加参数</li><li>更换主题</li><li>调整语言</li><li>开启调试</li></ul><h3><a id="user-content-视频控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%A7%86%E9%A2%91%E6%8E%A7%E5%88%B6"></a>视频控制</h3><ul><li>分辨率</li><li>比特率</li><li>刷新率</li><li>视频编码</li><li>屏幕旋转</li><li>屏幕裁剪</li><li>显示器</li><li>视频缓冲</li><li>接收器 (v4l2) 缓冲</li></ul><h3><a id="user-content-设备控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6"></a>设备控制</h3><ul><li>展示触摸点</li><li>保持清醒</li><li>控制时关闭屏幕</li><li>控制结束关闭屏幕</li><li>控制时停止充电</li></ul><h3><a id="user-content-窗口控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%AA%97%E5%8F%A3%E6%8E%A7%E5%88%B6"></a>窗口控制</h3><ul><li>无边框模式</li><li>全屏模式</li><li>始终位于顶部</li><li>禁用屏幕保护</li></ul><h3><a id="user-content-音视频录制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6"></a>音视频录制</h3><ul><li>录制格式</li><li>录制时长</li><li>录制视频方向</li><li>禁用视频录制</li><li>禁用视频播放</li><li>禁用音频录制</li><li>禁用音频播放</li></ul><h3><a id="user-content-音频控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%9F%B3%E9%A2%91%E6%8E%A7%E5%88%B6"></a>音频控制</h3><ul><li>音频源</li><li>音频编码</li><li>音频比特率</li><li>音频缓冲</li><li>音频输出缓冲</li></ul><h3><a id="user-content-otg" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#otg"></a>OTG</h3><ul><li>启用 OTG</li><li>仅键盘</li><li>仅鼠标</li></ul><h3><a id="user-content-摄像控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%91%84%E5%83%8F%E6%8E%A7%E5%88%B6"></a>摄像控制</h3><ul><li>启用摄像</li><li>摄像源</li><li>摄像尺寸</li><li>摄像比例</li><li>摄像帧率</li></ul><h2><a id="user-content-下一步做什么" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E4%B8%8B%E4%B8%80%E6%AD%A5%E5%81%9A%E4%BB%80%E4%B9%88"></a>下一步做什么？</h2><blockquote><p>优先级从高到低</p></blockquote><ol><li>用户界面进行优化，制作合适的 Logo ✅</li><li>内置的软件更新功能 ✅</li><li>录制和保存音视频 ✅</li><li>添加设备快捷交互控制栏 ✅</li><li>支持自定义 Adb 及 Scrcpy 依赖 ✅</li><li>支持自定义设备名称，以及偏好设置的导出及导入 ✅</li><li>定制化，支持对单个设备进行独立配置 ✅</li><li>添加 macOS 及 linux 操作系统的支持 ✅</li><li>支持国际化 ✅</li><li>对深色模式的支持 ✅</li><li>添加 Gnirehtet 反向供网功能 ✅</li><li>添加新的相机镜像相关功能 ✅</li><li>更好的多屏协同 ✅</li><li>设备交互栏添加更多功能：文件推送、旋转屏幕、音频控制等功能 ✅</li><li>支持批量连接历史设备功能 ✅</li><li>支持使用内置终端执行自定义命令 ✅</li><li>添加独立的剪切板同步功能 🚧</li><li>支持通过界面从设备下载选中的文件 🚧</li><li>支持对设备进行分组，以及按组进行批量操作 🚧</li><li>添加对游戏的增强功能，如游戏键位映射 🚧</li></ol><h2><a id="user-content-常见问题" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"></a>常见问题</h2><h3><a id="user-content-电脑连接设备后无法检测到" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%90%8E%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0"></a>电脑连接设备后无法检测到</h3><ol><li>请重新插拔你的设备，并确认设备同意了 USB 调试授权窗口。</li><li>如果还不行，你的电脑可能缺少必要的驱动程序，请使用第三方工具，如：驱动精灵，安装必要的驱动后重试。</li></ol><h3><a id="user-content-无法输入中文" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87"></a>无法输入中文</h3><p>该问题是已知的， Scrcpy 似乎并未直接对中文输入进行测试和支持，需要在手机端安装第三方输入法，以下输入法经测试可以很好支持</p><ul><li>搜狗输入法</li><li>QQ 输入法</li><li>谷歌拼音输入法</li><li>Gboard</li></ul><h3><a id="user-content-无线连接提示-目标计算机积极拒绝访问" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%8F%90%E7%A4%BA-%E7%9B%AE%E6%A0%87%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%AF%E6%9E%81%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE"></a>无线连接提示： 目标计算机积极拒绝访问</h3><p>第一次无线连接可能需要配对，或 插入 USB 以保证与电脑建立连接即授权成功后方可使用</p><h3><a id="user-content-通过数据线连接后点击无线模式没有反应" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E7%BA%BF%E8%BF%9E%E6%8E%A5%E5%90%8E%E7%82%B9%E5%87%BB%E6%97%A0%E7%BA%BF%E6%A8%A1%E5%BC%8F%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94"></a>通过数据线连接后点击无线模式没有反应</h3><p>请再点一次，或点击刷新设备，一般不会超过两次，如果还不行，请提供机型和安卓版本信息到 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">Issues</a></p><h3><a id="user-content-设备交互控制栏为什么不设计为自动跟踪吸附的悬浮菜单" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E4%BA%A4%E4%BA%92%E6%8E%A7%E5%88%B6%E6%A0%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%AE%BE%E8%AE%A1%E4%B8%BA%E8%87%AA%E5%8A%A8%E8%B7%9F%E8%B8%AA%E5%90%B8%E9%99%84%E7%9A%84%E6%82%AC%E6%B5%AE%E8%8F%9C%E5%8D%95"></a>设备交互控制栏为什么不设计为自动跟踪吸附的悬浮菜单?</h3><p>采用悬浮菜单方案不可避免地会增加对 Scrcpy 的耦合性，并增加与 Scrcpy 同步更新的难度。许多类似的 ScrcpyGUI 软件在使用此方案后不得不投入大量精力，最终因更新困难而放弃开发。因此，综合考虑，我们决定采用现有的方案，并期待 Scrcpy 未来能够增加原生交互控制栏的支持。</p><h3><a id="user-content-某些设备连接镜像后可以看到画面但是无法操作" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%9F%90%E4%BA%9B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E9%95%9C%E5%83%8F%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%94%BB%E9%9D%A2%E4%BD%86%E6%98%AF%E6%97%A0%E6%B3%95%E6%93%8D%E4%BD%9C"></a>某些设备连接镜像后可以看到画面但是无法操作</h3><blockquote><p>注意：以小米手机为例，不仅需要开启 USB 调试还需要开启 USB 调试（安全设置）也就是允许通过 USB 调试修改权限或模拟点击的功能</p></blockquote><p>可供参阅的详细说明 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2FFAQ.md%23mouse-and-keyboard-do-not-work">鼠标和键盘不工作的原因</a></p><h3><a id="user-content-下载软件包时提示报毒导致无法正常下载" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%97%B6%E6%8F%90%E7%A4%BA%E6%8A%A5%E6%AF%92%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%B8%8B%E8%BD%BD"></a>下载软件包时提示报毒导致无法正常下载</h3><blockquote><p>经过反馈，有时在 Windows 环境下，由于软件包没有进行证书签名，可能会被 Windows Defender 误认为有害而导致拦截提示，可以尝试以下解决方法</p></blockquote><ol><li>打开 <code>Windows 安全中心</code>。</li><li>选择 <code>病毒和威胁防护</code>。</li><li>在 <code>病毒和威胁防护设置</code> 下，点击 <code>管理设置</code>。</li><li>找到 <code>实时保护</code>，如果权限允许，可以尝试点击关闭。如果无法关闭实时保护，请跳过此步骤。</li><li>向下滑动页面，找到 <code>排除项</code>，点击 <code>添加或删除排除项</code>。</li><li>添加您下载软件包的文件夹路径作为排除项，即将该文件夹添加到<code>排除列表</code>中。</li></ol><h3><a id="user-content-获取设备列表失败或开始镜像录屏报错" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%E6%88%96%E5%BC%80%E5%A7%8B%E9%95%9C%E5%83%8F%E5%BD%95%E5%B1%8F%E6%8A%A5%E9%94%99"></a>获取设备列表失败或开始镜像/录屏报错</h3><blockquote><p>该问题一般是 <code>Adb</code> 或 <code>Scrcpy</code> 依赖路径错误导致的，可以尝试以下解决方法</p></blockquote><ol><li>在菜单中选择 <code>偏好设置</code>，然后在 <code>Global 模式</code> 下点击右上角的 <code>重置配置</code>。</li><li>接下来，进入 <code>设备列表</code> 页面，并尝试重新开启镜像功能。</li><li>如果问题仍然存在，请确保您已下载并安装了最新版本的 <code>Escrcpy</code>。</li><li>按下 <code>Ctrl</code> + <code>Shift</code> + <code>I</code> 进入开发者工具，并查看是否有任何报错信息。</li><li>如果有报错，请截图并在 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">反馈问题</a> 页面中提交您的问题。</li></ol><h3><a id="user-content-macos-关闭窗口选择最小化到托盘后顶部右侧状态栏找不到图标" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos-%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E9%80%89%E6%8B%A9%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%B0%E6%89%98%E7%9B%98%E5%90%8E%E9%A1%B6%E9%83%A8%E5%8F%B3%E4%BE%A7%E7%8A%B6%E6%80%81%E6%A0%8F%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E6%A0%87"></a>macOS 关闭窗口选择最小化到托盘后顶部右侧状态栏找不到图标</h3><blockquote><p>这个一般是状态栏图标过多导致无法展示 Escrcpy 的图标，推荐用以下工具解决</p></blockquote><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.better365.cn%2Fibar.html">iBar</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.macbartender.com%2F">Bartender</a></li></ul><h3><a id="user-content-macos-安装成功后打开提示文件损坏" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos-%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E5%90%8E%E6%89%93%E5%BC%80%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F"></a>macOS 安装成功后打开提示文件损坏</h3><blockquote><p>这个通常是因为软件包本身没有签名导致的，可以尝试以下解决方法</p></blockquote><ol><li>终端中执行 <code>sudo spctl --master-disable</code> 以允许任何来源</li><li>终端中执行 <code>sudo xattr -r -d com.apple.quarantine [AppPath]</code> 以尝试修复提示软件包损坏</li></ol><h2><a id="user-content-获得帮助" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%BE%97%E5%B8%AE%E5%8A%A9"></a>获得帮助</h2><blockquote><p>因为是开源项目，全靠爱发电，所以支持有限，更新节奏不固定</p><p>注意：非 BUG 或计划外的需求，有偿处理；至于金额，根据问题难易程度，你觉得帮助了多少，看着给吧（维护这些项目已经耗费了大量精力，还要免费花时间解答问题就说不过去了吧...所以白嫖的一律不通过。）</p></blockquote><ul><li>issues: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">反馈问题</a></li><li>email: <a href="mailto:viarotel@qq.com">viarotel@qq.com</a></li><li>weixin: viarotel</li><li>qq: 523469508</li></ul><h2><a id="user-content-致谢" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%87%B4%E8%B0%A2"></a>致谢</h2><p>该项目的诞生离不开以下开源项目</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy">scrcpy</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FDeviceFarmer%2Fadbkit">adbkit</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.electronjs.org%2F">electron</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fvuejs.org%2F">vue</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fgnirehtet%2F">gnirehtet</a></li></ul><h2><a id="user-content-支持项目" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%94%AF%E6%8C%81%E9%A1%B9%E7%9B%AE"></a>支持项目</h2><blockquote><p>如果该项目帮到你的话，可以请我喝杯咖啡，让我更有精神完善该项目 😛</p></blockquote><div><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79dcbc40246743e2b6870419e88e0392~tplv-k3u1fbpfcp-watermark.image?" alt="viarotel-wepay" referrerpolicy="no-referrer"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e5e69b83dd746deade95afd4a6864ec~tplv-k3u1fbpfcp-watermark.image?" alt="viarotel-alipay" referrerpolicy="no-referrer"></div>]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/viarotel-org/escrcpy</guid>
            <link>https://gitee.com/viarotel-org/escrcpy</link>
        </item>
        <item>
            <title>
                <![CDATA[KubeSphere 社区双周报 | Fluent Operator 2.6.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>KubeSphere 社区双周报主要整理展示新增的贡献者名单和证书、新增的讲师证书以及两周内提交过 commit 的贡献者，并对近期重要的 PR 进行解析，同时还包含了线上/线下活动和布道推广等一系列社区动态。</p><p>本次双周报涵盖时间为：2023.11.10-2023.11.23。</p><h2>贡献者名单</h2><p><img src="https://oscimg.oschina.net/oscnet/up-c62e63f1bf7068d8223d3ea14620688a29f.gif" alt="" referrerpolicy="no-referrer"></p><h2>新晋 KubeSphere Contributor</h2><p>两周内共有 1 位新晋 KubeSphere Contributor，感谢对 KubeSphere 社区的贡献！</p><p><img src="https://oscimg.oschina.net/oscnet/up-2dfcb87266c4e5068e9628e874a6a2b57e5.png" alt="" referrerpolicy="no-referrer"></p><h2>近期更新</h2><h3>Fluent Operator</h3><p>Fluent Operator 在 2023 年 11 月 22 日发布了 v2.6.0 版本，感谢来自全球 12 位开发者的贡献。以下是详细信息：</p><p>新特性（Features）：</p><ul><li>新增 Fluentbit Nginx 插件 (#924)，由 @sjliu1 提交。</li><li>新增 Fluentbit Statsd 插件 (#925)，由 @sjliu1 提交。</li><li>新增 Fluentbit Syslog 插件 (#931)，由 @sjliu1 提交。</li><li>新增 Fluentbit TCP 插件 (#936)，由 @sjliu1 提交。</li><li>新增在 Fluentd 中添加 in_sample 插件以便于测试 (#937)，由 @cw-Guo 提交。</li><li>添加 fluent-plugin-prometheus 插件到 Fluentd (#966)，由 @joshuabaird 提交。</li><li>添加 Fluentd monitor_agent 输入插件 (#967)，由 @joshuabaird 提交。</li><li>添加 Fluentd 输入插件 CRs (#972)，由 @MisterMX 提交。</li><li>为 Fluentd 添加 readiness 和 liveness 探针 (#980)，由 @cw-Guo 提交。</li></ul><p>增强（Enhancements）：</p><ul><li>增加 Fluentbit Daemonset HostPath 切换选项 (#926)，由 @OlegVanHorst 提交。</li><li>允许为 Fluentbit 设置 dnsPolicy (#951)，由 @L1ghtman2k 提交。</li><li>默认 cri 解析器应包含 Time_Keep On，否则输出中不存在时间标签 (#958)，由 @JoeDerby 提交。</li><li>使用环境文件替换已经废弃的命令 (#970)，由 @jongwooo 提交。</li><li>升级 chart-testing-action 到 v2.6.0 (#976)，由 @benjaminhuo 提交。</li><li>允许通过 helm chart 传递环境变量 (#977)，由 @guerzon 提交。</li><li>按 metadata.name 对自定义资源进行排序 (#988)，由 @cw-Guo 提交。</li><li>升级 Fluentbit 到 2.2.0 (#994)，由 @wenchajun 提交。</li><li>构建和依赖更新：包括 Docker、Actions/Checkout、Golang 等的依赖更新。</li></ul><p>Bug 修复（Bug Fixes）：</p><ul><li>修复 Fluentbit Splunk 的 output 文档 (#935)，由 @Macbet 提交。</li><li>在集群 FluentBit helm chart 中添加 parserSelector (#956)，由 @JoeDerby 提交。</li><li>修复 Fluentd record transformer 参数 (#960)，由 @cw-Guo 提交。</li><li>修复 Fluentd in_http 插件 keepalive_timeout 选项 (#968)，由 @cw-Guo 提交。</li><li>修复 Fluentd 解析器 keep_time_key (#987)，由 @cw-Guo 提交。</li></ul><h2>社区动态</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.io%2Fforum%2Fd%2F22875-li-ji-bao-ming-yun-yuan-sheng-ke-guan-ce-xing-meetup-yan-zhou-zhan-1125-huo-re-kai-qi" target="_blank">火热报名中 | 云原生 + 可观测性 Meetup 广州站 11.25 准时开启！</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.io%2Fforum%2Fd%2F22924-kuai-lai-kao-shi-na-zheng-shu-kubesphere-ge-ren-ji-neng-zhuan-ye-kao-shi-ren-zheng-shang-xian-la" target="_blank">快来考试拿证书！KubeSphere 个人技能专业考试认证上线啦！</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fnews%2Fospp-2023-summary%2F" target="_blank">开源之夏 2023 KubeSphere 社区项目总结</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fblogs%2Fdeploy-kubesphere-on-arm-kylin-v10%2F" target="_blank">ARM 版 Kylin V10 部署 KubeSphere 3.4.0 不完全指南</a></li></ul><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10151151</guid>
            <link>https://my.oschina.net/u/4197945/blog/10151151</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[BetterGI（更好的原神） - 开源免费的原神游戏辅助工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>BetterGI ， 一个基于计算机视觉技术，意图让原神变的更好的项目。</p><blockquote><p>BetterGI · 更好的原神 - 自动拾取 | 自动剧情 | 全自动钓鱼 (AI) | 全自动七圣召唤 | 自动伐木 | 自动派遣 | 一键强化 | 支持云原神</p></blockquote><h2>功能</h2><ul><li>特色：自带一个遮罩窗口覆盖在游戏界面上，用于显示日志和图像识别结果。</li></ul><p><a href="https://user-images.githubusercontent.com/15783049/283518643-57ab7c3c-709a-4cf3-8f64-1c78764c364c.jpg"><img alt="" src="https://static.oschina.net/uploads/img/202311/24182139_MuR8.jpg" referrerpolicy="no-referrer"></a></p><ul><li>实时任务
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E6%8B%BE%E5%8F%96">自动拾取</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E5%89%A7%E6%83%85">自动剧情</a><ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E9%A2%86%E5%8F%96%E3%80%8E%E6%AF%8F%E6%97%A5%E5%A7%94%E6%89%98%E3%80%8F%E5%A5%96%E5%8A%B1">自动领取『每日委托』奖励</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E9%87%8D%E6%96%B0%E6%B4%BE%E9%81%A3">自动重新派遣</a></li></ul></li><li><a href="https://bgi.huiyadan.com/doc.html#%E5%85%A8%E8%87%AA%E5%8A%A8%E9%92%93%E9%B1%BC">全自动钓鱼 (AI)</a></li></ul></li><li>独立任务
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E4%B8%83%E5%9C%A3%E5%8F%AC%E5%94%A4">自动七圣召唤</a></li><li>自动伐木（迁移中）</li></ul></li><li>操控辅助
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E7%A9%BA%E6%A0%BC%E8%BF%9E%E5%8F%91">空格连发</a></li><li><a href="https://bgi.huiyadan.com/doc.html#f%E8%BF%9E%E5%8F%91">F 连发</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E9%82%A3%E7%BB%B4%E8%8E%B1%E7%89%B9-%E8%BD%AC%E5%9C%88%E5%9C%88">那维莱特 - 转圈圈</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E5%9C%A3%E9%81%97%E7%89%A9%E4%B8%80%E9%94%AE%E5%BC%BA%E5%8C%96">快速圣遗物强化</a></li></ul></li></ul><p><a href="https://bgi.huiyadan.com/feat.html">更多功能</a>筹备中...</p><h2>界面截图</h2><p><a href="https://user-images.githubusercontent.com/15783049/275204566-813570c4-3816-4850-ac16-799af4f3cc5f.png"><img alt="" src="https://static.oschina.net/uploads/img/202311/24182210_I0LO.png" referrerpolicy="no-referrer"></a></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bettergi</guid>
            <link>https://www.oschina.net/p/bettergi</link>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8 极致性能优化 Non-GC Heap]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>前言</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">.NET8 里面 JIT 引入了一个新的机制，叫做 Non-GC Heap。JIT 可以确保相关对象分配在 Non-GC Heap 上，该堆像其名称一样，不受 GC 管理。JIT 需要保证这个对象没有被 GC 引用，并且在这个对象的生命周期内一直是根对象 (不会被 GC 消灭的对象) 的状态。原文:<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485594%26idx%3D1%26sn%3D77ada645af59a4e35e1d46c2694493ac%26chksm%3Dc01c4501f76bcc17384320acd082d9951ecf8a6f321ae089aa3c4430d3cdb947795ac34e8727%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.NET8 极致性能优化 Non-GC Heap</a></strong></p><span id="OSC_h2_1"></span><h2><strong>概述</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">为什么要引入这种机制？先来看一段代码:</p><div><pre><code class="language-text">public static string GetPrefix() =&gt; "https://";
static void Main(string[] args)
{
  GetPrefix ();
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">这里的 GetPrefix 函数返回的是一个常量字符串值，它的 ASM 如下:</p><div><pre><code class="language-text">mov  rax,185CAC02068h
mov  rax,qword ptr [rax]</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">两个 mov 指令，第一个是对象指针的指针，第二个是对象的指针。虽然是简单的两个指令，但是背后的逻辑却较为复杂，基本如下:<br> 一个字符串常量值，.NET7 里面 JIT 也会给这个字符串常量值复制到一个堆分配到字符串对象中，返回的是对象的二级指针。因为是堆对象，可能会被 GC 移动，每次都需要获取新的地址，频繁增加负担。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">这里的问题在哪儿呢？一个字符串常量值需要这么多的步骤操作吗？开销是否太大，我们是否可以简化它呢？有一个常规的很容易想到的方法，就是把这个字符串常量值的地址给它固定起来，每次需要用到这个常量值，就直接去这个固定地址读取，这样行不行呢？GC 堆很明显不能硬编码固定。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">当然可以，做法就是把这个字符串常量值放到 POH(固定对象堆) 上，不让 GC 移动。这样是减少了 GC 回收的时候移动的开销，但是并没有从根本上解决问题，因为固定对象同样受到 GC 的管控，上面的步骤除了不能移动一样不少，并且 POH 不会进行根对象的处理，可能会导致它们被回收，地址指向了其它的数据，进而错误。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>特点</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">要彻底的解决这个问题，本篇的主角:Non-GC Heap 出场了。它有三个特点:<br> 1.JIT 要保证这个对象没有被 GC 引用<br> 2.这个对象在生命周期内一直是根对象<br> 3.它不能是可卸载上下文的一部分</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">你可以认为 GC 堆包括:小对象堆 (SOH-小于 85000 字节的对象），大对象堆 (LOH-大于 85000 字节的对象)，固定对象堆（POH）<br> 而 No-GC Heap 超脱于 GC Heap 之外的 FOH(冻结堆)。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">JIT 现在可以避免在生成的代码中访问该对象时的间接寻址，而是直接硬编码对象的地址</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">GetPrefix 函数的 ASM 在.NET8 Non-GC Heap 里面如下:</p><div><pre><code class="language-text">mov  rax,26180000218h
C3   ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">26180000218h 为对象地址,一个 mov 直接返回。看似只简化了一个 mov,但是实际上它这种硬编码固定模式地址，简化的是整个字符串常量值的原理，也就是把字符串常量值分配到 FOH 里面，而不是 GC 堆里。性能极大的提升自不必多说。以下测量 13 倍的性能提升。</p><div><pre><code class="language-text">Method Job Mean Ratio
GetPrefix .NET 7 1.3450 ns
GetPrefix .NET 8 0.0729 ns</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>其它 Non-GC Heap 的操作</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>一:</strong>使用 typeof(T) 生成的 RuntimeType 对象</p><div><pre><code class="language-text">public Type GetTestsType() =&gt; typeof(Tests);</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>二:</strong>空数组分配到 Non-GC Heap 上，使 Array.Empty() 更加高效</p><div><pre><code class="language-text">public string[] Test() =&gt; Array.Empty&lt;string&gt;();</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">它俩在.NET8 里面都类似于如下 ASM，一个 mov 直接返回:</p><div><pre><code class="language-text">mov rax,1A0814EAEA8
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>三:</strong>静态值类型字段关联的堆对象，不包含任何 GC 引用的字段</p><div><pre><code class="language-text">public partial class Tests
{
    private static readonly ConfigurationData s_config = ConfigurationData.ReadData();
    public TimeSpan GetRefreshInterval() =&gt; s_config.RefreshInterval;
    private struct ConfigurationData
    {
        public static ConfigurationData ReadData() =&gt; new ConfigurationData
        {
            Index = 0x12345,
            Id = Guid.NewGuid(),
            IsEnabled = true,
            RefreshInterval = TimeSpan.FromSeconds(100)
        };
        public int Index;
        public Guid Id;
        public bool IsEnabled;
        public TimeSpan RefreshInterval;
    }
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">RefreshInterval .NET7 如下:</p><div><pre><code class="language-text">mov       rax,13D84001F78
mov       rax,[rax]
mov       rax,[rax+20]
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">RefreshInterval .NET8 如下:</p><div><pre><code class="language-text">mov       rax,20D9853AE48
mov       rax,[rax]
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>四:</strong>代之间的 GC 引用判断</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">代码:</p><div><pre><code class="language-text">public class Tests
{
    public void Write()
    {
        string dst = "old";
        Write(ref dst, "new");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Write(ref string dst, string s) =&gt; dst = s;
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Write 在.NET7 和.NET8 上生成如下:</p><div><pre><code class="language-text">call      CORINFO_HELP_CHECKED_ASSIGN_REF
nop
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">CORINFO_HELP_CHECKED_ASSIGN_REF 是一个 JIT 帮助程序函数，其中包含所谓的「GC write barrier (GC 写屏障)」，一个小代码片段，用于让 GC 跟踪正在写入的引用，因为它可能需要知道，例如，因为正在分配的对象可能是 gen0，而目标可能是 gen2。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">微调下这个代码:</p><div><pre><code class="language-text">public class Tests
{
    public void Write()
    {
        string dst = "old";
        Write(ref dst);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Write(ref string dst) =&gt; dst = "new";
}</code></pre></div><ul><li>实现的功能都是一样的，只不过 dst 直接赋值了常量字符串，记得上面常量字符串的分配是在 Non-GC Heap 吗？.NET7 里面还是需要帮助函数:</li></ul><div><pre><code class="language-text">mov       rdx,1FF0E4014A0
mov       rdx,[rdx]
call      CORINFO_HELP_CHECKED_ASSIGN_REF
nop
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">然.NET8 里面则是</p><div><pre><code class="language-text">mov       rax,1B3814EAEC8
mov       [rcx],rax
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">因为.NET8 意识到常量字符串是在 Non-GC Heap，不需要 GC 跟踪判断在那个代码，类似于 card_table 那种。所以优化掉了 CORINFO_HELP_CHECKED_ASSIGN_REF</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>往期精彩回顾:</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485453%26idx%3D1%26sn%3Df7c1a6198b9e24af64a6a88b80230a76%26chksm%3Dc01c4596f76bcc80ff69ce39bc691f508a118f679d64c070e12538151dde161c4f80da935724%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.NET8 JIT 核心:分层编译的原理</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485277%26idx%3D1%26sn%3Ddfb356778d490c11986e5134d578271a%26chksm%3Dc01c4ac6f76bc3d0f1821af547af1bdb67b6a4cff3f7611203ac4690f0f400e322294128d5c6%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">新版.Net 性能有没有达到 C++90%?</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485350%26idx%3D1%26sn%3D6a19a00f7f86bc5802d06c99556d2a19%26chksm%3Dc01c4a3df76bc32b63f8d2530a044e8e1fc82ebfd98ddeb5002799e992e3108037ed9ad52db3%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">面试官问.Net 对象赋值为 null,就会被 GC 回收吗?</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485387%26idx%3D1%26sn%3D5ea612e6590c5d19dcd95d4ec34f007c%26chksm%3Dc01c4a50f76bc3466f7b6cad8faf26473e70ef4f3ecea8b55f0a0138b8c2100eaedc956e3acb%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.Net JIT 的骚操作 DNGuard HVM 原理简析</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">作者:江湖评谈。公众号:<strong>jianghupt</strong>.欢迎关注。文章首发地。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5407571/blog/10150775</guid>
            <link>https://my.oschina.net/u/5407571/blog/10150775</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国科学院软件所在开源自动驾驶平台建设方面取得进展]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">中国科学院软件研究所可信智能系统团队在开源自动驾驶（Self-driving System）平台建设方面取得进展，构建了一个开放易用且自主可控的自动驾驶算法开发、测试、仿真与验证平台 ISS。该成果得到中国科学院稳定支持基础研究领域青年团队计划「开放环境下的可信智能算法」项目支持。</span></p><p><span style="color:#000000">根据介绍，ISS 平台基于模块化的框架并以依赖库较少的方式实现了涵盖自动驾驶全流程（包括感知、建图、定位、预测、规划与控制等）的几十种基准算法（如图 1 所示），使用简单、易于扩展，可以为科研人员开展自动驾驶相关研究提供基础平台支撑。</span></p><p><img alt="" height="329" src="https://oscimg.oschina.net/oscnet/up-bf752988659c49e05377c82e311313f3fb6.png" width="500" referrerpolicy="no-referrer"></p><p><em><span style="color:#000000">图 1. ISS 平台架构</span></em></p><p><span style="color:#000000">ISS 平台具体实现了以下六大模块功能。</span></p><ul><li><span style="color:#000000">传感器模块：基于 CARLA 仿真器支持了常用的传感器；</span></li><li><span style="color:#000000">感知模块：基于深度学习方法实现了 2D 检测、2D 语义分割、Bev 地图生成、3D 目标检测等感知任务；</span></li><li><span style="color:#000000">预测模块：实现了匀速运动预测和基于 Motion Transformer 的预测；</span></li><li><span style="color:#000000">定位模块：实现了基于激光雷达、惯性测量单位、全球定位系统等的单传感器定位和基于卡尔曼滤波器等过滤器的多传感器融合定位；</span></li><li><span style="color:#000000">规划模块：实现了基于 Lanelet2 的 FloodFill 路线规划算法、基于规则的行为规划算法、基于 Lattice Planner 和 EM Planner 的运动规划算法；</span></li><li><span style="color:#000000">控制模块：实现了经典的 PID 和 MPC 控制算法。</span></li></ul><p><img alt="" height="191" src="https://oscimg.oschina.net/oscnet/up-67074db82f46cb368c7d1d3418d532cc664.png" width="500" referrerpolicy="no-referrer"></p><p><em><span style="color:#000000">图 2. ISS 平台在 CARLA 仿真平台的 2D、3D 感知效果</span></em></p><p><span style="color:#000000">目前，已有来自国防科技大学、西南大学、奥地利数字安全实验室、德国萨尔大学等国内外知名高校的科研团队利用 ISS 平台进行研究。</span></p><p><span style="color:#000000">软件所可信智能系统团队后续将对 ISS 平台各个模块的功能继续进行扩展完善，包括加入自动驾驶可解释性分析、安全性验证、物理小车及联合仿真等功能。ISS 平台有望成为该领域有影响力的开源基础支撑平台，为国内外自动驾驶与可信人工智能等方向的研究团队提供支持。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268000</guid>
            <link>https://www.oschina.net/news/268000</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Blender 连续 5 天遭受大规模 DDoS 攻击]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Blender 发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.blender.org%2Fnews%2Fcyberattack-november-2023%2F" target="_blank">公告称</a>，blender.org 网站在 2023 年 11 月 18 日至 23 日期间持续受到 DDoS 攻击，攻击者通过不断发送请求致使网站服务器超载而瘫痪，导致网站运营严重中断。除了 blender.org 主网站外，其他一些服务也无法使用。</span></p><p><span style="color:#000000">该攻击由具有数百个 IP 地址的僵尸网络执行，发送超过 15 亿个恶意请求，峰值速率为 10 万 rps（每秒请求）。网站断断续续的可用了几天，但即使在攻击者暂停攻击的短时间内，Blender 的基础设施仍然因大量待处理的合法请求而超载，导致服务器难以跟上。</span></p><p><span style="color:#000000">在经过四天的抵御攻击之后 (11 月 21 日) 后，Blender 决定将其网站转移到了 CloudFlare，以减少攻击的影响。目前尚未有人声称对这次袭击负责，动机也未知。</span></p><p><span style="color:#000000">Blender 方面表示，此次攻击的重点是拒绝服务，项目和用户数据未受影响。</span></p><p><span style="color:#000000">攻击事件的具体时间线如下：</span></p><blockquote><ul><li><span style="color:#000000"><strong>2023-11-18&nbsp;</strong>blender.org 网站上初步展现出恶意流量的迹象，通过阻止违规地址得到缓解。</span></li><li><span style="color:#000000"><strong>2023-11-19 </strong>恶意流量加剧，导致 blender.org 网站的可用性间歇性中断。</span></li><li><span style="color:#000000"><strong>2023-11-20 </strong>由于流量过大，blender.org 的一些服务（开发者论坛、维基等）无法使用。屏蔽 IP 范围不再有效。</span></li><li><span style="color:#000000"><strong>2023-11-21 </strong>攻击达到全面规模，需要完全停止 blender.org 服务。决定转而使用专门的 DDoS 缓解服务。当日结束时，blender.org 网站恢复正常运行。</span></li><li><span style="color:#000000"><strong>2023-11-22 01:30 </strong>攻击仍在持续，峰值为每分钟超过 500 万个请求。虽然 www.blender.org 的大部分功能已恢复正常，但仍存在一些问题：</span><ul><li><span style="color:#000000">用户在访问网站之前可能会面临一个「challenge」，以验证自己不是机器人</span></li><li><span style="color:#000000">由于技术原因，blender.org（不带 www）仍然无法访问。用户想访问 Blender.org，需确保正确输入 www.blender.org</span></li><li><span style="color:#000000">有几个站点仍然不可用（代码、开发人员、文档、devtalk、下载、wiki 等），开发人员继续努力恢复。 </span></li></ul></li><li><span style="color:#000000"><strong>2023-11-22 10:30&nbsp;</strong>攻击已经停止。blender 继续致力于恢复所有其他受影响站点。</span></li><li><span style="color:#000000"><strong>2023-11-22 20:30 </strong>所有 blender.org 站点均已恢复在线并正常运行。但以此同时，另一次攻击又已经开始。</span></li><li><span style="color:#000000"><strong>2023-11-23 20:30</strong> 攻击已经停止。总共有超过 2.1B 个请求 (高达 100K rps) 得到了缓解。blender 认为该问题已解决，并且只有在 blender.org 上的用户体验受到影响时才会进一步报告。</span>&nbsp;</li></ul></blockquote><p><img alt="" height="288" src="https://oscimg.oschina.net/oscnet/up-affc1ae024c2e2724c7542ba5f0d983081b.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Blender 是一款免费开源的跨平台 3D 创作套件。使用 Blender，你可以创建 3D 可视化效果，例如静止图像，3D 动画，VFX 快照和视频编辑。它非常适合那些受益于其统一管线和响应式开发过程的个人和小型工作室。与其他 3D 建模工具相比，Blender 对内存和驱动的需求更低。其界面使用 OpenGL，在所有支持的硬件与平台都能提供一致的用户体验。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 08:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267990/blender-cyberattack-2023</guid>
            <link>https://www.oschina.net/news/267990/blender-cyberattack-2023</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[eBPF 的发展演进 --- 从石器时代到成为神（一）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h2_1"></span><h2><span><span>1. 前言</span></span></h2><div><div><span><span>技术的发展往往是积跬步而至千里的。Linux 从 92 年诞生，发展至今已经覆盖大小各类的信息基础设施。是什么样的力量，让 Linux 能够始终保持发展活力，又如何看待 Linux 之上出现的新的技术趋势？</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>本文试图通过梳理 eBPF 的演进过程，探索 Linux 内核的发展动力来源与发展轨迹，与大家一同畅想 eBPF 给内核技术、Linux 生态带来的全新变局。</span></span></div><div>
   &nbsp; 
 </div></div><span id="OSC_h2_2"></span><h2><span><span>2. eBPF 概览</span></span></h2><div><span><span>2.1. </span></span><strong><span>实现原理</span></strong></div><div>
  &nbsp; 
</div><div><div><span><span>大家可能都知道图灵机，这是一个可计算理论模型，可以用来判断计算机的计算能力。图灵机是目前有可能实现的计算能力最强的理论模型，目前我们常用的计算机，理论上都是等价于图灵机的。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出现，是对计算能力的渴求，其原理就是通过 IR 模拟一台 RISC 指令集的计算机嵌入到内核中，将内核内部的静态编译逻辑转变为更加灵活的动态编译逻辑，使内核获得近似于图灵机的动态逻辑定制能力。而从 classic BPF 到 extended BPF 的发展，是将这一计算方式进一步夯实和通用化。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出现乃至到 eBPF 的进一步发展，为内核带来了巨大的改变，使内核具备了更加强大、可编程的动态变化的能力。这种能力在各种需要定制化的应用场景中，将发挥巨大的价值，既可以用于扩展功能，也可以用于优化性能。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在实现上，为适应不同业务场景的需求，使 eBPF 具备等价于一台 RISC 指令集计算机的计算能力，通过输入参数、Map 数据存储、Helper 帮助函数，构成了 eBPF 程序与内核交互的运行环境。eBPF 指令集的计算和控制能力、运行环境与内核的交互能力，两者叠加构成了 eBPF 程序强大的处理能力。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在安全方面，通过 Verifier 严格检查 eBPF 程序的可完成性、数据访问的合法性等，保证了 eBPF 程序与内核交互过程中内核不被挂起、核心数据不会被破坏。</span></span></div></div><div><div><span><span>BPF 发展过程中，由 cBPF 发展成为 eBPF 是一次大的技术升级。eBPF 在 cBPF 的基础上重新设计了指令集、引入了 JIT、增加了辅助函数，大大扩展了复杂逻辑的设计能力。虽然 eBPF 有巨大的进步，但是基本的底层设计还是一致的，因此两者统称为 BPF。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>由于 eBPF 兼容 cBPF，在未指定时，BPF 更多指 eBPF 所定义的内涵。后文用 BPF 泛指整个 BPF 相关的基础机制，eBPF 特指最新的 BPF 标准。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.2. </span></span><strong><span>技术特点</span></strong></div><div><div><span><span>BPF 还在快速发展，它的计算能力和完备性也在迅速提高，前景无限。但就具体的版本而言，却又呈现具体技术特点，主要是其支持的能力和受到的约束两个方面。以最新的 BPF 的技术标准 (v6.1) 为蓝本，介绍 BPF 的主要技术特点。</span></span></div><div>
   &nbsp; 
 </div></div><ul><li><div><span><span>RISC 指令集</span></span></div></li></ul><div><div><span><span>BPF 的核心是一个虚拟计算机，它采用类 RISC 指令集，支持跳转、算数运算、尾调用等基本操作。在运行 BPF 程序的计算机上，BPF 指令会被内核的 JIT 编译器动态编译为物理机原生指令，实现运行效率的「零」损耗。在支持 BPF 卸载的设备上，BPF 程序也可以卸载到设备上执行。在 BPF 的指令集中还支持伪调用指令，可以调用到内核帮助函数。</span></span></div></div><div><div><span><span>同时，BPF 的指令的编码空间中还有大量的储备，未来根据需要一定还会继续增加指令，提升 BPF 实现复杂逻辑的能力。</span></span></div></div><ul><li><div><span><span>Map</span></span></div></li></ul><div><div><span><span>基于键值对的数据存储机制，可用于实现内核、用户态的数据存储和交换。</span></span></div></div><ul><li><div><span><span>Helper 函数</span></span></div></li></ul><div><div><span><span>专用于 BPF 程序调用的函数接口，用于封装内核中的功能，使 BPF 程序可以和内核互操作，同时保持 BPF 程序和内核的安全隔离。</span></span></div></div><ul><li><div><span><span>BPF 子程序</span></span></div></li></ul><div><div><span><span>实现了 BPF 程序之间的调用。</span></span></div></div><ul><li><div><span><span>上下文</span></span></div></li></ul><div><div><span><span>BPF 程序的语境和运行上下文，是一种内部透明的数据结构。只有在明确 BPF 程序的类型时，上下文的定义和内部数据结构才是确定的。不同的 BPF 程序类型，上下文也各不相同。</span></span></div></div><ul><li><div><span><span>CO-RE</span></span></div></li></ul><div><div><span><span>通过运行时类型支持，实现一次编译、随处运行。</span></span></div></div><ul><li><div><span><span>支持特权和非特权级两类运行模式</span></span></div></li></ul><div><div><span><span>分为特权级（百万 ins）和非特权级（4096ins）两类运行方式。</span></span></div></div><div><div><span><span>特权级模式下 BPF 程序可以获得更宽的权限，实现更复杂的逻辑功能。</span></span></div></div><ul><li><div><span><span>保证向后兼容</span></span></div></li></ul><div><div><span><span>这一原则对于 BPF 的推广应用非常重要，可以保证旧标准的 BPF 程序在新标准下也可以正确执行。但同时，也对未来 BPF 发展带来了约束，只有把握好 BPF 的发展方向，做好底层设计，才能两者得到兼顾。</span></span></div></div><div><div><span><span>比如，从老版本遗留下来的 cBPF 程序在 eBPF 中都会被 JIT 正确翻译和执行。</span></span></div></div><ul><li><div><span><span>稳定的 ABI</span></span></div></li></ul><div><div><span><span>BPF 稳定的 ABI 包括，BPF 程序类型对应的输入参数定义，可调用的内核帮助函数定义，返回值定义等。使用稳定的 ABI 的 BPF 程序，可保证与不同版本的内核都是兼容的。</span></span></div></div><div><div><span><span>另外，BPF 还在快速发展中，它的功能特性需要逐步释放，因此目前还有诸多限制，其中有些是基于安全、可靠性考虑，有些是没有超出范围的应用需求的保守设计等等。随着安全机制的完善、应用程序的扩展、生态体系的成熟，相应的限制也会逐步的改变。</span></span></div></div><div><div><span><span>目前的实现中，有如下限制：</span></span></div></div><ul><li><div><span><span>总运行时间有界</span></span></div></li></ul><div><div><span><span>有界性这是基本原则，应该在比较长的时间内都不会改变。但是，在不改变有界性的前提下，根据具体需要适当调整更合理的上限，这是存在极大可能的。</span></span></div></div><ul><li><div><span><span>指令总数限制</span></span></div></li></ul><div><div><span><span>非特权用户最大指令数 4096，特权用户最大指令数 1 百万。</span></span></div></div><ul><li><div><span><span>分支数限制</span></span></div></li><li><div><span><span>BPF 调用嵌套层次限制</span></span></div></li><li><div><span><span>Map 实例数限制</span></span></div></li><li><div><span><span>验证状态数限制</span></span></div></li><li><div><span><span>最大分支数限制</span></span></div></li><li><div><span><span>堆栈长度限制</span></span></div></li></ul><div><div><span><span>目前支持的堆栈最大长度为 512 字节。</span></span></div></div><ul><li><div><span><span>上下文限制</span></span></div></li></ul><div><div><span><span>每一种类型的 BPF 程序，都有其对应输入参数定义，彼此不同。也就是说，BPF 程序只能接受特定的输入并进行处理，不能访问内核的全部状态空间。</span></span></div></div><ul><li><div><span><span>辅助函数限制</span></span></div></li></ul><div><div><span><span>每一个 BPF 程序类，都有其对应的辅助函数集合。这些辅助函数，由内核各子系统提供，是 BPF 程序类上下文的一部分。它们帮助 BPF 程序与内核各子系统交互，同时又保护内核不会被破坏。</span></span></div></div><div><div><span><span>上面赘述了很多特性，大家可能会有很多疑问，比如：</span></span></div></div><div><div><span><span>为什么采用精简指令集呢？因为这是目前最主流的指令集类型，相对于复杂指令集，精简指令集更有利于实现更高密度、更高吞吐量、更高主频的处理器。因此 x86 之后出现的新型指令集系统，绝大多数都是精简指令集，包括现在的开源指令集 RISC-V。</span></span></div></div><div><div><span><span>为什么不采用原生的指令集呢？</span></span></div></div><div><div><span><span>为什么 5 个参数寄存器呢？</span></span></div></div><div><div><span><span>本篇暂不深入讨论，后续主题涉及到的时候再详细讲解。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.3. </span></span><strong><span>应用价值</span></strong></div><div><div><span><span>BPF 的应用价值与其动态和可定制特性强相关。</span></span></div></div><div><div><span><span>内核研发中一直坚守的原则是：「机制与策略分离」，即：内核负责提供机制，将策略开放给上层。在机制与策略之间需要一层界面来进行交互。</span></span></div></div><div><div><span><span>系统调用是最初方案。它是单向发起的，缺少事件模型。</span></span></div></div><div><div><span><span>虚拟文件系统，提供了双向的交互方式，但难以灵活定制复杂的逻辑。</span></span></div></div><div><div><span><span>由于软件功能越来越复杂，无法用简单规则来表达，软件的基础功能设施与业务逻辑，需要进行解偶。而业务逻辑部分，需要根据业务定制，因此很适合用 BPF 实现。比如：</span></span></div></div><ul><li><div><span><span>过滤器</span></span></div></li><li><div><span><span>权限检查</span></span></div></li><li><div><span><span>模糊测试</span></span></div></li></ul><div><div><span><span>等类型的功能，比较适合用 BPF 实现。另外，视具体问题，也可以应用于：</span></span></div></div><ul><li><div><span><span>调度算法</span></span></div></li><li><div><span><span>用户态交互（替代系统调用，实现更加可变的服务逻辑）</span></span></div></li><li><div><span><span>加载器、模拟器、兼容层</span></span></div></li><li><div><span><span>轻量化内核</span></span></div></li><li><div><span><span>多态内核</span></span></div></li><li><div><span><span>启动方式</span></span></div></li></ul><div><div><span><span>每一种业务类型都有其独具特征的逻辑模型，通过更形式化地定义这些业务模型，可以更好地理解它们和 BPF 的结合性，找到更好的实现方案，充分发挥 BPF 带来的强大能力。后续篇章，我们会对典型的应用模型进行更深入的讨论，以及 BPF 在这些应用场景中，应该在哪些特性方面进行加强或改进。</span></span></div></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4450925/blog/8685883</guid>
            <link>https://my.oschina.net/u/4450925/blog/8685883</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Spring Boot 3.2.0 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#000000">Spring Boot 3.2.0 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F11%2F23%2Fspring-boot-3-2-0-available-now" target="_blank">发布</a>，此版本添加了大量新功能和改进。</span></p><p><span style="background-color:#ffffff; color:#000000">3.2 版本的一些<strong>亮点</strong>包括：</span></p><ul><li>支持虚拟线程</li><li>对 <span style="background-color:#ffffff; color:#333333">JVM Checkpoint Restore<span>&nbsp;</span></span>的初步支持（项目 CRaC）</li><li>SSL 捆绑包重新加载</li><li>大量可观察性改进</li><li>支持 RestClient</li><li>支持 JdbcClient</li><li>支持 Jetty 12</li><li>Apache Pulsar 对 Spring 的支持</li><li>对 Kafka 和 RabbitMQ 的 SSL 捆绑支持</li><li>重新设计的嵌套 Jar 处理</li><li>Docker 镜像构建改进</li></ul><p><strong>依赖升级</strong></p><p><span><span>Spring Boot 3.2 升级到了多个 Spring 项目的新版本，并且还尽可能升级到了其他第三方库的最新稳定版本。有关详细信息，可参阅<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot%2Fwiki%2FSpring-Boot-3.2.0-Release-Notes%23dependency-upgrades" target="_blank">发行说明</a>。</span></span></p><hr><p><span><span>一些</span></span><span style="background-color:#ffffff; color:#000000">其他更改和改进内容可查看&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot%2Fwiki%2FSpring-Boot-3.2.0-Release-Notes" target="_blank">release notes</a>。</p><p><strong>介绍视频：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdMhpDdR6nHw" target="_blank">https://www.youtube.com/watch?v=dMhpDdR6nHw</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267934/spring-boot-3-2-0-released</guid>
            <link>https://www.oschina.net/news/267934/spring-boot-3-2-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.1 - 数据脱敏支持语义类型和脱敏算法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>数据脱敏支持自定义脱敏算法和语义类型。 <img src="https://oscimg.oschina.net/oscnet/up-1585b72201b92b51627496f6baf9671402c.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🔔 重大变更</h2><ul><li>用户页面的 URL 由 <code>/u/{uid}</code> 变更为 <code>/users/{email}</code>。</li><li>工作空间的所有者和开发者分别更名为：管理员和成员。 <img src="https://oscimg.oschina.net/oscnet/up-82d69e61f7501b0b1e11ac2bbd6e2f231e4.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🎄 改进</h2><ul><li><p>SQL 编辑器支持显示表的 DDL 语句（MySQL, PostgreSQL 和 TiDB）。 <img src="https://oscimg.oschina.net/oscnet/up-d913361c2eae9e174893e134b791ad8493b.png" alt="file" referrerpolicy="no-referrer"></p></li><li><p>提升了启用数据脱敏时的查询速度。</p></li><li><p>支持在工单<strong>待发布</strong>或<strong>审批通过</strong>的时候发送 webhook 通知。</p></li><li><p>改进了 Oracle Parser 用以支持存储过程和分区表。</p></li><li><p>优化了工单过滤功能。</p></li><li><p>优化了工单指派人功能。</p></li><li><p>优化了 Schema 编辑器的性能。</p></li></ul><p>📕 安装及升级，参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升级指南</a>。如果从之前版本升级，获取新版本后，重新启动升级即可。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10150991</guid>
            <link>https://my.oschina.net/u/6148470/blog/10150991</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌员工离职后抨击大老板，曾深度参与 Flutter 项目、制定 HTML 相关标准]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>伊恩·希克森 (Ian Hickson) 是在谷歌工作了 18 年的老员工，他于 2005 年 10 月加入谷歌，18 年后递交了辞职信。上周是他在谷歌的最后一周。</p><p>离职后，希克森在个人博客发表了一封措辞严厉的批评信，虽然标题为<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fln.hixie.ch%2F%3Fstart%3D1700627373" target="_blank">《回顾在 Google 的 18 年》</a></em></u>，但内容主要是抨击谷歌「腐化的文化」，并指责首席执行官桑达尔·皮查伊 (Sundar Pichai) 「缺乏远见」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1124/111037_IJjJ_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fln.hixie.ch%2F%3Fstart%3D1700627373" target="_blank">https://ln.hixie.ch/?start=1700627373</a></u></em></p><p>希克森表示，他「非常幸运地」经历了公司的早期成长历程，那时的高管对员工坦诚，鼓励他们去做雄心勃勃的实验，但如今这家搜索巨头的文化已经「腐化」。</p><p>希克森在谷歌的职业生涯可以分为两部分，在头九年里，他致力于 HTML 和相关标准的研究，任务是打造最好的 Web——因为任何对 Web 有利的事情都会对谷歌有利；在最后九年里<strong>，他一直致力于打造跨平台应用程序开发框架 Flutter</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a03893271e334eda0f60bd821d7ca0fd33c.png" referrerpolicy="no-referrer"></p><p>希克森写道，Flutter 是「老谷歌人」最后推出的项目之一，属于 Larry Page 在 Alphabet 创建前不久发起的一系列雄心勃勃的实验的一部分。Flutter 团队基本上也像一家初创公司一样运作，而且在很大程度上是建立在年轻的谷歌文化基础上。例如<strong>优先考虑内部透明度、工作/生活平衡和数据驱动决策</strong>。所以整个团队从一开始就非常开放，这使得他们能够积极构建一个健康的开源项目。</p><p>与此同时，谷歌的高速发展让其公司文化受到了侵蚀。</p><p>希克森表示：「透明度消失了。以前我会迫不及待地参加每一次公司全体会议，以便了解情况。现在，我发现自己甚至能够预测高管们所给出的每一个答案。今天，我不知道在谷歌还有谁能解释它的愿景，员工士气也空前低落。如果你和湾区的治疗师交谈，他们会告诉你，他们所有的谷歌客户都对谷歌感到不满意。」</p><p>对于今年 1 月份的<u><a href="https://www.oschina.net/news/226273/google-open-source">「大裁员」</a></u>，希克森称这是公司非常短视的决策——目的只是为了确保股价保持季度增长，而不是遵循谷歌以前的战略，即优先考虑长期成功，即使这会导致短期损失。</p><p>而且自那以来，谷歌一直在进行规模更小、更低调的裁员，以至于员工们现在都在一份内部文件中追踪裁员情况。</p><p>希克森说，这些裁员对公司文化产生了「潜在」影响，可能导致员工「大幅减少冒险行为」。他写道：「我现在在谷歌看到了很多负面现象，比如员工对管理层缺乏信任，而管理层也不再信任员工，公司制定的政策也越来越显得空洞。」</p><p>此前曾有媒体报道称，谷歌的普通员工和管理层之间关系紧张。比如，谷歌要求高管为员工表现进行绩效打分。</p><p>希克森建议，应该努力将权力从首席财务官办公室转移到这样一个人手中——他应该对如何利用谷歌广泛的资源为用户创造价值有清晰长期的愿景。</p><p>至于谷歌的文化是否可以挽救，希克森认为可以，但他称「时间紧迫」。他写道：「谷歌文化的腐化最终将变得不可逆转，因为它需要充当道德指南针的那种人，而这类人在没有道德指南针的情况下不会愿意加入谷歌。」</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267932</guid>
            <link>https://www.oschina.net/news/267932</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[vivo 称从 2024 年 1 月 4 日起，逐步开始清理未备案 App]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>vivo 开发者的微信公众号发布了<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7kYh9q5df1au7qWhaYCL8g" target="_blank">《关于尽快履行 App 备案手续通知及指引》</a></u>通知，要求开发者尽快完成移动应用程序（App）备案工作。</p><p><img src="https://static.oschina.net/uploads/space/2023/1124/105449_8NrG_2720166.png" referrerpolicy="no-referrer"></p><p>vivo 在公告写道，<span style="background-color:#ffffff; color:#424242">2023 年 12 月 5 日起，未备案 App 在应用商店及手机安装器上显示「未备案」。</span><strong>2024 年 1 月 4 日起，逐步开始清理未备案 App。</strong></p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/question/2720166_2329768">工信部要求 APP 备案</a></li><li><a href="https://www.oschina.net/news/253058">工信部：不得为未备案 App 提供网络接入服务</a></li><li><a href="https://www.oschina.net/news/260160">苹果中国 App Store 将不允许未备案应用上架</a></li><li><a href="https://www.oschina.net/question/2720166_2329781">关于开展微信小程序备案的通知</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267923</guid>
            <link>https://www.oschina.net/news/267923</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Qt Creator 12 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Qt Creator 12 现已发布，一些亮点更新内容如下：</p><h4><strong>新功能</strong></h4><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-explore-compiler-code.html" target="_blank">集成 Compiler Explorer</a></strong></p><p><strong><img alt="" height="337" src="https://oscimg.oschina.net/oscnet/up-f4c52d1dd0998cbb8758b94fa724765e17a.webp" width="500" referrerpolicy="no-referrer"></strong></p><p>使用&nbsp;Tools &gt; Compiler Explorer &gt; Open Compiler Explorer&nbsp;打开集成了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgodbolt.org%2F" target="_blank">https://godbolt.org</a> 的 Compiler Explorer 的编辑器。当你编写代码时，Qt Creator 会要求 Compiler Explorer 对代码进行编译、生成汇编，并选择性地执行代码，然后向你显示结果，<span style="background-color:#ffffff; color:#09102b">就像在其网站上一样。</span>你可以打开多个编辑器并配置不同的编译器。将包括设置在内的文档保存为 .qtce 文件，以便以后共享或继续实验。</p><p>该插件默认为禁用，因此首先要在 Help &gt; About Plugins &gt; CompilerExplorer (or Qt Creator &gt; About Plugins &gt; CompilerExplorer on macOS) 中启用该插件。</p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-debug-cmake-files.html" target="_blank">CMake Debugging</a>&nbsp;和&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-profile-cmake-code.html" target="_blank">Profiling</a></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>CMake 3.27 及更高版本包含通过 Debug Adapter Protocol (DAP) 进行调试的功能。Qt Creator 12 通过 Debug mode &gt; DAP 中的 DAP 实现了调试，这意味着你现在可以在项目的 CMake 文件中设置断点并调试 CMake 的配置过程。还可以使用 Debug &gt; Start Debugging &gt; Start CMake Debugging 更直接地触发 CMake 调试，而不是通过「Debug」模式。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此外，新的 Analyze &gt; CMake Profiler 可在 profiling 模式下启动 CMake（自 CMake 3.18 起可用），并在 Qt Creator 的跟踪文件查看器中打开结果。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-record-screens.html" target="_blank">Screen recording</a></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>通过 ScreenRecorder 插件以实现轻松创建屏幕（部分）录音，用于错误报告、共享、博客文章等。该插件默认处于禁用状态，可在&nbsp;Help &gt; About Plugins &gt; ScreenRecorder (or Qt Creator &gt; About Plugins &gt; ScreenRecorder on macOS)&nbsp;<span><span><span><span>中</span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2Fqtcreator%2Fcreator-how-to-enable-plugins.html" target="_blank">启用该插件</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span style="color:#09102b"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fqt-creator-12-released" target="_blank">查看官方公告</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267922/qt-creator-12-released</guid>
            <link>https://www.oschina.net/news/267922/qt-creator-12-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[egui 0.24 发布，面向 Web 和原生应用的 Rust GUI 库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>egui 是易于使用、可移植的即时模式 (immediate mode) GUI 库，采用 Rust 编写，提供了一种简单而直观的方式来创建图形用户界面，并且可运行在 Web 和原生应用中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-051b7caef2c757433d4cec01c2d77678d2d.gif" referrerpolicy="no-referrer"></p><p>在线体验：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.egui.rs%2F" target="_blank">https://www.egui.rs/</a></u></em></p><p>最新发布的&nbsp;egui 0.24 新增了许多新功能和改进，包括：</p><ul><li><strong>添加<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.rs%2Fegui%2Flatest%2Fegui%2Fviewport%2Findex.html" target="_blank"><code>viewport</code>API</a>&nbsp;(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Fpull%2F3172" target="_blank">#3172</a>)</strong>，为受支持的后端（如<code>eframe</code>）生成多个原生窗口</li><li>支持使用类似于浏览器中的快捷键（Cmd+Plus, Cmd+Minus 或 Cmd+0）轻松缩放任何 egui 应用程序</li><li>默认隐藏滚动条，直到将鼠标悬停在滚动区域 (<code>ScrollArea</code>) 上</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Freleases%2Ftag%2F0.24.0" target="_blank">详情查看 Release Notes</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267921/egui-0-24-released</guid>
            <link>https://www.oschina.net/news/267921/egui-0-24-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenSSL 3.2.0 正式 GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenSSL 开发团队<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openssl.org%2Fblog%2Fblog%2F2023%2F11%2F23%2FOpenSSL32%2F" target="_blank">宣布</a></u>，OpenSSL 3.2 系列的第一个版本 —— OpenSSL 3.2.0 正式 GA。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e27b90f1a62566b0d27660a44b9e943fb7f.png" referrerpolicy="no-referrer"></p><p>OpenSSL 3.2 实现了针对 QUIC 的初版客户端，QUIC 是 Google 开发的通用传输层网络协议，后来被 IETF 采用。 对于 OpenSSL 3.3 和明年的 OpenSSL 3.4，他们的目标是进一步完成此实现。</p><p>此外还增加了对 TLS 1.3 中 Brainpool 曲线的支持、原始公钥 (RFC7250) 支持、使用 Brotli 和 Zstd 进行证书压缩的支持、SM4-XTS 支持、确定性 ECDSA 签名、AES-GCM-SIV、混合公钥加密 (HPKE) ），以及其他特性。</p><p>OpenSSL 3.2 还将默认的 SSL/TLS 安全级别从 1 更改为 2。</p><p><strong>OpenSSL 3.2.0 主要变化</strong></p><ol><li>客户端 QUIC 支持，包括对多个流的支持（RFC 9000）</li><li>在 TLS 中支持证书压缩（RFC 8879），包括对 zlib、zstd 和 Brotli 的支持</li><li>Deterministic ECDSA（RFC 6979）</li><li>除了对 Ed25519 和 Ed448 的现有支持外，还支持 Ed25519ctx、Ed25519ph 和 Ed448ph（RFC 8032）</li><li>AES-GCM-SIV（RFC 8452）</li><li>Argon2（RFC 9106）和支持线程池功能</li><li>HPKE（RFC 9180）</li><li>在 TLS 中使用原始公钥的能力（RFC 7250）</li><li>如果操作系统允许，支持 TCP Fast Open（RFC 7413）</li><li>在 TLS 中支持基于提供者的可插拔签名方案，使第三方 post-quantum 和其他算法提供者能够在 TLS 中使用这些算法</li><li>在 TLS 1.3 中支持 Brainpool 曲线</li><li>SM4-XTS</li><li>支持使用 Windows 系统证书存储作为受信任根证书的来源。该功能尚未默认启用，需要使用环境变量进行激活。预计在未来的功能版本中，这将成为默认启用的功能</li></ol><p>详情查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fopenssl-3.2.0%2FNEWS.md" target="_blank">NEWS 文件</a>和&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fopenssl-3.2.0%2FCHANGES.md" target="_blank">CHANGES 文件</a>。</p><p>对新的 QUIC 功能感兴趣的用户，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopenssl%2Fopenssl%2Fblob%2Fopenssl-3.2%2FREADME-QUIC.md" target="_blank">建议阅读 QUIC 的 README 文件</a></u>，其中提供了相关文档和示例代码的链接。</p><p>OpenSSL 3.3 将是 OpenSSL 3.2 之后的下一个功能性更新，最迟将于 2024 年 4 月 30 日发布。预计该版本将包括 QUIC 服务器支持。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267915/openssl-3-2-0-final</guid>
            <link>https://www.oschina.net/news/267915/openssl-3-2-0-final</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin V23 成功适配国产显卡摩尔线程 MTT S80]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">deepin <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-v23-adapts-mtt-s80%2F" target="_blank">宣布</a>，在社区爱好者以及 deepin 研发团队的推动下，完成了摩尔线程 MTT S80 显卡的适配工作，成功在 deepin V23 Beta2 版本上驱动 MTT S80 显卡。</span></p><p><span style="color:#000000">据悉，此次适配的摩尔线程 MTT S80 显卡，于 2022 年 11 月发布，搭载了完整的「春晓」芯片核心，内置 4096 个 MUSA 流处理核心、128 个 Tensor 张量核心，在 1.8GHz 的主频下，能够提供 14.4TFLOPS 的单精度浮点算力。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-24b90e4c555c3dce9d7c2bd8dcf255ff8c6.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">deepin 面向 MTT S80 的体验版镜像已经推出，可以下载试用。MTT S80 显卡驱动在 deepin V23 Beta2 操作系统上运行稳定，能够达到主流 Linux 平台显卡水平。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-bb6700d8bf04b78428d098b799746afe61d.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-21dfd2787d98251884cf766af12fa8cf84e.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-97a82a853f7689b89f6151579e93404022f.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">当前，该驱动程序已支持 Opengl 4.0 、Opengl ES 3.2 ，由于还是技术预览版本，仅支持 5.15 版本内核，部分用户态驱动还未合入主线。此外，还存在一些其他问题，有待后续更新解决。因此，官方警告在生产环境中请务必谨慎使用。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><strong>镜像下载地址：</strong></span></p><ul><li style="text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fci.deepin.com%2Frepo%2Fdeepin%2Fdeepin-community%2Fmoore-driver%2Fcdimage%2Fdeepin-23-Beta2-for-moore-s80-amd64.iso" target="_blank">https://ci.deepin.com/repo/deepin/deepin-community/moore-driver/cdimage/deepin-23-Beta2-for-moore-s80-amd64.iso</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267913</guid>
            <link>https://www.oschina.net/news/267913</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LibreOffice 24.2 Alpha 1 发布，已启用新的版本号命名规则]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/news/255048/libreoffice-version-yy-m">此前曾报道过</a></u>，从 2024 年开始，文档基金会 (TDF) 将为 LibreOffice 采用基于日历的版本号。因此下一个大版本是 2024 年 2 月发布的&nbsp;<strong>LibreOffice 24.2</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c5b76281fefb613d45058573cae8890f54c.png" referrerpolicy="no-referrer"></p><p>LibreOffice 24.2 昨天发布了首个 alpha，主要变化如下：</p><ol><li>在 LibreOffice Writer 中改进了多页浮动表格的功能。</li><li>在 LibreOffice Calc 电子表格的函数侧边栏中添加了一个新的搜索字段。</li><li>在 LibreOffice Impress 中实现了小型大写字母 (Small Caps) 功能。</li><li>默认启用「保存自动恢复信息」，以及「始终创建备份副本」，以提高 LibreOffice 在崩溃或其他问题发生时的稳定性。还有许多自动恢复修复。</li><li>在 LibreOffice 选项区域添加了搜索功能。</li><li>当使用来自桌面设置的暗色主题时，自动切换到深色应用程序颜色和深色图标主题现在适用于基于 Qt 的 UI 变体，如 KDE Plasma。</li><li>LibreOffice 的「使用密码保存」对话框添加了密码强度指示器。</li></ol><p>更多关于 LibreOffice 24.2 正在进行的工作的详细信息可以在<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.documentfoundation.org%2FReleaseNotes%2F24.2" target="_blank">Document Foundation Wiki</a></u>上找到。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.documentfoundation.org%2FReleasePlan%2F24.2" target="_blank">发布计划显示</a></u>，alpha 版本已按时发布。LibreOffice 24.2 的功能冻结和代码分支将在 12 月初进行，然后是 beta 版本。预计在 12 月和 1 月之间发布至少三个候选版本，然后 LibreOffice 24.2 应该在 2 月初发布。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267911/libreoffice-24-2-alpha1</guid>
            <link>https://www.oschina.net/news/267911/libreoffice-24-2-alpha1</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【直播预告】替代 Oracle，我们还有多长的路要走？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="text-align:center"><img height="450" src="https://oscimg.oschina.net/oscnet/up-7cd126308d5a4478deb0afffc710879fd62.png" width="2400" referrerpolicy="no-referrer"></p><p>早在十多年前，就有了 「去 IOE 」 的提议。2008 年，时任阿里巴巴首席架构师的王坚提议，减少外国供应商，并用内部开发的设备和技术取而代之。</p><p>所谓减少外国供应商，主要就是要摆脱 IOE 系统——服务器 IBM，数据库软件 Oracle，存储设备 EMC，三者构成了一个从软件到硬件的企业数据库系统，几乎占领了全球大部分商用数据库系统市场份额。</p><p>原本，「去 IOE 」 只是阿里为了节省成本的一场技术革新。IBM 小型机价格从几十万到高达百万级人民币，与 Oracle 签订的数据库软件费用达数千万，还要再加上一大笔软硬件支付和一大笔维护费，维持 IOE 的成本太过高昂。</p><p>在我国频频遭遇外国技术封锁之后，「去 IOE 」 成为了软件行业自主可控的正面战场之一。在信创的推波助澜之下，国产化替代更是势不可挡。Oracle 数据库作为 IOE 的核心系统，国产化替代的进程到底如何呢？</p><p>要知道，替代 Oracle 并不是一蹴而就的事情。Oracle 在数据库领域的地位是建立在多年的技术积累和市场认可之上的。替代 Oracle 需要考虑到企业的具体需求、现有系统的迁移成本以及新技术的可行性和稳定性。同时，替代 Oracle 也需要面对数据迁移、应用兼容性、安全性和性能等方面的挑战。</p><p>11 月 29 日 19:00，OSCHINA 直播——【开源漫谈】第 6 期，将深入地聊一聊：替代 Oracle，我们还有多长的路要走？</p><p><strong>直播主题：替代 Oracle，我们还有多长的路要走？</strong></p><p style="text-align:left"><strong>直播时间：</strong>11 月 29 日（周三） 19:00-21:00</p><p style="text-align:left"><strong>直播平台：</strong>「OSC 开源社区」 视频号</p><p><strong>主办方：</strong>开源中国</p><p><strong>直播嘉宾：</strong></p><p><strong>马继超，瀚高售前总监</strong></p><p>现任浪潮集团瀚高基础软件股份有限公司售前总监，拥有近十年数据库技术经验和卓越售前经验。曾参与多个大型项目的实施，专注于深入洞察客户需求，精心为客户打造数据库个性化解决方案，并提供卓越的数据库产品和服务。以其对客户业务的深刻理解，助力客户实现卓越的业务目标。</p><p><strong>吴疆，拓数派产品社区负责人</strong></p><p>深耕云计算行业和数据库行业十余年，热衷于数据库技术的云原生化（数据库与云计算技术的深度融合），致力于云原生虚拟数仓 PieCloudDB 的产品推广。加入拓数派（Openpie）之前，就职于 Pivotal（现 VMWare）任职大数据平台 Greenplum 资深产品经理，并曾在 EMC 和 IBM 担任主管工程师，参与过多个大数据和云计算相关项目。毕业于清华大学计算机系，先后获得本科和研究生学位。</p><p><strong>赵向前，万里数据库平台产品</strong></p><p>万里数据库产品，有多年运营商、银行、政企、电网行业的数据库管理经验，Oracle OCM、MySQL OCP、 PGCP，目前负责万里数据库相关产品的功能统筹建设，通过投产项目运行数据分析，致力改进完善产品用户体验。</p><p><strong>直播话题：</strong></p><ul><li><p>当前数据库国产化进程情况如何？</p></li><li><p>替代 Oracle 的难点在哪里？（技术角度和非技术角度都谈一谈）</p></li><li><p>有哪些能够替代 Oracle 的国产数据库？优势在哪？不足之处在于？</p></li><li><p>现有国产数据库跟 Oracle 相比，有多大的差距？</p></li><li><p>国产数据库未来要怎么走？</p></li></ul><p><img height="2416" src="https://oscimg.oschina.net/oscnet/up-6aa123abfaaa251c29aeaf1fc62fc04df2a.png" width="750" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>直播福利</strong></p><ul><li><p style="margin-left:0; margin-right:0">互动抽奖：在直播评论区提问，被直播嘉宾回复的用户可获 OSC T 恤 1 件，名额不限。</p></li><li><p style="margin-left:0; margin-right:0">福袋抽奖：直播中将有多轮抽奖，参与就有机会获得 OSC T 恤、笔记本、马克杯 、前沿技术书籍等。</p></li></ul><p style="margin-left:0; margin-right:0"><img height="338" src="https://oscimg.oschina.net/oscnet/up-189c7f6fa386b87c3dda724a66c35fca104.jpg" width="600" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">我们直播间见吧～</p><hr><p style="text-align:left"><strong>另外，本次直播得到了诸多社区或组织的大力支持，在此特别表示感谢：</strong></p><p style="text-align:left"><strong>IvorySQL 开源数据库社区</strong></p><p style="text-align:left">IvorySQL 是由浪潮集团瀚高股份主导研发的一款开源的兼容 Oracle 的 PostgreSQL，致力于为企业和开发者提供一个高性能、可扩展和安全的 Oracle 替代最佳解决方案。</p><p style="text-align:left">IvorySQL 社区以安全、兼容、易用为特色，以链接开发者为核心，背后由数十年的全球 PostgreSQL 开发经验的资深专家和开发爱好者组成。</p><p style="text-align:left">自发布以来，IvorySQL 紧跟 PG 国际社区，快速进行版本迭代，保持与最新版本 PostgreSQL 数据库内核同步，累计发布 10 个版本，并兼容丰富的 PG 周边工具和扩展。推出包括 Package、层级查询、全局唯一索引、各种兼容函数和类型等 Oracle 兼容功能近百个。</p><p>官网链接：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ivorysql.org%2Fzh-cn%2F" target="_blank">https://www.ivorysql.org/zh-cn/</a></u></span></p><p style="text-align:left">社区仓库：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FIvorySQL%2FIvorySQL" target="_blank">https://github.com/IvorySQL/IvorySQL</a></u></span></p><p>&nbsp;</p><p><strong>GreatSQL 社区 </strong></p><p style="text-align:left">GreatSQL 社区成立于 2021 年，由万里数据库发起，致力于通过开放的社区合作，构建国内自主开源数据库版本及开源数据库技术，推动中国开源数据库及应用生态繁荣发展。GreatSQL 是适用于金融级应用的国内自主开源数据库，具备高性能、高可靠、高易用性、高安全等多个核心特性，可以作为 MySQL 或 Percona Server 的可选替换，用于线上生产环境，且完全免费并兼容 MySQL 或 Percona Server。</p><p style="text-align:left">官网链接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2F">https://greatsql.cn/</a></span></p><p>Gitee 仓库：<span style="color:#245bdb"><a href="https://gitee.com/GreatSQL">https://gitee.com/GreatSQL</a></span></p><p>&nbsp;</p><p><strong>拓数派（OpenPie）</strong></p><p>拓数派（OpenPie）是国内基础数据计算领域的高科技创新企业，与云上数据库和数据计算领域的引领者，自成立以来专注于数据计算领域，旗下大模型数据计算系统（PieDataComputingSystem, 缩写：πDataCS），以云原生技术重构数据存储和计算，一份存储，多引擎数据计算，让 AI 模型更大更快，全面升级大数据系统至大模型时代。</p><p>πDataCS 首款计算引擎 PieCloudDB 云原生虚拟数仓实现了分析型数据数仓上云虚拟化，将物理数仓整合，根据数据授权动态创建虚拟数仓，按需灵活计算，打破数据孤岛，支撑更大模型所需的数据和计算。在 PieCloudDB，存储和计算各自作为两个独立变量，各自在云里弹性伸缩，解决基于 PC 的传统 MPP 的缺陷，不仅可实现瞬间扩缩容。还支持用户对云中数据同时开启多个集群进行数据计算，并能持续将所有数据在云中存储，为已有的应用和未来的应用真正实现数据共享。PieCloudDB 目前提供社区版（免费下载），云上云版（免费试用），企业版，与一体机版本。</p><p>官网链接：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.openpie.com" target="_blank">www.openpie.com</a></p><p>社区公众号：PieCloudDB 技术派</p><p>&nbsp;</p><p><strong>重庆软件园</strong></p><p>重庆软件园位于重庆经开区，占地 110 万平方米，布局四大组团，是重庆市首批软件产业园 (综合型)、A 区入选重庆市软件和信息服务业「满天星」示范楼宇 (首批)，于 2019 年 9 月 16 日正式开园，坚持「做生态=做产业，做人才=做产业，做服务=做产业」的发展理念，建设集科技、人文、生态、智慧为一体的领军型软件园区。聚焦「3+2」产业布局，实现新一代信息技术产业集群发展。园区聚集软件类企业近 2000 家，软件人才近 3 万人，已登记 4000 多项软件著作权，研发投入超 50 亿，40 余项专利将获得科技奖，营收上亿企业近 20 家。立足南岸区、重庆经开区优质产业资源，聚焦软件信息服务业、智能制造、绿色环保 、汽车软件汽车电子、大健康等产业，推动软件产业高质量发展，重庆软件园将全面贯彻落实「满天星」计划，力争到 2026 年成功建成中国软件名园。</p><p>园区官网：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.chongqingpark.com" target="_blank">www.chongqingpark.com</a></p><p>&nbsp;</p><p style="text-align:left"><strong>渠成开源社区</strong></p><p style="text-align:left">渠成开源社区由禅道项目管理软件团队发起，社区的经营主体为青岛渠成开源计算机网络技术研究中心，是非营利性社会服务活动的社会组织。 渠成开源社区主要面向一线开源软件生产者、贡献者、组织者、赞助商和用户，以解决具体实际问题为宗旨，旨在打造以开源软件为核心纽带的开源生态系统，真正做到让每一个优秀的开源软件都能实现商业化。</p><p style="text-align:left">官网：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.qucheng.cc">www.qucheng.cc</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>爱可生开源社区</strong></p><p style="text-align:left">爱可生开源社区，一个有深度的 MySQL 开源社区。社区成立于 2017 年，以开源高质量的运维工具、日常分享技术干货内容、数据库技术布道为己任；目前开源的产品有：SQL 审核工具 SQLE、分布式中间件 DBLE 和数据传输组件 DTLE。在这里，你将收获：高质量的技术内容，企业级数据库工具及服务，丰富的社区活动。</p><p style="text-align:left">链接： <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensource.actionsky.com%2F">https://opensource.actionsky.com/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>AllData</strong></p><p style="text-align:left">AllData 大数据产品是可定义数据中台，以数据平台为底座，以数据中台为桥梁，以机器学习平台，GPT 平台为框架，提供全链路数字化解决方案。</p><p style="text-align:left">项目地址：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falldatacenter%2Falldata">https://github.com/alldatacenter/alldata</a></span></p><p style="text-align:left">社区官网：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Falldata.readthedocs.io%2Fzh%2Fmaster%2F">https://alldata.readthedocs.io/zh/master/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>东方瑞通 </strong></p><p style="text-align:left">东方瑞通成立于 1998 年，是国内较早的 IT 高级技术培训企业之一，拥有华为、红帽、微软、PMI、VMware、Oracle 等 33 余家国际厂商授权资质，以培养 it 人才为主，目前覆盖领域：虚拟化、操作系统、网络、安全、数据库、IT 管理、软件开发等细分领域，提供线上，线下交流培训课程与活动。</p><p style="text-align:left">官网链接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.easthome.com" target="_blank">www.easthome.co</a></span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.easthome.com" target="_blank"><span style="color:#245bdb">m</span></a></p><p>&nbsp;</p><p style="text-align:left"><strong>秦派软件</strong></p><p style="text-align:left">北京秦派软件科技有限公司 (Pulsarware® Technologies Ltd.) 是一家致力于开发生产力工具软件的技术公司，成立之初立志要在工具软件领域深耕，践行精益求精的研发精神，努力推出优质的生产力工具软件服务国内外的开发者，提升开发者的工作效率，同时创造出商业价值和社会价值。</p><p style="text-align:left">ATOMDB™ 数据库管理客户端是秦派软件研发的一款服务广大开发者的工具软件。可以让开发者方便地执行查询，创建和管理数据库，支持管理市场上主流的数据库管理系统。例如： TIDB, PolarDB, GreatDB, 人大金仓，神舟通用，TDengine, MySQL, PostgreSQL, Microsoft SQL Server, Oracle 等等。软件设计支持 Windows、MacOS、Linux 等操作系统，软件采用插件扩展的方式对多数据库进行支持。</p><p style="text-align:left">官网链接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fatomdb.com" target="_blank">atomdb.com</a></span></p><p>&nbsp;</p><p><strong>墨天轮</strong></p><p>墨天轮是中国专业的数据技术社区，创建于 2019 年，目前已覆盖国内 40 万数据库相关从业人员。其围绕数据人的学习成长提供一站式的全面服务，打造集新闻资讯、技术文章、在线问答、活动直播、视频课程、文档阅览、在线运维等为一体的门户网站。墨天轮致力于在新时代下打造更具创新性的学习形态、构建完整的数据知识体系，共同建设一个有温度的技术社区和全新的数据社群聚合体。</p><p>链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2F" target="_blank">https://www.modb.pro/</a></p><p>&nbsp;</p><p><strong>示说</strong></p><p>示说是音视频互动社交 SaaS 平台,提供一站式的自动化营销和数据分析服务,专注赋能企业在垂直领域建立产品的用户生态,成为行业用户、社区互动和分享的专业平台。</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.slidestalk.com%2F" target="_blank">https://www.slidestalk.com/</a></p><p>&nbsp;</p><p><strong>盛见开源社区</strong></p><p>盛见开源社区是由盛见团队的开源项目作者、贡献者、维护者共同组成的开源社区，提供开源的区块链框架、区块链钱包、区块链监控等系列开源产品及解决方案，专注区块链内核模块化和数字资产金融衍生品。 同时还进行开源技术内容发布、开源赛事参与、开源项目共创等开源活动。</p><p>官网: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.shengjian.net" target="_blank">https://www.shengjian.net</a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10150339</guid>
            <link>https://my.oschina.net/u/3859945/blog/10150339</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenTiny Vue 开源组件库突破 1000 Star]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>你好，我是 Kagol。</p><p>今天是感恩节，我们怀着无比激动的心情，庆祝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 达到 1000 Star ⭐</p><p>感谢所有支持 OpenTiny 开源社区的朋友们！</p><p><img src="https://oscimg.oschina.net/oscnet/up-1992757ee39875aabd70bc8e9d462a970eb.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-87db039989ef9101d4011633ea25be16749.jpg" alt="" referrerpolicy="no-referrer"></p><p>2023 年 2 月 16 日，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 正式开源。</p><p>和业界组件库相比，<code>OpenTiny Vue</code> 最大的特色就是使用 Renderless 无渲染组件设计架构，实现了一套代码同时支持 Vue2 / Vue3 / React，支持 PC / Mobile 端，并支持<code>函数级别的逻辑定制</code>和<code>全模板替换</code>，灵活性好、二次开发能力强。</p><p>我们拥有更丰富的组件，目前组件数量已经超过 100 个，除了业界常见组件之外，我们还提供了一些独有的特色组件，如：Split 面板分割器、IpAddress IP 地址输入框、Calendar 日历、Crop 图片裁切等。</p><p>经过 9 个多月的持续打磨，我们发布了 6 个大版本，支持了更加丰富的特性，能力更强、体验更好。</p><ul><li>完成 Monorepo 和 TypeScript 工程改造</li><li>支持 Vue2.7</li><li>支持 VitePress 服务端渲染</li><li>官网提供 Composition API 写法的示例</li><li>提供 Playground 代码演练场</li><li>提供 XDesign / Aurora / Infinite 3 套新主题</li><li>增加 RichTextEditor / ColorPicker / Anchor / Guide 等 13 个新组件</li></ul><p>开源不易，请给 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">OpenTiny Vue</a> 点个 Star ⭐ 鼓励下，感谢你对我们 OpenTiny 的大力支持🌹</p><p>源码：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><h2>1 围绕开发者需求，不断完善自身能力</h2><p>开源的 9 个多月以来，我们收到了非常多友好、耐心的开发者的反馈，这些宝贵的反馈意见对于我们优化 TinyVue 组件库，打造真正有竞争力的开源项目提供了非常大的帮助，感谢所有耐心地给我们 TinyVue 提交 Issue 的开发者们🌹</p><h3>1.1 Monorepo 和 TypeScript 工程改造</h3><p>今年 2 月份刚开源时，我们的项目结构还不是 Monorepo 工程，整个组件库分成了 4 个仓库：</p><ul><li>tiny-vue // 组件模板</li><li>tiny-vue-renderless // 组件逻辑</li><li>tiny-theme // PC 端组件样式</li><li>tiny-theme-mobile // 移动端组件样式</li></ul><p>这样会带来以下问题：</p><ol><li>第一次 clone 代码比较麻烦，需要 clone 4 个仓库的代码</li><li>clone 完代码之后，还需要切换 develop 分支 4 次，npm i 安装 4 次依赖包</li><li>这 4 个工程安装的依赖包如果有重复的，会在各自的工程目录下安装多次，导致更多的磁盘空间占用</li><li>增加新组件或给组件增加新特性，一般都会涉及模板/逻辑/样式的同时修改，提交 MR 时需要在三个仓库都提交一个 MR，不太方便</li><li>填写 MR 的描述信息时也需要在多个仓库填写多次</li><li>检视 MR 是也需要在多个仓库进行检视、提交检视意见，比较分散</li></ol><p>由于我们是一个开源项目，希望能够团结社区开发者一起共同建设，肯定希望大家参与贡献的门槛尽可能降低，贡献的体验尽可能流畅，所以我们在 3 月份对项目进行了一次大改造，将原来分散在 4 个代码仓库的代码集中到一个仓库，通过 Monorepo 方式进行管理。除此之外，我们还将原来的 JavaScript 工程改造成了 TypeScript 工程，并在持续补充组件的 TypeScript 类型声明。</p><blockquote><p>目前组件 TypeScript 类型声明还未全部补充完，欢迎朋友们一起参与贡献。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></p></blockquote><h3>1.2 支持 Vue 2.7</h3><p>说来惭愧，支持 Vue 2.7 的诉求从今年 4 月份就有人提 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F141" target="_blank">#141</a>，我们在最近的大版本 v2.11.0 才正式支持。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7291598231954653240" target="_blank">OpenTiny Vue 支持 Vue2.7 啦！</a></p><p>Vue2.7 是升级 Vue3 的一个过渡版本，支持了 Composition API 写法，相较于 Vue2.6 差异较大，并且目前是 Vue 2.x 的默认版本，在 Vue2 项目中默认会安装 Vue 2.7.x，这时安装和使用 TinyVue v2.x 版本，项目会报错。</p><p>v2.11.0 版本之后将不再有这个问题，欢迎还在使用 Vue2 的朋友们体验和使用。</p><h3>1.3 官网提供 Composition API 写法的示例</h3><p>TinyVue 是一个能同时支持 Vue2 和 Vue3 的组件库，但是之前我们官网的组件 Demo 只有 Options API 的版本，使用 Vue3 的开发者会觉得很不方便，拷贝 Demo 代码之后还需要手动转换成 Composition API 的写法。</p><p>于是我们优化了文档的呈现，参考 Vue 官网，增加了 Options(选项式) 和 Composition(组合式) 两种写法的切换。</p><p><img src="https://oscimg.oschina.net/oscnet/up-11b40155bd5aad12b5a1a5c253fbbdb557a.png" alt="" referrerpolicy="no-referrer"></p><p>欢迎朋友们到我们官网体验：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.4 提供 Playground 代码演练场</h3><p>早期我们的组件 Demo 代码是可以直接在页面上编辑，然后查看组件渲染效果的，但是编辑之后的代码没法通过链接形式分享出来。</p><p>我们缺少代码演练场功能，这个问题 4 月份就有朋友提 Issue <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F182" target="_blank">#182</a>，8 月初，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmengqiuleo" target="_blank">xiaoy</a> 同学给我们贡献了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue-playground" target="_blank">TinyVue Playground</a> 项目。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7262349502920523833" target="_blank">但因热爱，愿迎万难，OpenTiny 社区增加一枚前端程序媛贡献者🎉</a></p><p>我们将这个项目集成到了 TinyVue 的官网，现在你可以在每个组件 Demo 的右上角点击「打开演练场」的按钮，在演练场中编辑这个 Demo，实时查看修改后的组件效果，并通过链接形式分享出去。</p><p>这样提交 Issue 时，可以在 Playground 中实现最小可复现 Demo，并将链接贴到 Issue 描述中，大大降低了沟通成本，提升了缺陷修复的效率。</p><h3>1.5 四套主题，总有一套是你喜欢的</h3><p>为了满足不同业务的需求，我们内置了四套主题，大家可以挑选自己喜欢的一款，如果这四套主题依然没有一款能完全符合自己的要求，你也可以基于现有主题，修改部分主题变量，扩展出一套自己的主题，或者从 0 到 1 自定义一套主题，都是可以的。</p><p>具体如何自定义主题，可以参考以下文章：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7235603140262838329%23heading-21" target="_blank">自定义 TinyVue 主题</a></p><p><img src="https://oscimg.oschina.net/oscnet/up-84297e83aea2a488ad2f6698221e7bdfcd9.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p>温馨提醒：主题切换入口在组件页面右上角</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-381625d2749f199ea19c0f6a5dc6e0ab035.png" alt="" referrerpolicy="no-referrer"></p><p>欢迎朋友们在 TinyVue 官网体验不同主题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.6 更加丰富的组件</h3><p>有很多开发者在 Issue 给我们提出新组件的诉求，经过仔细评估，我们实现了其中一部分通用的组件。</p><ul><li>Anchor 锚点 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenxi-20" target="_blank">@chenxi-20</a></li><li>CalendarView 日历视图 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol" target="_blank">@kagol</a></li><li>ColorPicker 颜色选择器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>ConfigProvider 全局设置 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>Divider 分隔线 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvaebe" target="_blank">@vaebe</a></li><li>Drawer 抽屉 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHuangyilin19" target="_blank">@Huangyilin19</a></li><li>Guide 引导 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyuanningning" target="_blank">@yuanningning</a></li><li>PopConfirm 确认框 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgimmyhehe" target="_blank">@gimmyhehe</a></li><li>RichTextEditor 富文本编辑器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FCaesar-ch" target="_blank">Caesar-ch</a></li><li>...</li></ul><p>还有好多组件未实现，欢迎感兴趣的朋友们一起参与共建！</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到顶部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 标签输入框</li><li>LoadingBar 加载进度条 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 对话组件</li><li>IpSection 分段 IP 输入框</li><li>Video 视频播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思维导图 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程设计器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>如果你想参与 TinyVue 项目贡献，可以在对应的 Issue 下评论认领，并仔细阅读我们的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">贡献指南</a>。</p><h2>2 酒香也怕巷子深呐</h2><p>俗话说：酒香不怕巷子深，但是在前端组件库开源方面可能不太适用，近几年开源的前端组件库越来越多，这其实是一件好事，百花齐放，前端人也有更多的选择。</p><p>但是不熟悉这些组件库的开发者会觉得这些组件库好像都差不多，何必又要重复造轮子呢？</p><p>因此有必要做一些宣传，让大家了解 TinyVue 组件库的核心设计理念，TinyVue 与其他组件库的不同，有什么竞争优势。</p><h3>2.1 开发者大会</h3><p>从今年 4 月份开始，OpenTiny 参加了 17 场开发者大会、开源峰会、高校行活动，包括：</p><ul><li>5.13 重庆的开源未来发展峰会</li><li>5.27 上海的 GOTC</li><li>6.11 北京的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7242676549735776314" target="_blank">开放原子全球峰会</a></li><li>⭐ 7.7 东莞的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7255138771985219639" target="_blank">HDC 大会</a></li><li>9.20 上海的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7287473826061189181" target="_blank">HC 大会</a></li><li>9.26 上海的 KubeCon China</li><li>10.24 长沙的中国程序员节</li><li>10.28 成都的中国开源年会</li><li>...</li></ul><p>通过在大会分享议题，我们能将 TinyVue 的理念传递给广泛的开发者； 通过展台互动，我们可以近距离与开发者互动，给大家分享 OpenTiny 的独特优势，倾听开发者的声音，了解用户的痛点问题； 通过编程训练营，可以带着开发者一起体验 TinyVue 组件，快速搭建 Web 应用。</p><p>值得一提的是，7 月份在东莞华为溪村的 HDC 大会真是一场开发者的盛宴，各种开发者活动非常丰富，只要你有心，可以学到很多技术知识，认识超多业界大佬，哪怕只是去「欧洲小镇」逛一圈，我觉得也是非常值得推荐的。</p><p>虽然那几天天气很热，也很累，但是却是非常难忘的一段经历，OpenTiny 有演讲议题、展台、训练营和挑战赛，参加人数都非常多，开发者们都很活跃。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09a594762462062dd5c2c95967aae95f29b.png" alt="" referrerpolicy="no-referrer"></p><p>非常高兴，TinyVue 也是在 HDC 大会上正式进行发布！</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7254020450160934973" target="_blank">OpenTiny 前端组件库正式开源啦！面向未来，为开发者而生</a></p><p>大家可以关注 <code>OpenTiny</code> 公众号，随时掌握 OpenTiny 最新活动动态。</p><h3>2.2 直播</h3><p>除了线下开发者大会之外，线上直播也是一种向开发者传递项目价值的方式，今年共做了 8 次直播。</p><ul><li>华为云 DTT 直播 2 次</li><li>与前端知名 UP 主前端杨村长联合直播 3 次</li><li>与 ToB Dev / Dooring 低代码联合直播 1 次</li><li>受邀参加中国开源社区 landscape 直播分享 1 次</li><li>自主策划 TinyEngine 线上答疑 1 次</li></ul><p>大家感兴趣可以关注 OpenTiny 的 B 站账号，我们会将直播的录播视频上传上去。</p><p>OpenTiny B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><h3>2.3 写文章</h3><p>相比参加开发者大会和组织直播活动，写文章相对比较容易，并且写文章能够更加全面、细致地传递开源项目价值，也是一种细水长流的传播方式，门槛相对也比较低，几乎任何人都可以做。</p><p>不过写文章并不是一件容易的事，从 4 月份我们发布第一篇 OpenTiny 的宣传文章至今，共发布了 75 篇文章，平均每周 2 篇。</p><p>主要发布在 OpenTiny 公众号、掘金、开源中国等平台，累计阅读量超过 50 万。</p><p>另外我们也和多位前端 KOL 建立合作关系，如：前端早读课、前端迷、一飞开源、前端之巅、前端进阶之旅、高级前端进阶、村长学前端、前端大班车、code 秘密花园、、技术胖学程序、若川视野、前端帮、前端 Q、大厂杂谈、LowCode 低码时代、华为开源、OSC 开源、ITPUB、前端开源星球、前端前沿技术等，感谢前辈们的提携！</p><p>开源不易，写文章也不易，推荐朋友们关注以上大佬们的公众号，也给我们 TinyVue 开源项目点个 Star 鼓励下🌹</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><p>感谢朋友们对 TinyVue 的支持！</p><p>如果你有一个开源项目，千万不能抱着酒香不怕巷子深的观念，而是积极主动地走出去，接触广大的开发者，不断对外宣传你的开源项目的价值和核心优势，让大家了解你的开源项目，让大家评判你的开源项目，让大家使用你的开源项目。</p><h2>3 规划</h2><p>2024 年我们将继续根据用户需求优化组件库。</p><p>一方面继续完善组件库能力，提供更多实用组件和特性，满足更广泛的业务场景；</p><p>另一方面持续优化组件库工程架构和质量，完善组件的 TypeScript 类型声明、E2E 测试用例、单元测试用例。</p><p>以下是我们 2024 年的规划。</p><h3>3.1 新特性</h3><p>根据用户提交的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues" target="_blank">Issue</a> 持续修复组件缺陷、完善组件能力。</p><p>新组件：</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到顶部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 标签输入框</li><li>LoadingBar 加载进度条 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 对话组件</li><li>IpSection 分段 IP 输入框</li><li>Video 视频播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思维导图 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程设计器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>新特性：</p><ul><li>支持 Nuxt3 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F577" target="_blank">#577</a></li><li>支持 unplugin-vue-components <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F304" target="_blank">#304</a></li><li>支持深色主题 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F415" target="_blank">#415</a></li><li>Tree 支持虚拟滚动 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F256" target="_blank">#256</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F317" target="_blank">#317</a></li><li>RichTextEditor 富文本组件功能增强</li><li>CalendarView 组件功能增强</li></ul><h3>3.2 工程优化</h3><p>工程优化的目的是提升质量和效率，主要包含以下几个方面：</p><ul><li>完善组件的 TypeScript 类型声明 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></li><li>优化组件的 Demo/API 文档 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F484" target="_blank">#484</a></li><li>完善 E2E 测试用例</li><li>完善单元测试用例 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F206" target="_blank">#206</a></li><li>Grid 组件抽离 renderless 逻辑层</li></ul><h2>3.3 生态扩展</h2><p>2023 年我们完成了 TinyReact 组件库的基础适配，包括基础版本的 React 适配层、本地开发和部署流程，提供了 Button / Alert / Switch / Badge 4 个组件，并发布第一个 alpha 版本。</p><p>2024 年我们将持续扩展组件库生态，主要包含：</p><ul><li>持续完善 TinyReact 组件库，完善 react-common 适配层，增加更丰富的组件模板</li><li>适配 <a href="https://gitee.com/openInula/inula">openInula</a> 框架，增加 inula-common 适配层</li><li>完善移动端组件库并部署官网，为 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-engine" target="_blank">TinyEngine</a> 低代码引擎提供移动端组件物料</li><li>探索和扩展 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsolidjs%2Fsolid" target="_blank">Solid</a> / <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsveltejs%2Fsvelte" target="_blank">Svelte</a> 等新兴框架的组件库</li></ul><p>欢迎广发开发者朋友一起参与 TinyVue 开源共建！</p><p>如果你有意向参与 TinyVue 开源贡献，请在对应的 Issue 下面评论，并在参与贡献之前阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">贡献指南</a></p><p>最后，再一次感谢所有支持 TinyVue 的朋友们！</p><p><img src="https://oscimg.oschina.net/oscnet/up-7528c4a9c1dd5436bad2907842bfc87e831.png" alt="" referrerpolicy="no-referrer"></p><h2>联系我们</h2><p>GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a>（欢迎 Star ⭐）</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">https://opentiny.design/tiny-vue</a></p><p>B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><p>公众号：OpenTiny</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/10150927</guid>
            <link>https://my.oschina.net/u/4863191/blog/10150927</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust Web 框架 Rocket 发布 v0.5：支持异步、SSE、WebSockets 等]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>历经四年多，四个 RC 版本、一千次 commit、一千多个 issue、讨论和 PR 之后，<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frocket.rs%2Fv0.5%2Fnews%2F2023-11-17-version-0.5%2F" target="_blank">Rocket v0.5 正式发布了</a></u></strong>。</p><blockquote><p>Rocket 是支持异步的后端 Rust Web 框架，专注于可用性、安全性、可扩展性和性能。它使编写安全的 Web 应用程序变得简单，而不会牺牲生产力或性能。</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-749db50b650e7b26e57cb9b7f418e05b004.png" referrerpolicy="no-referrer"></p><p>Rocket v0.5 部分重要新功能包括：</p><ol><li><p><strong>支持稳定的 Rust 编译器</strong>：Rocket v0.5 基于 Rust 稳定版本进行编译和构建，开发者现在可以使用稳定发布通道中的<code>rustc</code>编译和构建 Rocket 应用程序，不再需要使用<code>#![feature(..)]</code>crate<strong>&nbsp;</strong>属性。<br> &nbsp;</p><pre><code>#[macro_use] extern crate rocket;

#[get("/&lt;name&gt;/&lt;age&gt;")]
fn hello(name: &amp;str, age: u8) -&gt; String {
    format!("Hello, {} year old named {}!", age, name)
}

#[launch]
fn rocket() -&gt; _ {
    rocket::build().mount("/hello", routes![hello])
}</code></pre><p>&nbsp;</p></li><li><p><strong>支持异步 I/O</strong>：Rocket v0.5 重新构建了核心请求处理部分，利用了 Rust 中最新的异步网络功能。Rocket 现在可以自动在机器上的所有可用核心上多路复用请求处理，使路由处理程序可以声明为异步并使用 await 语法。<br> &nbsp;</p><pre><code>use rocket::tokio;
use rocket::data::{Data, ToByteUnit};

#[post("/debug", data = "&lt;data&gt;")]
async fn debug(data: Data&lt;'_&gt;) -&gt; std::io::Result&lt;()&gt; {
    // Stream at most 512KiB all of the body data to stdout.
    data.open(512.kibibytes())
        .stream_to(tokio::io::stdout())
        .await?;

    Ok(())
}</code></pre><p>&nbsp;</p></li><li><p><strong>支持 Sentinels</strong>：Rocket v0.5 引入了 Sentinels，这是 Rocket 框架独有的功能。Sentinels 提供了一种自动的最后防线，可以在出现无效条件时中止应用程序的启动。Sentinels 可以在 Rocket 之外实现，并且应该尽可能地使用它们。<br> &nbsp;</p><pre><code>use rocket::{Rocket, Ignite, Sentinel};

impl Sentinel for MyResponder {
    fn abort(r: &amp;Rocket&lt;Ignite&gt;) -&gt; bool {
        r.state::&lt;T&gt;().is_none() || !r.catchers().any(|c| c.code == Some(400))
    }
}</code></pre><p>&nbsp;</p></li><li><p><strong>支持流和 SSE</strong>：Rocket v0.5 引入了实时的、类型化的异步流。Rocket 的新异步流部分包含了更多详细信息，我们鼓励所有感兴趣的人查看新的实时、多房间聊天示例。</p></li><li><p><strong>支持 WebSockets</strong>：Rocket v0.5 通过新的升级 API 引入了对 HTTP 连接升级的支持。这个 API 允许响应器在现有的 HTTP 连接中控制与客户端的原始 I/O，从而允许将 HTTP 连接升级到任何协议，包括 WebSockets。</p></li><li><p><strong>全面的表单功能支持</strong>：Rocket v0.5 完全改进了表单支持，支持多部分上传、任意嵌套的集合、即时验证等。Rocket 的新表单协议允许应用程序表达任何结构，任意嵌套和集合，无需任何自定义代码。</p></li></ol><p>除了上述功能之外，Rocket v0.5 还引入了其他 40 多个新功能和重大改进，包括安全和隐私头、优雅的关闭、灵活的配置系统、类型系统强制的数据限制等。</p><p>Rocket v0.5 的发布是一个重要的里程碑，为 Rust 开发者提供了一个强大而易用的 Web 框架。我们鼓励所有用户升级到 Rocket v0.5，并<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frwf2%2FRocket%2Fblob%2Fv0.5.0%2FCHANGELOG.md" target="_blank">查看完整的 CHANGELOG</a></u>以了解所有新功能和改进。</p><p>请注意，Rocket v0.4 仍然会得到支持和安全更新，直到 Rocket v0.6 发布为止。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 11:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267838/rocketrs-0-5-released</guid>
            <link>https://www.oschina.net/news/267838/rocketrs-0-5-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Git 2.43 值得关注的新特性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Git 发布了最新版本 2.43，新增了许多改进和新功能。</p><p>以下是 Git 2.43 的部分亮点：</p><ol><li><p><strong><code>git repack</code>的新功能</strong>：在 Git 2.43 中，git repack 学会了一些新技巧。git repack 用于重新组织仓库中的 pack 文件。在这个版本中，git repack 支持使用多个 cruft pack，并且可以通过对象过滤器将仓库的内容拆分为多个部分。</p></li><li><p><strong>多 cruft pack</strong>：在过去，Git 将无法访问的对象存储在单个 cruft pack 中。但是，这样做会导致在每次重新打包操作时都需要重写整个 cruft pack，从而浪费大量的 I/O 时间。在 Git 2.43 中，引入了对多个 cruft pack 的本地支持，可以将无法访问的对象拆分为多个 pack，从而提高性能。</p></li><li><p><strong>使用对象过滤器拆分仓库</strong>：Git 的「partial clone」机制允许在包含有限对象子集的仓库中进行交互。在 Git 2.43 中，git repack 学会了使用对象过滤器规范重新打包仓库，并可以选择将过滤后的对象移动到其他位置。这使得可以根据需要轻松地过滤和移除不需要的对象。</p></li><li><p><strong>针对 revert 多次回滚的改进</strong>：在过去的 Git 版本中，当多次回滚时，每次回滚都会在提交消息中添加"Revert"，导致提交消息变得冗长。在 Git 2.43 中，Git 意识到进行多次回滚时，会生成更简洁的提交消息。</p></li></ol><p>详情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.blog%2F2023-11-20-highlights-from-git-2-43%2F" target="_blank">https://github.blog/2023-11-20-highlights-from-git-2-43/</a></u></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 22 Nov 2023 10:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267835/git-2-43-highlights</guid>
            <link>https://www.oschina.net/news/267835/git-2-43-highlights</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
