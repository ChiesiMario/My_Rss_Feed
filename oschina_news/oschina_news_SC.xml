<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 07 Feb 2024 11:57:44 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[开源大模型 MaLA-500 发布，支持 534 种语言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>大语言模型推进了自然语言处理的最先进水平。然而，它们的主要设计针对英语或有限的一组语言，这在它们对资源匮乏的语言的有效性方面造成了巨大的差距。为了弥补这一差距，慕尼黑大学、赫尔辛基大学等研究人员联合开源了 MaLA-500，旨在涵盖广泛的 534 种语言。</p><p>MaLA-500 基于 LLaMA 2 7B 构建，再用多语言数据集 Glot500-c 进行语言扩展训练。研究人员在 SIB-200 上的实验结果表明，MaLA-500 已经实现了最先进的上下文学习结果。</p><p>Glot500-c 包含了 534 种语言，涵盖 47 种不同种族语言，数据量高达 2 万亿 tokens。研究人员表示，选择 Glot500-c 数据集的原因在于可以大幅扩展现有语言模型的语言覆盖范围，幷包含极其丰富的语言家族，这对于模型学习语言内在的语法和语义规律帮助巨大。</p><p>此外，虽然一些高资源语言的比例相对较低，但 Glot500-c 的整体数据量对训练大规模语言模型而言足够用。在后续的预处理中，又对语料数据集进行了加权随机采样，以增加低资源语言在训练数据中的比例，让模型更加聚焦特定语言。</p><p>在 LLaMA 2-7B 基础之上，MaLA-500 进行了两大技术点创新：</p><ul><li>增强词汇表，研究人员通过 Glot500-c 数据集，训练了一个多语言分词器,将 LLaMA 2 的原英文词汇表扩展到了 260 万,大幅增强了模型对非英语和低资源语言的适配能力。</li></ul><p><img height="239" src="https://oscimg.oschina.net/oscnet/up-65dfc2043cc510a65d1d610f0206a22f682.png" width="500" referrerpolicy="no-referrer"></p><ul><li>模型增强，使用了 LoRA 技术在 LLaMA 2 的基础上进行低秩适配。只训练适配矩阵而冻结基础模型权重,可以高效地实现模型在新语言上的持续学习能力，同时保留模型原有的知识。</li></ul><p><strong>训练流程</strong></p><p>训练方面，研究人员用了 24 张 N 卡 A100 GPU 进行训练，并使用了包括 Transformers、PEFT 和 DeepSpeed 三个主流深度学习框架。</p><p>其中,DeepSpeed 提供了分布式训练的支持,可以实现模型并行;PEFT 实现了高效的模型微调;Transformers 提供了模型功能的实现，例如，文本生成、提示词理解等。</p><p>为了提升训练的高效性，MaLA-500 还使用了各种显存和计算优化算法,如 ZeRO 冗余优化器,可最大化利用 GPU 算力资源;以及混合精度训练的 bfloat16 数格式加速训练流程。</p><p>此外，研究人员还对模型参数进行了大量优化，使用了学习率为 2e-4 的常规 SGD 训练,并使用了 0.01 的 L2 权重衰减以防止模型过大，出现过拟合、内容输出不稳定等情况。</p><p><img height="311" src="https://oscimg.oschina.net/oscnet/up-7b3116b3510c14535988e1d4be7f8f894de.png" width="500" referrerpolicy="no-referrer"></p><p>为了测试 MaLA-500 的性能，研究人员在 SIB-200 等数据集上进行了综合实验。</p><p>结果显示，相比原始 LLaMA 2 模型,MaLA-500 在主题分类等评测任务上的准确率提高了 12.16%，这说明 MaLA-500 的多语言优于，现有的众多开源大语言模型。</p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2401.13303" target="_blank">查看完整论文</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 07 Feb 2024 08:34:55 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278159/mala-500</guid>
            <link>https://www.oschina.net/news/278159/mala-500</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国信通院牵头制定的软件安全相关团体标准正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2024 年 1 月 29 日，由中国信息通信研究院（简称「中国信通院」）牵头制定的软件安全相关团体标准《软件安全开发能力评估技术规范》（标准编号 T/ISC 0042—2024）、《软件代码自主率测评方法》（标准编号 T/ISC 0043—2024）、《软件供应链安全要求》（标准编号 T/ISC 0044—2024）正式批准发布。软件安全相关团体标准于 2023 年 4 月在中国互联网协会申请立项，由中国信通院数字安全护航计划组织起草，20 余家单位共同参与编制。</span></p><p><img height="261" src="https://oscimg.oschina.net/oscnet/up-b15b7a689662f2766fa48f6093db349fd46.png" width="500" referrerpolicy="no-referrer"></p><p><span>软件安全相关团体标准围绕软件及应用安全开发体系在不同等级中的实践活动要求、对软件和应用产品代码自主率的技术要求、对自身的软件供应链安全的建设、评估和改进三个方面进行编写。主要提出三大核心内容：</span></p><p><strong>0</strong><strong>1&nbsp;</strong><span><strong><strong>软件安全开发能力成熟度模型 (SSDCMM)</strong></strong></span></p><p style="margin-left:0; margin-right:0"><span>模型分别由安全能力维度、能力成熟度等级维度、安全开发过程维度三个维度组成，覆盖需求、设计、编码、测试、部署/发布、运维全生命周期开发阶段，以业务安全和信息安全为出发点，通过对流程、制度、规范的梳理，以及开展相关人员安全意识的培训、威胁资源库、安全测试资源库等相关资源的建设，充分保障业务系统满足业务安全和信息安全的需求，有效提升软件开发团队的安全意识和安全开发能力，做到信息安全的「早预防、早发现、早响应」，实现安全左移。</span></p><p><strong>0</strong><strong>2&nbsp;</strong><strong><strong>代码自主率检测方法</strong></strong></p><p style="margin-left:0; margin-right:0"><span>代码自主率反映了软件产品的自主创新能力和知识产权保护程度。一般来说，代码自主率越高，软件产品越具有竞争优势和市场价值。基于此，我们将代码自主率的技术要求以及检测方法写入标准，帮助软件开发企业开展软件和应用产品代码自主率的检测评价工作，减少对开源源代码和组件的依赖，提升自主率，实现自主可控。</span></p><p><strong>0</strong><strong>3 软件供应链安全体系模型</strong></p><p style="margin-left:0; margin-right:0"><span>体系主要包括安全管理和安全技术两部分，以管理和技术两个方面实现对软件供应链生命周期的把控，通过开展代码评审、代码检测、代码走查等方式，识别并修复源代码安全漏洞，通过建立漏洞库，持续对漏洞进行管理和整改来规范开源组件的使用，从而保障软件供应链的安全性。</span></p><p style="margin-left:0; margin-right:0"><img height="231" src="https://oscimg.oschina.net/oscnet/up-ab2bac204c1beec0a21235dc018ce848119.png" width="500" referrerpolicy="no-referrer"></p><p><span>2024 年，中国信通院数字安全护航计划将继续推动软件安全相关标准评估体系的建设与完善，重点任务包括：启动软件安全开发、代码自主率等评估测试工作，推进标准体系中其他部分的发布与实施等。旨在帮助企业提升安全意识，制定合理的安全体系，从而提升软件质量。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 07 Feb 2024 07:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278154</guid>
            <link>https://www.oschina.net/news/278154</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Paperless-ngx —— 开源文档管理系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong style="color:rgba(0, 0, 0, 0.87)">Paperless-ngx&nbsp;</strong>是一个社区支持的开源文档管理系统，可将你的物理文档转换为可搜索的在线档案，从而减少纸张的使用。<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.87)">该软件旨在使「无纸化」变得更容易。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.87)"><img alt="" height="426" src="https://static.oschina.net/uploads/space/2023/1008/142413_X44B_4252687.png" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.87)">特性</span></strong></p><ul><li>使用标签、通讯录、类型等组织和索引扫描的文档。</li><li>对你的文档执行 OCR，将可选择的文本添加到仅图像文档中，并向你的文档添加标签、通讯录和文档类型。</li><li>支持 PDF 文档、图像、纯文本文件和 Office 文档（Word、Excel、Powerpoint 和 LibreOffice 等效项）。
<ul><li>Office 文档支持是可选的，由 Apache Tika 提供（参阅<a href="https://docs.paperless-ngx.com/configuration/#tika">配置</a>）</li></ul></li><li>无纸化将你的文档直接存储在磁盘上。文件名和文件夹采用无纸化管理，格式可自由配置。</li><li>单页应用程序前端。
<ul><li>包括一个显示基本统计数据并具有文档上传功能的仪表板。</li><li>按标签、通讯录、类型等进行过滤。</li><li>可以保存自定义视图并将其显示在仪表板上。</li></ul></li><li>全文搜索可帮助你找到所需内容。
<ul><li>自动完成会建议文档中的相关单词。</li><li>结果按与你的搜索查询的相关性排序。</li><li>突出显示可以显示文档的哪些部分与查询匹配。</li><li>搜索类似文档（「更多类似内容」）</li></ul></li><li>电子邮件处理：无纸化添加来自你的电子邮件帐户的文档。
<ul><li>配置多个帐户并为每个帐户配置过滤器。</li><li>从邮件添加文档时，无纸化可以将这些邮件移动到新文件夹、将其标记为已读、将其标记为重要或将其删除。</li></ul></li><li>机器学习驱动的文档匹配。
<ul><li>Paperless-ngx 会从你的文档中学习，一旦你以无纸化方式存储了一些文档，它就能够自动为文档分配标签、通讯录和类型。</li></ul></li><li>针对多核系统进行了优化：Paperless-ngx 并行使用多个文档。</li><li>集成的完整性检查器可确保你的文档存档状况良好。</li><li><a href="https://docs.paperless-ngx.com/#screenshots">文档中提供了更多屏幕截图</a>。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 07 Feb 2024 06:28:20 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/paperless-ngx</guid>
            <link>https://www.oschina.net/p/paperless-ngx</link>
        </item>
        <item>
            <title>
                <![CDATA[超越 MyBatis 的 ORM 框架 dbVisitor 5.4.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>介绍</h2><p style="color:#1c1e21; margin-left:0; margin-right:0; text-align:start">dbVisitor 是一个全功能数据库访问 ORM 工具，提供对象映射、丰富的类型处理、动态 SQL、存储过程、 内置分页方言 20+、 支持嵌套事务、多数据源、条件构造器、INSERT 策略、多语句 / 多结果。并兼容 Spring 及 MyBatis 用法。 它不依赖任何其它框架，因此可以很方便的和任意一个框架整合在一起使用。</p><h2>依赖</h2><div><div><pre><code><span style="color:#393a34"><span style="color:#393a34"><span style="color:#333333">&lt;</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">dependency</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34"><span style="color:#333333">&lt;</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">groupId</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span><span>net.hasor</span><span style="color:#393a34"><span style="color:#333333">&lt;/</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">groupId</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34"><span style="color:#333333">&lt;</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">artifactId</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span><span>dbvisitor</span><span style="color:#393a34"><span style="color:#333333">&lt;/</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">artifactId</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34"><span style="color:#333333">&lt;</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">version</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span><span>5.4.1</span><span style="color:#393a34"><span style="color:#333333">&lt;/</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">version</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span></span><span style="color:#393a34"><span style="color:#393a34"><span style="color:#333333">&lt;/</span></span><span style="color:#00009f"><span style="color:#333333"><span style="color:#22863a">dependency</span></span></span><span style="color:#393a34"><span style="color:#333333">&gt;</span></span></span></code></pre></div></div><h2><span>修复</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Freleases%2F5.1.x%2Fv5.1.0%23%25E4%25BC%2598%25E5%258C%2596" target="_blank">​</a></h2><ul><li>修复：DataSourceUtils 在动态 DataSource 情况下的内存泄漏问题</li><li>修复：OracleDialect 拼写 tableName 时 catalog/schema 的处理问题</li></ul><h2>功能特性</h2><ul><li><p style="margin-left:0; margin-right:0">熟悉的方式</p><ul><li>JdbcTemplate 接口方式（高度兼容 Spring JDBC）</li><li>Mapper 文件方式（高度兼容 MyBatis）</li><li>LambdaTemplate （高度接近 MyBatis Plus、jOOQ 和 BeetlSQL）</li><li>@Insert、@Update、@Delete、@Query、@Callable 注解（类似 JPA）</li></ul></li><li><p style="margin-left:0; margin-right:0">事务支持</p><ul><li>支持 5 个事务隔离级别、7 个事务传播行为（与 Spring tx 相同）</li><li>提供 TransactionTemplate、TransactionManager 接口方式声明式事务控制能力（用法与 Spring 相同）</li></ul></li><li><p style="margin-left:0; margin-right:0">特色优势</p><ul><li>支持，分页查询，并且提供多种数据库方言（20+）</li><li>支持 INSERT 策略（INTO、UPDATE、IGNORE）</li><li>更加丰富的 TypeHandler（MyBatis 40+，dbVisitor 60+）</li><li>Mapper XML 支持多语句、多结果</li><li>提供独特的<span>&nbsp;</span><code>@{xxx, expr , xxxxx }</code><span>&nbsp;</span>规则扩展机制，让动态 SQL 更加简单</li><li>支持，存储过程</li><li>支持 JDBC 4.2 和 Java8 中时间类型</li><li>支持多数据源</li></ul></li></ul><h2>执行 SQL<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E6%2589%25A7%25E8%25A1%258C-sql" target="_blank">​</a></h2><p style="color:#1c1e21; text-align:start">使用 SQL 的方式读取数据，<code>PrintUtils</code><span>&nbsp;</span>和<span>&nbsp;</span><code>DsUtils.java</code><span>&nbsp;</span>两个工具类可以在<span>&nbsp;</span><a href="https://gitee.com/zycgit/dbvisitor/tree/main/dbvisitor-example/" target="_blank">例子工程</a><span>&nbsp;</span>中找到</p><div><div><pre><code><span style="color:#393a34"><em>// 创建数据源</em></span><span style="color:#393a34"><span>DataSource</span><span> dataSource </span><span style="color:#393a34">=</span><span></span><span>DsUtils</span><span style="color:#393a34">.</span><span style="color:#d73a49">dsMySql</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 创建 JdbcTemplate 对象</em></span><span style="color:#393a34"><span>JdbcTemplate</span><span> jdbcTemplate </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>JdbcTemplate</span><span style="color:#393a34">(</span><span>dataSource</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 加载测试数据脚本</em></span><span style="color:#393a34"><span>jdbcTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">loadSQL</span><span style="color:#393a34">(</span><span style="color:#e3116c">"CreateDB.sql"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 查询数据并 Map 形式返回</em></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>Map</span><span style="color:#393a34">&lt;</span><span>String</span><span style="color:#393a34">,</span><span></span><span>Object</span><span style="color:#393a34">&gt;</span><span style="color:#393a34">&gt;</span><span> mapList </span><span style="color:#393a34">=</span><span> jdbcTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryForList</span><span style="color:#393a34">(</span><span style="color:#e3116c">"select * from test_user"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 打印测试数据</em></span><span style="color:#393a34"><span>PrintUtils</span><span style="color:#393a34">.</span><span style="color:#d73a49">printMapList</span><span style="color:#393a34">(</span><span>mapList</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre><div>
   &nbsp;
  </div></div></div><p style="color:#1c1e21; text-align:start">控制枱可以得到如下结果</p><div><div><pre><code><span style="color:#393a34"><span>/--------------------------------------------\</span></span><span style="color:#393a34"><span>| id | name    | age | create_time           |</span></span><span style="color:#393a34"><span>|--------------------------------------------|</span></span><span style="color:#393a34"><span>| 1  | mali    | 26  | 2021-11-12 19:14:06.0 |</span></span><span style="color:#393a34"><span>| 2  | dative  | 32  | 2021-11-12 19:14:06.0 |</span></span><span style="color:#393a34"><span>| 3  | jon wes | 41  | 2021-11-12 19:14:06.0 |</span></span><span style="color:#393a34"><span>| 4  | mary    | 66  | 2021-11-12 19:14:06.0 |</span></span><span style="color:#393a34"><span>| 5  | matt    | 25  | 2021-11-12 19:14:06.0 |</span></span><span style="color:#393a34"><span>\--------------------------------------------/</span></span></code></pre></div></div><p style="color:#1c1e21; text-align:start">如果想使用 DTO 对象接收数据，则需要创建一个 DTO 对象。</p><div><div><pre><code><span style="color:#393a34"><em>// 因此可以简单的通过 @Table 注解声明一下</em></span><span style="color:#393a34"><em>//  - `test_user` 通过驼峰转换后可以得到类名 `TestUser`</em></span><span style="color:#393a34"><span style="color:#393a34">@Table</span><span style="color:#393a34">(</span><span>mapUnderscoreToCamelCase </span><span style="color:#393a34">=</span><span></span><span style="color:#36acaa">true</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span style="color:#00009f">public</span><span></span><span style="color:#00009f">class</span><span></span><span>TestUser</span><span></span><span style="color:#393a34">{</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">private</span><span></span><span>Integer</span><span> id</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">private</span><span></span><span>String</span><span>  name</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">private</span><span></span><span>Integer</span><span> age</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">private</span><span></span><span>Date</span><span>    createTime</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span><em>// getters and setters omitted</em></span><span style="color:#393a34"><span style="color:#393a34">}</span></span></code></pre></div></div><p style="color:#1c1e21; text-align:start">然后通过<span>&nbsp;</span><code>queryForList</code><span>&nbsp;</span>方法直接查询</p><div><div><pre><code><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> dtoList </span><span style="color:#393a34">=</span><span> jdbcTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryForList</span><span style="color:#393a34">(</span><span style="color:#e3116c">"select * from test_user"</span><span style="color:#393a34">,</span><span></span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre></div></div><h2>单表 CRUD<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E5%258D%2595%25E8%25A1%25A8-crud" target="_blank">​</a></h2><p style="color:#1c1e21; text-align:start">对於单表 CRUD 操作可以使用<span>&nbsp;</span><code>JdbcTemplate</code><span>&nbsp;</span>的子类<span>&nbsp;</span><code>LambdaTemplate</code></p><div><div><pre><code><span style="color:#393a34"><em>// 创建数据源</em></span><span style="color:#393a34"><span>DataSource</span><span> dataSource </span><span style="color:#393a34">=</span><span></span><span>DsUtils</span><span style="color:#393a34">.</span><span style="color:#d73a49">dsMySql</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 创建 LambdaTemplate 对象和创建 JdbcTemplate 一样</em></span><span style="color:#393a34"><span>LambdaTemplate</span><span> lambdaTemplate </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>LambdaTemplate</span><span style="color:#393a34">(</span><span>dataSource</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 查询，所有数据</em></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> dtoList </span><span style="color:#393a34">=</span><span> lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">lambdaQuery</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">queryForList</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 插入新数据</em></span><span style="color:#393a34"><span>TestUser</span><span> newUser </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>TestUser</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>newUser</span><span style="color:#393a34">.</span><span style="color:#d73a49">setName</span><span style="color:#393a34">(</span><span style="color:#e3116c">"new User"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>newUser</span><span style="color:#393a34">.</span><span style="color:#d73a49">setAge</span><span style="color:#393a34">(</span><span style="color:#36acaa">33</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>newUser</span><span style="color:#393a34">.</span><span style="color:#d73a49">setCreateTime</span><span style="color:#393a34">(</span><span style="color:#00009f">new</span><span></span><span>Date</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#00009f">int</span><span> result </span><span style="color:#393a34">=</span><span> lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">lambdaInsert</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">applyEntity</span><span style="color:#393a34">(</span><span>newUser</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">executeSumResult</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 更新，将 name 从 mali 更新为 mala</em></span><span style="color:#393a34"><span>TestUser</span><span> sample </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>TestUser</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>sample</span><span style="color:#393a34">.</span><span style="color:#d73a49">setName</span><span style="color:#393a34">(</span><span style="color:#e3116c">"mala"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#00009f">int</span><span> result </span><span style="color:#393a34">=</span><span> lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">lambdaUpdate</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">eq</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">::</span><span style="color:#d73a49">getId</span><span style="color:#393a34">,</span><span></span><span style="color:#36acaa">1</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">updateBySample</span><span style="color:#393a34">(</span><span>sample</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">doUpdate</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 删除，ID 为 2 的数据</em></span><span style="color:#393a34"><span style="color:#00009f">int</span><span> result </span><span style="color:#393a34">=</span><span> lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">lambdaUpdate</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">eq</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">::</span><span style="color:#d73a49">getId</span><span style="color:#393a34">,</span><span></span><span style="color:#36acaa">2</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">doDelete</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre></div></div><h3>通用 Mapper<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E9%2580%259A%25E7%2594%25A8-mapper" target="_blank">​</a></h3><p style="color:#1c1e21; text-align:start">通用 Mapper 接口来完成一些基本操作，仍然以单表 CRUD 为例。</p><div><div><pre><code><span style="color:#393a34"><em>// 创建数据源</em></span><span style="color:#393a34"><span>DataSource</span><span> dataSource </span><span style="color:#393a34">=</span><span></span><span>DsUtils</span><span style="color:#393a34">.</span><span style="color:#d73a49">dsMySql</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 创建通用 DAO</em></span><span style="color:#393a34"><span>DalSession</span><span> session </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>DalSession</span><span style="color:#393a34">(</span><span>dataSource</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>BaseMapper</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> baseMapper </span><span style="color:#393a34">=</span><span> session</span><span style="color:#393a34">.</span><span style="color:#d73a49">createBaseMapper</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 初始化一些数据</em></span><span style="color:#393a34"><span>baseMapper</span><span style="color:#393a34">.</span><span style="color:#d73a49">template</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">.</span><span style="color:#d73a49">loadSQL</span><span style="color:#393a34">(</span><span style="color:#e3116c">"CreateDB.sql"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 查询数据</em></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> dtoList </span><span style="color:#393a34">=</span><span> baseMapper</span><span style="color:#393a34">.</span><span style="color:#d73a49">query</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryForList</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>PrintUtils</span><span style="color:#393a34">.</span><span style="color:#d73a49">printObjectList</span><span style="color:#393a34">(</span><span>dtoList</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 插入新数据</em></span><span style="color:#393a34"><span>TestUser</span><span> newUser </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>TestUser</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>newUser</span><span style="color:#393a34">.</span><span style="color:#d73a49">setName</span><span style="color:#393a34">(</span><span style="color:#e3116c">"new User"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>newUser</span><span style="color:#393a34">.</span><span style="color:#d73a49">setAge</span><span style="color:#393a34">(</span><span style="color:#36acaa">33</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>newUser</span><span style="color:#393a34">.</span><span style="color:#d73a49">setCreateTime</span><span style="color:#393a34">(</span><span style="color:#00009f">new</span><span></span><span>Date</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#00009f">int</span><span> result </span><span style="color:#393a34">=</span><span> baseMapper</span><span style="color:#393a34">.</span><span style="color:#d73a49">insert</span><span style="color:#393a34">(</span><span>newUser</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 更新，将 name 从 mali 更新为 mala</em></span><span style="color:#393a34"><span>TestUser</span><span> sample </span><span style="color:#393a34">=</span><span> baseMapper</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryById</span><span style="color:#393a34">(</span><span style="color:#36acaa">1</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>sample</span><span style="color:#393a34">.</span><span style="color:#d73a49">setName</span><span style="color:#393a34">(</span><span style="color:#e3116c">"mala"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#00009f">int</span><span> result </span><span style="color:#393a34">=</span><span> baseMapper</span><span style="color:#393a34">.</span><span style="color:#d73a49">updateById</span><span style="color:#393a34">(</span><span>sample</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 删除，ID 为 2 的数据</em></span><span style="color:#393a34"><span style="color:#00009f">int</span><span> result </span><span style="color:#393a34">=</span><span> baseMapper</span><span style="color:#393a34">.</span><span style="color:#d73a49">deleteById</span><span style="color:#393a34">(</span><span style="color:#36acaa">2</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre></div></div><h3>注解化 Mapper<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E6%25B3%25A8%25E8%25A7%25A3%25E5%258C%2596-mapper" target="_blank">​</a></h3><p style="color:#1c1e21; text-align:start">作为 Mapper 可以定义自己的方法，并通过注解具体执行的 SQL 语句。</p><div><div><pre><code><span style="color:#393a34"><em>// BaseMapper 是可选的，继承它相当于多了一组单表 CURD 的扩展功能。</em></span><span style="color:#393a34"><span style="color:#393a34">@SimpleMapper</span></span><span style="color:#393a34"><span style="color:#00009f">public</span><span></span><span style="color:#00009f">interface</span><span></span><span>TestUserDAO</span><span></span><span style="color:#00009f">extends</span><span></span><span>BaseMapper</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#393a34">{</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Insert</span><span style="color:#393a34">(</span><span style="color:#e3116c">"insert into `test_user` (name,age,create_time) values (#{name}, #{age}, now())"</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">int</span><span></span><span style="color:#d73a49">insertUser</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"name"</span><span style="color:#393a34">)</span><span></span><span>String</span><span> name</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"age"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> age</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Update</span><span style="color:#393a34">(</span><span style="color:#e3116c">"update `test_user` set age = #{age} where id = #{id}"</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">int</span><span></span><span style="color:#d73a49">updateAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"id"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> userId</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"age"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> newAge</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Delete</span><span style="color:#393a34">(</span><span style="color:#e3116c">"delete from `test_user` where age &gt; #{age}"</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">int</span><span></span><span style="color:#d73a49">deleteByAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"age"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> age</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Query</span><span style="color:#393a34">(</span><span>value </span><span style="color:#393a34">=</span><span></span><span style="color:#e3116c">"select * from `test_user` where  #{beginAge} &lt; age and age &lt; #{endAge}"</span><span style="color:#393a34">,</span></span><span style="color:#393a34"><span>           resultType </span><span style="color:#393a34">=</span><span></span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#d73a49">queryByAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"beginAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> beginAge</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"endAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> endAge</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#393a34">}</span></span></code></pre></div></div><div><div><pre><code><span style="color:#393a34"><em>//创建 Session </em></span><span style="color:#393a34"><span>DalSession</span><span> session </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>DalSession</span><span style="color:#393a34">(</span><span>dataSource</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 创建 Mapper 接口</em></span><span style="color:#393a34"><span>TestUserMapper</span><span> userDAO </span><span style="color:#393a34">=</span><span> session</span><span style="color:#393a34">.</span><span style="color:#d73a49">createMapper</span><span style="color:#393a34">(</span><span>TestUserMapper</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre></div></div><h3>使用 XML 管理 SQL<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E4%25BD%25BF%25E7%2594%25A8-xml-%25E7%25AE%25A1%25E7%2590%2586-sql" target="_blank">​</a></h3><p style="color:#1c1e21; text-align:start">统一管理 SQL 的最佳场所仍然是 Mapper 文件，而且 dbVisitor 的 Mapper 文件高度兼容 MyBatis 学习成本极低。</p><div><div><pre><code><span style="color:#393a34"><em>// 利用 @RefMapper 注解将 Mapper 文件和，接口类联系起来（继承 BaseMapper 是可选的）</em></span><span style="color:#393a34"><span style="color:#393a34">@RefMapper</span><span style="color:#393a34">(</span><span style="color:#e3116c">"/mapper/quick_dao3/TestUserMapper.xml"</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span style="color:#00009f">public</span><span></span><span style="color:#00009f">interface</span><span></span><span>TestUserDAO</span><span></span><span style="color:#00009f">extends</span><span></span><span>BaseMapper</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#393a34">{</span></span><span style="color:#393a34"><span></span><span style="color:#00009f">int</span><span></span><span style="color:#d73a49">insertUser</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"name"</span><span style="color:#393a34">)</span><span></span><span>String</span><span> name</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"age"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> age</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><span style="color:#00009f">int</span><span></span><span style="color:#d73a49">updateAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"id"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> userId</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"age"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> newAge</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><span style="color:#00009f">int</span><span></span><span style="color:#d73a49">deleteByAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"age"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> age</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#d73a49">queryByAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"beginAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> beginAge</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"endAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> endAge</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#393a34">}</span></span></code></pre></div></div><p style="color:#1c1e21; text-align:start">为了更好了解和使用 dbVisitor 的 Mapper 文件建议增加 DTD 加以验证。另外 dbVisitor 兼容 MyBatis3 的 DTD 对于绝大部分 MyBatis 工程都可以正常兼容。</p><div><div><pre><code><span style="color:#393a34"><em>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</em></span><span style="color:#393a34"><em>&lt;!</em><em>DOCTYPE</em><em></em><em>mapper</em><em></em><em>PUBLIC</em><em></em><em>"-//dbvisitor.net//DTD Mapper 1.0//EN"</em></span><span style="color:#393a34"><em></em><em>"https://www.dbvisitor.net/schema/dbvisitor-mapper.dtd"</em><em>&gt;</em></span><span style="color:#393a34"><span style="color:#393a34">&lt;</span><span style="color:#00009f">mapper</span><span style="color:#00009f"></span><span style="color:#00a4db">namespace</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">com.example.demo.quick.dao3.TestUserDAO</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">resultMap</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_resultMap</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">type</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">com.example.demo.quick.dao3.TestUser</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">result</span><span style="color:#00009f"></span><span style="color:#00a4db">column</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">id</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">property</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">id</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">result</span><span style="color:#00009f"></span><span style="color:#00a4db">column</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">name</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">property</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">name</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">result</span><span style="color:#00009f"></span><span style="color:#00a4db">column</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">age</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">property</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">age</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">result</span><span style="color:#00009f"></span><span style="color:#00a4db">column</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">create_time</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">property</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">createTime</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">resultMap</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">sql</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_columns</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>        name,age,create_time</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">sql</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">insert</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">insertUser</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>        insert into `test_user` (</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">include</span><span style="color:#00009f"></span><span style="color:#00a4db">refid</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_columns</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span>        ) values (</span></span><span style="color:#393a34"><span>            #{name}, #{age}, now()</span></span><span style="color:#393a34"><span>        )</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">insert</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">update</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">updateAge</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>        update `test_user` set age = #{age} where id = #{id}</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">update</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">delete</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">deleteByAge</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span><em>&lt;![CDATA[</em></span><span style="color:#393a34"><em>        delete from `test_user` where age &gt; #{age}</em></span><span style="color:#393a34"><em>    ]]&gt;</em><span style="color:#393a34">&lt;/</span><span style="color:#00009f">delete</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">select</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">queryByAge</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">resultMap</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_resultMap</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>        select id,</span><span style="color:#393a34">&lt;</span><span style="color:#00009f">include</span><span style="color:#00009f"></span><span style="color:#00a4db">refid</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_columns</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span>        from `test_user`</span></span><span style="color:#393a34"><span>        where #{beginAge} </span><span style="color:#36acaa">&amp;lt;</span><span> age and age </span><span style="color:#36acaa">&amp;lt;</span><span> #{endAge}</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">select</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">select</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">queryAll</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">resultMap</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_resultMap</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>        select id,</span><span style="color:#393a34">&lt;</span><span style="color:#00009f">include</span><span style="color:#00009f"></span><span style="color:#00a4db">refid</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">testuser_columns</span><span style="color:#393a34">"</span><span style="color:#393a34">/&gt;</span></span><span style="color:#393a34"><span>        from `test_user`</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">select</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span style="color:#393a34">&lt;/</span><span style="color:#00009f">mapper</span><span style="color:#393a34">&gt;</span></span></code></pre></div></div><h3>利用规则简化 XML 配置<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E5%2588%25A9%25E7%2594%25A8%25E8%25A7%2584%25E5%2588%2599%25E7%25AE%2580%25E5%258C%2596-xml-%25E9%2585%258D%25E7%25BD%25AE" target="_blank">​</a></h3><p style="color:#1c1e21; text-align:start">规则是将一组语句操作封装成为一个规则函数，通过引用规则而减少 SQL 配置。</p><div><div>
  使用 and 规则
 </div><div><pre><code><span style="color:#393a34"><span style="color:#393a34">&lt;</span><span style="color:#00009f">select</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">queryUser</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>    select * from `test_user`</span></span><span style="color:#393a34"><span>    @{and, age = :age}</span></span><span style="color:#393a34"><span>    @{and, id in (:list)}</span></span><span style="color:#393a34"><span style="color:#393a34">&lt;/</span><span style="color:#00009f">select</span><span style="color:#393a34">&gt;</span></span></code></pre></div></div><div><div>
  原始的 mybatis 方式处理
 </div><div><pre><code><span style="color:#393a34"><span style="color:#393a34">&lt;</span><span style="color:#00009f">select</span><span style="color:#00009f"></span><span style="color:#00a4db">id</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">queryUser</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>    select * from `test_user`</span></span><span style="color:#393a34"><span>    where 1 = 1</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;</span><span style="color:#00009f">if</span><span style="color:#00009f"></span><span style="color:#00a4db">test</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">age != null</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>        and age = #{age}</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">if</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>    and id in </span><span style="color:#393a34">&lt;</span><span style="color:#00009f">foreach</span><span style="color:#00009f"></span><span style="color:#00a4db">item</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">item</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">index</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">index</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">collection</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">list</span><span style="color:#393a34">"</span></span><span style="color:#393a34"><span style="color:#00009f"></span><span style="color:#00a4db">open</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">(</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">separator</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">,</span><span style="color:#393a34">"</span><span style="color:#00009f"></span><span style="color:#00a4db">close</span><span style="color:#393a34">=</span><span style="color:#393a34">"</span><span style="color:#e3116c">)</span><span style="color:#393a34">"</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>      #{item}</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">&lt;/</span><span style="color:#00009f">foreach</span><span style="color:#393a34">&gt;</span></span><span style="color:#393a34"><span>  #{item}</span></span><span style="color:#393a34"><span style="color:#393a34">&lt;/</span><span style="color:#00009f">select</span><span style="color:#393a34">&gt;</span></span></code></pre></div></div><h2>分页查询<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart%23%25E5%2588%2586%25E9%25A1%25B5%25E6%259F%25A5%25E8%25AF%25A2" target="_blank">​</a></h2><div><div>
  LambdaTemplate 单表分页查询
 </div><div><pre><code><span style="color:#393a34"><em>// 构造 LambdaTemplate 和初始化一些数据</em></span><span style="color:#393a34"><span>DataSource</span><span> dataSource </span><span style="color:#393a34">=</span><span></span><span>DsUtils</span><span style="color:#393a34">.</span><span style="color:#d73a49">dsMySql</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>LambdaTemplate</span><span> lambdaTemplate </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>LambdaTemplate</span><span style="color:#393a34">(</span><span>dataSource</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">loadSQL</span><span style="color:#393a34">(</span><span style="color:#e3116c">"CreateDB.sql"</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 构建分页对象，每页 3 条数据 (默认第一页的页码为 0)</em></span><span style="color:#393a34"><span>Page</span><span> pageInfo </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>PageObject</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>pageInfo</span><span style="color:#393a34">.</span><span style="color:#d73a49">setPageSize</span><span style="color:#393a34">(</span><span style="color:#36acaa">3</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 分页查询数据</em></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> pageData1 </span><span style="color:#393a34">=</span><span> lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">lambdaQuery</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">usePage</span><span style="color:#393a34">(</span><span>pageInfo</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">queryForList</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 分页查询下一页数据</em></span><span style="color:#393a34"><span>pageInfo</span><span style="color:#393a34">.</span><span style="color:#d73a49">nextPage</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> pageData2 </span><span style="color:#393a34">=</span><span> lambdaTemplate</span><span style="color:#393a34">.</span><span style="color:#d73a49">lambdaQuery</span><span style="color:#393a34">(</span><span>TestUser</span><span style="color:#393a34">.</span><span style="color:#00009f">class</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">usePage</span><span style="color:#393a34">(</span><span>pageInfo</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span></span><span style="color:#393a34">.</span><span style="color:#d73a49">queryForList</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre></div></div><div><div>
  Mapper 文件分页查询
 </div><div><pre><code><span style="color:#393a34"><span style="color:#393a34">@RefMapper</span><span style="color:#393a34">(</span><span style="color:#e3116c">"/mapper/quick_page3/TestUserMapper.xml"</span><span style="color:#393a34">)</span></span><span style="color:#393a34"><span style="color:#00009f">public</span><span></span><span style="color:#00009f">interface</span><span></span><span>TestUserDAO</span><span></span><span style="color:#00009f">extends</span><span></span><span>BaseMapper</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#393a34">{</span></span><span style="color:#393a34"><span></span><em>// 可以直接返回分页之后的数据结果</em></span><span style="color:#393a34"><span></span><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#d73a49">queryByAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"beginAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> beginAge</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"endAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> endAge</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span>Page</span><span> pageInfo</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span></span></span><span style="color:#393a34"><span></span><em>// 也可以返回包含分页信息的分页结果</em></span><span style="color:#393a34"><span></span><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span></span><span style="color:#d73a49">queryByAge</span><span style="color:#393a34">(</span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"beginAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> beginAge</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span style="color:#393a34">@Param</span><span style="color:#393a34">(</span><span style="color:#e3116c">"endAge"</span><span style="color:#393a34">)</span><span></span><span style="color:#00009f">int</span><span> endAge</span><span style="color:#393a34">,</span><span></span></span><span style="color:#393a34"><span></span><span>Page</span><span> pageInfo</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span style="color:#393a34">}</span></span><span style="color:#393a34"><em>// 构建分页条件</em></span><span style="color:#393a34"><span>Page</span><span> pageInfo </span><span style="color:#393a34">=</span><span></span><span style="color:#00009f">new</span><span></span><span>PageObject</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>pageInfo</span><span style="color:#393a34">.</span><span style="color:#d73a49">setPageSize</span><span style="color:#393a34">(</span><span style="color:#36acaa">3</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 分页方式查询 mapper 中的查询</em></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> data1 </span><span style="color:#393a34">=</span><span> userDAO</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryByAge</span><span style="color:#393a34">(</span><span style="color:#36acaa">25</span><span style="color:#393a34">,</span><span></span><span style="color:#36acaa">100</span><span style="color:#393a34">,</span><span> pageInfo</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>PageResult</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> page1 </span><span style="color:#393a34">=</span><span> userDAO</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryByAge2</span><span style="color:#393a34">(</span><span style="color:#36acaa">25</span><span style="color:#393a34">,</span><span></span><span style="color:#36acaa">100</span><span style="color:#393a34">,</span><span> pageInfo</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><em>// 分页方式查询 mapper 中的查询</em></span><span style="color:#393a34"><span>pageInfo</span><span style="color:#393a34">.</span><span style="color:#d73a49">nextPage</span><span style="color:#393a34">(</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>List</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> data2 </span><span style="color:#393a34">=</span><span> userDAO</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryByAge</span><span style="color:#393a34">(</span><span style="color:#36acaa">25</span><span style="color:#393a34">,</span><span></span><span style="color:#36acaa">100</span><span style="color:#393a34">,</span><span> pageInfo</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span><span style="color:#393a34"><span>PageResult</span><span style="color:#393a34">&lt;</span><span>TestUser</span><span style="color:#393a34">&gt;</span><span> page2 </span><span style="color:#393a34">=</span><span> userDAO</span><span style="color:#393a34">.</span><span style="color:#d73a49">queryByAge2</span><span style="color:#393a34">(</span><span style="color:#36acaa">25</span><span style="color:#393a34">,</span><span></span><span style="color:#36acaa">100</span><span style="color:#393a34">,</span><span> pageInfo</span><span style="color:#393a34">)</span><span style="color:#393a34">;</span></span></code></pre></div></div><h2>相关链接</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">官方网站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2F" target="_blank">https://www.dbvisitor.net/</a><br> 源码地址：<a href="https://gitee.com/zycgit/dbvisitor">https://gitee.com/zycgit/dbvisitor</a><br> Spring Boot 整合手册，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fintegration%2Fwith-springboot" target="_blank">https://www.dbvisitor.net/docs/integration/with-springboot</a><br> 快速上手：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.dbvisitor.net%2Fdocs%2Fguides%2Fquickstart" target="_blank">https://www.dbvisitor.net/docs/guides/quickstart</a></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 07 Feb 2024 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278107/dbvisitor-5-4-1-released</guid>
            <link>https://www.oschina.net/news/278107/dbvisitor-5-4-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[曾被 Mozilla 放弃的 Web 引擎项目「Servo」在 2024 年迎来重生]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-3aeb075dd0990749cdc529dfeec05985774.png" referrerpolicy="no-referrer"></p><p>Servo 项目用 Rust 语言开发，以其内存安全性和模块化的特点备受关注。历经起伏后，该项目于 2023 年加入了欧洲 Linux 基金会，即将在新的年份展现出新的活力。</p><p>近期在 2024 年的 FOSDEM 大会上，Bernie Innocenti 偶然发现 Servo 项目团队正在展示迄今为止的成果，引起了外界的极大关注。多年以来，曾受到 Mozilla 资助的 Servo 项目表现出了忽冷忽热的态势。但当 Mozilla 放弃继续研发后，这个项目迎来了转机。Igalia 的贡献者接手项目维护，为 Servo 注入了新鲜血液。</p><p>目前，市面上虽有众多基于开源 Chrome（Blink 引擎）的浏览器替代品，但 Servo 带来的改变可能会给 Blink 和 Mozilla 的 Gecko 引擎带来竞争压力。Servo 项目团队已在过去的几个月中取得了令人瞩目的成绩。2023 年 9 月，在 Open Source Summit Europe 上，Igalia 的 Manuel Rego 就展示了项目的多项进展，如 WebGL 支持、跨平台兼容性（包括安卓和 Linux 移动支持）等。</p><p>Servo 不仅能够在 Raspberry Pi 等嵌入式应用中运行，且相比 Chromium 显示出更快的速度。对于想深度了解的用户，可以在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdemo.servo.org" target="_blank">Servo 的官方演示</a>页面上体验更多示例。</p><p>除此之外，Servo 还在开发一个新的布局引擎，该引擎将增加新功能，提升兼容性。尽管 Mozilla 已经放弃了这个实验性项目，Firefox 实际上仍在使用一些由 Servo 开发的组件。这让人们不禁猜测，新的 Servo 布局引擎或者其他组件可能未来也会集成到 Firefox 中。</p><p>作为一个独立项目，Servo 取得的进展已经令人充满期待。其官方网站已经列出了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fservo%2Fservo%2Fwiki%2FRoadmap" target="_blank">2024 年的更新路线图</a>，明确了包括社区管理和项目维护在内的任务。2024 年的目标包括完成 CSS 支持的实现，这意味着 Servo 布局引擎将提供基础的 CSS 功能。</p><p style="text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-569f0577fb932dae8aabec71ee76ef5f900.png" referrerpolicy="no-referrer"></p><p>另一方面，Servo 团队还将完成嵌入式 API 的定义，与 Tauri 合作定义 Servo 的 webview API，并为 API 实现新特性和需求。而最激动人心的是，Servo 项目将在安卓平台上推进，预计将在未来某个时间点在官网发布面向现代安卓版本的夜间版本 APK。</p><p>这一系列举措不仅让开源界的热心观望者们看到了 Servo 未来发展的无限可能，也给竞争激烈的浏览器市场带来了新的活力和选择。</p><blockquote><p>本文遵循新闻原始来源 It’s FOSS 的版权协议，采用「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcreativecommons.org%2Flicenses%2Fby-sa%2F4.0%2Fdeed.zh-hans" target="_blank">CC BY-SA 4.0 国际</a>」协议授权。</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 07 Feb 2024 01:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278103</guid>
            <link>https://www.oschina.net/news/278103</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[央行发布《金融业开源软件应用，评估规范》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">1 月 15 日，人民银行发布金融行业标准《金融业开源软件应用，评估规范》（JR/T 0291-2024）（以下简称「《规范》」），于当天实施。</span></p><p><span style="color:#000000"><img alt="" height="412" src="https://oscimg.oschina.net/oscnet/up-d702051be7eaa2a8e19b671e9fec9c74ac8.png" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">据悉，在金融业信息系统建设过程中，开源软件得到了广泛应用，在促进金融机构科技创新和数字化转型等方面发挥了积极作用，但也带来安全、合规等方面的风险与挑战。因此，有必要对开源软件的引入、维护、退出阶段进行规范，提出相应的评估指标。</span></p><p><span style="color:#000000">《规范》旨在针对开源软件使用过程中的风险与难点，提出一套完整的开源软件生命周期管理各阶段评估项与评估方法，降低金融机构开源软件评估过程的复杂度和时间成本，提升金融机构开源治理能力。</span></p><p><span style="color:#000000">《规范》规定了金融机构在应用开源软件时的评估要求，对开源软件的引入、维护和退出提出实现要求、评估方法和判定准则。适用于金融机构对应用的开源软件进行评估。</span></p><p><span style="color:#000000">《规范》提到，引入的开源软件按照实际应用情况，可分为开源基础软件、开源组件和开源工具 3 类。</span></p><p><span style="color:#000000"><strong>开源软件引入评估</strong></span></p><p><span style="color:#000000">开源软件引入流程分为 3 个阶段：</span></p><ul><li><span style="color:#000000">一是需求确定阶段。应明确软件功能需求与非功能需求。</span></li><li><span style="color:#000000">二是初步筛选阶段。应根据需求展开调研，依照初选评估要求，对开源软件进行评估，建立若干可进入终选评估的开源软件名单。</span></li><li><span style="color:#000000">三是终选评估阶段。应根据初选阶段建立的开源软件名单，依照终选评估要求进行评估，并确定最终引入的开源软件。</span></li></ul><p><span style="color:#000000">在初选评估要求上，评估维度包括：</span></p><p><span style="color:#000000">1、开源许可证。金融机构在选用开源软件时，应遵守该开源许可证对使用、修改等行为的规定。 2、产品认可度。产品认可度反映了开源软件在行业生产实践中的应用情况。 3、产品活跃度。产品活跃度反映了开源软件的可持续性和可进化能力，主要从开源软件的版本发布情况、开源社区情况、软件关注情况等方面进行评估。 4、行业支持情况。行业支持情况反映开源软件在业界提供专业化服务的情况。 5、功能特性。不同软件用于解决不同场景的特定问题，其功能特性也不相同，对于功能的评测应结合具体场景进行。 6、安全性。初步筛选阶段安全性重点考查已暴露的漏洞情况。 7、可靠性。重点考察开源软件自身或者结合其他开源软件的高可用性，在出现故障时是否具备自动故障切换能力和容错能力。 8、兼容性。可通过查看文档的方式评估开源软件的兼容性，例如开源软件对不同硬件的兼容性、对不同操作系统的兼容性。</span></p><p><span style="color:#000000">在终选评估要求上，评估维度则包括：</span></p><p><span style="color:#000000">1、安全性。终选阶段安全性重点考查安全机制方面的支持情况。 2、可靠性。终选阶段可靠性重点考察外部开源软件长时间无故障运行的能力，系统可在极限情况下长时间稳定运行，保证业务成功率以及执行效率。 3、性能效率。终选阶段性能效率重点考查在实际压测环境下开源软件的 TPS、QPS、平均响应时间、最大响应时间、最大并发数、服务调用成功率、时间标准差、CPU 使用率、内存占用率、带宽占用及 I/O 情况。 4、兼容性。兼容性包括硬件兼容性、操作系统平台兼容性、数据库兼容性、开源软件版本之间的兼容性，以及编程语言的兼容性、协议兼容性、同一运行环境的其他组件兼容性、开源软件与国产操作系统兼容性。 5、可维护性。可维护性即维护人员对该开源软件进行维护的难易程度，具体包括理解、改正、改动和改进该软件的难易程度。 6、可扩展性。可扩展性主要包括分布式系统下节点的水平扩展、动态扩展及代码扩展能力。 7、易用性。易用性描述了开源软件的学习成本、安装和部署的难易程度等。</span></p><p><span style="color:#000000"><strong>开源软件维护评估</strong></span></p><p><span style="color:#000000">在开源软件维护过程中，金融机构应根据开源软件的自主可控程度将开源软件进行分类管理，根据其对主营业务的影响程度分为 3 类：</span></p><ul><li><span style="color:#000000">简单使用类开源软件：可搭建环境，且功能可正常使用。</span></li><li><span style="color:#000000">深度使用类开源软件：在满足简单使用类开源软件要求基础上，掌握开源软件容灾容错机制、实现原理、核心算法等重要内容。</span></li><li><span style="color:#000000">定制开发类开源软件：在满足深度使用类开源软件要求基础上，熟悉代码实现、设计思路，通过定制开发能够较好地满足平台需求。</span></li></ul><p><span style="color:#000000">其中，简单实用类开源软件维护评估内容有：</span></p><p><span style="color:#000000"><img alt="" height="364" src="https://oscimg.oschina.net/oscnet/up-09331353c70a84785f1975e432d5f805b0a.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">深度使用类开源软件维护评估内容为：</span></p><p><span style="color:#000000"><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-536ed6dd8f5f3d1ff3e7a20ba421c81f313.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">定制开发类开源软件维护评估内容为：</span></p><p><span style="color:#000000"><img alt="" height="369" src="https://oscimg.oschina.net/oscnet/up-30dfc33dfd5d8956fcecfbf08ff14c65dcd.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><strong>开源软件退出评估</strong></span></p><p><span style="color:#000000">对于开源软件当前版本已无法满足功能、性能需求，或发现当前版本存在重大风险隐患，或该开源软件已停止更新等情况，应进行退出评估。开源软件的退出可通过开源软件版本升级或开源软件更换来实现。</span></p><p><span style="color:#000000">开源软件退出评估内容包括：开源软件退出机制、开源软件的升级具备兼容性、开源软件在升级后开源许可证的变化，以及更换的开源软件。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 08:13:32 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278033</guid>
            <link>https://www.oschina.net/news/278033</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌向 Rust 基金会捐赠 100 万美元，改进 Rust 与 C++ 的互操作性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsecurity.googleblog.com%2F2024%2F02%2Fimproving-interoperability-between-rust-and-c.html" target="_blank">宣布</a></u>向 Rust 基金会捐赠 100 万美元，这笔资金将用于支持名为<strong>「Interop Initiative」</strong>的新计划——专注提升 C++ 与 Rust&nbsp;互操作性。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-8a0f4a84a2a1250ba949160c21a66e31916.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffoundation.rust-lang.org%2Fnews%2Fgoogle-contributes-1m-to-rust-foundation-to-support-c-rust-interop-initiative%2F" target="_blank">https://foundation.rust-lang.org/</a></u></em></p></blockquote><p>据介绍，谷歌的核心产品采用了数百万行 C++ 代码进行编写，由于无数的业务相关或技术因素，在合理的时间内用 Rust 重写这些代码并不实际。因此在谷歌的支持下，Rust 基金会创建了新的"Interop Initiative"计划，让全世界正在使用 C++ 的组织更顺利地做出采用 Rust 的决策和流程。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-58623854011083ebd628e8852dfca87752d.png" referrerpolicy="no-referrer"></p><p>谷歌称早已在 Android 和其他产品中广泛使用 Rust 编程语言，并表示 Rust 是他们解决内存安全问题的最强大的工具之一。而且整体来看，谷歌在 Android 中使用 Rust 的增长最为显著。</p><p>Android 安全与隐私工程副总裁 Dave Kleidermacher 表示，根据历史漏洞密度统计数据，Rust 已主动阻止数百个漏洞影响 Android 生态系统。目前这项投资旨在扩大 Rust 在平台各个组件中的采用。</p><p>除了 Android，谷歌也积极在其他应用程序和产品中采用 Rust，包括客户端和服务器硬件。</p><p>Rust 基金会董事会主席兼谷歌成员总监 Lars Bergstrom 说道：「谷歌相信 Rust 等内存安全语言所发挥的关键作用，以及解决各个领域内存安全问题的迫切需要。我们支持 Rust 基金会的&nbsp;<strong>Interop Initiative</strong>&nbsp;计划，因为与 C++ 更好的互操作性将是 Rust 被采用的关键，并让更多组织和社区从内存安全系统中受益。」</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 08:09:32 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278032/google-contributes-1m-to-rust-foundation</guid>
            <link>https://www.oschina.net/news/278032/google-contributes-1m-to-rust-foundation</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[MetaBCI —— 脑机接口开源软件平台]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>MetaBCI 是中国首个脑机接口开源软件平台，由离线分析模块 Brainda、刺激呈现模块 Brainstim 和在线数据流模块 Brainflow 三大部分构成，提供了面向 BCI 软件层面全链条开发的解决方案。</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>面向离线分析需求，Brainda 统一了现有公开数据集接口，优化了脑电数据读取、处理流程，复现多种主要 BCI 数据分析及解码算法，以此提高研究者的算法开发效率；</li><li>面向刺激呈现需求，Brainstim 提供了简洁高效的范式设计模块，可快速创建脑机接口范式刺激界面；</li><li>面向在线开发需求，Brainflow 利用双线程、双进程编程方法实现了实时高速的数据读取、数据处理、结果反馈等功能，帮助开发者轻松搭建脑机接口在线实验系统。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img src="https://oscimg.oschina.net/oscnet/up-8f4d4e3e7fbcc8a74be3635f43436fba05b.png" referrerpolicy="no-referrer"></p><p>相较于现有的脑机接口软件工具包，MetaBCI 基于开源语言 Python 编写，并且能够涵盖脑机接口全链条功能。MetaBCI 完全打通了脑机接口软硬件开发与设计链路，可为脑机接口在科学研究、医疗康复、娱乐生活、特种控制等领域的应用提供重要支撑，持续推动新一代脑机智能快速发展。</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 07:59:32 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/metabci</guid>
            <link>https://www.oschina.net/p/metabci</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 一文详解静态图和动态图中的自动求导机制]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4a0c43362f56c1a7d9d7eaa7f9a9328a225.png" referrerpolicy="no-referrer"></p><p>作者 | FesianXu</p><blockquote><p>导读</p><p>4 年前在《AutoDiff 理解》 之第一篇「自动求导技术在深度学习中的应用」[1]中打算写一个关于 autodiff 的系列文章，因为工作和学习上比较忙碌（Lan Duo :P），就一直拖到了现在。刚好最近又在学习 OPEN MLSYS[2]，借此机会将静态图中的 autodiff 笔记也一并写完吧。如有谬误请联系指出。</p><p>（注意，在阅读本文之前，请确保已经阅读过[1]，了解为什么深度学习以自动求导作为主要的训练方式，会对理解本文有所帮助。）</p></blockquote><blockquote><p><em>全文 8965 字，预计阅读时间 23 分钟。</em></p></blockquote><span id="OSC_h1_1"></span><h1><strong>01 静态图与动态图的区别</strong></h1><p>之前在[1]中提到过，自动求导（AutoDiff）机制是当前深度学习模型训练采用的主要方法，而在静态图和动态图中对于自动求导的处理是不一样的。作为前置知识，这里简单进行介绍。</p><p>我们都知道静态图建模（如 TensorFlow，<a href="https://www.oschina.net/action/visit/ad?id=1185">paddle</a> fluid）是声明式编程，其建图过程和计算过程是分开的，而对于动态图建模而言（如 pytorch，<a href="https://www.oschina.net/action/visit/ad?id=1185">paddle</a>）是命令式编程，其计算伴随着建图一起进行。注意，这两种编程范式有着根本上的区别，相信用过 tensorflow 和 pytorch 的小伙伴能感受得到。总的来说，动态图边建图边计算的方式容易理解，而静态图先建图，后计算的方式并不是很容易理解，我们完全可以把静态图语言（比如 TensorFlow，<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>）看成是独立于 python 之外的建图的一种描述语言，其任务主要是建计算图，而其计算部分完全由其 C++后端进行计算。静态图的建图和计算独立的过程和示意代码，可以用 Fig 1.1 进行</p><p><img alt="图片" src="https://oscimg.oschina.net/oscnet/up-c4bc16ff7bc7f8c10fd88d122b341233392.png" referrerpolicy="no-referrer"></p><p><em><strong>△Fig 1.1 静态图建图和计算的过程示意</strong></em></p><p>注意到，动态图边建图边计算，也即是每一次的模型训练都会进行重新建图和计算，这意味着：</p><p>1、系统无法感知整个动态图模型的全局信息。有些变量可能后续不会再被引用了，可以释放内存，在动态图系统中由于无法感知到后续图的结构，因此就必须保留下来（除非工程师手动释放），导致显存占用一般会大于静态图（当然也并不一定）。</p><p>2、每次都需要重新建图，在计算效率上不如静态图，静态图是一次建图，后续永远都是在这个建图结果的基础上进行计算的。这个就类似于解释性语言（如 python）和编译性语言（如 C 和 C++）的区别。</p><p>3、由于动态图需要每次重新建图，导致其无法在嵌入式设备上进行部署（两种原因，1 是效率问题，2 是嵌入式设备通常不具有网站的建图运行时，只支持推理模式），通常需要其以某种形式（比如 ONNX）转化为静态图的参数后，通过静态图部署。常见的部署方式包括 TensorRT，<a href="https://www.oschina.net/action/visit/ad?id=1189">Paddle Lite</a>，TensorFlow Lite，TensorFlow Serving，NCNN（手机端居多）等等。</p><span id="OSC_h1_2"></span><h1><strong>02 自动求导 AutoDiff</strong></h1><span id="OSC_h2_3"></span><h2><strong>2.1 动态图</strong></h2><p>动态图是完全的边建图边计算，注意到是完全，完全，完全！重要的事情说三遍，这意味着在动态图里面的自动求导过程也是边建图边计算完成了。如 Fig 2.1 所示，在进行前向计算的过程中，除了对前向计算结果进行保存外（简称为前向计算缓存，forward cache），还会同时进行当前可计算的反向梯度的计算（简称为反向计算缓存，backward cache），并且将反向梯度的计算结果同样保存下来。在需要进行端到端的梯度计算的时候，比如调用了 pytorch 的 output.backward()，此时会分析输出节点 output 和每个叶子节点的拓扑关系，进行反向链式求导。此时其实每一步的梯度都已经求出来了，只需要拼在一起，形成一个链路即可。将早已计算得到的前向缓存和反向缓存结果代入拓扑中，得到最终每个叶子节点的梯度。如式子 (2-1) 和 (2-2) 所示。这就是动态图的前向和反向计算逻辑，在建图的同时完成前向计算和反向计算。这种机制使得模型的在线调试变得容易（对比静态图而言），我们待会将会看到静态图是多么的「反人类」（对比动态图而言）。</p><p><span class="math-tex">\(\begin{align} \dfrac{\partial H_3}{\partial X_1} &amp;= \dfrac{\partial H_3}{\partial H_2} (\dfrac{\partial H_2}{\partial X_1}+\dfrac{\partial H_2}{\partial H_1} \dfrac{\partial H_1}{\partial X_1}) \ &amp;= 5(1+1*0.2) = 6 \end{align} \tag{2-1}\)</span></p><p><span class="math-tex">\(\begin{align} \dfrac{\partial H_3}{\partial X_2} &amp;= \dfrac{\partial H_3}{\partial X_2} + \dfrac{\partial H_3}{\partial H_2} (\dfrac{\partial H_2}{\partial H_1} \dfrac{\partial H_1}{\partial X_2}) \ &amp;= -18 + 510.6 = -15 \end{align} \tag{2-2}\)</span></p><p><img alt="图片" src="https://oscimg.oschina.net/oscnet/up-0023ca7b570f61d4ebaf2280addb4e4dc37.png" referrerpolicy="no-referrer"></p><p><em><strong>△Fig 2.1 动态图的前向和反向计算过程是在建图的时候一起完成的</strong></em>_</p><p>不难发现，在进行反向传播的时候整个系统需要缓存，维护多种类型的变量，包括前向计算的结果缓存，反向梯度的缓存，参数矩阵等等。这些都是模型训练过程中占据显存使用的大头。</p><span id="OSC_h2_4"></span><h2><strong>2.2&nbsp;静态图</strong></h2><p>对于静态图而言，建图是一次性完成的，计算可以在这个建好的计算图上反复进行。如 Fig 3.2 所示，静态图在建图阶段同时将前向计算图和反向计算图都一并建好了（除非指定了在推理模型，此时没有反向建图的过程），当 placeholder 输入真实的 Tensor 数据时（也就是 feed_list），在指定了输出节点的情况下（也就是 fetch_list），执行器会解析整个计算图，得到每个节点的计算顺序，并对 Tensor 进行相对应的处理。如以下代码所示，通过 tf.gradients(Y, X) 可以显式拿到梯度节点，在执行器运行过程中 sess.run()，只需要指定需要的输出节点（比如是前向输出 output 或者是梯度输出 grad）和喂入数据 feed_list，即可在计算图上计算得到结果。</p><pre><code>import tensorflow as tf

X1 = tf.placeholder(tf.float32, shape=(1,), name="X1")
X2 = tf.placeholder(tf.float32, shape=(1,), name="X2")

h1 = tf.multiply(X1, X2)
h2 = tf.add(h1, X1)
output = tf.div(h2, X2)

grad = tf.gradients(output, [X1, X2])

feed_dict = {
    "X1": 0.6, "X2": 0.2
}
sess = tf.Session()
output_v = sess.run(output, feed_dict)
grad_v = sess.run(grad, feed_dict)



</code></pre><p><img alt="图片" src="https://oscimg.oschina.net/oscnet/up-efd595949c5802c6f69794361d2b29297ea.png" referrerpolicy="no-referrer"></p><p><em><strong>△Fig 3.2 静态图的正向建图和反向建图都在建图阶段一并完成了</strong></em></p><p>由此我们发现了静态图和动态图自动求导机制的不同点，静态图在执行计算过程中，其实并不区分前向计算和反向计算。对于执行器而言，无论是前向过程建的图，亦或是反向过程建的图都是等价的，执行器不需要区分，因此只需要一套执行器即可，将自动求导机制的实现嵌入到了建图过程中。而由于动态图的建图和计算同时进行，导致其执行器也必须区分前向和反向的过程。从静态图的实现机制上看，我们也不难发现，由于静态图提前已经对整个计算图的拓扑结构有所感知，就能对其中不合理的内存使用进行优化，并且可以对节点进行融合优化，也可以静态分析得到更合理的节点执行顺序，从而实现更大的并行度。静态图的这些性质决定了其更适合于模型部署，计算效率和内存使用效率都比动态图更高。但是静态图也有一个最大麻烦，就是模型调试麻烦。首先由于对整个图都建好了后才能执行，因此并不能动态往里面添加原生 python 的 print 操作——此时 Tensor 都还没计算出来呢，你打印出来的只是该计算节点本身而已，并没有输入任何数值信息。为了 print 其中的节点以进行模型调试，可以往里面插入 TensorFlow 的 tf.Print 操作节点，如 Fig 3.3 所示。当然，你也可以单纯在执行器运行时，通过指定 fetch_list=[h2]进行中间变量的获取。但是不管是哪种方法，都显然比动态图的调试更为麻烦。</p><p><img alt="图片" src="https://oscimg.oschina.net/oscnet/up-378415e5011770ede0f66dc0c731563b7fa.png" referrerpolicy="no-referrer"></p><p><em><strong>△Fig 3.3 在计算图中插入 Print 节点，以进行模型调试</strong></em></p><p>静态图对于数据流控制的操作，也远比动态图麻烦。以条件判断为例子，在动态图中只需要实时计算判断条件，实时建图计算即可，一切都是那么地顺滑。但是静态图是必须得提前建图的，这意味着无法实时进行分支判断，因此所有可能的分支都需要进行建图，如 Fig 3.4 所示，实现了以下的条件判断逻辑。</p><pre><code>if (X &gt; 2) {
    return X * X3
} else {
    return X4 - X
}



</code></pre><p><img alt="图片" src="https://oscimg.oschina.net/oscnet/up-2f84a6626d0c423dfe41347b905584f1311.png" referrerpolicy="no-referrer"></p><p><em><strong>△Fig 3.4 静态图中对于所有可能的条件判断分支，都需要提前建图</strong></em></p><span id="OSC_h1_5"></span><h1><strong>03 静态图自动求导的实现示例</strong></h1><span id="OSC_h2_6"></span><h2><strong>3.1 前向建图和反向建图</strong></h2><p>以上讲了那么多动态图和静态图的差别，看似有些跑题了，我们说好的自动求导实现呢？嗯嗯，本章在读者对静态图和动态图有了充分的认知之后，将会讨论如何实现静态图的自动求导机制。笔者已经将代码开源_（ <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFesianXu%2FToyAutoDiff" target="_blank">https://github.com/FesianXu/ToyAutoDiff</a> ）_，有兴趣的读者可以自行尝试。在这个代码库中，主要有两种数据结构类，Node 和 Op。Node 是节点类，如下所示，其主要定义了输入列表 self.inputs，这个输入列表用于储存当前节点的所有输入信息，而其本身则是作为输出存在，通过这种方式可以建立一个前向图，如 Fig 3.5 所示，通过维护 Node 类中的 inputs 列表，就足以维护前向图的拓扑关系，其是一个有向无环图（Directed Acyclic Cycle, DAG）。同时，Node 类中还具有一个 const_attr 用于描述 Tensor 与常数的一些操作，如果想要引入类型推断系统，那么还需要加入 self.shape，但是本文中并没有引入这个机制。</p><pre><code>class Node(object):
    def __init__(self):
        self.inputs = []
        self.op = None
        self.const_attr = None
        self.name = ""

    def __add__(self, other):
        if isinstance(other, Node):
            new_node = add_op(self, other)
        else:
            new_node = add_byconst_op(self, other)
        return new_node

    def __mul__(self, other):
        if isinstance(other, Node):
            new_node = mul_op(self, other)
        else:
            new_node = mul_byconst_op(self, other)
        return new_node

    def __truediv__(self, other):
        raise ValueError('No implement div')

    # Allow left-hand-side add and multiply.
    __radd__ = __add__
    __rmul__ = __mul__

    def __str__(self):
        return self.name

    __repr__ = __str__



</code></pre><p><img alt="图片" src="https://oscimg.oschina.net/oscnet/up-0a120695cc882c7543516445b214cfcc60d.png" referrerpolicy="no-referrer"></p><p><em><strong>△Fig 3.5 通过组织 Node 里面的 inputs 列表，既可以维护一个前向图关系的描述</strong></em></p><p>通过实现一个抽象类 Op，我们把所有算子的基类需要的共有接口给定义了，第一个是计算方法（Compute），注意到该操作并不区分前向或者反向，在执行器调用这个 compute 的时候，只是对输入的实际 Tensor 进行指定计算而已，因此这个方法其实就是在图计算中实现惰性计算（Lazy Compute）的实际计算方法。第二个是反向建图方法（gradient），该方法对当前输入节点和输出节点（也即是自身）进行反向求导建图。同时注意到在__call__方法中，Op 将输出节点 new_node = Node() 进行定义，并且将其纳入自己类中 new_node.op = self。</p><pre><code>class Op(object):
    def __call__(self):
        new_node = Node()
        new_node.op = self
        return new_node

    def compute(self, node, input_vals):
        raise NotImplementedError

    def gradient(self, node, output_grad):
        raise NotImplementedError



</code></pre><p>该 Op 类是一个抽象类，需要集成它实现其他具体的算子，比如矩阵乘法算子 MatMulOp。该矩阵乘法算子的输入是两个 Op，分别是 node_A 和 node_B。其在 compute 方法中，传入的 Tensor 是基于 numpy array 的，因此直接采用 np.dot() 进行计算即可，当然也可以加入类型断言，形状断言用以判断传入的 Tensor 符合计算图的要求。在 gradient 方法中，我们知道对于矩阵乘法而言，其微分如 (3-1) 所示，将每个输入节点的对应微分写到 gradient 中，此时的<span class="math-tex">\(\partial \mathbf{Y}\)</span>就是前继节点的求导累积结果，在代码中记为 output_grad。</p><p><span class="math-tex">\(\begin{align} \mathbf{Y} &amp;= \mathbf{A} \mathbf{B} \ \partial \mathbf{A} &amp;= \partial \mathbf{Y} \cdot \mathbf{B}^{\mathrm{T}} \ \partial \mathbf{B} &amp;= \mathbf{A}^{\mathrm{T}} \cdot \partial \mathbf{Y} \end{align} \tag{3-1}\)</span></p><pre><code>class MatMulOp(Op):
    """Op to matrix multiply two nodes."""
    def __call__(self, node_A, node_B, trans_A=False, trans_B=False):
        new_node = Op.__call__(self)
        new_node.matmul_attr_trans_A = trans_A
        new_node.matmul_attr_trans_B = trans_B
        new_node.inputs = [node_A, node_B]
        new_node.name = "MatMul(%s,%s,%s,%s)" % (node_A.name, node_B.name, str(trans_A), str(trans_B))
        return new_node

    def compute(self, node, input_vals):
        assert len(input_vals) == 2
        assert type(input_vals[0]) == np.ndarray and type(input_vals[1]) == np.ndarray
        return np.dot(input_vals[0], input_vals[1])

    def gradient(self, node, output_grad):
        """
    if Y=AB, then dA=dY B^T, dB=A^T dY
        """
        return [matmul_op(output_grad, transpose_op(node.inputs[1])), matmul_op(transpose_op(node.inputs[0]), output_grad)]




</code></pre><p>通过类似的方法还可以实现其他很多算子操作，比如加减乘除等等。前向建图很容易完成，我们讨论下如何进行反向建图。在该试验代码中，实现了一个 gradients 函数，如下所示，该函数对输出节点 output_node 和指定的节点列表（node_list）中的每个节点进行求导操作。在实现这个的过程中，我们调用了一个叫做 find_topo_sort 的函数，对以这个输出节点 output_node 为起始点进行深度优先搜寻（Depth First Search），然后进行逆序就得到了反拓扑结构。还是以 Fig 3.2 的拓扑结构为例子，对其输出 H3 进行 DFS，得到的拓扑序为 X2 -&gt; X1 -&gt; H1 -&gt; H2 -&gt; H3，进行翻转后得到 H3 -&gt; H2 -&gt; H1 -&gt; X1 -&gt; X2。我们发现翻转后的序，和 Fig 3.2 的反向建图的序是一致的。因此以此为序，遍历的过程中不断地调用当前遍历节点的 op.gradient 方法，实现层次反向建图。</p><pre><code>def gradients(output_node, node_list):
    """Take gradient of output node with respect to each node in node_list.
    Parameters
    ----------
    output_node: output node that we are taking derivative of.
    node_list: list of nodes that we are taking derivative wrt.
    Returns
    -------
    A list of gradient values, one for each node in node_list respectively.
    Something wrong, should be the backward graph of the gradients
    """
    node_to_output_grads_list = {}
    node_to_output_grads_list[output_node] = [oneslike_op(output_node)]
    reverse_topo_order = reversed(find_topo_sort([output_node]))

    for ind, each in enumerate(reverse_topo_order):
        if ind == 0:
            gg = each.op.gradient(each, oneslike_op(output_node))
        else:
            gg = each.op.gradient(each, node_to_output_grads_list[each])

        if gg is None:
            continue
        for indv, eachv in enumerate(gg):
            if each.inputs[indv] in node_to_output_grads_list.keys():
                node_to_output_grads_list[each.inputs[indv]] += gg[indv]
            else:
                node_to_output_grads_list[each.inputs[indv]] = gg[indv]

        node_to_output_grad[each] = each
    grad_node_list = [node_to_output_grads_list[node] for node in node_list]
    return grad_node_list

def find_topo_sort(node_list):
    """Given a list of nodes, return a topological sort list of nodes ending in them.

    A simple algorithm is to do a post-order DFS traversal on the given nodes, 
    going backwards based on input edges. Since a node is added to the ordering
    after all its predecessors are traversed due to post-order DFS, we get a topological
    sort.
    """
    visited = set()
    topo_order = []
    for node in node_list:
        topo_sort_dfs(node, visited, topo_order)
    return topo_order

def topo_sort_dfs(node, visited, topo_order):
    """Post-order DFS"""
    if node in visited:
        return
    visited.add(node)
    for n in node.inputs:
        topo_sort_dfs(n, visited, topo_order)
    topo_order.append(node)



</code></pre><p>建图完后我们就需要进行计算了，而计算是有执行器（Executor）进行的。执行器中最主要的方法是 run，这个相当于 TensorFlow 中的 sess.run()，不同的在于，这里的执行器是在构造器中指定 fetch_list，在 run() 中指定喂入的 Tensor 数据。在 run 方法中，我们同样需要采用 DFS 对计算图进行遍历（不区分前向还是反向，再强调一遍），得到了计算序后，依次喂入 tensor 数据，调用 op.compute() 进行 tensor 计算即可。</p><pre><code>class Executor:
    """Executor computes values for a given subset of nodes in a computation graph."""
    def __init__(self, eval_node_list):
        self.eval_node_list = eval_node_list

    def run(self, feed_dict):
        node_to_val_map = dict(feed_dict)
        # Traverse graph in topological sort order and compute values for all nodes.
        topo_order = find_topo_sort(self.eval_node_list)
        for each in topo_order:
            if each.inputs:
                input_vals = []
                for each_input in each.inputs:
                    input_vals += [node_to_val_map[each_input]]
                node_to_val_map[each]  = each.op.compute(node=each, input_vals=input_vals)
        node_val_results = [node_to_val_map[node] for node in self.eval_node_list]
        return node_val_results



</code></pre><p>至此，我们就实现了一个简单的静态图 autodiff 机制得到试验，后续可以加入形状推断机制，抽象出 Layer 神经网络层，参数初始化器 Initiator，优化器 Optimizer，损失 Loss，模型层 Model，那么我们就可以构建出一个玩具版本的 TensorFlow 啦，嘿嘿嘿~~</p><p>————END————</p><p><strong>参考资料：</strong></p><p>[1].&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2FLoseInVain%2Farticle%2Fdetails%2F88557173" target="_blank">https://blog.csdn.net/LoseInVain/article/details/88557173</a>, 《AutoDiff 理解》 之第一篇， 自动求导技术在深度学习中的应用</p><p>[2].&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenmlsys.github.io%2Fchapter_preface%2Findex.html" target="_blank">https://openmlsys.github.io/chapter_preface/index.html</a>, OPEN MLSYS</p><p>[3].&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFesianXu%2FToyAutoDiff" target="_blank">https://github.com/FesianXu/ToyAutoDiff</a></p><p><strong>推荐阅读：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247576591%26idx%3D1%26sn%3D308b40799e498afc211537944424e429%26chksm%3Dc03f9c73f7481565df2f217d1417bf381ec406c10ac50796cd678c0ae51168a408c0e301e576%26scene%3D21%23wechat_redirect" target="_blank">千万级高性能长连接 Go 服务架构实践</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247576575%26idx%3D1%26sn%3D2d4638ad0c3235d958e724cc6cf1aaf9%26chksm%3Dc03f9b83f7481295dd1eefab21d11828a366851c427abcc588a28f0555d4ec9cda0173914c91%26scene%3D21%23wechat_redirect" target="_blank">百度搜索 Push 个性化：新的突破</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247576268%26idx%3D1%26sn%3Dede6034f715c60a750d08a6191985ff8%26chksm%3Dc03f9ab0f74813a6b5f236490e30555546de98117a902557c6ccf3e370b1ba6dcd6743458954%26scene%3D21%23wechat_redirect" target="_blank">数据交付变革：研发到产运自助化的转型之路</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247576227%26idx%3D1%26sn%3Daf13e8a1c98b8948fd29dc5acaa4054c%26chksm%3Dc03f9adff74813c9f993092cf59b2f29578e5583a05c4ad5d2e0fd46e5d665959c4abb12db20%26scene%3D21%23wechat_redirect" target="_blank">百度搜索 exgraph 图执行引擎设计与实践</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247575843%26idx%3D1%26sn%3D52fc61ebc3de5d36c75061a6ca2f7dfe%26chksm%3Dc03f995ff74810492986bf919bbb764fee89153a04d5d6faa2a80aaa4a23a5d391403c01da6e%26scene%3D21%23wechat_redirect" target="_blank">百度搜索&amp;金融：构建高时效、高可用的分布式数据传输系统</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 07:53:32 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/11032933</guid>
            <link>https://my.oschina.net/u/4939618/blog/11032933</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Go 语言之父总结成功因素：吉祥物功不可没]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Go 语言之父 Rob Pike 在澳大利亚悉尼举行的 GopherCon AU 大会上，为纪念 Go 编程语言发布 14 周年 (&nbsp;2009 年 11 月 10 日) 发表了一场演讲，主题旨在回顾： "我们做对了什么以及做错了什么 (What We Got Right, What We Got Wrong)"。</span></p><p><span style="color:#000000">Pike <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcommandcenter.blogspot.com%2F2024%2F01%2Fwhat-we-got-right-what-we-got-wrong.html" target="_blank">分享</a>了许多关于 Go 早期历史的内部记忆，以及在开发过程中有关一些重要因素的见解。不过他也声明称，本次发言仅代表个人观点，与&nbsp;Go 团队或谷歌没有关系。</span></p><blockquote><p><span style="color:#000000">"Go 过去是、现在仍然是一个敬业的团队和一个庞大的社区所付出的巨大努力。所以如果你同意我说的任何话，请感谢他们。如果你不同意，可以责怪我，但请不要说出来。"</span></p></blockquote><p><span style="color:#000000">Pike 补充到，编程语言的好坏在很大程度上是一个见仁见智的问题，而不是事实。在 2022 年发表的一篇讨论了 Go 流行原因的文章中，Pike 与 Ken Thompson、Russ Cox、Robert Griesemer 和 Ian Lance Taylor 曾共同<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthenewstack.io%2Fgolang-co-creator-rob-pike-what-go-got-right-and-wrong%2F" target="_blank">指出</a>，Go 是专门为并发和并行性而设计的，在处理大规模工作负载的同时利用了新的多核芯片的强大功能。但他们也将 Go 的成功归功于其持续的「以开发为中心的理念」，以及其蓬勃发展的社区及其贡献（包括新包）。</span></p><p><span style="color:#000000">在演讲中 Pike 再次提到了这个主题表示，「我们最初的目标不是创造一种新的编程语言，而是创造一种编写软件的更好方法.....如果我当时不花 45 分钟来构建二进制文件，Go 就不会出现。」</span></p><p><span style="color:#000000">简而言之，Pike 指出，Go 是一种编程语言，但也不仅仅是一种编程语言。它的目的是帮助提供一种开发高质量软件的更好方法。时至今日，这仍然是它的目标；Go 是一个让生产软件的开发更简单、更高效的项目。</span></p><p><span style="color:#000000">出人意料的是，Pike 在例举 Go 语言的成功之处时，首先提及的是吉祥物 (Go gopher )，并将之誉为 Go 成功的最早因素之一、对 Go 的发展至关重要。他认为，呆萌有趣辨识度高的吉祥物很好的团结了社区氛围，为社区参与项目奠定了基调 —— 即卓越的技术与真正的乐趣相结合。</span></p><p><span style="color:#000000">但对于以 CC 许可发布 Gopher 的设计，Pike 则坦言，这"也许不是最好的选择"，如果再重来一次他们会慎重考虑。</span></p><p><span style="color:#000000"><img alt="" height="451" src="https://oscimg.oschina.net/oscnet/up-a004fea240880685504378aa24a754146e5.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">在提到 Go 语言发展过程中所做出的一些正确决策时，Pike 提到了：确保 Go 易于解析，此举反过来又使得创建 IDE 等工具以及 Go 的官方语言服务器 gopls（也提供 IDE 功能）变得容易；以及为编译器添加了自动测试和代码审查工具。其他还包括：</span></p><ul><li><span style="color:#000000">gofmt 自动格式化工具</span></li><li><span style="color:#000000">Go 的软件包库</span></li><li><span style="color:#000000">发布了 Go 语言的正式规范</span></li><li><span style="color:#000000">在早期就发布了 Go 语言的兼容性保证，等等。</span></li></ul><p><span style="color:#000000">此外，Pike 还透露了一些他期待出现的功能，包括：允许使用任意精度的整数，他认为这将消除一整类安全隐患；以及希望看到编译器对 Go 的动态接口进行更多自动检查，并检查资源共享可能导致的进度停滞死锁。"任何能让程序在编译时更安全的东西都是好东西。"</span></p><p><span style="color:#000000">Pike 指出，Go 语言的另一个关键之处在于它的可移植性；也就是说，它可以轻松地为其他平台编译代码。这在一定程度上得益于 Ken Thompson 用 C 语言编写的编译器，尽管其他人认为编译器应该用 Go 本身编写（或使用 LLVM 中的工具）。Pike 也将该编译器描述为「an odd duck」，但无论如何，他认为这对于当时的处境来说是一个正确的选择。直到 2015 年，Russ Cox 编写了一个工具，可以将编译器从 C 半自动编译为 Go。</span></p><p><span style="color:#000000">而有关 Go 最具影响力的决定 —— 「并发」。在分享这一故事时，Pike 首先描述了 2002 年自己刚加入 Google 时的世界。在他的记忆中，彼时的谷歌似乎一直在回避进程线程的并发执行，甚至采取"几乎完全禁止"的态度，这也让他感到很苦恼。</span></p><p><span style="color:#000000">「自 20 世纪 70 年代以来，我一直在做类似并发的事情，甚至是在无意识的情况下」。事实上，除了 Pike 外，当时许多其他语言、论文甚至书籍都写过关于并发编程的内容，并表明并发编程可以做得很好。只是当时的并发还没有成为主流理念，Go 的诞生部分就是为了解决这个问题，而它最终也成为了 Go 最大的亮点之一。</span></p><p><span style="color:#000000">"</span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span>回顾过去，我认为可以公平地说，Go 在&nbsp;</span></span></span></span></span></span></span><span style="background-color:#ffffff"><span><span><span><span><span>让编程世界相信并发是一个强大的工具（尤其是在多核网络世界中）方面发挥了重要作用，并且它可以比 pthread 做得更好。如今，</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="color:#000000">大多数主流语言都对并发提供了良好的支持。但在当时，这让 Go 看起来像是一种新事物......Go 对并发的支持是一个主要的吸引因素，它帮助增加了早期的采用率，吸引了那些之前没有使用过并发但对其可能性很感兴趣的程序员"。</span></p><p><span style="color:#000000">Pike 认为，这是一个绝对成功的举措，Go"帮助普及了并发作为服务器软件结构的一种方式"。</span></p><p><span style="color:#000000">最后，</span><span style="color:#000000">Pike 简洁的总结了一些促使 Go 成功的因素，「最重要的是，我们得到了 Gophers 这个乐于助人、多元化社区的大力支持。」</span></p><p><span style="color:#000000"><img height="246" src="https://oscimg.oschina.net/oscnet/up-0480c7a61fc3b60e8358dbf35422313383c.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">更多详情<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcommandcenter.blogspot.com%2F2024%2F01%2Fwhat-we-got-right-what-we-got-wrong.html" target="_blank">可查看博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 07:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278027/golang-rob-pike-what-go-got-right-and-wrong</guid>
            <link>https://www.oschina.net/news/278027/golang-rob-pike-what-go-got-right-and-wrong</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[国产数据库管理工具 CloudDM v2.4.4 发布，支持更多数据库对象查看]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><p style="margin-left:0; margin-right:0"><span>CloudDM<span>&nbsp;</span></span><span style="color:#333333">是<span>&nbsp;</span></span><span>ClouGence</span><span style="color:#333333"><span>&nbsp;</span>公司推出的一款</span><strong><span>一站式多数据源开发管理工具</span></strong><span style="color:#333333">，使用它可以方便地访问和管理<span>&nbsp;</span></span><span>MySQL、Oracle、PostgreSQL、阿里云 RDS、Greenplum、TiDB、Redis、StarRocks、Doris、SelectDB、SQL SERVER、ClickHouse、OceanBase 、PolarDB-X 、IBM Db2 等多种不同类型的数据库。通过 CloudDM 丰富的数据源支持可以避免在多个专业工具之间切换，从而提高工作效率。</span></p><p style="margin-left:0; margin-right:0"><span>它是本地化的应用程序，没有后台进程。和<span>&nbsp;</span></span><strong><span>DataGrip</span></strong><span>、</span><strong><span>Navicat</span></strong><span><span>&nbsp;</span>一样在安装完成后，只需要双击应用程序图标，便可以方便的管理位于本地计算机或远程计算机上的数据库。已经支持<span>&nbsp;</span></span><strong><span>Windows</span></strong><span>、</span><strong><span>MacOS</span></strong><span><span>&nbsp;</span>和<span>&nbsp;</span></span><strong><span>Linux</span></strong><span><span>&nbsp;</span>主流操作系统。</span></p></div></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-c0a92ca7654a775e970ab24569abe3fe44d.png" referrerpolicy="no-referrer"></p><div><div><h2><span>更新内容</span></h2><div><ul><li><span>[新增]</span><ul><li><span>针对 MySQL 数据源在数据库对象视图中可以看到，存储过程、触发器、视图、函数</span></li><li><span>针对 Oracle&nbsp;数据源在数据库对象视图中可以看到，存储过程、触发器、视图、函数、</span>序列、物化视图</li><li>针对 <span>PostgreSQL&nbsp;</span>数据源在数据库对象视图中可以看到，存储过程、触发器、视图、函数<span>、</span>序列、物化视图</li><li>针对 <span>Oceanbase&nbsp;</span>数据源在数据库对象视图中可以看到，存储过程、触发器、视图、函数</li><li>针对 <span>SQL SERVER</span><span>&nbsp;数据源在数据库对象视图中可以看到，存储过程、触发器、视图、函数</span><span>、</span>序列</li></ul></li><li><span style="color:#333333">[优化]</span><ul><li>优化，移除 TiDB 数据库不兼容的数据库对象，详情请参照 TiDB 官方文档 v7.5</li></ul></li><li><span style="color:#333333">[修复]</span><ul><li><p>修复，内置用户出现多条记录而导致的报错问题</p></li><li><p>修复 Oracle 数据库查看普通表时连同物化视图一起获取的问题</p></li><li><p>修复 Oracle 数据库访问部分 Schema 时，由于使用权限需求过高的语句，而出现表或视图不存在报错的问题</p></li></ul></li></ul></div></div><h2><span>下载与反馈</span></h2><ul><li><span>产品官网：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fclouddm-personal" target="_blank"><span>https://www.clougence.com/clouddm-personal</span></a></li><li><span>问题反馈：</span><a href="https://gitee.com/clougence/clouddm-issue/issues" target="_blank"><span>https://gitee.com/clougence/clouddm-issue/issues</span></a></li><li>Release Node：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fdmp-doc%2Freleaseinfo%2Fdesktop_2_4_2" target="_blank">https://www.clougence.com/dmp-doc/releaseinfo/desktop_2_4_2</a></li><li><span style="color:#333333">微信交流群：访问产品官网，扫描右侧二维码即可加入</span></li></ul></div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 07:00:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/278017/clouddm-2-4-4</guid>
            <link>https://www.oschina.net/news/278017/clouddm-2-4-4</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源 - 奋进者的盛宴 | Apache StreamPark in 2023]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ed43d3f9ec4da28ec68103abf6c2af05c00.png" referrerpolicy="no-referrer"></p><p>时间的指针已跨过 2023，对于 Apache StreamPark 社区而言，这是一个值得书写回顾的时刻。Apache StreamPark 从最初的个人项目到加入全球最大的开源软件基金会（Apache Software Foundation），一路走来我们始终相信坚持和协作的力量，相信社区的力量。开源，不是天才的甜点，而是奋进者的盛宴。此时此刻，让我们一起回顾 Apache StreamPark 社区过去一年的精彩时刻。</p><span id="OSC_h1_1"></span><h1>社区向好发展</h1><p>在过去一年，Apache StreamPark 一直在积极地建设社区，大力地培养开发者，遵循 Apache 软件基金会的「Community over Code」原则来运营社区，以开放包容、自由平等的态度对待每位参与者，在 2023 年社区有许多值得被分享的事情：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-549cf545062bc87773f5f663f719934c10a.png" referrerpolicy="no-referrer"></p><ul><li><p>全年发布了&nbsp;<strong>2.0.0 -&nbsp;2.1.2</strong>&nbsp;共&nbsp;**<code>4</code>**个 Apache 版本。</p></li><li><p>社区参加了 2023 年 8 月「Community over Code」ASIA 大会，带来**<code>3</code>**场 Apache StreamPark 相关的主题分享。</p></li><li><p>投票推选了&nbsp;<strong><code>2</code></strong>&nbsp;位&nbsp;PPMC Member&nbsp;和**<code>5</code>**位新晋 Committer，分别是：Chunjin Mu、Sizhu Wang、Li Zhou、Zhongqiang Gong、Yuepeng Pan、Cancai Cai、Chao Zhang，恭喜他们，感谢他们为 Apache StreamPark 所做的贡献。</p></li><li><p>重新制作上线了官网，整理上线了 <strong><code>8</code></strong>&nbsp; 篇生产实践的文章。</p></li><li><p>项目 Star 新增 <strong><code>800+</code></strong>，累积 <strong><code>3.5k</code></strong>&nbsp;, 项目 fork 累积 <strong><code>900+</code></strong>。</p></li><li><p>贡献者总数达到&nbsp;<strong><code>130+</code></strong>&nbsp;&nbsp;相比 2022 年新增了&nbsp;<strong><code>40+</code></strong>。</p></li><li><p>共计 <strong><code>59</code></strong> 位开发者提交了超过 <strong><code>550</code></strong> 个 commit。</p></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bd5f43f528488dde6a0b7be9e8847ef2234.png" referrerpolicy="no-referrer"></p><p>2023 年 9 月 1 日，是 Apache StreamPark 孵化整整一周年的日子，在这个值得纪念的日子里，我们特此剪辑了一个短片，回顾 Apache StreamPark 的发展历程：</p><p><iframe frameborder="no" height="400px" scrolling="no" src="https://player.bilibili.com/player.html?aid=275553707&amp;bvid=BV1aF41167pF&amp;cid=1255969269&amp;p=1" width="720px" referrerpolicy="no-referrer"></iframe></p><p>&nbsp;</p><span id="OSC_h1_2"></span><h1>项目关键进展</h1><p>2023 年 Apache StreamPark&nbsp;在开发新功能的同时，对项目的稳定性持续打磨，在对 Apache Flink 的基础能力支持上日益成熟，以下是项目的关键进展:</p><ol><li><strong>更好的 Flink 支持</strong>：在 Flink 作业的部署模式和版本支持上都做大量改进，开发管理 Flink 作业更加的简单丝滑。重构了 Flink on K8s 作业部署和状态监控，整体稳定性达到生产可用级别，并经过用户 500+&nbsp;生产环境作业的验证。</li><li><strong>新功能持续更新</strong>：项目在功能上持续更新，新增了团队管理、LDAP 登录、变量等深受欢迎的企业级特性和能力，更贴合企业的使用。基于 Vue3 重构了项目前端，显著提升了项目的可读性、可维护性，前端的构建和启动速度提升了 5~10&nbsp;倍。</li><li><strong>产品越发成熟</strong>：这一年我们发布了三个改进 &amp; Bug 修复版本，在此过程中我们收集了大量的用户反馈，项目从前端到后台，不论是作业的开发部署，还是状态管理，使用体验...方方面面都做了大量改进，产品综合表现越发成熟稳定。</li><li><strong>支持生态项目:</strong> &nbsp;无缝地支持对接 Apache Doris、Paimon 等数据集成作业。</li><li><strong>安全性 &amp; 合规性</strong>：作为孵化中的项目，项目合规是重要的一环，我们排查解决了项目中存在漏洞的依赖，修复了项目自身的漏洞，4 次发版通过 Apache 的检查，项目合规性得到有效保证。</li></ol><span id="OSC_h1_3"></span><h1><strong>用户持续增长</strong></h1><p>在 2023 年，我们迎来了越来越多的用户，公开收集的登记使用用户新增 24 位。目前如，百度、腾讯、联通、天翼云、自如、圆通、网易智企、同程数科、长安汽车、马蜂窝，等一二线大厂都在使用，其他使用或者基于 Apache StreamPark 二次开发的公司更是不计其数。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-60000a0362483b96361b6cadac51b0d8ebb.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_4"></span><h1><strong>荣获多项殊荣</strong></h1><p>在 2023 年，Apache StreamPark 社区获得了多项荣誉。Apache StreamPark&nbsp;作为一个年轻的开源项目，能在多个评选中获得各个不同主办方对项目的认可并被授予表彰，不仅证明了项目的价值，更提高了项目的知名度，这是对我们多年来坚持不懈努力的嘉许。这些奖项不仅肯定了我们才华横溢的贡献者，更见证了开源社区的繁荣与创新。感谢各个主办方，感谢我们的导师和所有的贡献者们。让我们牢记这份珍贵的荣誉，我们将继续努力，争取更好的成绩。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e30c75b0c6a7af48c7d9547919e21a28e1a.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_5"></span><h1>持续分享输出</h1><p>2023 Apache StreamPark 社区在技术分享上持续输出，在&nbsp;2023 年 8 月「Community over Code」ASIA 大会，带来&nbsp;<strong><code>3</code></strong> 场 Apache StreamPark 相关的主题分享。此外产生了来自 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5OTcwNTg1MQ%3D%3D%26mid%3D2247553003%26idx%3D1%26sn%3D0b5647ba233dd7fdb3f86c6365366503%26chksm%3Dc04d717ff73af869c31ec1db46beb48c9a36ede1dbe525c4660862e55a77d584de5ffa440624%26scene%3D21%23wechat_redirect" target="_blank">自如</a><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5OTcwNTg1MQ%3D%3D%26mid%3D2247547381%26idx%3D1%26sn%3D071f941543a2b9539d14f5d51275d9bd%26chksm%3Dc04d4761f73ace77c9bd3d07284ea506173dcd7722c0d75a6827c3f9f63391adf1735840a841%26scene%3D21%23wechat_redirect" target="_blank">、</a><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5OTcwNTg1MQ%3D%3D%26mid%3D2247547381%26idx%3D1%26sn%3D071f941543a2b9539d14f5d51275d9bd%26chksm%3Dc04d4761f73ace77c9bd3d07284ea506173dcd7722c0d75a6827c3f9f63391adf1735840a841%26scene%3D21%23wechat_redirect" target="_blank">顺网科技</a><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5OTcwNTg1MQ%3D%3D%26mid%3D2247544817%26idx%3D1%26sn%3Dca8a8978254e5e38042ad729766e67e8%26chksm%3Dc04d5165f73ad873f836d114fb3b16a4877ce19182d11043ebfd759f1ef5f73c34e71b4aa2ef%26scene%3D21%23wechat_redirect" target="_blank">、</a><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5OTcwNTg1MQ%3D%3D%26mid%3D2247544817%26idx%3D1%26sn%3Dca8a8978254e5e38042ad729766e67e8%26chksm%3Dc04d5165f73ad873f836d114fb3b16a4877ce19182d11043ebfd759f1ef5f73c34e71b4aa2ef%26scene%3D21%23wechat_redirect" target="_blank">海程邦达&nbsp;等企业的</a><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5OTcwNTg1MQ%3D%3D%26mid%3D2247544817%26idx%3D1%26sn%3Dca8a8978254e5e38042ad729766e67e8%26chksm%3Dc04d5165f73ad873f836d114fb3b16a4877ce19182d11043ebfd759f1ef5f73c34e71b4aa2ef%26scene%3D21%23wechat_redirect" target="_blank">多篇</a> 生产实践文章，并且生产了数十个原创视频，在各个渠道累计播放量 <strong><code>20W+</code></strong> &nbsp;。在此非常感谢各合作社区的关照和传播，正是各个合作社区伙伴们的帮衬和关照才能使得 Apache StreamPark 项目的影响力不断上升。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-99395c3375f020ad6ffa87b072eafe03929.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><span id="OSC_h1_6"></span><h1><strong>展，望 2024</strong></h1><p>如果用一个词概括总结 Apache StreamPark 的 2023, 我想就是: 奋进，持志如心痛，我们始终以奋进的姿态推动项目发展，为用户的使用落地保驾护航。停留片刻，岁月扉页已翻到 2024，2024 Apache&nbsp;StreamPark 有哪些期待呢？<br> Apache StremaPark 最初的想法就是简化 Flink | Spark 的开发和管理，让流处理更简单，因此会继续加大，对 Flink 的支持力度，包括不限于支持 PyFlink，探索 Sql-gateway 等交互式方面的体验，继续完善底层基础建设，改进 Flink on K8S 的基础能力，加强完善&nbsp;SLA&nbsp;的方面的保障体系，和生态项目共同建设发展，更好的支持和集成 Apache Paimon/Doris 和 Flink CDC 等生态项目。 Apache&nbsp;StreamPark 从来都不是一个独立的平台，也并非绑定在某个流计算引擎之上，因此，在 2024 年社区会发起讨论，启动对 Apache Spark 的支持，包括不限于开发框架和作业管控平台，使其真正做到让流处理更简单，成为流处理开发管理和实时计算平台事实上的最佳选择。</p><span id="OSC_h1_7"></span><h1>加入我们</h1><p>Apache&nbsp;StreamPark 是一个流处理应用程序开发管理框架。旨在轻松构建和管理流处理应用程序，提供使用 Apache Flink 和 Apache Spark 编写流处理应用程序的开发框架。同时 Apache&nbsp;StreamPark 提供了一个流处理应用管理平台，核心能力包括但不限于应用开发、调试、交互查询、部署、运维、实时数仓等，最初开源时项目名称叫 StreamX ，于 2022 年 8 月更名为 StreamPark，随后通过投票正式成为 Apache 软件基金会的孵化项目。目前已有腾讯、百度、联通、天翼云、自如、马蜂窝、同程数科、长安汽车、大健云仓等众多公司在生产环境使用。</p><p>Apache StreamPark 社区一直以来都以用心做好一个项目为原则，高度关注项目质量，努力建设发展社区。加入 Apache 孵化器以来，认真学习和遵循「The Apache Way」，我们将秉承更加兼容幷包的心态，迎接更多的机遇与挑战。诚挚欢迎更多的贡献者参与到社区建设中来，和我们一道携手共建。</p><p><strong>💻 项目地址：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fstreampark" target="_blank">https://github.com/apache/streampark</a><br><strong>🧐 提交问题和建议：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fstreampark%2Fissues" target="_blank">https://github.com/apache/streampark/issues</a><br><strong>🥁 贡献代码：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fstreampark%2Fpulls" target="_blank">https://github.com/apache/streampark/pulls</a><br><strong><strong>📮&nbsp;<strong>Proposal：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwiki.apache.org%2Fconfluence%2Fdisplay%2FINCUBATOR%2FStreamPark%2BProposal" target="_blank">https://cwiki.apache.org/confluence/display/INCUBATOR/StreamPark+Proposal</a><br> 📧 订阅社区开发邮件列表：dev@streampark.apache.org<br> 💁‍♀️</strong></strong>社区沟通：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-463ce49840586bf1b6c38042bd20495d7ba.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 06:19:16 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/streampark/blog/11027473</guid>
            <link>https://my.oschina.net/streampark/blog/11027473</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报：「小而美」 Tauri 已支持 Android 和 iOS；苹果开源 Pkl]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><p><strong># 2024.2.5</strong></p><h2><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日要点</span></span></span></span></span></span></h2><p style="text-align:justify"><strong>OpenSource Daily</strong></p><h3><u><a href="https://www.oschina.net/news/277597/vuejs-10yr" target="_blank">Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Tauri v2 首个 Beta 已发布，新版本添加了<strong>对移动端（iOS 和 Android）的支持</strong>。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a84ea1fdc7a280dc620420b12cee4e8bf63.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">公告<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbeta.tauri.app%2Fblog%2Ftauri-2-0-0-beta%2F" target="_blank">写道</a></u>：「Tauri v2 是支持跨平台开发的一个重大里程碑，开发桌面和移动应用程序从未如此简单。你可以将现有的桌面程序无缝迁移到移动设备，并获得原生 API 和 Tauri CLI 的出色开发者体验。」</p><h3><u><a href="https://www.oschina.net/news/277816/apple-pkl-lang" target="_blank">苹果开源 Pkl —— 用于生成配置的编程语言</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">苹果发布了专用于创建配置文件的脚本编程语言&nbsp;Pkl（发音为 Pickle）。Pkl 团队<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpkl-lang.org%2Fblog%2Fintroducing-pkl.html" target="_blank">介绍称</a></u>，该项目旨在应对 JSON、YAML 和属性列表等静态配置格式的不足，提供一种介于静态语言和通用语言之间、「两全其美」的方案。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Pkl 的三个设计目标是语法安全、可扩展和 IDE 集成，使用声明式语法、易读易写，但也支持类、函数、条件和循环等常见的编程语言功能。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>示例代码</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">bird.pkl</p><pre style="margin-left:0; margin-right:0; text-align:left"><code class="language-json"><span style="color:#6f42c1">name</span> = <span style="color:#032f62">"Swallow"</span><span style="color:#6f42c1">job</span><span style="color:#032f62">{</span><span style="color:#6f42c1">title</span> = <span style="color:#032f62">"Sr. Nest Maker"</span><span style="color:#6f42c1">company</span> = <span style="color:#032f62">"Nests R Us"</span><span style="color:#6f42c1">yearsOfExperience</span> = <span style="color:#032f62">2</span><span style="color:#6f42c1">}</span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">↓</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">bird.json</p><pre style="margin-left:0; margin-right:0; text-align:left"><code class="language-json">{
  <span style="color:#6f42c1">"name"</span>: <span style="color:#032f62">"Swallow"</span>,
  <span style="color:#6f42c1">"job"</span>: {
    <span style="color:#6f42c1">"title"</span>: <span style="color:#032f62">"Sr. Nest Maker"</span>,
    <span style="color:#6f42c1">"company"</span>: <span style="color:#032f62">"Nests R Us"</span>,
    <span style="color:#6f42c1">"yearsOfExperience"</span>: <span>2</span>
  }
}</code></pre><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日推荐</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-41e1b46b27f9899b2f2893d8ed2b70534e9.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">开源之声</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-e3a4add7186ca1ff7c533ae75453c1ebc93.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">每日项目榜</span></span></span></span></span></span></strong></h2><p>Gitee 榜单：</p><p><img src="https://oscimg.oschina.net/oscnet/up-a1f42bf84d0c31d454864b491f232d5f371.png" referrerpolicy="no-referrer"></p><hr><p><strong>往期回顾</strong></p><ul><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf" target="_blank">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></u></li><li><u><a href="https://www.oschina.net/news/277585" target="_blank">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></u></li><li><u><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></u></li><li><u><a href="https://www.oschina.net/news/277214" target="_blank">开源日报第 006 期：选择技术栈一定要选择开源的</a></u></li><li><a href="http://www.oschina.net/news/277040"><u>开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</u></a></li><li><u><a href="https://www.oschina.net/news/276864" target="news">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 04:49:20 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277997</guid>
            <link>https://www.oschina.net/news/277997</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[亿级流量高并发春晚互动前端技术揭秘]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>前言</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2022 年 1 月，京东成为央视总枱 2022 年春节联欢晚会独家互动合作伙伴，双方在红包互动、电商等方面展开全方位深度合作。在除夕当天产生 691 亿次互动，送出 15 亿元红包好物。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">如何在这种大规模、高并发的场景下，确保系统的稳定性和性能，</span></span></span><span><span><span>为用户提供稳定流畅的互动体验</span></span></span><span><span><span style="color:#24292f">，成为了我们亟待解决的问题。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>接下来我们主要从静态资源优化、缓存、容错、工程化几个方面来详细介绍前端团队所做的努力和创新。</span></span></span></p><span id="OSC_h1_2"></span><h1><span><span><span>静态资源优化</span></span></span></h1><span id="OSC_h2_3"></span><h2><span><span><span>首屏资源加载策略</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在春晚主持人口播之后，大量用户会集中在一段时间内涌入互动页面，这会导致流量峰值。为了降低页面打开时的请求次数和资源体积，我们根据页面交互，将所需资源分为三类：首屏、次屏以及操作后。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>首屏资源主要包括：HTML 文档、JavaScript、CSS 以及样式图片。由于这是单页面应用，我们可以通过常规技术将 JS 和 CSS 进行打包。对于样式图片，我们可以通过按需加载的方式，显著减小首屏资源体积。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>页面包含两个楼层，首屏的互动楼层和次屏的万券齐发楼层。其中，首屏会展示两排优惠券，因此，我们需要在首屏加载这部分券楼层的样式图片。互动主玩法中主要包括抽奖弹窗、邀人弹窗和击鼓游戏。通过拆分优化，首屏的样式图片体积减少约 41%。再加上</span></span></span><span><span><code><span>CDN</span></code></span></span><span><span><span>降质和</span></span></span><span><span><code><span>WebP</span></code></span></span><span><span><span>参数的优化，样式图片的体积可以降低到 178KB。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>同时，我们将需要单独加载的击鼓游戏精灵动画图从首屏加载清单中剥离，使得首屏样式图片的加载次数从 2 次减少到 1 次。这样一来，用户在打开页面时，所需的请求次数和资源体积都得到了显著降低，进而提高了用户体验。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><span id="OSC_h2_4"></span><h2><span><span><span>动画图片低损压缩</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>动画是页面资源消耗的主要部分。在春晚页面中，我们需平衡用户交互体验与资源优化。经过与设计和</span></span></span><span><span><code><span>CDN</span></code></span></span><span><span><span>团队多次沟通，我们决定采用技术手段降低资源消耗，同时保证用户体验。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>首先是确定技术方案。设计团队最初提议使用 3D 模型，需借助</span></span></span><span><span><code><span>WebGL</span></code></span></span><span><span><span>进行渲染。但这存在两个问题：一是资源消耗大，3D 模型通常包含 3～4 个文件，首屏加载请求数增加；二是兼容性问题，WebGL 在低端机型上表现不佳。考虑到观众范围广泛，我们决定选用兼容性更好的方案。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>经过技术调研，我们最终确定采用帧动画方案：设计团队将 3D 动画转化为精灵图，并将不变部分（如鼓架）单独抽离。精灵图仅包含运动部分（如鼓面敲击动画），有效降低资源消耗。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-44aA44DCqO28QCNJCth.jpg" width="794" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">在确定方案后，设计团队导出了第一版资源文件。然而，精灵图大小为 1236KB，主光效也有 400KB，离我们的目标还有一定差距。经过双方反复尝试，我们通过抽帧方式将击鼓精灵图从 24 帧降至 4 帧，大小从 1236KB 降至 265KB。结合降质参数和</span></span></span><span><span><code><span>WebP</span></code></span></span><span><span><span style="color:#24292f">格式，最终大小仅为 78KB，下降了 93%。此外，我们将主光效换成放大一倍的一倍图，并通过 CSS 属性 scale 实现放大，进一步节省资源。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><span id="OSC_h2_5"></span><h2><span><span><span>雪碧图方案的演进</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>元素背景图使用雪碧图模式，是前端基本优化手段，可以显著降低请求次数。我们在首屏资源拆分后的情况下，可以将 18 个样式背景图合并成 1 个。相较于常规方案，春晚红包还扩展了 2 个功能：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、css 雪碧图在运行时为图片 URL 添加</span></span></span><span><span><code><span>CDN</span></code></span></span><span><span><span>降质参数和 webp 格式转换参数（someimage.png!q70.webp），极限降低 CDN 带宽。我们扩展开发了自动雪碧图脚本，可以支持自动生成 2 套</span></span></span><span><span><code><span>background-image</span></code></span></span><span><span><span>样式代码，分别对应普通图片 URL 和带!q70.webp 的 URL。通过运行时检测 webp 支持特性，切换 HTML 标签上的 class 名，来使对应的后代选择器的</span></span></span><span><span><code><span>background-image</span></code></span></span><span><span><span>属性生效。对于</span></span></span><span><span><code><span>webp</span></code></span></span><span><span><span>的特性检测的技术方案，我们考虑过如下两种方案：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>a、通过版本判断，从 caniuse 看，可以按照只有 iOS14 以下不支持 webp 来作为判断依据。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-44yN6AAMKClShtTum.png" width="794" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>b、通过创建一个 Image 对象，其 src 为一个基于 base64 的 webp 图片，根据 load 是否成功来判断是否支持 webp。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>比较这 2 个方案，方案 a 的优势是通过 UA 判断系统版本是同步执行的，可以在调用渲染页面前的任意地方执行并修改 HTML 标签的 class 属性。确保内容渲染后有正确的背景图 css 生效。不会对原有渲染逻辑产生入侵性修改。而方案 b 的优势是经过大规模实践，判断逻辑的可靠性较高，缺点是异步逻辑的，需要修改原来的渲染逻辑。由于我们这次需要支持全国亿万用户，为确保稳定可靠，所以最终选择方案 b。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>css 文件中的背景图样式，是在渲染相应 DOM 的时候才发起请求，又由于 React 渲染是同步的，</span></span></span><span><span><span style="color:#24292f">我们需要调整执行 render 的时机</span></span></span><span><span><span>，以确保在渲染页面内容之前完成 HTML 的 class 属性设置，</span></span></span><span><span><span style="color:#24292f">避免请求两次图片</span></span></span><span><span><span>。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-44uVGT44VB6PK1SYoJ.png" width="503" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">2、动态雪碧图。</span></span></span><span><span><span>万券齐发楼层首屏露出 2 排 8 个坑位，对应 8 次 logo 图片请求，由于券和 logo 的数据是通过接口下发的，所以无法使用编译时雪碧图方案。为了将图片请求次数减少到 1 次，我们和后台、视觉、产品沟通后，设计了一套多团队协作的方案。</span></span></span><span><span><span style="color:#333333">设计同学可以根据产品提前确认的券位置将 logo 图合并成雪碧图，并上传到云存储。展示如下：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-44IbegPFVTEnXOKQY.png" width="487" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">雪碧图规格确定后，通过固定的</span></span></span><span><span><code><span>background-position</span></code></span></span><span><span><span style="color:#333333">属性，以及动态设置 logo 元素的</span></span></span><span><span><code><span>className</span></code></span></span><span><span><span style="color:#333333">和背景图，即可实现动态雪碧图。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-441MVd44OU6HqwHUm8.png" width="794" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><span id="OSC_h2_6"></span><h2><span><span><span>自动衍生 WebP 背景图 css 代码</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">上面提到运行时判断是否使用 webp 背景图，那对应的 css 代码就需要两套，利用 PostCSS 插件可以在编译时自动基于原有背景图样式代码生成 webp 背景图的代码，在紧张的开发过程中避免出错和遗漏。通过使用</span></span></span><span><span><span>PostCSS 插件中，</span></span></span><span><span><span style="color:#24292f">CSS 对象的</span></span></span><span><span><code><span>walkDecls</span></code></span></span><span><span><span style="color:#24292f">方法，我们可以遍历所有的</span></span></span><span><span><code><span>background-image</span></code></span></span><span><span><span style="color:#24292f">属性。然后，使用正则表达式匹配对应的样式，在编译打包时生成一套</span></span></span><span><span><span style="background-color:#d9d9d9; color:#24292f">.webp .origin-class</span></span></span><span><span><span style="color:#24292f">选择器的样式。在运行时，如果 HTML 标签具有</span></span></span><span><span><code><span>webp</span></code></span></span><span><span><span style="color:#24292f">属性，系统将后代选择器的样式覆盖原有样式。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-44wzWC44a28K7BV44rWb.png" width="794" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>除了 img 标签，我们在背景图也进行了 webp 优化，使得全站图片由 902.4kb 减小到 512.6kb，经过多种流量和兼容性测试效果表现良好。</span></span></span><span><span><span style="color:#24292f">由此可见，在项目中大量使用图片时，</span></span></span><span><span><code><span>WebP</span></code></span></span><span><span><span style="color:#24292f">格式已成为一个不容忽视的性能优化关键。</span></span></span></p><span id="OSC_h1_7"></span><h1><span><span><span>降低服务器成本及风险</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>春晚活动是一个典型的秒杀业务场景：随着春晚主持人一声令下，全国观众会同一时间涌入活动页面，给接口带来超高的流量压力。下面将从流量削峰、降级处理两个个方面介绍前端如何与后台合作应对这类高并发场景。</span></span></span></p><span id="OSC_h2_8"></span><h2><span><span><span>流量削峰</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在高并发场景下，流量削峰有助于系统平稳度过流量高峰。本次活动中，初始化接口和击鼓抽奖接口流量最大，因此我们主要针对这两个接口进行削峰。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1.初始化接口：在页面加载之前，即资源位入口，配置一个「加载中」页面链接。这个页面随机加载 1-3 秒后跳转到活动页面。当流量超过系统承载能力时，开启灰度开关，部分用户进入此页面，然后等待几秒后进入活动页面。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2.击鼓抽奖接口：本次活动的核心玩法接口。如果仅仅是简单地随机延时几秒请求，会极大地影响用户体验。我们采用更精细化的处理方式。已知击鼓交互在用户敲击满次数或倒计时结束时触发抽奖接口，因此，随机设定敲鼓次数，将原本集中在 1-2 秒内的请求打散至 10 秒区间，用户几乎无感知。</span></span></span></p><span id="OSC_h2_9"></span><h2><span><span><span>即时状态的本地存储</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>针对用户优惠券领取状态的保存问题，权衡了多种因素，如活动规模、服务器端压力和活动持续时长等。最终，我们决定采用前端本地缓存来保存用户领券状态，从而提升性能并优化用户体验。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>我们对比了前端常用的本地存储机制，如</span></span></span><span><span><code><span>cookie</span></code></span></span><span><span><span>、</span></span></span><span><span><code><span>localStorage</span></code></span></span><span><span><span>和</span></span></span><span><span><code><span>sessionStorage</span></code></span></span><span><span><span>。然而，这些机制各有优缺点：</span></span></span></p><div><span>1.</span><span><span><span><code><span>cookie</span></code></span></span><span><span><span>存储空间较小（4K），且在与服务端通信时会占用请求头部，可能导致请求头过大，超过服务端设置的最大值，进而引发报错，并增加不必要的网络消耗。</span></span></span></span></div><div><span>2.</span><span><span><span><code><span>sessionStorage</span></code></span></span><span><span><span>生命周期较短，仅适用于会话期间。</span></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>综合考虑后，我们选择了</span></span></span><span><span><code><span>localStorage</span></code></span></span><span><span><span>作为优化方案。它具有较长的生命周期和较大的储存空间（2.5M-4M），能满足业务需求。采用</span></span></span><span><span><code><span>localStorage</span></code></span></span><span><span><span>缓存数据，不仅可以简化调用链路、降低风险和节约成本，还能直接从本地读取券的领取状态，避免网络延迟导致的响应时间过长，提升用户体验。</span></span></span></p><span id="OSC_h1_10"></span><h1><span><span><span>工程化</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">为了使业务开发人员能更专注于自身业务开发，我们将手机兼容性、设备分级、环境判断、自动合成雪碧图、自动图片压缩、自动上传云存储、合并代码文件等通用解决方案统一纳入工程化层面处理。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通过工程化，可以最大程度的释放生产力和创造力。上述的各种前端各种优化方案，离不开工程化的助力，与此同时保证了在快速开发交付的效率和稳定性。</span></span></span></p><span id="OSC_h2_11"></span><h2><span><span><span style="color:#24292f">提供拟真的</span></span></span><span><span><code><span>MOCK</span></code></span></span><span><span><span style="color:#24292f">环境</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">我们搭建了一个拟真的</span></span></span><span><span><code><span>MOCK</span></code></span></span><span><span><span style="color:#24292f">环境，以在短时间内模拟所需场景，确保在任意场景下都能提供友好交互。该环境 1:1 还原了服务端的</span></span></span><span><span><code><span>MOCK</span></code></span></span><span><span><span style="color:#24292f">环境，能快速模拟正常数据，同时还能模拟请求超时、HTTP 状态码异常、数据结构异常、非常规业务异常码等场景。在 ajax 模块中，我们采用透明转发方式，降低业务开发同学创作 mock 数据的成本，避免 mock 数据进入生产环境。如图所示，</span></span></span><span><span><code><span>MOCK</span></code></span></span><span><span><span style="color:#24292f">开发环境与联调开发环境对比，可以看出 mock 环境对业务开发来说是透明且无副作用的，同时又能快速</span></span></span><span><span><code><span>MOCK</span></code></span></span><span><span><span style="color:#24292f">数据。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-44ttXjI12BZUx77C286.png" width="794" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><span id="OSC_h2_12"></span><h2><span><span><span style="color:#24292f">编写稳定高效的发布脚本</span></span></span></h2><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">春晚参与用户的设备种类繁多，我们需在不同设备上实现极致体验，同时减轻</span></span></span><span><span><code><span>CDN</span></code></span></span><span><span><span style="color:#24292f">过高</span></span></span><span><span><code><span>QPS</span></code></span></span><span><span><span style="color:#24292f">的压力。为此，我们与客户端团队联合，根据不同设备的不同版本，提供了内置包、离线包和线上</span></span></span><span><span><code><span>CDN</span></code></span></span><span><span><span style="color:#24292f">包等多套环境。结合多轮内测和公测，在短短 27 天内，需部署 10 多套环境。线上环境部署错综复杂，还包括资源收集和大小计算等工作。若采用人工方式，极易出现误操作，带来不良后果。幸运的是，项目初期便引入了环境变量，通过环境变量解决不同环境间的差异。此外，在编译前后加入了一系列脚本，替代人工拷贝上传、资源收集、大小计算等操作，避免人工操作失误，提高稳定性，确保每个环境稳定部署。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-28-18-447Geb28YorvEZ9c7k.png" width="794" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p>&nbsp;</p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>工程化的目标，始终是提升开发效率，降低开发难度，分离关注点，让业务研发同学更专注于自身业务的开发。</span></span></span></p><span id="OSC_h1_13"></span><h1><span><span><span>容灾</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>作为一档全球直播节目，现场不免会出现各种状况，需要做好各种紧急预案。降级处理分为主动降级和被动降级两类：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1.</span></span></span><span><span><code><span>主动降级：各个资源位和交互按钮上添加降级开关，上游接口或下游页面出现紧急情况时，可通过配置 CMS 快速打开降级开关。</span></code></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2.被动降级：通过不同样式和文案提示区分各类接口异常码及系统环境，快速定位问题原因。这样一来，客服同学可以第一时间安抚客户，并提供相应处理方案。</span></span></span></p><span id="OSC_h1_14"></span><h1><span><span><span>总结</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#24292f">2022 年央视春晚互动项目是一次大规模、高并发的挑战，前端团队通过静态资源优化、缓存、容错和工程化等方面的努力和创新，确保了系统的稳定性和性能，为用户提供了一个稳定流畅的互动体验。在静态资源优化方面，团队通过首屏资源拆分、帧动画方案替代 3D 模型、动态雪碧图和</span></span></span><span><span><code><span>WebP</span></code></span></span><span><span><span style="color:#24292f">格式优化等技术手段，显著降低了资源消耗和请求次数。在降低服务器成本及风险方面，选择</span></span></span><span><span><code><span>localStorage</span></code></span></span><span><span><span style="color:#24292f">作为非常规优化方案，提升用户体验。在容错方面，流量削峰和降级处理，确保系统稳定运行。在工程化方面，统一处理通用解决方案、提供拟真的</span></span></span><span><span><code><span>MOCK</span></code></span></span><span><span><span style="color:#24292f">环境和编写稳定高效的发布脚本，降低开发难度，确保每个环境稳定部署。通过这些技术手段和创新，前端团队成功应对了春晚互动项目带来的技术难题，为用户提供了一个稳定流畅的互动体验。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">作者：京东零售，赵越</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">来源：京东云开发者社区，转载请注明来源</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 06 Feb 2024 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/11032956</guid>
            <link>https://my.oschina.net/u/4090830/blog/11032956</link>
            <author>
                <![CDATA[京东云开发者]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Anolis OS 获 Gitee 最有价值开源项目称号]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="text-align: justify;margin-left: 8px;margin-right: 8px;margin-bottom: 8px;line-height: 1.75em;" data-mpa-powered-by="yiban.io"><ne-clipboard source="https%3A%2F%2Faliyuque.antfin.com%2Fhd01475069%2Fnzgfgg%2Fczegeetz123okfva%3FsingleDoc%23"></ne-clipboard></section><p style="text-align: justify;margin-left: 8px;margin-right: 8px;line-height: 1.75em;margin-bottom: 24px;"><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">近日，龙蜥操作系统 Anolis OS 获得 Gitee 认可，在众多开源项目中脱颖而出，荣获 GVP（ Gitee Most Valuable Project，即最有价值开源项目）称号。</span></p><article data-identifier-application__slash__x-doc-key="ABmOor4xydxWqawZ"><article data-clipboard-cangjie="[&quot;root&quot;,{},[&quot;p&quot;,{&quot;uuid&quot;:&quot;lrezcm8lam8s8sce36&quot;,&quot;jc&quot;:&quot;center&quot;},[&quot;img&quot;,{&quot;src&quot;:&quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/ABmOor4rBQ3yqawZ/img/923b311f-c690-47e0-968b-cf7192fd62ea.jpg&quot;,&quot;width&quot;:341,&quot;height&quot;:455,&quot;opacity&quot;:1,&quot;uuid&quot;:&quot;ls2t7an6bcla5vee0pa&quot;,&quot;extraData&quot;:{&quot;resourceId&quot;:&quot;923b311f-c690-47e0-968b-cf7192fd62ea&quot;,&quot;metaData&quot;:{&quot;size&quot;:2830050,&quot;originWidth&quot;:3024,&quot;originHeight&quot;:4032,&quot;format&quot;:&quot;jpg&quot;,&quot;ratio&quot;:1}},&quot;rotation&quot;:0},[&quot;span&quot;,{&quot;data-type&quot;:&quot;text&quot;},[&quot;span&quot;,{&quot;data-type&quot;:&quot;leaf&quot;},&quot;&quot;]]]]]" data-identifier-application__slash__x-cangjie-fragment="JTdCJTIya2xhc3MlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMmtsYXNzJTIyJTNBJTIyYmxvY2slMjIlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIyZGF0YSUyMiUzQSU3QiUyMnV1aWQlMjIlM0ElMjJscmV6Y204bGFtOHM4c2NlMzYlMjIlMkMlMjJqYyUyMiUzQSUyMmNlbnRlciUyMiU3RCUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2xhc3MlMjIlM0ElMjJpbmxpbmUlMjIlMkMlMjJ0eXBlJTIyJTNBJTIyaW1hZ2UlMjIlMkMlMjJkYXRhJTIyJTNBJTdCJTIyc3JjJTIyJTNBJTIyaHR0cHMlM0ElMkYlMkZhbGlkb2NzLm9zcy1jbi16aGFuZ2ppYWtvdS5hbGl5dW5jcy5jb20lMkZyZXMlMkZBQm1Pb3I0ckJRM3lxYXdaJTJGaW1nJTJGOTIzYjMxMWYtYzY5MC00N2UwLTk2OGItY2Y3MTkyZmQ2MmVhLmpwZyUyMiUyQyUyMndpZHRoJTIyJTNBMzQxJTJDJTIyaGVpZ2h0JTIyJTNBNDU1JTJDJTIyb3BhY2l0eSUyMiUzQTElMkMlMjJ1dWlkJTIyJTNBJTIybHMydDdhbjZiY2xhNXZlZTBwYSUyMiUyQyUyMmV4dHJhRGF0YSUyMiUzQSU3QiUyMnJlc291cmNlSWQlMjIlM0ElMjI5MjNiMzExZi1jNjkwLTQ3ZTAtOTY4Yi1jZjcxOTJmZDYyZWElMjIlMkMlMjJtZXRhRGF0YSUyMiUzQSU3QiUyMnNpemUlMjIlM0EyODMwMDUwJTJDJTIyb3JpZ2luV2lkdGglMjIlM0EzMDI0JTJDJTIyb3JpZ2luSGVpZ2h0JTIyJTNBNDAzMiUyQyUyMmZvcm1hdCUyMiUzQSUyMmpwZyUyMiUyQyUyMnJhdGlvJTIyJTNBMSU3RCU3RCUyQyUyMnJvdGF0aW9uJTIyJTNBMCU3RCUyQyUyMm5vZGVzJTIyJTNBJTVCJTdCJTIya2xhc3MlMjIlM0ElMjJ0ZXh0JTIyJTJDJTIybGVhdmVzJTIyJTNBJTVCJTdCJTIya2xhc3MlMjIlM0ElMjJsZWFmJTIyJTJDJTIydGV4dCUyMiUzQSUyMiUyMiUyQyUyMm1hcmtzJTIyJTNBJTVCJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdEJTVEJTdE" data-identifier-application__slash__x-doc-key="ABmOor4xydxWqawZ"><article data-clipboard-cangjie="[&quot;root&quot;,{},[&quot;p&quot;,{&quot;uuid&quot;:&quot;ls2w8i6r6ruyj6gisz9&quot;,&quot;jc&quot;:&quot;justify&quot;},[&quot;img&quot;,{&quot;id&quot;:&quot;uip7mi&quot;,&quot;name&quot;:&quot;bf5edbe747ed2378318be806f1952707.jpeg&quot;,&quot;size&quot;:1934061,&quot;width&quot;:748,&quot;height&quot;:561,&quot;uuid&quot;:&quot;ls2xnew0h5jwcuopd9o&quot;,&quot;src&quot;:&quot;https://alidocs.oss-cn-zhangjiakou.aliyuncs.com/res/ABmOor4xydxWqawZ/img/c54a56e0-b42d-4fea-aff1-df1f042076f8.jpeg&quot;,&quot;extraData&quot;:{&quot;resourceId&quot;:&quot;c50ad89f-46e1-40f0-98b6-79ee3aa06e8d&quot;,&quot;metaData&quot;:{&quot;size&quot;:1934061,&quot;originWidth&quot;:3648,&quot;originHeight&quot;:2736,&quot;format&quot;:&quot;jpg&quot;,&quot;ratio&quot;:0}}},[&quot;span&quot;,{&quot;data-type&quot;:&quot;text&quot;},[&quot;span&quot;,{&quot;data-type&quot;:&quot;leaf&quot;},&quot;&quot;]]]]]" data-identifier-application__slash__x-cangjie-fragment="JTdCJTIya2xhc3MlMjIlM0ElMjJkb2N1bWVudCUyMiUyQyUyMmRhdGElMjIlM0ElN0IlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMmtsYXNzJTIyJTNBJTIyYmxvY2slMjIlMkMlMjJ0eXBlJTIyJTNBJTIycGFyYWdyYXBoJTIyJTJDJTIyZGF0YSUyMiUzQSU3QiUyMnV1aWQlMjIlM0ElMjJsczJ3OGk2cjZydXlqNmdpc3o5JTIyJTJDJTIyamMlMjIlM0ElMjJqdXN0aWZ5JTIyJTdEJTJDJTIybm9kZXMlMjIlM0ElNUIlN0IlMjJrbGFzcyUyMiUzQSUyMmlubGluZSUyMiUyQyUyMnR5cGUlMjIlM0ElMjJpbWFnZSUyMiUyQyUyMmRhdGElMjIlM0ElN0IlMjJpZCUyMiUzQSUyMnVpcDdtaSUyMiUyQyUyMm5hbWUlMjIlM0ElMjJiZjVlZGJlNzQ3ZWQyMzc4MzE4YmU4MDZmMTk1MjcwNy5qcGVnJTIyJTJDJTIyc2l6ZSUyMiUzQTE5MzQwNjElMkMlMjJ3aWR0aCUyMiUzQTc0OCUyQyUyMmhlaWdodCUyMiUzQTU2MSUyQyUyMnV1aWQlMjIlM0ElMjJsczJ4bmV3MGg1andjdW9wZDlvJTIyJTJDJTIyc3JjJTIyJTNBJTIyaHR0cHMlM0ElMkYlMkZhbGlkb2NzLm9zcy1jbi16aGFuZ2ppYWtvdS5hbGl5dW5jcy5jb20lMkZyZXMlMkZBQm1Pb3I0eHlkeFdxYXdaJTJGaW1nJTJGYzU0YTU2ZTAtYjQyZC00ZmVhLWFmZjEtZGYxZjA0MjA3NmY4LmpwZWclMjIlMkMlMjJleHRyYURhdGElMjIlM0ElN0IlMjJyZXNvdXJjZUlkJTIyJTNBJTIyYzUwYWQ4OWYtNDZlMS00MGYwLTk4YjYtNzllZTNhYTA2ZThkJTIyJTJDJTIybWV0YURhdGElMjIlM0ElN0IlMjJzaXplJTIyJTNBMTkzNDA2MSUyQyUyMm9yaWdpbldpZHRoJTIyJTNBMzY0OCUyQyUyMm9yaWdpbkhlaWdodCUyMiUzQTI3MzYlMkMlMjJmb3JtYXQlMjIlM0ElMjJqcGclMjIlMkMlMjJyYXRpbyUyMiUzQTAlN0QlN0QlN0QlMkMlMjJub2RlcyUyMiUzQSU1QiU3QiUyMmtsYXNzJTIyJTNBJTIydGV4dCUyMiUyQyUyMmxlYXZlcyUyMiUzQSU1QiU3QiUyMmtsYXNzJTIyJTNBJTIybGVhZiUyMiUyQyUyMnRleHQlMjIlM0ElMjIlMjIlMkMlMjJtYXJrcyUyMiUzQSU1QiU1RCU3RCU1RCU3RCU1RCU3RCU1RCU3RCU1RCU3RA==" data-identifier-application__slash__x-doc-key="ABmOor4xydxWqawZ"><p style="margin-left: 8px;margin-right: 8px;margin-bottom: 0px;"><img class="rich_pages wxw-img" data-backh="434" data-backw="578" data-imgfileid="100038991" data-ratio="0.75" src="https://oscimg.oschina.net/oscnet/f0a958d9-c9d1-4b5e-a125-a1badd9c34d6.jpg" data-type="jpeg" data-w="1080" style="width: 100%;height: auto;" referrerpolicy="no-referrer"></p></article></article><p style="text-align: center;margin-left: 8px;margin-right: 8px;line-height: 1.75em;margin-bottom: 16px;"><span style="color: rgb(136, 136, 136);font-family: Arial, Helvetica, sans-serif;font-size: 14px;letter-spacing: 0.2px;text-align: start;">（图</span><span style="color: rgb(136, 136, 136);font-family: Arial, Helvetica, sans-serif;font-size: 14px;letter-spacing: 0.2px;text-align: start;">/&nbsp;Gitee&nbsp;最有价值开源项目奖</span><span style="color: rgb(136, 136, 136);font-family: Arial, Helvetica, sans-serif;font-size: 14px;letter-spacing: 0.2px;text-align: start;">牌</span><span style="color: rgb(136, 136, 136);font-family: Arial, Helvetica, sans-serif;font-size: 14px;letter-spacing: 0.2px;text-align: start;">）</span></p><p style="text-align: justify;margin-left: 8px;margin-right: 8px;line-height: 1.75em;margin-bottom: 16px;"><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">Gitee 是全球规模第二大的代码托管平台，为超过 500&nbsp;万名开发者和 10&nbsp;万家企业提供服务，该平台托管的开源项目超过 1000&nbsp;万，汇聚了众多国内知名的优秀开源项目，是国内首屈一指的代码托管平台。</span><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">GVP 是 Gitee 综合评定的优秀开源项目展示平台，其评选</span><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">既要获得开发者广泛认可、满足客观硬性指标，也要通过评委会专家的共同评定才可入选。</span></p><p style="text-align: justify;margin-left: 8px;margin-right: 8px;line-height: 1.75em;margin-bottom: 16px;"><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">龙蜥社区（OpenAnolis）是立足中国面向国际的 Linux 服务器操作系统开源根社区，引领云智融合技术浪潮下国产操作系统的创新发展。</span><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">龙蜥操作系统 Anolis OS 搭载了 ANCK 版本的内核，性能和稳定性经过历年「双 11」历练，能为云上典型用户场景带来 40%&nbsp;的综合性能提升，故障率降低 50%，兼容 CentOS 生态，提供平滑的 CentOS 迁移方案，并提供全栈国密能力。</span><span style="color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">龙蜥社区围绕芯片、内核、编译器、安全、虚拟化及云原生等操作系统核心领域进行技术创新，已发布首款拥抱智算时代的<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4MTMyMTUwMQ%3D%3D%26mid%3D2247516403%26idx%3D1%26sn%3D0a18dcbe8891f369111d1e6deae3804b%26chksm%3Dcf657381f812fa97e04d6f05257b62da1880ef327a4b10372b4b89cb5882b90d9ceb751a0d6b%26scene%3D21%23wechat_redirect" textvalue="国产操作系统 Anolis OS 23" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">国产操作系统 Anolis OS 23</a>、 <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4MTMyMTUwMQ%3D%3D%26mid%3D2247491504%26idx%3D1%26sn%3Dea85642b4e5891ef3dee243a4bbf8628%26chksm%3Dcf66ecc2f81165d4f652c5538771320030ac4ff3f511bbeb278561301bed339e7e43bf627d3b%26scene%3D21%23wechat_redirect" textvalue="LoongArch GA" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">LoongArch GA</a>、Anolis OS 7.9、 8.4 、8.6、8.8 等多个社区版本，超万名开发者参与贡献。</span></p></article><section style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.75em;text-align: center;"><span style="outline: 0px;font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;color: rgb(136, 136, 136);">—— 完 ——</span></section><section style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.75em;"><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">Alib</span><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">aba Cloud Lin</span><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">ux 诚邀广大企业用</span><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">户加入，首批招募 30 家伙伴单位，一起共建云</span><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">上软件生</span><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;">态繁荣！</span></section><section style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.75em;"><span style="outline: 0px;color: rgb(0, 0, 0);font-family: Arial, Helvetica, sans-serif;font-size: 15px;letter-spacing: 0.2px;text-align: start;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4MTMyMTUwMQ%3D%3D%26mid%3D2247520955%26idx%3D1%26sn%3D7a02bf5e9ea85f2af75d19d0bee04120%26chksm%3Dcf6561c9f812e8df7dd7d4d5da9b4b3d6ffa8f89111a5b8c35bfe2295ee5420ff02280183356%26scene%3D21%23wechat_redirect" textvalue="你已选中了添加链接的内容" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="1"><span class="js_jump_icon h5_image_link" style="outline: 0px;vertical-align: bottom;user-select: none;width: 100%;"><img class="rich_pages wxw-img" data-backh="250" data-backw="562" data-imgfileid="100038588" data-ratio="0.4444444444444444" src="https://oscimg.oschina.net/oscnet/a899e876-a6bd-473a-b20a-3e5ee6535362.jpg" data-w="900" style="outline: 0px;border-width: 0px;border-style: initial;border-color: initial;border-radius: 18px;width: 100%;visibility: visible !important;height: auto;" referrerpolicy="no-referrer"></span></a></span></section><section style="display: none;line-height: 1.75em;"><br></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - OpenAnolis 龙蜥（OpenAnolis）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 05 Feb 2024 11:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5265430/blog/11030226</guid>
            <link>https://my.oschina.net/u/5265430/blog/11030226</link>
            <author>
                <![CDATA[OpenAnolis 龙蜥社区]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[用 AI 大模型在线写春联]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/2720166_2331677">用 AI 大模型在线写春联，欢迎来玩</a><div class="ui red label horizontal" data-tooltip="置顶">顶</div></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/hardbone" class="__user"><span>局</span></a> 发布于，前天 16:33
                    </div><div class="item">阅读 1K+</div><div class="item collect-btn " data-id="2331677" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331677" data-obj-type="2">1</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/2720166_2331677#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">4</span></a></div></div><div class="content" id="articleContent"><p>体验地址：</p><h4><u><em><strong><a href="https://tool.oschina.net/ai_couplet" target="_blank" rel="nofollow">https://tool.oschina.net/ai_couplet</a></strong></em></u></h4><p>对联成品：</p><p><img src="https://oscimg.oschina.net/oscnet/up-f31a898dac4327a0da89726e61fbecde959.png" referrerpolicy="no-referrer"></p><p>使用方法：</p><p>在输入框写提示词，点击「生成春联」即可。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0e8f04687bd6129ce3854330412d0c2ddf2.png" referrerpolicy="no-referrer"></p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331677" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331677" data-obj-type="2">1</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331677" data-obj-type="2" data-url="https://www.oschina.net/question/2720166_2331677"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Mon, 05 Feb 2024 11:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/2720166_2331677</guid>
            <link>https://www.oschina.net/question/2720166_2331677</link>
        </item>
        <item>
            <title>
                <![CDATA[PostgreSQL 90% 的新代码仅由 50 人完成，拓数派荣占一席]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>PostgreSQL 作为世界上最受欢迎的开源数据库之一，于去年荣获&nbsp;DB-Engines 2023 年度数据库，其全球 Committer 人数却长期维持在较少的数目（约 30 人），全球 Contributor 名单也罕见中国人身影。<strong>拓数派长期以来一直以强大的技术能力，用高质量、高数量的代码贡献力参与到 PostgreSQL 社区的产品和生态建设中。</strong></p><p>EnterpriseDB 首席数据库科学家 Robert Haas 是 PostgreSQL 主要贡献者，自 2009 年开始就作为 PostgreSQL Committer 参与到 PostgreSQL 的代码 commit、review 和 merge 工作中。自 2017 年起，Robert&nbsp;已经连续 8 年持续统计 PostgreSQL 的贡献者情况，并在其于 1 月 29 日发布的《Who Contributed to PostgreSQL Development in 2023》博文中提到：</p><blockquote><p><strong>「2023 年，PostgreSQL 66% 的新代码是由其中的 18 人贡献的，而 90% 的新代码贡献是由 50 人完成的。」</strong></p></blockquote><p>这 50 位主要贡献者中，仅有 2 名中国人，<strong>拓数派技术专家 Richard Guo 便是其中之一，这已经是 Richard 荣登该榜单的第二年。</strong></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e337e187374f776c9e8c21e63805794e579.png" referrerpolicy="no-referrer"></p><p style="text-align:center">拓数派&nbsp;Richard&nbsp;Guo&nbsp;连续两年被列为&nbsp;PostgreSQL&nbsp;主要贡献者</p><p>在 Robert 的统计中，2023 年，Richard 为 PostgreSQL 贡献了 1710 行代码，提交了 40 个 Commits，在名单中排名 25 名。2022 年的统计中，Richard 同样荣登代码主要贡献榜单，以 1071 行代码，24 个 Commits，在 40 名主要代码贡献者中排名 38 名。</p><p>由于 Robert 的统计数据仅包括 Commits 所涉及的第一作者（Principle Author），Richard 的贡献量远不止这些。<strong>经统计，Richard 在 PostgreSQL 16 版本中参与的 Commits 数为 118。</strong></p><p>除了 Richard，拓数派多位研发同事均对 PostgreSQL 多个版本做出了代码贡献，尤其是在 PostgreSQL 16 发布中，共有 33 名贡献者来自中国，<strong>而拓数派占据其中 5 席，并以接近一半的 Commits 次数在国内独占鳌头</strong>。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-161a9945b89959aba9dd3b332765f0873e3.png" referrerpolicy="no-referrer"></p><p style="text-align:center">PostgreSQL 16&nbsp;中拓数派贡献量在国内独占鳌头</p><p>不管是代码贡献质量，或是数量上，拓数派团队一如既往的引领 PostgreSQL 中国贡献力。<strong>这一成绩充分说明了拓数派团队的技术实力与拥抱开放的企业文化。</strong></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-62da53dc8790271b70bb5370ee426da3059.png" referrerpolicy="no-referrer"></p><p style="text-align:center">拓数派获得的 PostgreSQL 社区代码贡献致谢奖章</p><p>除了 PostgreSQL 社区,拓数派团队还一直以代码贡献、讲师布道等多种形式活跃于 PostgreSQL、Clickhouse、Kubernetes、Spark 等开源社区，<strong>并利用长期积累的技术能力为云原生虚拟数仓 PieCloudDB 「添砖加瓦」</strong> ，为用户带来更灵活、更安全、更易用的使用体验和性能特性。未来，拓数派团队将继续努力，在技术之路上不断创新，引领行业前行。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 05 Feb 2024 09:42:56 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277896</guid>
            <link>https://www.oschina.net/news/277896</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[深圳开放智算中心点亮运营]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">昨日，深圳开放智算中心点亮运营，同期深圳市智慧城市算力统筹调度平台揭牌，这意味着深圳正加快打造 10 万卡级别的超强算力集群。多家人工智能头部企业、电信运营商、行业协会在现场与运营方深智城集团签约开展智能算力合作。</span></p><p><img height="333" src="https://oscimg.oschina.net/oscnet/up-1a3542f35ffad419079830641f01c95149c.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">该「中心+平台」的算力供给调度规模将超 30000P，深圳开放智算中心基于国际主流智能算力芯片，可实现高复杂度、高计算需求的千亿级大模型训练，协助打造「河套-西丽湖-光明科学城」AI 科创算力走廊，助力深圳加快构筑大湾区算力供给高地。</span></p><p><span style="color:#000000">市智慧城市算力统筹调度平台将积极承担公共算力调度、创新服务等功能，探索通过标准化接口汇聚全市多元异构算力、以算网大脑实现算力的弹性分配，全力提供具有公信力、安全性和普惠性的算力供给服务，努力构建超高可靠、极低时延、极速带宽、极高性能、绿色低碳的算力调度体系，助力深圳人工智能产业高质量发展。</span></p><p><span style="color:#000000">据了解，「万卡」是指人工智能大模型产品的开发需要多达一万块 GPU 芯片的智算算力支持，也是指超大型智算中心的规模「门槛」是一万块 GPU 芯片。此次活动由市工信局、市政数局、市科创局、市国资委指导，福田区政府、深智城集团主办。</span></p><p><em><span style="color:#000000">来源：深圳特区报</span></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 05 Feb 2024 08:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277880</guid>
            <link>https://www.oschina.net/news/277880</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CodeFuse-VLM 开源，支持多模态多任务预训练 / 微调]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="margin-left:0; margin-right:0"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2024/png/98756342/1707121095833-b957fd4f-440e-46d0-8084-86c8bab7a005.png" width="900" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>CodeFuse-MFT-VLM 项目地址：</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcodefuse-ai%2FCodeFuse-MFT-VLM" target="_blank" rel="nofollow"><span>https://github.com/codefuse-ai/CodeFuse-MFT-VLM</span></a></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span>CodeFuse-</span><span style="color:#1f2328">VLM-14B</span><span><span>&nbsp;</span>模型地址：</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2Fss41979310%2FCodeFuse-VLM-14B%2Ffiles" target="_blank" rel="nofollow"><span>https://modelscope.cn/models/ss41979310/CodeFuse-VLM-14B/files</span></a></p><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h3_1"></span><h3><span style="color:#333333">CodeFuse-VLM 框架简介</span></h3><p style="margin-left:0; margin-right:0"><span style="color:#333333">随着 huggingface 开源社区的不断更新，会有更多的 vision encoder 和 LLM 底座发布，这些 vision encoder 和 LLM 底座都有各自的强项，例如 code-llama 适合生成代码类任务，但是不适合生成中文类的任务，因此用户常常需要根据 vision encoder 和 LLM 的特长来搭建自己的多模态大语言模型。针对多模态大语言模型种类繁多的落地场景，我们搭建了 CodeFuse-VLM 框架，支持多种视觉模型和语言大模型，使得 MFT-VLM 可以适应不同种类的任务。</span></p><p style="margin-left:0; margin-right:0"><span>CodeFuse-VLM 支持多种视觉达模型：CLIP，CLIP-336px，Chinese Clip，Chinese Clip-336px，Qwen Clip；多种语言达模型：Vicuna-7B，Vicunam-13B，LLAMA-2-7B，Qwen-7B，Qwen-14B。用户可以根据自己的需求，通过配置文件的方式搭配 VL-MFTCoder 中不同的 Vision Encoder 和 LLM，使用同一套框架去适配的不同的模型，大大提高了开发效率。</span></p><p style="margin-left:0; margin-right:0"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2024/png/23956347/1705576530632-29cdc597-d396-4bbd-b02f-310015e7fcda.png" width="1688" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">我们在 2024 年 1 月开源了多模态多任务微调框架——CodeFuse-VLM。在 CodeFuse 多任务微调的基础上，CodeFuse-VLM 可以实现在多个模态，多个任务上同时并行地进行微调。通过结合多种损失函数，我们有效地解决了多任务学习中常见的任务间数据量不平衡、难易不一和收敛速度不一致等挑战。此外，CodeFuse-VLM 框架具备高效训练特征，支持高效的 PEFT 微调，能有效提升微调训练速度并降低对资源的需求。</span></p><div><div class="ckeditor-html5-video"><video controls="controls">
     &nbsp; 
   </video></div><p>&nbsp;</p></div><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h3_2"></span><h3><span>CodeFuse-VLM-14B 模型</span></h3><p style="margin-left:0; margin-right:0"><span>我们基于 Qwen-VL 的视觉编码器和 Qwen-14B 大语言模型，在 CodeFuse-VLM 框架下训练了 CodeFuse-VLM-14B 模型，在多个通用和代码任务上的性能超过 LLAVA-1.5 和 Qwen-VL。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h4_3"></span><h4><span>预训练数据</span></h4><p style="margin-left:0; margin-right:0"><span>参考了 Qwen-VL 的 Multi-Task Pretraining 数据集，我们准备使用多种数据对齐 Qwen-VL-14B 的模态。在预训练当中我们使用多任务训练的方式，每一个数据集都是一个训练任务任务。</span></p><table border="1" cellspacing="0" style="border-collapse:collapse; border:1px solid #d9d9d9; table-layout:fixed; width:750px"><tbody><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>dataset</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>type</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>number of samples</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>synthdog-en</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>OCR</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>50w<span>&nbsp;</span></span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>synthdog-zh</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>OCR</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>50w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>cc3m(downsampled)</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Image Caption</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>55w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>SBU</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Image Caption</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>85w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Visual Genome VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>50w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Visual Genome Region descriptions</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Ref Grouding</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>50w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Visual Genome objects</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Caption With Grouding</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>50w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>OCR_VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>OCR and VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>50w</span></p></td></tr></tbody></table><p style="margin-left:0; margin-right:0"><span>我们使用预训练数据集训练模态对齐的 cross attention 模块，可以执行以下代码来启动模型预训练</span></p><pre><code>sh scripts/pretrain_multinode.sh</code></pre><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h4_4"></span><h4><span>指令微调数据</span></h4><p style="margin-left:0; margin-right:0"><span>我们使用了 LLAVA-1.5 的指令微调数据，总共 65w 样本，LLAVA 的指令微调数据集包含复杂图片的推理分析，对 LLM 理解视觉特征很有帮助。</span></p><p style="margin-left:0; margin-right:0; text-align:center"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2023/png/23956347/1701595326578-2fa8ac49-a3a6-413f-9a44-c9fb9416e5eb.png" width="369" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>指令微调数据构成如下，在视觉指令微调当中我们使用多任务训练的方式，每一个数据集都是一个训练任务任务。</span></p><table border="1" cellspacing="0" style="border-collapse:collapse; border:1px solid #d9d9d9; table-layout:fixed; width:750px"><tbody><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>dataset</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>type</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>number of samples</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>OCR_VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>OCR and VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>7w<span>&nbsp;</span></span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>GQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Image Caption</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>8w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Visual Genome</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Ref Grouding and Caption With Grouding</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>10w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>COCO</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Detailed Description and Complex Reasoning</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>37w</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Text-VQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Detailed Description and Complex Reasoning</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>3w</span></p></td></tr></tbody></table><p style="margin-left:0; margin-right:0"><span>我们使用指令微调数据训练 CodeFuse-VLM-14B 中的 Qwen-14B 大语言模型，可以执行以下代码来启动模型的指令微调</span></p><pre><code>sh scripts/finetune_multinode.sh</code></pre><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h4_5"></span><h4><span>模型性能</span></h4><p style="margin-left:0; margin-right:0"><span>我们训练的 CodeFuse-VLM-14B 模型在多个 benchmark 上的表现超过 Qwen-VL 和 LLAVA-1.5, 具体得分参考下面的图表。</span></p><p style="margin-left:0; margin-right:0; text-align:center"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2024/png/23956347/1705311351163-de87fc69-620f-46f7-9e58-fe48e9d32ee6.png" width="514" referrerpolicy="no-referrer"></p><table border="1" cellspacing="0" style="border-collapse:collapse; border:1px solid #d9d9d9; table-layout:fixed; width:1000px"><tbody><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Benchmark</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>LLAVA-1.5</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Qwen-VL</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0px; margin-right:0px; text-align:center"><span>CodeFuse-VLM-14B</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>MM_Bench</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">67.7</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>60.6</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><strong><span>75.7</span></strong></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>MM_Bench_CN</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">63.6</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>56.7</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><strong><span>69.8</span></strong></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>VqaV2</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><strong><span style="color:#4d4d4d">80.0</span></strong></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>78.2</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>79.3</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>GQA</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><strong><span style="color:#4d4d4d">63.3</span></strong></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>57.5</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>59.4</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>TextVqa</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">61.3</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>63.8</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><strong><span>63.9</span></strong></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>VizWiz</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><strong><span style="color:#4d4d4d">53.6</span></strong></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>35.25</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>45.3</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>Sketch2Code</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>-</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><span>90.7</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:37px"><p style="margin-left:0; margin-right:0"><strong><span>94.4</span></strong></p></td></tr></tbody></table><p style="margin-left:0; margin-right:0"><span>我们的 CodeFuse-VLM-14B 在 MMBenchmark 的</span><strong><span>中英文榜单</span></strong><span>分别取得第</span><strong><span>13/21</span></strong><span>名的排名，高于 Qwen-VL 第</span><strong><span>29/36</span></strong><span>名的排名</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmmbench.opencompass.org.cn%2Fleaderboard" target="_blank" rel="nofollow"><span>https://mmbench.opencompass.org.cn/leaderboard</span></a></p><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h3_6"></span><h3><span>产品图片</span></h3><p style="margin-left:0; margin-right:0"><span>我们通过 CodeFuse-VLM 在蚂蚁内部训练了网页图片到前端代码的多模态大模型，并把大模型集成到内部的 Visual Studio Code 插件中。如下面两站图所示，左边的图片是网页原图，右边的图片是大模型生成的前端代码渲染出的图片，多模态大模型生成的前端代码渲染出的图片对网页原图有很高的还原性，很大地提高了前端工程师开发的效率。</span></p><p style="margin-left:0; margin-right:0"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2024/png/23956347/1705907166749-474f92e8-31c1-4b38-9cba-5bd06165c311.png" width="3048" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img src="https://intranetproxy.alipay.com/skylark/lark/0/2024/png/23956347/1705907389506-fac00ebc-2646-41fa-b847-7d40a6f2a1de.png" width="1560" referrerpolicy="no-referrer"></p></div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 05 Feb 2024 08:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6942768/blog/11030240</guid>
            <link>https://my.oschina.net/u/6942768/blog/11030240</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gradle 8.6 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Gradle 8.6&nbsp;现已</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Frelease-notes.html" target="_blank">发布</a><span style="background-color:#ffffff; color:#333333">。Gradle&nbsp;是一个基于&nbsp;Apache Ant&nbsp;和&nbsp;Apache Maven&nbsp;概念的项目自动化构建工具，支持依赖管理和多项目，类似&nbsp;Maven，但比之简单轻便。它使用一种基于&nbsp;Groovy&nbsp;的特定领域语言来声明项目设置，而不是传统的&nbsp;XML。</span></p><p><span style="background-color:#ffffff; color:#333333">此版本支持配置缓存的自定义加密密钥，对 build init 进行了多项改进，并更新了 build authoring API。还为 IDE integrators 提供了更多有用的错误和警告信息以及新的 API。</span></p><h4><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>配置缓存改进</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>配置<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Fuserguide%2Fconfiguration_cache.html" target="_blank">缓存</a>通过缓存配置阶段的结果并将其重用于后续构建来缩短构建时间。此功能可以显着提高构建性能。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>自定义加密密钥</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>配置缓存经过加密，可降低敏感数据意外泄露的风险。默认情况下，Gradle 会自动创建并管理密钥，并将其存储在 Gradle 用户主目录的密钥库中。这样做虽然方便，但在某些环境下可能并不合适。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>现在用户可以向 Gradle 提供用于通过<code>GRADLE_ENCRYPTION_KEY</code>环境变量加密缓存配置数据的密钥。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>更多详细信息查看 Gradle 用户手册的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Fuserguide%2Fconfiguration_cache.html%23config_cache%3Asecrets%3Aconfiguring_encryption_key" target="_blank">配置缓存</a>部分。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Build init 改进</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Fuserguide%2Fbuild_init_plugin.html" target="_blank">build init 插件</a>允许用户轻松创建新的 Gradle 构建，支持各种类型的项目。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Simpler source package handling</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>你不再需要回答有关源包的交互式问题。取而代之的是使用<code>org.example</code>的默认值。你可以使用<code>init</code>任务的现有选项<code>--package</code>flag 来覆盖它。此外，还可以通过在 Gradle 用户主页的<code>gradle.properties</code>中添加<code>org.gradle.buildinit.source.package</code>新属性来设置默认值。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><span><span><span><span style="background-color:#f7f7f8"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><code>// ~/.gradle/gradle.properties org.gradle.buildinit.source.package=my.corp.domain </code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>生成的 convention plugins 的名称现在以<code>buildlogic</code>开头，而不是软件包名称，从而使名称更简短、更整洁。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Generating without interactive questions</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>新增的 --use-defaults 选项可为未明确配置的选项应用默认值。它还能确保 init 命令在没有交互式用户输入的情况下完成。这在 shell 脚本中非常方便，可确保脚本不会意外挂起。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>例如，你可以在不回答任何问题的情况下生成 Kotlin 库：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><code>gradle init --use-defaults --type kotlin-library
</code></pre><p style="color:#02303a; text-align:start"><strong>Simpler assignment syntax in Kotlin DSL</strong></p><p style="color:#02303a; text-align:start">示例：</p><pre><code>application {
mainClass = "org.example.AppKt"
}</code></pre><h4><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Build authoring 改进</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Gradle 为插件作者和构建工程师提供了丰富的 API 来开发自定义构建逻辑。如果执行构建不需要任务，则任务配置避免 API 会避免配置任务<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Fuserguide%2Ftask_configuration_avoidance.html" target="_blank">。</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Lazy name-based filtering of tasks</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:start">示例：</p><pre><code>tasks.named { it.contains("pack") }.configureEach {
    // lazily configure details of all '*pack*' tasks that are part of the task graph
}</code></pre><p style="text-align:start"><strong>Allow Providers to be used with dependency capabilities</strong></p><p style="text-align:start">Gradle 支持<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Fuserguide%2Fcomponent_capabilities.html" target="_blank">声明</a>组件的功能，以便允许 Gradle 在构建时检测和解决依赖项之间的冲突，从而更好地管理依赖项。</p><pre><span><span><span><span style="background-color:#f7f7f8"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><code>dependencies { implementation("org.foo:bar:1.0") { capabilities { // Values in the interpolated String below are lazily evaluated, allowing them to be set after this block requireCapability(project.provider(() -&gt; "${project.group}:${project.name}-platform:${project.version}")) } } } // Later, the version of the project is set. // Without the provider above, this change would not be reflected in the capability. project.version = "1.0.0" </code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><h4><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>错误和警告报告改进</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></h4><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Gradle 提供了一组丰富的错误和警告消息来帮助用户理解和解决构建中的问题。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>出现依赖锁定错误时更清晰的建议操作</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此版本通过将错误与可能的操作分开以修复控制枱输出中的问题，改进了依赖锁定中的错误消息。启用 strict mode 时，由于锁定文件格式无效或缺少锁定状态而导致的错误现在显示如下：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><span><span><span><span style="background-color:#f7f7f8"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><code>FAILURE: Build failed with an exception. * What went wrong: Execution failed for task ':dependencies'. &gt; Could not resolve all dependencies for configuration ':lockedConf'. &gt; Invalid lock state for lock file specified in '&lt;project&gt;/lock.file'. Line: '&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD' * Try: &gt; Verify the lockfile content. For more information on lock file format, please refer to https://docs.gradle.org/8.6/userguide/dependency_locking.html#lock_state_location_and_format in the Gradle documentation. &gt; Run with --info or --debug option to get more log output. &gt; Run with --scan to get full insights. &gt; Get more help at https://help.gradle.org. </code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><p style="text-align:start"><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>更好地报告 providers 中的循环引用的错误</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><pre><span><span><span><span style="background-color:#f7f7f8"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><code>FAILURE: Build failed with an exception. * Where: Build file '&lt;project&gt;/build.gradle' line: 7 * What went wrong: A problem occurred evaluating root project 'test'. &gt; Circular evaluation detected: property(java.lang.String, map(java.lang.String map(&lt;CIRCULAR REFERENCE&gt;) check-type())) -&gt; map(java.lang.String map(property(java.lang.String, &lt;CIRCULAR REFERENCE&gt;)) check-type()) -&gt; map(property(java.lang.String, map(java.lang.String &lt;CIRCULAR REFERENCE&gt; check-type()))) -&gt; property(java.lang.String, map(java.lang.String map(&lt;CIRCULAR REFERENCE&gt;) check-type())) </code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><h4><strong><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>IDE 集成改进</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="text-align:start"><span><span><span><span style="color:#02303a"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Fuserguide%2Fthird_party_integration.html" target="_blank">Gradle 使用 Tooling API</a>&nbsp;集成到许多 IDE 中。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><hr><p style="text-align:start">此外，<span style="background-color:#ffffff; color:#02303a">Gradle 8.6 中还修复了 86 个&nbsp;issue。更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gradle.org%2F8.6%2Frelease-notes.html" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 05 Feb 2024 05:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277856/gradle-8-6-released</guid>
            <link>https://www.oschina.net/news/277856/gradle-8-6-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
