<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 07 Dec 2023 03:51:31 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[维基百科推出「可编程」新项目：Wikifunctions]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>维基媒体基金会&nbsp;<span>(Wikimedia Foundation) <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwikimediafoundation.org%2Fnews%2F2023%2F12%2F05%2Fintroducing-wikifunctions-first-wikimedia-project-to-launch-in-a-decade-creates-new-forms-of-knowledge%2F" target="_blank">宣布推出</a></u>&nbsp;</span><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wikifunctions.org%2Fwiki%2FWikifunctions%3AMain_Page" target="_blank">Wikifunctions</a></strong><span>，据称这是该组织十多年来的第一个新项目。该项目让志愿者编辑<strong>能够协作创建和维护一个函数库</strong>——用于回答问题并增强有关维基媒体项目及其他项目的知识。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-304d34c058f3401b98838b2b5ccf0208c6b.png" referrerpolicy="no-referrer"></p><p>「函数」是一系列编程指令，它根据提供的数据进行计算。通过 Wikifunctions，这些函数可以以任何语言存在，因此对于许多用户来说，<strong>这将是他们首次能够用母语阅读和编写函数的项目</strong>。</p><p>Wikifunctions 的目标是使这些函数路径更加容易访问。它将提供一个单一的共享空间，简化维护人员的工作并增加函数的可访问性。最终，Wikifunctions 将与维基百科和其他维基媒体项目集成，为知识创造开辟新的机会。该项目将以维基百科的结构化数据为基础，从其他维基媒体项目中汇集不同的数据源，从而利用函数代码创建新形式的知识。</p><p>Wikifunctions 作为底层技术基础设施，将支持维基媒体基金会更广泛的举措，使人们能够在维基百科上以更多语言分享更多知识。通过该项目，用户将能够使用他们的母语创建和维护内容，其他用户可以在维基媒体项目提供的 300 多种语言中访问这些内容。</p><p>Wikifunctions 于 2020 年获得维基媒体基金会董事会的批准，今年早些时候作为只读网站上线，现在任何人、任何地方都可以使用它。Wikifunctions 得到了 Google.org、洛克菲勒基金会和维基媒体捐赠基金的资助。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 03:38:25 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269893/wikifunctions-wikimedia</guid>
            <link>https://www.oschina.net/news/269893/wikifunctions-wikimedia</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Spring Cloud 2023.0.0 (Leyton) 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.spring.io%2F" target="_blank">Spring Cloud 2023.0.0</a>&nbsp;现已正式 GA，此版本基于 Spring Boot 3.2.0。</p><p>具体更新内容包括：</p><p><strong>Spring Cloud Gateway</strong></p><ul><li>Spring Cloud Gateway Server MVC，一个 Servlet/Spring MVC 兼容网关包含在 2023.0 中（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-gateway%2Fissues%2F36" target="_blank">issue, initial PR</a>）</li><li>Gateway Actuator 发现增强功能 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-gateway%2Fpull%2F3147" target="_blank">PR 3147</a>&nbsp;)</li></ul><p><strong>Spring Cloud Function</strong></p><ul><li><p>用户现在可以将 REST 应用程序部署为&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-function%2Ftree%2Fmain%2Fspring-cloud-starter-function-web" target="_blank">AWS Lambda 或 Azure Functions</a></p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-function%2Fissues%2F1025" target="_blank">通过 spring-cloud-function-web</a>&nbsp;部署为 REST 端点的函数的 CRUD 映射</p></li></ul><p><strong>Spring Cloud Openfeign</strong></p><ul><li>Java HttpClient 支持 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-openfeign%2Fissues%2F689" target="_blank">#689</a>&nbsp;)</li></ul><p><strong>Spring Cloud Commons</strong></p><ul><li>重新启动时刷新范围 - 为适应 JVM Checkpoint-Restart 时的环境变化而量身定制的功能（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-gateway%2Fpull%2F2922" target="_blank">PR 1266</a>）</li><li>新的<code>RestClient</code>提供负载均衡器支持（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-commons%2Fissues%2F1293" target="_blank">1293</a>）</li><li>确定性子集负载均衡算法限制实例数量（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-commons%2Fissues%2F1288" target="_blank">1288</a>）</li></ul><p><strong>Spring Cloud Config</strong></p><ul><li>对 Config Server 的 Native image 支持 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-config%2Fpull%2F2361" target="_blank">PR 2361</a>&nbsp;)</li></ul><p><strong>Spring Cloud Kubernetes</strong></p><ul><li>将 Fabric8 升级到 6.7.2 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-kubernetes%2Fpull%2F1373" target="_blank">#1373</a>&nbsp;)</li><li>将 Kubernetes Java Client 升级到 19.0.0 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-kubernetes%2Fpull%2F1502" target="_blank">1502</a>)</li></ul><p><strong>Spring Cloud Build</strong></p><ul><li>所有 Spring Cloud 文档都是在 Antora 的帮助下构建的，其中包括新的搜索功能。</li></ul><hr><p>作为 2023.0.0 的一部分更新了以下模块：</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:inherit; color:#000000; font-family:&quot;Open Sans&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:1em; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:822px; word-spacing:0px"><thead><tr><th style="border-color:#dbdbdb; text-align:inherit; vertical-align:top">Module</th><th style="border-color:#dbdbdb; text-align:inherit; vertical-align:top">Version</th><th style="border-color:#dbdbdb; text-align:inherit; vertical-align:top">Issues</th></tr></thead><tbody><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Function</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-function%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Vault</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-vault%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Zookeeper</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-zookeeper%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Circuitbreaker</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">3.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-circuitbreaker%2Freleases%2Ftag%2Fv3.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Task</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">3.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-task%2Freleases%2Ftag%2Fv3.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Kubernetes</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">3.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-kubernetes%2Freleases%2Ftag%2Fv3.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Starter Build</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">2023.0.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-starter-build%2Freleases%2Ftag%2Fv2023.0.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Openfeign</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-openfeign%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Bus</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-bus%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Stream</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-stream%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Commons</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-commons%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Contract</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-contract%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Netflix</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-netflix%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Consul</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-consul%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Config</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-config%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Build</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-build%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-style:solid; border-width:0px; text-align:inherit; vertical-align:top">Spring Cloud Gateway</td><td style="border-color:#dbdbdb; border-style:solid; border-width:0px; text-align:inherit; vertical-align:top">4.1.0</td><td style="border-color:#dbdbdb; border-style:solid; border-width:0px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-gateway%2Freleases%2Ftag%2Fv4.1.0" target="_blank">issues</a>)</td></tr></tbody></table><p><span style="background-color:#ffffff; color:#000000">更多详情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F12%2F06%2Fspring-cloud-2023-0-0-aka-leyton-is-now-available" target="_blank">查看官方公告</a><span style="background-color:#ffffff; color:#000000">。</span>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 03:20:25 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269884/spring-cloud-2023-0-0-ga</guid>
            <link>https://www.oschina.net/news/269884/spring-cloud-2023-0-0-ga</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[充电头也能 OTA 升级？苹果为电源适配器推送固件更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>苹果公司近日为 30W 和 140W 的 USB-C 电源适配器推送了固件更新。</p><p>用户通过 MagSafe 3 或者 USB-C 连接到 Mac 设备之后，系统会自动开始更新。更新之后打开「系统信息」应用，点击「电源」选项即可查看最新版本。</p><p>30W USB-C 电源适配器安装的最新版本为&nbsp;<strong>Ver.1030053</strong>（上个版本为&nbsp;<span style="background-color:#ffffff; color:#333333">Ver.1030052</span>），ID 从 0x1674 升级到&nbsp;<strong>0x7003</strong>；</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bf26c2e7e5c248d1a0aff7b7428adbbeb91.png" referrerpolicy="no-referrer"></p><p>140W USB-C 电源适配器安装更新后版本号升级至&nbsp;<strong>Ver.1040073</strong>（上个版本为 <span style="background-color:#ffffff; color:#333333">Ver.1040068</span>）。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-01b90e9cd0dcfa5ab9bcb0ef1d2ab2b4b10.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.macotakara.jp%2Fetc%2Fsupport%2Fentry-45789.html" target="_blank">https://www.macotakara.jp/etc/support/entry-45789.html</a></u></em>、<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.macotakara.jp%2Fetc%2Fsupport%2Fentry-45790.html" target="_blank">https://www.macotakara.jp/etc/support/entry-45790.html</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 03:09:25 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269879</guid>
            <link>https://www.oschina.net/news/269879</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SQLite 重写了 JSON 函数 —— 推出 JSONB]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>SQLite <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2Fforum%2Fforumpost%2Ffa6f64e3dc1a5d97" target="_blank">宣布推出 JSONB</a></u>，这是对 SQLite JSON 函数的重写，宣称比现有 JSON 函数「快几倍」。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7eec133035c4e37c1ac26035e420dcc9574.png" referrerpolicy="no-referrer"></p></blockquote><p>在过去几年中，SQLite 开发者为改进 JSON 数据与该 SQL 数据库的<strong>库集成</strong>做了大量工作。最新的工作是<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2Fsrc%2Finfo%2F7f0c79b94e8f55e5" target="_blank">已合并的 JSONB</a></u>。JSONB 对 SQLite JSON 函数进行了重写，将 JSON 的内部使用从二进制表示形式更改改为连续的字节数组，可以作为 SQL BLOB 读取或写入。</p><p>JSONB 有助于降低解析 JSON 文本和表示用于存储的 JSON 的开销。</p><p>此外，JSONB 保留所有旧功能，并且所有 JSON 函数也可以接受 JSONB 二进制内容。如需了解有关 SQLite JSONB 功能及其更快性能潜力的更多信息，查看<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2Fforum%2Fforumpost%2Ffa6f64e3dc1a5d97" target="_blank">https://sqlite.org/forum/forumpost/fa6f64e3dc1a5d97</a></u></em>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:59:25 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269878/sqlite-lands-jsonb</guid>
            <link>https://www.oschina.net/news/269878/sqlite-lands-jsonb</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | JDK 21 虚拟线程原理及性能分析]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>一、背景</h1><p style="color:#24292f; text-align:start">JDK21 在 9 月 19 号正式发布，带来了较多亮点，其中虚拟线程备受瞩目，毫不夸张的说，它改变了高吞吐代码的编写方式，只需要小小的变动就可以让目前的 IO 密集型程序的吞吐量得到提升，写出高吞吐量的代码不再困难。</p><p style="color:#24292f; text-align:start">本文将详细介绍虚拟线程的使用场景，实现原理以及在 IO 密集型服务下的性能压测效果。</p><span id="OSC_h1_2"></span><h1>二、为了提升吞吐性能，我们所做的优化</h1><p style="color:#24292f; text-align:start">在讲虚拟线程之前，我们先聊聊为了提高吞吐性能，我们所做的一些优化方案。</p><span id="OSC_h2_3"></span><h2>串行模式</h2><p style="color:#24292f; text-align:start">在当前的微服务架构下，处理一次用户/上游的请求，往往需要多次调用下游服务、数据库、文件系统等，再将所有请求的数据进行处理最终的结果返回给上游。<img alt="2.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/2.png" referrerpolicy="no-referrer"><img alt="3.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/3.png" referrerpolicy="no-referrer">在这种模式下，使用串行模式去查询数据库，下游 Dubbo/Http 接口，文件系统完成一次请求，接口整体的耗时等于各个下游的返回时间之和，这种写法虽然简单，但是接口耗时长、性能差，无法满足 C 端高 QPS 场景下的性能要求。</p><span id="OSC_h2_4"></span><h2>线程池+Future 异步调用</h2><p style="color:#24292f; text-align:start">为了解决串行调用的低性能问题，我们会考虑使用并行异步调用的方式，最简单的方式便是使用线程池 +Future 去并行调用。<img alt="4.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/4.jpeg" referrerpolicy="no-referrer">典型代码如下：<img alt="11.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/11.png" referrerpolicy="no-referrer">这种方式虽然解决了大部分场景下的串行调用低性能问题，但是也存在着严重的弊端，由于存在 Future 的前后依赖关系，当使用场景存在大量的前后依赖时，会使得<strong>线程资源和 CPU 大量浪费在阻塞等待上</strong>，导致资源利用率低。</p><span id="OSC_h2_5"></span><h2>线程池+CompletableFuture 异步调用</h2><p style="color:#24292f; text-align:start">为了降低 CPU 的阻塞等待时间和提升资源的利用率，我们会使用 CompletableFuture 对调用流程进行编排，降低依赖之间的阻塞。</p><p style="color:#24292f; text-align:start">CompletableFuture 是由 Java8 引入的，在 Java8 之前一般通过 Future 实现异步。Future 用于表示异步计算的结果，如果存在流程之间的依赖关系，那么只能通过阻塞或者轮询的方式获取结果，同时原生的 Future 不支持设置回调方法，Java8 之前若要设置回调可以使用 Guava 的 ListenableFuture，回调的引入又会导致回调地狱，代码基本不具备可读性。</p><p style="color:#24292f; text-align:start">而 CompletableFuture 是对 Future 的扩展，原生支持通过设置回调的方式处理计算结果，同时也支持组合编排操作，一定程度解决了回调地狱的问题。</p><p style="color:#24292f; text-align:start">使用 CompletableFuture 的实现方式如下：<img alt="101.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/101.png" referrerpolicy="no-referrer">CompletableFuture 虽然一定程度上面缓解了 CPU 资源<strong>大量浪费在阻塞等待上的问题</strong>，但是只是缓解，核心的问题始终没有解决。这两个问题导致 CPU 无法充分被利用，系统吞吐量容易达到瓶颈。</p><ul><li><strong>线程资源浪费瓶颈始终在 IO 等待上</strong>，导致 CPU 资源利用率较低。目前大部分服务是 IO 密集型服务，一次请求的处理耗时大部分都消耗在等待下游 RPC，数据库查询的 IO 等待中，此时线程仍然只能阻塞等待结果返回，导致 CPU 的利用率很低。</li><li><strong>线程数量存在限制</strong>，<span>&nbsp;</span><strong>为了增加并发度，我们会给线程池配置更大的线程数</strong>，但是线程的数量是有限制的，Java 的线程模型是 1:1 映射平台线程的，导致 Java 线程创建的成本很高，不能无限增加。同时随着 CPU 调度线程数的增加，会导致更严重的资源争用，宝贵的 CPU 资源被损耗在上下文切换上。</li></ul><span id="OSC_h1_6"></span><h1>三、一请求一线程的模型</h1><p style="color:#24292f; text-align:start">在给出最终解决方案之前，我们先聊一聊 Web 应用中常见的一请求一线程的模型。</p><p style="color:#24292f; text-align:start">在 Web 中我们最常见的请求模型就是使用一请求一线程的模型，每个请求都由单独的线程处理。此模型易于理解和实现，对编码的可读性，Debug 都非常友好，但是，它有一些缺点。当线程执行阻塞操作（如连接到数据库或进行网络调用）时，线程会被阻塞，直到操作完成，这意味着线程在此期间将无法处理任何其他请求。<img alt="45.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/45.jpeg" referrerpolicy="no-referrer">当遇到大促或突发流量等场景导致服务承受的请求数增大时，为了保证每个请求在尽可能短的时间内返回，减少等待时间，我们经常会采用以下方案：</p><ul><li><strong>扩大服务最大线程数</strong>，简单有效，由于存在下列问题，导致平台线程有最大数量限制，不能大量扩充。 
  <ul><li>系统资源有限导致系统线程总量有限，进而导致与系统线程一一对应的平台线程有限。</li><li>平台线程的调度依赖于系统的线程调度程序，当平台线程创建过多，会消耗大量资源用于处理线程上下文切换。</li><li>每个平台线程都会开辟一块大小约 1m 私有的栈空间，大量平台线程会占据大量内存。<img alt="44.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/44.png" referrerpolicy="no-referrer"></li></ul></li><li><strong>垂直扩展，升级机器配置，水平扩展，增加服务节点</strong>，也就是俗称的升配扩容大法，效果好，也是最常见的方案，缺点是会增加成本，同时有些场景下扩容并不能 100% 解决问题。</li><li><strong>采用异步/响应式编程方案</strong>，例如 RPC NIO 异步调用，WebFlux，Rx-Java 等非阻塞的基于 Ractor 模型的框架，使用事件驱动使得少量线程即可实现高吞吐的请求处理，拥有较好的性能与优秀的资源利用，缺点是学习成本较高兼容性问题较大，编码风格与目前的一请求一线程的模型差异较大，理解难度大，同时对于代码的调试比较困难。</li></ul><p style="color:#24292f; text-align:start"><strong>那么有没有一种方法可以易于编写，方便迁移，符合日常编码习惯，同时性能很不错，CPU 资源利用率较高的方案呢?</strong></p><p style="color:#24292f; text-align:start"><strong>JDK21 中的虚拟线程可能给出了答案</strong>， JDK 提供了与 Thread 完全一致的抽象 Virtual Thread 来应对这种经常阻塞的情况，阻塞仍然是会阻塞，但是换了阻塞的对象，由昂贵的平台线程阻塞改为了成本很低的虚拟线程的阻塞，当代码调用到阻塞 API 例如 IO，同步，Sleep 等操作时，JVM 会自动把<span>&nbsp;</span><strong>Virtual Thread 从平台线程上卸载</strong>，平台线程就会去处理下一个虚拟线程，通过这种方式，提升了平台线程的利用率，让平台线程不再阻塞在等待上，<strong>从底层实现了少量平台线程就可以处理大量请求，提高了服务吞吐和 CPU 的利用率。</strong></p><span id="OSC_h1_7"></span><h1>四、虚拟线程</h1><span id="OSC_h2_8"></span><h2>线程术语定义</h2><p style="color:#24292f; text-align:start"><strong>操作系统线程（OS Thread）</strong>：由操作系统管理，是操作系统调度的基本单位。</p><p style="color:#24292f; text-align:start"><strong>平台线程（Platform Thread）</strong>：Java.Lang.Thread 类的每个实例，都是一个平台线程，是 Java 对操作系统线程的包装，与操作系统是 1:1 映射。</p><p style="color:#24292f; text-align:start"><strong>虚拟线程（Virtual Thread）</strong>：一种轻量级，由 JVM 管理的线程。对应的实例 java.lang.VirtualThread 这个类。</p><p style="color:#24292f; text-align:start"><strong>载体线程（Carrier Thread）</strong>：指真正负责执行虚拟线程中任务的平台线程。一个虚拟线程装载到一个平台线程之后，那么这个平台线程就被称为虚拟线程的载体线程。</p><span id="OSC_h2_9"></span><h2>虚拟线程定义</h2><p style="color:#24292f; text-align:start">JDK 中 java.lang.Thread 的每个实例都是一个平台线程。平台线程在底层操作系统线程上运行 Java 代码，并在代码的整个生命周期内独占操作系统线程，平台线程实例本质是由系统内核的线程调度程序进行调度，并且<strong>平台线程的数量受限于操作系统线程的数量</strong>。</p><p style="color:#24292f; text-align:start"><strong>而虚拟线程 (Virtual Thread) 它不与特定的操作系统线程相绑定</strong>。它在平台线程上运行 Java 代码，但在代码的整个生命周期内不独占平台线程。**这意味着许多虚拟线程可以在同一个平台线程上运行他们的 Java 代码，共享同一个平台线程。**同时虚拟线程的成本很低，<strong>虚拟线程的数量可以比平台线程的数量大得多。</strong><img alt="17.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/17.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_10"></span><h2>虚拟线程创建</h2><p style="color:#24292f; text-align:start"><strong>方法一：直接创建虚拟线程</strong></p><pre><code>Thread vt = Thread.startVirtualThread(() -&gt; {
    System.out.println("hello wolrd virtual thread");
});
</code></pre><p style="color:#24292f; text-align:start"><strong>方法二：创建虚拟线程但不自动运行，手动调用 start() 开始运行</strong></p><pre><code>Thread.ofVirtual().unstarted(() -&gt; {
    System.out.println("hello wolrd virtual thread");
});
vt.start();
</code></pre><p style="color:#24292f; text-align:start"><strong>方法三：通过虚拟线程的 ThreadFactory 创建虚拟线程</strong></p><pre><code>ThreadFactory tf = Thread.ofVirtual().factory();
Thread vt = tf.newThread(() -&gt; {
    System.out.println("Start virtual thread...");
    Thread.sleep(1000);
    System.out.println("End virtual thread. ");
});
vt.start();
</code></pre><p style="color:#24292f; text-align:start"><strong>方法四：Executors.newVirtualThreadPer</strong><span>&nbsp;</span><strong>-TaskExecutor()</strong></p><pre><code>
ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();
executor.submit(() -&gt; {
    System.out.println("Start virtual thread...");
    Thread.sleep(1000);
    System.out.println("End virtual thread.");
    return true;
});
</code></pre><span id="OSC_h2_11"></span><h2>虚拟线程实现原理</h2><p style="color:#24292f; text-align:start">虚拟线程是由 Java 虚拟机调度，而不是操作系统。虚拟线程占用空间小，同时使用轻量级的任务队列来调度虚拟线程，避免了线程间基于内核的上下文切换开销，因此可以极大量地创建和使用。</p><p style="color:#24292f; text-align:start"><strong>简单来看，虚拟线程实现如下：virtual thread =continuation+scheduler+runnable</strong></p><p style="color:#24292f; text-align:start">虚拟线程会把任务（java.lang.Runnable 实例）包装到一个 Continuation 实例中:</p><ul><li>当任务需要阻塞挂起的时候，会调用 Continuation 的 yield 操作进行阻塞，虚拟线程会从平台线程卸载。</li><li>当任务解除阻塞继续执行的时候，调用 Continuation.run 会从阻塞点继续执行。</li></ul><p style="color:#24292f; text-align:start">Scheduler 也就是执行器，由它将任务提交到具体的载体线程池中执行。</p><ul><li>它是 java.util.concurrent.Executor 的子类。</li><li>虚拟线程框架提供了一个默认的 FIFO 的 ForkJoinPool 用于执行虚拟线程任务。</li></ul><p style="color:#24292f; text-align:start">Runnable 则是真正的任务包装器，由 Scheduler 负责提交到载体线程池中执行。</p><p style="color:#24292f; text-align:start">JVM 把虚拟线程分配给平台线程的操作称为 mount（挂载），取消分配平台线程的操作称为 unmount（卸载）：</p><p style="color:#24292f; text-align:start"><strong>mount 操作</strong>：虚拟线程挂载到平台线程，虚拟线程中包装的 Continuation 堆栈帧数据会被拷贝到平台线程的线程栈，这是一个从堆复制到栈的过程。</p><p style="color:#24292f; text-align:start"><strong>unmount 操作</strong>：虚拟线程从平台线程卸载，此时虚拟线程的任务还没有执行完成，所以虚拟线程中包装的 Continuation 栈数据帧会会留在堆内存中。</p><p style="color:#24292f; text-align:start">从 Java 代码的角度来看，其实是看不到虚拟线程及载体线程共享操作系统线程的，会认为虚拟线程及其载体都在同一个线程上运行，因此，在同一虚拟线程上多次调用的代码可能会在每次调用时挂载的载体线程都不一样。JDK 中使用了<span>&nbsp;</span><strong>FIFO 模式的 ForkJoinPool 作为虚拟线程的调度器</strong>，从这个调度器看虚拟线程任务的执行流程大致如下：</p><ul><li>调度器（线程池）中的平台线程等待处理任务。<img alt="66.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/66.png" referrerpolicy="no-referrer"></li><li>一个虚拟线程被分配平台线程，该平台线程作为载体线程执行虚拟线程中的任务。<img alt="90.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/90.png" referrerpolicy="no-referrer"></li><li>虚拟线程运行其 Continuation，Mount(挂载) 平台线程后，最终执行 Runnable 包装的用户实际任务。<img alt="009.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/009.png" referrerpolicy="no-referrer"></li><li>虚拟线程任务执行完成，标记 Continuation 终结，标记虚拟线程为终结状态，清空上下文，等待 GC 回收，解除挂载载体线程会返还到调度器（线程池）中等待处理下一个任务。<img alt="102.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/102.png" referrerpolicy="no-referrer"></li></ul><p style="color:#24292f; text-align:start">上面是没有阻塞场景的虚拟线程任务执行情况，如果遇到了阻塞 (例如 Lock 等) 场景，会触发 Continuation 的 yield 操作让出控制权，等待虚拟线程重新分配载体线程并且执行，具体见下面的代码：</p><pre><code> ReentrantLock lock = new ReentrantLock();
        Thread.startVirtualThread(() -&gt; {
            lock.lock();    
        });
        // 确保锁已经被上面的虚拟线程持有
        Thread.sleep(1000);  
        Thread.startVirtualThread(() -&gt; {
            System.out.println("first");
            会触发 Continuation 的 yield 操作
            lock.lock(); 
            try {
                System.out.println("second");
            } finally {
                lock.unlock();
            }
            System.out.println("third");
        });
        Thread.sleep(Long.MAX_VALUE);
    }
</code></pre><p>虚拟线程中任务执行时候调用 Continuation#run()<span>&nbsp;</span><strong>先执行了部分任务代码，然后尝试获取锁</strong>，该操作是阻塞操作会导致 Continuation 的 yield 操作让出控制权，如果 yield 操作成功，会从载体线程 unmount，载体线程栈数据会移动到 Continuation 栈的数据帧中，保存在堆内存中，虚拟线程任务完成，此时虚拟线程和 Continuation 还没有终结和释放，载体线程被释放到执行器中等待新的任务；如果 Continuation 的 yield 操作失败，则会对载体线程进行 Park 调用，<strong>阻塞在载体线程上，此时虚拟线程和载体线程同时会被阻塞</strong>，本地方法，Synchronized 修饰的同步方法都会导致 yield 失败。<img alt="008.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/008.png" referrerpolicy="no-referrer"></p><p>当锁持有者释放锁之后，<strong>会唤醒虚拟线程获取锁</strong>，获取锁成功后，虚拟线程会重新进行 mount，让虚拟线程任务再次执行，<strong>此时有可能是分配到另一个载体线程中执行</strong>，Continuation 栈会的数据帧会被恢复到载体线程栈中，然后再次调用 Continuation#run() 恢复任务执行。<img alt="172.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/172.png" referrerpolicy="no-referrer"></p><p>虚拟线程任务执行完成，标记 Continuation 终结，标记虚拟线程为终结状态，清空上下文变量，解除载体线程的挂载载体线程返还到调度器（线程池）中作为平台线程等待处理下一个任务。</p><p style="color:#24292f; text-align:start">Continuation 组件十分重要，<strong>它既是用户真实任务的包装器，同时提供了虚拟线程任务暂停/继续的能力，以及虚拟线程与平台线程数据转移功能，当任务需要阻塞挂起的时候，调用 Continuation 的 yield 操作进行阻塞。当任务需要解除阻塞继续执行的时候，则调用 Continuation 的 run 恢复执行。</strong></p><p style="color:#24292f; text-align:start">通过下面的代码可以看出 Continuation 的神奇之处，通过在编译参数加上--add-exports java.base/jdk.internal.vm=ALL-UNNAMED 可以在本地运行。</p><pre><code>ContinuationScope scope = new ContinuationScope("scope");
Continuation continuation = new Continuation(scope， () -&gt; {
    System.out.println("before yield 开始");
    Continuation.yield(scope);
    System.out.println("after yield 结束");
});
System.out.println("1 run");
// 第一次执行 Continuation.run
continuation.run();
System.out.println("2 run");
// 第二次执行 Continuation.run
continuation.run();
System.out.println("Done");
</code></pre><p style="color:#24292f; text-align:start"><img alt="756.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/756.png" referrerpolicy="no-referrer">通过上述案例可以看出，<strong>Continuation 实例进行 yield 调用后，再次调用其 run 方法就可以从 yield 的调用之处继续往下执行，从而实现了程序的中断和恢复。</strong></p><span id="OSC_h2_12"></span><h2>虚拟线程内存占用评估</h2><p style="color:#24292f; text-align:start"><strong>单个平台线程的资源占用：</strong></p><ul><li>根据 JVM 规范，预留 1 MB 线程栈空间。</li><li>平台线程实例，会占据 2000+ byte 数据。</li></ul><p style="color:#24292f; text-align:start"><strong>单个虚拟线程的资源占用：</strong></p><ul><li>Continuation 栈会占用数百 byte 到数百 KB 内存空间，是作为堆栈块对象存储在 Java 堆中。</li><li>虚拟线程实例会占据 200 - 240 byte 数据。</li></ul><p style="color:#24292f; text-align:start">从对比结果来看，<strong>理论上单个平台线程占用的内存空间至少是 KB 级别的，而单个虚拟线程实例占用的内存空间是 byte 级别</strong>，两者的内存占用差距较大，这也是虚拟线程可以大批量创建的原因。</p><p style="color:#24292f; text-align:start">下面通过一段程序去测试平台线程和虚拟线程的内存占用：</p><pre><code>private static final int COUNT = 4000;

/**
 *  -XX:NativeMemoryTracking=detail
 *
 * @param args args
 */
public static void main(String[] args) throws Exception {
    for (int i = 0; i &lt; COUNT; i++) {
        new Thread(() -&gt; {
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }， String.valueOf(i)).start();
    }
    Thread.sleep(Long.MAX_VALUE);
}
</code></pre><p style="color:#24292f; text-align:start">上面的程序运行后启动 4000 平台线程，通过 -XX:NativeMemoryTracking=detail 参数和 JCMD 命令查看所有线程占据的内存空间如下：<img alt="890.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/890.jpeg" referrerpolicy="no-referrer">内存占用大部分来自创建的平台线程，<strong>总线程栈空间占用约为 8096 MB，两者加起来占据总使用内存（8403MB）的 96% 以上。</strong></p><p style="color:#24292f; text-align:start">用类似的方式编写运行虚拟线程的程序：</p><pre><code>private static final int COUNT = 4000;

/**
 * -XX:NativeMemoryTracking=detail
 *
 * @param args args
 */
public static void main(String[] args) throws Exception {
    for (int i = 0; i &lt; COUNT; i++) {
        Thread.startVirtualThread(() -&gt; {
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }
    Thread.sleep(Long.MAX_VALUE);
}
</code></pre><p style="color:#24292f; text-align:start">上面的程序运行后启动 4000 虚拟线程：<img alt="123.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/123.jpeg" referrerpolicy="no-referrer">堆内存的实际占用量和总内存的实际占用量都不超过 300 MB，可以证明虚拟线程在大量创建的前提下也不会去占用过多的内存，且<strong>虚拟线程的堆栈是作为堆栈块对象存储在 Java 的堆中的，可以被 GC 回收，又降低了虚拟线程的占用。</strong></p><span id="OSC_h2_13"></span><h2>虚拟线程的局限及使用建议</h2><ul><li>虚拟线程存在 native 方法或者外部方法 (Foreign Function &amp; Memory API，jep 424 ) 调用不能进行 yield 操作，此时载体线程会被阻塞。</li><li>当运行在 synchronized 修饰的代码块或者方法时，不能进行 yield 操作，此时载体线程会被阻塞，推荐使用 ReentrantLock。</li><li><strong>ThreadLocal 相关问题</strong>，目前虚拟线程仍然是支持 ThreadLocal 的，但是由于虚拟线程的数量非常多，会导致 Threadlocal 中存的线程变量非常多，需要频繁 GC 去清理，对性能会有影响，官方建议尽量少使用 ThreadLocal，同时不要在虚拟线程的 ThreadLocal 中放大对象，目前官方是想通过 ScopedLocal 去替换掉 ThreadLocal，但是在 21 版本还没有正式发布，<strong>这个可能是大规模使用虚拟线程的一大难题</strong>。</li><li><strong>无需池化虚拟线程</strong><span>&nbsp;</span>虚拟线程占用的资源很少，因此可以大量地创建而无须考虑池化，它不需要跟平台线程池一样，平台线程的创建成本比较昂贵，所以通常选择去池化，去做共享，<strong>但是池化操作本身会引入额外开销</strong>，对于虚拟线程池化反而是得不偿失，使用虚拟线程我们抛弃池化的思维，用时创建，用完就扔。</li></ul><span id="OSC_h2_14"></span><h2>虚拟线程适用场景</h2><ul><li>大量的 IO 阻塞等待任务，例如下游 RPC 调用，DB 查询等。</li><li>大批量的处理时间较短的计算任务。</li><li>Thread-per-request (一请求一线程) 风格的应用程序，例如主流的 Tomcat 线程模型或者基于类似线程模型实现的 SpringMVC 框架 ，这些应用只需要小小的改动就可以带来巨大的吞吐提升。</li></ul><span id="OSC_h1_15"></span><h1>五、虚拟线程压测性能分析</h1><p style="color:#24292f; text-align:start">在下面的测试中，我们将模拟最常使用的场景-使用 Web 容器去处理 Http 请求。</p><p style="color:#24292f; text-align:start"><strong>场景一：</strong><span>&nbsp;</span>在 Spring Boot 中使用内嵌的 Tomcat 去处理 Http 请求，<strong>使用默认的平台线程池作为 Tomcat 的请求处理线程池。</strong></p><p style="color:#24292f; text-align:start"><strong>场景二</strong>：使用<strong>Spring -WebFlux</strong>创建基于事件循环模型的应用程序，进行响应式请求处理。</p><p style="color:#24292f; text-align:start"><strong>场景三：</strong><span>&nbsp;</span>在 Spring Boot 中使用内嵌的 Tomcat 去处理 Http 请求，<strong>使用虚拟线程池作为 Tomcat 的请求处理线程池</strong><span>&nbsp;</span>(Tomcat 已支持虚拟线程)。</p><span id="OSC_h2_16"></span><h2>测试流程</h2><ul><li>Jmeter 开启 500 个线程去并行发起请求。每个线程将等待请求响应后再发起下一次请求，单次请求超时时间为 10s，测试时间持续 60s。</li><li>测试的 Web Server 将接受 Jmeter 的请求，并调用慢速服务器获取响应并返回。</li><li>慢速服务器以随机超时响应。最大响应时间为 1000ms。平均响应时间为 500ms。<img alt="46.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/46.png" referrerpolicy="no-referrer"></li></ul><span id="OSC_h2_17"></span><h2>衡量指标</h2><p style="color:#24292f; text-align:start"><strong>吞吐量和平均响应时间</strong>，吞吐量越高，平均响应时间越低，性能就越好。</p><span id="OSC_h2_18"></span><h2>Tomcat+普通线程池</h2><p style="color:#24292f; text-align:start">默认情况下，Tomcat 使用一请求一线程模型处理请求，当 Tomcat 收到请求时，会从线程池中取一个线程去处理请求，该分配的线程将一直保持占用状态，直到请求结束才会释放。当线程池中没有线程时，请求会一直阻塞在队列中，直到有请求结束释放线程。默认队列长度为 Integer.MAX。</p><span id="OSC_h3_19"></span><h3>默认线程池</h3><p style="color:#24292f; text-align:start">默认情况下，线程池最多包含 200 个线程。这基本上意味着单个时间点最多处理 200 个请求。对于每个请求服务都会以阻塞的方式调用平均 RT500ms 的慢速服务器。因此，可以预期每秒 400 个请求的吞吐量，最终压测结果非常接近预期值，为 388 req/sec。<img alt="112.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/112.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>增加线程池</strong></p><p style="color:#24292f; text-align:start">生产环境为了吞吐考虑,一般不会使用默认值,会把线程池增大到 server.tomcat.threads.max=500+，调整到 500+ 之后的压测结果如下：<img alt="998.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/998.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看出最终的吞吐量和线程数量呈比例上升，同时由于线程数的增加，请求等待减少，平均 RT 趋向于慢速服务器的响应平均 RT。</p><p style="color:#24292f; text-align:start">但是需要注意的是，平台线程的创建受到内存和 Java 线程映射模型的限制，不能无限扩展，同时大量线程会导致 CPU 资源大量消耗在上下文切换时，整体性能反而降低。</p><span id="OSC_h2_20"></span><h2>WebFlux</h2><p style="color:#24292f; text-align:start">WebFlux 跟传统的 Tomcat 线程模型不一样，他不会为每个请求分配一个专用线程，而是使用事件循环模型通过非阻塞 I/O 操作同时处理多个请求，这使得它能够用有限的线程数量处理大量的并发请求。</p><p style="color:#24292f; text-align:start">在压测的场景下，使用 WebClient 来进行一个非阻塞的 Http 调用慢速处理器，并使用 RouterFunction 来做请求映射和处理。</p><pre><code>@Bean
public WebClient slowServerClient() {
    return WebClient.builder()
            .baseUrl("http://127.0.0.1:8000")
            .build();
}

@Bean
public RouterFunction&lt;ServerResponse&gt; routes(WebClient slowServerClient) {
    return route(GET("/")， (ServerRequest req) -&gt; ok()
            .body(
                    slowServerClient
                            .get()
                            .exchangeToFlux(resp -&gt; resp.bodyToFlux(Object.class))，
                    Object.class
            ));
}

</code></pre><p style="color:#24292f; text-align:start">WebFlux 压测结果如下：<img alt="087.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/087.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看到，WebFlux 的请求完全没有阻塞，仅用了 25 个线程就达到了 964 req/sec 的吞吐。</p><span id="OSC_h2_21"></span><h2>Tomcat+虚拟线程池</h2><p style="color:#24292f; text-align:start">与平台线程相比，虚拟线程的内存占用量要低得多，运行程序大量的创建虚拟线程，而不会耗尽系统资源；同时当遇到 Thread.sleep()，CompletableFuture.await()，等待 I/O，获取锁时，虚拟线程会自动卸载，JVM 可以自动切换到另外的等待就绪的虚拟线程，提升单个平台线程的利用率，保证平台线程不会浪费在无意义的阻塞等待上。</p><p style="color:#24292f; text-align:start">要想使用虚拟线程，需要先在启动参数中加上 --enable-preview，同时 Tomcat 在 10 版本已支持虚拟线程，我们只需要替换 Tomcat 的平台线程池为虚拟线程池即可。</p><pre><code>@Bean
public TomcatProtocolHandlerCustomizer&lt;?&gt; protocolHandler() {
    return protocolHandler -&gt;
            protocolHandler.setExecutor(Executors.newVirtualThreadPerTaskExecutor());
}


private final RestTemplate restTemplate;

@GetMapping
public ResponseEntity&lt;Object&gt; callSlowServer(){
    return restTemplate.getForEntity("http://127.0.0.1:8000"， Object.class);
}
</code></pre><p style="color:#24292f; text-align:start">最终压测结果如下：<img alt="665.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/665.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看到虚拟线程的压测结果实际上与 WebFlux 的情况相同，<strong>但我们根本没有使用任何复杂的响应式编程技术</strong>。同时对慢速服务器的调用，也使用常规的阻塞 RestTemplate。<strong>我们所做的只是用虚拟线程执行器替换线程池就达到更复杂的 Webflux 写法相同的效果。</strong></p><p style="color:#24292f; text-align:start">总的压测结果如下：<img alt="109.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/109.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">通过以上压测结果，我们可以得出以下结论：</p><ul><li>传统的线程池模式效果差强人意，可以通过提高线程数量可以提升吞吐，但是需要考虑到系统容量和资源限制，但是对于大部分场景来说使用线程池去处理阻塞操作仍然是主流且不错的选择。</li><li>WebFlux 的效果非常好，但是考虑到需要完全按照响应式风格进行开发，成本及难度较大，同时 WebFlux 与现有的一些主流框架存在一些兼容问题，例如 Mysql 官方 IO 库不支持 NIO、Threadlocal 兼容问题等等。现有应用的迁移基本要重写所有代码，改动量和风险都不可控。</li><li><strong>虚拟线程的效果非常好，最大的优势就是我们没有修改代码或采用任何反应式技术，唯一更改是将线程池替换为虚拟线程</strong>。虽然改动较小，但与使用线程池相比，性能结果得到了显著改善。</li></ul><p style="color:#24292f; text-align:start">基于上述的压测结果，可以较为乐观的认为虚拟线程会颠覆我们目前的服务和框架中的请求处理方法。</p><span id="OSC_h1_22"></span><h1>六、总结</h1><p style="color:#24292f; text-align:start">过去很长时间，在编写服务端应用时，我们对于每个请求，都使用独占的线程来处理，请求之间是相互独立的，这就是<span>&nbsp;</span><strong>一请求一线程的模型</strong>这种方式易于理解和编程实现，也易于调试和性能调优。</p><p style="color:#24292f; text-align:start">然而，一请求一线程风格并不能简单地使用平台线程来实现，因为平台线程是操作系统中线程的封装。操作系统的线程会申请成本较高，存在数量上限。**对于一个要并发处理海量请求的服务器端应用来说，对每个请求都创建一个平台线程是不现实的。**在这种前提下，涌现出一批非阻塞 I/O 和异步编程框架，如 WebFlux ，RX-Java。当某个请求在等待 I/O 操作时，它会暂时让出线程，并在 I/O 操作完成之后继续执行。通过这种方式，可以用少量线程同时处理大量的请求。这些框架可以提升系统的吞吐量，但是要求开发人员必须熟悉所使用的底层框架，并按照响应式的风格来编写代码，响应式框架的调试困难，学习成本，兼容问题使得大部分人望而却步 。 在使用虚拟线程之后，一切都将改变，开发人员可以使用目前最习惯舒服的方式来编写代码，<strong>高性能和高吞吐由虚拟线程自动帮你完成，这极大地降低了编写高并发服务应用的难度。</strong></p><p style="color:#24292f; text-align:start"><strong>参考文档：</strong></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F444" target="_blank">https://openjdk.org/jeps/444</a></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F514719325" target="_blank">https://zhuanlan.zhihu.com/p/514719325</a></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.vlts.cn%2Fpost%2Fvirtual-thread-source-code%23%25E5%2589%258D%25E6%258F%2590" target="_blank">https://www.vlts.cn/post/virtual-thread-source-code#%E5%89%8D%E6%8F%90</a></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F499342616" target="_blank">https://zhuanlan.zhihu.com/p/499342616</a></p><p style="color:#24292f; text-align:start">*<strong>文/creed</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" target="_blank">得物技术官网</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10319533</guid>
            <link>https://my.oschina.net/u/5783135/blog/10319533</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果开源深度学习框架 MLX，专门针对 Apple Silicon 芯片优化]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>苹果开源了针对 Apple Silicon 芯片优化的 MLX 深度学习框架，并表示该框架可以简化研究人员在&nbsp;<span>Mac、iPad、iPhone 平台设计和部署模型的过程。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-5c9da56834a3118a57e83b8ae26e0181df3.png" referrerpolicy="no-referrer"></p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fml-explore%2Fmlx" target="_blank">https://github.com/ml-explore/mlx</a></u></em></p><p>根据介绍，该深度学习框架提供了与主流开发工具接轨的 API、支持延迟计算、采用动态设计并软硬结合、对研究人员较为友好，且具有统一内存优势。</p><p><strong>MLX 主要特性</strong></p><ul><li><p><strong>提供开发者熟悉的 API</strong>：MLX 具有和 NumPy 接近的 Python API，此外还拥有功能齐全的 C++ API，它与 Python API 非常相似。 MLX 具有<code>mlx.nn</code>和<code>mlx.optimizers</code>等更高级别的包，其 API 紧密贴合 PyTorch，以简化构建更复杂的模型</p></li><li><p><strong>可组合函数转换</strong>：MLX 具有用于自动微分、自动矢量化和计算图优化的可组合函数转换</p></li><li><p><strong>惰性计算 (Lazy computation)</strong>：MLX 中的计算是惰性计算。数组仅在需要时才会具体化</p></li><li><p><strong>动态图构建</strong>：MLX 中的计算图采用动态构建，更改函数参数的形状不会触发缓慢的编译，并且调试简单直观</p></li><li><p><strong>多设备：</strong>可以在任何支持的设备上运行（当前为 CPU 和 GPU），确保用户能够充分利用硬件</p></li><li><p><strong>具备统一内存优势</strong>：MLX 和其他框架的显着区别是采用统一内存模型。 MLX 中的数组位于共享内存中，可以在任何支持的设备类型上执行 MLX 阵列上的操作，而无需移动数据。</p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269870</guid>
            <link>https://www.oschina.net/news/269870</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[麦当劳中国启动鸿蒙原生应用开发]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">麦当劳中国 12 月 6 日与华为达成鸿蒙合作协议，正式宣布麦当劳中国 APP 将基于 HarmonyOS NEXT 启动鸿蒙原生应用开发。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">中国市场已经成为了麦当劳全球的第二大市场。</span>麦当劳中国在中国市场坐拥 5500 多家餐厅，拥有超过 20 万员工，每年服务顾客超过十亿人次，成为首批启动鸿蒙原生应用开发的全球大型连锁餐饮企业。</span></p><p><span style="color:#000000"><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-0f4b27f891e839fc65b056b51f6d64a2c7d.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，美团、去哪儿、新浪、钉钉、蚂蚁集团、小红书、58 集团、哔哩哔哩、高德地图等均已启动鸿蒙原生应用开发。</span></p><p><span style="background-color:#ffffff; color:#000000">华为终端云服务开发者服务与平台部总裁望岳表示：「麦当劳中国启动鸿蒙原生应用开发，是鸿蒙生态发展在餐饮界的又一次重要突破。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269869</guid>
            <link>https://www.oschina.net/news/269869</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[睿思芯科正式加入 deepin（深度）社区，共同推进 RISC-V 生态繁荣！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">内容来源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社区</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">近日，睿思芯科与&nbsp;deepin（深度）社区签署了&nbsp;CLA（Contributor License Agreement，贡献者许可协议），正式宣布加入&nbsp;deepin（深度）社区。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="383" src="https://storage.deepin.org/thread/202312070959511778_%E9%BB%98%E8%AE%A4%E6%A0%87%E9%A2%98__2023-12-07+09_58_20.jpeg" width="900" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">作为一家专注于 RISC-V 芯片设计开发的公司，睿思芯科始终致力于为用户提供高算力、低功耗和高安全性的处理器产品。通过加入 deepin（深度）社区，睿思芯科将进一步加强与开源社区的合作，推动技术创新和生态发展：</p><ul><li><p>在产品方面，睿思芯科将积极参与 deepin（深度）操作系统的适配和优化，共同探索和开发新的功能和应用，为 deepin 用户提供更好的体验；</p></li><li><p>在技术方面，将持续推动 deepin（深度）操作系统与 RISC-V 芯片的技术创新和发展，提升 deepin（深度）操作系统在 RISC-V 芯片上的性能和安全性；</p></li><li>在生态方面，将更多地参与 deepin（深度）社区的活动和项目，与 deepin 的众多合作伙伴一起，为用户提供更可靠的 RISC-V 芯片产品和服务，共同打造繁荣的 deepin 生态。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>「生态合作既要脚踏实地，也需要仰望星空。」</strong>对于此次合作，统信软件生态中心硬件生态部总经理苏毓航表示，「站在操作系统的角度来看，对于和睿思芯科及 RISC-V 的产品及生态发展，可以关注以下三个方向：<strong>第一，基于 deepin（深度）社区进行第一阶段的产品适配，同时放眼全球生态，坚持开放思维，寻找差异化发展之路；第二，专注实现应用场景的落地，尤其是在 AIoT、专用芯片、数据中心、边缘计算市场的应用；第三，共同培育人才和开发者生态，精简指令集的工具链及操作系统软件生态建设仍需要高水平的人才。</strong>」</p><hr><h4><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank"><strong>关于 deepin（深度）&nbsp;社区</strong></a></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">deepin（深度）社区成立于 2008 年，是国内历史悠久，全球规模最大且最活跃的开源 OS 社区之一，也是中国首个桌面操作系统根社区，致力通过社区开发与协作，为所有人提供自由、开放的交流平台以及最好的开源操作系统，推动桌面系统的开源与革新。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">目前，deepin（深度）社区注册用户近 15 万人，总发帖量 100 万+，共创建 44 个 SIG 组，累计解决 Issue 达 8000+，PR 超 15000+，总开源代码超过 1000 万行。同时，deepin（深度）社区积极吸纳全球开源智慧，推动操作系统技术和产品创新，用户遍布全球 100 多个国家和地区，已有 6 个海外分支社区，涵盖西班牙、巴西、意大利、俄罗斯等，镜像站点 150+，全球用户累计超过 300 万+。</p><h4><strong>关于睿思芯科</strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">睿思芯科成立于 2018 年，主要开发基于 RISC-V 的处理器，提供垂直领域处理器设计及芯片解决方案，满足从边缘计算到数据中心等各领域的要求，客户涵盖国内外多家知名企业，开展处理器 IP 授权和 SoC 开发合作。公司创始团队来自于加州大学伯克利分校 RISC-V 原创项目组，拥有 RISC-V CPU 领域的深厚学识和卓越人才，具备世界一流的研发实力，致力于高端处理器解决方案的自主研发，聚焦 RISC-V CPU 核心技术和产品的研究与突破。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269863</guid>
            <link>https://www.oschina.net/news/269863</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌正式发布最强 AI 模型 Gemini]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 6 日，谷歌宣布推出其认为规模最大、功能最强大的人工智能模型 <strong>Gemini</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3b160dbfcd5f47ad00f617e0c64f7c2889e.png" referrerpolicy="no-referrer"></p><p>Gemini 将包括三种不同的套件：<strong>Gemini Ultra、Gemini Pro 和 Gemini Nano</strong>。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e8d709129890d597fe88456b9f64fdb2a43.jpg" referrerpolicy="no-referrer"></p><p><strong><em>Gemini Ultra 能力最强，Gemini Pro 可扩展多任务，Gemini Nano 适用于特定任务和移动设备。</em></strong></p><p>Google DeepMind 首席执行官兼联合创始人 Demis Hassabis 说道，Gemini 是一个多模态大模型，这意味着它可以概括并无缝地理解、操作和组合不同类型的信息，包括文本、代码、音频、图像和视频。</p><p>据介绍，从自然图像、音频和视频理解到数学推理， Gemini Ultra 在大型语言模型研发中被广泛使用的 32 个学术基准测试集中，在其中 30 个测试集的性能超过了目前最强的大语言模型 GPT-4。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f610c5aa071ded6d966aa4faa37051e950.png" referrerpolicy="no-referrer"></p><p>Gemini Ultra 在 MMLU（大规模多任务语言理解数据集）中的得分率高达 90.0%，首次超越了人类专家。MMLU 结合了数学、物理、历史、法律、医学和伦理学等 57 个科目来测试大模型的知识储备和解决问题的能力。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6952202902ed32051c87ec7c36aa9e34475.png" referrerpolicy="no-referrer"></p><blockquote><p><strong>更多评测数据查看：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeepmind.google%2Ftechnologies%2Fgemini%2F%23introduction" target="_blank">https://deepmind.google/technologies/gemini/#introduction</a></em></u></strong></p></blockquote><p>Google 将在其产品中添加 Gemini。从今天开始，<strong>Bard 将使用 Gemini Pro 的微调版本来执行更高级的推理、规划、理解等。这是 Bard 自推出以来最大的升级</strong>。</p><p>Google 还将 Gemini 引入了 Pixel。Pixel 8 Pro 将是第一款运行 Gemini Nano 的智能手机。</p><p>在接下来的几个月中，Gemini 将出现在 Google 更多的产品和服务中，例如搜索、广告、Chrome 和 Duet AI。</p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fgoogle-gemini-ai%2F" target="_blank">详情查看谷歌官方通告</a></em></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 00:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269844/google-gemini-ai</guid>
            <link>https://www.oschina.net/news/269844/google-gemini-ai</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[把电脑分辨率改成 500% —— 「赛博灯泡」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天网上冲浪看到了一个新梗：<strong>「赛博灯泡」</strong>，和古早的「别吞灯泡」老梗一样——</p><p><img src="https://static.oschina.net/uploads/space/2023/1206/194014_qo1V_2720166.gif" referrerpolicy="no-referrer"></p><p>不听劝的网友看到后纷纷将电脑分辨率调成 500%，结果不负众望：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b58bdd1d9ac016386d141c5f1775643896a.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-eeb007b40937823463cc0131b6201723aab.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8828681c7e3dd14ebf15b515bab9e525c4d.png" referrerpolicy="no-referrer"></p><p>现实中这样的例子比比皆是：别舔冬天的栏杆、别吃 xxx 辣薯片等等。触发这些经典名场面的条件很容易就能总结：</p><p>1.尝试门槛低<br> 2.后果严重，但又没有那么严重<br> 3.明确警告「不要尝试」</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-83e00d1164813fed613e5e6aeeb4d39b0c1.png" referrerpolicy="no-referrer"></p></blockquote><p>对了，谁能说一下怎么恢复到正常的分辨率。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 11:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269806</guid>
            <link>https://www.oschina.net/news/269806</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米 14 系列手机内核源代码已托管至 GitHub]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>小米 14 系列手机 (Xiaomi 14 &amp; Xiaomi 14 Pro) 的内核源代码已上传至 GitHub。提交记录显示，AOSP 版本基于 Android U，标签为 KERNEL.PLATFORM.3.0.r1-03200-kernel.0-1。</p><p><img height="1372" src="https://oscimg.oschina.net/oscnet/up-613df6bb8f2fb67ba1e36658886adfa4bab.png" width="1776" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMiCode%2FXiaomi_Kernel_OpenSource%2Fcommit%2F317e609aa4fb956c3aff565b62215e5a8041ca0c" target="_blank">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/commit</a></u></em></p><p>由于 Android 系统是基于 Linux 的，而 Linux 采用 GPLv2 授权，根据 GPL 协议的要求，派生作品均需要发布源代码。小米从 2018 年开始把新机型的内核源码开源，<strong>开源时间通常为新机发布后的三个月内</strong>。从 2019 年的小米 9 开始，小米将开源时间改为新机上市同时开源。</p><p>因此从小米 9 系列开始，几乎总会在发布当天或者隔一天就公开源码，不过这次的小米 14 系列机型慢了一个多月。</p><p><strong>延伸阅读</strong></p><ul><li><a href="https://www.oschina.net/news/125036/xiaomi-mi10-kernel-code">小米开源新机 Mi 11 内核源码</a></li><li><a href="https://www.oschina.net/news/114993/xiaomi-redmi-note-9-pro-max-8-kernel-source-code">小米开源 Redmi Note 8 Pro 和 Note 9 Pro 系列的内核源码</a></li><li><a href="https://www.oschina.net/news/114529/xiaomi-redmi-k30-pro-kernel-source-code">小米开源 Redmi K30 Pro 内核源码</a></li><li><a href="https://www.oschina.net/news/104598/xiaomi-9-open-source-kernel-code">小米 9 开源内核代码，上市即开源</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 10:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269796</guid>
            <link>https://www.oschina.net/news/269796</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[揭秘 Zadig V2.0.0 新开源架构：效率飙升 50% 的背后故事！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" src="https://pic1.zhimg.com/80/v2-07cd622e59f2c7ab34d05817fd5cd569_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p>11 月初，Zadig 官方合并了 Zadig 系列产品并正式发布了 V2.0.0 全新架构「 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490989%26idx%3D1%26sn%3D53f771dcb0349babdc0077bd65ad52fa%26chksm%3Dcfb4510df8c3d81b11eb7a6f6ade9b4ba0b9d32f2d59e5d324eaee65487c1f83847edf1290bb%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">深秋，寒露：是时候和 Zadig 说再见了</a>」，此次合并基于开源 Zadig v1.18.0 最新版，并整合了 ZadigX v1.8.0 企业版的全部新功能代码。新版本定名为 Zadig v2.0.0，服务端代码完全开源于 GitHub。对于社区用户而言，V2.0.0 在原有开源基础上提供更多企业级功能，改进了易用性和性能，优化了安全细节，工作流并行和复杂场景的执行效率显著提高，提升效率高达 50%。Zadig 的资源运行成本也降低了近 30%。未来迭代中，所有用户将持续获得产品底层能力的可靠性，助力更多企业提升云原生持续交付能力，为开发者提供更出色的体验。对于已在大规模使用 Zadig 的用户，平滑升级后可以免费激活并体验专业版功能长达 30 天，到期后数据保留，基础版功能仍可正常使用。以下将详细介绍架构升级细节、业务及系统架构变化内容。</p><span id="OSC_h1_1"></span><h1><span style="color:#fd2968"><strong>Why Zadig V2.0.0 架构升级背景</strong></span></h1><p>随着业务的不断扩展，Zadig 面临的挑战也在不断演变。为了确保持续发展、满足用户需求，对 V1.x 系统架构进行升级已成为迫切需求。我们主要考虑到以下方面：</p><ol><li><p><span style="color:#fd2968"><strong>性能需求：</strong></span> v1.x 版本在处理大量请求时出现性能瓶颈，尤其在用户数量增加和权限配置复杂的情况下。升级旨在提高系统响应速度，改善用户体验。</p></li><li><p><span style="color:#fd2968"><strong>安全需求：</strong></span> 随着系统功能逐渐完善，用户关注点转向使用体验和安全性。v1.x 版本中的权限系统可能存在配置信息泄露问题。为了满足更细粒度权限管控和更复杂用户系统的需求，我们需要进行架构升级。</p></li></ol><span id="OSC_h1_2"></span><h1><span style="color:#fd2968"><strong>升级涉及的组件变化</strong></span></h1><p>Zadig 的底层部署基于标准的 Helm Chart，组件资源和配置在 Chart 中定义。从 Zadig v1.x.0 到 Zadig v2.0.0，以下是组件的变化：</p><p><span style="color:#fd2968"><strong><em>新增服务</em></strong></span></p><ul><li><p>user: 2.0.0</p></li><li><p>time-nlp: 2.0.0</p></li><li><p>redis: latest</p></li></ul><p><span style="color:#fd2968"><strong><em>下线服务</em></strong></span></p><ul><li><p>nsq</p></li><li><p>opa</p></li><li><p>resource-server</p></li></ul><p>Zadig 使用标准 Helm 执行部署，组件资源以及配置均在 Chart 中定义，Chart 结构如下：</p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-4a8fc9307e967dd7b083328d50a0d35d_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><span id="OSC_h1_3"></span><h1><span style="color:#fd2968"><strong>升级后的架构图示</strong></span></h1><p>Zadig V2.0.0 业务和系统架构图如下所示，帮助深入了解 Zadig v2.0.0 的整体业务和技术架构。</p><p style="text-align:center"><img alt="" src="https://pic1.zhimg.com/80/v2-dea2f29c4699ac8a1de1baa5c6464012_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><span style="color:#999999">Zadig v2.0.0 业务架构</span></p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-810c1ca4d6ee9df7ab44a9ee09561b9b_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><span style="color:#999999">Zadig v2.0.0 系统架构</span></p><span id="OSC_h1_4"></span><h1><span style="color:#fd2968"><strong>业务效果显著</strong></span></h1><span id="OSC_h3_5"></span><h3><span style="color:#fd2968">01-工作流效率提升：</span></h3><p>使用模板构建、执行和列表页面加载速度显著提高，使用户操作更为高效。</p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-47a242e9dccb5a756698aabb9ad65ff5_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><span id="OSC_h3_6"></span><h3><span style="color:#fd2968">02-环境页面加载效率提升：</span></h3><p>页面加载效率提高了 40%，大大提升了诊断问题的速度。</p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-2390dc99af5c1e44f6198ce4a2c8308d_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><span id="OSC_h3_7"></span><h3><span style="color:#fd2968">03-系统资源优化：</span></h3><p>预计系统整体负载将减少 30% - 40%，涉及 CPU 和内存资源的节约。</p><p style="text-align:center"><img alt="" src="https://pica.zhimg.com/80/v2-7e36013d61672f0cd8eac5dd05d8d000_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-f3258c8a46c58c0e87567ace72745773_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><span style="color:#999999">内部性能测试结果，不同场景下存在数据差异性，仅供参考</span></p><hr><p style="text-align:center">&nbsp;</p><p style="text-align:center"><span style="color:#fd2968">立即体验 Zadig V2.0 新架构，开启高效交付之旅！</span></p><p style="text-align:center"><span style="color:#fd2968"><strong>Zadig 开放，链接，专业</strong></span></p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-1390b9a380108bf281ae5a0946a15087_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>推荐阅读</strong></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">是时候和 Jenkins 说再见了</a></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491180%26idx%3D1%26sn%3D3320b05425fb5608aa0ddb994376d7ff%26chksm%3Dcfb452ccf8c3dbda46e16a0728daeed32cd172d4753b31bf89dc8471078dc4116404c820426c%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">Jenkins 任务如何迁移到 Zadig 工作流</a></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491208%26idx%3D1%26sn%3D6d1a8fc08eae6c00c180939da8e213eb%26chksm%3Dcfb45228f8c3db3efac6c9116f0a26cacdb6e8c6dcf71e8756608d3ae908d13a1c6676f80dbf%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">Jenkins 迁移 Zadig，新项目实施上线效率提升 6 倍</a></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">Zadig vs. Jenkins 详细比对：时代的选择与开发者之选</a></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491208%26idx%3D1%26sn%3D6d1a8fc08eae6c00c180939da8e213eb%26chksm%3Dcfb45228f8c3db3efac6c9116f0a26cacdb6e8c6dcf71e8756608d3ae908d13a1c6676f80dbf%23rd" rel="nofollow">阅读原文</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" rel="nofollow">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig" rel="nofollow">Zadig 在 Gitee</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 10:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10319356</guid>
            <link>https://my.oschina.net/koderover/blog/10319356</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AppFlowy — 基于 Flutter 和 Rust 的 Notion 开源替代品]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>AppFlowy 是 Notion 的开源替代品，一个项目和知识管理工具，使用 Flutter 和 Rust 构建。</p><p><img alt="" height="356" src="https://static.oschina.net/uploads/space/2021/1117/163830_I7Uj_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><strong>特性：</strong></p><ul><li style="text-align:start"><span><span><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span>专为需要更多控制和灵活性的团队而打造</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><ul><li style="text-align:start"><span><span>100% 数据控制。你</span></span><span><span>可以随时随地托管 AppFlowy；没有供应商锁定。</span></span></li><li><span><span>无限定制。</span></span><span><span>使用开放的核心代码库以您的方式设计和修改 AppFlowy。</span></span></li><li><span><span>一个代码库支持多个平台</span></span>。<span><span>AppFlowy 是用 Flutter 和 Rust 构建的。这意味着更快的开发、更好的原生体验和更可靠的性能。</span></span></li></ul></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><span><span><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span>专为关心数据安全和移动体验的个人打造</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p>&nbsp;</p><p style="margin-left:0px; margin-right:0px; text-align:start"><span><span><strong>100% 控制你的数据</strong></span></span>。<span><span>在你的本地机器上下载并安装 AppFlowy，用户拥有并控制自己的个人数据。</span></span></p></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><span><span><strong>广泛的可扩展。</strong></span></span><span><span>对于那些没有编码经验的人，AppFlowy 使你能够创建适合你需求的应用程序。它建立在社区驱动的工具箱上，包括模板、插件、主题等。</span></span></p><p>&nbsp;</p></li><li><p><span><span><strong>真正的 </strong></span></span><strong>Native&nbsp;</strong><span><span><strong>体验。</strong>支持离线模式，更快、更稳定。它还可以更好地与不同的设备集成。此外，AppFlowy 使用户能够访问网络上不可用的功能和可能性。</span></span></p><p>&nbsp;</p><p style="margin-left:0px; margin-right:0px; text-align:start">&nbsp;</p>
&nbsp;

<p>&nbsp;</p></li></ul></li></ul><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 08:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/appflowy</guid>
            <link>https://www.oschina.net/p/appflowy</link>
        </item>
        <item>
            <title>
                <![CDATA[Linus Torvalds 收敛脾气，谈内核社区「老龄化」问题]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Linus Torvalds 近日出席了&nbsp;Linux 基金会的日本开源峰会，并与他的好友、Verizon 开源负责人 Dirk Hohndel <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zdnet.com%2Farticle%2Flinus-torvalds-on-state-of-linux-today-and-how-ai-figures-in-its-future%2F" target="_blank">谈及了</a> Linux 的现状。</span></p><p><span style="color:#000000">两人首先谈到了&nbsp;Linux 内核版本的迭代。Linus 在飞往东京参会前发布了&nbsp;Linux 6.7 的第四个候选版本，预计稳定版将在避免大家节假日加班的前提下，在圣诞节前后正式发布。他不想在"圣诞节前后出现合并窗口，因为这会破坏我的圣诞节"。为了让准备 6.8 版本的维护人员和开发人员放心，合并窗口将推迟一到两周再打开。</span></p><p><span style="color:#000000"><img alt="" height="308" src="https://oscimg.oschina.net/oscnet/up-d6f819fe06c7232fd0491dd32727607667e.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">就经常被提及的<strong>内核维护人员疲态和压力问题</strong>，Linus 首先否认了维护者必须是一个「无所不能的超级开发者」角色的说法，「要成为一名维护者，你必须有一定的品味来评判其他人的代码。其中一些可能是天生的，但大多数都需要后天的练习。你必须能够审视其他人的代码，并能够判断'这是一个好方法还是一个坏方法？' 而这通常只是一个多年经验的问题。」</span></p><p><span style="color:#000000">Linus 指出，Linux 内核现在确实拥有一些优秀的维护者。但问题在于，大家基本需要保持一个随时在线的工作状态，无法自由的安排假期，除非是可以找到能换班的其他维护者。</span></p><p><span style="color:#000000">对&nbsp;Linus 自己来说，因为热爱所以保持在线不是什么问题，然而并不是所有人都能和他一样。「几个月前，我去度假的时候也带着笔记本电脑。如果没有笔记本电脑，我会觉得很无聊。这就是我的工作。但我意识到，这不是每个人都能过的生活，尤其是当你必须为之付出多年心血的时候。」</span></p><p><span style="color:#000000">事实上，人际关系的处理也是 Linus 需要继续学习的方面。「写代码很容易。因为有确定的正确答案和错误答案。但人际关系很难，要试着与其他开发人员和维护人员一起和谐工作，尤其是当维护人员的工作目标各不相同时......这可能会带来很大的压力。」</span></p><p><span style="color:#000000">Linus 表示，自己的火爆脾气已经有所收敛。在吸取了一些教训之后，他已经不会再「对一些公司竖中指」了。</span></p><p><span style="color:#000000">总的来说，他认为开源不仅仅是编程问题，很多时候也与交流有关。「维护者是翻译者。我指的不一定是语言，我的意思是上下文、代码的原因。这是一项艰巨的工作。但是，如果你想成为一名维护者，相信我，顶层还有空间。」</span></p><p><span style="color:#000000">此外，Linus&nbsp;还回答了一个「<strong>Linux 内核社区的老龄化</strong>」的问题。Hohndel 指出，如果把目光投向未来五年，很多顶级 Linux 内核人员将开始步入 60 多岁，第一批人员甚至已经接近 70 多岁。</span></p><p><span style="color:#000000">对此 Linus 坦承道，"我们中的很多人确实都已经白发苍苍了。但部分原因在于，我们的维护者已经工作了 30 多年。他们仍然存在、仍很活跃，最终仍将与我同在。<strong>We have a community where people do stick around</strong>"。</span></p><p><span style="color:#000000">Linus 也赞同了&nbsp;Hohndel 有关内核社区的老化是一把「双刃剑」的说法。并以 Rust 举例称："我喜欢内核 Rust 方面的一点是，有一位维护者明显比大多数维护者年轻得多。我们可以清楚地看到，内核中的某些领域引入了更多的年轻人。例如，在驱动程序方面，你会更容易找到年轻人，而这也是我们培养大量维护者的传统方式，包括 Greg。"</span></p><p><span style="color:#000000">双方还谈到了 <strong>Rust 语言在 Linux 内核中的应用</strong>。Linus 称：「它一直在增长，但我们还没有任何内核部分真正依赖于 Rust。对我来说，Rust 是具有技术意义的事物之一，但对我个人来说，更重要的是作为内核和开发人员，我们不能停滞不前。」</span></p><p><span style="color:#000000">他透露，明年将在内核中开始集成驱动程序，甚至一些主要的子系统也将开始积极使用 Rust。并表示，想让 Rust 成为内核的重要组成部分，还需数年的时间。「<strong>但它肯定会成为内核的一部分</strong>」。</span></p><p><span style="color:#000000">正在风头上的人工智能大语言模型（LLM）自然也得到了 Linus &nbsp;的关注。但&nbsp;Linus 并不担心 AI 威胁，"很明显，自动化一直在帮助人们编写代码。这根本不是什么新鲜事。"</span></p><p><span style="color:#000000">他反而更希望 AI 工具能提供真正的帮助，譬如识别一些愚蠢且低级的错误。「我们实际上需要加强自动更正功能。我认为 <strong>AI 是一种可以帮助我们做得更好的工具。</strong>」</span></p><p><span style="color:#000000">而 AI 所存在的幻觉问题在&nbsp;Linus 的眼中就更不值一提了。他颇带讽刺意味的回答称，"我每天都能看到一些在没有 AI 的情况下所犯的错。所以我才不那么担心。我认为，我们自己犯错误的能力还不错。"</span></p><p><span style="color:#000000">最后，Linus 还表达了自己对开源和开放性的概念被越来越多的人所接受的欣喜。</span></p><blockquote><p><span style="color:#000000">「我特别喜欢这一事实，因为我还记得三十年前我启动这个项目时的情景，人们会问我：'为什么？'人们会说，'但你怎么赚钱？'现在，这个问题再也不会出现了。开放已经成为行业的标准。人们理所当然地认为，当你必须开展大型项目时，无论是编程还是数据，最终都会因为项目太大而需要在公司之间共享。」&nbsp;</span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269762/linus-torvalds-linux-future-ai</guid>
            <link>https://www.oschina.net/news/269762/linus-torvalds-linux-future-ai</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[黄仁勋：华为是英伟达在 AI 芯片领域的强大竞争对手]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>英伟达 CEO 黄仁勋周三表示，在生产最好的人工智能芯片竞赛中，<strong>华为是英伟达「非常强大」的竞争对手之一</strong>。他还透露，<strong>英伟达正在与美国政府密切合作，确保面向中国市场的新芯片符合出口限制</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-ebe690ba54b830bcaf6d6e4a24e29d23565.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.yahoo.com%2Fnews%2Fnvidia-sees-huawei-formidable-ai-034901190.html" target="_blank">https://finance.yahoo.com/news/nvidia-sees-huawei-formidable-ai-034901190.html</a></em></u></p></blockquote><p>黄仁勋在新加坡接受采访时称，华为、英特尔以及越来越多的半导体初创公司对英伟达在人工智能加速器市场的主导地位构成了严峻的挑战。尤其是总部位于深圳的华为已成长为中国事实上的芯片技术巨头，并于今年凭借令人惊讶的先进中国制造智能手机处理器重新回到聚光灯下。</p><p>黄仁勋说道：「我们在中国和中国以外都有很多竞争对手。我们的大多数竞争对手并不真正关心我在哪里。无论我们走到哪里，他们都想和我们竞争。」</p><p>黄仁勋在访问新加坡期间，与新加坡总理李显龙进行了会面，讨论新加坡在全球人工智能竞赛中竞争的战略。英伟达的芯片已经成为人工智能热潮中最热门的商品，因为它们提供了最有效的方法来训练像 ChatGPT 这样的大型数据模型。</p><p>在访问新加坡之前，黄仁勋本周较早时访问了日本，与日本首相和经济大臣进行了会晤，并承诺将与日本公司合作，在日本建立一个半导体工厂网络。</p><p>延伸阅读</p><ul><li><em><u><a href="https://www.oschina.net/news/268075" target="_blank">英伟达推迟发布中国特供版 AI 芯片</a></u></em></li><li><em><u><a href="https://www.oschina.net/news/265728" target="_blank">英伟达或将推出针对中国区的最新改良版 AI 芯片</a></u></em></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 08:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269760</guid>
            <link>https://www.oschina.net/news/269760</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[马斯克计划为 xAI 筹集 10 亿美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在推出首款生成式 AI 聊天机器人 Grok 一个月后，埃隆·马斯克 (Elon Musk) 正在寻求为他的人工智能初创公司 xAI 筹集 10 亿美元资金。</span></p><p><span style="color:#000000">根据<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sec.gov%2FArchives%2Fedgar%2Fdata%2F2002695%2F000200269523000002%2FxslFormDX01%2Fprimary_doc.xml" target="_blank">美国证券交易委员会（SEC）的一份文件</a>显示，马斯克迄今已从四位不愿透露姓名的投资者那里筹集了约 1.35 亿美元，第一笔交易发生在 11 月 29 日。这意味着他还需要大约 8.65 亿美元才能实现 10 亿美元的目标。</span></p><p><img height="307" src="https://oscimg.oschina.net/oscnet/up-92bcab6572974a70bd8bac1be41330bcf20.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">马斯克于今年 7 月份宣布 xAI 公司正式成立，并将与 OpenAI 的 ChatGPT、谷歌的 Bard 或 Anthropic 的 Claude 展开竞争。Grok 是 xAI 团队发布其首个 AI 大模型产品，一款仿照《银河系漫游指南》设计的人工智能。</span></p><p><span style="color:#000000">根据 xAI 的说法，Grok 与现有 AI 和大语言模型的不同之处在于，它可以完全访问来自 X（即 Twitter）的实时知识。并且可以回答几乎任何问题，包括其他 AI 机器人不会回答的一些"辛辣"问题，略带诙谐和「反叛」。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/249159/elonmusk-announced-xai" target="news">马斯克宣布成立 xAI 公司</a></li><li><a href="https://www.oschina.net/news/265129/xai-grok" target="news">马斯克旗下 xAI 发布首个 AI 大模型产品 Grok</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 06:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269746/elon-musk-raise-1-billion-xai</guid>
            <link>https://www.oschina.net/news/269746/elon-musk-raise-1-billion-xai</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Electron v28.0.0 发布，跨平台桌面应用开发工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Electron 是一个使用 JavaScript、HTML 和 CSS 构建跨平台的桌面应用程序。它基于 Node.js 和 Chromium，被 Atom 编辑器和许多其他应用程序使用。Electron 兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Electron<span>&nbsp;v28.0.0<span>&nbsp;</span></span><span style="color:#333333">更新内容如下：</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong>Stack Upgrades</strong></h4><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong>Breaking Changes</strong></h4><ul><li><code>BrowserWindow.setTrafficLightPosition()</code>和<code>BrowserWindow.getTrafficLightPosition()</code>方法已被删除。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39479" target="_blank">#39479</a></li><li><code>app.runningUnderRosettaTranslation()</code>方法已被删除。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39956" target="_blank">#39956</a></li><li><code>ipcRenderer.sendTo()</code>方法已被删除。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39087" target="_blank">#39087</a></li><li><code>scroll-touch-{begin,end,edge}</code>事件已被删除。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39814" target="_blank">#39814</a></li><li>将<code>backgroundThrottling</code>设置为 false 将禁用<code>BrowserWindow</code>对其显示的所有<code>WebContents</code>的 frames throttling。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F38924" target="_blank">#38924</a></li></ul><h4 style="margin-left:0; margin-right:0; text-align:start"><strong>Features</strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>Additions</strong></p><ul><li>启用 ESM 支持。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F37535" target="_blank">#37535</a><ul><li>有关更多详细信息，参阅&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fblob%2Fmain%2Fdocs%2Ftutorial%2Fesm.md" target="_blank">ESM 文档</a>。</li></ul></li><li><code>UtilityProcess</code>API 现在支持 ESM entrypoints。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40047" target="_blank">#40047</a></li><li>向<code>display</code>对象添加了多个属性，包括<code>detected</code>、<code>maximumCursorSize</code>和<code>nativeOrigin</code>。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40554" target="_blank">#40554</a></li><li>添加了对 Linux 上环境变量<code>ELECTRON_OZONE_PLATFORM_HINT</code>的支持。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39792" target="_blank">#39792</a></li></ul><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>除了在 Electron 本身中启用 ESM 支持之外，Electron Forge 还支持使用 ESM 来打包、构建和开发 Electron 应用程序。可以在 Forge v7.0.0 或更高版本中找到此支持：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Fforge%2Freleases%2Ftag%2Fv7.0.0" target="_blank">https://github.com/electron/forge/releases/tag/v7.0.0</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>添加了 API 以帮助应用程序知道何时避免半透明背景。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39631" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40074" target="_blank">39631</a></span></span></li><li>添加了<code>getWebRTCUDPPortRange</code>好<code>setWebRTCUDPPortRange</code>API 来指定 WebRTC 的 UDP 端口范围。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39046" target="_blank">#39046</a></li><li>添加<code>keyboardLock</code>到<code>ses.setPermissionRequestHandler(handler)</code>。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40460" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40459" target="_blank">40460</a></span></span></li><li>为 Windows 添加了<code>mouse-enter</code>和<code>mouse-leave</code>Tray 事件。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40072" target="_blank">#40072</a></li><li>为<code>webContents.printToPDF()</code>添加了<code>generateTaggedPDF</code>选项，以便生成带 tag（可访问）的 PDF。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39563" target="_blank">#39563</a></li><li>添加了一个<code>tabbingIdentifier</code>属性到<code>BrowserWindow</code>。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39980" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40082" target="_blank">39980</a></span></span></li><li>向 &nbsp;tray icon 添加了 middle click mouse event。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39926" target="_blank">#39926</a></li><li>向<code>display</code>对象添加了多个属性，包括<code>detected</code>、<code>maximumCursorSize</code>和<code>nativeOrigin</code>。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40554" target="_blank">#40554</a></li><li>添加了对 Linux 上环境变量<code>ELECTRON_OZONE_PLATFORM_HINT</code>的支持。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39792" target="_blank">#39792</a></li><li>添加了对<code>chrome.scripting</code>扩展 API 的支持。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39395" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39676" target="_blank">39395</a></span></span></li><li>添加了对更多扩展清单键的支持，包括<code>host_permissions</code>、<code>author</code>和<code>short_name</code>。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39599" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39672" target="_blank">39599</a></span></span></li><li>添加了使用<code>webContents.downloadURL()</code>发送 HTTP&nbsp;headers&nbsp;的功能。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39455" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39562" target="_blank">39455</a></span></span></li><li>修改<code>systemPreferences.getColor(name)</code>返回 RGBA 十六进制值 (<code>#RRGGBBAA</code>) 而非 plain&nbsp; RGB (&nbsp;<code>#RRGGBB</code>) 值。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F38960" target="_blank">#38960</a></li><li>在 Linux 上遵循 XDG 深色主题偏好设置。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F38977" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40011" target="_blank">38977&nbsp;</a></span></span></li><li>通过传递&nbsp;<span style="background-color:#ffffff; color:#1f2328">dummy<span>&nbsp;</span></span><code>module.exports</code>提高了与沙盒预加载脚本中 CommonJS 模块的兼容性。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39484" target="_blank">#39484</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>改进</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>改进 Linux 上<code>child_process</code>&nbsp;API 的<code>fork()</code>和<code>execve()</code>性能。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39253" target="_blank">#39253</a></li><li>修复了 macOS 上调整大小的性能问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40586" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40585" target="_blank">40586</a></span></span></li><li>修复了 DWM 上的不透明窗口性能回归。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39895" target="_blank">#39895</a></li><li>在 macOS 上重新启用分区分配。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40230" target="_blank">#40230</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>删除/弃用</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li><code>app.runningUnderRosettaTranslation</code>属性已被弃用。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39897" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F39983" target="_blank">39897</a></span></span></li><li><code>app</code>上的<code>gpu-process-crashed</code>事件已被弃用。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40195" target="_blank">#40195</a></li><li><code>app</code>上的<code>renderer-process-crashed</code>事件以及<code>WebContents</code>和 <code>&lt;webview&gt;</code>上的崩溃事件已被弃用。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40089" target="_blank">#40089</a></li></ul><h4 style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Fixes</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><ul><li>修复了未引用时无法对<code>MessagePorts</code>进行垃圾回收的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40201" target="_blank">#40201</a></li><li>修复了应用程序在 macOS Sonoma 上无法正确激活面板窗口的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40465" target="_blank">#40465</a></li><li>修复了在 Linux 中传递给<code>shell.showItemInFolder</code>的文件路径不被转义的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40562" target="_blank">#40562</a></li><li>修复了在<code>node_modules</code>中加载嵌套的 ESM 依赖关系的问题。在 asar 文件中支持<code>fs.statSync</code><span style="background-color:#ffffff; color:#1f2328">/</span><code>fs.lstatSync</code>中的<code>throwIfNoEntry</code>选项。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40224" target="_blank">#40224</a></li><li>修复了 first party sets. 的&nbsp;same-party cookie 功能。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40526" target="_blank">#40526</a></li><li>在 macOS 上使用<code>activateIgnoringOtherApps</code>来 focusing non-panels。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40621" target="_blank">#40621</a></li></ul><h4 style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>通知</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>终止对 25.xy 的支持</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.electronjs.org%2Fdocs%2Flatest%2Ftutorial%2Felectron-timelines%23version-support-policy" target="_blank">根据项目的支持政策</a>，Electron 25.xy 已结束支持。鼓励开发人员和应用程序升级到较新版本的 Electron。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span style="background-color:#ffffff; color:#333333">详情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Freleases%2Ftag%2Fv28.0.0" target="_blank">查看更新说明</a><span style="background-color:#ffffff; color:#333333">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 05:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269739/electron-28-0-0-released</guid>
            <link>https://www.oschina.net/news/269739/electron-28-0-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[新一代国产超算「天河星逸」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#424242">在今日举行的 2023 年超算创新应用大会上，国家超算广州中心正式发布新一代国产超级计算系统「</span><strong>天河星逸</strong><span style="background-color:#ffffff; color:#424242">」。「天河星逸」以应用为中心，</span><strong>采用国产先进计算架构、高性能多核处理器、高速互连网络、大规模存储等关键技术构建</strong><span style="background-color:#ffffff; color:#424242">，全面满足高性能计算、AI 大模型训练、大数据分析等应用场景需求</span>，将为广州市、广东省和粤港澳大湾区的前沿科技突破、战略工程建设、产业升级转型提供强劲的高端算力与平台支撑。</p><p><span style="background-color:#ffffff; color:#424242">新华社介绍道，</span><strong>「天河星逸」在通用 CPU 计算能力、网络能力、存储能力以及应用服务能力等多方面较「天河二号」实现倍增</strong><span style="background-color:#ffffff; color:#424242">。</span></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-3ee6121a56e8c7ec3596ef6c9322b230587.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1699432410%2FNvRi6gjwm%3Fpagetype%3Dprofilefeed" target="_blank">https://weibo.com/1699432410/NvRi6gjwm</a></em></u></p></blockquote><p>国家超算广州中心业务主机「天河二号」研制工程总设计师廖湘科<u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.news.cn%2Ftech%2F2023-12%2F06%2Fc_1130011222.htm" target="_blank">表示</a></u>，「天河二号」于 2013 年研制成功，并曾连续多次夺得 TOP500 世界超算冠军，是我国超算系统研制进入世界领先行列的重要标志，但国产超算应用一直是我国超算发展面临的挑战。「在多方支持下，国家超算广州中心组建一流人才团队，开发了一系列面向领域的超算应用平台，支持各行各业取得了显著的应用实效，有力拓展了国产超算应用生态。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-de7c6d56410ddf4e67b2b1214b80708ae2c.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 05:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269737</guid>
            <link>https://www.oschina.net/news/269737</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[飞越 Flyway！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在数据库 Schema 变更这个领域，业界最老牌的两个产品是 Liquibase 和 Flyway，两者都有超过 15 年的历史。</p><p><img src="https://oscimg.oschina.net/oscnet/up-9cf3b214c852ddc2ad8014db3da8d100f1e.png" alt="file" referrerpolicy="no-referrer"></p><p>Liquibase 和 Flyway 都是由商业公司在背后支撑的开源项目。Liquibase 相对更偏商业化一些，而 Flyway 的社区感更强。在中国，Flyway 的流行度也更高一些。</p><p><img src="https://oscimg.oschina.net/oscnet/up-11db6025bb22433676087306466e4f73aaa.png" alt="file" referrerpolicy="no-referrer"></p><p>Bytebase 和 Liquibase / Flyway 类似，也主打数据库的 Schema 变更，同样是商业公司支撑的开源项目。继去年 Bytebase GitHub Star 数超过 Liquibase 后，刚刚我们又超过了 Flyway！</p><p><img src="https://oscimg.oschina.net/oscnet/up-87bb0ecdd4ef343ef4ae5b5ae077d203d79.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-9fa714cdabfcc21a9b7cd3102e0940c078a.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-6a4317365ae759ad877441f33d6a2a22d5c.png" alt="file" referrerpolicy="no-referrer"></p><p>Star 数超越是一方面，另一方面 Bytebase 和 Liquibase / Flyway 对数据库 Schema 变更这道工序，也有不一样的理念。Liquibase / Flyway 是基于本地，面向个体使用，由个体通过 CLI 或者应用接入 SDK，在应用启动前进行对数据库的变更。而 Bytebase 则是基于服务端，面向团队使用，由开发者和 DBA 在 web 上协同完成数据库的变更。不仅有丰富的 SQL 审核能力，并且变更的时机也是和应用完全分离的。具体的对比，可以参阅：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247504124%26idx%3D1%26sn%3D14a5edb7e41e1e22a8430e0c021360a4%26scene%3D21%23wechat_redirect" target="_blank">Bytebase vs Flyway</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247504377%26idx%3D1%26sn%3D653e0684794463ba83dacd8cd4501ed6%26scene%3D21%23wechat_redirect" target="_blank">Bytebase vs Liquibase</a></li></ul><p>Flyway 和 Liquibase 在行业里依然有不错的影响力，从前不久 JetBrains 出品的 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506451%26idx%3D1%26sn%3D04b3b6f6313f1243eb43fb90a70c1205%26chksm%3Dc25ce427f52b6d31fee26c69a9e5e86d064aeead057165bae50ef1747bd2dfcd2be85e5bcda3%26scene%3D21%23wechat_redirect" target="_blank">2023 开发者报告</a>里也可以看到。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a061f6d6ed8b6d4981b33b017e51585317b.png" alt="file" referrerpolicy="no-referrer"></p><p>Bytebase 依然归属于 Other 里面。但我们也可以看到有 50% 还没有任何的数据库 Schema 变更工具。 未来还有很大的成长空间。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c7f75110dabc5a34504e470a9f1d60c4777.png" alt="file" referrerpolicy="no-referrer"></p><p>一个小小的里程碑，还是挺提气的。雄关漫道真如铁，轻舟驶入万重山。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 05:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10319514</guid>
            <link>https://my.oschina.net/u/6148470/blog/10319514</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[全球超 250 万 Java 开发者使用 Visual Studio Code]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>NickZhu 是负责&nbsp;VS Code Java 扩展的产品总监，昨天他在官方博客宣布，Visual Studio Code 的活跃 Java 开发者已超过 250 万。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-816f152da384a708676c73dc549152d808b.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fjava%2F2-5-million-java-developers-on-visual-studio-code%2F" target="_blank">https://devblogs.microsoft.com/java/2-5-million-java-developers-on-visual-studio-code/</a></em></u></p></blockquote><p>NickZhu 还介绍了微软和红帽未来六个月合作打造 Visual Studio Code for Java 的开发路线图。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-af5ae6c737e2c5be0927723b328ef83ff84.png" referrerpolicy="no-referrer"></p><p>主要工作包括：支持 Java 21、增强代码导航功能、引入高级调试功能、优化性能、提升用户体验、改进项目管理功能、集成 AI 以提供更智能的代码补全等。</p><p>话说回来，是不是绝大部分 Java 开发者都安装了下面两个扩展，和 IntelliJ IDEA 相比，有哪些差距？</p><p><img src="https://oscimg.oschina.net/oscnet/up-8d020a6ad3e8866e98ac2e841a6989eae85.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-0189e3c62c311dd84edfd3c6733f4e27127.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 03:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269725/2-5-million-java-developers-on-visual-studio-code</guid>
            <link>https://www.oschina.net/news/269725/2-5-million-java-developers-on-visual-studio-code</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
