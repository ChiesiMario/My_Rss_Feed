<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 13 Oct 2023 05:04:50 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Ubuntu 23.10 正式发布，不妨趁周五升级一波！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Ubuntu 23.10 已正式发布，代号 "Mantic Minotaur"。该版本不是 LTS 版本，仅提供九个月的支持，一直到 2024 年 7 月。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b016fea82900b50cf091fb97ed70edd800d.png" referrerpolicy="no-referrer"></p><p>Ubuntu 23.10 的默认安装被配置为&nbsp;"<strong>Minimal"</strong>，也就是说现在默认安装 Ubuntu 桌面是最小化安装——不会包含额外的应用程序。当然用户可以选择<strong> 'Expanded installation' </strong>选项来满足更丰富的应用需求，以便在首次启动时安装 LibreOffice 和 Thunderbird 等日常应用。</p><p>此外，新版本引入了对 ZFS 引导安装的支持，提升了存储管理需求的灵活性和选择性。这是基于 Subiquity 的安装程序中的一项新功能，默认情况下不加密。加密的 ZFS 引导选项将在未来的版本中开发。</p><p>从 Ubuntu 23.10 开始，在 Ubuntu Core 多年经验的基础上，TPM 支持的全磁盘加密 (FDE) 将作为一项实验功能引入。在支持的平台上，用户不再需要在启动时手动输入密码。</p><p>其他值得关注的变化：</p><ul><li>桌面环境使用 GNOME 45</li><li>内核版本升级到 Linux Kernel 6.5</li><li>更新升级的安装程序</li><li>受限的非特权用户命名空间</li><li>默认启用多代 LRU 页面回收</li><li>支持 idmapped Ceph 挂载</li><li>使用 Wayland 时默认启用原生 Wayland 模式会话，以获得更快的浏览体验</li><li>预装采用 Flutter 编写的全新应用商店 "App Center"</li><li>使用 Netplan 作为 NetworkManager 的默认设置存储后端</li><li><p>支持最新发布的&nbsp;树莓派 5&nbsp;和&nbsp;HiFive Pro P550</p></li></ul><hr><p>此前曾报道过的部分变化：</p><ul><li><a href="https://www.oschina.net/news/258253/ubuntu-23-10-zfs-install">Ubuntu 23.10 安装工具恢复支持 ZFS 文件系统</a></li><li><a href="https://www.oschina.net/news/257464/ubuntu-23-10-tpm-fde">Ubuntu 23.10 支持基于 TPM 的全磁盘加密</a></li><li><a href="https://www.oschina.net/news/247869/ubuntu-23-10-new-app-store-deb-support">Ubuntu 23.10 引入新的 「应用商店」，优先支持 Snap 格式</a></li><li><a href="https://www.oschina.net/news/256910/gnome-45-arrives-in-ubuntu-23-10">Ubuntu 23.10 每日构建版已搭载 GNOME 45</a></li><li><a href="https://www.oschina.net/news/250357/ubuntu-noto-fonts-change">Ubuntu 23.10 调整字体包，将 DejaVu 替换为 Noto</a></li><li><a href="https://www.oschina.net/news/255590/ubuntu-23-10-no-gimp-3-0">Ubuntu 23.10 不会预装 GIMP 3.0 测试版</a></li></ul><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fubuntu.com%2Fdownload" target="_blank">下载地址</a>&nbsp;|&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fmantic-minotaur-release-notes%2F35534" target="_blank">Release Notes</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 02:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261571/ubuntu-23-10-ga</guid>
            <link>https://www.oschina.net/news/261571/ubuntu-23-10-ga</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[夜莺项目发布 v6.3.0 版本，增加 Loki 和 TDEngine 数据源支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; text-align:left">大家好，夜莺项目发布 v6.3.0 版本，新增 Loki 和 TDEngine 数据源支持，并持续优化部署体验，本文为大家简要介绍一下相关更新内容。</p><h2>Loki、TDEngine 数据源支持</h2><p style="color:#333333; text-align:left"><img alt="20231013080250" src="https://download.flashcat.cloud/ulric/20231013080250.png" referrerpolicy="no-referrer"></p><p style="color:#333333; text-align:left">实际上，从 v6.2.0 开始，就支持了这俩数据源，不过还有些小瑕疵，故而在 v6.3.0 修复并正式对外宣传。Loki 数据源的支持是来自社区小伙伴 @tripitakav，欢迎大家积极参与夜莺开源项目，一起完善夜莺的生态。TDEngine 数据源的支持由 @710leo 和 @jsers 主导，感谢他们的付出，夜莺和 TDEngine 配合，算是一个纯国产化的解决方案了。</p><p style="color:#333333; text-align:left">Loki 和 TDEngine 相关功能初步发布，可能还会有一些小问题，欢迎大家积极反馈，我们会持续优化。软件 Bug 和建议请通过 github issue 反馈，使用上的问题可以通过<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fanswer.flashcat.cloud%2F" target="_blank">论坛</a>反馈。</p><p style="color:#333333; text-align:left">github 地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale" target="_blank">https://github.com/ccfos/nightingale</a>，大家可以 star 收藏，后续有更新会收到 github 的通知。</p><h2>去除 ops.yaml</h2><p style="color:#333333; text-align:left">新下载的包，大家会发现 etc 配置目录缺少了 ops.yaml，这是因为把这个文件的内容内置到代码里了，降低维护成本。如果硬盘上还是有 ops.yaml，夜莺会自动 merge 配置文件和代码中的内容。</p><h2>修改 edge heartbeat 接口地址</h2><p style="color:#333333; text-align:left">之前的版本 categraf 向 edge 发心跳和向中心端发心跳 heartbeat 接口路径不一样，给很多小伙伴造成困扰。这次升级我们想了个办法把这俩接口路径统一了，都是<span>&nbsp;</span><code>/v1/n9e/heartbeat</code>，这样就不会再有困扰了。</p><h2>其他更新</h2><ul><li>feat: SMTP 设置添加测试功能</li><li>feat: Elasticsearch 即时查询日志表格字段列支持后端排序</li><li>feat: 仪表盘蜂窝图添加文字背景色设置</li><li>feat: 仪表盘表格图新增导出到 CSV</li><li>feat: 仪表盘表格图每行展示指定聚合维度值的维度支持配置多个维度</li><li>feat: 仪表盘表格图 override 新增根据字段名匹配方式</li><li>feat: 仪表盘单位添加 Data rate 单位</li><li>refactor: 导入 Grafana dashboard 支持更多的版本</li><li>refactor: 仪表盘折线图 legend 表格宽度自适应</li><li>refactor: 仪表盘指标图展示标签值时如果是数值类型配置单位和颜色设置</li><li>fix: 告警事件中 target_ident 偶发出错问题 by qifenggang</li><li>fix: edge 模块，同步 user_group 信息有误问题 by tianyanli</li><li>fix: 修复蜂窝图 legend 冲突问题</li><li>fix: 修复仪表盘如果选择了绝对时间分享出去的图的筛选时间显示成了 UTC 时间问题</li><li>fix: 修复 Elasticsearch 源仪表盘图不同索引的其他查询条件相同导致序列名冲突问题</li><li>fix: 修复 Guest 用户无法查看仪表盘链接问题</li><li>fix: 快捷视图修改动态过滤标签后重新加载标签值</li><li>fix: edge 模块生成的告警事件 id 为空</li></ul><h3>最后</h3><p style="color:#333333; text-align:left">如果您觉得夜莺项目不错，欢迎到 github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fccfos%2Fnightingale" target="_blank">https://github.com/ccfos/nightingale</a><span>&nbsp;</span>给我们一颗小 🌟🌟<span>&nbsp;</span><code>:-)</code></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 13 Oct 2023 00:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261542/nightingale-release-v6-3-0</guid>
            <link>https://www.oschina.net/news/261542/nightingale-release-v6-3-0</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软推出 Windows Terminal Canary 版本]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fintroducing-windows-terminal-canary%2F" target="_blank">宣布</a>把 Windows Terminal Canary 添加到 Windows Terminal 系列中。</span></p><p><span style="color:#000000">Windows Terminal Canary 是 Windows Terminal 的全新 Canary 频道，每天都会进行更新，且包含"hot off the presses"功能；旨在让用户有机会在新功能进入 Windows Terminal Preview 之前试用这些实验性功能。</span></p><p><img alt="" height="202" src="https://oscimg.oschina.net/oscnet/up-d998b10577973fbed232334af00fbad489c.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">Windows Terminal Canary 可以与 Windows Terminal stable 和 Windows Terminal Preview 并行安装。但 </span><span style="background-color:#ffffff">Canary 版</span><span style="background-color:#ffffff">也是最不稳定的版本，所以有存在很多 bug 的可能性。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="418" src="https://oscimg.oschina.net/oscnet/up-818f3b65f2a7d533a9278b659e14d51f3a7.png" width="700" referrerpolicy="no-referrer"></span></span></p><p style="text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">Windows Terminal Canary 提供 App Installer&nbsp;发行版和便携式 ZIP 发行版，均可从 </span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fterminal%23installing-windows-terminal-canary" target="_blank">Windows Terminal repository</a>&nbsp;<span style="color:#000000">进行<span style="background-color:#ffffff">下载。</span></span></p><p style="text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">App Installer 发行版支持自动更新。但由于平台限制，其仅适用于 Windows 11，但后续会向 Windows 10 用户开放。</span></span><span style="background-color:#ffffff"><span style="color:#000000">Portable ZIP 发行版是一个便携式应用程序，它不会自动更新，也不会自动检查更新；适用于 Windows 10 (19041+) 和 Windows 11</span>。</span></p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fintroducing-windows-terminal-canary%2F" target="_blank">查看官方博客</a>。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fterminal%23installing-windows-terminal-canary" target="_blank"><strong>下载</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 06:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261430/windows-terminal-canary</guid>
            <link>https://www.oschina.net/news/261430/windows-terminal-canary</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源隐私计算平台 PrimiHub 1.6.11 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="343" src="https://oscimg.oschina.net/oscnet/up-6e98dde3777405ffe098aff18b3414cbd53.png" width="950" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#1f2328">PrimiHub 是一款由密码学专家团队打造的开源隐私计算平台，支持安全多方计算、联邦学习、隐私求交、隐私查询等。具有如下特性：</span></p><ul><li><strong>开源</strong>：完全开源、免费</li><li><strong>安装简单</strong>：支持 Docker 一键部署</li><li><strong>开箱即用</strong>：拥有<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprimihub%2Fprimihub-platform" target="_blank">Web 界面</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.primihub.com%2Fdocs%2Fcategory%2F%25E5%2588%259B%25E5%25BB%25BA%25E4%25BB%25BB%25E5%258A%25A1" target="_blank">命令行</a><span>&nbsp;</span>和<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.primihub.com%2Fdocs%2Fcategory%2Fpython-sdk-client" target="_blank">Python SDK</a><span>&nbsp;</span>多种使用方式</li><li><strong>功能丰富</strong>：支持隐匿查询、隐私求交、联合统计、数据资源管理等功能</li><li><strong>灵活配置</strong>：支持自定义扩展语法、语义、安全协议等</li><li><strong>自主研发</strong>：基于安全多方计算、联邦学习、同态加密、可信计算等隐私计算技术</li></ul><h4>1.6.11 更新了什么？</h4><h3>新增特性</h3><ol><li>隐私求交增加 TEE 支持</li><li>缺失值填充功能可根据字段类型自动匹配适用的填充方法，支持 4 种缺失值处理方法</li><li>模型评估增加多种评估指标（分类、回归），支持 ROC 图展示 
  <ul><li>分类：Acc、Precision、Recall、F1、AUC、KS、ROC</li><li>回归：EV、MaxE、MAE、MSE、RMSE、MedAE、R2</li></ul></li><li>联邦数据预处理支持 TargetEncoder 特征编码</li><li>支持 Python 代码调用 MPC 联合统计功能，可在联邦学习中使用</li></ol><h3>优化</h3><ol><li>提升交互一致性：隐私求交、隐匿查询的交互统一</li><li>隐私求交、隐匿查询结果支持在线预览</li></ol><h4>项目地址</h4><ul><li><p style="margin-left:0; margin-right:0">GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fprimihub%2Fprimihub" target="_blank">https://github.com/primihub/primihub</a></p></li><li><p style="margin-left:0; margin-right:0">Gitee：<a href="https://gitee.com/primihub/primihub">https://gitee.com/primihub/primihub</a></p></li><li><p style="margin-left:0; margin-right:0">官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprimihub.com" target="_blank">https://primihub.com</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 05:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261425/primihub-1-6-11</guid>
            <link>https://www.oschina.net/news/261425/primihub-1-6-11</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[项目管理软件 Atlassian 斥资 9.75 亿美元收购 Loom]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>总部位于澳大利亚的项目管理软件提供商 Atlassian 宣布计划以近 10 亿美元的价格（9.75 亿美元）收购位于美国视频消息平台 Loom。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1013/120339_F5Rb_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>两家公司表示，此次收购将帮助 Atlassian 提高其项目管理工具中的协作能力，并让用户轻松地将视频工作整合到他们现有的工作流程中。</p><p>在收购之前，Atlassian 是 Loom 企业级视频平台的一个客户。Loom 的其他知名客户包括亚马逊、苹果、高盛和瞻博网络等。</p><p>总部位于美国旧金山的 Loom 提供了一个异步视频消息传递工具，可帮助用户通过即时共享的视频进行通信。该公司成立于 2016 年，表示其 20 万客户每月创建近 500 万个 Loom 视频。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-04936b7f95652bdd5174348d632c84c4650.png" referrerpolicy="no-referrer"></p><p>Atlassian 表示，收购完成后 Loom 仍将作为独立产品提供，并计划将 Loom 整合到其全套项目管理工具中。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 04:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261584</guid>
            <link>https://www.oschina.net/news/261584</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AMD 宣布收购开源公司 Nod.ai]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">AMD 正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.amd.com%2Fen%2Fnewsroom%2Fpress-releases%2F2023-10-10-amd-to-acquire-open-source-ai-software-expert-nod-.html" target="_blank">宣布</a>签署收购&nbsp;Nod.ai&nbsp;的最终协议，以扩展 AMD 公司的开放式人工智能软件能力。Nod.ai&nbsp;成立于 2013 年，是一家专门针对高性能硬件优化人工智能软件的初创公司，其整个团队都将会在收购后加入 AMD。此次收购的具体财务条款并未披露。</span></p><p><span style="color:#000000">「Nod.ai 的加入将为 AMD 带来一支经验丰富的团队，该团队已开发出业界领先的软件技术，可加速部署针对 AMD Instinct 数据中心加速器、Ryzen AI 处理器、EPYC 处理器、Versal SoC 和 Radeon&nbsp; GPU 进行优化的人工智能解决方案。该协议与以开放软件生态系统为核心的 AMD AI 发展战略高度一致，通过开发者工具、库和模型降低了客户的准入门槛。」</span></p><p><img height="292" src="https://oscimg.oschina.net/oscnet/up-319fab720109f98ce2dfe943a39a4ab0a70.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">外媒指出，对 Nod.ai 的收购表明，AMD 想在快速增长的人工智能芯片市场中占据一席之地。据行业分析师称，到 2032 年，该市场规模将达到 3837 亿美元。</span></p><p style="text-align:start"><span><span><span><span><span><span style="color:#1a202c"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>AMD 人工智能事业部高级副总裁 Vamsi Boppana 表示，此次收购预计将显着增强 AMD 为 AI 客户提供开放软件的能力，使他们能够轻松部署针对 AMD 硬件调整的高性能 AI 模型。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span><span><span style="color:#1a202c"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>「收购 Nod.ai 预计将显着增强我们为人工智能客户提供开放软件的能力，使他们能够轻松部署针对 AMD 硬件调整的高性能人工智能模型。」</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span><span><span style="color:#1a202c"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>除了技术之外，AMD 还表示希望利用 Nod.ai 的工程人才来提高其在开源社区和开源开发者群体内的信誉。Nod.ai 是许多研究人员使用的 SHARK 和 Torch-MLIR 等人工智能软件库的主要贡献方。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span><span><span style="color:#1a202c"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>近年来，AMD 一直在大力投资人工智能技术，如 CDNA、XDNA、RDNA 和 Zen 架构，以便在快速增长的人工智能市场上与 Nvidia 和英特尔等竞争对手展开竞争。相关行业报告指出，到 2032 年，全球人工智能市场规模预计将达到约 5940 亿美元。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261416/amd-to-acquire-open-source-nod-ai</guid>
            <link>https://www.oschina.net/news/261416/amd-to-acquire-open-source-nod-ai</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2026 年将有 80% 的企业将采用 GenAI，增长 16 倍]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Gartner 最新发布的一份</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fnewsroom%2Fpress-releases%2F2023-10-11-gartner-says-more-than-80-percent-of-enterprises-will-have-used-generative-ai-apis-or-deployed-generative-ai-enabled-applications-by-2026" target="_blank">报告</a><span style="color:#000000">指出，<span style="background-color:#ffffff">预测到 2026 年，超过 80% 的企业将使用生成式人工智能 (GenAI) 应用程序编程接口 (API) 或模型，和/或在生产环境中部署支持 GenAI 的应用程序。而在 2023 年，这一比例还不到 5%；这</span>意味着在短短三年内，采用或创建生成式 AI 模型的企业数量将增长 16 倍。</span></p><p><span style="color:#000000">Gartner 杰出副总裁分析师 Arun Chandrasekaran 称，「生成式 AI 已成为企业管理层的首要任务，并引发了基础模型之外的新工具的巨大创新。<span style="background-color:#ffffff">医疗保健、生命科学、法律、金融服务和公共部门等许多行业对生成式人工智能的需求正在不断增加。</span>」</span></p><p><span style="color:#000000">该公司预计将在未来十年对组织产生巨大影响的<span style="background-color:#ffffff">三项创新</span>包括：</span><span style="background-color:#ffffff; color:#000000">支持 GenAI 的应用程序，基础模型以及 AI 信任、风险和安全管理 (AI TRiSM)</span><span style="color:#000000">。</span></p><p><span style="color:#000000"><img alt="" height="312" src="https://oscimg.oschina.net/oscnet/up-121558672e450fdd70a9ec035bdf56bf188.png" width="500" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">支持 GenAI 的应用程序使用&nbsp;GenAI 来实现用户体验 (UX) 和任务增强，以加速和协助完成用户期望的结果。组织可以采用这些应用程序来促进员工的内部工作或为客户提供体验，从而改善他们的服务和客户体验。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Chandrasekaran 在报告中表示：「当今 GenAI 嵌入式功能最常见的模式是文本到 X，它通过使用自然语言进行快速工程，使工作人员能够民主地完成过去的专门任务。<span style="background-color:#ffffff">然而，这些应用程序仍然存在诸如幻觉和不准确等障碍，可能会限制广泛的影响和采用。</span>」&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">基础模型是指生成式 AI 应用程序的机器学习模型，例如&nbsp;GPT&nbsp;与 ChatGPT 的关系。&nbsp;这些基础模型经过大量数据的训练，用于支持可以完成各种任务的不同应用程序。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">基础模型正处于技术成熟度曲线上预期膨胀的顶峰。Gartner 预测，到 2027 年，基础模型将支撑 60% 的自然语言处理 (NLP) 用例，相较 2021 年的不到 5% 实现了大幅增长。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">AI TRiSM 是指能够解决生成式 AI 模型相关问题并确保其成功部署的一组解决方案。&nbsp;<span style="background-color:#ffffff">AI TRiSM 确保 AI 模型治理、可信性、公平性、可靠性、稳健性、有效性和数据保护。AI TRiSM 包括模型可解释性和可解释性、数据和内容异常检测、AI 数据保护、模型操作和对抗攻击抵抗的解决方案和技术。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">AI TRiSM 是提供负责任的人工智能的重要框架，Gartner 预计其将在两到五年内获得主流采用。到 2026 年，将 AI 透明度、信任和安全性付诸实施的组织，其 AI 模型在采用率、业务目标和用户接受度方面将提高 50%。</span></p><p><span style="color:#000000">更多详情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fnewsroom%2Fpress-releases%2F2023-10-11-gartner-says-more-than-80-percent-of-enterprises-will-have-used-generative-ai-apis-or-deployed-generative-ai-enabled-applications-by-2026" target="_blank">查看官方公告</a><span style="color:#000000">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261579/80-of-enterprises-generative-ai-2026</guid>
            <link>https://www.oschina.net/news/261579/80-of-enterprises-generative-ai-2026</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 23.10 发版插曲：因包含仇恨言论，ISO 镜像被紧急「召回」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Ubuntu 23.10 正式版今天发布不久后，其桌面安装程序 UI 的一组特定翻译中<strong>被发现来自恶意贡献者的仇恨言论</strong>。</p><blockquote><p><img alt="" src="https://static.oschina.net/uploads/space/2023/1013/110402_tO2M_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p><em>via&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fubuntu%2Fstatus%2F1712593893319930079" target="_blank">https://twitter.com/ubuntu/status/1712593893319930079</a></em></p><p>Canonical 官方知释后立马<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fannouncement-ubuntu-desktop-23-10-release-image-is-being-updated-to-resolve-a-malicious-translation-incident%2F39365" target="_blank">「召回」</a>已发布的 ISO 镜像，并表示待修正完成后再上架新的镜像。被删除的受影响镜像包括 <strong>Ubuntu Desktop 23.10、Ubuntu Budgie 23.10 和 Ubuntu Desktop 每日构建</strong>。</p><p><img src="https://static.oschina.net/uploads/space/2023/1013/113359_1piA_2720166.png" referrerpolicy="no-referrer"></p><p>官方表示，此事件仅影响桌面安装程序中的一组翻译，系统和数据不会受到影响。如果是从旧版本升级到 Ubuntu 23.10，没有采用全新安装，同样不会受到影响。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261578/ubuntu-23-10-recalled</guid>
            <link>https://www.oschina.net/news/261578/ubuntu-23-10-recalled</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Raspberry Pi OS 发布更新：放弃 X.org，采用 Wayland]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Raspberry Pi OS（前身为 Raspbian）是基于 Debian GNU/Linux 的自由操作系统，针对 Raspberry Pi 硬件进行了优化。</p><p>该项目的最新版本 Raspberry Pi OS 2023-10-10 基于 Debian 12 "Bookworm" 构建，<strong>将图形接口从 X11/X.Org 会话迁移到 Wayland</strong>。Raspberry Pi OS 现在<strong>使用 Wayfire 作为轻量级 Raspberry Pi OS 桌面的 Wayland 合成器</strong>。</p><p>树莓派官方称基于 Wayland 的新桌面环境可以为 Raspberry Pi 4 和 5 的设备提供更好的性能、更好的系统安全性以及良好的体验。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8faa68f5d51d90bf899bf805823647a188e.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c093a2d80e641bb6ec015ea0bd695afde59.png" referrerpolicy="no-referrer"></p><p>新版本的另一个重大变化是默认<strong>使用 PipeWire 进行音频处理</strong>。其他变化包括 Mozilla Firefox 浏览器的 Raspberry Pi 优化版本、网络增强功能以​​及各种其他更改。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fnews%2Fbookworm-the-new-version-of-raspberry-pi-os%2F" target="_blank">详情查看发布公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261409/raspberry-pi-os-2023-10-10</guid>
            <link>https://www.oschina.net/news/261409/raspberry-pi-os-2023-10-10</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[更稳定高效、更广泛兼容，openKylin Wayland SIG 成功研发 wlcom 合成器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0"><strong>近日，openKylin 社区 Wayland SIG 成功研发了基于 wayland 协议的合成器 Kylin wayland-compositor（简称 wlcom），实现了操作系统图形栈底层核心子系统的进一步突破。</strong></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-6de842b2f992f25b078f771458805b5ab4f.png" referrerpolicy="no-referrer"></p><p><span>图形显示系统是人机交互的核心模块，目前广泛使用的 X-Window(也常称为 X 或 X11) 显示系统，最初由麻省理工学院 1984 年研发，历经近 40 年的修补与扩展，代码量庞大，维护困难，设计也已略显「陈旧」。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>X 显示系统中窗管与合成器是两个独立组件，通信开销大，且存在窗口内容与合成器不同步的问题，容易造成图像撕裂；X 客户端可篡改其他 X 客户端窗口属性及显示内容，安全性不强；合成管理器必须主动向 X 显示服务获取所有客户端图像数据进行图像合成，导致图像显示延迟风险增加。</span></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b1bc0c4843a031812f77b3b19a1435688d9.jpg" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>针对 X 中的上述缺陷，开源社区于 2008 提出了替代方案—wayland 显示服务器协议。该协议下，wayland 合成器与 wayland 显示服务合为一个整体组件，通信开销低；客户端之间的输入和输出隔离，提高了客户端的安全性；客户端页面刷新时，合成器只处理数据有更新的区域，提高了显示合成效率。</span></p><p style="margin-left:0; margin-right:0"><span>鉴于 wayland 相对 X 的巨大优势，目前国际通用 linux 发行版本已经把 wayland 合成器作为默认的显示服务器。但目前社区开源 wayland 合成器在兼容性及稳定性方面存在不足。一方面大多数基于 X 协议编写的游戏、图形密集型等专业应用程序在 wayland 环境上兼容性较差，同时 wayland 各桌面环境定义了大量的私有协议，协议扩展难；另外，虽然 wayland 项目已经进行了十余年，在使用上仍然不够稳定，存在各种问题。</span></p><p style="margin-left:0; margin-right:0"><span>为解决上述问题，openKylin 社区 Wayland SIG 基于 wlroots 研发了 wayland 合成器—wlcom，其整体框架如下图所示：</span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="" height="1436" src="https://oscimg.oschina.net/oscnet/up-da45eed01db37e0cbf10899b2f3466d440a.jpg" width="2012" referrerpolicy="no-referrer"></p><p><span><span>目前，wlcom 已基本完成与 UKUI 核心组件融合，适配兼容主流媒体类、社交类、办公类等 X 应用。关于 wlcom 更多细节，敬请关注 openKylin 公众号。</span></span></p><p><strong>关于 Wayland SIG</strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>openKylin Wayland SIG 小组由麒麟软件有限公司发起成立，致力于新一代图形显示服务器相关技术研究，包括 wayland 合成器、X 兼容等，提供 wayland 相关软件包的技术规划、设计、开发、维护和升级服务，共同推动新一代图形服务器技术发展及落地。</span></p><ul><li><p style="margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">邮件列表：</span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="color:#0052ff">wayland@lists.openkylin.top</span></p></li><li><p style="margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">SIG 主页：</span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/Wayland</span></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 12 Oct 2023 01:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261552</guid>
            <link>https://www.oschina.net/news/261552</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[KCL 社区开源双周报 | 更多 Kubernetes 模型和 IDE 插件功能支持!]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/751c1f01c30049ae95a0ed823adca32b~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1127&amp;h=435&amp;s=19510&amp;e=png&amp;a=1&amp;b=cee5bf" referrerpolicy="no-referrer"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang" target="_blank">KCL</a> 是一个开源的基于约束的记录及函数语言并通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于构建围绕配置的更好的模块化、扩展性和稳定性，更简单的逻辑编写，以及更简单的自动化和生态工具集成。</p><p>本栏目将会双周更新 KCL 语言社区最新动态，包括功能、官网更新和最新的社区动态等，帮助大家更好地了解 KCL 社区！</p><p><em><strong>KCL 官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io</a></strong></em></p><h2>内容概述</h2><p>感谢所有贡献者过去两周 (2023 09.07 - 10.11) 的杰出工作，以下是重点合并内容概述</p><p><strong>🔧 语言及工具链更新</strong></p><ul><li>KCL v0.6.0 于 9.15 发布，更新内容包括语言、工具链、社区集成，详细内容请查看 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Ff6RCZqxS2iliRGIz0036yA" target="_blank">https://mp.weixin.qq.com/s/f6RCZqxS2iliRGIz0036yA</a></li><li>KCL IDE 更新 - 支持对标准库和内置函数的悬停提示，支持对 KCL 代码错误的快速修复；发布适配 Intellij IDEA 2023.2 的插件版本</li><li>KCL 包管理工具 KPM 更新 - kpm run 支持编译 KCL 文件，并集成了导入工具</li><li>KCL 文档工具更新 - 支持将 docstring Examples 章节输出到文档</li><li>KCL 语言更新 - 优化了一些错误信息的输出，部分的错误信息中增加了修复建议</li></ul><p><strong>📰 官网和用例更新</strong></p><ul><li>KCL 官网新增 v0.6.0 文档版本</li><li>KCL 模型新增容器、服务和 Pod Security Policy (PSP) 相关的配置编辑、校验 20 个 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkrm-kcl%2Ftree%2Fmain%2Fexamples" target="_blank">https://github.com/kcl-lang/krm-kcl/tree/main/examples</a></li></ul><h2>特别鸣谢</h2><p>以下排名不分先后</p><ul><li>感谢 @jakezhu9 对 KCL Import 工具 Terraform Schema 到 KCL Schema 转换的贡献 🙌 <em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-go%2Fpull%2F152" target="_blank">https://github.com/kcl-lang/kcl-go/pull/152</a></em></li><li>感谢 @jakezhu9 对 kpm 集成 Import 工具的贡献 🙌 <em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkpm%2Fpull%2F194" target="_blank">https://github.com/kcl-lang/kpm/pull/194</a></em></li><li>感谢 @zwpaper 对 KCL 文档和 Tree Sitter Grammar 做出的贡献 🙌 <em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Ftree-sitter-kcl%2Fpull%2F1" target="_blank">https://github.com/kcl-lang/tree-sitter-kcl/pull/1</a></em> 等</li><li>感谢 @mrgleeco, @ghpu, @steeling, @prahaladramji, @zwpaper 等在使用 KCL 及工具链过程中提出的宝贵反馈和讨论 🙌</li></ul><h2>精选更新</h2><h3>KCL IDE 插件更新</h3><p>在最近的 0.6.0 发布中，KCL IDE 插件增加了标准库和 builtin 函数的悬停提示，新增支持对 KCL 代码错误的快速修复。此外，还增加了 language Server 侧的 e2e 测试及 konfig 仓库的集成测试，以保障 IDE 插件的稳定迭代。在尚未发布的版本中，还新增了 <code>kcl-language-server version</code> 子命令以输出版本信息。欢迎升级、使用 —— KCL 在各个 IDE 平台的插件安装方式请查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Fuser_docs%2Fgetting-started%2Finstall%2F%232-install-kcl-ide-extension" target="_blank">https://kcl-lang.io/docs/user_docs/getting-started/install/#2-install-kcl-ide-extension</a></p><p>&nbsp;</p><h4>IntelliJ 插件</h4><ul><li>IntelliJ 插件现已适配 2023.2+ 版本，您可以在下面的链接中下载安装：</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fintellij-kcl%2Freleases" target="_blank">https://github.com/kcl-lang/intellij-kcl/releases</a></p><h3>KCL 包管理工具</h3><p>kpm run 支持编译 KCL 文件，并集成了导入工具，同时增加了 —quiet 来屏蔽输出日志。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/531a6725e8f740229e9337fccf6933d3~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1136&amp;h=816&amp;s=91588&amp;e=png&amp;b=faf9f9" referrerpolicy="no-referrer"></p><h3>KCL 语言更新</h3><p>在尚未发布的版本中，KCL 的编译命令优化了一些错误信息的输出，部分的错误信息中增加了修复建议： <img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9bf254b8f62241fc877c8bb4ffba9807~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1642&amp;h=190&amp;s=99725&amp;e=png&amp;b=fefefe" referrerpolicy="no-referrer"></p><h3>KCL 模型更新</h3><p>近几周内，我们提供了更多针对容器、服务和 Pod Security Policy (PSP) 配置编辑及校验的使用案例。您可参照对应的示例引入以上配置和校验： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkrm-kcl%2Ftree%2Fmain%2Fexamples" target="_blank">https://github.com/kcl-lang/krm-kcl/tree/main/examples</a></p><p>下面我们以 Kubectl KCL 插件和 disallow-svc-lb 模型进行说明，disallow-svc-lb 的作用是对 Service 资源进行校验，不允许 Service 资源的类型设置为 <code>LoadBalancer</code>，编写如下 YAML 文件 (manifests.yaml)：</p><pre><code>apiVersion: krm.kcl.dev/v1alpha1
kind: KCLRun
metadata:
  name: disallow-svc-lb
  annotations: 
    krm.kcl.dev/version: 0.0.1
    krm.kcl.dev/type: validation
    documentation: &gt;-
      A validation that prevents the creation of Service resources of type `LoadBalancer`
spec:
  source: oci://ghcr.io/kcl-lang/disallow-svc-lb
---
apiVersion: v1
kind: Service
metadata:
  name: my-service
spec:
  selector:
    app.kubernetes.io/name: MyApp
  ports:
    - name: http
      protocol: TCP
      port: 80
  type: LoadBalancer # 错误地设置了 LoadBalancer
</code></pre><p>通过 Kubectl KCL 工具在客户端进行资源验证：</p><pre><code>kubectl kcl apply -f manifests.yaml
</code></pre><p>我们会得到如下结果：</p><pre><code>A validation that prevents the creation of Service resources of type `LoadBalancer`, for Service: my-service
</code></pre><h3>社区动态</h3><p>集成了 KCL 0.6 的 KusionStack 发布 0.9 版本，详细更新内容请查看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FnZOHdmgcfOMRf0XUXfSJ-g" target="_blank">https://mp.weixin.qq.com/s/nZOHdmgcfOMRf0XUXfSJ-g</a></p><h3>活动预告</h3><h4>KCD 杭州站 10.21 日线下活动</h4><p>Kubernetes Community Days（KCD）杭州站将于 10.21 举行线下活动，活动详情及报名：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrnNhmT4yoO66bGYNtFtG6g" target="_blank">https://mp.weixin.qq.com/s/rnNhmT4yoO66bGYNtFtG6g</a></p><h4>KCL 开源双周会</h4><p>近期 KCL 开源双周会将于 10.12 进行，欢迎社区小伙伴踊跃参与、交流：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity%2Fdiscussions%2F8" target="_blank">https://github.com/kcl-lang/community/discussions/8</a></p><p>点击链接入会，或添加至会议列表： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmeeting.tencent.com%2Fdm%2FHc6sNpqTWnPb" target="_blank">https://meeting.tencent.com/dm/Hc6sNpqTWnPb</a></p><p>#腾讯会议：778-2381-6338</p><p>复制该信息，打开手机腾讯会议即可参与</p><h2>其他资源</h2><p>❤️ 感谢所有 KCL 用户和社区小伙伴在社区中提出的宝贵反馈与建议。预计 11 月底我们会正式发布 KCL v0.7 新版本，敬请期待!</p><p>更多其他资源请参考：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">KCL 网站</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkusionstack.io%2F" target="_blank">KusionStack 网站</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Fcommunity%2Frelease-policy%2Froadmap" target="_blank">KCL 2023 路线规划</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F7" target="_blank">KCL v0.7.0 Milestone</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues" target="_blank">KCL Github Issues</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Forgs%2Fkcl-lang%2Fdiscussions" target="_blank">KCL Github Discussion</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity" target="_blank">KCL Community</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 12:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261492</guid>
            <link>https://www.oschina.net/news/261492</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中兴通讯「星云研发大模型」：AI 编程助手、1000 亿 token]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 10 月 11 日-13 日，在中国移动全球合作伙伴大会举办期间，中兴通讯「星云研发大模型」亮相，<strong>旨在辅助开发人员进行需求分析、产品设计、编程、测试、版本部署等</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0ea8f6611738c94f383a5186925f9339ae3.png" referrerpolicy="no-referrer"></p><p>据介绍，<strong>「星云研发大模型」支持白名单机制有效控制使用范围</strong>，以及代码特征值识别有效识别敏感代码片段、敏感词识别机制可实时监测并拦截敏感内容，还有后台审计机制可完整回溯安全事件等。</p><p>中兴通讯表示，2023 年 4 月，「星云研发大模型」使用启动，截至目前，<strong>日活人数达 1.2 万人，&nbsp;代码采纳率达 40%~45%，编码提效 30%，整体研发提效 10%</strong>。</p><p>中兴通讯将领域数据、Know-How 知识积累、数十万篇通信领域技术文档和<strong>1000 亿 token</strong>的无线 / 核心网 / 云代码语料等注入大模型，进行增量预训练，使用并行训练框架。</p><p>中兴通讯称：「自研部署方案使用动态 batch 策略、PagedAttention 技术，结合无损模型量化，吞吐量大幅提升，<strong>单 GPU（A800）达到 1500tokens / s，仅使用 4 张 GPU 卡（A800）可满足超千人使用需求</strong>。对比业界常规的部署方案，单 GPU 吞吐量分别提升 10 + 倍和 20 + 倍；结合 int4 量化技术，在模型精度不下降情况下，模型大小和显存使用量均下降一半。」</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 09:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261477</guid>
            <link>https://www.oschina.net/news/261477</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源中国发布大模型技术图谱（LLM Tech Map）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LLM 技术图谱 (LLM Tech Map) 是将 LLM 相关技术进行系统化和图形化的呈现，此图谱主要特点是「<strong>专注于技术人视角</strong>」，不求从 LLM 产业角度汇聚信息，而是希望让从事相关工作或是想了解 LLM 的技术人有一个快速感知。</p><p><span style="color:#e67e22"><strong>核心价值：帮助技术人快速了解 LLM 的核心技术和关键方向。</strong></span></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-89419d5edbf373da239902e38c150921bc4.png" referrerpolicy="no-referrer"></p><p>LLM 技术图谱（LLM Tech Map）从<strong>基础设施</strong>、<strong>大模型</strong>、<strong>Agent</strong>、<strong>AI 编程</strong>、<strong>工具和平台</strong>，以及<strong>算力</strong>几个方面，为开发者整理了当前 LLM 中最为热门和硬核的技术领域以及相关的软件产品和开源项目。</p><hr><h3>基础设施</h3><p>LLM 技术图谱（LLM Tech Map）的基础设施部分主要包括以下几个方面：</p><ul><li>向量数据库：向量数据库是专门用于存储和检索向量数据的数据库，它可以为 LLM 提供高效的存储和检索能力。</li><li>数据库向量支持：传统数据库通常不支持向量数据的存储和检索，数据库向量支持可以为传统数据库添加向量数据的存储和检索能力。</li><li>大模型框架、微调 (Fine Tuning)：针对大模型的开发。</li><li>大模型训练平台与工具</li></ul><h3>大模型</h3><p>LLM 技术图谱（LLM Tech Map）的大模型部分主要包括以下几个方面：</p><ul><li>备案上线的中国大模型：有牌照提供服务的大模型，需要注意的是大模型和相应的产品多半名称不同。</li><li>知名大模型：在全球范围内，已经发布了多款知名大模型，这些大模型在各个领域都取得了突破性的进展。</li><li>知名大模型应用：LLM 已经在多种应用场景中得到了应用，包括文本生成、机器翻译、问答、自然语言推理等。</li></ul><h3>AI Agent（LLM Agent）</h3><p>LLM Agent 是指基于 LLM 技术构建的智能代理，它可以用于各种任务，比如让机器与 ChatGPT 交互，一层一层挖掘信息，自动化完成任务；比如由机器人构成的虚拟小镇。</p><h3>AI 编程</h3><p>让 LLM 帮你编写代码。</p><h3>工具和平台</h3><p>LLM 技术图谱（LLM Tech Map）的工具和平台部分主要包括以下几个方面：</p><ul><li>LLMOps：简单点说（大家当前在说的），就是「快速从大模型到应用」。</li><li>大模型聚合平台：汇聚大模型能力，提供服务。</li><li>开发工具：其它开发相关的 LLM 工具。</li></ul><h3>算力</h3><p>LLM 模型的训练和部署需要大量的算力，算力是 LLM 技术发展的关键因素。</p><hr><p><strong>LLM Tech Map 已托管到 Gitee：<a href="https://gitee.com/oschina/llm-map" target="_blank">https://gitee.com/oschina/llm-map</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261467/oschina-llm-map</guid>
            <link>https://www.oschina.net/news/261467/oschina-llm-map</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SiFive 推出两款新型高性能 RISC-V 处理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">RISC-V 芯片厂商 SiFive <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sifive.com%2Fpress%2Fsifive-announces-differentiated-solutions-for-generative" target="_blank">宣布</a>推出两款新产品 SiFive Performance P870 CPU 和 SiFive Intelligence X390，主要面向高性能计算和 AI/ML 应用。</span></p><p style="text-align:start"><span style="color:#000000">SiFive Performance P870 和 SiFive Intelligence X390 提供低功耗、计算密度和矢量计算能力，旨在为消费电子、汽车技术和基础设施领域的数据密集型计算应用程序提供显着的性能提升。</span></p><p style="text-align:start"><span style="color:#000000">SiFive 高管强调了该公司致力于推动高性能 RISC-V 创新并缩小与其他指令集架构的差距。并表示，消费电子和基础设施等领域对半导体的需求不断增长，推动了 RISC-V 生态系统的快速扩张。</span></p><p style="text-align:start"><img height="265" src="https://oscimg.oschina.net/oscnet/up-f6db62d251fa51cb784cdb2fef741ac53e2.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:start"><img height="254" src="https://oscimg.oschina.net/oscnet/up-44006158dd13e95de661c64ecf3bb99eddc.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>SiFive </strong></span><strong>Performance</strong><span style="background-color:#ffffff"><strong> P870</strong></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">P870 </span>专为高性能消费类应用而设计，也可与数据中心的矢量处理器一起使用。<span style="background-color:#ffffff">在指令集架构可用性、吞吐量、并行性和内存带宽方面</span>为 RISC-V 性能树立了新标准。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">P870 具有一个&nbsp;</span></span><span style="background-color:#ffffff; color:#000000">6 发射乱序执行核心</span><span style="color:#000000"><span style="background-color:#ffffff">和一个共享集群高速缓存。与上一代 SiFive 性能处理器相比，P870 峰值单线程性能提升了 50% (specINT2k6)，最多可支持 32 </span>核集群<span style="background-color:#ffffff">。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">此外，P870 完全兼容 Google 对 RISC-V 上 Android 的平台要求，还提供其他经过验证的 SiFive 功能：</span>128b VLEN 长度的 RISC-V 矢量 (RVV)、矢量加密和 Hypervisor 扩展、IOMMU 和先进中断架构 (AIA)、非包含性 (non-inclusive) 三级缓存、经过验证的 RISC-V WorldGuard 安全设计。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><strong>SiFive </strong></span><strong>Intelligence&nbsp;</strong><span style="background-color:#ffffff"><strong>X390</strong></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">SiFive Intelligence X390 以其前身 SiFive Intelligence X280 为基础，<span style="background-color:#ffffff">凭借单核配置、双倍矢量长度和双矢量 ALU，将矢量计算性能提高了 4 倍，并将持续数据带宽量增加了 4 倍。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">借助 SiFive 矢量协处理器接口扩展 (VCIX)，公司可以轻松添加自己的矢量指令和/或加速硬件，并允许用户通过自定义指令大幅提高性能。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">功能包括：1024 位 VLEN、512 位 DLEN、单/双矢量 ALU、VCIX（2048 位输出，1024 位输入）。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">「<span style="background-color:#ffffff">将 P870 高性能通用计算 SoC 与由 X390 和客户 AI 硬件引擎组成的高性能 NPU 集群结合在一起，为产品设计人员提供高度灵活、低功耗和可编程的解决方案，并为复杂工作负载提供卓越的计算密度。</span>」</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">SiFive 强调了客户对这些组合解决方案的浓厚兴趣，并表示其中一些客户使用高性能 SiFive 产品在芯片开发和商业化方面取得了成功。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 09:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261465/sifive-two-new-high-performance-risc-v-processors</guid>
            <link>https://www.oschina.net/news/261465/sifive-two-new-high-performance-risc-v-processors</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软称黑客组织正在利用 Atlassian 新的 0day 漏洞]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F10%2F11%2Fchinese-state-hackers-atlassian-zero-day%2F" target="_blank">根据科技媒体 Techcrunch 报道</a>，微软的威胁情报团队在 X（前身为 Twitter）上发布的帖子<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FMsftSecIntel%2Fstatus%2F1711871732644970856" target="_blank">表示</a>，它观察到一个名为 Storm-0062 的黑客组织正在利用 Atlassian Confluence 数据中心和服务器中最近披露的一个关键缺陷。</p><p><img src="https://static.oschina.net/uploads/space/2023/1012/162312_aNLm_2720166.png" referrerpolicy="no-referrer"></p><p>Atlassian 在 10 月 4 日披露了其 Confluence 数据中心和服务器中的一个漏洞：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fconfluence.atlassian.com%2Fsecurity%2Fcve-2023-22515-privilege-escalation-vulnerability-in-confluence-data-center-and-server-1295682276.html" target="_blank">CVE-2023-22515</a>。</p><p><img src="https://static.oschina.net/uploads/space/2023/1012/162610_P2fX_2720166.png" referrerpolicy="no-referrer"></p><p>微软安全团队表示，它从 9 月 14 日起就观察到了漏洞利用。Atlassian 本周更新了安全通知，称该漏洞正被活跃利用，并表示此漏洞可能允许远程攻击者<strong>创建未经授权的管理员帐户来访问 Confluence 服务器</strong>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 08:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261452/atlassian-zero-day</guid>
            <link>https://www.oschina.net/news/261452/atlassian-zero-day</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 高性能轻量级代理库 ProxyDispatch]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-proxydispatch" class="anchor" href="https://gitee.com/dotnetchina/ProxyDispatch#proxydispatch"></a>ProxyDispatch</h1><p><a href="https://gitee.com/dotnetchina/ProxyDispatch/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-MIT-orange?cacheSeconds=10800" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nuget.org%2Fpackages%2FProxyDispatch"><img src="https://img.shields.io/nuget/v/ProxyDispatch.svg?cacheSeconds=10800" alt="nuget" referrerpolicy="no-referrer"></a><a href="https://gitee.com/dotnetchina"><img src="https://img.shields.io/badge/organization-dotNET%20China-yellow?cacheSeconds=10800" alt="dotNET China" referrerpolicy="no-referrer"></a></p><p>基于 DispatchProxy 和 Roslyn 实现的高性能轻量级代理库，支持类、接口、同步方法、异步方法拦截。</p><h2><a id="user-content-安装" class="anchor" href="https://gitee.com/dotnetchina/ProxyDispatch#%E5%AE%89%E8%A3%85"></a>安装</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">dotnet</span><span class="w"></span><span class="nx">add</span><span class="w"></span><span class="nx">package</span><span class="w"></span><span class="nx">ProxyDispatch</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-快速入门" class="anchor" href="https://gitee.com/dotnetchina/ProxyDispatch#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入门</h2><p>我们在<a href="https://gitee.com/link?target=https%3A%2F%2Ffurion.baiqian.ltd%2Fdocs%2Fjob%2F">主页</a>上有不少例子，这是让您入门的第一个：</p><ol><li>定义代理拦截器，并实现 <code>AspectDispatchProxy</code> 抽象方法：</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">public</span><span class="k">class</span><span class="nc">YourClassProxy</span><span class="p">:</span><span class="n">AspectDispatchProxy</span></span><span id="LC2" class="line"><span class="p">{</span></span><span id="LC3" class="line"><span class="c1">// 拦截同步</span></span><span id="LC4" class="line"><span class="k">public</span><span class="k">override</span><span class="kt">object</span><span class="nf">Invoke</span><span class="p">(</span><span class="n">Invocation</span><span class="n">invocation</span><span class="p">)</span></span><span id="LC5" class="line"><span class="p">{</span></span><span id="LC6" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"~~~调用同步方法：</span><span class="p">{</span><span class="n">invocation</span><span class="p">.</span><span class="n">Method</span><span class="p">}</span><span class="s">"</span><span class="p">);</span></span><span id="LC7" class="line"><span class="kt">var</span><span class="n">result</span><span class="p">=</span><span class="n">invocation</span><span class="p">.</span><span class="nf">Proceed</span><span class="p">();</span></span><span id="LC8" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"~~~调用同步方法结束，返回值：</span><span class="p">{</span><span class="n">result</span><span class="p">}</span><span class="s">"</span><span class="p">);</span></span><span id="LC9" class="line"><span class="k">return</span><span class="n">result</span><span class="p">;</span></span><span id="LC10" class="line"><span class="p">}</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"><span class="c1">// 拦截异步</span></span><span id="LC13" class="line"><span class="k">public</span><span class="k">override</span><span class="k">async</span><span class="n">Task</span><span class="nf">InvokeAsync</span><span class="p">(</span><span class="n">Invocation</span><span class="n">invocation</span><span class="p">)</span></span><span id="LC14" class="line"><span class="p">{</span></span><span id="LC15" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"~~~调用异步 Task 方法：</span><span class="p">{</span><span class="n">invocation</span><span class="p">.</span><span class="n">Method</span><span class="p">}</span><span class="s">"</span><span class="p">);</span></span><span id="LC16" class="line"><span class="k">await</span><span class="n">invocation</span><span class="p">.</span><span class="nf">ProceedAsync</span><span class="p">();</span></span><span id="LC17" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"~~~调用异步 Task 方法结束"</span><span class="p">);</span></span><span id="LC18" class="line"><span class="p">}</span></span><span id="LC19" class="line"></span><span id="LC20" class="line"><span class="c1">// 拦截异步带返回值</span></span><span id="LC21" class="line"><span class="k">public</span><span class="k">override</span><span class="k">async</span><span class="n">Task</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span><span class="n">InvokeAsync</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Invocation</span><span class="n">invocation</span><span class="p">)</span></span><span id="LC22" class="line"><span class="p">{</span></span><span id="LC23" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"~~~调用异步 Task&lt;T&gt; 方法：</span><span class="p">{</span><span class="n">invocation</span><span class="p">.</span><span class="n">Method</span><span class="p">}</span><span class="s">"</span><span class="p">);</span></span><span id="LC24" class="line"><span class="kt">var</span><span class="n">result</span><span class="p">=</span><span class="k">await</span><span class="n">invocation</span><span class="p">.</span><span class="n">ProceedAsync</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span></span><span id="LC25" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">$"~~~调用异步 Task&lt;T&gt; 方法结束，返回值：</span><span class="p">{</span><span class="n">result</span><span class="p">}</span><span class="s">"</span><span class="p">);</span></span><span id="LC26" class="line"><span class="k">return</span><span class="n">result</span><span class="p">;</span></span><span id="LC27" class="line"><span class="p">}</span></span><span id="LC28" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="2"><li>定义需要拦截的类和接口：</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">public</span><span class="k">class</span><span class="nc">YourClass</span><span class="p">:</span><span class="n">IYourClass</span></span><span id="LC2" class="line"><span class="p">{</span></span><span id="LC3" class="line"><span class="c1">// 同步方法</span></span><span id="LC4" class="line"><span class="k">public</span><span class="kt">string</span><span class="nf">SyncMethod</span><span class="p">(</span><span class="kt">string</span><span class="n">str</span><span class="p">)</span></span><span id="LC5" class="line"><span class="p">{</span></span><span id="LC6" class="line"><span class="k">return</span><span class="n">str</span><span class="p">;</span></span><span id="LC7" class="line"><span class="p">}</span></span><span id="LC8" class="line"></span><span id="LC9" class="line"><span class="c1">// 异步方法</span></span><span id="LC10" class="line"><span class="k">public</span><span class="k">async</span><span class="n">Task</span><span class="nf">AsyncMethod</span><span class="p">()</span></span><span id="LC11" class="line"><span class="p">{</span></span><span id="LC12" class="line"><span class="k">await</span><span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span></span><span id="LC13" class="line"><span class="p">}</span></span><span id="LC14" class="line"></span><span id="LC15" class="line"><span class="c1">// 异步方法带返回值</span></span><span id="LC16" class="line"><span class="k">public</span><span class="k">async</span><span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span><span class="nf">AsyncMethodWithResult</span><span class="p">(</span><span class="kt">int</span><span class="n">num</span><span class="p">)</span></span><span id="LC17" class="line"><span class="p">{</span></span><span id="LC18" class="line"><span class="k">await</span><span class="n">Task</span><span class="p">.</span><span class="nf">Delay</span><span class="p">(</span><span class="m">10</span><span class="p">);</span></span><span id="LC19" class="line"><span class="k">return</span><span class="n">num</span><span class="p">+</span><span class="m">100</span><span class="p">;</span></span><span id="LC20" class="line"><span class="p">}</span></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c1">// 泛型方法</span></span><span id="LC23" class="line"><span class="k">public</span><span class="n">T</span><span class="n">GenericMethod</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span><span class="n">x</span><span class="p">)</span></span><span id="LC24" class="line"><span class="p">{</span></span><span id="LC25" class="line"><span class="k">return</span><span class="n">x</span><span class="p">;</span></span><span id="LC26" class="line"><span class="p">}</span></span><span id="LC27" class="line"><span class="p">}</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="k">public</span><span class="k">interface</span><span class="nc">IYourClass</span></span><span id="LC30" class="line"><span class="p">{</span></span><span id="LC31" class="line"><span class="c1">// 同步方法</span></span><span id="LC32" class="line"><span class="kt">string</span><span class="nf">SyncMethod</span><span class="p">(</span><span class="kt">string</span><span class="n">str</span><span class="p">);</span></span><span id="LC33" class="line"></span><span id="LC34" class="line"><span class="c1">// 异步方法</span></span><span id="LC35" class="line"><span class="n">Task</span><span class="nf">AsyncMethod</span><span class="p">();</span></span><span id="LC36" class="line"></span><span id="LC37" class="line"><span class="c1">// 异步方法带返回值</span></span><span id="LC38" class="line"><span class="n">Task</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span><span class="nf">AsyncMethodWithResult</span><span class="p">(</span><span class="kt">int</span><span class="n">num</span><span class="p">);</span></span><span id="LC39" class="line"></span><span id="LC40" class="line"><span class="c1">// 泛型方法</span></span><span id="LC41" class="line"><span class="n">T</span><span class="n">GenericMethod</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span><span class="n">x</span><span class="p">);</span></span><span id="LC42" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="3"><li>创建拦截代理对象：</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 创建拦截对象</span></span><span id="LC2" class="line"><span class="kt">var</span><span class="n">yourClass</span><span class="p">=</span><span class="n">AspectDispatchProxy</span><span class="p">.</span><span class="n">Decorate</span><span class="p">&lt;</span><span class="n">IYourClass</span><span class="p">,</span><span class="n">YourClassProxy</span><span class="p">&gt;(</span><span class="k">new</span><span class="nf">YourClass</span><span class="p">());</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="n">yourClass</span><span class="p">.</span><span class="nf">SyncMethod</span><span class="p">(</span><span class="s">"百小僧"</span><span class="p">);</span></span><span id="LC5" class="line"><span class="k">await</span><span class="n">yourClass</span><span class="p">.</span><span class="nf">AsyncMethod</span><span class="p">();</span></span><span id="LC6" class="line"><span class="k">await</span><span class="n">yourClass</span><span class="p">.</span><span class="nf">AsyncMethodWithResult</span><span class="p">(</span><span class="m">100</span><span class="p">);</span></span><span id="LC7" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"泛型方法 GenericMethod 调用，返回值："</span><span class="p">+</span><span class="n">yourClass</span><span class="p">.</span><span class="nf">GenericMethod</span><span class="p">(</span><span class="s">"Furion"</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>输出如下：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">~~~调用同步方法：System.String SyncMethod<span class="o">(</span>System.String<span class="o">)</span></span><span id="LC2" class="line">~~~调用同步方法结束，返回值：百小僧</span><span id="LC3" class="line">~~~调用异步 Task 方法：System.Threading.Tasks.Task AsyncMethod<span class="o">()</span></span><span id="LC4" class="line">~~~调用异步 Task 方法结束</span><span id="LC5" class="line">~~~调用异步 Task&lt;T&gt; 方法：System.Threading.Tasks.Task<span class="sb">`</span>1[System.Int32] AsyncMethodWithResult<span class="o">(</span>Int32<span class="o">)</span></span><span id="LC6" class="line">~~~调用异步 Task&lt;T&gt; 方法结束，返回值：200</span><span id="LC7" class="line">泛型方法 GenericMethod 调用，返回值：Furion</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="4"><li>还可以直接代理类，无需接口：</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">// 创建拦截对象（无依赖接口）</span></span><span id="LC2" class="line"><span class="kt">var</span><span class="n">yourClassNoInterface</span><span class="p">=</span><span class="n">AspectDispatchProxy</span><span class="p">.</span><span class="n">DecorateClass</span><span class="p">&lt;</span><span class="n">YourClass</span><span class="p">,</span><span class="n">YourClassProxy</span><span class="p">&gt;(</span><span class="k">new</span><span class="nf">YourClass</span><span class="p">());</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="n">yourClassNoInterface</span><span class="p">.</span><span class="nf">SyncMethod</span><span class="p">(</span><span class="s">"百小僧"</span><span class="p">);</span></span><span id="LC5" class="line"><span class="k">await</span><span class="n">yourClassNoInterface</span><span class="p">.</span><span class="nf">AsyncMethod</span><span class="p">();</span></span><span id="LC6" class="line"><span class="k">await</span><span class="n">yourClassNoInterface</span><span class="p">.</span><span class="nf">AsyncMethodWithResult</span><span class="p">(</span><span class="m">100</span><span class="p">);</span></span><span id="LC7" class="line"><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"泛型方法 GenericMethod 调用，返回值："</span><span class="p">+</span><span class="n">yourClassNoInterface</span><span class="p">.</span><span class="nf">GenericMethod</span><span class="p">(</span><span class="s">"Furion"</span><span class="p">));</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p><a href="https://gitee.com/dotnetchina/ProxyDispatch">更多文档</a></p><h2><a id="user-content-文档" class="anchor" href="https://gitee.com/dotnetchina/ProxyDispatch#%E6%96%87%E6%A1%A3"></a>文档</h2><p>您可以在<a href="https://gitee.com/dotnetchina/ProxyDispatch">主页</a>找到 ProxyDispatch 文档。</p><h2><a id="user-content-贡献" class="anchor" href="https://gitee.com/dotnetchina/ProxyDispatch#%E8%B4%A1%E7%8C%AE"></a>贡献</h2><p>该存储库的主要目的是继续发展 ProxyDispatch 核心，使其更快、更易于使用。ProxyDispatch 的开发在 <a href="https://gitee.com/dotnetchina/ProxyDispatch">Gitee</a> 上公开进行，我们感谢社区贡献错误修复和改进。</p><h2><a id="user-content-许可证" class="anchor" href="https://gitee.com/dotnetchina/ProxyDispatch#%E8%AE%B8%E5%8F%AF%E8%AF%81"></a>许可证</h2><p>ProxyDispatch 采用 <a href="https://gitee.com/dotnetchina/ProxyDispatch/blob/master/LICENSE">MIT</a> 开源许可证。</p>]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 08:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/dotnetchina/ProxyDispatch</guid>
            <link>https://gitee.com/dotnetchina/ProxyDispatch</link>
        </item>
        <item>
            <title>
                <![CDATA[23 岁博士生修复 Firefox 中的 22 年「幽灵老 Bug」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2002 年 6 月 2 日，<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D148624" target="_blank">Firefox 用户报告了一个 bug</a></strong>：当鼠标悬浮在工具栏图标上时会展示相关提示（该项特性名为 '<strong>Tooltips</strong>'）。如果此时将浏览器从前台切换到后台，该提示会仍然留在前台——就像幽灵一样。而摆脱这一恼人提示的唯一方法是再次将浏览器从后台切换到前台，然后将鼠标从工具栏上移开。</p><p><img src="https://static.oschina.net/uploads/space/2023/1012/144535_rfv0_2720166.png" referrerpolicy="no-referrer"></p><p>该 bug 的具体复现如下图所示：</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1072dc8473f17b2efeb96b6ea9187bc9c42.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e043a3cb01187401398a4118bd1e5ef854b.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-20a34ca97d7a8aa279fbc5404fabcda5e9c.png" referrerpolicy="no-referrer"></p></blockquote><p>22 年后 Mozilla 终于为 Firefox 修复了该 bug，对应的 Bugzilla 报告也终于关闭了。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D148624" target="_blank"><img src="https://static.oschina.net/uploads/space/2023/1012/143953_bmr4_2720166.png" referrerpolicy="no-referrer"></a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farstechnica.com%2Fgadgets%2F2023%2F10%2F22-year-old-firefox-tooltip-bug-fixed-in-a-few-lines-offering-hope-to-us-all%2F" target="_blank">根据科技媒体 arstechnica 的报道</a>，帮助修复该 bug 的是斯坦福大学的一年级电机工程博士生 Yifan Zhu，这也是他第一次向开源项目贡献补丁。</p><p><img src="https://static.oschina.net/uploads/space/2023/1012/145359_cKbi_2720166.png" referrerpolicy="no-referrer"></p><p><em>▲&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffanzhuyifan.github.io%2F" target="_blank">https://fanzhuyifan.github.io/</a></em></p><p>Zhu 出生于 1999 年，也就是该 bug 首次报告三年之前。他是在 Linux 上使用邮件客户端 Thunderbird 时首次遭遇该 bug，认为这个 bug 太恼人了。他试着报告该 bug，结果发现它已经存在了 22 年之久，至今还没有修复，可能是因为它是一个小问题也不会导致崩溃处理的优先度不高。</p><p>毕竟这个 bug 仅仅影响到非常小区域的 UI，用户顺手就能临时处理，而且有很多其他比它更严重的 bug 在排队等待解决，所以这个 bug 就这样变为了「陈年老 Bug」。</p><p>于是他决定自己来修复。他知道如何编程，也正好处于博士生开始前的暑假，<strong>但此前从未向开源项目贡献代码，也从未在 Firefox 之类的复杂项目上工作过</strong>。</p><p>虽然冲劲十足，但 Zhu 刚开始的修 bug 之路算不上顺利。他先是在整个代码库里搜索 '<strong>tooltip</strong>'，然后检查可能存在错误的候选内容，并插入调试打印语句跟踪执行。这样的工作非常耗费时间。</p><p>不过正是通过这样的「笨方法」，Zhu 最后定位到了问题所在。当鼠标悬浮在某个元素上时，一个计时器会启动去显示 tooltip，在鼠标移出事件后计时器将会取消。但使用快捷键切换窗口或虚拟桌面时，Firefox 没有取消计时器。Zhu 递交了补丁，<strong>让 tooltip 的显示基于 Firefox 失去焦点而不是鼠标离开应用</strong>。</p><p>几个小时后，Zhu 收到 Mozilla 资深软件工程师 Emilio Cobos Álvarez 的回复，他帮助完善了 Zhu 的补丁并提交到代码库中，并表示 Zhu 的第一个 Firefox 补丁令人印象深刻。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 07:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261435/22-year-old-firefox-tooltip-bug-fixed</guid>
            <link>https://www.oschina.net/news/261435/22-year-old-firefox-tooltip-bug-fixed</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[亿图软件加入 openKylin，助推社区办公生态繁荣]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">近日，深圳市亿图软件有限公司（以下简称「亿图软件」）签署 openKylin 社区 CLA（Contributor License Agreement 贡献者许可协议），正式加入 openKylin 开源社区。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-716e50f9d07314848b1a3d9d05b3994296a.png" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">深圳市亿图软件有限公司成立于 2014 年，自成立以来一直致力于绘图创意软件的研究和开发，凭借多年在图形可视化领域积累的经验，亿图已经成为国内外专业的绘图创意类软件提供商。其主要产品包括亿图图示 EdrawMax、亿图脑图 MindMaster、项目管理软件 EdrawProj、平面设计软件菲果、组织架构图软件 OrgCharting。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">亿图软件依托万兴科技集团成熟的产品研发体系，有效保障产品质量，打造出性能可靠、安全稳定的产品和服务方案。亿图图示、亿图脑图已获得国家版权局颁发的软件著作证书和第三方机构出具的质量测试报告，产品完成度和稳定性均得到良好验证。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-a599eea407fc47edf19092c1bf68e52ff54.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">在加入 openKylin 社区后，亿图软件与 openKylin 完成了亿图图示和亿图脑图两款软件的适配，并已上架至 openKylin 软件商店，同时，亿图项目管理软件也在适配中。后续，亿图软件也将持续与 openKylin 社区在生态适配、社区活动、技术交流等方面开展合作，共同推动社区生态繁荣。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 06:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261428</guid>
            <link>https://www.oschina.net/news/261428</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Wordpress.com 已支持 ActivityPub 协议]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>WordPress.com <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwordpress.com%2Fblog%2F2023%2F10%2F11%2Factivitypub%2F" target="_blank">发布公告称</a>已支持 ActivityPub 协议——正式连接「联邦宇宙」 (fediverse)。</p><blockquote><p>联邦宇宙由像 Mastodon 这样的联合平台组成，这些平台是由独立网站或服务器组成的网络，这些网站或服务器可以相互通信，同时仍然单独运行。</p><p>这很像电子邮件，用户可以向拥有不同服务（例如 Gmail、Yahoo 等）帐户的用户发送电子邮件，但所有这些都可以无缝交互。同样，联合平台使用户能够在统一网络中跨不同服务关注、共享内容并与之交互。</p></blockquote><p>ActivityPub 是开源、去中心化的社交网络协议，目前被 Mastodon、Pixelfed 和串流服务 PeerTube 等应用使用。它提供了一个客户端到服务器的 API 用于<strong>创建、更新和删除内容</strong>，以及一个<strong>联邦制的服务器到服务器 API</strong>用于<strong>传递通知和订阅内容</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1545cdc089c2b02c28421e95ec08dc9554e.png" referrerpolicy="no-referrer"></p><p>▲ ActivityPub 运行原理</p><p>半年前，WordPress 母公司已经收购了 WordPress 插件&nbsp;<a href="https://www.oschina.net/news/232623/automattic-acquires-activitypub" target="_blank">ActivityPub </a>，它用于博客与许多联合平台（包括 Mastodon、Pleroma、Friendica 等）之间的无缝集成。该插件使博客读者能够在这些平台上关注博主文章。</p><p><img src="https://oscimg.oschina.net/oscnet/up-043b7e29824014e389a49fff34ba108e388.png" referrerpolicy="no-referrer"></p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwordpress.com%2Fblog%2F2023%2F10%2F11%2Factivitypub%2F" target="_blank">点此查看在 Wordpress.com 使用 ActivityPub 的具体教程</a></strong>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 11 Oct 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261413/wordpress-activitypub</guid>
            <link>https://www.oschina.net/news/261413/wordpress-activitypub</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[PgHero —— PostgreSQL 性能仪表板]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start">pghero&nbsp;是一个&nbsp;<span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Postgres 的性能仪表板。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://pghero.dokkuapp.com/">查看实际效果</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="294" src="https://static.oschina.net/uploads/space/2023/0912/163042_vtOX_4252687.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>PgHero 可作为 Docker </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#1f2328">image</span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>、Linux 软件包和 Rails 引擎使用。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>选择你喜欢的安装方法即可开始。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><a href="https://github.com/ankane/pghero/blob/master/guides/Docker.md">Docker</a></li><li><a href="https://github.com/ankane/pghero/blob/master/guides/Linux.md">Linux</a></li><li><a href="https://github.com/ankane/pghero/blob/master/guides/Rails.md">Rails</a></li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 10 Oct 2023 08:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/pghero</guid>
            <link>https://www.oschina.net/p/pghero</link>
        </item>
    </channel>
</rss>
