<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 27 Nov 2023 02:37:14 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Numbat —— 用于科学计算的静态类型编程语言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Numbat 是一种用于科学计算的静态类型编程语言，对物理尺寸和单位具有一流的支持。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>可以使用它进行简单的数学计算：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><code>&gt;&gt;&gt; 1920/16*9

    = 1080

&gt;&gt;&gt; 2^32

    = 4294967296

&gt;&gt;&gt; sqrt(1.4^2 + 1.5^2) * cos(pi/3)^2

    = 0.512957</code></pre><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>然而，Numbat 的真正优势在于使用物理单位执行计算：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><code>&gt;&gt;&gt; 8 km / (1 h + 25 min)

  8 kilometer / (1 hour + 25 minute)

    = 5.64706 km/h    [Velocity]

&gt;&gt;&gt; 140 € -&gt; GBP

  140 euro ➞ british_pound

    = 120.768 £    [Money]

&gt;&gt;&gt; atan2(30 cm, 1 m) -&gt; deg

  atan2(30 centimeter, 1 meter) ➞ degree

    = 16.6992°

&gt;&gt;&gt; let ω = 2π c / 660 nm

  let ω: Frequency = 2 π × c / 660 nanometer

&gt;&gt;&gt; ℏ ω -&gt; eV

  ℏ × ω ➞ electronvolt

    = 1.87855 eV    [Energy]</code></pre></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:26:08 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/numbat</guid>
            <link>https://www.oschina.net/p/numbat</link>
        </item>
        <item>
            <title>
                <![CDATA[阿里达摩院撤裁量子实验室，已将实验室及仪器设备赠予浙江大学]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>此前网传阿里巴巴达摩院由于预算及盈利等原因，已经撤裁旗下量子实验室。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f56d238fc4cd0472484cff8074725c56bb7.png" referrerpolicy="no-referrer"></p></blockquote><p>对此，阿里巴巴达摩院相关人士回应九派财经称，为了进一步推动量子科技协同发展，达摩院联合浙江大学发展量子科技，<strong>达摩院将量子实验室及可移交的量子实验仪器设备捐赠予浙江大学</strong>，并向其他高校和科研机构进行开放。</p><p>目前，达摩院量子实验室网站已撤下之前的所有内容 (<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdamo.alibaba.com%2Flabs%2Fquantum%2F%3Flang%3Dzh" target="_blank">https://damo.alibaba.com/labs/quantum/?lang=zh</a></u>)。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fe3290832247ef64372a3cecccec9e368c.png" referrerpolicy="no-referrer"></p><p>「中国科学院-阿里巴巴量子计算实验室（AQL）」于 2015 年 7 月 30 日揭牌成立，计划在量子信息科学领域开展前瞻性研究，研制量子计算机。根据该联合实验室的研究计划：</p><ul><li><p>预计到 2025 年，量子模拟将达到当今世界最快的超级计算机的水平；</p></li><li><p>到 2030 年，研制具有 50—100 个量子比特的通用量子计算原型机，突破大规模量子计算机的芯片工艺，从物理层设计、制造，到算法运行实现自主研发，全面实现通用量子计算功能，并应用于大数据处理等重大实际问题。</p></li></ul><p>达摩院此前在该领域进行了长期投入，配置了国际领先的量子实验专用仪器设备，建成 Lab-1、Lab-2 两座硬件实验室，具备量子计算软硬件全栈开发能力。</p><p>除此之外，达摩院在芯片制备、比特相干时长、门操控、量子纠错，量子计算控制架构等领域取得了多个重要成果，包括高精度、多比特超导量子芯片，量子电路经典模拟器「太章」等。</p><hr><p><strong>延伸阅读</strong></p><ul><li><a href="https://www.oschina.net/news/259545" target="news">百度发布首个量子领域大模型</a></li><li><a href="https://www.oschina.net/news/203591/cirq-1-0-released" target="news">谷歌发布量子编程框架 Cirq 1.0 版本</a></li><li><a href="https://www.oschina.net/news/180254/mit-new-language-quantum-computing-twist" target="news">MIT 推出用于量子计算的编程语言 Twist</a></li><li><a href="https://www.oschina.net/news/124369/alibaba-open-source-taizhang-2-0" target="news">阿里开源量子模拟器 「太章 2.0」</a></li><li><a href="https://www.oschina.net/news/122471/china-quantum-hegemony" target="news">中国「量子霸权」成果：比最快超级计算机快一百万亿倍</a></li><li><a href="https://www.oschina.net/news/117459/us-plans-quantum-internet" target="news">美国发布量子互联网蓝图：十年内建成</a></li><li><a href="https://www.oschina.net/news/116574/silq-programming-language-for-quantum-computers" target="news">量子计算机领域内第一种高级编程语言 Silq 诞生</a></li><li><a href="https://www.oschina.net/news/108172/microsoft-quantum-oss-available-github" target="news">微软宣布开源量子开发工具包</a></li><li><a href="https://www.oschina.net/news/98474/google-opensource-cirq" target="news">拥抱新时代，Google 开源量子算法框架 CIRQ</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:22:08 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268299</guid>
            <link>https://www.oschina.net/news/268299</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 轻量级本地化热点检测/降级框架 Akali]]>
            </title>
            <description>
                <![CDATA[<p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fakali.yomahub.com%2F"><img src="https://gitee.com/dromara/Akali/raw/master/static/img/logo-main.svg" height="auto" alt="logo" referrerpolicy="no-referrer"></a></p><h3><a id="官网 httpsakaliyomahubcom" class="anchor" href="https://gitee.com/dromara/Akali#%E5%AE%98%E7%BD%91httpsakaliyomahubcom"></a>官网：<a href="https://gitee.com/link?target=https%3A%2F%2Fakali.yomahub.com">https://akali.yomahub.com</a></h3><h3><a id="介绍" class="anchor" href="https://gitee.com/dromara/Akali#%E4%BB%8B%E7%BB%8D"></a>介绍</h3><p>Akali（阿卡丽）是一个轻量级本地化热点检测/降级框架，适用于大流量场景，可轻松解决业务中超高流量的并发查询等场景。并且接入和使用极其简单，10 秒钟即可接入使用！</p><p>Akali 框架的理念就是小巧，实用，来无影去无踪，丝血团战，满血退场，所到之处，皆为虚无。</p><h3><a id="使用" class="anchor" href="https://gitee.com/dromara/Akali#%E4%BD%BF%E7%94%A8"></a>使用</h3><p>引入依赖：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;groupId&gt;</span>org.dromara<span class="nt">&lt;/groupId&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;artifactId&gt;</span>akali<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;version&gt;</span>1.1.2<span class="nt">&lt;/version&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="对任意方法进行热点处理" class="anchor" href="https://gitee.com/dromara/Akali#%E5%AF%B9%E4%BB%BB%E6%84%8F%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E7%83%AD%E7%82%B9%E5%A4%84%E7%90%86"></a>对任意方法进行热点处理</h4><p>只需要加上<code>@AkaliHot</code>这个标注，任意方法均可以获得热点检测，并在热点期间用热点数据进行返回，在热点过后，又会自动调用原本业务逻辑。</p><p>举例：比如有一个商品查询的业务，传入 SkuCode，返回商品信息。当某个商品进行促销时，访问的量就会增加，但是对于相同的 SkuCode 而言，其短时间窗口内返回的 SkuInfo 是一致的，我们的目标是当某个商品 sku 被大量查询时，框架能够在短时间内把这个商品 sku 提为热点数据，并通过对其进行缓存返回来降低对下游业务的压力。而当热点值过后，框架又能够自动摘除这个热点值，使其按照原有方式进行查询。</p><p>其本质相当于实时的监测了热点，并对其热点数据做了一个短时间内的缓存。</p><p>以下示例代表了：当相同的 skuCode 在 5 秒内超过 50 次调用时，会自动把这个 skuCode 的值提为热点，并用最后一次的返回值直接返回。当调用低于 5 秒 50 次调用时，框架会自动的摘除掉这个热点。使其正常的调用你原有代码进行逻辑计算并返回。这一切都是自动的。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nd">@AkaliHot</span><span class="o">(</span><span class="n">grade</span><span class="o">=</span><span class="nc">FlowGradeEnum</span><span class="o">.</span><span class="na">FLOW_GRADE_QPS</span><span class="o">,</span><span class="n">count</span><span class="o">=</span><span class="mi">50</span><span class="o">,</span><span class="n">duration</span><span class="o">=</span><span class="mi">5</span><span class="o">)</span></span><span id="LC2" class="line"><span class="kd">public</span><span class="nc">SkuInfo</span><span class="nf">getSkuInfo</span><span class="o">(</span><span class="nc">String</span><span class="n">skuCode</span><span class="o">){</span></span><span id="LC3" class="line"><span class="c1">//do your biz and return sku info</span></span><span id="LC4" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>其中<code>grade</code>参数除了有以<code>QPS</code>作为维度统计，还有以<code>Thread</code>个数作为维度统计。比如：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nd">@AkaliHot</span><span class="o">(</span><span class="n">grade</span><span class="o">=</span><span class="nc">FlowGradeEnum</span><span class="o">.</span><span class="na">FLOW_GRADE_THREAD</span><span class="o">,</span><span class="n">count</span><span class="o">=</span><span class="mi">50</span><span class="o">,</span><span class="n">duration</span><span class="o">=</span><span class="mi">5</span><span class="o">)</span></span><span id="LC2" class="line"><span class="kd">public</span><span class="nc">SkuInfo</span><span class="nf">getSkuInfo</span><span class="o">(</span><span class="nc">String</span><span class="n">skuCode</span><span class="o">){</span></span><span id="LC3" class="line"><span class="c1">//do your biz and return sku info</span></span><span id="LC4" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>这就代表了，如果某个 skuCode 在 5 秒之内有超过 50 个线程正在运行，那么就提为热点，并用热点数据直接返回。</p><p>对开源项目比较熟悉的同学看到这肯定想到了京东的框架-<code>hotkey</code>，<code>Akali</code>不同于<code>hotkey</code>，完全是本地运行的，不依赖于服务端，而且接入比<code>hotkey</code> 方便多了。性能完全相当于<code>hotkey</code>。</p><h4><a id="对任意方法进行降级" class="anchor" href="https://gitee.com/dromara/Akali#%E5%AF%B9%E4%BB%BB%E6%84%8F%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E9%99%8D%E7%BA%A7"></a>对任意方法进行降级</h4><p>只需要加上<code>@AkaliFallback</code>注解。任意方法均可获得降级功能。</p><p>举例：某一个方法需要调用外部的接口，但是外部的接口性能不佳，耗时高。当并发一高时，线程池就会吃满，线程池队列也会逐渐堆积从而导致超时，或者丢弃，严重时会拖垮整个系统。</p><p>这时，我们只要对这个方法加上<code>@AkaliFallback</code>标注，即可解决。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nd">@AkaliFallback</span><span class="o">(</span><span class="n">grade</span><span class="o">=</span><span class="nc">FlowGradeEnum</span><span class="o">.</span><span class="na">FLOW_GRADE_THREAD</span><span class="o">,</span><span class="n">count</span><span class="o">=</span><span class="mi">100</span><span class="o">)</span></span><span id="LC2" class="line"><span class="kd">public</span><span class="nc">String</span><span class="nf">sayHi</span><span class="o">(</span><span class="nc">String</span><span class="n">name</span><span class="o">){</span></span><span id="LC3" class="line"><span class="k">return</span><span class="s">"hi,"</span><span class="o">+</span><span class="n">name</span><span class="o">;</span></span><span id="LC4" class="line"><span class="o">}</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="kd">public</span><span class="nc">String</span><span class="nf">sayHiFallback</span><span class="o">(</span><span class="nc">String</span><span class="n">name</span><span class="o">){</span></span><span id="LC7" class="line"><span class="k">return</span><span class="s">"fallback str"</span><span class="o">;</span></span><span id="LC8" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>以上注解表示了，当这个方法的同时运行的线程超过 100 个时，触发降级，降级会自动调用<code>原方法名+Fallback</code>方法名 (并且参数要一致)，当降级触发后会直接返回<code>fallback str</code>，当线程数小于 100 时，框架也会自动摘除降级，还是输出<code>hi,xxxx</code>。</p><p>如果你的类中没有定义 fallback 方法，那么触发降级时会报错，当然你可以在降级方法中去抛错，来让上游系统知道你这个方法已经达到了瓶颈。</p><h3><a id="注意事项" class="anchor" href="https://gitee.com/dromara/Akali#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9"></a>注意事项</h3><p>Akali 只针对于 Springboot，Spring 环境，并且所有标注了<code>@AkaliHot</code>或者<code>@AkaliFallback</code>的类一定得注册到 spring 上下文中。</p><p>Akali 在 springboot 中会自动扫描所有标注的类，您无需做任何配置，在 spring 中，你需要配置：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;bean</span><span class="na">class=</span><span class="s">"org.dromara.akali.strategy.FallbackStrategy"</span><span class="nt">/&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;bean</span><span class="na">class=</span><span class="s">"org.dromara.akali.strategy.MethodHotspotStrategy"</span><span class="nt">/&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;bean</span><span class="na">class=</span><span class="s">"org.dromara.akali.spring.AkaliScanner"</span><span class="nt">/&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="交流群" class="anchor" href="https://gitee.com/dromara/Akali#%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>交流群</h3><img src="https://gitee.com/dromara/Akali/raw/master/static/img/chat.png" referrerpolicy="no-referrer">]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:12:08 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/dromara/Akali</guid>
            <link>https://gitee.com/dromara/Akali</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 深入理解 BigBird 的块稀疏注意力]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section data-tool="mdnice 编辑器" data-website="https://www.mdnice.com" style="font-size: 16px;color: black;padding-right: 10px;padding-left: 10px;line-height: 1.6;letter-spacing: 0px;word-break: break-word;text-align: left;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;" data-mpa-powered-by="yiban.io"><span id="OSC_h2_1"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">引言</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">基于 transformer 的模型已被证明对很多 NLP 任务都非常有用。然而，<span style="cursor:pointer;"><span role="presentation" data-formula="O(n^2)" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -833.9 2544.6 1083.9" aria-hidden="true" style="vertical-align: -0.566ex;width: 5.757ex;height: 2.452ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="4F" d="M740 435Q740 320 676 213T511 42T304 -22Q207 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435ZM637 476Q637 565 591 615T476 665Q396 665 322 605Q242 542 200 428T157 216Q157 126 200 73T314 19Q404 19 485 98T608 313Q637 408 637 476Z"></path></g><g data-mml-node="mo" transform="translate(763, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msup" transform="translate(1152, 0)"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(600, 363) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(2155.6, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></span></span> 的时间和内存复杂度 (其中 <span style="cursor:pointer;"><span role="presentation" data-formula="n" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 600 453" aria-hidden="true" style="vertical-align: -0.025ex;width: 1.357ex;height: 1.025ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></span></span> 是序列长度) 使得在长序列 (<span style="cursor:pointer;"><span role="presentation" data-formula="n > 512" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -666 3433.6 706" aria-hidden="true" style="vertical-align: -0.09ex;width: 7.768ex;height: 1.597ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(877.8, 0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1933.6, 0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" transform="translate(500, 0)"></path><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" transform="translate(1000, 0)"></path></g></g></g></svg></span></span>) 上应用它们变得非常昂贵，因而大大限制了其应用。最近的几篇论文，如 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">Longformer</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">Performer</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">Reformer</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">簇状注意力</code> 都试图通过对完整注意力矩阵进行近似来解决这个问题。如果你不熟悉这些模型，可以查看 🤗 之前的，博文。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird</code> (由，该论文，引入) 是解决这个问题的最新模型之一。 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird</code> 依赖于 <strong style="color: black;">块稀疏注意力</strong> 而不是普通注意力 ( <em style="color: black;">即</em> BERT 的注意力)，与 BERT 相比，这一新算法能以低得多的计算成本处理长达 <strong style="color: black;">4096</strong> 的序列。在涉及很长序列的各种任务上，该模型都实现了 SOTA，例如长文档摘要、长上下文问答。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">RoBERTa 架构的 BigBird</strong> 模型现已集成入 🤗 transformers 中。本文的目的是让读者 <strong style="color: black;">深入</strong> 了解 BigBird 的实现，并让读者能在 🤗 transformers 中轻松使用 BigBird。但是，在更深入之前，一定记住 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird</code> 注意力只是 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BERT</code> 完全注意力的一个近似，因此我们并不纠结于让它比 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BERT</code> 完全注意力 <strong style="color: black;">更好</strong>，而是致力于让它更有效率。有了它，transformer 模型就可以作用于更长的序列，因为 BERT 的二次方内存需求很快会变得难以为继。简而言之，如果我们有 <span style="cursor:pointer;"><span role="presentation" data-formula="\infty" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 1000 453" aria-hidden="true" style="vertical-align: -0.025ex;width: 2.262ex;height: 1.025ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></span></span> 计算和 <span style="cursor:pointer;"><span role="presentation" data-formula="\infty" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 1000 453" aria-hidden="true" style="vertical-align: -0.025ex;width: 2.262ex;height: 1.025ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="221E" d="M55 217Q55 305 111 373T254 442Q342 442 419 381Q457 350 493 303L507 284L514 294Q618 442 747 442Q833 442 888 374T944 214Q944 128 889 59T743 -11Q657 -11 580 50Q542 81 506 128L492 147L485 137Q381 -11 252 -11Q166 -11 111 57T55 217ZM907 217Q907 285 869 341T761 397Q740 397 720 392T682 378T648 359T619 335T594 310T574 285T559 263T548 246L543 238L574 198Q605 158 622 138T664 94T714 61T765 51Q827 51 867 100T907 217ZM92 214Q92 145 131 89T239 33Q357 33 456 193L425 233Q364 312 334 337Q285 380 233 380Q171 380 132 331T92 214Z"></path></g></g></g></svg></span></span> 时间，那么用 BERT 注意力就好了，完全没必要用本文讨论的块稀疏注意力。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">如果你想知道为什么在处理较长序列时需要更多计算，那么本文正合你意！</p><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">在使用标准的 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BERT</code> 类注意力时可能会遇到以下几个主要问题:</p><ul data-tool="mdnice 编辑器" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;" class="list-paddingleft-1"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      每个词元真的都必须关注所有其他词元吗？ 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      为什么不只计算重要词元的注意力？ 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      如何决定哪些词元重要？ 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      如何以高效的方式处理少量词元？ 
    </section></li></ul><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">本文，我们将尝试回答这些问题。</p><span id="OSC_h3_2"></span><h3 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">应该关注哪些词元？</span><span style="display: none;"></span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">下面，我们将以句子 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird is now available in HuggingFace for extractive Question Answering</code> 为例来说明注意力是如何工作的。在 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BERT</code> 这类的注意力机制中，每个词元都简单粗暴地关注所有其他词元。从数学上来讲，这意味着每个查询的词元 <span style="cursor:pointer;"><span role="presentation" data-formula=" \text{query-token} \in {\text{BigBird},\text{is},\text{now},\text{available},\text{in},\text{HuggingFace},\text{for},\text{extractive},\text{question},\text{answering}} " data-formula-type="inline-equation" style=""><embed style="vertical-align: -0.466ex;width: 90.929ex;height: auto;" src="https://oscimg.oschina.net/oscnet/3cb299f5-0dd9-498e-b671-c2cc91093e23.svg" data-type="svg+xml" data-imgfileid="100005775"></span></span>, 将关注每个键词元 <span style="cursor:pointer;"><span role="presentation" data-formula="\text{key-tokens} = \left[\text{BigBird},\text{is},\text{now},\text{available},\text{in},\text{HuggingFace},\text{for},\text{extractive},\text{question},\text{answering} \right]" data-formula-type="inline-equation" style=""><embed style="vertical-align: -0.566ex;width: 91.185ex;height: auto;" src="https://oscimg.oschina.net/oscnet/f6bb45bf-4d15-409c-a819-d8e70016a46a.svg" data-type="svg+xml" data-imgfileid="100005777"></span></span>。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">我们考虑一下 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">每个查询词元应如何明智地选择它实际上应该关注的键词元</code> 这个问题，下面我们通过编写伪代码的方式来整理思考过程。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">假设 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">available</code> 是当前查询词元，我们来构建一个合理的、需要关注的键词元列表。</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;以下面的句子为例</span><br>example&nbsp;=&nbsp;[<span style="color: #d14;line-height: 26px;">'BigBird'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'is'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'now'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'available'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'in'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'HuggingFace'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'for'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'extractive'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'question'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'answering'</span>]<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;假设当前需要计算&nbsp;'available'&nbsp;这个词的表征</span><br>query_token&nbsp;=&nbsp;<span style="color: #d14;line-height: 26px;">'available'</span><br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;初始化一个空集合，用于放&nbsp;'available'&nbsp;这个词的键词元</span><br>key_tokens&nbsp;=&nbsp;[]&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;=&gt;&nbsp;目前，'available'&nbsp;词元不关注任何词元</span><br></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">邻近词元当然很重要，因为在一个句子 (单词序列) 中，当前词高度依赖于前后的邻近词。<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">滑动注意力</code> 即基于该直觉。</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;考虑滑动窗大小为&nbsp;3,&nbsp;即将&nbsp;'available'&nbsp;的左边一个词和右边一个词纳入考量</span><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;左词:&nbsp;'now';&nbsp;右词:&nbsp;'in'</span><br>sliding_tokens&nbsp;=&nbsp;[<span style="color: #d14;line-height: 26px;">"now"</span>,&nbsp;<span style="color: #d14;line-height: 26px;">"available"</span>,&nbsp;<span style="color: #d14;line-height: 26px;">"in"</span>]<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;用以上词元更新集合</span><br>key_tokens.append(sliding_tokens)<br></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">长程依赖关系:</strong> 对某些任务而言，捕获词元间的长程关系至关重要。 <em style="color: black;">例如</em> ，在问答类任务中，模型需要将上下文的每个词元与整个问题进行比较，以便能够找出上下文的哪一部分对正确答案有用。如果大多数上下文词元仅关注其他上下文词元，而不关注问题，那么模型从不太重要的上下文词元中过滤重要的上下文词元就会变得更加困难。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird</code> 提出了两种允许长程注意力依赖的方法，这两种方法都能保证计算效率。</p><ul data-tool="mdnice 编辑器" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;" class="list-paddingleft-1"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);"><strong style="color: black;">全局词元:</strong> 引入一些词元，这些词元将关注每个词元并且被每个词元关注。例如，对 
     <em style="color: black;">「HuggingFace is building nice libraries for easy NLP」</em> ，现在假设 
     <em style="color: black;">'building'</em> 被定义为全局词元，而对某些任务而言，模型需要知道 
     <em style="color: black;">'NLP'</em> 和 
     <em style="color: black;">'HuggingFace'</em> 之间的关系 (注意: 这 2 个词元位于句子的两端); 现在让 
     <em style="color: black;">'building'</em> 在全局范围内关注所有其他词元，会对模型将 
     <em style="color: black;">'NLP'</em> 与 
     <em style="color: black;">'HuggingFace'</em> 关联起来有帮助。 
    </section></li></ul><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;我们假设第一个和最后一个词元是全局的，则有:</span><br>global_tokens&nbsp;=&nbsp;[<span style="color: #d14;line-height: 26px;">"BigBird"</span>,&nbsp;<span style="color: #d14;line-height: 26px;">"answering"</span>]<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;将全局词元加入到集合中</span><br>key_tokens.append(global_tokens)<br></code></pre><ul data-tool="mdnice 编辑器" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;" class="list-paddingleft-1"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);"><strong style="color: black;">随机词元:</strong> 随机选择一些词元，这些词元将通过关注其他词元来传输信息，而那些词元又可以传输信息到其他词元。这可以降低直接从一个词元到另一个词元的信息传输成本。 
    </section></li></ul><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;现在，我们可以从句子中随机选择&nbsp;`r`&nbsp;个词元。这里，假设&nbsp;`r`&nbsp;为&nbsp;1，&nbsp;选择了&nbsp;`is`&nbsp;这个词元</span><br><span style="color: #999;font-weight: bold;line-height: 26px;">&gt;&gt;&gt;&nbsp;</span>random_tokens&nbsp;=&nbsp;[<span style="color: #d14;line-height: 26px;">"is"</span>]&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;注意:&nbsp;这个是完全随机选择的，因此可以是任意词元。</span><br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;将随机词元加入到集合中</span><br>key_tokens.append(random_tokens)<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;现在看下&nbsp;`key_tokens`&nbsp;集合中有哪些词元</span><br>key_tokens<br>{<span style="color: #d14;line-height: 26px;">'now'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'is'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'in'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'answering'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'available'</span>,&nbsp;<span style="color: #d14;line-height: 26px;">'BigBird'</span>}<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;至此，查询词&nbsp;'available'&nbsp;仅关注集合中的这些词元，而不用关心全部</span><br></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">这样，查询词元仅关注所有词元的一个子集，该子集能够产生完全注意力值的一个不错的近似。相同的方法将用于所有其他查询词元。但请记住，这里的重点是尽可能有效地接近 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BERT</code> 的完全注意力。BERT 那种简单地让每个查询词元关注所有键词元的做法可以建模为一系列矩阵乘法，从而在现代硬件 (如 GPU) 上进行高效计算。然而，滑动、全局和随机注意力的组合似乎意味着稀疏矩阵乘法，这在现代硬件上很难高效实现。<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird</code> 的主要贡献之一是提出了 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">块稀疏</code> 注意力机制，该机制可以高效计算滑动、全局和随机注意力。我们来看看吧！</p><span id="OSC_h3_3"></span><h3 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">图解全局、滑动、随机注意力的概念</span><span style="display: none;"></span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">首先，我们借助图来帮助理解「全局」、「滑动」和「随机」注意力，并尝试理解这三种注意力机制的组合是如何较好地近似标准 BERT 类注意力的。</p><table data-tool="mdnice 编辑器"><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><img data-imgfileid="100005778" data-ratio="0.9522058823529411" data-type="png" data-w="544" height="250" style="margin-right: auto;margin-left: auto;width: 100%;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" width="250" src="https://oscimg.oschina.net/oscnet/48d8f357-e08b-47a7-8590-a79741e9940f.png" referrerpolicy="no-referrer"></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><img class="rich_pages wxw-img" data-imgfileid="100005780" data-ratio="0.9522058823529411" data-type="png" data-w="544" height="250" style="margin-right: auto;margin-left: auto;width: 100%;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" width="250" src="https://oscimg.oschina.net/oscnet/bf44ee17-227a-4bd2-8deb-ab00f6efbfa8.png" referrerpolicy="no-referrer"></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><img data-imgfileid="100005781" data-ratio="0.9522058823529411" data-type="png" data-w="544" height="250" style="margin-right: auto;margin-left: auto;width: 100%;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" width="250" src="https://oscimg.oschina.net/oscnet/5556aef1-ce3e-41a8-b40c-fcb78b4139d8.png" referrerpolicy="no-referrer"></td></tr></tbody></table><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><em style="color: black;">上图分别把「全局」(左) 、「滑动」(中) 和「随机」(右) 连接建模成一个图。每个节点对应一个词元，每条边代表一个注意力分数。如果 2 个词元之间没有边连接，则其注意力分数为 0。</em></p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005782" data-ratio="0.535" data-type="gif" data-w="600" style="margin-right: auto;margin-left: auto;width: 409px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/b059422c-eedb-4881-8ea4-75aebc73bb2d.gif" referrerpolicy="no-referrer"></figure><img class="rich_pages wxw-img" data-imgfileid="100005779" data-ratio="0.9522058823529411" data-type="png" data-w="544" height="230" style="margin-right: auto;margin-left: auto;width: 385px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" width="230" src="https://oscimg.oschina.net/oscnet/d3b084c5-9bf4-4c47-a5e7-72edb7d1eb53.png" referrerpolicy="no-referrer"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">BigBird 块稀疏注意力</strong> 是滑动连接、全局连接和随机连接 (总共 10 个连接) 的组合，如上图左侧动图所示。而 <strong style="color: black;">完全注意力</strong> 图 (右侧) 则是有全部 15 个连接 (注意: 总共有 6 个节点)。你可以简单地将完全注意力视为所有词元都是全局词元 <span style="cursor:pointer;"><span role="presentation" data-formula="{}^1" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -833.9 403.6 833.9" aria-hidden="true" style="vertical-align: 0px;width: 0.913ex;height: 1.887ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"></g><g data-mml-node="mn" transform="translate(0, 363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></span></span>。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">完全注意力:</strong> 模型可以直接在单个层中将信息从一个词元传输到另一个词元，因为每个词元都会对每个其他词元进行查询，并且受到其他每个词元的关注。我们考虑一个与上图类似的例子，如果模型需要将 <em style="color: black;">'going'</em> 与 <em style="color: black;">'now'</em> 关联起来，它可以简单地在单层中执行此操作，因为它们两个是有直接连接的。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">块稀疏注意力:</strong> 如果模型需要在两个节点 (或词元) 之间共享信息，则对于某些词元，信息将必须经过路径中的各个其他节点; 因为不是所有节点都有直接连接的。<em style="color: black;">例如</em> ，假设模型需要将 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">going</code> 与 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">now</code> 关联起来，那么如果仅存在滑动注意力，则这两个词元之间的信息流由路径 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">going -&gt; am -&gt; i -&gt; now</code> 来定义，也就是说它必须经过 2 个其他词元。因此，我们可能需要多个层来捕获序列的全部信息，而正常的注意力可以在单层中捕捉到这一点。在极端情况下，这可能意味着需要与输入词元一样多的层。然而，如果我们引入一些全局词元，信息可以通过以下路径传播 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">going -&gt; i -&gt; now</code> ，这可以帮助缩短路径。如果我们再另外引入随机连接，它就可以通过 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">going -&gt; am -&gt; now</code> 传播。借助随机连接和全局连接，信息可以非常快速地 (只需几层) 从一个词元传输到下一个词元。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">如果我们有很多全局词元，那么我们可能不需要随机连接，因为信息可以通过多个短路径传播。这就是在使用 BigBird 的变体 (称为 ETC) 时设置 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">num_random_tokens = 0</code> 的动机 (稍后部分将会详细介绍)。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><span style="cursor:pointer;"><span role="presentation" data-formula="{}^1" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -833.9 403.6 833.9" aria-hidden="true" style="vertical-align: 0px;width: 0.913ex;height: 1.887ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"></g><g data-mml-node="mn" transform="translate(0, 363) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></span></span> 在这些图中，我们假设注意力矩阵是对称的 <strong style="color: black;">即</strong><span style="cursor:pointer;"><span role="presentation" data-formula="\mathbf{A} _{ij} = \mathbf{A}_ {ji}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -698 4242.1 992.2" aria-hidden="true" style="vertical-align: -0.666ex;width: 9.598ex;height: 2.245ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="41" d="M296 0Q278 3 164 3Q58 3 49 0H40V62H92Q144 62 144 64Q388 682 397 689Q403 698 434 698Q463 698 471 689Q475 686 538 530T663 218L724 64Q724 62 776 62H828V0H817Q796 3 658 3Q509 3 485 0H472V62H517Q561 62 561 63L517 175H262L240 120Q218 65 217 64Q217 62 261 62H306V0H296ZM390 237L492 238L440 365Q390 491 388 491Q287 239 287 237H390Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(869, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(345, 0)"><path data-c="6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1732.1, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2787.8, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="41" d="M296 0Q278 3 164 3Q58 3 49 0H40V62H92Q144 62 144 64Q388 682 397 689Q403 698 434 698Q463 698 471 689Q475 686 538 530T663 218L724 64Q724 62 776 62H828V0H817Q796 3 658 3Q509 3 485 0H472V62H517Q561 62 561 63L517 175H262L240 120Q218 65 217 64Q217 62 261 62H306V0H296ZM390 237L492 238L440 365Q390 491 388 491Q287 239 287 237H390Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(869, -150) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6A" d="M297 596Q297 627 318 644T361 661Q378 661 389 651T403 623Q403 595 384 576T340 557Q322 557 310 567T297 596ZM288 376Q288 405 262 405Q240 405 220 393T185 362T161 325T144 293L137 279Q135 278 121 278H107Q101 284 101 286T105 299Q126 348 164 391T252 441Q253 441 260 441T272 442Q296 441 316 432Q341 418 354 401T367 348V332L318 133Q267 -67 264 -75Q246 -125 194 -164T75 -204Q25 -204 7 -183T-12 -137Q-12 -110 7 -91T53 -71Q70 -71 82 -81T95 -112Q95 -148 63 -167Q69 -168 77 -168Q111 -168 139 -140T182 -74L193 -32Q204 11 219 72T251 197T278 308T289 365Q289 372 288 376Z"></path></g><g data-mml-node="mi" transform="translate(412, 0)"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></span></span> 因为在图中如果某个词元 <strong style="color: black;">A</strong> 关注 <strong style="color: black;">B</strong>，那么 <strong style="color: black;">B</strong> 也会关注 <strong style="color: black;">A</strong>。从下一节所示的注意力矩阵图中可以看出，这个假设对于 BigBird 中的大多数词元都成立。</p><section data-tool="mdnice 编辑器" style="overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">注意力类型</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">全局次元</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">滑动词元</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">随机词元</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">原始完全注意力</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><code>n</code></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">0</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">0</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">块稀疏注意力</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">2 x <code>block_size</code></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">3 x <code>block_size</code></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><code>num_random_blocks</code> x <code>block_size</code></td></tr></tbody></table></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">原始完全注意力即 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BERT</code> 的注意力，而块稀疏注意力则是 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBird</code> 的注意力。想知道 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">block_size</code> 是什么？请继续阅读下文。_现在，为简单起见，将其视为 1。_</p><span id="OSC_h2_4"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">BigBird 块稀疏注意力</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">BigBird 块稀疏注意力是我们上文讨论的内容的高效实现。每个词元都关注某些 <strong style="color: black;">全局词元</strong> 、 <strong style="color: black;">滑动词元</strong> 和 <strong style="color: black;">随机词元</strong>，而不管其他 <strong style="color: black;">所有</strong> 词元。作者分别实现了每类查询注意力矩阵，并使用了一个很酷的技巧来加速 GPU 和 TPU 上的训练/推理。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005786" data-ratio="0.6129629629629629" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;width: 543px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/f653f75a-ff61-452b-b0b1-aedeab166e25.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><em style="color: black;">注意: 在上图的顶部有 2 个额外的句子。正如你所注意到的，两个句子中的每个词元都只是交换了一个位置。这就是滑动注意力的实现方式。当 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">q[i]</code> 与 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">k[i,0:3]</code> 相乘时，我们会得到 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">q[i]</code> 的滑动注意力分数 (其中<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">i</code> 是序列中元素的索引)。</em></p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">你可以在，这儿，找到 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">block_sparse</code> 注意力的具体实现。现在看起来可能非常可怕😨😨，但这篇文章肯定会让你轻松理解它。</p><span id="OSC_h3_5"></span><h3 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">全局注意力</span><span style="display: none;"></span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">对于全局注意力而言，每个查询词元关注序列中的所有其他词元，并且被其他每个词元关注。我们假设 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">Vasudev</code> (第一个词元) 和 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">them</code> (最后一个词元) 是全局的 (如上图所示)。你可以看到这些词元直接连接到所有其他词元 (蓝色框)。</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;伪代码</span><br><br>Q&nbsp;-&gt;&nbsp;Query&nbsp;martix&nbsp;(seq_length,&nbsp;head_dim)<br>K&nbsp;-&gt;&nbsp;Key&nbsp;matrix&nbsp;(seq_length,&nbsp;head_dim)<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;第一个和最后一个词元关注所有其他词元</span><br>Q[<span style="color: #008080;line-height: 26px;">0</span>]&nbsp;x&nbsp;[K[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;K[n<span style="color: #008080;line-height: 26px;">-1</span>]]<br>Q[n<span style="color: #008080;line-height: 26px;">-1</span>]&nbsp;x&nbsp;[K[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;K[n<span style="color: #008080;line-height: 26px;">-1</span>]]<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;第一个和最后一个词元也被其他所有词元关注</span><br>K[<span style="color: #008080;line-height: 26px;">0</span>]&nbsp;x&nbsp;[Q[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;Q[n<span style="color: #008080;line-height: 26px;">-1</span>]]<br>K[n<span style="color: #008080;line-height: 26px;">-1</span>]&nbsp;x&nbsp;[Q[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;Q[n<span style="color: #008080;line-height: 26px;">-1</span>]]<br></code></pre><span id="OSC_h3_6"></span><h3 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">滑动注意力</span><span style="display: none;"></span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">键词元序列被复制两次，其中一份每个词元向右移动一步，另一份每个词元向左移动一步。现在，如果我们将查询序列向量乘以这 3 个序列向量，我们将覆盖所有滑动词元。计算复杂度就是 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">O(3n) = O(n)</code> 。参考上图，橙色框代表滑动注意力。你可以在图的顶部看到 3 个序列，其中 2 个序列各移动了一个词元 (1 个向左，1 个向右)。</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;我们想做的</span><br>Q[i]&nbsp;x&nbsp;[K[i<span style="color: #008080;line-height: 26px;">-1</span>],&nbsp;K[i],&nbsp;K[i+<span style="color: #008080;line-height: 26px;">1</span>]]&nbsp;<span style="font-weight: bold;line-height: 26px;">for</span>&nbsp;i&nbsp;=&nbsp;<span style="color: #008080;line-height: 26px;">1</span>:<span style="color: #008080;line-height: 26px;">-1</span><br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;高效的代码实现&nbsp;(👇&nbsp;乘法为点乘)</span><br>[Q[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;Q[n<span style="color: #008080;line-height: 26px;">-2</span>],&nbsp;Q[n<span style="color: #008080;line-height: 26px;">-1</span>]]&nbsp;x&nbsp;[K[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">3</span>],&nbsp;......,&nbsp;K[n<span style="color: #008080;line-height: 26px;">-1</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">0</span>]]<br>[Q[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;Q[n<span style="color: #008080;line-height: 26px;">-1</span>]]&nbsp;x&nbsp;[K[n<span style="color: #008080;line-height: 26px;">-1</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;......,&nbsp;K[n<span style="color: #008080;line-height: 26px;">-2</span>]]<br>[Q[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;Q[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;Q[n<span style="color: #008080;line-height: 26px;">-1</span>]]&nbsp;x&nbsp;[K[<span style="color: #008080;line-height: 26px;">0</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">1</span>],&nbsp;K[<span style="color: #008080;line-height: 26px;">2</span>],&nbsp;......,&nbsp;K[n<span style="color: #008080;line-height: 26px;">-1</span>]]<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;每个序列被乘&nbsp;3&nbsp;词，&nbsp;即&nbsp;`window_size&nbsp;=&nbsp;3`。为示意，仅列出主要计算，省略了一些计算。</span><br></code></pre><span id="OSC_h3_7"></span><h3 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">随机注意力</span><span style="display: none;"></span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">随机注意力确保每个查询词元也会关注一些随机词元。对实现而言，这意味着模型随机选取一些词元并计算它们的注意力分数。</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;r1,&nbsp;r2,&nbsp;r&nbsp;为随机索引;&nbsp;注意&nbsp;r1,&nbsp;r2,&nbsp;r&nbsp;每行取值不同&nbsp;👇</span><br>Q[<span style="color: #008080;line-height: 26px;">1</span>]&nbsp;x&nbsp;[Q[r1],&nbsp;Q[r2],&nbsp;......,&nbsp;Q[r]]<br>.<br>.<br>.<br>Q[n<span style="color: #008080;line-height: 26px;">-2</span>]&nbsp;x&nbsp;[Q[r1],&nbsp;Q[r2],&nbsp;......,&nbsp;Q[r]]<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;不用管第&nbsp;0&nbsp;个和第&nbsp;n-1&nbsp;个词元，因为它们已经是全局词元了。</span><br></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">注意:</strong> 当前的实现进一步将序列划分为块，并且每个符号都依块而定义而非依词元而定义。我们在下一节中会更详细地讨论这个问题。</p><span id="OSC_h3_8"></span><h3 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 20px;line-height: 1.4;padding-top: 10px;margin-top: 10px;margin-bottom: 5px;"><span style="display: none;"></span><span style="color: rgb(81, 81, 81);font-size: 17px;padding-left: 1em;border-left: 3px solid rgb(249, 191, 69);">实现</span><span style="display: none;"></span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">回顾:</strong> 在常规 BERT 注意力中，一系列词元，即 <span style="cursor:pointer;"><span role="presentation" data-formula="X = x_1, x_2, …., x_n" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -683 8300.3 877" aria-hidden="true" style="vertical-align: -0.439ex;width: 18.779ex;height: 1.984ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="58" d="M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z"></path></g><g data-mml-node="mo" transform="translate(1129.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2185.6, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3161.1, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3605.8, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mn" transform="translate(572, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4581.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mo" transform="translate(5026, 0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6364.7, 0)"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mo" transform="translate(6809.3, 0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(7254, 0)"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mi" transform="translate(572, -150) scale(0.707)"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></span></span> 通过线性层投影到 <span style="cursor:pointer;"><span role="presentation" data-formula="Q，K，V" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -750 5234.7 950" aria-hidden="true" style="vertical-align: -0.452ex;width: 11.843ex;height: 2.149ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="51" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="mo" transform="translate(1068.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           ， 
         </text></g><g data-mml-node="mi" transform="translate(2183.9, 0)"><path data-c="4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mo" transform="translate(3350.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           ， 
         </text></g><g data-mml-node="mi" transform="translate(4465.7, 0)"><path data-c="56" d="M52 648Q52 670 65 683H76Q118 680 181 680Q299 680 320 683H330Q336 677 336 674T334 656Q329 641 325 637H304Q282 635 274 635Q245 630 242 620Q242 618 271 369T301 118L374 235Q447 352 520 471T595 594Q599 601 599 609Q599 633 555 637Q537 637 537 648Q537 649 539 661Q542 675 545 679T558 683Q560 683 570 683T604 682T668 681Q737 681 755 683H762Q769 676 769 672Q769 655 760 640Q757 637 743 637Q730 636 719 635T698 630T682 623T670 615T660 608T652 599T645 592L452 282Q272 -9 266 -16Q263 -18 259 -21L241 -22H234Q216 -22 216 -15Q213 -9 177 305Q139 623 138 626Q133 637 76 637H59Q52 642 52 648Z"></path></g></g></g></svg></span></span>，并基于它们计算注意力分数 <span style="cursor:pointer;"><span role="presentation" data-formula="Z" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -683 723 683" aria-hidden="true" style="vertical-align: 0px;width: 1.636ex;height: 1.545ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="5A" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g></g></g></svg></span></span>，公式为 <span style="cursor:pointer;"><span role="presentation" data-formula="Z=Softmax(QK^T)" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -841.7 9140.4 1091.7" aria-hidden="true" style="vertical-align: -0.566ex;width: 20.68ex;height: 2.47ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="5A" d="M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z"></path></g><g data-mml-node="mo" transform="translate(1000.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2056.6, 0)"><path data-c="53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(2701.6, 0)"><path data-c="6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3186.6, 0)"><path data-c="66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(3736.6, 0)"><path data-c="74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(4097.6, 0)"><path data-c="6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4975.6, 0)"><path data-c="61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5504.6, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6076.6, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6465.6, 0)"><path data-c="51" d="M399 -80Q399 -47 400 -30T402 -11V-7L387 -11Q341 -22 303 -22Q208 -22 138 35T51 201Q50 209 50 244Q50 346 98 438T227 601Q351 704 476 704Q514 704 524 703Q621 689 680 617T740 435Q740 255 592 107Q529 47 461 16L444 8V3Q444 2 449 -24T470 -66T516 -82Q551 -82 583 -60T625 -3Q631 11 638 11Q647 11 649 2Q649 -6 639 -34T611 -100T557 -165T481 -194Q399 -194 399 -87V-80ZM636 468Q636 523 621 564T580 625T530 655T477 665Q429 665 379 640Q277 591 215 464T153 216Q153 110 207 59Q231 38 236 38V46Q236 86 269 120T347 155Q372 155 390 144T417 114T429 82T435 55L448 64Q512 108 557 185T619 334T636 468ZM314 18Q362 18 404 39L403 49Q399 104 366 115Q354 117 347 117Q344 117 341 117T337 118Q317 118 296 98T274 52Q274 18 314 18Z"></path></g><g data-mml-node="msup" transform="translate(7256.6, 0)"><g data-mml-node="mi"><path data-c="4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(947, 363) scale(0.707)"><path data-c="54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(8751.4, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></span></span>。使用 BigBird 块稀疏注意力时，我们使用相同的算法，但仅针对一些选定的查询和键向量进行计算。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">我们来看看 BigBird 块稀疏注意力是如何实现的。首先，我们用 <span style="cursor:pointer;"><span role="presentation" data-formula="b、r、s、g" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -750 6004.6 955" aria-hidden="true" style="vertical-align: -0.464ex;width: 13.585ex;height: 2.161ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(706.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="mi" transform="translate(1821.9, 0)"><path data-c="72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2550.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="mi" transform="translate(3665.7, 0)"><path data-c="73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(4412.5, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="mi" transform="translate(5527.6, 0)"><path data-c="67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></span></span> 分别代表 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">block_size</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">num_random_blocks</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">num_sliding_blocks</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">num_global_blocks</code> 。我们以 <span style="cursor:pointer;"><span role="presentation" data-formula="b=4，r=1，g=2，s=3，d=5" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -750 17085.2 955" aria-hidden="true" style="vertical-align: -0.464ex;width: 38.654ex;height: 2.161ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="62" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(706.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1762.6, 0)"><path data-c="34" d="M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z"></path></g><g data-mml-node="mo" transform="translate(2540.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           ， 
         </text></g><g data-mml-node="mi" transform="translate(3655.4, 0)"><path data-c="72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(4384.2, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(5440, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(6217.7, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           ， 
         </text></g><g data-mml-node="mi" transform="translate(7332.8, 0)"><path data-c="67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(8087.6, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(9143.4, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mo" transform="translate(9921.2, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           ， 
         </text></g><g data-mml-node="mi" transform="translate(11036.2, 0)"><path data-c="73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(11783, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(12838.8, 0)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(13616.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           ， 
         </text></g><g data-mml-node="mi" transform="translate(14731.6, 0)"><path data-c="64" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mo" transform="translate(15529.4, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(16585.2, 0)"><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z"></path></g></g></g></svg></span></span> 为例来说明 BigBird 块稀疏注意力的机制部分，如下所示:</p><img class="rich_pages wxw-img" data-imgfileid="100005784" data-ratio="0.47685185185185186" data-type="png" data-w="1080" height="250" style="margin-right: auto;margin-left: auto;width: 454px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" width="500" src="https://oscimg.oschina.net/oscnet/fab7065d-9994-4720-bcaf-b18128043c8e.png" referrerpolicy="no-referrer"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><span style="cursor:pointer;"><span role="presentation" data-formula="{q} _{1}、{q}_ {2}、{q} _{3:n-2}、{q}_ {n-1}、{q}_{n}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -750 12388.8 1037.3" aria-hidden="true" style="vertical-align: -0.65ex;width: 28.029ex;height: 2.347ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(1127.3, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="msub" transform="translate(2242.4, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(3369.7, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="msub" transform="translate(4484.8, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1378, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2156, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g><g data-mml-node="mo" transform="translate(7136.7, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="msub" transform="translate(8251.8, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(10353.5, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
           、 
         </text></g><g data-mml-node="msub" transform="translate(11468.6, 0)"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></span></span> 的注意力分数分别计算如下:</p><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><span style="cursor:pointer;"><span role="presentation" data-formula="\mathbf{q}_{1}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -450 1010.6 679.4" aria-hidden="true" style="vertical-align: -0.519ex;width: 2.286ex;height: 1.537ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M38 220Q38 273 54 314T95 380T152 421T211 443T264 449Q368 449 429 386L438 377L484 450H540V-132H609V-194H600Q582 -191 475 -191Q360 -191 351 -194H342V-132H411V42Q409 41 399 34T383 25T367 16T347 7T324 1T296 -4T264 -6Q162 -6 100 56T38 220ZM287 46Q368 46 417 127V301L412 312Q398 347 369 371T302 395Q282 395 263 388T225 362T194 308T182 221Q182 126 214 86T287 46Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(607, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></span></span> 的注意力分数由 <span style="cursor:pointer;"><span role="presentation" data-formula="a_1" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -441 932.6 591" aria-hidden="true" style="vertical-align: -0.339ex;width: 2.11ex;height: 1.337ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></span></span> 表示，其中 <span style="cursor:pointer;"><span role="presentation" data-formula="a_1=Softmax(q_1 * K^T)" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -841.7 10352.9 1091.7" aria-hidden="true" style="vertical-align: -0.566ex;width: 23.423ex;height: 2.47ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mn" transform="translate(529, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1210.3, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(2266.1, 0)"><path data-c="53" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(2911.1, 0)"><path data-c="6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(3396.1, 0)"><path data-c="66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(3946.1, 0)"><path data-c="74" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g><g data-mml-node="mi" transform="translate(4307.1, 0)"><path data-c="6D" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5185.1, 0)"><path data-c="61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(5714.1, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6286.1, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="msub" transform="translate(6675.1, 0)"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(446, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(7746.9, 0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="msup" transform="translate(8469.1, 0)"><g data-mml-node="mi"><path data-c="4B" d="M285 628Q285 635 228 637Q205 637 198 638T191 647Q191 649 193 661Q199 681 203 682Q205 683 214 683H219Q260 681 355 681Q389 681 418 681T463 682T483 682Q500 682 500 674Q500 669 497 660Q496 658 496 654T495 648T493 644T490 641T486 639T479 638T470 637T456 637Q416 636 405 634T387 623L306 305Q307 305 490 449T678 597Q692 611 692 620Q692 635 667 637Q651 637 651 648Q651 650 654 662T659 677Q662 682 676 682Q680 682 711 681T791 680Q814 680 839 681T869 682Q889 682 889 672Q889 650 881 642Q878 637 862 637Q787 632 726 586Q710 576 656 534T556 455L509 418L518 396Q527 374 546 329T581 244Q656 67 661 61Q663 59 666 57Q680 47 717 46H738Q744 38 744 37T741 19Q737 6 731 0H720Q680 3 625 3Q503 3 488 0H478Q472 6 472 9T474 27Q478 40 480 43T491 46H494Q544 46 544 71Q544 75 517 141T485 216L427 354L359 301L291 248L268 155Q245 63 245 58Q245 51 253 49T303 46H334Q340 37 340 35Q340 19 333 5Q328 0 317 0Q314 0 280 1T180 2Q118 2 85 2T49 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q147 65 216 339T285 628Z"></path></g><g data-mml-node="mi" transform="translate(947, 363) scale(0.707)"><path data-c="54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g></g><g data-mml-node="mo" transform="translate(9963.9, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></span></span>，即为第一块中的所有词元与序列中的所有其他词元之间的注意力分数。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005785" data-ratio="0.18981481481481483" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;width: 540px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/e529cce5-c61b-4f5b-aead-50797118edfa.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><span style="cursor:pointer;"><span role="presentation" data-formula="q_1" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 849.6 636" aria-hidden="true" style="vertical-align: -0.439ex;width: 1.922ex;height: 1.439ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(446, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></span></span> 表示第 1 块，<span style="cursor:pointer;"><span role="presentation" data-formula="g_i" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 771 647" aria-hidden="true" style="vertical-align: -0.464ex;width: 1.744ex;height: 1.464ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(477, -150) scale(0.707)"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></span></span> 表示第 <span style="cursor:pointer;"><span role="presentation" data-formula="i" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -661 345 672" aria-hidden="true" style="vertical-align: -0.025ex;width: 0.781ex;height: 1.52ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></svg></span></span> 块。我们仅在 <span style="cursor:pointer;"><span role="presentation" data-formula="q_1" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 849.6 636" aria-hidden="true" style="vertical-align: -0.439ex;width: 1.922ex;height: 1.439ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(446, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></span></span> 和 &nbsp;<span style="cursor:pointer;"><span role="presentation" data-formula="g" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 477 647" aria-hidden="true" style="vertical-align: -0.464ex;width: 1.079ex;height: 1.464ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g></g></g></svg></span></span> (即所有键) 之间执行正常的注意力操作。</p><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">为了计算第二块中词元的注意力分数，我们收集前三块、最后一块和第五块。然后我们可以计算 <span style="cursor:pointer;"><span role="presentation" data-formula="a_2 = Softmax(q_2 * concat(k_1, k_2, k_3, k_5, k_7))" data-formula-type="inline-equation" style=""><embed style="vertical-align: -0.566ex;width: 42.712ex;height: auto;" src="https://oscimg.oschina.net/oscnet/63e34c61-946b-4bd4-bdd2-31f707091583.svg" data-type="svg+xml" data-imgfileid="100005776"></span></span>。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005783" data-ratio="0.2101851851851852" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;width: 546px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/9bbea6fc-3f75-40d4-ba61-d47c6ec63c69.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><em style="color: black;">这里，我用 <span style="cursor:pointer;"><span role="presentation" data-formula="g，r，s" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -750 4182.7 955" aria-hidden="true" style="vertical-align: -0.464ex;width: 9.463ex;height: 2.161ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="67" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mo" transform="translate(754.8, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
            ， 
          </text></g><g data-mml-node="mi" transform="translate(1869.9, 0)"><path data-c="72" d="M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(2598.6, 0)"><text data-variant="normal" transform="matrix(1 0 0 -1 0 0)" font-size="836.9px" font-family="serif">
            ， 
          </text></g><g data-mml-node="mi" transform="translate(3713.7, 0)"><path data-c="73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g></g></g></svg></span></span> 表示词元只是为了明确地表示它们的性质 (即是全局、随机还是滑动词元)，只用 <span style="cursor:pointer;"><span role="presentation" data-formula="k" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -694 521 705" aria-hidden="true" style="vertical-align: -0.025ex;width: 1.179ex;height: 1.595ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6B" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g></g></g></svg></span></span> 无法表示他们各自的性质。</em></p><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">为了计算 <span style="cursor:pointer;"><span role="presentation" data-formula="{q} _{3:n-2}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 2374.1 729.3" aria-hidden="true" style="vertical-align: -0.65ex;width: 5.371ex;height: 1.65ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1378, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2156, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></span></span> 的注意力分数，我们先收集相应的全局、滑动、随机键向量，并基于它们正常计算 <span style="cursor:pointer;"><span role="presentation" data-formula="{q}_ {3:n-2}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 2374.1 729.3" aria-hidden="true" style="vertical-align: -0.65ex;width: 5.371ex;height: 1.65ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g><g data-mml-node="mo" transform="translate(500, 0)"><path data-c="3A" d="M78 370Q78 394 95 412T138 430Q162 430 180 414T199 371Q199 346 182 328T139 310T96 327T78 370ZM78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(778, 0)"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(1378, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(2156, 0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></span></span> 上的注意力。请注意，正如前面滑动注意力部分所讨论的，滑动键是使用特殊的移位技巧来收集的。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005787" data-ratio="0.1925925925925926" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;width: 518px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/d6d57300-3e72-471f-8996-bc71b71674d8.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">为了计算倒数第二块 (即 <span style="cursor:pointer;"><span role="presentation" data-formula="{q} _{n-1}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 1823.9 729.3" aria-hidden="true" style="vertical-align: -0.65ex;width: 4.127ex;height: 1.65ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(446, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(600, 0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1378, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></g></svg></span></span>) 中词元的注意力分数，我们收集第一块、最后三块和第三块的键向量。然后我们用公式 <span style="cursor:pointer;"><span role="presentation" data-formula="{a}_ {n-1} = Softmax({q}_{n-1} * concat(k_1, k_3, k_5, k_6, k_7))" data-formula-type="inline-equation" style=""><embed style="vertical-align: -0.65ex;width: 47.121ex;height: auto;" src="https://oscimg.oschina.net/oscnet/7d3fe6d1-79cd-4a4f-9b73-e294300d9bb5.svg" data-type="svg+xml" data-imgfileid="100005774"></span></span> 进行计算。这和计算 <span style="cursor:pointer;"><span role="presentation" data-formula="q_2" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 849.6 636" aria-hidden="true" style="vertical-align: -0.439ex;width: 1.922ex;height: 1.439ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(446, -150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></span></span> 非常相似。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005790" data-ratio="0.21481481481481482" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;width: 545px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/807b8c9a-d09f-438b-90a6-3fa86c3ded16.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">最后一块 <span style="cursor:pointer;"><span role="presentation" data-formula="\mathbf{q}_{n}" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -450 1081.3 687.1" aria-hidden="true" style="vertical-align: -0.537ex;width: 2.446ex;height: 1.555ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="71" d="M38 220Q38 273 54 314T95 380T152 421T211 443T264 449Q368 449 429 386L438 377L484 450H540V-132H609V-194H600Q582 -191 475 -191Q360 -191 351 -194H342V-132H411V42Q409 41 399 34T383 25T367 16T347 7T324 1T296 -4T264 -6Q162 -6 100 56T38 220ZM287 46Q368 46 417 127V301L412 312Q398 347 369 371T302 395Q282 395 263 388T225 362T194 308T182 221Q182 126 214 86T287 46Z"></path></g></g><g data-mml-node="TeXAtom" transform="translate(607, -229.4) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></g></svg></span></span> 的注意力分数由 <span style="cursor:pointer;"><span role="presentation" data-formula="a_n" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -441 1003.3 598.8" aria-hidden="true" style="vertical-align: -0.357ex;width: 2.27ex;height: 1.355ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="61" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529, -150) scale(0.707)"><path data-c="6E" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></span></span> 表示，其中 <span style="cursor:pointer;"><span role="presentation" data-formula="a_n=Softmax(q_n * K^T)" data-formula-type="inline-equation" style=""><embed style="vertical-align: -0.566ex;width: 23.743ex;height: auto;" src="https://oscimg.oschina.net/oscnet/6681adae-1d7d-47f4-bece-c7a7198818a9.svg" data-type="svg+xml" data-imgfileid="100005773"></span></span>，只不过是最后一块中的所有词元与序列中的所有其他词元之间的注意力分数。这与我们对 <span style="cursor:pointer;"><span role="presentation" data-formula="q_1" data-formula-type="inline-equation" style=""><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -442 849.6 636" aria-hidden="true" style="vertical-align: -0.439ex;width: 1.922ex;height: 1.439ex;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="71" d="M33 157Q33 258 109 349T280 441Q340 441 372 389Q373 390 377 395T388 406T404 418Q438 442 450 442Q454 442 457 439T460 434Q460 425 391 149Q320 -135 320 -139Q320 -147 365 -148H390Q396 -156 396 -157T393 -175Q389 -188 383 -194H370Q339 -192 262 -192Q234 -192 211 -192T174 -192T157 -193Q143 -193 143 -185Q143 -182 145 -170Q149 -154 152 -151T172 -148Q220 -148 230 -141Q238 -136 258 -53T279 32Q279 33 272 29Q224 -10 172 -10Q117 -10 75 30T33 157ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mn" transform="translate(446, -150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g></g></svg></span></span> 所做的非常相似。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005789" data-ratio="0.1925925925925926" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;width: 539px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1e5c321a-8a47-4f4d-8c68-c55f68e0ba07.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">我们将上面的矩阵组合起来得到最终的注意力矩阵。该注意力矩阵可用于获取所有词元的表征。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100005791" data-ratio="0.6916666666666667" data-type="gif" data-w="600" style="margin-right: auto;margin-left: auto;width: 537px;border-radius: 5px;display: block;margin-bottom: 15px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/d02815bd-44c4-4a61-94f0-f8c6e767b059.gif" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: #dda52d;font-size: 14px;">
     BigBird 块稀疏注意力 
   </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><em style="color: black;">上图中 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">蓝色 -&gt; 全局块</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">红色 -&gt; 随机块</code> 、<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">橙色 -&gt; 滑动块</code> 。在前向传播过程中，我们不存储「白色」块，而是直接为每个单独的部分计算加权值矩阵 (即每个词元的表示)，如上所述。</em></p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">现在，我们已经介绍了块稀疏注意力最难的部分，即它的实现。希望对你更好地理解实际代码有帮助。现在你可以深入研究代码了，在此过程中你可以将代码的每个部分与上面的某个部分联系起来以助于理解。</p><span id="OSC_h2_9"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">时间和内存复杂度</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><section data-tool="mdnice 编辑器" style="overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">注意力类型</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">序列长度</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">时间和内存复杂度</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">原始完全注意力</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">512</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><code>T</code></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><br></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">1024</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4 x <code>T</code></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><br></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4096</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">64 x <code>T</code></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">块稀疏注意力</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">1024</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">2 x <code>T</code></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><br></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4096</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">8 x <code>T</code></td></tr></tbody></table></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><em style="color: black;">BERT 注意力和 BigBird 块稀疏注意力的时间和空间复杂度之比较。</em></p><summary>展开以了解复杂度的计算过程。</summary><pre style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;">BigBird&nbsp;时间复杂度&nbsp;=&nbsp;O(w&nbsp;x&nbsp;n&nbsp;+&nbsp;r&nbsp;x&nbsp;n&nbsp;+&nbsp;g&nbsp;x&nbsp;n)<br>BERT&nbsp;时间复杂度&nbsp;=&nbsp;O(n^2)<br><br>假设:<br><span style="line-height: 26px;">&nbsp;&nbsp;&nbsp;&nbsp;w&nbsp;=&nbsp;3&nbsp;x&nbsp;64</span><br><span style="line-height: 26px;">&nbsp;&nbsp;&nbsp;&nbsp;r&nbsp;=&nbsp;3&nbsp;x&nbsp;64</span><br><span style="line-height: 26px;">&nbsp;&nbsp;&nbsp;&nbsp;g&nbsp;=&nbsp;2&nbsp;x&nbsp;64</span><br><br>当序列长度为&nbsp;512&nbsp;时<br>=&gt;&nbsp;<span style="font-weight: bold;line-height: 26px;">**BERT&nbsp;时间复杂度&nbsp;=&nbsp;512^2**</span><br><br>当序列长度为&nbsp;1024&nbsp;时<br>=&gt;&nbsp;BERT&nbsp;时间复杂度&nbsp;=&nbsp;(2&nbsp;x&nbsp;512)^2<br>=&gt;&nbsp;<span style="font-weight: bold;line-height: 26px;">**BERT&nbsp;时间复杂度&nbsp;=&nbsp;4&nbsp;x&nbsp;512^2**</span><br><br>=&gt;&nbsp;BigBird&nbsp;时间复杂度&nbsp;=&nbsp;(8&nbsp;x&nbsp;64)&nbsp;x&nbsp;(2&nbsp;x&nbsp;512)<br>=&gt;&nbsp;<span style="font-weight: bold;line-height: 26px;">**BigBird&nbsp;时间复杂度&nbsp;=&nbsp;2&nbsp;x&nbsp;512^2**</span><br><br>当序列长度为&nbsp;4096&nbsp;时<br>=&gt;&nbsp;BERT&nbsp;时间复杂度&nbsp;=&nbsp;(8&nbsp;x&nbsp;512)^2<br>=&gt;&nbsp;<span style="font-weight: bold;line-height: 26px;">**BERT&nbsp;时间复杂度&nbsp;=&nbsp;64&nbsp;x&nbsp;512^2**</span><br><br>=&gt;&nbsp;BigBird&nbsp;时间复杂度&nbsp;=&nbsp;(8&nbsp;x&nbsp;64)&nbsp;x&nbsp;(8&nbsp;x&nbsp;512)<br>=&gt;&nbsp;BigBird&nbsp;时间复杂度&nbsp;=&nbsp;8&nbsp;x&nbsp;(512&nbsp;x&nbsp;512)<br>=&gt;&nbsp;<span style="font-weight: bold;line-height: 26px;">**BigBird&nbsp;时间复杂度&nbsp;=&nbsp;8&nbsp;x&nbsp;512^2**</span><br></code></pre><span id="OSC_h2_10"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">ITC 与 ETC</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">BigBird 模型可以使用 2 种不同的策略进行训练: <strong style="color: black;">ITC</strong> 和 <strong style="color: black;">ETC</strong>。 ITC (internal transformer construction，内部 transformer 构建) 就是我们上面讨论的。在 ETC (extended transformer construction，扩展 transformer 构建) 中，会有更多的全局词元，以便它们关注所有词元或者被所有词元关注。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">ITC 需要的计算量较小，因为很少有词元是全局的，同时模型可以捕获足够的全局信息 (也可以借助随机注意力)。而 ETC 对于需要大量全局词元的任务非常有帮助，例如对 <strong style="color: black;">问答</strong> 类任务而言，整个问题应该被所有上下文关注，以便能够将上下文正确地与问题相关联。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><em style="color: black;"><strong>注意:</strong> BigBird 论文显示，在很多 ETC 实验中，随机块的数量设置为 0。考虑到我们上文图解部分的讨论，这是合理的。</em></p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">下表总结了 ITC 和 ETC:</p><section data-tool="mdnice 编辑器" style="overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;"><br></th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">ITC</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">ETC</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">全局注意力的注意力矩阵</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;word-break: break-all;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100005792" data-ratio="0.9011976047904192" data-s="300,640" data-type="png" data-w="334" style="letter-spacing: 0px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/d3907d2e-c92d-4c77-afbe-06b2b9a87f87.png" referrerpolicy="no-referrer"></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;word-break: break-all;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100005793" data-ratio="0.883054892601432" data-s="300,640" data-type="png" data-w="419" style="letter-spacing: 0px;height: auto !important;" src="https://oscimg.oschina.net/oscnet/8082e521-dcef-4270-aee5-5a44b3b87e56.png" referrerpolicy="no-referrer"></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">全局词元</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">2 x <code>block_size</code></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><code>extra_tokens</code> + 2 x <code>block_size</code></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">随机词元</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><code>num_random_blocks</code> x <code>block_size</code></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><code>num_random_blocks</code> x <code>block_size</code></td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">滑动词元</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">3 x <code>block_size</code></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">3 x <code>block_size</code></td></tr></tbody></table></section><span id="OSC_h2_11"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">在 &nbsp;🤗Transformers 中使用 BigBird</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">你可以像使用任何其他 🤗 模型一样使用 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBirdModel</code> 。我们看一下代码:</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="font-weight: bold;line-height: 26px;">from</span>&nbsp;transformers&nbsp;<span style="font-weight: bold;line-height: 26px;">import</span>&nbsp;BigBirdModel<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;从预训练&nbsp;checkpoint&nbsp;中加载&nbsp;bigbird&nbsp;模型</span><br>model&nbsp;=&nbsp;BigBirdModel.from_pretrained(<span style="color: #d14;line-height: 26px;">"google/bigbird-roberta-base"</span>)<br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;使用默认配置初始化模型，如&nbsp;attention_type&nbsp;=&nbsp;"block_sparse"，num_random_blocks&nbsp;=&nbsp;3，block_size&nbsp;=&nbsp;64</span><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;你也可以按照自己的需要改变这些参数。这&nbsp;3&nbsp;个参数只改变每个查询词元关注的词元数。</span><br>model&nbsp;=&nbsp;BigBirdModel.from_pretrained(<span style="color: #d14;line-height: 26px;">"google/bigbird-roberta-base"</span>,&nbsp;num_random_blocks=<span style="color: #008080;line-height: 26px;">2</span>,&nbsp;block_size=<span style="color: #008080;line-height: 26px;">16</span>)<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;通过把&nbsp;attention_type&nbsp;设成&nbsp;`original_full`，BigBird&nbsp;就会用复杂度为&nbsp;n^2&nbsp;的完全注意力。此时，BigBird&nbsp;与&nbsp;BERT&nbsp;相似度为&nbsp;99.9%。</span><br>model&nbsp;=&nbsp;BigBirdModel.from_pretrained(<span style="color: #d14;line-height: 26px;">"google/bigbird-roberta-base"</span>,&nbsp;attention_type=<span style="color: #d14;line-height: 26px;">"original_full"</span>)<br></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">截至现在， <strong style="color: black;">🤗 Hub</strong> 中总共有 <strong style="color: black;">3 个 BigBird checkpoint</strong>: <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">bigbird-roberta-base</code>，<code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">bigbird-roberta-large</code> 以及 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">bigbird-base-trivia-itc</code>。前两个检查点是使用 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">masked_lm 损失</code> 预训练 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBirdForPretraining</code> 而得; 而最后一个是在 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">trivia-qa</code> 数据集上微调 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBirdForQuestionAnswering</code> 而得。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">让我们看一下如果用你自己喜欢的 PyTorch 训练器，最少需要多少代码就可以使用 🤗 的 BigBird 模型来微调你自己的任务。</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;"><code style="overflow-x: auto;padding: 16px;color: #333;background: #f8f8f8;display: -webkit-box;font-family: Operator Mono, Consolas, Monaco, Menlo, monospace;border-radius: 0px;font-size: 12px;-webkit-overflow-scrolling: touch;"><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;以问答任务为例</span><br><span style="font-weight: bold;line-height: 26px;">from</span>&nbsp;transformers&nbsp;<span style="font-weight: bold;line-height: 26px;">import</span>&nbsp;BigBirdForQuestionAnswering,&nbsp;BigBirdTokenizer<br><span style="font-weight: bold;line-height: 26px;">import</span>&nbsp;torch<br><br>device&nbsp;=&nbsp;torch.device(<span style="color: #d14;line-height: 26px;">"cpu"</span>)<br><span style="font-weight: bold;line-height: 26px;">if</span>&nbsp;torch.cuda.is_available():<br>&nbsp;&nbsp;&nbsp;&nbsp;device&nbsp;=&nbsp;torch.device(<span style="color: #d14;line-height: 26px;">"cuda"</span>)<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;我们用预训练权重初始化&nbsp;bigbird&nbsp;模型，并随机初始化其头分类器</span><br>model&nbsp;=&nbsp;BigBirdForQuestionAnswering.from_pretrained(<span style="color: #d14;line-height: 26px;">"google/bigbird-roberta-base"</span>,&nbsp;block_size=<span style="color: #008080;line-height: 26px;">64</span>,&nbsp;num_random_blocks=<span style="color: #008080;line-height: 26px;">3</span>)<br>tokenizer&nbsp;=&nbsp;BigBirdTokenizer.from_pretrained(<span style="color: #d14;line-height: 26px;">"google/bigbird-roberta-base"</span>)<br>model.to(device)<br><br>dataset&nbsp;=&nbsp;<span style="color: #d14;line-height: 26px;">"torch.utils.data.DataLoader&nbsp;object"</span><br>optimizer&nbsp;=&nbsp;<span style="color: #d14;line-height: 26px;">"torch.optim&nbsp;object"</span><br>epochs&nbsp;=&nbsp;...<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;最简训练循环</span><br><span style="font-weight: bold;line-height: 26px;">for</span>&nbsp;e&nbsp;<span style="font-weight: bold;line-height: 26px;">in</span>&nbsp;range(epochs):<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="font-weight: bold;line-height: 26px;">for</span>&nbsp;batch&nbsp;<span style="font-weight: bold;line-height: 26px;">in</span>&nbsp;dataset:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;model.train()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;batch&nbsp;=&nbsp;{k:&nbsp;batch[k].to(device)&nbsp;<span style="font-weight: bold;line-height: 26px;">for</span>&nbsp;k&nbsp;<span style="font-weight: bold;line-height: 26px;">in</span>&nbsp;batch}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;前向</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output&nbsp;=&nbsp;model(**batch)<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;后向</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;output[<span style="color: #d14;line-height: 26px;">"loss"</span>].backward()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optimizer.step()<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;optimizer.zero_grad()<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;将最终权重存至本地目录</span><br>model.save_pretrained(<span style="color: #d14;line-height: 26px;">"&lt;YOUR-WEIGHTS-DIR&gt;"</span>)<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;将权重推到&nbsp;🤗&nbsp;Hub&nbsp;中</span><br><span style="font-weight: bold;line-height: 26px;">from</span>&nbsp;huggingface_hub&nbsp;<span style="font-weight: bold;line-height: 26px;">import</span>&nbsp;ModelHubMixin<br>ModelHubMixin.push_to_hub(<span style="color: #d14;line-height: 26px;">"&lt;YOUR-WEIGHTS-DIR&gt;"</span>,&nbsp;model_id=<span style="color: #d14;line-height: 26px;">"&lt;YOUR-FINETUNED-ID&gt;"</span>)<br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;使用微调后的模型，以用于推理</span><br>question&nbsp;=&nbsp;[<span style="color: #d14;line-height: 26px;">"How&nbsp;are&nbsp;you&nbsp;doing?"</span>,&nbsp;<span style="color: #d14;line-height: 26px;">"How&nbsp;is&nbsp;life&nbsp;going?"</span>]<br>context&nbsp;=&nbsp;[<span style="color: #d14;line-height: 26px;">"&lt;some&nbsp;big&nbsp;context&nbsp;having&nbsp;ans-1&gt;"</span>,&nbsp;<span style="color: #d14;line-height: 26px;">"&lt;some&nbsp;big&nbsp;context&nbsp;having&nbsp;ans-2&gt;"</span>]<br>batch&nbsp;=&nbsp;tokenizer(question,&nbsp;context,&nbsp;return_tensors=<span style="color: #d14;line-height: 26px;">"pt"</span>)<br>batch&nbsp;=&nbsp;{k:&nbsp;batch[k].to(device)&nbsp;<span style="font-weight: bold;line-height: 26px;">for</span>&nbsp;k&nbsp;<span style="font-weight: bold;line-height: 26px;">in</span>&nbsp;batch}<br><br>model&nbsp;=&nbsp;BigBirdForQuestionAnswering.from_pretrained(<span style="color: #d14;line-height: 26px;">"&lt;YOUR-FINETUNED-ID&gt;"</span>)<br>model.to(device)<br><span style="font-weight: bold;line-height: 26px;">with</span>&nbsp;torch.no_grad():<br>&nbsp;&nbsp;&nbsp;&nbsp;start_logits,&nbsp;end_logits&nbsp;=&nbsp;model(**batch).to_tuple()<br>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;这里，你可以使用自己的策略对&nbsp;start_logits，end_logits&nbsp;进行解码</span><br><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;注意:</span><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;该代码段仅用于展示即使你想用自己的&nbsp;PyTorch&nbsp;训练器微调&nbsp;BigBrid，这也是相当容易的。</span><br><span style="color: #998;font-style: italic;line-height: 26px;">#&nbsp;我会建议使用&nbsp;🤗&nbsp;Trainer，它更简单，功能也更多。</span><br></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">使用 BigBird 时，需要记住以下几点:</p><ul data-tool="mdnice 编辑器" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;" class="list-paddingleft-1"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      序列长度必须是块大小的倍数，即 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">seqlen % block_size = 0</code> 。你不必担心，因为如果 batch 的序列长度不是 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">block_size</code> 的倍数，🤗 transformers 会自动填充至最近的整数倍。 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      目前，Hugging Face 的实现 
     <strong style="color: black;">尚不支持 ETC</strong>，因此只有第一个和最后一个块是全局的。 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      当前实现不支持 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">num_random_blocks = 0</code> 。 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      论文作者建议当序列长度 &lt; 1024 时设置 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">attention_type = "original_full"</code> 。 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      必须满足: 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">seq_length &gt; global_token + random_tokens + moving_tokens + buffer_tokens</code> ，其中 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">global_tokens = 2 x block_size</code> 、 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">sliding_tokens = 3 x block_size</code> 、 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">random_tokens = num_random_blocks x block_size</code> 且 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">buffer_tokens = num_random_blocks x block_size</code> 。如果你不能满足这一点，🤗 transformers 会自动将 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">attention_type</code> 切换为 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">original_full</code> 并告警。 
    </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
      当使用 BigBird 作为解码器 (或使用 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBirdForCasualLM</code> ) 时， 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">attention_type</code> 应该是 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">original_full</code> 。但你不用担心，🤗 transformers 会自动将 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">attention_type</code> 切换为 
     <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">original_full</code> ，以防你忘记这样做。 
    </section></li></ul><span id="OSC_h2_12"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">下一步</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">@patrickvonplaten 建了一个非常酷的，笔记本，以展示如何在 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">trivia-qa</code> 数据集上评估 <code style="font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);padding: 3px;margin: 3px;">BigBirdForQuestionAnswering</code> 。你可以随意用这个笔记本来玩玩 BigBird。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">BigBird 版的 Pegasus</strong> 模型很快就会面世，你可将它们用于 <strong style="color: black;">长文档摘要</strong> 💥。</p><span id="OSC_h2_13"></span><h2 data-tool="mdnice 编辑器" style="font-weight: bold;font-size: 22px;line-height: 1.2em;margin-top: 2em;margin-bottom: 35px;color: rgb(255, 157, 0);"><span style="font-size: 18px;color: rgb(255, 157, 11);padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;display: none;"></span><span style="color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);padding: 2px 13px;margin-right: 3px;height: 50%;font-size: 18px;">尾注</span><span style="font-size: 18px;color: rgb(255, 157, 11);display: inline-block;padding-left: 10px;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;line-height: 1.8em;color: rgb(58, 58, 58);">你可在，此处，找到 <strong style="color: black;">块稀疏注意力矩阵</strong> 的原始实现。🤗 版的实现在，这儿。</p><blockquote data-tool="mdnice 编辑器" style="border-top: none;border-right: none;border-bottom: none;font-size: 0.9em;overflow: auto;color: rgb(106, 115, 125);padding: 10px 10px 10px 20px;margin-bottom: 20px;margin-top: 20px;border-left-color: rgb(255, 177, 27);background: rgb(255, 245, 227);"><p style="font-size: 16px;line-height: 26px;color: rgb(89, 89, 89);">🤗 宝子们可以戳 <strong style="color: black;">阅读原文</strong> 查看文中所有的外部链接哟！</p></blockquote><hr data-tool="mdnice 编辑器" style="height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);margin-top: 20px;margin-bottom: 20px;"><blockquote data-tool="mdnice 编辑器" style="border-top: none;border-right: none;border-bottom: none;color: rgb(91, 91, 91);background: rgba(158, 158, 158, 0.1);padding-top: 1px;padding-bottom: 1px;padding-left: 5px;margin-top: 0px;margin-bottom: 0px;"><blockquote style="border-width: initial;border-style: none;border-color: initial;margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;"><blockquote style="border-width: initial;border-style: none;border-color: initial;margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;"><blockquote style="border-width: initial;border-style: none;border-color: initial;margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;"><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">英文原文:&nbsp;<span style="color: rgb(136, 136, 136);letter-spacing: 0px;">https://hf.co/blog/big-bird</span></p><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">原文作者: Vasudev Gupta</p><p style="color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;margin: 10px;">译者: Matrix Yao (姚伟峰)，英特尔深度学习工程师，工作方向为 transformer-family 模型在各模态数据上的应用及大规模模型的训练推理。</p></blockquote></blockquote></blockquote></blockquote></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - Hugging Face（gh_504339124f0f）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:09:08 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/HuggingFace/blog/10150964</guid>
            <link>https://my.oschina.net/HuggingFace/blog/10150964</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Firefox 在 2023 变得更快了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mozilla 官方博客最近<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhacks.mozilla.org%2F2023%2F10%2Fdown-and-to-the-right-firefox-got-faster-for-real-users-in-2023%2F">发表文章</a>，称 2023 年 Firefox 在提升用户体验方面取得了显著的进展，真实用户使用 Firefox 能感受到速度更快。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-48c6863ad3edd6c093cc619549ed7f30c35.png" referrerpolicy="no-referrer"></p><p>据介绍，Firefox 通过收集与<strong>页面加载、响应速度、启动</strong>等浏览器性能相关的匿名化时间度量指标来衡量用户体验。文章分享了一些对用户浏览器体验至关重要的指标在一年中是如何改进的。</p><ul><li><h4><strong>优化页面加载速度</strong></h4></li></ul><p>Firefox 使用 "First Contentful Paint (FCP)" 这个指标来衡量用户感知的性能。FCP 指的是从网络接收到第一个字节到页面显示内容的时间。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-16ba708b843784921085bfebb7aede81380.png" referrerpolicy="no-referrer"></p><p>数据显示，从年初的大约 250 毫秒，到十月份的 215 毫秒，<strong>页面加载速度提高了约 15%</strong>。这意味着用户能够更快地收到页面加载的反馈信息。</p><ul><li><h4><strong>优化 JavaScript 执行时间</strong></h4></li></ul><p>Firefox 还关注页面加载过程中 JavaScript 代码的执行时间。</p><p>数据显示，95% 的页面中 JavaScript 执行时间从年初的约 1560 毫秒，到十月份的约 1260 毫秒，速度提升了约 20%。这对于减少页面加载时间起到了重要作用。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-180320b8057907172e172bf066f77cc7c79.png" referrerpolicy="no-referrer"></p><ul><li><h4><strong>优化键盘响应速度</strong></h4></li></ul><p>Firefox 还关注页面加载后的响应速度。更具体来说，它关注键盘按下后到屏幕上显示结果的时间。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-19618b78169525abf4262e888f93daec3dc.png" referrerpolicy="no-referrer"></p><p>数据显示，95% 的页面中键盘响应速度从年初的约 65 毫秒，到八月份的约 59 毫秒，速度提升了约 10%。这意味着用户在键入时能够更快地得到反馈，减少了打字时的延迟。</p><p>Firefox 团队表示，通过这些数据可以看出 Firefox 在 2023 年取得了用户体验方面的显著改善。这些改进是通过优化浏览器的性能和 JavaScript 引擎实现的。Firefox 团队还表示他们将继续努力进行更多的优化，并在未来的文章中分享更多细节和进展。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 25 Nov 2023 12:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268242/firefox-got-faster-for-real-users-in-2023</guid>
            <link>https://www.oschina.net/news/268242/firefox-got-faster-for-real-users-in-2023</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 拿到 100 万欧元投资后，积极改进基础设施]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNOME 基金会本月从「Sovereign Tech Fund」获得了 <u><a href="https://www.oschina.net/news/265839/gnome-sovereign-tech-fund">100 万欧元投资</a></u>，用于帮助 GNOME 实现平台现代化、改进工具和可访问性，并支持符合公共利益的功能。</p><p>目前，围绕 systemd-homed 和其他功能集成的新工作正在进行中，通过将 systemd-homed 集成到 GNOME 的 AccountService 中，用户可以为他们的 Home 目录创建加密卷，确保个人数据的安全性。</p><p>本周 GNOME 开发工作的部分亮点包括：</p><ol><li>通过 XDG Desktop Portal，使沙盒应用程序支持文件夹的拖放功能</li><li>改进 GNOME Shell 和合成器的性能，并集成 Tracy 分析器<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-a4ae5a9624f158104c73a6cd332f2a7b75f.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li><li>提升硬件加速屏幕录制和改进 Linux 蓝牙协议堆栈</li><li>正在开发 Mutter 中对 OpenGL KHR_robustness 扩展的支持，以帮助 GNOME 会话从 GPU 驱动程序崩溃中恢复</li><li>Fractal Matrix 消息应用程序在 Fractal 5 中进行了全面重写，现在使用 GTK 4、libadwaita 和 Matrix Rust SDK。<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-aa30c942344821d70d7dffa1d26d5fcf6bf.png" referrerpolicy="no-referrer"></li></ol><p>有关这些最新 GNOME 工作的更多详细信息，请参见本周 GNOME 动态：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthisweek.gnome.org%2Fposts%2F2023%2F11%2Ftwig-123%2F" target="_blank">https://thisweek.gnome.org/posts/2023/11/twig-123/</a></em></u></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 25 Nov 2023 02:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268167</guid>
            <link>https://www.oschina.net/news/268167</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Firefox 121 默认启用 Wayland 支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>根据 Firefox 最近的提交信息，Firefox 121 计划在现代 Linux 桌面上默认启用 Wayland 支持，而不是回退到 XWayland。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-af58e5b492ff8f046886d946f3b112b8abc.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9f1786452d74604703605a8963620fd4491.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1752398" target="_blank">https://bugzilla.mozilla.org/show_bug.cgi?id=1752398</a></u></em>、<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhg.mozilla.org%2Fmozilla-central%2Frev%2F5ea5f3e31d58" target="_blank">https://hg.mozilla.org/mozilla-central/rev/5ea5f3e31d58</a></em></u></p><p>本周发布了 <u><a href="https://www.oschina.net/news/267557/firefox-120-0-released">Firefox 120 </a></u>稳定版，Firefox 121 现在处于测试阶段 —— Wayland 支持已默认启用，并且截至昨天的 beta 3 版本仍然开启，有望在稳定版中保持该状态。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6256943e2a71993b6018e4b3e5f2199fa60.png" referrerpolicy="no-referrer"></p><p>原生 Firefox Wayland 支持可实现触摸板和触摸屏手势、滑动导航、每个显示器的 DPI 设置、更好的图形性能等等。随着时间的推移，Firefox Wayland 支持已经相当成熟，并且现在处于稳健状态。用户表示在 Firefox 121 beta 测试中，它的表现非常好。</p><p>Firefox 121 计划于 12 月 19 日发布，如果默认启用 Wayland 支持，这将是一个很好的圣诞礼物。随着 KDE Plasma 6.0 默认切换到 Wayland 会话，以及其他地方达到的 Wayland 采用里程碑，2024 年可能成为 Wayland 主导 Linux 桌面的一年。</p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/261201/gnome-mr-drop-x11-session">GNOME 移除对 X.Org 会话支持</a></li><li><a href="https://www.oschina.net/news/263917/linux-mint-wayland-progress">Linux Mint "Cinnamon" 开始支持 Wayland</a></li><li><a href="https://www.oschina.net/news/256249/intellij-based-ide-wayland-support">JetBrains 为基于 IntelliJ 的 IDE 提供 Wayland 支持</a></li><li><a href="https://www.oschina.net/news/241063/asahi-linux-stop-x-org">Asahi Linux 致用户：停止使用 X.Org，Wayland 才是未来</a></li><li><a href="https://www.oschina.net/news/227050/xfce-4-20-wayland-support">Xfce 4.20 将正式支持 Wayland</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 25 Nov 2023 01:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268164/firefox-121-enable-wayland-support-by-default-on-linux</guid>
            <link>https://www.oschina.net/news/268164/firefox-121-enable-wayland-support-by-default-on-linux</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 Electron 的 Android 投屏工具 Escrcpy]]>
            </title>
            <description>
                <![CDATA[<div><img src="https://gitee.com/viarotel-org/escrcpy/raw/main/electron/resources/build/logo.png" alt="viarotel-escrcpy" referrerpolicy="no-referrer"></div><h1><a id="user-content-escrcpy" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#escrcpy"></a>Escrcpy</h1><p>📱 使用图形界面的 Scrcpy 显示和控制您的 Android 设备，由 Electron 驱动。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fblob%2Fmain%2FREADME.md">English Document</a></p><div><img src="https://gitee.com/viarotel-org/escrcpy/raw/main/screenshots/zh-cn/overview.jpg" alt="viarotel-escrcpy" referrerpolicy="no-referrer"></div><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Ftree%2Fmain%2Fscreenshots%2Fzh-cn">更多截图</a></p><h2><a id="user-content-特点" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%89%B9%E7%82%B9"></a>特点</h2><ul><li>🏃 同步：得益于 Web 技术，将更快速的与 Scrcpy 保持同步</li><li>💡 定制化：支持对多个设备偏好进行独立配置，并且能够添加备注以及导入导出所有配置的功能</li><li>🔗 反向供网：集成了 Gnirehtet 反向供网功能</li><li>🎨 主题：支持浅色模式和深色模式，跟随系统切换</li><li>😎 轻巧度：本机支持，仅显示设备屏幕</li><li>⚡️ 性能：30~120 帧每秒，取决于设备</li><li>🌟 质量：1920×1080 或更高</li><li>🕒 低延迟：35~70 毫秒</li><li>🚀 快速启动：显示第一张图片仅需约 1 秒钟</li><li>🙅‍♂️ 非侵入性：不会在安卓设备上留下任何安装文件</li><li>🤩 用户收益：无需账户、无广告、无需互联网连接</li><li>🗽 自由：免费且开源软件</li></ul><h2><a id="user-content-获取软件包" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%8F%96%E8%BD%AF%E4%BB%B6%E5%8C%85"></a>获取软件包</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Freleases">查看发布地址</a></p><h2><a id="user-content-快速上手" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B"></a>快速上手</h2><h3><a id="user-content-usb-连接" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#usb-%E8%BF%9E%E6%8E%A5"></a>USB 连接</h3><blockquote><p>注意：如果手机上提示调试授权请点击允许</p></blockquote><ol><li>安卓手机需开启开发者模式并打开 USB 调试</li><li>打开 Escrcpy 并将安卓手机连接到你的电脑</li><li>这时 Escrcpy 设备列表应该已经检测到你的手机，点击开始镜像</li><li>开始享受吧</li></ol><h3><a id="user-content-wifi-连接" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#wifi-%E8%BF%9E%E6%8E%A5"></a>WIFI 连接</h3><blockquote><p>注意：如果首次无线连接失败，你可能需要无线配对请参阅 <a href="https://gitee.com/viarotel-org/escrcpy#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常见问题</a></p><p>注意：需同时开启无线调试功能，并在无线调试页面中获取你的当前设备的无线地址（通常为你连接 WIFI 时分配的 IP 地址）及端口号（默认为 5555）</p></blockquote><ol><li>同 USB 连接中的 1-2 步骤</li><li>将获取到的设备 IP 地址及端口号填写到 Escrcpy 中，然后点击连接设备</li><li>这时 Escrcpy 设备列表应该已经检测到你的手机，点击开始镜像</li><li>开始享受吧</li></ol><h3><a id="user-content-macos--linux" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos--linux"></a>macOS &amp;&amp; Linux</h3><blockquote><p>注意：这些平台没有集成 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy">Scrcpy</a> 需要手动安装</p></blockquote><ol><li>Linux 可参阅的 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Flinux.md">安装文档</a></li><li>macOS 可参阅的 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Fmacos.md">安装文档</a></li><li>安装上述依赖成功后步骤同 USB 连接，和 WIFI 连接</li></ol><h3><a id="user-content-gnirehtet-反向供网" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#gnirehtet-%E5%8F%8D%E5%90%91%E4%BE%9B%E7%BD%91"></a>Gnirehtet 反向供网</h3><blockquote><p>注意: macOS 内部没有集成如需使用需要手动安装 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fgnirehtet">安装文档</a></p></blockquote><p>Windows 及 Linux 端内部集成了 Gnirehtet， 用于提供 PC 到安卓设备的反向供网功能。</p><h2><a id="user-content-快捷键" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>快捷键</h2><p>请参阅 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Fshortcuts.md">scrcpy/doc/shortcuts</a></p><h2><a id="user-content-设备交互栏" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E4%BA%A4%E4%BA%92%E6%A0%8F"></a>设备交互栏</h2><ul><li>切换键</li><li>主屏幕键</li><li>返回键</li><li>通知栏</li><li>电源键</li><li>重启设备</li><li>截取屏幕</li><li>安装应用</li><li>反向供网（Gnirehtet）</li></ul><h2><a id="user-content-偏好设置" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE"></a>偏好设置</h2><blockquote><p>持续完善中，目前支持以下常用配置</p></blockquote><h3><a id="user-content-通用" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%80%9A%E7%94%A8"></a>通用</h3><ul><li>Adb 路径</li><li>Scrcpy 路径</li><li>文件存储路径（音视频录制及设备截图都保存在这里）</li><li>Gnirehtet 路径</li><li>Gnirehtet 修复</li><li>Scrcpy 追加参数</li><li>更换主题</li><li>调整语言</li><li>开启调试</li></ul><h3><a id="user-content-视频控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%A7%86%E9%A2%91%E6%8E%A7%E5%88%B6"></a>视频控制</h3><ul><li>分辨率</li><li>比特率</li><li>刷新率</li><li>视频编码</li><li>屏幕旋转</li><li>屏幕裁剪</li><li>显示器</li><li>视频缓冲</li><li>接收器 (v4l2) 缓冲</li></ul><h3><a id="user-content-设备控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6"></a>设备控制</h3><ul><li>展示触摸点</li><li>保持清醒</li><li>控制时关闭屏幕</li><li>控制结束关闭屏幕</li><li>控制时停止充电</li></ul><h3><a id="user-content-窗口控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%AA%97%E5%8F%A3%E6%8E%A7%E5%88%B6"></a>窗口控制</h3><ul><li>无边框模式</li><li>全屏模式</li><li>始终位于顶部</li><li>禁用屏幕保护</li></ul><h3><a id="user-content-音视频录制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6"></a>音视频录制</h3><ul><li>录制格式</li><li>录制时长</li><li>录制视频方向</li><li>禁用视频录制</li><li>禁用视频播放</li><li>禁用音频录制</li><li>禁用音频播放</li></ul><h3><a id="user-content-音频控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%9F%B3%E9%A2%91%E6%8E%A7%E5%88%B6"></a>音频控制</h3><ul><li>音频源</li><li>音频编码</li><li>音频比特率</li><li>音频缓冲</li><li>音频输出缓冲</li></ul><h3><a id="user-content-otg" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#otg"></a>OTG</h3><ul><li>启用 OTG</li><li>仅键盘</li><li>仅鼠标</li></ul><h3><a id="user-content-摄像控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%91%84%E5%83%8F%E6%8E%A7%E5%88%B6"></a>摄像控制</h3><ul><li>启用摄像</li><li>摄像源</li><li>摄像尺寸</li><li>摄像比例</li><li>摄像帧率</li></ul><h2><a id="user-content-下一步做什么" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E4%B8%8B%E4%B8%80%E6%AD%A5%E5%81%9A%E4%BB%80%E4%B9%88"></a>下一步做什么？</h2><blockquote><p>优先级从高到低</p></blockquote><ol><li>用户界面进行优化，制作合适的 Logo ✅</li><li>内置的软件更新功能 ✅</li><li>录制和保存音视频 ✅</li><li>添加设备快捷交互控制栏 ✅</li><li>支持自定义 Adb 及 Scrcpy 依赖 ✅</li><li>支持自定义设备名称，以及偏好设置的导出及导入 ✅</li><li>定制化，支持对单个设备进行独立配置 ✅</li><li>添加 macOS 及 linux 操作系统的支持 ✅</li><li>支持国际化 ✅</li><li>对深色模式的支持 ✅</li><li>添加 Gnirehtet 反向供网功能 ✅</li><li>添加新的相机镜像相关功能 ✅</li><li>更好的多屏协同 ✅</li><li>设备交互栏添加更多功能：文件推送、旋转屏幕、音频控制等功能 ✅</li><li>支持批量连接历史设备功能 ✅</li><li>支持使用内置终端执行自定义命令 ✅</li><li>添加独立的剪切板同步功能 🚧</li><li>支持通过界面从设备下载选中的文件 🚧</li><li>支持对设备进行分组，以及按组进行批量操作 🚧</li><li>添加对游戏的增强功能，如游戏键位映射 🚧</li></ol><h2><a id="user-content-常见问题" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"></a>常见问题</h2><h3><a id="user-content-电脑连接设备后无法检测到" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%90%8E%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0"></a>电脑连接设备后无法检测到</h3><ol><li>请重新插拔你的设备，并确认设备同意了 USB 调试授权窗口。</li><li>如果还不行，你的电脑可能缺少必要的驱动程序，请使用第三方工具，如：驱动精灵，安装必要的驱动后重试。</li></ol><h3><a id="user-content-无法输入中文" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87"></a>无法输入中文</h3><p>该问题是已知的， Scrcpy 似乎并未直接对中文输入进行测试和支持，需要在手机端安装第三方输入法，以下输入法经测试可以很好支持</p><ul><li>搜狗输入法</li><li>QQ 输入法</li><li>谷歌拼音输入法</li><li>Gboard</li></ul><h3><a id="user-content-无线连接提示-目标计算机积极拒绝访问" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%8F%90%E7%A4%BA-%E7%9B%AE%E6%A0%87%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%AF%E6%9E%81%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE"></a>无线连接提示： 目标计算机积极拒绝访问</h3><p>第一次无线连接可能需要配对，或 插入 USB 以保证与电脑建立连接即授权成功后方可使用</p><h3><a id="user-content-通过数据线连接后点击无线模式没有反应" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E7%BA%BF%E8%BF%9E%E6%8E%A5%E5%90%8E%E7%82%B9%E5%87%BB%E6%97%A0%E7%BA%BF%E6%A8%A1%E5%BC%8F%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94"></a>通过数据线连接后点击无线模式没有反应</h3><p>请再点一次，或点击刷新设备，一般不会超过两次，如果还不行，请提供机型和安卓版本信息到 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">Issues</a></p><h3><a id="user-content-设备交互控制栏为什么不设计为自动跟踪吸附的悬浮菜单" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E4%BA%A4%E4%BA%92%E6%8E%A7%E5%88%B6%E6%A0%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%AE%BE%E8%AE%A1%E4%B8%BA%E8%87%AA%E5%8A%A8%E8%B7%9F%E8%B8%AA%E5%90%B8%E9%99%84%E7%9A%84%E6%82%AC%E6%B5%AE%E8%8F%9C%E5%8D%95"></a>设备交互控制栏为什么不设计为自动跟踪吸附的悬浮菜单?</h3><p>采用悬浮菜单方案不可避免地会增加对 Scrcpy 的耦合性，并增加与 Scrcpy 同步更新的难度。许多类似的 ScrcpyGUI 软件在使用此方案后不得不投入大量精力，最终因更新困难而放弃开发。因此，综合考虑，我们决定采用现有的方案，并期待 Scrcpy 未来能够增加原生交互控制栏的支持。</p><h3><a id="user-content-某些设备连接镜像后可以看到画面但是无法操作" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%9F%90%E4%BA%9B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E9%95%9C%E5%83%8F%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%94%BB%E9%9D%A2%E4%BD%86%E6%98%AF%E6%97%A0%E6%B3%95%E6%93%8D%E4%BD%9C"></a>某些设备连接镜像后可以看到画面但是无法操作</h3><blockquote><p>注意：以小米手机为例，不仅需要开启 USB 调试还需要开启 USB 调试（安全设置）也就是允许通过 USB 调试修改权限或模拟点击的功能</p></blockquote><p>可供参阅的详细说明 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2FFAQ.md%23mouse-and-keyboard-do-not-work">鼠标和键盘不工作的原因</a></p><h3><a id="user-content-下载软件包时提示报毒导致无法正常下载" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%97%B6%E6%8F%90%E7%A4%BA%E6%8A%A5%E6%AF%92%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%B8%8B%E8%BD%BD"></a>下载软件包时提示报毒导致无法正常下载</h3><blockquote><p>经过反馈，有时在 Windows 环境下，由于软件包没有进行证书签名，可能会被 Windows Defender 误认为有害而导致拦截提示，可以尝试以下解决方法</p></blockquote><ol><li>打开 <code>Windows 安全中心</code>。</li><li>选择 <code>病毒和威胁防护</code>。</li><li>在 <code>病毒和威胁防护设置</code> 下，点击 <code>管理设置</code>。</li><li>找到 <code>实时保护</code>，如果权限允许，可以尝试点击关闭。如果无法关闭实时保护，请跳过此步骤。</li><li>向下滑动页面，找到 <code>排除项</code>，点击 <code>添加或删除排除项</code>。</li><li>添加您下载软件包的文件夹路径作为排除项，即将该文件夹添加到<code>排除列表</code>中。</li></ol><h3><a id="user-content-获取设备列表失败或开始镜像录屏报错" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%E6%88%96%E5%BC%80%E5%A7%8B%E9%95%9C%E5%83%8F%E5%BD%95%E5%B1%8F%E6%8A%A5%E9%94%99"></a>获取设备列表失败或开始镜像/录屏报错</h3><blockquote><p>该问题一般是 <code>Adb</code> 或 <code>Scrcpy</code> 依赖路径错误导致的，可以尝试以下解决方法</p></blockquote><ol><li>在菜单中选择 <code>偏好设置</code>，然后在 <code>Global 模式</code> 下点击右上角的 <code>重置配置</code>。</li><li>接下来，进入 <code>设备列表</code> 页面，并尝试重新开启镜像功能。</li><li>如果问题仍然存在，请确保您已下载并安装了最新版本的 <code>Escrcpy</code>。</li><li>按下 <code>Ctrl</code> + <code>Shift</code> + <code>I</code> 进入开发者工具，并查看是否有任何报错信息。</li><li>如果有报错，请截图并在 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">反馈问题</a> 页面中提交您的问题。</li></ol><h3><a id="user-content-macos-关闭窗口选择最小化到托盘后顶部右侧状态栏找不到图标" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos-%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E9%80%89%E6%8B%A9%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%B0%E6%89%98%E7%9B%98%E5%90%8E%E9%A1%B6%E9%83%A8%E5%8F%B3%E4%BE%A7%E7%8A%B6%E6%80%81%E6%A0%8F%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E6%A0%87"></a>macOS 关闭窗口选择最小化到托盘后顶部右侧状态栏找不到图标</h3><blockquote><p>这个一般是状态栏图标过多导致无法展示 Escrcpy 的图标，推荐用以下工具解决</p></blockquote><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.better365.cn%2Fibar.html">iBar</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.macbartender.com%2F">Bartender</a></li></ul><h3><a id="user-content-macos-安装成功后打开提示文件损坏" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos-%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E5%90%8E%E6%89%93%E5%BC%80%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F"></a>macOS 安装成功后打开提示文件损坏</h3><blockquote><p>这个通常是因为软件包本身没有签名导致的，可以尝试以下解决方法</p></blockquote><ol><li>终端中执行 <code>sudo spctl --master-disable</code> 以允许任何来源</li><li>终端中执行 <code>sudo xattr -r -d com.apple.quarantine [AppPath]</code> 以尝试修复提示软件包损坏</li></ol><h2><a id="user-content-获得帮助" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%BE%97%E5%B8%AE%E5%8A%A9"></a>获得帮助</h2><blockquote><p>因为是开源项目，全靠爱发电，所以支持有限，更新节奏不固定</p><p>注意：非 BUG 或计划外的需求，有偿处理；至于金额，根据问题难易程度，你觉得帮助了多少，看着给吧（维护这些项目已经耗费了大量精力，还要免费花时间解答问题就说不过去了吧...所以白嫖的一律不通过。）</p></blockquote><ul><li>issues: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">反馈问题</a></li><li>email: <a href="mailto:viarotel@qq.com">viarotel@qq.com</a></li><li>weixin: viarotel</li><li>qq: 523469508</li></ul><h2><a id="user-content-致谢" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%87%B4%E8%B0%A2"></a>致谢</h2><p>该项目的诞生离不开以下开源项目</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy">scrcpy</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FDeviceFarmer%2Fadbkit">adbkit</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.electronjs.org%2F">electron</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fvuejs.org%2F">vue</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fgnirehtet%2F">gnirehtet</a></li></ul><h2><a id="user-content-支持项目" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%94%AF%E6%8C%81%E9%A1%B9%E7%9B%AE"></a>支持项目</h2><blockquote><p>如果该项目帮到你的话，可以请我喝杯咖啡，让我更有精神完善该项目 😛</p></blockquote><div><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79dcbc40246743e2b6870419e88e0392~tplv-k3u1fbpfcp-watermark.image?" alt="viarotel-wepay" referrerpolicy="no-referrer"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e5e69b83dd746deade95afd4a6864ec~tplv-k3u1fbpfcp-watermark.image?" alt="viarotel-alipay" referrerpolicy="no-referrer"></div>]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 10:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/viarotel-org/escrcpy</guid>
            <link>https://gitee.com/viarotel-org/escrcpy</link>
        </item>
        <item>
            <title>
                <![CDATA[KubeSphere 社区双周报 | Fluent Operator 2.6.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>KubeSphere 社区双周报主要整理展示新增的贡献者名单和证书、新增的讲师证书以及两周内提交过 commit 的贡献者，并对近期重要的 PR 进行解析，同时还包含了线上/线下活动和布道推广等一系列社区动态。</p><p>本次双周报涵盖时间为：2023.11.10-2023.11.23。</p><h2>贡献者名单</h2><p><img src="https://oscimg.oschina.net/oscnet/up-c62e63f1bf7068d8223d3ea14620688a29f.gif" alt="" referrerpolicy="no-referrer"></p><h2>新晋 KubeSphere Contributor</h2><p>两周内共有 1 位新晋 KubeSphere Contributor，感谢对 KubeSphere 社区的贡献！</p><p><img src="https://oscimg.oschina.net/oscnet/up-2dfcb87266c4e5068e9628e874a6a2b57e5.png" alt="" referrerpolicy="no-referrer"></p><h2>近期更新</h2><h3>Fluent Operator</h3><p>Fluent Operator 在 2023 年 11 月 22 日发布了 v2.6.0 版本，感谢来自全球 12 位开发者的贡献。以下是详细信息：</p><p>新特性（Features）：</p><ul><li>新增 Fluentbit Nginx 插件 (#924)，由 @sjliu1 提交。</li><li>新增 Fluentbit Statsd 插件 (#925)，由 @sjliu1 提交。</li><li>新增 Fluentbit Syslog 插件 (#931)，由 @sjliu1 提交。</li><li>新增 Fluentbit TCP 插件 (#936)，由 @sjliu1 提交。</li><li>新增在 Fluentd 中添加 in_sample 插件以便于测试 (#937)，由 @cw-Guo 提交。</li><li>添加 fluent-plugin-prometheus 插件到 Fluentd (#966)，由 @joshuabaird 提交。</li><li>添加 Fluentd monitor_agent 输入插件 (#967)，由 @joshuabaird 提交。</li><li>添加 Fluentd 输入插件 CRs (#972)，由 @MisterMX 提交。</li><li>为 Fluentd 添加 readiness 和 liveness 探针 (#980)，由 @cw-Guo 提交。</li></ul><p>增强（Enhancements）：</p><ul><li>增加 Fluentbit Daemonset HostPath 切换选项 (#926)，由 @OlegVanHorst 提交。</li><li>允许为 Fluentbit 设置 dnsPolicy (#951)，由 @L1ghtman2k 提交。</li><li>默认 cri 解析器应包含 Time_Keep On，否则输出中不存在时间标签 (#958)，由 @JoeDerby 提交。</li><li>使用环境文件替换已经废弃的命令 (#970)，由 @jongwooo 提交。</li><li>升级 chart-testing-action 到 v2.6.0 (#976)，由 @benjaminhuo 提交。</li><li>允许通过 helm chart 传递环境变量 (#977)，由 @guerzon 提交。</li><li>按 metadata.name 对自定义资源进行排序 (#988)，由 @cw-Guo 提交。</li><li>升级 Fluentbit 到 2.2.0 (#994)，由 @wenchajun 提交。</li><li>构建和依赖更新：包括 Docker、Actions/Checkout、Golang 等的依赖更新。</li></ul><p>Bug 修复（Bug Fixes）：</p><ul><li>修复 Fluentbit Splunk 的 output 文档 (#935)，由 @Macbet 提交。</li><li>在集群 FluentBit helm chart 中添加 parserSelector (#956)，由 @JoeDerby 提交。</li><li>修复 Fluentd record transformer 参数 (#960)，由 @cw-Guo 提交。</li><li>修复 Fluentd in_http 插件 keepalive_timeout 选项 (#968)，由 @cw-Guo 提交。</li><li>修复 Fluentd 解析器 keep_time_key (#987)，由 @cw-Guo 提交。</li></ul><h2>社区动态</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.io%2Fforum%2Fd%2F22875-li-ji-bao-ming-yun-yuan-sheng-ke-guan-ce-xing-meetup-yan-zhou-zhan-1125-huo-re-kai-qi" target="_blank">火热报名中 | 云原生 + 可观测性 Meetup 广州站 11.25 准时开启！</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.io%2Fforum%2Fd%2F22924-kuai-lai-kao-shi-na-zheng-shu-kubesphere-ge-ren-ji-neng-zhuan-ye-kao-shi-ren-zheng-shang-xian-la" target="_blank">快来考试拿证书！KubeSphere 个人技能专业考试认证上线啦！</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fnews%2Fospp-2023-summary%2F" target="_blank">开源之夏 2023 KubeSphere 社区项目总结</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fblogs%2Fdeploy-kubesphere-on-arm-kylin-v10%2F" target="_blank">ARM 版 Kylin V10 部署 KubeSphere 3.4.0 不完全指南</a></li></ul><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 10:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10151151</guid>
            <link>https://my.oschina.net/u/4197945/blog/10151151</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[BetterGI（更好的原神） - 开源免费的原神游戏辅助工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>BetterGI ， 一个基于计算机视觉技术，意图让原神变的更好的项目。</p><blockquote><p>BetterGI · 更好的原神 - 自动拾取 | 自动剧情 | 全自动钓鱼 (AI) | 全自动七圣召唤 | 自动伐木 | 自动派遣 | 一键强化 | 支持云原神</p></blockquote><h2>功能</h2><ul><li>特色：自带一个遮罩窗口覆盖在游戏界面上，用于显示日志和图像识别结果。</li></ul><p><a href="https://user-images.githubusercontent.com/15783049/283518643-57ab7c3c-709a-4cf3-8f64-1c78764c364c.jpg"><img alt="" src="https://static.oschina.net/uploads/img/202311/24182139_MuR8.jpg" referrerpolicy="no-referrer"></a></p><ul><li>实时任务
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E6%8B%BE%E5%8F%96">自动拾取</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E5%89%A7%E6%83%85">自动剧情</a><ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E9%A2%86%E5%8F%96%E3%80%8E%E6%AF%8F%E6%97%A5%E5%A7%94%E6%89%98%E3%80%8F%E5%A5%96%E5%8A%B1">自动领取『每日委托』奖励</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E9%87%8D%E6%96%B0%E6%B4%BE%E9%81%A3">自动重新派遣</a></li></ul></li><li><a href="https://bgi.huiyadan.com/doc.html#%E5%85%A8%E8%87%AA%E5%8A%A8%E9%92%93%E9%B1%BC">全自动钓鱼 (AI)</a></li></ul></li><li>独立任务
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E4%B8%83%E5%9C%A3%E5%8F%AC%E5%94%A4">自动七圣召唤</a></li><li>自动伐木（迁移中）</li></ul></li><li>操控辅助
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E7%A9%BA%E6%A0%BC%E8%BF%9E%E5%8F%91">空格连发</a></li><li><a href="https://bgi.huiyadan.com/doc.html#f%E8%BF%9E%E5%8F%91">F 连发</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E9%82%A3%E7%BB%B4%E8%8E%B1%E7%89%B9-%E8%BD%AC%E5%9C%88%E5%9C%88">那维莱特 - 转圈圈</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E5%9C%A3%E9%81%97%E7%89%A9%E4%B8%80%E9%94%AE%E5%BC%BA%E5%8C%96">快速圣遗物强化</a></li></ul></li></ul><p><a href="https://bgi.huiyadan.com/feat.html">更多功能</a>筹备中...</p><h2>界面截图</h2><p><a href="https://user-images.githubusercontent.com/15783049/275204566-813570c4-3816-4850-ac16-799af4f3cc5f.png"><img alt="" src="https://static.oschina.net/uploads/img/202311/24182210_I0LO.png" referrerpolicy="no-referrer"></a></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 10:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bettergi</guid>
            <link>https://www.oschina.net/p/bettergi</link>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8 极致性能优化 Non-GC Heap]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>前言</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">.NET8 里面 JIT 引入了一个新的机制，叫做 Non-GC Heap。JIT 可以确保相关对象分配在 Non-GC Heap 上，该堆像其名称一样，不受 GC 管理。JIT 需要保证这个对象没有被 GC 引用，并且在这个对象的生命周期内一直是根对象 (不会被 GC 消灭的对象) 的状态。原文:<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485594%26idx%3D1%26sn%3D77ada645af59a4e35e1d46c2694493ac%26chksm%3Dc01c4501f76bcc17384320acd082d9951ecf8a6f321ae089aa3c4430d3cdb947795ac34e8727%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.NET8 极致性能优化 Non-GC Heap</a></strong></p><span id="OSC_h2_1"></span><h2><strong>概述</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">为什么要引入这种机制？先来看一段代码:</p><div><pre><code class="language-text">public static string GetPrefix() =&gt; "https://";
static void Main(string[] args)
{
  GetPrefix ();
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">这里的 GetPrefix 函数返回的是一个常量字符串值，它的 ASM 如下:</p><div><pre><code class="language-text">mov  rax,185CAC02068h
mov  rax,qword ptr [rax]</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">两个 mov 指令，第一个是对象指针的指针，第二个是对象的指针。虽然是简单的两个指令，但是背后的逻辑却较为复杂，基本如下:<br> 一个字符串常量值，.NET7 里面 JIT 也会给这个字符串常量值复制到一个堆分配到字符串对象中，返回的是对象的二级指针。因为是堆对象，可能会被 GC 移动，每次都需要获取新的地址，频繁增加负担。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">这里的问题在哪儿呢？一个字符串常量值需要这么多的步骤操作吗？开销是否太大，我们是否可以简化它呢？有一个常规的很容易想到的方法，就是把这个字符串常量值的地址给它固定起来，每次需要用到这个常量值，就直接去这个固定地址读取，这样行不行呢？GC 堆很明显不能硬编码固定。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">当然可以，做法就是把这个字符串常量值放到 POH(固定对象堆) 上，不让 GC 移动。这样是减少了 GC 回收的时候移动的开销，但是并没有从根本上解决问题，因为固定对象同样受到 GC 的管控，上面的步骤除了不能移动一样不少，并且 POH 不会进行根对象的处理，可能会导致它们被回收，地址指向了其它的数据，进而错误。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>特点</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">要彻底的解决这个问题，本篇的主角:Non-GC Heap 出场了。它有三个特点:<br> 1.JIT 要保证这个对象没有被 GC 引用<br> 2.这个对象在生命周期内一直是根对象<br> 3.它不能是可卸载上下文的一部分</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">你可以认为 GC 堆包括:小对象堆 (SOH-小于 85000 字节的对象），大对象堆 (LOH-大于 85000 字节的对象)，固定对象堆（POH）<br> 而 No-GC Heap 超脱于 GC Heap 之外的 FOH(冻结堆)。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">JIT 现在可以避免在生成的代码中访问该对象时的间接寻址，而是直接硬编码对象的地址</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">GetPrefix 函数的 ASM 在.NET8 Non-GC Heap 里面如下:</p><div><pre><code class="language-text">mov  rax,26180000218h
C3   ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">26180000218h 为对象地址,一个 mov 直接返回。看似只简化了一个 mov,但是实际上它这种硬编码固定模式地址，简化的是整个字符串常量值的原理，也就是把字符串常量值分配到 FOH 里面，而不是 GC 堆里。性能极大的提升自不必多说。以下测量 13 倍的性能提升。</p><div><pre><code class="language-text">Method Job Mean Ratio
GetPrefix .NET 7 1.3450 ns
GetPrefix .NET 8 0.0729 ns</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>其它 Non-GC Heap 的操作</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>一:</strong>使用 typeof(T) 生成的 RuntimeType 对象</p><div><pre><code class="language-text">public Type GetTestsType() =&gt; typeof(Tests);</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>二:</strong>空数组分配到 Non-GC Heap 上，使 Array.Empty() 更加高效</p><div><pre><code class="language-text">public string[] Test() =&gt; Array.Empty&lt;string&gt;();</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">它俩在.NET8 里面都类似于如下 ASM，一个 mov 直接返回:</p><div><pre><code class="language-text">mov rax,1A0814EAEA8
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>三:</strong>静态值类型字段关联的堆对象，不包含任何 GC 引用的字段</p><div><pre><code class="language-text">public partial class Tests
{
    private static readonly ConfigurationData s_config = ConfigurationData.ReadData();
    public TimeSpan GetRefreshInterval() =&gt; s_config.RefreshInterval;
    private struct ConfigurationData
    {
        public static ConfigurationData ReadData() =&gt; new ConfigurationData
        {
            Index = 0x12345,
            Id = Guid.NewGuid(),
            IsEnabled = true,
            RefreshInterval = TimeSpan.FromSeconds(100)
        };
        public int Index;
        public Guid Id;
        public bool IsEnabled;
        public TimeSpan RefreshInterval;
    }
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">RefreshInterval .NET7 如下:</p><div><pre><code class="language-text">mov       rax,13D84001F78
mov       rax,[rax]
mov       rax,[rax+20]
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">RefreshInterval .NET8 如下:</p><div><pre><code class="language-text">mov       rax,20D9853AE48
mov       rax,[rax]
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>四:</strong>代之间的 GC 引用判断</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">代码:</p><div><pre><code class="language-text">public class Tests
{
    public void Write()
    {
        string dst = "old";
        Write(ref dst, "new");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Write(ref string dst, string s) =&gt; dst = s;
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Write 在.NET7 和.NET8 上生成如下:</p><div><pre><code class="language-text">call      CORINFO_HELP_CHECKED_ASSIGN_REF
nop
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">CORINFO_HELP_CHECKED_ASSIGN_REF 是一个 JIT 帮助程序函数，其中包含所谓的「GC write barrier (GC 写屏障)」，一个小代码片段，用于让 GC 跟踪正在写入的引用，因为它可能需要知道，例如，因为正在分配的对象可能是 gen0，而目标可能是 gen2。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">微调下这个代码:</p><div><pre><code class="language-text">public class Tests
{
    public void Write()
    {
        string dst = "old";
        Write(ref dst);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Write(ref string dst) =&gt; dst = "new";
}</code></pre></div><ul><li>实现的功能都是一样的，只不过 dst 直接赋值了常量字符串，记得上面常量字符串的分配是在 Non-GC Heap 吗？.NET7 里面还是需要帮助函数:</li></ul><div><pre><code class="language-text">mov       rdx,1FF0E4014A0
mov       rdx,[rdx]
call      CORINFO_HELP_CHECKED_ASSIGN_REF
nop
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">然.NET8 里面则是</p><div><pre><code class="language-text">mov       rax,1B3814EAEC8
mov       [rcx],rax
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">因为.NET8 意识到常量字符串是在 Non-GC Heap，不需要 GC 跟踪判断在那个代码，类似于 card_table 那种。所以优化掉了 CORINFO_HELP_CHECKED_ASSIGN_REF</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>往期精彩回顾:</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485453%26idx%3D1%26sn%3Df7c1a6198b9e24af64a6a88b80230a76%26chksm%3Dc01c4596f76bcc80ff69ce39bc691f508a118f679d64c070e12538151dde161c4f80da935724%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.NET8 JIT 核心:分层编译的原理</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485277%26idx%3D1%26sn%3Ddfb356778d490c11986e5134d578271a%26chksm%3Dc01c4ac6f76bc3d0f1821af547af1bdb67b6a4cff3f7611203ac4690f0f400e322294128d5c6%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">新版.Net 性能有没有达到 C++90%?</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485350%26idx%3D1%26sn%3D6a19a00f7f86bc5802d06c99556d2a19%26chksm%3Dc01c4a3df76bc32b63f8d2530a044e8e1fc82ebfd98ddeb5002799e992e3108037ed9ad52db3%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">面试官问.Net 对象赋值为 null,就会被 GC 回收吗?</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485387%26idx%3D1%26sn%3D5ea612e6590c5d19dcd95d4ec34f007c%26chksm%3Dc01c4a50f76bc3466f7b6cad8faf26473e70ef4f3ecea8b55f0a0138b8c2100eaedc956e3acb%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.Net JIT 的骚操作 DNGuard HVM 原理简析</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">作者:江湖评谈。公众号:<strong>jianghupt</strong>.欢迎关注。文章首发地。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><img alt="" height="430" src="https://oscimg.oschina.net/oscnet/up-69bca024ba7b877ebd8fc0e29321ae8c137.png" width="430" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 09:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5407571/blog/10150775</guid>
            <link>https://my.oschina.net/u/5407571/blog/10150775</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国科学院软件所在开源自动驾驶平台建设方面取得进展]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">中国科学院软件研究所可信智能系统团队在开源自动驾驶（Self-driving System）平台建设方面取得进展，构建了一个开放易用且自主可控的自动驾驶算法开发、测试、仿真与验证平台 ISS。该成果得到中国科学院稳定支持基础研究领域青年团队计划「开放环境下的可信智能算法」项目支持。</span></p><p><span style="color:#000000">根据介绍，ISS 平台基于模块化的框架并以依赖库较少的方式实现了涵盖自动驾驶全流程（包括感知、建图、定位、预测、规划与控制等）的几十种基准算法（如图 1 所示），使用简单、易于扩展，可以为科研人员开展自动驾驶相关研究提供基础平台支撑。</span></p><p><img alt="" height="329" src="https://oscimg.oschina.net/oscnet/up-bf752988659c49e05377c82e311313f3fb6.png" width="500" referrerpolicy="no-referrer"></p><p><em><span style="color:#000000">图 1. ISS 平台架构</span></em></p><p><span style="color:#000000">ISS 平台具体实现了以下六大模块功能。</span></p><ul><li><span style="color:#000000">传感器模块：基于 CARLA 仿真器支持了常用的传感器；</span></li><li><span style="color:#000000">感知模块：基于深度学习方法实现了 2D 检测、2D 语义分割、Bev 地图生成、3D 目标检测等感知任务；</span></li><li><span style="color:#000000">预测模块：实现了匀速运动预测和基于 Motion Transformer 的预测；</span></li><li><span style="color:#000000">定位模块：实现了基于激光雷达、惯性测量单位、全球定位系统等的单传感器定位和基于卡尔曼滤波器等过滤器的多传感器融合定位；</span></li><li><span style="color:#000000">规划模块：实现了基于 Lanelet2 的 FloodFill 路线规划算法、基于规则的行为规划算法、基于 Lattice Planner 和 EM Planner 的运动规划算法；</span></li><li><span style="color:#000000">控制模块：实现了经典的 PID 和 MPC 控制算法。</span></li></ul><p><img alt="" height="191" src="https://oscimg.oschina.net/oscnet/up-67074db82f46cb368c7d1d3418d532cc664.png" width="500" referrerpolicy="no-referrer"></p><p><em><span style="color:#000000">图 2. ISS 平台在 CARLA 仿真平台的 2D、3D 感知效果</span></em></p><p><span style="color:#000000">目前，已有来自国防科技大学、西南大学、奥地利数字安全实验室、德国萨尔大学等国内外知名高校的科研团队利用 ISS 平台进行研究。</span></p><p><span style="color:#000000">软件所可信智能系统团队后续将对 ISS 平台各个模块的功能继续进行扩展完善，包括加入自动驾驶可解释性分析、安全性验证、物理小车及联合仿真等功能。ISS 平台有望成为该领域有影响力的开源基础支撑平台，为国内外自动驾驶与可信人工智能等方向的研究团队提供支持。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 09:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268000</guid>
            <link>https://www.oschina.net/news/268000</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Blender 连续 5 天遭受大规模 DDoS 攻击]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Blender 发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.blender.org%2Fnews%2Fcyberattack-november-2023%2F" target="_blank">公告称</a>，blender.org 网站在 2023 年 11 月 18 日至 23 日期间持续受到 DDoS 攻击，攻击者通过不断发送请求致使网站服务器超载而瘫痪，导致网站运营严重中断。除了 blender.org 主网站外，其他一些服务也无法使用。</span></p><p><span style="color:#000000">该攻击由具有数百个 IP 地址的僵尸网络执行，发送超过 15 亿个恶意请求，峰值速率为 10 万 rps（每秒请求）。网站断断续续的可用了几天，但即使在攻击者暂停攻击的短时间内，Blender 的基础设施仍然因大量待处理的合法请求而超载，导致服务器难以跟上。</span></p><p><span style="color:#000000">在经过四天的抵御攻击之后 (11 月 21 日) 后，Blender 决定将其网站转移到了 CloudFlare，以减少攻击的影响。目前尚未有人声称对这次袭击负责，动机也未知。</span></p><p><span style="color:#000000">Blender 方面表示，此次攻击的重点是拒绝服务，项目和用户数据未受影响。</span></p><p><span style="color:#000000">攻击事件的具体时间线如下：</span></p><blockquote><ul><li><span style="color:#000000"><strong>2023-11-18&nbsp;</strong>blender.org 网站上初步展现出恶意流量的迹象，通过阻止违规地址得到缓解。</span></li><li><span style="color:#000000"><strong>2023-11-19 </strong>恶意流量加剧，导致 blender.org 网站的可用性间歇性中断。</span></li><li><span style="color:#000000"><strong>2023-11-20 </strong>由于流量过大，blender.org 的一些服务（开发者论坛、维基等）无法使用。屏蔽 IP 范围不再有效。</span></li><li><span style="color:#000000"><strong>2023-11-21 </strong>攻击达到全面规模，需要完全停止 blender.org 服务。决定转而使用专门的 DDoS 缓解服务。当日结束时，blender.org 网站恢复正常运行。</span></li><li><span style="color:#000000"><strong>2023-11-22 01:30 </strong>攻击仍在持续，峰值为每分钟超过 500 万个请求。虽然 www.blender.org 的大部分功能已恢复正常，但仍存在一些问题：</span><ul><li><span style="color:#000000">用户在访问网站之前可能会面临一个「challenge」，以验证自己不是机器人</span></li><li><span style="color:#000000">由于技术原因，blender.org（不带 www）仍然无法访问。用户想访问 Blender.org，需确保正确输入 www.blender.org</span></li><li><span style="color:#000000">有几个站点仍然不可用（代码、开发人员、文档、devtalk、下载、wiki 等），开发人员继续努力恢复。 </span></li></ul></li><li><span style="color:#000000"><strong>2023-11-22 10:30&nbsp;</strong>攻击已经停止。blender 继续致力于恢复所有其他受影响站点。</span></li><li><span style="color:#000000"><strong>2023-11-22 20:30 </strong>所有 blender.org 站点均已恢复在线并正常运行。但以此同时，另一次攻击又已经开始。</span></li><li><span style="color:#000000"><strong>2023-11-23 20:30</strong> 攻击已经停止。总共有超过 2.1B 个请求 (高达 100K rps) 得到了缓解。blender 认为该问题已解决，并且只有在 blender.org 上的用户体验受到影响时才会进一步报告。</span>&nbsp;</li></ul></blockquote><p><img alt="" height="288" src="https://oscimg.oschina.net/oscnet/up-affc1ae024c2e2724c7542ba5f0d983081b.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Blender 是一款免费开源的跨平台 3D 创作套件。使用 Blender，你可以创建 3D 可视化效果，例如静止图像，3D 动画，VFX 快照和视频编辑。它非常适合那些受益于其统一管线和响应式开发过程的个人和小型工作室。与其他 3D 建模工具相比，Blender 对内存和驱动的需求更低。其界面使用 OpenGL，在所有支持的硬件与平台都能提供一致的用户体验。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 08:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267990/blender-cyberattack-2023</guid>
            <link>https://www.oschina.net/news/267990/blender-cyberattack-2023</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LibreOffice Viewer 重新上架 Google Play 商店]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><a href="https://www.oschina.net/news/268085/libreoffice-7-6-3-and-android-viewer-app">LibreOffice 7.6.3</a>&nbsp;于昨日更新，与其同时发布的还有 Android 版 LibreOffice Viewer——已重新<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplay.google.com%2Fstore%2Fapps%2Fdetails%3Fid%3Dorg.documentfoundation.libreoffice" target="_blank">上架至 Google Play 商店</a>。</p><p>LibreOffice Viewer 是 LibreOffice 的轻量级版本，专为 Android 智能手机和平板电脑设计，用于查看 OpenDocument 和 Microsoft Office 格式文档。具体包括：</p><p>• 开放文档格式（odt、ods、odp、odg）<br> • Microsoft Office 2007–365（docx、xlsx 和 pptx）<br> • Microsoft Office 97–2003（doc、xls 和 ppt）</p><p>它与适用于 Windows、macOS 和 Linux 的 LibreOffice 桌面基于相同的 LibreOffice 技术构建，因此它以完全相同的方式显示文档。</p><p><strong>LibreOffice Viewer&nbsp; 运行截图</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-15b7f109e6f110504216473c4672024e086.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-3679fd58f40a452c8afc18ff4d22d3e811f.png" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.documentfoundation.org%2Fblog%2F2023%2F11%2F24%2Flibreoffice-viewer-app-for-android%2F" target="_blank">LibreOffice Viewer 此前曾上架 Google Play 商店</a>，但由于缺乏维护，于 2020 年被下架。此后，开发团队通过 200 多项变更来改进该应用程序，提升其稳定性和可用性，支持当前的 Android 版本并更好地与系统集成。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 05:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268087/libreoffice-viewer-app-for-android</guid>
            <link>https://www.oschina.net/news/268087/libreoffice-viewer-app-for-android</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LibreOffice 7.6.3 社区版发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LibreOffice 7.6 社区版发布了<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.documentfoundation.org%2Fblog%2F2023%2F11%2F23%2Flibreoffice-763-and-android-viewer-app%2F" target="_blank">第三个补丁更新：7.6.3</a></u>，支持 Windows（Intel/AMD 和 ARM 处理器）、macOS（Apple 和 Intel 处理器），以及 Linux 系统。</p><p><img height="522" src="https://static.oschina.net/uploads/space/2023/1125/125041_9KhN_2720166.png" width="970" referrerpolicy="no-referrer"></p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.libreoffice.org%2Fdownload%2Fdownload-libreoffice%2F" target="_blank">下载地址</a></u> | <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.documentfoundation.org%2FReleaseNotes%2F7.6" target="_blank">Release Notes</a></u></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">LibreOffice 7.6 引入的新功能包括：支持触摸板上的缩放手势、支持文档主题、导入和导出 ODF 和 OOXML 文档的主题定义的能力。LibreOffice 7.6 预计会发布总共 7 个维护版本更新，持续支持到 2024 年 6 月 12 日。</p><blockquote><p>延伸阅读：<strong><em><u><a href="https://www.oschina.net/news/267911/libreoffice-24-2-alpha1" target="news">LibreOffice 24.2 Alpha 1 发布，已启用新的版本号命名规则</a></u></em></strong></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 04:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268085/libreoffice-7-6-3</guid>
            <link>https://www.oschina.net/news/268085/libreoffice-7-6-3</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[eBPF 的发展演进 --- 从石器时代到成为神（一）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h2_1"></span><h2><span><span>1. 前言</span></span></h2><div><div><span><span>技术的发展往往是积跬步而至千里的。Linux 从 92 年诞生，发展至今已经覆盖大小各类的信息基础设施。是什么样的力量，让 Linux 能够始终保持发展活力，又如何看待 Linux 之上出现的新的技术趋势？</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>本文试图通过梳理 eBPF 的演进过程，探索 Linux 内核的发展动力来源与发展轨迹，与大家一同畅想 eBPF 给内核技术、Linux 生态带来的全新变局。</span></span></div><div>
   &nbsp; 
 </div></div><span id="OSC_h2_2"></span><h2><span><span>2. eBPF 概览</span></span></h2><div><span><span>2.1. </span></span><strong><span>实现原理</span></strong></div><div>
  &nbsp; 
</div><div><div><span><span>大家可能都知道图灵机，这是一个可计算理论模型，可以用来判断计算机的计算能力。图灵机是目前有可能实现的计算能力最强的理论模型，目前我们常用的计算机，理论上都是等价于图灵机的。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出现，是对计算能力的渴求，其原理就是通过 IR 模拟一台 RISC 指令集的计算机嵌入到内核中，将内核内部的静态编译逻辑转变为更加灵活的动态编译逻辑，使内核获得近似于图灵机的动态逻辑定制能力。而从 classic BPF 到 extended BPF 的发展，是将这一计算方式进一步夯实和通用化。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出现乃至到 eBPF 的进一步发展，为内核带来了巨大的改变，使内核具备了更加强大、可编程的动态变化的能力。这种能力在各种需要定制化的应用场景中，将发挥巨大的价值，既可以用于扩展功能，也可以用于优化性能。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在实现上，为适应不同业务场景的需求，使 eBPF 具备等价于一台 RISC 指令集计算机的计算能力，通过输入参数、Map 数据存储、Helper 帮助函数，构成了 eBPF 程序与内核交互的运行环境。eBPF 指令集的计算和控制能力、运行环境与内核的交互能力，两者叠加构成了 eBPF 程序强大的处理能力。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在安全方面，通过 Verifier 严格检查 eBPF 程序的可完成性、数据访问的合法性等，保证了 eBPF 程序与内核交互过程中内核不被挂起、核心数据不会被破坏。</span></span></div></div><div><div><span><span>BPF 发展过程中，由 cBPF 发展成为 eBPF 是一次大的技术升级。eBPF 在 cBPF 的基础上重新设计了指令集、引入了 JIT、增加了辅助函数，大大扩展了复杂逻辑的设计能力。虽然 eBPF 有巨大的进步，但是基本的底层设计还是一致的，因此两者统称为 BPF。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>由于 eBPF 兼容 cBPF，在未指定时，BPF 更多指 eBPF 所定义的内涵。后文用 BPF 泛指整个 BPF 相关的基础机制，eBPF 特指最新的 BPF 标准。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.2. </span></span><strong><span>技术特点</span></strong></div><div><div><span><span>BPF 还在快速发展，它的计算能力和完备性也在迅速提高，前景无限。但就具体的版本而言，却又呈现具体技术特点，主要是其支持的能力和受到的约束两个方面。以最新的 BPF 的技术标准 (v6.1) 为蓝本，介绍 BPF 的主要技术特点。</span></span></div><div>
   &nbsp; 
 </div></div><ul><li><div><span><span>RISC 指令集</span></span></div></li></ul><div><div><span><span>BPF 的核心是一个虚拟计算机，它采用类 RISC 指令集，支持跳转、算数运算、尾调用等基本操作。在运行 BPF 程序的计算机上，BPF 指令会被内核的 JIT 编译器动态编译为物理机原生指令，实现运行效率的「零」损耗。在支持 BPF 卸载的设备上，BPF 程序也可以卸载到设备上执行。在 BPF 的指令集中还支持伪调用指令，可以调用到内核帮助函数。</span></span></div></div><div><div><span><span>同时，BPF 的指令的编码空间中还有大量的储备，未来根据需要一定还会继续增加指令，提升 BPF 实现复杂逻辑的能力。</span></span></div></div><ul><li><div><span><span>Map</span></span></div></li></ul><div><div><span><span>基于键值对的数据存储机制，可用于实现内核、用户态的数据存储和交换。</span></span></div></div><ul><li><div><span><span>Helper 函数</span></span></div></li></ul><div><div><span><span>专用于 BPF 程序调用的函数接口，用于封装内核中的功能，使 BPF 程序可以和内核互操作，同时保持 BPF 程序和内核的安全隔离。</span></span></div></div><ul><li><div><span><span>BPF 子程序</span></span></div></li></ul><div><div><span><span>实现了 BPF 程序之间的调用。</span></span></div></div><ul><li><div><span><span>上下文</span></span></div></li></ul><div><div><span><span>BPF 程序的语境和运行上下文，是一种内部透明的数据结构。只有在明确 BPF 程序的类型时，上下文的定义和内部数据结构才是确定的。不同的 BPF 程序类型，上下文也各不相同。</span></span></div></div><ul><li><div><span><span>CO-RE</span></span></div></li></ul><div><div><span><span>通过运行时类型支持，实现一次编译、随处运行。</span></span></div></div><ul><li><div><span><span>支持特权和非特权级两类运行模式</span></span></div></li></ul><div><div><span><span>分为特权级（百万 ins）和非特权级（4096ins）两类运行方式。</span></span></div></div><div><div><span><span>特权级模式下 BPF 程序可以获得更宽的权限，实现更复杂的逻辑功能。</span></span></div></div><ul><li><div><span><span>保证向后兼容</span></span></div></li></ul><div><div><span><span>这一原则对于 BPF 的推广应用非常重要，可以保证旧标准的 BPF 程序在新标准下也可以正确执行。但同时，也对未来 BPF 发展带来了约束，只有把握好 BPF 的发展方向，做好底层设计，才能两者得到兼顾。</span></span></div></div><div><div><span><span>比如，从老版本遗留下来的 cBPF 程序在 eBPF 中都会被 JIT 正确翻译和执行。</span></span></div></div><ul><li><div><span><span>稳定的 ABI</span></span></div></li></ul><div><div><span><span>BPF 稳定的 ABI 包括，BPF 程序类型对应的输入参数定义，可调用的内核帮助函数定义，返回值定义等。使用稳定的 ABI 的 BPF 程序，可保证与不同版本的内核都是兼容的。</span></span></div></div><div><div><span><span>另外，BPF 还在快速发展中，它的功能特性需要逐步释放，因此目前还有诸多限制，其中有些是基于安全、可靠性考虑，有些是没有超出范围的应用需求的保守设计等等。随着安全机制的完善、应用程序的扩展、生态体系的成熟，相应的限制也会逐步的改变。</span></span></div></div><div><div><span><span>目前的实现中，有如下限制：</span></span></div></div><ul><li><div><span><span>总运行时间有界</span></span></div></li></ul><div><div><span><span>有界性这是基本原则，应该在比较长的时间内都不会改变。但是，在不改变有界性的前提下，根据具体需要适当调整更合理的上限，这是存在极大可能的。</span></span></div></div><ul><li><div><span><span>指令总数限制</span></span></div></li></ul><div><div><span><span>非特权用户最大指令数 4096，特权用户最大指令数 1 百万。</span></span></div></div><ul><li><div><span><span>分支数限制</span></span></div></li><li><div><span><span>BPF 调用嵌套层次限制</span></span></div></li><li><div><span><span>Map 实例数限制</span></span></div></li><li><div><span><span>验证状态数限制</span></span></div></li><li><div><span><span>最大分支数限制</span></span></div></li><li><div><span><span>堆栈长度限制</span></span></div></li></ul><div><div><span><span>目前支持的堆栈最大长度为 512 字节。</span></span></div></div><ul><li><div><span><span>上下文限制</span></span></div></li></ul><div><div><span><span>每一种类型的 BPF 程序，都有其对应输入参数定义，彼此不同。也就是说，BPF 程序只能接受特定的输入并进行处理，不能访问内核的全部状态空间。</span></span></div></div><ul><li><div><span><span>辅助函数限制</span></span></div></li></ul><div><div><span><span>每一个 BPF 程序类，都有其对应的辅助函数集合。这些辅助函数，由内核各子系统提供，是 BPF 程序类上下文的一部分。它们帮助 BPF 程序与内核各子系统交互，同时又保护内核不会被破坏。</span></span></div></div><div><div><span><span>上面赘述了很多特性，大家可能会有很多疑问，比如：</span></span></div></div><div><div><span><span>为什么采用精简指令集呢？因为这是目前最主流的指令集类型，相对于复杂指令集，精简指令集更有利于实现更高密度、更高吞吐量、更高主频的处理器。因此 x86 之后出现的新型指令集系统，绝大多数都是精简指令集，包括现在的开源指令集 RISC-V。</span></span></div></div><div><div><span><span>为什么不采用原生的指令集呢？</span></span></div></div><div><div><span><span>为什么 5 个参数寄存器呢？</span></span></div></div><div><div><span><span>本篇暂不深入讨论，后续主题涉及到的时候再详细讲解。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.3. </span></span><strong><span>应用价值</span></strong></div><div><div><span><span>BPF 的应用价值与其动态和可定制特性强相关。</span></span></div></div><div><div><span><span>内核研发中一直坚守的原则是：「机制与策略分离」，即：内核负责提供机制，将策略开放给上层。在机制与策略之间需要一层界面来进行交互。</span></span></div></div><div><div><span><span>系统调用是最初方案。它是单向发起的，缺少事件模型。</span></span></div></div><div><div><span><span>虚拟文件系统，提供了双向的交互方式，但难以灵活定制复杂的逻辑。</span></span></div></div><div><div><span><span>由于软件功能越来越复杂，无法用简单规则来表达，软件的基础功能设施与业务逻辑，需要进行解偶。而业务逻辑部分，需要根据业务定制，因此很适合用 BPF 实现。比如：</span></span></div></div><ul><li><div><span><span>过滤器</span></span></div></li><li><div><span><span>权限检查</span></span></div></li><li><div><span><span>模糊测试</span></span></div></li></ul><div><div><span><span>等类型的功能，比较适合用 BPF 实现。另外，视具体问题，也可以应用于：</span></span></div></div><ul><li><div><span><span>调度算法</span></span></div></li><li><div><span><span>用户态交互（替代系统调用，实现更加可变的服务逻辑）</span></span></div></li><li><div><span><span>加载器、模拟器、兼容层</span></span></div></li><li><div><span><span>轻量化内核</span></span></div></li><li><div><span><span>多态内核</span></span></div></li><li><div><span><span>启动方式</span></span></div></li></ul><div><div><span><span>每一种业务类型都有其独具特征的逻辑模型，通过更形式化地定义这些业务模型，可以更好地理解它们和 BPF 的结合性，找到更好的实现方案，充分发挥 BPF 带来的强大能力。后续篇章，我们会对典型的应用模型进行更深入的讨论，以及 BPF 在这些应用场景中，应该在哪些特性方面进行加强或改进。</span></span></div></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4450925/blog/8685883</guid>
            <link>https://my.oschina.net/u/4450925/blog/8685883</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Spring Boot 3.2.0 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#000000">Spring Boot 3.2.0 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F11%2F23%2Fspring-boot-3-2-0-available-now" target="_blank">发布</a>，此版本添加了大量新功能和改进。</span></p><p><span style="background-color:#ffffff; color:#000000">3.2 版本的一些<strong>亮点</strong>包括：</span></p><ul><li>支持虚拟线程</li><li>对 <span style="background-color:#ffffff; color:#333333">JVM Checkpoint Restore<span>&nbsp;</span></span>的初步支持（项目 CRaC）</li><li>SSL 捆绑包重新加载</li><li>大量可观察性改进</li><li>支持 RestClient</li><li>支持 JdbcClient</li><li>支持 Jetty 12</li><li>Apache Pulsar 对 Spring 的支持</li><li>对 Kafka 和 RabbitMQ 的 SSL 捆绑支持</li><li>重新设计的嵌套 Jar 处理</li><li>Docker 镜像构建改进</li></ul><p><strong>依赖升级</strong></p><p><span><span>Spring Boot 3.2 升级到了多个 Spring 项目的新版本，并且还尽可能升级到了其他第三方库的最新稳定版本。有关详细信息，可参阅<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot%2Fwiki%2FSpring-Boot-3.2.0-Release-Notes%23dependency-upgrades" target="_blank">发行说明</a>。</span></span></p><hr><p><span><span>一些</span></span><span style="background-color:#ffffff; color:#000000">其他更改和改进内容可查看&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot%2Fwiki%2FSpring-Boot-3.2.0-Release-Notes" target="_blank">release notes</a>。</p><p><strong>介绍视频：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DdMhpDdR6nHw" target="_blank">https://www.youtube.com/watch?v=dMhpDdR6nHw</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267934/spring-boot-3-2-0-released</guid>
            <link>https://www.oschina.net/news/267934/spring-boot-3-2-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.1 - 数据脱敏支持语义类型和脱敏算法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>数据脱敏支持自定义脱敏算法和语义类型。 <img src="https://oscimg.oschina.net/oscnet/up-1585b72201b92b51627496f6baf9671402c.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🔔 重大变更</h2><ul><li>用户页面的 URL 由 <code>/u/{uid}</code> 变更为 <code>/users/{email}</code>。</li><li>工作空间的所有者和开发者分别更名为：管理员和成员。 <img src="https://oscimg.oschina.net/oscnet/up-82d69e61f7501b0b1e11ac2bbd6e2f231e4.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🎄 改进</h2><ul><li><p>SQL 编辑器支持显示表的 DDL 语句（MySQL, PostgreSQL 和 TiDB）。 <img src="https://oscimg.oschina.net/oscnet/up-d913361c2eae9e174893e134b791ad8493b.png" alt="file" referrerpolicy="no-referrer"></p></li><li><p>提升了启用数据脱敏时的查询速度。</p></li><li><p>支持在工单<strong>待发布</strong>或<strong>审批通过</strong>的时候发送 webhook 通知。</p></li><li><p>改进了 Oracle Parser 用以支持存储过程和分区表。</p></li><li><p>优化了工单过滤功能。</p></li><li><p>优化了工单指派人功能。</p></li><li><p>优化了 Schema 编辑器的性能。</p></li></ul><p>📕 安装及升级，参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升级指南</a>。如果从之前版本升级，获取新版本后，重新启动升级即可。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10150991</guid>
            <link>https://my.oschina.net/u/6148470/blog/10150991</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英伟达推迟发布中国特供版 AI 芯片]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fnvidia-delays-launch-new-china-focused-ai-chip-sources-2023-11-24%2F" target="_blank">根据路透社的独家报道</a></u>，两名知情人士透露，英伟达已通知中国客户，<strong>其为遵守美国出口规定而设计的新款 AI 芯片将推迟到明年第一季度发布</strong>。</p><blockquote><p>前情提要：<strong><em><u><a href="https://www.oschina.net/news/265728">英伟达或将推出针对中国区的最新改良版 AI 芯片</a></u></em></strong></p></blockquote><p>英伟达将特供三款 AI 芯片 <strong>HGX H20、L20 PCle 和 L2 PCle</strong>，它们全都由 H100 改良而来，<strong>推迟发布的是其中最强大的 H20，有可能延迟到明年 2 月或 3 月</strong>。</p><p><img src="https://oscimg.oschina.net/oscnet/up-edecf0f4b0f979b064fa454bfd31a0ec4e3.png" referrerpolicy="no-referrer"></p><p>知情人士称，推迟的原因被告知是服务器制造商在集成芯片上遇到问题。另外两款芯片中 L20 不会延期， 按照原定计划供货，L2 情况未知。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268075</guid>
            <link>https://www.oschina.net/news/268075</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GIMP 3.0 预计明年 5 月发布，下月中旬冻结功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今年年初，GIMP 开发团队表示会在 2023 年发布 GIMP 3.0，或者至少发布 RC 版本，但不幸的是这个计划没有实现。</p><blockquote><p>相关阅读：<br><strong><em><u><a href="https://www.oschina.net/news/247312/gimp-3-0-rc-in-2023" target="_blank">GIMP 3.0 计划今年发布首个 RC</a></u></em><br><u><em><a href="https://www.oschina.net/news/226425/gimp-3-0-plans-in-2023">GIMP 3.0 计划今年推出，GTK+3 移植已基本完成</a><br><a href="https://www.oschina.net/news/250125/gimp-dev-completes-gtk3-port">GIMP 最新开发版已完成 GTK3 移植</a></em></u></strong></p></blockquote><p>GIMP 核心开发者和维护者 Jehan Pages&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.patreon.com%2Fposts%2Ffinale-countdown-93295511" target="_blank">本周宣布</a></u>了在明年 5 月的<em>« Libre Graphics Meeting »</em>会议上发布 GIMP 3.0 的新计划。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-5d66d782cdcf2e652456c9f1eb96d8155f6.png" referrerpolicy="no-referrer"></p></blockquote><p>按照他们公布的计划，GIMP 开发团队会在今年 12 月发布最终的 <strong>GIMP 2.99.xx 开发版</strong>，然后在几个月后发布 RC 版本，最终在明年五月完成 GIMP 3.0 的开发。</p><p>为了确保 GIMP 稳定性，<strong>其开发团队计划 12 月中旬开始冻结功能，然后用大约 5 个月集中精力修复 bug</strong>。据称，该软件现存的 bug 已经超过 4000 个，其中有 624 个是关于导致崩溃的。</p><p>在即将发布的 3.0 版本中，该软件将迎来「非破坏编辑」功能：允许用户对图像进行更改，而不会覆盖原始图像数据，原始图像数据将保持可用状态，以便用户在需要时恢复。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e25676c183a4c3051eab67adf7266d77e49.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-020dab40bdbb8b6195a42610503e1db1a62.png" referrerpolicy="no-referrer"></p><p>GIMP 3.0 使用 GTK3 进行重构，并且支持 Wayland，同时还有许多其他的改进和功能增强。对于这个版本，广大用户已经期待了十年，希望 GIMP 3.0 能够在明年春天如期发布。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268067/gimp-3-0-may-2024-schedule</guid>
            <link>https://www.oschina.net/news/268067/gimp-3-0-may-2024-schedule</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
