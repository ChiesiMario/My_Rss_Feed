<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 28 Sep 2023 02:12:03 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[DamiBus v0.29 发布，本地多模块解耦框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; text-align:start">DamiBus，专为<span style="background-color:#f1c40f">本地多模块</span>之间通讯<span style="background-color:#f1c40f">解耦</span>而设计（尤其是未知模块、隔离模块、领域模块）。零依赖，特适合 DDD。</p><h3>特点</h3><p style="color:#24292e; text-align:start">结合 Bus 与 RPC 的概念，可作事件分发，可作接口调用，可作异步响应。</p><ul><li>支持事务传导（同步分发、异常透传）</li><li>支持事件标识、拦截器（方便跟踪）</li><li>支持监听者排序、附件传递（多监听时，可相互合作）</li><li>支持 Bus 和 Api 两种体验风格</li></ul><h3>与常见的 EventBus、ApiBean 的区别</h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,"><tbody><tr><th>&nbsp;</th><th>Dami</th><th>EventBus</th><th>Api</th><th>Dami 的情况说明</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">广播</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">无</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发送 (send) + 监听 (listen) 以及 Api 模式</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">应答</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">无</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发送并等响应 (sendAndResponse) + 监听 (listen) + 答复 (reply) 以及 Api 模式</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">回调</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有+</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">无</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">有-</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发送并等回调 (sendAndCallback) + 监听 (listen) + 答复 (reply)</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">耦合</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">弱-</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">弱+</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">强++</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td></tr></tbody></table><p style="color:#24292e; text-align:start">如果涉及类加载器隔离：请在主程序标为编译，在其它模块标为可选。</p><h3>本次更新了什么？</h3><ul><li>TopicRouterPatterned 增加排序支持</li><li>TopicRouterPatterned 分离路由能力，可定制</li><li>增加基于 Tag 的路由模式定制</li><li>增加 @DamiTopic:index 注解属性</li><li>dami-springboot-starter，增加 spronboot 2.0 的兼容</li><li>修复 dami-springboot-starter 实现类被代理后不能正常注册与注销的问题</li></ul><p style="color:#24292e; text-align:start">新增加的定制效果（详见仓库主页。也可按需定制自己的 Routing）：</p><pre><code class="language-java"><span style="color:#a626a4">public</span><span style="color:#a626a4">class</span><span style="color:#c18401">Demo15_path</span> {
    <span style="color:#a626a4">public</span><span style="color:#a626a4">void</span><span style="color:#4078f2">main</span><span>()</span>{
        <em>//切换为模式匹配路由器 + RoutingPath（支持 * 和 ** 占位符；支持 / 或 . 做为间隔）</em>
        DamiConfig.configure(<span style="color:#a626a4">new</span><span style="color:#c18401">TopicRouterPatterned</span>(RoutingPath::<span style="color:#a626a4">new</span>));

        <em>//拦截</em>
        Dami.bus().listen(<span style="color:#50a14f">"demo/a/*"</span>, (payload) -&gt; {
            System.err.println(payload);
        });

        <em>//发送事件</em>
        Dami.bus().send(<span style="color:#50a14f">"demo/a/1"</span>, <span style="color:#50a14f">"world1"</span>);
        Dami.bus().send(<span style="color:#50a14f">"demo/a/2"</span>, <span style="color:#50a14f">"world2"</span>);
    }
}
</code></pre><pre><code class="language-java"><span style="color:#a626a4">public</span><span style="color:#a626a4">class</span><span style="color:#c18401">Demo15_tag</span> {
    <span style="color:#a626a4">public</span><span style="color:#a626a4">void</span><span style="color:#4078f2">main</span><span>()</span>{
        <em>//切换为模式匹配路由器 + RoutingTag（":"前为主题，后按 "," 号分割作为 tag）</em>
        DamiConfig.configure(<span style="color:#a626a4">new</span><span style="color:#c18401">TopicRouterPatterned</span>(RoutingTag::<span style="color:#a626a4">new</span>));

        <em>//拦截</em>
        Dami.bus().listen(<span style="color:#50a14f">"demo.a:id"</span>, (payload) -&gt; {
            System.err.println(payload);
        });

        <em>//发送事件</em>
        Dami.bus().send(<span style="color:#50a14f">"demo.a:id"</span>, <span style="color:#50a14f">"world1"</span>);
        Dami.bus().send(<span style="color:#50a14f">"demo.a:id,name"</span>, <span style="color:#50a14f">"world2"</span>);
    }
}
</code></pre><p style="color:#24292e; text-align:start">疑问： 为什么不用分布式消息队列呢？不好意思，真的是不同的维度。</p><h3>项目地址</h3><ul><li><a href="https://gitee.com/noear/dami">https://gitee.com/noear/dami</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fdami" target="_blank">https://github.com/noear/dami</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 09:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259748/damibus-0-29-released</guid>
            <link>https://www.oschina.net/news/259748/damibus-0-29-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Windows Terminal Preview 1.19 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Windows Terminal Preview 1.19 现已</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fwindows-terminal-preview-1-19-release%2F" target="_blank">发布</a><span style="background-color:#ffffff; color:#333333">，引入了 Broadcast Input、Web Search、Suggestions UI 等新功能。具体更新内容如下：</span></p><h4 style="text-align:left"><strong><span style="background-color:#ffffff; color:#333333">Broadcast Input</span></strong></h4><p style="text-align:left"><span style="background-color:#ffffff; color:#333333">Broadcast Input&nbsp;</span><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>允许将一个终端窗格的内容 broadcast 到选项卡中的所有其他窗格。要打开 Broadcast Input，可在命令面板中选择「Toggle broadcast input to all panes」。你还可以将 </span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#333333">Broadcast Input&nbsp;</span><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>设置为键绑定操作。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="287" src="https://oscimg.oschina.net/oscnet/up-677b61dfac1cc8e255a496d963955cbf26c.gif" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Web Search</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></h4><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Web Search 已作为选项添加到右键单击上下文菜单中。Web 搜索允许用户在其终端中对所选文本进行 Web 搜索。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>要启用右键单击上下文菜单，需在<code><span><span>settings</span></span><span><span>.</span></span><span><span>json</span></span></code>文件的<code><span><span>profiles</span></span></code>中添加以下<code><span><span>defaults</span></span></code>对象：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="text-align:left"><code><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"profiles"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">{</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"defaults"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">{</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"experimental.rightClickContextMenu"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#000088"><span style="color:#000088">true</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">},</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">...</span></span></code></pre><p style="text-align:left"><img alt="" height="146" src="https://oscimg.oschina.net/oscnet/up-7eb5757388c416383d39686779ac321b342.gif" width="500" referrerpolicy="no-referrer"></p><p><span><span><span><span><span><span><span>默认情况下，Web 搜索将在必应上进行搜索。如果想让 Web Search 查询其他 URL，可在</span></span></span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><code><span><span>settings</span></span><span><span>.</span></span><span><span>json</span></span></code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span>文件中添加</span></span></span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><code><span><span>"searchWebDefaultQueryUrl"</span></span></code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span>作为全局变量，并将其设置为不同的 URL。下面是该设置的默认值示例：</span></span></span></span></span></span></span></p><pre style="text-align:left"><span><span><span><span><span style="color:#212529"><span style="background-color:#f0f0f0 !important"><span><span><span><span><span><span><span><span><code><span><span><span style="color:#0c6d22"><span><span><span style="color:#0c6d22">"searchWebDefaultQueryUrl"</span></span></span></span></span></span><span><span><span style="color:#666600"><span><span><span style="color:#666600">:</span></span></span></span></span></span><span><span><span style="color:#0c6d22"><span><span><span style="color:#0c6d22">"https://www.bing.com/search?q=%22%s%22"</span></span></span></span></span></span></code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此功能也可以作为<code><span><span>webSearch</span></span></code>操作使用。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 style="text-align:left"><strong><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>命令提示符中的 Emoji 支持</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>现在支持在命令提示符中输入表情符号。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="301" src="https://oscimg.oschina.net/oscnet/up-4f83af5b0b706784d40ecffbe224cb88e63.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4><strong>Unfocused Acrylic</strong></h4><p>现在支持&nbsp;unfocused acrylic。效果图：</p><p><img alt="" height="217" src="https://oscimg.oschina.net/oscnet/up-fe9fc340cad5275b79e829718ba2f173e28.gif" width="500" referrerpolicy="no-referrer"></p><p>以下是用于这些设置的 JSON 代码段：</p><pre style="text-align:left"><code><span style="color:#0c6d22"><span style="color:#0c6d22">"opacity"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#006666"><span style="color:#006666">85</span></span><span style="color:#666600"><span style="color:#666600">,</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"useAcrylic"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#000088"><span style="color:#000088">true</span></span></code></pre><h4 style="text-align:left"><strong>Suggestions UI</strong></h4><p>Suggestions UI 是一个新的 UI 元素，可为用户提供不同类型的文本建议。这些建议可以是命令历史记录、已保存命令等任何内容！</p><p>Suggestions UI 要求在终端中启用 Shell 集成。</p><p style="text-align:left"><strong><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>启用 Shell 集成</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>启用 Shell 集成分为两个步骤。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>在<code><span><span>settings</span></span><span><span>.</span></span><span><span>json</span></span></code>文件中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fwindows%2Fterminal%2Ftutorials%2Fshell-integration%23how-to-enable-shell-integration-marks%2F" target="_blank">启用 shell integration marks</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>编辑<code><span><span>prompt</span></span></code>，以确保终端获知有关 CWD 的信息，并在<code><span><span>prompt</span></span></code>上使用适当的标记标记提示。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fwindows%2Fterminal%2Ftutorials%2Fshell-integration%23powershell-pwshexe%2F" target="_blank">PowerShell</a>&nbsp;和&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fwindows%2Fterminal%2Ftutorials%2Fshell-integration%23command-prompt%2F" target="_blank">Command Prompt</a>&nbsp;<span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>中的执行方式有所不同。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li></ul><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>有关启用 shell 集成的更多信息，可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fwindows%2Fterminal%2Ftutorials%2Fshell-integration%2F" target="_blank">启用 shell 集成教程</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><strong><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>在 Suggestions UI 中使用&nbsp;Command History</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>启用 Shell 集成后，你将需要创建一个新<code><span><span>showSuggestions</span></span></code>操作，该操作将显示&nbsp;&nbsp;Suggestions UI，并将你的 command history&nbsp;作为其建议源。这应该在<code><span><span>settings</span></span><span><span>.</span></span><span><span>json</span></span></code> 文件的操作中完成。下面是一个示例：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="text-align:left"><code><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"actions"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">[</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">{</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"command"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">{</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"action"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"showSuggestions"</span></span><span style="color:#666600"><span style="color:#666600">,</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"source"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"commandHistory"</span></span><span style="color:#666600"><span style="color:#666600">,</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"useCommandline"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#000088"><span style="color:#000088">true</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">},</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"keys"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"ctrl+h"</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">}</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">],</span></span></code></pre><p style="color:#333333; text-align:left"><img alt="" height="353" src="https://oscimg.oschina.net/oscnet/up-050c1ea51c4cf3854d7ce175cf4e8763d3c.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:left"><strong><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>在 Suggestions UI 中使用 SendInput Actions</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Suggestions UI 还可以使用<code><span><span>sendInput</span></span></code>actions 作为建议源。<code><span><span>sendInput</span></span></code>actions 是一种将文本输入发送到 shell 的操作。如果为自己喜​​欢的命令创建了一堆<code><span><span>sendInput</span></span></code>actions，那么将不再需要在每次使用时都进行键入。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="text-align:left"><code><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">{</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"command"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">{</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"action"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"showSuggestions"</span></span><span style="color:#666600"><span style="color:#666600">,</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"source"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"all"</span></span><span style="color:#666600"><span style="color:#666600">,</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"useCommandline"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#000088"><span style="color:#000088">true</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">},</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"keys"</span></span><span style="color:#666600"><span style="color:#666600">:</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#0c6d22"><span style="color:#0c6d22">"ctrl+y"</span></span><span style="color:#000000"><span style="color:#000000"></span></span><span style="color:#666600"><span style="color:#666600">},</span></span></code></pre><p style="color:#333333; text-align:left"><img alt="" height="355" src="https://oscimg.oschina.net/oscnet/up-205ff08b8ada0cee30bd2a137b1e2cf5bf0.gif" width="500" referrerpolicy="no-referrer"></p><p style="text-align:left"><strong><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>实验性 Shell Completion Menu</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Suggestions UI 还可以显示来自 PowerShell 7 中的 Predictors 的建议。可通过使用 shell completion protocol 修改 PowerShell 配置文件，并向<code><span><span>settings</span></span><span><span>.</span></span><span><span>json</span></span></code>文件添加一些内容，以启用该功能。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>开发团队目前正在迭代不同的 shell completion protocol，以允许用户更轻松地启用此功能。有关如何设置此功能的更多信息，可查看 GitHub 存储库中有关</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#333333"><span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fterminal%2Fwiki%2FExperimental-Shell-Completion-Menu" target="_blank">Experimental Shell Completion Menu</a><span style="background-color:#ffffff; color:#333333"><span>&nbsp;</span></span><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fterminal%2Fwiki%2FExperimental-Shell-Completion-Menu" target="_blank">的 Wiki。</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="355" src="https://oscimg.oschina.net/oscnet/up-4f05c19046c60d39377ec6575e789d05988.gif" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcommandline%2Fwindows-terminal-preview-1-19-release%2F" target="_blank">查看官方博客</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 06:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259716/windows-terminal-preview-1-19-released</guid>
            <link>https://www.oschina.net/news/259716/windows-terminal-preview-1-19-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Firefox 118.0 发布，本地翻译支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Firefox 118 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2F118.0%2Freleasenotes%2F" target="_blank">发布</a>了。</span><span style="color:#000000"><span style="background-color:#ffffff">原本计划在 Firefox 117 中引入的</span><span style="background-color:#ffffff">本地、隐私友好的翻译功能现已正式上线，但暂不支持中文翻译。</span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="268" src="https://oscimg.oschina.net/oscnet/up-3a6998b3a1464d8961dc6730cb4cfc248c7.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="452" src="https://oscimg.oschina.net/oscnet/up-f907e94a169be672e30ea2725b1e15f3dae.png" width="300" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">具体更新内容包括：</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>New</strong></p><ul><li><span>Firefox 用户现在可以使用网页内容的自动翻译。与基于云的替代方案不同，翻译是在 Firefox 本地完成的，因此正在翻译的文本不会离开你的机器。</span></li><li><span>Firefox 中的 Web Audio 现在在所有系统上使用 FDLIBM 数学库，以通过<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.mozilla.org%2Fkb%2Ffirefox-protection-against-fingerprinting" target="_blank">指纹保护</a>提高匿名性。</span></li><li><span>网站字体的可见性仅限于系统字体和语言包字体，以减少隐私浏览窗口中的字体指纹识别。</span></li><li><span>Firefox 用户现在可以在 Google Meet 上使用视频效果和背景模糊！（注：这些效果也已追溯发布，以支持 Firefox 115 之前的 Firefox 版本。）</span></li><li><span>Firefox Suggest 用户（目前仅限美国）现在可以根据其关键字在地址栏中看到浏览器插件建议。</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Fixed</strong></p><ul style="margin-left:0; margin-right:0"><li><p style="margin-left:0; margin-right:0"><span>各种<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Fsecurity%2Fadvisories%2Fmfsa2023-41%2F" target="_blank">安全</a>修复。</span></p></li></ul><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><strong style="color:#333333">Web Platform</strong></p><ul><li>新增<span> 10 个 CSS 数学函数：round、mod、rem、pow、sqrt、hypot、log、exp、abs、sign。</span></li><li><span>现在默认启用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fannevk%2Forb" target="_blank">OpaqueResponseBlocking 。</a></span></li></ul><p><span style="background-color:#ffffff; color:#333333">详情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2F118.0%2Freleasenotes%2F" target="_blank">查看发布说明</a><span style="background-color:#ffffff; color:#333333">。</span>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 06:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259707/firefox-118-released</guid>
            <link>https://www.oschina.net/news/259707/firefox-118-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Qt 6.6 RC 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Qt 6.6 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.qt-project.org%2Fpipermail%2Fannounce%2F2023-September%2F000445.html" target="_blank">发布</a>了 RC 版本，正式版计划于 10 月 10 日推出。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0927/110536_Yt3F_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p><span style="background-color:#ffffff; color:#333333">Qt 是一个跨平台的应用程序开发框架，广泛用于创建图形用户界面、嵌入式系统和移动应用等。Qt 6 是 Qt 的最新版本，于 2022 年 12 月发布，带来了许多新特性和改进，如更强大的 QML 语言、更灵活的图形架构和更高效的内存管理等。</span></p><p>Qt 6.6 在 Qt 6.5 的基础上，引入了一些新的模块和功能，同时修复了一些已知的问题和错误。</p><p>其中最引人注目的新模块是 Qt Graphs ，它是 Qt Data Visualization 模块的替代品，用于创建各种类型的二维和三维图表，如折线图、柱状图、饼图、散点图等。Qt Graphs 使用 Qt Quick 3D 进行渲染，并支持原生的图形后端，如 OpenGL、Vulkan、Metal 和 Direct3D 。Qt Graphs 最终将提供大部分或全部 Qt Data Visualization 所提供的功能。</p><p>另一个值得关注的新功能是 Text To Speech 模块 ，它用于将文本转换为语音，并支持多种语言和发音。Text To Speech 模块在 Qt 6.6 Beta 中得到了改进，增加了对 Windows 平台上 Microsoft Speech API (SAPI) 5 的支持，从而提高了语音质量和可靠性。</p><p>Qt 6.6 其他关注的新功能：</p><ul><li>更强大的 Wayland 合成器体验</li><li>支持 Qt GUI Module 以直接访问所用字体的 OpenType 功能</li><li>Qt 渲染硬件接口的 QRhi 系列类现在有了完整的文档</li><li>Qt Quick Shapes 模块添加了实验性曲线渲染后端</li><li>支持使用 Qt Quick 3D 导入 PLY 文件</li><li>对 Qt Quick 3D 的初步渲染扩展支持</li><li>Qt SQL 添加了 Mimer SQL 插件</li><li>改进 Qt TextToSpeech</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc-snapshots.qt.io%2Fqt6-dev%2Fwhatsnew66.html" target="_blank">详情</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259679/qt-6-6-rc</guid>
            <link>https://www.oschina.net/news/259679/qt-6-6-rc</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[新一代大数据管家 DataSophon 1.2.0 正式发版]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div>
 &nbsp; 
 <p><img height="460" src="https://oscimg.oschina.net/oscnet/up-ea832d28ab7b0caa45aa676aa2620842b62.png" width="1080" referrerpolicy="no-referrer"></p></div><div><span>现在普遍认为是后&nbsp;Hadoop&nbsp;时代，CDH 的停更和闭源导致传统的 Hadoop 体系组件栈没有一个</span><span>称手好用的管理工具，越来越多新一代的大数据项目也在层出不穷, 同样也需要运维和管理，并且需要适配云原生的能力。不管技术如何演进都面临组件栈管理的问题，鉴于此 DataSophon&nbsp;作为 Datavane&nbsp;开源组织的推荐项目重磅开源。</span></div><div><p style="margin-left:0; margin-right:0; text-align:justify"><br><span><span style="background-color:#ffffff; color:#333333"><span style="background-color:#ffffff; color:#333333"><strong><span style="background-color:#ffffff; color:#333333"><span style="background-color:#ffffff; color:#333333">DataSophon 是一个国产开源的大数据管理平台</span><span style="background-color:#ffffff; color:#333333">，在兼顾传统 Hadoop 组件的同时又支持新一代大数据组件栈，并且支持云原生的能力<span style="background-color:#ffffff; color:#333333">，</span></span></span><span style="background-color:#ffffff; color:#333333">致力于快速实现大数据组件部署、管理、监控以及自动化运维管理</span></strong><strong><span style="background-color:#ffffff; color:#333333">，旨在帮助用户快速构建稳定、高效、自愈、可弹性伸缩的大数据云原生平台</span></strong>。项目</span><span style="background-color:#ffffff; color:#000000">自开源以来</span><span style="background-color:#ffffff; color:#333333">，得到了很大关注</span></span><span style="color:#333333"><span style="background-color:#ffffff; color:#333333">，社区发展迅速<span style="background-color:#ffffff; color:#333333">，</span></span>近日 DataSophon<span>&nbsp;</span>社区正式发布了 1.2.0 版本，带来了诸多改进和新功能的更新，<span style="background-color:#ffffff">具备更高的可用性和稳定性，</span>欢迎大家下载使用。</span></span></p><div><div><div><div><div><div><div><div><div><div>
           &nbsp;
          </div></div></div></div></div></div></div></div></div></div><p><span style="color:#646464"><strong><span>Github:&nbsp;</span></strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatasophon" target="_blank"><u>https://github.com/datavane/datasophon</u></a></p><p><strong>Gitee</strong>: <u><a href="https://gitee.com/datavane/datasophon" target="_blank">https://gitee.com/datavane/datasophon</a></u></p><p><span style="color:#444444">欢迎&nbsp;</span><strong><span style="color:#444444">使用、关注、star、fork</span></strong><span style="color:#444444">&nbsp;</span></p><p>&nbsp;</p><h1><span style="color:#0052ff"><strong>新特性解读</strong></span></h1><p><br><span><strong><span style="background-color:#ffffff">1.2.0 版本，作为 DataSophon 开源之后发布的第一个版本</span></strong><span><span style="background-color:#ffffff">，因此团队非常重视。在该版本全面支持了 Apache Doris，通过 DataSophon 可以便捷的部署、管理、监控 Doris。除此以外本次</span><span><span style="background-color:#ffffff">新增了初始化模块，可以自动完成集群环境初始化工作，避免因环境不一致导致集群安装失败的问题；还<span style="background-color:#ffffff">优化服务指令执行流程等... </span></span><span><span style="background-color:#ffffff">该版本新增了诸多新功能、优化和修复了很多问题</span><span style="background-color:#ffffff">。</span></span></span></span></span><br> &nbsp;</p><h3><span style="color:#000000"><strong>1. 全面支持 Apache Doris</strong></span></h3><p style="margin-left:0px; margin-right:0px; text-align:justify"><span><span>Apache Doris&nbsp;是基于 MPP 架构的新一代开源实时数据仓库<span>，</span></span><span><span style="background-color:#ffffff; color:#333333">以极速易用的特点被人们所熟知</span>, 在实时数仓和数据分析领域越发流行<span style="background-color:#ffffff">，</span>本次 DataSophon 对 Doris 做了全面的支持<span style="background-color:#ffffff">，现在可在 DataSophon 上轻松的完成 Apache Doris 的集群部署和运维管理。</span></span></span></p> ​ 
 <p style="margin-left:0; margin-right:0; text-align:justify"><span><strong><span>集群部署</span></strong></span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span>在 Doris 集群部署方面，本次的新版本</span><span>能够自动将 Apche Doris 的&nbsp;Follower、Observer、Be 等多种角色添加到集群中，全程界面化操作<span>，动动鼠标即可完成<span>，</span>部署进度一目了然<span>，大大</span></span>省去了手动添加角色的麻烦，轻松实现集群的快速扩展和管理。</span><br> &nbsp;</p><p style="margin-left:0; margin-right:0"><span><strong>集群监控</strong></span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span>对于 Apache Doris 集群的各项监控指标<span>，也重点做了支持</span>。您可以的在 DataSophon 中获得 Doris 集群的实时指标的各项信息，包括<span>集群的节点数、详情、连接信息<span>、运行</span></span>状态和 CPU、JVM<span>、</span>内存、磁盘大小和 IO 的使用<span>情况</span>...<span>&nbsp;</span><span>。</span>此外，您还可以查看集群的任务运行情况和其他详细信息，以便更好地了解集群的运行状况。</span><br> &nbsp;</p><p><img height="549" src="https://oscimg.oschina.net/oscnet/up-0d2b0a9450f5f061d8a5cfb630cb13ab822.png" width="1080" referrerpolicy="no-referrer"></p><p><span><strong><span>集群运维</span></strong></span><br><br><span><span><span>在集群运维方面 DataSophon 支持</span>对 Doris 整个集群、FE、BE 节点进行启动、停止、重启等常规操作<span>，</span><strong>同时支持了对&nbsp;<span>Doris&nbsp;FE、BE 节点进行在线扩/缩容</span></strong><span>。</span></span><span>可以很轻松的设置 Doris 的监控指标和告警<span>，</span>Apache Doris 各项参数也可以很方便的进行单个或批量设置<span>，同时提供进入 Doris 的原生 WebUI 的入口，</span>DataSophon 中，提供的各种丰富的运维操作可以极大的方便用户去运维管理 Doris&nbsp;<span>。</span></span></span><br> &nbsp;</p><p><img height="536" src="https://oscimg.oschina.net/oscnet/up-f4c249609850338a07acbaef3ac6efffd66.png" width="1080" referrerpolicy="no-referrer"></p><h3><span style="color:#2c3e50"><strong>2. 新增多个监控指标</strong></span></h3><p><span>本次新增了多个生产环境中普遍关心的运维指标，旨在满足大数据集群生产环境中的关键需求。<span>这些运维指标的引入，使得用户能够更加有效地管理大数据集群，提高集群性能，降低故障率，从而实现高效运维。</span>主要新增指标如下：</span></p><ul><li><p style="margin-left:0; margin-right:0"><span>HDFS 整个集群的客户端连接数。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>NameNode 丢失的块数。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>DataNode RPC 被调用次数。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>DataNode RPC &nbsp;队列积压长度<span>。</span></span></p></li><li><p style="margin-left:0; margin-right:0"><span>DataNode RPC 平均处理时间。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>ResouceManager RPC&nbsp;队列平均处理时间<span>。</span></span></p></li><li><p style="margin-left:0; margin-right:0"><span>ResouceManager RPC 队列积压长度。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>NodeManager Container 启动个数<span>。</span></span></p></li><li><p style="margin-left:0; margin-right:0"><span>NodeManager Container 正在运行个数<span>。</span></span></p></li><li><p style="margin-left:0; margin-right:0"><span>NodeManager Container 初始化中个数<span>。</span></span></p></li><li><p style="margin-left:0; margin-right:0"><span>NodeManager 磁盘损坏个数<span>。</span></span><br> &nbsp;</p></li></ul><p><img height="578" src="https://oscimg.oschina.net/oscnet/up-7a0f42dd3c79a4483ae2a47984e92d193a9.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p><img height="586" src="https://oscimg.oschina.net/oscnet/up-bc77d23b7bc24a2ca29daec72491c1a9fc8.png" width="1080" referrerpolicy="no-referrer"></p><h3><span style="color:#2c3e50">3. 新增初始化模块</span></h3><p><span style="color:#000000">在集群部署过程中，都需要进行集群环境初始化，例如配置主机名、配置免密登录、安装离线 yum 源等初始化环境操作。DataSophon 通过 datasophon-init 模块自动初始化安装和配置所需的依赖项，省去手动安装和配置的繁琐步骤，从而大大提高部署效率，减少因集群环境不一致导致集群安装失败的风险。</span></p><p><span style="color:#000000">同时为了方便运维人员操作和使用，系统不仅提供了友好的用户界面还提供了二次开发接口。通过自定义扩展二次开发，可以实现与不同类型的操作系统的兼容，满足不同用户的需求。这样一来，用户可以根据自己的实际情况进行灵活的配置和部署，提高了工作效率和准确性。</span><br> &nbsp;</p><h3><span style="color:#2c3e50">4. 其他改进和更新</span></h3><p>1、<span>升级 SpringBoot 版本为 2.6.1。</span></p><p><span>2、新增项目启动时自动创建数据表和初始化数据功能。</span></p><p><span>3、优化服务指令执行流程，避免出现服务指令进度卡死的情况。</span></p><p><span>4、优化 Hive 默认使用 Hive on YARN 环境配置。</span></p><p><span>5、新增集群删除功能。</span></p><p><span>6、修复不选择安装的服务实例时依然生成服务指令的问题。</span></p><p><span>7、修复租户管理中租户列表分页不生效的问题。</span></p><p><span>8、修复服务角色实例警告报警状态无法恢复的问题。</span></p><p><span>9、修复租户管理租户列表和用户组列表未按集群隔离的问题。</span></p><p><span>10、修复 Doris 安装部署时，未自动生成 Doris BE 数据目录的问题。</span></p><p><span>11、修复 HDFS 安装部署时出现找不到&nbsp;k<span>eystore 文件的</span>问题。</span></p><p><span>12、 修复项目启动时出现的 "because it exists, maybe from xml file" 错误。</span><br> &nbsp;</p><h1><span style="color:#0052ff"><strong>新官网上线</strong></span></h1><p><br><span style="color:#333333">本次&nbsp;<span style="background-color:#ffffff; color:#333333">DataSo</span><span style="background-color:#ffffff; color:#333333">pho</span><span style="background-color:#ffffff; color:#333333">n&nbsp;</span>上线了新官网<span style="background-color:#ffffff; color:#333333">，也完善了相关使用文档</span></span><span style="color:#333333">。在此<span style="background-color:#ffffff; color:#333333">感谢 Apache StreamPark 社区提供的技术支持</span><span style="background-color:#ffffff; color:#333333">，感谢&nbsp; @songjianet<span style="background-color:#fafafa; color:#666666">、<span style="background-color:#ffffff; color:#333333">@haitaodesign 对官网的贡献<span style="background-color:#ffffff; color:#333333">。</span></span></span></span></span></p><p><img height="1398" src="https://oscimg.oschina.net/oscnet/up-7152ab8a684c8dc24733d43e29e9e196d6f.png" width="2994" referrerpolicy="no-referrer"></p><h1><span style="color:#0052ff"><strong>感谢贡献者</strong></span></h1><p><br><span style="color:#333333">DataSophon 开源社区的发展，离不开广大用户群体的积极反馈和宣传布道，更离不开贡献者们的无私贡献</span><span style="color:#333333">，</span><span style="color:#333333">感谢对此版本做出贡献的每一位贡献者</span><span style="color:#333333">。</span></p><p><span style="color:#333333"><span>致谢名单</span><span>(排名不分先后)：</span></span></p><p><span style="color:#333333"><span style="color:#333333">88fantasy、a19920714liou、haitaodesign、WujieRen、thomasg19930417、AllDataDC、zhaoxiaoyi、liu-hai、gtk96、lnnlab、javaht、hzluting、zhzhenqin、liugddx、zq0757、</span><span style="color:#333333">chenss-1、zhu-mingye、zhangdw123、liuxin319、whybeyoung、hitozhu、green241、chyueyi<span style="color:#333333">、</span><span style="color:#333333">zhegemingzimeibanquan<span style="color:#333333">、<span style="color:#333333">songjianet</span></span></span></span></span><br> &nbsp;</p><h1><span style="color:#0052ff"><strong>加入我们</strong></span></h1><p><br><span><span style="color:#000000"><span style="background-color:#ffffff; color:#333333"><span style="background-color:#ffffff; color:#333333"><span>DataSophon 项目</span></span></span></span></span><span style="color:#000000">自开源以来</span><span>，得到了很大关注</span><span>，社区发展迅速,<span>&nbsp;</span><span style="background-color:#ffffff; color:#333333">越来越多的用户开始在生产环境部署使用 DataSophon<span style="background-color:#ffffff; color:#333333"><span style="background-color:#ffffff; color:#333333">，</span></span></span>开发者也逐渐变多</span><span>。</span><span>如果 DataSophon 项目对您有帮助，请在 Gitee 或 Github 搜索 DataSophon 支持一下，点击 star 加关注</span><span>。</span></p><p><span><span style="background-color:#ffffff; color:#333333">我们时刻明白项目只有真正解决问题,&nbsp;给用户带来实际的价值才是立命之本<span style="background-color:#ffffff; color:#333333">，</span>大力发展社区和贡献者才有出路,&nbsp;<span style="background-color:#ffffff; color:#333333">目前我们正在努力构建发展社区，</span></span><span>我们</span><span>坚信道阻且长<span>，</span>行则将至<span>，</span></span><span>竭诚欢迎广大的开发者和我们<span style="color:#000000">一起</span>建设&nbsp;<span style="color:#000000">DataSophon 项目</span>，<span style="color:#000000">共同推动项目的发展<span style="color:#333333">。</span></span></span></span></p><p><span><strong>💻 项目地址：</strong></span></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatasophon" target="_blank"><u>https://github.com/datavane/datasophon</u></a></p><p><a href="https://gitee.com/datavane/datasophon"><u>https://gitee.com/datavane/datasophon</u></a></p><p><span><strong>🧐 提交问题和建议：</strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatasophon%2Fissues" target="_blank"><u>https://github.com/<span>datavane</span>/datasophon/issues</u></a></p><p><span><strong>🥁 贡献代码：</strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatasophon%2Fpulls" target="_blank"><u>https://github.com/<span>datavane</span>/datasophon/pulls</u></a></p><p style="margin-left:0; margin-right:0"><span style="color:#444444"><strong>💁‍♀️&nbsp;</strong></span><span style="color:#444444"><strong>官方文档</strong><strong>：</strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdatasophon.github.io%2Fdatasophon-website" target="_blank"><u>https://datasophon.github.io/datasophon-website</u></a></p><p><img height="402" src="https://oscimg.oschina.net/oscnet/up-3440f9c25c56f1b1f6bcaaaea15e886d544.png" width="900" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><br><strong>关于<span>Datavane</span></strong></p><p style="margin-left:0; margin-right:0"><span style="color:#333333"><span style="background-color:rgba(255, 255, 255, 0)">Datavane 是一个专注于大数据领域的开源组织 (社区)，由一群大数据领域优秀的开源项目作者共同创建，</span>旨在帮助开源项目作者更好的建设项目、为大众提供高质量的开源软件，宗旨是：只为做一个好软件。目前已经聚集了一批优质的开源项目<span>，涉及到数据集成、大数据组件管理、数据质量等。</span></span><br> &nbsp;</p><p style="margin-left:0; margin-right:0"><span style="color:#333333">在 Datavane 社区中，所有的项目都是开源开放<span style="background-color:#ffffff; color:#333333">、</span>代码质量和架构设计优质的高潜力项目。社区保持开放中立、协作创造、坚持精品<span>，</span>鼓励所有的开发者、用户和贡献者积极参与我们的社区<span>、共同</span>合作，创新创造<span>，</span>建设一个更加强大的开源社区。<br><br> 官&nbsp; &nbsp;网：</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.datavane.org" target="_blank">www.datavane.org</a><br><span style="color:#333333">Github:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdatavane" target="_blank">https://github.com/datavane</a></span></p></div></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 01:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259642/datasophon-1-2-0-released</guid>
            <link>https://www.oschina.net/news/259642/datasophon-1-2-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1-8 月我国软件业务收入 75178 亿元，同比增长 13.5%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333"><span style="color:#222222">工信部</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Frjy%2Fart%2F2023%2Fart_6971a3c0ea6c49c19e364c9597a79077.html" target="_blank">发布</a><span style="background-color:#ffffff; color:#222222">公告指出，</span>1－8 月份，我国软件和信息技术服务业（以下简称「软件业」）运行态势平稳，软件业务收入保持较快增长，利润总额保持两位数增长，软件业务出口小幅回落。</p><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong>一、总体运行情况</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>软件业务收入保持较快增长。</strong>1－8 月份，我国软件业务收入 75178 亿元，同比增长 13.5%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="247" src="https://oscimg.oschina.net/oscnet/up-f59dae23160a190f074b176bc35b4b355cc.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>利润总额保持两位数增长。</strong>1－8 月份，软件业利润总额 8628 亿元，同比增长 13.9%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="240" src="https://oscimg.oschina.net/oscnet/up-a5be7b7ce2f6094b7ce524cb85d2fbae3ae.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>软件业务出口小幅回落。</strong>1－8 月份，软件业务出口 319.3 亿美元，同比下降 4.5%，其中，软件外包服务出口同比增长 3.4%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="245" src="https://oscimg.oschina.net/oscnet/up-02c6fcf5f78b3c28e5a1d42f26fd56c8475.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:left">二、分领域运行情况</h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>软件产品收入保持两位数增长。</strong>1－8 月份，软件产品收入 17437 亿元，同比增长 10.8%，占全行业收入的比重为 23.2%。其中，工业软件产品收入 1704 亿元，同比增长 12.5%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>信息技术服务收入较快增长。</strong>1－8 月份，信息技术服务收入 50116 亿元，同比增长 14.8%，在全行业收入中占比为 66.7%。其中，云计算、大数据服务共实现收入 7532 亿元，同比增长 15.7%，占信息技术服务收入的比重为 15%；集成电路设计收入 1994 亿元，同比增长 5%；电子商务平台技术服务收入 6981 亿元，同比增长 9%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>信息安全收入稳步增长。</strong>1－8 月份，信息安全产品和服务收入 1211 亿元，同比增长 10%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>嵌入式系统软件收入平稳增长。</strong>1－8 月份，嵌入式系统软件收入 6413 亿元，同比增长 11.7%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="240" src="https://oscimg.oschina.net/oscnet/up-ca04e9482bac3cc3bfa58966553072bb78c.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong>三、分地区运行情况</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>东北、中、西部地区软件业务收入小幅回落，东部地区增势突出。</strong>1－8 月份，东部地区完成软件业务收入 62244 亿元，同比增长 14%，增速较 1－7 月份提高 0.1 个百分点；中部地区完成软件业务收入 3619 亿元，同比增长 13.1%，增速较 1－7 月份回落 1 个百分点；西部地区完成软件业务收入 7604 亿元，同比增长 10.1%，增速较 1－7 月份回落 0.1 个百分点；东北地区完成软件业务收入 1711 亿元，同比增长 13.3%，增速较 1－7 月份回落 1.1 个百分点。四个地区软件业务收入在全国总收入中的占比分别为 82.8%、4.8%、10.1% 和 2.3%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="411" src="https://oscimg.oschina.net/oscnet/up-014347b37905d0dfbf6bf0c75b012606161.png" width="853" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>主要软件大省收入占比持续提升。</strong>1－8 月份，软件业务收入居前 5 名的省份中,北京市、广东省、江苏省、山东省、上海市软件收入分别为 16277 亿元、13224 亿元、8820 亿元、7813 亿元和 6599 亿元，分别增长 18%、14%、8%、16.9% 和 19.2%，五省 (市) 合计软件业务收入 52733 亿元，占全国比重为 70.1%，占比较去年同期提高 1 个百分点。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="245" src="https://oscimg.oschina.net/oscnet/up-532e0fecf7e23b162e945c871453a347556.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>中心城市软件业务收入平稳增长。</strong>1－8 月份，全国 15 个副省级中心城市实现软件业务收入 36850 亿元，同比增长 10.8%，增速较 1－7 月份回落 0.3 个百分点，占全国软件业务收入比重为 49%，占比较去年同期回落 1.2 个百分点。其中，大连、济南、成都、深圳 、厦门和青岛软件业务收入增速超过全行业整体增速。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="252" src="https://oscimg.oschina.net/oscnet/up-8dd2fb16da3fed178ef346f447a3e12b3c6.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259757</guid>
            <link>https://www.oschina.net/news/259757</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「根本不需要 TypeScript，JS + JSDoc 够了」，大佬说我想多了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本月，Ruby on Rails 作者 DHH 宣布移除其团队开源项目 Turbo 8 中的 TypeScript 代码。</p><p><img height="768" src="https://oscimg.oschina.net/oscnet/up-58c4155f83bbd826f4bb0ec1ab8d1e32ccd.png" width="1080" referrerpolicy="no-referrer"></p><p>他认为，TypeScript 对他来说只是阻碍。不仅因为它需要显式的编译步骤，还因为它用类型编程污染了代码，很影响开发体验。</p><p>无独有偶，不久前，知名前端 UI 框架 Svelte 也<span style="color:#245bdb"><a href="https://www.oschina.net/news/240489/svelte-ts-to-jsdoc" rel="nofollow">宣布从 TypeScript 切换到 JavaScript</a></span>。负责 Svelte 编译器的开发者说，改用 JSDoc 后，代码不需要编译构建即可进行调试 —— 简化了编译器的开发工作。</p><p>Svelte 不是第一个放弃 TypeScript 的前端框架。早在 2020 年，Deno 就迁移了一部分内部 TypeScript 代码到 JavaScript，以减少构建时间。</p><p>Deno 团队给出的理由，总结一下就是：<strong>减少构建时间</strong>、<strong>降低发布的代码体积</strong>、<strong>减少编写的代码量</strong>。</p><p>加上今年短期内已经有两个项目从 TypeScript 切换到 JavaScript 了，这个状况就很令人迷惑。<strong>难道从</strong><strong> TypeScript 切回 JavaScript</strong><strong> 已经成了当下的新潮流？</strong>在推特和 GitHub 上，讨论也是纷纷扬扬。有人赞同，表示欣赏他们的勇气；有人反对，表示这是开历史倒车。网友觉得，编译速度慢，改进编译器就行了，因噎废食有点想不通。</p><p>所以，放弃 TypeScript 回归 JavaScript 是在追求舒适的 partner，还是在开历史的倒车？</p><p>对此，开源中国找来了 3 位使用过 TypeScript 和 JavaScript 的前端大佬，听听他们的看法。他们分别是：</p><ul><li><p><span style="color:#245bdb">刘勇，社区暱称天猪，某大厂 Node.js </span><span style="color:#245bdb">Infra</span><span style="color:#245bdb"> 负责人，EggJS / CNPM 核心开发者。</span></p></li><li><p><span style="color:#245bdb">刘易成，社区暱称 xcatliu（流浪小猫），《</span><span style="color:#245bdb">TypeScript</span><span style="color:#245bdb"> 入门教程》作者，来自腾讯文档团队。</span></p></li><li><p><span style="color:#245bdb">李振，社区暱称 tick，来自腾讯文档团队。</span></p></li></ul><p>&nbsp;</p><span id="OSC_h1_1"></span><h1>一、开历史倒车？谈不上</h1><p><span style="color:#245bdb"><strong>Q1：</strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong> 是基于 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 推出的新语言，理论上应该比 JavaScript 完善的，为什么大家还会倒回去用旧的 JavaScript 呢？这算不算开历史的倒车？</strong></span></p><p><strong>刘勇：</strong>不算倒车，这只是一个选择，在某些场景下，写 TypeScript 会带来一些额外成本。譬如我看过一些开源库的源码，核心逻辑可能就几十行，但为了实现准确的类型提示，写出来的类型体操反而远远多于核心源码，孰是孰非对于不同的开发者有不同的准绳，需要找到其中的平衡点。当然，就目前的情况，在力所能及的情况下，我个人推荐能用 TypeScript 就用 TypeScript ，但是否要玩类型体操则根据开发者自身情况来决策。</p><p><strong>刘易成：</strong>已经使用了 TypeScript 的项目改回使用 JavaScript 是很少见的，更多的项目是从 JavaScript 升级到 TypeScript。TypeScript 完善了 JavaScript 的类型系统，使得代码的可维护性更高了，但同时也增加了编译步骤和一些开发成本。对于一些项目而言，JavaScript 已经能够满足需求了，就没必要增加 TypeScript 类型系统的复杂性了，但是对于另一些复杂项目，更需要类型系统来帮助提高代码可维护性，所以这不算开历史的倒车，而是根据实际情况做技术选型。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q2：以上从 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong> 切回到 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 的项目，都是做开发框架的，所以这是不是跟项目类型有关呢？做框架的项目更有可能选择</strong></span><span style="color:#245bdb"><strong> JavaScript</strong></span><span style="color:#245bdb"><strong> 吗？</strong></span></p><p><strong>李振：</strong>是的，项目类型可以是影响选择 JavaScript 还是 TypeScript 的一个因素。在开发框架或库时，特别是前端框架或库，选择使用 JavaScript 的情况较为常见。</p><p>一方面，开发框架需要具备广泛的兼容性，以便开发者可以在各种项目中使用。由于 JavaScript 是 Web 开发的基础语言，几乎所有的浏览器和环境都支持 JavaScript。这使得使用 JavaScript 编写的框架更容易被广泛采用和集成。</p><p>另一方面，开发框架通常需要提供简单易用的 API 和灵活的扩展机制，以满足各种项目的需求。使用 JavaScript 可以更加直接地表达这些概念，而不需要过多的类型注解和编译步骤。这使得开发者可以更快地理解和使用框架，并且更容易进行自定义和扩展。</p><p><strong>刘勇：</strong>框架和类库的开发者，往往需要考虑到很多 edge case，在这种情况下，编写完善的类型是一件很费心力的事，代码量会多了不少，从而会导致维护成本的增加。其实现在社区还是在探索的阶段，需要找到一个平衡点，哪一些是需要完善的，哪一些是可以取舍的。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q3：基于</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 改进的语言却遭到了开发者的嫌弃，这能说是 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>设计的失败吗？</strong></span></p><p><strong>李振：</strong>这并不能被视为 TypeScript 设计的失败。每个项目和开发团队都有自己的需求和偏好。有些开发者可能认为 TypeScript 增加了额外的复杂性和学习曲线，或者觉得它在某些方面不符合他们的开发风格。这并不意味着 TypeScript 设计的失败，而是反映了不同开发者对工具和语言的不同看法和需求。</p><p>TypeScript 仍然在许多项目中被广泛使用，并且持续发展和改进。它提供了许多有价值的功能，如类型安全、代码智能感知和重构支持等，这些功能对于大型项目和团队协作非常有益。因此，无论是否有一些项目选择回到 JavaScript，TypeScript 仍然是一个受欢迎和成功的语言。</p><p><strong>刘易成：</strong>TypeScript 的成功无需质疑，已经有无数的项目证明了它的成功。开发者并没有「嫌弃」 TypeScript，只是认为并不是所有项目都适合使用 TypeScript。不管开发者用的是 JavaScript 还是 TypeScript ，都受益于 TypeScript 的 language service 太多了。TypeScript 已经是前端生态系统中最不可或缺的一环了。</p><p>&nbsp;</p><span id="OSC_h1_2"></span><h1>二、TypeScript 和 JavaScript 并不是简单地互为替身</h1><p><span style="color:#245bdb"><strong>Q4：有评论认为，</strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>编译速度慢，改进编译器就行了，转回</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 是因噎废食，你怎么看？</strong></span></p><p><strong>刘勇：</strong>需要提醒的是，目前社区一些转回 JavaScript 的都是框架和类库，这些作者的决策点并不是只因为 TypeScript 编译速度。</p><p>另外，「改进编译器」这事其实没那么简单，就像 TypeScript-node 在某个版本更新后，动态解析的速度慢了非常多，但也没计划优化。像 esbuild 目前还不支持装饰器。同时应用侧又开始一窝蜂上 monorepo，更加剧了整体耗时。我们只能寄希望于 TypeScript 官方的大神们再出绝招。</p><p><strong>刘易成：</strong>即使是 JavaScript 项目，也有编译/打包/构建等过程，绝大部分项目都不会因为加入了 TypeScript 编译就慢很多。是否转回 JavaScript 还是需要综合考虑项目复杂度、团队协作规模等因素。</p><p>另外，改进 TypeScript 编译速度并不是一个容易的事，TypeScript 的类型系统和语言特性很复杂，这只能靠 TypeScript 团队下功夫了。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q5：我们一开始用 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong> 是因为 TypeScript 提供了类型检查，弥补了 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 只有逻辑没有类型的问题，那如果我们用 JavaScript + JSDoc 来解决类型声明，是不是就不用使用 TypeScript 了？</strong></span></p><p><strong>刘勇：</strong>首先，JSDoc 并不能完全解决类型声明问题，它也不能在开发期就帮助开发者发现一些问题。</p><p>其次，这两者并不冲突，我个人在写 TypeScript 的时候也会写对应的 JSDoc，因为 TypeScript 的类型没法有更多的注释和描述。我更期望看到后续 TypeScript 团队能优化这块的体验。</p><p><strong>刘易成：</strong>JSDoc 只能解决一部分类型的问题，而 TypeScript 是一个完整的类型系统。TypeScript 生态更繁荣，对于普通开发者和普通的项目而言，使用 JSDoc 的开发和维护成本可能会比 TypeScript 更高。</p><p><strong>李振：</strong>理论上也是可行的，但与 TypeScript 相比，它仍然存在一些限制：</p><ul><li><p>静态类型检查的完整性：JSDoc 注释是基于注释的方式，而不是直接嵌入到语言中，因此它的类型检查可能不如 TypeScript 的类型系统完整和准确。</p></li><li><p>工具支持的差异：尽管一些工具和编辑器可以利用 JSDoc 注释进行类型检查，但与 TypeScript 相比，它们的功能和智能感知可能有所限制。</p></li><li><p>生态系统的差异：TypeScript 有一个独立的类型系统和类型声明文件生态系统，这使得与现有的 JavaScript 库和工具更加无缝集成。而使用 JavaScript + JSDoc 可能需要更多的手动工作来编写和维护类型注释。</p></li></ul><p>&nbsp;</p><span id="OSC_h1_3"></span><h1>三、TypeScript 和 JavaScript ，其实各有千秋</h1><p><span style="color:#245bdb"><strong>Q6：你觉得</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>有什么特别的长处，对开发者来说是</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 做不到的？</strong></span></p><p><strong>刘勇：</strong>类型的元数据描述能力，这个是 JavaScript 目前还不具备的，除非 TC39 的 「JavaScript 类型标注」（ Types as Comments）等提案能落地。像我们就很重视 「API 元数据」，通过工程化的方式，可以从代码中提取出来接口 API 信息，从而可以在 codegen，mock，前后端协作等很多方面来提升研发体验和研发效能。</p><p><strong>李振：</strong>TypeScript 相对于 JavaScript ，主要是引入了静态类型系统，并且可以兼容 JavaScript 生态。本质上来看，并没有哪些功能是 JavaScript 完全无法实现的。但是 TypeScript 经过这么多年的发展，已经形成自己良好的生态系统。比如 TypeScript 类型声明文件，提供了丰富的类型定义，与第三方库的集成更加顺畅。JavaScript 要实现类似的功能，需要开发者做更多的工作。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q7：你觉得对普通项目来说，使用</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>有什么不方便或者不利的地方吗？</strong></span></p><p><strong>刘勇：</strong>主要还是工作流的复杂化带来开发成本的提升，我记得之前在 StackOverflow 看过一个关于 TypeScript 的回答是，我开发一个简单的功能，但是解决类型问题就花了一整天的时间，在我们公司内部做日常的技术答疑的时候，也经常发现有不少用户对 TypeScript 问题完全不知道从何下手。举一个 Node.js 项目的例子，很多用户就不理解为什么 tsconfig.json 里的 paths 在代码编译成 JavaScript 后会不生效，因为这些问题，就会容易导致产生计划之外的工作量。</p><p><strong>刘易成：</strong>使用 TypeScript 需要增加一个「编译」的过程，不过现在各种脚手架已经帮你做好了这些步骤，所以成本已经很低了。还有就是 TypeScript 有一些学习成本，如果是新手很容易不注意类型检查，把 TypeScript 写成了 AnyScript，失去了使用 TypeScript 的意义，所以建议通过一些约束和培训，让项目中的 TypeScript 更加标准。</p><p>&nbsp;</p><span id="OSC_h1_4"></span><h1>四、TypeScript VS JavaScript ，你 Pick 谁？</h1><p style="text-align:left">根据 Stack Overflow <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsurvey.stackoverflow.co%2F2023%2F" rel="nofollow">发布</a></span>的 2023 年开发者调查报告，JavaScript 连续 11 年成为最流行编程语言，使用占比达 63.61%，TypeScript 则排名第五，使用占比 38.87%。在人气方面，JavaScript 的开发者社区仍然是巨大而活跃的，在社区中可以很方便地找到大量成熟的开发项目和可用资源。在框架和工具方面，随着 TypeScript 的日益受欢迎，已经有了很多支持它的框架和工具。而 JavaScript，由于其历史的深厚，几乎所有的前端框架和库都会优先支持。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q8：有人认为，</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>的出现是因为一般人驾驭不了</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> ，有人则觉得「水平越差的人越喜欢自由」，你怎么看？这两个语言的选择跟程序员的水平有关吗？</strong></span></p><p><strong>李振：</strong>拿爱好来判断个人水平是挺无聊的事情。写 JavaScript<strong></strong>和写 TypeScript 都有大牛。</p><p><strong>刘勇：</strong>笑～ 平时可没少见有同学吐槽，好好的 TypeScript 项目，被人提交了一堆 Any。也见过很多吐槽接手了一个 TypeScript 仓库，要硬着头皮看一大堆类型定义，搞清楚这些奇奇怪怪的类型是如何工作的。我觉得语言的选择主要看团队的工程化和规范化程度，过犹不及。如果一个 TypeScript 类库写了一大堆类型，但却连一个单测都没有，那我觉得它是不合格的。</p><p><strong>刘易成：</strong>TypeScript<strong></strong>的出现确实有一部分原因是 JavaScript<strong></strong>比较难「驾驭」，JavaScript<strong></strong>太灵活了，缺少类型的约束，很容易写出 bug 代码，TypeScript 一定程度上解决了这个问题，使得代码的可维护性更高了。</p><p>JavaScript<strong></strong>和 TypeScript 不能用来衡量程序员的水平。对于简单的项目或者个人项目而言，JavaScript<strong></strong>可能更加轻量和灵活，但对于需要大团队协作，复杂的项目而言，TypeScript 的类型系统就可以带来更好的代码维护性和可靠性了。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q9：你认为这两个语言是不是分别有不同的适用项目？什么时候该用 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>什么时候该用 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> 呢？对个人和企业开发者来说，应该怎么选？</strong></span></p><p><strong>刘易成：</strong>对于大型项目、多人协作和需要高可靠性的项目来说，使用 TypeScript 更好；对于小型项目、个人项目，可以使用 JavaScript<strong></strong>更快迭代，当然也建议使用 TypeScript 保持更高的可维护性。</p><p>另外企业也需要根据员工技术能力和项目历史包袱来灵活选择技术栈。</p><p><strong>李振：</strong>个人觉得大型项目首选 TypeScript，拿我所在的团队，腾讯文档来说，团队有上百个项目，包括前端项目和一些 node 项目，大家都是首选 TypeScript 作为开发语言，可以降低团队协作的成本。个人开发者，如果是小型项目，其实无所谓，根据自己的爱好选择就行了。</p><p>&nbsp;</p><p><span style="color:#245bdb"><strong>Q10：你如何看待 </strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong></strong></span><span style="color:#245bdb"><strong>的未来发展？你觉得它是一时流行还是会终将取代 </strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong> ？你认为谁的技术生态更好一点呢？</strong></span></p><p><strong>刘勇：</strong>TypeScript<strong></strong>的定位是 JavaScript<strong></strong>的一个超集，它的能力是以 TC39 制定的 ECMAScript 规范为基准（即 JavaScript<strong></strong>）。我觉得它也谈不上会取代 JavaScript<strong></strong>，毕竟它并不是官方规范，而且 JavaScript<strong></strong>的存量生态实在是太庞大了。</p><p>当然，TypeScript 现在已经某种程度上成为事实的标准，尤其是因为 Node.js 官方对 ESM 和 CJS 何去何从的犹豫，导致社区开发者长时间的割裂，越来越多的人被迫选择用 TypeScript 来写类库，然后同时编译为 ESM 和 CJS。目前 TypeScript 的生态已经成规模，所以它不会像 CoffeeScript 那样昙花一现。</p><p><strong>刘易成：</strong>我个人认为 TypeScript 会持续流行并得到更广泛的应用。但并不会「取代」 JavaScript<strong></strong>。TypeScript 的目标一直都不是「取代」 JavaScript<strong></strong>，而是基于 JavaScript<strong></strong>提供类型系统，作为 JavaScript<strong></strong>的一个补充，在不同的项目和场景中发挥各自的优势。</p><p>JavaScript<strong></strong>和 TypeScript 的技术生态早已融合在一起了吧，几乎所有库都会有 TypeScript 类型文件。</p><p><strong>李振：</strong>我认为 TypeScript 不太可能完全取代 JavaScript，而是作为 JavaScript 的一个补充和增强。两者暂时不会出现零和博弈，也希望这两种语言都可以有更好的发展。目前来看 JavaScript 的生态更庞大一些，但是 TypeScript 的地位和影响力不断增长。作为普通开发者，在两者并不冲突的当下，最好都能关注其发展。</p><p>&nbsp;</p><p>对此，你怎么看？你手上用着的是 JavaScript<strong></strong>还是 TypeScript 呢？哪个更顺手？评论区见吧~</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6852546/blog/10114672</guid>
            <link>https://my.oschina.net/u/6852546/blog/10114672</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 寻求出售现有股票，估值高达 900 亿美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">据《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.msn.com%2Fen-us%2Fmoney%2Ftechnology%2Fopenai-seeks-new-valuation-of-up-to-90-billion-in-share-sale%2Far-AA1hiJ9W" target="_blank">华尔街日报</a>》援引知情人士消息称，OpenAI&nbsp;</span><span style="background-color:#ffffff; color:#2b2b2b">正在与投资者讨论股票出售事宜</span><span style="color:#000000">。这家&nbsp;</span><span style="background-color:#ffffff; color:#2b2b2b">ChatGPT 背后的人工智能初创公司的估值将在 800 亿至 900 亿美元之间，大约是今年早些时候水平的三倍。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">今年 4 月，OpenAI 从红杉资本、Andreessen Horowitz、Thrive 和 K2 Global 等支持者那里获得了略高于 3 亿美元的融资，估值为 290 亿美元。</span></span></p><p><img height="233" src="https://static.oschina.net/uploads/space/2023/0927/162258_T3Uz_4252687.png" width="600" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">知情人士称，这家由微软持股 49% 的初创公司已告诉投资者，预计今年的收入将达到 10 亿美元，并在 2024 年创造更多数十亿美元的收入。<span style="background-color:#ffffff">预计该交易将允许员工出售现有股票，而不是公司发行新股票来筹集额外资金。知情人士称，OpenAI 代表已开始就该交易向投资者进行推销，不过条款可能会发生变化。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">800 亿美元或以上的估值将使 OpenAI 成为全球估值最高的初创公司之一，仅次于埃隆·马斯克 (Elon Musk) 的 SpaceX 和 TikTok 母公司字节跳动 (ByteDance)。该数字突显了 OpenAI 在多大程度上能够重塑硅谷的格局，这一数字凸显了 OpenAI 能够重塑硅谷格局的程度，并迫使更富有、更成熟的科技巨头全面调整其产品路线图，效仿 OpenAI 的做法。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">OpenAI 的目标是向硅谷投资者出售价值数亿美元的现有股票，这笔交易将立即为微软带来巨额账面利润。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">这次员工持股出售可能会为从外部投资者那里筹集更多资金设定一个最低价格。人们普遍预计，OpenAI 将通过发行新股来筹集更多资金，以满足开发和维护其人工智能系统所需的计算成本。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">知情人士称</span>，<span style="background-color:#ffffff">该公司</span>已经<span style="background-color:#ffffff">引起了</span>孙正义的软银等投资巨头的浓厚兴趣。集资将涉及出售新股，与目前正在进行的要约收购程序分开。并表示，<span style="background-color:#ffffff">OpenAI 有意让微软持有该公司少数股权，这意味着这家科技巨头很可能无法在任何融资中购买股票，从而使自己的持股比例超过 50%。</span></span></p><p><span style="color:#333333">OpenAI<span>&nbsp;暂未回应置评请求。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 08:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259735/openai-seeks-new-valuation-90-billion</guid>
            <link>https://www.oschina.net/news/259735/openai-seeks-new-valuation-90-billion</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNU 和自由软件运动四十周年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>自由软件基金会 (FSF) 发表文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.fsf.org%2Fnews%2Fforty-years-of-gnu-and-the-free-software-movement" target="_blank">庆祝</a> GNU 和自由软件运动四十年。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0927/141138_JLed_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>1983 年 9 月 27 日，计算机科学家 Richard Matthew Stallman（简称 RMS）宣布开发<strong>类 Unix 自由软件操作系统</strong>的「<strong>GNU&nbsp;计划</strong>」，并借此发起自由软件运动，GNU 名字代表 <strong>GNU's not Unix</strong>。</p><p><img alt="" height="293" src="https://oscimg.oschina.net/oscnet/up-e77ab9915a29996c9837bf3e3e3b15d4c07.png" width="300" referrerpolicy="no-referrer"></p><p>▲「GNU 计划」标志</p><p>四十年后的今天，GNU 和自由软件比以往任何时候都重要，虽然软件已经深入到我们的日常生活，但绝大多数用户无法完全控制它。</p><blockquote><p>自由软件的定义最初由 RMS 本人制定。自由软件的初衷是尊重用户的自由，并且尊重整个社区。</p><p>粗略来讲，一个软件如果是自由软件，这意味着用户可以自由地运行、拷贝、分发、学习、修改并改进该软件。因此，「自由软件 (Free Software)」中的"free"是关乎自由的问题，与价格无关，软件如何定价并不影响它是否被归类为自由软件。</p><p>具体来说，自由软件的用户拥有四项基本自由：</p><p>(0) 自由运行软件<br> (1) 自由学习和修改软件源代码<br> (2) 自由发布软件拷贝<br> (3) 自由发布修改后的软件版本</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-ddccf4eb6af9e5f1ea79edef64ea1b64119.JPEG" referrerpolicy="no-referrer"></p><p>GNU 是唯一专门为捍衞用户自由而开发的操作系统，四十年来始终忠于其创始理念。自 1983 年以来，「GNU 计划」为私有操作系统提供了合乎道德的完整替代方案。这要归功于世界各地的 GNU 开发志愿者四十年来的不懈努力。</p><p>除了技术，GNU 还开创性地提出了 "<strong>Copyleft</strong>"。Copyleft 是源自自由软件运动的概念，是一种利用现有著作权体制 (Copyright) 来保护所有用户和二次开发者的自由的授权方式。</p><p>Copyleft 中的 "Left"，不使用英语中「保留」的意思，而是指「Left（左）」，与「版权 (Copyright)」中的「Right（右）」具有镜像的关系。注意，Copyleft 不是反著作权运动，不主张废止著作权，也不是公有领域 (Public Domain)。</p><p>二者的区别可总结为："Copyright"指软件的版权和其它一切权利归软件作者所私有，用户只有使用权，没有其它如复制、重新修改发布等权利。而"Copyleft"的特点是仅版权归原作者所有，其他一切权利可以与任何人共享。</p><p><img height="300" src="https://oscimg.oschina.net/oscnet/up-5d41e7a854ad38374f2b19a4d95bfa825c3.png" width="300" referrerpolicy="no-referrer"></p><p>▲ Copyleft 标志</p><p>FSF 执行董事 Zoë Kooyman 表示，GNU 不仅仅是基于自由软件的最广泛使用的操作系统，也是指导自由软件运动四十年的哲学理念的核心。</p><p>他还说道，我们希望四十周年纪念能够激励更多黑客加入 GNU，实现在全世界范围内创建、改进和共享自由软件的目标。如今，软件正在控制我们的世界，而 GNU 是对现状的批判和解决方案，我们亟需它来避免技术控制人类。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 06:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259709/forty-years-of-gnu-and-the-free-software-movement</guid>
            <link>https://www.oschina.net/news/259709/forty-years-of-gnu-and-the-free-software-movement</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Google 庆祝成立 25 周年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Google 今天上线了新的 Doodle <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Finside-google%2Fcompany-announcements%2Fgoogle-25th-birthday%2F" target="_blank">庆祝</a>成立 25 周年。</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/134213_x9MB_2720166.gif" referrerpolicy="no-referrer"></p><p>Google 于 1998 年 9 月 4 日成立，但是自 2002 年以来，该公司在 9 月的任意一天（<strong>通常是 9 月 27 日）</strong>庆祝其周年纪念日。</p><p><img alt="A screenshot of the Google search homepage in 1998" src="https://storage.googleapis.com/gweb-uniblog-publish-prod/images/Hero_Option-2.width-1200.format-webp.webp" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/0927/140629_bPBa_2720166.png" referrerpolicy="no-referrer"></p><blockquote><p>今天的涂鸦庆祝 Google 的 25 周年。虽然我们在 Google 总是面向未来，但生日也可以是反思的时候。让我们一起走下记忆的长廊，了解我们是如何在 25 年前诞生的...</p><p>无论是命运还是运气，博士生 Sergey Brin 和 Larry Page 在 90 年代末斯坦福大学计算机科学项目中相遇。他们很快发现他们有着相似的愿景：使万维网更加易于访问。这对搭档在宿舍里不知疲倦地开发出一个更好搜索引擎的原型。随着他们在项目上取得了实质性进展，他们将操作移至 Google 第一个办公室——租来的车库。1998 年 9 月 27 日，谷歌公司正式成立。</p><p>自 1998 年以来已经发生了很多变化——包括今天涂鸦中看到的我们标志——但使命始终没有改变：组织世界信息，并使其普遍可接触和有用。全球数十亿人使用 Google 进行搜索、连接、工作、娱乐等等！</p><p>感谢您过去 25 年与我们共同进步。 我们迫不及待想要看到未来会带领我们走向何方，一起。</p></blockquote><p><em>via&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.google.com%2Fdoodles%2Fgoogles-25th-birthday" target="_blank">https://www.google.com/doodles/googles-25th-birthday</a></em></p><p>在搜索栏输入「Google's 25th birthday」或「Google 25 周岁生日」能看到彩蛋：</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/132647_6ySe_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/0927/140517_zSMr_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 05:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259698/googles-25th-birthday</guid>
            <link>https://www.oschina.net/news/259698/googles-25th-birthday</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[macOS Containers：在 macOS 用 Docker 运行 macOS 镜像]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>macOS Containers 是一群开发者基于 chroot 打造的工具，能让你在 macOS 用 Docker 运行 macOS 镜像。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e8fbfed437c488003bb6d570a3f4afa4b01.png" referrerpolicy="no-referrer"></p><p>macOS Containers 官网<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmacoscontainers.org%2F" target="_blank">写道</a>：</p><blockquote><p>容器从根本上改变了现代软件的开发和部署方式。包括 FreeBSD、Solaris、Linux 甚至 Windows 在内的多种操作系统都支持容器，<strong>但 macOS 却没有原生支持容器</strong>——直到现在 macOS Containers 诞生。</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/121649_g9Y7_2720166.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259695/macos-containers</guid>
            <link>https://www.oschina.net/news/259695/macos-containers</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[历史最悠久的 Unity 官方用户组在 13 年后宣布解散]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">自称为历史最悠久的&nbsp;Unity&nbsp;开发者团队 Boston Unity Group (BUG) <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbostonunitygroup.s3.us-east-1.amazonaws.com%2Findex.html" target="_blank">宣布</a>将在&nbsp;9 月 27 日晚组织最后一次会议，然后进行解散。根据介绍，BUG 由 Elliott Mitchell 和 Alex Schwartz 于 2010 年夏天创立，是世界上第一个官方 Unity 用户组。</span></p><blockquote><p><span style="color:#000000">「BUG 社区的持续发展催生了波士顿及其他地区游戏开发的新时代......从第一天起，BUG 就得到了 Unity 和前首席执行官 David Helgason 的热情认可和支持。Unity 提供了后勤支持、专业许可证赠品、研讨会、演讲、赞助、在 Unite 大会上发言的机会等等。在早期，David 和 Unity 明白，培养独立开发者的草根团体对 Unity 的长期发展至关重要，并有助于实现他们为各行各业的人们提供民主化游戏开发的目标。」</span></p></blockquote><p><img height="261" src="https://static.oschina.net/uploads/space/2023/0927/120517_6aBs_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">BUG 在致社区的公开信中表达了对 David 和所有 Unity 员工的感谢。但他们也指出，过去几年间 Unity 已将其重点从游戏行业和支持开发者社区转移开。IPO 后，该公司似乎将利润看得比一切都重要，包括进行了多次收购并裁减了核心人员。导致开发者所需的许多关键系统仍然处于混乱且通常不完整的状态，Unity 传递的信息是广告和收入比游戏开发者关心的功能要更为重要。</span></p><p><span style="color:#000000">尤其是 Unity 本月推出的新定价模式，BUG 将其描述为「令人匪夷所思的敌对服务条款和价格表动」；也正是 Unity 的这一举措，促使了 BUG 解散的决策。</span></p><blockquote><p><span style="color:#000000">来自游戏行业的响亮而明确的谴责是前所未有的，Unity 别无选择，只能撤销一些最令人震惊的修改。即使有了这些新的让步，修改后的定价模式还是对我们社区中独立工作室的成功造成了不成比例的影响。</span></p><p><span style="color:#000000">更重要的是，我们看到了一个由高管主导的商业决策是多么容易和轻率，就能让我们辛辛苦苦建立起来的工作室面临破产的风险，威胁到我们作为专业人士的生计，并对我们行业的长远发展提出挑战。今天的 Unity 已经不再是集团成立之初的那个公司了，我们曾经对公司的信任已经彻底被侵蚀了。</span></p></blockquote><p><span style="color:#000000">BUG 的这一感受也在游戏开发社区的广大群体中得到了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FFuckedByUnity" target="_blank">回应</a><span style="color:#000000">，许多知名开发者表示，Unity 的举措基本没有挽回他们对该公司的信任。</span></p><p><span style="color:#000000">《吸血鬼幸存者》游戏的开发者 Poncle 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fpcgaming%2Fcomments%2F16rsuh0%2Fvampire_survivors_ama_with_developers_poncle%2F" target="_blank">Reddit AMA</a> 上被问及他们的下一款游戏/续作是否会再次使用 Unity 引擎时，就简明扼要地表示了拒绝："不，谢谢......即使 Unity 会完全收回他们的决定，我也不认为在他们目前的领导下信任他们是明智之举。"</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 04:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259693/first-official-unity-user-group-disbands</guid>
            <link>https://www.oschina.net/news/259693/first-official-unity-user-group-disbands</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 45 动态三层缓存补丁更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNOME 45 "Rīga" 上周已正式<a href="https://www.oschina.net/news/259088/gnome-45-r%C4%ABga-released">发布</a>，此版本虽然有许多针对桌面环境的改进，但上游缺少的一个功能是 Canonical 主导的<strong> Mutter 动态三层缓存</strong>。</p><p>动态三层缓存用于在需要时提升性能，并且已被证明有助于提高桌面渲染性能，例如使用英特尔集成显卡和 Raspberry Pi 显卡。此外，Debian 和 Ubuntu 已经合并这个动态三重缓冲补丁有一段时间了，但这项特性仍未能合并到上游。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-311bd78a79409ec737ca4af54e1a17734ef.png" referrerpolicy="no-referrer"></p><p>虽然动态三层缓存未能进入 GNOME 45，但 Canonical 的工程师 Daniel van Vugt <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsalsa.debian.org%2Fgnome-team%2Fmutter%2F-%2Fmerge_requests%2F108" target="_blank">更新了 Debian/Ubuntu 补丁</a>以与 Mutter 45.0 兼容。</p><blockquote><p>动态三层缓存是 Daniel 负责的一项功能，其动机是为了在需要的时候动态地进行三级缓存，以使 GPU 加快其时钟频率，否则它的渲染效率就会变慢。让 GPU 工作得更快并暂时导致额外的帧延迟不是理想的方式，但它似乎确实能在需要的时候让 GPU 性能得到提升。</p></blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0927/112744_naxT_2720166.png" referrerpolicy="no-referrer"></p><p>目前看来，一切都已准备就绪——使用 GNOME 45 的 Ubuntu 23.10 将提供动态三层缓存，该版本将于 10 月中旬首次亮相。该补丁现在还修复了显示器拔出插头时可能导致的潜在内存泄漏，该泄漏可能会导致独立 GPU 无法进入低功耗状态。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259683/gnome-45-triple-buffering</guid>
            <link>https://www.oschina.net/news/259683/gnome-45-triple-buffering</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apple 推出全球开发者资源 —— 人人能编程]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>9 月 26 日，Apple 宣布推出&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fexperts%2F" target="_blank">Meet with Apple Experts</a>&nbsp;开发者资源，帮助全球 Apple 开发者社区发现并参与课程、研讨会、实验室、一对一咨询等体验。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-03b3fbe6bda95fda8279db7ce8319e77581.png" referrerpolicy="no-referrer"></p><p>Meet with Apple Experts 初期提供超过 50 个课程、研讨会和咨询项目，并将持续提供线上和线下活动，开发者也可借助该平台和 Apple 专家直接沟通，获取洞见、支持和反馈；Meet with Apple Experts 同时也为所有开发者提供在各时区、通过各种语言举行的课程、实验室、研讨会和挑战赛，开发者即日起可报名参与多种主题的课程，深入探索 iOS 17、iPadOS 17、watchOS 10、visionOS，了解如何针对最新发布的硬件产品优化 app 和游戏。</p><p>注册 Apple 开发者、Apple Developer Program 和 Apple Developer Enterprise Program 的现成员可访问&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fexperts%2F" target="_blank">developer.apple.com/experts</a>&nbsp;进一步了解可参与的最新课程、实验室和特别活动的信息。</p><p>据了解，除了 Meet with Apple Experts，Apple 还为开发者提供了众多额外的开发工具和资源，包括各种先进工具与端到端支持，协助开发者构建、测试、营销和发行应用；同时内容丰富的免费工具与框架套件、Apple 开发者学院、企业家培训营、App 加速器和 Swift Student Challenge 等项目，以及「人人能编程」和 Swift Playgrounds 等开放工具，也确保所有人都能平等、方便地获取编程技术资源。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259667</guid>
            <link>https://www.oschina.net/news/259667</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Appilot —— 面向 DevOps 场景的 AI 助手]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong style="color:rgba(0, 0, 0, 0.9)"><span style="color:#006ed5">Appilot 是面向 DevOps 场景的 AI 助手 </span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">，这款产品将充分利用 AI 大语言模型的能力为用户提供变革性的部署和应用管理体验</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Appilot 基于大语言模型进行推理，并且可以运行在本地个人电脑上。用户可以根据自身的需求和使用习惯，将 Appilot 集成到任意平台，进而实现通过输入自然语言即可调用后端平台的能力。具体特性包括：</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">应用管理</span></strong>：借助 Appilot，您可以通过自然语言交互来轻松地部署、升级、回滚和查看应用程序的日志，无需繁琐的手动操作。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">环境管理</span></strong>：无论克隆环境还是查看环境内的依赖关系，均可通过 Appilot 实现，使用简单的指令即可完成复杂的环境管理任务。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">诊断排障</span></strong>：如果发现系统异常，Appilot 所拥有的排查和修复功能，可以帮助您快速识别问题并采取措施解决它们。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">行为护栏</span></strong>：我们深知安全的重要性，因此 Appilot 仅提供领域特定的回答，并要求审批任何可能导致系统变更的操作，有助于确保您的系统不会受到未经授权的访问。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">混合基础设施编排</span></strong>：Appilot 可以轻松对接任意基础设施，无缝集成各种云服务、容器化平台等，使您能够在多样化的环境中运行应用程序。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">支持多语言</span></strong>：您可以采用包括但不限于中文、英文等语言输入指令进行交互。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">可插拔后端</span></strong>：我们秉持着开源开放的理念，避免供应商锁定。因此您可以根据需要自定义后端，以满足您的具体需求。</p></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f085f385caee96aa02b719013b8c3bad6d.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/appilot</guid>
            <link>https://www.oschina.net/p/appilot</link>
        </item>
        <item>
            <title>
                <![CDATA[为承德程序员发声]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/2720166_2331095">为承德程序员发声</a><div class="ui orange label horizontal" data-tooltip="热门">热</div></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/hardbone" class="__user"><span>局</span></a> 发布于，昨天 10:28
                    </div><div class="item">阅读 13K+</div><div class="item collect-btn " data-id="2331095" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331095" data-obj-type="2">3</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/2720166_2331095#comments" class="normal"><i class="comment outline icon"></i> 评论 <span data-article-reply-count="">28</span></a></div></div><div class="content" id="articleContent"><blockquote><p>转载自，唐巧微信公众号<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FdudaNfJJJVUpy2MKiZQAIA" target="_blank" rel="nofollow">https://mp.weixin.qq.com/s/dudaNfJJJVUpy2MKiZQAIA</a></p></blockquote><p><strong>事情起因</strong></p><p>承德一位程序员因为在 GitHub 上接海外的开源项目，因为交流不方便使用了俗话称作「fan 墙」的软件以便访问 Google 等外网服务，被罚款 200 元，没收 3 年「非法收入」100 多万元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-edac4ca38ffde4385c9de44dba968ab1986.png" referrerpolicy="no-referrer"></p><p><strong>行业观点</strong></p><p>事情发生后，我身边的所有人都为该处罚表达不满情绪。部分朋友把这个归结小地方处罚不规范。</p><p>胡锡进专门发文，希望对这种社会危害性为零的远程打工挣外汇行为进行宽容。</p><p>但随后他删除了微博。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7c214e7091ef10a031e68380830f004df3c.png" referrerpolicy="no-referrer"></p><p><strong>我的观点</strong></p><p>1、程序员在国内向境外输出劳动力，既赚取了外汇，又解决了自己的就业问题，而且向世界展示了中国互联网行业的全球竞争力。国家非但不应该打击，而且应该鼓励。</p><p>这是一种新形态的「出口」。有助于中国建立更大的全球影响力。事实上，这位被罚同行的工作内容，就是从事大量被使用的开源项目的开发。参与开源项目本就是输出行业影响力的最佳方式。</p><p>2、当前并没有渠道为这一类人群的合法访问外国网络提供便利。希望相关部门能对合法的使用外网需求，建立合适的申请和监管渠道。</p><p>3、在相关规章制度完善之前，对于工作生活需要，不得已访问境外网站的。如果没有对社会产生负面影响，那么不应该处罚。对于有利于个人就业，有利于行业发展，有利于国家声誉的事情，国家应该适度鼓励并组织研究相关法规，帮助规范和健全相关经济活动。</p><hr><ul><li><a href="https://www.oschina.net/news/259325" target="_blank" rel="nofollow">罚款 200 元，没收 100 多万</a></li></ul></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331095" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331095" data-obj-type="2">3</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331095" data-obj-type="2" data-url="https://www.oschina.net/question/2720166_2331095"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/2720166_2331095</guid>
            <link>https://www.oschina.net/question/2720166_2331095</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 用于构建用户界面的 JavaScript 库 openInula]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-openinula-开源项目" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE"></a>openInula 开源项目</h1><h2><a id="user-content-项目介绍" class="anchor" href="https://gitee.com/openInula/inula#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p>单词 Inula（发音为：[ˈɪnjʊlə]），意为一类旋覆花属菊科的植物。openInula 是一款用于构建用户界面的 JavaScript 库，提供响应式 API 帮助开发者简单高效构建 web 页面，比传统虚拟 DOM 方式渲染效率提升 30% 以上！同时 InulaJS 提供与 React 保持一致的 API，并且提供 5 大常用功能丰富的核心组件：状态管理器、路由、国际化、请求组件、应用脚手架，以便开发者高效、高质量的构筑基于 InulaJS 的前端产品。</p><h2><a id="user-content-技术架构" class="anchor" href="https://gitee.com/openInula/inula#%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84"></a>技术架构</h2><p><img src="https://gitee.com/openInula/inula-doc/raw/master/static/img/structure.PNG" alt="输入图片说明" referrerpolicy="no-referrer"></p><h3><a id="user-content-核心能力" class="anchor" href="https://gitee.com/openInula/inula#%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B"></a>核心能力</h3><p><strong>响应式 API</strong></p><ul><li>openInula 通过最小化重新渲染的范围，从而进行高效的 UI 渲染。这种方式避免了虚拟 DOM 的开销，使得 openInula 在性能方面表现出色。</li><li>openInula 通过比较变化前后的 JavaScript 对象以细粒度的依赖追踪机制来实现响应式更新，无需用户过度关注性能优化。</li><li>简洁 API：
<ol><li>openInula 提供了两组简洁直观的 API--响应式 API 和与 React 一致的传统 API，使得开发者可以轻松地构建复杂的交互式界面。</li><li>openInula 简洁的 API 极大降低了开发者的学习成本，开发者使用响应式 API 可以快速构建高效的前端界面。</li></ol></li></ul><p><strong>兼容 ReactAPI</strong></p><ul><li>与 React 保持一致 API 的特性、可以无缝支持 React 生态。</li><li>使用传统 API 可以无缝将 React 项目切换至 openInula，React 应用可零修改切换至 openInula。</li></ul><h3><a id="user-content-openinula-配套组件" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E9%85%8D%E5%A5%97%E7%BB%84%E4%BB%B6"></a>openInula 配套组件</h3><p><strong>状态管理器/inula-X</strong></p><p>inula-X 是 openInula 默认提供的状态管理器，无需额外引入三方库，就可以简单实现跨组件/页面共享状态。
inula-X 与 Redux 比可创建多个 Store，不需要在 Reducer 中返回 state 并且简化了 Action 和 Reducer 的创建步骤，原生支持异步能力，组件能做到精准重渲染。inula-X 均可使用函数组件、class 组件，能提供 redux 的适配接口及支持响应式的特点。</p><p><strong>路由/inula-router</strong></p><p>inula-router 是 openInula 生态组建的一部分，为 openInula 提供前端路由的能力，是构建大型应用必要组件。
inula-router 涵盖 react-router、history、connect-react-router 的功能。</p><p><strong>请求/inula-request</strong></p><p>inula-request 是 openInula 生态组件，涵盖常见的网络请求方式，并提供动态轮询钩子函数给用户更便捷的定制化请求体验。</p><p><strong>国际化/inula-intl</strong></p><p>inula-intl 是基于 openInula 生态组件，其主要提供了国际化功能，涵盖了基本的国际化组件和钩子函数，便于用户在构建国际化能力时方便操作。</p><p><strong>调试工具/inula-dev-tools</strong></p><p>inula-dev-tools 是一个为 openInula 开发者提供的强大工具集，能够方便地查看和编辑组件树、管理应用状态以及进行性能分析，极大提高了开发效率和诊断问题的便捷性。</p><p><strong>脚手架/inula-cli</strong></p><p>inula-cli 是一套针对 openInula 的编译期插件，它支持代码优化、JSX 语法转换以及代码分割，有助于提高应用的性能、可读性和可维护性。</p><h2><a id="user-content-openinula-文档" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E6%96%87%E6%A1%A3"></a>openInula 文档</h2><p>欢迎访问 openInula 官网文档仓库，参与 openInula 开发者文档开源项目，与我们一起完善开发者文档。</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.openinula.net%2F">访问官网</a></p><h2><a id="user-content-代码仓地址" class="anchor" href="https://gitee.com/openInula/inula#%E4%BB%A3%E7%A0%81%E4%BB%93%E5%9C%B0%E5%9D%80"></a>代码仓地址</h2><p>openInula 仓库地址：<a href="https://gitee.com/openinula">https://gitee.com/openinula</a></p><h2><a id="user-content-如何参与" class="anchor" href="https://gitee.com/openInula/inula#%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E"></a>如何参与</h2><p><strong>参与贡献</strong>
欢迎您参与<a href="https://gitee.com/openinula/docs/blob/master/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97.md">贡献</a>，我们鼓励开发者以各种方式参与文档反馈和贡献。</p><p>您可以对现有文档进行评价、简单更改、反馈文档质量问题、贡献您的原创内容，详细请参考<a href="https://gitee.com/openinula/docs/blob/master/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97.md">贡献文档</a>。</p><h2><a id="user-content-许可协议" class="anchor" href="https://gitee.com/openInula/inula#%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE"></a>许可协议</h2><p>openInula 主要遵循 Mulan Permissive Software License v2 协议，详情请参考各代码仓 LICENSE 声明。</p><h2><a id="user-content-联系方式" class="anchor" href="https://gitee.com/openInula/inula#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F"></a>联系方式</h2><p><a href="mailto:team@inulajs.org">team@inulajs.org</a></p>]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/openInula/inula</guid>
            <link>https://gitee.com/openInula/inula</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 小程序编译器性能优化之路]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-47f7698050b7b5de818c8012cafcc66ac83.png" alt="" referrerpolicy="no-referrer"></p><p>作者 | 马可</p><blockquote><p>导读</p><p>小程序编译器是百度开发者工具中的编译构建模块，用来将小程序代码转换成运行时代码。旧版编译器由于业务发展，存在编译慢、内存占用高的问题，我们对编译器做了一次大规模的重构，采用自研架构，做了多线程、代码缓存、sourcemap 等多项优化，在性能和内存占用上都有很大提升。全文介绍了新版编译器的设计思路和优化方法，以及一些能够用在通用打包工具里的技术点。</p></blockquote><blockquote><p><em>全文 6629 字，预计阅读时间 17 分钟。</em></p></blockquote><h1><strong>01 前言</strong></h1><p>小程序编译器在小程序开发、预览、发布各个阶段都需要使用，因此编译器性能会直接影响到开发者开发效率，也会影响到开发者工具的使用体验。</p><p>由于旧版的编译器（基于 webpack4）在构建大型项目时会很慢，内存占用也高，一直被开发者吐槽。我们经过大量的调研和开发，最后采用完全自研架构做新编译，针对小程序项目构建做了大量优化，基本解决了旧编译存在的问题。</p><p>下图是部分项目构建时间对比：</p><p><img src="https://oscimg.oschina.net/oscnet/up-af3d75670e77d75bf9f10f93f81c0f04a5a.png" alt="" referrerpolicy="no-referrer"></p><p>新版编译器相对于旧版实现了 2~7 倍的性能提升，并且支持实时编译、热重载等特性，内存占用更少，构建产物更优。</p><p>下面从，框架选型、新编译器工作原理、性能和产物优化方法，等方面介绍新版编译器的成长之路。</p><h1><strong>02 框架选型</strong></h1><p>在进行新版编译器设计时，需要明确当前的痛点问题：性能，优先解决性能问题。其他新技术和新想法对编译器有帮助的也一起实施。</p><p><strong>旧版编译器基于 webpack4 存在如下几个问题：</strong></p><ul><li><p>大型项目构建速度太慢。</p></li><li><p>dev 启动慢、增量编译慢，仅支持 loader 缓存，bundle 无缓存也比较慢。</p></li><li><p>基于 webpack4 做扩展开发，需要 patch 部分模块才能工作，维护困难。</p></li><li><p>部分 webpack bundle 过程无法针对小程序代码结构进行优化，存在无效构建。</p></li></ul><p><strong>新编译的设计目标：</strong></p><ul><li><p>更快的全量编译速度，消除 webpack 存在的无效构建过程。</p></li><li><p>支持全缓存，加快首次和增量编译速度。</p></li><li><p>支持实时编译，减少 dev 启动和二次编译时间。</p></li><li><p>支持多线程编译加速，支持页面热重载。</p></li><li><p>优化产物结构，减少产物体积。</p></li></ul><h2><strong>2.1 主流构建工具</strong></h2><p>下面介绍的是我们调研过的主流前端构建工具，每个工具都有适用场景和优缺点。</p><p>在新版本编译器架构设计时，其他构建工具的设计理念和技术特点都值得参考。</p><p><strong>Webpack 构建过程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-475b788c3ef6ad78df38db53396609efc33.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Webpack 优点</strong>：功能完善、社区活跃、可配置性强、有很强的扩展性。</p><p><strong>Webpack 缺点</strong>：配置复杂、构建速度慢，二次开发困难。</p><p><strong>Parcel 构建过程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-b554482b6f2ef7aed547d2b55f1a4f68183.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Parcel 优点</strong>：无需配置，构建速度快，原生支持多线程和全缓存，多线程之间共享数据通过 lmdb 进行，避免跨线程通信开销。</p><p><strong>Parcel 缺点</strong>：生态小，自定义性有限，大量采用 Node 插件，兼容性也差一些。</p><p><strong>Vite 构建过程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-38aeaa049d0994119a775d2669a0dbe769c.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Vite 优点</strong>：配置较为简单，按需编译，启动快，dev 时有不错的体验。</p><p><strong>Vite 缺点</strong>：生态小，dev 和，发布走两套构建流程。</p><p><strong>其他小程序平台：</strong></p><ul><li><p>微信基于 gulp 和 C++ 模块做小程序构建，并且对 npm 模块做了预构建，在性能和开发体验上做的比较好。</p></li><li><p>支付宝基于 webpack 做小程序构建，并且使用了 esbuild 加速代码压缩。</p></li><li><p>抖音小程序使用自研编译器，构建流程比较简单。</p></li></ul><h2><strong>2.2 新版编译器</strong></h2><p>在设计新编译框架时，借鉴了主流打包工具的工作流程，结合小程序代码特点，决定不做通用打包工具，重点优化小程序打包性能。</p><p>最终选择了自研编译器的方案，并做了大量优化工作，新版编译器优化点有如下几个方面：</p><p>1.支持多 Compiler 协同工作，将动态库开发等多类型项目构建解耦。</p><p>2.编译阶段全流程缓存，节省二次构建时间 90% 以上。</p><p>3.dev 开发默认采用按需编译，提升单页编译性能。</p><p>4.支持 babel 和 swc 多线程编译，提升全量编译速度 2 ~ 7 倍。</p><p>5.采用新版 sourcemap 协议，移除非必要解析合并，将 bundle 阶段耗时大幅缩减。</p><p>6.对 js、css、swan 模板编译均做了构建时标记优化，减少 bundle 合并耗时。</p><p>7.对于预览、发布阶段的 js 压缩和混淆，采用了 terser 和 esbuild 并行方案，esbuild 用于快速打出预览包，terser 可以保证压缩率用于发布包。</p><p>从结果看，新编译器从速度、资源占用和可维护性上相对于旧版都有显著的提升。</p><h1><strong>03 新版编译器工作原理</strong></h1><p>新编译器的处理流程和 parcel 比较类似，Compiler 控制处理流程，Processor 进行代码转换，基本流程如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-70518bd0ba131a6e1ec9b169622be792fc3.png" alt="" referrerpolicy="no-referrer"></p><p>其中几个重要的模块：</p><ul><li><p>CompileEntry 编译器为入口模块，包含 cli 通信、dev server 通信、命令调用等。</p></li><li><p>CompileManager 为编译管理器，用于依赖资源下载和管理以及多个 Compiler 协同构建。</p></li><li><p>Compiler 为编译器模块，用于将项目源码编译成运行时代码，项目构建时 Compiler 可能有多个。</p></li><li><p>Processor 为单元处理器，用于处理，代码转换、代码合并，等单个编译任务。</p></li></ul><p><strong>注</strong>：小程序 App 项目有 1 个 Compiler，动态库和动态扩展项目 2 个 Compiler。</p><h2><strong>3.1 Compiler 编译器</strong></h2><p>用于编译单个小程序项目，将开发者原始代码编译为可运行代码。</p><p><strong>工作职能：</strong></p><p>1.创建运行上下文，提供 config、fs 文件处理、watcher 监控、logger 等模块，给 Processor 使用。</p><p>2.全量编译、文件变更时二次编译；这里二次编译也是走一遍全量编译流程，不过大部分用的是缓存结果。</p><p>3.管理、调度、运行 Processor 处理单元。</p><p>4.维护 Processor 依赖关系和结果缓存。</p><p><strong>特点：</strong></p><p>1.实现全流程缓存，将每个 Processor 的输入参数、输出结果写入缓存，在有缓存情况下二次编译时长可减少 90% 。</p><p>2.支持按需编译，每次按需单页编译、增量编译、全量编译，都走同样的 Processor 处理流程。</p><p>3.通过 Proxy 机制自动计算缓存参数依赖，不用手动为每个 Processor 生成缓存 hash，相对于 webpack 或 parcel 减少 bug 产生。</p><p>4.仅维护 Processor 依赖关系，不维护 ModuleGraph，简化处理流程。</p><p>关于全流程缓存每家打包器都有自己的实现方案，基本原理是根据当前输入参数和依赖情况为处理单元生成一个唯一 hash，hash 一致则结果一致。</p><p>webpack 和 parcel 由于维护了 ModuleGraph，缓存的计算和重用会复杂一些。小程序编译器仅根据 Processor 入参和调用依赖进行计算。</p><h2><strong>3.2 Processor 单元处理器</strong></h2><p><strong>Processor 有如下特性：</strong></p><p>1.在输入参数一致的情况下，保证输出一致，输入和输出都必须可序列化为 json ，实现了 Processor 全缓存。</p><p>2.Processor 中的 uri 为构建 ID，在单次构建过程中 ID 一致则处理结果一致，例如处理 app.js 文件，uri 为：js:app.js，好处是可以统一 Processor 资源处理路径。</p><p>3.Processor 之间支持互相调用：processWith 调用并继续执行，processWithResult 调用并等待返回结果。</p><p><strong>注意</strong>：这里的输入参数包含 uri、app config, contextFreeData。</p><p><strong>几种常用的 Processor：</strong></p><p>1.JS Processor 将 es6 代码转换成 es5 代码，这是最耗时的模块。</p><p>2.Swan Processor 将 swan 模板代码转换成 view 层 js 代码。</p><p>3.Css Processor 使用 postcss 处理 css 中的单位转换、依赖收集等工作。</p><p>4.Bundle Processor 将前面 transformer 处理结果按照 bundle 算法合并文件并输出结果。</p><p><strong>Processor 工作流程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-8b070b7436cae7395aa1b3ece2ae58346d8.png" alt="" referrerpolicy="no-referrer"></p><p>Processor 处理流程需要经过 transform -&gt; bundle 的过程，在小程序里 js, css, swan 模板的 bundle 可以分开并行处理，这里和 webpack 的处理模式不一样，和 parcel 的 pipeline 类似。</p><h2><strong>3.3 性能和产物优化方法</strong></h2><h3><strong>3.3.1 多核心编译优化</strong></h3><p>由于 Node 中多线程模块初始化速度和通信效率比多进程好一些，新编译选择使用，多线程，做多核心优化。</p><p><strong>多线程编译有 2 种方案选择：</strong></p><ul><li><p>方案 1：基于 processor 做多线程调度，由于 processor 间支持相互调用，实际处理会很复杂且有通信成本。</p></li><li><p>旧的编译器做过基于 webpack 的 workerthread-loader，性能提升有限（10%~15%）。</p></li><li><p>parcel 基于 lmdb 公共缓存消除线程间通信，保证读写效率，是一个比较好的解决方法。</p></li><li><p>方案 2：仅对 js 转译做多线程调度，仅有一来一回 2 次通信成本。</p></li><li><p>使用 jest-worker 和 babel transform 做 js 多线程转译或者用 swc 多线程做 js 转译。</p></li></ul><p>由于大部分构建时间在 js 转译这里（js 中有大量 node_modules 依赖，均需要转换），css 和 swan 模块转换耗时少。</p><p>最终选择方案 2 仅做 js 多线程转译，处理流程简单且收益较好，整体提升如下：</p><ul><li><p>使用 jest-worker 多线程 babel 转译，4 线程可提升 1 倍以上速度。</p></li><li><p>使用 swc 做 js 转译，4 线程提升 4 倍以上速度。</p></li></ul><p><strong>JS Processor 多线程处理：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-c3616ceaffc1873c47e87951e92160d998e.png" alt="" referrerpolicy="no-referrer"></p><p>其中：</p><p><strong>uri</strong>： 为处理器构建 ID</p><p><strong>contextFreeData</strong>： 单次构建中不可变数据，例如 app.json 中的配置项</p><p><strong>context args</strong>：全局参数，例如优化实验开关、多线程开关等</p><p>在 js 转换处理时规定了 transformer 统一转换接口，基于接口实现了 babel 单线程、babel 多线程、swc 转换 3 种处理器，并且可随时做处理器切换。</p><p>对于不同的编译环境可以做到灵活设置：</p><p>1.开发者工具中开发者根据机器配置情况可以切换，多线程、swc 编译模式，提升效率。</p><p>2.云编译流水线默认开多线程编译提高性能。</p><p>3.webIDE 默认开单线程降低资源消耗。</p><h3><strong>3.3.2 SWC 编译优化</strong></h3><p>新编译器多线程模式相对于旧编译提升了 1 倍左右，在 dev 开发时一些大型项目页面首次编译还是有些慢，需要 10 秒以上，主要耗时在 js transform 这里。</p><p>swc 目前在 js 转译上基本成熟了，且大部分场景能提升 4 倍以上转译速度，因此增加了 swc 多线程转译支持，将大型项目页面首次编译控制在了 5 秒以内。</p><p>需要编写 2 个 swc 插件来适配 swc 转译：</p><ul><li><p>@swanide/swc-require-rename 将 require/import/export 中的模块提取路径信息，以便于后续在 js 中分析模块依赖关系。</p></li><li><p>@swanide/swc-web-debug 对 js 代码进行插桩处理，用来支持真机调试中的断点调试。</p></li></ul><p>swc 编译带来的性能提升是巨大的，在使用中也发现了一些问题：</p><p>1.swc 存在内存泄露，在 dev 阶段如果全量编译次数过多，会导致内存占用很高，需手动重启编译器。</p><p>2.swc 插件支持的 api 较少，一部分 babel 容易实现的功能，在 swc 中很难处理。</p><p>3.swc 由于使用 rust 编写插件，插件在不同 @swc/core 版本间不能通用，需要为不同平台生成 swc 插件，在部署上会麻烦一些。</p><p>在实际使用中，对于一部分 swc 不能很好处理的场景，会降级到 babel 处理。</p><h3><strong>3.3.3 代码压缩和运行时缓存</strong></h3><p>在 dev 阶段，编译后的代码是没有经过压缩的，可以在模拟器中运行。在预览发布阶段由于限制了包体积，需要做代码压缩以减少产物体积。</p><p>可选的代码压缩工具有如下 3 个：</p><p>1.terser 压缩率高，产物体积小，速度最慢。</p><p>2.swc 压缩快，mangle 支持不完善，压缩率较差。</p><p>3.esbuild 压缩最快（比 terser 快了 10 倍以上），支持 mangle，代码压缩率不如 terser。</p><p>最后经过对比考虑，选择了如下压缩方案：</p><p>1.预览阶段由于不需要 sourcemap，移除 sourcemap，并使用 esbuild 做代码压缩，提高预览速度（对于自动预览场景有很大提升）。</p><p>2.发布阶段使用 terser 做多线程压缩，并保留 sourcemap。</p><p>运行时缓存，指的是构建过程的中间结果都在内存中做了缓存，包括 Processor 处理结果，和 代码压缩结果，在二次构建时可以节省大部分重新构建时间。由于缓存中保留的是字符串和 json 对象，相对于基于 webpack 的旧版编译器有 40% ~ 60% 的内存节省，在内存占用上处于可接受范围。</p><h3><strong>3.3.4 Swan 模板处理优化</strong></h3><p>旧的 swan 模板处理使用 swan-loader 进行模板转换，由于设计时没有处理好模板 import 作用域，导致 &lt;template&gt; 标签以及 filter 过滤器函数只能内联到页面代码中，如果模板中大量使用了 template 和 filter，最终生成的代码体积会非常大。</p><p>新编编译器纠正了 import 作用域关系，将编译产物中的 template 、 filter 生成模式由内联改为 require 引用，然后在 bundle 阶段做代码合并，使相同模块能够得到重用，算是填了一个大坑。</p><p><strong>新编译器 swan 模板处理流程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-41f43a8a82b471e090692098e7e8c0960ce.png" alt="" referrerpolicy="no-referrer"> 单个 swan 文件经过 Processor 处理后可能的产物有：</p><ul><li><p>component 组件模块，用于生成页面和自定义组件</p></li><li><p>template 模块</p></li><li><p>filter 过滤器函数、sjs 过滤器函数</p></li><li><p>transformed document 中间代码</p></li></ul><p>将 swan 模板转换成不同类型的 js module，并维护依赖关系，便于后续的代码合并时更精细化的控制。</p><p>由于历史原因 import/include 中包含 sjs 或者 template 引用时不能直接生成 template 模块，需要在最后入口模板中生成。新编译也提供了 template 静态编译选项，将严格限制 import 作用域，可直接生成 template 模块代码，对于 taro 生成的小程序项目可以节约 30% 左右的产物大小。</p><h3><strong>3.3.5 Sourcemap 优化</strong></h3><p>由于编译器需要支持 js 代码调试以及运行时 error 跟踪，在 dev 和发布阶段都需要生成 sourcemap。</p><p>在 webpack 中生成代码时需要对 sourcemap 进行合并计算，较大的项目 sourcemap 合并会占用很长时间，并且每次重新编译都要重新计算 sourcemap。</p><p>调研时发现浏览器 devtools 对 sourcemap 协议，的 index map 支持非常好， 新编译器基于 index map 协议做了 sourcemap 合并优化，由之前的多文件 sourcemap 合并计算，变成了计算生成 offset map 并拼接内容，这样 js bundle 耗时就由原来的，几秒到几十秒变为了固定 3 秒以内。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7988863ee8de85eae8738399ff63f0d4573.png" alt="" referrerpolicy="no-referrer"></p><p>一个有意思的事情是 vscode 的 js-debugger 直到 22 年 6 月份才支持 index map 调试（index map 2011 年发布的），微软的动作稍微慢了一些。</p><h3><strong>3.3.6 后续工作</strong></h3><p>在新编译器开发完成之后的推广中，采用了渐进式推广方式：</p><p><strong>第一阶段</strong>，开发者工具新旧编译器共存，dev、预览使用新编译器，发布使用旧编译器。</p><p><strong>第二阶段</strong>，内部 pipeline 预览和发布全量使用新编译。</p><p><strong>第三阶段</strong>，开发者工具全部切换到新编译器。</p><p>新版编译实际上线后还存在一些小的兼容性问题，需要尽量提前暴露问题才能做发布全量替换。</p><p>针对小程序项目，新编译做了大量的优化工作，部分优化工作还没有完成开发，包括：</p><p><strong>hmr 热重载</strong>：开发中，由于，运行时框架、开发者工具均需要做接口适配，需要较长时间调试才能达到预期。</p><p><strong>tree-shaking 代码消除</strong>：对于 es6 模块在 transform 阶段可以做 tree-shaking 消减代码。</p><p><strong>scope-hoisting 作用域提升</strong>：理论可行，需要验证代码缩减效果。</p><p>新版编译器由于需要完全兼容旧版编译器构建结果，在 bundle 打包场景还存在优化空间，我们在后续工作中配合运行时框架可以做更多打包产物优化。</p><h1><strong>04 总结</strong></h1><p>新版编译器采用自研打包方案，对比基于 webpack 的旧编译器实现了巨大的性能提升，彻底解决了编译慢、资源占用高的问题，相对友商的编译器也有不错的性能优势。</p><p>一些新编译引入的优化手段如 swc 转译、esbuild 压缩、sourcemap 优化，也能用在其他前端项目构建中，并起到加速效果。</p><p>在新编译器项目中每个同学都非常努力，贡献了很多奇妙的点子，遇到的大部分难题都有效解决了。我们会继续坚持性能和产物优化这两个方向，不断提升开发者体验和运行时效率。</p><p>——END——</p><p><strong>推荐阅读</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247571280%26idx%3D1%26sn%3Df52aee0632693276224b4de1ba4fb0ba%26chksm%3Dc03fe72cf7486e3a0795aaabd4af6783b01f1aee769bf8d43d892101c2ca9feb7e9e7521f552%26scene%3D21%23wechat_redirect" target="_blank">百度 APP iOS 端包体积 50M 优化实践 (六) 无用方法清理</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570869%26idx%3D1%26sn%3Dce0712fad8ff6386c48a1363892b6a6b%26chksm%3Dc03fe5c9f7486cdfadf587b505c9de45d7bae6578e0ec6159c2f969854e488337d1544d37562%26scene%3D21%23wechat_redirect" target="_blank">基于异常上线场景的实时拦截与问题分发策略</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570853%26idx%3D1%26sn%3D51afb6a105c191c9bebdf19a1042ac94%26chksm%3Dc03fe5d9f7486ccfdfe33952845e048f506680bbf56be8448ee2be780c0fe90f170c86e3030c%26scene%3D21%23wechat_redirect" target="_blank">极致优化 SSD 并行读调度</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570809%26idx%3D1%26sn%3D2e9514a2d5233e0611c39361d29505a3%26chksm%3Dc03fe505f7486c138fab993da98004f431ff399d7a3700edca4cd9bdbab57b78e1098b18f9ac%26scene%3D21%23wechat_redirect" target="_blank">AI 文本创作在百度 App 发文的实践</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570754%26idx%3D1%26sn%3Da11c148b57e0fc5b91e600404ce063a0%26chksm%3Dc03fe53ef7486c28ff8980433db6437dad74c6bd3fbaf0fb516e59182dd8d85d7c6af090b665%26scene%3D21%23wechat_redirect" target="_blank">DeeTune：基于 eBPF 的百度网络框架设计与应用</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/10114374</guid>
            <link>https://my.oschina.net/u/4939618/blog/10114374</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[私域管理平台，LinkWeChat V4.9.4 版本发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">LinkWeChat 是国内首个基于企业微信的开源 SCRM，在集成了企微强大的开放能力的基础上，进一步升级拓展灵活高效的客户运营能力及多元化精准营销能力，让客户与企业之间建立强链接，帮助企业提高客户运营效率，强化营销能力，拓展盈利空间，是企业私域流量管理与营销的综合解决方案，目前已经受到企业微信的官方推荐和国家级木兰开源社区进行孵化，同时也是国家工信部重点扶持项目，同时也获得 2022 年中国开源创新大赛二等奖。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>LinkWeChat v4.9.4 主要的升级内容如下：</strong></p><p><span style="background-color:#ffffff; color:#40485b">1.客户列表新增黑名单功能。</span></p><p><img height="1296" src="https://oscimg.oschina.net/oscnet/up-58b99e69049a37367fe92947f265da738f6.png" width="2832" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#40485b">2.轨迹素材新增标签功能，可以预览后自动给客户打标签。</span></p><p><img height="1298" src="https://oscimg.oschina.net/oscnet/up-2db4e1e0183bfde7e1c6ee706fd8e53dc27.png" width="2832" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#40485b">3.客户列表等统计功能相关 bug 修复。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 10:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259607/linkwechat-4-9-4-released</guid>
            <link>https://www.oschina.net/news/259607/linkwechat-4-9-4-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高效能软件工程师的 7 个习惯]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>管理学大师史蒂芬·柯维代表作《高效能人士的 7 个习惯》是商业书籍的经典之作，产生了积极而深远的影响。如果我们把《高效能人士的 7 个习惯》的理念应用到软件工程师身上，又会怎么样呢？</p><p>资深软件工程师 Luthfur Chowdhury 根据职业生涯中见过的优秀软件工程师的常见习惯，整理出以下清单——</p><p><strong>7 Habits of Highly Effective Software Engineers（高效能软件工程师的 7 个习惯）：</strong></p><p><strong>1. 快速将想法打造出原型，进行概念验证</strong></p><p>许多想法和新技术概念听起来很棒，但现实往往会有所不同。</p><p>为了更好地了解想法的可行性，优秀的工程师会更快地投入原型设计和概念验证。原型设计是一个很好的学习和探索工具。你会发现自己想到的方法是否可行，是否真正解决了你原来的问题，或者是否存在你之前没有想到的限制。</p><p><strong>2. 有效评估工作量</strong></p><p>工作量评估会影响产品路线图、技术方法和交付给终端用户的价值。</p><p>拥有良好评估能力的工程师的团队会给他们的工作带来信心。经常延期的团队会产生压力和不确定感。优秀的工程师通过跟踪他们的估计和工作实际花费时间之间的差异来更好地做到这一点。</p><p><strong>3. 快速且及时地 review 代码</strong></p><p>审查 PR 的速度越快，代码改进的速度就越快，并且投入生产的速度也就越快。快速的代码 review 可以向开发者提供反馈，同时代码和相关概念仍然记忆犹新。</p><p><strong>4. 主动记录代码、设计和流程，形成文档</strong></p><p>优秀的文档将帮助未来的工程师维护和构建工作。</p><p>放弃现有系统的一个关键原因通常是周围没有人知道它是如何运行的，或者不了解技术决策背后的背景。优秀的工程师通过记录他们的工作来确保他们留下坚实的基础和遗产。</p><p><strong>5. 坦诚地参与技术讨论</strong></p><p>构建出色的软件需要一个对技术想法持开放和坦诚态度的团队。</p><p>每个人都应该坦诚说出自己的想法，并营造一种邀请其他人也这样做的氛围。提出一个好主意并继续重复它以使其变得更好。</p><p>如果看到了想法中的缺陷，就公开地指出来，并解释你的理由。</p><p><strong>6. 完成「狗屎」工作</strong></p><p>只有完成工作才能取得成果。你需要把事情做好并交付生产。当一个项目接近完成时，我们都有过能量减弱的经历，当时间不够，终点线仍然感觉很遥远的时候。这就是需要集中注意力、缩小功能范围、保持强度水平并推动项目完成的地方。把事情做好是伟大工程师所体现的一种技能和习惯。</p><p><strong>7. 保持好奇心</strong></p><p>伟大的工程师往往具有天生的好奇心。他们不止对解决长期业务问题的新技术、新技术方法感兴趣。因为他们的好奇心不仅限于技术，还会经常进一步了解他们所做工作的用户和业务背景，以及他们可以产生的影响。</p><p>原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmakingsmallercircles.com%2Farticles%2F7-habits-of-highly-effective-software-engineers%2F" target="_blank">https://makingsmallercircles.com/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 09:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</guid>
            <link>https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
