<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 05 Dec 2023 15:26:33 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[工信部回应 2G/3G 「退网」：必然选择，但要充分保障用户权益]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，工业和信息化部答复了网友关于保障老旧手机用户基础通信功能的建议。</p><p>网友留言称，我国有大量人群还在用老旧手机、按键手机等电子设备，希望工信部结合我国实际情况统筹安排，保证前述群体基础通信功能，循序渐进发展新通信技术，保留基本通信技术正常运转。</p><p>对此，工信部答复称，2G/3G 退网是更新换代的必然选择，也是当前国际上的主要做法。将有限的频率资源和网络资源用到 5G、4G 的发展中，有利于从整体上降低运营成本，提高我国网络运营效率；也可以降低手机复杂度，提高效能，降低成本。但企业要早谋划，早告知，必须有用户保障措施和完善的用户善后方案，具备提供更好的网络覆盖、更强的业务能力和更优的服务质量的能力。工信部将依法规推进并做好用户权益保护工作。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-4a32c3b7dbb0f58f486c3303440f6dfb493.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fliuyan.people.com.cn%2Fthreads%2Fcontent%3Ftid%3D18866120" target="_blank">https://liuyan.people.com.cn/threads/content?tid=18866120</a></u></em></p></blockquote><p>对于下一步的工作，工信部表示，考虑到移动通信退网涉及用户多、社会影响大，需统筹谋划、合理推进，发挥市场决定作用，强化企业主体责任，由电信企业结合自身情况，制定退网计划，适时启用 2G 退网工作，做好舆论引导、用户善后、关停基站、停止服务、腾退资源、申请注销许可等工作。工信部将依法规推进并做好用户权益保护工作。</p><p>此前在 2019 年 10 月，工信部相关负责人曾表示，目前我国移动通信网络 2G、3G 的退网条件已逐渐成熟，鼓励运营企业积极引导用户迁移转网。2021 年 11 月，工信部印发的《十四五信息通信行业发展规划》将 2G、3G 退网列入十四五期间网络基础设施建设的重点工作。2023 年 8 月，工信部许可中国电信将现网用于 2G/3G/4G 系统的 800MHz 频段频率重耕用于 5G 公众移动通信系统。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 11:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269662</guid>
            <link>https://www.oschina.net/news/269662</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[美图 AI 大模型产品 Miraclevision 开放 API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美图自研 AI 视觉大模型 MiracleVision（奇想智能）今日</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F2DR455nI6VS-tSSCjRSr7w" target="_blank">宣布</a><span style="color:#000000">正式开放商业 API，提供 3 个阶梯套餐。</span></p><p><span style="color:#000000">用户接入后，生产 10 万张以下图片，售价 0.1 元/张；10 万-100 万张，售价 0.08 元/张；100 万张以上，为 0.06 元/张。</span></p><p><span style="color:#000000">MiracleVision 于 2023 年 6 月 19 日正式亮相，目前已更新至 4.0 版本。该版本计划将于 2024 年 1 月陆续应用于美图秀秀、美颜相机、Wink、美图设计室、WHEE 等美图旗下产品。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-b48de3e47e69e2f0e259254adca092dce54.gif" width="500" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 09:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269646</guid>
            <link>https://www.oschina.net/news/269646</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | C 语言封装的 MySQL 预处理框架 dbassist]]>
            </title>
            <description>
                <![CDATA[<p>C 语言 mysql 预处理助手 1.0(mysql prepare dbassist1.0 for c)</p><p>介绍
一个 C 语言封装 mysql 预处理的轻量级框架,除了实现对 mysql 预处理变量绑定代码的封装,还实现了 sql 语句拼接的封装.整合了 mysql 预处理单表的 crud 和多表的联合查询以及多表的嵌套查询。</p><p>运行结果</p><p><img src="https://gitee.com/solider12/lazy-cats-code-warehouse/raw/master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-04%20171922.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><p>预处理的优点
<img src="https://gitee.com/solider12/lazy-cats-code-warehouse/raw/master/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202023-12-04%20211253.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><p>安装教程
1.安装 mysql 环境，参考<a href="https://gitee.com/solider12/lazy-cats-code-warehouse/blob/master/dbassist/devc++%E4%BD%BF%E7%94%A8mysql.docx">&lt;&lt;devc++使用 mysql.docx&gt;&gt;</a>
2.根据 sql 表创建结构体，结构体成员变量对应表字段。sql 参考<a href="https://gitee.com/solider12/lazy-cats-code-warehouse/blob/master/dbassist/t.sql">&lt;&lt;t.sql&gt;&gt;</a>
对应文件参考<a href="https://gitee.com/solider12/lazy-cats-code-warehouse/blob/master/dbassist/emp.c">emp.c</a>,<a href="https://gitee.com/solider12/lazy-cats-code-warehouse/blob/master/dbassist/dept.c">dept.c</a>,<a href="https://gitee.com/solider12/lazy-cats-code-warehouse/blob/master/dbassist/salgrade.c">salgrade.c</a>,
3.将文件打包成.dll 或者.a,引入项目,引入方法参考<a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2FManofletters%2Farticle%2Fdetails%2F128695793">&lt;&lt;静态库打包以及使用教程&gt;&gt;</a></p><p>使用说明
参考<a href="http://gitee.com/solider12/lazy-cats-code-warehouse/blob/master/dbassist/%E6%95%99%E7%A8%8B.txt" rel="nofollow">&lt;&lt;教程.txt&gt;&gt;</a></p><p>参与贡献
Fork 本仓库
新建 Feat_xxx 分支
提交代码
新建 Pull Request
特技
使用 Readme_XXX.md 来支持不同的语言，例如 Readme_en.md, Readme_zh.md
Gitee 官方博客 blog.gitee.com
你可以 <a href="https://gitee.com/explore">https://gitee.com/explore</a> 这个地址来了解 Gitee 上的优秀开源项目
GVP 全称是 Gitee 最有价值开源项目，是综合评定出的优秀开源项目
Gitee 官方提供的使用手册 <a href="https://gitee.com/help">https://gitee.com/help</a>
Gitee 封面人物是一档用来展示 Gitee 会员风采的栏目 <a href="https://gitee.com/gitee-stars/">https://gitee.com/gitee-stars/</a></p>]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 09:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/solider12/lazy-cats-code-warehouse/tree/master/dbassist</guid>
            <link>https://gitee.com/solider12/lazy-cats-code-warehouse/tree/master/dbassist</link>
        </item>
        <item>
            <title>
                <![CDATA[乔布斯签名苹果公司原始支票正在拍卖中]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">RR 拍卖（RR Auction）网站<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.rrauction.com%2Fauctions%2Flot-detail%2F348161106800099-steve-jobs-signed-apple-computer-company-check-to-radioshack-july-23-1976" target="_blank">拍卖信息显示</a>，一张由史蒂夫·乔布斯（Steve Jobs）签名的苹果公司支票正在拍卖中。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">这张保存完好的支票于 1976 年 7 月 23 日由乔布斯支付给 RadioShack，金额为 4.01 美元。支票抬头是 "Apple Computer Company"，使用的是苹果公司的第一个正式地址"770 Welch Rd., Ste. 154, Palo Alto" —— 这是当他们还在著名的乔布斯家族车库里运营时使用的应答服务和邮件投递地址。</span></span></p><p><img height="368" src="https://oscimg.oschina.net/oscnet/up-779f616c84ee4db73eeea9373cdab0c5815.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">RadioShack 是一家位于波士顿的电子产品商店。苹果公司联合创始人<span style="background-color:#ffffff">史蒂夫・沃兹尼亚克（</span>Steve Wozniak<span style="background-color:#ffffff">）</span>少年时代曾攒钱在 RadioShack 购买了这家店首创的 TRS-80 微型计算机系统，并用它制作了臭名昭著的"blue box"--一种可以拨打免费长途电话的非法设备。</span></p><p><span style="color:#000000">这个"blue box"巩固了<span style="background-color:#ffffff">沃兹尼亚克</span>和乔布斯之间的首次商业合作关系，二人以每个 150 美元的价格制造并销售了大约 200 个"blue box"。乔布斯后来对他的传记作者说，如果没有<span style="background-color:#ffffff">沃兹尼亚克</span> 的 blue box，「就不会有苹果公司」。换句话说：如果没有 RadioShack，就不会有苹果。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">该支票是苹果公司早期历史的见证，具有一定的收藏价值。网站信息显示，目前该支票已有 23 次竞拍出价，竞拍价格已经达到 25000 美元，拍卖截止时间为 12 月 7 日。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 07:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269621/steve-jobs-signed-apple-computer-company-check</guid>
            <link>https://www.oschina.net/news/269621/steve-jobs-signed-apple-computer-company-check</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源鸿蒙人形机器人 —— 「夸父」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>乐聚机器人今日发布了一款人形机器人——「夸父」，并称其是「国内首款可跳跃、可适应多地形行走的开源鸿蒙人形机器人」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09473857a0eb1a6947a7f11f51289fcd1be.png" referrerpolicy="no-referrer"></p><p>基本参数：</p><p><img src="https://oscimg.oschina.net/oscnet/up-af75b6d37c8662b720ee5b1bf1eaad79df1.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-2397c531f623e3453ecff759781f4b0cc6c.png" referrerpolicy="no-referrer"></p><p>官方介绍称，「夸父」搭载深开鸿基于开源鸿蒙研发的 KaihongOS，采用全栈开源设计，运动控制器全面开源，可接入轨迹规划、反馈控制、状态估计等模块。</p><p><img src="https://oscimg.oschina.net/oscnet/up-52552fdb57f8b58318b16bd7ca6f27ffd2c.png" referrerpolicy="no-referrer"></p><p>感知方面，「夸父」可搭载多种开鸿传感器，配有深度摄像头，还可搭配多种末端配件二次开发，并对接主流大模型。</p><p>此外，「夸父」 的步态算法号称全面适配沙地、草地、障碍等多地形，采用自研一体化关节，手臂有 14 个自由度，腿部有 12 个自由度，支持 20cm 跳跃高度。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 06:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269605</guid>
            <link>https://www.oschina.net/news/269605</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[王慧文入股 OneFlow 团队新创业公司]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>企查查公开资料显示，就在这两日，北京硅动科技有限公司（以下简称硅动科技）发生工商变更，<strong>新增王慧文为股东</strong>。同时，注册资本由 100 万人民币增至约 105.26 万人民币。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ff1c5d5e8069add76172304d962953fb253.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#222222">王慧文是美团联合创始人、原非执行董事。</span></p><p>硅动科技成立于今年 8 月。目前，该公司法人、执行董事、经理均为 OneFlow 创始人袁进辉。公司经营范围含软件开发、技术进出口、电子产品销售、人工智能应用软件开发、人工智能通用应用系统、人工智能行业应用系统集成服务等。</p><p>OneFlow 是国内知名开源深度学习框架及开发平台，拥有完全自主知识产权，已获得十余项发明专利授权。OneFlow 创始人袁进辉（微博人称老师木），2008 年 7 月自清华大学计算机系获得工学博士学位，获得清华大学优秀博士学位论文奖，2013 年加入微软亚洲研究院从事大规模机器学习平台的研发工作。</p><p>其团队上次创业一流科技时，由王慧文的光年之外收购其 46.52% 股权。</p><p>王慧文病休后，光年之外收购的核心团队 OneFlow 宣布重新创业。袁进辉称，新创业项目拟解决大模型推理成本问题。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 04:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269588</guid>
            <link>https://www.oschina.net/news/269588</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[华为招数学博士的要求非常奇怪？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:start"><span><span style="color:#4d4f53"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>华为招数学博士的要求非常奇怪？211 博士称在数学系 10 年，没有人能做到。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img height="901" src="https://static.oschina.net/uploads/space/2023/1205/120954_o92w_3820517.png" width="400" referrerpolicy="no-referrer"></p><p><img height="508" src="https://static.oschina.net/uploads/space/2023/1205/121030_hxrQ_3820517.png" width="600" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 04:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269587</guid>
            <link>https://www.oschina.net/news/269587</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IBM 公布下一代量子处理器和 IBM 量子系统二号]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>IBM 在官方博客发布了其量子计算技术演进路线图，并发布新闻稿<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnewsroom.ibm.com%2F2023-12-04-IBM-Debuts-Next-Generation-Quantum-Processor-IBM-Quantum-System-Two%2C-Extends-Roadmap-to-Advance-Era-of-Quantum-Utility" target="_blank">介绍</a></u><strong>下一代量子处理器'IBM Quantum Heron'和 IBM 量子系统二号</strong>。</p><p>'IBM Quantum Heron' 可提供迄今为止 IBM 最高的性能指标和最低的 IBM Quantum 处理器错误率。</p><p>IBM 量子系统二号是该公司的第一台模块化量子计算机，也是 IBM 以量子为中心的超级计算架构的基石。第一个 IBM 量子系统二号位于纽约州约克敦高地，已开始使用三个 IBM Heron 处理器和支持控制电子设备运行。</p><p><img src="https://oscimg.oschina.net/oscnet/up-59d5bf5d2070cf19e73e070a13ff7704814.png" referrerpolicy="no-referrer"></p><p>凭借这一关键基础，以及量子硬件、理论和软件方面的其他突破，该公司将其 IBM 量子开发路线图延长至 2033 年，并制定了新目标，以显着提高门操作 (gate operation) 的质量。这样做将增加可运行的量子电路的规模，并有助于大规模实现量子计算的全部潜力。</p><p>作为新扩展的十年 IBM 量子开发路线图的一部分，IBM 计划让该系统也容纳 IBM 的未来几代量子处理器。此外，作为该路线图的一部分，这些未来的处理器旨在逐步提高它们可以运行的操作质量，以显着扩展它们能够处理的工作负载的复杂性和规模。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c2b0804f8b1c3e4c4355516f0c24e37d62a.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fresearch.ibm.com%2Fblog%2Fquantum-roadmap-2033" target="_blank">https://research.ibm.com/blog/quantum-roadmap-2033</a></em></u></p><p>IBM 还详细介绍了新一代软件堆栈的计划，其中 Qiskit 1.0 将成为由稳定性和速度定义的关键点。此外，为了实现量子计算开发民主化，IBM 宣布推出 Qiskit 模式。</p><p>Qiskit 模式将作为一种机制，让量子开发者更轻松地创建代码。它基于一系列工具，可以简单地映射经典问题，使用 Qiskit 将其优化为量子电路，使用 Qiskit Runtime 执行这些电路，然后对结果进行后处理。借助 Qiskit Patterns 与 Quantum Serverless 相结合，用户将能够在不同环境（例如云​​或本地场景）中构建、部署和执行集成经典计算和量子计算的工作流程。所有这些工具都将为用户提供构建块，以更轻松地构建和运行量子算法。</p><p>此外，IBM 还通过 IBM 的企业 AI 平台 watsonx 率先<strong>使用生成式 AI 进行量子代码编程</strong>。IBM 将集成 watsonx 提供的生成式 AI，以帮助自动开发 Qiskit 的量子代码。这将通过 IBM Granite 模型系列的微调来实现。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269585/ibm-quantum-roadmap-2033</guid>
            <link>https://www.oschina.net/news/269585/ibm-quantum-roadmap-2033</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GDB 14.1 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNU 调试器 GDB 14.1 现已发布。GDB 是 Ada、C、C++、Go 与 Rust 等源代码级调试器语言，它可以在最流行的 GNU/Linux、Unix 和 Windows 变体上运行，并且调试十几种不同的处理器架构。</p><p><strong>主要更新内容</strong></p><ul><li><p>删除的功能，删除的配置：</p><ul><li><p>GDB 不再支持 AiX 4.x、5.x 和 6.x。支持的最低版本为 AiX 7.1。</p></li><li><p>&nbsp;GDB/MI 版本 1 支持已被删除</p></li></ul></li><li><p>对 Debugger Adapter Protocol (DAP) 的初始内置支持</p></li><li><p>GDB 现在可以识别 NO_COLOR 环境变量</p></li><li><p>初步支持大于 64 位的整数类型</p></li><li><p>Breakpoints 现在可以是 inferior-specific</p></li><li><p>新的 convenience function "$_shell"，用于执行 shell 命令并返回其结果。</p></li><li><p>Python 支持</p><ul><li>新类 gdb.Thread</li><li>新类 gdb.unwinder.FrameId</li><li>新类 gdb.ValuePrinter</li><li>新的 gdb.Inferior.arguments 属性</li><li>新的 gdb.Inferior.main_name 属性</li><li>新的 gdb.Breakpoint.inferior 属性</li><li>新的 gdb.Progspace.symbol_file 属性</li><li>新的 gdb.Progspace.executable_filename 属性</li><li>新函数 gdb.execute_mi(COMMAND, [ARG]...)</li><li>新函数 gdb.block_signals()</li><li>新方法 gdb.Frame.static_link</li><li>新的 gdb.Inferior 'clear_env'、'set_env' 和 'unset_env' 方法</li><li>新的 gdb.Type 现在具有 'is_array_like' 和 'is_string_like' 方法</li><li>新的 gdb.Value 'assign' 方法</li><li>新的 gdb.Value 'to_array' 方法</li><li>新的 gdb.Progspace 'objfile_for_address' 方法</li><li>gdb.LazyString 现在实现 __str__ 方法</li><li>新事件 gdb.ThreadExitedEvent</li><li>新事件 gdb.ExecutableChangedEvent</li><li>新事件 gdb.NewProgspaceEvent</li><li>新事件 gdb.FreeProgspaceEvent</li><li>......</li></ul></li><li><p>Remote protocol</p><ul><li><p>支持启用或禁用单个远程目标功能</p></li></ul></li><li><p>GDB/MI 支持</p><ul><li>新的「no-history」停止原因</li><li>支持&nbsp;inferior-specific breakpoints</li><li>在 breakpoint-created&nbsp; 的通知中和 -break-insert 命令的结果中出现的 bkpt 元组现在可以包含一个可选的"inferior"字段，用于 main breakpoint 和每个位置（如果 breakpoint 是 inferior-specific）。</li><li>尝试使用不存在的 thread ID 创建&nbsp;thread-specific breakpoint 现在会导致错误</li><li>新增 "simple-values-ref-types"-list-feature 值，指示各种命令中的--simple-values 选项如何考虑引用类型。</li></ul></li><li><p>增强的 AArch64 支持</p><ul><li><p>对 Scalable Matrix Extension (SME) 和 Scalable Matrix Extension 2 (SME2) 的初步支持</p></li><li><p>「org.gnu.gdb.aarch64.pauth」指针验证功能现已弃用，转而使用 "org.gnu.gdb.aarch64.pauth_v2 "功能字符串。</p></li></ul></li><li><p>增强的 Ada 支持</p><ul><li><p>支持 Ada 2022 target name symbol ('@')</p></li><li><p>支持 Ada 2022 'Enum_Rep 和 'Enum_Val 属性</p></li></ul></li><li><p>各种各样的</p><ul><li>&nbsp;「list」命令现在接受「.」作为参数，告诉 GDB&nbsp; print 当前帧内执行点周围的位置。</li><li>printf 和 dprintf 命令的新「%V」输出格式。</li><li>printf 命令现在将从 inferior 获取的字符串大小限制为"max-value-size"设置的值。</li><li>通过新的 --additional-debug-dirs=PATHs 配置选项，支持在配置时扩展 GDB 参数"debug-file-directory"的默认值。</li><li>新命令「info main」</li><li>新命令「set tui mouse-events [on|off]」（默认打开）</li><li>新命令「set always-read-ctf on|off」（默认关闭）</li><li>各种新的调试和维护命令</li></ul></li></ul><p>更多详情可查看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mail-archive.com%2Finfo-gnu%40gnu.org%2Fmsg03236.html" target="_blank">https://www.mail-archive.com/info-gnu@gnu.org/msg03236.html</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269583/gdb-14-1-released</guid>
            <link>https://www.oschina.net/news/269583/gdb-14-1-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[男子捡女大学生手机要价千元，称「不给钱就刷机」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，安徽合肥一男子捡到女大学生手机后索要千元，<strong>还称「不给钱就刷机」</strong>，此事引发网友热议。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-321b5193dd4d3196b663a2f80ebabd5db12.png" referrerpolicy="no-referrer"></p><p>当事女生张同学称，自己回到座位上吃饭时发现手机不在身边，跟经理交流后选择报警，调监控发现是一名男子用盘子挡住将手机并将手机拿走。和对方协商后，自己已转其 500 元，想等手机发货再转 500。对方不愿意，并将手机从快递处拿走了。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e58c37744e8fabbe6dbc168efc423841144.png" referrerpolicy="no-referrer"></p><p>据当事女生社交账号介绍，手机对自己很重要，里面有很多信息，以及和过世家人的珍贵回忆。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d97c453da3866dca8ce1f8d9af2e0e1e722.png" referrerpolicy="no-referrer"></p><p>12 月 3 日，当事女生再发文，称对方已经将自己拉黑，自己仍然没有拿到手机。</p><p>12 月 4 日，当事男子耿先生表示 ，网上消息是片面的，因张同学打电话时态度不好，一气之下才说要钱要刷机那些话。耿先生称，当初头脑发热想占为己有，后来觉得这事不对，在警察联系自己后，自己也决定归还手机。当时和对方谈的是 1000 元，但对方后来又说先转 500 元邮寄到了再转 500 元，当时就比较气愤，目前手机已寄出。现个人隐私被曝光，已影响到正常生活。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 03:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269578</guid>
            <link>https://www.oschina.net/news/269578</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[phpy：PHP 与 Python 互调用库，为 PHP 引入 Python 生态]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><div><div><p style="margin-left:0; margin-right:0">phpy 是识沃团队最新推出的开源项目，目标是为<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>引入<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>生态，来弥补<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>生态的空缺和不足。<code>phpy</code><span>&nbsp;</span>使得<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>可以调用所有<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的包。</p><p style="margin-left:0; margin-right:0">包括当下非常流行的<span>&nbsp;</span><code>PyTorch</code>、<code>transformers</code>、<code>TensorFlow</code><span>&nbsp;</span>等<span>&nbsp;</span><code>AI</code><span>&nbsp;</span>库，以及<span>&nbsp;</span><code>Numpy</code>、<code>Pandas</code>、<code>Scikit</code><span>&nbsp;</span>等科学计算库，还可以使用<span>&nbsp;</span><code>PyQt</code>、<code>wxPython</code><span>&nbsp;</span>等图形界面库。</p><ul><li>GitHub 地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Flink.segmentfault.com%2F%253Fenc%253D7rdRaP7JOlFKe7quatP6jw%25253D%25253D.6OehhcFnN9z4IkDIIaY6pOMhBiIrA4NJBxw3yyZASoM%25253D" target="_blank">https://github.com/swoole/phpy</a></li><li>Gitee 地址：<a href="https://gitee.com/swoole/phpy">https://gitee.com/swoole/phpy</a><p>&nbsp;</p></li></ul><blockquote>
     不建议在
     <span>&nbsp;</span><code>php-fpm/apache</code><span>&nbsp;</span>短生命周期运行环境下使用，频繁地导入/销毁模块的开销会消耗大量资源
    </blockquote><h2>编译安装</h2><p style="margin-left:0; margin-right:0"><code>phpy</code><span>&nbsp;</span>可以作为<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的扩展，也可以作为<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的<span>&nbsp;</span><code>C</code><span>&nbsp;</span>模块。既可以在<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>代码中调用<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的库，也可以在<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>中调用<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的类和函数。</p><blockquote>
     作为
     <span>&nbsp;</span><code>Python</code><span>&nbsp;</span>模块时依赖
     <span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的
     <span>&nbsp;</span><code>embed SAPI</code><span>&nbsp;</span>，检查
     <span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的目录中，确保存在
     <span>&nbsp;</span><code>libphp.so</code></blockquote><div><pre><code class="language-text">ll /opt/php-8.1/lib/libphp.so
-rwxr-xr-x 1 htf htf 39397224 11 月 30 19:25 /opt/php-8.1/lib/libphp.so*</code></pre></div><h3>编译依赖</h3><ol><li><code>Python 3.10</code><span>&nbsp;</span>或以上版本，建议使用<span>&nbsp;</span><code>conda</code><span>&nbsp;</span>工具来安装</li><li><code>PHP 8.1</code><span>&nbsp;</span>或以上版本</li></ol><p style="margin-left:0; margin-right:0"><code>Python</code><span>&nbsp;</span>将安装到<span>&nbsp;</span><code>/opt/anaconda3</code><span>&nbsp;</span>目录下</p><ul><li><code>/opt/anaconda3/bin/python</code><code>Python</code><span>&nbsp;</span>主程序</li><li><code>/opt/anaconda3/include/python3.11</code><span>&nbsp;</span>头文件</li><li><code>/opt/anaconda3/lib/python3.11</code><span>&nbsp;</span>动态链接库目录</li></ul><p style="margin-left:0; margin-right:0">另外需要配置<span>&nbsp;</span><code>/etc/ld.so.conf.d/conda.conf</code><span>&nbsp;</span>加入<span>&nbsp;</span><code>/opt/anaconda3/lib</code><span>&nbsp;</span>和<span>&nbsp;</span><code>/opt/php-8.1/lib</code><span>&nbsp;</span>。执行<span>&nbsp;</span><code>ldconfig</code><span>&nbsp;</span>检查是否可以找到<span>&nbsp;</span><code>libpython3.11.so</code><span>&nbsp;</span>和<span>&nbsp;</span><code>libphp.so</code>。</p><div><pre><code class="language-text">sudo ldconfig -p |grep php
    libphp7.so (libc6,x86-64) =&gt; /opt/php-7.4/lib/libphp7.so
    libphp.so (libc6,x86-64) =&gt; /opt/php-8.0/lib/libphp.so
    
sudo ldconfig -p |grep python
    libsamba-policy.cpython-38-x86-64-linux-gnu.so.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libsamba-policy.cpython-38-x86-64-linux-gnu.so.0
    libpython3.11.so.1.0 (libc6,x86-64) =&gt; /opt/anaconda3/lib/libpython3.11.so.1.0
    libpython3.11.so (libc6,x86-64) =&gt; /opt/anaconda3/lib/libpython3.11.so
    libpython3.8.so.1.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libpython3.8.so.1.0
    libpython3.8.so (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libpython3.8.so
    libpython3.5m.so.1.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libpython3.5m.so.1.0
    libpython3.so (libc6,x86-64) =&gt; /opt/anaconda3/lib/libpython3.so
    libpython2.7.so.1.0 (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libpython2.7.so.1.0
    libpython2.7.so (libc6,x86-64) =&gt; /usr/lib/x86_64-linux-gnu/libpython2.7.so</code></pre></div><h3>作为<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>扩展</h3><p style="margin-left:0; margin-right:0">检查<span>&nbsp;</span><code>config.m4</code><span>&nbsp;</span>中<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>路径是否正确。若<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的安装路径不是<span>&nbsp;</span><code>/opt/anaconda3</code>，需修改为正确的安装路径。</p><div><pre><code class="language-text">cd phpy
phpize
./configure
make install</code></pre></div><p style="margin-left:0; margin-right:0">安装成功后，修改<span>&nbsp;</span><code>php.ini</code><span>&nbsp;</span>，加入<span>&nbsp;</span><code>extension=phpy.so</code>，执行<span>&nbsp;</span><code>php -m</code><span>&nbsp;</span>和<span>&nbsp;</span><code>php --ri phpy</code><span>&nbsp;</span>检查是否成功加载扩展。</p><h3>作为<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>模块</h3><div><pre><code class="language-text">cmake .
make -j</code></pre></div><p style="margin-left:0; margin-right:0">执行成功后，会生成<span>&nbsp;</span><code>tests/lib/phpy.so</code><span>&nbsp;</span>文件。可以在<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>中直接导入此模块。</p><div><pre><code class="language-text">import phpy</code></pre></div><h2>使用方法</h2><h3>导入 Python 模块</h3><div><pre><code class="language-php"><span style="color:#056de8">$os</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">import</span><span>(</span><span style="color:#f1403c">'os'</span><span>);</span></code></pre></div><h3>执行函数</h3><div><pre><code class="language-php"><span style="color:#056de8">$uname</span><span>=</span><span style="color:#056de8">$os</span><span>-&gt;</span><span style="color:#056de8">uname</span><span>();</span></code></pre></div><h3>读取属性</h3><div><pre><code class="language-php"><span>echo</span><span style="color:#056de8">$uname</span><span>-&gt;</span><span style="color:#056de8">sysname</span><span>;</span></code></pre></div><h3>加载路径</h3><p style="margin-left:0; margin-right:0">可使用<span>&nbsp;</span><code>PyCore::import('sys')-&gt;path-&gt;append()</code><span>&nbsp;</span>将一些目录加入到加载路径列表中。<br> 例如：<code>/workspace/app/user.py</code><span>&nbsp;</span>自定义的包，可以通过下面的步骤实现加载：</p><ol><li><code>PyCore::import('sys')-&gt;path-&gt;append('/workspace')</code><span>&nbsp;</span>将<span>&nbsp;</span><code>/workspace</code><span>&nbsp;</span>添加到<span>&nbsp;</span><code>sys.path</code><span>&nbsp;</span>中</li><li><code>PyCore::import('app.user')</code><span>&nbsp;</span>将自动搜索<span>&nbsp;</span><code>sys.path</code><span>&nbsp;</span>找到对应的<span>&nbsp;</span><code>app/user.py</code><span>&nbsp;</span>包并载入</li></ol><h3>内置方法</h3><ul><li><code>PyCore::str()</code><span>&nbsp;</span>将对象转为字符串</li><li><code>PyCore::repr()</code></li><li><code>PyCore::type()</code><span>&nbsp;</span>获取对象的类型</li><li><code>PyCore::locals()</code><span>&nbsp;</span>获取当前空间内容的所有局部变量</li><li><code>PyCore::globals()</code><span>&nbsp;</span>获取所有全局变量</li><li><code>PyCore::hash()</code><span>&nbsp;</span>获取 Hash 值</li><li><code>PyCore::hasattr()</code><span>&nbsp;</span>检测对象是否存在某个属性</li><li><code>PyCore::id()</code><span>&nbsp;</span>获取对象的内部编号</li><li><code>PyCore::len()</code><span>&nbsp;</span>获取长度</li><li><code>PyCore::dir()</code><span>&nbsp;</span>获取对象所有的属性、方法</li><li><code>PyCore::int()</code><span>&nbsp;</span>构造一个整数</li><li><code>PyCore::float()</code><span>&nbsp;</span>构造一个浮点数</li><li><code>PyCore::fn()</code><span>&nbsp;</span>构造一个可调用函数</li><li><code>PyCore::scalar()</code><span>&nbsp;</span>将<span>&nbsp;</span><code>PyObject</code><span>&nbsp;</span>对象转为<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的标量类型，例如<span>&nbsp;</span><code>PyStr</code><span>&nbsp;</span>将转为<span>&nbsp;</span><code>PHP 字符串</code>，<code>Dict/Tuple/Set/List</code><span>&nbsp;</span>将转为<span>&nbsp;</span><code>Array</code></li></ul><h3>内置类</h3><ul><li><code>PyObject</code>：所有其他类型的基类</li><li><code>PyDict</code>：字典类型，等同于<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的关联数组</li><li><code>PyList</code>：列表类型，等同于<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的索引数组</li><li><code>PyTuple</code>：元组，不可变的列表</li><li><code>PyStr</code>：字符串</li><li><code>PyModule</code>：<code>Python</code><span>&nbsp;</span>包，<code>PyModule</code><span>&nbsp;</span>也是<span>&nbsp;</span><code>PyObject</code><span>&nbsp;</span>的子类</li></ul><p style="margin-left:0; margin-right:0"><code>PyObject</code><span>&nbsp;</span>是除了<span>&nbsp;</span><code>PyCore</code><span>&nbsp;</span>之外，所有其他类型的基类。非内置类的对象是<span>&nbsp;</span><code>PyObject</code><span>&nbsp;</span>的实例。<code>PyObject</code><span>&nbsp;</span>实现了<span>&nbsp;</span><code>4</code><span>&nbsp;</span>个魔术方法，用于将操作映射到<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>对象。</p><p style="margin-left:0; margin-right:0">所有类方法、参数、返回值参考<span>&nbsp;</span><code>stubs</code><span>&nbsp;</span>目录中的文件。</p><h3>继承关系</h3><div><pre><code class="language-text">PyObject -&gt; PyModule
         -&gt; PySequenece -&gt; PyList
                        -&gt; PyTuple
         -&gt; PySet
         -&gt; PyStr
         -&gt; PyDict
         -&gt; PyType</code></pre></div><h3>整数</h3><p style="margin-left:0; margin-right:0"><code>Python</code><span>&nbsp;</span>语言是天然支持无限精度整型计算的，可以使用<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的整数计算能力来代替<span>&nbsp;</span><code>ext-bcmath</code></p><h3>构造</h3><p style="margin-left:0; margin-right:0">使用<span>&nbsp;</span><code>PyCore::int()</code><span>&nbsp;</span>函数来构造一个数字，可以传入整数、浮点数、字符串来初始化。</p><div><pre><code class="language-php"><span style="color:#056de8">$i1</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">int</span><span>(</span><span style="color:#056de8">12345678</span><span>);</span><span style="color:#056de8">$i2</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">int</span><span>(</span><span style="color:#f1403c">'1234567890123456789012345678901234567890'</span><span>);</span><span style="color:#056de8">$i3</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">int</span><span>(</span><span style="color:#056de8">12345678.03</span><span>);</span></code></pre></div><h3>运算</h3><p style="margin-left:0; margin-right:0">整数同样也是<span>&nbsp;</span><code>PyObject</code><span>&nbsp;</span>的实例，可以使用内置的方法类实现运算。</p><div><pre><code class="language-php"><span style="color:#056de8">$i</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">int</span><span>(</span><span style="color:#056de8">12345435</span><span>);</span><span>var_dump</span><span>(</span><span>strval</span><span>(</span><span style="color:#056de8">$i</span><span>-&gt;</span><span style="color:#056de8">__pow__</span><span>(</span><span style="color:#056de8">3</span><span>)));</span><span>var_dump</span><span>(</span><span>strval</span><span>(</span><span style="color:#056de8">$i</span><span>-&gt;</span><span style="color:#056de8">__add__</span><span>(</span><span style="color:#056de8">4</span><span>)));</span></code></pre></div><p style="margin-left:0; margin-right:0">将输出<span>&nbsp;</span><code>1881564851360655187875</code><span>&nbsp;</span>，由于超过了<span>&nbsp;</span><code>64 位</code><span>&nbsp;</span>最大精度，因此输出结果将自动转为字符串类型。</p><h3>命名参数</h3><p style="margin-left:0; margin-right:0"><code>phpy</code><span>&nbsp;</span>支持了<strong>命名参数</strong>，可以使用命名参数来调用<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的函数和方法。</p><blockquote>
     顺序参数必须在前，命名参数必须在最后
    </blockquote><div><pre><code class="language-php"><span>kwargs</span><span>(</span><span style="color:#056de8">$a</span><span>,</span><span style="color:#056de8">$b</span><span>,</span><span style="color:#056de8">$c</span><span>,</span><span>name</span><span>:</span><span style="color:#f1403c">'hello'</span><span>,</span><span>world</span><span>:</span><span style="color:#f1403c">'rango'</span><span>);</span></code></pre></div><p style="margin-left:0; margin-right:0">对应的<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>代码为：</p><div><pre><code class="language-python3"><span>kwargs</span><span>(</span><span>a</span><span>,</span><span>b</span><span>,</span><span>c</span><span>,</span><span>name</span><span>:</span><span style="color:#f1403c">'hello'</span><span>,</span><span>world</span><span>:</span><span style="color:#f1403c">'rango'</span><span>)</span></code></pre></div><h3>回调函数</h3><p style="margin-left:0; margin-right:0">可将<span>&nbsp;</span><code>PHP</code><span>&nbsp;</span>的可调用对象作为<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>的回调函数。使用<span>&nbsp;</span><code>PyCore::fn(callable $fn)</code><span>&nbsp;</span>包裹即可。</p><div><pre><code class="language-php"><span style="color:#056de8">$m</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">import</span><span>(</span><span style="color:#f1403c">'app.user'</span><span>);</span><span style="color:#056de8">$uuid</span><span>=</span><span>uniqid</span><span>();</span><span style="color:#056de8">$rs</span><span>=</span><span style="color:#056de8">$m</span><span>-&gt;</span><span style="color:#056de8">test_callback</span><span>(</span><span>PyCore</span><span>::</span><span style="color:#056de8">fn</span><span>(</span><span>function</span><span>(</span><span style="color:#056de8">$namespace</span><span>)</span><span>use</span><span>(</span><span style="color:#056de8">$uuid</span><span>)</span><span>{</span><span>var_dump</span><span>(</span><span style="color:#056de8">$namespace</span><span>);</span><span>return</span><span style="color:#056de8">$uuid</span><span>;</span><span>}));</span></code></pre></div><ul><li><code>import app.user</code><span>&nbsp;</span>导入了一个自定义<span>&nbsp;</span><code>Python</code><span>&nbsp;</span>包</li><li>调用了包中的一个函数<span>&nbsp;</span><code>test_callback</code>，此函数接受一个参数为<span>&nbsp;</span><code>Python Callable</code><span>&nbsp;</span>对象</li><li>使用<span>&nbsp;</span><code>PyCore::fn()</code><span>&nbsp;</span>包裹了一个<span>&nbsp;</span><code>Closure</code><span>&nbsp;</span>闭包对象作为回调，这里也支持函数名称字符串、对象方法的调用方式</li><li>回调函数返回了一个字符串，在<span>&nbsp;</span><code>test_callback</code><span>&nbsp;</span>函数中会得到一个<span>&nbsp;</span><code>str</code><span>&nbsp;</span>类型返回值</li></ul><p style="margin-left:0; margin-right:0">可参考下方的<span>&nbsp;</span><code>Python tkinter</code><span>&nbsp;</span>例子。</p><h2>实际案例</h2><h3>基于<span>&nbsp;</span><code>tkinter</code><span>&nbsp;</span>实现<span>&nbsp;</span><code>GUI</code><span>&nbsp;</span>的例子</h3><div><pre><code class="language-php"><span>&lt;?</span><span>php</span><span style="color:#056de8">$tkinter</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">import</span><span>(</span><span style="color:#f1403c">'tkinter'</span><span>);</span><span style="color:#056de8">$root</span><span>=</span><span style="color:#056de8">$tkinter</span><span>-&gt;</span><span style="color:#056de8">Tk</span><span>();</span><span style="color:#056de8">$root</span><span>-&gt;</span><span style="color:#056de8">title</span><span>(</span><span style="color:#f1403c">'我的窗口'</span><span>);</span><span style="color:#056de8">$root</span><span>-&gt;</span><span style="color:#056de8">geometry</span><span>(</span><span style="color:#f1403c">"500x500"</span><span>);</span><span style="color:#056de8">$root</span><span>-&gt;</span><span style="color:#056de8">resizable</span><span>(</span><span>False</span><span>,</span><span>False</span><span>);</span><span style="color:#056de8">$button</span><span>=</span><span style="color:#056de8">$tkinter</span><span>-&gt;</span><span style="color:#056de8">Button</span><span>(</span><span style="color:#056de8">$root</span><span>,</span><span>text</span><span>:</span><span style="color:#f1403c">"Click Me!!"</span><span>,</span><span>command</span><span>:</span><span>PyCore</span><span>::</span><span style="color:#056de8">fn</span><span>(</span><span>function</span><span>()</span><span>{</span><span>var_dump</span><span>(</span><span>func_get_args</span><span>());</span><span>echo</span><span style="color:#f1403c">'click me!!'</span><span>.</span><span>PHP_EOL</span><span>;</span><span>}));</span><span style="color:#056de8">$button</span><span>-&gt;</span><span style="color:#056de8">pack</span><span>();</span><span style="color:#056de8">$tkinter</span><span>-&gt;</span><span style="color:#056de8">mainloop</span><span>();</span></code></pre></div><p style="margin-left:0; margin-right:0">&nbsp;</p><div><img height="689" src="https://pic1.zhimg.com/80/v2-498d3eef9a25750f9b40adb32704c254_1440w.webp" width="906" referrerpolicy="no-referrer"></div><p style="margin-left:0; margin-right:0">&nbsp;</p><h3>一个基于<span>&nbsp;</span><code>transformers</code><span>&nbsp;</span>的情感分析模型推理实现</h3><div><pre><code class="language-php"><span>&lt;?</span><span>php</span><span style="color:#056de8">$transformers</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">import</span><span>(</span><span style="color:#f1403c">'transformers'</span><span>);</span><span style="color:#056de8">$os</span><span>=</span><span>PyCore</span><span>::</span><span style="color:#056de8">import</span><span>(</span><span style="color:#f1403c">'os'</span><span>);</span><span style="color:#056de8">$os</span><span>-&gt;</span><span style="color:#056de8">environ</span><span>-&gt;</span><span style="color:#056de8">__setitem__</span><span>(</span><span style="color:#f1403c">'https_proxy'</span><span>,</span><span>getenv</span><span>(</span><span style="color:#f1403c">'https_proxy'</span><span>));</span><span style="color:#056de8">$distilled_student_sentiment_classifier</span><span>=</span><span style="color:#056de8">$transformers</span><span>-&gt;</span><span style="color:#056de8">pipeline</span><span>(</span><span>model</span><span>:</span><span style="color:#f1403c">"lxyuan/distilbert-base-multilingual-cased-sentiments-student"</span><span>,</span><span>top_k</span><span>:</span><span>null</span><span>,</span><span>);</span><span style="color:#056de8">$rs</span><span>=</span><span style="color:#056de8">$distilled_student_sentiment_classifier</span><span>(</span><span style="color:#f1403c">"I love this movie and i would watch it again and again!"</span><span>);</span><span>var_dump</span><span>(</span><span>PyCore</span><span>::</span><span style="color:#056de8">scalar</span><span>(</span><span style="color:#056de8">$rs</span><span>));</span></code></pre></div><p style="margin-left:0; margin-right:0">&nbsp;</p><div><img height="634" src="https://pic3.zhimg.com/80/v2-21b58e8af0bcee2c6497e1fd9375ed3e_1440w.webp" width="910" referrerpolicy="no-referrer"></div><p style="margin-left:0; margin-right:0">&nbsp;</p></div></div></div></div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269576</guid>
            <link>https://www.oschina.net/news/269576</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度曾出价 8500 万挖「AI 教父」被拒]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fi.ifeng.com%2Fc%2F8VEacE2O9MM" target="_blank">凤凰网科技</a>援引知情人士消息称，百度曾出价 1200 万美元 (约合 8486 万元人民币) 邀请「AI 教父」杰弗里·辛顿 (Geoffrey Hinton) 及其学生加入公司。辛顿拒绝了百度的邀请，但是也对丰厚的薪酬动了心。</span></p><p><span style="color:#000000">辛顿毕业于剑桥大学，除了偶尔在微软和谷歌任职外，他的大部分职业生涯都在学术界度过，对于报酬并不是很在意。但是，由于他自己拥有一个患有神经多样性 (如自闭症、多动症) 的孩子，所以金钱能够带来经济保障。</span></p><p><img height="331" src="https://static.oschina.net/uploads/space/2023/1205/110427_HgTn_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">「我们不知道自己值多少钱。」辛顿表示。他咨询了收购方面的律师和专家，想出了一个计划：「我们将组织一场拍卖，自己兜售自己。」</span></p><p><span style="color:#000000">此次人才拍卖在年度 AI 会议期间举行，地点位于加州太浩湖的哈拉斯赌场酒店。谷歌、微软、百度等科技巨头均参与其中。最终，辛顿博士和他的学生们在 4400 万美元 (约合 3.1 亿元人民币) 的价格上停止了这次拍卖，选择加入了谷歌。</span></p><p><span style="color:#000000">今年 5 月，辛顿宣布从谷歌离职。他表示，从谷歌辞职是为了可以自由地谈论 AI 的风险；并透露，现在对自己一生从事的工作感到有些后悔。辛顿认为，随着企业不断改进 AI 系统，它们会变得越来越危险。</span></p><p><span style="color:#000000">辛顿指出，直到去年，谷歌一直是这项技术的「适当管理者」，小心翼翼地不释放可能造成伤害的东西。但是现在，微软用聊天机器人增强了必应搜索引擎，挑战谷歌的核心业务，导致谷歌也在竞相部署同样的技术。科技巨头们陷入了一场可能无法阻止的竞争。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269575</guid>
            <link>https://www.oschina.net/news/269575</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Django 5.0 正式发布，最流行 Python Web 框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Django 5.0 已正式<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.djangoproject.com%2Fweblog%2F2023%2Fdec%2F04%2Fdjango-50-released%2F" target="_blank">发布</a></u>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-c23764df9e6fda0d09d23c81fc4d3728039.png" referrerpolicy="no-referrer"></p></blockquote><blockquote><p>根据 JetBrains 公布的<em><u><a href="https://www.oschina.net/news/260950/python-developers-survey-2022-jb-psf"> 2022 Python 开发者调查结果</a></u></em>，Python Web 框架的三巨头依旧是&nbsp;Flask、Django 和 FastAPI。Django 和 Flask 的使用率排名并列第一。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/112630_OP7t_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>Django 5.0 支持最新的 Python 版本，包括 Python 3.10、3.11 和 3.12。此外还引入了字段组 (field group)，用于简化 Django 表单字段的相关元素的渲染。</p><p>下面是值得关注的变化：</p><ul><li><strong>Python 兼容性</strong></li></ul><p>Django 5.0 支持 Python 3.10、3.11 和 3.12。开发团队建议用户使用每个 Python 分支的最新版本。</p><p>此外，Django 4.2.x 系列是最后一个支持 Python 3.8 和 3.9 的版本。</p><ul><li><strong>针对表单字段渲染的简化模板</strong></li></ul><p>Django 5.0 引入了字段组 (field group) 和字段组模板 (field group templates) 的概念。该特性简化了 Django 表单字段相关元素的渲染，例如标签、小部件、帮助文本和错误等。</p><p>例如下面的模板：</p><pre><code class="language-python">&lt;form&gt;
...
&lt;div&gt;
  {{ form.name.label_tag }}
  {% if form.name.help_text %}
    &lt;div class="helptext" id="{{ form.name.id_for_label }}_helptext"&gt;
      {{ form.name.help_text|safe }}
    &lt;/div&gt;
  {% endif %}
  {{ form.name.errors }}
  {{ form.name }}
  &lt;div class="row"&gt;
    &lt;div class="col"&gt;
      {{ form.email.label_tag }}
      {% if form.email.help_text %}
        &lt;div class="helptext" id="{{ form.email.id_for_label }}_helptext"&gt;
          {{ form.email.help_text|safe }}
        &lt;/div&gt;
      {% endif %}
      {{ form.email.errors }}
      {{ form.email }}
    &lt;/div&gt;
    &lt;div class="col"&gt;
      {{ form.password.label_tag }}
      {% if form.password.help_text %}
        &lt;div class="helptext" id="{{ form.password.id_for_label }}_helptext"&gt;
          {{ form.password.help_text|safe }}
        &lt;/div&gt;
      {% endif %}
      {{ form.password.errors }}
      {{ form.password }}
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
...
&lt;/form&gt;
</code></pre><p>可简化为：</p><pre><code class="language-python">&lt;form&gt;
...
&lt;div&gt;
  {{ form.name.as_field_group }}
  &lt;div class="row"&gt;
    &lt;div class="col"&gt;{{ form.email.as_field_group }}&lt;/div&gt;
    &lt;div class="col"&gt;{{ form.password.as_field_group }}&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;
...
&lt;/form&gt;
</code></pre><ul><li><strong>数据库计算的默认值</strong></li></ul><p>新的&nbsp;<code>Field.db_default</code>&nbsp;参数用于设置数据库计算 (database-computed) 的默认值。例如：</p><pre><code class="language-python">from django.db import models
from django.db.models.functions import Now, Pi


class MyModel(models.Model):
    age = models.IntegerField(db_default=18)
    created = models.DateTimeField(db_default=Now())
    circumference = models.FloatField(db_default=2 * Pi())
</code></pre><ul><li><strong>数据库生成的模型字段</strong></li></ul><p>新的&nbsp;<code>GeneratedField</code>&nbsp;支持创建数据库生成的列。该字段可在所有支持的数据库后端上使用，以创建始终根据其他字段计算的字段。例如：</p><pre><code class="language-python">from django.db import models
from django.db.models import F


class Square(models.Model):
    side = models.IntegerField()
    area = models.GeneratedField(expression=F("side") * F("side"), db_persist=True)
</code></pre><p>详情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.djangoproject.com%2Fen%2F5.0%2Freleases%2F5.0%2F" target="_blank">Django 5.0 release notes</a></u>。</p><p>随着 Django 5.0 的发布，Django 4.2 已<strong>结束其 mainstream 支持</strong>，最后一个小错误修复版本 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.djangoproject.com%2Fweblog%2F2023%2Fdec%2F04%2Fbugfix-release%2F" target="_blank">4.2.8 已于昨天发布</a></u>。Django 4.2 是 LTS 版本，会在 2026 年 4 月之前获得安全和数据丢失修复。</p><p>此外，Django 4.1 的扩展支持已结束。最终安全版本 (4.1.13) 于 11 月 1 日发布。建议所有 Django 4.1 用户升级到 Django 4.2 或更高版本。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 02:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269569/django-5-0-released</guid>
            <link>https://www.oschina.net/news/269569/django-5-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kubernetes 是否需要提供长期支持版本 (LTS)？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Kubernetes 目前遵循的是「N-2 支持政策」，这意味着仅 3 个最新的次要版本（N、N-1 和 N-2）会获得安全和错误修复，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubernetes%2Fenhancements%2Ftree%2Fmaster%2Fkeps%2Fsig-release%2F2572-release-cadence" target="_blank">发布周期则为 15 周</a></u>。</p><p>因此一个 Kubernetes 版本的支持周期通常是 14 个月（12 个月的支持期和 2 个月的升级周期）。如果我们将其与 Debian（许多组织都以其支持周期为基础的操作系统项目）进行比较，就会发现两者之间的直接区别。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ec61c0baf042d78a1afa8c75d8e3cc0d5b6.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ab5ecef03b8c181f91320dc29e88037e42b.png" referrerpolicy="no-referrer"></p><p>可以看到，Kubernetes 作为基础设施项目，其迭代周期还是让许多公司无法跟上发布节奏。</p><p>而且手动升级 K8s 集群通常需要以下工作：</p><ul><li>检查所有第三方扩展，例如网络和存储插件</li><li>升级 etcd（所有实例）</li><li>升级 kube-apiserver（所有控制平面主机）</li><li>升级 kube-controller-manager</li><li>升级 kube-scheduler</li><li>升级云控制器管理器 cloud controller manager（如果使用的话）</li><li>升级 kubectl</li><li>排空每个节点，并更换节点或升级节点，然后读取并监视以确保其继续工作</li><li>根据清单上的要求运行&nbsp;<code>kubectl convert</code></li></ul><p>基于这些因素，有人提出：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmatduggan.com%2Fwhy-kubernetes-needs-an-lts%2F" target="_blank">Kubernetes 是否需要提供长期支持版本 (LTS)</a></u>？</p><p>原因如下：</p><p>第一，Kubernetes 是一个复杂的容器编排系统，由许多不同的组件和模块组成。这些组件和模块需要经过持续的维护和更新，以确保其安全性和稳定性。通过提供 LTS 版本，可以为用户提供一个稳定的基础，使他们能够在长期内使用 Kubernetes 而不必频繁升级。</p><p>其次，许多组织在使用 Kubernetes 时会构建复杂的应用程序和基础架构。这些应用程序和基础架构可能依赖于特定版本的 Kubernetes，并且可能需要进行大量的测试和验证才能在新版本上运行。通过提供 LTS 版本，可以确保这些组织能够在长期内维持其应用程序和基础架构的稳定性，而不必担心由于升级到新版本而导致的不兼容性和故障。</p><p>此外，许多组织可能面临着合规性和监管要求。这些要求可能要求他们使用特定版本的软件，并且在一段时间内保持该版本的支持。通过提供 LTS 版本，Kubernetes 可以满足这些合规性和监管要求，使组织能够在其环境中使用 Kubernetes 而不必担心违反规定。</p><p>最后，对于那些不具备大规模升级和迁移能力的组织来说，LTS 版本可以提供更长时间的支持和稳定性。这些组织可能没有足够的资源和时间来频繁升级和迁移他们的应用程序和基础架构。通过提供 LTS 版本，Kubernetes 可以帮助这些组织保持其系统的稳定性和可靠性，而不必承担频繁升级的风险和成本。</p><p>据了解，<strong>k8s 团队正在恢复之前解散的 LTS 工作组。</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-a772b9c5674382c227b5d4bd8b132023e3f.png" referrerpolicy="no-referrer"></p><p><strong>目前其邮件列表还没有任何内容：</strong><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgroups.google.com%2Fa%2Fkubernetes.io%2Fg%2Fwg-lts" target="_blank">https://groups.google.com/a/kubernetes.io/g/wg-lts</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 05 Dec 2023 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269564/kubernetes-needs-an-lts</guid>
            <link>https://www.oschina.net/news/269564/kubernetes-needs-an-lts</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[墨干理工套件 V1.2.0 发布了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">从 V1.2.0 开始，我们将墨干编辑器重命名为墨干理工套件。因为墨干编辑器主要为理工科相关的日常写作服务，使用墨干编辑器这个名字可能会令人困惑，所以原来的墨干编辑器 V1.x.y，在墨干理工套件中成为了学术写作产品<strong>Mogan Research</strong>，另外后续墨干理工套件还会发布代码编辑器<strong>Mogan Code</strong>和幻灯片产品<strong>Mogan Beamer</strong>。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>Mogan Code</strong>的中文名为<strong>墨码</strong>，<strong>Mogan Beamer</strong>的中文名为<strong>墨板</strong>。这两个待发布的产品命名比较直观。<strong>Mogan Research</strong>的中文名为<strong>墨砚</strong>，和 2012 年的诺贝尔文学奖获得者莫言发音类似，期待更多的华人获得诺贝尔物理学奖、诺贝尔化学奖。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">墨干理工套件 V1.2.0 包含以下组件：</p><ul><li>墨砚 V1.2.0 (Mogan Research v1.2.0)</li></ul><h2>重要变更</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">在 GNU TeXmacs 2.1.2 的基础上：</p><ul><li>开源之夏<code>Mogan Draw on wasm</code>项目： 
  <ul><li>改善绘图工具的用户体验</li><li>将绘图工具编译到了 wasm 可直接在浏览器中使用</li></ul></li><li>开源之夏<code>可编辑 PDF</code>项目： 
  <ul><li>新增导出 PDF 并将 tm 文档作为附件嵌入的功能</li><li>可以直接使用墨干打开带有 tm 文档附件的 PDF 文档</li></ul></li><li>新增墨客星球社区文档入口：帮助-&gt;墨客星球</li><li>升级到 Qt 6.5.3</li><li>采用 S7 Scheme 作为底层的 Scheme 脚本引擎以改进性能</li><li>采用 KDE 社区 Breeze 图标以美化用户界面</li><li>在 Windows 和 macOS 修复大量失效或者和系统冲突的快捷键</li><li>大量用户界面的细节改进：比如显示可用快捷键、调整界面翻译等等</li><li>若干中文排版的重要改进：比如中英文之间自动插入很小的间隔等等</li><li>若干字体相关重要改进：比如设置 Linux 平台默认中文字体等等</li><li>修复若干参考文献相关的错误</li><li>调整若干默认配置项，改善用户体验</li><li>修复若干导致墨干直接崩溃或者卡死的错误</li><li>按照 Linux/macOS/Windows 的规范调整 TEXMACS_HOME_PATH 的路径</li><li>移除内置文档，直接加载最新的 GNU TeXmacs 官方文档</li><li>实验功能：Mogan Research 已经通过 WASM 从桌面软件变成浏览器可直接访问的应用</li></ul><h2>已知问题</h2><ul><li>点击<code>工具-&gt;键盘-&gt;编辑键盘快捷键</code>会崩溃</li><li>安装之后初次启动由于需要加载系统所有字体比较慢</li><li>菜单中仍旧有部分没有翻译为中文</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">v1.2.1 将于 2024/01/01 发布，以解决以上问题。</p><h2>实际影响用户体验的详细变更</h2><ul><li>开源之夏：绘图工具（项目 23，27，50） 
  <ul><li>新增绘制<code>椭圆</code>和<code>扇形</code>的功能，焦点工具栏没有配置相关图标，可以使用<code>插入</code>菜单插入</li><li>画圆的方式从三点画圆改为两点画圆</li><li>复制粘贴一个绘图对象时，新对象会在原对象的位置上少量偏移，避免重合</li><li>按下 Shift 再单击，效果等同于右键，方便不使用鼠标只使用触摸板的场合下绘图</li><li>旋转或者放缩时，将鼠标变成小手的形状</li></ul></li><li>用户界面 (项目 69，71) 
  <ul><li>在右键菜单中添加了复制和粘贴的快捷方式</li><li>修复数学模式下<code>插入-&gt;高次方根式</code>失效的问题</li><li>模式工具栏中的<code>sys-chinese</code>显示为<code>默认字体</code>，表示中文文档默认采用系统自带的中文字体</li><li>幻灯片模式下，不翻译主题下拉菜单中的主题名</li><li>不翻译<code>调试</code>中的各种调试选项，比如<code>auto</code>，<code>keyboard</code></li><li>不翻译<code>版本-&gt;对比</code>中的菜单项</li><li>在界面和代码中使用 macOS 而不是 Mac OS</li><li>退出墨干的弹出窗口中，开启对于 Cancel 的翻译</li><li>在模式工具栏中，直接使用语言而不是国旗显示当前的文档语言</li></ul></li><li>快捷键（项目 20, 59, 71） 
  <ul><li>修复无法输入中文全角双引号的问题</li><li>修复<code>工具-&gt;键盘-&gt;显示键盘按键</code>无法显示中文输入的问题</li><li>显示模式工具栏中下拉菜单中的快捷键</li><li>显示模式工具栏中标号、折叠等图标的快捷键</li><li>修复<code>插入-&gt;数学-&gt;多行公式</code>的快捷键提示</li><li>新增用于删除一个单词<code>(kill-word)</code>的 Emacs 风格快捷键</li><li>新增<code>std V</code>（<code>Ctrl+Shift+v</code>或者<code>Command+Shift+v</code>）用于粘贴纯文本</li><li>幻灯片模式下，交换<code>下一个</code>和<code>下一屏</code>的快捷键，方便使用翻页笔展开当前屏幕的折叠内容</li><li>文本模式下，将下上标、下标、上划线、下划线的快捷键调整为 Tab 循环风格的快捷键</li><li>文本模式下，将列表的快捷键<code>Option+e</code>和<code>Option+i</code>改为 Markdown 风格的快捷键，避免和 macOS 系统快捷键冲突</li><li>Windows 平台下，<code>编辑</code>菜单中的复制、粘贴、剪切的快捷键提示改为<code>C-c</code>，<code>C-v</code>,<span>&nbsp;</span><code>C-x</code></li><li>Linux 和 Windows 平台下，Emacs 风格的 meta 从 Windows 键调整为 Alt，避免和系统快捷键冲突</li><li>macOS 快捷键风格中，结构化插入的快捷键前缀从 Ctrl 改为 Option，避免和 macOS 系统快捷键冲突</li><li>macOS 快捷键风格中，将<code>cmd</code>键从<code>Ctrl</code>改为<code>Option</code>，比如<code>插入-&gt;节</code>从<code>Ctrl+1</code>变为<code>Option+1</code></li><li>macOS 快捷键风格中，将插入符号的快捷键从<code>Ctrl+q</code>改为<code>Option+q</code>，避免 Qt 6 无法识别<code>Ctrl+q</code>的问题</li></ul></li><li>字体（项目 11） 
  <ul><li>Linux 平台下，使用<code>Noto CJK SC</code>作为默认中文字体</li><li>采用默认中文字体来渲染带圈的数字（例如：①、②、③）</li></ul></li><li>排版（项目 69） 
  <ul><li>书籍样式的章名从<code>章 1</code>调整为<code>第 1 章</code></li><li>依据 W3C 的中文排版需求，调整标点符号的行首行尾禁则（只在文档语言为中文时生效）</li><li>依据 W3C 的中文排版需求，在中文和英文之间加入很小的间隔（只在文档语言为中文时生效）</li><li>修复中文字体大小在使用默认字体时偏小的问题</li><li>修复文档中指示标签无法渲染中文的问题</li></ul></li><li>参考文献（项目 12，63） 
  <ul><li>修复中文乱码的问题</li><li>修复中文关键字无法搜索的问题</li><li>修复参考文献生成若干格式错误</li><li>改进参考文件引用编号的合并</li></ul></li><li>表格（项目 52） 
  <ul><li>修复子表格宽度设置无效的问题</li></ul></li><li>幻灯片（项目 6） 
  <ul><li>内置 GNU TeXmacs 官网的幻灯片主题资源，避免下载时间过长的问题</li></ul></li><li>格式转换（项目 9） 
  <ul><li>修复 PDF 导出文件中文档元数据乱码问题</li><li>修复 PDF 导出文件中含中文超链接目标乱码和悬浮提示乱码的问题</li><li>修复 HTML 导出文件中标题乱码问题</li></ul></li><li>用户首选项（项目 10） 
  <ul><li><code>通用-&gt;显示询问</code>调整为<code>通过弹出窗口</code></li><li><code>其它-&gt;执行文档更新</code>调整为<code>三次</code></li><li>进入绘图模式（插入绘图区域或者在当前位置绘制）默认显示网格，可使用快捷键<code>#</code>切换</li><li>绘图模式的网格默认单位长度从 1 调整为 2</li><li>默认开启<code>转换-&gt;PDF-&gt;展开幻灯片中的可折叠对象</code></li></ul></li><li>稳定性（项目 7） 
  <ul><li>修复内存少量泄露的问题</li><li>修复将比较大的数转换为罗马数字崩溃的问题</li><li>修复版本工具中使用粗粒度做文档比较崩溃的问题</li><li>Linux 平台下，修复错误的环境变量 LC_PAPER 导致崩溃的问题</li></ul></li></ul><h2>开发者相关变更</h2><ul><li>使用 xmake 2.8.5 作为构建工具，并配置了 Ubuntu/macOS/Windows 三个平台的 CI 和 CD</li><li>在 Git 仓库的 devel 目录下使用 tm 文档做项目管理，确立了 Git 提交信息的规范</li><li>在<code>开发者</code>菜单中可以直接点击查看当前版本的项目管理，也可以直接打开错误模版和特性模版</li><li>Windows 平台下，使用 msvc 而不是 mingw 来构建整个软件</li><li>HTML 和 LaTeX 的导入导出、各种界面语言的翻译词典、编程语言的高亮初步插件化</li><li>TeXmacs 的基础代码重构为 Lolly 项目作为 Mogan 的依赖</li><li>在 Lolly 项目中引入 tbox 依赖解决棘手的字符编码以及跨平台的文件访问等问题</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 12:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269498</guid>
            <link>https://www.oschina.net/news/269498</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源｜Timeplus 为全球开发者开源高性能实时数据平台核心]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>2023 年 9 月 21 日&nbsp;</strong>- Timeplus，业界最快最强的实时流式分析平台之一，宣布将其核心引擎 「Proton」 正式开源提供给全球开发者。Timeplus 在融合 ClickHouse 的历史在线分析处理的基础上，开发了一款全新的流式数据处理优先、统一历史数据从存储到计算原生一体化的实时数据平台。这意味着企业现在可以使用统一 SQL 语言实时无缝地查询流式数据和历史数据，进行实时处理分析，实时生成报表。相对于其他流式数据处理技术而言，Timeplus 的高效和简洁的统一架构，不仅可以提供增强的数据处理及分析功能以及更好的性能，更可以让企业大大降低实时数据处理的开发、部署和运维成本。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Timeplus 的联合创始人兼首席执行官王亭表示：「Timeplus 是一家由工程师创办，并为工程师服务的公司。我们广泛的开发者用户都表示十分喜欢 Timeplus 产品的简单、高效和优雅，许多人也都希望我们能开放源代码。我们倾听到大家的心声，非常高兴地正式宣布核心引擎‘Proton’的开源，同时和 ClickHouse 成为合作伙伴并为社区作贡献，这将惠及全球的开发者。用户可以从高效的流式处理分析和 OLAP 历史分析结合中受益。」</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Timeplus 认为仅靠单一的流式处理无法满足实时分析的复杂需求。要实时找到问题的根源并精确处理相关内容，需要参考历史数据。通过使用 Timeplus 和 ClickHouse 的集成，开发者现在可以无缝地关联历史数据和统一分析，以解决复杂的实时分析需求。例如：在线与离线数据的关联比较、数据回填和回测等。同时，用户现在也能更轻松、更经济、更快速地运行统一的实时分析，来应对一系列具有挑战性的多样化用例的分析问题，比如在金融服务和物联网等领域的分析。在实际使用中，Timeplus 客户使用统一高效的 SQL 流式处理完成实时分析，可以大幅度降低总体拥有成本（TCO），只是使用其他系统的 10%。</p><h4><strong>为应对行业挑战而生，为业界提供实时分析的创新技术方案</strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Timeplus 解决了一个极其困难的技术挑战：在单一内核提供了简单、高效、统一的流式分析与历史分析的融合。通过与 ClickHouse OLAP 分析能力的无缝整合，Timeplus 提供了强大的流式处理及复杂的增量计算能力，彻底改变了数据工程师和分析师的工作方式。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">许多行业都需要创新的方法来实现实时持续智能。例如资本市场，从优化成本以及基础设施来支持更可靠的交易，到在不断变化的市场环境下进行实时的风险控制和欺诈检测，实时处理技术一直至关重要。开发者常常陷入一个 「三难选择」 的境地，他们必须在速度、功能和开放性之间做出权衡，通常只能选择其中一个或两个。Timeplus 基于 SQL 的开放标准实现了历史和流式分析的强大功能以及超低延迟。通过将核心开源，Timeplus 为整个社区的开发者提供了机会，一起来参与到实时流式数据分析的平台创新中。Timeplus 强大的流式 SQL 和实时分析能力也能更好地帮助开发者加速各行各业的竞争优势。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">正如华泰证券信息技术部联席负责人、数字化运营部总经理王玲表示：「在今天瞬息万变的市场中，企业必须具备实时运营能力，否则将不进而退。Timeplus 填补了市场上的重要空白，它支持流式 SQL，不仅易于使用且分析速度快。这项技术使企业从流数据中提取洞见变得更加容易，节省了数百小时开发成千上万行代码的时间。Timeplus 能够实时监控并同步分析大量数据，大幅提升企业风控管理和成本分析的水平。」</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Timeplus 产品在 2022 年 3 月份推出，目前拥有超过 250 家客户在这个平台上使用和测试。迄今为止，公司已经从领先的全球投资者中获得 900 万美元的天使轮融资，这些投资者包括高瓴创投、Sentinel Capital 的创始人 Jeremy Kranz、Apple 前供应链高级副总裁 Rory Sexton、世界流式数据技术先驱和 StreamBase 的创始人 Richard Tibbetts 等在内的天使投资者。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">全球开发者和技术爱好者还在犹豫什么，快来访问<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank">GitHub 上的 Proton</a>，只需几分钟的时间就可以启动预配置的 Docker 镜像，快速对接各种数据开始体验流批一站式实时数据处理和分析。欢迎大家查看代码，运行样例，提交反馈和贡献社区。</p><h4>有关 Timeplus</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Timeplus 是一个 「流式优先」 的实时数据平台。它提供强大的端到端功能，帮助团队快速直观地处理流式数据和历史数据。该平台使数据工程师和平台工程师能够通过使用 SQL 解锁流式数据价值。Timeplus 的控制枱允许开发人员轻松连接到各种不同的数据源（如 Apache Kafka, Confluent Cloud, Redpanda, CSV 文件上传），通过 SQL 查询探索流式数据模式，向其他系统或个人发送实时洞察和警报，并创建仪表板和可视化图标。更多信息请访问：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ftimeplus.com" target="_blank">timeplus.com</a><span>&nbsp;</span>或<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank">https://github.com/timeplus-io/proto</a>，同时也欢迎大家多多关注我们的微信公众号：Timeplus 公司。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 11:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269485</guid>
            <link>https://www.oschina.net/news/269485</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[让代码运行起来，比代码可读性重要]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#101828; margin-left:0px; margin-right:0px; text-align:start">"代码的阅读胜于编写"这句话现在已经是程序员共识，它提醒我们，在编写代码时不能仅追求方便，而忽视那些将来需要阅读和修改代码的人。更一般地说，"代码的阅读胜于编写"传达了一个观点：通过保持代码可维护性，保持简洁、编写测试和文档等方式来使得代码易于理解是一个明智的投资。它关乎对软件开发周期的全局视角。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">让我用更简洁的表达方式来表述这个观点：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">维护者 &gt; 作者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我认为这种思路可以超越编写代码，并作为一个经验法则用于问题识别和决策。</p><h3>代码的使用胜于阅读</h3><p style="color:#101828; margin-left:0px; margin-right:0px; text-align:start">代码只是达到目标的手段。软件应该有一个目的，它应该为用户提供服务。无论代码是否编写良好、可维护性如何，以及所使用技术是否先进，如果软件不能实现其目标并给用户带来良好体验，则一切都没有意义：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">用户 &gt; 维护者 &gt; 作者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">或者，既然我们不再需要区分开发人员角色：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">用户 &gt; 开发者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">因此，与其猜测或询问用户需求，最好的方法是尽早、频繁地将程序放在用户面前，并结合他们的反馈来改进。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这是一个强大的思维模式，只要在开发过程中牢记用户，我们就能走得更远。这大致是我学习这个职业以及我职业生涯前半段对它的理解方式。</p><h3>代码的运行胜于阅读</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">当我说"运行"时，我不仅指执行程序，还包括在生产环境中操作它，包括部署、升级、观察、审计、监控、修复和废弃等等。正如丹·麦金利所说：在保持系统可靠工作方面，长期成本几乎总是远远超过你在构建过程中遇到的任何不便。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我们可以将这个观点纳入我们的小模型中：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">用户 &gt; 运维 &gt; 开发</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我花了一些时间才完全理解这一点，因为根据我的经验，很多正在构建的软件实际上从未真正投入生产使用，至少没有达到重要规模。大多数软件都是基于从未经过测试的假设构建而成。但当你将代码运行在生产环境中时，简洁性原则就有了新的维度。它不再仅仅关乎代码本身，而是关乎减少移动部件并了解其故障模式。它关乎交付产品并确保即使在出现故障时也能正常工作。</p><h3>此外，还有商业因素</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我说过，在开发过程中牢记用户可以帮助我们走得更远。这适用于软件对用户有价值且良好运行的假设。对于开发人员来说，这是一个方便的抽象：我们提供优秀、可工作的软件，而业务则负责将其转化为利润。这在消费者和企业软件领域通常有效。但最终，这种抽象会被证明是一种过度简化，并且我们可以从中受益，将一些商业观点纳入我们的工作流程：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; 用户 &gt; 运维 &gt; 开发</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">最明显的例子就是预算：我们没有无限资源来满足用户需求，所以需要衡量成本和收益。还有市场营销、截止日期、利益相关者和投资者等因素。个人兴趣和政治也会产生影响。某些决策在孤立考虑我们的软件、团队或用户时是合理的，但当考虑整个组织时可能不再合适。有时，我们需要关注能够产生收入的事务，而不是只迎合用户。我将再次回到这个问题。</p><h3>反向思考</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我们得到了一个小模型，它表达了软件开发中各种因素的相对重要性，或许可以帮助我们看到更大的图景并专注于重要的事情。现在我想看一下一些常见的软件开发功能障碍，并看看它们如何与该模型相匹配。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>难以维护的代码</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">作者 &gt; 维护者</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这是我们起点。这是聪明而懒惰的代码变成了意大利面条和鬼屋，这是过早优化，这是只有卡洛斯才能碰触那个模块等等。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>不可用的软件</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; 用户</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">由那些不从用户那里学习或将技术放在第一位的团队制作的软件。过度工程化程序、恶化用户体验的"现代化"、破坏浏览器功能的 Web 应用等等。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>只在我的机器上运行</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; 运维</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">没有考虑操作问题而设计出来的软件。这是过于复杂、有很多移动部分、为小数据负载设计高级数据库、由单个小团队管理的微服务生态系统。这是过早为规模而架构的软件。这是由与在它出现故障时被叫醒的人不同的人设计的软件。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>正确的事情</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; 商业</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">将代码视为目标本身。这是自命不凡的工匠们、泰坦尼克号上的音乐家和 Lisp 黑客制作的软件。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>以简历为导向的开发</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">开发者 &gt; *</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">没有风险，开发人员可以做他们想做的任何事情。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>虚构的软件</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; 用户 &gt; <s>运维 &gt;</s><span style="color:#101828">&nbsp;开发</span></p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这是已经构建但很少（或从未）投入生产使用的软件。我称之为虚构的软件。Charity Majors 称之为活在谎言中。</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; <s>用户 &gt;</s><span style="color:#101828">&nbsp;运维 &gt; 开发</span></p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">另一种虚构的软件是那些没有用户但具有可扩展性（大规模）的软件。这是无法解决问题或解决错误问题，可能没有人关心问题。这种软件源于采用一些炒作技术并将其应用于所有事物，直到出现模糊地符合某个用例需求。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>晚期资本主义</strong></p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><s>商业 &gt;</s><span style="color:#101828">&nbsp;用户 &gt; 运维 &gt; 开发</span></p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">风险投资支持下没有商业模式或其商业模式是增长至垄断然后剥削用户的软件。</p><h3>全局来看</h3><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">如果你还没有关闭浏览器标签，让我总结一下：</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">商业 &gt; 用户</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">这个观点可能很难接受。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">正如我上面提到的，我学习这个工作时，软件是为最终用户解决问题的。这在《程序员修炼之道》的最后一个提示中得到了总结，该提示说我们的目标是让用户满意，而不仅仅是交付代码。但自从我开始从事程序员工作，并且随着软件变得无处不在，我发现这种假设越来越难以维持。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">有很多正在生产的软件根本不关心其用户，或者操纵用户，或者将其变成产品。这不仅限于社交媒体：作为用户，在没有弹窗试图吸引我的注意力之前，我甚至不能预订房间、订购食物或点击 Windows 开始按钮；在进行谷歌搜索时，我会得到一堆垃圾信息。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">我们认为做好工作意味着什么与行业中相当大一部分人认为能够获利是相矛盾的，我认为这解释了许多软件专业人士日益感到不适的原因。虽然我们不能回避对我们领域的经济现实，但也许我们应该更加坚定地站在道德立场上，不伤害用户。承认用户并非始终排在商业之前，但商业也不应无条件地居于第一位：</p><blockquote><p style="color:#101828; margin-left:0px; margin-right:0px; text-align:start">用户 &gt; 运维 &gt; 开发<br> 商业 &gt; 运维 &gt; 开发<br> 商业 ≹ 用户</p></blockquote><p>原文链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Folano.dev%2F2023-11-30-code-is-run-more-than-read%2F" target="_blank">https://olano.dev/2023-11-30-code-is-run-more-than-read</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 10:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269471</guid>
            <link>https://www.oschina.net/news/269471</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8 极致性能优化 AOT]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><strong>前言</strong></h1><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">.NET8 对于性能的优化是方方面面的，所以 AOT 预编译机器码也是不例外的。本篇来看下对于 AOT 的优化。</p><span id="OSC_h1_2"></span><h1><span><strong><span style="color:#3c70c6">概述</span></strong></span></h1><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">首先要明确一个概念，.NET 里面的 AOT 它是原生的。什么意思呢？也就是说通过 ILC 编译器 (AOT 编译器，参考:<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247484180%26idx%3D1%26sn%3D418cc4dc2d124a107f52c34739181e50%26chksm%3Dc01c4e8ff76bc79991e1b1086487f5a60d0068c358969c47945843ac88be74aa90de38ed9302%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>.Net 7 新编译器 ILC 简析</span></strong></a>) 编译出来的代码是各个平台上可以直接运行的二进制代码。比如 MacOS 的二进制，Linux 二进制等等。所以称之为原生。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">C#源码被 ILC 编译之后，生成了一个完全原生态代码的可执行文件。在执行的时候不需要 JIT 来编译任何东西，因为 JIT 已经在 ILC 里面被充分利用过了。实际上 AOT 里面也没有包含 JIT。那么它如何优化呢？只能是在 ILC 里面调用 JIT 的时候了。所以它这个优化依然依靠 JIT。<span>.NET8 里面优化 AOT 的一个典</span><span>型的例子，就是 ASP.NET 应用程序在使用 AOT 的时候表现不错，同时也降低了总成本。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">在.NET8 里面优化 AOT 的一个重要的目标就是减少 AOT 可执行文件的大小，关于这点的效果。我们现在就可以看到</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">下面创建一个控制枱应用程序</p><pre><code><span>dotnet <span style="color:#ca7d37">new</span><span style="color:#ca7d37">console</span> -o nativeaotexample -f net7<span style="color:#0e9ce5">.0</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">由于上面是通过.NET7.0 创建的，我们把这个控制枱的 csproj 更改下</p><pre><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">TargetFramework</span>&gt;</span>net7.0<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">TargetFramework</span>&gt;</span></span></code><code><span>改为</span></code><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">TargetFrameworks</span>&gt;</span>net7.0;net8.0<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">TargetFrameworks</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">可以轻松的构建.NET7.0 或者.NET8.0 的程序</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">继续​​​​​​​</p><pre><code><span>把<span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">PropertyGroup</span>&gt;</span>...<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">PropertyGroup</span>&gt;</span>项中添加如下</span></code><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">PublishAot</span>&gt;</span>true<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">PublishAot</span>&gt;</span>编译成 AOT 文件</span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">下面我们就可以通过 dotnet publish 发布它了，linux 如下：</p><pre><code><span><span style="color:#ca7d37">dotnet</span><span style="color:#ca7d37">publish</span><span style="color:#ca7d37">-f</span><span style="color:#ca7d37">net7</span><span>.0</span><span style="color:#ca7d37">-r</span><span style="color:#ca7d37">linux-x64</span><span style="color:#ca7d37">-c</span><span style="color:#ca7d37">Release</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">现在它生成了一个.NET7.0 版本的独立可执行文件，可通过&nbsp;ls/dir 输出目录以查看生成的二进制大小</p><pre><code><span><span>12820K</span><span style="color:#dd1144">/home/stoub/nativeaotexample/bin/Release/net7.0/linux-x64/publish/nativeaotexample</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">这个大约是 13M 左右，我们再来看下.NET8.0</p><pre><code><span><span style="color:#ca7d37">dotnet</span><span style="color:#ca7d37">publish</span><span style="color:#ca7d37">-f</span><span style="color:#ca7d37">net8</span><span>.0</span><span style="color:#ca7d37">-r</span><span style="color:#ca7d37">linux-x64</span><span style="color:#ca7d37">-c</span><span style="color:#ca7d37">Release</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">生成的可执行文件大小如下:</p><pre><code><span><span>1536K&nbsp;/home/stoub/nativeaotexample/bin/Release/net8.0/linux-x64/publish/nativeaotexample</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff">1.5M 的大小，这个优化的力度不可不大啊。整整优化了将近 10</span>倍<span style="background-color:#ffffff">的体积。</span><span style="background-color:#ffffff">这就是.NET8.0 的优化魔力。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">但是优化的情况远不止如此，比如说我们可以配置 csproj 使 AOT 的体积更小​​​​​​​</p><pre><code><span>csproj 添加如下 size 表示要生成的 AOT 大小</span></code><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">OptimizationPreference</span>&gt;</span>Size<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">OptimizationPreference</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff">如果我们不需要全球化代码和数据，需要特</span>定<span style="background-color:#ffffff">的代码和数据，并且使用不变模式，可以 csproj 添加如下选项</span></p><pre><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">InvariantGlobalization</span>&gt;</span>true<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">InvariantGlobalization</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">如果你不想在 AOT 异常的时候抛出堆栈，那么你也可以在 csproj 里面添加如下</p><pre><code><span><span style="color:#0e9ce5">&lt;<span style="color:#0e9ce5">StackTraceSupport</span>&gt;</span>false<span style="color:#0e9ce5">&lt;/<span style="color:#0e9ce5">StackTraceSupport</span>&gt;</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">重新通过 dotnet publish net8.0 发布了之后，它的体积还可以继续减小</p><pre><code><span><span>1248K</span><span style="color:#dd1144">/home/stoub/nativeaotexample/bin/Release/net8.0/linux-x64/publish/nativeaotexample</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">再次缩小了 0.3M 大小。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">然而，你以为到此优化就为止了吗?并没有，.NET8 不仅对 AOT 编译器内部进行了改进，而且还对单个库也进行了性能优化和改进。比如 HttpClient。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">当然除了体积的优化之外，还有其它的优化，比如避免了在读取静态字段时的辅助调用，再比如 BenchmarkDotNet 也是支持 AOT 化的，也就是性能测试上面的支持。我们可以只使用 --runtimes nativeaot7.0 nativeaot8.0，而不使用 --runtimes net7.0 net8.0，如下代码​​​​​​​</p><pre><code><span><em>// dotnet run -c Release -f net7.0 --filter "*" --runtimes nativeaot7.0 nativeaot8.0</em></span></code><code><span><span style="color:#ca7d37">using</span> BenchmarkDotNet.Attributes;</span></code><code><span><span style="color:#ca7d37">using</span> BenchmarkDotNet.Running;</span></code><code><span>BenchmarkSwitcher.FromAssembly(<span style="color:#ca7d37">typeof</span>(Tests).Assembly).Run(args);</span></code><code><span>[<span style="color:#afafaf">HideColumns(<span>"Error"</span>, <span>"StdDev"</span>, <span>"Median"</span>, <span>"RatioSD"</span>)</span>]</span></code><code><span><span style="color:#ca7d37">public</span><span style="color:#ca7d37">class</span><span style="color:#dd1144">Tests</span></span></code><code><span>{</span></code><code><span><span style="color:#ca7d37">private</span><span style="color:#ca7d37">static</span><span style="color:#ca7d37">readonly</span><span style="color:#ca7d37">int</span> s_configValue = <span style="color:#0e9ce5">42</span>;</span></code><code><span>    [<span style="color:#afafaf">Benchmark</span>]</span></code><code><span><span><span style="color:#ca7d37">public</span><span style="color:#ca7d37">int</span><span style="color:#dd1144">GetConfigValue</span>()</span> =&gt; s_configValue;</span></code><code><span>}</span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">上面代码可以通过如下 AOT 化运行</p><pre><code><span><span style="color:#ca7d37">dotnet</span><span style="color:#ca7d37">run</span><span style="color:#ca7d37">-c</span><span style="color:#ca7d37">Release</span><span style="color:#ca7d37">-f</span><span style="color:#ca7d37">net7</span><span>.0</span><span style="color:#ca7d37">--filter</span> "*" <span style="color:#ca7d37">--runtimes</span><span style="color:#ca7d37">nativeaot7</span><span>.0</span><span style="color:#ca7d37">nativeaot8</span><span>.0</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">BenchmarkDotNet 输出如下</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box !important; color:rgba(0, 0, 0, 0.9); display:table; font-family:system-ui,-apple-system,BlinkMacSystemFont,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei UI&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size:17px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:676.989px; word-spacing:0px"><tbody><tr><th>Method</th><th>Runtime</th><th>Mean</th><th>Ratio</th></tr></tbody><tbody><tr><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">GetConfigValue</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">NativeAOT 7.0</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">1.1759 ns</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">1.000</td></tr><tr><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">GetConfigValue</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">NativeAOT 8.0</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">0.0000 ns</td><td style="border-collapse:collapse; border-color:#c0c0c0; border-style:solid; border-width:1px">0.000</td></tr></tbody></table><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">可以看到即使是性能测试的 Benchmark，AOT 优化也是不放过的。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">另外还值得一提的地方就是分层，因为 AOT 里面没有分层的概念。但是即时编译也就是不是 AOT 编译的时候，一个方法从 tier0 提升到 tier1,方法里面的静态字段必须被初始化过了。AOT 里面添加了一个快速路径检查字段是否初始化，避免一些不必要的开销。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">其它的一些改进，比如 AOT 锁的实现方式。使用了一种混合方式，开始使用轻量级自旋锁，后面升级到使用 System.Threading.Lock 类型，这个应该会在.NET9.0 里面释放出来。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#4a4a4a; margin-left:0px; margin-right:0px"><strong>欢迎关注公众号 (jianghupt），文章首发地。</strong></p><p><span><img alt="" height="430" src="https://oscimg.oschina.net/oscnet/up-3243ba74c89867eabc4277de83aa83aa7bb.png" width="430" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 09:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5407571/blog/10316035</guid>
            <link>https://my.oschina.net/u/5407571/blog/10316035</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌推迟「最强 AI」Gemini 的发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">The Information 援引知情人士<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fgoogle-postpones-big-ai-launch-as-openai-zooms-ahead" target="_blank">消息称</a>，谷歌已悄悄地将旨在与 OpenAI 竞争的对话式人工智能 Gemini 的公开亮相推迟到 2024 年 1 月。</span></p><p><span style="color:#000000">谷歌在 2023 年 I/O 大会上首次透露正在开发 Gemini 以作为下一代基础模型，据称这是该公司迄今为止创建的最强大的对话式 AI。Gemini 被描述为一个可以处理多种数据的多模态 AI 聊天机器人，能够根据草图和书面描述的结合来理解和生成文本、图像和其他类型的内容。还可以根据用户的要求总结文本、帮助软件工程师编写代码等。</span></p><p><span style="color:#000000">该公司表示，新模型将展现出「令人印象深刻的多模态能力」，这是之前的任何大模型中都从未出现过的。此外，他们还在开发 API，使得开发人员可以直接将 Gemini 集成到第三方应用程序中。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-ce616c5439bca81a98416dd64866cdde1d9.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">谷歌原定于本周在美国纽约、华盛顿和加州举行的发布会上推出 Gemini，但在他们「发现 AI 无法可靠地处理一些非英语查询」后。首席执行官 Sundar Pichai 决定取消原定的一系列活动，并推迟 Gemini 的发布。谷歌希望 Gemini 最终能超越 OpenAI 的 GPT-4 模型，而全球化支持是 Gemini 的主要功能之一。</span></p><p><span style="color:#000000">研究机构 SemiAnalysis 在 8 月份的一篇博文中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsiliconangle.com%2F2023%2F12%2F03%2Fgoogle-reportedly-postpones-launch-next-gen-chatbot-gemini-early-next-year%2F" target="_blank">表示</a>，Gemini 拥有强大的计算能力，它看起来已经准备好 "将 OpenAI 的模型打得落花流水"。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 08:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269444/google-delays-launch-gemini</guid>
            <link>https://www.oschina.net/news/269444/google-delays-launch-gemini</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[美团 CEO 王兴发布内部信：多项技术岗负责人调动]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>美团 CEO 王兴近日发布内部信，公布了多项技术岗负责人的调动。</p><p>内部信显示，由穆荣均、张锦懋牵头筹备技术委员会下成立技术治理筹备小组。锦懋卸任基础研发平台负责人，继续任技术委员会主席并负责技术委员会现有工作；原美团平台技术部负责人韩建换岗担任基础研发平台负责人，汇报至王兴。原快驴事业部产品和运营及技术负责人司天歌换岗担任美团平台技术部负责人，汇报至美团平台负责人李树斌。</p><hr><p>以下为全文：</p><p>为更好的实现「帮大家吃得更好，生活更好」的使命，落实「零售+科技」战略，一方面需要进一步提升科技支撑零售各业务的效能，助力各团队和合作伙伴卓越运营，提升客户体验；另一方面需要进一步加强自动车、无人机、AI 特别是大模型技术等领域的研发投入，在公司丰富的零售业务场景中积极探索新应用、新体验。经公司研究决定：</p><p>1、在技术委员会下成立技术治理筹备小组，由荣均、锦懋牵头筹备。锦懋卸任基础研发平台负责人，继续任技术委员会主席并负责技术委员会现有工作，汇报至王兴。技术治理筹备小组的目标是经过一段时间的筹备，明确后续公司技术治理的范围、目标、原则、组织保障和运作机制等，在公司坚定的决心、长期的耐心支持下，以循序渐进的节奏、稳扎稳打的方式，机制性的长期推进公司技术治理工作。</p><p>2、原美团平台技术部负责人韩建换岗担任基础研发平台负责人，汇报至王兴。</p><p>3、原快驴事业部产品和运营及技术负责人司天歌换岗担任美团平台技术部负责人，汇报至美团平台负责人李树斌。</p><p>过去几年，公司持续建设领导梯队，提升组织能力，鼓励、支持广大同学在前线和后线、区域和总部之间，不同职能、不同业务之间换岗，实现「Z 字型」发展，同时也在不同的角度为公司发展创造价值。期待锦懋、韩建、天歌在新的岗位上为公司长期发展贡献更大力量！</p><p>个人介绍：</p><p>张锦懋，2014 年 7 月加入公司，在公司多次换岗锻炼发展，历任技术工程部、美团平台及酒旅事业群/技术研发部、用户平台/算法与数据研发部、用户平台/大数据与算法部、基础研发平台负责人。锦懋担任多年技术委员会主席，具备优秀的技术判断、架构能力，对公司技术栈有全面深入的理解，在深潜、敢想、学习并好奇方面表现出色，相信未来能站在公司更高的层面贡献更大价值，帮助公司在技术治理工作上往前迈进。</p><p>韩建，2015 年 10 月加入公司，在公司多次换岗锻炼发展，历任外卖事业部/技术部、外卖事业部、到家研发平台、美团平台技术部负责人。韩建兼具业务和平台技术团队管理经验，技术视野广阔，具备主人翁精神，在力求正确、招聘并发展最佳人才方面有优秀的展现，相信在新岗位上能够更好支撑全公司的公共技术平台和服务。</p><p>司天歌，2016 年 12 月加入公司，在公司多次换岗锻炼发展，历任美团 App 技术部负责人、快驴技术部负责人、快驴产品与运营部负责人。天歌兼具平台和业务技术视角，具备主人翁精神，学习并好奇，极度关注客户并深潜，相信能在新岗位上更好的建设美团 App 技术基建，支撑各业务发展。</p><p>以上组织调整与任命自本公告发布之日起生效。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 04 Dec 2023 07:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269428</guid>
            <link>https://www.oschina.net/news/269428</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
