<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 09 Nov 2023 04:33:29 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[ChatGPT 服务中断近 2 小时，CEO 奥特曼道歉：流量远超预期]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>北京时间 11 月 8 日晚 22 点左右，OpenAI 旗下 ChatGPT 以及相关 API 出现中断故障，导致面向用户和开发者的服务近 2 小时无法正常使用。</p><p><img src="https://static.oschina.net/uploads/space/2023/1109/114753_pknp_2720166.png" referrerpolicy="no-referrer"></p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstatus.openai.com%2F" target="_blank">随后 OpenAl 更新事故报告称</a></u>，已确定了一个导致 API 和 ChatGPT 错误率高的问题，正在努力修复。</p><p><img src="https://static.oschina.net/uploads/space/2023/1109/114923_hRcd_2720166.png" referrerpolicy="no-referrer"></p><p>与此同时，OpenAI CEO 山姆・奥特曼<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1722315204242149788">公开致歉称</a></u>，本周发布的新功能遇到远超预期的使用量。公司原计划在周一为所有订阅者启用 GPTs 服务，但目前还无法实现。由于负载的原因，短期内可能会出现服务不稳定的情况，对此情况向用户道歉。</p><p><img alt="" src="https://static.oschina.net/uploads/space/2023/1109/113902_kyvS_2720166.png" referrerpolicy="no-referrer"></p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/265330">OpenAI 开发者大会：GPT-4 Turbo、GPTs 商店、128k 上下文窗口、大降价</a></li><li><a href="https://www.oschina.net/news/265331/openai-custom-versions-chatgpt">OpenAI 推出用户自定义版 ChatGPT</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 03:41:25 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265693</guid>
            <link>https://www.oschina.net/news/265693</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果正在利用 LLM 彻底改造 Siri，将成为杀手级 AI 应用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>爆料者 Tech_Reve 发表推文<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FTech_Reve%2Fstatus%2F1722418466647625999" target="_blank">表示</a></u>，苹果公司正在使用大语言模型 (LLM) 将 Siri 彻底改造成「终极虚拟助理」，并准备将其开发为「最强大的杀手级 AI 应用」。</p><p>目前苹果正在积极推进这项开发工作，首款产品预计将在 WWDC 2024 上亮相。改进后的 Siri 将成为 iPhone 16 及后续机型的标配功能。</p><p><img src="https://static.oschina.net/uploads/space/2023/1109/111614_rFyz_2720166.png" referrerpolicy="no-referrer"></p><p>Tech_Reve 还说道，苹果和三星一样<strong>，整体思路都是专注于在设备侧运行，同时配合云端实现相关 AI 服务</strong>，这是因为 AI 在本地运行响应时间更快、不需要网络连接，且更具隐私性。</p><p>上个月<u><a href="https://www.oschina.net/news/263067">彭博社的报道</a></u>也提到了苹果公司内部对如何部署生成式 AI 的争论：<strong>完全在设备上运行、基于云运行或介于两者之间</strong>。</p><p><span style="background-color:#ffffff; color:#333333">部署在设备上会运行得更快，并有助于保护隐私，但通过云部署大模型将允许更高级的操作。部署在设备端的策略也会让苹果更难更新其技术并适应快速变化的行业。考虑到这一点，该公司很可能采用组合方法：<strong>使用设备上的部署处理某些功能，使用云来处理更高级的任务</strong>。</span></p><p>彭博社还提到，今年 7 月，苹果公司构建了自己的大型语言模型，<a href="https://www.oschina.net/news/250184/apple-gpt"><strong>称为 Ajax</strong></a>，并推出了一个名为 「Apple GPT」 的内部聊天机器人来测试其功能。下一步的关键是确定该技术是否能够应对竞争对手，以及苹果如何将其实际应用到产品中。</p><p>分别负责人工智能和软件工程的高级副总裁 John Giannandrea 以及 Craig Federighi 正在带头开展这项工作，服务主管 Eddy Cue 也参与其中。目前，3 人计划每年在该项目上花费约 10 亿美元。</p><p>据介绍，John Giannandrea 主要负责全新 AI 系统的底层技术，他的团队目前正在改进 Siri，这个更智能的 Siri 最早可能会在明年准备就绪。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 03:28:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265689</guid>
            <link>https://www.oschina.net/news/265689</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 工程师年薪中位数高达 92.5 万美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">来自美国薪资跟踪网站 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.levels.fyi%2Fcompanies%2Fopenai%2Fsalaries%2Fsoftware-engineer" target="_blank">Levels.fyi</a> 的数据显示，OpenAI 软件工程师的年薪中位数高达 92.5 万美元，其中包括基本工资以及潜在的股票报酬和奖金。</span></p><p><span style="color:#000000">目前 OpenAI 薪酬最低的工程师底薪为 21 万美元，拥有约 2 至 4 年的行业从业经验。L5 软件工程师（拥有 10 年以上工作经验的软件工程师）的底薪为 30 万美元，另外还可以获得 62.5 万美元的股票薪酬。此外，该公司的一些高级软件工程师的薪酬甚至更高，年薪最高达到 140 万美元。</span></p><p><img height="139" src="https://oscimg.oschina.net/oscnet/up-540ee3f9087289680579b5a9f2e340b6bf7.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">OpenAI 提供的高薪不仅对公司本身，而且对整个行业都具有深远影响。根据 Levels.fyi 的数据，以科技中心和人才库著称的旧金山，为 AI 软件开发人员提供的薪酬中位数一般约为 30 万美元。「通过提供近三倍的薪酬，OpenAI 为该地区的薪酬设定了新的基准，并表明其致力于吸引和留住顶尖 AI 人才的承诺。」</span></p><p><span style="color:#000000">OpenAI 的员工薪资由「基本工资」和「Profit Participation Units(PPU)」两个部分组成。PPU 是 OpenAI 独创的分润机制，该公司以 PPU 的形式提供股票薪酬，让员工分享公司的利润。</span></p><p><img height="291" src="https://oscimg.oschina.net/oscnet/up-9f5f514ce43285fd98946d201453956b368.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">而 PPU 的价值取决于公司未来的表现或被收购时的估值。9 月份有消息称，<span style="background-color:#ffffff">OpenAI&nbsp;</span><span style="background-color:#ffffff">正在与投资者讨论股票出售事宜</span><span style="background-color:#ffffff">，其</span><span style="background-color:#ffffff">估值大概在 800 亿至 900 亿美元之间，约是今年早些时候水平的三倍。今年 4 月，OpenAI 曾从红杉资本、Andreessen Horowitz、Thrive 和 K2 Global 等支持者那里获得了略高于 3 亿美元的融资，估值为 290 亿美元。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 03:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265688/openai-software-engineer-pay</guid>
            <link>https://www.oschina.net/news/265688/openai-software-engineer-pay</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[魅族为 Flyme 征集中文名，入选者将获赠「华小魅」手机组合包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>魅族科技今日<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2683843043%2FNrJHikCZG%3Fpagetype%3Dprofilefeed" target="_blank">发布公告称</a></u>，集魅友力量，<strong>为 Flyme 征集中文 OS 名称</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-75abc601083ca8c26ecda32cafc7d8aac84.png" referrerpolicy="no-referrer"></p><p>魅族在公告写道：「再一次，华为、小米、魅族奔跑在了同一条道路上，一条由中国企业定义、引领的手机、汽车、AR 等多终端全场景生态融合发展的道路。」</p><p>在这样一个奔涌的时代，<strong>Flyme 也需要拥有像鸿蒙、澎湃一样响亮的中文名</strong>。和用户共创是魅族的传统，魅族科技将 Flyme 的中文 OS 命名权交给魅友。</p><p>该公司将选取三个意向名称，创作者可获赠「华小魅」手机组合一份（<strong>包含华为 Mate 60 Pro、小米 14 Pro、魅族 20 PRO 各一部</strong>）。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 02:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265679</guid>
            <link>https://www.oschina.net/news/265679</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[NetBSD 10.0 发布首个 RC，类 UNIX 操作系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>自去年发布 NetBSD 10.0 Beta 以来，已过去接近一年，现在终于进入了 RC 阶段。开发团队称将在未来几个月内发布正式版。</p><p>NetBSD 10 的开发工作于 2019 年底启动，这将是重大版本更新。<u><a href="https://www.oschina.net/news/222371/netbsd-10-0-beta">根据之前的报道</a></u>，新版本在性能提升方面将会是一个重要里程碑，尤其是 NetBSD 10 的多核操作系统性能比以前的版本要快许多。</p><p><strong>其他重要变化</strong></p><ul><li>支持 WireGuard</li><li>支持自动为 SWAP 分区进行加密</li><li>引入新的磁盘加密方法</li><li>在内核实现 CPU 加速</li><li>支持更多采用 Arm 架构的硬件，包括 Rockchip RK356X, NXP <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fi.MX" target="_blank">i.MX</a> 8M, Amlogic G12, Apple M1 和 Raspberry Pi 4</li><li>支持最新 ARM CPU 中的新安全功能</li><li>支持新的网络适配器，包括 Realtek 2.5 千兆以太网和新的 Intel 10/25/40 千兆以太网适配器</li><li>将 compat_linux 移植到 AArch64 架构</li><li>将 DTrace 移植到 MIPS</li><li>改进对多处理器的支持，提供更多的 iMac G5 支持</li><li>对 Xen 虚拟机管理程序支持进行重大修改</li><li>为用户空间引入新的程序，包括用于手动修剪磁盘空间的 blkdiscard (8)、用于控制音频音量的 aiomixer (1)、realpath (1) 和 fsck_udf (8)……</li><li>针对多核系统显著提升性能</li><li>用于启用更新组件的无数其他硬件驱动程序改进</li></ul><p>下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnycdn.netbsd.org%2Fpub%2FNetBSD-daily%2Fnetbsd-10%2F202311070920Z%2Fimages%2F" target="_blank">https://nycdn.netbsd.org/pub/NetBSD-daily/netbsd-10/202311070920Z/images/</a></p><p>NetBSD 是一个免费的、安全的及高度可移植的类 UNIX 操作系统，它适合于很多种平台，从 64 位的 AlphaServers 及桌面系统到手持及嵌入式系统。它在设计上非常整洁，并拥有先进的特性，这使得它在业界和学术界都有口皆碑。用户可通过完整的源代码来获得支持。很多应用程序都可容易地从 NetBSD Packages Collection 获得。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9ddeb287fa441bf078d01f543c60856a06d.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-cb37485c28b1322211fac5a6819cf507b8b.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 02:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265677/netbsd-10-0-rc</guid>
            <link>https://www.oschina.net/news/265677/netbsd-10-0-rc</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Windows 11 原生支持 7z 和 .tar 压缩文件格式]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>推特用户 @PhantomOfEarth <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FPhantomOfEarth%2Fstatus%2F1722334216199766161" target="_blank">发现</a></u>，最新的 Windows 11 Canary 版本支持将文件压缩为另外两种存档格式：.<strong>7z 和 .tar</strong>。虽然 RAR 格式仍然缺失，但至少不再局限于 zip。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bac57f48d11859af0d2e31f42856329e753.png" referrerpolicy="no-referrer"></p><p>微软没有在第 25992 版的发布说明中提及这一变更。此外，它已在默认情况下启用，因此无需执行特殊命令即可让 Windows 11 将文件打包为 7z 和 TAR 格式。将系统更新至版本 25992 后，选择要存档的文件，然后从右键菜单中选择"压缩至"即可实现。</p><p><img src="https://static.oschina.net/uploads/space/2023/1109/101016_c73D_2720166.png" referrerpolicy="no-referrer"></p><p>除了可以处理更多的归档类型，Windows 11 版本 25992 还提高了处理大型 ZIP 文件时的性能。发布说明中提到了这一点：</p><blockquote><p>做了一些工作，应有助于明显改善在文件资源管理器中打开大型 .zip 文件的性能。</p></blockquote><p>Windows 11 build 25992 中的其他更改包括 SMB 升级、已知问题修复和剪切工具中的 HDR 支持改进。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 02:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265668</guid>
            <link>https://www.oschina.net/news/265668</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">ONLYOFFICE 发布了 SuiteCRM 的集成连接器。现在，您可以在 SuiteCRM 文档模块中编辑和协作处理 Office 文件。继续阅读了解详情。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07162428/ONLYOFFICE-SuiteCRM-integration.png" referrerpolicy="no-referrer"></p><h2>关于 ONLYOFFICE 文档</h2><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Foffice-suite.aspx" target="_blank">ONLYOFFICE 文档</a></strong><span style="background-color:#ffffff; color:#4d4d4d">是一款全面的在线办公工具，提供了文本文档、电子表格和演示文稿的查看和编辑功能。它高度兼容微软 Office 格式，包括 .docx、.xlsx 和 .pptx 等文件格式，并支持实时协作编辑，使团队成员能够同时在同一文档上进行实时协作。</span></p><p>ONLYOFFICE 文档可与多种云服务进行集成，如：CMS 框架（WordPress/Strapi/Drupal）、协作与内容平台（ONLYOFFICE 工作区/Nextcloud/Seafile/Confluence/Alfresco）、问题跟踪工具（Jira/Redmine）、线上教育解决方案（Moodle/Chamilo/HumHub）等等。您还可将编辑器嵌入至自建 Web 服务中。</p><h2><strong>关于 SuiteCRM</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsuitecrm.com%2F" target="_blank">SuiteCRM</a>&nbsp;是一款开源的，面向企业的客户关系管理应用程序，可作为 SaaS 或本地部署使用。它有多个功能模块，用于管理和自动化销售、建立关系、吸引客户、监控业务数据等。</p><h2><strong>用于 SuiteCRM 的 ONLYOFFICE 连接器</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">利用 ONLYOFFICE 可以直接在 SuiteCRM 文档模块中查看、编辑和协作文档、工作表、幻灯片、表单和 PDF：</p><ul><li>单击该文件打开「详细信息视图」页面。</li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07155648/onlyoffice-suitecrm-files.png" referrerpolicy="no-referrer"></p><ul><li>单击「操作」下拉菜单中的「在 ONLYOFFICE 中打开」。</li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07155448/open-in-onlyoffice.png" referrerpolicy="no-referrer"></p><ul><li>该文件会在相应 ONLYOFFICE 编辑器的新选项卡中打开。</li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07160003/onlyoffice-presentation-editor-in-suitecrm.png" referrerpolicy="no-referrer"></p><h2><strong>如何安装连接器</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">要在 SuiteCRM 中处理办公文档，需要一个 ONLYOFFICE 文档实例。您可以选择<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdownload-docs.aspx" target="_blank"><u>自托管版本</u></a>或无需要下载和安装的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocs-registration.aspx" target="_blank"><u>云实例</u></a>。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">ONLYOFFICE 连接器可在<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2Fonlyoffice-suitecrm" target="_blank">GitHub</a><span>&nbsp;</span>上获取。安装请按照下列步骤操作：</p><ol><li>启动 SuiteCRM，切换到管理 -&gt; 管理工具 -&gt; 模块加载器并上传<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2Fonlyoffice-suitecrm%2Freleases" target="_blank">连接器存档</a>。</li><li>选择相应按钮，安装上传的模块。</li><li>切换到管理 -&gt; 管理工具 -&gt; 修复并运行快速修复和重建。</li></ol><h2><strong>如何配置集成</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">要配置连接器，请转至管理 -&gt; ONLYOFFICE -&gt; ONLYOFFICE 设置，设置以下参数：</p><ul><li><strong>文档编辑服务地址。</strong>输入安装的 ONLYOFFICE 文档服务器的名称或 ONLYOFFICE 文档云的地址。</li><li><strong>密钥。</strong>从 ONLYOFFICE 文档 7.2 版本开始，默认启用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fblog%2Fzh-hans%2F2022%2F09%2Fwhat-is-jwt" target="_blank"><u>JWT</u></a>，并出于安全原因和数据完整性的原因，会自动生成密钥限制对编辑器的访问。如果需要，您可以指定自己的密钥。在这种情况下，请在 ONLYOFFICE 文档<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi.onlyoffice.com%2Feditors%2Fsignature%2F" target="_blank"><u>配置文件</u></a>中指定相同的密钥以启用验证。</li><li><strong>授权标头。</strong></li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07155724/onlyoffice-suitecrm-settings.png" referrerpolicy="no-referrer"></p><div><h3><strong>相关链接</strong></h3><p style="color:#333333; margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2Fonlyoffice-suitecrm" target="_blank"><u>GitHub 上用于 SuiteCRM 的 ONLYOFFICE 连接器</u></a></p><p style="color:#333333; margin-left:0; margin-right:0">ONLYOFFICE 文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdownload-docs.aspx" target="_blank"><u>自托管版</u></a><span>&nbsp;</span>/<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocs-registration.aspx" target="_blank"><u>云</u><u>端</u><u>版</u></a></p><p style="color:#333333; margin-left:0; margin-right:0">最新文档更新：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fblog%2Fzh-hans%2F2023%2F10%2Fonlyoffice-docs-7-5-released" target="_blank"><u>版本 7.5</u></a></p><p style="color:#333333; margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fall-connectors.aspx" target="_blank"><u>ONLYOFFICE<span>&nbsp;</span></u><u>的</u><u>所有</u><u>集成</u></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 13:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265635</guid>
            <link>https://www.oschina.net/news/265635</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[目标智能体社会，MetaGPT 携手 Jürgen Schmidhuber 团队]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b6a26cdfc68540cd8ce50fd07f1d06aa~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1267&amp;h=530&amp;s=59164&amp;e=webp&amp;b=fcfbfb" referrerpolicy="no-referrer"><img alt="" height="335" src="https://oscimg.oschina.net/oscnet/up-35f95b18cb984ecd9e8659b66778355d901.jpg" width="800" referrerpolicy="no-referrer"></p><p>过去数月，MetaGPT [1] 的智能体（Agents）软件公司实例让人印象深刻，它迅速在 GitHub 获得了 30k star，也获得了数十个全球专业媒体与大 V 报道。但智能体软件公司只是智能体社会（Agent Society）的一个缩影。智能体社会或许会有软件公司、电商公司、游戏公司，也会拥有大量的独立智能体提供生产力。现代人工智能之父 Jürgen Schmidhuber 也非常认可智能体社会的理念，他与其团队对 MetaGPT 做出了显著贡献，列入了 MetaGPT 作者名单。</p><p>早在 1986 年，马文·明斯基以《心智社会》（Society of Mind, SOM）[2] 之作引领了人工智能领域的一场思想革命。他提出了一个极具创见的理论：心智不需由具有智能的单独部件构成，反而是由一系列简单部件的相互作用集结而成的复杂系统，正是这种集结，催生了我们所认识的智能和意识。这一理念对于构建自主智能体以及其后续发展，产生了不可估量的深远影响。</p><p>随着人工智能技术至 2023 年的飞跃，我们现在可以设想，如果每个微小部件本身都拥有一定程度的智能，它们将如何相互作用，产生何种层次的集体智能。2023 年上半年关于自然语言心智社会（NLSOM, Language Agent Society）的研究论文 [3] 中，来自阿卜杜拉国王科技大学、瑞士人工智能实验室、牛津大学以及苏黎世联邦理工学院等知名研究机构的科学家们共同探讨了智能体社群的可能性。</p><p>他们提出，构建成由语言驱动的智能体社区，能够协同完成单一智能体无法或难以独立完成的任务。研究中提出了一系列实验构想，这些实验构想不仅仅是概念验证，它们被视作迈向一个包含万亿级智能体社会的先导，这个社会可能也会包括人类成员。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/21644b3cc3a84c2db0d0da75652a0cb0~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=981&amp;h=1280&amp;s=170610&amp;e=webp&amp;b=fcfbfb" referrerpolicy="no-referrer"><img alt="" height="1044" src="https://oscimg.oschina.net/oscnet/up-2ee6f8c420b35e61bc71e31c9228d6fcd13.png" width="800" referrerpolicy="no-referrer"></p><p>在 2023 年的 CogX Festival 上，Jürgen 向听众展示了他对于大型语言模型（LLMs）的深刻见解。他在讨论智能体（Agents）相关的话题时，提到了构建自我改进系统的多种途径，包括通用图灵机（Universal Turing Machine）[4] 和哥德尔机（Gödel machines）[5]。他指出，目前的大语言模型为我们提供了一种全新的思维模式 — 通过使用通用符号语言（例如：自然语言或编程代码）作为接口，来串联不同的模型。这些模型能够与其他语言模型进行交流，共同构建起一个自然语言心智社会（NLSOM）的范例。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/51d8e153f5514d13820c1d67539ede46~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1920&amp;h=1080&amp;s=66142&amp;e=webp&amp;b=7d5c3e" referrerpolicy="no-referrer"><img alt="" height="450" src="https://oscimg.oschina.net/oscnet/up-f4af29afe3864c3625875a198b225f27628.jpg" width="800" referrerpolicy="no-referrer"></p><p>Jürgen Schmidhuber 教授是瑞士人工智能实验室 (IDSIA) 的科学主任，以及阿卜杜拉国王科技大学人工智能中心 (AI Initiative, KAUST) 的主任。他的工作对强化学习（Reinforcement Learning），元学习（Meta Learning），以及神经网络（Neural Network）等重要人工智能方向有着深刻的影响。</p><p>截止目前，Schmidhuber 教授的谷歌学术引用为 21 万，其中作为共同发明人的长短时记忆（LSTM）论文单篇引用过 9 万。他在 15 岁就希望能开发一种比它聪明并且能够自我完善的人工智能，然后他就可以退休了。DeepMind 创始初期四人中的两人以及他们招募的第一个人工智能博士都来自 Jürgen Schmidhuber 的实验室。</p><p>在 Jürgen 构想的这一社会中，所有的交流都是透明且易于解释的。他提到了一个被称作「Mindstorm」的概念，即当给定一个问题时，这个自然语言心智社会能够协同合作进行解答。</p><p>在这个过程中，社会中的每个成员可能会有不同的想法和视角，它们将收集并整合这些不同的思路，从而做出集体决策。</p><p>这种方式特别适合于解决那些单个智能体无法有效解决的问题。Jürgen 进一步举例说明，这种问题可以是编程性质的，如使用 Python 语言解决一个具体的编程难题。通过这种协同作用，智能体社会的智能集结，将能够实现超越个体能力的解决方案。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5cc7dc94e9a64bebb63187c960442abd~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1269&amp;h=635&amp;s=49620&amp;e=webp&amp;b=fdfaf9" referrerpolicy="no-referrer"><img alt="" height="401" src="https://oscimg.oschina.net/oscnet/up-0a2e1cb3557ba4e33b63ccceca6b4647eb2.png" width="800" referrerpolicy="no-referrer"></p><p>此次 MetaGPT 项目的迭代获得了 Jürgen 直接指导，其团队也在代码、写作、工程上做了大量支持。</p><p>接下来，本文将详细解析 MetaGPT 论文的更新内容，以便让读者能够更加深入地理解其细节。</p><p><strong>1、论文与框架更新</strong></p><p>论文 3.1 节更新：阐述了 MetaGPT 框架中的角色专业化设计和角色分工概念，说明了单个智能体在 MetaGPT 中的行为模式和 SOPs 下的组织方式。</p><p>论文 3.2 节更新：介绍 MetaGPT 框架中的通信机制，包括结构化通信接口设计和发布-订阅机制。</p><p>论文 3.3 节更新：引入了可执行反馈机制，它是一种在代码执行过程中进行持续迭代和自我纠正的机制。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/52272b7b6df4434589d9071492e7d736~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1267&amp;h=636&amp;s=82808&amp;e=webp&amp;b=fdfcfc" referrerpolicy="no-referrer"><img alt="" height="401" src="https://oscimg.oschina.net/oscnet/up-47bacc68b62b046bdc40b461241d7a1ab26.jpg" width="800" referrerpolicy="no-referrer"></p><p>Fig.2. 通信协议示例（左）和运行中可执行反馈的迭代编程示例（右）。左图：Agents 使用共享消息池发布结构化消息。它们还可以根据自己的配置订阅相关消息。右图：生成初始代码后，工程师 Agent 可执行代码并检查运行中是否报错。如果出现报错，Agent 会检查执行结果，并将它们与 PRD、系统设计和代码文件进行比较，进行代码的重写和优化。</p><p><strong>1.1、智能体通信协议</strong></p><p>目前大部分多智能体都是通过以自然语言为主的对话形式来完成协作，但这对于解决具体特定任务而言并不是最优的方式。</p><p>没有约束和特定要求的自然语言输出，可能会导致信息内容的失真或者语义焦点的偏移。</p><p>因此，结构化的通信内容和接口形式有助于智能体之间进行快速准确的任务要求理解，也有利于信息内容的最大化保留。参考人类 SOPs 中对不同岗位的角色要求，我们给每个角色设定了符合人类对应岗位专家的输出规范，要求智能体将原始自然语言信息转换为更结构化的表达（如下图所示），如数据结构、API 设计和时序图。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/39c4bc32ea9644b9b0f383b5b9810d81~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1267&amp;h=1235&amp;s=146554&amp;e=webp&amp;b=ddecfb" referrerpolicy="no-referrer"><img alt="" height="779" src="https://oscimg.oschina.net/oscnet/up-3cb7baa9146b4b2f65471d6d5f4e2f4f4a7.jpg" width="800" referrerpolicy="no-referrer"></p><p>Fig.3 MetaGPT 软件开发流程示意图，表明结构化的 SOPs 可以带来较好的效果 。更详细的演示见附录 B</p><p>在后续的实验中，我们对比了 MetaGPT 和 ChatDev（使用聊天形式的沟通协作机制）来进行软件开发的这一复杂任务的实际解决效果，结果说明结构化的通信接口设计对于智能体协作能带来显著效果。</p><p><strong>发布-订阅机制</strong></p><p>在多智能体的通信过程中，仅仅依赖 1v1 的单点通信方式不仅会加剧通信拓扑的复杂度，导致协作的效率低下，也会急剧增加开发成本。因此，我们通过【发布-订阅】的消息机制，在框架内实现了共享消息池和基于兴趣的订阅方式。</p><p>具体来说，环境提供共享的消息池，智能体可以从中直接获取信息，无需逐一询问其他智能体。与此同时，智能体可根据自己兴趣/关注的行为来进行消息的过滤和筛选，从而减少消息/记忆的过载。如图 3 所示，架构师主要关注产品经理的 PRD 文档输出，而对测试工程师的文档则关注较少。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4f4cb736da0047778cb331c48db14fb9~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1266&amp;h=705&amp;s=29794&amp;e=webp&amp;b=f9fbfe" referrerpolicy="no-referrer"><img alt="" height="445" src="https://oscimg.oschina.net/oscnet/up-fa141e11ff2fb59723d29e9be1259680890.jpg" width="800" referrerpolicy="no-referrer"></p><p><strong>1.2、可执行迭代反馈设计</strong></p><p>调试和执行反馈在日常编程任务中发挥着重要作用。然而，现有方法往往缺乏自我纠正机制，仅通过代码审查和评审机制进行代码可行性评估。为了进一步减少 LLM 在生成代码上的幻觉问题，我们引入了可执行反馈机制，对代码进行迭代改进。通过自动的代码执行测试结果反馈，进行代码可行性评估和判断，促进 LLM 进行自我的迭代和优化。如图 2 所示，工程师可根据代码执行结果持续更新代码，迭代测试，直到测试通过或者最大 N 次重试退出。</p><p><strong>2、实验更新</strong></p><p>在实验部分，我们增加了对 SOPs 引入多智能体框架效果的探索实验，和可执行迭代反馈带来的代码质量的提升实验。在数据集上：</p><ol><li>针对代码质量的效果评估：我们使用了两个公共基准数据集：HumanEval 和 MBPP。<br> 1）HumanEval 包括 164 个手写编程任务。这些任务包括功能说明、描述、参考代码和测试。<br> 2）MBPP 包含 427 个 Python 任务。这些任务涵盖核心概念和标准库功能，幷包括说明、参考代码和自动测试。</li><li>我们提出了更具有挑战性的软件开发任务的基准数据集 SoftwareDev：我们的 SoftwareDev 数据集收集了 70 个具有代表性的软件开发任务实例，每个实例都有自己的任务提示（见论文表 5）。这些任务的范围多种多样（见论文图 5），如迷你游戏、图像处理算法、数据可视化等。它们为真实的开发任务提供了一个强大的测试平台。与之前的数据集不同，SoftwareDev 侧重于工程方面。在比较中，我们随机选择了七个具有代表性的任务进行评估。</li></ol><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a63997ca887a49a1a619d93e208c164d~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=703&amp;h=727&amp;s=87524&amp;e=webp&amp;b=fbfafa" referrerpolicy="no-referrer"><img alt="" height="620" src="https://oscimg.oschina.net/oscnet/up-762eec7feede0d100b7ae1c5039f8331f71.jpg" width="600" referrerpolicy="no-referrer"></p><p><strong>2.1、可执行迭代反馈设计</strong></p><p>图 4 表明，MetaGPT 在 HumanEval 和 MBPP 基准测试中均优于之前的所有方法。当 MetaGPT（使用 GPT-4 作为基础模型），与 GPT-4 相比，它在 HumanEval 基准测试中的 Pass @1 显著提高。它在这两个公共基准测试中达到了 85.9% 和 87.7%（考虑到实验成本，部分模型的数值结果直接使用的 Dong et al. (2023). 所提供的结果 [6]）。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6749bae368dd4f4d86ac44a57ace9c82~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1280&amp;h=382&amp;s=31468&amp;e=webp&amp;b=fdfdfd" referrerpolicy="no-referrer"><img alt="" height="239" src="https://oscimg.oschina.net/oscnet/up-55fc3e480ea87fb5c5872f15472848bf135.jpg" width="800" referrerpolicy="no-referrer"></p><p>Figure 4: Pass rates on the MBPP and HumanEval with a single attempt.</p><p><strong>2.2、软件开发任务数据集 &amp; 评价指标</strong></p><p>对于 SoftwareDev，我们优先考虑生成项目的实际可用性，并通过人工评估（A、E）或统计分析（B、C、D）来评估性能，我们通过可视化示例展示了 MetaGPT 的自主软件生成能力（论文图 5）。有关其他实验和分析，可参阅论文附录 C：</p><p>（A）可执行性：该指标将生成代码从 1（失败/无功能）到 4（无缺陷）进行评级。1 代表无功能，2 代表可运行但不完美，3 代表接近完美，4 代表无缺陷。</p><p>（B）成本：这里的成本评估包括（1）项目运行时间（2）Token 消耗量和（3）实际费用。</p><p>（C）代码统计信息：包括（1）代码文件数量（2）每个文件的平均代码行数，以及（3）总代码行数。</p><p>（D）生产效率：基本定义为 Token 使用量除以代码行数，即每行代码消耗的 Token，该数值越小说明代码生产效率越高。</p><p>（E）人工修订成本：以确保代码顺利运行所需的修订轮数来量化，这表示人工干预的频率，如调试或导入依赖等修订。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7cce3f4c622541ea856eb3dc0e1fd9b8~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1266&amp;h=761&amp;s=58372&amp;e=webp&amp;b=f8f7f7" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-58d8c9338be9e954eee491611053ad8b451.png" width="800" referrerpolicy="no-referrer"></p><p><strong>2.3、SOPs vs ChatChain</strong></p><p>在解决特定任务的场景中，为了探索 SOPs 对多智能体协作的效果，我们选择了开源工作中支持软件开发任务的智能体框架 ChatDev 作为实验比较对象。ChatDev 是基于 ChatChain 和软件开发瀑布流的角色分工进行智能体组织和协作的框架。我们从 SoftwareDev 选择了 7 个任务进行对比，并比较了上述的相关指标来说明差异。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c3560be06bd46feab9b37a51b03e6aa~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=1267&amp;h=741&amp;s=67220&amp;e=webp&amp;b=ffffff" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-06aa7e7223004b9c3b2ca38b88efa69b92d.png" width="800" referrerpolicy="no-referrer"></p><p>如论文表 1 所示，在具有挑战性的 SoftwareDev 数据集上，MetaGPT 几乎在所有指标上都优于 ChatDev。</p><p>例如：在可执行性方面，MetaGPT 得到了 3.75 分，非常接近 4 分（完美无缺）。此外，它花费的时间（503 秒）也明显少于 ChatDev。</p><p>在代码统计和人工修改的成本上也明显优于 ChatDev。虽然 MetaGPT 需要更多的 Token（24,613 或 31,255，而 ChatDev 为 19,292 ），但它只需要 126.5/124.3 个 Tokens 就能生成一行代码。相比之下，ChatDev 使用了 248.9 个 Tokens。</p><p>这些结果凸显了 SOPs 在多智能体协作中的优势。</p><p><img alt="" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2c8b076075554df5a425342a9c1940e7~tplv-k3u1fbpfcp-jj-mark:0:0:0:0:q75.image#?w=817&amp;h=263&amp;s=24046&amp;e=webp&amp;b=f4f4f4" referrerpolicy="no-referrer"><img alt="" height="258" src="https://oscimg.oschina.net/oscnet/up-b7e033a3dab2d9dbc88391df2712d572478.jpg" width="800" referrerpolicy="no-referrer"></p><p><strong>3、致谢</strong></p><p>感谢来自 KAUST AI 中心的执行秘书 Sarah Salhi，博士后王宇辉，以及博士生王文一对于此论文提供的建议以及帮助。</p><p>[1] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Farxiv.org%252Fpdf%252F2308.00352.pdf" target="_blank">arxiv.org/pdf/2308.00…</a></p><p>[2] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fen.wikipedia.org%252Fwiki%252FSociety_of_Mind" target="_blank">en.wikipedia.org/wiki/Societ…</a></p><p>[3] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Farxiv.org%252Fpdf%252F2305.17066.pdf" target="_blank">arxiv.org/pdf/2305.17…</a></p><p>[4] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fen.wikipedia.org%252Fwiki%252FUniversal_Turing_machine" target="_blank">en.wikipedia.org/wiki/Univer…</a></p><p>[5] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fen.wikipedia.org%252Fwiki%252FG%2525C3%2525B6del_machine" target="_blank">en.wikipedia.org/wiki/Gödel_…</a></p><p>[6] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Farxiv.org%252Fabs%252F2304.07590" target="_blank">arxiv.org/abs/2304.07…</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 10:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265625</guid>
            <link>https://www.oschina.net/news/265625</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[华为与西工大合作，发布首款流体力学大模型「秦岭・翱翔」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>华为近日宣布，与西北工业大学联合研发的首个面向飞行器的流体力学大模型「秦岭・翱翔」现已正式发布。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ff4d245868c9104fe5ffe5ca0fd9c6111a1.png" referrerpolicy="no-referrer"></p><p>秦岭・翱翔大模型是西工大流体力学智能化国际联合研究所携手华为 AI4Sci Lab 在国产开源流体计算软件风雷的基础上，依托升腾 AI 澎湃算力及升思 MindSpore AI 框架共同研发的面向飞行器流体仿真的智能化模型。</p><p>大模型通过打造智能通用的流体力学软件平台与流体工业全场景应用底座，旨在实现全场景流场准确预测。同时结合业界领先的数据同化、AI 湍流模型、流场快速预测等技术，支撑流体力学大模型的基础构架。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d498c2db0add1f15cf241f0aff43d998bfb.png" referrerpolicy="no-referrer"></p><p>具体来说，大模型采用自研多级分布式并行自适应框架，多层级融合流体力学经典理论和人工智能方法，构造数学物理关联特征、开展多范式一体化建模、搭建不变性可实现性多模态统一框架。同时，在模型算法设计、混合精度加速，以及数值求解耦合并行优化等方面进行了创新与验证，实现了高置信度流场重构、全速域湍流场求解和复杂流场近实时预测。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 08:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265612</guid>
            <link>https://www.oschina.net/news/265612</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[著名硬件黑客黄欣国：美国限制 RISC-V 只会适得其反]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美国立法者继续施压限制中国使用 RISC-V 的举措已经引起质疑。著名硬件黑客黄欣国近日就针对此事，写了一封至白宫、<span style="background-color:#ffffff">美国商务部和国会议员</span>的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bunniestudios.com%2Fblog%2F%3Fp%3D6862" target="_blank">公开信</a>，敦促不要对 RISC-V 技术的共享施加任何限制。</span></p><p><span style="color:#000000">他认为，增添限制只会减少美国对一项重要新兴技术的参与，同时巩固 ARM 作为嵌入式 CPU 近乎垄断的现有供应商的地位。</span></p><blockquote><p><span style="color:#000000">我是一名出生于密歇根州的美国人，拥有麻省理工学院电子工程博士学位。我还是一个设计和制造电子产品的小企业主。我写信敦促你们不要对 RISC-V 技术的共享施加任何限制。</span></p><p><span style="color:#000000">我的产品 CPU 基于开源的 RISC-V 标准。RISC-V 的开放性特别有利于像我这样的小企业。我从开源社区获得工具和设计，并将自己的改进回馈给社区。无障碍地参与这个充满活力的开源生态系统可以降低开销，使我能够在残酷的硬件行业中保持竞争力。</span></p></blockquote><p><span style="color:#000000">作为一个全球性项目，RISC-V 并不是美国的单独所有，其很多贡献都来自欧盟、印度、中国等地。黄欣国指出，譬如他所使用的&nbsp;VexRiscv，就是由欧盟开发的一个 RISC-V 实现。「<strong>对美国人的参与设置任何障碍都只会延缓美国在开发和采用该技术方面的进展。其效果将与立法者的初衷背道而驰</strong>」。另一个微妙之处在于，RISC-V 只是一种标准，对既定标准的使用进行监管也不切实际。</span></p><p><img height="318" src="https://oscimg.oschina.net/oscnet/up-211d8f4d387a1aadc108064451b71db8e29.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">黄欣国认为，美国立法者和政策制定者普遍对开源缺乏了解。并<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F11%2F07%2Fproposed_restrictions_riscv" target="_blank">表示</a>他最大的担忧在于，美国的这一限制可能会造成寒蝉效应，迫使企业和组织决定不采用或停止为 RISC-V 做贡献，暂停 RISC-V 生态系统的参与。因为所面临的违反美国出口管制的风险太大 —— 包括最高 25 万美元的民事处罚、20 年监禁的刑事处罚和最高 100 万美元的罚款。</span></p><p><span style="color:#000000">「这将使 RISC-V 世界变得更加匮乏：至少来自美国人的创新和贡献会减少，其他人使用它的动力以及开发它的理由也会减少......这将使美国失去强有力的第三选择 ISA。」</span></p><p><span style="color:#000000">此外，黄欣国还认为，美国的这一限制很大程度上将促使中国结束对西方技术的依赖，转而把钱花在自研芯片上。他在信中总结称：</span></p><blockquote><p><span style="color:#000000">总之，对美国人共享 RISC-V 技术施加任何限制都只会削弱美国作为技术领导者的作用。过于宽泛的限制可能会剥夺教育工作者在美国校园向学生传授计算机知识时使用的流行工具，因为他们担心也会意外地向被禁运的实体传授知识。即使是对 RISC-V 的狭义限制，也会使那些有可能进入中国市场的美国科技公司失去获得高性价比、高性能 CPU 技术的机会，迫使它们向近乎垄断的现有供应商 ARM Holdings plc 支付专利费，而 ARM Holdings plc 并非美国公司。这削弱了美国的竞争力，最终损害了美国的最佳利益。</span></p><p><span style="color:#000000">如果政府认为 RISC-V 是一项对美国经济和军事利益至关重要的技术，值得特别关注，那么它就不应该试图通过联邦强制许可制度来限制 RISC-V 的表达，而应该投资于开发更多美国本土 RISC-V 芯片制造商成功案例的项目。在美国现有的法律框架和 RISC-V 合同框架内，公司可以选择开发 RISC-V CPU 的专有实施方案。在美国，有许多公司在开放标准的界限内游刃有余，并有在不需要联邦指导的情况下取得成功的先例： Intel 和 AMD 都是美国工业巨头，它们都是通过专有技术实现原本公开的"x86"计算机标准而建立起来的。美国需要的是对 ARM Holdings plc 的垄断做出回应，而这一回应来自于对接受 RISC-V 的美国公司的投资。</span></p><p><span style="color:#000000">拜登总统，我恳请您：对美国的创新充满信心。相信美国的价值观。不要对共享 RISC-V 技术施加任何限制。我们可以共同努力，创造更多美国芯片制造商的成功案例，同时拥抱言论自由的美国价值观！</span></p></blockquote><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bunniestudios.com%2Fblog%2F%3Fp%3D6862" target="_blank"><strong>公开信地址&nbsp;</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 08:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265608/bunnie-restrictions-riscv</guid>
            <link>https://www.oschina.net/news/265608/bunnie-restrictions-riscv</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「开源 Windows」 ReactOS 改进 UEFI 引导，支持更多硬件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>ReactOS 开发团队<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Freactos.org%2Fblogs%2Fnewsletter-103%2F" target="_blank">宣布</a></u> 64 位（AMD64 和 ARM64）UEFI 引导功能现在可以在更多设备上使用了。这些设备包括个人电脑、诺基亚的 Lumia、苹果的 iPhone 和 Valve 的 Steam Deck 等。</p><p><img src="https://static.oschina.net/uploads/space/2023/1108/144126_Cm3T_2720166.png" referrerpolicy="no-referrer"></p><p>从今年年初开始，开发团队就着手将 ReactOS 的默认引导加载程序 FreeLoader 过渡到支持 x86 和 AMD64 以及 ARM32 和 ARM64 的 UEFI。ReactOS 核心开发者 Hermès 一直在开发一个用于传递 UEFI 帧缓冲区信息的系统，使 Windows XP 可以在 UEFI 系统上运行，而 Justin Miller (TheDarkFire) 则一直在开发 UEFI FreeLoader 构建。</p><p>除了支持引导 ReactOS 外，团队还在开发其他功能，如 EFI 连锁加载和 FreeLoader 的 bootmgfw 兼容构建。这些功能将增加引导管理功能，并允许现代 Windows 系统引导用户最喜欢的引导加载器。</p><p>除此之外，ReactOS 团队还表示正在慢慢改善 NT6+ 应用程序的兼容性和支持。NT6+ 是一个术语，包括基于较新 NT 架构设计的 Vista、7、8、8.1、10 和 11 等 Windows 操作系统。</p><p>由于许多软件开发商不再支持旧版本的 Windows 系统，因此日常使用的大多数应用程序都无法在 ReactOS 上运行。不过，这种情况将会改变。</p><p>目前，ReactOS 主要局限于用户模式，内核模式的升级计划稍后进行。目前还没有预计的发布时间。</p><blockquote><p>ReactOS 项目的主要目标就是提供一个与 Windows 环境二进制兼容的操作系统。它能让你的 Windows 应用程序和驱动程序如同在 Windows 上一样运行。</p><p>此外，由于应用了 Windows 操作系统的外观特性，已经熟悉 Windows 用户界面的用户在使用 ReactOS 时将驾轻就熟。ReactOS 的终极目标是使你能够在感觉不到最终用户体验变化的前提下，使用 ReactOS 来替代 Windows。</p><p><img alt="" src="https://static.oschina.net/uploads/space/2019/0306/073550_CIxD_2720166.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 06:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265587</guid>
            <link>https://www.oschina.net/news/265587</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[解密 deepin-IDE：如何实现简单灵活的调试技术？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p>前不久深度科技旗下 deepin 社区发布了自己的 IDE：deepin-IDE，得到了全网用户尤其是开源社区用户的广泛关注，目前在 GitHub（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flinuxdeepin%2Fdeepin-unioncode" target="_blank">https://github.com/linuxdeepin/deepin-unioncode</a>）仓库的 star 数量已经达到 600 多个，说明大家的热情还是很高涨的。</p><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922163311.png" referrerpolicy="no-referrer"></div><p>为了从技术层面给大家的热情做一个反馈，本文试着将 deepin-IDE 内部的一些实现方法进行分享，希望能够解答友友们的疑惑并得到积极的反馈。</p><p>本篇挑了大家关心的「调试」部分进行分享。需要说明的是，deepin-IDE 的调试功能是选用 DAP（Debug Adapter Protocol ）调试适配协议实现的，所以整体架构是围绕该协议搭建的，至于<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>具体是什么，让我们带着问号往下看。</p><h2>什么是<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>协议</h2><p><code>DAP</code><span>&nbsp;</span>即调试适配协议 ( Debug Adapter Protocol )，顾名思义，它是用来对多种调试器进行抽象统一的适配层，将原有<span>&nbsp;</span><code>IDE</code><span>&nbsp;</span>和调试工具直接交互的模式更改为和<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>进行交互。该模式可以让<span>&nbsp;</span><code>IDE</code><span>&nbsp;</span>集成多种调试器变得更简单，且灵活性更好。</p><p>在<span>&nbsp;</span><code>IDE</code><span>&nbsp;</span>中的调试功能有许多小功能组成，包括单步执行、断点、查看变量值等，常规的实现方式是在每个<span>&nbsp;</span><code>IDE</code><span>&nbsp;</span>中去实现这些逻辑，且因为调试工具的接口不同，还需要为每个调试工具做一些适配工作，这将导致大量且重复的工作，如下图所示：</p><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922164609.png" referrerpolicy="no-referrer"></div><p>调试适配器协议背后的想法是标准化一个抽象协议，用于开发工具如何与具体调试器通信。这个思想和<span>&nbsp;</span><code>LSP</code>(Language Server Protocol) 和<span>&nbsp;</span><code>BSP</code>(Build Server Protocol) 类似，都是通过协议去统一相同功能在不同工具之间的差异性。其所处位置如下图所示，其中左边为不同的开发工具，右边为不能同的调试器，不同于开发工具和调试器直接交互的方式，<code>DAP</code><span>&nbsp;</span>将这些交互统一了起来，让开发工具和调试工具都面向<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>编程。</p><p>上图中的交互是通过协议进行，所以不会像通过<span>&nbsp;</span><code>API</code><span>&nbsp;</span>的方式存在语言限制，可以更好的适应调试器的集成。</p><h2>DAP 如何工作</h2><p>以下部分解释了开发工具（例如<span>&nbsp;</span><code>IDE</code><span>&nbsp;</span>或编辑器）和调试适配器之间的交互，包括具体的协议格式说明、交互流程等。</p><h3>调试会话</h3><p>开发工具有两种基础的方式和调试器进行交互，分别是:</p><p>【单会话模式】</p><p>在这种模式下，开发工具启动一个调试适配器作为一个单独的进程并且通过标准的 std 接口进行通信。在调试会话的结束时调试适配器就终止，对于当前的调试会话，开发工具往往需要实现多个调试适配。</p><p>【多会话模式】</p><p>在这种模式下，开发工具不会启动调试适配器，而是假定它已经在运行并且会在特定端口上侦听连接尝试，对于每个调试会话，开发工具在特定端口上启动一个新的通信会话并在会话结束时断开连接。</p><p>在与调试适配器建立连接后，开发工具和调试适配器之间通过基础协议进行通信。</p><h3>基础协议</h3><p>基础协议由两部分组成，包括头和内容 (类似于 HTTP)，头部和内容部分通过「\r\n」进行分割：</p><p>【协议头】</p><p>协议头部分由字段组成， 每个头字段由一个键和一个值组成，用‘:’（一个冒号和一个空格）分隔， 每个头字段都以「\r\n「结尾。由于最后一个协议头字段和整个协议头本身都以 \r\n 终止，并且由于协议头是强制性的，所以消息的内容部分总是在（并唯一标识）两个 \r\n 序列之前。当前只支持一个协议头字段：</p><table style="border-spacing:0px; max-width:100%"><tbody><tr><th style="text-align:left">头字段名</th><th style="text-align:left">值类型</th><th style="text-align:left">描述</th></tr></tbody><tbody><tr><td style="border-style:double; border-width:1px; text-align:left">Content-Length</td><td style="border-style:double; border-width:1px; text-align:left">数字</td><td style="border-style:double; border-width:1px; text-align:left">这个字段是必须的，用来记录内容字段的长度，单位是字节。</td></tr></tbody></table><p>协议头部分使用的是「ASCII」编码。</p><p>【内容部分】</p><p>内容部分包含了实际要传输的数据，这些数据用<span>&nbsp;</span><code>JSON</code><span>&nbsp;</span>格式来描述请求、响应和事件。内容部分用的是<span>&nbsp;</span><code>utf-8</code><span>&nbsp;</span>编码</p><p>为了有个具体的认识，这里举个简单的例子。在调试过程中，开发人员经常会使用到下一步操作，在<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>中其协议为：</p><div><pre><code class="language-plain">Content-Length: 119\r\n
\r\n
{
 &nbsp; &nbsp;"seq": 153,
 &nbsp; &nbsp;"type": "request",
 &nbsp; &nbsp;"command": "next",
 &nbsp; &nbsp;"arguments": {
 &nbsp; &nbsp; &nbsp; &nbsp;"threadId": 3
 &nbsp;  }
}
</code></pre></div><p>类型是「请求」，命令是下一步，参数部分可以携带多个，这里是用的线程 Id。 这个协议看着挺简单的，是吧？接下来就讲讲如何使用它。</p><h3>使用方法</h3><p>详细的使用方法这里就不涉及，因为用一个时序图就可以说明：</p><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922164954.png" referrerpolicy="no-referrer"></div><p>可以看到，初始化、请求、响应等必要的步骤都在图中。其中调试适配器可以理解为调试器的抽象，调试功能的最终执行者是由对应语言的调试工具实现的。</p><h2>在 deepin-IDE 中的实现</h2><p>在 deepin-IDE 中，调试功能的实现是结合<span>&nbsp;</span><code>cppdap</code><span>&nbsp;</span>+<span>&nbsp;</span><code>debugmanager</code><span>&nbsp;</span>实现的。</p><p><code>cppdap</code><span>&nbsp;</span>是一款基于 C++ 开发的<span>&nbsp;</span><code>SDK</code>，基本实现了<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>的全量协议。 deepin-IDE 的客户端和服务端都是应用的该<span>&nbsp;</span><code>SDK</code><span>&nbsp;</span>进行开发，据此可以实现以下功能：</p><p>1.通信功能，包括服务端的 TCP 监听，客户端的 TCP 连接等；</p><p>2.<code>DAP</code><span>&nbsp;</span>协议的封装，并实现协议的串行化和解串行化；</p><p>3.提供注册回调功能，从而可以在回调内处理各种事件、请求等；</p><p>它的层级结构如下：</p><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922165226.png" referrerpolicy="no-referrer"></div><p>用<span>&nbsp;</span><code>cppdap</code><span>&nbsp;</span>可以减少客户端和服务端不少工作量，也统一了两边的协议数据。而 debugmanager 可以理解为调试器的抽象，包含所有必要的调试要素。整体结构如下：</p><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922165251.png" referrerpolicy="no-referrer"></div><p>左边是客户端，右边是服务端，内部实现如下：</p><h3>客户端实现</h3><p>客户端包含了两个个主要功能，一个是和<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>服务端进行交互，发送调试命令或处理返回的数据；另一个是将<code>DAP</code><span>&nbsp;</span>数据转换后显示到用户界面，并响应界面发送的事件。概括起来就包含业务模块、事件模块、<code>DAP</code><span>&nbsp;</span>模块和界面 4 个部分。</p><p>业务模块</p><ul><li><p>业务模块包含了插件类、调试参数、调试管理类等，其中插件类负责插件加载、初始化、获取上下文等，调试管理类用来组合事件、<code>DAP</code>、界面几个模块。 事件模块</p></li><li><p>事件模块包含两个子模块，分别是事件发送和事件接收，比如页面跳转事件、添加\移除断点事件等。<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>模块</p></li></ul><p><code>DAP</code><span>&nbsp;</span>模块基于<span>&nbsp;</span><code>cppdap</code><span>&nbsp;</span>开发，采用层级结构，底层是原始<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>协议封装，中间层是针对业务做的进一步封装，简化了向外提供的接口，最上层是对整个调试功能的整合，包括数据缓存、界面元素、命令收发。</p><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922165331.png" referrerpolicy="no-referrer"></div><ul><li>界面部分，界面模块包含堆栈界面、变量界面、断点列表、异步对话框等，用于<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>的数据展示。</li></ul><div><img src="https://wiki.deepin.org/05_HOW-TO/deepin-unioncode/img-20230922165342.png" referrerpolicy="no-referrer"></div><ul><li>如上图所示，灰色部分为<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>客户端的界面呈现。</li></ul><h3>服务端实现</h3><p>服务端的功能分为两个部分，一个是基于<span>&nbsp;</span><code>cppdap</code><span>&nbsp;</span>实现命令的收发，另一个是与<span>&nbsp;</span><code>gdb</code><span>&nbsp;</span>交互，实现调试程序的启动、暂停、退出等一系列动作。</p><p>DAP</p><ul><li><p>和客户端一样，服务端也是基于<code>cppdap</code>实现的通信和协议封装和解析。 调试工具</p></li><li><p>和调试工具的交互是通过进程调用的方式实现，接收进程输出得到返回信息。如果调试工具本身支持<span>&nbsp;</span><code>DAP</code><span>&nbsp;</span>协议，则可以直接交互。</p></li></ul><p>至此，本次的分享就到这儿啦！不知道你对<span>&nbsp;</span><code>deepin-IDE</code><span>&nbsp;</span>中的调试功能有所了解了吗？</p><p>温馨提示，deepin-IDE 还包含很多有意思的功能，如果大家感兴趣可以积极反馈，后续有机会再进行分享。</p><h2>参考文档</h2><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmicrosoft.github.io%2Fdebug-adapter-protocol%2Foverview" target="_blank">debug-adapter-protocol</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwiki.deepin.org%2Fzh%2F05_HOW-TO%2F02_%25E5%25BC%2580%25E5%258F%2591%25E7%259B%25B8%25E5%2585%25B3%2Fdeepin-unioncode" target="_blank">deepin-IDE 使用手册</a></p><p>内容来源：deepin 社区</p><p>内容作者：deepin-mozart、toberyan</p></div></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 06:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265585/deepin-ide-debug</guid>
            <link>https://www.oschina.net/news/265585/deepin-ide-debug</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果暂停 iPhone 和 Mac 的系统新功能开发工作，专注修复 bug]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>彭博社报道称，苹果公司罕见地暂停了明年 iPhone、iPad、Mac 和其他设备的软件更新开发工作，以便根除代码中的 bug。</p><p><img src="https://static.oschina.net/uploads/space/2023/1108/141600_8Btu_2720166.png" referrerpolicy="no-referrer"></p><p>via <em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-07%2Fapple-delays-work-on-ios-18-macos-15-watchos-11-due-to-problems-with-bugs" target="_blank">彭博社</a></u></em></p><p>苹果上周在内部向员工宣布了这一决定，<strong>公司工程师现在的主要任务不是添加新功能而是修复 bug 和改进性能</strong>。</p><p>在准备明年发布的新操作系统时，软件工程管理团队在内部测试中发现了太多的<strong>"escapes"</strong>问题（内部测试期间遗漏的错误）。由于数千名不同的苹果员工在各种操作系统和设备上工作，这些操作系统和设备需要无缝协作，因此很容易出现故障。</p><p>因此他们采取了不同寻常的做法，暂停新功能开发一周，专注于修 bug。虽然暂停一周，但发版时间仍按原计划进行。</p><p>目前还不清楚此次暂停开发一周对上述系统来说存在哪些影响，彭博社称这是苹果非常罕见的举动。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 06:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265579</guid>
            <link>https://www.oschina.net/news/265579</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 跨平台终端仿真软件 quardCRT]]>
            </title>
            <description>
                <![CDATA[<p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT%2Factions%2Fworkflows%2Fwindows.yml"><img src="https://img.shields.io/github/actions/workflow/status/qqxiaoming/quardCRT/windows.yml?branch=main&amp;logo=windows" alt="Windows ci" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT%2Factions%2Fworkflows%2Flinux.yml"><img src="https://img.shields.io/github/actions/workflow/status/qqxiaoming/quardCRT/linux.yml?branch=main&amp;logo=linux" alt="Linux ci" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT%2Factions%2Fworkflows%2Fmacos.yml"><img src="https://img.shields.io/github/actions/workflow/status/qqxiaoming/quardCRT/macos.yml?branch=main&amp;logo=apple" alt="Macos ci" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.codefactor.io%2Frepository%2Fgithub%2Fqqxiaoming%2FquardCRT"><img src="https://img.shields.io/codefactor/grade/github/qqxiaoming/quardCRT.svg?logo=codefactor" alt="CodeFactor" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT"><img src="https://img.shields.io/github/license/qqxiaoming/quardCRT.svg?colorB=f48041&amp;logo=gnu" alt="License" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT%2Freleases"><img src="https://img.shields.io/github/tag/QQxiaoming/quardCRT.svg?logo=git" alt="GitHub tag (latest SemVer)" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT%2Freleases"><img src="https://img.shields.io/github/downloads/QQxiaoming/quardCRT/total.svg?logo=pinboard" alt="GitHub All Releases" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT"><img src="https://img.shields.io/github/stars/QQxiaoming/quardCRT.svg?logo=github" alt="GitHub stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FQQxiaoming%2FquardCRT"><img src="https://img.shields.io/github/forks/QQxiaoming/quardCRT.svg?logo=github" alt="GitHub forks" referrerpolicy="no-referrer"></a><a href="https://gitee.com/QQxiaoming/quardCRT"><img src="https://gitee.com/QQxiaoming/quardCRT/badge/star.svg?theme=dark" alt="Gitee stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/QQxiaoming/quardCRT"><img src="https://gitee.com/QQxiaoming/quardCRT/badge/fork.svg?theme=dark" alt="Gitee forks" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-quardcrt" class="anchor" href="https://gitee.com/QQxiaoming/quardCRT#quardcrt"></a>quardCRT</h1><p><a href="https://gitee.com/QQxiaoming/quardCRT/blob/main/README.md">English</a> | 简体中文</p><p>quardCRT 一款终端仿真软件，支持多种后端协议，无依赖跨平台使用，windows/linux/mac 使用体验完全一致，支持多标签页和历史记录管理。</p><table><thead><tr><th align="center"><img src="https://gitee.com/QQxiaoming/quardCRT/raw/main/docs/windows.png" alt="img2" referrerpolicy="no-referrer"></th></tr></thead><tbody><tr><td align="center">Windows</td></tr><tr><td align="center"><img src="https://gitee.com/QQxiaoming/quardCRT/raw/main/docs/macos.png" alt="img1" referrerpolicy="no-referrer"></td></tr><tr><td align="center">MacOS</td></tr><tr><td align="center"><img src="https://gitee.com/QQxiaoming/quardCRT/raw/main/docs/linux.png" alt="img3" referrerpolicy="no-referrer"></td></tr><tr><td align="center">Linux</td></tr></tbody></table><p>其他协议选择界面：</p><p><img src="https://gitee.com/QQxiaoming/quardCRT/raw/main/docs/img.png" alt="img" referrerpolicy="no-referrer"></p><h2><a id="user-content-功能描述" class="anchor" href="https://gitee.com/QQxiaoming/quardCRT#%E5%8A%9F%E8%83%BD%E6%8F%8F%E8%BF%B0"></a>功能描述</h2><ul><li><p>目前支持的终端协议包括：</p><ul><li>telnet (支持带 websocket 封装)</li><li>serial</li><li>loaclshell</li><li>rawsocket</li><li>windows:NamedPipe（linux/macos:unix domain socket）</li></ul></li><li><p>多标签页管理，标签页克隆，标签页拖拽排序</p></li><li><p>双列分屏</p></li><li><p>工作目录书签</p></li><li><p>自动化发送</p></li><li><p>HEX 显示</p></li><li><p>会话记录管理</p></li><li><p>终端样式配置（配色方案，字体）</p></li><li><p>终端背景图片配置（支持透明度设置，支持 gif 动画和视频）</p></li><li><p>终端滚动行数设置</p></li><li><p>支持深色/浅色主题</p></li><li><p>支持多语言（中文/英文/日文）</p></li></ul><h2><a id="user-content-贡献" class="anchor" href="https://gitee.com/QQxiaoming/quardCRT#%E8%B4%A1%E7%8C%AE"></a>贡献</h2><p>如果您对本项目有建议或想法，欢迎在 GitHub 或 Gitee 上提交 issue 和 pull requests。</p><p>目前项目建议使用版本 Qt6.2.0 及更高版本。</p><h2><a id="user-content-特别" class="anchor" href="https://gitee.com/QQxiaoming/quardCRT#%E7%89%B9%E5%88%AB"></a>特别</h2><p>项目目前为个人业余时间开发，为提高开发效率，本项目较为大量的使用了 GitHub Copilot 协助代码编写，部分代码的人类可读性可能不是很好，作者也会尽量在后续版本中进行优化。</p><h2><a id="user-content-感谢" class="anchor" href="https://gitee.com/QQxiaoming/quardCRT#%E6%84%9F%E8%B0%A2"></a>感谢</h2><p>本项目代码引用或部份参考或依赖了以下开源项目，项目完全尊重原项目开源协议，并在此表示感谢。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FColinDuquesnoy%2FQDarkStyleSheet">QDarkStyleSheet</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdridk%2FQFontIcon">QFontIcon</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fsilderan%2FQTelnet">QTelnet</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flxqt%2Fqtermwidget">qtermwidget</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkafeg%2Fptyqt">ptyqt</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbitmeal%2Fargv_split">argv_split</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmbadolato%2FiTerm2-Color-Schemes">iTerm2-Color-Schemes</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Frprichard%2Fwinpty">winpty</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FSM-nzberg%2FQtFancyTabWidget">QtFancyTabWidget</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fteknoraver%2Fqtftp">qtftp</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FJuliaStrings%2Futf8proc">utf8proc</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ffcitx%2Ffcitx-qt5">fcitx-qt5</a></li></ul>]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 06:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/QQxiaoming/quardCRT</guid>
            <link>https://gitee.com/QQxiaoming/quardCRT</link>
        </item>
        <item>
            <title>
                <![CDATA[极致性能优化：前端 SSR 渲染利器 Qwik.js]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>引言</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>前端性能已成为网站和应用成功的关键要素之一。用户期望快速加载的页面和流畅的交互，而前端框架的选择对于实现这些目标至关重要。然而，传统的前端框架在某些情况下可能面临性能挑战且存在技术壁垒。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在这个充满挑战的背景下，我们引入了 Qwik.js 框架。Qwik.js 不仅是一个前端框架，更是一种前端性能的终极解决方案。它不仅提供了卓越的性能，还以其独特的特点和优势脱颖而出。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>让我们一起深入探索 Qwik.js，发现它如何超越传统，成为前端性能优化的新标杆。</span></span></span></p><span id="OSC_h1_2"></span><h1><span><span><span>一、现有框架的问题</span></span></span></h1><span id="OSC_h4_3"></span><h4><span>1.</span><span><span><span><span>传统 CSR 方案</span></span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>慢加载时间：</span></strong></span></span><span><span><span> CSR 技术通常要求在浏览器中加载和渲染整个页面，这导致初始页面加载时间较长。用户必须等待页面完全加载才能进行交互。 </span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>搜索引擎优化（SEO）问题：</span></strong></span></span><span><span><span> 由于页面内容是在客户端生成的，搜索引擎爬虫可能无法正确解析和索引页面内容，这影响了网站的 SEO 效果。 </span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>不利于低带宽用户：</span></strong></span></span><span><span><span> 对于低带宽用户或网络条件较差的用户，CSR 页面加载时间更长，用户体验更差。 </span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>首屏渲染延迟：</span></strong></span></span><span><span><span> CSR 通常需要等待 JavaScript 文件的下载和执行，这导致了首屏渲染的延迟，影响了用户的第一印象。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>问题分析</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>A. 渲染阶段耗时分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="108" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-13xZmbiiPDHyfVKHl.png" width="588" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>B. 请求链路分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="311" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-14Jn48bC9MLjg7uj48.png" width="291" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>C. 浏览器执行渲染分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="230" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-15HAl9koUb6m9MG98.png" width="345" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h4_4"></span><h4><span><span><span>2. 传统 SSR 方案</span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>复杂的水合过程：</span></strong></span></span><span><span><span> 涉及复杂的水合过程，包括将数据传输到客户端并在客户端重新渲染页面。这增加了页面加载时间和网络开销。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>A. 请求链路分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="366" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-27a6p7RKalKkQgqE12.png" width="275" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>B. 浏览器执行渲染分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="236" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-23GQJadOUFvz9gVjT.png" width="387" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h4_5"></span><h4><span><span><span>什么是水合（Hydration）？</span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>"hydration"（水合）是指通过客户端 JavaScript 将静态 HTML 网页转化为动态网页的过程，以实现对 HTML 元素的事件处理。这个过程可以通过将事件处理程序附加到 HTML 元素上来完成</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="304" src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F4f48568655904e4586ba34b413beb790?width=580" width="390" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>深入了解水合（hydration）过程，水合的难点在于知道我们需要什么事件处理程序以及它们应该附加到哪里。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>WHAT（什么）</span></strong></span></span><span><span><span>：事件处理程序是一个封闭包，包含了事件处理程序的行为。它定义了当用户触发此事件时应该发生什么。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>WHERE（哪里）</span></strong></span></span><span><span><span>：指的是需要将 WHAT（事件处理程序）附加到的 DOM 元素的位置，这包括了事件类型。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>更复杂的部分在于，WHAT（事件处理程序）是一个封闭包，它封闭了 APP_STATE（应用程序状态）和 FRAMEWORK_STATE（框架内部状态）：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>APP_STATE（应用程序状态）</span></strong></span></span><span><span><span>：这是应用程序的状态。APP_STATE 通常是人们所说的状态。没有 APP_STATE，您的应用程序将无法向用户展示任何动态内容。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>FRAMEWORK_STATE（框架内部状态）</span></strong></span></span><span><span><span>：这是框架的内部状态。没有 FRAMEWORK_STATE，框架不知道应该更新哪些 DOM 节点以及何时应该更新它们。这包括组件树和对渲染函数的引用等内容。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>那么，我们如何恢复 WHAT（APP_STATE + FRAMEWORK_STATE）和 WHERE 呢？方法是通过下载并执行当前 HTML 中的组件。在 HTML 中下载和执行已渲染的组件是水合的昂贵部分。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>换句话说，水合是一种通过在浏览器中急切地执行应用程序代码来恢复 APP_STATE 和 FRAMEWORK_STATE 的方法，它涉及以下步骤：</span></span></span></p><ol><li><span><span><span><span>下载组件代码。</span></span></span></span></li><li><span><span><span><span>执行组件代码。</span></span></span></span></li><li><span><span><span><span>恢复 WHAT（事件处理程序闭包）和 WHERE（DOM 元素），以获取事件处理程序闭包。</span></span></span></span></li><li><span><span><span><span>将 WHAT（事件处理程序闭包）附加到 WHERE（DOM 元素）。</span></span></span></span></li></ol><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>这个过程的关键是将 APP_STATE 和 FRAMEWORK_STATE 从已渲染的组件中恢复，以确保应用程序在客户端获得正确的状态和行为。这对于实现前端与后端的协同工作以提供动态用户体验至关重要。</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="298" src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F0e1bbc52c75747328b846dcfa76c28f2?width=905" width="660" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h1_6"></span><h1><span><span><span>二、Qwik.js 框架的特点</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>可恢复性（Resumability）：一种无开销的水合替代方案，那么，如何设计一个没有水合且没有开销的系统呢？</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>为了消除开销，框架不仅必须避免恢复（RECOVERY），还必须避免上述所提到的第四步。第四步是将 WHAT 附加到 WHERE，这是可以避免的成本。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>要避免这种成本，您需要三样东西：</span></span></span></p><ol><li><span><span><span><span>将所有所需的信息序列化为 HTML 的一部分。序列化的信息需要包括 WHAT、WHERE、APP_STATE 和 FRAMEWORK_STATE。</span></span></span></span></li><li><span><span><span><span>一个全局事件处理程序，依赖事件冒泡来拦截所有事件。事件处理程序需要是全局的，这样我们就不需要急切地在特定的 DOM 元素上单独注册所有事件。</span></span></span></span></li><li><span><span><span><span>一个工厂函数，可以延迟恢复事件处理程序（WHAT）。</span></span></span></span></li></ol><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>这种方法的关键是在 HTML 中序列化所有必需的信息，以及使用全局事件处理程序来拦截和处理事件，而不必显式将事件处理程序附加到特定的 DOM 元素上。这样可以避免昂贵的步骤四，从而提供无开销的可恢复性，同时仍能实现前端的互动性和性能优化。</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="304" src="https://cdn.builder.io/api/v1/image/assets%2FYJIGb4i01jvw0SRdL5Bt%2F04681212764f4025b2b5f5c6a258ad6e?width=905" width="675" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>A. 渲染阶段耗时分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="118" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-28K9JFlwTqhvJg8Ai.png" width="500" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>B. 请求链路分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="383" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-28R2YSlad187SVu7u.png" width="207" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>C. 浏览器执行渲染分析</span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" height="229" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-14-51g7EMHDw7dtR18CZV.png" width="342" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-11-19-32gB18uqO0IYVB18KxX.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h1_7"></span><h1><span><span><span>四、效果和成果</span></span></span></h1><div><img alt="" height="371" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-18-15-06LfwBVIHYE9RvLeU.png" width="823" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-11-20-00jYipo69U6Njn9Sm.gif" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h1_8"></span><h1><span><span><span>五、挑战</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>Qwik.js 无水合方案可能会带来一些挑战，其中包括以下几个方面：</span></span></span></p><ol><li><span><span><span><strong><span>新技术的学习曲线</span></strong></span></span><span><span><span>： 采用新的前端架构或技术，如 Qwik.js，通常需要团队成员学习和适应新的工作流程和最佳实践。这可能需要一些时间和培训来确保团队熟练掌握新技术。</span></span></span></span></li><li><span><span><span><strong><span>服务器开销增加</span></strong></span></span><span><span><span>： 在无水合方案中，服务器可能需要更多的计算资源来序列化和提供所需的信息，以及处理全局事件处理程序。这可能会导致服务器开销的增加，特别是在大量并发请求的情况下。</span></span></span></span></li><li><span><span><span><strong><span>Node.js 并发挑战</span></strong></span></span><span><span><span>： 对于 Node.js 服务器，处理大量并发请求可能会带来挑战。在无水合方案中，服务器可能需要同时处理多个请求，因此需要考虑服务器的并发性能和扩展性。</span></span></span></span></li></ol><blockquote><p>作者：京东创新零售，李健</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 05:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10141047</guid>
            <link>https://my.oschina.net/u/4090830/blog/10141047</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[M3 MacBook Pro 无法从预装的 'Ventura' 系统升级至 'Sonoma']]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>配备标准 M3 芯片的新款入门级 14 英寸 MacBook Pro 已经开始发货。部分用户发现，这款新产品预装的是 macOS Ventura (13.5)，目前无法通过 OTA 升级的方式升级至 macOS Sonoma (14)。</p><p>这些用户<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Faaronp613%2Fstatus%2F1721742053170684065" target="_blank">表示</a></u>，他们尝试在「系统设置」中更新到 macOS Sonoma 时，系统提示 macOS Ventura 13.5 是可用的最新版本，而非 macOS Sonoma 14.1。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1108/115949_tV93_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>via<em><u>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FZONEofTECH%2Fstatus%2F1721868285732344224" target="_blank">https://twitter.com/ZONEofTECH/status/1721868285732344224</a></u></em></p><p>目前尚不清楚苹果何时会解决这个问题。软件研究员 Nicolás Álvarez 表示，受影响用户可以下载 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fswcdn.apple.com%2Fcontent%2Fdownloads%2F54%2F11%2F042-41700-A_6GDS7ETYNV%2Fzxpkgymp3w9bm3py7ybs9n9ud27qwnwx7u%2FInstallAssistant.pkg" target="_blank">macOS Sonoma 14.1 安装助手</a></u>（兼容 M3 版本）并手动安装更新。</p><p>据称这个问题也会<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2F9to5mac.com%2F2023%2F11%2F07%2Fm3-macbook-pro-imac-sonoma-fails%2F" target="_blank">影响</a></u>搭载 M3 芯片的新款 iMac。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 04:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265559/macbook-pro-m3-macos-sonoma-update-issue</guid>
            <link>https://www.oschina.net/news/265559/macbook-pro-m3-macos-sonoma-update-issue</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IBM 推出 5 亿美元企业 AI 风险投资基金]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">IBM&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.prnewswire.com%2Fnews-releases%2Fibm-launches-500-million-enterprise-ai-venture-fund-301979178.html" target="_blank">宣布</a>计划对专注于企业 AI 的初创公司进行更多投资，将启动一项 5 亿美元的风险投资基金。该基金将投资「一系列&nbsp;AI&nbsp;公司 —— 从早期阶段到高速增长的初创公司 —— 专注于加速企业的生成式 AI 技术和研究。」</span></p><p><span style="color:#000000">今年 8 月份，IBM&nbsp;还参与了开源 AI 平台 Hugging Face 的 2.35 亿美元 D 轮融资。并在近期参投了 AI 模型和资产安全厂商 HiddenLayer 的 5000 万美元 A 轮融资，此轮融资也是今年专注于保护 AI 的网络安全公司筹集的最大一笔 A 轮融资。</span></p><p><img height="188" src="https://oscimg.oschina.net/oscnet/up-4118d3cd5048d2cdd19ef109bc0e70b828e.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">IBM 方面表示，其企业 AI 风险基金将投资于当前和未来的&nbsp;AI&nbsp;领导者，帮助世界各地的企业实现 AI 的商业潜力。该基金由 IBM 的一支专业团队领导，为每家初创公司提供与 IBM 建立有意义的合作伙伴关系的机会，同时获得产品和工程以及上市方面的运营专业知识策略。</span></p><p><span style="color:#000000">IBM 软件高级副总裁兼首席商务官 Rob Thomas 称，</span></p><p><span style="color:#000000">「到 2030 年，&nbsp;AI&nbsp;预计将创造近 16 万亿美元的生产力。随着 IBM 企业&nbsp;AI&nbsp;风险投资基金的推出，我们正在开辟另一个渠道，利用 AI 革命的巨大潜力，为 IBM 和我们所投资的公司带来实实在在的积极成果。这笔基金是我们通过 watsonx 加倍履行我们对负责任的 AI&nbsp;创新的承诺，并帮助企业将这一变革性技术付诸实践的又一方式。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 03:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265552/ibm-500-million-enterprise-ai-venture-fund</guid>
            <link>https://www.oschina.net/news/265552/ibm-500-million-enterprise-ai-venture-fund</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果副总裁回应「黄金内存」：「统一内存架构」的 8GB 近似于其它系统的 16GB]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>B 站 up 主 @林亦 LYi 最近采访了苹果全球产品营销副总裁 Bob Borchers，期间聊到了大家关心的「祖传黄金 8GB 内存」问题。</p><p>针对苹果入门级 MacBook Pro 只给 8GB 内存的问题，Bob Borchers 表示苹果 MacBook Pro 采用了统一内存架构，所以它与其它系统的内存并不完全相同。因为苹果内存利用率更高，再加上苹果的内存压缩技术，苹果 M3 款 MacBook Pro 中&nbsp;8GB 内存和其它系统的 16GB 表现接近，所以不能只看纸面参数，要关注实际体验。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-93ec8d8aebc69057228bb55fb8b7229e485.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a317c842c946aae94e3674f1efda6cef21e.png" referrerpolicy="no-referrer"></p><p>【8G 内存？苹果高管怎么看 M3 MacBook Pro？】<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV16M411Q7BG%2F" target="_blank">https://www.bilibili.com/video/BV16M411Q7BG/</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265547</guid>
            <link>https://www.oschina.net/news/265547</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Fedora 39 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Fedora 39 已正式发布。此版本采用 Linux 6.5 内核，更新的版本将作为稳定版更新发布。</p><p><img src="https://static.oschina.net/uploads/space/2023/1108/111228_g9O6_2720166.png" referrerpolicy="no-referrer"></p><p><strong>下载地址</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fworkstation%2Fdownload%2F" target="_blank">Fedora Workstation 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fserver%2Fdownload%2F" target="_blank">Fedora Server 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fiot%2Fdownload%2F" target="_blank">Fedora IoT 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fcloud%2Fdownload%2F" target="_blank">Fedora Cloud 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fcoreos%2Fdownload%3Fstream%3Dnext" target="_blank">Fedora CoreOS 「next」 stream</a></li></ul><p>Fedora Workstation 39 搭载 GNOME 45 桌面环境、LibreOffice 7.6 办公套件、LLVM 17 编译器栈以及许多其他可用的更新软件包。</p><p>Fedora 39 还有各种工具链升级，如 GCC 13.2 和 GNU Binutils 2.40、Glibc 2.38 以及其他更新，如 Python 3.12 和 RPM 4.19。Fedora Onyx 也将作为 Fedora 不可变变体与 Budgie 桌面正式亮相。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d3bc4d25724768ddc84dd034104a3f7e4e9.png" referrerpolicy="no-referrer"></p><p><strong>以下是官方介绍译文：</strong></p><p>2003 年 11 月 6 日，Fedora 项目发布了 Fedora Core 1。二十年后的今天 Fedora Linux 39 正式发布，这是为台式机、笔记本电脑、服务器、云、边缘设备以及您能想到的任何其他设备打造的完整的社区操作系统。</p><p>Fedora 工作站现在采用 GNOME 45，它带来了更好的性能和许多可用性增强功能，包括一个新的工作区切换器和一个大为改进的图片查看器。</p><p>如果您正在寻找不同的桌面体验，Budgie 特别兴趣小组已经创建了 Fedora Onyx，这是一个基于 Budgie 的"原子"桌面，与 Fedora Silverblue 的精神一脉相承。</p><p>当然，这还不是全部，系统还提供了 KDE Plasma 桌面、Xfce、Cinnamon 等桌面。</p><p>Fedora 云镜像将在 Microsoft Azure（除了 Google Cloud 和 AWS 之外）正式可用。此外，我们的云镜像现在已配置为 cloud-init（由您选择）安装更新，并在首次调配时重启，这样您就可以知道您正在运行的是最新的安全更新。</p><p>一如既往，Fedora 39 更新了很多很多其他软件包，包含 gcc 13.2、binutils 2.40、glibc 2.38、gdb 13.2 和 rpm 4.19。它还更新了流行的编程语言栈，包括 Python 3.12 和 Rust 1.73。</p><p>特别值得一提的是，系统包含了 Inkscape 的最新版本，这是一款流行的矢量图形插图和绘图工具。Inkscape 昨天也满 20 周岁了。</p><p>原文：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoramagazine.org%2Fannouncing-fedora-linux-39%2F" target="_blank">https://fedoramagazine.org/announcing-fedora-linux-39/</a></u></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 02:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265540/fedora-linux-39</guid>
            <link>https://www.oschina.net/news/265540/fedora-linux-39</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[以浏览器为开端，海泰方圆联合 openKylin 持续开展安全创新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>近日，北京海泰方圆科技股份有限公司（以下简称「海泰方圆」）签署 openKylin 社区 CLA（Contributor License Agreement 贡献者许可协议），正式加入 openKylin 开源社区</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="1079" src="https://oscimg.oschina.net/oscnet/up-30204f1812a28ab7bf8a53b135c586e329b.png" width="829" referrerpolicy="no-referrer"></p><p><span>海泰方圆是一家以密码全能力和可信数据管理为核心，全面服务网信大时代的领军安全企业。公司拥有国家保密局颁发的多项甲级资质、军工三证，并具备各类档案、载体的数字化加工资质和能力。海泰方圆成立于 2003 年，作为一家密码基因深厚的技术型企业，公司以「让信息世界充满信任」为使命，聚焦密码、数据治理、数据安全、国密浏览器、移动安全、物联及工控安全等多个领域，为党政、金融和大型企事业等客户提供全方位的专业安全解决方案及服务，以云化、智能化、平台化的密码服务和保障，护航数字中国，建设网络强国。</span></p><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-0bb93bbd9a72f5673030aaf3710c92897b7.png" width="940" referrerpolicy="no-referrer"></p><p><span>海泰方圆作为 openKylin（开放麒麟）社区共建伙伴，在加入社区后便积极开展双方产品的适配认证工作，于近期<strong>正式完成 openKylin 开源操作系统 V1.0 与红莲花安全浏览器 V5.0 的适配测试工作，并上架应用商店</strong>。测试结果表明，<strong>红莲花浏览器在 openKylin 操作系统上运行稳定，使用流畅。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a6d035f42cfa9089f7d758b91dc0fc6016c.png" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><span style="color:#888888">适配证书</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><span style="color:#888888"><img alt="" height="1080" src="https://oscimg.oschina.net/oscnet/up-27a21c058492459d08169c4b606e5cbd3a8.png" width="1920" referrerpolicy="no-referrer"></span></p><p style="text-align:center"><span style="color:#888888">红莲花安全浏览器已上架 openKylin 应用商店</span></p><p><span>浏览器作为操作系统必不可少的基础软件和业务应用的承载容器，在 IT 环境中，发挥着举足轻重的作用。海泰方圆红莲花安全浏览器，融入我国国产密码算法和一系列安全功能，打造了更安全的架构，支持自主网络信任体系。全面兼容龙芯（MIPS)、龙芯（LoongArch)、飞腾、兆芯、鲲鹏、海光、申威等国产处理器；全面兼容麒麟操作系统；全面兼容金山 WPS、数科、书生、点聚等电子公文、电子签章、电子文档、中间件以及数据库等基础软硬件产品。</span></p><p><span>未来，海泰方圆将持续与 openKylin 社区开展深入合作，共同开展面向安全和密码领域的合作，共建桌面操作系统根社区创新技术生态。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 01:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265665</guid>
            <link>https://www.oschina.net/news/265665</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
