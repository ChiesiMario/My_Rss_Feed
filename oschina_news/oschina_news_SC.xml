<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 20 Nov 2023 09:00:22 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[运营商神操作：后台断网、停用宽带账号，强迫用户更换光猫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，河南电视台都市频道节目报道称，河南周口联通为了强迫用户更换光猫，<strong>公司在后台停掉用户的宽带账号，导致用户无法上网，然后让工程师上门「维修」，谎称光猫损坏，需要花 299 元换新</strong>。<strong>更换完后，联通再在后台恢复用户的网络</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6bca55961849d5db6bafd2b8cf31a04abc6.png" referrerpolicy="no-referrer"></p><p>联通公司不仅对老用户进行这种强制更换光猫的行为，还会在给新用户装机的时候，故意使用破旧光猫，也就是之前强迫用户换新留下的，而再过一段时间之后，又会告诉用户使用的是旧光猫无法匹配，必须换新。联通公司还会故意关掉用户的短信服务，在后台增加增值业务，之后再把短信功能打开，以此牟利。</p><p><img height="826" src="https://static.oschina.net/uploads/space/2023/1120/163843_Utox_2720166.png" width="1518" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1120/164043_bGMp_2720166.png" referrerpolicy="no-referrer"></p><p>周口联通回应称，全力配合省公司调查组进行调查核实。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5af067ca7f5336640898e328da5adc6109b.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.sina.com.cn%2Fs%2F2023-11-20%2Fdoc-imzvfrzw9582625.shtml" target="_blank">https://news.sina.com.cn/s/2023-11-20/doc-imzvfrzw9582625.shtml</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:32:21 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267276</guid>
            <link>https://www.oschina.net/news/267276</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里云开源大数据产品年度发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文根据 2023 云栖大会演讲实录整理而成，演讲信息如下：</p><p><strong>演讲人</strong>：陈守元 | 阿里云计算平台事业部开源大数据产品总监</p><p><strong>演讲主题</strong>：阿里云开源大数据产品年度发布</p><p>随着云计算的不断发展，未来数据处理和应用的趋势将围绕 Cloud Native、Severless 和 Data+AI 展开。其中，云原生架构已成为主流趋势，因为它可以提高数据处理和应用程序的可伸缩性和灵活性，支持大规模部署和更快的响应时间。同时，Serverless 作为一种新型计算模式，可以提高处理效率、降低运营成本并减少资源浪费，其独特的特点使得其成为处理大规模数据的理想选择。此外，Data 与 AI 融合正在快速发展，不断提高智能化和自动化程度，同时需要高质量的数据来支撑算法的准确性和有效性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a48d65a7b7035e480f3276674b7f31f68a3.png" alt="" referrerpolicy="no-referrer"></p><h2>EMR：面向下一代湖仓和全面 Serverless 化</h2><p>下面进入产品发布环节，我们将围绕上面三个点&nbsp;做哪些事情、有哪些发布更好地服务用户上云&nbsp;来讲述我们产品的重点发布。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4026c36c77d94f189e70fb9fe1cb0464515.png" alt="" referrerpolicy="no-referrer"></p><p>首先，我们来看 EMR。EMR 是一个云原生开源大数据平台系统。对于 EMR 而言，线下 IDC 大量基于开源 Hadoop 生态构建的线下用户搬站上云第一站就会选择 EMR，因为改造代价特别地小，几乎可以无缝平迁上云。这对用户来说是具有巨大的人力资本和机器资本的节省。&nbsp;我们将阿里云 EMR 定位为&nbsp;用户搬站上云的第一站。</p><p>今年我们的产品矩阵做了升级，我们希望在云上基于更多样化的 IaaS 提供多样化的 EMR 产品形态。EMR 通用版，核心解决的用户问题就是帮助用户的大数据系统平迁上云，这也是和用户线下部署兼容度最高的方案。第二个是 EMR 容器版，即 EMR ACK 版。现在 IT 基础设施的云原生容器化基本上都深入人心，我们大量客户在云上基于 IT 系统的构建都会选择容器化的平台，例如阿里云的 ACK。用户自然而然会联想到如何把 Data 和 AI 的 workload 迁移到 IT 基础设施的同一个集群里，完成 Data&amp;AI 的负载&nbsp;与 IT 设施负载混用，EMR 容器版，或者说 EMR onACK 就是帮用户解决这类问题的产品。</p><p>最后也是我们今天想强调的重点就是 EMR Serverless 版。对于 EMR Serverless 子产品线而言，内部有些 feature 或者功能&nbsp;在之前云栖中已做了发布。今天对于 EMR Serverless 产品线是一个更加完整的矩阵呈现，今天会重点讲一下 Serverless Spark、Serverless StrarRocks 两大主流 EMR 计算引擎的 Serverless 化，今天也是我们正式对外提出一个完整的 EMR Serverless 化的产品线矩阵。</p><p>EMR Serverless 版是 EMR 产品线形态中诞生最晚、发布最新的一代产品和技术，其实 EMR 围绕 Serverless 的布局在一年前、两年前都在紧锣密鼓地进行。前面 OSS-HDFS、Serverless HDFS 这一块其实在去年、前年已有发布，但是今年我们做了更多的尝试努力，我们希望把 EMR 上面主流的大数据计算引擎、存储引擎、开发平台、元数据管理全都 Serverless 化，只有这样方才能够更好地满足云原生用户更好地利用大数据。Serverless Spark，更好地解决了湖仓场景下 Data ETL 的处理能力，Serverless StrarRocks 更好地解决了湖仓场景下 Data analytic 能力，Serverless HDFS 更好解决了湖仓场景下数据存储能力，最后 EMR Stutio 帮助用户线下可以平迁体验上云，让用户能够更好使用云上大数据基础设施，同时还能免运维。所以 EMR 今年从计算，到存储，到开发环境&nbsp;几乎全部实现了 EMR 主力引擎和平台都能够做到 Serverless 化，我们希望能够把整个大数据开发运维闭环，从而进一步帮助云原生上的开发者更好地把大数据用起来。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e0e494088f0e316e87a203fb7a7b147a1c7.png" alt="" referrerpolicy="no-referrer"></p><p>下面仍然回到 EMR 主力场景， EMR 通用版，围绕湖仓场景做了大量更新。EMR 主力场景仍然围绕着湖仓处理，围绕在湖仓计算、存储、运维、开发做了大量的更新。在计算层面，我们核心还是降本提效，IaaS 层适配了新的倚天 CPU，PaaS 层做了 Native Spark RunTime，这些都是从 IaaS 层和 PaaS 层更好地帮助用户降本提效。存储部分，Serverless HDFS (同时也称之为 OSS-HDFS)&nbsp;很早已有发布，但是在这一年希望让 Serverless HDFS 和&nbsp;本地 HDFS 在使用层面给用户体验完全一致，包括&nbsp;在&nbsp;文件性能、数据访问、源数据获取等方案&nbsp;做到几乎完全一致。为上述目标，我们因此做了大量有关系统性能优化&nbsp;以及&nbsp;系统安全性优化。我们的 Open 文件性能的提升、DU 访问源数据的提升，这些都是今年的成果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-00bfea3732092d7e26b3743ad341b1f080a.png" alt="" referrerpolicy="no-referrer"></p><p>EMR 运维，这主要体现在两个方面。在云上来说 EMR 能结合到云原生上面给用户创造比较大的平台价值就在于弹性，今年我们做到大量的弹性优化。我们大量客户给我们反馈说 EMR 的平台弹性越来越稳定；另外一个运维重点，即 EMR Doctor，我们希望通过 AI 的方式、自动化、智能化的运维平台方式帮助用户去解决开源大数据运维的问题。从社区开源大数据用户反馈来看，开源大数据使用最大的、最痛的点就是系统运维。如何长期有效地保证我们的业务在云上健康地运行，这是很多用户上云和云下使用开源大数据非常大的痛点，EMR Doctor 就是解决这个问题。EMR 开发，即 EMR Studio，我们希望云原生 Serverless 化托管了我们的开发平台、调度平台，帮助用户从线下的体验完全平迁到云上的一套体验。以上均是 EMR 围绕湖仓场景的重大更新。</p><p>最后仍然回到 EMR For AI，我们每个产品都在拥抱积极的变化，这里分为三部分：EMR DataScience、EMR Doctor、EMR+DataWorks 的 Code Pilot。EMR DataScience 是在 EMR 的容器版里面，我们提供了一个新的集群叫 EMR DataScience，里面内置了不少 AI 最流行的组件，包括 Pytorch、TF。我们希望用户在一个平台上既能够处理大数据，同时还能够云原生地处理 AI 的工具，这是 EMR DataScience 帮助用户做的相关工作。EMR Doctor，这个工作前面提到希望用 AI 化、智能化的方式帮助用户实现 AIOps，能够用自动化的手段定位问题、诊断问题、及早发现问题。EMR+Dataworks，今年 DataWorks 重磅的发布就是 code pilot 的发布，但是那上面作为一个平台实际上底下也对接了 EMR 等等，正好实际上 code pilot 也是平台引擎无关的 Feature，可以生成 EMR 里面的 HIVE 代码，用户就可以用 DataWorks 上面开发平台能够通过自然语言生成 MaxCompute 的 SQL，能够操作业务，这样能够极大地减少用户开发代码的成本，这在 DataWorks 对外提供公测的时候欢迎去试用一下。</p><h2>Flink Streaming Lakehouse：新一代的流式湖仓新方案</h2><p>下面我们看一下 Flink Streaming Lakehouse。Lakehouse 这个概念其实在前几年很火，原因就是对于一个 Lakehouse 的系统来说，既兼具了 Data Warehouse 的严谨，包括 ACID、版本的管理、数据格式的校验等等；同时它还有 Data Lake 的灵活性，能够放很多大量非结构化的文本，包括图片、视频、音频、图像等等。而 Lakehouse 同时能够承载结构化的数据和非结构化的数据，这对用户来说是非常好的 AI 和大数据融合的底层存储方案。但是我们看 Lakehouse 的过程中发现 Lakehouse 在时效性方面有非常大的问题，Flink 核心使命和价值就在帮助我们的客户解决大数据实时化转型和升级。所以 Flink 社区&nbsp;和&nbsp;我们&nbsp;一起发布了 Streaming Lakehouse 方案。</p><p><img src="https://oscimg.oschina.net/oscnet/up-37eae0cedf4dbaf6356c5188b319f6e8a02.png" alt="" referrerpolicy="no-referrer"></p><p>回到 Streaming Lakehouse 我主要从产品方向&nbsp;讲三个场景要点。前面已经提到 Lakehouse 在 AI 时代下 Lakehouse 的方案会越来越重要，因为它既能存储结构化的数据又能存储非阶段的数据，这个是大数据和 AI 一体化存储的重要承载点。但是 Lakehouse 在实践的过程中仍然遇到时效性的问题，整个 Lakehouse 的 Data Pipeline 串联起来可能达到小时级别的延迟，从最开始的数据进入到数据价值的发挥，比如 BI、AI，能够看到整个数据链路到小时级别，这其实对于用户来说要构建一个实时湖仓面临很大的延迟。所以 Flink 希望一起帮助用户做到 Lakehouse 的实时化，通过流式、实时帮助用户做很大的提升。</p><p>最后是 Unified，其实 Flink 社区在前几年一直主打 Unified Batch &amp; Streaming。我们希望在计算层面做到融合，就是流批一体。我们在开源社区推广流批一体的方案时，发现如果用户只是计算层面的融合对于用户只能解决一半的问题。还有一半问题在于存储，存储仍然是两套的存储方案，两套存储和两套数据因此会导致的离线和实时的数据不一致性对于用户来说是非常大的问题，所以 Flink 团队和社区一起构建了 Paimon。Paimon 基于底层的分布式文件系统，比如说 OSS 会构建一个 Unified 的 storage，既可以做流，也可以做批，我们称之为批流一体的存储。所以 Flink+Paimon 构成 Lakehouse 的方案，既具备 Unified 的 process，也可以具备 Unified 的 Storage，这一层合并在一起能够真正完整地帮助用户实现流批一体的解决方案。这是我们 Streaming Lakehouse 的价值点，最终我们希望帮助用户在 Data+AI 时代下提供实时化、流式化和 Serverless 化的湖仓方案。</p><p>回到 Flink 主线，我们一直以来的使命就是希望帮助用户做到大数据的升级和转型，所以追求实时场景下的性价比一直是 Flink 团队一直以来努力的方向。追求实时化的性价比今年有两个重要的点，一个是 Flink 全面拥抱了倚天，结合到倚天&nbsp;整个实时计算 Flink 综合的性价比有 50% 的提升，这是 Flink 团队结合 IaaS 层面做了大量优化。同时在 PaaS 层 Flink 企业级内核&nbsp;我们仍然在做大量优化，这其中包括算子的优化，以及未来我们会公布 native runtime 的优化。这部分优化相比于开源 Flink 引擎，我们实时计算 Flink 版&nbsp;会有两倍的提升，特别是在吞吐部分可以解决很多用户高吞吐量或者大流量的实时计算场景。</p><p><img src="https://oscimg.oschina.net/oscnet/up-93711ed92a4488a619f2f0cfa9e51e70d03.png" alt="" referrerpolicy="no-referrer"></p><h2>Elasticsearch:Serverless 和 Search for Data &amp; AI</h2><p>接下来讲一下 Elasticsearch，这也是开源大数据很重要的组成部分。说到 Elasticsearch 可能大家更多仍然停留在比较早期 for data 的 search，就是全文的检索，类似于搜索引擎要做全文的检索。但今天我想告诉大家这个思想需要刷新一下，Elasticsearch 不仅是 for data 的 search，也是 for AI 的 search。我今天给大家重点会讲一下 ES 如何从 Data 转变成 Data+AI 的 search 系统。</p><p>第一个是我们的 Elasticsearch 的版本发布。坦白地说，当前产品形态，即 ES on PaaS 的独立集群版本已经非常好地满足我们中国公有云和专有云客户很多的市场需求，不少中大型公司都非常认可阿里云的 ES 产品形态，产品客户受众无论在基数以及未来增长都很不错。但实际上随着最近这一两年客户在降本提效上提上了日程之后，发现有一批非常大的潜在客户以及中长尾的客户其实仍然对云上的独立集群版本所带来的成本仍然认为是比较大的上云入门门槛。他们非常希望以低门槛甚至零门槛的方式开启云上的 ES，这就是我们 ES Serverless 要做的初衷，我们希望以一个零门槛的方式能够帮助用户开启云上 Elasticsearch 的使用。</p><p><img src="https://oscimg.oschina.net/oscnet/up-dda1df3c99a6593d14261aabceb742084c0.png" alt="" referrerpolicy="no-referrer"></p><p>同时 Elasticsearch Serverless 也是我们国内首家支持通用场景的 ES 版本。去年我们也发布了一个 Elasticsearch Serverless 版本，但更多解决日志 ELK 场景的需求。但是该版本在数据一致性上会存在问题，所以今年我们进行大量的产品技术架构重构。本次 ES Serverless 的发布是一个面向通用场景的升级发布，这里面不仅支持包括日志场景，还支持订单、金融等等场景，这里面的数据一致性都可以得到很好的保障。这是我们今年发布相比于去年发布升级很不一样的点。针对 ES Serverless 可以真正按量付费、秒级弹性、简单运维，同时可以完全兼容开源的 ES，这是很多其他的厂商不一定能做到的。</p><p>下面重点强调 ES for AI 和 Data 的部分，标志着 ES 真正从 Data 面向 Data&amp;AI 的搜索引擎。云栖会场外面有很大的广告栏，主打的是 ESRE 的发布，这是 ES 公司重大的发布。发布的核心简单跟大家说一下，就是支持 AI 相关检索，包括向量检索，包括多路并规的查询优化，这些东西都是在 ES 内核重点打的点，帮助用户做 AI 检索。阿里云 ES 围绕着 ES 最新的 AI 能力进行了大量方案集成，就是右边的增强方案。我们跟达摩院 AI 方案做联合，和 PAI—EAS 方案联合，甚至会和社区一起做更多的联合方案，这些方案能够帮助我们的用户更好地在云上用上阿里云、达摩院 AI 的技术，和社区的 ES 更好地结合起来。所以我们希望通过 ES8.9 这个版本能够帮助用户构建下一代面向 Data+AI 的检索系统。</p><p><img src="https://oscimg.oschina.net/oscnet/up-47305474e3702aae7f01185fc4b3c7a7d65.png" alt="" referrerpolicy="no-referrer"></p><p>围绕 ES 自研能力的升级，阿里云 ES 是和 ES 公司一起合作，也是基于开源的 ES 做更多的优化孵化，其实是完全基于开源，也是完全兼容开源的，我们做了大量的增强。而这里面做了三个升级，包括场景的升级，也就是日志场景向通用场景的升级和改造。去年 ES 更多是做日志场景、ELK 场景，今年的 ES Serverless 面向通用场景进行完全开放。另外就是有关搜索内核引擎的优化，包括读写分离、存算分离，这些更好地解决集群稳定性问题、成本流控问题、资源弹性的问题。最后我们在购买链路和相关控制枱上做了比较大的体验升级，我们非常推荐大家去用一用阿里云 ES Serverless 版本，感受一下完全 Serverless 化的 ES。</p><h2>Milvus：AI 时代的搜索引擎</h2><p>今天最后一个，也是今年完全新的产品。前面全部是我们现有的功能、现有产品线的叠加，Milvus 这部分是我们今年要发布的 AI 时代新的搜索引擎。目前，在向量检索部分 Milvus 几乎是全球最火、最亮眼的技术。我们会在 12 月份开启向量检索 Milvus 版本对外测试，相比于开源的 Milvus 来说会做相应产品企业级的增强。同时在兼容开源的 Milvus 之上，我们还会去结合达摩院的技术能够提供更好的企业级向量检索能力。同时在云上肯定会做大量的产品联合工作，包括和我们的存储上有大量非结构化的数据可供用户检索查询。同时我们会跟 PAI 平台、达摩院 AI 模型做更多的深度集成，做 AI 向量检索能力、做大模型向量支撑，这些方案未来都会在我们的产品之上构建。所以我们最终是希望能够帮助云上使用 Milvus 的用户更快、更方便、更低门槛构建 AI 时代下的搜索系统。</p><p><img src="https://oscimg.oschina.net/oscnet/up-684d85b432854ecd04eafd9cad2a5a50df8.png" alt="" referrerpolicy="no-referrer"></p><p>回顾一下我们讲了大数据的三个趋势。Cloud Native，整个 IT 投资都在往云上加速转型。Serverless 化，我们认为未来的 PaaS 平台最终全部都会归到 Serverless 化，所有 AI 产品、大数据产品和其他 PaaS 产品都会归到 Serverless 化。最后是 Data+AI，未来 AI 和大数据会做彻底的融合打通，这也是我们整个开源大数据一直以来在积极围绕这三个点做布局。</p><p>最后希望大家多多关注阿里云，关注阿里云的开源大数据，谢谢大家！</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:01:25 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5583868/blog/10149103</guid>
            <link>https://my.oschina.net/u/5583868/blog/10149103</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 前 CEO 和总裁 Sam Altman & Greg Brockman 加入微软]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微软 CEO Satya Nadella 刚刚发布推特称，OpenAI 前 CEO 和总裁 Sam Altman &amp; Greg Brockman 将加入微软，他们负责领导新的 AI 研究团队。</p><p><img height="1176" src="https://static.oschina.net/uploads/space/2023/1120/155839_imd2_2720166.png" width="1264" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsatyanadella%2Fstatus%2F1726509045803336122" target="_blank">https://twitter.com/satyanadella/status/1726509045803336122</a></u></em></p><p>Sam Altman 转发了这条推文，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1726510261509779876" target="_blank">并说道</a></u>：不忘使命，砥砺前行。</p><p><img height="678" src="https://static.oschina.net/uploads/space/2023/1120/161424_UZuO_2720166.png" width="1272" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:00:25 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267272</guid>
            <link>https://www.oschina.net/news/267272</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Altman 回归失败，OpenAI 董事会聘请 Twitch 前高管担任 CEO]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">据</span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fbreaking-sam-altman-will-not-return-as-ceo-of-openai" target="_blank">The Information</a>&nbsp;<span style="color:#000000">和</span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-20%2Fopenai-s-board-hires-former-twitch-executive-shear-as-ceo" target="_blank">Bloomberg</a>&nbsp;<span style="color:#000000">消息称，经过一个周末的谈判，OpenAI 董事会决定不顾投资者要求 Sam Altman 复职的呼声，聘请前 Twitch 首席执行官 Emmett Shear 来担任该公司的临时首席执行官。</span></p><p><span style="color:#000000">OpenAI 联合创始人兼董事会董事 Ilya Sutskever 向员工表示，公司高管有尝试努力挽回 Sam Altman，但没有成功，Altman</span>&nbsp;<span style="color:#000000">将不会回到 OpenAI。</span></p><p><img alt="" height="300" src="https://static.oschina.net/uploads/space/2023/1120/153143_G4mc_4252687.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Emmett Shear 将从 Mira Murati 手中接过这一职位，这也意味着 OpenAI 在三天内迎来了第三任首席执行官。此前，在 Sam Altman 被突然解雇后，曾有大批 OpenAI 员工开始在社交媒体上表达了对 Altman 的支持，Mira Murati 也在此列。</span></p><p><span style="color:#000000">Shear 在 2006 年帮助推出了游戏流媒体网站 Twitch，并于 2014 年以近 10 亿美元的价格将其出售给亚马逊。今年早些时候，Shear 辞去了 Twitch 的首席执行官一职。</span></p><p><span style="color:#000000">有知情人士表示，Shear 之所以能赢得 OpenAI 董事会的青睐，是因为他能意识到人工智能所带来的生存威胁。此外，<span style="background-color:#ffffff">Open AI 的董事会已经至少联系了两名科技行业的知名高管，希望其中一位可以担任公司董事长的职位。</span></span></p><p><span style="color:#000000">OpenAI 及其最大投资者微软的发言人目前暂未回应相关置评请求。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 07:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267256/openai-twitch-ceo-shear</guid>
            <link>https://www.oschina.net/news/267256/openai-twitch-ceo-shear</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Red Hat Enterprise Linux 9.3]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Red Hat Enterprise Linux 9.3 上周正式发布。</p><p>公告写道，RHEL 9.3 引入了部分变化，包括<strong>支持云实例中的 UEFI 环境</strong>。此外通过 Red Hat Insights 增加了新的管理服务，并全面支持 Stratis 作为系统存储选项。</p><p>此前 RHEL 镜像生成器创建的 EC2 AMD 或 Intel 64 位架构 AMIs 镜像只支持 Legacy Boot 引导。因此无法利用某些需要 UEFI 启动的 AWS 功能，如安全启动。现在，该增强功能扩展了 AWS EC2 AMD 或英特尔 64 位架构 AMI 镜像，除支持 Legacy BIOS 启动外，还支持 UEFI 启动。因此，现在可以利用需要使用 UEFI 引导镜像的 AWS 功能。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redhat.com%2Fen%2Fabout%2Fpress-releases%2Fred-hat-launches-next-versions-worlds-leading-enterprise-linux-platform" target="_blank">详情查看发布公告</a></u>。</p><p>延伸阅读：<em><u><a href="https://www.oschina.net/news/266400/almalinux-9-3-stable" target="_blank">AlmaLinux 9.3 正式发布，CentOS 最佳替代方案之一</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 04:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267226/rhel-9-3</guid>
            <link>https://www.oschina.net/news/267226/rhel-9-3</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🔥 周热点 | OpenAI 内讧，奥特曼被驱逐；俄罗斯操作系统 Aurora OS 5.0 全新 UI 亮相；.NET 8 正式 GA.....]]>
            </title>
            <description>
                <![CDATA[回顾一周热门资讯。2023.11.13-2023.11.19]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649093971&#38;idx=1&#38;sn=3f2a763dda28e1c46c3aeca3f287766e&#38;chksm=880c4c40bf7bc556325bae39dd086d3b0d3cea17b35ad8c141b34669fc8c632bc161023a587a&#38;token=584579097&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649093971&#38;idx=1&#38;sn=3f2a763dda28e1c46c3aeca3f287766e&#38;chksm=880c4c40bf7bc556325bae39dd086d3b0d3cea17b35ad8c141b34669fc8c632bc161023a587a&#38;token=584579097&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[Linux Kernel 6.6 确认成为 LTS 版本]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Greg Kroah-Hartman 已经宣布 Linux Kernel 6.6 版本为长期支持 (LTS) 版本；支持期限到 2026 年 12 月。</span></p><p><span style="color:#000000">Linux Kernel 6.6 于 10 月 29 日正式发布，是一次包含了新功能、硬件支持、安全增强和性能改进的重大更新。具体包括有：引入了 EEVDF scheduler，最终实现了对 Intel Shadow Stack 的支持，为 Nouveau DRM 驱动程序添加了 Mesa NVK Vulkan 驱动程序所需的&nbsp;user-space API，继续支持即将到来的 Intel 和 AMD 平台，以及大量的其他驱动程序改进和一些不错的性能优化等。</span></p><p><img height="254" src="https://oscimg.oschina.net/oscnet/up-40bae094eb2126579af39e14031fa92878c.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">一般来说，年度 LTS 内核往往是该日历年的最后一个稳定内核版本。Linux 6.6 于十月底发布，Linux 6.7 预计可能会在 2023 年的最后几天或者 2024 年年初达到稳定。但考虑到 6.7 版本规模较大，且年末的假期往往会放慢测试和 bug 修复的速度，导致相关周期拖长，因此 6.7 版本大概率还是可能在 2024 年初登陆。</span></p><p><span style="color:#000000">目前，Kernel.org 已更新相关版本信息。Linux 6.6 生命周期将将截止 2026 年 12 月；与此同时，Linux 6.1、5.15 和 5.10 也将于 2026 年 12 月结束生命周期。因此根据当下的政策，Linux 6.6 LTS 将在未来三年内得到维护，不过也有消息称内核开发人员一直在讨论将 LTS 支持期缩短为 2 年。</span></p><p><span style="color:#000000">更多详情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kernel.org%2Fcategory%2Freleases.html" target="_blank">此处</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 03:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267220/linux-6-6-lts</guid>
            <link>https://www.oschina.net/news/267220/linux-6-6-lts</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Altman 以访客身份回到 OpenAI，和公司高管会面谈判]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>据 The Information 报道，OpenAI 首席战略官 Jason Kwon 在员工备忘录中表示，<strong>上周五离职的 Sam Altman 等高管或将会回到公司</strong>。</p><p>而 Altman 本人也在周一<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1726345564059832609" target="_blank">推文</a></u>写道「这是我第一次也是最后一次带这玩意」，配图是他手持 OpenAI 访客工牌的自拍，表示他持访客证明造访了 OpenAI 总部，与公司董事会讨论某事。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-01348c9bedfa830267784f185d7e8e2dbeb.png" referrerpolicy="no-referrer"></p><p>有消息称，包括微软在内的投资者正在向 OpenAI 董事会施压，要求他们同意 Sam Altman 等离职高管回归 OpenAI 工作。</p><p>目前尚不能确定 Altman 等人是否会回到 OpenAI 继续工作。有消息称，Altman 正计划同前 OpenAI 总裁 Greg Brockman 一起成立一间新的 AI 公司。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267200</guid>
            <link>https://www.oschina.net/news/267200</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kotlin Multiplatform 公布 2024 年开发路线图]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">继几周前宣布推出</span><a href="https://www.oschina.net/news/265360/kotlin-multiplatform-stable">第一个稳定版本</a><span style="color:#000000">后，JetBrains <span style="background-color:#ffffff">发布了 2024 年 </span>Kotlin Multiplatform&nbsp;<span style="background-color:#ffffff">的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-multiplatform-development-roadmap-for-2024%2F" target="_blank">开发路线图</a>。 其</span></span><span style="background-color:#ffffff; color:#19191c">目标是在 2024 年对 Kotlin Multiplatform 核心技术、Compose Multiplatform、KMP 工具和 KMP 库进行一系列改进。</span></p><p><span style="color:#000000">「我们致力于使 Compose Multiplatform 成为一个框架，允许创建在所有受支持的平台上看起来都同样美观且高性能的应用程序。」</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-8af6c9da66280ab985d71d05df036c402a9.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，该公司对&nbsp;<span style="background-color:#ffffff">Compose Multiplatform 的主要关注点是将 iOS 版 Compose 升级到 Beta 版。同时还计划：</span></span></p><ul style="margin-left:0; margin-right:0"><li>使所有 Jetpack Compose core API 和组件实现多平台。</li><li>提高 iOS 上的渲染性能。</li><li>使 Compose for iOS 应用程序中的滚动和文本编辑行为与 iOS 原生应用程序中的行为相同。</li><li>实现通用 API 以共享所有类型的资源。</li><li>与 iOS 和&nbsp;Desktop accessibility API 集成。</li><li>提供多平台导航解决方案。</li></ul><p><span style="color:#000000">以及致力于改进 Compose for Web，尤其<span style="background-color:#ffffff">是 Wasm</span>。例如：</span></p><ul><li><span style="color:#000000">允许你移植现有代码；</span></li><li><span style="color:#000000">支持不同的屏幕尺寸、方向和密度；</span></li><li><span style="color:#000000">支持通过鼠标、触摸屏、物理键盘或屏幕键盘进行输入；</span></li><li><span style="color:#000000">改善性能和 binary size。</span></li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">JetBrains 还将对 IDE 进行多项改进，</span>包括：增强对 Compose Multiplatform 的支持，包括常见代码的实时预览和可视化调试工具；<span style="background-color:#ffffff">项目配置帮助；</span>多平台项目所有部分的统一和增强的调试体验。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="display:none">&nbsp;</span><span style="color:#000000"><span style="background-color:#ffffff">为了支持想要与 iOS target&nbsp;共享代码的开发人员，项目团队将致力于直接从 Kotlin 导出到 Swift。「流行的 Kotlin Multiplatform 应用场景之一是与 iOS target&nbsp;共享代码。我们希望关注在代码库中使用 Kotlin Multiplatform 框架的 iOS 开发人员的开发体验......它将消除 Objective-C 瓶颈，从而提供更广泛的 Swift 语言支持和更自然的 API 导出。」</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">还在专门为 Kotlin 库作者创建工具，旨在提高 Kotlin API 导出到 Swift 时的兼容性和用户友好性。一些其他举措包括，<span style="background-color:#ffffff">提高 Kotlin/Native 编译的性能、改进 CocoaPods 集成以及添加对使用 SwiftPM 导出框架的支持。&nbsp;</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">此外，随着 Kotlin <span style="background-color:#ffffff">Multiplatform&nbsp;</span>生态系统的快速发展，库的向后兼容性变得至关重要。<span style="background-color:#ffffff">JetBrains 将重点关注改进 klib 格式，以允许库创建者利用他们的 JVM 库构建技能；</span><span style="background-color:#ffffff">在 Kotlin Multiplatform&nbsp;</span><span style="background-color:#ffffff">库中实现与 JVM 相同的代码内联行为；以及提供一个工具来确认库的公共 API 没有以不兼容的方式进行了更改。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-multiplatform-development-roadmap-for-2024%2F" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 04:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267112/kotlin-multiplatform-development-roadmap-2024</guid>
            <link>https://www.oschina.net/news/267112/kotlin-multiplatform-development-roadmap-2024</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GROMACS —— 分子动力学模拟工具包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GROMACS（全称：GROningen MAchine for Chemical Simulations，格罗宁根化学模拟体系），是用于研究生物分子体系的分子动力学模拟工具包，主要用来模拟研究蛋白质、脂质、核酸等生物分子的性质。</p><p>它可以用分子动力学、随机动力学或者路径积分方法模拟溶液或晶体中的任意分子，进行分子能量的最小化，分析构象等。</p><p>它的模拟程序包包含 GROMACS 力场 (蛋白质、核苷酸、糖等)，研究的范围可以包括玻璃和液晶、到聚合物、晶体和生物分子溶液。</p><p>GROMACS 是一个功能强大的分子动力学的模拟软件，其在模拟大量分子系统的牛顿运动方面具有极大的优势。</p><blockquote><p>分子动力学模拟是分子模拟中最接近实验条件的模拟方法。它能够从原子层面给出体系的微观演变过程，直观的展示实验现象发生的机理与规律。</p><p>因此，分子动力学模拟在生物，药学，化学以及材料科学的研究中发挥着越来越重要的作用。</p></blockquote><p>GROMACS 起初由荷兰格罗宁根大学生物化学系开发，目前由来自世界各地的大学和研究机构维护。</p><p><strong>主要功能</strong></p><ul><li><p>支持基本动力学相关算法，包括牛顿力学及随机动力学积分器、能量最小化、正则模式分析等。</p></li><li><p>支持温度及压强控制，支持基于 SHAKE 和 P-LINCS 的完全约束算法，支持多种几何约束。</p></li><li><p>支持 AMBER、CHARMM 及 OPLS 等常见经典力场。</p></li><li><p>支持 QM/MM 混合动力学，可对接 GAMESS、Orca 等量化软件。</p></li></ul><p>它可以用于上百万个粒子体系的分子动力学模拟研究，尤其是生物体系，如磷脂双分子层生物膜、蛋白质、药物分子等。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/194131_DK4t_2720166.png" referrerpolicy="no-referrer"></p><p>此外，GROMACS 能够非常快速地计算非键作用，因此也可用于非生物体系，如聚合物、一些有机物、无机物等。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/194200_MtCm_2720166.png" referrerpolicy="no-referrer"></p><p><strong>核心优势</strong></p><ul><li><p>开源软件、可免费使用</p></li><li><p>力场较全面且容易扩充</p></li><li><p>操作方便，相关教程也多</p></li><li><p>算法性能好，计算效率高</p></li></ul><p>GROMACS 最突出的特色和优势是高效，无论串行还是并行版本。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/194219_S3QX_2720166.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/gromacs</guid>
            <link>https://www.oschina.net/p/gromacs</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 网络自动化领域解决方案框架 NetAxe]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img src="https://gitee.com/iflytek/NetAxe/raw/master/readme/logo.png" alt="netaxe" referrerpolicy="no-referrer"></p><p align="center"><img src="https://img.shields.io/badge/Python-brightgreen.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Django-orange.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/FastAPI-brightgreen.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Vue3-blue.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Vite-orange.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/NaiveUI-blue.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-Apache-green.svg" referrerpolicy="no-referrer"><a href="https://gitee.com/NetAxeClub" target="_blank"><img src="https://img.shields.io/badge/Author-NetAxeClub-orange.svg" referrerpolicy="no-referrer"></a></p><p align="center"><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io">Netaxe 官方文档</a> |  <a target="_blank" href="https://gitee.com/link?target=http%3A%2F%2F47.99.86.164%3A9980">在线预览</a></p><h2><a id="user-content-项目介绍" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p><strong>专注网络自动化领域的整体架构解决方案</strong></p><p>[ NetAxe ]是一个网络自动化领域解决方案框架，通过微服务和微前端的方式构建的应用集合，主要有资源管理、配置管理、自动化、网络拓扑、地址定位、地址管理等等功能集合，同时各个微应用支持插件形式的能力集成，方便用户自行扩展。</p><h2><a id="user-content-组织地址" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E7%BB%84%E7%BB%87%E5%9C%B0%E5%9D%80"></a>组织地址</h2><p><a href="https://gitee.com/NetAxeClub">NetAxeClub</a></p><p>致力于网络自动化工具和平台开发</p><p>联系邮箱:<a href="mailto:netaxe@qun.mail.163.com">netaxe@qun.mail.163.com</a></p><h2><a id="user-content-文档说明" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E"></a>文档说明</h2><p>👇👇👇👇👇👇👇👇👇👇👇</p><p>📚 <a href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io%2F">NetAxe 文档教程使用说明</a> : <a href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io%2F">https://netaxe.github.io/</a></p><p>👆👆👆👆👆👆👆👆👆👆👆</p><h2><a id="user-content-项目预览" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E9%A1%B9%E7%9B%AE%E9%A2%84%E8%A7%88"></a>项目预览</h2><p>👇👇👇👇👇👇👇👇👇👇👇</p><p><a href="https://gitee.com/link?target=http%3A%2F%2F47.99.86.164%3A9980">体验环境</a> 账号密码：admin/123456</p><p>仅在工作时间开启 (9:30-18:00)</p><p>👆👆👆👆👆👆👆👆👆👆👆</p><h2><a id="user-content-平台架构图" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE"></a>平台架构图</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/%E6%9E%B6%E6%9E%84%E5%9B%BE.3vrmin46me00.webp" alt="平台架构图" referrerpolicy="no-referrer"></p><h2><a id="user-content-1 平台登录页" class="anchor" href="https://gitee.com/iflytek/NetAxe#1%E5%B9%B3%E5%8F%B0%E7%99%BB%E5%BD%95%E9%A1%B5"></a>1.平台登录页</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-login.78afwmigsc00.webp" alt="登录页面" referrerpolicy="no-referrer"></p><h2><a id="user-content-2 资产管理" class="anchor" href="https://gitee.com/iflytek/NetAxe#2%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86"></a>2.资产管理</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/golang.63zo8r1zsjs0.webp" alt="资产管理" referrerpolicy="no-referrer"></p><h2><a id="user-content-3 配置差异比较" class="anchor" href="https://gitee.com/iflytek/NetAxe#3%E9%85%8D%E7%BD%AE%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83"></a>3.配置差异比较</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-git-diff.60gnker70dk0.webp" alt="配置差异比较" referrerpolicy="no-referrer"></p><h2><a id="user-content-4webssh" class="anchor" href="https://gitee.com/iflytek/NetAxe#4webssh"></a>4.Webssh</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-webssh.3rs5vtioxe80.webp" alt="Webssh" referrerpolicy="no-referrer"></p><h2><a id="user-content-5 接口清单" class="anchor" href="https://gitee.com/iflytek/NetAxe#5%E6%8E%A5%E5%8F%A3%E6%B8%85%E5%8D%95"></a>5.接口清单</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-interface.5pje0o1za4w0.webp" alt="接口清单" referrerpolicy="no-referrer"></p><h2><a id="user-content-6 采集方案" class="anchor" href="https://gitee.com/iflytek/NetAxe#6%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88"></a>6.采集方案</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netzxe-collect.4yf0qcxemhk0.webp" alt="采集方案" referrerpolicy="no-referrer"></p><h2><a id="user-content-7 任务列表" class="anchor" href="https://gitee.com/iflytek/NetAxe#7%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8"></a>7.任务列表</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-task.58uns0zatss0.webp" alt="任务列表" referrerpolicy="no-referrer"></p><h2><a id="user-content-8 任务调度管理" class="anchor" href="https://gitee.com/iflytek/NetAxe#8%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%AE%A1%E7%90%86"></a>8.任务调度管理</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-dispatch.3x68huinuzi0.webp" alt="任务调度管理" referrerpolicy="no-referrer"></p><h2><a id="user-content-9-地址管理" class="anchor" href="https://gitee.com/iflytek/NetAxe#9-%E5%9C%B0%E5%9D%80%E7%AE%A1%E7%90%86"></a>9. 地址管理</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/ipam.3vspimj3jf20.webp" alt="地址管理" referrerpolicy="no-referrer"></p><h2><a id="user-content-10-权限中心" class="anchor" href="https://gitee.com/iflytek/NetAxe#10-%E6%9D%83%E9%99%90%E4%B8%AD%E5%BF%83"></a>10. 权限中心</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/rbac.6k2qnc2yqxk0.webp" alt="权限中心" referrerpolicy="no-referrer"></p><h2><a id="user-content-交流群" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>交流群</h2><blockquote><p>扫码添加好友，提交入群申请。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230106172200.240x6tqonx9c.webp" alt="NetAxe 开源社区" referrerpolicy="no-referrer"></p><h2><a id="user-content--参与贡献" class="anchor" href="https://gitee.com/iflytek/NetAxe#-%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>🤝 参与贡献</h2><p>欢迎你参与到 NetAxe 项目的建设中来！🎉</p><p>我们可以一起：</p><ul><li>🎁 设计和开发功能模块</li><li>⭐ 讨论实际运维场景和自动化的落地实践</li><li>🎊 结识一群热爱学习、热爱开源的朋友</li></ul><h2><a id="user-content--维护者" class="anchor" href="https://gitee.com/iflytek/NetAxe#-%E7%BB%B4%E6%8A%A4%E8%80%85"></a>✨ 维护者</h2><p>维护者是做出杰出贡献且在社区长期活跃的 NetAxe 社区成员。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FM87NET">jamlee</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fxuehaoweng">xuehaoweng</a></li></ul><h2><a id="user-content--贡献者" class="anchor" href="https://gitee.com/iflytek/NetAxe#-%E8%B4%A1%E7%8C%AE%E8%80%85"></a>✨ 贡献者</h2><p>贡献者是在 NetAxe 社区中合并了 1 个或多个 PR 的社区成员。
虚位以待。。。</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FsP2dC0txvBhExYxbjq94UA">PR 提交指南</a></p><p>github:&nbsp;<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fiflytek%2FNetAxe">https://github.com/iflytek/NetAxe</a><br>
gitee:&nbsp;<a href="https://gitee.com/iflytek/NetAxe">https://gitee.com/iflytek/NetAxe</a><br>
NetAxe 官网文档:<a href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io%2F">https://netaxe.github.io/</a></p>]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/iflytek/NetAxe</guid>
            <link>https://gitee.com/iflytek/NetAxe</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 彩虹桥架构演进之路 - 性能篇]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一、前言</h1><p>一年前的《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247488943%26idx%3D1%26sn%3D867041a53c801b5f83457fa622bb4909%26scene%3D21%23wechat_redirect" target="_blank">彩虹桥架构演进之路</a>》侧重探讨了稳定性和功能性两个方向。在过去一年中，尽管业务需求不断增长且流量激增了数倍，彩虹桥仍保持着零故障的一个状态，算是不错的阶段性成果。而这次的架构演进，主要分享一下近期针对性能层面做的一些架构调整和优化。其中最大的调整就是 Proxy-DB 层的线程模式从 BIO 改造成了性能更好的 NIO。下面会详细介绍一下具体的改造细节以及做了哪些优化。</p><blockquote><p>阅读本文预计需要 20～30 分钟，整体内容会有些枯燥难懂，建议阅读前先看一下上一篇彩虹桥架构演进的文章（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247488943%26idx%3D1%26sn%3D867041a53c801b5f83457fa622bb4909%26scene%3D21%23wechat_redirect" target="_blank">彩虹桥架构演进之路</a>）以及 MySQL 协议相关基础知识。</p></blockquote><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>二、改造前的架构</h1><p>先来复习一下彩虹桥的全景架构图： <img src="https://oscimg.oschina.net/oscnet/up-a99befe24a3c3d97eae3a3fd156ae4e23bd.jpg" alt="" referrerpolicy="no-referrer"></p><h2>Proxy 三层模块</h2><p>针对 Proxy 这一层，可以大致分成 Frontend、Core、Backend 三层：</p><ul><li><strong>Frontend-服务暴露层</strong>：使用 Netty 作为服务器，按照 MySQL 协议对接收&amp;返回的数据进行编解码。</li><li><strong>Core-功能&amp;内核层</strong>：通过解析、改写、路由等内核能力实现数据分片、读写分离、影子库路由等核心功能。</li><li><strong>Backend-底层 DB 交互层</strong>：通过 JDBC 实现与数据库交互、对结果集改列、归并等操作。</li></ul><h2>BIO 模式下的问题</h2><p>这里 Core 层为纯计算操作，而 Frontend、Backend 都涉及 IO 操作，Frontend 层使用 Netty 暴露服务为 NIO 模式，但是 Backend 使用了数据库厂商提供的传统 JDBC 驱动，为 BIO 模式。所以 Proxy 的整体架构还是 BIO 模式。在 BIO 模型中，每个连接都需要一个独立的线程来处理。这种模型有一些明显的缺点：</p><ul><li><strong>高资源消耗</strong>：每个请求创建独立线程，伴随大量线程开销。线程切换与调度额外消耗 CPU。</li><li><strong>扩展性受限</strong>：受系统线程上限影响，处理大量并发连接时，性能急剧下降。</li><li><strong>I/O 阻塞</strong>：BIO 模型中，读/写操作均为阻塞型，导致线程无法执行其他任务，造成资源浪费。</li><li><strong>复杂的线程管理</strong>：线程管理和同步问题增加开发和维护难度。</li></ul><p>我们看最简单的一个场景：在 JDBC 在发起请求后，当前线程会一直阻塞直到数据库返回数据，当出现大量慢查或者数据库出现故障时，会导致大量线程阻塞，最终雪崩。在上一篇彩虹桥架构演进文章中，我们做了一些改进来避免了 BIO 模型下的一些问题，比如使用线程池隔离来解决单库阻塞导致全局雪崩的问题。 <img src="https://oscimg.oschina.net/oscnet/up-5dad3dc23bdca9a239bdf3253b4a7f9b319.jpg" alt="" referrerpolicy="no-referrer"></p><p>但是随着逻辑库数量的增多，最终导致 Proxy 的线程数膨胀。系统的可伸缩性和吞吐量都受到了挑战。因此有必要将现有的基于 JDBC 驱动的阻塞式连接升级为采用 NIO（非阻塞 I/O）方式连接数据库。</p><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>三、改造后的架构</h1><ul><li><strong>BIO-&gt;NIO</strong></li></ul><p>想把 Proxy 整体架构从 BIO-&gt;NIO，最简单的方式就是把传统的 BIO 数据库驱动 JDBC 换成 NIO 的数据库驱动，但是在调研过后发现开源的 NIO 驱动并不多，而且基本上没有什么最佳实践。最后在参考 ShardingSphere 社区之前做的调研后（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fshardingsphere%2Fissues%2F13957" target="_blank">https://github.com/apache/shardingsphere/issues/13957</a> ） ，决定使用 Vertx 来替换 JDBC。最开始使用 Vert.x 的原因，第一是 Vertx 的异步编码方式更友好，编码复杂度相对较低，第二是因为它实现了主流数据库的驱动。但最终的结果不尽人意，由于 Vertx 相关抽象化的架构，导致链路较长时，整个调用栈深非常夸张。最终压测出来的吞吐量提升只有 5% 不到，而且存在很多兼容性问题。于是推倒重来，决定自研数据库驱动和连接池。</p><ul><li><strong>跳过不必要的编解码阶段</strong></li></ul><p>由于 JDBC 驱动会自动把 MySQL 的字节数据编解码成 Java 对象，然后 Proxy 再把这些结果集经过一些加工（元信息修正、结果集归并）后再进行编码返回给上游。如果自研驱动的话，就可以把编解码流程控制的更细致一些，把 Proxy 不需要加工的数据直接转发给上游，跳过无意义的编解码。后面会介绍一下哪些场景是不需要 Proxy 对结果集进行加工的。</p><h2>自研 NIO 数据库驱动</h2><p>数据库驱动主要是封装了与 DB 层交互协议，封装成高级 API。下面 2 张图是 java.sql 包中的 Connection 和 Statement 的一些核心接口。 <img src="https://oscimg.oschina.net/oscnet/up-517ee2a0bafe29e2a2e648762ed31d87bb9.jpg" alt="" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-3e947c153f1f81f011a177b66d7b2036cee.jpg" alt="" referrerpolicy="no-referrer"></p><p>所以首先我们需要了解一下，如何与数据库进行数据交互，以 MySQL 为例，使用 Netty 连接 MySQL，简单的交互流程如下。 <img src="https://oscimg.oschina.net/oscnet/up-99ac2f8e643ce9a4d7c1db6f7db7a20a81e.jpg" alt="" referrerpolicy="no-referrer"></p><p>使用 Netty 与 MySQL 连接建立后，我们要做的就是按照 MySQL 协议规定的数据格式，先鉴权后再发送具体的命令包即可。下面是 MySQL 官方文档中鉴权流程和命令执行流程：</p><ul><li><strong>鉴权流程</strong>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Fdev%2Fmysql-server%2Flatest%2Fpage_protocol_connection_phase.html" target="_blank">https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_connection_phase.html</a></li><li><strong>执行命令流程</strong>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Fdev%2Fmysql-server%2Flatest%2Fpage_protocol_command_phase.html" target="_blank">https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_command_phase.html</a></li></ul><p>下面就是按照 MySQL 的文档，去实现编解码 Handle，我们简单看一下实现的代码。 <img src="https://oscimg.oschina.net/oscnet/up-93dbe9735b43149a35e21ca060fb870ed92.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li>decode 解码</li></ul><p>就是针对 MySQL 返回的数据包解码，根据长度解析出 Palyload 封装成 MySQLPacketPayload 传给对应的 Handle 处理。</p><ul><li>encode 编码</li></ul><p>把具体的命令类转换成具体的 MySQL 数据包，这里的 MySQLPacket 有多个实现类，跟 MySQL 的 Command 类型一一对应。</p><p>现在还需要一个类似 java.sql.Connection 的实现类，来组装 MySQLPacket 并写入到 Netty 通道中，并且解析编码后的 MySQLPacketPayload 转换成 ResultSet。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5cf9d17b87a550d191bd089eef9e41f28fd.jpg" alt="" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-2c4b743cde5a7c667d2a2d04881afaf237a.jpg" alt="" referrerpolicy="no-referrer"> 看起来比较简单，交互流程和传统的 JDBC 几乎一样，但是由于现在是异步化流程，所有的 Response 都是通过回调返回，所以这里有 2 个难点：</p><ul><li>由于 MySQL 在上一条命令没结束前无法接受新的命令，所以如何控制单个连接的命令串行化？</li><li>如何将 MySQL 返回的数据包和发起命令的 Request 一一绑定？</li></ul><p>首先 NettyDbConnection 引入了一个无锁化非阻塞队列 ConcurrentLinkedQueue。 <img src="https://oscimg.oschina.net/oscnet/up-95d916682b2dd973e5096a9c7889a398b1c.jpg" alt="" referrerpolicy="no-referrer"></p><p>在发送 Command 时，如何没有正在进行中的 Command，则直接发送，如果有正在进行中的 Command，直接扔到队列中，等待上一条 Command 处理完成后推动下一条命令的执行。保证了单个连接命令串行化。</p><p>其次，NettyDbConnection 在执行命令时，传入一个 Promise，在 MySQL 数据包全部返回后，这个 Promise 将会被设置完成，即可于发起命令的 Request 一一绑定。 <img src="https://oscimg.oschina.net/oscnet/up-fbcb7f0a0133a4cb43712626f4fbfed08a3.jpg" alt="" referrerpolicy="no-referrer"></p><h2>自研 NIO 数据库连接池</h2><p>前面介绍了 NettyDbConnection 这个类，实现了与 MySQL 的交互，并且提供了执行 SQL 的高级 API，但实际使用过程中，不可能每次都创建一个连接执行完 SQL 就关闭。所以需要对 NettyDbConnection 进行池化，统一管理连接的生命周期。其功能类似于传统连接池 HikariCP，在完成基本能力的基础上，做了很多性能优化。</p><ul><li>连接生命周期管控</li><li>连接池动态伸缩</li><li>完善的监控</li><li>连接异步保活</li><li>超时控制</li><li>EventLoop 亲和性</li></ul><p>这里除了 EventLoop 亲和性，其他几个功能只要用过传统的数据库连接池应该都比较熟悉，这里不做过多展开。这里主要针对 EventLoop 亲和性展开介绍一下。</p><p>在文章开头我们说到 Proxy 的三层模块，Frontend、Core、Backend，如果现在我们把 Backend 层于数据库交互的组件换成了我们自研的驱动，那么 Proxy 就即是 Netty Server，也是 Netty Client，所以 Frontend 和 Backend 可以共用一个 EventLoopGroup。为了降低线程上下文切换，在单个请求从 Frontend 接收、经过 Core 层计算后转发到 MySQL ，再到接收 MySQL 服务响应，以及最终的回写给 Client 端，这一些列操作尽量放在一个 EventLoop 线程中处理。 <img src="https://oscimg.oschina.net/oscnet/up-e04581647d274a5cc64fded2d2f26bff551.jpg" alt="" referrerpolicy="no-referrer"></p><p>具体的做法就是 Backend 在选择与数据库连接时，优先选择与当前 EventLoop 绑定的连接。也就是前面提到的 EventLoop 亲和性，这样就能保证大部分场景下一次请求从头到尾都由同一个 EventLoop 处理，下面我们看一下具体的代码实现。</p><p>在 NettyDbConnectionPool 类中使用一个 Map 存储连接池中的空闲连接，Key 为 EventLoop，Value 为当前 EventLoop 绑定的空闲连接队列。 <img src="https://oscimg.oschina.net/oscnet/up-3099eb3f9c96d39f72551fa8442ebdce261.jpg" alt="" referrerpolicy="no-referrer"></p><p>在获取时，优先获取当前 EventLoop 绑定的连接，如果当前 EventLoop 未绑定连接，则会借用其他 EventLoop 的连接。 <img src="https://oscimg.oschina.net/oscnet/up-830d6a25ed63767ae092d9eaa272e7624b5.jpg" alt="" referrerpolicy="no-referrer"></p><p>为了提高&nbsp;EventLoop 命中率，需要注意几点配置：</p><ul><li>EventLoop 线程数量尽量与 CPU 核心数保持一致。</li><li>连接池最大连接数超过&nbsp;EventLoop 线程数越多，EventLoop 命中率越高。</li></ul><p>下面放一张压测环境（8C16G、连接池最大连接数 10~30）的命中率监控，大部分保持在 75% 左右。 <img src="https://oscimg.oschina.net/oscnet/up-2164ed7abbf169379e215ff14861f04d876.jpg" alt="" referrerpolicy="no-referrer"></p><h2>跳过不必要的编解码</h2><p>前面说到，有部分 SQL 的结果集是不需要 Proxy 进行加工的，也就是可以直接把 MySQL 返回的数据流原封不动转发给上游，直接省去编解码操作。那什么 SQL 是不需要 Proxy 进行加工的呢，我们举个例子说明一下。</p><p>假设逻辑库 A 里面有一张表 User 做了分库，分了 2 个库 DB1 和 DB2，分片算法是 user_id%2。</p><ul><li>SQL 1</li></ul><blockquote><p>‍SELECT id, name FROM user WHERE user_id in (1, 2)</p></blockquote><ul><li>SQL 2</li></ul><blockquote><p>‍SELECT id, name FROM user WHERE user_id in (1)</p></blockquote><p>很显然 SQL 1 由于有 2 个分片 Value，最终匹配到了 2 个节点，SQL 2 只会匹配到 1 个节点。 <img src="https://oscimg.oschina.net/oscnet/up-f6637b742c35d1af023f60cf01309006bc9.jpg" alt="" referrerpolicy="no-referrer"></p><p>SQL 1 由于需要对结果集进行归并，所以无法跳过编解码，SQL 2 不需要对结果集归并，只需要把结果集中的列定义数据做修正后，真正的 Row 数据无需处理，这种情况就可以把 Row 数据直接转发至上游。</p><h2>全链路异步化</h2><p>Backend 层用自研连接池+驱动替换原先的 HikariCP+JDBC 后，从 Frontend-Core-Backend 全链路涉及到阻塞的操作需要全部替换成异步化编码，也就是通过 Netty 的 Promise 和 Future 来实现。 <img src="https://oscimg.oschina.net/oscnet/up-3eb5da9b30f76427c3cddf2847919af3b71.jpg" alt="" referrerpolicy="no-referrer"></p><p>由于部分场景拿到 Future 时，可能当前 Future 已经完成了，如果每次都是无脑的加 Listener 会让调用栈加长，所以我们定义了一个通用的工具类来处理 Future，即 future.isDone() 时直接执行，反之才会 addListener，最大化降低整个调用栈的深度。 <img src="https://oscimg.oschina.net/oscnet/up-d36312a5a58e232274aa174dea7ccd9551a.jpg" alt="" referrerpolicy="no-referrer"></p><h2>兼容性</h2><p>除了以上基本代码的改造外，还需要做大量的兼容工作：</p><ul><li>特殊数据库字段类型处理</li><li>JDBC URL 参数兼容</li><li>ThreadLocal 相关数据全部需要迁移至 ChannelHandlerContext 中</li><li>日志 MDC、TraceContext 相关数据传递</li><li>……</li></ul><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>四、性能表现</h1><p>经过几轮性能压测后，NIO 架构相较于 BIO 架构性能有较大提升：</p><ul><li>整体最大吞吐量提升 67%</li><li>LOAD 下降 37% 左右</li><li>高负载情况下 BIO 多次出现进程夯住现象，NIO 相对较稳定</li><li>线程数减少 98% 左右</li></ul><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>‍五、总结</h1><p>NIO 架构的改造工作量相当巨大，中间也经历了一些曲折，但是最终的结果令人满意。得益于 ShardingShpere 本身内核层面的高性能加上本次 NIO 改造后，彩虹桥在 DAL 中间件性能层面基本上可以算是第一梯队了。</p><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><p>*文 / 新一</p><p>本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" target="_blank">得物技术官网</a></p><p>未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10143389</guid>
            <link>https://my.oschina.net/u/5783135/blog/10143389</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 董事会与 Sam Altman 讨论重返 CEO 岗位事宜]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">The Verge 援引多位知情人士消息称，OpenAI 董事会正在与 Sam Altman 讨论重返公司担任首席执行官的事宜。</span></p><p><span style="color:#000000">其中一位知情人士表示，在经历了没有任何通知就突然被董事会解雇的 Altman 对回归一事"态度暧昧"，并希望对公司的治理模式进行重大变革。</span></p><p><img height="358" src="https://oscimg.oschina.net/oscnet/up-7c44d0d4980461dc3b0cab2147edf5763c7.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">事实上，在 OpenAI 董事会宣布解雇了 Altman 几小时后；被免去董事会主席职务的 Greg Brockman 就公开宣布辞职，后续还有多位 OpenAI 高管也陆续辞职。一些风险投资家也公开声明表示支持 Altman，红杉资本普通合伙人 Alfred Lin 在推特上发文称，期待着 Altman 和 Brockman 建立下一个改变世界的公司。OpenAI 最大的投资者微软则在 Altman 被解雇后不久发表声明称，该公司「将继续致力于」与 OpenAI 的合作关系。</span></p><p><span style="color:#000000">事件后续的进展是，Altman 和董事会约定了一个时间点 —— 在当地时间下午 5 点之前达成停战协议，即董事会辞职，他和 Brockman 回归。然后董事会的摇摆不定导致他们错过了这一时间期限。</span></p><p><span style="color:#000000">如果不能尽快达成协议，Altman 和 Brockman 的离开势必会带走更多 OpenAI 员工。两人一直在与朋友和投资者讨论创办另一家公司的事宜，如果 Altman 决定离开并创办一家新公司，肯定会有大批员工追随。目前 OpenAI 的发言人仍未回应有关 Altman 与董事会讨论回归事宜的置评请求。微软发言人则拒绝发表评论。</span></p><p><span style="color:#000000">OpenAI 当下的董事会成员包括首席科学家 Ilya Sutskever、Quora 首席执行官 Adam D'Angelo、前 GeoSim Systems 首席执行官 Tasha McCauley 以及乔治城安全与新兴技术中心战略总监 Helen Toner 组成。</span></p><p><span style="color:#000000">多位消息人士透露，Sutskever 也是 OpenAI 的联合创始人之一并领导着 OpenAI 的研究团队，他在罢免 Altman 的过程中发挥了重要作用。而他在这次政变中的角色也表明，公司的研发部门和产品部门之间存在权力斗争。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/267006/openai-ceo-sam-altman-fired" target="_blank">OpenAI 董事会内讧，CEO 兼创始人 Sam Altman 被逐出公司</a></li><li><a href="https://www.oschina.net/news/267013/openai-greg-brockman-quit" target="_blank">OpenAI 总裁 Greg Brockman 辞职</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267101/openai-board-discussions-with-sam-altman-return-as-ceo</guid>
            <link>https://www.oschina.net/news/267101/openai-board-discussions-with-sam-altman-return-as-ceo</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国科学院软件所在分组加密算法差分密码分析方面取得进展]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">中国科学院软件研究所可信智能系统研究团队在分组加密算法的差分密码分析方面取得<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FbrkeBtNVsRP27RgnXZLnVg" target="_blank">进展</a>。该工作设计了一个面向分组加密算法的领域编程语言 EasyBC，在此基础上提出了通用、可扩展的差分密码分析方法，研制了全自动分析工具平台 EasyBC （如图 1）。</span></p><p><span style="color:#000000">该研究成果以_EasyBC: A Cryptography-Specific Language for Security Analysis of Block Ciphers against Differential Cryptanalysis_为题被编程语言国际顶级会议 POPL 2024 录用，通讯作者是软件所计算机科学国家重点实验室宋富研究员。</span></p><p><span style="color:#000000"><img alt="" height="122" src="https://oscimg.oschina.net/oscnet/up-3680dde4b4183fc67c37f117d71002e2e79.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="color:#000000">图 1. EasyBC 平台流程图</span></em></p><p><span style="color:#000000">分组加密算法（block cipher）是将明文分成多个等长的模块（block），使用对称密钥对每组分别加密或解密，广泛应用于电子邮件加密、银行交易转帐等多个领域。作为极其重要的加密协议组成，主流分组加密算法有中国国家密码管理局颁布的 SM1、SM4 和 SM7，美国政府核定的标准算法 AES 和 3DES。而差分密码分析在评估分组加密算法的安全性方面发挥着核心作用，是分组加密算法标准化不可或缺的安全性分析手段。当前已有的差分密码分析方法在通用性、自动化程度方面存在一定不足，同时建模过程复杂导致用户需要熟悉大量的建模方法及底层分析工具的应用。</span></p><p><span style="color:#000000">为解决上述不足，研究团队设计了一种分组加密算法的密码学专用高级编程语言 EasyBC，提供了完整的语法、类型和语义的形式定义，为分组加密算法安全性自动分析奠定了良好基础；提出了三种不同分析精度和性能的差分密码分析方法，不仅统一和优化了已有的各类加密操作的建模方法，并提出了多种新的建模方法。</span></p><p><span style="color:#000000">研究团队实现了 23 个加密原语，包括美国国家标准与技术研究院（National Institute of Standards and Technology，NIST）认证加密方案的底层置换算法以及多种常用分组加密算法（如图 2）；并对其中的分组密码原语进行了安全性分析（如图 3），进而验证了 EasyBC 语言的表达能力以及 EasyBC 工具平台安全性自动分析的有效性。</span></p><p><span style="color:#000000"><img alt="" height="184" src="https://oscimg.oschina.net/oscnet/up-6c84d792455028442affb5312288fbac624.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="color:#000000">图 2.EasyBC 语言实现的 23 个加密原语</span></em></p><p><em><span style="color:#000000"><img alt="" height="171" src="https://oscimg.oschina.net/oscnet/up-55a59db5baf9240d59fc4e82c667f38b199.png" width="500" referrerpolicy="no-referrer"></span></em></p><p><em><span style="color:#000000">图 3.Word-wise 实现的加密原语差分密码安全性分析结果</span></em></p><p><span style="color:#000000">该研究对分组加密算法的差分密码分析研究具有重要意义，为后续密码学相关研究者们进行分组加密算法的安全性全自动分析和各类运算操作建模方法性能评估提供了良好的研究基础和平台支撑。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left"><strong>论文信息：</strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left"><em>EasyBC: A Cryptography-Specific Language for Security Analysis of Block Ciphers against Differential Cryptanalysis</em>. Pu Sun (ShanghaiTech University), Fu Song* (Institute of Software Chinese Academy of Sciences, and University of Chinese Academy of Sciences), Yuqi Chen (ShanghaiTech University), Taolue Chen (Birkbeck, University of London). Proc. ACM Program. Lang. 8, POPL, Article 29 (January 2024), 33 pages.<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.1145%2F3632871" target="_blank">https://doi.org/10.1145/3632871</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 04:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267024</guid>
            <link>https://www.oschina.net/news/267024</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Vite 5 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Vite 5 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite5" target="_blank">发布</a>，这是&nbsp;<span style="background-color:#ffffff"><span style="color:#3c3c43">Vite 发展道路上的又一个重要里程碑。新版本采用了&nbsp;</span></span>Rollup 4，大大提升了构建性能；此外还带来了一些新选项，可用于提高开发服务器的性能。</p><p>公告指出，Vite 5 的重点是清理 API（删除已弃用的功能），并精简了几个功能以解决长期存在的问题。例如，将<code>define</code>转换为使用正确的 AST 替换，而不是使用 regexes。<span style="background-color:#ffffff"><span style="color:#3c3c43">项目团队表示，他们将继续推进实现面向未来的 Vite</span></span>。</p><p><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-e7629b74c8fb7a720fb655b79a295d3134e.png" width="500" referrerpolicy="no-referrer"></p><h4><strong><span style="color:#3c3c43"><span style="background-color:#ffffff">Node.js 支持<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite5%23node-js-support" target="_blank">​</a></span></span></strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#3c3c43"><span style="background-color:#ffffff">Vite 不再支持已 EOL 的 Node.js 14 / 16 / 17 / 19。现在需要 Node.js 18 / 20+。</span></span></p><h4><strong>性能</strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#3c3c43"><span style="background-color:#ffffff">除了 Rollup 4 的构建性能改进之外，还有一个新指南可帮助用户识别和修复常见性能问题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fperformance" target="_blank">https://vitejs.dev/guide/performance</a>。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#3c3c43"><span style="background-color:#ffffff">Vite 5 还引入了&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fperformance%23warm-up-frequently-used-files" target="_blank">server.warmup</a>，这是一个改善启动时间的新功能。它允许你定义应在服务器启动后立即进行预转换的模块列表。当使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fconfig%2Fserver-options%23server-open" target="_blank"><code>--open</code></a>或 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fconfig%2Fserver-options%23server-open" target="_blank"><code>server.open</code></a>时，Vite 还会自动预热应用程序的 entry point 或所提供的 URL，以便打开。</span></span></p><h4><strong><span style="color:#3c3c43"><span style="background-color:#ffffff">主要变化<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite5%23main-changes" target="_blank">​</a></span></span></strong></h4><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23rollup-4" target="_blank">Vite 现已由 Rollup 4 提供支持</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23deprecate-cjs-node-api" target="_blank">CJS Node API 已被弃用</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23rework-define-and-import-meta-env-replacement-strategy" target="_blank">Rework<code>define</code> 和<code>import.meta.env.*</code> 替换策略</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23ssr-externalized-modules-value-now-matches-production" target="_blank">SSR 外部化模块值现已与 production 一致</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23worker-plugins-is-now-a-function" target="_blank"><code>worker.plugins</code>现在是一个函数</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23allow-path-containing-to-fallback-to-index-html" target="_blank">允许包含<code>.</code>的路径回退到 index.html</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23align-dev-and-preview-html-serving-behaviour" target="_blank">协调开发和预览 HTML serving 行为</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23manifest-files-are-now-generated-in-vite-directory-by-default" target="_blank">现在默认在<code>.vite</code>目录中生成 Manifest 文件</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23cli-shortcuts-require-an-additional-enter-press" target="_blank">CLI 快捷键需要额外按下<code>Enter</code>键</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23update-experimentaldecorators-and-usedefineforclassfields-typescript-behaviour" target="_blank">更新<code>experimentalDecorators</code>和<code>useDefineForClassFields</code>TypeScript 行为</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23remove-https-flag-and-https-true" target="_blank">移除<code>--https</code>flag 和<code>https: true</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23remove-resolvepackageentry-and-resolvepackagedata-apis" target="_blank">移除<code>resolvePackageEntry</code>和<code>resolvePackageData</code>API</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23removed-deprecated-apis" target="_blank">移除之前已弃用的 API</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23advanced" target="_blank">了解更多有关影响插件和工具作者的高级更改信息</a></li></ul><p>更多详情可查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvitejs%2Fvite%2Fblob%2Fmain%2Fpackages%2Fvite%2FCHANGELOG.md%23500-2023-11-16" target="_blank">Vite 5 Changelog</a><span style="color:#3c3c43">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 03:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267021/vite5-released</guid>
            <link>https://www.oschina.net/news/267021/vite5-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[667 天后，Openfire 4.8.0 beta 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">Openfire 是一个使用广泛采用的即时消息开放协议 XMPP（也称为 Jabber）的 RTC（Real Time Collaboration，实时协作） 服务器，它非常易于设置和管理，提供良好的安全性和性能。</span></span></p><p><span style="color:#000000">在距离&nbsp;<span style="background-color:#ffffff">4.7.0 发布过去了 667 天后，Openfire 4.8.0 beta 现<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.igniterealtime.org%2Ft%2Fopenfire-4-8-0-beta-release%2F93338" target="_blank">宣布</a>立即可用。「</span>这是最后一次从同一源代码分支发布版本。而且这表明：我们已经解决了针对此版本的近 180 个问题<span style="background-color:#ffffff">」。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">一些更新亮点包括：</span></span></p><ul><li><span style="color:#000000">已经放弃了对 Java 8 的支持。现在最低要求是 Java 11</span></li><li><span style="color:#000000">异步网络堆栈的完整重新实现，提高了稳定性和性能</span></li><li><span style="color:#000000">所有已知的 TLSv1.3 问题均已解决</span></li></ul><p><span style="color:#000000">公告表示，开发人员和 Ignite Realtime 社区的其他成员已对该测试版（及其部分先行版本）进行了广泛测试，在现阶段没有发现任何关键问题。但在正式发布前，还是希望有更多用户给出反馈。</span></p><p>下载：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.igniterealtime.org%2Fdownloads%2Fbeta.jsp" target="_blank">https://www.igniterealtime.org/downloads/beta.jsp</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267017/openfire-4-8-0-beta-released</guid>
            <link>https://www.oschina.net/news/267017/openfire-4-8-0-beta-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OneTable —— Lakehouse 表格式间全方位互操作]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#1f2328">OneTable 是一种表格式的全方位转换器，可促进数据处理系统和查询引擎之间的互操作性</span><span style="color:#000000">。Apache Hudi、Delta Lake 和 Apache Iceberg 之间无缝互操作。</span></p><p>OneTable 不是一种新的或独立的格式，OneTable 提供了用于转换 Lakehouse 表格式元数据的抽象和工具</p><p><span><span>OneTable 通过利用表表示的通用模型来简化数据湖操作。这允许用户以一种格式写入数据，同时仍然受益于其他格式的集成和功能。例如，OneTable 使现有的 Hudi 用户能够无缝地使用 Databricks 的 Photon Engine 或使用 Snowflake 查询 Iceberg 表。创建从一种格式到另一种格式的转换非常简单，只需要实现一些接口，项目团队认为，这将有助于将来支持的源格式和目标格式的扩展。</span></span></p><p style="margin-left:0px; margin-right:0px"><img alt="" height="414" src="https://static.oschina.net/uploads/space/2023/1116/163549_inUl_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 03:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/onetable</guid>
            <link>https://www.oschina.net/p/onetable</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 运行在 Python 虚拟机上的面向对象编程语言 AIL]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-ail-30-alpha-3" class="anchor" href="https://gitee.com/LaomoBK/ail#ail-30-alpha-3"></a>AIL 3.0 alpha 3</h1><p><a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/whatsnew.md">AIL 3.0 Kirara 版本更新内容</a></p><p><a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/versions/2_3.md">AIL 2.3 Diona 版本更新内容</a></p><p><a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/versions/2_2.md">AIL 2.2 Klee 版本更新内容</a></p><p><img src="https://img.shields.io/badge/AIL-Programming%20Language-blue" alt="AIL badge" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/python-3.8-blue" alt="python badge" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/version-3.0%20alpha-success" alt="version badge" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-GPL-blue" alt="license badge" referrerpolicy="no-referrer"></p><p>AIL 是一门开源的运行在 Python 虚拟机上的面向对象的编程语言。支持 Python 的大多数特性的同时，还额外增加了如 match 表达式，匿名函数，名称空间等 AIL 自身的特性。</p><h2><a id="user-content-环境需求" class="anchor" href="https://gitee.com/LaomoBK/ail#%E7%8E%AF%E5%A2%83%E9%9C%80%E6%B1%82"></a>环境需求</h2><p><strong>具有完整标准库的 Python3.8</strong></p><p>推荐使用 <strong>cpython</strong> 解释器，其他 Python 解释器并未进行过测试。</p><h2><a id="user-content-hello-world" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world"></a>Hello World</h2><h4><a id="user-content-hello-world-with-one-statement" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-with-one-statement"></a>Hello World with one statement</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">print</span><span class="s">'Hello World'</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>..or..</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">console</span><span class="p">.</span><span class="n">writeln</span><span class="p">(</span><span class="s">'Hello World!'</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-lambda" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-lambda"></a>Hello World in lambda</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">(()</span><span class="o">-&gt;</span><span class="n">console</span><span class="p">.</span><span class="n">writeln</span><span class="p">(</span><span class="s">'Hello World'</span><span class="p">))();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-function" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-function"></a>Hello World in function</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">func</span><span class="nf">helloWorld</span><span class="p">()</span><span class="p">{</span></span><span id="LC2" class="line"><span class="n">print</span><span class="s">"Hello World!"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="p">}</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="nf">helloWorld</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-anonymous-function" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-anonymous-function"></a>Hello World in anonymous function</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">(</span><span class="nf">func</span><span class="p">()</span><span class="p">{</span></span><span id="LC2" class="line"><span class="n">print</span><span class="s">"Hello World!"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="p">})();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-class" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-class"></a>Hello World in class</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">class</span><span class="kt">Hello</span><span class="p">{</span></span><span id="LC2" class="line"><span class="kd">func</span><span class="nf">helloWorld</span><span class="p">(</span><span class="k">self</span><span class="p">)</span><span class="p">{</span></span><span id="LC3" class="line"><span class="n">print</span><span class="s">"Hello World!"</span><span class="p">;</span></span><span id="LC4" class="line"><span class="p">}</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="kt">Hello</span><span class="p">()</span><span class="o">.</span><span class="nf">helloWorld</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-斐波那契数列" class="anchor" href="https://gitee.com/LaomoBK/ail#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97"></a>斐波那契数列</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">func</span><span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="p">{</span></span><span id="LC2" class="line"><span class="k">if</span><span class="n">n</span><span class="o">==</span><span class="mi">1</span><span class="n">or</span><span class="n">n</span><span class="o">==</span><span class="mi">2</span><span class="p">{</span></span><span id="LC3" class="line"><span class="k">return</span><span class="mi">1</span><span class="p">;</span></span><span id="LC4" class="line"><span class="p">}</span><span class="n">elif</span><span class="n">n</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">{</span></span><span id="LC5" class="line"><span class="k">return</span><span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span></span><span id="LC6" class="line"><span class="p">}</span></span><span id="LC7" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>以上例子均在 AIL 3.0 alpha 0 版本下测试通过</p><h2><a id="user-content-主要语言特性" class="anchor" href="https://gitee.com/LaomoBK/ail#%E4%B8%BB%E8%A6%81%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7"></a>主要语言特性</h2><p><em>以下例子均已在 AIL 2.3 版本下通过编译</em></p><h3><a id="user-content-更多的-for-语句" class="anchor" href="https://gitee.com/LaomoBK/ail#%E6%9B%B4%E5%A4%9A%E7%9A%84-for-%E8%AF%AD%E5%8F%A5"></a>更多的 for 语句</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">for</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="n">i</span><span class="o">&lt;</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="n">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-=</span><span class="mi">1</span><span class="p">{</span></span><span id="LC2" class="line"><span class="c1">// ...</span></span><span id="LC3" class="line"><span class="p">}</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="k">for</span><span class="p">{</span></span><span id="LC6" class="line"><span class="c1">// forever...</span></span><span id="LC7" class="line"><span class="p">}</span></span><span id="LC8" class="line"></span><span id="LC9" class="line"><span class="n">foreach</span><span class="n">i</span><span class="k">in</span><span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="p">{</span></span><span id="LC10" class="line"><span class="c1">// ...</span></span><span id="LC11" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-namespace-名称空间" class="anchor" href="https://gitee.com/LaomoBK/ail#namespace-%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4"></a>namespace 名称空间</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">namespace</span><span class="n">Vegetables</span><span class="p">{</span></span><span id="LC2" class="line"><span class="n">cabbage</span><span class="o">=</span><span class="s">'cabbage'</span><span class="p">;</span></span><span id="LC3" class="line"><span class="n">leaf_mustard</span><span class="o">=</span><span class="s">'mustard'</span><span class="p">;</span></span><span id="LC4" class="line"><span class="p">}</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="n">namespace</span><span class="n">Fruits</span><span class="p">{</span></span><span id="LC8" class="line"><span class="n">apple</span><span class="o">=</span><span class="s">'apple'</span><span class="p">;</span></span><span id="LC9" class="line"><span class="n">tomato</span><span class="o">=</span><span class="s">'tomato'</span><span class="p">;</span></span><span id="LC10" class="line"><span class="p">}</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"></span><span id="LC13" class="line"><span class="k">print</span><span class="s">'An %s a day keeps the doctor away'</span><span class="o">%</span><span class="n">Fruits</span><span class="p">.</span><span class="n">apple</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-强大的-match-表达式" class="anchor" href="https://gitee.com/LaomoBK/ail#%E5%BC%BA%E5%A4%A7%E7%9A%84-match-%E8%A1%A8%E8%BE%BE%E5%BC%8F"></a>强大的 match 表达式</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">name</span><span class="o">=</span><span class="n">match</span><span class="n">lang_name</span><span class="p">{</span></span><span id="LC2" class="line"><span class="s">'Python'</span><span class="p">:</span><span class="s">'py'</span><span class="p">,</span></span><span id="LC3" class="line"><span class="s">'Java'</span><span class="p">:</span><span class="s">'java'</span><span class="p">,</span></span><span id="LC4" class="line"><span class="s">'AIL'</span><span class="p">:</span><span class="s">'ail'</span><span class="p">,</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="p">(</span><span class="n">match</span><span class="n">point</span><span class="p">{</span></span><span id="LC8" class="line"><span class="n">Point</span><span class="err">!</span><span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="mi">6</span><span class="p">}:</span><span class="p">()</span><span class="o">-&gt;</span><span class="p">{</span></span><span id="LC9" class="line"><span class="o">//</span><span class="n">handle</span><span class="n">it</span><span class="p">...</span></span><span id="LC10" class="line"><span class="p">},</span></span><span id="LC11" class="line"><span class="k">else</span><span class="p">:</span><span class="p">()</span><span class="o">-&gt;</span><span class="p">{</span></span><span id="LC12" class="line"><span class="o">//</span><span class="n">handle</span><span class="n">it</span><span class="p">...</span></span><span id="LC13" class="line"><span class="p">}</span></span><span id="LC14" class="line"><span class="p">})();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-通过引用-global-变量在-local-域中定义同名变量" class="anchor" href="https://gitee.com/LaomoBK/ail#%E9%80%9A%E8%BF%87%E5%BC%95%E7%94%A8-global-%E5%8F%98%E9%87%8F%E5%9C%A8-local-%E5%9F%9F%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F"></a>通过引用 global 变量在 local 域中定义同名变量</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">a</span><span class="o">=</span><span class="m">10</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="k">func</span><span class="n">f</span><span class="p">()</span><span class="p">{</span></span><span id="LC4" class="line"><span class="n">a</span><span class="o">:=</span><span class="n">a</span><span class="p">;</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-与-python-协作" class="anchor" href="https://gitee.com/LaomoBK/ail#%E4%B8%8E-python-%E5%8D%8F%E4%BD%9C"></a>与 Python 协作</h3><p>在 AIL 中可以直接导入 Python 模块，使用类似 Python 的 import 语句：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="err">!</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="k">as</span><span class="n">ospath</span><span class="p">;</span></span><span id="LC2" class="line"><span class="k">import</span><span class="err">!</span><span class="n">numpy</span><span class="k">as</span><span class="n">np</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kn">from</span><span class="nn">PIL</span><span class="kn">import</span><span class="n">Image</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'klee.jpg'</span><span class="p">).</span><span class="n">show</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>亦或是在 AIL 程序中直接插入 Python 代码：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">func</span><span class="nf">gen</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="p">{</span></span><span id="LC2" class="line"><span class="cp">#return [x**n for x in range(n)]</span></span><span id="LC3" class="line"><span class="p">}</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="n">print</span><span class="nf">gen</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-安装-ail" class="anchor" href="https://gitee.com/LaomoBK/ail#%E5%AE%89%E8%A3%85-ail"></a>安装 AIL</h2><p>运行 AIL 事先准备好的 <strong>setup.py</strong> 可以非常快速地在您的电脑上配置好 AIL。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python3 setup.py <span class="nb">install</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在终端中输入:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">ail</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python3 -m ail</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p><em><strong>Windows 下应确保 {PYTHON_HOME}/Script/ 已添加到 PATH 中</strong></em><em><strong>Linux/Mac OS 下应确保当前用户的 bin 目录已添加到 PATH 中</strong></em></p><p>若进入 AIL 的交互环境，则安装成功。</p><h2><a id="user-content-文档" class="anchor" href="https://gitee.com/LaomoBK/ail#%E6%96%87%E6%A1%A3"></a>文档</h2><p>AIL 的文档仍然在完善中。具体的进度可以在 <code>/docs/</code> 中查看。</p><h2><a id="user-content-ail-语句" class="anchor" href="https://gitee.com/LaomoBK/ail#ail-%E8%AF%AD%E5%8F%A5"></a>AIL 语句</h2><p>文档 <a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/reference/statements.md">AIL 语句</a> 简要地描述了 AIL 的语句</p><h2><a id="user-content-vim-语法高亮支持" class="anchor" href="https://gitee.com/LaomoBK/ail#vim-%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%94%AF%E6%8C%81"></a>VIM 语法高亮支持</h2><p>AIL 为 vim 专门编写了其语法高亮文件，写代码的时候妈妈再也不会担心敲错关键字了！</p><p>提供了如下高亮支持：</p><ul><li>关键字</li><li>字符串、数字</li><li>基本类型注解</li><li>AIL 与 Python 内置函数、常量</li></ul><p><img src="https://gitee.com/LaomoBK/ail/raw/2.3/misc/vim_highlight.jpg" alt="vim highlight" referrerpolicy="no-referrer"></p><h4><a id="user-content-配置" class="anchor" href="https://gitee.com/LaomoBK/ail#%E9%85%8D%E7%BD%AE"></a>配置</h4><ol><li>将 <strong>plugin/vim/syntax/ail.vim</strong> 与 <strong>plugin/vim/ftdetect/ail.vim</strong> 分别复制到 <strong>{VIM_HOME}/syntax/</strong> 和 <strong>{VIM_HOME}/ftdetect/</strong></li><li>重新启动 vim 即可</li></ol><h2><a id="user-content-treetxt" class="anchor" href="https://gitee.com/LaomoBK/ail#treetxt"></a>tree.txt</h2><p>这是最早期 AIL 语法分析器生成的语法树</p><p><em>对应的程序<strong>应该</strong>可以在早期 commit 中找到</em></p>]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/LaomoBK/ail</guid>
            <link>https://gitee.com/LaomoBK/ail</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Transformers 中原生支持的量化方案概述]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section data-tool="mdnice 编辑器" data-website="https://www.mdnice.com" style="font-size: 16px;color: black;padding-right: 10px;padding-left: 10px;line-height: 1.6;letter-spacing: 0px;word-break: break-word;text-align: left;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;" data-mpa-powered-by="yiban.io"><span style="font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: 0px;text-align: left;text-wrap: wrap;color: rgb(58, 58, 58);">本文旨在对 transformers 支持的各种量化方案及其优缺点作一个清晰的概述，以助于读者进行方案选择。</span></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">目前，量化模型有两个主要的用途:</p><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;width: 557.438px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     在较小的设备上进行大模型推理 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     对量化模型进行适配器微调 
   </section></li></ul><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">到目前为止，transformers 已经集成并&nbsp;<strong style="color: black;">原生</strong>&nbsp;支持了&nbsp;<em style="color: black;">bitsandbytes</em>&nbsp;和&nbsp;<em style="color: black;">auto-gptq</em>&nbsp;这两个量化库。请注意，🤗 optimum 还支持更多的量化方案，但本文不会涉及这一块内容。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">要详细了解每种方案的更多信息，可查看下文列出的相关资源，或者阅读相应的&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">transformers</code>&nbsp;文档。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">另请注意，下文内容仅适用于&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">PyTorch</code>&nbsp;模型，&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">Tensorflow</code>&nbsp;和&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">Flax/JAX</code>&nbsp;模型不在讨论范围之内。</p><span id="OSC_h2_1"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 2em;margin-bottom: 35px;font-weight: bold;font-size: 22px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;color: rgb(255, 157, 0);"><span style="margin-right: 3px;padding: 2px 13px;color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);height: 30.3958px;font-size: 18px;">目录</span><span style="padding-left: 10px;font-size: 18px;color: rgb(255, 157, 11);display: inline-block;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;width: 557.438px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     资源 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     bitsandbytes 与 auto-gptq 之比较 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     深入研究速度基准 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     总结与最后的话 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     致谢 
   </section></li></ul><span id="OSC_h2_2"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 2em;margin-bottom: 35px;font-weight: bold;font-size: 22px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;color: rgb(255, 157, 0);"><span style="margin-right: 3px;padding: 2px 13px;color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);height: 30.3958px;font-size: 18px;">资源</span><span style="padding-left: 10px;font-size: 18px;color: rgb(255, 157, 11);display: inline-block;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;width: 557.438px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     GPTQ 博文&nbsp;– 概述什么是 GPTQ 量化方法以及如何使用它。 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     bistandbytes 4 比特量化博文&nbsp;- 本文介绍了 4 比特量化和 QLoRa，QLoRa 是一种高效的微调方法。 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     bistandbytes 8 比特量化博文&nbsp;- 本文解释了如何与 bitsandbytes 配合使用 8 比特量化。 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     有关 GPTQ 基础用法的 Google Colab 笔记本&nbsp;- 本笔记本展示了如何使用 GPTQ 方法量化你自己的 transformer 模型，如何用量化模型进行推理，以及如何对量化模型进行微调。 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     有关 bitsandbytes 基础用法的 Google Colab 笔记本&nbsp;- 该笔记本展示了如何在推理中使用 4 比特模型及其所有变体，以及如何在免费的 Google Colab 实例上运行 GPT-neo-X (20B 模型)。 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     Merve 撰写的关于量化的博文&nbsp;- 本文简要介绍了量化以及 transformers 中原生支持的量化方法。 
   </section></li></ul><span id="OSC_h2_3"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 2em;margin-bottom: 35px;font-weight: bold;font-size: 22px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;color: rgb(255, 157, 0);"><span style="margin-right: 3px;padding: 2px 13px;color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);height: 30.3958px;font-size: 18px;">bitsandbytes 与 auto-gptq 之比较</span><span style="padding-left: 10px;font-size: 18px;color: rgb(255, 157, 11);display: inline-block;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">本节我们将讨论&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">bitsandbytes</code>&nbsp;和&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">gptq</code>&nbsp;量化各自的优缺点。请注意，这些比较主要基于社区的反馈，它们具有一定的时效性，会随着时间的推移而变化，比如说其中一些功能缺失已被纳入相应库的路线图中了。</p><span id="OSC_h3_4"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">bitsandbytes 有什么好处？</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">简单</strong>: bitsandbytes 依旧是量化任何模型的最简单方法，因为它不需要量化校准数据及校准过程 (即零样本量化)。任何模型只要含有&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">torch.nn.Linear</code>&nbsp;模块，就可以对其进行开箱即用的量化。每当在&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">transformers</code>&nbsp;中添加新架构时，只要其可以用&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">accelerate</code>&nbsp;库的&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">device_map="auto"</code>&nbsp;加载，用户就可以直接受益于开箱即用的 bitsandbytes 量化，同时该方法对性能的影响也是最小的。量化是在模型加载时执行的，无需运行任何后处理或准备步骤。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">跨模态互操作性</strong>: 由于量化模型的唯一条件是包含&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">torch.nn.Linear</code>&nbsp;层，因此量化对于任何模态都可以实现开箱即用。用户可以开箱即用地加载诸如 Whisper、ViT、Blip2 之类的 8 比特或 4 比特模型。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">合并适配器 (adapter) 时性能下降为 0</strong>: (如果你对此不熟悉，请参阅&nbsp;此文&nbsp;以获得有关适配器和 PEFT 的更多信息)。如果你在量化基础模型之上训练适配器，则可以将适配器合并在基础模型之上进行部署，而不会降低推理性能。你甚至还可以在反量化模型之上&nbsp;合并&nbsp;适配器！GPTQ 不支持此功能。</p><span id="OSC_h3_5"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">autoGPTQ 有什么好处？</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">文本生成速度快</strong>: 对&nbsp;文本生成&nbsp;任务而言，GPTQ 量化模型的速度比 bitsandbytes 量化模型的速度更快，下文我们会详细比较。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">n 比特支持</strong>: GPTQ 算法可以将模型量化至 2 比特！但这可能会导致严重的质量下降。我们建议使用 4 比特，这个值对 GPTQ 而言是个很好的折衷。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">易于序列化</strong>: GPTQ 模型支持任意比特的序列化。只要安装了所需的软件包，就支持开箱即用地从 TheBloke 空间&nbsp;中加载后缀为&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">-GPTQ</code>&nbsp;的模型。bitsandbytes 支持 8 比特序列化，但尚不支持 4 比特序列化。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">AMD 支持</strong>: 开箱即用支持 AMD GPU！</p><span id="OSC_h3_6"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">bitsandbytes 还有哪些潜在的改进空间？</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">文本生成速度比 GPTQ 慢</strong>: 使用&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">generate</code>&nbsp;接口时，bitsandbytes 4 比特模型比 GPTQ 慢。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">4 比特权重不可序列化</strong>: 目前，4 比特模型无法序列化。社区用户经常提出这样的请求，我们相信 bitsandbytes 维护者应该很快就能解决这个问题，因为这已经在其路线图中了！</p><span id="OSC_h3_7"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">autoGPTQ 还有哪些潜在的改进空间？</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">校准数据集</strong>: 对校准数据集的需求可能会让一些用户难以用上 GPTQ。此外，模型量化可能需要几个小时 (例如，根据&nbsp;该论文第 2 节，175B 的模型需要 4 个 GPU 时)。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><strong style="color: black;">目前仅可用于语言模型</strong>: 截至目前，用 autoGPTQ 对模型进行量化的 API 仅支持语言模型。使用 GPTQ 算法量化非文本 (或多模态) 模型应该是可行的，但原始论文或 auto-gptq 代码库中尚未对此有详细说明。如果社区对这方面很有兴趣，将来可能会考虑这一点。</p><span id="OSC_h2_8"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 2em;margin-bottom: 35px;font-weight: bold;font-size: 22px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;color: rgb(255, 157, 0);"><span style="margin-right: 3px;padding: 2px 13px;color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);height: 30.3958px;font-size: 18px;">深入研究速度基准</span><span style="padding-left: 10px;font-size: 18px;color: rgb(255, 157, 11);display: inline-block;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">我们决定在不同硬件上使用 bitsandbytes 和 auto-gptq 在推理和适配器微调这两大场景上进行一系列广泛的基准测试。推理基准测试应该让用户了解不同推理方法之间可能存在的速度差异，而适配器微调基准测试应该让用户在需要决定选择 bitsandbytes 还是 GPTQ 基础模型进行适配器微调时有一个清晰的判断。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">基本设置如下:</p><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;width: 557.438px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     bitsandbytes: 使用&nbsp; 
    <code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">bnb_4bit_compute_dtype=torch.float16</code>&nbsp;进行 4 比特量化。确保使用&nbsp; 
    <code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">bitsandbytes&gt;=0.41.1</code>&nbsp;，以用上 4 比特加速核函数。 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     auto-gptq: 确保&nbsp; 
    <code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">auto-gptq&gt;=0.4.0</code>&nbsp;以用上&nbsp; 
    <code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">exllama</code>&nbsp;加速核函数进行 4 比特量化。 
   </section></li></ul><span id="OSC_h3_9"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">推理速度 (仅前向)</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">该基准测试仅测量预填充 (prefill) 步骤，该步骤对应于训练期间的前向传递。测试基於单张英伟达 A100-SXM4-80GB GPU，提示长度为 512，模型为&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">meta-llama/Llama-2-13b-hf</code>&nbsp;。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">batch size = 1 时:</p><section data-tool="mdnice 编辑器" style="margin-bottom: 0px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">量化方法</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">act_order</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">比特数</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">group_size</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">加速核</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">加载时间 (秒)</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">每词元延迟 (毫秒)</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">吞吐 (词元/秒)</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">峰值显存 (MB)</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">fp16</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">26.0</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">36.958</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">27.058</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">29152.98</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">gptq</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">False</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">128</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">exllama</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">36.2</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">33.711</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">29.663</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">10484.34</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">bitsandbytes</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">37.64</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">52.00</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">19.23</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">11018.36</td></tr></tbody></table></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">batch size = 16 时:</p><section data-tool="mdnice 编辑器" style="margin-bottom: 0px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">量化方法</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">act_order</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">比特数</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">group_size</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">加速核</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">加载时间 (秒)</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">每词元延迟 (毫秒)</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">吞吐 (词元/秒)</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">峰值显存 (MB)</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">fp16</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">26.0</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">69.94</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">228.76</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">53986.51</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">gptq</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">False</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">128</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">exllama</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">36.2</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">95.41</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">167.68</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">34777.04</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">bitsandbytes</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">4</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">None</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">37.64</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">113.98</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">140.38</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">35532.37</td></tr></tbody></table></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">我们可以看到，bitsandbyes 和 GPTQ 的预填充速度相当，batch size 比较大时 GPTQ 稍快一些。欲了解有关该基准测试的更多详细信息，请参阅此&nbsp;链接。</p><span id="OSC_h3_10"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">生成速度</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">下面测试推理过程中模型的生成速度，你可以在&nbsp;此处&nbsp;找到基准测试脚本，用于重现我们的结果。</p><span id="OSC_h4_11"></span><h4 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 18px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;">use_cache</h4><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">我们先测试&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">use_cache</code>&nbsp;参数的影响，以更好地了解在生成过程中键值缓存对速度的影响。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">该基准测试在 A100 上运行，提示长度为 30，生成词元数也为 30，模型为&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">meta-llama/Llama-2-7b-hf</code>&nbsp;。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">use_cache=True</code>&nbsp;时:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.7776726584673604" data-type="png" data-w="1057" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 456px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/89cecb17-53bf-4d9d-a2ba-240693eb1dc1.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    use_cache=True A100 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);"><code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">use_cache=False</code>&nbsp;时:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.75" data-type="jpeg" data-w="1080" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 480px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/022b4baa-5ae6-4f1d-958b-e3310900c08c.jpg" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    use_cache=False A100 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">通过这两个基准测试，可以得出结论，使用注意力缓存时，生成速度会更快，该结论符合预期。此外，一般来说，GPTQ 比 bitsandbytes 更快。例如，&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">batch_size=4</code>&nbsp;且&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">use_cache=True</code>&nbsp;时，GPTQ 速度快了一倍！因此，我们下一个基准测试中会直接使用&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">use_cache=True</code>&nbsp;。请注意，&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">use_cache=True</code>&nbsp;会消耗更多显存。</p><span id="OSC_h4_12"></span><h4 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 18px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;">硬件</h4><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">下面，我们看看量化模型在不同的硬件上的表现。我们使用的提示长度为 30，生成 30 个词元，使用的模型是&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">meta-llama/Llama-2-7b-hf</code>&nbsp;。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">单张 A100:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.7776726584673604" data-type="png" data-w="1057" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 475px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/89cecb17-53bf-4d9d-a2ba-240693eb1dc1.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    A100 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">单张 T4:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.75" data-type="jpeg" data-w="1080" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 498px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/cb3e5573-2968-485b-9022-4c5349549b6e.jpg" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    T4 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">单张 Titan RTX:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.75" data-type="jpeg" data-w="1080" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 484px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/7ec27ae0-dce1-41ad-9622-a3f7a6bb6446.jpg" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    TITAN RTX 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">从上面的基准测试中，我们可以得出结论，对于这三款 GPU，GPTQ 都比 bitsandbytes 更快。</p><span id="OSC_h4_13"></span><h4 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;font-weight: bold;font-size: 18px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;">生成长度</h4><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">在下面的基准测试中，我们将尝试不同的生成长度，看看它们对量化模型速度的影响。实验基于 A100，我们使用的提示长度为 30，并改变生成词元的长度。使用的模型是&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">meta-llama/Llama-2-7b-hf</code>&nbsp;。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">生成 30 个词元:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.7776726584673604" data-type="png" data-w="1057" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 469px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/89cecb17-53bf-4d9d-a2ba-240693eb1dc1.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    A100 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">生成 512 个词元:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.75" data-type="jpeg" data-w="1080" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 500px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/60f8c3d1-292c-4d18-aef8-8eedd1161826.jpg" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    生成 512 个词元的 A100 基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">从以上基准测试中，我们可以得出结论，无论生成长度如何，GPTQ 都比 bitsandbytes 更快。</p><span id="OSC_h3_14"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">适配器微调 (前向 + 后向)</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">对量化模型进行全模型微调是不可能的。但是，你可以利用参数高效微调 (PEFT) 来微调量化模型，在其之上训练新的适配器。我们使用一种名为「低秩适配器 (LoRA)」的微调方法: 无需微调整个模型，仅需微调这些适配器并将它们正确加载到模型中。我们来对比一下微调速度吧！</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">该基准测试基于英伟达 A100 GPU，我们使用 Hub 中的&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">meta-llama/Llama-2-7b-hf</code>&nbsp;模型。请注意，对于 GPTQ 模型，我们必须禁用&nbsp;<code style="margin: 3px;padding: 3px;font-size: 14px;border-radius: 4px;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;color: rgb(155, 110, 35);background-color: rgb(255, 245, 227);">exllama</code>&nbsp;加速核，因为它不支持微调。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-ratio="0.75" data-type="png" data-w="640" style="margin-right: auto;margin-bottom: 15px;margin-left: auto;width: 487px;border-radius: 5px;display: block;height: auto !important;" src="https://oscimg.oschina.net/oscnet/13c41f61-4906-4881-8a38-8b3b4e76b862.png" referrerpolicy="no-referrer"><figcaption style="margin-top: 5px;text-align: center;color: rgb(221, 165, 45);font-size: 14px;">
    A100 微调基准测试结果 
  </figcaption></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">从结果中，我们可以得出结论，bitsandbytes 的微调速度比 GPTQ 更快。</p><span id="OSC_h3_15"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 5px;padding-top: 10px;font-weight: bold;font-size: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.4;"><span style="padding-left: 1em;color: rgb(81, 81, 81);font-size: 17px;border-left: 3px solid rgb(249, 191, 69);">性能退化</span></h3><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">量化对于减少内存消耗非常有用。然而，它也会带来性能退化。我们使用 Open-LLM 排行榜&nbsp;来比较性能！</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">对于 7B 模型:</p><section data-tool="mdnice 编辑器" style="margin-bottom: 0px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">模型</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">均值</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">ARC</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">Hellaswag</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">MMLU</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">TruthfulQA</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">meta-llama/llama-2-7b-hf</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>54.32</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">53.07</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">78.59</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">46.87</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">38.76</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">meta-llama/llama-2-7b-hf-bnb-4bit</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>53.4</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">53.07</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">77.74</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">43.8</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">38.98</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">TheBloke/Llama-2-7B-GPTQ</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>53.23</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">52.05</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">77.59</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">43.99</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">39.32</td></tr></tbody></table></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">对于 13B 模型:</p><section data-tool="mdnice 编辑器" style="margin-bottom: 0px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;overflow-x: auto;"><table><thead><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">模型</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">均值</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">ARC</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">Hellaswag</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">MMLU</th><th style="border-top-width: 1px;border-color: rgb(204, 204, 204);background-color: rgb(240, 240, 240);text-align: center;min-width: 85px;">TruthfulQA</th></tr></thead><tbody style="border-width: 0px;border-style: initial;border-color: initial;"><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">meta-llama/llama-2-13b-hf</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>58.66</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">59.39</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">82.13</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">55.74</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">37.38</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">TheBloke/Llama-2-13B-GPTQ (revision = 'gptq-4bit-128g-actorder_True')</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>58.03</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">59.13</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">81.48</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">54.45</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">37.07</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: white;"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">TheBloke/Llama-2-13B-GPTQ</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>57.56</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">57.25</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">81.66</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">54.81</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">36.56</td></tr><tr style="border-width: 1px 0px 0px;border-right-style: initial;border-bottom-style: initial;border-left-style: initial;border-right-color: initial;border-bottom-color: initial;border-left-color: initial;border-top-style: solid;border-top-color: rgb(204, 204, 204);background-color: rgb(248, 248, 248);"><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">meta-llama/llama-2-13b-hf-bnb-4bit</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;"><strong>56.9</strong></td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">58.11</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">80.97</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">54.34</td><td style="border-color: rgb(204, 204, 204);text-align: center;min-width: 85px;">34.17</td></tr></tbody></table></section><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">从上面的结果中，我们可以得出结论，模型越大，退化越少。更有意思的是，所有的退化都很小！</p><span id="OSC_h2_16"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 2em;margin-bottom: 35px;font-weight: bold;font-size: 22px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;color: rgb(255, 157, 0);"><span style="margin-right: 3px;padding: 2px 13px;color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);height: 30.3958px;font-size: 18px;">总结与最后的话</span><span style="padding-left: 10px;font-size: 18px;color: rgb(255, 157, 11);display: inline-block;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">通过本文，我们比较了多种设置下的 bitsandbytes 和 GPTQ 量化。我们发现，bitsandbytes 更适合微调，而 GPTQ 更适合生成。根据这一观察，获得最佳合并模型的一种方法是:</p><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;width: 557.438px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;"><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     (1) 使用 bitsandbytes 量化基础模型 (零样本量化) 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     (2) 添加并微调适配器 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     (3) 将训练后的适配器合并到基础模型或&nbsp;反量化模型&nbsp;之中！ 
   </section></li><li><section style="margin-top: 5px;margin-bottom: 5px;line-height: 26px;color: rgb(58, 58, 58);">
     (4) 使用 GPTQ 量化合并后的模型并将其用于部署 
   </section></li></ul><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">我们希望这个概述让每个人都能更轻松地将 LLM 应用至各自的应用场景中，我们期待看到大家用它构建自己的有趣应用！</p><span id="OSC_h2_17"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 2em;margin-bottom: 35px;font-weight: bold;font-size: 22px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.2em;color: rgb(255, 157, 0);"><span style="margin-right: 3px;padding: 2px 13px;color: rgb(255, 157, 11);visibility: visible;display: inline-block;border-left: 5px solid rgb(255, 157, 0);height: 30.3958px;font-size: 18px;">致谢</span><span style="padding-left: 10px;font-size: 18px;color: rgb(255, 157, 11);display: inline-block;border-left: 5px solid rgb(255, 157, 11);visibility: visible;"></span></h2><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">我们要感谢 Ilyas、Clémentine 和 Felix 在基准测试上的帮助。</p><p data-tool="mdnice 编辑器" style="margin-bottom: 20px;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;line-height: 1.8em;color: rgb(58, 58, 58);">我们还要感谢 Pedro Cuenca 对本文撰写的帮助。</p><blockquote data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;border-left-color: rgb(255, 177, 27);color: rgb(106, 115, 125);font-size: 0.9em;font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;border-top: none;border-right: none;border-bottom: none;overflow: auto;background: rgb(255, 245, 227);"><p style="font-size: 16px;line-height: 26px;color: rgb(89, 89, 89);">🤗 宝子们可以戳&nbsp;<strong style="color: black;">阅读原文</strong>&nbsp;查看文中所有的外部链接哟！</p></blockquote><hr data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;color: rgb(0, 0, 0);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;font-size: 16px;letter-spacing: normal;text-align: left;text-wrap: wrap;height: 1px;border-right: none;border-bottom: none;border-left: none;border-top-style: solid;border-top-color: rgb(249, 191, 69);"><blockquote data-tool="mdnice 编辑器" style="margin-top: 0px;margin-bottom: 0px;padding-top: 1px;padding-bottom: 1px;padding-left: 5px;color: rgb(91, 91, 91);font-family: Roboto, Oxygen, Ubuntu, Cantarell, PingFangSC-regular, PingFangTC-regular, &quot;Open Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;border-top: none;border-right: none;border-bottom: none;background: rgba(158, 158, 158, 0.1);"><blockquote style="margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;border-width: initial;border-style: none;border-color: initial;"><blockquote style="margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;border-width: initial;border-style: none;border-color: initial;"><blockquote style="margin-top: 0px;margin-bottom: 0em;padding-top: 0px;padding-left: 0px;border-width: initial;border-style: none;border-color: initial;"><p style="margin: 10px;color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;">英文原文:&nbsp;<span style="color: rgb(136, 136, 136);letter-spacing: 0px;">https://hf.co/blog/overview-quantization-transformers</span></p><p style="margin: 10px;color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;">原文作者: Younes Belkada，Marc Sun，Ilyas Moutawwakil，Clémentine Fourrier，Félix Marty</p><p style="margin: 10px;color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;">译者: Matrix Yao (姚伟峰)，英特尔深度学习工程师，工作方向为 transformer-family 模型在各模态数据上的应用及大规模模型的训练推理</p><p style="margin: 10px;color: rgb(63, 63, 63);line-height: 1.5;font-size: 14px;">审校/排版: zhongdongy (阿东)</p></blockquote></blockquote></blockquote></blockquote><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - Hugging Face（gh_504339124f0f）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 03:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/HuggingFace/blog/10142931</guid>
            <link>https://my.oschina.net/HuggingFace/blog/10142931</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 总裁 Greg Brockman 辞职]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在&nbsp;<span style="background-color:#ffffff">OpenAI 宣布 CEO 兼联合创始人萨姆・阿尔特曼（Sam Alt</span>man<span style="background-color:#ffffff">）离职并退出公司董事会数小时后，OpenAI 总裁兼联合创始人格雷格・布罗克曼（</span>Greg<span style="background-color:#ffffff">&nbsp;</span>Brockman<span style="background-color:#ffffff">）</span>也<span style="background-color:#ffffff">在社交平台发文宣布离职。</span></span></p><p><img height="482" src="https://oscimg.oschina.net/oscnet/up-2ff8ed4b48e6c2c73a5fb9a87d3030b4b91.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">布罗克曼表示他向 OpenAI 团队发送了以下消息：</span></span></p><blockquote><p>大家好，</p><p>自从 8 年前在我的公寓里开始创业以来，我们一起建立的一切让我深感自豪。我们一起经历了 8 个艰难而又美好的时期，取得了如此巨大的成就，尽管有种种原因证明这本应是不可能的。</p><p>但从今天的新闻来看，我不干了</p><p>我真心祝愿你们一切顺利。我将一如既往地坚信创建安全 AGl、造福全人类的使命。</p></blockquote><p><strong>相关阅读：</strong></p><ul><li><a href="https://www.oschina.net/news/267006/openai-ceo-sam-altman-fired" target="_blank">OpenAI 董事会内讧，CEO 兼创始人 Sam Altman 被逐出公司</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 17 Nov 2023 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267013/openai-greg-brockman-quit</guid>
            <link>https://www.oschina.net/news/267013/openai-greg-brockman-quit</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
