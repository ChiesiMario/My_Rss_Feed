<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 01 Oct 2023 18:12:43 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Yazi —— 极速终端文件管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Yazi（中文「鸭子」）是一个用 Rust 编写的终端文件管理器，基于非阻塞异步 I/O。它旨在提供高效、用户友好且可定制的文件管理体验。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span style="background-color:#ffffff; color:#1f2328">注意：Yazi 目前正在积极开发中，可能不稳定。</span></p><h4 style="text-align:start"><strong><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>特性</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><ul><li><strong>完全异步支持</strong>：所有 I/O 操作都是异步的，CPU 任务分布在多个线程上，充分利用可用资源。</li><li><strong>强大的异步任务调度和管理</strong>：提供实时进度更新、任务取消和内部任务优先级分配。</li><li><strong>内置支持多种图像协议</strong>：还与Überzug++集成，覆盖几乎所有终端。</li><li><strong>内置代码高亮和图像编码</strong>：结合预缓存机制，大大加速图像和普通文件的加载。</li><li>与 fd、rg、fzf、zicide 集成</li><li>类似 Vim 的输入组件和选择组件</li><li>多选项卡支持，可滚动预览（适用于视频、PDF、档案、目录、代码等）</li><li>批量重命名、可视模式、文件选择器</li><li>题系统、自定义布局、垃圾桶、CSI u</li><li>...&nbsp;</li></ul><p><img height="353" src="https://static.oschina.net/uploads/space/2023/0918/162924_SnRz_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 30 Sep 2023 04:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/yazi</guid>
            <link>https://www.oschina.net/p/yazi</link>
        </item>
        <item>
            <title>
                <![CDATA[Spring Cloud 2023.0.0-M2 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Spring Cloud 2023.0.0-M2 (aka Leyton) 现<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F09%2F29%2Fspring-cloud-2023-0-0-m2-aka-leyton-has-been-released" target="_blank">已发布</a>，此版本已将所有 Spring Cloud 项目的文档迁移到 Antora。</p><p>主要变化包括：</p><p><strong>Spring Cloud Commons</strong></p><ul><li>重新启动时刷新范围 - 为适应 JVM 检查点重启时的环境变化而量身定制的功能（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-commons%2Fpull%2F1266" target="_blank">PR 1266</a>）</li></ul><p><strong>Spring Cloud Gateway</strong></p><ul><li>在<code>TokenRelay</code>过滤器中指定<code>clientRegistrationId</code>。(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-gateway%2Fpull%2F2922" target="_blank">PR 2922</a>&nbsp;) 网关可用于管理多个 ClientRegistration，每个路由可决定使用哪个 ClientRegistration。这在同时使用多个授权服务器的情况下非常有用： 
  <ul><li>同时使用多个授权服务器。</li><li>同时使用多种客户端身份验证方法。</li><li>部分/所有下游服务需要不同的 clientId、aud 声明等。</li><li>部分/所有下游服务需要不同的令牌格式（例如 JWT、不透明）</li></ul></li></ul><p><strong>Spring Cloud OpenFeign</strong></p><ul><li>升级到 Feign 12.5 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-openfeign%2Fpull%2F907" target="_blank">PR_907</a>&nbsp;)</li></ul><p><strong>Spring Cloud Task</strong></p><ul><li>用户现在可以使用外部执行 ID 查询任务执行。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-task%2Fissues%2F863" target="_blank">PR_863</a>）</li></ul><p><strong>Spring Cloud Function</strong></p><ul><li><p>用户现在可以将 REST 应用程序部署为&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-function%2Ftree%2Fmain%2Fspring-cloud-starter-function-web" target="_blank">AWS Lambda 或 Azure Functions</a></p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-function%2Fissues%2F1025" target="_blank">通过 spring-cloud-function-web</a>&nbsp;部署为 REST 端点的函数的 CRUD 映射</p></li></ul><p><strong>Spring Cloud Stream</strong></p><ul><li>主要与 Apache Kafka 绑定器和新的 Apache Pulsar 绑定器相关的几个重要<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-stream%2Fmilestone%2F89%3Fclosed%3D1" target="_blank">错误修复和增强功能。</a></li></ul><p><span style="background-color:#ffffff; color:#333333">以下模块作为 2023.0.0-M2 的一部分也进行了更新：</span>&nbsp;</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:inherit; color:#000000; font-family:&quot;Open Sans&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:1em; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:822px; word-spacing:0px"><thead><tr><th style="border-color:#dbdbdb; text-align:inherit; vertical-align:top">Module</th><th style="border-color:#dbdbdb; text-align:inherit; vertical-align:top">Version</th><th style="border-color:#dbdbdb; text-align:inherit; vertical-align:top">Issues</th></tr></thead><tbody><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Consul</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-consul%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Gateway</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-gateway%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Zookeeper</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-zookeeper%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Bus</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-bus%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Stream</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-stream%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Function</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-function%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud OpenFeign</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-openfeign%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Vault</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-vault%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Commons</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-commons%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Task</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">3.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-task%2Freleases%2Ftag%2Fv3.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Kubernetes</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">3.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-kubernetes%2Freleases%2Ftag%2Fv3.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Starter Build</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">2023.0.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-starter-build%2Freleases%2Ftag%2Fv2023.0.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Config</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-config%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Build</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-build%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Netflix</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-netflix%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud CircuitBreaker</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">3.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-circuitbreaker%2Freleases%2Ftag%2Fv3.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">Spring Cloud Contract</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">4.1.0-M2</td><td style="border-color:#dbdbdb; border-image:initial; border-style:solid; border-width:0px 0px 1px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-contract%2Freleases%2Ftag%2Fv4.1.0-M2" target="_blank">issues</a>)</td></tr><tr><td style="border-color:#dbdbdb; border-style:solid; border-width:0px; text-align:inherit; vertical-align:top">Spring Cloud Task</td><td style="border-color:#dbdbdb; border-style:solid; border-width:0px; text-align:inherit; vertical-align:top">3.1.0-M2</td><td style="border-color:#dbdbdb; border-style:solid; border-width:0px; text-align:inherit; vertical-align:top">(<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-cloud%2Fspring-cloud-contract%2Freleases%2Ftag%2Fv3.1.0-M2" target="_blank">issues</a>)</td></tr></tbody></table><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F09%2F29%2Fspring-cloud-2023-0-0-m2-aka-leyton-has-been-released" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 30 Sep 2023 03:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260108/spring-cloud-2023-0-0-m2</guid>
            <link>https://www.oschina.net/news/260108/spring-cloud-2023-0-0-m2</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[国庆中秋特别漫画：小哪吒猫助力大平台工程]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-d91588328d298da006ea97d4e2408fbd16c.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">现代 IT 和 DevOps 面临着业务增长、微服务数量激增、开发者工具分散、复杂流程和多云部署等诸多挑战，导致业务满意度下降和开发者体验受损。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-ddd1050d3f1669e0d201ad4b2a33c5d6070.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">而「平台工程」是一种软件工程方法，旨在简化交付流程、提高开发者生产力，更是被 Gartner 列为 2023 年十大战略技术趋势。ZadigX 新版本发布在即，它整合了企业现有资源和工具链，避免了从零开始的平台工程建设。ZadigX 通过强大的自定义流程引擎，升级企业低效的碎片化协作流程，轻松应对复杂的场景挑战，并利用 Kubernetes 云原生技术底座管理各种复杂异构环境。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-72413f6e0050d0bcce96663b06308814696.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">ZadigX 国庆特别版带来了一系列强大的能力矩阵，包括深度集成企业现有工具和系统，企业无需从头开始构建平台，使业务治理更加轻松高效，开发者体验更为顺滑。这一版本还加强了 DevOps/Xops 工作流编排和质量工程解决方案，通过高度可扩展且低配置负担的自定义流程引擎，解决企业复杂流程和碎片化的挑战。同时，ZadigX 与众多合作伙伴紧密合作，推动平台工程的升级，为开发者提供了更多链接一切的机会。Enjoy～</p><span id="OSC_h3_1"></span><h3><strong>01、深度集成企业现有能力和工具链，只为开发者体验更丝滑</strong></h3><p><img src="https://oscimg.oschina.net/oscnet/up-b6f9875b650dc4ebfa1eb60c310e122e3e5.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#ff2968">自动化项目协同：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>发布计划统筹项目迭代规划，从需求到发布一站式完成。支持 Jira 项目、飞书 Meego 项目管理编排，实现自动化任务状态同步。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-54e1c98c02ac79da6d85f9efbaae785dd03.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-063c0ebf4dbe2972d06d743e2488d802e13.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-159cfb76a5b41b1e14912e183800b461347.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#ff2968">配置变更与数据变更协同：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>支持 Nacos、Apollo 等配置变更、 DMS/Flyway/MySQL 等数据变更编排，实现配置变更和数据变更的自动化晋级。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-db9a95b28c2e5ebaaaaee0aecaf55f084eb.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-c635493645f6f3a64018816f86800201fd2.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a51568b8fb835c9ec3088ec54a2c41a7e84.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-43f879afbcedf20a7cac5d3963780c54fe1.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-58c7a50c777142c9e14daaa9e8ad5974687.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#ff2968">开放扩展外部系统协同：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>支持全流程 OpenAPI 开放，自定义任务扩展，可接入任何外部系统。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-bbd7129f4b81adfb60d163d08e72714dd40.png" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-dceca93bf7594c74c78bcbc7f9a72a7ecc9.png" referrerpolicy="no-referrer"></span></p><span id="OSC_h3_2"></span><h3><strong>02、企业无需从零搭建，业务治理更轻松高效</strong></h3><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-3adab7831272ed9b40f791d2325ecaf118f.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">零运维负担接入：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">实施平台工程的难度大幅降低，可通过一键接入托管项目实现同时治理和推广。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e45016a56eb684b33c51f440492bc897c17.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-50919c16f1b290e77b4922045a5f5b13d11.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">企业无需修改现有流程：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">能够支持大规模、快速安全的批量项目接入，数千项服务迁移仅需 2 周。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-676ecce9bcbb61f1caed817d6b3dfa81aba.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-3c0440b6bcaed7a50a2add4ef29f496a0c6.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">个性化配置管理：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>支持企业自定义 logo、主题、权限与用户组配置，提高业务管理效率。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-12bbc58cff1be661a11340fada277e8befb.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a1b75d264c539f975ab0531e0163475e7ff.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-1543dda576a5860182acbbc38759639a757.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_3"></span><h3><strong>03、DevOps/Xops 工作流编排 ，质量工程解决方案</strong></h3><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-ab2e5ff67abc4443a039194940f67e015b5.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">支持全流程 DevOps 集成和交付：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">实现需求到发布的全流程协同，无缝整合开发、测试、预发布验证和生产发布流程。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-6ea843be2aea86430a5b4a1ae9ed2ace72c.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-f82f932ae93e50fc36088aa420a5aa7ede5.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-70e3c889b78a2e74364cd7d2d4ebad95eff.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">支持多类型资源平面和变更观测：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>集群管理支持指定访问权限和工作流任务执行，支持 Severless 集群 /GPU 调度/灵活调度策略确保资源合理安全分配；扩展支持 Kubernetes 资源对象 CronJob、CRD、CloneSet 等变更管理。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5968e2b07cca00089b6f6d68d27216bf1bf.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a1378c60b4045a36d2945b57845825fbd58.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">生产服务和生产环境管理：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>隔离生产服务和生产环境资源管理和变更通道，同时支持自动化更新全局变量、环境配置、自助上下线服务、Helm Chart 生产部署等。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a6d2054efd73946af6e81527d7f90377fc2.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-bfaf96b6c418a91b0e6a0ac914a4d4fe5e9.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e7613a48fda6753cdd34021ccec28df29c2.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">质量内建与安全防护：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">强调代码质量扫描、回归测试、质量门等质量工程建设，提高质量水平。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-f3a80ad0fdd0182bafb4b7b7a5d51898e8f.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">个性化管理运营：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">提供内置数学模型，可定制的 DevOps 数据看板，助力企业有效实施研发管理理念。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-6582e0c266d75c5c9404b39cf69c0248363.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-0ec43f3dd3b15b560a8d79a8990eb0cbe89.png" referrerpolicy="no-referrer"></span></p><span id="OSC_h3_4"></span><h3><strong>04、高扩展、低配置负担的自定义流程引擎，应对企业复杂流程挑战</strong></h3><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-8301a82372e5e33ba654fa882ef48959037.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">超低配置负担：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">支持 YAML/GUI 两种模式配置，内置 DevOps 最佳实践模板推动架构的标准化和治理。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-ea42a5b8fcddf7b75e636b47c8589dcf6f4.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-0de22a4098f55bdd4a4079bcb4731e6c77f.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-cbd296208334ce881a5930355ea8d864543.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">无限并发与扩展性：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">利用强大的云原生底层能力，支持工作流参数传递、共享存储、任务并发配置。支持服务级别测试任务编排和蓝绿发布策略。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5a9882684eb859bdc97830cb6e9915148d5.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-85718bec21612698223f79bdd49b7ec7617.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5b85fb26407a6018d9ecf7a48df91ce76e9.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-ba6b1663852b874171c131c497984de61d9.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">自定义管控配置：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">强化任务步骤执行，支持集中管理、飞书、钉钉，OA 接入等审批流程。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-6f0b2de0ee135fc440f95061c98b954926d.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-3599d09f48e80895f1a45c89bdb5754977d.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5d8fdb33fd92b58e83db1201fe1be35bc61.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">用户友好与灵活性：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">镜像分发任务支持配置目标镜像生成规则，任务列表可自定义展示字段。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8ed3791587e9cb0c723958c6e2785a9e569.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-47200e5cc0905f11e73d76efe3e64bb95fb.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><span id="OSC_h3_5"></span><h3><strong>05、与众多合作伙伴联手共建平台工程升级方案，为开发者链接一切</strong></h3><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-47c27768bb61da18942141692c7acd82fa2.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">全链路灰度能力：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">融合阿里云 MSE 全链路灰度能力，开发者可轻松验证自助上线。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-46bcc5d51cf746d91687ecb79e48cf32981.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">可观测全链路：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">融合观测云检测服务，实现从变更到可观测全链路打通，一键发布。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-979e7bc7d790a3c3b0d9a880006b206bb21.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span style="color:#ff2968">安全策略内建：</span>支持清源 SCA、Fortify、Sonar 集成，全流程编排安全策略，每次变更都得到安全防护。</p><p style="margin-left:0; margin-right:0"><img alt="" src="https://oscimg.oschina.net/oscnet/up-66b182b75cbb3c998db1a6715bf3438cea5.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img alt="" src="https://oscimg.oschina.net/oscnet/up-f478751e724c25bb9f36a717927132d8e25.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#ff2968">AI 助力效能提升：</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">支持基于 Azure OpenAI 技术，提升 DevOps 诊断和运营效率，首次推出 AI 环境巡检和 AI 效能诊断模块。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-6c1e94b1ed2ff2b756730b38b6692cc9a45.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c09032ee8c8df89a48e7f3fcc75f473657.png" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px">官方已开通免费 30 天试用</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px">立即体验 ZadigX 最新版本，开启全新平台工程</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px">创新之旅！🚀</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px">&nbsp;<span style="background-color:#ffffff; color:#ff2968">ZadigX，开放，链接，专业</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px"><img src="https://oscimg.oschina.net/oscnet/up-737521b788156c5c0d8468b2e564baa99a6.png" referrerpolicy="no-referrer"></p><blockquote><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px"><strong>阅读原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FNLnTwZQ-kEhEk7hw6ZRM_w" target="_blank">https://mp.weixin.qq.com/s/NLnTwZQ-kEhEk7hw6ZRM_w</a></strong></p></blockquote><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 30 Sep 2023 02:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10115118</guid>
            <link>https://my.oschina.net/koderover/blog/10115118</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Snap 商店遭受恶意应用攻击，临时新增人工审核]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">Canonical 的 Snap Store&nbsp;团队发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fforum.snapcraft.io%2Ft%2Ftemporary-suspension-of-automatic-snap-registration-following-security-incident%2F37077" target="_blank">公告称</a>，他们于近日收到了一些用户所报告的安全隐患事件。即，几个最近新发布的 Snap 可能存在恶意</span><span style="background-color:#ffffff">，可以</span><span style="background-color:#ffffff">窃取用户的加密资金。</span></span></p><p><span style="color:#000000">目前，Snap Store 已经删除了所报告的 Snap。新的 Snap 注册实施了临时人工审核要求，立即生效。此人工审查旨在阻止恶意行为者注册合法应用程序的名称（或至少听起来合法的名称），并将其用作向用户推送恶意 Snap 的途径。</span></p><p><img height="270" src="https://oscimg.oschina.net/oscnet/up-88656dc09868a0f56e324642884ef0b8f38.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">当用户尝试注册新的&nbsp;Snap 时，系统将提示「请求保留名称」。Snap Store 工作人员手动审核成功后，该名称将被注册。上传和发布现有 Snap 的修订版则不会受到影响。</span></p><blockquote><p style="text-align:start"><span style="color:#000000">对于这可能给我们的 snap 发布者和开发者带来的任何不便，我们深表歉意。然而，我们认为这是目前最谨慎的行动。</span></p><p style="text-align:start"><span style="color:#000000">我们希望彻底调查这一事件，而不会给系统带来任何干扰，更重要的是，我们希望确保我们的用户在 Snap Store 中获得安全且值得信赖的体验。</span></p><p style="text-align:start"><span style="color:#000000">请耐心等待我们进行调查。我们将在未来几天提供更详细的更新。</span></p></blockquote><p><span style="color:#000000">如果你最近从 Snap Store 安装了任何新上架的<span style="background-color:#ffffff">加密账本应用程序</span>，不妨检查一下应用程序是否还在列表中。如果没有，这可能意味着它已因为被怀疑是恶意程序而撤下。&nbsp;</span></p><p><span style="color:#000000">更多详情可查看&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fforum.snapcraft.io%2Ft%2Ftemporary-suspension-of-automatic-snap-registration-following-security-incident%2F37077" target="_blank">Snapcraft 论坛</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 04:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260114/snap-store-security-incident</guid>
            <link>https://www.oschina.net/news/260114/snap-store-security-incident</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[美国国家安全局将开设人工智能安全中心]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美国国家安全局 (NSA) 宣布正在创建人工智能安全中心，以「监督美国国家安全系统内人工智能功能的开发和集成」。</span></p><p><span style="color:#000000">新中心将帮助促进与在国家安全中使用人工智能相关的最佳实践、评估方法和风险框架的发展。美国国家安全局将整合所有与人工智能和安全相关的活动，并在人工智能安全中心进行。</span></p><p><span style="color:#000000">美国国家安全局将与商业公司、国家实验室、学术界、国防部和选定的外国合作伙伴就这一计划密切合作。</span></p><p><span style="color:#000000">美国国家安全局局长、陆军上将 Paul Nakasone 表示：</span></p><blockquote><p><span style="color:#000000">「人工智能将对我们国家以及我们的盟友和合作伙伴的外交、技术和经济事务中的国家安全产生越来越重要的影响。今天，美国在这个关键领域处于领先地位，但这种领先不应被视为理所当然。几十年来，我们的对手一直利用盗窃和利用我们的知识产权来促进他们的利益，他们将寻求利用我们在人工智能方面的进步，并破坏我们对其的应用。」</span></p></blockquote><p><span style="color:#000000">这一公告是美国政府一系列人工智能相关举措中的又一项。例如，1 月份，美国国防部更新了 2012 年关于负责任地开发自主武器系统的指南，以反映人工智能的最新进展。2020 年，他们还发布了《负责任的人工智能战略和实施路径》。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 04:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260112/nsa-open-ai-security-center</guid>
            <link>https://www.oschina.net/news/260112/nsa-open-ai-security-center</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mistral AI 发布 73 亿参数模型，「碾压」 Llama 2 13B]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">法国人工智能初创公司&nbsp;Mistral AI <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fannouncing-mistral-7b%2F" target="_blank">宣布</a>推出其首款大语言模型 Mistral 7B 是一个，号称是迄今为止同规模产品中最强大的语言模型；在 Apache-2.0 许可下开源，可完全免费使用，不受任何限制。</span></p><p><span style="color:#000000">Mistral AI 是一个成立仅六个月的初创公司，于 6 月份筹集了 1.18 亿美元的巨额种子轮资金，据称是欧洲历史上最大的种子轮融资。Mistral 7B 是一个拥有 73 亿参数的模型。该公司声称在涵盖一系列任务的基准测试中，Mistral 7B 的表现均显著优于 Llama 2 7B 和 13B，并且与 Llama 34B 相当。</span></p><p><span style="color:#000000">在涵盖数学、美国历史、计算机科学、法律等 57 个科目的大规模多任务语言理解 (MMLU) 测试中，Mistral 7B 模型的准确率为 60.1%，Llama 2 7B 和 13B 的准确率略高于分别为 44.4% 和 55.6%。</span></p><p><span style="color:#000000">在常识推理和阅读理解测试中，Mistral 7B 的准确率也超过了两个 Llama 模型。在世界知识测试中，Llama 2 13B 与 Mistral 7B 不相上下，Mistral 称这可能是由于模型的参数数量有限，限制了它可以压缩的知识量。</span></p><p><span style="color:#000000">唯一 Llama 2 13B 和 Mistral 7B 不相上下的领域则是世界知识测试，Mistral 声称「这可能是由于 Mistral 7B 的参数数量有限，从而限制了其可压缩的知识量。」</span></p><p><span style="color:#000000">在编码任务方面，虽然 Mistral 称 Mistral 7B 的性能大为提高；但基准测试结果表明，它仍然没有超过经过微调的 CodeLlama 7B。在 0-shot Humaneval 和 3-shot MBPP 测试中，CodeLlama 7B 的准确率分别为 31.1% 和 52.5%，Mistral 7B 则分别为 30.5% 和 47.5%。</span></p><p><img alt="" height="228" src="https://oscimg.oschina.net/oscnet/up-ccc9734e545847f6997b2b0303aeebc5bc0.png" width="700" referrerpolicy="no-referrer"></p><p><img alt="" height="97" src="https://oscimg.oschina.net/oscnet/up-1098191388bff1fba8deba0dbc560f0f30f.png" width="700" referrerpolicy="no-referrer"></p><p><img alt="" height="485" src="https://oscimg.oschina.net/oscnet/up-e6a3887b8c2e50e96c9da3a78f6b0c69fa7.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Mistral AI 表示，Mistral 7B 使用了 Grouped-query attention (GQA) 实现更快的推理，并使用 Sliding Window Attention (SWA) 以较小的成本处理更长的序列。</span></p><p><span style="color:#000000">「Mistral 7B 采用了 SWA，其中每一层都关注先前的 4096 个隐藏状态。主要改进以及最初研究的原因是 O(sliding_window.seq_len) 的线性计算成本。在实际应用中，对 FlashAttention 和 xFormers 所做的更改使得在序列长度为 16k 且窗口为 4k 的情况下，速度提高了 2 倍。」</span></p><p><span style="color:#000000">此外，该公司还计划在这项工作的基础上发布一个更大的模型，能够更好地推理并支持多种语言，预计将于 2024 年亮相。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fannouncing-mistral-7b%2F" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 04:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259954/mistral-ai-mistral-7b</guid>
            <link>https://www.oschina.net/news/259954/mistral-ai-mistral-7b</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 一站式开源数据可观测性平台 Datavines]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-datavines" class="anchor" href="https://gitee.com/datavane/datavines#datavines"></a>Datavines</h1><p><a href="https://gitee.com/datavane/datavines/blob/dev/README.md"><img src="https://img.shields.io/badge/document-English-blue.svg" alt="EN doc" referrerpolicy="no-referrer"></a><a href="https://gitee.com/datavane/datavines/blob/dev/README.zh-CN.md"><img src="https://img.shields.io/badge/%E6%96%87%E6%A1%A3-%E4%B8%AD%E6%96%87%E7%89%88-blue.svg" alt="CN doc" referrerpolicy="no-referrer"></a></p><hr><p>Datavines 是一站式开源数据可观测性平台，提供元数据管理、数据概览报告、数据质量管理，数据分布查询、数据趋势洞察等核心能力，致力于帮助用户全面地了解和掌管数据，让您做到心中有数。</p><h2><a id="user-content-架构设计" class="anchor" href="https://gitee.com/datavane/datavines#%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1"></a>架构设计</h2><p><img src="https://gitee.com/datavane/datavines/raw/dev/docs/img/architecture.jpg" alt="DataVinesArchitecture" referrerpolicy="no-referrer"></p><h2><a id="user-content-安装" class="anchor" href="https://gitee.com/datavane/datavines#%E5%AE%89%E8%A3%85"></a>安装</h2><p>使用<code>Maven3.6.1</code>以及以上版本</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>mvn clean package <span class="nt">-Prelease</span><span class="nt">-DskipTests</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-特性" class="anchor" href="https://gitee.com/datavane/datavines#%E7%89%B9%E6%80%A7"></a>特性</h2><h3><a id="user-content-数据目录" class="anchor" href="https://gitee.com/datavane/datavines#%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95"></a>数据目录</h3><ul><li>定时获取<strong>数据源元数据</strong>，构造数据目录</li><li>定时监听<strong>元数据变更</strong>情况</li><li>支持元数据的<strong>标签管理</strong></li></ul><p><img src="https://gitee.com/datavane/datavines/raw/dev/docs/img/data-catalog.jpg" alt="数据目录" referrerpolicy="no-referrer"></p><h3><a id="user-content-数据质量监控" class="anchor" href="https://gitee.com/datavane/datavines#%E6%95%B0%E6%8D%AE%E8%B4%A8%E9%87%8F%E7%9B%91%E6%8E%A7"></a>数据质量监控</h3><ul><li>内置 <strong>27</strong> 个数据质量检查规则，开箱即用</li><li>支持 <strong>4</strong> 种数据质量检查规则类型
<ul><li>单表单列检查类型</li><li>单表自定义<code>SQL</code>检查类型</li><li>跨表准确性检查类型</li><li>两表值比对检查类型</li></ul></li><li>支持配置定时任务进行<strong>定时检查</strong></li><li>支持配置 <code>SLA </code>用于<strong>检查结果告警</strong></li></ul><p><img src="https://gitee.com/datavane/datavines/raw/dev/docs/img/data-quality.jpg" alt="数据质量检查" referrerpolicy="no-referrer"></p><h3><a id="user-content-数据概览" class="anchor" href="https://gitee.com/datavane/datavines#%E6%95%B0%E6%8D%AE%E6%A6%82%E8%A7%88"></a>数据概览</h3><ul><li>支持定时执行数据探测，输出<strong>数据概览报告</strong></li><li>支持<strong>自动识别</strong>列的类型自动匹配合适的数据概况指标</li><li>支持<strong>表行数趋势</strong>监控</li><li>支持列的<strong>数据分布</strong>情况查看</li></ul><p><img src="https://gitee.com/datavane/datavines/raw/dev/docs/img/data-profile.jpg" alt="数据目录" referrerpolicy="no-referrer"></p><h3><a id="user-content-插件化设计" class="anchor" href="https://gitee.com/datavane/datavines#%E6%8F%92%E4%BB%B6%E5%8C%96%E8%AE%BE%E8%AE%A1"></a>插件化设计</h3><p>平台以插件化设计为核心，以下模块都支持用户<code>自定义插件</code>进行扩展</p><ul><li><strong>数据源</strong>：已支持 <code>MySQL</code>、<code>Impala</code>、<code>Starocks</code>、<code>Doris</code>、<code>Presto</code>、<code>Trino</code>、<code>ClickHouse</code>、<code>PostgreSQL</code></li><li><strong>检查规则</strong>：内置空值检查、非空检查、枚举检查等 27 个检查规则</li><li><strong>作业执行引擎</strong>：已支持<code>Spark</code>和<code>Local</code>两种执行引擎。<code>Spark </code>引擎目前仅支持<code>Spark2.4</code>版本，<code>Local</code> 引擎则是基于<code>JDBC</code>开发的本地执行引擎，无需依赖其他执行引擎。</li><li><strong>告警通道</strong>：已支持<strong>邮件</strong></li><li><strong>错误数据存储</strong>：已支持 <code>MySQL</code> 和 <strong>本地文件</strong>（仅支持<code>Local</code>执行引擎）</li><li><strong>注册中心</strong>：已支持 <code>MySQL</code>、<code>PostgreSQL</code> 和 <code>ZooKeeper</code></li></ul><h3><a id="user-content-多种运行模式" class="anchor" href="https://gitee.com/datavane/datavines#%E5%A4%9A%E7%A7%8D%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F"></a>多种运行模式</h3><ul><li>提供<strong>Web 页面</strong>配置检查作业、运行作业、查看作业执行日志、查看错误数据和检查结果</li><li>支持<strong>在线生成</strong>作业运行脚本，通过 <code>datavines-submit.sh</code> 来提交作业，可与调度系统配合使用</li></ul><p><img src="https://gitee.com/datavane/datavines/raw/dev/docs/img/data-job-script.jpg" alt="作业脚本" referrerpolicy="no-referrer"></p><h3><a id="user-content-容易部署高可用" class="anchor" href="https://gitee.com/datavane/datavines#%E5%AE%B9%E6%98%93%E9%83%A8%E7%BD%B2%E9%AB%98%E5%8F%AF%E7%94%A8"></a>容易部署&amp;高可用</h3><ul><li>平台依赖少，容易部署</li><li>最小仅依赖 <code>MySQL</code> 既可启动项目，完成数据质量作业的检查</li><li>支持水平扩容，自动容错</li><li><strong>无中心化设计</strong>，<code>Server</code> 节点支持水平扩展提高性能</li><li>作业<strong>自动容错</strong>，保证作业不丢失和不重复执行</li></ul><h2><a id="user-content-环境依赖" class="anchor" href="https://gitee.com/datavane/datavines#%E7%8E%AF%E5%A2%83%E4%BE%9D%E8%B5%96"></a>环境依赖</h2><ol><li><code>Java</code> 运行环境:<code>Jdk8</code></li><li><code>Datavines</code> 支持 <code>JDBC</code> 引擎，如果你的数据量较小或者只是想做功能验证，可以使用 <code>JDBC</code> 引擎</li><li>如果您要想要基于 <code>Spark</code> 来运行 <code>Datavines</code> ，那么需要保证你的服务器具有运行 <code>Spark</code> 应用程序的条件</li></ol><h2><a id="user-content-快速入门" class="anchor" href="https://gitee.com/datavane/datavines#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入门</h2><p>请参考官方文档：<a href="https://gitee.com/link?target=https%3A%2F%2Fdatavane.github.io%2Fdatavines-website%2Fzh-CN%2Fdocs%2Fuser-guide%2Fquick-start%2F">快速入门指南</a></p><h2><a id="user-content-开发指南" class="anchor" href="https://gitee.com/datavane/datavines#%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97"></a>开发指南</h2><p>请参考官方文档：<a href="https://gitee.com/link?target=https%3A%2F%2Fdatavane.github.io%2Fdatavines-website%2Fzh-CN%2Fdocs%2Fdevelopment%2Fenvironment-preparation%2F">开发指南</a></p><h2><a id="user-content-贡献指南" class="anchor" href="https://gitee.com/datavane/datavines#%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97"></a>贡献指南</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatavines%2Fpulls"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome" referrerpolicy="no-referrer"></a></p><p>你可以提交 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatavines%2Fpulls">pull requests</a> 或者 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatavines%2Fissues%2Fnew%2Fchoose">GitHub issues</a>.</p><blockquote><p>如果您是发布问题的新手，我们要求您阅读 <a href="https://gitee.com/link?target=http%3A%2F%2Fwww.catb.org%2F~esr%2Ffaqs%2Fsmart-questions.html"><em>How To Ask Questions The Smart Way</em></a> (<strong>本指南不提供此项目的实际支持服务！</strong>) 和<a href="https://gitee.com/link?target=http%3A%2F%2Fwww.chiark.greenend.org.uk%2F~sgtatham%2Fbugs.html">How to Report Bugs Effectively</a> 。好的错误报告可以让我们更好地帮助您！</p></blockquote><p>感谢所有已经为 Datavines 做出贡献的人！</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdatavane%2Fdatavines%2Fgraphs%2Fcontributors"><img src="https://contrib.rocks/image?repo=datavane/datavines" alt="contrib graph" referrerpolicy="no-referrer"></a></p><h2><a id="user-content-license" class="anchor" href="https://gitee.com/datavane/datavines#license"></a>License</h2><p><code>Datavines</code> 基于 <a href="https://gitee.com/datavane/datavines/blob/dev/LICENSE">Apache License 2.0</a> 协议。<code>Datavines</code> 依赖了一些第三方组件，它们的开源协议也为 <code>Apache License 2.0</code> 或者兼容 <code>Apache License 2.0</code>， 此外 <code>Datavines</code> 也直接引用或者修改了 <code>Apache DolphinScheduler</code>、<code>SeaTunnel</code> 以及 <code>Dubbo</code> 中的一些代码，均为 <code>Apache License 2.0</code> 协议的，感谢这些项目的贡献。</p><h2><a id="user-content-社交媒体" class="anchor" href="https://gitee.com/datavane/datavines#%E7%A4%BE%E4%BA%A4%E5%AA%92%E4%BD%93"></a>社交媒体</h2><ul><li>微信公众号（中文，扫描二维码关注）</li></ul><p><img src="https://gitee.com/datavane/datavines/raw/dev/docs/img/wechat-qrcode.jpg" alt="微信二维码" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 04:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/datavane/datavines</guid>
            <link>https://gitee.com/datavane/datavines</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 语言大模型的进化轨迹]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       defaultNoSetting
            " id="js_content"><section style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;"><img class="rich_pages wxw-img" data-ratio="0.6001955034213099" src="https://oscimg.oschina.net/oscnet/c4090c6e-9047-4acf-8026-4ee2c0bd5701.jpg" data-w="1023" referrerpolicy="no-referrer"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span></section><section style="margin-bottom: 0px;letter-spacing: 0.578px;white-space: normal;outline: 0px;background-color: rgb(25, 25, 25);visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-style="max-width: 100%; background-color: rgb(255, 255, 255); letter-spacing: 0.544px; font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important; color: rgb(163, 163, 163) !important;" class="js_darkmode__0" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;background-color: rgb(255, 255, 255);visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)" data-darkmode-bgcolor-16339314364542="rgb(25, 25, 25)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)" data-darkmode-color-16339314364542="rgb(163, 163, 163)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)" style="outline: 0px;visibility: visible;"><section style="margin-right: 8px;margin-left: 8px;outline: 0px;visibility: visible;line-height: 1.75em;"><section data-darkmode-bgcolor-16221004879619="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16221004879619="rgb(168, 168, 168)" data-darkmode-original-color-16221004879619="#fff|rgb(62, 62, 62)" data-style="padding: 10px; max-width: 100%; background-color: rgb(239, 239, 239); color: rgb(62, 62, 62); line-height: 25.6px; display: inline-block; width: 670px; border-width: 2px; border-style: dashed; border-color: transparent; visibility: visible; box-sizing: border-box !important; overflow-wrap: break-word !important;" class="js_darkmode__1" data-darkmode-bgcolor-16339314364542="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16339314364542="rgb(168, 168, 168)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)|rgb(62, 62, 62)" style="padding: 10px;outline: 0px;background-color: rgb(239, 239, 239);line-height: 25.6px;display: inline-block;width: 670px;border-width: 2px;border-style: dashed;border-color: transparent;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16221004879619="rgb(168, 168, 168)" data-darkmode-original-color-16221004879619="#fff|rgb(62, 62, 62)" data-darkmode-bgcolor-16339314364542="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16339314364542="rgb(168, 168, 168)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)|rgb(62, 62, 62)" style="outline: 0px;visibility: visible;"><section data-darkmode-bgcolor-16221004879619="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16221004879619="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16221004879619="rgb(168, 168, 168)" data-darkmode-original-color-16221004879619="#fff|rgb(62, 62, 62)" data-darkmode-bgcolor-16339314364542="rgb(41, 41, 41)" data-darkmode-original-bgcolor-16339314364542="#fff|rgb(255, 255, 255)|rgb(239, 239, 239)" data-darkmode-color-16339314364542="rgb(168, 168, 168)" data-darkmode-original-color-16339314364542="#fff|rgb(163, 163, 163)|rgb(62, 62, 62)" style="outline: 0px;visibility: visible;"><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">ChatGPT 的发布是语言大模型（LLM）发展史的转折点，它让人们意识到 LLM 的潜力，并引发了「AI 竞赛」，世界上主要人工智能实验室和初创公司都参与其中。在这之后，基于 LLM 的聊天机器人层出不穷。</span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">ChatGPT 及相关 LLM 模型让我们共同见证了 AI 的历史性变革，很多人好奇，LLM 和它们的运作方式究竟是怎样的？它们是如何被构建的？未来又将走向何方？本文对此进行了深入探讨。</span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">本文作者 Etienne Bernard 是人工智能和机器学习专家，NuMind 的联合创始人兼 CEO，该企业创建由 LLM 提供支持的自定义 NLP 模型。Etienne 曾在 Wolfram Research 工作八年，主要担任机器学习负责人，并领导了自动学习工具、用户友好的深度学习框架以及各种机器学习应用程序的开发。</span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><em><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></em></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><em><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">&nbsp;（以下内容经授权后由 OneFlow 编译，转载请联系 OneFlow 获得授权。来源：https://www.numind.ai/blog/what-are-large-language-models）</span></em></p></section></section></section></section></section></section></section></section></section></section></section></section></section><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><br></p><section style="line-height: 1.6em;margin-left: 8px;margin-right: 8px;"><span style="letter-spacing: 2px;color: rgb(63, 63, 63);"><strong><span style="letter-spacing: 2px;font-size: 16px;">作者 |&nbsp;Etienne Bernard</span></strong></span></section><section style="line-height: 1.6em;margin-left: 8px;margin-right: 8px;"><span style="letter-spacing: 2px;color: rgb(63, 63, 63);"><strong><span style="letter-spacing: 2px;font-size: 16px;">OneFlow 编译</span></strong></span></section><section style="line-height: 1.6em;margin-left: 8px;margin-right: 8px;"><span style="letter-spacing: 2px;color: rgb(63, 63, 63);"><strong><span style="letter-spacing: 2px;font-size: 16px;">翻译 | 宛子琳、贾川、杨婷</span></strong></span></section><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><span id="OSC_h2_1"></span><h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">1</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 17px;color: rgb(30, 35, 128);">语言模型</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p></h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">简单来说，<strong>语言模型能够以某种方式生成文本</strong>。它的应用十分广泛，例如，可以用语言模型进行情感分析、标记有害内容、回答问题、概述文档等等。但理论上，语言模型的潜力远超以上常见任务。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">想象你有一个完备的语言模型，可生成任意类型的文本，并且人们还无法辨别这些内容是否由计算机生成，那么我们就可以使其完成很多事，例如生成具有代表性的内容，如电子邮件、新闻稿、书籍和电影剧本等。再进一步来看，<strong>还可以用其生成计算机程序，甚至构建整个软件。只要愿意，我们还可以让它生成科学论文</strong>。如果语言模型真正「完备」，那么它们生成的论文将能够以假乱真，与真实论文没有区别，这意味着必须对语言模型展开实质性研究！</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">当然，就目前而言，完备的语言模型还无法实现，不过也展示出了这些系统的潜力。<strong>语言模型不仅仅能「预测文本」，它们的潜力可能远超想象。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">现在我们回顾一下语言模型的发展历程，从最初的朴素语言模型到目前基于 Transformer 的 LLM（语言大模型）。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">2</span></strong></p><span id="OSC_h2_2"></span><h2 style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 17px;color: rgb(30, 35, 128);">朴素语言模型</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p></h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">语言模型是机器学习模型，因此它们会学习如何生成文本。教授它们的方法（即训练阶段）是<strong>提供一个大规模文本语料库，它们将从中学习如何模仿生成这些文本的过程。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">也许这听起来有些抽象，但创建一个朴素语言模型实际上非常简单。你可以将文本语料库分成一定大小的字符串块，并测量它们的频率。下面是我使用大小为 2 的字符串得到的结果：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.5605858854860186" src="https://oscimg.oschina.net/oscnet/ef013e46-5762-483f-b482-421a3f071c50.png" data-type="png" data-w="751" height="auto" width="751" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">图源：《机器学习导论》</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这些字符串块被称为 n-gram（其中 n 表示字符串的大小，因此此处 n=2）。通过这些 n-gram，你可以像玩多米诺骨牌一样生成文本。从一个初始的 n-gram 开始，例如「th」，然后根据测量的频率随机选择一个以初始 n-gram 结尾的 n-gram 。在这个例子中，如果选择「hi」，就会形成「th」 + 「hi」 = 「thi」。然后再继续添加以「i」开头的 n-gram，以此类推，生成整段文本。不过正如你所想，这些 n-gram 模型并不能生成足够连贯的文本。以下是我继续执行这一过程时得到的结果：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">说实话，这一结果并不太理想！但也说得通，因为该模型的记忆能力很有限，只通过前一个字符来预测下一个字符。如果我们使用 n=4 的字符串，结果会稍微好一些：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><em><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">「complaine building thing Lakers inter blous of try sure camp Fican chips always and to New Semested and the to have being severy undiscussion to can you better is early shoot on」</span></em><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">现在出现了一些拼写正确的单词，但结果仍不够理想！理论上，进一步增加 n 的值，输出结果会得到改善，但在实践中，<strong>我们无法显著增加 n 值，因为这需要一个庞大的数据集来训练模型</strong>。最后，我们可以尝试将单词而不是字符作为基本单位（在自然语言处理术语中称为「词元（token）」）。这会改善输出结果，但因为 n&lt;6，生成的文本仍然缺乏连贯性。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这些朴素语言模型的记忆能力始终有限，因此无法生成超过一定长度的连贯文本</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">。尽管如此，它们仍具备一定用途。几年前，朴素语言模型被广泛用于文本分类和语音识别，且如今仍被用于语言识别等任务。<strong>然而，对于更高级的文本理解和文本生成任务来说，朴素语言模型就捉襟见肘了。因此需要神经网络。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">3</span></strong></p><span id="OSC_h2_3"></span><h2 style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 17px;color: rgb(30, 35, 128);">基于神经网络的语言模型</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p></h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">现代语言模型基于（人工）神经网络。<strong>神经网络是受人脑启发开发出的计算机，能够通过任务示例学习如何执行任务</strong>。这种机器学习形式也被称为深度学习，因为其中的网络由多个计算层组成（因此被称为「深度」网络）。<strong>在神经网络中，通过遍历任务示例并迭代修改网络参数以优化任务目标，从而实现学习。你可以将这些参数想象成一组旋钮（knob），通过左右旋动以改进目标</strong>，但区别是计算机为你进行改进，并且知道如何同时正确地朝着改进方向进行调整（得益于著名的反向传播算法）。因此，网络会遍历任务示例（通常以几百个示例为一批），并在这一过程中优化目标。以下是一个正在被优化的目标示例（称为成本函数，数值越小越好）：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.607565011820331" src="https://oscimg.oschina.net/oscnet/ebf3e1ab-0914-4c47-ad3b-09f58569f6f6.png" data-type="png" data-w="423" height="auto" width="423" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">成本函数随训练迭代次数的变化。图源：《机器学习导论》</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">随着模型的训练，成本函数值会逐渐下降，意味着模型在任务处理上变得更加优秀。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">在该案例中，我们想要生成文本。<strong>目前，标准的方法是训练一个模型，通过前面的单词预测后面的单词</strong>。由于下一个单词有多种可能性，模型会学习为每个可能的单词关联一个概率。以下是对「the cat sat on the」之后可能出现单词的概率分布可视化图像：<br><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.5652173913043478" src="https://oscimg.oschina.net/oscnet/c028e4da-8de4-406c-adde-4643579804a5.png" data-type="png" data-w="529" height="auto" width="529" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">改编自《机器学习导论》</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">一旦拥有这样的预测模型，就可以从预测概率中抽样来生成下一个单词，然后将该单词重新输入到网络，再抽样一个新的单词，以此类推，从而生成文本</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">。这一生成过程被称为自回归，因为网络利用自己的预测结果来生成新的预测。虽然有人对此提出了异议，认为这并非最佳方法，但目前而言，这就是最实际的操作方式，且效果也出奇地好！</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">曾经用于建模语言的第一类神经网络是 RNN（循环神经网络），尤其是 LSTM（长短期记忆网络）架构。<strong>RNN 就像一个逐个阅读单词的小型机器，在这一过程中，它会更新思维状态（mental state）</strong>。这种思维状态如同记忆，使它们在生成文本时能大概记住一段时间的信息。<strong>相比 n-gram 模型，RNN 模型能够获得更为优越的性能。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">RNN 创建之初，神经对话模型（Neural Conversational Model）给我留下了深刻印象。该模型是 Google 于 2015 年基于电影字幕训练的一个特殊 LSTM 模型，当时这个模型已经算得上是 LLM 了（也可能是首个 LLM）：拥有 3 亿参数，并在约 10 亿词的数据上进行训练。由于电影字幕是对话形式，因此可直接将该模型用作聊天机器人。以下是不同人类输入对应的回答示例：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">人类：你叫什么名字？</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">机器：我叫朱莉娅。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">人类：你是什么时候出生的？</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">机器：7 月 20 日。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">人类：我的名字是大衞。我的名字是什么？</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">机器：大衞。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">人类：天行者是谁？</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">机器：他是一个英雄。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">人类：天空是什么颜色？</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">机器：蓝色。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">人类：血液是什么颜色？</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">机器：和黑眼圈的颜色相同。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">如你所见，该模型能够闲聊，同时也对世界有一定了解，这些知识完全是通过学习如何预测文本获得的！我记得自己曾对这一事实很感兴趣：<strong>学习预测文本迫使你理解世界</strong>（但并不意味着这个过程很容易）。然而，该模型也有一些明显的短板：它经常出错，并且与类似基于 LSTM 的模型一样，无法生成长篇连贯的文本。理论上，循环神经网络可以长时间记忆事物，<strong>但在实践中，它们却往往很快就忘记了：经过几十到一百个词之后，它们就会开始偏离主题，不再连贯。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">2017 年，人们针对短期记忆问题提出一种解决方案——Transformer</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">。Transformer 是一种基于注意力机制的新型神经网络架构（本质上是一种选择操作），下图来自介绍 Transformer 的论文，用以说明其在翻译任务中的工作原理：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="1.4446640316205535" src="https://oscimg.oschina.net/oscnet/535ec695-4411-41cb-90ef-59154234fded.png" data-type="png" data-w="1012" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">Transformer 架构。来源：https://arxiv.org/abs/1706.03762</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">Transformer 在各个方面都可圈可点，但最值得一提的是，<strong>该架构在文本建模方面表现非常出色，并且很适合在 GPU 上运行，从而处理（和学习）大量数据。正是有了 Transformer 这种架构，才使得现代 LLM 得以兴起（或至少起到了很强的促进作用）。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="color:#3f3f3f;"><span style="letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">4</span></span></strong></p><span id="OSC_h2_4"></span><h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;color: rgb(30, 35, 128);font-size: 17px;">现代语言大模型</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p></h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">Transformer 的发明标志着现代 LLM 时代的开始。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">自 2018 年以来，AI 实验室开始训练规模越来越大的模型。令众人惊讶的是，这些模型的质量也在不断提高！下图对这些模型进行了可视化，我们将重点介绍其中值得关注的模型：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><img class="rich_pages wxw-img" data-ratio="0.7972222222222223" src="https://oscimg.oschina.net/oscnet/d63f0ce4-11ec-418a-b09c-9a910e495283.png" data-type="png" data-w="1080" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">LLM 进化树。来源：https://github.com/Mooler0410/LLMsPracticalGuide</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这些语言模型主要分为三类。一是「仅编码器（encoder-only）」组（上图中的粉色部分），该类语言模型擅长文本理解，因为它们允许信息在文本的两个方向上流动。二是「仅解码器（decoder-only）」组（上图中的蓝色部分），该类语言模型擅长文本生成，因为信息只能从文本的左侧向右侧流动，以自回归方式有效生成新词汇。三是「编码器-解码器（encoder-decoder）」组（上图中的绿色部分），该类语言模型对上述两种模型进行了结合，用于完成需要理解输入并生成输出的任务，例如翻译。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这一切都主要始于文本理解类模型。最初是使用 RNN 的 ELMo，之后是谷歌著名的 BERT 模型及其派生模型（如 RoBERTa），它们都基于 Transformer。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这些模型通常具有几亿个参数（相当于约 1GB 的计算机内存），在大约 10GB 到 100GB 的文本上进行训练（通常为几十亿个单词），并且可以在现代笔记本电脑上以约 0.1 秒的速度处理一段文本。<strong>这些模型极大地提升了文本理解任务的性能，如文本分类、实体检测和问题回答等。</strong>这已然是 NLP（自然语言处理）领域的一场革命，不过才刚刚拉开序幕……</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">在文本理解类语言模型发展的同时，<strong>OpenAI 开始基于 Transformer 创建文本生成类语言模型</strong>。首先是 2018 年的 GPT-1，有 1 亿个参数；<strong>然后是 2019 年的 GPT-2，拥有高达 15 亿个参数，并在 40GB 的文本上进行了训练</strong><strong>。至少对我来说，GPT-2 的创建是一个至关重要的时刻。</strong>以下是 GPT-2 可以生成的文本示例，从一个由人类撰写的段落开始：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.5203703703703704" src="https://oscimg.oschina.net/oscnet/6cc3b7d0-9aa6-4f4f-a9b6-95e215a32d2d.png" data-type="png" data-w="1080" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">来源：https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">生成的英语文本质量很不错，而且具有连贯性。例如，科学家的名字没有改变，而这在基于 RNN 的模型中是个经典问题。<strong>由于 GPT-2 在所生成文本的质量上取得了巨大突破，</strong><strong>为避免滥用，OpenAI 最初决定不向公众发布。</strong>可以说 GPT-2 标志着 LLM 正朝着正确的方向发展。<strong>需要注意的是：使用这类语言模型需要先提供一个起始文本，这个起始文本被称为提示（prompt）。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">一年后（2020 年），OpenAI 创建了 GPT-3。<strong>GPT-3 是一个具有 1750 亿个参数的模型</strong>（需要 700GB 的计算机内存来存储模型！），<strong>该模型不仅规模显著扩大，文本生成质量也有重大改进。除了性能的提升外，GPT-3 还让人们对未来如何使用 LLM 大开眼界。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">首先，<strong>GPT-3 能够编写代码</strong>。例如，你可以使用 GPT-3 来生成（非常）简单的网站，只需在提示中描述网站的外观即可。以下是一个示例，让 GPT-3 使用 HTML 创建一个按钮：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.3148148148148148" src="https://oscimg.oschina.net/oscnet/891ad7cc-c694-4283-ba93-4a711bc8b6b3.png" data-type="png" data-w="1080" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><br></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这些基本的编码能力在当时并不十分实用，<strong>但它们的出现意味着软件开发在未来可能会发生根本性转变。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">GPT-3 另一令人瞩目的能力是能够进行上下文学习，它可以通过提示中所展示的示例来学习如何执行任务。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这意味着你可以通过编写提示来定制 LLM，而无需更改它们的权重。这一能力开辟了一种全新的、完全基于提示的自然语言处理方式，如今十分受欢迎。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">总而言之，GPT-3 展示了「提示」作为一种新方式的潜力，可以让机器通过自然语言按照我们的意愿执行任务。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">注意：GPT-3 比 GPT-2 要大得多。<strong>自 2018 年以来，模型的规模急剧增加。</strong>以下是一些值得关注的 LLM 及其规模：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.84" src="https://oscimg.oschina.net/oscnet/7399dbde-b740-42d5-97e7-367afd2035ec.png" data-type="png" data-w="600" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><br></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">在两年时间里，模型参数的数量增加了 1000 倍，目前最大的模型（如 GPT-4）已接近 1 万亿个参数，</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这是因为模型规模的增加与性能的改善密切相关，并且目前还未达到性能瓶颈。这些模型规模十分庞大，与人脑相比，人脑约有 1000 亿个神经元，每个神经元平均与其他 1000 个神经元相连接，总共约有 100 万亿个连接。从某种意义上说，最大的 LLM 仍然比人脑小 100 倍。当然，这只是一个非常宽泛的比较，因为人脑和当前 LLM 使用的架构和学习方法都截然不同。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">另一个有趣的指标是这些模型在训练阶段所「阅读（read）」的单词数量。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.7116666666666667" src="https://oscimg.oschina.net/oscnet/fce3c3d5-5632-40a4-92df-0de3b10de8d2.png" data-type="png" data-w="600" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><br></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">如你所见，数量十分庞大。<strong>这些模型在训练过程中会接触超 1000 亿个单词，是一个人在一生中听到或阅读单词数量的 100 倍以上！</strong>这显示出神经网络与人脑的不同之处：<strong>神经网络的学习速度比人类慢得多，但可以获得比人类接触的多得多的数据。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">需要注意的是，LLM 在训练过程中所接触到的单词数量并未像参数数量那样迅速增长（从 GPT-1 到 GPT-3 只增长了 3 倍）。这是因为优先考虑模型规模，不过结果证明这是一个小小的失误。最新的模型并没有比 GPT-3 大很多，但通过处理更多单词来进行训练。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">这种对数据的渴求导致了一个问题，即可用文本的总量存在硬性限制，约为数万亿个单词，而模型正在接近这一限制。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">虽然仍有可能循环遍历所有文本，但这会导致模型性能的回报递减。总而言之，可得出结论：网络在训练阶段处理的有效限制是几十万亿个单词，比 GPT-4 的数量约多出 10 倍。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">另一个问题是，通过用更多的数据训练更大的模型，计算成本也在增加。以下是训练上述模型的预估计算成本：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.7116666666666667" src="https://oscimg.oschina.net/oscnet/d828b020-6cac-4651-b22c-97d85f9b7678.png" data-type="png" data-w="600" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><br></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">为显著超越当前模型的性能，下一代模型需要耗费数亿美元的计算资源。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">虽然考虑到这些模型能带来的好处，这一成本是合理的，但如此巨大的花费仍然是一个问题。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">模型的扩展变得越来越困难。幸运的是，扩大规模并不是改进 LLM 的唯一途径。2022 年末，一项创新开启了另一场革命，这次的影响远远超出了 NLP 领域。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">5</span></strong></p><span id="OSC_h2_5"></span><h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;color: rgb(30, 35, 128);font-size: 17px;">指令调优和聊天机器人 LLM</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p></h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">GPT-3 揭示了提示的潜力，但撰写提示并不容易。事实上，传统语言模型经训练可以模仿其在网络上看到的内容。因此，要想创建一个好的提示，你必须清楚网络上哪种起始文本可能会引导模型生成你所期望的结果。这是一种奇怪的游戏，也是一种找到正确表述的艺术，<strong>你需要改变措辞，假装自己是专家，展示如何逐步思考的示例等等。这一过程叫做提示工程，这使得使用这些 LLM 变得困难。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">为解决这个问题，研究人员一直在探索如何修改基础 LLM，以让其更好地遵循人类指令。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">现主要有两种方法：一是使用人类编写的指令-回答对（instruction-answer pairs），并在此数据集上对基础 LLM 进行微调（即继续训练）。二是让 LLM 生成几个可能的答案，然后由人类对答案评分，并使用强化学习在此数据集上对 LLM 微调。这就是著名的 RLHF（人类反馈的强化学习）的过程。此外，我们还可以将两种方法相结合，OpenAI 在 InstructGPT 和 ChatGPT 中就对这两者进行了结合。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.5685185185185185" src="https://oscimg.oschina.net/oscnet/2fbcb686-6afb-4f7f-9b9c-684b8b26350c.png" data-type="png" data-w="1080" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">InstructGPT 和 ChatGPT 的指令调整步骤。来源：https://openai.com/blog/chatgpt（修改自 https://arxiv.org/abs/2203.02155）</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">将这两种技术结合在一起可以得到一个经过指令调整的 LLM。调整后的 LLM 比基础模型更擅长遵循人类指令，使用起来更加容易。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">经过指令调整的 LLM 已经非常出色了，但还有最后一步才能将这些 LLM 真正转化为每个人都可以使用的东西——聊天机器人。<strong>OpenAI 在 2022 年 12 月发布了 ChatGPT，一个基于 GPT-3.5 的聊天机器人。</strong>它的创建方式与 InstructGPT 相同，但这次使用的是整个对话而不仅仅是指令-回答对。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">ChatGPT 发布后，基于 LLM 的新型聊天机器人开始层出不穷。OpenAI 使用 GPT-4 来代替 GPT-3.5，对 ChatGPT 进行了改进，Anthropic 发布了 Claude，Google 推出 Bard，Meta 也研发出了 LLaMA，还有几个开源 LLM 正在发布过程中。<strong>这是一次真正的模型大爆炸，将会带来许多令人兴奋的应用，NuMind 也会为此出一份力。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">ChatGPT 发布两个月后，迅速拥有了上亿用户，成为有史以来用户增长最快的产品。人们用 ChatGPT 来根据要点编写电子邮件、重新组织文本、总结文本、编写代码，或学习东西（在此之前，搜索引擎一直垄断着这项任务）。<strong>ChatGPT 的发布是 LLM 发展史的转折点，它让人们意识到了 LLM 的潜力，引发了「AI 竞赛」，世界上主要人工智能实验室和初创公司都参与其中。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">值得注意的是，LLM 的突然普及也引发了人们的担忧。人们担心 LLM 被有心人利用，做一些有害的事情，所以创建开放式 LLM 聊天机器人必须确保它们的「安全」性（或「与人类价值观保持一致」），也就是说它们不能帮助制造炸弹等。目前有一些方法可以绕过聊天机器人的安全防御措施，但随着时间推移，这些安全措施会逐渐完善，想绕过它们将变得十分困难。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;font-size: 24px;color: rgb(246, 171, 0);">6</span></strong></p><span id="OSC_h2_6"></span><h2 style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><strong><span style="letter-spacing: 2px;color: rgb(30, 35, 128);font-size: 17px;">语言大模型的未来</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p></h2><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">近年来，LLM 取得了很大进步，人们对它的热情达到了空前高度，在这一领域投入了大量精力。那么，LLM 的未来将如何发展？虽然预测未来很难，但我们也有一些看法：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">模型大小和训练规模将继续扩大。扩展在过去取得了非常好的效果，且仍有提升空间</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">，但问题是，模型的训练成本急剧增长，逐渐让人望而却步（&gt;1 亿美元）。更好的 GPU 和新的专用硬件有助于扩展模型规模，但它们的开发和生产需要时间。此外，最大的模型已经迭代了所有书籍和整个网络，这意味着我们正在达到可用训练数据的极限（即「词元危机」）。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">因此，可以肯定的是，在未来几年内，参数数量不会像过去那样出现爆发式增长。<strong>最大的模型今年应该会稳定在 1 万亿参数以下规模，然后以每年 50% 的速度增长。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">LLM 将超越纯语言模型，<strong>将图像和视频纳入训练数据</strong>，成为多模态模型。从图像和视频中学习可能有助于模型更好地理解世界。GPT-4 就是在图像和文本上进行训练的，且取得了少许性能提升。<strong>利用视频数据训练 LLM 可能给这一领域带来质的改变，但这需要大量计算。预计还需两年多的时间才能真正实现利用视频训练「语言」大模型。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">扩大规模、实现语言模型向多模态模型的转变需要大量算力。为缓解这一问题，我们可以采用更好的神经架构和训练程序，这些架构和训练程序要么计算强度较低，要么可以用更少的数据进行学习（人类大脑证明这是可能的）。然而更可能的是类似于 RNN 的内存会卷土重来，因为这种内存运行时的效率非常高（例如最近的 RWKV 架构）。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><strong>此外，还可能有一些更大的变化，例如 LLM 不以自回归的方式生成，而是以自上而下的方式生成</strong>（例如在生成单词之前做出（随机）决定），这种做法可能更合乎逻辑（这就是神经网络目前生成图像的方式）。到底何时会开发出这样的新架构/方法还很难说，但我们预计应该就在未来几年，一旦开发出来，LLM 模型的性能将得到大幅提升。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">另一个改进方向是继续进行指令调优，让更多人参与到「教育」LLM（即与 AI 对齐）的过程中。这可以由私人 AI 实验室来实现，也可以是一个更像维基百科的众包项目，以改进和对齐开放模型的 LLM 能力。在这个问题上，我们还是希望偏离传统的 RLHF，而是让人们与模型对话来进行教导，就像我们对待孩子一样。我不确定这种项目的具体时间线，但我已经思考了一段时间，非常希望看到它的实现。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><br></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">上文我们只讨论了改进实际模型的方法，但实际上有一些方法可以在不改变模型的情况下改进 LLM。<strong>方法之一就是为 LLM 提供工具</strong>。这种工具可以是用于查找准确信息的搜索引擎，或者是用于进行基本数学计算的计算器。此外，它还可以是一个结合了推理引擎（符号人工智能的经典组件）的知识库，如 Wolfram Alpha，用于查找事实、进行逻辑推理或其他神经网络不擅长的计算。当然，这个工具还可以是一个用于编写和运行代码的完整编程环境。LLM 可以通过生成触发 API 调用的特殊词元（单词）来使用这些工具，然后将 API 的输出插入到生成的文本中。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.6586270871985158" src="https://oscimg.oschina.net/oscnet/49d3e79a-4b8d-42f1-b679-51c70d2b0c32.png" data-type="png" data-w="1078" height="auto" width="auto" referrerpolicy="no-referrer"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">LLM 使用工具示例。来源：https://arxiv.org/abs/2302.04761</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">上述趋势实际上已经开始了（例如，ChatGPT 插件、LangChain 库和 Toolformer 论文），我相信这些工具将成为 LLM 的核心。</span></strong></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">改进 LLM 的另一个方法是以更智能的方式使用它们，让它们更好地完成任务。这可以通过巧妙的提示或更高级的程序来实现。<strong>比如说我们可以让 LLM 按步骤进行思考（即思想链提示（ chain-of-thoughts prompting）），并提高 LLM 在逻辑任务上的表现。</strong>以下是提示 LLM 按步骤思考的示例：</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-ratio="0.4842592592592593" src="https://oscimg.oschina.net/oscnet/ae908068-436d-4861-9e91-105957832a7b.png" data-type="png" data-w="1080" height="auto" width="auto" referrerpolicy="no-referrer"></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;text-align: center;"><span style="letter-spacing: 2px;font-size: 12px;color: rgb(136, 136, 136);">思维链提示示例。来源：https://arxiv.org/abs/2201.11903</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">同样地，我们可以要求 LLM 反思、批判自己的输出，并对其进行迭代修改。</span></strong><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">通过迭代，我们可以显著提高 LLM 性能，尤其是生成代码方面的性能。<strong>我们还可以更进一步，创建完全自主的智能体，这些智能体可以管理任务列表并迭代任务，直到达到主要目标（请参考 AutoGPT 和 BabyAGI）。</strong><strong>目前，这些自动化智能体的运行效果并不理想，但它们的效果会逐步提升，很难说这些自动化智能体会发展到何种程度，对 LLM 产生何种影响。</strong></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">由于 LLM 可以通过这些程序（思想链、迭代批评等）改进答案，因此，我们可以使用这些程序创建指令-答案对，然后在指令-答案对上按顺序对 LLM 微调以提高其性能。这种自我完善是可能的（参见</span><span style="font-size: 16px;letter-spacing: 2px;color: rgb(136, 136, 136);"><em>https://arxiv.org/abs/2210.11610</em></span><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">），我相信它具有很大的潜力。<strong>例如，我们可以想象模型为了变得更加自洽而与自身进行讨论，这是一种自我反思过程。</strong>可能会进一步提升 LLM 的表现。</span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><p style="margin-left: 8px;margin-right: 8px;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);">LLM 可能还有其他改进方向，总的来说，我们无法确定 LLM 的未来，但显然它们将继续发展下去。<strong>理解和生成文本的能力使 LLM 成为了一项基本技术。即使在目前的发展情况下，LLM 也将解锁大量应用程序，日常工作中的数字助理就是一个很好的例子，更疯狂的是，LLM 甚至可能引导我们创造某种超级智能。</strong></span></p><p style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;line-height: 1.6em;"><span style="font-size: 16px;letter-spacing: 2px;color: rgb(63, 63, 63);"><br></span></p><section style="margin-right: 8px;margin-bottom: 0px;margin-left: 8px;white-space: normal;outline: 0px;caret-color: rgba(0, 0, 0, 0.9);font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-size-adjust: auto;line-height: 1.75em;text-align: left;"><span style="background-color: rgb(255, 255, 255);color: rgb(136, 136, 136);font-size: 14px;letter-spacing: 1px;">其他人都在看</span><br></section><span id="OSC_h3_7"></span><h3 style="letter-spacing: 0.578px;white-space: normal;"><ul class="list-paddingleft-1" style="width: 577.422px;"><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491796%26idx%3D1%26sn%3D41f16bd562cebfeb5fbb06a8b8758ebb%26chksm%3Dfe426ee2c935e7f449d0cc74c9a1faeb23489ee06d6f02554c103459b01fb3ae8b1e1baa7e93%26scene%3D21%23wechat_redirect" textvalue="关于语言大模型的八大论断" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">关于语言大模型的八大论断</a></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491796%26idx%3D1%26sn%3D41f16bd562cebfeb5fbb06a8b8758ebb%26chksm%3Dfe426ee2c935e7f449d0cc74c9a1faeb23489ee06d6f02554c103459b01fb3ae8b1e1baa7e93%26scene%3D21%23wechat_redirect" textvalue="关于语言大模型的八大论断" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2"></a><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491801%26idx%3D1%26sn%3D9cc37240451fa684825ad82a3133e12a%26chksm%3Dfe426eefc935e7f9c31a21752e898004461180b0176f38ee7b390110610e99fff1d664450729%26scene%3D21%23wechat_redirect" textvalue="NCCL 源码解析④：建图过程" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">NCCL 源码解析④：建图过程</a></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491741%26idx%3D1%26sn%3D125132a0c895fbaf0606f0097cf95998%26chksm%3Dfe426eabc935e7bd81c3403dcc85eed4404f32f713862217c526596d86d728e1d94346cbbe43%26scene%3D21%23wechat_redirect" textvalue="揭示 GPT Tokenizer 的工作原理" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">揭示 GPT Tokenizer 的工作原理</a></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491741%26idx%3D1%26sn%3D125132a0c895fbaf0606f0097cf95998%26chksm%3Dfe426eabc935e7bd81c3403dcc85eed4404f32f713862217c526596d86d728e1d94346cbbe43%26scene%3D21%23wechat_redirect" textvalue="揭示 GPT Tokenizer 的工作原理" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2"></a><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491783%26idx%3D1%26sn%3Db3ebb8a7d4441aaceb62db59992db61b%26chksm%3Dfe426ef1c935e7e7a1ddfba5412a98ee8c091c4304724e73b202a0e127b533f8d039a3ed9703%26scene%3D21%23wechat_redirect" textvalue="语言大模型 100K 上下文窗口的秘诀" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">语言大模型 100K 上下文窗口的秘诀</a><br></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247491721%26idx%3D1%26sn%3D71fd215ca3625f276913db5f62d6791e%26chksm%3Dfe426ebfc935e7a96d0437566485a5774b6e3063ba4c768093eaffc25f054730e0f7f836be3f%26scene%3D21%23wechat_redirect" textvalue="GPT 总设计师：大型语言模型的未来" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">GPT 总设计师：大型语言模型的未来</a></p></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><section style="outline: 0px;line-height: 1.75em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247488841%26idx%3D1%26sn%3D6c5de6713dbce2bd25d60db742879368%26chksm%3Dfe419b7fc93612690a667bec72a258ac837c2454cd180c2432c1c190bc236743cf7e4dd0dfee%26scene%3D21%23wechat_redirect" textvalue="一块 GPU 训练 TB 级推荐模型不是梦，OneEmbedding 性能一骑绝尘" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" style="outline: 0px;cursor: pointer;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">OneEmbedding:单卡</a><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247488841%26idx%3D1%26sn%3D6c5de6713dbce2bd25d60db742879368%26chksm%3Dfe419b7fc93612690a667bec72a258ac837c2454cd180c2432c1c190bc236743cf7e4dd0dfee%26scene%3D21%23wechat_redirect" textvalue="一块 GPU 训练 TB 级推荐模型不是梦，OneEmbedding 性能一骑绝尘" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" style="outline: 0px;cursor: pointer;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">训练 TB 级推荐模型不是梦</a></section></li><li style="outline: 0px;font-size: 14px;letter-spacing: 1px;"><section style="outline: 0px;line-height: 1.75em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU5ODY2MTk3Nw%3D%3D%26mid%3D2247490555%26idx%3D1%26sn%3D280c4ac043a31170236a9d8fba5fc2d2%26chksm%3Dfe4195cdc9361cdb6db1cb3b77c66b45c353b2fb65c4d082fbae9b72fe0b3a441ab9101cb147%26scene%3D21%23wechat_redirect" textvalue="GLM 国产大模型训练加速：性能最高提升 3 倍，显存节省 1/3，低成本上手" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">GLM 训练加速：性能最高提升 3 倍，显存节省 1/3</a></section></li></ul><section style="outline: 0px;line-height: 1.75em;text-align: left;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;background-color: rgb(255, 255, 255);letter-spacing: 1px;font-size: 14px;color: rgb(63, 63, 63);">试用 OneFlow: github.com/Oneflow-Inc/oneflow/</span></section></h3><h2 style="margin-right: 8px;margin-left: 8px;letter-spacing: 0.578px;white-space: normal;"><hr style="border-style: solid;border-right-width: 0px;border-bottom-width: 0px;border-left-width: 0px;border-color: rgba(0, 0, 0, 0.1);transform-origin: 0px 0px;transform: scale(1, 0.5);"></h2><p style="margin-bottom: 0px;letter-spacing: 0.578px;white-space: normal;text-align: center;"><img class="rich_pages wxw-img" data-backh="162" data-backw="578" data-galleryid="" data-ratio="0.2802690582959641" data-s="300,640" src="https://oscimg.oschina.net/oscnet/de5775ed-8e8f-4ce5-8a22-887be523b2a7.png" data-type="png" data-w="892" style="width: 100%;display: inline;height: auto;" referrerpolicy="no-referrer"></p><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - OneFlow（OneFlowTechnology）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 04:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oneflow/blog/10086766</guid>
            <link>https://my.oschina.net/oneflow/blog/10086766</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[上海网信办对属地 46 款 App 收集使用个人信息情况开展专项检查]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>「<span style="background-color:#ffffff; color:#222222">网信上海</span>」<span style="background-color:#ffffff; color:#222222">微信公众号<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FIWXU8WCBvJV-6JU8ZEe63w" target="_blank">发文</a>称，为规范 App 个人信息处理活动，保护公民个人信息合法权益，根据《个人信息保护法》《App 违法违规收集使用个人信息行为认定方法》《常见类型移动互联网应用程序必要个人信息范围规定》等法律法规，结合 12345 市民服务热线、市民来信举报等线索，2023 年 4 月至 9 月，上海市网信办对属地下载量较大及投诉较多的 46 款 App 开展了收集使用个人信息专项检查，共发现 160 余项问题。经过通报和跟进指导，截至目前，各 App 运营单位均已完成问题整改。</span></p><h4><span><strong>常见 10 种收集使用个人信息问题</strong></span></h4><blockquote><p style="margin-left:0; margin-right:0"><span><strong><span style="color:#0070c0">问题一：隐私政策关于个人信息收集使用的说明不完整、或与实际情况不一致。</span></strong><span style="background-color:transparent">例如，在<span style="background-color:#fafafa; color:#333333">App 的</span>隐私政策中使用了概括性描述或未完整的列举出收集个人信息业务功能，未准确列明收集个人信息的类型、目的、方式。</span></span></p><p><span><strong><span style="color:#0070c0">问题二：用户不同意隐私政策，<strong><span style="color:#0070c0">App</span></strong>拒绝提供服务。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>提供了无需注册即可使用（如浏览、游客模式）的业务模式，但若是用户不同意隐私政策，<span style="background-color:transparent; color:#1d2b43">App</span>拒绝提供任何业务功能。</span></span></p><p><span><strong><span style="color:#0070c0">问题三：未提供用户主动勾选隐私政策、服务协议选项。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在展示隐私政策时以默认接受的方式呈现，这使得用户可能在不了解隐私政策细节的情况下被认为同意信息收集和使用规则，削弱了用户的知情权和选择权。</span></span></p><p><span><strong><span style="color:#0070c0">问题四：后台模式下超范围收集个人信息。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在后台模式下（一般用户是无感知情况下），超越其合理功能范围，频繁地收集用户的个人信息。</span></span></p><p><span><strong><span style="color:#0070c0">问题五：<strong><span style="color:#0070c0">App</span></strong>收集敏感信息时未同步告知目的和必要性。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在收集个人敏感信息（如精准定位信息、通讯录、身份证号、银行卡号等）时，未明确告知用户这些信息将用于什么目的。</span></span></p><p><span><strong><span style="color:#0070c0">问题六：在用户同意隐私政策前，<strong><span style="color:#0070c0">App</span></strong>已经收集个人信息。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>首次运行时，在提示用户阅读隐私政策并征得同意前，已经调用系统函数收集 Android_id、MAC 地址、蓝牙信息、应用列表等信息。</span></span></p><p><span><strong><span style="color:#0070c0">问题七：<strong><span style="color:#0070c0">App</span></strong>未提供账户注销功能或注销后信息未及时清除。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>无注销功能，或注销存在各种障碍，无法完成注销，或用户注销账号后，<span style="background-color:transparent; color:#1d2b43">App</span>实际并未清除个人信息。</span></span></p><p><span><strong><span style="color:#0070c0">问题八：<strong><span style="color:#0070c0">App</span></strong>在未涉及业务功能时提前申请可收集个人信息的权限。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在用户未实际使用业务功能的情况下，提前申请了与当前使用业务无关的电话、存储、定位等系统权限。</span></span></p><p><span><strong><span style="color:#0070c0">问题九：频繁申请权限干扰用户使用。</span></strong><span style="background-color:transparent">例如，在用户明确拒绝授权某项系统权限后，每当<span style="background-color:transparent; color:#1d2b43">App</span>重启进入同一业务功能时都重新索要用户已拒绝授权的系统权限，或在用户使用与该系统权限无关的功能时频繁索要用户已拒绝授权的系统权限。</span></span></p><p><span><strong><span style="color:#0070c0">问题十：无隐私政策。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>未提供隐私政策或提供的「隐私政策」未包含收集使用个人信息规则，无法确定个人信息的使用方式和保护措施。</span></span></p></blockquote><blockquote><p><span style="color:#000000">上海市网信办提醒广大 App 运营者，收集使用个人信息需按照《个人信息保护法》《App 违法违规收集使用个人信息行为认定方法》及相关法律法规要求，严格遵循合法、正当、必要和诚信的原则，提供完整清晰透明、易于理解的隐私政策；收集个人信息遵循最小必要原则，不过度、频繁收集个人信息，不得因用户不同意收集非必要个人信息，而拒绝用户使用其基本服务功能；收集敏感个人信息时同步告知目的和必要性；采取必要措施保障所处理的个人信息安全。上海市网信办将对属地 App 收集使用个人信息情况持续开展监督检查。</span></p></blockquote><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">附件：</span><strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">App&nbsp;</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">违法违规收集个人信息问题清单</span></strong></p><p><img alt="" height="3054" src="https://oscimg.oschina.net/oscnet/up-b5eaef136e48f69bfd1524e127857be14c6.jpg" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260022</guid>
            <link>https://www.oschina.net/news/260022</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 四问复合索引，让你的数据查询速度飞起]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411666%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><span>&nbsp;</span>《华为云 GES 持久化图数据库复合索引介绍》</a>，作者：村头树下。</p><p>本文章主要介绍索引的作用，以及如何实现这种功能，希望可以帮助理解索引的作用以及如何使用索引</p><span id="OSC_h2_1"></span><h2>1. 什么是复合索引</h2><p>复合索引是用户手动建立的用于加速查询的一类额外数据。详细参数可以参考规格文档</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.huaweicloud.com%2Fapi-ges%2Fges_03_0454.html" rel="nofollow" target="_blank">https://support.huaweicloud.com/api-ges/ges_03_0454.html</a></p><span id="OSC_h2_2"></span><h2>2. 复合索引能做什么</h2><p>复合索引有两类。一是 label 索引，用于加速 label 的扫描。二是属性索引，用于加速属性过滤。</p><p>这里列举了一些常用接口（语句）与索引的关系</p><div><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th><p><strong>api 接口</strong></p></th><th><p><strong>索引加速方式</strong></p></th></tr></tbody><tbody><tr><td><p>summary</p></td><td><p>扫描 label 索引，统计各 label 点边数目</p></td></tr><tr><td><p>match (n:user) return count(*)</p></td><td><p>扫描点 label 索引，统计 label 为 user 的点数目</p></td></tr><tr><td><p>match ()-[r:label]-() return count®</p></td><td><p>扫描边 label 索引，统计指定 label 点数目</p></td></tr><tr><td><p>match (n:user) return n limit 1</p></td><td><p>通过点 label 索引快速寻找 label 为 user 的点</p></td></tr><tr><td><p>match (n:user) where n.age &gt; 10 return n limit 1</p></td><td><p>仅有 label 索引时扫描 label 索引，寻找 user 的点，然后进行属性过滤。当存在 age 属性索引时直接使用属性索引定位到目标点</p></td></tr><tr><td><p>match (n:user) where n.age in [1, 10] return n limit 1</p></td><td><p>同上</p></td></tr></tbody></table></div><span id="OSC_h2_3"></span><h2>3. 无索引时如何查询</h2><p>首先了解无索引的情况下，查询的逻辑，才可以理解索引在此基础上做了什么使得查询能够加速。查询逻辑主要与两个方面有关：数据结构，以及数据访问方式，以及查询场景。</p><span id="OSC_h3_4"></span><h3>a) 原始点结构</h3><p>持久化版本所有数据都是以 KV（键值对）的方式存储在分布式 KV 数据库中，在没有建立索引的时候，数据库中仅有原始点边 KV。以点数据结构为例：</p><p>Key:<span>&nbsp;</span><img alt="cke_145.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.59034676660642229201211385752181:50001231000000:2800:E900A4FBBB3D3F9F6E97CFC3D06C74E3E1A9CDCEF610F408CBE35CF042A02EB3.png" referrerpolicy="no-referrer"></p><p>Value:<img alt="cke_146.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.09951834891756932510363651849529:50001231000000:2800:635CA164693DB173830EC496DD2FF4EC716BB1565F80C73A33B6BC995BE350CA.png" referrerpolicy="no-referrer"></p><p>key 的开始部分为 kVType，这是所有数据都会存在的固定前缀，用以区分不同类型的数据。然后是 Vid 是全局唯一点 id。Labelid 是标识 label 的内置编码。Value 则是属性的数据。</p><span id="OSC_h3_5"></span><h3>b) 数据访问方式</h3><p>所有的图数据的查询最终都是依托于 KV 数据库的访问。常用的访问 KV 数据的方式有两种：</p><ol><li>精确查询接口，指定完整的 key 查询 value</li><li>前缀查询接口，仅指定 key 的前缀部分，查询所有 key 的前缀匹配的 KV 数据对。前缀查相对来说会更加频繁的使用。一个场景可能会需要多次前缀查，而前缀查的次数越多，结果越多，相应的此场景响应速度就越慢。前缀查结果大小直接与前缀的长度有关，前缀越长或者越精确，那么前缀查的结果越少。需要的计算量也越少。相应速度就会越快。</li></ol><span id="OSC_h3_6"></span><h3>c) 查询场景：</h3><p>常见查询场景的对应的 kv 层接口调用：</p><div><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th><p><strong>场景</strong></p></th><th><p><strong>KV 接口及调用次数</strong></p></th><th><p><strong>查询速度</strong></p></th><th><p><strong>对应 Cypher 语句</strong></p></th></tr></tbody><tbody><tr><td><p>指定 id 过滤</p></td><td><p>前缀查 * 1</p></td><td><p>快，由于 KVType 和 Vid 已知，可以拼出前缀，同时一个 id 一般不会有太多 label，前缀查的结果不会特别多。</p></td><td><p>match（n） where id(n)=‘0’ return n</p></td></tr><tr><td><p>指定 label 过滤</p></td><td><p>前缀查</p><div>
       n + 过滤 
     </div> m <p>&nbsp;</p></td><td><p>慢， 由于不知道 Vid，所以只能先拼出只有 KVType 的前缀，然后前缀查出所有点，再逐个过滤 Label,点数据较多时，会有多次前缀查，分批获取再过滤。</p></td><td><p>match（n:Label） return n</p></td></tr><tr><td><p>指定 label+属性过滤</p></td><td><p>前缀查</p><div>
       n + 过滤 
     </div> m <p>&nbsp;</p></td><td><p>慢， 查询前缀为 KvType,遍历全图点，先进行 Label 过滤，再进行属性过滤</p></td><td><p>match (n:Label) where n.prop=‘xx’ return n</p></td></tr><tr><td><p>指定属性过滤</p></td><td><p>前缀查</p><div>
       n + 过滤 
     </div> m <p>&nbsp;</p></td><td><p>非常慢， 查询前缀为 KvType,遍历全图点，全部进行属性过滤</p></td><td><p>match (n) where n.prop=‘xx’ return n</p></td></tr></tbody></table></div><p>可见，除了指定 id 的查询，其他所有查询均非常慢。这些查询都需要进行全图点扫描加过滤的方式来获取结果。这与查询出来的结果数目无关。对于较大的图来说，这样的查询代价是十分巨大的。</p><span id="OSC_h2_7"></span><h2>4. 复合索引如何加速</h2><p>查询慢的场景无外乎两种场景，label 查询或者属性查询。在没有索引的情况下，这两种查询都是建立在全局点扫描的基础上，进行过滤。当有效数据占比越低（例如全局点 1w,目标点仅有 1 个），这种扫描方式就越显得不划算。</p><p>对于这两种场景，我们可以建立对应的索引。索引本身也是 KV 数据。所以其 key 的布局就决定了其功能。</p><p>1.对于 label 过滤场景，索引的 key 的格式为：</p><p><img alt="cke_147.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.79665385416397739426054876098597:50001231000000:2800:A2CE99DE5BD4B61F5F56D26220A0FF10DC970A0B97E7B3BBD343B82E13682481.png" referrerpolicy="no-referrer"></p><p>对于每一个点，都会有一条对应的 Label 索引 KV。</p><p>当需要过滤特定 Label 时，可以拼出 KVType+Label 的前缀，利用 kv 数据底座的前缀查接口，就能直接将所有符合条件的点过滤出来。</p><p>2. 对于属性过滤的场景，索引的 key 格式为：</p><p><img alt="cke_148.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.89575332567975621558954633422059:50001231000000:2800:721EE988DF62FDDA4506951B526B38089F1F94BC427E246FF092B9A3B510B7B1.png" referrerpolicy="no-referrer"></p><p>属性索引只针对个别过滤较为频繁的属性而建立。所以也只会对包含此属性的点才会生成属性索引 kv。相比于 Label 索引这里只是多了一个 property 字段。此字段填的是 Vid 对应点的属性的值。需要注意的是，property 字段并不包含全部的点属性，仅仅是待过滤属性的值。</p><p>当进行属性查询时，由于知道目标值（例如 where n.prop=1,目标值就是 1）。直接拼出 KVTypr+Label+Property，调用前缀查询接口。即可查出所有符合条件的点。</p><p>当利用索引查出匹配的索引 KV 之后，就可以很方便的拿到对应的 VId。然后根据此 Vid，就能快速查询到这个点的属性，或者邻居等信息。</p><span id="OSC_h2_8"></span><h2>5. 索引建立的若干建议</h2><p>索引并不是没有代价的，虽然它能加速查询，但是会降低写操作的性能，以及耗费更多的磁盘空间。所以建立索引之前需要考虑是不是必要的。这可以从数据区分度，数据大小，以及访问频率三个方面来评估。</p><ul><li>数据区分度：对于属性索引建议在过滤性好的属性上建立。值分布较为分散，比较适合建立。例如身份证号，手机号。但是对于性别这种属性，就不建议为此建立。对于 label 索引，如果图里面只有一个 label，那么建 label 索引其实也是没有什么必要的，但是大部分情况，label 索引都是必要的。</li><li>数据大小：这主要是针对属性索引来说的，在已经有 Label 索引的前提下，如果某个 label 下的点边数目很少，即使扫描所有 label 代价也不高，这时候没有必要再为其建立属性索引。</li><li>访问频率：这一点很好理解，只对频繁在 where 子句中出现的属性建立索引。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10114608</guid>
            <link>https://my.oschina.net/u/4526289/blog/10114608</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1-8 月我国规上互联网企业完成业务收入 9067 亿元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">工信部最新</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Fhlw%2Fart%2F2023%2Fart_d6cf975ca04449a4b079073551cd9e4a.html" target="_blank">发布</a><span style="color:#000000"><span style="background-color:#ffffff">的&nbsp;2023 年 1－8 月份互联网和相关服务业运行情况指出，</span>1－8 月份，互联网业务收入保持平稳，利润总额快速增长，研发经费降幅持续收窄。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><strong>一、总体运行情况</strong></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><strong>互联网业务收入保持平稳</strong><strong>。</strong>1－8 月份</span><span style="display:none">&nbsp;</span><span>，我国规模以上互联网和相关服务企业<span>1</span>（以下简称互联网企业）完成互联网业务收入 9067 亿元，同比增长 2.6</span><span>%。</span><span style="display:none">&nbsp;</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="252" src="https://oscimg.oschina.net/oscnet/up-03083ff7a0573ef952ceb153cae6dc12489.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>利润</span></strong><strong><span>总额</span></strong><strong><span>快速增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，我国规模以上互联网企业营业成本同比增长</span></span><span>5.4%。实现利润总额</span><span>913.8</span><span>亿元，同比增长 28%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="242" src="https://oscimg.oschina.net/oscnet/up-db3d44cf3265a7a1f2a4a2cf6737a2e6925.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>研发经费</span></strong><strong><span>降幅持续收窄</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，我国规模以上互联网企业共投入研发经费</span></span><span>477 亿元，同比下降 0.8</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="240" src="https://oscimg.oschina.net/oscnet/up-dcb0f66bd3c2a7509fa2f1567da737d4dcb.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong><span>二、分领域运行情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（一）信息服务领域企业</span></strong><strong><span>收入小幅回落</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，以信息服务为主的企业（包括新闻资讯、搜索、社交、游戏、音乐视频等）互联网业务收入同比</span></span><span>下降 3.1</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（二）生活服务领域企业收入</span></strong><strong><span>较快增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，以提供生活服务为主的平台企业（包括本地生活、租车约车、旅游出行、金融服务、汽车、房屋住宅等）互联网业务收入同比增长</span></span><span>11.3%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（三）网络销售领域企业收入</span></strong><strong><span>高速增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span>，主要提供网络销售服务的企业（包括大宗商品、农副产品、综合电商、医疗用品、快递等）互联网业务收入同比增长</span><span>45.1%。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong><span>三、分地区运行情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>东部地区互联网业务收入</span></strong><strong><span>保持平稳</span></strong><strong><span>增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，东部地区完成互联网业务收入</span></span><span>8474 亿元，同比增长 3.7%，增速较</span><span>1</span><span>－7 月份回落 0.3</span><span><span>个百分点</span></span><span>，占全国互联网业务收入的比重为 93.5%。中部地区完成互联网业务收入</span><span><span>289.2</span></span><span>亿元，同比下降 9.7%，降幅较</span><span>1</span><span>－7 月份扩大 1.7</span><span><span>个百分点。西部地区完成互联网业务收入</span></span><span>281.4 亿元，同比下降 8.3%，降幅较</span><span>1</span><span>－7 月份收窄 1.6</span><span><span>个百分点。东北地区完成互联网业务收入</span></span><span>22.3 亿元，同比下降 38.5%，降幅较</span><span>1</span><span>－7 月份收窄 2.1</span><span><span>个百分点。</span></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="245" src="https://oscimg.oschina.net/oscnet/up-9bed8dc21ec2637d6f7bb4730165f5dbae8.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>近半数</span></strong><strong><span>地区互联网业务</span></strong><strong><span>增速实现正增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span>，互联网业务累计收入居前</span><span>5 名的</span><span>北京</span><span>（增长 0.4</span><span>%）、上海</span><span>（增长 16.2</span><span>%）、浙江</span><span>（增长 3.6%）、</span><span>广东</span><span>（下降 9.5%）和天津（增长</span><span><span>21.9</span></span><span>%）共完成业务收入</span><span><span>7995</span></span><span>亿元，同比增长 4.6%，占全国（扣除跨地区企业）比重达 88.2%。全国互联网业务增速实现正增长的省（区、市）有 14 个。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="243" src="https://oscimg.oschina.net/oscnet/up-4a22e931c722a693cb22702142dcadd6b5f.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:2px; margin-right:0px; text-align:justify"><strong><span>四、我国移动应用程序（APP）发展情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>根据全国 APP 技术检测平台统计，截至 8 月底，我国国内市场上监测到活跃的 APP 数量<span><span>2</span></span>为 260 万款（包括安卓和苹果商店）。移动应用开发者数量为 83 万,其中安卓开发者为 25 万，苹果开发者为 58 万。8 月份，安卓应用商店在架应用累计下载量 82 亿次。</span></p><p style="color:#070707; margin-left:2px; margin-right:0; text-align:justify"><span><strong><span>附注：</span></strong></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>1.规模以上互联网和相关服务企业口径由上年互联网和相关服务收入 500 万元以上调整为 2000 万元及以上，文中所有同比增速均按可比口径计算。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>2.活跃的移动应用程序数量是指报告期内我国市场上经过用户主动下载安装的第三方移动应用的总个数，其中安卓应用数的计算方法是根据智能手机记录的已安装移动应用去重后获得。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259952</guid>
            <link>https://www.oschina.net/news/259952</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DataSophon —— 云原生大数据管家]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div style="text-align:left"><p style="color:rgba(249,250,251,var(--bs-text-opacity)) !important; margin-left:0; margin-right:0">DataSophon 是 Java 为主要语言开发的新一代云原生大数据管家，致力于快速实现部署、管理、监控以及自动化运维大数据云原生平台，帮助用户快速构建起稳定、高效、可弹性伸缩的大数据云原生平台。</p><h2 style="text-align:start"><a href="https://github.com/datavane/datasophon/blob/dev/README_CN.md#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">主要特性</a></h2></div><ul><li>极易部署，用户仅需几步即可完成初始化环境配置，从而快速地完成大规模大数据集群的部署，支持数千个节点规模。</li><li>全面兼容开源生态，基于开放式的管理架构，已集成多种常用大数据组件，包括数据集成、数据存储、计算引擎、任务调度、权限管理等大数据处理的各个环节。</li><li>兼容复杂环境，极简的架构设计，使其极易适配各种复杂环境，支持 arm 和 x86 机器混合部署，支持常用的 Linux 生态操作系统。</li><li>便捷运维，基于生产实践展示用户最关心的监控指标，可方便地对集群、节点和服务进行监控和运维操作，助您大幅提升运维工作效率。</li><li>安全可靠，DataSophon 支持 Kerberos 身份认证和数据加密，使用 Ranger 数据访问控制，从而支持数据加密和权限控制，保证数据安全。</li><li>便捷告警，支持告警组和告警指标管理，监控指标全面丰富，用户可根据监控指标自定义告警组和告警指标。</li></ul><p><img height="883" src="https://oscimg.oschina.net/oscnet/up-20ccfba2265462539d7eaf8b767ec24e177.png" width="1587" referrerpolicy="no-referrer"></p><p><strong>产品架构</strong></p><p><img height="286" src="https://static.oschina.net/uploads/space/2023/0927/102225_EzMI_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><strong>技术架构</strong></p><p><img height="351" src="https://static.oschina.net/uploads/space/2023/0927/102300_8rho_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/datasophon</guid>
            <link>https://www.oschina.net/p/datasophon</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 为开发者打造的代码解释器 Octopus]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img width="200px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/86af130f-7d0d-4cfb-9410-fc338426938e" align="center" referrerpolicy="no-referrer"></p><p><img src="https://img.shields.io/github/actions/workflow/status/dbpunk-labs/octogen/ci.yaml" alt="GitHub Workflow Status (with event)" referrerpolicy="no-referrer"><a href="https://gitee.com/link?target=https%3A%2F%2Fdiscord.gg%2FUjSHsjaz66"><img src="https://badgen.net/badge/icon/discord?icon=discord&amp;label" alt="Discord" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2FOCopilot7817"><img src="https://img.shields.io/twitter/follow/OCopilot7817?style=flat-square" alt="Twitter Follow" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fpypi.org%2Fproject%2Fog-chat%2F"><img src="https://img.shields.io/pypi/v/og_chat" alt="PyPI - Version" referrerpolicy="no-referrer"></a><img src="https://img.shields.io/pypi/dm/og_chat?logo=pypi" alt="PyPI - Downloads" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/dbpunk-labs/octogen/blob/main/README.md">English</a></p><blockquote><h2><a id="user-content-octopus" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#octopus"></a>Octopus</h2><p>一款为开发者打造的开源的代码解释器</p></blockquote><p align="center"><img width="1000px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/8ec0a02b-20a9-47ec-9b15-1ede8fa94dbb" align="center" referrerpolicy="no-referrer"></p><table><thead><tr><th>OS</th><th>Platform</th></tr></thead><tbody><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/31b907e9-3a6f-4e9e-b0c0-f01d1e758a21" referrerpolicy="no-referrer"></td><td>✅</td></tr><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/565d5f93-baac-4a77-ab1c-7d845e2fdb6d" referrerpolicy="no-referrer"></td><td>✅</td></tr><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/acb7f919-ef09-446e-b1bc-0b50bc28de5a" referrerpolicy="no-referrer"></td><td>✅</td></tr></tbody></table><h2><a id="user-content-快速上手" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B"></a>快速上手</h2><p>在本地电脑安装 octopus, 你可以选择使用 openai 或者 codellama-7B</p><p>本地环境要求</p><ul><li>python 3.10 and above</li><li>pip</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.docker.com%2Fproducts%2Fdocker-desktop%2F">docker</a> 24.0.0 and above, docker desktop is recommendedr</li></ul><p>安装 octogen 启动器</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">pip <span class="nb">install </span>og_up</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>使用 og_up 启动器初始化本地环境</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">og_up</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>开始体验 octogen, 在命令行执行<code>og</code></p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">Welcome to use octogen❤️ . To ask a programming question, simply type your question and press esc + enter</span><span id="LC2" class="line">You can use /help to look for help</span><span id="LC3" class="line"></span><span id="LC4" class="line">[1]🎧&gt;</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-octopus 内部实现" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#octopus%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0"></a>Octopus 内部实现</h2><p><img src="https://github.com/dbpunk-labs/octogen/assets/8623385/95dd6f84-6de8-476a-9c66-9ab591ed9b0e" alt="octogen-internal drawio" referrerpolicy="no-referrer"></p><ul><li>Octopus 内核: 当前基于 notebook 实现的代码执行引擎</li><li>Octopus Agent: 处理用户请求，将请求发给大模型服务 API 和将大模型生成的代码发给 Octopus 内核执行代码</li><li>Octopus 命令行工具: 将用户请求发给 Agent 和渲染 Agent 返回的代码，文本和图片</li></ul><p>每个组件之间都是采用流式方式进行数据交换，大模型每写一个字都会在命令行上面实时展示.</p><h2><a id="user-content-功能列表" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8"></a>功能列表</h2><ul><li>在 docker 环境自动执行代码</li><li>实验功能，在 iterm2 和 kitty 终端进行图片显示</li><li>支持通过<code>/up</code>命令将文件上传到 Octopus 内核，你可以在写问题描述的过程中使用上传文件命令</li><li>实验功能， 支持将大模型生成的代码片段打包在一起生成一个应用，然后通过<code>/run</code> 命令直接执行</li><li>支持将输出内容文本和代码通过 <code>/cc</code>命令复制到粘贴板上面</li><li>支持问题历史功能，提问历史将会被保存在本地</li></ul><p>如果你有功能需求建议，可以创建一个讨论帖子和大家一起讨论</p><h2><a id="user-content-计划" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#%E8%AE%A1%E5%88%92"></a>计划</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdbpunk-labs%2Foctogen%2Fissues%2F64">roadmap for v0.5.0</a></li></ul>]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/dbpunk-labs/octogen</guid>
            <link>https://gitee.com/dbpunk-labs/octogen</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 代码层面探索前端性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>前言</h1><p>最近在做性能优化，具体优化手段，网上铺天盖地，这里就不重复了。</p><p>性能优化可分为以下几个维度：代码层面、构建层面、网络层面。<br> 本文主要是从代码层面探索前端性能，主要分为以下 4 个小节。</p><ul><li><p>使用 CSS 替代 JS</p></li><li><p>深度剖析 JS</p></li><li><p>前端算法</p></li><li><p>计算机底层</p></li></ul><span id="OSC_h1_2"></span><h1>使用 CSS 替代 JS</h1><p>这里主要从动画和 CSS 组件两个方面介绍。</p><span id="OSC_h3_3"></span><h3>CSS 动画</h3><p>CSS2 出来之前，哪怕要实现一个很简单的动画，都要通过 JS 实现。比如下面红色方块的水平移动：</p><p><img src="https://img11.360buyimg.com/imagetools/jfs/t1/154413/5/36918/38344/64d78222Fa380ff2e/b29ece75883b69d1.gif" alt="水平移动" referrerpolicy="no-referrer"></p><p>对应 JS 代码：</p><pre><code>let redBox = document.getElementById('redBox')
let l = 10

setInterval(() =&gt; {
    l+=3
    redBox.style.left = `${l}px`
}, 50)


</code></pre><p>1998 年的 CSS2 规范，定义了一些动画属性，但由于受当时浏览器技术限制，这些特性并没有得到广泛的支持和应用。</p><p>直到 CSS3 的推出，CSS 动画得到了更全面地支持。同时，CSS3 还引入了更多的动画效果，使得 CSS 动画在今天的 Web 开发中得到了广泛的应用。</p><p>那么 CSS3 都能实现什么动画，举几个例子：</p><ul><li><p><em>过渡（Transition）</em>- 过渡是 CSS3 中常用的动画效果之一，通过对一个元素的某些属性进行变换，使元素在一段时间内从一个状态平滑地过渡到另一个状态。</p></li><li><p><em>动画（Animation）</em>- 动画是 CSS3 中另一个常用的动画效果，其用于为一个元素添加一些复杂的动画效果，可以通过关键帧（@keyframes）来定义一串动画序列。</p></li><li><p><em>变换（Transform）</em>- 变换是 CSS3 中用于实现 2D/3D 图形变换效果的一种技术，包括旋转、缩放、移动、斜切等效果。</p></li></ul><p>把上面的例子改写成 CSS 代码如下：</p><pre><code>#redBox {
    animation: mymove 5s infinite;
}

@keyframes mymove
{
    from {left: 0;}
    to {left: 200px;}
}


</code></pre><p>同样的效果，用样式就能实现，何乐而不为呢。</p><p>需要指出的是，CSS 的动画仍在不断发展和改进，随着新的浏览器特性和 CSS 版本的出现，CSS 动画的特性也在不断地增加和优化，以满足日益复杂的动画需求和更好的用户体验。</p><span id="OSC_h3_4"></span><h3>CSS 组件</h3><p>在一些知名的组件库中，有些组件的大部分 props 是通过修改 CSS 样式实现的，比如 Vant 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvant-ui.github.io%2Fvant%2F%23%2Fzh-CN%2Fspace" rel="nofollow" target="_blank">Space</a>组件。</p><table><tbody><tr><th>Props</th><th>功能</th><th>CSS 样式</th></tr></tbody><tbody><tr><td>direction</td><td>间距方向</td><td>flex-direction: column;</td></tr><tr><td>align</td><td>对齐方式</td><td>align-items: xxx;</td></tr><tr><td>fill</td><td>是否让 Space 变为一个块级元素，填充整个父元素</td><td>display: flex;</td></tr><tr><td>wrap</td><td>是否自动换行</td><td>flex-wrap: wrap;</td></tr></tbody></table><p>再比如 Ant Design 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fant.design%2Fcomponents%2Fspace-cn" rel="nofollow" target="_blank">Space</a>组件。</p><table><tbody><tr><th>Props</th><th>功能</th><th>CSS 样式</th></tr></tbody><tbody><tr><td>align</td><td>对齐方式</td><td>align-items: xxx;</td></tr><tr><td>direction</td><td>间距方向</td><td>flex-direction: column;</td></tr><tr><td>size</td><td>间距大小</td><td>gap: xxx;</td></tr><tr><td>wrap</td><td>是否自动换行</td><td>flex-wrap: wrap;</td></tr></tbody></table><p>这类组件完全可以封装成 SCSS 的 mixin 实现（LESS 也一样），既能减少项目的构建体积（两个库的 Space 组件 gzip 后的大小分别为 5.4k 和 22.9k），又能提高性能。</p><blockquote><p>查看组件库某个组件的体积，可访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbundlephobia.com%2F" rel="nofollow" target="_blank">连接</a>。</p></blockquote><p>比如下面的 space mixin：</p><pre><code>/* 
* 间距
* size: 间距大小，默认是 8px
* align: 对齐方式，默认是 center，可选 start、end、baseline、center
* direction: 间距方向，默认是 horizontal，可选 horizontal、vertical
* wrap: 是否自动换行，仅在 horizontal 时有效，默认是 false
*/
@mixin space($size: 8px, $direction: horizontal, $align: center, $wrap: false) {
    display: inline-flex;
    gap: $size;

    @if ($direction == 'vertical') {
        flex-direction: column;
    }

    @if ($align == 'center') {
        align-items: center;
    }

    @if ($align == 'start') {
        align-items: flex-start;
    }

    @if ($align == 'end') {
        align-items: flex-end;
    }

    @if ($align == 'baseline') {
        align-items: baseline;
    }

    @if ($wrap == true) {
        @if $direction == 'horizontal' {
            flex-wrap: wrap;
        }
    }
}


</code></pre><p>类似的组件还有 Grid、Layout 等。</p><p>再说下图标，下面是 Ant Design 图标组件的第一屏截图，有很多仅用 HTML + CSS 就可以轻松实现。</p><p><img src="https://img14.360buyimg.com/imagetools/jfs/t1/180707/33/35268/43627/64d24737Fe70bfa62/5ff7dcc4a24e0b54.jpg" alt="Ant Design 方向图标" referrerpolicy="no-referrer"></p><p>实现思路：</p><ul><li><p>优先考虑只使用样式实现</p></li><li><p>仅靠样式满足不了，就先增加一个标签，通过这个标签和它的两个伪元素 ::before 和 ::after 实现</p></li><li><p>一个标签实在不够，再考虑增加额外的标签</p></li></ul><p>比如实现一个支持四个方向的实心三角形，仅用几行样式就可以实现（上面截图是 4 个图标）：</p><pre><code>/* 三角形 */
@mixin triangle($borderWidth: 10, $shapeColor: #666, $direction: up) {
    width: 0;
    height: 0;
    border: if(type-of($borderWidth) == 'number', #{$borderWidth} + 'px', #{$borderWidth}) solid transparent;

    $doubleBorderWidth: 2 * $borderWidth;
    
    $borderStyle: if(type-of($doubleBorderWidth) == 'number', #{$doubleBorderWidth} + 'px', #{$doubleBorderWidth}) solid #{$shapeColor};

    @if($direction == 'up') {
        border-bottom: $borderStyle;
    }

    @if($direction == 'down') {
        border-top: $borderStyle;
    }

    @if($direction == 'left') {
        border-right: $borderStyle;
    }

    @if($direction == 'right') {
        border-left: $borderStyle;
    }
}


</code></pre><p>总之，<em>能用 CSS 实现的就不用 JS</em>，不仅性能好，而且还跨技术栈，甚至跨端。</p><span id="OSC_h1_5"></span><h1>深度剖析 JS</h1><p>介绍完了 CSS，再来看 JS，主要从基本语句和框架源码两个方面深入。</p><span id="OSC_h3_6"></span><h3>if-else 语句的优化</h3><p>先了解下 CPU 是如何执行条件语句的。参考如下代码：</p><pre><code>const a = 2
const b = 10
let c
if (a &gt; 3) {
    c = a + b
} else {
    c = 2 * a
}


</code></pre><p>CPU 执行流程如下：</p><p><img src="https://img10.360buyimg.com/imagetools/s800x600_jfs/t1/161135/14/39555/33039/64d24b5eF7de3c3f5/ac2e1a47b7dd0a46.jpg" alt="条件语句" referrerpolicy="no-referrer"></p><p>我们看到，在执行到指令 0102 时候，由于不满足 a &gt; 3 这个条件，就直接跳转到 0104 这个指令去执行了；而且，计算机很聪明，如果它在编译期间发现 a 永远不可能大于 3，它就会直接删除 0103 这条指令，然后，0104 这条指令就变成了下一条指令，直接顺序执行，也就是编译器的优化。</p><p>那么回到正题，假如有以下代码：</p><pre><code>function check(age, sex) {
    let msg = ''
    if (age &gt; 18) {
        if (sex === 1) {
            msg = '符合条件'
        } else {
            msg = ' 不符合条件'
        }
    } else {
        msg = '不符合条件'
    }
}


</code></pre><p>逻辑很简单，就是筛选出 age &gt; 18 并且 sex == 1 的人，代码一点儿问题都没有，但是太啰嗦，站在 CPU 的角度来看，需要执行两次跳转操作，当 age &gt; 18 时，就进入内层的 if-else 继续判断，也就意味着再次跳转。</p><p>其实我们可以直接优化下这个逻辑（通常我们也是这样做的，但是可能知其然而不知其所以然）：</p><pre><code>function check(age, sex){
    if (age &gt; 18 &amp;&amp; sex ==1) return '符合条件'
    return '不符合条件'
}


</code></pre><p>所以，<em>逻辑能提前结束就提前结束</em>，减少 CPU 的跳转。</p><span id="OSC_h3_7"></span><h3>Switch 语句的优化</h3><p>其实 switch 语句和 if-else 语句的区别不大，只不过写法不同而已，但是，switch 语句有个特殊的优化，那就是数组。</p><p>参考以下代码：</p><pre><code>function getPrice(level) {
    if (level &gt; 10) return 100
    if (level &gt; 9) return 80
    if (level &gt; 6) return 50
    if (level &gt; 1) return 20
    return 10
}


</code></pre><p>我们改成 switch 语句：</p><pre><code>function getPrice(level) {
    switch(level)
        case 10: return 100
        case 9: return 80
        case 8: 
        case 7: 
        case 6: return 50
        case 5:
        case 4: 
        case 3:
        case 2: 
        case 1: return 20
        default: return 10
}


</code></pre><p>看着没啥区别，其实编译器会把它优化成一个数组，其中数组的下标为 0 到 10，不同下标对应的价格就是 return 的数值，也就是：</p><p><img src="https://img10.360buyimg.com/imagetools/s600x400_jfs/t1/175596/15/37588/20396/64d843c7F89354a5e/ca2e5f45d0bdb94a.jpg" alt="Swich 数组" referrerpolicy="no-referrer"></p><p>而我们又知道，数组是支持随机访问的，速度极快，所以，编译器对 switch 的这个优化就会大大提升程序的运行效率，这可比一条一条执行命令快多了。</p><p>那么，我还写个毛的 if-else 语句啊，我直接全部写 switch 不就行了？</p><p>不行！因为编译器对 switch 的优化是有条件的，它要求你的 code 必须是紧凑的，也就是连续的。</p><p>这是为什么呢？因为我要用数组来优化你啊，你如果不是紧凑的，比如你的 code 是 1、50、51、101、110，我就要创建一个长度 110 的数组来存放你，只有这几个位置有用，岂不是浪费空间！</p><p>所以，我们在使用 switch 的时候，尽量保证_code 是紧凑的数字类型_的。</p><span id="OSC_h3_8"></span><h3>循环语句的优化</h3><p>其实循环语句跟条件语句类似，只不过写法不同而已，循环语句的优化点是以减少指令为主。</p><p>我们先来看一个中二的写法：</p><pre><code>function findUserByName(users) {
   let user = null
   for (let i = 0; i &lt; users.length; i++) {
       if (users[i].name === '张三') {
           user = users[i]
       }
   }
   return user
}


</code></pre><p>如果数组长度是 10086，第一个人就叫张三，那后面 10085 次遍历不就白做了，真拿 CPU 不当人啊。</p><p>你直接这样写不就行了：</p><pre><code>function findUserByName(users) {
    for (let i = 0; i &lt; users.length; i++) {
        if (users[i].name === '章三') return users[i]
    }
}


</code></pre><p>这样写效率高，可读性强，也符合我们上述的_逻辑能提前结束就提前结束_这个观点。CPU 直接感谢你全家。</p><p>其实，这里还有一点可以优化的地方，就是我们的数组长度可以提取出来，不必每次都访问，也就是这样：</p><pre><code>function findUserByName(users) {
    let length = users.length
    for (let i = 0; i &lt; length; i++) {
        if (users[i].name === '章三') return users[i]
    }
}


</code></pre><p>这看起来好像有点吹毛求疵了，确实是，但是如果考虑到性能的话，还是有点用的。比如有的集合的 size() 函数，不是简单的属性访问，而是每次都需要计算一次，这种场景就是一次很大的优化了，因为省了很多次函数调用的过程，也就是省了很多个 call 和 return 指令，这无异是提高了代码的效率的。尤其是在循环语句这种容易量变引起质变的情况下，差距就是从这个细节拉开的。</p><p>函数调用过程参考：</p><p><img src="https://img11.360buyimg.com/imagetools/s600x400_jfs/t1/131395/2/38988/49150/64d84d80Fd23ae780/ecbcc25c4864d6be.jpg" alt="函数调用" referrerpolicy="no-referrer"></p><p>对应代码如下：</p><pre><code>let a = 10
let b = 11

function sum (a, b) {
    return a + b
}


</code></pre><p>说完了几个基础语句，再来看下我们经常使用的框架内部，很多地方的性能都值得探索。</p><span id="OSC_h3_9"></span><h3>diff 算法</h3><p>Vue 和 React 中都使用了虚拟 DOM，当执行更新时，要对比新旧虚拟 DOM。如果没有任何优化，直接严格 diff 两颗树，时间复杂度是 O(n^3)，根本不可用。所以 Vue 和 React 必须使用 diff 算法优化虚拟 DOM：</p><p>Vue2 - 双端比较：</p><p><img src="https://img11.360buyimg.com/imagetools/s800x400_jfs/t1/198309/31/39725/133039/64e066d4Fd910f65f/8755ff579c61ecfc.png" alt="Vue2 - 双端比较" referrerpolicy="no-referrer"></p><p>类似上面的图：</p><ul><li><p>定义 4 个变量，分别为：oldStartIdx、oldEndIdx、newStartIdx 和 newEndIdx</p></li><li><p>判断 oldStartIdx 和 newStartIdx 是否相等</p></li><li><p>判断 oldEndIdx 和 newEndIdx 是否相等</p></li><li><p>判断 oldStartIdx 和 newEndIdx 是否相等</p></li><li><p>判断 oldEndIdx 和 newStartIdx 是否相等</p></li><li><p>同时 oldStartIdx 和 newStartIdx 向右移动；oldEndIdx 和 newEndIdx 向左移动</p></li></ul><p>Vue3 - 最长递增子序列：</p><p><img src="https://img11.360buyimg.com/imagetools/s600x300_jfs/t1/216465/32/35923/163040/64e066d4Fdc67f7dd/a7849b21373e218a.png" alt="Vue3 - 最长递增子序列" referrerpolicy="no-referrer"></p><p>整个过程是基于 Vue2 的双端比较再次进行优化。比如上面这个截图：</p><ul><li><p>先进行双端比较，发现前面两个节点（A 和 B）和最后一个节点（G）是一样的，不需要移动</p></li><li><p>找到最长递增子序列 C、D、E（新旧 children 都包含的，最长的顺序没有发生变化的一组节点）</p></li><li><p>把子序列当成一个整体，内部不用进行任何操作，只需要把 F 移动到它的前面，H 插入到它的后面即可</p></li></ul><p>React - 仅右移：</p><p><img src="https://img13.360buyimg.com/imagetools/s600x400_jfs/t1/151594/6/34260/221810/64e066d4F4bcceae1/8a8f00e131d94c49.png" alt="React - 仅右移" referrerpolicy="no-referrer"></p><p>上面截图的比较过程如下：</p><ul><li><p>遍历 Old 存下对应下标 Map</p></li><li><p>遍历 New，b 的下标从 1 变成了 0，不动（是左移不是右移）</p></li><li><p>c 的下标从 2 变成了 1，不动（也是左移不是右移）</p></li><li><p>a 的下标从 0 变成了 2，向右移动，b、c 下标都减 1</p></li><li><p>d 和 e 位置没变，不需要移动</p></li></ul><p>总之，不管用什么算法，它们的原则都是：</p><ul><li><p>只比较同一层级，不跨级比较</p></li><li><p>Tag 不同则删掉重建（不再去比较内部的细节）</p></li><li><p>子节点通过 key 区分（key 的重要性）</p></li></ul><p>最后也都成功把时间复杂度降低到了 O(n)，才可以被我们实际项目使用。</p><span id="OSC_h3_10"></span><h3>setState 真的是异步吗</h3><p>很多人都认为 setState 是异步的，但是请看下面的例子：</p><pre><code>clickHandler = () =&gt; {
    console.log('--- start ---')

    Promise.resolve().then(() =&gt; console.log('promise then'))

    this.setState({val: 1}, () =&gt; {console.log('state...', this.state.val)})

    console.log('--- end ---')
}

render() {
    return &lt;div onClick={this.clickHandler}&gt;setState&lt;/div&gt;
}


</code></pre><p>实际打印结果：</p><p><img src="https://img10.360buyimg.com/imagetools/s600x300_jfs/t1/160906/37/39538/26895/64e06fe1F4dfbd3cb/e780ba03077aa591.jpg" alt="setState 打印结果" referrerpolicy="no-referrer"></p><p>如果是异步的话，state 的打印应该在微任务 Promise 后执行。</p><p>为了解释清这个原因，必须先了解 JSX 里的事件机制。</p><p>JSX 里的事件，比如 onClick={() =&gt; {}}，其实叫合成事件，区别于我们常说的自定义事件：</p><pre><code>// 自定义事件
document.getElementById('app').addEventListener('click', () =&gt; {})


</code></pre><p>合成事件都是绑定在 root 根节点上，有前置和后置操作，拿上面的例子举例：</p><pre><code>function fn() { // fn 是合成事件函数，内部事件同步执行
    // 前置
    clickHandler()
    
    // 后置，执行 setState 的 callback
}


</code></pre><p>可以想象有函数 fn，里面的事件都是同步执行的，包括 setState。fn 执行完，才开始执行异步事件，即 Promise.then，符合打印的结果。</p><p>那么 React 为什么要这么做呢？<br> 因为要考虑性能，如果要多次修改 state，React 会先合并这些修改，合并完只进行一次 DOM 渲染，避免每次修改完都渲染 DOM。</p><p>所以 setState_本质是同步_，日常说的「异步」是不严谨的。</p><span id="OSC_h1_11"></span><h1>前端算法</h1><p>讲完了我们的日常开发，再来说说算法在前端中的应用。</p><blockquote><p>友情提示：算法一般都是针对大数据量而言，区别于日常开发。</p></blockquote><span id="OSC_h3_12"></span><h3>能用值类型就不用引用类型</h3><p>先来看一道题。</p><p>求 1-10000 之间的所有对称数，例如：0, 1, 2, 11, 22, 101, 232, 1221...</p><p>思路 1 - 使用数组反转、比较：数字转换为字符串，再转换为数组；数组 reverse，再 join 为字符串；前后字符串进行对比。</p><pre><code>function findPalindromeNumbers1(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        // 转换为字符串，转换为数组，再反转，比较
        const s = i.toString()
        if (s === s.split('').reverse().join('')) {
            res.push(i)
        }
    }

    return res
}


</code></pre><p>思路 2 - 字符串头尾比较：数字转换为字符串；字符串头尾字符比较。</p><pre><code>function findPalindromeNumbers2(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        const s = i.toString()
        const length = s.length

        // 字符串头尾比较
        let flag = true
        let startIndex = 0 // 字符串开始
        let endIndex = length - 1 // 字符串结束
        while (startIndex &lt; endIndex) {
            if (s[startIndex] !== s[endIndex]) {
                flag = false
                break
            } else {
                // 继续比较
                startIndex++
                endIndex--
            }
        }

        if (flag) res.push(res)
    }

    return res
}


</code></pre><p>思路 3 - 生成翻转数：使用 % 和 Math.floor 生成翻转数；前后数字进行对比 (全程操作数字，没有字符串类型)。</p><pre><code>function findPalindromeNumbers3(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        let n = i
        let rev = 0 // 存储翻转数

        // 生成翻转数
        while (n &gt; 0) {
            rev = rev * 10 + n % 10
            n = Math.floor(n / 10)
        }

        if (i === rev) res.push(i)
    }

    return res
}


</code></pre><p>性能分析：越来越快</p><ul><li><p>思路 1- 看似是 O(n)，但数组转换、操作都需要时间，所以慢</p></li><li><p>思路 2 VS 思路 3 - 操作数字更快（电脑原型就是计算器）</p></li></ul><p>总之，尽量不要转换数据结构，尤其数组这种有序结构，尽量不要用内置 API，如 reverse，不好识别复杂度，数字操作最快，其次是字符串。</p><span id="OSC_h3_13"></span><h3>尽量用「低级」代码</h3><p>还是直接上一道题。</p><p>输入一个字符串，切换其中字母的大小写<br> 如，输入字符串 12aBc34，输出字符串 12AbC34</p><p>思路 1 - 使用正则表达式。</p><pre><code>function switchLetterCase(s) {
    let res = ''

    const length = s.length
    if (length === 0) return res

    const reg1 = /[a-z]
    const reg2 = /[A-Z]

    for (let i = 0; i &lt; length; i++) {
        const c = s[i]
        if (reg1.test(c)) {
            res += c.toUpperCase()
        } else if (reg2.test(c)) {
            res += c.toLowerCase()
        } else {
            res += c
        }
    }

    return res
}


</code></pre><p>思路 2 - 通过 ASCII 码判断。</p><pre><code>function switchLetterCase2(s) {
    let res = ''

    const length = s.length
    if (length === 0) return res

    for (let i = 0; i &lt; length; i++) {
        const c = s[i]
        const code = c.charCodeAt(0)

        if (code &gt;= 65 &amp;&amp; code &lt;= 90) {
            res += c.toLowerCase()
        } else if (code &gt;= 97 &amp;&amp; code &lt;= 122) {
            res += c.toUpperCase()
        } else {
            res += c
        }
    }

    return res
}


</code></pre><p>性能分析：前者使用了正则，慢于后者</p><p>所以，尽量用「低级」代码，慎用语法糖、高级 API 或者正则表达式。</p><span id="OSC_h1_14"></span><h1>计算机底层</h1><p>最后说一些前端需要了解的计算机底层。</p><span id="OSC_h3_15"></span><h3>从「内存」读数据</h3><p>我们通常说的：从内存中读数据，就是把数据读入寄存器中，但是我们的数据不是直接从内存读入寄存器的，而是先读入一个高速缓存中，然后才读入寄存器的。</p><blockquote><p>寄存器是在 CPU 内的，也是 CPU 的一部分，所以 CPU 从寄存器读写数据非常快。</p></blockquote><p>这是为啥呢？因为从内存中读数据太慢了。</p><p>你可以这么理解：CPU 先把数据读入高速缓存中，以备使用，真正使用的时候，就从高速缓存中读入寄存器；当寄存器使用完毕后，就把数据写回到高速缓存中，然后高速缓存再在合适的时机将数据写入到存储器。</p><p>CPU 运算速度非常快，而从内存读数据非常慢，如果每次都从内存中读写数据，那么势必会拖累 CPU 的运算速度，可能执行 100s，有 99s 都在读取数据。为了解决这个问题，我们就在 CPU 和存储器之间放了个高速缓存，而 CPU 和高速缓存之间的读写速度是很快的，CPU 只管和高速缓存互相读写数据，而不管高速缓存和存储器之间是怎么同步数据的。这样就解决了内存读写慢的问题。</p><span id="OSC_h3_16"></span><h3>二进制的位运算</h3><p>灵活运用二进制的位运算不仅能提高速度，熟练使用二进制还能节省内存。</p><p>假如给定一个数 n，怎么判断 n 是不是 2 的 n 次方呢？</p><p>很简单啊，直接求余就行了。</p><pre><code>function isPowerOfTwo(n) {
    if (n &lt;= 0) return false
    let temp = n
    while (temp &gt; 1) {
        if (temp % 2 != 0) return false
        temp /= 2
    }
    return true
}


</code></pre><p>嗯，代码没毛病，不过不够好，看下面代码：</p><pre><code>function isPowerOfTwo(n) {
    return (n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0)
}


</code></pre><p>大家可以用 console.time 和 console.timeEnd 对比下运行速度便知。</p><p>我们可能还会看到一些源码里面有很多 flag 变量，对这些 flag 进行按位与或按位或运算来检测标记，从而判断是否开启了某个功能。他为什么不直接用布尔值呢？很简单，这样效率高还节省内存。</p><p>比如 Vue3 源码中的这段代码，不仅用到了按位与和按位或，还用到了左移：</p><pre><code>export const enum ShapeFlags {
  ELEMENT = 1,
  FUNCTIONAL_COMPONENT = 1 &lt;&lt; 1,
  STATEFUL_COMPONENT = 1 &lt;&lt; 2,
  TEXT_CHILDREN = 1 &lt;&lt; 3,
  ARRAY_CHILDREN = 1 &lt;&lt; 4,
  SLOTS_CHILDREN = 1 &lt;&lt; 5,
  TELEPORT = 1 &lt;&lt; 6,
  SUSPENSE = 1 &lt;&lt; 7,
  COMPONENT_SHOULD_KEEP_ALIVE = 1 &lt;&lt; 8,
  COMPONENT_KEPT_ALIVE = 1 &lt;&lt; 9,
  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT
}


if (shapeFlag &amp; ShapeFlags.ELEMENT || shapeFlag &amp; ShapeFlags.TELEPORT) {
  ...
}


if (hasDynamicKeys) {
      patchFlag |= PatchFlags.FULL_PROPS
    } else {
    if (hasClassBinding) {
      patchFlag |= PatchFlags.CLASS
    }
    if (hasStyleBinding) {
      patchFlag |= PatchFlags.STYLE
    }
    if (dynamicPropNames.length) {
      patchFlag |= PatchFlags.PROPS
    }
    if (hasHydrationEventBinding) {
      patchFlag |= PatchFlags.HYDRATE_EVENTS
    }
}


</code></pre><span id="OSC_h1_17"></span><h1>结语</h1><p>文章从代码层面讲解了前端的性能，有深度维度的：</p><ul><li><p>JS 基础知识深度剖析</p></li><li><p>框架源码</p></li></ul><p>也有广度维度的：</p><ul><li><p>CSS 动画、组件</p></li><li><p>算法</p></li><li><p>计算机底层</p></li></ul><p>希望能让大家拓宽前端性能的视野，如果对文章感兴趣，欢迎留言讨论～～～</p><blockquote><p>作者：京东零售&nbsp;杨进军</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 02:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10114289</guid>
            <link>https://my.oschina.net/u/4090830/blog/10114289</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微信、QQ 全新 UOS 版本发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">统信 UOS 官方<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuAVFG69xbK6Z9IfxQZjH6w" target="_blank">宣布</a>，微信和 QQ 再次全新升级，现已上线统信 UOS 应用商店。</span></p><h4><span style="color:#000000"><strong>微信 2.1.8 版本更新（原生适配统信 UOS）</strong></span></h4><p><span style="color:#000000">微信自 2021 年底首次适配统信 UOS 以来，经过多次版本更新优化，于近日发布 2.1.8 版本，并正式上线统信 UOS 应用商店。</span></p><p><span style="color:#000000"><img alt="" height="267" src="https://oscimg.oschina.net/oscnet/up-4c1f9d16153f0e419ee1c0e40814e1fde9f.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><strong>聊天信息搜索</strong></span></p><p><span style="color:#000000">在聊天窗口界面，可以对历史信息进行搜索，这样在众多信息中找到自己想要的信息就非常方便了。</span></p><p><span style="color:#000000"><img alt="" height="346" src="https://oscimg.oschina.net/oscnet/up-2e7b7ccad34fd65abf2810baf3599baf5c0.gif" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><strong>通讯录搜索</strong></span></p><p><span style="color:#000000">联系人过多记不住也没关系，新版 UOS 微信支持联系人搜索，直接在联系人界面即可搜索到对应的联系人。</span></p><p><span style="color:#000000"><img alt="" height="351" src="https://oscimg.oschina.net/oscnet/up-01c58bd26e82cdac3937e4859df89864af0.gif" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">群管理功能</span></strong></p><p><span style="color:#000000">可进行成员删减、查看群公告、消息免打扰、置顶群聊、清空聊天记录、删除并退出等常用操作。</span></p><p><img alt="" height="352" src="https://oscimg.oschina.net/oscnet/up-ca0172d458e5050956edc7f886860f47a09.gif" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">本次版本不仅增加了大量常用功能，同时还针对统信 UOS 用户反馈的登录二维码频闪、无法打开大写字母链接等若干问题进行全面优化：</span></p><ol><li><span style="color:#000000">退出登录后，登录二维码频闪；</span></li><li><span style="color:#000000">群聊消息仅显示第一次聊天的时间，不显示后续聊天的时间；</span></li><li><span style="color:#000000">无法打开大写字母的链接；</span></li><li><span style="color:#000000">截图选择隐藏当前窗口截图，再 Esc 取消截图，无法回到聊天界面；</span></li><li><span style="color:#000000">最小化窗口后，影响最大化按钮的状态。</span></li></ol><h4><strong><span style="color:#000000">QQ Linux 版迎来重磅升级</span></strong></h4><p><span style="color:#000000">当前版本支持消息、小世界、QQ 空间板块等。</span></p><p><span style="color:#000000"><img alt="" height="265" src="https://oscimg.oschina.net/oscnet/up-6a4ded5957c093ccd4510a5b9d335a6981b.png" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">夜间模式</span></strong></p><p><span style="color:#000000">QQ 夜间模式并支持跟随系统，享受更沉浸的聊天体验。</span></p><p><span style="color:#000000"><img alt="" height="265" src="https://oscimg.oschina.net/oscnet/up-21170e1a0c6b0bf5ee9492c4bfd2681ca4d.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">截图能力</span></strong></p><p><span style="color:#000000">QQ 截图能力升级，快捷方便，提升办公效率。</span></p><p><span style="color:#000000"><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-62b887afba45904cac5a3a6168df05139fb.png" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">升级方式</span></strong></p><p><span style="color:#000000">QQ 版本升级方式进行全方位优化。</span></p><p><span style="color:#000000"><img alt="" height="265" src="https://oscimg.oschina.net/oscnet/up-6917dd67d624cc3bf56cf77511b12076692.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">此外当前版本还支持群图片、文件传送、全局搜索等功能，修复了若干统信 UOS 用户反馈的问题，体验更佳。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260016</guid>
            <link>https://www.oschina.net/news/260016</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust GUI 库 egui 0.23 发布，新增简单且强大的图像 API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">egui 0.23 版本已经发布了。egui 是易于使用、可移植的即时模式 (immediate mode) GUI 库，采用 Rust 编写，可运行在 Web 和原生应用中。</span></p><p><img height="382" src="https://static.oschina.net/uploads/space/2023/0928/160731_qsi2_3820517.png" width="338" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#1f2328">此版本包含一个简单且强大的图像 API：</span></p><pre><span style="color:var(--color-prettylights-syntax-comment)">// Load from web:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">image</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">"https://www.example.com/some_image.png"</span><span>)</span><span>;</span><span style="color:var(--color-prettylights-syntax-comment)">// Include image in the binary using `include_bytes`:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">image</span><span>(</span>egui<span>::</span>include_image!<span>(</span><span style="color:var(--color-prettylights-syntax-string)">"../assets/ferris.svg"</span><span>)</span><span>)</span><span>;</span><span style="color:var(--color-prettylights-syntax-comment)">// With options:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">add</span><span>(</span>
    egui<span>::</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Image</span><span>::</span><span style="color:var(--color-prettylights-syntax-entity)">new</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">"file://path/to/image.jpg"</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">max_width</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">200.0</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">rounding</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">10.0</span><span>)</span><span>,</span><span>)</span><span>;</span></pre><p><span style="background-color:#ffffff; color:#1f2328">该 API 基于插件系统，开发者可以告诉<span></span></span><code>egui</code><span style="background-color:#ffffff; color:#1f2328"><span></span>如何加载图像，以及从何处加载。</span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><code>egui_extras</code>&nbsp;配备了加载器，只需要在 <code>Cargo.toml</code> 中添加以下内容：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">egui_extras</span> = { <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">version</span> = <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>0.23<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">features</span> = [<span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>all_loaders<span style="color:var(--color-prettylights-syntax-string)">"</span></span>] }
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">image</span> = { <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">version</span> = <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>0.24<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">features</span> = [<span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>jpeg<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>png<span style="color:var(--color-prettylights-syntax-string)">"</span></span>] } <span style="color:var(--color-prettylights-syntax-comment)"><span style="color:var(--color-prettylights-syntax-comment)">#</span> Add the types you want support for</span></pre><p><span style="background-color:#ffffff; color:#1f2328">并将此添加到代码中：</span></p><pre>egui_extras<span>::</span><span style="color:var(--color-prettylights-syntax-entity)">install_image_loaders</span><span>(</span>egui_ctx<span>)</span><span>;</span></pre><p>详情查看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Freleases%2Ftag%2F0.23.0" target="_blank">https://github.com/emilk/egui/releases/tag/0.23.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 08:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259867/egui-0-23-released</guid>
            <link>https://www.oschina.net/news/259867/egui-0-23-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[oauth2-shiro 2.0.0 版本发布，安全大升级]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p>oauth2-shiro v2.0.0 版本正式发布，在距上一次发布 7 年后，更新了大版本，对安全漏洞等问题进行大升级。</p><p>该版本主要更新内容：</p><ol><li>升级使用 springboot，调整工程结构，打包由 war 换成 jar，使用 thymeleaf 替换 servlet/jsp；spring 大版本升级到 5.3 提升安全性。</li><li>JDK 由 1.7 升级到 1.8，日志框架使用 logback 替换 log4j（处理掉 log4j 安全漏洞）。</li><li>升级 shiro 版本到 v1.11.0，解决相应的 shiro 版本漏洞。</li><li>密码存储算法由 MD5 替换为 SHA-256，并支持盐 (salt)，让密码存储更安全可靠（通过配置参数 authz.store.credentials.alg 来控制与向下兼容）。</li><li>OAuth token 支持使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjwt.io%2F" target="_blank">JWT</a>格式（通过配置参数 authz.token.generator.type 来控制与向下兼容）。</li><li>对初始的账户密码与 client secret 使用更加安全的密码策略：包括大小写字母，数字与特殊符号，长度至少 10 位。</li></ol><p>v2.0.0 版本链接：<a href="https://gitee.com/mkk/oauth2-shiro/tree/2.0.0/">https://gitee.com/mkk/oauth2-shiro/tree/2.0.0/</a>。</p><p>【推荐升级】</p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 08:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259866/oauth2-shiro-2-0-0-released</guid>
            <link>https://www.oschina.net/news/259866/oauth2-shiro-2-0-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Meshery —— 可扩展的 Kubernetes 管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Meshery&nbsp;是一个自助服务工程平台，是一个开源云原生管理器，可以设计和管理所有基于 Kubernetes 的基础设施和应用程序。</p><p>除其他功能外，作为一个可扩展的平台，Mesery 提供可视化和协作式 GitOps，将你从 YAML 的链条中解放出来，同时管理 Kubernetes 多集群部署。</p><p><img alt="" height="281" src="https://static.oschina.net/uploads/space/2023/0922/153608_075j_4252687.gif" width="500" referrerpolicy="no-referrer"></p><p>Meshery 管理 Kubernetes 集群的配置、配置和操作，同时支持数百种不同类型的云原生基础设施集成。</p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Meshery 还提供了包含配置最佳实践的<a href="https://meshery.io/catalog">精选设计模板目录。</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>使用以 GitOps 为中心的方法，以可视化方式协作设计和管理您的基础设施和微服务。使用 Meshery 来互操作你的各种云原生系统。借助 REST 和 GraphQL API，可以通过 NATS、CloudEvents 和 gRPC 促进与 Meshery 作为可扩展平台的集成。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Meshery 支持&nbsp;<a href="https://meshery.io/integrations">220 多个云原生集成</a>。</p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/meshery</guid>
            <link>https://www.oschina.net/p/meshery</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 Vue3 + Typescript 的低代码开发工具]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-vtj" class="anchor" href="https://gitee.com/newgateway/vtj#vtj"></a>VTJ</h1><p>VTJ 一款基于 Vue3 + Typescript 的低代码开发工具，内置了设计器引擎、渲染器和代码生成器。</p><p><img src="https://gitee.com/newgateway/vtj/raw/master/dev/public/startup.png" alt="VTJ.PRO" referrerpolicy="no-referrer"></p><h2><a id="user-content-演示" class="anchor" href="https://gitee.com/newgateway/vtj#%E6%BC%94%E7%A4%BA"></a>演示</h2><ul><li><p><a href="https://gitee.com/link?target=http%3A%2F%2Fvtj.pro">http://vtj.pro</a></p></li><li><p><a href="http://newgateway.gitee.io/vtj" rel="nofollow">http://newgateway.gitee.io/vtj</a></p></li></ul><h2><a id="user-content-vtj-的特点" class="anchor" href="https://gitee.com/newgateway/vtj#vtj-%E7%9A%84%E7%89%B9%E7%82%B9"></a>VTJ 的特点</h2><ul><li>面向前端开发者，不改变前端开发流程和编码习惯，会 Vue 就会用，无学习成本。</li><li>内置代码引擎，采用配置化构建，所有部件都支持自定义，可单独使用引擎实现属于你自己的低代码平台，对标 Low-Code Engine。</li><li>IDE 提供本地离线服务，安全易接入，采用设计器和渲染器分离，不污染项目代码。</li><li>内置丰富组件提供支持，可定制可复用区块组件。</li></ul><p><img src="https://gitee.com/newgateway/vtj/raw/master/dev/public/preview.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><h2><a id="user-content-开发环境要求" class="anchor" href="https://gitee.com/newgateway/vtj#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82"></a>开发环境要求</h2><p>VTJ 使用了最新的 Vue3 生态技术栈，要求 Node 版本必须是 v18+， 建议使用 nvm 切换 Node 版本。</p><h2><a id="user-content-快速体验" class="anchor" href="https://gitee.com/newgateway/vtj#%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C"></a>快速体验</h2><p>VTJ 提供了项目脚手架，可快速创建新项目。 命令：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">npm create vtj@latest <span class="nt">--</span><span class="nt">-t</span> web</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-安装到现有项目" class="anchor" href="https://gitee.com/newgateway/vtj#%E5%AE%89%E8%A3%85%E5%88%B0%E7%8E%B0%E6%9C%89%E9%A1%B9%E7%9B%AE"></a>安装到现有项目</h2><ol><li>安装依赖 <code>@vtj/cli</code><code>@vtj/serve</code><code>@vtj/ide</code><code>@vtj/runtime</code></li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">npm i @vtj/cli @vtj/serve @vtj/ide <span class="nt">-D</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">npm i @vtj/runtime <span class="nt">-S</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="2"><li>改造 <code>main.ts</code></li></ol><p>在项目入口文件，在合适的地方增加以下代码， 以下代码仅是示例，实际需要按您的项目情况做调整。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">createApp</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">vue</span><span class="dl">'</span><span class="p">;</span></span><span id="LC2" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">createProvider</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">@vtj/runtime</span><span class="dl">'</span><span class="p">;</span></span><span id="LC3" class="line"><span class="k">import</span><span class="o">*</span><span class="k">as</span><span class="nx">VtjIcons</span><span class="k">from</span><span class="dl">'</span><span class="s1">@vtj/icons</span><span class="dl">'</span><span class="p">;</span></span><span id="LC4" class="line"><span class="k">import</span><span class="nx">App</span><span class="k">from</span><span class="dl">'</span><span class="s1">./App.vue</span><span class="dl">'</span><span class="p">;</span></span><span id="LC5" class="line"><span class="k">import</span><span class="nx">router</span><span class="k">from</span><span class="dl">'</span><span class="s1">./router</span><span class="dl">'</span><span class="p">;</span></span><span id="LC6" class="line"><span class="k">import</span><span class="nx">Mask</span><span class="k">from</span><span class="dl">'</span><span class="s1">@/components/Mask.vue</span><span class="dl">'</span><span class="p">;</span></span><span id="LC7" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">element-plus/theme-chalk/dark/css-vars.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC8" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">element-plus/dist/index.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC9" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">@vtj/icons/lib/style.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC10" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">@vtj/ui/lib/style.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC11" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">@/style/index.scss</span><span class="dl">'</span><span class="p">;</span></span><span id="LC12" class="line"><span class="kd">const</span><span class="nx">app</span><span class="o">=</span><span class="nx">createApp</span><span class="p">(</span><span class="nx">App</span><span class="p">);</span></span><span id="LC13" class="line"></span><span id="LC14" class="line"><span class="p">(</span><span class="k">async</span><span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC15" class="line"><span class="k">await</span><span class="nx">createProvider</span><span class="p">({</span></span><span id="LC16" class="line"><span class="nx">app</span><span class="p">,</span></span><span id="LC17" class="line"><span class="nx">router</span><span class="p">,</span></span><span id="LC18" class="line"><span class="na">components</span><span class="p">:</span><span class="p">{</span></span><span id="LC19" class="line"><span class="nx">Mask</span></span><span id="LC20" class="line"><span class="p">}</span></span><span id="LC21" class="line"><span class="p">});</span></span><span id="LC22" class="line"></span><span id="LC23" class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span></span><span id="LC24" class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VtjIcons</span><span class="p">);</span></span><span id="LC25" class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">mount</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">);</span></span><span id="LC26" class="line"><span class="p">})();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="3"><li>项目工程配置<code>vite.config.ts</code>引用 IDE Vite 插件</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">defineConfig</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">vite</span><span class="dl">'</span><span class="p">;</span></span><span id="LC2" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">IDEPlugin</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">@vtj/serve</span><span class="dl">'</span><span class="p">;</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="k">export</span><span class="k">default</span><span class="nx">defineConfig</span><span class="p">({</span></span><span id="LC5" class="line"><span class="na">plugins</span><span class="p">:</span><span class="p">[</span><span class="nx">IDEPlugin</span><span class="p">()]</span></span><span id="LC6" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-provideroptions-配置" class="anchor" href="https://gitee.com/newgateway/vtj#provideroptions-%E9%85%8D%E7%BD%AE"></a>ProviderOptions 配置</h2><p>实例化 Provider 的参数可以在 <code>main.ts</code> 或 <code>package.json</code> 中配置，配置项：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">ProjectProvider</span><span class="p">{</span></span><span id="LC2" class="line"><span class="c1">// 项目 id</span></span><span id="LC3" class="line"><span class="nl">id</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC4" class="line"><span class="c1">// 项目名称</span></span><span id="LC5" class="line"><span class="nl">name</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC6" class="line"><span class="c1">// 路由模式</span></span><span id="LC7" class="line"><span class="nl">mode</span><span class="p">:</span><span class="dl">'</span><span class="s1">hash</span><span class="dl">'</span><span class="o">|</span><span class="dl">'</span><span class="s1">history</span><span class="dl">'</span><span class="p">;</span></span><span id="LC8" class="line"><span class="c1">// 路由前缀路径</span></span><span id="LC9" class="line"><span class="nl">base</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC10" class="line"><span class="c1">// 页面路由前缀路径</span></span><span id="LC11" class="line"><span class="nl">page</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC12" class="line"><span class="c1">// 区块预览路由前缀路径</span></span><span id="LC13" class="line"><span class="nl">preview</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC14" class="line"><span class="c1">// 首页路由</span></span><span id="LC15" class="line"><span class="nl">home</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC16" class="line"><span class="p">}</span></span><span id="LC17" class="line"></span><span id="LC18" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">IDEProvider</span><span class="kd">extends</span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">{</span></span><span id="LC19" class="line"><span class="c1">// IDE 路径</span></span><span id="LC20" class="line"><span class="nx">path</span><span class="p">?:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC21" class="line"><span class="c1">// 链接按钮文本</span></span><span id="LC22" class="line"><span class="nl">text</span><span class="p">?:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC23" class="line"><span class="p">}</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">ProviderBuiltinComponents</span><span class="p">{</span></span><span id="LC26" class="line"><span class="c1">// 框架母版组件</span></span><span id="LC27" class="line"><span class="nl">Mask</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="c1">// 404 页面组件</span></span><span id="LC30" class="line"><span class="nl">Empty</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1">// 启动页组件</span></span><span id="LC33" class="line"><span class="nl">Startup</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC34" class="line"></span><span id="LC35" class="line"><span class="c1">// Ide 入口组件</span></span><span id="LC36" class="line"><span class="nl">IDELink</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC37" class="line"><span class="p">}</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">ProviderOptions</span><span class="p">{</span></span><span id="LC40" class="line"><span class="c1">//服务类型</span></span><span id="LC41" class="line"><span class="nl">service</span><span class="p">:</span><span class="nx">ServiceType</span><span class="p">;</span></span><span id="LC42" class="line"></span><span id="LC43" class="line"><span class="c1">// 项目配置</span></span><span id="LC44" class="line"><span class="nl">project</span><span class="p">:</span><span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">ProjectProvider</span><span class="o">&gt;</span><span class="p">;</span></span><span id="LC45" class="line"></span><span id="LC46" class="line"><span class="c1">// Vue 应用</span></span><span id="LC47" class="line"><span class="nl">app</span><span class="p">:</span><span class="nx">App</span><span class="p">;</span></span><span id="LC48" class="line"></span><span id="LC49" class="line"><span class="c1">// 路由实例</span></span><span id="LC50" class="line"><span class="nl">router</span><span class="p">:</span><span class="nx">Router</span><span class="p">;</span></span><span id="LC51" class="line"></span><span id="LC52" class="line"><span class="c1">// 文件模块</span></span><span id="LC53" class="line"><span class="nl">modules</span><span class="p">?:</span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span><span class="p">()</span><span class="o">=&gt;</span><span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span><span class="p">;</span></span><span id="LC54" class="line"></span><span id="LC55" class="line"><span class="c1">// IDE 配置</span></span><span id="LC56" class="line"><span class="nl">ide</span><span class="p">?:</span><span class="kc">null</span><span class="o">|</span><span class="nx">IDEProvider</span><span class="p">;</span></span><span id="LC57" class="line"></span><span id="LC58" class="line"><span class="c1">// 显示启动页</span></span><span id="LC59" class="line"><span class="nl">startup</span><span class="p">?:</span><span class="nx">boolean</span><span class="p">;</span></span><span id="LC60" class="line"></span><span id="LC61" class="line"><span class="c1">// 内置组件</span></span><span id="LC62" class="line"><span class="nl">components</span><span class="p">?:</span><span class="nx">ProviderBuiltinComponents</span><span class="p">;</span></span><span id="LC63" class="line"></span><span id="LC64" class="line"><span class="c1">// 生成源码模式</span></span><span id="LC65" class="line"><span class="nl">raw</span><span class="p">?:</span><span class="nx">boolean</span><span class="p">;</span></span><span id="LC66" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-交流群" class="anchor" href="https://gitee.com/newgateway/vtj#%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>交流群</h2><p><img src="https://gitee.com/newgateway/vtj/raw/master/dev/public/ding.jpg" alt="输入图片说明" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/newgateway/vtj</guid>
            <link>https://gitee.com/newgateway/vtj</link>
        </item>
        <item>
            <title>
                <![CDATA[RMS 正在与癌症作斗争]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">自由软件先驱 Richard Stallman 近日透露，他正在接受非霍奇金淋巴瘤（一种白细胞癌症）的治疗，目前感受预后良好。</span></p><p><span style="color:#000000">70 岁的 RMS 本周三出席了在瑞士举行的 GNU 40 周年庆典，并发表了闭幕演讲。但与此前形象不同的是，他特有的长发以及胡子都已不见，整个人面容沧桑。</span></p><p><span style="color:#000000">据<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F09%2F29%2Frichard_stallman_cancer%2F" target="_blank">外媒</a>所述，RMS 在演讲过程中基本上都戴着防病毒口罩，他还呼吁听众也戴上口罩。但也正因如此，他的声音基本上都被口罩所遮盖，导致现场的观众无法听清他的发言。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-fef37061199b66a4a1141c563b530eccd66.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><em>短暂的拉下了口罩的 RMS</em></span></p><p><span style="color:#000000">RMS 表示自己患上了滤泡<span style="background-color:#ffffff">性</span>淋巴瘤，这是一种非霍奇金淋巴瘤；也是一种血液癌症，会导致 B 淋巴细胞在淋巴系统中形成团块。微软已故的创始人之一&nbsp;Paul Allen 就是因为非霍奇金淋巴瘤而去世。不过非霍奇金淋巴瘤有多种类型，RMS 所患的是其中一种发展较慢的类型。他表示自己预后良好，希望在未来的日子里还能继续活跃在 GNU 中。</span></p><p><span style="color:#000000">尽管 RMS 是一个颇有争议和评价两极分化的人物，但他对自由软件的贡献无法磨灭；可以说没有他对自由软件正规化和推广的努力，也就没有今天的开源世界。</span></p><p><span style="color:#000000">祝愿他一切顺利，早日康复。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260018/richard-stallman-cancer</guid>
            <link>https://www.oschina.net/news/260018/richard-stallman-cancer</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
