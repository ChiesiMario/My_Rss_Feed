<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 24 Sep 2023 20:03:38 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[罚款 200 元，没收 100 多万]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微博博主称自己「翻墙访问国际互联网打工被处罚百万」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0924/173843_dYKe_2720166.png" referrerpolicy="no-referrer"></p><p><em>来源：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcard.weibo.com%2Farticle%2Fm%2Fshow%2Fid%2F2309404949447133233199" target="_blank">https://card.weibo.com/article/m/show/id/2309404949447133233199</a></u></em></p></blockquote><p>根据这名博主提供的资料，在 2019 年 9 月份至 2022 年 11 月期间，他在家中<strong>擅自使用非法信道进行国际联网</strong>，为境外公司提供网络顾问服务，<strong>违法所得共计人民币 1058000 余元</strong>。</p><p>根据《中华人民共和国计算机信息网络国际联网管理暂行规定》第六条和第十四条、《中华人民共和国计算机信息网络国际联网管理暂行规定实施办法》第七条和第二十二条第一款之规定，这名博主受到了行政处罚，并处罚款贰佰元整，没收违法所得一百零五万八千元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c9d4c52a10a1b05cf39730b000daa514e2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-326b36667644a24fce944857b5a461dd043.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259325</guid>
            <link>https://www.oschina.net/news/259325</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 致社区公开信，调整 runtime fee 政策]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>面对此前制定的<a href="https://www.oschina.net/news/257929/unity-runtime-fee" target="_blank">"Funtime Fee"收费政策</a>所引发的用户争议与不满，<span style="color:#333333">Unity Create 负责人 Marc Whitten 正式发布了一封致社区的道歉<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">公开信</a>，并详细解释了其定价策略的变更。</span></p><blockquote><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>我想以此开始：对不起。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>在宣布新的 Runtime Fee 政策之前，我们本应与大家进行更多的沟通，我们本应采纳更多的反馈意见。我们制定此政策的目标是确保我们能够在今天和明天继续为您提供支持，并继续深入投资我们的游戏引擎。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你们让 Unity 变得伟大，我们知道我们需要倾听并努力赢得您的信任。我们已经听到了您的担忧，并且正在对我们宣布的政策进行更改以解决这些问题。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" height="167" src="https://oscimg.oschina.net/oscnet/up-03756292fbd61192f7edc3f71fc2060de26.jpg" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">根据修订后的条款，<strong>Unity Personal </strong></span><strong>plan&nbsp;</strong><span style="color:#000000"><strong>将保持免费，</strong>并且基于 Unity Personal&nbsp;构建的游戏将不收取 Runtime Fee；同时个人版的适用范围也从每年收入 10 万美元以下提高到 20 万美元，并取消了使用 Made with Unity 启动画面的要求。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">对于企业版和专业版用户，过去 12 个月收入达到或超过 100 万美元，仍需缴纳该费用。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">使用当前版本的 Unity 开发的任何游戏都无需支付 Runtime Fee，Runtime Fee 政策将仅适用于 2024 年采用最新版本的开发者。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">而对于需要缴纳 Runtime Fee 的游戏，则可以选择按&nbsp;<strong>2.5% 的收入分成</strong>，或者根据每月参与游戏的新用户数量计算付费，具体可以较低者为准。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">查看官方公告</a>。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/258513/unity-apologize-for-runtime-fee" target="_blank">Unity 道歉：将修改 "runtime fee" 收费政策</a></li><li><a href="https://www.oschina.net/news/257929/unity-runtime-fee">Unity 引擎明年起根据游戏安装量收费 (runtime fee)</a></li><li><a href="https://www.oschina.net/news/258280/unity-closes-offices-following-death-threats">游戏引擎开发商 Unity 收到死亡威胁</a></li><li><a href="https://www.oschina.net/news/258477/wait-is-unity-allowed-to-just-change-its-fee-structure-like-that">走近 「收费门」：互相矛盾的服务条款导致 Unity 面临被起诉的风险</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259300/open-letter-on-runtime-fee</guid>
            <link>https://www.oschina.net/news/259300/open-letter-on-runtime-fee</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🎉 .NET 基础框架 Furion 新版本 v4.8.8.44 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="1327" src="https://oscimg.oschina.net/oscnet/up-dd287a7f490eae9d6e9d12266351bc3c1c0.png" width="1718" referrerpolicy="no-referrer"></p><p><strong>经过三年多的不断打磨，Furion 已经变得非常成熟和稳定。截至目前，NuGet 的总下载量已超过 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nuget.org%2Fprofiles%2Fmonk.soul" target="_blank">1050 万</a>&nbsp;次，这个数字不断增长。</strong>Furion 已经帮助越来越多的企业和个人开发者提高了开发效率，同时也减少了开发成本。我们的团队也正在致力于研发面向 .NET8 的 v5.0.0 版本，希望能为 .NET 的发展做出一点微小的贡献。</p><h2>项目信息</h2><ul><li>Gitee：<strong><a href="https://gitee.com/dotnetchina/Furion">https://gitee.com/dotnetchina/Furion</a></strong></li><li>Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMonkSoul%2FFurion" target="_blank">https://github.com/MonkSoul/Furion</a></li><li>文档：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffurion.baiqian.ltd%2F" target="_blank">http://furion.baiqian.ltd/</a></strong></li></ul><h2>本期更新</h2><blockquote><p><span style="background-color:#f6f6f6; color:#333333">更新日志：</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ffurion.baiqian.ltd%2Fdocs%2Fupgrade%2F" target="_blank">http://furion.baiqian.ltd/docs/upgrade</a></p></blockquote><ul><li><p style="margin-left:0; margin-right:0"><strong>新特性</strong></p><ul><li>[新增] 定时任务看板列表支持作业分组名排序<span>&nbsp;</span>4.8.8.43<span>&nbsp;</span>⏱️2023.09.14<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7YQ9V">#I7YQ9V</a></li><li>[新增] 验证特性<span>&nbsp;</span><code>[DataValidation]</code><span>&nbsp;</span>支持<span>&nbsp;</span><code>[Display]</code><span>&nbsp;</span>和<span>&nbsp;</span><code>[DisplayName]</code><span>&nbsp;</span>特性设置<span>&nbsp;</span><code>{0}</code><span>&nbsp;</span>4.8.8.42<span>&nbsp;</span>⏱️2023.09.01<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7XB3T">#I7XB3T</a></li><li>[新增] 监听日志<span>&nbsp;</span><code>LoggingMonitor</code><span>&nbsp;</span>支持配置日志输出级别<span>&nbsp;</span>4.8.8.41<span>&nbsp;</span>⏱️2023.08.25<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7SRTP">#I7SRTP</a></li><li>[新增] 多语言支持<span>&nbsp;</span><code>L.GetString(name, culture)</code><span>&nbsp;</span>获取指定区域翻译<span>&nbsp;</span>4.8.8.41<span>&nbsp;</span>⏱️2023.08.04<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/044b0edfbd622c7c69d685267aafa9f5855a9167">044b0ed</a></li><li>[新增] 粘土对象<span>&nbsp;</span><code>.ConvertTo</code><span>&nbsp;</span>支持自定义值提供器<span>&nbsp;</span>4.8.8.40<span>&nbsp;</span>⏱️2023.08.03<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/70d58888b3cec88c5c2a8458654dca1881e2a88b">70d5888</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>问题修复</strong></p><ul><li>[修复]<span>&nbsp;</span><code>Scoped.CreateUowAsync</code><span>&nbsp;</span>作用域工作单元异常无法回滚问题<span>&nbsp;</span>4.8.8.44<span>&nbsp;</span>⏱️2023.09.23<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I833I9">#I833I9</a></li><li>[修复] 模板引擎高并发读取缓存模板出现线程占用问题<span>&nbsp;</span>4.8.8.43<span>&nbsp;</span>⏱️2023.09.14<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I80ZKB">#I80ZKB</a></li><li>[修复] 使用刷新<span>&nbsp;</span><code>Token</code><span>&nbsp;</span>也能通过鉴权检查严重安全<span>&nbsp;</span><code>Bug</code><span>&nbsp;</span>4.8.8.42<span>&nbsp;</span>⏱️2023.08.28<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7TII4">#I7TII4</a></li><li>[修复] 粘土对象不支持枚举类型问题<span>&nbsp;</span>4.8.8.41<span>&nbsp;</span>⏱️2023.08.25<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7VDDL">#I7VDDL</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>其他更改</strong></p><ul><li>[调整]<span>&nbsp;</span><code>[UnitofWork]</code><span>&nbsp;</span>支持在<span>&nbsp;</span><code>Class</code><span>&nbsp;</span>中指定，解决<span>&nbsp;</span><code>Pages</code><span>&nbsp;</span>应用警告问题<span>&nbsp;</span>4.8.8.42<span>&nbsp;</span>⏱️2023.09.01<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7X51E">#I7X51E</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>文档</strong></p><ul><li>[新增]<span>&nbsp;</span><code>Jwt</code><span>&nbsp;</span>身份验证过程监听文档</li><li>[新增] 事件总线<span>&nbsp;</span><code>Redis</code><span>&nbsp;</span>集成文档</li><li>[更新] 粘土对象文档、虚拟文件系统文档、序列化文档、事件总线文档、远程请求文档、数据加密文档、安全授权文档、动态<span>&nbsp;</span><code>WebAPI</code><span>&nbsp;</span>文档、定时任务文档、<code>JSON</code><span>&nbsp;</span>序列化文档、<code>App</code><span>&nbsp;</span>静态类文档、规范化文档、配置文档</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>贡献者</strong></p><ul><li>陶泥 (<a href="https://gitee.com/ncs48620">@ncs48620</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/848">!848</a></li><li>handsome_by (<a href="https://gitee.com/handsomeboyyl">@handsomeboyyl</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/842">!842</a></li><li>拉风的 CC (<a href="https://gitee.com/zetaluoxin">@LFDCC</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/841">!841</a></li><li>Felix Hoi (<a href="https://gitee.com/zetaluoxin">@felixhoi</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/839">!839</a></li><li>zetaluoxin (<a href="https://gitee.com/zetaluoxin">@zetaluoxin</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/834">!834</a></li><li>SongXinXin (<a href="https://gitee.com/goodsxx">@goodsxx</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/832">!832</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/833">!833</a></li><li>阿炬 (<a href="https://gitee.com/quejuwen">@quejuwen</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/813">!813</a></li><li>KaneLeung (<a href="https://gitee.com/KaneLeung">@KaneLeung</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/808">!808</a></li><li>蒋状先生 (<a href="https://gitee.com/JiangZhuangXianSheng">@JiangZhuangXianSheng</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/806">!806</a></li><li>NeoLu (<a href="https://gitee.com/neolu">@neolu</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/804">!804</a></li><li>蓝色天空 (<a href="https://gitee.com/lds2013">@lds2013</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/796">!796</a></li><li>YaChengMu (<a href="https://gitee.com/YaChengMu">@YaChengMu</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/788">!788</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/815">!815</a></li></ul></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259296/furion-4-8-8-44-released</guid>
            <link>https://www.oschina.net/news/259296/furion-4-8-8-44-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[清华系创企推出千亿参数生物医药大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">清华系创企水木分子<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fl5iE9NCA2v0fC_wg3S5DTw" target="_blank">宣布</a>发布新一代对话式药物研发助手 ChatDD (Drug Design) 和全球首个千亿参数多模态生物医药对话大模型 ChatDD-FM 100B。水木分子成立于今年 6 月，由清华大学智能产业研究院（AIR）孵化，专注于生物医药垂直行业大模型的研发与应用。</span></p><p><img height="235" src="https://oscimg.oschina.net/oscnet/up-9aa47749420f10ded3e2467c43ac413545b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">根据介绍，水木分子提出的 ChatDD，基于大模型能力，能够对多模态数据进行融合理解，与专家自然交互人机协作，将人类专家知识与大模型知识联结，重新定义药物研发模式。</span></p><p><span style="color:#000000">ChatDD 基于水木分子千亿参数多模态生物医药对话大模型底座 ChatDD-FM，具备专业知识力、认知探索力和工具调用能力。作为生物医药研发助手 Copilot 可以服务医药研发全流程场景，从立项调研，早期药物发现，临床前研究到临床试验、药物重定位等各环节。</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-7cbd38053ca323a3d0d0aeed787e187b3c2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">在具体应用场景方面，发布会上展示了 ChatDD-BI 立项场景、ChatDD-Discovery 研发探索场景和 ChatDD-Trail 临床试验场景应用。</span></p><p><span style="color:#000000">ChatDD 的底座为千亿参数多模态生物医药对话大模型 ChatDD-FM 100B，在通用语言模型基础上经过：生物医药专业知识增强、生物医药多模态对齐、专业领域指令微调和 RLHF 三层淬炼。ChatDD-FM 100B 在 C-Eval 评测榜单中达到综合成绩 Top10，全部医学专项 4 项评测排名第一，是唯一在该 4 项评测中平均分超过 90 分（93.1 分）的模型。</span></p><p><img height="277" src="https://oscimg.oschina.net/oscnet/up-72ba7b6e5f51510eaafae5386eb6a5902ea.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259292</guid>
            <link>https://www.oschina.net/news/259292</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LightDiffusionFlow —— SD 工作流保存插件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">LightDiffusionFlow 是一个基于 AI 绘画开源平台 StableDiffusion webUI（简称 SD）的开源插件，它可以帮助你一键保存所有工作流数据，下次使用只需拖入 Flow 文件，就能快速复现整个工作流，就像使用 Photoshop 的 PSD 样机文件那样方便。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-761ae50dada20a421f4f5a91e5852c6d720.png" width="500" referrerpolicy="no-referrer"></p><p><strong>功能</strong></p><ul><li>使用单个文件导出/导入网页用户界面参数（图像、输入、滑块、复选框等）。</li><li>支持解析图片中的 png 信息，并将参数还原回网络用户界面。</li></ul><p><strong>支持的扩展：</strong></p><ul><li>理论上，它可以支持任何插件。(某些插件图片除外，因为它们需要提供相应的 elem_id）。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lightdiffusionflow</guid>
            <link>https://www.oschina.net/p/lightdiffusionflow</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 高性能任务调度引擎 Volcano]]>
            </title>
            <description>
                <![CDATA[<a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F"><img src="https://raw.githubusercontent.com/volcano-sh/volcano/master/docs/images/volcano-horizontal-color.png" referrerpolicy="no-referrer"></a><hr><p><a href="https://gitee.com/link?target=https%3A%2F%2Ftravis-ci.org%2Fvolcano-sh%2Fvolcano"><img src="https://travis-ci.org/volcano-sh/volcano.svg?branch=master" alt="Build Status" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://goreportcard.com/badge/github.com/volcano-sh/volcano" alt="Go Report Card" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://img.shields.io/github/repo-size/volcano-sh/volcano.svg" alt="RepoSize" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Freleases"><img src="https://img.shields.io/github/release/volcano-sh/volcano.svg" alt="Release" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fblob%2Fmaster%2FLICENSE"><img src="https://img.shields.io/github/license/volcano-sh/volcano.svg" alt="LICENSE" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fbestpractices.coreinfrastructure.org%2Fprojects%2F3012"><img src="https://bestpractices.coreinfrastructure.org/projects/3012/badge" alt="CII Best Practices" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F">Volcano</a> is a batch system built on Kubernetes. It provides a suite of mechanisms that are commonly required by
many classes of batch &amp; elastic workload including: machine learning/deep learning, bioinformatics/genomics and
other "big data" applications. These types of applications typically run on generalized domain frameworks like
TensorFlow, Spark, Ray, PyTorch, MPI, etc, which Volcano integrates with.</p><p>Volcano builds upon a decade and a half of experience running a wide
variety of high performance workloads at scale using several systems
and platforms, combined with best-of-breed ideas and practices from
the open source community.</p><p>Until June 2021, Volcano has been widely used around the world at a variety of industries such as Internet/Cloud/Finance/
Manufacturing/Medical. More than 20 companies or institutions are not only end users but also active contributors. Hundreds
of contributors are taking active part in the code commit/PR review/issue discussion/docs update and design provision. We
are looking forward to your participation.</p><p><strong>NOTE</strong>: the scheduler is built based on <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubernetes-sigs%2Fkube-batch">kube-batch</a>;
refer to <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fissues%2F241">#241</a> and <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fpull%2F288">#288</a> for more detail.</p><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/cncf-logo.png" alt="cncf_logo" referrerpolicy="no-referrer"></p><p>Volcano is an incubating project of the <a href="https://gitee.com/link?target=https%3A%2F%2Fcncf.io%2F">Cloud Native Computing Foundation</a> (CNCF). Please consider joining the CNCF if you are an organization that wants to take an active role in supporting the growth and evolution of the cloud native ecosystem.</p><h2><a id="user-content-overall-architecture" class="anchor" href="https://gitee.com/kchstack/volcano#overall-architecture"></a>Overall Architecture</h2><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/volcano-architecture.png" alt="volcano" referrerpolicy="no-referrer"></p><h2><a id="user-content-talks" class="anchor" href="https://gitee.com/kchstack/volcano#talks"></a>Talks</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Farchsummit.infoq.cn%2F2019%2Fshenzhen%2Fpresentation%2F1817">Volcano 在 Kubernetes 中运行高性能作业实践 @ ArchSummit 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fagenda.events.huawei.com%2F2019%2Fcn%2Fminisite%2Fagenda.html%23dayTab%3Dday7%26tagName%3D%257B%2522language%2522%253A%2522Cn%2522%257D%26seminarId%3D1743">Volcano：基于云原生的高密计算解决方案 @ Huawei Connection 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUaZi">Improving Performance of Deep Learning Workloads With Volcano @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUajv">Batch Capability of Kubernetes Intro @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li></ul><h2><a id="user-content-ecosystem" class="anchor" href="https://gitee.com/kchstack/volcano#ecosystem"></a>Ecosystem</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Fspark-on-k8s-operator%2Fblob%2Fmaster%2Fdocs%2Fvolcano-integration.md">spark-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.kubeflow.org%2Fdocs%2Fuse-cases%2Fjob-scheduling%2F">kubeflow/tf-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubeflow%2Farena%2Fblob%2Fmaster%2Fdocs%2Ftraining%2Fvolcanojob%2Fvolcanojob.md">kubeflow/arena</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fmpi">Horovod/MPI</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fpaddlepaddle">paddlepaddle</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbroadinstitute%2Fcromwell%2Fblob%2Fdevelop%2Fdocs%2Fbackends%2FVolcano.md">cromwell</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fray-project.github.io%2Fkuberay%2Fguidance%2Fvolcano-integration">KubeRay</a></li></ul><h2><a id="user-content-quick-start-guide" class="anchor" href="https://gitee.com/kchstack/volcano#quick-start-guide"></a>Quick Start Guide</h2><h3><a id="user-content-prerequisites" class="anchor" href="https://gitee.com/kchstack/volcano#prerequisites"></a>Prerequisites</h3><ul><li>Kubernetes 1.12+ with CRD support</li></ul><p>You can try Volcano by one of the following two ways.</p><p>Note:</p><ul><li>For Kubernetes v1.17+ use CRDs under config/crd/bases (recommended)</li><li>For Kubernetes versions &lt; v1.16 use CRDs under config/crd/v1beta1 (deprecated)</li></ul><h3><a id="user-content-install-with-yaml-files" class="anchor" href="https://gitee.com/kchstack/volcano#install-with-yaml-files"></a>Install with YAML files</h3><p>Install Volcano on an existing Kubernetes cluster. This way is both available for x86_64 and arm64 architecture.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">kubectl apply -f https://raw.githubusercontent.com/volcano-sh/volcano/master/installer/volcano-development.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Enjoy! Volcano will create the following resources in <code>volcano-system</code> namespace.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">NAME                                       READY   STATUS      RESTARTS   AGE</span><span id="LC2" class="line">pod/volcano-admission-5bd5756f79-dnr4l     1/1     Running     0          96s</span><span id="LC3" class="line">pod/volcano-admission-init-4hjpx           0/1     Completed   0          96s</span><span id="LC4" class="line">pod/volcano-controllers-687948d9c8-nw4b4   1/1     Running     0          96s</span><span id="LC5" class="line">pod/volcano-scheduler-94998fc64-4z8kh      1/1     Running     0          96s</span><span id="LC6" class="line"></span><span id="LC7" class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><span id="LC8" class="line">service/volcano-admission-service   ClusterIP   10.98.152.108   &lt;none&gt;        443/TCP   96s</span><span id="LC9" class="line"></span><span id="LC10" class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><span id="LC11" class="line">deployment.apps/volcano-admission     1/1     1            1           96s</span><span id="LC12" class="line">deployment.apps/volcano-controllers   1/1     1            1           96s</span><span id="LC13" class="line">deployment.apps/volcano-scheduler     1/1     1            1           96s</span><span id="LC14" class="line"></span><span id="LC15" class="line">NAME                                             DESIRED   CURRENT   READY   AGE</span><span id="LC16" class="line">replicaset.apps/volcano-admission-5bd5756f79     1         1         1       96s</span><span id="LC17" class="line">replicaset.apps/volcano-controllers-687948d9c8   1         1         1       96s</span><span id="LC18" class="line">replicaset.apps/volcano-scheduler-94998fc64      1         1         1       96s</span><span id="LC19" class="line"></span><span id="LC20" class="line">NAME                               COMPLETIONS   DURATION   AGE</span><span id="LC21" class="line">job.batch/volcano-admission-init   1/1           48s        96s</span><span id="LC22" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-install-from-code" class="anchor" href="https://gitee.com/kchstack/volcano#install-from-code"></a>Install from code</h3><p>If you don't have a kubernetes cluster, try one-click install from code base:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">./hack/local-up-volcano.sh</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>This way is only available for x86_64 temporarily.</p><h3><a id="user-content-install-monitoring-system" class="anchor" href="https://gitee.com/kchstack/volcano#install-monitoring-system"></a>Install monitoring system</h3><p>If you want to get prometheus and grafana volcano dashboard after volcano installed, try following commands:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">make <span class="nv">TAG</span><span class="o">=</span>latest generate-yaml</span><span id="LC2" class="line">kubectl create <span class="nt">-f</span> _output/release/volcano-monitoring-latest.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-kubernetes-compatibility" class="anchor" href="https://gitee.com/kchstack/volcano#kubernetes-compatibility"></a>Kubernetes compatibility</h2><table><thead><tr><th></th><th>Kubernetes 1.17</th><th>Kubernetes 1.18</th><th>Kubernetes 1.19</th><th>Kubernetes 1.20</th><th>Kubernetes 1.21</th><th>Kubernetes 1.22</th><th>Kubernetes 1.23</th><th>Kubernetes 1.24</th><th>Kubernetes 1.25</th></tr></thead><tbody><tr><td>Volcano v1.6</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>Volcano v1.7</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Volcano HEAD (master)</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr></tbody></table><p>Key:</p><ul><li><code>✓</code> Volcano and the Kubernetes version are exactly compatible.</li><li><code>+</code> Volcano has features or API objects that may not be present in the Kubernetes version.</li><li><code>-</code> The Kubernetes version has features or API objects that Volcano can't use.</li></ul><h2><a id="user-content-meeting" class="anchor" href="https://gitee.com/kchstack/volcano#meeting"></a>Meeting</h2><p>Community weekly meeting for Asia: 15:00 - 16:00 (UTC+8) Friday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community biweekly meeting for America: 08:30 - 09:30 (UTC-8) Thursday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community meeting for Europe is ongoing on demand now. If you have some ideas or topics to discuss, please leave message
in the <a href="https://gitee.com/link?target=https%3A%2F%2Fcloud-native.slack.com%2Farchives%2FC011GJDQS0N">slack</a>. Maintainers will contact with you and book an open meeting for that.</p><p>Resources:</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1YLbF8zjZBiR9PbXQPB22iuc_L0Oui5A1lddVfRnZrqs%2Fedit">Meeting notes and agenda</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fzoom.us%2Fj%2F91804791393">Meeting link</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%2Fembed%3Fsrc%3Dvolcano.sh.bot%40gmail.com">Meeting Calendar</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%3Fcid%3Ddm9sY2Fuby5zaC5ib3RAZ21haWwuY29t">Subscribe</a></li></ul><h2><a id="user-content-contact" class="anchor" href="https://gitee.com/kchstack/volcano#contact"></a>Contact</h2><p>If you have any question, feel free to reach out to us in the following ways:</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano-sh.slack.com">Volcano Slack Channel</a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgroups.google.com%2Fforum%2F%23%21forum%2Fvolcano-sh">Mailing List</a></p>]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/volcano</guid>
            <link>https://gitee.com/kchstack/volcano</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 深入浅出线程池]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>一、线程</span></span></span></h1><span id="OSC_h2_2"></span><h2><span><span><span style="color:#333333">1、什么是线程 </span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>线程</span></strong></span></span><span><span><span style="color:#333333">(thread) 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际，运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线，程并行执行不同的任务。 </span></span></span></p><span id="OSC_h2_3"></span><h2><span><span><span style="color:#333333">2、如何创建线程</span></span></span></h2><span id="OSC_h3_4"></span><h3><span><span><span>2.1、JAVA 中创建线程</span></span></span></h3><pre><code><span><span><span style="color:#708090">/**
 * 继承 Thread 类，重写 run 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"myThread..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 实现 Runnable 接口，实现 run 方法 
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"MyRunnable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 实现 Callable 接口，指定返回类型，实现 call 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"MyCallable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><span id="OSC_h3_5"></span><h3><span><span><span>2.2、测试一下</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span> thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...main</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...Thread-0</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span> myRunnable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread1 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>myRunnable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    myRunnable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...main</span></span><span><span>
    thread1</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...Thread-1</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span> myCallable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;String&gt;</span></span><span><span> futureTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread2 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread2</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...main</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...Thread-2</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_6"></span><h3><span><span><span>2.3、问题</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">既然我们创建了线程，那为何我们直接调用方法和我们调用 start() 方法的结果不同?new Thread() 是否真实创建了线程? </span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><span style="color:#333333">2.4、问题分析</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">我们直接调用方法，可以看到是执行的主线程，而调用 start() 方法就是开启了新线程，那说明 new Thread() 并没有创建线程，而是在 start() 中创建了线程。 </span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">那我们看下 Thread 类 start() 方法: </span></span></span></p><pre><code><span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//Thread 类实现了 Runnalbe 接口，实现了 run() 方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> target</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">synchronized</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//可以看到，start() 方法真实的调用时 start0() 方法 </span></span><span><span>
            started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">native</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//start0() 是一个 native 方法，由 JVM 调用底层操作系统，开启一个线程，由操作系统过统一调度 </span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>target </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
             target</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//操作系统在执行新开启的线程时，回调 Runnable 接口的 run() 方法，执行我们预设的线程任务</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_8"></span><h3><span><span><span>2.5、总结</span></span></span></h3><div><span style="color:#333333">1.</span><span><span><span><span style="color:#333333">JAVA 不能直接创建线程执行任务，而是通过创建 Thread 对象调用操作系统开启线程，在由操作系，统回调 Runnable 接口的 run() 方法执行任务; </span></span></span></span></div><div><span style="color:#333333">2.</span><span><span><span><span style="color:#333333">实现 Runnable 的方式，将线程实际要执行的回调任务单独提出来了，实现线程的启动与回调任务，解耦; </span></span></span></span></div><div><span style="color:#333333">3.</span><span><span><span><span style="color:#333333">实现 Callable 的方式，通过 Future 模式不但将线程的启动与回调任务解耦，而且可以在执行完成后，获取到执行的结果; </span></span></span></span></div><span id="OSC_h1_9"></span><h1><span><span><span style="color:#333333">二、多线程</span></span></span></h1><span id="OSC_h2_10"></span><h2><span><span><span>1、什么是多线程</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>多线程</span></strong></span></span><span><span><span style="color:#333333">(multithreading)，是指从软件或者硬件上实现多个线程并发执行的技术。同一个线程只，能处理完一个任务在处理下一个任务，有时我们需要多个任务同时处理，这时，我们就需要创建多，个线程来同时处理任务。 </span></span></span></p><span id="OSC_h2_11"></span><h2><span><span><span style="color:#333333">2、多线程有什么好处</span></span></span></h2><span id="OSC_h3_12"></span><h3><span><span><span>2.1、串行处理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每个任务执行 2 秒 </span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//处理执行结果</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//执行结果</span></span><span><span>
start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">10043</span></span></span></code></pre><span id="OSC_h3_13"></span><h3><span><span><span>2.2、并行处理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">List</span></span><span><span>&lt;Future&gt;</span></span><span><span> list </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayList</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span> callable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每个任务执行 2 秒 </span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span style="color:#999999">(</span></span><span><span>callable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
        list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
    
    list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">forEach</span></span><span><span style="color:#999999">(</span></span><span><span>future </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>future</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//处理执行结果 } catch (Exception e) {</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//执行结果</span></span><span><span>
 start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2005</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_14"></span><h3><span><span><span>2.3、总结</span></span></span></h3><div><span>1.</span><span><span><span><span>多线程可以把一个任务拆分为几个子任务，多个子任务可以并发执行，每一个子任务就是一个线程。</span></span></span></span></div><div><span>2.</span><span><span><span><span>多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统，的效率。</span></span></span></span></div><span id="OSC_h3_15"></span><h3><span><span><span>2.4、多线程的问题</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上面示例中我们可以看到，如果每来一个任务，我们就创建一个线程，有很多任务的情况下，我们，会创建大量的线程，可能会导致系统资源的耗尽。同时，我们知道线程的执行是需要抢占 CPU 资源，的，那如果有太多的线程，就会导致大量时间用在线程切换的开销上。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>再有，每来一个任务都需要创建一个线程，而创建一个线程需要调用操作系统底层方法，开销较，大，而线程执行完成后就被回收了。在需要大量线程的时候，创建线程的时间就花费不少了。</span></span></span></p><span id="OSC_h1_16"></span><h1><span><span><span>三、线程池</span></span></span></h1><span id="OSC_h2_17"></span><h2><span><span><span>1、如何设计一个线程池</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>由于多线程的开发存在上述的一些问题，那我们是否可以设计一个东西来避免这些问题呢?当然可以! 线程池就是为了解决这些问题而生的。那我们该如何设计一个线程池来解决这些问题呢?或者说，一个线程池该具备什么样的功能?</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>1.1、线程池基本功能</span></span></span></h3><div><span>1.</span><span><span><span><span>多线程会创建大量的线程耗尽资源，那线程池应该对线程数量有所限制，可以保证不会耗尽系统资，源;</span></span></span></span></div><div><span>2.</span><span><span><span><span>每次创建新的线程会增加创建时的开销，那线程池应该减少线程的创建，尽量复用已创建好的线，程;</span></span></span></span></div><span id="OSC_h3_19"></span><h3><span><span><span>1.2、线程池面临问题</span></span></span></h3><div><span>1.</span><span><span><span><span>我们知道线程在执行完自己的任务后就会被回收，那我们如何复用线程?</span></span></span></span></div><div><span>2.</span><span><span><span><span>我们指定了线程的最大数量，当任务数超出线程数时，我们该如何处理?</span></span></span></span></div><span id="OSC_h3_20"></span><h3><span><span><span>1.3、创新源于生活</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>先假设一个场景:假设我们是一个物流公司的管理人员，要配送的货物就是我们的任务，货车就是，我们配送工具，我们当然不能有多少货物就准备多少货车。那当顾客源源不断的将货物交给我们配，送，我们该如何管理才能让公司经营的最好呢?</span></span></span></p><div><span>1.</span><span><span><span><span>最开始货物来的时候，我们还没有货车，每批要运输的货物我们都要购买一辆车来运输;</span></span></span></span></div><div><span>2.</span><span><span><span><span>当货车运输完成后，暂时还没有下一批货物到达，那货车就在仓库停着，等有货物来了立马就可以，运输;</span></span></span></span></div><div><span>3.</span><span><span><span><span>当我们有了一定数量的车后，我们认为已经够用了，那后面就不再买车了，这时要是由新的货物来，了，我们就会让货物先放仓库，等有车回来在配送;</span></span></span></span></div><div><span>4.</span><span><span><span><span>当 618 大促来袭，要配送的货物太多，车都在路上，仓库也都放满了，那怎么办呢?我们就选择临，时租一些车来帮忙配送，提高配送的效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>但是货物还是太多，我们增加了临时的货车，依旧配送不过来，那这时我们就没办法了，只能让发，货的客户排队等候或者干脆不接受了;</span></span></span></span></div><div><span>6.</span><span><span><span><span>大促圆满完成后，累计的货物已经配送完成了，为了降低成本，我们就将临时租的车都还了;</span></span></span></span></div><span id="OSC_h3_21"></span><h3><span><span><span>1.4、技术源于创新</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>基于上述场景，物流公司就是我们的线程池、货物就是我们的线程任务、货车就是我们的线程。我，们如何设计公司的管理货车的流程，就应该如何设计线程池管理线程的流程。</span></span></span></p><div><span>1.</span><span><span><span><span>当任务进来我们还没有线程时，我们就该创建线程执行任务;</span></span></span></span></div><div><span>2.</span><span><span><span><span>当线程任务执行完成后，线程不释放，等着下一个任务进来后接着执行;</span></span></span></span></div><div><span>3.</span><span><span><span><span>当创建的线程数量达到一定量后，新来的任务我们存起来等待空闲线程执行，这就要求线程池有个，存任务的容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>当容器存满后，我们需要增加一些临时的线程来提高处理效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>当增加临时线程后依旧处理不了的任务，那就应该将此任务拒绝;</span></span></span></span></div><div><span>6.</span><span><span><span><span>当所有任务执行完成后，就应该将临时的线程释放掉，以免增加不必要的开销;</span></span></span></span></div><span id="OSC_h2_22"></span><h2><span><span><span>2、线程池具体分析</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中，我们讲了该如何设计一个线程池，下面我们看看大神是如何设计的；</span></span></span></p><span id="OSC_h3_23"></span><h3><span><span><span>2.1、 JAVA 中的线程池是如何设计的</span></span></span></h3><span id="OSC_h4_24"></span><h4><span><span><span>2.1.1、 线程池设计</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>看下线程池中的属性，了解线程池的设计。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractExecutorService</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//线程池的打包控制状态,用高 3 位来表示线程池的运行状态,低 29 位来表示线程池中工作线程的数量 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span> ctl </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>RUNNING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//值为 29,用来表示偏移量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> COUNT_BITS </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Integer</span></span><span><span style="color:#999999">.</span></span><span><span>SIZE </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池的最大容量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池的运行状态，总共有 5 个状态，用高 3 位来表示 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> RUNNING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//接受新任务并处理阻塞队列中的任务 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不接受新任务但会处理阻塞队列中的任务  </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不会接受新任务，也不会处理阻塞队列中的任务，并且中断正在运行的任务</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TIDYING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//所有任务都已终止， 工作线程数量为 0，即将要执行 terminated() 钩子方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TERMINATED </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// terminated() 方法已经执行结束</span></span><span><span></span></span><span><span style="color:#708090">//任务缓存队列，用来存放等待执行的任务</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//全局锁，对线程池状态等属性修改时需要使用这个锁</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池中工作线程的集合，访问和修改需要持有全局锁</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span> workers </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 终止条件</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Condition</span></span><span><span> termination </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newCondition</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池中曾经出现过的最大线程数 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//已完成任务的数量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTaskCount</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程工厂</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//任务拒绝策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程存活时间</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//是否允许核心线程超时</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> allowCoreThreadTimeOut</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//核心池大小，若 allowCoreThreadTimeOut 被设置，核心线程全部空闲超时被回收的情况下会为 0 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//最大池大小，不得超过 CAPACITY</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//默认的任务拒绝策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> defaultHandler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AbortPolicy</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//运行权限相关</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span> shutdownPerm </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"modifyThread"</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结一下：以上线程池的设计可以看出，线程池的功能还是很完善的。</span></span></span></p><div><span>1.</span><span><span><span><span>提供了线程创建、数量及存活时间等的管理;</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供了线程池状态流转的管理;</span></span></span></span></div><div><span>3.</span><span><span><span><span>提供了任务缓存的各种容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供了多余任务的处理机制;</span></span></span></span></div><div><span>5.</span><span><span><span><span>提供了简单的统计功能;</span></span></span></span></div><span id="OSC_h4_25"></span><h4><span><span><span>2.1.2、线程池构造函数</span></span></span></h4><pre><code><span><span><span style="color:#708090">//构造函数</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//核心线程数 </span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//最大允许线程数 </span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//线程存活时间 </span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span> unit</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//存活时间单位 </span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//任务缓存队列</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//线程工厂 </span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//拒绝策略 </span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalArgumentException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> unit</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">toNanos</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结一下：</span></span></span></p><div><span>1.</span><span><span><span><span>构造函数告诉了我们可以怎样去适用线程池，线程池的哪些特性是我们可以控制的;</span></span></span></span></div><span id="OSC_h4_26"></span><h4><span><span><span>2.1.3、线程池执行</span></span></span></h4><p><span><span><span>2.1.3.1、提交任务方法</span></span></span></p><div><span>•</span><span><span><span><span>public void execute(Runnable command);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future&lt;?&gt; submit(Runnable task);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Runnable task, T result);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Callable task);</span></span></span></span></div><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">Future</span></span><span><span>&lt;?&gt;</span></span><span><span></span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">RunnableFuture</span></span><span><span>&lt;Void&gt;</span></span><span><span> ftask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">newTaskFor</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">execute</span></span><span><span style="color:#999999">(</span></span><span><span>ftask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> ftask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>可以看到 submit 方法的底层调用的也是 execute 方法，所以我们这里只分析 execute 方法；</span></span></span></p><pre><code><span><span><span>    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        
        int c = ctl.get();
        //第一步：创建核心线程
        if (workerCountOf(c) &lt; corePoolSize) {  //worker 数量小于 corePoolSize
            if (addWorker(command, true))       //创建 worker
                return;
            c = ctl.get();
        }
        //第二步：加入缓存队列
        if (isRunning(c) &amp;&amp; workQueue.offer(command)) { //线程池处于 RUNNING 状态，将任务加入 workQueue 任务缓存队列
            int recheck = ctl.get();    
            if (! isRunning(recheck) &amp;&amp; remove(command))    //双重检查，若线程池状态关闭了，移除任务
                reject(command);
            else if (workerCountOf(recheck) == 0)       //线程池状态正常，但是没有线程了，创建 worker
                addWorker(null, false);
        }
        //第三步：创建临时线程
        else if (!addWorker(command, false))
            reject(command);
    }</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结一下：execute() 方法主要功能：</span></span></span></p><div><span>1.</span><span><span><span><span>核心线程数量不足就创建核心线程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>核心线程满了就加入缓存队列；</span></span></span></span></div><div><span>3.</span><span><span><span><span>缓存队列满了就增加非核心线程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>非核心线程也满了就拒绝任务；</span></span></span></span></div><p><span><span><span>2.1.3.2、创建线程</span></span></span></p><pre><code><span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> core</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        retry</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//等价于：rs&gt;=SHUTDOWN &amp;&amp; (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty())</span></span><span><span></span></span><span><span style="color:#708090">//线程池已关闭，并且无需执行缓存队列中的任务，则不创建</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span>
                   firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
                    wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>core </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndIncrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//CAS 增加线程数</span></span><span><span></span></span><span><span style="color:#0077aa">break</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span>
                c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// Re-read ctl</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span> rs</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// else CAS failed due to workerCount change; retry inner loop</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#708090">//上面的流程走完，就可以真实开始创建线程了</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span>firstTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//这里创建了线程</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// Recheck while holding lock.</span></span><span><span></span></span><span><span style="color:#708090">// Back out on ThreadFactory failure or if</span></span><span><span></span></span><span><span style="color:#708090">// shut down before lock acquired.</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
                    </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isAlive</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// precheck that t is startable</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalThreadStateException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//这里将线程加入到线程池中</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span>
                            largestPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> s</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workerAdded</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加成功，启动线程</span></span><span><span>
                    workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorkerFailed</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加线程失败操作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结：addWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>增加线程数；</span></span></span></span></div><div><span>2.</span><span><span><span><span>创建线程 Worker 实例加入线程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>加入完成开启线程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>启动失败则回滚增加流程；</span></span></span></span></div><p><span><span><span>2.1.3.3、工作线程的实现</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span></span></span><span><span style="color:#708090">//Worker 类是 ThreadPoolExecutor 的内部类</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractQueuedSynchronizer</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//持有实际线程</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker 所对应的第一个任务，可能为空</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//记录执行任务数</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">setState</span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// inhibit interrupts until runWorker</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getThreadFactory</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//当前线程调用 ThreadPoolExecutor 中的 runWorker 方法，在这里实现的线程复用</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>继承 AQS，实现了不可重入锁</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结：工作线程 Worker 类主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>此类持有一个工作线程，不断处理拿到的新任务，持有的线程即为可复用的线程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>此类可看作一个适配类，在 run() 方法中真实调用 runWorker() 方法不断获取新任务，完成线程复用；</span></span></span></span></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>2.1.3.4、线程的复用</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//ThreadPoolExecutor 中的 runWorker 方法，在这里实现的线程复用</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> wt </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// allow interrupts</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//标识线程是否异常终止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">while</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//这里会不断从任务队列获取任务并执行</span></span><span><span>
                w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程是否需要中断</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isInterrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupt</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">beforeExecute</span></span><span><span style="color:#999999">(</span></span><span><span>wt</span></span><span><span style="color:#999999">,</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行任务前的 Hook 方法，可自定义</span></span><span><span></span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        task</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行实际的任务</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">RuntimeException</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Error</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Error</span></span><span><span style="color:#999999">(</span></span><span><span>x</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">afterExecute</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span> thrown</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行任务后的 Hook 方法，可自定义</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行完成后，将当前线程中的任务制空，准备执行下一个任务</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">;</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
            completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">,</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程执行完成后的清理工作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小结：runWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>循环从缓存队列中获取新的任务，直到没有任务为止；</span></span></span></span></div><div><span>2.</span><span><span><span><span>使用 worker 持有的线程真实执行任务；</span></span></span></span></div><div><span>3.</span><span><span><span><span>任务都执行完成后的清理工作；</span></span></span></span></div><p><span><span><span>2.1.3.5、队列中获取待执行任务</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//标识当前线程是否超时未能获取到 task 对象</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Check if queue empty only if necessary.</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Are workers subject to culling?</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> timedOut</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndDecrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//若线程存活时间超时，则 CAS 减去线程数量</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">poll</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>NANOSECONDS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#708090">//允许超时回收则阻塞等待</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">take</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不允许则直接获取，没有就返回 null</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> r</span></span><span><span style="color:#999999">;</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">InterruptedException</span></span><span><span> retry</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结：getTask() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>实际在缓存队列中获取待执行的任务；</span></span></span></span></div><div><span>2.</span><span><span><span><span>在这里管理线程是否要阻塞等待，控制线程的数量；</span></span></span></span></div><p><span><span><span>2.1.3.6、清理工作</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// If abrupt, then workerCount wasn't adjusted</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
        mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            completedTaskCount </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span>
            workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">remove</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//移除执行完成的线程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每次回收完一个线程后都尝试终止线程池</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateLessThan</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//到这里说明线程池没有终止</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> min</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// replacement not needed</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//异常终止线程的话，需要在常见一个线程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小结：processWorkerExit() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>真实完成线程池线程的回收；</span></span></span></span></div><div><span>2.</span><span><span><span><span>调用尝试终止线程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>保证线程池正常运行；</span></span></span></span></div><p><span><span><span>2.1.3.7、尝试终止线程池</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//若线程池正在执行、线程池已终止、线程池还需要执行缓存队列中的任务时，返回</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isRunning</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> TIDYING</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行到这里，线程池为 SHUTDOWN 且无待执行任务，或 STOP 状态</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">interruptIdleWorkers</span></span><span><span style="color:#999999">(</span></span><span><span>ONLY_ONE</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//只中断一个线程</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//执行到这里，线程池已经没有可用线程了，可以终止了</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">compareAndSet</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TIDYING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//CAS 设置线程池终止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">terminated</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行钩子方法</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">set</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TERMINATED</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//这里将线程池设为终态</span></span><span><span>
                        termination</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">signalAll</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// else retry on failed CAS</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小结：tryTerminate() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>实际尝试终止线程池；</span></span></span></span></div><div><span>2.</span><span><span><span><span>终止成功则调用钩子方法，并且将线程池置为终态。</span></span></span></span></div><span id="OSC_h3_27"></span><h3><span><span><span>2.2、JAVA 线程池总结</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通过对 JAVA 线程池的具体分析我们可以看出，虽然流程看似复杂，但其实有很多内容都是状态重复校验、线程安全的保证等内容，其主要的功能与我们前面所提出的设计功能一致，只是额外增加了一些扩展，下面我们简单整理下线程池的功能；</span></span></span></p><p><span><span><span>2.2.1、主要功能</span></span></span></p><div><span>1.</span><span><span><span><span>线程数量及存活时间的管理；</span></span></span></span></div><div><span>2.</span><span><span><span><span>待处理任务的存储功能；</span></span></span></span></div><div><span>3.</span><span><span><span><span>线程复用机制功能；</span></span></span></span></div><div><span>4.</span><span><span><span><span>任务超量的拒绝功能；</span></span></span></span></div><div>
  &nbsp; 
</div><p><span><span><span>2.2.2、扩展功能</span></span></span></p><div><span>1.</span><span><span><span><span>简单的执行结果统计功能；</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供线程执行异常处理机制；</span></span></span></span></div><div><span>3.</span><span><span><span><span>执行前后处理流程自定义；</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供线程创建方式的自定义；</span></span></span></span></div><p><span><span><span>2.2.3、流程总结</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通过对 JAVA 线程池任务提交流程的分析我们可以看出，线程池执行的简单流程如下图所示；</span></span></span></p><div><img alt="" height="229" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-18-06DlWGyY11FjcoyluS.png" width="949" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_28"></span><h3><span><span><span>2.3、JAVA 线程池使用</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>线程池基本使用验证上述流程：</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//创建线程池</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span> threadPoolExecutor </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">100</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>SECONDS</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayBlockingQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//加入 4 个任务，小于核心线程，应该只有 4 个核心线程，队列为 0</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 4</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 个任务，超过核心线程，但是没有超过核心线程 + 缓存队列容量，应该 5 个核心线程，队列为 3</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 3</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 个任务，队列满了，应该 5 个热核心线程，队列 5 个，非核心线程 2 个</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 7</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 个任务，核心线程满了，应该 5 个热核心线程，队列 5 个，非核心线程 5 个，最后一个拒绝</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Exception</span></span><span><span> e</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                e</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">printStackTrace</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//java.util.concurrent.RejectedExecutionException</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 10</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getTaskCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//共执行 15 个任务</span></span><span><span></span></span><span><span style="color:#708090">//执行完成，休眠 15 秒，非核心线程释放，应该 5 个核心线程，队列为 0</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1500</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//关闭线程池</span></span><span><span>
        threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">shutdown</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿作者：京东零售，秦浩然&nbsp;</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>来源：京东云开发者社区，转载请注明来源</span></span></span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10112678</guid>
            <link>https://my.oschina.net/u/4090830/blog/10112678</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[全栈框架 Remix v2.0.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Remix 是一个由 React Router 开发团队所开发的基于 React 和 Node 的全栈框架，以解决开发者在用 React 开发时面临的一些棘手问题。v2.0.1 现已发布，具体更新内容包括：</span></p><p><strong>Patch Changes</strong></p><ul><li>修复使用 pnpm 时 MDX 文件的类型 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7491" target="_blank">#7491</a>&nbsp;)</li><li>更新<code>getDependenciesToBundle</code>以处理没有 main exports 的 ESM 包 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7272" target="_blank">#7272</a>&nbsp;) 
  <ul><li>注意，这些包必须在其<code>exports</code>字段中公开<code>package.json</code>，以便可以解析它们的路径</li></ul></li><li>修复<code>serverBuildPath</code>扩展名为<code>.cjs</code>的服务器构建（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7180" target="_blank">#7180</a>）</li><li>修复使用<code>remix-serve</code>和手动模式 (<code>remix dev --manual</code>) 的 CJS 项目的 HMR (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7487" target="_blank">#7487</a>&nbsp;) 
  <ul><li>通过显式破坏<code>require</code>缓存，<code>remix-serve</code>现在可以正确地重新导入 CJS 中的新服务器更改</li><li>ESM 项目已经正常运行，不受此影响。</li></ul></li><li>修复因部分写入服务器构建而导致的错误（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7470" target="_blank">#7470</a>） 
  <ul><li>以前，有可能在新服务器构建完全编写完成之前触发应用程序服务器代码的重新导入。重新导入部分已编写的服务器构建会导致<code>build.assets</code>未定义和读取<code>build.assets.version</code>时崩溃等相关问题。</li></ul></li><li>为<code>UIMatch</code>的<code>handle</code>字段添加第二个泛型（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7464" target="_blank">#7464</a>）</li><li>修复通过<code>route.lazy</code>加载 <span style="background-color:#ffffff; color:#1f2328">resource routes&nbsp;</span>的问题（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7498" target="_blank">#7498</a>）</li><li>当提交至无操作的路由时，抛出语义正确的 405<code>ErrorResponse</code>而非<code>Error</code>(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7423" target="_blank">#7423</a>&nbsp;)</li><li>更新到最新版本<code>@remix-run/web-fetch</code>（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7477" target="_blank">#7477</a>）</li><li>在生成文件会话存储 ID 时，将<code>crypto.randomBytes</code>改为<code>crypto.webcrypto.getRandomValues</code>&nbsp;(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7203" target="_blank">#7203</a>&nbsp;)</li><li>使用&nbsp;native<code>Blob</code>类而不是 polyfill (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7217" target="_blank">#7217</a>&nbsp;)</li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Freleases%2Ftag%2Fremix%25402.0.1" target="_blank">https://github.com/remix-run/remix/releases/tag/remix%402.0.1</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259282/remix-2-0-1-released</guid>
            <link>https://www.oschina.net/news/259282/remix-2-0-1-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Remix 2.0 正式发布，现代化全栈 Web 框架！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>9 月 16 日，全栈 Web 框架 Remix 正式发布了 2.0 版本，Remix 团队在发布 1.0 版本后经过近 2 年的持续努力，发布了 19 个次要版本、100 多个补丁版本，并解决了数千个问题和拉取请求，终于迎来了第二个主要版本！</p><blockquote><p>Remix 具有以下特性：</p><ul><li><p>追求速度、用户体验（UX），支持任何 SSR/SSG 等</p></li><li><p>基于 Web 基础技术，如 HTML/CSS 与 HTTP 以及 Web Fecth API，在绝大部分情况可以不依赖于 JavaScript 运行，所以可以运行在任何环境下，如 Web Browser、Cloudflare Workers、Serverless 或者 Node.js 等</p></li><li><p>客户端与服务端一致的开发体验，客户端代码与服务端代码写在一个文件里，无缝进行数据交互，同时基于 TypeScript，类型定义可以跨客户端与服务端共用</p></li><li><p>内置文件即路由、动态路由、嵌套路由、资源路由等</p></li><li><p>去掉 Loading、骨架屏等任何加载状态，页面中所有资源都可以预加载（Prefetch），页面几乎可以立即加载</p></li><li><p>告别以往瀑布式（Waterfall）的数据获取方式，数据获取在服务端并行（Parallel）获取，生成完整 HTML 文档，类似 React 的并发特性</p></li><li><p>提供开发网页需要所有状态，开箱即用；提供所有需要使用的组件，包括 <code>&lt;Links&gt;</code> 、<code>&lt;Link&gt;</code>、 <code>&lt;Meta&gt;</code> 、<code>&lt;Form&gt;</code> 、<code>&lt;Script/&gt;</code> ，用于处理元信息、脚本、CSS、路由和表单相关的内容</p></li><li><p>内置错误处理，针对非预期错误处理的 <code>&lt;ErrorBoundary&gt;</code> 和开发者抛出错误处理的 <code>&lt;CatchBoundary&gt;</code></p></li></ul></blockquote><p>Remix 是一个由 React Router 开发团队所开发的基于 React 和 TypeScript 的全栈框架。2021 年 11 月，Remix 正式开源，至今已在 Github 上获得了 24.6k star。Remix 正式开源时，引发了前端圈不小的关注，其被普遍认为是 Next.js 的强劲对手，那时隔两年，它和 Next.js 之间的「竞争」怎么样了呢？</p><p>目前，Next.js 拥有 112k star，是 Remix 的近 5 倍。Next.js 周下载量 279 万，而 Remix 仅有 1.4 万，Next.js 是 Remix 的近 200 倍。可见，Remix 并没有像大家预料的那样，成为 Next.js 的有力竞争对手，在开发者社区中只有较小的市场份额。尽管如此，Remix 仍然吸引了一些开发者，并且在特定领域或项目中有其优势和适用性。</p><p>下面就来看看 Remix 2.0 都有哪些更新！</p><h2>v1.0 以来的更新</h2><ul><li><p>v1.8 和 v1.10 中，将 Remix 与 React Router v6 进行了对齐。当开始开发 Remix 时，承诺它将使 React Router 变得更好。这个版本真正实现了这一承诺，并将两个库都对齐到使用相同的底层依赖。</p></li><li><p>在 v1.11 中，发布了"promises over the wire"，即延迟加载模块。现在，如果真的想在 Remix 应用中添加 loading 图标，可以这么做了！</p></li><li><p>在 v1.11 中，添加了"flat"路由，简化了使用嵌套布局而不需要嵌套目录的操作，这成为 v2 版本的默认设置。</p></li><li><p>在 v1.13 和 v1.16 中，改进了 Remix 对各种 CSS 策略的支持，包括 PostCSS、CSS 模块、Vanilla Extract 和 CSS 副作用（全局）导入。</p></li><li><p>在 v1.14 和 v1.18 中，发布了一个新的开发服务器，支持热更新（HMR）和热数据重载（HDR）。这个新的开发服务器成为 v2 版本的默认设置。</p></li><li><p>在 v2 版本中，最重要的亮点之一是全新的<code>create-remix</code>命令行工具体验。</p></li></ul><h2>v2.0 的更新内容</h2><h3>重大变化</h3><h4>升级的依赖要求</h4><p>Remix v2 已经升级了对 React 和 Node 的最低版本支持，并正式支持以下版本：</p><ul><li><p>React 18</p></li><li><p>Node 18 或更高版本</p></li></ul><h4>移除未来标志</h4><p>以下未来标志已被移除，并且它们的行为现在是默认的，现在可以从<code>remix.config.js</code>文件中删除这些设置。</p><ul><li><p><code>v2_dev</code>，新的开发服务器，具有 HMR + HDR，如果在<code>future.v2_dev</code>中有配置而不仅仅是布尔值（例如，<code>future.v2_dev.port</code>），可以将它们提升到<code>remix.config.js</code>中的根<code>dev</code>对象中。</p></li><li><p><code>v2_errorBoundary</code>，移除了<code>CatchBoundary</code>，改为使用单个<code>ErrorBoundary</code></p></li><li><p><code>v2_headers</code>，修改了嵌套路由场景中的头部逻辑</p></li><li><p><code>v2_meta</code>，修改了<code>meta()</code>的返回格式</p></li><li><p><code>v2_normalizeFormMethod</code>，将<code>formMethod</code>规范化为大写</p></li><li><p><code>v2_routeConvention</code>，现在默认情况下，路由使用扁平化路由约定</p></li></ul><h4>重大变更/API 删除</h4><p>下面列出了 Remix v1 中具有弃用警告的其他重大更改/API 删除。如果使用的是最新 1.19.3 版本且没有任何控制枱警告，那么可能可以继续执行所有这些操作！</p><p><strong>（1）有破坏性更改/API 移除</strong></p><ul><li><p>remix.config.js</p></li><li><p>将<code>browserBuildDirectory</code>重命名为<code>assetsBuildDirectory</code></p></li><li><p>删除<code>devServerBroadcastDelay</code></p></li><li><p>将<code>devServerPort</code>重命名为<code>dev.port</code></p></li><li><p>如果在 1.x 版本中选择此选项，则配置标记将是<code>future.v2_dev.port</code>，但在稳定的 2.x 版本中，它将是<code>dev.port</code></p></li><li><p>将默认的<code>serverModuleFormat</code>从<code>cjs</code>更改为<code>esm</code></p></li><li><p>删除<code>serverBuildTarget</code></p></li><li><p>将<code>serverBuildDirectory</code>更改为<code>serverBuildPath</code></p></li><li><p>默认情况下不再在服务器上对 Node 内置模块进行<code>polyfill</code>，必须通过<code>serverNodeBuiltinsPolyfill</code>选择加入<code>polyfill</code></p></li><li><p>@remix-run/react</p></li><li><p>删除<code>useTransition</code></p></li><li><p>删除<code>fetcher.type</code>并压缩<code>fetcher.submission</code></p></li><li><p><code>&lt;fetcher.Form method="get"&gt;</code>现在更准确地被归类为<code>state：「loading」</code>，而不是<code>state：「submitting」</code>，以更好地与底层的 GET 请求保持一致</p></li><li><p>要求<code>camelCased</code>版本的<code>imagesrcset/imagesizes</code></p></li></ul><p><strong>（2）没有弃用警告</strong></p><p>此版本没能在每个破坏性更改或 API 移除上都收到废弃警告。以下是可能需要查看的剩余变更列表，以升级到 v2：</p><ul><li><p>remix.config.js</p></li><li><p>Node 内置模块不再默认在浏览器中进行 polyfill，可以通过<code>browserNodeBuiltinsPolyfill</code>选项选择加入<code>polyfill</code></p></li><li><p>如果存在配置文件，则<code>PostCSS/Tailwind</code>将默认启用，可以通过 postcss 和 tailwind 标志禁用此功能</p></li><li><p>@remix-run/cloudflare</p></li><li><p>删除<code>createCloudflareKVSessionStorage</code>方法</p></li><li><p>不再支持@cloudflare/workers-types v2 和 v3</p></li><li><p>@remix-run/dev</p></li><li><p>删除<code>REMIX_DEV_HTTP_ORIGIN</code>，增加<code>REMIX_DEV_ORIGIN</code></p></li><li><p>删除<code>REMIX_DEV_SERVER_WS_PORT</code>，增加<code>dev.port</code>或<code>--port</code></p></li><li><p>删除<code>--no-restart/restart</code>标志，增加<code>--manual/manual</code></p></li><li><p>删除<code>--scheme/scheme</code>和<code>--host/host</code>，增加<code>REMIX_DEV_ORIGIN</code></p></li><li><p>删除<code>codemod</code>命令</p></li><li><p>@remix-run/eslint-config</p></li><li><p>删除<code>@remix-run/eslint-config/jest</code>配置</p></li><li><p>删除魔法<code>imports</code>的 ESLint 警告</p></li><li><p>@remix-run/netlify</p></li><li><p><code>@remix-run/netlify</code>适配器已被删除，推荐使用 Netlify 官方适配器</p></li><li><p>@remix-run/node</p></li><li><p>默认不再对<code>fetch</code>进行<code>polyfill</code>，应用需要调用<code>installGlobals()</code>来安装<code>polyfills</code></p></li><li><p>不再从<code>@remix-run/node</code>导出<code>fetch</code>和相关 API，应用应使用全局命名空间中的版本</p></li><li><p>应用需要调用<code>sourceMapSupport.install()</code>来设置源映射支持</p></li><li><p>@remix-run/react</p></li><li><p>删除<code>unstable_shouldReload</code>，增加<code>shouldRevalidate</code></p></li><li><p>@remix-run/serve</p></li><li><p>如果 3000 端口被占用且未指定 PORT，则<code>remix-serve</code>将选择一个可用的端口</p></li><li><p>集成手动模式</p></li><li><p>删除未记录的<code>createApp Node API</code></p></li><li><p>在<code>remix-serve</code>中保留动态 imports 以供外部 bundle 使用</p></li><li><p>@remix-run/vercel</p></li><li><p><code>@remix-run/vercel</code>适配器已被删除，推荐使用 Vercel 官方提供的功能</p></li><li><p>create-remix</p></li><li><p>停止传递<code>isTypeScript</code>给<code>remix.init</code>脚本</p></li><li><p>remix</p></li><li><p>删除魔法 <code>exports</code></p></li></ul><p><strong>（3）破坏类型变化</strong></p><ul><li><p>从 <code>future.v2_meta</code> 类型中删除了 <code>V2_</code> 前缀，因为它们现在是默认行为。</p></li><li><p><code>V2_MetaArgs</code> -&gt; <code>MetaArgs</code></p></li><li><p><code>V2_MetaDescriptor</code> -&gt; <code>MetaDescriptor</code></p></li><li><p><code>V2_MetaFunction</code> -&gt; <code>MetaFunction</code></p></li><li><p><code>V2_MetaMatch</code> -&gt; <code>MetaMatch</code></p></li><li><p><code>V2_MetaMatches</code> -&gt; <code>MetaMatches</code></p></li><li><p><code>V2_ServerRuntimeMetaArgs</code> -&gt; <code>ServerRuntimeMetaArgs</code></p></li><li><p><code>V2_ServerRuntimeMetaDescriptor</code> -&gt; <code>ServerRuntimeMetaDescriptor</code></p></li><li><p><code>V2_ServerRuntimeMetaFunction</code> -&gt; <code>ServerRuntimeMetaFunction</code></p></li><li><p><code>V2_ServerRuntimeMetaMatch</code> -&gt; <code>ServerRuntimeMetaMatch</code></p></li><li><p><code>V2_ServerRuntimeMetaMatches</code> -&gt; <code>ServerRuntimeMetaMatches</code></p></li><li><p>以下类型已进行调整，更偏向于使用<code>unknown</code>而不是<code>any</code>，并与底层的 React Router 类型保持一致：</p></li><li><p>将<code>useMatches()</code>的返回类型从<code>RouteMatch</code>改名为<code>UIMatch</code></p></li><li><p>将<code>LoaderArgs</code>/<code>ActionArgs</code>改名为<code>LoaderFunctionArgs</code>/<code>ActionFunctionArgs</code></p></li><li><p>将<code>AppData</code>的类型从<code>any</code>改为<code>unknown</code></p></li><li><p>将<code>Location["state"]</code>（<code>useLocation.state</code>）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p>将<code>UIMatch["data"]</code>（<code>useMatches()[i].data</code>）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p>将<code>UIMatch["handle"]</code>（<code>useMatches()[i].handle</code>）的类型从<code>{ [k: string]: any }</code>改为<code>unknown</code></p></li><li><p>将<code>Fetcher["data"]</code>（<code>useFetcher().data</code>）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p><code>MetaMatch.handle</code>（在<code>meta()</code>函数中使用）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p><code>AppData</code>/<code>RouteHandle</code>不再导出，因为它们只是<code>unknown</code>的别名</p></li></ul><h3>新增功能</h3><ul><li><p>新的<code>create-remix</code>命令行界面工具</p></li><li><p>最显著的改变是，不再使用下拉菜单选择模板/堆栈，而是使用<code>--template</code>参数和不断增长的可用模板列表。</p></li><li><p>新增<code>--overwrite</code>参数</p></li><li><p>支持<code>bun</code>包管理器</p></li><li><p>通过<code>build.mode</code>检测构建模式</p></li><li><p>支持通过<code>serverNodeBuiltinsPolyfill.globals</code>/<code>browserNodeBuiltinsPolyfill.globals</code>来对 Node 全局对象进行<code>polyfill</code></p></li><li><p>新的<code>redirectDocument</code>实用工具，通过重新加载文档实现重定向</p></li><li><p>在<code>meta</code>参数中添加<code>error</code>，以便可以渲染错误标题等</p></li><li><p><code>unstable_createRemixStub</code>现在支持在 stubbed Remix 路由上添加<code>meta/links</code>函数</p></li><li><p><code>unstable_createRemixStub</code>不再支持在路由上使用<code>element/errorElement</code>属性。必须使用<code>Component/ErrorBoundary</code>与从 Remix 路由模块导出的内容匹配。</p></li></ul><h3>其他更新</h3><ul><li><p>Remix 现在在内部使用 React Router 的<code>route.lazy</code>方法在导航时加载路由模块。</p></li><li><p>删除了<code>@remix-run/node</code>中的<code>atob/btoa</code> polyfills，改用内置版本。</p></li><li><p>将<code>@remix-run/dev</code>包与<code>@remix-run/css-bundle</code>包的内容解耦。</p></li><li><p>现在，<code>@remix-run/css-bundle</code>包的内容完全由 Remix 编译器管理。尽管仍然建议 Remix 依赖项共享相同的版本，但这个变化确保在升级<code>@remix-run/dev</code>而不升级<code>@remix-run/css-bundle</code>时没有运行时错误。</p></li><li><p><code>remix-serve</code>现在将选择一个空闲的端口（如果 3000 端口被占用）。</p></li><li><p>如果设置了 PORT 环境变量，r<code>emix-serve</code>将使用该端口。</p></li><li><p>否则，<code>remix-serve</code>将选择一个空闲的端口（除非 3000 端口已被占用）。</p></li><li><p>更新的依赖项：</p></li><li><p><code>react-router-dom@6.16.0</code></p></li><li><p><code>@remix-run/router@1.9.0</code></p></li><li><p><code>@remix-run/web-fetch@4.4.0</code></p></li><li><p><code>@remix-run/web-file@3.1.0</code></p></li><li><p><code>@remix-run/web-stream@1.1.0</code></p></li></ul><h2>React Server Components？</h2><p>Remix 对于 React Server Components（RSC）的支持计划是积极的。他们希望在 Remix v3 中添加对 RSC 的支持，并希望能够展示这项技术在多个框架中的能力。</p><p>RSC 是一个有趣且强大的功能，但是 Remix v2 是基于当前稳定的 React 特性构建的，因此 RSC 在 Remix v2 中尚未包含。一旦 RSC 稳定下来，Remix 将会支持它。</p><p>然而，与之前支持的其他 React 特性相比，「支持 RSC」需要更深入的集成。RSC 的异步组件与 Remix 的加载器和组件结合得非常相似，并且 Remix 在 v3 中决定摒弃使用第三方库 useLoaderData，因此在数据加载方面可能会有所不同。他们希望开发者只需要将现有的加载器代码迁移到新的异步组件中，但需要注意数据依赖的瀑布效应。</p><p>Remix 团队在今年早些时候的 Remix Conf 上与 React 核心团队的成员举办了一个讨论会，讨论了 RSC 以及如何共同推进这项技术的稳定发布。他们以各种方式帮助准备 RSC，并希望能够成功地集成它到 Remix 中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3b8a79fd9e4920af8f87057e0a296e31755.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5152974/blog/10113443</guid>
            <link>https://my.oschina.net/u/5152974/blog/10113443</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[尤雨溪：高质量中文文档的重要性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">Vue.js 和 Vite 的创建者</span>尤雨溪在最近的一次<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thisdot.co%2Fblog%2Fcreator-of-vue-js-and-vite-evan-yous-journey-from-google-engineer-to-open%2F" target="_blank">访谈中</a>，谈到了自己<span style="background-color:#ffffff">成为独立开源开发人员的历程；重点介绍了向全职开源工作的过渡、Vue.js 的成长以及他对未来的期望。</span></span></p><p><span style="color:#000000"><img height="282" src="https://oscimg.oschina.net/oscnet/up-98b89dc57ad7b224f597857decc86eb4ee9.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">在分享了成为一名全职开源开发人员的历程以及促进这一转变的挑战和因素时，尤雨溪将自己的成功归功于运气和坚持的结合。他详细阐述了自己开发 Vue.js 的经历，强调了保持对解决一些有趣的问题时的热情；并概述了 API 驱动开发的方法，即在实现之前设计事物的工作方式。</span></p><p><span style="color:#000000">尤雨溪解释称，Vue.js 最初是通过 Hacker News 和中国社交网络等平台吸引的用户，而这主要得益于它自下而上的方法和用户友好的文档；与 React 和 Angular 等大型框架形成了鲜明对比。</span></p><p><span style="color:#000000">他认为，Vue.js 的发展历程中的一大转折点是其在 Laravel 社区中的崭露头角，正是因此才巩固了 Vue.js 作为生产项目可靠框架的声誉。关于 Vue.js 对后端开发人员的吸引力，尤雨溪则认为，主要得益于该项目与传统后端框架的无缝集成。</span></p><p><span style="color:#000000">访谈内容还涉及了&nbsp;<span style="background-color:#ffffff">Vue.js 在不同地区（尤其是亚洲）的采用情况。尤雨溪将项目在这些地区的成功归功于自己对中国社交网络的积极参与，同时还强调了高质量中文文档的重要性。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">此外，尤雨溪还分享了他在 Vue.js 早期阶段的工作节奏和满足感，并将其与项目发展过程中所需的更复杂的决策过程进行了对比。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2FweaYWoL_ymI" target="_blank">查看完整视频</a>。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 04:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259202</guid>
            <link>https://www.oschina.net/news/259202</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bun v1.0.3 发布，Zig 编写的 JavaScript 运行时]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Bun 发布了其最新版本 v1.0.3，这是一个集 JavaScript 运行时、打包器、转译器和包管理器于一体的工具。这次的更新不仅修复了众多已知的问题，还引入了一系列令人期待的新功能。</p><p>首先，Bun 在这个版本中增加了对 TypeScript 的<span>&nbsp;</span><code>emitDecoratorMetadata</code><span>&nbsp;</span>的支持，这意味着开发者现在可以在 Bun 中无缝地使用 Nest.js 这样的框架。Nest.js 是 Node.js 生态系统中的一个受欢迎的框架，而 Bun 对其的支持无疑将进一步扩大其在开发者社区中的影响力。</p><p>此外，Bun 还引入了对<span>&nbsp;</span><code>module.parent</code><span>&nbsp;</span>的支持。这是 Node.js 中的一个特性，允许开发者确定一个模块是直接运行还是被另一个模块所需。这个功能的引入进一步增强了 Bun 与 Node.js 的兼容性。</p><p>在私有 npm 仓库的支持方面，Bun 也做了大量的工作。现在，它已经与 Azure Artifacts 和 JFrog Artifactory 这样的私有 npm 仓库实现了更好的兼容性。用户可以使用<span>&nbsp;</span><code>bunfig.toml</code><span>&nbsp;</span>文件来配置这些私有仓库，这为开发者提供了更大的灵活性。</p><p>值得一提的是，应广大用户的反馈，Bun 决定默认关闭<span>&nbsp;</span><code>[0.5ms] env loaded</code><span>&nbsp;</span>消息。这是一个小改动，但它反映了 Bun 对用户反馈的重视。</p><p>在与 Node.js 的兼容性方面，Bun 也做了大量的工作。这次的更新中，Bun 实现了<span>&nbsp;</span><code>console.Console</code><span>&nbsp;</span>构造函数，并修复了环境变量处理中的问题。这些改进都是为了确保 Bun 能够为开发者提供与 Node.js 一致的开发体验。</p><pre><code class="language-javascript">import { Console } from "console";
import { createWriteStream } from "fs";

const writer = new Console({ stdout: createWriteStream("log.txt") });

writer.log("hello");
writer.log("world", { x: 2 });
</code></pre><p>此外，Bun 还修复了一系列已知的问题。其中包括<span>&nbsp;</span><code>request.json()</code><span>&nbsp;</span>中的一个问题，以及与<span>&nbsp;</span><code>bun pm rm cache</code><span>&nbsp;</span>命令相关的一个问题。这些修复都是为了确保 Bun 能够为开发者提供一个稳定和可靠的开发环境。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259198/bun-1-0-3-released</guid>
            <link>https://www.oschina.net/news/259198/bun-1-0-3-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英特尔参与 CentOS Stream 项目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">红帽官方发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgAmZSf447gZEqd8n3tGd_A" target="_blank">公告</a>欢迎英特尔参与进 CentOS Stream 项目，并表示「这一举措不仅进一步深化了我们长期的合作关系，也构建在英特尔已经在 Fedora 项目中积极贡献的基础之上。」</span></p><p><img height="250" src="https://oscimg.oschina.net/oscnet/up-de0d91800dda02f5f04460a8e28f9ef7085.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">目前，CentOS Stream 共包括以下特别兴趣小组（SIG）：</span></p><ul><li><p><span style="color:#000000">指令集架构（ISA）特别兴趣小组（SIG）致力于聚焦于 CentOS Stream 中最新的 ISA 基线和工具链技术，以提高性能并减少碳足迹为最终目标。</span></p></li><li><p><span style="color:#000000">虚拟化 SIG 旨在为最新的虚拟化安全功能提供全面支持，确保开箱即用，其中包括像 Intel® Trust Domain Extensions（Intel® TDX）这样的保密计算能力。</span></p></li><li><p><span style="color:#000000">超大规模 SIG 旨在支持和构建适用于大规模基础设施的 CentOS Stream 部署用例，以满足不同规模的需求。</span></p></li></ul><p>英特尔将为这些小组做出贡献。「<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">通过积极频繁地为 CentOS Stream 贡献，红帽和英特尔能够更有效地支持 RHEL 中最新的硬件架构进步，尤其是那些满足我们用户新兴关键需求的进展。</span>」</p><p><span>英特尔公司系统软件工程副总裁兼总经理 Mark Skarpness 表示，该公司的目标是借助 CentOS Stream 和 Fedora，为红帽生态系统的所有上游贡献提供更强大的英特尔平台支持。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除了为 CentOS Stream 贡献外，红帽与英特尔的合作涵盖了多个领域，包括 5G 网络、边缘计算、人工智能（AI）和系统安全。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259196</guid>
            <link>https://www.oschina.net/news/259196</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[NExT-GPT —— 任意对任意多模态大语言模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start">NExT-GPT 是一个端到端通用的任意多模态大型语言模型（MM-LLM）系统。开发团队将 LLM 与多模态适配器和不同的扩散解码器连接起来，使 NExT-GPT 能够感知输入并以文本、图像、视频和音频的任意组合生成输出。</p><p style="text-align:start">通过利用现有训练有素的高性能编码器和解码器，NExT-GPT 仅使用某些投影层的少量参数（1％）进行调整，这不仅有利于低成本训练，而且便于方便地扩展到更多潜在的方式。</p><p style="text-align:start">此外还引入了模态切换指令调整（MosIT）并为 MosIT 手动策划高质量的数据集，在此基础上，NExT-GPT 被赋予了复杂的跨模态语义理解和内容生成的能力。</p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>NExt-GPT 建立在现有预训练的 LLM、多模态编码器和 SoTA 扩散模型之上，具有足够的端到端指令调整。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="255" src="https://static.oschina.net/uploads/space/2023/0922/152547_Wq8a_4252687.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><strong>多模态编码阶段。</strong>利用已建立的编码器以各种模式对输入进行编码，其中这些表示通过投影层投影成法学硕士可以理解的类似语言的表示。</li><li><strong>LLM 理解和推理阶段。</strong>利用现有的开源法学硕士作为核心来处理输入信息以进行语义理解和推理。LLM 不仅直接生成文本标记，还生成独特的「模态信号」标记，这些标记充当指示解码层是否相应输出模态内容以及输出什么模态内容的指令。</li><li><strong>多模式生成阶段。</strong>从 LLM（如果有）接收具有特定指令的多模态信号，基于 Transformer 的输出投影层将信号标记表示映射为后续多模态解码器可以理解的表示形式。</li></ul><p><img height="138" src="https://static.oschina.net/uploads/space/2023/0922/152430_MsEF_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="599" src="https://static.oschina.net/uploads/space/2023/0922/152456_Uqt0_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><em>NExT-GPT 推理过程。灰色表示模块已停用。</em></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/next-gpt</guid>
            <link>https://www.oschina.net/p/next-gpt</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 云原生分布式操作系统 KubeSphere]]>
            </title>
            <description>
                <![CDATA[<p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.com.cn%2F"><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/kubesphere-icon.gif" alt="banner" width="200px" referrerpolicy="no-referrer"></a></p><p align="center"><b>适用于<i> Kubernetes 多云、数据中心和边缘 </i>管理的容器平台</b></p><p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2Fkubesphere%2Fkubesphere"><img src="https://goreportcard.com/badge/github.com/kubesphere/kubesphere" alt="A+" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fhub.docker.com%2Fr%2Fkubesphere%2Fks-installer"><img src="https://img.shields.io/docker/pulls/kubesphere/ks-installer" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fissues%3Fq%3Dis%253Aissue%2Bis%253Aopen%2Bsort%253Aupdated-desc%2Blabel%253A%2522good%2Bfirst%2Bissue%2522"><img src="https://img.shields.io/github/issues/kubesphere/kubesphere/good%20first%20issue?logo=github" alt="good first issue" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2Fintent%2Ffollow%3Fscreen_name%3DKubeSphere"><img src="https://img.shields.io/twitter/follow/KubeSphere?style=social" alt="follow on Twitter" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fjoin.slack.com%2Ft%2Fkubesphere%2Fshared_invite%2Fzt-1ilxbsp39-t4ES4xn5OI0eF5hvOoAhEw"><img src="https://img.shields.io/badge/Slack-2000%2B-blueviolet?logo=slack&amp;logoColor=white" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.youtube.com%2Fchannel%2FUCyTdUQUYjf7XLjxECx63Hpw"><img src="https://img.shields.io/youtube/channel/subscribers/UCyTdUQUYjf7XLjxECx63Hpw?style=social" referrerpolicy="no-referrer"></a></p><hr><h2><a id="kubesphere-是什么" class="anchor" href="https://gitee.com/kchstack/kubesphere#kubesphere-%E6%98%AF%E4%BB%80%E4%B9%88"></a>KubeSphere 是什么</h2><blockquote><p><a href="https://gitee.com/kchstack/kubesphere/blob/master/README.md">English</a> | 中文</p></blockquote><p><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2F">KubeSphere</a> 愿景是打造一个以 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubernetes.io%2Fzh%2F">Kubernetes</a> 为内核的 <strong>云原生分布式操作系统</strong>，它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用（plug-and-play）的集成，支持云原生应用在多云与多集群的统一分发和运维管理。 KubeSphere 也是一个多租户容器平台，提供全栈的 IT 自动化运维的能力，简化企业的 DevOps 工作流。KubeSphere 提供了运维友好的向导式操作界面，帮助企业快速构建一个强大和功能丰富的容器云平台，详情请参阅 <a href="https://gitee.com/kchstack/kubesphere#%E5%B9%B3%E5%8F%B0%E5%8A%9F%E8%83%BD">平台功能</a> 。</p><p>下面的屏幕截图让我们进一步了解 KubeSphere，关于 KubeSphere 更详细的介绍与说明请参阅 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fintroduction%2Fwhat-is-kubesphere%2F">什么是 KubeSphere</a> 。</p><table><tbody><tr><td width="50%" align="center"><b>工作台</b></td><td width="50%" align="center"><b>项目资源</b></td></tr><tr><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/console.png" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/project.png" referrerpolicy="no-referrer"></td></tr><tr><td width="50%" align="center"><b>CI/CD 流水线</b></td><td width="50%" align="center"><b>应用商店</b></td></tr><tr><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/cicd.png" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/app-store.png" referrerpolicy="no-referrer"></td></tr></tbody></table><h2><a id="demo-环境" class="anchor" href="https://gitee.com/kchstack/kubesphere#demo-%E7%8E%AF%E5%A2%83"></a>Demo 环境</h2><p>🎮 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.cloud%2Fconsole%2Fmanaged-cluster%2F">KubeSphere Cloud 轻量集群</a>为您提供免费、稳定且开箱即用的 KubeSphere 托管集群服务。注册账号并登录后，可在 5 秒内新建一个安装 KubeSphere 的 K8s 集群，进而进入 KubeSphere 交互式体验各项功能。</p><p>🖥 您还可以通过 <a href="https://gitee.com/link?target=https%3A%2F%2Fyoutu.be%2FYxZ1YUv0CYs">Demo 视频</a>快速了解使用操作。</p><h2><a id="平台功能" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%B9%B3%E5%8F%B0%E5%8A%9F%E8%83%BD"></a>平台功能</h2><details><summary><b>🕸 部署 Kubernetes 集群</b></summary>
  支持在任何基础设施上部署 Kubernetes，支持在线安装和离线安装，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-linux%2Fintroduction%2Fintro%2F">了解更多</a>。
  </details><details><summary><b>🔗 Kubernetes 多集群管理</b></summary>
  提供集中控制平台来管理多个 Kubernetes 集群，支持将应用程序发布到跨不同云供应商的多个 k8s 集群上。
  </details><details><summary><b>🤖 Kubernetes DevOps</b></summary>
  提供基于 GitOps 的 CD 方案，底层支持 Argo CD，可实时统计 CD 状态。结合主流 CI 引擎 Jenkins，让 DevOps 更加易用。<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdevops%2F">了解更多</a>。
  </details><details><summary><b>🔎 云原生可观测性</b></summary>
  支持多维度监控、事件和审计日志；内置多租户日志查询和收集，告警和通知，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fobservability%2F">了解更多</a>。
  </details><details><summary><b>🧩 基于 Istio 的微服务治理</b></summary>
  为分布式微服务应用程序提供细粒度的流量管理、可观测性和服务跟踪，支持可视化的流量拓扑，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fservice-mesh%2F">了解更多</a>。
  </details><details><summary><b>💻 应用商店</b></summary>
  为基于 Helm 的应用程序提供应用商店，并在 Kubernetes 平台上提供应用程序生命周期管理功能，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fpluggable-components%2Fapp-store%2F">了解更多</a>。
  </details><details><summary><b>💡 Kubernetes 边缘节点管理</b></summary>
  基于 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubeedge.io%2Fzh%2F">KubeEdge</a> 实现应用与工作负载在云端与边缘节点的统一分发与管理，解决在海量边、端设备上完成应用交付、运维、管控的需求，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fpluggable-components%2Fkubeedge%2F">了解更多</a>。
  </details><details><summary><b>📊 多维度计量与计费</b></summary>
  提供基于集群与租户的多维度资源计量与计费的监控报表，让 Kubernetes 运营成本更透明，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Ftoolbox%2Fmetering-and-billing%2Fview-resource-consumption%2F">了解更多</a>。
  </details><details><summary><b>🗃 支持多种存储和网络解决方案</b></summary>
  支持 GlusterFS、CephRBD、NFS、LocalPV ，并提供多个 CSI 插件对接公有云与企业级存储。提供 Kubernetes 在裸机、边缘和虚拟化中的负载均衡器实现 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fopenelb">OpenELB</a> 。提供网络策略和容器组 IP 池管理，支持 Calico、Flannel、Kube-OVN。
  </details><details><summary><b>🏘 多租户与统一鉴权认证</b></summary>
  提供统一的认证鉴权与细粒度的基于角色的授权系统，支持对接 AD/LDAP 。
  </details><details><summary><b>🧠 GPU 工作负载调度与监控</b></summary>
  支持可视化创建 GPU 工作负载，支持 GPU 监控，同时还支持对 GPU 资源进行租户级配额管理。
  </details><h2><a id="架构说明" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E"></a>架构说明</h2><p>KubeSphere 使用前后端分离的架构，将 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fconsole">前端</a> 与 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere">后端</a> 分开。后端的各个功能组件可通过 REST API 对接外部系统。</p><p><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/architecture.png" alt="Architecture" referrerpolicy="no-referrer"></p><hr><h2><a id="最新版本" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC"></a>最新版本</h2><p>🎉 KubeSphere 3.3.2 全新发布！！多项功能与体验优化，带来更好的产品体验，详见 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Frelease%2Frelease-v332%2F">v3.3.2 版本说明</a> 。</p><h2><a id="安装" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%AE%89%E8%A3%85"></a>安装</h2><p>KubeSphere 支持在任意平台运行，从本地数据中心到混合多云再走向边缘。此外，KubeSphere 可以部署在任何版本兼容的 Kubernetes 集群上。Installer 默认将执行最小化安装，您可以在安装前或安装后自定义<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fquick-start%2Fenable-pluggable-components%2F">安装可插拔功能组件</a>。</p><h3><a id="快速入门" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入门</h3><h4><a id="在-k8sk3s-上安装" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%9C%A8-k8sk3s-%E4%B8%8A%E5%AE%89%E8%A3%85"></a>在 K8s/K3s 上安装</h4><p>请确保您的集群已经安装 Kubernetes v1.19.x、v1.20.x、v1.21.x、* v1.22.x、* v1.23.x 或 * v1.24.x。带星号的版本可能出现边缘节点部分功能不可用的情况。因此，如需使用边缘节点，推荐安装 Kubernetes v1.21.x 及之前的版本。运行以下命令以在现有 Kubernetes 集群上安装 KubeSphere：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="s">kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.3.1/kubesphere-installer.yaml</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="s">kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.3.1/cluster-configuration.yaml</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="all-in-onelinux-单节点安装" class="anchor" href="https://gitee.com/kchstack/kubesphere#all-in-onelinux-%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85"></a>All-in-one（Linux 单节点安装）</h4><p>👨‍💻 没有 Kubernetes 集群? 可以用 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubekey">KubeKey</a> 在 Linux 环境以 All-in-one 快速安装单节点 K8s/K3s 和 KubeSphere，下面以 K3s 为例：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1"># 下载 KubeKey</span></span><span id="LC2" class="line"><span class="s">curl -sfL https://get-kk.kubesphere.io | VERSION=v2.3.0 sh -</span></span><span id="LC3" class="line"><span class="c1"># 为 kk 赋予可执行权限</span></span><span id="LC4" class="line"><span class="s">chmod +x kk</span></span><span id="LC5" class="line"><span class="c1"># 创建集群</span></span><span id="LC6" class="line"><span class="s">./kk create cluster --with-kubernetes v1.21.4-k3s --with-kubesphere v3.3.1</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>可使用以下命令查看安装日志。如果安装成功，可使用 <code>http://IP:30880</code> 访问 KubeSphere Console，管理员登录帐密为 <code>admin/P@88w0rd</code>。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="s">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l 'app in (ks-install, ks-installer)' -o jsonpath='{.items[0].metadata.name}') -f</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="在托管-kubernetes-上部署-kubesphere" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%9C%A8%E6%89%98%E7%AE%A1-kubernetes-%E4%B8%8A%E9%83%A8%E7%BD%B2-kubesphere"></a>在托管 Kubernetes 上部署 KubeSphere</h3><p>KubeSphere 托管在以下云供应商上，您可以通过在其托管的 Kubernetes 服务上一键安装来部署 KubeSphere。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Faws.amazon.com%2Fquickstart%2Farchitecture%2Fqingcloud-kubesphere%2F">在 Amazon EKS 上部署 KubeSphere</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmarket.azure.cn%2Fmarketplace%2Fapps%2Fqingcloud.kubesphere">在 Azure AKS 上部署 KubeSphere</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmarketplace.digitalocean.com%2Fapps%2Fkubesphere">在 DigitalOcean 上部署 KubeSphere</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.qingcloud.com%2Fproducts%2Fkubesphereqke">在青云 QingCloud QKE 上部署 KubeSphere</a></li></ul><p>您还可以在几分钟内在其他托管的 Kubernetes 服务上安装 KubeSphere，请参阅 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-kubernetes%2F">官方文档</a> 以开始使用。</p><blockquote><p>👨‍💻 不能访问网络？参考 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-kubernetes%2Fon-prem-kubernetes%2Finstall-ks-on-linux-airgapped%2F">在 Kubernetes 上离线安装</a> 或者 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-linux%2Fintroduction%2Fair-gapped-installation%2F">在 Linux 上离线安装</a> 了解如何使用私有仓库来安装 KubeSphere。</p></blockquote><h2><a id="指引讨论贡献与支持" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E6%8C%87%E5%BC%95%E8%AE%A8%E8%AE%BA%E8%B4%A1%E7%8C%AE%E4%B8%8E%E6%94%AF%E6%8C%81"></a>指引、讨论、贡献与支持</h2><p>我们 <img class="emoji" alt=":heart:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/heart-aa0a990af1ed6612e33b6344ea04b28b.png" width="14" height="14" referrerpolicy="no-referrer"> 您的贡献。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fcommunity">社区</a> 将引导您了解如何开始贡献 KubeSphere。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fcommunity%2Ftree%2Fmaster%2Fdeveloper-guide%2Fdevelopment">开发指南</a> 说明了如何安装开发环境。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.com.cn%2Fforum%2F">中文论坛</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.com.cn%2F">社区微信群（见官网底部）</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fjoin.slack.com%2Ft%2Fkubesphere%2Fshared_invite%2FenQtNTE3MDIxNzUxNzQ0LTZkNTdkYWNiYTVkMTM5ZThhODY1MjAyZmVlYWEwZmQ3ODQ1NmM1MGVkNWEzZTRhNzk0MzM5MmY4NDc3ZWVhMjE">Slack Channel</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F438908638">Bilibili</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2FKubeSphere">Twitter</a></li></ul><p>:hugs: 请将任何 KubeSphere 的 Bug、问题和需求提交到 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fissues">KubeSphere GitHub Issue</a>。</p><p><img class="emoji" alt=":heart_decoration:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/heart_decoration-c6bb912722707dbea619b810f0f9eccf.png" width="14" height="14" referrerpolicy="no-referrer"> 若您期待官方、高效的技术服务，青云科技也为 KubeSphere 开源版本提供全程可靠、小时响应的工单支持，详情垂询 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.cloud%2Fticket%2F">KubeSphere 在线技术支持</a>。</p><h2><a id="谁在使用-kubesphere" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E8%B0%81%E5%9C%A8%E4%BD%BF%E7%94%A8-kubesphere"></a>谁在使用 KubeSphere</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fcase%2F">用户案例学习</a> 列出了哪些企业在使用 KubeSphere。欢迎 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fissues%2F4123">发表评论</a> 来分享您的使用案例。</p><h2><a id="landscapes" class="anchor" href="https://gitee.com/kchstack/kubesphere#landscapes"></a>Landscapes</h2><p align="center"><br><br><img src="https://landscape.cncf.io/images/left-logo.svg" width="150" referrerpolicy="no-referrer">&nbsp;&nbsp;<img src="https://landscape.cncf.io/images/right-logo.svg" width="200" referrerpolicy="no-referrer">&nbsp;&nbsp;
<br><br>
KubeSphere 是 CNCF 基金会成员并且通过了 <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.cncf.io%2Fcertification%2Fsoftware-conformance%2F%23logos">Kubernetes 一致性认证
</a>，进一步丰富了 <a href="https://gitee.com/link?target=https%3A%2F%2Flandscape.cncf.io%2F%3Flandscape%3Dobservability-and-analysis%26license%3Dapache-license-2-0">CNCF 云原生的生态。
</a></p>]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/kubesphere</guid>
            <link>https://gitee.com/kchstack/kubesphere</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 实时数仓混沌演练实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>一、背景介绍</h1><p>目前实时数仓提供的投放实时指标优先级别越来越重要，不再是单独的报表展示等功能，特别是提供给下游规则引擎的相关数据，直接对投放运营的广告投放产生直接影响，数据延迟或者异常均可能产生直接或者间接的资产损失。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-809771304bbfbfaefda51eb5e25fc0b743f.jpg" referrerpolicy="no-referrer"></p><p>从投放管理平台的链路全景图来看，实时数仓是不可或缺的一环,可以快速处理海量数据，并迅速分析出有效信息，同时支持投放管理平台的手动控盘。实时节点事故，将可能导致整个投放链路无法正常运行，另外，投放规则引擎是自动化操作，服务需要 24 小时运行，所以需要配置及时有效的数据质量监控预警，能快速识别到波动异常或者不符合业务的数据，从而计划引入混沌工程，希望可以通过主动注入故障的方式、尽可能提前感知风险、发现潜在问题，并针对性地进行防范、加固，避免故障发生时所带来的严重后果，提高实时数仓整体抗风险能力。</p><span id="OSC_h1_2"></span><h1>二、演练范围</h1><p>为了能更细致反应出混沌演练情况，根据演练的内容不同，将实时数仓混沌分为两部分：<strong>技术侧和业务侧</strong>。</p><p><strong>技术侧混沌</strong>：基于中间件、数据库、JVM、基础资源、网络、服务等注入常见的异常，根据实际业务中梳理的应用核心场景进行混沌演练，检验系统的脆弱性和应急响应能力，从而提升团队的稳定性保障处理能力。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-cc08de52de41ac5854303f7b55939ec35ff.jpg" referrerpolicy="no-referrer"></p><p><strong>业务侧混沌</strong>：对于电商活动密集型的公司来说，各种到达率、曝光率，以及更加宏观的 GMV、用户拉新数、用户召唤数等，都能表现出业务的健康程度，在实际生活中，为了描述一种稳定状态，我们需要一组指标构成一种模型，而不是单一指标。无论是否采用混沌工程，识别出这类指标的健康状态都是至关重要的，所以要围绕它们建立一整套完善的数据采集、监控、预警机制，当业务指标发生波动较大时，我们能搞快速感知、定位、修复止血。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-f656ab86204af67698ca5e53593548d77c9.jpg" referrerpolicy="no-referrer"></p><p><strong>过往数仓混沌工程均是技术侧，此次在投放链路已搭建完成主备链路的前提下，期望通可以通过多轮业务侧混沌，提高系统整体的数据异动感知能力。</strong></p><span id="OSC_h1_3"></span><h1>三、演练计划</h1><p>工欲善其事，必先利其器，在执行混沌演练前，需要准备好前置工作，制定合理的演练 SOP、方案、计划，对演练环境、脚本、数据、工具，场景及爆炸半径等进行可能性评估，在确认可行性 ok 的情况下，约好关联方时间，再进行实践操作。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-cfdf19906836e41b5cb869b64608d799432.jpg" referrerpolicy="no-referrer"></p><p>本篇主要和大家分享基于业务侧的实时数仓混沌演练过程：</p><span id="OSC_h2_4"></span><h2>1.编写演练 SOP</h2><p>SOP 是一种标准的作业程序，就是将某一事件的操作步骤和要求，进行细化、量化及优化，形成一种标准的操作过程，关于业务侧混沌，尤其是实时数仓数据相关的演练，我们也是第一次做，目前在业界也没有找到相关的演练指导参考，处于探索阶段，为了方便项目进度的顺利进行及后续演练操作更加规范、高效，在演练前期大家经过沟通、讨论后，项目前期梳理的 SOP 演练模板，如下： <img alt="" src="https://oscimg.oschina.net/oscnet/up-b05836c213c5deb4a521e61b8d9bf67f60f.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h2_5"></span><h2>2.演练方案调研</h2><p>先收集实时数仓投放链路核心指标范围，在此基础上，拉取一段时间内的历史数据进行分析，找到每个指标对应的健康波动阀值，从而在配置相应的 DQC 规则监控，对于波动不在健康阀值的异常指标，在分钟级别（预期 15min）内及时告警，并快速排查响应。为此，在演练前期，我们经历过一系列的方案调研、探索，如下：</p><p><strong>「下文提供的方案，指标数据都是以设备激活数为例进行分析」</strong></p><ul><li><p>方案一: 按照天维度，收集最近一段时间，<strong>同一天每个整点设备激活数，占当天大盘占比</strong>，统计出最小值、最大值，作为该指标的健康波动阀值; <img alt="" src="https://oscimg.oschina.net/oscnet/up-5db6bf773388277a477d014346b562cbbc9.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案二: 按照天维度，收集一段时间内，<strong>同一天相邻整点指标波动</strong>数据找规律，比如每天上午 9 点到 10 点的波动数据，然后分别通过一系列的数学分布方法进行数据统计，从而希望找一个相对稳定的波动区间； <img alt="" src="https://oscimg.oschina.net/oscnet/up-e6acfa0ba597d5eec2b48a96608a1ded0d4.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案三: 按照天维度，收集一段时间内，<strong>相邻天整点指标波动</strong>数据找规律，比如昨天上午 9 点到前天上午 9 点的波动数据，然后分别通过一系列的数学分布方法进行数据统计，从而希望找一个相对稳定的波动区间； <img alt="" src="https://oscimg.oschina.net/oscnet/up-ec085c12fa338ea0704fef3dcc4a96d16fa.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案四:在前面三种方案的基础上，指标在工作日和周末的波动可能不一样，所以我们在日维度统计的基础上，我们也调研了<strong>周维度同比波动</strong>分布情况，比如每周一上午 9 点到上午 10 点的波动数据，然后分别通过一系列的数学分布方法进行数据统计，从而希望找一个相对稳定的波动区间； <img alt="" src="https://oscimg.oschina.net/oscnet/up-867fe3fd131a2016e25d162e0a81407fc07.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案五:同理，我们也调研了<strong>周维度环比波动</strong>分布情况，比如本周一上午 9 点到上周一上午 9 点的波动数据，然后分别通过一系列的数学分布方法进行数据统计，从而希望找一个相对稳定的波动区间； <img alt="" src="https://oscimg.oschina.net/oscnet/up-3f6117360a9087dea86b7d0a38eb7053db9.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案六：基于主备链路，在 source 源相同的情况下，经过实时数仓计算出的指标，在同一段时间两条链路 sink 出来的结果数据，正常应该是保持一致，或者波动较小，比如 10 分钟延迟的主备链路，波动不超过 10%，平均差异做到一致性做到 90% 以上。</p></li></ul><p>方案 1 到 5，都尝试过一遍，每个方案场景数据通过最大值、最小值、平均值、各百分位分布、方差、标准差等统计出来的数据分析，很难找到一个相当稳定的波动规律，也无法框定指标具体的阀值区间，实际演练过程，如果设置的波动告警阀值过大，真实生产上业务数据波动异常时，无法及时告警发现；设置过小，将导致告警频繁，对其准确性、有效性可能存在质疑，而且，实时投放的核心指标有几十个，每个指标对应的健康阀值都不一样，要收集、分析成本非常高，从演练的效果上看，也不是很明显。</p><p><strong>整体评估下来，演练主要采用的是方案六：涉及到的实时投放核心指标数共收集 29 个，一段时间内（15min），主备链路指标波动差异不超过 10%。</strong></p><span id="OSC_h2_6"></span><h2>3.演练方式</h2><p>红蓝对抗演练，将团队分为红（防）蓝（攻）两组。</p><blockquote><p>测试人员组成蓝军：负责制定混沌演练方案，执行目标系统故障注入，详细记录演练过程；</p><p>实时数仓开发为红军：负责发现故障、应急响应、排除故障，同时验证系统在不同故障场景下的容错能力、监控能力、人员响应能力、恢复能力等可靠性能力。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-f3b6dfa0fc9f4c79a51bf8dda03258b9c04.jpg" referrerpolicy="no-referrer"></p></blockquote><span id="OSC_h1_7"></span><h1>四、演练流程</h1><p>整体演练过程，大致分为三个阶段：准备阶段、攻防阶段及覆盘阶段。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-7cd2ed35bed2468d536c47d934484c34db0.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h2_8"></span><h2>1.准备阶段</h2><ul><li><p>方案准备完评审通过后，确认好链路计划；</p></li><li><p>蓝军按计划根据事先制定的攻击方案，提前准备好相应的测试数据、脚本； ‍</p></li><li><p>红军按计划根据事先制定的攻击方案，在演练前，提前确保环境可用，并进行监控防御、应急响应措施。</p></li></ul><span id="OSC_h2_9"></span><h2>2.攻防阶段</h2><ul><li><p>蓝队根据事先制定的攻击方案，模拟真实的攻击行为，按照约定的时间在演练链路（备用链路）进行攻击，进行故障注入，同时记录好相应的操作步骤，方便后续报告梳理；</p></li><li><p>红队在蓝军攻击后，通过飞书/邮件告警等通知方式实时关注监控系统运行情况，如有异常告警，需第一时间进行问题排查定位，在评估修复方案；</p></li><li><p>在攻防对抗的过程中，蓝军可根据红军的防御措施进行调整和改进攻击策略，尽力突破系统的防御并达到既定目标，同时红军也可分析蓝军的攻击手法和行为模型，不断改进防御措施来加强防御。</p></li></ul><span id="OSC_h2_10"></span><h2>3.覆盘和改进阶段</h2><ul><li><p>在混沌演练结束后，进行总结和评估，分析红队和蓝队的表现，评估系统的安全性和抗攻击能力；</p></li><li><p>总结经验教训，总结成功的防御措施和失败的攻击手法，以便于改进系统的安全策略； ‍</p></li><li><p>根据评估结果和总结经验，制定改进计划，修补系统中的漏洞和薄弱点，提升系统的抗风险能力。</p></li></ul><span id="OSC_h1_11"></span><h1>五、攻防实战</h1><p>本次演练共计有 29 个指标波动 case，整体演练操作大同小异。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-231ad23a9d169ab0aca3cc910ee770bb003.jpg" referrerpolicy="no-referrer"></p><p>以其中 case17 「召回商品收藏 uv 在某个渠道下整点波动异常」为例，<strong>具体的演练操作流程如下。</strong></p><span id="OSC_h2_12"></span><h2>1.数据准备</h2><ul><li>通过后台数据库，拉出生产主 (备) 链路，某个渠道（如<code>media_id</code> = '2'）下某个整点（如<code>hour</code> = 10）下，召回商品收藏 uv 对应的整体统计值 N。</li></ul><pre><code>--渠道小时整点维度下，商品收藏 uv 汇总数据
select
  `指标名称`,
  `日期`,
  '2' as `指标 ID`,
  `小时段`,
  sum(`指标值`)
from table_a
where
  date = date_format(now(), '%Y%m%d')
  and `指标名称` in ( '商品收藏 uv' )
  and `小时段` = 10
  AND `指标 id` = '2'
GROUP BY
  `指标名称`,
  `日期`,
  `小时段`
order by
  指标名称;
</code></pre><ul><li>拉出备用链路，某个渠道（如<code>media_id</code> = '2'）下某个整点（如<code>hour</code> = 10）下，具体的一条明细数据，记录商品收藏 uv 对应的值为 n,把 n 改为 n+0.1N,后续注入进备用链路，从而使得主备波动差异在 10%。</li></ul><pre><code>-- 明细数据
select
  t.指标名称,t.账户 id,t.计划 ID,t.设备类型,t.指标值
from
  (
    select
      `账户 id`,
      `计划 id`,
      `指标名称`,
      `指标值`,
      `设备类型` ,
      row_number() over (partition by 指标名称 order by 指标值 desc ) as rn
    from  table_a
    where
      date = date_format(now(), '%Y%m%d')
      and `指标名称` in ('商品收藏 uv')
      and `设备类型` = '召回'
      and `小时段` = 10
      AND `指标 id` = '2'
  ) t
where
  t.rn = 1
ORDER BY 指标名称;
</code></pre><ul><li>整理后得到需要注入的数据数据，见标黄部分。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-ede988eb7f5092a5961838f767529977686.jpg" referrerpolicy="no-referrer"></li></ul><span id="OSC_h2_13"></span><h2>2.故障注入 odps</h2><ul><li>将需要注入的数据导入 odps。</li></ul><p>导入前，需要在 datawork 空间中新建测试表 du_qa_dw_dev.hundun_case，用于导入演练数据</p><pre><code>-- drop table if  EXISTS du_qa_dw_dev.hundun_case;
CREATE TABLE IF NOT EXISTS hundun_case
(
    message  STRING COMMENT '消息内容'
)
COMMENT '混沌演练'
;
</code></pre><ul><li>往 du_qa_dw_dev.hundun_case 表里灌数。</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9a812903d786097d62990f612ff7aa80cac.jpg" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-46b380b575675ee1cfa3f6fb5dcfd895036.jpg" referrerpolicy="no-referrer"></p><ul><li>验证数据导入是否成功。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-f1b328461b1a5b283c4e8975019463c0d4d.jpg" referrerpolicy="no-referrer"></li></ul><span id="OSC_h2_14"></span><h2>3.odps 同步到 kafka</h2><p>执行 flink 同步脚本，将 odsp du_qa_dw_dev.hundun_case 表表数据同步到对应的 kafka topic 中。</p><p><strong>flink 任务脚本：</strong></p><pre><code>--SQL
--********************************************************************--
--odps 同步到 kakfa 脚本，用于实时数仓混沌演练异常注入使用
--********************************************************************--
-- 基本函数
CREATE FUNCTION JsonParseField AS 'com.alibaba.blink.udx.log.JsonParseField';
CREATE FUNCTION jsonStringUdf AS 'com.alibaba.blink.udx.udf.JsonStringUdfV2';
---同步账号表
CREATE TABLE `source` (
message                        VARCHAR  
) WITH (
   'connector' = 'du-odps',
  'endPoint' = '***',
  'project' = '***',
  'tableName' = 'hundun_case_01',
  'accessId' = '*******',
  'accessKey' = '*******'

);

CREATE TABLE `kafka_sink` (
  `messageKey`  VARBINARY,
  `message`  VARBINARY,
  PRIMARY KEY (`messageKey`) NOT ENFORCED
) WITH (
  'connector' = 'du-kafka',
  'topic' = '********',
   'properties.bootstrap.servers' = '*******',
  'properties.compression.type' = 'gzip',
  'properties.batch.size' = '40960',
  'properties.linger.ms' = '1000',
  'key.format' = 'raw',
  'value.format' = 'raw',
  'value.fields-include' = 'EXCEPT_KEY'
);

INSERT INTO kafka_sink
SELECT
cast(MD5(message) as VARBINARY),
cast(message as VARBINARY)
FROM source
;
</code></pre><span id="OSC_h2_15"></span><h2>4.kafka 平台查询数据</h2><p>执行完 flink 同步任务后，可通过后台查询，对应的数据是否同步成功。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-1cf077eceab902d334f7a02744f110a4ea3.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h2_16"></span><h2>5.异常注入通知</h2><p>在异常注入完成后，可以通过飞书群通知，告知红军，如收到告警，需第一时间群告知。</p><blockquote><p>蓝军：蓝军已完成数据准备，请红军在演练前确保环境 OK 且已完成规则配置，另外务必将演练时间计划及时同步通知到下游关联方；</p><p>蓝军：已完成注入。</p></blockquote><span id="OSC_h2_17"></span><h2>6.告警触发通知</h2><ul><li>红军在演练前，可通过监控平台提前配置好防御规则。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-db13e71a209e4074cce8a2bbc1a41667f5c.jpg" referrerpolicy="no-referrer"></li><li>在异常注入后，如符合预期，在 15min 内发现指标波动异常，红军需及时同步到演练群中。</li></ul><blockquote><p>中危**双链路主备一致监控</p><p>服务名：**** 环境：****** 告警时间：****** 触发条件：**双链路比对波动异常，持续 10 分钟，告警详情：指标:prd_collect_uv 主对比备下降:[-10%] 主:1066 备:956</p><p>业务域：实时数仓</p><p>应用负责人：***</p></blockquote><ul><li>如不符合预期，未在 15min 内发现指标波动异常，红军需及时定位、跟进问题，并在修复后，沟通后续演练验证修复结果。</li></ul><blockquote><p>红军：15min 内未收到告警，定位中</p><p>红军：原因已找到，由于***造成，导致告警数据没有及时发出，正在修复处理</p><p>红军：已修复，请红军重新发起攻击</p></blockquote><span id="OSC_h2_18"></span><h2>7.演练过程记录</h2><p>收集、汇总记录演练过程中的每个操作，含时间点、执行人、操作等，如下： <img alt="" src="https://oscimg.oschina.net/oscnet/up-464e3d7975b42956cc2007407a22290fcce.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h1_19"></span><h1>六、演练总结</h1><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-679f8b1b380d497f60dc055e5eb209dc097.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h1_20"></span><h1>七、未来展望</h1><p>实时数仓业务侧的混沌演练，从 0 到 1，在经过一系列的探索实践后，通过主备链路比对方式，演练期间对于异常波动的指标，可以快速识别感知，从演练结果上，取得了不错的成效，但也存在一定的局限性，如：</p><ul><li><p>演练期间，通过人工注入的异常数据，如无法快速清除，可能影响到备用链路使用。</p></li><li><p>对于没有备链路的实时指标波动，需要制定更精细化的可行方案，找寻指标健康波动范围。</p></li></ul><p>这些都需要团队进一步去探索、解决，同时在演练的过程中，我们将不断积累、丰富演练 case、完善演练库，后续计划通过引入工具（平台）、建立演练协助机制、定期定时演练等手段，使混沌演练更加自动化、规范化、常态化，提高实时数仓整体数据稳定。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-44be503ee4b17e831ef9e2fabf906b71236.jpg" referrerpolicy="no-referrer"> *文 / 袁宵</p><p>本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F" rel="nofollow" target="_blank">得物技术官网</a></p><p>未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10112796</guid>
            <link>https://my.oschina.net/u/5783135/blog/10112796</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Visopsys 0.92 发布，小型操作系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Visopsys 是一个 PC 机的操作系统，系统小型、快速而且开源。有着丰富的图形界面、抢先式多任务机制以及支持虚拟内存。Visopsys 视图兼容很多操作系统，但并不是他们的克隆版本。Visopsys 0.92 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.osnews.com%2Fstory%2F137195%2Fvisopsys-0-92-released%2F" target="_blank">发布</a>，此维护版本引入了多任务处理程序、文件系统、文本编辑器和网络程序的可用性和稳定性改进，以及许多错误修复。</span></p><p><span style="color:#000000">具体更新内容包括：</span></p><ul><li><span style="color:#000000">添加了对 64 位 EXT 文件系统的支持（read-only，和以前一样）。</span></li><li><span style="color:#000000">实施了一系列步骤来更改内核的多任务处理程序以使用软件任务切换，而不是使用处理器功能。这是添加 x86_64 版本的先决条件。</span><ol><li><span style="color:#000000">实现了 contextSwitch() 函数。</span></li><li><span style="color:#000000">添加了一个「collector」线程来完成清理已完成进程的工作，而不是在调度程序本身内进行。</span></li><li><span style="color:#000000">取消了 x86 IDT &nbsp;task gates 的使用，并删除了多任务程序的调度程序进程并将其转换为中断处理程序。</span></li></ol></li><li><span style="color:#000000">更新了「edit」文本编辑器程序以添加「New」和「Save As」菜单项，使其更符合其他编辑器使用的惯例。当在没有文件名的情况下调用或创建「New」文档时，「Save」菜单项将被禁用。停止为未保存文档使用临时文件。</span></li><li><span style="color:#000000">添加了一个窗口库「cancel」对话框，用于停止正在进行的操作。</span></li><li><span style="color:#000000">由于通过 TCP 连接可能会阻塞相当长的时间，因此网络程序现在使用可以通过新的「cancel」对话框终止的连接线程。</span></li><li><span style="color:#000000">为数据包嗅探器添加了过滤（例如仅 TCP、仅 ARP 等）。默认情况下，显示所有网络数据包。左侧面板底部的一个新按钮将弹出一个对话框窗口，允许用户（取消）选择要显示的各种类型的数据包。</span></li><li><span style="color:#000000">添加了「errno」程序来打印与错误代码相关的错误消息。</span></li><li><span style="color:#000000">更新了内核的 MD5 hashing 函数以（正确）匹配更现代的 SHA1 和 SHA256 代码的用法和行为。</span></li><li><span style="color:#000000">删除了「md5」程序，并将其替换为「md5pass」和「md5sum」程序，分别用于 hashing 字符串和文件。</span></li><li><span style="color:#000000">在 kernelFile.c 中的 freeEntries 列表中添加了一个锁。</span></li><li><span style="color:#000000">在目录 fileEntry 结构中添加或删除条目列表时添加了锁定。</span></li><li><span style="color:#000000">添加了标准 C 库函数 strndup()。</span></li><li><span style="color:#000000">向 C 库添加了全局错误字符串表，并将 strtol() 和 family 的定义从 &lt;stdio.h&gt; 移至 &lt;stdlib.h&gt;。</span></li><li><span style="color:#000000">更改了「test」程序的 file_ops 测试以在 /temp 中创建其临时目录，以便即使在只读启动磁盘上它也可以默认工作。</span></li><li><span style="color:#000000">已修复：VmWare 虚拟 SATA 磁盘的 SATA 驱动程序问题。初始磁盘枚举期间 SATA AHCI DMA 模式设置出错。</span></li><li><span style="color:#000000">已修复：创建缩略图或单击多个图像时 Jpeg 加载和/或调整图像大小的问题。在许多情况下，创建了缩略图，但&nbsp;View 程序在加载缩略图时会报错。</span></li><li><span style="color:#000000">已修复：从只读文件系统 (CD) 启动时，按 PrtScn 可能会导致页面错误，并在控制枱上显示错误消息，显示「文件系统是只读的」和「无法打开 [文件] 进行写入」。</span></li><li><span style="color:#000000">已修复：当从只读介质/磁盘（例如 CD/DVD）启动时，单击程序窗口中的文本编辑器时，会显示错误对话框「Error -11 loading fil」。</span></li><li><span style="color:#000000">已修复：挂载新文件系统时，它会出现在目录列表中按字母顺序排序的其他项目之前。最近安装的文件系统始终作为其安装点父目录中的第一个条目插入，因为尚未设置文件名。</span></li><li><span style="color:#000000">已修复：内核 API 在 high 32 bits 中返回不正确的 64 位值。例如，「ls」命令显示的空闲字节值和「ping」命令显示的时间值显然是错误的。</span></li><li><span style="color:#000000">已修复：尝试遍历空窗口容器可能会导致「Can’t allocate zero bytes」错误被记录到控制枱，例如在首次启动屏幕上切换语言后。</span></li><li><span style="color:#000000">修复了使用「clang」编译器构建时产生的一些警告。</span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259188/visopsys-0-92-released</guid>
            <link>https://www.oschina.net/news/259188/visopsys-0-92-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IntelliJ IDEA 2023.3 EAP 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#19191c">第一个 IntelliJ IDEA 2023.3 EAP 版本现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F09%2Fintellij-idea-2023-3-eap%2F" target="_blank">发布</a>，此版本提供了一系列 UI/UX 增强功能和对 GitLab snippets 的支持，以及对索引过程和 IDE 启动速度的改进。</span></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>用户体验</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>在 default viewing 模式下隐藏主工具栏的选项</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>提供了一个选项，可以在使用 IDE 的 default viewing 模式时隐藏主工具栏，与在旧 UI 中一样。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b7dc9e77ae4c9a387497b2b1aaed16f8342.gif" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>默认工具窗口布局选项&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>随着 IntelliJ IDEA 2023.1 的发布，引入了保存多个工具窗口布局并在它们之间切换的功能，从而增强了工作区的可定制性。在第一个 IntelliJ IDEA 2023.3 EAP 版本中，通过引入「Default layout」选项来扩展此功能，该选项提供了一种将工作区的外观恢复为其默认状态的快速方法。此布局不可自定义，可通过 Window | Layouts 访问。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img height="453" src="https://oscimg.oschina.net/oscnet/up-e2d257524a8a33a36598782f371f51a2102.png" width="1124" referrerpolicy="no-referrer"></p><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>默认情况下编辑器选项卡的彩色编码高亮显示</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>为了增强用户在编辑器中同时处理多种文件类型时的导航体验，此版本为编辑器选项卡引入了默认的彩色编码高亮显示，与项目工具窗口中的显示效果一致。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="201" src="https://oscimg.oschina.net/oscnet/up-c98835bb1dc0b2b4af3bfa4ebfcdcafe2fb.png" width="500" referrerpolicy="no-referrer"></p><p><img height="202" src="https://oscimg.oschina.net/oscnet/up-d022110fecd232c86aa85a82ece1086e4f5.png" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h3 style="margin-left:0; margin-right:0"><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>macOS 的新产品图标&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></h3></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>随着 IntelliJ IDEA 2023.3 EAP 的发布，重新设计了适用于 macOS 的 IntelliJ IDEA 图标，使其符合操作系统的标准样式指南。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img height="200" src="https://oscimg.oschina.net/oscnet/up-72677c825eb94ddada25bae58e9e2446b46.png" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>Java</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>Java 21 支持</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此版本已经成功集成了对最新<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fprojects%2Fjdk%2F21%2F" target="_blank">Java 21</a>功能的支持。包括虚拟线程、记录模式、<code>switch</code>表达式的模式匹配和序列集合等重要新增功能，以及字符串模板、作用域值等新引入语言功能的预览。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="200" src="https://oscimg.oschina.net/oscnet/up-a93c5663612262c7296f7bdd9744894e4cd.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" height="200" src="https://oscimg.oschina.net/oscnet/up-f85dd5121e4880c4e77bc8598b7d675c9cf.gif" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><img height="200" src="https://oscimg.oschina.net/oscnet/up-0de0b47d00eb8fd6847932d699311a2b003.png" width="500" referrerpolicy="no-referrer"></h4><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>版本控制系统</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>支持 GitLab snippets</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>为了扩展 IntelliJ IDEA 2023.2 版本中引入的&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fblog%2F2023%2F07%2F26%2Fgitlab-support-in-jetbrains-ide%2F" target="_blank">GitLab 集成</a>，此版添加了对<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gitlab.com%2Fee%2Fuser%2Fsnippets.html" target="_blank">GitLab snippets</a>的支持。用户现在可以直接在 IDE 中创建公共或私有代码片段。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5825979606f6bf31e3bc766b85211395910.gif" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>Performance</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>默认启用共享 JDK 索引的下载&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>IntelliJ IDEA 将在后台无缝连接到专用资源，自动获取并应用 JDK 的共享索引。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>有关此 EAP 版本中的更改的完整列表，可阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Farticles%2FIDEA-A-2100661680%2FIntelliJ-IDEA-2023.3-EAP-1-233.6745.305-build-Release-Notes" target="_blank">发行说明</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259186/intellij-idea-2023-3-eap</guid>
            <link>https://www.oschina.net/news/259186/intellij-idea-2023-3-eap</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[华为开源 openInula 前端框架，兼容 React API 和生态]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">lnula（发音为：[ˈɪnjʊlə]）。openInula 是一款用于构建用户界面的 JavaScript 库，提供响应式 API 帮助开发者简单高效构建 web 页面，比传统虚拟 DOM 方式渲染效率提升 30% 以上！同时 InulaJS 提供与 React 保持一致的 API，并且提供 5 大常用功能丰富的核心组件：状态管理器、路由、国际化、请求组件、应用脚手架，以便开发者高效、高质量的构筑基于 InulaJS 的前端产品。</p><h2 style="margin-left:0; margin-right:0; text-align:left">技术架构</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://static.oschina.net/uploads/img/202309/23073740_6lHO.png" referrerpolicy="no-referrer"></p><h3 style="margin-left:0; margin-right:0; text-align:left">核心能力</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>响应式 API</strong></p><ul><li>openInula 通过最小化重新渲染的范围，从而进行高效的 UI 渲染。这种方式避免了虚拟 DOM 的开销，使得 openInula 在性能方面表现出色。</li><li>openInula 通过比较变化前后的 JavaScript 对象以细粒度的依赖追踪机制来实现响应式更新，无需用户过度关注性能优化。</li><li>简洁 API：
<ol style="list-style-type:lower-roman"><li>openInula 提供了两组简洁直观的 API--响应式 API 和与 React 一致的传统 API，使得开发者可以轻松地构建复杂的交互式界面。</li><li>openInula 简洁的 API 极大降低了开发者的学习成本，开发者使用响应式 API 可以快速构建高效的前端界面。</li></ol></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>兼容 ReactAPI</strong></p><ul><li>与 React 保持一致 API 的特性、可以无缝支持 React 生态。</li><li>使用传统 API 可以无缝将 React 项目切换至 openInula，React 应用可零修改切换至 openInula。</li></ul><h3 style="margin-left:0; margin-right:0; text-align:left">openInula 配套组件</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>状态管理器/inula-X</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-X 是 openInula 默认提供的状态管理器，无需额外引入三方库，就可以简单实现跨组件/页面共享状态。 inula-X 与 Redux 比可创建多个 Store，不需要在 Reducer 中返回 state 并且简化了 Action 和 Reducer 的创建步骤，原生支持异步能力，组件能做到精准重渲染。inula-X 均可使用函数组件、class 组件，能提供 redux 的适配接口及支持响应式的特点。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>路由/inula-router</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-router 是 openInula 生态组建的一部分，为 openInula 提供前端路由的能力，是构建大型应用必要组件。 inula-router 涵盖 react-router、history、connect-react-router 的功能。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>请求/inula-request</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-request 是 openInula 生态组件，涵盖常见的网络请求方式，并提供动态轮询钩子函数给用户更便捷的定制化请求体验。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>国际化/inula-intl</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">lnula-intl 是基于 openInula 生态组件，其主要提供了国际化功能，涵盖了基本的国际化组件和钩子函数，便于用户在构建国际化能力时方便操作。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>调试工具/inula-dev-tools</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-dev-tools 是一个为 openInula 开发者提供的强大工具集，能够方便地查看和编辑组件树、管理应用状态以及进行性能分析，极大提高了开发效率和诊断问题的便捷性。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>脚手架/inula-cli</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">lnula-cli 是一套针对 openInula 的编译期插件，它支持代码优化、JSX 语法转换以及代码分割，有助于提高应用的性能、可读性和可维护性。</p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 23:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/openinula</guid>
            <link>https://www.oschina.net/p/openinula</link>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 23.10 Beta]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Ubuntu 23.10 "Mantic Minotaur" 首个 Beta 已发布，正式版计划于 10 月 12 日推出。</p><p>下载地址：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Freleases.ubuntu.com%2F23.10%2F" target="_blank">https://releases.ubuntu.com/23.10/</a></u></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-541beee395c5d41cd656c0e10c9a6540913.png" referrerpolicy="no-referrer"></p><p><strong>主要变化</strong></p><ul><li>内核采用最新的 Linux 6.5 系列</li><li>默认启用多代 LRU 页面回收</li><li>支持 idmapped Ceph 挂载</li><li>桌面环境采用 GNOME 45</li><li>使用 Wayland 时默认启用原生 Wayland 模式会话，以获得更快的浏览体验</li><li>支持基于 TPM 的全磁盘加密</li><li>预装采用 Flutter 编写的全新应用商店 "App Center"</li><li>使用 Netplan 作为 NetworkManager 的默认设置存储后端</li></ul><p>此前曾报道过上文提到的部分变化：</p><ul><li><a href="https://www.oschina.net/news/258253/ubuntu-23-10-zfs-install" target="_blank">Ubuntu 23.10 安装工具恢复支持 ZFS 文件系统</a></li><li><a href="https://www.oschina.net/news/257464/ubuntu-23-10-tpm-fde" target="_blank">Ubuntu 23.10 支持基于 TPM 的全磁盘加密</a></li><li><a href="https://www.oschina.net/news/247869/ubuntu-23-10-new-app-store-deb-support" target="_blank">Ubuntu 23.10 引入新的「应用商店」，优先支持 Snap 格式</a></li><li><a href="https://www.oschina.net/news/256910/gnome-45-arrives-in-ubuntu-23-10" target="news">Ubuntu 23.10 每日构建版已搭载 GNOME 45</a></li><li><a href="https://www.oschina.net/news/250357/ubuntu-noto-fonts-change" target="_blank">Ubuntu 23.10 调整字体包，将 DejaVu 替换为 Noto</a></li><li><a href="https://www.oschina.net/news/255590/ubuntu-23-10-no-gimp-3-0" target="_blank">Ubuntu 23.10 不会预装 GIMP 3.0 测试版</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 10:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259137/ubuntu-23-10-beta-released</guid>
            <link>https://www.oschina.net/news/259137/ubuntu-23-10-beta-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[低代码引擎 TinyEngine 正式发布！！！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-889246aad04bcf78bd25d07144ac7a00325.png" alt="" referrerpolicy="no-referrer"> 在当今数字化飞速发展的时代，企业对高效、敏捷的应用程序需求日益旺盛。为了满足这一需求，越来越多的低代码开发平台开始涌现。这些平台通过提供简单易用的开发工具和优化后的开发流程，帮助开发者快速构建高质量、可重复使用的应用程序，同时降低了开发的难度和成本，提高了开发效率和灵活性。这些低代码开发平台的出现，无疑为企业的数字化转型提供了更快速、更高效的方法，也将推动整个软件开发行业的进步。</p><h2>TinyEngine 项目介绍</h2><p>随着企业对于低代码开发平台的需求日益增长，急需一个通用的解决方案来满足各种低代码平台的开发需求。正是在这种情况下，低代码引擎应运而生。它是一种通用的开发框架，通过对低代码平台系统常用的功能进行解构，将其划分为多个功能模块，并为每个模块定义了相应的协议和开发范式，使得开发者可以根据自身的业务需求，轻松定制开发出自己的低代码开发平台。</p><p>随着企业对于低代码开发平台的需求日益增长，急需一个通用的解决方案来满足各种低代码平台的开发需求。正是在这种情况下，低代码引擎应运而生。它是一种通用的开发框架，通过对低代码平台系统常用的功能进行解构，将其划分为多个功能模块，并为每个模块定义了相应的协议和开发范式，使得开发者可以根据自身的业务需求，轻松定制开发出自己的低代码开发平台。</p><p><img src="https://oscimg.oschina.net/oscnet/up-eafd0400a47b2223f7736ca1f815f5931b7.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 提供了低代码底层能力，并集成了人工智能，从而使用户能够高效开发。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 具有强大的拖拽功能，无论是图元还是复杂组件，都能在画布上带来流畅的体验。它适用于多场景的低代码平台开发，包括资源编排、流程编排、服务端渲染、模型驱动、移动端、大屏端以及页面编排等低代码平台。</p><h3>架构</h3><p><img src="https://oscimg.oschina.net/oscnet/up-9987cd6c7d0245549bcf11fca5ea1e97da5.png" alt="" referrerpolicy="no-referrer"></p><h3>核心亮点</h3><ul><li><strong>可以定制开发低码平台</strong>。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 采用灵活的系统架构，其出色的整体架构提供了高度的自定义自由度，使用户能够像搭建积木一样选择不同的模块来构建自己的专属设计器。此外，插件化的架构使得用户可以方便地扩展与业务相关的功能。 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 中，插件根据位置大致分为三类：toolbars/plugins/settings，分别对应顶部区域、左侧区域和右侧区域。toolbars 插件主要偏向于无需 UI 或者 UI 较为简单的工具插件，plugins 是业务功能插件，显示在左侧 (或下方) 抽屉页面，可以通过点击进行展开收起或切换。这些功能都像是独立的积木块，用户可以选择性地保留或删除。同时，用户也可以开发自己的插件或工具，并将其安装到对应的位置。<strong>TinyEngine 的灵活性极强，用户可以自由地决定他们想要开发什么样的低代码平台。</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 提供了一套完善的插件体系，涵盖了插件开发所需的基础 UI 库、工具库、插件面板的显示控制、生命周期管理、公共 API 注册与共享等。这一体系使得开发者只需遵循简单的规范，即可快速开发出业务所需的插件，从而极大地提高了开发效率和灵活性。通过使用 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 提供的插件体系，开发者可以更加轻松地管理和维护复杂的插件生态系统，同时降低维护成本。总之，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 的插件体系为开发者提供了一个全面、高效、灵活的开发平台，使得快速开发出高质量的插件成为可能。</p><p>插件开发需要遵循一定的开发规范，主要是文件规范与导出规范：</p><p>1、文件规范，必须包含下面几个文件</p><pre><code class="language-js">pluginProject
- src 插件源码
- index.js 注册插件入口，需要导出约定的数据结构
- package.json
</code></pre><p>2、导出规范， index.js 文件需要导出一个对象来声明基础信息</p><pre><code class="language-js"> import component, { api } from './src/Main.vue'
 
 export default {
          id: 'pluginId', // 插件 id
          title: 'pluginName', // 插件名
          icon: 'js', // 插件 icon
          align: 'top', // 插件位置，左侧插件可选值：'top' | 'bottom'  工具栏可选值：'right' | 'center' | 'left'
          component, // 插件面板打开时渲染的组件
          api, // 插件暴露的 api，可以提供给其他插件调用
        }
</code></pre><p>在此基础上就可以按照业务需要自由开发相关逻辑代码。</p><p>3、最后在 addons.js 插件配置文件中引入，就完成一个完整的插件开发了。</p><pre><code class="language-js">import Materials from '@xxxx/lowcode-plugin-materials'

        export default {
          plugins: [
            Materials,
            // ...
          ],
          toolbars: [
            // ...
          ],
          settings: [
            // ...
          ],
        }
</code></pre><p>（ps:我们呼吁用户把开发的插件包开源，共建 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 的生态。）</p><ul><li><strong>TinyEngine 有开放的物料协议和扩展接口。</strong> &nbsp;</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 低代码引擎默认的物料来源于华为云开源组件库 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fdocs%2Fchangelog" target="_blank">TinyVue</a>，该组件库拥有丰富的组件和强大的功能。并且实现了跨端垮技术栈，同时支持 vue2 和 vue3。即使业务系统使用其他组件库，也无需切换，得益于 TinyEngine 强大的开放物料设计，可直接导入第三方组件库，例如 elementUI 和 AntDesign 等。引擎底层技术架构采用 webcomponent 技术，因此支持 Vue、React 和 Angular 等不同技术栈的组件或区块。<strong>用户可以自由选择所需的组件库并导入使用</strong>。</p><p>导入第三方组件库，找到 runner.js 物料文件。然后参照默认物料 @opentiny/vue 即可，主要修改以下地方：</p><pre><code class="language-js">// 全量导入 UI 组件库
import UI from '@xxxx/UI'

Object.entries(UI).forEach(([key, component]) =&gt; {
   const { name } = component
   if (name) {
   window.TinyLowcodeComponent[name] = component
   }
  })

// 导入某个组件库里面的单个组件
 import { button } from '@xxxx/UI'

window.TinyLowcodeComponent[name] = button
</code></pre><p>通过导入第三方组件库，用户可以在低代码平台中使用这些组件库来开发应用程序。除了导入组件外，用户还需要通过 bundle.json 文件来描述导入的组件所暴露出来的事件和属性。这样，用户可以在应用程序中使用这些组件，并通过 bundle.json 文件来了解和使用组件的事件和属性。这是一个非常方便和灵活的功能，使得用户可以自由地使用和定制他们所需的组件，从而快速开发出高质量的应用程序。</p><pre><code class="language-json"> // 以下 JSON 为节选按钮暴露的属性
        {
          "schema": {
            "type": "object",
            "properties": {
              "size": {
                "title": "定义按钮尺寸",
                "type": "string",
                "enum": ["large", "medium", "small", "mini"],
                "enumNames": ["较大尺寸", "中等尺寸", "较小尺寸", "迷你尺寸"],
                "default": ""
              },
              "text": {
                "title": "设置按钮显示的文本",
                "type": "string",
                "default": ""
              }
            },
            "events": {
              "onClick": {
                "label": {
                  "zh_CN": "鼠标单击时触发",
                  "en_US": "Triggered on mouse click"
                },
                "description": {
                  "zh_CN": "鼠标单击时触发的回调函数"
                },
                "type": "event",
                "defaultValue": ""
              }
            }
          }
        }
</code></pre><ul><li><strong>TinyEngine 支持自定义 DSL 生成定制的源代码。</strong></li></ul><p>相对于在运行时由平台提供渲染引擎的方式，这种方式能够为用户提供更多的自主权和安全性。用户可以自由地定义自己的 DSL，并根据需要生成定制化的源代码，从而更加灵活地控制应用程序的行为和性能。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a49a7815e0e7252136772b0fcb2daf2f5ca.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 默认生成 Vue 的源代码。当页面编排完成后，会生成一个包含页面信息的 schema。DSL 通过便利递归等方法，从中生成源代码。如果技术栈是 Angular 或 React，用户可以完全开发一个 Angular 或 React 的 DSL，从而生成一个新的源代码工程。用户可以根据自己的需求定制生成源代码的方式，这是一个非常灵活和强大的功能，使得 TinyEngine 可以适应不同的技术栈和需求，从而更加广泛地应用于各种应用程序的开发。</p><p>如果你想开发其他技术栈的 DSL，那么一定要对<strong>页面协议</strong>比较熟悉。</p><pre><code class="language-js">interface&nbsp;IPageSchema&nbsp;{&nbsp;//&nbsp;页面&nbsp;或&nbsp;区块&nbsp;schema  
&nbsp;&nbsp;fileName?:&nbsp;string;&nbsp;//&nbsp;页面名称，schema&nbsp;是页面时使用  
&nbsp;&nbsp;componentName?:&nbsp;string;&nbsp;//&nbsp;组件名，schema&nbsp;是页面时值为&nbsp;"Page"  
&nbsp;&nbsp;blockName?:&nbsp;string;&nbsp;//&nbsp;区块名，schema&nbsp;是区块时使用  
&nbsp;&nbsp;id:&nbsp;string;  
&nbsp;&nbsp;css?:&nbsp;string;&nbsp;//&nbsp;页面全局样式  
&nbsp;&nbsp;props?:&nbsp;{&nbsp;//&nbsp;组件绑定的属性  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[prop:string]?:&nbsp;any;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style?:&nbsp;string;&nbsp;//&nbsp;行内样式  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;className?:&nbsp;string;&nbsp;//&nbsp;绑定的样式类名  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lifeCycles?:&nbsp;{&nbsp;//&nbsp;生命周期  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[prop:string]?:&nbsp;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;'js';&nbsp;//&nbsp;固定值  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source:&nbsp;string;&nbsp;//&nbsp;函数字符串  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  
&nbsp;&nbsp;children?:&nbsp;Array&lt;&nbsp;IComponentSchema&nbsp;&gt;&nbsp;|&nbsp;string;&nbsp;//&nbsp;子组件列表&nbsp;或&nbsp;文本字符串  
&nbsp;&nbsp;dataSource?:&nbsp;{&nbsp;//&nbsp;数据源  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list:&nbsp;Array&lt;&nbsp;IDateSource&nbsp;&gt;&nbsp;//&nbsp;数据源列表  
&nbsp;&nbsp;};  
&nbsp;&nbsp;actions?:&nbsp;{&nbsp;//&nbsp;页面&nbsp;JS  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source:&nbsp;string;&nbsp;//&nbsp;页面定义的&nbsp;JS&nbsp;源码字符串  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;"FUNCTION";&nbsp;//&nbsp;固定值  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list:&nbsp;Array&lt;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;string;&nbsp;//&nbsp;页面所定义的函数名  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;string;&nbsp;//&nbsp;配置时显示名称&nbsp;与&nbsp;id&nbsp;一致  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&gt;  
&nbsp;&nbsp;};  
&nbsp;&nbsp;bridge?:&nbsp;{&nbsp;//&nbsp;桥接  
&nbsp;&nbsp;imports?:&nbsp;Array&lt;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string;&nbsp;//&nbsp;配置时显示名称  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;"package"&nbsp;|&nbsp;"local";&nbsp;//&nbsp;package:&nbsp;npm&nbsp;包;&nbsp;local:&nbsp;本地文件  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;string;&nbsp;//&nbsp;导入的路径 (包名或者本地路径)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item:&nbsp;string;&nbsp;//&nbsp;导入的项目  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useDefault?:&nbsp;boolean;&nbsp;//&nbsp;是否默认导出  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance?:&nbsp;string;&nbsp;//&nbsp;实例名，需要注入 service 时需要添加该字段，typescript&nbsp;模式下使用  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&gt;  
&nbsp;&nbsp;};  
&nbsp;&nbsp;inputs:&nbsp;Array&lt;{&nbsp;//&nbsp;页面接口：输入类型  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string;&nbsp;//&nbsp;输入属性名称  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;string;&nbsp;//&nbsp;数据类型声明  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultValue?:&nbsp;any;&nbsp;//&nbsp;默认值  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&gt;;  
&nbsp;&nbsp;outputs:&nbsp;Array&lt;{&nbsp;//&nbsp;页面接口：事件输出  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string;&nbsp;//&nbsp;typescript 类型声明  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;string;&nbsp;//&nbsp;数据类型声明  
&nbsp;&nbsp;}&gt;;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema?:&nbsp;IComponentMetaSchema&nbsp;//&nbsp;区块时使用，区块需要暴露的组件属性元数据  
&nbsp;&nbsp;}
</code></pre><p>对于需要被搜索引擎爬虫 SEO 的用户，也可以用服务端 SSR 的解决方式。这种方案也可以用来快速查看自己编辑的页面。</p><pre><code class="language-js"> // 伪代码
 function render(_schema) {
  let _arr = []
  _schema.forEach((item) =&gt; {
    let componentName = item.componentName
    if (item.children &amp;&amp; item.children.length) {
      _arr.push(
        h(componentName, item.props, [
          item?.props?.text,
          render(item.children),
        ]),
      )
    } else {
      const text = item?.props?.text || ''
      _arr.push(h(componentName, item.props, text))
    }
  })

  return _arr
}
</code></pre><ul><li><strong>TinyEngine 支持高低代码混合开发。</strong></li></ul><p>高低代码混合开发可以更好地满足业务需求。在企业的应用开发中，往往需要面对快速变化的业务需求，此时，如果全部采用低代码方式进行开发，则可能会因为代码的复杂性而无法快速适应变化。而如果采用高低代码混合的方式，则可以通过低代码进行常规业务的快速开发，对于特殊的业务逻辑，则由专业开发人员通过高代码进行实现，这样就可以更好地满足业务需求的变化。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 在构建应用程序的过程中，提供了下载源代码的功能，使得用户可以在线下进行复杂业务逻辑的调试。这一特点极大地便利了开发者的操作，减少了在线调试和测试的时间和资源消耗，同时也提高了代码的质量和可靠性。通过下载源代码进行调试，用户可以更加灵活地控制应用程序的行为和性能，从而更好地满足业务需求。总之，TinyEngine 的这一特点为用户提供了更多的自主权和灵活性，使得他们可以更加高效地控制应用程序的行为和性能。</p><ul><li><strong>TinyEngine 支持 AI 辅助开发。</strong> &nbsp;</li></ul><p>低代码平台与 AI 的结合具有巨大的发展潜力。这种结合可以在很大程度上提高非专业开发者的开发效率和应用智能化水平。随着 AI 技术的不断发展和低代码平台的不断成熟，二者的结合将会在更多领域内实现更高效、更智能的业务流程和管理模式，带来更大的商业价值。</p><p>低代码平台通过提供易于使用的开发工具和预先构建的模块，简化了应用程序的开发过程。AI 技术则可以帮助应用程序具备更智能、更自适应的特性。通过低代码平台和 AI 的结合，开发者可以更快速、更高效地构建应用程序，并实现更智能化的应用特性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3acfa3b07927729dbdd65990716f506f4e0.gif" alt="" referrerpolicy="no-referrer"></p><h2>企业关于低代码的需求</h2><ul><li><h3>PDM 元数据电子审批流</h3></li></ul><p>审批流业务场景是现代企业运营中不可或缺的一环。业务流程从某个特定点开始，然后经过一系列的审批节点，完成流程的审批。这些节点通常由不同级别的人员担任，例如主管、经理、财务、法务和总经理等，每个人都扮演着特定的角色和职责。</p><p>假设场景如下：流程发起人 A 启动了一个电子审批流程。这个流程首先会被传递到主管进行审批。在审批过程中，主管会仔细检查初始业务流程信息和其他相关数据，然后决定是否进一步推进流程，或退回给 A 进行修订。如果主管批准了这个流程，那么它将被移交给下一级审批人，也就是经理。在经理的审批环节，他/她也会详查相关数据和信息，并基于这些以及自己的独立判断来做出决策。值得注意的是，尽管经理可以查看到主管填写的一些技术信息，但这些信息并不对财务和法务公开。也就是说，只有经理和总经理可以看到这些技术信息，财务和法务无法获知。经理会根据这些保密信息以及自己的专业判断来决定是否继续推进流程。</p><p>如果经理也批准了该流程，那么它将被送至财务节点进行审批。在审批过程中，财务主要关注经济相关的问题，例如价格、付款方式等等。一旦财务审批通过，流程会被移交给法务进行审批。</p><p>与财务审批类似，法务审批主要关注法律风险和合规性问题。在审批时，法务会仔细检查相关的合同、协议等法律文件，并评估是否存在任何法律风险或合规性问题。一旦法务批准了流程，流程将被移交给总经理进行最后的审批，以完成整个审批流程。 <img src="https://oscimg.oschina.net/oscnet/up-9fc0999e0fce89328d824f66ddf847869ac.png" alt="" referrerpolicy="no-referrer"> 需要注意的是，这种审批流业务场景并不是只有一个，而是有很多个。例如，除了上述的采购流程，还有其他业务流程需要进行审批，比如：数据入库流程、报价流程等等。每个流程都有自己的特点和审批节点数量不一。有些流程可能只需要两三个节点就可以完成审批，有些则可能需要十几个节点才能完成。但是，所有类型的审批流大致相似。如：页面上常见的元素包括表单、表格以及常用的审批组件等。</p><p><strong>技术分析：</strong> 若采用传统的开发方式，每当新增一种流程时，前端开发人员都需要开发所有审批节点的审批页面，并重新进行发布流程。同样地，服务端开发人员也需要重新建立一个审批流，通过特定页面录入各节点审批人，并编写相应的审批流规则。显然，这对于前端和服务端开发人员来说都是十分繁琐的工作。</p><p><strong>解决方案：</strong> &nbsp;基于 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 低代码引擎，开发出一个专为电子审批流设计的低代码平台。然后，将所有与流程相关的组件，如模板、评审记录和流程指引等导入到平台的物料区域。最后，将这个专注于开发审批流的低代码平台集成到 PDM 元数据电子流业务模块中。在低代码平台上，想要开发任意一个流程的审批页面，只需要将流程模板拖入，并在模板中嵌入本流程的表单或表格，即可轻松完成该节点的审批页面，极大地提高了开发效率和便利性！ 服务端也将采用另一种特定于 flow 类型的低代码平台（将在后续内容中详细介绍），以实现对审批流程人员编排。这样，前后端之间的连接就实现了完美的贯通。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a11ab19ac7c4e4cc0c06599cea2390308c9.png" alt="" referrerpolicy="no-referrer"></p><ul><li><h3>Flow 图元编排类型设计器</h3></li></ul><p>图形编排在众多场景中扮演着重要角色，例如流程图、审批流、部署流水线和架构图等。资源编排只是编排的主体变成了云服务资源。</p><p>资源编排遵循基础设施即代码（Infrastructure as Code, IaC）的设计理念，资源编排与以往单独管理每种云服务资源的方式有所不同。通过资源编排设计器，用户无需手动创建多个资源，只需在平台上使用设计器进行拖拽和配置，即可生成模板，并一键部署多个资源。这样，用户可以更加高效地管理和编排云服务资源，提高资源的利用率和部署速度。</p><p>因此，针对资源编排服务场景，我们需要定制一个专用的低代码平台来满足用户的需求。该平台将具备图形化界面，允许用户通过简单的拖拽和配置来创建、修改和删除资源编排模板，而无需编写大量的代码。此外，该平台还将支持一键部署功能，以快速部署多个资源，提高资源编排的效率和速度。</p><p>考虑到需要支持大量的云服务资源，且每个云服务资源需要配置的属性各不相同，因此采用传统开发方式为每种云服务资源开发专门的属性设置页面是不可行的。因此，我们需要一个能够自定义渲染的属性配置方案。通过自定义渲染，用户可以根据不同的云服务资源类型和属性，自由地定义和控制属性页面的交互效果，从而提高属性配置的灵活性和可扩展性。</p><p>同时模板是极为重要的一环，它直接关系到最终资源的部署。因此，模板需要符合特定的标准格式，这就要求画布和属性面板的输入必须能够准确反映到最终的模板中。</p><p>整理出主要的述求：</p><ul><li>整个页面应至少包含以下几部分：资源列表、画布和属性设置面板</li><li>画布应具备核心的拖拽和连线绘图功能，以支持用户直观地进行资源编排</li><li>属性设置面板需要支持自定义配置渲染，以满足不同云服务资源类型和属性的配置需求</li><li>该平台应具备可拓展性，以支持开发出其他能力，满足未来可能出现的新的编排需求</li></ul><p>在分析了上述需求后，我们可以清楚地看到，使用传统开发方式将面临巨大的工作量和现实的实现困难。同时，经过对比发现，资源编排设计器和低代码设计器之间有许多相似之处，例如它们都涉及基础资源、拖拽操作和配置功能，只是在画布区域存在差异。</p><p><strong>解决方案：</strong> TinyEngine 作为一个出色的低代码引擎，通过优秀的整体架构提供了高度自由的定制能力。它允许我们像搭积木一样选择不同的积木来搭建一个专属的设计器。同时，属性面板全部通过 JSON 配置文件进行渲染，无需编写任何代码，灵活而强大。这种开发方式可以大大降低开发成本，提高效率。 该设计器的布局类似于 VS Code，核心模板与功能区域划分清晰明了，易于上手。插件化的架构也使得自由拓展业务相关功能变得轻而易举。 综上所述，我们最终决定使用 TinyEngine 来开发图元编排设计器，以满足资源编排的需求。</p><p><img src="https://oscimg.oschina.net/oscnet/up-83884bfe0dc60af97c83a8fcd38fb3980d5.png" alt="" referrerpolicy="no-referrer"></p><ul><li><h3>其他业务类型的低码平台诉求</h3></li></ul><p>1，跨境电商的低代码平台，旨在方便商家快速装修店铺。商家只需要从平台提供的模板中选择一套适合自己的商品模板，并进行文字和图片的修改，即可快速建立自己的电商网站。此外，该平台还需要具备方便搜索引擎优化（SEO）的功能，让商家的电商网站更容易被潜在客户发现。</p><p>2，随着移动互联网的迅速普及，各种应用程序推送消息的需求日益增长。在这个背景下，APP 厂商只需要使用推送消息平台提供的模板，并简单配置一下推送内容和样式，即可轻松实现消息推送。</p><p>3，运维管理平台是针对企业运营过程中涉及的各种数据和页面进行管理的工具。随着企业运营数据的不断增加，页面变得越来越复杂。其实不同的岗位对于关心的信息也不尽相同。低代码平台的应用可以让不同岗位的员工通过简单的拖拽操作，轻松获取自己需要的数据和信息。这种方式不仅可以提高工作效率，而且还可以降低操作难度，使得更多人可以轻松上手使用。</p><h2>未来展望</h2><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 专注于为用户提供低代码的基础能力，目前正致力于跟生成式 AI 相结合，与用户共同打造面向未来的应用。</p><h2><strong>其他说明</strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-82d36f2d7d034985e744c65d9c21470bba8.png" alt="" referrerpolicy="no-referrer"></p><p>OpenTiny&nbsp;是一套企业级 Web 应用构建解决方案，提供跨端、跨框架的 UI 组件库，适配 PC 端 / 移动端等多端，支持&nbsp;Vue2 / Vue3 / Angular&nbsp;多技术栈，拥有集成人工智能的低代码引擎，包含主题配置系统 / 中后台模板 / CLI&nbsp;命令行等丰富的效率提升工具，可帮助开发者高效开发 Web 应用。</p><p><strong>核心亮点：</strong></p><ul><li>跨端跨框架：&nbsp;使用 Renderless 无渲染组件设计架构，实现了一套代码同时支持 Vue2 / Vue3，PC / Mobile 端，并支持函数级别的逻辑定制和全模板替换，灵活性好、二次开发能力强</li><li>组件丰富：PC 端有 100+组件，移动端有 30+组件，包含高频组件 Table、Tree、Select 等，内置虚拟滚动，保证大数据场景下的流畅体验，除了业界常见组件之外，我们还提供了一些独有的特色组件，如：Split 面板分割器、IpAddress IP 地址输入框、Calendar 日历、Crop 图片裁切等</li><li>集成人工智能：低代码引擎提供低代码底层的能力，集成人工智能，让 AI 助力用户高效开发，适用于多场景的低代码平台开发。如：资源编排、服务端渲染、模型驱动、移动端、大屏端、页面编排等低代码平台</li><li>配置式组件：&nbsp;组件支持模板式和配置式两种使用方式，适合低代码平台，目前团队已经将 OpenTiny 集成到内部的低代码平台，针对低码平台做了大量优化</li><li>周边生态齐全：&nbsp;提供了基于 Angular + TypeScript 的 TinyNG 组件库，提供包含 10+ 实用功能、20+ 典型页面的 TinyPro 中后台模板，提供覆盖前端开发全流程的 TinyCLI 工程化工具，提供强大的在线主题配置平台 TinyTheme</li></ul><hr><p>欢迎加入 OpenTiny 开源社区。添加微信小助手：opentiny-official 一起参与交流前端技术～</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252F" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2F" target="_blank">OpenTiny 官网</a>&nbsp;：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252F" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2F" target="_blank">opentiny.design/</a></strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fgithub.com%252Fopentiny%252F" title="https://github.com/opentiny/" target="_blank">OpenTiny 代码仓库</a>：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fgithub.com%252Fopentiny%252F" title="https://github.com/opentiny/" target="_blank">github.com/opentiny/</a></strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-vue" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">Vue 组件库</a>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-vue" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">opentiny.design/tiny-vue</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-ng" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-ng" target="_blank">Angular 组件库</a>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-ng" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-ng" target="_blank">opentiny.design/tiny-ng</a></p><p>欢迎进入代码仓库 Star🌟TinyVue、TinyNG、TinyCLI~</p><p>如果你也想要共建，可以进入代码仓库，找到&nbsp;<code>good first issue</code>标签，一起参与开源贡献~</p><p><strong>往期文章推荐</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-e8bd5f9b0f2dedea3b5fcd23ab93a80c124.png" alt="" referrerpolicy="no-referrer"></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247491605%2526idx%253D1%2526sn%253Db85064d6b81a2a673bc9e1eeea82a1dd%2526chksm%253Dfe4b01aac93c88bc1de779f6e558da7cdd181cec49a1fbdac804b54bab19729cbc45ddf3f104%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247491605&amp;idx=1&amp;sn=b85064d6b81a2a673bc9e1eeea82a1dd&amp;chksm=fe4b01aac93c88bc1de779f6e558da7cdd181cec49a1fbdac804b54bab19729cbc45ddf3f104&amp;scene=21#wechat_redirect" target="_blank">必不可少的 UI 组件一——组件的基础知识</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247491250%2526idx%253D1%2526sn%253D66b6840f3f93d415a33b9ade09dcd9b8%2526chksm%253Dfe48ff0dc93f761ba3965380b759b184616d9dc39a903f1bda689037ba0b177c98fb0bae7c38%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247491250&amp;idx=1&amp;sn=66b6840f3f93d415a33b9ade09dcd9b8&amp;chksm=fe48ff0dc93f761ba3965380b759b184616d9dc39a903f1bda689037ba0b177c98fb0bae7c38&amp;scene=21#wechat_redirect" target="_blank">OpenTiny Vue 3.10.0 版本发布：组件 Demo 支持 Composition 写法，新增 4 个新组件</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247490886%2526idx%253D1%2526sn%253D3c0fcbe86c01b01e0ed876904743ca76%2526chksm%253Dfe48fcf9c93f75ef621391689021922451ae5621c75f0c5c3024352d9df8d0f18139095865f9%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247490886&amp;idx=1&amp;sn=3c0fcbe86c01b01e0ed876904743ca76&amp;chksm=fe48fcf9c93f75ef621391689021922451ae5621c75f0c5c3024352d9df8d0f18139095865f9&amp;scene=21#wechat_redirect" target="_blank">前端 Vuer，请收好这份《Vue 组件单元测试》宝典</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247490622%2526idx%253D1%2526sn%253Df928726a3608ebf0999529187dc2a22c%2526chksm%253Dfe48fd81c93f7497608ed97ea0d60d12b61d03c062ebda49c84a9c4e3cdb0550e25930df9aa1%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247490622&amp;idx=1&amp;sn=f928726a3608ebf0999529187dc2a22c&amp;chksm=fe48fd81c93f7497608ed97ea0d60d12b61d03c062ebda49c84a9c4e3cdb0550e25930df9aa1&amp;scene=21#wechat_redirect" target="_blank">OpenTiny 前端组件库正式开源啦！面向未来，为开发者而生</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247490528%2526idx%253D1%2526sn%253D911d84e6bb275e6125464f07643c1150%2526chksm%253Dfe48fa5fc93f734911c4f44a5f4e2d6c4e29e00ad68cae35c4edc3771de1cbf65cd5f2a8a224%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247490528&amp;idx=1&amp;sn=911d84e6bb275e6125464f07643c1150&amp;chksm=fe48fa5fc93f734911c4f44a5f4e2d6c4e29e00ad68cae35c4edc3771de1cbf65cd5f2a8a224&amp;scene=21#wechat_redirect" target="_blank">从自研走向开源的 TinyVue 组件库</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzI2MDE3MTM4MA%253D%253D%2526mid%253D2701520396%2526idx%253D1%2526sn%253Dbd42224d212cb4b78ffcbca98f463db8%2526chksm%253Dce9cfd17f9eb7401d41b21639f80b09846a1c44b237c6733b809aeb2259c3d2521c88c490e7a%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzI2MDE3MTM4MA==&amp;mid=2701520396&amp;idx=1&amp;sn=bd42224d212cb4b78ffcbca98f463db8&amp;chksm=ce9cfd17f9eb7401d41b21639f80b09846a1c44b237c6733b809aeb2259c3d2521c88c490e7a&amp;scene=21#wechat_redirect" target="_blank">我要做开源，提交我的第一个 PR</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 10:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6769809/blog/10112556</guid>
            <link>https://my.oschina.net/u/6769809/blog/10112556</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
