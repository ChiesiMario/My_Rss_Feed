<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 18 Jan 2024 10:15:58 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[华为发布 HarmonyOS NEXT 鸿蒙星河版（开发者预览）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天下午在深圳举办的鸿蒙生态千帆启航仪式上，华为常务董事、终端 BG CEO 余承东宣布：<strong>HarmonyOS NEXT 鸿蒙星河版（开发者预览版）面向开发者开放申请</strong>。鸿蒙星河版将实现六大极致原生体验，包括原生精致、易用、流畅、安全、智能和互联。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3b40ebae0c495dbbb24a8e02981c656ca22.jpg" referrerpolicy="no-referrer"></p><p>余承东表示，首批鸿蒙原生应用生态伙伴已经突破 200 家。预计到今年年底，将有 5000 款应用完成鸿蒙原生开发。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-568f3f03223ab175b643dcf3434b6ad54ee.png" referrerpolicy="no-referrer"></p><p>据介绍，HarmonyOS NEXT 鸿蒙星河版采用华为自研内核，抛弃了传统的 Linux 内核以及 AOSP 安卓开放源代码项目等代码，仅支持鸿蒙内核和鸿蒙系统的应用。</p><p>余承东在发布会现场表示，鸿蒙内核超越传统内核，鸿蒙系统是真正的操作系统，从编程语言到编译器都是全栈自研。他还说道，真正的操作系统需要有底座和生态支持。经过十年的发展和蝶变，鸿蒙操作系统已在各种场景设备上得到广泛应用。华为力求在核心技术、全栈能力、底座和生态方面实现全面发展，打造真正的操作系统。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9a92b0ee0233ea897e68426d8b4de28bcf6.png" referrerpolicy="no-referrer"></p><p>按照发布日程，HarmonyOS NEXT 鸿蒙星河版将于 Q2 推出开发者 Beta 版，Q4 发布商用版。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c3f2e68f3c1f3af41732820781574df2a78.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 09:50:51 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276094</guid>
            <link>https://www.oschina.net/news/276094</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Wine 9.0 稳定版正式发布，新增实验性 Wayland 驱动]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Wine 9.0 稳定版已正式<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.winehq.org%2Fnews%2F2024011601" target="_blank">发布</a></u>。</p><blockquote><p>Wine （「Wine Is Not an Emulator」 的首字母缩写）是一个能够在多种 POSIX-compliant 操作系统（诸如 Linux，macOS 及 BSD 等）上运行 Windows 应用的兼容层。它不是像虚拟机或者模拟器一样模仿内部的 Windows 逻辑，而是将 Windows API 调用翻译成为动态的 POSIX 调用，免除了性能和其它一些行为的内存占用，能够干净地整合 Windows 应用到桌面。</p></blockquote><p>9.0 亮点是引入新的 WoW64 架构和实验性 Wayland 驱动程序。</p><p>主要变化：</p><ul><li>引入实验性的 Wayland 驱动程序，默认未启用</li><li>从 Windows 到 Unix 代码的所有转换都经过 NT 系统调用接口，这标志着多年重构工作的完成</li><li>新的 WoW64 架构允许在纯 64 位 Unix 系统运行 32 位 Windows 应用，该模式默认没有启用</li><li>增强 ARM64 平台支持</li><li>更新 Vulkan 驱动支持</li><li>改进 Direct3D 以及 DirectMusic 支持</li><li>……</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitlab.winehq.org%2Fwine%2Fwine%2F-%2Freleases%2Fwine-9.0" target="_blank">详情查看发布公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 09:26:14 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276090/wine-9-0-released</guid>
            <link>https://www.oschina.net/news/276090/wine-9-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GreptimeDB v0.6 发布 | 支持 Datanodes 间迁移数据表 Region]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2024 年新年伊始，Greptime 团队携新年的活力，持续进行紧锣密鼓的版本迭代。继上一次更新后，仅仅三周我们的开源时序数据库就又迎来了一个更加强大、功能丰富的新版本——GreptimeDB v0.6。</p><p>接下来我们将介绍 GreptimeDB v0.6 的主要版本改进：</p><ul><li>v0.6 功能上新</li><li>其他亮点更新</li></ul><h2>Region Migration</h2><p>在 v0.5 版本中，我们引入了对 Kafka WAL 的支持，使得在多个 Datanode 之间实现 Region 数据的同步和迁移成为可能。在 0.6 版本中，我们初步实现了 Region Migration 功能，<strong>为用户提供了在 Datanode 之间迁移数据表 Region 的能力，同时保障了数据的完整性，为动态调节集群负载提供了很好的基础。</strong></p><p>例如，随着查询性能需求的增长，用户可以通过 Region Migration 轻松将数据表 Region 迁移到负载更低或者更大规格的 Datanode 节点，以实现更好的查询性能。</p><p>未来，我们计划引入动态 Region 分布，该功能将在不中断服务的情况下，根据实时监测的负载状况和业务需求，智能地重新分配数据 Region，以优化资源利用。这将实现更加智能和高效的数据管理，为持续变化的业务环境提供可持续的支持。</p><h2>其他亮点更新</h2><ul><li><p>新增配置项，允许指定查询的默认时区</p><p>通过增加 <code>--store-key-prefix</code> 配置选项，管理员可以指定 metasrv 所使用的 Key 前缀，从而避免键名冲突。</p></li><li><p>实现了 PromQL 中的 OR 逻辑算子</p><p>新增特殊的 <code>UNION</code> 算子（在 PromQL 中为 <code>OR</code>）专门用于特定的 PromQL 查询场景。该算子接受两个输入节点，左子节点的所有列都会输出，<code>compare_keys</code> 指定的列则用于检查重复。遇到重复时，若均源自右节点则只保留首行，源自左节点则丢弃右节点的行；输出包含所有左右节点的列，且行顺序不固定。</p></li></ul><h2>未来展望</h2><p>在 v0.7 版本中，我们将引入一个全新的索引模块，其中的第一个实现会是倒排索引。我们的目标是通过这个索引模块来提升在海量时间线中筛选出少量时间线并进行查询时的性能。这正是可观测场景中 Metric Engine 着重关注的特性。目前，我们的团队正在对两者的结合进行测试，以确保其性能和稳定性。请大家期待我们即将发布的 v0.7 版本！</p><h3>关于 Greptime 的小知识：</h3><p>Greptime 格睿科技于 2022 年创立，目前正在完善和打造时序数据库 GreptimeDB，格睿云 GreptimeCloud 和可观测工具 GreptimeAI 这三款产品。</p><p>GreptimeDB 是一款用 Rust 语言编写的时序数据库，具有分布式、开源、云原生和兼容性强等特点，帮助企业实时读写、处理和分析时序数据的同时降低长期存储成本；GreptimeCloud 可以为用户提供全托管的 DBaaS 服务，能够与可观测性、物联网等领域高度结合；GreptimeAI 为 LLM 量身打造，提供成本、性能和生成过程的全链路监控。</p><p>GreptimeCloud 和 GreptimeAI 已正式公测，欢迎关注公众号或官网了解最新动态！</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreptime.cn%2F" target="_blank">https://greptime.cn/</a></p><p>GitHub: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb" target="_blank">https://github.com/GreptimeTeam/greptimedb</a></p><p>文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.greptime.cn%2F" target="_blank">https://docs.greptime.cn/</a></p><p>Twitter: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FGreptime" target="_blank">https://twitter.com/Greptime</a></p><p>Slack: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreptime.com%2Fslack" target="_blank">https://greptime.com/slack</a></p><p>LinkedIn: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fgreptime%2F" target="_blank">https://www.linkedin.com/company/greptime/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 09:20:51 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6839317/blog/10862471</guid>
            <link>https://my.oschina.net/u/6839317/blog/10862471</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开放签电子签章项目加入渠成开源社区]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">开放签上线一个月，目前 gitee、github 两个社区截止发稿前 start 总量 426，每周累计增长 100 左右。在开源中国、github、csdn 等社区得到了广大开发者用户的关注，也得到渠成开源社区的关注，感谢他们。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">开放签于 2024 年 1 月份正式加入渠成开源社区，希望能跟渠成开源社区一起发展，借助和学习渠成的开源运营方法，把开放签开源社区运营的越来越好。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>渠成开源社区介绍</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">渠成开源社区由禅道项目管理软件团队发起，社区的经营主体为青岛渠成开源计算机网络技术研究中心，是从事非营利性社会服务活动的社会组织。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">渠成开源社区主要面向一线开源软件生产者、贡献者、组织者、赞助商和用户，以解决具体实际问题为宗旨，旨在打造以开源软件为核心纽带的开源生态系统，真正做到让每一个优秀的开源软件都能实现商业化。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>渠成开源社区要做的事情</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">渠成开源社区以解决开源实际问题为宗旨，打造以开源软件为核心的开源生态系统。社区会围绕代码工程侧、经营模式侧和社区活动侧这三类事情展开：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">帮助开源软件社区把项目做得更好：支持开源任务悬赏，包含开源文档、开源 Bug、开源极客营、开源测试、产品设计、UI 设计等等。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">帮助开源软件社区把项目经营得更好：围绕如何以开源软件建立自己的经营模式提供文章、视频、沙龙、培训等一系列的内容。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">充分链接开源生态中的各种角色：通过各种社区功能、线上线下的活动建立各角色的充分链接。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>开放签电子签章介绍</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">开放签团队源自于电子合同 SaaS 公司，专注于提供电子签章相关的专业解决方案，开放签致力于将电子签章产品、技术开源、开放，让电子签署更加简单。我们更加相信秉承开放共享这一价值观，能够为产品与用户之间带来更多信任。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">接下来，开放签继续秉持开源开放的精神，加入更多开源社区，探索更多的开源运营方式，为更多的开发者和用户带来更多的共享，更好的服务。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276088</guid>
            <link>https://www.oschina.net/news/276088</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[字节跳动开源 Gödel Scheduler：在离线统一调度器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>字节跳动宣布基于 Kubernetes 系统自研分布式调度器：Gödel Scheduler。一个能统一调度在线和离线业务的分布式调度器，能在满足在离线业务功能和性能需求的前提下，提供良好的扩展性和调度质量。</p><p>具备如下主要特点：</p><ul><li><p>基于 K8s Scheduler，结合<strong>乐观并发</strong>思想，把最耗时的应用到节点匹配（filtering and scoring）操作放在 scheduler 组件，可以并发执行，提高大规模集群调度吞吐；</p></li><li><p><strong>两层调度语义</strong>抽象（Unit 和 Pod）和<strong>二级调度框架</strong>实现：提供更灵活的「批」调度能力，更好支持离线业务的同时，可以进一步提高调度吞吐和提升系统扩展性 （扩展后的框架可以更好地处理一些特殊场景）；</p></li><li><p>丰富的功能和优秀的性能，满足在线，离线（批，流）和训练等业务需求，真正做到统一调度；</p></li><li><p>兼容 Kubernetes 生态，可以替换 K8s Scheduler；</p><ul><li>由于性能以及架构优化，在 framework interface 上与 K8s Scheduler 不完全一样，但扩展性不受影响，也可以像 Kubernetes 一样实现 scheduling plugin；</li></ul></li></ul><p><span style="background-color:#ffffff; color:#3e3e3e">架构如下图所示：</span></p><p><span style="background-color:#ffffff; color:#3e3e3e"><img alt="" height="207" src="https://oscimg.oschina.net/oscnet/up-df6660cb4c8f0bdd045a0ffbd83527872fc.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#3e3e3e">Gödel Scheduler 由三个组件组成：</span><span style="color:#3e3e3e">Dispatcher、Scheduler<span>&nbsp;</span></span><span style="color:#3e3e3e">和</span><span style="color:#3e3e3e"><span>&nbsp;</span></span><span style="color:#3e3e3e">Binder</span><span style="color:#3e3e3e">。</span><span style="color:#3e3e3e">其中，Scheduler 组件是多实例，乐观并发调度， Dispatcher 和 Binder 则是单实例。</span>&nbsp;</p><p>公告指出，<span style="color:#3e3e3e">在过去两年里，Gödel Scheduler 已在字节跳动内部大规模落地，提供丰富的调度语义和功能，包括但不限于 Gang、Job level affinity、微拓扑调度、丰富的排队策略、抢占策略以及调度策略等，它高效稳定地支撑着抖音、今日头条等内部多种复杂业务的运行。</span></p><p><span style="color:#3e3e3e">除了架构优化以外，项目团队还基于以前优化 Kubernetes 原生调度器的经验，对 Gödel Scheduler 的实现进行了更深度的性能优化。结合内部优化过的 Kubernetes 系统，Gödel 调度器单分片吞吐可</span><span style="color:#000000">达&nbsp;<strong>2000+ Pods/s</strong>, 多分片可达&nbsp;<strong>5000+ Pods/s</strong>。并基</span><span style="color:#3e3e3e">于此不断提升单集群规模，目前字节跳动内部最大的线上单集群规模已经达到 20000+&nbsp;节点、100w+ Pods。</span></p><p><span style="color:#3e3e3e">经过内部多年反复验证，目前&nbsp;<span style="background-color:#ffffff">Gödel 系统</span>已达相对稳定状态。</span></p><p><span style="background-color:#ffffff; color:#3e3e3e">未来，开源团队计划持续迭代 Gödel scheduler，提供更加丰富的功能和更好的扩展性，不断优化一些特殊场景下（比如高部署率，高抢占频率等）的调度吞吐。同时，通过重调度的方式希望解决</span><strong>调度性能</strong><span style="background-color:#ffffff; color:#3e3e3e">和</span><strong>调度质量</strong><span style="background-color:#ffffff; color:#3e3e3e">难兼顾的难题，在保证调度吞吐的基础上，大幅提升调度质量。以及注重生态建设，兼容适配业务主流的系统和框架。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 09:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276087</guid>
            <link>https://www.oschina.net/news/276087</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OSI 报告：从历史角度看 DOSP 做法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Open Source Initiative (OSI) 于日前发布了一份名为「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.opensource.org%2Fa-historic-view-of-the-practice-to-delay-releasing-open-source-software-osis-report%2F" target="_blank">Delayed Open Source Publication: A Survey of Historical and Current Practices</a>」的新报告，深入研究了 DOSP 的历史、模式以及发展趋势。</span></p><p><span style="color:#000000">延迟开源发布 (DOSP) 是是首先在专有许可证下分发或公开部署软件，然后以开源许可证有计划地发布该软件源代码的做法；Business Source License (BSL) 就是一种广为人知的 DOSP 许可。</span></p><p><span style="color:#000000">在整个开源软件历史中，软件生产商都一直在实践 DOSP；报告收集了一些示例，并对其进行分类以进行分析。</span></p><p><img height="386" src="https://oscimg.oschina.net/oscnet/up-1d9caa78ae4188bd65c15762117db68688e.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000">最早的 DOSP 实例之一是 1998 年左右根据"Aladdin Free Public License"发布的 Aladdin GhostScript，后来过渡到同时采用专有许可和 GPL 的发布模型。KDE 的 Qt 库也是一个鲜明的示例，它将 DOSP 作为防止潜在开发中止的一种保障措施。Qt 的许可历史很复杂，如今其可以在商业和开源 GPL 2.0、GPL 3.0 和 LGPL 3.0 许可下使用。</span></p><p><span style="color:#000000">研究人员<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthenewstack.io%2Fdelayed-open-source-publication-emerges-as-open-source-rival%2F" target="_blank">发现</a> DOSP 大致有 3 种类型：</span></p><ul><li><span style="color:#000000">Unconditional scheduled relicensing。这种直接的方法涉及在过渡到开源许可之前预先定义的时间延迟。</span></li><li><span style="color:#000000">Event-driven relicensing。在这种情况下，开源发布与特定事件相关联，比如发布新的专有版本，促使其前身开源。虽然这种方式曾经很常见，但现在已经很少使用了。</span></li><li><span style="color:#000000">Conditional relicensing。这种类型取决于某些条件，例如在转向开源之前获得资金或找到合适的非营利组织。但这个承诺可能会存在不会兑现的风险。</span></li></ul><p><span style="color:#000000">与 DOSP 相关的一个变种是 "visible source"或 "source available"。在这些模型中，源代码通常是可用的，但没有 Open Source Definition (OSD) 所保证的自由。近期比较著名的例子就是 Meta 的 AI 大语言模型 Llama 2 Community License，其代码是可用的，但商业使用受到限制。</span></p><p><span style="color:#000000">OSI 研究人员发现，在 DOSP 早期，DOSP"通常是为了垄断直接的商业收入：许可证将授予开源所需的大部分权限，但关键是不允许商业使用软件"。"这一限制适用于包括用户在内的所有下游被许可方，而不仅仅是开发者。</span></p><p><span style="color:#000000">"然而，最近一些 DOSP 许可证是为了防止任何被许可人在与某些特定类型的软件竞争的产品或服务中使用该软件，而这些软件对许可人来说具有重要的战略意义，与直接收入无关。"</span></p><p><span style="color:#000000">例如，为 MariaDB 编写的 BSL 1.1 不允许在生产中使用许可代码，除非许可人使用"Additional Use Grant (AUG)"机制。但&nbsp;</span><span style="background-color:#ffffff; color:#222222">AUG 因公司而异，也正因如此，</span><span style="background-color:#ffffff; color:#142640">每个 BSL 实例实际上都是一个本质上不同的许可证。</span></p><p><span style="color:#000000">如今，BSL 正在兴起。HashiCorp 在去年宣布变更核心产品的开源协议，从 MPL 2.0 迁移到 BSL 1.1，CouchBase、DragonflyDB 和 ArangoDB 等十来个项目都也使用了 BSL 协议。</span></p><p><span style="color:#000000">除了 DOSP 许可证，MongoDB 和 Redis 等几个面向云的软件项目在过去几年中也放弃了开源许可证，转而采用带有非竞争条款的许可证 (如 SSPL)。</span></p><p><span style="color:#000000">研究认为，DOSP 是企业用来保持商业优势，同时试图尽可能多地保留开源的优势的一种方式。但随着延迟的增加，开源的好处也会越来越少。探索这些好处与独占利用期限之间的权衡是未来值得研究的方向。此外，DOSP 的实验和多样性也都比我们所意识到的要多得多--尝试 DOSP 的项目、以及尝试的方式都要远远多出想象。</span></p><p><span style="color:#000000">报告还提出了一些未来值得继续研究的方向，包括：AGPL 与 DOSP 许可对比、对外部贡献的影响、首次发布开源代码后的重新授权等等。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensource.org%2Fdelayed-open-source-publication%2F" target="_blank">查看完整报告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 08:39:06 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276084/delayed-open-source-publication-osi-report</guid>
            <link>https://www.oschina.net/news/276084/delayed-open-source-publication-osi-report</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云风宣布开源自研游戏引擎 Ant Engine]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>知名游戏开发者云风昨天宣布开源游戏引擎 Ant Engine。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-23bf9834f7a41a24e60e8e09ce41c348727.png" referrerpolicy="no-referrer"></p><p>via<em><u>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fcloudwu%2Fstatus%2F1747509339752116544" target="_blank">https://twitter.com/cloudwu/status/1747509339752116544</a></u></em></p></blockquote><p>云风表示其所在公司已批准 Ant Engine 的开源申请，仓库已对外开放，但现在尚未正式发布，文档、示例等均待在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fejoy%2Fant%2Fwiki" target="_blank">Wiki</a>&nbsp;上逐步完善，游戏仓库将于年后公开。他还说道，Ant Engine 已经开发了 6 年，其团队使用这个引擎开发的游戏有一年历史，技术部分已经全部完成（游戏体验部分还需要调整），性能方面超出预期。</p><p>Ant Engine 目前只有 iOS 版本完全可用。引擎可以在 Windows 上运行，但缺乏一些和 PC 相关的支持（比如接入 Steam ，更好的键盘鼠标支持）。Mac 版本略有不足，Android 版本尚未完成。</p><p><strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.codingnow.com%2F2024%2F01%2Fant_engine_open_source.html" target="_blank">云风介绍道</a></u></strong>，<strong>Ant Engine 基于 Lua 开发</strong>，有极低的理解成本，和极高的动态可定制性。他还表示：「以往基于 Lua 这类动态语言开发的基础设施中，最难解决是性能问题，而性能恰巧又已被 ANT 解决的相当不错。ANT 在手机上有极好的性能，我们用它开发的游戏，在极其复杂的场景下，iPhone 12 上依然可以小于每帧 10ms 的速度渲染。对于同等复杂度的场景，Unity 实现同等的效率将非常困难。」</p><ul><li>Ant Engine 技术特点：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fejoy%2Fant%2Fwiki%2FTechnicalFeatures" target="_blank">https://github.com/ejoy/ant/wiki/TechnicalFeatures</a></li><li>Ant Engine 的虚拟文件系统：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fejoy%2Fant%2Fwiki%2FVFS" target="_blank">https://github.com/ejoy/ant/wiki/VFS</a></li><li>Ant Engine&nbsp;的包系统：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fejoy%2Fant%2Fwiki%2FPackage" target="_blank">https://github.com/ejoy/ant/wiki/Package</a></li></ul><hr><p>吴云洋（Cloud），网名云风，毕业于中南大学，原网易游戏核心成员、杭州研究中心总监，是网易《大话西游》、《梦幻西游》等游戏的重要开发者。2011 年 9 月 5 日宣布已从网易辞职。</p><p>云风 GitHub 主页：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcloudwu" target="_blank">https://github.com/cloudwu</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 07:48:35 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276078/cloudwu-ant-engine-open-source</guid>
            <link>https://www.oschina.net/news/276078/cloudwu-ant-engine-open-source</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RWKV 元始智能完成种子轮融资，非 Transformer 架构的开源大语言模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>元始智能是一家国产开源非 Transformer 架构大语言模型提供商，其核心产品<strong>RWKV</strong>兼具 Transformer 和 RNN 的优势：推理效率高且恒定，显存占用少且恒定，支持无限上下文，对芯片友好。</p><p>近日，RWKV 元始智能<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7XpIuQ_sNQNzMNOqZajp3Q" target="_blank">完成种子轮融资</a></u>，投资方为陆奇于 2018 年创立的奇绩创坛和某匿名投资者。目前元始智能已开始继续融第二轮。</p><p>RWKV 是国产开源的首个非 Transformer 架构的大语言模型，目前已经迭代到第六代 RWKV-6。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-536b34de46699fb3de48f5d00644dded7b7.png" referrerpolicy="no-referrer"></p><p>RWKV 作者彭博在 2022 年 5 月开始训练 RWKV-2，当时只有 1 亿（100M）参数规模，后续在 2023 年 3 月训练了 RWKV-4 140 亿（14B）参数版本。</p><p>RWKV-5 的 15 亿和 30 亿参数版本已发布，且 70 亿参数版本会在 2024 年 1 月发布。而 RWKV-6 的 15 亿和 30 亿参数版本将在 2024 年 2 月发布，然后将继续训练 70 亿和 140 亿参数版本。</p><p>RWKV-5 和 RWKV-6 系列的特点是支持全球 100+种语言，也支持几十种编程语言，目前可以在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.rwkv.com%2F" target="_blank">https://www.rwkv.com/ </a>体验在线 Demo。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 06:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276071</guid>
            <link>https://www.oschina.net/news/276071</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[智谱 AI 推出新一代基座模型 GLM-4，发起大模型开源基金]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2024 年 01 月 16 日，在「智谱 AI 技术开放日 (Zhipu DevDay)」上，智谱 AI 发布新一代基座大模型 GLM-4，据称其整体性能相比 GLM3 全面提升 60%，逼近 GPT-4。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ec790242fcd97c4ae3b363227a23e2c4e15.png" referrerpolicy="no-referrer"></p><p>GLM-4 亮点：</p><ul><li>支持更长上下文，单次提示词能处理的文本可达 300 页，上下文窗口长度最高达 128K</li><li>更强的多模态，文生图和多模态理解得到增强</li><li>支持处理 Excel、PDF、PPT 等格式的文件</li><li>可自动调用代码解释器进行复杂的方程或微积分求解</li><li>支持更快推理速度，更多并发，大大降低推理成本</li><li>增强了智能体能力</li></ul><p>智谱 AI 还发布了 All Tools、GLMs、MaaS API、大模型科研基金、大模型开源基金以及「Z 计划」创业基金等内容。</p><p>其中「大模型开源基金」包括三个「一千」：</p><ul><li>第一个「一千」，是 1000 张卡。智谱 AI 将为大模型开源社区提供一千张卡，助力开源开发；</li><li>第二个「一千」，是 1000 万人民币。智谱 AI 将提供 1000 万元的现金用来支持与大模型相关的开源项目。</li><li>第三个「一千」是 1000 亿 tokens。智谱 AI 将为优秀的开源开发者提供 1000 亿免费 API tokens。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-59f5243472f2ad88a4dcdaa6399e4738afc.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 06:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276067</guid>
            <link>https://www.oschina.net/news/276067</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[操作教程｜JumpServer 堡垒机结合 Ansible 进行批量系统初始化]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start"><br> 运维人员常常需要对资产进行系统初始化的操作，而初始化服务器又是一项繁琐的工作，需要花费运维人员大量的时间和精力。为了提高效率，许多组织会使用自动化工具和脚本来简化这些任务。自动化工具的运用可以大幅降低运维人员的工作量，同时也能有效规避出错的风险。</p><p style="color:#000000; text-align:start">Ansible 作为近年来十分火爆的一款开源运维自动化工具，可以帮助管理人员简化系统配置、应用部署和任务执行等操作。同时，Ansible 也可以结合 JumpServer 作为批量资产运维工具，进行批量系统初始化操作，能够很好地满足广大运维人员的实际需求。</p><p style="color:#000000; text-align:start">本文将介绍<strong>通过 JumpServer 内置的 Ansible 模块批量初始化 Linux 服务器</strong>的具体方法，希望对广大企业的运维人员提高运维管理效率有所帮助。</p><p style="color:#000000; text-align:start"><em><strong>一、Ansible 简介</strong></em></p><p style="color:#000000; text-align:start">Ansible 是自动化运维领域最为常用的工具之一。它基于 Python 语言开发，集合了众多运维工具（例如 Puppet、Cfengine、Chef、Func、Fabric）的优点，操作简单，功能强大，支持批量系统配置、批量程序部署、批量运行命令等功能。</p><p style="color:#000000; text-align:start">通过 Ansible 实现运维自动化，能够提高运维工程师的工作效率，减少人为失误。Ansible 本身集成了非常丰富的模块可以实现各种管理操作，并且能够与多个平台进行交互对接。</p><p style="color:#000000; text-align:start">Playbook 模式（即剧本模式）是 Ansible 的主要管理方式，也是 Ansible 功能强大的关键所在。Playbook 模式是通过多个 Task（即任务）集合来完成某类功能的，例如 Web 服务的安装部署、数据库服务器的批量备份等，可以简单地把 Playbook 理解为通过组合多条「<em>ad-hoc</em>」操作的配置文件。</p><p style="color:#000000; text-align:start"><img alt="" height="607" src="https://oscimg.oschina.net/oscnet/up-ec97596bbe3c49a8c994571701019aeee95.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><em><strong>二、实施方案</strong></em></p><p style="color:#000000; text-align:start">JumpServer 作为运维安全审计管理平台，本身内置 Ansible 模块，可以实现对服务器等资产的安全管控。用户通过 JumpServer 的认证和授权功能，获得相应权限后才能使用 Ansible 对目标主机进行操作，确保了操作的安全性。</p><p style="color:#000000; text-align:start">同时，Ansible 可以通过 JumpServer 来管理和执行各种任务，例如配置管理、软件部署、批量命令执行等，简化了操作流程。<strong>结合 Ansible 和 JumpServer 堡垒机，可以实现对服务器的中心化管理，提高系统的安全性和运维效率，提升企业的运维管理能力。</strong></p><p style="color:#000000; text-align:start"><strong><span style="color:#28937c">1. 准备工作</span></strong></p><p style="color:#000000; text-align:start"><span style="color:#3e3e3e">■</span><span>&nbsp;</span>准备一台机器，部署 JumpServer 运维安全审计系统；</p><p style="color:#000000; text-align:start">■ 准备若干台 Linux 服务器，用于测试批量系统初始化操作是否成功。</p><p style="color:#000000; text-align:start"><strong><span style="color:#279a81">2. 创建 Playbook 作业</span></strong></p><p style="color:#000000; text-align:start">■ 登录 JumpServer 堡垒机，进入工作台界面；</p><p style="color:#000000; text-align:start"><img alt="" height="1474" src="https://oscimg.oschina.net/oscnet/up-82354437e26c9b76f3c5992f00b0bbf3d3f.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 1 登录 JumpServer 堡垒机</span></p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-abf08146ebcada9c11197b445ff8a2a98a3.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 2 进入 JumpServer 工作台界面</span></p><p style="color:#000000; text-align:start">■ 在 JumpServer 中选择「作业中心」→「模版管理」→「Playbook 管理」，创建 Playbook 模板；</p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-ff732debcb7b6a9d2fb42ba36cc207470c8.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 3 创建 Playbook 模板</span></p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-dfdbd4fb2f6ab209505de32fde75836a7b2.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 4 创建模板详情</span></p><p style="color:#000000; text-align:start">■ 创建完成之后，管理页面会出现新创建的模板信息，并填写模板内容；</p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-d34497b1cbbb7896422ff3d523b0a76dd73.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 5 新创建的模板</span></p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-6a04c7fdc288b0184cf3eb08899e775994e.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 6 填写模板内容</span></p><p style="color:#000000; text-align:start">Playbook 具体内容如下：</p><pre><code>[root@v3 ~]# cat main.yml
## write your playbook here
---
- hosts: all
  vars:
  remote_user:
 
  tasks:
  - name: 关闭防火墙
    service: name=firewalld state=stopped enabled=no
  
  - name: 关闭 selinux
    lineinfile:
      dest: /etc/selinux/config
      regexp: "^SELINUX="
      line: "SELINUX=disabled"
   
  - name: 即时生效
    shell: setenforce 0 ; swapoff -a
  
  - name: 关闭 swap
    lineinfile:
      dest: /etc/fstab
      regexp: ".*swap"
      line: ""
  
  - name: 拷贝时区
    copy: src=/usr/share/zoneinfo/Asia/Shanghai dest=/etc/localtime
  
  - name: 更新源
    shell: yum repolist
   
  - name: 安装 lrzsz
    yum: name=lrzsz 
  
  - name: 安装 net-tools
    yum: name=net-tools 
  
  - name: 安装 wget
    yum: name=wget 
  
  - name: 安装 gcc
    yum: name=gcc 
  
  - name: 安装开发者工具库
    yum: name='@Development Tools'
  
  - name: 更改内核最大连接数
    copy: src=/etc/security/limits.conf dest=/etc/security/limits.conf 
  
  - name: 设置 java 连接数
    shell: sed -i '$a vm.max_map_count=262144' /etc/sysctl.conf ; sysctl -p</code></pre><p style="color:#000000; text-align:start">■ 在 JumpServer 中选择「作业中心」→「作业管理」，创建 Playbook 作业；</p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-3a1e53325ee0a2f9877ccd8049c04b00aa1.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 7 创建 Playbook 作业</span></p><p style="color:#000000; text-align:start">■ 按照如下图示填写所需的信息；</p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-0806c230c209c2edb080e5d151d71622652.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 8 填写作业信息</span></p><p style="color:#000000; text-align:start">■ Playbook 作业创建成功后，运行 Playbook 作业进行测试；</p><p style="color:#000000; text-align:start"><img alt="" height="924" src="https://oscimg.oschina.net/oscnet/up-b412d1b6ae03bcb0fda9a3e8a2b718e7267.png" width="1872" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 9 运行新创建的作业</span></p><p style="color:#000000; text-align:start">■ 运行成功。在 JumpServer 中创建 Playbook 模板后，如果需要新增服务器，运维人员只需要创建一个 Playbook 作业即可快速完成资产的系统初始化，轻松解放双手。</p><p style="color:#000000; text-align:start"><img alt="" height="600" src="https://oscimg.oschina.net/oscnet/up-9e4dc8f829c9be4ddaecbc8f611080d5aa1.png" width="900" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 图 10 成功执行 Playbook 作业</span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276059</guid>
            <link>https://www.oschina.net/news/276059</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[红帽正在开发 AI 工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Red Hat 工程师 Jiri Kyjovsky&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.fedoraproject.org%2Farchives%2Flist%2Fdevel%40lists.fedoraproject.org%2Fthread%2FMHUCYUJS7VZBESFYTALNAVPARK4RHPQO%2F" target="_blank">透露称</a></u>，他们正在开发一款名为"<strong>Log Detective</strong>"的 AI 工具，通过人工智能模型来帮助分析 RPM 包构建失败的原因。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4011afdd7b7b4264fa60f8d2096ddb05293.png" referrerpolicy="no-referrer"></p><p>via&nbsp;<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flog-detective.com%2F%23about" target="_blank">https://log-detective.com/</a></u></em></p><p>该工具将利用 AI 模型来识别和解释构建失败，并提供简单的建议以解决问题。Log Detective 的目标是使 RPM 打包人员更容易找出构建失败的原因。他们正在训练 AI 模型，以便它能够理解 RPM 构建日志，并用简单的语言解释失败原因，并提供修复建议。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flog-detective.com%2F" target="_blank">Log Detective 官网写道</a>：</p><blockquote><p>每个构建都会产生数千行输出，分割在多个日志文件中。相关的错误消息可能在任何地方。这就像大海捞针一样。</p><p>经验丰富的打包者有一种直觉，错误消息最有可能出现在哪里，但无论如何，这个过程都很乏味。新手则常常被复杂性所淹没，完全错过错误消息。</p><p>Log Detective 通过训练 AI 模型来理解 RPM 构建日志，并用简单的语言解释错误，提供修复方法的建议，开发者根本不需要打开日志。</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 03:34:01 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276057/red-hat-ai-log-detective</guid>
            <link>https://www.oschina.net/news/276057/red-hat-ai-log-detective</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linus Torvalds 重新开始为 Linux 6.8 合并新代码]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>上周末，Linus Torvalds 所居住的俄勒冈州波特兰地区<u><a href="https://www.oschina.net/news/275878/linux-6-8-merge-window-hiatus">遭遇严重冬季风暴</a></u>，导致互联网和电力中断。因此在 Linux 6.8 合并窗口期间，Linus 的 Git 合并工作被迫中断近五天。但从内核仓库的最新动态来看，合并工作现已重新启动。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-597e98686d727d741b06dac623483c6803b.png" referrerpolicy="no-referrer"></p><p>Linus Torvalds 今天在 social.kernel.org 上<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsocial.kernel.org%2Fusers%2Ftorvalds" target="_blank">发布的最后一条消息称</a></u>，他的第五天"休假"正在进行，他所在地区希望今晚之前恢复供电，尽管昨天也有过类似的承诺，但没有实现。但在这不不久后，他开始为 Linux 6.8 合并新代码：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7160aba63cd79c783f54e5bd0d0f2f11d6a.png" referrerpolicy="no-referrer"></p><p>到目前为止，他还没有在 Linux 内核邮件列表上宣布是否需要延长合并窗口，或者因为 4~5 天的停机时间而做其他改动，但至少内核树上有了新代码。</p><p>Linux 6.8 将带来许多新功能。如果原计划不变，Linux 6.8-rc1 应该会在本周日发布，标志着合并窗口的结束，而稳定版 6.8 内核应该会在 3 月中旬发布。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276056/linux-6-8-merges-resume</guid>
            <link>https://www.oschina.net/news/276056/linux-6-8-merges-resume</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[网易有道自研知识库问答引擎 QAnything 开源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>网易有道<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FkFOqYqhpy0Q4OvvGul-3qA" target="_blank">宣布</a>自研的知识库问答引擎 QAnything 正式开源：Q 是 question，A 是 answer，QAnything 的目标在于「万物皆可问」。</p><p>除了可以调用云端大模型服务，还支持纯本地部署。系统支持 word、ppt、excel、pdf、图片等多种文档格式，直接导入进去即可像"ChatGPT"一样问答。</p><p><img alt="" height="443" src="https://oscimg.oschina.net/oscnet/up-dd1c3f39b8916876b15ad0cc25aeaa24bfa.png" width="500" referrerpolicy="no-referrer"></p><p>（QAnything 系统架构图）</p><p>QAnything 的主要原理是基于检索增强的生成（Retrieval Augmented Generation，简称 RAG）。作为有道自研的 RAG 引擎，QAnything 结合了用户私有数据和大模型的优势——用户的任何内容，以任意的形式存在，比如各种格式的文档，音频，数据库等，都可以在 QAnything 的支持下，变成可以针对其内容进行问答的使用方式，通过这个技术框架用户可以很方便地搭建自己的智能知识助手。</p><p>值得一提的是，QAnything 是一套完整的 RAG 系统，包括专门优化的自研的 embedding 和 rerank 模型，微调后的 LLM，优化后的推理代码，向量数据库，以及一个立即上手可用的前端。所有的算法模型（包括 7B 大模型+embedding/rerank+OCR）占用显存不超过 16G。</p><p>如今，QAnything 已在有道翻译文档问答、有道速读及有道内部业务的客服系统等多个产品中进行了应用。</p><p><img height="225" src="https://oscimg.oschina.net/oscnet/up-6945d43fa219cdaa7b5009ef9ffeb614e4e.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">公告表示，目前 QAnything 项目还在不断迭代，欢迎大家参与开发，并给予更多反馈。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 02:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276054</guid>
            <link>https://www.oschina.net/news/276054</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rufus 4.4 发布，开源 USB 启动盘制作工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">Rufus 4.4 已发布，此版本修复了此前版本中存在的诸多 Bug，进一步增强了兼容性，并带来了多项改进。</span></p><blockquote><p>Rufus 是一款格式化和创建 USB 启动盘的辅助工具，适用于以下场景：</p><ul><li>需要将可引导 ISO (Windows、Linux、UEFI 等) 刻录到 USB 安装媒介的情况</li><li>需要处理未安装操作系统的设备的情况</li><li>需要在 DOS 环境下刷写 BIOS 或其他固件的情况</li><li>需要运行低级工具的情况</li></ul></blockquote><p>4.4&nbsp;新增 GRUB 2.12（Unix 操作系统的引导加载器）支持，并针对某些 UEFI bootloaders 中包含损坏符号链接的 Linux 发行版，提供变通解决方案。此外还修复了处理 .FFU 镜像（即保存镜像时）时的崩溃问题，并不再列出 Microsoft Dev Drives（这是为开发人员相关任务和工作流程优化的特殊 Windows 11 分区），此外改善了对 SDCX 读卡器的支持。</p><p>主要变化：</p><ul><li>为使用损坏的符号链接作为 UEFI 引导加载器的发行版（如 Linux Mint 21.3）添加变通方式。</li><li>添加对 GRUB 2.12 的支持。</li><li>修复保存 .ffu 镜像时遇到崩溃问题。</li><li>修复某些 Linux ISO 在 MBR 模式下无法添加 UEFI:NTFS 分区的问题。</li><li>防止列出 Microsoft Dev Drives。</li><li>改善对 SDXC 读卡器的支持。</li><li>通过将数据区域的起点对齐至 1 MB，改进大型 FAT32 格式化。</li></ul><p>下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frufus.ie%2Fzh%2F" target="_blank">https://rufus.ie/zh/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276053/rufus-4-4-released</guid>
            <link>https://www.oschina.net/news/276053/rufus-4-4-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WeChatMsg - 开源微信聊天记录管理工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>WeChatMsg 是一款开源的微信聊天管理工具。</p><div><a href="https://memotrace.lc044.love/"><img height="240" src="https://memotrace.lc044.love/img/logo%20-%20%E5%89%AF%E6%9C%AC.png" referrerpolicy="no-referrer"></a></div><blockquote><div>&nbsp;</div><h2>前言</h2><div><p>我深信有意义的不是微信，而是隐藏在对话框背后的一个个<strong>深刻故事</strong>。未来，每个人都能拥有 AI 的陪伴，而你的数据能够赋予它有关于你过去的珍贵记忆。我希望每个人都有将自己的生活痕迹👨‍👩‍👦👚🥗🏠️🚴🧋⛹️🛌🛀留存的权利，而不是遗忘💀。</p><p><strong>所以《留痕》</strong></p></div></blockquote><h2 style="text-align:start">🍉功能</h2><ul><li>还原微信聊天界面
<ul><li>🗨文本✅</li><li>🏝图片✅</li><li>🐻‍❄️表情包✅</li><li>拍一拍等系统消息✅</li></ul></li><li>导出聊天记录
<ul><li>sqlite 数据库✅</li><li>HTML(文本、图片、视频、表情包、语音、文件、系统消息)✅</li><li>CSV 文档✅</li><li>TXT 文档✅</li><li>Word 文档✅</li></ul></li><li>分析聊天数据，做成可视化年报 (急需前端大佬提供优质模板)</li><li>🔥<strong>项目持续更新中</strong></li><li>开发计划
<ul><li>自主选择年度报告年份</li><li>一键导出全部表情包、文件、图片、视频、语音</li><li>合并多个备份数据</li><li>批量导出数据</li><li>个人年度报告</li><li>群组年度报告</li><li>按日期、关键词索引</li></ul></li><li>小伙伴们想要其他功能可以留言哦📬</li><li>🔥项目正处于并将长期处于发展阶段，给我一些时间♾️，你所期望的未来都会实现</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/wechatmsg</guid>
            <link>https://www.oschina.net/p/wechatmsg</link>
        </item>
        <item>
            <title>
                <![CDATA[好好的 「代码优化」 是怎么一步步变成 「过度设计」 的]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;visibility: visible;" data-mpa-powered-by="yiban.io"><img class="rich_pages wxw-img __bg_gif" data-backh="96" data-backw="578" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="96" data-imgfileid="503042843" data-ratio="0.16666666666666666" src="https://oscimg.oschina.net/oscnet/0cd486c9-de1a-49c7-a79b-2306f73c35c6.gif" data-type="gif" data-w="636" style="outline: 0px;letter-spacing: 0.544px;font-size: var(--articleFontsize);border-radius: 8px;text-align: justify;width: 100%;visibility: visible !important;background-size: 16px !important;height: auto;" referrerpolicy="no-referrer"><br style="outline: 0px;visibility: visible;"></section><section data-mpa-template="t" data-mpa-template-id="502" data-mpa-category="模板" style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);visibility: visible;"><section data-mpa-category="模板" data-mid="" style="padding-right: 1px;padding-left: 1px;outline: 0px;width: 677px;display: flex;justify-content: flex-start;align-items: center;flex-direction: column;visibility: visible;"><section data-mid="" style="outline: 0px;letter-spacing: 0.544px;width: 675px;display: grid;grid-template-columns: 26px auto;visibility: visible;"><section data-mid="" style="outline: 0px;width: 26px;height: 14px;display: flex;justify-content: center;align-items: center;align-self: center;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section data-mid="" style="padding-left: 7px;outline: 0px;display: flex;justify-content: flex-start;align-items: center;visibility: visible;"><section data-mid="" style="margin-right: 7px;outline: 0px;text-align: left;visibility: visible;"><p data-mid="" style="outline: 0px;width: 0px;font-size: 14px;font-family: PingFangSC-Semibold, &quot;PingFang SC&quot;;font-weight: bold;color: rgb(58, 92, 244);line-height: 20px;visibility: visible;"><br style="outline: 0px;visibility: visible;"></p></section><section data-mid="" style="margin-bottom: 4px;outline: 0px;width: 635px;height: 1px;border-top: 1px solid rgb(58, 92, 244);align-self: flex-end;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section></section></section><section data-mid="" style="padding: 7px 14px 9px 19px;outline: 0px;width: 675px;text-align: left;border-bottom: 1px solid rgb(58, 92, 244);visibility: visible;"><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;letter-spacing: 0.578px;text-align: justify;visibility: visible;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">有一天 Review 师妹的代码，看到一行很难看的代码，毕竟师妹刚开始转 JAVA，一些书写小习惯还是要养成，所以锱铢必较还是有必要的，于是给出了一些优化思路的建议，以及为什么要这么做。建议完后，我并没有停下」追求极致「的脚步，随着不断的思考，发现这段代码的优化慢慢变得五花八门起来了，完成了一次「代码优化」到「过度设计」的典型思考过程，这过程中涉及了很多 Java 的语法糖及设计模式的东西，很典型，能启发思考，遂记录下来。</span></p></section></section></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br style="outline: 0px;visibility: visible;"></section><section style="margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;font-size: 15px;letter-spacing: 1px;"><img class="rich_pages wxw-img" data-imgfileid="503042840" data-ratio="0.3161764705882353" data-s="300,640" data-type="png" data-w="408" src="https://oscimg.oschina.net/oscnet/32fe6b4b-8bdc-4381-812a-d4d61bf97d58.png" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 113px !important;" referrerpolicy="no-referrer"></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;color: rgb(3, 69, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;">一切的开始</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">起初是一段很简单的代码，开始仅仅是将外域的一些标识符转换为域内的标识符。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="cs"><code><span class="code-snippet_outer">public&nbsp;Integer&nbsp;parseSaleType(String&nbsp;saleTypeStr){</span></code><code><span class="code-snippet_outer">  if(saleTypeStr == null || saleTypeStr.equals("")){</span></code><code><span class="code-snippet_outer">    return null;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  if(saleTypeStr.equals("JX")){</span></code><code><span class="code-snippet_outer">    return 1;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  return null;</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">逻辑上很简单，实现的逻辑看上去也没啥大问题，基本学校的老师也是这么教的。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);"><br></span></section><section style="margin-bottom: 0px;outline: 0px;box-sizing: inherit;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgba(25, 26, 31, 0.9);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;font-size: 15px;letter-spacing: 1px;visibility: visible;"><img class="rich_pages wxw-img" data-imgfileid="503042842" data-ratio="0.3056872037914692" data-s="300,640" data-type="png" data-w="422" src="https://oscimg.oschina.net/oscnet/9766627e-6900-4974-8a8e-eabb92ae0829.png" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 117px !important;" referrerpolicy="no-referrer"></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);text-align: center;visibility: visible;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;visibility: visible;color: rgb(0, 17, 255);">语法规范</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);">但是嘛<span style="color: rgb(62, 62, 62);letter-spacing: 1px;">，不好看也容易犯错误，鸡蛋里挑骨头也得挑，于是给出了几个写代码的建议：</span></span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><span id="OSC_h4_1"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">有函数式方法的尽量用</span></strong></span></h4><section style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><br></span></strong></span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer"><span class="code-snippet__comment">//saleTypeStr == nullObjects.isNull(saleTypeStr)</span></span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">首先呢，虽然由于判断 null 这么写不会报错，但是按照常量写==前面的要求，应该倒过来写。另外，这种有 JDK 原生函数式的判断方法，还是优先使用函数式的写法，一来是有方法名比较直观，另外也是方便之后熟练使用 Lamada，别写出 .filter(x -&gt; null == x) 这样的写法，还是 .filter(Objects::isNull) 更可读些。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="color: rgb(20, 20, 220);font-weight: bold;letter-spacing: 0.578px;background-color: rgb(255, 255, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-indent: 0em;"><br></span></section><span id="OSC_h4_2"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">判断字符串为空不要自己写容易漏逻辑，尽量使用现成的方法</span></strong></span></h4><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="bash"><code><span class="code-snippet_outer">//if(saleTypeStr&nbsp;==&nbsp;null&nbsp;||&nbsp;saleTypeStr.equals(""))</span></code><code><span class="code-snippet_outer">if(StringUtils.isBlank(saleTypeStr))</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">虽然原方法里无论判不判断空字符或者空格字符都不会影响最终方法的表征，但是从第一行想表达的判断「字符串是不是为空」这件事来看，这行并不能判断「空格字符」存在的情况，所以词不达意，另外也趁机强化记忆下 isBlank 和 isEmpty 的区别。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">org.apache.commons.lang3 里有很多工具类，方法比较成熟逻辑也比较完整。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">同理 org.apache.commons.collections4.CollectionUtils 还有一堆集合操作的工具。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);"><br></span></section><span id="OSC_h4_3"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">equals 判定，常量写前面</span></strong></span></h4><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="bash"><code><span class="code-snippet_outer">//if(saleTypeStr.equals("JX"))</span></code><code><span class="code-snippet_outer">if("JX".equals(saleTypeStr))</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">虽然前面判断过 null，所以这里并不会报空指针，但是但凡之后书写前面漏了，这里就开始报错了。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><span id="OSC_h4_4"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">少用魔法值，定义常量</span></strong></span></h4><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><strong style="color: rgb(62, 62, 62);font-size: 14px;letter-spacing: 0.034em;"></strong></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="java"><code><span class="code-snippet_outer">private&nbsp;static&nbsp;final&nbsp;String&nbsp;JX_SALE_TYPE_STR&nbsp;=&nbsp;"JX";</span></code><code><span class="code-snippet_outer">private static final Integer JX_SALE_TYPE_INT = 1;</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">但凡同一个魔法值在多处用，就怕漏改，所以收束定义在常量下，至少能保证全局引用的统一性。</span></section><section style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><span style="font-size: 15px;color: rgb(62, 62, 62);"><br></span></section><span id="OSC_h4_5"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-top: 8px;margin-bottom: 8px;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">无状态方法，可选择定义为类静态</span></strong></span></h4><p style="line-height: 1.75em;margin-top: 8px;margin-bottom: 8px;"><br></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="typescript"><code><span class="code-snippet_outer">//public&nbsp;Integer&nbsp;parseSaleType(String&nbsp;saleTypeStr)public static Integer parseSaleType(String saleTypeStr)</span></code></pre></section><section style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><br></section><section style="line-height: 1.75em;margin-bottom: 8px;margin-top: 8px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">方法本身跟所在类的实例对象状态无关，且不会诱发线程安全问题，故符合被定义为 static 的条件，可先于对象创建在方法区，防止每个对象创建一次的时候，堆内存创建一次。</span></section><section data-mpa-template="t" mpa-from-tpl="t"><section style="margin: 33px auto;visibility: visible;" mpa-from-tpl="t"><section style="transform: scale(0.9);transform-origin: center center;box-sizing: border-box;visibility: visible;margin-top: 0px;margin-bottom: 0px;line-height: normal;"><section style="display: flex;flex-flow: row;text-align: center;justify-content: center;box-sizing: border-box;visibility: visible;" mpa-from-tpl="t"><section style="display: inline-block;vertical-align: middle;width: 156.797px;align-self: center;box-sizing: border-box;visibility: visible;" mpa-from-tpl="t"><section style="margin-top: 0.5em;margin-bottom: 0.5em;box-sizing: border-box;visibility: visible;" mpa-from-tpl="t"><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;visibility: visible;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503042841" data-ratio="0.3056872037914692" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3b57d41f-bf50-46bc-9f31-e741973316f3.png" data-type="png" data-w="422" style="outline: 0px;letter-spacing: 0.544px;font-size: 14px;visibility: visible !important;width: 117px !important;" referrerpolicy="no-referrer"></section><p style="outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);font-size: 15px;text-align: center;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;color: rgb(0, 17, 255);letter-spacing: 1px;">逻辑简化</span></p></section></section></section></section></section></section><section style="margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;">语法的问题强调完，就得再琢磨琢磨这段逻辑需不需要这么多代码来表述了，乍眼一看没问题，但其实没必要写这么多。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 8px;"><span style="font-size: var(--articleFontsize);letter-spacing: 0.034em;text-align: left;"><br></span></section><span id="OSC_h4_6"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">明确主体逻辑</span></strong></span></h4><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 8px;"><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"><span style="font-size: 15px;color: rgb(62, 62, 62);"><br></span></strong></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 8px;"><strong style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"><span style="font-size: 15px;color: rgb(62, 62, 62);">判断入参有效性 -&gt; 处理核心逻辑 -&gt; 缺省返回</span></strong><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;font-size: 15px;color: rgb(62, 62, 62);">，其实这个方法的构建思路是非常标准且合乎常理的，思考习惯很好，只是在这个简单的方法场景不免逻辑有些冗余。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 8px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 8px;"><span style="font-size: 15px;color: rgb(62, 62, 62);">其实再看这个方法，最核心的逻辑就是把字符串对应到数字上，其他不命中的情况返回 null 就可以了，那么简化逻辑后，为空判定其实可以去掉，直接变为：</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="java"><code><span class="code-snippet_outer">private&nbsp;static&nbsp;final&nbsp;String&nbsp;JX_SALE_TYPE_STR&nbsp;=&nbsp;"JX";</span></code><code><span class="code-snippet_outer">private static final Integer JX_SALE_TYPE_INT = 1;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">public static Integer parseSaleType(String saleTypeStr){</span></code><code><span class="code-snippet_outer">  if(JX_SALE_TYPE_STR.equals(saleTypeStr)){</span></code><code><span class="code-snippet_outer">    return JX_SALE_TYPE_INT;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  return null;</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section><section><section powered-by="xiumi.us"><p style="white-space: normal;margin-top: 0px;margin-bottom: 0px;"><strong style="letter-spacing: 0.034em;"><span style="font-size: 15px;"><br></span></strong></p><span id="OSC_h4_7"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(0, 17, 255);outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">语法简化：三元运算符</span></strong></span></h4><p><br></p></section></section><section style="margin-top: 0px;margin-bottom: 0px;"><span style="color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 0.034em;">再仔细看下场景有没有成熟的范式，【布尔式+返回值+非此即彼】，三元运算符可堪一用。</span></section></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="cs"><code><span class="code-snippet_outer">public static Integer parseSaleType(String saleTypeStr){</span></code><code><span class="code-snippet_outer">  return JX_SALE_TYPE_STR.equals(saleTypeStr) ? JX_SALE_TYPE_INT : null;</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="font-size: 15px;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><section powered-by="xiumi.us"><p style="white-space: normal;"><br></p><span id="OSC_h4_8"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="letter-spacing: 1px;"><span style="outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="color: rgb(0, 17, 255);letter-spacing: 1px;outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">语法简化：Optional</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><br></h4><span id="OSC_h4_9"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="font-size: 15px;">这个场景范式也满足，【可能为空，有后续处理，有条件，有缺省值】，Optional 也算完美契合。</span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><br></h4></section></section></section></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="cpp"><code><span class="code-snippet_outer">public static Integer parseSaleType(String saleTypeStr){</span></code><code><span class="code-snippet_outer">  Optional.ofNullable(saleTypeStr).filter(JX_SALE_TYPE_STR::equals).map(o -&gt; JX_SALE_TYPE_INT).orElse(null);</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><p style="line-height: 1.75em;margin-top: 0px;margin-bottom: 8px;"><br></p><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;"><section powered-by="xiumi.us" style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;"><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;"><section powered-by="xiumi.us" style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;"><span id="OSC_h4_10"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-bottom: 8px;"><span style="letter-spacing: 1px;"><span style="outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="color: rgb(0, 17, 255);outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">方法独立存在的必要性讨论</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-bottom: 8px;"><br></h4><span id="OSC_h4_11"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-bottom: 8px;"><span style="font-size: 15px;">其实语法简化到三元运算符和 Optional 这一步，如果一个方法体内只有这一行，这个方法独立存在的必要性的就开始存疑了，如果所有的转换流程都能收束在工程中的某个环节上，且保证这个方法的引用仅存在一处，那么这一行代码其实放在主干代码上更好，防止来回跳转的代码阅读障碍，当然这也仅仅是在现状下的讨论，如果存在且不仅限于以下几种状况时还得独立出来：</span></h4></section></section></section></section><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><span style="font-size: 15px;">未来除了一种逻辑分支外，还会扩展其他分支，并且有被扩展的可能；</span></section></section></section></li><li style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><span style="font-size: 15px;">虽然还是一种逻辑分支，但是判断的内容变长了，跟上下文和调用状态有关；</span></section></section></section></li><li style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><span style="font-size: 15px;">虽然还是一种逻辑分支，但是逻辑总在调整；</span></section></section></section></li><li style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><span style="font-size: 15px;">一处定义，多点引用；</span></section></section></section><section style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><br></section></section></section></li></ol><section style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;font-size: 15px;"><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503042839" data-ratio="0.328125" data-s="300,640" data-type="png" data-w="256" src="https://oscimg.oschina.net/oscnet/0b0881dd-148e-4d14-91fe-eb53964d59ed.png" style="outline: 0px;letter-spacing: 0.544px;font-size: 16px;visibility: visible !important;width: 122px !important;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);font-size: 15px;text-align: center;line-height: normal;"><span style="outline: 0px;color: rgb(0, 17, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;letter-spacing: 1px;">继续拓展：定义枚举</span></section></section><section style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><section style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">「如无必要，勿增实体」</span></section><section style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><section style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">假如这个传入的字符其实还有很多种，返回的映射也有很多种的时候，其实在这里继续写一堆常量定义就很不理智了。</span></section><section style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><section style="text-align: left;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><section style="margin-top: 0.5em;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-bottom: 8px;font-size: 15px;" powered-by="xiumi.us"><p style="margin-top: 0.5em;text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;margin-bottom: 8px;font-size: 15px;"><br></p><span id="OSC_h4_12"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="letter-spacing: 1px;"><span style="outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="color: rgb(0, 17, 255);letter-spacing: 1px;outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">值枚举构建</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></h4><span id="OSC_h4_13"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">考虑继续将入参的所有可能和出参的所有可能，可以构建为两组枚举值，这样所有的同簇常量就被放到一起了。</span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><img class="rich_pages wxw-img" data-backh="189" data-backw="455" data-galleryid="" data-imgfileid="503042846" data-ratio="0.4153846153846154" data-s="300,640" src="https://oscimg.oschina.net/oscnet/f6a249a0-4411-4e31-abcc-705c6bab2de0.png" data-type="png" data-w="455" style="text-align: center;color: rgba(0, 0, 0, 0.9);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;width: 100%;" referrerpolicy="no-referrer"></h4></section></section></section></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="typescript"><code><span class="code-snippet_outer">public&nbsp;enum&nbsp;SaleTypeStrEnum{</span></code><code><span class="code-snippet_outer">  JX,</span></code><code><span class="code-snippet_outer">  // OTHERS</span></code><code><span class="code-snippet_outer">  ;</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@AllArgsConstructor</span></code><code><span class="code-snippet_outer">@Getter</span></code><code><span class="code-snippet_outer">public enum SaleTypeIntEnum{</span></code><code><span class="code-snippet_outer">  JX(1),</span></code><code><span class="code-snippet_outer">  // OTHERS</span></code><code><span class="code-snippet_outer">  ;</span></code><code><span class="code-snippet_outer">  private Integer code;</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="text-wrap: wrap;outline: 0px;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;font-size: 15px;margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><section style="text-align: left;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row nowrap;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><span style="font-size: 15px;letter-spacing: 1px;">但是这个枚举功能并不完善，因为从入参映射为 SaleTypeStrEnum，依然需要一段转换的逻辑，需要用到 SaleTypeStrEnum::name 来判定传参命中了哪个，所以这个逻辑不应该放在枚举外，继续补充：</span></section></section></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="cs"><code><span class="code-snippet_outer">public&nbsp;enum&nbsp;SaleTypeStrEnum{</span></code><code><span class="code-snippet_outer">  JX,</span></code><code><span class="code-snippet_outer">  // OTHERS </span></code><code><span class="code-snippet_outer">  ;</span></code><code><span class="code-snippet_outer">  public static SaleTypeStrEnum getByName(String saleTypeStr){</span></code><code><span class="code-snippet_outer">    for (SaleTypeStrEnum value : SaleTypeStrEnum.values()) {</span></code><code><span class="code-snippet_outer">      if(value.name().equals(saleTypeStr)){</span></code><code><span class="code-snippet_outer">        return value;</span></code><code><span class="code-snippet_outer">      }</span></code><code><span class="code-snippet_outer">    }</span></code><code><span class="code-snippet_outer">    return null;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;letter-spacing: 1px;text-align: left;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">方法有了，但是每次传进来值都要遍历整个枚举，O(n) 效率太低了，还是老规矩，空间换时间。</span><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="font-size: 15px;color: rgb(62, 62, 62);"><br></span></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="typescript"><code><span class="code-snippet_outer">public&nbsp;enum&nbsp;SaleTypeStrEnum{</span></code><code><span class="code-snippet_outer">  JX,</span></code><code><span class="code-snippet_outer">  // OTHERS</span></code><code><span class="code-snippet_outer">  ;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  /**</span></code><code><span class="code-snippet_outer">    * 预热转换关系到内存</span></code><code><span class="code-snippet_outer">    */</span></code><code><span class="code-snippet_outer">  private static Map&lt;String, SaleTypeStrEnum&gt; NAME_MAP = Arrays.stream(SaleTypeStrEnum.values()).collect(Collectors.toMap(SaleTypeStrEnum::name, Function.identity()));</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  public static SaleTypeStrEnum getByName(String saleTypeStr){</span></code><code><span class="code-snippet_outer">    return NAME_MAP.get(saleTypeStr);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;text-align: left;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">这样每次检索就是 O(1) 了，那么最终方法体内也能使用 switch 管理原本的 if-else</span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="cs"><code><span class="code-snippet_outer">public&nbsp;static&nbsp;Integer&nbsp;parseSaleType(String&nbsp;saleTypeStr){</span></code><code><span class="code-snippet_outer">  switch(SaleTypeStrEnum.getByName(saleTypeStr)){</span></code><code><span class="code-snippet_outer">    case JX:return SaleTypeIntEnum.JX.getCode();</span></code><code><span class="code-snippet_outer">    // OTHERS</span></code><code><span class="code-snippet_outer">    default:return null;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="font-size: 15px;margin-top: 0px;margin-bottom: 0px;"><section style="text-align: justify;justify-content: flex-start;margin: 10px 0%;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 0%;height: auto;line-height: 0;"><section style="text-align: right;" powered-by="xiumi.us"><br></section></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;"><section powered-by="xiumi.us"><p style="white-space: normal;"><br></p><span id="OSC_h4_14"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 0.5em;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;line-height: 1.75em;"><span style="letter-spacing: 1px;"><span style="outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="color: rgb(0, 17, 255);letter-spacing: 1px;outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">关系枚举构建</span></strong></span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></h4><span id="OSC_h4_15"></span><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="text-align: left;background-color: rgb(255, 255, 255);color: rgb(34, 34, 34);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">再仔细思考下，其实这里在描述的内容，无论是哪个枚举描述的内容都是同一件事物，方法本身就是描述两个不同编码的转换关系，且转换关系本身就是单向的，且映射路径极度简单，所以简单化一点，可以直接构建转换关系枚举﻿。</span></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></h4><h4 data-lake-id="ca6fa186228ff7efaa653334195896c8" data-wording="true" style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="503042845" data-ratio="0.5683453237410072" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a9fb2fe6-5cab-4fa2-9653-70f97f05993f.png" data-type="png" data-w="278" style="color: rgb(62, 62, 62);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;text-align: center;letter-spacing: 0.578px;" referrerpolicy="no-referrer"></h4></section></section></section></section></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="typescript"><code><span class="code-snippet_outer">@Getter</span></code><code><span class="code-snippet_outer">@AllArgsConstructor</span></code><code><span class="code-snippet_outer">public enum SaleTypeRelEnum {</span></code><code><span class="code-snippet_outer">  // 不在分别定义两类变量，而是直接定义变量映射关系</span></code><code><span class="code-snippet_outer">  JX("JX", 1),</span></code><code><span class="code-snippet_outer">  // OTHERS</span></code><code><span class="code-snippet_outer">  ;</span></code><code><span class="code-snippet_outer">  private String fromCode;</span></code><code><span class="code-snippet_outer">  private Integer toCode;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  private static Map&lt;String, SaleTypeRelEnum&gt; FROM_CODE_MAP = Arrays.stream(SaleTypeRelEnum.values()).collect(Collectors.toMap(SaleTypeRelEnum::getFromCode, Function.identity()));</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  public static SaleTypeRelEnum get(String saleTypeStr){</span></code><code><span class="code-snippet_outer">    return FROM_CODE_MAP.get(saleTypeStr);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  public static Integer parseCode(String saleTypeStr){</span></code><code><span class="code-snippet_outer">    return Optional.ofNullable(SaleTypeRelEnum.get(saleTypeStr)).map(SaleTypeRelEnum::getToCode).orElse(null);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="color: rgb(62, 62, 62);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;">如果将转关系作为枚举，那么从职责上划分，转换这个动作应该是封闭在枚举内的固有行为，而不该暴露在外，故原来对方法的引用其实应该转为对关系枚举中 SaleTypeEnum::parseCode 方法的引用，O(1) 检索且封闭性良好，同时支持更多简单单向映射关系的管理，要是以后出现的新场景都是这种关系，那够扛很久嘞。</span></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><span style="color: rgb(62, 62, 62);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.034em;"><br></span></section><section style="outline: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);font-size: 11pt;font-family: DengXian;color: rgb(0, 0, 0);letter-spacing: normal;text-align: center;margin-top: 0px;margin-bottom: 0px;line-height: 1.75em;"><img class="rich_pages wxw-img" data-imgfileid="503042844" data-ratio="0.328125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/aec4be25-424c-421a-bd55-847d3abb75e1.png" data-type="png" data-w="256" style="outline: 0px;color: rgb(34, 34, 34);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;visibility: visible !important;width: 133px !important;" referrerpolicy="no-referrer"></section><section style="outline: 0px;text-align: center;margin-top: 0px;margin-bottom: 0px;line-height: 1.75em;"><span style="outline: 0px;box-sizing: inherit;color: rgb(0, 17, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 18px;text-wrap: wrap;background-color: rgb(255, 255, 255);letter-spacing: 1px;">继续拓展：设计模式</span></section><section style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><section style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;">枚举的前提还是基于无状态前提，如果转换的的映射关系不再单纯，变得复杂，枚举的简单映射管理就不 work 了。</span></section><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;">「万事不决，上设计模式」</span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;">哎~就是玩儿~</span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: left;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><br></span></strong></span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: left;outline: 0px;visibility: visible;letter-spacing: 1px;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: left;color: rgb(0, 17, 255);letter-spacing: 1px;outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">策略模式-简单实现</span></strong></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 1px;">首先，依然将传入的字符串作为路由依据，但是传入的内容为了防止有未来扩展，所以构造一个上下文，策略本身基于上下文来处理，借助上文定义的值枚举做策略路由。</span></p><section style="text-align: center;margin-top: 0px;margin-bottom: 0px;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="503042848" data-ratio="0.42483660130718953" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8374ff02-4a1a-4ed7-9a87-c797f2e3fcff.png" data-type="png" data-w="459" style="height: auto !important;" referrerpolicy="no-referrer"></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="java"><code><span class="code-snippet_outer">/**</span></code><code><span class="code-snippet_outer">  * 定义策略接口</span></code><code><span class="code-snippet_outer">  */</span></code><code><span class="code-snippet_outer">public interface SaleTypeParseStrategy{</span></code><code><span class="code-snippet_outer">  Integer parse(SaleTypeParseContext saleTypeParseContext);</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">/**</span></code><code><span class="code-snippet_outer">  * 策略实现</span></code><code><span class="code-snippet_outer">  */</span></code><code><span class="code-snippet_outer">public class JxSaleTypeParseStrategy implements SaleTypeParseStrategy{</span></code><code><span class="code-snippet_outer">  @Override</span></code><code><span class="code-snippet_outer">  public Integer parse(SaleTypeParseContext saleTypeParseContext) {</span></code><code><span class="code-snippet_outer">    return SaleTypeIntEnum.JX.getCode();</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">/**</span></code><code><span class="code-snippet_outer">  * 调用上下文</span></code><code><span class="code-snippet_outer">  */</span></code><code><span class="code-snippet_outer">@Data</span></code><code><span class="code-snippet_outer">public class SaleTypeParseContext{</span></code><code><span class="code-snippet_outer">  private SaleTypeStrEnum saleTypeStr;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  private SaleTypeParseStrategy parseStrategy;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  public Integer pasre(){</span></code><code><span class="code-snippet_outer">    return parseStrategy.parse(this);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">public static Integer parseSaleType(String saleTypeStr){</span></code><code><span class="code-snippet_outer">  SaleTypeStrEnum saleTypeEnum = SaleTypeStrEnum.getByName(saleTypeStr);</span></code><code><span class="code-snippet_outer">  SaleTypeParseContext context = new SaleTypeParseContext();</span></code><code><span class="code-snippet_outer">  context.setSaleTypeStr(saleTypeEnum);</span></code><code><span class="code-snippet_outer">  switch(saleTypeStr){</span></code><code><span class="code-snippet_outer">    // 策略路由</span></code><code><span class="code-snippet_outer">    case JX:context.setParseStrategy(new JxSaleTypeParseStrategy());break;</span></code><code><span class="code-snippet_outer">    // 继续扩展</span></code><code><span class="code-snippet_outer">    default:return null;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  return context.parse();</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;">当然，如果是这种没有上下文强依赖的策略，无论是静态单例还是 Spring 单例都会是一个不错的选择。SaleTypeParseContext 本身可以继续扩展内容和其他属性继<span style="color: rgb(62, 62, 62);">续丰富参数，策略实现中也可以继续针对更多参数扩充逻辑。</span></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="background-color: rgb(255, 255, 255);font-size: 16px;font-weight: bold;text-indent: 0em;text-align: left;font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;color: rgb(0, 17, 255);letter-spacing: 1px;"><strong style="outline: 0px;visibility: visible;"><span style="background-color: rgb(255, 255, 255);font-weight: bold;text-align: left;color: rgb(20, 20, 220);text-indent: 0em;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><br></span></strong></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="background-color: rgb(255, 255, 255);font-size: 16px;font-weight: bold;letter-spacing: 1px;text-indent: 0em;text-align: left;font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="color: rgb(20, 20, 220);text-indent: 0em;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><span style="text-wrap: wrap;font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: left;outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="text-wrap: wrap;font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-align: left;color: rgb(0, 17, 255);letter-spacing: 1px;outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">策略工厂-手动容器</span></strong></span></strong><strong style="outline: 0px;visibility: visible;"></strong></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;"><br></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">策略是个好东西，但是简单实现下，这里依然将策略实现的路由过程交给了调用方来做，那么每增加一种实现，调用点还要继续改，要是恰好有若干调用点就完犊子了，并不优雅，所以搞个中间层容器工厂，解耦一下依赖。</span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;"><br></span></p><p style="text-align: center;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="503042847" data-ratio="0.3641207815275311" data-s="300,640" src="https://oscimg.oschina.net/oscnet/04ea1adc-df26-4624-87ea-c935c47a385b.png" data-type="png" data-w="563" style="height: auto !important;" referrerpolicy="no-referrer"></p><p style="text-align: justify;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="java"><code><span class="code-snippet_outer">@Component</span></code><code><span class="code-snippet_outer">public static class SaleTypeParseStrategyContainer{</span></code><code><span class="code-snippet_outer">  public final static Map&lt;SaleTypeStrEnum, SaleTypeParseStrategy&gt; STRATEGY_MAP = new HashMap&lt;&gt;();</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  @PostConstruct</span></code><code><span class="code-snippet_outer">  public void init(){</span></code><code><span class="code-snippet_outer">    STRATEGY_MAP.put(SaleTypeStrEnum.JX, new JxSaleTypeParseStrategy());</span></code><code><span class="code-snippet_outer">    // 继续拓展</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  public Integer parse(SaleTypeParseContext saleTypeParseContext){</span></code><code><span class="code-snippet_outer">    return Optional.ofNullable(STRATEGY_MAP.get(saleTypeParseContext.getSaleTypeStr())).map(strategy-&gt; strategy.parse(saleTypeParseContext)).orElse(null);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;">容器内手动创建各个策略的实现的单例后进行托管，那调用方只需要去构建上下文就好了，实际调用的方法更换为 SaleTypeParseStrategyContainer::parse，那后续无论策略如何丰富，调用方都不需要再感知这部分变化。后续出现了新的策略实现，<span style="color: rgb(62, 62, 62);">则在工厂内继续追加路由表即可。</span></span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="letter-spacing: 1px;"><strong style="font-size: 16px;letter-spacing: 1px;text-indent: 0em;text-align: left;color: rgb(0, 17, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;"><span style="text-indent: 0em;font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><br></span></strong></span></strong></span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="letter-spacing: 1px;"><strong style="font-size: 16px;letter-spacing: 1px;text-indent: 0em;text-align: left;color: rgb(0, 17, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;"><span style="color: rgb(20, 20, 220);text-indent: 0em;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><span style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(0, 17, 255);outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">注册与发现&amp;策略工厂-Spring 容器</span></strong></span></strong><strong style="font-size: 16px;letter-spacing: 1px;text-indent: 0em;text-align: left;color: rgb(0, 17, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;"></strong></span></p><section><section powered-by="xiumi.us"><section><section powered-by="xiumi.us"><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-size: 15px;letter-spacing: 1px;">如果考虑到策略会依赖 Spring 的 bean 和其他有状态对象，那么这里也可以改成 Spring 的注入模式，同时继续将「支持哪种情况」由托管方容器移动至策略内部，改成由策略实现自身去注册到容器中。</span></p><p style="margin-bottom: 8px;margin-top: 8px;line-height: 1.75em;"><br></p><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="503042850" data-ratio="0.33276740237691" data-s="300,640" src="https://oscimg.oschina.net/oscnet/5f1309e8-d605-426f-867e-20fef37033d9.png" data-type="png" data-w="589" style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;text-align: center;" referrerpolicy="no-referrer"></section></section></section></section></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="java"><code><span class="code-snippet_outer">public&nbsp;interface&nbsp;SaleTypeParseStrategy{</span></code><code><span class="code-snippet_outer">  Integer parse(SaleTypeParseContext saleTypeParseContext);</span></code><code><span class="code-snippet_outer">  // 所支持的情况</span></code><code><span class="code-snippet_outer">  SaleTypeStrEnum support();</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@Component</span></code><code><span class="code-snippet_outer">public class JxSaleTypeParseStrategy implements SaleTypeParseStrategy{</span></code><code><span class="code-snippet_outer">  @Override</span></code><code><span class="code-snippet_outer">  public Integer parse(SaleTypeParseContext saleTypeParseContext) {</span></code><code><span class="code-snippet_outer">    return SaleTypeIntEnum.JX.getCode();</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  @Override</span></code><code><span class="code-snippet_outer">  public SaleTypeStrEnum support() {</span></code><code><span class="code-snippet_outer">    return SaleTypeStrEnum.JX;</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@Component</span></code><code><span class="code-snippet_outer">public static class SaleTypeParseStrategyContainer{</span></code><code><span class="code-snippet_outer">  public final static Map&lt;SaleTypeStrEnum, SaleTypeParseStrategy&gt; STRATEGY_MAP = new HashMap&lt;&gt;();</span></code><code><span class="code-snippet_outer">  @Autowired</span></code><code><span class="code-snippet_outer">  private List&lt;SaleTypeParseStrategy&gt; parseStrategyList;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  @PostConstruct</span></code><code><span class="code-snippet_outer">  public void init(){</span></code><code><span class="code-snippet_outer">    parseStrategyList.stream().forEach(strategy-&gt; STRATEGY_MAP.put(strategy.support(), strategy));</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  public Integer parse(SaleTypeParseContext saleTypeParseContext){</span></code><code><span class="code-snippet_outer">    return Optional.ofNullable(STRATEGY_MAP.get(saleTypeParseContext.getSaleTypeStr())).map(strategy-&gt; strategy.parse(saleTypeParseContext)).orElse(null);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);">这样的话，连容器都不用改了，追加策略实现的改动只与当前策略有关，调用方和容器类都不需要感知了，但是缺点就在于如果有俩策略支持的情况相同，取到的是哪个<span style="color: rgb(62, 62, 62);letter-spacing: 1px;">就听天由命了~</span></span></p><p style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;color: rgb(62, 62, 62);letter-spacing: 1px;"><br></span></p><p style="font-size: 15px;text-align: left;justify-content: flex-start;flex-flow: row;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(20, 20, 220);font-weight: bold;letter-spacing: 1px;background-color: rgb(255, 255, 255);font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 16px;text-indent: 0em;"><strong style="letter-spacing: 1px;text-indent: 0em;text-wrap: wrap;font-size: 16px;text-align: left;color: rgb(0, 17, 255);font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;"><span style="color: rgb(20, 20, 220);text-indent: 0em;outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;"><span style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;outline: 0px;visibility: visible;color: rgb(0, 17, 255);"><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">▐</span></strong><strong style="outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">&nbsp;&nbsp;</span></strong></span><strong style="font-family: -apple-system-font, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(0, 17, 255);outline: 0px;visibility: visible;"><span style="outline: 0px;font-family: Optima-Regular, PingFangTC-light;visibility: visible;">注册与发现&amp;责任链</span></strong></span></strong></span></p><section style="font-size: 15px;text-align: justify;justify-content: flex-start;flex-flow: row;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="color: rgb(62, 62, 62);letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: justify;"><br></span></section><section style="font-size: 15px;text-align: justify;justify-content: flex-start;flex-flow: row;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="color: rgb(62, 62, 62);letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: justify;">当然如果不能事先知道「支持哪种情况」，只能在运行时判断「是否支持」，将事前判定改为运行时判定，广义责任链会是一个不错的选择，把所有策略排成一排，谁举手说自己能处理就谁处理。</span></section><p style="font-size: 15px;text-align: left;justify-content: flex-start;flex-flow: row;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: justify;"><br></span></p><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="color: rgb(62, 62, 62);font-size: 15px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="503042849" data-ratio="0.3082077051926298" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e9efe248-d032-45da-a437-a20a73077a84.png" data-type="png" data-w="597" style="text-align: center;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"></section><section style="text-align: justify;margin-top: 0px;margin-bottom: 0px;"><br></section><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="java"><code><span class="code-snippet_outer">public&nbsp;interface&nbsp;SaleTypeParseStrategy{</span></code><code><span class="code-snippet_outer">  Integer parse(SaleTypeParseContext saleTypeParseContext);</span></code><code><span class="code-snippet_outer">  // 用于判断是否支持</span></code><code><span class="code-snippet_outer">  boolean support(SaleTypeParseContext saleTypeParseContext);</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@Component</span></code><code><span class="code-snippet_outer">public class JxSaleTypeParseStrategy implements SaleTypeParseStrategy{</span></code><code><span class="code-snippet_outer">  @Override</span></code><code><span class="code-snippet_outer">  public Integer parse(SaleTypeParseContext saleTypeParseContext) {</span></code><code><span class="code-snippet_outer">    return SaleTypeIntEnum.JX.getCode();</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">  @Override</span></code><code><span class="code-snippet_outer">  public boolean support(SaleTypeParseContext saleTypeParseContext) {</span></code><code><span class="code-snippet_outer">    return SaleTypeStrEnum.JX.equals(saleTypeParseContext.getSaleTypeStr());</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">@Component</span></code><code><span class="code-snippet_outer">public static class SaleTypeParseStrategyContainer{</span></code><code><span class="code-snippet_outer">  @Autowired</span></code><code><span class="code-snippet_outer">  private List&lt;SaleTypeParseStrategy&gt; parseStrategyList;</span></code><code><span class="code-snippet_outer"><br></span></code><code><span class="code-snippet_outer">  public Integer parse(SaleTypeParseContext saleTypeParseContext){</span></code><code><span class="code-snippet_outer">    return parseStrategyList.stream()</span></code><code><span class="code-snippet_outer">        .filter(strategy-&gt;strategy.support(saleTypeParseContext))</span></code><code><span class="code-snippet_outer">        .findAny()</span></code><code><span class="code-snippet_outer">        .map(strategy-&gt;strategy.parse(saleTypeParseContext))</span></code><code><span class="code-snippet_outer">        .orElse(null);</span></code><code><span class="code-snippet_outer">  }</span></code><code><span class="code-snippet_outer">}</span></code></pre></section><section style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><br></section><section style="font-size: 15px;text-align: justify;justify-content: flex-start;flex-flow: row;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="color: rgb(62, 62, 62);letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: justify;font-size: 15px;">这样的实现，依然可以将改动收束在策略本体上，修改相对集中，可以无耦地进行扩展。</span></section><section style="font-size: 15px;text-align: justify;justify-content: flex-start;flex-flow: row;vertical-align: bottom;width: auto;min-width: 10%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-top: 8px;line-height: 1.75em;margin-bottom: 8px;"><span style="color: rgb(62, 62, 62);letter-spacing: 1px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;text-align: justify;font-size: 15px;"><br></span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);text-align: center;line-height: normal;"><img class="rich_pages wxw-img" data-imgfileid="503042853" data-ratio="0.328125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/564c4bbd-3a0d-430c-bde8-35f76f4e0d5a.png" data-type="png" data-w="256" style="outline: 0px;color: rgb(51, 51, 51);font-size: 20px;font-weight: bold;letter-spacing: 0.578px;visibility: visible !important;width: 134px !important;" referrerpolicy="no-referrer"></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(100, 99, 99);font-size: 15px;text-align: center;line-height: normal;"><span style="outline: 0px;font-family: -apple-system, system-ui, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;font-size: 18px;color: rgb(0, 17, 255);">其他拓展</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">以上还只是在 JAVA 语言内去玩一些花样，在当前这种场景下肯定是有过度设计的嫌疑，7 行代码可以缩到 1 行，也可以扩充到 70 行，所以说嘛：</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">「用代码行数来考量一个程序员是不太合适滴！~」</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿</span></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">当然了，也还可以继续借助其他的中间件搞花样，包括但不限于：</span></section><ol class="list-paddingleft-1" style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;"><li style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;letter-spacing: 1px;"><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">植入 Diamond 走走动态配置开关的思路；<br></span></section></li><li style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;letter-spacing: 1px;"><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">植入 QLExpress 搞搞逻辑表达式的思路；</span></section></li><li style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;letter-spacing: 1px;"><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">把策略实现改成 HsfProvider 走分布式调用思路；</span></section></li><li style="line-height: 1.75em;margin-top: 0px;margin-bottom: 0px;font-size: 15px;letter-spacing: 1px;"><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">借助一些成熟的网关走服务路由的的调用思路；</span></section></li></ol><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><br></section><section style="margin-top: 8px;margin-bottom: 8px;line-height: 1.75em;"><span style="font-size: 15px;letter-spacing: 1px;">就不再此再过多展开了。</span><span style="color: rgb(100, 99, 99);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 0.578px;text-align: center;"></span></section><p><br></p><section data-role="outer" label="Powered by 135editor.com" style="margin-bottom: 0px;outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section style="margin-top: 5px;margin-bottom: 8px;outline: 0px;letter-spacing: 0.544px;font-size: 16px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;text-align: center;line-height: 1.75em;"><span style="outline: 0px;color: rgb(0, 17, 255);"><strong style="outline: 0px;">¤</strong></span><span style="outline: 0px;"><strong style="outline: 0px;">&nbsp;拓展阅读&nbsp;</strong></span><span style="outline: 0px;color: rgb(0, 17, 255);"><strong style="outline: 0px;">¤</strong></span></section><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;letter-spacing: 0.544px;font-size: 16px;word-break: break-all;color: rgb(0, 0, 0);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;text-align: center;line-height: 1.75em;"><br style="outline: 0px;"></section><section style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;min-height: 24px;clear: both;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565944923443904512%23wechat_redirect" textvalue="3DXR 技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">3DXR 技术</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1533906991218294785%23wechat_redirect" textvalue="终端技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">终端技术</a>&nbsp;|&nbsp; 
   <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1592015847500414978%23wechat_redirect" textvalue="音视频技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">音视频技术</a></section><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1539610690070642689%23wechat_redirect" textvalue="服务端技术" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">服务端技术</a><span style="outline: 0px;letter-spacing: 0.544px;">&nbsp;|&nbsp;</span><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D2565883875634397185%23wechat_redirect" textvalue="技术质量" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">技术质量</a>&nbsp;|&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fmp%2Fappmsgalbum%3F__biz%3DMzAxNDEwNjk5OQ%3D%3D%26action%3Dgetalbum%26album_id%3D1522425612282494977%23wechat_redirect" textvalue="数据算法" linktype="text" imgurl="" imgdata="null" tab="innerlink" data-linktype="2" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">数据算法</a></p><p style="margin-top: 8px;margin-bottom: 8px;outline: 0px;min-height: 24px;font-family: -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0.544px;text-indent: 0em;text-align: center;line-height: 1.75em;visibility: visible;"><br style="outline: 0px;"></p><section class="mp_profile_iframe_wrp" style="margin-bottom: 24px;outline: 0px;"><mp-common-profile class="custom_select_card mp_profile_iframe js_wx_tap_highlight" data-pluginname="mpprofile" data-id="MzAxNDEwNjk5OQ==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/33P2FdAnju8t5nZGhAatCrc4e2iaDfAaoInribRKxc7MOqdTGygfcLqSDxhj0trCHVEh94Sjl7zuWYzwouYtJ0VQ/300?wx_fmt=png&amp;wxfrom=19" data-nickname="大淘宝技术" data-alias="AlibabaMTT" data-signature="大淘宝技术官方账号" data-from="2" data-index="0" data-origin_num="690" data-isban="0" data-biz_account_status="0" data-weui-theme="light" data-is_biz_ban="0"></mp-common-profile></section></section><section><section powered-by="xiumi.us"><section><section><section><section><article data-identifier-application__slash__x-doc-key="mxPOGyPLWx65nKa9"></article></section></section></section></section></section></section><section style="margin-bottom: 0px;"><section style="display: none;margin-top: 0px;"><br></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - 大淘宝技术（AlibabaMTT）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4662964/blog/10860307</guid>
            <link>https://my.oschina.net/u/4662964/blog/10860307</link>
            <author>
                <![CDATA[大淘宝技术]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[MySQL 8.3.0 GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>MySQL 8.3.0 于 2024 年 1 月 16 日正式发行，该版本的一些主要变化包括：</p><ul><li><p>企业版的数据屏蔽和脱敏功能中增加了在副本（次要成员）服务器的的内存中刷新数据的能力。可以通过「masking_dictionaries_flush()」函数进行手动刷新，也可以通过调度组件使用新的变量「componet_masking.dictionaries_flush_interval_seconds」配置为定时刷新。</p></li><li><p>企业版支持使用「component_telemetry」组件，收集服务器 OpenTelemetry 格式的度量数据。（仅支持 Linux 平台）</p></li><li><p>删除--innodb 和 --skip-innodb 服务器选项。从 MySQL 5.6 版本起，innoDB 作为默认的存储引擎，--innodb 和 --skip-innodb 服务器选项已经失去存在的意义，在此版本正式删除</p></li><li><p>删除 InnoDB memcached 插件。该插件在 8.0.22 中降级使用，在此版本中正式删除</p></li><li><p>删除 MySQL 复制中部分服务器选项和变量。这些变量在之前的版本进行了降级使用，在此版本中正式删除，包括：</p><ul><li><p>--slave-rows-search-algorithms</p></li><li><p>log_bin_use_v1_events</p></li><li><p>--relay-log-info-file</p></li><li><p>--relay-log-info-repository</p></li><li><p>--master-info-file</p></li><li><p>--master-info-repository</p></li><li><p>transaction_write_set_extraction</p></li><li><p>group_replication_ip_whitelist</p></li><li><p>group_replication_primary_member</p></li></ul></li><li><p>禁止使用非空的「IGNORE_SERVER_IDS」列表。从此版本起，当开启基于 GTID 进行复制时，将不再允许「CHANGE REPLICATION SOURCE TO」指向一个非空的「IGNORE_SERVER_IDS」列表，（由于「IGNORE_SERVER_IDS」与 GTID 模式不兼容，在 8.0 中已经降级处理），同理，如果一个已经存在的复制通道，在创建时使用了忽略服务器的列表，当其开启 GTID 模式时，也将报错。用户可以使用「CHANGE REPLICATION SOURCE TO IGNORE_SERVER_IDS = ();」清空忽略的服务器列表。</p></li><li><p>GTID 扩展格式。基于 GTID 的复制扩展了 GTID 的格式，用户可以为 GTID 打上标签，方便对一组事务进行识别管理。新的格式为「UUID:&lt;TAG&gt;:NUMBER」，「&lt;TAG&gt;」是任意字符串，可以通过「SET gtid_next」进行设置，并在当前会话中持久有效。</p></li><li><p>自动化升级。在 Windows 上，MySQL Configurator 可以执行原地升级。例如「MySQL Server」8.3.0 可以取代现有的 MySQL Server 8.2.0 安装，包括更新和重命名数据目录。</p></li><li><p>增加了「explain_json_format_version」系统变量，用于「EXPLAIN FORMAT=JSON」语句。1 为默认值，与之前的格式一致，2 是基于访问路径的，目的为未来的优化器提供更好的兼容性。</p></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#222222">以上内容是 8.3.0 版本的一个快速浏览，详细信息可访问<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Fmysql%2Fcategory%2Fmsq-announcements" target="_blank">MySQL 官网</a><span style="background-color:#ffffff; color:#222222">。</span><span style="background-color:#ffffff; color:#333333">&nbsp;</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#222222">稿源：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fyi5j80lvOBNqCRWMBz5fqQ" target="_blank">https://mp.weixin.qq.com/s/yi5j80lvOBNqCRWMBz5fqQ</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 02:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276047/mysql-8-3-0-ga</guid>
            <link>https://www.oschina.net/news/276047/mysql-8-3-0-ga</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[禅道软件获 2024 首个 GVP（最有价值开源项目）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">2024 开门见喜！1 月 1 日，</span><strong>禅道项目管理软件与旗下产品「ZUI 前端 UI 框架」入选 Gitee 最有价值开源项目计划</strong><span style="background-color:#ffffff; color:#333333">，</span><span style="background-color:#ffffff; color:#337fe5"><strong>禅道项目管理软件荣获 2024 首个 GVP（最有价值开源项目）</strong></span><span style="background-color:#ffffff; color:#333333">！</span></p><div><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Fzentao%2F202401%2Ff_2bcd4ea0943f839941cedad5b6bc543e.jpg" target="_blank"><img align="" alt="禅道-最有价值开源项目" height="298" src="https://cdn.easycorp.cn/web/data/upload/zentao/202401/f_2bcd4ea0943f839941cedad5b6bc543e.jpg" width="500" referrerpolicy="no-referrer"></a></div><p><span style="background-color:#ffffff; color:#333333">GVP（Gitee Most Valuable Project）最有价值开源项目计划是 Gitee 综合评定出的优秀开源项目的展示平台，代表了开源项目的高质量能力与水平。</span><br> &nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在十四年的开源之路中，禅道项目管理软件在技术架构、产品创新、产品质量、社区参与度和用户影响力等方面都有着出色的表现。同时，禅道不断关注和研究业内实践，有机融合 IPD、SAFe、CMMI、Scrum、看板、瀑布和 DevOps 等七大项目管理模型，吸收人工智能（AI）、商业智能（BI）和信息管理（IM）等前沿技术，<strong><span style="color:#337fe5">旨在为用户提供专业高效的项目管理工具及落地解决方案</span></strong>。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Fzentao%2F202401%2Ff_a7a01cec65c980b562bb018f156b7065.jpg" target="_blank"><img align="" alt="禅道-全生命周期项目管理软件" height="1425" src="https://cdn.easycorp.cn/web/data/upload/zentao/202401/f_a7a01cec65c980b562bb018f156b7065.jpg" width="500" referrerpolicy="no-referrer"></a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Fzentao%2F202401%2Ff_fcca93a985b436fd8e7b9270e65c223a.jpg" target="_blank"><img align="" alt="禅道-全生命周期项目管理软件" height="1079" src="https://cdn.easycorp.cn/web/data/upload/zentao/202401/f_fcca93a985b436fd8e7b9270e65c223a.jpg" width="500" referrerpolicy="no-referrer"></a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 18 Jan 2024 00:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276041/zentao-gvp</guid>
            <link>https://www.oschina.net/news/276041/zentao-gvp</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里云 MongoDB 7.0 正式发布，带来更加强大、高效、安全的数据库解决方案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0"><strong>2024 年 1 月 10 日，阿里云 MongoDB 7.0 版本正式发布</strong>，带来了诸多创新功能和显著改进，旨在提升性能、增强数据管理能力，并为开发者提供更丰富、更灵活的工具集。无论是在大规模数据处理、实时分析还是在构建高性能应用方面，MongoDB 7.0 都无疑是值得期待和信赖的选择。</p><p><img alt="" height="412" src="https://oscimg.oschina.net/oscnet/up-29cecb902f8b727b7168e653596a751f1dd.png" width="748" referrerpolicy="no-referrer"><img alt="" src="https://xiumi.us/studio/v5#/paper/for/509077302/cube/0" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><em><strong><span>开发简化</span></strong></em></p><p style="margin-left:0; margin-right:0">增强查询语言，包括操作符、变量和索引，<strong>可在 MongoDB 直接执行多种数值运算和高性能查询</strong>，提升工作效率。</p><p style="margin-left:0; margin-right:0"><em><strong><span>性能提升</span></strong></em></p><p style="margin-left:0; margin-right:0">通过自动碎片整理减少数据 chunk 的数量和引入新的查询执行引擎，<strong>使查询性能较 6.0 版本有大幅的提升</strong>。</p><p style="margin-left:0; margin-right:0"><span><em><strong>简化迁移</strong></em></span></p><p style="margin-left:0; margin-right:0">让迁移和系统间的数据同步变得更简单，<strong>使得从传统关系型数据库业务负载转移到阿里云 MongoDB 的任务更加快速和弹性</strong>，从而突破传统关系型数据库的限制和扩展的瓶颈。</p><p style="margin-left:0; margin-right:0"><em><strong><span>安全性</span></strong></em></p><p style="margin-left:0; margin-right:0">MongoDB 是能够快速实施可搜索加密方案的领先平台，<strong>让开发者在加密资料不解密的情况下进行查询，快速找到所需资料。</strong></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0">MongoDB 高级解决方案专家黄东旭表示：</p><p style="margin-left:0; margin-right:0">「<strong>MongoDB 7.0 通过持续创新和优化，为开发者和企业用户提供更强大、高效、安全的数据库解决方案。MongoDB 从诞生起就是由开发者而创建，为开发者而创建。在未来，MongoDB 也会继续将开发者置于首位，为开发者提供更多、更强大的新功能。</strong>」</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0">阿里云 MongoDB 技术专家钟离表示：</p><p style="margin-left:0; margin-right:0">「<strong>MongoDB 7.0 带来了不少新特性，而阿里云在云原生上能够提供包括快速弹性、快速克隆回档和智能运维等特性，使得阿里云与 MongoDB 的合作实现一加一大于二的效果。</strong>」</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong>阿里云 MongoDB 7.0 的发布标志着这个业界领先的 NoSQL 数据库系统的一个重要里程碑。</strong>MongoDB 在 2019 年就被 Stack Overflow 评为<strong>最被开发者喜爱</strong>的数据库，目前在数据库领域的知名排行榜 DB-Engines Rankings 中已上升至<strong>第五</strong>。MongoDB 这些年一直在不断地进行版本的演进，从 2015 年的 3.0 的版本，到刚发布的 7.0 版本，持续推出更优质的功能和特性，让开发者可以获得集成丰富工具的统一平台，改善开发体验，对应用负载进行现代化改造。</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p><img alt="" height="408" src="https://oscimg.oschina.net/oscnet/up-104c407750f6abbe4f6aa7da113ddc5a669.png" width="741" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>阿里云是中国唯一能提供 MongoDB 最新版本的云厂商。</strong>从 2021 年 5 月国内独家首发 5.0 版本，到如今的 7.0 版本 ，阿里云 MongoDB 始终跟随 MongoDB 公司的发布节奏，致力于为开发者带来最新版本的云服务体验。阿里云与 MongoDB 战略合作四周年，目前已经成为 MongoDB 在中国最大的云服务提供商，业务拓展至互联网、游戏、汽车、制造、零售等行业，累计为数万名客户提供 MongoDB 云服务。</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0">请访问产品网站，了解更多阿里云 MongoDB 的介绍。</p><p><img alt="" height="325" src="https://oscimg.oschina.net/oscnet/up-b457fd48dd92ec01dddf398b0536e6adbb5.png" width="588" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">关注获取更多精彩内容</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0">中国官方网站</p><p style="margin-left:0; margin-right:0">www.mongodb.com/zh-cn</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 17 Jan 2024 14:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276036/mongodb-7-0-released</guid>
            <link>https://www.oschina.net/news/276036/mongodb-7-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[书生·浦语 2.0（InternLM2）大语言模型正式开源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>1 月 17 日，书生·浦语 2.0（InternLM2）发布会暨书生·浦源大模型挑战赛启动仪式在上海举行。上海人工智能实验室与商汤科技联合香港中文大学和复旦大学正式发布新一代大语言模型<strong>书⽣·浦语 2.0（InternLM2）</strong>。</p><p><img src="https://oscimg.oschina.net/oscnet/up-52e9a3ed647ca67a108395c42fa403f5137.jpg" referrerpolicy="no-referrer"></p><blockquote><p>开源地址</p><ul><li>Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FInternLM%2FInternLM" target="_blank">https://github.com/InternLM/InternLM</a></li><li>HuggingFace：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Finternlm" target="_blank">https://huggingface.co/internlm</a></li><li>ModelScope：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Forganization%2FShanghai_AI_Laboratory" target="_blank">https://modelscope.cn/organization/Shanghai_AI_Laboratory</a></li></ul></blockquote><p>据介绍，InternLM2 是在 2.6 万亿 token 的高质量语料上训练得到的。沿袭第一代书生·浦语（InternLM）的设定，InternLM2 包含 7B 及 20B 两种参数规格及基座、对话等版本，满足不同复杂应用场景需求。秉持「以高质量开源赋能创新」理念，上海 AI 实验室继续提供 InternLM2 免费商用授权。</p><p>InternLM2 的核心理念在于回归语言建模的本质，致力于通过提高语料质量及信息密度，实现模型基座语言建模能力获得质的提升，进而在数理、代码、对话、创作等各方面都取得长足进步，<strong>综合性能达到同量级开源模型的领先水平。</strong>其支持 200K token 的上下文，一次性接收并处理约 30 万汉字的输入内容，准确提取关键信息，实现长文本中「大海捞针」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7c9cb74f4a31bdfb986e5bd545788786bac.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-318647a9bfbcddcb935f2efd51bc26c7cdf.png" referrerpolicy="no-referrer"></p><p>此外，InternLM2 的各项能力获得全面进步，相比于初代 InternLM，在推理、数学、代码等方面的能力提升尤为显著，综合能力领先于同量级开源模型。</p><p>根据大语言模型的应用方式和用户关注的重点领域，研究人员定义了语言、知识、推理、数学、代码、考试等六个能力维度，在 55 个主流评测集上对多个同量级模型的表现进行了综合评测。评测结果显示，InternLM2 的轻量级（7B）及中量级（20B）版本性能在同量级模型中表现优异。</p><p><img src="https://oscimg.oschina.net/oscnet/up-63b21de53ea876e2f73bebcc2d1cb185f26.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-5b27ccfd736b8e6c812fa412f2b84901be4.png" referrerpolicy="no-referrer"></p><ul></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 17 Jan 2024 12:09:49 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276033/shanghai-ai-lab-internlm2</guid>
            <link>https://www.oschina.net/news/276033/shanghai-ai-lab-internlm2</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
