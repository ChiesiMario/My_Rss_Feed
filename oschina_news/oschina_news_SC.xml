<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 30 Sep 2023 21:52:55 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Meshery —— 可扩展的 Kubernetes 管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Meshery&nbsp;是一个自助服务工程平台，是一个开源云原生管理器，可以设计和管理所有基于 Kubernetes 的基础设施和应用程序。</p><p>除其他功能外，作为一个可扩展的平台，Mesery 提供可视化和协作式 GitOps，将你从 YAML 的链条中解放出来，同时管理 Kubernetes 多集群部署。</p><p><img alt="" height="281" src="https://static.oschina.net/uploads/space/2023/0922/153608_075j_4252687.gif" width="500" referrerpolicy="no-referrer"></p><p>Meshery 管理 Kubernetes 集群的配置、配置和操作，同时支持数百种不同类型的云原生基础设施集成。</p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Meshery 还提供了包含配置最佳实践的<a href="https://meshery.io/catalog">精选设计模板目录。</a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>使用以 GitOps 为中心的方法，以可视化方式协作设计和管理您的基础设施和微服务。使用 Meshery 来互操作你的各种云原生系统。借助 REST 和 GraphQL API，可以通过 NATS、CloudEvents 和 gRPC 促进与 Meshery 作为可扩展平台的集成。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>Meshery 支持&nbsp;<a href="https://meshery.io/integrations">220 多个云原生集成</a>。</p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/meshery</guid>
            <link>https://www.oschina.net/p/meshery</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 Vue3 + Typescript 的低代码开发工具]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-vtj" class="anchor" href="https://gitee.com/newgateway/vtj#vtj"></a>VTJ</h1><p>VTJ 一款基于 Vue3 + Typescript 的低代码开发工具，内置了设计器引擎、渲染器和代码生成器。</p><p><img src="https://gitee.com/newgateway/vtj/raw/master/dev/public/startup.png" alt="VTJ.PRO" referrerpolicy="no-referrer"></p><h2><a id="user-content-演示" class="anchor" href="https://gitee.com/newgateway/vtj#%E6%BC%94%E7%A4%BA"></a>演示</h2><ul><li><p><a href="https://gitee.com/link?target=http%3A%2F%2Fvtj.pro">http://vtj.pro</a></p></li><li><p><a href="http://newgateway.gitee.io/vtj" rel="nofollow">http://newgateway.gitee.io/vtj</a></p></li></ul><h2><a id="user-content-vtj-的特点" class="anchor" href="https://gitee.com/newgateway/vtj#vtj-%E7%9A%84%E7%89%B9%E7%82%B9"></a>VTJ 的特点</h2><ul><li>面向前端开发者，不改变前端开发流程和编码习惯，会 Vue 就会用，无学习成本。</li><li>内置代码引擎，采用配置化构建，所有部件都支持自定义，可单独使用引擎实现属于你自己的低代码平台，对标 Low-Code Engine。</li><li>IDE 提供本地离线服务，安全易接入，采用设计器和渲染器分离，不污染项目代码。</li><li>内置丰富组件提供支持，可定制可复用区块组件。</li></ul><p><img src="https://gitee.com/newgateway/vtj/raw/master/dev/public/preview.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><h2><a id="user-content-开发环境要求" class="anchor" href="https://gitee.com/newgateway/vtj#%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E8%A6%81%E6%B1%82"></a>开发环境要求</h2><p>VTJ 使用了最新的 Vue3 生态技术栈，要求 Node 版本必须是 v18+， 建议使用 nvm 切换 Node 版本。</p><h2><a id="user-content-快速体验" class="anchor" href="https://gitee.com/newgateway/vtj#%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C"></a>快速体验</h2><p>VTJ 提供了项目脚手架，可快速创建新项目。 命令：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">npm create vtj@latest <span class="nt">--</span><span class="nt">-t</span> web</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-安装到现有项目" class="anchor" href="https://gitee.com/newgateway/vtj#%E5%AE%89%E8%A3%85%E5%88%B0%E7%8E%B0%E6%9C%89%E9%A1%B9%E7%9B%AE"></a>安装到现有项目</h2><ol><li>安装依赖 <code>@vtj/cli</code><code>@vtj/serve</code><code>@vtj/ide</code><code>@vtj/runtime</code></li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">npm i @vtj/cli @vtj/serve @vtj/ide <span class="nt">-D</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">npm i @vtj/runtime <span class="nt">-S</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="2"><li>改造 <code>main.ts</code></li></ol><p>在项目入口文件，在合适的地方增加以下代码， 以下代码仅是示例，实际需要按您的项目情况做调整。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">createApp</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">vue</span><span class="dl">'</span><span class="p">;</span></span><span id="LC2" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">createProvider</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">@vtj/runtime</span><span class="dl">'</span><span class="p">;</span></span><span id="LC3" class="line"><span class="k">import</span><span class="o">*</span><span class="k">as</span><span class="nx">VtjIcons</span><span class="k">from</span><span class="dl">'</span><span class="s1">@vtj/icons</span><span class="dl">'</span><span class="p">;</span></span><span id="LC4" class="line"><span class="k">import</span><span class="nx">App</span><span class="k">from</span><span class="dl">'</span><span class="s1">./App.vue</span><span class="dl">'</span><span class="p">;</span></span><span id="LC5" class="line"><span class="k">import</span><span class="nx">router</span><span class="k">from</span><span class="dl">'</span><span class="s1">./router</span><span class="dl">'</span><span class="p">;</span></span><span id="LC6" class="line"><span class="k">import</span><span class="nx">Mask</span><span class="k">from</span><span class="dl">'</span><span class="s1">@/components/Mask.vue</span><span class="dl">'</span><span class="p">;</span></span><span id="LC7" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">element-plus/theme-chalk/dark/css-vars.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC8" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">element-plus/dist/index.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC9" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">@vtj/icons/lib/style.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC10" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">@vtj/ui/lib/style.css</span><span class="dl">'</span><span class="p">;</span></span><span id="LC11" class="line"><span class="k">import</span><span class="dl">'</span><span class="s1">@/style/index.scss</span><span class="dl">'</span><span class="p">;</span></span><span id="LC12" class="line"><span class="kd">const</span><span class="nx">app</span><span class="o">=</span><span class="nx">createApp</span><span class="p">(</span><span class="nx">App</span><span class="p">);</span></span><span id="LC13" class="line"></span><span id="LC14" class="line"><span class="p">(</span><span class="k">async</span><span class="p">()</span><span class="o">=&gt;</span><span class="p">{</span></span><span id="LC15" class="line"><span class="k">await</span><span class="nx">createProvider</span><span class="p">({</span></span><span id="LC16" class="line"><span class="nx">app</span><span class="p">,</span></span><span id="LC17" class="line"><span class="nx">router</span><span class="p">,</span></span><span id="LC18" class="line"><span class="na">components</span><span class="p">:</span><span class="p">{</span></span><span id="LC19" class="line"><span class="nx">Mask</span></span><span id="LC20" class="line"><span class="p">}</span></span><span id="LC21" class="line"><span class="p">});</span></span><span id="LC22" class="line"></span><span id="LC23" class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">router</span><span class="p">);</span></span><span id="LC24" class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">VtjIcons</span><span class="p">);</span></span><span id="LC25" class="line"><span class="nx">app</span><span class="p">.</span><span class="nx">mount</span><span class="p">(</span><span class="dl">'</span><span class="s1">#app</span><span class="dl">'</span><span class="p">);</span></span><span id="LC26" class="line"><span class="p">})();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="3"><li>项目工程配置<code>vite.config.ts</code>引用 IDE Vite 插件</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">defineConfig</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">vite</span><span class="dl">'</span><span class="p">;</span></span><span id="LC2" class="line"><span class="k">import</span><span class="p">{</span><span class="nx">IDEPlugin</span><span class="p">}</span><span class="k">from</span><span class="dl">'</span><span class="s1">@vtj/serve</span><span class="dl">'</span><span class="p">;</span></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="k">export</span><span class="k">default</span><span class="nx">defineConfig</span><span class="p">({</span></span><span id="LC5" class="line"><span class="na">plugins</span><span class="p">:</span><span class="p">[</span><span class="nx">IDEPlugin</span><span class="p">()]</span></span><span id="LC6" class="line"><span class="p">});</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-provideroptions-配置" class="anchor" href="https://gitee.com/newgateway/vtj#provideroptions-%E9%85%8D%E7%BD%AE"></a>ProviderOptions 配置</h2><p>实例化 Provider 的参数可以在 <code>main.ts</code> 或 <code>package.json</code> 中配置，配置项：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">ProjectProvider</span><span class="p">{</span></span><span id="LC2" class="line"><span class="c1">// 项目 id</span></span><span id="LC3" class="line"><span class="nl">id</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC4" class="line"><span class="c1">// 项目名称</span></span><span id="LC5" class="line"><span class="nl">name</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC6" class="line"><span class="c1">// 路由模式</span></span><span id="LC7" class="line"><span class="nl">mode</span><span class="p">:</span><span class="dl">'</span><span class="s1">hash</span><span class="dl">'</span><span class="o">|</span><span class="dl">'</span><span class="s1">history</span><span class="dl">'</span><span class="p">;</span></span><span id="LC8" class="line"><span class="c1">// 路由前缀路径</span></span><span id="LC9" class="line"><span class="nl">base</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC10" class="line"><span class="c1">// 页面路由前缀路径</span></span><span id="LC11" class="line"><span class="nl">page</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC12" class="line"><span class="c1">// 区块预览路由前缀路径</span></span><span id="LC13" class="line"><span class="nl">preview</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC14" class="line"><span class="c1">// 首页路由</span></span><span id="LC15" class="line"><span class="nl">home</span><span class="p">:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC16" class="line"><span class="p">}</span></span><span id="LC17" class="line"></span><span id="LC18" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">IDEProvider</span><span class="kd">extends</span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span><span class="kr">any</span><span class="o">&gt;</span><span class="p">{</span></span><span id="LC19" class="line"><span class="c1">// IDE 路径</span></span><span id="LC20" class="line"><span class="nx">path</span><span class="p">?:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC21" class="line"><span class="c1">// 链接按钮文本</span></span><span id="LC22" class="line"><span class="nl">text</span><span class="p">?:</span><span class="kr">string</span><span class="p">;</span></span><span id="LC23" class="line"><span class="p">}</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">ProviderBuiltinComponents</span><span class="p">{</span></span><span id="LC26" class="line"><span class="c1">// 框架母版组件</span></span><span id="LC27" class="line"><span class="nl">Mask</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="c1">// 404 页面组件</span></span><span id="LC30" class="line"><span class="nl">Empty</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1">// 启动页组件</span></span><span id="LC33" class="line"><span class="nl">Startup</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC34" class="line"></span><span id="LC35" class="line"><span class="c1">// Ide 入口组件</span></span><span id="LC36" class="line"><span class="nl">IDELink</span><span class="p">?:</span><span class="kr">any</span><span class="p">;</span></span><span id="LC37" class="line"><span class="p">}</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="k">export</span><span class="kr">interface</span><span class="nx">ProviderOptions</span><span class="p">{</span></span><span id="LC40" class="line"><span class="c1">//服务类型</span></span><span id="LC41" class="line"><span class="nl">service</span><span class="p">:</span><span class="nx">ServiceType</span><span class="p">;</span></span><span id="LC42" class="line"></span><span id="LC43" class="line"><span class="c1">// 项目配置</span></span><span id="LC44" class="line"><span class="nl">project</span><span class="p">:</span><span class="nb">Partial</span><span class="o">&lt;</span><span class="nx">ProjectProvider</span><span class="o">&gt;</span><span class="p">;</span></span><span id="LC45" class="line"></span><span id="LC46" class="line"><span class="c1">// Vue 应用</span></span><span id="LC47" class="line"><span class="nl">app</span><span class="p">:</span><span class="nx">App</span><span class="p">;</span></span><span id="LC48" class="line"></span><span id="LC49" class="line"><span class="c1">// 路由实例</span></span><span id="LC50" class="line"><span class="nl">router</span><span class="p">:</span><span class="nx">Router</span><span class="p">;</span></span><span id="LC51" class="line"></span><span id="LC52" class="line"><span class="c1">// 文件模块</span></span><span id="LC53" class="line"><span class="nl">modules</span><span class="p">?:</span><span class="nb">Record</span><span class="o">&lt;</span><span class="kr">string</span><span class="p">,</span><span class="p">()</span><span class="o">=&gt;</span><span class="nb">Promise</span><span class="o">&lt;</span><span class="kr">any</span><span class="o">&gt;&gt;</span><span class="p">;</span></span><span id="LC54" class="line"></span><span id="LC55" class="line"><span class="c1">// IDE 配置</span></span><span id="LC56" class="line"><span class="nl">ide</span><span class="p">?:</span><span class="kc">null</span><span class="o">|</span><span class="nx">IDEProvider</span><span class="p">;</span></span><span id="LC57" class="line"></span><span id="LC58" class="line"><span class="c1">// 显示启动页</span></span><span id="LC59" class="line"><span class="nl">startup</span><span class="p">?:</span><span class="nx">boolean</span><span class="p">;</span></span><span id="LC60" class="line"></span><span id="LC61" class="line"><span class="c1">// 内置组件</span></span><span id="LC62" class="line"><span class="nl">components</span><span class="p">?:</span><span class="nx">ProviderBuiltinComponents</span><span class="p">;</span></span><span id="LC63" class="line"></span><span id="LC64" class="line"><span class="c1">// 生成源码模式</span></span><span id="LC65" class="line"><span class="nl">raw</span><span class="p">?:</span><span class="nx">boolean</span><span class="p">;</span></span><span id="LC66" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-交流群" class="anchor" href="https://gitee.com/newgateway/vtj#%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>交流群</h2><p><img src="https://gitee.com/newgateway/vtj/raw/master/dev/public/ding.jpg" alt="输入图片说明" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/newgateway/vtj</guid>
            <link>https://gitee.com/newgateway/vtj</link>
        </item>
        <item>
            <title>
                <![CDATA[微信、QQ 全新 UOS 版本发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">统信 UOS 官方<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FuAVFG69xbK6Z9IfxQZjH6w" target="_blank">宣布</a>，微信和 QQ 再次全新升级，现已上线统信 UOS 应用商店。</span></p><h4><span style="color:#000000"><strong>微信 2.1.8 版本更新（原生适配统信 UOS）</strong></span></h4><p><span style="color:#000000">微信自 2021 年底首次适配统信 UOS 以来，经过多次版本更新优化，于近日发布 2.1.8 版本，并正式上线统信 UOS 应用商店。</span></p><p><span style="color:#000000"><img alt="" height="267" src="https://oscimg.oschina.net/oscnet/up-4c1f9d16153f0e419ee1c0e40814e1fde9f.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><strong>聊天信息搜索</strong></span></p><p><span style="color:#000000">在聊天窗口界面，可以对历史信息进行搜索，这样在众多信息中找到自己想要的信息就非常方便了。</span></p><p><span style="color:#000000"><img alt="" height="346" src="https://oscimg.oschina.net/oscnet/up-2e7b7ccad34fd65abf2810baf3599baf5c0.gif" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><strong>通讯录搜索</strong></span></p><p><span style="color:#000000">联系人过多记不住也没关系，新版 UOS 微信支持联系人搜索，直接在联系人界面即可搜索到对应的联系人。</span></p><p><span style="color:#000000"><img alt="" height="351" src="https://oscimg.oschina.net/oscnet/up-01c58bd26e82cdac3937e4859df89864af0.gif" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">群管理功能</span></strong></p><p><span style="color:#000000">可进行成员删减、查看群公告、消息免打扰、置顶群聊、清空聊天记录、删除并退出等常用操作。</span></p><p><img alt="" height="352" src="https://oscimg.oschina.net/oscnet/up-ca0172d458e5050956edc7f886860f47a09.gif" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">本次版本不仅增加了大量常用功能，同时还针对统信 UOS 用户反馈的登录二维码频闪、无法打开大写字母链接等若干问题进行全面优化：</span></p><ol><li><span style="color:#000000">退出登录后，登录二维码频闪；</span></li><li><span style="color:#000000">群聊消息仅显示第一次聊天的时间，不显示后续聊天的时间；</span></li><li><span style="color:#000000">无法打开大写字母的链接；</span></li><li><span style="color:#000000">截图选择隐藏当前窗口截图，再 Esc 取消截图，无法回到聊天界面；</span></li><li><span style="color:#000000">最小化窗口后，影响最大化按钮的状态。</span></li></ol><h4><strong><span style="color:#000000">QQ Linux 版迎来重磅升级</span></strong></h4><p><span style="color:#000000">当前版本支持消息、小世界、QQ 空间板块等。</span></p><p><span style="color:#000000"><img alt="" height="265" src="https://oscimg.oschina.net/oscnet/up-6a4ded5957c093ccd4510a5b9d335a6981b.png" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">夜间模式</span></strong></p><p><span style="color:#000000">QQ 夜间模式并支持跟随系统，享受更沉浸的聊天体验。</span></p><p><span style="color:#000000"><img alt="" height="265" src="https://oscimg.oschina.net/oscnet/up-21170e1a0c6b0bf5ee9492c4bfd2681ca4d.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">截图能力</span></strong></p><p><span style="color:#000000">QQ 截图能力升级，快捷方便，提升办公效率。</span></p><p><span style="color:#000000"><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-62b887afba45904cac5a3a6168df05139fb.png" width="500" referrerpolicy="no-referrer"></span></p><p><strong><span style="color:#000000">升级方式</span></strong></p><p><span style="color:#000000">QQ 版本升级方式进行全方位优化。</span></p><p><span style="color:#000000"><img alt="" height="265" src="https://oscimg.oschina.net/oscnet/up-6917dd67d624cc3bf56cf77511b12076692.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">此外当前版本还支持群图片、文件传送、全局搜索等功能，修复了若干统信 UOS 用户反馈的问题，体验更佳。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 29 Sep 2023 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260016</guid>
            <link>https://www.oschina.net/news/260016</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust GUI 库 egui 0.23 发布，新增简单且强大的图像 API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">egui 0.23 版本已经发布了。egui 是易于使用、可移植的即时模式 (immediate mode) GUI 库，采用 Rust 编写，可运行在 Web 和原生应用中。</span></p><p><img height="382" src="https://static.oschina.net/uploads/space/2023/0928/160731_qsi2_3820517.png" width="338" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#1f2328">此版本包含一个简单且强大的图像 API：</span></p><pre><span style="color:var(--color-prettylights-syntax-comment)">// Load from web:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">image</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">"https://www.example.com/some_image.png"</span><span>)</span><span>;</span><span style="color:var(--color-prettylights-syntax-comment)">// Include image in the binary using `include_bytes`:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">image</span><span>(</span>egui<span>::</span>include_image!<span>(</span><span style="color:var(--color-prettylights-syntax-string)">"../assets/ferris.svg"</span><span>)</span><span>)</span><span>;</span><span style="color:var(--color-prettylights-syntax-comment)">// With options:</span>
ui<span>.</span><span style="color:var(--color-prettylights-syntax-entity)">add</span><span>(</span>
    egui<span>::</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Image</span><span>::</span><span style="color:var(--color-prettylights-syntax-entity)">new</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">"file://path/to/image.jpg"</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">max_width</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">200.0</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">rounding</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">10.0</span><span>)</span><span>,</span><span>)</span><span>;</span></pre><p><span style="background-color:#ffffff; color:#1f2328">该 API 基于插件系统，开发者可以告诉<span></span></span><code>egui</code><span style="background-color:#ffffff; color:#1f2328"><span></span>如何加载图像，以及从何处加载。</span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><code>egui_extras</code>&nbsp;配备了加载器，只需要在 <code>Cargo.toml</code> 中添加以下内容：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">egui_extras</span> = { <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">version</span> = <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>0.23<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">features</span> = [<span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>all_loaders<span style="color:var(--color-prettylights-syntax-string)">"</span></span>] }
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">image</span> = { <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">version</span> = <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>0.24<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-storage-modifier-import)">features</span> = [<span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>jpeg<span style="color:var(--color-prettylights-syntax-string)">"</span></span>, <span style="color:var(--color-prettylights-syntax-string)"><span style="color:var(--color-prettylights-syntax-string)">"</span>png<span style="color:var(--color-prettylights-syntax-string)">"</span></span>] } <span style="color:var(--color-prettylights-syntax-comment)"><span style="color:var(--color-prettylights-syntax-comment)">#</span> Add the types you want support for</span></pre><p><span style="background-color:#ffffff; color:#1f2328">并将此添加到代码中：</span></p><pre>egui_extras<span>::</span><span style="color:var(--color-prettylights-syntax-entity)">install_image_loaders</span><span>(</span>egui_ctx<span>)</span><span>;</span></pre><p>详情查看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femilk%2Fegui%2Freleases%2Ftag%2F0.23.0" target="_blank">https://github.com/emilk/egui/releases/tag/0.23.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 08:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259867/egui-0-23-released</guid>
            <link>https://www.oschina.net/news/259867/egui-0-23-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[oauth2-shiro 2.0.0 版本发布，安全大升级]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p>oauth2-shiro v2.0.0 版本正式发布，在距上一次发布 7 年后，更新了大版本，对安全漏洞等问题进行大升级。</p><p>该版本主要更新内容：</p><ol><li>升级使用 springboot，调整工程结构，打包由 war 换成 jar，使用 thymeleaf 替换 servlet/jsp；spring 大版本升级到 5.3 提升安全性。</li><li>JDK 由 1.7 升级到 1.8，日志框架使用 logback 替换 log4j（处理掉 log4j 安全漏洞）。</li><li>升级 shiro 版本到 v1.11.0，解决相应的 shiro 版本漏洞。</li><li>密码存储算法由 MD5 替换为 SHA-256，并支持盐 (salt)，让密码存储更安全可靠（通过配置参数 authz.store.credentials.alg 来控制与向下兼容）。</li><li>OAuth token 支持使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjwt.io%2F" target="_blank">JWT</a>格式（通过配置参数 authz.token.generator.type 来控制与向下兼容）。</li><li>对初始的账户密码与 client secret 使用更加安全的密码策略：包括大小写字母，数字与特殊符号，长度至少 10 位。</li></ol><p>v2.0.0 版本链接：<a href="https://gitee.com/mkk/oauth2-shiro/tree/2.0.0/">https://gitee.com/mkk/oauth2-shiro/tree/2.0.0/</a>。</p><p>【推荐升级】</p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 08:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259866/oauth2-shiro-2-0-0-released</guid>
            <link>https://www.oschina.net/news/259866/oauth2-shiro-2-0-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Raspberry Pi 5 将于 10 月底发布，60 美元起售]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在 <a href="https://www.oschina.net/news/107700/raspberry-pi-4-model-b">Raspberry Pi 4</a> 发布四年后，<span style="background-color:#ffffff">Raspberry Pi 公司</span><span style="background-color:#ffffff">宣布 Raspberry Pi 5 将于 10 月底推出。此前，</span><span style="background-color:#ffffff">Raspberry Pi 首席执行官 Eben Upton 在访谈中</span></span><a href="https://www.oschina.net/news/222527/raspberry-pi-5" target="_blank">表示</a><span style="color:#000000"><span style="background-color:#ffffff">，由于持续的供应链复苏，Raspberry Pi 可能不会在 2023 年发布 Raspberry Pi 5。</span></span></p><p><span style="color:#000000">根据介绍，Raspberry Pi 5 4GB 型号的售价为 60 美元，8GB 版本的售价为 80 美元。与 Raspberry Pi 4 相比，Raspberry Pi 5&nbsp;的 CPU 和 GPU 性能提高了两到三倍；内存和 I/O 带宽大约是两倍；并且是首款采用英国剑桥内部设计的芯片的 Raspberry Pi 计算机。</span></p><p><img height="333" src="https://oscimg.oschina.net/oscnet/up-d361cf4dc5042dc2ca363c929128c72f516.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><strong><span style="color:#000000">主要特点包括：</span></strong></p><ul><li><span style="color:#000000">2.4GHz 四核 64 位 Arm Cortex-A76 CPU</span></li><li><span style="color:#000000">VideoCore VII GPU，支持 OpenGL ES 3.1、Vulkan 1.2</span></li><li><span style="color:#000000">双 4Kp60 HDMI 显示输出</span></li><li><span style="color:#000000">4Kp60 HEVC 解码器</span></li><li><span style="color:#000000">双频 802.11ac Wi-Fi</span></li><li><span style="color:#000000">Bluetooth 5.0 / Bluetooth Low Energy (BLE)</span></li><li><span style="color:#000000">支持 SDR104 模式的高速 microSD 卡接口</span></li><li><span style="color:#000000">2 个 USB 3.0 端口，支持 5Gbps 同步运行</span></li><li><span style="color:#000000">2 个 USB 2.0 端口</span></li><li><span style="color:#000000">千兆位以太网，支持 PoE+（需要单独的 PoE+ HAT，即将推出）</span></li><li><span style="color:#000000">2 × 4-lane MIPI 摄像头/显示收发器</span></li><li><span style="color:#000000">PCIe 2.0 x1 接口，用于快速外设</span></li><li><span style="color:#000000">Raspberry Pi 标准 40-pin GPIO 接头</span></li><li><span style="color:#000000">Real-time clock</span></li><li><span style="color:#000000">电源按钮</span></li></ul><h4><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>新平台、新芯片组</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="background-color:#ffffff; color:#222222">三款新芯片均专为 Raspberry Pi 5 程序设计。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BCM2712</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="background-color:#ffffff; color:#222222">BCM2712 是 Broadcom 的一款新型 16 纳米应用处理器 (AP)，源自为 Raspberry Pi 4 提供动力的 28 纳米 BCM2711 AP，并具有众多架构增强功能。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="337" src="https://oscimg.oschina.net/oscnet/up-8c726b4de45a468c3271117d7ce5b99aca5.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>RP1</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">RP1 是用于 Raspberry Pi 5 的 I/O 控制器，由 Raspberry Pi 提供 RP2040 微控制器的同一团队设计，并与 RP2040 一样，在 TSMC 成熟的 40LP 工艺上实现。RP1 自 2016 年开始开发，是在 Raspberry Pi 上开展过的运行时间最长、最复杂且（耗资 1500 万美元）最昂贵的项目。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="333" src="https://oscimg.oschina.net/oscnet/up-efd812a0420b676ba96d4b1be955ae094ed.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>DA9091</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BCM2712 和 RP1 由芯片组的第三个新组件&nbsp;Renesas DA9091 "Gilmour" power-management IC (PMIC) 支持。它集成了八个独立的开关模式电源，以生成电路板所需的各种电压，其中包括一个四相核心电源，能够提供 20 安培的电流，为 Cortex-A76 cores 和 BCM2712 中的其他数字逻辑供电。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#222222">与 BCM2712 一样，DA9091 是多年共同开发的成果。</span></p><div><img height="327" src="https://oscimg.oschina.net/oscnet/up-38bf4f1f2b6741bd33d457c7e5946f51be8.png" width="500" referrerpolicy="no-referrer"></div><h4><strong><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:#222222"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>外形演变</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">从外观上看，</span>Raspberry Pi 5 与前代产品非常相似。不过，在保留信用卡大小的整体尺寸的同时，团队也借此机会更新了一些设计元素，以适应新芯片组的功能。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="335" src="https://oscimg.oschina.net/oscnet/up-86995819166a105d1ba44dca761548db40d.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.raspberrypi.com%2Fnews%2Fintroducing-raspberry-pi-5%2F" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 07:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259858/introducing-raspberry-pi-5</guid>
            <link>https://www.oschina.net/news/259858/introducing-raspberry-pi-5</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LMDE 6]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">LMDE 6 已正式</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.linuxmint.com%2F%3Fp%3D4570" target="_blank">发布</a><span style="background-color:#ffffff; color:#333333">，代号 "Faye"；新版</span><span style="color:#000000">本基于 Debian 12 Bookworm。</span></p><p><span style="color:#000000"><img alt="" height="322" src="https://oscimg.oschina.net/oscnet/up-d8017bac4462c4427dfb0cbfd2b95577a75.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">LMDE 是 "</span><span style="background-color:#ffffff">Linux Mint Debian Edition</span><span style="background-color:#ffffff">" 的缩写，即基于 Debian 的 Linux Mint。其目标是在不使用 Ubuntu 的前提下，确保可提供与 Linux Mint 相同的体验，软件包仓库来自 Debian。LMDE 还有一个目标是开发兼容除 Ubuntu 之外的软件。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">下载地址：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.linuxmint.com%2F%3Fp%3D4570" target="_blank">https://blog.linuxmint.com/?p=4570</a></p><p>具体更新内容包括：</p><h4><span style="color:#000000">已知的问题</span></h4><p style="text-align:left"><strong><span style="color:#000000">LMDE 安装程序</span></strong></p><p style="text-align:left"><span style="color:#000000">要以 expert 模式启动安装程序，需运行以下命令：</span></p><pre><code>sudo live-installer-expert-mode</code></pre><p style="text-align:left"><span style="color:#000000">要在现有 LVM 分区上安装 LMDE，必须首先将其从其所属的 LVM volumes 和 groups 中删除。</span></p><p style="text-align:left"><span style="color:#000000">在手动分区模式下，需要注意的是安装程序将自动挂载所有交换分区。这些分区也将被放置在已安装系统的 /etc/fstab 中。</span></p><p style="text-align:left"><span style="color:#000000"><strong>Locked root account</strong></span></p><p style="text-align:left"><span style="color:#000000">root 帐户默认被锁定。</span></p><p style="text-align:left"><span style="color:#000000">要使用恢复控制枱（从 Grub 菜单）或以 root 身份登录，首先需要为 root 提供一个新密码：</span></p><pre><code>sudo passwd root</code></pre><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>Virtualbox Guest Additions</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">要在 Virtualbox 中添加对共享文件夹、拖放、适当加速和显示分辨率的支持，可单击 Virtualbox 的「Devices」菜单，然后选择「Insert Guest Additions CD Image」。在出现询问时选择"download"，然后按说明操作。</span></p><p style="text-align:left"><span style="color:#000000">有关更多信息，可阅读</span><span style="color:#495057"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fcd%2FE36500_01%2FE36502%2Fhtml%2Fqs-guest-additions.html" target="_blank">安装 VirtualBox Guest Additions</a>。</span></p><p style="text-align:left"><strong><span style="color:#343a40">DVD Playback with VLC</span></strong></p><p style="text-align:left"><span style="color:#000000">如果 VLC 找不到你的 DVD 播放器，可单击 Media-&gt;Open Disc，然后指定「/dev/sr0」作为光盘设备。</span></p><h4 style="text-align:left"><strong><span style="color:#000000">Tips</span></strong></h4><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>实时会话中的用户名和密码</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">在实时会话中，用户名是「mint」，密码为空（即，如果要求输入密码，只需按 Enter 键）。</span></p><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>移动不适配屏幕的窗口</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">如果屏幕分辨率太低，有些窗口可能无法在屏幕上显示。按下 ALT 键时，可以使用鼠标抓取窗口的任何部分并将其在屏幕上移动。</span></p><p style="text-align:left"><strong><span><span><span><span><span><span style="color:#343a40"><span><span><span><span><span><span><span><span><span><span style="background-color:#fbfbfb"><span><span><span>32 位内核中的 PAE 支持</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="text-align:left"><span style="color:#000000">为了保证与非 PAE 处理器的兼容性，Linux Mint Debian 的 32 位版本默认配备 686 非 PAE 内核。要获得 PAE 支持，只需安装 686-PAE 内核并重新启动计算机即可。</span></p><p style="text-align:left"><span style="color:#000000">键入以下命令并重新启动计算机：</span></p><pre><code>apt update
apt install linux-headers-686-pae linux-image-686-pae</code></pre><p>详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinuxmint.com%2Frel_faye.php" target="_blank">查看发行说明</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 06:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259853/lmde-6-released</guid>
            <link>https://www.oschina.net/news/259853/lmde-6-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apache Dubbo 首个 Node.js 3.0-alpha 版本正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>关于 Apache Dubbo3</h3><p style="text-align:justify">Apache Dubbo 是一款易用、高性能的 WEB 和 RPC 框架，同时为构建企业级微服务提供服务发现、流量治理、可观测、认证鉴权等能力、工具与最佳实践。经过近几年发展，Dubbo3 已在阿里巴巴集团各条业务线实现全面推广，成功取代运行多年的 HSF 框架，同时 Dubbo3 的多语言体系也有了快速发展，目前涵盖的多语言体系有</p><ul><li>apache/dubbo<strong>[1]</strong>&nbsp;(java)</li><li>apache/dubbo-go<strong>[2]</strong></li><li>apache/dubbo-js<strong>[3]</strong>&nbsp;(web、node.js)</li><li>apache/dubbo-rust<strong>[4]</strong></li></ul><p style="text-align:justify">基于 Dubbo3 定义的 Triple 协议，你可以轻松编写浏览器、移动端、gRPC 兼容的 RPC 服务，并让这些服务同时运行在 HTTP/1 和 HTTP/2 上。Dubbo Node.js SDK 支持使用 IDL 或编程语言特有的方式定义服务，并提供一套轻量的 API 来发布或调用这些服务。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-6dd39f09768f62d955dde2fb6ceeafef_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_2"></span><h3>关于 Dubbo3 Node.js 首个发布版</h3><p style="text-align:justify">Dubbo-js 项目于 9 月份刚刚发布了支持 Dubbo3 协议的首个 alpha 版本，该项目是 Dubbo3 的 Typescript 版本实现，提供了 Web、Node.js 两种发布包。其中，Web 框架能让开发者直接在浏览器页面访问后端服务，Node.js 则进一步丰富了后端微服务技术栈的选择。当前 Node.js 版本主要是实现了 Triple 协议的完整支持，接下来的版本中，社区将继续完善地址发现、负载均衡等服务治理能力。</p><span id="OSC_h4_3"></span><h4>Node.js 微服务开发完整示例</h4><p style="text-align:justify">本示例基于最新发布的 Node.js 版本，演示了基于 Triple 协议的 RPC 通信模式，示例使用 Protocol Buffer 定义 RPC 服务，并演示了代码生成、服务发布和服务访问等过程。</p><p style="text-align:justify"><strong>前置条件</strong></p><p style="text-align:justify">因为使用 Protocol Buffer 的原因，我们首先需要安装相关的代码生成工具，这包括 @bufbuild/protoc-gen-es、@bufbuild/protobuf、@apachedubbo/protoc-gen-apache-dubbo-es、@apachedubbo/dubbo。</p><pre><code>npm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo</code></pre><p style="text-align:justify"><strong>定义服务</strong></p><p style="text-align:justify">现在，使用 Protocol Buffer (IDL) 来定义一个 Dubbo 服务。</p><p style="text-align:justify">创建目录，并生成文件：</p><pre><code>mkdir -p proto &amp;&amp; touch proto/example.proto</code></pre><p style="text-align:justify">写入内容：</p><pre><code>syntax = "proto3";

package apache.dubbo.demo.example.v1;

message SayRequest {
  string sentence = 1;
}

message SayResponse {
  string sentence = 1;
}

service ExampleService {
  rpc Say(SayRequest) returns (SayResponse) {}
}</code></pre><p style="text-align:justify">这个文件声明了一个叫做 ExampleService 的服务，为这个服务定义了 Say 方法以及它的请求参数 SayRequest 和返回值 SayResponse。</p><p style="text-align:justify"><strong>生成代码</strong></p><p style="text-align:justify">创建 gen 目录，做为生成文件放置的目标目录。</p><pre><code>mkdir -p gen</code></pre><p style="text-align:justify">运行以下命令，在 gen 目录下生成代码文件：</p><pre><code>PATH=$PATH:$(pwd)/node_modules/.bin \
  protoc -I proto \
  --es_out gen \
  --es_opt target=ts \
  --apache-dubbo-es_out gen \
  --apache-dubbo-es_opt target=ts \
  example.proto</code></pre><p style="text-align:justify">运行命令后，应该可以在目标目录中看到以下生成的文件:</p><pre><code>├── gen
│   ├── example_dubbo.ts
│   └── example_pb.ts
├── proto
│   └── example.proto</code></pre><p style="text-align:justify"><strong>实现服务</strong></p><p style="text-align:justify">接下来我们就需要添加业务逻辑了，实现 ExampleService ，并将其注册到 DubboRouter 中。</p><p style="text-align:justify">创建 dubbo.ts 文件：</p><pre><code>import { DubboRouter } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";

export default (router: DubboRouter) =&gt;
  // registers apache.dubbo.demo.example.v1
  router.service(ExampleService, {
    // implements rpc Say
    async say(req) {
      return {
        sentence: `You said: ${req.sentence}`,
      };
    },
  }, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });</code></pre><p style="text-align:justify"><strong>启动 Server</strong></p><p style="text-align:justify">Dubbo 服务可以嵌入到普通的 Node.js 服务器、Next.js、Express 或 Fastify 中。在这里我们将使用 Fastify，所以让我们安装 Fastify 以及我们为 Fastify 准备的插件。</p><pre><code>npm install fastify @apachedubbo/dubbo-fastify</code></pre><p style="text-align:justify">创建 server.ts 文件，新建一个 Server，把上一步中实现的 ExampleService 注册给它。</p><p style="text-align:justify">接下来就可以直接初始化和启动 Server 了，它将在指定的端口接收请求。</p><pre><code>import { fastify } from "fastify";
import { fastifyDubboPlugin } from "@apachedubbo/dubbo-fastify";
import routes from "./dubbo";

async function main() {
  const server = fastify();
  await server.register(fastifyDubboPlugin, {
    routes,
  });
  server.get("/", (_, reply) =&gt; {
    reply.type("text/plain");
    reply.send("Hello World!");
  });
  await server.listen({ host: "localhost", port: 8080 });
  console.log("server is listening at", server.addresses());
}

void main();</code></pre><p style="text-align:justify">最后，运行代码启动服务。</p><pre><code>npx tsx server.ts</code></pre><p style="text-align:justify"><strong>访问服务</strong></p><p style="text-align:justify">最简单的方式是使用 HTTP/1.1 POST 请求访问服务，参数则作以标准 JSON 格式作为 HTTP 负载传递。如下是使用 cURL 命令的访问示例:</p><pre><code>curl \
 --header 'Content-Type: application/json' \
 --header 'TRI-Service-Version: 1.0.0' \
 --header 'TRI-Service-group: dubbo' \
 --data '{"sentence": "Hello World"}' \
 http://localhost:8080/apache.dubbo.demo.example.v1.ExampleService/Say</code></pre><p style="text-align:justify">也可以使用标准的 Dubbo client 请求服务，我们首先需要从生成代码即 dubbo-node 包中获取服务代理，为它指定 server 地址并初始化，之后就可以发起起 RPC 调用了。</p><p style="text-align:justify">创建 client.ts 文件。</p><pre><code>import { createPromiseClient } from "@apachedubbo/dubbo";
import { ExampleService } from "./gen/example_dubbo";
import { createDubboTransport } from "@apachedubbo/dubbo-node";

const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
  httpVersion: "1.1",
});

async function main() {
  const client = createPromiseClient(ExampleService, transport, { serviceVersion: '1.0.0', serviceGroup: 'dubbo' });
  const res = await client.say({ sentence: "Hello World" });
  console.log(res);
}
void main();</code></pre><p style="text-align:justify">运行客户端：</p><pre><code>npx tsx client.ts</code></pre><span id="OSC_h3_4"></span><h3>总结</h3><p style="text-align:justify">当前 Node.js 版本主要是实现了 Triple 协议的完整支持，接下来的版本中，社区将继续完善地址发现、负载均衡等服务治理能力</p><p style="text-align:justify"><strong>相关链接：</strong></p><p style="text-align:justify">[1] apache/dubbo</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo" target="_blank">https://github.com/apache/dubbo</a></em></u></p><p style="text-align:justify">[2] apache/dubbo-go</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-go" target="_blank">https://github.com/apache/dubbo-go</a></em></u></p><p style="text-align:justify">[3] apache/dubbo-js</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-js" target="_blank">https://github.com/apache/dubbo-js</a></em></u></p><p style="text-align:justify">[4] apache/dubbo-rust</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-rust" target="_blank">https://github.com/apache/dubbo-rust</a></em></u></p><p style="text-align:justify"><em>作者：蔡建怿</em></p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">点击立即免费试用云产品，开启云上实践之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1333160%3Futm_content%3Dg_1000381068" target="_blank">原文链接</a></strong></p><p style="text-align:justify"><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 06:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10114644</guid>
            <link>https://my.oschina.net/yunqi/blog/10114644</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Pika v3.5.1 发布，兼容 Redis 的 NoSQL 数据库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Pika 社区很高兴宣布，我们今天发布已经过我们生产环境验证 v3.5.1 版本 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Freleases%2Ftag%2Fv3.5.1" target="_blank">https://github.com/OpenAtomFoundation/pika/releases/tag/v3.5.1</a> 。</p><p>该版本不仅做了很多优化工作，还引入了多项新功能。这些新功能包括，动态关闭 WAL、ReplicationID 检测是否增量复制、在 K8s 环境上 Pika 服务的自动注册从而实现集群的自组织、以及 exporter 检测集群指标等等，无疑将会让用户享受到更为稳定和高效的 NoSQL 使用体验。</p><h2>1 新特性</h2><ul><li><p>1 Slow log 增加队列等待时间统计，在队列阻塞的时候方便我们进行问题定位。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1997" target="_blank">PR 1997</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwangshao1" target="_blank">wangshao1</a>。</p></li><li><p>2 主从复制使用 ReplicationID 判断是否进行增量同步，解决原主从同步方式切主后整个数据集会进行全量复制的问题，可以提升 Pika 性能。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1951" target="_blank">PR 1951</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>3 WAL 以 'disablewal' 命令方式支持动态关闭，在写性能遇到瓶颈的时候，可以通过命令关闭 WAL &nbsp;缓解写性能下降的问题，关闭 WAL 有机器宕机后丢失数据的风险，用户需要根据自己的使用习惯权衡。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2015" target="_blank">PR 2015</a>，作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>4 flush 线程数和 compaction 线程数合二为一，在 Compaction 性能瓶颈时，可以动态调整线程数，缓解 Comapction 损耗 Pika 性能的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2014" target="_blank">PR 2014</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTianpingan" target="_blank">Tianpingan</a>。</p></li><li><p>5 升级了 RocksDB 版本到 v8.3.3。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2000" target="_blank">PR 2000</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdingxiaoshuai123" target="_blank">dingxiaoshuai123</a>。</p></li><li><p>6 新增周期性打印工作队列的长度功能，在队列阻塞的时候可以快速定位问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1978" target="_blank">PR 1978</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTianpingan" target="_blank">Tianpingan</a>。</p></li><li><p>7 新增利用一个&nbsp;<code>pika_exporter</code>&nbsp;监测整个集群的指标，实现一个 Pika Exporter 实例监控整个集群，解决了 3.5.0 版本一个&nbsp;Pika Exporter &nbsp;监测一个 Pika 实例消耗资源的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1953" target="_blank">PR 1953</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenbt-hz" target="_blank">chenbt-hz</a>。</p></li><li><p>8 实现在&nbsp; K8s &nbsp;环境上&nbsp; Pika &nbsp;服务的自动注册，在启动时自动注册，从而实现集群的自组织 ，实现了通过命令拉起整个 Pika Cluster 集群。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1931" target="_blank">PR 1931</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmachinly" target="_blank">machinly</a>。</p></li></ul><h2>2 bug 修复</h2><ul><li><p>1 调整了 Rate_limit 参数，修复了压测时出现 RPS 为 0 的情况 。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2009" target="_blank">PR 2009</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>2 修复了 INFODATA 命令中对于遍历数据文件时出现空路径的逻辑判断。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1996" target="_blank">PR 1996</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li><li><p>3 修复了 Codis 在线上出现大毛刺的问题。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2016" target="_blank">PR 2016</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchejinge" target="_blank">chejinge</a>。</p></li><li><p>4 修复了 macOS 环境下编译使用 tools 导致编译不过的问题 。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F2011" target="_blank">PR 2011</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FA2ureStone" target="_blank">A2ureStone</a>。</p></li><li><p>5 减少了 exporter 非必要日志的打印，降低，了资源利用率。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika%2Fpull%2F1945" target="_blank">PR 1945</a>， 作者 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMixficsol" target="_blank">Mixficsol</a>。</p></li></ul><h2>3 使用建议</h2><p>本次新增了几个配置参数，大家在使用过程中，需要根据使用情况按需调整：</p><ul><li><p>1 max-rsync-parallel-num：主从全量复制线程数，需要根据自己机器 CPU 核数和部署实例个数进行调整，建议最小设置为 2。</p></li><li><p>2 rate-limiter-bandwidth:&nbsp;限制 RocksDB 数据库读写速度，限制数据库在一定时间内可以读写的数据量，默认 2000MiB/s，需要根据自己的机器性能和部署实例做调整。</p></li><li><p>max-background-jobs: compaction 和 flushdb 线程数，要根据自己机器 CPU 核数和部署实例个数进行调整，建议最小设置为 4。</p></li><li><p>3 throttle-bytes-per-second:&nbsp;主从复制传输限速参数，默认为 200MiB/s，该参数可以根据机器网卡的配置及部署 pika 实例的个数进行调整。</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-d55384ab133b76068b38aa4c6549a956cfd.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 06:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/dubbogo/blog/10114890</guid>
            <link>https://my.oschina.net/dubbogo/blog/10114890</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mistral AI 发布 73 亿参数模型，「碾压」 Llama 2 13B]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">法国人工智能初创公司&nbsp;Mistral AI <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fannouncing-mistral-7b%2F" target="_blank">宣布</a>推出其首款大语言模型 Mistral 7B 是一个，号称是迄今为止同规模产品中最强大的语言模型；在 Apache-2.0 许可下开源，可完全免费使用，不受任何限制。</span></p><p><span style="color:#000000">Mistral AI 是一个成立仅六个月的初创公司，于 6 月份筹集了 1.18 亿美元的巨额种子轮资金，据称是欧洲历史上最大的种子轮融资。Mistral 7B 是一个拥有 73 亿参数的模型。该公司声称在涵盖一系列任务的基准测试中，Mistral 7B 的表现均显著优于 Llama 2 7B 和 13B，并且与 Llama 34B 相当。</span></p><p><span style="color:#000000">在涵盖数学、美国历史、计算机科学、法律等 57 个科目的大规模多任务语言理解 (MMLU) 测试中，Mistral 7B 模型的准确率为 60.1%，Llama 2 7B 和 13B 的准确率略高于分别为 44.4% 和 55.6%。</span></p><p><span style="color:#000000">在常识推理和阅读理解测试中，Mistral 7B 的准确率也超过了两个 Llama 模型。在世界知识测试中，Llama 2 13B 与 Mistral 7B 不相上下，Mistral 称这可能是由于模型的参数数量有限，限制了它可以压缩的知识量。</span></p><p><span style="color:#000000">唯一 Llama 2 13B 和 Mistral 7B 不相上下的领域则是世界知识测试，Mistral 声称「这可能是由于 Mistral 7B 的参数数量有限，从而限制了其可压缩的知识量。」</span></p><p><span style="color:#000000">在编码任务方面，虽然 Mistral 称 Mistral 7B 的性能大为提高；但基准测试结果表明，它仍然没有超过经过微调的 CodeLlama 7B。在 0-shot Humaneval 和 3-shot MBPP 测试中，CodeLlama 7B 的准确率分别为 31.1% 和 52.5%，Mistral 7B 则分别为 30.5% 和 47.5%。</span></p><p><img alt="" height="228" src="https://oscimg.oschina.net/oscnet/up-ccc9734e545847f6997b2b0303aeebc5bc0.png" width="700" referrerpolicy="no-referrer"></p><p><img alt="" height="97" src="https://oscimg.oschina.net/oscnet/up-1098191388bff1fba8deba0dbc560f0f30f.png" width="700" referrerpolicy="no-referrer"></p><p><img alt="" height="485" src="https://oscimg.oschina.net/oscnet/up-e6a3887b8c2e50e96c9da3a78f6b0c69fa7.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Mistral AI 表示，Mistral 7B 使用了 Grouped-query attention (GQA) 实现更快的推理，并使用 Sliding Window Attention (SWA) 以较小的成本处理更长的序列。</span></p><p><span style="color:#000000">「Mistral 7B 采用了 SWA，其中每一层都关注先前的 4096 个隐藏状态。主要改进以及最初研究的原因是 O(sliding_window.seq_len) 的线性计算成本。在实际应用中，对 FlashAttention 和 xFormers 所做的更改使得在序列长度为 16k 且窗口为 4k 的情况下，速度提高了 2 倍。」</span></p><p><span style="color:#000000">此外，该公司还计划在这项工作的基础上发布一个更大的模型，能够更好地推理并支持多种语言，预计将于 2024 年亮相。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmistral.ai%2Fnews%2Fannouncing-mistral-7b%2F" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 04:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259954/mistral-ai-mistral-7b</guid>
            <link>https://www.oschina.net/news/259954/mistral-ai-mistral-7b</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[耗时两年倒贴 1.5 万美元，Chrome 扩展如何盈利]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一名开发者 Steve Jones <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40stevemacxcode%2Fi-spent-2-years-building-a-chrome-extension-lost-15k-dollars-in-the-process-and-made-just-over-7b2481c2b394" target="_blank">发文</a>表示，自己在两年前开始开发一个 Chrome 扩展程序，过程中投入了大量的资金，但却始终无法实现盈利。目前为止只赚到了 200 美元，而这些钱还都是近一周收到的打赏。</span></p><p><span style="color:#000000">具体来说，这名开发者在两年前推出了一个名为 Zecento 的 Chrome 扩展程序，其功能是帮助用户在亚马逊上做出更好的购买决策并节省金钱。主要通过分析产品/卖家的历史数据，告诉用户是否是购买的好时机，然后在价格下降（或其他商家以更优惠的价格提供相同产品）时给买家发送通知。目前，该扩展只在意大利地区可用，作者计划后续将在美国和加拿大推出。</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-fc6ebf5126370f72408ffe6a55cc9672b04.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Zecento 以免费的形式面向大众提供；但为了盈利，作者还推出了一个功能更完善的付费计划。但这就是问题所在，只有极少数用户的选择了付费计划，从而导致开发者严重的入不敷出。</span></p><p><span style="color:#000000">面对这种情况，Steve 也与其他一些开发了 Chrome 扩展的开发者进行了沟通交流，结果发现大差不差：大家都有一个正在被使用的产品，但却没有任何赚钱的途径。</span></p><p><span style="color:#000000">为了改善自己的处境，Steve 在大概一周前新开发了一个库，提供了一个可以通过 API 向 Chrome 浏览器扩展开发者进行打赏的渠道。在此后的一周时间内，Steve 陆陆续续收到了 200 多美元的资助，「我觉得如果能将它开源用于其他 Chrome 浏览器扩展也会很酷。」</span></p><p><span style="color:#000000">在文章的最后，Steve 也提出了一个问题：在为你的 Chrome 扩展程序（或者任何其他没有稳定商业模式的有价值网站）实现盈利方面，你遇到的最大问题是什么？你认为这个产品可能存在哪些问题？</span></p><p><span style="color:#000000"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fprogramming%2Fcomments%2F16sq2jk%2Fi_spent_2_years_building_a_chrome_extension_lost%2F" target="_blank">Reddit </a>上针对这个帖子也进行了热烈的讨论。有网友指出，Zecento 是一个 Chrome 扩展程序，但作者发文所配的主图上却是 Firefox，「令人恼火」。「这也就解释了为什么他们损失了 1.5 万美元。」</span></p><p><span style="color:#000000">还有人提出疑问：这 1.5 万美元是怎么花的？市场上是否早就已经有同类型产品的存在？以及作者为什么不通过 affiliate links 促进用户购买来实现盈利？</span></p><p><span style="color:#000000">对此，作者则回复表示，自己做了很多愚蠢的决定：包括在意大利花了约 6000 美元注册了一家公司，还花费了 2000 美元的会计费用。并花费了 2000 美元找了一些有影响力的人进行推广，以及定制品牌 T 恤等推广消耗。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259832/spent-2-years-building-a-chrome-extension-lost-15k</guid>
            <link>https://www.oschina.net/news/259832/spent-2-years-building-a-chrome-extension-lost-15k</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1-8 月我国规上互联网企业完成业务收入 9067 亿元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">工信部最新</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Fhlw%2Fart%2F2023%2Fart_d6cf975ca04449a4b079073551cd9e4a.html" target="_blank">发布</a><span style="color:#000000"><span style="background-color:#ffffff">的&nbsp;2023 年 1－8 月份互联网和相关服务业运行情况指出，</span>1－8 月份，互联网业务收入保持平稳，利润总额快速增长，研发经费降幅持续收窄。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><strong>一、总体运行情况</strong></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><strong>互联网业务收入保持平稳</strong><strong>。</strong>1－8 月份</span><span style="display:none">&nbsp;</span><span>，我国规模以上互联网和相关服务企业<span>1</span>（以下简称互联网企业）完成互联网业务收入 9067 亿元，同比增长 2.6</span><span>%。</span><span style="display:none">&nbsp;</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="252" src="https://oscimg.oschina.net/oscnet/up-03083ff7a0573ef952ceb153cae6dc12489.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>利润</span></strong><strong><span>总额</span></strong><strong><span>快速增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，我国规模以上互联网企业营业成本同比增长</span></span><span>5.4%。实现利润总额</span><span>913.8</span><span>亿元，同比增长 28%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="242" src="https://oscimg.oschina.net/oscnet/up-db3d44cf3265a7a1f2a4a2cf6737a2e6925.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>研发经费</span></strong><strong><span>降幅持续收窄</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，我国规模以上互联网企业共投入研发经费</span></span><span>477 亿元，同比下降 0.8</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="240" src="https://oscimg.oschina.net/oscnet/up-dcb0f66bd3c2a7509fa2f1567da737d4dcb.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong><span>二、分领域运行情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（一）信息服务领域企业</span></strong><strong><span>收入小幅回落</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，以信息服务为主的企业（包括新闻资讯、搜索、社交、游戏、音乐视频等）互联网业务收入同比</span></span><span>下降 3.1</span><span>%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（二）生活服务领域企业收入</span></strong><strong><span>较快增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，以提供生活服务为主的平台企业（包括本地生活、租车约车、旅游出行、金融服务、汽车、房屋住宅等）互联网业务收入同比增长</span></span><span>11.3%。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>（三）网络销售领域企业收入</span></strong><strong><span>高速增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span>，主要提供网络销售服务的企业（包括大宗商品、农副产品、综合电商、医疗用品、快递等）互联网业务收入同比增长</span><span>45.1%。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:justify"><strong><span>三、分地区运行情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>东部地区互联网业务收入</span></strong><strong><span>保持平稳</span></strong><strong><span>增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span><span>，东部地区完成互联网业务收入</span></span><span>8474 亿元，同比增长 3.7%，增速较</span><span>1</span><span>－7 月份回落 0.3</span><span><span>个百分点</span></span><span>，占全国互联网业务收入的比重为 93.5%。中部地区完成互联网业务收入</span><span><span>289.2</span></span><span>亿元，同比下降 9.7%，降幅较</span><span>1</span><span>－7 月份扩大 1.7</span><span><span>个百分点。西部地区完成互联网业务收入</span></span><span>281.4 亿元，同比下降 8.3%，降幅较</span><span>1</span><span>－7 月份收窄 1.6</span><span><span>个百分点。东北地区完成互联网业务收入</span></span><span>22.3 亿元，同比下降 38.5%，降幅较</span><span>1</span><span>－7 月份收窄 2.1</span><span><span>个百分点。</span></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="245" src="https://oscimg.oschina.net/oscnet/up-9bed8dc21ec2637d6f7bb4730165f5dbae8.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span><strong><span>近半数</span></strong><strong><span>地区互联网业务</span></strong><strong><span>增速实现正增长</span></strong><strong><span>。</span></strong><span>1</span></span><span>－8 月份</span><span>，互联网业务累计收入居前</span><span>5 名的</span><span>北京</span><span>（增长 0.4</span><span>%）、上海</span><span>（增长 16.2</span><span>%）、浙江</span><span>（增长 3.6%）、</span><span>广东</span><span>（下降 9.5%）和天津（增长</span><span><span>21.9</span></span><span>%）共完成业务收入</span><span><span>7995</span></span><span>亿元，同比增长 4.6%，占全国（扣除跨地区企业）比重达 88.2%。全国互联网业务增速实现正增长的省（区、市）有 14 个。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><img height="243" src="https://oscimg.oschina.net/oscnet/up-4a22e931c722a693cb22702142dcadd6b5f.png" width="500" referrerpolicy="no-referrer"></p><h4 style="margin-left:2px; margin-right:0px; text-align:justify"><strong><span>四、我国移动应用程序（APP）发展情况</span></strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>根据全国 APP 技术检测平台统计，截至 8 月底，我国国内市场上监测到活跃的 APP 数量<span><span>2</span></span>为 260 万款（包括安卓和苹果商店）。移动应用开发者数量为 83 万,其中安卓开发者为 25 万，苹果开发者为 58 万。8 月份，安卓应用商店在架应用累计下载量 82 亿次。</span></p><p style="color:#070707; margin-left:2px; margin-right:0; text-align:justify"><span><strong><span>附注：</span></strong></span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>1.规模以上互联网和相关服务企业口径由上年互联网和相关服务收入 500 万元以上调整为 2000 万元及以上，文中所有同比增速均按可比口径计算。</span></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:justify"><span>2.活跃的移动应用程序数量是指报告期内我国市场上经过用户主动下载安装的第三方移动应用的总个数，其中安卓应用数的计算方法是根据智能手机记录的已安装移动应用去重后获得。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259952</guid>
            <link>https://www.oschina.net/news/259952</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DataSophon —— 云原生大数据管家]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div style="text-align:left"><p style="color:rgba(249,250,251,var(--bs-text-opacity)) !important; margin-left:0; margin-right:0">DataSophon 是 Java 为主要语言开发的新一代云原生大数据管家，致力于快速实现部署、管理、监控以及自动化运维大数据云原生平台，帮助用户快速构建起稳定、高效、可弹性伸缩的大数据云原生平台。</p><h2 style="text-align:start"><a href="https://github.com/datavane/datasophon/blob/dev/README_CN.md#%E4%B8%BB%E8%A6%81%E7%89%B9%E6%80%A7">主要特性</a></h2></div><ul><li>极易部署，用户仅需几步即可完成初始化环境配置，从而快速地完成大规模大数据集群的部署，支持数千个节点规模。</li><li>全面兼容开源生态，基于开放式的管理架构，已集成多种常用大数据组件，包括数据集成、数据存储、计算引擎、任务调度、权限管理等大数据处理的各个环节。</li><li>兼容复杂环境，极简的架构设计，使其极易适配各种复杂环境，支持 arm 和 x86 机器混合部署，支持常用的 Linux 生态操作系统。</li><li>便捷运维，基于生产实践展示用户最关心的监控指标，可方便地对集群、节点和服务进行监控和运维操作，助您大幅提升运维工作效率。</li><li>安全可靠，DataSophon 支持 Kerberos 身份认证和数据加密，使用 Ranger 数据访问控制，从而支持数据加密和权限控制，保证数据安全。</li><li>便捷告警，支持告警组和告警指标管理，监控指标全面丰富，用户可根据监控指标自定义告警组和告警指标。</li></ul><p><img height="883" src="https://oscimg.oschina.net/oscnet/up-20ccfba2265462539d7eaf8b767ec24e177.png" width="1587" referrerpolicy="no-referrer"></p><p><strong>产品架构</strong></p><p><img height="286" src="https://static.oschina.net/uploads/space/2023/0927/102225_EzMI_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><strong>技术架构</strong></p><p><img height="351" src="https://static.oschina.net/uploads/space/2023/0927/102300_8rho_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/datasophon</guid>
            <link>https://www.oschina.net/p/datasophon</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 为开发者打造的代码解释器 Octopus]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img width="200px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/86af130f-7d0d-4cfb-9410-fc338426938e" align="center" referrerpolicy="no-referrer"></p><p><img src="https://img.shields.io/github/actions/workflow/status/dbpunk-labs/octogen/ci.yaml" alt="GitHub Workflow Status (with event)" referrerpolicy="no-referrer"><a href="https://gitee.com/link?target=https%3A%2F%2Fdiscord.gg%2FUjSHsjaz66"><img src="https://badgen.net/badge/icon/discord?icon=discord&amp;label" alt="Discord" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2FOCopilot7817"><img src="https://img.shields.io/twitter/follow/OCopilot7817?style=flat-square" alt="Twitter Follow" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fpypi.org%2Fproject%2Fog-chat%2F"><img src="https://img.shields.io/pypi/v/og_chat" alt="PyPI - Version" referrerpolicy="no-referrer"></a><img src="https://img.shields.io/pypi/dm/og_chat?logo=pypi" alt="PyPI - Downloads" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/dbpunk-labs/octogen/blob/main/README.md">English</a></p><blockquote><h2><a id="user-content-octopus" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#octopus"></a>Octopus</h2><p>一款为开发者打造的开源的代码解释器</p></blockquote><p align="center"><img width="1000px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/8ec0a02b-20a9-47ec-9b15-1ede8fa94dbb" align="center" referrerpolicy="no-referrer"></p><table><thead><tr><th>OS</th><th>Platform</th></tr></thead><tbody><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/31b907e9-3a6f-4e9e-b0c0-f01d1e758a21" referrerpolicy="no-referrer"></td><td>✅</td></tr><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/565d5f93-baac-4a77-ab1c-7d845e2fdb6d" referrerpolicy="no-referrer"></td><td>✅</td></tr><tr><td><img width="40px" src="https://github.com/dbpunk-labs/octogen/assets/8623385/acb7f919-ef09-446e-b1bc-0b50bc28de5a" referrerpolicy="no-referrer"></td><td>✅</td></tr></tbody></table><h2><a id="user-content-快速上手" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B"></a>快速上手</h2><p>在本地电脑安装 octopus, 你可以选择使用 openai 或者 codellama-7B</p><p>本地环境要求</p><ul><li>python 3.10 and above</li><li>pip</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.docker.com%2Fproducts%2Fdocker-desktop%2F">docker</a> 24.0.0 and above, docker desktop is recommendedr</li></ul><p>安装 octogen 启动器</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">pip <span class="nb">install </span>og_up</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>使用 og_up 启动器初始化本地环境</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">og_up</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>开始体验 octogen, 在命令行执行<code>og</code></p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">Welcome to use octogen❤️ . To ask a programming question, simply type your question and press esc + enter</span><span id="LC2" class="line">You can use /help to look for help</span><span id="LC3" class="line"></span><span id="LC4" class="line">[1]🎧&gt;</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-octopus 内部实现" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#octopus%E5%86%85%E9%83%A8%E5%AE%9E%E7%8E%B0"></a>Octopus 内部实现</h2><p><img src="https://github.com/dbpunk-labs/octogen/assets/8623385/95dd6f84-6de8-476a-9c66-9ab591ed9b0e" alt="octogen-internal drawio" referrerpolicy="no-referrer"></p><ul><li>Octopus 内核: 当前基于 notebook 实现的代码执行引擎</li><li>Octopus Agent: 处理用户请求，将请求发给大模型服务 API 和将大模型生成的代码发给 Octopus 内核执行代码</li><li>Octopus 命令行工具: 将用户请求发给 Agent 和渲染 Agent 返回的代码，文本和图片</li></ul><p>每个组件之间都是采用流式方式进行数据交换，大模型每写一个字都会在命令行上面实时展示.</p><h2><a id="user-content-功能列表" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8"></a>功能列表</h2><ul><li>在 docker 环境自动执行代码</li><li>实验功能，在 iterm2 和 kitty 终端进行图片显示</li><li>支持通过<code>/up</code>命令将文件上传到 Octopus 内核，你可以在写问题描述的过程中使用上传文件命令</li><li>实验功能， 支持将大模型生成的代码片段打包在一起生成一个应用，然后通过<code>/run</code> 命令直接执行</li><li>支持将输出内容文本和代码通过 <code>/cc</code>命令复制到粘贴板上面</li><li>支持问题历史功能，提问历史将会被保存在本地</li></ul><p>如果你有功能需求建议，可以创建一个讨论帖子和大家一起讨论</p><h2><a id="user-content-计划" class="anchor" href="https://gitee.com/dbpunk-labs/octogen#%E8%AE%A1%E5%88%92"></a>计划</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdbpunk-labs%2Foctogen%2Fissues%2F64">roadmap for v0.5.0</a></li></ul>]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 03:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/dbpunk-labs/octogen</guid>
            <link>https://gitee.com/dbpunk-labs/octogen</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 代码层面探索前端性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>前言</h1><p>最近在做性能优化，具体优化手段，网上铺天盖地，这里就不重复了。</p><p>性能优化可分为以下几个维度：代码层面、构建层面、网络层面。<br> 本文主要是从代码层面探索前端性能，主要分为以下 4 个小节。</p><ul><li><p>使用 CSS 替代 JS</p></li><li><p>深度剖析 JS</p></li><li><p>前端算法</p></li><li><p>计算机底层</p></li></ul><span id="OSC_h1_2"></span><h1>使用 CSS 替代 JS</h1><p>这里主要从动画和 CSS 组件两个方面介绍。</p><span id="OSC_h3_3"></span><h3>CSS 动画</h3><p>CSS2 出来之前，哪怕要实现一个很简单的动画，都要通过 JS 实现。比如下面红色方块的水平移动：</p><p><img src="https://img11.360buyimg.com/imagetools/jfs/t1/154413/5/36918/38344/64d78222Fa380ff2e/b29ece75883b69d1.gif" alt="水平移动" referrerpolicy="no-referrer"></p><p>对应 JS 代码：</p><pre><code>let redBox = document.getElementById('redBox')
let l = 10

setInterval(() =&gt; {
    l+=3
    redBox.style.left = `${l}px`
}, 50)


</code></pre><p>1998 年的 CSS2 规范，定义了一些动画属性，但由于受当时浏览器技术限制，这些特性并没有得到广泛的支持和应用。</p><p>直到 CSS3 的推出，CSS 动画得到了更全面地支持。同时，CSS3 还引入了更多的动画效果，使得 CSS 动画在今天的 Web 开发中得到了广泛的应用。</p><p>那么 CSS3 都能实现什么动画，举几个例子：</p><ul><li><p><em>过渡（Transition）</em>- 过渡是 CSS3 中常用的动画效果之一，通过对一个元素的某些属性进行变换，使元素在一段时间内从一个状态平滑地过渡到另一个状态。</p></li><li><p><em>动画（Animation）</em>- 动画是 CSS3 中另一个常用的动画效果，其用于为一个元素添加一些复杂的动画效果，可以通过关键帧（@keyframes）来定义一串动画序列。</p></li><li><p><em>变换（Transform）</em>- 变换是 CSS3 中用于实现 2D/3D 图形变换效果的一种技术，包括旋转、缩放、移动、斜切等效果。</p></li></ul><p>把上面的例子改写成 CSS 代码如下：</p><pre><code>#redBox {
    animation: mymove 5s infinite;
}

@keyframes mymove
{
    from {left: 0;}
    to {left: 200px;}
}


</code></pre><p>同样的效果，用样式就能实现，何乐而不为呢。</p><p>需要指出的是，CSS 的动画仍在不断发展和改进，随着新的浏览器特性和 CSS 版本的出现，CSS 动画的特性也在不断地增加和优化，以满足日益复杂的动画需求和更好的用户体验。</p><span id="OSC_h3_4"></span><h3>CSS 组件</h3><p>在一些知名的组件库中，有些组件的大部分 props 是通过修改 CSS 样式实现的，比如 Vant 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvant-ui.github.io%2Fvant%2F%23%2Fzh-CN%2Fspace" rel="nofollow" target="_blank">Space</a>组件。</p><table><tbody><tr><th>Props</th><th>功能</th><th>CSS 样式</th></tr></tbody><tbody><tr><td>direction</td><td>间距方向</td><td>flex-direction: column;</td></tr><tr><td>align</td><td>对齐方式</td><td>align-items: xxx;</td></tr><tr><td>fill</td><td>是否让 Space 变为一个块级元素，填充整个父元素</td><td>display: flex;</td></tr><tr><td>wrap</td><td>是否自动换行</td><td>flex-wrap: wrap;</td></tr></tbody></table><p>再比如 Ant Design 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fant.design%2Fcomponents%2Fspace-cn" rel="nofollow" target="_blank">Space</a>组件。</p><table><tbody><tr><th>Props</th><th>功能</th><th>CSS 样式</th></tr></tbody><tbody><tr><td>align</td><td>对齐方式</td><td>align-items: xxx;</td></tr><tr><td>direction</td><td>间距方向</td><td>flex-direction: column;</td></tr><tr><td>size</td><td>间距大小</td><td>gap: xxx;</td></tr><tr><td>wrap</td><td>是否自动换行</td><td>flex-wrap: wrap;</td></tr></tbody></table><p>这类组件完全可以封装成 SCSS 的 mixin 实现（LESS 也一样），既能减少项目的构建体积（两个库的 Space 组件 gzip 后的大小分别为 5.4k 和 22.9k），又能提高性能。</p><blockquote><p>查看组件库某个组件的体积，可访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbundlephobia.com%2F" rel="nofollow" target="_blank">连接</a>。</p></blockquote><p>比如下面的 space mixin：</p><pre><code>/* 
* 间距
* size: 间距大小，默认是 8px
* align: 对齐方式，默认是 center，可选 start、end、baseline、center
* direction: 间距方向，默认是 horizontal，可选 horizontal、vertical
* wrap: 是否自动换行，仅在 horizontal 时有效，默认是 false
*/
@mixin space($size: 8px, $direction: horizontal, $align: center, $wrap: false) {
    display: inline-flex;
    gap: $size;

    @if ($direction == 'vertical') {
        flex-direction: column;
    }

    @if ($align == 'center') {
        align-items: center;
    }

    @if ($align == 'start') {
        align-items: flex-start;
    }

    @if ($align == 'end') {
        align-items: flex-end;
    }

    @if ($align == 'baseline') {
        align-items: baseline;
    }

    @if ($wrap == true) {
        @if $direction == 'horizontal' {
            flex-wrap: wrap;
        }
    }
}


</code></pre><p>类似的组件还有 Grid、Layout 等。</p><p>再说下图标，下面是 Ant Design 图标组件的第一屏截图，有很多仅用 HTML + CSS 就可以轻松实现。</p><p><img src="https://img14.360buyimg.com/imagetools/jfs/t1/180707/33/35268/43627/64d24737Fe70bfa62/5ff7dcc4a24e0b54.jpg" alt="Ant Design 方向图标" referrerpolicy="no-referrer"></p><p>实现思路：</p><ul><li><p>优先考虑只使用样式实现</p></li><li><p>仅靠样式满足不了，就先增加一个标签，通过这个标签和它的两个伪元素 ::before 和 ::after 实现</p></li><li><p>一个标签实在不够，再考虑增加额外的标签</p></li></ul><p>比如实现一个支持四个方向的实心三角形，仅用几行样式就可以实现（上面截图是 4 个图标）：</p><pre><code>/* 三角形 */
@mixin triangle($borderWidth: 10, $shapeColor: #666, $direction: up) {
    width: 0;
    height: 0;
    border: if(type-of($borderWidth) == 'number', #{$borderWidth} + 'px', #{$borderWidth}) solid transparent;

    $doubleBorderWidth: 2 * $borderWidth;
    
    $borderStyle: if(type-of($doubleBorderWidth) == 'number', #{$doubleBorderWidth} + 'px', #{$doubleBorderWidth}) solid #{$shapeColor};

    @if($direction == 'up') {
        border-bottom: $borderStyle;
    }

    @if($direction == 'down') {
        border-top: $borderStyle;
    }

    @if($direction == 'left') {
        border-right: $borderStyle;
    }

    @if($direction == 'right') {
        border-left: $borderStyle;
    }
}


</code></pre><p>总之，<em>能用 CSS 实现的就不用 JS</em>，不仅性能好，而且还跨技术栈，甚至跨端。</p><span id="OSC_h1_5"></span><h1>深度剖析 JS</h1><p>介绍完了 CSS，再来看 JS，主要从基本语句和框架源码两个方面深入。</p><span id="OSC_h3_6"></span><h3>if-else 语句的优化</h3><p>先了解下 CPU 是如何执行条件语句的。参考如下代码：</p><pre><code>const a = 2
const b = 10
let c
if (a &gt; 3) {
    c = a + b
} else {
    c = 2 * a
}


</code></pre><p>CPU 执行流程如下：</p><p><img src="https://img10.360buyimg.com/imagetools/s800x600_jfs/t1/161135/14/39555/33039/64d24b5eF7de3c3f5/ac2e1a47b7dd0a46.jpg" alt="条件语句" referrerpolicy="no-referrer"></p><p>我们看到，在执行到指令 0102 时候，由于不满足 a &gt; 3 这个条件，就直接跳转到 0104 这个指令去执行了；而且，计算机很聪明，如果它在编译期间发现 a 永远不可能大于 3，它就会直接删除 0103 这条指令，然后，0104 这条指令就变成了下一条指令，直接顺序执行，也就是编译器的优化。</p><p>那么回到正题，假如有以下代码：</p><pre><code>function check(age, sex) {
    let msg = ''
    if (age &gt; 18) {
        if (sex === 1) {
            msg = '符合条件'
        } else {
            msg = ' 不符合条件'
        }
    } else {
        msg = '不符合条件'
    }
}


</code></pre><p>逻辑很简单，就是筛选出 age &gt; 18 并且 sex == 1 的人，代码一点儿问题都没有，但是太啰嗦，站在 CPU 的角度来看，需要执行两次跳转操作，当 age &gt; 18 时，就进入内层的 if-else 继续判断，也就意味着再次跳转。</p><p>其实我们可以直接优化下这个逻辑（通常我们也是这样做的，但是可能知其然而不知其所以然）：</p><pre><code>function check(age, sex){
    if (age &gt; 18 &amp;&amp; sex ==1) return '符合条件'
    return '不符合条件'
}


</code></pre><p>所以，<em>逻辑能提前结束就提前结束</em>，减少 CPU 的跳转。</p><span id="OSC_h3_7"></span><h3>Switch 语句的优化</h3><p>其实 switch 语句和 if-else 语句的区别不大，只不过写法不同而已，但是，switch 语句有个特殊的优化，那就是数组。</p><p>参考以下代码：</p><pre><code>function getPrice(level) {
    if (level &gt; 10) return 100
    if (level &gt; 9) return 80
    if (level &gt; 6) return 50
    if (level &gt; 1) return 20
    return 10
}


</code></pre><p>我们改成 switch 语句：</p><pre><code>function getPrice(level) {
    switch(level)
        case 10: return 100
        case 9: return 80
        case 8: 
        case 7: 
        case 6: return 50
        case 5:
        case 4: 
        case 3:
        case 2: 
        case 1: return 20
        default: return 10
}


</code></pre><p>看着没啥区别，其实编译器会把它优化成一个数组，其中数组的下标为 0 到 10，不同下标对应的价格就是 return 的数值，也就是：</p><p><img src="https://img10.360buyimg.com/imagetools/s600x400_jfs/t1/175596/15/37588/20396/64d843c7F89354a5e/ca2e5f45d0bdb94a.jpg" alt="Swich 数组" referrerpolicy="no-referrer"></p><p>而我们又知道，数组是支持随机访问的，速度极快，所以，编译器对 switch 的这个优化就会大大提升程序的运行效率，这可比一条一条执行命令快多了。</p><p>那么，我还写个毛的 if-else 语句啊，我直接全部写 switch 不就行了？</p><p>不行！因为编译器对 switch 的优化是有条件的，它要求你的 code 必须是紧凑的，也就是连续的。</p><p>这是为什么呢？因为我要用数组来优化你啊，你如果不是紧凑的，比如你的 code 是 1、50、51、101、110，我就要创建一个长度 110 的数组来存放你，只有这几个位置有用，岂不是浪费空间！</p><p>所以，我们在使用 switch 的时候，尽量保证_code 是紧凑的数字类型_的。</p><span id="OSC_h3_8"></span><h3>循环语句的优化</h3><p>其实循环语句跟条件语句类似，只不过写法不同而已，循环语句的优化点是以减少指令为主。</p><p>我们先来看一个中二的写法：</p><pre><code>function findUserByName(users) {
   let user = null
   for (let i = 0; i &lt; users.length; i++) {
       if (users[i].name === '张三') {
           user = users[i]
       }
   }
   return user
}


</code></pre><p>如果数组长度是 10086，第一个人就叫张三，那后面 10085 次遍历不就白做了，真拿 CPU 不当人啊。</p><p>你直接这样写不就行了：</p><pre><code>function findUserByName(users) {
    for (let i = 0; i &lt; users.length; i++) {
        if (users[i].name === '章三') return users[i]
    }
}


</code></pre><p>这样写效率高，可读性强，也符合我们上述的_逻辑能提前结束就提前结束_这个观点。CPU 直接感谢你全家。</p><p>其实，这里还有一点可以优化的地方，就是我们的数组长度可以提取出来，不必每次都访问，也就是这样：</p><pre><code>function findUserByName(users) {
    let length = users.length
    for (let i = 0; i &lt; length; i++) {
        if (users[i].name === '章三') return users[i]
    }
}


</code></pre><p>这看起来好像有点吹毛求疵了，确实是，但是如果考虑到性能的话，还是有点用的。比如有的集合的 size() 函数，不是简单的属性访问，而是每次都需要计算一次，这种场景就是一次很大的优化了，因为省了很多次函数调用的过程，也就是省了很多个 call 和 return 指令，这无异是提高了代码的效率的。尤其是在循环语句这种容易量变引起质变的情况下，差距就是从这个细节拉开的。</p><p>函数调用过程参考：</p><p><img src="https://img11.360buyimg.com/imagetools/s600x400_jfs/t1/131395/2/38988/49150/64d84d80Fd23ae780/ecbcc25c4864d6be.jpg" alt="函数调用" referrerpolicy="no-referrer"></p><p>对应代码如下：</p><pre><code>let a = 10
let b = 11

function sum (a, b) {
    return a + b
}


</code></pre><p>说完了几个基础语句，再来看下我们经常使用的框架内部，很多地方的性能都值得探索。</p><span id="OSC_h3_9"></span><h3>diff 算法</h3><p>Vue 和 React 中都使用了虚拟 DOM，当执行更新时，要对比新旧虚拟 DOM。如果没有任何优化，直接严格 diff 两颗树，时间复杂度是 O(n^3)，根本不可用。所以 Vue 和 React 必须使用 diff 算法优化虚拟 DOM：</p><p>Vue2 - 双端比较：</p><p><img src="https://img11.360buyimg.com/imagetools/s800x400_jfs/t1/198309/31/39725/133039/64e066d4Fd910f65f/8755ff579c61ecfc.png" alt="Vue2 - 双端比较" referrerpolicy="no-referrer"></p><p>类似上面的图：</p><ul><li><p>定义 4 个变量，分别为：oldStartIdx、oldEndIdx、newStartIdx 和 newEndIdx</p></li><li><p>判断 oldStartIdx 和 newStartIdx 是否相等</p></li><li><p>判断 oldEndIdx 和 newEndIdx 是否相等</p></li><li><p>判断 oldStartIdx 和 newEndIdx 是否相等</p></li><li><p>判断 oldEndIdx 和 newStartIdx 是否相等</p></li><li><p>同时 oldStartIdx 和 newStartIdx 向右移动；oldEndIdx 和 newEndIdx 向左移动</p></li></ul><p>Vue3 - 最长递增子序列：</p><p><img src="https://img11.360buyimg.com/imagetools/s600x300_jfs/t1/216465/32/35923/163040/64e066d4Fdc67f7dd/a7849b21373e218a.png" alt="Vue3 - 最长递增子序列" referrerpolicy="no-referrer"></p><p>整个过程是基于 Vue2 的双端比较再次进行优化。比如上面这个截图：</p><ul><li><p>先进行双端比较，发现前面两个节点（A 和 B）和最后一个节点（G）是一样的，不需要移动</p></li><li><p>找到最长递增子序列 C、D、E（新旧 children 都包含的，最长的顺序没有发生变化的一组节点）</p></li><li><p>把子序列当成一个整体，内部不用进行任何操作，只需要把 F 移动到它的前面，H 插入到它的后面即可</p></li></ul><p>React - 仅右移：</p><p><img src="https://img13.360buyimg.com/imagetools/s600x400_jfs/t1/151594/6/34260/221810/64e066d4F4bcceae1/8a8f00e131d94c49.png" alt="React - 仅右移" referrerpolicy="no-referrer"></p><p>上面截图的比较过程如下：</p><ul><li><p>遍历 Old 存下对应下标 Map</p></li><li><p>遍历 New，b 的下标从 1 变成了 0，不动（是左移不是右移）</p></li><li><p>c 的下标从 2 变成了 1，不动（也是左移不是右移）</p></li><li><p>a 的下标从 0 变成了 2，向右移动，b、c 下标都减 1</p></li><li><p>d 和 e 位置没变，不需要移动</p></li></ul><p>总之，不管用什么算法，它们的原则都是：</p><ul><li><p>只比较同一层级，不跨级比较</p></li><li><p>Tag 不同则删掉重建（不再去比较内部的细节）</p></li><li><p>子节点通过 key 区分（key 的重要性）</p></li></ul><p>最后也都成功把时间复杂度降低到了 O(n)，才可以被我们实际项目使用。</p><span id="OSC_h3_10"></span><h3>setState 真的是异步吗</h3><p>很多人都认为 setState 是异步的，但是请看下面的例子：</p><pre><code>clickHandler = () =&gt; {
    console.log('--- start ---')

    Promise.resolve().then(() =&gt; console.log('promise then'))

    this.setState({val: 1}, () =&gt; {console.log('state...', this.state.val)})

    console.log('--- end ---')
}

render() {
    return &lt;div onClick={this.clickHandler}&gt;setState&lt;/div&gt;
}


</code></pre><p>实际打印结果：</p><p><img src="https://img10.360buyimg.com/imagetools/s600x300_jfs/t1/160906/37/39538/26895/64e06fe1F4dfbd3cb/e780ba03077aa591.jpg" alt="setState 打印结果" referrerpolicy="no-referrer"></p><p>如果是异步的话，state 的打印应该在微任务 Promise 后执行。</p><p>为了解释清这个原因，必须先了解 JSX 里的事件机制。</p><p>JSX 里的事件，比如 onClick={() =&gt; {}}，其实叫合成事件，区别于我们常说的自定义事件：</p><pre><code>// 自定义事件
document.getElementById('app').addEventListener('click', () =&gt; {})


</code></pre><p>合成事件都是绑定在 root 根节点上，有前置和后置操作，拿上面的例子举例：</p><pre><code>function fn() { // fn 是合成事件函数，内部事件同步执行
    // 前置
    clickHandler()
    
    // 后置，执行 setState 的 callback
}


</code></pre><p>可以想象有函数 fn，里面的事件都是同步执行的，包括 setState。fn 执行完，才开始执行异步事件，即 Promise.then，符合打印的结果。</p><p>那么 React 为什么要这么做呢？<br> 因为要考虑性能，如果要多次修改 state，React 会先合并这些修改，合并完只进行一次 DOM 渲染，避免每次修改完都渲染 DOM。</p><p>所以 setState_本质是同步_，日常说的「异步」是不严谨的。</p><span id="OSC_h1_11"></span><h1>前端算法</h1><p>讲完了我们的日常开发，再来说说算法在前端中的应用。</p><blockquote><p>友情提示：算法一般都是针对大数据量而言，区别于日常开发。</p></blockquote><span id="OSC_h3_12"></span><h3>能用值类型就不用引用类型</h3><p>先来看一道题。</p><p>求 1-10000 之间的所有对称数，例如：0, 1, 2, 11, 22, 101, 232, 1221...</p><p>思路 1 - 使用数组反转、比较：数字转换为字符串，再转换为数组；数组 reverse，再 join 为字符串；前后字符串进行对比。</p><pre><code>function findPalindromeNumbers1(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        // 转换为字符串，转换为数组，再反转，比较
        const s = i.toString()
        if (s === s.split('').reverse().join('')) {
            res.push(i)
        }
    }

    return res
}


</code></pre><p>思路 2 - 字符串头尾比较：数字转换为字符串；字符串头尾字符比较。</p><pre><code>function findPalindromeNumbers2(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        const s = i.toString()
        const length = s.length

        // 字符串头尾比较
        let flag = true
        let startIndex = 0 // 字符串开始
        let endIndex = length - 1 // 字符串结束
        while (startIndex &lt; endIndex) {
            if (s[startIndex] !== s[endIndex]) {
                flag = false
                break
            } else {
                // 继续比较
                startIndex++
                endIndex--
            }
        }

        if (flag) res.push(res)
    }

    return res
}


</code></pre><p>思路 3 - 生成翻转数：使用 % 和 Math.floor 生成翻转数；前后数字进行对比 (全程操作数字，没有字符串类型)。</p><pre><code>function findPalindromeNumbers3(max) {
    const res = []
    if (max &lt;= 0) return res

    for (let i = 1; i &lt;= max; i++) {
        let n = i
        let rev = 0 // 存储翻转数

        // 生成翻转数
        while (n &gt; 0) {
            rev = rev * 10 + n % 10
            n = Math.floor(n / 10)
        }

        if (i === rev) res.push(i)
    }

    return res
}


</code></pre><p>性能分析：越来越快</p><ul><li><p>思路 1- 看似是 O(n)，但数组转换、操作都需要时间，所以慢</p></li><li><p>思路 2 VS 思路 3 - 操作数字更快（电脑原型就是计算器）</p></li></ul><p>总之，尽量不要转换数据结构，尤其数组这种有序结构，尽量不要用内置 API，如 reverse，不好识别复杂度，数字操作最快，其次是字符串。</p><span id="OSC_h3_13"></span><h3>尽量用「低级」代码</h3><p>还是直接上一道题。</p><p>输入一个字符串，切换其中字母的大小写<br> 如，输入字符串 12aBc34，输出字符串 12AbC34</p><p>思路 1 - 使用正则表达式。</p><pre><code>function switchLetterCase(s) {
    let res = ''

    const length = s.length
    if (length === 0) return res

    const reg1 = /[a-z]
    const reg2 = /[A-Z]

    for (let i = 0; i &lt; length; i++) {
        const c = s[i]
        if (reg1.test(c)) {
            res += c.toUpperCase()
        } else if (reg2.test(c)) {
            res += c.toLowerCase()
        } else {
            res += c
        }
    }

    return res
}


</code></pre><p>思路 2 - 通过 ASCII 码判断。</p><pre><code>function switchLetterCase2(s) {
    let res = ''

    const length = s.length
    if (length === 0) return res

    for (let i = 0; i &lt; length; i++) {
        const c = s[i]
        const code = c.charCodeAt(0)

        if (code &gt;= 65 &amp;&amp; code &lt;= 90) {
            res += c.toLowerCase()
        } else if (code &gt;= 97 &amp;&amp; code &lt;= 122) {
            res += c.toUpperCase()
        } else {
            res += c
        }
    }

    return res
}


</code></pre><p>性能分析：前者使用了正则，慢于后者</p><p>所以，尽量用「低级」代码，慎用语法糖、高级 API 或者正则表达式。</p><span id="OSC_h1_14"></span><h1>计算机底层</h1><p>最后说一些前端需要了解的计算机底层。</p><span id="OSC_h3_15"></span><h3>从「内存」读数据</h3><p>我们通常说的：从内存中读数据，就是把数据读入寄存器中，但是我们的数据不是直接从内存读入寄存器的，而是先读入一个高速缓存中，然后才读入寄存器的。</p><blockquote><p>寄存器是在 CPU 内的，也是 CPU 的一部分，所以 CPU 从寄存器读写数据非常快。</p></blockquote><p>这是为啥呢？因为从内存中读数据太慢了。</p><p>你可以这么理解：CPU 先把数据读入高速缓存中，以备使用，真正使用的时候，就从高速缓存中读入寄存器；当寄存器使用完毕后，就把数据写回到高速缓存中，然后高速缓存再在合适的时机将数据写入到存储器。</p><p>CPU 运算速度非常快，而从内存读数据非常慢，如果每次都从内存中读写数据，那么势必会拖累 CPU 的运算速度，可能执行 100s，有 99s 都在读取数据。为了解决这个问题，我们就在 CPU 和存储器之间放了个高速缓存，而 CPU 和高速缓存之间的读写速度是很快的，CPU 只管和高速缓存互相读写数据，而不管高速缓存和存储器之间是怎么同步数据的。这样就解决了内存读写慢的问题。</p><span id="OSC_h3_16"></span><h3>二进制的位运算</h3><p>灵活运用二进制的位运算不仅能提高速度，熟练使用二进制还能节省内存。</p><p>假如给定一个数 n，怎么判断 n 是不是 2 的 n 次方呢？</p><p>很简单啊，直接求余就行了。</p><pre><code>function isPowerOfTwo(n) {
    if (n &lt;= 0) return false
    let temp = n
    while (temp &gt; 1) {
        if (temp % 2 != 0) return false
        temp /= 2
    }
    return true
}


</code></pre><p>嗯，代码没毛病，不过不够好，看下面代码：</p><pre><code>function isPowerOfTwo(n) {
    return (n &gt; 0) &amp;&amp; ((n &amp; (n - 1)) == 0)
}


</code></pre><p>大家可以用 console.time 和 console.timeEnd 对比下运行速度便知。</p><p>我们可能还会看到一些源码里面有很多 flag 变量，对这些 flag 进行按位与或按位或运算来检测标记，从而判断是否开启了某个功能。他为什么不直接用布尔值呢？很简单，这样效率高还节省内存。</p><p>比如 Vue3 源码中的这段代码，不仅用到了按位与和按位或，还用到了左移：</p><pre><code>export const enum ShapeFlags {
  ELEMENT = 1,
  FUNCTIONAL_COMPONENT = 1 &lt;&lt; 1,
  STATEFUL_COMPONENT = 1 &lt;&lt; 2,
  TEXT_CHILDREN = 1 &lt;&lt; 3,
  ARRAY_CHILDREN = 1 &lt;&lt; 4,
  SLOTS_CHILDREN = 1 &lt;&lt; 5,
  TELEPORT = 1 &lt;&lt; 6,
  SUSPENSE = 1 &lt;&lt; 7,
  COMPONENT_SHOULD_KEEP_ALIVE = 1 &lt;&lt; 8,
  COMPONENT_KEPT_ALIVE = 1 &lt;&lt; 9,
  COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT
}


if (shapeFlag &amp; ShapeFlags.ELEMENT || shapeFlag &amp; ShapeFlags.TELEPORT) {
  ...
}


if (hasDynamicKeys) {
      patchFlag |= PatchFlags.FULL_PROPS
    } else {
    if (hasClassBinding) {
      patchFlag |= PatchFlags.CLASS
    }
    if (hasStyleBinding) {
      patchFlag |= PatchFlags.STYLE
    }
    if (dynamicPropNames.length) {
      patchFlag |= PatchFlags.PROPS
    }
    if (hasHydrationEventBinding) {
      patchFlag |= PatchFlags.HYDRATE_EVENTS
    }
}


</code></pre><span id="OSC_h1_17"></span><h1>结语</h1><p>文章从代码层面讲解了前端的性能，有深度维度的：</p><ul><li><p>JS 基础知识深度剖析</p></li><li><p>框架源码</p></li></ul><p>也有广度维度的：</p><ul><li><p>CSS 动画、组件</p></li><li><p>算法</p></li><li><p>计算机底层</p></li></ul><p>希望能让大家拓宽前端性能的视野，如果对文章感兴趣，欢迎留言讨论～～～</p><blockquote><p>作者：京东零售&nbsp;杨进军</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 02:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10114289</guid>
            <link>https://my.oschina.net/u/4090830/blog/10114289</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stellarium 23.3 发布，开源 3D 天象模拟软件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Stellarium 23.3 已发布。从 v23.1 开始，发布的版本号将显示 year.release scheme。对于 Windows，所使用的 Qt 框架版本作为包名称的一部分可见。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Stellarium 是一款免费开源 GPL（自由软件基金会 GNU 通用公共许可证）软件，它使用 OpenGL 图形接口对星空进行实时渲染。软件可以模拟肉眼、双筒望远镜和小型天文等观察天空，根据观测者所处时间和位置，计算出天空中太阳、月球、行星等天体位置，并将其精确地显示出来。还可以绘制星座、演示天文现象，如流星雨、日食和月食等。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">Stellarium 还被应用于天文馆中作为教学展示软件，作为天文爱好者星空望远镜观测辅助软件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="374" src="https://oscimg.oschina.net/oscnet/up-0aa6143a3e2a1325d21d488ecfd731d4a83.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">此版本的主要变化内容如下：</p><ul><li>新插件：Missing Stars</li><li>允许半透明景观</li><li>添加了太阳系天体的发现环境</li><li>改进小天体的轨道绘制</li><li>将 named impact features 显示为 ellipses</li><li>Navigational Stars 插件的主要变化</li><li>Observing List 修复</li><li>明确的彗星名称</li><li>以及许多小问题的修复</li></ul><p><strong>TELESCOPE USERS</strong></p><ul><li><span style="color:#000000">已经发现并修复了基于 Qt6 版本的 TelescopeControl 插件中的一些错误。</span></li></ul><p><span style="color:#000000">Telescope users 可检查一下问题是否已经解决。如果没有解决的话，</span>Stellarium 团队正在寻求有能力解决该问题的开发者的协助，可能会有奖励。</p><p><span style="color:#000000">详情可</span><span style="color:#333333">参阅</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstellarium.org%2Frelease%2F2023%2F09%2F25%2Fstellarium-23.3.html" target="_blank">完整的更改列表</a><span style="background-color:#ffffff; color:#333333">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 02:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259821/stellarium-23-3-released</guid>
            <link>https://www.oschina.net/news/259821/stellarium-23-3-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[电力行业首个自主可控的大模型发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">南方电网人工智能科技有限公司负责研发的电力行业人工智能创新平台及自主可控电力大模型正式公开<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWqir8vzxkVkDvwpTXtYKKQ" target="_blank">发布</a>。</span></p><p><span style="color:#000000">电力行业人工智能创新平台提供模型即服务（MaaS），支持模型快速迭代开发，并支撑电力人工智能资源面向全社会开放共享。百度提供了昆仑芯 AI 芯片、飞桨框架、开发套件等技术产品支持。</span></p><p><span style="color:#000000">电力大模型是电力行业人工智能创新平台首个产品，覆盖智能创作、设备巡检、电力调度等七大应用场景，也可应用于特定业务场景。其中，电力调度场景功能通过百度智能云千帆大模型平台，基于文心大模型打造。</span></p><p><span style="color:#000000">南方电网人工智能公司表示，将深度挖掘电网企业在电力人工智能领域的数据、场景、专业优势，同时将携手各方共同推进人工智能与能源电力行业深度融合，为数字时代经济体系优化升级和满足人民美好生活的电力需要做出更大贡献。</span></p><p><span style="color:#000000">发布会现场演示了「南网调度值班助手」，一个基于百度文心大模型打造的 AI 原生应用。根据介绍，电力调度值班助手遇到问题第一时间就能给出高质量解答，让员工不再需要投入大量时间去死记硬背常规内容。面对紧急情况，它可以秒级生成处置方案，及时响应 15 分钟电力市场调节要求。</span></p><p><span style="color:#000000"><img alt="" height="235" src="https://oscimg.oschina.net/oscnet/up-7f687c2312fb31fc129b37f1e57f71bcef3.jpg" width="700" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">而且，员工只需要说一句话，电力调度值班助手就可以把各种安全预警归类总结，整理地清清楚楚，自动生成工单和交接班日报，让管理和调度人员，能快速知晓全局态势。电力调度值班助手增强了应急响应能力，在应对突发事件的紧急情况时，可以快速响应，制定合理的调度策略，保障电力供应的稳定和安全。</span></p><p><span style="color:#000000">南方电网人工智能科技有限公司研发的电力行业人工智能创新平台，可面向内外部用户提供训练、微调、部署等服务，是算法模型的训练工厂，将有效降低电力企业获取大模型能力的门槛。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Sep 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259815</guid>
            <link>https://www.oschina.net/news/259815</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[上海网信办对属地 46 款 App 收集使用个人信息情况开展专项检查]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>「<span style="background-color:#ffffff; color:#222222">网信上海</span>」<span style="background-color:#ffffff; color:#222222">微信公众号<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FIWXU8WCBvJV-6JU8ZEe63w" target="_blank">发文</a>称，为规范 App 个人信息处理活动，保护公民个人信息合法权益，根据《个人信息保护法》《App 违法违规收集使用个人信息行为认定方法》《常见类型移动互联网应用程序必要个人信息范围规定》等法律法规，结合 12345 市民服务热线、市民来信举报等线索，2023 年 4 月至 9 月，上海市网信办对属地下载量较大及投诉较多的 46 款 App 开展了收集使用个人信息专项检查，共发现 160 余项问题。经过通报和跟进指导，截至目前，各 App 运营单位均已完成问题整改。</span></p><h4><span><strong>常见 10 种收集使用个人信息问题</strong></span></h4><blockquote><p style="margin-left:0; margin-right:0"><span><strong><span style="color:#0070c0">问题一：隐私政策关于个人信息收集使用的说明不完整、或与实际情况不一致。</span></strong><span style="background-color:transparent">例如，在<span style="background-color:#fafafa; color:#333333">App 的</span>隐私政策中使用了概括性描述或未完整的列举出收集个人信息业务功能，未准确列明收集个人信息的类型、目的、方式。</span></span></p><p><span><strong><span style="color:#0070c0">问题二：用户不同意隐私政策，<strong><span style="color:#0070c0">App</span></strong>拒绝提供服务。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>提供了无需注册即可使用（如浏览、游客模式）的业务模式，但若是用户不同意隐私政策，<span style="background-color:transparent; color:#1d2b43">App</span>拒绝提供任何业务功能。</span></span></p><p><span><strong><span style="color:#0070c0">问题三：未提供用户主动勾选隐私政策、服务协议选项。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在展示隐私政策时以默认接受的方式呈现，这使得用户可能在不了解隐私政策细节的情况下被认为同意信息收集和使用规则，削弱了用户的知情权和选择权。</span></span></p><p><span><strong><span style="color:#0070c0">问题四：后台模式下超范围收集个人信息。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在后台模式下（一般用户是无感知情况下），超越其合理功能范围，频繁地收集用户的个人信息。</span></span></p><p><span><strong><span style="color:#0070c0">问题五：<strong><span style="color:#0070c0">App</span></strong>收集敏感信息时未同步告知目的和必要性。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在收集个人敏感信息（如精准定位信息、通讯录、身份证号、银行卡号等）时，未明确告知用户这些信息将用于什么目的。</span></span></p><p><span><strong><span style="color:#0070c0">问题六：在用户同意隐私政策前，<strong><span style="color:#0070c0">App</span></strong>已经收集个人信息。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>首次运行时，在提示用户阅读隐私政策并征得同意前，已经调用系统函数收集 Android_id、MAC 地址、蓝牙信息、应用列表等信息。</span></span></p><p><span><strong><span style="color:#0070c0">问题七：<strong><span style="color:#0070c0">App</span></strong>未提供账户注销功能或注销后信息未及时清除。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>无注销功能，或注销存在各种障碍，无法完成注销，或用户注销账号后，<span style="background-color:transparent; color:#1d2b43">App</span>实际并未清除个人信息。</span></span></p><p><span><strong><span style="color:#0070c0">问题八：<strong><span style="color:#0070c0">App</span></strong>在未涉及业务功能时提前申请可收集个人信息的权限。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>在用户未实际使用业务功能的情况下，提前申请了与当前使用业务无关的电话、存储、定位等系统权限。</span></span></p><p><span><strong><span style="color:#0070c0">问题九：频繁申请权限干扰用户使用。</span></strong><span style="background-color:transparent">例如，在用户明确拒绝授权某项系统权限后，每当<span style="background-color:transparent; color:#1d2b43">App</span>重启进入同一业务功能时都重新索要用户已拒绝授权的系统权限，或在用户使用与该系统权限无关的功能时频繁索要用户已拒绝授权的系统权限。</span></span></p><p><span><strong><span style="color:#0070c0">问题十：无隐私政策。</span></strong><span style="background-color:transparent">例如，<span style="background-color:transparent; color:#1d2b43">App</span>未提供隐私政策或提供的「隐私政策」未包含收集使用个人信息规则，无法确定个人信息的使用方式和保护措施。</span></span></p></blockquote><blockquote><p><span style="color:#000000">上海市网信办提醒广大 App 运营者，收集使用个人信息需按照《个人信息保护法》《App 违法违规收集使用个人信息行为认定方法》及相关法律法规要求，严格遵循合法、正当、必要和诚信的原则，提供完整清晰透明、易于理解的隐私政策；收集个人信息遵循最小必要原则，不过度、频繁收集个人信息，不得因用户不同意收集非必要个人信息，而拒绝用户使用其基本服务功能；收集敏感个人信息时同步告知目的和必要性；采取必要措施保障所处理的个人信息安全。上海市网信办将对属地 App 收集使用个人信息情况持续开展监督检查。</span></p></blockquote><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">附件：</span><strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">App&nbsp;</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">违法违规收集个人信息问题清单</span></strong></p><p><img alt="" height="3054" src="https://oscimg.oschina.net/oscnet/up-b5eaef136e48f69bfd1524e127857be14c6.jpg" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260022</guid>
            <link>https://www.oschina.net/news/260022</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 四问复合索引，让你的数据查询速度飞起]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411666%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><span>&nbsp;</span>《华为云 GES 持久化图数据库复合索引介绍》</a>，作者：村头树下。</p><p>本文章主要介绍索引的作用，以及如何实现这种功能，希望可以帮助理解索引的作用以及如何使用索引</p><span id="OSC_h2_1"></span><h2>1. 什么是复合索引</h2><p>复合索引是用户手动建立的用于加速查询的一类额外数据。详细参数可以参考规格文档</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.huaweicloud.com%2Fapi-ges%2Fges_03_0454.html" rel="nofollow" target="_blank">https://support.huaweicloud.com/api-ges/ges_03_0454.html</a></p><span id="OSC_h2_2"></span><h2>2. 复合索引能做什么</h2><p>复合索引有两类。一是 label 索引，用于加速 label 的扫描。二是属性索引，用于加速属性过滤。</p><p>这里列举了一些常用接口（语句）与索引的关系</p><div><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th><p><strong>api 接口</strong></p></th><th><p><strong>索引加速方式</strong></p></th></tr></tbody><tbody><tr><td><p>summary</p></td><td><p>扫描 label 索引，统计各 label 点边数目</p></td></tr><tr><td><p>match (n:user) return count(*)</p></td><td><p>扫描点 label 索引，统计 label 为 user 的点数目</p></td></tr><tr><td><p>match ()-[r:label]-() return count®</p></td><td><p>扫描边 label 索引，统计指定 label 点数目</p></td></tr><tr><td><p>match (n:user) return n limit 1</p></td><td><p>通过点 label 索引快速寻找 label 为 user 的点</p></td></tr><tr><td><p>match (n:user) where n.age &gt; 10 return n limit 1</p></td><td><p>仅有 label 索引时扫描 label 索引，寻找 user 的点，然后进行属性过滤。当存在 age 属性索引时直接使用属性索引定位到目标点</p></td></tr><tr><td><p>match (n:user) where n.age in [1, 10] return n limit 1</p></td><td><p>同上</p></td></tr></tbody></table></div><span id="OSC_h2_3"></span><h2>3. 无索引时如何查询</h2><p>首先了解无索引的情况下，查询的逻辑，才可以理解索引在此基础上做了什么使得查询能够加速。查询逻辑主要与两个方面有关：数据结构，以及数据访问方式，以及查询场景。</p><span id="OSC_h3_4"></span><h3>a) 原始点结构</h3><p>持久化版本所有数据都是以 KV（键值对）的方式存储在分布式 KV 数据库中，在没有建立索引的时候，数据库中仅有原始点边 KV。以点数据结构为例：</p><p>Key:<span>&nbsp;</span><img alt="cke_145.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.59034676660642229201211385752181:50001231000000:2800:E900A4FBBB3D3F9F6E97CFC3D06C74E3E1A9CDCEF610F408CBE35CF042A02EB3.png" referrerpolicy="no-referrer"></p><p>Value:<img alt="cke_146.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.09951834891756932510363651849529:50001231000000:2800:635CA164693DB173830EC496DD2FF4EC716BB1565F80C73A33B6BC995BE350CA.png" referrerpolicy="no-referrer"></p><p>key 的开始部分为 kVType，这是所有数据都会存在的固定前缀，用以区分不同类型的数据。然后是 Vid 是全局唯一点 id。Labelid 是标识 label 的内置编码。Value 则是属性的数据。</p><span id="OSC_h3_5"></span><h3>b) 数据访问方式</h3><p>所有的图数据的查询最终都是依托于 KV 数据库的访问。常用的访问 KV 数据的方式有两种：</p><ol><li>精确查询接口，指定完整的 key 查询 value</li><li>前缀查询接口，仅指定 key 的前缀部分，查询所有 key 的前缀匹配的 KV 数据对。前缀查相对来说会更加频繁的使用。一个场景可能会需要多次前缀查，而前缀查的次数越多，结果越多，相应的此场景响应速度就越慢。前缀查结果大小直接与前缀的长度有关，前缀越长或者越精确，那么前缀查的结果越少。需要的计算量也越少。相应速度就会越快。</li></ol><span id="OSC_h3_6"></span><h3>c) 查询场景：</h3><p>常见查询场景的对应的 kv 层接口调用：</p><div><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th><p><strong>场景</strong></p></th><th><p><strong>KV 接口及调用次数</strong></p></th><th><p><strong>查询速度</strong></p></th><th><p><strong>对应 Cypher 语句</strong></p></th></tr></tbody><tbody><tr><td><p>指定 id 过滤</p></td><td><p>前缀查 * 1</p></td><td><p>快，由于 KVType 和 Vid 已知，可以拼出前缀，同时一个 id 一般不会有太多 label，前缀查的结果不会特别多。</p></td><td><p>match（n） where id(n)=‘0’ return n</p></td></tr><tr><td><p>指定 label 过滤</p></td><td><p>前缀查</p><div>
       n + 过滤 
     </div> m <p>&nbsp;</p></td><td><p>慢， 由于不知道 Vid，所以只能先拼出只有 KVType 的前缀，然后前缀查出所有点，再逐个过滤 Label,点数据较多时，会有多次前缀查，分批获取再过滤。</p></td><td><p>match（n:Label） return n</p></td></tr><tr><td><p>指定 label+属性过滤</p></td><td><p>前缀查</p><div>
       n + 过滤 
     </div> m <p>&nbsp;</p></td><td><p>慢， 查询前缀为 KvType,遍历全图点，先进行 Label 过滤，再进行属性过滤</p></td><td><p>match (n:Label) where n.prop=‘xx’ return n</p></td></tr><tr><td><p>指定属性过滤</p></td><td><p>前缀查</p><div>
       n + 过滤 
     </div> m <p>&nbsp;</p></td><td><p>非常慢， 查询前缀为 KvType,遍历全图点，全部进行属性过滤</p></td><td><p>match (n) where n.prop=‘xx’ return n</p></td></tr></tbody></table></div><p>可见，除了指定 id 的查询，其他所有查询均非常慢。这些查询都需要进行全图点扫描加过滤的方式来获取结果。这与查询出来的结果数目无关。对于较大的图来说，这样的查询代价是十分巨大的。</p><span id="OSC_h2_7"></span><h2>4. 复合索引如何加速</h2><p>查询慢的场景无外乎两种场景，label 查询或者属性查询。在没有索引的情况下，这两种查询都是建立在全局点扫描的基础上，进行过滤。当有效数据占比越低（例如全局点 1w,目标点仅有 1 个），这种扫描方式就越显得不划算。</p><p>对于这两种场景，我们可以建立对应的索引。索引本身也是 KV 数据。所以其 key 的布局就决定了其功能。</p><p>1.对于 label 过滤场景，索引的 key 的格式为：</p><p><img alt="cke_147.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.79665385416397739426054876098597:50001231000000:2800:A2CE99DE5BD4B61F5F56D26220A0FF10DC970A0B97E7B3BBD343B82E13682481.png" referrerpolicy="no-referrer"></p><p>对于每一个点，都会有一条对应的 Label 索引 KV。</p><p>当需要过滤特定 Label 时，可以拼出 KVType+Label 的前缀，利用 kv 数据底座的前缀查接口，就能直接将所有符合条件的点过滤出来。</p><p>2. 对于属性过滤的场景，索引的 key 格式为：</p><p><img alt="cke_148.png" src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtybbs/519/984/817/2850086000519984817.20230927102532.89575332567975621558954633422059:50001231000000:2800:721EE988DF62FDDA4506951B526B38089F1F94BC427E246FF092B9A3B510B7B1.png" referrerpolicy="no-referrer"></p><p>属性索引只针对个别过滤较为频繁的属性而建立。所以也只会对包含此属性的点才会生成属性索引 kv。相比于 Label 索引这里只是多了一个 property 字段。此字段填的是 Vid 对应点的属性的值。需要注意的是，property 字段并不包含全部的点属性，仅仅是待过滤属性的值。</p><p>当进行属性查询时，由于知道目标值（例如 where n.prop=1,目标值就是 1）。直接拼出 KVTypr+Label+Property，调用前缀查询接口。即可查出所有符合条件的点。</p><p>当利用索引查出匹配的索引 KV 之后，就可以很方便的拿到对应的 VId。然后根据此 Vid，就能快速查询到这个点的属性，或者邻居等信息。</p><span id="OSC_h2_8"></span><h2>5. 索引建立的若干建议</h2><p>索引并不是没有代价的，虽然它能加速查询，但是会降低写操作的性能，以及耗费更多的磁盘空间。所以建立索引之前需要考虑是不是必要的。这可以从数据区分度，数据大小，以及访问频率三个方面来评估。</p><ul><li>数据区分度：对于属性索引建议在过滤性好的属性上建立。值分布较为分散，比较适合建立。例如身份证号，手机号。但是对于性别这种属性，就不建议为此建立。对于 label 索引，如果图里面只有一个 label，那么建 label 索引其实也是没有什么必要的，但是大部分情况，label 索引都是必要的。</li><li>数据大小：这主要是针对属性索引来说的，在已经有 Label 索引的前提下，如果某个 label 下的点边数目很少，即使扫描所有 label 代价也不高，这时候没有必要再为其建立属性索引。</li><li>访问频率：这一点很好理解，只对频繁在 where 子句中出现的属性建立索引。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10114608</guid>
            <link>https://my.oschina.net/u/4526289/blog/10114608</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RMS 正在与癌症作斗争]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">自由软件先驱 Richard Stallman 近日透露，他正在接受非霍奇金淋巴瘤（一种白细胞癌症）的治疗，目前感受预后良好。</span></p><p><span style="color:#000000">70 岁的 RMS 本周三出席了在瑞士举行的 GNU 40 周年庆典，并发表了闭幕演讲。但与此前形象不同的是，他特有的长发以及胡子都已不见，整个人面容沧桑。</span></p><p><span style="color:#000000">据<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F09%2F29%2Frichard_stallman_cancer%2F" target="_blank">外媒</a>所述，RMS 在演讲过程中基本上都戴着防病毒口罩，他还呼吁听众也戴上口罩。但也正因如此，他的声音基本上都被口罩所遮盖，导致现场的观众无法听清他的发言。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-fef37061199b66a4a1141c563b530eccd66.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><em>短暂的拉下了口罩的 RMS</em></span></p><p><span style="color:#000000">RMS 表示自己患上了滤泡<span style="background-color:#ffffff">性</span>淋巴瘤，这是一种非霍奇金淋巴瘤；也是一种血液癌症，会导致 B 淋巴细胞在淋巴系统中形成团块。微软已故的创始人之一&nbsp;Paul Allen 就是因为非霍奇金淋巴瘤而去世。不过非霍奇金淋巴瘤有多种类型，RMS 所患的是其中一种发展较慢的类型。他表示自己预后良好，希望在未来的日子里还能继续活跃在 GNU 中。</span></p><p><span style="color:#000000">尽管 RMS 是一个颇有争议和评价两极分化的人物，但他对自由软件的贡献无法磨灭；可以说没有他对自由软件正规化和推广的努力，也就没有今天的开源世界。</span></p><p><span style="color:#000000">祝愿他一切顺利，早日康复。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260018/richard-stallman-cancer</guid>
            <link>https://www.oschina.net/news/260018/richard-stallman-cancer</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
