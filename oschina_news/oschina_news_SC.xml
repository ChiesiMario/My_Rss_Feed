<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 08 Jan 2024 06:15:27 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Pulsar3.0 新功能介绍]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://s2.loli.net/2024/01/03/1QuX3wI6P8hefLa.png" alt="Pulsar3.0-NewFeature.png" referrerpolicy="no-referrer"></p><p>在上一篇文章 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcrossoverjie.top%2F2023%2F12%2F24%2Fob%2FPulsar3.0-upgrade%2F" target="_blank">Pulsar3.0 升级指北</a>讲了关于升级 Pulsar 集群的关键步骤与灾难恢复，本次主要分享一些 <code>Pulsar3.0</code> 的新功能与可能带来的一些问题。</p><h1>升级后所遇到的问题</h1><p>先来个欲扬先抑，聊聊升级后所碰到的问题吧。</p><p>其中有两个问题我们感知比较明显，特别是第一个。</p><h2>topic 被删除</h2><p>我们在上个月某天凌晨从 <code>2.11.2</code> 升级到 <code>3.0.1</code> 之后，进行了上一篇文章中所提到的功能性测试，发现没什么问题，觉得一切都还挺顺利的，半个小时搞定后就下班了。</p><p>结果哪知道第二天是被电话叫醒的，有部分业务反馈业务重启之后就无法连接到 Pulsar 了。</p><p><img src="https://s2.loli.net/2024/01/02/KUAnZ8W65jO3x7d.png" alt="image.png" referrerpolicy="no-referrer"> 最终定位是 topic 被删除了。</p><blockquote><p>其中的细节还蛮多的，修复过程也是一波三折，后面我会单独写一篇文章来详细梳理这个过程。</p></blockquote><p>在这个 issue 和 PR 中有详细的描述： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fissues%2F21653" target="_blank">https://github.com/apache/pulsar/issues/21653</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fpull%2F21704" target="_blank">https://github.com/apache/pulsar/pull/21704</a></p><p>感兴趣的朋友也可以先看看。</p><h2>监控指标丢失</h2><p>第二个问题不是那么严重，是升级后发现 bookkeeper 的一些监控指标丢失了，比如这里的写入延迟： <img src="https://s2.loli.net/2024/01/02/9c7qs4CX1lejOIn.png" alt="image.png" referrerpolicy="no-referrer"> 我也定位了蛮久，但不管是官方的 docker 镜像还是源码编译都无法复现这个问题。</p><p>最终丢失的指标有这些：</p><ul><li>bookkeeper_server_ADD_ENTRY_REQUEST</li><li>bookkeeper_server_ADD_ENTRY_BLOCKED</li><li>bookkeeper_server_READ_ENTRY_BLOCKED</li><li>bookie_journal_JOURNAL_CB_QUEUE_SIZE</li><li>bookie_read_cache_hits_count</li><li>bookie_read_cache_misses_count</li><li>bookie_DELETED_LEDGER_COUNT</li><li>bookie_MAJOR_COMPACTION_COUNT</li></ul><p>详细内容可以参考这个 issue： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fissues%2F21766" target="_blank">https://github.com/apache/pulsar/issues/21766</a></p><h1>新特性</h1><p>讲完了遇到的 bug，再来看看带来的新特性，重点介绍我们用得上的特性。</p><h2>支持低负载均衡</h2><p><img src="https://s2.loli.net/2024/01/02/KVpW4DyNimlMhqH.png" alt="image.png" referrerpolicy="no-referrer"></p><p>当我们升级或者是重启 broker 的时候，全部重启成功后其实会发现最后重启的那个 broker 是没有流量的。</p><p>这个原理和优化在之前写过的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcrossoverjie.top%2F2023%2F02%2F07%2Fpulsar%2Fpulsar-load-banance%2F%23Pulsar-%25E8%25B4%259F%25E8%25BD%25BD%25E5%259D%2587%25E8%25A1%25A1%25E5%258E%259F%25E7%2590%2586" target="_blank">Pulsar 负载均衡原理及优化</a> 其实有详细介绍。</p><p>本次 3.0 终于将那个优化发版了，之后只要我们配置 <code>lowerBoundarySheddingEnabled: true</code> 就能开启这个低负载均衡的一个特性，使得低负载的 broker 依然有流量进入。</p><h2>跳过空洞消息</h2><p><img src="https://s2.loli.net/2024/01/02/nj2IyteVUQ79SBZ.png" alt="image.png" referrerpolicy="no-referrer"> Pulsar 可能会因为消息消费异常导致游标出现空洞，从而导致磁盘得不到释放；</p><p>所以我们有一个定时任务，会定期扫描积压消息的 topic 判断是否存在空洞消息，如果存在便可以在管理台使用 skipMessage API 跳过空洞消息，从而释放磁盘。</p><p>但在 3.0 之前这个跳过 API 存在 bug，只要跳过的数量超过 8 时，实际跳过的数量就会小于 8.</p><p>具体 issue 和修复过程在这里： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fissues%2F20262" target="_blank">https://github.com/apache/pulsar/issues/20262</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fpull%2F20326" target="_blank">https://github.com/apache/pulsar/pull/20326</a></p><p>总之这个问题在 3.0 之后也是修复了，有类似需求的朋友也可以使用。</p><h2>新的负载均衡器</h2><p>同时也支持了一个新的负载均衡器，解决了以下问题：</p><ul><li>以前的负载均衡大量依赖 zk，当 topic 数量增多时对扩展性带来问题。 
  <ul><li>新的负载均衡器使用 <code>non-persistent</code> 来存储负载信息，就不再依赖 zk 。</li></ul></li><li>以前的负载均衡器需要依赖 <code>leader broker</code> 进行重定向到具体的 broker，其实这些重定向并无意义，徒增了系统开销。 
  <ul><li>新的负载均衡器使用了 SystemTopic 来存放 topic 的所有权信息，这样每个 broker 都可以拿到数据，从而不再需要从 leader broker 重定向了。</li></ul></li></ul><p>更多完整信息可以参考这个 PIP: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fpulsar%2Fissues%2F16691" target="_blank">PIP-192: New Pulsar Broker Load Balancer</a></p><h2>支持大规模延迟消息</h2><p>第二个重大特性是支持大规模延迟消息，相信是有不少企业选择 Pulsar 也是因为他原生就支持延迟消息。</p><p>我们也是大量在业务中使用延迟消息，以往的延迟消息有着以下一些问题：</p><ul><li>内存开销过大，延迟消息的索引都是保存在内存中，即便是可以分布在多个 broker 中分散存储，但消耗依然较大 
  <ul><li>重点优化了索引的内存占有量。</li></ul></li><li>重启 broker 时会消耗大量时候重建索引 
  <ul><li>支持了索引快照，最大限度的降低了构建索引的资源消耗。</li></ul></li></ul><h1>待优化功能</h1><h2>监控面板优化</h2><p>最后即便是升级到了 3.0 依然还有一些待优化的功能，在之前的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcrossoverjie.top%2F2023%2F08%2F03%2Fob%2FPulsar-Client%2F" target="_blank">从 Pulsar Client 的原理到它的监控面板</a>中有提到给客户端加了一些监控埋点信息。</p><p>最终使用下来发现还缺一个 ack 耗时的一个面板，其实日常碰到最多的问题就是突然不能消费了（或者消费过慢）。</p><p>这时如果有这样的耗时面板，首先就可以定位出是否是消费者本身的问题。</p><p><img src="https://s2.loli.net/2024/01/03/YFoy4PfnRbz72qX.png" alt="image.png" referrerpolicy="no-referrer"> 目前还在开发中，大概类似于这样的数据。</p><h1>总结</h1><p>Pulsar3.0 是 Pulsar 的第一个 LTS 版本，推荐尽快升级可以获得长期支持。 但只要是软件就会有 bug，即便是 LTS 版本，所以大家日常使用碰到 Bug 建议多向社区反馈，一起推动 Pulsar 的进步。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 04:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/crossoverjie/blog/10678357</guid>
            <link>https://my.oschina.net/crossoverjie/blog/10678357</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AI 大模型首次牵手国民级综艺，昆仑万维天工 AI 联合《最强大脑》加速大模型落地]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>1 月 5 日周五晚 21:20，由昆仑万维「天工 APP」特约赞助的《最强大脑》第 11 季正式播出。</span></span></span></span></span><strong><span style="background-color:#ffffff"><span><span style="color:#222222"><span>这是 AI 大模型技术与国民级综艺 IP 的首度深度合作</span></span></span></span></strong><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>，在节目中，「天工 APP」将发挥其能搜、能聊、能写的多项超级 AI 大模型能力，与嘉宾选手深度互动，参与趣味脑力竞技环节，从而进一步推动大模型技术的普适应用，降低技术门槛，让越来越多的用户能够轻松、便捷地拥抱大模型。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-0d6fccfb6752359be7a21bfe88595876a12.png" width="1267" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>作为一档国内影响力最广、最具代表性的国民级的大型科学竞技综艺节目，《最强大脑》在过去十年间已成功举办了 10 期，在 372 个挑战项目中</span></span></span></span></span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>，</span></span></span></span></span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>近 600 位中外选手齐聚舞台，参与脑力竞技、传播科学知识，鼓励越来越多的观众们不断突破能力边界，开拓大脑潜能。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:justify"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-b1a63ff1d5fe64826bead3eefd0c56b6bad.png" width="1267" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>本次「天工 APP」与《最强大脑》第 11 季的深度合作，既是《最强大脑》在科学科普、赛制创新上的又一次尝试，</span></span></span></span></span><strong><span style="background-color:#ffffff"><span><span style="color:#222222"><span>也是以「天工 APP」为代表的 AI 大模型技术在用户更多日常使用场景中的推广与落地。</span></span></span></span></strong></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="" height="976" src="https://oscimg.oschina.net/oscnet/up-9741a5d12eccfbcf9dc28df09dd2ede734a.png" width="720" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>比如，在节目第一期的「天工开悟」环节中，用户可以通过在「天工 APP」中实时搜索「大位数速算法」，与台上的选手们同步学习运用心算技巧，挑战最强大脑。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="" height="751" src="https://oscimg.oschina.net/oscnet/up-ea25660c5d5c9745295d24537388f01df14.png" width="661" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><span><span><span><span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>与此同时，「天工 APP」还与《最强大脑》联合发起了</span></span></span></span></span><strong><span style="background-color:#ffffff"><span><span style="color:#222222"><span>脑力挑战赛</span></span></span></span></strong><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>，用户可进入「天工 APP」最强大脑专区，通过 15 道逻辑、计算、观察、记忆、空间、创造题目的作答，分析出用户专属的「脑力潜能六维图」，识别个人脑力潜能所在，从而有针对性地开发锻炼。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span style="color:#222222"><span>用户还可以在「天工 APP」里为喜欢的选手投票助威，并赢得亲临现场的机会，共同见证本季脑王夺冠时刻。</span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><span><span><span style="background-color:#ffffff"><span><span style="color:#222222"><span>随着后续节目的播出，还将有更多来自「天工 APP」的「惊喜彩蛋」，全方位地展现 AI 大模型技术在不同场景中如何为用户学习生活带来便利，降低技术门槛，推动大模型技术走入千家万户，让 AI 触手可及。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><span><strong><span style="background-color:#ffffff"><span><span style="color:#222222"><span>每周五晚 21:20 锁定江苏衞视，昆仑万维天工 APP 携手《最强大脑》第 11 季，天赋回归，脑力封神。</span></span></span></span></strong></span></span></span></span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 04:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274703</guid>
            <link>https://www.oschina.net/news/274703</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[某中学采购「智能互动宣泄仪」——实则为任天堂 Wii 的套壳]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>最近，广州某中学的学生在网上发帖称，该校采购了「智能互动宣泄仪」帮助学生们释放压力，该设备功能特征包括：人机互动、体感训练、体能检测、力学感知、身心平衡训练、虚拟运动训练、建立宣泄档案。</p><p>根据学生在微博上发布的视频，所谓「智能互动宣泄仪」<strong>其实是一台任天堂 Wii 游戏机连接了一个显示屏</strong>，但其采购价高达 46000 元。而在电商平台上，任天堂 Wii 游戏机价格为 600 元左右。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1c72c99904de625f4332ee6f95291e7b59c.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-10711ecb9c79de2a4a684bd2258d3c2b699.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ff968abd3c6c2bc39a5823ed41712f0c0ce.png" referrerpolicy="no-referrer"></p><p>参见下图，这确实是物理意义上的「套壳」：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-58cd5cf8c2ac60c565c31e8513b12e1ec64.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274693</guid>
            <link>https://www.oschina.net/news/274693</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TIOBE 2023 年度编程语言：C#]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>TIOBE&nbsp;宣布&nbsp;2023 年度编程语言花落&nbsp;C#，这是&nbsp;C# 在 TIOBE 指数历史上首次荣获年度编程语言的奖项。</p><p><img height="64" src="https://oscimg.oschina.net/oscnet/up-db2c2ac24b28289dd46cdbf4bea8067aa28.png" width="700" referrerpolicy="no-referrer"></p><p>一直以来，C# 都稳居榜单前十名，去年则成为了年度涨幅最大的语言（+1.43%）。紧随其后的是 Scratch（+0.83%）和 Fortran（+0.64%）</p><p><span style="color:#000000">TIOBE CEO&nbsp;Paul Jansen 认为，</span>C# 正在追赶四大语言的步伐，蚕食 Java 的市场份额，并在<span style="color:#24292e">Web 应用程序后端和游戏</span>（得益于 Unity）等领域越来越受欢迎。「C# 可以免费使用，而且发展速度稳定，每次发布新版本都会使语言更具表现力。C# 将继续存在，甚至可能很快超过 Java。」</p><p>除此之外，去年的 TIOBE 指数还发生了一些其他的有趣变化。Fortran 和 Kotlin 取代了 R 和 Perl，常驻榜单 Top 20。一个有趣的问题是：2024 年，哪些语言将进入 TIOBE 指数前 20 名？</p><p><span style="color:#000000">Paul 的观点是：</span>很难预测。2023 年，Julia 曾短暂进入 TIOBE 指数，但未能保持这一位置；要想获得第二次机会，则需要 Julia 语言和社区的成熟。「我会把赌注押在 Dart（with&nbsp;Flutter）和 TypeScript 上。后者已经在业界得到了广泛应用，但由于某些原因，它还没有在 TIOBE 指数中取得突破。让我们拭目以待 2024 年的发展。」</p><p><strong style="color:#333333">TIOBE 1 月 TOP 20 编程语言</strong></p><p><img height="413" src="https://oscimg.oschina.net/oscnet/up-51cde871f2fcdc7b05035d73cd44695f53c.png" width="500" referrerpolicy="no-referrer"></p><p>Scratch 相较上月上升一位&nbsp;<span style="background-color:#ffffff; color:#000000">(11→10)</span>，进入&nbsp;Top 10 榜单；Assembly language 被挤落，从第 10 位跌至 15。<span style="background-color:#ffffff; color:#000000">其他语言的一些波动还包括：</span></p><ul><li><span style="background-color:#ffffff; color:#333333">Go<span>&nbsp;</span></span><span style="background-color:#ffffff; color:#000000">的排名从 13 又回升至 11</span></li><li><span style="background-color:#ffffff; color:#000000">Delphi/Object Pascal&nbsp;</span><span style="background-color:#ffffff; color:#000000">的排名从 16 升至 13</span></li><li><span style="color:#000000">Swift&nbsp;<span style="background-color:#ffffff">的排名从 </span></span><span style="background-color:#ffffff; color:#000000">17 升至 16</span></li><li><span style="color:#000000">Kotlin&nbsp;<span style="background-color:#ffffff">的排名从 15&nbsp;跌至 17</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Ruby 的排名从 19 升至 18</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Rust 的排名从 18 跌至 19</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">COBOL&nbsp;的排名从 23 升至 20</span></span></li><li><span style="background-color:#ffffff; color:#000000">Fortran、MATLAB 则分别保持第 12、14 位不变；上月榜单中第 20 位的 R 语言，在本月榜单中跌至了第 23 位，与&nbsp;</span><span style="color:#000000"><span style="background-color:#ffffff">COBOL 排名进行了互换。</span></span></li></ul><p><strong style="color:#333333">TOP 10 编程语言 TIOBE 指数走势（2002-2024）</strong></p><p><img height="222" src="https://oscimg.oschina.net/oscnet/up-dc9e870242c6d049337fb838adea09a3236.png" width="700" referrerpolicy="no-referrer"></p><p><strong style="color:#333333">第 21-50 名编程语言排行</strong></p><p><img height="439" src="https://oscimg.oschina.net/oscnet/up-a98ae6f64844c6dc2d91b93487afbf1725d.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#000000">第 51-100 名如下，由于它们之间的数值差异较小，仅以文本形式列出（按字母排序）：</span></p><blockquote><p>Algol, AutoLISP, Avenue, Bash, bc, Boo, CIL, CL (OS/400), CLIPS, Clojure, CLU, Curl, DiBOL, Erlang, Forth, Hack, Icon, Io, J, J#, JScript, LabVIEW, Ladder Logic, Lingo, LiveCode, M4, Maple, MQL5, NATURAL, Nim, OpenEdge ABL, PL/I, PostScript, PowerShell, Pure Data, Q, Racket, REXX, Ring, RPG, Scheme, Snap!, Solidity, SPARK, SPSS, Squirrel, Stata, Wolfram, Xojo, XQuery</p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">TIOBE 编程社区指数（The TIOBE Programming Community index）是一个衡量编程语言受欢迎程度的指标，该指数每月更新一次。评判的依据来自世界范围内的工程师、课程和第三方供应商，包括流行的搜索引擎，如 Google、必应、雅虎、维基百科、亚马逊、YouTube 和百度都被用于指数计算。值得注意的是，TIOBE 指数并不代表编程语言的好坏或编写代码的多少。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">该指数可以用来检查你的编程技能是否还能跟上时代的步伐，或者在开始建立一个新的软件系统时，基于指数对采用何种编程语言做出决策。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tiobe.com%2Ftiobe-index%2Fprogramminglanguages_definition%2F" target="_blank">TIOBE 指数</a><span style="color:#000000">的定义方式，以及详细榜单信息<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tiobe.com%2Ftiobe-index%2F" target="_blank">均可查看官网</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 03:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274691/tiobe-index-202401</guid>
            <link>https://www.oschina.net/news/274691/tiobe-index-202401</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[欢迎 Tianai-Captcha 加入 Dromara 开源社区，可能是开源界最好用的行为验证码工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>作者介绍</h2><blockquote><p>95 后大龄程序员，一名野生的民间技术爱好者，15 年学习编程技术，迫于生计于 17 年就职于某电商公司， 在从业生涯中，本项目 2020 年发布后，后续也是改改停停，自古闲人出金货，也许有一天笔者自由了，会好好的完善这套框架。</p></blockquote><h2>引言:</h2><blockquote><p>譬如在今之网络世界，为保障资讯之安全，凡入网之人或事，多须经由验证之法以证实己身之真实性。是以，验证码乃必不可少之一环也。其重要性备矣，具诚信者无不体知。</p><p>朕观网络之变幻，验证码多以随机字母构成者为众所周知。然而，此类验证码对于一般用户而言，尤其易于应用。盖因滑动、点选等高级验证码，虽能提供更加友好之体验，然然不易于普通用户之应用。</p><p>吾观察于平民百姓，多未涉猎于技术深处，对于复杂之滑动、点选类验证码而言，或存不解其所在。且诸多普通用户或使用传统设备，或因技术限制而难以适用此等新颖验证码。是以，此类验证码对于普罗百姓而言，未免难以为继。</p><p>嗟乎！有智者闻我国民之难，乃发明滑动及点选验证码以应民需，其善心可嘉。彼将此等验证码开源，使广大百姓得以轻松接纳，实属可喜可贺。</p><p>滑动及点选验证码之开源，如一泓清泉，涤荡网络之隐忧。于此，一般百姓不复为验证码所困，得以轻松、便利之享用。其操作简便，贴近生活，解民忧而广受欢迎，实为普及网络安全之一良策。</p><p>开源此等验证码者，其举措实乃有益于民众。不仅促进了网络安全，亦鼓舞了普罗百姓参与其中之热情。愿诸般良好之举措，皆能为社会大众所接纳，盛行于世。</p></blockquote><hr><h2>关于 TIANAI-CAPTCHA</h2><p><code>tianai-captcha</code>简称<code>tac</code>，是一款集成滑动类、点选类的一款行为验证码，以使用简单、安全性强、界面美观、接入方便而，是为集好看、功能多、安全性强的一款开源行为验证码工具。</p><hr><p><img alt="" src="https://files.mdnice.com/user/29321/f7dbe307-c5c2-4ee4-b3ec-1434a22b5b28.jpg" referrerpolicy="no-referrer"></p><p><img alt="" src="https://files.mdnice.com/user/29321/98590d8c-b83d-40d1-a136-028372f94236.jpg" referrerpolicy="no-referrer"></p><h2>在线体验</h2><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fcaptcha.tianai.cloud" target="_blank">http://captcha.tianai.cloud</a></p><h2>使用方式</h2><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdoc.captcha.tianai.cloud" target="_blank">http://doc.captcha.tianai.cloud</a></p><h2>源码地址</h2><p><a href="https://gitee.com/dromara/tianai-captcha">https://gitee.com/dromara/tianai-captcha</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdromara%2Ftianai-captcha" target="_blank">https://github.com/dromara/tianai-captcha</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 02:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274680</guid>
            <link>https://www.oschina.net/news/274680</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux Kernel 6.7 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linus 在内核邮件列表<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3Dwidprp4XoHUcsDe7e16YZjLYJWra-dK0hE1MnfPMf6C3Q%40mail.gmail.com%2F" target="_blank">宣布</a></u>正式推出 Linux Kernel 6.7。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-b6365c91033369ca50b55b531ed64765d8a.png" referrerpolicy="no-referrer"></p></blockquote><p>据称此版本是有史以来合并数最多的版本之一，包含 17k+ 个非合并 commit，实际合并的超过 1000 个。</p><p><strong>主要变化</strong></p><ul><li>主线内核已合并实验性 Bcachefs 文件系统</li><li>现在默认启用 Intel Meteor Lake 显卡支持</li><li>在 x86-64 内核上启用/禁用 32 位模拟的选项</li><li>KVM 支持 LoongArch 虚拟化</li><li>KVM on RISC-V 支持 Smstateen 扩展</li><li>默认启用 Intel Meteor Lake 图形支持，同时还引入了针对 Intel Xe2Lunar Lake 图形的支持</li><li>为&nbsp;Nouveau 开源图形驱动程序新增对 NVIDIA GPU 系统处理器（GSP）固件的支持，从而带来更好的电源管理性能，还包括 Nouveau 设置中的 RTX 40 加速</li><li>USB Type-C 驱动现已支持 DP Alt Mode 2.1</li><li>AMD Seamless Boot 现适用于更多 AMD 硬件</li><li>F2FS 现已支持更大的页面大小</li><li>Btrfs 功能增强，例如添加了 FSID（临时文件系统 ID）支持（Valve 希望为&nbsp;Steam Deck 的&nbsp; Steam OS 引入这一功能）</li><li>AppArmor 访问控制现在可以应用于 io_uring，并支持创建用户命名空间</li><li>添加了 Rust 对工作队列的绑定，并升级到 Rust 1.73 工具链</li><li>对 perf 工具进行了大量改进和功能更新</li><li>移除了古老的 videobuf 层</li><li>对 Logitech HID++ 进行了调整</li><li>ASUS WMI 驱动增加了对 Screenpad 的支持</li></ul><p><u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.omgubuntu.co.uk%2F2024%2F01%2Flinux-kernel-6-7-new-features" target="_blank">详情</a></strong></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274674/linux-kernel-6-7</guid>
            <link>https://www.oschina.net/news/274674/linux-kernel-6-7</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[马化腾回应早期微信「偷窥」用户相册：图片缓存加速造成的误会]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>据 CSDN 报道，针对早前有软件工程师爆料称包括微信等在内的多款国民级 App 在后台反复读取用户相册一事，1 月 5 日，马化腾独家回应：「应该是 21 年 10 月的事了，图片缓存加速造成的误会，后面应该用 iOS 新的解决卡顿的 API 解决了」。并特别表示，「可以帮忙辟谣」。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-61301141026d7bfed6e78fc18961393ff36.png" referrerpolicy="no-referrer"></p><p>事情的前因还要追溯到 2021 年 10 月 8 日，当时苹果 iOS 15 刚刚推出隐私新特性 「记录 App 活动」，对所有 App 的隐私读取行为进行了 7 天的监控，并使用 App Privacy Insights 对记录进行读取。 &nbsp;数码博主、软件开发工程师 @Hackl0us 发现微信在用户未主动激活 App 的情况下，在后台数次读取用户相册，每次读取时间长达 40 秒，至 1 分钟不等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5c44695ad62718318a0289820dd5dc8bb89.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274667</guid>
            <link>https://www.oschina.net/news/274667</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ParadeDB —— 基于 Postgres 的 ElasticSearch 替代方案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">ParadeDB 是</span>基于 Postgres 构建的开源 ElasticSearch 替代方案<span style="color:#000000">。开发团队正在构建 ElasticSearch 产品套件的功能，首先是搜索。</span></p><p><span style="color:#000000">ParadeDB 提供所有 Postgres 数据库中最全面的 Postgres 原生搜索功能。</span></p><ul><li><strong>全文搜索</strong>。使用可配置的分词器、17 种语言的词干以及基于 SQL 的可扩展查询语言按关键字或短语进行搜索。</li><li><strong>相似性搜索</strong>。使用预安装的 pgvector 扩展和工作流程按语义进行搜索，逐步保持向量同步。</li><li><strong>混合搜索</strong>。通过混合搜索提供更高精确度和召回率的结果，该搜索结合了全文搜索和相似性搜索的优势。</li><li><strong>BM25 Scoring</strong>。全文搜索结果按 BM25 排序，BM25 是 ElasticSearch 使用的基于术语的排名算法。</li><li><strong>分面搜索</strong>。通过分面搜索存储和收集搜索结果的统计指标。</li><li><strong>分布式搜索</strong>。ParadeDB 自动对索引进行分片，使开发人员的搜索速度比单节点 Postgres 快数百倍。</li></ul><p>ParadeDB 的搜索引擎基于 Tantivy 开发，Tantivy 是 Apache Lucene 的基于 Rust 的实现。</p></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 02:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/paradedb</guid>
            <link>https://www.oschina.net/p/paradedb</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 轻量级隐私计算任务编排框架 Kuscia]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-kuscia" class="anchor" href="https://gitee.com/secretflow/kuscia#kuscia"></a>Kuscia</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdl.circleci.com%2Fstatus-badge%2Fredirect%2Fgh%2Fsecretflow%2Fkuscia%2Ftree%2Fmain"><img src="https://dl.circleci.com/status-badge/img/gh/secretflow/kuscia/tree/main.svg?style=svg" alt="CircleCI" referrerpolicy="no-referrer"></a></p><p align="center"><a href="https://gitee.com/secretflow/kuscia/blob/main/README.zh-CN.md">简体中文</a>｜<a href="https://gitee.com/secretflow/kuscia/blob/main/README.md">English</a></p><p>Kuscia（Kubernetes-based Secure Collaborative InfrA）是一款基于 K3s 的轻量级隐私计算任务编排框架，旨在屏蔽异构基础设施和协议，并提供统一的隐私计算底座。通过 Kuscia：</p><ul><li>你可以快速体验隐私计算功能。</li><li>你可以获得完整的隐私计算生产能力。</li><li>你可以与行业内多种隐私计算系统进行互联互通。</li><li>你可以使用不同的中心化或点对点业务组网模式。</li></ul><p><img src="https://gitee.com/secretflow/kuscia/raw/main/docs/imgs/kuscia_architecture.png" alt="Kuscia" referrerpolicy="no-referrer"></p><h2><a id="user-content-文档" class="anchor" href="https://gitee.com/secretflow/kuscia#%E6%96%87%E6%A1%A3"></a>文档</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.secretflow.org.cn%2Fdocs%2Fkuscia%2Flatest%2Fzh-Hans%2F">Kuscia</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.secretflow.org.cn%2Fdocs%2Fkuscia%2Flatest%2Fzh-Hans%2Fgetting_started%2Findex.html">准备开始</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.secretflow.org.cn%2Fdocs%2Fkuscia%2Flatest%2Fzh-Hans%2Freference%2Findex.html">参考手册</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.secretflow.org.cn%2Fdocs%2Fkuscia%2Flatest%2Fzh-Hans%2Ftutorial%2Findex.html">教程</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.secretflow.org.cn%2Fdocs%2Fkuscia%2Flatest%2Fzh-Hans%2Fdevelopment%2Findex.html">开发</a></li></ul><h2><a id="user-content-贡献代码" class="anchor" href="https://gitee.com/secretflow/kuscia#%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81"></a>贡献代码</h2><p>请查阅 <a href="https://gitee.com/secretflow/kuscia/blob/main/CONTRIBUTING.md">CONTRIBUTING.md</a></p><h2><a id="user-content-声明" class="anchor" href="https://gitee.com/secretflow/kuscia#%E5%A3%B0%E6%98%8E"></a>声明</h2><p>非正式发布的 Kusica 版本仅用于演示，请勿在生产环境中使用。尽管此版本已涵盖 Kuscia 的基础功能，但由于项目存在功能不足和待完善项，可能存在部分安全问题和功能缺陷。因此，我们欢迎你积极提出建议，并期待正式版本的发布。</p>]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 02:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/secretflow/kuscia</guid>
            <link>https://gitee.com/secretflow/kuscia</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 米哈游大数据云原生实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><em>作者：米哈游大数据开发</em></p><p>近年来，容器、微服务、Kubernetes 等各项云原生技术的日渐成熟，越来越多的公司开始选择拥抱云原生，并开始将 AI、大数据等类型的企业应用部署运行在云原生之上。以 Spark 为例，在云上运行 Spark 可以充分享有公共云的弹性资源、运维管控和存储服务等，并且业界也涌现了不少 Spark on Kubernetes 的优秀实践。</p><p>在刚刚结束的 2023 云栖大会上，米哈游数据平台组大数据技术专家杜安明分享了米哈游大数据架构向云原生化升级过程中的目标、探索和实践，以及如何通过以阿里云容器服务 ACK 为底座的 Spark on K8s 架构，获得在弹性计算、成本节约以及存算分离方面的价值。</p><h2>背景简介</h2><p>随着米哈游业务的高速发展，大数据离线数据存储量和计算任务量增长迅速，早期的大数据离线架构已不再满足新场景和需求。</p><p>为了解决原有架构缺乏弹性、运维复杂、资源利用率低等问题，2022 年下半年，我们着手调研将大数据基础架构云原生化，并最终在阿里云上落地了 Spark on K8s + OSS-HDFS 方案，目前在生产环境上已稳定运行了一年左右的时间，并获得了弹性计算、成本节约以及存算分离这三大收益。</p><p><strong>1. 弹性计算</strong></p><p>由于游戏业务会进行周期版本更新、开启活动以及新游戏的上线等，对离线计算资源的需求与消耗波动巨大，可能是平时水位的几十上百倍。利用 K8s 集群天然的弹性能力，将 Spark 计算任务调度到 K8s 上运行，可以比较轻松的解决这类场景下资源消耗洪峰问题。</p><p><strong>2. 成本节约</strong></p><p>依托阿里云容器服务 Kubernetes 版 ACK 集群自身强大的弹性能力，所有计算资源按量申请、用完释放，再加上我们对 Spark 组件的定制改造，以及充分利用 ECI Spot 实例，在承载同等计算任务和资源消耗下，成本节约达 50%。</p><p><strong>3. 存算分离</strong></p><p>Spark 运行在 K8s 之上，完全使用 K8s 集群的计算资源，而访问的则数据也由 HDFS、OSS 逐步切换到 OSS-HDFS 上，中间 Shuffle 数据的读写采用 Celeborn，整套架构实现了计算和存储的解耦，易于维护和扩展。</p><h2>Spark on K8s&nbsp;架构演进</h2><p>众所周知，Spark 引擎可以支持并运行在多种资源管理器之上，比如 Yarn、K8s、Mesos 等。在大数据场景下，目前国内大多公司的 Spark 任务还是运行在 Yarn 集群之上的，Spark 在 2.3 版本首次支持 K8s，并于 2021 年 3 月发布的 Spark3.1 版本才正式 GA。</p><p>相较于 Yarn，Spark 在 K8s 上起步较晚，尽管在成熟度、稳定性等方面还存在一定的欠缺，但是 Spark on K8s 能够实现弹性计算以及成本节约等非常突出的收益，所以各大公司也都在不断进行尝试和探索，在此过程中，Spark on K8s 的运行架构也在不断的向前迭代演进。</p><p><img src="https://oscimg.oschina.net/oscnet/up-91f57f93e692da3c3bc6738e3cbe09d8dce.png" alt="" referrerpolicy="no-referrer"></p><h3>1. 在离线混部</h3><p>目前，将 Spark 任务运行在 K8s 上，大多公司采用的方案依旧是在线与离线混合部署的方式。架构设计依据的原理是，不同的业务系统会有不同的业务高峰时间。大数据离线业务系统典型任务高峰期间会是凌晨的&nbsp;0&nbsp;点到 9 点钟，而像是各种应用微服务、Web 提供的 BI 系统等，常见的业务高峰期是白天时间，在这个时间以外的其它时间中，可以将业务系统的机器 Node 加入到 Spark 所使用的 K8s NameSpace &nbsp;中。如下图所示，将 Spark 与其他在线应用服务等都部署在一套 K8s 集群之上。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c37f20f1df91812d5e7c562815e3b9f0ed4.png" alt="" referrerpolicy="no-referrer"></p><p>该架构的优点是可以通过在离线业务的混合部署和错峰运行，来提升机器资源利用率并降低成本，但是缺点也比较明显，即架构实施起来复杂，维护成本比较高，而且难以做到严格的资源隔离，尤其是网络层面的隔离，业务之间不可避免的会产生一定的相互影响，此外，我们认为该方式也不符合云原生的理念和未来发展趋势。</p><h3>2. Spark&nbsp;on&nbsp;K8s&nbsp;+&nbsp;OSS-HDFS</h3><p>考虑到在离线混合部署的弊端，我们设计采用了一种新的、也更加符合云原生的实现架构：底层存储采用 OSS-HDFS(JindoFs)，计算集群采用阿里云的容器服务 ACK，Spark 选择功能相对丰富且比较稳定的 3.2.3 版本。</p><p>OSS-HDFS 完全兼容了 HDFS 协议，除了具备 OSS 无限容量、支持数据冷热存储等优点以外，还支持了目录原子性、毫秒级 rename 操作，非常适用于离线数仓，可以很好的平替现有 HDFS 和 OSS。</p><p>阿里云 ACK 集群提供了高性能、可伸缩的容器应用管理服务，可以支持企业级 Kubernetes 容器化应用的生命周期管理，ECS 是大家所熟知的阿里云服务器，而弹性容器实例 ECI 是一种 Serverless 容器运行服务，可以按量秒级申请与释放。</p><p>该架构简单易维护，底层利用 ECI 的弹性能力，Spark 任务可以较为轻松的应对高峰流量，将 Spark 的 Executor 调度在 ECI 节点上运行，可最大程度的实现计算任务弹性与最佳的降本效果，整体架构的示意图如下所示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-02cd50d97a62975f921948f5fa16139e6dc.png" alt="" referrerpolicy="no-referrer"></p><h2>云原生架构设计与实现</h2><h3>1. 基本原理</h3><p>在阐述具体实现之前，先简要介绍一下 Spark 在 K8s 上运行的基本原理。Pod 在 K8s 中是最小的调度单元，Spark 任务的 Driver 和 Executor 都是一个单独 Pod，每个 Pod 都分配了唯一的 IP 地址，Pod 可以包含一个或多个 Container，无论是 Driver 还是 Executor 的 JVM 进程，都是在 Container 中进行启动、运行与销毁的。</p><p>一个 Spark 任务被提交到 K8s 集群之后，首先启动的是 Driver Pod，而后 Driver 会向 Apiserver 按需申请 Executor，并由 Executor 去执行具体的 Task，作业完成之后由 Driver 负责清理所有的 Executor Pod，以下是这几者关系的简要示意图。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f76c245cf83130f4a99cf98056228951683.png" alt="" referrerpolicy="no-referrer"></p><h3>2. 执行流程</h3><p>下图展示了完整的作业执行流程，用户在完成 Spark 作业开发后，会将任务发布到调度系统上并进行相关运行参数的配置，调度系统定时将任务提交到自研的 Launcher 中间件，并由中间件来调用 spark-k8s-cli，最终由 Cli 将任务提交至 K8s 集群上。任务提交成功之后，Spark Driver Pod 最先启动，并向集群申请分配 Executor Pod，Executor 在运行具体的 Task 时，会与外部 Hive、Iceberg、OLAP 数据库、OSS-HDFS 等诸多大数据组件进行数据的访问与交互，而 Spark Executor 之间的数据 Shuffle 则由 CeleBorn 来实现。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f5d39e0da69d013c767af359682cf71fc2a.png" alt="" referrerpolicy="no-referrer"></p><h3>3. 任务提交</h3><p>关于如何将 Spark 任务提交到 K8s 集群上，各个公司的做法不尽相同，下面先简要描述下目前比较常规的做法，然后再介绍目前我们线上所使用的任务提交和管理方式。</p><h4>3.1 使用原生 spark-submit</h4><p>通过 spark-submit 命令直接提交，Spark 原生就支持这种方式，集成起来比较简单，也符合用户的习惯，但是不方便进行作业状态跟踪和管理，无法自动配置 Spark UI 的 Service 和 Ingress，任务结束后也无法自动清理资源等，在生产环境中并不适合。</p><h4>3.2 使用 spark-on-k8s-operator</h4><p>这是目前较常用的一种提交作业方式，K8s 集群需要事先安装 spark-operator，客户端通过 kubectl 提交 yaml 文件来运行 Spark 作业。本质上这是对原生方式的扩展，最终提交作业依然是使用 spark-submit 方式，扩展的功能包括：作业管理，Service/Ingress 创建与清理，任务监控，Pod 增强等。此种方式可在生产环境中使用，但与大数据调度平台集成性不太好，对于不熟悉 K8s 的用户来说，使用起来复杂度和上手门槛相对较高。</p><h4>3.3 使用 spark-k8s-cli</h4><p>在生产环境上，我们采用 spark-k8s-cli 的方式进行任务的提交。spark-k8s-cli 本质上是一个可执行的文件，基于阿里云 emr-spark-ack 提交工具我们进行了重构、功能增强和深度的定制。</p><p>spark-k8s-cli 融合 spark-submit 和 spark-operator 两种作业提交方式的优点，使得所有作业都能通过 spark-operator 管理，支持运行交互式 spark-shell 和本地依赖的提交，并且在使用方式上与原生 spark-submit 语法完全一致。</p><p>在上线使用初期，我们所有任务的 Spark Submit JVM 进程都启动在 Gateway Pod 中，在使用一段时间后，发现该方式稳定性不足，一旦 Gateway Pod 异常，其上的所有正在 Spark 任务都将失败，另外 Spark 任务的日志输出也不好管理。鉴于此种情况，我们将 spark-k8s-cli 改成了每个任务使用单独一个 Submit Pod 的方式，由 Submit Pod 来申请启动任务的 Driver，Submit Pod 和 Driver Pod 一样都运行在固定的 ECS 节点之上，Submit Pod 之间完全独立，任务结束后 Submit Pod 也会自动释放。spark-k8s-cli 的提交和运行原理如下图所示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-727f4fc057aedcd02fbc83b3b98bce9db35.png" alt="" referrerpolicy="no-referrer"></p><p>关于 spark-k8s-cli，除了上述基本的任务提交以外，我们还做了其他一些增强和定制化的功能。</p><ul><li>支持提交任务到同地域多个不同的 K8s 集群上，实现集群之间的负载均衡和故障转移切换</li><li>实现类似 Yarn 资源不足时的自动排队等待功能&nbsp;（K8s 如果设置了资源 Quota，当 Quota 达到上限后，任务会直接失败）</li><li>增加与 K8s 网络通信等异常处理、创建或启动失败重试等，对偶发的集群抖动、网络异常进行容错</li><li>支持按照不同部门或业务线，对大规模补数任务进行限流和管控功能</li><li>内嵌任务提交失败、容器创建或启动失败以及运行超时等告警功能</li></ul><h3>4. 日志采集与展示</h3><p>K8s 集群本身并没有像 Yarn 那样提供日志自动聚合和展示的功能，Driver 和 Executor 的日志收集需要用户自己来完成。目前比较常见的方案是在各个 K8s Node 上部署 Agent，通过 Agent 把日志采集并落在第三方存储上，比如 ES、SLS 等，但这些方式对于习惯了在 Yarn 页面上点击查看日志的用户和开发者来说，使用起来很不方便，用户不得不跳转到第三方系统上捞取查看日志。</p><p>为实现 K8s Spark 任务日志的便捷查看，我们对 Spark 代码进行了改造，使 Driver 和 Executor 日志最终都输出到 OSS 上，用户可以在 Spark UI 和 Spark Jobhistory 上，直接点击查看日志文件。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0eace11cc08cce9ab78ba861cb398c35717.png" alt="" referrerpolicy="no-referrer"></p><p>上图所示为日志的收集和展示原理，Spark 任务在启动时，Driver 和 Executor 都会首先注册一个 Shutdown Hook，当任务结束 JVM 退出时，调用 Hook 方法把完整的日志上传到 OSS 上。此外，想要完整查看日志，还需要对 Spark 的 Job History 相关代码做下改造，需要在 History 页面显示 stdout 和 stderr，并在点击日志时，从 OSS 上拉取对应 Driver 或 Executor 的日志文件，最终由浏览器渲染查看。另外，对于正在运行中的任务，我们会提供一个 Spark Running Web UI 给用户，任务提交成功后，spark-operator&nbsp;会自动生成的 Service 和 Ingress 供用户查看运行详情，此时日志的获取通过访问 K8s 的 api 拉取对应 Pod 的运行日志即可。</p><h3>5. 弹性与降本</h3><p>基于 ACK 集群提供的弹性伸缩能力，再加上对 ECI 的充分利用，同等规模量级下的 Spark 任务，运行在 K8s 的总成本要明显低于在 Yarn 固定集群上，同时也大大提高了资源利用率。</p><p>弹性容器实例 ECI 是一种 Serverless 容器运行服务，ECI 和 ECS 最大的不同就在于 ECI 是按量秒级计费的，申请与释放速度也是秒级的，所以 ECI 很适合 Spark 这一类负载峰谷明显的计算场景。</p><p><img src="https://oscimg.oschina.net/oscnet/up-265d37ec5e9ec1a64b70219ca89169e35bc.png" alt="" referrerpolicy="no-referrer"></p><p>上图示意了 Spark 任务在 ACK 集群上如何申请和使用 ECI，使用前提是在集群中安装 ack-virtual-node 组件，并配置好 Vswitch 等信息，在任务运行时，Executor 被调度到虚拟节点上，并由虚拟节点申请创建和管理 ECI。</p><p>ECI 分为普通实例和抢占式实例，抢占式实例是一种低成本竞价型实例，默认有 1 小时的保护期，适用于大部分 Spark 批处理场景，超出保护期后，抢占式实例可能被强制回收。为进一步提升降本效果，充分利用抢占式实例的价格优势，我们对 Spark 进行改造，实现了 ECI 实例类型自动转换的功能。Spark 任务的 Executor Pod 都优先运行在抢占式 ECI 实例上，当发生库存不足或其他原因无法申请创建抢占式实例，则自动切换为使用普通 ECI 实例，保证任务的正常运行。&nbsp;具体实现原理和转换逻辑如下图所示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-47f719ef69ab5b6992ea95f746548cc8ab4.png" alt="" referrerpolicy="no-referrer"></p><h3>6. Celeborn</h3><p>由于 K8s 节点的磁盘容量很小，而且节点都是用时申请、用完释放的，无法保存大量的 Spark Shuffle 数据。如果对 Executor Pod 挂载云盘，挂载盘的大小难以确定，考虑到数据倾斜等因素，磁盘的使用率也会比较低，使用起来比较复杂。此外，虽然 Spark 社区在 3.2 提供了 Reuse PVC 等功能，但是调研下来觉得功能尚不完备且稳定性不足。</p><p>为解决 Spark 在 K8s 上数据 Shuffle 的问题，在充分调研和对比多家开源产品后，最终采用了阿里开源的 Celeborn 方案。Celeborn 是一个独立的服务，专门用于保存 Spark 的中间 Shuffle 数据，让 Executor 不再依赖本地盘，该服务 K8s 和 Yarn 均可以使用。Celeborn 采用了 Push Shuffle 的模式，Shuffle 过程为追加写、顺序读，提升数据读写性能和效率。</p><p>基于开源的 Celeborn 项目，我们内部也做了一些数据网络传输方面的功能增强、Metrics 丰富、监控告警完善、Bug 修复等工作，目前已形成了内部稳定版本。</p><p><img src="https://oscimg.oschina.net/oscnet/up-08142d767f6df474b0c291a38b188840ab2.png" alt="" referrerpolicy="no-referrer"></p><h3>7. Kyuubi&nbsp;on&nbsp;K8s</h3><p>Kyuubi 是一个分布式和多租户的网关，可以为 Spark、Flink 或 Trino 等提供 SQL 等查询服务。在早期，我们的 Spark Adhoc 查询是发送到 Kyuubi 上执行的。为了解决 Yarn 队列资源不足，用户的查询 SQL 无法提交和运行的问题，在 K8s 上我们也支持了 Kyuubi Server 的部署运行，当 Yarn 资源不足时，Spark 查询自动切换到 K8s 上运行。鉴于 Yarn 集群规模逐渐缩减，查询资源无法保证，以及保障相同的用户查询体验，目前我们已将所有的 SparkSQL Adhoc 查询提交到 K8s 上执行。</p><p>为了让用户的 Adhoc 查询也能在 K8s 上畅快运行，我们对 Kyuubi 也做了一些源码改造，包括对 Kyuubi 项目中 docker-image-tool.sh、Deployment.yaml、Dockfile 文件的改写，重定向 Log 到 OSS 上，Spark Operator 管理支持、权限控制、便捷查看任务运行 UI 等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a97f1245c24b11a2c25c62b1bf824f0c0eb.png" alt="" referrerpolicy="no-referrer"></p><h3>8. K8s&nbsp;Manager</h3><p>在 Spark on K8s 场景下，尽管 K8s 有集群层面的监控告警，但是还不能完全满足我们的需求。在生产环境中，我们更加关注的是在集群上的 Spark 任务、Pod 状态、资源消耗以及 ECI 等运行情况。利用 K8s 的 Watch 机制，我们实现了自己的监控告警服务 K8s Manager，下图所示为该服务的示意图。</p><p><img src="https://oscimg.oschina.net/oscnet/up-530ec8ff85f98c8ff44efed2349011ef832.png" alt="" referrerpolicy="no-referrer"></p><p>K8sManager 是内部实现的一个比较轻量的 Spring Boot 服务，实现的功能就是对各个 K8s 集群上的 Pod、Quota、Service、ConfigMap、Ingress、Role 等各类资源信息监听和汇总处理，从而生成自定义的 Metrics 指标，并对指标进行展示和异常告警，其中包括集群 CPU 与 Memory 总使用量、当前运行的 Spark 任务数、Spark 任务内存资源消耗与运行时长 Top 统计、单日 Spark 任务量汇总、集群 Pod 总数、Pod 状态统计、ECI 机器型号与可用区分布统计、过期资源监控等等，这里就不一一列举了。</p><h3>9. 其他工作</h3><h4>9.1 调度任务自动切换</h4><p>在我们的调度系统中，Spark 任务支持配置 Yarn、K8s、Auto 三种执行策略。如果用户任务指明了需要运行使用的资源管理器，则任务只会在 Yarn 或 K8s 上运行，若用户选择了 Auto，则任务具体在哪里执行，取决于当前 Yarn 队列的资源使用率，如下图所示。由于总任务量较大，且 Hive 任务也在不断迁移至 Spark，目前仍然有部分任务运行在 Yarn 集群上，但最终的形态所有任务将由 K8s 来托管。</p><p><img src="https://oscimg.oschina.net/oscnet/up-35f4cbad3736b91872ac6f9bd97d486d940.png" alt="" referrerpolicy="no-referrer"></p><h4>9.2 多可用区、多交换机支持</h4><p>Spark 任务运行过程中大量使用 ECI，ECI 创建成功有两个前提条件: 1、能够申请到 IP 地址；2、当前可用区有库存。&nbsp;实际上，单个交换机提供的可用 IP 数量有限，单个可用区拥有的抢占式实例的总个数也是有限的，因此在实际生产环境中，无论是使用普通 ECI 还是 Spot 类型的 ECI，比较好的实践方式是配置支持多可用区、多交换机。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f08f0ecc5c0e2ea97499e52e5fd1a5f60c4.png" alt="" referrerpolicy="no-referrer"></p><h4>9.3 成本计算</h4><p>由于在 Spark 任务提交时，都已明确指定了每个 Executor 的 Cpu、Memory 等型号信息，在任务结束 SparkContxt 关闭之前，我们可以从任务的中拿到每个 Executor 的实际运行时长，再结合单价，即可计算出 Spark 任务的大致花费。由于 ECI Spot 实例是随着市场和库存量随时变动的，该方式计算出来的单任务成本是一个上限值，主要用于反映趋势。</p><h4>9.4 优化 Spark&nbsp;Operator</h4><p>在上线初期任务量较少时，Spark Operator 服务运行良好，但随着任务不断增多，Operator 处理各类 Event 事件的速度越来越慢，甚至集群出现大量的 ConfigMap、Ingress、Service 等任务运行过程中产生的资源无法及时清理导致堆积的情况，新提交 Spark 任务的 Web UI 也无法打开访问。发现问题后，我们调整了 Operator 的协程数量，并实现对 Pod Event 的批量处理、无关事件的过滤、TTL 删除等功能，解决了 Spark Operator 性能不足的问题。</p><h4>9.5 升级 Spark&nbsp;K8s&nbsp;Client</h4><p>Spark3.2.2 采用 fabric8(Kubernetes Java Client) 来访问和操作 K8s 集群中的资源，默认客户端版本为 5.4.1，在此版本中，当任务结束 Executor 集中释放时，Driver 会大量发送 Delete Pod 的 Api 请求到 K8s Apiserver 上，对集群 Apiserver 和 ETCD 造成较大的压力，Apiserver 的 cpu 会瞬间飙高。</p><p>目前我们的内部 Spark 版本，已将 kubernetes-client 升级到 6.2.0，支持 pod 的批量删除，解决 Spark 任务集中释放时，由大量的删除 Api 请求操作的集群抖动。</p><h2>问题与解决方案</h2><p>在整个 Spark on K8s 的方案设计以及实施过程中，我们也遇到了各种各样的问题、瓶颈和挑战，这里做下简单的介绍，并给出我们的解决方案。</p><h3>1.&nbsp;弹性网卡释放慢</h3><p>弹性网卡释放速度慢的问题，属于 ECI 大规模应用场景下的性能瓶颈，该问题会导致交换机上 IP 的剧烈消耗，最终导致 Spark 任务卡住或提交失败，具体触发原因如下图所示。目前阿里云团队已通过技术升级改造解决，并大幅提升了释放速度和整体性能。</p><p><img src="https://oscimg.oschina.net/oscnet/up-24660bc811456fd79a7853a00ff0a09a121.png" alt="" referrerpolicy="no-referrer"></p><h3>2.&nbsp;Watcher 失效</h3><p>Spark 任务在启动 Driver 时，会创建对 Executor 的事件监听器，用于实时获取所有 Executor 的运行状态，对于一些长时运行的 Spark 任务，这个监听器往往会由于资源过期、网络异常等情况而失效，因此在此情况下，需要对 Watcher 进行重置，否则任务可能会跑飞。该问题属于 Spark 的一个 Bug，当前我们内部版本已修复，并将 PR 提供到了 Spark 社区。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fe6ab9a8837a6d715aa3dbadb128573dc1d.png" alt="" referrerpolicy="no-referrer"></p><h3>3.&nbsp;任务卡死</h3><p>如上图所示，Driver 通过 List 和 Watch 两种方式来获取 Executor 的运行状况。Watch 采用被动监听机制，但是由于网络等问题可能会发生事件漏接收或漏处理，但这种概率比较低。List 采用主动请求的方式，比如每隔 3 分钟，Driver 可向 Apiserver 请求一次自己任务当前全量 Executor 的信息。</p><p>由于 List 请求任务所有 Pod 信息，当任务较多时，频繁 List 对 K8s 的 Apiserver 和 ETCD 造成较大压力，早期我们关闭了定时 List，只使用 Watch。当 Spark 任务运行异常，比如有很多 Executor OOM 了，有一定概率会导致 Driver Watch 的信息错误，尽管 Task 还没有运行完，但是 Driver 却不再申请 Executor 去执行任务，发生任务卡死。对此我们的解决方案如下:</p><ul><li>在开启 Watch 机制的同时，也开启 List 机制，并将 List 时间间隔拉长，设置每 5 分钟请求一次</li><li>修改 ExecutorPodsPollingSnapshotSource 相关代码，允许 Apiserver 服务端缓存，从缓存中获取全量 Pod 信息，降低 List 对集群的压力</li></ul><h3>4. Celeborn 读写超时、失败</h3><p>ApacheCeleborn 是阿里开源的一款产品，前身为 RSS(Remote Shuffle Service)。在早期成熟度上还略有欠缺，在对网络延迟、丢包异常处理等方面处理的不够完善，导致线上出现一些有大量 Shuffle 数据的 Spark 任务运行时间很长、甚至任务失败，以下三点是我们针对此问题的解决办法。</p><ul><li>优化 Celeborn，形成内部版本，完善网络包传输方面的代码</li><li>调优 Celeborn&nbsp;Master 和 Worker 相关参数，提升 Shuffle 数据的读写性能</li><li>升级 ECI 底层镜像版本，修复 ECI&nbsp;Linux 内核 Bug</li></ul><h3>5. 批量提交任务时，Quota 锁冲突</h3><p>为了防止资源被无限使用，我们对每个 K8s 集群都设置了 Quota 上限。在 K8s 中，Quota 也是一种资源，每一个 Pod 的申请与释放都会修改 Quota 的内容 (Cpu/Memory 值)，当很多任务并发提交时，可能会发生 Quota 锁冲突，从而影响任务 Driver 的创建，任务启动失败。</p><p>应对这种情况导致的任务启动失败，我们修改 Spark Driver Pod 的创建逻辑，增加可配置的重试参数，当检测到 Driver Pod 创建是由于 Quota 锁冲突引起时，进行重试创建。Executor Pod 的创建也可能会由于 Quota 锁冲突而失败，这种情况可以不用处理，Executor 创建失败 Driver 会自动申请创建新的，相当于是自动重试了。</p><h3>6.&nbsp;批量提交任务时，UnknownHost 报错</h3><p>当瞬时批量提交大量任务到集群时，多个 Submit Pod 会同时启动，并向 Terway 组件申请 IP 同时绑定弹性网卡，存在一定概率出现以下情况，即 Pod 已经启动了，弹性网卡也绑定成功但是实际并没有完全就绪，此时该 Pod 的网络通信功能实际还无法正常使用，任务访问 Core DNS 时，请求无法发出去，Spark 任务报错 UnknownHost 并运行失败。该问题我们通过下面这两个措施进行规避和解决：</p><ul><li>为每台 ECS 节点，都分配一个 Terway&nbsp;Pod</li><li>开启 Terway 的缓存功能，提前分配好 IP 和弹性网卡，新 Pod 来的直接从缓存池中获取，用完之后归还到缓存池中</li></ul><h3>7. 可用区之间网络丢包</h3><p>为保障库存的充足，各 K8s 集群都配置了多可用区，但跨可用区的网络通信要比同可用区之间通信的稳定性略差，即可用区之间就存在一定概率的丢包，表现为任务运行时长不稳定。</p><p>对于跨可用区存在网络丢包的现象，可尝试将 ECI 的调度策略设定为 VSwitchOrdered，这样一个任务的所有 Executor 基本都在一个可用区，避免了不同可以区 Executor 之间的通信异常，导致的任务运行时间不稳定的问题。</p><h2>总结与展望</h2><p>最后，非常感谢阿里云容器、ECI、EMR 等相关团队的同学，在我们整个技术方案的落地与实际迁移过程中，给予了非常多的宝贵建议和专业的技术支持。</p><p>目前新的云原生架构已在生产环境上稳定运行了近一年左右的时间，在未来，我们将持续对整体架构进行优化和提升，主要围绕以下几个方面:</p><ol><li><p>持续优化云原生的整体方案，进一步提升系统承载与容灾能力</p></li><li><p>云原生架构升级，更多大数据组件容器化，让整体架构更加彻底的云原生化</p></li><li><p>更加细粒度的资源管理和精准的成本控制</p></li></ol></div>
                                    ]]>
            </description>
            <pubDate>Mon, 08 Jan 2024 01:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10404597</guid>
            <link>https://my.oschina.net/u/3874284/blog/10404597</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微信团队确认私密朋友圈存在 bug，现已修复]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微信团队今日上午通过微博回应了「<strong>私密朋友圈存在 bug</strong>」的问题。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-34320da0579bfc83ad3cb597de2fb3f1a80.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1930378853%2FNAIzytG5Y%23comment" target="_blank">https://weibo.com/1930378853/NAIzytG5Y</a></u></em></p></blockquote><p>从网友的反馈来看，许多微信用户最近在发布私密朋友圈时，好友会在入口看到提醒朋友圈更新的「小红点头像」。但点进去却发现对方并没有发布新内容。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-b0fe2ae650294a4d3684dc3e1ef41cb7cc6.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-30399efe2ea7df75517428697b41ed60bf4.png" referrerpolicy="no-referrer"></p><p><img height="1168" src="https://oscimg.oschina.net/oscnet/up-03c6871c585c1eec034fbf03e988cee454d.png" width="994" referrerpolicy="no-referrer"></p></blockquote><p>根据微信团队的回应，「私密朋友圈显示提醒」的 bug 仅在 1 月 1 日当天出现，并且是极小部分用户受影响。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 07 Jan 2024 06:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274592</guid>
            <link>https://www.oschina.net/news/274592</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 支持 RDP 协议，可通过图形界面进行远程登录]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FGNOME-RDP-Remote-Login" target="_blank">根据 Phoronix 的报道</a></u>，GNOME 桌面环境<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgitlab.gnome.org%2FGNOME%2Fgnome-remote-desktop%2F-%2Fmerge_requests%2F139" target="_blank">最近合并的 PR</a></u>&nbsp;实现了对远程桌面协议 (RDP) 支持的重要部分。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f8bcbc9835268555ad0adf16dcf7ea5a915.png" referrerpolicy="no-referrer"></p><p>正如 PR 所述，这项功能用于提供图形化远程登录支持。该 PR 自 2022 年 8 月以来一直处于开启状态，直到 2024 年 1 月才被合并。该功能的实现依赖于 GNOME Session、GDM 和 GNOME Settings Daemon 等方面的变化，这些变化在过去一年内已经合并。这意味着在&nbsp;3 月发布的 GNOME 46 版本中，这项功能将会正式上线。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-066aac4e76b43f37a7382fdcadcbfa32300.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-c76d08a2fa57ee735cdd5820ccbdc09d20f.png" referrerpolicy="no-referrer"></p><p>这个功能的具体实现细节包括对标准守护进程的抽象，以及实现了两种新的行为。第一种是作为系统服务运行，它会在新的 RDP 连接时请求 GDM 启动一个无 header GDM 登录会话。第二种是在无 header 用户会话中运行（又名 daemon-handover），它会告诉系统服务使用 handover dbus 接口启动交接过程。这两种行为的实现使得 GNOME 桌面环境可以处理图形远程登录的需求。</p><p>此外，这项功能还支持 Wayland。这意味着它不仅可以在 X11 上运行，还可以在 Wayland 上运行。这对于用户来说是一个好消息，因为他们可以在不同的显示服务器上使用这项功能。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 07 Jan 2024 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274575/gnome-rdp-remote-login</guid>
            <link>https://www.oschina.net/news/274575/gnome-rdp-remote-login</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 的 Rust 试验取得成功、Firefox 能否抓住机会……关于开源的 10 条预测]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LWN 网站联合创始人兼 Linux 内核维护者 Jonathan Corbet <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flwn.net%2FSubscriberLink%2F954544%2F666b8433d343147e%2F" target="_blank">分享了他对 2024 年的预测</a></u>，内容包括 <strong>Linux 内核社区的变化、企业级 Linux 发行版的市场受到冲击</strong>、<strong>Firefox 的未来</strong>、<strong>开源生成式人工智能 (Gen AI) 关注度更高</strong>、<strong>BPF 大有作为</strong>、<strong>Python no-GIL&nbsp;取得成功</strong>，以及<strong>开源项目维护者面临的危机</strong>，等等。</p><p>下面简单介绍&nbsp;Jonathan Corbet 的预测内容。</p><hr><p>一、Linux 内核社区开始<strong>不再将邮件列表作为其开发流程的核心</strong>。这一转变会很缓慢，并且引起许多内核开发者的强烈抵制。但在这个连 Linus 老大都说要<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flwn.net%2FArticles%2F952034%2F" target="_blank">做出改变</a></u>的时代，不可思议的事情很有可能会发生。</p><p>&nbsp;</p><p>二、<strong>Linux 6.12 将是下一个长期稳定版内核</strong>，预计 2024 年 12 月 1 日发布（除非 Linus 拒绝在美国感恩节假期后立即发布，这种情况下将在一周后推出）。</p><p>&nbsp;</p><p>三、<strong>首批用户可见的 Rust 代码最早可能在 Linux 6.8 中合并到内核</strong>。这些代码初始阶段应该不会支持许多系统，但它标志着一个重要转变：一旦 Rust 用于用户可见的功能，内核社区将不再可以轻易放弃对该语言的支持。换句话说，将用户可见的 Rust 代码合并到内核中将宣告 Rust 试验取得成功。</p><p>&nbsp;</p><p>四、<strong>红帽的企业级 Linux 发行版市场将在 2024 年受到冲击</strong>。该市场的控制权此前基本由红帽 RHEL 统治，但随着这一领域的竞争日趋激烈，打造稳定版 Linux 不需要再依赖 RHEL，供应商和用户有许多方法可以从 RHEL 手中夺走部分市场。</p><p>&nbsp;</p><p>五、<strong>谷歌在 Chrome 强推"Manifest V3"将引起广泛抵制</strong>，但如果 Mozilla 今年只是押注人工智能，没有将重心放在 Firefox 上——帮助全世界摆脱浏览器垄断，<span>Firefox 可能</span>再也没有这样的机会来扩大市场份额。</p><p>&nbsp;</p><p>六、<strong>开源生成式人工智能 (Gen AI) 在 2024 将受到更广泛关注</strong>。部分原因是，在该领域已经有案例证明开源项目比私有项目更具竞争力。而且这些私有平台今年将出现更多关于版权纠纷的事件——从而让更多人将目光转移到开源项目上。</p><p>&nbsp;</p><p>七、<strong>对 BPF 而言，今年将是重要的一年</strong>。这并不奇怪，因为过去几年也是如此。像可扩展调度程序类这样的项目似乎不会消失。与此同时，思科最近宣布收购 Isovalent，这可能会为 BPF 开发带来新的资源，当然也可能会像许多企业收购一样——毁掉一个重要的 BPF 开发团队。</p><p>&nbsp;</p><p>八、<span style="background-color:#ffffff; color:#474747"><strong>支持自由线程 (no-GIL) 的首个 Python 版本在 10 月发布</strong>，并将取得一定的成功。</span></p><p>&nbsp;</p><p>九、<strong>过分追求指标将成为一个更大的问题</strong>。这些指标包括： CVE 数量、提交的错误报告、commit 数量、「审查」的补丁、toots 提升、获得的讨论论坛徽章，等等。</p><p>&nbsp;</p><p>十、<strong>开源项目维护者面临的危机在 2024 将会加剧</strong>。自由开源软件社区中有许多项目被广泛依赖，但几乎没有得到支持。因此，这些项目往往会面临进展缓慢、揹负大量技术债、安全问题等等。此现象并不是新鲜事，对于任何一直关注的人来说，它也不是隐藏的。但从所有迹象来看，重度依赖开源项目的公司在 2024 年并不会为它们提供更多的支持。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 06 Jan 2024 05:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274474</guid>
            <link>https://www.oschina.net/news/274474</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024 前端圈「开年之战」：React 挖坑不填，要靠文档来补？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>起因是一名开发者发表推文赞扬了前端框架 React 的新版官方文档，称其直接把「坑」展示出来，并附上例子解释出错的原因以及会导致的问题——这种做法十分直观，能帮助使用者了解当前的设计解决了怎样的问题。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-29971a818f05761efd952724a36cb5126c4.png" referrerpolicy="no-referrer"></p><p>via&nbsp;<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fnoworkforsixian%2Fstatus%2F1742574959241908434" target="_blank">https://twitter.com/noworkforsixian/status/1742574959241908434</a></u></em></p></blockquote><p>Vue 作者尤雨溪随后转发了这条推文并进行回复，大意是说 <strong>React 挖了很多坑，但却没填上，而是通过文档提醒用户绕开这些坑</strong>——然而用户不但没有质疑为什么会存在这些坑，反而感叹文档写得好，这种心态像是被框架 PUA。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7ea2056dd0550b5976e1cb889064c136448.png" referrerpolicy="no-referrer"></p><p>via&nbsp;<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fyuxiyou%2Fstatus%2F1743174724841243077" target="_blank">https://twitter.com/yuxiyou/status/1743174724841243077</a></u></em></p></blockquote><p>尤雨溪继续说道：「Vue 也难免有坑，但我如果看到用户以知道怎么绕开 Vue 的坑而得意，我心里是很羞愧的，因为我觉得框架应该努力去减少心智负担而不是让用户去研究回字有几种写法。」</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-313d0b3760ae846d09120fe9b43d629207c.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 06 Jan 2024 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274449</guid>
            <link>https://www.oschina.net/news/274449</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国第三代自主超导量子计算机「本源悟空」即将发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>「本源量子」官方公众号<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FhUrSXNLwuMaNuARAjkNCYw" target="_blank">发文称</a></u>，<strong>中国第三代自主超导量子计算机<span style="background-color:#e67e22">「本源悟空</span>」将在 24 小时内正式上线运行。</strong></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d68339e31821f1a16662b0074f4f7f90016.png" referrerpolicy="no-referrer"></p></blockquote><p>「本源悟空」由中国第一家量子计算公司——本源量子自主研发。该量子计算机搭载 72 位自主超导量子芯片「悟空芯」，<strong>是目前中国最先进的可编程、可交付超导量子计算机</strong>。之所以取名「悟空」是因为 72 位与孙悟空「72 变」相呼应，也是对中国传统文化的致敬。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-73be5c43630babc9ccfffb36ebd48687acd.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3792a867fb6b39678ea3c63eb1221927ee3.png" referrerpolicy="no-referrer"></p><p>本源量子第一代、第二代超导量子计算机均已交付中国用户使用。本源量子拥有中国首条量子芯片生产线、中国首款量子计算机操作系统、中国首个量子计算测控系统。本源量子计算专利数排名中国第一、全球第六。</p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/273970" target="news">百度拟将量子实验室捐赠予北京量子院</a></li><li><a href="https://www.oschina.net/news/269585/ibm-quantum-roadmap-2033" target="news">IBM 公布下一代量子处理器和 IBM 量子系统二号</a></li><li><a href="https://www.oschina.net/news/268299" target="news">阿里达摩院撤裁量子实验室，已将实验室及仪器设备赠予浙江大学</a></li><li><a href="https://www.oschina.net/news/259545" target="news">百度发布首个量子领域大模型</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 06 Jan 2024 00:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274432</guid>
            <link>https://www.oschina.net/news/274432</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[总结：停止自嗨、走进用户，努力提供有价值的服务]]>
            </title>
            <description>
                <![CDATA[<div class="content"><ol><li><span><span><span><span><strong><span><span><span><strong>运营总结：</strong></span></span></span></strong></span></span></span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>1、每天在开源市场有 30 个左右的 start，github/gitee:start 总计 270，较上周增长 140，感谢研发同仁对开放签的认可；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>2、每天陆陆续续咨询的用户有 5 个左右，感觉客户越来越多了，还没有成交的客户，这得好好分析自己的不足；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>3、当有客户咨询我们时，我们首先秉持「能使用开源版就用开源版，实在有企业版本需求再使用企业版。」的原则引导客户，实际上开放签开源工具版实际用户已经突破</span></span><span><span>1</span></span><span><span>00；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>4、在产品能力、品牌等方面与市场上的老牌服务商（法大大、e 签宝、上上签、契约锁等等前辈们）还有很大差距，比如安装体验不好、功能不全、服务不完善等，我们要多向他们学习。 &nbsp;&nbsp;&nbsp;</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify">&nbsp;</p><ol><li><span><span><span><span><strong><span><span><span><strong>新年工作的第一周，就用自我吐槽的方式激励开放签变得更好吧。</strong></span></span></span></strong></span></span></span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>槽点 1：用户体验做的确实不好，要自责、要学习、要进步、要接受批评；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>槽点 2：运营还很菜，叫好不叫座，要深度刨析问题出在哪里？不能只关注自己而脱离用户；要大胆的否定自己，还要及时的建立信心；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>槽点 3：内部管理有问题，1、工作目标不清晰，更新内容不能及时的内外同步；2、不能脱离用户，产品更新迭代要考虑、贴近用户。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>&nbsp;</span></span></span></span></p><ol><li><span><span><span><span><strong><span><span><span><strong>开放签本周更新内容：</strong></span></span></span></strong></span></span></span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>1、优化了开源市场的产品介绍，便于大家更加系统的了解开放签；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>2、企业版增加站内消息服务；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>3、优化了数字证书服务，支持 CA 事件证书；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>4、完成 ofd 文件数字签名的技术验证；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>5、优化了开放签开源工具版、企业版的若干个用户体验问题；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>6、修改了开放签开源工具版、企业版的若干个系统 bug。</span></span></span></span></span></span></p><ol><li><span><span><span><span><strong><span><span><span><strong>开放签下周工作内容：</strong></span></span></span></strong></span></span></span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>1、提供数字证书签发、数字签名的接口和 SDK 服务，解决电子签跨语言、跨平台的问题，让更多研发用户可以低门槛使用电子签章能力；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>2、集成 CA 长效证书，支持平台设置证书签发规则；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>3、优化企业印章样式：调整印章的样式及字体，圆章样式增加信息编码，支持椭圆章的生成；</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span>4、修改 PDF 编辑、签署工具，替换 itext-Pdf 工具版本。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><strong>写在最后：做工作的过程中要时刻铭记开放签「开源开放」的价值观。除了自己监督自己外，还要敢于接受更多的监督。不能脱离用户自嗨。要大胆的否定自己，还能及时的建立信心，相信自己可以做的更好。</strong></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><strong>2024，加油</strong></span></span></strong><strong><span><span><strong>！</strong></span></span></strong></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 05 Jan 2024 10:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274371</guid>
            <link>https://www.oschina.net/news/274371</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[用 Spring Boot 3.2 虚拟线程搭建静态文件服务器有多快？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Spring Boot 3.2 于 2023 年 11 月大张旗鼓地发布，标志着 Java 开发领域的一个关键时刻。这一突破性的版本引入了一系列革命性的功能，包括：</p><ul><li>虚拟线程：利用 Project Loom 的虚拟线程释放可扩展性，从而减少资源消耗并增强并发性。</li><li>Native Image 支持：通过 Native Image 编译制作速度极快的应用程序，减少启动时间并优化资源利用率。</li><li>JVM 检查点：利用 CRaC 项目的 JVM 检查点机制实现应用程序的快速重启，无需冗长的重新初始化。</li><li>RestClient：采用新的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.didispace.com%2Farticle%2Foblog%2Fspring-6-1-restclient.html" target="_blank">RestClient</a> 接口的功能方法，简化 HTTP 交互并简化代码。</li><li>Spring for Apache Pulsar：利用 Apache Pulsar 的强大功能实现强大的消息传递功能，无缝集成到您的 Spring Boot 应用程序中。</li></ul><p>其中，虚拟线程是最近 Java 版本中引入的最具变革性的特性之一。正如官方文件所述：虚拟线程是轻量级线程，可减少编写、维护和调试高吞吐量并发应用程序的工作量。线程是可以调度的最小处理单元。它与其他此类单位同时运行，并且在很大程度上独立于其他此类单元运行。它是 java.lang.Thread 的一个实例。有两种线程：平台线程和虚拟线程。平台线程是作为操作系统 （OS） 线程的瘦包装器实现的。平台线程在其底层操作系统线程上运行 Java 代码，平台线程在平台线程的整个生命周期内捕获其操作系统线程。因此，可用平台线程数限制为操作系统线程数。与平台线程一样，虚拟线程也是 java.lang.Thread 的实例。但是，虚拟线程不绑定到特定的操作系统线程。虚拟线程仍在操作系统线程上运行代码。但是，当在虚拟线程中运行的代码调用阻塞 I/O 操作时，Java 运行时会挂起虚拟线程，直到它可以恢复为止。与挂起的虚拟线程关联的操作系统线程现在可以自由地对其他虚拟线程执行操作。虚拟线程适用于运行大部分时间被阻塞的任务，通常等待 I/O 操作完成。但是，它们不适用于长时间运行的 CPU 密集型操作。</p><p>虽然人们普遍认为虚拟线程在 I/O 密集型方案中表现出色，但它们在 CPU 密集型任务中的性能仍然是一个问号。本系列文章深入探讨了虚拟线程在各种用例中的潜在优势，从基本的「hello world」到静态文件服务（I/O 密集型）、QR 码生成（CPU 密集型）和多部分/表单数据处理（混合工作负载）等实际应用。</p><p>在本系列的开头文章中，我们已经了解了虚拟线程与物理线程相比在最简单（且不切实际）的 hello world 情况下的性能。物理线程和虚拟线程之间几乎没有任何性能或资源使用差异。在本文中，我们将更加「实用」，并针对静态文件服务器情况进行比较。这绝对是一个常见且「真实世界」的案例。让我们看看这次我们发现了什么。</p><p>如果大家正在做 Spring Boot 2.3 升级 Spring 3.2，这里顺手给大家推荐<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.didispace.com%2Fspring-boot-2%2F10-5.html" target="_blank">Spring Boot 2.x 到 3.2 的升级指南</a>。</p><h2>测试环境</h2><p>所有测试均在配备 16G RAM、8 个物理内核和 4 个效率内核的 MacBook Pro M2 上执行。测试工具是 Bombardier，它是更快的 HTTP 负载测试器之一（用 Go 编写）。</p><p>软件版本为：</p><ul><li>Java v21.0.1</li><li>Spring Boot 3.2.1</li></ul><h3>程序配置</h3><p>除了主 Java 类之外，不需要编写任何 Java 文件，静态文件服务器只能通过配置就能发挥作用。</p><p><code>application.properties</code>文件如下：</p><pre><code class="language-properties">server.port=3000
spring.mvc.static-path-pattern=/static/**
spring.web.resources.static-locations=file:/Users/mayankc/Work/source/perfComparisons/static/
</code></pre><p>使用虚拟线程时，我们将通过添加以下行来启用它们：</p><pre><code class="language-properties">spring.threads.virtual.enabled=true
</code></pre><p><code>pom.xml</code>内容：</p><pre><code class="language-xml">&lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;3.2.1&lt;/version&gt;
    &lt;relativePath/&gt;
 &lt;/parent&gt;
 &lt;groupId&gt;com.example&lt;/groupId&gt;
 &lt;artifactId&gt;demo&lt;/artifactId&gt;
 &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
 &lt;name&gt;demo&lt;/name&gt;
 &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;
 &lt;properties&gt;
   &lt;java.version&gt;21&lt;/java.version&gt;
 &lt;/properties&gt;
 &lt;dependencies&gt;
   &lt;dependency&gt;
     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
     &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
   &lt;/dependency&gt;

  &lt;dependency&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
    &lt;scope&gt;test&lt;/scope&gt;
  &lt;/dependency&gt;
 &lt;/dependencies&gt;
</code></pre><h3>测试数据</h3><p>大小完全相同但数据不同的 100K 文件被放置在静态资源目录中。每个文件大小正好是 102400 字节。</p><p>文件的命名范围为 1 到 100000。</p><p>使用 Bombardier 的修改版本，为每次运行生成随机请求 URL: <code>http://localhost:3000/static/&lt;file-name&gt;</code></p><h3>应用场景</h3><p>为了确保结果一致，每个测试在开始数据收集之前都会经历 5K 请求预热阶段。</p><p>然后，在不同范围的并发连接级别（50、100 和 300）中仔细记录测量结果，每个级别都承受 500 万个请求工作负载。</p><h3>结果评估</h3><p>除了简单地跟踪原始速度之外，我们还将采用详细的指标框架来捕获延迟分布（最小值、百分位数、最大值）和吞吐量（每秒请求数）。</p><p>CPU 和内存的资源使用情况监控将补充此分析，从而提供不同工作负载下系统性能的全面了解。</p><h2>测试结果</h2><p>结果以图表形式呈现如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-12882e69bbdea0bdc8e3f7b32c12c7b3dfd.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-db3292be4993ddb87e34c31e9a2694f1ef0.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-48311e2d40dbf3b3d9533225521068697ed.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-cdf07a45c601fdb5c24d3223f241fb17b25.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-72e62b62529f675eef0a6aea08cd9456979.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-bf8dc5db4d40991f2326eb0829c92aaeee1.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-d1c9bf51d014855a7e736f4d418fb45b325.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-4d001a71187efe35a945327bf7b8605d966.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-dc9cfb5e2916e4ff7437b96652009359662.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-606f2aaee8e192c177b604f6ea1b84cb330.png" alt="" referrerpolicy="no-referrer"></p><h2>总结</h2><p>对静态文件服务的分析表明，物理线程在性能和资源效率方面略胜一筹（与我们的预期相反）。</p><p>不过，这种受 I/O 限制的场景可能并不是充分发挥虚拟线程潜力的理想场所。涉及数据库交互的任务可能会显示出更多令人信服的优势。也许负载不足以让虚拟线程发挥出最大的作用。为了找出答案，我们将在接下来的文章中介绍 URL 短链（数据库驱动）、二维码生成（CPU 受限）和混合工作负载场景（如表单数据处理），旨在揭示虚拟线程真正出类拔萃的案例。</p><blockquote><p>欢迎关注我的公众号：程序猿 DD。第一时间了解前沿行业消息、分享深度技术干货、获取优质学习资源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 05 Jan 2024 08:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/didispace/blog/10584578</guid>
            <link>https://my.oschina.net/didispace/blog/10584578</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8、Mojo🔥、Bun 1.0……最硬核极客的年度发版汇总]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>回顾一下 2023 年最重磅、最极客、最硬核的（开源）项目更新资讯，保证全网最全——如有遗漏，欢迎补充。</p><h4><strong><a href="https://www.oschina.net/news/225892/wine-ce-0-released">Wine-CE 首个正式版发布，可跨指令架构运行程序的 Wine</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/223655/lineageos-20">LineageOS 20 正式发布，开源 Android 系统分支</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/226000/flutter-3-7-0-released">Flutter 3.7 稳定版发布，开源跨平台应用开发工具包</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/227732/meilisearch-v1-enterprise-ready-stable">Meilisearch 1.0 稳定版发布，Rust 高性能开源搜索引擎</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/230284/pigsty-v2-released">Pigsty v2 正式发布：更好的 RDS PG 开源替代</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/228112/manticore-search-6-0-0-released">Manticore Search 6 正式发布，C++ 高性能搜索引擎</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/227257/nutui-4-0-released">京东轻量级移动端组件库 NutUI 4.0 正式发布！</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/226769/go-1-20-released">Go 1.20 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/226770/elementary-os-7-released">历经风波，elementary OS 7 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/228679/homebrew-4-0-0-released">Homebrew 4.0.0 发布，MacOS 上的包管理器</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/230414/ffmpeg-6-0-released">FFmpeg 6.0 发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/230089/conan-2-0-released">Conan 2.0 发布，开源 C/C++ 包管理器</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/232912/typescript-5-0-released">TypeScript 5.0 发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/233693/gnome-44-released">GNOME 44 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/236827/rt-thread-5-0-0-released">RT-Thread 5.0.0 发布，嵌入式实时多线程操作系统</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/230671/godot-4-0-released">开源 3D 游戏引擎 Godot 正式发布 4.0</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/230702/ceresdb-1-0-ga">CeresDB 1.0 正式发布，Rust 高性能云原生时序数据库</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/232768/pytorch-2.0-released">PyTorch 2.0 正式发布，深度学习框架</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/234494/dragonflydb-1-0">开源内存数据库 DragonflyDB 1.0 正式 GA，可替代 Redis</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/235410/slint-1-0-released">Slint 1.0 正式发布，Rust 编写的原生 GUI 工具包</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/236712/ferretdb-1-0-released">FerretDB 1.0 正式 GA，MongoDB 开源替代品</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/238201/layui-2-8-0-released">Layui 2.8.0 正式发布，朴实归来</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/239367/foobar2000-2-0-0-released">foobar2000 正式发布 2.0</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/241121/delphi-11-n-cbuilder-11-ce-released">Delphi 11 和 C++Builder 11 社区版发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/239478/qwik-1-0-released">Qwik 1.0 发布，全栈式 Web 框架</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/240608/dart-3-released">Dart 3 正式发布，100% 健全的空安全</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/243957/blink-1-0-released">Blink 1.0 正式发布， 最小 x86 Linux 模拟器</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/246407/svelte-4-released">前端 UI 框架 Svelte 4 发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/247324/ecmascript-2023">ECMAScript 2023 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/248275/openkylin-1-0-released">openKylin 1.0 重磅发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/251034/arc-browser-1-0-mac-released">Arc 浏览器正式发布 1.0，声称是 Chrome 的替代品</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/250365/cython-3-0-released">Cython 3.0 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/226341/autohotkey-v2">AutoHotkey v2 正式发布，Windows 自动化工具</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/251878/capnproto-1-0-released">比 Protocol Buffers 快无限倍，开源十年后 Cap'n Proto 1.0 终发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/252028/nim-v2-0-released">Nim v2.0 正式发布，命令式编程语言</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/252385/harmonyos-4">华为正式发布 HarmonyOS 4</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/253633/apache-doris-2-0-0-released">Apache Doris 2.0.0 版本正式发布：盲测性能 10 倍提升，更统一多样的极速分析体验</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/256102/sudo-rs-0-2-0-first-stable">sudo-rs 发布首个稳定版 0.2.0：内存安全、用 Rust 重写的 sudo</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/257450/bun-v1-0">Bun 发布 1.0 正式版本，Zig 编写的 JavaScript 运行时</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/258730/jdk-21-lts-ga">Java 21 / JDK 21 (LTS) GA</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/257362/mojo-finally-here">Mojo🔥编程语言开放下载，声称比 Python 快 68000 倍</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/255156">Unity 引擎中国版「团结引擎」正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/261319/curl-8-4-0">curl 8.4.0 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/263539/yarnpkg-4-0">Yarn 4.0 正式发布，现代化的软件包管理器</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/264749/vscode-floating-editor-windows">等了 7 年，vscode 史上呼声最高的「浮动窗口」 特性，终于实现了</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/266507/dotnet-8-ga">.NET 8 正式 GA</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/267734/php-8-3-ga">PHP 8.3 GA</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/267934/spring-boot-3-2-0-released">Spring Boot 3.2.0 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/267801/fortran-2023">Fortran 2023 发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/267838/rocketrs-0-5-released">Rust Web 框架 Rocket 发布 v0.5</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/267021/vite5-released">Vite 5 正式发布，基于原生 ESM 的 Web 开发构建工具</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/264989/openharmony-4-0-released">OpenHarmony 4.0 正式发布</a></strong></h4><h4><strong><a href="https://www.oschina.net/news/258221/postgresql-16-released">PostgreSQL 16 发布</a></strong></h4><h4><strong><a href="https://my.oschina.net/u/5674736/blog/10320255">TiDB 7.5 LTS 发版，提升规模化场景下关键应用的稳定性和成本的灵活性</a></strong></h4><hr><p>其他年度盘点：</p><ul><li><strong><u><a href="https://www.oschina.net/news/273501">B 站崩了两次、腾讯「3.29」一级事故……盘点 2023 十大宕机事故「冥场面」</a></u></strong></li><li><strong><u><a href="https://www.oschina.net/news/273843">MySQL 5.7、魔趣、李跳跳……盘点 2023 「停更」的项目和网站</a></u></strong></li></ul><p><span style="background-color:#ffffff; color:#333333">更多年度重磅事件回顾，</span><strong><span style="background-color:#e67e22">查看</span><em><u><a href="https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=version_news0105"><span style="background-color:#e67e22">《2023 中国开源开发者报告》</span></a></u></em></strong><span style="background-color:#ffffff; color:#333333">。</span></p><p><img height="4950" src="https://oscimg.oschina.net/oscnet/up-59f0466f1d7224fd87f2ba7b06e61d7646e.png" width="3497" referrerpolicy="no-referrer"></p><p><img height="4950" src="https://oscimg.oschina.net/oscnet/up-7fb2d8fe048cf5dd0947b22aec9a0463b92.png" width="3497" referrerpolicy="no-referrer"></p><p><img height="4950" src="https://oscimg.oschina.net/oscnet/up-c3141e286ce5764be869856becde308b405.png" width="3497" referrerpolicy="no-referrer"></p><p><img height="4950" src="https://oscimg.oschina.net/oscnet/up-90a8b7883ea0d0ca9682896df5ff890289a.png" width="3497" referrerpolicy="no-referrer"></p><p><img height="4950" src="https://oscimg.oschina.net/oscnet/up-dce6bebf85fd45c23a47cee46689e2de776.png" width="3497" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 05 Jan 2024 07:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274330</guid>
            <link>https://www.oschina.net/news/274330</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 拟每年投入 100-500 万美元，以获取新闻使用许可]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>最近与 OpenAI 进行谈判的两名媒体公司高管表示，OpenAI 愿意每年投入 100 万至 500 万美元的费用，以与新闻出版公司达成协议，获得将新闻文章用于训练大语言模型的权利。</p><p>该公司目前正在与大约十几家媒体公司进行谈判。但 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fopenai-offers-publishers-as-little-as-1-million-a-year" target="_blank">The Information</a> 认为，即使对于小型出版商来说，这一金额也有点不够看，可能会让 OpenAI 很难达成协议。</p><p>12 月，OpenAI 表示已与出版巨头 Axel Springer 建立合作关系，这是该公司首次与此类出版商建立合作关系。Axel Springer 是一家德国跨国大众媒体公司，旗下拥有 Business Insider 和 Politico 等品牌。交易的财务条款并未公开，但据这两位高管称，交易金额在数千万美元左右。</p><p><img height="213" src="https://oscimg.oschina.net/oscnet/up-16aa915803cda2a49d68dfc4645ca8d0487.png" width="700" referrerpolicy="no-referrer"></p><p>与此同时，一位高管透露，试图在生成式 AI 领域赶上 OpenAI 和谷歌的苹果公司，也在试图与出版商达成内容使用协议。苹果提供了更多的资金，但也希望获得比 OpenAI 更广泛地使用内容的权利；他们希望能够以公司认为必要的任何方式将内容用于未来的 AI 产品。</p><p>目前，苹果公司已经与 Condé Nast（旗下拥有《Vogue》和《纽约客》）以及 NBC News 和 IAC（旗下拥有《The Daily Beast》和《Better Homes and Gardens》）等出版商签订了价值约 5000 万美元的协议。</p><p>《纽约时报》、CNN、路透社和 The Verge 的母公司 Vox Media 最近都禁止 OpenAI 的 GPT 爬虫访问数据。《纽约时报》在 12 月还起诉了 OpenAI 和微软公司，称这两家公司非法使用其受版权保护的材料来训练 AI 模型。此外，还有一些知名作者也对这些公司发起了诉讼。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 05 Jan 2024 06:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274326/openai-offers-publishers-little-1m</guid>
            <link>https://www.oschina.net/news/274326/openai-offers-publishers-little-1m</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[生成式 AI 搜索引擎 Perplexity 融资 7360 万美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">生成式 AI 搜索引擎初创公司 Perplexity AI</span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.perplexity.ai%2Fblog%2Fperplexity-raises-series-b-funding-round" target="_blank">表示</a><span style="color:#000000">，已成功筹集了 7360 万美元的 B 轮资金，估值达到 5.2 亿美元。迄今为止，该公司共筹集了 1 亿美元的资金。</span></p><p><span style="color:#000000">B 轮融资由 Institutional Venture Partners LLC 领投，此前 A 轮和种子轮的现有投资者也参与其中：包括 NEA、Twitter 前副总裁 Elad Gil 和 Databricks Ventures。其他参投的还有 AI 芯片制造商巨头 Nvidia Corp.、Bessemer Venture Partners、Facility Funds、Kindred Ventures、Shopify 首席执行官 Tobi Lutke 以及 Amazon.com Inc. 创始人 Jeff Bezos（通过 Bezos Expeditions Fund）等新投资者。</span></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-cabc1d22fd6561f7feb4dfb9e357cfbde17.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Perplexity 搜索工具的操作方式与传统搜索引擎不同。它不需要人们输入提供结果列表的关键字，而是允许用户提出问题，搜索引擎以对话方式做出响应。通过这种方式，它可以提供类似于 Google Bard 和 Bing Chat 等 AI 聊天机器人的搜索体验。</span></p><p><span style="color:#000000">「借助 Perplexity 的搜索工具，用户可以立即获得任何问题的可靠答案，幷包含完整的来源和引文。」</span></p><p><span style="color:#000000">Perplexity 由多个 AI 大语言模型提供支持，包括公司内部开发的模型和第三方模型，如谷歌的 Gemini、Mistra 7BI、Anthropic 的 Claude 2.1 和 OpenAI 的 GPT-4。订购该公司每月 20 美元的专业计划的用户可以选择使用的模型，该计划提供 Perplexity Copilot 功能，可以解锁个人偏好、文件上传和图像生成等许多功能。</span></p><p><span style="color:#000000">公告称，自一年前公开推出 Perplexity 以来，这款对话式 AI 搜索引擎应用程序的月活跃用户数已增至 1000 万，到 2023 年已服务了超过 5 亿次查询；移动应用程序已在 iOS 和 Android 上安装超过一百万次。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 05 Jan 2024 06:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/274324/perplexity-ai-raises-74m</guid>
            <link>https://www.oschina.net/news/274324/perplexity-ai-raises-74m</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
