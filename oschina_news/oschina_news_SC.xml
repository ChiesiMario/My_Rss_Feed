<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 20 Feb 2024 13:54:24 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[中国大模型赛道最大单笔融资，月之暗面获超 10 亿美金融资]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>AI 初创公司月之暗面（Moonshot AI）最近完成了一轮超过 10 亿美金的融资，投资方包括红杉中国、小红书、美团和阿里，老股东也进行了跟投。这一轮融资使月之暗面的估值达到了约 25 亿美金，成为国内大模型领域的头部企业之一。这是自从 ChatGPT 引发全球热潮以来国内 AI 大模型公司获得的单轮最大金额融资。</p><p>月之暗面的上一轮融资为 2023 年获得的超 2 亿美金融资，投资方包括红杉中国、真格基金等。</p><p>月之暗面成立于 2023 年 3 月，迅速成为大模型领域的重要参与者。其核心团队成员曾参与 Google Gemini、Google Bard、盘古 NLP 和悟道等多个大模型项目的研发工作，拥有多年大模型研究和开发经验。目前，公司团队规模已超过 80 人。</p><p>根据官方介绍，Moonshot AI 是下一代跨模态大模型研发商，致力于研发下一代跨模态大模型。目前发明了 RoPE 相对位置编码，是 Meta LLaMa 和 Google PALM 等大多数主流模型的重要组成部分；发明了 group normalization，是 Stable Diffusion 等 AI 模型成功的关键组件。</p><p>公司创始人杨植麟是 90 后学霸，毕业于清华大学计算机系，师从唐杰教授，之后获得卡内基梅隆大学计算机博士学位，师从苹果公司现任 AI 负责人、深度学习奠基人之一 Ruslan Salakhutdinov，曾在 Facebook AI Research， Google Brain 从事自然语言处理研究，获 DREAM9 全球癌症预测大赛第一名，阿里巴巴天池大数据竞赛全球第二名，2017 Nvidia 先锋研究奖。于 ICLR、NIPS、ICML、KDD、ACL 等顶级 AI 会议发表论文二十余篇；在所有六个主流语言建模数据集保持世界第一名（State-of-the-art）。</p><p>2023 年 6 月，科技媒体 The Information 将杨植麟列为 「中国 OpenAI」 的五大候选人之一，表明了他在业界得到了高度认可，其余四位为 MiniMax、智谱 AI、光年之外以及澜舟科技。</p><p>自成立以来，月之暗面在短短不到一年的时间里，已经完成了从通用大模型到上层应用的全面布局。公司已经训练了千亿级别的自研通用大模型，并在 2023 年 10 月推出了面向 C 端的 Kimi 智能助手，这是公司首次尝试 To C 超级应用。</p><p>Kimi 智能助手支持 20 万汉字的长文本输入，主打无损记忆。「长文本（Long Context）」 是月之暗面当前主打的技术之一，这来源于团队希望突破大模型的落地瓶颈 —— 大模型的智慧之所以能 「涌现」，主要是因为通过扩大参数规模，突破到了千亿级别。</p><p>11 月，公司宣布其 Kimi Chat 聊天机器人面向全社会开放服务，用户可通过官网体验。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkimi.moonshot.cn%2F" target="_blank">https://kimi.moonshot.cn/</a></p><p><img height="261" src="https://oscimg.oschina.net/oscnet/up-e5902a7ff6a62c3a72f9c3ed663ad23e4ed.png" width="500" referrerpolicy="no-referrer"></p><p>杨植麟认为，在 B2C 领域，AI Native 将开辟新的流量渠道，它们有望成为 AI 时代的 Super App，带来巨大的商机。</p><p>据悉，月之暗面正在研发通用多模态模型，并预计在今年内推出，多模态模型是近期大模型创业公司的核心竞争点。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 10:31:27 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279462</guid>
            <link>https://www.oschina.net/news/279462</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鸿祎回应 2024 年 AI 行业十大预言，现已实现四个]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>中国企业家杂志独家对话了知名企业家、360 集团董事长周鸿祎，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1193725273%2FO1t4r21L4" target="_blank">共同探讨</a></u>了近期备受瞩目的 AI 技术 Sora 所带来的重大影响。在被问及如何看待年初提出的 AI 十大预言时，周鸿祎兴奋地表示，目前已经有四个预言得以实现，分别是<strong>开源大模型爆发、大模型运行在终端、文生图和文生视频取得突破性进展、多模态成为大模型标配</strong>。周鸿祎认为，特别是 Sora 的出现让他感到很意外，发展得很快。</p><p>附周鸿祎此前提出的 AI 十大预言：</p><ol><li>大模型无处不在，成为数字系统标配；</li><li><strong>开源大模型爆发；</strong></li><li><strong>"小模型"涌现，运行在更多终端；</strong></li><li>大模型企业级市场崛起，向产业化、垂直化方向发展；</li><li>Agent 智能体激发大模型潜能，成为超级生产力工具；</li><li>2024 年是大模型应用场景之年，To C 出现杀手级应用；</li><li><strong>多模态成为大模型标配；</strong></li><li><strong>文生图、文生视频等 AIGC 功能突破性增长；</strong></li><li>具身智能赋能人形机器人产业蓬勃发展；</li><li>大模型推动基础科学取得突破。</li></ol><hr><p>周鸿祎前几天在微博<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1708942053%2FO0Sivblel" target="_blank">发表</a></u>了对 Sora 的看法，他认为 Sora 的诞生意味着 AGI（通用人工智能）实现可能从 10 年缩短至一两年。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9cbd9c40a32b414d55590e86ad84c498a87.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 08:16:08 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279421</guid>
            <link>https://www.oschina.net/news/279421</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[字节跳动推出中文版「Sora」？回应来了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">近日，市场有消息称，在 Sora 引爆文生视频赛道之前，国内的字节跳动也推出了一款新型视频模型 Boximator，与 Gen-2、Pink1.0 等既有模型相比，Boximator 的独特之处在于，它能够通过文本输入精确地控制视频中人物或物体的运动。</span></p><p><span style="color:#000000">2 月 20 日，字节跳动相关人士回应称，Boximator 是视频生成领域控制对象运动的技术方法研究项目，目前还无法作为完善的产品落地，距离国外领先的视频生成模型在画面质量、保真率、视频时长等方面还有很大差距。</span></p><p><span style="color:#333333">Sora 是 OpenAI 于日前发布的首个视频生成模型。可根据文本描述生成长达 60 秒的视频，其中包含精细复杂的场景、生动的角色表情以及复杂的镜头运动。OpenAI 在技术报告介绍道，</span><strong style="color:#333333">他们将 Sora 视频生成模型视作世界模拟器</strong><span style="color:#333333">。具体来说就是通过跨越不同持续时间、宽高比和分辨率的视频和图像，从而生成最高可达一分钟的高清视频。</span></p><p><img height="274" src="https://oscimg.oschina.net/oscnet/up-80cdbef18c0af0f443e5c577f0b8b7d9f0d.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Sora 使用了一种特殊的深度学习模型（即 Transformer）来处理视频和图像数据。这种处理方式首先将视频和图像编码成潜在代码，然后将这些代码分解成包含时间和空间信息的小块（即时空补丁），最后利用 Transformer 模型在这些补丁上进行操作。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">这样的处理方法能够有效地捕捉和生成视频和图像数据中的复杂时空动态，为生成高质量的视频和图像提供了一种强大的方法。</p><p><strong>相关阅读：</strong></p><ul><li><a href="https://www.oschina.net/news/278821/openai-text-to-video-sora" target="_blank">OpenAI 发布文本生成视频模型 Sora</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 08:00:14 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279411</guid>
            <link>https://www.oschina.net/news/279411</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Dart 3.3 发布：扩展类型、JavaScript Interop 等]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Dart 3.3 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2Fdartlang%2Fdart-3-3-325bf2bf6c13" target="_blank">发布</a>，公告称此版本改变了性能和跨平台开发的游戏规则。</p><p>增强的扩展类型（Extension Types）将彻底改变性能优化以及用户与本地代码的交互方式。JavaScript interop 模型也得到了改进，引入了强大的类型安全性和开发人员友好的方式来利用 Web 平台的强大功能。「<strong>所有这些都为 WebAssembly 支持铺平了道路</strong>」。此外，新版本还增加了 Google AI 功能。</p><p><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-3949a01f3c180246795018315421f62eccc.webp" width="300" referrerpolicy="no-referrer"></p><h4><strong>扩展类型</strong></h4><p>扩展类型引入了类型的零成本 wrappers，使用它们可以优化对性能敏感的代码，尤其是在与 host&nbsp;平台交互时，扩展类型提供了具有特定成员自定义类型的便利性，同时消除了典型的 wrappers 分配开销。</p><pre><span style="color:#aa0d91">extension</span> type Wrapper(<span style="color:#5c2699">int</span> i) {
  <span style="color:#aa0d91">void</span> showValue() {
    <span style="color:#5c2699">print</span>(<span style="color:#c41a16">'my value is <span style="color:#000000">$i</span>'</span>);
  }
}

<span style="color:#aa0d91">void</span> main() {
  <span style="color:#aa0d91">final</span> wrapper = Wrapper(<span style="color:#1c00cf">42</span>);
  wrapper.showValue(); <span style="color:#007400">// Prints 'my value is 42'</span>
}</pre><p style="color:#242424; margin-left:0; margin-right:0; text-align:start">以上示例<span style="color:#2b2b2b">实现了一个&nbsp;</span><strong><code>Wrapper</code></strong><span style="color:#2b2b2b">&nbsp;扩展类型，但将其用作普通的 Dart 类型，在实际使用里，开发者可以实例化它并调用函数。主要区别在于 Dart 将其编译为普通 Dart&nbsp;</span><strong><code>int</code></strong><span style="color:#2b2b2b">&nbsp;类型，扩展类型允许</span><span style="color:#000000">创建具有唯一的成员类型，而无需分配典型 wrappers 类型的间接成本。因此，虽然&nbsp;&nbsp;extension members&nbsp;功能（Dart 2.7 开始）允许向现有类型添加函数和属性，但扩展类型功能也可以执行相同的操作，并且还允许定义隐藏底层表示的新 API。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">这对于与 host&nbsp;平台的交互特别有用。可以直接使用 Native types，无需创建 wrappers&nbsp;和相关的间接成本，同时还能提供简洁的 Dart API。有关扩展类型的更多信息，可参阅<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdart.dev%2Flanguage%2Fextension-types" target="_blank">新文档</a>。</span></p><h4><strong>不断发展的 JavaScript Interop</strong></h4><p>Dart 3.3 引入了一种与 JavaScript 库和 Web 互操作的新模型。它从一组用于与 JavaScript 交互的新 API 开始：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi.dart.dev%2Fdart-js_interop%2Fdart-js_interop-library.html" target="_blank">dart:js_interop</a>&nbsp;库。现在，Dart 开发人员可以访问&nbsp;typed API 来与 JavaScript 交互。该 API 通过静态强制明确定义了两种语言之间的边界。这在编译之前消除了一整类问题。除了用于访问 JavaScript 代码的新 API 之外，Dart 现在还包含一个新模型，用于使用扩展类型在 Dart 中表示 JavaScript 类型。</p><pre><span style="color:#aa0d91">import</span><span style="color:#c41a16">'dart:js_interop'</span>;

<span style="color:#007400">/// Represents the `console` browser API.</span><span style="color:#aa0d91">extension</span> type MyConsole(JSObject _) <span style="color:#aa0d91">implements</span> JSObject {
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> log(JSAny? value);
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> debug(JSAny? value);
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> info(JSAny? value);
  <span style="color:#aa0d91">external</span><span style="color:#aa0d91">void</span> warn(JSAny? value);
}</pre><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">基于 extension types 的语法比 extension members 允许更多的表达和健全性。这简化了 Dart 中 JavaScript API 的利用。了解更多信息，可参阅<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdart.dev%2Finterop%2Fjs-interop" target="_blank">有关 JS interop 的新文档</a>。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong>改进 browser libraries</strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">从 1.0 版本开始，Dart SDK 就包含了一套全面的 browser libraries。其中包括核心&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi.dart.dev%2Fdart-html%2Fdart-html-library.html" target="_blank">dart:html</a>&nbsp;库以及 SVG、WebGL 等库。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">改进的 JavaScript interop 模型提供了重新构想这些库的机会。</span><span style="color:#2b2b2b">未来 browser libraries&nbsp;</span><span style="color:#242424">支持将集中在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpub.dev%2Fpackages%2Fweb" target="_blank">package:web</a>&nbsp;上。这简化了版本控制、加速了更新并与&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2F" target="_blank">MDN</a>&nbsp;资源保持一致。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#242424">且这一系列的改进导将推动：将 Dart 编译为&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwebassembly.org%2F" target="_blank">WebAssembly</a>。</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#242424">开启 WebAssembly 的未来</span></strong></h4><p style="margin-left:0px; margin-right:0px; text-align:start">Dart 3.3 为 WebAssembly 的 Web 应用奠定基础，虽然 Flutter Web 中的 WebAssembly 支持仍处于试验阶段，<span style="color:#242424">但团队正在努力稳定实现。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start">要使用 WebAssembly 在 Web 上运行 Flutter 应用，需要使用新的 JavaScript Interop 机制和&nbsp;<code>package:web</code>&nbsp;，旧版 JavaScript 和 browser libraries 保持不变，并支持编译为 JavaScript 代码。但是，编译为 WebAssembly 需要迁移。详情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdart.dev%2Fgo%2Fpackage-web" target="_blank">迁移指南</a>。</p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#242424">Google AI Dart SDK</span></strong></h4><p style="margin-left:0px; margin-right:0px; text-align:start">谷歌发布了 Google AI Dart SDK 测试版。用户可以将生成式 AI 功能构建到 Dart 或 Flutter 应用程序中。这些应用程序使用了谷歌最新的 AI 模型系列 Gemini。可查看软件包&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpub.dev%2Fpackages%2Fgoogle_generative_ai" target="_blank">google_generative_ai</a>。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img height="130" src="https://oscimg.oschina.net/oscnet/up-904498ac3cf1c5073e4d35bfc96bb71743c.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2Fdartlang%2Fdart-3-3-325bf2bf6c13" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 06:48:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279389/dart-3-3-released</guid>
            <link>https://www.oschina.net/news/279389/dart-3-3-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报：目前还没有「大模型版 Linux」；nginx 核心开发者创建新分支]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3><span style="color:#e67e22"><strong># 2024.2.19</strong></span></h3><h2><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日要点</span></span></span></span></span></span></h2><p style="text-align:justify"><strong>OpenSource Daily</strong></p><h3><u><a href="https://www.oschina.net/news/278819/nginx-forked-freenginx" target="_blank">核心 Nginx 开发者创建新分支 Freenginx</a></u></h3><p>作为 Nginx Web 服务器的长期核心开发人员之一，Maxim Dounin 宣布创建该项目的一个新分支，名为 Freenginx。</p><p>Maxim Dounin 决定分叉 Nginx 是因为与 F5 发生了分歧，F5 于 2019 年收购了 Nginx 公司。Dounin 在宣布 Freenginx 时表示将不再参与由 F5 负责的 nginx 开发。取而代之的是启动另一个项目，由开发人员而非公司实体来运营。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3488ed2ae05fcc308c3b208aa3bfbebd210.png" referrerpolicy="no-referrer"></p><h3><u><a href="https://www.oschina.net/news/279147/magika-ai-powered-type-identification" target="_blank">谷歌开源 Magika —— AI 驱动的文件类型检测工具</a></u></h3><p>谷歌开源了由 AI 驱动的文件内容类型识别工具，声称能够在毫秒级内精确识别超过 100 种不同文件类型，无论是二进制文件还是文本文件。Magika 是基于深度学习技术的文件类型识别系统，用于准确检测二进制和文本文件类型。在底层，Magika 采用定制的、高度优化的深度学习模型，即使在 CPU 上运行，也能在几毫秒内实现精确的文件识别。</p><p>在谷歌内部，Magika 被用于提升用户安全，帮助对 Gmail、Drive 和安全浏览中的文件进行安全检查和内容策略扫描。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5f0a4182522f53b7a69907f3cff050925ff.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日观察</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-c204357960927dcfcfa94bea7bede0ce869.png" referrerpolicy="no-referrer"></p><blockquote><p>很多人看着各种大模型开源了之后就觉着下个开源时代来了，我认为目前的大模型跟开源社区的最终发展结果是相悖的。早期开源运动兴起时，个人主机和廉价冗余服务器逐渐普及，软件的核心是代码，开放代码之后，所有人都可以在此基础上进行修改、部署和分发；而目前的大模型则依赖于数据和算力，集市模式的开源社区很难具备两个条件。</p><p>因此，目前的大模型开源运动更像是几个巨型公司找了社区这么个的外包组织，虽然大家干的都很红火，但能提供模型本身的依然只有几个公司，能提供模型服务的，也都是商业公司，而不是开发者或者终端用户。最终当大模型的生态平稳之后，社区很难直接拥有大模型的关键技术。<br><br> - 微博 <em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1809500942%2FO14ohCDQJ" target="_blank">&nbsp;axb 的自我修养</a></u></em></p></blockquote><blockquote><p>「套壳」只是中国大模型产业现状的冰山一角，这背后折射出产业发展的五个问题，它们之间互为因果，每个问题都无法独立解决。</p><ul><li>模型：原创、拼装还是套壳？</li><li>算力：卡脖子还是不想买？</li><li>数据：低质数据怎么解决？</li><li>资本：只有资本短视吗？</li><li>商业化：谁是合适的买单人。</li></ul><p>- 财经十一人 <em>《<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2Fttarticle%2Fp%2Fshow%3Fid%3D2309405002841407488086" target="_blank"><strong>中国大模型产业的五个真问题</strong></a></u>》</em></p></blockquote><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日推荐</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-5064f005dfe68164213affe8f74aeffb692.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">开源之声</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-b13ece2ded33000fc7c2b96deef4a7c0df2.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">每日项目榜</span></span></span></span></span></span></strong></h2><p>Gitee 榜单：</p><p><img src="https://oscimg.oschina.net/oscnet/up-e5c538c2846376405aef6d023e59a916f2f.png" referrerpolicy="no-referrer"></p><blockquote><h4><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span><br><em><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC011%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有「大模型版 Linux」</a></u></em></h4></blockquote><hr><p><strong>往期回顾</strong></p><ul><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></u></li><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf" target="_blank">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></u></li><li><u><a href="https://www.oschina.net/news/277585" target="_blank">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></u></li><li><u><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></u></li><li><u><a href="https://www.oschina.net/news/277214" target="_blank">开源日报第 006 期：选择技术栈一定要选择开源的</a></u></li><li><a href="http://www.oschina.net/news/277040"><u>开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</u></a></li><li><u><a href="https://www.oschina.net/news/276864" target="news">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 03:44:19 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279351</guid>
            <link>https://www.oschina.net/news/279351</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Steam Audio SDK 完整源代码现已开源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Steam 社区<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsteamcommunity.com%2Fgames%2F596420%2Fannouncements%2Fdetail%2F7745698166044243233" target="_blank">公告称</a>，随着 Steam Audio 最新版本（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FValveSoftware%2Fsteam-audio%2Freleases%2Ftag%2Fv4.5.2" target="_blank">v4.5.2</a>）的发布，Steam Audio SDK 的完整源代码现已开源。这是 Steam Audio SDK 源代码的第一个开源版本。</span></p><p><span style="color:#000000">「通过此版本，我们的目标是为开发人员提供更多的控制权，从而为用户带来更好的体验，并希望为使用 Steam Audio 的更广泛的开发者社区做出有价值的贡献。」</span></p><p><span style="color:#000000">整个 Steam Audio 代码库，包括 SDK 和所有插件，现已在 Apache 2.0 许可证下发布。开发人员可以在商业产品中使用 Steam Audio，并根据自己的许可条款修改或重新分发它，而无需包含源代码。</span></p><p><span style="color:#000000"><img alt="" height="270" src="https://oscimg.oschina.net/oscnet/up-05ddfd635cb1684b81ccf53468f07d2f90f.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">官方表示，在获取了大量来自社区提供的对开源插件（Unity、Unreal 和 FMOD Studio）的有价值的反馈和贡献之后，他们决定做出这一开源举措，以希望将同样的优势带到核心 SDK 中。此举将使得开发人员能够根据自己的需求定制 SDK，并为使用该技术的每个人提供更好的体验。</span></p><blockquote><p><span style="color:#000000">我们所从事的功能的选择通常是由内部项目的需求驱动的。例如，在开发 Half-Life 期间，我们花了大量时间开发混合混响和路径功能，并将其作为 Steam Audio 4.0.0 的一部分发布。</span></p><p><span style="color:#000000">但这些优先事项可能并不总是与合作伙伴的优先事项一致，因此我们希望消除阻碍合作伙伴实施需要访问核心 Steam Audio SDK 的空间音频功能的障碍。例如，我们可能正在修复 Steam Audio 中影响内部项目的性能问题，但合作伙伴可能需要将 Steam Audio 移植到控制枱平台。</span></p><p><span style="color:#000000">将整个 SDK 作为开源提供给合作伙伴，可以让他们自己管理移植工作，并根据自己的需要进行优化，同时还允许他们在需要时将自己的修改意见反馈回来。</span></p></blockquote><p><span style="color:#000000">接下来，项目团队还将继续对 Steam Audio 进行持续改进，包括发布错误修复和新功能。&nbsp;</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 03:19:34 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279335/steam-audio-sdk-opensource</guid>
            <link>https://www.oschina.net/news/279335/steam-audio-sdk-opensource</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 内核成为 CVE 编号机构 (CNA)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linux 内核已被接受为 CVE 编号机构 (CNA)，这意味着他们将直接管理内核的 CVE。Linus Torvalds 近日在邮件列表<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3Dwi8vZD7EXZfob-yhfDERyfzWxzMOzG9FsOuaKU-v6%2BPHA%40mail.gmail.com%2FT%2F%23u" target="_blank">发布</a></u>了 Linux 6.8-rc5，并介绍称文档添加了 CVE 漏洞处理相关的指南。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7db09f50c2a2dac5a652d9899693a817661.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgit.kernel.org%2Fpub%2Fscm%2Flinux%2Fkernel%2Fgit%2Ftorvalds%2Flinux.git%2Fdiff%2FDocumentation%2Fprocess%2Fcve.rst%3Fid%3D5928d411557ec5d53832cdd39fc443704a3e5b77" target="_blank">CVE 文档页面</a></u></em></p></blockquote><p>文档写道，Linux 内核开发团队有能力为潜在的内核安全问题分配 CVE，而分配的 CVE 编号将在 linux-cve-announce 邮件列表上公布，<strong>修复的安全漏洞才会分配 CVE 编号，未修复的不会自动分配编号</strong>。</p><blockquote><p><img height="1156" src="https://oscimg.oschina.net/oscnet/up-2da79e81f6f9140a562eeb928a92757fe7e.png" width="1400" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flinux-cve-announce%2F" target="_blank">https://lore.kernel.org/linux-cve-announce/</a></u></em></p></blockquote><p>CVE 是通用漏洞披露 (Common Vulnerabilities and Exposures) 的英文缩写，列出了已公开披露的各种计算机安全缺陷。CVE 识别号由 CVE 编号管理机构&nbsp;(CNA) 分配。</p><p>任何人都可以从任何地方进行 CVE 报告。无论是供应商、研究人员或是个人用户，都有可能发现缺陷，并促使他人予以关注。很多供应商都会提供错误报告奖励，以鼓励相关人员负责任地披露各种安全问题。</p><p>在 Linux 内核成为 CNA 之前，它无法自行管理内核的 CVE 漏洞编号分配。由于内核是系统的底层，几乎任何错误都可能被用于危害内核安全，但当错误被修复时，被利用的可能性通常不明显。过去 CNA 过于谨慎，几乎为发现或收到的任何安全漏洞分配了 CVE 编号，导致 Linux 内核团队需要花费大量时间处理许多未造成重大影响的漏洞。</p><p>因此接下来 Linux 内核中未修复的安全漏洞不会提前分配 CVE 编号，只有在漏洞被修复后才会分配 CVE 编号，这样可以通过正确的方式来追踪原始修复的 git commit ID。</p><p>延伸阅读：<u><em><a href="https://www.oschina.net/news/276167/curl-is-a-cna" target="news">curl 项目已被接受为 CVE 编号机构 (CNA)</a></em></u></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 02:59:34 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279326/linux-kernel-is-a-cna</guid>
            <link>https://www.oschina.net/news/279326/linux-kernel-is-a-cna</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2026 年传统搜索引擎流量将下降 25%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">市场分析公司 Gartner <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Fnewsroom%2Fpress-releases%2F2024-02-19-gartner-predicts-search-engine-volume-will-drop-25-percent-by-2026-due-to-ai-chatbots-and-other-virtual-agents" target="_blank">指出</a>，生成式 AI 已严重威胁传统搜索引擎。预测到 2026 年，传统搜索引擎的流量将下降 25%，搜索营销的市场份额将被人工智能聊天机器人和其他虚拟代理所取代。</span></p><p><img height="261" src="https://oscimg.oschina.net/oscnet/up-a7078c146496ef4a1ec0a21edf9088d52e3.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Gartner 副总裁分析师 Alan Antin 称，有机搜索和付费搜索是科技营销人员实现认知和需求生成目标的重要渠道。GenAI 解决方案正在成为替代答案引擎，取代以前可能在传统搜索引擎中执行的用户查询。随着 GenAI 越来越深入企业的方方面面，这将迫使企业重新思考其营销渠道战略。</span></p><blockquote><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">随着 GenAI 推动降低内容制作成本，包括关键字策略和网站域名权威评分在内的各项活动都将受到影响。搜索引擎算法将进一步重视内容的质量，以抵消人工智能生成内容的数量，因为内容的实用性和质量仍然是有机搜索结果成功的关键。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">此外，还将更加重视水印和其他验证高价值内容的手段。全球各地的政府法规已经开始要求公司对人工智能创建的营销内容资产承担责任。这很可能会对搜索引擎如何显示此类数字内容产生影响。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">公司需要专注于制作对客户和潜在客户有用的独特内容。内容应继续展示搜索质量评估者的要素，例如专业知识、经验、权威性和可信度。</span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 02:26:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279308/gartner-search-engine-2026-ai</guid>
            <link>https://www.oschina.net/news/279308/gartner-search-engine-2026-ai</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Zilliz Cloud 再发新版本：性能提升超 10 倍，AI 应用开发流程再简化！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Zilliz Cloud 再发新版本！</p><p>本次新版本的主要内容包括：大幅提升的向量搜索性能（性能提升 10 倍以上）、企业级数据安全和无缝数据集成。新版本发布后，用户无需自定义代码，便可快速顺畅地完成非结构化数据处理和索引。此外，Zilliz Cloud 将有效帮助用户节省成本，简化支付和采购流程。</p><p>以下为本次发布的新特性一览：</p><ul><li><p>Cardinal 搜索引擎</p></li><li><p>Zilliz Cloud 正式升级至 Milvus 2.3 版本</p></li><li><p>基于角色的访问控制和权限管理（RBAC）</p></li><li><p>Databricks Connector</p></li><li><p>支持 Google Cloud Marketplace 订阅</p></li><li><p>其他数据安全方面更新</p></li></ul><p><img src="https://assets.zilliz.com/cms-cn/640_2024_02_19_T165818_906_45850c7576.png" alt="" referrerpolicy="no-referrer"></p><h2>01. Cardinal 搜索引擎：搜索速度提升 10 倍，数据容量提升 50%</h2><p>Cardinal 是用现代 C++ 语言和实用的近似最近邻搜索（ANNS）算法构建的多线程、高效率向量搜索引擎。它同时能够处理暴搜请求和 ANNS 索引修改请求；处理各种数据格式，包括 FP32、FP16 和 BF16。Cardinal 搜索引擎强调速度和效率，能够在有限的资源内处理更多用户请求。</p><p>在推动 Cardinal 引擎创新的过程中，我们始终坚持推动异构计算的原则。团队对算法进行调优，采用了针对计算密集型操作优化的 low-level 内核，并确保支持多种硬件，包括 x86 和 ARM。Cardinal 利用 x86 的 AVX-512 扩展和 ARM 的 NEON 及 SVE 指令集等尖端技术，提供针对高效计算优化的代码。这些改进保证了 Cardinal 能够时刻全力运行，是行业内最快的向量搜索引擎。</p><p>有了 Cardinal 搜索引擎的加持，Zilliz Cloud 实现了 10 倍性能提升（与开源 Milvus 相比），能够实现超快的查询速度外加高召回率。无论是处理大型数据集还是对快速响应有高要求，Cardinal 都能为此保驾护航，提升用户体验，提升 AI 应用的竞争力。</p><p>「Zilliz Cloud 的性能给我们留下了深刻的印象，它在数据负载大的情况下尤为出色！」Picdmo 的 CEO 兼创始人 Alex Alexander 称赞道，「采用 Cardinal 搜索引擎后，Zilliz Cloud 性能比上一个版本提升了 2 倍，搜索查询的速度和效率更惊人！此外，Zilliz Cloud 还提供增强数据安全保障。得益于 Zilliz Cloud，我们搭建的以图搜图应用功能变得更强大了。」</p><h2>02. 开箱即用的 Milvus 2.3：生产就绪的高级向量搜索功能</h2><p>经过为期 4 个月的 Beta 阶段后，Zilliz Cloud 正式上线了和 Milvus 2.3 相同的功能。目前，Zilliz Cloud 用户可以在生产环境中使用全新的高级向量搜索和数据管理功能。新版本功能包括：</p><ul><li><p>Cosine 相似度类型： 无需向量归一化，简化数据搜索流程。</p></li><li><p>Upsert 数据：提升更新和删除数据的管理流程效率，适用于频繁更新数据且追求数据一致性和原子性的场景。</p></li><li><p>范围搜索（Range Search）: 通过限制查询向量与其他向量之间的距离，范围搜索能够实现对搜索结果的有效细化，适用于搭建推荐引擎的场景。</p></li><li><p>支持 Parquet 文件：提升数据处理能力，支持 Parquet 文件，通过其高效的列式存储格式，提供更好的查询性能，适用于具有复杂数据集的场景。</p></li><li><p>支持 Array 数据类型：支持在搜索过程中基于多个属性进行精确的元数据过滤。在电商领域中，该功能支持根据不同产品标签进行搜索，为用户返回相关的搜索结果。</p></li></ul><h2>03. RBAC: 对数据访问进行细粒度的控制</h2><p>Zilliz Cloud 的 RBAC（角色权限访问控制）功能提供了一种结构化和可扩展的方法来管理数据访问权限，保障数据安全。在过去的几个月中，我们新增了多项相关功能，进一步打磨了 Zilliz Cloud 的 RBAC 系统，使其比市面上所有向量数据库都更加细致和全面。</p><p>RBAC 分为两层：控制层和数据层。在控制层，角色管理集群、项目、用户和计费等资源的操作权限。Zilliz Cloud 在控制层设有 4 种角色，其中组织管理员、项目所有者和项目成员是 3 种常用角色：</p><ul><li><p>组织管理员：拥有组织管理权限，包括管理组织设置、支付方式、账单、组织 API 密钥等。此外组织管理员还具备所有组织下资源（如：项目）的管理权限。</p></li><li><p>项目管理员：拥有项目管理权限，包括项目设置、项目内所有集群、项目 API 密钥等资源。</p></li><li><p>项目成员：拥有项目读写权限，包括读写项目下所有集群、查看项目下所有集群详情、管理 Collection 和索引等。</p></li></ul><p>在数据层面，角色权限是指在集群中添加、删除、修改和访问数据的能力。Zilliz Cloud 在数据层级提供了 3 种内置角色：管理员（Admin）、只读（Read-Only）和读写（Read-Write），不同角色对集群数据的读写和管理权限不同。此外，Zilliz Cloud 允许用户创建自定义角色，针对特定 Collection、Partition 或操作分配相应权限，确保数据安全。</p><p>通过 RBAC 功能，企业用户可以实现对数据访问进行细粒度的控制，提高数据安全性和合规性，同时促进团队间的协作，并确保用户根据其角色和职责拥有对应的访问权限和级别。</p><h2>04. Databricks Connector：简化 AI 应用的开发过程</h2><p>Zilliz 一直致力于为用户提供开箱即用的数据集成解决方案，近期，我们便通过引入 Confluent 和 Airbyte Connector，扩展了 Zilliz Cloud 数据对接和转换能力。本次版本更新，Zilliz Cloud 再次放大招，集成 Databricks Connector，为 Zilliz 向非结构化数据平台的发展打下了坚实的基础。</p><p>具体来看，Databricks Connector 提供了一套简单的数据迁移和转换解决方案，简化了 AI 应用的开发过程。无论是你的团队在研究 ML 并希望更新 Embedding 模型，还是作为个人用户希望直接将 data frame 记录从 Spark 上传至 Milvus，灵活的 Databricks Connector 都能一一满足。</p><p><img src="https://assets.zilliz.com/cms-cn/640_2024_02_19_T165827_910_2d9e7b4d3d.png" alt="" referrerpolicy="no-referrer"></p><p>此外，通过 Databricks Connector，用户就可以通过两种方式将数据导入到 Zilliz Cloud：流式处理（适用于实时更新）或批处理（适用于大型数据集）。访问链接 （<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzilliz.com%2Fdatabricks_zilliz_demos" target="_blank">https://zilliz.com/databricks_zilliz_demos</a>）了解更多细节。</p><h2>05. 支持 GCP Marketplace 订阅: 简化支付和采购流程</h2><p>Zilliz Cloud 现已集成 GCP Marketplace，为开发者提供无缝的体验。用户可以直接用 Google Cloud 账号在 Marketplace 中购买 Zilliz Cloud，并根据自己的项目进展情况，按需扩展自己的集群并支付费用。此外，大家可以在 Zilliz Cloud 的操作界面中设置 GCP Marketplace 作为支付方式，或直接通过 GCP Marketplace 订阅。</p><h2>06. 其他数据安全方面更新</h2><p>Zilliz Cloud 已经通过了 SOC 2 Type II 和 ISO 27001 数据合规认证。我们始终致力于维持最高数据安全标准，为用户在 Zilliz Cloud 的体验保驾护航。</p><p>立即注册 Zilliz Cloud（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.zilliz.com.cn%2Fsignup" target="_blank">https://cloud.zilliz.com.cn/signup</a>）即可享受 30 天免费试用。如果在使用过程中遇到任何问题，欢迎通过 Zilliz Cloud 支持中心（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.zilliz.com.cn%2Fhc%2Fzh-cn" target="_blank">https://support.zilliz.com.cn/hc/zh-cn</a>）联系我们。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 20 Feb 2024 01:53:27 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/11044004</guid>
            <link>https://my.oschina.net/u/4209276/blog/11044004</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JimuReport 积木报表 v1.7.0 变革版本发布，低代码报表设计工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>项目介绍</h3><blockquote><p style="margin-left:0; margin-right:0">一款免费的数据可视化报表，含报表和大屏设计，像搭建积木一样在线设计报表！功能涵盖，数据报表、打印设计、图表报表、大屏设计等！</p><ul><li>Web 版报表设计器，类似于 excel 操作风格，通过拖拽完成报表设计。</li><li>秉承 「简单、易用、专业」 的产品理念，极大的降低报表开发难度、缩短开发周期、节省成本、解决各类报表难题。</li><li>领先的企业级 Web 报件，采用纯 Web 在线技术，专注于解决企业报表快速制作难题。</li></ul></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>当前版本</strong>：v1.7.0 | 2024-02-18</p><h4>集成依赖</h4><pre><code><span style="color:#333333">&lt;<span style="color:#22863a">dependency</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">groupId</span>&gt;</span>org.jeecgframework.jimureport<span style="color:#333333">&lt;/<span style="color:#22863a">groupId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">artifactId</span>&gt;</span>jimureport-spring-boot-starter<span style="color:#333333">&lt;/<span style="color:#22863a">artifactId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">version</span>&gt;</span>1.7.0<span style="color:#333333">&lt;/<span style="color:#22863a">version</span>&gt;</span><span style="color:#333333">&lt;/<span style="color:#22863a">dependency</span>&gt;</span></code></pre><h4>:: 授权变更::</h4><blockquote><p style="margin-left:0; margin-right:0">从 v1.7.0 + 开始，积木报表做出重大变革，推出付费版本。免费版本会持续发布，不过功能会受到限制，以便于本项目更好的发展。</p></blockquote><ul><li>积木报表自 2019 年研发以来，一直坚持免费向用户提供服务。然而，随着项目的不断发展和运营成本的增加，目前面临着一些困难。为了保障项目的良性发展和持续运营，团队决定从 1.7.0 版本开始变更开源协议，并推出付费版本和免费版。</li><li>付费版本的推出将有助于筹集资金，用于软件的维护、更新和改进，以及提供更加稳定和优质的服务。同时，免费版仍将继续存在，但部分功能会受到一定的限制。如果用户不希望受到影响，可以选择继续使用 1.7 以下的版本，这些版本将遵循原来开源协议，并会进行一段时间的维护，以保障安全漏洞等级别问题。</li><li>这一变更旨在确保积木报表软件能够持续稳定地为用户提供服务，并为未来的发展奠定坚实的基础，团队希望用户能够理解并支持这一决定。</li></ul><h4>升级日志</h4><p>#升级 SQL</p><pre><code><span style="color:#d73a49">ALTER</span><span style="color:#d73a49">TABLE</span><span style="color:#032f62">`jimu_report_share`</span><span style="color:#d73a49">ADD</span><span style="color:#d73a49">UNIQUE</span><span style="color:#d73a49">INDEX</span><span style="color:#032f62">`uniq_report_id`</span>(<span style="color:#032f62">`report_id`</span>);

<span style="color:#d73a49">ALTER</span><span style="color:#d73a49">TABLE</span> jimu_report_share 
<span style="color:#d73a49">ADD</span><span style="color:#d73a49">COLUMN</span> share_token <span>varchar</span>(<span>50</span>) <span style="color:#005cc5">NULL</span><span style="color:#d73a49">COMMENT</span><span style="color:#032f62">'分享 token'</span><span style="color:#d73a49">AFTER</span> preview_lock_status,
<span style="color:#d73a49">ADD</span><span style="color:#d73a49">UNIQUE</span><span style="color:#d73a49">INDEX</span> uniq_jrs_share_token(share_token);

<span style="color:#d73a49">ALTER</span><span style="color:#d73a49">TABLE</span><span style="color:#032f62">`jimu_report`</span><span style="color:#d73a49">ADD</span><span style="color:#d73a49">COLUMN</span><span style="color:#032f62">`py_str`</span><span>text</span><span>CHARACTER</span><span style="color:#d73a49">SET</span> utf8mb3 <span style="color:#d73a49">COLLATE</span> utf8mb3_general_ci <span style="color:#005cc5">NULL</span><span style="color:#d73a49">COMMENT</span><span style="color:#032f62">'py 增强'</span><span style="color:#d73a49">AFTER</span><span style="color:#032f62">`js_str`</span>;
</code></pre><p>#新功能</p><ul><li>缩放打印</li><li>支持批量、接口、定时导出 PDF/EXCEL</li><li>格式化增加年 / 月 / 年月</li><li>支持隐藏，数据计算单元格</li><li>支持主子表循环打印</li><li>报表分享带临时令牌（更安全）</li></ul><p>#issues</p><ul><li>最新版本的搜索框搜索失效・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2255" target="_blank">Issue #2255</a></li><li>配置了 「多租户模式」=「tenant」，并且 「数据源安全」=「false」 后：访问报表提示 「安全模式下，不允许使用平台数据源（请配置数据源）！」・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2244" target="_blank">Issue #2244</a></li><li>Posgresql 数据库， timestamp 字段，查询，提示 timestamp without time zone &gt;= character varying・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2166" target="_blank">Issue #2166</a></li><li>查询报表中日期范围和数据集求和同时存在时，查询报错，sql 缺失 and 条件・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2258" target="_blank">Issue #2258</a></li><li>积木报表 API 数据显示不出来・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2Fjeecgboot-vue3%2Fissues%2F881" target="_blank">Issue #881</a></li><li>【1.6.6 版本】SQL 中字段别名使用中文查询时会报错，无法解析中文・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2269" target="_blank">Issue #2269</a></li><li>API 数据返回非集合数据，处理时使用了 JSONArray 处理・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2261" target="_blank">Issue #2261</a></li><li>报表条件表达式 case 无短路特性・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2265" target="_blank">Issue #2265</a></li><li>积木报表 API 数据显示不出来・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2Fjeecgboot-vue3%2Fissues%2F881" target="_blank">Issue #881</a></li><li>函数不能和文字进行组合了・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2211" target="_blank">Issue #2211</a></li><li>通过 api 解析查询到数据，分组后排序错乱，不是 sql 查询，1.5.2 版本还没有问题，更新到最新版本后错乱。・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2203" target="_blank">Issue #2203</a></li><li>官网在线体验，图表设置单元格背景色后打印和导出 PDF 显示异常・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2354" target="_blank">Issue #2354</a></li><li>导入报表配置报错・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2333" target="_blank">Issue #2333</a></li><li>自定义横向分组，日期排序错误，不能排序・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2355" target="_blank">Issue #2355</a></li><li>删除线，下划线使用之后再点取消，导出的 excel 仍有两线・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2345" target="_blank">Issue #2345</a></li><li>图表 PDF 导出内容异常・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2332" target="_blank">Issue #2332</a></li><li>DBSUM 加查询条件统计时报 SQL 语法错误，条件字段前缺少 and・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2367" target="_blank">Issue #2367</a></li><li>多租户模式下，报表钻取 url 参数没有 tenantId・<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2288" target="_blank">Issue #2288</a></li><li>重构分组合计计算逻辑，解决合计的系列问题</li><li>报表名称前后有空格，模糊搜索不显示</li><li>查询条件，选中后，点击不出现下拉项</li><li>查询框鼠标上下滚动，会出现闪动的情况</li><li>安全模式下存在 select * 的时候，判断拥有 sql 解析权限的角色，如果有可以走数据库</li><li>数据源测试连接，测试不了</li><li>年月选中未显示</li><li>【issues/2194】多租户模式，报表名称的唯一性校验逻辑问题</li><li>[issue/#881] api 报表增加字段映射功能</li><li>函数表达式，有空格时失效</li><li>日期函数支持小时显示</li><li>带背景导出图片错乱<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2379" target="_blank">#2379</a></li><li>带背景导出图片时报错<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2377" target="_blank">#2377</a></li><li>提供 SpringBoot3+JDK17 支持版本</li></ul><h4>代码下载</h4><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport" target="_blank">https://github.com/jeecgboot/JimuReport</a></li><li><a href="https://gitee.com/jeecg/JimuReport">https://gitee.com/jeecg/JimuReport</a></li></ul><h4>技术文档</h4><ul><li>体验官网：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fjimureport.com%2F" target="_blank">http://jimureport.com</a></li><li>快速集成文档 ：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.jeecg.com%2Fjimureport%2Fquick.html" target="_blank">https://help.jeecg.com/jimureport/quick.html</a></li><li>技术文档：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.jeecg.com%2Fjimureport" target="_blank">https://help.jeecg.com/jimureport</a></li></ul><h4>为什么选择 JimuReport?</h4><blockquote><p style="margin-left:0; margin-right:0">永久免费，支持各种复杂报表，并且傻瓜式在线设计，非常的智能，低代码时代，这个是你的首选！</p></blockquote><ul><li>采用 SpringBoot 的脚手架项目，都可以快速集成</li><li>Web 版设计器，类似于 excel 操作风格，通过拖拽完成报表设计</li><li>通过 SQL、API 等方式，将数据源与模板绑定。同时支持表达式，自动计算合计等功能，使计算工作量降低</li><li>开发效率很高，傻瓜式在线报表设计，一分钟设计一个报表，又简单又强大</li><li>支持 ECharts，目前支持 28 种图表，在线拖拽设计，支持 SQL 和 API 两种数据源</li><li>支持分组、交叉，合计、表达式等复杂报表</li><li>支持打印设计（支持套打、背景打印等）可设置打印边距、方向、页眉页脚等参数，一键快速打印，同时可实现套打，不动产证等精准、无缝打印</li><li>大屏设计器支持几十种图表样式，可自由拼接、组合，设计炫酷大屏</li><li>可设计各种类型的单据、大屏，如出入库单、销售单、财务报表、合同、监控大屏、旅游数据大屏等</li></ul><h4>报表设计效果</h4><ul><li>报表设计器（专业一流，数据可视化，解决各类报表难题）<span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-a2a8557722593e6c5a5e8f015a0df2b70e9.png" referrerpolicy="no-referrer"></li><li>报表设计器（完全在线设计，简单易用）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-752b454f64ed87c798b3e8a083fbd6622d4.gif" referrerpolicy="no-referrer"></p><ul><li>打印设计（支持套打、背景打印）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9b6cd73719de68e0e45e1cf95cd6104a103.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-8863ea4e67c02dbd844bb8022652f1be651.png" referrerpolicy="no-referrer"></p><ul><li>数据报表（支持分组、交叉，合计等复杂报表）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fe2ac0dfc3933734961924de0538b3049d2.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-be956cbc19287e4df9cc46c9d15e96da99d.png" referrerpolicy="no-referrer"></p><ul><li>图形报表（目前支持 28 种图表）<span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-3eda428ef182cb64a1a8e132e4bfeb87718.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-22096123c5b6a10a801967c33cc33a7af11.png" referrerpolicy="no-referrer"></li><li>数据报表斑马线</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e77ba28f6fb56d1147c13388e7e5d19d1bc.png" referrerpolicy="no-referrer"></p><p>仪表盘设计器</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c9d41288c31398d76b390bdd400f13a582.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8ebff9357b6a22161f668586af28be31488.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fad98d42b2cf92f92a903c9cff7579f18ec.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4be5b44bf771d8c55aba2adf9ae074eac18.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-57676eb5dcf4726933e0f6e429a4b2e31a9.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-7938331a342ba363a9691d76a53f34298fc.png" referrerpolicy="no-referrer"></p><h4>功能清单</h4><pre><code>├─报表设计器
│  ├─数据源
│  │  ├─支持多种数据源，如 Oracle,MySQL,SQLServer,PostgreSQL 等主流的数据库
│  │  ├─支持 SQL 编写页面智能化，可以看到数据源下面的表清单和字段清单
│  │  ├─支持参数
│  │  ├─支持单数据源和多数数据源设置
│  │  ├─支持 Nosql 数据源 Redis，MongoDB
│  │  ├─支持存储过程
│  ├─单元格格式
│  │  ├─边框
│  │  ├─字体大小
│  │  ├─字体颜色
│  │  ├─背景色
│  │  ├─字体加粗
│  │  ├─支持水平和垂直的分散对齐
│  │  ├─支持文字自动换行设置
│  │  ├─图片设置为图片背景
│  │  ├─支持无线行和无限列
│  │  ├─支持设计器内冻结窗口
│  │  ├─支持对单元格内容或格式的复制、粘贴和删除等功能
│  │  ├─等等
│  ├─报表元素
│  │  ├─文本类型：直接写文本；支持数值类型的文本设置小数位数
│  │  ├─图片类型：支持上传一张图表；支持图片动态生成
│  │  ├─图表类型
│  │  ├─函数类型
│  │  └─支持求和
│  │  └─平均值
│  │  └─最大值
│  │  └─最小值
│  ├─背景
│  │  ├─背景颜色设置
│  │  ├─背景图片设置
│  │  ├─背景透明度设置
│  │  ├─背景大小设置
│  ├─数据字典
│  ├─报表打印
│  │  ├─自定义打印
│  │  └─医药笺、逮捕令、介绍信等自定义样式设计打印
│  │  ├─简单数据打印
│  │  └─出入库单、销售表打印
│  │  └─带参数打印
│  │  └─分页打印
│  │  ├─套打
│  │  └─不动产证打印
│  │  └─打印
│  ├─数据报表
│  │  ├─分组数据报表
│  │  └─横向数据分组
│  │  └─纵向数据分组
│  │  └─多级循环表头分组
│  │  └─横向分组小计
│  │  └─纵向分组小计
│  │  └─分版
│  │  └─分栏
│  │  └─动态合并格
│  │  └─自定义分页条数
│  │  └─合计
│  │  ├─交叉报表
│  │  ├─明细表
│  │  ├─带条件查询报表
│  │  ├─表达式报表
│  │  ├─带二维码/条形码报表
│  │  ├─多表头复杂报表
│  │  ├─主子报表
│  │  ├─预警报表
│  │  ├─数据钻取报表
│  ├─图形报表
│  │  ├─柱形图
│  │  ├─堆叠柱形图
│  │  ├─折线图
│  │  ├─饼图
│  │  ├─动态轮播图
│  │  ├─折柱图
│  │  ├─散点图
│  │  ├─漏斗图
│  │  ├─雷达图
│  │  ├─象形图
│  │  ├─地图
│  │  ├─仪盘表
│  │  ├─关系图
│  │  ├─图表背景
│  │  ├─图表动态刷新
│  │  ├─图表数据字典
│  ├─参数
│  │  ├─参数配置
│  │  ├─参数管理
│  ├─导入导出
│  │  ├─支持导入 Excel
│  │  ├─支持导出 Excel、pdf；支持导出 excel、pdf 带参数
│  ├─打印设置
│  │  ├─打印区域设置
│  │  ├─打印机设置
│  │  ├─预览
│  │  ├─打印页码设置
├─大屏设计器
│  ├─系统功能
│  │  ├─静态数据源和动态数据源设置
│  │  ├─基础功能
│  │  └─支持拖拽设计
│  │  └─支持增、删、改、查大屏
│  │  └─支持复制大屏数据和样式
│  │  └─支持大屏预览、分享
│  │  └─支持系统自动保存数据，同时支持手动恢复数据
│  │  └─支持设置大屏密码
│  │  └─支持对组件图层的删除、组合、上移、下移、置顶、置底等
│  │  ├─背景设置
│  │  └─大屏的宽度和高度设置
│  │  └─大屏简介设置
│  │  └─背景颜色、背景图片设置
│  │  └─封面图设置
│  │  └─缩放比例设置
│  │  └─环境地址设置
│  │  └─水印设置
│  │  ├─地图设置
│  │  └─添加地图
│  │  └─地图数据隔离
│  ├─图表
│  │  ├─柱形图
│  │  ├─折线图
│  │  ├─折柱图
│  │  ├─饼图
│  │  ├─象形图
│  │  ├─雷达图
│  │  ├─散点图
│  │  ├─漏斗图
│  │  ├─文本框
│  │  ├─跑马灯
│  │  ├─超链接
│  │  ├─实时时间
│  │  ├─地图
│  │  ├─全国物流地图
│  │  ├─地理座标地图
│  │  ├─城市派件地图
│  │  ├─图片
│  │  ├─图片框
│  │  ├─轮播图
│  │  ├─滑动组件
│  │  ├─iframe
│  │  ├─video
│  │  ├─翻牌器
│  │  ├─环形图
│  │  ├─进度条
│  │  ├─仪盘表
│  │  ├─字浮云
│  │  ├─表格
│  │  ├─选项卡
│  │  ├─万能组件
└─其他模块
   └─更多功能开发中。。</code></pre><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 11:44:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279228/jimureport-1-7-0-released</guid>
            <link>https://www.oschina.net/news/279228/jimureport-1-7-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RustDesk 新增选择连接特定 Windows 会话功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">经过春节期间多次重构，RustDesk<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frustdesk%2Frustdesk%2Freleases%2Ftag%2Fnightly" target="_blank">nightly</a>&nbsp;新增选择连接特定 Windows 会话功能，欢迎大家试用反馈。</p><p><img alt="Image" src="https://pbs.twimg.com/media/GGrOJ2ZXcAAZQMJ?format=jpg&amp;name=medium" referrerpolicy="no-referrer"></p><p>Demo 视频请查看，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frustdesk%2Frustdesk%2Fpull%2F7184" target="_blank">https://github.com/rustdesk/rustdesk/pull/7184</a></p><p>关于 RustDesk 的最新资讯请订阅，&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Frustdesk%2Fstatus%2F1759445426267189273" target="_blank">https://twitter.com/rustdesk/status/1759445426267189273</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">RustDesk 是一个开源远程桌面软件，开箱即用，无需任何配置。您完全掌控数据，不用担心安全问题。您可以使用我们的注册 / 中继服务器，或者自己设置，亦或者开发您的版本。</p><h3 style="margin-left:0; margin-right:0; text-align:start">主要特性：</h3><ol style="list-style-type:decimal; margin-left:0; margin-right:0"><li>自定义画面质量</li><li>加密直连，先尝试打洞直连，不行再由服务器转发</li><li>内置文件传输和 TCP 隧道功能</li><li>RDP 连接</li><li>支持自建中心服务器</li><li>内网 IP 直连</li></ol><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="主界面" height="605" src="https://static.oschina.net/uploads/img/202103/31190948_oYrE.png" width="930" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 07:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279183/rustdesk-updated</guid>
            <link>https://www.oschina.net/news/279183/rustdesk-updated</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Android 15 首个开发者预览版]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Android 15 首个开发者预览版已发布，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2024%2F02%2Ffirst-developer-preview-android15.html" target="_blank">公告写道</a></u>：「Android 15 继续致力于构建一个平台，帮助用户提高工作效率，同时提供新功能，让用户能够在最多样化的设备上拥有出色的使用体验、最大限度地减少电池影响、最大限度地提升流畅的应用性能，以及保护用户隐私和安全。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-92eb319bbaa3f3eaf7f75333f17f8a57f0a.png" referrerpolicy="no-referrer"></p><p>Android 15 支持以下设备：</p><ul style="margin-left:0; margin-right:0"><li>Pixel 6 和 Pixel 6 Pro</li><li>Pixel 6a</li><li>Pixel 7 和 Pixel 7 Pro</li><li>Pixel 7a</li><li>Pixel Fold</li><li>Pixel Tablet</li><li>Pixel 8 和 Pixel 8 Pro</li></ul><p>这也意味着 Pixel 5 和 5a 系列不会再收到新操作系统的更新。</p><p>Android 15 主要新特性：</p><ul><li>改进相机控制</li><li>部分屏幕共享，允许用户共享或录制单个应用窗口而不是整个屏幕</li><li>支持内核 fs-verity 功能的 API，允许用户在可读写文件系统上存储只读文件，对其进行加密签名以确保没有被恶意篡改</li><li>如果检测到手机过热将提供更多动态性能控制 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Fgames%2Foptimize%2Fadpf" target="_blank">Android Dynamic Performance Framework (ADPF)</a>，让应用根据情况做出相应的回应</li><li>继续添加 OpenJDK API，包括围绕 NIO 缓冲区、流、安全性等改进</li></ul><p>Android 15 还包括最新版本的"隐私沙箱"（Privacy Sandbox）--这是一项正在进行中的计划，旨在为应用程序找到利用定向广告的方法，从而在后"末日世界"中保持某种程度的用户隐私。</p><p>按照计划，Android 15 将在今年下半年正式发布。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d970a53a257079a56720ec894ea0d49b45e.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 06:23:48 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279171/first-developer-preview-android-15</guid>
            <link>https://www.oschina.net/news/279171/first-developer-preview-android-15</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「我第一次用 GitHub，别 TM 给我代码，我只要安装包」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-f7d84901951a7547060708d4c054cada7b0.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fgithub%2Fcomments%2F1at9br4%2Fi_am_new_to_github_and_i_have_lots_to_say%2F" target="_blank">https://www.reddit.com/r/github/comments/1at9br4/i_am_new_to_github_and_i_have_lots_to_say/</a></u></em></p></blockquote><p>上面的截图来自 reddit 的 GitHub 子版块。一名自称是 GitHub 新手的用户因没有在仓库找到安装包而破口大骂：</p><blockquote><p>我 TM 不需要什么狗屁代码，我只想下载这个煞笔应用程序。</p><p>为什么要提供代码？这些蠢货以为每个人都是开发者，都懂代码。我不是，我也不懂，我只会下载和安装应用程序。所以这 TM 为什么要提供代码？臭煞笔程序员！</p></blockquote><p>根据帖子的内容，这名用户需要使用的是名为&nbsp;Sherlock 的 Python 命令行工具，该工具可根据输入的用户名爬取对应的社交帐号。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e12784c1a46366dfa33002c85069752e7f1.png" referrerpolicy="no-referrer"></p><p>由于 Sherlock 没有提供可直接安装使用的二进制文件，需要用户安装 Python 并在命令行环境中使用 —— 这对于新手来说确实有门槛。但复杂的社会你给我去学习！</p><p><img src="https://oscimg.oschina.net/oscnet/up-6c559086d781033dcdc406e44d1536672f5.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 03:28:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279155/new-to-github</guid>
            <link>https://www.oschina.net/news/279155/new-to-github</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ioGame21 发布，史诗级增强，质的飞越；Java Netty 轻量级网络游戏服务器框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>ioGame21 首发计划</h3><div><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Freleases%2Ftag%2F21.0" target="_blank"><span>https://github.com/game-town/ioGame/releases/tag/21.0</span></a></p></div><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fab15oe" target="_blank"><span>框架版本更新日志 (yuque.com)</span></a></span></p><table><tbody><tr><th>功能支持</th><th>完成</th><th>描述</th><th>issu</th></tr></tbody><tbody><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fxeokui" target="_blank">游戏对外服开放自定义协议</a></td><td>✅</td><td>功能增强</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F213" target="_blank">#213</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkhg23pvbh59a7spm" target="_blank">游戏对外服缓存</a></td><td>✅</td><td>功能增强、性能提升</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F76" target="_blank">#76</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz%23YQOZ5" target="_blank">FlowContext</a> 增加通信能力，提供同步、异步、异步回调的便捷使用</td><td>✅</td><td>功能增强</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F235" target="_blank">#235</a></td></tr><tr><td>虚拟线程支持; 各逻辑服之间通信阻塞部分，改为使用虚拟线程，避免阻塞业务线程</td><td>✅</td><td>功能增强、性能提升</td><td>&nbsp;</td></tr><tr><td>默认不使用 bolt 线程池，减少上下文切换。<br><br> ioGame17：<br> netty --&gt; bolt 线程池 --&gt; ioGame 线程池。<br><br> ioGame21：<br> 1. netty --&gt; ioGame 线程池。<br> 2. 部分业务将直接在 netty 线程中消费业务。<br><br> 文档 - <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x" target="_blank">ioGame 线程相关</a></td><td>✅</td><td>性能提升</td><td>&nbsp;</td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq" target="_blank">全链路调用日志跟踪</a>；日志增强 traceId</td><td>✅</td><td>功能增强</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F230" target="_blank">#230</a></td></tr><tr><td>移除文档自动生成，改为由开发者调用触发。</td><td>✅</td><td>整理</td><td>&nbsp;</td></tr><tr><td>移除过期代码</td><td>✅</td><td>整理</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F239" target="_blank">#237</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33" target="_blank">分布式事件总线</a><br><br> 可以代替 redis pub sub 、 MQ ，并且具备全链路调用日志跟踪，这点是中间件产品做不到的。</td><td>✅</td><td>功能增强</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F228" target="_blank">#228</a></td></tr><tr><td>日志库使用新版本 slf4j 2.0</td><td>✅</td><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffury.apache.org%2F" target="_blank">Fury</a> 支持。<br><br> Fury 是一个基于 JIT 动态编译和零拷贝的高性能多语言序列化框架</td><td>&nbsp;</td><td>在计划内，不一定会支持</td><td>因在发布 ioGame21 时，Fury 还未发布稳定版本，所以这里暂不支持。</td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Flxqbnb%23bJ6T8" target="_blank">心跳响应前的回调</a></td><td>✅</td><td>功能增强</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F234" target="_blank">#234</a></td></tr><tr><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz%23HQYmm" target="_blank">FlowContext</a> 增加更新、获取元信息的便捷使用</td><td>✅</td><td>功能增强</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F236" target="_blank">#236</a></td></tr></tbody></table><h3>ioGame21 首发内容简介</h3><p>在 ioGame21 中，该版本做了数百项优化及史诗级增强。</p><ul><li>文档方面</li><li>线程管理域方面的开放与统一、减少线程池上下文切换</li><li>FlowContext 得到了<strong>史诗级</strong>的增强。</li><li>新增通讯方式 - 分布式事件总线</li><li>游戏对外服方面增强</li><li>全链路调用日志跟踪</li><li>各逻辑服之间通信阻塞部分，改为使用虚拟线程, 避免阻塞业务线程，从而使得框架的吞吐量得到了巨大的提升。</li></ul><h4>游戏对外服相关</h4><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F76" target="_blank">#76</a> 游戏对外服缓存</p><p>更多的介绍，请阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkhg23pvbh59a7spm" target="_blank">游戏对外服缓存</a>文档。</p><p>游戏对外服缓存，可以将一些热点的业务数据缓存在游戏对外服中，玩家每次访问相关路由时，会直接从游戏对外服的内存中取数据。这样可以避免反复请求游戏逻辑服，从而达到性能的超级提升；</p><pre><code class="language-java">private static void extractedExternalCache() {
    // 框架内置的缓存实现类
    DefaultExternalCmdCache externalCmdCache = new DefaultExternalCmdCache();
    // 添加到配置中
    ExternalGlobalConfig.externalCmdCache = externalCmdCache;
    // 配置缓存 3-1
    externalCmdCache.addCmd(3, 1);
}
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F213" target="_blank">#213</a> 游戏对外服开放自定义协议</p><p>更多的介绍，请阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fxeokui" target="_blank">游戏对外服的协议说明</a>文档。</p><p>开发者可自定义游戏对外服协议，用于代替框架默认的 ExternalMessage 公共对外协议。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F234" target="_blank">#234</a> 心跳响应前的回调</p><p>更多的介绍，请阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuueq3i" target="_blank">心跳设置与心跳钩子</a>文档。</p><p>在部分场景下，在响应心跳前可添加当前时间，使得客户端与服务器时间同步。</p><pre><code class="language-java">@Slf4j
public class DemoIdleHook implements SocketIdleHook {
    ... ... 省略部分代码
    volatile byte[] timeBytes;

    public DemoIdleHook() {
        updateTime();
        // 每秒更新当前时间
        TaskKit.runInterval(this::updateTime, 1, TimeUnit.SECONDS);
    }

    private void updateTime() {
        LongValue data = LongValue.of(TimeKit.currentTimeMillis());
        // 避免重复序列化，这里提前序列化好时间数据
        timeBytes = DataCodecKit.encode(data);
    }

    @Override
    public void pongBefore(BarMessage idleMessage) {
        // 把当前时间戳给到心跳接收端
        idleMessage.setData(timeBytes);
    }
}
</code></pre><h4>FlowContext</h4><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F235" target="_blank">#235</a> FlowContext 增加通信能力，提供同步、异步、异步回调的便捷使用</p><p>更多的介绍，请阅读 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz" target="_blank">FlowContext</a> 文档。</p><pre><code class="language-java">// 跨服请求 - 同步、异步回调演示
void invokeModuleMessage() {
    // 路由、请求参数
    ResponseMessage responseMessage = flowContext.invokeModuleMessage(cmdInfo, yourData);
    RoomNumMsg roomNumMsg = responseMessage.getData(RoomNumMsg.class);
    log.info("同步调用 : {}", roomNumMsg.roomCount);

    // --- 此回调写法，具备全链路调用日志跟踪 ---
    // 路由、请求参数、回调
    flowContext.invokeModuleMessageAsync(cmdInfo, yourData, responseMessage -&gt; {
        RoomNumMsg roomNumMsg = responseMessage.getData(RoomNumMsg.class);
        log.info("异步回调 : {}", roomNumMsg.roomCount);
    });
}

// 广播
public void broadcast(FlowContext flowContext) {
    // 全服广播 - 路由、业务数据
    flowContext.broadcast(cmdInfo, yourData);

    // 广播消息给单个用户 - 路由、业务数据、userId
    long userId = 100;
    flowContext.broadcast(cmdInfo, yourData, userId);

    // 广播消息给指定用户列表 - 路由、业务数据、userIdList
    List&lt;Long&gt; userIdList = new ArrayList&lt;&gt;();
    userIdList.add(100L);
    userIdList.add(200L);
    flowContext.broadcast(cmdInfo, yourData, userIdList);

    // 给自己发送消息 - 路由、业务数据
    flowContext.broadcastMe(cmdInfo, yourData);

    // 给自己发送消息 - 业务数据
    // 路由则使用当前 action 的路由。
    flowContext.broadcastMe(yourData);
}
</code></pre><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F236" target="_blank">#236</a> FlowContext 增加更新、获取元信息的便捷使用</p><p>更多的介绍，请阅读 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzz8xiz" target="_blank">FlowContext</a> 文档。</p><pre><code class="language-java">void test(MyFlowContext flowContext) {
    // 获取元信息
    MyAttachment attachment = flowContext.getAttachment();
    attachment.nickname = "渔民小镇";

    // [同步]更新 - 将元信息同步到玩家所在的游戏对外服中
    flowContext.updateAttachment();

    // [异步无阻塞]更新 - 将元信息同步到玩家所在的游戏对外服中
    flowContext.updateAttachmentAsync();
}

public class MyFlowContext extends FlowContext {
    MyAttachment attachment;

    @Override
    @SuppressWarnings("unchecked")
    public MyAttachment getAttachment() {
        if (Objects.isNull(attachment)) {
            this.attachment = this.getAttachment(MyAttachment.class);
        }

        return this.attachment;
    }
}
</code></pre><h4>线程相关</h4><p>更多的介绍，请阅读 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x" target="_blank">ioGame 线程相关</a>文档。</p><p>虚拟线程支持，各逻辑服之间通信阻塞部分使用虚拟线程来处理，避免阻塞业务线程。</p><p>默认不使用 bolt 线程池，减少上下文切换。ioGame21 业务消费的线程相关内容如下：</p><ol><li>netty --&gt; ioGame 线程池。</li><li>部分业务将直接在 netty 线程中消费业务。</li></ol><p>在 ioGame21 中，框架内置了 3 个线程执行器管理域，分别是</p><ol><li>UserThreadExecutorRegion ，用户线程执行器管理域。</li><li>UserVirtualThreadExecutorRegion ，用户虚拟线程执行器管理域。</li><li>SimpleThreadExecutorRegion ，简单的线程执行器管理域。</li></ol><p><strong>从工具类中得到与用户（玩家）所关联的线程执行器</strong></p><pre><code class="language-java">@Test
public void userThreadExecutor() {
    long userId = 1;

    ThreadExecutor userThreadExecutor = ExecutorRegionKit.getUserThreadExecutor(userId);

    userThreadExecutor.execute(() -&gt; {
        // print 1
        log.info("userThreadExecutor : 1");
    });

    userThreadExecutor.execute(() -&gt; {
        // print 2
        log.info("userThreadExecutor : 2");
    });
}

@Test
public void getUserVirtualThreadExecutor() {
    long userId = 1;

    ThreadExecutor userVirtualThreadExecutor = ExecutorRegionKit.getUserVirtualThreadExecutor(userId);

    userVirtualThreadExecutor.execute(() -&gt; {
        // print 1
        log.info("userVirtualThreadExecutor : 1");
    });

    userVirtualThreadExecutor.execute(() -&gt; {
        // print 2
        log.info("userVirtualThreadExecutor : 2");
    });
}

@Test
public void getSimpleThreadExecutor() {
    long userId = 1;

    ThreadExecutor simpleThreadExecutor = ExecutorRegionKit.getSimpleThreadExecutor(userId);

    simpleThreadExecutor.execute(() -&gt; {
        // print 1
        log.info("simpleThreadExecutor : 1");
    });

    simpleThreadExecutor.execute(() -&gt; {
        // print 2
        log.info("simpleThreadExecutor : 2");
    });
}
</code></pre><p><strong>从 FlowContext 中得到与用户（玩家）所关联的线程执行器</strong></p><pre><code class="language-java">void executor() {
    // 该方法具备全链路调用日志跟踪
    flowContext.execute(() -&gt; {
        log.info("用户线程执行器");
    });

    // 正常提交任务到用户线程执行器中
    // getExecutor() 用户线程执行器
    flowContext.getExecutor().execute(() -&gt; {
        log.info("用户线程执行器");
    });
}

void executeVirtual() {
    // 该方法具备全链路调用日志跟踪
    flowContext.executeVirtual(() -&gt; {
        log.info("用户虚拟线程执行器");
    });

    // 正常提交任务到用户虚拟线程执行器中
    // getVirtualExecutor() 用户虚拟线程执行器
    flowContext.getVirtualExecutor().execute(() -&gt; {
        log.info("用户虚拟线程执行器");
    });

    // 示例演示 - 更新元信息（可以使用虚拟线程执行完成一些耗时的操作）
    flowContext.executeVirtual(() -&gt; {
        log.info("用户虚拟线程执行器");
        
        // 更新元信息
        flowContext.updateAttachment();
        
        // ... ... 其他业务逻辑
    });
}
</code></pre><h4>日志相关</h4><p>日志库使用新版本 slf4j 2.x</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F230" target="_blank">#230</a> 支持全链路调用日志跟踪；</p><p>更多的介绍，请阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq" target="_blank">全链路调用日志跟踪</a>文档。</p><p><strong>开启 traceId 特性</strong></p><p>该配置需要在游戏对外服中设置，因为游戏对外服是玩家请求的入口。</p><pre><code class="language-java">// true 表示开启 traceId 特性
IoGameGlobalConfig.openTraceId = true;
</code></pre><p>将<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fxhvpqy" target="_blank">全链路调用日志跟踪插件</a> TraceIdInOut 添加到业务框架中，表示该游戏逻辑服需要支持全链路调用日志跟踪。如果游戏逻辑服没有添加该插件的，表示不需要记录日志跟踪。</p><pre><code class="language-java">BarSkeletonBuilder builder = ...;
// traceId
TraceIdInOut traceIdInOut = new TraceIdInOut();
builder.addInOut(traceIdInOut);
</code></pre><h4>分布式事件总线</h4><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgame-town%2FioGame%2Fissues%2F228" target="_blank">#228</a> 分布式事件总线是新增的通讯方式，可以代替 redis pub sub 、 MQ ...等中间件产品；分布式事件总线具备全链路调用日志跟踪，这点是中间件产品所做不到的。</p><p>文档 - <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33" target="_blank">分布式事件总线</a></p><h4>小结</h4><p>在 ioGame21 中，该版本做了数百项优化及史诗级增强。</p><ul><li>在线文档方面</li><li>线程管理域方面的开放与统一、减少线程池上下文切换</li><li>FlowContext 增强</li><li>新增通讯方式 - 分布式事件总线</li><li>游戏对外服方面增强</li><li>全链路调用日志跟踪</li></ul><h4>ioGame17 迁移到 ioGame21</h4><p>文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fhcgsfobyoph9r74r" target="_blank">17 迁移到 ioGame21</a></p><p>&nbsp;</p><hr><div><h3><span style="color:#40485b">ioGame 使用趋势数据</span></h3><p style="margin-left:0; margin-right:0"><span>关注 ioGame 的游戏服务器开发者持续增多，</span><strong><span style="color:#df2a3f">2022-09 ~ 至今</span></strong><span style="color:#000000">各月</span><span>的统计数据；</span></p><p style="margin-left:0; margin-right:0"><span>这里的统计信息是关于开发者关注 ioGame 框架相关的，从统计数据中可以看出，由于 ioGame 上手简单，功能强大等优点，得到了众多开发者的关注。如果你想知道 ioGame 有没有人在使用，可以先到这里看下统计数据、开发者的评价与讨论。</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgpxk93%23TwVa8" target="_blank"><span>https://www.yuque.com/iohao/game/gpxk93#TwVa8</span></a></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span>这里展示了每月的统计数据，统计数据来源于语雀后台，这些数据都是</span><strong><span style="color:#df2a3f">真实的、客观存在的、活的</span></strong><span>。</span></p><div><blockquote><p style="margin-left:0; margin-right:0"><strong><span style="color:#df2a3f">因为成本的原因，某宝某多还没有出现能提供这种服务的商家，所以这样的统计数据也更具真实性。</span></strong></p></blockquote></div><p style="margin-left:0; margin-right:0"><span>通过统计数据，我们可以看到每天会有很多开发者在访问 ioGame 的在线文档，并且这些统计数据不是来源于口嗨的，也不是主观创造的。</span></p><p style="margin-left:0; margin-right:0"><span>所以，还在犹豫要不要使用 ioGame 的开发者们，更应该讨论的是「为什么这些开发者会选择使用 ioGame」，而不是 ioGame 有没有人在使用的问题。</span></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao" target="_blank"><span>点击我，到语雀后台查看 ioGame 的数据</span></a></p><p style="margin-left:0; margin-right:0"><img alt="" height="424" src="https://foruda.gitee.com/images/1707826063452005074/b4b96239_5475.png" width="680" referrerpolicy="no-referrer"></p></div><hr><div><h3><strong><span style="color:#222222">最小依赖</span></strong></h3><p style="margin-left:0; margin-right:0"><span>ioGame 已经上传到中央仓库，建议开发者的 maven 仓库代理使用原生的或腾讯云的代理，目前不推荐阿里云的代理。</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fswt3ls%23Amq4K" target="_blank"><span>腾讯云代理设置可参考这里</span></a><span>。</span></p><p style="margin-left:0; margin-right:0"><span>ioGame 最新版本查看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fab15oe" target="_blank"><span>https://www.yuque.com/iohao/game/ab15oe</span></a></p><p style="margin-left:0; margin-right:0"><span>ioGame 是轻量级的网络游戏服务器框架，</span><strong><span>不依赖任何第三方</span></strong><span>中间件或数据库</span><strong><span>就能支持集群、分布式</span></strong><span>，只需要 java 环境就可以运行。此时，你只需一个依赖即可获得整个框架，并同时支持开头介绍的全部功能特性。</span></p><pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.iohao.game&lt;/groupId&gt;
    &lt;artifactId&gt;run-one-netty&lt;/artifactId&gt;
    &lt;version&gt;${ioGame.version}&lt;/version&gt;
&lt;/dependency&gt;</code></pre><div>
  &nbsp;
 </div></div><p>&nbsp;</p><hr><h2>框架整体预览导图</h2><p><img alt="" height="468" src="https://foruda.gitee.com/images/1683534421248294819/72c4dfdb_5475.png" width="620" referrerpolicy="no-referrer"></p><p>&nbsp;</p><hr><h2>ioGame 网络游戏服务器框架简介</h2><p>&nbsp;</p><ul><li>无锁异步化、事件驱动的架构设计；轻量级，无需依赖任何第三方中间件或数据库就能支持集群、分布式</li><li>通过 ioGame 可以很容易的搭建出一个集群无中心节点、集群自动化、多进程的分布式游戏服务器</li><li>包体小、启动快、内存占用少、更加的节约、无需配置文件、提供了优雅的路由访问权限控制</li><li>让开发者使用一套业务代码，无需改动，支持多种连接方式：WebSocket、TCP、UDP</li><li>让开发者用一套业务代码，能轻松切换和扩展不同的通信协议：Protobuf、JSON</li><li>近原生的性能；业务框架在单线程中平均每秒可以执行 1152 万次业务逻辑</li><li>代码即联调文档、JSR380 验证、断言 + 异常机制 = 更少的维护成本</li><li>框架具备智能的同进程亲和性；开发中，业务代码可定位与跳转</li><li>架构部署灵活性与多样性：既可相互独立，又可相互融合</li><li>可同时与同类型的多个游戏逻辑服通信并得到数据</li><li>逻辑服之间可相互跨进程、跨机器进行通信</li><li>支持玩家对游戏逻辑服进行动态绑定</li><li>能与任何其他框架做融合共存</li><li>对 webMVC 开发者友好</li><li>无 spring 强依赖</li><li>零学习成本</li><li>javaSE</li></ul><p><span>你是否想要开发一个</span><strong><span>高性能、稳定、易用、自带负载均衡、避免类爆炸设计、可跨进程跨机器通信、集群无中心节点、集群自动化、有状态多进程的分布式的</span></strong><span>网络编程服务器呢？如果是的话，这里向你推荐一个由 java 语言编写的网络编程框架 ioGame。下面将会从多个方面来对框架做一些简单的介绍。</span></p><div><p style="margin-left:0; margin-right:0"><span>ioGame 是一个</span><span style="color:#262626">轻量级的</span><span>网络编程框架，适用于</span><strong><span style="color:#df2a3f">网络游戏服务器、物联网、内部系统</span></strong><span>及各种需要长连接的场景；</span></p><div><blockquote><p style="margin-left:0; margin-right:0"><span>ioGame 有以下特点：</span></p><ul><li><span>无锁异步化、事件驱动的架构设计</span></li><li><span>同时支持 TCP、WebSocket、UDP 多种连接方式，并且可扩展</span></li><li><span>支持 protobuf、json 等不同的通信协议</span></li><li><span>集群无中心节点、集群自动化、分布式的设计</span></li><li><span style="color:#000000">真轻量级，不依赖任何第三方中间件或数据库就能支持集群、分布式</span></li><li><span>提供多种通讯方式，且逻辑服之间可以相互跨机器通信</span></li><li><span>框架为开发者提供了同步、异步、异步回调的方法，用于逻辑服之间的相互访问</span></li><li><span>ioGame 是纯 javaSE 的，使得 ioGame 能与其他框架方便的进行集成、融合；如 spring ...等</span></li><li><span>学习成本低，开发体验好</span></li><li><span>支持多服单进程、多服多进程的启动和部署方式</span></li><li><span>提供游戏文档生成的辅助功能</span></li><li><span>包体小、启动快、内存占用少</span></li><li><span>提供优雅的路由访问权限控制</span></li><li><span>提供了灵活的线程扩展、设置</span></li><li><span>具备智能的同进程亲和性</span></li><li><span>具备全链路调用日志跟踪特性</span></li><li><span>业务框架提供了插件机制，插件是可插拨、可扩展的</span></li><li><span>JSR380 验证、断言 + 异常机制 = 更少的维护成本</span></li><li><span>action 支持自动装箱、拆箱基础类型，用于解决</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>协议碎片</span></a><span>的问题</span></li></ul></blockquote></div><p style="margin-left:0; margin-right:0"><span>ioGame 是一个专为网络编程设计的</span><span style="color:#262626">轻量级</span><span>框架，它可以帮助你快速地搭建和运行自己的网络服务器。ioGame 适用于</span><strong><span style="color:#df2a3f">网络游戏服务器、物联网、内部系统</span></strong><span>及各种需要长连接的场景。如各种类型和规模的网络游戏，无论是 H5、手游还是 PC 游戏，无论是简单的聊天室，还是复杂的</span><strong><span style="color:#262626">全球同服</span></strong><span style="color:#262626">、回合制游戏、策略游戏、放置休闲游戏、即时战斗、</span><span>MMORPG 等，ioGame 都可以满足你的需求。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">ioGame 在打包、内存占用、启动速度等方面也是优秀的。打 jar 包后大约 </span><strong><span style="color:#262626">15MB</span></strong><span style="color:#262626">，应用通常会在 </span><strong><span style="color:#262626">0.x 秒</span></strong><span style="color:#262626">内完成启动，内存占用小。详细请看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzm6qg2%23LF8Qh" target="_blank"><span>快速从零编写服务器完整示例</span></a><span style="color:#262626">。</span></p><p style="margin-left:0; margin-right:0"><span>在生态融合方面，ioGame 可以很方便的与 spring 集成（5 行代码）；除了 spring 外，还能与任何其他的框架做</span><strong><span>融合</span></strong><span>，如：solon&nbsp;</span><span>... 等，从而使用其他框架的相关生态。</span></p><p style="margin-left:0; margin-right:0"><span>在轻量级方面，ioGame </span><strong><span style="color:#df2a3f">不依赖任何第三方</span></strong><span>中间件或数据库</span><strong><span style="color:#df2a3f">就能支持集群、分布式</span></strong><span>，只需要 java 环境就可以运行。这意味着在使用上简单了，在部署上也为企业减少了部署成本、维护难度。使用 ioGame 时，只需一个依赖即可获得整个框架，而无需在安装其他服务，如： Nginx、Redis、MQ、Mysql、ZooKeeper、Protobuf 协议编译工具...等。</span></p><p style="margin-left:0; margin-right:0"><span>ioGame 具备</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzurusq" target="_blank"><span>全链路调用日志跟踪</span></a><span>特性，这在分布式下非常的实用。该特性为每个请求分配一个唯一标识，并记录在日志中，通过唯一标识可以快速的在日志中过滤出指定请求的信息。ioGame 提供的全链路调用日志跟踪特性更是强大，</span><strong><span>支持跨机器、跨进程</span></strong><span>。简单的说，从玩家的请求进来到结束，无论该请求经过了多少个游戏逻辑服，都能精准记录。</span></p><p style="margin-left:0; margin-right:0"><span>在通讯方式方面，大部分框架只能支持推送（广播）这一类型的通讯方式；ioGame 则提供了多种类型的通讯方式，通过对各种通讯方式的组合使用，可以简单完成以往难以完成的工作，并且这些通讯方式都支持跨进程、跨机器通信，且具备全链路调用日志跟踪。这些通讯方式分别是</span></p><ol><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fkrzxcmgoispw0gl8" target="_blank"><span>请求响应</span></a><span>（单次请求处理）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fqv4qfo" target="_blank"><span>广播</span></a><span>（推送）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fanguu6" target="_blank"><span>单个逻辑服间的相互通讯</span></a><span>（可跨机器通信、可跨进程通信）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Frf9rb9" target="_blank"><span>与同类型多个逻辑服相互通讯</span></a><span>（可跨多个机器通信、可跨多个进程通信）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzgaldoxz6zgg0tgn" target="_blank"><span>脉冲通讯</span></a><span>（可跨多个机器通信、可跨多个进程通信）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmxz33" target="_blank"><span>分布式事件总线</span></a><span>（类似 MQ、Redis 发布订阅机制；可跨多个机器通信、可跨多个进程通信）</span></li></ol><p style="margin-left:0; margin-right:0"><span>在编码风格上，ioGame 为开发者提供了类 MVC 的编码风格（无入侵的 Java Bean ），这种设计方式很好的</span><strong><span>避免了类爆炸</span></strong><span>。同时，框架为开发者提供了同步、异步、异步回调的方法，用于逻辑服之间的相互访问；这使得开发者所编写的代码会非常的优雅，并且具备全链路调用日志跟踪。</span></p><p style="margin-left:0; margin-right:0"><span>从 ioGame21 开始，框架添加了虚拟线程的相关支持。各逻辑服之间通信阻塞部分使用虚拟线程，这样可以很好的避免阻塞业务线程，并大幅提高了框架的吞吐量。</span></p><p style="margin-left:0; margin-right:0"><span>在线程安全方面，框架为开发者解决了单个玩家的</span><strong><span>并发问题</span></strong><span>；即使玩家重新登录后，也会使用相同的线程来消费业务，并推荐使用</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmfy1k" target="_blank"><span>领域事件</span></a><span>来解决同一房间或业务内多个玩家的并发问题。</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Feixd6x" target="_blank"><span>框架在线程的扩展性</span></a><span>上提供了友好的支持，开发者可以很容易的编写出无锁并发代码，这得益于 ioGame 独有的线程执行器设计与扩展。换句话说，你不会因为并发问题烦恼。</span></p><p style="margin-left:0; margin-right:0"><span>在无锁并发方面，ioGame 提供了优雅、独特的线程执行器设计。通过该特性，开发者能轻易的编写出无锁高并发的代码。</span></p><p style="margin-left:0; margin-right:0"><span>在连接方式方面，ioGame 允许开发者</span><strong><span>使用一套业务代码</span></strong><span>，同时支持多种连接方式，无需进行任何修改。ioGame 已经支持了 TCP、WebSocket 和 UDP 连接方式，并且也支持在这几种连接方式之间进行灵活切换。连接方式是可扩展的，并且扩展操作也很简单，这意味着之后如果支持了 KCP，无论你当前项目使用的是 TCP、WebSocket 还是 UDP，都可以切换成 KCP；注意了，即使切换到 KCP 的连接方式，现有的业务代码也无需改变。</span></p><p style="margin-left:0; margin-right:0"><span>在通信协议方面，ioGame 让开发者</span><strong><span>用一套业务代码</span></strong><span>，就能轻松</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuq2zrltrc7to27bt" target="_blank"><span>切换和扩展不同的通信协议</span></a><span>，如 Protobuf、JSON 等。只需一行代码，就可以从 Protobuf 切换到 JSON，无需改变业务方法。</span></p><p style="margin-left:0; margin-right:0"><span>在增减协议方面，ioGame 可以让你在</span><strong><span>新增或减少协议</span></strong><span>时，</span><strong><span>无需重启</span></strong><span>游戏对外服与 Broker（游戏网关）；这样既能避免玩家断线，又能避免因新增、减少协议而重启所有机器的痛点。</span></p><p style="margin-left:0; margin-right:0"><span>在协议碎片方面，action 支持自动装箱、拆箱基础类型特性，用于解决</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>协议碎片</span></a><span>的问题。同时该特性除了能使你的业务代码更加清晰以外，还能大幅提高开发者在该环节的生产力。</span></p><p style="margin-left:0; margin-right:0"><span>在集群方面，ioGame 的 Broker （游戏网关）采用无中心节点、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fqmo56c" target="_blank"><span>自动化的集群设计</span></a><span>，所有节点平等且自治，不存在单点故障。集群能够</span><strong><span>自动管理和弹性扩缩</span></strong><span>，节点加入或退出时，能够自动保证负载均衡和数据一致性，不影响服务可用性。</span></p><p style="margin-left:0; margin-right:0"><span>在分布式方面，ioGame 的逻辑服使用了分布式设计思想，将服务器分为</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwotnhl" target="_blank"><span>游戏对外服</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fensevx" target="_blank"><span>游戏逻辑服</span></a><span>等不同层次，并且每一层都有明确的职责和接口。这样可以提高代码可读性和可维护性，并且方便进行</span><strong><span>水平扩展</span></strong><span>。</span></p><p style="margin-left:0; margin-right:0"><span>在学习成本方面，ioGame 的学习成本非常低，可以说是</span><strong><span>零学习成本</span></strong><span>，即使没有游戏编程经验，也能轻松上手。开发者只需掌握普通的 java 方法或 webMVC 相关知识，就能用框架开发业务。框架不要求开发者改变编码习惯，而是自身适应开发者的需求。</span></p><p style="margin-left:0; margin-right:0"><span>在</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Funp26u" target="_blank"><span>同进程亲和性</span></a><span>方面，在同一进程内，不同 Netty 实例之间的通信，是通过内存进行传输的，不需要经过网络传输，数据传输速度极快。同进程亲和性指的是，优先访问同进程内的游戏逻辑服，当同进程内没有能处理请求的游戏逻辑服时，才会去其他进程或机器中查找能处理请求的游戏逻辑服；简单点说，框架对于请求的处理很智能，会优先将请求给同进程内的逻辑服消费。</span></p><p style="margin-left:0; margin-right:0"><span>在开发体验方面，ioGame 非常注重开发者的开发体验；框架提供了 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fghng6g" target="_blank"><span>JSR380 验证</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Favlo99" target="_blank"><span>断言 + 异常机制</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fpf3sx0" target="_blank"><span>业务代码定位</span></a><span>，action 支持自动装箱、拆箱基础类型，用于解决</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>协议碎片</span></a><span>的问题 ...等。诸多丰富的功能，使得开发者的业务代码更加的清晰、简洁；</span></p><p style="margin-left:0; margin-right:0"><span>业务框架提供了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fbsgvzglvlr5tenao" target="_blank"><span>插件</span></a><span>机制，插件是可插拨、可扩展的。框架内置提供了 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fpf3sx0" target="_blank"><span>DebugInOut</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fznapzm1dqgehdyw8" target="_blank"><span>action 调用统计</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzoqabk4gez3bckis" target="_blank"><span>业务线程监控插件</span></a><span>、</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fumzk2d6lovo4n9gz" target="_blank"><span>各时间段调用统计插件</span></a><span>...等插件；不同的插件提供了不同的关注点，比如我们可以使用调用、监控等插件相互配合，可以让我们在开发阶段就知道</span><strong><span>是否存在性能问题</span></strong><span>。合理利用好各个插件，可以让我们在开发阶段就能知道问题所在，提前发现问题，提前预防问题。</span></p><p style="margin-left:0; margin-right:0"><span>在分布式开发体验方面，通常在开发分布式应用时是需要启动多个进程的。这会让调试与排查问题变得非常困难，从而降低开发者的效率、增加工作量等，这也是很多框架都</span><strong><span>解决不了的问题</span></strong><span>，但 ioGame 做到了！ioGame 支持多服单进程的启动方式，这使得开发者在开发和调试分布式系统时更加简单。</span></p><p style="margin-left:0; margin-right:0"><span>与前端对接联调方面，ioGame 提供了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Firth38" target="_blank"><span>游戏文档生成</span></a><span>的辅助功能，可以做到</span><strong><span>代码即对接文档</span></strong><span>。简单地说，当业务代码编写完后，框架会自动生成最新的文档。如果没有游戏文档的生成，那么你将要抽出一些时间来编写、维护对接文档的工作，而且当团队人数多了之后，文档就会很乱、不同步、不是最新的、忘记更新等情况就会出现。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">在部署方面，ioGame 支持</span><strong><span style="color:#262626">多服单进程</span></strong><span style="color:#262626">的方式部署，也支持</span><strong><span style="color:#262626">多服多进程</span></strong><span style="color:#262626">多机器的方式部署；在部署方式上可以随意的切换而不需要更改代码。日常中我们可以按照单体思维开发，到了生产可以选择使用多进程的方式部署。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">在安全方面，所有的游戏逻辑服</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fcklv8p%23NQ6Oc" target="_blank"><span>不需要开放端口，天然地避免了扫描攻击</span></a><span style="color:#262626">。由于不需要为每个逻辑服分配独立的端口，那么我们在使用诸如云服务器之类的服务时，就不需要担心端口开放权限的问题了。别小看这一个环节，通常这些小细节最浪费开发者的时间。由于我们不需要管理这些 IP:Port，</span><strong><span style="color:#262626">这部分的工作量就自然地消失了</span></strong><span style="color:#262626">。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">在模拟客户端测试方面，ioGame 提供了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Ftc83ud" target="_blank"><span>压测&amp;模拟客户端请求</span></a><span style="color:#333333">模块。此模块是用于模拟客户端，简化模拟工作量，只需要编写对应请求与回调。除了可以模拟简单的请求外，通常还可以做一些复杂的请求编排，并支持复杂业务的压测。</span><strong><span style="color:#333333">与单元测试不同的是，该模块可以模拟真实的网络环境，并且在模拟测试的过程中与服务器的交互是可持续的、可互动的，同时也是支持自动化的</span></strong><span style="color:#333333">。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">在</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fzqgdv3g9if8w37vr" target="_blank"><span>架构灵活性</span></a><span style="color:#000000">方面，ioGame 的架构由三部分组成：1.游戏对外服、2.Broker（游戏网关）、3.游戏逻辑服；三者既可相互独立，又可相互融合。这意味着使用 ioGame 可以</span><strong><span style="color:#df2a3f">适应任何类型的游戏</span></strong><span style="color:#000000">，因为只需通过调整部署方式，就可以满足不同类型的游戏需求。在 ioGame 中进行这些调整工作非常简单，而且不会对现有代码产生不良影响。</span></p><p style="margin-left:0; margin-right:0"><span>开发者基于 ioGame 编写的项目模块，通常是条理清晰的，得益于框架对</span><strong><span>路由的合理设计</span></strong><span>，同时也为路由提供了优雅的</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fnap5y8p5fevhv99y" target="_blank"><span>访问权限控制</span></a><span>。当我们整理好这些模块后，对于其他开发者接管项目或后续的维护中，会是一个不错的帮助（</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fruaqza%2F%23OBwXQ" target="_blank"><span>模块的整理与建议</span></a><span>）。或许现阶段你感受不到这块的威力，随着你深入地使用实践就能体会到这么设计的诸多好处与优势。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#262626">开发者基于 ioGame 编写的项目，通常是语法简洁的、高性能的、低延迟的。框架最低要求使用 </span><strong><span style="color:#262626">JDK21</span></strong><span style="color:#262626">，这样即可以让项目享受到</span><strong><span style="color:#262626">分代 ZGC </span></strong><span style="color:#262626">带来的改进，还能享受语法上的简洁。分代 ZGC 远低于其</span><strong><span style="color:#262626">亚毫秒级</span></strong><span style="color:#262626">暂停时间的目标，</span><span>可以在不影响游戏速度的情况下，清理掉多余的内存；这样就不会出现卡顿或者崩溃的问题了，</span><span style="color:#262626">相当于在项目中变相的引入了一位 JVM 调优大师。</span></p><p style="margin-left:0; margin-right:0"><span>综上所述，ioGame 是一个非常适合网络游戏开发的框架。可以让你轻松地创建高性能、低延迟、易扩展的游戏服务器，并且节省时间和资源。如果你想要快速地开发出令人惊艳的网络游戏，请不要犹豫，立即选择 ioGame 吧！框架</span><span style="color:#262626">屏蔽了很多复杂且重复性的工作，并可为项目中的功能模块结构、开发流程等进行</span><strong><span style="color:#262626">清晰的组织定义</span></strong><span style="color:#262626">，减少了后续的项目维护成本。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">框架在开发、部署、压测&amp;模拟测试 ...等，各个阶段都提供了很好的支持。</span><span>相信你已经对 ioGame 有了一个初步的了解，虽然还有很多丰富的功能与特性没有介绍到，但你可以通过后续的实践过程中来深入了解。感谢你的阅读，并期待你使用 ioGame 来打造自己的游戏服务器。</span></p></div><hr><div><h2><span>ioGame 的组成</span></h2><p style="margin-left:0; margin-right:0"><span>ioGame 由 [</span><span style="color:#e8323c">网络通信框架</span><span>] 和 [</span><span style="color:#e8323c">业务框架</span><span>] 组成</span></p><ul><li><span style="color:#333333">网络通信框架：职责是各服务器之间的网络通信</span></li><li><span style="color:#333333">业务框架：职责是业务逻辑的处理方式和编写方式</span></li></ul><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">网络通信框架</span></strong></p><p style="margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sofastack.tech%2Fprojects%2Fsofa-bolt%2Foverview%2F" target="_blank"><span>SOFABolt</span></a><span> 是蚂蚁金融服务集团开发的一套基于 Netty 实现的网络通信框架。</span></p><ul><li><span>为了让 Java 程序员能将</span><span style="color:#e8323c">更多的精力放在</span><span>基于网络通信的</span><span style="color:#e8323c">业务逻辑实现上</span><span>，而不是过多的纠结于网络底层 NIO 的实现以及处理难以调试的网络问题，Netty 应运而生。</span></li><li><span>为了让中间件开发者能将更多的精力放在产品功能特性实现上，而不是重复地一遍遍制造通信框架的轮子，SOFABolt 应运而生。</span></li></ul><p style="margin-left:0; margin-right:0"><span>Bolt 名字取自迪士尼动画-闪电狗，是一个基于 Netty 最佳实践的</span><span style="color:#e8323c">轻量、易用、高性能、易扩展</span><span>的通信框架。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">业务框架</span></strong></p><p style="margin-left:0; margin-right:0"><span>如果说 </span><span>sofa-bolt</span><span> 是为了让 Java 程序员能</span><span style="color:#000000">将更多的精力放在基于网络通信的业务逻辑实现上</span><span>。而业务框架正是</span><span style="color:#e8323c">解决</span><span>业务逻辑</span><span style="color:#e8323c">如何方便实现</span><span>这一问题上。业务框架是游戏框架的一部分，职责是简化程序员的业务逻辑实现，业务框架使程序员能够快速的开始编写游戏业务。</span></p><p style="margin-left:0; margin-right:0"><span>业务框架对于每个 action （即业务的处理方法） 都是通过 </span><a href="https://www.oschina.net/p/reflectasm" target="_blank"><span>asm</span></a><span> 与 Singleton、Flyweight 、Command 等设计模式结合，对 action 的获取上通过 array 来得到，是一种近原生的方式。</span></p><hr><div><h2><span>架构简图</span></h2><p><img alt="" height="387" src="https://foruda.gitee.com/images/1708310869810934709/12963674_5475.jpeg" width="621" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><span style="color:#e8323c">通过 ioGame 你可以很容易的搭建出一个集群无中心节点、集群自动化、分布式的网络游戏服务器！</span></p><p style="margin-left:0; margin-right:0; text-align:left"><span>从图中可以看出，游戏网关支持以集群方式启动多个实例。这个设计选择了集群的方式，因为游戏网关通常是无状态的，主要作用是解耦各逻辑服之间的关系、负载均衡、调度和转发任务。</span></p><div><p style="margin-left:0; margin-right:0"><span>而游戏对外服、游戏逻辑服使用分布式设计，支持启动多个相同类型的服务。这意味着，当玩家数量增加时，我们可以轻松增加相应类型的游戏逻辑服以处理更多请求。</span></p><p style="margin-left:0; margin-right:0"><span>以游戏逻辑服为例，假设我们启动了两个 A 类型的游戏逻辑服，分别为 A-1 和 A-2。当玩家向 A 类型的游戏逻辑服发起多次请求时，游戏网关会使用默认的随机负载策略将请求分配给 A-1 和 A-2 来处理。</span></p><p style="margin-left:0; margin-right:0"><span>现在我们明白，游戏对外服和游戏逻辑服都支持动态增加和减少。无论未来玩家数量增加或减少，我们都能够轻松应对。架构是支持玩家无感知更新的，这得益于分布式设计。举例来说，如果 A 类型的游戏逻辑服需要增加一些新功能，我们可以启动 A-3、A-4 等已经支持了新功能的服务器，然后逐步将之前的 A-1 和 A-2 下线，从而实现了无感知的更新。</span></p><p style="margin-left:0; margin-right:0"><span>此外，框架还支持玩家</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fidl1wm" target="_blank"><span>动态绑定游戏逻辑服</span></a><span>；玩家与游戏逻辑服绑定后，之后的请求都由该游戏逻辑服来处理。</span></p><p style="margin-left:0; margin-right:0"><span>除了游戏之外，ioGame 也适用于物联网相关项目。只需将图中的玩家视为具体的设备，即使存在数亿个设备，ioGame 的架构也可以轻松支持。从 2022 年开始，已经有一些物联网公司开始采用这一解决方案，并得到了很好的体验。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span>ioGame 适用于</span><strong><span style="color:#df2a3f">网络游戏服务器、物联网、内部系统</span></strong><span>及各种需要长连接的场景；</span></p></div><table border="1" cellspacing="0" style="border-collapse:collapse; border:1px solid #d9d9d9; table-layout:fixed; width:583px"><tbody><tr><td style="background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>名称</span></p></td><td style="background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>扩展方式</span></p></td><td style="background-color:#f4f5f5; border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>职责</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>游戏对外服</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>分布式</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>与玩家连接、交互</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>游戏逻辑服</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>分布式</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>处理具体业务逻辑</span></p></td></tr><tr><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>Broker（游戏网关）</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>集群</span></p></td><td style="border-color:#d9d9d9; border-style:solid; border-width:1px; height:33px"><p style="margin-left:0; margin-right:0"><span>调度和转发任务；</span></p></td></tr></tbody></table><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span>无锁异步化与事件驱动的架构设计、集群无中心节点、自带负载均衡、分布式支持、可动态增减机器、避免类爆炸的设计；</span></p><hr><h2>通过 ioGame 可以使得游戏编程变得简单，下面是一个业务示例</h2><div><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">协议文件定义</span></strong></p><p style="margin-left:0; margin-right:0"><span>首先我们自定义一个协议文件，这个协议文件作为我们的业务载体描述。这个协议是纯 java 代码编写的，使用的是 jprotobuf，jprotobuf 是对 </span><span>google protobuf</span><span> 的简化使用，性能同等。</span></p><p style="margin-left:0; margin-right:0"><span>可以把这理解成 DTO、POJO、业务数据载体等，其主要目的是用于业务数据的传输；</span></p><pre><code class="language-java">/** 请求 */
@ProtobufClass
@FieldDefaults(level = AccessLevel.PUBLIC)
public class HelloReq {
    String name;
}</code></pre><p>&nbsp;</p></div><div><p style="margin-left:0; margin-right:0"><strong><span style="color:#e8323c">Action</span></strong></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">游戏服务器的编程，游戏服务器接收业务数据后，对业务数据进行处理；下面这段代码可以同时支持 TCP、WebSocket、UDP 通信方式。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#333333">示例代码中展示了玩家的请求与响应处理，还展示了跨服（跨进程、跨机器）的请求处理的示例。</span><span style="background-color:#f5f5f5; color:#262626">无入侵的 Java Bean。</span></p></div><pre><code class="language-java">@ActionController(1)
public class DemoAction {
    @ActionMethod(0)
    public HelloReq here(HelloReq helloReq) {
        // 业务数据
        var newHelloReq = new HelloReq();
        newHelloReq.name = helloReq.name + ", I'm here ";
        return newHelloReq;
    }

    // 注意，这个方法只是为了演示而写的；（ioGame21 开始支持）
    // 效果与上面的方法一样，只不过是用广播（推送）的方式将数据返回给请求方
@ActionMethod(0)
    public void here(HelloReq helloReq, FlowContext flowContext) {
        // 业务数据
        var newHelloReq = new HelloReq();
        newHelloReq.name = helloReq.name + ", I'm here ";

        flowContext.broadcastMe(newHelloReq);
    }

    // 跨服调用示例，下面分别展示了同步与异步回调的写法
    void testShowInvokeModule(FlowContext flowContext) {
        /*
         * 框架为跨服请求提供了同步、异步、异步回调的编码风格 api。（ioGame21 开始支持）
         */
        var cmdInfo = CmdInfo.of(1,0);
        var yourData = ... 你的请求参数
        
        // 跨服请求（异步回调 - 无阻塞）-- 路由、请求参数、回调。
        flowContext.invokeModuleMessageAsync(cmdInfo, yourData, responseMessage -&gt; {
            var helloReq = responseMessage.getData(HelloReq.class);
             // --- 此异步回调，具备全链路调用日志跟踪 ---
            log.info("异步回调 : {}", helloReq);
        });


        // 跨服请求（同步 - 阻塞）-- 路由、请求参数。
        ResponseMessage responseMessage = flowContext.invokeModuleMessage(cmdInfo, yourData);
        var helloReq = responseMessage.getData(HelloReq.class);
        log.info("同步调用 : {}", helloReq);
    }
}</code></pre><div><p style="margin-left:0; margin-right:0"><span>一个方法（here）在业务框架中表示一个 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fsqcevl" target="_blank"><span>Action</span></a><span>（一个业务动作）。</span></p><p style="margin-left:0; margin-right:0"><span>方法声明的参数是用于接收前端传入的业务数据，在方法 return 时，数据就可以被游戏前端接收到。程序员可以不需要关心业务框架的内部细节。</span></p><p style="margin-left:0; margin-right:0"><span>从上面的示例可以看出，这和普通的 java 类并无区别，同时这种设计方式</span><strong><span style="color:#fa8c16">避免了类爆炸</span></strong><span>。如果</span><span style="color:#e8323c">只负责编写游戏业务</span><span>，那么对于业务框架的学习可以</span><span style="color:#e8323c">到此为止</span><span>了。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">游戏编程就是如此简单</span><span>！</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span>问：我可以开始游戏服务</span></strong><strong><span style="color:#333333">器</span></strong><strong><span>的编程了吗？</span></strong></p><p style="margin-left:0; margin-right:0"><span>是的，你已经可以开始游戏服务</span><span style="color:#333333">器</span><span>的编程了。</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span>访问示例（控制枱）</span></strong></p><p style="margin-left:0; margin-right:0"><span>当我们访问 </span><span style="color:#e8323c">here </span><span>方法时（通常由游戏前端来请求），控制枱将会打印</span></p><pre><code>┏━━━━━ Debug. [(DemoAction.java:4).hello] ━━━━━ [cmd:1-0 65536] ━━━━━ [逻辑服 [xxx 逻辑服] - id:[76526c134cc88232379167be83e4ddfc]]
┣ userId: 1
┣ 参数: active : HelloReq(id=101, name=塔姆)
┣ 响应: HelloReq(name=塔姆, I'm here )
┣ 时间: 1 ms (业务方法总耗时)
┗━━━━━ [ioGameVersion] ━━━━━ [线程:User-8-2] ━━━━━━━ [traceId:956230991452569600] ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━</code></pre><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong><span>控制枱打印说明</span></strong></p><div><blockquote><p style="margin-left:0; margin-right:0"><span style="color:#e8323c">Debug. [(DemoAction.java:4).here]</span><span> : </span></p><p style="margin-left:0; margin-right:0"><span>&nbsp;&nbsp;&nbsp;&nbsp;表示执行业务的是 </span><span style="color:#000000">DemoAction</span><span> 类下的 </span><span style="color:#000000">here</span><span> 方法，</span><span style="color:#f5222d">4</span><span> 表示业务方法所在的代码行数。</span></p><p style="margin-left:0; margin-right:0"><span>&nbsp;&nbsp;&nbsp;&nbsp;在工具中点击控制枱的 </span><span style="color:#000000">DemoAction.java:4</span><span> 这条信息，就可以跳转到对应的代码中（</span><span style="color:#52c41a">快速导航到对应的代码</span><span>），这是一个开发良好体验的开始！</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">userId</span><span> : 当前发起请求的，用户 id。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">参数</span><span> : 通常是游戏前端传入的值。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">响应</span><span>：通常是业务方法返回的值 ，业务框架会把这个返回值推送到游戏前端。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">时间</span><span>：执行业务方法总耗时，我们可根据业务方法总耗时的时长来优化业务。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#f5222d">路由信息</span><span>：[cmd - subCmd]</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fsoxp4u" target="_blank"><span>路由</span></a><span>是唯一的访问地址。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">ioGameVersion</span><span>：表示当前所使用的 ioGame 版本。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">线程</span><span>：当前执行 action 所使用的线程。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">traceId</span><span>：全链路调用日志跟踪 id，每个请求唯一。（该特性在分布式下非常实用）</span></p><p style="margin-left:0; margin-right:0"><span style="color:#df2a3f">逻辑服</span><span>：当前游戏逻辑服与其 id</span></p></blockquote></div><p>&nbsp;</p><p style="margin-left:0; margin-right:0"><span>有了以上信息，游戏开发者可以很快的定位问题。如果没有可视化的信息，开发中会浪费很多时间在前后端的沟通上。问题包括：</span></p><ul><li><span>是否传参问题 （游戏前端说传了）</span></li><li><span>是否响应问题（游戏后端说返回了）</span></li><li><span>业务执行时长问题 （游戏前端说没收到响应， 游戏后端说早就响应了）</span></li></ul><p style="margin-left:0; margin-right:0"><span>其中</span><span style="color:#f5222d">代码导航</span><span>可以让开发者快速的跳转到业务类对应代码中，在多人合作的项目中，可以快速的知道业务经过了哪些方法的执行，使得我们可以快速的进行阅读或修改；</span></p><hr><div>
    &nbsp;
   </div><h2><span>框架内置的其他功能</span></h2><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>内置多种可选模块，可按需选择，以方便应用开发：</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fgmfy1k" target="_blank"><span>领域事件</span></a><span> （</span><span style="color:#333333">轻量级</span><span>单机最快 MQ -- </span><strong><span style="color:#333333">disruptor</span></strong><span style="color:#333333">；通过</span><span>领域事件模块，可为你的系统实现类似 Guava-EventBus、Spring 事件驱动模型 ApplicationEvent、业务解耦、规避并发、不阻塞主线程...等，各种浪操作）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fniflk0" target="_blank"><span>任务延时器</span></a><span> （将来某个时间可对任务进行执行、暂停、取消等操作，并不是类似 Quartz 的任务调度）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fekx6ve" target="_blank"><span>多环境切换</span></a><span> （不同运行环境下的配置支持）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fvpe2t6" target="_blank"><span>light-jprotobuf </span></a><span> （</span><span style="color:#333333">补足 jprotobuf 不能让多个对象在单个 .proto 源文件中生成的需求，并简化 jprotobuf 对源文件的注释</span><span>）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwz7af5" target="_blank"><span>分布式锁</span></a><span> (基于 Redisson 的简单实现)</span></li></ul><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>内置的其他功能：</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fuueq3i" target="_blank"><span>心跳相关</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fhv5qqh" target="_blank"><span>用户上线、离线相关的钩子方法</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwg6lk7" target="_blank"><span>UserSessions</span></a><span> （对所有用户 UserSession 的管理，统计在线用户等）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fwg6lk7" target="_blank"><span>UserSession</span></a><span> (与 channel 是 1:1 的关系，可取到对应的 userId、channel 等信息。)</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Ftywkqv" target="_blank"><span>登录相关</span></a><span>（提供重复登录、顶号等相关增强功能）</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.yuque.com%2Fiohao%2Fgame%2Fieimzn" target="_blank"><span>业务参数基础类型，自动装箱、拆箱</span></a><span>（解决协议碎片）</span></li></ul><hr><h2><span>适合人群？</span></h2><ol><li><span style="color:#333333">长期从事 web 内部系统开发人员， 想了解游戏的</span></li><li><span style="color:#333333">刚从事游戏开发的</span></li><li><span style="color:#333333">未从事过游戏开发，但却对其感兴趣的</span></li><li><span>对设计模式在实践中的应用和 sofa-bolt 有兴趣的学习者</span></li><li><span>可以接受新鲜事物的</span></li><li><span style="color:#40485b">想放弃祖传代码的</span></li></ol><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#333333">推荐实际编程经验一年以上的人员。</span></p></div><p><span style="background-color:#ffffff; color:#333333">ioGame&nbsp;</span><span style="background-color:#ffffff; color:#333333">提供了丰富的在线高质量使用文档，为你的团队助力，带上你们的小伙伴一起，这样就不用手把手的教了。</span></p></div></div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 03:23:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279153</guid>
            <link>https://www.oschina.net/news/279153</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌开源 Magika —— AI 驱动的文件类型检测工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌开源了由 AI 驱动的文件内容类型识别工具，声称能够在毫秒级内精确识别超过 100 种不同文件类型，无论是二进制文件还是文本文件。</p><p>在谷歌内部，Magika 被用于提升用户安全，帮助对 Gmail、Drive 和安全浏览中的文件进行安全检查和内容策略扫描。</p><p>Magika 是基于深度学习技术的文件类型识别系统，用于准确检测二进制和文本文件类型。在底层，Magika 采用定制的、高度优化的深度学习模型，即使在 CPU 上运行，也能在几毫秒内实现精确的文件识别。</p><p><strong>主要特性</strong></p><ul><li>AI 驱动的准确识别：Magika 使用了一个自定义的、高度优化的深度学习模型，使得它能够在几毫秒内准确识别出二进制和文本文件的类型，即便是在 CPU 上运行也能快速完成。</li><li>支持多种文件类型：它能够识别超过 100 种不同的文件类型，包括常见的文档、图片、代码文件和配置文件等。</li><li>高效性能：在包含 100 万文件的基准测试中，Magika 的识别性能比其他现有工具高出约 20%，尤其在处理文本文件（包括代码文件和配置文件）时，展现出更大的性能优势。</li><li>广泛应用：Magika 在 Google 内部被广泛用于提高用户安全，如通过改进的文件类型识别准确性，帮助路由 Gmail、Drive 和安全浏览文件到适当的安全和内容政策扫描器。</li><li>简单易用的安装和使用：Magika 可以作为 Python 库和独立的命令行工具安装，用户可以通过简单的命令行指令 pip install magika 进行安装，无需 GPU。</li><li>开源和易于集成：Magika 的代码和模型在 GitHub 上免费提供，并且采用 Apache2 许可证，便于其他软件改进其文件识别准确性和为研究人员提供大规模识别文件类型的可靠方法。</li><li>即将与 VirusTotal 集成：Magika 将与 VirusTotal 集成，提高平台分析和检测恶意代码的效率和准确性，有助于全球网络安全生态系统的建设。</li></ul><p><strong style="color:#1f2328">Magika 命令行输出示例</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f0a4182522f53b7a69907f3cff050925ff.png" referrerpolicy="no-referrer"></p><p><strong>Magika 性能表现</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a000ebca68cba1bd5474364a310062139b7.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f6613706bdb006061e8d8b1f16111cd4e17.png" referrerpolicy="no-referrer"></p><p>开源地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgoogle%2Fmagika" target="_blank">https://github.com/google/magika</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 02:56:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279147/magika-ai-powered-type-identification</guid>
            <link>https://www.oschina.net/news/279147/magika-ai-powered-type-identification</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DuckDB 0.10.0 发布，进程内 SQL OLAP 数据库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>DuckDB 是高性能的分析型关系数据库，旨在实现高效的数据分析。它易于安装，运行速度非常快，并且可以在进程内 (in-process) 运行。</p><p>DuckDB 背后的核心思想是保留 SQLite 的简单性和易用性，同时通过 R/Python 和 RDBMS 之间的快速分析处理和快速数据传输进行增强，以处理 OLAP 工作负载。</p><p><img src="https://oscimg.oschina.net/oscnet/up-caace40d3bce877cf9ab51b22de5f009173.png" referrerpolicy="no-referrer"></p><p>该项目被命名为 「DuckDB」，因为创建者认为鸭子具有弹性并且可以靠任何东西为生，类似于他们设想的数据库系统运行方式。</p><p>DuckDB 最新版本 "Fusca"&nbsp;<span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">0.10.0 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fduckdb%2Fduckdb%2Freleases%2Ftag%2Fv0.10.0" target="_blank">已发布</a></u>，主要变化如下：</span></p><ul><li>CSV 读取器重构</li><li>固定长度数组</li><li>多数据库支持</li><li>密钥管理器</li><li>临时内存管理器</li><li>自适应无损浮点压缩 (ALP)</li><li>CLI 改进</li></ul><p>其他变化包括破坏性的 SQL 改动、改进向后和向前兼容性，详情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fduckdb.org%2F2024%2F02%2F13%2Fannouncing-duckdb-0100.html" target="_blank">发布公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 19 Feb 2024 02:30:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279140/duckdb-0-10-0-released</guid>
            <link>https://www.oschina.net/news/279140/duckdb-0-10-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[资深架构师解读工行基于 Spring Boot 的专利]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><a href="https://www.oschina.net/news/279004">据国家知识产权局公告</a>，中国工商银行股份有限公司近日取得一项名为 「基于 SpringBoot 的 web 系统后端实现方法及装置 「的专利，授权公告号 CN112905176B，申请日期为 2021 年 2 月。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c517204b09e40c8390e687c6f85f1da3004.png" alt="" referrerpolicy="no-referrer"></p><p>这项专利很多程序员表示看不懂，或者直接认为是一个 CRUD 专利。我作为一个架构师，尝试从<strong>深到浅的解读一下这个专利</strong>，以及专利背后，工行架构师面临的架构困境。</p><p>从架构观点来看，此专利本质上「配置驱动的业务开发专利」，用于解决系统架构中易修改性，可观测的难题。</p><h2>架构师困境</h2><p>我们知道，架构主要目标是对软件系统分解成较小更容易实现的元素，如模块或者子系统，并能让这些元素协同完成业务需求，对于通常的程序员视角来说，架构貌似就是画几个框，然后连上线即可。</p><p>如下是一个分布式系统最简单的架构。看着很简单的俩框一线，但架构师却需要考虑的非常多，这也是架构师和普通程序员区别</p><p><img src="https://oscimg.oschina.net/oscnet/up-cc49cf84d4b55abce840f054f572acfdf4c.jpg" alt="" referrerpolicy="no-referrer"></p><p>A 服务的架构师需要考虑</p><ul><li>如果服务 B 不可用，服务 A 如何保证高可用.比如宕机，故障，虚机漂移，网络故障</li><li>如果服务 B 出现阻塞，性能下降，服务 A 如何保性能不受影响</li><li>服务 A 调用服务 B，是否一定需要等待服务 B 的响应，能否解耦 A 和 B 调用，避免前面 2 个问题</li><li>服务 A 如果是通过其寻址服务到 B，如果寻址服务不可用，如何调用服务 B</li></ul><p>B 服务作为服务提供者，架构师需要考虑的更多</p><ul><li>如何保证服务 B 支持大并发的操作</li><li>如何保证服务 B 支持大流量操作，甚至是不正常突发高流量下仍然可用，比如断网恢复后的高流量</li><li>如果服务 B 的下游不可用，如何给服务 A 提供可用接口</li><li>服务 B 的更新重启，会对服务 A 产生什么样的影响</li><li>如何可观测服务 B 的调用</li><li>如果服务 B 是公网服务，如何保证安全，数据被授权用户调用</li></ul><p>B 服务架构师还需要考虑意外情况，如服务 A 的 Bug</p><ul><li>服务 A 应该只调用服务 B 一次，但实际服务 A 调用了多次</li><li>服务 A 调用频率应该是 1 分钟一次，但实际 1 秒一次</li><li>服务 A 应该先后顺序调用 B 俩次不同接口，但调用顺序相反。这种可能是 A 的 Bug，或者是事件驱动架构里顺序问题。</li></ul><p>对这种「俩框一线」如此简单的架构，可以看到架构师相比于初级程序员，需要考虑较多，需要考虑 13+种情况。这种考虑其实也不是架构师挠秃头发想到的，而是基于技术架构的架构质量考虑的，有种说法，说是架构质量驱动了架构设计。</p><p>我认为现在的大部分系统都受到如下架构质量的驱动</p><ul><li>架构的高可用：是系统能够正常运行的时间比例。可用性 999，即 99.9% ,一年出故障时间为 8.76 小时。</li><li>架构的高性能：系统的响应时间. 相比单体系统，微服务架构，实现一个功能需要调用若干微服务，每个微服务性能影响了系统响应速度。 一个衡量性能的指标 TP95 TODO 和吞吐量。本书涉及单机，分布式性能优化的战术实现</li><li>架构的可观测：通常架构的可观测指的是能观测到系统运行情况，粗到监控服务的主机指标，或者每个服务调用次数，细到监测和统计某个关键逻辑调用次数，时长等等。</li><li>架构的可修改，比如通过可配置实现系统的可修改，其他还包括使用 EventBus，使用代理（如 API 网关），使用 DSL 语言（最著名的 DSL 应该是 SQL 了,屏蔽了不同数据库差异)，使用脚本引擎，使用 classloader，dcevm 等热加载技术。</li></ul><p>其他架构质量还有可部署，可配置，可升级，跨平台，易用性等。可参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F261499%3Futm_source%3Dzhihu%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank"> 自动源代码质量度量（ISO/IEC 5055）</a>,每个质量属性都对应了大量的软件技术战术和实现，但因为篇幅有限，且不是此的重点内容，在这里不再像详细敍述。</p><p>针对工行的专利，之所以前面要这么啰嗦的提到架构的质量，是因为我认为工行的专利背后，是其工行架构师是解决工行业务系统的架构的俩个质量属性</p><ul><li>可修改性：当业务需求变化，系统如何能快速调整上线。不需要开发，甚至不需要重启系统，业务变动也能通过灰度上线，或者能回滚。</li><li>可观测，这里的可观测，指的是业务变动的可观测，系统经历了多少次业务变动，每次变动，系统做了什么调整</li></ul><h2>专利解读</h2><p>在文章开头·，提到了专利的本质是「配置驱动的业务开发」，可以从专利摘要中解读出来</p><p><em>本发明公开了一种基于 SpringBoot 的 web 系统后端实现方法及装置，其中该方法包括：接收页面显示层上送的操作数据；从操作数据中提取操作数据对应的业务 ID 和维护对象 ID；从<strong>数据访问层</strong>存储的业务参数表中，获取与业务 ID 对应的配置信息，所述配置信息包括不同数据字段各自对应的业务处理逻辑、每个数据字段所在的数据表，以及每个数据字段与数据表中表字段的<strong>映射关系</strong>；将维护对象 ID 和业务处理逻辑组合为条件表达式；利用所述条件表达式处理所述操作数据。本发明可以减少后端业务层在开发过程中的变动，降低开发成本，同时提升系统的稳定性。</em></p><p>注意到专利提到了<strong>维护对象 ID</strong>和<strong>业务 ID</strong>，维护对象就是 CRUD 的目标对象，业务 ID 则告诉了如何 CRUD，业务 ID 最终将生成多个 SQL 语句 (专利中提到的条件表达式)。这种生成是自动的，基于业务 ID 相关配置，这也是我说的专利本质是<strong>配置驱动开发</strong>。以专利中的例子做说明，业务提交如下数据</p><pre><code class="language-JSON">{
sys_busi_id:"31000",
data_inf:{
    stu_name:"张三",
    stu_sex:"男",
    address:"xxxxx"
}
}
</code></pre><p>工行的系统，通过 sys_busi_id，可以将页面提交的对象映射成俩个 sql 语句并执行，这样，不需要后台程序员开发任何代码</p><pre><code class="language-SQL">insert into stu ("id","name","sex") values (?,?,?);
insert into stu_address ("address","stu_id") values (?,?)
</code></pre><p>讲到这里，你可能比较疑惑，如何生成 SQL 语句和相应的参数呢，这专利中并没有提到。这可能是在其他专利中，或者是此部分实现已经基于某个开源实现。 或者我解读这是系统更核心部分，过于强大，不方便对外公布。我这里列出供参考的开源实现，如</p><ul><li>APIJSON, 腾讯公司开源的工具，零代码、全功能、强安全 ORM 库 ，后端接口和文档零代码，前端 (客户端) 定制返回 JSON 的数据和结构</li><li>低代码平台，如 JEECG 等低代码开源平台，无需编码即可实现全栈业务功能。</li></ul><p>回到业务 ID，上面说了专利并没有讲清楚业务 ID 是如何维护。但跟普通的对象 ID 一样，也是需要增删改查，保持历史版本以支持可观察，以及可回滚。业务 ID 的数据结构是一个配置，类似如下 JSON ( 注意：以下 JSON 是我的想象，并非专利一部分「）</p><pre><code class="language-JSON">{
    sys_busi_id:"31000",
    mapping_table:{
        stu:["stu_name","stu_sex"],
        stu_address :["address"]
    },
    validate:{
        "stu_sex":{"in":["男"，"女"]}
        "address":"@adressExpression(?)"
    }
}
</code></pre><p>上面的 json 格式中，mapping_table 指示了如何字段映射到数据库表中，validate 则指示了入库前，服务端如何校验数据。这推测这里的 validate 有可能复用了 Spring Boot 的 validation starter。</p><p>如果你还能耐心读到这里，你可能更加疑惑，维护业务 ID 岂不是非常麻烦。答案：是的。 想来工行的架构师设计出来的这套系统，程序员都需要了解这一套新的这种 DSL 而不是用 Java 做 CRUD（上面的 JSON，我在架构的可修改里提到过 DSL），学过 SQL 都知道 SQL 还是比较难学， 学习一套处理业务的专用 DSL 更难，其他难点还有</p><ul><li>是否有可视化界面管理这些配置对象」业务 ID「，比如可视化界面建立业务对象和数据库表的映射</li><li>如何验业务 ID 的正确性，比如上面写的"@adressExpression(?)"，程序员少写了个」d「</li><li>即使有可视化界面，最终也要导出成 DSL，在验收或者生产环境上执行生效，DSL 语言可能非常难学</li><li>这种 DSL 需要有版本概念，这在专利中没有看到提到，但想来应该为了能回滚，应该支持版本概念。</li><li>业务 ID 的修改和上线，应该有一个完整的流程，涉及了产品，QA，项目经理等人审批，发布上线。可能还需要跟工行已有的 DevOp 系统结合起来。</li></ul><h2>结论</h2><p>尽管维护<strong>业务 ID</strong>非常麻烦，甚至程序员觉得得不偿失，但架构的可修改性和可观测得到了满足。对于工行这样一个大体量的公司和它的大体量系统，这个投入还是很划算的，这也是为什么此基于配置驱动开发的系统能在工行应用并申请为专利的原因。相比起其他低代码平台，可能功能弱一点，但基于工行特定应用，应该是能满足的架构可修改性和可观测</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 12:04:27 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/xiandafu/blog/11043929</guid>
            <link>https://my.oschina.net/xiandafu/blog/11043929</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[这份判决给软件开发者吃了定心丸]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center">这份判决给软件开发者吃了定心丸&nbsp;</p><p style="text-align:center">——最高法知产法庭平衡保护软件开源社区建设和软件开发者权益受好评</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-bb51b7fb3d2d3dce3dc1df70b6d8a034349.png" referrerpolicy="no-referrer"></p><p>「最高人民法院对本案的妥善处理，合理地界定了 GPLv2（开源协议——记者注）此类开源许可证软件二次开发者的权利边界，为我国正在建设有中国特色的开源社区树立了标杆，是我国软件开发行业的重要里程碑，意义非凡。」</p><p>2023 年 11 月 22 日，苏州某网络科技有限公司总经理刘继明专程来到最高人民法院知识产权法庭，向合议庭团队赠送了锦旗与上述感谢信（节选）。</p><p>「你们的判决，提振了软件研发企业信心，我真正在自己的身上感受到了人民法院‘努力让人民群众在每一个司法案件中感受到公平正义’。」刘继明握着法官的手激动地表达着感谢。</p><p><span style="color:#2980b9"><strong>是谁泄露了研发秘密？</strong></span></p><p>苏州某网络科技有限公司是一家国家重点高新技术企业，自 2009 年起，该公司陆续投入研发经费约 2589 万元，完成了一款名称为「OfficeTen」的网关产品系统软件，并于 2013 年取得国家版权局「OfficeTen1800 系统软件（V1.8)」的著作权登记证书。该软件面向的客户多为中国移动、中国电信等国内大型通信运营商，有广阔的市场前景。</p><p>直到有一天，他们发现，市场上出现了假李逵。</p><p>2016 年 1 月，苏州某网络科技有限公司从浙江某通信科技有限公司的经销商处购得浙江某通信科技有限公司生产的企业网关一台，经比对，该设备软件运行结果中存在苏州某网络科技有限公司软件源代码特殊标记，且两软件运行结果存在其他相同的指标。</p><p>是谁泄露了研发秘密？苏州某网络科技有限公司深入调查发现，浙江某通信科技有限公司在刘某、吴某从苏州某网络科技有限公司离职后，就与二人接触并将二人聘为其员工。</p><p>刘某、吴某均曾是苏州某网络科技有限公司员工，曾分别在苏州某网络科技有限公司担任硬件工程师、嵌入式工程师。二人在职期间是涉案软件开发项目组的重要成员，均能够正常接触到该软件开发所涉及的技术信息。</p><p>苏州某网络科技有限公司深入调查发现，浙江某通信科技有限公司间接设立了关联网络公司作为「防火墙」，刘某、吴某名义上受聘于关联网络公司，实质上直接为浙江某通信科技有限公司开发网关用软件。他们非法登录苏州某网络科技有限公司的服务器，下载了涉案软件的源代码，使关联网络公司在数月时间内完成了与涉案软件高度相似的被诉软件；而被诉软件系专门用于浙江某通信科技有限公司生产的网关产品的嵌入式软件，浙江某通信科技有限公司在市场上公开销售相应的网关产品，并直接在各类招标中与苏州某网络科技有限公司发生竞争关系，抢夺原本与苏州某网络科技有限公司合作的客户，获利不菲。</p><p>苏州某网络科技有限公司于 2016 年 7 月以吴某、浙江某通信科技有限公司涉嫌侵犯著作权罪向苏州市公安机关报案。经公安机关委托鉴定机构进行鉴定，被诉软件与涉案软件的 1800-c 版本非开源源代码相同率高达 90.2%，二者实质相似。</p><p>随后，苏州某网络科技有限公司又以浙江某通信科技有限公司等未经许可擅自复制、修改、发行苏州某网络科技有限公司享有著作权的涉案软件为由向江苏省苏州市中级人民法院提起诉讼。</p><p>浙江某通信科技有限公司与关联网络公司基于 GPLv2 协议提出了不侵权抗辩。苏州中院认为，该不侵权抗辩不能成立。苏州中院最终认定侵权成立，据此判令浙江某通信科技有限公司等停止侵权，并赔偿苏州某网络科技有限公司经济损失及合理费用。</p><p>浙江某通信科技有限公司和关联网络公司不服这份判决，向最高人民法院提起上诉。</p><p><span style="color:#2980b9"><strong>不侵权抗辩是否成立？</strong></span></p><p>浙江某通信科技有限公司等被诉侵权人基于 GPLv2 协议提出的不侵权抗辩是否成立？软件开发者自身存在一定程度上的违反 GPLv2 协议，是否就一定不享有新研发软件著作权？二审中，这个问题是主要争议点。</p><p>据介绍，在软件行业的普遍操作模式中，软件开发一般都会涉及开源协议的问题，程序员研发软件时想达到什么功能，就去寻找相关的模块来实现。而这个模块代码，很多就是开源代码，受开源协议约束。</p><p>而开源协议是什么呢？</p><p>本案涉及的开源协议是 General Public License version 2 （简称 GPLv2 协议）。GPLv2 协议的发布者为自由软件基金会，该协议是国外一些元老级的程序员撰写的一种关于软件使用的许可证，根据其条款，在受到 GPLv2 协议约束的软件基础上开发出的其他衍生软件同样受到该协议的约束。因此，虽然开发者可以免费下载、复制、修改受该协议约束的程序代码，但由此开发出的新代码也要根据该协议的约定保持开源状态。</p><p>本案的承办法官孔立明在查找这个协议的过程中，发现它的官方有效文本只有英文版，虽然互联网上有不同版本的中文翻译，但部分关键条款的译文并不准确。这个协议的真实含义是什么？他决定自己翻译。协议是按照英美合同文件起草方式写的，里面充满着算法和逻辑关系。</p><p>幸亏孔立明法官有过涉外项目英文合同撰写与谈判经历，也是国际法专业科班出身，才最终把这份云山雾罩的英文版自己翻译成了中文。他还在协议官网上把问答板块的上百个问与答全部梳理了一遍。一番艰苦的努力过后，孔立明对于开源协议的真正内涵以及开源组织对各类法律问题所持观点、美国及欧洲相关案件情况有了深度了解。他在专业法官会议上作了分享。</p><p>该案审判长原晓爽法官告诉记者，专业法官会议讨论后认为，开源协议是全球软件行业高度关注的法律与技术深度交织的复杂疑难问题，需审慎妥善处理此类纠纷，建议合议庭召集行业、学界及有关部门专家召开专项研讨会，对涉开源软件著作权司法保护问题进行深入研讨。</p><p>知产法庭副庭长周翔告诉记者，对于今后法院如何审理涉开源软件知识产权案件，通过专家研讨和广泛听取各方面意见，思路更加明晰了。办理此类案件要在加强著作权保护、尊重开发者意思自治、支持鼓励开源社区建设三者间寻求利益平衡，坚持政治效果、社会效果、法律效果的有机统一。</p><p>结合上述调研成果，最后合议庭达成了一致的观点。</p><p><span style="color:#2980b9"><strong>涉案软件著作权是否获保护？</strong></span></p><p>具体到本案，苏州某网络科技有限公司研发的「OfficeTen」软件是以 OpenWRT 系统软件（OpenWRT 系统软件是开源软件，适用的许可证协议为 GPLv2 协议）为基础经二次开发形成的衍生软件，具体可分为两个部分：<strong>一部分是对 OpenWRT 系统软件所对应源代码进行增删、修改、调整而形成的涉案软件底层系统（以下简称底层系统软件），另一部分则是与涉案软件具体功能相对应的新增源代码形成的上层功能软件（以下简称上层功能软件）</strong>。</p><p><strong>苏州某网络科技有限公司声称其在底层系统软件与上层功能软件之间采用套接字（socket）与命令行（command line）等技术手段建立了隔离层，且二者之间通信内容不涉及内部数据结构信息，由此使得上层功能软件构成 GPLv2 协议项下「独立且分离的」的程序</strong>。</p><p>最高法院知产法庭在二审判决中认定，苏州某网络科技有限公司投资研发的名称为「OfficeTen」的网关产品系统软件，投入了大量成本，涉案软件具有独创性且可以复制，构成著作权法项下的作品，依法应当获得保护。他人未经苏州某网络科技有限公司许可，不得擅自复制、修改、发行涉案软件，否则将构成侵害涉案软件著作权的违法行为。</p><p>合议庭依在案证据认定关联网络公司在开发被诉软件过程中复制并修改了苏州某网络科技有限公司涉案软件的源代码；认定浙江某通信科技有限公司实施了销售被诉软件的行为。认定该复制、修改、发行行为均未经苏州某网络科技有限公司许可，侵害了其享有的涉案软件著作权。</p><p>二审判决对双方争议的、也是软件开发者普遍关心的开源软件与软件开发者著作权权利边界问题、违反开源软件协议与侵害软件著作权之间法律关系问题等予以旗帜鲜明的正面回应：「<strong>在软件尚未被开源、该软件著作权人认为其软件不受 GPLv2 协议约束、被诉侵权人则依据 GPLv2 协议提出不侵权抗辩的侵权纠纷中，软件开发者自身是否违反 GPLv2 协议和是否享有软件著作权，是相对独立的两个法律问题，二者不宜混为一谈，以免不合理地剥夺或限制软件开发者基于其独创性贡献依法享有的著作权。</strong>」「但需指出，本案最终认定被诉行为构成侵权并支持涉案软件权利人部分诉请，并不表明该权利人将来在潜在的违约和/或侵权之诉中可免予承担其依法应当承担的违约和/或侵权责任。」</p><p>苏州某网络科技有限公司代理人、北京德恒（苏州）律师事务所合伙人吕成伟律师告诉记者，二审判决后，被诉侵权人在执行阶段履行了全部赔偿并刊登致歉声明，权利人的合法利益得到了充分保障。权利人由衷感谢最高人民法院的公正判决，并对最高人民法院知产法庭法官的专业程度与敬业态度致以崇高敬意。</p><p><span style="color:#2980b9"><strong>二审判决价值何在？</strong></span></p><p>「本案作为疑难复杂案件，最大的争议在于原告要求保护的涉案计算机软件是根据开源软件开发而来的。涉及原告的计算机软件是否应当根据开源许可协议开源，原告未按开源协议开源是否违反了协议，以及被告未经原告许可使用该软件的行为是否侵权的复杂问题。」华东政法大学教授王迁在接受本报记者专访时表示，本案判决书对于原告的行为是否违反开源协议甚至构成侵权和被告的行为是否侵犯原告的著作权，进行了合理的区分。尤其可贵之处在于，没有受到「开源协议」这一看似复杂的因素的干扰，而是透过现象看本质，牢牢把握著作权法的基本原理，从而作出了符合著作权法规定和立法精神的正确判决。</p><p>开源软件和以开源软件为基础独立开发的新软件之间的关系，类似于小说和以小说为基础拍摄的电影之间的关系，也就是原作品与演绎作品之间的关系。即使演绎作品的创作与后续利用未经原作品著作权人的许可或者超越了许可范围，从而构成违约和对原作品著作权的侵权，也不影响该演绎作品（侵权演绎作品）受到著作权法的保护，他人未经许可利用该演绎作品仍然构成对该演绎作品著作权的侵权。「本案的判决遵循了基本法理，对今后涉及开源软件著作权侵权案件的审理阐明了基本规则，具有很强的指导意义，值得称道。」</p><p>「开源协议是全世界计算机软件开发行业普遍关注的法律问题。最高人民法院在该案中确立的裁判规则为我国计算机行业的健康稳定发展创造了相对宽松的法律环境。特别是对于一些中小型软件开发企业来说，他们可以根据其二次开发过程中作出的独创性贡献，依照我国著作权法享有相应的计算机软件著作权。」全国人大代表、南京外国语学校副校长李鸿彬表示，本案给这些中小企业吃了一颗定心丸，有助于增强企业经营信心，进一步加大研发成本投入。「另一方面，本案也确认了 GPLv2 这一国际法律文本的法律效力，并未否认有关当事人的意思自治。该司法理念完全符合我国鼓励计算机软件开源社区建设的政策导向，很好地平衡了软件开源社区建设和保护软件开发者权益这两方面的利益。」</p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FBReS5aKDPnhNARWofAqUzg" target="_blank">人民法院报</a></em></u></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 05:53:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279035</guid>
            <link>https://www.oschina.net/news/279035</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[工商银行取得「基于 SpringBoot 的 web 系统后端实现方法及装置」专利]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fepub.cnipa.gov.cn%2FDxb%2FPatentDetail" target="_blank">据国家知识产权局公告</a></u>，中国工商银行股份有限公司近日取得一项名为「<strong>基于 SpringBoot 的 web 系统后端实现方法及装置</strong>「的专利，授权公告号 CN112905176B，申请日期为 2021 年 2 月。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c517204b09e40c8390e687c6f85f1da3004.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c319310d0c88d46dbaeaae98ddfda13249.png" referrerpolicy="no-referrer"></p><p><strong>专利摘要：</strong></p><p>本发明公开了一种基于 SpringBoot 的 web 系统后端实现方法及装置，其中该方法包括：接收页面显示层上送的操作数据；从操作数据中提取操作数据对应的业务 ID 和维护对象 ID；从数据访问层存储的业务参数表中，获取与业务 ID 对应的配置信息，所述配置信息包括不同数据字段各自对应的业务处理逻辑、每个数据字段所在的数据表，以及每个数据字段与数据表中表字段的映射关系；将维护对象 ID 和业务处理逻辑组合为条件表达式；利用所述条件表达式处理所述操作数据。本发明可以减少后端业务层在开发过程中的变动，降低开发成本，同时提升系统的稳定性。</p><p><strong>专利摘要附图：</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d9c35128bcaa487fc775e62a18eb221ab15.png" referrerpolicy="no-referrer"></p><p><strong>专利说明书：</strong></p><p><img height="1684" src="https://oscimg.oschina.net/oscnet/up-1a9c96dfe9ae983ccc365fc338d875fa1c7.png" width="1236" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-74400e9352156515f96f943d3d1b0d38f31.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-506b932cba593703d4451b426dc264fa754.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-e294d82482d7164d48096679a54a8c91976.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-e8fa61af87d64ab4c42e04b7fb8441af90b.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-cc869c2cfdfd6e8dd8cf31c892a48280317.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-5f8ebf82699b938e3a3bacba8adb460b928.png" referrerpolicy="no-referrer"></p><hr><p>Spring Boot 是一个用于开发 Java 应用程序的开源框架，它基于 Spring 框架，旨在简化 Spring 应用程序的开发和部署过程。Spring Boot 提供了一种快速、便捷的方式来构建独立的、生产级别的 Spring 应用程序。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2f4fd85fe6e77ccca851eede3e41f6b3aaf.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 03:32:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279004</guid>
            <link>https://www.oschina.net/news/279004</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开放签电子签章 2024 年第一季度目标]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0.0001pt; margin-right:0px; text-align:center"><strong><span style="color:#e74c3c">龙年伊始，开放签祝大家开工大吉，龙年大吉。</span></strong></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><span><span><span>开放签开源工具版将在 24 年第一季度更新验签、骑缝签署、国密签署等功能，同时开放签企业版也将上线 PC 端、移动端、API 集成三方面的完整能力。届时开放签电子签章能力将更加完善，从业务至技术层面满足更多场景，第一季度目标如下：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>一、开源工具版更新迭代目标：</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>1、解决商业版权风险，提供基于 PDFBox 的验签功能；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>2、提升电子签章用户体验，在开源工具版 DEMO 中添加骑缝签署功能；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>3、增加基于国密算法的电子签名能力；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>二、开放签企业版更新迭代目标：</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>1、上线移动端（H5）签署功能：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（1）个人用户可通过手机短信链接快速完成签署；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（2）支持手机端登录、注册；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）支持手机端查询签署文件列表；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（4）支持手机端签署、填写、拒签、拒填文档。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>2、上线 API 接口功能：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（1）支持用户信息同步；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（2）支持通过接口发起签署；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）支持通过接口签署、填写、拒签、拒填文档。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>3、功能体验升级：</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（1）优化系统已知 bug；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（2）优化用户体验流程；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）优化系统提示语，提升系统引导能力；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（4）优化产品相关文档，提升用户自助应用能力。</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 18 Feb 2024 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/279002</guid>
            <link>https://www.oschina.net/news/279002</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
