<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-最新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-最新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 12 Nov 2023 04:28:01 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Rust GUI 工具包 Slint 发布 1.3，改进原生样式和 JavaScript API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Slint（最初称为 "SixtyFPS"）是一个 Rust 编写的综合性 UI 工具包，用于为桌面和嵌入式设备构建原生用户界面。</p><p>近日，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslint.dev%2Fblog%2Fslint-1.3-released" target="_blank">Slint 发布了 1.3 版本</a></u>，引入许多增强开发体验的新功能和改进。</p><blockquote><p>下载地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fslint-ui%2Fslint%2Freleases%2Ftag%2Fv1.3.0" target="_blank">https://github.com/slint-ui/slint/releases/tag/v1.3.0</a></u></em></p></blockquote><p>下面是值得关注的亮点：</p><ul><li><strong>为 Windows 和 Mac 引入新的默认原生样式</strong></li></ul><p>公告写道，此版本修改了默认样式，以提供更真实的 Windows 和 macOS 界面。其中 Fluent 设计语言用于现代 Windows 应用程序，而 Cupertino 则体现了 macOS 应用程序的外观和风格。这两种风格都采用纯 Slint 代码实现。</p><p>至于 Linux，Slint 继续使用 Qt，以确保一致的「原生」 Linux 风格。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7d44a5c79f0bd18acb0c3a65df338039f97.png" referrerpolicy="no-referrer"></p><p><em>Cupertino style on Mac</em></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55de0a6d124adc84cb8b57404014de0bba1.png" referrerpolicy="no-referrer"></p><p><em>Fluent style on Windows</em></p><ul><li><strong>基于 napi-rs 的 NodeJS API</strong></li></ul><p>新版本现在使用 napi-rs crate 进行 NodeJS 集成。因此 Slint 支持兼容所有最新的 NodeJS 版本，并可集成到 NodeJS 事件循环中。</p><p>寻找 Electron 替代方案，希望使用 JavaScript 创建轻量级 GUI 应用程序的开发者可以考虑使用 Slint。</p><p>详情查看文档和教程：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslint.dev%2Fdocs%2Fnode%2F" target="_blank">https://slint.dev/docs/node/</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslint.dev%2Fdocs%2Ftutorial%2Fnode%2F" target="_blank">https://slint.dev/docs/tutorial/node/</a></p><ul><li><strong>启动 Android 版移植开发工作</strong></li></ul><p>Slint 开发团队已开始尝试将 Slint 引入 Android。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-661056d1be12ae12e60be09594c00f47c75.png" referrerpolicy="no-referrer"></p><ul><li><strong>简化导入组件库的步骤</strong></li></ul><p>现在可以轻松地将组件库导入到代码库中。新版本附带了支持从外部库导入组件的基础设施。库搜索路径在构建脚本中或通过环境变量定义。</p><p>以下例子演示了将代码从<code>foo</code>库导入<code>FooWidget</code>&nbsp;</p><pre><code>import { FooWidget } from "@foo";</code></pre><p>……</p><p>详情查看<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslint.dev%2Fblog%2Fslint-1.3-released" target="_blank">发布公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 12 Nov 2023 03:20:38 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266101/slint-1-3-released</guid>
            <link>https://www.oschina.net/news/266101/slint-1-3-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IntelliJ IDEA 2023.3 Beta 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span style="display:none">&nbsp;</span><span style="color:#000000">IntelliJ IDEA 2023.3 Beta 版本现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F11%2Fintellij-idea-2023-3-beta%2F" target="_blank">发布</a>，此版本包括抢先体验计划期间引入的所有重要更新。以下是即将发布的主要版本中最值得注意的改进和新增功能列表：</span></p><ul><li><span style="color:#000000">完全支持 Java 21 功能</span></li><li><span style="color:#000000">调试器中的 Run to Cursor 嵌入选项</span></li><li><span style="color:#000000">具有代码编辑操作的浮动工具栏</span></li><li><span style="color:#000000">支持 GitLab snippets</span></li><li><span style="color:#000000">All-in-one diff viewer</span></li><li><span style="color:#000000">Maven 和 Gradle 导入的改进</span></li><li><span style="color:#000000">OpenAPI 规范的可视化编辑</span></li><li><span style="color:#000000">Quarkus 和 Micronaut 的增强功能</span></li><li><span style="color:#000000">Spring 6.1 功能支持</span></li><li><span style="color:#000000">Spring for GraphQL 支持</span></li><li><span style="color:#000000">开箱即用的 Kubernetes 工具</span></li><li><span style="color:#000000">Extended Dev Containers 支持</span></li><li><span style="color:#000000">HTTP 客户端改进</span></li></ul><p style="color:#494949"><span style="color:#000000"><strong>最新的 Kotli</strong><strong>n 版本支持现已随</strong><strong> IDE 更新一起提供</strong></span></p><p style="color:#494949"><span style="color:#000000">从 v2023.3 开始，对新 Kotlin 版本的支持与 IntelliJ IDEA 和 Android Studio 更新一起提供，这意味着用户不再需要从 JetBrains Marketplace 更新 Kotlin 插件。在每个主要 IDE 版本中，都可以有即将推出的 Kotlin Beta 和稳定版本的内置支持。</span></p><p style="color:#494949"><span style="color:#000000"><strong>Java Gradle 项目中的 Kotlin 自动配置</strong></span></p><p style="color:#494949"><span style="color:#000000">如果将 Kotlin 文件添加到 Java 模块，IntelliJ IDEA 现在可以通过更改构建脚本自动将所有需要的 Kotlin 依赖项添加到模块。你可以轻松查看这些更改并撤消它们。&nbsp;</span></p><p style="color:#494949"><span style="color:#000000">目前，满足特定标准的 Gradle 项目可以进行自动配置，其中一些标准包括：</span></p><ul><li><span style="color:#000000">Gradle 版本必须与该项目可用的 Kotlin 版本兼容。&nbsp;</span></li><li><span style="color:#000000">模块不得包含「buildSrc」文件夹。</span></li><li><span style="color:#000000">Gradle sync 不得正在进行，中。&nbsp;</span></li></ul><p style="color:#494949"><span style="color:#000000">如果无法自动配置，IDE 将建议用户可以像以前一样手动配置 Kotlin。<span style="display:none">&nbsp;</span></span></p><p style="color:#494949"><span style="color:#000000"><strong>插件更新</strong></span></p><p style="color:#494949"><span style="color:#000000">在 IntelliJ IDEA 2023.3 及更高版本中，对插件分发进行了更改。Android、Ant 和 GlassFish 插件现已通过 JetBrains Marketplace 提供。这也适用于 IntelliJ IDEA 社区版的 XPathView 插件。</span></p><p><span style="color:#000000">详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F11%2Fintellij-idea-2023-3-beta%2F" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 06:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265876/intellij-idea-2023-3-beta</guid>
            <link>https://www.oschina.net/news/265876/intellij-idea-2023-3-beta</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[正在被代码折磨到深夜的你，何不请 AI 帮帮你]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>就在生成式 AI 工具规模化应用仍被质疑和观望的时候，由其生成的内容、视觉、代码程序已经高速涌入大众视野。AI 技术一日千里，拥抱 AI 开发工具或将成为向未来工程师的进化的必经之路。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/204756_bv5c_2720166.gif" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="text-align:center"><strong>「半天时间就能梳理 20000 行代码」</strong></p><p>大星是某电商业务的后端核心研发，入行 3 年，成长很快，已经是项目 owner 独当一面。但是大星也自有烦恼，电商促销活动频繁，且因为需求方复杂，经常需要处理突发状况，还有一个「重灾区」就是频繁修复历史技术债，不断打补丁，使得系统的可维护性越来越差，重构迫在眉睫。</p><p>今年提前两个月，双十一大促进入筹备期。大星发现，如果不尽快重构系统，不仅很难继续补丁式的开发新活动，甚至稳定性也存在风险。但是重构系统又与新的开发工作存在矛盾，人力有限，极容易顾此失彼。这时，大星想到了近期在试用的百度 Comate 研发插件，在理解老代码、生成注释方面都有不错的表现，于是大星和小伙伴，迅速梳理了遗留的老代码，制定了新优惠逻辑的实现融合方案，快速融合了新旧优惠逻辑，2 名研发只用了半天时间完成了 20000 多行代码的梳理。</p><p>后来，大星多次分享了这次经历：「这不仅等于增派了研发人力，更重要的是百度 Comate 理解更准确，注释生成更规范。这次成功救场，启发我作为工程师，更应该超前使用新工具，这样才能跑得更快。」</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/204929_EoB7_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>「不被语言所困，我就是研发 E 人！」</strong></p><p>去年毕业的小韩，作为优秀校招生入职大厂，工作一年有余，由于好学爱折腾，已经接了不少项目。最近，小韩接手了一个新项目，该项目的实现语言是 Go，但是小韩不太擅长，另外，由于对项目的已有代码不熟悉，让他接手项目和快速修改其中的内容有了不少阻碍。</p><p>他想到平时使用的百度 Comate，利用其代码解释和使用其它语言实现的能力，快速理解了项目已有的代码，高质量实现了快速接手任务，得到了团队内其他成员的一致好评。</p><p>「我属于程序员 E 人，平时喜欢多交流，百度 Comate 就是小伙伴推荐的，我发现，面对短板，找到方法其实就能快速弯道超车，这对研发新人很重要。」小韩直言不讳。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205015_NLab_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>「用好工具，重组生产要素，提升研发生产力」</strong></p><p>作为研发团队管理者，大刚最近痛失两名 QA，新的 QA 迟迟招不到，团队的 bug 数直线上升，质量危机迫在眉睫，将近年底，眼看质量指标达成就要灰飞烟灭。多年的经验告诉大刚要沉下心来，仔细分析找到解法，在角色、人力、环节、工时、质量几个维度上设计出最优解。</p><p>通过分析，大刚逐步梳理出了解法：既然人力缺失，是否尽可能利用自动化能力来减少人工的投入，如在每次回归测试中释放 QA 的人力。再推导一步：如果对现有代码批量生成单元测试，对于缓解 QA 人力紧缺也将有非常大的帮助。</p><p>最后，大刚决定使用百度 Comate 插件来解决这些问题。大刚和团队研发成员一起，针对遗留代码和新增的代码，使用百度 Comate 的单测生成能力，快速的生成了满足业务要求的单元测试代码，通过自动化的方式实现回归验证，保证代码在变更后的运行结果符合预期情况，将测试环节左移，更早发现问题，减少后续环节的人力投入。</p><p>大刚团队的案例，是通过百度 Comate 生成了主要流程的单元测试用例，虽然在研发过程中看上去对单个功能的开发时间加长了，但是方案保证了核心流程的正确性，提高验证效率，最大化的缓解了人员紧缺的情况。</p><p>后来大刚在覆盘中，这样总结：「研发是一个系统性工程，不仅有人人协同，还有人机协同，用好工具提升人机协同能力，重组生产要素，用技术的力量提升研发生产力。」</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205101_OWD9_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205125_R8fr_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><h3 style="text-align:center"><strong>⭐ 百度 Comate SaaS 有哪些优势？</strong></h3><p style="color:#000000; text-align:left"><span>依托文心大模型和飞桨，百度 Comate 具备多项卓越能力。例如，在和用户交互的过程中，需要准确理解用户的意图，以及根据用户的意图做出合理的解答。借助文心大模型对自然语言、代码的理解和</span><span style="color:#1c1d1f">生成</span><span>的能力，百度 Comate 在人与模型交互、代码内容的理解、知识点输出方面，都达到了领先水准，能够回答更加准确、服务更多类型的研发需求。再比如，在代码续写的场景中，需要模型能够跟得上用户的思路，即代码还没写完，就给用户正确的提示，这就需要更快的响应速度，基于飞桨的推理框架，可以让模型在推理时响应速度更快，用户体验更好。</span></p><p style="color:#000000; text-align:left"><span>在具体性能表现上，百度 Comate SaaS 支持单行推荐、多行推荐、多条推荐、代码知识的问答、代码生成、注释生成、注释文档生成、代码解释、生成行间注释、函数拆分、优化和重构等一系列编码相关的能力，在编程现场实现帮你想、帮你写、帮你改代码的效果。</span></p><p style="color:#000000; text-align:left"><span>此外，经过测试，百度 Comate 在易用性、速度、安全性、使用体验上具有明显优势。功能完备，开箱即用，后续支持私域数据索引，推理结果更精准。在使用体验上，支持全中文交互，交互速度更快，体验更好；领先的安全机制保证代码数据的安全，同时成本和部署方式上也更灵活、更具高性价比。</span></p><h3 style="text-align:center"><strong>🌈 限时福利！</strong></h3><p><span style="color:#2980b9"><strong>福利一：限时免费试用</strong></span>（活动时间：即日起- 11 月 20 日）</p><ul><li><p>扫描或长按下图二维码，即装即用，<span style="color:#c0392b"><strong>限时领取免费试用 1 个月！</strong></span></p></li><li><p>邀请其他人注册，<span style="color:#c0392b"><strong>每分享 1 人注册成功，即可获得+1 个月免费试用期，总计最高获得 6 个月免费试用</strong>。</span></p></li></ul><p><span style="color:#2980b9"><strong>福利二：限时特价</strong></span>（活动时间：即日起- 11 月 20 日）</p><p style="text-align:center"><img height="557" src="https://static.oschina.net/uploads/space/2023/1110/144509_QoI6_2720166.png" width="1268" referrerpolicy="no-referrer"></p><p style="text-align:center">福利直达链接：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.baidu.com%2Fcampaign%2Fcomate%2Findex.html" target="_blank">https://cloud.baidu.com/campaign/comate/index.html</a></u></p><p style="text-align:center">&nbsp;</p><h4 style="text-align:center"><span style="color:#c0392b"><strong>以上福利扫码立即获得！</strong></span></h4><p>下载下面图片➡️转发小伙伴，成功推荐其他新用户，即可延长免费试用时间，最高得 6 个月免费试用～</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1110/144648_TUoU_2720166.jpg" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 12:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265796</guid>
            <link>https://www.oschina.net/news/265796</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 上的 .NET 8 独立体积减少 50%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>.NET 7 首次引入了以<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fdeploying%2Fnative-aot%2F" target="_blank">原生 AOT (Native AOT)</a></u>发布应用程序的选项。基于此特性，开发者使用原生 AOT 发布应用程序可以创建一个完全独立 (self-contained) 的版本，它不需要运行时，所有内容都包含在一个文件中。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fwhats-new%2Fdotnet-8%23native-aot-support" target="_blank">微软介绍道</a></u>，.NET 8 为原生 AOT 发布带来了以下改进：</p><ul><li>增加对 x64 和 macOS Arm64 架构的支持</li><li>将 Linux 上原生 AOT 应用程序的大小最多减少 50%<br><br> 下表显示了使用原生 AOT 发布的 "Hello World" 应用程序的大小，其中包括 .NET 7 与 .NET 8 上的整个 .NET 运行时：<br><img height="414" src="https://static.oschina.net/uploads/space/2023/1111/184357_9MxX_2720166.png" width="2356" referrerpolicy="no-referrer"></li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fwhats-new%2Fdotnet-8" target="_blank">点此查看详情</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 10:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266051</guid>
            <link>https://www.oschina.net/news/266051</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软计划为 Windows 10 提供 AI 助手 Copilot]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowscentral.com%2Fsoftware-apps%2Fwindows-10%2Fexclusive-microsoft-plans-to-bring-its-ai-copilot-to-1-billion-windows-10-users" target="_blank">根据 Windows Central 的报道</a></u>，微软计划将 Copilot 引入 Windows 10。该公司做出这一决定的主要原因是希望为 Copilot 增加更多用户。</p><p>Windows 11 最近发布的重大更新 v23H2 包含了 AI 助手 Copilot，它直接添加到了桌面的工具栏上。但 Windows 11 的用户数目前还远不及上一代的 Windows 10，而微软致力于让每个用户都能使用 Copilot，它正计划向有 10 亿用户的 Windows 10 提供 Copilot。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7b7b3e6ab4e1286eb6e8ecd2789040a2a53.png" referrerpolicy="no-referrer"></p><p>Windows 10 的 Copilot 和 Windows 11 基本一致，Copilot 按钮放置在工具栏上，点击该按钮会显示一个可用于对话的侧边栏。</p><p>报道还指出，Windows 10 和 Windows 11 的 Copilot 体验将是相同的，包括插件的兼容性。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 09:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265760</guid>
            <link>https://www.oschina.net/news/265760</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mozilla 发布首款大模型 Fakespot Chat]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mozilla 今年初收购了一家利用 AI 和机器学习识别虚假和欺骗性产品评论的初创公司 Fakespot。现在它推出了自己的首款大模型 Fakespot Chat。</p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.fakespot.com%2Factivate-fakespot-chat" target="_blank">https://www.fakespot.com/activate-fakespot-chat</a></u></em></p><p>根据介绍，Fakespot Chat 会在消费者在线购物时为其提供帮助，评估商品，回答有关产品的问题，甚至提出对产品研究有用的问题。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0c8ba2eab76180ea01cd2354846b379bc1a.png" referrerpolicy="no-referrer"></p><p>Fakespot 一直在利用 AI，包括生成式 AI 技术，来提高而不是降低网上购物过程的可信度。例如，它在去年推出了一项名为"优点和缺点"的人工智能生成功能，通过自己编写产品的优点和缺点总结，取代了阅读评论的需要。公司表示，该功能是在数十亿个数据点的基础上训练出来的，模型本身使用了五种不同的模型。</p><p>本周，Fakespot Chat 开始测试，购物者可以向它询问正在考虑的产品，就像在现实世界中的实体店购物时向销售人员寻求帮助一样。该技术利用 AI 和机器学习对产品评论进行排序，分辨真伪，回答用户的问题。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3195b13d6b959f1bddbd173f9fb8e7c06c6.png" referrerpolicy="no-referrer"></p><p>Mozilla 表示，聊天会话中的信息会被保存下来，这是为了改善体验，用户可在无需创建账户或泄露个人信息的前提下使用这项服务。</p><p>Mozilla 也承认，这个 AI 聊天机器人不一定总能做出正确决策，因此它邀请用户提交反馈意见，如果他们认为该模型可以改进的话。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 03:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266008/fakespot-chat-mozillas-first-llm</guid>
            <link>https://www.oschina.net/news/266008/fakespot-chat-mozillas-first-llm</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FFmpeg 6.1]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>FFmpeg 6.1 <u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fffmpeg.org%2Findex.html%23pr6.1" target="_blank">已正式发布</a></u>，代号 "Heaviside"。</p><p>下载地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fffmpeg.org%2Fdownload.html%23release_6.1" target="_blank">https://ffmpeg.org/download.html#release_6.1</a></u></em></p><p><img src="https://oscimg.oschina.net/oscnet/up-9e1c78a5b6a3b63b266be5b2a83bc994beb.png" referrerpolicy="no-referrer"></p><p>作为重要版本更新，FFmpeg 6.1 包含以下值得关注的新特性：</p><ul><li>新增 Playdate 视频解码器和分离器</li><li>为 Windows 版本 libva-win32 扩展 VAAPI 支持</li><li>ffmpeg CLI 新增选项：-readrate_initial_burst</li><li>setpts 和 asetpts 过滤器支持命令</li><li>Vulkan 支持解码 hwaccel，支持 H264, HEVC and AV1</li><li><strong>新增过滤器</strong><ul><li>afireqsrc audio source filter</li><li>arls filter</li><li>zoneplate video source filter</li><li>color_vulkan filter</li><li>bwdif_vulkan filter</li><li>nlmeans_vulkan filter</li><li>xfade_vulkan filter</li><li>bwdif_cuda filter</li><li>apsnr and asisdr audio filters</li><li>Bitstream filter for editing metadata in VVC streams</li><li>Bitstream filter for converting VVC from MP4 to Annex B</li><li>scale_vt filter for videotoolbox</li><li>transpose_vt filter for videotoolbox</li></ul></li><li><strong>新增解码器</strong><ul><li>libaribcaption decoder</li><li>RivaTuner video decoder</li><li>vMix video decoder</li><li>OSQ demuxer and decoder</li></ul></li><li><strong>新增编码器</strong><ul><li>Microsoft RLE video encoder</li><li>VAAPI AV1 encoder</li></ul></li><li>新增解析器、muxer &amp; demuxer 
  <ul><li>Essential Video Coding parser, muxer and demuxer</li><li>Essential Video Coding frame merge bsf</li><li>Raw AC-4 muxer and demuxer</li><li>Raw VVC bitstream parser, muxer and demuxer</li><li>CRI USM demuxer</li></ul></li><li><strong>其他改进</strong><ul><li>support for the P_SKIP hinting to speed up libx264 encoding</li><li>Support HEVC,VP9,AV1 codec in enhanced flv format</li><li>Support HEVC,VP9,AV1 codec fourcclist in enhanced rtmp protocol</li><li>ffmpeg CLI '-top' option deprecated in favor of the setfield filter</li><li>ffprobe XML output schema changed to account for multiple variable-fields elements within the same parent element</li><li>ffprobe -output_format option added as an alias of -of</li></ul></li></ul><p>发布公告写道，这个版本已经逾期至少半年了。由于版本库中的活动不断，不得不推迟发布。最近终于能够在合并 7.0 中的一些大改动之前，对该版本进行分支。</p><p>在内部，开发团队也进行了一些修改。用于编解码器和滤波器的 FFT、MDCT、DCT 和 DST 实现已完全替换为速度更快的 libavutil/tx。</p><p>这使得编译后二进制文件的体积大小减少，这在小规模构建中会很明显。 在整个视频解码器中，每帧的分配总量大幅减少，从而降低了开销。</p><p>此外还对 DSP 代码的许多部分进行了 RISC-V 优化，主要是对大型解码器进行了合并。开发团队称他们努力提高每个数据包的时间戳和帧持续时间的正确性，从而提升变帧率视频的准确性。</p><p>下一个更新将是 7.0 大版本，计划于二月发布。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 02:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266003/ffmpeg-6-1-released</guid>
            <link>https://www.oschina.net/news/266003/ffmpeg-6-1-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[比尔·盖茨：AI Agent 将颠覆软件行业]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>比尔·盖茨在其个人网站<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gatesnotes.com%2FAI-agents" target="_blank">撰文</a></u></strong>谈论了&nbsp;<strong>AI Agent</strong>，称它将彻底改变大众使用电脑的方式，并颠覆软件行业。</p><p><img src="https://static.oschina.net/uploads/space/2023/1111/211033_XnvN_2720166.png" referrerpolicy="no-referrer"></p><blockquote><p>AI Agent 属于人工智能领域的术语，是一种能够感知环境、进行决策和执行动作的智能实体。不同于传统的人工智能，AI Agent 具备通过独立思考、调用工具去逐步完成给定目标的能力。</p></blockquote><p>比尔·盖茨认为，现在要在电脑上执行任何任务，必须先告诉设备启动相应的程序。但它们无法帮助用户发送邮件、分享自拍、分析数据、安排聚会获购买电影票，即便是最好的网站，也无法完全了解自己的工作、生活、兴趣和人际关系。并且使用这些信息为你做事的能力也有限。这种事情在今天只有与另一个人（例如亲密的朋友或私人助理）合作时才有可能实现。</p><p>但是未来五年内，上述情况将彻底改变。用户只需要用简洁明了的语言「告诉」设备自己想做什么，软件便可根据用户分享信息的多少、对用户生活的了解程度，作出个性化的回应。在不久的将来，任何上网的人都可以拥有一个由远远超出当今技术的&nbsp;<span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">AI 驱动的个人助理。</span></p><p>比尔·盖茨说道，这种对自然语言做出反应，并能根据对用户的了解完成许多不同任务的软件被称为<strong> Agent</strong>。而他在这 30 多年来，一直在思考关于 Agent 的问题，并在 1995 年出版的《未来之路》<em>(The Road Ahead)&nbsp;</em>一书中对其进行了论述。但直到最近，由于人工智能的进步，Agent 才变得切实可行。</p><p>他认为，<strong>Agent 不仅会改变每个人与计算机交互的方式。它们还将颠覆软件行业，掀起自我们从输入命令到点击图标以来最大的计算革命</strong>。而 AI Agent 最令人兴奋的影响是它们将使当今对大多数人来说过于昂贵的服务民主化。它们将在四个领域产生特别大的影响：医疗保健、教育、生产力以及购物娱乐。</p><p>原文：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gatesnotes.com%2FAI-agents" target="_blank">https://www.gatesnotes.com/AI-agents</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 13:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266065/bill-gate-talk-about-ai-agents</guid>
            <link>https://www.oschina.net/news/266065/bill-gate-talk-about-ai-agents</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Delphi 12 & C++ Builder 12、RAD Studio 12 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Embarcadero&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.embarcadero.com%2Fannouncing-the-availability-of-rad-studio-12-athens%2F" target="_blank">宣布推出</a>&nbsp;RAD Studio 12 Athens、Delphi 12 和 C++Builder 12。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a4795d0d48233907f1b605736e791483854.png" referrerpolicy="no-referrer"></p><p><strong>主要变化</strong></p><ul><li><p>将 Visual Assist 集成到 C++Builder 的 IDE，为 C++ 语言提供一流的代码补全、代码导航和重命名重构</p></li><li><p>针对 Win64 的基于 Clang 的 C++ 编译器的显着更新预览，支持最新的 C++ 标准语言功能，并提供与外部库和 C++ 代码的更好集成</p></li><li><p>Delphi 添加新语法，包括多行字符串文字，以满足一些相关的客户端请求</p></li><li><p>面向 FireMonkey 的 Skia 支持，通过为 FireMonkey 采用新基础，在所有目标平台上渲染图形和 UI 控件时提供更高的性能和质量<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-b9cf21f2bee48c1513779da33754ba3506b.png" referrerpolicy="no-referrer"></p></li><li><p>为 VCL 重新设计的 MDI 和新的选项卡式 UI 架构，可帮助现有应用程序实现现代化视觉风格，用最少的改动为现有程序添加对 HighDPI 和样式的支持</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e33699c1811a0468b2671c69abedc285d33.png" referrerpolicy="no-referrer"></p></li><li><p>新的 FireDAC 示例查询 (QBE) 组件可简化数据过滤，新的 Delphi JSON 向导可将流行 JSON 格式的数据映射添加到对象，就像使用 XML 那样<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-656591200601e9a491ae85969df8b0a6755.png" referrerpolicy="no-referrer"></p></li><li><p>改进 IDE 的生产力和质量，使 RAD Studio 能够更轻松、更快速地执行日常任务<br><img alt="" src="https://oscimg.oschina.net/oscnet/up-1a7c54b8ab0163f5c28e4b9df1734487caf.png" referrerpolicy="no-referrer"></p></li><li><p>支持 RAD Server 中的智能 ID，让托管的 REST API 更加强大和灵活，同时保持 RAD Server 的易用性</p></li></ul><p>详情查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.embarcadero.com%2Fannouncing-the-availability-of-rad-studio-12-athens%2F" target="_blank">发布公告</a>。</p><hr><p>延伸阅读：<em><u><a href="https://www.oschina.net/news/241121/delphi-11-n-cbuilder-11-ce-released" target="news">Delphi 11 和 C++Builder 11 社区版发布</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 10:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265941/rad-studio-12-athens</guid>
            <link>https://www.oschina.net/news/265941/rad-studio-12-athens</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.0 - 支持 OceanBase Oracle 模式]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>支持 OceanBase Oracle 模式。</li><li>支持设置 MySQL 在线变更参数。</li><li>新增项目数据库查看者的角色。</li></ul><h2>🎄 改进</h2><ul><li>支持在项目中直接选择所有用户并为之添加角色。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-5201834160b7cab041ef604993e52243517.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>调整了项目页面的布局。</li><li>在 SQL 编辑器中通过悬浮面板展示表和列的详情。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-d67bf21c4131f374bed4fd7aefcd4cedef9.png" alt="file" referrerpolicy="no-referrer"></p><h2>🪦 不再支持</h2><ul><li>Bytebase 新版本中将不再提供书签功能。我们建议您使用浏览器的书签功能作为替代方案。</li></ul><h2>🐞 Bug 修复</h2><p>修复在 Azure DevOps 或 Bitbucket 中重命名文件无法触发在 Bytebase 中工单创建的问题。</p><h2>🎠 社区</h2><p>感谢 @bds-congnguyen 提交 fix: update bytebase-sql-review.yml for CICD #8984</p><h2>📕 安装及升级</h2><p>参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升级指南</a>。如果从之前版本升级，获取新版本后，重新启动升级即可。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 09:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10141966</guid>
            <link>https://my.oschina.net/u/6148470/blog/10141966</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 开源量化交易框架 AmazingQuant]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-amazingquant" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#amazingquant"></a>AmazingQuant<br></h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fwatchers"><img src="https://img.shields.io/github/watchers/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Watchers&amp;" alt="Github workers" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fstargazers"><img src="https://img.shields.io/github/stars/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Star&amp;" alt="GitHub stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Ffork"><img src="https://img.shields.io/github/forks/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Fork&amp;" alt="GitHub forks" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-1 简介" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#1%E7%AE%80%E4%BB%8B"></a>1.简介</h1><p>AmazingaQuant——为交易而生的智能投研 Lab。包含策略模型研究服务、量化数据服务、指标计算服务、绩效分析服务四大功能模块。<br>
1.1 策略研究服务<br>
　　四大策略体系的研究体系<br>
（1）选股体系<br>
　　中低频组合选股模型、强势短线模型<br>
（2）风险预警体系<br>
　　事件风险等建立黑白名单模型<br>
（3）择时体系<br>
　　仓位控制择时、行业风格轮动<br>
（4）T+0 体系<br>
　  全市场股票分类（活跃型与稳定型），做 T0 模型<br></p><p>1.2 量化数据服务<br>
1.2.1 历史数据存储<br>
存储到服务器的 mongoDB 作为数据服务器，并保存到本地的 HDF5，满足策略需求。<br>
（1）基础行情数据<br>
　　tick、1min、5min、日线等周期的股票、指数<br>
（2）基本面数据<br>
　　财务数据<br>
　　股本数据<br>
（3）行情衍生数据<br>
　　龙虎榜数据<br>
　　指数成分股数据<br>
　　行业板块成分股数据<br>
　　行业指数日线行情数据<br></p><p>1.2.1  实时行情对接<br>
（1）股票、指数的 tick 数据实时全推行情<br>
（2）重采样为 1min、5min、日线等三个周期数据<br></p><p>1.3 指标计算服务<br>
　　历史指标计算满足策略研究，实时指标计算满足实盘交易<br>
（1）日线、周线、月线、年线周期等低频指标的历史数据计算，固定存储为 HDF5 格式，<br>
（2）分钟、tick 周期等高频数据指标计算，历史数据计算和实时指标计算两部分<br></p><p>1.4 绩效分析服务<br>
　　回测数据格式对接，满足策略研究的评价；实盘数据格式对接，满足实盘运行的监控。<br>
1.4.1 净值数据分析<br>
（1）年化波动率,日收益波动率,月收益波动率，该值表明因子对收益率贡献的波动程度<br>
（2）日收益率分布,月收益率分布,正收益天数,负收益天数,日胜率,月胜率,峰度,偏度<br>
（3）最大回撤<br>
（4）夏普比率,calmar 比率,特雷诺比率,索提诺比率<br>
（5）beta,跟踪误差,信息比率<br>
1.4.2 交易数据分析<br>
（1）也针对回测的：滑点损失<br>
（2）总交易次数、日均交易次数、胜率（个股从建仓到完全平仓）、平均持仓周期、换手率、交易费用、总交易金额<br>
（3）分每只股票统计，交易数量、金额、时间<br>
1.4.3 持仓数据分析<br>
（1）持仓行业市值、占比<br>
（2）持仓估值风格分析<br>
（3）持仓综合风格分析<br>
1.4.4 绩效归因<br>
（1）多因子归因<br>
　　投资收益分为每个风格（行业）因子收益、特殊收益、日内调仓收益 <br>
（2）brinson 归因<br>
　　投资收益分为基准收益和超额收益，其中超额收益分为：资产配置收益、个股选择收益和交互收益<br>
（3）收益分解<br>
　　市场中性策略,基本分解公式为：总收益=交易收益+选股收益+择时收益+基差收益+交易成本<br>
　　纯股票策略,基本分解公式为：总收益=交易收益+选股收益+择时收益+基准收益+交易成本<br></p><p>下图是总体框架架构。<br><img src="https://github.com/zhanggao2013/AmazingQuant/blob/master/documents/framework_architecture.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li>data_center
<ul><li>to_mongoDB 存放行情、财务等各种数据到 MongoDB 的存储模块</li><li>get_data   策略中从数据库中取数据的接口模块</li></ul></li><li>trade_center
<ul><li>mossion_engine   包含下单任务（event_order）和风控（event_risk_management）两部分的 engine，分别完成下单前的检查和风控</li><li>broker_engine    分为回测时的 simulate 的 broker（主要是 event_deal）撮合成交和连接实盘交易 CTP、xSpeed 等接口两部分</li></ul></li><li>strategy_center
<ul><li>bar_engine       在回测或者交易模式下，用<code>逐 K 线</code>的方式执行每一根 bar 的交易逻辑，可在日线、分钟线、分笔下运行</li></ul></li><li>analysis_center
<ul><li>analysis_engine  对回测形成的交易记录进行分析和可视化，净值、年化收益、alpha、beta、回撤等指标，brison、Fama 等经典模型的实现</li></ul></li></ul><h1><a id="user-content-2 安装配置" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE"></a>2.安装配置</h1><ul><li>MongoDB 3.4 <br>
建议使用 shard，<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fblob%2Fmaster%2Fdocuments%2FMongoDB_config.md">配置启动项示例</a></li><li>pymongo <br>
python 调用 MongoDB</li><li>talib <br>
技术指标计算库</li><li>anaconda <br>
python 3.5 的版本，如果大于 3.5 的版本，ctp 的接口暂时不能用，因为编译问题，后续可以解决</li><li>Linux Ubuntu <br>
开发环境是 ubuntu，当然也可以在 windows 下用，但是数据库的配置和 ctp 等交易接口需要重新做</li><li>安装 AmazingQuant
pip install AmazingQuant  直接安装</li></ul><h1><a id="user-content-3 策略编写" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#3%E7%AD%96%E7%95%A5%E7%BC%96%E5%86%99"></a>3.策略编写</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">#-*- coding: utf-8 -*-</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="c1"># ------------------------------</span></span><span id="LC4" class="line"><span class="c1"># @Time    : 2019/11/14</span></span><span id="LC5" class="line"><span class="c1"># @Author  : gao</span></span><span id="LC6" class="line"><span class="c1"># @File    : example_strategy.py.py</span></span><span id="LC7" class="line"><span class="c1"># @Project : AmazingQuant</span></span><span id="LC8" class="line"><span class="c1"># ------------------------------</span></span><span id="LC9" class="line"><span class="kn">import</span><span class="nn">time</span></span><span id="LC10" class="line"></span><span id="LC11" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.utils.performance_test</span><span class="kn">import</span><span class="n">Timer</span></span><span id="LC12" class="line"><span class="c1"># import strategy 基类</span></span><span id="LC13" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.strategy_center.strategy</span><span class="kn">import</span><span class="o">*</span></span><span id="LC14" class="line"></span><span id="LC15" class="line"><span class="c1"># 取各种数据</span></span><span id="LC16" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.data_center.api_data.get_index_member</span><span class="kn">import</span><span class="n">GetIndexMember</span></span><span id="LC17" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.indicator_center.save_get_indicator</span><span class="kn">import</span><span class="n">SaveGetIndicator</span></span><span id="LC18" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.utils.logger</span><span class="kn">import</span><span class="n">Logger</span></span><span id="LC19" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.environment</span><span class="kn">import</span><span class="n">Environment</span></span><span id="LC20" class="line"></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c1"># 继承 strategy 基类</span></span><span id="LC23" class="line"><span class="k">class</span><span class="nc">MaStrategy</span><span class="p">(</span><span class="n">StrategyBase</span><span class="p">):</span></span><span id="LC24" class="line"><span class="k">def</span><span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">strategy_name</span><span class="o">=</span><span class="s">'ma_strategy'</span><span class="p">):</span></span><span id="LC25" class="line"><span class="s">"""</span></span><span id="LC26" class="line"><span class="s">        用户定义类变量</span></span><span id="LC27" class="line"><span class="s">        取本地数据</span></span><span id="LC28" class="line"><span class="s">        :param strategy_name:</span></span><span id="LC29" class="line"><span class="s">        """</span></span><span id="LC30" class="line"><span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">strategy_name</span><span class="o">=</span><span class="n">strategy_name</span><span class="p">)</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1"># 取指数成分股实例</span></span><span id="LC33" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="o">=</span><span class="n">GetIndexMember</span><span class="p">()</span></span><span id="LC34" class="line"><span class="c1"># 取 K 线数据实例</span></span><span id="LC35" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">data_class</span><span class="o">=</span><span class="n">GetKlineData</span><span class="p">()</span></span><span id="LC36" class="line"><span class="c1"># 取指标实例</span></span><span id="LC37" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="o">=</span><span class="n">SaveGetIndicator</span><span class="p">()</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="c1"># 取指标数据</span></span><span id="LC40" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">ma5</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">get_indicator</span><span class="p">(</span><span class="s">'ma5'</span><span class="p">)</span></span><span id="LC41" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">ma10</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">get_indicator</span><span class="p">(</span><span class="s">'ma10'</span><span class="p">)</span></span><span id="LC42" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span></span><span id="LC43" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="o">=</span><span class="n">Logger</span><span class="p">(</span><span class="n">strategy_name</span><span class="p">)</span></span><span id="LC44" class="line"></span><span id="LC45" class="line"><span class="k">def</span><span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span></span><span id="LC46" class="line"><span class="c1"># 设置运行模式，回测或者交易</span></span><span id="LC47" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">run_mode</span><span class="o">=</span><span class="n">RunMode</span><span class="p">.</span><span class="n">BACKTESTING</span><span class="p">.</span><span class="n">value</span></span><span id="LC48" class="line"><span class="c1"># 设置回测资金账号</span></span><span id="LC49" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="o">=</span><span class="p">[</span><span class="s">'test0'</span><span class="p">]</span></span><span id="LC50" class="line"><span class="c1"># 设置回测资金账号资金量</span></span><span id="LC51" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">capital</span><span class="o">=</span><span class="p">{</span><span class="s">'test0'</span><span class="p">:</span><span class="mi">2000000</span><span class="p">}</span></span><span id="LC52" class="line"><span class="c1"># 设置回测基准</span></span><span id="LC53" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">benchmark</span><span class="o">=</span><span class="s">'000300.SH'</span></span><span id="LC54" class="line"><span class="c1"># 设置复权方式</span></span><span id="LC55" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">rights_adjustment</span><span class="o">=</span><span class="n">RightsAdjustment</span><span class="p">.</span><span class="n">FROWARD</span><span class="p">.</span><span class="n">value</span></span><span id="LC56" class="line"><span class="c1"># 设置回测起止时间</span></span><span id="LC57" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">start</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span></span><span id="LC58" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">end</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span></span><span id="LC59" class="line"><span class="c1"># 设置运行周期</span></span><span id="LC60" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">period</span><span class="o">=</span><span class="s">'daily'</span></span><span id="LC61" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_all_index_members</span><span class="p">()</span></span><span id="LC62" class="line"><span class="n">_</span><span class="p">,</span><span class="n">index_members_all</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_index_members</span><span class="p">(</span><span class="s">'000300.SH'</span><span class="p">)</span></span><span id="LC63" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">universe</span><span class="o">=</span><span class="n">index_members_all</span></span><span id="LC64" class="line"></span><span id="LC65" class="line"><span class="c1"># 设置在运行前是否缓存日线，分钟线等各个周期数据</span></span><span id="LC66" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">daily_data_cache</span><span class="o">=</span><span class="bp">True</span></span><span id="LC67" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">universe</span><span class="p">)</span></span><span id="LC68" class="line"></span><span id="LC69" class="line"><span class="c1"># 回测滑点设置，按固定值 0.01,20-0.01 = 19.99;百分比 0.01,20*(1-0.01) = 19.98;平仓时用'+'</span></span><span id="LC70" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_slippage</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">slippage_type</span><span class="o">=</span><span class="n">SlippageType</span><span class="p">.</span><span class="n">SLIPPAGE_FIX</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="c1"># 回测股票手续费和印花税，卖出印花税，千分之一；开仓手续费，万分之三；平仓手续费，万分之三，最低手续费，５元</span></span><span id="LC73" class="line"><span class="c1"># 沪市，卖出有万分之二的过户费，加入到卖出手续费</span></span><span id="LC74" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_commission</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK_SH</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">tax</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span><span class="n">open_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC75" class="line"><span class="n">close_commission</span><span class="o">=</span><span class="mf">0.00032</span><span class="p">,</span></span><span id="LC76" class="line"><span class="n">close_today_commission</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min_commission</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span><span id="LC77" class="line"><span class="c1"># 深市不加过户费</span></span><span id="LC78" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_commission</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK_SZ</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">tax</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span><span class="n">open_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC79" class="line"><span class="n">close_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC80" class="line"><span class="n">close_today_commission</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min_commission</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span><span id="LC81" class="line"></span><span id="LC82" class="line"><span class="k">def</span><span class="nf">handle_bar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">event</span><span class="p">):</span></span><span id="LC83" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'self.time_tag'</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">,</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">(),</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">)</span></span><span id="LC84" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">bar_position_data_list</span><span class="p">))</span></span><span id="LC85" class="line"><span class="c1"># 取当前 bar 的持仓情况</span></span><span id="LC86" class="line"><span class="k">with</span><span class="n">Timer</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span></span><span id="LC87" class="line"><span class="n">available_position_dict</span><span class="o">=</span><span class="p">{}</span></span><span id="LC88" class="line"><span class="k">for</span><span class="n">position</span><span class="ow">in</span><span class="n">Environment</span><span class="p">.</span><span class="n">bar_position_data_list</span><span class="p">:</span></span><span id="LC89" class="line"><span class="n">available_position_dict</span><span class="p">[</span></span><span id="LC90" class="line"><span class="n">position</span><span class="p">.</span><span class="n">instrument</span><span class="o">+</span><span class="s">'.'</span><span class="o">+</span><span class="n">position</span><span class="p">.</span><span class="n">exchange</span><span class="p">]</span><span class="o">=</span><span class="n">position</span><span class="p">.</span><span class="n">position</span><span class="o">-</span><span class="n">position</span><span class="p">.</span><span class="n">frozen</span></span><span id="LC91" class="line"><span class="n">index_member_list</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_index_member_in_date</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">)</span></span><span id="LC92" class="line"></span><span id="LC93" class="line"><span class="n">close_price_all</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">data_class</span><span class="p">.</span><span class="n">get_market_data</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">daily_data</span><span class="p">,</span><span class="n">stock_code</span><span class="o">=</span><span class="n">index_member_list</span><span class="p">,</span></span><span id="LC94" class="line"><span class="n">field</span><span class="o">=</span><span class="p">[</span><span class="s">'close'</span><span class="p">],</span></span><span id="LC95" class="line"><span class="n">start</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">)</span></span><span id="LC96" class="line"><span class="c1"># 循环遍历股票池</span></span><span id="LC97" class="line"><span class="k">for</span><span class="n">stock</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC98" class="line"><span class="c1"># 取当前股票的收盘价</span></span><span id="LC99" class="line"><span class="n">close_price</span><span class="o">=</span><span class="n">close_price_all</span><span class="p">[</span><span class="s">'close'</span><span class="p">][</span><span class="n">stock</span><span class="p">]</span></span><span id="LC100" class="line"><span class="k">if</span><span class="n">close_price</span><span class="p">:</span></span><span id="LC101" class="line"><span class="n">ma5</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ma5</span><span class="p">[</span><span class="n">stock</span><span class="p">][</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">]</span></span><span id="LC102" class="line"><span class="n">ma20</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ma10</span><span class="p">[</span><span class="n">stock</span><span class="p">][</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">]</span></span><span id="LC103" class="line"><span class="k">if</span><span class="n">ma5</span><span class="ow">and</span><span class="n">ma20</span><span class="p">:</span></span><span id="LC104" class="line"><span class="c1"># 如果 5 日均线突破 20 日均线，并且没有持仓，则买入这只股票 100 股，以收盘价为指定价交易</span></span><span id="LC105" class="line"><span class="k">if</span><span class="n">ma5</span><span class="o">&gt;</span><span class="n">ma20</span><span class="ow">and</span><span class="n">stock</span><span class="ow">not</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span><span class="ow">and</span><span class="n">stock</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC106" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">trade</span><span class="p">.</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC107" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC108" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC109" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'buy'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC110" class="line"><span class="c1"># 如果 20 日均线突破 5 日均线，并且有持仓，则卖出这只股票 100 股，以收盘价为指定价交易</span></span><span id="LC111" class="line"><span class="k">elif</span><span class="n">ma5</span><span class="o">&lt;</span><span class="n">ma20</span><span class="ow">and</span><span class="n">stock</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span></span><span id="LC112" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">trade</span><span class="p">.</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=-</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC113" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC114" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC115" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'sell'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC116" class="line"><span class="k">for</span><span class="n">stock</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span></span><span id="LC117" class="line"><span class="k">if</span><span class="n">stock</span><span class="ow">not</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC118" class="line"><span class="n">Trade</span><span class="p">(</span><span class="bp">self</span><span class="p">).</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=-</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC119" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC120" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC121" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'sell not in index_member_list'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC122" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC123" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span></span><span id="LC124" class="line"></span><span id="LC125" class="line"></span><span id="LC126" class="line"><span class="k">if</span><span class="n">__name__</span><span class="o">==</span><span class="s">'__main__'</span><span class="p">:</span></span><span id="LC127" class="line"><span class="c1"># 测试运行完整个策略所需时间，沪深 300 动态股票池，一年数据，均线策略,10s 完成,10S 绩效分析</span></span><span id="LC128" class="line"><span class="k">with</span><span class="n">Timer</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span></span><span id="LC129" class="line"><span class="c1"># 运行策略，设置是否保存委托，成交，资金，持仓</span></span><span id="LC130" class="line"><span class="n">ma_strategy</span><span class="o">=</span><span class="n">MaStrategy</span><span class="p">()</span></span><span id="LC131" class="line"><span class="n">ma_strategy</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">save_trade_record</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></span><span id="LC132" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-4 联系方式" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#4%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F"></a>4.联系方式</h1><ul><li>微信号 (转发我的公众号文章后，可加入微信群):：<br>
gao_me150 <br></li><li>微信公众号：<br>
水善量化说<br><img src="https://github.com/zhanggao2013/AmazingQuant/blob/master/documents/wechat.jpg" alt="" referrerpolicy="no-referrer"></li></ul>]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 08:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/zhanggao2013/AmazingQuant</guid>
            <link>https://gitee.com/zhanggao2013/AmazingQuant</link>
        </item>
        <item>
            <title>
                <![CDATA[Qt for MCUs 2.6 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Qt for MCUs 2.6 <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fqt-for-mcus-2.6-released" target="_blank">已正式发布</a></u>。</p><p><img alt="" height="209" src="https://oscimg.oschina.net/oscnet/up-1d29cb32cd9a03916a5df5f55447b185ac5.png" width="400" referrerpolicy="no-referrer"></p><p><strong>主要变化</strong></p><ul><li>新增适用于 Qt Quick Ultralite 的新 QML API</li><li>全新基准测试功能以性能作为核心</li><li>支持文件系统（技术预览阶段）<br><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-7b08c587742518ad46f54d307a19f79b004.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li><li>GHS MULTI IDE 集成汽车工具<br><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-e4a8e70cbfb8132bdd2875d44b56ff8d0a0.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li><li>支持 AUTOSAR Classic<br><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-d2e6120102dc2cb439a25080c1d3142d307.png" referrerpolicy="no-referrer"><p>&nbsp;</p></li></ul><p>公告写道，新版本引入代码生成优化是为了减少生成的 C++ 代码中的冗余，进而将大多数应用程序的 .text 部分大小减少 1% 到 8%，从而降低总体 ROM/闪存要求。</p><p>此外，AnimatedSprite 实现进行了一些改进，以查找和优化帧之间的多个独特区域，从而进一步减少存储多个帧以显示启动序列等复杂动画所需的闪存占用空间。</p><p>最后，Qt for MCU 2.7 将于明年 3 月推出，官方称计划通过引入新功能和性能提升来继续改进框架。预计未来版本中的一些令人兴奋的功能包括：全功能虚拟键盘、静态全屏 GUI 旋转、渐变、硬件加速 JPEG、支持自定义图像解码器、CMSIS 包等等。</p><p>详情查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.qt.io%2FQtForMCUs-2.6%2Fqtul-changes.html" target="_blank"><u>Changelog</u></a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 08:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265905/qt-for-mcus-2-6-released</guid>
            <link>https://www.oschina.net/news/265905/qt-for-mcus-2-6-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GitHub 发布开源编程字体家族 Monaspace]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GitHub 推出了名为「Monaspace」的开源等宽编程字体家族。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/120711_f6hb_2720166.png" referrerpolicy="no-referrer"></p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmonaspace.githubnext.com%2F" target="_blank">https://monaspace.githubnext.com/</a></u></em></p><blockquote>
 「字体家族」（typeface / font family）和 「单款字体」（font）是不同的概念，虽然通常习惯将两者都称作 「字体」，但一个字体家族通常包含多个单款字体，字型之间以字重（粗细）、风格（正斜体）等设置区分开来。
 <br><br> 简而言之，「字体家族」 是一整套的设计，其中包含若干款 「字体」，即单独的字体文件。
</blockquote><p>根据介绍，「GitHub Monaspace」作为字体家族，整体可分为<strong>「静态」和「可变」</strong>两种类型。</p><ul><li><code>Monaspace _____</code>代表<strong>静态</strong></li><li><code>Monaspace _____ Var</code>或<code>VF</code>代表<strong>可变</strong></li></ul><p>其中「可变」字体的每个系列都包含一个文件（Neon、Argon 等）。GitHub Monaspace 总共包含 5 种字体，由于它们的属性相互兼容，因此可以混搭使用。</p><p>官方介绍道，等宽字体通常彼此不兼容。因为每个字体都使用不同的字型度量，所以无法对不同的字体进行混用。不过 GitHub Monaspace 的每款字体都经过精心设计，支持无缝混搭使用和匹配。通过超越颜色和更大胆的权重的调色板，为代码赋予更多含义，为需要更多结构和层次结构的代码构建接口。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121225_m9Kc_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121823_4wpr_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1110/123709_02AU_2720166.png" referrerpolicy="no-referrer"></p><p>下面是单独使用 Xe 字体的效果：</p><p><img height="1228" src="https://static.oschina.net/uploads/space/2023/1110/121353_QrHp_2720166.png" width="1716" referrerpolicy="no-referrer"></p><p>开发者可基于上述 5 种字体任意搭配组合使用，如下：</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121517_ONNu_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265861</guid>
            <link>https://www.oschina.net/news/265861</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[亚马逊开发基于 Linux 的操作系统，以摆脱 Android 依赖]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Lowpass 记者 Janko Roettgers 从多方消息来源<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lowpass.cc%2Fp%2Famazon-vega-os-fire-tv-android" target="_blank">得知</a>，亚马逊一直在开发一种新的操作系统 —— 内部代号为「Vega」，以便在 Fire TV、智能显示器和其他联网设备上取代 Android 系统。</span></p><p><span style="color:#000000">一直以来，亚马逊的一些智能家居设备都使用了名为 Fire OS 的 Android 分叉版本。但也正是因为依赖 Android 开源项目来构建 Fire OS，导致该公司操作系统的开发落后于谷歌多年。</span></p><p><span style="color:#000000">而 Vega 并不是一个新的 Android 分叉，也不是基于 AOSP，「是一种基于 Linux 的风格，并采用了一种更加面向网络的应用模式。应用程序开发人员被告知使用 React Native 作为应用程序框架，这样他们就可以使用 Javascript 驱动的界面来构建本地应用程序。」</span></p><p><img height="333" src="https://static.oschina.net/uploads/space/2023/1110/120051_g6gS_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">目前，亚马逊设备操作系统部门已有"数百人"在致力于新操作系统的开发，其中就包括前 Mozilla 工程师和 Javascript 专家 Zibi Braniecki。Branieck 于 2022 年初加入亚马逊从事 Alexa 工作，然后在 2023 年初过渡到设备操作系统团队。他当时曾在 LinkedIn 上透露，自己正在「为智能家居、汽车和其他亚马逊设备产品线开发下一代操作系统」。</span></p><p><span style="color:#000000">Roettgers 指出，Vega 开发进度似乎相当快。该系统已经在 Fire TV 流媒体适配器上进行了测试，且亚马逊已向部分合作伙伴透露了在不久的将来过渡到新应用框架的计划。</span></p><p><span style="color:#000000">一位了解该公司计划的消息人士表示，亚马逊最早可能会在明年开始在部分 Fire TV 设备上搭载 Vega。SDK 也正在准备发布，以便开发人员在 Vega 上市前将他们的应用程序移植到 Vega 上。</span></p><p><span style="color:#000000">此外，消息称亚马逊的<strong>最终目标是在其所有的新设备上摆脱对 Android 的依赖</strong>。Vega 不仅可以在 Fire TV 和智能显示器上运行，还可以在车载娱乐系统和其他未来的硬件产品上运行。亚马逊发布的多份招聘信息显示，Vega 将成为其汽车业务的关键。</span></p><p><span style="color:#000000">Vega 的出现，也帮助亚马逊避免了与谷歌的进一步冲突。Roettgers 称，两家公司长期以来一直为亚马逊使用 Android 系统的问题争吵不休，谷歌曾一度向硬件制造商施压，要求他们不要生产搭载亚马逊系统的智能电视。直到后来两家公司达成协议，允许亚马逊与海信和 TCL 等电视机制造商合作」，但亚马逊放弃 Android 系统后，应该能更好地掌控自己的命运。「</span></p><p><span style="color:#000000">不过一些业内人士认为，<span style="background-color:#ffffff">竞争压力可能并不是亚马逊转向 Vega 的主要原因。亚马逊真正关心的是如何在各种廉价设备上吸引数亿眼球，然后通过广告和服务将其货币化--而内置定制操作系统可能正是实现这一目标的最佳途径。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 08 Nov 2023 04:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265858/amazon-vega-linux-based-os</guid>
            <link>https://www.oschina.net/news/265858/amazon-vega-linux-based-os</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 中国版——「团结引擎」全面支持 OpenHarmony]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Unity 中国<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPtRYKloNoBFpicvPGiDFgw" target="_blank">宣布</a></u>与开放原子开源基金会达成平台级战略合作。</p><p><strong>据称团结引擎已全面支持 OpenHarmony 操作系统</strong>，同时将为 OpenHarmony 生态快速带来更多高品质游戏与实时 3D 内容。Unity 称现在用户可以「在 OpenHarmony 框架中感受到与安卓和 iOS 同样丝滑的游戏体验」。</p><p>目前，<strong>团结引擎已全面适配 OpenHarmony 各项系统能力</strong>，包括但不限于 Ability 框架适配、XComponent 能力适配、ArkUI 适配等等。同时，开发者可以通过团结引擎完成底层渲染架构、文件系统、触控系统和音视频等系统能力相适配。</p><p>据介绍，Unity 中国引擎研发团队将引擎原来的各项能力在 OpenHarmony 上进行实现，从而兼容原来所有的接口及逻辑实现。现在，开发者可以直接通过 Editor 导出 Ability Project 用于 Deveco Studio 的开发，也能直接打包出安装包，加速项目的适配开发。</p><p>出包环节，团结引擎延用了 Unity 2022 LTS 版本的高效打包流程，确保开发者不会在陌生的环境下进行打包操作，降低学习成本。通过在团结引擎中新增的 "OpenHarmony 平台"&nbsp;的 BuildTarget，开发者能够<strong>一键切换平台和构建出包</strong>，可使得项目组在不增加额外人手和时间成本的基础上，快速完成出包、审核、上架的流程。</p><hr><p>团结引擎是 Unity 中国研发团队推出的 Unity 中国版引擎，它以<strong>Unity 2022 LTS</strong>为研发基础。上个月，<u><a href="https://www.oschina.net/news/261999">「团结引擎」开启内测</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 10:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265946</guid>
            <link>https://www.oschina.net/news/265946</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stability AI 再融资 5000 万美元，英特尔领投]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span style="color:#000000">彭博社援引消息人士的话</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-09%2Fstability-ai-gets-intel-backing-in-new-financing%3Fsrnd%3Dtechnology-ai" target="_blank"><span style="color:#2980b9">报道称</span></a><span style="color:#000000">，AI 初创公司 Stability AI 已获得了由英特尔领投的新一轮融资。该公司在这笔交易中以可转换票据的形式筹集了近 5000 万美元，交易于 10 月份完成。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 是 Stable Diffusion 背后的公司，Stable Diffusion 是一个文本转图像模型，是除 OpenAI 之外其他较为流行的生成式 AI 工具之一。</span></p><p style="color:#494949"><span style="color:#000000">彭博社指出，此次现金注入正值 Stability AI 的关键时刻，因为该公司最近遇到了一些挑战。一方面是公司高层出现了一些更替，解雇了包括人力资源主管在内的六名高级员工。</span></p><p style="color:#494949"><span style="color:#000000">另一方面则是董事会代表之间存在一些分歧。Stability AI 的主要投资者 Coatue Management 对其首席执行官 Emad Mostaque 的领导能力有些意见，并考虑增加一名联合首席执行官或总裁。</span></p><p style="color:#494949"><img height="219" src="https://static.oschina.net/uploads/space/2023/1110/153216_qixm_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#494949"><span style="color:#000000">知情人士透露，Coatue 已于 10 月离开了 Stability AI 董事会。并表示原因在于英特尔对 Stability 的投资，因为 Coatue 持有英特尔的竞争对手 AMD 公司的大量股份。目前 Coatue 公司仍持有 Stability 公司 5000 万美元的股份。</span></p><p style="color:#494949"><span style="color:#000000">另一位投资者 Lightspeed Venture Partners 的 Gaurav Gupta 最近也辞去了 Stability AI 董事会观察员的职务，原因是他与管理层在公司发展方向上存在意见分歧。目前，Coatue 和 Lightspeed 的代表都拒绝对此发表评论。</span></p><p style="color:#494949"><span style="color:#000000">此外，Stability AI 还面临联合创始人 Cyrus Hodes 的诉讼，他声称自己在 Stability AI 达到 10 亿美元估值里程碑之前被欺骗以低估值出售了手中的股票。但 Stability AI 对这些说法提出了异议。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 对其未来前景表示乐观。该公司声称，员工流动是初创企业生态系统中的正常现象，并强调其对董事会成员的指导和专业知识的重视。还进一步强调了其显着的收入增长，称其在过去一年中增长了十倍，并预测随着其推出更多产品，到年底收入将进一步扩大。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 发言人在一份声明中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pymnts.com%2Fartificial-intelligence-2%2F2023%2Freport-stability-ai-secures-50-million-in-financing%2F" target="_blank">表示</a>： 「Stability AI 公司正以强劲、健康的态势继续其在生成式 AI 领域的世界领先工作。去年，我们的收入增长了十倍，随着我们继续推出新产品，我们的目标是在今年年底前进一步增长。我们是全球唯一一家独立、开源、多模态（图像、语言、代码、三维、音频）人工智能公司。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265920/stability-ai-intel-50-million</guid>
            <link>https://www.oschina.net/news/265920/stability-ai-intel-50-million</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国电信发布千亿级参数星辰语义大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span><span style="color:#222222">在 2023 数字科技生态大会上，中国</span><span style="color:#222222">国电信发布千亿级参数规模的星辰语义大模型。同时，星辰多模态大模型、星辰系列行业大模型也一并亮相。</span></span></p><p style="color:#494949"><span><span style="color:#222222">根据介绍，星辰语义大模型是中国电信自研大模型的升级，由此前的百万参数量级升至千亿，升级后在抑制幻觉、外推窗口、交互体验、多轮理解能力上均有所提升。</span></span></p><p style="color:#494949"><span><span style="color:#222222">技术方面，星辰语义拥有超 12 亿风格数据、训练显存降低 50%、推理提速 4.5 倍；中文意象理解生成能力提升 30%；语义细粒度生成效果提升 25%。在创意提效方面，星辰语义生产时间较此前生产工具减少 92%；设计成本下降 95%。</span></span></p><p style="color:#494949"><span><span style="color:#222222">中国电信方面表示，计划于今年 12 月开源百亿参数大模型；2024 年 4 月开源千亿参数大模型，明年 3 月实现平台工具的开放。</span></span></p><p style="color:#494949"><span><span style="color:#222222">此外，中国电信还在会议现场陆续发布了一连串产品及平台，其中一站式智算服务平台「慧聚」可实现模型开发、任务管理、模型优化、服务部署、模型服务等多项功能；中国电信「天衍」量子计算云平台则具备指数级加速大模型训练速率的潜力。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 06:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265881</guid>
            <link>https://www.oschina.net/news/265881</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[诺基亚在开源云平台 Sylva 成功进行 5G 独立组网测试]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>诺基亚<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nokia.com%2Fabout-us%2Fnews%2Freleases%2F2023%2F11%2F09%2Fnokia-conducts-successful-tests-of-5g-standalone-core-with-orange-on-sylva-open-source-cloud-stack%2F" target="_blank">发布新闻稿称</a></u>，他们与电信运营商 Orange 共同合作，在开源云平台 Sylva 成功进行了 5G 独立组网 (5G Standalone Core, 5G SA) 测试。</p><p>文章提到诺基亚 5G SA 核心网络功能的互操作性测试在法国 Orange 的 Sylva 验证中心成功完成。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/140712_6l0n_2720166.png" referrerpolicy="no-referrer"></p><p>据介绍，Sylva 的整体目标是提供一个可被广泛使用的开源云平台，专为电信和边缘计算场景而定制，以解决行业的技术挑战。 Sylva 于 2022 年底在 Linux 欧洲基金会旗下推出，其支持者包括诺基亚和 Orange。</p><p>测试验证是提供灵活的云原生解决方案的关键一步，该解决方案可实现 5G SA 核心网络功能的大规模部署。对于 5G 专用无线企业客户，Sylva 旨在提供一种在边缘设备部署工业 4.0、物联网和 B2B2X 用例的有效方法。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/142112_gnv5_2720166.png" referrerpolicy="no-referrer"></p><p>诺基亚核心网络、云和网络服务高级副总裁兼总经理 Fran Heeran 表示：「诺基亚完全云原生的核心网络产品组合旨在通过开放、灵活的部署选项来支持不断发展的电信云环境，同时大大减少集成度，以及提供先进的自动化能力。由 Orange 主办的 Sylva 验证中心成功完成了 5G SA 核心用户平面功能 (User Plane Function) 的互操作性测试，这突显了我们的承诺和我们正在取得的进步。」</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 06:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265875</guid>
            <link>https://www.oschina.net/news/265875</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心一言用户规模已达 7000 万]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在前沿数字技术创新与安全论坛和人工智能赋能产业发展论坛上，百度 CTO 王海峰</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FbH6zON1itJDh9bwCAeLfWw" target="_blank"><span style="color:#2980b9">披露</span></a><span style="color:#000000">，文心一言自 8 月 31 日面向全社会开放至今，用户规模现已达到 7000 万，场景 4300 个，应用 2492 个。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://static.oschina.net/uploads/space/2023/1110/115002_eScQ_4252687.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">王海峰表示，人工智能是新一轮科技革命和产业变革的重要驱动力量，深度学习作为人工智能的核心技术，具有很强的通用性，并具备标准化、自动化和模块化的工业大生产特征，而大模型的兴起，使得人工智能应用的深度和广度进一步拓展。人工智能已进入工业大生产阶段。</span></p><p><span style="color:#000000">例如，标准化方面，框架和模型联合优化，多硬件统一适配，应用模式简洁高效，大幅降低人工智能应用门槛；自动化方面，从训练、适配，到推理部署，提升人工智能研发全流程效率；模块化方面，丰富的产业级模型库，支撑人工智能在广泛场景的便捷应用。</span></p><p><span style="color:#000000">王海峰认为，人工智能具有多种典型能力，理解、生成、逻辑、记忆是其中的基础能力，这四项能力越强，越接近通用人工智能，而大语言模型具备了这四项能力，且越来越强，为通用人工智能带来了曙光。</span></p><p><span style="color:#000000">面对大模型产业化的挑战，王海峰表示，类似芯片代工厂模式，可以采用「集约化生产，平台化应用」的模式，即具有算法、算力和数据综合优势的企业将模型生产的复杂过程封装起来，通过低门槛、高效率的生产平台，为千行百业提供大模型服务。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 02:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265847</guid>
            <link>https://www.oschina.net/news/265847</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 获 100 万欧元投资]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">GNOME 基金会<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffoundation.gnome.org%2F2023%2F11%2F09%2Fgnome-recognized-as-public-interest-infrastructure%2F" target="_blank">宣布</a></u>收到了来自「<span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund</span>」的 100 万欧元投资，并表示这笔资金将用于实现平台现代化、改进工具和可访问性，并支持符合公共利益的功能。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img src="https://static.oschina.net/uploads/space/2023/1110/122408_NeTS_2720166.png" referrerpolicy="no-referrer"></p><p>具体包括：</p><ul><li>改进当前的可访问性状态</li><li>设计新的辅助功能堆栈并制作原型</li><li>支持单独加密 user 主目录</li><li>实现现代化的秘密存储</li><li>扩大硬件支持的范围和质量</li><li>为质量保证和开发者体验投入资源</li><li>扩展和拓宽 freedesktop API</li><li>整合和改进平台组件</li></ul><p><span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund 是</span>德国政府资助的一项计划，由 Adriana Groh 和 Fiona Krakenbürg 运营，他们在国家和国际层面拥有「多年推广开源技术的经验」。目标是支持「开源数字基础设施的开发、改进和维护」，这与 GNOME 项目的协同作用是显而易见的。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/122533_HxD1_2720166.png" referrerpolicy="no-referrer"></p><p>他们在官方网站写道：「.....开源生态虽然非常成功，但也越来越脆弱。因为使用开源软件的人永远比为该软件做出贡献的人多。现在是投资数字共享、志愿者社区和开源来建设我们希望看到的数字世界的时候了。」</p><p><span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund 投资过的项目</span>包括 curl、Fortran、WireGuard、OpenSSH、Yocto，以及与 OpenJS 基金会合作「改进 Javascript 生态基础设施和安全性」。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 02:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265839/gnome-sovereign-tech-fund</guid>
            <link>https://www.oschina.net/news/265839/gnome-sovereign-tech-fund</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
