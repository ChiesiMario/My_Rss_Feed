<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 17 Oct 2023 17:16:59 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[🎁有獎問答 | 大數據時代下機器學習的新範式]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4700705_2331198">高手問答第 307 期 —— 大數據時代下機器學習的新範式</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4700705" class="__user"><span>小白兔愛吃大灰狼</span></a> 發佈於，昨天 15:41
                    </div><div class="item">閲讀 146</div><div class="item collect-btn " data-id="2331198" data-user-id="4700705" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331198" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4700705_2331198#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">2</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手問答</a></div><div class="content" id="articleContent"><p class="ad-wrap"><a data-traceid="question_detail_above_text_link_ad" data-tracepid="question_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></p><div>
  在大數據時代，數據的數量和複雜性都呈指數級增長。然而，這些數據往往分散在不同的組織和個人之間，限制了數據的利用和挖掘。此時，聯邦學習應運而生。它是 
 <strong>一種新興的機器學習方法</strong>，允許多個參與方共同訓練模型。在大數據時代和人工智能的發展下，聯邦學習成為了應對數據分散和隱私保護的有效解決方案，在醫療、金融、推薦等領域都有廣泛的應用。 
</div><div>
  &nbsp; 
</div><div><strong>OSCHINA 本期高手問答 (10 月 18 日 - 10 月 24 日) 我們請來了 <a href="https://my.oschina.net/u/6662337" rel="nofollow">PrimiHub 開源</a> 和大家一起探討關於「聯邦學習技術」的問題。可討論的問題包括但不限於：</strong></div><ol><li><div>
    什麼是聯邦學習？與分佈式訓練的區別和聯繫 
  </div></li><li><div>
    聯邦學習的場景：包括但不限於橫向 / 縱向聯邦、跨企業、跨設備等 
  </div></li><li><div>
    當前聯邦學習面臨的問題：計算 / 通信複雜度、數據分佈不均衡、安全隱私、公平性等 
  </div></li><li><div>
    聯邦學習入門學習、上手開發的建議 
  </div></li></ol><div><span style="background-color:#ffffff; color:#333333"><span style="background-color:white"><span><span><span><span>如有其他</span></span></span></span></span></span>「聯邦學習技術」 
 <span style="background-color:#ffffff; color:#333333"><span style="background-color:white"><span><span><span><span>相關的問題，也歡迎提問</span></span></span></span></span><span>&nbsp;</span></span><span style="background-color:#ffffff; color:#333333">！</span></div><div>
  &nbsp; 
</div><div><h2>嘉賓介紹</h2><div><img alt="" height="360" src="https://oscimg.oschina.net/oscnet/up-0687d700c7f88df15e0ff46a3028e2e33ac.jpg" width="360" referrerpolicy="no-referrer"></div><div>
   許雪峯，北航網絡安全碩士，北京原語科技隱私計算工程師。從事聯邦學習、差分隱私相關算法開發工作。熱愛技術和開源，曾多次為知名開源機器學習框架 scikit-learn 貢獻代碼。 
 </div><div>
   &nbsp; 
 </div><div>
   🎁 為了鼓勵踴躍提問， 
  <span style="color:#245bdb"><a href="https://my.oschina.net/u/6662337" rel="nofollow">原語科技 PrimiHub </a></span>會在問答結束後從提問者中抽取 5 名幸運會員，贈予 PrimiHub 定製筆記本禮盒 3 件套（內含：筆記本 * 1、金屬簽字筆 * 1、U 盤 * 1）。 
 </div><div><img alt="" height="234" src="https://oscimg.oschina.net/oscnet/up-a028c41d78f45ab688976a3135835470f2e.png" width="360" referrerpolicy="no-referrer"></div><div>
   &nbsp; 
 </div><div><p><span style="background-color:#ffffff; color:#27ae60">OSChina 高手問答一貫的風格，不歡迎任何與主題無關的討論和噴子。</span></p><p>下面歡迎大家就 「聯邦學習技術」 相關問題向<span>&nbsp;<a href="https://my.oschina.net/u/6662337" rel="nofollow">PrimiHub&nbsp;</a></span><a href="https://my.oschina.net/u/6662337" rel="nofollow">許雪峯老師</a> 提問，直接回帖提問既可。</p><blockquote><div><p><img alt="" height="143" src="https://oscimg.oschina.net/oscnet/up-60c5967156b3dba3ef12d93811acf8c846d.jpg" width="500" referrerpolicy="no-referrer"></p></div><div><strong>PrimiHub</strong><span>&nbsp;</span>作為一款由密碼學專家團隊打造的開源隱私框架，具有以下特性： 
   </div><ul><li><div><strong>開源</strong>：完全開源、免費 
     </div></li><li><div><strong>自主研發</strong>：安全多方計算、聯邦學習、同態加密、可信計算等隱私計算技術 
     </div></li><li><div><strong>開箱即用</strong>：擁有 Web 界面、命令行和 Python SDK 等多種使用方式 
     </div></li><li><div><strong>功能豐富</strong>：支持隱匿查詢、隱私求交、聯合統計、數據資源管理等功能 
     </div></li><li><div><strong>靈活配置</strong>：支持自定義擴展語法、語義、安全協議等 
     </div></li></ul><div>
     GitHub 地址：https://github.com/primihub/primihub 
   </div></blockquote></div></div></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331198" data-user-id="4700705" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331198" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331198" data-obj-type="2" data-url="https://www.oschina.net/question/4700705_2331198"><i class="flag red icon"></i>舉報</a></div></div>
            ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 10:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4700705_2331198</guid>
            <link>https://www.oschina.net/question/4700705_2331198</link>
        </item>
        <item>
            <title>
                <![CDATA[1Panel 開源面板 v1.7.0 發佈，新增 Node.js 運行環境、新增系統緩存清理功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p style="color:#000000; text-align:start">2023 年 10 月 16 日，現代化、開源的 Linux 服務器運維管理面板 1Panel 正式發佈 v1.7.0 版本。</p><p style="color:#000000; text-align:start">在這個版本中，1Panel 新增 Node.js 運行環境；新增系統緩存清理功能；應用安裝時支持選擇遠程數據庫。此外，我們進行了 40 多項功能更新和問題修復。1Panel 應用商店新增了 2 款應用，並且更新了 25 款應用。感謝社區用戶們的反饋和支持，使得新版本的 1Panel 功能更加完善。</p><span id="OSC_h1_1"></span><h1>亮點更新</h1><p style="color:#000000; text-align:start"><strong><span style="color:#005eeb">■ 新增 Node.js 運行環境</span></strong></p><p style="color:#000000; text-align:start">1Panel v1.7.0 版本新增 Node.js 運行環境。現在，您可以在 1Panel 上輕鬆創建和管理 Node.js 網站。通過 1Panel，用戶可以輕鬆在幾分鐘內創建 Node.js 項目。1Panel 提供了直觀的設置嚮導，幫助用戶快速啓動應用，無需進行復雜的配置，極大地節省時間和精力。</p><p style="color:#000000; text-align:start">此外，我們提供全面的監控功能，您可以實時追蹤 Node.js 應用程序的性能和運行狀態，及時發現並處理錯誤，保證了應用的健康運營，用戶體驗更佳。</p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/38065f745e1641b08cd9e9fe819faa56~tplv-obj.image?from=1038109144&amp;traceid=202310162015152ABC7A7EAF4B33919008&amp;x-expires=2147483647&amp;x-signature=Qx0p8V1rhBIGwik6rpNTTYDMtjQ%3D" referrerpolicy="no-referrer"></div><div><span>▲圖 1 Node.js 運行環境</span></div><p style="color:#000000; text-align:start"><strong><span style="color:#005eeb">■ 支持系統緩存清理功能</span></strong></p><p style="color:#000000; text-align:start">1Panel v1.7.0 版本支持系統緩存清理功能。用戶可以在 1Panel 上輕鬆清理系統緩存，釋放磁盤空間。目前 1Panel 支持的清理類型包括：</p><p style="color:#000000; text-align:start">1. 系統垃圾：快照、升級等過程中產生的臨時文件，以及版本迭代過程中的廢棄文件；</p><p style="color:#000000; text-align:start">2. 臨時上傳文件：系統上傳備份列表中上傳的臨時文件；</p><p style="color:#000000; text-align:start">3. 臨時下載文件：系統從第三方備份賬號下載的臨時文件；</p><p style="color:#000000; text-align:start">4. 系統日誌文件：系統日誌信息、容器構建或鏡像拉取等日誌信息，以及計劃任務中產生的日誌文件。</p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/b772670df524427498c4725e113e8ef8~tplv-obj.image?from=1038109144&amp;traceid=202310162015152ABC7A7EAF4B33919008&amp;x-expires=2147483647&amp;x-signature=GQY1V4mdaLZvn1kxZoW6Zs061I0%3D" referrerpolicy="no-referrer"></div><div><span>▲圖 2 系統緩存清理</span></div><p style="color:#000000; text-align:start"><strong><span style="color:#005eeb">■ 應用商店</span></strong></p><p style="color:#000000; text-align:start">1Panel v1.7.0 版本的應用商店進行了全面升級，為用戶帶來了更加豐富的功能和更便捷的操作體驗。</p><p style="color:#000000; text-align:start">首先，我們對應用分類進行了精細化的重構，以方便用戶更輕鬆地找到符合其興趣和要求的應用程序。</p><p style="color:#000000; text-align:start">其次，在操作界面方面，用戶可以更快速地瀏覽不同應用，並通過改進的導航功能，輕鬆瀏覽並發現新的應用。</p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-6w9my0ksvp/21545e7958264ae6af222c0b755cd1b2~tplv-obj.image?from=1038109144&amp;traceid=202310162015152ABC7A7EAF4B33919008&amp;x-expires=2147483647&amp;x-signature=e1EqNgIFQf9u86e7a8MS2qFEd8c%3D" referrerpolicy="no-referrer"></div><div><span>▲圖 3 應用商店</span></div><span id="OSC_h1_2"></span><h1>新增功能</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：增加 Node.js 運行環境；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>應用商店：應用安裝時支持選擇遠程數據庫；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>面板設置：增加系統緩存清理功能。</p><span id="OSC_h1_3"></span><h1>功能優化</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：網站主域名支持設置端口；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：反向代理網站配置默認增加協議轉發；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：修改網站日誌的關閉參數；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：優化設置頁面日誌按鈕樣式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：優化運行環境下拉列表樣式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>應用商店：已安裝應用列表支持查看應用日誌；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>應用商店：調整部分已安裝應用的按鈕位置；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>應用商店：增加分類標籤排序；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>應用商店：應用列表頂部增加分頁顯示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>應用商店：增加同步所有應用狀態的提示信息；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>數據庫：支持複製並查看詳細的 Redis 外部連接地址；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>數據庫：統一 MySQL 數據庫設置頁面的樣式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>數據庫：MySQL 部分性能參數區分版本顯示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>數據庫：遠程數據庫增加刪除提示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：修改創建容器頁面選擇掛載卷時的交互方式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器升級操作時支持忽略版本比較；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器鏡像列表增加是否使用標籤的選項；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器鏡像列表增加詳情顯示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>容器：容器列表資源使用率增加詳情顯示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：容器支持自定義控制枱的交互方式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：優化刪除編排彈出框的提示信息；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：優化容器名稱校驗規則；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主機：防火牆範圍端口規則顯示佔用詳情；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>日誌審計：SSH 登錄日誌增加詳情顯示；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>日誌審計：1Panel 系統日誌支持根據日期進行篩選，並支持追蹤讀取；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>面板設置：支持設置服務器默認網卡；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>面板設置：系統授權 IP 支持 IP 段；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>面板設置：兩步驗證區分操作系統，並支持設置標題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>面板設置：優化暗色模式下面板設置的按鈕樣式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系統：系統重啓成功後同步應用商店應用；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系統：優化監控採集方式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系統：統一部分頁面的全屏按鈕樣式；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>系統：緩存部分頁面已設置的分頁條數。</p><span id="OSC_h1_4"></span><h1>Bug 修復</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>網站：修復了域名暫停或者移除後無法重新創建該域名的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：修復了相同域名和端口可以重複添加的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>網站：修復了 HTTP 模式下證書會保存部分錯誤數據的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>應用商店：修復了強制刪除 OpenResty 後沒有同步刪除 PHP 應用的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：修復了編輯存儲卷失敗導致容器丟失的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>容器：修復了編輯容器失敗時未更新容器 ID 的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主機：修復了部分場景下系統防火牆未顯示具體應用佔用情況的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主機：修復了 UFW 防火牆併發導致的批量操作失敗的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>主機：修復了部分操作系統添加防火牆端口備註時不生效的問題；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>系統：修復了演示環境部分功能不能正常查看的問題。</p><span id="OSC_h1_5"></span><h1>應用商店</h1><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>新增 Metabase；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>新增 ShowDoc；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>JumpServer 版本升級至 v3.7.1；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Halo 版本升級至 v2.10.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Jenkins 版本升級至 v2.427；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Alist 版本升級至 v3.28.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>PGAdmin4 版本升級至 v7.7；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Jellyfin 版本升級至 v10.8.11；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Tailchat 版本升級至 v1.9.1；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>RabbitMQ 版本升級至 v3.12.6；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>青龍版本升級至 v2.16.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>MeiliSearch 版本升級至 v1.4.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>EMQX 版本升級至 v5.3.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>VS Code 版本升級至 v4.17.1；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>MongoDB 版本升級至 v7.0.2；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Docker Registry 版本升級至 v2.8.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■</span><span>&nbsp;</span>Nexus Repository 版本升級至 v3.61.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Gitea 版本升級至 v1.20.5；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Memos 版本升級至 v0.16.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Cloudreve 版本升級至 v3.8.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Draw.io 版本升級至 v22.0.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Nextcloud 版本升級至 v27.1.2；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Kodbox 版本升級至 v1.4405；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Uptime Kuma 版本升級至 v1.23.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>ddns-go 版本升級至 v5.6.3；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>Synapse 版本升級至 v1.94.0；</p><p style="color:#000000; text-align:start"><span style="color:#005eeb">■<span>&nbsp;</span></span>AdGuardHome 版本升級至 v0.107.39。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 09:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10118158</guid>
            <link>https://my.oschina.net/u/4736111/blog/10118158</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JetBrains 推出 Writerside，創建技術文檔的工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">JetBrains 宣佈<span style="background-color:#ffffff">以早期訪問狀態</span>推出&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fwriterside%2F" target="_blank">Writerside</a>，一款基於 IntelliJ 平台的 JetBrains IDE，開發人員可使用它編寫、構建、測試和發佈技術文檔。可以作為 JetBrains IDE 中的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplugins.jetbrains.com%2Fplugin%2F20158-writerside" target="_blank">插件</a>使用，也可以作為獨立工具使用。</span></p><p><span style="color:#000000">Writerside 允許開發人員和編寫人員在產品文檔、API 參考、開發人員指南、教程和操作方法方面進行協作；基於人工智能的拼寫檢查和語法糾正工具支持超過 25 種語言，包括英語、德語、西班牙語和中文。</span></p><p><img height="303" src="https://oscimg.oschina.net/oscnet/up-46d13f13538090b99b398e3c34b0636ffce.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Writerside 的一些功能包括：</span></p><ul><li><span style="color:#000000">內置 Git UI。</span></li><li><span style="color:#000000">實時預覽，文檔完全按照讀者所看到的方式顯示，無需等待構建。</span></li><li><span style="color:#000000">支持 Markdown、XML 或兩者的組合使用。開發人員可以注入語義屬性或語義元素來豐富 Markdown，並且 Markdown 元素可以轉換為 XML。</span></li><li><span style="color:#000000">提供外觀的自定義選項，包括選擇深色或淺色模式、對比度、柔和或生動的皮膚，以及定義適合品牌的強調色。作者可以專注於內容，而無需設計佈局和處理 CSS。</span></li><li><span style="color:#000000">附帶 100 多個內置測試，允許 Writerside 自動測試損壞的鏈接、丟失的資源、不正確的屬性值、非唯一 ID 等。具有代碼高亮顯示和驗證功能，以及內置檢查。</span></li><li><span style="color:#000000">維護項目的單一事實來源，使開發人員能夠重用部分內容並僅從一個位置對其進行編輯，而不必在進行更改時更新每個實例。</span></li></ul><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fhelp%2Fwriterside%2Fgetting-started.html" target="_blank">查看官方文檔</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 08:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262124/jetbrains-writerside</guid>
            <link>https://www.oschina.net/news/262124/jetbrains-writerside</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ruff v0.1.0 - Rust 編寫的高性能 Python 代碼分析工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Ruff v0.1.0 已發佈，此版本主要變化包括<strong>提升穩定性</strong>、<strong>引入新的預覽模式</strong>、<strong>引入 fix safety 等級</strong>，以及執行正式的版本控制策略。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-18fc830344db5e3f3a3e04cb6ce78cdd47a.png" referrerpolicy="no-referrer"></p><ul><li><strong>新的預覽模式</strong></li></ul><p>通過預覽模式，用戶可自行選擇體驗新功能——用於啓用新規則、不穩定修復和實驗性代碼分析。</p><pre><code>[tool.ruff]
preview = true</code></pre><ul><li><strong>引入 fix safety 等級</strong></li></ul><p>Ruff 自動修復違規行為的能力是其最強大的功能之一。然而，考慮到 Python 的動態特性，Ruff 並不總能保證修復是「安全的」。</p><p>自 5 月份以來，開發團隊一直將 Ruff 的修復子集標記為不安全。當應用被安全修復時，代碼的含義和意圖將被保留；當應用不安全修復時，含義可能會改變。</p><p>但在 v0.1.0 中，<strong>Ruff 默認情況下只會使用安全修復</strong>，以增加應用修復時的準確性，並突出顯示需要額外審查的修復。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2Fruff%2Fconfiguration%2F%23fix-safety" target="_blank">查看文檔瞭解更多</a>。</p><ul><li><strong>執行正式的版本控制策略</strong></li></ul><p>隨着 0.1.0 的發佈，Ruff 正式執行完整的版本控制策略，簡單總結如下：</p><ul><li>次要版本號代表發佈穩定預覽功能、更改穩定行為以及進行重大更改。</li><li>補丁版本號代表錯誤修復，以及預覽中的規則或修復的任何更改。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2Fruff%2Fversioning%2F" target="_blank">完整描述查看文檔</a>。</p><p>最後，Ruff 文檔站點已從&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbeta.ruff.rs%2Fdocs" target="_blank">beta.ruff.rs/docs</a>&nbsp;遷移到&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.astral.sh%2F" target="_blank">docs.astral.sh</a>。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fastral.sh%2Fblog%2Fruff-v0.1.0" target="_blank">詳情查看發佈公告</a>。</p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Ruff 是基於 Rust 編寫的高性能 Python 代碼分析工具（即 Linter），用於檢查代碼中的語法錯誤、編碼規範問題、潛在的邏輯問題和代碼質量問題等，可以提供實時反饋和自動修復建議。其主打的特性是高性能，宣稱比現有的同類工具快 10~100 倍。</p><blockquote><p style="margin-left:0; margin-right:0"><strong>Ruff 核心特性</strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>通過 pip 安裝</li><li>支持<span>&nbsp;</span><code>pyproject.toml</code></li><li>兼容&nbsp;Python 3.11</li><li>超過 500 條內置規則，與 Flake8 內置的規則集近乎對等</li><li>重新實現了數十個 Flake8 插件，如 flake8-bugbear、flake8-comprehensions 等</li><li>支持自動修復，可自動糾正錯誤（例如，刪除未使用的導入）</li><li>內置緩存，可避免重複分析未更改的文件</li><li>支持 VS Code、Pycharm、Neovim、Sublime Text、Emacs 等編輯器</li><li>對 monorepo 友好，具有分層和級聯配置</li></ul></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://static.oschina.net/uploads/space/2023/0420/144757_TG6X_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 07:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262120/ruff-0-1-0-released</guid>
            <link>https://www.oschina.net/news/262120/ruff-0-1-0-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《開放麒麟社區全覽白皮書（2023）》重磅開啓！內容徵集中！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span>截至目前，openKylin（開放麒麟）開源生態圈匯聚超 300 家合作企業、5000 餘名核心貢獻者、80+SIG 以及超百萬用戶<strong>。</strong></span><br> &nbsp;</p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><strong>現誠邀社區各合作伙伴、SIG 組成員及廣大用戶共編《開放麒麟社區全覽白皮書（2023）》</strong>，以收錄開放麒麟社區優秀技術創新項目、行業應用場景、用戶使用案例等，為有興趣深入瞭解開放麒麟社區的開發者、合作伙伴、用戶提供參考和借鑑，讓更多人瞭解、共建開放麒麟社區！</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">主要徵集內容</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>基於開放麒麟操作系統或開放麒麟社區開源模式開發的：</span></p><ul><li><span><strong>技術創新項目：</strong>項目的背景説明、功能或技術架構介紹、項目的應用場景等</span></li><li><span><strong>行業應用場景：</strong>具體的行業應用場景説明、具體實施方案或解決的痛點等</span></li><li><span><strong>用戶使用案例：</strong>用戶的使用場景説明、解決了哪些用戶的問題等</span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>如果您在使用或者開發開放麒麟操作系統的過程中有相關內容積累，歡迎提交到社區，分享給更多有需要的人！</span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">提交方式</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>如果您有意願參與本次白皮書內容編寫，可通過鏈接（<br><span style="color:#0052ff"><span>https://gitee.com/openkylin/docs/blob/master/社區參與指南/開放麒麟社區全覽白皮書-案例模板.md</span></span>）獲取案例模板，按照案例模板的要求編寫完成後，發送郵件到：<strong>contact@openkylin.top</strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>徵集截止時間為<strong>2023 年 10 月 31 日</strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#4e84d8">審覈收錄</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span>收集到的案例將提交至 openKylin 社區生態委員會，由生態委員會審核討論是否收錄進《開放麒麟社區全覽白皮書（2023）》，並通過委員投票的方式得出最終結論。</span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span>期待您的參與，共創開源未來！在過程中有任何疑問，歡迎私信 openKylin 公眾號後台諮詢。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 07:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262116</guid>
            <link>https://www.oschina.net/news/262116</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[大神用 Scratch 手搓 RISC-V 模擬器，成功運行 Linux 內核]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>剛剛網上衝浪被一個項目震驚到了——完全用 Scratch 代碼編寫了成功運行 Linux 內核的模擬器。</p><blockquote><p>Scratch 是以積木塊為基礎的可視化程序設計語言開發平台，通過點擊並拖拽的方式可視化完成編程。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e161b056c9c2f0c264e4cedb1ba65c7f52d.png" referrerpolicy="no-referrer"></p></blockquote><p>作者介紹稱，他用 Scratch 編寫了 RISC-V (rv32ima) 指令集，然後將其作為模擬器運行 Linux 6.1 內核。該模擬器基於純 C 實現的&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcnlohr%2Fmini-rv32ima" target="_blank">mini-rv32ima 模擬器</a></u>構建。</p><p><img height="895" src="https://static.oschina.net/uploads/space/2023/1017/182117_4pZ6_2720166.png" width="1460" referrerpolicy="no-referrer"></p><p><em>via<u>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscratch.mit.edu%2Fprojects%2F892602496" target="_blank">https://scratch.mit.edu/projects/892602496</a></u></em></p><p>下面是項目的運行截圖：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3ffb2ac2bd054e820c5e5d646ff93cc674b.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 10:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262163/scratch-risc-v</guid>
            <link>https://www.oschina.net/news/262163/scratch-risc-v</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2023 年度人工智能現狀報告 (State of AI Report 2023)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>stateof.ai <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.stateof.ai%2F2023-report-launch" target="_blank">發佈</a>了&nbsp;2023 年度人工智能現狀報告 (State of AI Report 2023)。</p><p><img height="595" src="https://static.oschina.net/uploads/space/2023/1017/174423_m4u3_2720166.png" width="1405" referrerpolicy="no-referrer"></p><p>這份報告由英國知名風投公司 Air Street Capital 的合夥人 Nathan Benaich 等作者聯合撰寫，<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">報告從<strong>研究進展 (</strong></span><strong>Research</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>行業局勢 (</strong></span><strong>Industry</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>政策影響 (</strong></span><strong>Politics</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>安全問題 (</strong></span><strong>Safety</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)</strong>、<strong>未來預測 (</strong></span><strong>Predictions</strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>)&nbsp;</strong>五個維度出發，對人工智能發展現狀和未來預期進行了深度分析。</span></p><blockquote><p><strong>完整報告查看：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.google.com%2Fpresentation%2Fd%2F156WpBF_rGvf4Ecg19oM1fyR51g4FAmHV3Zs0WLukrLQ%2Fedit%3Fusp%3Dsharing" target="_blank">https://docs.google.com/</a></u></strong></p></blockquote><p>報告稱，OpenAI 的 GPT-4 在發佈八個月後仍然是最強的大語言模型（LLM），「在經典基準測試和旨在評估人類的考試中都擊敗了所有其他大模型」。</p><p>下面是這份報告的要點。</p><p><strong>1、研究進展</strong></p><ul><li><p>GPT-4 登場，展示了專有技術與次優開源替代方案之間的能力鴻溝，同時也驗證了通過人類反饋進行強化學習的威力；</p></li><li><p>在 LLaMa-1/2 的支持下，越來越多的人試圖用更小的模型、更好的數據集、更長的上下文來克隆或擊敗專有模型；</p></li><li><p>目前還不清楚人類生成的數據能維持人工智能擴展趨勢多久（有人估計，到 2025 年，數據將被 LLM 耗盡），也不清楚添加合成數據會產生什麼影響。企業中的視頻和數據可能是下一個目標；</p></li><li><p>LLM 和擴散模型通過為分子生物學和藥物發現帶來新的突破，繼續為生命科學界提供助力；</p></li><li><p>多模態成為新的前沿，各種智能體熱度大大增加。</p></li></ul><p><strong>2、行業局勢</strong></p><ul><li><p>英偉達憑藉各國、初創公司、大型科技公司和研究人員對其 GPU 的巨大需求，躋身市值萬億美元俱樂部；</p></li><li><p>主要芯片供應商開發了不受出口管制影響的替代產品；</p></li><li><p>在 ChatGPT 的帶領下，GenAI 的應用程序在圖像、視頻、編碼、語音或 CoPilots 等領域取得了突破性的進展，帶動了 180 億美元的風險投資和企業投資。</p></li></ul><p><strong>3、政策影響</strong></p><ul><li><p>世界已劃分出明確的監管陣營，但全球治理的進展仍較為緩慢，最大的人工智能實驗室正在填補這一空白；</p></li><li><p>據預測，人工智能將影響一系列敏感領域，包括選舉和就業，但我們還沒有看到顯著的影響。</p></li></ul><p><strong>4、安全問題</strong></p><ul><li><p>關於生存風險的討論首次進入主流，並明顯加劇；</p></li><li><p>許多高性能的模型很容易「越獄」，為瞭解決 RLHF 的挑戰，研究人員正在探索替代方案，例如自對齊（self-alignment）和帶有人類偏好的預訓練；</p></li><li><p>隨着模型性能的提升，一致地評估 SOTA 模型變得越來越困難。</p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262155/state-of-ai-2023-report</guid>
            <link>https://www.oschina.net/news/262155/state-of-ai-2023-report</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[簡單三步，讓你的軟件工程師倦怠]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>如果你是一位想要讓你最優秀的工程師疲憊不堪，且摧毀他們對你領導能力的信任的經理，我可以幫助你。</p><p>我曾在兩個「疲憊不堪的團隊」中工作，默默地看着我周圍的聰明工程師離開團隊或公司。</p><p>在一個團隊中，我是一家小型、種子階段的風險投資初創公司的首席工程師。我向 CEO 彙報並與他並肩工作。在我加入的第二個團隊中，我是一家知名大型科技公司（如 Meta，Google，Apple 等）的 11 個個人貢獻者之一。</p><p>以下就是那些團隊的完整「倦怠策略」，咱們一步一步來。</p><h2><strong>步驟一：不要信任你的工程師</strong></h2><p style="text-align:start">首先要做的是對你的工程師進行微觀管理。工程師很聰明，但他們真的明白你希望產品看起來如何嗎？可能並不完全明白。</p><p style="text-align:start">當我在初創公司擔任工程主管時，我與 CEO 並肩工作。他每天都會打電話給我，持續數小時，對那些對實際用戶體驗沒有影響的小細節進行吹毛求疵。你確定我們應該使用 DynamoDB 嗎？為什麼這個 Lambda 函數使用 Python 而不是 Node？&nbsp;</p><p style="text-align:start"><strong>被頻繁地叮咚打擾真是讓人筋疲力盡。</strong></p><p style="text-align:start">在大型科技公司的團隊中，我被賦予的自主權也很有限。這並不一定是因為我的經理，而是因為系統本身。</p><p style="text-align:start">我記得我在設計一個我正在建設的系統時的工作情況。我被婉轉地告知：「我們需要以這種方式實施這個項目。我知道這將需要多一個月的時間，但我需要以這種方式進行（以便在我的宣傳包上看起來更好）。</p><p style="text-align:start"><img height="556" src="https://static.oschina.net/uploads/space/2023/1017/174716_508S_3820517.png" width="1158" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fmbrandolph%2Fstatus%2F1705809400068497918" target="_blank">馬克·蘭道夫是 Netflix 的聯合創始人。</a></p><h2><strong>步驟二：引入不必要的，浪費時間的流程</strong></h2><p style="text-align:start">當我在創業公司工作時，有一天我突然被迫在實施任何事情之前就要詳細編寫大量的設計文檔。每一個小小的 API 端點創建都必須事先進行深入的討論。突然間，一個功能的發佈從幾天變成了幾周。這讓我感到非常沮喪。</p><p style="text-align:start">最糟糕的是什麼？我們甚至還沒有發佈我們的產品！在我們還沒有一絲收入的跡象之前，所有這些流程都沒有意義。</p><p style="text-align:start">看，谷歌有着濃厚的寫作文化，設計文檔在那裏是常態。但是，在創業公司，你並不是谷歌。谷歌需要寫作文化，因為他們的規模龐大，人員不斷地流動。</p><p style="text-align:start">這種情況有時會過於複雜。在大型科技公司的某個團隊中，流程處理的時間常常過長。要獲取某些類型的數據，我必須提交一個請求，然後由另一個團隊手動批准，這讓人卡好幾天。想要推出我的功能，我必須得到安全、產品、工程、法務、合規，甚至 CEO 的狗的批准。</p><p style="text-align:start">有陣子，我做的事情就只是編輯文件、發送郵件、閲讀文檔、回覆別人。我做的事情沒有任何意義，這並不是因為我願意這樣做。</p><p><img height="342" src="https://static.oschina.net/uploads/space/2023/1017/174800_0Yyt_3820517.png" width="1178" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Feshear%2Fstatus%2F1561120335331594240" target="_blank">艾米特·希爾是 Twitch 的聯合創始人。</a></p><p style="text-align:start">當然，這些流程是必要的...但是也需要有一個平衡。工程師參與的每一個項目並不都需要經過這些流程，也不應該如此。幸運的是，並非大型科技公司的每個團隊都是這樣。實際上，大多數並非如此。</p><h2><strong>步驟 3：不要向客戶交付</strong></h2><p style="text-align:start">在一個連續 8 個月的項目上辛苦工作，結果卻無人得見，沒有什麼比這更糟糕的了。尤其是在這 8 個月裏，你付出了大量的加班時間。</p><p style="text-align:start">更糟糕的是：原本 8 個月的工作被推遲到 12 個月，16 個月，甚至 20 個月。然後，產品被削減，你所付出的努力從未被交付給任何人使用。</p><p style="text-align:start"><strong>從事永遠無法交付的項目，據説，是導致倦怠的最大原因之一。</strong></p><p><img height="672" src="https://static.oschina.net/uploads/space/2023/1017/174834_tu8m_3820517.png" width="1346" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.intercom.com%2Fblog%2Fshipping-is-your-companys-heartbeat%2F" target="_blank">Shipping is your company’s heartbeat (2013)</a></p><p style="text-align:start">在我曾經工作的那家創業公司，我們為產品辛勤工作了一年多，卻從未向客戶交付過。每次我們認為產品已經準備好交付時，我們的 CEO 總會要求「再添加一些功能」。過了一段時間，團隊對 CEO 的執行能力失去了信心。我們只能從 CEO，而不是真正的用戶的想法中得到反饋，這讓我們很難深入關心這件事。</p><p style="text-align:start">產品在交付時應該是無 bug 的，並且用戶體驗良好。但是，它們並不需要完美無缺。如果他一直在追求完美，那我們將會遭遇非常糟糕的時期。尤其是我們還沒有達到產品與市場的匹配度。</p><blockquote><p><em>完美主義往往是拖延的藉口。</em><br><em>回顧過去，我認為我們的首席執行官只是在拖延真正銷售產品並接受關鍵反饋的時間。</em></p></blockquote><p style="text-align:start">在我所在的大型科技團隊中，隨着各級主管和副總裁的更迭，我們經常進行重組。每次重組都會有新的高管加入，他們對組織有着新的願景。這意味着需求不斷變化，我們花了幾個月甚至幾年時間的許多項目被廢棄，我們從未看到我們的項目在現實世界中的影響。</p><p style="text-align:start">由於缺乏專注，導致無法向客戶交付。當一個產品沒有強烈的領導願景時，這個產品註定會失敗。</p><p><img height="440" src="https://static.oschina.net/uploads/space/2023/1017/174904_ovph_3820517.png" width="1378" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FJonErlichman%2Fstatus%2F1404479095472373761" target="_blank">https://twitter.com/JonErlichman/status/1404479095472373761</a></p><h2><strong>額外步驟：過度承諾而不兌現</strong></h2><p style="text-align:start">這個步驟是所有上述步驟的高潮。如果你願意，可以把它看作是棺材上的最後一顆釘子，壓死駱駝的最後一根稻草。</p><p style="text-align:start">這些團隊中的大多數工程師被過度承諾了從未實現的福利。</p><p style="text-align:start">在我創業的那一年，我們一直在開發一個從未上市的產品，而 CEO 則花時間在籌集資金。雖然我最初在公司中擁有相當大的股權，但在產品與市場契合度之前就開始籌資意味着我的股權正在被稀釋。稀釋得很多。突然間，創業公司對我來説的經濟激勵消失了。即使創業公司以 10 億美元的價格退出，我在大型科技公司工作十年也能賺到同樣多的錢。除此之外，大型科技公司的薪酬是完全流動且有保障的，而在當前的環境下，10 億美元的退出越來越少見。</p><p style="text-align:start">在大型科技公司，每一個離職的工程師當初加入的原因都是以下幾點：</p><ul><li><p>產品願景：他們對產品及其解決的問題充滿熱情</p></li><li><p>發展空間/前途能見度：他們覺得他們將有更多的發展空間，因此，也就有了更多的成長機會</p></li><li><p>更好的晉升機會：更大的發展空間和能見度 → 晉升</p></li></ul><p style="text-align:start">遺憾的是，每年，每位工程師對實現他們的目標都會一點點失去希望。</p><p style="text-align:start"><strong>絕望加速了倦怠感的產生。</strong></p><p style="text-align:start">他們加入公司的原因根本沒有實現。當他們的希望降到一定的低點時，他們就離開了。</p><p style="text-align:start">最終，我也無法逃避疲憊的困擾。所以，我選擇離開。</p><blockquote><p>節選自：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fengineercodex.substack.com%2F" target="_blank">Engineer’s Codex</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fengineercodex.substack.com%2Fp%2Fhow-to-burnout-a-software-engineer" target="_blank">https://engineercodex.substack.com/p/how-to-burnout-a-software-engineer</a></p></blockquote><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262153/how-to-burnout-a-software-engineer</guid>
            <link>https://www.oschina.net/news/262153/how-to-burnout-a-software-engineer</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度搜索已基於 AI 大模型完成重構]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>百度創始人、董事長兼首席執行官李彥宏在百度世界 2023 上<a href="https://www.oschina.net/news/262086" target="_blank">正式發佈文心大模型 4.0</a> ，並開啓邀請測試。李彥宏稱這是迄今為止最強大的文心大模型，實現了基礎模型的全面升級，在理解、生成、邏輯和記憶能力上都有着明顯提升，綜合水平「與 GPT-4 相比毫不遜色」。</p><p>此外，李彥宏還宣佈，百度搜索已經基於 AI 大模型完成重構，新搜索具有極致滿足、推薦激發和多輪交互三個特點。不僅提升了搜索質量，而且突破了搜索的應用範圍、擴大了產品邊界。他強調説，生成式 AI 與搜索是天作之合。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bdac8a70261d0c8fb68da75bdbffdeb0942.png" referrerpolicy="no-referrer"></p><p>據悉，百度搜索不僅提升了搜索質量，而且突破了搜索的應用範圍、擴大了產品邊界。百度搜索基於文心大模型進行升級，新版本大模型實現了基礎模型的全面升級，在理解、生成、邏輯和記憶能力上都有着明顯提升。</p><p>除了搜索，李彥宏還稱如流、地圖、網盤、文庫等，都將以一個全新的面目與大家見面，並表示分享上述這些應用的目的，是為了拓展想象力、激發更多人做出更驚豔的 AI 原生應用。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262141</guid>
            <link>https://www.oschina.net/news/262141</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[為什麼前端技術棧如此複雜？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>前端生態系統的複雜性是出了名的。在每一層，似乎都存在着不兼容的，相互競爭的標準。</p><p><strong>沒有通用的導入系統</strong>。ES 模塊、CommonJS、異步模塊定義（AMD）和通用模塊定義（UMD）都是你可以導入或分享代碼的不同方式。打包器試圖通過支持多種方法來解決這個問題。但是代碼經歷了多層的壓縮、混淆和轉譯。TypeScript 被編譯成 JavaScript。網絡上的代碼會被壓縮（以減少網絡帶寬）或混淆（以防止複製）。源映射可以解決其中一些問題，但這又是另一項需要配置的事情。獲取正確的堆棧跟蹤可能會很棘手。這需要語言、工具和運行時之間的協調。</p><p><strong>極其不同的環境</strong>。一個特性和一個錯誤。前端代碼預期在任何地方運行 - 不僅僅是瀏覽器。在不同環境中可用的上下文和 API 各不相同，很難知道你有哪些可用的上下文（更不用説知道你正在導入的庫假設了什麼）。這段代碼能在服務器上運行嗎？這段代碼能在客戶端上運行嗎？這對開發者來説很困難（我可以使用什麼代碼）對於庫維護者來説也很困難（我應該為哪些環境優化我的代碼？）。</p><p><strong>過度強調文件結構</strong>。太多的前端工具依賴於項目結構來進行行為設定。配置必須在項目的根目錄中（導致了一長串的 tailwind.config.js、postcss.config.js、eslint.config.js、next.config.js 等）。文件結構對於導入代碼是必要的惡，但在前端中，它卻做了更多的事情。它可能是一個 API，用於將特定文件路由為網頁，或者作為 API，或者作為靜態網頁，或者作為動態重新生成的網頁。這些都很方便，但有時候很難調試，也很難發現代碼庫的部分內容。</p><p><strong>配置地獄</strong>。開箱即用的工具有很多。長期以來，我們有 create-react-app，這是一個被讚譽的工具包，它集成了許多這樣的工具，從一開始就為開發者提供了一個可用的配置。但是，如果你偏離了這條黃金路徑，你就會被 20 多個開發工具和複雜的交互所困擾。幾乎每個工具都在與其他工具爭鬥。ESLint（代碼檢查工具）和 Prettier（代碼格式化工具）經常發生衝突。</p><p><strong>開發失衡</strong>。在代碼和部署之間有如此多的步驟，意味着熱重載開發往往復雜。這導致了像 webpack-dev-server 這樣的工具的出現，它為你處理了大部分問題。但是要警惕魔法。這些開發服務器中有太多的假設，它們可能會迅速偏離生產行為。</p><blockquote><p>原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmatt-rickard.com%2Fwhy-is-the-frontend-stack-so-complicated" target="_blank">https://matt-rickard.com/why-is-the-frontend-stack-so-complicated</a></p><p>作者：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmatt-rickard.com%2F" target="_blank">Matt Rickard</a></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262139/why-is-the-frontend-stack-so-complicated</guid>
            <link>https://www.oschina.net/news/262139/why-is-the-frontend-stack-so-complicated</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百川智能 A1 輪獲阿里騰訊小米等 3 億美元投資]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000"><span style="background-color:#ffffff">百川智能<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FDhZdVNXqTudAtKZ1JrRvYQ" target="_blank">宣佈</a>已完成 A1 輪戰略融資，融資金額 3 億美元，阿里、騰訊、小米等科技巨頭及多家頂級投資機構均參與了本輪融資。加上天使輪的 5000 萬美元，百川智能的融資金額已達 3.5 億美元。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">百川智能成立於 2023 年 4 月 10 日，由前搜狗公司 CEO 王小川創立。其核心團隊由來自搜狗、Google、騰訊、百度、華為、微軟、字節等知名科技公司的 AI 頂尖人才組成。目前，百川智能的團隊規模 170 餘人，其中碩士及碩士以上學歷員工佔比近 70%，研發人員佔比超 80%。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">目前，百川智能已發佈 Baichuan-7B/13B，Baichuan2-7B/13B 四款開源可免費商用大模型及 Baichuan-53B、Baichuan2-53B 兩款閉源大模型，平均每 28 天發佈一款新的大模型。</span></span></p><p><img height="226" src="https://oscimg.oschina.net/oscnet/up-fe04b7e4bd658757761ef024f6bc89347b2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">公告稱，</span>Baichuan-7B/13B 兩款開源大模型在多個權威評測榜單均名列前茅，累積下載量超過六百萬次。Baichuan2-13B 在 MMLU、CMMLU、MedQA、USMLE 等幾大權威評估基準中，以絕對優勢全方位領先 LLaMA2。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#000000">8 月 31 日百川智能率先通過國家《生成式人工智能服務管理暫行辦法》備案，是首批八家公司中唯一一家今年成立的大模型初創公司，並於 9 月 25 日開放 Baichuan2-53B API 接口，正式進軍 To B 領域，開啓商業化進程。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 07:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262115</guid>
            <link>https://www.oschina.net/news/262115</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenBSD 7.4]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>OpenBSD 項目創始人 Theo de Raadt 宣佈推出<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openbsd.org%2F74.html" target="_blank"> OpenBSD 7.4</a>。這是 OpenBSD 第 55 個版本更新，下圖是慶祝髮版的海報：</p><p><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-30cece035e82615260d56659ea68a36ec27.png" width="400" referrerpolicy="no-referrer"></p><p>主要變化：</p><ul><li>大量內核改進</li><li>改進 SMP</li><li>Direct Rendering Manager 和圖形驅動更新</li><li>改進 VMM/VMD</li><li>針對用戶空間 (userland) 的 bug 修正和調整</li><li>改進硬件支持等</li></ul><p>OpenBSD 是開源、支持多平台的的類 UNIX 操作系統，創建於 1996 年，以強調安全性著稱。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4cdb76e5822ddc9197ce757a7f97a83a20d.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 06:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262108/openbsd-7-4-released</guid>
            <link>https://www.oschina.net/news/262108/openbsd-7-4-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雷軍：小米全新操作系統澎湃 OS 正式版已完成封包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>小米創辦人、董事長兼 CEO 雷軍今天在個人微博<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1749127163%2FNoeRxu6Ro%3Frefer_flag%3D1001030103_" target="_blank">宣佈</a>，小米全新的操作系統小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。小米 14 系列，第一款搭載新系統的手機，已交付工廠開始生產。</p><blockquote><p><span style="color:#333333">今天，對小米來説，是一個歷史性時刻。小米全新的操作系統，小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。</span></p><p><span style="color:#333333">小米 14 系列，第一款搭載新系統的手機，已交付工廠，正式開始生產。從這一刻起，</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs.weibo.com%2Fweibo%3Fq%3D%2523%25E5%25B0%258F%25E7%25B1%25B3%25E6%25BE%258E%25E6%25B9%2583OS%2523" target="_blank">#小米澎湃 OS#</a><span style="color:#333333"> 將逐步接替 MIUI。 ​​​</span></p><p><span style="color:#000000">對於小米來説，這是一個劃時代的里程碑，是邁向<strong style="color:#222222">「人車家全生態」</strong>的關鍵跨越。這一刻，我的內心，激動不已，心潮澎湃。</span></p></blockquote><p><img height="243" src="https://oscimg.oschina.net/oscnet/up-1fead1c930f622a1877c21aa62d184206e2.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p><span style="background-color:#ffffff; color:#222222">雷軍在公眾號發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FvjNBvY8Bn9Npnmisru_EKw" target="_blank">介紹</a></span><span style="color:#000000"><span style="background-color:#ffffff">稱，</span><span style="background-color:#ffffff">2014 年，從 IoT 業務開始初具規模，該公司就開始了小米澎湃 OS 的探索式開發和驗證。2017 年，全新系統研發工作正式開啓，以一套融合的系統框架統一支持全生態設備與應用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">時至今日，小米澎湃 OS 正式誕生，秉承</span><strong style="color:rgba(0, 0, 0, 0.9)"><span style="background-color:#ffffff">「以人為中心，打造人車家全生態操作系統」。</span></strong><span style="background-color:#ffffff">基於深度進化的 Android 以及自研的 Vela 系統融合，徹底重寫底層架</span><span style="background-color:#ffffff">構，為未來百億設備、百億連接做好了萬物互聯的公有底座。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-8c53666ec4b5313f3b5983d44ffe6a445b7.jpg" width="500" referrerpolicy="no-referrer"></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262088</guid>
            <link>https://www.oschina.net/news/262088</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心大模型 4.0 發佈，較 GPT-4 毫不遜色]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="background-color:#ffffff; color:#222222">在百度世界 2023 大會上，百度創始人、董事長兼首席執行官李彥宏宣佈文心大模型 4.0 正式發佈，開啓邀請測試。</span></p><p><span style="background-color:#ffffff; color:#222222">李彥宏表示，文心大模型 4.0 </span>是迄今為止最強大的文心大模型，實現了基礎模型的全面升級，在理解、生成、邏輯和記憶能力上都有着明顯提升，綜合水平「與 GPT-4 相比毫不遜色」。</p><p><img height="230" src="https://oscimg.oschina.net/oscnet/up-cb21975862a8f7b014aeea47cbab52da1df.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">李彥宏在現場演示中用文心 4.0 撰寫了一篇武俠小説，並將第四、五輪的生成內容與首輪小説框架結合，文心一言仍然「記得」最初生成的內容，李彥宏稱，這展示了文心大模型 4.0 的記憶能力。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">目前文心 4.0 已同步開始邀測，現場觀眾掃描嘉賓證二維碼，即可登錄文心一言官網或文心一言 App，體驗專業版。其<span style="background-color:#ffffff; color:#222222">隨後將逐步面前全網開啓公測。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 03:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262086</guid>
            <link>https://www.oschina.net/news/262086</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stack Overflow 裁員 28%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">Stack Overflow 是一家擁有 15 年曆史的 IT 技術問答網站，其首席執行官 Prashanth Chandrasekar 近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.blog%2F2023%2F10%2F16%2Fstack-overflow-company-announcement-october-2023%2F" target="_blank">宣佈</a>，該機構將裁員 28%。</span></p><p><span style="color:#000000">該公司沒有具體説明有多少員工會受到影響，但其 LinkedIn 頁面顯示，目前該公司共擁有 501-1000 名員工，LinkedIn 上的員工數為 769，因此大概影響 215 名員工左右。</span></p><p><span style="color:#000000"><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-a695411b01f10f2f0c67268f263266606ca.webp" width="500" referrerpolicy="no-referrer"></span></p><blockquote><p><span style="color:#000000">在過去的 15 年中，我們將 Stack Overflow 打造成數百萬開發人員和技術專家的行業重要知識庫。在此期間，我們經歷了充滿機遇和挑戰的歲月。今年也不例外，從為成功推出 OverflowAI 所做的不懈努力，到應對宏觀經濟壓力對整個技術行業造成的客戶預算轉移的持續威脅。這也是為什麼我們在致力於 Stack Overflow for Teams 的持續產品創新以及通過增強我們的人工智能/移動語言能力來確保公共平台健康發展的同時，還如此專注於盈利之路。今年，我們採取了許多措施來減少開支。我們從儘量減少對 Stacker 生活的影響的角度出發進行了改革。不幸的是，這些改變還不夠，我們做出了一個極其艱難的決定，將公司員工人數減少約 28%。</span></p><p style="text-align:start"><span style="color:#000000">當我們結束本財年並進入下一個財年時，我們將重點投資於我們的產品。因此，我們在此期間將大幅縮減市場營銷組織的規模。整個組織的支持團隊和其他團隊也會受到影響。正如我所提到的，我們本財年和下一財年的重點是盈利能力，這一點以及宏觀經濟壓力導致了今天的變化。隨着我們調整工作重點、優先事項和戰略，我們將更好地滿足用戶、客戶和合作夥伴的需求，這也是我們致力於產品創新和持續推動 OverflowAI 在 Stack Overflow for Teams 和我們的公共平台上發展的一部分。我們的新團隊結構最有利於我們在這些舉措方面取得成功。</span></p></blockquote><p><span style="color:#000000">面對&nbsp;Stack Overflow 的這一裁員之舉，外界紛紛猜測該公司是受到了來自&nbsp;OpenAI 的 ChatGPT 的衝擊。<span style="background-color:#ffffff">人工智能聊天助手 ChatGPT 崛起已經改變了開發者尋求編程幫助方式，能提供更為具體的幫助。</span></span></p><p><span style="color:#000000">倫敦和德國兩地的一家初創公司創始人 Laura Wendel&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FLauramaywendel%2Fstatus%2F1713949264336847318%3Fs%3D20" target="_blank">發帖稱<span style="color:#000000">，</span></a><span style="color:#000000">&nbsp;「這可能是第一次直接因 AI 導致的大規模裁員」，並例舉了「大眾向 ChatGPT 而不是 Stack Overflow 尋求問題答案」的例子。還貼出了一張圖表，顯示從 2023 年 4 月開始，Stack Overflow 的頁面瀏覽量急劇下降；與此同時，聊天機器人正廣受追捧。</span></p><p><span style="color:#000000"><strong>相關閲讀：</strong></span></p><ul><li><a href="https://www.oschina.net/news/237758/stack-overflow-chatgpt" target="news">ChatGPT 的統治正在衝擊 Stack Overflow？</a></li><li><a href="https://www.oschina.net/news/251072/the-fall-of-stack-overflow" target="news">Stack Overflow 訪問量大幅下降，馬斯克稱其已被 LLM 取代</a></li><li><a href="https://www.oschina.net/news/251277/overflow-ai" target="news">Stack Overflow 推出 Overflow AI</a></li><li><a href="https://www.oschina.net/news/253044/chatgpt-stack-overflow-research" target="news">ChatGPT 和 Stack Overflow，誰的解答更勝一籌？</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforce</guid>
            <link>https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforce</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Disjob —— 分佈式任務調度框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="project_detail_above_text_link_1" data-tracepid="project_detail_above_text_link"><a style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>Disjob 是一款分佈式的任務調度框架，天然為支持分佈式長任務執行而設計，它除了具備常規的任務調度功能外，還提供：任務拆分及分佈式並行執行、暫停及取消運行中的任務、恢復執行被暫停的任務、任務執行失敗重試、保存任務的執行快照 (Checkpoint)、任務依賴、任務編排 (DAG)、廣播任務等能力。</p><p>以下是 Disjob 的整體流程圖：</p><p><img alt="" src="https://gitee.com/dromara/disjob/raw/master/docs/images/architecture.jpg" referrerpolicy="no-referrer"></p><hr><p><strong>特性</strong></p><ul><li>分為管理器 (Supervisor) 和執行器 (Worker) 兩種角色，Supervisor 與 Worker 可分離部署</li><li>Supervisor 與 Worker 通過註冊中心相互發現，支持的註冊中心有：Database、Redis、Consul、Nacos、Zookeeper、Etcd</li><li>Supervisor 負責生成任務，把任務派發給 Worker 執行，支持的任務派發方式有：Redis、Http</li><li>需要指定 Job 的分組 (job-group)，Job 的任務只會派發給指定組的 Worker 執行</li><li>提供拆分任務的能力，重寫拆分方法<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/handle/JobSplitter.java">JobHandler#split</a>即可拆分為多個任務，實現分佈式任務及並行執行</li><li>支持暫停和取消運行中的任務，已暫停的任務可恢復繼續執行，執行失敗的任務支持重試</li><li>支持任務保存 (savepoint) 其執行狀態，讓手動或異常暫停的任務能從上一次的執行狀態中恢復繼續執行</li><li>任務在執行時若拋出<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/exception/PauseTaskException.java">PauseTaskException</a>，會暫停對應實例下的全部任務 (包括分佈在不同 worker 機器中的任務)</li><li>支持廣播任務，廣播任務會派發給 job-group 下的所有 worker 執行</li><li>支持 Job 間的依賴，多個 Job 配置好依賴關係後便會按既定的依賴順序依次執行</li><li>支持 DAG 工作流，可把 jobHandler 配置為複雜的 DAG 表達式，如：A-&gt;B,C,(D-&gt;E)-&gt;D,F-&gt;G</li><li>提供 Web 管理後台，通過界面進行作業配置，任務監控等</li></ul><p><strong>項目結構</strong></p><pre><code>disjob                                        # 主項目①
├── disjob-admin                              # 管理後台項目②(基於 Ruoyi 框架二次開發)
├── disjob-bom                                # Maven project bom module
├── disjob-common                             # 公共的工具類模塊
├── disjob-core                               # 任務調度相關的核心類（如數據模型、枚舉類、抽象層接口等）
├── disjob-dispatch                           # 任務派發模塊
│   ├── disjob-dispatch-api                   # 任務派發的抽象接口層
│   ├── disjob-dispatch-http                  # 任務派發的 Http 實現
│   └── disjob-dispatch-redis                 # 任務派發的 Redis 實現
├── disjob-id                                 # 分佈式 ID 生成模塊
├── disjob-registry                           # Server(Supervisor &amp; Worker) 註冊模塊
│   ├── disjob-registry-api                   # Server 註冊中心的抽象接口層
│   ├── disjob-registry-consul                # Server 註冊中心：Consul 實現
│   ├── disjob-registry-database              # Server 註冊中心：Database 實現
│   ├── disjob-registry-etcd                  # Server 註冊中心：Etcd 實現
│   ├── disjob-registry-nacos                 # Server 註冊中心：Nacos 實現
│   ├── disjob-registry-redis                 # Server 註冊中心：Redis 實現
│   └── disjob-registry-zookeeper             # Server 註冊中心：Zookeeper 實現
├── disjob-reports                            # 聚合各個模塊的測試覆蓋率報告
├── disjob-samples                            # Samples 項目③
│   ├── disjob-samples-frameless-worker       # Worker 單獨部署的範例（普通 Java-main 應用）
│   ├── disjob-samples-springboot-common      # Samples Spring-boot 公共模塊
│   ├── disjob-samples-springboot-merged      # Supervisor 與 Worker 合併部署的範例（Spring-boot 應用）
│   ├── disjob-samples-springboot-supervisor  # Supervisor 單獨部署的範例（Spring-boot 應用）
│   └── disjob-samples-springboot-worker      # Worker 單獨部署的範例（Spring-boot 應用）
├── disjob-supervisor                         # Supervisor 代碼
├── disjob-test                               # 用於輔助測試
└── disjob-worker                             # Worker 代碼</code></pre></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/disjob</guid>
            <link>https://www.oschina.net/p/disjob</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 任天堂紅白機模擬器 Nes4j]]>
            </title>
            <description>
                <![CDATA[<div align="center"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/build/icon/nes4j.png" alt="Nes4j logo" width="200" height="auto" referrerpolicy="no-referrer"><h1><a id="user-content-nes4j" class="anchor" href="https://gitee.com/navigatorCode/nes4j#nes4j"></a>Nes4j</h1><p>任天堂紅白機模擬器</p></div><div align="center"><h3><a id="user-content---english-document--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--english-document--"></a><a href="https://gitee.com/navigatorCode/nes4j/blob/master/README.md">English Document</a></h3><h3><a id="user-content---github 倉庫--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--github%E4%BB%93%E5%BA%93--"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGZYangKui%2Fnes4j">github 倉庫</a></h3><img src="https://github.com/GZYangKui/nes4j/actions/workflows/maven.yml/badge.svg" alt="Build status" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-Apache%202.0-blue" alt="Apache 2.0" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/I18n-Support-orange.svg" alt="I18n support" referrerpolicy="no-referrer"><img src="https://badgen.net/github/stars/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="stars" referrerpolicy="no-referrer"><img src="https://badgen.net/github/forks/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="forks" referrerpolicy="no-referrer"><br></div><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Main.png" alt="nes4j" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/DuckTables.png" alt="DuckTables" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Super%20Mario.png" alt="Super Mario" referrerpolicy="no-referrer"></p><h2><a id="user-content-項目介紹" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>項目介紹</h2><p><strong>nes4j</strong>是使用 java 語言實現任天堂紅白機模擬器,主要包括<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FCPU">CPU</a>、
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FPPU_programmer_reference">PPU</a>和<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FAPU">APU</a>三部分組成.其中 PPU 是紅白機
實現難度最大的一個模塊,理解起來有點困難.</p><h2><a id="user-content-項目結構" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84"></a>項目結構</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">nes4j</span><span id="LC2" class="line">├── app UI 模塊 (javafx)</span><span id="LC3" class="line">├── bin 模擬器核心模塊 (CPU/PPU/APU)</span><span id="LC4" class="line">└── document 開發文檔</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-快速啓動" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8"></a>快速啓動</h2><h3><a id="user-content-下載項目" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE"></a>下載項目</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://gitee.com/navigatorCode/nes4j.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-啓動項目" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE"></a>啓動項目</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"> mvn run</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-已實現卡帶 mapper" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%B7%B2%E5%AE%9E%E7%8E%B0%E5%8D%A1%E5%B8%A6mapper"></a>已實現卡帶 Mapper</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FNROM">NROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FUxROM">UxROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FINES_Mapper_003">CNROM</a></li></ul><blockquote><p>更多卡帶 Mapper 正在實現中,敬請期待。</p></blockquote><h2><a id="user-content-自定義音視頻輸出" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E8%A7%86%E9%A2%91%E8%BE%93%E5%87%BA"></a>自定義音視頻輸出</h2><blockquote><p>如果你覺得當前遊戲輸出程序無法滿足你的需求,你可以給我們提 PR,我們會盡可能滿足你的需求,另外一種方法就是你自己引入 nes4j-bin 模塊自己實現
遊戲視屏和音頻輸出</p></blockquote><h3><a id="user-content-首先引入依賴" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A6%96%E5%85%88%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96"></a>首先引入依賴</h3><ul><li>Apache Maven</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;groupId&gt;</span>cn.navclub<span class="nt">&lt;/groupId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;artifactId&gt;</span>nes4j-bin<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;version&gt;</span>1.0.2<span class="nt">&lt;/version&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(groovy)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="nl">group:</span><span class="s1">'cn.navclub'</span><span class="o">,</span><span class="nl">name:</span><span class="s1">'nes4j-bin'</span><span class="o">,</span><span class="nl">version:</span><span class="s1">'1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>or</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="s1">'cn.navclub:nes4j-bin:1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(Kotlin)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nf">implementation</span><span class="p">(</span><span class="s">"cn.navclub:nes4j-bin:1.0.2"</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-創建 nes 實例並初始化" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%88%9B%E5%BB%BAnes%E5%AE%9E%E4%BE%8B%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96"></a>創建 NES 實例並初始化</h3><ul><li>GameWorld.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.NES</span><span class="o">;</span></span><span id="LC3" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.io.JoyPad</span><span class="o">;</span></span><span id="LC4" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.ppu.Frame</span><span class="o">;</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">GameWorld</span><span class="o">{</span></span><span id="LC7" class="line"><span class="kd">public</span><span class="no">NES</span><span class="nf">create</span><span class="o">()</span><span class="o">{</span></span><span id="LC8" class="line"><span class="no">NES</span><span class="n">instance</span><span class="o">=</span><span class="no">NES</span><span class="o">.</span><span class="na">NESBuilder</span></span><span id="LC9" class="line"><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span></span><span id="LC10" class="line"><span class="c1">//nes 遊戲 rom</span></span><span id="LC11" class="line"><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">file</span><span class="o">)</span></span><span id="LC12" class="line"><span class="c1">//音頻輸出程序 </span></span><span id="LC13" class="line"><span class="o">.</span><span class="na">player</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">)</span></span><span id="LC14" class="line"><span class="c1">//Game loop 回調</span></span><span id="LC15" class="line"><span class="o">.</span><span class="na">gameLoopCallback</span><span class="o">(</span><span class="nc">GameWorld</span><span class="o">.</span><span class="na">this</span><span class="o">::</span><span class="n">gameLoopCallback</span><span class="o">)</span></span><span id="LC16" class="line"><span class="o">.</span><span class="na">build</span><span class="o">();</span></span><span id="LC17" class="line"><span class="k">try</span><span class="o">{</span></span><span id="LC18" class="line"><span class="c1">//一旦當前方法被調用將會阻塞當前線程直到遊戲結束或者異常發生</span></span><span id="LC19" class="line"><span class="n">instance</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span></span><span id="LC20" class="line"><span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span><span class="n">e</span><span class="o">)</span><span class="o">{</span></span><span id="LC21" class="line"><span class="c1">//todo 當異常發生當前遊戲立即停止</span></span><span id="LC22" class="line"><span class="o">}</span></span><span id="LC23" class="line"><span class="o">}</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="c1">//當 PPU 輸出一幀視屏時回調該函數</span></span><span id="LC26" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">gameLoopCallback</span><span class="o">(</span><span class="nc">Frame</span><span class="n">frame</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad1</span><span class="o">)</span><span class="o">{</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="o">}</span></span><span id="LC29" class="line"><span class="o">}</span></span><span id="LC30" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>JavaXAudio.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"all"</span><span class="o">)</span></span><span id="LC3" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">JavaXAudio</span><span class="kd">implements</span><span class="nc">Player</span><span class="o">{</span></span><span id="LC4" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kt">byte</span><span class="o">[]</span><span class="n">sample</span><span class="o">;</span></span><span id="LC5" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">Line</span><span class="o">.</span><span class="na">Info</span><span class="n">info</span><span class="o">;</span></span><span id="LC6" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">AudioFormat</span><span class="n">format</span><span class="o">;</span></span><span id="LC7" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">SourceDataLine</span><span class="n">line</span><span class="o">;</span></span><span id="LC8" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">ldx</span><span class="o">;</span></span><span id="LC9" class="line"><span class="c1">//當前填充下標</span></span><span id="LC10" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">index</span><span class="o">;</span></span><span id="LC11" class="line"><span class="kd">private</span><span class="nc">Thread</span><span class="n">thread</span><span class="o">;</span></span><span id="LC12" class="line"><span class="kd">private</span><span class="kd">volatile</span><span class="kt">boolean</span><span class="n">stop</span><span class="o">;</span></span><span id="LC13" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">SAMPLE_SIZE</span><span class="o">=</span><span class="mi">735</span><span class="o">*</span><span class="mi">2</span><span class="o">;</span></span><span id="LC14" class="line"><span class="c1">//音頻默認緩存區大小為 32kb</span></span><span id="LC15" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">DEF_BUF_SIZE</span><span class="o">=</span><span class="mi">32</span><span class="o">*</span><span class="mi">1024</span><span class="o">;</span></span><span id="LC16" class="line"></span><span id="LC17" class="line"><span class="kd">private</span><span class="kd">static</span><span class="kd">final</span><span class="nc">LoggerDelegate</span><span class="n">log</span><span class="o">=</span><span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">logger</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></span><span id="LC18" class="line"></span><span id="LC19" class="line"></span><span id="LC20" class="line"><span class="kd">public</span><span class="nf">JavaXAudio</span><span class="o">()</span><span class="kd">throws</span><span class="nc">LineUnavailableException</span><span class="o">{</span></span><span id="LC21" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC22" class="line"><span class="k">this</span><span class="o">.</span><span class="na">format</span><span class="o">=</span><span class="k">new</span><span class="nc">AudioFormat</span><span class="o">(</span><span class="mi">44100</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span></span><span id="LC23" class="line"><span class="k">this</span><span class="o">.</span><span class="na">info</span><span class="o">=</span><span class="k">new</span><span class="nc">DataLine</span><span class="o">.</span><span class="na">Info</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">format</span><span class="o">);</span></span><span id="LC24" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">=</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">)</span><span class="nc">AudioSystem</span><span class="o">.</span><span class="na">getLine</span><span class="o">(</span><span class="n">info</span><span class="o">);</span></span><span id="LC25" class="line"></span><span id="LC26" class="line"><span class="n">line</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">format</span><span class="o">);</span></span><span id="LC27" class="line"><span class="n">line</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">((</span><span class="k">this</span><span class="o">::</span><span class="n">exec</span><span class="o">));</span></span><span id="LC30" class="line"><span class="o">}</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="nd">@Override</span></span><span id="LC33" class="line"><span class="kd">public</span><span class="kd">synchronized</span><span class="kt">void</span><span class="nf">output</span><span class="o">(</span><span class="kt">byte</span><span class="n">sample</span><span class="o">)</span><span class="o">{</span></span><span id="LC34" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">++]</span><span class="o">=</span><span class="n">sample</span><span class="o">;</span></span><span id="LC35" class="line"><span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lcalculate</span><span class="o">()</span><span class="o">&gt;</span><span class="no">SAMPLE_SIZE</span><span class="o">&amp;&amp;</span><span class="n">thread</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span><span class="o">{</span></span><span id="LC36" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC37" class="line"><span class="o">}</span></span><span id="LC38" class="line"><span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="no">DEF_BUF_SIZE</span><span class="o">;</span></span><span id="LC39" class="line"><span class="o">}</span></span><span id="LC40" class="line"></span><span id="LC41" class="line"></span><span id="LC42" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">exec</span><span class="o">()</span><span class="o">{</span></span><span id="LC43" class="line"><span class="kt">var</span><span class="n">arr</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC44" class="line"><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">=</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span></span><span id="LC45" class="line"><span class="k">while</span><span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">)</span><span class="o">{</span></span><span id="LC46" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">park</span><span class="o">();</span></span><span id="LC47" class="line"><span class="kd">final</span><span class="kt">int</span><span class="n">length</span><span class="o">;</span></span><span id="LC48" class="line"><span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span><span class="o">{</span></span><span id="LC49" class="line"><span class="n">length</span><span class="o">=</span><span class="n">lcalculate</span><span class="o">();</span></span><span id="LC50" class="line"><span class="k">if</span><span class="o">((</span><span class="n">length</span><span class="o">+</span><span class="n">ldx</span><span class="o">&gt;</span><span class="no">DEF_BUF_SIZE</span><span class="o">))</span><span class="o">{</span></span><span id="LC51" class="line"><span class="kt">var</span><span class="n">tmp</span><span class="o">=</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC52" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">tmp</span><span class="o">);</span></span><span id="LC53" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="n">tmp</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">);</span></span><span id="LC54" class="line"><span class="o">}</span><span class="k">else</span><span class="o">{</span></span><span id="LC55" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC56" class="line"><span class="o">}</span></span><span id="LC57" class="line"><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">;</span></span><span id="LC58" class="line"><span class="o">}</span></span><span id="LC59" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC60" class="line"><span class="o">}</span></span><span id="LC61" class="line"><span class="o">}</span></span><span id="LC62" class="line"></span><span id="LC63" class="line"><span class="kd">private</span><span class="kt">int</span><span class="nf">lcalculate</span><span class="o">()</span><span class="o">{</span></span><span id="LC64" class="line"><span class="kt">var</span><span class="n">len</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC65" class="line"><span class="k">if</span><span class="o">(</span><span class="n">len</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span><span class="o">{</span></span><span id="LC66" class="line"><span class="k">return</span><span class="n">len</span><span class="o">;</span></span><span id="LC67" class="line"><span class="o">}</span></span><span id="LC68" class="line"><span class="k">return</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="n">ldx</span><span class="o">+</span><span class="n">index</span><span class="o">;</span></span><span id="LC69" class="line"><span class="o">}</span></span><span id="LC70" class="line"></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="nd">@Override</span></span><span id="LC73" class="line"><span class="kd">public</span><span class="kt">void</span><span class="nf">stop</span><span class="o">()</span><span class="o">{</span></span><span id="LC74" class="line"><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span></span><span id="LC75" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC76" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">close</span><span class="o">();</span></span><span id="LC77" class="line"><span class="o">}</span></span><span id="LC78" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-參與貢獻" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>參與貢獻</h2><p>我們強烈歡迎有興趣的開發者參與到項目建設中來，同時歡迎大家對項目提出寶貴意見建議和功能需求，項目正在積極開發，歡迎 PR 👏。</p><h2><a id="user-content-版權説明" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E"></a>版權説明</h2><p>目前市場上絕大部分遊戲版權為<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nintendo.com%2F">任天堂</a>所有,請勿在未取得任天堂授權的情況下私自分發遊戲.
如果因此引發的任何侵權行為均與本軟件無關.如果本軟件中設計任何侵權素材請發送郵件到<a href="mailto:GZYangKui@126.com">GZYangKui@126.com</a>通知我刪除對應侵權素材.</p><h2><a id="user-content-文檔" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%96%87%E6%A1%A3"></a>文檔</h2><p>如果你也想編寫自己的模擬器或想了解模擬器內部結構,以下資源可以給你提供一些模擬器基礎知識:</p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fnesdev.com%2FNESDoc.pdf">NES Documentation (PDF)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwiki.nesdev.com%2Fw%2Findex.php%2FNES_reference_guide">NES Reference Guide (Wiki)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.obelisk.me.uk%2F6502%2Freference.html">6502 CPU Reference</a></li></ul><h3><a id="user-content-彙編調試實驗功能" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%B1%87%E7%BC%96%E8%B0%83%E8%AF%95%E5%AE%9E%E9%AA%8C%E5%8A%9F%E8%83%BD"></a>彙編調試 (實驗功能)</h3><blockquote><p>主界面 -&gt; 工具 -&gt; 調試</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/assemblera.png" alt="Assembler" referrerpolicy="no-referrer"></p><blockquote><p>程序內存快照 (內存)</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/MemoryView.png" alt="Assembler" referrerpolicy="no-referrer"></p><h2><a id="user-content-技術交流學習" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%AD%A6%E4%B9%A0"></a>技術交流學習</h2><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/document/im_qq.jpg" alt="qq" referrerpolicy="no-referrer"></p><h2><a id="user-content-特別感謝" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E7%89%B9%E5%88%AB%E6%84%9F%E8%B0%A2"></a>特別感謝</h2><table><thead><tr><th>名稱</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.jetbrains.com%2F">Jetbrain</a></td><td>免費提供全套集成開發環境</td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fforums.nesdev.org%2F">NES forum</a></td><td>提供技術支持</td></tr></tbody></table>]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/navigatorCode/nes4j</guid>
            <link>https://gitee.com/navigatorCode/nes4j</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Trino 容錯模式深度測評與思考]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411218%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">走向批處理-交互式分析一體化： Trino 容錯模式深度測評與思考</a>》，作者：HetuEngine 九級代言 。</p><p><strong>本文系華為雲大數據研發團隊原創，原創作者：文博，夢月</strong></p><span id="OSC_h1_1"></span><h1>1 Trino 簡介</h1><p>2020 年 12 月 27 日，Presto 社區大佬們——Martin Traverso、 Dain Sundstrom 以及 David Phillips 宣佈將開源項目 PrestoSQL 的名字更名為 TrinoDB（本文簡稱 Trino）。</p><p>Trino 是一款開源的高性能、分佈式 SQL 查詢引擎，專門用於對各種異構數據源運行交互式分析查詢，支持從 GB 到 PB 的數據量範圍。Trino 專門為交互式分析而設計，可以對來自不同數據源的數據（包括：Hive、AWS S3、Alluxio、MySQL、Kafka、ES 等等）進行合併查詢，並提供良好的自定義連接器編程擴展框架。適用於期望響應時間從亞秒到數分鐘不等的分析師場景。</p><p><img alt="1.PNG" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695110884831740337.PNG" referrerpolicy="no-referrer"></p><p>在誕生之初，Trino 是為了填補當時 Facebook 內部實時查詢和 ETL 處理之間的空白。Trino 的核心目標就是提供交互式查詢，也就是我們常説的 Ad-Hoc Query，很多公司都使用它作為 OLAP 計算引擎。近年來業務場景越來越複雜，除了交互式查詢場景，很多公司也需要兼顧批處理作業，技術大佬們開始思考如何用 Trino 來進行大數據集的批加工處理。</p><span id="OSC_h1_2"></span><h1>2 傳統 Trino 架構的侷限性</h1><p>在傳統 Trino 運行架構中，Trino 預先規劃了處理特定查詢的所有 task 。這些 task 彼此關聯，一項 task 的結果是下一項 task 的輸入。對於 MPP 引擎來説，這種相互依賴是必要的。一旦任何任務在此過程中失敗，就會破壞整個任務鏈條，導致整個 SQL 執行退出。</p><p>Trino 執行 SQL 任務過程如下圖（來自 Trino 官網）：</p><p><img alt="2.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111024056590140.png" referrerpolicy="no-referrer"></p><p><strong>優點：</strong></p><p>數據通過 task 進行流式傳輸，沒有中間檢查點，高吞吐低延遲</p><p><strong>不足：</strong></p><ul><li>缺乏細粒度的故障回覆，出現問題只能從頭運行整個 Query</li><li>完全依賴內存資源進行數據裝載和交換</li><li>執行規劃一旦確定就無法根據實際執行進展靈活調整</li></ul><span id="OSC_h1_3"></span><h1>3 Trino 容錯執行架構（FTE）</h1><p>Trino 開源社區設計了一種新的容錯執行架構（fault-tolerant execution architecture），它允許我們實現具有細粒度重試的高級資源感知調度（advanced resource-aware scheduling）。該項目代號為「Tardigrade」。</p><p>Tardigrade 項目旨在打破原有的全有或全無的執行障礙。它為資源管理、自適應查詢優化和故障恢復帶來了許多新的機會。該項目以水熊蟲命名 ，水熊蟲是世界上最堅不可摧的生物，類似於 FTE 為 Trino 帶來的魯棒性。</p><p><img alt="3.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111069158719757.png" referrerpolicy="no-referrer"></p><p>以下是 Tardigrade 項目帶來的一些直觀效果：</p><ul><li>當長時間運行的 SQL Query 遇到故障時，不必從頭開始運行；</li><li>當 Query 需要的內存超過集羣中當前可用的內存時，仍然能夠運行成功；</li><li>當多個 Query 同時提交時，它們能夠以公平的方式共享資源，並穩步運行</li></ul><p>從代碼實現角度看， Trino 直接在內核中實現了 task 級容錯、自動重試、shuffle 等核心功能。如下圖所示（來自 Trino 官網）：</p><p><img alt="4.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111096042877403.png" referrerpolicy="no-referrer"></p><p>Trino 會將一個 Query 執行分成多個 stage。在容錯模式下，上游 stage 的 shuffle 數據會進行落盤（支持寫到 AWS S3、HDFS 及本地存儲）。下游 stage 從中間存儲裏讀取所需要的數據，並在該過程中對後續 task 任務進行重新優化與分配。</p><p><img alt="5.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111122989942394.png" referrerpolicy="no-referrer"></p><p><strong>帶來的改進：</strong></p><ul><li><strong>適應性規劃</strong>：可以在緩衝數據時，動態調整查詢計劃</li><li><strong>資源管理</strong>：在查詢運行時調整資源分配。當集羣空閒時，我們可以允許單個查詢利用集羣上的所有可用資源。當更多工作負載開始時，可​​以逐漸減少初始查詢的資源分配。</li><li><strong>細粒度的故障恢復</strong>：允許透明地重啓失敗的任務，使得 ETL 完成時間更可預測。</li></ul><p>接下來，本文將帶各位深入體驗 Trino 容錯執行模式。</p><span id="OSC_h1_4"></span><h1>4 基礎性能測試</h1><p>首先在計算資源充足的場景下進行基礎性能測試。選取 1TB 數據量的 TPCDS，計算資源規格為 2CN+16Worker 136GB/進程，測試開啓容錯前後，執行 TPCDS99，耗時統計如下：</p><p><img alt="6.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111179677854014.png" referrerpolicy="no-referrer"></p><p>測試寫入性能選擇 TPCDS 表中最大的表 catalog_sales 測試寫入性能，SQL 為：</p><p><em>--- create table catalog_sales_copy as select * from catalog_sales;</em></p><p><strong>測試數據如下：</strong></p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>數據集</strong></p></td><td><p><strong>計算資源</strong></p></td><td><p><strong>執行耗時（單位：秒）</strong></p></td></tr><tr><td><p><strong>不開容錯和</strong><strong>spill</strong></p></td><td><p><strong>Task</strong><strong>容錯</strong></p></td><td><p><strong>Task</strong><strong>容錯+spill</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,20GB/進程</p></td><td><p>622.2</p></td><td><p>673</p></td><td><p>687</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/進程</p></td><td><p>3445</p></td><td><p>1485</p></td><td><p>1486</p></td></tr></tbody></table><p><strong>小結：</strong></p><ul><li>開啓 Task 容錯會進行中間交換區結果落盤，存在性能損耗，執行耗時約為之前的 2 倍；</li><li>Query 容錯沒有落盤的過程，與不開啓容錯性能持平。</li><li>1TB 數據集時，Task 容錯寫入性能也會有 8%-10% 損耗，但在 10TB 數據集時反而有性能提升，待深入分析；</li></ul><span id="OSC_h1_5"></span><h1>5 大數據量場景的穩定性測試</h1><p>本節將在計算資源嚴重不足的場景下進行 TPCDS 壓力測試。測試結果如下：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>數據量</strong></p></td><td><p><strong>計算資源</strong></p></td><td><p><strong>錯誤率</strong></p></td></tr><tr><td><p><strong>不開容錯</strong></p></td><td><p><strong>Task</strong><strong>容錯</strong></p></td><td><p><strong>Task</strong><strong>容錯+<br> spill to disk</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,40GB/進程</p></td><td><p>7.07%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,20GB/進程</p></td><td><p>12.12%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,10GB/進程</p></td><td><p>16.16%</p></td><td><p>4.04%</p></td><td><p>0%</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/進程</p></td><td><p>8.08%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>50TB</p></td><td><p>1CN+16Worker,136GB/進程</p></td><td><p>13.13%</p></td><td><p>6.06%</p></td><td><p>5.05%</p></td></tr></tbody></table><p><strong>小結：</strong></p><ul><li>內存不足情況下使用 Task 容錯，能夠大幅度提高 SQL 執行成功率。與 spill to disk 特性結合使用能帶來更好的容錯效果；</li><li>在 50TB 數據集時，Task 容錯仍然能夠提高執行成功率，但某些複雜 SQL 可能會存在單點瓶頸。目前觀察到主要是單點聚合瓶頸。</li></ul><span id="OSC_h1_6"></span><h1>6 高併發場景測試</h1><span id="OSC_h2_7"></span><h2>6.1 1TB TPCD 標準數據集</h2><p>計算資源規格：1CN+8Worker，136GB/進程</p><p>測試 SQL 用例： Q01（多事實表關聯查詢，即 TPCDS99 中的 Q29）</p><p>測試結果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>測試場景</strong></p></td><td><p><strong>1</strong><strong>併發</strong></p></td><td><p><strong>100</strong><strong>併發</strong></p></td><td><p><strong>200</strong><strong>併發</strong></p></td></tr><tr><td><p>不開啓容錯</p></td><td><p>QUERY 容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開啓容錯</p></td><td><p>QUERY 容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開啓容錯</p></td><td><p>QUERY 容錯</p></td><td><p>TASK 容錯</p></td></tr><tr><td><p>多表關聯查詢（多事實表）Q01-1 輪</p></td><td><p>4.1/min</p></td><td><p>5.2/min</p></td><td><p>2.6/min</p></td><td><p>7.3/min</p></td><td><p>7.2/min</p></td><td><p>8.1/min</p></td><td><p>17.50% 失敗</p></td><td><p>18% 失敗</p></td><td><p>7.9/min</p></td></tr><tr><td><p>多表關聯查詢（多事實表）Q01-5 輪</p></td><td><p>5.2/min</p></td><td><p>4.8/min</p></td><td><p>3.4/min</p></td><td><p>8.3/min</p></td><td><p>8.6/min</p></td><td><p>8.6/min</p></td><td><p>64.9% 失敗</p></td><td><p>74.9% 失敗</p></td><td><p>8.5/min</p></td></tr></tbody></table><p><img alt="7.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114254782786537.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_8"></span><h2>6.2 10TB TPCD 標準數據集</h2><p>計算資源規格：1CN+8Worker，136GB/進程</p><p>測試 SQL 用例：</p><p>單表多列聚合排序查詢 Q02：</p><p><strong>select</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk,</li><li>sum(ws_sales_price) total</li></ul><p><strong>from</strong></p><ul><li>web_sales</li></ul><p><strong>where</strong></p><ul><li>ws_sold_date_sk &gt;= 2450815</li><li>and ws_sold_date_sk &lt;= 2451179</li></ul><p><strong>group by</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk</li></ul><p><strong>having</strong></p><ul><li>sum(ws_sales_price) &gt; 0</li></ul><p><strong>order by</strong></p><ul><li>total desc</li></ul><p><strong>limit 100;</strong></p><p>開啓 TASK 容錯全部能夠執行成功。測結果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>測試場景</strong></p></td><td><p><strong>1</strong><strong>併發</strong></p></td><td><p><strong>100</strong><strong>併發</strong></p></td><td><p><strong>200</strong><strong>併發</strong></p></td><td><p><strong>300</strong><strong>併發</strong></p></td><td><p><strong>400</strong><strong>併發</strong></p></td></tr><tr><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td><td><p>不開容錯</p></td><td><p>TASK 容錯</p></td></tr><tr><td><p>單表多列聚合排序查詢 Q02_1 輪</p></td><td><p>3.3/min</p></td><td><p>1.3/min</p></td><td><p>7.9/min</p></td><td><p>5.7/min</p></td><td><p>9.7/min</p></td><td><p>8.8/min</p></td><td><p>8.5/min</p></td><td><p>5.9/min</p></td><td><p>97.25% 失敗</p></td><td><p>6.8/min</p></td></tr><tr><td><p>單表多列聚合排序查詢 Q02_5 輪</p></td><td><p>7.1/min</p></td><td><p>2.0/min</p></td><td><p>10.7/min</p></td><td><p>9.5/min</p></td><td><p>10.3/min</p></td><td><p>9.3/min</p></td><td><p>8.20% 失敗</p></td><td><p>8.0/min</p></td><td><p>99.1% 失敗</p></td><td><p>6.6/min</p></td></tr></tbody></table><p><strong>小結：</strong></p><p>Task 容錯能夠提升 Trino 引擎的併發上限，很大程度上減少諸如「Encountered too many errors talking to a worker node.」報錯的產生。</p><span id="OSC_h1_9"></span><h1>7 多個引擎橫向對比測試</h1><p>首先從 TPCDS99 中挑選出計算資源受限前提下，Trino 不開啓容錯 100% 會跑失敗的 SQL 用例，包括：</p><p>Q04，Q11，Q23，Q38，Q64，Q65，Q67，Q74，Q75，Q78，Q80，Q81，Q85，Q87，Q93，Q95，Q97</p><p>基於相同計算資源（內存、CPU、Container 個數），橫向對比 Trino、Spark、Hive(TEZ) 的性能表現。</p><p>注：測試 Trino 時實際採用的是華為雲 HetuEngine 2.0 的內核版本。</p><span id="OSC_h2_10"></span><h2>7.1 1TB TPCD 標準數據集</h2><p>&nbsp;</p><p><img alt="8.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112918036114849.png" referrerpolicy="no-referrer"></p><p>可看出，在 1TB 數據量、使用相同資源情況下，開啓 Task 容錯，Trino 能夠將原先跑失敗的 SQL 執行成功，且性能約為 Spark 的 3 倍左右，是 Hive(TEZ) 的數十倍。</p><span id="OSC_h2_11"></span><h2>7.2 10TB TPCDS 標準數據集</h2><p>針對 10TB TPCDS 標準數據集，進行對比測試：</p><p><img alt="9.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112947034508561.png" referrerpolicy="no-referrer"></p><p>可看出，在 10TB 數據量、使用相同資源情況下，開啓 Task 容錯，Trino 能夠將原先跑失敗的 SQL 執行成功，且性能約為 Spark 的 3 倍左右。</p><span id="OSC_h1_12"></span><h1>8 綜合評價</h1><p><strong>綜上，基於測試數據總結歸納如下——</strong></p><p><strong>單併發基礎性能</strong></p><ol><li>內存資源充足：不開啓容錯 = Query 容錯 &gt; Task 容錯</li><li>內存資源不足：Task 容錯可以跑過，不開啓容錯/Query 容錯跑不出結果</li></ol><p><strong>大數據量場景的穩定性</strong></p><p>Task 容錯 + spill to disk &gt; Task 容錯 &gt; 不開啓容錯</p><ul><li>1-10TB 數據集：Task 容錯的表現很穩定，通過率 100%</li><li>50TB 數據集： 結合使用 Task 容錯、spill to disk 相比單獨用 Task 容錯表現更好 (少失敗 1 個用例)</li></ul><p><strong>併發場景的穩定性</strong></p><p>Task 容錯 &gt; 不開啓容錯</p><p><strong>多個引擎橫向性能對比</strong></p><ul><li>1TB TPCDS 數據集：Trino(Task 容錯) &gt; Spark &gt; Hive(TEZ)</li><li>10TB TPCDS 數據集：Trino (Task 容錯) &gt; Spark</li></ul><p>總體而言，Trino 的 FTE 功能在性能、穩定性維度的測試表現超出了預期。隨着該能力的逐步演進與完善，相信 Trino 將在一站式數據加工與分析場景發揮出更大的價值。</p><span id="OSC_h1_13"></span><h1>9 思考與改進</h1><p>在擁有了第一手的測試數據與分析結論後，接下來我們將思考如何利用好 Trino 容錯模式，最大化的發揮其價值，同時要提前識別可能存在的問題，探索解決之道。</p><span id="OSC_h2_14"></span><h2>9.1 容錯模式啓用決策</h2><p>從前面的測試數據可以看出，開啓容錯模式對於短查詢性能存在一定的影響（對大查詢性能反而存在優化的可能）。因此需要思考何時、何種方式來開啓容錯模式。</p><p>有如下思路可供選擇——</p><ul><li><strong>用戶自主擇機啓用</strong></li></ul><p>最簡單的辦法就是讓業務用戶自主擇機選擇啓用或者關閉容錯模式。通常情況下，有經驗的用戶知道哪些查詢可能是計算量大或者運行時間久的查詢。他們可以通過改變 JDBC 連接的 session 參數來實現在「交互式模式」和「容錯模式」之間靈活切換；</p><ul><li><strong>基於代價決策</strong></li></ul><p>可以基於 SQL 執行的預測代價來決定是否開啓「容錯模式」。一般來説，這個技術需要依賴實現統計獲得的列級別統計信息。然而，列級別統計信息有時候是不可用的，而且基於代價估算的預測精度往往不夠理想；</p><ul><li><strong>自適應選擇技術</strong></li></ul><p>默認情況下，查詢可以「交互式模式」啓動，然後在運行 N 分鐘後，經過一段時間學習後，由引擎內核根據可用資源情況、業務特點等維度信息，自主決策啓動或關閉「容錯模式」。這個思路需要將 Trino 引擎與機器學習、AI 技術結合起來，踐行數智融合路線；</p><ul><li><strong>基於歷史信息決策</strong></li></ul><p>針對特定數據源的某些類型的查詢，可以預先收集歷史運行記錄並進行分析建模。基於事先學習掌握的先驗知識模型，在 SQL 執行前選擇最優的執行模式。</p><span id="OSC_h2_15"></span><h2>9.2 水平擴展規模應用</h2><p>Trino 具備了容錯執行模式，測試數據顯示效果不錯，那麼接下來大家就會思考：是否可以基於該能力提供更大規模的分析查詢加速服務呢？</p><p>實際業務場景中，企業可能需要按需進行任務提交與彈性資源調度，尤其是在大規模、雲原生環境中，即使開啓容錯模式，對於單個 Trino 集羣，其協調節點（Coordinator）依然可能存在併發能力的瓶頸。此外，從軟件架構角度看，單一 Trino 集羣的可用性也存在一定的風險，影響雲服務環境下的 SLA 目標達成。</p><p>針對上述問題，華為雲交互式分析引擎 HetuEngine 提供了三層分佈式架構，通過統一的 SQL 訪問入口——<strong>HSFabric</strong>來向業務提供全局唯一的<strong>JDBC</strong>服務地址。</p><p><img alt="10.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113244022274958.png" referrerpolicy="no-referrer"></p><p>通過 HSFabric 統一 SQL 訪問入口，HetuEngine 實現了將業務層邏輯與某個特定的計算實例解耦，單個資源租戶內部可以橫向擴展多個計算實例，同一個租戶內部的 SQL 任務可以在不同計算實例間靈活分配。</p><p>無論從多租戶還是單一租戶角度看，HetuEngine 的併發容量可水平擴展，同時也提升了服務可用性和資源利用率。</p><p>基於上述架構，HetuEngine 支持服務管理員自由決定是否開啓/關閉單個租戶的容錯執行模式，以便更好的滿足不同場景的業務訴求。</p><p><img alt="11.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114116664351503.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_16"></span><h2>9.3 故障處理與恢復</h2><p>在 Trino 容錯執行過程中，Stage 間的 Shuffle 數據會大量落入到分佈式文件系統上。這裏以 HDFS 為例進行討論可能存在問題。</p><p>假設——1 個大 SQL 在執行過程中，Trino 正在往 HDFS 上寫 shuffle 數據，突然 Trino 所在物理機節點發生意外（比如，停電、斷網、操作系統崩潰等），或者 Trino 本身出現故障停止工作（比如，過載等）。這可能會導致整個 Trino 集羣都徹底停止工作。此時，需要管理員人工介入才能重新恢復 Trino 集羣的正常工作狀態。</p><p>顯而易見，對 Trino 來説，至少存在 2 個問題需要思考和解決：</p><ul><li>如何實現 Trino 集羣的應急快速恢復</li><li>確保 HDFS 上的殘留文件及時被清理，避免存儲空間耗盡</li></ul><p>華為雲交互式分析引擎 HetuEngine 基於三層服務化+容器化架構，可有效應對上述挑戰：</p><p><strong><u>針對問題 1</u></strong><strong>：</strong></p><p>藉助於全容器化的部署架構，HetuEngine 的任一計算實例（對應於 1 個分佈式 Trino 集羣）中的任一軟件進程在發生故障/意外時，均可由 Service 層快速自動拉起新的容器進程來接管和補齊服務缺失，在人工介入前快速完成故障自愈。</p><p>在可用資源可能存在不足時，HetuEngine 支持計算實例在線彈性伸縮，通過自動調整 Worker 數量來動態平衡資源利用率，快速補充因故障而丟失的 Worker 節點資源。</p><p>在 Coordinator 節點發生故障時，HetuEngine 從三方面入手進行應對——</p><ol><li>同一計算實例中的 Worker 節點立即與備 Coordinator 進行組網；</li><li>備 Coordinator 升為新的主 Coordinator；</li><li>統一 SQL 入口立即將新的 SQL 請求引流到新的主 Coordinator</li></ol><p><img alt="12.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113305047480491.png" referrerpolicy="no-referrer"></p><p><strong><u>針對問題 2</u></strong><strong>：</strong></p><p>HetuEngine 的 Service 層全天 24 小時不間斷監控，跟蹤並及時發現、清理各層級作業殘留（包括：數據、文件、目錄、元數據等）。</p><p>同時針對歷史任務進行多維度地深入洞察，生成高價值 SQL 運維圖表和決策推薦信息，最終呈現在控制枱頁面。</p><p>Service 層提供的全方位貼心服務，極大降低了對數據分析平台管理員的專業知識要求，解決管理員對於長期運營的後顧之憂。</p><span id="OSC_h2_17"></span><h2>9.4 大數據平台業務無損的彈性擴縮容</h2><p>通常來説，大數據平台的彈性伸縮方案只會涵蓋 Hive、Spark 這類批處理引擎。因 Hive、Spark 本身具備了容錯執行能力，即使因為大數據平台的管控面下發指令強制縮容一個正在運行 Hive/Spark 作業的物理節點，也不會影響相關作業的最終執行成功，最多隻是引發了局部 task 的重試，增加了執行時長。因此，面向 Hive、Spark 引擎的大數據平台彈性伸縮方案相對來説比較容易，只需要關注資源層面的管理操作即可。</p><p>但對 Trino 這類 MPP 架構引擎來説，上述大數據平台的彈性伸縮管理模式就可能會面臨如下幾個方面的挑戰：</p><ul><li>MPP 架構的 SQL 引擎一般都是常駐形態，在縮容過程中任何一個節點被強殺都可能導致該節點上正在運行中的 SQL 任務失敗；</li><li>Trino 的協調節點 Coordinator 默認為 1 個，在縮容過程中，強殺 Coordinator 所在的節點會導致整個 Trino 集羣不可用，運行中的所有 SQL 任務失敗；</li><li>Trino 集羣的擴容，需要平台管理面深入理解 Trino 集羣的內部服務發現與工作機制，針對具體集羣的 IP 和端口號定製配置，才能順利的將新節點加入到一個已經存在的 Trino 集羣中。</li></ul><p>綜上，要想在大數據平台服務上實現對 Trino 生態引擎的彈性伸縮，且做到業務無損，需要在大數據平台服務層和 Trino 內核層之間抽象出一個面向多資源租戶+多個計算實例（Trino 集羣）的資源管理&amp;業務接入 service 層。</p><p>HetuEngine 的 service 層對大數據平台服務層屏蔽底層 Trino 內核細節，對上提供 Rest API 調用，並將大數據平台服務層的管理運維訴求轉換為對具體 Trino 集羣的實際變更。同時要做到對多個 Trino 集羣的日常狀態監控與自維護。</p><p><img alt="13.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113353062381452.png" referrerpolicy="no-referrer"></p><p>在上述架構基礎之上，可以基於 Trino 容錯執行的能力，在開啓彈性伸縮時，進一步降低大數據平台層面彈性伸縮的等待時間。</p><p>一種可行的思路大致是——大數據平台服務層向 HetuEngine 的 service 層下發縮容指令，service 確定即將被縮容的節點上正在運行的計算實例，並將其動態切換到容錯模式。在通常情況下，service 層可以快速向上層服務層答覆縮容操作準備繼續，不用等待 SQL 任務執行完。</p><span id="OSC_h2_18"></span><h2>9.5 小結</h2><p>基於上述架構與思路，華為雲 HetuEngine 能很好地應對容錯執行模式可能引入的新問題，顯著提升生產環境實際運維效率，助力用戶很方便地享受容錯執行的新紅利。</p><p>接下來， HetuEngine 將逐步引入和完善在兩個不同執行模式間的智能切換能力，進一步完善對大數據雲服務彈性伸縮的場景適配，在數據湖內一站式 SQL 分析領域持續創新、長期演進。</p><span id="OSC_h1_19"></span><h1>10 HetuEngine 2.0 版本預告</h1><p>預計 2023 年 9 月 30 日，HetuEngine 2.0 將隨華為雲 MRS 3.3.0-LTS 正式發佈。在該版本中，可以看到一系列的新能力，例如——</p><ul><li>基於 Java17 運行全新內核，基礎性能、穩定性再上一個新台階，TPCDS 提速 30%</li><li>大 SQL 主動防禦：事前提示/攔截，事中熔斷，事後統計</li><li>支持容錯執行模式：適用範圍更廣泛，使能一站式 SQL 加工 &amp; 分析</li><li>租戶內多計算實例架構：自動負載均衡、針對單個業務的併發能力可水平擴展</li><li>新增數據源類型：Hudi，MySQL</li><li>新增支持新建 Hudi 表、Insert 數據</li><li>新增支持 Hue 對接 HetuEngine，提供可視化 SQL 編輯頁面</li><li>新增支持代理用戶模式，支持對客戶的自有用戶體系的代理鑑權及審計</li></ul><p><img alt="14.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113424230425833.png" referrerpolicy="no-referrer"></p><p>相關鏈接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.huaweicloud.com%2Fintl%2Fzh-cn%2Fcmpntguide-lts-mrs%2Fmrs_01_1711.html" rel="nofollow" target="_blank">https://support.huaweicloud.com/intl/zh-cn/cmpntguide-lts-mrs/mrs_01_1711.html</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10117447</guid>
            <link>https://my.oschina.net/u/4526289/blog/10117447</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：CNCF 宣佈 Cilium 畢業]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fstakater%2FReloader" target="_blank">Reloader</a></h3><p>Reloader 是一個 Kubernetes 控制器，用於監控 ConfigMap 和 Secrets 中的變化，並對 Pod 及其相關部署、StatefulSet、DaemonSet 和 DeploymentConfig 進行滾動升級！</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXenitAB%2Fspegel" target="_blank">Spegel</a></h3><p>Spegel 在瑞典語中意為鏡像，是一種無狀態集羣本地 OCI 註冊鏡像。</p><p>Spegel 使 Kubernetes 集羣中的每個節點都能充當本地註冊鏡像，允許節點之間共享鏡像。一個節點已提取的任何映像都可供集羣中的任何其他節點提取。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkr8s-org%2Fkr8s" target="_blank">kr8s</a></h3><p>這是一個用於 Kubernetes 的簡單、可擴展的 Python 客戶端庫，對於已經知道如何使用 kubectl 的人來説，感覺非常熟悉。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40sachin.singh.professional%2Freal-application-industry-based-project-on-devops-b3764c9688b2" target="_blank">基於 DevOps 的真實應用行業項目</a></h3><p>這篇文章是關於基於 DevOps 的真實應用行業項目的介紹。作者在文章中提到了如何設置 AWS 雲環境、安裝和配置必要的工具（如 AWS CLI、eksctl、Helm 和 kubectl），以及如何使用這些工具來創建和管理基於 Kubernetes 的應用集羣。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40saadullahkhanwarsi%2Ftitle-comprehensive-ci-cd-pipeline-with-terraform-packer-jenkins-sonarqube-maven-docker-fa4e51b57971" target="_blank">使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 的綜合 CI/CD 流水線</a></h3><p>這篇文章介紹瞭如何使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 建立一個全面的 CI/CD 流水線。這篇文章提供了一個全面而詳細的指南，介紹了每個步驟的具體操作和配置，並強調了建立可靠和高效的開發流水線的重要性。通過按照文章中的步驟進行操作，讀者可以建立一個完整的 CI/CD 流水線，並實現高質量軟件的快速交付</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fannouncements%2F2023%2F10%2F11%2Fcloud-native-computing-foundation-announces-cilium-graduation%2F" target="_blank">CNCF 宣佈 Cilium 畢業</a></h3><p>日前 CNCF 宣佈 Cilium 畢業。Cilium 是一種基於 eBPF 的開源雲原生解決方案，用於提供、保護和觀測工作負載之間的網絡連接。</p><p>Cilium 最初由 Isovalent 創建，基於 eBPF 從頭開始構建。它於 2021 年 10 月成為 CNCF 孵化項目，現在有來自 7 家不同公司的維護者和 800 多名個人貢獻者。該項目為全球最大的 Kubernetes 集羣提供支持，最終用戶涵蓋從數字原生初創企業到全球最大的金融機構和電信運營商。它擁有 46 個來自公司的公開案例研究，包括 Bell Canada、Bloomberg、DB Schenker、S&amp;P Global、Sky 和紐約時報，在其用戶文件中列出了 100 多家組織。Cilium 是活躍度第二高的 CNCF 項目，僅次於 Kubernetes。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fcncf-crio-graduation%2F%3FtopicPageSponsorship%3D82a399eb-74a1-4f0b-83c4-ccff2bdfcda1" target="_blank">CNCF 宣佈 CRI-O 項目畢業</a></h3><p>雲原生計算基金會宣佈 CRI-O 項目畢業，該項目為 Kubernetes 生產環境中的 kubelet 提供安全、高性能且穩定的容器運行時接口 (CRI) 實現。該項目已被 7 個新組織採用，發佈了 11 個新的次要版本，並向主分支提交了 4,000 多次提交。</p><p>CRI-O 早在 2016 年就起源於 Kubernetes 孵化器，由 Red Hat 創立。到 2019 年 4 月，它已獲得雲原生計算基金會 (CNCF) 的認可。為了從孵化階段過渡到正式畢業，CRI-O 採取了幾個重要步驟。其中包括加強治理結構、制定行為準則、建立安全列表、接受 Ada Logics 與 CNCF 和 OSTIF 協調進行的安全審計、獲取多元化的用戶羣並進行用戶訪談、投資全面的文檔以及積極培養新的貢獻者。</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10118125</guid>
            <link>https://my.oschina.net/u/4197945/blog/10118125</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一份谷歌寫給 CTO 們的報告 - DORA 2023 版全面解讀]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源創會預告】1024 程序員節（的前兩天），相約開源中國辦公室，我們一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p><img src="https://oscimg.oschina.net/oscnet/up-5eb3d1822561be3b093c8103f70b3865546.png" alt="file" referrerpolicy="no-referrer"></p><h2>背景</h2><p>幾天前，谷歌雲旗下的 DORA (DevOps Research and Assessments) 發佈了一年一度的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Fdevops-sre%2Fannouncing-the-2023-state-of-devops-report" target="_blank">State of DevOps 2023 報告</a>。DORA 在國內不像 Gartner 有那麼高的知名度，但在全球，DORA 是研發效能 / DevOps 領域最具影響力的報告，從 2014 年開始，每年會出一份，2020 因為疫情的原因沒有出，所以加上今年的一共有 9 份。</p><p>DORA 一開始是一家獨立的研究機構，不過在 2018 年底加入了谷歌雲。總體來講 DORA 的報告是整個 DevOps 行業裏面最為專業和客觀的，這也應該是他當初受到谷歌青睞的原因。即使是加入谷歌後，它的報告也基本可以保持中立性。從最初聚焦在軟件發佈指標，到現在延伸到組織文化，業務表現，DORA 的閲讀人羣也從經理，總監為主的技術中層擴展到 CTO, VP 為主的技術管理層，這點尤其在今年的報告中更為突出，也貼合谷歌雲從面向開發者到面向管理者的重心轉移。</p><p>Bytebase 作為一家面向研發團隊，提供前沿數據庫 CI/CD 開源工具的廠商，這也是我們連續第三年對 DORA 進行深度解讀：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247483758%26idx%3D1%26sn%3D61859a6708f6f5b535ed0bd5ff98f199%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2021 報告深度解讀</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247497479%26idx%3D1%26sn%3Da3908d32d14a24b377c937186f8c8cdf%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2022 報告深度解讀</a></li></ul><h2>贊助商</h2><p><img src="https://oscimg.oschina.net/oscnet/up-a571211f81156e33243d22cc85baf809521.png" alt="file" referrerpolicy="no-referrer"> 今年獲取報告需要先留下聯繫方式，在收購 DORA 後的第 5 個年頭，谷歌雲也開始加速了對 DORA 的變現。今年的贊助商相比去年也發生了很大的變化 <img src="https://oscimg.oschina.net/oscnet/up-a4a6a5d060ce086f67922e136fa6647cc5d.png" alt="file" referrerpolicy="no-referrer"></p><h3>去年的老面孔</h3><ol><li>Broadcom Software。Broadcom 算是一家比較傳統的軟件廠商，和 DevOps 相關的產品線多來自於 2018 年對 CA 的收購。總部在硅谷，當年 CA 大大的 Logo 還掛在 Highway 101 旁的唯一一棟高樓上。</li><li>Deloitte。IT 實施諮詢，DORA 報告贊助商的常客。</li></ol><h3>今年的新面孔</h3><ol><li>LinearB。研發流程的優化。通用企業流程挖掘領域的領導者是 Celonis，而 LinearB 可以理解為軟件研發這個特定領域的 Celonis。 <img src="https://oscimg.oschina.net/oscnet/up-de3386de47e94ff6f9827947556a4f0e36e.png" alt="file" referrerpolicy="no-referrer"></li><li>Digital.ai。和 LinearB 類似，只是更加直白地用 AI 來宣傳。 <img src="https://oscimg.oschina.net/oscnet/up-395cb0cd74c0e800da5e2cdeba2f02b0962.png" alt="file" referrerpolicy="no-referrer"></li><li>Opsera。也和前兩家類似。 <img src="https://oscimg.oschina.net/oscnet/up-8b7dcc3e83be5073ef33648e4c85fb8b24a.png" alt="file" referrerpolicy="no-referrer"></li><li>Sleuth。也是做類似的事情，不過更加聚焦在 DORA 上。 <img src="https://oscimg.oschina.net/oscnet/up-521be51a5ff92a6025053bfcb17e834b93b.png" alt="file" referrerpolicy="no-referrer"> 插曲，這家叫 swarmia 有點機智，知道新的 DORA 報告出了，會有人去搜贊助商，然後就投放了對應的關鍵詞？ <img src="https://oscimg.oschina.net/oscnet/up-ccb1f7e5dd1601eb36d716183f45958e27f.png" alt="file" referrerpolicy="no-referrer"></li><li>Qarik。幫用戶遷移到雲原生架構的。 <img src="https://oscimg.oschina.net/oscnet/up-610f2b5db5857c3339cafc7b974b4731486.png" alt="file" referrerpolicy="no-referrer"> 從贊助商列表看，做研發流程洞察優化的廠商佔了絕大部分，也貼合 DORA 報告的目標受眾。不過也可以看到這個領域競爭的激烈程度。接下來我們進入正題，解讀一下 DORA 報告本身。</li></ol><h2>受訪人羣</h2><p>樣本量相比去年增加了 3.6 倍，整個業界應該是僅次於 Stack Overflow Developer Survey 的規模。覆蓋人羣則更加全面。 <img src="https://oscimg.oschina.net/oscnet/up-d2964cbd9daae32bd711ab2f1906b0aeca9.png" alt="file" referrerpolicy="no-referrer"></p><p>地域分佈上，除去依然保持低調的某東方大國，也體現了各國軟件業的相對體量。 <img src="https://oscimg.oschina.net/oscnet/up-46905759d065ca9f3bdbf33a66bc3accaae.png" alt="file" referrerpolicy="no-referrer"></p><p>這個分佈也可以作為出海軟件公司的參考，用於選擇進入一個新大陸的落腳點。看非洲，肯尼亞已經排在了南非之前。 <img src="https://oscimg.oschina.net/oscnet/up-47a0ad283cc693b1fe29d3ab4c051ef7d2b.png" alt="file" referrerpolicy="no-referrer"></p><h2>方法論</h2><p><img src="https://oscimg.oschina.net/oscnet/up-236857daf38920f85a315070fd207b3ef72.png" alt="file" referrerpolicy="no-referrer"> DORA 最近幾年的報告都有兩條主線：</p><ul><li>組織線：業務表現，團隊表現，個體感受</li><li>事務線：交付表現和運行表現</li></ul><p>DORA 的風格和海外做軟件的風格一樣，都是從點切入，由小及大。它最初的切入點是軟件交付，後面增加了軟件運行。再在此基礎上推演業務表現 / 團隊表現 / 個體感受。</p><h2>四大核心指標</h2><p>四大核心指標基本沒變：</p><ul><li>Deployment frequency（發佈頻率）</li><li>Change lead time (代碼從提交到上線的時間）</li><li>Change failure rate (上線失敗需要介入的比例）</li><li>Failed deployment recovery time (失敗的部署需要恢復的時間）</li></ul><p>其中最後一個術語做了調整，之前報告用的是更加通用的術語 time-to-restore。因為通用，所以無法區分發布造成的故障和自然災害造成的故障。新的術語更加精確地限定在了發佈領域。 <img src="https://oscimg.oschina.net/oscnet/up-0c7561f6d41f7eb884aee368f442f6af0c3.png" alt="file" referrerpolicy="no-referrer"></p><h2>分級 (Grading) - 精英級的迴歸</h2><p>去年報告因為 Elite 和 High 之間缺乏區分度，本來的四檔變成了三檔。 <img src="https://oscimg.oschina.net/oscnet/up-2b50c2b87c2c2d71b00e52b14c2b1fcea42.png" alt="file" referrerpolicy="no-referrer"></p><p>今年 Elite 精英級又迴歸了，原因是因為樣本量的大幅增加，區分度又出來了 <img src="https://oscimg.oschina.net/oscnet/up-612c3f1d0205e1573279d38a151553c2d47.png" alt="file" referrerpolicy="no-referrer"></p><h2>分類 (Clustering) - 全新的組合</h2><p><img src="https://oscimg.oschina.net/oscnet/up-593502e6fe58556ee4de9a617803a60c51e.png" alt="file" referrerpolicy="no-referrer"></p><p>去年的報告採用了類似 Tuckman 組織發展模型的按階段分類 (Forming &gt; Storming &gt; Norming &gt; Performing &gt; Adjourning)，劃分為 Staring &gt; Flowing &gt; Slowing &gt; Retiring。 <img src="https://oscimg.oschina.net/oscnet/up-a7e04be377333e0575e992aed282c5772ca.png" alt="file" referrerpolicy="no-referrer"></p><p>今年採用了新的基於特質的分類：</p><ul><li>User-centric - 用戶導向型</li><li>Feature-driven - 功能導向型</li><li>Developing - 發展型</li><li>Balanced - 均衡型</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-870577da04ed356ac34cbb857cff2d3b907.png" alt="file" referrerpolicy="no-referrer"></p><p>不同分類下各項指標的表現： <img src="https://oscimg.oschina.net/oscnet/up-9cecad6ba3b191fc650daa36a587d3ce4d8.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-aeb3f3797efd9aa334df838820f3eb44da1.png" alt="file" referrerpolicy="no-referrer"></p><p>筆者覺得今年的分類有點模糊，邊界不清晰。拿 Bytebase 自身來説，按照去年的階段分類，可以很清楚地落在 starting 到 flowing 之間。而對於今年的 4 個分類，Bytebase 其實都能沾上邊。按照特質分類，個人感覺需要像 MBTI 人格分析那樣更加的細分才行。</p><h2>關鍵發現</h2><p><img src="https://oscimg.oschina.net/oscnet/up-28145dc564762f1808214447ffad28a4bf3.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>建立健康的文化</li><li>站在用戶視角做事</li><li>通過更快的代碼評審提高軟件交付</li><li>通過高質量的文檔加成技術能力</li><li>通過雲提升基礎設施的靈活性</li><li>平衡交付的速度，運行的表現和用戶</li><li>公平地分配工作量</li></ul><h3>文化和用戶視角</h3><p>用戶視角也是文化的一部分，就放在一起講了。 <img src="https://oscimg.oschina.net/oscnet/up-d4b9e7f67efeab0aa7925412e569aff5947.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-e2216b39ddf54ed1c64cf79e94fe1eb2631.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-a58f36f397b485ac33cd22c0b200e56fa9a.png" alt="file" referrerpolicy="no-referrer"></p><blockquote><p>Westrum culture 來自於 Westrum 在 2004 年的論文 A typology of organisational cultures 裏的觀點。高度信任且注重信息交流的組織文化能帶來出色的業務表現。</p></blockquote><p>在所有評估的指標裏，Westrum 文化和以用戶為中心是最能帶來正向效果的。前者大家可以進一步閲讀 Westrum 的論文，而後者在 DORA 報告裏還給出了進一步的數據。 <img src="https://oscimg.oschina.net/oscnet/up-fd32e6b68e3a63952fd9181557bbb936d61.png" alt="file" referrerpolicy="no-referrer"></p><p>可以看到以用戶為中心能給每一個指標都帶來顯著提升，自然現在的公司都要大力提倡了。</p><h3>影響表現的技術因素</h3><p><img src="https://oscimg.oschina.net/oscnet/up-b4c4307c5e25a57a2a9d52afb54b25dd442.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-5d62680bc8930b6157424dc0775ff2d5417.png" alt="file" referrerpolicy="no-referrer"></p><p>延用了計算機的經典解法 - 分治。松耦合的架構 &gt; 更小的變更 &gt; DORA 四大核心指標的提升。 <img src="https://oscimg.oschina.net/oscnet/up-6b5812b180b6aae192f078f4309b168f867.png" alt="file" referrerpolicy="no-referrer"></p><h2>重新驗證 Reliability 和 Performance 的關係</h2><p><img src="https://oscimg.oschina.net/oscnet/up-36bc9047b6db543a0c8185a3dc00f51f3a6.png" alt="file" referrerpolicy="no-referrer"> 2022 年報告的數據顯示，組織先要投入很長一段時間的穩定性建設，才能看到成果。這個結論多少讓人沮喪，開始沒有正向反饋就容易勸退。</p><p>不過 2023 年通過優化問卷，得出了一個鼓舞人心的結論，就是穩定性和表現的關係符合 J 曲線，投入前期就有效果，然後再經過一段瓶勁期，最終再是顯著的收益。</p><h2>還解決不了主要矛盾的 AI</h2><p><img src="https://oscimg.oschina.net/oscnet/up-fdaf6d7748c0b601b199870f4e087122966.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-946410a6e01eb4391dd33570bd0286f22ac.png" alt="file" referrerpolicy="no-referrer"> 今年的報告自然不能忽視 AI，結論算是澆了一盆冷水，在所有技術影響因子裏是以很大的差距墊底的。這倒也符合個人的預期，因為目前 AI 唯一破圈的場景是幫助寫代碼，屬於「道法術器」裏的「器」，是影響最小的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-36288bc0d74bf857329cfdc1bddc0d7848c.png" alt="file" referrerpolicy="no-referrer"> 這幅圖也比較有意思，展示了當下在研發交付領域，AI 擅長的和不擅長的。除了最後一個 Solving file path issue 是個有點奇怪的問題外，墊底的幾個對應的都是「道法」層面的主要矛盾。</p><h2>總結</h2><h3>一份專業的報告</h3><p>拋開內容本身，DORA 一如即往地給我們展示瞭如何撰寫一份專業的行業報告。方法論，受訪人羣，分析方法都在報告中有清晰闡述。 <img src="https://oscimg.oschina.net/oscnet/up-3d18a669ca3106519c0952cf0ec9b5ae842.png" alt="file" referrerpolicy="no-referrer"></p><p>有反直覺的數據，也不會勉強附和，而是把疑問拋出。 <img src="https://oscimg.oschina.net/oscnet/up-d66aed3bd7c358764137da07ccf5594ce95.png" alt="file" referrerpolicy="no-referrer"></p><p>關注更多的聲音，既讓報告更加全面，也注入了人文的元素。 <img src="https://oscimg.oschina.net/oscnet/up-443671e03d566e7c444137d802adf5be8ff.png" alt="file" referrerpolicy="no-referrer"></p><p>説幾點我讀下來的不足：</p><h3>I. 輕描淡寫的平台工程</h3><p><img src="https://oscimg.oschina.net/oscnet/up-5e850566eedb734896a3ec88d39c1a7f6c3.png" alt="file" referrerpolicy="no-referrer"></p><p>今年的報告裏第一次提到了最近興起的平台工程 (Platform Engineering)。DORA 的主題是研發效能 / DevOps，從行業趨勢看，這部分工作對應到的就是平台工程團隊。</p><p>平台工程的用戶是內部的研發工程師，所以這部分也就出現在第 19 頁 User-centric 裏。但作為一份研究研發組織的報告，應該可以展開講講平台工程，畢竟這是近 10 多年裏，繼 DevOps / SRE 後，終於湧現出來的一個新組織形態。</p><h3>II. 老生常談的 Cloud</h3><p><img src="https://oscimg.oschina.net/oscnet/up-bb34887f4cf48b52aca04ad414bde728faf.png" alt="file" referrerpolicy="no-referrer"></p><p>報告裏列舉了 Cloud 的各種優勢，但對於最近業界 Cloud cost 相關的討論以及伴隨着的下雲呼聲沒有涉及，缺少了一點辯證，這是報告出自谷歌雲之手的一點偏心吧。除此之外，谷歌的另外一處植入就是談論自家的 SRE 實踐。 <img src="https://oscimg.oschina.net/oscnet/up-c53fa3904c6646e61ba9f9e618ed89534da.png" alt="file" referrerpolicy="no-referrer"></p><h3>III. 轉型期的 DORA</h3><p><img src="https://oscimg.oschina.net/oscnet/up-ce8afdbe7baf804fcc7c2c4968e6d97eab7.png" alt="file" referrerpolicy="no-referrer"> 業界權威的年度報告裏，Stack Overflow Developer Survey 偏一線，關注具體工作中所使用的產品技術；Gartner 面向管理層，關注行業的趨勢。DORA 介於兩者之間，DORA 裏 DO 所代表的 DevOps 基因決定了報告的一線視角，RA 所代表的 Research &amp; Assessment 又使得它會給出價值判斷。而從這幾年的報告趨勢來看，DORA 正逐步走向管理層。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09fd199bbdf16e597abce5f819dacb538e8.png" alt="file" referrerpolicy="no-referrer"> 比如從贊助商列表來看，往年都有不少研發鏈路某一個環節的工具廠商，像做 IDE 的 JetBrains，製品庫的 JFrog，代碼託管的 GitLab，應用部署的 Octopus，數據庫變更的 Liquibase。而今年則是清一色的研發效能過程優化贊助商，或許這也是和報告背後的金主谷歌雲面向大客的策略調整有關。</p><p>再從正文看，今年的報告弱化了 DORA 一直背書的軟件發佈四大核心指標，而是更多地去敍述核心指標背後的元素。這其中把文化和以用戶為中心放在了前兩位。</p><blockquote><p>Culture eats strategy for breakfast - 彼得·德魯克</p></blockquote><p>既然轉型走高層的路線，那就要面臨陣痛，DORA 團隊分析覆盤的能力很強，但相比 Gartner，缺少前瞻性。其本身又綁定在 DevOps 這個早已成熟的概念，再疊加上要宣傳 SRE 這個也已經過了成長期的實踐。對於平台工程，對於 AI，DORA 這次提及的不多，這一方面體現了它務實的部分，但這些未來 3 - 5 年可見的趨勢，才是管理層們更關心的內容。</p><h2>結束語</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0e98a4ed8b4be53aec56928693c2d1406c0.png" alt="file" referrerpolicy="no-referrer"> 度量不是目的，就像發佈軟件並不是目的。數據若能印證假設固然值得欣喜，但更有價值的往往還是揭示錯誤的假設。提高軟件發佈的效率，也是為了形成更短的反饋閉環，發現產品的缺陷，進行改良，更好地滿足用戶。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0d34715122deb2e90e01ded95b89e965f32.png" alt="file" referrerpolicy="no-referrer"> 在這個 AI 的黎明，虛擬現實的前夜，一個具備持續改進能力的組織才是面向未來不確定性下的最大確定性🦾。</p><p>能讀到這裏的，也一定是對軟件交付有追求的讀者。可以看一下我們正在做的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">Bytebase</a>，它目前是整個行業裏，數據庫變更 CI/CD 領域的領導者。</p><hr><p>💡 你可以訪問<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">官網</a>，免費註冊雲賬號，立即體驗 Bytebase。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 15 Oct 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10118131</guid>
            <link>https://my.oschina.net/u/6148470/blog/10118131</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
