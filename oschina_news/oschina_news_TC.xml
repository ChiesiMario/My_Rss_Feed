<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 20 Nov 2023 15:02:59 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Oracle Linux 9.3 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Oracle Linux 9 系列<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Flinux%2Fpost%2Foracle-linux-9-update-3" target="_blank">發佈了第 3 個版本更新</a></u>，支持 64 位 Intel 和 AMD (<code>x86_64</code>) 以及 64 位 Arm (<code>aarch64</code>) 平台。與所有的 Oracle Linux 版本一樣，此版本與相應 RHEL 版本 100% 應用二進制兼容。</p><p>對於<code>x86_64</code>和<code>aarch64</code>架構，Oracle Linux 提供了 Unbreakable Enterprise Kernel (UEK) 內核，版本為 UEK Release 7 Update 2, 5.15.0-200.131.27。UEK R7 基於上游 Linux Kernel 5.15，同時支持 Oracle Linux 9 和 Oracle Linux 8。此外還為<code>x86_64</code>架構提供兼容紅帽的內核 (RHCK)，版本號為 5.14.0-364。</p><p><strong>主要變化</strong></p><ul><li>Oracle Linux 現在支持通過 DNF 安裝補丁後自動重啓系統。通過增強的 DNF，使用不同選項（從不、更改時、需要時）自動重啓可以加快補丁管理操作</li><li>OpenSSH 默認情況下顯式強制使用 SHA-2 算法進行密鑰測試，對於運行 Oracle Linux 9 Update 3 的系統，SHA-1 在客戶端不可用；此增強功能避免了使用 SHA-1 算法中的弱點</li><li>採用 UEK R7U2 的 Oracle Linux 9.3 繼續維護並支持 btrfs 文件系統，以訪問 Linux 上最現代的寫入時複製 (COW) 文件系統之一</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Flinux%2Fpost%2Foracle-linux-9-update-3" target="_blank">詳情查看發佈公告</a></u>、<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.oracle.com%2Fen%2Foperating-systems%2Foracle-linux%2F9%2Frelnotes9.3%2F%23Oracle-Linux-9" target="_blank">Release Notes</a></u>。</p><blockquote><p>Oracle Linux 是由 Oracle 支持的企業級 Linux 發行版，它從 RHEL 源代碼包生成。Oracle Linux 的獨有特性包括一份定製且嚴格測試過的名為 「Oracle Unbreakable Kernel」 的 Linux 內核，與 Oracle 的多數數據庫應用在內的軟硬件產品的緊密集成，以及 「零掉線打補丁」 技術 —— 該特性能讓系統管理員在不重啓的情況下更新內核。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-65ef8ba8572130a6b1d0d70109f7d6a0c03.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 10:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267286/oracle-linux-9-update-3</guid>
            <link>https://www.oschina.net/news/267286/oracle-linux-9-update-3</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：Istio 1.20.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Floft-sh%2Fdevpod" target="_blank">DevPod</a></h3><p>DevPod 是一款純客戶端工具，可在任何後端基於 devcontainer.json 創建可重現的開發人員環境。每個開發者環境都在一個容器中運行，並通過 devcontainer.json 進行指定。通過 DevPod 提供商，這些環境可以在任何後端創建，如本地計算機、Kubernetes 集羣、任何可訪問的遠程機器或雲中的虛擬機。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FFairwindsOps%2Fgemini" target="_blank">Gemini</a></h3><p>Gemini 是用於管理卷快照的 Kubernetes CRD 和 operator。可以定期為 PersistentVolumes 上的數據創建快照，清空舊快照，並以最少的停機時間恢復快照。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fr0binak%2FMTKPI" target="_blank">MTKPI</a></h3><p>MTKPI - 多工具 Kubernetes 滲透測試鏡像。該 docker 映像包含 Kubernetes 滲透測試所需的所有最常用工具。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcollabnix.com%2Ftop-5-alert-and-monitoring-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 5 個最佳告警和監控工具</a></h3><p>這篇文章介紹了針對 Kubernetes 的前五個告警和監控工具。文章指出，Kubernetes 作為容器運行應用程序的首選選擇，具有可伸縮性、靈活性和彈性等優勢。然而，管理和監控 Kubernetes 可能會相當困難。因此，對於保證應用程序平穩可靠運行的關鍵是監控和告警。監控和告警是有效運營 Kubernetes 集羣的實踐方法，它們使您能夠收集集羣、節點、Pod、容器、服務和應用程序的指標、日誌和跟蹤數據，並使用儀錶板、圖表和表格對數據進行可視化和分析。通過規則、閾值和通知對異常、錯誤、故障和 SLA 違規進行告警，並通過調查根本原因、解決問題或升級到適當的團隊來採取行動。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcollabnix.com%2Ftop-5-machine-learning-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 5 大機器學習工具</a></h3><p>這篇文章介紹了在 Kubernetes 上進行機器學習的五個頂級工具。文章介紹了每個工具的特點、優勢和使用案例，以及選擇這些工具的標準，如功能性、易用性、流行度和創新性。通過使用這些工具，用戶可以更輕鬆地在 Kubernetes 上進行機器學習任務，並提高其工作流程的效率和可靠性。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspacelift.io%2Fblog%2Fkubernetes-deployment-strategies" target="_blank">8 種不同類型的 Kubernetes 部署策略</a></h3><p>這篇文章介紹了 Kubernetes 的八種不同部署策略，包括 Recreating、Rolling、Blue/Green、Canary、A/B、Ramped Slow Rollout、Best-Effort Controlled Rollout 和 Shadow Deployment。它解釋了每種策略的優點和用途，幫助讀者在應用程序部署和升級時做出明智的選擇。</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubescape.io%2Fblog%2F2023%2F09%2F19%2Fintroducing-kubescape-3%2F" target="_blank">Kubescape 3.0 發佈</a></h3><p>Kubescape 是 CNCF Kubernetes 安全姿態管理工具的下一代，日前發佈了 v3.0。</p><p>Kubescape 3.0 新增以下功能：</p><ul><li>將合規性和容器掃描結果存儲為 Kubernetes 集羣內的資源</li><li>通過命令行界面掃描容器鏡像的漏洞</li><li>報告集羣中所有鏡像的漏洞情況</li><li>全新的概覽安全掃描，幫助你為集羣安全設置基線</li><li>突出顯示高風險工作負載：那些如果受到損害可能造成最大危害的工作負載</li><li>改進的顯示輸出</li><li>新的基於能力的 Helm chart</li><li>每個工作負載、命名空間和集羣的 Prometheus 指標</li><li>通過 Prometheus Alertmanager 進行告警</li><li>將數據發送到集羣外的託管服務</li></ul><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.opencost.io%2Fblog%2Faks-cost-analysis" target="_blank">OpenCost 宣佈與 Microsoft AKS 成本分析工具集成</a></h3><p>OpenCost 正在與 Microsoft 的新 Azure Kubernetes Service（AKS）成本分析工具集成，以實現使用度量收集。Microsoft Azure 的客戶現在可以根據 Kubernetes 特定的結構，原生地瞭解成本分配的可見性。</p><p>AKS 成本分析是針對標準和高級 AKS 羣集的附加組件，向客戶提供免費的服務。它直接在 Azure 門戶中提供成本分配報告。AKS 客戶現在可以輕鬆地可視化其 Kubernetes 成本分配，作為進一步優化和異常檢測的基礎。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fistio.io%2Flatest%2Fnews%2Freleases%2F1.20.x%2Fannouncing-1.20%2F" target="_blank">Istio 1.20.0 發佈</a></h3><p>Istio 1.20.0 發佈，這是 2023 年最後一個 Istio 版本，以下是該版本主要變化：</p><ul><li>網關 API</li><li>改進的外部名稱服務支持</li><li>一致的 Envoy 過濾器排序</li><li>對網絡 WasmPlugin 的擴展支持</li><li>TCP 元數據交換增強</li><li>插入根證書輪換</li><li>流量鏡像現在支持多個目標</li><li>...</li></ul><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 10:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10149219</guid>
            <link>https://my.oschina.net/u/4197945/blog/10149219</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[運營商神操作：後台斷網、停用寬帶賬號，強迫用戶更換光貓]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，河南電視台都市頻道節目報道稱，河南周口聯通為了強迫用戶更換光貓，<strong>公司在後台停掉用戶的寬帶賬號，導致用戶無法上網，然後讓工程師上門「維修」，謊稱光貓損壞，需要花 299 元換新</strong>。<strong>更換完後，聯通再在後台恢復用戶的網絡</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6bca55961849d5db6bafd2b8cf31a04abc6.png" referrerpolicy="no-referrer"></p><p>聯通公司不僅對老用戶進行這種強制更換光貓的行為，還會在給新用戶裝機的時候，故意使用破舊光貓，也就是之前強迫用戶換新留下的，而再過一段時間之後，又會告訴用戶使用的是舊光貓無法匹配，必須換新。聯通公司還會故意關掉用戶的短信服務，在後台增加增值業務，之後再把短信功能打開，以此牟利。</p><p><img height="826" src="https://static.oschina.net/uploads/space/2023/1120/163843_Utox_2720166.png" width="1518" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1120/164043_bGMp_2720166.png" referrerpolicy="no-referrer"></p><p>周口聯通迴應稱，全力配合省公司調查組進行調查覈實。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5af067ca7f5336640898e328da5adc6109b.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.sina.com.cn%2Fs%2F2023-11-20%2Fdoc-imzvfrzw9582625.shtml" target="_blank">https://news.sina.com.cn/s/2023-11-20/doc-imzvfrzw9582625.shtml</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267276</guid>
            <link>https://www.oschina.net/news/267276</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里雲開源大數據產品年度發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文根據 2023 雲棲大會演講實錄整理而成，演講信息如下：</p><p><strong>演講人</strong>：陳守元 | 阿里雲計算平台事業部開源大數據產品總監</p><p><strong>演講主題</strong>：阿里雲開源大數據產品年度發佈</p><p>隨着雲計算的不斷髮展，未來數據處理和應用的趨勢將圍繞 Cloud Native、Severless 和 Data+AI 展開。其中，雲原生架構已成為主流趨勢，因為它可以提高數據處理和應用程序的可伸縮性和靈活性，支持大規模部署和更快的響應時間。同時，Serverless 作為一種新型計算模式，可以提高處理效率、降低運營成本並減少資源浪費，其獨特的特點使得其成為處理大規模數據的理想選擇。此外，Data 與 AI 融合正在快速發展，不斷提高智能化和自動化程度，同時需要高質量的數據來支撐算法的準確性和有效性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a48d65a7b7035e480f3276674b7f31f68a3.png" alt="" referrerpolicy="no-referrer"></p><h2>EMR：面向下一代湖倉和全面 Serverless 化</h2><p>下面進入產品發佈環節，我們將圍繞上面三個點&nbsp;做哪些事情、有哪些發佈更好地服務用戶上雲&nbsp;來講述我們產品的重點發布。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4026c36c77d94f189e70fb9fe1cb0464515.png" alt="" referrerpolicy="no-referrer"></p><p>首先，我們來看 EMR。EMR 是一個雲原生開源大數據平台系統。對於 EMR 而言，線下 IDC 大量基於開源 Hadoop 生態構建的線下用戶搬站上雲第一站就會選擇 EMR，因為改造代價特別地小，幾乎可以無縫平遷上雲。這對用戶來説是具有巨大的人力資本和機器資本的節省。&nbsp;我們將阿里雲 EMR 定位為&nbsp;用戶搬站上雲的第一站。</p><p>今年我們的產品矩陣做了升級，我們希望在雲上基於更多樣化的 IaaS 提供多樣化的 EMR 產品形態。EMR 通用版，核心解決的用戶問題就是幫助用戶的大數據系統平遷上雲，這也是和用戶線下部署兼容度最高的方案。第二個是 EMR 容器版，即 EMR ACK 版。現在 IT 基礎設施的雲原生容器化基本上都深入人心，我們大量客戶在雲上基於 IT 系統的構建都會選擇容器化的平台，例如阿里雲的 ACK。用戶自然而然會聯想到如何把 Data 和 AI 的 workload 遷移到 IT 基礎設施的同一個集羣裏，完成 Data&amp;AI 的負載&nbsp;與 IT 設施負載混用，EMR 容器版，或者説 EMR onACK 就是幫用戶解決這類問題的產品。</p><p>最後也是我們今天想強調的重點就是 EMR Serverless 版。對於 EMR Serverless 子產品線而言，內部有些 feature 或者功能&nbsp;在之前雲棲中已做了發佈。今天對於 EMR Serverless 產品線是一個更加完整的矩陣呈現，今天會重點講一下 Serverless Spark、Serverless StrarRocks 兩大主流 EMR 計算引擎的 Serverless 化，今天也是我們正式對外提出一個完整的 EMR Serverless 化的產品線矩陣。</p><p>EMR Serverless 版是 EMR 產品線形態中誕生最晚、發佈最新的一代產品和技術，其實 EMR 圍繞 Serverless 的佈局在一年前、兩年前都在緊鑼密鼓地進行。前面 OSS-HDFS、Serverless HDFS 這一塊其實在去年、前年已有發佈，但是今年我們做了更多的嘗試努力，我們希望把 EMR 上面主流的大數據計算引擎、存儲引擎、開發平台、元數據管理全都 Serverless 化，只有這樣方才能夠更好地滿足雲原生用戶更好地利用大數據。Serverless Spark，更好地解決了湖倉場景下 Data ETL 的處理能力，Serverless StrarRocks 更好地解決了湖倉場景下 Data analytic 能力，Serverless HDFS 更好解決了湖倉場景下數據存儲能力，最後 EMR Stutio 幫助用戶線下可以平遷體驗上雲，讓用戶能夠更好使用雲上大數據基礎設施，同時還能免運維。所以 EMR 今年從計算，到存儲，到開發環境&nbsp;幾乎全部實現了 EMR 主力引擎和平台都能夠做到 Serverless 化，我們希望能夠把整個大數據開發運維閉環，從而進一步幫助雲原生上的開發者更好地把大數據用起來。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e0e494088f0e316e87a203fb7a7b147a1c7.png" alt="" referrerpolicy="no-referrer"></p><p>下面仍然回到 EMR 主力場景， EMR 通用版，圍繞湖倉場景做了大量更新。EMR 主力場景仍然圍繞着湖倉處理，圍繞在湖倉計算、存儲、運維、開發做了大量的更新。在計算層面，我們核心還是降本提效，IaaS 層適配了新的倚天 CPU，PaaS 層做了 Native Spark RunTime，這些都是從 IaaS 層和 PaaS 層更好地幫助用戶降本提效。存儲部分，Serverless HDFS (同時也稱之為 OSS-HDFS)&nbsp;很早已有發佈，但是在這一年希望讓 Serverless HDFS 和&nbsp;本地 HDFS 在使用層面給用戶體驗完全一致，包括&nbsp;在&nbsp;文件性能、數據訪問、源數據獲取等方案&nbsp;做到幾乎完全一致。為上述目標，我們因此做了大量有關係統性能優化&nbsp;以及&nbsp;系統安全性優化。我們的 Open 文件性能的提升、DU 訪問源數據的提升，這些都是今年的成果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-00bfea3732092d7e26b3743ad341b1f080a.png" alt="" referrerpolicy="no-referrer"></p><p>EMR 運維，這主要體現在兩個方面。在雲上來説 EMR 能結合到雲原生上面給用戶創造比較大的平台價值就在於彈性，今年我們做到大量的彈性優化。我們大量客戶給我們反饋説 EMR 的平台彈性越來越穩定；另外一個運維重點，即 EMR Doctor，我們希望通過 AI 的方式、自動化、智能化的運維平台方式幫助用戶去解決開源大數據運維的問題。從社區開源大數據用戶反饋來看，開源大數據使用最大的、最痛的點就是系統運維。如何長期有效地保證我們的業務在雲上健康地運行，這是很多用戶上雲和雲下使用開源大數據非常大的痛點，EMR Doctor 就是解決這個問題。EMR 開發，即 EMR Studio，我們希望雲原生 Serverless 化託管了我們的開發平台、調度平台，幫助用戶從線下的體驗完全平遷到雲上的一套體驗。以上均是 EMR 圍繞湖倉場景的重大更新。</p><p>最後仍然回到 EMR For AI，我們每個產品都在擁抱積極的變化，這裏分為三部分：EMR DataScience、EMR Doctor、EMR+DataWorks 的 Code Pilot。EMR DataScience 是在 EMR 的容器版裏面，我們提供了一個新的集羣叫 EMR DataScience，裏面內置了不少 AI 最流行的組件，包括 Pytorch、TF。我們希望用戶在一個平台上既能夠處理大數據，同時還能夠雲原生地處理 AI 的工具，這是 EMR DataScience 幫助用戶做的相關工作。EMR Doctor，這個工作前面提到希望用 AI 化、智能化的方式幫助用戶實現 AIOps，能夠用自動化的手段定位問題、診斷問題、及早發現問題。EMR+Dataworks，今年 DataWorks 重磅的發佈就是 code pilot 的發佈，但是那上面作為一個平台實際上底下也對接了 EMR 等等，正好實際上 code pilot 也是平台引擎無關的 Feature，可以生成 EMR 裏面的 HIVE 代碼，用戶就可以用 DataWorks 上面開發平台能夠通過自然語言生成 MaxCompute 的 SQL，能夠操作業務，這樣能夠極大地減少用戶開發代碼的成本，這在 DataWorks 對外提供公測的時候歡迎去試用一下。</p><h2>Flink Streaming Lakehouse：新一代的流式湖倉新方案</h2><p>下面我們看一下 Flink Streaming Lakehouse。Lakehouse 這個概念其實在前幾年很火，原因就是對於一個 Lakehouse 的系統來説，既兼具了 Data Warehouse 的嚴謹，包括 ACID、版本的管理、數據格式的校驗等等；同時它還有 Data Lake 的靈活性，能夠放很多大量非結構化的文本，包括圖片、視頻、音頻、圖像等等。而 Lakehouse 同時能夠承載結構化的數據和非結構化的數據，這對用戶來説是非常好的 AI 和大數據融合的底層存儲方案。但是我們看 Lakehouse 的過程中發現 Lakehouse 在時效性方面有非常大的問題，Flink 核心使命和價值就在幫助我們的客戶解決大數據實時化轉型和升級。所以 Flink 社區&nbsp;和&nbsp;我們&nbsp;一起發佈了 Streaming Lakehouse 方案。</p><p><img src="https://oscimg.oschina.net/oscnet/up-37eae0cedf4dbaf6356c5188b319f6e8a02.png" alt="" referrerpolicy="no-referrer"></p><p>回到 Streaming Lakehouse 我主要從產品方向&nbsp;講三個場景要點。前面已經提到 Lakehouse 在 AI 時代下 Lakehouse 的方案會越來越重要，因為它既能存儲結構化的數據又能存儲非階段的數據，這個是大數據和 AI 一體化存儲的重要承載點。但是 Lakehouse 在實踐的過程中仍然遇到時效性的問題，整個 Lakehouse 的 Data Pipeline 串聯起來可能達到小時級別的延遲，從最開始的數據進入到數據價值的發揮，比如 BI、AI，能夠看到整個數據鏈路到小時級別，這其實對於用戶來説要構建一個實時湖倉面臨很大的延遲。所以 Flink 希望一起幫助用戶做到 Lakehouse 的實時化，通過流式、實時幫助用戶做很大的提升。</p><p>最後是 Unified，其實 Flink 社區在前幾年一直主打 Unified Batch &amp; Streaming。我們希望在計算層面做到融合，就是流批一體。我們在開源社區推廣流批一體的方案時，發現如果用戶只是計算層面的融合對於用戶只能解決一半的問題。還有一半問題在於存儲，存儲仍然是兩套的存儲方案，兩套存儲和兩套數據因此會導致的離線和實時的數據不一致性對於用戶來説是非常大的問題，所以 Flink 團隊和社區一起構建了 Paimon。Paimon 基於底層的分佈式文件系統，比如説 OSS 會構建一個 Unified 的 storage，既可以做流，也可以做批，我們稱之為批流一體的存儲。所以 Flink+Paimon 構成 Lakehouse 的方案，既具備 Unified 的 process，也可以具備 Unified 的 Storage，這一層合併在一起能夠真正完整地幫助用戶實現流批一體的解決方案。這是我們 Streaming Lakehouse 的價值點，最終我們希望幫助用戶在 Data+AI 時代下提供實時化、流式化和 Serverless 化的湖倉方案。</p><p>回到 Flink 主線，我們一直以來的使命就是希望幫助用戶做到大數據的升級和轉型，所以追求實時場景下的性價比一直是 Flink 團隊一直以來努力的方向。追求實時化的性價比今年有兩個重要的點，一個是 Flink 全面擁抱了倚天，結合到倚天&nbsp;整個實時計算 Flink 綜合的性價比有 50% 的提升，這是 Flink 團隊結合 IaaS 層面做了大量優化。同時在 PaaS 層 Flink 企業級內核&nbsp;我們仍然在做大量優化，這其中包括算子的優化，以及未來我們會公佈 native runtime 的優化。這部分優化相比於開源 Flink 引擎，我們實時計算 Flink 版&nbsp;會有兩倍的提升，特別是在吞吐部分可以解決很多用戶高吞吐量或者大流量的實時計算場景。</p><p><img src="https://oscimg.oschina.net/oscnet/up-93711ed92a4488a619f2f0cfa9e51e70d03.png" alt="" referrerpolicy="no-referrer"></p><h2>Elasticsearch:Serverless 和 Search for Data &amp; AI</h2><p>接下來講一下 Elasticsearch，這也是開源大數據很重要的組成部分。説到 Elasticsearch 可能大家更多仍然停留在比較早期 for data 的 search，就是全文的檢索，類似於搜索引擎要做全文的檢索。但今天我想告訴大家這個思想需要刷新一下，Elasticsearch 不僅是 for data 的 search，也是 for AI 的 search。我今天給大家重點會講一下 ES 如何從 Data 轉變成 Data+AI 的 search 系統。</p><p>第一個是我們的 Elasticsearch 的版本發佈。坦白地説，當前產品形態，即 ES on PaaS 的獨立集羣版本已經非常好地滿足我們中國公有云和專有云客戶很多的市場需求，不少中大型公司都非常認可阿里雲的 ES 產品形態，產品客戶受眾無論在基數以及未來增長都很不錯。但實際上隨着最近這一兩年客戶在降本提效上提上了日程之後，發現有一批非常大的潛在客戶以及中長尾的客戶其實仍然對雲上的獨立集羣版本所帶來的成本仍然認為是比較大的上雲入門門檻。他們非常希望以低門檻甚至零門檻的方式開啓雲上的 ES，這就是我們 ES Serverless 要做的初衷，我們希望以一個零門檻的方式能夠幫助用戶開啓雲上 Elasticsearch 的使用。</p><p><img src="https://oscimg.oschina.net/oscnet/up-dda1df3c99a6593d14261aabceb742084c0.png" alt="" referrerpolicy="no-referrer"></p><p>同時 Elasticsearch Serverless 也是我們國內首家支持通用場景的 ES 版本。去年我們也發佈了一個 Elasticsearch Serverless 版本，但更多解決日誌 ELK 場景的需求。但是該版本在數據一致性上會存在問題，所以今年我們進行大量的產品技術架構重構。本次 ES Serverless 的發佈是一個面向通用場景的升級發佈，這裏面不僅支持包括日誌場景，還支持訂單、金融等等場景，這裏面的數據一致性都可以得到很好的保障。這是我們今年發佈相比於去年發佈升級很不一樣的點。針對 ES Serverless 可以真正按量付費、秒級彈性、簡單運維，同時可以完全兼容開源的 ES，這是很多其他的廠商不一定能做到的。</p><p>下面重點強調 ES for AI 和 Data 的部分，標誌着 ES 真正從 Data 面向 Data&amp;AI 的搜索引擎。雲棲會場外面有很大的廣告欄，主打的是 ESRE 的發佈，這是 ES 公司重大的發佈。發佈的核心簡單跟大家説一下，就是支持 AI 相關檢索，包括向量檢索，包括多路並規的查詢優化，這些東西都是在 ES 內核重點打的點，幫助用戶做 AI 檢索。阿里雲 ES 圍繞着 ES 最新的 AI 能力進行了大量方案集成，就是右邊的增強方案。我們跟達摩院 AI 方案做聯合，和 PAI—EAS 方案聯合，甚至會和社區一起做更多的聯合方案，這些方案能夠幫助我們的用戶更好地在雲上用上阿里雲、達摩院 AI 的技術，和社區的 ES 更好地結合起來。所以我們希望通過 ES8.9 這個版本能夠幫助用戶構建下一代面向 Data+AI 的檢索系統。</p><p><img src="https://oscimg.oschina.net/oscnet/up-47305474e3702aae7f01185fc4b3c7a7d65.png" alt="" referrerpolicy="no-referrer"></p><p>圍繞 ES 自研能力的升級，阿里雲 ES 是和 ES 公司一起合作，也是基於開源的 ES 做更多的優化孵化，其實是完全基於開源，也是完全兼容開源的，我們做了大量的增強。而這裏面做了三個升級，包括場景的升級，也就是日誌場景向通用場景的升級和改造。去年 ES 更多是做日誌場景、ELK 場景，今年的 ES Serverless 面向通用場景進行完全開放。另外就是有關搜索內核引擎的優化，包括讀寫分離、存算分離，這些更好地解決集羣穩定性問題、成本流控問題、資源彈性的問題。最後我們在購買鏈路和相關控制枱上做了比較大的體驗升級，我們非常推薦大家去用一用阿里雲 ES Serverless 版本，感受一下完全 Serverless 化的 ES。</p><h2>Milvus：AI 時代的搜索引擎</h2><p>今天最後一個，也是今年完全新的產品。前面全部是我們現有的功能、現有產品線的疊加，Milvus 這部分是我們今年要發佈的 AI 時代新的搜索引擎。目前，在向量檢索部分 Milvus 幾乎是全球最火、最亮眼的技術。我們會在 12 月份開啓向量檢索 Milvus 版本對外測試，相比於開源的 Milvus 來説會做相應產品企業級的增強。同時在兼容開源的 Milvus 之上，我們還會去結合達摩院的技術能夠提供更好的企業級向量檢索能力。同時在雲上肯定會做大量的產品聯合工作，包括和我們的存儲上有大量非結構化的數據可供用戶檢索查詢。同時我們會跟 PAI 平台、達摩院 AI 模型做更多的深度集成，做 AI 向量檢索能力、做大模型向量支撐，這些方案未來都會在我們的產品之上構建。所以我們最終是希望能夠幫助雲上使用 Milvus 的用戶更快、更方便、更低門檻構建 AI 時代下的搜索系統。</p><p><img src="https://oscimg.oschina.net/oscnet/up-684d85b432854ecd04eafd9cad2a5a50df8.png" alt="" referrerpolicy="no-referrer"></p><p>回顧一下我們講了大數據的三個趨勢。Cloud Native，整個 IT 投資都在往雲上加速轉型。Serverless 化，我們認為未來的 PaaS 平台最終全部都會歸到 Serverless 化，所有 AI 產品、大數據產品和其他 PaaS 產品都會歸到 Serverless 化。最後是 Data+AI，未來 AI 和大數據會做徹底的融合打通，這也是我們整個開源大數據一直以來在積極圍繞這三個點做佈局。</p><p>最後希望大家多多關注阿里雲，關注阿里雲的開源大數據，謝謝大家！</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5583868/blog/10149103</guid>
            <link>https://my.oschina.net/u/5583868/blog/10149103</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 前 CEO 和總裁 Sam Altman & Greg Brockman 加入微軟]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微軟 CEO Satya Nadella 剛剛<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsatyanadella%2Fstatus%2F1726509045803336122" target="_blank">發佈推特稱</a></u>，OpenAI 前 CEO 和總裁 Sam Altman &amp; Greg Brockman 將加入微軟，他們負責領導新的 AI 研究團隊。</p><p><img height="1176" src="https://static.oschina.net/uploads/space/2023/1120/155839_imd2_2720166.png" width="1264" referrerpolicy="no-referrer"></p><p>Sam Altman 轉發了這條推文，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1726510261509779876" target="_blank">並説道</a></u>：不忘使命，砥礪前行。</p><p><img height="678" src="https://static.oschina.net/uploads/space/2023/1120/161424_UZuO_2720166.png" width="1272" referrerpolicy="no-referrer"></p><p>Satya Nadella <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsatyanadella%2Fstatus%2F1726516824597258569" target="_blank">評論了 Sam 的推文</a>：</p><blockquote><p>Sam，我對你以首席執行官身份加入新團隊感到無比激動，你將為我們的創新工作開闢新的道路。</p><p>多年來，我們學會瞭如何為創始人和創新者提供空間，讓他們在微軟內部發展獨立的身份和文化，這一點從 GitHub、Mojang Studios 到 LinkedIn 的發展中可見一斑。我迫不及待想看到你也能做到。</p></blockquote><p><img height="1372" src="https://static.oschina.net/uploads/space/2023/1120/164746_aILD_2720166.png" width="1286" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 08:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267272</guid>
            <link>https://www.oschina.net/news/267272</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Altman 迴歸失敗，OpenAI 董事會聘請 Twitch 前高管擔任 CEO]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">據</span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theinformation.com%2Farticles%2Fbreaking-sam-altman-will-not-return-as-ceo-of-openai" target="_blank">The Information</a>&nbsp;<span style="color:#000000">和</span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-20%2Fopenai-s-board-hires-former-twitch-executive-shear-as-ceo" target="_blank">Bloomberg</a>&nbsp;<span style="color:#000000">消息稱，經過一個週末的談判，OpenAI 董事會決定不顧投資者要求 Sam Altman 復職的呼聲，聘請前 Twitch 首席執行官 Emmett Shear 來擔任該公司的臨時首席執行官。</span></p><p><span style="color:#000000">OpenAI 聯合創始人兼董事會董事 Ilya Sutskever 向員工表示，公司高管有嘗試努力挽回 Sam Altman，但沒有成功，Altman</span>&nbsp;<span style="color:#000000">將不會回到 OpenAI。</span></p><p><img alt="" height="300" src="https://static.oschina.net/uploads/space/2023/1120/153143_G4mc_4252687.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Emmett Shear 將從 Mira Murati 手中接過這一職位，這也意味着 OpenAI 在三天內迎來了第三任首席執行官。此前，在 Sam Altman 被突然解僱後，曾有大批 OpenAI 員工開始在社交媒體上表達了對 Altman 的支持，Mira Murati 也在此列。</span></p><p><span style="color:#000000">Shear 在 2006 年幫助推出了遊戲流媒體網站 Twitch，並於 2014 年以近 10 億美元的價格將其出售給亞馬遜。今年早些時候，Shear 辭去了 Twitch 的首席執行官一職。</span></p><p><span style="color:#000000">有知情人士表示，Shear 之所以能贏得 OpenAI 董事會的青睞，是因為他能意識到人工智能所帶來的生存威脅。此外，<span style="background-color:#ffffff">Open AI 的董事會已經至少聯繫了兩名科技行業的知名高管，希望其中一位可以擔任公司董事長的職位。</span></span></p><p><span style="color:#000000">OpenAI 及其最大投資者微軟的發言人目前暫未迴應相關置評請求。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 07:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267256/openai-twitch-ceo-shear</guid>
            <link>https://www.oschina.net/news/267256/openai-twitch-ceo-shear</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Red Hat Enterprise Linux 9.3]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Red Hat Enterprise Linux 9.3 上週正式發佈。</p><p>公告寫道，RHEL 9.3 引入了部分變化，包括<strong>支持雲實例中的 UEFI 環境</strong>。此外通過 Red Hat Insights 增加了新的管理服務，並全面支持 Stratis 作為系統存儲選項。</p><p>此前 RHEL 鏡像生成器創建的 EC2 AMD 或 Intel 64 位架構 AMIs 鏡像只支持 Legacy Boot 引導。因此無法利用某些需要 UEFI 啓動的 AWS 功能，如安全啓動。現在，該增強功能擴展了 AWS EC2 AMD 或英特爾 64 位架構 AMI 鏡像，除支持 Legacy BIOS 啓動外，還支持 UEFI 啓動。因此，現在可以利用需要使用 UEFI 引導鏡像的 AWS 功能。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redhat.com%2Fen%2Fabout%2Fpress-releases%2Fred-hat-launches-next-versions-worlds-leading-enterprise-linux-platform" target="_blank">詳情查看發佈公告</a></u>。</p><p>延伸閲讀：<em><u><a href="https://www.oschina.net/news/266400/almalinux-9-3-stable" target="_blank">AlmaLinux 9.3 正式發佈，CentOS 最佳替代方案之一</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 04:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267226/rhel-9-3</guid>
            <link>https://www.oschina.net/news/267226/rhel-9-3</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🔥 周熱點 | OpenAI 內訌，奧特曼被驅逐；俄羅斯操作系統 Aurora OS 5.0 全新 UI 亮相；.NET 8 正式 GA.....]]>
            </title>
            <description>
                <![CDATA[回顧一週熱門資訊。2023.11.13-2023.11.19]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649093971&#38;idx=1&#38;sn=3f2a763dda28e1c46c3aeca3f287766e&#38;chksm=880c4c40bf7bc556325bae39dd086d3b0d3cea17b35ad8c141b34669fc8c632bc161023a587a&#38;token=584579097&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649093971&#38;idx=1&#38;sn=3f2a763dda28e1c46c3aeca3f287766e&#38;chksm=880c4c40bf7bc556325bae39dd086d3b0d3cea17b35ad8c141b34669fc8c632bc161023a587a&#38;token=584579097&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[Linux Kernel 6.6 確認成為 LTS 版本]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Greg Kroah-Hartman 已經宣佈 Linux Kernel 6.6 版本為長期支持 (LTS) 版本；支持期限到 2026 年 12 月。</span></p><p><span style="color:#000000">Linux Kernel 6.6 於 10 月 29 日正式發佈，是一次包含了新功能、硬件支持、安全增強和性能改進的重大更新。具體包括有：引入了 EEVDF scheduler，最終實現了對 Intel Shadow Stack 的支持，為 Nouveau DRM 驅動程序添加了 Mesa NVK Vulkan 驅動程序所需的&nbsp;user-space API，繼續支持即將到來的 Intel 和 AMD 平台，以及大量的其他驅動程序改進和一些不錯的性能優化等。</span></p><p><img height="254" src="https://oscimg.oschina.net/oscnet/up-40bae094eb2126579af39e14031fa92878c.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">一般來説，年度 LTS 內核往往是該日曆年的最後一個穩定內核版本。Linux 6.6 於十月底發佈，Linux 6.7 預計可能會在 2023 年的最後幾天或者 2024 年年初達到穩定。但考慮到 6.7 版本規模較大，且年末的假期往往會放慢測試和 bug 修復的速度，導致相關週期拖長，因此 6.7 版本大概率還是可能在 2024 年初登陸。</span></p><p><span style="color:#000000">目前，Kernel.org 已更新相關版本信息。Linux 6.6 生命週期將將截止 2026 年 12 月；與此同時，Linux 6.1、5.15 和 5.10 也將於 2026 年 12 月結束生命週期。因此根據當下的政策，Linux 6.6 LTS 將在未來三年內得到維護，不過也有消息稱內核開發人員一直在討論將 LTS 支持期縮短為 2 年。</span></p><p><span style="color:#000000">更多詳情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kernel.org%2Fcategory%2Freleases.html" target="_blank">此處</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 03:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267220/linux-6-6-lts</guid>
            <link>https://www.oschina.net/news/267220/linux-6-6-lts</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Altman 以訪客身份回到 OpenAI，和公司高管會面談判]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>據 The Information 報道，OpenAI 首席戰略官 Jason Kwon 在員工備忘錄中表示，<strong>上週五離職的 Sam Altman 等高管或將會回到公司</strong>。</p><p>而 Altman 本人也在週一<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1726345564059832609" target="_blank">推文</a></u>寫道「這是我第一次也是最後一次帶這玩意」，配圖是他手持 OpenAI 訪客工牌的自拍，表示他持訪客證明造訪了 OpenAI 總部，與公司董事會討論某事。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-01348c9bedfa830267784f185d7e8e2dbeb.png" referrerpolicy="no-referrer"></p><p>有消息稱，包括微軟在內的投資者正在向 OpenAI 董事會施壓，要求他們同意 Sam Altman 等離職高管迴歸 OpenAI 工作。</p><p>目前尚不能確定 Altman 等人是否會回到 OpenAI 繼續工作。有消息稱，Altman 正計劃同前 OpenAI 總裁 Greg Brockman 一起成立一間新的 AI 公司。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 20 Nov 2023 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267200</guid>
            <link>https://www.oschina.net/news/267200</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kotlin Multiplatform 公佈 2024 年開發路線圖]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">繼幾周前宣佈推出</span><a href="https://www.oschina.net/news/265360/kotlin-multiplatform-stable">第一個穩定版本</a><span style="color:#000000">後，JetBrains <span style="background-color:#ffffff">發佈了 2024 年 </span>Kotlin Multiplatform&nbsp;<span style="background-color:#ffffff">的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-multiplatform-development-roadmap-for-2024%2F" target="_blank">開發路線圖</a>。 其</span></span><span style="background-color:#ffffff; color:#19191c">目標是在 2024 年對 Kotlin Multiplatform 核心技術、Compose Multiplatform、KMP 工具和 KMP 庫進行一系列改進。</span></p><p><span style="color:#000000">「我們致力於使 Compose Multiplatform 成為一個框架，允許創建在所有受支持的平台上看起來都同樣美觀且高性能的應用程序。」</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-8af6c9da66280ab985d71d05df036c402a9.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，該公司對&nbsp;<span style="background-color:#ffffff">Compose Multiplatform 的主要關注點是將 iOS 版 Compose 升級到 Beta 版。同時還計劃：</span></span></p><ul style="margin-left:0; margin-right:0"><li>使所有 Jetpack Compose core API 和組件實現多平台。</li><li>提高 iOS 上的渲染性能。</li><li>使 Compose for iOS 應用程序中的滾動和文本編輯行為與 iOS 原生應用程序中的行為相同。</li><li>實現通用 API 以共享所有類型的資源。</li><li>與 iOS 和&nbsp;Desktop accessibility API 集成。</li><li>提供多平台導航解決方案。</li></ul><p><span style="color:#000000">以及致力於改進 Compose for Web，尤其<span style="background-color:#ffffff">是 Wasm</span>。例如：</span></p><ul><li><span style="color:#000000">允許你移植現有代碼；</span></li><li><span style="color:#000000">支持不同的屏幕尺寸、方向和密度；</span></li><li><span style="color:#000000">支持通過鼠標、觸摸屏、物理鍵盤或屏幕鍵盤進行輸入；</span></li><li><span style="color:#000000">改善性能和 binary size。</span></li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">JetBrains 還將對 IDE 進行多項改進，</span>包括：增強對 Compose Multiplatform 的支持，包括常見代碼的實時預覽和可視化調試工具；<span style="background-color:#ffffff">項目配置幫助；</span>多平台項目所有部分的統一和增強的調試體驗。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="display:none">&nbsp;</span><span style="color:#000000"><span style="background-color:#ffffff">為了支持想要與 iOS target&nbsp;共享代碼的開發人員，項目團隊將致力於直接從 Kotlin 導出到 Swift。「流行的 Kotlin Multiplatform 應用場景之一是與 iOS target&nbsp;共享代碼。我們希望關注在代碼庫中使用 Kotlin Multiplatform 框架的 iOS 開發人員的開發體驗......它將消除 Objective-C 瓶頸，從而提供更廣泛的 Swift 語言支持和更自然的 API 導出。」</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">還在專門為 Kotlin 庫作者創建工具，旨在提高 Kotlin API 導出到 Swift 時的兼容性和用戶友好性。一些其他舉措包括，<span style="background-color:#ffffff">提高 Kotlin/Native 編譯的性能、改進 CocoaPods 集成以及添加對使用 SwiftPM 導出框架的支持。&nbsp;</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">此外，隨着 Kotlin <span style="background-color:#ffffff">Multiplatform&nbsp;</span>生態系統的快速發展，庫的向後兼容性變得至關重要。<span style="background-color:#ffffff">JetBrains 將重點關注改進 klib 格式，以允許庫創建者利用他們的 JVM 庫構建技能；</span><span style="background-color:#ffffff">在 Kotlin Multiplatform&nbsp;</span><span style="background-color:#ffffff">庫中實現與 JVM 相同的代碼內聯行為；以及提供一個工具來確認庫的公共 API 沒有以不兼容的方式進行了更改。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fkotlin%2F2023%2F11%2Fkotlin-multiplatform-development-roadmap-for-2024%2F" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 04:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267112/kotlin-multiplatform-development-roadmap-2024</guid>
            <link>https://www.oschina.net/news/267112/kotlin-multiplatform-development-roadmap-2024</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GROMACS —— 分子動力學模擬工具包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GROMACS（全稱：GROningen MAchine for Chemical Simulations，格羅寧根化學模擬體系），是用於研究生物分子體系的分子動力學模擬工具包，主要用來模擬研究蛋白質、脂質、核酸等生物分子的性質。</p><p>它可以用分子動力學、隨機動力學或者路徑積分方法模擬溶液或晶體中的任意分子，進行分子能量的最小化，分析構象等。</p><p>它的模擬程序包包含 GROMACS 力場 (蛋白質、核苷酸、糖等)，研究的範圍可以包括玻璃和液晶、到聚合物、晶體和生物分子溶液。</p><p>GROMACS 是一個功能強大的分子動力學的模擬軟件，其在模擬大量分子系統的牛頓運動方面具有極大的優勢。</p><blockquote><p>分子動力學模擬是分子模擬中最接近實驗條件的模擬方法。它能夠從原子層面給出體系的微觀演變過程，直觀的展示實驗現象發生的機理與規律。</p><p>因此，分子動力學模擬在生物，藥學，化學以及材料科學的研究中發揮着越來越重要的作用。</p></blockquote><p>GROMACS 起初由荷蘭格羅寧根大學生物化學系開發，目前由來自世界各地的大學和研究機構維護。</p><p><strong>主要功能</strong></p><ul><li><p>支持基本動力學相關算法，包括牛頓力學及隨機動力學積分器、能量最小化、正則模式分析等。</p></li><li><p>支持溫度及壓強控制，支持基於 SHAKE 和 P-LINCS 的完全約束算法，支持多種幾何約束。</p></li><li><p>支持 AMBER、CHARMM 及 OPLS 等常見經典力場。</p></li><li><p>支持 QM/MM 混合動力學，可對接 GAMESS、Orca 等量化軟件。</p></li></ul><p>它可以用於上百萬個粒子體系的分子動力學模擬研究，尤其是生物體系，如磷脂雙分子層生物膜、蛋白質、藥物分子等。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/194131_DK4t_2720166.png" referrerpolicy="no-referrer"></p><p>此外，GROMACS 能夠非常快速地計算非鍵作用，因此也可用於非生物體系，如聚合物、一些有機物、無機物等。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/194200_MtCm_2720166.png" referrerpolicy="no-referrer"></p><p><strong>核心優勢</strong></p><ul><li><p>開源軟件、可免費使用</p></li><li><p>力場較全面且容易擴充</p></li><li><p>操作方便，相關教程也多</p></li><li><p>算法性能好，計算效率高</p></li></ul><p>GROMACS 最突出的特色和優勢是高效，無論串行還是並行版本。</p><p><img src="https://static.oschina.net/uploads/space/2023/1102/194219_S3QX_2720166.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 03:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/gromacs</guid>
            <link>https://www.oschina.net/p/gromacs</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 網絡自動化領域解決方案框架 NetAxe]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img src="https://gitee.com/iflytek/NetAxe/raw/master/readme/logo.png" alt="netaxe" referrerpolicy="no-referrer"></p><p align="center"><img src="https://img.shields.io/badge/Python-brightgreen.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Django-orange.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/FastAPI-brightgreen.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Vue3-blue.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Vite-orange.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/NaiveUI-blue.svg" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-Apache-green.svg" referrerpolicy="no-referrer"><a href="https://gitee.com/NetAxeClub" target="_blank"><img src="https://img.shields.io/badge/Author-NetAxeClub-orange.svg" referrerpolicy="no-referrer"></a></p><p align="center"><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io">Netaxe 官方文檔</a> |  <a target="_blank" href="https://gitee.com/link?target=http%3A%2F%2F47.99.86.164%3A9980">在線預覽</a></p><h2><a id="user-content-項目介紹" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>項目介紹</h2><p><strong>專注網絡自動化領域的整體架構解決方案</strong></p><p>[ NetAxe ]是一個網絡自動化領域解決方案框架，通過微服務和微前端的方式構建的應用集合，主要有資源管理、配置管理、自動化、網絡拓撲、地址定位、地址管理等等功能集合，同時各個微應用支持插件形式的能力集成，方便用戶自行擴展。</p><h2><a id="user-content-組織地址" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E7%BB%84%E7%BB%87%E5%9C%B0%E5%9D%80"></a>組織地址</h2><p><a href="https://gitee.com/NetAxeClub">NetAxeClub</a></p><p>致力於網絡自動化工具和平台開發</p><p>聯繫郵箱:<a href="mailto:netaxe@qun.mail.163.com">netaxe@qun.mail.163.com</a></p><h2><a id="user-content-文檔説明" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E6%96%87%E6%A1%A3%E8%AF%B4%E6%98%8E"></a>文檔説明</h2><p>👇👇👇👇👇👇👇👇👇👇👇</p><p>📚 <a href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io%2F">NetAxe 文檔教程使用説明</a> : <a href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io%2F">https://netaxe.github.io/</a></p><p>👆👆👆👆👆👆👆👆👆👆👆</p><h2><a id="user-content-項目預覽" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E9%A1%B9%E7%9B%AE%E9%A2%84%E8%A7%88"></a>項目預覽</h2><p>👇👇👇👇👇👇👇👇👇👇👇</p><p><a href="https://gitee.com/link?target=http%3A%2F%2F47.99.86.164%3A9980">體驗環境</a> 賬號密碼：admin/123456</p><p>僅在工作時間開啓 (9:30-18:00)</p><p>👆👆👆👆👆👆👆👆👆👆👆</p><h2><a id="user-content-平台架構圖" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E5%B9%B3%E5%8F%B0%E6%9E%B6%E6%9E%84%E5%9B%BE"></a>平台架構圖</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/%E6%9E%B6%E6%9E%84%E5%9B%BE.3vrmin46me00.webp" alt="平台架構圖" referrerpolicy="no-referrer"></p><h2><a id="user-content-1 平台登錄頁" class="anchor" href="https://gitee.com/iflytek/NetAxe#1%E5%B9%B3%E5%8F%B0%E7%99%BB%E5%BD%95%E9%A1%B5"></a>1.平台登錄頁</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-login.78afwmigsc00.webp" alt="登錄頁面" referrerpolicy="no-referrer"></p><h2><a id="user-content-2 資產管理" class="anchor" href="https://gitee.com/iflytek/NetAxe#2%E8%B5%84%E4%BA%A7%E7%AE%A1%E7%90%86"></a>2.資產管理</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/golang.63zo8r1zsjs0.webp" alt="資產管理" referrerpolicy="no-referrer"></p><h2><a id="user-content-3 配置差異比較" class="anchor" href="https://gitee.com/iflytek/NetAxe#3%E9%85%8D%E7%BD%AE%E5%B7%AE%E5%BC%82%E6%AF%94%E8%BE%83"></a>3.配置差異比較</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-git-diff.60gnker70dk0.webp" alt="配置差異比較" referrerpolicy="no-referrer"></p><h2><a id="user-content-4webssh" class="anchor" href="https://gitee.com/iflytek/NetAxe#4webssh"></a>4.Webssh</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-webssh.3rs5vtioxe80.webp" alt="Webssh" referrerpolicy="no-referrer"></p><h2><a id="user-content-5 接口清單" class="anchor" href="https://gitee.com/iflytek/NetAxe#5%E6%8E%A5%E5%8F%A3%E6%B8%85%E5%8D%95"></a>5.接口清單</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-interface.5pje0o1za4w0.webp" alt="接口清單" referrerpolicy="no-referrer"></p><h2><a id="user-content-6 採集方案" class="anchor" href="https://gitee.com/iflytek/NetAxe#6%E9%87%87%E9%9B%86%E6%96%B9%E6%A1%88"></a>6.採集方案</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netzxe-collect.4yf0qcxemhk0.webp" alt="採集方案" referrerpolicy="no-referrer"></p><h2><a id="user-content-7 任務列表" class="anchor" href="https://gitee.com/iflytek/NetAxe#7%E4%BB%BB%E5%8A%A1%E5%88%97%E8%A1%A8"></a>7.任務列表</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-task.58uns0zatss0.webp" alt="任務列表" referrerpolicy="no-referrer"></p><h2><a id="user-content-8 任務調度管理" class="anchor" href="https://gitee.com/iflytek/NetAxe#8%E4%BB%BB%E5%8A%A1%E8%B0%83%E5%BA%A6%E7%AE%A1%E7%90%86"></a>8.任務調度管理</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/netaxe-dispatch.3x68huinuzi0.webp" alt="任務調度管理" referrerpolicy="no-referrer"></p><h2><a id="user-content-9-地址管理" class="anchor" href="https://gitee.com/iflytek/NetAxe#9-%E5%9C%B0%E5%9D%80%E7%AE%A1%E7%90%86"></a>9. 地址管理</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/ipam.3vspimj3jf20.webp" alt="地址管理" referrerpolicy="no-referrer"></p><h2><a id="user-content-10-權限中心" class="anchor" href="https://gitee.com/iflytek/NetAxe#10-%E6%9D%83%E9%99%90%E4%B8%AD%E5%BF%83"></a>10. 權限中心</h2><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/rbac.6k2qnc2yqxk0.webp" alt="權限中心" referrerpolicy="no-referrer"></p><h2><a id="user-content-交流羣" class="anchor" href="https://gitee.com/iflytek/NetAxe#%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>交流羣</h2><blockquote><p>掃碼添加好友，提交入羣申請。</p></blockquote><p><img src="https://cdn.staticaly.com/gh/xuehaoweng/netaxe-image@master/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20230106172200.240x6tqonx9c.webp" alt="NetAxe 開源社區" referrerpolicy="no-referrer"></p><h2><a id="user-content--參與貢獻" class="anchor" href="https://gitee.com/iflytek/NetAxe#-%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>🤝 參與貢獻</h2><p>歡迎你參與到 NetAxe 項目的建設中來！🎉</p><p>我們可以一起：</p><ul><li>🎁 設計和開發功能模塊</li><li>⭐ 討論實際運維場景和自動化的落地實踐</li><li>🎊 結識一羣熱愛學習、熱愛開源的朋友</li></ul><h2><a id="user-content--維護者" class="anchor" href="https://gitee.com/iflytek/NetAxe#-%E7%BB%B4%E6%8A%A4%E8%80%85"></a>✨ 維護者</h2><p>維護者是做出傑出貢獻且在社區長期活躍的 NetAxe 社區成員。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FM87NET">jamlee</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fxuehaoweng">xuehaoweng</a></li></ul><h2><a id="user-content--貢獻者" class="anchor" href="https://gitee.com/iflytek/NetAxe#-%E8%B4%A1%E7%8C%AE%E8%80%85"></a>✨ 貢獻者</h2><p>貢獻者是在 NetAxe 社區中合併了 1 個或多個 PR 的社區成員。
虛位以待。。。</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FsP2dC0txvBhExYxbjq94UA">PR 提交指南</a></p><p>github:&nbsp;<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fiflytek%2FNetAxe">https://github.com/iflytek/NetAxe</a><br>
gitee:&nbsp;<a href="https://gitee.com/iflytek/NetAxe">https://gitee.com/iflytek/NetAxe</a><br>
NetAxe 官網文檔:<a href="https://gitee.com/link?target=https%3A%2F%2Fnetaxe.github.io%2F">https://netaxe.github.io/</a></p>]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/iflytek/NetAxe</guid>
            <link>https://gitee.com/iflytek/NetAxe</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 彩虹橋架構演進之路 - 性能篇]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一、前言</h1><p>一年前的《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247488943%26idx%3D1%26sn%3D867041a53c801b5f83457fa622bb4909%26scene%3D21%23wechat_redirect" target="_blank">彩虹橋架構演進之路</a>》側重探討了穩定性和功能性兩個方向。在過去一年中，儘管業務需求不斷增長且流量激增了數倍，彩虹橋仍保持着零故障的一個狀態，算是不錯的階段性成果。而這次的架構演進，主要分享一下近期針對性能層面做的一些架構調整和優化。其中最大的調整就是 Proxy-DB 層的線程模式從 BIO 改造成了性能更好的 NIO。下面會詳細介紹一下具體的改造細節以及做了哪些優化。</p><blockquote><p>閲讀本文預計需要 20～30 分鐘，整體內容會有些枯燥難懂，建議閲讀前先看一下上一篇彩虹橋架構演進的文章（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkxNTE3ODU0NA%3D%3D%26mid%3D2247488943%26idx%3D1%26sn%3D867041a53c801b5f83457fa622bb4909%26scene%3D21%23wechat_redirect" target="_blank">彩虹橋架構演進之路</a>）以及 MySQL 協議相關基礎知識。</p></blockquote><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>二、改造前的架構</h1><p>先來複習一下彩虹橋的全景架構圖： <img src="https://oscimg.oschina.net/oscnet/up-a99befe24a3c3d97eae3a3fd156ae4e23bd.jpg" alt="" referrerpolicy="no-referrer"></p><h2>Proxy 三層模塊</h2><p>針對 Proxy 這一層，可以大致分成 Frontend、Core、Backend 三層：</p><ul><li><strong>Frontend-服務暴露層</strong>：使用 Netty 作為服務器，按照 MySQL 協議對接收&amp;返回的數據進行編解碼。</li><li><strong>Core-功能&amp;內核層</strong>：通過解析、改寫、路由等內核能力實現數據分片、讀寫分離、影子庫路由等核心功能。</li><li><strong>Backend-底層 DB 交互層</strong>：通過 JDBC 實現與數據庫交互、對結果集改列、歸併等操作。</li></ul><h2>BIO 模式下的問題</h2><p>這裏 Core 層為純計算操作，而 Frontend、Backend 都涉及 IO 操作，Frontend 層使用 Netty 暴露服務為 NIO 模式，但是 Backend 使用了數據庫廠商提供的傳統 JDBC 驅動，為 BIO 模式。所以 Proxy 的整體架構還是 BIO 模式。在 BIO 模型中，每個連接都需要一個獨立的線程來處理。這種模型有一些明顯的缺點：</p><ul><li><strong>高資源消耗</strong>：每個請求創建獨立線程，伴隨大量線程開銷。線程切換與調度額外消耗 CPU。</li><li><strong>擴展性受限</strong>：受系統線程上限影響，處理大量併發連接時，性能急劇下降。</li><li><strong>I/O 阻塞</strong>：BIO 模型中，讀/寫操作均為阻塞型，導致線程無法執行其他任務，造成資源浪費。</li><li><strong>複雜的線程管理</strong>：線程管理和同步問題增加開發和維護難度。</li></ul><p>我們看最簡單的一個場景：在 JDBC 在發起請求後，當前線程會一直阻塞直到數據庫返回數據，當出現大量慢查或者數據庫出現故障時，會導致大量線程阻塞，最終雪崩。在上一篇彩虹橋架構演進文章中，我們做了一些改進來避免了 BIO 模型下的一些問題，比如使用線程池隔離來解決單庫阻塞導致全局雪崩的問題。 <img src="https://oscimg.oschina.net/oscnet/up-5dad3dc23bdca9a239bdf3253b4a7f9b319.jpg" alt="" referrerpolicy="no-referrer"></p><p>但是隨着邏輯庫數量的增多，最終導致 Proxy 的線程數膨脹。系統的可伸縮性和吞吐量都受到了挑戰。因此有必要將現有的基於 JDBC 驅動的阻塞式連接升級為採用 NIO（非阻塞 I/O）方式連接數據庫。</p><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>三、改造後的架構</h1><ul><li><strong>BIO-&gt;NIO</strong></li></ul><p>想把 Proxy 整體架構從 BIO-&gt;NIO，最簡單的方式就是把傳統的 BIO 數據庫驅動 JDBC 換成 NIO 的數據庫驅動，但是在調研過後發現開源的 NIO 驅動並不多，而且基本上沒有什麼最佳實踐。最後在參考 ShardingSphere 社區之前做的調研後（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fshardingsphere%2Fissues%2F13957" target="_blank">https://github.com/apache/shardingsphere/issues/13957</a> ） ，決定使用 Vertx 來替換 JDBC。最開始使用 Vert.x 的原因，第一是 Vertx 的異步編碼方式更友好，編碼複雜度相對較低，第二是因為它實現了主流數據庫的驅動。但最終的結果不盡人意，由於 Vertx 相關抽象化的架構，導致鏈路較長時，整個調用棧深非常誇張。最終壓測出來的吞吐量提升只有 5% 不到，而且存在很多兼容性問題。於是推倒重來，決定自研數據庫驅動和連接池。</p><ul><li><strong>跳過不必要的編解碼階段</strong></li></ul><p>由於 JDBC 驅動會自動把 MySQL 的字節數據編解碼成 Java 對象，然後 Proxy 再把這些結果集經過一些加工（元信息修正、結果集歸併）後再進行編碼返回給上游。如果自研驅動的話，就可以把編解碼流程控制的更細緻一些，把 Proxy 不需要加工的數據直接轉發給上游，跳過無意義的編解碼。後面會介紹一下哪些場景是不需要 Proxy 對結果集進行加工的。</p><h2>自研 NIO 數據庫驅動</h2><p>數據庫驅動主要是封裝了與 DB 層交互協議，封裝成高級 API。下面 2 張圖是 java.sql 包中的 Connection 和 Statement 的一些核心接口。 <img src="https://oscimg.oschina.net/oscnet/up-517ee2a0bafe29e2a2e648762ed31d87bb9.jpg" alt="" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-3e947c153f1f81f011a177b66d7b2036cee.jpg" alt="" referrerpolicy="no-referrer"></p><p>所以首先我們需要了解一下，如何與數據庫進行數據交互，以 MySQL 為例，使用 Netty 連接 MySQL，簡單的交互流程如下。 <img src="https://oscimg.oschina.net/oscnet/up-99ac2f8e643ce9a4d7c1db6f7db7a20a81e.jpg" alt="" referrerpolicy="no-referrer"></p><p>使用 Netty 與 MySQL 連接建立後，我們要做的就是按照 MySQL 協議規定的數據格式，先鑑權後再發送具體的命令包即可。下面是 MySQL 官方文檔中鑑權流程和命令執行流程：</p><ul><li><strong>鑑權流程</strong>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Fdev%2Fmysql-server%2Flatest%2Fpage_protocol_connection_phase.html" target="_blank">https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_connection_phase.html</a></li><li><strong>執行命令流程</strong>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdev.mysql.com%2Fdoc%2Fdev%2Fmysql-server%2Flatest%2Fpage_protocol_command_phase.html" target="_blank">https://dev.mysql.com/doc/dev/mysql-server/latest/page_protocol_command_phase.html</a></li></ul><p>下面就是按照 MySQL 的文檔，去實現編解碼 Handle，我們簡單看一下實現的代碼。 <img src="https://oscimg.oschina.net/oscnet/up-93dbe9735b43149a35e21ca060fb870ed92.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li>decode 解碼</li></ul><p>就是針對 MySQL 返回的數據包解碼，根據長度解析出 Palyload 封裝成 MySQLPacketPayload 傳給對應的 Handle 處理。</p><ul><li>encode 編碼</li></ul><p>把具體的命令類轉換成具體的 MySQL 數據包，這裏的 MySQLPacket 有多個實現類，跟 MySQL 的 Command 類型一一對應。</p><p>現在還需要一個類似 java.sql.Connection 的實現類，來組裝 MySQLPacket 並寫入到 Netty 通道中，並且解析編碼後的 MySQLPacketPayload 轉換成 ResultSet。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5cf9d17b87a550d191bd089eef9e41f28fd.jpg" alt="" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-2c4b743cde5a7c667d2a2d04881afaf237a.jpg" alt="" referrerpolicy="no-referrer"> 看起來比較簡單，交互流程和傳統的 JDBC 幾乎一樣，但是由於現在是異步化流程，所有的 Response 都是通過回調返回，所以這裏有 2 個難點：</p><ul><li>由於 MySQL 在上一條命令沒結束前無法接受新的命令，所以如何控制單個連接的命令串行化？</li><li>如何將 MySQL 返回的數據包和發起命令的 Request 一一綁定？</li></ul><p>首先 NettyDbConnection 引入了一個無鎖化非阻塞隊列 ConcurrentLinkedQueue。 <img src="https://oscimg.oschina.net/oscnet/up-95d916682b2dd973e5096a9c7889a398b1c.jpg" alt="" referrerpolicy="no-referrer"></p><p>在發送 Command 時，如何沒有正在進行中的 Command，則直接發送，如果有正在進行中的 Command，直接扔到隊列中，等待上一條 Command 處理完成後推動下一條命令的執行。保證了單個連接命令串行化。</p><p>其次，NettyDbConnection 在執行命令時，傳入一個 Promise，在 MySQL 數據包全部返回後，這個 Promise 將會被設置完成，即可於發起命令的 Request 一一綁定。 <img src="https://oscimg.oschina.net/oscnet/up-fbcb7f0a0133a4cb43712626f4fbfed08a3.jpg" alt="" referrerpolicy="no-referrer"></p><h2>自研 NIO 數據庫連接池</h2><p>前面介紹了 NettyDbConnection 這個類，實現了與 MySQL 的交互，並且提供了執行 SQL 的高級 API，但實際使用過程中，不可能每次都創建一個連接執行完 SQL 就關閉。所以需要對 NettyDbConnection 進行池化，統一管理連接的生命週期。其功能類似於傳統連接池 HikariCP，在完成基本能力的基礎上，做了很多性能優化。</p><ul><li>連接生命週期管控</li><li>連接池動態伸縮</li><li>完善的監控</li><li>連接異步保活</li><li>超時控制</li><li>EventLoop 親和性</li></ul><p>這裏除了 EventLoop 親和性，其他幾個功能只要用過傳統的數據庫連接池應該都比較熟悉，這裏不做過多展開。這裏主要針對 EventLoop 親和性展開介紹一下。</p><p>在文章開頭我們説到 Proxy 的三層模塊，Frontend、Core、Backend，如果現在我們把 Backend 層於數據庫交互的組件換成了我們自研的驅動，那麼 Proxy 就即是 Netty Server，也是 Netty Client，所以 Frontend 和 Backend 可以共用一個 EventLoopGroup。為了降低線程上下文切換，在單個請求從 Frontend 接收、經過 Core 層計算後轉發到 MySQL ，再到接收 MySQL 服務響應，以及最終的回寫給 Client 端，這一些列操作儘量放在一個 EventLoop 線程中處理。 <img src="https://oscimg.oschina.net/oscnet/up-e04581647d274a5cc64fded2d2f26bff551.jpg" alt="" referrerpolicy="no-referrer"></p><p>具體的做法就是 Backend 在選擇與數據庫連接時，優先選擇與當前 EventLoop 綁定的連接。也就是前面提到的 EventLoop 親和性，這樣就能保證大部分場景下一次請求從頭到尾都由同一個 EventLoop 處理，下面我們看一下具體的代碼實現。</p><p>在 NettyDbConnectionPool 類中使用一個 Map 存儲連接池中的空閒連接，Key 為 EventLoop，Value 為當前 EventLoop 綁定的空閒連接隊列。 <img src="https://oscimg.oschina.net/oscnet/up-3099eb3f9c96d39f72551fa8442ebdce261.jpg" alt="" referrerpolicy="no-referrer"></p><p>在獲取時，優先獲取當前 EventLoop 綁定的連接，如果當前 EventLoop 未綁定連接，則會借用其他 EventLoop 的連接。 <img src="https://oscimg.oschina.net/oscnet/up-830d6a25ed63767ae092d9eaa272e7624b5.jpg" alt="" referrerpolicy="no-referrer"></p><p>為了提高&nbsp;EventLoop 命中率，需要注意幾點配置：</p><ul><li>EventLoop 線程數量儘量與 CPU 核心數保持一致。</li><li>連接池最大連接數超過&nbsp;EventLoop 線程數越多，EventLoop 命中率越高。</li></ul><p>下面放一張壓測環境（8C16G、連接池最大連接數 10~30）的命中率監控，大部分保持在 75% 左右。 <img src="https://oscimg.oschina.net/oscnet/up-2164ed7abbf169379e215ff14861f04d876.jpg" alt="" referrerpolicy="no-referrer"></p><h2>跳過不必要的編解碼</h2><p>前面説到，有部分 SQL 的結果集是不需要 Proxy 進行加工的，也就是可以直接把 MySQL 返回的數據流原封不動轉發給上游，直接省去編解碼操作。那什麼 SQL 是不需要 Proxy 進行加工的呢，我們舉個例子説明一下。</p><p>假設邏輯庫 A 裏面有一張表 User 做了分庫，分了 2 個庫 DB1 和 DB2，分片算法是 user_id%2。</p><ul><li>SQL 1</li></ul><blockquote><p>‍SELECT id, name FROM user WHERE user_id in (1, 2)</p></blockquote><ul><li>SQL 2</li></ul><blockquote><p>‍SELECT id, name FROM user WHERE user_id in (1)</p></blockquote><p>很顯然 SQL 1 由於有 2 個分片 Value，最終匹配到了 2 個節點，SQL 2 只會匹配到 1 個節點。 <img src="https://oscimg.oschina.net/oscnet/up-f6637b742c35d1af023f60cf01309006bc9.jpg" alt="" referrerpolicy="no-referrer"></p><p>SQL 1 由於需要對結果集進行歸併，所以無法跳過編解碼，SQL 2 不需要對結果集歸併，只需要把結果集中的列定義數據做修正後，真正的 Row 數據無需處理，這種情況就可以把 Row 數據直接轉發至上游。</p><h2>全鏈路異步化</h2><p>Backend 層用自研連接池+驅動替換原先的 HikariCP+JDBC 後，從 Frontend-Core-Backend 全鏈路涉及到阻塞的操作需要全部替換成異步化編碼，也就是通過 Netty 的 Promise 和 Future 來實現。 <img src="https://oscimg.oschina.net/oscnet/up-3eb5da9b30f76427c3cddf2847919af3b71.jpg" alt="" referrerpolicy="no-referrer"></p><p>由於部分場景拿到 Future 時，可能當前 Future 已經完成了，如果每次都是無腦的加 Listener 會讓調用棧加長，所以我們定義了一個通用的工具類來處理 Future，即 future.isDone() 時直接執行，反之才會 addListener，最大化降低整個調用棧的深度。 <img src="https://oscimg.oschina.net/oscnet/up-d36312a5a58e232274aa174dea7ccd9551a.jpg" alt="" referrerpolicy="no-referrer"></p><h2>兼容性</h2><p>除了以上基本代碼的改造外，還需要做大量的兼容工作：</p><ul><li>特殊數據庫字段類型處理</li><li>JDBC URL 參數兼容</li><li>ThreadLocal 相關數據全部需要遷移至 ChannelHandlerContext 中</li><li>日誌 MDC、TraceContext 相關數據傳遞</li><li>……</li></ul><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>四、性能表現</h1><p>經過幾輪性能壓測後，NIO 架構相較於 BIO 架構性能有較大提升：</p><ul><li>整體最大吞吐量提升 67%</li><li>LOAD 下降 37% 左右</li><li>高負載情況下 BIO 多次出現進程夯住現象，NIO 相對較穩定</li><li>線程數減少 98% 左右</li></ul><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><h1>‍五、總結</h1><p>NIO 架構的改造工作量相當巨大，中間也經歷了一些曲折，但是最終的結果令人滿意。得益於 ShardingShpere 本身內核層面的高性能加上本次 NIO 改造後，彩虹橋在 DAL 中間件性能層面基本上可以算是第一梯隊了。</p><h1>‍<img src="" alt="" referrerpolicy="no-referrer"></h1><p>*文 / 新一</p><p>本文屬得物技術原創，更多精彩文章請看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" target="_blank">得物技術官網</a></p><p>未經得物技術許可嚴禁轉載，否則依法追究法律責任！</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 03:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10143389</guid>
            <link>https://my.oschina.net/u/5783135/blog/10143389</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 董事會與 Sam Altman 討論重返 CEO 崗位事宜]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">The Verge 援引多位知情人士消息稱，OpenAI 董事會正在與 Sam Altman 討論重返公司擔任首席執行官的事宜。</span></p><p><span style="color:#000000">其中一位知情人士表示，在經歷了沒有任何通知就突然被董事會解僱的 Altman 對迴歸一事"態度曖昧"，並希望對公司的治理模式進行重大變革。</span></p><p><img height="358" src="https://oscimg.oschina.net/oscnet/up-7c44d0d4980461dc3b0cab2147edf5763c7.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">事實上，在 OpenAI 董事會宣佈解僱了 Altman 幾小時後；被免去董事會主席職務的 Greg Brockman 就公開宣佈辭職，後續還有多位 OpenAI 高管也陸續辭職。一些風險投資家也公開聲明表示支持 Altman，紅杉資本普通合夥人 Alfred Lin 在推特上發文稱，期待着 Altman 和 Brockman 建立下一個改變世界的公司。OpenAI 最大的投資者微軟則在 Altman 被解僱後不久發表聲明稱，該公司「將繼續致力於」與 OpenAI 的合作關係。</span></p><p><span style="color:#000000">事件後續的進展是，Altman 和董事會約定了一個時間點 —— 在當地時間下午 5 點之前達成停戰協議，即董事會辭職，他和 Brockman 迴歸。然後董事會的搖擺不定導致他們錯過了這一時間期限。</span></p><p><span style="color:#000000">如果不能儘快達成協議，Altman 和 Brockman 的離開勢必會帶走更多 OpenAI 員工。兩人一直在與朋友和投資者討論創辦另一家公司的事宜，如果 Altman 決定離開並創辦一家新公司，肯定會有大批員工追隨。目前 OpenAI 的發言人仍未迴應有關 Altman 與董事會討論迴歸事宜的置評請求。微軟發言人則拒絕發表評論。</span></p><p><span style="color:#000000">OpenAI 當下的董事會成員包括首席科學家 Ilya Sutskever、Quora 首席執行官 Adam D'Angelo、前 GeoSim Systems 首席執行官 Tasha McCauley 以及喬治城安全與新興技術中心戰略總監 Helen Toner 組成。</span></p><p><span style="color:#000000">多位消息人士透露，Sutskever 也是 OpenAI 的聯合創始人之一併領導着 OpenAI 的研究團隊，他在罷免 Altman 的過程中發揮了重要作用。而他在這次政變中的角色也表明，公司的研發部門和產品部門之間存在權力鬥爭。</span></p><p><strong><span style="color:#000000">相關閲讀：</span></strong></p><ul><li><a href="https://www.oschina.net/news/267006/openai-ceo-sam-altman-fired" target="_blank">OpenAI 董事會內訌，CEO 兼創始人 Sam Altman 被逐出公司</a></li><li><a href="https://www.oschina.net/news/267013/openai-greg-brockman-quit" target="_blank">OpenAI 總裁 Greg Brockman 辭職</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 19 Nov 2023 03:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267101/openai-board-discussions-with-sam-altman-return-as-ceo</guid>
            <link>https://www.oschina.net/news/267101/openai-board-discussions-with-sam-altman-return-as-ceo</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國科學院軟件所在分組加密算法差分密碼分析方面取得進展]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">中國科學院軟件研究所可信智能系統研究團隊在分組加密算法的差分密碼分析方面取得<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FbrkeBtNVsRP27RgnXZLnVg" target="_blank">進展</a>。該工作設計了一個面向分組加密算法的領域編程語言 EasyBC，在此基礎上提出了通用、可擴展的差分密碼分析方法，研製了全自動分析工具平台 EasyBC （如圖 1）。</span></p><p><span style="color:#000000">該研究成果以_EasyBC: A Cryptography-Specific Language for Security Analysis of Block Ciphers against Differential Cryptanalysis_為題被編程語言國際頂級會議 POPL 2024 錄用，通訊作者是軟件所計算機科學國家重點實驗室宋富研究員。</span></p><p><span style="color:#000000"><img alt="" height="122" src="https://oscimg.oschina.net/oscnet/up-3680dde4b4183fc67c37f117d71002e2e79.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="color:#000000">圖 1. EasyBC 平台流程圖</span></em></p><p><span style="color:#000000">分組加密算法（block cipher）是將明文分成多個等長的模塊（block），使用對稱密鑰對每組分別加密或解密，廣泛應用於電子郵件加密、銀行交易轉帳等多個領域。作為極其重要的加密協議組成，主流分組加密算法有中國國家密碼管理局頒佈的 SM1、SM4 和 SM7，美國政府覈定的標準算法 AES 和 3DES。而差分密碼分析在評估分組加密算法的安全性方面發揮着核心作用，是分組加密算法標準化不可或缺的安全性分析手段。當前已有的差分密碼分析方法在通用性、自動化程度方面存在一定不足，同時建模過程複雜導致用戶需要熟悉大量的建模方法及底層分析工具的應用。</span></p><p><span style="color:#000000">為解決上述不足，研究團隊設計了一種分組加密算法的密碼學專用高級編程語言 EasyBC，提供了完整的語法、類型和語義的形式定義，為分組加密算法安全性自動分析奠定了良好基礎；提出了三種不同分析精度和性能的差分密碼分析方法，不僅統一和優化了已有的各類加密操作的建模方法，並提出了多種新的建模方法。</span></p><p><span style="color:#000000">研究團隊實現了 23 個加密原語，包括美國國家標準與技術研究院（National Institute of Standards and Technology，NIST）認證加密方案的底層置換算法以及多種常用分組加密算法（如圖 2）；並對其中的分組密碼原語進行了安全性分析（如圖 3），進而驗證了 EasyBC 語言的表達能力以及 EasyBC 工具平台安全性自動分析的有效性。</span></p><p><span style="color:#000000"><img alt="" height="184" src="https://oscimg.oschina.net/oscnet/up-6c84d792455028442affb5312288fbac624.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="color:#000000">圖 2.EasyBC 語言實現的 23 個加密原語</span></em></p><p><em><span style="color:#000000"><img alt="" height="171" src="https://oscimg.oschina.net/oscnet/up-55a59db5baf9240d59fc4e82c667f38b199.png" width="500" referrerpolicy="no-referrer"></span></em></p><p><em><span style="color:#000000">圖 3.Word-wise 實現的加密原語差分密碼安全性分析結果</span></em></p><p><span style="color:#000000">該研究對分組加密算法的差分密碼分析研究具有重要意義，為後續密碼學相關研究者們進行分組加密算法的安全性全自動分析和各類運算操作建模方法性能評估提供了良好的研究基礎和平台支撐。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left"><strong>論文信息：</strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left"><em>EasyBC: A Cryptography-Specific Language for Security Analysis of Block Ciphers against Differential Cryptanalysis</em>. Pu Sun (ShanghaiTech University), Fu Song* (Institute of Software Chinese Academy of Sciences, and University of Chinese Academy of Sciences), Yuqi Chen (ShanghaiTech University), Taolue Chen (Birkbeck, University of London). Proc. ACM Program. Lang. 8, POPL, Article 29 (January 2024), 33 pages.<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoi.org%2F10.1145%2F3632871" target="_blank">https://doi.org/10.1145/3632871</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 04:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267024</guid>
            <link>https://www.oschina.net/news/267024</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Vite 5 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Vite 5 現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite5" target="_blank">發佈</a>，這是&nbsp;<span style="background-color:#ffffff"><span style="color:#3c3c43">Vite 發展道路上的又一個重要里程碑。新版本採用了&nbsp;</span></span>Rollup 4，大大提升了構建性能；此外還帶來了一些新選項，可用於提高開發服務器的性能。</p><p>公告指出，Vite 5 的重點是清理 API（刪除已棄用的功能），並精簡了幾個功能以解決長期存在的問題。例如，將<code>define</code>轉換為使用正確的 AST 替換，而不是使用 regexes。<span style="background-color:#ffffff"><span style="color:#3c3c43">項目團隊表示，他們將繼續推進實現面向未來的 Vite</span></span>。</p><p><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-e7629b74c8fb7a720fb655b79a295d3134e.png" width="500" referrerpolicy="no-referrer"></p><h4><strong><span style="color:#3c3c43"><span style="background-color:#ffffff">Node.js 支持<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite5%23node-js-support" target="_blank">​</a></span></span></strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#3c3c43"><span style="background-color:#ffffff">Vite 不再支持已 EOL 的 Node.js 14 / 16 / 17 / 19。現在需要 Node.js 18 / 20+。</span></span></p><h4><strong>性能</strong></h4><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#3c3c43"><span style="background-color:#ffffff">除了 Rollup 4 的構建性能改進之外，還有一個新指南可幫助用戶識別和修復常見性能問題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fperformance" target="_blank">https://vitejs.dev/guide/performance</a>。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#3c3c43"><span style="background-color:#ffffff">Vite 5 還引入了&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fperformance%23warm-up-frequently-used-files" target="_blank">server.warmup</a>，這是一個改善啓動時間的新功能。它允許你定義應在服務器啓動後立即進行預轉換的模塊列表。當使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fconfig%2Fserver-options%23server-open" target="_blank"><code>--open</code></a>或 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fconfig%2Fserver-options%23server-open" target="_blank"><code>server.open</code></a>時，Vite 還會自動預熱應用程序的 entry point 或所提供的 URL，以便打開。</span></span></p><h4><strong><span style="color:#3c3c43"><span style="background-color:#ffffff">主要變化<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fblog%2Fannouncing-vite5%23main-changes" target="_blank">​</a></span></span></strong></h4><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23rollup-4" target="_blank">Vite 現已由 Rollup 4 提供支持</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23deprecate-cjs-node-api" target="_blank">CJS Node API 已被棄用</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23rework-define-and-import-meta-env-replacement-strategy" target="_blank">Rework<code>define</code> 和<code>import.meta.env.*</code> 替換策略</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23ssr-externalized-modules-value-now-matches-production" target="_blank">SSR 外部化模塊值現已與 production 一致</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23worker-plugins-is-now-a-function" target="_blank"><code>worker.plugins</code>現在是一個函數</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23allow-path-containing-to-fallback-to-index-html" target="_blank">允許包含<code>.</code>的路徑回退到 index.html</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23align-dev-and-preview-html-serving-behaviour" target="_blank">協調開發和預覽 HTML serving 行為</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23manifest-files-are-now-generated-in-vite-directory-by-default" target="_blank">現在默認在<code>.vite</code>目錄中生成 Manifest 文件</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23cli-shortcuts-require-an-additional-enter-press" target="_blank">CLI 快捷鍵需要額外按下<code>Enter</code>鍵</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23update-experimentaldecorators-and-usedefineforclassfields-typescript-behaviour" target="_blank">更新<code>experimentalDecorators</code>和<code>useDefineForClassFields</code>TypeScript 行為</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23remove-https-flag-and-https-true" target="_blank">移除<code>--https</code>flag 和<code>https: true</code></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23remove-resolvepackageentry-and-resolvepackagedata-apis" target="_blank">移除<code>resolvePackageEntry</code>和<code>resolvePackageData</code>API</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23removed-deprecated-apis" target="_blank">移除之前已棄用的 API</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvitejs.dev%2Fguide%2Fmigration%23advanced" target="_blank">瞭解更多有關影響插件和工具作者的高級更改信息</a></li></ul><p>更多詳情可查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvitejs%2Fvite%2Fblob%2Fmain%2Fpackages%2Fvite%2FCHANGELOG.md%23500-2023-11-16" target="_blank">Vite 5 Changelog</a><span style="color:#3c3c43">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267021/vite5-released</guid>
            <link>https://www.oschina.net/news/267021/vite5-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[667 天后，Openfire 4.8.0 beta 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">Openfire 是一個使用廣泛採用的即時消息開放協議 XMPP（也稱為 Jabber）的 RTC（Real Time Collaboration，實時協作） 服務器，它非常易於設置和管理，提供良好的安全性和性能。</span></span></p><p><span style="color:#000000">在距離&nbsp;<span style="background-color:#ffffff">4.7.0 發佈過去了 667 天后，Openfire 4.8.0 beta 現<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.igniterealtime.org%2Ft%2Fopenfire-4-8-0-beta-release%2F93338" target="_blank">宣佈</a>立即可用。「</span>這是最後一次從同一源代碼分支發佈版本。而且這表明：我們已經解決了針對此版本的近 180 個問題<span style="background-color:#ffffff">」。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">一些更新亮點包括：</span></span></p><ul><li><span style="color:#000000">已經放棄了對 Java 8 的支持。現在最低要求是 Java 11</span></li><li><span style="color:#000000">異步網絡堆棧的完整重新實現，提高了穩定性和性能</span></li><li><span style="color:#000000">所有已知的 TLSv1.3 問題均已解決</span></li></ul><p><span style="color:#000000">公告表示，開發人員和 Ignite Realtime 社區的其他成員已對該測試版（及其部分先行版本）進行了廣泛測試，在現階段沒有發現任何關鍵問題。但在正式發佈前，還是希望有更多用戶給出反饋。</span></p><p>下載：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.igniterealtime.org%2Fdownloads%2Fbeta.jsp" target="_blank">https://www.igniterealtime.org/downloads/beta.jsp</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267017/openfire-4-8-0-beta-released</guid>
            <link>https://www.oschina.net/news/267017/openfire-4-8-0-beta-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OneTable —— Lakehouse 表格式間全方位互操作]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#1f2328">OneTable 是一種表格式的全方位轉換器，可促進數據處理系統和查詢引擎之間的互操作性</span><span style="color:#000000">。Apache Hudi、Delta Lake 和 Apache Iceberg 之間無縫互操作。</span></p><p>OneTable 不是一種新的或獨立的格式，OneTable 提供了用於轉換 Lakehouse 表格式元數據的抽象和工具</p><p><span><span>OneTable 通過利用表表示的通用模型來簡化數據湖操作。這允許用戶以一種格式寫入數據，同時仍然受益於其他格式的集成和功能。例如，OneTable 使現有的 Hudi 用戶能夠無縫地使用 Databricks 的 Photon Engine 或使用 Snowflake 查詢 Iceberg 表。創建從一種格式到另一種格式的轉換非常簡單，只需要實現一些接口，項目團隊認為，這將有助於將來支持的源格式和目標格式的擴展。</span></span></p><p style="margin-left:0px; margin-right:0px"><img alt="" height="414" src="https://static.oschina.net/uploads/space/2023/1116/163549_inUl_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/onetable</guid>
            <link>https://www.oschina.net/p/onetable</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 運行在 Python 虛擬機上的面向對象編程語言 AIL]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-ail-30-alpha-3" class="anchor" href="https://gitee.com/LaomoBK/ail#ail-30-alpha-3"></a>AIL 3.0 alpha 3</h1><p><a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/whatsnew.md">AIL 3.0 Kirara 版本更新內容</a></p><p><a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/versions/2_3.md">AIL 2.3 Diona 版本更新內容</a></p><p><a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/versions/2_2.md">AIL 2.2 Klee 版本更新內容</a></p><p><img src="https://img.shields.io/badge/AIL-Programming%20Language-blue" alt="AIL badge" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/python-3.8-blue" alt="python badge" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/version-3.0%20alpha-success" alt="version badge" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-GPL-blue" alt="license badge" referrerpolicy="no-referrer"></p><p>AIL 是一門開源的運行在 Python 虛擬機上的面向對象的編程語言。支持 Python 的大多數特性的同時，還額外增加了如 match 表達式，匿名函數，名稱空間等 AIL 自身的特性。</p><h2><a id="user-content-環境需求" class="anchor" href="https://gitee.com/LaomoBK/ail#%E7%8E%AF%E5%A2%83%E9%9C%80%E6%B1%82"></a>環境需求</h2><p><strong>具有完整標準庫的 Python3.8</strong></p><p>推薦使用 <strong>cpython</strong> 解釋器，其他 Python 解釋器並未進行過測試。</p><h2><a id="user-content-hello-world" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world"></a>Hello World</h2><h4><a id="user-content-hello-world-with-one-statement" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-with-one-statement"></a>Hello World with one statement</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">print</span><span class="s">'Hello World'</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>..or..</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">console</span><span class="p">.</span><span class="n">writeln</span><span class="p">(</span><span class="s">'Hello World!'</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-lambda" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-lambda"></a>Hello World in lambda</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">(()</span><span class="o">-&gt;</span><span class="n">console</span><span class="p">.</span><span class="n">writeln</span><span class="p">(</span><span class="s">'Hello World'</span><span class="p">))();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-function" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-function"></a>Hello World in function</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">func</span><span class="nf">helloWorld</span><span class="p">()</span><span class="p">{</span></span><span id="LC2" class="line"><span class="n">print</span><span class="s">"Hello World!"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="p">}</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="nf">helloWorld</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-anonymous-function" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-anonymous-function"></a>Hello World in anonymous function</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">(</span><span class="nf">func</span><span class="p">()</span><span class="p">{</span></span><span id="LC2" class="line"><span class="n">print</span><span class="s">"Hello World!"</span><span class="p">;</span></span><span id="LC3" class="line"><span class="p">})();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-hello-world-in-class" class="anchor" href="https://gitee.com/LaomoBK/ail#hello-world-in-class"></a>Hello World in class</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">class</span><span class="kt">Hello</span><span class="p">{</span></span><span id="LC2" class="line"><span class="kd">func</span><span class="nf">helloWorld</span><span class="p">(</span><span class="k">self</span><span class="p">)</span><span class="p">{</span></span><span id="LC3" class="line"><span class="n">print</span><span class="s">"Hello World!"</span><span class="p">;</span></span><span id="LC4" class="line"><span class="p">}</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="kt">Hello</span><span class="p">()</span><span class="o">.</span><span class="nf">helloWorld</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-斐波那契數列" class="anchor" href="https://gitee.com/LaomoBK/ail#%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97"></a>斐波那契數列</h4><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">func</span><span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="p">{</span></span><span id="LC2" class="line"><span class="k">if</span><span class="n">n</span><span class="o">==</span><span class="mi">1</span><span class="n">or</span><span class="n">n</span><span class="o">==</span><span class="mi">2</span><span class="p">{</span></span><span id="LC3" class="line"><span class="k">return</span><span class="mi">1</span><span class="p">;</span></span><span id="LC4" class="line"><span class="p">}</span><span class="n">elif</span><span class="n">n</span><span class="o">&gt;=</span><span class="mi">2</span><span class="p">{</span></span><span id="LC5" class="line"><span class="k">return</span><span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="nf">fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span></span><span id="LC6" class="line"><span class="p">}</span></span><span id="LC7" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>以上例子均在 AIL 3.0 alpha 0 版本下測試通過</p><h2><a id="user-content-主要語言特性" class="anchor" href="https://gitee.com/LaomoBK/ail#%E4%B8%BB%E8%A6%81%E8%AF%AD%E8%A8%80%E7%89%B9%E6%80%A7"></a>主要語言特性</h2><p><em>以下例子均已在 AIL 2.3 版本下通過編譯</em></p><h3><a id="user-content-更多的-for-語句" class="anchor" href="https://gitee.com/LaomoBK/ail#%E6%9B%B4%E5%A4%9A%E7%9A%84-for-%E8%AF%AD%E5%8F%A5"></a>更多的 for 語句</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">for</span><span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">j</span><span class="o">=</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="n">i</span><span class="o">&lt;</span><span class="nf">len</span><span class="p">(</span><span class="n">x</span><span class="p">);</span><span class="n">i</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="n">j</span><span class="o">-=</span><span class="mi">1</span><span class="p">{</span></span><span id="LC2" class="line"><span class="c1">// ...</span></span><span id="LC3" class="line"><span class="p">}</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="k">for</span><span class="p">{</span></span><span id="LC6" class="line"><span class="c1">// forever...</span></span><span id="LC7" class="line"><span class="p">}</span></span><span id="LC8" class="line"></span><span id="LC9" class="line"><span class="n">foreach</span><span class="n">i</span><span class="k">in</span><span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span><span class="p">{</span></span><span id="LC10" class="line"><span class="c1">// ...</span></span><span id="LC11" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-namespace-名稱空間" class="anchor" href="https://gitee.com/LaomoBK/ail#namespace-%E5%90%8D%E7%A7%B0%E7%A9%BA%E9%97%B4"></a>namespace 名稱空間</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">namespace</span><span class="n">Vegetables</span><span class="p">{</span></span><span id="LC2" class="line"><span class="n">cabbage</span><span class="o">=</span><span class="s">'cabbage'</span><span class="p">;</span></span><span id="LC3" class="line"><span class="n">leaf_mustard</span><span class="o">=</span><span class="s">'mustard'</span><span class="p">;</span></span><span id="LC4" class="line"><span class="p">}</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="n">namespace</span><span class="n">Fruits</span><span class="p">{</span></span><span id="LC8" class="line"><span class="n">apple</span><span class="o">=</span><span class="s">'apple'</span><span class="p">;</span></span><span id="LC9" class="line"><span class="n">tomato</span><span class="o">=</span><span class="s">'tomato'</span><span class="p">;</span></span><span id="LC10" class="line"><span class="p">}</span></span><span id="LC11" class="line"></span><span id="LC12" class="line"></span><span id="LC13" class="line"><span class="k">print</span><span class="s">'An %s a day keeps the doctor away'</span><span class="o">%</span><span class="n">Fruits</span><span class="p">.</span><span class="n">apple</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-強大的-match-表達式" class="anchor" href="https://gitee.com/LaomoBK/ail#%E5%BC%BA%E5%A4%A7%E7%9A%84-match-%E8%A1%A8%E8%BE%BE%E5%BC%8F"></a>強大的 match 表達式</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">name</span><span class="o">=</span><span class="n">match</span><span class="n">lang_name</span><span class="p">{</span></span><span id="LC2" class="line"><span class="s">'Python'</span><span class="p">:</span><span class="s">'py'</span><span class="p">,</span></span><span id="LC3" class="line"><span class="s">'Java'</span><span class="p">:</span><span class="s">'java'</span><span class="p">,</span></span><span id="LC4" class="line"><span class="s">'AIL'</span><span class="p">:</span><span class="s">'ail'</span><span class="p">,</span></span><span id="LC5" class="line"><span class="p">}</span></span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="p">(</span><span class="n">match</span><span class="n">point</span><span class="p">{</span></span><span id="LC8" class="line"><span class="n">Point</span><span class="err">!</span><span class="p">{</span><span class="n">x</span><span class="p">:</span><span class="mi">5</span><span class="p">,</span><span class="n">y</span><span class="p">:</span><span class="mi">6</span><span class="p">}:</span><span class="p">()</span><span class="o">-&gt;</span><span class="p">{</span></span><span id="LC9" class="line"><span class="o">//</span><span class="n">handle</span><span class="n">it</span><span class="p">...</span></span><span id="LC10" class="line"><span class="p">},</span></span><span id="LC11" class="line"><span class="k">else</span><span class="p">:</span><span class="p">()</span><span class="o">-&gt;</span><span class="p">{</span></span><span id="LC12" class="line"><span class="o">//</span><span class="n">handle</span><span class="n">it</span><span class="p">...</span></span><span id="LC13" class="line"><span class="p">}</span></span><span id="LC14" class="line"><span class="p">})();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-通過引用-global-變量在-local-域中定義同名變量" class="anchor" href="https://gitee.com/LaomoBK/ail#%E9%80%9A%E8%BF%87%E5%BC%95%E7%94%A8-global-%E5%8F%98%E9%87%8F%E5%9C%A8-local-%E5%9F%9F%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F"></a>通過引用 global 變量在 local 域中定義同名變量</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">a</span><span class="o">=</span><span class="m">10</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="k">func</span><span class="n">f</span><span class="p">()</span><span class="p">{</span></span><span id="LC4" class="line"><span class="n">a</span><span class="o">:=</span><span class="n">a</span><span class="p">;</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-與-python-協作" class="anchor" href="https://gitee.com/LaomoBK/ail#%E4%B8%8E-python-%E5%8D%8F%E4%BD%9C"></a>與 Python 協作</h3><p>在 AIL 中可以直接導入 Python 模塊，使用類似 Python 的 import 語句：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="k">import</span><span class="err">!</span><span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="k">as</span><span class="n">ospath</span><span class="p">;</span></span><span id="LC2" class="line"><span class="k">import</span><span class="err">!</span><span class="n">numpy</span><span class="k">as</span><span class="n">np</span><span class="p">;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kn">from</span><span class="nn">PIL</span><span class="kn">import</span><span class="n">Image</span><span class="p">;</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'klee.jpg'</span><span class="p">).</span><span class="n">show</span><span class="p">();</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>亦或是在 AIL 程序中直接插入 Python 代碼：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">func</span><span class="nf">gen</span><span class="p">(</span><span class="n">n</span><span class="p">)</span><span class="p">{</span></span><span id="LC2" class="line"><span class="cp">#return [x**n for x in range(n)]</span></span><span id="LC3" class="line"><span class="p">}</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="n">print</span><span class="nf">gen</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-安裝-ail" class="anchor" href="https://gitee.com/LaomoBK/ail#%E5%AE%89%E8%A3%85-ail"></a>安裝 AIL</h2><p>運行 AIL 事先準備好的 <strong>setup.py</strong> 可以非常快速地在您的電腦上配置好 AIL。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python3 setup.py <span class="nb">install</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在終端中輸入:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">ail</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python3 -m ail</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p><em><strong>Windows 下應確保 {PYTHON_HOME}/Script/ 已添加到 PATH 中</strong></em><em><strong>Linux/Mac OS 下應確保當前用戶的 bin 目錄已添加到 PATH 中</strong></em></p><p>若進入 AIL 的交互環境，則安裝成功。</p><h2><a id="user-content-文檔" class="anchor" href="https://gitee.com/LaomoBK/ail#%E6%96%87%E6%A1%A3"></a>文檔</h2><p>AIL 的文檔仍然在完善中。具體的進度可以在 <code>/docs/</code> 中查看。</p><h2><a id="user-content-ail-語句" class="anchor" href="https://gitee.com/LaomoBK/ail#ail-%E8%AF%AD%E5%8F%A5"></a>AIL 語句</h2><p>文檔 <a href="https://gitee.com/LaomoBK/ail/blob/3.0/docs/reference/statements.md">AIL 語句</a> 簡要地描述了 AIL 的語句</p><h2><a id="user-content-vim-語法高亮支持" class="anchor" href="https://gitee.com/LaomoBK/ail#vim-%E8%AF%AD%E6%B3%95%E9%AB%98%E4%BA%AE%E6%94%AF%E6%8C%81"></a>VIM 語法高亮支持</h2><p>AIL 為 vim 專門編寫了其語法高亮文件，寫代碼的時候媽媽再也不會擔心敲錯關鍵字了！</p><p>提供瞭如下高亮支持：</p><ul><li>關鍵字</li><li>字符串、數字</li><li>基本類型註解</li><li>AIL 與 Python 內置函數、常量</li></ul><p><img src="https://gitee.com/LaomoBK/ail/raw/2.3/misc/vim_highlight.jpg" alt="vim highlight" referrerpolicy="no-referrer"></p><h4><a id="user-content-配置" class="anchor" href="https://gitee.com/LaomoBK/ail#%E9%85%8D%E7%BD%AE"></a>配置</h4><ol><li>將 <strong>plugin/vim/syntax/ail.vim</strong> 與 <strong>plugin/vim/ftdetect/ail.vim</strong> 分別複製到 <strong>{VIM_HOME}/syntax/</strong> 和 <strong>{VIM_HOME}/ftdetect/</strong></li><li>重新啓動 vim 即可</li></ol><h2><a id="user-content-treetxt" class="anchor" href="https://gitee.com/LaomoBK/ail#treetxt"></a>tree.txt</h2><p>這是最早期 AIL 語法分析器生成的語法樹</p><p><em>對應的程序<strong>應該</strong>可以在早期 commit 中找到</em></p>]]>
            </description>
            <pubDate>Sat, 18 Nov 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/LaomoBK/ail</guid>
            <link>https://gitee.com/LaomoBK/ail</link>
        </item>
    </channel>
</rss>
