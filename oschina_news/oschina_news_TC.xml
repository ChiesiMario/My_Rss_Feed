<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 24 Sep 2023 13:56:51 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[罰款 200 元，沒收 100 多萬]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微博博主稱自己「翻牆訪問國際互聯網打工被處罰百萬」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0924/173843_dYKe_2720166.png" referrerpolicy="no-referrer"></p><p><em>來源：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcard.weibo.com%2Farticle%2Fm%2Fshow%2Fid%2F2309404949447133233199" target="_blank">https://card.weibo.com/article/m/show/id/2309404949447133233199</a></u></em></p></blockquote><p>根據這名博主提供的資料，在 2019 年 9 月份至 2022 年 11 月期間，他在家中<strong>擅自使用非法信道進行國際聯網</strong>，為境外公司提供網絡顧問服務，<strong>違法所得共計人民幣 1058000 餘元</strong>。</p><p>根據《中華人民共和國計算機信息網絡國際聯網管理暫行規定》第六條和第十四條、《中華人民共和國計算機信息網絡國際聯網管理暫行規定實施辦法》第七條和第二十二條第一款之規定，這名博主受到了行政處罰，並處罰款貳佰元整，沒收違法所得一百零五萬八千元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c9d4c52a10a1b05cf39730b000daa514e2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-326b36667644a24fce944857b5a461dd043.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259325</guid>
            <link>https://www.oschina.net/news/259325</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 致社區公開信，調整 runtime fee 政策]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>面對此前制定的<a href="https://www.oschina.net/news/257929/unity-runtime-fee" target="_blank">"Funtime Fee"收費政策</a>所引發的用戶爭議與不滿，<span style="color:#333333">Unity Create 負責人 Marc Whitten 正式發佈了一封致社區的道歉<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">公開信</a>，並詳細解釋了其定價策略的變更。</span></p><blockquote><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>我想以此開始：對不起。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>在宣佈新的 Runtime Fee 政策之前，我們本應與大家進行更多的溝通，我們本應採納更多的反饋意見。我們制定此政策的目標是確保我們能夠在今天和明天繼續為您提供支持，並繼續深入投資我們的遊戲引擎。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你們讓 Unity 變得偉大，我們知道我們需要傾聽並努力贏得您的信任。我們已經聽到了您的擔憂，並且正在對我們宣佈的政策進行更改以解決這些問題。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" height="167" src="https://oscimg.oschina.net/oscnet/up-03756292fbd61192f7edc3f71fc2060de26.jpg" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">根據修訂後的條款，<strong>Unity Personal </strong></span><strong>plan&nbsp;</strong><span style="color:#000000"><strong>將保持免費，</strong>並且基於 Unity Personal&nbsp;構建的遊戲將不收取 Runtime Fee；同時個人版的適用範圍也從每年收入 10 萬美元以下提高到 20 萬美元，並取消了使用 Made with Unity 啓動畫面的要求。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">對於企業版和專業版用戶，過去 12 個月收入達到或超過 100 萬美元，仍需繳納該費用。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">使用當前版本的 Unity 開發的任何遊戲都無需支付 Runtime Fee，Runtime Fee 政策將僅適用於 2024 年採用最新版本的開發者。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">而對於需要繳納 Runtime Fee 的遊戲，則可以選擇按&nbsp;<strong>2.5% 的收入分成</strong>，或者根據每月參與遊戲的新用戶數量計算付費，具體可以較低者為準。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">查看官方公告</a>。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#000000">相關閲讀：</span></strong></p><ul><li><a href="https://www.oschina.net/news/258513/unity-apologize-for-runtime-fee" target="_blank">Unity 道歉：將修改 "runtime fee" 收費政策</a></li><li><a href="https://www.oschina.net/news/257929/unity-runtime-fee">Unity 引擎明年起根據遊戲安裝量收費 (runtime fee)</a></li><li><a href="https://www.oschina.net/news/258280/unity-closes-offices-following-death-threats">遊戲引擎開發商 Unity 收到死亡威脅</a></li><li><a href="https://www.oschina.net/news/258477/wait-is-unity-allowed-to-just-change-its-fee-structure-like-that">走近 「收費門」：互相矛盾的服務條款導致 Unity 面臨被起訴的風險</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259300/open-letter-on-runtime-fee</guid>
            <link>https://www.oschina.net/news/259300/open-letter-on-runtime-fee</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🎉 .NET 基礎框架 Furion 新版本 v4.8.8.44 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="1327" src="https://oscimg.oschina.net/oscnet/up-dd287a7f490eae9d6e9d12266351bc3c1c0.png" width="1718" referrerpolicy="no-referrer"></p><p><strong>經過三年多的不斷打磨，Furion 已經變得非常成熟和穩定。截至目前，NuGet 的總下載量已超過 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nuget.org%2Fprofiles%2Fmonk.soul" target="_blank">1050 萬</a>&nbsp;次，這個數字不斷增長。</strong>Furion 已經幫助越來越多的企業和個人開發者提高了開發效率，同時也減少了開發成本。我們的團隊也正在致力於研發面向 .NET8 的 v5.0.0 版本，希望能為 .NET 的發展做出一點微小的貢獻。</p><h2>項目信息</h2><ul><li>Gitee：<strong><a href="https://gitee.com/dotnetchina/Furion">https://gitee.com/dotnetchina/Furion</a></strong></li><li>Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMonkSoul%2FFurion" target="_blank">https://github.com/MonkSoul/Furion</a></li><li>文檔：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffurion.baiqian.ltd%2F" target="_blank">http://furion.baiqian.ltd/</a></strong></li></ul><h2>本期更新</h2><blockquote><p><span style="background-color:#f6f6f6; color:#333333">更新日誌：</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ffurion.baiqian.ltd%2Fdocs%2Fupgrade%2F" target="_blank">http://furion.baiqian.ltd/docs/upgrade</a></p></blockquote><ul><li><p style="margin-left:0; margin-right:0"><strong>新特性</strong></p><ul><li>[新增] 定時任務看板列表支持作業分組名排序<span>&nbsp;</span>4.8.8.43<span>&nbsp;</span>⏱️2023.09.14<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7YQ9V">#I7YQ9V</a></li><li>[新增] 驗證特性<span>&nbsp;</span><code>[DataValidation]</code><span>&nbsp;</span>支持<span>&nbsp;</span><code>[Display]</code><span>&nbsp;</span>和<span>&nbsp;</span><code>[DisplayName]</code><span>&nbsp;</span>特性設置<span>&nbsp;</span><code>{0}</code><span>&nbsp;</span>4.8.8.42<span>&nbsp;</span>⏱️2023.09.01<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7XB3T">#I7XB3T</a></li><li>[新增] 監聽日誌<span>&nbsp;</span><code>LoggingMonitor</code><span>&nbsp;</span>支持配置日誌輸出級別<span>&nbsp;</span>4.8.8.41<span>&nbsp;</span>⏱️2023.08.25<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7SRTP">#I7SRTP</a></li><li>[新增] 多語言支持<span>&nbsp;</span><code>L.GetString(name, culture)</code><span>&nbsp;</span>獲取指定區域翻譯<span>&nbsp;</span>4.8.8.41<span>&nbsp;</span>⏱️2023.08.04<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/044b0edfbd622c7c69d685267aafa9f5855a9167">044b0ed</a></li><li>[新增] 粘土對象<span>&nbsp;</span><code>.ConvertTo</code><span>&nbsp;</span>支持自定義值提供器<span>&nbsp;</span>4.8.8.40<span>&nbsp;</span>⏱️2023.08.03<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/70d58888b3cec88c5c2a8458654dca1881e2a88b">70d5888</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>問題修復</strong></p><ul><li>[修復]<span>&nbsp;</span><code>Scoped.CreateUowAsync</code><span>&nbsp;</span>作用域工作單元異常無法回滾問題<span>&nbsp;</span>4.8.8.44<span>&nbsp;</span>⏱️2023.09.23<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I833I9">#I833I9</a></li><li>[修復] 模板引擎高併發讀取緩存模板出現線程佔用問題<span>&nbsp;</span>4.8.8.43<span>&nbsp;</span>⏱️2023.09.14<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I80ZKB">#I80ZKB</a></li><li>[修復] 使用刷新<span>&nbsp;</span><code>Token</code><span>&nbsp;</span>也能通過鑑權檢查嚴重安全<span>&nbsp;</span><code>Bug</code><span>&nbsp;</span>4.8.8.42<span>&nbsp;</span>⏱️2023.08.28<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7TII4">#I7TII4</a></li><li>[修復] 粘土對象不支持枚舉類型問題<span>&nbsp;</span>4.8.8.41<span>&nbsp;</span>⏱️2023.08.25<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7VDDL">#I7VDDL</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>其他更改</strong></p><ul><li>[調整]<span>&nbsp;</span><code>[UnitofWork]</code><span>&nbsp;</span>支持在<span>&nbsp;</span><code>Class</code><span>&nbsp;</span>中指定，解決<span>&nbsp;</span><code>Pages</code><span>&nbsp;</span>應用警告問題<span>&nbsp;</span>4.8.8.42<span>&nbsp;</span>⏱️2023.09.01<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I7X51E">#I7X51E</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>文檔</strong></p><ul><li>[新增]<span>&nbsp;</span><code>Jwt</code><span>&nbsp;</span>身份驗證過程監聽文檔</li><li>[新增] 事件總線<span>&nbsp;</span><code>Redis</code><span>&nbsp;</span>集成文檔</li><li>[更新] 粘土對象文檔、虛擬文件系統文檔、序列化文檔、事件總線文檔、遠程請求文檔、數據加密文檔、安全授權文檔、動態<span>&nbsp;</span><code>WebAPI</code><span>&nbsp;</span>文檔、定時任務文檔、<code>JSON</code><span>&nbsp;</span>序列化文檔、<code>App</code><span>&nbsp;</span>靜態類文檔、規範化文檔、配置文檔</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>貢獻者</strong></p><ul><li>陶泥 (<a href="https://gitee.com/ncs48620">@ncs48620</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/848">!848</a></li><li>handsome_by (<a href="https://gitee.com/handsomeboyyl">@handsomeboyyl</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/842">!842</a></li><li>拉風的 CC (<a href="https://gitee.com/zetaluoxin">@LFDCC</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/841">!841</a></li><li>Felix Hoi (<a href="https://gitee.com/zetaluoxin">@felixhoi</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/839">!839</a></li><li>zetaluoxin (<a href="https://gitee.com/zetaluoxin">@zetaluoxin</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/834">!834</a></li><li>SongXinXin (<a href="https://gitee.com/goodsxx">@goodsxx</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/832">!832</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/833">!833</a></li><li>阿炬 (<a href="https://gitee.com/quejuwen">@quejuwen</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/813">!813</a></li><li>KaneLeung (<a href="https://gitee.com/KaneLeung">@KaneLeung</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/808">!808</a></li><li>蔣狀先生 (<a href="https://gitee.com/JiangZhuangXianSheng">@JiangZhuangXianSheng</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/806">!806</a></li><li>NeoLu (<a href="https://gitee.com/neolu">@neolu</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/804">!804</a></li><li>藍色天空 (<a href="https://gitee.com/lds2013">@lds2013</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/796">!796</a></li><li>YaChengMu (<a href="https://gitee.com/YaChengMu">@YaChengMu</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/788">!788</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/815">!815</a></li></ul></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259296/furion-4-8-8-44-released</guid>
            <link>https://www.oschina.net/news/259296/furion-4-8-8-44-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[清華系創企推出千億參數生物醫藥大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">清華系創企水木分子<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fl5iE9NCA2v0fC_wg3S5DTw" target="_blank">宣佈</a>發佈新一代對話式藥物研發助手 ChatDD (Drug Design) 和全球首個千億參數多模態生物醫藥對話大模型 ChatDD-FM 100B。水木分子成立於今年 6 月，由清華大學智能產業研究院（AIR）孵化，專注於生物醫藥垂直行業大模型的研發與應用。</span></p><p><img height="235" src="https://oscimg.oschina.net/oscnet/up-9aa47749420f10ded3e2467c43ac413545b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">根據介紹，水木分子提出的 ChatDD，基於大模型能力，能夠對多模態數據進行融合理解，與專家自然交互人機協作，將人類專家知識與大模型知識聯結，重新定義藥物研發模式。</span></p><p><span style="color:#000000">ChatDD 基於水木分子千億參數多模態生物醫藥對話大模型底座 ChatDD-FM，具備專業知識力、認知探索力和工具調用能力。作為生物醫藥研發助手 Copilot 可以服務醫藥研發全流程場景，從立項調研，早期藥物發現，臨牀前研究到臨牀試驗、藥物重定位等各環節。</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-7cbd38053ca323a3d0d0aeed787e187b3c2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">在具體應用場景方面，發佈會上展示了 ChatDD-BI 立項場景、ChatDD-Discovery 研發探索場景和 ChatDD-Trail 臨牀試驗場景應用。</span></p><p><span style="color:#000000">ChatDD 的底座為千億參數多模態生物醫藥對話大模型 ChatDD-FM 100B，在通用語言模型基礎上經過：生物醫藥專業知識增強、生物醫藥多模態對齊、專業領域指令微調和 RLHF 三層淬鍊。ChatDD-FM 100B 在 C-Eval 評測榜單中達到綜合成績 Top10，全部醫學專項 4 項評測排名第一，是唯一在該 4 項評測中平均分超過 90 分（93.1 分）的模型。</span></p><p><img height="277" src="https://oscimg.oschina.net/oscnet/up-72ba7b6e5f51510eaafae5386eb6a5902ea.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259292</guid>
            <link>https://www.oschina.net/news/259292</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LightDiffusionFlow —— SD 工作流保存插件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">LightDiffusionFlow 是一個基於 AI 繪畫開源平台 StableDiffusion webUI（簡稱 SD）的開源插件，它可以幫助你一鍵保存所有工作流數據，下次使用只需拖入 Flow 文件，就能快速復現整個工作流，就像使用 Photoshop 的 PSD 樣機文件那樣方便。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-761ae50dada20a421f4f5a91e5852c6d720.png" width="500" referrerpolicy="no-referrer"></p><p><strong>功能</strong></p><ul><li>使用單個文件導出/導入網頁用戶界面參數（圖像、輸入、滑塊、複選框等）。</li><li>支持解析圖片中的 png 信息，並將參數還原回網絡用戶界面。</li></ul><p><strong>支持的擴展：</strong></p><ul><li>理論上，它可以支持任何插件。(某些插件圖片除外，因為它們需要提供相應的 elem_id）。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lightdiffusionflow</guid>
            <link>https://www.oschina.net/p/lightdiffusionflow</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 高性能任務調度引擎 Volcano]]>
            </title>
            <description>
                <![CDATA[<a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F"><img src="https://raw.githubusercontent.com/volcano-sh/volcano/master/docs/images/volcano-horizontal-color.png" referrerpolicy="no-referrer"></a><hr><p><a href="https://gitee.com/link?target=https%3A%2F%2Ftravis-ci.org%2Fvolcano-sh%2Fvolcano"><img src="https://travis-ci.org/volcano-sh/volcano.svg?branch=master" alt="Build Status" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://goreportcard.com/badge/github.com/volcano-sh/volcano" alt="Go Report Card" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://img.shields.io/github/repo-size/volcano-sh/volcano.svg" alt="RepoSize" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Freleases"><img src="https://img.shields.io/github/release/volcano-sh/volcano.svg" alt="Release" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fblob%2Fmaster%2FLICENSE"><img src="https://img.shields.io/github/license/volcano-sh/volcano.svg" alt="LICENSE" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fbestpractices.coreinfrastructure.org%2Fprojects%2F3012"><img src="https://bestpractices.coreinfrastructure.org/projects/3012/badge" alt="CII Best Practices" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F">Volcano</a> is a batch system built on Kubernetes. It provides a suite of mechanisms that are commonly required by
many classes of batch &amp; elastic workload including: machine learning/deep learning, bioinformatics/genomics and
other "big data" applications. These types of applications typically run on generalized domain frameworks like
TensorFlow, Spark, Ray, PyTorch, MPI, etc, which Volcano integrates with.</p><p>Volcano builds upon a decade and a half of experience running a wide
variety of high performance workloads at scale using several systems
and platforms, combined with best-of-breed ideas and practices from
the open source community.</p><p>Until June 2021, Volcano has been widely used around the world at a variety of industries such as Internet/Cloud/Finance/
Manufacturing/Medical. More than 20 companies or institutions are not only end users but also active contributors. Hundreds
of contributors are taking active part in the code commit/PR review/issue discussion/docs update and design provision. We
are looking forward to your participation.</p><p><strong>NOTE</strong>: the scheduler is built based on <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubernetes-sigs%2Fkube-batch">kube-batch</a>;
refer to <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fissues%2F241">#241</a> and <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fpull%2F288">#288</a> for more detail.</p><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/cncf-logo.png" alt="cncf_logo" referrerpolicy="no-referrer"></p><p>Volcano is an incubating project of the <a href="https://gitee.com/link?target=https%3A%2F%2Fcncf.io%2F">Cloud Native Computing Foundation</a> (CNCF). Please consider joining the CNCF if you are an organization that wants to take an active role in supporting the growth and evolution of the cloud native ecosystem.</p><h2><a id="user-content-overall-architecture" class="anchor" href="https://gitee.com/kchstack/volcano#overall-architecture"></a>Overall Architecture</h2><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/volcano-architecture.png" alt="volcano" referrerpolicy="no-referrer"></p><h2><a id="user-content-talks" class="anchor" href="https://gitee.com/kchstack/volcano#talks"></a>Talks</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Farchsummit.infoq.cn%2F2019%2Fshenzhen%2Fpresentation%2F1817">Volcano 在 Kubernetes 中運行高性能作業實踐 @ ArchSummit 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fagenda.events.huawei.com%2F2019%2Fcn%2Fminisite%2Fagenda.html%23dayTab%3Dday7%26tagName%3D%257B%2522language%2522%253A%2522Cn%2522%257D%26seminarId%3D1743">Volcano：基於雲原生的高密計算解決方案 @ Huawei Connection 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUaZi">Improving Performance of Deep Learning Workloads With Volcano @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUajv">Batch Capability of Kubernetes Intro @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li></ul><h2><a id="user-content-ecosystem" class="anchor" href="https://gitee.com/kchstack/volcano#ecosystem"></a>Ecosystem</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Fspark-on-k8s-operator%2Fblob%2Fmaster%2Fdocs%2Fvolcano-integration.md">spark-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.kubeflow.org%2Fdocs%2Fuse-cases%2Fjob-scheduling%2F">kubeflow/tf-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubeflow%2Farena%2Fblob%2Fmaster%2Fdocs%2Ftraining%2Fvolcanojob%2Fvolcanojob.md">kubeflow/arena</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fmpi">Horovod/MPI</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fpaddlepaddle">paddlepaddle</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbroadinstitute%2Fcromwell%2Fblob%2Fdevelop%2Fdocs%2Fbackends%2FVolcano.md">cromwell</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fray-project.github.io%2Fkuberay%2Fguidance%2Fvolcano-integration">KubeRay</a></li></ul><h2><a id="user-content-quick-start-guide" class="anchor" href="https://gitee.com/kchstack/volcano#quick-start-guide"></a>Quick Start Guide</h2><h3><a id="user-content-prerequisites" class="anchor" href="https://gitee.com/kchstack/volcano#prerequisites"></a>Prerequisites</h3><ul><li>Kubernetes 1.12+ with CRD support</li></ul><p>You can try Volcano by one of the following two ways.</p><p>Note:</p><ul><li>For Kubernetes v1.17+ use CRDs under config/crd/bases (recommended)</li><li>For Kubernetes versions &lt; v1.16 use CRDs under config/crd/v1beta1 (deprecated)</li></ul><h3><a id="user-content-install-with-yaml-files" class="anchor" href="https://gitee.com/kchstack/volcano#install-with-yaml-files"></a>Install with YAML files</h3><p>Install Volcano on an existing Kubernetes cluster. This way is both available for x86_64 and arm64 architecture.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">kubectl apply -f https://raw.githubusercontent.com/volcano-sh/volcano/master/installer/volcano-development.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Enjoy! Volcano will create the following resources in <code>volcano-system</code> namespace.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">NAME                                       READY   STATUS      RESTARTS   AGE</span><span id="LC2" class="line">pod/volcano-admission-5bd5756f79-dnr4l     1/1     Running     0          96s</span><span id="LC3" class="line">pod/volcano-admission-init-4hjpx           0/1     Completed   0          96s</span><span id="LC4" class="line">pod/volcano-controllers-687948d9c8-nw4b4   1/1     Running     0          96s</span><span id="LC5" class="line">pod/volcano-scheduler-94998fc64-4z8kh      1/1     Running     0          96s</span><span id="LC6" class="line"></span><span id="LC7" class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><span id="LC8" class="line">service/volcano-admission-service   ClusterIP   10.98.152.108   &lt;none&gt;        443/TCP   96s</span><span id="LC9" class="line"></span><span id="LC10" class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><span id="LC11" class="line">deployment.apps/volcano-admission     1/1     1            1           96s</span><span id="LC12" class="line">deployment.apps/volcano-controllers   1/1     1            1           96s</span><span id="LC13" class="line">deployment.apps/volcano-scheduler     1/1     1            1           96s</span><span id="LC14" class="line"></span><span id="LC15" class="line">NAME                                             DESIRED   CURRENT   READY   AGE</span><span id="LC16" class="line">replicaset.apps/volcano-admission-5bd5756f79     1         1         1       96s</span><span id="LC17" class="line">replicaset.apps/volcano-controllers-687948d9c8   1         1         1       96s</span><span id="LC18" class="line">replicaset.apps/volcano-scheduler-94998fc64      1         1         1       96s</span><span id="LC19" class="line"></span><span id="LC20" class="line">NAME                               COMPLETIONS   DURATION   AGE</span><span id="LC21" class="line">job.batch/volcano-admission-init   1/1           48s        96s</span><span id="LC22" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-install-from-code" class="anchor" href="https://gitee.com/kchstack/volcano#install-from-code"></a>Install from code</h3><p>If you don't have a kubernetes cluster, try one-click install from code base:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">./hack/local-up-volcano.sh</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>This way is only available for x86_64 temporarily.</p><h3><a id="user-content-install-monitoring-system" class="anchor" href="https://gitee.com/kchstack/volcano#install-monitoring-system"></a>Install monitoring system</h3><p>If you want to get prometheus and grafana volcano dashboard after volcano installed, try following commands:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">make <span class="nv">TAG</span><span class="o">=</span>latest generate-yaml</span><span id="LC2" class="line">kubectl create <span class="nt">-f</span> _output/release/volcano-monitoring-latest.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-kubernetes-compatibility" class="anchor" href="https://gitee.com/kchstack/volcano#kubernetes-compatibility"></a>Kubernetes compatibility</h2><table><thead><tr><th></th><th>Kubernetes 1.17</th><th>Kubernetes 1.18</th><th>Kubernetes 1.19</th><th>Kubernetes 1.20</th><th>Kubernetes 1.21</th><th>Kubernetes 1.22</th><th>Kubernetes 1.23</th><th>Kubernetes 1.24</th><th>Kubernetes 1.25</th></tr></thead><tbody><tr><td>Volcano v1.6</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>Volcano v1.7</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Volcano HEAD (master)</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr></tbody></table><p>Key:</p><ul><li><code>✓</code> Volcano and the Kubernetes version are exactly compatible.</li><li><code>+</code> Volcano has features or API objects that may not be present in the Kubernetes version.</li><li><code>-</code> The Kubernetes version has features or API objects that Volcano can't use.</li></ul><h2><a id="user-content-meeting" class="anchor" href="https://gitee.com/kchstack/volcano#meeting"></a>Meeting</h2><p>Community weekly meeting for Asia: 15:00 - 16:00 (UTC+8) Friday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community biweekly meeting for America: 08:30 - 09:30 (UTC-8) Thursday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community meeting for Europe is ongoing on demand now. If you have some ideas or topics to discuss, please leave message
in the <a href="https://gitee.com/link?target=https%3A%2F%2Fcloud-native.slack.com%2Farchives%2FC011GJDQS0N">slack</a>. Maintainers will contact with you and book an open meeting for that.</p><p>Resources:</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1YLbF8zjZBiR9PbXQPB22iuc_L0Oui5A1lddVfRnZrqs%2Fedit">Meeting notes and agenda</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fzoom.us%2Fj%2F91804791393">Meeting link</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%2Fembed%3Fsrc%3Dvolcano.sh.bot%40gmail.com">Meeting Calendar</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%3Fcid%3Ddm9sY2Fuby5zaC5ib3RAZ21haWwuY29t">Subscribe</a></li></ul><h2><a id="user-content-contact" class="anchor" href="https://gitee.com/kchstack/volcano#contact"></a>Contact</h2><p>If you have any question, feel free to reach out to us in the following ways:</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano-sh.slack.com">Volcano Slack Channel</a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgroups.google.com%2Fforum%2F%23%21forum%2Fvolcano-sh">Mailing List</a></p>]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/volcano</guid>
            <link>https://gitee.com/kchstack/volcano</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 深入淺出線程池]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>一、線程</span></span></span></h1><span id="OSC_h2_2"></span><h2><span><span><span style="color:#333333">1、什麼是線程 </span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>線程</span></strong></span></span><span><span><span style="color:#333333">(thread) 是操作系統能夠進行運算調度的最小單位。它被包含在進程之中，是進程中的實際，運作單位。一條線程指的是進程中一個單一順序的控制流，一個進程中可以併發多個線程，每條線，程並行執行不同的任務。 </span></span></span></p><span id="OSC_h2_3"></span><h2><span><span><span style="color:#333333">2、如何創建線程</span></span></span></h2><span id="OSC_h3_4"></span><h3><span><span><span>2.1、JAVA 中創建線程</span></span></span></h3><pre><code><span><span><span style="color:#708090">/**
 * 繼承 Thread 類，重寫 run 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"myThread..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 實現 Runnable 接口，實現 run 方法 
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"MyRunnable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 實現 Callable 接口，指定返回類型，實現 call 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"MyCallable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><span id="OSC_h3_5"></span><h3><span><span><span>2.2、測試一下</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span> thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...main</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...Thread-0</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span> myRunnable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread1 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>myRunnable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    myRunnable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...main</span></span><span><span>
    thread1</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...Thread-1</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span> myCallable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;String&gt;</span></span><span><span> futureTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread2 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread2</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...main</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...Thread-2</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_6"></span><h3><span><span><span>2.3、問題</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">既然我們創建了線程，那為何我們直接調用方法和我們調用 start() 方法的結果不同?new Thread() 是否真實創建了線程? </span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><span style="color:#333333">2.4、問題分析</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">我們直接調用方法，可以看到是執行的主線程，而調用 start() 方法就是開啓了新線程，那説明 new Thread() 並沒有創建線程，而是在 start() 中創建了線程。 </span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">那我們看下 Thread 類 start() 方法: </span></span></span></p><pre><code><span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//Thread 類實現了 Runnalbe 接口，實現了 run() 方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> target</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">synchronized</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//可以看到，start() 方法真實的調用時 start0() 方法 </span></span><span><span>
            started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">native</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//start0() 是一個 native 方法，由 JVM 調用底層操作系統，開啓一個線程，由操作系統過統一調度 </span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>target </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
             target</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//操作系統在執行新開啓的線程時，回調 Runnable 接口的 run() 方法，執行我們預設的線程任務</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_8"></span><h3><span><span><span>2.5、總結</span></span></span></h3><div><span style="color:#333333">1.</span><span><span><span><span style="color:#333333">JAVA 不能直接創建線程執行任務，而是通過創建 Thread 對象調用操作系統開啓線程，在由操作系，統回調 Runnable 接口的 run() 方法執行任務; </span></span></span></span></div><div><span style="color:#333333">2.</span><span><span><span><span style="color:#333333">實現 Runnable 的方式，將線程實際要執行的回調任務單獨提出來了，實現線程的啓動與回調任務，解耦; </span></span></span></span></div><div><span style="color:#333333">3.</span><span><span><span><span style="color:#333333">實現 Callable 的方式，通過 Future 模式不但將線程的啓動與回調任務解耦，而且可以在執行完成後，獲取到執行的結果; </span></span></span></span></div><span id="OSC_h1_9"></span><h1><span><span><span style="color:#333333">二、多線程</span></span></span></h1><span id="OSC_h2_10"></span><h2><span><span><span>1、什麼是多線程</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>多線程</span></strong></span></span><span><span><span style="color:#333333">(multithreading)，是指從軟件或者硬件上實現多個線程併發執行的技術。同一個線程只，能處理完一個任務在處理下一個任務，有時我們需要多個任務同時處理，這時，我們就需要創建多，個線程來同時處理任務。 </span></span></span></p><span id="OSC_h2_11"></span><h2><span><span><span style="color:#333333">2、多線程有什麼好處</span></span></span></h2><span id="OSC_h3_12"></span><h3><span><span><span>2.1、串行處理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每個任務執行 2 秒 </span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//處理執行結果</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//執行結果</span></span><span><span>
start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">10043</span></span></span></code></pre><span id="OSC_h3_13"></span><h3><span><span><span>2.2、並行處理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">List</span></span><span><span>&lt;Future&gt;</span></span><span><span> list </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayList</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span> callable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每個任務執行 2 秒 </span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span style="color:#999999">(</span></span><span><span>callable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
        list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
    
    list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">forEach</span></span><span><span style="color:#999999">(</span></span><span><span>future </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>future</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//處理執行結果 } catch (Exception e) {</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//執行結果</span></span><span><span>
 start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2005</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_14"></span><h3><span><span><span>2.3、總結</span></span></span></h3><div><span>1.</span><span><span><span><span>多線程可以把一個任務拆分為幾個子任務，多個子任務可以併發執行，每一個子任務就是一個線程。</span></span></span></span></div><div><span>2.</span><span><span><span><span>多線程是為了同步完成多項任務，不是為了提高運行效率，而是為了提高資源使用效率來提高系統，的效率。</span></span></span></span></div><span id="OSC_h3_15"></span><h3><span><span><span>2.4、多線程的問題</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上面示例中我們可以看到，如果每來一個任務，我們就創建一個線程，有很多任務的情況下，我們，會創建大量的線程，可能會導致系統資源的耗盡。同時，我們知道線程的執行是需要搶佔 CPU 資源，的，那如果有太多的線程，就會導致大量時間用在線程切換的開銷上。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>再有，每來一個任務都需要創建一個線程，而創建一個線程需要調用操作系統底層方法，開銷較，大，而線程執行完成後就被回收了。在需要大量線程的時候，創建線程的時間就花費不少了。</span></span></span></p><span id="OSC_h1_16"></span><h1><span><span><span>三、線程池</span></span></span></h1><span id="OSC_h2_17"></span><h2><span><span><span>1、如何設計一個線程池</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>由於多線程的開發存在上述的一些問題，那我們是否可以設計一個東西來避免這些問題呢?當然可以! 線程池就是為瞭解決這些問題而生的。那我們該如何設計一個線程池來解決這些問題呢?或者説，一個線程池該具備什麼樣的功能?</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>1.1、線程池基本功能</span></span></span></h3><div><span>1.</span><span><span><span><span>多線程會創建大量的線程耗盡資源，那線程池應該對線程數量有所限制，可以保證不會耗盡系統資，源;</span></span></span></span></div><div><span>2.</span><span><span><span><span>每次創建新的線程會增加創建時的開銷，那線程池應該減少線程的創建，儘量複用已創建好的線，程;</span></span></span></span></div><span id="OSC_h3_19"></span><h3><span><span><span>1.2、線程池面臨問題</span></span></span></h3><div><span>1.</span><span><span><span><span>我們知道線程在執行完自己的任務後就會被回收，那我們如何複用線程?</span></span></span></span></div><div><span>2.</span><span><span><span><span>我們指定了線程的最大數量，當任務數超出線程數時，我們該如何處理?</span></span></span></span></div><span id="OSC_h3_20"></span><h3><span><span><span>1.3、創新源於生活</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>先假設一個場景:假設我們是一個物流公司的管理人員，要配送的貨物就是我們的任務，貨車就是，我們配送工具，我們當然不能有多少貨物就準備多少貨車。那當顧客源源不斷的將貨物交給我們配，送，我們該如何管理才能讓公司經營的最好呢?</span></span></span></p><div><span>1.</span><span><span><span><span>最開始貨物來的時候，我們還沒有貨車，每批要運輸的貨物我們都要購買一輛車來運輸;</span></span></span></span></div><div><span>2.</span><span><span><span><span>當貨車運輸完成後，暫時還沒有下一批貨物到達，那貨車就在倉庫停着，等有貨物來了立馬就可以，運輸;</span></span></span></span></div><div><span>3.</span><span><span><span><span>當我們有了一定數量的車後，我們認為已經夠用了，那後面就不再買車了，這時要是由新的貨物來，了，我們就會讓貨物先放倉庫，等有車回來在配送;</span></span></span></span></div><div><span>4.</span><span><span><span><span>當 618 大促來襲，要配送的貨物太多，車都在路上，倉庫也都放滿了，那怎麼辦呢?我們就選擇臨，時租一些車來幫忙配送，提高配送的效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>但是貨物還是太多，我們增加了臨時的貨車，依舊配送不過來，那這時我們就沒辦法了，只能讓發，貨的客戶排隊等候或者乾脆不接受了;</span></span></span></span></div><div><span>6.</span><span><span><span><span>大促圓滿完成後，累計的貨物已經配送完成了，為了降低成本，我們就將臨時租的車都還了;</span></span></span></span></div><span id="OSC_h3_21"></span><h3><span><span><span>1.4、技術源於創新</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>基於上述場景，物流公司就是我們的線程池、貨物就是我們的線程任務、貨車就是我們的線程。我，們如何設計公司的管理貨車的流程，就應該如何設計線程池管理線程的流程。</span></span></span></p><div><span>1.</span><span><span><span><span>當任務進來我們還沒有線程時，我們就該創建線程執行任務;</span></span></span></span></div><div><span>2.</span><span><span><span><span>當線程任務執行完成後，線程不釋放，等着下一個任務進來後接着執行;</span></span></span></span></div><div><span>3.</span><span><span><span><span>當創建的線程數量達到一定量後，新來的任務我們存起來等待空閒線程執行，這就要求線程池有個，存任務的容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>當容器存滿後，我們需要增加一些臨時的線程來提高處理效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>當增加臨時線程後依舊處理不了的任務，那就應該將此任務拒絕;</span></span></span></span></div><div><span>6.</span><span><span><span><span>當所有任務執行完成後，就應該將臨時的線程釋放掉，以免增加不必要的開銷;</span></span></span></span></div><span id="OSC_h2_22"></span><h2><span><span><span>2、線程池具體分析</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中，我們講了該如何設計一個線程池，下面我們看看大神是如何設計的；</span></span></span></p><span id="OSC_h3_23"></span><h3><span><span><span>2.1、 JAVA 中的線程池是如何設計的</span></span></span></h3><span id="OSC_h4_24"></span><h4><span><span><span>2.1.1、 線程池設計</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>看下線程池中的屬性，瞭解線程池的設計。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractExecutorService</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//線程池的打包控制狀態,用高 3 位來表示線程池的運行狀態,低 29 位來表示線程池中工作線程的數量 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span> ctl </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>RUNNING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//值為 29,用來表示偏移量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> COUNT_BITS </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Integer</span></span><span><span style="color:#999999">.</span></span><span><span>SIZE </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池的最大容量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池的運行狀態，總共有 5 個狀態，用高 3 位來表示 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> RUNNING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//接受新任務並處理阻塞隊列中的任務 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不接受新任務但會處理阻塞隊列中的任務  </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不會接受新任務，也不會處理阻塞隊列中的任務，並且中斷正在運行的任務</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TIDYING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//所有任務都已終止， 工作線程數量為 0，即將要執行 terminated() 鈎子方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TERMINATED </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// terminated() 方法已經執行結束</span></span><span><span></span></span><span><span style="color:#708090">//任務緩存隊列，用來存放等待執行的任務</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//全局鎖，對線程池狀態等屬性修改時需要使用這個鎖</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池中工作線程的集合，訪問和修改需要持有全局鎖</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span> workers </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 終止條件</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Condition</span></span><span><span> termination </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newCondition</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程池中曾經出現過的最大線程數 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//已完成任務的數量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTaskCount</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程工廠</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//任務拒絕策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程存活時間</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//是否允許核心線程超時</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> allowCoreThreadTimeOut</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//核心池大小，若 allowCoreThreadTimeOut 被設置，核心線程全部空閒超時被回收的情況下會為 0 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//最大池大小，不得超過 CAPACITY</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//默認的任務拒絕策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> defaultHandler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AbortPolicy</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//運行權限相關</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span> shutdownPerm </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"modifyThread"</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結一下：以上線程池的設計可以看出，線程池的功能還是很完善的。</span></span></span></p><div><span>1.</span><span><span><span><span>提供了線程創建、數量及存活時間等的管理;</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供了線程池狀態流轉的管理;</span></span></span></span></div><div><span>3.</span><span><span><span><span>提供了任務緩存的各種容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供了多餘任務的處理機制;</span></span></span></span></div><div><span>5.</span><span><span><span><span>提供了簡單的統計功能;</span></span></span></span></div><span id="OSC_h4_25"></span><h4><span><span><span>2.1.2、線程池構造函數</span></span></span></h4><pre><code><span><span><span style="color:#708090">//構造函數</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//核心線程數 </span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//最大允許線程數 </span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//線程存活時間 </span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span> unit</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//存活時間單位 </span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//任務緩存隊列</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//線程工廠 </span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//拒絕策略 </span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalArgumentException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> unit</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">toNanos</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結一下：</span></span></span></p><div><span>1.</span><span><span><span><span>構造函數告訴了我們可以怎樣去適用線程池，線程池的哪些特性是我們可以控制的;</span></span></span></span></div><span id="OSC_h4_26"></span><h4><span><span><span>2.1.3、線程池執行</span></span></span></h4><p><span><span><span>2.1.3.1、提交任務方法</span></span></span></p><div><span>•</span><span><span><span><span>public void execute(Runnable command);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future&lt;?&gt; submit(Runnable task);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Runnable task, T result);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Callable task);</span></span></span></span></div><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">Future</span></span><span><span>&lt;?&gt;</span></span><span><span></span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">RunnableFuture</span></span><span><span>&lt;Void&gt;</span></span><span><span> ftask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">newTaskFor</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">execute</span></span><span><span style="color:#999999">(</span></span><span><span>ftask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> ftask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>可以看到 submit 方法的底層調用的也是 execute 方法，所以我們這裏只分析 execute 方法；</span></span></span></p><pre><code><span><span><span>    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        
        int c = ctl.get();
        //第一步：創建核心線程
        if (workerCountOf(c) &lt; corePoolSize) {  //worker 數量小於 corePoolSize
            if (addWorker(command, true))       //創建 worker
                return;
            c = ctl.get();
        }
        //第二步：加入緩存隊列
        if (isRunning(c) &amp;&amp; workQueue.offer(command)) { //線程池處於 RUNNING 狀態，將任務加入 workQueue 任務緩存隊列
            int recheck = ctl.get();    
            if (! isRunning(recheck) &amp;&amp; remove(command))    //雙重檢查，若線程池狀態關閉了，移除任務
                reject(command);
            else if (workerCountOf(recheck) == 0)       //線程池狀態正常，但是沒有線程了，創建 worker
                addWorker(null, false);
        }
        //第三步：創建臨時線程
        else if (!addWorker(command, false))
            reject(command);
    }</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結一下：execute() 方法主要功能：</span></span></span></p><div><span>1.</span><span><span><span><span>核心線程數量不足就創建核心線程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>核心線程滿了就加入緩存隊列；</span></span></span></span></div><div><span>3.</span><span><span><span><span>緩存隊列滿了就增加非核心線程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>非核心線程也滿了就拒絕任務；</span></span></span></span></div><p><span><span><span>2.1.3.2、創建線程</span></span></span></p><pre><code><span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> core</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        retry</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//等價於：rs&gt;=SHUTDOWN &amp;&amp; (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty())</span></span><span><span></span></span><span><span style="color:#708090">//線程池已關閉，並且無需執行緩存隊列中的任務，則不創建</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span>
                   firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
                    wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>core </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndIncrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//CAS 增加線程數</span></span><span><span></span></span><span><span style="color:#0077aa">break</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span>
                c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// Re-read ctl</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span> rs</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// else CAS failed due to workerCount change; retry inner loop</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#708090">//上面的流程走完，就可以真實開始創建線程了</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span>firstTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//這裏創建了線程</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// Recheck while holding lock.</span></span><span><span></span></span><span><span style="color:#708090">// Back out on ThreadFactory failure or if</span></span><span><span></span></span><span><span style="color:#708090">// shut down before lock acquired.</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
                    </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isAlive</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// precheck that t is startable</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalThreadStateException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//這裏將線程加入到線程池中</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span>
                            largestPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> s</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workerAdded</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加成功，啓動線程</span></span><span><span>
                    workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorkerFailed</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加線程失敗操作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結：addWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>增加線程數；</span></span></span></span></div><div><span>2.</span><span><span><span><span>創建線程 Worker 實例加入線程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>加入完成開啓線程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>啓動失敗則回滾增加流程；</span></span></span></span></div><p><span><span><span>2.1.3.3、工作線程的實現</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span></span></span><span><span style="color:#708090">//Worker 類是 ThreadPoolExecutor 的內部類</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractQueuedSynchronizer</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//持有實際線程</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker 所對應的第一個任務，可能為空</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//記錄執行任務數</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">setState</span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// inhibit interrupts until runWorker</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getThreadFactory</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//當前線程調用 ThreadPoolExecutor 中的 runWorker 方法，在這裏實現的線程複用</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>繼承 AQS，實現了不可重入鎖</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結：工作線程 Worker 類主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>此類持有一個工作線程，不斷處理拿到的新任務，持有的線程即為可複用的線程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>此類可看作一個適配類，在 run() 方法中真實調用 runWorker() 方法不斷獲取新任務，完成線程複用；</span></span></span></span></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>2.1.3.4、線程的複用</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//ThreadPoolExecutor 中的 runWorker 方法，在這裏實現的線程複用</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> wt </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// allow interrupts</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//標識線程是否異常終止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">while</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//這裏會不斷從任務隊列獲取任務並執行</span></span><span><span>
                w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程是否需要中斷</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isInterrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupt</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">beforeExecute</span></span><span><span style="color:#999999">(</span></span><span><span>wt</span></span><span><span style="color:#999999">,</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行任務前的 Hook 方法，可自定義</span></span><span><span></span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        task</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行實際的任務</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">RuntimeException</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Error</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Error</span></span><span><span style="color:#999999">(</span></span><span><span>x</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">afterExecute</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span> thrown</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行任務後的 Hook 方法，可自定義</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行完成後，將當前線程中的任務制空，準備執行下一個任務</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">;</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
            completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">,</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//線程執行完成後的清理工作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小結：runWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>循環從緩存隊列中獲取新的任務，直到沒有任務為止；</span></span></span></span></div><div><span>2.</span><span><span><span><span>使用 worker 持有的線程真實執行任務；</span></span></span></span></div><div><span>3.</span><span><span><span><span>任務都執行完成後的清理工作；</span></span></span></span></div><p><span><span><span>2.1.3.5、隊列中獲取待執行任務</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//標識當前線程是否超時未能獲取到 task 對象</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Check if queue empty only if necessary.</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Are workers subject to culling?</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> timedOut</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndDecrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//若線程存活時間超時，則 CAS 減去線程數量</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">poll</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>NANOSECONDS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#708090">//允許超時回收則阻塞等待</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">take</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不允許則直接獲取，沒有就返回 null</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> r</span></span><span><span style="color:#999999">;</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">InterruptedException</span></span><span><span> retry</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小結：getTask() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>實際在緩存隊列中獲取待執行的任務；</span></span></span></span></div><div><span>2.</span><span><span><span><span>在這裏管理線程是否要阻塞等待，控制線程的數量；</span></span></span></span></div><p><span><span><span>2.1.3.6、清理工作</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// If abrupt, then workerCount wasn't adjusted</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
        mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            completedTaskCount </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span>
            workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">remove</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//移除執行完成的線程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每次回收完一個線程後都嘗試終止線程池</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateLessThan</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//到這裏説明線程池沒有終止</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> min</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// replacement not needed</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//異常終止線程的話，需要在常見一個線程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小結：processWorkerExit() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>真實完成線程池線程的回收；</span></span></span></span></div><div><span>2.</span><span><span><span><span>調用嘗試終止線程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>保證線程池正常運行；</span></span></span></span></div><p><span><span><span>2.1.3.7、嘗試終止線程池</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//若線程池正在執行、線程池已終止、線程池還需要執行緩存隊列中的任務時，返回</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isRunning</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> TIDYING</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行到這裏，線程池為 SHUTDOWN 且無待執行任務，或 STOP 狀態</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">interruptIdleWorkers</span></span><span><span style="color:#999999">(</span></span><span><span>ONLY_ONE</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//只中斷一個線程</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//執行到這裏，線程池已經沒有可用線程了，可以終止了</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">compareAndSet</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TIDYING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//CAS 設置線程池終止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">terminated</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//執行鈎子方法</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">set</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TERMINATED</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//這裏將線程池設為終態</span></span><span><span>
                        termination</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">signalAll</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// else retry on failed CAS</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小結：tryTerminate() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>實際嘗試終止線程池；</span></span></span></span></div><div><span>2.</span><span><span><span><span>終止成功則調用鈎子方法，並且將線程池置為終態。</span></span></span></span></div><span id="OSC_h3_27"></span><h3><span><span><span>2.2、JAVA 線程池總結</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通過對 JAVA 線程池的具體分析我們可以看出，雖然流程看似複雜，但其實有很多內容都是狀態重複校驗、線程安全的保證等內容，其主要的功能與我們前面所提出的設計功能一致，只是額外增加了一些擴展，下面我們簡單整理下線程池的功能；</span></span></span></p><p><span><span><span>2.2.1、主要功能</span></span></span></p><div><span>1.</span><span><span><span><span>線程數量及存活時間的管理；</span></span></span></span></div><div><span>2.</span><span><span><span><span>待處理任務的存儲功能；</span></span></span></span></div><div><span>3.</span><span><span><span><span>線程複用機制功能；</span></span></span></span></div><div><span>4.</span><span><span><span><span>任務超量的拒絕功能；</span></span></span></span></div><div>
  &nbsp; 
</div><p><span><span><span>2.2.2、擴展功能</span></span></span></p><div><span>1.</span><span><span><span><span>簡單的執行結果統計功能；</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供線程執行異常處理機制；</span></span></span></span></div><div><span>3.</span><span><span><span><span>執行前後處理流程自定義；</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供線程創建方式的自定義；</span></span></span></span></div><p><span><span><span>2.2.3、流程總結</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通過對 JAVA 線程池任務提交流程的分析我們可以看出，線程池執行的簡單流程如下圖所示；</span></span></span></p><div><img alt="" height="229" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-18-06DlWGyY11FjcoyluS.png" width="949" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_28"></span><h3><span><span><span>2.3、JAVA 線程池使用</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>線程池基本使用驗證上述流程：</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//創建線程池</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span> threadPoolExecutor </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">100</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>SECONDS</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayBlockingQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//加入 4 個任務，小於核心線程，應該只有 4 個核心線程，隊列為 0</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 4</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 個任務，超過核心線程，但是沒有超過核心線程 + 緩存隊列容量，應該 5 個核心線程，隊列為 3</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 3</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 個任務，隊列滿了，應該 5 個熱核心線程，隊列 5 個，非核心線程 2 個</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 7</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 個任務，核心線程滿了，應該 5 個熱核心線程，隊列 5 個，非核心線程 5 個，最後一個拒絕</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Exception</span></span><span><span> e</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                e</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">printStackTrace</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//java.util.concurrent.RejectedExecutionException</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 10</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getTaskCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//共執行 15 個任務</span></span><span><span></span></span><span><span style="color:#708090">//執行完成，休眠 15 秒，非核心線程釋放，應該 5 個核心線程，隊列為 0</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1500</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//關閉線程池</span></span><span><span>
        threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">shutdown</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿作者：京東零售，秦浩然&nbsp;</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>來源：京東雲開發者社區，轉載請註明來源</span></span></span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10112678</guid>
            <link>https://my.oschina.net/u/4090830/blog/10112678</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[全棧框架 Remix v2.0.1 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Remix 是一個由 React Router 開發團隊所開發的基於 React 和 Node 的全棧框架，以解決開發者在用 React 開發時面臨的一些棘手問題。v2.0.1 現已發佈，具體更新內容包括：</span></p><p><strong>Patch Changes</strong></p><ul><li>修復使用 pnpm 時 MDX 文件的類型 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7491" target="_blank">#7491</a>&nbsp;)</li><li>更新<code>getDependenciesToBundle</code>以處理沒有 main exports 的 ESM 包 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7272" target="_blank">#7272</a>&nbsp;) 
  <ul><li>注意，這些包必須在其<code>exports</code>字段中公開<code>package.json</code>，以便可以解析它們的路徑</li></ul></li><li>修復<code>serverBuildPath</code>擴展名為<code>.cjs</code>的服務器構建（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7180" target="_blank">#7180</a>）</li><li>修復使用<code>remix-serve</code>和手動模式 (<code>remix dev --manual</code>) 的 CJS 項目的 HMR (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7487" target="_blank">#7487</a>&nbsp;) 
  <ul><li>通過顯式破壞<code>require</code>緩存，<code>remix-serve</code>現在可以正確地重新導入 CJS 中的新服務器更改</li><li>ESM 項目已經正常運行，不受此影響。</li></ul></li><li>修復因部分寫入服務器構建而導致的錯誤（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7470" target="_blank">#7470</a>） 
  <ul><li>以前，有可能在新服務器構建完全編寫完成之前觸發應用程序服務器代碼的重新導入。重新導入部分已編寫的服務器構建會導致<code>build.assets</code>未定義和讀取<code>build.assets.version</code>時崩潰等相關問題。</li></ul></li><li>為<code>UIMatch</code>的<code>handle</code>字段添加第二個泛型（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7464" target="_blank">#7464</a>）</li><li>修復通過<code>route.lazy</code>加載 <span style="background-color:#ffffff; color:#1f2328">resource routes&nbsp;</span>的問題（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7498" target="_blank">#7498</a>）</li><li>當提交至無操作的路由時，拋出語義正確的 405<code>ErrorResponse</code>而非<code>Error</code>(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7423" target="_blank">#7423</a>&nbsp;)</li><li>更新到最新版本<code>@remix-run/web-fetch</code>（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7477" target="_blank">#7477</a>）</li><li>在生成文件會話存儲 ID 時，將<code>crypto.randomBytes</code>改為<code>crypto.webcrypto.getRandomValues</code>&nbsp;(&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7203" target="_blank">#7203</a>&nbsp;)</li><li>使用&nbsp;native<code>Blob</code>類而不是 polyfill (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Fpull%2F7217" target="_blank">#7217</a>&nbsp;)</li></ul><p>更新説明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fremix-run%2Fremix%2Freleases%2Ftag%2Fremix%25402.0.1" target="_blank">https://github.com/remix-run/remix/releases/tag/remix%402.0.1</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259282/remix-2-0-1-released</guid>
            <link>https://www.oschina.net/news/259282/remix-2-0-1-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Remix 2.0 正式發佈，現代化全棧 Web 框架！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>9 月 16 日，全棧 Web 框架 Remix 正式發佈了 2.0 版本，Remix 團隊在發佈 1.0 版本後經過近 2 年的持續努力，發佈了 19 個次要版本、100 多個補丁版本，並解決了數千個問題和拉取請求，終於迎來了第二個主要版本！</p><blockquote><p>Remix 具有以下特性：</p><ul><li><p>追求速度、用戶體驗（UX），支持任何 SSR/SSG 等</p></li><li><p>基於 Web 基礎技術，如 HTML/CSS 與 HTTP 以及 Web Fecth API，在絕大部分情況可以不依賴於 JavaScript 運行，所以可以運行在任何環境下，如 Web Browser、Cloudflare Workers、Serverless 或者 Node.js 等</p></li><li><p>客戶端與服務端一致的開發體驗，客戶端代碼與服務端代碼寫在一個文件裏，無縫進行數據交互，同時基於 TypeScript，類型定義可以跨客戶端與服務端共用</p></li><li><p>內置文件即路由、動態路由、嵌套路由、資源路由等</p></li><li><p>去掉 Loading、骨架屏等任何加載狀態，頁面中所有資源都可以預加載（Prefetch），頁面幾乎可以立即加載</p></li><li><p>告別以往瀑布式（Waterfall）的數據獲取方式，數據獲取在服務端並行（Parallel）獲取，生成完整 HTML 文檔，類似 React 的併發特性</p></li><li><p>提供開發網頁需要所有狀態，開箱即用；提供所有需要使用的組件，包括 <code>&lt;Links&gt;</code> 、<code>&lt;Link&gt;</code>、 <code>&lt;Meta&gt;</code> 、<code>&lt;Form&gt;</code> 、<code>&lt;Script/&gt;</code> ，用於處理元信息、腳本、CSS、路由和表單相關的內容</p></li><li><p>內置錯誤處理，針對非預期錯誤處理的 <code>&lt;ErrorBoundary&gt;</code> 和開發者拋出錯誤處理的 <code>&lt;CatchBoundary&gt;</code></p></li></ul></blockquote><p>Remix 是一個由 React Router 開發團隊所開發的基於 React 和 TypeScript 的全棧框架。2021 年 11 月，Remix 正式開源，至今已在 Github 上獲得了 24.6k star。Remix 正式開源時，引發了前端圈不小的關注，其被普遍認為是 Next.js 的強勁對手，那時隔兩年，它和 Next.js 之間的「競爭」怎麼樣了呢？</p><p>目前，Next.js 擁有 112k star，是 Remix 的近 5 倍。Next.js 周下載量 279 萬，而 Remix 僅有 1.4 萬，Next.js 是 Remix 的近 200 倍。可見，Remix 並沒有像大家預料的那樣，成為 Next.js 的有力競爭對手，在開發者社區中只有較小的市場份額。儘管如此，Remix 仍然吸引了一些開發者，並且在特定領域或項目中有其優勢和適用性。</p><p>下面就來看看 Remix 2.0 都有哪些更新！</p><h2>v1.0 以來的更新</h2><ul><li><p>v1.8 和 v1.10 中，將 Remix 與 React Router v6 進行了對齊。當開始開發 Remix 時，承諾它將使 React Router 變得更好。這個版本真正實現了這一承諾，並將兩個庫都對齊到使用相同的底層依賴。</p></li><li><p>在 v1.11 中，發佈了"promises over the wire"，即延遲加載模塊。現在，如果真的想在 Remix 應用中添加 loading 圖標，可以這麼做了！</p></li><li><p>在 v1.11 中，添加了"flat"路由，簡化了使用嵌套佈局而不需要嵌套目錄的操作，這成為 v2 版本的默認設置。</p></li><li><p>在 v1.13 和 v1.16 中，改進了 Remix 對各種 CSS 策略的支持，包括 PostCSS、CSS 模塊、Vanilla Extract 和 CSS 副作用（全局）導入。</p></li><li><p>在 v1.14 和 v1.18 中，發佈了一個新的開發服務器，支持熱更新（HMR）和熱數據重載（HDR）。這個新的開發服務器成為 v2 版本的默認設置。</p></li><li><p>在 v2 版本中，最重要的亮點之一是全新的<code>create-remix</code>命令行工具體驗。</p></li></ul><h2>v2.0 的更新內容</h2><h3>重大變化</h3><h4>升級的依賴要求</h4><p>Remix v2 已經升級了對 React 和 Node 的最低版本支持，並正式支持以下版本：</p><ul><li><p>React 18</p></li><li><p>Node 18 或更高版本</p></li></ul><h4>移除未來標誌</h4><p>以下未來標誌已被移除，並且它們的行為現在是默認的，現在可以從<code>remix.config.js</code>文件中刪除這些設置。</p><ul><li><p><code>v2_dev</code>，新的開發服務器，具有 HMR + HDR，如果在<code>future.v2_dev</code>中有配置而不僅僅是布爾值（例如，<code>future.v2_dev.port</code>），可以將它們提升到<code>remix.config.js</code>中的根<code>dev</code>對象中。</p></li><li><p><code>v2_errorBoundary</code>，移除了<code>CatchBoundary</code>，改為使用單個<code>ErrorBoundary</code></p></li><li><p><code>v2_headers</code>，修改了嵌套路由場景中的頭部邏輯</p></li><li><p><code>v2_meta</code>，修改了<code>meta()</code>的返回格式</p></li><li><p><code>v2_normalizeFormMethod</code>，將<code>formMethod</code>規範化為大寫</p></li><li><p><code>v2_routeConvention</code>，現在默認情況下，路由使用扁平化路由約定</p></li></ul><h4>重大變更/API 刪除</h4><p>下面列出了 Remix v1 中具有棄用警告的其他重大更改/API 刪除。如果使用的是最新 1.19.3 版本且沒有任何控制枱警告，那麼可能可以繼續執行所有這些操作！</p><p><strong>（1）有破壞性更改/API 移除</strong></p><ul><li><p>remix.config.js</p></li><li><p>將<code>browserBuildDirectory</code>重命名為<code>assetsBuildDirectory</code></p></li><li><p>刪除<code>devServerBroadcastDelay</code></p></li><li><p>將<code>devServerPort</code>重命名為<code>dev.port</code></p></li><li><p>如果在 1.x 版本中選擇此選項，則配置標記將是<code>future.v2_dev.port</code>，但在穩定的 2.x 版本中，它將是<code>dev.port</code></p></li><li><p>將默認的<code>serverModuleFormat</code>從<code>cjs</code>更改為<code>esm</code></p></li><li><p>刪除<code>serverBuildTarget</code></p></li><li><p>將<code>serverBuildDirectory</code>更改為<code>serverBuildPath</code></p></li><li><p>默認情況下不再在服務器上對 Node 內置模塊進行<code>polyfill</code>，必須通過<code>serverNodeBuiltinsPolyfill</code>選擇加入<code>polyfill</code></p></li><li><p>@remix-run/react</p></li><li><p>刪除<code>useTransition</code></p></li><li><p>刪除<code>fetcher.type</code>並壓縮<code>fetcher.submission</code></p></li><li><p><code>&lt;fetcher.Form method="get"&gt;</code>現在更準確地被歸類為<code>state：「loading」</code>，而不是<code>state：「submitting」</code>，以更好地與底層的 GET 請求保持一致</p></li><li><p>要求<code>camelCased</code>版本的<code>imagesrcset/imagesizes</code></p></li></ul><p><strong>（2）沒有棄用警告</strong></p><p>此版本沒能在每個破壞性更改或 API 移除上都收到廢棄警告。以下是可能需要查看的剩餘變更列表，以升級到 v2：</p><ul><li><p>remix.config.js</p></li><li><p>Node 內置模塊不再默認在瀏覽器中進行 polyfill，可以通過<code>browserNodeBuiltinsPolyfill</code>選項選擇加入<code>polyfill</code></p></li><li><p>如果存在配置文件，則<code>PostCSS/Tailwind</code>將默認啓用，可以通過 postcss 和 tailwind 標誌禁用此功能</p></li><li><p>@remix-run/cloudflare</p></li><li><p>刪除<code>createCloudflareKVSessionStorage</code>方法</p></li><li><p>不再支持@cloudflare/workers-types v2 和 v3</p></li><li><p>@remix-run/dev</p></li><li><p>刪除<code>REMIX_DEV_HTTP_ORIGIN</code>，增加<code>REMIX_DEV_ORIGIN</code></p></li><li><p>刪除<code>REMIX_DEV_SERVER_WS_PORT</code>，增加<code>dev.port</code>或<code>--port</code></p></li><li><p>刪除<code>--no-restart/restart</code>標誌，增加<code>--manual/manual</code></p></li><li><p>刪除<code>--scheme/scheme</code>和<code>--host/host</code>，增加<code>REMIX_DEV_ORIGIN</code></p></li><li><p>刪除<code>codemod</code>命令</p></li><li><p>@remix-run/eslint-config</p></li><li><p>刪除<code>@remix-run/eslint-config/jest</code>配置</p></li><li><p>刪除魔法<code>imports</code>的 ESLint 警告</p></li><li><p>@remix-run/netlify</p></li><li><p><code>@remix-run/netlify</code>適配器已被刪除，推薦使用 Netlify 官方適配器</p></li><li><p>@remix-run/node</p></li><li><p>默認不再對<code>fetch</code>進行<code>polyfill</code>，應用需要調用<code>installGlobals()</code>來安裝<code>polyfills</code></p></li><li><p>不再從<code>@remix-run/node</code>導出<code>fetch</code>和相關 API，應用應使用全局命名空間中的版本</p></li><li><p>應用需要調用<code>sourceMapSupport.install()</code>來設置源映射支持</p></li><li><p>@remix-run/react</p></li><li><p>刪除<code>unstable_shouldReload</code>，增加<code>shouldRevalidate</code></p></li><li><p>@remix-run/serve</p></li><li><p>如果 3000 端口被佔用且未指定 PORT，則<code>remix-serve</code>將選擇一個可用的端口</p></li><li><p>集成手動模式</p></li><li><p>刪除未記錄的<code>createApp Node API</code></p></li><li><p>在<code>remix-serve</code>中保留動態 imports 以供外部 bundle 使用</p></li><li><p>@remix-run/vercel</p></li><li><p><code>@remix-run/vercel</code>適配器已被刪除，推薦使用 Vercel 官方提供的功能</p></li><li><p>create-remix</p></li><li><p>停止傳遞<code>isTypeScript</code>給<code>remix.init</code>腳本</p></li><li><p>remix</p></li><li><p>刪除魔法 <code>exports</code></p></li></ul><p><strong>（3）破壞類型變化</strong></p><ul><li><p>從 <code>future.v2_meta</code> 類型中刪除了 <code>V2_</code> 前綴，因為它們現在是默認行為。</p></li><li><p><code>V2_MetaArgs</code> -&gt; <code>MetaArgs</code></p></li><li><p><code>V2_MetaDescriptor</code> -&gt; <code>MetaDescriptor</code></p></li><li><p><code>V2_MetaFunction</code> -&gt; <code>MetaFunction</code></p></li><li><p><code>V2_MetaMatch</code> -&gt; <code>MetaMatch</code></p></li><li><p><code>V2_MetaMatches</code> -&gt; <code>MetaMatches</code></p></li><li><p><code>V2_ServerRuntimeMetaArgs</code> -&gt; <code>ServerRuntimeMetaArgs</code></p></li><li><p><code>V2_ServerRuntimeMetaDescriptor</code> -&gt; <code>ServerRuntimeMetaDescriptor</code></p></li><li><p><code>V2_ServerRuntimeMetaFunction</code> -&gt; <code>ServerRuntimeMetaFunction</code></p></li><li><p><code>V2_ServerRuntimeMetaMatch</code> -&gt; <code>ServerRuntimeMetaMatch</code></p></li><li><p><code>V2_ServerRuntimeMetaMatches</code> -&gt; <code>ServerRuntimeMetaMatches</code></p></li><li><p>以下類型已進行調整，更偏向於使用<code>unknown</code>而不是<code>any</code>，並與底層的 React Router 類型保持一致：</p></li><li><p>將<code>useMatches()</code>的返回類型從<code>RouteMatch</code>改名為<code>UIMatch</code></p></li><li><p>將<code>LoaderArgs</code>/<code>ActionArgs</code>改名為<code>LoaderFunctionArgs</code>/<code>ActionFunctionArgs</code></p></li><li><p>將<code>AppData</code>的類型從<code>any</code>改為<code>unknown</code></p></li><li><p>將<code>Location["state"]</code>（<code>useLocation.state</code>）的類型從<code>any</code>改為<code>unknown</code></p></li><li><p>將<code>UIMatch["data"]</code>（<code>useMatches()[i].data</code>）的類型從<code>any</code>改為<code>unknown</code></p></li><li><p>將<code>UIMatch["handle"]</code>（<code>useMatches()[i].handle</code>）的類型從<code>{ [k: string]: any }</code>改為<code>unknown</code></p></li><li><p>將<code>Fetcher["data"]</code>（<code>useFetcher().data</code>）的類型從<code>any</code>改為<code>unknown</code></p></li><li><p><code>MetaMatch.handle</code>（在<code>meta()</code>函數中使用）的類型從<code>any</code>改為<code>unknown</code></p></li><li><p><code>AppData</code>/<code>RouteHandle</code>不再導出，因為它們只是<code>unknown</code>的別名</p></li></ul><h3>新增功能</h3><ul><li><p>新的<code>create-remix</code>命令行界面工具</p></li><li><p>最顯著的改變是，不再使用下拉菜單選擇模板/堆棧，而是使用<code>--template</code>參數和不斷增長的可用模板列表。</p></li><li><p>新增<code>--overwrite</code>參數</p></li><li><p>支持<code>bun</code>包管理器</p></li><li><p>通過<code>build.mode</code>檢測構建模式</p></li><li><p>支持通過<code>serverNodeBuiltinsPolyfill.globals</code>/<code>browserNodeBuiltinsPolyfill.globals</code>來對 Node 全局對象進行<code>polyfill</code></p></li><li><p>新的<code>redirectDocument</code>實用工具，通過重新加載文檔實現重定向</p></li><li><p>在<code>meta</code>參數中添加<code>error</code>，以便可以渲染錯誤標題等</p></li><li><p><code>unstable_createRemixStub</code>現在支持在 stubbed Remix 路由上添加<code>meta/links</code>函數</p></li><li><p><code>unstable_createRemixStub</code>不再支持在路由上使用<code>element/errorElement</code>屬性。必須使用<code>Component/ErrorBoundary</code>與從 Remix 路由模塊導出的內容匹配。</p></li></ul><h3>其他更新</h3><ul><li><p>Remix 現在在內部使用 React Router 的<code>route.lazy</code>方法在導航時加載路由模塊。</p></li><li><p>刪除了<code>@remix-run/node</code>中的<code>atob/btoa</code> polyfills，改用內置版本。</p></li><li><p>將<code>@remix-run/dev</code>包與<code>@remix-run/css-bundle</code>包的內容解耦。</p></li><li><p>現在，<code>@remix-run/css-bundle</code>包的內容完全由 Remix 編譯器管理。儘管仍然建議 Remix 依賴項共享相同的版本，但這個變化確保在升級<code>@remix-run/dev</code>而不升級<code>@remix-run/css-bundle</code>時沒有運行時錯誤。</p></li><li><p><code>remix-serve</code>現在將選擇一個空閒的端口（如果 3000 端口被佔用）。</p></li><li><p>如果設置了 PORT 環境變量，r<code>emix-serve</code>將使用該端口。</p></li><li><p>否則，<code>remix-serve</code>將選擇一個空閒的端口（除非 3000 端口已被佔用）。</p></li><li><p>更新的依賴項：</p></li><li><p><code>react-router-dom@6.16.0</code></p></li><li><p><code>@remix-run/router@1.9.0</code></p></li><li><p><code>@remix-run/web-fetch@4.4.0</code></p></li><li><p><code>@remix-run/web-file@3.1.0</code></p></li><li><p><code>@remix-run/web-stream@1.1.0</code></p></li></ul><h2>React Server Components？</h2><p>Remix 對於 React Server Components（RSC）的支持計劃是積極的。他們希望在 Remix v3 中添加對 RSC 的支持，並希望能夠展示這項技術在多個框架中的能力。</p><p>RSC 是一個有趣且強大的功能，但是 Remix v2 是基於當前穩定的 React 特性構建的，因此 RSC 在 Remix v2 中尚未包含。一旦 RSC 穩定下來，Remix 將會支持它。</p><p>然而，與之前支持的其他 React 特性相比，「支持 RSC」需要更深入的集成。RSC 的異步組件與 Remix 的加載器和組件結合得非常相似，並且 Remix 在 v3 中決定摒棄使用第三方庫 useLoaderData，因此在數據加載方面可能會有所不同。他們希望開發者只需要將現有的加載器代碼遷移到新的異步組件中，但需要注意數據依賴的瀑布效應。</p><p>Remix 團隊在今年早些時候的 Remix Conf 上與 React 核心團隊的成員舉辦了一個討論會，討論了 RSC 以及如何共同推進這項技術的穩定發佈。他們以各種方式幫助準備 RSC，並希望能夠成功地集成它到 Remix 中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3b8a79fd9e4920af8f87057e0a296e31755.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 02:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5152974/blog/10113443</guid>
            <link>https://my.oschina.net/u/5152974/blog/10113443</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[低代碼引擎 TinyEngine 正式發佈！！！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-889246aad04bcf78bd25d07144ac7a00325.png" alt="" referrerpolicy="no-referrer"> 在當今數字化飛速發展的時代，企業對高效、敏捷的應用程序需求日益旺盛。為了滿足這一需求，越來越多的低代碼開發平台開始湧現。這些平台通過提供簡單易用的開發工具和優化後的開發流程，幫助開發者快速構建高質量、可重複使用的應用程序，同時降低了開發的難度和成本，提高了開發效率和靈活性。這些低代碼開發平台的出現，無疑為企業的數字化轉型提供了更快速、更高效的方法，也將推動整個軟件開發行業的進步。</p><h2>TinyEngine 項目介紹</h2><p>隨着企業對於低代碼開發平台的需求日益增長，急需一個通用的解決方案來滿足各種低代碼平台的開發需求。正是在這種情況下，低代碼引擎應運而生。它是一種通用的開發框架，通過對低代碼平台系統常用的功能進行解構，將其劃分為多個功能模塊，併為每個模塊定義了相應的協議和開發範式，使得開發者可以根據自身的業務需求，輕鬆定製開發出自己的低代碼開發平台。</p><p>隨着企業對於低代碼開發平台的需求日益增長，急需一個通用的解決方案來滿足各種低代碼平台的開發需求。正是在這種情況下，低代碼引擎應運而生。它是一種通用的開發框架，通過對低代碼平台系統常用的功能進行解構，將其劃分為多個功能模塊，併為每個模塊定義了相應的協議和開發範式，使得開發者可以根據自身的業務需求，輕鬆定製開發出自己的低代碼開發平台。</p><p><img src="https://oscimg.oschina.net/oscnet/up-eafd0400a47b2223f7736ca1f815f5931b7.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 提供了低代碼底層能力，並集成了人工智能，從而使用戶能夠高效開發。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 具有強大的拖拽功能，無論是圖元還是複雜組件，都能在畫布上帶來流暢的體驗。它適用於多場景的低代碼平台開發，包括資源編排、流程編排、服務端渲染、模型驅動、移動端、大屏端以及頁面編排等低代碼平台。</p><h3>架構</h3><p><img src="https://oscimg.oschina.net/oscnet/up-9987cd6c7d0245549bcf11fca5ea1e97da5.png" alt="" referrerpolicy="no-referrer"></p><h3>核心亮點</h3><ul><li><strong>可以定製開發低碼平台</strong>。</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 採用靈活的系統架構，其出色的整體架構提供了高度的自定義自由度，使用戶能夠像搭建積木一樣選擇不同的模塊來構建自己的專屬設計器。此外，插件化的架構使得用戶可以方便地擴展與業務相關的功能。 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 中，插件根據位置大致分為三類：toolbars/plugins/settings，分別對應頂部區域、左側區域和右側區域。toolbars 插件主要偏向於無需 UI 或者 UI 較為簡單的工具插件，plugins 是業務功能插件，顯示在左側 (或下方) 抽屜頁面，可以通過點擊進行展開收起或切換。這些功能都像是獨立的積木塊，用戶可以選擇性地保留或刪除。同時，用戶也可以開發自己的插件或工具，並將其安裝到對應的位置。<strong>TinyEngine 的靈活性極強，用戶可以自由地決定他們想要開發什麼樣的低代碼平台。</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 提供了一套完善的插件體系，涵蓋了插件開發所需的基礎 UI 庫、工具庫、插件面板的顯示控制、生命週期管理、公共 API 註冊與共享等。這一體系使得開發者只需遵循簡單的規範，即可快速開發出業務所需的插件，從而極大地提高了開發效率和靈活性。通過使用 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 提供的插件體系，開發者可以更加輕鬆地管理和維護複雜的插件生態系統，同時降低維護成本。總之，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 的插件體系為開發者提供了一個全面、高效、靈活的開發平台，使得快速開發出高質量的插件成為可能。</p><p>插件開發需要遵循一定的開發規範，主要是文件規範與導出規範：</p><p>1、文件規範，必須包含下面幾個文件</p><pre><code class="language-js">pluginProject
- src 插件源碼
- index.js 註冊插件入口，需要導出約定的數據結構
- package.json
</code></pre><p>2、導出規範， index.js 文件需要導出一個對象來聲明基礎信息</p><pre><code class="language-js"> import component, { api } from './src/Main.vue'
 
 export default {
          id: 'pluginId', // 插件 id
          title: 'pluginName', // 插件名
          icon: 'js', // 插件 icon
          align: 'top', // 插件位置，左側插件可選值：'top' | 'bottom'  工具欄可選值：'right' | 'center' | 'left'
          component, // 插件面板打開時渲染的組件
          api, // 插件暴露的 api，可以提供給其他插件調用
        }
</code></pre><p>在此基礎上就可以按照業務需要自由開發相關邏輯代碼。</p><p>3、最後在 addons.js 插件配置文件中引入，就完成一個完整的插件開發了。</p><pre><code class="language-js">import Materials from '@xxxx/lowcode-plugin-materials'

        export default {
          plugins: [
            Materials,
            // ...
          ],
          toolbars: [
            // ...
          ],
          settings: [
            // ...
          ],
        }
</code></pre><p>（ps:我們呼籲用戶把開發的插件包開源，共建 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 的生態。）</p><ul><li><strong>TinyEngine 有開放的物料協議和擴展接口。</strong> &nbsp;</li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 低代碼引擎默認的物料來源於華為雲開源組件庫 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fdocs%2Fchangelog" target="_blank">TinyVue</a>，該組件庫擁有豐富的組件和強大的功能。並且實現了跨端垮技術棧，同時支持 vue2 和 vue3。即使業務系統使用其他組件庫，也無需切換，得益於 TinyEngine 強大的開放物料設計，可直接導入第三方組件庫，例如 elementUI 和 AntDesign 等。引擎底層技術架構採用 webcomponent 技術，因此支持 Vue、React 和 Angular 等不同技術棧的組件或區塊。<strong>用戶可以自由選擇所需的組件庫並導入使用</strong>。</p><p>導入第三方組件庫，找到 runner.js 物料文件。然後參照默認物料 @opentiny/vue 即可，主要修改以下地方：</p><pre><code class="language-js">// 全量導入 UI 組件庫
import UI from '@xxxx/UI'

Object.entries(UI).forEach(([key, component]) =&gt; {
   const { name } = component
   if (name) {
   window.TinyLowcodeComponent[name] = component
   }
  })

// 導入某個組件庫裏面的單個組件
 import { button } from '@xxxx/UI'

window.TinyLowcodeComponent[name] = button
</code></pre><p>通過導入第三方組件庫，用戶可以在低代碼平台中使用這些組件庫來開發應用程序。除了導入組件外，用戶還需要通過 bundle.json 文件來描述導入的組件所暴露出來的事件和屬性。這樣，用戶可以在應用程序中使用這些組件，並通過 bundle.json 文件來瞭解和使用組件的事件和屬性。這是一個非常方便和靈活的功能，使得用戶可以自由地使用和定製他們所需的組件，從而快速開發出高質量的應用程序。</p><pre><code class="language-json"> // 以下 JSON 為節選按鈕暴露的屬性
        {
          "schema": {
            "type": "object",
            "properties": {
              "size": {
                "title": "定義按鈕尺寸",
                "type": "string",
                "enum": ["large", "medium", "small", "mini"],
                "enumNames": ["較大尺寸", "中等尺寸", "較小尺寸", "迷你尺寸"],
                "default": ""
              },
              "text": {
                "title": "設置按鈕顯示的文本",
                "type": "string",
                "default": ""
              }
            },
            "events": {
              "onClick": {
                "label": {
                  "zh_CN": "鼠標單擊時觸發",
                  "en_US": "Triggered on mouse click"
                },
                "description": {
                  "zh_CN": "鼠標單擊時觸發的回調函數"
                },
                "type": "event",
                "defaultValue": ""
              }
            }
          }
        }
</code></pre><ul><li><strong>TinyEngine 支持自定義 DSL 生成定製的源代碼。</strong></li></ul><p>相對於在運行時由平台提供渲染引擎的方式，這種方式能夠為用戶提供更多的自主權和安全性。用戶可以自由地定義自己的 DSL，並根據需要生成定製化的源代碼，從而更加靈活地控制應用程序的行為和性能。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a49a7815e0e7252136772b0fcb2daf2f5ca.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 默認生成 Vue 的源代碼。當頁面編排完成後，會生成一個包含頁面信息的 schema。DSL 通過便利遞歸等方法，從中生成源代碼。如果技術棧是 Angular 或 React，用戶可以完全開發一個 Angular 或 React 的 DSL，從而生成一個新的源代碼工程。用戶可以根據自己的需求定製生成源代碼的方式，這是一個非常靈活和強大的功能，使得 TinyEngine 可以適應不同的技術棧和需求，從而更加廣泛地應用於各種應用程序的開發。</p><p>如果你想開發其他技術棧的 DSL，那麼一定要對<strong>頁面協議</strong>比較熟悉。</p><pre><code class="language-js">interface&nbsp;IPageSchema&nbsp;{&nbsp;//&nbsp;頁面&nbsp;或&nbsp;區塊&nbsp;schema  
&nbsp;&nbsp;fileName?:&nbsp;string;&nbsp;//&nbsp;頁面名稱，schema&nbsp;是頁面時使用  
&nbsp;&nbsp;componentName?:&nbsp;string;&nbsp;//&nbsp;組件名，schema&nbsp;是頁面時值為&nbsp;"Page"  
&nbsp;&nbsp;blockName?:&nbsp;string;&nbsp;//&nbsp;區塊名，schema&nbsp;是區塊時使用  
&nbsp;&nbsp;id:&nbsp;string;  
&nbsp;&nbsp;css?:&nbsp;string;&nbsp;//&nbsp;頁面全局樣式  
&nbsp;&nbsp;props?:&nbsp;{&nbsp;//&nbsp;組件綁定的屬性  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[prop:string]?:&nbsp;any;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;style?:&nbsp;string;&nbsp;//&nbsp;行內樣式  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;className?:&nbsp;string;&nbsp;//&nbsp;綁定的樣式類名  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lifeCycles?:&nbsp;{&nbsp;//&nbsp;生命週期  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[prop:string]?:&nbsp;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;'js';&nbsp;//&nbsp;固定值  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source:&nbsp;string;&nbsp;//&nbsp;函數字符串  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  
&nbsp;&nbsp;children?:&nbsp;Array&lt;&nbsp;IComponentSchema&nbsp;&gt;&nbsp;|&nbsp;string;&nbsp;//&nbsp;子組件列表&nbsp;或&nbsp;文本字符串  
&nbsp;&nbsp;dataSource?:&nbsp;{&nbsp;//&nbsp;數據源  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list:&nbsp;Array&lt;&nbsp;IDateSource&nbsp;&gt;&nbsp;//&nbsp;數據源列表  
&nbsp;&nbsp;};  
&nbsp;&nbsp;actions?:&nbsp;{&nbsp;//&nbsp;頁面&nbsp;JS  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;module:&nbsp;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;source:&nbsp;string;&nbsp;//&nbsp;頁面定義的&nbsp;JS&nbsp;源碼字符串  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;};  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;"FUNCTION";&nbsp;//&nbsp;固定值  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;list:&nbsp;Array&lt;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id:&nbsp;string;&nbsp;//&nbsp;頁面所定義的函數名  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;string;&nbsp;//&nbsp;配置時顯示名稱&nbsp;與&nbsp;id&nbsp;一致  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&gt;  
&nbsp;&nbsp;};  
&nbsp;&nbsp;bridge?:&nbsp;{&nbsp;//&nbsp;橋接  
&nbsp;&nbsp;imports?:&nbsp;Array&lt;{  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string;&nbsp;//&nbsp;配置時顯示名稱  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;"package"&nbsp;|&nbsp;"local";&nbsp;//&nbsp;package:&nbsp;npm&nbsp;包;&nbsp;local:&nbsp;本地文件  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;path:&nbsp;string;&nbsp;//&nbsp;導入的路徑 (包名或者本地路徑)  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;item:&nbsp;string;&nbsp;//&nbsp;導入的項目  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;useDefault?:&nbsp;boolean;&nbsp;//&nbsp;是否默認導出  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;instance?:&nbsp;string;&nbsp;//&nbsp;實例名，需要注入 service 時需要添加該字段，typescript&nbsp;模式下使用  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&gt;  
&nbsp;&nbsp;};  
&nbsp;&nbsp;inputs:&nbsp;Array&lt;{&nbsp;//&nbsp;頁面接口：輸入類型  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string;&nbsp;//&nbsp;輸入屬性名稱  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;string;&nbsp;//&nbsp;數據類型聲明  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;defaultValue?:&nbsp;any;&nbsp;//&nbsp;默認值  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&gt;;  
&nbsp;&nbsp;outputs:&nbsp;Array&lt;{&nbsp;//&nbsp;頁面接口：事件輸出  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;string;&nbsp;//&nbsp;typescript 類型聲明  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;type:&nbsp;string;&nbsp;//&nbsp;數據類型聲明  
&nbsp;&nbsp;}&gt;;  
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema?:&nbsp;IComponentMetaSchema&nbsp;//&nbsp;區塊時使用，區塊需要暴露的組件屬性元數據  
&nbsp;&nbsp;}
</code></pre><p>對於需要被搜索引擎爬蟲 SEO 的用戶，也可以用服務端 SSR 的解決方式。這種方案也可以用來快速查看自己編輯的頁面。</p><pre><code class="language-js"> // 偽代碼
 function render(_schema) {
  let _arr = []
  _schema.forEach((item) =&gt; {
    let componentName = item.componentName
    if (item.children &amp;&amp; item.children.length) {
      _arr.push(
        h(componentName, item.props, [
          item?.props?.text,
          render(item.children),
        ]),
      )
    } else {
      const text = item?.props?.text || ''
      _arr.push(h(componentName, item.props, text))
    }
  })

  return _arr
}
</code></pre><ul><li><strong>TinyEngine 支持高低代碼混合開發。</strong></li></ul><p>高低代碼混合開發可以更好地滿足業務需求。在企業的應用開發中，往往需要面對快速變化的業務需求，此時，如果全部採用低代碼方式進行開發，則可能會因為代碼的複雜性而無法快速適應變化。而如果採用高低代碼混合的方式，則可以通過低代碼進行常規業務的快速開發，對於特殊的業務邏輯，則由專業開發人員通過高代碼進行實現，這樣就可以更好地滿足業務需求的變化。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 在構建應用程序的過程中，提供了下載源代碼的功能，使得用戶可以在線下進行復雜業務邏輯的調試。這一特點極大地便利了開發者的操作，減少了在線調試和測試的時間和資源消耗，同時也提高了代碼的質量和可靠性。通過下載源代碼進行調試，用戶可以更加靈活地控制應用程序的行為和性能，從而更好地滿足業務需求。總之，TinyEngine 的這一特點為用戶提供了更多的自主權和靈活性，使得他們可以更加高效地控制應用程序的行為和性能。</p><ul><li><strong>TinyEngine 支持 AI 輔助開發。</strong> &nbsp;</li></ul><p>低代碼平台與 AI 的結合具有巨大的發展潛力。這種結合可以在很大程度上提高非專業開發者的開發效率和應用智能化水平。隨着 AI 技術的不斷髮展和低代碼平台的不斷成熟，二者的結合將會在更多領域內實現更高效、更智能的業務流程和管理模式，帶來更大的商業價值。</p><p>低代碼平台通過提供易於使用的開發工具和預先構建的模塊，簡化了應用程序的開發過程。AI 技術則可以幫助應用程序具備更智能、更自適應的特性。通過低代碼平台和 AI 的結合，開發者可以更快速、更高效地構建應用程序，並實現更智能化的應用特性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3acfa3b07927729dbdd65990716f506f4e0.gif" alt="" referrerpolicy="no-referrer"></p><h2>企業關於低代碼的需求</h2><ul><li><h3>PDM 元數據電子審批流</h3></li></ul><p>審批流業務場景是現代企業運營中不可或缺的一環。業務流程從某個特定點開始，然後經過一系列的審批節點，完成流程的審批。這些節點通常由不同級別的人員擔任，例如主管、經理、財務、法務和總經理等，每個人都扮演着特定的角色和職責。</p><p>假設場景如下：流程發起人 A 啓動了一個電子審批流程。這個流程首先會被傳遞到主管進行審批。在審批過程中，主管會仔細檢查初始業務流程信息和其他相關數據，然後決定是否進一步推進流程，或退回給 A 進行修訂。如果主管批准了這個流程，那麼它將被移交給下一級審批人，也就是經理。在經理的審批環節，他/她也會詳查相關數據和信息，並基於這些以及自己的獨立判斷來做出決策。值得注意的是，儘管經理可以查看到主管填寫的一些技術信息，但這些信息並不對財務和法務公開。也就是説，只有經理和總經理可以看到這些技術信息，財務和法務無法獲知。經理會根據這些保密信息以及自己的專業判斷來決定是否繼續推進流程。</p><p>如果經理也批准了該流程，那麼它將被送至財務節點進行審批。在審批過程中，財務主要關注經濟相關的問題，例如價格、付款方式等等。一旦財務審批通過，流程會被移交給法務進行審批。</p><p>與財務審批類似，法務審批主要關注法律風險和合規性問題。在審批時，法務會仔細檢查相關的合同、協議等法律文件，並評估是否存在任何法律風險或合規性問題。一旦法務批准了流程，流程將被移交給總經理進行最後的審批，以完成整個審批流程。 <img src="https://oscimg.oschina.net/oscnet/up-9fc0999e0fce89328d824f66ddf847869ac.png" alt="" referrerpolicy="no-referrer"> 需要注意的是，這種審批流業務場景並不是隻有一個，而是有很多個。例如，除了上述的採購流程，還有其他業務流程需要進行審批，比如：數據入庫流程、報價流程等等。每個流程都有自己的特點和審批節點數量不一。有些流程可能只需要兩三個節點就可以完成審批，有些則可能需要十幾個節點才能完成。但是，所有類型的審批流大致相似。如：頁面上常見的元素包括表單、表格以及常用的審批組件等。</p><p><strong>技術分析：</strong> 若採用傳統的開發方式，每當新增一種流程時，前端開發人員都需要開發所有審批節點的審批頁面，並重新進行發佈流程。同樣地，服務端開發人員也需要重新建立一個審批流，通過特定頁面錄入各節點審批人，並編寫相應的審批流規則。顯然，這對於前端和服務端開發人員來説都是十分繁瑣的工作。</p><p><strong>解決方案：</strong> &nbsp;基於 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 低代碼引擎，開發出一個專為電子審批流設計的低代碼平台。然後，將所有與流程相關的組件，如模板、評審記錄和流程指引等導入到平台的物料區域。最後，將這個專注於開發審批流的低代碼平台集成到 PDM 元數據電子流業務模塊中。在低代碼平台上，想要開發任意一個流程的審批頁面，只需要將流程模板拖入，並在模板中嵌入本流程的表單或表格，即可輕鬆完成該節點的審批頁面，極大地提高了開發效率和便利性！ 服務端也將採用另一種特定於 flow 類型的低代碼平台（將在後續內容中詳細介紹），以實現對審批流程人員編排。這樣，前後端之間的連接就實現了完美的貫通。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a11ab19ac7c4e4cc0c06599cea2390308c9.png" alt="" referrerpolicy="no-referrer"></p><ul><li><h3>Flow 圖元編排類型設計器</h3></li></ul><p>圖形編排在眾多場景中扮演着重要角色，例如流程圖、審批流、部署流水線和架構圖等。資源編排只是編排的主體變成了雲服務資源。</p><p>資源編排遵循基礎設施即代碼（Infrastructure as Code, IaC）的設計理念，資源編排與以往單獨管理每種雲服務資源的方式有所不同。通過資源編排設計器，用戶無需手動創建多個資源，只需在平台上使用設計器進行拖拽和配置，即可生成模板，並一鍵部署多個資源。這樣，用戶可以更加高效地管理和編排雲服務資源，提高資源的利用率和部署速度。</p><p>因此，針對資源編排服務場景，我們需要定製一個專用的低代碼平台來滿足用戶的需求。該平台將具備圖形化界面，允許用戶通過簡單的拖拽和配置來創建、修改和刪除資源編排模板，而無需編寫大量的代碼。此外，該平台還將支持一鍵部署功能，以快速部署多個資源，提高資源編排的效率和速度。</p><p>考慮到需要支持大量的雲服務資源，且每個雲服務資源需要配置的屬性各不相同，因此採用傳統開發方式為每種雲服務資源開發專門的屬性設置頁面是不可行的。因此，我們需要一個能夠自定義渲染的屬性配置方案。通過自定義渲染，用戶可以根據不同的雲服務資源類型和屬性，自由地定義和控制屬性頁面的交互效果，從而提高屬性配置的靈活性和可擴展性。</p><p>同時模板是極為重要的一環，它直接關係到最終資源的部署。因此，模板需要符合特定的標準格式，這就要求畫布和屬性面板的輸入必須能夠準確反映到最終的模板中。</p><p>整理出主要的述求：</p><ul><li>整個頁面應至少包含以下幾部分：資源列表、畫布和屬性設置面板</li><li>畫布應具備核心的拖拽和連線繪圖功能，以支持用戶直觀地進行資源編排</li><li>屬性設置面板需要支持自定義配置渲染，以滿足不同雲服務資源類型和屬性的配置需求</li><li>該平台應具備可拓展性，以支持開發出其他能力，滿足未來可能出現的新的編排需求</li></ul><p>在分析了上述需求後，我們可以清楚地看到，使用傳統開發方式將面臨巨大的工作量和現實的實現困難。同時，經過對比發現，資源編排設計器和低代碼設計器之間有許多相似之處，例如它們都涉及基礎資源、拖拽操作和配置功能，只是在畫布區域存在差異。</p><p><strong>解決方案：</strong> TinyEngine 作為一個出色的低代碼引擎，通過優秀的整體架構提供了高度自由的定製能力。它允許我們像搭積木一樣選擇不同的積木來搭建一個專屬的設計器。同時，屬性面板全部通過 JSON 配置文件進行渲染，無需編寫任何代碼，靈活而強大。這種開發方式可以大大降低開發成本，提高效率。 該設計器的佈局類似於 VS Code，核心模板與功能區域劃分清晰明瞭，易於上手。插件化的架構也使得自由拓展業務相關功能變得輕而易舉。 綜上所述，我們最終決定使用 TinyEngine 來開發圖元編排設計器，以滿足資源編排的需求。</p><p><img src="https://oscimg.oschina.net/oscnet/up-83884bfe0dc60af97c83a8fcd38fb3980d5.png" alt="" referrerpolicy="no-referrer"></p><ul><li><h3>其他業務類型的低碼平台訴求</h3></li></ul><p>1，跨境電商的低代碼平台，旨在方便商家快速裝修店鋪。商家只需要從平台提供的模板中選擇一套適合自己的商品模板，並進行文字和圖片的修改，即可快速建立自己的電商網站。此外，該平台還需要具備方便搜索引擎優化（SEO）的功能，讓商家的電商網站更容易被潛在客戶發現。</p><p>2，隨着移動互聯網的迅速普及，各種應用程序推送消息的需求日益增長。在這個背景下，APP 廠商只需要使用推送消息平台提供的模板，並簡單配置一下推送內容和樣式，即可輕鬆實現消息推送。</p><p>3，運維管理平台是針對企業運營過程中涉及的各種數據和頁面進行管理的工具。隨着企業運營數據的不斷增加，頁面變得越來越複雜。其實不同的崗位對於關心的信息也不盡相同。低代碼平台的應用可以讓不同崗位的員工通過簡單的拖拽操作，輕鬆獲取自己需要的數據和信息。這種方式不僅可以提高工作效率，而且還可以降低操作難度，使得更多人可以輕鬆上手使用。</p><h2>未來展望</h2><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2F" target="_blank">TinyEngine</a> 專注於為用戶提供低代碼的基礎能力，目前正致力於跟生成式 AI 相結合，與用戶共同打造面向未來的應用。</p><h2><strong>其他説明</strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-82d36f2d7d034985e744c65d9c21470bba8.png" alt="" referrerpolicy="no-referrer"></p><p>OpenTiny&nbsp;是一套企業級 Web 應用構建解決方案，提供跨端、跨框架的 UI 組件庫，適配 PC 端 / 移動端等多端，支持&nbsp;Vue2 / Vue3 / Angular&nbsp;多技術棧，擁有集成人工智能的低代碼引擎，包含主題配置系統 / 中後台模板 / CLI&nbsp;命令行等豐富的效率提升工具，可幫助開發者高效開發 Web 應用。</p><p><strong>核心亮點：</strong></p><ul><li>跨端跨框架：&nbsp;使用 Renderless 無渲染組件設計架構，實現了一套代碼同時支持 Vue2 / Vue3，PC / Mobile 端，並支持函數級別的邏輯定製和全模板替換，靈活性好、二次開發能力強</li><li>組件豐富：PC 端有 100+組件，移動端有 30+組件，包含高頻組件 Table、Tree、Select 等，內置虛擬滾動，保證大數據場景下的流暢體驗，除了業界常見組件之外，我們還提供了一些獨有的特色組件，如：Split 面板分割器、IpAddress IP 地址輸入框、Calendar 日曆、Crop 圖片裁切等</li><li>集成人工智能：低代碼引擎提供低代碼底層的能力，集成人工智能，讓 AI 助力用戶高效開發，適用於多場景的低代碼平台開發。如：資源編排、服務端渲染、模型驅動、移動端、大屏端、頁面編排等低代碼平台</li><li>配置式組件：&nbsp;組件支持模板式和配置式兩種使用方式，適合低代碼平台，目前團隊已經將 OpenTiny 集成到內部的低代碼平台，針對低碼平台做了大量優化</li><li>周邊生態齊全：&nbsp;提供了基於 Angular + TypeScript 的 TinyNG 組件庫，提供包含 10+ 實用功能、20+ 典型頁面的 TinyPro 中後台模板，提供覆蓋前端開發全流程的 TinyCLI 工程化工具，提供強大的在線主題配置平台 TinyTheme</li></ul><hr><p>歡迎加入 OpenTiny 開源社區。添加微信小助手：opentiny-official 一起參與交流前端技術～</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252F" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2F" target="_blank">OpenTiny 官網</a>&nbsp;：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252F" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2F" target="_blank">opentiny.design/</a></strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fgithub.com%252Fopentiny%252F" title="https://github.com/opentiny/" target="_blank">OpenTiny 代碼倉庫</a>：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttps%253A%252F%252Fgithub.com%252Fopentiny%252F" title="https://github.com/opentiny/" target="_blank">github.com/opentiny/</a></strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-vue" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">Vue 組件庫</a>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-vue" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">opentiny.design/tiny-vue</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-ng" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-ng" target="_blank">Angular 組件庫</a>：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%2F%3Ftarget%3Dhttps%253A%252F%252Fopentiny.design%252Ftiny-ng" title="https://link.juejin.cn/?target=https%3A%2F%2Fopentiny.design%2Ftiny-ng" target="_blank">opentiny.design/tiny-ng</a></p><p>歡迎進入代碼倉庫 Star🌟TinyVue、TinyNG、TinyCLI~</p><p>如果你也想要共建，可以進入代碼倉庫，找到&nbsp;<code>good first issue</code>標籤，一起參與開源貢獻~</p><p><strong>往期文章推薦</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-e8bd5f9b0f2dedea3b5fcd23ab93a80c124.png" alt="" referrerpolicy="no-referrer"></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247491605%2526idx%253D1%2526sn%253Db85064d6b81a2a673bc9e1eeea82a1dd%2526chksm%253Dfe4b01aac93c88bc1de779f6e558da7cdd181cec49a1fbdac804b54bab19729cbc45ddf3f104%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247491605&amp;idx=1&amp;sn=b85064d6b81a2a673bc9e1eeea82a1dd&amp;chksm=fe4b01aac93c88bc1de779f6e558da7cdd181cec49a1fbdac804b54bab19729cbc45ddf3f104&amp;scene=21#wechat_redirect" target="_blank">必不可少的 UI 組件一——組件的基礎知識</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247491250%2526idx%253D1%2526sn%253D66b6840f3f93d415a33b9ade09dcd9b8%2526chksm%253Dfe48ff0dc93f761ba3965380b759b184616d9dc39a903f1bda689037ba0b177c98fb0bae7c38%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247491250&amp;idx=1&amp;sn=66b6840f3f93d415a33b9ade09dcd9b8&amp;chksm=fe48ff0dc93f761ba3965380b759b184616d9dc39a903f1bda689037ba0b177c98fb0bae7c38&amp;scene=21#wechat_redirect" target="_blank">OpenTiny Vue 3.10.0 版本發佈：組件 Demo 支持 Composition 寫法，新增 4 個新組件</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247490886%2526idx%253D1%2526sn%253D3c0fcbe86c01b01e0ed876904743ca76%2526chksm%253Dfe48fcf9c93f75ef621391689021922451ae5621c75f0c5c3024352d9df8d0f18139095865f9%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247490886&amp;idx=1&amp;sn=3c0fcbe86c01b01e0ed876904743ca76&amp;chksm=fe48fcf9c93f75ef621391689021922451ae5621c75f0c5c3024352d9df8d0f18139095865f9&amp;scene=21#wechat_redirect" target="_blank">前端 Vuer，請收好這份《Vue 組件單元測試》寶典</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247490622%2526idx%253D1%2526sn%253Df928726a3608ebf0999529187dc2a22c%2526chksm%253Dfe48fd81c93f7497608ed97ea0d60d12b61d03c062ebda49c84a9c4e3cdb0550e25930df9aa1%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247490622&amp;idx=1&amp;sn=f928726a3608ebf0999529187dc2a22c&amp;chksm=fe48fd81c93f7497608ed97ea0d60d12b61d03c062ebda49c84a9c4e3cdb0550e25930df9aa1&amp;scene=21#wechat_redirect" target="_blank">OpenTiny 前端組件庫正式開源啦！面向未來，為開發者而生</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzU5ODA3OTY5Ng%253D%253D%2526mid%253D2247490528%2526idx%253D1%2526sn%253D911d84e6bb275e6125464f07643c1150%2526chksm%253Dfe48fa5fc93f734911c4f44a5f4e2d6c4e29e00ad68cae35c4edc3771de1cbf65cd5f2a8a224%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzU5ODA3OTY5Ng==&amp;mid=2247490528&amp;idx=1&amp;sn=911d84e6bb275e6125464f07643c1150&amp;chksm=fe48fa5fc93f734911c4f44a5f4e2d6c4e29e00ad68cae35c4edc3771de1cbf65cd5f2a8a224&amp;scene=21#wechat_redirect" target="_blank">從自研走向開源的 TinyVue 組件庫</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.juejin.cn%3Ftarget%3Dhttp%253A%252F%252Fmp.weixin.qq.com%252Fs%253F__biz%253DMzI2MDE3MTM4MA%253D%253D%2526mid%253D2701520396%2526idx%253D1%2526sn%253Dbd42224d212cb4b78ffcbca98f463db8%2526chksm%253Dce9cfd17f9eb7401d41b21639f80b09846a1c44b237c6733b809aeb2259c3d2521c88c490e7a%2526scene%253D21%2523wechat_redirect" title="http://mp.weixin.qq.com/s?__biz=MzI2MDE3MTM4MA==&amp;mid=2701520396&amp;idx=1&amp;sn=bd42224d212cb4b78ffcbca98f463db8&amp;chksm=ce9cfd17f9eb7401d41b21639f80b09846a1c44b237c6733b809aeb2259c3d2521c88c490e7a&amp;scene=21#wechat_redirect" target="_blank">我要做開源，提交我的第一個 PR</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 10:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6769809/blog/10112556</guid>
            <link>https://my.oschina.net/u/6769809/blog/10112556</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[尤雨溪：高質量中文文檔的重要性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">Vue.js 和 Vite 的創建者</span>尤雨溪在最近的一次<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thisdot.co%2Fblog%2Fcreator-of-vue-js-and-vite-evan-yous-journey-from-google-engineer-to-open%2F" target="_blank">訪談中</a>，談到了自己<span style="background-color:#ffffff">成為獨立開源開發人員的歷程；重點介紹了向全職開源工作的過渡、Vue.js 的成長以及他對未來的期望。</span></span></p><p><span style="color:#000000"><img height="282" src="https://oscimg.oschina.net/oscnet/up-98b89dc57ad7b224f597857decc86eb4ee9.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">在分享了成為一名全職開源開發人員的歷程以及促進這一轉變的挑戰和因素時，尤雨溪將自己的成功歸功於運氣和堅持的結合。他詳細闡述了自己開發 Vue.js 的經歷，強調了保持對解決一些有趣的問題時的熱情；並概述了 API 驅動開發的方法，即在實現之前設計事物的工作方式。</span></p><p><span style="color:#000000">尤雨溪解釋稱，Vue.js 最初是通過 Hacker News 和中國社交網絡等平台吸引的用戶，而這主要得益於它自下而上的方法和用戶友好的文檔；與 React 和 Angular 等大型框架形成了鮮明對比。</span></p><p><span style="color:#000000">他認為，Vue.js 的發展歷程中的一大轉折點是其在 Laravel 社區中的嶄露頭角，正是因此才鞏固了 Vue.js 作為生產項目可靠框架的聲譽。關於 Vue.js 對後端開發人員的吸引力，尤雨溪則認為，主要得益於該項目與傳統後端框架的無縫集成。</span></p><p><span style="color:#000000">訪談內容還涉及了&nbsp;<span style="background-color:#ffffff">Vue.js 在不同地區（尤其是亞洲）的採用情況。尤雨溪將項目在這些地區的成功歸功於自己對中國社交網絡的積極參與，同時還強調了高質量中文文檔的重要性。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">此外，尤雨溪還分享了他在 Vue.js 早期階段的工作節奏和滿足感，並將其與項目發展過程中所需的更復雜的決策過程進行了對比。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2FweaYWoL_ymI" target="_blank">查看完整視頻</a>。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 04:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259202</guid>
            <link>https://www.oschina.net/news/259202</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bun v1.0.3 發佈，Zig 編寫的 JavaScript 運行時]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Bun 發佈了其最新版本 v1.0.3，這是一個集 JavaScript 運行時、打包器、轉譯器和包管理器於一體的工具。這次的更新不僅修復了眾多已知的問題，還引入了一系列令人期待的新功能。</p><p>首先，Bun 在這個版本中增加了對 TypeScript 的<span>&nbsp;</span><code>emitDecoratorMetadata</code><span>&nbsp;</span>的支持，這意味着開發者現在可以在 Bun 中無縫地使用 Nest.js 這樣的框架。Nest.js 是 Node.js 生態系統中的一個受歡迎的框架，而 Bun 對其的支持無疑將進一步擴大其在開發者社區中的影響力。</p><p>此外，Bun 還引入了對<span>&nbsp;</span><code>module.parent</code><span>&nbsp;</span>的支持。這是 Node.js 中的一個特性，允許開發者確定一個模塊是直接運行還是被另一個模塊所需。這個功能的引入進一步增強了 Bun 與 Node.js 的兼容性。</p><p>在私有 npm 倉庫的支持方面，Bun 也做了大量的工作。現在，它已經與 Azure Artifacts 和 JFrog Artifactory 這樣的私有 npm 倉庫實現了更好的兼容性。用戶可以使用<span>&nbsp;</span><code>bunfig.toml</code><span>&nbsp;</span>文件來配置這些私有倉庫，這為開發者提供了更大的靈活性。</p><p>值得一提的是，應廣大用戶的反饋，Bun 決定默認關閉<span>&nbsp;</span><code>[0.5ms] env loaded</code><span>&nbsp;</span>消息。這是一個小改動，但它反映了 Bun 對用戶反饋的重視。</p><p>在與 Node.js 的兼容性方面，Bun 也做了大量的工作。這次的更新中，Bun 實現了<span>&nbsp;</span><code>console.Console</code><span>&nbsp;</span>構造函數，並修復了環境變量處理中的問題。這些改進都是為了確保 Bun 能夠為開發者提供與 Node.js 一致的開發體驗。</p><pre><code class="language-javascript">import { Console } from "console";
import { createWriteStream } from "fs";

const writer = new Console({ stdout: createWriteStream("log.txt") });

writer.log("hello");
writer.log("world", { x: 2 });
</code></pre><p>此外，Bun 還修復了一系列已知的問題。其中包括<span>&nbsp;</span><code>request.json()</code><span>&nbsp;</span>中的一個問題，以及與<span>&nbsp;</span><code>bun pm rm cache</code><span>&nbsp;</span>命令相關的一個問題。這些修復都是為了確保 Bun 能夠為開發者提供一個穩定和可靠的開發環境。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 03:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259198/bun-1-0-3-released</guid>
            <link>https://www.oschina.net/news/259198/bun-1-0-3-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英特爾參與 CentOS Stream 項目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">紅帽官方發佈<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgAmZSf447gZEqd8n3tGd_A" target="_blank">公告</a>歡迎英特爾參與進 CentOS Stream 項目，並表示「這一舉措不僅進一步深化了我們長期的合作關係，也構建在英特爾已經在 Fedora 項目中積極貢獻的基礎之上。」</span></p><p><img height="250" src="https://oscimg.oschina.net/oscnet/up-de0d91800dda02f5f04460a8e28f9ef7085.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">目前，CentOS Stream 共包括以下特別興趣小組（SIG）：</span></p><ul><li><p><span style="color:#000000">指令集架構（ISA）特別興趣小組（SIG）致力於聚焦於 CentOS Stream 中最新的 ISA 基線和工具鏈技術，以提高性能並減少碳足跡為最終目標。</span></p></li><li><p><span style="color:#000000">虛擬化 SIG 旨在為最新的虛擬化安全功能提供全面支持，確保開箱即用，其中包括像 Intel® Trust Domain Extensions（Intel® TDX）這樣的保密計算能力。</span></p></li><li><p><span style="color:#000000">超大規模 SIG 旨在支持和構建適用於大規模基礎設施的 CentOS Stream 部署用例，以滿足不同規模的需求。</span></p></li></ul><p>英特爾將為這些小組做出貢獻。「<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">通過積極頻繁地為 CentOS Stream 貢獻，紅帽和英特爾能夠更有效地支持 RHEL 中最新的硬件架構進步，尤其是那些滿足我們用戶新興關鍵需求的進展。</span>」</p><p><span>英特爾公司系統軟件工程副總裁兼總經理 Mark Skarpness 表示，該公司的目標是藉助 CentOS Stream 和 Fedora，為紅帽生態系統的所有上游貢獻提供更強大的英特爾平台支持。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除了為 CentOS Stream 貢獻外，紅帽與英特爾的合作涵蓋了多個領域，包括 5G 網絡、邊緣計算、人工智能（AI）和系統安全。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 03:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259196</guid>
            <link>https://www.oschina.net/news/259196</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[NExT-GPT —— 任意對任意多模態大語言模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start">NExT-GPT 是一個端到端通用的任意多模態大型語言模型（MM-LLM）系統。開發團隊將 LLM 與多模態適配器和不同的擴散解碼器連接起來，使 NExT-GPT 能夠感知輸入並以文本、圖像、視頻和音頻的任意組合生成輸出。</p><p style="text-align:start">通過利用現有訓練有素的高性能編碼器和解碼器，NExT-GPT 僅使用某些投影層的少量參數（1％）進行調整，這不僅有利於低成本訓練，而且便於方便地擴展到更多潛在的方式。</p><p style="text-align:start">此外還引入了模態切換指令調整（MosIT）併為 MosIT 手動策劃高質量的數據集，在此基礎上，NExT-GPT 被賦予了複雜的跨模態語義理解和內容生成的能力。</p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>NExt-GPT 建立在現有預訓練的 LLM、多模態編碼器和 SoTA 擴散模型之上，具有足夠的端到端指令調整。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="255" src="https://static.oschina.net/uploads/space/2023/0922/152547_Wq8a_4252687.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><strong>多模態編碼階段。</strong>利用已建立的編碼器以各種模式對輸入進行編碼，其中這些表示通過投影層投影成法學碩士可以理解的類似語言的表示。</li><li><strong>LLM 理解和推理階段。</strong>利用現有的開源法學碩士作為核心來處理輸入信息以進行語義理解和推理。LLM 不僅直接生成文本標記，還生成獨特的「模態信號」標記，這些標記充當指示解碼層是否相應輸出模態內容以及輸出什麼模態內容的指令。</li><li><strong>多模式生成階段。</strong>從 LLM（如果有）接收具有特定指令的多模態信號，基於 Transformer 的輸出投影層將信號標記表示映射為後續多模態解碼器可以理解的表示形式。</li></ul><p><img height="138" src="https://static.oschina.net/uploads/space/2023/0922/152430_MsEF_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="599" src="https://static.oschina.net/uploads/space/2023/0922/152456_Uqt0_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><em>NExT-GPT 推理過程。灰色表示模塊已停用。</em></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 03:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/next-gpt</guid>
            <link>https://www.oschina.net/p/next-gpt</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 雲原生分佈式操作系統 KubeSphere]]>
            </title>
            <description>
                <![CDATA[<p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.com.cn%2F"><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/kubesphere-icon.gif" alt="banner" width="200px" referrerpolicy="no-referrer"></a></p><p align="center"><b>適用於<i> Kubernetes 多雲、數據中心和邊緣 </i>管理的容器平台</b></p><p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2Fkubesphere%2Fkubesphere"><img src="https://goreportcard.com/badge/github.com/kubesphere/kubesphere" alt="A+" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fhub.docker.com%2Fr%2Fkubesphere%2Fks-installer"><img src="https://img.shields.io/docker/pulls/kubesphere/ks-installer" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fissues%3Fq%3Dis%253Aissue%2Bis%253Aopen%2Bsort%253Aupdated-desc%2Blabel%253A%2522good%2Bfirst%2Bissue%2522"><img src="https://img.shields.io/github/issues/kubesphere/kubesphere/good%20first%20issue?logo=github" alt="good first issue" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2Fintent%2Ffollow%3Fscreen_name%3DKubeSphere"><img src="https://img.shields.io/twitter/follow/KubeSphere?style=social" alt="follow on Twitter" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fjoin.slack.com%2Ft%2Fkubesphere%2Fshared_invite%2Fzt-1ilxbsp39-t4ES4xn5OI0eF5hvOoAhEw"><img src="https://img.shields.io/badge/Slack-2000%2B-blueviolet?logo=slack&amp;logoColor=white" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.youtube.com%2Fchannel%2FUCyTdUQUYjf7XLjxECx63Hpw"><img src="https://img.shields.io/youtube/channel/subscribers/UCyTdUQUYjf7XLjxECx63Hpw?style=social" referrerpolicy="no-referrer"></a></p><hr><h2><a id="kubesphere-是什麼" class="anchor" href="https://gitee.com/kchstack/kubesphere#kubesphere-%E6%98%AF%E4%BB%80%E4%B9%88"></a>KubeSphere 是什麼</h2><blockquote><p><a href="https://gitee.com/kchstack/kubesphere/blob/master/README.md">English</a> | 中文</p></blockquote><p><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2F">KubeSphere</a> 願景是打造一個以 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubernetes.io%2Fzh%2F">Kubernetes</a> 為內核的 <strong>雲原生分佈式操作系統</strong>，它的架構可以非常方便地使第三方應用與雲原生生態組件進行即插即用（plug-and-play）的集成，支持雲原生應用在多雲與多集羣的統一分發和運維管理。 KubeSphere 也是一個多租戶容器平台，提供全棧的 IT 自動化運維的能力，簡化企業的 DevOps 工作流。KubeSphere 提供了運維友好的嚮導式操作界面，幫助企業快速構建一個強大和功能豐富的容器雲平台，詳情請參閲 <a href="https://gitee.com/kchstack/kubesphere#%E5%B9%B3%E5%8F%B0%E5%8A%9F%E8%83%BD">平台功能</a> 。</p><p>下面的屏幕截圖讓我們進一步瞭解 KubeSphere，關於 KubeSphere 更詳細的介紹與説明請參閲 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fintroduction%2Fwhat-is-kubesphere%2F">什麼是 KubeSphere</a> 。</p><table><tbody><tr><td width="50%" align="center"><b>工作台</b></td><td width="50%" align="center"><b>項目資源</b></td></tr><tr><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/console.png" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/project.png" referrerpolicy="no-referrer"></td></tr><tr><td width="50%" align="center"><b>CI/CD 流水線</b></td><td width="50%" align="center"><b>應用商店</b></td></tr><tr><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/cicd.png" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/app-store.png" referrerpolicy="no-referrer"></td></tr></tbody></table><h2><a id="demo-環境" class="anchor" href="https://gitee.com/kchstack/kubesphere#demo-%E7%8E%AF%E5%A2%83"></a>Demo 環境</h2><p>🎮 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.cloud%2Fconsole%2Fmanaged-cluster%2F">KubeSphere Cloud 輕量集羣</a>為您提供免費、穩定且開箱即用的 KubeSphere 託管集羣服務。註冊賬號並登錄後，可在 5 秒內新建一個安裝 KubeSphere 的 K8s 集羣，進而進入 KubeSphere 交互式體驗各項功能。</p><p>🖥 您還可以通過 <a href="https://gitee.com/link?target=https%3A%2F%2Fyoutu.be%2FYxZ1YUv0CYs">Demo 視頻</a>快速瞭解使用操作。</p><h2><a id="平台功能" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%B9%B3%E5%8F%B0%E5%8A%9F%E8%83%BD"></a>平台功能</h2><details><summary><b>🕸 部署 Kubernetes 集羣</b></summary>
  支持在任何基礎設施上部署 Kubernetes，支持在線安裝和離線安裝，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-linux%2Fintroduction%2Fintro%2F">瞭解更多</a>。
  </details><details><summary><b>🔗 Kubernetes 多集羣管理</b></summary>
  提供集中控制平台來管理多個 Kubernetes 集羣，支持將應用程序發佈到跨不同雲供應商的多個 k8s 集羣上。
  </details><details><summary><b>🤖 Kubernetes DevOps</b></summary>
  提供基於 GitOps 的 CD 方案，底層支持 Argo CD，可實時統計 CD 狀態。結合主流 CI 引擎 Jenkins，讓 DevOps 更加易用。<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdevops%2F">瞭解更多</a>。
  </details><details><summary><b>🔎 雲原生可觀測性</b></summary>
  支持多維度監控、事件和審計日誌；內置多租戶日誌查詢和收集，告警和通知，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fobservability%2F">瞭解更多</a>。
  </details><details><summary><b>🧩 基於 Istio 的微服務治理</b></summary>
  為分佈式微服務應用程序提供細粒度的流量管理、可觀測性和服務跟蹤，支持可視化的流量拓撲，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fservice-mesh%2F">瞭解更多</a>。
  </details><details><summary><b>💻 應用商店</b></summary>
  為基於 Helm 的應用程序提供應用商店，並在 Kubernetes 平台上提供應用程序生命週期管理功能，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fpluggable-components%2Fapp-store%2F">瞭解更多</a>。
  </details><details><summary><b>💡 Kubernetes 邊緣節點管理</b></summary>
  基於 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubeedge.io%2Fzh%2F">KubeEdge</a> 實現應用與工作負載在雲端與邊緣節點的統一分發與管理，解決在海量邊、端設備上完成應用交付、運維、管控的需求，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fpluggable-components%2Fkubeedge%2F">瞭解更多</a>。
  </details><details><summary><b>📊 多維度計量與計費</b></summary>
  提供基於集羣與租戶的多維度資源計量與計費的監控報表，讓 Kubernetes 運營成本更透明，<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Ftoolbox%2Fmetering-and-billing%2Fview-resource-consumption%2F">瞭解更多</a>。
  </details><details><summary><b>🗃 支持多種存儲和網絡解決方案</b></summary>
  支持 GlusterFS、CephRBD、NFS、LocalPV ，並提供多個 CSI 插件對接公有云與企業級存儲。提供 Kubernetes 在裸機、邊緣和虛擬化中的負載均衡器實現 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fopenelb">OpenELB</a> 。提供網絡策略和容器組 IP 池管理，支持 Calico、Flannel、Kube-OVN。
  </details><details><summary><b>🏘 多租戶與統一鑑權認證</b></summary>
  提供統一的認證鑑權與細粒度的基於角色的授權系統，支持對接 AD/LDAP 。
  </details><details><summary><b>🧠 GPU 工作負載調度與監控</b></summary>
  支持可視化創建 GPU 工作負載，支持 GPU 監控，同時還支持對 GPU 資源進行租戶級配額管理。
  </details><h2><a id="架構説明" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E6%9E%B6%E6%9E%84%E8%AF%B4%E6%98%8E"></a>架構説明</h2><p>KubeSphere 使用前後端分離的架構，將 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fconsole">前端</a> 與 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere">後端</a> 分開。後端的各個功能組件可通過 REST API 對接外部系統。</p><p><img src="https://gitee.com/kchstack/kubesphere/raw/master/docs/images/architecture.png" alt="Architecture" referrerpolicy="no-referrer"></p><hr><h2><a id="最新版本" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E6%9C%80%E6%96%B0%E7%89%88%E6%9C%AC"></a>最新版本</h2><p>🎉 KubeSphere 3.3.2 全新發布！！多項功能與體驗優化，帶來更好的產品體驗，詳見 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Frelease%2Frelease-v332%2F">v3.3.2 版本説明</a> 。</p><h2><a id="安裝" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%AE%89%E8%A3%85"></a>安裝</h2><p>KubeSphere 支持在任意平台運行，從本地數據中心到混合多雲再走向邊緣。此外，KubeSphere 可以部署在任何版本兼容的 Kubernetes 集羣上。Installer 默認將執行最小化安裝，您可以在安裝前或安裝後自定義<a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Fquick-start%2Fenable-pluggable-components%2F">安裝可插拔功能組件</a>。</p><h3><a id="快速入門" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入門</h3><h4><a id="在-k8sk3s-上安裝" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%9C%A8-k8sk3s-%E4%B8%8A%E5%AE%89%E8%A3%85"></a>在 K8s/K3s 上安裝</h4><p>請確保您的集羣已經安裝 Kubernetes v1.19.x、v1.20.x、v1.21.x、* v1.22.x、* v1.23.x 或 * v1.24.x。帶星號的版本可能出現邊緣節點部分功能不可用的情況。因此，如需使用邊緣節點，推薦安裝 Kubernetes v1.21.x 及之前的版本。運行以下命令以在現有 Kubernetes 集羣上安裝 KubeSphere：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="s">kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.3.1/kubesphere-installer.yaml</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="s">kubectl apply -f https://github.com/kubesphere/ks-installer/releases/download/v3.3.1/cluster-configuration.yaml</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="all-in-onelinux-單節點安裝" class="anchor" href="https://gitee.com/kchstack/kubesphere#all-in-onelinux-%E5%8D%95%E8%8A%82%E7%82%B9%E5%AE%89%E8%A3%85"></a>All-in-one（Linux 單節點安裝）</h4><p>👨‍💻 沒有 Kubernetes 集羣? 可以用 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubekey">KubeKey</a> 在 Linux 環境以 All-in-one 快速安裝單節點 K8s/K3s 和 KubeSphere，下面以 K3s 為例：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1"># 下載 KubeKey</span></span><span id="LC2" class="line"><span class="s">curl -sfL https://get-kk.kubesphere.io | VERSION=v2.3.0 sh -</span></span><span id="LC3" class="line"><span class="c1"># 為 kk 賦予可執行權限</span></span><span id="LC4" class="line"><span class="s">chmod +x kk</span></span><span id="LC5" class="line"><span class="c1"># 創建集羣</span></span><span id="LC6" class="line"><span class="s">./kk create cluster --with-kubernetes v1.21.4-k3s --with-kubesphere v3.3.1</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>可使用以下命令查看安裝日誌。如果安裝成功，可使用 <code>http://IP:30880</code> 訪問 KubeSphere Console，管理員登錄帳密為 <code>admin/P@88w0rd</code>。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="s">kubectl logs -n kubesphere-system $(kubectl get pod -n kubesphere-system -l 'app in (ks-install, ks-installer)' -o jsonpath='{.items[0].metadata.name}') -f</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="在託管-kubernetes-上部署-kubesphere" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E5%9C%A8%E6%89%98%E7%AE%A1-kubernetes-%E4%B8%8A%E9%83%A8%E7%BD%B2-kubesphere"></a>在託管 Kubernetes 上部署 KubeSphere</h3><p>KubeSphere 託管在以下雲供應商上，您可以通過在其託管的 Kubernetes 服務上一鍵安裝來部署 KubeSphere。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Faws.amazon.com%2Fquickstart%2Farchitecture%2Fqingcloud-kubesphere%2F">在 Amazon EKS 上部署 KubeSphere</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmarket.azure.cn%2Fmarketplace%2Fapps%2Fqingcloud.kubesphere">在 Azure AKS 上部署 KubeSphere</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmarketplace.digitalocean.com%2Fapps%2Fkubesphere">在 DigitalOcean 上部署 KubeSphere</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.qingcloud.com%2Fproducts%2Fkubesphereqke">在青雲 QingCloud QKE 上部署 KubeSphere</a></li></ul><p>您還可以在幾分鐘內在其他託管的 Kubernetes 服務上安裝 KubeSphere，請參閲 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-kubernetes%2F">官方文檔</a> 以開始使用。</p><blockquote><p>👨‍💻 不能訪問網絡？參考 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-kubernetes%2Fon-prem-kubernetes%2Finstall-ks-on-linux-airgapped%2F">在 Kubernetes 上離線安裝</a> 或者 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fdocs%2Finstalling-on-linux%2Fintroduction%2Fair-gapped-installation%2F">在 Linux 上離線安裝</a> 瞭解如何使用私有倉庫來安裝 KubeSphere。</p></blockquote><h2><a id="指引討論貢獻與支持" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E6%8C%87%E5%BC%95%E8%AE%A8%E8%AE%BA%E8%B4%A1%E7%8C%AE%E4%B8%8E%E6%94%AF%E6%8C%81"></a>指引、討論、貢獻與支持</h2><p>我們 <img class="emoji" alt=":heart:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/heart-aa0a990af1ed6612e33b6344ea04b28b.png" width="14" height="14" referrerpolicy="no-referrer"> 您的貢獻。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fcommunity">社區</a> 將引導您瞭解如何開始貢獻 KubeSphere。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fcommunity%2Ftree%2Fmaster%2Fdeveloper-guide%2Fdevelopment">開發指南</a> 説明瞭如何安裝開發環境。</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.com.cn%2Fforum%2F">中文論壇</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.com.cn%2F">社區微信羣（見官網底部）</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fjoin.slack.com%2Ft%2Fkubesphere%2Fshared_invite%2FenQtNTE3MDIxNzUxNzQ0LTZkNTdkYWNiYTVkMTM5ZThhODY1MjAyZmVlYWEwZmQ3ODQ1NmM1MGVkNWEzZTRhNzk0MzM5MmY4NDc3ZWVhMjE">Slack Channel</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fspace.bilibili.com%2F438908638">Bilibili</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Ftwitter.com%2FKubeSphere">Twitter</a></li></ul><p>:hugs: 請將任何 KubeSphere 的 Bug、問題和需求提交到 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fissues">KubeSphere GitHub Issue</a>。</p><p><img class="emoji" alt=":heart_decoration:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/heart_decoration-c6bb912722707dbea619b810f0f9eccf.png" width="14" height="14" referrerpolicy="no-referrer"> 若您期待官方、高效的技術服務，青雲科技也為 KubeSphere 開源版本提供全程可靠、小時響應的工單支持，詳情垂詢 <a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.cloud%2Fticket%2F">KubeSphere 在線技術支持</a>。</p><h2><a id="誰在使用-kubesphere" class="anchor" href="https://gitee.com/kchstack/kubesphere#%E8%B0%81%E5%9C%A8%E4%BD%BF%E7%94%A8-kubesphere"></a>誰在使用 KubeSphere</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fkubesphere.io%2Fzh%2Fcase%2F">用戶案例學習</a> 列出了哪些企業在使用 KubeSphere。歡迎 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubesphere%2Fkubesphere%2Fissues%2F4123">發表評論</a> 來分享您的使用案例。</p><h2><a id="landscapes" class="anchor" href="https://gitee.com/kchstack/kubesphere#landscapes"></a>Landscapes</h2><p align="center"><br><br><img src="https://landscape.cncf.io/images/left-logo.svg" width="150" referrerpolicy="no-referrer">&nbsp;&nbsp;<img src="https://landscape.cncf.io/images/right-logo.svg" width="200" referrerpolicy="no-referrer">&nbsp;&nbsp;
<br><br>
KubeSphere 是 CNCF 基金會成員並且通過了 <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.cncf.io%2Fcertification%2Fsoftware-conformance%2F%23logos">Kubernetes 一致性認證
</a>，進一步豐富了 <a href="https://gitee.com/link?target=https%3A%2F%2Flandscape.cncf.io%2F%3Flandscape%3Dobservability-and-analysis%26license%3Dapache-license-2-0">CNCF 雲原生的生態。
</a></p>]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 03:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/kubesphere</guid>
            <link>https://gitee.com/kchstack/kubesphere</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 實時數倉混沌演練實踐]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>一、背景介紹</h1><p>目前實時數倉提供的投放實時指標優先級別越來越重要，不再是單獨的報表展示等功能，特別是提供給下游規則引擎的相關數據，直接對投放運營的廣告投放產生直接影響，數據延遲或者異常均可能產生直接或者間接的資產損失。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-809771304bbfbfaefda51eb5e25fc0b743f.jpg" referrerpolicy="no-referrer"></p><p>從投放管理平台的鏈路全景圖來看，實時數倉是不可或缺的一環,可以快速處理海量數據，並迅速分析出有效信息，同時支持投放管理平台的手動控盤。實時節點事故，將可能導致整個投放鏈路無法正常運行，另外，投放規則引擎是自動化操作，服務需要 24 小時運行，所以需要配置及時有效的數據質量監控預警，能快速識別到波動異常或者不符合業務的數據，從而計劃引入混沌工程，希望可以通過主動注入故障的方式、儘可能提前感知風險、發現潛在問題，並針對性地進行防範、加固，避免故障發生時所帶來的嚴重後果，提高實時數倉整體抗風險能力。</p><span id="OSC_h1_2"></span><h1>二、演練範圍</h1><p>為了能更細緻反應出混沌演練情況，根據演練的內容不同，將實時數倉混沌分為兩部分：<strong>技術側和業務側</strong>。</p><p><strong>技術側混沌</strong>：基於中間件、數據庫、JVM、基礎資源、網絡、服務等注入常見的異常，根據實際業務中梳理的應用核心場景進行混沌演練，檢驗系統的脆弱性和應急響應能力，從而提升團隊的穩定性保障處理能力。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-cc08de52de41ac5854303f7b55939ec35ff.jpg" referrerpolicy="no-referrer"></p><p><strong>業務側混沌</strong>：對於電商活動密集型的公司來説，各種到達率、曝光率，以及更加宏觀的 GMV、用戶拉新數、用戶召喚數等，都能表現出業務的健康程度，在實際生活中，為了描述一種穩定狀態，我們需要一組指標構成一種模型，而不是單一指標。無論是否採用混沌工程，識別出這類指標的健康狀態都是至關重要的，所以要圍繞它們建立一整套完善的數據採集、監控、預警機制，當業務指標發生波動較大時，我們能搞快速感知、定位、修復止血。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-f656ab86204af67698ca5e53593548d77c9.jpg" referrerpolicy="no-referrer"></p><p><strong>過往數倉混沌工程均是技術側，此次在投放鏈路已搭建完成主備鏈路的前提下，期望通可以通過多輪業務側混沌，提高系統整體的數據異動感知能力。</strong></p><span id="OSC_h1_3"></span><h1>三、演練計劃</h1><p>工欲善其事，必先利其器，在執行混沌演練前，需要準備好前置工作，制定合理的演練 SOP、方案、計劃，對演練環境、腳本、數據、工具，場景及爆炸半徑等進行可能性評估，在確認可行性 ok 的情況下，約好關聯方時間，再進行實踐操作。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-cfdf19906836e41b5cb869b64608d799432.jpg" referrerpolicy="no-referrer"></p><p>本篇主要和大家分享基於業務側的實時數倉混沌演練過程：</p><span id="OSC_h2_4"></span><h2>1.編寫演練 SOP</h2><p>SOP 是一種標準的作業程序，就是將某一事件的操作步驟和要求，進行細化、量化及優化，形成一種標準的操作過程，關於業務側混沌，尤其是實時數倉數據相關的演練，我們也是第一次做，目前在業界也沒有找到相關的演練指導參考，處於探索階段，為了方便項目進度的順利進行及後續演練操作更加規範、高效，在演練前期大家經過溝通、討論後，項目前期梳理的 SOP 演練模板，如下： <img alt="" src="https://oscimg.oschina.net/oscnet/up-b05836c213c5deb4a521e61b8d9bf67f60f.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h2_5"></span><h2>2.演練方案調研</h2><p>先收集實時數倉投放鏈路核心指標範圍，在此基礎上，拉取一段時間內的歷史數據進行分析，找到每個指標對應的健康波動閥值，從而在配置相應的 DQC 規則監控，對於波動不在健康閥值的異常指標，在分鐘級別（預期 15min）內及時告警，並快速排查響應。為此，在演練前期，我們經歷過一系列的方案調研、探索，如下：</p><p><strong>「下文提供的方案，指標數據都是以設備激活數為例進行分析」</strong></p><ul><li><p>方案一: 按照天維度，收集最近一段時間，<strong>同一天每個整點設備激活數，佔當天大盤佔比</strong>，統計出最小值、最大值，作為該指標的健康波動閥值; <img alt="" src="https://oscimg.oschina.net/oscnet/up-5db6bf773388277a477d014346b562cbbc9.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案二: 按照天維度，收集一段時間內，<strong>同一天相鄰整點指標波動</strong>數據找規律，比如每天上午 9 點到 10 點的波動數據，然後分別通過一系列的數學分佈方法進行數據統計，從而希望找一個相對穩定的波動區間； <img alt="" src="https://oscimg.oschina.net/oscnet/up-e6acfa0ba597d5eec2b48a96608a1ded0d4.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案三: 按照天維度，收集一段時間內，<strong>相鄰天整點指標波動</strong>數據找規律，比如昨天上午 9 點到前天上午 9 點的波動數據，然後分別通過一系列的數學分佈方法進行數據統計，從而希望找一個相對穩定的波動區間； <img alt="" src="https://oscimg.oschina.net/oscnet/up-ec085c12fa338ea0704fef3dcc4a96d16fa.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案四:在前面三種方案的基礎上，指標在工作日和週末的波動可能不一樣，所以我們在日維度統計的基礎上，我們也調研了<strong>周維度同比波動</strong>分佈情況，比如每週一上午 9 點到上午 10 點的波動數據，然後分別通過一系列的數學分佈方法進行數據統計，從而希望找一個相對穩定的波動區間； <img alt="" src="https://oscimg.oschina.net/oscnet/up-867fe3fd131a2016e25d162e0a81407fc07.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案五:同理，我們也調研了<strong>周維度環比波動</strong>分佈情況，比如本週一上午 9 點到上週一上午 9 點的波動數據，然後分別通過一系列的數學分佈方法進行數據統計，從而希望找一個相對穩定的波動區間； <img alt="" src="https://oscimg.oschina.net/oscnet/up-3f6117360a9087dea86b7d0a38eb7053db9.jpg" referrerpolicy="no-referrer"></p></li><li><p>方案六：基於主備鏈路，在 source 源相同的情況下，經過實時數倉計算出的指標，在同一段時間兩條鏈路 sink 出來的結果數據，正常應該是保持一致，或者波動較小，比如 10 分鐘延遲的主備鏈路，波動不超過 10%，平均差異做到一致性做到 90% 以上。</p></li></ul><p>方案 1 到 5，都嘗試過一遍，每個方案場景數據通過最大值、最小值、平均值、各百分位分佈、方差、標準差等統計出來的數據分析，很難找到一個相當穩定的波動規律，也無法框定指標具體的閥值區間，實際演練過程，如果設置的波動告警閥值過大，真實生產上業務數據波動異常時，無法及時告警發現；設置過小，將導致告警頻繁，對其準確性、有效性可能存在質疑，而且，實時投放的核心指標有幾十個，每個指標對應的健康閥值都不一樣，要收集、分析成本非常高，從演練的效果上看，也不是很明顯。</p><p><strong>整體評估下來，演練主要採用的是方案六：涉及到的實時投放核心指標數共收集 29 個，一段時間內（15min），主備鏈路指標波動差異不超過 10%。</strong></p><span id="OSC_h2_6"></span><h2>3.演練方式</h2><p>紅藍對抗演練，將團隊分為紅（防）藍（攻）兩組。</p><blockquote><p>測試人員組成藍軍：負責制定混沌演練方案，執行目標系統故障注入，詳細記錄演練過程；</p><p>實時數倉開發為紅軍：負責發現故障、應急響應、排除故障，同時驗證系統在不同故障場景下的容錯能力、監控能力、人員響應能力、恢復能力等可靠性能力。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-f3b6dfa0fc9f4c79a51bf8dda03258b9c04.jpg" referrerpolicy="no-referrer"></p></blockquote><span id="OSC_h1_7"></span><h1>四、演練流程</h1><p>整體演練過程，大致分為三個階段：準備階段、攻防階段及覆盤階段。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-7cd2ed35bed2468d536c47d934484c34db0.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h2_8"></span><h2>1.準備階段</h2><ul><li><p>方案准備完評審通過後，確認好鏈路計劃；</p></li><li><p>藍軍按計劃根據事先制定的攻擊方案，提前準備好相應的測試數據、腳本； ‍</p></li><li><p>紅軍按計劃根據事先制定的攻擊方案，在演練前，提前確保環境可用，並進行監控防禦、應急響應措施。</p></li></ul><span id="OSC_h2_9"></span><h2>2.攻防階段</h2><ul><li><p>藍隊根據事先制定的攻擊方案，模擬真實的攻擊行為，按照約定的時間在演練鏈路（備用鏈路）進行攻擊，進行故障注入，同時記錄好相應的操作步驟，方便後續報告梳理；</p></li><li><p>紅隊在藍軍攻擊後，通過飛書/郵件告警等通知方式實時關注監控系統運行情況，如有異常告警，需第一時間進行問題排查定位，在評估修復方案；</p></li><li><p>在攻防對抗的過程中，藍軍可根據紅軍的防禦措施進行調整和改進攻擊策略，盡力突破系統的防禦並達到既定目標，同時紅軍也可分析藍軍的攻擊手法和行為模型，不斷改進防禦措施來加強防禦。</p></li></ul><span id="OSC_h2_10"></span><h2>3.覆盤和改進階段</h2><ul><li><p>在混沌演練結束後，進行總結和評估，分析紅隊和藍隊的表現，評估系統的安全性和抗攻擊能力；</p></li><li><p>總結經驗教訓，總結成功的防禦措施和失敗的攻擊手法，以便於改進系統的安全策略； ‍</p></li><li><p>根據評估結果和總結經驗，制定改進計劃，修補系統中的漏洞和薄弱點，提升系統的抗風險能力。</p></li></ul><span id="OSC_h1_11"></span><h1>五、攻防實戰</h1><p>本次演練共計有 29 個指標波動 case，整體演練操作大同小異。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-231ad23a9d169ab0aca3cc910ee770bb003.jpg" referrerpolicy="no-referrer"></p><p>以其中 case17 「召回商品收藏 uv 在某個渠道下整點波動異常」為例，<strong>具體的演練操作流程如下。</strong></p><span id="OSC_h2_12"></span><h2>1.數據準備</h2><ul><li>通過後台數據庫，拉出生產主 (備) 鏈路，某個渠道（如<code>media_id</code> = '2'）下某個整點（如<code>hour</code> = 10）下，召回商品收藏 uv 對應的整體統計值 N。</li></ul><pre><code>--渠道小時整點維度下，商品收藏 uv 彙總數據
select
  `指標名稱`,
  `日期`,
  '2' as `指標 ID`,
  `小時段`,
  sum(`指標值`)
from table_a
where
  date = date_format(now(), '%Y%m%d')
  and `指標名稱` in ( '商品收藏 uv' )
  and `小時段` = 10
  AND `指標 id` = '2'
GROUP BY
  `指標名稱`,
  `日期`,
  `小時段`
order by
  指標名稱;
</code></pre><ul><li>拉出備用鏈路，某個渠道（如<code>media_id</code> = '2'）下某個整點（如<code>hour</code> = 10）下，具體的一條明細數據，記錄商品收藏 uv 對應的值為 n,把 n 改為 n+0.1N,後續注入進備用鏈路，從而使得主備波動差異在 10%。</li></ul><pre><code>-- 明細數據
select
  t.指標名稱,t.賬戶 id,t.計劃 ID,t.設備類型,t.指標值
from
  (
    select
      `賬戶 id`,
      `計劃 id`,
      `指標名稱`,
      `指標值`,
      `設備類型` ,
      row_number() over (partition by 指標名稱 order by 指標值 desc ) as rn
    from  table_a
    where
      date = date_format(now(), '%Y%m%d')
      and `指標名稱` in ('商品收藏 uv')
      and `設備類型` = '召回'
      and `小時段` = 10
      AND `指標 id` = '2'
  ) t
where
  t.rn = 1
ORDER BY 指標名稱;
</code></pre><ul><li>整理後得到需要注入的數據數據，見標黃部分。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-ede988eb7f5092a5961838f767529977686.jpg" referrerpolicy="no-referrer"></li></ul><span id="OSC_h2_13"></span><h2>2.故障注入 odps</h2><ul><li>將需要注入的數據導入 odps。</li></ul><p>導入前，需要在 datawork 空間中新建測試表 du_qa_dw_dev.hundun_case，用於導入演練數據</p><pre><code>-- drop table if  EXISTS du_qa_dw_dev.hundun_case;
CREATE TABLE IF NOT EXISTS hundun_case
(
    message  STRING COMMENT '消息內容'
)
COMMENT '混沌演練'
;
</code></pre><ul><li>往 du_qa_dw_dev.hundun_case 表裏灌數。</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9a812903d786097d62990f612ff7aa80cac.jpg" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-46b380b575675ee1cfa3f6fb5dcfd895036.jpg" referrerpolicy="no-referrer"></p><ul><li>驗證數據導入是否成功。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-f1b328461b1a5b283c4e8975019463c0d4d.jpg" referrerpolicy="no-referrer"></li></ul><span id="OSC_h2_14"></span><h2>3.odps 同步到 kafka</h2><p>執行 flink 同步腳本，將 odsp du_qa_dw_dev.hundun_case 表表數據同步到對應的 kafka topic 中。</p><p><strong>flink 任務腳本：</strong></p><pre><code>--SQL
--********************************************************************--
--odps 同步到 kakfa 腳本，用於實時數倉混沌演練異常注入使用
--********************************************************************--
-- 基本函數
CREATE FUNCTION JsonParseField AS 'com.alibaba.blink.udx.log.JsonParseField';
CREATE FUNCTION jsonStringUdf AS 'com.alibaba.blink.udx.udf.JsonStringUdfV2';
---同步賬號表
CREATE TABLE `source` (
message                        VARCHAR  
) WITH (
   'connector' = 'du-odps',
  'endPoint' = '***',
  'project' = '***',
  'tableName' = 'hundun_case_01',
  'accessId' = '*******',
  'accessKey' = '*******'

);

CREATE TABLE `kafka_sink` (
  `messageKey`  VARBINARY,
  `message`  VARBINARY,
  PRIMARY KEY (`messageKey`) NOT ENFORCED
) WITH (
  'connector' = 'du-kafka',
  'topic' = '********',
   'properties.bootstrap.servers' = '*******',
  'properties.compression.type' = 'gzip',
  'properties.batch.size' = '40960',
  'properties.linger.ms' = '1000',
  'key.format' = 'raw',
  'value.format' = 'raw',
  'value.fields-include' = 'EXCEPT_KEY'
);

INSERT INTO kafka_sink
SELECT
cast(MD5(message) as VARBINARY),
cast(message as VARBINARY)
FROM source
;
</code></pre><span id="OSC_h2_15"></span><h2>4.kafka 平台查詢數據</h2><p>執行完 flink 同步任務後，可通過後台查詢，對應的數據是否同步成功。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-1cf077eceab902d334f7a02744f110a4ea3.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h2_16"></span><h2>5.異常注入通知</h2><p>在異常注入完成後，可以通過飛書羣通知，告知紅軍，如收到告警，需第一時間羣告知。</p><blockquote><p>藍軍：藍軍已完成數據準備，請紅軍在演練前確保環境 OK 且已完成規則配置，另外務必將演練時間計劃及時同步通知到下游關聯方；</p><p>藍軍：已完成注入。</p></blockquote><span id="OSC_h2_17"></span><h2>6.告警觸發通知</h2><ul><li>紅軍在演練前，可通過監控平台提前配置好防禦規則。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-db13e71a209e4074cce8a2bbc1a41667f5c.jpg" referrerpolicy="no-referrer"></li><li>在異常注入後，如符合預期，在 15min 內發現指標波動異常，紅軍需及時同步到演練羣中。</li></ul><blockquote><p>中危**雙鏈路主備一致監控</p><p>服務名：**** 環境：****** 告警時間：****** 觸發條件：**雙鏈路比對波動異常，持續 10 分鐘，告警詳情：指標:prd_collect_uv 主對比備下降:[-10%] 主:1066 備:956</p><p>業務域：實時數倉</p><p>應用負責人：***</p></blockquote><ul><li>如不符合預期，未在 15min 內發現指標波動異常，紅軍需及時定位、跟進問題，並在修復後，溝通後續演練驗證修復結果。</li></ul><blockquote><p>紅軍：15min 內未收到告警，定位中</p><p>紅軍：原因已找到，由於***造成，導致告警數據沒有及時發出，正在修復處理</p><p>紅軍：已修復，請紅軍重新發起攻擊</p></blockquote><span id="OSC_h2_18"></span><h2>7.演練過程記錄</h2><p>收集、彙總記錄演練過程中的每個操作，含時間點、執行人、操作等，如下： <img alt="" src="https://oscimg.oschina.net/oscnet/up-464e3d7975b42956cc2007407a22290fcce.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h1_19"></span><h1>六、演練總結</h1><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-679f8b1b380d497f60dc055e5eb209dc097.jpg" referrerpolicy="no-referrer"></p><span id="OSC_h1_20"></span><h1>七、未來展望</h1><p>實時數倉業務側的混沌演練，從 0 到 1，在經過一系列的探索實踐後，通過主備鏈路比對方式，演練期間對於異常波動的指標，可以快速識別感知，從演練結果上，取得了不錯的成效，但也存在一定的侷限性，如：</p><ul><li><p>演練期間，通過人工注入的異常數據，如無法快速清除，可能影響到備用鏈路使用。</p></li><li><p>對於沒有備鏈路的實時指標波動，需要制定更精細化的可行方案，找尋指標健康波動範圍。</p></li></ul><p>這些都需要團隊進一步去探索、解決，同時在演練的過程中，我們將不斷積累、豐富演練 case、完善演練庫，後續計劃通過引入工具（平台）、建立演練協助機制、定期定時演練等手段，使混沌演練更加自動化、規範化、常態化，提高實時數倉整體數據穩定。 <img alt="" src="https://oscimg.oschina.net/oscnet/up-44be503ee4b17e831ef9e2fabf906b71236.jpg" referrerpolicy="no-referrer"> *文 / 袁宵</p><p>本文屬得物技術原創，更多精彩文章請看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F" rel="nofollow" target="_blank">得物技術官網</a></p><p>未經得物技術許可嚴禁轉載，否則依法追究法律責任！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 03:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10112796</guid>
            <link>https://my.oschina.net/u/5783135/blog/10112796</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Visopsys 0.92 發佈，小型操作系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Visopsys 是一個 PC 機的操作系統，系統小型、快速而且開源。有着豐富的圖形界面、搶先式多任務機制以及支持虛擬內存。Visopsys 視圖兼容很多操作系統，但並不是他們的克隆版本。Visopsys 0.92 現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.osnews.com%2Fstory%2F137195%2Fvisopsys-0-92-released%2F" target="_blank">發佈</a>，此維護版本引入了多任務處理程序、文件系統、文本編輯器和網絡程序的可用性和穩定性改進，以及許多錯誤修復。</span></p><p><span style="color:#000000">具體更新內容包括：</span></p><ul><li><span style="color:#000000">添加了對 64 位 EXT 文件系統的支持（read-only，和以前一樣）。</span></li><li><span style="color:#000000">實施了一系列步驟來更改內核的多任務處理程序以使用軟件任務切換，而不是使用處理器功能。這是添加 x86_64 版本的先決條件。</span><ol><li><span style="color:#000000">實現了 contextSwitch() 函數。</span></li><li><span style="color:#000000">添加了一個「collector」線程來完成清理已完成進程的工作，而不是在調度程序本身內進行。</span></li><li><span style="color:#000000">取消了 x86 IDT &nbsp;task gates 的使用，並刪除了多任務程序的調度程序進程並將其轉換為中斷處理程序。</span></li></ol></li><li><span style="color:#000000">更新了「edit」文本編輯器程序以添加「New」和「Save As」菜單項，使其更符合其他編輯器使用的慣例。當在沒有文件名的情況下調用或創建「New」文檔時，「Save」菜單項將被禁用。停止為未保存文檔使用臨時文件。</span></li><li><span style="color:#000000">添加了一個窗口庫「cancel」對話框，用於停止正在進行的操作。</span></li><li><span style="color:#000000">由於通過 TCP 連接可能會阻塞相當長的時間，因此網絡程序現在使用可以通過新的「cancel」對話框終止的連接線程。</span></li><li><span style="color:#000000">為數據包嗅探器添加了過濾（例如僅 TCP、僅 ARP 等）。默認情況下，顯示所有網絡數據包。左側面板底部的一個新按鈕將彈出一個對話框窗口，允許用戶（取消）選擇要顯示的各種類型的數據包。</span></li><li><span style="color:#000000">添加了「errno」程序來打印與錯誤代碼相關的錯誤消息。</span></li><li><span style="color:#000000">更新了內核的 MD5 hashing 函數以（正確）匹配更現代的 SHA1 和 SHA256 代碼的用法和行為。</span></li><li><span style="color:#000000">刪除了「md5」程序，並將其替換為「md5pass」和「md5sum」程序，分別用於 hashing 字符串和文件。</span></li><li><span style="color:#000000">在 kernelFile.c 中的 freeEntries 列表中添加了一個鎖。</span></li><li><span style="color:#000000">在目錄 fileEntry 結構中添加或刪除條目列表時添加了鎖定。</span></li><li><span style="color:#000000">添加了標準 C 庫函數 strndup()。</span></li><li><span style="color:#000000">向 C 庫添加了全局錯誤字符串表，並將 strtol() 和 family 的定義從 &lt;stdio.h&gt; 移至 &lt;stdlib.h&gt;。</span></li><li><span style="color:#000000">更改了「test」程序的 file_ops 測試以在 /temp 中創建其臨時目錄，以便即使在只讀啓動磁盤上它也可以默認工作。</span></li><li><span style="color:#000000">已修復：VmWare 虛擬 SATA 磁盤的 SATA 驅動程序問題。初始磁盤枚舉期間 SATA AHCI DMA 模式設置出錯。</span></li><li><span style="color:#000000">已修復：創建縮略圖或單擊多個圖像時 Jpeg 加載和/或調整圖像大小的問題。在許多情況下，創建了縮略圖，但&nbsp;View 程序在加載縮略圖時會報錯。</span></li><li><span style="color:#000000">已修復：從只讀文件系統 (CD) 啓動時，按 PrtScn 可能會導致頁面錯誤，並在控制枱上顯示錯誤消息，顯示「文件系統是隻讀的」和「無法打開 [文件] 進行寫入」。</span></li><li><span style="color:#000000">已修復：當從只讀介質/磁盤（例如 CD/DVD）啓動時，單擊程序窗口中的文本編輯器時，會顯示錯誤對話框「Error -11 loading fil」。</span></li><li><span style="color:#000000">已修復：掛載新文件系統時，它會出現在目錄列表中按字母順序排序的其他項目之前。最近安裝的文件系統始終作為其安裝點父目錄中的第一個條目插入，因為尚未設置文件名。</span></li><li><span style="color:#000000">已修復：內核 API 在 high 32 bits 中返回不正確的 64 位值。例如，「ls」命令顯示的空閒字節值和「ping」命令顯示的時間值顯然是錯誤的。</span></li><li><span style="color:#000000">已修復：嘗試遍歷空窗口容器可能會導致「Can’t allocate zero bytes」錯誤被記錄到控制枱，例如在首次啓動屏幕上切換語言後。</span></li><li><span style="color:#000000">修復了使用「clang」編譯器構建時產生的一些警告。</span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259188/visopsys-0-92-released</guid>
            <link>https://www.oschina.net/news/259188/visopsys-0-92-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IntelliJ IDEA 2023.3 EAP 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#19191c">第一個 IntelliJ IDEA 2023.3 EAP 版本現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F09%2Fintellij-idea-2023-3-eap%2F" target="_blank">發佈</a>，此版本提供了一系列 UI/UX 增強功能和對 GitLab snippets 的支持，以及對索引過程和 IDE 啓動速度的改進。</span></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>用戶體驗</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>在 default viewing 模式下隱藏主工具欄的選項</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>提供了一個選項，可以在使用 IDE 的 default viewing 模式時隱藏主工具欄，與在舊 UI 中一樣。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b7dc9e77ae4c9a387497b2b1aaed16f8342.gif" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>默認工具窗口布局選項&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>隨着 IntelliJ IDEA 2023.1 的發佈，引入了保存多個工具窗口布局並在它們之間切換的功能，從而增強了工作區的可定製性。在第一個 IntelliJ IDEA 2023.3 EAP 版本中，通過引入「Default layout」選項來擴展此功能，該選項提供了一種將工作區的外觀恢復為其默認狀態的快速方法。此佈局不可自定義，可通過 Window | Layouts 訪問。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img height="453" src="https://oscimg.oschina.net/oscnet/up-e2d257524a8a33a36598782f371f51a2102.png" width="1124" referrerpolicy="no-referrer"></p><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>默認情況下編輯器選項卡的彩色編碼高亮顯示</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>為了增強用戶在編輯器中同時處理多種文件類型時的導航體驗，此版本為編輯器選項卡引入了默認的彩色編碼高亮顯示，與項目工具窗口中的顯示效果一致。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="201" src="https://oscimg.oschina.net/oscnet/up-c98835bb1dc0b2b4af3bfa4ebfcdcafe2fb.png" width="500" referrerpolicy="no-referrer"></p><p><img height="202" src="https://oscimg.oschina.net/oscnet/up-d022110fecd232c86aa85a82ece1086e4f5.png" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h3 style="margin-left:0; margin-right:0"><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>macOS 的新產品圖標&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></h3></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>隨着 IntelliJ IDEA 2023.3 EAP 的發佈，重新設計了適用於 macOS 的 IntelliJ IDEA 圖標，使其符合操作系統的標準樣式指南。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><img height="200" src="https://oscimg.oschina.net/oscnet/up-72677c825eb94ddada25bae58e9e2446b46.png" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>Java</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>Java 21 支持</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此版本已經成功集成了對最新<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fprojects%2Fjdk%2F21%2F" target="_blank">Java 21</a>功能的支持。包括虛擬線程、記錄模式、<code>switch</code>表達式的模式匹配和序列集合等重要新增功能，以及字符串模板、作用域值等新引入語言功能的預覽。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="200" src="https://oscimg.oschina.net/oscnet/up-a93c5663612262c7296f7bdd9744894e4cd.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" height="200" src="https://oscimg.oschina.net/oscnet/up-f85dd5121e4880c4e77bc8598b7d675c9cf.gif" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><img height="200" src="https://oscimg.oschina.net/oscnet/up-0de0b47d00eb8fd6847932d699311a2b003.png" width="500" referrerpolicy="no-referrer"></h4><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>版本控制系統</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>支持 GitLab snippets</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>為了擴展 IntelliJ IDEA 2023.2 版本中引入的&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fblog%2F2023%2F07%2F26%2Fgitlab-support-in-jetbrains-ide%2F" target="_blank">GitLab 集成</a>，此版添加了對<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.gitlab.com%2Fee%2Fuser%2Fsnippets.html" target="_blank">GitLab snippets</a>的支持。用戶現在可以直接在 IDE 中創建公共或私有代碼片段。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5825979606f6bf31e3bc766b85211395910.gif" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>Performance</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4></div><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span>默認啓用共享 JDK 索引的下載&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>IntelliJ IDEA 將在後台無縫連接到專用資源，自動獲取並應用 JDK 的共享索引。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>有關此 EAP 版本中的更改的完整列表，可閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Farticles%2FIDEA-A-2100661680%2FIntelliJ-IDEA-2023.3-EAP-1-233.6745.305-build-Release-Notes" target="_blank">發行説明</a>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 21 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259186/intellij-idea-2023-3-eap</guid>
            <link>https://www.oschina.net/news/259186/intellij-idea-2023-3-eap</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[華為開源 openInula 前端框架，兼容 React API 和生態]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">lnula（發音為：[ˈɪnjʊlə]）。openInula 是一款用於構建用戶界面的 JavaScript 庫，提供響應式 API 幫助開發者簡單高效構建 web 頁面，比傳統虛擬 DOM 方式渲染效率提升 30% 以上！同時 InulaJS 提供與 React 保持一致的 API，並且提供 5 大常用功能豐富的核心組件：狀態管理器、路由、國際化、請求組件、應用腳手架，以便開發者高效、高質量的構築基於 InulaJS 的前端產品。</p><h2 style="margin-left:0; margin-right:0; text-align:left">技術架構</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://static.oschina.net/uploads/img/202309/23073740_6lHO.png" referrerpolicy="no-referrer"></p><h3 style="margin-left:0; margin-right:0; text-align:left">核心能力</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>響應式 API</strong></p><ul><li>openInula 通過最小化重新渲染的範圍，從而進行高效的 UI 渲染。這種方式避免了虛擬 DOM 的開銷，使得 openInula 在性能方面表現出色。</li><li>openInula 通過比較變化前後的 JavaScript 對象以細粒度的依賴追蹤機制來實現響應式更新，無需用戶過度關注性能優化。</li><li>簡潔 API：
<ol style="list-style-type:lower-roman"><li>openInula 提供了兩組簡潔直觀的 API--響應式 API 和與 React 一致的傳統 API，使得開發者可以輕鬆地構建複雜的交互式界面。</li><li>openInula 簡潔的 API 極大降低了開發者的學習成本，開發者使用響應式 API 可以快速構建高效的前端界面。</li></ol></li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>兼容 ReactAPI</strong></p><ul><li>與 React 保持一致 API 的特性、可以無縫支持 React 生態。</li><li>使用傳統 API 可以無縫將 React 項目切換至 openInula，React 應用可零修改切換至 openInula。</li></ul><h3 style="margin-left:0; margin-right:0; text-align:left">openInula 配套組件</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>狀態管理器/inula-X</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-X 是 openInula 默認提供的狀態管理器，無需額外引入三方庫，就可以簡單實現跨組件/頁面共享狀態。 inula-X 與 Redux 比可創建多個 Store，不需要在 Reducer 中返回 state 並且簡化了 Action 和 Reducer 的創建步驟，原生支持異步能力，組件能做到精準重渲染。inula-X 均可使用函數組件、class 組件，能提供 redux 的適配接口及支持響應式的特點。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>路由/inula-router</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-router 是 openInula 生態組建的一部分，為 openInula 提供前端路由的能力，是構建大型應用必要組件。 inula-router 涵蓋 react-router、history、connect-react-router 的功能。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>請求/inula-request</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-request 是 openInula 生態組件，涵蓋常見的網絡請求方式，並提供動態輪詢鈎子函數給用戶更便捷的定製化請求體驗。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>國際化/inula-intl</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">lnula-intl 是基於 openInula 生態組件，其主要提供了國際化功能，涵蓋了基本的國際化組件和鈎子函數，便於用戶在構建國際化能力時方便操作。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>調試工具/inula-dev-tools</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">inula-dev-tools 是一個為 openInula 開發者提供的強大工具集，能夠方便地查看和編輯組件樹、管理應用狀態以及進行性能分析，極大提高了開發效率和診斷問題的便捷性。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>腳手架/inula-cli</strong></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">lnula-cli 是一套針對 openInula 的編譯期插件，它支持代碼優化、JSX 語法轉換以及代碼分割，有助於提高應用的性能、可讀性和可維護性。</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 23:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/openinula</guid>
            <link>https://www.oschina.net/p/openinula</link>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 23.10 Beta]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Ubuntu 23.10 "Mantic Minotaur" 首個 Beta 已發佈，正式版計劃於 10 月 12 日推出。</p><p>下載地址：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Freleases.ubuntu.com%2F23.10%2F" target="_blank">https://releases.ubuntu.com/23.10/</a></u></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-541beee395c5d41cd656c0e10c9a6540913.png" referrerpolicy="no-referrer"></p><p><strong>主要變化</strong></p><ul><li>內核採用最新的 Linux 6.5 系列</li><li>默認啓用多代 LRU 頁面回收</li><li>支持 idmapped Ceph 掛載</li><li>桌面環境採用 GNOME 45</li><li>使用 Wayland 時默認啓用原生 Wayland 模式會話，以獲得更快的瀏覽體驗</li><li>支持基於 TPM 的全磁盤加密</li><li>預裝採用 Flutter 編寫的全新應用商店 "App Center"</li><li>使用 Netplan 作為 NetworkManager 的默認設置存儲後端</li></ul><p>此前曾報道過上文提到的部分變化：</p><ul><li><a href="https://www.oschina.net/news/258253/ubuntu-23-10-zfs-install" target="_blank">Ubuntu 23.10 安裝工具恢復支持 ZFS 文件系統</a></li><li><a href="https://www.oschina.net/news/257464/ubuntu-23-10-tpm-fde" target="_blank">Ubuntu 23.10 支持基於 TPM 的全磁盤加密</a></li><li><a href="https://www.oschina.net/news/247869/ubuntu-23-10-new-app-store-deb-support" target="_blank">Ubuntu 23.10 引入新的「應用商店」，優先支持 Snap 格式</a></li><li><a href="https://www.oschina.net/news/256910/gnome-45-arrives-in-ubuntu-23-10" target="news">Ubuntu 23.10 每日構建版已搭載 GNOME 45</a></li><li><a href="https://www.oschina.net/news/250357/ubuntu-noto-fonts-change" target="_blank">Ubuntu 23.10 調整字體包，將 DejaVu 替換為 Noto</a></li><li><a href="https://www.oschina.net/news/255590/ubuntu-23-10-no-gimp-3-0" target="_blank">Ubuntu 23.10 不會預裝 GIMP 3.0 測試版</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 10:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259137/ubuntu-23-10-beta-released</guid>
            <link>https://www.oschina.net/news/259137/ubuntu-23-10-beta-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
