<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 27 Dec 2023 02:01:36 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 物聯網終端操作系統 TencentOS Tiny]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-開放原子開源基金會首批孵化項目" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%BC%80%E6%94%BE%E5%8E%9F%E5%AD%90%E5%BC%80%E6%BA%90%E5%9F%BA%E9%87%91%E4%BC%9A%E9%A6%96%E6%89%B9%E5%AD%B5%E5%8C%96%E9%A1%B9%E7%9B%AE"></a>開放原子開源基金會首批孵化項目</h1><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_log.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fblob%2Fmaster%2FLICENSE"><img src="http://img.shields.io/badge/license-BSD-blue.svg" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fpulls"><img src="https://img.shields.io/badge/PRs-welcome-blue.svg" alt="PRs Welcome" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/README_en.md">(English Documents Available)</a></p><h1><a id="user-content-一 tencentos-tiny-簡介" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%80tencentos-tiny-%E7%AE%80%E4%BB%8B"></a>一、TencentOS Tiny 簡介</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Ftos-tiny">TencentOS tiny</a> 是騰訊面向物聯網領域開發的實時操作系統，具有低功耗，低資源佔用，模塊化，安全可靠等特點，可有效提升物聯網終端產品開發效率。TencentOS tiny 提供精簡的 RTOS 內核，內核組件可裁剪可配置，可快速移植到多種主流 MCU (如 STM32 全系列) 及模組芯片上。而且，基於 RTOS 內核提供了豐富的物聯網組件，內部集成主流物聯網協議棧（如 CoAP/MQTT/TLS/DTLS/LoRaWAN/NB-IoT 等），可助力物聯網終端設備及業務快速接入騰訊雲物聯網平台。</p><h2><a id="user-content-1tencentos-tiny 整體架構" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1tencentos-tiny%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84"></a>1、TencentOS tiny 整體架構</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_Architecture.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 主體架構圖，從下到上主要包括：</p><p><strong>CPU 庫</strong> ：TencentOS tiny 支持的 CPU IP 核架構，當前主要支持 ARM Cortex M0/3/4/7，Cortex A7，RISC-V、MSP430、AVR、STM8 等。</p><p><strong>驅動管理層</strong> ：包括板級支持包（BSP，主要由 MCU 芯片廠家開發與維護）、硬件抽象層（HAL，主要由 TencentOS tiny 提供，方便不同芯片的適配與移植）、設備驅動（Drivers，例如 Wi-Fi、GPRS、LoRa 等模塊的驅動程序）。</p><p><strong>內核</strong> ：TencentOS tiny 實時內核包括任務管理、實時調度、時間管理、中斷管理、內存管理、異常處理、軟件定時器、鏈表、消息隊列、信號量、互斥鎖、事件標誌等模塊。</p><p><strong>IoT 協議棧</strong>：TencentOS tiny 提供 lwip、AT Adapter、SAL 層，支持不同的網絡硬件，例如以太網、串口 Wi-Fi、GPRS、NB-IoT、4G 等通信模塊。TCP/IP 網絡協議棧上提供常用的物聯網協議棧，例如 CoAP、MQTT，支撐終端業務快速接入騰訊雲。</p><p><strong>安全框架</strong>：TencentOS tiny 為了確保物聯網終端數據傳輸安全以及設備認證安全，提供了完整的安全解決方案。安全框架提供的 DTLS 和 TLS 安全協議，加固了 COAP 及 MQTT 的傳輸層，可確保物聯網終端在對接騰訊雲時實現安全認證和數據加密；另外針對低資源的終端硬件，安全框架還提供與騰訊雲 IoTHub 配套的密鑰認證方案，確保資源受限設備也能在一定程度上實現設備安全認證。</p><p><strong>組件框架</strong>：TencentOS tiny 提供文件系統、KV 存儲、自組網、JS 引擎、低功耗框架、設備框架、OTA、調試工具鏈等一系列組件，供用戶根據業務場景選用。</p><p><strong>開放 API（規劃開發中）</strong>：TencentOS tiny 將在協議中間件和框架層上提供開放 API 函數，方便用戶調用中間件功能，使用戶無需過多關心中間件具體實現，快速對接騰訊雲，實現終端業務上雲的需求，期望最大程度減少終端物聯網產品開發週期，節省開發成本。</p><p><strong>示例應用</strong>：TencentOS tiny 提供的示例代碼，模塊測試代碼等，方便用戶參考使用。</p><h2><a id="user-content-2tencentos-tiny-優勢" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E4%BC%98%E5%8A%BF"></a>2、TencentOS tiny 優勢</h2><h3><a id="user-content-1 小體積" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E5%B0%8F%E4%BD%93%E7%A7%AF"></a>(1).小體積</h3><p>最小內核：RAM 0.6KB，ROM 1.8KB
典型 LoraWAN 及傳感器應用：RAM 3.3KB，ROM 12KB</p><h3><a id="user-content-2 低功耗" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2%E4%BD%8E%E5%8A%9F%E8%80%97"></a>(2).低功耗</h3><p>休眠最低功耗低至 2uA
支持外設功耗管理框架</p><h3><a id="user-content-3 豐富的-iot-組件" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3%E4%B8%B0%E5%AF%8C%E7%9A%84-iot-%E7%BB%84%E4%BB%B6"></a>(3).豐富的 IoT 組件</h3><p>集成主流 IoT 協議棧
多種通信模組 SAL 層適配框架；
支持 OTA 升級
提供簡單易用端雲 API，加速用戶業務接入騰訊雲</p><h3><a id="user-content-4 可靠的安全框架" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#4%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6"></a>(4).可靠的安全框架</h3><p>多樣化的安全分級方案
均衡安全需求&amp;成本控制</p><h3><a id="user-content-5 良好的可移植性" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#5%E8%89%AF%E5%A5%BD%E7%9A%84%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7"></a>(5).良好的可移植性</h3><p>內核及 IoT 組件高度解耦，提供標準適配層
提供自動化移植工具，提升開發效率</p><h3><a id="user-content-6 便捷的調試手段" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#6%E4%BE%BF%E6%8D%B7%E7%9A%84%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5"></a>(6).便捷的調試手段</h3><p>提供雲化的最後一屏調試功能
故障現場信息自動上傳雲平台，方便開發人員調試分析</p><h2><a id="user-content-3tencentos-tiny 攜手合作夥伴共建 iot 生態" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny%E6%90%BA%E6%89%8B%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%E5%85%B1%E5%BB%BAiot%E7%94%9F%E6%80%81"></a>3、TencentOS tiny 攜手合作夥伴共建 IoT 生態</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/Partners.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 自開源發佈以來也在努力發展合作伙伴，期待合作共贏，共同擴展 IoT 應用生態。目前已經與多家 MCU/IP 核廠家達成了合作，包括意法半導體、恩智浦半導體、兆易半導體、ARM、華大半導體、芯來科技等；也與無線 SOC 和模組廠家達成了廣泛的合作關係，包括瑞興恆方、國民技術、Nordic 藍牙、亮牛半導體、有人物聯網等，</p><p>除了 MCU 和模組外，TencentOS tiny 也積極推進終端產品及項目的落地，目前已經形成了 AI 智慧農業、智能貨櫃、智慧會議室等方案，並且在騰訊內部與微信支付、騰訊雲智慧行業、 AI 平台部、騰訊微瓴、QQ family 達成內部合作，共同擴展行業生態；同時也開始積極發展外部客戶，目前與深圳光合顯示科技的墨水屏零售標籤、鑫悅購充電樁等達成業務合作。TencentOS tiny 將攜手合作夥伴為物聯網終端廠家提供更優質的 IoT 終端軟件解決方案，方便各種物聯網設備快速接入騰訊雲，共同擴展 IoT 生態，更好地支撐智慧城市、智能水錶、智能家居、智能穿戴、車聯網等多種行業應用。</p><p>歡迎 IoT 相關項目合作，有合作需求的請郵件聯繫 TencentOS tiny 官方工作人員，郵箱地址 ： <a href="mailto:supowang@tencent.com">supowang@tencent.com</a></p><h1><a id="user-content-二 tencentos-tiny-代碼目錄" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%8Ctencentos-tiny-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95"></a>二、TencentOS tiny 代碼目錄</h1><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/09.Code_Directories.md">TencentOS tiny 代碼目錄説明</a></li></ul><h1><a id="user-content-三 tencentos-tiny-參考文檔" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%89tencentos-tiny-%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>三、TencentOS tiny 參考文檔</h1><h2><a id="user-content-1 移植指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E7%A7%BB%E6%A4%8D%E6%8C%87%E5%8D%97"></a>1、移植指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/10.Porting_Manual_for_KEIL.md">TencentOS tiny 移植指南（KEIL 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/11.Porting_Manual_for_IAR.md">TencentOS tiny 移植指南（IAR 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/12.Porting_Manual_for_GCC.md">TencentOS tiny 移植指南（GCC 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/mdk_pack/Documentation/README.md">TencentOS tiny 移植指南（基於 MDK pack)</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/STM32CubeMX_pack/Documentation/README.md">TencentOS tiny 移植指南（基於 STM32 CubeMx)</a></li></ul><h2><a id="user-content-2tencentos-tiny-開發指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97"></a>2、TencentOS tiny 開發指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/04.Development_Manual.md">TencentOS tiny 內核開發指南</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/05.SDK_Manual.md">TencentOS tiny API 參考</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/08.QCloud_IoTHub_Quick_Start.md">TencentOS tiny 對接騰訊雲 IoTHub 開發指南</a></li></ul><h2><a id="user-content-3tencentos-tiny-騰訊雲大學視頻教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%A4%A7%E5%AD%A6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>3、TencentOS tiny 騰訊雲大學視頻教程</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fedu%2Fpaths%2Fseries%2FIoT">TencentOS tiny 端側開發實踐課</a></li></ul><h1><a id="user-content-四 tencentos-tiny-開源協議" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%9B%9Btencentos-tiny-%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>四、TencentOS tiny 開源協議</h1><ul><li>TencentOS tiny 遵循 <a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/LICENSE">BSD-3 開源許可協議</a></li></ul><h1><a id="user-content-五 tencentos-tiny-支持的物聯網平台" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%94tencentos-tiny-%E6%94%AF%E6%8C%81%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0"></a>五、TencentOS tiny 支持的物聯網平台</h1><p>TencentOS tiny 能支持物聯網終端設備和業務快速接入<a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Fiotexplorer">騰訊雲物聯網平台 IoT Explorer</a>。</p><p>TencentOS tiny 結合騰訊雲物聯網開發平台 IoT Explorer，已經構築起連接通訊芯片到雲開發的能力，加上已經建設完成的國內最大規模 LoRa 網絡，騰訊徹底打通從芯片通訊開發、網絡支撐服務，物理設備定義管理，數據分析和多場景應用開發等全鏈條 IoT 雲開發服務能力，重新定義了物聯網開發模式，助力億級設備多方式多模式低門檻接入騰訊雲服務。作為物聯網基礎設施建設服務者，騰訊將持續打造開放的物聯網生態體系，促進物聯網生態良性發展。</p><h1><a id="user-content-六 tencentos-tiny-快速入門參考" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%ADtencentos-tiny-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%82%E8%80%83"></a>六、TencentOS tiny 快速入門參考</h1><p>TencentOS tiny 聯合合作夥伴 (南京厚德物聯網) 設計了定製開發板，如下圖：
<img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/EVB_MX.png" alt="" referrerpolicy="no-referrer"></p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.holdiot.com%2Fproduct%2Fshowproduct.php%3Fid%3D8">TencentOS tiny 定製開發板介紹頁</a>，開發者可以基於定製開發板進行快速入門學習，點擊下載參考文檔</li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/15.TencentOS_tiny_EVB_MX_Plus_Quick_Start.md">TencentOS-tiny 定製開發板入門指南</a></li></ul><h1><a id="user-content-七貢獻代碼" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%83%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81"></a>七、貢獻代碼</h1><ul><li><ol><li>在您自己的 GitHub 賬戶下 Fork TencentOS tiny 開源項目；</li></ol></li><li><ol start="2"><li>根據您的需求在本地 clone 一份 TencentOS tiny 代碼；</li></ol></li><li><ol start="3"><li>您修改或者新增功能後，push 到您 fork 的遠程分支；</li></ol></li><li><ol start="4"><li>創建 pull request，向 TencentOS tiny 官方開發分支提交合入請求；</li></ol></li><li><ol start="5"><li>TencentOS tiny 研發團隊會定期 review 代碼，通過測試後合入。</li></ol></li></ul><h1><a id="user-content-八加入 tencentos-tiny 官方 qq 技術交流羣" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%AB%E5%8A%A0%E5%85%A5tencentos-tiny%E5%AE%98%E6%96%B9qq%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>八、加入 TencentOS tiny 官方 QQ 技術交流羣</h1><p>掃碼加羣，請備註 TencentOS tiny 開發者，工作人員會根據備註進行審核：</p><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/qq.png" alt="" referrerpolicy="no-referrer"></p><h1><a id="user-content-九第三方開發者評測" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B9%9D%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E5%8F%91%E8%80%85%E8%AF%84%E6%B5%8B"></a>九、第三方開發者評測</h1><p>1.基於 TencentOS tiny 的環境監測實戰項目
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav73782956%3Ffrom%3Dsearch%26seid%3D4421984671929108231">【TencentOS tiny】環境監測實戰項目最終完整版</a>
感謝阿正的貢獻</p><p>2.基於野火 stm32f103 開發板上移植的 TencentOS tiny 例程、源碼剖析、視頻講解。
感謝 CSDN 博客專家傑傑的貢獻</p><h2><a id="user-content-簡單上手" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B"></a>簡單上手：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101034426">超詳細的 TencentOS tiny 移植到 STM32F103 全教程</a></li></ul><h2><a id="user-content-深度源碼分析" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E6%B7%B1%E5%BA%A6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"></a>深度源碼分析：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99618912">【TencentOS tiny 學習】源碼分析（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99665883">【TencentOS tiny 學習】源碼分析（2）——調度器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99687678">【TencentOS tiny 學習】源碼分析（3）——隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99781093">【TencentOS tiny 學習】源碼分析（4）——消息隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100052643">【TencentOS tiny 學習】源碼分析（5）——信號量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100056641">【TencentOS tiny 學習】源碼分析（6）——互斥鎖</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100492219">【TencentOS tiny 學習】源碼分析（7）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101846089">【TencentOS tiny 學習】源碼分析（8）——軟件定時器</a></p></li></ul><h2><a id="user-content-配套例程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E9%85%8D%E5%A5%97%E4%BE%8B%E7%A8%8B"></a>配套例程：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2Fhello-world">【TencentOS tiny 學習】例程（0）——hello world</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F01-task">【TencentOS tiny 學習】例程（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F02-queue">【TencentOS tiny 學習】例程（2）——隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F03-msg_queue">【TencentOS tiny 學習】例程（3）——消息隊列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F04-sem">【TencentOS tiny 學習】例程（4）——信號量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F05-mutex">【TencentOS tiny 學習】例程（5）——互斥鎖</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F06-event">【TencentOS tiny 學習】例程（6）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F07-timer">【TencentOS tiny 學習】例程（7）——軟件定時器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F08-mmblk">【TencentOS tiny 學習】例程（8）——內存池</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F09-mmheap">【TencentOS tiny 學習】例程（9）——內存堆</a></p></li></ul><h2><a id="user-content-視頻教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>視頻教程：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%3Ffrom%3Dsearch%26seid%3D10160676184801585522">【TencentOS tiny 學習】視頻彙總</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D1">【視頻】01-初識 TencentOS tiny</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D2">【視頻】02-TencentOS tiny 基礎知識</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D3">【視頻】03-TencentOS tiny 移植</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D4">【視頻】04-TencentOS tiny 任務-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D5">【視頻】05-TencentOS tiny 任務-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D6">【視頻】06-TencentOS tiny 隊列-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D7">【視頻】07-TencentOS tiny 隊列-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D8">【視頻】08-TencentOS tiny 消息隊列</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D9">【視頻】09-TencentOS tiny 信號量-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D10">【視頻】10-TencentOS tiny 信號量-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【視頻】11-TencentOS tiny 互斥鎖-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D12">【視頻】12-TencentOS tiny 互斥鎖-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D13">【視頻】13-TencentOS tiny 互斥鎖-3</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D14">【視頻】14-TencentOS tiny 事件-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D15">【視頻】15-TencentOS tiny 事件-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D16">【視頻】16-TencentOS tiny 軟件定時器-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【視頻】17-TencentOS tiny 軟件定時器-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D18">【視頻】18-TencentOS tiny 軟件定時器-3</a></li></ul><h2><a id="user-content-相關 ppt 資料" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%9B%B8%E5%85%B3ppt%E8%B5%84%E6%96%99"></a>相關 PPT 資料：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2FPPT">【TencentOS tiny 學習】視頻 PPT</a></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 01:54:32 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/TencentOS/TencentOS-tiny</guid>
            <link>https://gitee.com/TencentOS/TencentOS-tiny</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | vivo 容器平台資源運營實踐]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">作者：vivo 互聯網服務器團隊 - Chen Han</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="font-size: 14px;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p style="text-wrap: wrap;">容器平台針對業務資源申請值偏大的運營問題，通過靜態超賣和動態超賣兩種技術方案，使業務資源申請值趨於合理化，提高平台資源裝箱率和資源利用率。</p></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、背景</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">在 Kubernetes 中，容器申請資源有 request 和 limit 概念來描述資源請求的最小值和最大值。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">requests 值在容器調度時會結合節點的資源容量 (capacity) 進行匹配選擇節點</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">。</span></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">limits 表示容器在節點運行時可以使用的資源上限，當嘗試超用資源時，CPU 會被約束 (throttled)，內存會終止 (oom-kill)。</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">總體而言，在調度的時候 requests 比較重要，在運行時 limits 比較重要。在實際使用時，容器資源規格 request 和 limit 的設置規格也一直都讓 Kubernetes 的用戶飽受困擾：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">對業務運維人員</span></strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">：希望預留相當數量的資源冗餘來應對上下游鏈路的負載波動</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">，保障線上應用的穩定性。</span></p></li><li><p style="text-wrap: wrap;"><strong><span style="letter-spacing: 0.034em;">對平台人員</span></strong><span style="letter-spacing: 0.034em;">：集羣的資源裝箱率高，節點利用率低，存在大量的空閒資源無法調度，造成算力浪費。</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、現狀</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 vivo 容器平台介紹</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">vivo 容器平台基於 Kubernetes 技術對內部業務提供容器服務。內部業務統一在 CICD 平台部署和管理容器資源，容器平台自研的 caas-openapi 組件提供 restful 接口與 CICD 交互。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">平台通過標籤，從資源維度邏輯上可以分為測試池、共享池、專有池、混部池。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="font-size: 14px;text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;background-color: rgb(239, 239, 239);">測試池</span></strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;background-color: rgb(239, 239, 239);">：為業務部署容器測試，一般非現網業務，為業務測試提供便利。</span><br></p></li><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;">共享池</span></strong><span style="font-size: 15px;">：為業務不感知物理機，類似公有云全託管容器服務。</span></p></li><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;letter-spacing: 0.034em;">專有池</span></strong><span style="font-size: 15px;letter-spacing: 0.034em;">：為業務獨享物理機，類似公有云半托管容器服務，業務方獨佔資源，容器平台維護。</span></p></li><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;letter-spacing: 0.034em;">混部池</span></strong><span style="font-size: 15px;letter-spacing: 0.034em;">：為業務獨享物理機，在專有池基礎上，混部離線業務，緩解離線資源缺口，提升整機利用率。</span></p></li></ul></section></section></section><p style="text-align: center;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014003" data-ratio="0.5453315290933695" data-s="300,640" src="https://oscimg.oschina.net/oscnet/0bd49caa-1769-4418-89b1-2e353db5c6d5.png" data-type="png" data-w="739" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.2 資源部署現狀和問題</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">vivo 容器平台的所有在線業務部署均要求設置 request 和 limit，且 request &lt;= limit，默認情況 request 等於 limit。在共享池中，常見業務 request 設置會出現如下情況：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>（1） 較少情況</strong>，業務設置較低的 request 值，而實際使用資源遠大於它的 request 值，若大量 pod 調度一個節點，加劇節點熱點問題影響同節點其他業務。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>（2）大多情況</strong>，業務按最大資源需求設置較高的 request 值，而實際使用資源長期遠小於它的 request 值。業務側賬單成本高 (按 request 計費)，且容器異常退出時，重調度時可能因為平台空閒資源碎片，導致大規格容器無法調度。這會導致，平台側可調度資源少，但平台整體節點資源利用率偏低。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">對平台和用戶方，request 值設置合理很重要，但平台無法直接判斷用戶設置 request 值合理性，所以無法首次部署時硬限制。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014004" data-ratio="0.5070967741935484" data-s="300,640" src="https://oscimg.oschina.net/oscnet/38a6b780-753d-4a77-b444-ad2c242316de.png" data-type="png" data-w="775" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3 資源規格合理性思考</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.3.1 request 怎麼樣才是合理設置</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">request 值接近業務實際使用量，例如用戶申請 request 為 2 核，limit 為 4 核，實際真實使用量最多 1 核，那麼合理 request 值設置為 1 核附近。但是業務真實使用量只有運行一段時間後才能評估，屬於後驗知識。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.3.2 保障資源最大使用量</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">不修改 limit 值就能保障業務最大使用量符合業務預期。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014005" data-ratio="0.4636471990464839" data-s="300,640" src="https://oscimg.oschina.net/oscnet/858557c2-5110-48da-b2a0-9d5f9ba876a1.png" data-type="png" data-w="839" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、解決方案探索</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.1 靜態超賣方案</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">思路：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">靜態超賣方案是將 CICD 用戶申請規格的 request 按一定比例降低，根據平台運營經驗設置不同集羣不同機房不同環境的靜態係數，由 caas-openapi 組件自動修改。如下圖：<br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014007" data-ratio="1.8846153846153846" data-s="300,640" src="https://oscimg.oschina.net/oscnet/844bc6e1-0139-4de4-9b85-5b61f7fb8572.png" data-type="png" data-w="338" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">優點：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">首次部署時可以應用，實現簡單。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">缺點：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">生產環境係數設置保守，導致 request 依然偏大，且由於內存是不可壓縮資源，實際實施時為避免業務實例內存 oom-kill，靜態超賣只開啓了 cpu 維度，未開啓內存靜態超賣。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.2 動態超賣方案</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.1 方案思路</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">開發 caas-recommender 組件，基於業務監控數據的真實資源用量來修正業務 request 值。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">從監控組件拉取各個容器資源的真實使用量。</span><br></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">通過算法模型得到業務申請量的推薦值。</span></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">業務重新部署時，使用推薦值修改業務 request 值。</span></p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.2 半衰期滑動窗口模型</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">結合容器業務的特點，對推薦算法有如下要求：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;">當 workload 負載上升時，結果需要快速響應變化，即越新的數據對算法模型的影響越大；</p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">當 workload 負載下降時，結果需要推遲體現，即越舊的數據對算法結果的影響越小。</span></p></section></li></ul><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">半衰期滑動窗口模型可以根據數據的時效性對其權重進行衰減，可以滿足上述要求。</p><p style="text-wrap: wrap;">詳細描述參考：google Borg Autopilot 的 moving window 模型，<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdl.acm.org%2Fdoi%2Fpdf%2F10.1145%2F3342195.3387524" textvalue="參看原論文>>" linktype="text" imgurl="" tab="outerlink" data-linktype="2">參看原論文&gt;&gt;</a></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">公式如下：</p></section><section style="font-size: 15px;line-height: 1.5;"><section style="text-align: left;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 50%;height: auto;"><br></section></section></section><section style="font-size: 15px;line-height: 1.5;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 30%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="173" data-cropsely1="0" data-cropsely2="173" data-imgfileid="100014023" data-ratio="0.22407407407407406" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1f44a5f7-da1d-4fd9-a403-67e1496d6613.jpg" data-type="jpeg" data-w="1080" style="vertical-align: middle;width: 578px;height: 130px;" referrerpolicy="no-referrer"></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">其中&nbsp;τ&nbsp;為數據樣本的時間點，t1/2 為半衰期，表示每經過 t1/2 時間間隔，前一個 t1/2 時間窗口內數據樣本的權重就降低一半。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>核心理念</strong>：在參考時間點之前的數據點，離的越遠權重越低。在參考時間點之後的數據點權重越高。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>半衰期 halfLife</strong>：經過時間 halfLife 後，權重值降低到一半。默認的 halfLife 為 24 小時。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>數據點的時間 timestamp</strong>：監控數據的時間戳。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>參考時間 referenceTimestamp</strong>：監控數據上的某個時間（一般是監控時間最近的零點 00:00）。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>衰減係數 decayFactor</strong>：2^((timestamp-referenceTimestamp)/halfLife)</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>cpu 資源的固定權重</strong>：CPU 使用量數據對應的固定權重是基於容器 CPU request 值確定的。當 CPU request 增加時，對應的固定權重也隨之增加，舊的樣本數據固定權重將相對減少。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>memory 資源的固定權重</strong>：由於內存為不可壓縮資源，而內存使用量樣本對應的固定權重係數為 1.0。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>數據點權重 = 固定權重*衰減係數</strong></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">例如現在的數據點的權重為 1，那麼 24 小時之前的監控數據點的權重為 0.5，48 小時前的數據點的權重為 0.25，48 小時後的數據權重為 4。</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.3 指數直方圖計算推薦值</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">caas-recommender 每個掃描週期（默認 1min）從 metrics server 或 prometheus 中獲取帶時間戳的樣本數據，如 container 維度的 CPU、Memory 資源使用等。樣本數據結合權重值，為每個 workload 構建指數直方圖，指數直方圖中每個桶的大小以指數速率逐步提升。指數直方圖的樣本存儲方式也便於定期 checkpoint 保存，可以顯著提升程序 recover 性能。如下圖：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014009" data-ratio="0.7993079584775087" data-s="300,640" src="https://oscimg.oschina.net/oscnet/64da2d6c-d91d-4315-9e1f-cdbbf8bcd8cc.png" data-type="png" data-w="578" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;">指數直方圖的橫軸定義為資源量，縱軸定義為對應權重，資源量統計間隔以 5% 左右的幅度增加。</p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">桶的下標為 N，桶的大小是指數增加的 bucketSize=0.01*(1.05^N)，下標為 0 的桶的大小為 0.01，容納範圍為[0,0.01)，下標為 1 的桶的大小為 0.01*1.05^1=0.0105，容納範圍[0.01-0.0205)。</span><span style="letter-spacing: 0.034em;">[0.01,173]只需要兩百個桶即可完整保存。</span><span style="letter-spacing: 0.034em;"></span><span style="letter-spacing: 0.034em;"></span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">將每個數據點，按照數值大小丟到對應的桶中。</span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">當某個桶裏增加了一個數據點，則這個桶的權重增加</span><strong style="letter-spacing: 0.034em;">固定權重*衰減係數</strong><span style="letter-spacing: 0.034em;">，所有桶的權重也增加</span><strong style="letter-spacing: 0.034em;">固定權重*衰減係數</strong><span style="letter-spacing: 0.034em;">。</span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">計算出 W(95)=95%*所有桶的總權重，如上圖僅考慮前 4 個桶，總權重為 20，w(95) 權重為 19。</span><span style="letter-spacing: 0.034em;">&nbsp;</span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">從最小的桶到最大桶開始累加桶的權重，這個權重記為 S，當 S&gt;=W(95) 時候，這個時候桶的下標為 N，那麼下標為 N+1 桶的最小邊界值就是 95 百分位值，如上圖 N=3 時，S&gt;=W(95)，95 百分位值即為 0.01*1.05^2。</span></p></section></li></ol><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">比如 CPU 波動較大且可壓縮，採用 95% 分位值（P95），內存採用 99% 分位值（P99）。最終得到 workload 的資源推薦值。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.4 caas-recommender 組件流程圖</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014010" data-ratio="0.9929971988795518" data-s="300,640" src="https://oscimg.oschina.net/oscnet/9640df4b-639d-4743-b458-23edf102c5a6.png" data-type="png" data-w="714" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>1. 啓動 controller</strong>：profile Controller 監聽 profile template crd，根據 profile crd 創建相應維度的 recommendation crd，可支持 namepace\</p><p style="text-wrap: wrap;">workload\pod 維度。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>2. 初始化：</strong></p><p style="text-wrap: wrap;">判斷是否有 checkpoint，若無，可以選擇從 prometheus 拉取數據構建直方圖。若有，由 checkpoint 直接 recover。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>3. loop 循環：</strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;">從 recommendation crd 中判斷哪些 pod 需要納管（pod labels）</p></li><li><p style="text-wrap: wrap;">根據 pod label 從 Kubernetes 獲取 pod 信息</p></li><li><p style="text-wrap: wrap;">根據 pod 的 namespace 從 metrics server 拉取監控數據，由 container 數據匯聚成 pod 用量數據。</p></li><li><p style="text-wrap: wrap;">構建指數直方圖，填充 pod 用量數據和權重值。</p></li><li><p style="text-wrap: wrap;">根據直方圖的分位值計算推薦值</p></li><li><p style="text-wrap: wrap;">存儲推薦值和直方圖 chekpoint</p></li><li><p style="text-wrap: wrap;">gc 需要刪除的 recommendation crd 或者直方圖內存等無用數據。</p></li></ul><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>4.支持原生 workload 常用類型</strong>，拓展支持了 OpenKruise 相關 workload 類型。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.5 推薦值校正規則</strong></p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><section powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;background-color: rgb(239, 239, 239);">推薦值 = 模型推薦值 * 擴大倍數 (可配置)&nbsp;</span><br></p></li><li><p style="text-wrap: wrap;">推薦值 &lt; 原生 request 值：按照推薦值修改</p></li><li><p style="text-wrap: wrap;">推薦值 &gt; 原始 request 值:&nbsp; 按照原始 request 修改</p></li><li><p style="text-wrap: wrap;">內存是否修改可以通過配置</p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">不修改 workload 的 limit 值</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.3 HPA 利用率計算邏輯改造</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">Pod 水平自動擴縮（Horizontal Pod Autoscaler, 簡稱 HPA）可以基於 CPU/MEM 利用率自動擴縮 workload 的 Pod 數量，也可以基於其他應程序提供的自定義度量指標來執行自動擴縮。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">原生 Kubernetes 的 HPA 擴縮容利用率計算方式是基於 request 值。若資源超賣，request 值被修改後，那麼業務設置的 HPA 失靈，導致容器不符合預期擴縮容。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">關於 HPA 是基於 request 還是基於 limit，目前 Kubernetes 社區還存在爭論，相關 issue 見 72811。若需要使用 limit 計算利用率，可以修改 kube-controller-manager 源碼，或者使用自定義指標來代替。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">vivo 容器平台兼容業務物理機利用率邏輯，規定內部統一監控系統的 Pod 利用率均基於 limit 計算。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>HPA 改造思路：</strong>通過修改 kube-controller-manager 源碼方式實現基於 limit 維度計算。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">在</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">pod annotation 中記錄設置值信息（request 值和 limit 值），以及維度信息（request 或 limit 維度）。</span><br></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">controller 計算 pod 資源時，判斷是否有指定 annotation，若有，解析 annotation 記錄值和維度信息計算利用率，若無，使用原生邏輯。</span><br></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通過上述方式解耦 HPA 與 pod request 值，這樣平台的資源超賣功能修改 request 不影響 HPA 自動擴縮預期。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.4 專有池支持超賣能力</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">專有池物理機由業務自行運維管理，從平台角度，不應該隨意修改業務的容器 request 規格。但是專有池業務也有降低容器規格，部署更多業務，複用資源，提高整機利用率的需求。平台默認所有共享池自動開啓超賣能力，專有池可配置選擇開啓超賣能力。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">可自定義開啓超賣類型：</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">靜態、動態、靜態+動態。</span><br></p></li><li><p style="text-wrap: wrap;">可自定義靜態係數、動態超賣擴大系數。</p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">可配置是否自動修改超賣值，當不自動生效可通過接口查詢推薦值，由業務自行修改。</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.5 整體方案</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">首次部署：</p></section></section></section><section powered-by="xiumi.us"><p style="text-wrap: wrap;">根據先驗知識評估，通過固定靜態係數修改 request 值，再根據部署後各個 pod 監控用量數據，生成 workload 的 request 推薦值。</p><p style="text-wrap: wrap;"><br></p></section><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">再次部署：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">若有推薦值，使用推薦值部署。無推薦值或者推薦值未生效時，使用靜態係數。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014011" data-ratio="0.6361111111111111" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3e7583ce-f7a8-421b-811c-7ac199f805fe.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、效果和收益</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.1 測試集羣收益</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014012" data-ratio="0.6662908680947013" data-s="300,640" src="https://oscimg.oschina.net/oscnet/d0349323-1425-40ad-b342-40cfec68f226.png" data-type="png" data-w="887" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">原測試機器的靜態超賣係數很低，且只縮減 cpu 維度資源，導致集羣內存成為資源瓶頸。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">開啓動態超賣能力 4 個月後，納管 90% 的 workload，節點 pod 平均內存 request 由 4.07Gi 下降到 3.1Gi，內存平台裝箱率降低 10%，有效緩解集羣內存不足問題。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.2 共享池生產集羣收益</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014013" data-ratio="0.6462053571428571" data-s="300,640" src="https://oscimg.oschina.net/oscnet/82973f95-b870-422f-a4f5-647a0b81e40c.png" data-type="png" data-w="896" style="" referrerpolicy="no-referrer"></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">原生產集羣靜態超賣係數較高，CPU 資源裝箱率高，導致集羣的 CPU 成為瓶頸。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">開啓動態超賣能力 3 個月後，納管 60% 的 workload，節點 pod 平均 cpu request 由 2.86 降低為 2.35，整體 cpu 利用率相比未開啓前提升 8% 左右。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>五、總結與展望</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">vivo 容器平台通過資源超賣方案，將業務容器的 request 降低到合理值，降低業務使用成本，緩解了集羣資源不足問題，達到了提升節點利用率目的。但是當前僅在生產集羣開啓了 CPU 資源超賣，規劃近期開啓內存資源超賣。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">未來基於上述方法，可以納管更多維度，比如 GPU 卡利用率再結合 GPU 虛擬化能力，從而提高 GPU 資源共享效率。根據動態超賣推薦值可以用於構建用戶畫像，區分業務是計算型或內存型，方便平台更好理解用戶特性，輔助資源調度等。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(65, 95, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;">參考資料：</p></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><section powered-by="xiumi.us"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2FCCE-SWR%2Fp%2F10530980.html" textvalue="深入理解 Kubernetes 資源限制：CPU" linktype="text" imgurl="" tab="outerlink" data-linktype="2">深入理解 Kubernetes 資源限制：CPU</a></p></section></li><li><section powered-by="xiumi.us"><p><span style="letter-spacing: 0.034em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2FCCE-SWR%2Fp%2F10494025.html" textvalue="深入理解 Kubernetes 資源限制：內存&nbsp;" linktype="text" imgurl="" tab="outerlink" data-linktype="2">深入理解 Kubernetes 資源限制：內存&nbsp;</a></span></p></section></li><li><section powered-by="xiumi.us"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzNzYxNjAzMg%3D%3D%26mid%3D2247524786%26idx%3D1%26sn%3Dddcc8c59751ddc8987c1b13fe0e71a61%26scene%3D21%23wechat_redirect" textvalue="資源畫像，讓容器資源規格的填寫不再糾結" linktype="text" imgurl="" tab="outerlink" data-linktype="2">資源畫像，讓容器資源規格的填寫不再糾結</a></p></section></li><li><section powered-by="xiumi.us"><p><span style="letter-spacing: 0.034em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F0fd.org%2F2020%2F09%2F05%2Fautopilot-workload-autoscaling-at-google%2F" textvalue="Autopilot: workload autoscaling at Google" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Autopilot: workload autoscaling at Google</a></span></p></section></li><li><section powered-by="xiumi.us"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.cn%2Farticle%2Fz40lmwmtoyvecq6tpoik" textvalue="深入理解 VPA Recommender" linktype="text" imgurl="" tab="outerlink" data-linktype="2">深入理解 VPA Recommender</a></p></section></li></ul><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><br></p><section style="" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 40%;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(160, 160, 160);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: top;width: 20%;"><section style="text-align: center;color: rgb(160, 160, 160);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: top;width: 40%;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(160, 160, 160);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:132.title1"><p>猜你喜歡</p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497810%26idx%3D1%26sn%3Dfb5334c9637cdde4b5125f69ed32e89f%26chksm%3Debdb88c0dcac01d6faf82e4d44e8421616ec9128f46ea494339a599c346b13212b9f1d774886%26scene%3D21%23wechat_redirect" textvalue="Hudi 在 vivo 湖倉一體的落地實踐" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">Hudi 在 vivo 湖倉一體的落地實踐</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497721%26idx%3D1%26sn%3D7fc575754a006dc68bb08cf730971cde%26chksm%3Debdb876bdcac0e7d1b579c0e69b8d36854bb08457c231640dab9418ee75dd35788e90e0688bf%26scene%3D21%23wechat_redirect" textvalue="RocksDB 在 vivo 消息推送系統中的實踐" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">RocksDB 在 vivo 消息推送系統中的實踐</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497638%26idx%3D1%26sn%3D7c773beb9f6062991ff11a068d55b132%26chksm%3Debdb8734dcac0e22e33f20a45472e8918c2b4bb7ccc47f138e3d1d37af76cd1fef986283edbd%26scene%3D21%23wechat_redirect" textvalue="線上 ES 集羣參數配置引起的業務異常案例分析" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">線上 ES 集羣參數配置引起的業務異常案例分析</a></p></li></ul></section></section></section></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互聯網技術" data-alias="vivoVMIC" data-signature="分享 vivo 互聯網技術乾貨與沙龍活動，推薦最新行業動態與熱門會議。" data-from="0" data-is_biz_ban="0"></mp-common-profile></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - vivo 互聯網技術（vivoVMIC）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 01:48:32 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/10322908</guid>
            <link>https://my.oschina.net/vivotech/blog/10322908</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[邀請好友使用 BaiduComate，贏取豐厚京東卡獎勵！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><span><span><strong><strong><span><span><strong>什麼是 BaiduComate？</strong></span></span></strong></strong></span></span></h2><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>BaiduComate 是基於文心大模型，結合百度積累多年的編程現場大數據和外部優秀開源數據，為你生成更符合實際研發場景的優質代碼的智能代碼助手。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>Comate 目前可以通過自然語言及上下文，幫你生成代碼，更能契合您的個人代碼風格和業務需求，幫您提高編碼效率，更有技術問答來幫您解答編碼過程中遇到的技術難題。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>同時 Comate 能夠幫您智能生成單元測試、快速生成代碼註釋、為您的代碼內容提供優化建議，讓您從繁雜零碎的工作中解放出來。</span></span></span></span></p><h2><span><span><strong><strong><span><span><strong>什麼活動？</strong></span></span></strong></strong></span></span></h2><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>參與積分榜活動，邀請好友註冊並使用 BaiduComate，即可輕鬆贏取豐厚的京東卡獎勵。</span></span></span></span></p><h2><span><span><strong><strong><span><span><strong>活動怎麼玩？</strong></span></span></strong></strong></span></span></h2><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>一、活動時間：</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>2023 年 12 月 26 日至 2023 年 12 月 31 日。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>二、活動內容：</strong></span></span></strong></span></span></p><ol><li><span><span>登錄 Comate（</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcomate.baidu.com%2F" target="_blank"><u><span><span style="color:#3f83f8"><u><span>https://comate.baidu.com/</span></u></span></span></u></a><span><span>)，進入個人中心，分享您的專屬鏈接給好友，邀請好友註冊並使用 Comate；</span></span></li><li><span><span>您可以通過分享您的專屬鏈接或生成您的專屬二維碼向您的好友分享；</span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img alt="" height="166" src="https://static.oschina.net/uploads/space/2023/1226/185627_hIls_4252687.png" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img alt="" height="149" src="https://static.oschina.net/uploads/space/2023/1226/185655_vMNA_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span><span>好友通過您的鏈接使用 Comate 後，您和您的好友將共同獲得 10 積分；</span></span></p><p><span><span>邀請的好友越多，獲得的京東卡獎勵越豐厚，您可在積分榜活動頁查看活動詳情（</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcomate.baidu.com%2F1%2Factivity" target="_blank"><u><span><span style="color:#3f83f8"><u><span>https://comate.baidu.com/1/activity</span></u></span></span></u></a><span><span>）。</span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img alt="" height="299" src="https://static.oschina.net/uploads/space/2023/1226/185733_Gean_4252687.png" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>三、活動獎勵：</strong></span></span></strong></span></span></p><ol><li><span><span>積分超過 500 分且總排行榜前 20 名，可得 500 京東卡；</span></span></li><li><span><span>積分超過 200 分且總排行榜前 100 名，可得 200 京東卡；</span></span></li><li><span><span>積分超過 100 分且總排行榜前 200 名，可得 100 京東卡；</span></span></li><li><span><span>積分超過 50 分且總排行榜前 400 名，可得 50 京東卡；</span></span></li><li><span><span>其他有積分的用戶，可以兌換 Baidu Comate 的使用時長，10 積分可兌換一個月的使用時長；</span></span></li><li><span><span>總排行榜前三且積分超過 500 分的用戶，可額外獲得神祕大獎！</span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>四、活動規則：</strong></span></span></strong></span></span></p><ol><li><span><span><span style="color:#1c1d1f">被分享人註冊並使用 Comate 後，分享人和被分享人均加 10 分；</span></span></span></li><li><span><span>活動期間內，邀請的好友數量不設上限；</span></span></li><li><span><span>相同積分的用戶，按照最後一名被邀請用戶的使用先後順序進行排序；</span></span></li><li><span><span>京東卡將在活動結束後 15 個工作日內發放至用戶賬戶；</span></span></li><li><span><span><span style="color:#1c1d1f">更多規則詳見 Comate 官網活動頁</span></span></span><span><span>。</span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>與好友一起探索 Comate 的無限可能，讓智能雲技術為您的代碼添色。現在，就通過您的專屬鏈接邀請好友加入 Comate，共同開啓智能新篇章！</span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 10:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272829</guid>
            <link>https://www.oschina.net/news/272829</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[信通院發佈《人工智能倫理治理研究報告（2023 年）》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 26 日，中國信息通信研究院（簡稱「中國信通院」）在「2024 中國信通院 ICT 深度觀察報告會」科技倫理治理分論壇上發佈了《人工智能倫理治理研究報告（2023 年）》。</span></p><p style="margin-left:0; margin-right:0">報告在總結人工智能倫理治理有關概念和特點的基礎上，對人工智能生成內容、自動駕駛、智慧醫療三個典型應用場景的倫理風險進行分析，並結合國內外人工智能倫理治理實踐，提出人工智能倫理治理的四點展望，以期為更加廣泛深入的討論提供參考。</p><p style="margin-left:0; margin-right:0"><img alt="" height="424" src="https://oscimg.oschina.net/oscnet/up-c579b9404f2057e3d9c3aea95b7c78ca41e.png" width="300" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px"><strong>報告核心觀點</strong></h4><p style="margin-left:0; margin-right:0"><strong>1. 人工智能倫理風險挑戰亟需關注</strong></p><p style="margin-left:0; margin-right:0">目前，人工智能引發的倫理挑戰已從理論研討變為現實風險。在技術研發階段，由於人工智能技術開發主體在數據獲取和使用、算法設計、模型調優等方面還存在技術能力和管理方式的不足，可能產生偏見歧視、隱私泄露、錯誤信息、不可解釋等倫理風險。在產品研發與應用階段，人工智能產品所面向的具體領域、人工智能系統的部署應用範圍等將影響人工智能倫理風險程度，並可能產生誤用濫用、過度依賴、衝擊教育與就業等倫理風險。對於人工智能生成內容、自動駕駛、智慧醫療等典型應用場景，需要根據風險發生頻率、影響範圍、影響程度等評估主要風險。</p><p style="margin-left:0; margin-right:0"><strong>2. 人工智能倫理治理是應對人工智能風險的有效機制</strong></p><p style="margin-left:0; margin-right:0">人工智能倫理治理是人工智能治理的重要組成部分，是應對人工智能風險挑戰的主要機制。人工智能倫理治理把以人為本、公平非歧視、透明可解釋、人類可控制、責任可追溯、可持續發展等作為核心內容，並根據人工智能技術發展和應用情況，及時提出調整人與人工智能關係和應對人工智能風險的方法。</p><p style="margin-left:0; margin-right:0"><strong>3. 各國積極推進人工智能倫理治理</strong></p><p style="margin-left:0; margin-right:0">為應對人工智能技術應用帶來的風險，世界各國積極推動人工智能倫理國際治理合作。各國政府通過出台人工智能倫理原則、發佈人工智能倫理治理指引、提供技術治理工具等加強本國本地區的人工智能倫理治理監管。我國通過積極完善人工智能倫理制度規範，探索人工智能倫理治理技術化、工程化、標準化落地措施，引導行業自律，加強人工智能治理國際合作等舉措推動人工智能向善發展。</p><p style="margin-left:0; margin-right:0"><strong>4. 人工智能倫理治理四點展望</strong></p><p style="margin-left:0; margin-right:0">在治理理念方面，堅持促進創新與防範風險相統一，統籌發展與安全。在治理舉措方面，健全多學科多主體合作、探索分類分級治理、推動治理技術工具開發。在能力建設方面，重視科研人員、開發人員、社會公眾等各主體科技倫理素養提升。在開放合作方面，積極參與全球人工智能倫理治理合作，推動人工智能技術造福人類。</p><hr><p style="margin-left:0; margin-right:0">完整報告地址：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.caict.ac.cn%2Fkxyj%2Fqwfb%2Fztbg%2F202312%2Ft20231226_468983.htm" target="_blank">http://www.caict.ac.cn/kxyj/qwfb/ztbg/202312/t20231226_468983.htm</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 09:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272816</guid>
            <link>https://www.oschina.net/news/272816</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2023 年各編程語言中最流行的許可證]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OSI 所屬的&nbsp;Voices of Open Source 發佈了一篇「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.opensource.org%2Fthe-most-popular-licenses-for-each-language-2023%2F" target="_blank">2023 年每種語言中最流行的許可證</a>」的文章，揭示了每種編程語言生態系統中的許可偏好，並強調了清晰和標準化許可證對開發人員、組織和整個開源社區健康的重要性。</span></p><p><span style="color:#000000">文章指出，MIT 和 Apache 2.0 許可證在不同的編程語言和包管理器中最為普遍。JavaScript 社區通常傾向於使用 MIT 許可證，Python 開發人員則偏愛 Apache 2.0。ISC 許可證以其簡單性和寬容性在 JavaScript 社區中頗受歡迎。BSD 許可證（包括 3-Clause 和 2-Clause）保持穩定但相對較低的採用率。GPL 也有一定的影響力，但落後於 MIT 和 Apache 2.0。</span></p><h4><strong><span style="color:#000000">Javascript (npm)</span></strong></h4><p><span style="color:#000000">JavaScript 的 npm 軟件包管理器中，大多數組件採用的是 MIT 許可（53%），其次是 Apache 2.0（14.76%）和 ISC（10.48%）。ISC 許可證由 Internet Systems Consortium 發佈，雖然在 JavaScript 項目中很流行，但在其他編程語言中使用得並不多。小部分項目沒有許可證（8%）或或是沒有 SPDX 識別的許可證/無聲明（5.49%）。</span></p><p><span style="color:#000000"><img alt="" height="275" src="https://oscimg.oschina.net/oscnet/up-6f1b2371f321720b27dc902d1b1b82de159.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">.NET (Nuget)</span></strong></h4><p><span style="color:#000000">而在 .NET 的包管理器 Nuget 中，最令人擔憂的點在於，它的大部分組件要麼沒有許可證（26.76%），要麼被認定為"NOASSERTION"（31.95%）。使用 MIT 或 Apache 2.0 許可的比例分別為 21.55% 和 13.37%。</span></p><p><span style="color:#000000"><img alt="" height="286" src="https://oscimg.oschina.net/oscnet/up-9a25d804c9c72bfbf419888c776e096bf8c.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Java (Maven)</span></strong></h4><p><span style="color:#000000">Maven (Java 的包管理器) 中的絕大多數組件都使用 Apache 2.0 許可證（69.18%），使用 MIT 的組件僅佔 7.4%。此外，被歸類於 NOASSERTION 的組件佔比為 14.75%。</span></p><p><span style="color:#000000"><img alt="" height="283" src="https://oscimg.oschina.net/oscnet/up-7beb2e608f1e7aed00f71e9ef72300b8bf4.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Python (Pypi)</span></strong></h4><p><span style="color:#000000">在 Python 的包管理器 Pypi 中，MIT 和 Apache 2.0 許可下的組件佔主導地位，分別為 29.14% 和 23.98%。BSD 2-Clause 和 GPL 3.0 下的組件分別佔 6.25% 和 6.11%，還有相當一部分組件沒有許可（23.69%）。</span></p><p><span style="color:#000000"><img alt="" height="282" src="https://oscimg.oschina.net/oscnet/up-8a891bd50b9f1b941ece9f07d7b367b19c3.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Ruby（Gem）</span></strong></h4><p><span style="color:#000000">Gem（Ruby 的包管理器）中絕大多數組件都使用 MIT 許可證 (63.11%)。其次是 Apache 2.0 和 BSD 3-Clause 許可證，分別佔 8.22% 和 6.66%。</span></p><p><span style="color:#000000"><img alt="" height="273" src="https://oscimg.oschina.net/oscnet/up-992730f13a25f44a6e27261837dd4cf2451.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">PHP（Composer）</span></strong></h4><p><span style="color:#000000">在 PHP 的包管理器 Composer 中，MIT 許可證非常受歡迎，佔 64.37%。BSD 3-Clause 和 Apache 2.0 下的項目分別佔 5.72% 和 3.92%。</span></p><p><span style="color:#000000"><img alt="" height="277" src="https://oscimg.oschina.net/oscnet/up-924aba8c7c052842a7bd363e09566d1e4cb.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Go</span></strong></h4><p><span style="color:#000000">Apache 2.0 和 MIT 許可證在 Go 中佔主導地位，分別為 32.49% 和 20.1%。很大一部分 Go 組件沒有許可證（29.67%）。</span></p><p><span style="color:#000000"><img alt="" height="293" src="https://oscimg.oschina.net/oscnet/up-ff275f5eef822cdecae73540f0717f58d65.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Rust（Crate）</span></strong></h4><p><span style="color:#000000">對於 crate（Rust 包管理器），使用 MIT 和/或 Apache 2.0 的項目佔主導地位，合計佔比 83.52%。</span></p><p><span style="color:#000000"><img alt="" height="275" src="https://oscimg.oschina.net/oscnet/up-e115fe1f099762a3b124de0f891eddaaae0.png" width="500" referrerpolicy="no-referrer"></span></p><hr><p><span style="color:#000000">總的來説，雖然市場上已經存在一些成熟的許可證供選擇，但仍有<span style="background-color:#ffffff">許多開源組件未指定許可證或標記為 SPDX 「NOASSERTION」。文章指出， 這種模糊性致使此類組件的使用也存在很多不確定性，</span><span style="background-color:#ffffff">可能會阻礙協作、</span><span style="background-color:#ffffff">並給開發者造成法律和安全風險。</span></span></p><p><span style="color:#000000">解決<span style="background-color:#ffffff">無許可證組件的</span>問題對於開源社區的持續健康發展至關重要。開發人員、組織和整個社區都受益於清晰和標準化的許可。它不僅促進協作，還確保法律合規性並保護貢獻者的知識產權。此外，它還可以幫助開發人員跟蹤可能存在漏洞的組件。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 07:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272790/the-most-popular-licenses-for-each-language-2023</guid>
            <link>https://www.oschina.net/news/272790/the-most-popular-licenses-for-each-language-2023</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[如何在手機上使用 Linux＆如何培養多路徑開發思維？2023 年 12 月 WHLUG 回顧]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 12 月 23 日下午，由 deepin（深度）社區主辦的武漢 Linux 用戶組沙龍（WHLUG）成功舉行，20 餘名 Linux 愛好者齊聚一堂，10 餘名外地夥伴線上參與，共同度過 2023 年最後一場 WHLUG。</p><p>現在，一起來回顧本次年末收官活動的精彩瞬間吧！</p><h1>關於 Droidian 發行版的種種</h1><p>本次沙龍上，archiemeng 為大家分享了 Droidian 發行版的相關內容並進行了現場演示。Droidian 是一個基於 GNOME 的 Linux 手機端發行版，在提供基礎 Linux 手機應用的同時，對桌面應用有較完整的適配，且通過 Waydroid 對 Android 應用進行了一定的支持。</p><p>更重要的是，Droidian 對於上述兩種應用均能流暢運行，是一個可玩性極強的發行版。目前社區正在積極踴躍開發中，感興趣的用戶可以自行去官網獲取刷機教程，也可以參與移植和開發等工作。</p><p>Droidian 官方網站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdroidian.org%2F" target="_blank">https://droidian.org/</a></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-1f2dc7ca1122468904def7e4bc5cc3eb82e.jpg" referrerpolicy="no-referrer"></p><h1>畢業季，引用模塊化思路加載開源人生&nbsp;</h1><p>根據之前的話題收集，我們發現很多學生對於如何參與開源社區感到迷茫，所以在本次活動中，ziggy 便從實際經驗及當前就業背景出發，分享了學生時期如何參與開源社區併發揮自己的價值，以及如何引用模塊化思維在學業或職場中不斷打怪升級成長等話題。</p><p>ziggy 通過開源生態適配中的實際案例和項目經驗，生動形象地向學生們展示了掌握多領域知識的重要性。在討論過程中更是充分發揮了社區力量，大家通過經驗交流，為某歷史遺留問題提供瞭解決方案。此次分享不僅給學生們提供了實用的指導，也激發了他們對於參與開源社區的熱情和信心。</p><p style="text-align:center"><img height="615" src="https://oscimg.oschina.net/oscnet/up-e43d3f96df95ec88fcc0273bac9446650a9.png" width="1046" referrerpolicy="no-referrer"></p><p>值得一提的是，一位在 20 年前就參與 WHLUG 的資深用戶也在本月來到現場，併為大家分享了經驗和心得。他表示，很多人在開源社區中提問時還略顯羞澀，希望大家能夠放下顧慮，樹立正確的社區參與心態，勇敢參與社區活動，共同推動開源社區的繁榮發展。</p><p style="text-align:center"><img height="683" src="https://oscimg.oschina.net/oscnet/up-cbb21d8467cf3f73da16231cabd999dbe48.png" width="913" referrerpolicy="no-referrer"></p><h1>小彩蛋</h1><p>WHLUG 自 1997 年創建以來，一直專注開源技術討論和分享，我們致力於為武漢的 Linux 愛好者創建一個不受外界幹擾的討論氛圍，讓每一個技術愛好者回歸技術本質。</p><p>我們誠摯地歡迎<strong>武漢地區的學生/開源愛好者</strong>加入，共同參與到 WHLUG 活動的策劃和組織中，同時，熱忱歡迎<strong>各高校社團</strong>與我們攜手，為構建武漢最純粹的 Linux 技術圈和推動本地開源發展貢獻力量。</p><p>若您對參與活動共建感興趣，<strong>請點擊<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwj.qq.com%2Fs2%2F13816139%2F8b53%2F" target="_blank">「此處」</a>或掃碼填寫報名錶</strong>，我們的工作人員將會與您取得聯繫，期待與您一同開啓這段激動人心的開源之旅！</p><p style="text-align:center"><img height="280" src="https://oscimg.oschina.net/oscnet/up-c7b73e05cc3a7a94a2d131d1c0fea354f78.png" width="290" referrerpolicy="no-referrer"></p><div><div><p><strong>什麼是 WHLUG：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwelcome-to-whlug%2F" target="_blank">武漢 LUG – 深度科技社區</a></strong></p><p><strong>瞭解 deepin：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin - 基於 Linux 的開源國產操作系</a></strong></p></div></div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 07:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272782</guid>
            <link>https://www.oschina.net/news/272782</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WAVE SUMMIT 迎來第十屆，文心一言將有最新披露！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>1</span></span><span><span>0</span></span><span><span>句話 2 分鐘，挑戰成功説服宿管阿姨開門，這個人羣中的「顯眼包」是一個接入文心大模型 4</span></span><span><span>.0</span></span><span><span>遊戲裏的 NPC，妥妥 「工具人」實錘～</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>嘗試用</span></span><span><span>AI</span></span><span><span>一鍵自動識別好壞咖啡豆，看一眼便知好壞，真正「顏值即正義」，讓咖啡星人狂喜～</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>藉助 AI 在</span></span><span><span>任何平面上模擬</span></span><span><span>的</span></span><span><span>鋼琴，</span></span><span><span>即興「彈奏」世界名曲，開一場科技感滿滿的專屬演奏會～</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>在虛擬世界</span></span><span><span>的</span></span><span><span>神奇辦公室，輸入你的創業方向，智慧打工人們將為你的項目勤勞奔走，並在過程中，把日報</span></span><span><span>、</span></span><span><span>週報寫好，讓你隨時掌握項目進度和最終成果</span></span><span><span>……</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="280" src="https://static.oschina.net/uploads/space/2023/1226/134838_ASJC_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>這些聽起來新奇而有趣的 A</span></span><span><span>I</span></span><span><span>應用，都將在兩天後舉行的 W</span></span><span><span>AVE SUMMIT+深度學習開發者大會 2023</span></span><span><span>開發者市集亮相。</span></span><span><span>作為業界影響力最大的深度學習與大模型開發者大會，WAVE SUMMIT+ 2023</span></span><span><span>定於</span></span><span><span>12 月 28 日</span></span><span><span>在</span></span><span><span>北京開啓</span></span><span><span>。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="285" src="https://static.oschina.net/uploads/space/2023/1226/134858_tJnB_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>現場大咖雲集，</span></span><span><span>百度首席技術官</span></span><span><span>、</span></span><span><span>深度學習技術及應用國家工程研究中心主任王海峯</span></span><span><span>及數百位</span></span><span><span>產業大咖、知名學者、技術大牛、頂尖開源項目發起人等重磅嘉賓，從大模型技術、開源開放、產業護航、軟硬一體等議題出發，</span></span><span><span>為開發者奉上大模型時代低門檻開發和創建應用的硬核乾貨。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>倒計時 2 天，大會的五大亮點帶大家搶鮮看。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>亮點一：趨勢引領，「扛把子」文心一言將曝新進展</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>今年 1</span></span><span><span>0</span></span><span><span>月 1</span></span><span><span>7</span></span><span><span>日，迄今為止綜合實力最強的文心大模型 4</span></span><span><span>.0</span></span><span><span>重磅面世，</span></span><span><span>理解、生成、邏輯、記憶</span></span><span><span>四大能力得到</span></span><span><span>顯著提升，大語言模型</span></span><span><span>正在</span></span><span><span>為通用人工智能帶來曙光。</span></span><span><span>截至 1</span></span><span><span>1</span></span><span><span>月初，文心一言用戶數達到 7</span></span><span><span>000</span></span><span><span>萬，場景達</span></span><span><span>4300</span></span><span><span>個。這</span></span><span><span>得益於飛槳與文心的協同優化，</span></span><span><span>文心大模型 4</span></span><span><span>.0</span></span><span><span>的</span></span><span><span>模型周均訓練有效率超過 98%，</span></span><span><span>相比於 3 月份，</span></span><span><span>訓練算法效率提升</span></span><span><span>至</span></span><span><span>3.6 倍</span></span><span><span>，推理性能提升至 5</span></span><span><span>0</span></span><span><span>倍。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>本次大會，文心一言以及飛槳將披露技術和生態層面的最新進展，更關乎千萬開發者的切身使用體驗和權益～第十屆</span></span><span><span>WAVE SUMMIT</span></span><span><span>，值得期待。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>亮點二：乾貨十足，硬核低門檻開發祕籍大放送</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>當今，技術圈萬眾矚目的</span></span><span><span>A</span></span><span><span>gent 到底是何方神聖，應該怎麼打造</span></span><span><span>A</span></span><span><span>gent？</span></span><span><span>大模型與開發工具鏈相結合，為開發提效提供了哪些</span></span><span><span>新</span></span><span><span>可能？</span></span><span><span>硬件-框架-模型到底怎樣協同優化發揮最大效能？開發者們的「趁手利器」</span></span><span><span>C</span></span><span><span>omate 還能怎麼用？你想了解的各類技術乾貨，前沿的科技圈熱點，來</span></span><span><span>WAVE SUMMIT+2023</span></span><span><span>，不容錯過！</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span>亮點三：蓄勢待發，大模型賦能產業正當時</span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>大會主論壇之後，聚焦前沿、產業、硬件、開發應用等主題的五大平行論壇同步舉行，將</span></span><span><span>大模型前沿技術分享與產業落地的</span></span><span><span>心法一一奉上。</span></span><span><span>科學啓智</span></span><span><span>、</span></span><span><span>AI 賦能</span></span><span><span>，</span></span><span><span>AI for Science 塑造多學科研究新範式</span></span><span><span>，跨界融合創新展現</span></span><span><span>巨大應用潛能</span></span><span><span>；大模型產業應用中的標杆先行者放大招：華晨寶馬將帶來企</span></span><span><span>業級大模型 Agent 服務平台</span></span><span><span>、東方電科新能源功率準確性提升實現能效優化……</span></span><span><span>主流硬件廠商悉數亮相：NVIDIA、Intel、中科曙光、昇騰、燧原科技、太初</span></span><span><span>……</span></span><span><span>飛槳硬件生態朋友圈再擴大，生態勢能貫通產業鏈。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>亮點四：羣星閃耀，AI 產業生態星河萬裏</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>開源開放、眾行致遠</span></span><span><span>。為</span></span><span><span>持續引導探索產業 AI 關鍵場景，大會</span></span><span><span>還從</span></span><span><span>開源開放、產業創新等多個維度</span></span><span><span>，</span></span><span><span>評選出 「星河產業應用創新獎」，「文心 x 飛槳最具影響力開發者」</span></span><span><span>等大獎</span></span><span><span>，</span></span><span><span>並將於大會</span></span><span><span>現場頒獎，激發開源創新活力，</span></span><span><span>賦能產業繁榮生態，</span></span><span><span>助推產業智能化</span></span><span><span>。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>W</span></span><span><span>AVE</span></span>&nbsp;<span><span>SUMMIT</span></span><span><span>&nbsp;五年十屆，這也是中</span></span><span><span>國 AI 技術生態繁榮與崛起的關鍵時期。</span></span><span><span>開發者作為中堅力量，為智能世界貢獻出自己的智慧；飛槳星河社區以開源開放的姿態，匯聚了開發者們最聰明的大腦。大會將設有開發者相關環節，讓大家看到羣像背後的一個個故事，感受一點點星光、見證科技讓世界更有溫度。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span>亮點五：</span></span></strong><strong><span><span><strong>應用繁榮，創意市集與</strong></span></span></strong><strong><span><span><strong>AI</strong></span></span></strong><strong><span><span><strong>原生</strong></span></span></strong><strong><span><span><strong>W</strong></span></span></strong><strong><span><span><strong>orkshop 盡顯極客範</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>這次</span></span><span><span>WAVE SUMMIT+ 2023 為開發者專設多個體驗互動環節，</span></span><span><span>前面</span></span><span><span>提到的開發者市集就是其中之一</span></span><span><span>。本次開發者市集上，幾十款開發者打造的</span></span><span><span>AI</span></span><span><span>互動小應用，帶你沉浸式感受技術的魅力，現場還有開發者親自講解、示範，零距離接觸那些開發者大神。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="265" src="https://static.oschina.net/uploads/space/2023/1226/134921_vHME_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>此外，大會還為開發者們精心準備了三場</span></span><span><span>Workshop</span></span><span><span>，</span></span><span><span>現場</span></span><span><span>手把手教你</span></span><span><span>打造自己的 AI</span></span><span><span>原生</span></span><span><span>應用</span></span><span><span>。星河探索，智能應用，志在推進高質量、高可用的</span></span><span><span>AI</span></span><span><span>原生應用落地的最後一公里，</span></span><span><span>現場</span></span><span><span>將帶來星河社區</span></span><span><span>ERNIE Bot</span></span>&nbsp;<span><span>SDK</span></span><span><span>的能力講解與實戰，幫你解鎖文心一言無限可能，還有更多</span></span><span><span>AI</span></span><span><span>原生應用落地和開發實戰，</span></span><span><span>玩轉原生應用</span></span><span><span>，感受 AI 原生應用魅力。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>在經歷過下午一系列酣暢的技術燒腦與極客碰撞後，晚上，開發者們可以到「</span></span><span><span>AI 開發者之夜</span></span><span><span>」好好放鬆一下，在這不僅可以挑戰</span></span><span><span>AI 原生小遊戲</span></span><span><span>，觀看精彩表演，也能「以 AI 會友」，共同奔赴 AI 時代的「詩與遠方」。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>隨着大模型的爆發，人工智能</span></span><span><span>的風已經吹到</span></span><span><span>社會的</span></span><span><span>各個</span></span><span><span>角落。</span></span><span><span>W</span></span><span><span>AVE SUMMIT+ 2023</span></span><span><span>這場 AI 開發者的「嘉年華」，讓每位參會者深入探索基於大模型的 AI 應用，瞭解技術發展前沿信息和應用風向，在新時代新機遇來臨之際，抓住先機，創造更多可能。</span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 05:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272772</guid>
            <link>https://www.oschina.net/news/272772</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kuasar 成為 CNCF 官方項目，探索容器運行時新紀元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F418445%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">Kuasar 成為 CNCF 官方項目，探索容器運行時新紀元！</a>》，作者：雲容器大未來。</p><p>北京時間 12 月 20 日，雲原生計算基金會（CNCF）正式接納多沙箱容器運行時項目<span>&nbsp;</span><strong>Kuasar</strong>（https://github.com/kuasar-io/kuasar）。Kuasar 的加入，極大地推動了雲原生領域容器運行時技術的探索、創新和發展。</p><p><img alt="11.png" src="https://bbs-img.huaweicloud.com/blogs/img/20231222/1703228593906841756.png" referrerpolicy="no-referrer"></p><p>作為 CNCF 首個多沙箱容器運行時項目，Kuasar 於 2023 年 4 月在 KubeCon + CloudNativeCon Europe 上由華為雲、中國農業銀行以及 openEuler 社區、WasmEdge 社區和 Quark Containers 社區聯合發起。Kuasar 融入了各企業和社區在容器運行時領域的前沿探索、技術積累和生產實踐，開源至今受到業界的廣泛關注和支持，已收穫 900 多個 GitHub Star 和 70 多個 Fork，數十位來自外部企業、高校的開源愛好者參與開發貢獻和積極落地應用，Kuasar 正以開源創新的姿態促進雲原生產業發展。</p><div><div><div><div><div><p><strong>「WebAssembly 正在快速成為雲原生技術棧的一個關鍵部分，Kuasar 深度集成了高性能、輕量級的 WasmEdge 沙箱，Kuasar 的加入使得 WebAssembly 生態和 CNCF 生態聯繫更加緊密，未來 WasmEdge 和 Kuasar 將共同推動在大模型、邊緣計算和函數計算等領域的發展。」</strong><strong>—— WasmEdge 項目創始人 Michael Yuan</strong></p></div></div></div></div></div><div><div><div><div><div><p><strong>「openEuler 社區在 Kuasar 項目發佈之初就率先完成與 Kuasar 多沙箱生態的對接，推出基於 iSulad + Kuasar + StratoVirt 的極速輕量安全容器解決方案。未來 openEuler 社區將繼續深化與 CNCF 社區項目的合作，為用戶提供更輕量、更安全、更多樣的容器化底座。」—— openEuler 技術委員會主席，胡欣蔚</strong></p></div></div></div></div></div><div><div><div><div><div><p><strong>「Kuasar 項目融入了華為雲在容器運行時領域多年的積累，結合了社區合作伙伴的實踐經驗。成為 CNCF 官方項目，表明了 Kuasar 社區開放治理的決心，致力於為企業和開發者提供廠商中立、多方協作的開放環境，促進各種沙箱技術的商用成熟，為用戶帶來極致體驗。」—— CNCF 官方大使，華為云云原生開源團隊負責人，王澤鋒</strong></p></div></div></div></div></div><div><div><div><div><div><p><strong>「雲原生場景多樣化促進了多種沙箱技術的蓬勃發展，沙箱技術接入北向生態成為普遍需求，Kuasar 推動了 Containerd 中沙箱技術標準的統一，提供了多種沙箱技術實現，為 CNCF 的容器運行時板塊注入了新鮮活力。」—— CNCF 官方大使 Containerd 社區維護者，蔡威</strong></p></div></div></div></div></div><span id="OSC_h2_1"></span><h2>Kuasar 項目介紹</h2><p>為了滿足企業在雲原生場景下的訴求，業界出現了多種沙箱容器隔離技術。然而，應用雲原生的沙箱技術仍面臨挑戰。一方面，各類雲原生場景對沙箱提出更高要求，單一沙箱無法同時滿足用戶雲上業務對安全隔離、極速低噪、標準通用等多個維度的要求，企業面臨雲原生業務場景全覆蓋問題；另一方面，支持多類沙箱帶來運維壓力顯著上升，當前業界沙箱技術對接容器運行時的實現缺乏統一開發框架，因此關鍵日誌、重要事件、沙箱管理邏輯等均存在差異，新引入沙箱的同時運維壓力陡增。</p><p>Kuasar 在保留傳統容器運行時功能的基礎上，與 Containerd 社區一起推動新的沙箱接口統一標準，並通過全面 Rust 化以及優化管理模型框架等手段，進一步降低管理開銷，簡化調用鏈路，靈活擴展對業界主流沙箱技術的支持。此外，通過支持多安全沙箱共節點部署，Kuasar 可以充分利用節點資源、降本增效，為用戶提供更安全高效的沙箱場景解決方案。</p><p><img alt="12.png" src="https://bbs-img.huaweicloud.com/blogs/img/20231222/1703228609750179875.png" referrerpolicy="no-referrer"></p><p>▲ Kuasar 項目全景圖</p><p>南向沙箱方面，Kuasar 已支持基於輕量級虛擬化技術的安全容器沙箱（Cloud Hypervisor、Qemu、StratoVirt），基於新興的 WebAssembly 沙箱（WasmEdge、Wasmtime），基於進程級虛擬化的 App Kernel 沙箱（Quark）以及基於內核的原生普通容器沙箱（runC）；北向引擎方面，Kuasar 已與 Containerd 聯合構建最新的沙箱接口標準，並共同推動該標準在 Containerd v2.0 版本的完整實現。此外，輕量級容器引擎 iSulad 項目也已經完成與 Kuasar 項目的深度集成，支持在 openEuler 23.09 創新版本上一鍵部署。</p><span id="OSC_h2_2"></span><h2>未來可期</h2><p>此次 CNCF 正式將 Kuasar 接納為官方項目，將極大促進 Kuasar 上下游社區生態構建及合作。Kuasar 將持續探索雲原生容器運行時領域技術創新，在企業數字化、雲原生轉型過程中發揮作用，讓基於 Kuasar 的多沙箱容器運行時方案融入更廣泛的雲原生技術生態。</p><p>作為 CNCF 亞洲唯一創始成員、白金會員，華為雲在 CNCF 貢獻量、Kubernetes 社區和 Istio 社區的代碼貢獻量持續多年穩居亞洲第一，已向 CNCF 貢獻了業界首個雲原生邊緣計算項目 KubeEdge、首個雲原生批量算力項目 Volcano、首個多雲容器編排項目 Karmada 等多個重量級雲原生開源項目，並持續開源 Kurator、Kappital、Kmesh 等創新項目，與全球雲原生社區共同發展。</p><span id="OSC_h3_3"></span><h3>Kuasar 社區技術交流地址</h3><p>Kuasar 官網：https://kuasar.io</p><p>項目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkuasar-io%2Fkuasar" rel="nofollow" target="_blank">https://github.com/kuasar-io/kuasar</a></p><p>Twitter:<span>&nbsp;</span>https://twitter.com/Kuasar_io</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10412251</guid>
            <link>https://my.oschina.net/u/4526289/blog/10412251</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：Karmada 成為 CNCF 孵化項目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femberstack%2Fkubernetes-reflector" target="_blank">kubernetes-reflector</a></h3><p>Reflector 是一個 Kubernetes 的插件，旨在監視資源（secrets 和 configmaps）的變化，並將這些變化反映到同一命名空間或其他命名空間中的鏡像資源中。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsubstratusai%2Flingo" target="_blank">Lingo</a></h3><p>Lingo 是適用於 K8s 的 OpenAI 兼容 LLM 代理和自動縮放器。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fflanksource%2Fcanary-checker" target="_blank">canary-checker</a></h3><p>canary-checker 是一個基於 Kubernetes 的本地平台，用於通過被動和主動（合成）機制監控應用程序和基礎架構的健康狀況。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40elementtech.dev%2Fkubernetes-image-proxy-cache-from-minutes-to-milliseconds-fd14173e831f" target="_blank">Kubernetes Harbor 圖像代理緩存 — 從幾分鐘到幾毫秒</a></h3><p>這篇文章介紹瞭如何通過使用 Harbor 作為 Kubernetes 的代理緩存來提高容器鏡像的拉取速度。文章首先解釋了 Kubernetes 中容器鏡像的拉取過程和現有的緩存機制的侷限性，然後介紹了 Harbor 作為一個 CNCF 項目的作用，並詳細説明瞭 Harbor 的 Pull Through Proxy Cache 機制。該機制可以在本地緩存中存儲常用的鏡像，當節點需要拉取鏡像時，可以直接從本地緩存中獲取，減少了網絡延遲和帶寬消耗。文章還介紹瞭如何在 Kubernetes 上安裝和配置 Harbor，並提供了使用 Harbor 的示例命令。最後，文章介紹瞭如何通過使用 Harbor Cache Mutating Webhook 來自動讓 Kubernetes 使用代理緩存。總體而言，這篇文章詳細介紹瞭如何通過 Harbor 實現快速的鏡像緩存，提高容器化環境中的部署效率。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40sushantkapare1717%2Fhelm-vs-kustomize-in-kubernetes-cc063bbb4b0e" target="_blank">Kubernetes 中的 Helm 與 Kustomize</a></h3><p>這篇文章比較了 Helm 和 Kustomize 這兩個用於管理 Kubernetes 清單文件的工具。文章首先介紹了 Kubernetes 在現代 IT 基礎架構中作為容器編排和管理的事實標準，並指出在規模化部署應用程序時，管理複雜配置和清單文件變得至關重要。然後詳細介紹了 Helm 和 Kustomize 這兩個工具的特點和優勢。Helm 是一個用於簡化應用程序部署和管理的 Kubernetes 包管理器，具有模板化、可重用性、版本管理和社區支持等優點。Kustomize 是另一個用於自定義 Kubernetes 清單文件的工具，採用"patch"的方法，支持聲明性修改現有清單文件和配置覆蓋。文章還提供了使用 Helm 和 Kustomize 的示例，並對它們進行了比較，包括模板化與補丁應用、靈活性和學習曲線等方面。最後，文章強調了根據具體需求和偏好選擇適合的工具的重要性，並鼓勵讀者保持對最新工具和最佳實踐的瞭解，以提高部署效率。</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthenewstack.io%2Fkarmada-finally-brings-multicloud-control-to-kubernetes%2F" target="_blank">Karmada 成為 CNCF 孵化項目</a></h3><p>日前，雲原生計算基金會的技術監督委員會 (TOC) 投票決定接受 Karmada 作為 CNCF 孵化項目。</p><p>Karmada 通過一組 Kubernetes 原生 API 和高級調度功能，提供了一種跨不同雲提供商運行 Kubernetes 集羣的方法。它不需要對應用程序本身進行任何更改。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2023%2F12%2F12%2Fdocker-buys-atomicjar-to-integrate-container-based-test-automation%2F" target="_blank">Docker 購買 AtomicJar 以集成基於容器的測試自動化</a></h3><p>Docker 購買了 AtomicJar 及其 Testcontainer 項目，為 Docker 提供了更好的測試方案，但引發了對未來許可成本和對其他容器運行時支持的擔憂。</p><p>Docker 首席執行官 Scott Johnston 表示，添加 TestContainers 使 Docker 的開發人員工作流程更加完整，為涵蓋構建、驗證、運行、調試和共享的現有功能添加了測試。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F12%2F21%2Fciliums-2023-annual-report%2F" target="_blank">Cilium 2023 年年度報告</a></h3><p>2023 年對於 Cilium 來説是一個重要的里程碑，被稱為 Cilium 畢業年。今年，我們看到 Cilium 生態系統在貢獻和採用方面都取得了顯着增長。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcilium%2Fcilium.io%2Fblob%2Fmain%2FAnnual-Reports%2FCilium%2520Annual%2520Report%25202023.pdf" target="_blank">2023 年 Cilium 年度報告</a>旨在強調這些進步，重點關注 Cilium 貢獻者和最終用戶社區的增長和活動。</p><p>該報告通過項目里程碑和承諾等數字數據以及社區領導者、最終用戶和貢獻者的個人見解，全面介紹了社區的健康狀況。它深入探討了幾個關鍵領域：Cilium 畢業進度、貢獻者增長、主要發佈亮點、2023 年 Cilium 用戶調查的反饋、Cilium 在生產環境中的使用情況、社區參與和報價、社區活動以及 2024 年項目方向。</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10398476</guid>
            <link>https://my.oschina.net/u/4197945/blog/10398476</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Fedora 40 計劃統一 /usr/bin 和 /usr/sbin]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>早在多年前，Fedora 曾合併了 /bin 和 /usr/bin。時至今日，針對 Fedora 40&nbsp;提交的一項最新更改<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fwiki%2FChanges%2FUnify_bin_and_sbin" target="_blank">提案</a>則提出，統一其&nbsp;/usr/bin&nbsp;和&nbsp;/usr/sbin&nbsp;位置；因為&nbsp;<span style="background-color:#ffffff; color:#121212">/bin 和 /sbin 之間的劃分已不再有用，且無人使用。</span></p><p>提案解釋稱：</p><blockquote><p>/usr/sbin 目錄成為 bin 的 symlink，這意味着 /usr/bin/foo 和 /usr/sbin/foo 等路徑指向同一個地方。/bin 和 /sbin 已經是 /usr/bin 和 /usr/sbin 的 symlink，因此 /bin/foo 和 /sbin/foo 實際上也指向同一個地方。/usr/sbin 將從默認的 $PATH 中刪除。</p></blockquote><p><img height="219" src="https://oscimg.oschina.net/oscnet/up-ed7d7efd2d93feaf5de7d017798772f87b4.png" width="700" referrerpolicy="no-referrer"></p><p>該變更提案認為這對 packagers 和 end-users 來説都是一種簡化，且 Fedora 將與 Debian 等其他 Linux 發行版更加兼容。</p><p><strong><span><span><span style="color:#373a3c"><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span>對 Fedora 的好處：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>Packagers&nbsp;不必考慮是將程序安裝在<code>%_bindir</code>還是<code>%_sbindir</code>。</li><li>用戶不必考慮程序是安裝在<code>%_bindir</code>還是<code>%_sbindir</code>.</li><li>Fedora 與其他發行版變得更加兼容。「例如，我們有 /sbin/ip，而 Debian 有 /bin/ip；我們有 /bin/chmem 和 /bin/isosize，而 Debian 有 /sbin/chmem 和 /sbin/isosize、 我們還有 /sbin/{addpart,delpart,lnstat,nstat,partx,ping,rdma,resizeepart,ss,udevadm,update-alternatives}，而 Debian 的這些都在 /bin 下，等等。」</li><li>Fedora 與 Arch 更加兼容，Arch 於幾年前進行了合併。</li><li><code>execvp</code>和相關函數遍歷的目錄更少。這對於速度可能並不重要，但在查看日誌或<code>strace</code>輸出時是一個很好的簡化。</li></ul><p><strong><span><span><span style="color:#373a3c"><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span>升級/兼容性影響</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span style="color:#373a3c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>對於用戶來説，這種變化基本上是不可見的。在過渡過程中，兩套路徑都應正常工作，用戶在<code>$PATH</code>中應同時擁有這兩個目錄。一旦過渡完成，兩套路徑都將正常工作，但用戶在<code>$PATH</code>中只能看到<code>/usr/bin</code>。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>目前，該變更提案仍處於擬議狀態，需得到 FESCo 的批准後才能應用在四月發佈的 Fedora 40 中。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272754/fedora-40-unify-usr-bin-sbin</guid>
            <link>https://www.oschina.net/news/272754/fedora-40-unify-usr-bin-sbin</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2023 年度低代碼企業 TOP50 榜單公佈 — JeecgBoot 連續兩年榮登榜單]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="margin-left:0; margin-right:0">近日，中國科學院主管、科學出版社主辦的國家級核心期刊《互聯網週刊》聯合 eNet 研究院、德本諮詢評選的《2023 低代碼企業 50 強》榜單正式公佈。這一榜單的公佈引起了業內外的廣泛關注，因為其中涵蓋了低代碼開發領域的眾多傑出企業，展現了低代碼產業的發展趨勢和行業格局。</p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在這份備受矚目的榜單中，知名企業釘釘、騰訊雲、華為雲等行業優秀廠商的產品悉數入選，充分展現了它們在低代碼領域的技術實力和市場影響力。而更加令人矚目的是，<code>JeecgBoot</code><span>&nbsp;</span>作為低代碼開發領域的領軍企業，連續兩年榮登榜單，憑藉其卓越的產品實力和市場表現，再次彰顯了其在行業中的領先地位和影響力。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">JeecgBoot 低代碼平台作為備受認可的低代碼開發平台，一直以來致力於為企業提供高效、靈活、可定製的低代碼開發解決方案。其產品以簡單易用、快速開發、可視化操作等特點而著稱，深受廣大企業用戶的青睞。JeecgBoot 連續兩年榮登《2023 低代碼企業 50 強》榜單，再次印證了其在低代碼開發領域的卓越地位和不斷增長的市場影響力。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">www.jeecg.com</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="330" src="https://oscimg.oschina.net/oscnet/up-458906dcd2cc0cb63a454761d96b1602826.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">同時在 2023 年，JeecgBoot 又推出了 「敲敲雲」 零代碼產品，將為低代碼市場帶來新的競爭對手和發展動力。這不僅豐富了 JeecgBoot 的產品線，也為企業用戶提供了更多元化的選擇。隨着低代碼和零代碼市場的不斷髮展，我們有理由相信，這將為整個數字化轉型領域帶來更多的機遇和活力。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">www.qiaoqiaoyun.com</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-cad61647c80a1dbdedac3adc1d490cb1917.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="2516" src="https://oscimg.oschina.net/oscnet/up-c3e1f9901ed0f7fbba1f83cc3cf120a9ab1.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272750</guid>
            <link>https://www.oschina.net/news/272750</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[上雲？下雲？降本增笑？割韭菜？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本月，滴滴崩潰事件鬧得轟轟烈烈，各種離譜派單層出不窮，而造成這一混亂的，則是底層出故障的雲。尷尬的是，這已經不是第一次雲崩潰事件了，距離上一次阿里雲事件，還不到一個月。</p><p>一時之間，各種有關「雲」的討論紛紛揚揚：有人眼饞馬斯克的 X 下雲省錢，覺得反正都有風險，還不如自己弄，這樣更可掌控，也更清楚；有人則認為上雲才是未來的趨勢，想要發揮出軟件的最大優勢，上雲更合適。</p><p>那麼，實際操作中，到底是自建雲更安全，還是公有云更有保障？對普通的廠商而言，該怎麼選擇呢？對此，開源中國邀請了前滴滴軟件開發工程師李鶴、AutoMQ 聯合創始人 &amp; CTO 周新宇、前淘寶 DBA 蔣明、磐吉雲數 CEO 馮若航、公眾號《瑞典馬工》主理人馬工，一起來討論。</p><p>&nbsp;</p><span id="OSC_h1_1"></span><h1>上雲到底有沒有必要？雲是不是在割韭菜？</h1><p><strong>正方：周新宇 speaking ——</strong></p><p>我個人大概是在 16 年就加入阿里巴巴巴的中間件團隊了，服務了很多客戶。從我個人的經驗來講：</p><p><strong>第一，沒有云之前，硬件出了問題，解決的門檻很高。</strong>阿里內部上雲之前，因為消息中間件集羣規模很大，硬件它總是在出問題，比如説因為網卡問題導致了 TCD 重視率很高，硬盤出現局部的不可寫；比如服務器某個硬件溫度過高，導致一些局部的節點不可用。好在阿里有專業的團隊幫忙解決，但這在小企業就很難負擔了。</p><p><strong>第二，公有云比專有云效率高。</strong>像我們專門做交付，交付完才是第一步，後面有很多的運維工作，這些運維工作，如果我們遠程去做的話，效率比較低，如果去駐廠的話，成本又比較高。公有云的模式，通過聚集算力和統一標準，帶來了很多效率上的提升。</p><p><strong>第三，雲計算能加速業務的創新，提高社會運轉效率。</strong>像在線教育行業，幾年前，基本上都利用了公有云的優勢來快速進行業務的創新。如果沒有云計算，如果不上雲，這些完全不可能發生。還有疫情期間的遠程會議，一定程度上保障了社會各方面的正常運轉。背後的釘釘這些企業軟件，也都是雲計算在提供算力。</p><p>過去，大部分企業還是以雲託管的方式上雲為主，基本上就是傳統的軟件架構，通過這個方式進行上雲。但不管怎麼樣，一定程度上解決了效率和創新問題。今天在降本增效的浪潮下，企業用雲，可能不能暴力地照搬以前的架構了，架構需要面向雲的能力去設計、去優化，把雲原生的能力發揮出來。</p><p>&nbsp;</p><p><strong>反方：馮若航 speaking ——</strong></p><p>我比較喜歡用實打實的數據來定量分析雲。我的觀點是：在降本增效成為主旋律的大背景下，對於有一定規模的雲上企業來説，下雲自建是一個非常經濟務實的選項。我認為公有云它是有適用光譜的，絕對不是他們宣稱的數字化萬金油。不在這個光譜範圍內的業務，如果選擇上雲，或者是留在雲上，那就是被割韭菜了。</p><p><strong>我這有歪詩一首：世人常道雲上好，託管服務煩惱少。我言云乃殺豬盤，溢價百倍實厚顏。賽博地主搞壟斷，坐地起價剝血汗。運維外包嫖開源，租賃電腦炒概念。</strong></p><p>公有云的商業模式概括起來就是一個事兒：租——租服務器租帶寬租磁盤租運維，這跟租房沒有什麼本質的區別，自建我們就可以類比為買房。那麼租房還是買房的決定性因素是什麼？我認為是租售比。房子的租售比一般在幾百一個月，那大家買房可能要掂量。那麼，服務器的租售比、雲算力的租售比一般在半年左右使用費=購買價格。雲磁盤的租售比就更離譜了，只有十幾天到一個月。你用一塊雲盤十幾天就能買下來，你用一台雲服務器，六個月就能把它買下來，那麼你為什麼要把一個業務跑在這租的東西上，而不是直接把它買下來？如果你的業務生命週期超過六個月，你可以考慮把它買下來，而不是租。</p><p>為什麼雲的價格這麼貴？我認為根本原因在硬件上。硬件遵循着摩爾定律在指數增長，成本在指數下降，而這個指數變化並沒有在公有云的價格上反映出來，所以公有云從最開始的普惠基礎設施，發展到今天變成了一個殺豬盤。它的資源租賃價格已經達到了自建單價的幾十倍上百倍，堪稱終極的成本刺客。</p><p>這也引發了一些新的變化，比如説馬斯克的 X（Twitter）、DHH 的 37Signals，算了賬單之後，明智地選擇了從雲上搬遷下來，節約了每年上千萬甚至上億的成本。我認為，這些案例對於整個行業，都是非常具有借鑑意義的里程碑標誌。</p><p>所以，<strong>我認為雲的適用光譜就是三件事——小規模，高彈性，全球化。不在這三個場景之內的業務，你選擇留在雲上，就是在為幾倍幾十倍的溢價交智商稅、被割韭菜。</strong></p><p>&nbsp;</p><p><strong>正方：周新宇 speaking ——</strong></p><p>我覺得這裏面有一個誤區，<strong>不能拿這個硬件的成本去跟軟件、甚至跟雲服務對比。</strong>比如説馮總以前寫過一篇文章，就是拿本地盤跟 EBS 價格做對比。實際上我認為 EBS 它本身是一個軟件服務，它背後是一整套的完整的分佈式系統，雲服務已經提供了至少三個九的可用性。但本地盤它是硬件，它的故障概率是比較高的，不同的廠商，年化的故障率可能都有差異，有些可能甚至高達 5% 左右。任何硬件壞了都可能導致無法訪問這個本地盤的數據，但在雲上，ECS 也好 EBS 也好，它們都是軟件，你可以理解為它們就是存算分離的。從應用角度來看，ECS、EBS 都是無狀態的，EBS 還解決了一個多副本問題。</p><p>如果今天要用本地盤，肯定得主副本，那數據的複製帶來的網絡帶寬消耗、計算資源消耗、存儲空間消耗，都需要考慮到成本里面。另外，EBS 它後面是一個大規模的存儲節點區域，是能夠應對大量磁盤故障的，也能夠解決這個數據完整性問題。如果真的要拿 EBS 跟本地盤去對比的話，我覺得至少得讓用戶去自建一套分佈式存儲系統，跟使用 EBS 做對比，還得把運維的人力成本也考慮進去。這些在自建、規模比較小的情況下，是很難算清楚的。</p><p>&nbsp;</p><p><strong>反方：馮若航 speaking ——</strong></p><p><strong>上雲的成本比自建要高得多。</strong>我自己 15 年的時候在淘寶的 CNZZ，友盟+這個部門算是第一波被推上阿里雲的內部 BU。在上雲之前，我們有一個自己的機房，幾百台服務器，一年所有成本算進去 1000 萬。後來上了阿里雲大數據全家桶數據庫 ODPS 這些東西，每年計算 3000 萬存儲 4000 萬。從 1000 萬變成 7000 萬這件事直接給了我對雲的第一印象，因為阿里雲是手把手出工程師加入我們團隊幫我們改造業務搬上雲的，從原來的每年 1000 萬搬到了後來的每年 7000 萬，而乾的事情，本質上卻還是一模一樣的，都是統計和計算規模，也沒有出現特別的變化。在上完雲之後，我們的效能並沒有出現變化，但是成本卻是實打實地翻了七倍。</p><p>這是我自己親身經歷的一個案例。如果説更有共性的一件事，我覺得可以參考一下 Amazon。AWS 在 2013 年提出的公有云價值，他舉了六個點：彈性、敏捷、全球化出海、將資本支出轉變為運營支出，以及更低的成本、消除重複建設。</p><p>但是，<strong>這些公有云價值主張在 2023 年很多已經不成立了，</strong>甚至説很多已經沒有價值了。我認為還有價值的點就是彈性、agility 和全球化出海，但是這裏面覆蓋的光譜其實並不多，特別是在高價值用戶羣體裏面並沒有覆蓋那麼多，更多是小微初創小規模業務會用到這些點。</p><p>比如這個 CAPEX 轉為 OPEX，將資本支出轉為運營支出。這一點，我認為除了對於那種連六個月都活不過的小業務有價值之外，凡是超過六個月，買肯定比租合算了。lower cost 是 AWS 當初相對於這些企業級解決方案來説的，它更便宜。比如説 Oracle 一盒 1 月你要付一萬塊錢，那麼 AWS 上的 RDS 每個月只要 1000 塊錢，是不是很便宜？但是那個時候，你可以説只有我這一家有云，所以我可以用這個價值定價，但現在誰家沒有一個 RDS ？開源的 RDS 管控都出來了。那麼這就變成了成本定價。既然是成本定價，我用雲數據庫加硬件，用這種開源的方案加上硬件 20 塊錢一盒，1 月不比這 1000 塊錢或者 400 塊錢的 RDS 要香嗎？lower cost 這個事兒已經完全變味兒了，現在不是 lower cost 是 higher cost。</p><p>至於消除重複建設這個事，我認為現在開源幹得已經比這好了，各家都有自己的 EC2 VPS，但是 K8s 很明顯一統了這些無狀態服務調度天下，所以我認為在 2023 年公有云的價值就剩下了全球化合規出海，它的適用光譜已經縮小到了小規模業務和高彈性業務和出海業務這三樣。以前我們業界大概有一個規模估算，你在雲上的年消費在 100 到 300 萬這個區間，你就應該考慮下雲了。我認為，隨着資源雲和開源平替的出現，100 萬-300 萬的閾值將會被進一步拉低至 10 萬-30 萬或者 1 萬-3 萬。我認為這件事很有可能會發生，而且正在發生。</p><p>&nbsp;</p><span id="OSC_h1_2"></span><h1>如今上雲還安全嗎？穩定性有多強？</h1><p><strong>反方：馬工 speaking ——</strong></p><p>對於安全，我有很多話説。作為一個軟件工程師最基本的是，你不能把密碼直接寫死、hard code 就編碼到你的代碼裏面，更不能把它提交到 Github 上，這屬於初級的實習生犯的錯誤對不對？</p><p>但是我看了一下，國內的騰訊雲阿里雲和華為雲什麼的，全都教用戶把那個 Access ID，編碼到代碼裏面。阿里雲和騰訊雲去年已經改正了，因為我寫文章揭露他們。但是至今為止，華為雲和火山引擎上面的範例裏面還是頁編碼，Access key，這是非常不負責任的一個做法。</p><p>我為什麼説他們是一個草台班子，因為這就相當於修了一座橋，然後把橋的地基給抽掉了，或者説做了一個保險庫，但是把鑰匙給插在那個鎖上了。就這樣還談安全？</p><p>我們可以看一下更近的例子，滴滴出了事故影響了上千萬的出行，它連具體的技術原因都沒提出來，只説我們會改進、我們是一個內部系統。但這個內部系統是什麼？你怎麼改進這個系統？基礎系統是外購的，還是自研的？什麼都沒説，但是北京那個地鐵追尾，人家就成立調查組了，調查組就會有調查結論，就會有限期改正通知書，你得覆盤，你得彙報，監管部門會過來檢查，然後發通知給其他的地鐵公司，讓別人吸取他的教訓。這才是一個真正的工程行業。</p><p>我贊同周新宇説的「雲廠商的故障比自建機房的故障更令人矚目」，但是，<strong>我的機房出故障，我可以得到最全面的信息，雲廠商出故障，我得不到所有的信息，甚至他不給我信息。</strong>比如阿里雲至今也沒有披露技術細節。甚至有一些廠商，他是隱瞞故障，他不會跟你通知，而是想着偷偷修復了你就不知道了。這是一個非常讓我們擔心的問題：沒有透明度。這樣你也無法從業務上規避它，只能求它別出事了。這是非常危險的。</p><p>&nbsp;</p><p><strong>正方：周新宇 speaking ——</strong></p><p>今天雲廠商確實做得不夠好，但這也是會改進的。雲廠商在安全和數據完成這塊都有很大的投入，我們以前做一個架構，要經過很多層的安全架構評審，並不是説啥都不做。當然，雲計算這個技術也好，雲計算這種商業模式也好，它肯定是有進步空間的，不能因為當前雲廠商某些地方還不夠成熟，就完全否定上雲的優勢或者是雲計算的優勢。</p><p>&nbsp;</p><p><strong>正方：蔣明 speaking ——</strong></p><p>尤其是大規模的數據庫用戶，還是上雲才能解決需求。像肯德基，阿里雲出事以後，他們就把業務遷到了抖音建的雲上，並沒有遷到自己的機房裏。</p><p>根據我的經驗，自建機房的話，如果只是一兩台機器託管一下的話，還是比較簡單的。但是當機器達到四五千台的時候，那你就會遇到 CPU 的故障、內存的故障和磁盤的故障，這時候，你就會很依賴監控系統。我有過大概 4000 多台物理機的這種機房託管經驗，當時用的是南京的管理系統，也是騰訊的開源軟件，實時監控用的是阿里的監控軟件 SLS，哪個磁盤出故障了，就發給線下的運維，讓他去換。如果全部都是自建的話，根本就做不到。</p><p>像我們現在的政務雲、水電煤背後的技術支持，全部都是在雲上的，政府的政務處理系統，銀行的交易系統也全部都在雲上，如果雲真的一無是處，那我們生活當中，支付寶就沒辦法掃了，錢也付不出去。</p><p>&nbsp;</p><p><strong>反方：馮若航 speaking ——</strong></p><p>我覺得你説的問題非常嚴峻，就是所謂的雲集中的問題。Gartner 最近發佈的 2023 年三季度新興風險報告裏面，<strong>雲集中風險已經連續第二年進入「五大新興風險」綜合榜單，在中國排第三位。</strong>雲集中説的就是雲廠商已成為了新的單點，爆炸半徑極大。阿里雲這一掛，有多少服務宕機了？如果政務雲金融雲這些都跑在阿里雲，那掛了怎麼辦？</p><p>去年阿里雲香港區域故障就導致香港政府很多單位的網站和電子政務不能用。</p><p>所以，<strong>這就是一個下雲的重要 argument ——為了安全性和自主可控。</strong>上雲其實就是放棄了自主可控，放棄了一部分的安全性。你沒有辦法對機密性、完整性去進行任何的驗證，甚至是追索。</p><p>我是搞信息安全的，安全裏面有三個點：CIA ——機密性，數據完整性和可用性。就是不丟，不壞，不宕。但是雲廠商它不給你兜機密性和完整性，它只給你兜可用性，而且是非常遜色的可用性。</p><p>比如説雲 RDS for PostgreSQL，這個雲數據庫的基礎版甚至都沒有望歸檔，也就是説它沒有數據庫 PITR 時間點恢復的能力，一個數據庫服務竟然沒有基礎的時間點恢復能力，我認為這對於一個數據庫用戶來説是完全不可接受的。至於機密性，那就更沒法保證了，你甚至沒有辦法去驗證發現任何數據丟失。但要是自建機房，就不會存在這樣的風險。</p><p>&nbsp;</p><span id="OSC_h1_3"></span><h1>中小企業該怎麼選？</h1><p><strong>正方：周新宇 speaking ——</strong></p><p>如果是一家初創企業，那肯定是毫無疑問要上雲，第一天就應該把你的 IT 設施構建在雲上，這樣未來的業務創新或試錯成本都非常低。這是，如果你的企業已經在重度用雲，今天因為成本的問題在考慮是否下雲，那我覺得是要慎重的，因為不管是上雲還是下雲，折騰一次代價是比較大的。所以説更好的方式是去分析雲上的賬單，這裏相對於自建有很大的優勢：在雲上你的一切價格賬單都是透明的，到底貴在哪裏，可以針對性地去降本。</p><p>&nbsp;</p><p><strong>正方：蔣明 speaking ——</strong></p><p>可以用阿里雲、騰訊雲、AWS 的基礎建設能力，比如 ECS 或 OSS，加上第三方的開源軟件，比如 TiDB、AutoMQ，這些軟件，它價格便宜，又能用雲廠商最便宜的基礎能力構建一個企業的自動化 DevOps 系統，讓你用最低的成本，在雲上創業。至於後面企業大了，像馬斯克的 X 公司，那自建雲是最佳的選擇，畢竟成本會更低。</p><p>&nbsp;</p><p><strong>反方：馮若航 speaking ——</strong></p><p>從務實的角度來講，小企業其實是適合雲的，但是你也不要把所有的東西都深度依賴雲。</p><p>第一，你有自建能力，這是你跟雲廠商談價格折扣的最大籌碼！</p><p>第二，優先使用資源雲。什麼是資源雲？像租用它的虛擬機，儘可能的避免使用它的專有服務、被供應商鎖定。</p><p>第三，如果你在雲上非要用這些服務，請避免使用 AKSKIAM 這些讓你陷入供應商鎖定的東西。這些不僅會讓你陷入雲單點故障中，更是會把你綁在一個你下不來的賬單下。</p><p>&nbsp;</p><p><strong>反方：馬工 speaking ——</strong></p><p>我覺得雲是一個操作系統，你用雲就相當於從 Windows 系統切換到 Linux，這需要非常大的努力，需要一個範式轉移。這個轉移路上，你必須要有人帶着你走。但我目前看雲自己也不知道怎麼走。這有一個大膽的估測：</p><p>90% 的雲廠商的員工，沒有自己的雲賬號；</p><p>90% 的雲廠商的員工，沒有考過雲的認證；</p><p>90% 的雲廠商的員工，從來沒有在雲上維護過或者部署過一個生產系統。</p><p>我覺得大家還是謹慎一點，除非雲廠商能夠證明雲計算的價值點，然後給出一個很明確的路徑，不然的話你就不要那麼急躁地為了雲而云。另外，騰訊會議或者釘釘那不是雲，跟微信一樣，只是一個很普通的 Saas 系統，這個跟你要負責任的企業 IT 系統是完全不一樣的。</p><p>&nbsp;</p><p>大家對此怎麼看呢？快留言説説你的經驗吧~</p><p>&nbsp;</p><p>直播回放如下，錯過的趕緊掃碼看看回放吧↓↓↓</p><p style="text-align:center"><img height="255" src="https://oscimg.oschina.net/oscnet/up-0da327351049eec05882b4fa1fb0a6df839.png" width="257" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6852546/blog/10398475</guid>
            <link>https://my.oschina.net/u/6852546/blog/10398475</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國網絡安全審查認證和市場監管大數據中心正式掛牌]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 25 日，中國網絡安全審查認證和市場監管大數據中心（下稱網數中心）正式掛牌成立。</p><blockquote><p>根據中央編辦批覆，中國網絡安全審查技術與認證中心更名為中國網絡安全審查認證和市場監管大數據中心，整建制劃入市場監管總局信息中心，同時劃入競爭政策與大數據中心部分職能。主要職責是承擔網絡安全審查與認證相關標準研究和技術支撐、市場監管信息化建設、大數據分析應用、智慧監管建設等工作。</p></blockquote><p><img alt="" height="324" src="https://oscimg.oschina.net/oscnet/up-b50e4470001eac5b4504facfa10718e4195.jpg" width="500" referrerpolicy="no-referrer"></p><p>具體來説，網數中心的主要職責是：</p><p>依據《網絡安全法》《數據安全法》《個人信息保護法》《網絡安全審查辦法》及國家有關強制性產品認證法律法規，承擔網絡安全審查技術與方法研究、網絡安全審查技術支撐工作；在批准範圍內開展與網絡安全相關的產品、管理體系、服務、人員認證和培訓、檢驗檢測等工作；參與研究擬訂市場監管信息化發展規劃，協助指導全國市場監管系統信息化建設、管理和應用推廣工作；承擔市場監管業務應用系統和總局政務信息系統建設、運維及技術保障工作；承擔市場監管行業標準組織協調工作，承擔全國統一的市場監管信息化標準體系的建立完善工作；負責市場監管大數據中心建設、管理和運行維護工作，支撐智慧監管建設；受委託承擔市場監測技術支撐工作；開展網絡安全認證、市場監管信息化與大數據分析應用、智慧監管等領域的國際合作與交流。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272732</guid>
            <link>https://www.oschina.net/news/272732</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟 Bing Chat 接入 GPT-4 Turbo 模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowslatest.com%2F2023%2F12%2F25%2Fmicrosoft-bing-chat-gets-chatgpt-4-turbo-for-free-code-interpreter-big-upgrade-ahead%2F" target="_blank">根據&nbsp;Windows Latest&nbsp;的報道</a></u>，微軟現已將 GPT-4 Turbo 模型接入 Bing Chat，並向部分用戶免費開放。</p><p>GPT-4 Turbo 模型是 OpenAI 在 11 月的開發者大會上公佈的最新模型，能力相比 GPT-4 更加強大。正常來説，該模型需要付費使用，<strong>但被選中的 Bing Chat 測試用戶可以免費體驗該模型的能力</strong>。微軟表示，測試用戶的選擇完全隨機，微軟稱之為稱之為「A / B」測試。</p><p>因此能否通過必應聊天使用 GPT-4 Turbo 完全憑運氣，但微軟已確認計劃在未來幾周內擴大推廣範圍。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fe3a67b4f285f9fe3161322aa93bb4efc4.png" referrerpolicy="no-referrer"></p><p>微軟還計劃升級代碼解釋器功能，使其與 OpenAI 的功能保持一致。這意味着微軟 Copilot 中的代碼解釋器很快就能處理更復雜的編程或數據問題。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272729/bing-chat-gets-chatgpt-4-turbo</guid>
            <link>https://www.oschina.net/news/272729/bing-chat-gets-chatgpt-4-turbo</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開放籤開源電子簽章 1.0 版本上線一週的總結]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#4272ef"><strong><span>上線後的反饋</span></strong></span>&nbsp; &nbsp; &nbsp; &nbsp;</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 開放籤 1.0 版本於 12 月 15 日上線發佈後，給我們帶來了很多驚喜，也矯正了我們很多錯誤的觀點。</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 好的地方是我們開源工具版、企業版共有數百個用戶在使用。在開源社區獲取了 40 多個 start（感謝肯定），官網每天都有六七十的訪問量。這些小成績更加堅定了我們之前的判斷。</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 不太好的是我們沒有想明白企業版的收費邏輯，很多用戶諮詢企業版的收費方式，我們目前也沒啥標準，可能會給早期客戶帶來不好的感受。不瞞大家説，其實企業版的收費邏輯我們也沒有想好，因為我們產品出來前也沒有真實付費的用戶，所以收費這方面我們先跑跑再説。在沒有明確的收費邏輯前，我們先讓早期用戶免費用起來也是挺好的方式，最起碼能證明產品能力對用戶來説是有價值的，怎麼收費慢慢來吧。</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 兩個版本用戶反饋最多的問題主要有：</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>開源工具版：</strong>支持 SM2 算法、OFD 文件簽署、分辨率兼容等；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>企業版：</strong>標準收費邏輯是什麼？（希望大家可以提供些建議）</p><h1><span style="color:#4272ef"><strong><span>下一步工作計劃</span></strong></span></h1><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>開源工具版：</strong></p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （1）支持 SM2 算法、OFD 文件簽署、分辨率兼容等；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （2）前端頁面支持移動端的相關操作；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>企業版：</strong></p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （1）增加 CA 機構數字證書，支持具有法律效力的電子簽名；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （2）增加業務線功能模塊，滿足各種簽署場景的靈活配置；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （3）增加文件模板功能，滿足在線編輯文件模板；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （4）梳理企業版收費標準；</p><h1><strong><span style="color:#4272ef">總結</span></strong></h1><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 開放籤 1.0 版本上線後確實給我們帶來了很多驚喜，也快速的驗證了我們很多的想法。接下來還需要以更快的速度迭代出更多好用的功能帶給用戶，儘快打通與用戶的真實互動，讓用戶早日應用在真實業務環境中。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272720</guid>
            <link>https://www.oschina.net/news/272720</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openKylin 榮譽+1！榮獲人民網【人民企業社會責任獎「年度案例獎」】]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span>12 月 21 日，由人民日報社指導、人民網主辦的 2023 人民企業社會責任榮譽盛典暨第 18 屆人民企業社會責任獎頒獎活動在京順利舉辦，<strong>開放麒麟（openKylin）1.0 憑藉在開源創新領域的突出貢獻，榮獲人民企業社會責任獎年度案例獎。</strong></span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fba19d23cce6b40aadd0f4220d261f5d981.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:justify"><span>「人民企業社會責任獎」評選活動創設於 2006 年，是中央重點新聞網站在企業社會責任領域最早發起的活動之一。本次活動以「權威性、大眾化、公信力」為宗旨，以「勇毅實幹&nbsp;共向未來」為主題，設置了「年度企業獎」「年度案例獎」「鄉村振興獎」「綠色發展獎」「築夢未來獎」和「特別貢獻獎」六大獎項。分別從企業履責、公益行動、鄉村振興、綠色發展、兒童事業、共建「一帶一路」等維度徵集企業履行社會責任的實踐案例。</span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span>其中，「年度案例獎」重點關注 2023 年度企業、機構策劃並開展實施的具有深刻影響力的社會責任行動案例。與<span>開放麒麟（openKylin）1.0 一同入圍的<span><span>獲獎案例</span></span>還有：天貓黃扶手計劃「觀·愛」行動、安踏茁壯成長公益計劃、<span><span>亞馬遜雲科技「AI 在未來」公益計劃</span></span>等。</span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>今年 7 月 5 日，開放麒麟（openKylin）1.0 正式發佈，標誌着我國擁有了操作系統組件自主選型、操作系統獨立構建的能力，填補了我國在這一領域的空白。作為國內開源操作系統根社區，開放麒麟（openKylin）社區自成立起便積極推動開源生態建設。截至目前，openKylin 已累計發佈 6 個社區版本，下載量達 100 萬+；匯聚 400+社區會員、5500+開發者加入社區，並累計成立 94 個 SIG 組開展技術研究與創新。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>未來，開放麒麟（openKylin）社區也將保持初心，為構建良好開源生態發展持續努力，並攜手各界夥伴共築開源生態，用持續的技術創新和更加活躍的社區運營推動我國開源產業快速發展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272719</guid>
            <link>https://www.oschina.net/news/272719</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LobeChat —— 聊天機器人框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LobeChat 是一個開源、高性能的聊天機器人框架，支持語音合成、多模態和可擴展的功能調用插件系統。支持一鍵式免費部署私人 ChatGPT/LLM 網絡應用程序。</p><p><img height="190" src="https://static.oschina.net/uploads/space/2023/1218/154744_PdXB_4252687.png" width="500" referrerpolicy="no-referrer"></p><p>特性一覽：</p><h4 style="text-align:start">GPT 視覺認知</h4><p><img height="192" src="https://static.oschina.net/uploads/space/2023/1218/154508_TIgb_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#1f2328; text-align:start">LobeChat 已經支持 OpenAI 最新的<span>&nbsp;</span><a href="https://platform.openai.com/docs/guides/vision"><code>gpt-4-vision</code></a><span>&nbsp;</span>支持視覺識別的模型，這是一個具備視覺識別能力的多模態智能。 用戶可以輕鬆上傳圖片或者拖拽圖片到對話框中，助手將能夠識別圖片內容，並在此基礎上進行智能對話，構建更智能、更多元化的聊天場景。</p><p style="color:#1f2328; text-align:start">這一特性打開了新的互動方式，使得交流不再侷限於文字，而是可以涵蓋豐富的視覺元素。無論是日常使用中的圖片分享，還是在特定行業內的圖像解讀，助手都能提供出色的對話體驗。</p><h4 style="text-align:start">TTS &amp; STT 語音會話</h4><p><img height="194" src="https://static.oschina.net/uploads/space/2023/1218/154539_jFKr_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#1f2328; text-align:start">LobeChat 支持文字轉語音（Text-to-Speech，TTS）和語音轉文字（Speech-to-Text，STT）技術，能夠將文本信息轉化為清晰的語音輸出，用戶可以像與真人交談一樣與我們的對話代理進行交流。 用戶可以從多種聲音中選擇，給助手搭配合適的音源。 同時，對於那些傾向於聽覺學習或者想要在忙碌中獲取信息的用戶來説，TTS 提供了一個極佳的解決方案。</p><p style="color:#1f2328; text-align:start">在 LobeChat 中，項目團隊精心挑選了一系列高品質的聲音選項 (OpenAI Audio, Microsoft Edge Speech)，以滿足不同地域和文化背景用戶的需求。用戶可以根據個人喜好或者特定場景來選擇合適的語音，從而獲得個性化的交流體驗。</p><h4 style="text-align:start">Function Calling 插件系統</h4><p style="color:#1f2328; text-align:start">LobeChat 的插件生態系統是其核心功能的重要擴展，它極大地增強了 ChatGPT 的實用性和靈活性。通過利用插件，ChatGPT 能夠實現實時信息的獲取和處理，例如自動獲取最新新聞頭條，為用戶提供即時且相關的資訊。 此外，這些插件不僅侷限於新聞聚合，還可以擴展到其他實用的功能，如快速檢索文檔、獲取電商平台數據、以及其他各式各樣的第三方服務。</p></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lobechat</guid>
            <link>https://www.oschina.net/p/lobechat</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 跨平台的截圖/錄屏/錄音/錄像軟件 pear-rec]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img src="https://027xiguapi.github.io/pear-rec/logo.png" height="120" referrerpolicy="no-referrer"></p><h1><a id="user-content-pear-rec" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#pear-rec"></a>pear-rec</h1><p><img src="https://img.shields.io/github/stars/027xiguapi/pear-rec" alt="stars" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/react-v18-blue" alt="react" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/electron-v26-blue" alt="react" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/express-v4-blue" alt="react" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/-TypeScript-blue?logo=typescript&amp;logoColor=white" alt="typescript" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/-Vite-646cff?logo=vite&amp;logoColor=white" alt="vite" referrerpolicy="no-referrer"></p><hr><h2><a id="user-content-readme" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#readme"></a>README</h2><p><a href="https://gitee.com/xiguapi027/pear-rec/blob/main/README.zh-CN.md">中文</a> | <a href="https://gitee.com/xiguapi027/pear-rec/blob/main/README.md">English</a> | <a href="https://gitee.com/xiguapi027/pear-rec/blob/main/README.de-DE.md">Deutsch</a></p><h2><a id="user-content-架構" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E6%9E%B6%E6%9E%84"></a>架構</h2><img src="https://027xiguapi.github.io/pear-rec/imgs/1700442414996.jpg" referrerpolicy="no-referrer"><h2><a id="user-content-簡介" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E7%AE%80%E4%BB%8B"></a>簡介</h2><blockquote><p>pear-rec(梨子 rec) 是一個跨平台的截圖、錄屏、錄音、錄像、錄製 (動圖)gif、查看圖片、查看視頻、查看音頻和修改圖片的軟件。</p><p>pear-rec(pear rec) 是基於 react + electron + vite + viewerjs + plyr + aplayer + react-screenshots + tui-image-editor + gif.js 的一個項目。</p><p>更多功能和 api 可以查看<a href="https://gitee.com/link?target=https%3A%2F%2F027xiguapi.github.io%2Fpear-rec">官網 (https://027xiguapi.github.io/pear-rec)</a> 或 <a href="https://xiguapi027.gitee.io/pear-rec" rel="nofollow">https://xiguapi027.gitee.io/pear-rec</a></p></blockquote><h2><a id="user-content-例子" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E4%BE%8B%E5%AD%90"></a>例子</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fpear-rec-xiguapi.vercel.app%2F">網頁</a></p><h2><a id="user-content-下載地址" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80"></a>下載地址</h2><blockquote><p>gitee: <a href="https://gitee.com/xiguapi027/pear-rec">https://gitee.com/xiguapi027/pear-rec</a></p><p>github: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2F027xiguapi%2Fpear-rec">https://github.com/027xiguapi/pear-rec</a></p></blockquote><h2><a id="user-content-源碼運行編譯" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E6%BA%90%E7%A0%81%E8%BF%90%E8%A1%8C%E7%BC%96%E8%AF%91"></a>源碼運行&amp;編譯</h2><p>編譯需要<code>nodejs</code>和<code>pnpm</code>環境</p><h3><a id="user-content-測試環境" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83"></a>測試環境</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">nodejs: 18</span><span id="LC2" class="line">pnpm: 8</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-開始" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E5%BC%80%E5%A7%8B"></a>開始</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 拷貝代碼</span></span><span id="LC2" class="line">git clone https://gitee.com/xiguapi027/pear-rec.git</span><span id="LC3" class="line"><span class="c"># 進入項目</span></span><span id="LC4" class="line"><span class="nb">cd </span>pear-rec</span><span id="LC5" class="line"><span class="c"># 安裝依賴</span></span><span id="LC6" class="line">pnpm <span class="nb">install</span></span><span id="LC7" class="line"><span class="c"># 調試頁面</span></span><span id="LC8" class="line">pnpm run dev:web</span><span id="LC9" class="line"><span class="c"># 調試服務</span></span><span id="LC10" class="line">pnpm run dev:server</span><span id="LC11" class="line"><span class="c"># 調試軟件</span></span><span id="LC12" class="line">pnpm run dev:desktop</span><span id="LC13" class="line"><span class="c"># 運行頁面</span></span><span id="LC14" class="line">pnpm run start:web</span><span id="LC15" class="line"><span class="c"># 運行軟件</span></span><span id="LC16" class="line">pnpm run start:desktop</span><span id="LC17" class="line"><span class="c"># 編譯軟件</span></span><span id="LC18" class="line">pnpm run build:desktop</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-功能" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E5%8A%9F%E8%83%BD"></a>功能</h2><p>已經勾選的功能是開發過程最新功能，但可能還沒發佈在最新版本</p><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 截屏 (react-screenshots)
<ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 框選裁切</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 框選大小位置可調整</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 取色器</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 放大鏡</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 畫筆（自由畫筆）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 幾何形狀（邊框填充支持調節）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 高級畫板設置</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 圖像濾鏡（支持局部馬賽克模糊和色彩調節）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 自定義框選鬆開後的操作</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 以圖搜圖</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 掃描二維碼</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 快速截取全屏到剪貼板或自定義的目錄</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 截屏歷史記錄</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 窗口和控件選擇（使用 OpenCV 邊緣識別）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 長截屏</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 多屏幕</li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 錄屏 (WebRTC)
<ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 錄製全屏</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 截圖</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 自定義大小</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 靜音</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 按鍵提示</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 光標位置提示</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 錄製欄</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 流寫入</li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 錄音 (WebRTC)
<ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 錄音設置</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 查看錄音</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 下載錄音</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 編輯錄音</li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 錄像
<ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 自定義比特率</li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 圖片預覽 (viewerjs)
<ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 放大</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 縮小</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 拖拽</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 翻轉</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 釘上層</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 查看</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 下載</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 打印</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> ocr</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 查看列表</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 以圖搜圖</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 掃描二維碼</li></ul></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 圖片編輯 (tui-image-editor)</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 視頻預覽 (plyr)</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 音頻預覽 (aplayer)</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 動圖 (gif) 編輯 (gif.js)</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 基本設置
<ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 用戶 uuid</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 保存地址</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 開機自啓動</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 國際化 (中、英、德)</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 服務設置</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 快捷鍵設置</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 重置設置</li></ul></li></ul><h2><a id="user-content-國際化 i18n" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E5%9B%BD%E9%99%85%E5%8C%96i18n"></a>國際化 (I18n)</h2><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 簡體中文</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 英語</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 德語</li></ul><h2><a id="user-content-download" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#download"></a>Download</h2><table><thead><tr><th>系統</th><th>Windows</th><th>Linux</th><th>Macos</th></tr></thead><tbody><tr><td>鏈接</td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2F027xiguapi%2Fpear-rec%2Freleases">下載</a></td><td>◯</td><td>◯</td></tr></tbody></table><p>國內可以用 <a href="https://gitee.com/link?target=https%3A%2F%2Fghproxy.com%2F">GitHub Proxy</a> 加速下載</p><h2><a id="user-content-反饋和交流" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E5%8F%8D%E9%A6%88%E5%92%8C%E4%BA%A4%E6%B5%81"></a>反饋和交流</h2><p>我們推薦使用 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2F027xiguapi%2Fpear-rec%2Fissues">issue</a> 列表進行最直接有效的反饋，也可以下面的方式</p><ul><li>qq 羣</li></ul><p align="center"><img src="https://027xiguapi.github.io/pear-rec/imgs/pear-rec_qq_qrcode.png" referrerpolicy="no-referrer"></p><h2><a id="user-content-開源協議" class="anchor" href="https://gitee.com/xiguapi027/pear-rec#%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>開源協議</h2><p><a href="https://gitee.com/xiguapi027/pear-rec/blob/main/LICENSE">pear-rec(梨子 rec) 可在 Apache License V2 下使用。</a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FMDN%2FCommunity%2FOpen_source_etiquette">開源項目禮節</a></p>]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 01:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/xiguapi027/pear-rec</guid>
            <link>https://gitee.com/xiguapi027/pear-rec</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 揭開事件循環的神祕面紗]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-f9d098f5cee0090732c3958edc97164b6c7.png" alt="" referrerpolicy="no-referrer"></p><p>作者 |&nbsp;小萱</p><blockquote><p>導讀&nbsp;</p><p>這篇文章會全方位講解事件循環機制，從這篇文章你可以學到，「事件循環」和「瀏覽器渲染」的關係，瀏覽器 setTimeout、requestAnimationFrame（RAF）、requestIdleCallback（RIC）等 API 在事件循環的「執行時機」，導致瀏覽器卡頓的原因、交互指標是如何測量的以及如何提升網站的交互性能。</p></blockquote><blockquote><p><em>全文 10503 字，預計閲讀時間 27 分鐘。</em></p></blockquote><h1><strong>01 前言</strong></h1><p>我們常常會提到頁面性能，為什麼要優化長任務，又為什麼 React 要做時間切片呢。這篇文章把瀏覽器的渲染、事件循環與頁面性能串聯起來。</p><p>從這篇文章你可以學到，「事件循環」和「瀏覽器渲染」的關係，瀏覽器 setTimeout、</p><p>requestAnimationFrame（RAF）、requestIdleCallback（RIC）等 API 在事件循環的「執行時機」，導致瀏覽器卡頓的原因、交互指標是如何測量的以及如何提升網站的交互性能。</p><p>學完這些，你可以對為什麼動畫要用 RAF、又何時去用 RIC、該不該選擇 setTimeout、如何規避長任務之類的問題應對自如。</p><h1><strong>02 事件循環概述</strong></h1><h2><strong>2.1 為什麼要了解事件循環？</strong></h2><p>深入瞭解事件循環是性能優化的基礎。在討論事件循環之前，我們需要先了解瀏覽器的多進程和多線程架構。</p><h2><strong>2.2 瀏覽器的架構</strong></h2><p>回顧瀏覽器的架構，現代瀏覽器都是多進程和多線程的。</p><h3><strong>2.2.1 多進程</strong></h3><p>Chrome 瀏覽器使用多進程架構，意味着每個標籤頁（在某些瀏覽器中也包括每個擴展程序）通常在其自己的進程中運行。這樣做的好處是，一個標籤頁崩潰不會影響到其他標籤頁。</p><p>站點隔離特性，瀏覽器每個 tab，都是獨立的渲染進程，這點的好處是假設你打開三個標籤頁，一個標籤卡死不影響其他兩個。但如果三個標籤共用一個進程，一個卡死會導致全部都卡，這樣體驗很差。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ea0fa24c2b466fa5d6ee4b2d3f43537fb03.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△瀏覽器的多進程示意圖</strong></strong></p><h3><strong>2.2.2 多線程</strong></h3><p>每個瀏覽器進程都可以包含多個線程。例如，主線程用於執行 JavaScript 代碼和處理頁面佈局，而其他線程可能用於網絡請求、渲染等任務。</p><p><strong>主線程</strong></p><p>Web 應用程序需要在此單個主線程上執行某些關鍵操作。當您導航到 Web 應用程序時，瀏覽器將創建並向您的應用程序授予該線程，以便您的代碼在其上執行。</p><p>主線程指的是渲染進程下的主線程，負責解析 HTML、計算 CSS 樣式、執行 JavaScript、計算佈局、繪製圖層等任務。</p><p><img src="https://oscimg.oschina.net/oscnet/up-835102f787ff8cc334c66e30face4316758.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△主進程即渲染進程包含的線程圖</strong></strong></p><p>某些任務<strong>必須</strong> 在主線程上運行。例如，任何直接需要訪問 DOM（即 DOM ﻿document﻿）的操作都必須在主線程上運行（因為 DOM 不是線程安全的）。這將包括大多數 UI 相關代碼。</p><p>主線程上一次只能運行 <strong>一個任務</strong>。</p><p>此外，一個任務<strong>必須在主線程上運行完成</strong>，然後才能運行另一個任務。瀏覽器沒有「部分」執行任務的機制，每個任務都完整地運行直至完成。</p><p>在下面的示例中，在瀏覽器展示界面的時候，按順序運行下面的任務，並且每個任務都在主線程上完成：</p><p><img src="https://oscimg.oschina.net/oscnet/up-b89c629a6370f9eaf9aeae593adc5bc8d21.png" alt="圖片" referrerpolicy="no-referrer"></p><h1><strong>03 事件循環的具體流程</strong></h1><p>我們這裏主要討論的是&nbsp;window event loop。也就是瀏覽器一個渲染進程內主線程所控制的&nbsp;Event Loop。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7597949bda55e109f8b7f0eef42bde61edd.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△發生一次事件循環的具體流程</strong></strong></p><p>發生一次事件循環，也就是瀏覽器一幀中可以用於執行﻿JS﻿的流程如下：</p><p>從 task queue 取出一個 task(宏任務) 執行並刪除 &nbsp;-&gt; 執行並清空隊列中全部 job(微任務) -&gt; requestAnimationFrame -- 瀏覽器更新渲染 -- requestIdleCallback</p><p><strong>3.1 更新渲染的步驟</strong></p><p>前兩個步驟，耳熟能詳，這裏不再討論，重點討論「更新渲染」之後的步驟。</p><p>1. Rendering opportunities: 標誌是否一次事件循環後會發生渲染。在每次事件循環的結束，不一定會發生渲染。導致不渲染的可能：無法維持當前刷新率、瀏覽器上下文不可見、瀏覽器判斷更新不會造成視覺改變並且 raf 的回調為空。</p><p>如果這些條件都不滿足，當前文檔不為空，設置 hasARenderingOpportunity 為 true。</p><p>2.如果窗口變化，執行 resize。</p><p>3.如果滾動，執行 scroll。</p><p>4.媒體查詢。</p><p>5.canvas 。</p><p>6.執行 RAF 回掉，傳遞迴掉參數 DOMHighResTimeStamp，開始執行回調的時間。</p><p>7.重新執行 Layout 等計算，渲染繪製界面。</p><p>8.如果滿足，任務隊列和微任務隊列都為空，並且渲染時機 hasARenderingOpportunity 為 false，執行算法是否執行 requestIdleCallback 的回調函數。</p><p><strong>3.2</strong><strong>執行順序與渲染</strong></p><p>來一道簡單的題目，將創建宏任務、微任務、RIC、RAF 的代碼同時定義，輸出執行順序。</p><pre><code>console.log('開始執行');
console.log('start');
setTimeout(() =&gt; {
  console.log('setTimeout');
}, 0);

requestAnimationFrame(() =&gt; {
  console.log('requestAnimationFrame');
});
new Promise((resolve, reject) =&gt; {
  console.log('Promise');
  resolve('promise resolved');
})

requestIdleCallback(() =&gt; {
  console.log('requestIdleCallback');
});

(async function asyncFunction() {
  console.log(await 'asyncFunction');
})();

console.log('執行結束');
// 開始執行
// Promise
// 執行結束
// promise resolved
// asyncFunction
// setTimeout
// requestAnimationFrame
// requestIdleCallback
</code></pre><p>你可能會疑問為什麼 RAF 會在 setTimeout(fn, 0) 之前執行，setTimeout(fn, 0) 的執行時機是延遲 0-4ms，RAF 可以粗暴理解為 settimeout(fn, Math.random() * 16.6)，因此 setTimeout 會優先。但如果在 setTimeout 執行之前主線程被其他的任務跑滿了，超過了一幀的耗時，setTimeout 會在 RAF 的回調之後執行（用例見下面的代碼段），因此 setTimeout 的延遲時間並不穩定，RAF 的執行時機穩定，在一幀內註冊的，都會在這一幀的結束，下一幀的開始之前執行。</p><pre><code>  let task = new Array(10000).fill(null).map((_, i) =&gt; () =&gt; {
    const span = document.createElement("span");
    span.innerText = i;
    console.log("==&gt;task", i);
  });
  task.forEach((i) =&gt; i());
  requestAnimationFrame(() =&gt; {
    console.log("===&gt;requestAnimationFrame");
  });
  setTimeout(() =&gt; {
    console.log("===&gt;setTimeout");
  }, 0);
  //輸出：
  // ===&gt;requestAnimationFrame
  // ===&gt;setTimeout
</code></pre><p>注意，Promise.then 的回調可以保證第一輪的準確性，如果繼續.then 發生的行為和瀏覽器版本有關，開發時不要過分依賴多.then 的回調順序，這是不可靠的。</p><p>上面提到渲染是在一次事件循環的「最後」發生，那麼對於多次「修改 dom」的操作，是會被合併取最後一次的結果作為佈局渲染。</p><pre><code>    const btn = document.querySelector(".btn");
    btn.addEventListener("click", () =&gt; {
      box.style.transform = "translateX(400px)";
      box.style.transition = "transform 1s ease-in-out";
      box.style.transform = "translateX(200px)";
    });
</code></pre><p>外層父容器 400px，這段代碼，表現是盒子從 0 到 200px，盒子設置 400px 的動作，被合併掉了。那如何實現盒子從 400px 呢，可以採取延遲到下一幀渲染。</p><p><img src="https://oscimg.oschina.net/oscnet/up-12acd27c0e4668c804c101feaff4900b941.gif" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△演示效果</strong></strong></p><pre><code>    btn.addEventListener("click", () =&gt; {
      box.style.transform = "translateX(400px)";
      requestAnimationFrame(() =&gt; {
        requestAnimationFrame(() =&gt; {
          box.style.transition = "transform 1s ease-in-out";
          box.style.transform = "translateX(200px)";
        });
      });
    });
</code></pre><p>「嵌套的 RAF」可以保證回調在下一幀執行。當然，此處用 setTimeout 也可以達到同樣的延遲效果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-aba5e3515d83ac5a4002123ffa2fe772441.gif" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△延遲後的演示效果</strong></strong></p><h1><strong>04 任務隊列與執行時機</strong></h1><p><strong>執行 JavaScript task 是在渲染之前，如果在一幀之內 JavaScript 執行時間過長就會阻塞渲染，同樣會導致丟幀、卡頓</strong>，這裏的 js 執行時間過長，就是長任務，下面會仔細介紹。</p><p>對長任務的定義：如果任務耗時<strong>超過 50ms</strong>，則認為該任務是長任務。</p><p>當我們談到長任務造成頁面卡頓時，通常指的是主線程（Main Thread）上的任務。主線程指的是渲染進程下的主線程，負責解析 HTML、計算 CSS 樣式、執行 JavaScript、計算佈局、繪製圖層等任務。當主線程上的一個任務（例如一個 JavaScript 函數）運行時間過長時，它會阻塞主線程上的其他任務，包括但不限於 UI 更新和用戶交互事件的處理，從而導致頁面卡頓或不響應。</p><p><strong>JS 的執行和渲染的關係：</strong></p><p>JS 執行與 Paint 任務都發生在主線程，具體的繪製操作是交由合成線程完成，與主線程並不互斥，但是 JS 的執行時間過長，會導致 Paint 整理好的數據沒有及時提交給合成線程，因此頁面有幀沒有執行繪製，也就是掉幀。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a9ff20ab17a1d01227807dc759a9caafc2e.png" alt="圖片" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-45b704b84e7ef58a85990b189f3cefe42ce.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△JS 的執行和渲染的關係圖</strong></strong></p><h2><strong>4.1 為什麼不使用 setTimeout 做動畫</strong></h2><p><strong>raf 和 setTimeout 對比:</strong></p><p><em>（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjsfiddle.net%2Fhixuanxuan%2Fmrw6upgs%2F3%2F__%EF%BC%89" target="_blank">https://jsfiddle.net/hixuanxuan/mrw6upgs/3/__）</a></em></p><p><strong>1.不同步與顯示刷新率：</strong></p><p>瀏覽器通常以每秒 60 幀的速度刷新，大約每 16.67 毫秒刷新一次。如果你使用 setTimeout 來創建動畫，並嘗試每 16.67 毫秒運行一幀，你的代碼不會完全與瀏覽器的刷新速率同步，導致丟幀</p><p><strong>2.延遲執行：</strong></p><p>setTimeout 的延遲時間參數只是一個最小延遲時間，而不是保證執行的精確時間。如果主線程忙於其他任務，setTimeout 的回調可能會被延遲，導致丟幀</p><p><strong>3.計時器合併：</strong></p><p>瀏覽器渲染有渲染時機（Rendering opportunity），也就是瀏覽器會根據當前的瀏覽上下文判斷是否進行渲染，因為考慮到硬件的刷新頻率限制、頁面性能以及頁面是否存在後台等等因素，宏任務之間不一定會伴隨着瀏覽器繪製。如果兩個 Task 距離的很近，他們可能會被合併在一次渲染任務，得到的結果是意料之外的，如果 Task 距離較大，那他跟不上瀏覽器的刷新頻率，會導致丟幀。</p><p>RAF 的執行時機是在下一次渲染前調用，也就是説使用這個 API 允許你在下一次渲染開始之前更改 DOM，然後在本次渲染中立即體現，因此他是製作動畫的絕佳選擇。</p><p><strong>4.2 requestIdleCallback 的執行時機</strong></p><p>主要在瀏覽器的主線程空閒時執行，為了保證響應性，會計算一個截止時間，computeDeadline，它將決定何時執行&nbsp;requestIdleCallback&nbsp;中註冊的回調。下面是計算截止時間算法的簡要概述：</p><p><strong>1.設置初始截止時間：</strong></p><p>初始化時，將事件循環的最後閒置週期開始時間設置為當前時間。</p><p>設置一個基本的截止時間，該時間是事件循環的最後閒置週期開始時間加上 50 毫秒（為了保證對新用戶輸入的響應性）。為什麼要加這個 50ms，是因為瀏覽器為了提前應對一些可能會突發的用戶交互操作，比如用戶輸入文字。如果給的時間太長了，你的任務把主線程卡住了，那麼用戶的交互就得不到迴應了。50ms 可以確保用戶在無感知的延遲下得到迴應。</p><p><strong>2.檢查是否有待處理的渲染：</strong></p><p>初始化一個變量 hasPendingRenders 為 false。</p><p>遍歷相同事件循環的所有窗口，檢查每個窗口是否有未執行的 RAF 回調或可能的渲染更新。如果有，將 hasPendingRenders 設置為 true。</p><p><strong>3.基於 timeout 調整截止時間：</strong></p><p>如果 RIC 傳入第二個參數 timeout，更新截止時間為 timeout。這會強制瀏覽器不管多忙，都在超過這個時間之後去執行 rIC 的回調函數。</p><p><strong>4.考慮渲染的時間：</strong></p><p>如果 hasPendingRenders 為 true，計算下一個渲染的截止時間，基於事件循環的最後渲染機會時間和當前的刷新率。</p><p>如果下一個渲染的截止時間早於當前設置的截止時間，那麼更新截止時間為下一個渲染的截止時間。</p><p><strong>5.返回最終的截止時間：</strong></p><p>返回計算出的截止時間，這個時間將用於確定何時執行 requestIdleCallback 中註冊的回調。</p><p><strong>6.開始空閒期：</strong></p><p>對於相同事件循環的每個窗口，執行「開始空閒期」算法，使用 computeDeadline 作為參數，確定何時執行 requestIdleCallback 中註冊的回調。</p><p>也就是説，這個&nbsp;timeRemaining()&nbsp;的計算非常動態，會根據上面這些因素去決定。</p><h2><strong>4.3 React 如何實現 Time slice，沒有使用 RIC、setTimeout 的原因是什麼</strong></h2><p>沒使用 RIC 的原因是他在部分瀏覽器表現不佳，比如 safari。</p><p>需要滿足的條件：</p><p>1.暫停 JS 執行，將主線程去執行 style、layout、paint 等任務，讓瀏覽器有機會更新頁面。</p><p>2.在未來某個時刻可以繼續調度任務，執行上次還沒有完成的任務。</p><p>對於 react 的 Time Slice，他的目的是中斷當前 js 的執行，讓他去執行渲染相關任務，因此需要的 API 是在瀏覽器的 Paint 之後執行，瀏覽器並未提供除了 RIC 這樣的 API。RAF 的執行時機是在一幀的結束，此時創建宏任務開啓下一輪 Task，渲染的任務放在 RAF 裏在這一幀執行。如果使用 setTimeout(fn, 0) 創建宏任務，如果 timeout 嵌套的層級超過了 5 層，最低會有 4ms 的延遲，具體定義的代碼可以參考<strong>chrome 對計時器的定義</strong><em>（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fchromium.googlesource.com%2Fchromium%2Fblink%2F%2B%2Fmaster%2FSource%2Fcore%2Fframe%2FDOMTimer.cpp%EF%BC%89" target="_blank">https://chromium.googlesource.com/chromium/blink/+/master/Source/core/frame/DOMTimer.cpp）</a></em>，因此首選的是 message channel，優先級高於 setTimeout 可以在上一幀渲染結束後立即執行，這樣就實現了<strong>可以中斷的 JS 執行的效果</strong>。</p><h2><strong>4.4 模擬實現 requestIdecallback</strong></h2><p>要模擬實現 requestIdecallback 的效果，定義的任務隊列在瀏覽器完成渲染任務之後執行，擴展來説也可以用來測量瀏覽器渲染任務的執行時間。</p><p><strong>Background Tasks API - Web API 接口參考 | MDN</strong>（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FBackground_Tasks_API%EF%BC%89" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/API/Background_Tasks_API）</a></p><pre><code>  // 當到時間了，立即執行的函數
  const performWorkUntilDeadline = () =&gt; {
    if (scheduledHostCallback !== null) {
      const currentTime = getCurrentTime();
      // 分配任務的剩餘時間，這個可執行時間是根據 fps 動態算的
      deadline = currentTime + yieldInterval;
      const hasTimeRemaining = true;
      // 調用已計劃的回調，並傳遞剩餘時間和當前時間。
      const hasMoreWork = scheduledHostCallback(
          hasTimeRemaining,
          currentTime,
        );
        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
    } else {
      isMessageLoopRunning = false;
    }
    // 給瀏覽器一個繪製的機會，並重置需要繪製的標誌。
    needsPaint = false;
  };
  
 
  const channel = new MessageChannel();
  const port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function(callback) {
    scheduledHostCallback = callback;
    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };
</code></pre><h1><strong>05 交互性能指標與優化方法</strong></h1><p>長任務對頁面的影響，帶來「卡頓」、「掉幀」等不好的體驗，常用衡量交互性能的指標有 TTI 和 FID，這些均可使用 web-vital 庫進行測量。下面展開對指標的詳細介紹。</p><h2><strong>5.1 交互性能的衡量指標</strong></h2><p>衡量交互性能的指標主要關注以下幾個方面：</p><h3><strong>5.1.1&nbsp;TTI （理想可交互時間）</strong></h3><p><strong>1.定義可交互：</strong></p><p>首先，需要明確什麼是「可交互」。一個頁面被認為是可交互的，意味着頁面的主要內容已經加載完畢，用戶可以進行點擊、輸入等交互操作，而且頁面能夠快速響應。</p><p><strong>2.監測首次內容繪製 (FCP) 和 DOMContentLoaded：</strong></p><p>測量 TTI 的過程通常開始於監測首次內容繪製 (FCP) 和 DOMContentLoaded 事件。這兩個事件分別表示瀏覽器開始繪製頁面內容和 DOM 結構加載完畢的時刻。</p><p><strong>3.長任務監測：</strong></p><p>長任務是指那些執行時間超過 50 毫秒的任務。長任務通常會阻塞主線程，延遲頁面的交互可用性。通過監測長任務，可以瞭解主線程何時變得空閒。</p><p><strong>4.尋找交互窗口：</strong></p><p>為了確定 TTI，需要找到一個至少 5 秒鐘主線程空閒的窗口，且該窗口應在首次內容繪製 (FCP) 之後。在這個 5 秒空閒窗口期間，沒有長任務執行，意味着用戶可以與頁面交互。一旦找到這個空閒窗口，記錄 TTI。如果未找到長任務，則 TTI 與 FCP 相同。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f839eeb20c4ce164ffb346f0ee1b8f69072.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△TTI 測量示意圖（源於 web.dev）</strong></strong></p><h3><strong>5.1.2&nbsp;FID（首次輸入延遲）</strong></h3><p>FID，即 First Input Delay，用於量化用戶在頁面加載時首次交互的響應延遲。一個低的 FID 表示頁面是快速響應用戶交互的，而一個高的 FID 表示頁面在響應用戶交互時有延遲。</p><p><strong>1.事件監聽:</strong></p><p>為了計算 FID，瀏覽器需要監聽用戶的交互事件，如點擊、鍵盤輸入或者觸摸事件。當用戶與頁面交互時，會觸發這些事件。</p><p><strong>2.事件處理時間:</strong></p><p>當事件被觸發時，瀏覽器會計算從事件觸發到瀏覽器開始處理事件的時間。這個時間就是 FID。它包括了瀏覽器將事件放入事件隊列、事件隊列的等待時間、以及瀏覽器開始處理事件的時間。</p><p><strong>3.事件處理:</strong></p><p>一旦事件開始被處理，瀏覽器會記錄下處理開始的時間。如果頁面在處理事件時非常忙碌，或者有其他高優先級的任務，那麼事件處理可能會被延遲，這會增加 FID。</p><h3><strong>5.1.3 INP（交互到下一次繪製）</strong></h3><p>INP，即 Interaction to Next Paint，主要關注的是用戶交互（如點擊、滾動或按鍵操作）到頁面響應的時間長度，具體到頁面上的某個元素的可視更新。</p><p>比起來 FID 關注的是頁面加載完成後用戶<strong>首次交互</strong>，INP 關注的是<strong>所有交互的最長渲染延遲</strong>，因此 INP 不僅僅代表第一印象，可以全面評估響應情況， 使 INP 比 FID 在衡量用戶交互體驗上更為可靠。</p><p>INP 將會在 2024 年 3 月取代 FID 成為標準性能指標。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3bf10348f63ae93f27266efad4b84531629.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△交互到繪製的時間</strong></strong></p><h2><strong>5.2 如何優化交互性能指標</strong></h2><p><strong>1、拆分任務，這是避免長任務的有效手段。</strong></p><ul><li><p>利用 performance 進行分析，找出 long task</p></li><li><p>針對 long task，進行每個步驟的任務拆分，執行優先級高的，剩下的部分利用延遲代碼執行的方法進行中斷。</p></li></ul><p>比如，有個 Input 框，當輸入的內容發生變更，需要進行大量計算/創建 dom 等耗時操作，造成輸入卡頓。因此我們需要在用戶「嘗試發生互動」的時候，「退讓主線程」。</p><pre><code>// 通過 Promise 實現中斷後繼續執行，setTimeout 調用來延遲任務
function yieldToMain () {
  return new Promise(resolve =&gt; {
    setTimeout(resolve, 0);
  });
}
    async function saveSettings(tasks) {
      let deadline = performance.now() + 50;

      while (tasks.length &gt; 0) {
        // 判斷當前是否有用戶交互，isInputPending Chrome87+支持。
        // 可以採用判斷 Expire Time 達到類似效果
        if (
          navigator.scheduling?.isInputPending() ||
          performance.now() &gt;= deadline
        ) {
         // 如果有，退讓主線程，等主線程任務完成再回來繼續執行。
          await yieldToMain();
          deadline = performance.now() + 50;
          continue;
        }
        const task = tasks.shift();
        task();
      }
    }

    const performLongTask = () =&gt; {
       // 創建耗時的任務
      let task = new Array(10000).fill(null).map((_, i) =&gt; () =&gt; {
        const span = document.createElement("span");
        span.innerText = i;
      });
      saveSettings(task); // 任務切片
    };
    input.addEventListener("input", (e) =&gt; {
      input.value = e.target.value;
      performLongTask();
    });
</code></pre><p>2、非關鍵模塊，延遲執行。對於點擊率不高、非核心模塊等，採取 dynamic import 的方式，用到了再加載，或是延遲到一定時間後再加載，減少首次主線程所需要執行的任務。</p><p>3、對於視口內不可見的內容，延遲加載。</p><ul><li><p>圖片的延遲加載。</p></li><li><p>為 img 標籤 loading 設為 lazy，延遲加載資源，直到資源達到與視口的計算距離，Chrome77+支持。</p></li><li><p>利用 IntersectionObserver 監測圖片是否在可視區域，再進行渲染。推薦使用<strong>lazy-load-image-component</strong><em>（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2Freact-lazy-load-image-component%EF%BC%89" target="_blank">https://www.npmjs.com/package/react-lazy-load-image-component）</a></em> 等庫。</p></li><li><p>減少大量 dom 的渲染。使用 content-visibility 延遲渲染屏幕外元素，Chrome85+支持。</p></li></ul><p>4、靈活的緩存策略。</p><ul><li>用 service-worker 跨站資源共享。</li></ul><p>除了資源可以採取強緩存+協商緩存配合的方式，用 service-worker 實現更為靈活的緩存策略。比如站點 a 和站點 b 僅滿足同源，技術棧渲染方式都完全不同，如何實現在訪問 a 的時候可以預取 b 的資源。站點 a 空閒的時候註冊 service-worker，訪問站點 b 即可從 cache 裏讀取緩存，提升加載速度。sw 不僅在緩存方面表現優秀，也可以幫我們實現離線應用，以及無法被瀏覽器強緩存的文件手動添加緩存（不同瀏覽器對可以強緩存的文件的體積限制不同）。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6d991b243783e8ba64b09daeb68baf2d6b8.png" alt="圖片" referrerpolicy="no-referrer"></p><p><strong><strong>△使用 sw 做跨站資源預取</strong></strong></p><h1><strong>06 總結</strong></h1><p>1.瀏覽器是多進程和多線程的，通常説主線程指的是渲染進程下的主線程。</p><p>2.主線程上一次只能運行一個任務，瀏覽器的繪製和主線程並不互斥，但長任務會導致延遲進入合成，甚至在這一幀不發生合成也就是掉幀。</p><p>3.在每次事件循環的結束，不一定會發生渲染。setTimeout 的執行時機並不穩定。</p><p>4.RAF 的執行時機穩定是在當前幀的最後，下一幀的開始之前，非常適合做動畫。</p><p>5.RIC 的執行時機並不穩定，computeDeadline 由被多因素影響計算得出，但可以傳遞 timeout 控制執行的 deadline。</p><p>6.用 TTI 和 FID（INP）去衡量頁面的交互性能。</p><p>7.用長任務拆分、延遲非關鍵模塊執行、延遲非可視區域圖片加載、減少頁面渲染以及配置靈活的緩存策略等手段，提升網站的交互性能。</p><p>——END——</p><p><strong>參考資料：</strong></p><p>[1]HTML living standand - evnet loop processing model:</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhtml.spec.whatwg.org%2Fmultipage%2Fwebappapis.html%23event-loop-processing-model" target="_blank">https://html.spec.whatwg.org/multipage/webappapis.html#event-loop-processing-model</a></p><p><strong>推薦閲讀：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574835%26idx%3D1%26sn%3D31d1b6ec0ecf857f5fb12ca8a2816fb1%26chksm%3Dc03f954ff7481c599d34556eeaba1960a4261d2e304e86989a54fa9e334c15a9ff8d58aa00b1%26scene%3D21%23wechat_redirect" target="_blank">百度搜索展現服務重構：進步與優化</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574780%26idx%3D1%26sn%3D8eda1e3f3dc06d6f10394be4a9df86f8%26chksm%3Dc03f9480f7481d968a54f75a113c16651a5c371ae43f078705f965d0a51a19491f41d2179ab7%26scene%3D21%23wechat_redirect" target="_blank">百度 APP iOS 端包體積 50M 優化實踐 (七) 編譯器優化</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574670%26idx%3D1%26sn%3D45e9f922faad4fffceca07bc116b15eb%26chksm%3Dc03f94f2f7481de45ad4b17e0235eb0074e4d78dff760654e44aed98d6684d7e0ba1ccbeffcd%26scene%3D21%23wechat_redirect" target="_blank">百度搜索內容 HTAP 表格存儲系統</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574408%26idx%3D1%26sn%3Dfc0f0b325a348a401d647f3cb048b68a%26chksm%3Dc03f93f4f7481ae2c964c6fd7ab54a8291edb7b2dae16c20c5e30e998a0bceb418d631d40abf%26scene%3D21%23wechat_redirect" target="_blank">大模型時代，「人人可 AI」的百度開發者平台長什麼樣？</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247574315%26idx%3D1%26sn%3De1fe788ba3ae4f0b2d503bfac899cefa%26chksm%3Dc03f9357f7481a413ba7325eb9064078f097e7586136b885d11db67b4a5955412312d2428869%26scene%3D21%23wechat_redirect" target="_blank">數十萬 QPS，百度熱點大事件搜索的穩定性保障實踐</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 01:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/10322486</guid>
            <link>https://my.oschina.net/u/4939618/blog/10322486</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源，想説愛你不容易~]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>前言</h3><p>其實很早以前，我就想寫一篇文章，聊聊我之前的開源歷程，我不是什麼大牛，只是 github 上千萬項目中一名普通 owner，但是我熱愛開源，熱愛分享，熱愛編程，正因為如此，我打算藉着 teamlinker 開源之際，從一名普通開源從業者的角度和大家聊聊我開源生涯中的種種過往，對自己對別人也算是一種借鑑和啓發吧。</p><p>我不是計算機科班出身，只是秉持着從小對編程的熱愛，通過自學走上了軟件開發的道路，這一路上有風雨有彩虹，受到過質疑，但也受到過更多的鼓勵和支持，也正因為如此，我格外能感受到所謂的自我學習和提升是一件多麼不容易的事情，所以當我接觸到開源的時候，自然而然的就有種説不出的親切感，看着那些工整的源碼，就彷彿像一個老師，循循善誘的給我們講解着它的結構和功能，只要你願意探索，就可以在其中發現無窮的樂趣。</p><h3>從開源走向創業</h3><p>還記得在 2016 年的時候，我當時在一家軟件公司擔任技術總監的職務，其中遇到的一個令人頭疼的問題就是前後端總是為接口文檔的同步問題爭執不下，我當時就想如何有一個產品可以管理並且自動的同步接口文檔，讓前後端都有一個唯一的參照物的話，這個問題就可以得到很大的緩解，在網上找了一遍後並沒有發現滿意的產品，於是我決定自力更生，利用業餘時間，完成了這個接口文檔管理軟件的開發，取名為：DOClever（老粉應該還記得這個產品一開始的名字叫 SBDoc ~）。</p><p>其實在一開始的時候，我並沒有想太多，當時只是試探性的放到 github 上，並且給我的一些朋友試用，卻出乎意料的大受好評。看見大家的積極的反饋以及 github 上 star 數目的與日俱增，我獲得了作為程序員生涯以來第一次無與倫比的滿足感。真正感受到原來開源是一件這麼美妙的事情。</p><p>隨着 DOClever 業務的加劇以及用戶的擴大，在 2017 年的時候，我決定將 DOClever 做大做強，找了一些朋友，我們決定出來創業，當時也正值創業風口，我們的這個項目也很快受到了不少關注。我們當時主要的宣傳窗口就是開源中國，在這裏我們認識了很多志同道合的朋友，也得到了編輯們對我們項目的各種肯定與支持，在此我還是要好好感謝下開源中國，感謝你們對中國開源事業所做的貢獻。</p><h3>商業化的探索與反思</h3><p>創業後很快我面臨的便是廣大開源軟件共同遇到的一個問題：盈利。當時我試過很多方案，比如開源版本與收費版本分開，打造收費插件，產品免費服務收費等，但最後都發現很難真正落地，而我當時的想法也很單純，覺得只要產品好，用戶愛用就一定會有辦法掙錢，所以我當時的精力全部扎進了產品研發中，開發了接口自動化測試模塊，還大膽做出了一個決定：利用 electron 打造了桌面端，在當時的競品中，敢做桌面端的我們算是第一個了，桌面端出來後用戶的反饋很好，但是我們還是陷入無法盈利的惡性循環。也就是説你的產品不錯，大家愛用，給你捐點小錢也 ok，但是一旦觸及商業化，那麼對不起在下告辭了~</p><p>後來我們也接過一些企業的定製化服務，週期長，任務重，有的甚至要駐點，但是為了團隊的發展我們又不得不做，我內心知道這個不是長久之計，也實在不想把我們做成一個外包公司，我更希望大家能認可我們統一化的產品，如果你有什麼需求，可以給我們一點時間，我們可以把它打造成模塊化的功能。但是往往甲方爸爸告訴我：不行，你需要專門為我定製一個 VVVVVVIP 至尊特供版。</p><p>其實我事後有認真反思過商業化的問題，覺得主要有兩點，接口管理平台本身市場就那麼大，競品也不少，而且軟件的門檻也低，我之所以能脫穎而出無非是我免費開源，功能也不差，但用戶不是非我不可，很多用戶都是因為 postman 的協作功能需要收費而轉向了我們，這些人的需求也很明確，就是要用免費的。第二點就是對於稍微大一點公司，他們內部都有自己的 api 接口管理，不會輕易的去使用外面的平台，就算去使用，也會對你原來的平台改的面目全非，有點公司良心點的還會請你去做個宣講啥的，感謝你下。有的就直接 copy 你的代碼把它變成他們內部開發的一個平台，這對於我們開源創業者可謂是竹籃打水一場空。</p><h3>創業失敗</h3><p>在 2018 年年中的時候，我向現實做出了屈服，我解散了我們團隊，我也去了一家大廠面試。我記得當時那個面試官問我做過哪些項目的時候，我把我的 github 給他看了下，他滿意的笑了笑，於是我很快就被錄取了。DOClever 自此也停止了更新，我把精力都投入了新的工作中，日子就這樣一天天波瀾不驚的過去，直到有一天羣裏的一個小夥伴給我發了一個鏈接，我點進去一看直接無語了，也是一個接口管理平台，但是裏面的功能，業務邏輯甚至頁面的佈局和按鈕的擺放都和 DOClever 一摸一樣，霎那間我明白我們被抄襲了。可是我又能做些什麼呢，DOClever 很久沒有更新了，我當時的公司也註銷了，軟件著作權也失效了，我能做的就是祝福他們做的比我更好吧！</p><p>時光荏苒，如今，我也從那個大廠離開了，慶幸的是我在此期間積累了一些資本，至少可以做幾年自己想做的事情，回顧過往，你問我開源後悔嘛，我不後悔，卻又五味雜陳，因為開源我可以讓更多人認識我，瞭解我，實現自我價值，也能找到滿意的工作，五味雜陳是因為開源只是一個商業化的手段，不是目的，開源不光是源碼的公開，更是一種價值的傳遞，內心的堅持，精神的坦誠，它對於創業者的要求更高，而我還遠遠不夠。</p><h3>感悟</h3><p>我個人認為，開源創業需要滿足兩個條件：<br> 1、你的產品所在市場潛力夠大，而你的產品的業務和功能又有一定的不可替代性。<br> 2、必須要有一套清晰的盈利模式，哪些東西可以通過開源來吸引流量，哪些東西是你的壓箱底的寶貝，真正能讓用戶掏錢買單，這些我們自己是必須清楚的。很多人會吐槽國內的開源氛圍太差，全是伸手黨，你辛辛苦苦寫的東西，別人給你一包裝就是他自己的了。其實很多時候我們自己又何嘗不是呢，我們的產品幾乎沒有哪個不用開源框架或者開源庫的，但是不代表我們不尊重開源，國外的很多商用軟件都會把用到的開源包列舉出來一一感謝，這就是一個很好的例子，國內最近關於開源協議的幾起民事訴訟的勝訴我相信也將成為一個很好的典範。</p><h3>新的征程</h3><p>回到我現在在做的事情 Teamlinker，這是一個基於人工智能的團隊協作平台，融入了項目管理，視頻會議，文件共享等功能，可以最大程度的讓團隊成員協同辦公。很多人勸我 teamlinker 不要開源，但是我覺得作為一個技術從業者，我的骨子裏有一種自由分享的精神，我也非常期望能和別人的交流來讓我的產品變得更好，我想再試一試，失敗並不可怕，可怕是在同樣的地方跌倒卻再也不敢站起來了~</p><p>開源，想説愛你不容易，但是我卻甘之如飴。</p><p>後記：歡迎大家給我們的 teamlinker 提出一點建議和批評，如果能有一點小小的鼓勵那就更好啦。<br> 官網：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteam-linker.com" target="_blank">https://team-linker.com</a><br> Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTeamlinker%2FTeamlinker" target="_blank">https://github.com/Teamlinker/Teamlinker</a><br> Gitee：<a href="https://gitee.com/sx1989827/teamlinker">https://gitee.com/sx1989827/teamlinker</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Dec 2023 10:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272643</guid>
            <link>https://www.oschina.net/news/272643</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
