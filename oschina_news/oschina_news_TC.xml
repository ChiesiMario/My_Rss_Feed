<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 28 Dec 2023 15:41:46 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[WxJava 4.6.0 版本發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#1f2328; text-align:start">本次正式版本更新，主要是增加了視頻號模塊，已接入大部分接口；企業微信模塊主要修復了一些問題，增加了部分實用的接口，針對官方最新文檔對一些接口做了調整；小程序模塊則主要增加了增加了 openApi 管理、發貨信息管理、短劇媒資管理、小程序虛擬支付、退貨組件等相關接口，優化部分代碼；公眾號模塊主要增加獲取穩定版接口調用憑據的接口；微信支付模塊則主要是補充完善部分接口，新增一些字段的支持；其他模塊則優化了部分接口，修復一些問題，新增了相關參數。具體更新日誌如下：</p><h2>企業微信</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F2993" target="_blank">#2993</a><span>&nbsp;</span>敏感詞更新接口參數根據最新官方文檔進行調整</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3002" target="_blank">#3002</a><span>&nbsp;</span>修復新增外部聯繫人回調去重錯誤問題</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3016" target="_blank">#3016</a><span>&nbsp;</span>增加獲取客戶數據統計接待人員明細數據的接口，並修復獲取企業彙總數據接口返回值問題</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3037" target="_blank">#3037</a><span>&nbsp;</span>修復第三方審批不同回調下實體缺少字段問題</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3047" target="_blank">#3047</a><span>&nbsp;</span>獲取員工打卡規則接口返回值增加添加排班信息</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3055" target="_blank">#3055</a><span>&nbsp;</span>獲取訪問用戶敏感信息接口返回值增加若干字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3059" target="_blank">#3059</a><span>&nbsp;</span>客戶詳情接口新增視頻號相關字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3064" target="_blank">#3064</a><span>&nbsp;</span>增加獲客助手相關的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3079" target="_blank">#3079</a><span>&nbsp;</span>增加提醒成員羣發和停止企業羣發的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3145" target="_blank">#3145</a><span>&nbsp;</span>創建企業羣發接口新增 chat_id_list 和 allow_select 兩個參數</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3149" target="_blank">#3149</a><span>&nbsp;</span>增加支持企業微信多賬號配置的 starter</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3156" target="_blank">#3156</a><span>&nbsp;</span>優化企業微信應用參數未配置時的初始化邏輯</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3174" target="_blank">#3174</a><span>&nbsp;</span>批量獲取審批單號接口請求中的篩選類型增加審批單類型屬性</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3178" target="_blank">#3178</a><span>&nbsp;</span>修復會話存檔反序列化接口中 uint64 相關字段定義，使用 BigInteger 類型</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3179" target="_blank">#3179</a><span>&nbsp;</span>羣機器人發送消息接口中增加發送語音類型消息的方法</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3184" target="_blank">#3184</a><span>&nbsp;</span>新增第三方組件可查詢獲客鏈接的使用詳情的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3185" target="_blank">#3185</a><span>&nbsp;</span>獲取審批申請詳情接口增加對位置控件和公式控件的支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3186" target="_blank">#3186</a><span>&nbsp;</span>增加獲取用戶登錄身份和獲取用戶二次驗證信息的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3187" target="_blank">#3187</a><span>&nbsp;</span>批量獲取審批單號接口方法增加對新分頁字段的支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3190" target="_blank">#3190</a><span>&nbsp;</span>獲取客戶羣詳情接口響應類中增加 member_version 字段，並移除過期的 state 字段</li><li>修復第三方獲取訪問用戶身份等接口地址為最新的</li></ul><h2>公眾號</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3006" target="_blank">#3006</a><span>&nbsp;</span>模板消息發送接口增加字段 client_msg_id</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3078" target="_blank">#3078</a><span>&nbsp;</span>模板消息獲得模板 ID 的接口增加選用類目模板的關鍵詞的參數</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3084" target="_blank">#3084</a><span>&nbsp;</span>增加獲取穩定版接口調用憑據的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3142" target="_blank">#3142</a><span>&nbsp;</span>訂閲通知下發接口返回消息 id</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3170" target="_blank">#3170</a><span>&nbsp;</span>修復 is_snapshotuser(是否為快照頁模式虛擬賬號) 參數位置，在 getAccessToken 接口請求時返回</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3196" target="_blank">#3196</a><span>&nbsp;</span>修復 materialImageOrVoiceDownload 接口無法正常刷新 AccessToken 的問題</li></ul><h2>小程序</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F2998" target="_blank">#2998</a><span>&nbsp;</span>增加獲取穩定版接口調用憑據的接口，通過設置 WxMaConfig#useStableAccessToken 方法去開啓使用穩定版接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3024" target="_blank">#3024</a><span>&nbsp;</span>發送設備消息接口請求類增加設備型號 id 字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3077" target="_blank">#3077</a><span>&nbsp;</span>增加 openApi 管理的接口支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3083" target="_blank">#3083</a><span>&nbsp;</span>增加發貨信息管理相關接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3115" target="_blank">#3115</a><span>&nbsp;</span>增加短劇媒資管理相關接口支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3122" target="_blank">#3122</a><span>&nbsp;</span>增加小程序虛擬支付的相關接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3124" target="_blank">#3124</a><span>&nbsp;</span>實現查詢 URL Link 的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3194" target="_blank">#3194</a><span>&nbsp;</span>優化 openApi 部分接口（getApiQuota 和 getRidInfo ）響應類的部分字段信息</li><li>代碼審核狀態查詢接口返回增加三個參數</li><li>增加退貨組件相關接口，同時綁定/解綁物流賬號接口增加缺失返回值</li><li>添加獲取 NFC 的小程序 scheme 接口</li></ul><h2>微信支付</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3009" target="_blank">#3009</a><span>&nbsp;</span>商家轉賬到零錢接口增加轉賬場景 ID 字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3023" target="_blank">#3023</a><span>&nbsp;</span>增加根據賬戶類型查詢二級商戶實時餘額的接口，同時修復批量轉賬訂單相關接口的問題</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3045" target="_blank">#3045</a><span>&nbsp;</span>修復分賬接收方列表」姓名「字段加密功能</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3056" target="_blank">#3056</a><span>&nbsp;</span>優化支付/退款結果解析，增加對 V3 版本服務商的下單/退款支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3063" target="_blank">#3063</a><span>&nbsp;</span>增加服務商模式關閉訂單的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3066" target="_blank">#3066</a><span>&nbsp;</span>增加服務商模式 V3 查詢訂單的接口支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3070" target="_blank">#3070</a><span>&nbsp;</span>優化服務商模式下下單接口，去掉部分重複代碼</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3089" target="_blank">#3089</a><span>&nbsp;</span>新增代金券詳情接口返回類增加商戶單據號字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3102" target="_blank">#3102</a><span>&nbsp;</span>修復申請資金賬單接口請求裏的參數名稱</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3103" target="_blank">#3103</a><span>&nbsp;</span>v3 發起商家轉賬接口的結果類增加批次狀態字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3106" target="_blank">#3106</a><span>&nbsp;</span>退款結果通知裏退款金額等字段類型修復</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3111" target="_blank">#3111</a><span>&nbsp;</span>分賬相關接口增加子商戶應用 ID 字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3128" target="_blank">#3128</a><span>&nbsp;</span>提供擴展 httpclientbuilder 的能力</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3136" target="_blank">#3136</a><span>&nbsp;</span>根據最新官方文檔補全部分接口的字段</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3138" target="_blank">#3138</a><span>&nbsp;</span>增加接查詢結算賬戶修改申請狀態的接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3154" target="_blank">#3154</a><span>&nbsp;</span>修復按日下載提現異常文件接口響應異常</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3162" target="_blank">#3162</a><span>&nbsp;</span>接入服務商微信支付分簽約計劃相關接口功能</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3169" target="_blank">#3169</a><span>&nbsp;</span>新增商戶開戶意願確認相關接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3171" target="_blank">#3171</a><span>&nbsp;</span>修改微信支付分簽約計劃部分字段類型</li><li>二級商戶進件申請接口請求參數裏的金融機構許可證圖片字段修改為正確的類型</li><li>優化複用訂單通知 SignatureHeader</li><li>分賬模塊解凍剩餘資金接口返回類增加幾個字段</li><li>增加微信支付服務商 V3 版本説明</li><li>增加服務商查詢單筆退款的 v3 接口</li><li>增加服務商模式下分賬通知的解析方法</li><li>新增 v3 分賬查詢接口，同時修改分賬查詢結果接口增加分賬明細單號字段 detail_id</li><li>服務商支付通知接口增加若干字段</li><li>退款查詢接口的結果類增加退款總金額、代金券退款總金額、用戶退款金額等字段</li><li>重構分賬相關接口，重命名接口方法和請求實體，合併分賬 v2、v3 實現類，方便同時使用</li><li>優化 WxPayPartnerOrderQueryV3Result 類中 Payer 字段</li><li>優化微信支付異常處理代碼，兼容混亂且變態的微信官方字段命名習慣</li></ul><h2>視頻號</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F2991" target="_blank">#2991</a><span>&nbsp;</span>增加視頻號模塊，實現視頻號大部分相關接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3167" target="_blank">#3167</a><span>&nbsp;</span>視頻號小店分享員訂單接口增加幾個返回參數，並修復 openid 參數類型</li><li>增加視頻號小店的同意和拒絕修改地址的接口 !114</li><li>視頻號小店獲取訂單詳情接口增加部分字段 !113</li></ul><h2>開放平台</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3040" target="_blank">#3040</a><span>&nbsp;</span>小程序管理部分接口返回結果類增加參數，同時增加新的接口 (查詢小程序線上代碼的可見狀態，獲取小程序業務域名校驗文件)</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3116" target="_blank">#3116</a><span>&nbsp;</span>雲開發/雲託管環境共享接口增加請求環境源參數</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fissues%2F3182" target="_blank">#3182</a><span>&nbsp;</span>設置服務器域名接口方法增加 tcp 合法域名和 udp 合法域名的參數</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3189" target="_blank">#3189</a><span>&nbsp;</span>增加試用小程序快速認證接口</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3198" target="_blank">#3198</a><span>&nbsp;</span>修改 H5 版授權鏈接為新版鏈接</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3083" target="_blank">#3083</a><span>&nbsp;</span>增加第三方平台的購物訂單管理等接口</li><li>修復試用小程序快速認證字段類型錯誤</li></ul><h2>其他公共問題</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F2999" target="_blank">#2999</a><span>&nbsp;</span>修復異步消息路由報錯的問題</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWechat-Group%2FWxJava%2Fpull%2F3005" target="_blank">#3005</a><span>&nbsp;</span>提供更新 access_token 的消費接口</li><li>修復 AppId 和 appid 同時存在導致 lombok 生成代碼異常的問題</li><li>修復使用 java.nio.file.Files 打開公私鑰文件無法釋放句柄的問題</li><li>兼容 SpringBoot3 中使用的 Jedis4 版本</li><li>提供方法方便第三方類使用 XStreamTransformer 進行序列化, 以及支持 XStream 1.4.18 以上增加安全許可</li></ul><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 14:39:41 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273211/wxjava-4-6-0-released</guid>
            <link>https://www.oschina.net/news/273211/wxjava-4-6-0-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度 CTO 王海峯：文心一言用戶規模破 1 億]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><span><span><span>「文心一言用戶規模突破</span></span></span><span><span><span>1</span></span></span><span><span><span>億。」1</span></span></span><span><span><span>2 月 28 日，</span></span></span><span><span><span>百度首席技術官</span></span></span><span><span><span>、深度學習技術及應用國家工程</span></span></span><span><span><span>研究中心</span></span></span><span><span><span>主任</span></span></span><span><span><span>王海峯在第十屆</span></span></span><span><span><span>WAVE SUMMIT 深度學習開發者</span></span></span><span><span><span>大</span></span></span><span><span><span>會</span></span></span><span><span><span>上宣佈。會上，王海峯以《文心加飛槳，翩然赴星河》為題作了主旨演講，分享了飛槳和文心的最新成果。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="284" src="https://static.oschina.net/uploads/space/2023/1228/192946_d8IJ_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><strong><span><span><span><strong>飛槳開發者已達 1</strong></span></span></span></strong><strong><span><span><span><strong>070</strong></span></span></span></strong><strong><span><span><span><strong>萬</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span>WAVE SUMMIT 深度學習開發者大會</span></span></span><span><span><span>始於</span></span></span><span><span><span>2019 年 4 月，每年兩次與開發者相聚，如今</span></span></span><span><span><span>已是</span></span></span><span><span><span>五載十屆</span></span></span><span><span><span>。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>回顧五年</span></span></span><span><span><span>，</span></span></span><span><span><span>大會一路</span></span></span><span><span><span>見證了</span></span></span><span><span><span>百度對人工智能技術和產業趨勢的前瞻判斷，指引了技術創新和產業實踐的方向。2</span></span></span><span><span><span>019</span></span></span><span><span><span>年王海峯在</span></span></span><span><span><span>首屆大會上</span></span></span><span><span><span>提出，深度學習框架是智能時代的操作系統。深度學習的通用性特點，以及深度學習框架及平台的發展，推動人工智能標準化、自動化和模塊化，進入工業大生產階段。2</span></span></span><span><span><span>020</span></span></span><span><span><span>年，王海峯提出了打造 AI 新型基礎設施，雲智一體加速產業智能化，將 AI 大生產平台升級為雲智一體的新型基礎設施，為產業智能化奠定堅實的基礎。2</span></span></span><span><span><span>021</span></span></span><span><span><span>年，王海峯表示，人工智能呈現出「融合創新」和「降低門檻」的特點：一方面，AI 技術及產業的融合創新越來越多；另一方面，雖然 AI 技術越來越複雜，但 A</span></span></span><span><span><span>I</span></span></span><span><span><span>開發與應用的門檻卻越來越低。2</span></span></span><span><span><span>022</span></span></span><span><span><span>年，王海峯進一步提出，深度學習平台加上大模型，貫通了從硬件適配、模型訓練、推理部署，到場景應用的 AI 全產業鏈，夯實了產業智能化基座。今年，大語言模型的出現，為通用人工智能帶來曙光。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span>五年來，在持續技術創新和賦能產業的發展歷程中，飛槳自身也在不斷升級，從深度學習框架，到平台生態，發展成為技術領先、功能豐富的產業級深度學習開源開放平台。飛槳集核心框架、基礎模型庫、開發套件、工具組件，以及助力開發者成長的星河社區於一體，具有動靜統一的深度學習框架、端到端自適應大規模分佈式訓練、雲邊端全場景高性能推理等關鍵核心技術。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>飛槳生態愈加繁榮，</span></span></span><span><span><span>2019 年，凝聚在飛槳平台的開發者規模 150 萬，到今年 8 月的 Wave Summit，已經達到 800 萬，服務的企業數量、基於飛槳創建的模型數量，也都高速增長</span></span></span><span><span><span>。王海峯現場公佈了飛槳生態最新成果，截至 2</span></span></span><span><span><span>023</span></span></span><span><span><span>年 1</span></span></span><span><span><span>2</span></span></span><span><span><span>月底，飛槳已凝聚</span></span></span><span><span><span>1070</span></span></span><span><span><span>萬開發者，服務 2</span></span></span><span><span><span>3.5</span></span></span><span><span><span>萬家企事業單位，基於飛槳創建了</span></span></span><span><span><span>86</span></span></span><span><span><span>萬個模型。</span></span></span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px"><span><span><span><span><span><strong><span><span><span><strong>文心一言用戶規模破億，日提問量快速增長</strong></span></span></span></strong></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>據瞭解，百度自</span></span></span><span><span><span>2019</span></span></span><span><span><span>年起深耕預訓練模型研發，發佈了文心大模型 1</span></span></span><span><span><span>.0</span></span></span><span><span><span>。經過近四年積累，百度於今年 3 月在全球科技大廠中率先發布了知識增強大語言模型文心一言。1</span></span></span><span><span><span>0</span></span></span><span><span><span>月，文心一言的基礎模型升級到 4</span></span></span><span><span><span>.0</span></span></span><span><span><span>，理解、生成、邏輯和記憶四大人工智能基礎能力全面提升。文心大模型</span></span></span><span><span><span>4.0</span></span></span><span><span><span>過去兩個多月整體效果又提升了</span></span></span><span><span><span>32%</span></span></span><span><span><span>。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img height="283" src="https://static.oschina.net/uploads/space/2023/1228/193026_HXnt_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>王海峯現場披露，文心一言用戶規模已突破</span></span></span><span><span><span>1</span></span></span><span><span><span>億，自 8 月 3</span></span></span><span><span><span>1</span></span></span><span><span><span>日</span></span></span><span><span><span>獲準開放對公眾提供服務</span></span></span><span><span><span>以來，文心一言的用戶提問量一路上揚，基本與文心大模型的效果提升同步。越來越多的用戶在信任和使用文心一言。</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span><span>王海峯最後表示：「</span></span></span><span><span><span>五</span></span></span><span><span><span>載</span></span></span><span><span><span>十屆，</span></span></span><span><span><span>我們與所有開發者一起，踔厲奮發，篤行不怠。願繼續與所有開發者攜手並肩，在飛槳和文心的支持下，共赴通用人工智能的星辰大海！」</span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 11:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273184</guid>
            <link>https://www.oschina.net/news/273184</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[廣電運通加入 openKylin，助力社區創新技術發展！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>近日，廣電運通集團股份有限公司（以下簡稱」廣電運通「）簽署了 openKylin 社區 CLA（Contributor License Agreement 貢獻者許可協議），正式加入 openKylin 開源社區。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-cab724551f7e2a4ba37a2d71058d9f83c08.png" referrerpolicy="no-referrer"></p><p><span>廣電運通創立於 1999 年，隸屬於廣州無線電集團，是國有控股的高科技上市企業，主營業務覆蓋智能金融、公共安全、智能交通、數字政府、大文旅、新零售及智慧教育等領域，為全球客戶提供具有競爭力的智能終端、運營服務及大數據解決方案。</span></p><p><span>廣電運通已連續 15 年位列智能金融設備市場第一，是國內最大的金融智能自助設備供應商和服務商，旗下信創軟硬件產品已在各大金融機構廣泛應用和驗證，持續為金融信創繁榮發展輸入源源不斷的動能。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e6b2fb1b3ecd1366d41e1da581a52ad6d78.png" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>加入 openKylin 社區後，廣電運通將充分發揮自身在金融科技領域的技術和資源優勢，聯合上下游合作伙伴，建立互利共贏的良性循環，與社區在金融智能終端技術遷移等方面開展合作，豐富產業生態，助力創新技術發展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273155</guid>
            <link>https://www.oschina.net/news/273155</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[深耕開發者生態，openKylin 入選 2023 中國技術品牌影響力企業榜]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>2023 年 12 月 26 日，中國技術先鋒年度評選&nbsp;| 2023 中國技術品牌影響力企業榜單正式發佈。作為中國領先的新一代開發者社區，SegmentFault 思否依託數百萬開發者用戶數據分析，各科技企業在國內技術領域的行為及影響力指標，最終評選出 30 家上榜企業。<strong>openKylin 作為中國領先的開源操作系統根社區，憑藉在技術領域和開發者生態領域的持續貢獻，入選 30 強之列。</strong></span></p><p style="text-align:center"><img alt="" height="3508" src="https://oscimg.oschina.net/oscnet/up-f71b87d34c96069fbcb15077685dcb8cfdf.png" width="2481" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>相信開發者的力量，一直以來 openKylin 社區都堅持大力推動開發者生態建設。2023 年，openKylin 社區曾組織和參與頂級技術大會、開發者大賽、技術沙龍</span><span>等活動</span><span><strong>70+</strong>場，以領先技術回饋社區。截至目前，openKylin 已累計發佈<strong>6</strong>個社區版本，下載量<strong>100 萬+</strong>；匯聚<strong>400+</strong>社區會員<strong>、5500+</strong>開發者加入社區，並累計成立<strong>94</strong>個 SIG 組開展技術研究與創新，<span>和開發者共同成長。</span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>未來，openKylin 也將保持初心，加強生態建設，服務廣大開發者，為營造良好開源生態和技術發展持續努力，也期待越來越多的開發者參與進來，為建設開源、貢獻開源添磚加瓦！&nbsp;</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span style="color:#7f7f7f">附：《2023 中國技術品牌影響力企業》</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f8de216bffebbb3744628f4612997a427f.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>openKylin（開放麒麟）社區旨在以「共創」為核心，在開源、自願、平等、協作的基礎上，通過開源、開放的方式與企業構建合作伙伴生態體系，共同打造桌面操作系統頂級社區，推動 Linux 開源技術及其軟硬件生態繁榮發展。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff">社區理事成員單位包括麒麟軟件、普華基礎軟件、中科方德、麒麟信安、凝思軟件、一銘軟件、中興新支點、元心科技、中國電科 32 所、技德系統、北京麟卓、先進操作系統創新中心、飛騰、兆芯、龍芯中科、景美、京東科技、玄鐵、申泰信息、海光等 21 家產業同仁和行業機構。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273154</guid>
            <link>https://www.oschina.net/news/273154</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[養樂多公司確認 95 G 數據被泄露]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一個自稱為 DragonForce 的組織，將澳大利亞養樂多公司 (Yakult Australia)&nbsp;的 95.19 GB 數據進行了公開泄露。<span style="background-color:#ffffff">Yakult Australia&nbsp;</span>方面也證實了此次網絡攻擊的真實性，並表示<span style="background-color:#ffffff">該公司的澳大利亞和新西蘭 IT 系統均受到了影響。</span></span></p><p><span style="color:#000000">「12 月 15 日上午，我們首次意識到發生了一起網絡事件。我們還不能確認事件的嚴重程度。我們正在與網絡安全專家合作，緊急調查這一事件。」</span></p><p><span style="color:#000000">目前，該公司還無法確認事件究竟是如何發生的。"我們的調查正在進行中。一旦獲得信息，我們將提供進一步的更新信息。"</span></p><p><span style="color:#000000"><img alt="" height="355" src="https://oscimg.oschina.net/oscnet/up-5616ae7257ff54615cc8746288f71f8244c.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000"><img alt="" height="424" src="https://oscimg.oschina.net/oscnet/up-ddf22101150476fbae2414443ea235cfa22.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">DragonForce 方稱，所泄露的數據包含公司數據庫、合同、護照等。科技網站&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bleepingcomputer.com%2Fnews%2Fsecurity%2Fyakult-australia-confirms-cyber-incident-after-95-gb-data-leak%2F" target="_blank">BleepingComputer</a> 對泄露的一小部分數據進行了分析，發現其中似乎包含一些商業文件、電子表格、澳大利亞養樂多公司的信貸申請、員工記錄以及護照等身份證件的複印件。</span></p><p><span style="color:#000000">DragonForce （又名 DragonLeaks）打出的口號是"companies that refused to cooperate"。這表明其首要目的是進行錢財勒索，如果勒索不成，就會公開泄露竊取的資產和數據。目前有關"DragonForce"的信息還不多，迄今為止，該組織已在其泄密網站上列出了 20 名受害者。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 08:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273141/yakult-australia-95-gb-data-leak</guid>
            <link>https://www.oschina.net/news/273141/yakult-australia-95-gb-data-leak</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Julia 1.10 正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>經過 3 個 beta 版本和 3 次候選發佈版本後，Julia 1.10 現已正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjulialang.org%2Fblog%2F2023%2F12%2Fjulia-1.10-highlights%2F" target="_blank">發佈</a>。<span style="background-color:#ffffff; color:#333333">這是一種通用的高性能語言，在科學計算和數值分析中較為流行。</span></p><p><span style="background-color:#ffffff; color:#333333">新版本的一些亮點內容如下：</span></p><ul><li><h4><strong>用 Julia 編寫的新解析器</strong></h4></li></ul><p>將之前用 Scheme 編寫的默認解析器替換為用 Julia 編寫的新解析器，稱為&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJuliaLang%2FJuliaSyntax.jl%2F" target="_blank">JuliaSyntax.jl</a>。此更改引入了多項改進：<strong style="color:#212529">提高解析性能、詳細的語法錯誤消息、高級源代碼映射。</strong></p><ul><li><h4><strong>包加載時間改進</strong></h4></li></ul><p>這項工作主要是通過分析和改進 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJuliaComputing%2FOmniPackage.jl" target="_blank">OmniPackage.jl</a> 的加載時間來完成的，OmniPackage.jl 是一個人造的"mega package"，其唯一目的就是依賴和加載大量的依賴項。<span style="background-color:#ffffff; color:#212529">總的來説，OmniPackage.jl 最終會加載大約 650 個軟件包，其中許多軟件包都非常大。</span></p><pre style="margin-left:auto; margin-right:auto; text-align:left"><code class="language-julia"><em># Julia 1.9:</em><span style="color:#008080">48.041773</span> seconds (<span style="color:#008080">102.17</span> M allocations: <span style="color:#008080">6.522</span> GiB, <span style="color:#008080">5.82</span>% gc time, <span style="color:#008080">1.21</span>% compilation time: <span style="color:#008080">86</span>% of which was recompilation)

<em># Julia 1.10:</em><span style="color:#008080">19.125309</span> seconds (<span style="color:#008080">30.38</span> M allocations: <span style="color:#008080">2.011</span> GiB, <span style="color:#008080">11.54</span>% gc time, <span style="color:#008080">10.38</span>% compilation time: <span style="color:#008080">61</span>% of which was recompilation)</code></pre><ul><li><h4><strong>堆棧跟蹤渲染的改進</strong></h4></li></ul><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>隨着 Julia 1.10 的改進，堆棧跟蹤現在更加簡潔：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre style="margin-left:auto; margin-right:auto; text-align:left"><span><span style="background-color:#fafafa"><span><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span><span><code class="language-julia">Stacktrace: [<span><span><span style="color:#008080">1</span></span></span>] error() @ Base ./error.jl:<span><span><span style="color:#008080">44</span></span></span> [<span><span><span style="color:#008080">2</span></span></span>] f(g::<span><span><span style="color:#0086b3">Function</span></span></span>, a::<span><span><span style="color:#0086b3">Int64</span></span></span>; kw::<span><span><span style="color:#b14e8f"><strong>@Kwargs</strong></span></span></span>{}) @ Main ./REPL[<span><span><span style="color:#008080">1</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span> [<span><span><span style="color:#008080">3</span></span></span>] f(a::<span><span><span style="color:#0086b3">Int64</span></span></span>) @ Main ./REPL[<span><span><span style="color:#008080">2</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span> [<span><span><span style="color:#008080">4</span></span></span>] top-level scope @ REPL[<span><span><span style="color:#008080">3</span></span></span>]:<span><span><span style="color:#008080">1</span></span></span></code></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>此更新導致堆棧跟蹤更短且更易於閲讀。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>並行垃圾收集</strong></h4></li></ul><p>在 1.10 版中對垃圾收集器（GC）的標記階段進行了並行化處理，並引入了與應用線程同時運行部分清掃階段的可能性。這大大加快了多線程分配繁重工作負載的垃圾回收時間。</p><p>多線程 GC 可通過命令行選項 --gcthreads=M 啓用，該選項可指定在 GC 的標記階段使用的線程數。也可以通過 --gcthreads=M,1 啓用上述併發頁面掃描，這意味着在 GC 標記階段將使用 M 個線程，而一個 GC 線程負責與應用程序同時執行部分掃描階段。</p><p>默認情況下，GC 線程數設置為計算線程數（--threads）的一半。</p><ul><li><h4><strong>Tracy 和英特爾 VTune ITTAPI 分析集成</strong></h4></li></ul><p><img alt="" height="395" src="https://oscimg.oschina.net/oscnet/up-920a63319481f6cd753b044f04fc799eaaf.png" width="500" referrerpolicy="no-referrer"></p><ul><li><h4><strong>升級到 LLVM 15</strong></h4></li></ul><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Julia 1.10 版本使用 LLVM 15。這帶來了新處理器和一般現代化更新的配置文件。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>特別值得注意的是新的 pass-manager 的遷移，有望改進編譯時間。LLVM 15 改進了對 x86 上 Float16 的支持。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>Linux AArch64 穩定性改進</strong></h4></li></ul><p>升級到 LLVM 15 後，可以在 Linux 的 aarch64 CPU 上使用 JITLink。這種 linker 最初是在 Julia v1.8 中引入的，僅適用於 Apple Silicon（macOS 上的 aarch64 CPU），它解決了在該平台上影響 Julia 的頻繁 segmentation fault 問題。不過，由於 LLVM 內存管理器中的一個錯誤，非重要工作負載可能會生成過多的內存映射 (mmap)，從而超出允許映射的上限。如果遇到這個問題，可閲讀有關如何<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.julialang.org%2Fen%2Fv1.10.0%2Fdevdocs%2Fbuild%2Farm%2F%23AArch64-%28ARMv8%29" target="_blank">更改<code>mmap</code>限制</a>的文檔。</p><ul><li><h4><strong>system images 和 package images 的並行本機代碼生成</strong></h4></li></ul><p>通過在 LLVM 編譯階段 exposing 並行性，加速了&nbsp;Ahead-of-time compilation (AOT)。現在，編譯工作不再是編譯一個大型的整體編譯單元，而是分成多個小塊。這種多線程方式加快了 system images 和大型 package images 的編譯速度，從而縮短了其預編譯時間。</p><p>可以通過環境變量 JULIA_IMAGE_THREADS=n 來控制並行的使用量。此外，由於 Windows 本地 COFF 二進制文件的限制，在 Windows 上編譯大型 images 時，多線程將被禁用。</p><ul><li><h4><strong>避免並行預編譯期間&nbsp;races</strong></h4></li></ul><p>&nbsp;</p><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>1.10 引入了一種「pidfile」（process id file）鎖定機制，該機制可確保只有一個 Julia 進程能夠預編譯給定的緩存文件，而緩存文件是預編譯過程中針對特定 Julia 設置的。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:left"><span><span><span><span style="color:#212529"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>這種安排既有利於可能同時運行多個進程的本地用戶，也有利於可能在同一共享倉庫中運行數百個工作程序的高性能計算用戶。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><h4><strong>使用時並行預編譯</strong></h4></li></ul><p>&nbsp;雖然 Pkg 會在安裝後自動並行預編譯依賴包，但在使用/導入時進行的預編譯以前是串行的，每次預編譯一個依賴包。</p><p>當用戶開發一個軟件包時，最終可能會在加載時進行預編譯，而且如果開發的軟件包中的代碼變更深入到正在加載的軟件包的依賴關係樹中，串行預編譯過程可能會特別慢。</p><p>1.10 引入了加載時的並行預編譯，以捕捉這些情況並加快預編譯速度。</p><p>更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjulialang.org%2Fblog%2F2023%2F12%2Fjulia-1.10-highlights%2F" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 07:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273118/julia-1-10-released</guid>
            <link>https://www.oschina.net/news/273118/julia-1-10-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Golang 通用代碼生成器仙童發佈 2.4.0 電音仙女嚐鮮版二，改進三大部分生成功能羣]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Golang 通用代碼生成器仙童發佈 2.4.0 電音仙女嚐鮮版二，改進三大部分生成功能羣</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Golang 通用代碼生成器仙童已發佈 2.4.0 電音仙女嚐鮮版二及其介紹視頻。嚐鮮版二改進了三大部分生成功能羣。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">視頻請見：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Q64y1H75r%2F" target="_blank">https://www.bilibili.com/video/BV1Q64y1H75r/</a></p><p>Golang 通用代碼生成器仙童已發佈 2.4.0 電音仙女嚐鮮版一介紹視頻請見：</p><p>正常模式：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fw411V77i%2F" target="_blank">https://www.bilibili.com/video/BV1fw411V77i/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">啞數據模式：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1nu4y1K7sz%2F" target="_blank">https://www.bilibili.com/video/BV1nu4y1K7sz/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">電音仙女版本支持日期和日期時間。支持三大部分生成功能羣。支持枚舉。支持啞數據模式。支持用戶管理自己的資料和密碼。技術狀態和最新版的 Rust 通用代碼生成器紅蓮的技術狀態一致。非常便利大家的使用。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">代碼生成器項目地址：</span><a href="https://gitee.com/jerryshensjf/Fairchild">https://gitee.com/jerryshensjf/Fairchild</a><br><span style="background-color:#ffffff; color:#333333">二進制發佈包下載地址：</span><a href="https://gitee.com/jerryshensjf/Fairchild/attach_files">https://gitee.com/jerryshensjf/Fairchild/attach_files</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h1>Go 語言通用代碼生成器：仙童</h1><h3>簡介</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器：仙童</p><h3>百度話題</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">#通用代碼生成器#</p><h3>版本更新</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代碼生成器仙童已發佈 2.4.0 電音仙女（TechnoFairy）嚐鮮版二，改進了三大部分生成功能羣。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代碼生成器仙童已發佈 2.4.0 電音仙女（TechnoFairy）嚐鮮版一，支持日期和日期時間。支持三大部分生成功能羣。支持枚舉。支持啞數據模式。支持用戶管理自己的資料和密碼。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器仙童 Beta 7 版。完善支持 Oracle 數據庫，並有錯誤修正。可以從源碼編譯生成構建。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器仙童 Beta6 版，發佈最新介紹視頻，支持從源碼構建代碼生成器。您只需下載源碼，即可以 mvn install 編譯構建 Go 語言通用代碼生成器仙童。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器：仙童 Beta5 版。徹底修復彈性登錄模塊，修復了註冊，修改密碼，管理員新增用戶時使用過時加密算法問題。更多測試。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器：仙童 Beta3 版。修復幾處錯誤。包括登錄權限問題和圖形報表 UI 的語言問題。更多測試。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">GO 語言通用代碼生成器仙童已發佈 Beta2 版，支持 Rust 語言兼容性，即可以使用 Rust 通用代碼生成器蓮花的 SGS2 模板直接生成 Go 語言代碼生成物。同時支持 Java 語言兼容性。即支持 Java 通用代碼生成器的模板直接生成 Go 語言代碼生成物。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童 Beta 版，此版本修復了 Excelize 組件 API 變化引起的編譯錯誤，另有文檔更新和更多檢查。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童嚐鮮版十二。支持 PDF 格式數據導出。在嚐鮮版十一基礎上有增強和修錯。流暢支持模板嚮導代碼生成。支持三大變形功能羣，支持四種數據庫。已完成所有功能規劃，下一個版本即可進入 Beta 階段。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版十一。在嚐鮮版十基礎上有增強和修錯，並支持數據庫表與字段的中文註釋和兼容所有 java 通用代碼生成器的 SGS2 模板，直接生成 go 語言後端和 Vue 前端，並自動格式化 java 語言 SGS2 模板至 go 語言模板。支持三大變形功能羣，支持四種數據庫，支持 Excel 數據導出。支持圖形報表和複雜版面，支持彈性登錄模塊。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版十是第一個穩定版本。功能基本完備，所有示例通過檢測，初步完整測試。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版九在嚐鮮版八基礎上有功能增強和缺陷修復。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版八初步支持 SimpleAuth 彈性登錄界面。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版 7 是一個錯誤修復版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版 5 支持前端和後端的複雜版面和圖形報表功能</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版 4 支持 Vue 和 ElementUI 的基於 Node.js 的獨立前端。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版 3 進行了廣泛的測試和修錯。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版２新增對 Oracle 數據庫的支持。</p><h3>架構</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">基於 Java 通用代碼生成器：光的架構。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">生成的代碼基於 go 語言，使用 gin 作為 web 框架。目前支持 MariaDB,MySQL,PostgreSQL 和 Oracle 四種數據庫。支持生成 Vue 和 ElementUI 的基於 Node.js 的獨立前端。支持 Excel,PDF 兩種數據導出格式。</p><h3>開發測試環境</h3><ul><li>jdk 17</li><li>Apache Tomcat 9</li><li>Node.js 14</li><li>golang 1.19</li><li>MariaDB 15.1</li><li>MySQL 8</li><li>PostgreSQL 14</li><li>Oracle 11</li></ul><h3>B 站介紹視頻</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代碼生成器仙童 2.4.0 電音仙女嚐鮮版二介紹視頻請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Q64y1H75r%2F">https://www.bilibili.com/video/BV1Q64y1H75r/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Golang 通用代碼生成器仙童 2.4.0 電音仙女嚐鮮版一介紹視頻請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fw411V77i%2F">https://www.bilibili.com/video/BV1fw411V77i/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1nu4y1K7sz%2F">https://www.bilibili.com/video/BV1nu4y1K7sz/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器仙童已發佈 Beta7 版視頻,請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1uM4y1774F%2F">https://www.bilibili.com/video/BV1uM4y1774F/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Go 語言通用代碼生成器仙童 Beta6 版視頻,請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Jg4y1473X%2F">https://www.bilibili.com/video/BV1Jg4y1473X/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">​Go 語言通用代碼生成器仙童已發佈 Beta5 版，發佈最新介紹視頻，徹底修復彈性登錄模塊。修復了註冊，修改密碼，管理員新增用戶時使用過時加密算法問題。更多測試。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">視頻請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xg4y1E7FA%2F">https://www.bilibili.com/video/BV1xg4y1E7FA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">​Beta3 版，請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1g84y1n73B%2F">https://www.bilibili.com/video/BV1g84y1n73B/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta 版兩個視頻的合集，請見：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV13D4y1G7L4%2F">https://www.bilibili.com/video/BV13D4y1G7L4/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta2 版：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV13M411A7nH%2F">https://www.bilibili.com/video/BV13M411A7nH/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Beta 版：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV19j411T7wx%2F">https://www.bilibili.com/video/BV19j411T7wx/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版十二：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV14K411i7DM%2F">https://www.bilibili.com/video/BV14K411i7DM/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版十一：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1ce411P7qU%2F">https://www.bilibili.com/video/BV1ce411P7qU/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">嚐鮮版九：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1a5411R7Zt%2F">https://www.bilibili.com/video/BV1a5411R7Zt/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1pR4y1w7aB%2F">https://www.bilibili.com/video/BV1pR4y1w7aB/</a></p><h3>項目圖片</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1104/210826_16fb1ca2_1203742.jpeg" referrerpolicy="no-referrer"></p><h3>最新大版本號</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">正在研發的最新大版本號是仙童 2.4.0 電音仙女　TechnoFairy 短名 TF。對標 java 通用代碼生成器光 2.4.0 電音之王和 Rust 通用代碼生成器紅蓮。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/tf2.jpg" referrerpolicy="no-referrer"></p><h3>百度話題</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">＃通用代碼生成器＃</p><h3>代碼生成器截圖</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代碼生成器正在研發中，Beta7 版已發佈，這是一個穩定版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1112/202857_c7a40dc0_1203742.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1112/202911_c2b9a341_1203742.png" referrerpolicy="no-referrer"></p><h3>電音仙女嚐鮮版二下載</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">下載地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/Fairchild/attach_files">https://gitee.com/jerryshensjf/Fairchild/attach_files</a></p><h3>仙童的安裝運行</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">仙童是使用 Java 語言寫成的代碼生成器。運行仙童您需要裝好 Java8 和安裝好 Tomcat9 或 8.5 應用服務器。並把仙童的 war 包部署在 Tomcat 的 webapps 目錄下。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代碼生成物的運行還需要安裝好 Go 語言開發環境，您要使用 go mod 管理依賴，並把代碼生成物解壓在 go 語言工作空間的 src 文件夾的一級子目錄下。還需要對應的數據庫服務器運行代碼生成物的建庫 sql 腳本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">前端代碼生成物的運行需要裝好 node.js 運行環境並安裝 js 依賴庫。</p><h3>Vue 獨立前端截圖</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/Fc_login.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_list.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_img.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://gitee.com/jerryshensjf/Fairchild/raw/master/fc_mtm2.png" referrerpolicy="no-referrer"></p><h3>代碼生成物截圖</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1122/151921_f4271962_1203742.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="Image description" src="https://images.gitee.com/uploads/images/2021/1122/151935_cf6c7223_1203742.png" referrerpolicy="no-referrer"></p><h3>源碼編譯用戶指南</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通用代碼生成器已經支持自己編譯源碼，我已把原來缺的前端代碼生成器的 jar 包上傳。支持大家自行編譯源碼。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">需要注意的是，現在我的開發平台是 Fedora 37 上的 openjdk 17。所以大家編譯源碼最好使用 openjdk17。編譯好的 war 包運行在 apache tomcat 9.0 上。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">已有 jdk8 的用戶報告默認下載的代碼生成器 war 包在他的平台上無法運行。您如果遇到類似問題請報告。我的電子郵件是：<a href="https://www.oschina.net/action/GoToLink?url=mailto%3Ajerry_shen_sjf%40qq.com" target="_blank">jerry_shen_sjf@qq.com</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">附 openjdk 17 下載地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fjdk.java.net%2Fjava-se-ri%2F17">https://jdk.java.net/java-se-ri/17</a></p><h3>使用前端功能的注意事項</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">由於圖片文件比較大，原來前端使用 cnpm instll 安裝類型，npm run dev 運行有所改動，改為先使用 npm install --registry=<a href="https://gitee.com/link?target=https%3A%2F%2Fregistry.npm.taobao.org%25E5%25AE%2589%25E8%25A3%2585%25E7%25B1%25BB%25E5%25BA%2593%25EF%25BC%258C%25E5%2587%25BA%25E9%2594%2599%25E5%2590%258E%25E4%25BD%25BF%25E7%2594%25A8cnpm">https://registry.npm.taobao.org 安裝類庫，出錯後使用 cnpm</a><span>&nbsp;</span>install 安裝類庫， 使用 node --max-http-header-size=1000000 ./node_modules/.bin/webpack-dev-server --inline --progress --config build/webpack.dev.conf.js　 運行系統。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">您也可以從安裝好的本系列代碼生成器的前端項目中拷貝 node_modules 目錄，即可運行前端。</p><h4>node-sass 不兼容的解決辦法</h4><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">辦法一：</p><div><div><pre><span>npm uninstall node-sass</span><span>npm install sass-loader</span><span>npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">辦法二：</p><div><div><pre><span>npm uninstall sass-loader node-sass //卸載</span><span>npm install sass-loader@7.3.1 node-sass@4.14.1 --save-dev //安裝對應的版本</span></pre><div>
   &nbsp;
  </div></div></div><h3>動詞算子式代碼生成器的應用場景</h3><ol><li>快速原型：項目或演示場景使用。可以生成具有關係型數據庫後端，使用 MyBatis 的數據庫後端和 Vue 和 ElementUI 前端。</li><li>項目前期：如果項目和動詞算子式代碼生成器兼容，可以使用動詞算子式代碼生成器執行項目前期的自動化生成。</li></ol><h3>源碼研讀者注意事項</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">無垠式代碼生成器第一個完整版本源碼，有興趣可以抄寫一下：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5">https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">相關技術視頻：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fX4y1u7Bn%2F">https://www.bilibili.com/video/BV1fX4y1u7Bn/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1rv41187qY%2F">https://www.bilibili.com/video/BV1rv41187qY/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xv41187cA%2F">https://www.bilibili.com/video/BV1xv41187cA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1t64y1v7WA%2F">https://www.bilibili.com/video/BV1t64y1v7WA/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273087/fairchild-2-4-0-released</guid>
            <link>https://www.oschina.net/news/273087/fairchild-2-4-0-released</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中國開源開發者報告》正式發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center">《2023 中國開源開發者報告》正式發佈。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-acb8a37b712e865f5503ef42f50d1364d40.png" referrerpolicy="no-referrer"></p><p>此報告由開源中國與 Gitee 發佈，整體分為三章，分別是：</p><ul><li><p>第一章《開源開發者事件回顧》</p></li><li><p>第二章《2023 LLM 技術報告》</p></li><li><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中國開發者開源新動向》</p></li></ul><p>&nbsp;</p><p>毫無疑問，開源開發者圈子來看，2023 年是大模型 LLM 年、生成式 AI GenAI 年。</p><p>LLM 領域大放異彩，此報告濃墨重彩地在《2023 LLM 技術報告》中梳理了 2023 年 LLM 的技術行情。報告整體圍繞 LLM Tech Map 梳理邏輯來展開，從基礎設施、大模型、Agent、AI 編程、工具和平台，以及算力幾個方面，為開發者整理了當前 LLM 中最為熱門和硬核的技術領域以及相關的軟件產品和開源項目。</p><p style="text-align:center"><img src="https://oscimg.oschina.net/oscnet/up-8ed4d8f6c27fc4df42c56ed8660ba9ec23b.png" referrerpolicy="no-referrer"></p><p><strong>《2023 LLM 技術報告》詳情可查看（這是子報告）：</strong><br><strong><a href="https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf</a></strong></p><p>&nbsp;</p><p>除了 LLM，開源開發者圈當然還有更多高亮事件，此次年度報告中整理成了另一篇章《開源開發者事件回顧》，這一篇章梳理成了 9 個大塊：</p><ul><li><p>【AIGC】回顧 2023 大語言模型 LLM 元年的重磅事件。</p></li><li><p><span style="color:#27ae60"><strong>【1024 黃金眼】關注 IT 相關民生事件，以老百姓的眼睛看 IT 圈，和開發者零距離接觸。</strong></span></p></li><li><p>【項目停更】到了該説「再見」的時候了，江湖有緣再見。</p></li><li><p><span style="color:#27ae60"><strong>【生產事故】冥場面！速來圍觀 2023 十大生產事故「名場面」。</strong></span></p></li><li><p>【開源治理】開源健康發展必不可少的一環。</p></li><li><p><span style="color:#27ae60"><strong>【硬核發版】最硬核、最極客的年度發版彙總！</strong></span></p></li><li><p>【熱門話題】回顧 2023 年度熱門開發者事件！</p></li><li><p><span style="color:#27ae60"><strong>【重磅官宣】2023 年度開源官宣。</strong></span></p></li><li><p>【R.I.P.】謹以此篇紀念今年離我們而去的行業巨擘。</p></li></ul><p>這些事件，作為圈內人的你還有印象嗎？</p><p>&nbsp;</p><p>第三章《&lt;Gitee × OSS Compass&gt; Insight：中國開發者開源新動向》中，採用 Gitee 與 OSS Compass 作為數據來源，試圖通過數據來反映 2023 年開源開發者圈子的相關情況。亮點數據：</p><ul><li><p>TypeScript 是增長最快的編程語言，增長率達到 49.04%</p></li><li><p>MulanPSL-2.0 在「2023 年使用增長率最快的開源許可證」中排行第二，增長率為 18.34%</p></li><li><p>較為活躍的社區代表： OpenHarmony、openEuler 與 MindSpore</p></li></ul><p>&nbsp;</p><p><strong><span style="background-color:#e67e22">詳情請查看完整報告：</span><br><a href="https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf" target="_blank">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273070/china-open-source-2023-annual-report</guid>
            <link>https://www.oschina.net/news/273070/china-open-source-2023-annual-report</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國信通院發佈「方升」大模型基準測試體系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 24 日，中國信息通信研究院（簡稱「中國信通院」）發佈「方升」大模型評測體系，旨在建立業界大模型基準測試統一的「度量衡」。「方升」測試體系涵蓋大模型基準測試的關鍵四要素，即測試指標、測試方法、測試數據集和測試工具，目前已形成《大規模預訓練模型基準測試-總體技術要求》標準。</span></p><p><img height="167" src="https://oscimg.oschina.net/oscnet/up-ebb8952d715044001bb29e8d67808584ad5.png" width="500" referrerpolicy="no-referrer"></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-8b441a7bb22997359392d02a0644c603284.png" width="500" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">測試指標方面，「方升」測試體系主要針對行業、應用、通用和安全四個維度對大模型進行全面、客觀、統一的評估，為了加速大模型應用落地，重點強化了行業和應用導向能力的考查。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">在測試方法方面，「方升」測試體系創新性提出自適應動態測試方法，從測試數據標籤化、測試題庫實時化、測試方案定製化、測試流程自動化四個方面全面提升大模型基準測試質量，重點解決大模型「刷榜」問題。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">測試數據方面，<span>「</span>方升」測試體系搭建動態測試數據庫，涵蓋測試數據集 107 個，測試數據條數達到 123 萬，聯合產業界多家機構首次推出面向行業、通用、應用、安全領域的評測數據集 6 個。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">測試框架與工具方面，中國信通院在構建超自動化測試平台和智能化結果評估系統方面持續發力，探索解決國內外人工智能自動化測試流程中存在的「阻塞點」，全面提高測試效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">「方升」大模型基準測試體系由中國信通院聯合北京智源研究院、認知智能全國重點實驗室和天津大學共同發佈。此外，國網智能電網研究院、首都之窗、天津大學、中國電信研究院、中國聯通軟件研究院、華為、甲骨易、海天瑞聲、東方財富 9 家單位成為「方升」大模型基準測試首批合作伙伴。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273067</guid>
            <link>https://www.oschina.net/news/273067</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《2023 中國開源開發者報告》]]>
            </title>
            <description>
                <![CDATA[此報告由開源中國與 Gitee 發佈，整體分為三章，分別是：第一章《開源開發者事件回顧》、第二章《2023 LLM 技術報告》、第三章《<gitee ×="" oss="" compass=""> Insight：中國開發者開源新動向》...</gitee>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-annual-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[《2023 大語言模型 LLM 技術報告》]]>
            </title>
            <description>
                <![CDATA[從基礎設施、大模型、Agent、AI 編程、工具和平台，以及算力幾個方面，為開發者整理了當前 LLM 中最為熱門和硬核的技術領域以及相關的軟件產品和開源項目。]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</guid>
            <link>https://talk.gitee.com/report/china-open-source-2023-llm-report.pdf?fr=news</link>
        </item>
        <item>
            <title>
                <![CDATA[BMF —— 下一代視頻處理引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>BMF（Babit Multimedia Framework）是字節跳動開發的跨平台、可定製的多媒體處理框架。經過 4 年多的測試和改進，BMF 已經過量身定製，能夠熟練地應對現實生產環境中的挑戰。目前廣泛應用於字節跳動的視頻串流、直播轉碼、雲剪輯以及移動端前/後處理場景。該框架每天處理超過 20 億個視頻。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>以下是一些主要功能：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><p><span><span>跨平台支持：與 Linux、Windows 和 Mac OS 原生兼容，並針對 x86 和 ARM CPU 進行優化。</span></span></p></li><li><p><span><span>易於使用：BMF 提供 Python、Go 和 C++ API，使開發人員能夠靈活地用自己喜歡的語言進行編碼。</span></span></p></li><li><p><span><span>可定製性：由於其解耦的架構，開發人員可以通過添加自己的模塊來增強框架的功能。</span></span></p></li><li><p><span><span>高性能：BMF 擁有強大的調度器，對異構加速硬件的強大支持。此外還有與&nbsp;<a href="https://www.nvidia.com/"><strong>NVIDIA</strong></a>&nbsp;合作開發的高度優化的 GPU 管道，用於視頻轉碼和 AI 推理。</span></span></p></li><li><p><span><span>高效的數據轉換：BMF 提供跨流行框架（PyTorch/OpenCV/TensorRT）以及硬件設備（CPU/GPU）之間的無縫數據格式轉換。</span></span></p></li></ul><p style="text-align:start"><img alt="" height="375" src="https://static.oschina.net/uploads/space/2023/0824/164846_r8VC_4252687.gif" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bmf</guid>
            <link>https://www.oschina.net/p/bmf</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 跨平台的 hap 查看器 HapViewer]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-hapviewer" class="anchor" href="https://gitee.com/westinyang/hap-viewer#hapviewer"></a>HapViewer</h1><img src="https://gitee.com/westinyang/hap-viewer/raw/master/src/main/resources/icon/icon.png" width="128px" referrerpolicy="no-referrer"><h2><a id="user-content-項目介紹" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>項目介紹</h2><p>一個跨平台的 hap 查看器，方便開發者在電腦上預覽 hap 的信息，並提供一鍵安裝到設備等功能</p><p>目前支持解析的應用</p><ul><li>應用平台：OpenHarmony、HarmonyOS</li><li>編譯目標：API9+</li><li>應用模型：Stage（FA 模型暫不考慮）</li></ul><p>開源倉庫</p><ul><li><a href="https://gitee.com/westinyang/hap-viewer">Gitee</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwestinyang%2Fhap-viewer">Github</a></li></ul><h3><a id="user-content-系列項目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E7%B3%BB%E5%88%97%E9%A1%B9%E7%9B%AE"></a>系列項目</h3><ul><li><strong>電腦版（跨平台）</strong>：<a href="https://gitee.com/westinyang/hap-viewer">westinyang/hap-viewer</a></li><li>手機版（Android）：<a href="https://gitee.com/westinyang/hap-viewer-android">westinyang/hap-viewer-android</a></li></ul><h3><a id="user-content-衍生項目" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A1%8D%E7%94%9F%E9%A1%B9%E7%9B%AE"></a>衍生項目</h3><ul><li><a href="https://gitee.com/ericple/hapv-cli">hapv-cli</a><code>命令行版的 hap 查看器，目前由@ericple 維護</code></li></ul><h2><a id="user-content-下載安裝" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85"></a>下載安裝</h2><ul><li><a href="https://gitee.com/westinyang/hap-viewer/releases">https://gitee.com/westinyang/hap-viewer/releases</a></li></ul><h2><a id="user-content-使用説明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用説明</h2><ul><li>安裝和卸載功能需要自己配置好 hdc 到環境變量</li><li>由於目前 hdc 的 bug，hdc list targets 不顯示 Android 設備，但安裝時候會監測到 Android 設備，如果同時連接 Android 和 OpenHarmony 設備，使用 hdc 安裝命令會提示需要指定一個（我覺得這是個 bug），那目前軟件本身還沒有做設備列表的讀取和選擇，只支持連接一個設備進行操作</li></ul><h2><a id="user-content-開發技術" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF"></a>開發技術</h2><blockquote><p>GraalVM 讓 Java 再次變得強大，使用<code>NativeImage</code>把程序編譯為目標平台的可執行文件，脫離 jvm 直接運行，啓動速度快，內存負載低。<br>
關於 GraalVM 技術的最佳實踐和教程，請參考我的另一個開源項目：<a href="https://gitee.com/westinyang/java-graalvm-start">westinyang/java-graalvm-start</a></p></blockquote><ul><li>GraalVM CE 22.3.0 (Java 17) Native Image</li><li>JavaFX 21-ea+5</li><li>ControlsFX 11.1.2</li><li>gluonfx-maven-plugin</li></ul><h2><a id="user-content-功能列表" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8"></a>功能列表</h2><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 打開應用（選擇、拖拽、默認打開方式）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析應用（基本信息、逆向解析 resources.index 讀取應用名稱）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 技術探測（原生開發、Cocos、Flutter、Qt）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 實用工具（安裝、重裝、卸載、解壓）</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 解析 API9 Stage 模型的安裝包</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""><del>解析 API9 FA 模型 (ArkTS/JS) 的安裝包</del></li></ul><h2><a id="user-content-兼容測試" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E5%85%BC%E5%AE%B9%E6%B5%8B%E8%AF%95"></a>兼容測試</h2><ul><li>Windows 7 <code>未測試，理論兼容</code></li><li>Windows 10/11 <code>已測試</code></li><li>macOS 11.x Big Sur (Intel) <code>已測試</code></li><li>Ubuntu 20.04 <code>已測試</code></li></ul><h2><a id="user-content-截圖預覽" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E6%88%AA%E5%9B%BE%E9%A2%84%E8%A7%88"></a>截圖預覽</h2><p><img src="https://gitee.com/westinyang/hap-viewer/raw/master/screenshot/all.png" alt="" referrerpolicy="no-referrer"></p><h2><a id="user-content-視頻演示" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%A7%86%E9%A2%91%E6%BC%94%E7%A4%BA"></a>視頻演示</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1HX4y127ub">OpenHarmony 首個跨平台的 hap 查看器，將 Open 進行到底，為開源鴻蒙生態助力</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1cg4y197mc">開源鴻蒙 hap 查看器，新增探測 Flutter、Qt 技術，安卓版新主題</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Wb4y1T7VL">開源鴻蒙 hap 查看器，里程碑式新算法，API9~10、系統應用也支持</a></li></ul><h2><a id="user-content-許可聲明" class="anchor" href="https://gitee.com/westinyang/hap-viewer#%E8%AE%B8%E5%8F%AF%E5%A3%B0%E6%98%8E"></a>許可聲明</h2><ul><li>本項目是以 Apache2.0 許可開源，如需衍生或商用請註明出處</li><li>軟件圖標出處：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.flaticon.com%2Ffree-icon%2Fapk_9704667">https://www.flaticon.com/free-icon/apk_9704667</a></li></ul>]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/westinyang/hap-viewer</guid>
            <link>https://gitee.com/westinyang/hap-viewer</link>
        </item>
        <item>
            <title>
                <![CDATA[博通宣佈終止現有 VMware 合作伙伴計劃]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.crn.com%2Fnews%2Fvirtualization%2Fbroadcom-hands-vmware-partners-termination-notice" target="_blank">外媒報道稱</a></u>，博通近日宣佈將在 2024 年 2 月 4 日終止 VMware 此前與經銷商簽訂的「所有合作伙伴協議」，要求原有經銷商必須與博通重新簽約，且只有營收流水超過 50 萬美元（當前約 357 萬元人民幣）以上的經銷商才能加入新的計劃，其他合作伙伴都無法再銷售 VMware 產品。 &nbsp;</p><p>這一策略引發了部分經銷商的不滿和擔憂。他們認為博通此舉破壞了信任，並表示對於小型經銷商而言，這將是一個艱難的年末。一些合作伙伴表示，他們需要重新審視與 VMware 的關係，並考慮是否繼續銷售 VMware 產品。</p><p>博通對 VMware 的重組不僅對合作夥伴關係產生影響，也引發了對 VMware 未來發展的關注。業界觀察家表示，博通需要平衡 VMware 的既有業務和新戰略方向，以確保公司的長期發展。</p><p>隨着博通對 VMware 業務重組的深入推進，業界將關注其未來的戰略動向，以及如何平衡既有業務和新戰略的關係。對於合作伙伴和經銷商而言，他們將面臨重新簽約和適應新戰略的挑戰。</p><p>博通（Broadcom）此前以 690 億美元（當前約 4926.6 億元人民幣）併購 VMware，之後解僱了 1300 名 VMWare 員工，並將 VMware 雲服務「永久許可證」改為訂閲制度。</p><p><strong>延伸閲讀</strong></p><ul><li><a href="https://www.oschina.net/news/270967/vmware-by-broadcom-business-transformation" target="news">VMware 產品全面改為訂閲制</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</guid>
            <link>https://www.oschina.net/news/273056/broadcom-hands-vmware-partners-termination-notice</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 萬字帶你熟悉靜態分析工具的評估測試]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自華為雲社區《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F418850%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">靜態分析工具的評估測試</a>》，作者： Uncle_Tom。</p><span id="OSC_h1_1"></span><h1>1. 垂直極限</h1><p>還是先説故事。那是 2014 年參加的一個測試驅動（TDD）的培訓，培訓是 TDD 推廣的志願者組織的，在一個咖啡館裏搞的，週末兩天的免費培訓。</p><p>培訓過程中的一張圖和一個視頻讓我至今記憶尤新。</p><span id="OSC_h2_2"></span><h2>1.1. 一張圖</h2><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421009200317830.png" referrerpolicy="no-referrer"></p><p>上面的兩個圖（原來培訓的那個圖找不到了，自己隨手塗鴉了一下）。</p><p>左邊是經過完整的系統的測試的軟件產品，每個節點都通過測試，這樣一層層的搭建起來的系統。看着就堅實可靠。</p><p>右邊的測試則是隨意的，很多地方都缺失了。任何一個風吹草動，一個異常都可能造成整個大廈傾覆。</p><p>不用説大家立刻就可以看懂，那個軟件產品更可靠，更讓人放心。</p><span id="OSC_h2_3"></span><h2>1.2. 一段影像</h2><p>視頻是電影《垂直極限》中開頭的一段。雖然過去 20 多年了，但這部電影仍然被奉做山難電影的經典之作，有興趣的朋友還是可以找來看一看的。</p><p><img alt="Vertical_limit" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703420993405166999.png" referrerpolicy="no-referrer"></p><p>一個風和日麗的日子裏，老爸帶着兒子、女兒在一個高聳、陡峭的山峯上攀巖。他們已經來到了山峯的一半，在他們的上面個還有另一羣攀巖愛好者。</p><p>老爸一邊整理着自己的安全栓（攀巖過程中打在岩石中，然後利用登山繩固定自己的安全扣），一邊對兒子説：「檢查下你妹妹的安全栓。」</p><p>兒子看向下面的妹妹，妹妹説：「告訴他我們已經不是小孩子了。」</p><p>兒子打趣的對老爸説：「爸，她還需要一個安全栓。」</p><p>爸爸看向下面的兄妹兩人説：「萬一出事，那樣可撐不住。安妮，我不管你有多老練，聰明的攀巖者都會做好安全措施，兩個栓才安全，三個更好。在巖壁上再放個安全栓，我們才繼續攀。」</p><p>女兒生氣的對爸爸説：「爸，你別聽哥哥的，他在開玩笑，我放了三個安全栓。」</p><p>電影總是這樣，一段舒緩的節奏後面，總會有段緊張的讓人喘不過氣來的場面。不出意外，意外就會發生。</p><p>話音未落，先是一個登山包從山上面墜落下來，快速的經過三人。上面的菜鳥在登山的過程中揹包意外脫落，幫着的聖山包的登山繩造成一連串的連鎖反應，兩個登山者也不幸地被連帶着墜落下去。老爸、兒子也被着一連串的變故拖累到掛在了半空中，女兒的三個安全栓無法承擔三個人的重量，一個、兩個先後崩飛，只靠着最後的一個安全栓勉強的維持着女兒，以及掛在半空的老爸和兒子。最後在老爸的要求下，兒子不得不割斷了繩索，女兒和兒子看着老爸墜了下去。</p><p>看到這裏，大家都不禁須臾不已，再看看上面的圖，對系統的完整的測試有了更深刻的認識。</p><span id="OSC_h2_4"></span><h2>1.3. 思考</h2><p>在軟件的開發過程中，每一個節點的測試都是在為系統增加一個安全栓。由這樣一層層搭建起來的系統，整個系統才是安全、可靠的。否則任何一個意外都可能將整個系統帶飛。做工具和做單點能力驗證不同，需要更多的測試節點來保障工具的穩定性和可靠性。這個從學院裏出來的大部分朋友還沒有意識到這個問題，加之項目的管理的問題，就會把各種坑坑窪窪帶到生產中，使後期維護陷入無盡的深淵。</p><p>大家都喜歡做 0 到 1 的事情，出彩啊。很少有人願意做為 0 到 1 填坑的基礎工作，但一個工具要生存，能夠贏得最終的勝利，需要無數的這些幕後英雄。就像長津湖戰役一樣，指揮很重要，但更多的是需要後面無數的無名英雄，那些人才是撐起整個勝利的英雄。</p><p>那麼對於靜態分析工具，我們該如何構建一個穩定、可靠的靜態分析工具？如何評價一個靜態分析工具的檢查能力？</p><p>自從程序的誕生，程序分析便緊隨其後，人們視圖通過一個程序來分析編制的程序，保證編製程序運行結果的正確性。儘管後面的萊斯定理給出了這個問題的「不可判定性」，但並不會妨礙程序分析在這方面的卓越表現。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231224/1703421059373679236.png" referrerpolicy="no-referrer"></p><p>儘管現在大模型能夠幫助我們生成程序代碼和對已有程序進行問題檢查，這似乎可以繞過我們一值以來使用的模式匹配的檢查方式，可以簡化模式的提煉，和根據模式再編寫檢查規則。 但如何保障生成代碼的安全性和可靠性，以及如何評估大模型的能力，仍然將是人工智能在今後很長一段時間需要解決的問題。</p><p>通過下面對三組測試用例的分析，希望能夠給靜態分析工具的測試和評估給大家一個指導性的啓發。</p><span id="OSC_h1_5"></span><h1>2. Juliet Java、C/CPP 測試用例集</h1><span id="OSC_h2_6"></span><h2>2.1. 創建背景</h2><p>2005 年美國國家標準與技術研究院 (National Institute of Standards and Technology (NIST))，簡稱 NIST，下屬的軟件質量組，成立了軟件保障指標和工具評估項目（Software Assurance Metrics And Tool Evaluation (SAMATE)），簡稱 SAMATE 項目。項目組的主要目的是通過開發支持軟件工具評估的方法、衡量工具和技術的有效性以及識別工具和方法中的差距來改善軟件保障，主要工作包括定義錯誤類，收集具有已知錯誤的程序語料庫，以及更好地瞭解工具的有效性。</p><p>圍繞這個目標，軟件保障指標和工具評估項目（SAMATE）建立了兩個子項目：</p><ul><li><p>軟件保障參考數據集（Software Assurance Reference Dataset (SARD)），簡稱 SARD，用於收集整理 C、C++、Java、PHP 和 C#針對軟件弱點的測試用例集；</p></li><li><p>軟件工具博覽會（Static Analysis Tool Exposition (SATE)），簡稱 SATE，用於工具製造商對用例進行測試和工具研討。截至 2021 年，已經舉辦了六場 SATE 活動。</p></li></ul><span id="OSC_h2_7"></span><h2>2.2. Juliet 用例集簡介</h2><p>Juliet 測試用例集就是軟件保障參考數據集 (SARD) 下的一個是用於檢測 C/C++ 和 Java 程序已知缺陷的集合。</p><p><strong>2010 年 12 月 1.0 版本。</strong>Juliet 測試用例集最早的 1.0 發佈於 2010 年 12 月，由軟件保障指標和工具評估項目（SAMATE）的開發團隊完成，名字選取了當時軟件保障參考數據集（SARD）的第十個貢獻者：國際無線電（International Radiotelephony）的字母表中的第十個單詞 「Juliet」 而的得名。</p><div><p><strong>2011 年 1.1 - 1.1.1 版本。</strong>Juliet 1.1 版本，是 Juliet 的開發團隊根據多個因素為選定的缺陷創建了測試用例，包括團隊的經驗、缺陷的重要性或嚴重性以及其出現的頻率。測試用例涵蓋了 2011 年 CWE/SAN TOP 25 個最危險的編程錯誤中的 14 個。剩下的 11 個缺陷是設計問題，例如 CWE-862 授權機制缺失，和 CWE-250 帶着不必要的權限執行，這些問題不適合用靜態分析的方式來檢測，所以未包含在測試用例中。</p><p><strong>2012 年 1.2 版本。</strong>2012 年的 Juliet 1.2 版本。基本形成了現在使用版本。是我們現在使用最多的版本，程序分析、自動修復、深度學習的論文基本上都使用了這裏面的用例，用於證明理論、工具的有效性。</p></div><div><p><strong>2017 年 1.3 版本。</strong>只對 1.2 版本的個別錯誤進行了修正。</p><ul><li>Juliet C/C++ 涵蓋 118 個 CWE 問題，1689 個場景，用例數: 181,140, 其中正例：117,041, 反例：64,099。</li><li>Juliet Java 涵蓋 112 個 CWE 問題，933 個場景，用例數: 96,537, 其中正例：67,656, 反例：28,881。</li></ul><strong>2022 年 1.3.1 版本。</strong>增加了 SARIF 的支持，試圖通過 SARIF 精確的給出告警的位置信息，但對數據流的支持的並不好，不能完全依靠現有的 SARIF 版本。 
 <p>注：關於 SARIF 請參考：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F245851" rel="nofollow" target="_blank">DevSecOps 工具與平台交互的橋樑 – SARIF 入門</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F254864" rel="nofollow" target="_blank">DevSecOps 工具與平台交互的橋樑 – SARIF 進階</a></li></ul><span id="OSC_h2_8"></span><h2>2.3. Juliet 用例構造的特點</h2><span id="OSC_h3_9"></span><h3>2.3.1. 統一明確的命名方式</h3><p>測試用例使用 CWE 作為命名和組織的基礎。測試用例力求對目標缺陷使用最具體的 CWE 條目。每個測試用例文件與一個 CWE 條目相關聯。</p><span id="OSC_h4_10"></span><h4>2.3.1.1. 測試用例文件名命名規範</h4><p>測試用例名由四個元素的組合唯一標識：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>組成部分</th><th>描述</th><th>是否強制</th></tr></tbody><tbody><tr><td>CWE</td><td>字符</td><td>是</td></tr><tr><td>CWE ID</td><td>CWE 的編號</td><td>是</td></tr><tr><td>_</td><td>分隔，下劃線</td><td>是</td></tr><tr><td>CWE 短描述</td><td>CWE 英文名稱的縮短版本，單詞之間用下劃線"_"連接</td><td>是</td></tr><tr><td>__</td><td>分隔，兩個下劃線"_"</td><td>是</td></tr><tr><td>問題場景</td><td>表示用例場景。場景描述單詞之間用下劃線"_"連接</td><td>是</td></tr><tr><td>_</td><td>分隔，下劃線，問題場景和案例編號之間進行連接</td><td>是</td></tr><tr><td>案例編號</td><td>基礎案例編號採用「01」</td><td>是</td></tr><tr><td>一個案例多文件定義</td><td>對同一個案例，如使用多個文件，可採用 a，b 等進行區別，或採用下劃線加不同的作用定義，例如_good 或_bad，表示正例或反例</td><td>否</td></tr></tbody></table><p>例如：</p><p>單文件用例：</p><strong>CWE190_Integer_Overflow__byte_console_readLine_add_01.java</strong><ul><li>CWE190： CWE 的編號，可以在 CWE 網站上查詢到這個編號對應的問題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的簡寫，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 場景描述：通過 readLine 函數從控制界面讀取字節流；</li><li>01：代表基礎用例。</li></ul><p><strong>多文件用例, 下面的一組文件構成了一個用例：</strong></p><ul><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_bad.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_base.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodB2G.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81_goodG2B.java</li><li>CWE190_Integer_Overflow__byte_console_readLine_add_81a.java 
   <ul><li>CWE190： CWE 的編號，可以在 CWE 網站上查詢到這個編號對應的問題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwe.mitre.org%2Fdata%2Fdefinitions%2F190.html%3B" rel="nofollow" target="_blank">https://cwe.mitre.org/data/definitions/190.html;</a></li><li>Integer_Overflow：CWE190 描述的簡寫，整型溢出。CWE190 的完整描述是：整型溢出或越界折返;</li><li>byte_console_readLine_add： 場景描述：通過 readLine 函數從控制界面讀取字節流；</li><li>81: 數據流案例，案例將參數傳遞給通過引用調用的抽象方法；</li><li>_bad: 表示這是個反例的文件；</li><li>_base: 表示這個是用例的主文件；</li><li>_goodB2G: good 表示這是個正例的文件，同時 B2G 表示污點（Bad）會經過清洗到達（2(to)）爆發點，但由於做了清洗，變成了無污染的，不會引起問題（Good）;</li><li>_goodG2B: good 表示這是個正例的文件，同時 G2B 表示污點經過清洗變成無污染（Good）到達（2(to)）爆發點（Bad），但由於是無污染的數據，也不會引起問題;</li><li>a: 表示這是個輔助文件。</li></ul></li></ul><span id="OSC_h4_11"></span><h4>2.3.1.2. 測試用例函數名命名規範</h4><p>有問題（反例）函數，通常以 bad 命名, 並可使用正則表達式匹配：<code>^bad$</code>;</p><p>沒問題（正例）的函數，通常以 good 命名, 並可使用正則表達式匹配：<code>^good$</code>;</p> 對於用例中存在多個正例的函數，有以下三種命名方式，可使用正則表達式匹配： 
 <code>^good(\d+|G2B\d*|B2G\d*)$</code>; 
 <ul><li>默認或通用的方式，採用例如： good1（）、good2（）、good3（）的命名方式；</li><li>當一個好的源將安全數據傳遞到一個潛在的壞接收器時，採用例如：goodG2B（）、goodG2B1（）、goodG2B2（）、goodG2B3（） 的方式命名;</li><li>當不良源將不安全或潛在不安全的數據傳遞給良好源時，採用例如：goodB2G（）、goodB2G1（）、goodB2G2（）、goodB2G3（）的方式命名；</li></ul><ul><li>對於數據流用例還遵守以下命名方式：有問題的污染源，採用正則表達式：<code>^badSource$；</code>有問題的爆發點，採用正則表達式：<code>^badSink$；</code>無問題的污染源，採用正則表達式：<code>^good(G2B\d*|B2G\d*)?Source$；</code>無問題的爆發點，採用正則表達式：<code>^good(G2B\d*|B2G\d*)?Sink$</code>。</li></ul><span id="OSC_h4_12"></span><h4>2.3.1.3. 命名規則在測試中帶來的好處</h4><p>從文件名就能判斷出檢測問題、場景、適用的案例類型，有的還可以知道文件是正例、還是反例；</p><p>從發生問題的函數名就可以知道，所處的函數是正例，還是反例；</p><p>通常檢測工具都會給出問題所在的文件和函數，這樣在查看問題的時候能夠立刻判斷出檢測結果的有效性；</p> 嚴格的命名方式，也便於使用程序自動化的檢查結果做出快速的判斷。 
 <span id="OSC_h3_13"></span><h3>2.3.2. 每個問題給出發生問題的可能場景</h3><p>Juliet 還為每個問題（CWE）枚舉了一些發生場景，一些場景還使用模板結合控制流和數據流進行了枚舉，從而測試更加廣泛的問題發生的可能性，以提高問題的覆蓋率。</p><p>Juliet 一共採用了三類模板：</p><ul><li>控制流模板（point-flaw）</li><li>單一污點源和爆發點模板（source-sink）；</li><li>多污點源和爆發點模板（sources-sinks);</li></ul><p>Juliet Java</p><ul><li>Juliet Java 一共 122 個 CWE, 覆蓋 933 個場景。</li><li>用模板生成的場景 823 個，這包括：point-flaw： 92 個場景；sources-sink： 197 個場景；sources-sinks： 534 個場景;</li></ul><ul><li>單一場景 110 個。</li></ul><p>Juliet C/C++</p><ul><li>Juliet C/C++ 一共 118 個 CWE, 覆蓋 1689 個場景。</li><li>用模板生成的場景 1509 個，這包括：</li></ul><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>Template</th><th>C</th><th>CPP</th><th>Total</th></tr></tbody><tbody><tr><td>point-flaw</td><td>259</td><td>18</td><td>277</td></tr><tr><td>sources-sink</td><td>499</td><td>233</td><td>723</td></tr><tr><td>sources-sinks</td><td>357</td><td>152</td><td>509</td></tr><tr><td>Total</td><td>1106</td><td>403</td><td>1509</td></tr></tbody></table></div><div><p>而單一場景 180 個。</p><span id="OSC_h3_14"></span><h3>2.3.3. 每個場景使用不同的案例進行覆蓋</h3><p>Juliet 用例還真對每個場景結合控制流和數據流進行了枚舉，以達到每個場景在不同代碼條件下的檢測能力的覆蓋。</p><p>從下表我們看到類型基本上涵蓋了編程語言通常所需要的基本語法，例如條件判斷（if），條件分支（swith），循環（while，for），函數間和程序間不同層數的調用，以及不同類型的參數傳遞方式。</p><p>案例類型明細</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>案列編號</th><th>案例類型（流類型）</th><th>類型描述</th><th>C</th><th>CPP</th><th>JAVA</th></tr></tbody><tbody><tr><td>01</td><td>無</td><td>基線——最簡單的缺陷形式</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>02</td><td>控制流</td><td>if(true) 和 if(false)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>03</td><td>控制流</td><td>if(5==5) 和 if(5!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>04</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_TRUE) 和 if(PRIVATE_STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>05</td><td>控制流</td><td>if(privateTrue) 和 if(privateFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>06</td><td>控制流</td><td>if(PRIVATE_STATIC_FINAL_FIVE==5) 和 if(PRIVATE_STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>07</td><td>控制流</td><td>if(privateFive==5) 和 if(privateFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>08</td><td>控制流</td><td>if(privateReturnsTrue()) 和 if(privateReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>09</td><td>控制流</td><td>if(IO.STATIC_FINAL_TRUE) 和 if(IO.STATIC_FINAL_FALSE)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>10</td><td>控制流</td><td>if(IO.staticTrue) 和 if(IO.staticFalse)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>11</td><td>控制流</td><td>if(IO.staticReturnsTrue()) 和 if(IO.staticReturnsFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>12</td><td>控制流</td><td>if(IO.staticReturnsTrueOrFalse())</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>13</td><td>控制流</td><td>if(IO.STATIC_FINAL_FIVE==5) 和 if(IO.STATIC_FINAL_FIVE!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>14</td><td>控制流</td><td>if(IO.staticFive==5) 和 if(IO.staticFive!=5)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>15</td><td>控制流</td><td>switch(6) and switch(7)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>16</td><td>控制流</td><td>while(true)</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>17</td><td>控制流</td><td>for 循環</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>18</td><td>控制流</td><td>goto 語句</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>21</td><td>控制流</td><td>流由私有變量的值控制。所有方法都包含在一個文件中。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>22</td><td>控制流</td><td>流由公共靜態變量的值控制。source 和 sink 在兩個不同的文件裏。</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>31</td><td>數據流</td><td>在同一方法中使用數據副本流動</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>32</td><td>數據流</td><td>在同一個函數中使用兩個指向同一個值的指針的數據流</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>33</td><td>數據流</td><td>在同一函數中使用對數據的 C++ 引用</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>34</td><td>數據流</td><td>使用包含兩個訪問相同數據的方法的聯合（在同一函數內）</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>41</td><td>數據流</td><td>作為參數從一個方法傳遞到同一類中的另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>42</td><td>數據流</td><td>在同一類中從一個方法返回到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>43</td><td>數據流</td><td>數據使用 C++ 引用從同一源文件中的一個函數流向另一個函數</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>44</td><td>數據流</td><td>數據作為參數從一個函數傳遞到通過函數指針調用的同一源文件中的函數</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>45</td><td>數據流</td><td>作為私有類成員變量從一個方法傳遞到同一類中的另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>51</td><td>數據流</td><td>在同一個包的不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>52</td><td>數據流</td><td>在同一個包的三個不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>53</td><td>數據流</td><td>在同一個包的四個不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>54</td><td>數據流</td><td>在同一個包的五個不同類中作為參數從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>61</td><td>數據流</td><td>在同一個包的不同類中通過一個方法的返回值傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>62</td><td>數據流</td><td>使用 C++ 引用從不同源文件中的一個函數到另一個函數的數據流</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>63</td><td>數據流</td><td>指向不同源文件中從一個函數傳遞到另一個函數的數據的指針</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>64</td><td>數據流</td><td>void 指向不同源文件中從一個函數傳遞到另一個函數的數據的指針</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>65</td><td>數據流</td><td>數據作為參數從一個函數傳遞到通過函數指針調用的不同源文件中的函數</td><td>Y</td><td>Y</td><td>N</td></tr><tr><td>66</td><td>數據流</td><td>在同一個包中的不同類中通過數組從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>67</td><td>數據流</td><td>在同一個包中的不同類中通過類從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>68</td><td>數據流</td><td>在同一個包中的不同類中通過類的成員變量從一個方法傳遞到另一個方法</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>71</td><td>數據流</td><td>在同一個包中的不同類中通過類的引用從一個方法傳遞到另一個方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>72</td><td>數據流</td><td>在同一個包中的不同類中將向量從一個方法傳遞到另一個方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>73</td><td>數據流</td><td>在同一個包中的不同類中將 LinkedList 從一個方法傳遞到另一個方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>74</td><td>數據流</td><td>在同一個包中的不同類中將 HashMap 從一個方法傳遞到另一個方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>75</td><td>數據流</td><td>將序列化對象從一個方法傳遞到同一包中不同類中的另一個方法</td><td>N</td><td>N</td><td>Y</td></tr><tr><td>81</td><td>數據流</td><td>將參數傳遞給通過引用調用的抽象方法</td><td>N</td><td>Y</td><td>Y</td></tr><tr><td>82</td><td>數據流</td><td>將參數傳遞給通過指針調用的虛函數的數據</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>83</td><td>數據流</td><td>通過在堆棧上聲明類對象將數據傳遞給類構造函數和析構函數</td><td>N</td><td>Y</td><td>N</td></tr><tr><td>84</td><td>數據流</td><td>通過在堆上聲明類對象並在使用後將其刪除來傳遞給類構造函數和析構函數的數據</td><td>N</td><td>Y</td><td>N</td></tr></tbody></table><span id="OSC_h3_15"></span><h3>2.3.4. 缺點</h3><p>Juliet 可以説是堪稱完美的測試用例集，但隨着時間的推移，編程語言的迭代，它也顯現出一些缺點：</p><ul><li>一些用例的寫法開始變得老舊，可能不能勝任新的場景；</li><li>沒有對語言的所有語法特點做覆蓋，特別是新的一些語法類型；比如：lamda 表達式；</li><li>用例的設計存在大量的重疊，特別是對數據流的檢測，每個場景都使用了相同的模板，產生了大量的用例。其實對於數據流的處理，完全可以分成：污染源、污染傳遞、污染清理、以及爆發四個不同的維度進行分別測試，這樣可以大大提升測試效率。</li></ul><span id="OSC_h1_16"></span><h1>3. OwaspBenchmark 測試用例集</h1><span id="OSC_h2_17"></span><h2>3.1. 用例背景</h2><p>OWASP(Open Worldwide Application Security Project (OWASP)) 基金會致力於通過其社區主導的開源軟件項目、全球數百個分會、數萬名成員以及舉辦當地和全球會議來提高軟件的安全性。</p><span id="OSC_h2_18"></span><h2>3.2. 用例簡介</h2><p>OWASP Benchmark Project 是一個 Java 測試套件，旨在評估自動化軟件漏洞檢測工具的準確性、覆蓋率和速度。</p><ul><li>1.0 版本於 2015 年 4 月 15 日發佈，共有 20983 個測試用例。</li><li>1.1 版本於 2015 年 5 月 23 日發佈。1.1 版本在前一版本的基礎上進行了改進，確保每個漏洞區域都有真陽性和假陽性。</li><li>1.2 版本於 2016 年 6 月 5 日首次發佈（1.2 測試版於 2015 年 8 月 15 日發佈）。自那以後，v1.2 版本一直在不斷調整。1.2 版本將測試用例數量控制在小於 3000 個測試用例，以便快速得到測試結果。</li></ul><span id="OSC_h2_19"></span><h2>3.3. 用例設計和組成方式</h2><p>下面以 1.2 版本為例進行説明。</p><span id="OSC_h3_20"></span><h3>3.3.1. 用例問題的覆蓋</h3><p>從下面這個表可以看出 Benchmark 更多的注重覆蓋 Web 類的問題的檢查，同時重點覆蓋了 OWASP TOP 10 中的主要能夠通過靜態檢查工具檢查的問題。關於 OWASP TOP 10 可以參考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F312926" rel="nofollow" target="_blank">CWE 4.6 和 OWASP TOP10(2021)</a>。</p><p>Benchmark 用例集主要以加密問題，以及注入類問題為主，這也巧合的與靜態檢查技術相互匹配。加密問題多用抽象語法樹（AST）的遍歷來返現加密函數，並對其做出判斷。而注入類問題多用數據流的污點分析技術來追蹤外部輸入是否會對爆發點形成可達的路徑。有關污點分析技術，可以參考:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F330804" rel="nofollow" target="_blank">使用污點分析檢查 log4j 問題</a>。</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><th>檢測問題</th><th>CWE TOP 25（2023）</th><th>OWASP TOP 10（2021）</th><th>正確用例</th><th>錯誤用例</th><th>用例總數</th></tr></tbody><tbody><tr><td>CWE-22 對路徑名的限制不恰當 (路徑遍歷)</td><td>8</td><td>A01：2021-中斷訪問控制</td><td>135</td><td>133</td><td>268</td></tr><tr><td>CWE-327 使用已被攻破或存在風險的密碼學算法</td><td>-</td><td>A02：2021-加密故障</td><td>116</td><td>130</td><td>246</td></tr><tr><td>CWE-328 可逆的單向哈希</td><td>-</td><td>A02：2021-加密故障</td><td>107</td><td>129</td><td>236</td></tr><tr><td>CWE-330 使用不充分的隨機數</td><td>-</td><td>A02：2021-加密故障</td><td>275</td><td>218</td><td>493</td></tr><tr><td>CWE-501 違背信任邊界</td><td>-</td><td>A04：2021-不安全的設計</td><td>43</td><td>83</td><td>126</td></tr><tr><td>CWE-614 HTTPS 會話中未設置’Secure’屬性的敏感 Cookie</td><td>-</td><td>A02：2021-加密故障</td><td>31</td><td>36</td><td>67</td></tr><tr><td>CWE-643 XPath 表達式中數據轉義處理不恰當 (XPath 注入)</td><td>-</td><td>A03：2021-注入</td><td>20</td><td>15</td><td>35</td></tr><tr><td>CWE-78 OS 命令中使用的特殊元素轉義處理不恰當 (OS 命令注入)</td><td>5</td><td>A03：2021-注入</td><td>125</td><td>126</td><td>251</td></tr><tr><td>CWE-79 在 Web 頁面生成時對輸入的轉義處理不恰當 (跨站腳本)</td><td>2</td><td>A03：2021-注入</td><td>209</td><td>246</td><td>455</td></tr><tr><td>CWE-89 SQL 命令中使用的特殊元素轉義處理不恰當 (SQL 注入)</td><td>3</td><td>A03：2021-注入</td><td>232</td><td>272</td><td>504</td></tr><tr><td>CWE-90 LDAP 查詢中使用的特殊元素轉義處理不恰當 (LDAP 注入)</td><td>-</td><td>A03：2021-注入</td><td>32</td><td>27</td><td>59</td></tr></tbody></table><span id="OSC_h3_21"></span><h3>3.3.2. 問題場景的覆蓋</h3><p>Benchmark 用例對每個問題採用: 場景枚舉 + 組合的方式完成用例的設計，並通過此方法形成問題的覆蓋。</p><p>這裏以我們熟悉的：CWE89 SQL 注入問題來説明這種用例的設計方式。用例集中 CWE 89 SQL 注入問題一共有 232 個正例，272 個反例，共計 504 個用例。</p><p>因為 SQL 是注入是通過外部不可信數據，傳播到 SQL 腳本執行的位置而導致的安全問題。這個外部數據傳播的過程可以分為：</p><ul><li>接收數據</li></ul><p>用例使用了我們常用的從 http 請求中得到外部數據，然後將數據以不同方法存入不同類型的字段。用例中列舉了下面 9 種不同的方法。例如放入：字符串、枚舉、數組等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604543686840668.png" referrerpolicy="no-referrer"></p><ul><li>數據傳遞</li></ul><p>用例接收到數據後，使用不同的傳遞方式，向程序內傳遞，並對信息採用不同的操作方式進行加工。用例中列舉了下面 10 種不同的方法。例如：通過，創建一個新類然後調用函數傳遞、if 條件表達式、內部類等。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604561629143041.png" referrerpolicy="no-referrer"></p><ul><li>問題爆發</li></ul><p>最終數據會拼裝成 SQL 語句，並通過不同的調用方式執行。用例中列舉了 3 類，28 種不同的執行方式。</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604573373250631.png" referrerpolicy="no-referrer"></p><ul><li>場景組合</li></ul><p>得到上面三種基本節點後，通過組合的方式形成用例。下表列舉了 CWE89 SQL 注入 272 個反例組合的場景：</p><p><img alt="" src="https://bbs-img.huaweicloud.com/blogs/img/20231226/1703604585829917726.png" referrerpolicy="no-referrer"></p><span id="OSC_h3_22"></span><h3>3.3.3. OwaspBenchmark 用例集的缺點</h3><p>OwaspBenchmark 應為涵蓋了 Web 應用的主要安全問題，使用例集基本上成為了 Web 應用安全測試的基本用例集。但它也存在一些缺點。</p><ul><li>用例名只採用了簡單的編號方式，從用例看不出測試目標：用例反應的問題、場景、正例、反例這些基本信息，而不得不給每個用例加了一個 xml 文件來説明這些用例的基礎信息。</li><li>用例缺少場景的描述，工具測試後，無法得到覆蓋場景和非覆蓋場景的統計信息，只知道覆蓋率。具體哪些場景缺失，要一個個用例去自己分析。</li><li>缺少檢測語言語法級別的場景的覆蓋，例如 lamda 表達式，工具在數據流的分析過程中，任何一個語法的不適配都會導致分析中斷。</li></ul><span id="OSC_h1_23"></span><h1>4. Alipay 測試用例集</h1><span id="OSC_h2_24"></span><h2>4.1. 用例背景</h2><p>針對 xAST 領域缺乏有效衡量技術能力標準的業界痛點，螞蟻安全團隊聯合螞蟻程序分析團隊、浙江大學網絡空間安全學院的 20 餘位專家學者，共同設計了 xAST 評價體系及其測試樣本套件 Benchmark，致力於成為應用安全測試工具的「度量衡」。</p><ul><li><p>目標：打造具備行業共識的 xAST 能力評價體系技術標準</p></li><li><p>價值：衡量 xAST 產品技術能力，指引 xAST 技術發展方向，輔助企業產品選型</p></li></ul><span id="OSC_h2_25"></span><h2>4.2. 用例設計和組成方式</h2><p>用例設計的核心思想是：分層設計，降低評價複雜度。</p><p>從底層到上層分成引擎能力、規則能力和產品化能力這三層。對這三層分別設計評價體系和測試樣本，既降低了每一層評價的複雜度，又使測試結果可以直接反映問題出在哪一層。</p><p>看的出，用例集的設計者試圖希望結合 Juliet、Owaspbenchmark 的優點，在形成一種分層的評估測試方式。來完善前面兩個用例集在語法層面的不足。</p><p>目前用例集只推出了一個雛形，還在建設中。</p><span id="OSC_h1_26"></span><h1>5. 理想的測試用例集</h1><p>最後再來總結下，理想的測試用例集應該是怎樣的。</p><ul><li>能夠從用例的命名上，清楚的反映：測試問題、場景、正例、反例；或從目標函數上明確知道在這個函數內的告警是正確的告警，還是誤報；</li><li>能夠覆蓋業界主要的安全問題，例如：CWE TOP 25、OWASP TOP 10 等常見的問題；</li><li>能夠覆蓋檢測語言的主要語法和語言的主要使用方式；</li><li>能夠有一定的場景枚舉和組合，以增加測試用例的複雜度，這有點類似 fuzzy 測試了。</li></ul><p>寫在最後，測試用例集的結果，只能反映一個工具的基礎能力，並不能取代通過實際的工程來打磨檢查工具。</p><p>一般的程序員只需要在問題和實現上建立一條通道就好，但程序分析的程序員卻需要考慮各種程序員實現問題的可能性。</p><span id="OSC_h1_27"></span><h1>6. 參考</h1><ul><li>SAMATE:<span>&nbsp;</span>https://www.nist.gov/itl/ssd/software-quality-group/samate</li><li>SARD:<span>&nbsp;</span>https://samate.nist.gov/SARD/</li><li>Juliet C/CPP 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/112</li><li>Juliet Java 1.3:<span>&nbsp;</span>https://samate.nist.gov/SARD/test-suites/111</li><li>owasp benchmark:<span>&nbsp;</span>https://owasp.org/www-project-benchmark/</li><li>Alipay sast:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falipay%2Fant-application-security-testing-benchmark" rel="nofollow" target="_blank">https://github.com/alipay/ant-application-security-testing-benchmark</a></li></ul><p>&nbsp;</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>點擊關注，第一時間瞭解華為雲新鮮技術~</strong></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 28 Dec 2023 02:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10433132</guid>
            <link>https://my.oschina.net/u/4526289/blog/10433132</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鴻禕：鴻蒙原生必將成功]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>360 集團創始人、董事長周鴻禕今日在微博宣佈，360 瀏覽器等應用完成了鴻蒙原生核心版本的開發。並表示，未來還會把全線產品轉移到鴻蒙生態裏。</p><blockquote><p><span style="color:#333333">我在直播裏很多次旗幟鮮明地表態，任何情況下都會支持華為，不能只停留在口號。今天我們正式宣佈 360 瀏覽器等應用完成了鴻蒙原生核心版本的開發，未來我們還會把全線產品轉移到鴻蒙生態裏。我相信鴻蒙會成為中國最大的操作系統，鴻蒙原生必將成功。</span></p></blockquote><p><img height="391" src="https://oscimg.oschina.net/oscnet/up-f5c3b4b96af20fc9564ad022c5e8336ee24.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 09:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272979</guid>
            <link>https://www.oschina.net/news/272979</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RISC-V 新成果！openKylin 社區完成對 RV64G 架構支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 社區繼與深度數智聯合發佈默認搭載 openKylin 1.0 操作系統的全球首款 RISC-V 筆記本電腦 DC-ROMA 後，近日，聯合蘇州睿芯公司，</span><strong><span style="color:#000000">openKylin 平台正式部署上線對 RV64G 架構支持</span></strong><span style="color:#000000">，後續 RV64G 非壓縮指令集愛好者可以通過社區平台開發編譯並部署自己的代碼。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-d435b9748188f6ead24dab10652e7b259f4.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RISC-V 是一個自由的指令集，硬件廠商可以基於國際基金會認可的標準，自主擴展，目前市場上很多廠商是基於 RV64GC 來生產產品，但是也有廠商基於 RV64G 來生產產品，為配合國內廠商的市場需求，openKylin 社區率先推出對 RV64G 架構支持。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">一、RV64G 架構簡介</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">相比較於目前在嵌入式小型設備上應用更廣泛的 RV64GC（即大家比較熟悉的 riscv64）, RV64G 更加聚焦於通用計算場景功能，服務器或者桌面系統。其中：</span></span></p><ul><li><span><span style="color:#000000">「RV」代表 RISC-V；</span></span></li></ul><ul><li><span><span style="color:#000000">「64」代表所支持的指令是 64 位的（實際上，交叉編譯器在生成代碼時可能會採用 32 位指令減小生成的目標代碼長度），地址長度和寄存器長度都為 64 位；</span></span></li><li><span><span style="color:#000000">「G」代表通用（General）計算平台。實際上，「G」等效於「IMAFD」，其中「I」代表整數（Integer）計算指令、整數 load、整數 store 以及控制流（如分支跳轉）指令，這些指令在任何 RISC-V 的實現中都是必須的；「M」代表乘法（Multiply），即平台支持乘法和除法運算；「A」代表原子（Atomic）擴展，支持對寄存器進行的原子讀、修改和原子寫操作，這些操作在多核設計中非常有用；「F」代表單精度浮點（Float）運算支持，「D」代表雙精度浮點（Double）運算支持。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RV64G 和 RV64GC 之間的主要區別在於是否包含壓縮指令集（C 指令集）。RV64GC 在 RV64G 的基礎上增加了 C 指令集，這些指令用於縮小指令長度，降低代碼佔用空間，RV64G 則不包含這些壓縮指令，因此 RV64G 的應用程序可以在 RV64GC 的硬件上運行，反之則不行。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">比較而言，RV64GC 比 RV64G 具有更高的代碼密度，程序具有更小的 footprint，可以更有效地利用內存空間，這些特點讓 RV64GC 指令在嵌入式應用中更有優勢；另一方面，RV64G 的硬件實現可能比 RV64GC 更簡單，可採用簡化指令譯碼邏輯，更容易預測指令預取模式，減少內存訪問次數、提高指令執行速度，降低功耗，設計人員可以更好的對高性能計算進行優化。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">二、開發過程</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">1.基礎工具鏈改造編譯驗證。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">第一階段，對基礎編譯工具進行適配，包括 gcc，glibc，binutils 源碼包的修改編譯，技術攻關，以適配 RV64G 新架構。運行新編譯的 gcc 版本，檢查相關輸出參數，確認為-- -with-arch=rv64imafd 表示修改成功。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">2.stage0/ bootstroop 階段相關包的編譯。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">基於第一階段完成的基礎編譯工具鏈，開始 bootstroo 階段相關包的編譯工作。包括 apt，dpkg，llvm，python3，perl，cmake，make，openmpi，netplan.io，openssl，meson 等軟件包的編譯工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">3.初期上層應用包編譯工作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">完成前兩步中的軟件包編譯工作後，需要進一步擴展軟件包的數量。在本地編譯環境下通過腳本逐層編譯更多上層應用包。同時驗證使用 RV64GC 相關依賴包與現有 RV64G 包混合編譯沒有問題。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">4.Choort 平台編譯環境調試製作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">使用目前已重新編譯的 RV64G 架構新軟件包，來構建 OKBS 平台的 chroot 基礎環境，調試過程碰到架構符號相關的較多問題，需要多次重構測試，過程中不斷嘗試修改 chroot 的系統文件。直到可以正常編譯出 rv64g.deb 格式的二進制文件。製作完成的 chroot 地址為：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#0052ff">http://api.build.openkylin.top/devel/openkylin/yangtze/rv64g</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">5.平台架構新增部署，與編譯機搭建。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">為了與現有 RV64GC 架構做區分，在 OKBS 系統上增加 RV64G 架構相關配置數據。利用之前基於新架構編譯完成的軟件包，新增創建 source.list 源，作為編譯環境的依賴源。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">6.初期編譯環境調試。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">上線初期，解決新架構 chroot 與 OKBS 系統融合，編譯依賴源 RV64G 架構修改等問題。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">三、RV64G 架構支持優勢</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">1.</span><strong><span style="color:#000000">支持 RV64G 架構的代碼同源編譯</span></strong><span style="color:#000000">，即</span><strong><span style="color:#000000">代碼一次提交</span></strong><span style="color:#000000">。可在 OKBS 平台同源編譯出 AMD64、I386、ARM64、RV64GC、RV64G 五個架構的二進制包，無需再單獨維護一套 RV64G 軟件源及代碼倉庫，提升 RV64G 架構代碼開發維護效率。</span></span></p><div><p style="text-align:center"><img height="343" src="https://oscimg.oschina.net/oscnet/up-e3b0d0deee341c3cf2c9b95667d25b56b29.png" width="921" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">2.</span><strong><span style="color:#000000">支持 RV64G 架構軟件倉庫的同源發佈</span></strong><span style="color:#000000">，有效提升 RV64G 架構軟件倉庫的管理和維護升級效率。</span></span></p><div><p style="text-align:center"><img alt="" height="521" src="https://oscimg.oschina.net/oscnet/up-c9f3cf8283f562f55599cdc9ece977b4ecb.png" width="1358" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="224" src="https://oscimg.oschina.net/oscnet/up-989b966311f60b0bceab547c82705c8fde3.png" width="640" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">3.</span><strong><span style="color:#000000">鏡像製作與版本發佈統一規範化</span></strong><span style="color:#000000">。在鏡像製作與版本發佈管理上可與其他架構以同流程處理，統一 RV64G 架構版本構建規範。</span></span></p><div><p style="text-align:center"><img alt="" height="418" src="https://oscimg.oschina.net/oscnet/up-ff54131837683f63c926c6bcabafa8a63cd.png" width="652" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">4.</span><strong><span style="color:#000000">解決與 RV64GC 架構名稱衝突的問題</span></strong><span style="color:#000000">，至此可以兼容 RISCV-V 規範的兩種指令集架構的編譯工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">5.</span><strong><span style="color:#000000">編譯機可同時支持 RV64GC 和 RV64G 兩種架構</span></strong><span style="color:#000000">，有效提升編譯機資源利用率。</span></span></p><div><p style="text-align:center"><img height="484" src="https://oscimg.oschina.net/oscnet/up-78f5b565841630b75a362cc5f5ff57d9363.png" width="909" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="408" src="https://oscimg.oschina.net/oscnet/up-28aee798583cba92a8d59b14df44d4e814c.png" width="360" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">後續蘇州睿芯公司將繼續攜手 openKylin 社區，成立 RV64G SIG 組，加大資源投入，解決軟件包編譯過程中遇到的問題，並完成該架構鏡像製作、硬件適配、軟件源管理和生態需求軟件自主構建等，進一步集成基於 RV64G 架構的桌面與服務器整機系統。歡迎感興趣的小夥伴加入我們，攜手共創！</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272960</guid>
            <link>https://www.oschina.net/news/272960</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一個公司到底需要幾個 DBA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>前段時間某家公司透露自家有 1000 人的 DBA 團隊，一時成為了數據庫圈內討論的焦點。昨天又讀到「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDIxNDg5Mg%3D%3D%26mid%3D2247486204%26idx%3D1%26sn%3D179fbefbee62f538f07dfcbc81fe9585%26scene%3D21%23wechat_redirect" target="_blank">DBA 團隊的規模應該是什麼樣的配置</a>」。正好到年底了，不少公司也要做新年的預算，其中就包括 HC 的規劃。所以也分享一點想法。</p><p>先明確這裏講的 DBA 指的是專職負責數據庫管理的人員，不算還身兼其他職責的人員，也不包括數據庫內核開發人員。</p><p>首先 1000 人的 DBA 團隊肯定是言過其實的，這也是當初新聞公佈後，引起大家討論的原因。在我們所居住的藍色星球上，應該還不存在 1000 人規模的 DBA 天團。那麼正常一個公司該養幾個 DBA 比較合適呢？下面就按照公司的發展階段進行闡述。</p><h2>&lt; 30 人 - 不需要 DBA</h2><p>公司研發人數在 30 人以下規模時是不需要 DBA 的，通常這個階段的職責由團隊裏的後端工程師，DevOps / 平台工程師或者技術負責人來兼職。這個階段建議無腦選擇雲數據庫託管服務，因為自帶開箱即用的運維，監控，備份。至於數據庫的日常變更，可以引入工具，也可以選擇不引入。如果不引入的話，由技術負責人通過設計評審，代碼審核等方式也能應付。</p><h2>30 人 ～ 50 人 - 第一個 DBA 和工具</h2><p>數據庫相關工作的併發加大，兼職已經很難應付。同時因為業務開始有起色，所以需要為更長期的數據治理做鋪墊。所以這個階段公司就需要考慮引入專門的 DBA 來負責數據庫相關事宜，隨着引入第一個 DBA，也要同時考慮引入相關的數據庫工具，其中最核心的就是涉及研發流程的數據庫變更審核工具。至於究竟在哪個節點引入，一個是看之前兼職同學處理 DBA 事務的佔比，50% 是一個零界點。另一個是看整個技術團隊高優先級工作項裏， 是否超過 50% 都是數據庫相關。當然還有一個指標，就是故障數，如果已經連續兩個月發生過影響業務的數據庫故障，那引入 DBA 就是迫在眉睫了。</p><p>再説一下引入的第一個 DBA 的定位。通常在這個階段，公司還很難吸引到比較優秀的 DBA，也沒有必要。第一個 DBA 不需要構建體系，只要建立起機制。機制分兩部分，一部分是數據庫運維的常態化，比如優化監控，巡檢以及備份。另一部分則是規範數據庫訪問和變更上線的流程。這兩件事情都需要依託工具來落地。前者通常是圍繞雲平台提供的能力，通過配置或者少量的二開來實現；後者則基本完全依賴於引入工具，業內比較流行的 Archery, Yearning 便是出自 DBA 之手，解決這塊的問題。Bytebase 同樣也是由兼具研發和 DBA 背景的團隊打造的開源產品。</p><p>這個階段，也需要研發負責人在一旁做策應。因為引入 DBA 和工具，會限制研發的自由度，而 DBA 和研發的訴求點並不一致，DBA 又是新加入的成員。這個時候需要研發負責人從中斡旋，避免雙方牴觸，產生部門牆。説到底，在這個階段，仍然是業務絕對優先，所以如果研發以業務優先為理由不願意配合，DBA 建立的流程工具都能被繞過。</p><p>另一方面研發負責人也要着力培養 DBA 去熟悉業務，幫助他能跟隨公司成長到下一階段。</p><h2>100 人 - 第二個 DBA</h2><p>通常在研發規模達到百人左右時，就必須引入第二個 DBA。這裏最重要的是能有一個互備。至於引入的 DBA 定位，如果第一個 DBA 成長起來的話，那第二個 DBA 可以是相對初級的，老人帶新人。但如果第一個 DBA 沒有跟上公司的成長，那麼這時就需要引入一個相對資深的 DBA。這個階段要開始構建體系，首先要審視當前使用的數據庫種類，之前業務發展，可能對於數據庫選型並沒有做約束，現在就到了決策數據庫選型的時候，儘可能統一。另外也要審視使用的數據庫工具鏈，是否需要進行替換。關健就是這兩件事情，選對數據庫，選對工具。這也是為什麼需要一個更資深的 DBA，所謂觀千劍而識器。如果是一個相對經驗不足的 DBA，在強勢的業務研發面前，很難據理力爭。這個階段之後，無論是要換數據庫還是相關工具，那都是浩大的工程，絕對比找一個有經驗的 DBA 代價要大。</p><p>研發負責人在這個階段算是基本退出了數據庫日常工作，交由這組 DBA 二人轉了。</p><h2>&gt; 200 人 - DBA 團隊</h2><p>極限操作的話，公司也可以維持 2 個 DBA 的配置很長時間。國內上市公司，千人研發團隊，2 個 DBA 配置也不是個例。但 DBA 人數還是和風險掛鈎的，這裏還是建議按照人員配比，儘量 DBA : 研發的配比不要低於 1:200。業務上了規模後，一個 DBA 但凡一年能幫助公司規避掉一次故障，就能收回人力成本。</p><p>另一方面，到這個階段勢必會出現一系列定製化需求，標準工具往往無法全部滿足，所以這個時候也需要 DBA 親自下場做深度二開。</p><p>不過在公司研發達到 500 人規模前，也要謹慎控制 DBA 團隊的擴張。DBA 團隊擴充到 5 人後，通常都會走上自研工具鏈的道路，否則無法支撐團隊規模。但這個階段選擇自研道路，往往不會對業務帶來增量。因為自研雖然在某些功能點更貼近業務，但從整體的產品體驗來説，肯定是遠遠不如市面上成熟的標品，此消彼長。</p><p>那該如何給 DBA 團隊尤其是 DBA 團隊負責人提供成長空間呢。這裏有兩條路徑，一是培養 DBA 負責人去超越 DBA 的職能，往職責更大的存儲負責人/基礎設施負責人方向走；另一條路，是鼓勵 DBA 負責人走出公司，在行業內建立起影響力。</p><p>總之就是避免讓 DBA 團隊自己往前走的太快。雖然數據庫在整個研發鏈路裏是一塊基石，但它不是樞紐。自研數據庫工具鏈的時機，是要配合公司整體研發平台的自研規劃，而且通常是在整體研發平台自研規劃基本確立後，再進行數據庫相關的規劃。</p><h2>&gt; 1000 人 - 中央和地方</h2><p>能走到這步，公司往往已經形成了 BU 編制，這就會牽扯到是否每個 BU 會自建 DBA 團隊。這通常就不再是技術問題，而是組織問題了。一個強勢的業務 BU 通常都會希望可以有獨立的建制，但是往往自己運行一段時間後，又發現招不到/留不住人，然後即使名義上還是獨立，實際還是回退到中央集權。國內幾家大廠有中央集權的，也有地方自治的。到了這個階段兵無常勢，水無常形。</p><h2>如何評估 DBA 團隊的績效</h2><p>兩句話：</p><ul><li>專業的人做專業的事</li><li>善戰者無赫赫之功</li></ul><p>地鐵在既定的軌道上運行，依然也還是要配備 2 名駕駛員。事前預防，事中止血，事後補救，目前圍繞數據庫的日常工作，無論是雲平台還是第三方工具，還只能承擔 co-pilot 的角色，最終還需要 DBA 拍板。希望每個研發都具備數據庫常識的理想很豐滿，但現實很骨感。面試時雖然都考察了 MVCC 原理的八股文，但真的上了前線，往往連最基本的執行計劃也看不懂。</p><h2>總結</h2><p><img src="https://oscimg.oschina.net/oscnet/up-f36de6034e654d8a673cf05664d8e135703.png" alt="file" referrerpolicy="no-referrer"></p><p>新的一年也希望 DBA 們穩如泰山，數據庫都平平安安。</p><p><img src="https://oscimg.oschina.net/oscnet/up-07e2c0e2378dffdef4b198c2c7ec24344e0.png" alt="file" referrerpolicy="no-referrer"></p><hr><p>💡 更多資訊，請關注 Bytebase 公號：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10433139</guid>
            <link>https://my.oschina.net/u/6148470/blog/10433139</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三星成功驗證 CXL 內存與 Red Hat Linux 的互操作性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">三星電子發佈<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.samsung.com%2Fglobal%2Fsamsung-electronics-and-red-hat-partnership-to-lead-expansion-of-cxl-memory-ecosystem-with-key-milestone" target="_blank">公告稱</a>，已與 Red Hat 合作，在真實用戶環境中成功驗證了 CXL (Compute Express Link) 內存操作；此舉系業內首次，將進一步擴大其 CXL 生態系統。</span></p><p><span style="color:#000000">該公司表示，他們針對 Red Hat Enterprise Linux 9.3 發行版優化了 CXL 內存，並在 Red Hat 的 KVM 和 Podman 環境中驗證了內存識別、讀取和寫入操作。由此，數據中心客戶將無需對現有硬件進行額外調整，即可使用三星 CXL 內存。</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">紅帽公司高級副總裁兼亞太區負責人 Marjet Andriesse 稱，「三星 CXL 內存擴展器與紅帽企業級 Linux 互操作性的成功驗證具有重要意義，因為它拓展了 CXL 內存擴展器在基於 IaaS 和 PaaS 的紅帽軟件中的適用性。這是硬件和軟件集成的重要里程碑，為下一代內存開發構建了一個開源生態系統。」</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="317" src="https://oscimg.oschina.net/oscnet/up-902ea73f4e148bd1626fdd7de2c37b4b0dd.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，雙方正在合作制定《RHEL 9.3 CXL 內存啓用指南》，幫助用戶在 RHEL 9.3 上利用三星的 CXL 內存，並在各種用戶環境中構建高性能計算系統。</span></p><p><span style="color:#000000">兩家公司於 2022 年 5 月首次簽署了一份諒解備忘錄（MOU），開始在 CXL 上進行合作。合作關係涵蓋一系列存儲和內存產品，包括 NVMe SSD、CXL 內存、計算內存/存儲和結構。</span></p><p><span style="color:#000000">三星執行副總裁兼內存產品規劃主管 Yongcheol Bae 在接受 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zdnet.com%2Farticle%2Fsamsung-verifies-cxl-memory-with-red-hat%2F" target="_blank">ZDNet</a> 採訪時表示：通過最新的驗證，三星將成為業內第一家提供支持 CXL 2.0 的 CXL 模塊、開源軟件和 CXL DRAM 的公司。雙方還將致力於靈活的數據放置和汽車以及其他項目，以實現為 CXL 內存打造強大生態系統的最終目標。</span></p><p><span style="color:#000000">CXL 是一個統一的接口標準，於 2019 年推出，通過 PCIe 接口以比以前更低的延遲和更高的帶寬連接各種處理器和內存設備。這樣，現有的數據中心就能以低成本提高速度、延遲和可擴展性。</span></p><p><span style="color:#000000">市場研究公司 Yole Group 數據指出，CXL 市場目前估值約為 1400 萬美元；且得益於 2024 年底 CXL 2.0 的推出，預計到 2028 年還將增長至 160 億美元。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</guid>
            <link>https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ClkLog —— 免費、可商用的輕量級完全開源的埋點用戶分析系統]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-項目簡介" class="anchor" href="https://gitee.com/clklog/clklog#%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B"></a>項目簡介</h1><p>ClkLog 是一款記錄用戶行為分析和畫像的免費可商用開源軟件，技術人員可快速搭建私有的應用系統。項目基於神策分析 SDK，採用 ClickHouse 數據庫對採集數據進行存儲，採用前後端分離的方式來實現的訪問統計和用戶畫像分析系統。在這裏，你可以輕鬆看到用戶訪問網頁、APP、小程序或業務系統的行為軌跡，同時也可以從時間、地域、渠道、用戶訪客類型等多維度瞭解用戶的全方位信息。</p><h1><a id="user-content-核心功能" class="anchor" href="https://gitee.com/clklog/clklog#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"></a>核心功能</h1><ul><li><p><strong>數據採集</strong>：支持網頁、小程序、IOS、Android 等多端數據採集</p></li><li><p><strong>流量概覽</strong>：提供流量渠道、設備、地域、訪客類型多維度分析</p></li><li><p><strong>用戶畫像</strong>：解析用戶唯一 ID，定位追蹤用戶全生命週期畫像</p></li><li><p><strong>數據下載</strong>：支持各項彙總數據、明細數據的下載</p></li></ul><h1><a id="user-content-技術棧選擇" class="anchor" href="https://gitee.com/clklog/clklog#%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E6%8B%A9"></a>技術棧選擇</h1><ul><li><p><strong>後端</strong>：Redis 、Zookeeper、Kafka 、Flink</p></li><li><p><strong>前端</strong>：vue、vue-element-admin、element-ui 、echarts</p></li><li><p><strong>數據</strong>：Clickhouse</p></li></ul><h1><a id="user-content-示意圖" class="anchor" href="https://gitee.com/clklog/clklog#%E7%A4%BA%E6%84%8F%E5%9B%BE"></a>示意圖</h1><table><thead><tr><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/1.png" alt="" referrerpolicy="no-referrer"></th><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/2.png" alt="" referrerpolicy="no-referrer"></th></tr></thead><tbody><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/3.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/4.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/5.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/6.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/7.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/8.png" alt="" referrerpolicy="no-referrer"></td></tr></tbody></table><h1><a id="user-content-在線體驗" class="anchor" href="https://gitee.com/clklog/clklog#%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C"></a>在線體驗</h1><p>演示地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com" target="_blank"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com">https://demo.clklog.com</a></p><h1><a id="user-content-快速接入" class="anchor" href="https://gitee.com/clklog/clklog#%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5"></a>快速接入</h1><p>官方文檔：<a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com">https://clklog.com</a></p><h1><a id="user-content-協議許可" class="anchor" href="https://gitee.com/clklog/clklog#%E5%8D%8F%E8%AE%AE%E8%AE%B8%E5%8F%AF"></a>協議許可</h1><ul><li><p>開源協議：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.gnu.org%2Flicenses%2Fagpl-3.0.en.html">AGPL V3.0</a></p></li><li><p>免費使用：Clklog 遵循 AGPL V3.0 開源許可證, 使用的組織或個人在複製、分發、轉發或修改時請遵守相關條款，不得移除 ClkLog 相關版權標識進行。如有違反，ClkLog 將保留對侵權者追究責任的權利。</p></li><li><p>商業使用：請聯繫客服進行細節諮詢</p></li></ul><h1><a id="user-content-聯繫我們" class="anchor" href="https://gitee.com/clklog/clklog#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>聯繫我們</h1><ul><li><p>客服郵箱：<a href="mailto:info@clklog.com">info@clklog.com</a></p></li><li><p>客服手機：16621363853</p></li><li><p>客服微信：opensoft66</p></li><li><p>客服二維碼：<img title="" src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/contactqrcode.jpg" alt="" width="120" referrerpolicy="no-referrer"></p></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/clklog/clklog</guid>
            <link>https://gitee.com/clklog/clklog</link>
        </item>
    </channel>
</rss>
