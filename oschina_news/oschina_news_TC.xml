<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 20 Sep 2023 08:25:39 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[瀏覽器可直接訪問 Dubbo、gRPC 後端微服務，Dubbo-js 首個 alpha 版本來了！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" target="_blank">尊嘟假嘟，成都程序員也 996 嗎？ <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p style="text-align:justify">基於 Dubbo3 定義的 Triple 協議，你可以輕鬆編寫瀏覽器、gRPC 兼容的 RPC 服務，並讓這些服務同時運行在 HTTP/1 和 HTTP/2 上。Dubbo TypeScript SDK<strong>[1]</strong>支持使用 IDL 或編程語言特有的方式定義服務，並提供一套輕量的 APl 來發布或調用這些服務。</p><p style="text-align:justify">Dubbo-js 已於 9 月份發佈支持 Dubbo3 協議的首個 alpha 版本，它的發佈將有機會徹底改變微服務前後端的架構與通信模式，讓你能直接在瀏覽器頁面或 web 服務器中訪問後端 Dubbo、gRPC 服務。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-0ca9d9a8797a894e713b1802de9fd6b1_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_1"></span><h3>瀏覽器 Web 應用示例</h3><p style="text-align:justify">本示例演示瞭如何使用 dubbo-js 開發運行在瀏覽器上的 web 應用程序，web 頁面將調用 dubbo node.js 開發的後端服務並生成頁面內容。<strong>本示例演示基於 IDL 和非 IDL 兩種編碼模式。</strong></p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-a7e252462c1075a00b8df18dd7c2c097_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_2"></span><h3>IDL 模式</h3><span id="OSC_h4_3"></span><h4>前置條件</h4><p style="text-align:justify">首先，我們將使用 Vite 來生成我們的前端項目模板，它內置了我們稍後需要的所有功能支持。</p><pre><code>npm create vite@latest -- dubbo-web-example --template react-ts
cd dubbo-web-example
npm install</code></pre><p style="text-align:justify">因為使用 Protocol Buffer 的原因，我們首先需要安裝相關的代碼生成工具，這包括 @bufbuild/protoc-gen-es、@bufbuild/protobuf、@apachedubbo/protoc-gen-apache-dubbo-es、@apachedubbo/dubbo。</p><pre><code>npm install @bufbuild/protoc-gen-es @bufbuild/protobuf @apachedubbo/protoc-gen-apache-dubbo-es @apachedubbo/dubbo</code></pre><span id="OSC_h4_4"></span><h4>使用 Proto 定義服務</h4><p style="text-align:justify">現在，使用 Protocol Buffer (IDL) 來定義一個 Dubbo 服務。</p><p style="text-align:justify">src 下創建 util/proto 目錄，並生成文件。</p><pre><code>mkdir -p src/util/proto &amp;&amp; touch src/util/proto/example.proto</code></pre><p style="text-align:justify">寫入內容：</p><pre><code>syntax = "proto3";

package apache.dubbo.demo.example.v1;

message SayRequest {
  string sentence = 1;
}

message SayResponse {
  string sentence = 1;
}

service ExampleService {
  rpc Say(SayRequest) returns (SayResponse) {}
}</code></pre><p style="text-align:justify">這個文件聲明瞭一個叫做 ExampleService 的服務，為這個服務定義了 Say 方法以及它的請求參數 SayRequest 和返回值 SayResponse。</p><span id="OSC_h4_5"></span><h4>生成代碼</h4><p style="text-align:justify">創建 gen 目錄，作為生成文件放置的目標目錄。</p><pre><code>mkdir -p src/util/gen</code></pre><p style="text-align:justify">運行以下命令，利用 protoc-gen-es、protoc-gen-apache-dubbo-es 等插件在 gen 目錄下生成代碼文件：</p><pre><code>PATH=$PATH:$(pwd)/node_modules/.bin \
  protoc -I src/util/proto \
  --es_out src/util/gen \
  --es_opt target=ts \
  --apache-dubbo-es_out src/util/gen \
  --apache-dubbo-es_opt target=ts \
  example.proto</code></pre><p style="text-align:justify">運行命令後，應該可以在目標目錄中看到以下生成的文件:</p><pre><code>├── src
│   ├── util
│   │   ├── gen
│   │   │   ├── example_dubbo.ts
│   │   │   └── example_pb.ts
│   │   └── proto
│   │       └── example.proto</code></pre><span id="OSC_h4_6"></span><h4>創建 App</h4><p style="text-align:justify">需要先下載 @apachedubbo/dubbo-web。</p><pre><code>npm install @apachedubbo/dubbo-web</code></pre><p style="text-align:justify">現在我們可以從包中導入服務並設置一個客戶端。在 App.tsx 中添加以下內容：</p><pre><code>import { useState } from "react";
import "./App.css";

import { createPromiseClient } from "@apachedubbo/dubbo";
import { createDubboTransport } from "@apachedubbo/dubbo-web";

// Import service definition that you want to connect to.
import { ExampleService } from "./util/gen/example_dubbo";

// The transport defines what type of endpoint we're hitting.
// In our example we'll be communicating with a Dubbo endpoint.
const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
});

// Here we make the client itself, combining the service
// definition with the transport.
const client = createPromiseClient(ExampleService, transport, { serviceGroup: 'dubbo', serviceVersion: '1.0.0' });

function App() {
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState&lt;
    {
      fromMe: boolean;
      message: string;
    }[]
  &gt;([]);
  return (
    &lt;&gt;
      &lt;ol&gt;
        {messages.map((msg, index) =&gt; (
          &lt;li key={index}&gt;{`${msg.fromMe ? "ME:" : "Dubbo Server:"} ${msg.message}`}&lt;/li&gt;
        ))}
      &lt;/ol&gt;
      &lt;form
        onSubmit={async (e) =&gt; {
          e.preventDefault();
          // Clear inputValue since the user has submitted.
          setInputValue("");
          // Store the inputValue in the chain of messages and
          // mark this message as coming from "me"
          setMessages((prev) =&gt; [
            ...prev,
            {
              fromMe: true,
              message: inputValue,
            },
          ]);
          const response = await client.say({
            sentence: inputValue,
          });
          setMessages((prev) =&gt; [
            ...prev,
            {
              fromMe: false,
              message: response.sentence,
            },
          ]);
        }}
      &gt;
        &lt;input value={inputValue} onChange={(e) =&gt; setInputValue(e.target.value)} /&gt;
        &lt;button type="submit"&gt;Send&lt;/button&gt;
      &lt;/form&gt;
    &lt;/&gt;
  );
}

export default App;</code></pre><p style="text-align:justify">執行以下命令，即可得到樣例頁面。</p><pre><code>npm run dev</code></pre><span id="OSC_h4_7"></span><h4>啓動 Server</h4><p style="text-align:justify">接下來我們需要啓動 Server，可以使用 Java、Go、Node.js 等 Dubbo 支持的任一語言開發 Server。這裏我們採用 Dubbo 服務嵌入的 Node.js 服務器，具體可參考 Node.js 開發 Dubbo 後端服務<strong>[2]</strong>中的操作步驟。</p><p style="text-align:justify">不過需要注意，我們額外需要修改 Node.js 示例：引入 @fastify/cors 來解決前端請求的跨域問題。</p><pre><code>npm install @fastify/cors</code></pre><p style="text-align:justify">需要在 server.ts 文件下修改。</p><pre><code>...
import cors from "@fastify/cors";

...
async function main() {
  const server = fastify();
  ...
  await server.register(cors, {
    origin: true,
  });
  ...
  await server.listen({ host: "localhost", port: 8080 });
  ...
}

void main();</code></pre><p style="text-align:justify">最後，運行代碼啓動服務。</p><pre><code>npx tsx server.ts</code></pre><span id="OSC_h3_8"></span><h3>無 IDL 模式</h3><p style="text-align:justify">在接下來的版本中，我們將繼續提供無 IDL 模式的通信支持，這樣就可以更方便的訪問無 IDL 的後端服務。在這裏，我們先快速的看一下無 IDL 模式的使用方式。</p><p style="text-align:justify">同樣需要先安裝 @apachedubbo/dubbo、@apachedubbo/dubbo-web。</p><pre><code>npm install @apachedubbo/dubbo @apachedubbo/dubbo-web</code></pre><p style="text-align:justify">現在就可以一個啓動一個客戶端，併發起調用了。App.tsx 中的代碼與 IDL 模式基本一致，區別點在於以下內容：</p><pre><code>// ...
// set backend server to connect
const transport = createDubboTransport({
  baseUrl: "http://localhost:8080",
});
// init client
const client = createPromiseClient(transport);

function App() {
  // ...
  // call remote Dubbo service
  const response = await client.call(
    "apache.dubbo.demo.example.v1.ExampleService", 
    "say", 
    {
      sentence: inputValue,
    });
}</code></pre><p style="text-align:justify">執行以下命令，即可得到樣例頁面。</p><pre><code>npm run dev</code></pre><span id="OSC_h3_9"></span><h3>總結</h3><p style="text-align:justify">直接在瀏覽器頁面或 web 服務器中訪問後端 Dubbo RPC 服務！Dubbo Triple 協議升級以及 Dubbo javascript sdk 的發佈，對整個微服務體系是一個非常有力的補充，期待看到它能改變未來整個微服務架構以及前後端通信模式。</p><p style="text-align:justify"><strong>相關鏈接：</strong></p><p style="text-align:justify">[1] Dubbo TypeScript SDK</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-js%2F%253Fspm%253Da2c6h.13046898.publish-article.9.15696ffaXgyemr" target="_blank">https://github.com/apache/dubbo-js/</a></em></u></p><p style="text-align:justify">[2] Node.js 開發 Dubbo 後端服務</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-js%2Ftree%2Fdubbo3%2Fexample%2Fdubbo-node-example%253Fspm%253Da2c6h.13046898.publish-article.10.15696ffaXgyemr" target="_blank">https://github.com/apache/dubbo-js/tree/dubbo3/example/dubbo-node-example</a></em></u></p><p style="text-align:justify"><em>作者：蔡建懌</em></p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">點擊立即免費試用雲產品，開啓雲上實踐之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000380504%2F" target="_blank">原文鏈接</a></strong></p><p style="text-align:justify"><strong>本文為阿里雲原創內容，未經允許不得轉載。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 08:02:18 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10112234</guid>
            <link>https://my.oschina.net/yunqi/blog/10112234</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openKylin 共建會員沙龍（第六期）杭州站成功舉辦]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">9 月 19 日，由</span><strong><span style="color:#000000">openKylin 社區主辦、平頭哥半導體有限公司承辦</span></strong><span style="color:#000000">的</span><strong><span style="color:#000000">第六期共建會員沙龍</span></strong><span style="color:#000000">在杭州順利舉行。立足新時期，我國數字產業發展根基愈牢，關鍵技術領域自主創新能力持續增強，以開源帶動軟件生產模式創新、補足軟件供應鏈短板的理念已得到業界足夠重視。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:justify">openKylin 社區共建會員沙龍旨在邀請社區單位會員及致力於開源產業的各界夥伴共同探討數字化轉型期的開源機遇及優勢，搭建開源領域的交流合作平台，推動 Linux 開源技術及其軟硬件生態繁榮發展。</p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e144d333729a88d30571c1e703f03b7aa45.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">此次活動中，平頭哥半導體有限公司軟件研發總監李春強、openKylin 社區技術委員會委員王文竹為活動致辭。openKylin 社區生態合作負責人馬發俊，PLCT Lab 項目總監吳偉，平頭哥半導體有限公司生態總監陳煒，杭州瑞成信息技術股份有限公司基礎研發部經理侯海賓，Avalonia 中文社區發起人董彬進行主題分享。最後，各與會代表就開源治理及社區共建等相關問題展開交流討論，openKylin 社區祕書長餘傑作會議總結。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#ffffff"><span style="background-color:#fdd105">PART 1</span></span></strong></span><strong><span style="color:#333333">會議致辭</span></strong></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">平頭哥半導體有限公司軟件研發總監李春強為此次沙龍致辭</span></strong><span style="color:#000000">並表示，歡迎大家來到位於杭州的美麗的阿里園區參加由 openKylin 社區主辦，平頭哥承辦的共建會員沙龍，平頭哥作為 openKylin 社區合作伙伴，將共同推動社區 RISC-V 生態繁榮發展。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-729eb7a4821dd713c77a830bb7832dae0c8.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">openKylin 社區技術委員會委員王文竹為此次沙龍致辭，</span></strong><span style="color:#000000">他表示，各位夥伴的加入為 openKylin 社區的持續發展注入了創新力量。未來，我們將以開源為抓手，與業界同仁共同努力，着力於技術創新和生態共建，共同打造桌面操作系統頂級根社區。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-343d13afa490031a1b9405374b5643cd636.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#ffffff"><span style="background-color:#fdd105">PART 2</span></span></strong></span><strong><span style="color:#333333">主題分享</span></strong></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">openKylin 社區生態合作負責人馬發俊</span></strong><span style="color:#000000">，向與會夥伴介紹了社區的基本情況、治理模式、開源趨勢及社區取得的相關成果。openKylin 社區將聯合共建會員進行生態協同和技術創新，讓更多夥伴能夠在社區平台共享、共贏，目前，已有 40 多家合作伙伴參與和創建了 30 多個 SIG 組，為社區貢獻技術創新力量，在大家的共同努力下，最終將社區建設成為具有國際影響力的開源社區。未來，openKylin 社區期待有更多夥伴加入、攜手共建下一代操作系統創新生態。</span></span></p><div><p style="text-align:center"><img alt="" height="1280" src="https://oscimg.oschina.net/oscnet/up-bec1a47f714f2a027dd1799709db1b0cb59.jpg" width="1706" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">PLCT Lab 項目總監吳偉</span></strong><span style="color:#000000">發表</span><strong><span style="color:#000000">《RISC-V &amp; openKylin: Get ready for the 1 million developers》</span></strong><span style="color:#000000">主題分享。PLCT Lab 致力於成為編譯技術領域的開源領導者，推進工具鏈及運行時系統等軟件基礎設施的技術革新，並致力於培養一萬名編譯領域尖端人才，推動先進編譯技術在國內的普及和發展。PLCT Lab 將攜手 openKylin 社區共同為推動 RISC-V 產業生態獻策、獻力，並協助和加速 openKylin 在 RISC-V 架構上的國際化腳步。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-3ee4f9b38a6bfc32d0c767024eece285136.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">平頭哥半導體有限公司生態總監陳煒</span></strong><span style="color:#000000">發表</span><strong><span style="color:#000000">《玄鐵軟硬件全棧技術，助力 RISC-V 生態發展》</span></strong><span style="color:#000000">主題分享。平頭哥成立於 2018 年，目前已擁有端雲一體的全棧產品系列，涵蓋了數據中心芯片、IoT 芯片、處理器 IP 等產品及解決方案，實現了芯片端到端設計鏈路全覆蓋。在加入 openKylin 社區後，攜手社區完成了平頭哥 TH1520 與 openKylin 操作系統的適配工作，並在 openKylin 操作系統上實現首個 RV 商業 IM 工具。未來雙方將持續深化合作，共同致力於 RISC-V 生態的發展與探索。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-6adb25ab0e0bdbf677146ebcaecad090086.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">杭州瑞成信息技術股份有限公司基礎研發部經理侯海賓</span></strong><span style="color:#000000">發表</span><strong><span style="color:#000000">《瑞成科技攜手開放麒麟，共建開放應用生態》</span></strong><span style="color:#000000">主題分享。瑞成科技成立於 2006 年，是一家專注於協同、數據、智能、安全等核心技術，以整合行業軟硬件產業鏈、提供行業整體解決方案的高科技企業。加入 openKylin 社區後，申請成立了 Notification SIG 組和 RPA SIG，持續謀劃並推進 SIG 組工作，為社區貢獻瑞成力量。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-48e8242675b8659c06e7c9e76fa3c690a5d.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">Avalonia 中文社區發起人董彬</span></strong><span style="color:#000000">發表</span><strong><span style="color:#000000">《Avalonia 與 openKylin 開源社區共建及生態展望》</span></strong><span style="color:#000000">主題分享。在加入 openKylin 社區後，Avalonia 中文社區成立了 Avalonia SIG，致力於推進 Avalonia UI 對 openKylin 生態的支持，及 Avalonia UI 的相關生態建設。未來，雙方也將持續展開合作，將 Avalonia UI 的強大功能與 openKylin 操作系統的優勢相結合，為用戶帶來更加出色的使用體驗，促進操作系統桌面軟件生態蓬勃發展。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-cf39bee522a23ec8d256402d533434e9091.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#ffffff"><span style="background-color:#fdd105">PART 3</span></span></strong></span><strong><span style="color:#333333">交流討論</span></strong></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">在共建根社區建設交流研討中，參與此次沙龍的各企業代表積極參與，圍繞社區各個產品領域的標準制定，操作系統創新生態打造等話題，探討未來夥伴間更多維度、更深層次合作方向。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f1a35ce0272610502f3c8750bd650a0f4b.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">最後，</span><strong><span style="color:#000000">openKylin 祕書長餘傑就本次會議進行總結髮言</span></strong><span style="color:#000000">。他表示，感謝大家參加 openKylin 社區杭州站沙龍，openKylin 社區聯合生態廠商協同創新，通過建立完善社區組織架構和運營機制，建立社區同單位會員間平等、開放的溝通交流機制，讓更多夥伴能夠在社區平台共享、共贏，最終建成具有國際影響力的開源社區。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-66197ddbcf4ba81c8fd73ac5aa3d341211e.jpg" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 作為國內桌面操作系統根社區，以聚焦桌面操作系統根技術為核心、以打造創新生態為途徑、以孵化相關領域關鍵項目為目標、以佈道開源文化為抓手、以聚合開源優秀人才為根基，願攜手更多夥伴共同推動，致力於推動 Linux 開源技術及其軟硬件生態繁榮發展。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 07:59:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258810</guid>
            <link>https://www.oschina.net/news/258810</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Jakarta EE 開發者調查 2023：中國社區參與度尤其高]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">Eclipse 基金會推出了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnewsroom.eclipse.org%2Fnews%2Fannouncements%2Feclipse-foundation-releases-2023-jakarta-ee-developer-survey-report" target="_blank">2023 年 Jakarta EE 開發人員調查報告</a>。結果表明，Jakarta EE 的使用量顯着增長，並且總體上對雲原生 Java 的興趣日益增長。</span></p><p><span style="color:#000000">Jakarta EE 開發人員調查旨在深入瞭解 Java 生態系統中開發人員的需求、偏好和觀點；幫助 Java 生態系統更好地瞭解雲原生企業 Java 的不斷髮展的前景，以及這對各自的戰略和業務意味着什麼。今年的調查從 2025 年 3 月 14 日到 5 月 23 日，共有 2,203 名參與者，相較去年增加了 53%。</span></p><p><span style="color:#000000">今年的調查還提供中文、日語、西班牙語和葡萄牙語版本。官方表示，今年中國 Jakarta EE 社區的參與度尤其高，有超過 27% 的回覆來自中國。</span></p><p><span style="color:#000000"><img alt="" height="311" src="https://oscimg.oschina.net/oscnet/up-e44a13ee50350f053dc304f7c2e8ac81120.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">以下是今年調查的一些主要發現：</span></p><ul><li><span style="color:#000000">融合了 Jakarta EE 元素的 Spring/Spring Boot 仍然是雲原生應用的主要 Java 框架，佔比 66%（高於 2022 年的 57%）。Jakarta EE 使用率穩定在 53%；而 MicroProfile 使用率略有下降，從 2022 年的 30% 下降到 2023 年的 26%。需要注意的是，Spring/SpringBoot 的運行依賴於 Jakarta EE 開發，並不一定與 Jakarta EE 競爭。兩者都是企業 Java 生態系統健康發展的關鍵因素。</span></li><li><span style="color:#000000">28%（2022 年為 25%）的受訪者將開發雲原生應用程序來替換部分或全部現有服務，而 24% 的受訪者將修改現有 Java 應用程序以遷移到雲中（2022 年為 28%）。22% 的受訪者目前在雲中運行 Java 應用程序（2022 年這一比例為 18%）</span></li><li><span style="color:#000000">儘管 2022 年 9 月才發佈，但 Jakarta EE 10 的使用率已增長至 17%。</span></li><li><span style="color:#000000">超過 60% 的受訪者（2022 年為 59%）表示已經或計劃在未來 6-24 個月內遷移到&nbsp;Jakarta EE。</span></li><li><span style="color:#000000">17% 的受訪者在生產中運行 Jakarta EE 9/9.1（高於 2022 年的 14%），28% 的受訪者目前在生產中運行 Jakarta EE 8（2022 年為 24%）</span></li><li><span style="color:#000000">Jakarta EE 社區對於將 Java SE 中實現的創新應用到 Jakarta EE 中非常感興趣 (30%)。報告指出，這是一個很好的跡象，表明 Jakarta EE 11 發佈計劃採用 Java SE 21 新功能的方向是正確的。</span></li><li><span style="color:#000000">受訪者中排名前五的雲平台供應商是 Amazon Web Services、Microsoft Azure、Google Cloud Platform、阿里雲和 IBM Cloud。</span></li><li><span style="color:#000000">Jakarta EE 的五個首要社區優先事項是：</span><ul><li><span style="color:#000000">對 Kubernetes 更好的支持 50%（2022 年為 51%）</span></li><li><span style="color:#000000">更好地支持微服務 (48%)</span></li><li><span style="color:#000000">適應 Java SE 創新（例如記錄和虛擬線程）(30%)</span></li><li><span style="color:#000000">改進對 serverless 的支持 (25%)</span></li><li><span style="color:#000000">現有 Java EE / Jakarta EE 或雲供應商提供更快的支持，改善對測試的支持並加快創新步伐 (23%)</span></li></ul></li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Eclipse 基金會執行董事 Mike Milinkovich 發言稱：「2023 年，雲原生 Java 將持續增長，開源將引領潮流。Jakarta EE 10 的發佈真正為這一轉變打開了大門，當我們將目光投向 Jakarta EE 11 時，我們的社區希望通過提供新的和增強的 API 以及採用 Java 語言和平台。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 07:40:18 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258807/2023-jakarta-ee-developer-survey-report</guid>
            <link>https://www.oschina.net/news/258807/2023-jakarta-ee-developer-survey-report</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[程序員空閒時間應該繼續卷技術，還是找其他副業？]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/2720166_2331049">程序員空閒時間應該繼續卷技術，還是找其他副業？</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/hardbone" class="__user"><span>局</span></a> 發佈於 42 分鐘前
                    </div><div class="item">閲讀 138</div><div class="item collect-btn " data-id="2331049" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331049" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/2720166_2331049#comments" class="normal"><i class="comment outline icon"></i> 評論 <span data-article-reply-count="">0</span></a></div></div><div class="content" id="articleContent"><p class="ad-wrap"><a data-traceid="question_detail_above_text_link_ad" data-tracepid="question_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" target="_blank">尊嘟假嘟，成都程序員也 996 嗎？&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></p><p>最近幾年經濟下行，企業數量鋭減，資本保守的情況下，互聯網行業人才飽和，就業難度越來越大。對於普通的程序員來説，應該利用有限時間繼續卷技術還是去找其他可能的副業。</p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331049" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331049" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331049" data-obj-type="2" data-url="https://www.oschina.net/question/2720166_2331049"><i class="flag red icon"></i>舉報</a></div></div>
            ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 07:35:18 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/2720166_2331049</guid>
            <link>https://www.oschina.net/question/2720166_2331049</link>
        </item>
        <item>
            <title>
                <![CDATA[Bard 更新：迄今為止最強大的模型、集成谷歌全家桶]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>谷歌對話式 AI 產品 Bard 近日發佈了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbard.google.com%2Fupdates" target="_blank">更新</a>。</p><p>從現在開始，Bard 開始提供插件生態。它可以調用豐富的谷歌應用 API，從而執行復雜的操作。你每天使用的谷歌工具，比如 Gmail、Docs、Drive、谷歌地圖、Youtube、谷歌航班等應用，Bard 都能打開，然後從中為你找到需要的信息。</p><p>即使需要的信息分散在多個應用和服務中，有了 Bard 也能快速集成。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0973ea2474b81e52114278b1be524b91198.png" referrerpolicy="no-referrer"></p><hr><p>下文是更新説明。</p><p><strong>全新推出：Bard 迄今為止最強大的模型</strong></p><ul><li>具體變化：得益於你的反饋，Bard 現在更直觀明瞭、更富於想象力、響應速度更快。無論你是想要讓 Bard 幫你撰寫富有趣味和創意的內容，隨心使用 40 多種語言中的任意一種與 Bard 對話，還是要尋求深度編程協助，或是從不同角度瞭解新主題，Bard 都能以更出色的質量和準確度幫助你探索各種可能性。</li><li>原因：我們秉承快速迭代原則，努力將 Bard 最先進的「黑科技」帶給全世界。你的反饋幫助我們構建出了迄今為止最強大的 Bard 版本，讓用戶能夠在世界各地使用多種語言與 Bard 協作。</li></ul><p><img src="https://static.oschina.net/uploads/space/2023/0920/153052_NulT_2720166.gif" referrerpolicy="no-referrer"></p><p><strong>藉助改版後的「用 Google 搜索」功能覈查 Bard 的回答</strong></p><ul><li><p>具體變化：利用 Google 搜索的強大功能，[G] 按鈕可幫助你覈查 Bard 使用 AI 生成的回答。此功能目前只支持英語。當我們能夠評估某項陳述時，相應陳述會在 Bard 的回答中突出顯示，點擊一下即可瞭解詳情。</p><p>注意：所提供的鏈接是 Google 搜索找到的內容，並不代表 Bard 原來給出的回答是根據這個來源生成的。</p></li><li><p>原因：如今，人們使用 AI 工具以新的方式更輕鬆地瞭解複雜的主題。隨着你在 Bard 的幫助下學習新知，很重要的一點是讓你對 AI 生成的信息更有信心。</p></li></ul><p><strong>接着與你分享的對話繼續聊</strong></p><ul><li>具體變化：有人通過 Bard 的公共鏈接功能與你分享 Bard 對話時，你可以使用自己的賬號接着這些對話繼續聊。</li><li>原因：我們經常從其他人那裏得到靈感啓發，接觸到的想法越多，就越有可能提出真正創新的想法。因此，我們希望你能夠更輕鬆地將他人分享的對話作為切入點，展開自己的創意探索。</li></ul><p><strong>所有支持的語言都可使用更多功能</strong></p><ul><li>具體變化：在所有受支持的語言中，你現在可以使用 Google 智能鏡頭上傳圖片、在回答中看到來自 Google 搜索的圖片，並讓 Bard 將回答修改得更簡單、更詳盡、更簡短、更專業或更隨意一點。</li><li>原因：通過讓 Bard 將回答修改得更符合你的需求，你將能夠更好地控制自己的創意流程。在問題中加入圖片可以激發新的創意，而回答中的圖片將有助於你將創意變為現實。</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 07:29:18 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258800/bard-update-sep-2023</guid>
            <link>https://www.oschina.net/news/258800/bard-update-sep-2023</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java/JDK 21 正式發佈！15 個特性一覽]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" target="_blank">尊嘟假嘟，成都程序員也 996 嗎？ <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>JDK 21 已經於 2023 年 9 月 19 日正式發佈。本文總結了 JDK 21 發佈的新特性。</p><h2>發佈版本説明</h2><p>根據發佈的規劃，這次發佈的 JDK 21 將是一個長期支持版（LTS 版）。LTS 版每 2 年發佈一個，上一次長期支持版是 21 年 9 月發佈的 JDK 17。</p><p>本版本是 Java SE 平台 21 版的參考實現，由 Java 社區流程中的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fprojects%2Fjdk%2F21%2Fspec" target="_blank">JSR 396</a>指定。</p><h2>安裝包下載</h2><p>主要分為 OpenJDK 版本和 Oracle 版本，下載地址如下：</p><ul><li>OpenJDK 版本：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjdk.java.net%2F21%2F" target="_blank">https://jdk.java.net/21/</a></li><li>Oracle 版本：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.oracle.com%2Fjava%2Ftechnologies%2Fdownloads%2F" target="_blank">https://www.oracle.com/java/technologies/downloads/</a></li></ul><p>上述版本，如果是個人學習用途，則差異不大。但如果是用於商業用途，則需要仔細看好相關的授權。Oracle JDK 商用需要遵循 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.oracle.com%2Fdownloads%2Flicenses%2Fjavase-license1.html" target="_blank">Oracle No-Fee Terms and Conditions (NFTC)</a>協議，而 OpenJDK 根據 GPL v2 許可獲得許可。</p><p>更多有關 Java 的基本知識，可以參閲《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fitem.jd.com%2F12868796.html" target="_blank">Java 核心編程</a>》這本書，描述的非常詳細。</p><h2>JDK 21 新特性説明</h2><h3>正式穩定功能</h3><h4>JEP 431：序列集合</h4><p>序列集合（Sequenced Collections）在 <code>core-libs/java.util:collections</code> 包中。</p><p>該 JEP 提議引入「一個新的接口族，用於表示集合的概念，這些集合的元素按照預定義的序列或順序排列，它們是作為集合的結構屬性。」這一提案的動機是由於集合框架中缺乏預定義的順序和統一的操作集。</p><h4>JEP 439：分代 ZGC</h4><p>分代 ZGC（Generational ZGC）在 <code>hotspot/gc</code> 包中。</p><p>通過擴展 Z 垃圾回收器（ZGC）來維護年輕對象和年老對象的獨立生成，從而提高應用程序性能。這將使 ZGC 能夠更頻繁地收集年輕對象——這些對象往往英年早逝。</p><h4>JEP 440：記錄模式</h4><p>使用記錄模式（Record Patterns）增強 Java 編程語言，以解構記錄值。可以嵌套記錄模式和類型模式，以實現功能強大、聲明性和可組合形式的數據導航和處理。</p><h4>JEP 441：switch 模式匹配</h4><p>通過 switch 表達式和語句的模式匹配來增強 Java 編程語言。通過將模式匹配擴展到 switch，可以針對多個模式測試表達式，每個模式都有一個特定的操作，從而可以簡潔、安全地表達複雜的面向數據的查詢。</p><h4>JEP 444：虛擬線程</h4><p>將虛擬線程（Virtual Threads）引入 Java 平台。虛擬線程是輕量級線程，可以顯著減少編寫、維護和觀察高吞吐量併發應用程序的工作量。</p><p>詳見<a href="https://my.oschina.net/u/853151/blog/5513698">《Java 下一代高併發技術——虛擬線程（Virtual Threads）》</a>。</p><h4>JEP 449：棄用 Windows 32 位 x86 移植</h4><p>棄用 Windows 32 位 x86 移植，並打算在將來的版本中將其刪除。</p><h4>JEP 451：準備禁止動態加載代理</h4><p>將代理動態加載到正在運行的 JVM 中時發出警告。這些警告旨在讓用戶為將來的版本做好準備，該版本默認情況下不允許動態加載代理，以提高默認情況下的完整性。在啓動時加載代理的可服務性工具不會導致在任何版本中發出警告。</p><h4>JEP 452：密鑰封裝機制 API</h4><p>介紹一種用於密鑰封裝機制（Key Encapsulation Mechanism，簡稱 KEM）的 API，這是一種使用公鑰加密來保護對稱密鑰的加密技術。</p><h3>預覽階段功能</h3><h4>JEP 430：字符串模板（預覽）</h4><p>使用字符串模板（String Templates）增強 Java 編程語言。字符串模板通過將文本與嵌入的表達式和模板處理器耦合來生成專門的結果，從而補充 Java 現有的字符串文本和文本塊。這是一個預覽語言功能和 API。</p><h4>JEP 442：外部函數和內存 API（第三次預覽）</h4><p>引入 API，Java 程序可以通過該 API 與 Java 運行時之外的代碼和數據進行互操作。通過有效地調用外部函數（即 JVM 外部的代碼），並通過安全地訪問外部內存（即不受 JVM 管理的內存），API 使 Java 程序能夠調用本機庫並處理本機數據，而不會出現 JNI 的脆弱性和危險性。這是一個預覽 API。</p><h4>JEP 443：未命名模式和變量（預覽）</h4><p>使用未命名模式和未命名變量來增強 Java 語言，未命名模式匹配記錄組件而不説明組件的名稱或類型，未命名變量可以初始化但不使用。兩者都用下劃線字符<code>_</code>表示。這是一個預覽語言功能。</p><h4>JEP 445：未命名類和實例主方法（預覽）</h4><p>發展 Java 語言，使學生無需理解為大型程序設計的語言功能即可編寫第一個程序。學生們不用使用單獨的 Java 方言，就可以為單類程序編寫精簡的聲明，然後隨着技能的發展，無縫地擴展程序，使用更高級的功能。這是一個預覽語言功能。</p><h4>JEP 446：作用域值（預覽）</h4><p>引入作用域值，這些值可以在不使用方法參數的情況下安全有效地共享給方法。它們優先於線程化局部變量，尤其是在使用大量虛擬線程時。這是一個預覽 API。</p><p>實際上，作用域值是一個隱式方法參數。這「就好像」一系列調用中的每個方法都有一個額外的、不可見的參數。沒有任何方法聲明此參數，只有能夠訪問作用域值對象的方法才能訪問其值（數據）。通過作用域值，可以通過一系列中間方法將數據從調用者安全地傳遞給遙遠的被調用者，這些中間方法不聲明數據的參數，也無法訪問數據。</p><h4>JEP 453：結構化併發（預覽）</h4><p>通過引入用於結構化併發（Structured Concurrency）的 API 來簡化併發編程。結構化併發將在不同線程中運行的相關任務組視為單個工作單元，從而簡化錯誤處理和消除，提高可靠性，並增強可觀察性。這是一個預覽 API。</p><h3>孵化階段功能</h3><h4>JEP 448：Vector API（孵化器第六階段）</h4><p>引入 API 來表示向量計算，這些向量計算在運行時可靠地編譯為支持的 CPU 架構上的最佳向量指令，從而實現優於等效標量計算的性能。</p><h2>參考引用</h2><ul><li>本文同步至: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwaylau.com%2Fjdk-21-released%2F" target="_blank">https://waylau.com/jdk-21-released/</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwaylau.com%2Fjdk-17-released%2F" target="_blank">https://waylau.com/jdk-17-released/</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwaylau.com%2Fjdk-16-released%2F" target="_blank">https://waylau.com/jdk-16-released/</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwaylau.com%2Fjdk-15-released%2F" target="_blank">https://waylau.com/jdk-15-released/</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwaylau.com%2Fjdk-14-released%2F" target="_blank">https://waylau.com/jdk-14-released/</a></li><li>《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fitem.jd.com%2F12868796.html" target="_blank">Java 核心編程</a>》</li><li>開源項目「現代 Java 案例大全」 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwaylau%2Fmodern-java-demos" target="_blank">https://github.com/waylau/modern-java-demos</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 07:09:08 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/waylau/blog/10112170</guid>
            <link>https://my.oschina.net/waylau/blog/10112170</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英偉達開源內核驅動 Nouveau 維護者 Ben Skeggs 辭職]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>英偉達 GPU 內核開源驅動 Nouveau 維護者 Ben Skeggs 在郵件列表宣佈已從 Red Hat <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.freedesktop.org%2Farchives%2Fnouveau%2F2023-September%2F043241.html" target="_blank">辭職</a>，以及<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.freedesktop.org%2Farchives%2Fnouveau%2F2023-September%2F043239.html" target="_blank">退出</a> Nouveau 開發。</p><p><img src="https://static.oschina.net/uploads/space/2023/0920/144359_Q9l6_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/0920/142748_HwYo_2720166.png" referrerpolicy="no-referrer"></p><p>Ben Skeggs 此前一直為 Red Hat 工作，他從 2008 年起就擔任 Nouveau 的維護者。他最後遞交的補丁為內核驅動加入了利用英偉達 GPU 系統處理器 GSP 固件改進 RTX 20/30 系列顯卡的硬件支持，加入對 RTX 40 Ada Lovelace GPU 的初步支持。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FNouveau-Maintainer-Resigns" target="_blank">據介紹</a>，Ben Skeggs 在很大程度上主導了內核驅動程序部分，他在 Red Hat 工作期間一直是 Nouveau 內核驅動程序的第一貢獻者。</p><p>Ben Skeggs 表示，選擇辭去維護者職務是他多年來一直在考慮的個人決定。隨着 GSP-RM 極大地簡化了對未來硬件的支持，以及圍繞 NVK 建立的社區，目前一切都掌握在良好的環境中，所以自己時候去探索其他新事物了。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 06:51:51 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258796/nouveau-maintainer-resigns</guid>
            <link>https://www.oschina.net/news/258796/nouveau-maintainer-resigns</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[喜報！CNCF 基金會宣佈 KCL 成為沙盒項目！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="text-align:center"><img height="238" src="https://oscimg.oschina.net/oscnet/up-a41a03375ca9d8dded0e62d6f4d2c1e9398.png" width="424" referrerpolicy="no-referrer"></p><p><strong>2023 年 9 月 20&nbsp;日，KCL 項目通過了全球頂級開源基金會雲原生計算基金會（CNCF）技術監督委員會評定，正式成為 CNCF 沙箱項目。</strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">這意味着 KCL 得到了雲原生開源社區的認可，保障了項目的中立性，有利於開發者、合作伙伴等共同參與項目建設，協作共贏，併為雲原生應用交付帶來動態配置管理和自動化能力邁出了重要一步！</p><ul><li><p><em><span style="color:#00c9ff">項目地址：https://github.com/kcl-lang/kcl</span></em></p></li><li><p><span style="color:#00c9ff"><em>項目官網：https://kcl-lang.io</em></span></p></li></ul><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">通過進入 CNCF 沙箱，KCL 社區將更多吸引更多開發者和用戶參與共建，進一步推動項目在雲原生業務場景的成熟應用，此外加入 CNCF 將為 KCL 提供一個增強的協作和創新平台。它提供了與處於雲原生技術前沿的多元化開發者、組織和行業專家社區進行交流的機會。我們期待與其他 CNCF 項目進行更多合作，貢獻我們的技術專業知識，並探索更多 CNCF 項目集成的可能性。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><span style="color:#149fe3"><strong><span style="color:#000000"><span style="background-color:#ffffff; color:#149fe3"><strong>｜什麼是 CNCF｜</strong></span></span></strong></span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">CNCF，全稱 Cloud Native Computing Foundation（雲原生計算基金會），是 Linux 基金會旗下的子基金會。CNCF 致力於為雲原生軟件構建可持續生態系統，涉及領域包括存儲、計算、編排、調度、CI/CD、DevOps、服務治理、服務網關等。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><em>比如 Kubernetes 便是 CNCF 最具代表性的項目之一。</em></p><p style="color:#000000; margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#000000"><span style="color:#149fe3"><strong>｜什麼是 CNCF 沙盒項目｜</strong></span></span></strong></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="cncf-sandbox-logo" src="https://kcl-lang.io/zh-CN/assets/images/cncf-sandbox-logo-b53944d3e90e9c2789be2eebcbd36e82.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="243" src="https://oscimg.oschina.net/oscnet/up-6af37f09c1071fb9cf6ac833c05da223186.png" width="1080" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">CNCF 社區將項目分為沙箱項目（Sandbox）、孵化項目（Incubating）、畢業項目（Graduated）。著名的畢業項目有：Kubernetes、Prometheus、Istio、ETCD、Containerd、ArgoCD 和 Helm 等。完整的畢業和孵化項目列表查看地址：</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><em><span style="color:#00c9ff">https://www.cncf.io/projects/</span></em></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">Sandbox 是 CNCF 創建的，旨在為開源項目提供一個有益的、中立的家園，以促進開源項目的合作與開發。入選沙箱的項目，是被 CNCF TOC 認可的，並值得進行實驗和開發的潛力項目。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">Sandbox 對應的是 CNCF 社區早期項目，列表為：<span style="color:#00c9ff"><em>https://www.cncf.io/sandbox-projects/</em></span>。進入 Sandbox 需要 66% 以上的 TOC（技術委員會）成員贊成，即全部 11 人<span>&nbsp;</span><span style="color:#00c9ff"><em>https://github.com/cncf/toc#members</em></span><span>&nbsp;</span>中的 8 人投贊成票。</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><strong>｜什麼是 KCL｜</strong></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">KCL 是一個開源的基於約束的記錄及函數語言，期望通過成熟的編程語言技術和實踐來改進對大量繁雜配置比如雲原生 Kubernetes 配置場景的編寫，致力於圍繞配置的模塊化、擴展性和穩定性，打造更簡單的邏輯編寫體驗，構建更簡單的自動化和生態集成路徑。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">項目主要里程碑如下：</p><ul><li><p>2022 年 5 月，KCL 正式開源</p></li><li><p>2023 年 6 月，KCL 正式成為 CNCF Landscape 項目</p></li><li><p>2023 年 9 月，KCL 由 CNCF 應用交付 TAG 進行審核並通過 TOC 投票，順利成為 CNCF Sandbox 項目 -&nbsp;<span style="color:#00c9ff"><em>https://github.com/cncf/sandbox/issues/48</em></span></p><p style="margin-left:0; margin-right:0">&nbsp;</p></li></ul><p style="text-align:center"><span style="color:#149fe3"><strong>｜為什麼需要 KCL｜</strong></span></p><p><span style="color:#149fe3"><span style="background-color:#ffffff; color:#000000">正如記錄音樂有五線譜，存儲時間序列數據有時序數據庫一樣，在雲原生配置和自動化的特定問題域內，我們使用專用配置和策略語言用於編寫和管理規模化複雜配置及策略。不同於混合編寫範式、混合工程能力的高級通用語言，專用語言的核心邏輯是以收斂的有限的語法、語義集合解決領域問題近乎無限的變化和複雜性，將複雜配置和策略編寫思路和方式沉澱到語言特性中。</span></span></p><p>&nbsp;</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">此外，KCL 期望通過更現代化的聲明式配置語言和工具，<strong>在輕量級客戶端<strong>雲原生</strong>動態配置領域</strong>填補配置語言及工具的空白並解決如下問題：</p><ul><li><p><strong>維度爆炸</strong>: 大多數靜態配置如雲原生領域的 Kubernetes YAML 配置需要為每個環境單獨進行配置；在最糟糕的情況下，它可能引入涉及環境交叉鏈接的難以調試的錯誤，穩定性和擴展性都較差。</p></li><li><p><strong>配置漂移</strong>: 對於不同環境的靜態管理應用程序和基礎設施配置的方式，往往沒有標準的方式去管理這些動態的不同環境的配置，採用非標準化的方法比如腳本和膠水代碼的拼盤，會導致複雜度呈指數增長，並導致配置漂移。</p></li><li><p><strong>認知負擔:&nbsp;</strong><span style="background-color:#ffffff; color:#010101">Kubernetes 等作為構建</span><span style="background-color:#ffffff; color:#010101">平台的平台技術手段在底層統一基礎架構細節方面出色，但是缺乏更上層的應用軟件交付抽象，對於普通開發者認知負擔較高，影響了更上層應用開發者的軟件交付體驗。</span></p><p>&nbsp;</p></li></ul><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">針對如上問題，KCL 期望提供如下能力:</p><ul><li><p>通過<strong>代碼抽象</strong>等手段屏蔽基礎設施和平台的細節和複雜性，降低研發者<strong>認知負擔</strong></p></li><li><p><strong>編輯</strong>和<strong>校驗</strong>已有的存量配置或模版，直接解決雲原生小配置場景問題如 Helm Chart 配置硬編碼問題，但遠不止如此</p></li><li><p>通過配置語言無副作用地<strong>管理跨團隊的大規模配置數據</strong>，提升團隊協作效率</p><p>&nbsp;</p></li></ul><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">具體來説，KCL 可以</p><ul><li><p>在代碼層面提升<strong>配置語義驗證</strong>的能力，比如 Schema 定義、字段可選/必選、類型、範圍等配置檢查校驗能力</p></li><li><p><span style="background-color:#ffffff; color:#010101">提供</span><strong>配置分塊編寫、組合和抽象的能力</strong><span style="background-color:#ffffff; color:#010101">，比如結構定義、結構繼承、約束定義和配置策略合併等能力</span></p></li><li><p>用<strong>現代編程語言的方式</strong>以<strong>編寫代碼</strong>的方式提升配置的靈活度，比如條件語句、循環、函數、包管理等特性提升配置重用的能力</p></li><li><p>提供<strong>完備的工具鏈支持</strong>，豐富的 IDE 插件、語言和生態工具鏈支持用以降低上手門檻，提升使用體驗</p></li><li><p>通過<strong>包管理工具</strong>&nbsp;和&nbsp;<strong>OCI Registry</strong>&nbsp;使得配置以更簡單的方式在不同團隊/角色之間分享，傳播和交付</p></li><li><p>提供<strong>高性能</strong>的編譯器滿足規模化配置場景訴求，比如滿足<span style="color:#000000">由一份基線配置根據部署上下文生成不同環境不同拓撲的配置的渲染性能以及配置自動化修改性能訴求</span></p></li><li><p>通過<strong>多語言 SDK</strong>，<strong>KCL 語言插件</strong>等手段提升其<strong>自動化</strong>集成能力，在發揮配置及策略編寫價值的同時顯著降低 KCL 的學習成本<img src="https://kcl-lang.io/zh-CN/assets/images/kcl-overview-315e5b285928477465eb35cd948465b8.png" referrerpolicy="no-referrer"></p></li></ul><p style="text-align:center"><img height="419" src="https://oscimg.oschina.net/oscnet/up-14f88d56dc509bac9692814321dfe59bc98.png" width="702" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">除了語言自身，KCL 還提供了許多額外的工具如格式化，測試、文檔等工具幫助您使用、理解和檢查編寫的配置或策略；通過 VS Code 等 IDE 插件，包管理工具和 Playground 降低配置編寫和分享的成本；通過 Rust, Go, 和 Python 多語言 SDK 自動化地管理和執行配置。</p><p>&nbsp;</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:center"><strong>｜KCL 能做什麼｜</strong></p><h3>動態配置管理<img alt="standalone-kcl-form" src="https://kcl-lang.io/zh-CN/assets/images/standalone-kcl-form-499fd62a1d02c6c23b7ed8d4914c455b.png" referrerpolicy="no-referrer"></h3><p style="text-align:center"><img height="1194" src="https://oscimg.oschina.net/oscnet/up-aed023a32ce859b08a2a646d966823394de.png" width="2252" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">作為一種配置語言，KCL 為應用程序和平台開發人員/SRE 提供的最重要的功能是動態配置管理。通過代碼抽象，我們可以構建以應用為中心的模型屏蔽複雜的基礎設施和平台概念，為開發人員提供一個以應用程序為中心且易於理解的界面。此外，KCL 還允許平台人員快速擴展和定義自己的模型，並且這些模型可以通過 OCI 註冊表進行分享和複用。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:center"><img alt="krm-kcl-form" src="https://kcl-lang.io/zh-CN/assets/images/krm-kcl-form-3e0ac516e88e65ac80c211f625bc1f34.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="1076" src="https://oscimg.oschina.net/oscnet/up-b807f87f96d5eaddb0d1e2143b8f6c2ddae.png" width="2166" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">此外，KCL 還支持與 Kubernetes Resource Model (KRM) 規範直接集成，KRM KCL 是一個通用的配置模型規範，用於描述和管理各種雲原生資源，如容器、Pod、服務的配置操作和抽象等。KRM KCL 規範提供了一種統一的方式來定義和管理這些資源，使得它們可以在不同的環境中進行移植和複用。它建立在一個完全開放的 Kubernetes 世界當中，幾乎不與任何編排/引擎工具或者 Kubernetes 控制器綁定，它在關注點分離的基礎上允許平台人員擴展自己的抽象，配置編輯和驗證邏輯，並提供一個開發者友好的配置管理界面。</span></p><h3>GitOps 集成</h3><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><img alt="gitops" src="https://kcl-lang.io/zh-CN/assets/images/gitops-bbba7c639b8c999d6cbc87d8f1c2cc15.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="1018" src="https://oscimg.oschina.net/oscnet/up-3d1eee757adb63965049e779673d57f60e2.png" width="2182" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">無論是使用獨立的 KCL 還是 KRM KCL 配置形式，我們都支持 KCL 與各種以及 CI/CD 和 GitOps 工具的集成，KCL 允許開發人員以聲明式的方式定義應用程序所需的資源，通過將 KCL 和 GitOps 工具相結合可以幫助我們更好地實現基礎設施即代碼（IaC），提高部署效率，簡化應用程序的配置管理。</span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">使用 GitOps，開發人員和運維團隊可以通過分別修改應用和配置代碼來管理應用程序的部署，GitOps 工具鏈可以基於 KCL 的自動化能力實現對配置的自動更改，從而實現持續部署並確保一致性。如果出現問題，可以使用 GitOps 工具鏈快速回滾。</span></p><p style="margin-left:0; margin-right:0; text-align:center"><span style="color:#1c1e21"><strong>｜生態集成｜</strong></span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="integration" src="https://kcl-lang.io/zh-CN/assets/images/integration-e4e36aeb48fcc6de8aae0c00e5070723.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="1048" src="https://oscimg.oschina.net/oscnet/up-0fc196549ec403da19cd3616f384311b5c4.png" width="2192" referrerpolicy="no-referrer"></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify">除了與 ArgoCD 等 GitOps 自動化工具進行集成，作為 CNCF 的項目，KCL 還與 CNCF 其他眾多生態項目進行了集成，比如<span style="background-color:#ffffff; color:#010101">為現有的 CNCF 生態配置管理工具項目如 Helm、Kustomize、kpt 等提供 KCL 插件，在運行時提供 KCL Kubernetes Operator，以滿足不同場景的配置管理需求等。此外我們還提供如下集成支持：</span></p><ul><li><p><strong>多語言支持</strong>：我們提供了多語言 SDK，幫助用戶以不同的語言操作 KCL，並將其集成到自己的應用程序中。</p></li><li><p><strong>包管理支持</strong>：我們提供了 KPM 包管理工具可以將 KCL 配置通過 docker hub, GitHub 容器註冊表進行分發和複用。</p></li><li><p><strong>Schema 生態支持</strong>：我們支持其他生態系統的 Schema 一鍵遷移到 KCL Schema，如 Go/Rust 結構定義、JsonSchema、Protobuf、OpenAPI、Terraform Provider Schema 等。</p><p>&nbsp;</p></li></ul><p style="margin-left:0; margin-right:0; text-align:center"><strong>｜落地實踐｜</strong><img alt="practice-krm-kcl" src="https://kcl-lang.io/zh-CN/assets/images/practice-krm-kcl-1ee09831b8dc50884175002184e44063.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="1040" src="https://oscimg.oschina.net/oscnet/up-7d596c604743a5db35c79b956f46e24de48.png" width="3538" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">首先，KCL 作為雲原生領域內的一個小語言，它可以直接被用於解決場景中簡單的小問題，如通過 KCL 模型直接為 Kubernetes 資源注入環境變量等配置而不是編寫腳本，通過 KCL 模型和 Helm KCL 插件無侵入處理 Helm Chart 的硬編碼配置而不是 Fork Helm Chart 直接修改等。</span></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="practice-konfig-gitops" src="https://kcl-lang.io/zh-CN/assets/images/practice-konfig-gitops-32092b98b555d3597ce893c7a74eca5b.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="892" src="https://oscimg.oschina.net/oscnet/up-3d8b4753e0110a53091fd663052e661618c.png" width="1812" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">其次，KCL 也可以被用於企業內部與各種 CI/CD 和應用配置交付引擎比如 KusionStack 相配合，實現關注點分離、以應用為中心的可編程模型界面和 GitOps 流程，以簡化當今混合多雲環境中規模化應用的部署和運維操作，提升發佈運維效率和開發者體驗。</span></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">當然，KCL 能夠解決的問題和實踐的場景遠不止如此，我們會陸續分享社區中採用者的最佳實踐，也歡迎大家加入我們的社區進行進一步交流和討論 ❤️。<em>https://github.com/kcl-lang/community</em></span></p><p style="margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><strong>｜社區動態｜</strong></p><p style="margin-left:0; margin-right:0; text-align:center"><img alt="community" src="https://kcl-lang.io/zh-CN/assets/images/community-07fc26fccb17f189e8cbf91ef011486a.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img height="1092" src="https://oscimg.oschina.net/oscnet/up-18bb238df61c66725265bdbb393c4b67918.png" width="2166" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#000000">在 KCL 開源短短的這一年裏，我們發佈了許多版本，並與全世界許多貢獻者和維護者合作構建了 KCL 社區，並得到了一些採用者比如有贊和華為等公司的認可，通過加入 CNCF，我們的目標是提高項目的知名度並促進社區採用和參與，因為強大且知名的基金會組織對於推動語言生態系統的發展至關重要。</span></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:#000000">此外，我們在開源社區也收穫了來自全世界包括北美、歐洲、澳大利亞和台灣各地小夥伴的認可，感謝一路陪伴 KCL 走來的各位用戶和社區研發者，同時也歡迎更多的小夥伴加入到我們的社區一起共建 ❤️</span></p><p style="margin-left:0; margin-right:0; text-align:center">&nbsp;</p><p style="text-align:center"><img height="467" src="https://oscimg.oschina.net/oscnet/up-1fc2d01dcb1f21fb82ecdfa27de411b1019.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><strong>｜結語｜</strong></p><p style="margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:#000000">對 KCL 來説，加入 CNCF 並不代表成功，它意味着一個新的開始，我們將和社區的小夥伴們一起努力打造更好的 KCL 語言、工具鏈和 IDE 體驗！最後，也歡迎大家加入我們的社區進行交流和貢獻 👏👏👏</span></p><p style="margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:center"><span style="background-color:#ffffff; color:#000000"><strong>｜其他資源｜</strong></span></p><ul><li><p><span style="color:#149fe3"><em><span>KCL 網站</span></em></span><span style="color:#149fe3"><em><span style="color:#149fe3">:</span></em><em><span style="color:#149fe3">&nbsp;<span style="color:#149fe3">https://kcl-lang.io/</span></span></em></span></p></li><li><p><span style="color:#149fe3"><em><span>KusionStack 網站:&nbsp;</span></em></span><span style="color:#149fe3"><em><span style="color:#149fe3">https://kusionstack.io/</span></em></span></p><p>&nbsp;</p></li><li><p><span style="color:#3498db"><em>KCL 社區: https://github.com/kcl-lang/community</em></span></p></li><li><p><span style="color:#149fe3"><em>KCL 2023 路線規劃: https://kcl-lang.io/docs/community/release-policy/roadmap</em></span></p></li><li><p><span style="color:#149fe3"><em>KCL GitHub Issues: https://github.com/kcl-lang/kcl/issues</em></span></p></li><li><p><span style="color:#149fe3"><em>KCL GitHub Discussion: https://github.com/orgs/kcl-lang/discussions</em></span></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 05:53:21 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258784/kcl-cncf-sanbox</guid>
            <link>https://www.oschina.net/news/258784/kcl-cncf-sanbox</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Windows 「畫圖」應用支持圖層和透明度]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>微軟於 9 月 19 日向 Windows 預覽體驗通道的部分用戶 (Dev &amp; Canary) 推送新版畫圖應用，版本號為 v11.2308.18.0。</p><p>該版本畫圖支持圖層功能，用戶可以在畫布上添加、刪除和管理圖層，藉助圖層實現形狀、文本和其他圖像元素堆疊，創造出更為複雜的圖像內容。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8ebce4495505d89a69e4bf953ca061713f3.png" referrerpolicy="no-referrer"></p><p><em>▲ 通過工具欄中的新圖層按鈕打開側面板，給畫布添加圖層，或更改圖層順序</em></p><p>此外新版畫圖應用還引入了圖像透明度支持，允許用戶打開、保存透明背景的 PNG 文件，在編輯 PNG 文件時畫布也會讓透明背景突出顯示。</p><p>微軟稱用戶可以打開和保存透明 PNG，在畫布上擦除內容將是真的刪除掉內容，而不是塗成白色。透明度支持也可以和圖層功能配合使用。如果有多個圖層，擦除上一個圖層中的內容將會顯示下一個圖層中的內容。</p><p><img height="1403" src="https://static.oschina.net/uploads/space/2023/0920/112535_rsxa_2720166.gif" width="2063" referrerpolicy="no-referrer"></p><p>來源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.windows.com%2Fwindows-insider%2F2023%2F09%2F18%2Fpaint-app-update-adding-support-for-layers-and-transparency-begins-rolling-out-to-windows-insiders%2F" target="_blank">Windows Blog</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 03:29:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258765/paint-app-adding-support-for-layers-and-transparency</guid>
            <link>https://www.oschina.net/news/258765/paint-app-adding-support-for-layers-and-transparency</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GraalVM for JDK 21]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>GraalVM for <a href="https://www.oschina.net/news/258730/jdk-21-lts-ga" target="_blank">JDK 21</a> 已正式發佈。</p><p>此版本新增了許多 GraalVM 特性以及 Java 21 特性。例如，GraalVM 現在完全支持虛擬線程，包括原生鏡像 (Native Image) —— 不再需要將它們作為預覽功能啓用。</p><p>下載地址：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.graalvm.org%2Fdownloads%2F" target="_blank">https://www.graalvm.org/downloads/</a></u></p><blockquote><p>GraalVM 是一個高性能的 JDK 發行版。它旨在加速用 Java 和其他 JVM 語言編寫的應用程序的執行，同時還為 JavaScript、Python、基於 LLVM 的語言（如 C 和 C++）以及許多其他流行編程語言提供運行時。</p><p>此外，GraalVM 為編程語言之間提供了高效互操作性，並將 Java 應用程序提前編譯為本機可執行文件，從而加快啓動時間並降低內存開銷。</p></blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-86c0f057e1251e80b7794bdf9b2c63f1b3d.png" referrerpolicy="no-referrer"></p><p>下面是 GraalVM 原生鏡像 (Native Image) 的部分性能表現：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8079846a58983f1f61ea7c284a89154e25d.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0d97fd8afba7362cc3d9bd7775a8aaf1cf6.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-23b77027593796f8c1c0d2fc95d7d57b30e.png" referrerpolicy="no-referrer"></p><p>總而言之，使用 Native Image 可以最大限度地提高所有方面性能，包括峯值吞吐量、延遲、內存使用、啓動和打包大小。</p><p>此外，此版本實現了 Java Vector API (JEP 338) 操作的初步優化。 JVM 上的多個操作現在儘可能轉換為高效的機器指令。此優化默認啓用（可以使用<code>-Dgraal.OptimizeVectorAPI=false</code>禁用它）。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2Fgraalvm%2Fgraalvm-for-jdk-21-is-here-ee01177dd12d" target="_blank">詳情查看發佈公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 03:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258762/graalvm-for-jdk-21</guid>
            <link>https://www.oschina.net/news/258762/graalvm-for-jdk-21</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度發佈國內首個「產業級」醫療大模型靈醫大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>百度<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FFaCGdrPvxTowa_MojEALkQ" target="_blank">宣佈</a>發佈國內首個「產業級」醫療大模型 —— 靈醫大模型，並面向大健康上下游產業開放靈醫大模型測評、試用，推動醫療行業的數字化和智能化進程。</p><p>根據介紹，靈醫大模型以文心大模型為技術底座；是國內首個「產業級」醫療大模型，也是國內首個實現商業化落地的醫療大模型。其目前已與固生堂、零假設等達成合作，並定向向公立醫院、藥械企業、互聯網醫院平台、連鎖藥房等 200 多家醫療機構開放。</p><p><img height="272" src="https://oscimg.oschina.net/oscnet/up-4964fbe060242e73d7f92ad8915976ad85b.png" width="500" referrerpolicy="no-referrer"></p><p><img height="183" src="https://oscimg.oschina.net/oscnet/up-ba7bce464af89384b6be76746f174685c17.png" width="500" referrerpolicy="no-referrer"></p><p>靈醫大模型能夠結合自由文本秒級生成結構化病歷，根據醫患對話精準分析生成主訴、現病史等內容。此外，靈醫大模型也是業內唯一支持多篇中英文文獻同時解析的大模型，基於文獻解析內容實現智能問答。</p><p>在輔助診療方面，靈醫大模型可實現通過多輪對話瞭解病人病情，實時輔助醫生確診疾病，推薦治療方案，提升就診全流程的效率和體驗，併成為患者的 24 小時「健康管家」，提供智能客服服務。此外，靈醫大模型還能為藥企提供多項賦能，包括專業培訓、醫藥信息支持等等。</p><p>百度大健康事業羣 AI 產業部總經理劉軍偉表示，「模型即服務，靈醫大模型希望打造 AI 原生的多層次產品體系。基於數據預訓練、微調的靈醫大模型具備強大的開放能力，支持生態夥伴進行 API 調用、插件集成，為終端用戶提供完整服務。」</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 03:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258761</guid>
            <link>https://www.oschina.net/news/258761</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[國家安全部：美國 2009 年開始入侵華為總部服務器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>「國家安全部」微信公眾號 20 日發佈文章《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FFNOb9IAnMe7-wiDTA6HlxQ" target="_blank">起底美國情報機關網攻竊密的主要卑劣手段</a>》，其中指出：近日，中國國家計算機病毒應急處理中心通報，在處置西北工業大學遭受網絡攻擊時，成功提取了名為「二次約會」的間諜軟件樣本。該軟件為美國國家安全局開發的網絡「間諜」武器，在遍佈全球多國的上千台網絡設備中潛藏隱祕運行。</p><p>美國國家安全局，通過其下屬的特定入侵行動辦公室（TAO）以及先進的武器庫，多次對我國進行體系化、平台化攻擊，試圖竊取我國重要數據資源。</p><p><strong>2009 年，特定入侵行動辦公室就開始入侵華為總部的服務器並持續開展監控</strong>。2022 年 9 月，又被發現長期持續地對包括西北工業大學在內的國內網絡目標實施了上萬次惡意網絡攻擊，控制了數以萬計的網絡設備，竊取大量高價值數據。</p><p>以下為全文</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-556538ddac19db2e1421a400d3f849bb7e3.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 02:38:29 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258755</guid>
            <link>https://www.oschina.net/news/258755</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[騰訊開源 SD 工作流保存插件 LightDiffusionFlow]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>騰訊<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F_Jpzl0ZXvQ7t5LZquEipVA" target="_blank">宣佈</a>開源 SD 工作流保存插件 LightDiffusionFlow。這是一個基於 AI 繪畫開源平台 StableDiffusion webUI（簡稱 SD）的開源插件，它可以幫助你一鍵保存所有工作流數據，下次使用只需拖入 Flow 文件，就能快速復現整個工作流，就像使用 Photoshop 的 PSD 樣機文件那樣方便。</p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-761ae50dada20a421f4f5a91e5852c6d720.png" width="500" referrerpolicy="no-referrer"></p><h4>功能</h4><ul><li><strong>保存與復現工作流</strong></li></ul><p>一鍵保存或復現 SD 繪畫工作流，包括模型、提示詞、墊圖和其他第三方插件的參數設置。</p><ul><li><strong>支持讀取 PNG Info</strong></li></ul><p>兼容讀取圖片內置的 PNG Info，並自動還原到 UI 界面上，並且支持解析和還原 ControlNet 設置。</p><ul><li><strong>自動搜索模型</strong></li></ul><p>導入 Flow 文件時，會自動在 Civitai 搜索相關模型，匹配對應模型並提供下載鏈接。</p><ul><li><strong>支持第三方插件</strong></li></ul><p>理論上支持保存所有第三方插件的參數。</p><ul><li><strong>SD 初學者友好</strong></li></ul><p>針對 SD 初學者，提供一些可靠的工作流文件，一鍵載入，支持自定義調參。</p><h4><strong>價值</strong></h4><ul><li><strong>針對 SD 初學者</strong></li></ul><p>通過 Flow 文件，可以快速上手 SD，極大的降低 SD 的學習和使用門檻，快速提升 AI 繪畫能力。</p><ul><li><strong>針對 SD 進階者</strong></li></ul><p>通過 LightDiffusionFlow，可以快速保存優質的工作流，快速複用一鍵復現，減少繁瑣的操作成本，並可以更好得傳播 AI 繪畫能力。</p><ul><li><strong>針對企業團隊</strong></li></ul><p>通過 LightDiffusionFlow，可以針對行業和業務屬性，建立一系列可複用的 AI 繪畫工作流，快速建立團隊的 AI 繪畫能力，實現降本增效。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 02:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258751</guid>
            <link>https://www.oschina.net/news/258751</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[終極 PK ！第十二屆「麒麟杯」決賽入圍名單公佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">第十二屆「麒麟杯」全國開源應用軟件開發大賽在中國軟件行業協會、開放原子開源基金會、中國計算機學會開源發展委員會、中國開源軟件推進聯盟的指導下，由 openKylin 開源社區、麒麟軟件有限公司、國防科技大學、信創海河實驗室聯合主辦。</span></span></p><div>
 &nbsp; 
 <p style="margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-fb56d4a3b66cf3f3f0e70ee928fb7072945.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">大賽自報名開啓以來，受到了全國各地高校學子的廣泛關注，為了讓學生深入瞭解並加入到開源應用軟件的開發中，大賽組委會在報名階段先後於全國不同高校舉辦</span><strong><span style="color:#0052ff">11 場高校沙龍</span></strong><span style="color:#000000">，幫助大家進一步瞭解大賽；並推出</span><strong><span style="color:#0052ff">1v1 輔導機制</span></strong><span style="color:#000000">，給每個賽隊都配備一個輔導羣，進行一對一溝通輔導。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">截止 2023 年 9 月 17 日，第十二屆「麒麟杯」軟件開發大賽初賽評審工作正式結束，經過為期兩天的專家評選，最終有</span><strong><span style="color:#0052ff">20</span></strong><span style="color:#000000">支隊伍從來自全國的 60+高校、345 組參賽隊伍中脫穎而出，晉級決賽，現對入圍名單及作品進行公示。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">如有疑問，請及時與組委會聯繫。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-98bf1bbd14ecfd07210eee08f740e2acbeb.png" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">當前，初賽階段已結束，恭喜以上</span><strong><span style="color:#0052ff">20</span></strong><span style="color:#000000">組隊伍進入決賽【2023.9.19-2023.10.19】，請相關同學繼續完善參賽作品，決賽期間專家們也會針對作品進行進一步的指導，輔助同學們完善作品。</span></span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">希望入圍決賽的同學們能夠再接再厲，精益求精，完善作品的同時也可以收穫不一樣的自己！沒有晉級的隊伍也不要氣餒，期待下一屆「麒麟杯」再相遇~有關大賽更多詳情可進入 openKylin 官網查看。</span></span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 20 Sep 2023 01:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258744</guid>
            <link>https://www.oschina.net/news/258744</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[BoringDB —— 基於 SQLite 的高性能鍵值數據庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>BoringDB 是基於 SQLite 採用 Rust 編寫的高性能鍵值數據庫。</p><p>BoringDB 有一個相當奇特的設計——它是功能非常齊全的 SQLite，提供了一個簡單的鍵值 API。處理索引、ACID 事務等所有繁重工作。</p><p>SQLite 具有極高的可靠性，BoringDB 添加了一個緩存層和寫入批處理，使得每秒操作數較高的鍵值任務（例如處理稀疏 Merkle 樹分支）相當快。</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 19 Sep 2023 10:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/boringdb</guid>
            <link>https://www.oschina.net/p/boringdb</link>
        </item>
        <item>
            <title>
                <![CDATA[任正非：我們即將進入第四次工業革命、蘋果是華為的老師]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，ICPC 基金會主席及教練和世界計算機競賽的金牌獲得者前往華為考察。在此期間，華為創始人任正非表示，華為一直堅持開放和擁抱全球人才的原則，願意與學術界共同培養信息領域的優秀人才。華為希望通過贊助競賽和組織交流活動，促進全球信息產業的發展和各國信息領域人才的培養。</p><p>任正非強調，除了 ICPC 競賽，華為也願意贊助其他學科的競賽，以此推動基礎科學的人才培養。華為歡迎 ICPC 在華為園區舉辦比賽，並將對年輕人開放研發區，讓他們體驗華為的工作環境。同時，華為願意麪向全球優秀青少年開放技術難題和實習機會，幫助他們接觸到華為的前沿技術，從而促進他們的成長和發展。</p><p>任正非表示，未知就叫科學，當今世界，科學和技術的邊界越來越接近，科學轉化為技術的時間越來越短，如果等到大學把理論完全研究明白再去進行技術開發，就已經沒有先發優勢，沒有競爭力了，所以華為每年大約投入 30-50 億美金用於基礎理論研究，與大學一起共同研究看似無用的科學。</p><p>任正非表示，<strong>我們即將進入第四次工業革命，基礎就是大算力</strong>，第四次工業革命波瀾壯闊，其規模之大不可想象，今天的年青人是未來大算力時代的領袖，二三十年之內的人工智能革命，一定會看到年青人星光閃耀。</p><p>他還説道，華為一直堅持開放和擁抱全球人才的原則，願意與學術界共同培養信息領域的優秀人才。華為希望通過贊助競賽和組織交流活動，促進全球信息產業的發展和各國信息領域人才的培養。</p><p>此外，任正非與 ICPC（國際大學生程序設計競賽）基金會及教練和金牌獲得者的學生的談話紀要也已公開。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a1c508c2ce7831689f3da34cc08ddee6dcb.png" referrerpolicy="no-referrer"></p><p>▲<u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ficpc.pku.edu.cn%2Fxwdt%2F152848.htm" target="_blank">http://icpc.pku.edu.cn/xwdt/152848.htm</a></u></p><hr><p>本次談話紀要全文：</p><p>感謝 ICPC 基金會主席及十幾位教練帶了 58 位各國世界計算機競賽的金牌獲得者，來我們公司考察與競賽。我們會繼續支持你們的全球活動，也希望通過你們將全球大學生數學、物理、生物…… 競賽引進來，我們同樣給予贊助與支持。</p><p><strong>一、我們即將進入第四次工業革命，基礎就是大算力，今天的年青人，明天有可能就是第四次工業革命的領袖。我們支持競賽的目的是要為年青人搭建一個綻放生命火花的舞台。</strong></p><p>團隊協作既是競賽致勝的基礎，也是維持生存的基礎，更是人類更加繁榮的需要。我們需要彼此緊密合作，大家互相聚在一起，相互激發和擠壓，就會有新的科學技術爆發出來。這次，來自 25 個國家的精英們歡聚一堂，我們認識了，就有了共同交流的平台。教練與學生、學生與學生、賽隊與賽隊之間可以互相激發，可能就留下了火種，擦出了火花，年青人們把火種帶回祖國，去點燃了自己國家的大火。新的科學技術一定能創造更多的社會財富，消除貧困，使人類的生活能夠改善，走共同富裕的道路。</p><p>第四次工業革命波瀾壯闊，其規模之大不可想象。今天的年青人是未來大算力時代的領袖，人類社會對你們具有很大的期望，二三十年之內的人工智能革命，一定會看到你們星光閃耀。</p><p><strong>二、華為一貫秉持發現、發展人才，但絕不壟斷人才的原則。堅持開放，擁抱全世界人才。</strong></p><p>世界的發展離不開技術的進步與人才的交流，更快的速度和更好的人才是國家繁榮的基礎。華為願意與學術界共同培養信息領域的優秀人才，但絕不壟斷人才。這些人才在華為鍛鍊、學習、成長之後，將來各自迴歸他們的祖國，也有利於各國信息產業的振興。</p><p><strong>三、對於競賽，我們會長期穩定地支持發展，贊助全球和各區域大賽的組織。華為願意贊助 ICPC 教練、參賽人員等來中國交流。華為資助競賽不以華為為目的。我們不僅要堅持，還要加大對這類活動的贊助。</strong></p><p>支持未來 ICPC 全球賽在中國的舉辦，並邀請優秀選手和教練來中國多走走、多看看。比如北京、深圳、杭州、上海、貴州……，也可以去新疆、西藏等邊疆省份感受一下，還有一些小縣城也非常漂亮，值得去看看，瞭解中國的產業發展與城市建設；坐坐高鐵，體會中國的發展速度；喝喝咖啡，吃吃燒烤，感受中國的美食和文化氛圍。</p><p>除了支持或協辦全球軟件大賽，我們也要支持其他學科的競賽，例如信息、數學、物理、化學、生物學、神經網絡…… 等，對這些學科的青少年逐步開始支持，激發對科學研究的興趣，從而促進基礎科學的人才培養。</p><p><strong>四、我們會開放全球的園區，支持 ICPC 在華為園區舉辦的比賽，同時也會對大家開放研發區，邀請年輕人才來體驗華為的工作環境。</strong></p><p>華為願意麪向全球優秀青少年開放信息領域的技術難題、開放實習與研究機會，幫助接觸華為的端邊管雲平台、參與攀登珠峯的基礎和前沿探索；也可以通過多種渠道，比如組織難題挑戰賽事、黃大年茶思屋的開放研討等，讓青少年瞭解產業現實的挑戰，在做題突破中能夠得獎，這樣就節省了勤工儉學的時間用於更好地學習，通過這個過程，也能讓年輕人更好地成長。</p><hr><h3>現場問答環節：</h3><p>俄羅斯 ICPC 教練：我作為 ICPC 冠軍隊教練已經 10 年了。很多公司支持人才發展，但可能因為與業務沒有直接的關係，他們就不太願意支持大規模競賽如 ICPC。自從華為在本地建立起了資源中心，支持競賽，一切都發生了很大變化。我發現華為不僅是為了招聘人才，更多的是幫助本地社區去發展人才。我們獲得了競賽部門的大力支持，我的冠軍團隊也有 25 人加入了華為各個部門。我想問，華為為什麼覺得支持競賽對業務發展這麼重要，或者是必須要做的事情呢？</p><p><strong>任正非：</strong>俄羅斯是一個偉大的國家。葉卡捷琳娜引進了西方的繪畫、音樂、哲學……，同一個時代，中國清朝走的是閉關鎖國的道路，因此俄羅斯早於中國實現了工業化。在此基礎上，基礎理論研究得到前蘇聯的重視，也取得了很大的成就，例如茹可夫斯基、門捷列夫、羅蒙諾索夫、波波夫……。近期比如，前蘇聯六十年代有位科學家彼得・烏菲姆契夫，最先發現鑽石切面有無線電反射功能，但前蘇聯研究了半天覺得這個東西沒用，為什麼？因為做不到，沒有意義，所以批准了數學家的論文公開發表。但美國人看了以後，如獲至寶，花 20 年時間把 F22 隱形飛機做出來了。</p><p>華為公司雖然是一個商業公司，但是並不是唯利是圖的公司。比如説我們資助競賽是真心誠意的，並非是要獲得人才，以後我們還加大競賽活動的贊助。剛才跟 Bill 主席喝咖啡，我們講了希望通過你們把信息、數學、物理、化學、生物學、神經網絡…… 的競賽都可以引到中國來。跟我們有關無關，我們都可以給予支持。就像 Bill 主席講的，科學技術要用於創造更多的社會財富，消除貧困，走共同富裕的道路。</p><p>Sun Teck（新加坡國立大學副教授、IOI 成員，新加坡信息奧賽主席，前 ICPC 賽隊教練）：首先，感謝華為大力支持我們訓練學生並參加競賽。其次我想介紹一下另外兩個競賽組織：一是 IOI（國際信息學奧賽），是 ICPC 的下游合作伙伴，主要是去發現、培養人才。IOI 遇到一些問題，90 多個國家加入，仍有柬埔寨、老撾、文萊、緬甸等很多國家沒有加入，這些國家需要我們的支持，這和華為傳播信息技術、連接世界的願景也是一致的。已經加入 IOI 的國家也面臨一些問題，比如沒有足夠資源去培訓學生因而很少贏得獎項，從而沒有機會參與到 ICPC，希望華為能夠幫助 IOI 的發展。另外一個是 EGOI（歐洲女生信息學奧賽），是專門為女子辦的，這是一個很好的趨勢。今天的 58 人裏只有一位女生，佔不到 2%，關於如何實現競賽中的性別平衡，希望華為能夠支持。</p><p><strong>任正非：</strong>新加坡立國時，李光耀定了兩個最重要的政策，第一確定了國家語言為英文，連接了一個非常大的世界；另一語言是漢語，準確來説説是普通話和簡體字，這樣就把兩個大世界都連起來了。今天我們進行計算機競賽，就要統一計算機的語言，統一大算力時代的標準，通過我們喝咖啡，通過我們交流，消除我們之間的障礙和隔閡。</p><p>這次我們把參加的 25 個國家連接起來了，星星之火可以燎原，點燃你們國家的大火。歡迎教練和年輕人，隨時到中國來，你們已經加了我們很多同事、朋友的通信方式了，可以保持溝通和聯繫。今天你們這些年青人就是我們永久的夥伴。除了 ICPC，我們也要支持 IOI, 以及數學、物理、化學、生物學、神經網絡等學科的競賽，一起促進基礎科學的人才培養。</p><p>Meza（智利聖瑪利亞理工大學計算機科學教授、ICPC 拉美地區主管）：我感到很驕傲，因為一位拉美選手獲得了本次冠軍，當然我們還有很多優秀學生。或許是因為美洲有相關限制，在拉美，華為的工作機會不多，華為是否歡迎拉美人才來實習，比如來中國會不會有一些系統化的支持？</p><p><strong>任正非：</strong>無論是拉美還是其他國家的優秀人才，我們都歡迎到華為來。我們有個網絡平台叫「黃大年茶思屋」，學生可以在上面聯繫相關專家溝通，如果專家覺得你應該到中國來面對面地一起實習，都是可以的。舉一個簡單的例子，美國傾舉國之力打擊的 5G 是誰發明的？其中的 Polar 碼是誰發明的？是土耳其的 Arikan 教授。他十幾年前發表了一篇數學論文，發表兩週以後我們發現了這篇文章，就組織了數千科學家和專家研究解析並工程化，才做出了今天領先世界的 5G。所以，天涯何處無芳草？到處都有優秀人才，當然大概率是在美國。天才從哪個地方冒出來，誰都不知道，歡迎在網絡上和我們的專家溝通。</p><p>北京大學教授、ICPC 亞洲東部區域競賽總監：過去的十幾年中都是美國公司在贊助，但從幾年前華為開始贊助全球性的活動，終於中國公司也能站出來贊助全球的教育活動，我們感到非常自豪。我想請問您對高等教育有什麼樣的期望？</p><p><strong>任正非：</strong>我們不僅要繼續資助活動，而且我認為資助力度還不夠，要繼續加強。</p><p>高等教育應該因材施教，不要老強調統一的教材；中小學教育，「不要輸在起跑線上」這個口號，我認為是不正確的，不能讓優秀的學生等跑。中國教育一定要振興起來，華為公司這些年由 7000 多位高鼻子的外國科學家、專家，13800 多位留學生，大多數是博士，再加上十多萬咱們中國的優秀學生，組成研發隊伍，才扭轉了困難。如果美國將來關閉一些學科，不允許中國留學生去留學的話，那我們就只能從中國大學獲得人才，大學不能同質化。</p><p>法國選手：有一種科學研究叫無用研究，説它無用其實是短期還不知道它應用到哪裏，這種研究可能主要是由大學而不是公司完成，但其實這種研究長期來看是非常重要的。華為對這種這類無用研究的是什麼看法？華為會不會投資這類研究？</p><p><strong>任正非：</strong>什麼叫科學？未知就叫科學。現在大家都知道，美國在科學研究上自由化程度是比較高的。在二戰前，美國基礎研究是很薄弱的，基本上是依賴歐洲的理論來支撐其工業、航空、航天……，如同今天中國對西方的依賴，大量的定理定律、公式、發明…… 都來自歐洲。二戰結束後，美國發現自己是跟在歐洲後面跑，因為美國基本上沒多少基礎理論積澱。美國科學家範內瓦爾・布什，寫了一本書叫《科學：無盡的前沿》，提出美國要研究看起來沒有用的、遙遠的東西，就是研究了很多「無用」的科學，美國在二戰以後基礎科學就蓬勃發展。到 90 年代以後美國普林斯頓大學一個教授叫司托克斯寫了一本書《基礎科學與技術創新: 巴斯德象限》，關於如何通過應用牽引科學的探索，把「無用」的科學聚集起來變成有用的。在這個數字時代，美國稱雄了世界，我們就是搭上了時代的數字列車發展起來的。</p><p>當今時代，科學和技術的邊界越來越接近，科學轉化為技術的時間越來越短，如果等到大學把理論完全研究明白，我們再去進行技術開發，就已經沒有先發優勢，沒有競爭力了。所以我們自己也開始重視基礎理論研究，每年大約投入 30-50 億美金用於基礎理論研究。我們和大學一起並駕齊驅、互相嵌入式地共同研究這些看似無用的科學。</p><p>巴西選手：因為美國製裁，近年華為遇到了不少的困難，我想知道華為是如何應對，是否已經做好了準備，能夠在國際市場上可持續發展？以及是否要恢復和美國的關係，還是説不用跟美國恢復關係仍然能夠持續發展？</p><p><strong>任正非：</strong>美國製裁對我們來説確實是壓力，但是壓力也是動力。打壓之前，我們把基礎平台建在美國。美國打壓以後，我們被迫把平台切換到另一個平台，這是艱難的。經過這四年的攻堅，20 萬員工的拼搏奮鬥，我們基本上建立了自己的平台了，將來和美國的平台不一定在同一個基礎上運行，但互聯互通是一定的。</p><p>孟加拉國選手：這次 ICPC 參賽者有沒有機會加入華為？未來職業發展機會是什麼？</p><p><strong>任正非：</strong>我們的競賽活動完全是學術性的，與加入華為沒有直接關係。如果你有意願加入華為，可以向我們當地的人力資源部門去申請，我們歡迎全世界優秀人才加入華為。孟加拉有將近 2 億人口，西方曾判斷孟加拉會是下一個新興的工業國家。現在孟加拉有你這樣的優秀人才，慢慢地會引導國家走向更快的發展。但更快發展的基礎是什麼？是速度。希望你能夠帶頭，把所學所獲帶回孟加拉，把國家發展提高到一個新的速度。</p><p>ICPC 墨西哥 &amp; 中美地區主管：一些科技公司如甲骨文、思科在墨西哥設置了研發中心。我想請問未來華為是否有計劃在墨西哥或者是在拉美設置研發機構？</p><p><strong>任正非：</strong>海外研發的佈局，需要問我們 2012 實驗室的主任，我們把您的意見帶回去。墨西哥有很燦爛的文明，瑪雅文化現代人到今天也還沒有完全搞明白。墨西哥文明起源很早，我們相信這種文明在世界各國都會有。我們也可能會考慮到那裏，但還是要根據 2012 實驗室的具體部署來。以前我們的部署是以美國為中心、分佈全世界，後來美國打擊我們，我們就以歐洲為中心，逐漸以歐亞為中心，拉美就去的少了。拉美還受美國的管制，我們還要進一步評估一下管制的狀況。</p><p>俄羅斯選手：華為公司有這麼多人，通過怎樣的管理實現高效運作？</p><p><strong>任正非：</strong>在創立公司之初我訪問了美國，以 IBM 為主體去理解他們的管理。第一，IBM 的企業目標管理，就是為客戶服務，一切都要以客戶為中心，這樣企業就有了一個整體方向感，這個方向感把員工凝聚起來了。第二，學習 IBM 推行 IPD，就是在研發中怎麼加入市場、服務代表，IPD 是一個前瞻性的領導組織來引導研發前進。接下來又向 IBM 學習 IFS、ISC 財務和供應鏈管理。這樣，流程體系就清楚了。最重要的是分配問題，我們就研究華為財富在哪兒，財富怎麼分配。我們認為財富在員工的腦袋裏面，把腦袋拿來稱一稱到底有多重，就給你分多少。我們的分配方式，勞動分三，資本分一。</p><p>冰島選手：不知道是真的假的，我之前聽説您本人是果粉？</p><p><strong>任正非：</strong>因為我女兒在美國讀書，如果不用蘋果，她上課就很不方便。我們不要排外，我們也經常探究蘋果的產品為什麼做得好，也能看到我們與蘋果之間的差距。有一個老師是很幸福的，可以有學習機會，有做比較的機會。如果從這些角度來説我是果粉呢，也不為過。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 19 Sep 2023 10:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258695</guid>
            <link>https://www.oschina.net/news/258695</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微軟 AI 研究人員意外泄露 38TB 內部數據]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">雲安全初創公司 Wiz 的研究人員<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wiz.io%2Fblog%2F38-terabytes-of-private-data-accidentally-exposed-by-microsoft-ai-researchers%23security-risks-in-the-ai-pipeline-53" target="_blank">報告</a>了一起發生在微軟 AI GitHub 存儲庫上的數據泄露事件，其中包括 3 萬多條內部 Microsoft Teams 消息的泄露；而這一切都是由一個配置錯誤的 SAS 令牌所引起。</span></p><p><span style="color:#000000">Wiz 指出，<span style="background-color:#ffffff">數據泄露源於微軟人工智能研究小組</span>下的一個名為<code>robust-models-transfer</code>的倉庫<span style="background-color:#ffffff">；該存儲庫包含可用於構建新神經網絡的圖像識別模型和訓練數據集。此次泄露是由其中一個訓練數據文件引起的，該文件託管在 Azure 存儲帳戶中。微軟方面原本打算僅公開共享 AI 訓練數據集，但意外地開放了對包含該數據集的整個 Azure 存儲帳戶的訪問權限。</span></span></p><p><span style="color:#000000">研究人員在掃描後發現，<span style="background-color:#ffffff">配置錯誤的帳戶導致了 38 TB 的微軟內部文件泄露，其中包括兩名員工工作站的</span><span style="background-color:#ffffff">磁盤</span><span style="background-color:#ffffff">備份。</span>這些備份包含敏感的個人數據，涵蓋 Microsoft services 的密碼、密鑰以及來自 359 名微軟員工的 30,000 多條內部 Microsoft Teams 消息。</span></p><p><img height="418" src="https://oscimg.oschina.net/oscnet/up-88f8ade4d873149ff786e4d451232457b72.png" width="500" referrerpolicy="no-referrer"></p><p><img height="367" src="https://oscimg.oschina.net/oscnet/up-149c6bcfd37adc22e051de3892ba542104e.png" width="500" referrerpolicy="no-referrer"></p><p><img height="486" src="https://oscimg.oschina.net/oscnet/up-9d5cc6df05d4c596395a22515834cbc75a1.png" width="500" referrerpolicy="no-referrer"></p><p>且除了過於寬鬆的訪問範圍之外，令牌還被錯誤配置為允許「完全控制」權限而不是隻讀權限。這意味着，攻擊者不僅可以查看存儲帳戶中的所有文件，還可以刪除和覆蓋現有文件。</p><p>不過研究人員指出，此存儲帳戶並未直接向公眾公開，而是一個私有存儲帳戶。「微軟的開發人員使用了一種名為 SAS tokens 的 Azure 機制，該機制允許創建一個可共享的鏈接，授予對 Azure 存儲賬戶數據的訪問權限--而經過檢查，該存儲賬戶看起來仍然是完全私有的。」</p><p><img height="286" src="https://oscimg.oschina.net/oscnet/up-c51fde2b8a33a7092286ee6cf33280d7771.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Wiz 最初於 6 月 22 日發現了該問題，並在不久後向微軟報告。6 月 24 日，微軟宣佈撤銷 SAS 令牌，並於 8 月 16 日完成了潛在影響的內部調查。</span></p><p><span style="color:#000000">報告總結稱，共享人工智能數據集這一簡單步驟卻導致了重大數據泄露，根本原因在於使用了賬戶 SAS 令牌作為共享機制。由於缺乏監控和管理，SAS 令牌存在安全風險，應儘可能限制其使用。「這些令牌很難跟蹤，因為微軟沒有在 Azure 門戶中提供集中管理這些令牌的方法。此外，這些令牌可以配置為永久有效，沒有過期時間上限。因此，將賬戶 SAS 令牌用於外部共享是不安全的，應避免使用。」</span></p><p><span style="color:#000000">並建議組織提高人工智能開發過程的相關安全風險意識，確保安全團隊與數據科學和研究團隊密切合作，以確保定義適當的防護欄。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 19 Sep 2023 09:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258688/microsoft-38tb-internal-data</guid>
            <link>https://www.oschina.net/news/258688/microsoft-38tb-internal-data</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IntelliJ IDEA 2023.2.2 發佈，支持 Java 21]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="background-color:#ffffff; color:#333333">IntelliJ IDEA 2023.2.2 現已發佈，這是&nbsp;</span><span style="background-color:#ffffff; color:#19191c">v2023.2 的第二個錯誤修復更新。 一些更新亮點如下：</span></p><ul style="margin-left:0; margin-right:0"><li>在「Branches」彈出窗口中，現在可以通過「Show Recent Branches」設置禁用「Recent&nbsp;」部分。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-326901%2FAllow-disabling-Recent-branches-view" target="_blank">IDEA-326901</a>&nbsp;]</li><li>Shift&nbsp;+Enter 快捷鍵按預期工作，從分屏右側的「Search Everywhere」選項卡中打開文件。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-326670%2F" target="_blank">IDEA-326670</a>&nbsp;]</li><li>項目工具窗口再次顯示目錄列表。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-326394" target="_blank">IDEA-326394</a>&nbsp;]</li><li>使用包含表格的 Markdown 文件時導致性能下降的問題已得到解決。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-326905%2F" target="_blank">IDEA-326905</a>&nbsp;]</li><li>IDE 不再因線程「AWT-EventQueue-1」錯誤中的異常而掛起在 splash screen 上。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-314813" target="_blank">IDEA-314813</a>&nbsp;]</li><li>IDE 再次正確保留 EditorConfig 格式。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-326450" target="_blank">IDEA-326450</a>&nbsp;]</li><li>IDE 不再顯示 GitLab 合併請求的不相關管道。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-326509" target="_blank">IDEA-326509</a>&nbsp;]</li><li>IDE 不再錯誤地報告 build.gradle 腳本中版本目錄別名無法識別的依賴符號。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-316687" target="_blank">IDEA-316687</a>&nbsp;]</li><li>之前添加到項目中的 Facet 不再在 IDE 重新啓動時消失。[&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FIDEA-321822" target="_blank">IDEA-321822</a>&nbsp;]</li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>IntelliJ IDEA 2023.2.2 支持最新的&nbsp;Java 21&nbsp;更新。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="background-color:#ffffff; color:#19191c">更多詳情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2023%2F09%2Fintellij-idea-2023-2-2%2F" target="_blank">查看官方博客</a><span style="background-color:#ffffff; color:#19191c">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 19 Sep 2023 03:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258766/intellij-idea-2023-2-2-released</guid>
            <link>https://www.oschina.net/news/258766/intellij-idea-2023-2-2-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 21 / JDK 21 (LTS) GA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Java 21 / JDK 21 已正式 GA，此版本是繼 JDK 17 後的長期支持版本 (LTS)，Oracle 將為其提供<strong>至少八年的技術支持和更新</strong>。</p><p><img src="https://static.oschina.net/uploads/space/2023/0919/234447_vDtL_2720166.png" referrerpolicy="no-referrer"></p><p><strong>正式穩定功能</strong></p><ul><li>JEP 444：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F444" target="_blank">虛擬線程</a></li><li>JEP 431：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F431" target="_blank">序列集合</a></li><li>JEP 440：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F440" target="_blank">記錄模式</a></li><li>JEP 441：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F441" target="_blank">switch 模式匹配</a></li><li>JEP 439：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F439" target="_blank">分代 ZGC</a></li><li>JEP 449：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F449" target="_blank">棄用 Windows 32 位 x86 移植</a></li><li>JEP 451：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F451" target="_blank">準備禁止動態加載代理</a></li><li>JEP 452：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F452" target="_blank">密鑰封裝機制 API</a></li></ul><p><strong>預覽階段功能</strong></p><ul><li><p>JEP 442：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F442" target="_blank">外部函數和內存 API（第三次預覽）</a></p></li><li><p>JEP 446：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F446" target="_blank">作用域值（預覽）</a></p></li><li><p>JEP 453：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F453" target="_blank">結構化併發（預覽）</a></p></li><li><p>JEP 430：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F430" target="_blank">字符串模板（預覽）</a></p></li><li><p>JEP 443：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F443" target="_blank">未命名模式和變量（預覽）</a></p></li><li><p>JEP 445：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F445" target="_blank">未命名類和實例主方法（預覽）</a></p></li></ul><p><strong>孵化階段功能</strong></p><ul><li>JEP 448：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F448" target="_blank">Vector API（孵化器第六階段）</a></li></ul><hr><table cellspacing="0" style="-webkit-text-stroke-width:0px; border-collapse:collapse; color:#000000; font-family:&quot;DejaVu Sans&quot;,&quot;Bitstream Vera Sans&quot;,&quot;Luxi Sans&quot;,Verdana,Arial,Helvetica; font-size:13.3333px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; word-spacing:0px"><tbody><tr><td style="text-align:left; vertical-align:top; width:0px">430:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F430" target="_blank">String Templates (Preview)</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">431:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F431" target="_blank">Sequenced Collections</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">439:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F439" target="_blank">Generational ZGC</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">440:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F440" target="_blank">Record Patterns</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">441:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F441" target="_blank">Pattern Matching for switch</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">442:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F442" target="_blank">Foreign Function &amp; Memory API (Third Preview)</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">443:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F443" target="_blank">Unnamed Patterns and Variables (Preview)</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">444:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F444" target="_blank">Virtual Threads</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">445:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F445" target="_blank">Unnamed Classes and Instance Main Methods (Preview)</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">446:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F446" target="_blank">Scoped Values (Preview)</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">448:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F448" target="_blank">Vector API (Sixth Incubator)</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">449:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F449" target="_blank">Deprecate the Windows 32-bit x86 Port for Removal</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">451:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F451" target="_blank">Prepare to Disallow the Dynamic Loading of Agents</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">452:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F452" target="_blank">Key Encapsulation Mechanism API</a></td></tr><tr><td style="text-align:left; vertical-align:top; width:0px">453:</td><td style="text-align:left; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F453" target="_blank">Structured Concurrency (Preview)</a></td></tr></tbody></table><p>Download:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjdk.java.net%2F21%2F" target="_blank">https://jdk.java.net/21/</a><br> Release notes:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjdk.java.net%2F21%2Frelease-notes" target="_blank">https://jdk.java.net/21/release-notes</a><br> Features:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fprojects%2Fjdk%2F21%2F" target="_blank">https://openjdk.org/projects/jdk/21/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Sep 2023 16:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258730/jdk-21-lts-ga</guid>
            <link>https://www.oschina.net/news/258730/jdk-21-lts-ga</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Fluent Operator v2.5.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://www.oschina.net/question/4489239_2331019" _blank"="">
尊嘟假嘟，成都程序員也 996 嗎？ 
<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>日前，Fluent Operator 發佈了 v2.5.0。</p><p>Fluent Operator v2.5.0 新增 11 個 features， 其中 Fluent Bit 新增支持 7 個插件， Fluentd 新增支持 1 個插件。此外，對 Fluent Operator 也進行了增強，調整了默認參數，以便適應更多場景，並對 helm chart 進行了優化，用戶可以更方便的進行安裝，並修復了部分 bug。</p><p>以下將重點介紹：</p><h2>Fluent Bit 增加多個插件</h2><h3>1. Prometheus Exporter 插件</h3><p>Fluent Bit 新增了輸出插件 Prometheus Exporter，Prometheus Exporter 輸出插件允許您從 Fluent Bit 中獲取 metrics 並暴露它們，以便 prometheus 實例可以抓取它們。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F840%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/840。</a></p><h3>2. Forward 插件</h3><p>Fluent Bit 新增了輸入插件 Forward，Forward 是 Fluent Bit 和 Fluentd 用於在對等設備之間路由消息的協議。使用該插件可以監聽 Forward 消息的輸入。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F843%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/843。</a></p><h3>3. GELF 插件</h3><p>Fluent Bit 新增了輸出插件 GELF，GELF 是 Graylog 擴展日誌格式。GELF 輸出插件允許使用 TLS、TCP 或 UDP 協議將 GELF 格式的日誌直接發送到 Graylog 輸入端。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F882%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/882。</a></p><h3>4. OpenTelemetry 插件</h3><p>Fluent Bit 新增了輸入插件 OpenTelemetry，OpenTelemetry 插件可讓您按照 OTLP 規範，從各種 OpenTelemetry 輸出程序、OpenTelemetry 收集器或 Fluent Bit 的 OpenTelemetry 輸出插件獲取 OpenTelemetry 格式的數據。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F890%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/890。</a></p><h3>5. HTTP 插件</h3><p>Fluent Bit 新增了輸入插件 HTTP，HTTP 輸入插件允許 Fluent Bit 打開一個 HTTP 端口，然後以動態方式將數據路由到該端口。該插件支持動態標籤，允許你通過同一個輸入發送帶有不同標籤的數據。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F904%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/904。</a></p><h3>6. MQTT 插件</h3><p>Fluent Bit 新增了輸入插件 MQTT，MQTT 輸入插件允許通過 TCP 連接從 MQTT 控制包中獲取消息/數據。要接收的傳入數據必須是 JSON map 格式的數據。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F911%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/911。</a></p><h3>7. Collectd 插件</h3><p>Fluent Bit 新增了輸入插件 MQTT，Collectd 輸入插件允許您從 Collectd 服務端接收數據。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F914%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/914。</a></p><h2>Fluentd 主要變化</h2><h3>新增 Grok parser 插件</h3><p>Fluentd 新增 Grok parser 插件。Grok 是一個第三方的解析器，Grok 是一個簡化和重用正則表達式的宏，最初由 Jordan Sissel 開發。如果您熟悉 Grok 模式，那麼 Grok parser 插件非常有用。</p><p>Grok parser 插件的版本涵蓋如下：</p><p>| fluent-plugin-grok-parser | fluentd | ruby |</p><p>| ------------------------- | ---------- | ------ |</p><p>| &gt;= 2.0.0 | &gt;= v0.14.0 | &gt;= 2.1 |</p><p>| &lt; 2.0.0 | &gt;= v0.12.0 | &gt;= 1.9 |</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F861%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/861。</a></p><h3>增加對 Fluentd 作為 DaemonSet 運行的支持</h3><p>目前，Fluentd 以 StatefulSet 的形式運行，但我們希望將 Fluentd 作為一個完整的日誌方面的進程來運行，這就需要在 Fluentd 中包含一些輸入插件（tail、systemd）。所以我們需要將 Fluentd 作為 DaemonSet 的方式來運行。</p><p>在該 PR 中，我們引入了將 Fluentd 作為 DaemonSet 運行的選項支持。默認情況下，Fluentd 將作為 StatefulSet 運行，但用戶也可以通過啓用 agent 模式，將 Fluend 作為 DaemonSet 運行。如果開始了 agent 模式，那麼在創建 DaemonSet 時會忽略 StatefulSet 特定字段，反之亦然。</p><p>此外，Fluend 可以作為 DaemonSet 或 StatefulSet 運行，而不能同時作為 DaemonSet 和 StatefulSet 運行。如果我們啓用 DaemonSet，StatefulSet 將被刪除，Fluentd 將作為 DaemonSet 運行。</p><p>相關 PR： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Fpull%2F839%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/pull/839。</a></p><h2>其他優化</h2><ul><li><p>在 Fluent-bit config 中刪除重複的 Cluster parsers；</p></li><li><p>調整 Fluent Bit 的多項默認參數；</p></li><li><p>為 Fluentd 添加 ImagePullSecret 參數；</p></li><li><p>將 Fluent Bit 升級到 2.1.9 版本；</p></li><li><p>優化 Fluent Operator 的 helm chart 中的各項參數；</p></li><li><p>...</p></li></ul><h2>致謝貢獻者</h2><p>該版本貢獻者共有 16 位，他們分別是：</p><ul><li><p>gregorycuellar</p></li><li><p>Nyefan</p></li><li><p>WaywardWizard</p></li><li><p>alexandrevilain</p></li><li><p>yash97</p></li><li><p>husnialhamdani</p></li><li><p>L1ghtman2k</p></li><li><p>wenchajun</p></li><li><p>leonsteinhaeuser</p></li><li><p>vincent-vinf</p></li><li><p>Rajan-226</p></li><li><p>sharkeyl</p></li><li><p>ikolesnikovrevizto</p></li><li><p>karan56625</p></li><li><p>ajax-bychenok-y</p></li><li><p>sjliu1</p></li></ul><p>這些貢獻者大部分來自海外，這表明 Fluent Operator 是一個全球化的項目，越來越受歡迎和具有影響力，在此感謝各位貢獻者！也非常歡迎大家參與這個開源項目和社區！</p><p>關於新版本的具體變化，您還可以參考 release note： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffluent%2Ffluent-operator%2Freleases%2Ftag%2Fv2.5.0%25E3%2580%2582" target="_blank">https://github.com/fluent/fluent-operator/releases/tag/v2.5.0。</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Sep 2023 10:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/258697/fluent-operator-2-5-0</guid>
            <link>https://www.oschina.net/news/258697/fluent-operator-2-5-0</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
