<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 03 Dec 2023 14:35:30 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[騰訊視頻出現服務故障]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今日晚間，大量網友反饋稱騰訊視頻陸續出現網絡故障，具體表現包括不限於首頁無法加載內容、VIP 用戶看不了會員視頻等等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fbded3b9e2461b9d04e455454ad632a16a.png" referrerpolicy="no-referrer"></p><p>針對這一問題，騰訊視頻迴應稱：目前騰訊視頻出現了短暫技術問題，正在加緊修復，各項功能在逐步恢復中。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-899c4218fa5a6cdf5b7eee20ecd37feef59.png" referrerpolicy="no-referrer"></p></blockquote><p>騰訊客服表示：關於騰訊視頻會員用戶無法觀看影片的問題，非常抱歉，技術人員已經緊急修復處理，辛苦您重啓 App 再次嘗試觀看，感謝您的支持和陪伴。</p><p>目前，「騰訊視頻崩了」已經登頂微博熱搜，目前該話題已經有 11.2 億的閲讀量和 22.8 萬次討論。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8e92af99ecae1719adadcb80374d59c0f61.png" referrerpolicy="no-referrer"></p><p>根據微博網友反饋，自己即使是 VIP 用戶，也會出現無法觀看會員內容的情況。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 14:26:18 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269337</guid>
            <link>https://www.oschina.net/news/269337</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[巴西頒佈了一部完全由 ChatGPT 編寫的法案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">今年 10 月份，巴西市第二大城市阿雷格里港的立法者在不知情的情況下，通過了似乎是該國第一部完全由人工智能編寫的法案。該法案旨在防止城市向納稅人收取更換被盜水錶的費用；其中 36 名議員投票一致通過了該提案，並於 11 月底生效。</span></p><p><span style="color:#000000">時至今日，市議員 Ramiro Rosário 則向<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapnews.com%2Farticle%2Fbrazil-artificial-intelligence-porto-alegre-5afd1240afe7b6ac202bb0bbc45e08d4" target="_blank">美聯社</a>透露，該法案其實是由聊天機器人編寫的。他實際上使用 ChatGPT 撰寫了相關提案，並在沒有做出任何改動的基礎上將此呈現給了其他 35 名同僚，同時有意對他們隱瞞了內容的來源。</span></p><p><span style="color:#000000">「如果我在此之前透露了這一消息，該提案肯定不會被付諸表決。如果僅僅因為該項目是由人工智能編寫的，就冒着不被批准的風險，這對民眾來説是不公平的。」</span></p><p><img height="269" src="https://oscimg.oschina.net/oscnet/up-5cdb167b97dbc135bce51409c0865d3ff48.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Rosário 表示，自己僅在 ChatGPT 中輸入了 49 個字的提示，就在幾秒鐘內收到了該工具返回的完整提案草案，其中還包括理由説明。所以他此舉的目的不僅僅是為瞭解決一個地方性問題，還希望引發一場辯論。</span></p><p><span style="color:#000000">他深信人類將經歷一場新的技術革命。並認為，人類文明所開發的所有工具既可以用來為惡，也可以用來為善。「這也就是為什麼我們必須展示如何將其用於善」。</span></p><p><span style="color:#000000">法案真相的浮現引發了諸多的反對意見，並對 AI 在公共政策中的作用提出了質疑。市議會主席 Hamilton Sossmeier 此前曾發言譴責 Rosário 的做法，並稱這是一個"危險的先例"。但他的想法如今似乎也出現了動搖，"我改變了主意。我開始更深入地閲讀，發現不管是不幸還是幸運，這都將成為一種趨勢。"</span></p><p><span style="color:#000000">事實上，Rosário 並不是首例。美國<span style="background-color:#ffffff">馬薩諸塞州的民主黨州參議員 Barry Finegold 早些時候也向 ChatGPT 求助，幫助起草一項旨在監管包括 ChatGPT 在內的人工智能模型的法案。該法案於今年早些時候提交，但目前尚未進行投票。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Finegold 在接受採訪時表示，ChatGPT 可以幫助解決立法過程中一些較為繁瑣的問題，包括正確、快速地搜索和引用已頒佈的法律。不過，他也補充説明，關鍵是要讓每個人都知道在這個過程中使用了 ChatGPT 或類似的工具，保持透明度。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">目前，使用像 ChatGPT 這樣的大型語言模型來編寫法律文檔目前存在爭議且存在風險，特別是因為系統往往會偽造信息和產生幻覺。研究表明，所有聊天機器人在總結文檔時都有引入錯誤信息的可能，最先進的 GPT 模型的錯誤率約為 3%，而谷歌的一個模型的錯誤率約為 27%。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">今年上半年，紐約就有律師因在訴訟中引用 ChatGPT 編造的虛假法律案例而遭到抨擊。</span></span></p><p style="text-align:start"><strong><span style="color:#000000"><span style="background-color:#ffffff">相關閲讀：</span></span></strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/242932/lawsuit-chatgpt-false-case-citations" target="news">律師藉助 ChatGPT 打官司，資料造假危及職業生涯</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 04:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269286/brazil-ordinance-chatgpt</guid>
            <link>https://www.oschina.net/news/269286/brazil-ordinance-chatgpt</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[復旦大學發佈保險領域專用大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">復旦大學保險團隊發佈了一款自主研發的保險領域專用大模型——「保險智酷」，旨在為保險場景下的各類用戶提供專業、智能、全面的數字化服務</span></p><p><span style="background-color:#ffffff; color:#222222">根據介紹，「保險智酷」基於復旦保險多年沉澱積累的中文保險語料庫，通過引入專家知識、構建思維鏈與 LLM 數據蒸餾的方式，構建了以保險知識問答、保險知識檢索、保險案例分析、保險個性化服務等為基礎任務的大語言模型訓練數據集，並在此基礎上對通用基座大模型進行訓練微調。</span></p><p><span style="background-color:#ffffff; color:#222222">具備以下核心能力：</span></p><ul><li><span style="background-color:#ffffff; color:#222222">豐富的保險知識，「保險智酷」模型融合了廣泛的保險領域知識，能夠以保險專家的身份對用戶面臨的保險相關問題進行解答；</span></li><li><span style="background-color:#ffffff; color:#222222">保險知識檢索，通過配備檢索模塊，為模型構建了對保險知識的檢索和應用能力，確保了模型在處理保險法規、條款、案例分析時能夠準確地引用正確的保險知識和數據；</span></li><li><span style="background-color:#ffffff; color:#222222">保險文本理解與處理，「保險智酷」具備保險語境理解與文本處理能力，能夠有效應對如信息提取、文本總結、文本擴寫等 NLP 任務； </span></li><li><span style="background-color:#ffffff; color:#222222">保險個性化服務，能夠根據用戶的信息和需求，提供定製化的保險建議和解決方案；</span></li><li><span style="background-color:#ffffff; color:#222222">保險案例分析，能夠結合國家政策法規對保險案例進行深入分析與解讀。</span></li></ul><p>此外，<span style="background-color:#ffffff; color:#222222">復旦保險團隊還搭建了基於「保險智酷」的一體化服務平台。平台以海量法規、條款、報告數據為基礎，以「保險智酷」大模型為核心，集成數據分析、可視化處理、文生圖片等一系列能力，實現多角色、多場景的保險個性化服務。</span>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269282</guid>
            <link>https://www.oschina.net/news/269282</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Veilid —— 反數據收集開源框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Veilid（讀作 "Vay-Lid"，源自 "Valid and Veiled Identification"），是一個點對點網絡，用於輕鬆共享各種數據。</p><p>Veilid 允許任何人創建分佈式私人應用程序，許用戶選擇退出數據收集和在線跟蹤。Veilid 以用戶體驗、隱私和安全為首要任務。</p><p>Veilid 在設計時考慮到了社交維度，因此每個用戶都可以在網絡上存儲個人內容，也可以與自己選擇的其他人共享這些內容，如果願意，還可以與全世界共享。</p><p>Veilid 網絡的主要目的是為特定類型的共享數據提供基礎設施：各種形式的社交媒體。這包括輕量級內容（例如 Twitter 的 tweets 或&nbsp; Mastodon 的 toots）、中等量級內容（例如圖像和歌曲）以及重量級內容（例如視頻）。個人訂閲、回覆、私人消息等 Meta-content 也旨在在 Veilid 上運行。</p><p>Veilid 超越了現有的隱私技術，有可能徹底改變人們使用互聯網的方式。Veilid 沒有盈利動機，可以在不損害資本主義的情況下促進理想的實現。</p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/veilid</guid>
            <link>https://www.oschina.net/p/veilid</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | Go 實現的接口在線文檔管理系統 MinDoc]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-mindoc-簡介" class="anchor" href="https://gitee.com/gsw945/mindoc#mindoc-%E7%AE%80%E4%BB%8B"></a>MinDoc 簡介</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Ftravis-ci.com%2Fmindoc-org%2Fmindoc"><img src="https://travis-ci.com/mindoc-org/mindoc.svg?branch=master" alt="Build Status" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fci.appveyor.com%2Fproject%2Fmindoc-org%2Fmindoc"><img src="https://ci.appveyor.com/api/projects/status/7680ia6mu29m12wx?svg=true" alt="Build status" referrerpolicy="no-referrer"></a></p><p>MinDoc 是一款針對 IT 團隊開發的簡單好用的文檔管理系統。</p><p>MinDoc 的前身是 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671%2FSmartWiki">SmartWiki</a> 文檔系統。SmartWiki 是基於 PHP 框架 laravel 開發的一款文檔管理系統。因 PHP 的部署對普通用戶來説太複雜，所以改用 Golang 開發。可以方便用戶部署和實用。</p><p>開發緣起是公司 IT 部門需要一款簡單實用的項目接口文檔管理和分享的系統。其功能和界面源於 kancloud 。</p><p>可以用來儲存日常接口文檔，數據庫字典，手冊説明等文檔。內置項目管理，用戶管理，權限管理等功能，能夠滿足大部分中小團隊的文檔管理需求。</p><h5><a id="user-content-演示站點文檔" class="anchor" href="https://gitee.com/gsw945/mindoc#%E6%BC%94%E7%A4%BA%E7%AB%99%E7%82%B9%E6%96%87%E6%A1%A3"></a>演示站點&amp;文檔:</h5><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.iminho.me%2Fwiki%2Fdocs%2Fmindoc%2F">https://www.iminho.me/wiki/docs/mindoc/</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdoc.gsw945.com%2Fdocs%2Fmindoc-docs%2F">https://doc.gsw945.com/docs/mindoc-docs/</a></li></ul><hr><h3><a id="user-content-開發維護使用-悉知" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%BC%80%E5%8F%91%E7%BB%B4%E6%8A%A4%E4%BD%BF%E7%94%A8-%E6%82%89%E7%9F%A5"></a>開發&amp;維護&amp;使用，悉知</h3><ul><li>感謝作者 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671">lifei6671</a> 創造了 MinDoc，並持續維護了很久。</li><li>作者因工作等原因，精力有限，無法花費足夠的時間來持續維護 mindoc，已於北京時間 2021 年 3 月 23 日將 mindoc 交給社區 (github 組織<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org">mindoc-org</a>) 維護，期待熱心開發者加入<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org">mindoc-org</a>一起來維護 MinDoc。</li><li>遇到問題請提 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fissues">Issues</a>，歡迎使用者和貢獻者加入 QQ 羣 <code>1051164153</code><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fqm.qq.com%2Fcgi-bin%2Fqm%2Fqr%3Fk%3DbHFR7P3Qp1nsSPbsTw4KN_ZpFLUAblIU%26jump_from%3Dwebapi"><img border="0" src="https://pub.idqqimg.com/wpa/images/group.png" alt="MinDoc 使用&amp;開發交流羣" title="MinDoc 使用&amp;開發交流羣" referrerpolicy="no-referrer"></a></li><li>對開發感興趣請關注 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1">Development</a>:
<ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1%23column-13554511">Todo List</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1%23column-13554512">Work in progress</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1%23column-13554513">Review in progress</a></li></ul></li><li>Mindoc 基於 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbeego%2Fbeego">beeego</a> 開發，beego 文檔地址: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbeego%2Fbeego-doc%2Ftree%2Fmain%2Fdocs%2Fzh">https://github.com/beego/beego-doc/tree/main/docs/zh</a></li><li><img class="emoji" alt=":warning:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/warning-e22260ba8d6c6bc2c0b65eabb98299bf.png" width="14" height="14" referrerpolicy="no-referrer"><strong>特別聲明</strong>:
<ul><li>原作者 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671">lifei6671</a> 已於 2021-08-06 刪除了個人捐贈信息，參見: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fcommit%2F1a179179c1fe4d0d4db95e0b757d863aee5bf395">1a179179c1fe4d0d4db95e0b757d863aee5bf395</a></li><li>截止目前 (2023-03-27)，<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org">mindoc-org</a> 暫未發佈任何捐贈信息，請勿輕信</li></ul></li></ul><hr><h1><a id="user-content-安裝與使用" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8"></a>安裝與使用</h1><p><del>如果你的服務器上沒有安裝 golang 程序請手動設置一個環境變量如下：鍵名為 ZONEINFO，值為 MinDoc 跟目錄下的/lib/time/zoneinfo.zip 。</del></p><p>更多信息請查看手冊： <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.iminho.me%2Fwiki%2Fdocs%2Fmindoc%2Fmindoc-summary.md">MinDoc 使用手冊</a></p><p>對於沒有 Golang 使用經驗的用戶，可以從 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Freleases">https://github.com/mindoc-org/mindoc/releases</a> 這裏下載編譯完的程序。</p><p>如果有 Golang 開發經驗，建議通過編譯安裝，要求 golang 版本不小於 1.15.1(需支持<code>CGO</code>、<code>go mod</code>和<code>import _ "time/tzdata"</code>)(推薦 Go 版本為 1.18.1)。</p><blockquote><p>注意: CentOS7 上 GLibC 版本低，常規編譯版本不能使用。需要自行源碼編譯,或使用使用 musl 編譯版本。</p></blockquote><h2><a id="user-content-常規編譯" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%B8%B8%E8%A7%84%E7%BC%96%E8%AF%91"></a>常規編譯</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 克隆源碼</span></span><span id="LC2" class="line">git clone https://github.com/mindoc-org/mindoc.git</span><span id="LC3" class="line"><span class="c"># go 包安裝</span></span><span id="LC4" class="line">go mod tidy <span class="nt">-v</span></span><span id="LC5" class="line"><span class="c"># 編譯 (sqlite 需要 CGO 支持)</span></span><span id="LC6" class="line">go build <span class="nt">-ldflags</span><span class="s2">"-w"</span><span class="nt">-o</span> mindoc main.go</span><span id="LC7" class="line"><span class="c"># 數據庫初始化 (此步驟執行之前，需配置`conf/app.conf`)</span></span><span id="LC8" class="line">./mindoc <span class="nb">install</span></span><span id="LC9" class="line"><span class="c"># 執行</span></span><span id="LC10" class="line">./mindoc</span><span id="LC11" class="line"><span class="c"># 開發階段運行</span></span><span id="LC12" class="line">bee run</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>MinDoc 如果使用 MySQL 儲存數據，則編碼必須是<code>utf8mb4_general_ci</code>。請在安裝前，把數據庫配置填充到項目目錄下的 <code>conf/app.conf</code> 中。</p><p>如果使用 <code>SQLite</code> 數據庫，則直接在配置文件中配置數據庫路徑即可.</p><p>如果 conf 目錄下不存在 <code>app.conf</code> 請重命名 <code>app.conf.example</code> 為 <code>app.conf</code>。</p><p><strong>默認程序會自動初始化一個超級管理員用戶：admin 密碼：123456 。請登錄後重新設置密碼。</strong></p><h2><a id="user-content-linux 系統中不依賴 glibc 的編譯方式" class="anchor" href="https://gitee.com/gsw945/mindoc#linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%B8%8D%E4%BE%9D%E8%B5%96glibc%E7%9A%84%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F"></a>Linux 系統中不依賴 gLibC 的編譯方式</h2><h3><a id="user-content-安裝-musl-gcc" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%AE%89%E8%A3%85-musl-gcc"></a>安裝 musl-gcc</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">wget <span class="nt">-c</span> http://musl.libc.org/releases/musl-1.2.2.tar.gz</span><span id="LC2" class="line"><span class="nb">tar</span><span class="nt">-xvf</span> musl-1.2.2.tar.gz</span><span id="LC3" class="line"><span class="nb">cd </span>musl-1.2.2</span><span id="LC4" class="line">./configure</span><span id="LC5" class="line">make</span><span id="LC6" class="line"><span class="nb">sudo </span>make <span class="nb">install</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-使用-musl-gcc-編譯-mindoc" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%BD%BF%E7%94%A8-musl-gcc-%E7%BC%96%E8%AF%91-mindoc"></a>使用 musl-gcc 編譯 mindoc</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">go mod tidy <span class="nt">-v</span></span><span id="LC2" class="line"><span class="nb">export </span><span class="nv">GOARCH</span><span class="o">=</span>amd64</span><span id="LC3" class="line"><span class="nb">export </span><span class="nv">GOOS</span><span class="o">=</span>linux</span><span id="LC4" class="line"><span class="c"># 設置使用 musl-gcc</span></span><span id="LC5" class="line"><span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>/usr/local/musl/bin/musl-gcc</span><span id="LC6" class="line"><span class="c"># 設置版本</span></span><span id="LC7" class="line"><span class="nb">export </span><span class="nv">TRAVIS_TAG</span><span class="o">=</span>temp-musl-v<span class="sb">`</span><span class="nb">date</span> +%y%m%d<span class="sb">`</span></span><span id="LC8" class="line">go build <span class="nt">-v</span><span class="nt">-o</span> mindoc_linux_musl_amd64 <span class="nt">-ldflags</span><span class="o">=</span><span class="s2">"-linkmode external -extldflags '-static' -w -X 'github.com/mindoc-org/mindoc/conf.VERSION=</span><span class="nv">$TRAVIS_TAG</span><span class="s2">' -X 'github.com/mindoc-org/mindoc/conf.BUILD_TIME=</span><span class="sb">`</span><span class="nb">date</span><span class="sb">`</span><span class="s2">' -X 'github.com/mindoc-org/mindoc/conf.GO_VERSION=</span><span class="sb">`</span>go version<span class="sb">`</span><span class="s2">'"</span></span><span id="LC9" class="line"><span class="c"># 驗證</span></span><span id="LC10" class="line">./mindoc_linux_musl_amd64 version</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-windows-上後台運行" class="anchor" href="https://gitee.com/gsw945/mindoc#windows-%E4%B8%8A%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C"></a>Windows 上後台運行</h2><p>使用 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc-daemon">mindoc-daemon</a></p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">#郵件配置-示例</span></span><span id="LC2" class="line"><span class="c">#是否啓用郵件</span></span><span id="LC3" class="line"><span class="py">enable_mail</span><span class="p">=</span><span class="s">true</span></span><span id="LC4" class="line"><span class="c">#smtp 服務器的賬號</span></span><span id="LC5" class="line"><span class="py">smtp_user_name</span><span class="p">=</span><span class="s">admin@iminho.me</span></span><span id="LC6" class="line"><span class="c">#smtp 服務器的地址</span></span><span id="LC7" class="line"><span class="py">smtp_host</span><span class="p">=</span><span class="s">smtp.ym.163.com</span></span><span id="LC8" class="line"><span class="c">#密碼</span></span><span id="LC9" class="line"><span class="py">smtp_password</span><span class="p">=</span><span class="s">1q2w3e__ABC</span></span><span id="LC10" class="line"><span class="c">#端口號</span></span><span id="LC11" class="line"><span class="py">smtp_port</span><span class="p">=</span><span class="s">25</span></span><span id="LC12" class="line"><span class="c">#郵件發送人的地址</span></span><span id="LC13" class="line"><span class="py">form_user_name</span><span class="p">=</span><span class="s">admin@iminho.me</span></span><span id="LC14" class="line"><span class="c">#郵件有效期 30 分鐘</span></span><span id="LC15" class="line"><span class="py">mail_expired</span><span class="p">=</span><span class="s">30</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-使用 docker 部署" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2"></a>使用 Docker 部署</h1><p>如果是 Docker 用戶，可參考項目內置的 Dockerfile 文件自行編譯鏡像 (編譯命令見 Dockerfile 文件底部註釋，僅供參考)。</p><p>在啓動鏡像時需要提供如下的常用環境變量 (全部支持的環境變量請參考: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fblob%2Fmaster%2Fconf%2Fapp.conf.example"><code>conf/app.conf.example</code></a>)：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="err">DB_ADAPTER</span><span class="err">指定 DB 類型 (默認為 sqlite)</span></span><span id="LC2" class="line"><span class="err">MYSQL_PORT_3306_TCP_ADDR</span><span class="err">MySQL 地址</span></span><span id="LC3" class="line"><span class="err">MYSQL_PORT_3306_TCP_PORT</span><span class="err">MySQL 端口號</span></span><span id="LC4" class="line"><span class="err">MYSQL_INSTANCE_NAME</span><span class="err">MySQL 數據庫名稱</span></span><span id="LC5" class="line"><span class="err">MYSQL_USERNAME</span><span class="err">MySQL 賬號</span></span><span id="LC6" class="line"><span class="err">MYSQL_PASSWORD</span><span class="err">MySQL 密碼</span></span><span id="LC7" class="line"><span class="err">HTTP_PORT</span><span class="err">程序監聽的端口號</span></span><span id="LC8" class="line"><span class="err">MINDOC_ENABLE_EXPORT</span><span class="err">開啓導出 (默認為 false)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-舉個栗子-當前公開鏡像信息頁面-httpscrconsolealiyuncomimagescn-hangzhoumindoc-orgmindocdetail--需要登錄阿里雲賬號才可訪問列表" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-%E5%BD%93%E5%89%8D%E5%85%AC%E5%BC%80%E9%95%9C%E5%83%8F%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2-httpscrconsolealiyuncomimagescn-hangzhoumindoc-orgmindocdetail--%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%A6%E5%8F%B7%E6%89%8D%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8"></a>舉個栗子-當前 (公開) 鏡像 (信息頁面: <a href="https://gitee.com/link?target=https%3A%2F%2Fcr.console.aliyun.com%2Fimages%2Fcn-hangzhou%2Fmindoc-org%2Fmindoc%2Fdetail">https://cr.console.aliyun.com/images/cn-hangzhou/mindoc-org/mindoc/detail</a> , 需要登錄阿里雲賬號才可訪問列表)</h4><h5><a id="user-content-windows" class="anchor" href="https://gitee.com/gsw945/mindoc#windows"></a>Windows</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">set </span><span class="nv">MINDOC</span><span class="o">=</span>//d/mindoc</span><span id="LC2" class="line">docker run <span class="nt">-it</span><span class="nt">--name</span><span class="o">=</span>mindoc <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-v</span><span class="s2">"%MINDOC%/conf"</span>:<span class="s2">"/mindoc/conf"</span><span class="nt">-p</span> 8181:8181 <span class="nt">-e</span><span class="nv">MINDOC_ENABLE_EXPORT</span><span class="o">=</span><span class="nb">true</span><span class="nt">-d</span> registry.cn-hangzhou.aliyuncs.com/mindoc-org/mindoc:v2.1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="user-content-linuxmac" class="anchor" href="https://gitee.com/gsw945/mindoc#linuxmac"></a>Linux、Mac</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">export </span><span class="nv">MINDOC</span><span class="o">=</span>/home/ubuntu/mindoc-docker</span><span id="LC2" class="line">docker run <span class="nt">-it</span><span class="nt">--name</span><span class="o">=</span>mindoc <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-v</span><span class="s2">"</span><span class="k">${</span><span class="nv">MINDOC</span><span class="k">}</span><span class="s2">/conf"</span>:<span class="s2">"/mindoc/conf"</span><span class="nt">-p</span> 8181:8181 <span class="nt">-e</span><span class="nv">MINDOC_ENABLE_EXPORT</span><span class="o">=</span><span class="nb">true</span><span class="nt">-d</span> registry.cn-hangzhou.aliyuncs.com/mindoc-org/mindoc:v2.1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="user-content-舉個栗子-更多環境變量示例鏡像已過期僅供參考請以當前鏡像為準" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-%E6%9B%B4%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%A4%BA%E4%BE%8B%E9%95%9C%E5%83%8F%E5%B7%B2%E8%BF%87%E6%9C%9F%E4%BB%85%E4%BE%9B%E5%8F%82%E8%80%83%E8%AF%B7%E4%BB%A5%E5%BD%93%E5%89%8D%E9%95%9C%E5%83%8F%E4%B8%BA%E5%87%86"></a>舉個栗子-更多環境變量示例 (鏡像已過期，僅供參考，請以當前鏡像為準)</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">docker run <span class="nt">-p</span> 8181:8181 <span class="nt">--name</span> mindoc <span class="nt">-e</span><span class="nv">DB_ADAPTER</span><span class="o">=</span>mysql <span class="nt">-e</span><span class="nv">MYSQL_PORT_3306_TCP_ADDR</span><span class="o">=</span>10.xxx.xxx.xxx <span class="nt">-e</span><span class="nv">MYSQL_PORT_3306_TCP_PORT</span><span class="o">=</span>3306 <span class="nt">-e</span><span class="nv">MYSQL_INSTANCE_NAME</span><span class="o">=</span>mindoc <span class="nt">-e</span><span class="nv">MYSQL_USERNAME</span><span class="o">=</span>root <span class="nt">-e</span><span class="nv">MYSQL_PASSWORD</span><span class="o">=</span>123456 <span class="nt">-e</span><span class="nv">httpport</span><span class="o">=</span>8181 <span class="nt">-d</span> daocloud.io/lifei6671/mindoc:latest</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-dockerfile 內容參考" class="anchor" href="https://gitee.com/gsw945/mindoc#dockerfile%E5%86%85%E5%AE%B9%E5%8F%82%E8%80%83"></a>dockerfile 內容參考</h4><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.frytea.com%2Farchives%2F504%2F">無需代理直接加速各種 GitHub 資源拉取 | 國內鏡像賦能 | 助力開發</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Fmirror%2Fubuntu">阿里雲 - Ubuntu 鏡像</a></li></ul><h3><a id="user-content-docker-compose-一鍵安裝" class="anchor" href="https://gitee.com/gsw945/mindoc#docker-compose-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85"></a>docker-compose 一鍵安裝</h3><ol><li><p>修改配置文件
修改<code>docker-compose.yml</code>中的配置信息，主要修改<code>volumes</code>節點，將宿主機的兩個目錄映射到容器內。
<code>environment</code>節點，配置自己的環境變量。</p></li><li><p>一鍵完成所有環境搭建</p><blockquote><p>docker-compose up -d</p></blockquote></li><li><p>瀏覽器訪問</p><blockquote><p><a href="https://gitee.com/link?target=http%3A%2F%2Flocalhost%3A8181%2F">http://localhost:8181/</a></p></blockquote><p>整個部署完成了</p></li><li><p>常用命令參考</p><ul><li><p>啓動</p><blockquote><p>docker-compose up -d</p></blockquote></li><li><p>停止</p><blockquote><p>docker-compose stop</p></blockquote></li><li><p>重啓</p><blockquote><p>docker-compose restart</p></blockquote></li><li><p>停止刪除容器，釋放所有資源</p><blockquote><p>docker-compose down</p></blockquote></li><li><p>刪除並重新創建</p><blockquote><p>docker-compose -f docker-compose.yml down &amp;&amp; docker-compose up -d</p><p>更多 docker-compose 的使用相關的內容，請查看官網文檔或百度</p></blockquote></li></ul></li></ol><h1><a id="user-content-項目截圖" class="anchor" href="https://gitee.com/gsw945/mindoc#%E9%A1%B9%E7%9B%AE%E6%88%AA%E5%9B%BE"></a>項目截圖</h1><p><strong>創建項目</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204438.png" alt="創建項目" referrerpolicy="no-referrer"></p><p><strong>項目列表</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203542.png" alt="項目列表" referrerpolicy="no-referrer"></p><p><strong>項目概述</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203619.png" alt="項目概述" referrerpolicy="no-referrer"></p><p><strong>項目成員</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203637.png" alt="項目成員" referrerpolicy="no-referrer"></p><p><strong>項目設置</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203656.png" alt="項目設置" referrerpolicy="no-referrer"></p><p><strong>基於 Editor.md 開發的 Markdown 編輯器</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203854.png" alt="基於 Editor.md 開發的 Markdown 編輯器" referrerpolicy="no-referrer"></p><p><strong>基於 wangEditor 開發的富文本編輯器</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204651.png" alt="基於 wangEditor 開發的富文本編輯器" referrerpolicy="no-referrer"></p><p><strong>項目預覽</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204609.png" alt="項目預覽" referrerpolicy="no-referrer"></p><p><strong>超級管理員後台</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204710.png" alt="超級管理員後台" referrerpolicy="no-referrer"></p><h1><a id="user-content-使用的技術 todo-最新技術棧整理中使用的第三方庫升級中" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AFtodo-%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E6%A0%88%E6%95%B4%E7%90%86%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%8D%87%E7%BA%A7%E4%B8%AD"></a>使用的技術 (TODO: 最新技術棧整理中，使用的第三方庫升級中)</h1><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbeego%2Fbeego">Beego</a><del>1.10.0</del></li><li>MySQL 5.6</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fpandao%2Feditor.md">editor.md</a> Markdown 編輯器</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ftwbs%2Fbootstrap">Bootstrap</a> 3.2</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fjquery%2Fjquery">jQuery</a> 庫</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ffex-team%2Fwebuploader">WebUploader</a> 文件上傳框架</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Frstacruz%2Fnprogress">NProgress</a> 庫</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvakata%2Fjstree">jsTree</a> 樹狀結構庫</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FFortAwesome%2FFont-Awesome">Font Awesome</a> 字體庫</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ffengyuanchen%2Fcropper">Cropper</a> 圖片剪裁庫</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fsentsin%2Flayer">layer</a> 彈出層框架</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fhighlightjs%2Fhighlight.js">highlight.js</a> 代碼高亮庫</li><li><del>to-markdown</del><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdomchristie%2Fturndown">Turndown</a> HTML 轉 Markdown 庫</li><li><del>quill 富文本編輯器</del></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwangeditor-team%2FwangEditor">wangEditor</a> 富文本編輯器
<ul><li>參考
<ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bookstack.cn%2Fbooks%2Fwangeditor-4.7-zh">wangEditor v4.7 富文本編輯器教程</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwangeditor-team%2FwangEditor%2Fissues%2F2493">擴展菜單註冊太過繁瑣 #2493</a></li></ul></li><li>工具： <code>https://babeljs.io/repl</code> + <code>@babel/plugin-transform-classes</code></li></ul></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue">Vue.js</a> 框架</li></ul><h1><a id="user-content-主要功能" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD"></a>主要功能</h1><ul><li>項目管理，可以對項目進行編輯更改，成員添加等。</li><li>文檔管理，添加和刪除文檔等。</li><li>評論管理，可以管理文檔評論和自己發佈的評論。</li><li>用戶管理，添加和禁用用戶，個人資料更改等。</li><li>用戶權限管理 ， 實現用戶角色的變更。</li><li>項目加密，可以設置項目公開狀態，私有項目需要通過 Token 訪問。</li><li>站點配置，可開啓匿名訪問、驗證碼等。</li></ul><h1><a id="user-content-參與開發" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%8F%82%E4%B8%8E%E5%BC%80%E5%8F%91"></a>參與開發</h1><p>我們歡迎您在 MinDoc 項目的 GitHub 上報告 issue 或者 pull request。</p><p>如果您還不熟悉 GitHub 的 Fork and Pull 開發模式，您可以閲讀 GitHub 的文檔（<a href="https://gitee.com/link?target=https%3A%2F%2Fhelp.github.com%2Farticles%2Fusing-pull-requests%25EF%25BC%2589">https://help.github.com/articles/using-pull-requests）</a> 獲得更多的信息。</p><h1><a id="user-content-關於作者 lifei6671" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85lifei6671"></a>關於作者<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671">lifei6671</a></h1><p>一個不純粹的 PHPer，一個不自由的 gopher 。</p>]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/gsw945/mindoc</guid>
            <link>https://gitee.com/gsw945/mindoc</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何畫出規範的 UML 用例圖]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote>
  如果你在做設計過程中有一些困惑，如：不會找用例、兩個用例圖分不清楚、不知道自己畫的對不對。那麼希望本文能幫助釐清上面幾個問題，真正掌握用例圖，在後面的設計中能運用的得心應手。 
</blockquote><p>在做設計的時候你是否有以下困惑？</p><p>1.不會找用例：業務用例、系統用例又都是啥啊？我該如何把用例寫對啊？</p><p>2.兩個用例圖分不清楚：業務用例圖和系統用例圖感覺好像啊，似乎沒啥區別啊？</p><p>3.不知道自己畫的對不對：照貓畫虎畫了個用例圖，但是我也不知道畫的對不對，萬一評審的人也不會呢，就這樣交差吧</p><p>如果你在做設計過程中有以上困惑，那麼希望本文能幫助釐清上面幾個問題，真正掌握用例圖，在後面的設計中能運用的得心應手。</p><span id="OSC_h3_1"></span><h3>一、如何識別正確的用例</h3><p>首先看用例的概念，百科上定義「用例是軟件工程或系統工程中對系統如何反應外界請求的描述，是一種通過用戶的使用場景來獲取需求的技術」。什麼意思呢，這裏我引用《大象：Thinking in UML》裏面的一段話來解釋下這個定義</p><blockquote>
  這個世界的功能性體現在，首先有某人的一個願望，這個願望驅使人去做事並獲得一個確定的結果。如果沒有願望，功能性就無從談起。一個系統就是由各種各樣的願望組成的，換句話説，各種各樣的人為着各自的目的做着各種各樣的事情共同組成了一個系統。如果我們要描述一個系統的功能性需求，就要找到對這個系統有願望的人，讓他們來説明他們會在這個系統裏做什麼事，想要什麼結果。如果所有對系統有願望的人要做的所有事情都找全了，那這個系統的功能性就被確定下來了。 
</blockquote><p>用例的一個最主要的特徵是它是相對獨立的。這意味着它不需要與其他用例交互而獨自完成參與者的目的，也就是説用例從「功能」上説是完備的。用例本質體現了系統參與者的願望，不能完整達到參與者願望的不能稱為用例。例如取錢是一個有效的用例，填寫取款單卻不是，因為完整的目的是取到錢，沒有人會為了填寫取款單而專門跑一趟銀行的。</p><p>用例有兩種，業務用例和系統用例，那麼我們如何準確的識別用例呢？接下來我們就對業務用例、系統用例逐一分析。</p><span id="OSC_h4_2"></span><h4><strong>1.1 業務用例</strong></h4><p>業務用例的定義是業務執行者希望通過和所研究組織交互獲得的價值。</p><p>我們可以看到一個關鍵詞--價值，這個價值不是指你（組織）能提供什麼而是指我（執行者）想要什麼，這個時候就需要把視角放在組織外部，切換到執行者上，看看他希望從組織獲得什麼，而不是把視角放在組織內部，看組織能提供什麼。比如説以餐館這個組織為例，其業務執行者主要是顧客，雖然餐館可以提供零錢兌換、球賽播放、充電寶租借等服務，但是顧客來餐館就是為了吃飯的，顧客-&gt;就餐就是餐館的業務用例，提供就餐服務就是餐館這個組織最大的價值。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-a5374eb74aae14cc95076a410d7cd661_720w.webp" referrerpolicy="no-referrer"></p><p>試想一個餐館如果不圍繞「提供物美價廉的就餐服務」這一理念去經營，而是飯菜質量做的很差，提供了很多充電寶服務，那麼這個餐館的結果可想而知。</p><span id="OSC_h4_3"></span><h4><strong>1.2 系統用例</strong></h4><p>説完業務用例我們再來看看系統用例，系統用例的定義是<strong>系統能夠為執行者提供的、涉眾可以接受的價值</strong>。其中的幾個概念：</p><p><strong>1.系統</strong></p><p>封裝了自身的數據和行為，能獨立對外提供服務的東西才能稱為系統。需要注意的系統是一個整體，系統可能會有很多子系統。比如銀行轉賬交易時候需要做風控，如果有商家向銀行售賣交易系統，那麼風控這個子系統肯定是包含在整個交易系統內的，一起打包賣給銀行的。</p><p><strong>2.系統執行者</strong></p><p>系統執行者的定義是在所研究系統外，與該系統發生功能性交互的其他系統。這裏需要注意幾點：</p><ul><li>系統執行者一定是在系統外的，可以是人或者其他系統；</li><li>系統執行者必須是要和系統有交互的；</li><li>系統執行者不一定是業務執行者；</li></ul><p><strong>3.涉眾</strong></p><p>涉眾是與要建設的業務系統相關的一切人和事，系統執行者也是涉眾的一部分。</p><p>這裏還是以餐館為例，假如顧客是通過口頭告訴服務員（不是自己掃碼下單）我要點啥菜，服務員通過下單系統為顧客下單，那麼研究這個下單系統可以得出：</p><p>1.系統執行者：服務員，雖然顧客作為餐館這個組織的業務執行者，但是與下單系統直接交互的是服務員，所以服務員才是點餐系統的系統執行者；</p><p>2.涉眾，這個就很多了，顧客、服務員、餐館老闆、廚師等等都是涉眾，因為都是下單系統的利益關係者；</p><p>a.顧客擔心自己下單沒成功，等了很久不上菜；b.服務員擔心沒出單導致顧客投訴，自己獎金被扣；c.老闆擔心繫統故障引起很多顧客投訴，生意受到影響；</p><p>d.廚師擔心下單系統分配不合理，所有的菜都分配給自己做；</p><p>一般這個下單系統可以登錄、下單，查看下單記錄，這些都是下單系統的一些功能。我們再來回顧下系統用例的概念：系統用例指的是系統能夠為執行者提供的、涉眾可以接受的價值。那我們接下來就從每個涉眾的視角分析一下對這些功能的需要情況。</p><table><tbody><tr><td>&nbsp;</td><td>登錄</td><td>下單</td><td>查看下單記錄</td></tr><tr><td>服務員</td><td>我需要，要不然別人下錯單了怪我頭上咋辦</td><td>I need it！</td><td>我需要，方便查看顧客菜品上齊了沒</td></tr><tr><td>顧客</td><td>I don't care！</td><td>能不能下單直接影響我能不能吃上飯</td><td>我也需要，得打印出來我的菜單，結賬時候好核對</td></tr><tr><td>老闆</td><td>我也需要，可以看看服務員的工作情況</td><td>下單系統不能下單我買它來幹啥</td><td>我需要，方便訂單管理，也方便看看哪個菜客人點的最多</td></tr><tr><td>廚師</td><td>I don't care！</td><td>不能下單誰告訴我該做什麼菜</td><td>我需要，要不然説我少做了一道菜沒法解釋</td></tr></tbody></table><p>所以，從上可以得出下單、查看下單記錄滿足系統用例的概念，系統用例圖如下</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-941f85ed3f3c76603776890c626baad0_720w.webp" referrerpolicy="no-referrer"></p><p>可以看到，和業務用例不同的是在研究系統用例時我們需要把視角切換到系統，從系統出發看看能為執行者提供什麼樣的、涉眾都可以接受價值。</p><blockquote>
  Tips: 
 <br> 1.用例的名字一般是動賓結構，也就是「動詞+名詞」，但是不嚴格要求的。比如「成果分析」這個行業術語沒必要硬倒過來改成「分析成果」 
 <br><br> 2.老老實實去研究業務流程，做好業務建模，儘量從業務序列圖中映射出系統用例，這樣得到的系統用例才是是最真實的。 
 <br><br> 3.用例是可以有主執行者和輔執行者的：主執行者從執行者指向用例，而輔執行者從用例指向執行者，主執行者發起用例的交互，輔執行者在交互過程中被動參與進來。一般説來，輔執行者是人肉系統的情況比較少，更多時候是另一個非人智能系統。 
 <br><br> 4.主執行者和輔執行者是相對於用例來説的，「 xx 是 xx 用例的主/輔執行者」 是正確的，「 xx 是 xx 系統的主/輔執行者」 説法是錯誤的。 
</blockquote><span id="OSC_h3_4"></span><h3>二、如何區分業務用例圖和系統用例圖</h3><p>相信經過上面的分析，你已經發現了兩個用例圖的異同點，如果沒有，我再貼一下兩個圖（便於對比下單系統就簡化成下單這個一個用例），便於更直觀的對比：</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-935cabd4815c857f5f1f213313cdc984_720w.webp" referrerpolicy="no-referrer"></p><p>沒錯，兩個圖的最大的不同就是有無「/」，業務用例圖在業務執行者和業務用例上是有「/」的，系統用例圖在系統執行者和系統用例圖上沒有「/」，就是這麼簡單。所以現在再看到下面這個幾個圖，你是不是可以一眼看出其中的問題了。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-0f359402226387decb7f2f84f596e1b8_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3>三、如何用 PlantUML 畫出規範的用例圖</h3><p>PlantUML 是一個快速創建 UML 圖形的組件或者可以説是語言，通過簡單和直觀的語言來定義圖形。其在學習成本、效率、團隊協同以及維護成本上都有比較大的優勢，所以推薦使用 PlantUML 來畫圖。</p><p>用例圖畫起來其實很簡單，主要就是四個要素，這裏以系統用例為例，四個要素分別是系統、執行者、用例、關係。</p><span id="OSC_h4_6"></span><h4><strong>3.1 系統</strong></h4><p>系統用一個矩形塊表示，在 UML 語法中是 rectangle。如下：</p><pre><code>@startuml

rectangle "xx 系統" {

}

@enduml</code></pre><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-1e56d6f4f00762e9c52c4e80fc19b415_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_7"></span><h4><strong>3.2 執行者</strong></h4><p>執行者是用火材人表示，在 UML 語法中是 actor，主要有兩種寫法，如下：</p><pre><code>@startuml

'系統執行者的兩種寫法'
actor Actor1
:Actor2:

'業務執行者的兩種寫法'
actor/ Actor3
:Actor4:/

@enduml</code></pre><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-7bc9069607955953a91b022f6407ecfb_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_8"></span><h4><strong>3.3 用例</strong></h4><p>用例是用一個橢圓表示。在 UML 語法中是 usecase ，業務用例和系統用例的兩種寫法如下：</p><pre><code>@startuml

usecase/ " 業務用例 1" as UC1
'業務用例的第二種寫法：() + 用例名稱 + /'
(業務用例 2)/ as UC3

usecase "系統用例 1" as UC2
'系統用例的第二種寫法：() + 用例名稱 '
(系統用例 2)
@enduml</code></pre><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-d60475c23c6c1f7ba9f91182a7c28adc_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_9"></span><h4><strong>3.4 關係</strong></h4><p>系統用例圖中關係主要有四種，分別是關聯、包含、擴展、泛化。</p><p><strong>3.4.1 關聯</strong></p><p>關聯是執行者和用例之間的一種關係，一般用實線 + 實心箭頭表示：</p><pre><code>@startuml

actor Actor
rectangle "xx 系統" {
  usecase "系統用例 1" as UC1
}

Actor -&gt; UC1
@enduml</code></pre><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-dcc124640edc5d5498032e9f6c0dc23e_720w.webp" referrerpolicy="no-referrer"></p><p>這裏有一點需要注意的是，雖然表示關聯關係可以直接用實線如 A-B 這樣表示，但是在用例圖中我們儘量用實線+箭頭表示，否則如下：</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-3958002f20d09e5d978c2395431b5839_720w.webp" referrerpolicy="no-referrer"></p><p>你無法區分 Actor1 和 Actor2 誰是主執行者誰是輔執行者，又或者兩個都是主執行者？加上箭頭後就非常容易區分，如下</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-3cdc28e1905d6fa775aece4c99141bbb_720w.webp" referrerpolicy="no-referrer"></p><p><strong>3.4.2 包含</strong></p><p>包含是用例之間的一種關係，其中一個用例（稱為基本用例）的行為包含了另一個用例（稱為包含用例）的行為，用虛線箭頭 + &lt;&lt;include&gt;&gt;表示，箭頭指向包含用例。</p><p>包含關係意味着包含用例是基本用例中不可缺少的一個執行步驟，如果缺少了該包含用例，基本用例就會變得不完整，可類比類圖中對象之間的組合關係。使用包含關係的兩個場景：</p><ul><li>當基本用例較複雜時，可以分解出一些包含用例；</li><li>當兩個或以上的基本用例存在一些重複行為時，可以提煉出一個包含用例；</li></ul><pre><code>@startuml
'加入下面代碼指定方向，使 UML 從左往右更直觀'
left to right direction

actor Actor
rectangle "xx 系統" {
  usecase "基本用例" as UC1
  usecase "包含用例 1" as UC2
  usecase "包含用例 2" as UC3
}

Actor --&gt; UC1
UC1 ..&gt; UC2 : &lt;&lt;include&gt;&gt;
UC1 ..&gt; UC3 : &lt;&lt;include&gt;&gt;

@enduml</code></pre><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-bb9073fa37bdb0a2b7c993b41e093e15_720w.webp" referrerpolicy="no-referrer"></p><blockquote>
  上面我用了 Actor --&gt; UC1、UC1 ..&gt; UC2，有興趣的可以換成-&gt;、.&gt;看看效果 
</blockquote><p><strong>3.4.3 擴展關係</strong></p><p>擴展是用例之間的一種關係，其中一個用例（稱為擴展用例）的行為增強了另一個用例（稱為基本用例）的行為，用虛線箭頭 + &lt;&lt;extend&gt;&gt;表示，箭頭指向基本用例。</p><p>擴展用例是對基本用例的一種補充或強化，即使沒有該擴展用例，對基本用例也不會產生直接影響，基本用例自身仍然是完整的。也就是説擴展用例是基本用例的一種可能的補充，如購買運費險就是對下單這一用例的擴展，買不買運費險都不影響下單。</p><pre><code>@startuml
left to right direction

actor Actor
rectangle "xx 系統" {
  usecase "基本用例" as UC1
  usecase "擴展用例" as UC2
}

Actor --&gt; UC1
UC1 &lt;.. UC2 : &lt;&lt;extend&gt;&gt;

@enduml</code></pre><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-ae3bc9630dd18392734594241a350a08_720w.webp" referrerpolicy="no-referrer"></p><p><strong>3.4.4 泛化</strong></p><p>泛化關係也可以稱作繼承關係（類比類圖中的泛化），用一個實線 + 空心箭頭來表示，可以表示執行者間的關係也可以表示用例之間的關係。</p><pre><code>@startuml
left to right direction
actor Actor

rectangle "xx 系統" {
  usecase "支付" as UC1
  usecase "微信支付" as UC2
  usecase "支付寶支付" as UC3
}

Actor --&gt; UC1
UC1 &lt;|-- UC2 
UC1 &lt;|-- UC3

@enduml</code></pre><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-6e8cf697b38eacfe683e94aee360c1d6_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_10"></span><h4>四、一個案例</h4><p>這裏我們以某銀行的 App 為例，作為銀行的一個系統我們對其進行分析：</p><p>1.系統：那自然是這個 App</p><p>2.系統執行者</p><p>a.主執行者：一般來銀行辦業務的客戶都是主執行者，包括個人用戶和企業用戶；</p><p>b.輔執行者：銀行，用戶在 App 辦理的所有業務都需要銀行來配合執行；</p><p>3.系統用例：作為銀行的線上業務，包含轉賬、查詢餘額、理財、貸款。</p><p>4.關係：這裏需要注意的是轉賬過多有可能會超過限額，這個時候會提示超限；在辦貸款業務之前，銀行肯定會對用戶的資產進行評估，這樣才能決定其貸款額度。</p><pre><code>@startuml
left to right direction
actor 客戶 as Actor
actor 銀行 as Actor2

rectangle "某銀行 App" {
  usecase "轉賬" as UC1
  usecase "查詢餘額" as UC2
  usecase "理財" as UC3
  usecase "貸款" as UC4
  usecase "評估資產" as UC5
  usecase "提示限額" as UC6
}

Actor &lt;|-up- 個人用戶
Actor &lt;|-up- 企業用戶
Actor --&gt; UC1

Actor --&gt; UC2
Actor --&gt; UC3
Actor --&gt; UC4
UC1 ----&gt; Actor2
UC2 ----&gt; Actor2
UC3 ----&gt; Actor2
UC4 ----&gt; Actor2

UC4 .left.&gt; UC5 :&lt;&lt;include&gt;&gt;
UC1 &lt;.down. UC6 :&lt;&lt;extend&gt;&gt;

@enduml</code></pre><p>整體用例圖如下：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-83c93363c552d5ae6a26289ca7afe982_720w.webp" referrerpolicy="no-referrer"></p><p>作者 | 夜合</p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1383600%3Futm_content%3Dg_1000384812" target="_blank">原文鏈接</a></strong></p><p><strong>本文為阿里雲原創內容，未經允許不得轉載。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10314456</guid>
            <link>https://my.oschina.net/yunqi/blog/10314456</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AWS 全面推出適用於 Rust 和 Kotlin 的 SDK]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">自 2021 年 12 月首次公開預覽兩年後，AWS 宣佈已全面推出適用於 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Fdeveloper%2Fannouncing-general-availability-of-the-aws-sdk-for-rust%2F" target="_blank">Rust</a> 和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Fdeveloper%2Faws-sdk-for-kotlin-ga%2F" target="_blank">Kotlin</a> 的 SDK 並支持生產使用。&nbsp;</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">官方介紹稱，</span>AWS SDK for Rust 提供了慣用的類型安全 API；以及涵蓋了 Rust 語言的優勢，例如性能、可靠性和生產力。該 SDK 支持 async/await、非阻塞 IO 和構建器等現代 Rust 語言特性。並提供對 300 多個 AWS 服務的訪問，每個服務都有自己的 &nbsp;crate；項目團隊後續計劃將繼續增加對新服務和功能的支持。</span></p><p><span style="color:#000000">該 SDK 使用合理的默認值開箱即用，但它也是可擴展的，允許用戶根據自己獨特的用例對其進行自定義。SDK 是模塊化的，允許客戶僅為他們使用的服務編譯 crate。它的設計速度也很快。藉助 Rust SDK，用戶可以在 Amazon Simple Storage Service (Amazon S3)、Amazon Elastic Compute Cloud (Amazon EC2) 和 Amazon DynamoDB 之間快速傳輸數據。</span></p><p><img height="300" src="https://oscimg.oschina.net/oscnet/up-79f46fd536e1e97a2b7983b321eed1fb7f8.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">事實上，對 AWS 服務的非官方 Rust 支持至少從 2015 年就開始存在了，當時 Matthew Mayer 和 Anthony DiMarco 在 Rust 1.0 發佈後不久啓動了一個名為 Rusoto 的獨立項目，目標包括學習 Rust。根據 Rust crate 存儲庫 crates.io 上的統計，Rusoto 已被下載超過 1100 萬次。2021 年，AWS Rust SDK 的第一個 alpha 版本由當時在 AWS 工作的 iliana etaoin 推出，她也是 Rusoto 的聯合維護者。</span></p><p><span style="color:#000000">另一方面，AWS SDK for Kotlin 採用了從頭開始設計。AWS 方面表示，此舉旨在為用戶您提供慣用的 Kotlin 體驗，包括特定域語言 (DSL) 構建器，以及使用例程對異步 AWS 服務調用的支持。新發布的版本使開發人員能夠使用 JVM 平台或 Android API Level 24+，未來版本還將支持 Kotlin/Native 等其他平台。</span></p><p><span style="color:#000000">那麼就有人問了，既然 Kotlin 可以輕鬆地與現有的 Java SDK 進行互操作，那麼&nbsp;AWS 為什麼還要為 Kotlin 製作 SDK 呢？對此，AWS 解釋原因有三：</span></p><ul><li style="text-align:start"><span style="color:#000000">首先，Kotlin 比 Java 具有更多的互操作性，包括 null-safety、coroutines、extension functions 和 smart casting。AWS 希望提供一個能夠充分利用該語言並且讓 Kotlin 開發者感到符合語言習慣的 SDK。</span></li><li style="text-align:start"><span style="color:#000000">其次，自 2019 年以來，Android 移動開發一直以 Kotlin 為先。Android 開發人員應該能夠使用支持所有 AWS 服務的現代 SDK。這也是 AWS SDK for Kotlin 支持 Android API 24+ 的首要原因。事實上，AWS Amplify for Android v2 就是在 AWS SDK for Kotlin 的基礎上構建的。</span></li><li style="text-align:start"><span style="color:#000000">最後，Kotlin 並不是一種僅限 JVM 的語言。Kotlin multiplatform 允許用戶編寫針對 JVM、本機二進制文件（Linux、Windows、macOS 和 iOS）、JavaScript 和 WASM 的 Kotlin 代碼。因此該 SDK 從一開始也就被定位開發為多平台庫，項目團隊計劃在未來支持更多目標。</span></li></ul><p><span style="color:#000000">瞭解有關未來版本計劃推出的功能的詳細信息，可查看</span><span style="color:#333333">&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Forgs%2Fawslabs%2Fprojects%2F50%2F" target="_blank">AWS SDK for Rust 路線圖</a>&nbsp;<span style="color:#333333">和&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fawslabs%2Faws-sdk-kotlin%2Fprojects%2F2" target="_blank">AWS SDK for Kotlin 路線圖</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 04:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269167/aws-sdks-for-rust-and-kotlin</guid>
            <link>https://www.oschina.net/news/269167/aws-sdks-for-rust-and-kotlin</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米迴應「雷軍最落魄時只剩冰冷的 40 億」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">近日，存在兩張有關小米創始人雷軍的圖片在網絡上廣為流傳。圖片文案顯示，「雷軍最落魄的時候，只剩下銀行卡里冰冷的 40 億」。</span></p><p><span style="background-color:#ffffff; color:#222222"><img alt="" height="392" src="https://oscimg.oschina.net/oscnet/up-90e839ec6755aa3946e458eff583478c12a.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#222222">對此，小米公司發言人官方微博昨日發文迴應稱：</span></p><blockquote><p><span style="color:#333333">今日網上出現大量關於本集團創始人雷軍的不實傳聞，所謂「冰冷的 40 億」 純屬子虛烏有、完全失實。請大家勿信、勿傳。 人生從來不是爽文，而是腳踏實地的歷程，感謝大家的理解與支持。 ​​​</span></p></blockquote><p>雷軍本人也在評論區評論稱：</p><blockquote><p><span style="color:#333333">人生從來不是爽文，都是腳踏實地的歷程，感謝大家的理解與支持。</span>&nbsp;</p></blockquote><p><img height="308" src="https://oscimg.oschina.net/oscnet/up-bf1373ae5fb064655792a016bd1dc5ca6d7.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269159</guid>
            <link>https://www.oschina.net/news/269159</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[gkd —— 自定義屏幕點擊 APP]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>gdk 是一個<span style="background-color:#ffffff; color:#1f2328">基於<span>&nbsp;</span></span><strong style="color:#1f2328">無障礙</strong><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>+<span>&nbsp;</span></span><strong style="color:#1f2328">高級選擇器</strong><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>+<span>&nbsp;</span></span><strong style="color:#1f2328">訂閲規則</strong><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>的自定義屏幕點擊 APP。</span></p><p style="color:#1f2328; text-align:start">基於<span>&nbsp;</span><a href="https://github.com/gkd-kit/selector">高級選擇器</a><span>&nbsp;</span>+<span>&nbsp;</span><a href="https://github.com/gkd-kit/subscription">訂閲規則</a><span>&nbsp;</span>+<span>&nbsp;</span><a href="https://github.com/gkd-kit/inspect">快照審查</a>，它可以實現</p><ul><li>點擊跳過任意開屏廣告/點擊關閉應用內部任意彈窗廣告, 如關閉百度貼吧帖子廣告卡片/知乎回答底部推薦廣告卡片</li><li>一些快捷操作, 如微信電腦登錄自動同意/微信掃描登錄自動同意/微信自動領取紅包</li></ul><p><img alt="" height="667" src="https://static.oschina.net/uploads/space/2023/1120/165010_l9Dm_4252687.jpg" width="300" referrerpolicy="no-referrer">&nbsp;<img alt="" height="667" src="https://static.oschina.net/uploads/space/2023/1120/165048_Krg3_4252687.jpg" width="300" referrerpolicy="no-referrer"></p><p><img alt="" height="674" src="https://static.oschina.net/uploads/space/2023/1120/165057_bqXk_4252687.gif" width="300" referrerpolicy="no-referrer"></p><p>&nbsp;<img alt="" height="500" src="https://static.oschina.net/uploads/space/2023/1120/165116_uE95_4252687.gif" width="300" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/gkd</guid>
            <link>https://www.oschina.net/p/gkd</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 在純 WebGPU/Rust 中實現 RWKV 語言模型]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-web-rwkv" class="anchor" href="https://gitee.com/cryscan/web-rwkv#web-rwkv"></a>Web-RWKV</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcrates.io%2Fcrates%2Fweb-rwkv"><img src="https://img.shields.io/crates/v/web-rwkv" alt="crates.io" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.rs%2Fweb-rwkv"><img src="https://docs.rs/web-rwkv/badge.svg" alt="docs.rs" referrerpolicy="no-referrer"></a></p><p align="center"></p><p>This is an inference engine for the <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FBlinkDL%2FRWKV-LM">language model of RWKV</a> implemented in pure WebGPU.</p><h2><a id="user-content-features" class="anchor" href="https://gitee.com/cryscan/web-rwkv#features"></a>Features</h2><ul><li>No dependencies on CUDA/Python.</li><li>Support Nvidia/AMD/Intel GPUs, including integrated GPUs.</li><li>Vulkan/Dx12/OpenGL backends.</li><li>Batched inference.</li><li>Int8 and NF4 quantization.</li><li>Very fast.</li><li>LoRA merging at loading time.</li><li>Support RWKV V4, V5 and V6.</li></ul><p align="center"></p><p>Note that <code>web-rwkv</code> is only an inference engine. It only provides the following functionalities:</p><ul><li>A tokenizer.</li><li>Model loading.</li><li>State creation and updating.</li><li>A <code>run</code> function that takes in prompt tokens and returns logits (predicted next token probabilities after calling <code>softmax</code>).</li></ul><p>It <em>does not</em> provide the following:</p><ul><li>OpenAI API or APIs of any kind.
<ul><li>If you would like to deploy an API server, check <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fcgisky1980%2Fai00_rwkv_server">AI00 RWKV Server</a> which is a fully-functional OpenAI-compatible API server built upon <code>web-rwkv</code>.</li><li>You could also check the <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FPrunoideae%2Fweb-rwkv-axum"><code>web-rwkv-axum</code></a> project if you want some fancy inference pipelines, including Classifier-Free Guidance (CFG), Backus–Naur Form (BNF) guidance, and more.</li></ul></li><li>Samplers, though in the examples a basic nucleus sampler is implemented, this is <em>not</em> included in the library itself.</li><li>State caching or management system.</li><li>Python (or any other languages) binding.</li><li>Runtime. Without a runtime makes it easy to be integrated into any applications from servers, front-end apps (yes, <code>web-rwkv</code> can run in browser) to game engines.</li></ul><h2><a id="user-content-compile-and-run" class="anchor" href="https://gitee.com/cryscan/web-rwkv#compile-and-run"></a>Compile and Run</h2><ol><li><a href="https://gitee.com/link?target=https%3A%2F%2Frustup.rs%2F">Install Rust</a>.</li><li>Download the model from <a href="https://gitee.com/link?target=https%3A%2F%2Fhuggingface.co%2FBlinkDL%2Frwkv-5-world">HuggingFace</a>, and convert it using <a href="https://gitee.com/cryscan/web-rwkv/blob/main/convert_safetensors.py"><code>convert_safetensors.py</code></a>. Put the <code>.st</code> model under <code>assets/models</code>.</li><li>To generate 100 tokens and measure the time cost, run
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> gen</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To chat with the model, run
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To generate 4 batches of text with various lengths simultaneously, run
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> batch</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To specify the location of your safetensors model, use
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat <span class="nt">--</span><span class="nt">--model</span> /path/to/model</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To load custom prompts for chat, use
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat <span class="nt">--</span><span class="nt">--prompt</span> /path/to/prompt</span></pre><div class="markdown-code-block-copy-btn"></div></div></div>
See <a href="https://gitee.com/cryscan/web-rwkv/blob/main/assets/prompt.json"><code>assets/prompt.json</code></a> for details.</li><li>To specify layer quantization, use <code>--quant &lt;LAYERS&gt;</code> or <code>--quant-nf4 &lt;LAYERS&gt;</code> to quantize the first <code>&lt;LAYERS&gt;</code> layers. For example, use
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat <span class="nt">--</span><span class="nt">--quant</span> 32</span></pre><div class="markdown-code-block-copy-btn"></div></div></div>
to quantize all 32 layers.</li><li>Use <code>--turbo</code> flag to switch to alternative <code>GEMM</code> kernel when inferring long prompts.</li></ol><h2><a id="user-content-use-in-your-project" class="anchor" href="https://gitee.com/cryscan/web-rwkv#use-in-your-project"></a>Use in Your Project</h2><p>To use in your own rust project, simply add <code>web-rwkv = "0.4"</code> as a dependency in your <code>Cargo.toml</code>.
Check examples on how to create the environment, the tokenizer and how to run the model.</p><h3><a id="user-content-explanation-of-batched-inference" class="anchor" href="https://gitee.com/cryscan/web-rwkv#explanation-of-batched-inference"></a>Explanation of Batched Inference</h3><p>Since version v0.2.4, the engine supports batched inference, i.e., inference of a batch of prompts (with different length) in parallel.
This is achieved by a modified <code>WKV</code> kernel.</p><p>When building the model, the user specifies <code>token_chunk_size</code> (default: 32, but for powerful GPUs this could be much higher), which is the maximum number of tokens the engine could process in one <code>run</code> call.</p><p>After creating the model, the user creates a <code>ModelState</code> with <code>max_batch</code> specified.
This means that there are <code>max_batch</code> slots that could consume the inputs in parallel.</p><p>Before calling <code>run()</code>, the user fills each slot with some tokens as prompt.
If a slot is empty, no inference will be run for it.</p><p>After calling <code>run()</code>, some (but may not be all) input tokens are consumed, and <code>logits</code> appears in their corresponding returned slots if the inference of that slot is finished during this run.
Since there are only <code>token_chunk_size</code> tokens are processed during each <code>run()</code> call, there may be none of <code>logits</code> appearing in the results.</p><h2><a id="user-content-convert-models" class="anchor" href="https://gitee.com/cryscan/web-rwkv#convert-models"></a>Convert Models</h2><p><em>You must download the model and put in <code>assets/models</code> before running if you are building from source.</em>
You can now download the converted models <a href="https://gitee.com/link?target=https%3A%2F%2Fhuggingface.co%2Fcgisky%2FRWKV-safetensors-fp16">here</a>.</p><p>You may download the official RWKV World series models from <a href="https://gitee.com/link?target=https%3A%2F%2Fhuggingface.co%2FBlinkDL%2Frwkv-5-world">HuggingFace</a>, and convert them via the provided <a href="https://gitee.com/cryscan/web-rwkv/blob/main/convert_safetensors.py"><code>convert_safetensors.py</code></a>.</p><p>If you don't have python installed or don't want to, there is a pure rust converter that you can run</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span><span class="nb">cd</span> ./crates/web-rwkv-converter</span><span id="LC2" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--</span><span class="nt">--input</span> /path/to/model.pth</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-troubleshoot" class="anchor" href="https://gitee.com/cryscan/web-rwkv#troubleshoot"></a>Troubleshoot</h2><ul><li><p>"thread 'main' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: HeaderTooLarge'"</p><p>Your model is broken, mainly because you cloned the repo but did not set up git-lfs.Please download the model manually and overwrite that one in <code>assets/models</code>.</p></li><li><p>"thread 'main' panicked at 'Error in Queue::submit: parent device is lost'"</p><p>Your GPU is not responding.
Maybe you are running a model that is just too big for your device. If the model doesn't fit into your VRam, the driver needs to constantly swap and transfer the model parameters, causing it to be 10x slower.
Try to quantize your model first.</p></li></ul><h2><a id="user-content-credits" class="anchor" href="https://gitee.com/cryscan/web-rwkv#credits"></a>Credits</h2><ul><li>Tokenizer is implemented by <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkoute%2Frwkv_tokenizer">@koute</a>.</li></ul>]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/cryscan/web-rwkv</guid>
            <link>https://gitee.com/cryscan/web-rwkv</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 七年 4 個階段：滴滴可觀測架構演進與實踐]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一分鐘精華速覽</h1><p>在當前階段，可觀測性的建設並沒有統一的執行路徑。每家公司會根據自身的業務需求、運營模式和規模，形成一套獨特的實踐方案。為了應對業務規模的擴大和需求的變化，可觀測團隊必須持續優化和升級其架構，並始終保證可觀測系統本身的高可用性。</p><p>本文詳盡地描繪了滴滴從 2017 年至今，在四個不同階段所遭遇的技術挑戰，如單體應用階段的資源瓶頸、運維成本的上升、分佈式服務的通信問題等等。滴滴通過尋找並應用適宜的技術方案，逐漸戰勝了這些技術難題，使其可觀測架構始終能為業務提供強大的支持。 <img src="https://oscimg.oschina.net/oscnet/up-37ea3e51d7965f7f81e1f723481e1d1511f.png" alt="file" referrerpolicy="no-referrer"></p><p>作者介紹 <img src="https://oscimg.oschina.net/oscnet/up-0a5962d122ef197918b9378c33d36a225a4.png" alt="file" referrerpolicy="no-referrer"></p><p>滴滴出行可觀測架構負責人——錢威</p><p>TakinTalks 穩定性社區專家團成員，滴滴出行可觀測架構負責人。深耕可觀測領域多年，專注於架構設計與優化。帶領團隊完成了滴滴第二代到第四代的架構迭代。多個可觀測開源項目的 Contributor。目前聚焦在滴滴可觀測的穩定性建設和滴滴場景下的可觀測性的實現與落地工作。</p><p>溫馨提醒：本文約 7500 字，預計花費 12 分鐘閲讀。</p><p>「TakinTalks 穩定性社區」公眾號後台回覆 「交流」 進入讀者交流羣；回覆「1026」獲取課件資料；</p><h1>背景</h1><p>大家先來看一個故事——</p><p>「20 世紀初，當時處於高速發展期的福特公司。有一天一台電機壞了，相關生產工作被迫停止。很多工人和專家都找不到問題在哪。直到請到了一個叫斯坦門茨的人，斯坦門茨檢查後用粉筆在電機外殼畫了一條線，説打開電機，把記號處的線圈減少 16 圈。修理工照做後，故障排除，生產隨即恢復。」</p><p>我們在工作或在開發過程中，時常會遇到這樣的場景——讓你一頭霧水，不知道從何下手的難題，但是總有那麼一兩個「專家」一眼就能洞察問題所在。那麼，我們需要思考一下，這到底是好事還是壞事？</p><p>滴滴作為一家出行平台，業務涵蓋快車、專車、順風車、共享單車等多個領域。每天有千萬的用戶和司機在平台上進行交互和使用，服務之間形成了複雜的依賴關係。在如此大規模的分佈式系統中，故障排查和性能優化無疑是一項複雜的任務。</p><p>每次都依賴於個別專家的經驗顯然是無法控制的，也無法保證結果。因此，我們更願意通過不斷地演進可觀測的架構，來支持業務的快速迭代和創新。</p><h1>一、可觀測架構演進解決了哪些問題？</h1><h2>1.1 滴滴可觀測系統通用架構</h2><p>滴滴可觀測系統通用架構主要包含幾個部分，如下圖所示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-41df9f4c584d6ec7df86ea7af9d0dfc6121.png" alt="file" referrerpolicy="no-referrer"></p><p>我們會採集目標主機或其他的相關指標，經過傳輸鏈路後，某些指標可能會經過計算模塊進行處理，然後再寫回系統中。隨後，這些數據會被存儲起來。基於這些存儲的數據，查詢功能可以為上層應用提供數據展示，如儀錶板、數據大盤、報警和事件等。</p><p>需要注意的是，每個模塊需要完成的任務或實現的功能各不相同。例如，查詢模塊可能需要負責數據路由、聚合以及實現 DSL 等功能，這些功能通常在查詢層進行實現。</p><p>數據存儲的實現方式有很多種，如 InfluxDB、RRDtool、Prometheus、Druid、ClickHouse 等，都可以作為可觀測系統的存儲方案。</p><p>傳輸模塊在系統中起到連接的作用，常見的消息隊列就是用在這一模塊中。當我們提到消息隊列時，大家首先想到的可能是 Kafka，當然也有一些較為小眾的選擇，如 NSQ。</p><p>計算模塊的任務則是將大量的指標轉換成我們所需的形式，可能會去除一些維度進行計算。Flink、Spark 等工具在這一模塊中都是常見的選擇。</p><p>對於數據採集，也有許多豐富的工具可以選擇，如 Telegraf、Node exporter，以及最近推出的 Grafana Agent 等。</p><h2>1.2 可觀測架構演進的 4 個階段</h2><h3>1.2.1 階段一：2017 年以前</h3><p>當業務需求發生變化時，存儲模塊的性能問題通常是最先暴露出來的。在 2017 年以前，滴滴主要使用 InfluxDB 作為存儲選擇。我們根據業務服務的維度將 InfluxDB 實例進行了拆分，這樣的設計便帶來了一些問題。</p><p>首先，單機版本的性能存在瓶頸。例如，我們可能會遇到查詢量較大的情況，如查詢跨度長或查詢數據多，這種情況下很可能會出現內存溢出（OOM）的問題。這也是社區中經常討論的問題。 <img src="https://oscimg.oschina.net/oscnet/up-416c08cc213a26dc5a99ac0e2175637595c.png" alt="file" referrerpolicy="no-referrer"></p><p>再者，我們採用的分片方式也存在問題。我們是按照服務進行拆分的，例如，如果今天有 50 個服務，那可能需要 50 個或更少的實例。但如果服務數量在明天增加到 500 個，那麼運維成本將隨之顯著增加。特別是在當前大家普遍採用微服務架構的情況下，這種運維成本將會非常高。</p><h3>1.2.2 階段二：2017-2018 年</h3><p>為瞭解決上述問題，我們在 2017 年引入了 RRDTool。在此期間，RRDTool 取代了 InfluxDB，成為滴滴可觀測的主要存儲工具。</p><p>在 RRDTool 的設計中，我們採用了一致性哈希算法，在讀寫鏈路中進行多個 RRDTool 實例的分片。這種哈希算法的過程是先將所有的 Tag 打平，然後排序，最後再進行哈希，分配到各個實例中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7ac44d840041980a63c09d3c56e62770b70.png" alt="file" referrerpolicy="no-referrer"></p><p>除此之外，我們還引入了一個名為「索引」的服務。這個服務的主要任務是滿足產品需求。比如，我們可能需要提供服務列表，當用戶選擇了他們自己的服務後，需要知道該服務下有哪些指標，以及每個指標下有哪些 Tag。這種需求需要一個高效的索引服務來完成。</p><p>基於 RRDTool 的架構改進帶來了兩大成果。首先，它解決了 InfluxDB 的熱點問題。我們原來是按照服務去拆分實例，現在我們將這些曲線分散到各個實例上。其次，這也減輕了 InfluxDB 的運維成本，因為我們採用了相對自動化的分片方式。</p><h3>1.2.3 階段三：2018-2020 年</h3><p>在 2018 年以後，我們面臨了新的挑戰。由於 RRDTool 的設計原理是每條曲線一個文件，因此，當數據規模擴大時，對 IO 的需求也隨之增大。我們的 IOPS 已經超過了 3 萬，這就需要我們增加更多的設備，例如具有高 IO 性能的機器，以解決這個問題。但是，這導致成本逐漸增高，且問題愈發嚴重。同時，可觀測性中的讀寫是正交的，讀寫優化存在衝突——寫通常是所有曲線寫入最新的部分，而讀通常是讀取多條曲線或某條曲線長時間的數據。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d81c56d2f84ab2161a197aedd244e17e750.png" alt="file" referrerpolicy="no-referrer"></p><p>（縱向為 Writes，橫向為 Reads)</p><p>那麼，我們如何解決這個問題呢？經過分析，我們發現 80% 的查詢都集中在最近兩個小時內，因此，我們設計了一個冷熱分層策略。這個策略的核心就是將壓縮後的數據存儲在內存中。壓縮主要針對兩個方面，一是時間戳，二是值。由於時間戳產生的時間間隔通常比較固定，而值的變化往往較為平緩，這為我們的壓縮策略提供了依據。</p><p>基於這個原理，我們內部創建了一個名為"Cacheserver"的服務，主要服務於最近兩小時的數據，採用了全內存的設計。這種設計使得用戶查詢的延遲從 10 秒降低到了 1 秒以內，每個數據點的存儲由原來的 16 字節降低到了 1.64 字節。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a65d91b989d8dd692a5abc11952dddb1621.png" alt="file" referrerpolicy="no-referrer"></p><p>整個設計可以通過上述圖示來理解。首先是冷熱分層，RRDTool 和 Cacheserver 共同完成了整個存儲任務。以圖示右半部分為例，原始的時間戳為 350、360、370、381，存儲這些數據需要 256 比特。但經過壓縮後，只需要 88 比特就足夠了。這只是四個時間戳的情況，如果時間戳更多，那麼壓縮效果會更加顯著。</p><h3>1.2.4 階段四：2020-至今</h3><p>隨着用戶接入的組件不斷增多，用戶的查詢需求也變得越來越複雜。在我們的使用場景中，一旦 RRDTool 進行了降採，我們就無法再查看到原始數據。</p><p>面對這種情況，我們開始思考如何設計一個能滿足用戶當前和未來需求的系統。我們改變了問題解決的策略，不再針對每個具體情況單獨設計方案。例如，如果過去有新增的查詢形態，我們會需要編碼並上線一個新的函數。而現在，我們選擇直接利用業界的生態。</p><p>當時，Prometheus 是非常流行的。我們將目標從引入生態轉變為引入 Prometheus 的生態。選擇 Prometheus 的原因是，隨着 K8s 的普及，Prometheus 已經成為了監控系統的事實標準。許多業界大廠和流行的廠商都在為 Prometheus 持續貢獻代碼和架構。</p><p>然而，如果我們選擇引入 Prometheus 的生態，就無法繼續使用 RRDTool，因為它無法兼容 Prometheus 的生態。這就需要我們尋找新的存儲方案。</p><p>難點 1：新的存儲方案如何選擇？</p><p>在面臨新的存儲方案選擇時，我們主要考慮了 Cortex、Thanos 和 VictoriaMetrics（簡稱 VM）。這些方案都是為了彌補 Prometheus 本身的一些缺陷而設計的，因為 Prometheus 從誕生之初就定位為單機存儲，不支持長期存儲，也沒有高可用性。因此，Cortex 和 Thanos 在當時成為了業界主要的解決方案。</p><p><img src="https://oscimg.oschina.net/oscnet/up-176778420cc3bcd7e50c8134538547fba02.png" alt="file" referrerpolicy="no-referrer"></p><p>（調研業界 Prometheus 相關方案）</p><p>在對比這些方案時，我們發現 Cortex 和 Thanos 都能有效解決 Prometheus 的原生缺點。從成本角度考慮，由於 Thanos 和 Cortex 都採用了對象存儲，因此它們的成本相對較低。但是，這兩個方案由於使用了大量的第三方服務，如果公司沒有對象存儲或者沒有云服務，那麼這些組件的維護工作可能就需要由可觀測團隊來完成。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1d163b32eaf5437ddae21f7a3ecc49ca221.png" alt="file" referrerpolicy="no-referrer"></p><p>(RRDTool 與 VictoriaMetrics 方案對比）</p><p>相比之下，VM 與 RRDTool 相比，它是完全兼容 Prometheus 的。此外，我們之前提到過降採策略，RRDTool 的數據在超過兩小時後會進行降採，一旦降採，我們就無法查看到原始數據。而 VM 本身不進行降採，這為我們帶來了更多可能性。在降低存儲成本方面，VM 的表現較好，在我們的環境測試中，其存儲成本只有 RRDTool 的 1/20 左右。在數據上報形態上，Prometheus 是 Pull 形式，而 RRDTool 只能支持 Push 形式，並且只支持私有協議。但 VM 既支持 Pull 也支持 Push，對流行的數據上報協議也有良好的支持。</p><p>難點 2：如何引入 Prometheus 生態？</p><p>那麼，我們是否可以簡單地將存儲方案替換為 VM 呢？實際上，答案是否定的。在引入新的生態系統時，我們首先需要考慮現有的公司方案。引入新的生態並不意味着要完全顛覆現有的產品架構，不能簡單地進行替換。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4ced98fb48857f34094958a2cf4099a710e.png" alt="file" referrerpolicy="no-referrer"></p><p>為了引入新的生態，滴滴進行了一些改造。如圖所示，綠色部分是使用 Prometheus 原生方案所需完成的工作。只要被監控的對象支持"/metrics"這樣的接口，Prometheus 便可以進行數據拉取。對滴滴而言，我們原來的架構是基於採集、傳輸、存儲的 Push 模型。因此，我們在採集部分增加了一個兼容 Prometheus 的 Adapter。在原有基礎上，對於那些新增並且支持 Prometheus 拉取的服務，我們也可以使用自有的採集方法進行數據拉取。</p><p>在生態引入的成果方面，我們已經支持了 Prometheus 的數據採集，並且可以支持 PromQL 的圖表查看和報警這兩個常見場景。此外，我們還在圖表查看這個維度上增加了一些新的功能，比如增加了 TopK/BottomK 等圖表維度的 Outlier 能力。這樣，如果一個服務有很多個實例，我們就可以利用 TopK/BottomK 這樣的功能找出異常點。</p><p>在回饋社區方面，我們向 VM 官方和 Prometheus 社區遞交了一些 PR，以此為整個社區做出貢獻。</p><h1>二、如何保障可觀測系統自身穩定性？</h1><p>眾所周知，可觀測系統的目的是保障業務的穩定性。那麼，我們如何保障可觀測系統本身的穩定性呢？首先，我們需要探討如何監測這個可觀測的系統。是否可以在自身的系統上配置一些策略？或者建立一些儀表盤？或者採取其他一些方式？在這方面，我將分享一些我們的實驗和思考。</p><h2>2.1 如何觀測可觀測系統？</h2><p>我們不能讓可觀測的系統對其本身做觀測。例如，如果存儲系統出現故障，而查詢數據的方式是從自身的存儲中查詢，那麼就會形成循環依賴。因此，第一個原則就是不能讓可觀測的系統自觀測。第二個原則與第一個原則有關，即需要一套獨立的數據採集和報警服務來進行觀測。</p><p>在我們的實踐中，主要採用了兩種方法。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2baf281d16b9116d4a30925231fa56d1a24.png" alt="file" referrerpolicy="no-referrer"></p><p>第一種方法用於監測流量，適用於數據採集、傳輸和存儲。這種方法主要通過使用 Exporter、Prometheus 和 Alertmanager 來進行自我監測。例如，如果存儲寫入流量突然變化，就可以使用這套系統進行自我監測。</p><p>另一種方法是監測能力。以報警為例，最簡單的方法是設置一條始終會觸發閾值的報警，但可能不會發送實時消息或短信通知。一旦報警事件中斷，可能是因為報警系統本身存在問題，或者報警系統所依賴的存儲查詢存在問題。在這種情況下，我們可以通過設置探測器和進行端到端的檢查來解決問題。</p><h2>2.2 如何保障可觀測架構始終穩定？</h2><p>我們可以從兩個方面來考慮：一是通過架構優化, 二是採取常用的保障手段。</p><h3>2.2.1 架構優化</h3><p>要點 1：雞蛋不要放在一個籃子裏</p><p>對於架構優化，一個簡單的原則就是不要把所有的雞蛋放在一個籃子裏。我們可以通過以下的設計實現這一點。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8c1c833a7b8db7fbd51e4b6d56286bd0b83.png" alt="file" referrerpolicy="no-referrer"></p><p>（VictoriaMetrics 存儲多集羣設計）</p><p>滴滴主要從事打車業務，我們的網約車和非網約車業務的觀測數據各自存儲在不同的存儲集羣上，這就是我們採用的 VM 多集羣設計。例如，如果非網約車業務實例出現問題，我們希望這不會影響到網約車業務，反之亦然。因此，我們在存儲方面進行了多集羣的設計。</p><p><img src="https://oscimg.oschina.net/oscnet/up-cd3d73594c6c53d06c8471fcc73d75d357f.png" alt="file" referrerpolicy="no-referrer"></p><p>（傳輸多集羣設計）</p><p>在數據傳輸方面，我們的設計理念也是類似的，但有一點區別在於，傳輸和存儲會用到不同的分片策略，這是因為它們的負載特性不同。例如，某個業務的傳輸量非常大，但存儲查詢的量卻非常小，這種情況下，我們會在傳輸端對數據進行拆分，在存儲端只需要保證數據的寫入即可。它們可以共享同一存儲集羣。</p><p>要點 2：及時扔掉壞雞蛋</p><p>另外還有一個原則，我們稱之為「及時扔掉壞雞蛋」。在傳輸模塊中，除了寫入存儲，還有其他的下游模塊，如流式報警等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e7a9c8c431cd89da042a2190e0ddb20e84f.png" alt="file" referrerpolicy="no-referrer"></p><p>因此，如果某個子系統因為某些原因運行變慢，從而影響了整個傳輸模塊，這是我們不願看到的。我們希望在子系統運行變慢或出現問題時，能夠及時將其剔除出系統，即熔斷策略。在某些情況下，我們可以自動進行熔斷，並嘗試不斷恢復這個子系統。如果它成功恢復，那我們就會重新將這個系統接入。</p><h3>2.2.2 其他常用保障手段</h3><p>熔斷、降級、多維度限流：</p><p>除了熔斷和降級，我們還有其他保障手段，如多維度的限流。多維度限流採取靈活策略對請求進行限制，例如，一些持續且高頻的跨度長時間的查詢，比如幾個月甚至幾年的數據查詢，我們就會應用多維度的限流手段。</p><p>慢查治理：</p><p>另一個保障手段是慢查的治理，這涉及到對大量曲線的查詢。比如，一次查詢涉及到了上百萬的曲線，此時我們需要進行慢查發現，然後進行治理。在一些重點保障的時期，我們會開啓這些策略，一旦識別到異常，就採用多維度限流，根據它的特徵進行限流或者直接禁用。</p><p>多活：</p><p>內部可觀測的多活，我們採用的方式是做單元化。例如，如果 A 機房和 B 機房的專線中斷，我們需要保障用戶可以單獨訪問相應機房的數據。</p><p>容量評估體系：</p><p>我們還有容量評估體系。因為在可觀測架構和業務流量或訂單量的增長可能不成正比，所以需要一套自身的容量評估體系。每家公司的業務模型可能不同，所以這個體系需要建立起來，對於保障手段來説，這是有幫助的。</p><p>預案、演練：</p><p>我們還會制定預案並進行演練，以保證這些手段是有效的。</p><h1>三、可觀測性在滴滴是怎麼實現的？</h1><h2>3.1 策略選擇</h2><p>可觀測性這個主題在 2021 或 2022 年是一個非常熱門的話題。有人可能會覺得，如果不談論可觀測性，就相當落後了。我們先來看一下各大廠對可觀測性的定義。</p><p>可觀測性是可幫助團隊有效調試其系統的工具或技術解決方案。可觀測性基於對事先未定義的屬性和模式的探索。——來源 Google</p><p>可觀測性是指能夠通過檢查系統或應用的輸出、日誌和性能指標來監控、測量和理解系統或應用的狀態。——來源 RedHat</p><p>可觀測性是指您僅根據所瞭解的外部輸出對複雜系統內部狀態或條件的理解程度。——來源 IBM</p><p>我在這裏分別引用了 Google、RedHat 和 IBM 對可觀測性的定義，他們有兩個共識。第一個是，可觀測性是能從外部理解系統內部的狀態，而這些狀態並不需要是已知的。第二個共識是，可觀測性有許多手段，包括日誌、指標、事件等。</p><p>那麼，如何實現可觀測性呢？各大廠都有自己的實現方式。Google 推薦使用其雲平台 GCP，RedHat 推薦使用 OpenShift Observability，IBM 有其自己的產品 Instana Observability，而 Grafana 推薦使用 LGTM(Loki、Tempo、Mimir)。</p><p>綜合來看，實現可觀測性的方法大概有三種。第一種是購買 SaaS 廠商的服務，第二種是儘可能地採集和存儲詳盡的可觀測數據，第三種是關聯多種觀測數據。</p><h2>3.2 方案對比</h2><p>對於滴滴，第一種實現方式並不適合，因此我們優先排除。</p><p>至於第二種實現方式是「儘可能詳盡」，於是我們將觀測數據分為兩個維度，即 Dimensionality 和 Cardinality。Dimensionality 類似於標籤的概念，例如時間戳、版本、顧客 ID 等。Cardinality 則以顧客 ID 為例，可能有從 1 萬 01 到 1 萬 9999 的數據。這種方案優點是能採集大量數據，但缺點是實現成本高、資源消耗大，且數據利用率偏低。</p><p>第三種實現方式是關聯多種觀測數據，常見的觀測數據包括 Metric、Trace、Log。Metric 數據屬於高層次抽象，能告訴你錯誤數，但無法提供具體錯誤信息。Trace 數據主要用於跨服務關聯，比如一個請求經歷了哪些服務。Log 數據則是開發人員偏好的信息，它提供最詳細的、人類可讀的數據。然而，這種關聯多種觀測數據的方式，其缺點是架構實現相對複雜。</p><h2>3.3 架構設計</h2><p>在滴滴，我們借鑑了上述兩種方法，將數據分為低基數和高基數兩類。低基數指的是指標數據，而高基數則是日誌數據。我們將這兩種數據分別存儲在不同的數據庫中，並建立它們的關聯關係。 <img src="https://oscimg.oschina.net/oscnet/up-0c28337ec890c982e26ae239ad7987fc15e.png" alt="file" referrerpolicy="no-referrer"></p><p>舉個例子，如果在一段時間內我們收集到兩個錯誤日誌，我們就會將這個錯誤數「2」上報到時序數據庫。同時，我們將對其中一條錯誤日誌進行採樣，並將其存儲在 Exemplar DB 中。然後，我們會通過標籤將時序數據庫和 Exemplar DB 進行關聯。</p><h2>3.4 實踐成果</h2><p>滴滴的可觀測性實踐成果非常顯著。在建立可觀測性之前，我們在排查故障時需要登錄到機器上並檢索日誌。如果有幸找到了問題所在的機器，那就算是幸運的。但如果並非問題出在這台機器，甚至不是這個服務，我們就需要重複上述的操作。而且，即使經過這樣的操作，是否能找到問題也是不確定的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b9ba869b9b09a5cf7b46c0cc30f7de8a81a.png" alt="file" referrerpolicy="no-referrer"></p><p>然而，在建立了可觀測性之後，當我們收到報警消息時，我們可以直接查看與這條報警相關聯的日誌原文。查閲了日誌原文之後，如果認為沒有大問題，可以暫時不進行處理。如果是緊急情況，我們就會啓動緊急處理流程。</p><p>此外，當我們在查看圖表時，如果發現某個指標突然升高，想要知道是什麼原因導致的，我們可以使用下鑽功能。這個功能不僅可以讓我們查看日誌原文，如果日誌中包含 Trace 信息，還可以將這個 Trace 信息提取出來。然後可以將 Trace 信息下鑽到專門的 Trace 產品進行進一步的處理。</p><p>四、總結展望，滴滴的可觀測性架構的發展實際上是基於不同的需求、場景和時代背景，選擇了最適宜的解決方案。</p><p>我們對接了業界一些成熟的生態系統，並將這些生態系統融入到我們的系統中，這極大地幫助我們完成了許多工作，也提升了我們的工作效率。同時，在建設可觀測性平台的過程中，我們也採用了一些策略來實現觀測系統自身的穩定性保障。</p><p>值得注意的是，可觀測性的建設並沒有一種統一的實現方式，每家公司都有其自身的特色。因此，各公司需要根據自己的特點去定製專門的解決方案，並根據實際情況不斷選擇和調整最合適的方案。（全文完）</p><h1>Q&amp;A</h1><p>1、滴滴是否有專門的技術團隊去維護可觀測架構？Prometheus 的橫向擴展能力相對有限。InfluxDB 具體有哪些問題？</p><p>2、如何去度量一個架構的可觀測性？有什麼建議嗎？</p><p>3、Metric 的時效性有必要做到秒級嗎？</p><p>4、接口偶發性超時，調用鏈只能看到超時接口名稱，看不到內部方法，無法定位根因，也難以復現，怎麼辦？</p><p>以上問題答案，歡迎點擊<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.shulie.io%2F%3Fp%3D7518" target="_blank">「閲讀全文」</a>，觀看完整版解答！</p><p>聲明：本文由公眾號「TakinTalks 穩定性社區」聯合社區專家共同原創撰寫，如需轉載，請後台回覆「轉載」獲得授權。</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/5129714/blog/10315681</guid>
            <link>https://my.oschina.net/5129714/blog/10315681</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[崑崙萬維發佈「天工 SkyAgents」平台，零代碼打造 AI 智能體]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">12 月 1 日，崑崙萬維正式發佈「天工 SkyAgents」平台，助力大模型走入千家萬戶。「天工 SkyAgents」是國內領先的 AI Agents 開發平台，基於崑崙萬維「天工大模型」打造，具備從感知到決策，從決策到執行的自主學習和獨立思考能力。用戶可以通過自然語言構建自己的單個或多個「私人助理」。並且將不同任務模塊化，通過操作系統模塊的方式，實現執行包括問題預設、指定回覆、知識庫創建與檢索、意圖識別、文本提取、http 請求等任務。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">在「天工 SkyAgents」平台上，用戶可以通過自然語言和簡單操作，無需代碼編程，即可在幾分鐘之內部署屬於自己的 AI Agents，完成行業研究報告、單據填寫、商標設計、甚至健身計劃、旅行航班預定等多項私人定製需求。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">對於企業用戶而言，「天工 SkyAgents」則可以按需拼裝成企業 IT、智能客服、企業培訓、HR、法律顧問等眾多個性化的應用，並支持一鍵服務部署，確保其在不同業務系統中的無縫接入。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-b2d9f445592d6b227dc00b733eb3b8eff7b.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">AI Agent 一般譯為「人工智能體」或「人工智能代理」，是一種能夠感知環境、進行決策和執行動作的智能實體。不同於傳統的人工智能程序，基於大模型能力打造的 AI Agent 具備通過獨立思考、調用工具去逐步完成給定目標的能力。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">模塊交互，更易用</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">當前，多數用戶既不具備代碼開發經驗，也不具備訓練大模型提示詞工程（Prompt Engineering）的能力，難以將眾多日常生活的實際需求通過對話問答形式快速實現，無法將大模型能力發揮到極致。「天工 SkyAgents」正是為瞭解決這一痛點而研發的一款產品。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">「天工 SkyAgents」通過將 Agent-to-Agent，Human-to-Agent 的交互模式集成在高度模塊化的大語言模型構件中，實現完全無代碼化操作，並通過簡單直觀的圖形界面進行任務設定和部署，為廣大用戶提供了一個全面、高效且易於使用的 AI 產品，能夠幫助用戶輕鬆利用大模型能力應對複雜任務，滿足日常需求、驅動業務增長、激發靈感創新。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">數據導入，更靈活</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-6d36ddc7cbd9554af55070f2b41d742d529.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">大模型能力雖強，但也有其天生的弱項。一方面，大模型通過參數訓練獲得的知識只能停留在某一時點，更新成本很高；另一方面，大模型的訓練數據通常以通用知識為主，細分領域的數據往往缺乏。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">為瞭解決這一問題， 「天工 SkyAgents」具備數據檢索增強（RAG）的能力， 能夠支持導入更多格式和更大規模的數據和知識，相當於給大模型增加了「智能知識庫外腦」。結合人工智能技術，平台能夠從導入的數據中自動識別關鍵信息點，形成結構化的知識體系。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">從此，「天工 SkyAgents」不僅能夠成為你的私人 AI 助理，還能是你的私人法律專家、私人人力顧問、私人 IT 大神……</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">技術領先，更強大</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">對話問答類大模型應用遇到需要多流程、多步驟處理的複雜業務，往往要麼容易產生「幻覺」，輸出錯誤回答，要麼容易錯步、漏步、跳步，直接輸出結果。然而不幸的是，人們在現實生活中遇到的大多數問題，往往都是複雜流程任務。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">為瞭解決這一問題，「天工 SkyAgents」在原有大模型技術基礎上進一步了強化自然語言處理能力，輔之以先進的目標理解與工作流自動化技術，使得「天工 SkyAgents」能更精準地識別和解析複雜的業務目標，自動生成定製化的工作流程，甚至預測並建議潛在的優化方案。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-c7e6afa126be7553e35e2f575f2b5953f3c.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">本次「天工 SkyAgents」的發佈，將有助於缺乏代碼開發能力的個人與中小企業積極擁抱大模型技術，以簡單的模塊化操作，設計出專屬於自己的大模型 AI 助手，從而推動大模型技術的行業落地與普惠化，助力大模型走入千家萬戶，為人工智能產業發展貢獻力量。前往天工開放平台預約申請：</span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fagentspro.cn%2F%23%2F" target="_blank"><span><span><span><span style="color:#3370ff">https://agentspro.cn/#/</span></span></span></span></a></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">崑崙萬維集團</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">崑崙萬維於 2008 年成立，2015 年深交所上市，從遊戲起家到 AII In AGI 與 AIGC， 全面構建多元化的業務生態，至今十餘年的發展，我們始終致力於為全球用戶提供領先的互聯網產品與服務。現今，崑崙萬維還在不斷探索 AI 領域的無限可能。目前崑崙萬維逐漸構建了 AGI 與 AIGC、海外信息分發與元宇宙、投資三大業務板塊，業務覆蓋全球一百多個國家和地區，全球平均月活躍用戶近 4 億。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">憑藉對科技發展趨勢的超前預判，崑崙萬維早在 2020 年便已開始佈局 AIGC 領域。至今，已積累近三年的相關工程研發經驗，並建立了行業領先的預訓練數據深度處理能力，崑崙萬維也在人工智能領域取得了重大突破，目前已形成 AI 大模型、AI 搜索、AI 遊戲、AI 音樂、AI 動漫、AI 社交六大 AI 業務矩陣，是國內模型技術與工程能力最強，佈局最全面，同時全身心投入開源社區建設的企業之一。</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269081</guid>
            <link>https://www.oschina.net/news/269081</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[支持 Upsert、Kafka Connector、集成 Airbyte，Milvus 助力高效數據流處理]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Milvus 已支持 Upsert、 Kafka Connector、Airbyte！</p><p>在上週的文章中《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzMDI5OTA5NQ%3D%3D%26mid%3D2247499457%26idx%3D1%26sn%3D210ed71ffaa36d4220df3907a9a0ab41%26chksm%3Dfa515f79cd26d66f573354b0dc98dba492b925b1db63fbf5e5ad8b4cafb3f3b315d2bf6c5502%26scene%3D21%23wechat_redirect" target="_blank">登陸 Azure、發佈新版本……Zilliz 昨夜今晨發生了什麼？</a>》，我們已經透露過 Milvus（Zilliz Cloud）為提高數據流處理效率， 先後支持了 Upsert、 Kafka Connector、Airbyte，而這些功能的作用都是簡化數據處理和集成流程，為開發人員提供更高效的工具來管理複雜的數據，今天我們將向大家一一介紹。</p><h2>01.Upsert：簡化數據更新流程</h2><p>Upsert 功能上線以前，在 Milvus 中的更新數據需要兩個步驟：刪除數據，然後再插入新數據。雖然這種方法也可行，但無法確保數據原子性，且操作過於繁瑣。Milvus 2.3 版本發佈了全新的 Upsert 功能。（Zilliz Cloud 海外版也已上線 Upsert 功能 Beta 版）。</p><p>可以説，Upsert 功能重新定義了數據更新和管理方式。使用 Upsert 時，Milvus 會判斷數據是否已經存在。如果數據不存在則插入數據，如果已存在則更新數據。這種具有原子性的方法對 Milvus 這樣單獨管理插入和刪除數據的系統中尤為重要。</p><p>Upsert 具體的順序為：先插入數據，然後刪除重複數據。這樣可以確保了操作期間的數據仍然可見。</p><p>此外，Upsert 功能還特別考慮了修改主鍵的場景。在數據更新過程中無法更改主鍵列。這與 Milvus 根據主鍵哈希跨分片（shard）管理數據的原則一致。這種限制避免了跨 Shard 操作帶來的複雜性和潛在的數據不一致性。</p><p>Upsert 使用方法簡單，類似於插入操作。用戶可以輕鬆將 Upsert 集成到現有的工作流程中，無需對原有流程進行大改。在 Pymilvus 等 SDK 中，Upsert 命令調用和插入命令完全一致。熟悉 Milvus 的用戶使用起來沒有任何難度，可以獲得一致和絲滑的用戶體驗。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f41551a015823f1b2df852545459520d410.png" alt="" referrerpolicy="no-referrer"></p><p>執行命令時，Upsert 會提供關於操作成功與否以及受影響的數據的反饋，進一步增加了開發者的使用便利性。這種易於使用且穩定的功能能夠助力數據管理。更多詳情，請查看 Upsert 文檔。</p><p>但是使用 Upsert 功能時還需要考慮以下兩點：</p><ul><li><p>AutoID 限制：使用 Upsert 功能的前提條件是將 AutoID 設置為 false。如果 Collection Schema 中將 AutoID 設置為 true，則無法執行 Upsert 操作。我們設置了這個限制的主要考量是，Upsert 也包含數據更新操作，更新的數據需要有新的主鍵值。如果用戶提供的主鍵值與 AutoID 自動生成的主鍵值發生衝突，那可能會導致數據被覆蓋。所以，已經開啓了 AutoID 的 Collection 不可使用 Upsert 功能。後續新版本中我們可能會取消這一限制。</p></li><li><p>性能開銷：Upsert 可能會導致性能成本。Milvus 使用 WAL 架構，過多刪除操作可能會導致性能下滑。Milvus 中的刪除操作不會立即清除數據，而是為數據打上刪除標記。隨後在數據壓縮過程中才會根據這些標記真正清除數據。因此，頻繁的刪除操作可能會導致數據膨脹，影響性能。我們建議不要太過於頻繁地使用 Upsert 功能，以確保最佳性能。</p></li></ul><h2>02.Kafka Connector：賦能實時數據處理</h2><p>近期，Milvus 和 Zilliz Cloud 接入了 Kafka Sink Connector，向量數據可以無縫絲滑地通過 Confluent/Kafka 實時導入 Milvus 或 Zilliz Cloud 向量數據庫中。本次集成能夠進一步釋放向量數據庫潛能，助力實時生成式 AI 應用，尤其是使用 OpenAI GPT-4 這種大模型的場景。</p><p>如今，我們所獲取的信息中，非結構化數據已佔據 80% 以上，且這類數據還在呈爆炸式增長。Zilliz 與 Confluent 的合作標誌着非結構化數據管理和分析的重大進步，我們能夠更高效存儲、處理實時向量數據流，將其轉化為易於搜索的數據。</p><p>Kafka Connector + Milvus / Zilliz Cloud 的常見用例包括：</p><p>增強生成式 AI：為 GenAI 應用提供最新的向量數據，從而確保生成的準確性和及時性。這兩點對於金融和媒體等領域尤為重要，因為都需要實時處理各種來源的流式數據。</p><p>優化電商推薦系統：電商平台需要實時根據庫存和客戶行為動態調整其推薦商品或內容以提升用戶體驗。</p><p>在 Zilliz Cloud 中使用 Kafka Connector 的步驟也十分簡單：</p><ul><li><p>從 GitHub 或 Confluent Hub 下載 Kafka Sink Connector。</p></li><li><p>配置 Confluent 和 Zilliz Cloud 賬號。</p></li><li><p>閲讀在 GitHub 倉庫中提供的指南並配置 Kafka Connector。</p></li><li><p>運行 Kafka Connector，將實時流數據導入 Zilliz Cloud。</p></li></ul><p>如需更深入瞭解如何設置 Kafka Connector 和相關用例，請前往 GitHub 倉庫或訪問此網頁。</p><h2>03.集成 Airbyte：數據處理更高效</h2><p>近期，Milvus 與 Airbyte 團隊合作，在 Milvus 中集成 Airbyte，增強了大語言模型（LLM）和向量數據庫中的數據獲取和使用流程。本次集成能增強開發者存儲、索引和搜索高維向量數據的能力，大大簡化生成式聊天機器人和產品推薦等應用搭建流程。</p><p>本次集成的主要亮點包括：</p><ul><li><p>數據傳輸更高效：Airbyte 能夠無縫將數據從各種來源傳輸到 Milvus 或 Zilliz Cloud，即時將數據轉化為 Embedding 向量，簡化了數據處理流程。</p></li><li><p>搜索功能更強大：此次集成增強了向量數據庫的語義搜索能力。基於 Embedding 向量，系統可以自動識別並搜索出語義相似性高的相關內容，能夠為需要高效檢索非結構化數據的應用賦能。</p></li><li><p>設置過程更簡單：設置 Milvus 集羣和配置 Airbyte 同步數據的步驟十分簡單。如果需要使用 Streamlit 和 OpenAI Embedding API 構建應用也是同樣的設置步驟。</p></li></ul><p>此次集成簡化了數據傳輸和處理，釋放實時 AI 應用的無限可能性。例如，在客戶支持系統中，使用 Milvus 或 Zilliz Cloud 集成 Airbyte 可以創建基於語義搜索的智能技術支持工單系統，從而為用戶提供即時、有用的信息，減少人工幹預，提升用戶體驗。</p><p>Zilliz 始終致力於提升非結構化數據管理和處理能力和技術，本次推出的 Upsert、Kafka Connector、Airbyte 等工具的集成都展現了這一點。後續，我們將進一步優化數據獲取和數據 Pipeline 功能，敬請期待！</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/10315720</guid>
            <link>https://my.oschina.net/u/4209276/blog/10315720</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[算力基礎設施領域國家標準發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0">2023 年 11 月 27 日，國家標準 GB/T 43331-2023《互聯網數據中心（IDC）技術和分級要求》正式發佈。中國信息通信研究院（簡稱「中國信通院」）聯合多家企事業單位編制的這一國家標準正契合當前國家算力基礎設施建設和算力產業高質量發展需要。</p><p style="margin-left:0; margin-right:0"><img alt="" height="292" src="https://oscimg.oschina.net/oscnet/up-cc1753c1d4186d7e0e332aeaa3974d09ff3.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">該標準規定了互聯網數據中心（IDC）在綠色、可用性、安全性、服務能力、算力算效、低碳等六大方面的技術及分級要求，適用於互聯網數據中心（IDC）的規劃、設計、建設、運維和評估，期望更好的為不同行業深化賦能作用。</p><p style="margin-left:0; margin-right:0">2013 年以來，中國信通院雲計算與大數據研究所數據中心團隊基於中國通信標準化協會編制發佈了數項數據中心評級通信行業標準，對數據中心的綠色、可靠和安全性進行分級分類。經過多年實踐迭代，團隊聯合業界眾多使用方、設計方和供應方共同編制了該國家標準，以期更好地指導我國數據中心的健康發展。</p><p style="margin-left:0; margin-right:0">高能效一直是數據中心發展過程中廣受關注的問題，該國家標準將在綠色技術應用和運維制度管理等方面提出促進數據中心能效水平提升的具體要求；服務能力是數據中心對外服務的綜合體現，通過對服務能力的客觀評價，有利於數據中心的自我改進提升，也有利於客戶根據業務需求選擇合適的數據中心；可用性方面，通過提高設備冗餘，可以在架構方面更好地保障數據中心應對突發情況的能力；安全性有助於保障數據中心設備運行及人員的安全。通過綜合評估數據中心等級情況，有利於運營者加強自我瞭解，更有利於行業按需選擇。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269062</guid>
            <link>https://www.oschina.net/news/269062</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[國產編程語言 MoonBit（月兔）需要支持中文關鍵字嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>MoonBit（月兔）是中國開發者團隊創建的編程語言，由粵港澳大灣區數字經濟研究院（IDEA 研究院）基礎軟件中心負責人張宏波領導的團隊開發。</p><p>張宏波本人不僅為多種編程語言做出了貢獻，包括 OCaml、ReScript（原 ReasonML/BuckleScript）和 Flow，還曾是 Rescript 語言工具鏈幾乎所有關鍵組件的作者，包括高速編譯器、標準庫以及構建系統等。</p><blockquote><p>MoonBit 專為雲計算、邊緣計算設計，是一個用於雲計算和邊緣計算的 WebAssembly 端到端編程語言工具鏈，集開發、編譯、測試、部署於一體 —— 涵蓋了通用程序語言設計、編譯器、構建系統、IDE、部署工具等。在語言設計、編譯器和構建系統上實現高度的垂直整合，為用戶提供更佳的開發體驗和性能，致力打造未來世界級的基礎軟件生態。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8f1d876877f96c97b9e12b93fb1fef4c7ec.gif" referrerpolicy="no-referrer"></p></blockquote><p>昨天，張宏波在知乎發表提問：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F632589892" target="_blank">《MoonBit 國產編程語言提供中文關鍵字的可能性？》</a></u>，希望收集一些關於為 MoonBit 提供中文關鍵字支持的反饋，主要是有兩方面考慮：一是支持中文關鍵字從社區來説會帶來什麼潛在的負面作用？另外就是了解下真實的中文編程用戶有多少。</p><p>張宏波説道：</p><blockquote><p>對於專業人士來説，中文確實不是學習編程的主要難點，但是從討論熱烈的程度來説，好像對一部分人來説或多或少是個門檻。<strong>從技術實現來講，可能就是一個上午就能大概支持了</strong>。</p><p>我提這個問題是想從兩方面收集一些反饋：<strong>一方面是支持中文關鍵字從社區來説會帶來什麼潛在的負面作用？另一方面是瞭解下真實的中文編程用戶有多少，你會因問 MoonBit 支持中文關鍵字而更多地使用或者推薦給其他人嗎？</strong></p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-11a36224f77741f56eab1b317a5008a9d60.png" referrerpolicy="no-referrer"></p><p>下面是用 MoonBit 語言實現<code>fib</code>函數的示例代碼：</p><pre><code>// Moonbit
func fib(num : Int) -&gt; Int {
  fn aux(n, acc1, acc2) {
    match n {
      0 =&gt; acc1
      1 =&gt; acc2
      _ =&gt; aux(n - 1, acc2, acc1 + acc2)
    }
  }

  aux(num, 0, 1)
}
</code></pre><p><strong>延伸閲讀：</strong></p><ul><li><strong><em><u><a href="https://www.oschina.net/news/255951/moonbit-first-announce" target="_blank">中國開發者團隊創建的編程語言：MoonBit（月兔）</a></u></em></strong></li><li><strong><em><u><a href="https://www.oschina.net/project/awesome?columnId=20" target="_blank">中國人主導編程語言列表</a></u></em></strong></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269052</guid>
            <link>https://www.oschina.net/news/269052</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AYANEO 新品復古 Mini PC：R3 3200U/R7 5700U 可選]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">遊戲硬件公司 Ayaneo 於近日<span style="background-color:#ffffff">正式發佈了旗下首款迷你主機：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ayaneo.com%2Fproduct%2FAYANEO-Retro-Mini-PC-AM01.html" target="_blank">Ayaneo Retro Mini PC AM01</a>，號稱引領 Mini PC 2.0 時代。該公司全新的 Mini PC 系列旨在滿足玩家的多樣化需求，打造無縫的遊戲體驗。</span></p><p><span style="color:#000000">Retro Mini PC AM01 整體設計致敬了蘋果公司經典的&nbsp;Macintosh。精緻復古的造型設計搭配<span style="background-color:#ffffff">僅 1L 的小巧體積，輕巧且便攜，Bare System 重量約為 466 克。機身正面帶有一個可自主更換的磁吸裝飾件，虛擬屏幕（僅用於裝飾目的，不可拆卸）同樣也可以使用自定義貼紙進行裝飾。</span></span></p><p><span style="color:#000000">雖然&nbsp;<span style="background-color:#ffffff">Ayaneo Retro Mini PC 具有蘋果風格的外觀，但實際上運行的卻是 Windows 11；支持安裝 Windows 和 Ubuntu、Debian 等 Linux 系統，以及 Steam OS 和 Batocera 等遊戲系統。它可以配置為軟件路由器或個人 NAS 系統使用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">核心配置方面，AYANEO Retro Mini PC AM01&nbsp;配備 AMD Ryzen 3 3200U 或 Ryzen 7 5700U，提供多種處理器選項以適應各種用途需要。並且具有良好的可擴展性，配備五個 USB 端口（一個 USB-C 和四個 USB-A），另外還有 HDMI、DisplayPort、耳機插孔、以太網、藍牙和 Wi-Fi。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">散熱方面採用了高性能四銅管導熱結構、35W 大尺寸高壓渦輪風扇、60008 mm² 鋁製散熱片的設計；</span></span><span style="color:#000000"><span style="background-color:#ffffff">立體環繞進排氣</span></span><span style="color:#000000"><span style="background-color:#ffffff">系統，智能風扇控制。</span></span></p><p><img height="430" src="https://oscimg.oschina.net/oscnet/up-d080ffb024ee9f3cec60c28fd06a4058905.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">AM01 的<span style="background-color:#ffffff">早鳥優惠價格為 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.indiegogo.com%2Fprojects%2Fayaneo-retro-mini-pc-creator-of-mini-pc-2-0-era%23%2F" target="_blank">149 美元起</a>，最高為 459 美元。</span>現已接受預訂，官方計劃於 12 月開始發貨。<span style="background-color:#ffffff">具體的價格矩陣如下所示：</span></span></p><p><img alt="" height="267" src="https://oscimg.oschina.net/oscnet/up-0cd8ae66a9a0393d2fb33a48f61a185f409.jpg" width="500" referrerpolicy="no-referrer"></p><p><strong>外觀：</strong></p><p><img alt="" height="359" src="https://oscimg.oschina.net/oscnet/up-f8a5d7972d50038132cff8a992237d7b940.webp" width="500" referrerpolicy="no-referrer"></p><p><img height="376" src="https://oscimg.oschina.net/oscnet/up-e356e6ca490bb95486b9e1c3f8430ed747b.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="399" src="https://oscimg.oschina.net/oscnet/up-062ac361b585bde3beff445262346fb83b7.webp" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="472" src="https://oscimg.oschina.net/oscnet/up-79b4dd3419f6dc327dc82be45836609e8cb.webp" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="115" src="https://oscimg.oschina.net/oscnet/up-9517c76acb34e140a6044d3e7472437369f.webp" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">詳情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ayaneo.com%2Fproduct%2FAYANEO-Retro-Mini-PC-AM01.html" target="_blank">官網</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 07:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269045/ayaneo-retro-mini-pc-am01</guid>
            <link>https://www.oschina.net/news/269045/ayaneo-retro-mini-pc-am01</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Turbo Pascal 誕生 40 年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Turbo Pascal <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.marcocantu.com%2Fblog%2F2023-november-turbopascal40.html" target="_blank">迎來了 40 歲生日</a></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-48365f6b4678042d953b96727360a44c28a.png" referrerpolicy="no-referrer"></p><p>1983 年 11 月 20 日，Borland 公司發佈了 Turbo Pascal 的第一個版本。<strong>該版本的編譯器核心部分由&nbsp;<span style="background-color:#ffffff; color:#333333">Anders Hejlsberg&nbsp;</span>授權給 Borland 公司</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55fee9e8e268162cefc3a9f34a094250bdc.png" referrerpolicy="no-referrer"></p><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwinworldpc.com%2Fproduct%2Fturbo-pascal%2F100" target="_blank">https://winworldpc.com/product/turbo-pascal/100</a></u></em></p><p>Anders Hejlsberg 為 MS-DOS 和 CP/M 設計了 Pascal 編譯器，Borland 買下該編譯器並改稱 <strong>Turbo Pascal</strong>，之後 Anders Hejlsberg 也加入了 Borland 公司，並且是後來所有 Turbo Pascal 版本與 Delphi 前 3 個版本的架構師。</p><p>再後來 Anders Hejlsberg 被比爾·蓋茨下重本挖到了微軟，先後創造了 Visual J++、.NET、C#&nbsp;和&nbsp;TypeScript。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f1f3c48731e272b9d855120589ccc1969de.png" referrerpolicy="no-referrer"></p><p>説回 Turbo Pascal，它作為一種結構化編程語言對計算機編程產生了重大影響，併成為了許多程序員的入門語言。</p><p>Turbo Pascal 的設計目標是提供一種易於學習和使用的編程語言，同時具有高效的編譯器和強大的功能。它採用了 Pascal 語言的語法和結構，但在性能和功能上進行了優化和擴展。Turbo Pascal 的編譯器非常快速，可以在幾秒鐘內將源代碼編譯成可執行文件。這使得程序員能夠快速地進行開發和調試。</p><p>Turbo Pascal 在教育領域也非常受歡迎。許多學校和大學使用 Turbo Pascal 作為計算機科學課程的教學工具。它的簡單易學的語法和清晰的結構使得初學者能夠快速上手，並理解編程的基本概念。</p><hr><p>延伸閲讀</p><ul><li><a href="https://www.oschina.net/news/130871/26-years-of-delphi" target="news">Delphi 26 歲</a></li><li><a href="https://www.oschina.net/news/241121/delphi-11-n-cbuilder-11-ce-released" target="news">Delphi 11 和 C++Builder 11 社區版發佈</a></li><li><a href="https://www.oschina.net/news/265941/rad-studio-12-athens" target="news">Delphi 12 &amp; C++ Builder 12、RAD Studio 12 發佈</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269027/turbo-pascal-turns-40</guid>
            <link>https://www.oschina.net/news/269027/turbo-pascal-turns-40</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Sailfish OS 開發商 Jolla 已被其前管理層收購]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>芬蘭科技公司 Jolla 的前管理層收購了 Jolla Ltd. 的全部業務和員工。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjolla.com%2Fcontent%2Fuploads%2F2023%2F11%2FFormer_leadership_buys_Jolla_Business_Pressrelease_271123_.pdf" target="_blank">根據 Jolla 發佈的新聞稿</a></u>，Jolla Ltd 專注於操作系統和汽車軟件的全部業務和員工將被轉移到一家新公司，這家新公司已被 Jolla 前管理層收購。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-a0fea2cd154728b4d75b4df0ee0fe5f1894.png" referrerpolicy="no-referrer"></p></blockquote><p>由於烏克蘭戰爭，<strong>俄羅斯在 Jolla 集團結構中的所有權成為員工和客戶面臨的一個緊迫問題</strong>，最終導致該公司於 2023 年春季開始實施企業重組計劃。2023 年 11 月 24 日，Pirkanmaa 地方法院就重組計劃做出了決定，並責成將業務完全出售給另一家公司。目前 Jolla 的前管理層已經收購了該公司。</p><p>Jolla 是一家曾經致力於開發智能手機和平板電腦的公司，但是這些產品並沒有取得成功。後來 Jolla 將重心轉向了基於 Linux 的 Sailfish OS<span style="background-color:#ffffff; color:#333333">（旗魚）</span>，並將其應用於現有設備上。<span style="background-color:#ffffff; color:#333333">Sailfish OS 是由 Jolla 在 MeeGo 基礎上開發的移動操作系統。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-11949d06737c31b962048e00e7e15b11d7f.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7f799a724c401bfe3018e347c698e78405b.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><img height="1476" src="https://oscimg.oschina.net/oscnet/up-7b2f29a69cf34959186e9e7746927ce1a22.png" width="3226" referrerpolicy="no-referrer"></p><p>新公司將繼續致力於開發 Sailfish OS，並向全球客戶銷售。他們還計劃將 Sailfish OS 引入新的「人工智能時代」。Jolla 還將通過自己的子公司 Seafarix 為汽車行業提供軟件。</p><p><strong>延伸閲讀：<em><u><a href="https://www.oschina.net/news/266231">俄羅斯操作系統 Aurora OS 5.0 全新 UI 亮相</a></u></em></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269024/jolla-acquired-by-management</guid>
            <link>https://www.oschina.net/news/269024/jolla-acquired-by-management</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 表達式引擎選型調研分析]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><p><span style="letter-spacing: 1px;display: none;line-height: 0px;">‍‍</span></p><p style="margin-bottom: 24px;line-height: 1.6em;margin-top: 0px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.22676579925650558" src="https://oscimg.oschina.net/oscnet/73c34fc7-7990-4717-b675-aba8baad56ca.gif" data-type="gif" data-w="1076" style="" referrerpolicy="no-referrer"></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">一、簡介</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"></h1><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">我們項目組主要負責面向企業客戶的業務系統，<strong>企業的需求往往是多樣化且複雜的，對接不同企業時會有不同的定製化的業務模型和流程</strong>。我們在業務系統中<strong>使用表達式引擎，集中配置管理業務規則，並實現實時決策和計算，可以提高系統的靈活性和響應能力</strong>，從而更好地滿足業務的需求。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">舉個簡單的例子，假設我們有一個業務場景，在返利系統中，當推廣員滿足一定的獎勵條件時，就會給其對應的獎勵金額。例如某個產品的具體獎勵規則如下：</span></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024223" data-ratio="0.3739612188365651" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1bb246c0-169f-4742-ab48-5956e774e993.png" data-type="png" data-w="361" style="" referrerpolicy="no-referrer"></p><section style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">這個規則看起來很好實現，只要在代碼裏寫幾個 if else 分支就可以了。但是如果返利系統對接了多家供應商，且每家提供的產品的獎勵規則都不同呢？再通過硬編碼的方式寫 if else 似乎就不太好了，每次增加修改刪除規則都需要系統發版上線。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">引入規則引擎似乎就能解決這個問題，規則引擎的一個好處就是可以使業務規則和業務代碼分離，從而降低維護難度，同時它還可以滿足業務人員通過編寫 DSL 或通過界面指定規則的訴求，這樣就可以在沒有開發人員參與的情況下建立規則了，這種説法聽起來似乎很有道理，但在實踐中卻很少行得通。首先，規則引擎有一定的學習成本，即使開發人員使用也需要進行專門的學習，更何況沒有任何編程背景的業務人員，其次，其實現的複雜度也高，如果業務規則複雜，規則制定者對規則引擎內部隱藏的程序流程不瞭解，很可能會得到意想不到的結果，最後，有些規則引擎還存在性能瓶頸。如果對規則引擎和表達式引擎都不熟悉，抽離的業務規則又需要由開發人員來制定，那麼<strong>相比之下表達式引擎就要容易上手得多，其語法更接近 Java，而且有些表達式引擎還會將表達式編譯成字節碼，在執行速度和資源利用方面可能就更有優勢。</strong>所以，對於此類業務場景，使用表達式引擎似乎更加合適一些。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">本文主要對 Java 表達式引擎進行概要性介紹和分析，並提供一定建議，為團隊研發過程中對錶達式引擎的技術選型提供輸入。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">二、技術棧簡介</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6em;visibility: visible;"></h1><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);visibility: visible;"></h2><section style="margin-top: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6em;visibility: visible;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">本文將針對</span>AviatorScript 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>MVEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>OGNL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>SpEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>QLExpress 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>JEXL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>JUEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">幾種常見表達式引擎進行選型調研。先簡單介紹一下這幾種表達式引擎。</span></section><span id="OSC_h2_1"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.1 AviatorScript</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript 是一門高性能、輕量級寄宿於 JVM 之上的腳本語言。AviatorScript 可將表達式編譯成字節碼。它原來的定位一直只是一個表達式引擎，不支持 if/else 條件語句，也不支持 for/while 循環語句等，隨着 5.0 的發佈變身為一個通用腳本語言，支持了這些語言特性。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://www.yuque.com/boyan-avfmj/aviatorscript﻿</span></section><span id="OSC_h2_2"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.2 MVEL (MVFLEX Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL 是一種混合的動態/靜態類型的、可嵌入 Java 平台的表達式語言，MVEL 被眾多 Java 項目使用。MVEL 在很大程度上受到 Java 語法的啓發，但也有一些本質區別，目的是使其作為一種表達式語言更加高效，例如直接支持集合、數組和字符串匹配的操作符，以及正則表達式。最早版本發佈於 2007 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：http://mvel.documentnode.com/﻿</span></section><span id="OSC_h2_3"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.3 OGNL (Object-Graph Navigation Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">OGNL 是 Object-Graph Navigation Language（對象圖導航語言）的縮寫；它是一種表達式語言，用於獲取和設置 Java 對象的屬性，以及其他額外功能，如列表投影和選擇以及 lambda 表達式。於 2005 年發佈 2.1.4 版。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://commons.apache.org/dormant/commons-ognl/language-guide.html﻿</span></section><span id="OSC_h2_4"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.4 SpEL (Spring Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">SpEL 是一種功能強大的表達式語言，支持在運行時查詢和操作對象圖。該語言的語法與 Unified EL 相似，但提供了更多的功能，其中最主要的是方法調用和基本的字符串模板功能。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#expressions﻿</span></section><span id="OSC_h2_5"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.5 QLExpress</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由阿里的電商業務規則、表達式（布爾組合）、特殊數學公式計算（高精度）、語法分析、腳本二次定製等強需求而設計的一門動態腳本引擎解析工具，於 2012 年開源。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://github.com/alibaba/QLExpress﻿</span></section><span id="OSC_h2_6"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.6 JEXL (Java Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JEXL 旨在促進在 Java 編寫的應用程序和框架中實現動態腳本功能。JEXL 基於對 JSTL 表達式語言的一些擴展實現了一種表達式語言，支持 shell 腳本或 ECMAScript 中的大部分構想。1.0 版發佈於 2005 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://commons.apache.org/proper/commons-jexl/reference/syntax.html﻿</span></section><span id="OSC_h2_7"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.7 JUEL (Java Unified Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JUEL 是統一表達式語言 (EL) 的實現，該語言是 JSP 2.1 標準 (JSR-245) 的一部分，已在 JEE5 中引入。此外，JUEL 2.2 實現了 JSP 2.2 維護版本規範，完全符合 JEE6 標準。於 2006 年發佈 2.1.0 版本，2.2.7 發佈於 2014 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：https://juel.sourceforge.net/guide/start.html﻿</span></section><span id="OSC_h2_8"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.8 Janino</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">Janino 是一個超小、超快的 Java 編譯器，也可以用作表達式引擎，它的性能非常出色，根據官網介紹，Apache Spark、Apache Flink、Groovy 等優秀的開源項目都在用 Janino。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文檔：http://janino-compiler.github.io/janino/﻿</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由於 Janino 實際是一個 Java 編譯器，理論上其性能應該更接近於直接執行 Java 代碼，其次作為表達式引擎使用起來比較複雜。因此，下面的對比中，Janino 不參與比較，可以將其作為一個參照。</span></section><span id="OSC_h2_9"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.9 其他</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如下一些表達式引擎雖然也常見於各技術博客，但由於長期沒有更新維護，因此沒有納入此次選型比較</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">Fel</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">Fel 是輕量級的高效的表達式計算引擎。Fel 源自於企業項目，設計目標是為了滿足不斷變化的功能需求和性能需求。項目託管於 Google Code，上次更新是 2012 年，已經十幾年沒有更新了，所以沒有納入此次選型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">ik-expression</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">IK Expression 是一個開源的（OpenSource)，可擴展的（Extensible），基於 java 語言開發的一個超輕量級（Super lightweight）的公式化語言解析執行工具包。2009 年 2 月發佈第一個版本，2009 年 10 月發佈最後一個版本後再沒有新版本發佈，所以沒有納入此次選型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">JSEL</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JSEL 是一個兼容 JavaScript 運算規則的簡單的表達式解釋引擎，你可以通過 Map 接口，或者 JavaBean 給出一個變量集合，能後通過表達式從這個集合中抽取變量，再通過表達式邏輯生成你需要的數據。2009 年發佈第一個版本，2011 年發佈最後一個版本後未再更新，所以沒有納入此次選型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">此外規則引擎如 Drools， urule， easy-rules 不參與此次選型比較。相對比較成熟完善的腳本語言如 Groovy 也不參與選型比較。這篇文章主要針對相對輕量簡單的表達式引擎進行選型。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">三、技術棧選型評估</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"></h1><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">選擇表達式引擎，我們希望其社區支持情況良好、實現複雜度適中、執行速度快、安全並且簡單易學。所以，接下來將<strong>從社區支持情況、引入的大小和依賴、性能、安全性、使用案例和語法幾個方面對幾種表達式引擎進行比較評估。</strong></span></section><span id="OSC_h2_10"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.1 社區支持情況</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">社區支持情況可以輔助評估項目的健康度，有問題是不是能及時解決，項目是不是能持續演進等等</span></strong><span style="font-size: 15px;letter-spacing: 1px;">，下面列出了 GitHub star，watch，fork，last commit 等數據，可以作為參考，由於數據隨着時間推移會產生變化，以下僅針對 2023.10.29 的數據進行分析。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><img class="rich_pages wxw-img" data-imgfileid="100024219" data-ratio="0.28055555555555556" src="https://oscimg.oschina.net/oscnet/c39b5f24-498a-493f-a227-256df954a368.png" data-type="png" data-w="1080" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿﻿由於 Spring 項目被廣泛使用，而 SpEl 又是 Spring 的一個子項目，所以從各項數據來看 SpEl 的社區支持情況是最好的。下面先排除 SpEl 分析其他幾個表達式引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">QLExpress，AviatorScript 和 MVEL 在國內使用比較多，這可能是他們 star，watch，fork 數較高的原因。説明這幾個項目受歡迎度，受認可度，影響力應該較高。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">從 issues，pull requests 數來分析，可以看到 MVEL，AviatorScript 和 QLExpress 高於其他腳本引擎，説明他們的用戶需求和反饋較多，也可能意味着項目面臨較多問題和挑戰。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL，JEXL，OGNL 均有較多貢獻者參與。他們的社區協作、項目可持續性方面應該都比較不錯。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">綜合以上分析，除 SpEl 外，QLExpress，AviatorScript 和 MVEL 的社區支持情況都相對較好。</span></strong></section><span id="OSC_h2_11"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.2 引入大小和依賴</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">代碼大小和依賴可以輔助評估代碼的複雜性，下面列出了各個 Github 倉庫的代碼大小，可以作為一個參考（實際並不完全準確反映其實現的複雜性）。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">以下是 2023.10.29 的數據</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024218" data-ratio="1.41635687732342" src="https://oscimg.oschina.net/oscnet/afac92d7-a244-4283-bc12-84e3f543152c.png" data-type="png" data-w="269" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿﻿JUEL，QLExpress 代碼大小最小，都在 600 多 KB；其次是 OGNL 1MB 多一點；AviatorScript，MVEL，JEXL 大小都在 2MB 左右；SpEl 由於在 spring-framework 倉庫中，上表中統計的是 spring-framework 的總量，單純看 SpEl 的模塊 spring-expression 的話，大小是 1.3MB 左右。但是其還依賴了 spring-core 和 spring-jcl，再含這兩個的話，大小 7.4MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">我們再結合各個項目的依賴來分析一下。</span></section><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="ruby"><code><span class="code-snippet_outer">+- org.mvel:mvel2:jar:2.5.0.Final:compile</span></code><code><span class="code-snippet_outer">+- com.googlecode.aviator:aviator:jar:5.3.3:compile</span></code><code><span class="code-snippet_outer">+- com.alibaba:QLExpress:jar:3.3.1:compile</span></code><code><span class="code-snippet_outer">|  +- commons-beanutils:commons-beanutils:jar:1.8.2:compile</span></code><code><span class="code-snippet_outer">|  |  \- (commons-logging:commons-logging:jar:1.1.1:compile - omitted for conflict with 1.2)</span></code><code><span class="code-snippet_outer">|  \- commons-lang:commons-lang:jar:2.4:compile</span></code><code><span class="code-snippet_outer">+- org.codehaus.janino:janino:jar:3.1.10:compile</span></code><code><span class="code-snippet_outer">|  \- org.codehaus.janino:commons-compiler:jar:3.1.10:compile</span></code><code><span class="code-snippet_outer">+- ognl:ognl:jar:3.4.2:compile</span></code><code><span class="code-snippet_outer">|  \- org.javassist:javassist:jar:3.29.2-GA:compile</span></code><code><span class="code-snippet_outer">+- org.apache.commons:commons-jexl3:jar:3.3:compile</span></code><code><span class="code-snippet_outer">|  \- commons-logging:commons-logging:jar:1.2:compile</span></code><code><span class="code-snippet_outer">+- org.springframework:spring-expression:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">|  \- org.springframework:spring-core:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">|     \- org.springframework:spring-jcl:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-api:jar:2.2.7:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-impl:jar:2.2.7:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-spi:jar:2.2.7:compile</span></code></pre></section></pre><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">除了 SpEl 外，QLExpress，OGNL，JEXL 也都有其他依賴。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考慮 commons-beanutils， commons-lang， commons-logging 三個依賴，QLExpress 引入的大小在 10MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考慮 javassist 依賴，OGNL 引入的大小是 4MB 多。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考慮 commons-logging 依賴，JEXL 引入的大小是 2.5MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">綜合來看，JUEL，AviatorScript，MVEL，JEXL 在引入大小和依賴方面要好於其他。</span></strong></section><span id="OSC_h2_12"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3 性能</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">較好的性能意味着系統能夠快速地響應用戶的請求，減少等待時間，提升體驗。</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">性能方面主要通過 JMH 在字面量表達式、含有變量的表達式以及含有方法調用的表達式等使用場景對幾個表達式引擎進行測試。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JMH（Java Microbenchmark Harness），是用於代碼微基準測試的工具套件，主要是基於方法層面的基準測試，精度可以達到納秒級。該工具是由 Oracle 內部實現 JIT 的大牛們編寫的，他們應該比任何人都瞭解 JIT 以及 JVM 對於基準測試的影響。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由於不同表達式引擎語法或特性稍有差別，下面測試中對於差異項會進行説明。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">性能測試代碼地址：</span><span style="letter-spacing: 1px;font-size: 15px;">GitHub</span><span style="font-size: 15px;">-https://github.com/howiefh/expression-engine-benchmark</span></section><span id="OSC_h3_13"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.1 字面量表達式</span></strong></h3><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024215" data-ratio="0.43444730077120824" src="https://oscimg.oschina.net/oscnet/57f87300-b4c2-48fe-bb02-d1bd3b156186.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: left;"><span style="font-size: 15px;letter-spacing: 1px;text-align: justify;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;text-align: justify;">：1000 + 100.0 * 99 - (600 - 3 * 15) / (((68 - 9) - 3) * 2 - 100) + 10000 % 7 * 71</span></section><section style="line-height: 1.6em;margin-top: 16px;margin-bottom: 16px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(61, 170, 214);">&nbsp;&nbsp; </span><span style="font-size: 15px;letter-spacing: 1px;">：6.7 - 100 &gt; 39.6 ? 5 == 5 ? 4 + 5 : 6 - 1 : !(100 % 3 - 39.0 &lt; 27) ? 8 * 2 - 199 : 100 % 3</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">説明：</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由於 QlExpress 執行第 2 個表達式時報錯，需要增加圓括號，實際執行的是 6.7 - 100 &gt; 39.6 ? (5 == 5 ? 4 + 5 : 6 - 1) : (!(100 % 3 - 39.0 &lt; 27) ? 8 * 2 - 199 : 100 % 3)</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">結果分析:</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">可以明顯看到 JEXL，JUEL，QlExpress 這三個表達式引擎性能明顯不如其他引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">SpEl 在執行第 1 個算數操作時表現出色，但是在執行第 2 個嵌套三元操作時明顯不如 AviatorScript，MVEL，OGNL 引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">此輪測試中 AviatorScript，OGNL，MVEL 表現出色。AviatorScript，OGNL 執行兩個表達式表現都比較出色，其中 AviatorScript 略好於 OGNL。MVEL 在執行第 1 個算數操作時表現最出色，但是在執行第 2 個嵌套三元操作時慢於 AviatorScript，OGNL 引擎。</span></section><span id="OSC_h3_14"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.2 含有變量的表達式</span></strong></h3><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024217" data-ratio="0.8046272493573264" src="https://oscimg.oschina.net/oscnet/cf08fbe6-72a8-45dc-bf9e-1303f1f07414.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;"><span style="letter-spacing: 1px;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span>：pi * d + b - (1000 - d * b / pi) / (pi + 99 - i * d) - i * pi * d / b</span><br></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(61, 170, 214);background-color: rgb(61, 170, 214);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：piDecimal * dDecimal + bDecimal - (1000 - dDecimal * bDecimal / piDecimal) / (piDecimal + 99 - iDecimal * dDecimal) - iDecimal * piDecimal * dDecimal / bDecimal</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 128, 255);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99 == i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 209, 0);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：(clientVersion == '1.9.0' || clientVersion == '1.9.1' || clientVersion == '1.9.2') &amp;&amp; deviceType == 'Xiaomi' &amp;&amp; weight &gt;= 4 &amp;&amp; osVersion == 'Android 9.0' &amp;&amp; osType == 'Android' &amp;&amp; clientIp != null &amp;&amp; requestTime &lt;= now&amp;&amp; customer.grade &gt; 1 &amp;&amp; customer.age &gt; 18</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">説明：</span></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於不同的表達式引擎在執行第 2 個表達式時底層實現除法時有所差別，MVEL，AviatorScript，JEXL 執行 decimal.divide(otherDecimal, java.math.MathContext.DECIMAL128)，其他實際執行的是 decimal.divide(otherDecimal, scale, roundingMode)，只是參數略有不同，分析時分組進行。</span></p></li><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 QlExpress 執行第 3 個表達式時報錯，不支持非整型 mod 操作，需要增加類型轉換，實際執行的是 i * pi + (d * b - 199) / (1 - d * pi) - (int)(2 + 100 - i / pi) % 99 == i * pi + (d * b - 199) / (1 - d * pi) - (int)(2 + 100 - i / pi) % 99</span></p></li><li><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 A</span><span style="font-size: 15px;letter-spacing: 1px;">viatorScript 執行第 4 個表達式時報錯，null 的字面量是 nil，實際執行的是 (clientVersion == '1.9.0' || clientVersion == '1.9.1' || clientVersion == '1.9.2') &amp;&amp; deviceType == 'Xiaomi' &amp;&amp; weight &gt;= 4 &amp;&amp; osVersion == 'Android 9.0' &amp;&amp; osType == 'Android' &amp;&amp; clientIp != nil &amp;&amp; requestTime &lt;= now&amp;&amp; customer.grade &gt; 1 &amp;&amp; customer.age &gt; 18</span></p></li></ul><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">結果分析：</span></strong></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 1 個基本類型包裝類的算術計算 SpEl 最優。其次是 AviatorScript，MVEL，OGNL。而 JEXL，JUEL，QlExpress 則不如其他引擎。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 2 個 BigDecimal 類型的算術計算。由於底層實現不同，分為兩組。第 1 組 MVEL、AviatorScript 和 JEXL，AviatorScript 優於 MVEL 優於 JEXL。第 2 組 JUEL，QlExpress，OGNL 和 SpEl，性能由優到差依次是 OGNL，SpEl，JUEL，QlExpress。並且第 1 組由於精度更高，性能明顯都差於第 2 組。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 3 個含有基本類型包裝類算數計算的布爾表達式。SpEl 最優，AviatorScript 次之，接下來依次是 OGNL, MVEL，JUEL，JEXL，QlExpress。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 4 個含有字符串比較的布爾表達式。AviatorScript，MVEL，JEXL，OGNL 性能優於 JUEL，QlExpress，SpEl。</span></p><span id="OSC_h3_15"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.3 含有方法調用的表達式</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024216" data-ratio="0.6195372750642674" src="https://oscimg.oschina.net/oscnet/f7706f84-f707-493c-8470-1d59715d2194.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：new java.util.Date()</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(61, 170, 214);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：s.substring(b.d)</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 128, 255);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：s.substring(b.d).substring(a, b.c.e)</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">説明：</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 JUEL 執行 new java.util.Date() 時報錯，不支持 new 實例，本輪實際執行的是自定義函數 fn:date()</span></p></li><li><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由於 A</span><span style="font-size: 15px;letter-spacing: 1px;">viatorScript 執行 s.substring 時報錯，需使用其提供的內部函數，本輪實際執行的是其內部函數 string.substring</span></p></li></ul><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">結果分析：</span></strong></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">此輪測試中 SpEl 的表現最優，甚至比 Janino 還要快。MVEL，AviatorScript 次之，在執行構造方法時 MVEL 要好於 AviatorScript。JEXL 表現也比較出色。QlExpress，JUEL，OGNL 這三個表達式引擎則不如其他引擎。</span></p><span id="OSC_h3_16"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.4 總結</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">綜合以上測試結果，AviatorScript，SpEl，MVEL，OGNL 性能表現相對較好。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript 性能相對較好，表現均衡，但其語法相較其他引擎跟 Java 的差異略大。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">SpEl 除了在個別場景下性能較差，大部分場景表現非常出色，尤其是在字面量和含有變量的算數計算及方法調用場景下。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL 性能表現相對均衡，含有變量的算術計算略差於 AviatorScript，其在字面量算術計算，方法調用場景下表現都非常出色。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">OGNL 性能表現也相對均衡，但方法調用場景下表現不佳。</span></p><span id="OSC_h2_17"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4 安全</span></strong></span></h2><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">引入表達式引擎，應該重視系統的安全性和可靠性，比如要防止在不可信環境中被注入惡意腳本，越權執行某些系統命令或使應用停止服務等。</span></strong><span style="font-size: 15px;letter-spacing: 1px;">安全性方面主要通過漏洞披露、安全指南和配置比較幾種表達式引擎。</span></p><span id="OSC_h3_18"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4.1 漏洞</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">首先在 https://cve.mitre.org/cve/search_cve_list.html 通過關鍵字搜索的方式粗略瞭解一下不同表達式引擎被公開的漏洞。這種方式可能不是非常的準確，由於不同表達式引擎的使用場景、使用方式、關注度的不同可能導致被公開的漏洞存在差異。比如我們所熟悉的 OGNL、SpEl 的關鍵字出現在漏洞中的頻率明顯高於其他表達式引擎。OGNL 在 MyBatis 和 Struts 中被使用，SpEl 則在 Spring 中被廣泛使用，這兩個表達式引擎會被大部分項目間接使用，直接將用戶輸入作為表達式的一部分執行，很容易導致出現漏洞。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">我們<strong>可以從這些公佈的漏洞中瞭解不同表達式引擎可能存在的安全隱患及其修復情況，在使用過程中儘可能避免出現類似問題。</strong></span></p><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">此外，不推薦將表達式執行直接開放到不可信的環境，如果確實需要，應該詳細瞭解選擇的表達式引擎，是否提供了必要的設置選項可以避免某些安全隱患。</span></strong></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024222" data-ratio="0.5028901734104047" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3f83fb13-b9be-47be-bbef-ecbcbf8b045c.png" data-type="png" data-w="519" style="" referrerpolicy="no-referrer"></p><p><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4.2 安全設置</span></strong><br></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript，QLExpress，JEXL 均從不同程度提供了一些安全選項設置。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置白名單</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 在 new 語句和靜態方法調用中允許使用的類白名單，默認 null 表示無限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.ALLOWED_CLASS_SET, Sets.newHashSet(List.class));</span></code><code><span class="code-snippet_outer">// 在 new 語句和靜態方法調用中允許使用的類白名單，包含子類，默認 null 表示無限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.ASSIGNABLE_ALLOWED_CLASS_SET, Sets.newHashSet(List.class));</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">防止死循環</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 循環最大次數，默認 0 表示無限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.MAX_LOOP_COUNT, 10000);</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">特性開關</span></p></li></ul><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 關閉某些特性</span></code><code><span class="code-snippet_outer">AviatorEvaluator.getInstance().disableFeature(Feature.Module);</span></code><code><span class="code-snippet_outer">AviatorEvaluator.getInstance().disableFeature(Feature.NewInstance);</span></code><code><span class="code-snippet_outer">// 只開啓需要的特性</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.FEATURE_SET, Feature.asSet(Feature.If));</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">QLExpress</span></strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">開啓沙箱模式</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">QLExpressRunStrategy.setSandBoxMode(true);</span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">在沙箱模式中，不可以：</span></p><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">import Java 類</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">顯式引用 Java 類，比如 String a = 'mmm'</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">取 Java 類中的字段：a = new Integer(11); a.value</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">調用 Java 類中的方法：Math.abs(12)</span></section><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">可以：</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">使用 QLExpress 的自定義操作符/宏/函數，以此實現與應用的受控交互</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">使用. 操作符獲取 Map 的 key 對應的 value，比如 a 在應用傳入的表達式中是一個 Map，那麼可以通過 a.b 獲取</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">所有不涉及應用 Java 類的操作</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置白名單</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="swift"><code><span class="code-snippet_outer">// 設置編譯期白名單</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setCompileWhiteCheckerList(Arrays.asList(</span></code><code><span class="code-snippet_outer">    // 精確設置</span></code><code><span class="code-snippet_outer">    CheckerFactory.must(Date.class),</span></code><code><span class="code-snippet_outer">    // 子類設置</span></code><code><span class="code-snippet_outer">    CheckerFactory.assignable(List.class)</span></code><code><span class="code-snippet_outer">));</span></code><code><span class="code-snippet_outer">// 設置運行時白名單// 必須將該選項設置為 true</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setForbidInvokeSecurityRiskMethods(true);</span></code><code><span class="code-snippet_outer">// 有白名單設置時, 則黑名單失效</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.addSecureMethod(RiskBean.class, "secureMethod");</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置黑名單</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="swift"><code><span class="code-snippet_outer">// 必須將該選項設置為 true</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setForbidInvokeSecurityRiskMethods(true);</span></code><code><span class="code-snippet_outer">// 這裏不區分靜態方法與成員方法, 寫法一致</span></code><code><span class="code-snippet_outer">// 不支持重載, riskMethod 的所有重載方法都會被禁止</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.addSecurityRiskMethod(RiskBean.class, "riskMethod");</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">QLExpess 目前默認添加的黑名單有：</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.System.exit</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.Runtime.exec</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.ProcessBuilder.start</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.Method.invoke</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.Class.forName</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.ClassLoader.loadClass</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.ClassLoader.findClass</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">防止死循環</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">//可通過 timeoutMillis 參數設置腳本的運行超時時間:1000ms</span></code><code><span class="code-snippet_outer">Object r = runner.execute(express, context, null, true, false, 1000);</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">JEXL</span></strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">使用沙箱</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 使用中應該通過 JexlSandbox 的重載構造方法進行配置</span></code><code><span class="code-snippet_outer">new JexlBuilder().sandbox(new JexlSandbox()).create();</span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">設置白名單權限</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="css"><code><span class="code-snippet_outer">new JexlBuilder().permissions(JexlPermissions.RESTRICTED.compose("com.jd.*")).create();</span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">特性開關</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 關閉循環、new 實例，import 等特性</span></code><code><span class="code-snippet_outer">new JexlBuilder().features(new JexlFeatures().loops(false).newInstance(false).importPragma(false)).create();</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><span id="OSC_h2_19"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.5 使用案例</span></strong></h2><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">從業界使用情況可以瞭解不同表達式引擎的可行性、生態和整合性，以及最佳實踐，進而借鑑。從下表可以看到 AviatorScript，MVEL，QLExpress 在國內業務線均有使用案例，有些企業也有文章輸出，我們可以借鑑使用。</span></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024221" data-ratio="0.8702064896755162" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7351a73e-f1e0-4db3-a3d3-b3fe2ca7815b.png" data-type="png" data-w="339" style="" referrerpolicy="no-referrer"></p><p><strong style="color: rgb(2, 30, 170);font-size: 16px;letter-spacing: 0.034em;"><span style="font-size: 15px;letter-spacing: 1px;">3.6 語法</span></strong><br></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">易於理解和使用的語法可以提高開發效率，並降低學習成本。接下來從類型、操作符、控制語句、集合、方法定義幾方面比較一下不同表達式引擎的語法設計。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">類型方面，AviatorScript 設計了特有的類型，使用時需要注意其類型轉換的優先級 long-&gt;bigint-&gt;decimal-&gt;double。AviatorScript、MVEL、OGNL、JEXL 都支持 BigInteger、BigDecimal 字面量，這意味着進行精確計算時可以使用字面量，將更方便，如 10.24B 就表示一個 BigDecimal 字面量（AviatorScript 中 BigDecimal 字面量後綴是 M）。此外 AviatorScript、QLExpress 還支持高精度計算的設置項。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">操作符方面，QLExpress 支持替換、自定義操作符及添加操作符別名，這可能有助於簡化複雜表達式或使表達式更加直觀，不過添加預置函數應該可以達到差不多的效果。AviatorScript 也支持自定義部分操作符，不過支持數量相當有限。AviatorScript、SpEl、JEXL 支持正則匹配操作符。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">控制語句方面，除 OGNL、SpEl、JUEL 不支持控制語句外，其他都支持，不過需要注意 AviatorScript 的 else if 語法有些特殊寫作 elsif，foreach 語句跟 Java 也有所不同。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">集合方面，除 JUEL 外其他都提供了快捷定義的方式，只不過語法不同。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">函數定義方面，SpEl、JUEL 均不支持，OGNL 支持偽 lambda 定義，其他都支持定義函數。QLExpress 不支持定義 lambda。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">綜合來看，和 Java 語法都或多或少存在一些差異。<strong>AviatorScript 設計了自己特有的一些語法，使用的話需要熟悉一下。QLExpress 支持自定義操作符，可以使表達式看起來更直觀。MVEL、JEXL 的語法可能更接近 Java，讓人更容易接受一些。OGNL、SpEl、JUEL 的語法更簡單一些，不支持控制語句和函數定義，當然也可以通過預置一些函數變通解決一些較複雜的問題。</strong></span></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 編輯器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">四、選型建議</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"></h1><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">社區方面，SpEl 無疑是最活躍的。AviatorScript，QLExpress，MVEL 在國內很受歡迎，QLExpress 有阿里背書。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">代碼大小和依賴方面，AviatorScript，MVEL 依賴少，並且代碼大小也偏小。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">性能方面，如果你使用表達式引擎執行字面量算術計算或方法調用偏多可以選用 SpEl，MVEL。如果希望整體性能表現較好可以選用 AviatorScript。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">安全方面，如果想自定義安全選項，可以考慮 AviatorScript，QLExpress 和 JEXL。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">使用案例方面，AviatorScript，MVEL，QLExpress 在國內都有實際使用案例可循。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">語法方面，可能存在一些主觀因素，僅供參考，個人覺得 MVEL、JEXL 的語法設計使用起來會更容易一些。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">通過對以上幾個方面的評估和分析，希望可以幫助團隊基於自身情況及偏好選擇最適合自己項目的 Java 表達式引擎。</span></p><span id="OSC_h1_20"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">參考資料</span></h1><span id="OSC_h1_21"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[1]</span><span style="outline: 0px;">&nbsp;QLExpress：</span></span><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">https://github.com/alibaba/QLExpress﻿</span></h1><span id="OSC_h1_22"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[2] AviatorScript：https://github.com/killme2008/aviatorscript﻿</span></h1><span id="OSC_h1_23"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[3] MVEL：https://github.com/mvel/mvel﻿</span></h1><span id="OSC_h1_24"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[4] OGNL：https://github.com/orphan-oss/ognl﻿</span></h1><span id="OSC_h1_25"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="outline: 0px;">[5]&nbsp;SpEl</span>：</span><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">https://github.com/spring-projects/spring-framework</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></h1><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[6]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">Janino：</span><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/janino-compiler/janino</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[7]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">JUEL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/beckchr/juel</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[8]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">JEXL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/apache/commons-jexl</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[9]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">Fel：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/dbcxy/fast-el</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[10]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">ik-expression：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://code.google.com/archive/p/ik-expression/</span></span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[11]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">JS</span><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">EL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://code.google.com/archive/p/lite/wikis/JSEL.wiki</span></span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[1]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">JMH：https://www.cnblogs.com/wupeixuan/p/13091381.html</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span style="display: none;line-height: 0px;">‍</span></p><section style="margin-bottom: 8px;margin-top: 32px;text-align: center;"><span style="color: rgb(136, 136, 136);font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;text-align: center;text-wrap: wrap;background-color: rgb(255, 255, 255);">-end-</span></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzU1OTgxMTg2Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/9K73WSRq6BWyKqhKFzMgibicMuLCqmmqWpOmQ2tovCBswRKVxdO6zaiarVIPc83MibTauxLibnACJWk48ibUyAXBF7dw/0?wx_fmt=png" data-nickname="京東雲開發者" data-alias="JDT_Developers" data-signature="京東雲開發者（Developer of JD Technology）是京東科技集團旗下為 AI、雲計算、IoT 等相關領域開發者提供技術分享交流的平台。平台將發佈京東產品技術信息、行業技術內容、技術活動等資訊。擁抱技術，與開發者攜手預見未來！" data-from="0" data-is_biz_ban="0"></mp-common-profile></section><p><span style="letter-spacing: 1px;display: none;line-height: 0px;">‍</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - 京東雲開發者（JDT_Developers）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10315584</guid>
            <link>https://my.oschina.net/u/4090830/blog/10315584</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JumpServer 開源堡壘機 V2 社區版即將停止維護]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">尊敬的 JumpServer 開源堡壘機用戶：您好！</p><p style="color:#000000; text-align:start">如《關於 JumpServer 開源堡壘機 V2 版本產品生命週期的相關説明》所示，<span style="color:#3e3e3e">JumpServer 開源堡壘機 V2 版本（社區版）將於</span><strong><span style="color:#28937c">2023 年 12 月 31 日</span></strong>停止維護支持。</p><p style="color:#000000; text-align:start">在過去兩年多的時間裏，JumpServer 開源堡壘機 V2 版本獲得了眾多用戶的支持和喜愛。出於產品自身迭代和用戶需求升級的要求，<strong>2023 年 2 月 27 日，JumpServer 開源堡壘機正式發佈 v3.0 版本，目前已更新至 v3.9.2 版本。</strong>JumpServer 開源項目組<strong><span style="color:#28937c">建議社區版和企業版用戶更新至 JumpServe v3.x 版本</span></strong>，以使用更多的新增功能並獲取更好的軟件使用體驗。</p><p style="color:#000000; text-align:start">JumpServer V2 版本（企業版）維護支持截止日期為<strong><span style="color:#28937c">2025 年 12 月 31 日</span></strong>。</p><p style="color:#000000; text-align:start">aJumpServer 開源堡壘機 V2 版本產品生命週期具體如下，廣大用戶可以根據時間表合理安排系統升級及遷移工作。</p><p style="color:#000000; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-3c2a04eded6684a1a8f9948a1e26454f4ef.jpg" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ JumpServer 開源堡壘機 V2 版本產品生命週期</span></p><p style="color:#000000; text-align:start">感謝您長期以來對 JumpServer 開源項目的支持與厚愛。如果您在升級過程中遇到問題，可以聯繫 JumpServer 開源項目組獲取升級建議和指導。</p><p style="color:#000000; text-align:right"><span><span style="color:#000000">JumpServer 開源項目組</span></span></p><p style="color:#000000; text-align:right"><span><span style="color:#000000">2023 年 12 月 1 日</span></span></p><p style="color:#000000; text-align:start"><span><strong><span style="color:#000000">關於 JumpServer 開源堡壘機</span></strong></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">JumpServer（jumpserver.org）是廣受歡迎的開源堡壘機，遵循 GPL v3 開源許可協議，是符合 4A（包含認證 Authentication 、授權 Authorization、 賬號 Accounting 和審計 Auditing）規範的運維安全審計系統。它通過企業版或者軟硬件一體機的方式，向企業級用戶交付開源增值的運維安全審計解決方案。</span></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">JumpServer 開源堡壘機在分佈式架構設計、多雲環境支持、大規模資產納管、容器化部署、使用體驗等方面極具領先性，能夠很好地滿足企業用戶在混合 IT 環境中運維安全審計需求。</span></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">目前，JumpServer 開源項目在代碼託管平台 Github 上的 Star 數量已經超過 22,400 個。在中國的企業用戶羣中，JumpServer 堡壘機擁有廣泛的安裝基礎，社區版軟件的累計安裝部署次數超過 250,000 次，用戶遍及金融、製造、物流、媒體、互聯網等各行各業。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10315623</guid>
            <link>https://my.oschina.net/u/4736111/blog/10315623</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
