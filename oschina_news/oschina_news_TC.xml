<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 03 Feb 2024 12:00:11 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[10 年前的今天 —— Vue.js 正式問世]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Vue 官方推特賬號的最新動態<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fvuejs%2Fstatus%2F1753678155444101385" target="_blank">寫道</a></u>：</p><blockquote><p>10 年前的今天（2014 年 2 月 3 日），Vue 在 Hacker News 上首次對外亮相：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D7169288" target="_blank">news.ycombinator.com/item?id=7169288</a></p><p>10 年後，Vue 已成為使用最廣泛的前端項目之一，在世界各地擁有多元化的社區。</p><p><img src="https://oscimg.oschina.net/oscnet/up-75ad5ac6e8149ffa4d18fee49546a79cd6a.png" referrerpolicy="no-referrer"></p></blockquote><p>Vue.js 是由尤雨溪獨立開發的開源前端框架，目前由他和其他活躍的核心團隊成員維護。</p><p>在谷歌的 Creative Lab 就職期間，尤雨溪接觸到 Google 團隊開發的 Web 前端框架「Angular」，他對 Angular 可通過數據綁定來處理網頁 DOM 的運作方式很感興趣，並想以此為基礎開發出一個功能相似，但更輕量的框架。</p><p>後來，尤雨溪將所開發出的框架命名為「Vue.js」，並在 2014 年 2 月正式對外公佈，宣稱讓「<strong>Java MVVM 變得更簡單</strong>」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-581bff0bf554afab956437fa62cb1777d18.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D7169288" target="_blank">https://news.ycombinator.com/item?id=7169288</a></u></em></p><p>在與開發者的互動交流中，尤雨溪認真解答了 Vue.js 和 Angular 在技術架構設計方面的不同之處。為了保證框架儘可能輕量，Vue.js 捨棄了依賴注入、預編譯 JSX 等特性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fafe1a062037bfc8b7e2738cefe3da01c61.png" referrerpolicy="no-referrer"></p><p>根據尤雨溪在 Vue.js 正式對外發布一週後的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.evanyou.me%2F2014%2F02%2F11%2Ffirst-week-of-launching-an-oss-project%2F" target="_blank">覆盤數據</a>，他最開始在 Hacke rNews、EchoJS 和 Reddit 子版塊<span>/r/javascript 這三個網站宣佈了 Vue.js。</span>一天之內，Vue.js 火速佔據它們榜首。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 08:53:49 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277597/vuejs-10yr</guid>
            <link>https://www.oschina.net/news/277597/vuejs-10yr</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源日報：中國首個腦機接口開源軟件平台；謹慎升級 VS Code]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。</p><p><strong># 2024.2.2</strong></p><h2><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日要點</span></span></span></span></span></span></h2><p style="text-align:justify"><strong>OpenSource Daily</strong></p><h3><u><a href="https://www.oschina.net/news/277399" target="_blank">天津大學發佈中國首個腦機接口開源軟件平台 MetaBCI 研究成果</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">近日，天津大學神經工程團隊在數學與計算生物學領域 SCI 一區 TOP 期刊《Computers in Biology and Medicine》上發表論文，介紹了中國首個腦機接口開源軟件平台 MetaBCI 的技術架構與實現方法。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">MetaBCI 由離線分析模塊 Brainda、刺激呈現模塊 Brainstim 和在線數據流模塊 Brainflow 三大部分構成，提供了面向 BCI 軟件層面全鏈條開發的解決方案。</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>面向離線分析需求，Brainda 統一了現有公開數據集接口，優化了腦電數據讀取、處理流程，復現多種主要 BCI 數據分析及解碼算法，以此提高研究者的算法開發效率；</li><li>面向刺激呈現需求，Brainstim 提供了簡潔高效的範式設計模塊，可快速創建腦機接口範式刺激界面；</li><li>面向在線開發需求，Brainflow 利用雙線程、雙進程編程方法實現了實時高速的數據讀取、數據處理、結果反饋等功能，幫助開發者輕鬆搭建腦機接口在線實驗系統。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img src="https://oscimg.oschina.net/oscnet/up-8f4d4e3e7fbcc8a74be3635f43436fba05b.png" referrerpolicy="no-referrer"></p><h3><u><a href="https://www.oschina.net/news/277439/vscode-1-86-drops-ubuntu-18-04" target="_blank">VS Code 1.86 會導致遠程開發功能無法使用</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Visual Studio Code 今日發佈的最新版<span>&nbsp;</span><u><a href="https://www.oschina.net/news/277414/vs-code-1-86-released">1.86</a></u><span>&nbsp;引入一項嚴重的破壞性變化，其</span>遠程開發服務器工具鏈<span>最低環境要求的&nbsp;</span>glibc 版本提升為 2.28。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">由於&nbsp;Ubuntu 18.04 LTS 使用 glibc 2.27，因此有開發者發現自己升級到 VS Code 新版本後，使用 Remote SSH 無法連接到遠程機器。</p><blockquote><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-7159057b7f201b731192ad420804af1891b.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv2ex.com%2Ft%2F1013590" target="_blank">https://v2ex.com/t/1013590</a></em></u></p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">對於該問題，目前的解決方案有兩種：</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><strong>根據對應的發行版，升級至 Ubuntu 20.04 LTS、Debian 10 或 RHEL 8</strong></li><li><strong>降級到 VS Code 1.85</strong></li></ul><h3><u><a href="https://www.oschina.net/news/277402/allenai-olmo-truly-open-llm" target="_blank">AI2 開源新 LLM，重新定義 open AI</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">艾倫人工智能研究所（Allen Institute for AI，簡稱 AI2）<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.allenai.org%2Fhello-olmo-a-truly-open-llm-43f7e7359222" target="_blank">宣佈</a>推出一個名為 OLMo 7B 的新大語言模型，並開源發佈了預訓練數據和訓練代碼。OLMo 7B 被描述為 「一個真正開放的、最先進的大型語言模型」。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">AI2 是由已故的微軟公司聯合創始人保羅 - 艾倫（Paul Allen）於 2014 年在西雅圖創辦的一家非營利組織。該組織表示，他們開源 OLMo 模型旨在讓 AI 研究社區充分了解最先進的大語言模型（LLM），從而推動自然語言處理的發展，並以科學的方式正視現有 LLM 存在的問題。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-5f4ac19f48b404e2adf9eed484a4a22035d.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日推薦</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-4caec6d25c5413f5ea4275653e65a5444dd.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">媒體觀點</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-90cadeca4d271edb7a2ad700c6263fdc51d.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">每日項目榜</span></span></span></span></span></span></strong></h2><p>GitHub 榜單：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b98d9200d2d848543db7dae28c134e95c33.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5292ae0f6e0cd094f67afe814ba672e45a7.png" referrerpolicy="no-referrer"></p><blockquote><h4><span style="background-color:#e67e22">在線閲讀完整日報內容，訪問：</span><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC008%E6%9C%9F%EF%BC%9A%E6%8E%A8%E5%8A%A8%E4%B8%AD%E5%9B%BD%E5%BC%80%E6%BA%90%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%91%E5%B1%95%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B8%8E%E5%BB%BA%E8%AE%AE.pdf" target="_blank"><span style="background-color:#e67e22">開源日報第 008 期：推動中國開源軟硬件發展的經驗與建議</span></a></u></h4></blockquote><hr><p><strong>往期回顧</strong></p><ul><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC007%E6%9C%9F.pdf">開源日報第 007 期：「Linux 中國」 開源社區宣佈停止運營</a></u></li><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC006%E6%9C%9F%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8A%80%E6%9C%AF%E6%A0%88%E4%B8%80%E5%AE%9A%E8%A6%81%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E7%9A%84.pdf" target="_blank">開源日報第 006 期：選擇技術棧一定要選擇開源的</a></u></li><li><a href="http://www.oschina.net/news/277040"><u>開源日報第 005 期：RISC-V 萬兆開源交換機發售；npm 存在大量武林外傳視頻</u></a></li><li><u><a href="https://www.oschina.net/news/276864" target="news">開源日報第 004 期：百度輸入法在候選詞區域植入廣告；大神用 Excel 構建 CPU</a></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 06:36:27 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277585</guid>
            <link>https://www.oschina.net/news/277585</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FastGateway：一個可以用於代替 Nginx 的網關]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在我本人研究 Yarp 的時候經常用於公司項目的業務網關代理，這時候就個大佬問我是否可以實現動態加載 HTTPS 證書？那時候我説不太可能實現，然而在某一天我看到</p><p>微軟使用 Yarp 代替了 Nginx 吞吐量提升了百分之八十！</p><p><img height="2340" src="https://oscimg.oschina.net/oscnet/up-9b031c83a55889ff53d2b4981411def100f.png" width="1080" referrerpolicy="no-referrer"></p><p>這個時候我就萌生了自己使用 yarp 造一個 Gateway 的項目，應為我本身也經常使用 nginx 作為網關，但是 nginx 的使用總得寫 conf，然後重啓我的 nginx，並且還需要配置證書重啓，我就在想是否可以實現界面管理，並且完全動態管理？</p><p>然後我們的 FastGateway 項目就誕生了，下面我們介紹一下我們的 FastGateway 的項目簡單案例</p><p>## FastGateway</p><p>我們的 FastGateway 提供了倆個容器，一個是代理服務，一個是前端服務</p><p>一般簡單使用就可以直接使用我們的 docker-compose 構建，非常簡單</p><p>FastGateway 支持哪些功能？</p><ul><li><span>&nbsp;</span>登錄授權&nbsp; 
  <ul><li>通過環境變量簡單設置賬號密碼</li></ul></li><li><span>&nbsp;</span>動態路由管理 
  <ul><li>完全界面操作並且實時更新</li></ul></li><li><span>&nbsp;</span>動態配置證書管理 
  <ul><li>完全界面操作並且實時更新</li></ul></li><li><span>&nbsp;</span>dashboard 監控 
  <ul><li>提供了簡單數據監控，後續還會提供更完善的功能</li></ul></li><li><span>&nbsp;</span>靜態文件服務代理 
  <ul><li>使用中間件簡單實現了靜態文件代理（Yarp 默認是不支持靜態文件代理）</li></ul></li><li><span>&nbsp;</span>穿透隧道功能 
  <ul><li>只需要提供一個公網的 Gateway 服務端，然後下載我們的 Gateway 的客戶端就可以將客戶端的局域網的服務映射到外網（只支持 http 協議的服務）</li></ul></li><li><span>&nbsp;</span>出入口流量監控 
  <ul><li>基於 Kestrel 實現出入口流量監控，還提供當前服務器的所有網卡的出入流量實時監控</li></ul></li></ul><h2>技術棧</h2><h3>後端技術棧</h3><ul><li>Asp.Net 8.0 用於提供基礎服務</li><li>Yarp 用於提供反向代理服務</li><li>FreeSql 用於提供數據庫服務</li><li>JWT 用於提供登錄授權服務</li><li>MiniApis 提供 WebApi 服務</li></ul><h3>前端技術棧</h3><ul><li>reset-css 用於重置瀏覽器默認樣式</li><li>axios 用於發送 http 請求</li><li>semi 用於提供基礎組件</li><li>react-router-dom 用於路由管理</li></ul><h2>鏡像執行指令</h2><div><div><pre><span><span style="color:#0086b3">mkdir </span>data</span><span>docker run <span style="color:#ffcc55">-d</span><span style="color:#ffcc55">--restart</span> always <span style="color:#ffcc55">--name</span> gateway-api <span style="color:#ffcc55">-p</span> 8000:8000 <span style="color:#ffcc55">-p</span> 8200:8080 <span style="color:#ffcc55">-p</span> 8300:8081 <span style="color:#ffcc55">-v</span><span style="color:orange">$(</span><span style="color:#0086b3">pwd</span><span style="color:orange">)</span>/data:/data/ registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span><span>docker run <span style="color:#ffcc55">-d</span><span style="color:#ffcc55">--restart</span> always <span style="color:#ffcc55">--privileged</span><span style="color:#ffcc55">--name</span> gateway-web <span style="color:#ffcc55">-p</span> 10800:80 <span style="color:#ffcc55">-e</span><span style="color:#ffaa44">api_url</span><span>=</span>http://localhost:8000 registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></pre><div>
   &nbsp;
  </div></div></div><h2>Docker-Compose 文件</h2><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供給 web 端調用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span><span style="color:#888888"># 請注意手動創建 data 目錄，負責在 Linux 下可能出現權限問題導致無法寫入</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">build</span><span>:</span></span><span><span style="color:#008080">context</span><span>:</span><span style="background-color:transparent; color:#00aadd">../web</span></span><span><span style="color:#008080">dockerfile</span><span>:</span><span style="background-color:transparent; color:#00aadd">Dockerfile</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">如果並沒有提供賬號密碼則默認</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">賬號：root</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">密碼：Aa010426.</p><h2>替換默認的 https 證書</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">由於需要使用 https，為了方便系統默認提供了一個 pfx 證書，如果你需要提供的話可以按照以下操作進行，如果是 Docker 執行的話證書的目錄則是<span>&nbsp;</span><code>/app/certificates/gateway.pfx</code></p><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供給 web 端調用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">HTTPS_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">HTTPS_FILE</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway.pfx</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./app/certificates:/app/certificates</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-web</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">參考上面的 docker-compose 文件，我們提供了倆個環境變量<code>HTTPS_PASSWORD</code>，<code>HTTPS_FILE</code>，</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><code>HTTPS_FILE</code>：</p><ul><li>在系統中已經指定了容器的<code>/app/certificates</code>目錄，你只想要掛在目錄中的文件名即可</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><code>HTTPS_PASSWORD</code>：</p><ul><li>Pfx 證書的密碼，如果修改了證書請填寫證書的密碼。</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><code>/app/certificates</code>：</p><ul><li>這個是系統證書默認存放目錄，如果映射了目錄則需要提供自己的證書。</li></ul><h2>使用隧道</h2><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">HTTPS_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">TUNNEL_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">HTTPS_FILE</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway.pfx</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供給 web 端調用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./app/certificates:/app/certificates</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-web</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">增加<code>TUNNEL_PASSWORD</code>環境變量，默認為空不設置密碼</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">下載隧道客戶端<span>&nbsp;</span><a href="https://gitee.com/hejiale010426/Gateway/releases">https://gitee.com/hejiale010426/Gateway/releases</a><span>&nbsp;</span>然後解壓壓縮包，打開 appsettings.json 文件修改 Tunnel 節點的 Url，如果 Gateway 使用了 TUNNEL_PASSWORD，那麼你的 URL 應該是<code>https://localhost:8081/api/gateway/connect-h2?host=backend1.app&amp;password=dd666666</code>，<span>&nbsp;</span><code>host</code>是在集羣中的集羣端點的域名，這個域名就是定義到我們的隧道客戶端的<code>host</code>的這個參數，請保證值的唯一性，當綁定集羣的路由匹配成功以後則會訪問圖片定義的端點，如果並沒有存在節點那麼他會直接代理。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="輸入圖片説明" src="https://gitee.com/hejiale010426/FastGateway/raw/master/img/%E9%9B%86%E7%BE%A4-01.png.png" referrerpolicy="no-referrer"></p><h2>出入流量監控</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用環境變量控制是否啓用流量監控，使用環境變量<code>ENABLE_FLOW_MONITORING</code>設置我們是否啓用流量監控，如果為空則默認啓動流量監控，然後可以打開我們的控制面板查看流量監控的數據。</p><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">HTTPS_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">HTTPS_FILE</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway.pfx</span></span><span><span style="color:#008080">ENABLE_FLOW_MONITORING</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供給 web 端調用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./app/certificates:/app/certificates</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-web</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre></div></div><p>&nbsp;</p><p>開源地址：<a href="https://gitee.com/hejiale010426/FastGateway">FastGateway: FastGateway 一個超級簡單方便的網關，基於 Kestrel+Yarp 實現的網關。 支持動態配置路由，支持動態配置集羣，支持動態配置 HTTPS 證書，無需重啓即可使用。 (gitee.com)</a></p><p>&nbsp;</p><p><strong>效果圖</strong></p><p><img height="974" src="https://oscimg.oschina.net/oscnet/up-213cad83fbc8f296333c9970b2dee268483.png" width="1480" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><img height="979" src="https://oscimg.oschina.net/oscnet/up-64949f2af7f4f1cd4a212c94f185ba0df7d.png" width="1485" referrerpolicy="no-referrer"></p><p><img height="986" src="https://oscimg.oschina.net/oscnet/up-57d5ac2dcda53c11dc8019ca721f9835f84.png" width="1489" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 03:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277575</guid>
            <link>https://www.oschina.net/news/277575</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[扎克伯格解釋 Meta 為什麼要開源其 AI 技術]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在今天的 2023 年第四季度財報電話會議中，馬克 - 扎克伯格解釋 Meta 為什麼要開源其 AI 技術。</p><p>Meta 開源其 AI 技術是出於推動技術創新、提升模型質量、建立行業標準、吸引人才、增加透明度和支持其長期戰略的考慮。這不僅有助於 Meta 在競爭激烈的 AI 領域保持領先地位，也有助於推動整個行業的前進。</p><p>1. <strong>促進行業創新</strong>: 通過開源 AI 模型，Meta 可以鼓勵全球的開發者、研究人員和公司利用這些技術進行創新。這種共享精神有助於加速 AI 技術的進步，並推動新應用和服務的開發。</p><p>2. <strong>提高模型質量</strong>: 開源允許更廣泛的社區參與到模型的測試和改進中來。來自全球的貢獻可以幫助發現並修復錯誤，提出改進意見，從而提高模型的性能和可靠性。</p><p>3. <strong>建立行業標準</strong>: 通過將自己的技術開源，Meta 有機會塑造行業標準和最佳實踐。這種影響力可以確保 Meta 在 AI 領域的技術和方法得到廣泛接受和使用，從而加強其市場地位。</p><p>4. <strong>吸引和保留人才</strong>: 開源項目通常對研究人員和開發者具有吸引力。通過貢獻於開放且受尊重的項目，Meta 可以吸引頂尖人才加入，這對於維持其在 AI 領域的競爭優勢至關重要。</p><p>5. <strong>提升安全性和透明度</strong>: 開源 AI 模型可以提高透明度，讓外部研究人員和公眾能夠更好地理解模型的工作原理和潛在影響。這有助於識別和緩解與 AI 應用相關的風險和倫理問題，從而增強公眾對 AI 技術的信任。</p><p>6. <strong>支持長期戰略</strong>: Meta 開源 AI 技術也是其長期戰略的一部分，旨在確保公司在 AI 和機器學習領域的長期領導地位。通過開源，Meta 可以推動整個生態系統的發展，為自己的產品和服務創造更多的創新機會。</p><blockquote><p>本文已獲授權。</p><p>完整內容參考：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs21.q4cdn.com%2F399680738%2Ffiles%2Fdoc_financials%2F2023%2Fq4%2FMETA-Q4-2023-Earnings-Call-Transcript.pdf" target="_blank">https://s21.q4cdn.com/399680738/files/doc_financials/2023/q4/META-Q4-2023-Earnings-Call-Transcript.pdf</a><br> 譯文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaoyu.io%2Ftranslations%2Fmeta%2Fmark-zuckerberg-explains-why-meta-open-sources-its-ai" target="_blank">https://baoyu.io/translations/meta/mark-zuckerberg-explains-why-meta-open-sources-its-ai</a></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 03:01:36 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277568</guid>
            <link>https://www.oschina.net/news/277568</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌 Bard 支持文本生成圖像功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌對話式 AI 工具&nbsp;<span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">Bard 近日發佈了更新，此次更新後將支持文生圖和擴展雙重檢查功能。</span></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1a225c71ee0e459f8cfa6a7ac710106c3f6.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbard.google.com%2Fupdates" target="_blank">https://bard.google.com/updates</a></u></em></p></blockquote><p><strong>Bard 此次新增的圖像生成功能將在全球受支持的地區免費提供，由谷歌 Imagen 2 模型提供支持，但需要英語指令</strong>。用戶現在可以根據向 Bard 提供的描述生成自定義圖像。谷歌承諾，Bard 可提供「高質量、逼真的圖像輸出」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4b6453ff6415cb9ad30a9eab1cd5a61b3cb.png" referrerpolicy="no-referrer"></p><p>谷歌表示，Imagen 2 不會生成暴力、攻擊性或包含色情內容的圖片。此外，Imagen 2 還接受了一些「培訓」，可以幫助它避免創建特定人羣的圖像。為將 Bard 生成的 AI 圖片與人類作品區分開來，谷歌將嵌入「像素級別」的數字可識別水印。</p><p>Bard 在此次更新之後，谷歌 Gemini Pro 模型新增了 40 多種語言、230 多個國家和地區的支持。</p><p>谷歌表示，Gemini Pro 增強了 Bard 的理解、總結、推理、創意、協作和規劃方面的能力。谷歌還將 Bard 的「雙重檢查」功能擴展到 40 多種語言，用戶可以通過檢查整個互聯網的內容來驗證 AI 所作回答的準確性。在此之前，「雙重檢查」功能僅限於英語。</p><p>詳情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fgoogle-imagen-2%2F" target="_blank">https://blog.google/technology/ai/google-imagen-2/</a></u></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 02:54:36 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277567/bard-ai-image-generation</guid>
            <link>https://www.oschina.net/news/277567/bard-ai-image-generation</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin V23 最後一個測試版本 ——Beta3 來了！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>deepin V23 最後一個測試版本——Beta3&nbsp;來了！</span></p><p style="color:#020000; margin-left:0; margin-right:0"><span>deepin V23 Beta3 版本對鏡像預裝包中 1400+ 包進行升級，新增了 250+ 軟件包系統更新，並進一步優化功能體驗，包括：</span></p><ul><li><p style="color:#020000; margin-left:0; margin-right:0"><span>安裝器支持 768P、1080P、2K、4K 屏幕界面自適應；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>支持 Steam 原生應用正常安裝和遊戲運行；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>系統底層依賴的更新升級：GCC、Qt、glibc 等等；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>對啓動器進行了代碼層面重構提升了運行速度；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>控制中心-時間日期-區域-國家地區支持根據用戶所在的區域語言，設置本土化時間、日期格式；</span></p><p style="color:#020000; margin-left:0; margin-right:0"><span>......</span></p></li></ul><p style="color:#020000; margin-left:0; margin-right:0"><span>感謝每一位 deepiner 提供想法與建議，讓我們一起為打造美觀易用、安全可靠的開源操作系統而努力！</span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><u><span><strong>&nbsp;</strong></span><span><strong>功能新增</strong></span><span><strong>&nbsp;</strong></span></u></p><p><strong><span style="color:#01a0e7">【系統/安裝】</span></strong></p><ul><li><p><span style="background-color:#ffffff; color:#020000">鏡像安裝時 Grub 頁面 safe 模式後增加了説明提示性文字</span><span style="background-color:#ffffff; color:#020000">，避免用戶因不理解而錯誤使用 safe 模式安裝問題；</span></p></li><li><p><span>安裝器支持 768P、1080P、2K、4K 屏幕界面自適應；</span></p></li><li><p><span>對部分 i386 設備驅動進行了支持；</span></p></li><li><p><span>支持了 Steam 原生應用正常安裝和遊戲運行。</span></p></li></ul><p><strong><span style="color:#01a0e7">【系統倉庫】</span></strong></p><ul><li><p><span>大量系統底層庫得到更新，系統倉庫整體約 4000+ 軟件包更新 (包括新增軟件包)&nbsp;添加了 i386、RISC-V64、LoongArch64 架構支持；</span></p></li><li><p><span>GCC 更新到 13.2 版本；</span></p></li><li><p><span>glibc 更新到 2.37；</span></p></li><li><p><span>ICU 更新到 73.2；</span></p></li><li><p><span>Qt6 更新到 6.6.1；</span></p></li><li><p><span>FFmpeg 更新到 6.0；</span></p></li><li><p><span>Mesa 更新到 23.3.3；</span></p></li><li><p><span>Python 默認版本更新到 3.11；</span></p></li><li><p><span>Perl 更新到 5.36；</span></p></li><li><p><span>LLVM 默認版本更新到 16。</span></p></li></ul><p><strong><span style="color:#01a0e7">【桌面環境】</span></strong></p><ul><li><p><span>對啓動器進行了代碼層面重構提升了運行速度；</span></p></li><li><p><span>優化了功能佈局與界面 UI 設計細節，提升了整體視覺效果；</span></p></li><li><p><span>對鍵盤選中狀態與鼠標 hover 狀態進行狀態區分；</span></p></li><li><p><span>新增增加字母表功能，可通過字母表進行應用快速檢索；</span></p></li><li><p><span>對通知圖標和時間日期點擊換出內容進行優化；</span></p></li><li><p><span>通知中心中增加了日曆組件；</span></p></li><li><p><span>優化了通知中心清除通知消息圖標，解決了錯誤圖標給用戶帶來的誤導；</span></p></li><li><p><span>優化了控制中心-網絡-VPN-導入操作按鈕圖標樣式；</span></p></li><li><p><span>控制中心-賬戶頭像中新增創意插圖分類；</span></p></li><li><p><span>控制中心-賬戶頭像-人物頭像中增加了立體風格素材圖片；</span></p></li><li><p><span>控制中心-通用新增啓動動畫設置項；</span></p></li><li><p><span>控制中心-藍牙支持藍牙設備剩餘電量顯示；</span></p></li><li><p><span>控制中心-賬戶密碼登錄、鎖屏管理功能進行了統一管理；</span></p></li><li><p><span>控制中心-聲音-音頻增加外設插拔管理中插拔音頻設備是否暫停播放進行管理；</span></p></li><li><p><span>控制中心-聲音-多媒體音頻框架高級設置，可切換音頻框架；</span></p></li><li><p><span>控制中心-時間日期-區域-國家地區支持根據用戶所在的區域語言，設置本土化時間、日期格式；</span></p></li><li><p><span>控制中心-網絡設置中 IPV4\IPV6 方法設置項中增加了禁用選項；</span></p></li><li><p><span>控制中心-電源-通用，性能模式功能中增加了説明文字；</span></p></li><li><p><span>控制中心-電源-通用，對 Intel、AMD 內存增加了電源性能管理選項。</span></p></li></ul><p><strong><span style="color:#01a0e7">【UOS AI】</span></strong></p><ul><li><p><span>系統預裝了 UOS AI 插件，用戶可使用 UOS AI；</span></p></li><li><p><span>提供了免費的 AI 試用帳號，可在系統中使用 UOS AI 功能；</span></p></li><li><p><span>對了接了主流的 AI 模型接口，用戶可使用自有的 AI 帳號進行綁定使用。</span></p></li></ul><p><strong><span style="color:#01a0e7">【日曆】</span></strong></p><ul><li><p><span>日曆應用更新了 2024 年法定休假安排。</span></p></li></ul><p><strong><span style="color:#01a0e7">【應用商店】</span></strong></p><ul><li><p><span>新增 deepin ID 同步應用下載記錄功能；</span></p></li><li><p><span>新增用戶提交心願單，反饋所需應用功能；</span></p></li><li><p><span>應用更新頁面，忽略應用更新功能；</span></p></li><li><p><span>應用更新/應用管理頁面支持搜索已安裝應用；</span></p></li><li><p><span>針對應用商店內付費應用添加提示。</span></p></li></ul><p><strong><span style="color:#01a0e7">【文件管理器】</span></strong></p><ul><li><p><span>新增右鍵菜單增加反選選項；</span></p></li><li><p><span>新增右鍵菜單顯示快捷鍵功能；</span></p></li><li><p><span>新增右鍵文件屬性複製信息；</span></p></li><li><p><span>新增窗口主視圖篩選搜索功能；</span></p></li><li><p><span>新增遠程環境是否展示縮略圖預覽設置項；</span></p></li><li><p><span>設置中增加複選項「列表視圖以樹形結構展示」功能設置項；</span></p></li><li><p><span>對文管圖標視圖佈局進行優化，提升空間利用率；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>對側邊欄目錄顯示規則進行優化。</span></p></li></ul><p style="margin-left:0px; margin-right:0px; text-align:center"><u><span><strong>&nbsp;</strong></span><span><strong>用戶反饋修復</strong></span><span><strong>&nbsp;</strong></span></u></p><p><strong><span style="color:#01a0e7">【DDE】</span></strong></p><ul><li><p><span>修復在商店中卸載應用後，桌面圖標消失了，但是啓動器中的圖標沒有消失問題；</span></p></li><li><p><span>修復啓動器應用分類中的應用展示順序及位置不正確；</span></p></li><li><p><span>修復打開應用如音樂，將音樂託盤圖片拖動至任務欄，重新打開應用，託盤區域出現兩個音樂圖標問題；</span></p></li><li><p><span>修復開啓託盤駐留應用後，任務欄重複拖動託盤圖標導致託盤區域圖標消失問題；</span></p></li><li><p><span>修復外接顯示器後斷開顯示器連接，快捷面板中亮度調節插件無法恢復問題；</span></p></li><li><p><span>修復了在調整屏幕縮放比例後等待時間過長問題；</span></p></li><li><p><span>修復控制中心-網絡無法連接或斷開時，deepin ID 賬戶頭像無法正常顯示異常問題；</span></p></li><li><p><span>修復控制中心-更新設置項玲瓏軟件更新按鈕關閉後,系統重啓後變為開啓狀態,未記住用戶設置；</span></p></li><li><p><span>修復切換主題時，主題切換成功但壁紙為上一主題的壁紙問題；</span></p></li><li><p><span>修復任務欄插件面板中屏幕鍵盤圖標展示為白色圖標，導致無法看清圖標問題；</span></p></li><li><p><span>修復在終端安裝 Libreswan 後，控制中心網絡模塊圖標消失問題；</span></p></li><li><p><span>修復鼠標移動至任務欄快捷面板面板邊緣錯誤顯示可調整大小問題；</span></p></li><li><p><span>修復在任務欄快捷面板中，使用鼠標滾輪調整顯示亮度時，亮度值在 28 和 56 時就無法繼續滾動設置問題；</span></p></li><li><p><span>修復設置系統窗口圓角為直角，添加或修改系統時區時世界地圖二級窗口圓角未跟隨系統設置變化問題；</span></p></li><li><p><span>修復部分機型進入桌面後，關閉飛行模式後，無線網絡搜索不到網絡問題；</span></p></li><li><p><span>修復控制中心工作區相關的快捷鍵修改後，快捷鍵沒有響應問題；</span></p></li><li><p><span>修復控制中心聲音模塊中的設備管理-輸入設備和輸出設備開關無實際作用問題。</span></p></li></ul><p><strong><span style="color:#01a0e7">【文件管理器】</span></strong></p><ul><li><p><span>修復深色模式下，重命名文件名稱時右鍵菜單命令前的圖標展示為黑色無法看清問題；</span></p></li><li><p><span>修復在 NTFS 格式磁盤中新建文件夾包含有空格字符結尾的文件夾無法創建成功，提示設備或資源繁忙問題；</span></p></li><li><p><span>修復從回收站複製文件夾到任意位置進行粘貼操作時會提示該文件夾已存在的錯誤提示；</span></p></li><li><p><span>修復在 SMB 上刪除 .gif 格式圖片無法刪除成功，提示刪除失敗文件繁忙問題；</span></p></li><li><p><span>修復從 Ext4 格式分區複製或剪切文件夾名稱中空格結尾的文件夾至 NTFS 格式分區時，無法複製或剪切成功問題；</span></p></li><li><p><span>修復從本機硬盤往 U 盤或移動硬盤複製或剪貼文件時進度和文件夾窗口消失，文件複製中斷問題；</span></p></li><li><p><span>修復文件進行替換操作時，提示信息中展示的文件大小信息與實際文件大小信息不一致問題；</span></p></li><li><p><span>修復 Chrome 谷歌瀏覽器創建桌面應用快捷方式，生成網站 icon 失敗問題。</span></p></li></ul><p><strong><span style="color:#01a0e7">【終端】</span></strong></p><ul><li><p><span>修復在任意目錄右鍵點擊，選擇「在終端中打開」，都會被定位到家目錄的問題；</span></p></li><li><p><span>修復終端分屏分辨率不一致時，雷神窗口寬度可能過小的問題；</span></p></li><li><p><span>修復新建用戶登錄系統，打開終端後未展示當前用戶名、機器名稱、當前路徑等信息問題；</span></p></li><li><p><span>修復連接 4K 屏幕擴展模式下，在 4K 屏幕按 Alt F2 打開雷神終端，將鼠標移動到另一屏幕按 Alt F2 時，雷神終端顯示異常問題；</span></p></li><li><p><span>雙屏擴展模式下，在主屏 Alt F2 打開雷神終端,點擊屏幕空白處，再將鼠標移動到另一屏幕按 Alt F2 時，出現兩個雷神終端問題；</span></p></li><li><p><span>將主題設置為跟隨系統後，再將鼠標移動到深色時，預覽圖的標題欄沒有同步展示為深色問題；</span></p></li><li><p><span>調換切換前後標籤頁快捷鍵為正確順序；</span></p></li><li><p><span>修復雷神窗口無法設置模糊的問題；</span></p></li><li><p><span>Dirty Fix 改為部分刷新光標後的顯示問題；</span></p></li><li><p><span>修復無法打開未以&nbsp;「 / 」&nbsp;結尾帶端口號鏈接的問題；</span></p></li><li><p><span>修復調整窗口大小時刷新大量 debug 日誌的問題；</span></p></li><li><p><span>修改右鍵菜單打開文件/文件夾時的調用方式。</span></p></li></ul><p><strong><span style="color:#01a0e7">【深度之家】</span></strong></p><ul><li><p><span>修復提交反饋中郵箱文本框中，輸入的文本中&nbsp;@&nbsp;字符不允許以首字符或中間字符輸入問題；</span></p></li><li><p style="margin-left:0; margin-right:0"><span>修復點擊主菜單圖標，無法收起已經展開菜單。</span></p></li></ul><p><strong><span style="color:#01a0e7">【玲瓏】</span></strong></p><ul><li><p><span>修復右鍵 Markdown 文件，以玲瓏 MarkText 軟件打開時可打開軟件未顯示文檔內容問</span><span>題；</span></p></li><li><p><span>修復在啓動器中設置玲瓏為開機自啓動後，玲瓏應用啓動過程中自動閃退問題；</span></p></li><li><p><span>修復了玲瓏環境變量丟失問題；</span></p></li><li><p style="margin-left:0; margin-right:0"><span>修復瀏覽器更新版本後，無法播放網頁視頻問題。</span></p></li></ul><p><strong><span style="color:#01a0e7">【已知待修復問題】</span></strong></p><ul><li><p><span>更新了系統時區庫，可能導致安裝完成後區錯誤需進入控制中心中重新設置；</span></p></li><li><p><span>部分華為終端聲音設備輸出異常，需要刷新 BIOS 或更新內核至 6.6 後才可解決；</span></p></li><li><p><span>部分機型雙屏擴展模式下，啓動器全屏模式時，啓動器會顯示在另一個屏幕上；</span></p></li><li><p><span>雙屏擴展模式下，啓動器偶現在兩個屏幕中間顯示；</span></p></li><li><p><span>啓動器全屏時，點擊任務欄中應用圖標打開應用，啓動器未自動退出；</span></p></li><li><p><span>啓動器全屏模式下未鋪滿整個屏幕；</span></p></li><li><p><span>啓動器開啓按下截圖快捷鍵啓動器被隱藏；</span></p></li><li><p><span>啓動器全屏時按下右鍵菜單並滾動屏幕菜單不會被隱藏。</span></p></li></ul><p><span><span style="background-color:#ffffff; color:#020000">以上就是 deepin V23 Beta3 版本更新的主要內容，歡迎下載體驗，並將所遇到的問題反饋給我們。</span></span></p><p><strong><span style="background-color:#ffffff; color:#020000">鏡像下載地址：</span></strong><span style="background-color:#ffffff; color:#020000">www.deepin.org/download/</span></p><p style="color:#020000; margin-left:0; margin-right:0; text-align:justify"><strong>注意事項：</strong></p><ul><li><p style="color:#020000; margin-left:0; margin-right:0"><span>升級過程中不要鎖屏、待機、關機、重啓等；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>升級前請保證系統根分區擁有足夠的備份空間和更新空間；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>保留用戶數據重裝系統，可能會導致安裝完成後無法啓動。</span></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 10:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5046223/blog/11023703</guid>
            <link>https://my.oschina.net/u/5046223/blog/11023703</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Zabbix7.0 beta1 發佈，性能提升、架構優化等新功能搶先看]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 16px;"><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020572" data-ratio="0.6055555555555555" data-s="300,640" src="https://oscimg.oschina.net/oscnet/6d5f4663-24d1-4652-acc5-0204d0a20461.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><a title="https://www.zabbix.com/cn/download_sources#pre-release" formlinkparm="[{&quot;href&quot;:&quot;https://www.zabbix.com/cn/download_sources#pre-release&quot;}]" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zabbix.com%2Fcn%2Fdownload_sources%23pre-release" target="_blank" rel="noopener noreferrer" powered-by="xiumi.us" data-linktype="2"><p style="text-align: center;text-wrap: wrap;"><span style="font-size: 15px;font-family: Optima-Regular, PingFangTC-light;">點擊立即試用 Zabbix7.0&nbsp;</span><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;color: inherit;">beta1</span></p></a><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="font-size: 15px;line-height: 1.5;letter-spacing: 1px;font-family: Optima-Regular, PingFangTC-light;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong><span style="color: rgb(212, 0, 0);">Zabbix7.0 beta 1 於 1 月 30 日發佈！</span></strong><span style="color: rgb(38, 33, 33);">（正式版將於第一季度發佈。）</span></p><p style="text-wrap: wrap;"><strong><span style="color: rgb(212, 0, 0);">7.0 有什麼新功能？本文<span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;letter-spacing: 1px;text-wrap: wrap;">一睹為快。</span></span></strong></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">Zabbix7.0 聚焦於幫助用戶通過性能優化和功能升級來快速響應業務需求，從而<span style="color: rgb(212, 0, 0);">滿足客戶的高期望值，並提升 IT 運維人員的生產力</span>。在可擴展性與性能、穩定性與高可用、可觀測性幾個領域獲得持續提升。</p><p style="text-wrap: wrap;"><br></p></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: top;align-self: flex-start;flex: 100 100 0%;padding: 22px 28px;border-style: solid;border-width: 0px 0px 0px 2px;border-left-color: rgb(230, 15, 11);height: auto;margin-left: 20px;background-color: rgb(255, 249, 241);"><section style="text-align: justify;font-size: 15px;line-height: 1.5;letter-spacing: 1px;font-family: Optima-Regular, PingFangTC-light;" powered-by="xiumi.us"><p style="text-wrap: wrap;">一、性能提升之異步數據採集</p><p style="text-wrap: wrap;">1.各進程配置參數説明</p><p style="text-wrap: wrap;">2.異步數據採集效果</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">二、架構優化之 Zabbix Proxy 高可用和負載均衡</p><p style="text-wrap: wrap;">1.主機如何分配給 Zabbix Proxy group 監控</p><p style="text-wrap: wrap;">2.高可用和負載均衡機制</p><p style="text-wrap: wrap;">3.Zabbix Agent 參數配置</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">三、性能提升之 Zabbix Proxy 內存緩存</p><p style="text-wrap: wrap;">1.緩存模式設置</p><p style="text-wrap: wrap;">2.緩存模式差異</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">四、功能優化之監控項級別 Timeout</p><p style="text-wrap: wrap;">五、性能提升之並行網絡自動發現</p><p style="text-wrap: wrap;">六、功能優化之數據推送</p><p style="text-wrap: wrap;">七、功能優化之前端腳本輸入參數</p><p style="text-wrap: wrap;">八、其它提升</p><p style="text-wrap: wrap;">九、新增模板和集成方案</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">一、性能提升之異步數據採集</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-size: 15px;font-family: Optima-Regular, PingFangTC-light;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix 通過各種功能進程採集數據，例如 Pollers、Trappers 和 Pingers 等，但每個進程每次只能採集單個指標的數據，導致各類進程數量都較多。</p><p><br></p><p>在 Zabbix7.0 中，Poller 進程拆分出了 SNMP Poller、Zabbix Agent Poller 和 HTTP Agent Poller 這些類型進程，它們都支持異步線程處理，極大地提升了處理效率並且減少了進程數量。</p><p><br></p><p>所謂異步處理指線程任務相互獨立，不會阻塞主進程。單個進程最多開啓 1000 個線程。</p><p><br></p><p><span style="color: rgb(212, 0, 0);">1. 各進程配置參數説明</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>SNMP Poller 進程數量控制</p></li></ul></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020570" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/2d73c7bf-91e3-4f61-b0a9-309e34709df7.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>Zabbix Agent Poller 進程數量控制</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020573" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/da5525f6-040e-498e-8991-eebd68d94d60.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>HTTP Agent Poller 進程數量控制</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020571" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e1f6e48c-372f-47ae-860d-759aa1b94935.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>單個進程並行檢查數控制</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020575" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/9fa44017-75f7-48c7-a4b8-260b7b558bee.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><span style="color: rgb(212, 0, 0);">2. 異步數據採集效果</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>數據流</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020577" data-ratio="0.687962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e66d7e5d-ae3a-4243-bf78-0cc108745a92.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="text-align: unset;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>採集進程處理效果</p></li></ul></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020579" data-ratio="0.412962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a30b5031-c40e-4c19-93e3-118466d75b78.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020576" data-ratio="0.125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7c2a686a-6b59-487b-99bb-d5186af7d241.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="text-align: unset;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;color: rgb(212, 0, 0);" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>6.0 和 7.0 性能對比</p></li></ul></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020578" data-ratio="0.5314814814814814" data-s="300,640" src="https://oscimg.oschina.net/oscnet/bd3b0248-996b-4f1d-9646-8689311f2d5a.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">二、架構優化之 Zabbix Proxy 高可用和負載均衡</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix6.0 實現了 Zabbix Server 的高可用，但是未實現 Zabbix Proxy 高可用，Zabbix7.0 同時實現了 Zabbix Proxy 高可用和負載均衡。</p><p><br></p><p>引入 Zabbix Proxy group 概念，將多台 Zabbix Proxy 合併為一個組，組內的任意 Zabbix Proxy 離線後自動將其監控主機分配給其它 Zabbix Proxy。</p><p><br></p><p><span style="color: rgb(212, 0, 0);">1. 主機如何分配給 Zabbix Proxy group 監控</span></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020580" data-ratio="0.7835648148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4643ba20-0b3b-43c0-b38f-9a9301c5ff33.png" data-type="png" data-w="864" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><span style="color: rgb(212, 0, 0);">2. 高可用和負載均衡機制</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>Failover period 用於檢測 Proxy 在線還是離線</p></li><li><p>Proxy group 可設置最少在線 Proxy 數量，低於該值則 Proxy group 為離線狀態</p></li><li><p>負載重分配時將排除舊版本 Proxy</p></li><li><p>如果 Proxy group 離線，組內的主機將停止重分配</p></li><li><p>當 Proxy 或者主機狀態發生變化，主機重分配將會觸發</p></li><li><p>根據每台 Proxy 監控的主機數量做負載均衡</p></li><li><p>為避免頻繁的主機重新分配，如果某台 Proxy 上較多主機同時掉線不會立即分配至其它 Proxy，而是等到主機上線後分配至主機數量最少的那台 Proxy</p></li></ul><p><br></p><p><span style="color: rgb(212, 0, 0);">3. Zabbix Agent 參數配置</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>主動類型 Agent，ServerActive 參數至少包含 Proxy group 中一個節點 IP 地址，最好多個</p></li><li><p>被動類型 Agent，Server 參數需要包含 Proxy group 所有節點 IP 地址</p></li></ul></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><br></p></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">三、性能提升之 Zabbix Proxy 內存緩存</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 支持多種 Proxy 緩存模式，Disk、Memory 和 Hybrid。Disk 即之前版本的磁盤存儲；Memory 為內存存儲，所有數據放在內存中；Hybrid 是 Disk 和 Memory 的混合，內存不夠就磁盤存儲。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;color: rgb(212, 0, 0);" powered-by="xiumi.us"><p>1. 緩存模式設置</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020581" data-ratio="0.2796296296296296" data-s="300,640" src="https://oscimg.oschina.net/oscnet/308aab62-27f3-4ee4-b9a1-687d942d88ff.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;color: rgb(212, 0, 0);" powered-by="xiumi.us"><p>2. 緩存模式差異</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020583" data-ratio="0.600925925925926" data-s="300,640" src="https://oscimg.oschina.net/oscnet/268862d9-c1af-4985-af74-0ed474e4010c.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">四、功能優化之監控項級別 Timeout</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 為大部分數據檢查引入監控項級別 Timeout，可在前端頁面配置 Timeout 數值，取值範圍 1 秒到 600 秒（10 分鐘）。Timeout 可在多個層級定義，包含 Zabbix Server 全局配置、單個 Zabbix Proxy 級別以及單個監控項。</p><p><br></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020582" data-ratio="0.6648148148148149" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8901f628-25aa-4103-a682-7dc898266da2.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">五、性能提升之並行網絡自動發現</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>當網絡自動發現中掃描的 IP 或者網段過多，並且包含多個檢查規則時，完成一次任務將消耗大量時間，這是因為單個任務只能被單個 discoverer 進程處理，並且每個 IP 按順序執行。</p><p>Zabbix7.0 引入新的網絡自動發現進程，包含 Discovery manager 和 Discovery worker(discoverer process)，自監控模板中包含對應進程使用率和隊列延遲指標。</p><p><br></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020584" data-ratio="0.11481481481481481" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8fafad63-6e29-4a2e-9c5d-9eca501f582b.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="text-align: unset;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>網絡自動發現配置頁面增加最大並行檢查數（Maximum concurrent checks）選項，並行處理檢查。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020589" data-ratio="0.5138888888888888" data-s="300,640" src="https://oscimg.oschina.net/oscnet/17d635ab-58c5-4cd5-8fc1-4b03d17cd412.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">六、功能優化之數據推送</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 增加 history.push API 方法，對應監控項類型為 Zabbix Trapper 和 HTTP Agent(Enable trapping)。可在監控項中配置 Allow Server IP 只接收給定 IP 發送的數據，並且 API 方法權限可通過用戶角色控制。</p><p>詳細信息參見</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247504188%26idx%3D1%26sn%3Da69905144eb865d356635095315e728e%26scene%3D21%23wechat_redirect" target="_blank" data-linktype="2">《Zabbix7.0 新功能，還可以這樣推送數據！不止 zabbix_sender》</a></p><p><br></p></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">七、功能優化之前端腳本輸入參數</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 在執行前端腳本時可以輸入參數，這樣就不需要創建多個前端腳本或者頻繁修改某個前端腳本。在腳本中使用{MANUALINPUT}宏引用自定義輸入的數據。</p><p><br></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020588" data-ratio="0.5361111111111111" data-s="300,640" src="https://oscimg.oschina.net/oscnet/bab2a986-2c4a-4d4b-bd67-b5d9a90b7f29.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020586" data-ratio="0.600925925925926" data-s="300,640" src="https://oscimg.oschina.net/oscnet/05bf06f1-cdd4-44d7-8cc7-5574e3b48da4.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">八、其它提升</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>支持監控項和監控項原型名稱中使用用戶宏（Zabbix6.0 中取消，7.0 又恢復）</p></li><li><p>提升普通用戶前端權限校驗速度</p></li><li><p>支持原生 Kafka topics 的 HTTP connector</p></li><li><p>支持主動檢查（active checks）執行遠程命令</p></li><li><p>提升聚合計算中不支持監控項處理性能</p></li><li><p>支持多頁 PDF 格式定時報表</p></li><li><p>支持主機自動註冊時分配標籤</p></li><li><p>等<br></p></li></ul><p><br></p></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">九、新增模板和集成方案</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020587" data-ratio="0.49074074074074076" data-s="300,640" src="https://oscimg.oschina.net/oscnet/fb5140c2-2f4a-444c-810c-1f1d5d47e3ef.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-right: -11px;"><section style="display: flex;width: 100%;flex-flow: column;" powered-by="xiumi.us"><section style="z-index: 1;" powered-by="xiumi.us"><section style="text-align: center;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 26.8047px;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100020585" data-ratio="1.556" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7219ef62-241c-4d83-bf02-e4cf6230e624.png" data-type="png" data-w="500" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section></section></section></section><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 auto;background-color: rgb(212, 0, 0);min-width: 5%;height: auto;padding: 5px 16px 5px 27px;"><section style="text-align: justify;color: rgb(255, 255, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>立即體驗</strong></p></section></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgb(255, 245, 237);"><section style="justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;padding: 29px;"><section style="text-align: justify;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;">點擊查看&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zabbix.com%2Fcn%2Frelease_notes" textvalue="Zabbix7.0 發佈日誌 Release Notes" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Zabbix7.0 發佈日誌 Release Notes</a>，瞭解更多新增和優化特性。立即下載試用，開啓嶄新的 Zabbix 探索之旅。</span></p><p style="text-wrap: wrap;"><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;"><br></span></p><p style="text-wrap: wrap;"><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;">你們期待的 Zabbix7.0LTS 版本將很快與大家見面，敬請期待！</span></p></section></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;margin-top: -8px;margin-bottom: 10px;transform: translate3d(-10px, 0px, 0px);" powered-by="xiumi.us"><section style="display: inline-block;width: 90%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-bottom-color: rgb(178, 0, 19);height: auto;"><section style="justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: top;align-self: flex-start;flex: 0 0 auto;min-width: 5%;height: auto;line-height: 0;"><section style="transform: rotateZ(90deg);" powered-by="xiumi.us"><section style="text-align: center;"><section style="display: inline-block;width: 33px;height: 1px;vertical-align: top;overflow: hidden;background-color: rgb(178, 0, 19);"><section style="text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p></section></section></section></section></section></section></section></section></section></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100020597" data-ratio="0.5222222222222223" data-s="300,640" src="https://oscimg.oschina.net/oscnet/488e4d86-968c-465e-b703-dccea60e2033.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.huodongxing.com%2F" textvalue="將在南京技術交流現場分享 Zabbix7.0 新功能！掃碼免費報名。" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 14px;">將在南京技術交流現場分享 Zabbix7.0 新功能！掃碼免費報名。</span></a><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong><span style="color: rgb(217, 33, 66);">延伸閲讀</span></strong><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247504188%26idx%3D1%26sn%3Da69905144eb865d356635095315e728e%26chksm%3Deb06e01adc71690c8994cae676a4b9f942ff2fe0e63a086813426e648bdf8524ef3eb8555dc7%26scene%3D21%23wechat_redirect" textvalue="Zabbix7.0 新功能，還可以這樣推送數據！不止 zabbix_sender" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" style="font-size: 15px;" data-linktype="2"><span style="font-size: 15px;">Zabbix7.0 新功能，還可以這樣推送數據！不止 zabbix_sender</span></a><br></p></li><li><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247503844%26idx%3D1%26sn%3D66995b695ba25b4a5d77117138b7864d%26chksm%3Deb06fec2dc7177d4ba32f0c2faedc1856907c87e488b5b510bb75d66ce551d904ea588edc5fb%26scene%3D21%23wechat_redirect" textvalue="手把手教學 Zabbix7.0+麒麟操作系統，兼容認證" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" style="font-size: 15px;" data-linktype="2"><span style="font-size: 15px;">手把手教學 Zabbix7.0+麒麟操作系統，兼容認證</span></a><br></p></li><li><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247503204%26idx%3D1%26sn%3D4913c89d2c4b14ff762e2acdd555bebe%26chksm%3Deb06fc42dc717554555e088b350d0995c21100eb7973df940e87cd8a8372ec22c70015ff0840%26scene%3D21%23wechat_redirect" textvalue="Zabbix 創始人提前揭祕 Zabbix7.0 新功能！" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" style="font-size: 15px;" data-linktype="2"><span style="font-size: 15px;">Zabbix 創始人提前揭祕 Zabbix7.0 新功能！</span></a></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p></li></ul><section style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020590" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/2e3728e3-275b-44d9-98c0-e5c5c0566e62.jpg" data-type="jpeg" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公眾號 - Zabbix 開源社區（china_zabbix）。<br>如有侵權，請聯繫 support@oschina.cn 刪除。<br>本文參與「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源創計劃</a>」，歡迎正在閲讀的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 10:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3900302/blog/11020075</guid>
            <link>https://my.oschina.net/u/3900302/blog/11020075</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JetBrain 捆綁 AI 助手引起用戶不滿]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>JetBrains 曾於去年宣佈，<span style="background-color:#ffffff; color:#333333">所有基於 IntelliJ 的 IDE 和 .NET 工具都會集成&nbsp;</span><strong style="color:#333333">AI 助手 (AI Assistant) </strong>這一<span style="background-color:#ffffff; color:#333333">新功能；並表示會將它整合到 IDE 的核心工作流中，尤其是 JetBrains IDE 的強項 —— 將代碼理解與 AI 深度集成。</span></p><p>但事情並非一帆風順，無論是出於不兼容的公司政策、還是擔憂安全風險等其他原因，一些 JetBrains 客戶對 AI Assistant 有着強烈的牴觸情緒，他們希望在自己的 JetBrains 應用程序中不要出現該插件。然而鑑於插件代碼已經"深度集成"，相關的移除工作非常複雜。</p><p style="text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>自 AI 助手插件首次亮相以來，JetBrains 的 YouTrack 問題板上已經發布了十多個帖子，尋求刪除、卸載或以其他方式刪除該插件的方法。在一個名為"提供從系統中完全刪除插件的可能性"的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FLLM-1760%2FCan-not-remove-Jetbrains-AI-Assistant-plugin-completely" target="_blank">主題</a>，就詳細説明瞭為什麼大家不希望在公司的開發者工具（如 PyCharm、IntelliJ IDEA 和其他應用程序）中安裝該插件。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><img height="297" src="https://oscimg.oschina.net/oscnet/up-005a432b81b726ee7b9b144093d0d09568d.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>開發人員提出了許多擔憂，稱該插件是"臃腫的軟件"、對企業知識產權構成風險、是一個安全問題、令人討厭、且有違信任。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p style="text-align:start"><span style="color:#000000">「我只是想明確表示，我不能在我工作的公司使用這個產品，因為安全性不允許默認的 AI 實施成為產品的一部分。」</span></p><p style="text-align:start"><span style="color:#000000">"這是不可接受的。它不應該在默認情況下捆綁一些可以將整個代碼庫發送到天知道什麼地方的東西。JetBrains 的這一舉動非常糟糕，在此之後我將不再續訂。這是一種無法挽回的失信行為。"</span></p><p style="text-align:start"><span style="color:#000000">"這項服務是基於 AI 的，你不知道它提供給你的代碼的出處，這本身就是一個巨大的問題，因為它造成了可疑的許可/知識產權/法律狀況。但最大的問題不是因為它是 AI，而是因為它將用戶公司的知識產權泄露給了誰也不知道的地方，有可能直接泄露給競爭對手。"</span></p></blockquote><p><span style="color:#000000">對此，JetBrains 公司的 Matt Ellis 在給 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2024%2F02%2F01%2Fjetbrains_unremovable_ai_assistant%2F" target="_blank">The Register</a> 的一份聲明中解釋稱：</span></p><blockquote><p><span style="color:#000000">"雖然捆綁了 AI 助手插件，而且插件本身也已啓用，但默認情況下並沒有啓用 AI 功能，並且未經用戶的同意也不會將數據發送到外部。你必須登錄、接受數據政策，然後購買訂閲或開始試用。發送到 AI 服務的任何數據都不會用於訓練。我們還提供用於排名和完成的 ML 支持，這是由設備上的模型提供的，沒有數據被髮送到設備之外。"</span></p></blockquote><p><span style="color:#000000">Ellis 聲稱還有許多客戶都對捆綁插件很滿意，因此該公司正在研究可以同時滿足捆綁和完全拆卸 AI 助手的方法。他指出，移除捆綁插件的問題在於，可能會破壞應用程序簽名並導致一些更新問題。</span></p><p><span style="color:#000000">當被問及有多少 JetBrains 客戶反對 AI 助手時，一位發言人則表示："我們無法確定這些意見是否代表了我們所有客戶的立場。我們理解這種情緒的強度，我們正在傾聽來自社區各方面的反饋，包括正在使用 AI 助手的許多快樂的個人和企業。"</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 07:59:01 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277463/jetbrains-unremovable-ai-assistant</guid>
            <link>https://www.oschina.net/news/277463/jetbrains-unremovable-ai-assistant</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[基於 Netty 開發輕量級 RPC 框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>筆者在開發基於客戶端/服務端模式通信的插件的時候，需要用到輕量級最小包依賴的 RPC 框架，而市面上的 RPC 框架份量過於龐大，最終打包下來都是幾十兆甚至上百兆，而這裏面大多數功能我都用不上，於是思來想去我決定寫一款屬於自己的輕量級 RPC 框架，簡單易用快速接入。</p></blockquote><span id="OSC_h2_1"></span><h2>關於技術選型</h2><span id="OSC_h3_2"></span><h3>協議序列化/反序列化</h3><p>網絡通信基於 TCP/IP 為基礎自定義應用層協議，常見的序列化/反序列化工具有 java 原生序列化，json,kryo,protobuf,fst,hessian 等。</p><p>在不考慮跨語言的情況下，從序列化時長/序列化大小/易用性/擴展性這幾方面考慮，綜合性比較強的是 kryo，但是 kryo 只支持 java 版本不能跨語言 (據説能跨語言但是非常複雜，相當於不能跨語言了)，protobuf 是性能最強的且支持跨語言，但是需要事先基於 proto 生成一個類，這會導致所有序列化和反序列化的時候只能用 proto 定義的類型。</p><p>最終選擇 kryo 和 protobuf 兩種序列化工具，使用的時候可選序列化類型，前者序列化幾乎不受限制，後者支持跨語言，但是必須事先生成 proto 類型的類並使用其作為序列化工具。</p><span id="OSC_h3_3"></span><h3>通信框架使用</h3><p>高性能異步非阻塞框架非 Netty 不可了，客戶端和服務端基於 Netty 開發可事半功倍。</p><p>但是基於 Netty 再加上 zk 連接和各種工具打包完都需要 20M 左右，所以除了 client 和 server 端外，再開發一個 client-mini 模塊，這個模塊是 client 端基於 nio 開發的，性能雖然不如 netty 但是沒有任何依賴，打包下來僅 20kb。</p><span id="OSC_h3_4"></span><h3>服務註冊和發現</h3><p>註冊中心選擇 zookeeper 作為服務註冊和服務發現，當然如果只用單點模式的話其實是不需要註冊中心的，所以 zookeeper 是可選組件。</p><span id="OSC_h2_5"></span><h2>開發 RPC 框架</h2><p>好了，有了上述這些技術就可以步入 RPC 框架的開發了，我這裏分為了以下模塊：</p><ul><li>base : 基礎公共模塊</li><li>protocol : 協議層，包含應用層通信協議，以及序列化/反序列化，支持 kryo 和 protobuf</li><li>registry : 註冊模塊，基於 zookeeper 作為註冊中心，包含註冊服務和服務發現</li><li>server : 服務端</li><li>client : 客戶端</li><li>client-mini : 不依賴任何包的客戶端，基於 NIO</li></ul><span id="OSC_h3_6"></span><h3>應用層協議</h3><p>首先設計通信協議層，一個 rpc 框架通信的每一次請求主要包含服務名 (serviceName)，函數名 (methodName)，參數類型 (paramTypes) 和參數 (params) 等字段，當然再加上請求唯一 id: traceId</p><pre><code class="language-java">@ShadowEntity  
public class ShadowRPCRequest {  

    @ShadowField(1)  
    private String traceId;  

    @ShadowField(2)  
    private String serviceName;  

    @ShadowField(3)  
    private String methodName;  

    @ShadowField(4)  
    private Class&lt;?&gt;[] paramTypes;  

    @ShadowField(5)  
    private Object[] params;
}

</code></pre><p>上述 ShadowRPCRequest 是基於 kryo 序列化方式進行的一個定義，適合於客戶端和服務端都是 java，如果要跨語言，則需要使用 protobuf，protobuf 首先定義一個 request.proto</p><pre><code class="language-proto">syntax = "proto3";  
  
  
package com.liubs.shadowrpc.protocol.entity;  
option java_outer_classname="ShadowRPCRequestProto";  
  
message ShadowRPCRequest {  
    string traceId = 1;  
    string serviceName = 2;  
    string methodName = 3;  
    repeated string paramTypes = 4; //參數類名  
    repeated bytes params = 5; //bytes 類型充當參數  
}

</code></pre><p>由於要跨語言，所以參數用 bytes 的集合類型，反序列化時需要二次解壓縮成具體的類型，但是即便是這樣仍然比 kryo 要快。</p><p>同理，與 ShadowRPCRequest 對應的消息體是響應 ShadowRPCResponse</p><pre><code class="language-java">@ShadowEntity  
public class ShadowRPCResponse {  
 
    @ShadowField(1)  
    private String traceId;  

    @ShadowField(2)  
    private int code;  

    @ShadowField(3)  
    private String errorMsg;  

    @ShadowField(4)  
    private Object result;
}

</code></pre><p>然後就是基於 kryo 和 protobuf 的序列化和反序列化了，kryo 有很多種序列化策略，考慮到函數參數需要支持增減字段，所以 kryo 使用 TaggedField 策略，上面的@ShadowField 註解是我進行的一些簡單的封裝，每次新增字段的時候需要加上註解即可，而 protobuf 天生就支持參數增減字段。</p><p>kryo 的序列化和反序列化如下：</p><pre><code class="language-java">public class KryoSerializer implements ISerializer {  
  
    private static ThreadLocal&lt;Kryo&gt; kryoThreadLocal = ThreadLocal.withInitial(() -&gt; {  
        Kryo kryo = new Kryo();  

        kryo.setDefaultSerializer(new KryoFieldSerializerFactory());  

        kryo.setReferences(false);  
        kryo.setRegistrationRequired(false); //不需要提前註冊  

        //註冊一定會用到的，序列化可以省點空間  
        kryo.register(Class.class);  
        kryo.register(Class[].class);  
        kryo.register(Object[].class);  
        kryo.register(ShadowRPCRequest.class);  
        kryo.register(ShadowRPCResponse.class);  

        return kryo;  
    });  
  
  
  
    @Override  
    public byte[] serialize(Object object) {  

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();  
        Output output = new Output(byteArrayOutputStream);  
        kryoThreadLocal.get().writeObject(output, object);  
        output.close();  
        return byteArrayOutputStream.toByteArray();  
    }  
  
    @Override  
    public &lt;T&gt; T deserialize(byte[] array, Class&lt;T&gt; clazz) {  

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(array);  
        Input input = new Input(byteArrayInputStream);  
        T object = kryoThreadLocal.get().readObject(input, clazz);  
        input.close();  
        return object;  
    }  
}

</code></pre><p>protobuf 的序列化和反序列化則是通過調用生成的 proto 類來實現序列化和反序列化的，</p><p>序列化：</p><pre><code class="language-java">@Override  
public byte[] serialize(Object object) {  
    if (object instanceof MessageLite) {  
    return ((MessageLite) object).toByteArray();  
    }  
    if (object instanceof MessageLite.Builder) {  
    return (((MessageLite.Builder) object).build().toByteArray());  
    }  

    return new byte[0];  
}

</code></pre><p>反序列化:</p><pre><code class="language-java">
public &lt;T&gt; T deserialize(MessageLite messageLite,byte[] array, Class&lt;T&gt; clazz) {  
    return messageLite.getDefaultInstanceForType().getParserForType().parseFrom(array, 0, array.length);
}

</code></pre><span id="OSC_h3_7"></span><h3>消息的粘包/拆包和半包處理</h3><p>TCP/IP 是面向流的協議，操作系統底層其實並不關心我們自定義的應用層協議包是否完整，在高併發情況下，我們一次性發送多個包會被寫入到一個流中，就是所謂的「粘包」，而接收方則需要根據收到的流進行拆分得到具體的包，稱為「拆包」，</p><p><img height="183" src="https://oscimg.oschina.net/oscnet/up-f2a9582fee1ea86078a7229ef8328328729.png" width="600" referrerpolicy="no-referrer"></p><p>比如上面的 A,B,C,D,E,F 是一次性發送的包，但是在發送 D 的時候超過了發送緩衝區被拆分成了 D1 和 D2，而接收方從緩衝區讀取到 A,B,C,D1 的時候完全不知所措，我們需要處理每個包的邊界，並且還需要將第一次包中的 D1 和第二次包中的 D2 進行合併成 D 形成一個完整的包 D。</p><p>業界最常用的方案是，發送方在寫入緩衝區字節流的時候，先寫入消息的長度，再寫入消息字節，而接收方則先讀取長度 n，再讀取 n 個字節，如果字節數不到 n，則重製 position，等下一次讀取消息的時候再讀取完整 n 個長度的字節流形成一個消息包。</p><p>寫入字節流代碼：</p><pre><code class="language-java">int dataLength = data.length;  
out.writeInt(dataLength); // 先寫入消息長度  
out.writeBytes(data); // 寫入序列化後的數據

</code></pre><p>而接收方，用 netty 現成的 LengthFieldBasedFrameDecoder 即可</p><pre><code class="language-java">pipeline.addLast(new LengthFieldBasedFrameDecoder(globalConfig.getMaxFrameLength(),  
0, 4, 0, 4));

</code></pre><p>這裏的 4 表示 4 個字節 (int 類型)，它會先讀取 4 個字節，再讀取字節流，根據長度拆分不同的」Frame「，即我們需要的消息包。</p><span id="OSC_h3_8"></span><h3>Netty 構建通信框架</h3><p>針對 Netty 構建通信網絡初始化，最終目標是實現客戶端發送一個 ShadowRPCRequest 消息就能調用服務並返回給客戶端 ShadowRPCResponse 消息</p><pre><code class="language-java">NioEventLoopGroup bossGroup = new NioEventLoopGroup();  
NioEventLoopGroup workerGroup = new NioEventLoopGroup();
ServerBootstrap bootstrap = new ServerBootstrap();  
bootstrap.group(bossGroup, workerGroup)  
.channel(NioServerSocketChannel.class)  
.childHandler(new ShadowChannelInitializer(serverConfig))  
.option(ChannelOption.SO_BACKLOG, 128)  
.childOption(ChannelOption.SO_KEEPALIVE, true);  
  
channelFuture = bootstrap.bind(port).sync();

</code></pre><p>childHandler 裏面使用 ShadowChannelInitializer 作為每個連接的處理</p><pre><code class="language-java">public class ShadowChannelInitializer extends ChannelInitializer&lt;SocketChannel&gt; {  
  
    private ServerConfig serverConfig;  

    public ShadowChannelInitializer(ServerConfig serverConfig) {  
    this.serverConfig = serverConfig;  
    }  

    @Override  
    protected void initChannel(SocketChannel ch) throws Exception {  
    ChannelPipeline pipeline = ch.pipeline();  

    //qps 請求量統計  
    if(serverConfig.isQpsStat()) {  
    pipeline.addLast(new QpsStatHandler());  
    }  

    //處理幀邊界，解決拆包和粘包問題  
    pipeline.addLast(new LengthFieldBasedFrameDecoder(serverConfig.getMaxFrameLength(),  
    0, 4, 0, 4));  

    //消息序列化和反序列化  
    pipeline.addLast(new MessageHandler());  

    //服務處理  
    pipeline.addLast(new ServerHandler());  
    }  
}

</code></pre><p>緊接着就是對接收到客戶端的 ShadowRPCRequest 消息的處理，ShadowRPCRequest 裏麪包含了服務名，函數名以及參數，考慮到也有可能是 protobuf 類型 ShadowRPCRequestProto，這裏統一轉換成抽象層的 model: RequestModel，字段和 ShadowRPCRequest 都差不多，然後找到對應的服務觸發邏輯和響應 ServerHandler</p><pre><code class="language-java">public class ServerHandler extends ChannelInboundHandlerAdapter {  
  
    @Override  
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {  

    // 打印驗證影響速度，壓測時去掉  
    //logger.info("Server received: " + msg);  

    IModelParser modelParser = serializeModule.getSerializer().getModelParser();  

    RequestModel requestModel = modelParser.fromRequest(msg);  

    executorService.execute(()-&gt;{  
    try {  

        ServiceLookUp serviceLookUp = new ServiceLookUp();  
        serviceLookUp.setServiceName(requestModel.getServiceName());  
        serviceLookUp.setMethodName(requestModel.getMethodName());  
        serviceLookUp.setParamTypes(requestModel.getParamTypes());  
        ServiceTarget targetRPC = serverModule.getRPC(serviceLookUp);  

        Object result = targetRPC.invoke(requestModel.getParams());  

        ResponseModel responseModel = new ResponseModel();  
        responseModel.setTraceId(requestModel.getTraceId());  
        responseModel.setCode(ResponseCode.SUCCESS.getCode());  
        responseModel.setResult(result);  

        // 響應客戶端  
        ctx.writeAndFlush(modelParser.toResponse(responseModel));  
        } catch (Exception e) {  
        e.printStackTrace();  
    }  

    });  

    }  
  
}

</code></pre><p>至於根據 RequestModel 是如何找到對應的服務的，就需要在服務端啓動的時候掃描所有的服務緩存到 serverModule 裏面了，這樣就能通過 serverModule 獲取到 targetRPC</p><pre><code class="language-java">@ShadowModule  
public class ServerModule implements IModule {  
    private static final Logger logger = LoggerFactory.getLogger(ServerModule.class);  

    @ModuleInject  
    private SerializeModule serializeModule;  

    private ServerConfig serverConfig;  

    //所有服務  
    private Map&lt;ServiceLookUp,ServiceTarget&gt; allRPC = new ConcurrentHashMap&lt;&gt;();  

    public void init(ServerConfig serverConfig,List&lt;String&gt; packages) {  
        this.serverConfig = serverConfig;  
        //初始化服務  
        List&lt;ShadowServiceHolder&lt;ShadowService&gt;&gt; shadowServices = new ArrayList&lt;&gt;();  

        for(String packageName : packages) {  
        try {  
        shadowServices.addAll(AnnotationScanner.scanAnnotations(packageName, ShadowService.class));  
        } catch (IOException e) {  
        logger.error("scanService err",e);  
        }  
        }  

        for(ShadowServiceHolder&lt;ShadowService&gt; ShadowServiceHolder : shadowServices) {  
        ShadowService serviceAnnotation = ShadowServiceHolder.getAnnotation();  
        Class&lt;?&gt; serviceClass = ShadowServiceHolder.getClassz();  
        try {  
        Object o = serviceClass.newInstance();  


        for(Method method : serviceClass.getMethods()) {  

        if(Modifier.isStatic(method.getModifiers()) || !Modifier.isPublic(method.getModifiers())){  
        continue;  
        }  

        ServiceLookUp serviceLookUp = new ServiceLookUp();  
        serviceLookUp.setServiceName(serviceAnnotation.serviceName());  
        serviceLookUp.setMethodName(method.getName());  
        serviceLookUp.setParamTypes(method.getParameterTypes());  

        ServiceTarget serviceTarget = new ServiceTarget();  
        serviceTarget.setTargetObj(o);  
        serviceTarget.setMethod(method);  
        addRPCInterface(serviceLookUp,serviceTarget);  
        }  

        } catch (InstantiationException | IllegalAccessException e) {  
        throw new RuntimeException(e);  
        }  
        }  
    }  

    public void addRPCInterface(ServiceLookUp lookUp,ServiceTarget obj) {  
        allRPC.put(lookUp,obj);  
    }  

    public ServiceTarget getRPC(ServiceLookUp lookUp) {  
        return allRPC.get(lookUp);  
    }  
  
  
  
}

</code></pre><span id="OSC_h3_9"></span><h3>客戶端調用遠程 rpc 服務</h3><p>剛才我們把服務端接收 ShadowRPCRequest 消息並觸發邏輯返回 ShadowRPCResponse 消息實現了，而在客戶端，我們只持有服務端的一個接口，要通過這個接口創建一個遠程服務調用，來實現 rpc 調用，我們最終要實現的效果是這樣的</p><pre><code class="language-java">IHello helloService = shadowClient.createRemoteProxy(IHello.class,"shadowrpc://DefaultGroup/helloservice");  
  
System.out.println("發送 hello 消息");  
String helloResponse = helloService.hello("Tom");  
System.out.println("hello 服務端響應:"+helloResponse);

</code></pre><p>IHello 是一個接口，沒有任何實現類，實現類在服務端，而客戶端我們通過創建一個遠程代理的方式就能實現調用接口即發送 ShadowRPCRequest 消息到遠程服務器。</p><p>我們這裏使用動態代理，基於接口創建一個遠程對象</p><pre><code class="language-java">public static &lt;T&gt; T create(IConnection connection, Class&lt;T&gt; serviceStub, final String service) {  
  
    String[] serviceArr = service.replace("shadowrpc://","").split("/");  
    if(serviceArr.length &lt; 2) {  
    throw new IllegalArgumentException("service 參數不符合規範");  
    }  
    String group = serviceArr[0];  
    String serviceName = serviceArr[1];  

    return (T)Proxy.newProxyInstance(  
        serviceStub.getClassLoader(),  
        new Class&lt;?&gt;[]{serviceStub},  
        new RemoteHandler(connection,serviceStub,group,serviceName)  
    );  
}

</code></pre><p>RemoteHandler 中實現代理對象的邏輯，發送消息到遠程服務器</p><pre><code class="language-java">public class RemoteHandler implements InvocationHandler {  
private static final Logger logger = LoggerFactory.getLogger(RemoteHandler.class);  
  
/**  
* 如果不使用註冊中心，則必須有 ShadowClient  
*/  
private IConnection clientConnection;  
  
/**  
* 遠程接口 stub  
*/  
private Class&lt;?&gt; serviceStub;  
  
  
/**  
* 集羣  
*/  
private String group;  
  
/**  
* 服務名  
*/  
private String serviceName;  
  
  
private SerializeModule serializeModule = ModulePool.getModule(SerializeModule.class);  
  
public RemoteHandler(IConnection client, Class&lt;?&gt; serviceStub, String group,String serviceName) {  
    this.clientConnection = client;  
    this.serviceStub = serviceStub;  
    this.group = group;  
    this.serviceName = serviceName;  
}  
  
@Override  
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {  
  
    try{  
        RequestModel requestModel = new RequestModel();  
        String traceId = UUID.randomUUID().toString();  
        requestModel.setTraceId(traceId);  
        requestModel.setServiceName(serviceName);  
        requestModel.setMethodName(method.getName());  
        requestModel.setParamTypes(method.getParameterTypes());  
        requestModel.setParams(args);  

        IModelParser modelParser = serializeModule.getSerializer().getModelParser();  
        Future&lt;?&gt; future = ReceiveHolder.getInstance().initFuture(traceId);  

        Channel channel = clientConnection.getChannel(group);  

        if(!channel.isOpen()) {  
        logger.error("服務器已關閉,發送消息拋棄...");  
        return null;  
        }  

        try{  
        channel.writeAndFlush(modelParser.toRequest(requestModel)).sync();  
        }catch (Exception e) {  
        logger.error("發送請求{}失敗",traceId);  
        return null;  
        }  

        ResponseModel responseModel = (ResponseModel)future.get(3, TimeUnit.SECONDS);  
        if(responseModel != null) {  
        return responseModel.getResult();  
        }else {  
        ReceiveHolder.getInstance().deleteWait(traceId);  
        logger.error("超時請求,拋棄消息{}",traceId);  
        return null;  
        }  

    }catch (Throwable e) {  
    logger.error("invoke err",e);  
    }  

    return null;  
    }  
}

</code></pre><span id="OSC_h3_10"></span><h3>服務註冊與發現</h3><p>上面實現的客戶端和服務端是單節點通信的，要實現服務註冊與發現，需要註冊中心 Registry，服務端向註冊中心註冊服務，客戶端訂閲服務節點的變化，獲取到服務節點列表後負載均衡 rpc 調用服務節點的機器。</p><p><img height="426" src="https://oscimg.oschina.net/oscnet/up-a708679e97a8b88ed64a0ec96095d73c4aa.png" width="796" referrerpolicy="no-referrer"></p><p>服務端在啓動的時候註冊服務到 zookeeper</p><pre><code class="language-java">serviceRegistry.registerServer(new ServerNode(group,IPUtil.getLocalIp(),port));

public void registerServer(ServerNode serverNode) {  
    try {  
    String path = ServiceRegistryPath.getServerNodePath(serverNode.getGroup(),  
    ServiceRegistryPath.uniqueKey(serverNode.getIp(),serverNode.getPort()));  
    this.zkNodePath = zooKeeperClient.create(path, serverNode.toBytes());  
    } catch (Exception e) {  
    e.printStackTrace();  
    }  
}

</code></pre><p>即在服務啓動的時候創建節點 /shadowrpc/services/group/node1，這個 node1 的值就是 ip+port，而在服務關閉的時候刪除這個節點</p><pre><code class="language-java">zooKeeperClient.delete(zkNodePath);

</code></pre><p>客戶端就可以獲取 zk 下/shadowrpc/services/group 目錄下的所有節點，監聽目錄變化，動態維護服務端的列表</p><pre><code class="language-java">ServiceDiscovery serviceDiscovery = new ServiceDiscovery(ZK_URL);

//監聽增量變化事件  
//初始化狀態會同步 SERVER_ADDED 事件，所以不用獲取全量  
serviceDiscovery.watchService(group, (changeType, serverNode) -&gt; {  
    if(changeType == ServerChangeType.SERVER_ADDED) {  
        System.out.println("Child added: " + serverNode);  

        ShadowClient shadowClient = new ShadowClient(serverNode.getIp(),serverNode.getPort(),eventLoopGroup);  
        shadowClient.init();  
        finalShadowClients.add(shadowClient);  
    }else if(changeType == ServerChangeType.SERVER_REMOVED){  
        System.out.println("Child removed: " + serverNode);  

        Iterator&lt;ShadowClient&gt; iterator = finalShadowClients.iterator();  
        while(iterator.hasNext()) {  
            ShadowClient shadowClient1 = iterator.next();  
            if(serverNode.getIp().equals(shadowClient1.getRemoteIp()) &amp;&amp; serverNode.getPort() == shadowClient1.getRemotePort()) {  
                shadowClient1.close();  
                iterator.remove();  
            }  
        }  
    }
});

</code></pre><p>然後維護這個 List&lt;ShadowClient&gt;表示所有服務器列表的連接的增加和刪除，最後負載均衡從這個 List 裏面獲取連接源發送消息到遠程即可。</p><pre><code class="language-java">    int nextBalance = pollingBalance.getNextBalance();  
    shadowClientGroup.getShadowClients(group).get(nextBalance).writeAndFlush(message).sync();

</code></pre><span id="OSC_h3_11"></span><h3>精簡版 Client</h3><p>剛才的 Client 和 Server 都是使用 Netty 作為異步非阻塞框架搭建的，有的時候對性能要求不高但是對最終的包大小有要求的時候 (比如開發 IDEA 插件最好是 kb 級別的)，我們這裏基於 NIO 來的 Reactor 模式來搭建一套簡單版的 rpc client。</p><p>我們還是參考上面的 client，想服務端發送 Request 消息，下面是對 NIO 的一個簡單封裝 NIOClient</p><pre><code class="language-java">public void connect() throws IOException, ConnectTimeoutException {  
    socketChannel = SocketChannel.open();  
    socketChannel.configureBlocking(false);  
    selector = Selector.open();  
    socketChannel.register(selector, SelectionKey.OP_CONNECT);  

    socketChannel.connect(new InetSocketAddress(host, port));  
    isRunning = true;  

    //reactor 模式  
    this.nioReactor = new NIOReactor(this);  
    nioReactor.start();  

    //等待連接完成  
    try{  
    waitConnection.get(nioConfig.getConnectTimeout(), TimeUnit.MILLISECONDS);  
    } catch (InterruptedException | ExecutionException | TimeoutException e) {  
    isRunning = false;  
    throw new ConnectTimeoutException(String.format("連接服務器%s:%d 超時",host,port));  
    }  
}
    
public MessageSendFuture sendMessage(byte[] bytes) {  
    if(null == bytes || bytes.length == 0) {  
    return null;  
    }  

    ByteBuffer writeBuffer = ByteBuffer.allocate(4 + bytes.length); // 4 bytes for length field  
    writeBuffer.putInt(bytes.length); // Write length of the message  
    writeBuffer.put(bytes); // Write message itself  
    writeBuffer.flip();  

    // Add to write queue  
    MessageSendFuture future = new MessageSendFuture(writeBuffer);  
    writeQueue.add(future);  

    // Change interest to OP_WRITE  
    SelectionKey key = socketChannel.keyFor(selector);  
    if(!key.isValid()) {  
    return null;  
    }  
    key.interestOps(SelectionKey.OP_WRITE);  
    selector.wakeup();  

    return future;  
}

</code></pre><p>這裏寫入消息 sendMessage 的時候，也是先寫入長度 4 字節 bytes.length，再寫入 bytes。</p><p>下面是基於 Reactor 模式實現對連接消息，讀寫消息的統一處理</p><pre><code class="language-java">while (nioClient.isRunning()) {  
    try {  
    if (selector.select() &gt; 0) {  
    processSelectedKeys();  
    }  
    } catch (IOException e) {  
    logger.error("selector err",e);  
    }  
}
    
private void processSelectedKeys() throws IOException {  
    Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();  
    Iterator&lt;SelectionKey&gt; iter = selectedKeys.iterator();  

    while (nioClient.isRunning() &amp;&amp; iter.hasNext()) {  
    SelectionKey key = iter.next();  

    if (key.isConnectable()) {  
    handleConnect(key);  
    }  
    if (key.isWritable()) {  
    handleWrite(key);  
    }  
    if (key.isReadable()) {  
    handleRead(key);  
    }  
    iter.remove();  
    }  
}  

</code></pre><p>而對讀消息的拆包和半包處理原理也是和上面一樣的，也是讀取長度 4 字節，再讀取對應長度的字節，如果不夠重置 ByteBuffer 的 position 用於下次讀取,這裏是一個精簡版本</p><pre><code class="language-java">private void handleRead(SelectionKey key) {  
  
    ByteBuffer buffer = readByteBuffer;  

    int numRead = 0;  
    try {  
        numRead = socketChannel.read(buffer);  
    } catch (IOException e) {  
        handleClose(key);  
        return;  
    }  

    if (numRead &gt; 0) {  
        buffer.flip(); // 切換到讀模式  
        // 處理緩衝區中的所有數據  
        while (buffer.remaining() &gt; 4) { // 確保有足夠的數據讀取長度字段  
            buffer.mark();  
            int length = buffer.getInt();  
            //System.out.printf("read length=%d,remain=%d\n",length,buffer.remaining());  

            if (length &lt;= buffer.remaining()) {  
            byte[] data = new byte[length];  
                buffer.get(data);  
                nioClient.getReceiveMessageCallBack().handleMessage(data);  
            } else {  
                // 數據長度不足以構成一個完整的消息，重置並退出循環  
                buffer.reset();  
                break;  
            }  
        }  

        if (buffer.hasRemaining()) {  
            buffer.compact(); // 移動未處理數據到緩衝區開始位置  
        } else {  
            buffer.clear(); // 如果沒有剩餘數據，清空緩衝區  
        }  

        lastActiveTime = System.currentTimeMillis();  

    } else if (numRead &lt; 0) {  
        //接收到-1 表示服務器關閉  
        handleClose(key);  
    }  
}

</code></pre><span id="OSC_h2_12"></span><h2>RPC 框架的使用</h2><p>經過上述酣暢淋漓的 rpc 框架搭建，基本五臟俱全的 rpc 框架 ShadowRPC 就搭建完成了，下面是一些服務例子。</p><span id="OSC_h3_13"></span><h3>定義實體類</h3><pre><code class="language-java">@ShadowEntity
public class MyMessage {
    @ShadowField(1)
    private String content;

    @ShadowField(2)
    private int num;
}

</code></pre><p>如果是 protobuf 方式，可定義描述文件</p><pre><code class="language-proto">message MyMessage {
    string content = 1;
    int32 num = 2;
}

</code></pre><p>然後直接用 maven 插件 protobuf-maven-plugin 生成實體</p><span id="OSC_h3_14"></span><h3>編寫接口和服務類</h3><pre><code class="language-java">@ShadowInterface
public interface IHello {
    String hello(String msg);
    MyMessage say(MyMessage message);
}

</code></pre><p>protobuf 方式的接口需要保證參數和返回類型都是 protobuf 定義的類型</p><pre><code class="language-java">@ShadowInterface
public interface IHelloProto {
    MyMessageProto.MyMessage say(MyMessageProto.MyMessage message);
}

</code></pre><p>然後編寫服務實現類</p><pre><code class="language-java">@ShadowService(serviceName = "helloservice")
public class HelloService implements IHello {
    @Override
    public String hello(String msg) {
        return "Hello,"+msg;
    }
    @Override
    public MyMessage say(MyMessage message) {
        MyMessage message1 = new MyMessage();
        message1.setContent("hello received "+"("+message.getContent()+")");
        message1.setNum(message.getNum()+1);
        return message1;
    }
}

</code></pre><span id="OSC_h3_15"></span><h3>指定序列化類型和端口，啓動服務端</h3><p>單點啓動模式如下:</p><pre><code class="language-java">ServerConfig serverConfig = new ServerConfig();
        serverConfig.setQpsStat(true); //統計 qps
        serverConfig.setPort(2023);

ServerBuilder.newBuilder()
        .serverConfig(serverConfig)
        .addPackage("rpctest.hello")
        .build()
        .start(); 

</code></pre><p>使用 zk 作為集羣模式啓動</p><pre><code class="language-java">String ZK_URL = "localhost:2181";
ServerConfig serverConfig = new ServerConfig();
serverConfig.setGroup("DefaultGroup");
serverConfig.setPort(2023);
serverConfig.setRegistryUrl(ZK_URL);
serverConfig.setQpsStat(true); //統計 qps
serverConfig.setSerializer(SerializerEnum.KRYO.name());
ServerBuilder.newBuilder()
                .serverConfig(serverConfig)
                .addPackage("rpctest.hello")
                .build()
                .start();

</code></pre><span id="OSC_h3_16"></span><h3>客戶端調用 rpc 服務</h3><pre><code class="language-java">ModulePool.getModule(ClientModule.class).init(new ClientConfig());

ShadowClient shadowClient = new ShadowClient("127.0.0.1",2023);
shadowClient.init();

IHello helloService = shadowClient.createRemoteProxy(IHello.class,"shadowrpc://DefaultGroup/helloservice");

logger.info("發送 hello 消息");
String helloResponse = helloService.hello("Tom");
logger.info("hello 服務端響應:"+helloResponse);

MyMessage message = new MyMessage();
message.setNum(100);
message.setContent("Hello, Server!");

System.out.printf("發送請求 : %s\n",message);
MyMessage response = helloService.say(message);
System.out.printf("接收服務端消息 : %s\n",response);    

</code></pre><p>使用 zk 作為服務發現負載均衡調用各個服務器</p><pre><code class="language-java">ClientConfig config = new ClientConfig();
config.setSerializer(SerializerStrategy.KRYO.name());
ModulePool.getModule(ClientModule.class).init(config);
String ZK_URL="localhost:2181";
ShadowClientGroup shadowClientGroup = new ShadowClientGroup(ZK_URL);
shadowClientGroup.init();

IHello helloService = shadowClientGroup.createRemoteProxy(IHello.class, "shadowrpc://DefaultGroup/helloservice");
List&lt;ShadowClient&gt; shadowClientList = shadowClientGroup.getShadowClients("DefaultGroup");

System.out.println("所有服務器: "+shadowClientList.stream().map(c-&gt; c.getRemoteIp()+":"+c.getRemotePort()).collect(Collectors.toList()));

for(int i = 0 ;i&lt;shadowClientList.size() * 5; i++) {
    String hello = helloService.hello(i + "");
    System.out.println(hello);
}

</code></pre><span id="OSC_h2_17"></span><h2>性能測試</h2><p>目前 Mac 筆記本 16G 4 核測試的 rpc 調用 hello 邏輯，如果使用 kryo 序列化/反序列化，100w 個請求耗時 27 秒，平均 QPS 為 3.7w，如果使用 protobuf 序列化/反序列化耗時 25 秒, 平均 QPS 為 4w，如果用 M1 芯片的 Mac，平均 QPS 可以達到 7W+，最高 QPS 可以達到 10w+。</p><span id="OSC_h2_18"></span><h2>源碼</h2><p>篇幅有限，介紹的時候不夠完整有些遺漏，所有源碼見: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLiubsyy%2FShadowRPC" target="_blank">https://github.com/Liubsyy/ShadowRPC</a><br> 目前僅供學習交流使用，後續我將逐步打磨此 rpc 框架達到企業級水準。</p><blockquote><p>本 RPC 框架使用的方案和技術棧都是業界通用，項目中部分源碼如有雷同純屬巧合。</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 07:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3276866/blog/10993751</guid>
            <link>https://my.oschina.net/u/3276866/blog/10993751</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[VS Code 1.86 會導致遠程開發功能無法使用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Visual Studio Code 今日發佈的最新版 <u><a href="https://www.oschina.net/news/277414/vs-code-1-86-released">1.86</a></u><span>&nbsp;引入一項嚴重的破壞性變化，其</span>遠程開發服務器工具鏈<span>最低環境要求的&nbsp;</span>glibc 版本提升為 2.28。</p><p>由於&nbsp;Ubuntu 18.04 LTS 使用 glibc 2.27，因此有開發者發現自己升級到 VS Code 新版本後，使用 Remote SSH 無法連接到遠程機器。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7159057b7f201b731192ad420804af1891b.png" referrerpolicy="no-referrer"></p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv2ex.com%2Ft%2F1013590" target="_blank">https://v2ex.com/t/1013590</a></em></u></p></blockquote><p>對於該問題，目前的解決方案有兩種：</p><ul><li><strong>根據對應的發行版，升級至 Ubuntu 20.04 LTS、Debian 10 或 RHEL 8</strong></li><li><strong>降級到 VS Code 1.85</strong></li></ul><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-cd7781af0c011f485dda9a5d8b8df221d79.png" referrerpolicy="no-referrer"></p></blockquote><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Fremote%2Ffaq%23_can-i-run-vs-code-server-on-older-linux-distributions" target="_blank">詳情查看官方 FAQ</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 06:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277439/vscode-1-86-drops-ubuntu-18-04</guid>
            <link>https://www.oschina.net/news/277439/vscode-1-86-drops-ubuntu-18-04</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CPU vs GPU：不僅僅是一字之差]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>當今科學技術的飛速發展，社會已經邁入了信息時代的智能化階段。人臉識別、智能客服、個性化推薦等應用已經深入到日常生活的各個方面。這些看得見的應用背後，是看不見的算力在默默地支撐着。在滿足這些高算力需求的過程中，CPU 和 GPU 作為計算機的核心組件發揮着重要的承載作用。那麼，CPU 和 GPU 到底是什麼？它們又有什麼區別？</p><p>隨着數據成為五大生產要素之一，算力的作用變得愈發重要。算力即計算能力（Computing Power），更具體來説，<strong>算力是指數據中心的服務器通過對數據進行處理後實現結果輸出的一種能力。</strong></p><p>算力的概念起源於計算機的發明初期。最早的計算機是由機械裝置完成計算任務，而算力指的就是這些機械裝置的計算能力。隨後，半導體技術的出現和發展，集成電路問世，開啓了芯片時代。計算機在芯片的加持下，功能越來越強大，體積也越來越小，最終誕生了個人計算機（PC），成為人類最重要的算力工具。</p><p>而後人工智能和大數據技術的迅猛發展也帶動了算力需求的飛速增長。無論是訓練複雜的神經網絡模型，還是進行大規模數據分析和處理，算力都扮演着至關重要的角色。如今，<strong>芯片已經成為算力的主要載體</strong>。當我們談論算力時，實際上是在討論 CPU 和 GPU 等芯片的計算能力。在計算機科學領域，CPU 和 GPU 作為計算機的核心組件，雖然名字只有「一字之差」，但其結構和功能卻大不相同。</p><span id="OSC_h1_1"></span><h1><strong>1 CPU vs GPU: 概念</strong></h1><p><strong>CPU（Central Processing Unit），即中央處理器</strong>，是電腦、手機等眾多電子產品的「心臟」。在我們日常生活的諸多場景中，如觀看視頻、玩遊戲、聊天互動等，<strong>CPU 發揮着統一指揮和調度的關鍵作用</strong>。它主要負責執行程序指令、進行算術和邏輯運算以及控制和協調計算機各個部件。</p><p>為了滿足處理各種不同數據的強大通用性能，CPU 的內部結構設計非常複雜。CPU 由多個核心組成，每個核心又包含算術邏輯單元、控制單元和高速緩存等組件，並且可以獨立地執行任務。至今為止，所有的 CPU 都遵循馮·諾依曼體系結構的基本工作流程：取指令，指令譯碼，執行指令，數據回寫，然後再取下一個指令、譯碼、執行、回寫，重複進行直到程序結束。通過這種工作流程，CPU 能夠有效地執行程序，並控制整個系統的運行。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-10e85bcb595265cd760feadac4d6ff9b532.png" referrerpolicy="no-referrer"></p><p style="text-align:center">CPU 工作流程</p><p>然而，隨着計算機的普及，人們對圖形顯示的要求不斷提高，例如在進行復雜的三維建模時，需要處理大量的圖形數據以呈現逼真的效果；在玩大型遊戲時，要求系統能夠處理高分辨率的畫面和複雜的遊戲場景。儘管 CPU 內部採用了各種方法來加速指令執行，但隨着任務的增多，CPU 的性能顯得有些力不從心。</p><p>面對這個問題，能否考慮增加更多的 CPU 來解決呢？這固然是一種思路，但這涉及到相當高的成本，並且堆疊數量也不能保證完全解決計算能力不足的問題。這時候聰明的開發者就提出了一個更巧妙的解決方案：既然 CPU 的計算能力有限，為什麼不將計算單元堆疊在同一塊芯片上，讓它們處理大量運算的任務呢？於是，GPU 誕生了。</p><p><strong>GPU（Graphics Processing Unit），即圖形處理器，</strong> 顧名思義，一種專門用來處理圖形和圖像計算的處理器。<strong>GPU 最初是為圖形渲染和顯示而設計的，用於加速計算機中圖像的處理</strong>，例如在視頻遊戲、電影渲染、圖形設計等方面。它只有少量的控制單元和緩存單元，絕大部分的空間用來堆放運算單元，主要負責完成許多計算密集型任務。</p><span id="OSC_h1_2"></span><h1><strong>2 CPU vs GPU: 「差」在哪裏？</strong></h1><p>通過引入 GPU，計算機系統可以充分利用其強大的並行計算能力，加速圖形和圖像相關的計算任務。CPU 負責邏輯任務，而 GPU 來處理大量簡單重複的計算任務，這種不同類型的任務分配給不同類型的處理器的模式，大大提高了系統性能。那麼，CPU 和 GPU 到底「差」在哪裏呢？</p><p><strong>2.1 架構組成</strong></p><p>CPU 和 GPU 之間存在顯著差異，是因為它們各自針對不同的目標和需求來設計，具體體現在：</p><ul><li><p>CPU 需要有強大的通用性，以處理各種不同類型的數據，同時需要進行邏輯判斷，包括大量的分支跳轉和中斷處理，這導致內部結構異常複雜。</p></li><li><p>GPU 主要面向類型高度統一、相互無依賴的大規模數據，並在純淨的計算環境中執行，因此不需要處理複雜的邏輯操作。</p></li></ul><p>這就導致了 CPU 和 GPU 呈現出非常不同的架構：</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8aa6a52075b93619752a89167782aee5119.png" referrerpolicy="no-referrer"></p><p style="text-align:center">CPU 基本架構</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-c3ccf2310c31a2e6354388180ec4615ba97.png" referrerpolicy="no-referrer"></p><p style="text-align:center">GPU 基本架構</p><p>CPU 擁有較大的緩存單元以及複雜的邏輯控制單元，相比之下計算能力只是 CPU 很小的一部分。而 GPU 則擁有數量眾多的計算單元和超長的流水線，但只有非常簡單的邏輯控制以及較小的緩存單元。</p><p><strong>2.2 設計理念</strong></p><p>CPU 和 GPU 的設計理念也截然不同。首先，<strong>CPU 是基於低延遲（Low Latency）設計的</strong>：</p><ul><li><p><strong>強大的運算單元：</strong> CPU 擁有數量較少但是單個計算性能更強的運算單元，可以減少操作延時，更快地響應。</p></li><li><p><strong>大容量緩存：</strong> 將一部分數據存儲到高速緩存當中，使得高延遲的內存訪問轉換為低延遲的緩存訪問。</p></li><li><p><strong>複雜的控制單元：</strong> 分支預測（Branch Prediction）機制可以降低分支延時；數據轉發（Data Forwarding）機制降低數據延時。</p></li></ul><p>而&nbsp;<strong>GPU 則是基於高通量（High Throughput）設計的</strong>：</p><ul><li><p><strong>精簡的運算單元：</strong> GPU 擁有大量的運算單元，雖然單個單元的性能比不上 CPU，但可以支持非常多的線程（Thread）從而達到非常大的吞吐量。</p></li><li><p><strong>小容量緩存：</strong> 與 CPU 不同，GPU 緩存的目的並不是用來存儲後面需要訪問的數據，而是為線程提供服務，如果有很多線程需要訪問同一個相同的數據，緩存會合並這些訪問，然後再去訪問內存。</p></li><li><p><strong>簡單的控制單元：</strong> GPU 的控制單元沒有分支預測和數據轉發機制。</p></li></ul><p>總的來説，CPU 擁有數量相對少（一般不超過兩位數）但能力更強的核心，能夠更快地處理單個任務，因而它尤其適合處理串行任務和邏輯控制等類型的工作。相比之下，GPU 擁有成百上千核，雖然每個核心運算能力較低，但可以將複雜任務分解成非常多的子任務再並行處理。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9572c4d616cb11ca84427a84df0d2e95c1d.png" referrerpolicy="no-referrer"></p><p style="text-align:center">串行處理過程</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-d325166b8458a82bfd616ed21119309a3aa.png" referrerpolicy="no-referrer"></p><p style="text-align:center">並行處理過程</p><p><strong>2.3 適用場景</strong></p><p>CPU 與 GPU 二者的設計目的並不一樣，因而適用的場景也截然不同。<strong>CPU 更擅長一次處理一項任務，而 GPU 則可以同時處理多項任務。</strong></p><p>用一個形象的比喻來解釋。CPU 就像是一架高速飛機，而 GPU 則相當於一隊貨櫃船。它們的任務是將大量貨物從 A 位置迅速運送到 B 位置。雖然 CPU（飛機）速度非常快，但每次只能攜帶少量的貨物，需要多次往返才能完成任務。相比之下，GPU（貨櫃船）雖然單次執行速度相對較慢，但通過協同工作，每艘都能同時攜帶一部分貨物，最終以集體的力量高效完成運輸任務。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b63aae29f97580397fb69a6ed0ae951f0e5.png" referrerpolicy="no-referrer"></p><p style="text-align:center">CPU 與 GPU 處理任務對比</p><p>因此，雖然 CPU 單次執行任務的時間更快，但是在需要大量重複工作負載時，GPU 優勢就越顯著。而當遇到前後計算步驟嚴密關聯的計算場景，這些任務涉及到「流」的問題，必須先計算完第一步，再去計算第二步。或是需要進行大量邏輯判斷和複雜計算的任務，比如運行操作系統、處理日常辦公任務、進行單線程編程等。這種時候，使用 GPU 的效率反而沒有 CPU 高。</p><p>綜上所述，CPU 是個集各種運算能力的大成者。它的優點在於調度、管理、協調能力強，並且可以做複雜的邏輯運算，但由於運算單元和內核較少，只適合做相對少量的運算。GPU 無法單獨工作，它相當於一大羣接受 CPU 調度的流水線員工，適合做大量的簡單運算。<strong>CPU 和 GPU 在功能上各有所長，互補不足，通過相互配合使用，實現最佳的計算性能</strong>。</p><p>因此，雖然 CPU 單次執行任務的時間更快，但是在需要大量重複工作負載時，GPU 優勢就越顯著。而當遇到前後計算步驟嚴密關聯的計算場景，這些任務涉及到「流」的問題，必須先計算完第一步，再去計算第二步。或是需要進行大量邏輯判斷和複雜計算的任務，比如運行操作系統、處理日常辦公任務、進行單線程編程等。這種時候，使用 GPU 的效率反而沒有 CPU 高。</p><p>綜上所述，CPU 是個集各種運算能力的大成者。它的優點在於調度、管理、協調能力強，並且可以做複雜的邏輯運算，但由於運算單元和內核較少，只適合做相對少量的運算。GPU 無法單獨工作，它相當於一大羣接受 CPU 調度的流水線員工，適合做大量的簡單運算。<strong>CPU 和 GPU 在功能上各有所長，互補不足，通過相互配合使用，實現最佳的計算性能</strong>。</p><span id="OSC_h1_3"></span><h1><strong>3 CPU vs GPU: 演進與發展</strong></h1><p>技術的不斷更新推動着計算機領域的快速發展，而在這個不斷演進的過程中，CPU 和 GPU 也在持續發展。在過去的幾十年裏它們在各自的領域取得了顯著的突破，為計算機應用提供了更高的性能和效率。這不僅推動了數字化時代信息技術的發展，也為各個領域帶來了新的可能性。</p><p><strong>3.1 揚長避短，穩步前進</strong></p><p>CPU 擁有強大的指令處理和計算能力（這裏強大的計算能力是指 CPU 可以勝任更復雜的計算任務），通常用於處理計算機的核心工作，包括解釋計算機指令和處理計算機軟件中的數據。例如我們在使用個人計算機時，用戶和各種軟件會不斷地產生指令流，CPU 要完成的一個重要工作就是負責處理這些指令，保證它們按照規定的順序執行。此外，CPU 還要負責處理計算機軟件所產生的類型多樣且邏輯複雜的數據。</p><p>距離第一塊 CPU 4004 的誕生已經過去了五十多年，儘管與早期相比，CPU 在物理形態、設計製造和具體任務的執行上有了極大的發展，但是其基本的操作原理一直沒有改變。換句話來説 <strong>，CPU 的功能和使用場景並沒有發生較大的改變，無非是在能耗、性能以及可靠性上面不斷地優化。</strong></p><p><strong>3.2 GPU 加速應用遍地開花</strong></p><p>3.2.1 從 GPU 到 GPGPU</p><p>GPU 的概念在 1999 年 NVIDIA 公司發佈 GeForce 256 時被首次提出， 在早期，GPU 主要用於 3D 圖形渲染。但與 CPU 不同，隨着 GPU 的功能和運算能力越來越強大，開發者開始探索除了圖形處理之外，GPU 還能做什麼？</p><p>在 2003 年，NVIDIA 推出新產品 GeForce 8800 GTX 時，首次提出了 GPGPU（General-purpose computing on Graphics Processing Unit）的概念，即通用圖形處理器，意指利用 GPU 的計算能力，在非圖形處理領域進行更通用、更廣泛的計算。</p><p>到了 2007 年，NVIDIA 進一步提出了名為 CUDA（Compute Unified Device Architecture，計算統一設備架構）的全新技術，利用該技術可以通過 NVIDIA 的 GPU 進行圖像處理之外的計算任務，它揭開了 GPU 計算革命序幕。隨後，蘋果公司也推出了類似的技術：OpenCL（Open Computing Language），<span style="background-color:#ffffff; color:#202122">並在與 AMD</span><span style="background-color:#ffffff; color:#202122">，IBM</span><span style="background-color:#ffffff; color:#202122">，Intel&nbsp;</span><span style="background-color:#ffffff; color:#202122">和 NVIDIA&nbsp;</span><span style="background-color:#ffffff; color:#202122">技術團隊的合作之下初步完善。</span>OpenCL 是一個開放的、跨平台的並行計算框架，允許開發人員在不同的硬件平台（CPU、GPU、FPAG 等）上進行開發。</p><p>自此以後，<strong>GPU 不再以圖形的 3D 加速為唯一目的，而是能夠廣泛應用於各領域的通用計算加速，尤其是科學計算、大數據分析以及人工智能等領域。</strong></p><p>3.2.2 大模型與向量數據庫</p><p>當今互聯網世界所需的計算能力遠遠超出任何人的想象，並且只會隨着人工智能的興起而增加。以如今爆火的生成式 AI ChatGPT 為代表，大小為 175B 的 GPT-3 使用了 1024 張 A100 GPU 訓練了約 34 天，隨着參數數量的增加，往後 AI 需要的算力資源更是天文數字。</p><p>大模型同樣引發了數據庫領域的革命，此前不溫不火的向量數據庫搭上了這輛順風車，一舉成為 AI 時代的新寵。在 2023 英偉達 GTC AI 開發者大會中，NVIDIA CEO 黃仁勳首次提及向量數據庫，並強調<strong>對於構建專有大模型的組織而言，向量數據庫至關重要。</strong></p><p>對於 AI 來説，向量是它理解世界的通用數據形式，不管是圖片、視頻、音頻，都可以通過轉換成向量來讓 AI 識別，<strong>向量數據庫作為專門對向量進行檢索和存儲的工具，能為大模型的應用落地解決諸如「沒有長期記憶」、「幻覺」、「知識更新不及時」等問題。</strong></p><p>但是，向量數據庫本身的性能也是一個問題，説到底與大模型的結合只是其應用的一部分，它本質上還是一個數據搜索和分析的工具，如果性能滿足不了用戶需求，同樣也會被淘汰。於是乎，開發者們又想起了 GPU。</p><p>在向量數據庫中，最核心的功能在於向量相似性搜索，即在一個海量的數據中找到和某個向量最相似的向量，它的計算量十分龐大，而這恰好是 GPU 所擅長的，<strong>利用 GPU 的並行計算能力可以加速向量相似性搜索，顯著提高查詢速度，降低延遲。</strong></p><span id="OSC_h1_4"></span><h1><strong>4 雲原生向量數據庫 PieCloudVector 支持 GPU 加速</strong></h1><p>拓數派大模型數據計算系統 πDataCS 三大數據計算引擎之一：<a href="https://my.oschina.net/u/5944765/blog/10321799"><em>向量數據庫 PieCloudVector</em></a>，是大模型時代的分析型數據庫升維，目標是助力多模態大模型 AI 應用，進一步實現海量向量數據存儲與高效查詢。PieCloudVector 支持和配合大模型的 Embeddings，幫助基礎模型在場景 AI 的快速適配和二次開發，是大模型必備應用。</p><p><strong>PieCloudVector 充分利用現代化硬件能力，支持 GPU 加速功能。</strong> 這一特性讓 PieCloudVector 能夠利用 GPU 的並行計算能力來加速向量計算和數據處理任務，顯著縮短任務的執行時間，提高計算效率，幫助用戶更高效地進行數據計算。特別是在需要處理大規模數據集或進行復雜的數值運算時，GPU 加速可以大幅提升計算性能。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 05:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5944765/blog/11020020</guid>
            <link>https://my.oschina.net/u/5944765/blog/11020020</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[社區月報丨 2024 年 1 月，多款應用迎更新，還有 deepin Meetup 的初次相見和久別重逢！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>內容來源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-community-monthly-report-2024-01%2F" target="_blank">deepin 社區</a></p><hr><h1><strong>deepin（深度）社區 1 月總覽</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月，有<strong>975</strong>位小夥伴加入了 deepin 開源社區大家庭，目前共有論壇夥伴<strong>151,007</strong>位；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 1 月，2024 年第一場 deepin Meetup 在北京正式舉辦，同時 deepin（深度）社區舉辦的龍年春節壁紙大賽也完美落下帷幕；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">1 月 deepin SIG 組共提交 PR 1116 個 ，提交 Issues 294 個，當前共有 SIG 組 40 個。</p><h1><strong>社區產品</strong></h1><h2><strong>深度之家</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月，深度之家共收到用戶需求反饋及 bug166 條：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">當中 bug 反饋 126 個，需求反饋 40 個，已修復/確認 16 個，包括用戶反饋的【玲瓏卸載應用命令，第一次執行會報錯，再執行一次才能卸載成功】、【微信更新後登陸不了】等問題；</p><h2><strong>SIG 組 1 月進展</strong></h2><ol><li><strong>DDE SIG:</strong></li></ol><ul><li>DDE-launchpad 脫離技術預覽階段，DDE-shell、Treeland、DDM 進入技術預覽階段</li></ul><ol><li><strong>dde-port SIG:</strong></li></ol><ul><li>持續推進 DDE 在各個發行版的移植</li><li>BigLinux 發行版下的 DDE v23 初步支持</li></ul><ol><li><strong>deepin-sysdev-team：</strong></li></ol><ul><li>持續進行系統倉庫的打包與維護工作</li></ul><ol><li><strong>deepin-cicd-team:</strong></li></ol><ul><li>持續完善自動化流水線的智能程度</li></ul><ol><li><strong>deepin-ThemeDesign：</strong></li></ol><ul><li>已開始製作 deepin 適用壁紙，並嚮應用商店投遞中</li></ul><h1><strong>應用商店</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img alt="" src="https://bbs.deepin.org/uploader/f/TQNIvpoxovcuW4fP.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE3MDY3ODA2OTEsImZpbGVHVUlEIjoiOE5rNk13Nk1EV0ZHendxTCIsImlhdCI6MTcwNjc4MDA5MSwidXNlcklkIjoxMDMxM30.ArE7u7SqsjnfBy4BwVNK3_zpcWgZNnqqlvwLaBhFwsI" referrerpolicy="no-referrer">應用上新 100 款 ：上新應用中，99 款應用同步上新至 deepin V23，99 款應用為 Linux 應用，1 款 Wine 應用；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">上新應用中包括中望 3D 2024、OpenTrace 等多款主流應用；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">應用更新 124 款 ：更新應用中，80 款應用同步在 deepin V23 中更新。其中 113 款為 Linux 應用，Android 應用 7 款，Wine 應用 4 款；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">1 月更新的應用當中包括 QQ、墨刀、有道雲筆記等主流應用。</p><h1><strong>deepin 論壇</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">1 月 deepin 論壇共發佈了<strong>8803</strong>帖子；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">共發佈主題帖<strong>1092</strong>個；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">超過 900 + 新朋友加入到 deepin 論壇。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">當中，最受論壇用戶歡迎的帖子 top5 為：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>1.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267681" target="_blank">關於 deepin-V23 beta3 新版本的體驗，及個人看法</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>2</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267289" target="_blank">.大家對文件管理器有什麼不滿嗎？</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>3.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267297" target="_blank">V23 任務欄改進建議，集中反饋貼！</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>4.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267665" target="_blank">真的不要再高仿了，越來越刷新對國產自主能力的認知！</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>5.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267231" target="_blank">揭祕 deepin V23 Beta3！deepin Meetup · 2024 北京，出發！</a></p><h1><strong>社區活動</strong></h1><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwelcome-to-whlug%2F" target="_blank"><strong>【WHLUG】</strong></a></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月 20 日下午，由 deepin（深度）社區聯合 Linux 中國、龍蜥社區（OpenAnolis）、華中科技大學網絡空間安全學院開源俱樂部一起舉辦的 Linux 愛好者線下沙龍活動（WHLUG）在武漢未來科技城成功舉辦。沙龍邀請了武漢地區的 Linux 愛好者，共同探討玲瓏、容器技術、Linux 內核、開源參與、高性能網絡等話題，現場氣氛熱烈。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="image.png" src="https://storage.deepin.org/thread/202402010937419026_image.png" referrerpolicy="no-referrer"></p><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-meetup%2F" target="_blank"><strong>deepin Meetup（北京站）</strong></a></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月 27 日，deepin Meetup（北京站）成功舉辦，40 餘名用戶參與。本次活動帶大家回顧 deepin（深度）社區的發展歷史，展示了社區部分明星產品及技術成果，並提前揭祕了 deepin V23 Beta3 的部分新增功能，如啓動器重構、UOS AI 預裝、新增低電閾值設置功能、支持了 Steam 原生應用的安裝等。各位 deepiner 線下相聚，昔日網友揭開神祕面紗，共同探討最新產品進展、分享使用心得、實操經驗，大家也對 deepin 未來發展提出了諸多寶貴意見，現場氛圍熱烈。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="image.png" src="https://storage.deepin.org/thread/202402010938049219_image.png" referrerpolicy="no-referrer"></p><h2><strong>deepin（深度）社區春節壁紙大賽</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 2024 年春節來臨之際，國產操作系統「統信 UOS」及 deepin（深度）社區聯合舉辦全新一期壁紙創作大賽，面向所有對電腦操作系統個性美化感興趣的設計師，徵集壁紙作品，展示心中的獨特的「中國龍年」。活動已圓滿結束，總計收到有效作品數 90 份（156 張圖片），通過社區投遞系統上架壁紙作品包共計 75 個，參賽人數 23 人（其中 4 位設計師、2 位老師、8 位學生），大眾評委環節評分 300 次，參與人數 148 人。目前所有成功投稿的作品都已上架應用商店，可在應用商店中搜索【龍年壁紙】，安裝使用。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="image.png" src="https://storage.deepin.org/thread/202402010938569200_image.png" referrerpolicy="no-referrer"></p><p style="text-align:center">參賽作品：古韻新繹，「龍」光煥發</p><p style="text-align:center">設計師：MC 李狗蛋</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><h1><strong>社區鳴謝</strong></h1><h2><strong>【論壇最活躍小夥伴】</strong></h2><ul><li>阿尼櫻奈奈</li><li>buyike</li><li>晚秋（lateautumn）</li></ul><h2><strong>【內測最活躍小夥伴】</strong></h2><ul><li>煙霞志</li><li>e*t@gmail.c<strong>o</strong>m**</li><li>jiutian123</li></ul><h2><strong>【PR 貢獻最活躍小夥伴】</strong></h2><ul><li>Zeno-sole</li><li>UTsweetyfish</li><li>Decodetalkers</li><li>xzl01</li><li>18202781743</li><li>liyigang1</li><li>tsic404</li></ul><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>每個貢獻者都對深度開源社區的發展產生了巨大的影響，歡迎與我們同心協力，揚起 deepin 的桅杆！</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 05:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277431</guid>
            <link>https://www.oschina.net/news/277431</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Visual Studio Code 1.86 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Visual Studio Code 1.86 現已發佈，具體更新內容如下：</span></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_configure-zoom-levels-per-window" target="_blank">每個窗口的縮放級別</a>&nbsp;</strong>- 獨立調整每個窗口的縮放級別。</li></ul><p>默認情況下啓用的新設置 window.zoomPerWindow，可讓你配置縮放命令（放大、縮小、重置縮放），使其僅適用於活動窗口，而不適用於所有打開的窗口。</p><p><img height="243" src="https://oscimg.oschina.net/oscnet/up-f14b102590ab5aac409ad79a294e72514fe.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_accessibility" target="_blank">Hey Code 語音命令</a>&nbsp;</strong>- 使用語音命令啓動聊天會話。</li></ul><p>通過新的 accessibility.voice.keywordActivation 設置，你可以讓 VS Code 聽取"Hey Code"語音命令來啓動與 Copilot Chat 的語音會話。</p><p><img height="339" src="https://oscimg.oschina.net/oscnet/up-55edb93355df5d67344a7315bfb4fb21545.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_review-multiple-files-in-diff-editor" target="_blank">多文件差異編輯器</a>&nbsp;</strong>- 在差異編輯器中快速查看多個文件的差異。</li></ul><p>目前，多文件差異編輯器可用於查看本地變更、階段性變更、傳入/傳出變更、匿名變更以及來自拉取請求的變更。</p><p><img height="327" src="https://oscimg.oschina.net/oscnet/up-55d5b425a59b3942a58a11d969df093a76b.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_triggered-breakpoints" target="_blank">Triggered breakpoints</a>&nbsp;</strong>- 通過斷點依賴性進行高效調試。</li></ul><p><img height="320" src="https://oscimg.oschina.net/oscnet/up-513a8e67dc7d292258c20999360511d371e.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_sticky-scroll-in-tree-views" target="_blank">擴展 Sticky Scroll 支持</a>&nbsp;</strong>- tree views 和 notebooks 中的 Sticky Scroll。</li></ul><p><span style="background-color:#ffffff; color:#242424">為了確保 </span>Sticky Scroll&nbsp;<span style="background-color:#ffffff; color:#242424">不會佔用太多空間，它最多限制為視圖高度的 40%。</span></p><p><img height="325" src="https://oscimg.oschina.net/oscnet/up-b3cfb095462ff8efb6922e8a901ac07c040.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_languages" target="_blank">Markdown 粘貼選項</a>&nbsp;</strong>- 為鏈接、視頻和音頻元素提供豐富的粘貼支持。</li></ul><p><img height="245" src="https://oscimg.oschina.net/oscnet/up-3e9b77e9e2180d1e43283bf455ba0b6cd6a.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_more-powerful-and-flexible-auto-save-options" target="_blank">靈活的自動保存選項</a>&nbsp;</strong>- 出現錯誤時跳過自動保存或僅保存特定文件類型。</li></ul><p><img height="393" src="https://oscimg.oschina.net/oscnet/up-f97270ad9b2b761bb00c5e5863a1c284446.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_source-control" target="_blank">Source Control input</a>&nbsp;</strong>- 自定義提交輸入和每種語言的編輯器設置。</li><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_allow-disabling-notifications-per-extension" target="_blank">擴展通知</a>&nbsp;</strong>- 精細控制每個擴展的通知禁用。</li></ul><p><img height="132" src="https://oscimg.oschina.net/oscnet/up-0c9036ad03b6d255ad53f2958993d3a1922.png" width="500" referrerpolicy="no-referrer"></p><p><img height="152" src="https://oscimg.oschina.net/oscnet/up-3cf588072c8fdf708e70b071884ad4ae046.png" width="500" referrerpolicy="no-referrer"></p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86%23_github-copilot" target="_blank">GitHub Copilot 更新</a>&nbsp;</strong>- 改進了默認上下文、添加文件作為上下文、AI 修復。</li></ul><p><img alt="" height="287" src="https://oscimg.oschina.net/oscnet/up-12dc52365310940dd5acfe69790fbe60984.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">更多詳情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fupdates%2Fv1_86" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 03:33:09 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277414/vs-code-1-86-released</guid>
            <link>https://www.oschina.net/news/277414/vs-code-1-86-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源日報：「Linux 中國」 開源社區宣佈停止運營；小紅書開源「InstantID」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>歡迎閲讀 OSCHINA 編輯部出品的開源日報，每天更新一期。</p><p><strong># 2024.2.1</strong></p><h2><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日要點</span></span></span></span></span></span></h2><p style="text-align:justify"><strong>OpenSource Daily</strong></p><h3><u><a href="https://www.oschina.net/news/277235/java-proposal-scrap-sunmiscunsafe-memory-access" target="_blank">Java 提案計劃棄用 sun.misc.Unsafe 中的內存訪問</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">OpenJDK 社區中一個名為 「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F8323072" target="_blank">Deprecate Memory-Access Methods in sun.misc.Unsafe for Removal</a>」 的 JEP 草案提出，建議棄用 sun.misc.Unsafe 中的內存訪問方法，以便在未來的 Java 版本中將其進行刪除。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">sun.misc.Unsafe 類於 2002 年引入，是 JDK 中 Java 類執行低級操作的一種方法，距今已有 20 多年的歷史。在該類的 87 個方法中，有 79 個用於內存訪問。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="281" src="https://oscimg.oschina.net/oscnet/up-e6847ab49a09af3d783ef2fd5ae0f2b4b87.png" width="500" referrerpolicy="no-referrer"></p><p>提案的目標包括為在未來的 JDK 版本中移除 sun.misc.Unsafe 中的內存訪問方法做好準備，以及幫助開發人員瞭解他們的應用程序何時直接或間接依賴 sun.misc.Unsafe 中的內存訪問方法。但它並不旨在完全刪除 sun.misc.Unsafe 類，因為該類中的少量方法不用於內存訪問，所以將會保持不被棄用；它們的廢棄和移除將單獨進行。</p><h3><u><a href="https://www.oschina.net/news/277253" target="_blank">字節跳動 2 個雲原生開源項目進入 CNCF 雲原生全景圖</a></u></h3><p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"><span style="color:#3e3e3e"><span>近日，字節跳動 2 個雲原生開源項目<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDMzNjkxNw%3D%3D%26mid%3D2247484922%26idx%3D1%26sn%3Dfb8922282b6215f28f69a3d9e23fa855%26chksm%3Dc3277c80f450f596fa53c910a75c38e3c22ff864782ec626a0a9842be736dd8ea006d0f2f6b8%26scene%3D21%23wechat_redirect" target="_blank"><strong>Katalyst</strong></a></span><span>&nbsp;</span><span style="color:#3e3e3e"><span>和<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDMzNjkxNw%3D%3D%26mid%3D2247485243%26idx%3D1%26sn%3D5f39a6597498268c6c965554b12a6849%26chksm%3Dc3277e41f450f75780babf0767f45ea712c1cf59f8b9c7f6d2b48809bb4158648d7c357a76a6%26scene%3D21%23wechat_redirect" target="_blank"><strong>KubeAdmiral</strong></a></span><span style="color:#3e3e3e">&nbsp;陸續進入&nbsp;CNCF 雲原生全景圖，均被收錄在<span>&nbsp;</span></span><span style="color:#0080ff"><em>Orchestration &amp; Management - Scheduling &amp; Orchestration</em></span><span style="color:#3e3e3e"><span>&nbsp;</span>分類下，成為 CNCF 官方認可生態構建工具中的一部分。</span></p><p style="color:#222222; margin-left:8px; margin-right:8px; text-align:justify"><img src="https://oscimg.oschina.net/oscnet/up-88b912acd053b7736fa52b640c7290716a9.png" referrerpolicy="no-referrer"></p><h3><u><a href="https://www.oschina.net/news/277277" target="_blank">「Linux 中國」 開源社區宣佈停止運營</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#000000">「Linux 中國」 微信公眾號於今日發文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F5a9zTiMn4hwOR5JU3kPzvw" target="_blank">宣佈</a>，從即日起，「Linux 中國」 這個社區，包括它的主網（</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flinux.cn%2F%C2%A0" target="_blank">https://linux.cn/&nbsp;</a><span style="background-color:#ffffff; color:#000000"><span>&nbsp;</span>）、公眾號、視頻號，以及下屬的《硬核觀察》欄目，將無限期停止更新和運營。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img src="https://oscimg.oschina.net/oscnet/up-6e3343217de4d5b35d0b43dfd79e9b69d6d.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日觀察</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-5f39b0daf9aacc34cdab04840e2ca4a55c5.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-c29ed5dd0eff8177570b890725186aed794.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">媒體觀點</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-2ee8125c079733587845fab4edba43ee6a3.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">每日項目榜</span></span></span></span></span></span></strong></h2><p>GitHub 榜單：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-99809320420fb783478a0b3f9f2c96a3f5f.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4080a984211606c0eef9d3c0508f6e5cba9.png" referrerpolicy="no-referrer"></p><blockquote><h4>在線閲讀完整日報內容，訪問：<strong><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC007%E6%9C%9F.pdf" target="_blank">開源日報第 007 期：「Linux 中國」 開源社區宣佈停止運營</a></u></strong></h4></blockquote><hr><p><strong>往期回顧</strong></p><ul><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC006%E6%9C%9F%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8A%80%E6%9C%AF%E6%A0%88%E4%B8%80%E5%AE%9A%E8%A6%81%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E7%9A%84.pdf" target="_blank">開源日報第 006 期：選擇技術棧一定要選擇開源的</a></u></li><li><a href="http://www.oschina.net/news/277040"><u>開源日報第 005 期：RISC-V 萬兆開源交換機發售；npm 存在大量武林外傳視頻</u></a></li><li><u><a href="https://www.oschina.net/news/276864" target="news">開源日報第 004 期：百度輸入法在候選詞區域植入廣告；大神用 Excel 構建 CPU</a></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 03:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277415</guid>
            <link>https://www.oschina.net/news/277415</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[面壁智能發佈端側大模型「面壁 MiniCPM」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2 月 1 日，面壁智能舉辦新品發佈會，推出了最新的旗艦級多模態大模型「<strong>面壁 MiniCPM</strong>」，參數規模為 20 億，使用了 1TB 精選數據進行訓練。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5755b77c7f59968d93c86bee2afb4c33560.png" referrerpolicy="no-referrer"></p><p>面壁智能 CEO 李大海在發佈會上表示，MiniCPM-2B 在多項主流評測榜單、中英文平均成績均超越了開源的 Mistral-7B，英文榜單的平均分甚至超越了 Falcon-40B、MPT-30B 等百億參數模型。</p><p><img src="https://oscimg.oschina.net/oscnet/up-12e488c7802d900b054d84644fcf4e6bd60.jpg" referrerpolicy="no-referrer"></p><p>所謂「端側大模型」，即模型服務部署在手機、電腦、IoT 設備等本地終端，直接由終端芯片完成推理過程，無需聯網。作為一款端側大模型，MiniCPM 聲稱「<em>跑通國際主流手機品牌與終端 CPU 芯片，老手機也無壓力</em>」，但從吞吐量來看，實際表現或許有待提升。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b925911ce8d8133307958365ac3898b7f95.jpg" referrerpolicy="no-referrer"></p><p><strong>開源地址（內含技術報告）</strong>：</p><ul><li>MiniCPM GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenBMB%2FMiniCPM" target="_blank">https://github.com/OpenBMB/MiniCPM</a></li><li>OmniLMM GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenBMB%2FOmniLMM" target="_blank">https://github.com/OpenBMB/OmniLMM</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 02:58:16 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277407</guid>
            <link>https://www.oschina.net/news/277407</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[禪道 20.0.beta1 發佈啦，重構底層 PHP 和 UI 框架，用戶體驗全面升級]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">大家好，禪道 20.0.beta1 發佈啦，本次發佈主要對用戶界面 (UI) 進行了全新升級，包括：<strong>引入了無感刷新技術</strong>，大幅提升了在系統中的操作流暢度，能夠更加高效地完成任務；<strong>主題配色優化</strong>，能夠根據個人喜好或公司品牌風格進行個性化的界面設置，增強對系統的歸屬感和舒適度；<strong>儀表盤內容升級</strong>，地盤新增產品和項目維度的總覽和工作推進數據，產品儀表盤新增年度和月度推進數據、Bug 和發佈統計數據；<strong>表單頁面新增了簡潔版和完整版的兩種模式切換</strong>，在填寫信息時更加直觀和便捷，提高工作效率。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>禪道 20 版本對代碼進行了大規模重構</strong>，從框架層到業務代碼都進行了大幅改進。禪道作為開源軟件，重構後二次開發更加友好且易於維護，也帶來了<strong>更好的產品性能和更強的安全性</strong>。20 版本主要的重構工作包括：<strong>新的 UI 庫</strong>，禪道 20 版本使用自主開發的 ZUI3 前端框架，無論是交互體驗和開發效率都有質的飛躍；<strong>全新的 ZIN 頁面開發模式</strong>，通過配置的方式按需調用前端組件，實現了頁面的快速開發，大幅提升了開發效率，全新的擴展機制，更方便對頁面進行修改定製；<strong>引入 PHP 的強類型檢查</strong>，大幅減少系統模塊間調用過程中潛在 Bug 的產生；<strong>單元測試用例覆蓋 Model 層的所有 3000+方法</strong>，代碼更健壯；<strong>增加大量註釋，代碼更易讀、</strong>功能描述更清晰； 業務模塊在 MVC 的基礎上增加 zen/tao 兩個層次，<strong>優化了代碼的封裝和組織。</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_aa8293c13dfccae5baf25fdaa2ceb08c.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_aa8293c13dfccae5baf25fdaa2ceb08c.png" referrerpolicy="no-referrer"></a></strong><strong><span>&nbsp;</span></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_b0ab12a695340383f7800437019e03e2.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_b0ab12a695340383f7800437019e03e2.png" referrerpolicy="no-referrer"></a></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_7f83e9718f01355c0ceb329a0c0fa8d1.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_7f83e9718f01355c0ceb329a0c0fa8d1.png" referrerpolicy="no-referrer"></a></strong></p><h2><strong>新增功能點</strong></h2><h3><strong>配色優化：</strong></h3><div><ul><li>系統的主題顏色和對應名稱的優化，「玉煙紫」更名為「萱萱紫」。</li><li>不同狀態的顏色調整、優先級和嚴重程度等顏色的調整。</li></ul></div><h3><strong>其它優化：</strong></h3><ul><li>頂部導航的優化了分組。</li><li>頁面間跳轉的返回邏輯簡化。</li><li>針對 Tab 標籤的頁面，做了收起到處理。</li><li>相關概況頁佈局的調整。</li><li>列表左側模塊樹導航支持拖拽改變模塊樹寬度。</li><li>優化了動態加載的性能。</li><li>增強了部分流程中二次確認的彈窗，避免誤操作。</li><li>完善了系統概念性解釋的註釋説明。</li></ul><h3><strong>儀表盤：</strong></h3><ul><li>數據的展示引用度量項。</li><li>地盤儀表盤歡迎總覽區塊新增待我評審的內容。</li><li>地盤儀表盤新增禪道動態區塊。</li><li>地盤儀表盤新增團隊成就區塊。</li><li>儀表盤新增產品區塊相關統計和項目相關統計。</li><li>產品儀表盤中增加產品統計、產品發佈統計、產品 Bug 統計、產品年度工作量統計、產品月度推進分析。</li><li>產品儀表盤中增加研發需求列表。</li><li>項目儀表盤刪除了項目人力投入區塊、項目總覽區塊。</li><li>儀表盤區塊支持自定義排版佈局，添加區塊以及長短區塊切換的交互優化。</li><li>儀表盤增加可視化圖表的展示。</li></ul><h3><strong>相關表單：</strong></h3><ul><li>核心表單的佈局結構優化（項目集、項目、產品、執行、需求、任務、Bug、用例）。</li><li>複雜表單增加了簡潔版和完整版的切換，也支持將簡潔版收起的更多字段固定在表單中。</li><li>優化了表單中的編輯器。</li></ul><h3><strong>相關列表：</strong></h3><ul><li>項目集區分了產品視角和項目視角。</li><li>產品列表選擇項目集的交互調整。</li><li>用例步驟支持創建三層級，有子層級的父級步驟不可刪除。</li><li>用例步驟的拖拽交互優化。</li></ul><h3><strong>看板：</strong></h3><ul><li>項目集看板拆分了我參與的項目集、其他項目集。</li><li>項目集看板的展示樣式優化（項目集作為區域、產品作為泳道）</li><li>產品看板中拆分了我參與的產品和其他產品。</li><li>產品看板的展示樣式優化。</li></ul><h3><strong>後台：</strong></h3><ul><li>原創建項目的項目代號字段，調整到後台功能開關中，可將代號設置為必填項。</li></ul><h3><strong>文檔：</strong></h3><ul><li>文檔優化 markdown 編輯器</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#333333"><strong>禪道本次發佈數據如下：</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#333333"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_f2b0d295ff39b00659e0e9208481df32.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_f2b0d295ff39b00659e0e9208481df32.png" referrerpolicy="no-referrer"></a></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>本期優化的全部需求和 Bug：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Feasysoft%2Fzentaopms%2Fblob%2Fzentaopms_20.0.beta1%2Fdoc%2FCHANGELOG" target="_blank"><span style="color:#145ccd">請點擊查看</span></a></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>▼儀表盤的佈局和界面優化，<span>地盤新增產品和項目維度的總覽和工作推進數據，產品儀表盤新增年度和月度推進數據、Bug 和發佈統計數據。<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_bc7f7a8b406b9c427908acaab633343b.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_bc7f7a8b406b9c427908acaab633343b.png" referrerpolicy="no-referrer"></a></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>▼項目集列表拆分成項目視角和產品視角</span><span>。</span><span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_86f117256691d9a55e9f8489ad68ee04.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_86f117256691d9a55e9f8489ad68ee04.png" referrerpolicy="no-referrer"></a><span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_8c7522b437d11b376c13ff8f53f8d3ab.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_8c7522b437d11b376c13ff8f53f8d3ab.png" referrerpolicy="no-referrer"></a></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">▼概況頁佈局和界面的優化。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_79d604126e1449955d6a8eb8a5fa738a.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_79d604126e1449955d6a8eb8a5fa738a.png" referrerpolicy="no-referrer"></a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span>▼列表的全面優化，左側模塊樹支持拖拽改變列寬，檢索標籤過多時做了收起到更多的優化。<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_2609d0095a1cd4640432b46f17e9998d.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_2609d0095a1cd4640432b46f17e9998d.png" referrerpolicy="no-referrer"></a></span><span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_acd156c472e2397c3ace1807fdfda38e.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_acd156c472e2397c3ace1807fdfda38e.png" referrerpolicy="no-referrer"></a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">▼核心頁面<span>（</span><span>項目集、項目、產品、執行、需求、任務、Bug、用例</span><span>）</span>的創建表單的排版佈局調整，提供簡潔版和完整版兩種模式切換。<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn.easycorp.cn%2Fweb%2Fdata%2Fupload%2Feasycorp%2F202402%2Ff_7804f3500a575da7d5b24cbd3a077d66.png" target="_blank"><img alt="" src="https://cdn.easycorp.cn/web/data/upload/easycorp/202402/f_7804f3500a575da7d5b24cbd3a077d66.png" referrerpolicy="no-referrer"></a></p><h2><strong>下載鏈接</strong></h2><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#333333; font-family:&quot;Microsoft YaHei&quot;; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:20px; max-width:100%; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:797.5px; word-break:break-all; word-spacing:0px"><tbody><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>安裝包下載</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php7.0.zip" target="_blank"><span>php7.0</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php7.1.zip" target="_blank"><span>php7.1</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php7.2_7.4.zip" target="_blank"><span>php7.2_7.4</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php8.1.zip" target="_blank"><span>php8.1</span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>Windows 一鍵安裝包</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-zbox.win64.exe" target="_blank"><span><span>64 位</span></span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span>Linux 一鍵安裝包</span></p></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-zbox_amd64.tar.gz" target="_blank"><span>amd64 位</span></a><span>&nbsp;</span><br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-zbox_arm64.tar.gz" target="_blank"><span>arm64 位</span></a></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:middle"><span style="color:#e53333">注：Linux 一鍵安裝包必須直接解壓到 /opt 目錄下。</span></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>DEB 包下載：可以通過 dpkg 包管理器在 Ubuntu 和 Debian 系統下安裝</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS_20.0.beta1-php7.0-1_all.deb" target="_blank"><span>php7.0</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS_20.0.beta1-php7.1-1_all.deb" target="_blank"><span>php7.1</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS_20.0.beta1-php7.2_7.4-1_all.deb" target="_blank"><span>php7.2_7.4</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS_20.0.beta1-php8.1-1_all.deb" target="_blank"><span>php8.1</span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>RPM 包下載：可以通過 rpm 包管理器在 Centos 系統下安裝</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php7.0-1.noarch.rpm" target="_blank"><span>php7.0</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php7.1-1.noarch.rpm" target="_blank"><span>php7.1</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php7.2_7.4-1.noarch.rpm" target="_blank"><span>php7.2_7.4</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentao%2F20.0.beta1%2FZenTaoPMS-20.0.beta1-php8.1-1.noarch.rpm" target="_blank"><span>php8.1</span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:middle"><span>最新版禪道客戶端下載鏈接</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>Windows</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.win64.setup.exe" target="_blank"><span>安裝包</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.win64.zip" target="_blank"><span>壓縮包</span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>Linux</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.linux64.deb" target="_blank"><span>安裝包</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.linux64.tar.gz" target="_blank"><span>壓縮包 (.tar.gz)</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.linux64.zip" target="_blank"><span>壓縮包 (.zip)</span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>macOS</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.mac.dmg" target="_blank"><span>安裝包 (Intel)</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fzentaoclient%2F8.0%2Fzentaoclient.mac.m1.dmg" target="_blank"><span>安裝包 (Apple Silicon)</span></a></td></tr><tr></tr><tr></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>最新版禪道客戶端服務器下載鏈接</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fxuanxuan%2F8.0%2Fxxd.8.0.win64.zip" target="_blank"><span>Windows</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fxuanxuan%2F8.0%2Fxxd.8.0.linux.x64.tar.gz" target="_blank"><span>Linux</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fxuanxuan%2F8.0%2Fxxd.8.0.mac.tar.gz" target="_blank"><span>macOS</span></a></td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><span>禪道 Gogs 安裝包下載鏈接</span></td><td style="border-color:#dddddd; border-style:solid; border-width:1px; vertical-align:top"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fgogs%2F0.12%2Fgogs_darwin_amd64" target="_blank"><span>macOS amd64</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fgogs%2F0.12%2Fgogs_linux_amd64" target="_blank"><span>Linux amd64</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fgogs%2F0.12%2Fgogs_windows_amd64.exe" target="_blank"><span>Windows amd64</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fgogs%2F0.12%2Fgogs_darwin_arm64" target="_blank"><span>macOS arm64</span></a><span>&nbsp; &nbsp;&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fdl%2Fgogs%2F0.12%2Fgogs_linux_arm64" target="_blank"><span>Linux arm64</span></a></td></tr></tbody></table><h4>Docker 鏡像:<span style="color:#337fe5">&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhub.docker.com%2Fr%2Feasysoft%2Fzentao%2Ftags" target="_blank"><span style="color:#337fe5">點擊這裏</span></a></h4><h2><strong>幫助手冊</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">安裝文檔：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fbook%2Fzentaopms%2F455.html" target="_blank"><span style="color:#337fe5">https://www.zentao.net/book/zentaopms/455.html</span></a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">升級文檔：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zentao.net%2Fbook%2Fzentaopms%2F460.html" target="_blank"><span style="color:#337fe5">https://www.zentao.net/book/zentaopms/460.html</span></a></p><p style="color:#1b1f28; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#1b1f28; margin-left:0; margin-right:0; text-align:start"><strong>持續優化，定期更新，禪道一直在路上。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 02:57:16 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277405/zentao-20-beta1</guid>
            <link>https://www.oschina.net/news/277405/zentao-20-beta1</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AI2 開源新 LLM，重新定義 open AI]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">艾倫人工智能研究所（Allen Institute for AI，簡稱 AI2）<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.allenai.org%2Fhello-olmo-a-truly-open-llm-43f7e7359222" target="_blank">宣佈</a>推出一個名為 OLMo 7B 的新大語言模型，並開源發佈了預訓練數據和訓練代碼。OLMo 7B 被描述為「一個真正開放的、最先進的大型語言模型」。</span></p><p><span style="color:#000000">AI2 是由已故的微軟公司聯合創始人保羅-艾倫（Paul Allen）於 2014 年在西雅圖創辦的一家非營利組織。該組織表示，他們開源 OLMo 模型旨在讓 AI 研究社區充分了解最先進的大語言模型（LLM），從而推動自然語言處理的發展，並以科學的方式正視現有 LLM 存在的問題。</span></p><p><span style="color:#000000">「通過向公眾完全開放 OLMo 及其訓練數據，AI2 在協作構建世界上最好的開放語言模型方面邁出了一大步。」</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-5f4ac19f48b404e2adf9eed484a4a22035d.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">OLMo 框架具有一套完全開放的 AI 開發工具，包括：</span></p><ul><li><span style="color:#000000">完整的預訓練數據：該模型建立在 AI2 的 Dolma 語料庫上，該語料庫具有三萬億個用於語言模型預訓練的 token 開放語料，包括生成訓練數據的代碼。</span></li><li><span style="color:#000000">訓練代碼和模型權重： OLMo 框架包括 7B 規模的四個模型變體的完整模型權重，每個模型至少訓練有 2T token。提供了推理代碼、訓練指標和訓練日誌。</span></li><li><span style="color:#000000">評估：開發中使用的評估套件已發佈，每個模型包含 500 多個 checkpoints，來自訓練過程中的每 1000 個步驟，以及 Catwalk 項目下的評估代碼。</span></li></ul><p><span style="color:#000000">在接下來的幾個月中，AI2 計劃繼續迭代 OLMo，並將不同的模型大小、模式、數據集和功能引入 OLMo 系列。</span></p><p><span style="color:#000000">OLMo 項目負責人、AI2 NLP 研究高級主管、華盛頓大學艾倫學院教授 Noah Smith 表示:</span></p><blockquote><p><span style="color:#000000">「有了 OLMo，open 就是真正意味上的'open'，AI 研究界的每個人都可以訪問模型創建的各個方面，包括訓練代碼、評估方法、數據等。AI 曾經是一個以活躍的研究社區為中心的開放領域，但隨着模型的發展、成本的增加以及開始轉化為商業產品，AI 工作開始閉門造車。我們希望通過 OLMo 扭轉這一趨勢，讓研究界能夠團結起來，以科學的方式更好地理解和使用語言模型，從而開發出更負責任的 AI 技術，造福於每個人。」</span></p></blockquote><p>更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.allenai.org%2Fhello-olmo-a-truly-open-llm-43f7e7359222" target="_blank">查看官方博客</a>。&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277402/allenai-olmo-truly-open-llm</guid>
            <link>https://www.oschina.net/news/277402/allenai-olmo-truly-open-llm</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[天津大學發佈中國首個腦機接口開源軟件平台 MetaBCI 研究成果]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，天津大學神經工程團隊在數學與計算生物學領域 SCI 一區 TOP 期刊《Computers in Biology and Medicine》上發表論文，介紹了中國首個腦機接口開源軟件平台 MetaBCI 的技術架構與實現方法。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-56d4176a2f8c23763ae4c465838482839ef.png" referrerpolicy="no-referrer"></p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sciencedirect.com%2Fscience%2Farticle%2Fpii%2FS0010482523012714%3Fvia%253Dihub" target="_blank">https://www.sciencedirect.com/science/article/pii/S0010482523012714?via%3Dihub</a></em></u></p></blockquote><p>據介紹，MetaBCI 針對 BCI 領域數據分佈散亂、算法復現困難、在線系統效率低的問題，規範了 BCI 數據結構與預處理流程、開發了通用的算法框架、利用了雙進程和雙線程提高在線實時效率，有助於降低構建腦-機接口系統的技術門檻，減少研發成本，促進轉化落地。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6ec72a4b9fc60b7b8c54167afe9992a913c.png" referrerpolicy="no-referrer"></p><p>MetaBCI 由離線分析模塊 Brainda、刺激呈現模塊 Brainstim 和在線數據流模塊 Brainflow 三大部分構成，提供了面向 BCI 軟件層面全鏈條開發的解決方案。</p><ul><li>面向離線分析需求，Brainda 統一了現有公開數據集接口，優化了腦電數據讀取、處理流程，復現多種主要 BCI 數據分析及解碼算法，以此提高研究者的算法開發效率；</li><li>面向刺激呈現需求，Brainstim 提供了簡潔高效的範式設計模塊，可快速創建腦機接口範式刺激界面；</li><li>面向在線開發需求，Brainflow 利用雙線程、雙進程編程方法實現了實時高速的數據讀取、數據處理、結果反饋等功能，幫助開發者輕鬆搭建腦機接口在線實驗系統。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-8f4d4e3e7fbcc8a74be3635f43436fba05b.png" referrerpolicy="no-referrer"></p><p>當前，MetaBCI 平台包含軟件代碼共 386 個類和函數，完成技術説明手冊 5 萬多字，同步更新英文 API 網頁（metabci.readthedocs.io/），平台共兼容 17 種 BCI 公開數據集，涵蓋 16 種數據分析方法和 55 種腦機解碼模型。</p><p>相較於現有的腦機接口軟件工具包，MetaBCI 基於開源語言 Python 編寫，並且能夠涵蓋腦機接口全鏈條功能。MetaBCI 完全打通了腦機接口軟硬件開發與設計鏈路，可為腦機接口在科學研究、醫療康復、娛樂生活、特種控制等領域的應用提供重要支撐，持續推動新一代腦機智能快速發展。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b420b14a768151e8cb1615d426c11e3d30c.png" referrerpolicy="no-referrer"></p><p>MetaBCI 軟件代碼開源鏈接：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTBC-TJU%2FMetaBCI" target="_blank">https://github.com/TBC-TJU/MetaBCI</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 02:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277399</guid>
            <link>https://www.oschina.net/news/277399</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[大模型評測體系「司南」 (OpenCompass2.0) 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>上海人工智能實驗室科學家團隊正式發佈了大模型開源開放評測體系「司南」 (OpenCompass2.0)，用於為大語言模型、多模態模型等提供一站式評測服務。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-347708a4c8c2193cfa064cf35e0129504a2.png" referrerpolicy="no-referrer"></p><p><strong>司南 OpenCompass2.0 評測體系官網：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopencompass.org.cn%2F" target="_blank">https://opencompass.org.cn/</a><br><strong>GitHub 主頁：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopen-compass%2FOpenCompass%2F" target="_blank">https://github.com/open-compass/OpenCompass/</a></p></blockquote><p>據介紹，「司南」全面量化模型在<strong>知識、語言、理解、推理和考試</strong>等五大能力維度的表現，評測榜單涉及的大語言模型和多模態大模型超過 150 個，客觀中立地為大模型技術的創新提供堅實的技術支撐。截至目前，已有包括 Meta、阿里巴巴、騰訊、百度等 30 餘家國內外企業和科研機構採用「司南」助力開展技術研發。</p><p>OpenCompass2.0 對過去一年來主流開源模型和商業 API 模型進行了全面評測，分析結果顯示，GPT-4 Turbo 在各項評測中均獲最佳表現，智譜清言 GLM-4、阿里巴巴 Qwen-Max、百度文心一言 4.0 緊隨其後；大語言模型整體能力仍有較大提升空間，複雜推理相關能力仍是短板；中文場景下國內的模型更具優勢，與此同時，開源模型進步很快，以較小的體量達到較高性能水平，表現出較大的發展潛力。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ba58dc3914ae82f80ebe074e7041caaf88f.png" referrerpolicy="no-referrer"></p><p>完整榜單：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frank.opencompass.org.cn%2Fhome" target="_blank">https://rank.opencompass.org.cn/home</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 02:08:53 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277396</guid>
            <link>https://www.oschina.net/news/277396</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024 最新一期中國數據庫流行榜公佈：阿里雲 PolarDB 登頂]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2 月 1 日，數據庫社區「墨天輪」公佈了 2024 年最新一期中國數據庫流行度排行榜，<span style="color:#f39c12">阿里雲瑤池旗下的自研雲原生數據庫 PolarDB 奪冠，並刷新榜單總分紀錄</span>。墨天輪評價稱，<strong>因雲而生的 PolarDB 數據庫以客戶需求為導向，並在業界開創性地落地「<span style="color:#f39c12"><strong><strong>三層解耦</strong></strong></span>」架構、多主多寫、HTAP、Serverless、集中與分佈式一體化等一系列業內領先的前沿技術，為用戶提供了靈活、可靠的數據庫服務，解決了眾多業務問題。</strong></p><p>據瞭解，目前 PolarDB 已被 <span style="color:#f39c12"><strong>10000 家企業級用戶</strong></span>採用，廣泛落地於政務、金融、電信、物流、互聯網等領域的核心業務系統。</p><p>墨天輪是中國知名數據庫技術社區，其發起的中國數據庫流行度排行榜，依據搜索引擎數據、核心案例數、資質數量、專利數、論文數等標準，對 <span style="color:#f39c12"><strong>290</strong></span> 個最主流的國產數據庫進行綜合評比。該榜單反映的是數據庫產品在市場中的活躍度，被譽為中國版的「DB-Engines 排名榜」。</p><p>在 2024 年 2 月的排行榜中，PolarDB 以 <span style="color:#f39c12"><strong>856.07 分</strong></span>刷新榜單記錄，排名第一，OceanBase、TiDB、OpenGauss、人大金倉分列 2~5 名。</p><p>誕生於 2017 年的 PolarDB 是中國首款自研雲原生數據庫，採用存儲計算分離、軟硬一體化設計。在彈性場景下，PolarDB 成本僅為傳統商業數據庫的 1/10，並於首批通過 2023 年國產數據庫安全可靠測評。2024 年 1 月，在首屆 PolarDB 開發者大會上，PolarDB「<strong><strong>三<span style="color:#f39c12">層分離</span></strong></strong>」<strong>新版本發佈，<span style="color:#f39c12">可節省 50% 數據庫成本</span></strong>、基於智能決策實現<span style="color:#f39c12"><strong>查詢性能 10 倍提升</strong></span>。</p><p>近年來，國產數據庫廣受市場青睞，PolarDB&nbsp;<span style="color:#f39c12"><strong>3 年增速超 400%</strong></span>，服務於<strong>自然人稅收管理系統、全國 60% 的省級醫保信息平台等機構，以及中國聯通、友邦保險、海底撈、米哈遊</strong>等知名企業。</p><p>PolarDB 還是數據庫開源的重要推動者。目前 PolarDB 已正式開源近 3 年，建立了 15 個 SIG 組，吸引 3 萬+開發者和社區用戶，以及<strong>韻達、網易數帆、龍蜥等 60 多家生態夥伴</strong>。PolarDB 開源數據庫工作室已在 10+所高校掛牌成立，與<strong>武漢大學、華東師範大學</strong>聯合開展教學課程、智慧問答助手等多個項目。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 01 Feb 2024 09:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277303</guid>
            <link>https://www.oschina.net/news/277303</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
