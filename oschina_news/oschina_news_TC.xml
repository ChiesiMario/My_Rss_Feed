<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 15 Jan 2024 07:15:47 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[GNOME 46 發佈首個 Alpha，支持遠程桌面協議 (RDP)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNOME 46 首個 Alpha 已發佈。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e10ceb0b7c47c704211dd7fb403e0579ae5.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-36c8c3d9facf2955d08c4dbebcce405f052.png" referrerpolicy="no-referrer"></p><p><span style="color:#374151">主要變化</span></p><ul><li>GNOME 桌面環境<u><a href="https://www.oschina.net/news/274575/gnome-rdp-remote-login">支持遠程桌面協議 (RDP)</a></u></li><li>改進 GNOME Shell 和 Mutter</li><li>由於服務條款發生變化，GNOME Web (Epiphany) 不再支持 Google 安全瀏覽</li><li>Nautilus 文件管理器現在將在創建受保護的 ZIP 存檔、新樣式橫幅以及其他改進和修復時確認密碼</li><li>GNOME System Monitor 移植到 GTK4</li><li>GNOME 背景支持 JPEG-XL 格式，並添加了新的默認背景</li><li>……</li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.gnome.org%2Ft%2Fgnome-46-alpha-released%2F18940%2F2" target="_blank">詳情查看發佈公告</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 06:27:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275799/gnome-46-alpha-released</guid>
            <link>https://www.oschina.net/news/275799/gnome-46-alpha-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[從分享一個小工具到首個 GitHub 1K Star 小成就]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>2021 年 11 月，Python 版 trzsz 工具</h2><ul><li><p><strong>背景</strong>：在 iTerm2 中使用 rz sz 又卡死了，才想起當前是 tmux 環境，然後 kill 並重登錄，真的很浪費時間。</p></li><li><p><strong>原因</strong>：rz sz 在傳輸時會有一些特殊字符，tmux 的存在導致傳不過去。</p></li><li><p><strong>解法</strong>：如果先將文件 Base64 編碼再傳輸，就可以順利穿過 tmux 了。</p></li><li><p><strong>結果</strong>：寫了個小工具 trzsz ( trz / tsz ) 自用，接着在 GitHub 上開源分享出來：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz" target="_blank">https://github.com/trzsz/trzsz</a></p></li></ul><h2>2022 年 2 月，TypeScript 版 trzsz.js 庫</h2><ul><li><p><strong>背景</strong>：trzsz 開始只支持 iTerm2，網友提出想要支持其他終端，例如 electerm 和 tabby 等。</p></li><li><p><strong>結果</strong>：用 TypeScript 寫了個 trzsz.js 的庫，順便支持在瀏覽器 webshell 中使用。這個庫主要是面向終端或 webshell 開發者的，用來接入並支持 trzsz ( trz / tsz )：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz.js" target="_blank">https://github.com/trzsz/trzsz.js</a></p></li></ul><h2>2022 年 3 月，Go 版 trzsz 工具</h2><ul><li><p><strong>背景 1</strong>: trzsz 還有很多其他終端未支持，有網友特別想支持 Linux 的原生終端，但是提 PR 過去大概率會被拒絕。</p></li><li><p><strong>背景 2:</strong> 有網友在 V2 分享了 [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbeordle%2Ftermtunnel" target="_blank">termtunnel</a>](<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbeordle%2Ftermtunnel" target="_blank">https://github.com/beordle/termtunnel</a>)，讓我突然想到，可以寫個工具作為 ssh 進程的父進程，就可以完全控制 ssh 的輸入和輸出了，從而實現對 trzsz ( trz / tsz ) 的支持。</p></li><li><p><strong>結果</strong>：為了支持所有平台，為了便於分發（獨立的程序，無任何依賴），選擇了用 Go 來開發，於是便有了 Go 版的 trzsz ( trz / tsz )：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz-go" target="_blank">https://github.com/trzsz/trzsz-go</a></p></li></ul><h2>2023 年 5 月，實現 ssh 客戶端</h2><ul><li><p><strong>背景 1</strong>: Windows 中的 ConPTY 和 ConHost 存在性能問題，導致 Go 版 trzsz 只有幾十 K 的速度。</p></li><li><p><strong>背景 2:</strong> 有網友來諮詢 trzsz.js 的問題，他用的是 Go [wails](<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwailsapp%2Fwails" target="_blank">https://github.com/wailsapp/wails</a>)，才知道 Go 有強大的 ssh 庫，可以把 Go 版 trzsz 改造成一個庫讓他接入。</p></li><li><p><strong>背景 3</strong>: 在 ssh 登錄不常用的服務器時，總是不能準確地記住別名是什麼，然後就是 cat ~/.ssh/config，很不絲滑。</p></li><li><p><strong>結果</strong>：把 Go 版 trzsz 改造成一個庫，自己寫一個 ssh 客戶端，完全兼容原生 ssh 的，然後定製自己想要的功能，順便解決 trzsz 在 Windows 慢的問題，叫 trzsz-ssh ( tssh )：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz-ssh" target="_blank">https://github.com/trzsz/trzsz-ssh</a></p></li></ul><h2>2024 年 1 月，tssh 率先突破 1k star</h2><ul><li><p>trzsz-ssh ( tssh ) 是以上幾個最後開源的，卻是最先達到 1k star 的，為期不到一年。</p></li><li><p>trzsz-ssh ( tssh ) 也支持原生 zmodem ( rz / sz )，只要有本地 shell 的終端就能使用。凡是沒有原生支持 rz / sz 的終端，配合 tssh 使用大概率會有驚喜。</p></li><li><p>截止到現在，star 和 fork 數量的彙總 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz" target="_blank">https://github.com/trzsz</a></p></li></ul><p>- Python 版 958 star 48 fork</p><p>- TypeScript 版 177 star 14 fork</p><p>- Go 版 752 star 46 fork</p><p>- tssh 1000 star 62 fork</p><h2>總結與感想</h2><ul><li><p>在日常工作中會遇到很多的小痛點，當重複遇到的次數多了，那怕只是幾秒的浪費，我就會去思考有沒有優化的空間，會去網上看看別人是如何做的，實在找不到就只好自己動手豐衣足食了。</p></li><li><p>開始並沒有想着要投身開源，因為找不到 tmux 中使用 rz sz 的解決方案，而自己寫了個小工具，只是想簡單分享給同樣為 tmux 不支持 rz sz 而苦惱的人。</p></li></ul><p><span>- </span>最後説明一下，以上其實省略了大量的優化過程，那是用很多很多的週末堆起來的<span>……</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 05:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275788</guid>
            <link>https://www.oschina.net/news/275788</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[.NET MAUI 是合適的 Xamarin 繼任者嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">眾所周知，跨平台移動應用開發框架 Xamarin 將於 2024 年 5 月 1 日結束其生命週期。這一重要里程碑促使許多開發人員和組織評估從 Xamarin 升級到其繼任者 .NET MAUI 的可能性，或者藉此機會探索如 Flutter 或 React Native 之類的替代框架。</span></p><p><span style="color:#000000">但每個公司都有不同的需求，需要不同的解決方案。因此，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsdtimes.com%2Fmobile-app-development%2Fis-net-maui-the-right-xamarin-successor-for-you%2F" target="_blank">SDTimes </a>詳細對比研究了一下各備選項的優缺點，為有需要的用戶提供參考。</span></p><h4><strong><span style="color:#000000">什麼是 .NET MAUI 以及它與 Xamarin 有何關係？</span></strong></h4><p><span style="color:#000000">隨着 Xamarin 的生命週期結束，Microsoft 推出了 .NET MAUI 作為替代品。MAUI 是 Xamarin.Forms 的演變，專注於通過質量、性能、設計和平台可用性來增強開發人員體驗。它將 Xamarin.Android 和 Xamarin.iOS 吸收到 .NET 框架中，符合 Microsoft 在任何平台上運行 .NET 的願景。.NET 6 標誌着這一轉變的開始，它將接替 Xamarin 構建 Android、iOS 和跨平台應用程序。</span></p><p><span style="color:#000000">.NET MAUI 的引入為開發人員和組織提供了一個重新評估 .NET 是否仍然最適合其移動項目的機會。隨着 Flutter 和 React Native 等競爭者越來越受歡迎，必須考慮從 Xamarin 遷移到 .NET MAUI 是否是最合適的選擇。</span></p><p><span style="color:#000000">.NET MAUI 旨在通過重寫 UI 組件來改進 Xamarin.Forms，以獲得更好的性能和可擴展性。該框架的重點是減少應用程序啓動時間並將 UI 組件與其平台對應組件解耦。這使得開發人員可以為每個平台使用正確的組件，而無需明確指定，從而實現更加無縫和高效的開發過程。</span></p><p><span style="color:#000000">MAUI 通過引入統一的項目結構而不是每個平台單獨的項目，極大地改善了開發人員體驗。現在可以將特定於平台的代碼添加到統一項目內的「Platforms」文件夾中。此更改簡化了項目組織，並使跨不同平台的代碼管理變得更加容易。此外，MAUI 還提供了有關常用平台功能的抽象，例如權限、通信以及地理定位和媒體選擇器等特定於設備的功能。這些抽象有助於減少所需的特定於平台的代碼量，進一步簡化開發過程。</span></p><p><span style="color:#000000">MAUI 中提供了 XAML 和 C# 的熱重載，使開發人員能夠實時查看應用程序 UI 的變化。雖然有些開發人員反映熱重載的性能不穩定，但它仍然是一個有價值的功能，可以顯着加快開發過程。捆綁後，C# 代碼被編譯為本地代碼，針對 Android、iOS、macOS 和 Windows 應用程序採用不同的編譯過程，確保每個平台上的最佳性能。</span></p><p><span style="color:#000000">Microsoft 方面表示將與開源社區一起支持 .NET MAUI，表明了該公司將致力於根據開發人員反饋改進該框架。這種協作確保 .NET MAUI 在不斷髮展的同時，適應開發人員和組織的需求。</span></p><h4><strong><span style="color:#000000">從 Xamarin 遷移到 .NET MAUI</span></strong></h4><p><span style="color:#000000">從 Xamarin 遷移到 .NET MAUI 涉及多個步驟，包括將 Xamarin.Android 和 Xamarin.iOS 項目升級到最新的穩定 .NET 版本，以及將 Xamarin.Forms 項目更新到 .NET MAUI。Microsoft 提供命令行工具和 Visual Studio 插件來在遷移過程中自動執行許多代碼轉換。這些工具可以節省時間和精力，使遷移過程更加順利且更易於管理。</span></p><p><span style="color:#000000">升級最廣泛的部分涉及更新 UI，這可能需要更改命名空間和 API。根據現有 UI 的複雜性和第三方 UI 元素的使用，此過程的難度可能會有所不同。Microsoft 已與主要 Xamarin UI 組件構建商合作，以確保與 MAUI 的兼容性，從而幫助簡化遷移過程。</span></p><h4><strong><span style="color:#000000">.NET MAUI 的缺點</span></strong></h4><p><span style="color:#000000">雖然 .NET MAUI 作為跨平台解決方案具有多種優勢，但它也存在一些缺點，開發人員和組織在項目中採用它之前應加以考慮。</span></p><p><span style="color:#000000">使用 .NET MAUI 的一個顯着缺點是它在市場上的地位相對較新。作為 Xamarin.Forms 的演變，MAUI 可能仍然存在一些成長的煩惱和未解決的問題。開發人員可能會遇到可能影響項目開發時間表和整體穩定性的錯誤或限制。儘管 Microsoft 支持 .NET MAUI，但該框架可能需要一段時間才能成熟並達到與 React Native 或 Flutter 等更成熟的替代方案相同的穩定性和可靠性水平。</span></p><p><span style="color:#000000">.NET MAUI 的另一個潛在缺點是它對 .NET 生態系統的依賴。雖然這對於已經熟悉 .NET 技術的開發人員來説可能是有利的，但對於來自不同背景或編程語言的開發人員來説，它可能會帶來陡峭的學習曲線。相比之下，Flutter 和 React Native 等框架分別使用 Dart 和 JavaScript，這可能更容易訪問，並且對更廣泛的開發人員有吸引力。</span></p><p><span style="color:#000000">最後，.NET MAUI 的性能雖然比 Xamarin.Forms 有所提高，但可能無法始終與 native development 或 Flutter 等其他跨平台解決方案相匹配。這可能會導致應用程序啓動時間稍慢或在某些情況下響應能力降低，從而可能影響用戶體驗。</span></p><h4><strong><span style="color:#000000">.NET MAUI 的替代品</span></strong></h4><p><span style="color:#000000">雖然 .NET MAUI 為 Xamarin 開發人員提供了自然的進步，但必須考慮替代框架並評估它們對特定項目的適用性。如果 UI 需要大量重構才能升級到 MAUI，那麼對 native development 或具有更大社區的跨平台框架的投資可能更有意義。以下是 .NET MAUI 的一些流行替代品：</span></p><p><strong><span style="color:#000000">Native Development</span></strong></p><p><span style="color:#000000">Native Development 具有許多優勢，包括最佳性能、無縫用戶體驗、訪問所有設備功能、增強的安全性、應用程序商店優化、更緊密的系統集成以及訪問尖端平台功能。這也是 SDTimes 的首要推薦。</span></p><p><span style="color:#000000"><strong>Flutter</strong></span></p><p><span style="color:#000000">Flutter 是一個由 Google 支持的跨平台框架，允許開發人員編寫一次 Dart 代碼並將其部署在多個平台上。它提供快速開發、可定製的小部件、高性能、與其他技術的輕鬆集成以及不斷髮展的社區。對於尋求高質量、高效的跨平台框架而不犧牲性能或可定製性的開發人員來説，Flutter 是一個絕佳的選擇。</span></p><p><span style="color:#000000">Flutter 與其他框架之間的主要區別之一是其渲染引擎，它使 Flutter 的 UI 在所有平台上看起來都一致。它還包括通過一些額外的努力來顯示特定於平台的組件的選項。Flutter 路線圖包括渲染引擎升級，以實現流暢的動畫和有前途的 3D 圖形實驗。</span></p><p><span style="color:#000000">總體而言，Flutter 是一個不錯的選擇，推薦給那些希望快速高效地構建高質量跨平台應用程序，同時在不同平台上保持一致用戶體驗的開發人員。</span></p><p><span style="color:#000000"><strong>React Native</strong></span></p><p><span style="color:#000000">React Native 由 Facebook 支持，支持使用 JavaScript 進行跨平台開發。與 Xamarin 和 MAUI 一樣，它利用原生組件來實現一致的平台體驗，但可能需要平台之間進行額外的 QA，以確保一切按預期呈現。雖然 React Native 的性能可能無法與 native development 相匹配，但它仍然在開發速度、跨平台兼容性和性能之間提供了良好的平衡。此外，React Native 內置支持與其他流行技術（例如 Redux 和 GraphQL）集成，從而可以輕鬆地將狀態管理和數據獲取等功能添加到你的應用程序中。</span></p><p><span style="color:#000000">React Native 的熱重載功能可以讓開發者實時看到應用 UI 的變化，讓開發過程更快、更高效。它擁有一個龐大而活躍的開發人員社區，這意味着有大量的資源、庫和工具可用於幫助開發。</span></p><p><span style="color:#000000">與 Flutter 相比，升級 React Native 應用程序可能更具挑戰性，因為它依賴原生組件並且需要 JavaScript bridge，這可能會在更新依賴項或特定於平台的代碼時引入兼容性問題。可能需要平台之間進行額外的 QA 和手動調整，以確保更新過程順利進行。另一方面，Flutter 使用單一渲染引擎和 Dart 語言，通過提供跨平台一致的 UI 並減少對特定於平台的組件的依賴來簡化更新。因此，Flutter 提供了更加簡化和高效的更新流程，有時只需數小時而不是數週即可完成，從而降低了 Flutter 應用程序的維護成本。</span></p><p><span style="color:#000000">總的來説，對於想要用自己熟悉的語言構建跨平台應用程序的 React/JavaScript/TypeScript 開發人員來説，React Native 是一個合理的選擇。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275780/is-net-maui-the-right-xamarin-successor-for-you</guid>
            <link>https://www.oschina.net/news/275780/is-net-maui-the-right-xamarin-successor-for-you</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[主審法官談國內首例 AI 生成圖侵權案：判決激勵大家用新工具創作]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>1 月 12 日下午，首例 AI 生成圖侵權案一審主審法官、北京互聯網法院綜合審判一庭副庭長朱閣做客中國法學交流基金會舉辦的公益講座，就「人工智能生成圖著作權相關問題」迴應公眾關切。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bc90cdf5515a7be6c0726c8ec1182ce0406.png" referrerpolicy="no-referrer"></p><p>在整場講座過程中，朱閣圍繞公眾關注的焦點問題即 AI 生成的內容是否構成作品、作品的獨創性該怎麼認定等進行迴應，並分享了此案判決的思路和過程。</p><p>2023 年 2 月，原告李昀鍇使用 Stable Diffusion 模型，通過在模型上輸入數十個提示詞，設置相關迭代步數、圖片高度、提示詞引導係數以及隨機數種子等，生成了數張人像圖片。隨後，李昀鍇以「春風送來了溫柔」為名發佈在社交平台小紅書上。2023 年 3 月，百家號一自媒體賬號發佈的文章使用了李昀鍇製作的圖片。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f0cd7df7758aee50b325d92bf0e90a113b.png" referrerpolicy="no-referrer"></p><p><em>李昀鍇用 Stable Diffusion 模型生成的圖片</em></p><p>李昀鍇認為，對方未獲得他的許可就截掉了他在小紅書平台有署名水印進行發佈，侵犯了署名權及信息網絡傳播權，應當承擔法律責任。</p><p>2023 年 5 月，李昀鍇起訴被告劉某侵害作品署名權、信息網絡傳播權糾紛一案在北京互聯網法院立案。此案最關鍵的爭議在於李昀鍇基於自己設定的提示詞和參數，使用 Stable Diffusion 模型製作的圖片「春風送來了溫柔」是否構成作品，以及構成哪一種類型的作品。</p><p><strong>法院認為，原告李昀鍇使用開源軟件 Stable Diffusion 創作的圖片由其獨立完成，體現了他的個性化表達，因此涉案圖片具備「獨創性」要件。涉案圖片符合作品的定義，屬於美術作品，受到著作權法的保護。最終判決李昀鍇勝訴，被告需在百家號平台公開道歉，並向原告賠償 500 元</strong>。</p><p>此案為 AI 生成圖片相關領域著作權第一案，判決在司法層面上具有哪些典型意義？</p><p>朱閣認為，由於生成式人工智能大模型的技術特性，人工智能生成物的可版權性及權利歸屬相關問題，成為人工智能產業發展需要解決的核心法律問題之一。</p><p>學界關於 AI 生成內容是否享有著作權，是否受版權保護的討論從未停止，觀點大致可以分為三類：一是激進觀點，認為人工智能本身可以作為作者，相關生成內容系人工智能的作品。二是保守觀點，認為 AI 作圖工具的使用者對 AI 繪圖的文字提示和描述，即使再具體，也只是文字作品的創作，而不是美術作品的創作。用戶對於生成結果不能預見、無法控制。三是較為折中的觀點，人類作出獨創性表達的 AI 生成物可以作為作品受到著作權法保護。</p><p>朱閣表示，在本案的判決中採納了較為折中的觀點。</p><p>首先，<strong>人工智能大模型不是民法典規定的民事主體，只是創作工具</strong>。依據著作權法規定，「著作權屬於作者，本法另有規定的除外。」關於「作者」，依據著作權法第十一條規定，作者限於自然人、法人或非法人組織，這與民法典規定的民事主體一致，因此，人工智能模型本身無法成為我國著作權法上的作者。</p><p>其次，若將 AI 繪圖單純視為機器人的作品，即要求機器人與人享有同等的權利，這在現有的法律體系中是難以迴應的，朱閣稱「如果將人工智能作為著作權法中的作者，未來在侵權責任認定的對象等問題上，機器都將與人享有同等的法律地位和資格，如何認定機器的真實意思，如何考慮機器在侵權行為中的主觀過錯，如何讓機器承擔責任，現行法律體系無法解決。」</p><p>綜上，朱閣稱，現階段，生成式人工智能模型不具備自由意志，不是法律上的主體。因此，人們利用人工智能模型生成圖片時，不存在兩個主體之間確定誰為創作者的問題，本質上，仍然是人利用工具進行創作，即整個創作過程中進行智力投入的是人而非人工智能模型。</p><p>「在本案中，在一定條件下給予 AI 生成內容作品一個（法律意義）上的身份，就是為了激勵大家用新工具進行創作。我們認為，此案的判決是契合著作權法鼓勵創作的目標的。」朱閣説。</p><p><strong>來源</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_25963744" target="_blank">首例 AI 生成圖片侵權案始末：原告勝訴放棄賠償，有律師質疑判決</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_26010981" target="_blank">主審法官談首例 AI 生成圖侵權案：判決激勵大家用新工具創作</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275777</guid>
            <link>https://www.oschina.net/news/275777</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🔥 周熱點 | C# 榮獲年度編程語言；知名安卓框架因「作者遭受惡意攻擊」停更；Sam Altman 與男友結婚.....]]>
            </title>
            <description>
                <![CDATA[回顧一週熱門資訊。2024.01.08-2024.01.11]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;tempkey=MTI1Ml9EY2lKYk82L3o2TzRMVm1DMm5NX3VjTnhUSmkxWVRtcWJLQV9OODh6V1Z1NXVtcVBpSE5ya1FuUUZxRXlYWW1MSmtXZVk2ZGlrZ1JZbklTUXhrSlhNbjhkV3lFRlVEUTNRQzVUTVluenUwRkpld3dBR3g2c1VwUEhfOHdUZldGN2pQcndxZ1BaQ2t0TkxEWkhIXzZiaFh2MHhSUU9xS21hZTYxZ0tBfn4%3D&#38;chksm=880c4ccebf7bc5d83392ab82eabdb4cef0939b2e2bd8ad56cac7a68fe14a92096b9cad3248c2&#38;token=935085254&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;tempkey=MTI1Ml9EY2lKYk82L3o2TzRMVm1DMm5NX3VjTnhUSmkxWVRtcWJLQV9OODh6V1Z1NXVtcVBpSE5ya1FuUUZxRXlYWW1MSmtXZVk2ZGlrZ1JZbklTUXhrSlhNbjhkV3lFRlVEUTNRQzVUTVluenUwRkpld3dBR3g2c1VwUEhfOHdUZldGN2pQcndxZ1BaQ2t0TkxEWkhIXzZiaFh2MHhSUU9xS21hZTYxZ0tBfn4%3D&#38;chksm=880c4ccebf7bc5d83392ab82eabdb4cef0939b2e2bd8ad56cac7a68fe14a92096b9cad3248c2&#38;token=935085254&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[全球首發 ｜ 原生開源大模型託管項目 CSGHub]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:justify"><span><span><span><strong><span><span>關於</span></span></strong><strong><span><span><span>CSGHub</span></span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>大模型百花齊放的時代，數據和模型已成為企業和個人用戶最核心的數字資產。然而，當前面臨的挑戰是模型文件和數據集的管理工具分散、管理手段單機化碎片化等問題。這些問題不僅帶來了安全運營的巨大風險，也成為企業大模型能力更新迭代的阻力。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>如果您像我們一樣堅信大模型將成為信息革命的最重要推動力，您可能也會思考如何更高效、更安全、更可靠地管理大模型的核心資產：<strong>模型、數據以及代碼</strong>。正是出於對這一挑戰的深刻認知，我們推出了</span></span><strong><span><span><span>CSGHub&nbsp; ——&nbsp; </span></span></span></strong><strong><span><span>一個旨在解決大模型相關資產治理難題的開源項目。</span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>的使命是為用戶提供一個開源開放的、針對大模型原生設計的資產管理平台，支持私有化部署和離線運行。我們的目標是為用戶創造一個安全、高效且可信賴的環境，使其能夠更好地管理和運用大模型核心資產數據。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>實現了類似私有化</span></span><span><span><span>Huggingface</span></span></span><span><span>的功能，以類比</span></span><span><span><span>OpenStack Glance</span></span></span><span><span>管理虛擬機鏡像、</span></span><span><span><span>Harbor</span></span></span><span><span>管理容器鏡像以及</span></span><span><span><span>Sonatype Nexus</span></span></span><span><span>管理製品的方式，以開源軟件的方式實現對</span></span><span><span><span>LLM</span></span></span><span><span>資產的安全、高效管理。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>官網：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fportal.opencsg.com%2F" target="_blank"><span><span><span>https://portal.opencsg.com/</span></span></span></a></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>源碼：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenCSGs%2Fcsghub" target="_blank"><span><span><span><span style="color:#3370ff"><span><span>https://github.com/OpenCSGs/csghub</span></span></span></span></span></span></a>&nbsp;&nbsp; <span><span>（歡迎</span></span><span><span><span>Star🌟</span></span></span><span><span>）</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span><span>CSGHub </span></span></span></strong><strong><span><span>幫助用戶治理</span></span></strong><strong><span><span><span>LLM</span></span></span></strong><strong><span><span>及</span></span></strong><strong><span><span><span>LLM</span></span></span></strong><strong><span><span>應用生命週期</span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>是一個開源、可信的大模型資產管理平台，幫助用戶治理</span></span><span><span><span>LLM</span></span></span><span><span>和</span></span><span><span><span>LLM</span></span></span><span><span>應用生命週期中涉及到的資產（數據集、模型文件、代碼等）。</span></span></span></span></span></p><ol><li><span><span><span><span><span>基於</span></span><span><span><span>CSGHub</span></span></span><span><span>，用戶可以通過</span></span><span><span><span>Web</span></span></span><span><span>界面、</span></span><span><span><span>Git</span></span></span><span><span>命令行或者自然語言</span></span><span><span><span>Chatbot</span></span></span><span><span>等方式，實現對模型文件、數據集、代碼等資產的操作，包括上傳、下載、存儲、校驗和分發；</span></span></span></span></span></li></ol><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>2.同時平台提供微服務子模塊和標準化</span></span><span><span><span>API</span>，便於用戶與自有系統集成。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub</span></span></span><span><span>具有以下功能特性：</span></span></span></span></span></p><ul><li><span><span><span><strong><span><span>資產統一管理：</span></span></strong><span><span>一站式</span></span><span><span><span>Hub</span></span></span><span><span>統一管理模型文件、數據集、大模型應用代碼。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>研發生態兼容：</span></span></strong><span><span>同時支持</span></span><span><span><span>HTTPS</span></span></span><span><span>和</span></span><span><span><span>SSH</span></span></span><span><span>協議的</span></span><span><span><span>Git</span></span></span><span><span>命令和</span></span><span><span><span>Web</span></span></span><span><span>界面操作，</span></span><span><span>確保不同用戶均可方便使用。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>大模型能力擴展：</span></span></strong><span><span>原生支持版本化管理、模型格式轉化、數據自動預處理、數據集預覽等功能。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>權限與安全：</span></span></strong><span><span>支持與企業用戶系統集成、支持資產可見範圍設置、外部內部零信任的鑑權接口設計，</span></span><span><span>最大化滿足企業安全。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>私有化部署支持：</span></span></strong><span><span>無互聯網依賴、無雲廠商依賴等外部依賴，可一鍵啓動私有化部署。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>大模型原生設計：</span></span></strong><span><span>支持自然語言交互、支持模型一鍵微調與部署、支持</span></span><span><span><span>Agent</span></span></span><span><span>與</span></span><span><span><span>Copilot</span></span></span><span><span>應用。</span></span></span></span></span></li></ul><h4 style="margin-left:0px; margin-right:0px; text-align:left"><span><span><span><strong><span><span>關於</span></span></strong><strong><span><span><span>CSGHub</span></span></span></strong><strong><span><span>技術架構</span></span></strong></span></span></span></h4><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>在技術架構上，</span></span><span><span><span>CSGHub</span></span></span><span><span>是一個綜合了先進技術的資產管理平台，具有以下技術特點：</span></span></span></span></span></p><ul><li><span><span><span><span><span><span>CSGHub</span></span></span><span><span>整合了開源</span></span><span><span><span>Git Server</span></span></span><span><span>、</span></span><span><span><span>Git LFS</span></span></span><span><span>大文件存儲協議和對象存儲</span></span><span><span><span>OSS</span></span></span><span><span>等技術，提供可靠的數據存儲層、靈活的基礎設施接入層和高兼容的研發工具支持。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>通過服務化的架構，</span></span><span><span><span> CSGHub</span></span></span><span><span>提供</span></span><span><span><span>CSGHub Server</span></span></span><span><span>後台服務和</span></span><span><span><span>CSGHub Web Service</span></span></span><span><span>的管理界面，普通用戶可以快速使用</span></span><span><span><span>Docker compose</span></span></span><span><span>或</span></span><span><span><span>Kubernetes Helm Chart</span></span></span><span><span>啓動服務，實現生產級的資產管理。具備自研能力的用戶可利用</span></span><span><span><span>CSGHub Server</span></span></span><span><span>進行二次開發，將核心管理功能集成到外部系統或自定義高級功能。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span><span>CSGHub</span></span></span><span><span>藉助</span></span><span><span><span>Apache Arrow</span></span></span><span><span>和</span></span><span><span><span>DuckDB</span></span></span><span><span>等優秀開源項目，支持</span></span><span><span><span>Parquet</span></span></span><span><span>數據文件格式的預覽，便於算法研究人員和愛好者進行本地化數據集管理。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span><span>CSGHub</span></span></span><span><span>提供直觀的</span></span><span><span><span>Web</span></span></span><span><span>界面和麪向企業組織架構的權限設計，用戶可通過</span></span><span><span><span>Web UI</span></span></span><span><span>實現版本控制管理、在線瀏覽和下載，也可以設置數據集和模型文件的可見範圍，實現數據安全隔離，還可以對模型和數據集發起用戶討論話題。</span></span></span></span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span>我們持續更新</span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>我們致力於將</span></span><span><span><span>CSGHub</span></span></span><span><span>打造為一個高效、易用的大模型資產管理平台，未來我們將繼續實現以下技術</span></span><span><span><span>/</span></span></span><span><span>功能點：</span></span></span></span></span></p><ul><li><span><span><span><strong><span><span>資產管理</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>多源同步</span></span><strong><span><span><span>: </span></span></span></strong><span><span>支持配置並啓用遠端倉庫</span></span><span><span><span>, </span></span></span><span><span>自動數據同步，支持</span></span><span><span><span>OpenCSG</span></span></span><span><span>傳神社區、</span></span><span><span><span>Huggingface</span></span></span><span><span>等遠端源。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>代碼倉庫<strong>：</strong>內置代碼</span></span><span><span><span>Repo</span></span></span><span><span>管理功能，可關聯模型、數據集、</span></span><span><span><span>Space</span></span></span><span><span>空間應用的代碼。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span><span>AI</span></span></span></strong><strong><span><span>能力增強</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>一鍵微調</span></span><strong><span><span><span>: </span></span></span></strong><span><span>支持與</span></span><span><span><span>OpenCSG llm-finetune</span></span></span><span><span>集成，一鍵啓動模型微調訓練。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>一鍵推理</span></span><strong><span><span><span>:</span></span></span></strong><span><span>支持與</span></span><span><span><span>OpenCSG llm-inference</span></span></span><span><span>集成，一鍵啓動模型推理服務。</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>應用與企業功能</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>應用空間</span></span><strong><span><span><span>: </span></span></span></strong><span><span>支持託管</span></span><span><span><span>Gradio/Streamlit</span></span></span><span><span>應用併發布到</span></span><span><span><span>Space</span></span></span><span><span>應用空間</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>細粒度權限<strong>：</strong>面向企業架構的細粒度權限和訪問控制設置</span></span></span></span></span></li></ul><ul><li><span><span><span><strong><span><span>安全合規</span></span></strong></span></span></span></li></ul><ul><li><span><span><span><span><span>資產元數據</span></span><strong><span><span><span>: </span></span></span></strong><span><span>資產的元數據管理機制，支持自定義元數據類型和對應的</span></span><span><span><span>AutoTag</span></span></span><span><span>規則。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>合規驗證</span></span><strong><span><span><span>: </span></span></span></strong><span><span>模型和</span></span><span><span><span>License</span></span></span><span><span>的合規性校驗與溯源驗證</span></span></span></span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:center">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span>選擇</span></span></strong><strong><span><span><span> CSGHub </span></span></span></strong><strong><span><span>開源項目</span></span></strong></span></span></span></p><ul><li><span><span><span><span><span>開源許可證友好、可商用，</span></span><span><span><span>Apache2</span></span></span><span><span>。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>開放式合作：我們歡迎大家加入我們開源項目的建設，貢獻自己的想法、建議或代碼。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>持續更新與改進：我們承諾不斷更新</span></span><span><span><span>CSGHub</span></span></span><span><span>，並積極採納社區反饋，不斷改進項目。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>傳統</span></span><span><span><span>DevOps</span></span></span><span><span>快速適配最佳選擇，通過原生大模型項目與傳統</span></span><span><span><span>DevOps</span></span></span><span><span>工具結合和集成。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>無論您是開發者、數據科學家，還是熱衷於這個領域的愛好者，您都可以參與其中：</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>貢獻代碼：瀏覽我們的</span></span><span><span><span>GitHub</span></span></span><span><span>倉庫，提交您的代碼或修復</span></span><span><span><span>bug</span></span></span><span><span>。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>提供反饋：提交問題或建議，幫助我們改進和發展項目。</span></span></span></span></span></li></ul><ul><li><span><span><span><span><span>分享經驗：在社交媒體上分享您使用</span></span><span><span><span>CSGHub</span></span></span><span><span>的經驗和見解。</span></span></span></span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><strong><span><span>共建</span></span></strong><strong></strong><strong><span><span>共享</span></span></strong><strong></strong><strong><span><span>開源</span></span></strong><strong></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span>在</span></span><span><span><span> CSGHub </span></span></span><span><span>中，</span></span><span><span><span> C </span></span></span><span><span>代表</span></span><strong><span><span><span>Converged</span></span></span></strong><span><span>，我們將利用混合雲的優勢，算力降本增效，充分釋放混合雲的算力及存儲資源；</span></span><span><span><span>S </span></span></span><span><span>代表</span></span><strong><span><span><span>Software refined</span></span></span></strong><span><span>，我們將利用自然語言技術，發掘</span></span><span><span><span>LLM</span></span></span><span><span>的潛力，重新定義軟件的交付方式。通過大模型編程，人力降本增效；</span></span><span><span><span>G </span></span></span><span><span>代表</span></span><strong><span><span><span>Generative</span></span></span></strong><span><span>，我們將致力於大模型的民主化和大眾化，讓大模型更易於訪問、更廉價、更容易定製，更適合垂直行業使用。</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>是一個剛剛起步的項目，我們相信它將在解決大模型資產管理方面能夠發揮積極作用。</span></span><span><span><span>OpenCSG </span></span></span><span><span>旨在成為中國開源領域和軟件開發領域的新變革者，推出的首個大模型原生託管平台，這一舉措標誌着中國大模型開源社區發展已經邁入新的里程碑。加入我們的社區，共同創造更美好的未來！</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>官網：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fportal.opencsg.com%2F" target="_blank"><span><span><span>https://portal.opencsg.com/</span></span></span></a></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>CSGHub </span></span></span><span><span>源碼：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenCSGs%2Fcsghub" target="_blank"><span><span><span><span style="color:#3370ff"><span><span>https://github.com/OpenCSGs/csghub</span></span></span></span></span></span></a>&nbsp;&nbsp; </span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275770</guid>
            <link>https://www.oschina.net/news/275770</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LG 洗衣機每日使用的數據流量高達 3.6GB？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>推特用戶&nbsp;Johnie 發帖稱自己的 LG 洗衣機每日使用的數據流量高達 3.6GB。根據推文的附圖，這是華碩路由器的後台界面，從統計數據來看，這台 LG 洗衣機在一天內的下載數據流量是&nbsp;100MB 左右，但上傳的數據流量高達 3.57GB，佔這名用戶每天上網流量的 5%。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d8749eb7537cb6b1cd4c0999273f8730d7a.png" referrerpolicy="no-referrer"></p><p>via<u><em>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FJohnie%2Fstatus%2F1744556503183585471" target="_blank">https://twitter.com/Johnie/status/1744556503183585471</a></em></u></p></blockquote><p>據介紹，LG 為具備聯網功能的洗衣機提供了名為 SmartThinQ 的應用程序，供用戶控制和自動化所有兼容的家用設備。連接洗衣機後，可以下載額外的洗滌程序等功能。但在這種情況下使用的數據量顯然有些問題。</p><p>有人回覆稱，這台洗衣機可能是被攻擊者入侵後用於「挖礦」，所以才會如此耗費數據流量。</p><p>Johnie 後續在路由器屏蔽了該設備，以阻止它使用數據流量。一天後，他發佈了一篇跟帖，稱這很可能只是華碩路由器界面工具的報告不準確。其他一些用戶也證實了軟件中可能會出現這種錯誤。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-5ccae8de5a5ecb50a8ca73fe7c43e7b1479.png" referrerpolicy="no-referrer"></p><p>via<u><em>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FJohnie%2Fstatus%2F1745194782463508672" target="_blank">https://twitter.com/Johnie/status/1745194782463508672</a></em></u></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275768</guid>
            <link>https://www.oschina.net/news/275768</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SpringBoot 2.x 正式停更了。Java 8 由 Solon 接收！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; text-align:start">最近有好多個新聞説：SpringBoot 2.x 正式停更了，Java 8 怎麼辦？當然用 Solon 嘍！</p><pre><code class="language-java"><strong><span style="background-color:#f1c40f">Solon，同時支持 jdk8, jdk11, jdk17, jdk21。也支持 graalvm </span><span style="color:#a626a4"><span style="background-color:#f1c40f">native</span></span><span style="background-color:#f1c40f"> image。</span></strong></code></pre><p style="color:#24292e; text-align:start">既支持 java8，也支持 java21 的：</p><pre><code class="language-java"><span style="color:#4078f2">@SolonMain</span><span style="color:#a626a4">public</span><span style="color:#a626a4">class</span><span style="color:#c18401">App</span> {
    <span style="color:#a626a4">public</span><span style="color:#a626a4">static</span><span style="color:#a626a4">void</span><span style="color:#4078f2">main</span><span>(String[] args)</span> {
        Solon.start(App.class, args, app-&gt;{
            app.onEvent(HttpServerConfigure.class, e-&gt;{
                <em>//啓用 Java 21 的虛擬線程</em>
                e.setExecutor(Executors.newVirtualThreadPerTaskExecutor());
            });
        });
    }
}
</code></pre><h2>Solon 是什麼框架？</h2><p style="color:#24292e; text-align:start"><strong>Java 新的"生態級"應用開發框架</strong>。<span style="background-color:#f1c40f">從零開始構建，有自己的標準規範與開放生態</span>，所以才能支持 java8 - java21（歷時「六」年，具備全球第二級別的生態規模）。</p><h2>相對於 Spring，有什麼特點？</h2><ul><li>國產！國產！國產！</li><li>啓動快 5 ～ 10 倍。<span>&nbsp;</span><strong>（更快）</strong></li><li>qps 高 2～ 3 倍。<span>&nbsp;</span><strong>（更高）</strong></li><li>低流量內存節省 1/3 ~ 1/2。<span>&nbsp;</span><strong>（更少）</strong></li><li>打包可以縮小到 1/2 ~ 1/10；比如，300Mb 的變成了 23Mb。<span>&nbsp;</span><strong>（更小）</strong></li></ul><h2>項目倉庫地址？</h2><ul><li>gitee：<a href="https://gitee.com/noear/solon">https://gitee.com/noear/solon</a></li><li>github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fsolon" target="_blank">https://github.com/noear/solon</a></li></ul><h2>架構圖？</h2><ul><li>Solon 生態架構圖</li></ul><p style="color:#24292e; text-align:start"><img src="https://teamx.noear.org/img/686b4cb1435e4ce1a05f1b47971a443f.png" width="600" referrerpolicy="no-referrer"></p><ul><li>Solon Cloud 生態架構圖</li></ul><p style="color:#24292e; text-align:start"><img src="https://teamx.noear.org/img/07ee442b58774aabb350484304690eb3.png" width="600" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275767</guid>
            <link>https://www.oschina.net/news/275767</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「商業版本」 Qt 6.5 LTS 系列發佈首個更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#09102b">Qt 6.5.4 LTS<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.qt.io%2Fblog%2Fcommercial-lts-qt-6.5.4-released" target="_blank"> 已發佈</a>，</span>此版本原計劃在 11 月底推出。<span style="background-color:#ffffff; color:#09102b">這是&nbsp;</span>Qt 6.5 系列進入<strong>「僅限商業客戶使用」</strong>週期後的首次更新，意味着只有付費的 Qt 客戶才能訪問這些新的點版本更新。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3937be561be37b8fd3fb09bed596cfa755f.png" referrerpolicy="no-referrer"></p><p>公告寫道，Qt 6.5.4 沒有添加任何新功能，主要是修復錯誤和提供其他改進。與 Qt 6.5.3 相比，Qt 6.5.4 包含約 355 個錯誤修復、安全更新和其他改進。此外還提供了針對 CVE-2023-51714 和 CVE-2023-45872 安全漏洞的修復。&nbsp;這些錯誤包括 Qt 的 HTTP2 代碼中的整數溢出、加載無效的 QML 圖像源可能會導致 Qt 內崩潰或其他問題。</p><p>延伸閲讀</p><ul><li><a href="https://www.oschina.net/news/262391/qt-6-5-lts-commercial-only" target="_blank">Qt 6.5 LTS 轉為 「僅面向商業客戶提供」 階段</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275760/qt-6-5-4-lts</guid>
            <link>https://www.oschina.net/news/275760/qt-6-5-4-lts</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[全球 AI 專利申請量達 129 萬，中國佔比 64% 位列第一]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>中國信息通信研究院（簡稱「中國信通院」）近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F8PeEO825PgxrTaPmhOr4ug" target="_blank">發佈</a>了《全球數字經濟白皮書（2023 年）》，總結了全球數字經濟政策佈局新動向、分析了全球數字經濟發展最新態勢、研究了全球數字經濟重點領域發展情況並做出未來發展展望。</p><p>從產業規模看，全球人工智能產業規模快速增長。2023 年全球人工智能市場收入預計達 5132 億美元，同比增長 20.7%。從企業發展看，截至 2023 年三季度，全球人工智能企業有 29542 家，中美人工智能企業數佔全球總數的近一半，美國有 9914 家 (佔比為 34%)，中國有 4469 家 (佔比為 15%)。</p><p>白皮書還提到，大模型掀起時代浪潮，相關產品及應用研發加速。如，OpenAl 發佈千億級參數的多模態預訓練模型 GPT-4，谷歌發佈在多語言翻譯上表現突出的 PaLM2，IBM 發佈 Watsonx 等。</p><p>此外，在 AI 投融資金額方面，2022 年，全球 466 億美元，同比下降 43%，2023 年前三季度，全球 243 億美元，同比下降 38%。值得關注的是，AIGC 成為最熱門領域，融資金額為 55.6 億美元，同比增長 137%，佔融資總額的 23%。</p><p>在 AI 論文發表方面，2013-2023 年 Q3，全球論文 117 萬篇，中國論文達 36.8 萬篇，位列全球第一，全球高水平論文 11 萬篇。在專利申請授權方面，2013-2023 年 Q3，全球 AI 專利申請量累計達 129 萬，全球 AI 專利授權量累計超 51 萬，中國 AI 專利申請量佔全球 64%，位列全球第一。</p><p><img height="311" src="https://oscimg.oschina.net/oscnet/up-e10dd424de8202d2026f3ba76891fa6b055.png" width="500" referrerpolicy="no-referrer"></p><p><img height="307" src="https://oscimg.oschina.net/oscnet/up-0a747a4d8a9619f057d9d5f54fd93c530e7.png" width="500" referrerpolicy="no-referrer"></p><p><img height="317" src="https://oscimg.oschina.net/oscnet/up-55234762406a96d9879a82e6b01fca4e871.png" width="500" referrerpolicy="no-referrer"></p><p><img height="306" src="https://oscimg.oschina.net/oscnet/up-ee5736d9947bb79c55fb6014fd60b63140a.png" width="500" referrerpolicy="no-referrer"></p><p><img height="300" src="https://oscimg.oschina.net/oscnet/up-a602e2e0cdfcd0a44a5c35b057a6564e544.png" width="500" referrerpolicy="no-referrer"></p><p><img height="313" src="https://oscimg.oschina.net/oscnet/up-843b623cbf5497a7f11f244e285c3df3c7c.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 02:29:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275758</guid>
            <link>https://www.oschina.net/news/275758</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一款 StarRocks 可視化建表和數據編輯的神器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span style="color:#1c1e21">什麼是 StarRocks？</span></h1><p style="margin-left:0; margin-right:0"><span style="color:#1c1e21">StarRocks 是</span><strong><span style="color:#1c1e21">新一代極速全場景 MPP (Massively Parallel Processing) 數據庫</span></strong><span style="color:#1c1e21">。StarRocks 的願景是能夠讓用戶的</span><strong><span style="color:#1c1e21">數據分析變得更加簡單和敏捷</span></strong><span style="color:#1c1e21">。用戶無需經過複雜的預處理，就可以用 StarRocks 來支持多種數據分析場景的極速分析。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">為了滿足業務上的分析需求 </span><span>StarRocks 設計了四種數據模型（明細模型、聚合模型、更新模型、主鍵模型），它們有各自的特點以適配不同的業務場景。本文將從創建數據模型表開始，配合簡潔的案例，來講解明細模型的用法和特點。</span></p><span id="OSC_h1_2"></span><h1><span style="color:#4d4d4d">明細模型究竟是啥？</span></h1><p style="margin-left:0; margin-right:0"><span style="color:#4d4d4d">首先我們來看 StarRocks 官方的定義：</span></p><div><p style="margin-left:0; margin-right:0"><span style="color:#1c1e21">明細模型是默認的建表模型。如果在建表時</span><strong><span style="color:#1c1e21">未指定任何模型，默認創建的是明細類型的表</span></strong><span style="color:#1c1e21">。</span></p><p style="margin-left:0; margin-right:0"><span style="color:#1c1e21">創建表時，支持定義排序鍵。如果</span><strong><span style="color:#1c1e21">查詢的過濾條件包含排序鍵，則 StarRocks 能夠快速地過濾數據</span></strong><span style="color:#1c1e21">，提高查詢效率。明細模型適用於日誌數據分析等場景，</span><strong><span style="color:#1c1e21">支持追加新數據，不支持修改歷史數據</span></strong><span style="color:#1c1e21">。</span></p></div><p style="margin-left:0; margin-right:0"><span>其次我們來看下 StarRocks 明細模型的標準建表語句與 MySQL 的差異：</span></p><p style="margin-left:0; margin-right:0"><img height="739" src="https://oscimg.oschina.net/oscnet/up-bc67c8412574134b5b87b53c3ffbbdbad77.png" width="1500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span>可以看到除了 StarRocks 特有的關鍵字之外，兩者語法大致是相同的。通過上述內容，我們可以總結以下關於 StarRocks 明細模型的信息：</span></p><ul><li><span style="color:#1c1e21">如果在建表語句中不指定具體模型，也就是省略不寫，默認就是 DUPLICATE KEY 明細模型，並且會自動選取前三列作為排序鍵</span></li><li><span style="color:#1c1e21">指定排序鍵的作用類似於 MySQL 給列設置普通索引，目的是為了提高查詢效率</span></li><li><span style="color:#1c1e21">寫入的數據無論是否完全一致，都會插入到數據庫中而且不支持 Update 語法</span></li></ul><p style="margin-left:0; margin-right:0"><span>以上信息就是明細模型的特點，我們從對比的角度講，明細模型大致相當於：</span></p><p style="margin-left:0; margin-right:0"><strong><span>MySQL 具有普通索引的無主鍵表，並且不支持 Update 操作</span></strong><span>。</span></p><span id="OSC_h1_3"></span><h1><span style="color:#1c1e21">怎麼建表？</span></h1><ul><li><span>使用 </span><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fclouddm-personal" target="_blank" rel="nofollow"><span>CloudDM</span></a></strong><span>，</span><span>添加完 </span><span>StarRocks 數據源之後，在表視圖中右鍵方式開始新建表操作：</span></li></ul><p><img height="784" src="https://oscimg.oschina.net/oscnet/up-6b18873a50a6fcd0f85a7a45178d6ce645c.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>配置表名等基本信息</span></strong></li></ul><p><img height="787" src="https://oscimg.oschina.net/oscnet/up-a9413b095e530473a74df87c41e2f32df88.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>添加列信息</span></strong><span>，在結構設計器中選擇列，然後點擊增加按鈕新建一個列，在右側可以配置列的信息</span></li></ul><p style="margin-left:0; margin-right:0"><img height="784" src="https://oscimg.oschina.net/oscnet/up-b72f2bce2808716519ee13e20a6a7741fd8.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>設置表的數據模型</span></strong><span>，點擊數據模型，點擊添加類型選擇「明細模型」，接着在下方選擇排序鍵</span></li></ul><p style="margin-left:0; margin-right:0"><img height="784" src="https://oscimg.oschina.net/oscnet/up-41aa96fcf76a5b82fd136143da5919cc047.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>配置排序鍵</span></strong><span>，在右方具體選擇列，多個排序鍵列需要多次點擊增加。</span></li></ul><p style="margin-left:0; margin-right:0"><img height="784" src="https://oscimg.oschina.net/oscnet/up-f0acd773ced7134f8fc4005d3662ac6d27f.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><strong><span>點擊保存</span></strong><span>，生成建表語句，可選擇立即執行或者複製 SQL 語句</span></li></ul><p style="margin-left:0; margin-right:0"><img height="787" src="https://oscimg.oschina.net/oscnet/up-f0bd5e94df2b2e63789388e9f5fdc4b6a68.png" width="1500" referrerpolicy="no-referrer"></p><span id="OSC_h1_4"></span><h1><span style="color:#1c1e21">怎麼寫數據？</span></h1><ul><li><span>右鍵點擊新建表，並選擇 </span><strong><span>編輯數據</span></strong></li></ul><p style="margin-left:0; margin-right:0"><img height="796" src="https://oscimg.oschina.net/oscnet/up-717792fcba330d6c78b2680e456868d028b.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>準備三行數據，前兩行數據完全相同，點擊 "+" 符號，填寫完成後點擊提交，保存這三條數據</span></li></ul><p style="margin-left:0; margin-right:0"><img height="783" src="https://oscimg.oschina.net/oscnet/up-da69383bcc5763f7770e6894862283bb858.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>查看</span><span>插</span><span>入的數據，發現三條都已</span><span>寫入</span><span>，驗證明細模型的特點:</span><span style="color:#1c1e21">寫入的數據無論是否完全一致，都會插入到數據庫中</span><span>。如果選擇的是 </span><span>StarRocks 聚合模型，上面三條數據插入之後就會變為 2 條</span></li></ul><p style="margin-left:0; margin-right:0"><img height="783" src="https://oscimg.oschina.net/oscnet/up-34560e3ba343532c0abb329b57d1363c8f3.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>驗證是否支持 Update，雙擊 「SR_TEST」 庫打開新的查詢窗口，針對這個表嘗試做一次 UPDATE 操作，結果執行報錯：</span></li></ul><p style="margin-left:0; margin-right:0"><img height="783" src="https://oscimg.oschina.net/oscnet/up-a60b30a85c8a83de75bf963af24f77ed2e3.png" width="1500" referrerpolicy="no-referrer"></p><ul><li><span>CloudDM 可視化數據編輯會直接禁用更改，和 StarRocks 數據庫約束保持一致</span></li></ul><p style="margin-left:0; margin-right:0"><img height="789" src="https://oscimg.oschina.net/oscnet/up-5f8843a772ab21cbbeac5fc97a0da025786.png" width="1500" referrerpolicy="no-referrer"></p><span id="OSC_h1_5"></span><h1><span>總結</span></h1><p style="margin-left:0; margin-right:0"><span>本文我們使用&nbsp;</span><span style="color:#1c1e21">CloudDM 可視化的方式創建了</span><span>&nbsp;StarRocks </span><span style="color:#1c1e21">明細模型表，並且同樣可視化的方式對明細模型表進行了數據編輯操作。</span></p><p style="margin-left:0; margin-right:0">以下是這款小工具的下載鏈接，感興趣的小夥伴可以下載試用一下：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.clougence.com%2Fclouddm-personal" target="_blank" rel="nofollow"><span>https://www.clougence.com/clouddm-personal</span></a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 15 Jan 2024 02:19:11 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5170379/blog/10823556</guid>
            <link>https://my.oschina.net/u/5170379/blog/10823556</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024 技術招聘狀況：AI 工具被視為作弊，Python 需求最大]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">技術招聘平台 CoderPad 最新發布了一份「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcoderpad.io%2Fsurvey-reports%2Fcoderpad-and-codingame-state-of-tech-hiring-2024%2F" target="_blank">State of Tech Hiring 2024</a>」報告，基於來自 149 個不同國家/地區的 13,000 多名開發者、以及 143 個國家/地區約 5500 名 HR 人員的反饋。研究了開發人員對工作的期望和需求、技術招聘流程的演變以及 2024 年開發人員招聘優先事項和潛在障礙。</span></p><p><span style="color:#000000">報告指出，70% 的開發人員認為 AI 將有助於減少他們的工作量，並列舉了一些好處：代碼輔助、學習和教程、自動完成/代碼生成以及文檔和 API 支持等。ChatGPT 是最常用的 AI 工具，其他的還包括 Copilot、Bard、Bing AI 等。60% 的開發人員希望在工作中更多地使用 AI。</span></p><p><span style="color:#000000">但也有 33% 的受訪開發人員表示在工作中不使用任何 AI 工具：其中 29% 是因為本人不信任該技術，28% 的是因為僱主反對；四分之一的開發人員認為 AI 不可靠或效率低下。43% 的受訪者表示對 AI 所帶來的影響持樂觀態度；23% 的人持懷疑態度，還有 6% 甚至擔心這項技術會影響其職業或工作前景。</span></p><p><span style="color:#000000">值得一提的是，儘管有 67% 的開發者和 38% 的 HR 表示已經在工作中使用了 AI 工具，但對於招聘過程中 AI 工具的使用卻還存在一些爭議。近四分之一（23%）的 HR 認為面試者使用 AI 工具屬於作弊。只有 8% 的公司鼓勵在招聘過程中使用 AI，48% 的受訪者表示它的可接受性取決於使用情況。</span></p><p><span style="color:#000000">只有 19% 的開發人員會在招聘過程中公開使用 AI，還有三分之一的開發人員認為在面試或技術測試中使用 AI 工具是一種作弊行為。</span></p><p><span style="color:#000000">在被問及知名度以及招聘中需求最高的<strong>編程語言</strong>時，排名前十的分別是：Python、JavaScript、Java、C#、SQL、C++、TypeScript、HTML CSS、PHP、C。知名度和需求最高的框架則是 React 和 Node.js。</span></p><p><img height="1112" src="https://oscimg.oschina.net/oscnet/up-159c837d701bf90f73a6c17dbfc39c4cf78.png" width="500" referrerpolicy="no-referrer"></p><p>其他的一些發現還包括：</p><ul><li><span style="color:#000000">36% 的開發人員表示對承擔管理職責不感興趣。</span></li><li><span style="color:#000000">開發人員還希望有機會在工作中磨練自己的技術技能，其中最想學習的三項技能分別是 Web 開發、機器學習/深度學習和遊戲開發。</span></li><li><span style="color:#000000">全棧、後端和前端開發人員仍然是需求最大的崗位。此外，還有 21% 的組織希望在 2024 年聘請 ML/AI 專家，去年的這一比例為 18%。</span></li><li><span style="color:#000000">開發人員對工作安全的擔憂與日俱增，21% 的人表示，與一年前相比，他們的工作安全感降低了（去年為 17%）。37% 的人表示在過去 12 個月中沒有明顯變化，32% 的人表示感覺更有安全感。</span></li><li><span style="color:#000000">近一半的開發人員考慮在未來 12 個月內離職。</span></li></ul><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcoderpad.io%2Fsurvey-reports%2Fcoderpad-and-codingame-state-of-tech-hiring-2024%2F" target="_blank">查看完整報告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 03:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275663/state-of-tech-hiring-2024</guid>
            <link>https://www.oschina.net/news/275663/state-of-tech-hiring-2024</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Git 開發人員討論引入 Rust 的可能性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Git 開發人員正討論在其代碼庫中使用 Rust 編程語言，以補充現有的 C 和 Python 語言的想法。</p><blockquote><p>去年年底的假期我花了一些時間思考如何將 Rust 引入 Git 項目。</p><p>將 Rust 引入 Linux 內核的工作正在緊鑼密鼓地進行中（見 [1]、[2]）。在他們既定的目標中，我認為有幾個這可能與 Git 項目潛在相關：</p><ul><li>降低內存安全錯誤、數據爭用、內存泄漏等風險。 得益於該語言的安全保證。</li><li>在 Rust 中重構或引入新代碼時更容易（假設幾乎不使用語言的「不安全」功能）。</li><li>通過使用更現代的語言，為 Git 做貢獻變得更容易，也更容易為更多程序員所使用。</li></ul><p>鑑於這些優勢的誘惑力，我認為至少值得考慮和討論如何讓 Rust 進入 Junio 的樹中。</p></blockquote><p><img height="296" src="https://oscimg.oschina.net/oscnet/up-89b0fcaa21f05d837885d3b9e645f5dcb9c.png" width="300" referrerpolicy="no-referrer"></p><p>然而，雖然 Rust 的內存安全特性對許多人來説是個利好，但 Git 開發者的反應卻好壞參半。部分<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FGCC-Rust-Developer-Discussion" target="_blank">原因是</a> Git 廣泛應用於多種不同的平台和 CPU 架構。目前，使用 Rust 幾乎必須使用基於 LLVM 的 rustc 編譯器。雖然 GCC 編譯器等正在努力添加可用的 Rust 支持，但目前這些替代方案還沒有投入生產。因此，如果 Rust 代碼被強制使用，Git 的使用可能會受到限制，否則他們可能不得不在初期將基於 Rust 的 Git 功能作為可選項。&nbsp;</p><p>更多詳情可以通過此<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fgit%2FCALNs47s3tUQoOD4ejdoTn6y12ywjL0j5hWU-fUnBLe_o3vV5SQ%40mail.gmail.com%2FT%2F" target="_blank">郵件列表線程</a>進行了解。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275659/git-rust-discussion</guid>
            <link>https://www.oschina.net/news/275659/git-rust-discussion</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Motūrus OS —— 適用於 x64 虛擬機的 Rust 優先操作系統]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Motūrus 項目為雲構建了一個簡單、快速、安全的操作系統（Motūrus OS）。</p><p>更具體地説，Motūrus OS（有時也稱作 Motor OS）是一種新的操作系統，針對基於虛擬機的工作負載，如網絡服務、"無服務器"、邊緣緩存等。</p><p>Motūrus OS 是基於 Rust 的微內核操作系統，專門針對虛擬化工作負載。它目前支持基於 x64 KVM 的虛擬機，可在 Qemu 或 Cloud Hypervisor 中運行。</p><p><img alt="" height="559" src="https://static.oschina.net/uploads/space/2024/0108/153945_gPrH_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 02:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/motor-os</guid>
            <link>https://www.oschina.net/p/motor-os</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 捕獲數據更改 (CDC) 平台 Debezium]]>
            </title>
            <description>
                <![CDATA[<p><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE-2.0.html"><img src="http://img.shields.io/:license-apache%202.0-brightgreen.svg" alt="License" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=http%3A%2F%2Fsearch.maven.org%2F%23search%257Cga%257C1%257Cg%253A%2522io.debezium%2522"><img src="https://maven-badges.herokuapp.com/maven-central/io.debezium/debezium-parent/badge.svg" alt="Maven Central" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdebezium.zulipchat.com%2F%23narrow%2Fstream%2F302529-users"><img src="https://img.shields.io/badge/chat-users-brightgreen.svg" alt="User chat" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdebezium.zulipchat.com%2F%23narrow%2Fstream%2F302533-dev"><img src="https://img.shields.io/badge/chat-devs-brightgreen.svg" alt="Developer chat" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgroups.google.com%2Fforum%2F%23%21forum%2Fdebezium"><img src="https://img.shields.io/:mailing%20list-debezium-brightgreen.svg" alt="Google Group" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=http%3A%2F%2Fstackoverflow.com%2Fquestions%2Ftagged%2Fdebezium"><img src="http://img.shields.io/:stack%20overflow-debezium-brightgreen.svg" alt="Stack Overflow" referrerpolicy="no-referrer"></a></p><p>Copyright Debezium Authors.
Licensed under the <a href="https://gitee.com/link?target=http%3A%2F%2Fwww.apache.org%2Flicenses%2FLICENSE-2.0">Apache License, Version 2.0</a>.
The Antlr grammars within the debezium-ddl-parser module are licensed under the <a href="https://gitee.com/link?target=https%3A%2F%2Fopensource.org%2Flicenses%2FMIT">MIT License</a>.</p><p>中文 | <a href="https://gitee.com/opengauss/debezium/blob/master/README.md">English</a> | <a href="https://gitee.com/opengauss/debezium/blob/master/README_JA.md">Japanese</a></p><h1><a id="user-content-debezium-簡介" class="anchor" href="https://gitee.com/opengauss/debezium#debezium-%E7%AE%80%E4%BB%8B"></a>Debezium 簡介</h1><p>Debezium 是一個開源項目，為捕獲數據更改 (change data capture,CDC) 提供了一個低延遲的流式處理平台。你可以安裝並且配置 Debezium 去監控你的數據庫，然後你的應用就可以消費對數據庫的每一個行級別 (row-level) 的更改。只有已提交的更改才是可見的，所以你的應用不用擔心事務 (transaction) 或者更改被回滾 (roll back)。Debezium 為所有的數據庫更改事件提供了一個統一的模型，所以你的應用不用擔心每一種數據庫管理系統的錯綜複雜性。另外，由於 Debezium 用持久化的、有副本備份的日誌來記錄數據庫數據變化的歷史，因此，你的應用可以隨時停止再重啓，而不會錯過它停止運行時發生的事件，保證了所有的事件都能被正確地、完全地處理掉。</p><p>監控數據庫，並且在數據變動的時候獲得通知一直是很複雜的事情。關係型數據庫的觸發器可以做到，但是隻對特定的數據庫有效，而且通常只能更新數據庫內的狀態 (無法和外部的進程通信)。一些數據庫提供了監控數據變動的 API 或者框架，但是沒有一個標準，每種數據庫的實現方式都是不同的，並且需要大量特定的知識和理解特定的代碼才能運用。確保以相同的順序查看和處理所有更改，同時最小化影響數據庫仍然非常具有挑戰性。</p><p>Debezium 提供了模塊為你做這些複雜的工作。一些模塊是通用的，並且能夠適用多種數據庫管理系統，但在功能和性能方面仍有一些限制。另一些模塊是為特定的數據庫管理系統定製的，所以他們通常可以更多地利用數據庫系統本身的特性來提供更多功能。</p><h2><a id="user-content-debezium 基礎架構" class="anchor" href="https://gitee.com/opengauss/debezium#debezium%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84"></a>Debezium 基礎架構</h2><p>Debezium 是一個捕獲數據更改 (CDC) 平台，並且利用 Kafka 和 Kafka Connect 實現了自己的持久性、可靠性和容錯性。每一個部署在 Kafka Connect 分佈式的、可擴展的、容錯性的服務中的 connector 監控一個上游數據庫服務器，捕獲所有的數據庫更改，然後記錄到一個或者多個 Kafka topic(通常一個數據庫表對應一個 kafka topic)。Kafka 確保所有這些數據更改事件都能夠多副本並且總體上有序 (Kafka 只能保證一個 topic 的單個分區內有序)，這樣，更多的客戶端可以獨立消費同樣的數據更改事件而對上游數據庫系統造成的影響降到很小 (如果 N 個應用都直接去監控數據庫更改，對數據庫的壓力為 N，而用 debezium 彙報數據庫更改事件到 kafka，所有的應用都去消費 kafka 中的消息，可以把對數據庫的壓力降到 1)。另外，客戶端可以隨時停止消費，然後重啓，從上次停止消費的地方接着消費。每個客戶端可以自行決定他們是否需要 exactly-once 或者 at-least-once 消息交付語義保證，並且所有的數據庫或者表的更改事件是按照上游數據庫發生的順序被交付的。</p><p>對於不需要或者不想要這種容錯級別、性能、可擴展性、可靠性的應用，他們可以使用內嵌的 Debezium connector 引擎來直接在應用內部運行 connector。這種應用仍需要消費數據庫更改事件，但更希望 connector 直接傳遞給它，而不是持久化到 Kafka 裏。</p><h2><a id="user-content-常見使用場景" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%B8%B8%E8%A7%81%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF"></a>常見使用場景</h2><p>Debezium 有很多非常有價值的使用場景，我們在這兒僅僅列出幾個更常見的使用場景。</p><h3><a id="user-content-緩存失效 cache-invalidation" class="anchor" href="https://gitee.com/opengauss/debezium#%E7%BC%93%E5%AD%98%E5%A4%B1%E6%95%88cache-invalidation"></a>緩存失效 (Cache invalidation)</h3><p>在緩存中緩存的條目 (entry) 在源頭被更改或者被刪除的時候立即讓緩存中的條目失效。如果緩存在一個獨立的進程中運行 (例如 Redis，Memcache，Infinispan 或者其他的)，那麼簡單的緩存失效邏輯可以放在獨立的進程或服務中，從而簡化主應用的邏輯。在一些場景中，緩存失效邏輯可以更復雜一點，讓它利用更改事件中的更新數據去更新緩存中受影響的條目。</p><h3><a id="user-content-簡化單體應用 simplifying-monolithic-applications" class="anchor" href="https://gitee.com/opengauss/debezium#%E7%AE%80%E5%8C%96%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8simplifying-monolithic-applications"></a>簡化單體應用 (Simplifying monolithic applications)</h3><p>許多應用更新數據庫，然後在數據庫中的更改被提交後，做一些額外的工作：更新搜索索引，更新緩存，發送通知，運行業務邏輯，等等。這種情況通常稱為雙寫 (dual-writes)，因為應用沒有在一個事務內寫多個系統。這樣不僅應用邏輯複雜難以維護，而且雙寫容易丟失數據或者在一些系統更新成功而另一些系統沒有更新成功的時候造成不同系統之間的狀態不一致。使用捕獲更改數據技術 (change data capture,CDC)，在源數據庫的數據更改提交後，這些額外的工作可以被放在獨立的線程或者進程 (服務) 中完成。這種實現方式的容錯性更好，不會丟失事件，容易擴展，並且更容易支持升級。</p><h3><a id="user-content-共享數據庫 sharing-databases" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%85%B1%E4%BA%AB%E6%95%B0%E6%8D%AE%E5%BA%93sharing-databases"></a>共享數據庫 (Sharing databases)</h3><p>當多個應用共用同一個數據庫的時候，一個應用提交的更改通常要被另一個應用感知到。一種實現方式是使用消息總線，儘管非事務性 (non-transactional) 的消息總線總會受上面提到的雙寫 (dual-writes) 影響。但是，另一種實現方式，即 Debezium，變得很直接：每個應用可以直接監控數據庫的更改，並且響應更改。</p><h3><a id="user-content-數據集成 data-integration" class="anchor" href="https://gitee.com/opengauss/debezium#%E6%95%B0%E6%8D%AE%E9%9B%86%E6%88%90data-integration"></a>數據集成 (Data integration)</h3><p>數據通常被存儲在多個地方，尤其是當數據被用於不同的目的的時候，會有不同的形式。保持多系統的同步是很有挑戰性的，但是可以通過使用 Debezium 加上簡單的事件處理邏輯來實現簡單的 ETL 類型的解決方案。</p><h3><a id="user-content-命令查詢職責分離 cqrs" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%91%BD%E4%BB%A4%E6%9F%A5%E8%AF%A2%E8%81%8C%E8%B4%A3%E5%88%86%E7%A6%BBcqrs"></a>命令查詢職責分離 (CQRS)</h3><p>在命令查詢職責分離 <a href="https://gitee.com/link?target=http%3A%2F%2Fmartinfowler.com%2Fbliki%2FCQRS.html">Command Query Responsibility Separation (CQRS)</a> 架構模式中，更新數據使用了一種數據模型，讀數據使用了一種或者多種數據模型。由於數據更改被記錄在更新側 (update-side)，這些更改將被處理以更新各種讀展示。所以 CQRS 應用通常更復雜，尤其是他們需要保證可靠性和全序 (totally-ordered) 處理。Debezium 和 CDC 可以使這種方式更可行：寫操作被正常記錄，但是 Debezium 捕獲數據更改，並且持久化到全序流裏，然後供那些需要異步更新只讀視圖的服務消費。寫側 (write-side) 表可以表示面向領域的實體 (domain-oriented entities)，或者當 CQRS 和 <a href="https://gitee.com/link?target=http%3A%2F%2Fmartinfowler.com%2FeaaDev%2FEventSourcing.html">Event Sourcing</a> 結合的時候，寫側表僅僅用做追加操作命令事件的日誌。</p><h2><a id="user-content-building-debezium" class="anchor" href="https://gitee.com/opengauss/debezium#building-debezium"></a>Building Debezium</h2><p>使用 Debezium 代碼庫並在本地配置它需要以下軟件：</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgit-scm.com">Git</a> 2.2.1 or later</li><li>JDK 11 or later, e.g. <a href="https://gitee.com/link?target=http%3A%2F%2Fopenjdk.java.net%2Fprojects%2Fjdk%2F">OpenJDK</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fmaven.apache.org%2Findex.html">Apache Maven</a> 3.6.3 or later</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.docker.com%2Fengine%2Finstall%2F">Docker Engine</a> or <a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.docker.com%2Fdesktop%2F">Docker Desktop</a> 1.9 or later</li></ul><p>有關平台上的安裝説明，請參閲上面的鏈接。您可以通過以下指令查看安裝版本</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ git --version</span><span id="LC2" class="line">$ javac -version</span><span id="LC3" class="line">$ mvn -version</span><span id="LC4" class="line">$ docker --version</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-為什麼選用-docker" class="anchor" href="https://gitee.com/opengauss/debezium#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%80%89%E7%94%A8-docker"></a>為什麼選用 Docker?</h3><p>許多開源軟件項目使用 Git、Java 和 Maven，但需要 Docker 的情況不太常見。Debezium 被設計用來與許多外部系統進行通信，比如各種數據庫和服務，我們的集成測試驗證了 Debezium 成功地做到了這一點。但 Debezium 的構建系統使用 Docker 自動下載或創建必要的映像，併為每個系統啓動容器，而不是期望您在本地安裝所有這些軟件系統。然後，集成測試可以使用這些服務並驗證 Debezium 的行為是否符合預期，當集成測試完成時，Debezium 將自動停止它啓動的所有容器.</p><p>Debezium 還有一些不是用 Java 編寫的模塊，因此它們必須在目標操作系統上使用。Docker 讓我們的構建使用目標操作系統的映像和所有必要的開發工具來完成。</p><p>使用 Docker 有幾個優點：</p><ol><li>不需要在本地計算機上安裝、配置和運行每個所依賴的外部服務的特定版本，也不必在本地網絡上訪問它們。即使配置了，Debezium 也不會用到它們。</li><li>我們可以測試外部服務的多個版本。每個模塊可以啓動它需要的任何容器，因此不同的模塊可以輕鬆地使用不同版本的服務。</li><li>每個人都可以在本地運行完整的構建。 不必依賴遠程持續集成服務器在設置了所有必需服務的環境中運行構建。</li><li>所有構建都是一致的。當多個開發人員各自構建相同的代碼庫時，他們應該看到完全相同的結果——只要他們使用相同或等效的 JDK、Maven 和 Docker 版本。這是因為容器將在相同的操作系統上運行相同版本的服務。另外，所有的測試都是為了連接到運行在容器中的系統而設計的，因此沒有人需要修改連接屬性或特定於其本地環境的自定義配置。</li><li>不需要清理服務, 即使這些服務在本地修改和存儲數據. Docker <em>images</em> 被緩存, 所以 reusing 服務可以快速的啓動容器並保持一致性, 但是 Docker <em>containers</em> 永遠不會被重用：它們總是在原始的初始狀態下啓動，在關閉時被丟棄。集成測試依賴於容器，因此清理是自動處理的</li></ol><h3><a id="user-content-配置 docker 環境" class="anchor" href="https://gitee.com/opengauss/debezium#%E9%85%8D%E7%BD%AEdocker%E7%8E%AF%E5%A2%83"></a>配置 Docker 環境</h3><p>Docker Maven 插件通過檢查以下環境變量來解析 Docker 主機：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">export DOCKER_HOST=tcp://10.1.2.2:2376</span><span id="LC2" class="line">export DOCKER_CERT_PATH=/path/to/cdk/.vagrant/machines/default/virtualbox/.docker</span><span id="LC3" class="line">export DOCKER_TLS_VERIFY=1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Docker 類似的容器可以自動配置這些參數。</p><h3><a id="user-content-項目編譯" class="anchor" href="https://gitee.com/opengauss/debezium#%E9%A1%B9%E7%9B%AE%E7%BC%96%E8%AF%91"></a>項目編譯</h3><p>首先從 Git 存儲庫獲取代碼：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ git clone https://github.com/debezium/debezium.git</span><span id="LC2" class="line">$ cd debezium</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>用 maven 構建項目
$ mvn clean install</p><p>為不同的 dbms 使用不同的容器構建。請注意，如果 Docker 未運行或未配置，則可能會出現一個神祕的錯誤——如果是這種情況，請始終驗證 Docker 是否正在運行，也許可以使用 Docker ps 列出正在運行的容器。</p><h3><a id="user-content-本地沒有 docker" class="anchor" href="https://gitee.com/opengauss/debezium#%E6%9C%AC%E5%9C%B0%E6%B2%A1%E6%9C%89docker"></a>本地沒有 Docker?</h3><p>您可以使用以下命令跳過集成測試和 docker 來構建項目：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -DskipITs</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-使用 wal2json 或-pgoutput-logical-decoding-plug-ins-運行 postgres-connector 的測試" class="anchor" href="https://gitee.com/opengauss/debezium#%E4%BD%BF%E7%94%A8wal2json%E6%88%96-pgoutput-logical-decoding-plug-ins-%E8%BF%90%E8%A1%8Cpostgres-connector%E7%9A%84%E6%B5%8B%E8%AF%95"></a>使用 wal2json 或 pgoutput logical decoding plug-ins 運行 Postgres connector 的測試</h3><p>Postgres 連接器支持三個邏輯解碼插件，用於從 DB 服務器到連接器的流式更改：decoderbufs（默認）、wal2json 和 pgoutput。要使用 wal2json 運行 PG connector 的集成測試，請啓用「wal2json decoder」構建配置文件：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -pl :debezium-connector-postgres -Pwal2json-decoder</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>要使用 pgoutput 運行 PG connector 的集成測試，請啓用「pgoutput decoder」和「postgres-10」構建配置文件：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -pl :debezium-connector-postgres -Ppgoutput-decoder,postgres-10</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>在使用 wal2json 插件時，一些測試目前無法通過。</p><p>查找對<code>io.debezium.connector.postgresql.DecoderDifferences</code>中定義的類型的引用以找到這些測試。</p><h3><a id="user-content-對外部數據庫運行 postgres 連接器的測試-例如 amazon-rds" class="anchor" href="https://gitee.com/opengauss/debezium#%E5%AF%B9%E5%A4%96%E9%83%A8%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%90%E8%A1%8Cpostgres%E8%BF%9E%E6%8E%A5%E5%99%A8%E7%9A%84%E6%B5%8B%E8%AF%95-%E4%BE%8B%E5%A6%82amazon-rds"></a>對外部數據庫運行 Postgres 連接器的測試, 例如：Amazon RDS</h3><p>如果您要針對非 RDS 集羣進行測試，請注意須是超級用戶，不僅要具有複製權限，而且還要有登錄 pg_hba.conf 中所有數據庫的權限。它還要求目標服務器上必須有 <em>postgis</em> 包，才能通過某些測試。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">$ mvn clean install -pl debezium-connector-postgres -Pwal2json-decoder \</span><span id="LC2" class="line">     -Ddocker.skip.build=true -Ddocker.skip.run=true -Dpostgres.host=&lt;your PG host&gt; \</span><span id="LC3" class="line">     -Dpostgres.user=&lt;your user&gt; -Dpostgres.password=&lt;your password&gt; \</span><span id="LC4" class="line">     -Ddebezium.test.records.waittime=10</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>根據需要調整超時值。</p><p>有關在 RDS 上設置要測試的數據庫的詳細信息，請參閲 <a href="https://gitee.com/opengauss/debezium/blob/master/debezium-connector-postgres/RDS.md">PostgreSQL on Amazon RDS</a></p><h2><a id="user-content-貢獻源碼 contributing" class="anchor" href="https://gitee.com/opengauss/debezium#%E8%B4%A1%E7%8C%AE%E6%BA%90%E7%A0%81contributing"></a>貢獻源碼 (Contributing)</h2><p>Debezium 社區歡迎任何願意以任何方式提供幫助的人，無論是報告問題、幫助文檔，還是提供代碼更改以修復錯誤、添加測試或實現新功能。有關詳細信息，請參閲本<a href="https://gitee.com/opengauss/debezium/blob/master/CONTRIBUTE.md">文檔</a>。</p>]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/opengauss/debezium</guid>
            <link>https://gitee.com/opengauss/debezium</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 得物 SRE 視角下的藍綠髮布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>一、前言</h1><p style="color:#24292f; text-align:start">發佈變更是影響穩定性的一個重大因素，為了發佈異常時能快速回滾，增加發布期間的穩定性，也為瞭解決多服務部署時互相依賴而導致的發佈時間增長等問題，得物在今年引入一種新的發佈模式--藍綠髮布。這種發佈模式帶來了穩定性和效率的提升，這裏我們以 SRE 的視角來解讀下得物的藍綠髮布。</p><span id="OSC_h1_2"></span><h1>二、常見的發佈形式有哪些？分別有什麼優勢？</h1><span id="OSC_h2_3"></span><h2>全量發佈</h2><p style="color:#24292f; text-align:start">全量發佈是早期企業進行系統升級的一種方式，因為早期的服務大多為大型機，單實例程序為主。並沒有形成當下流行的微服務架構，因此當發佈時往往需要停機發布。生產環境禁止使用這種方式進行部署！</p><span id="OSC_h2_4"></span><h2>滾動發佈</h2><p style="color:#24292f; text-align:start">滾動發佈顧名思義，假如生產中 16 台機器，我們可以分成 4 批。每批 4 台機器，每批機器執行更新，從版本 V1 更新為 V2，更新後重新將其投入使用，連續不斷的更新其他機器，直到集羣中所有的實例都更新為版本 B 後，結束髮布。</p><p style="color:#24292f; text-align:start">這種方式的好處就是更新過程體驗影響少，費用開銷也少，發佈期間無需額外新增機器。但是缺點也同樣明顯，一旦開始發佈後，回滾時長很久，在多個有關聯的服務部署時，需要上游服務完全發佈後，才能發佈下游服務，整體發佈時間也很長。</p><p style="color:#24292f; text-align:start"><strong>滾動發佈流程演示：</strong></p><p style="color:#24292f; text-align:start"><img alt="640.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/640.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="2.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/2.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_5"></span><h2>藍綠髮布</h2><p style="color:#24292f; text-align:start">通常意義上的藍綠髮布一般是將服務分為兩組，藍組和綠組，正常運轉的情況下每組承載 50% 的流量。當準備發佈服務時, 將藍組流量設置為 0%，將綠組空閒出來，將服務部署到綠組的機器，然後利用 SLB 將流量切換到綠組的機器，讓綠組來運行業務，沒問題的話流量全部導向綠組，把藍組也進行服務更新。</p><p style="color:#24292f; text-align:start">傳統意義上的藍綠髮布優點在於發佈策略簡單，對於用戶幾乎無感知，可以實現平滑過度，在發佈期間發現問題後也可以快速的回滾。而缺點則是通常需要準備正常業務使資源倆倍以上的服務器，需要投入較大的資源成本。</p><p style="color:#24292f; text-align:start"><strong>藍綠髮布流程演示：</strong></p><p style="color:#24292f; text-align:start">切除綠集羣流量：</p><p style="color:#24292f; text-align:start"><img alt="12.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/12.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">當 A 組升級完畢，負載均衡重新接入 A 組，再把 B 組從負載列表中摘除，進行新版本的部署，A 組重新提供服務。</p><p style="color:#24292f; text-align:start"><img alt="13.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/13.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">最後，B 組也升級完成，負載均衡重新接入 B 組，此時，AB 組版本都已經升級完成，並且都對外提供服務。</p><span id="OSC_h2_6"></span><h2>灰度發佈</h2><p style="color:#24292f; text-align:start">灰度發佈，也被叫作金絲雀發佈。與藍綠部署、紅黑部署不同的是，<strong>灰度發佈屬於增量發佈方法</strong>。也就是説，服務升級的過程中，新舊版本會同時為用戶提供服務。</p><p style="color:#24292f; text-align:start">灰度發佈的具體流程是這樣的：在集羣的一小部分機器上部署新版本，給一部分用戶使用，以測試新版本的功能和性能；確認沒有問題之後，再對整個集羣進行升級。簡單地説，灰度發佈就是把部署好的服務分批次、逐步暴露給越來越多的用戶，直到最終完全上線。</p><p style="color:#24292f; text-align:start"><img alt="23.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/23.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">之所以叫作<strong>灰度發佈</strong>，是因為它介於黑與白之間，並不是版本之間的直接切換，而是一個平滑過渡的過程。</p><p style="color:#24292f; text-align:start">AB Test 就是一種灰度發佈方式，讓一部分用戶繼續用 A，一部分用戶開始用 B，如果用戶對 B 沒有什麼反對意見，那麼逐步擴大範圍，把所有用戶都遷移到 B 上面來。灰度發佈可以保證整體系統的穩定，在初始灰度的時候就可以發現並調整問題，以保證其影響度，而我們平常所説的金絲雀部署也就是灰度發佈的一種方式。</p><p style="color:#24292f; text-align:start">之所以又被叫作金絲雀發佈，是因為金絲雀對瓦斯極其敏感，17 世紀時英國礦井工人會攜帶金絲雀下井，以便及時發現危險。這就與灰色發佈過程中，先發布給一部分用戶來測試相似，因而得名。</p><p style="color:#24292f; text-align:start"><img alt="0.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/0.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">對於灰度發佈來説，它的優點在於<span>&nbsp;</span><strong>如果前期出問題影響範圍很小，相對用戶體驗也少；可以做到及時發現、及時調整問題，影響範圍可控。</strong><span>&nbsp;</span>但是採取這種模式對自動化以及運維監控能力的要求非常高。</p><span id="OSC_h1_7"></span><h1>三、得物的藍綠布是如何實現的？</h1><p style="color:#24292f; text-align:start">前面講了「what」，我們現在來説下「how」。</p><p style="color:#24292f; text-align:start">在平時，我們也會保留藍綠兩個集羣，在發佈時，引入灰度的流量平滑過度，幫助我們完成整個發佈過程，下面以 SRE 的視角大致講一下藍綠髮布的架構與流程。</p><span id="OSC_h2_8"></span><h2>藍綠髮布的流程</h2><p style="color:#24292f; text-align:start">在這種架構下，整體的發佈流程如下：</p><ul><li><strong>日常流量</strong></li></ul><p style="color:#24292f; text-align:start">在未發佈時，我們接入藍綠髮布的服務是平均分成藍綠倆個集羣的。平時通過網關均勻切分流量，平均每個集羣 50% 的流量。</p><p style="color:#24292f; text-align:start"><img alt="9.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/9.png" referrerpolicy="no-referrer"></p><ul><li><strong>開始發佈</strong></li></ul><p style="color:#24292f; text-align:start">當進行藍綠髮布時，我們將需要發佈的應用創建在一個通道中 (這裏先説下只有一個通道部署的情況)。</p><p style="color:#24292f; text-align:start"><img alt="09.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/09.png" referrerpolicy="no-referrer"></p><ul><li><strong>藍集羣 (右側) 摘流</strong></li></ul><p style="color:#24292f; text-align:start">此時所有流量將只訪問綠集羣，如下圖所示，當藍集羣摘流完成後, 此時集羣沒有任何流量，即可進行部署。</p><p style="color:#24292f; text-align:start"><img alt="8.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/8.png" referrerpolicy="no-referrer"></p><ul><li><strong>藍集羣 (右側) 引流</strong></li></ul><p style="color:#24292f; text-align:start">當藍集羣發佈完成後，我們需要對藍集羣發佈後的服務進行確認。在確認部署成功後，則梯度的將流量引入更新後代碼的藍集羣 (右側)，最開始我們會切 1% 的流量，切流量後，我們可以在線上觀察藍服務的流量、錯誤率等。以此觀測發佈的版本是否有異常。之後，我們逐漸將流量切回 50%。注意，需要確保相關缺陷都在該環節暴露出來，因為這個環節另一半老版本的、穩定的代碼還在 Standby，可以隨時操作流量比例，進行流量遷移。</p><p style="color:#24292f; text-align:start"><img alt="7.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/7.jpeg" referrerpolicy="no-referrer"></p><blockquote><p>發佈過程中，藍、綠節點間流量不會互竄 (對比上圖，藍綠集羣間斜向箭頭沒有了)。 此階段需要注意 MQ 流量，因為 MQ 當前無法按比例進行切分，因此一旦開始切流，則 MQ 流量會恢復為 50%/50%。</p></blockquote><ul><li><strong>綠集羣 (左側) 摘流</strong></li></ul><p style="color:#24292f; text-align:start">通過擴大流量比例，流量全部切到藍集羣，這個階段流量已全部切到新代碼，可以讓測試同學介入進行新功能驗證以及迴歸測試。</p><p style="color:#24292f; text-align:start">在這個階段只要綠集羣還沒發佈，發現問題，仍然可以全部切回老代碼！</p><p style="color:#24292f; text-align:start">當測試驗證完成後，即可進行綠集羣發佈。發佈後則不可以回切了！就算要代碼回滾，也得等本次發佈結束後,再單獨對服務進行回滾。</p><p style="color:#24292f; text-align:start"><img alt="67.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/67.png" referrerpolicy="no-referrer"></p><ul><li><strong>綠集羣 (左側) 引流</strong></li></ul><p style="color:#24292f; text-align:start">在發佈後則開始進入綠集羣引流了，此時可以快速引流，因為已經沒有可以回滾的、穩定版本的代碼了。同樣，還在發佈階段，及時流量均衡，也不會出現互相交叉的流量。</p><p style="color:#24292f; text-align:start"><img alt="34.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/34.png" referrerpolicy="no-referrer"></p><ul><li><strong>發佈完成</strong></li></ul><p style="color:#24292f; text-align:start">發佈完成後，則去除通道，藍綠集羣可以繼續進行交互。</p><p style="color:#24292f; text-align:start"><img alt="32.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/32.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">如上圖所示，使用以上發佈流程具備以下好處：</p><ul><li><p>整個發佈過程是以藍、綠<strong>集羣維度</strong>並行調度、實施的，通過發佈平台統一操作，摘流，無需各業務域各自處理。</p></li><li><p>通過請求藍綠粘性，讓下游應用的新老版本代碼可以同時存在，無需阻塞等待下游應用全部升級到新代碼，解除了批次依賴。</p></li><li><p>發佈過程中有靈活的流量控制能力，可以按 1%、50% 等階梯流量驗證應用。</p></li><li><p>上述發佈流程，可以同時並存若干個，摘流、引流動作互不影響<span>&nbsp;</span><strong>(多發佈通道)</strong>。</p></li></ul><span id="OSC_h2_9"></span><h2>藍綠髮布的架構</h2><ol><li><strong>應用架構 [1]</strong></li></ol><p style="color:#24292f; text-align:start"><img alt="45.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/45.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>1.1 流量規則 SDK</strong></p><p style="color:#24292f; text-align:start">在所有需要接入藍綠髮布的程序中，首先需要升級流量規則 SDK，流量規則 SDK 是應用藍綠髮布能力的代碼底座，向中間件組件如 RPC、MQ、JOB 提供了主動查詢流量規則和被動接受流量規則變更事件的能力，各中間件組件響應流量規則進行合適的動作，實現各類型流量的動態摘流、動態引流。</p><p style="color:#24292f; text-align:start"><strong>1.2 核心能力</strong></p><ul><li><p>依賴配置中心做持久化存儲與事件推送。</p></li><li><p>所有配置讀取都是內存操作，只會在啓動時讀取一次配置中心的配置，後續配置變更都依賴於配置中心的事件推送。</p></li><li><p>提供瞭如下的能力：</p><ul><li><p>當前應用所在的發佈通道，是否在藍綠髮布中。</p></li><li><p>指定應用所在的發佈通道，是否在藍綠髮布中。</p></li><li><p>藍色流量百分比，範圍[0, 100]。</p></li></ul></li><li><p>提供瞭如下的事件推送：</p><ul><li><p>發佈開始事件 onStart。</p></li><li><p>發佈結束事件 onFinish。</p></li><li><p>切流事件 onFlowChange，切流事件又細分了以下幾個事件。</p></li><li><p>切流事件，藍色流量標佔比為 100，綠色流量標佔比為 0，onEnterAllBlue。</p></li><li><p>切流事件，藍色流量標佔比從 100 改為非 100，綠色流量標佔比從 0 改為非 0，onExitAllBlue。</p></li><li><p>切流事件，藍色標流量佔比為 0，綠色流量標佔比為 100，onEnterAllGreen。</p></li><li><p>切流事件，藍色標流量佔比從 0 改為非 0，綠色流量標佔比從 100 改為非 100，onExitAllGreen。</p></li></ul></li></ul><ol><li><strong>流量控制</strong></li></ol><p style="color:#24292f; text-align:start">得物目前的流量分為內部流量及外部流量，大部分流量情況如下：</p><ul><li><p>外部流量</p><ul><li><p>通過各類 Gateway 請求</p></li><li><p>通過 k8s Ingress 請求 (暫不支持藍綠髮布)</p></li></ul></li><li><p>內部流量</p><ul><li><p>通過 Gateway 互聯</p></li><li><p>通過 Dubbo/Feign RPC 協議互聯</p></li><li><p>通過 MQ 異步請求</p></li><li><p>通過 kafka 異步請求 (暫不支持)</p></li><li><p>JOB 類任務發起的流量</p></li><li><p>通過 k8s SVC 請求 (暫不支持藍綠髮布)</p></li></ul></li></ul><p style="color:#24292f; text-align:start">其中 Gateway 也是通過 Dubbo 或者 Feign 請求下游服務，因此也可統一為 RPC 類型，所以得物目前的流量主要包含 RPC、MQ、JOB 三種。</p><p style="color:#24292f; text-align:start"><strong>2.1 RPC</strong></p><p style="color:#24292f; text-align:start">我們 RPC 流量核心主要依賴註冊中心，通過 Dubbo 的負載均衡策略進行調整。</p><p style="color:#24292f; text-align:start"><img alt="02.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/02.png" referrerpolicy="no-referrer"></p><ul><li><strong>如何實現 RPC 流量比例控制</strong></li></ul><p style="color:#24292f; text-align:start">RPC 場景下應用的流量比例控制，取決於它的上游應用按照流量規則比例向其發起調用。核心是上游應用感知到下游應用實例權重。</p><p style="color:#24292f; text-align:start"><strong>當前應用通過流量規則 SDK 監聽到所在通道的流量規則變更時，修改註冊中心上的實例權重。</strong></p><p style="color:#24292f; text-align:start"><strong>上游應用通過註冊中心透明的感知下游應用的實例權重，通過加權負載均衡策略實現流量比例控制。</strong></p><p style="color:#24292f; text-align:start">Dubbo 原生的各類負載均衡策略都支持加權，也就是即便上游沒有升級藍綠依賴，下游應用依然可以通過藍綠實例權重控制自己藍綠集羣被調用的比例。</p><p style="color:#24292f; text-align:start">Feign 原生是不支持的，Fusion 框架重寫了負載均衡策略。</p><ul><li><strong>如何控制流量比例</strong></li></ul><p style="color:#24292f; text-align:start">藍色流量比例 Rate，藍色集羣實例權重 WB，綠色集羣實例權重 WG。</p><p style="color:#24292f; text-align:start">假設 Rate 從 1 調整到 99，一共有 4 個節點。</p><p style="color:#24292f; text-align:start">調整前 WB=1，WG=99，調整後 WB=99，WG=1，可能出現以下情況：</p><p style="color:#24292f; text-align:start"><img alt="03.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/03.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">-流量規則變更時，只讓藍或綠某一個集羣修改自己的權重。</p><p style="color:#24292f; text-align:start">權重值是相對的，只需要保證藍、綠集羣節點權重相對值服從流量比例即可，無需同時修改藍綠集羣所有節點的權重。實例權重初始值設為 100，修改權重時，儘可能保證一半集羣實例權重保持 100 不變，只修改另一側被調整的集羣實例的權重。</p><p style="color:#24292f; text-align:start">規則如下：</p><p style="color:#24292f; text-align:start">藍色流量比例 Rate，公式：W/(100+W) = Rate/100。</p><p>Rate = 50，藍色集羣實例權重=100，綠色集羣實例權重=100。</p><p>Rate &lt; 50，藍色集羣實例權重=100 * Rate / (100-Rate)，綠色集羣實例權重=100。</p><p>Rate &gt; 50，藍色集羣實例權重=100，綠色集羣實例權重=100 * Rate1 / (100-Rate1)，其中 Rate1=100 - Rate。</p><p>&nbsp;&nbsp; &nbsp; &nbsp;<strong>只有一個顏色的集羣時，忽略權重。</strong></p><ul><li><p><strong>如何實現完全摘流</strong></p></li></ul><p style="color:#24292f; text-align:start">Dubbo 框架內置的所有負載均衡策略都會識別下游實例的權重進行加權篩選節點，無需上游升級依賴，下游應用實例權重置 0 後即可實現摘流。</p><p style="color:#24292f; text-align:start">Feign 框架默認不識別實例權重，不進行加權負載均衡，為了避免藍綠髮布項目落地時推動發佈鏈路上下游應用升級的困難，應用摘流時，會將自身註冊的所有<strong>Feign 服務反註冊</strong>，以保證 Feign 流量能被徹底摘流。</p><ul><li><strong>如何實現請求鏈路藍綠粘性 (一藍到底或一綠到底)</strong></li></ul><p style="color:#24292f; text-align:start">藍綠子集羣的代碼是不一樣的，按我們制定的發佈流程，藍集羣是新代碼，綠集羣是老代碼，如果不能固定請求鏈路的顏色，實現請求過程一藍到底或者一綠到底，那麼可能會出現上游新代碼調用到下游老代碼，出現代碼不兼容的異常。</p><p style="color:#24292f; text-align:start"><strong>將 RPC 請求第一次進入每個通道時的藍綠決策結果以 KV 形式 Append 到分佈式 Trace 的 baggage 中，全鏈路透傳、隔離、複用。</strong></p><p style="color:#24292f; text-align:start">如果 Trace 中有藍綠決策結果，則按照藍綠決策結果篩選節點；</p><p style="color:#24292f; text-align:start">否則按照流量比例篩選節點，並將決策結果（節點集羣顏色）Append 到 Trace。</p><p style="color:#24292f; text-align:start"><strong>baggage-key: x-deploy-channel-type。 baggage-value：key=通道標識，value=藍集羣或綠集羣標識，多個通道以&amp;分割。</strong><img alt="55.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/55.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>2.2 MQ(RocketMQ)</strong></p><p style="color:#24292f; text-align:start">核心是通過多消費組實現 MQ 流量隔離和控制。業務上創建的一個業務消費組，會在 MQ SDK 層面透明的創建 2 個衍生的顏色消費組。</p><p style="color:#24292f; text-align:start">發送消息時，會在消息頭上攜帶當前節點藍綠標。3 個消費組收到消息時，根據消息顏色和消費組顏色做顏色請和判斷，互斥的消費同一個 TOPIC 上的所有消息。</p><ul><li><p><strong>非摘流狀態</strong><img alt="00.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/00.png" referrerpolicy="no-referrer"></p></li><li><p><strong>摘流狀態</strong></p></li></ul><p style="color:#24292f; text-align:start">應用感知到通道內藍集羣摘流時，藍集羣節點關閉消費組、綠集羣節點啓動三種顏色消費組。此時，MQ 流量完全由綠集羣接管。</p><p style="color:#24292f; text-align:start"><img alt="24.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/24.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">通道內綠集羣摘流時同理。</p><ul><li><p><strong>過程詳解</strong></p><ul><li><p>原本一個消費組，拆分成三個消費組。</p></li><li><p>原始消費組 origin-consumer 用於消費無（藍綠）標識的流量。</p></li><li><p>藍色消費組 blue-consumer 用於消費「藍色」標識流量。</p></li><li><p>綠色消費組 green-consumer 用於消費「綠色」標識流量。</p></li></ul></li></ul><p style="color:#24292f; text-align:start"><img alt="98.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/98.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>2.3 JOB(elasticjob)</strong><img alt="76.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/76.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">elasticjob 在運行時會在業務應用集羣內利用 ZK 協調產生一個 Master 節點，由 Master 節點來按負載均衡策略將任務分配到各個執行器節點上。這個任務分配關係一經分配就會固定並在後續複用，除非是有應用進程上下線、JOB 分片數有變更。</p><p style="color:#24292f; text-align:start">改造 elasticjob 客戶端適配流量規則 SDK，正在藍綠髮布的應用，在感知到有集羣已經摘流時，會修改 ZK 上的狀態標識，將上述記錄的分配關係失效。</p><p style="color:#24292f; text-align:start">失效後，後續 JOB 執行時，會根據流量規則重新進行任務分配，避讓已經摘流的節點，以保證已經摘流的節點上不會有 JOB 執行。</p><ul><li><strong>過程詳解</strong></li></ul><p style="color:#24292f; text-align:start"><img alt="65.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/65.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_10"></span><h2>藍綠接入注意事項</h2><p style="color:#24292f; text-align:start">因當前技術限制, 服務接入藍綠需要注意以下事項：</p><ul><li><p><strong>流量無法摘除的服務暫時無法接入</strong></p><ul><li><p>未通過網關進入服務流量：例如，通過域名 SLB 進入服務、通過 Ingress 進入服務的流量無法摘除。</p></li><li><p>消費 Kafka 的流量無法摘除：由於應用使用的原生 kafka 客戶端並全面鋪開、無法對切入提供支持。</p></li><li><p>未使用統一框架/註冊中心：未使用統一框架和註冊中心的 Java 應用、以及非 Java 類應用當前不支持藍綠髮布。</p></li></ul></li><li><p><strong>使用特別提醒</strong></p><ul><li><p>消費消息需冪等：使用消息中間件必須做冪等，這是基本要求，在消費組啓停管控中可能產生重複消息。</p></li><li><p>消費組線程數量：由於會有三個消費組、消費線程也會增加兩倍，有業務影響時需調低線程數。</p></li><li><p>需要好流量評估：藍綠髮布需一半節點承接線上流量、在應用升級藍綠集羣時做好確認。</p></li><li><p>升級到特定版本：使用藍綠髮布需要應用升級到框架指定版本，詳見接入指南。</p></li><li><p>Feign/HTTP 流量：針對使用框架 Feign 的 HTTP 流量，需上下游應用全部升級後方可使用。</p></li><li><p>使用 Dubbo 流量：使用框架 Dubbo 的服務只需要自身服務升級版本即可、無需上下游升級。</p></li></ul></li></ul><span id="OSC_h1_11"></span><h1>四、得物 SRE 團隊對藍綠髮布的相關支持</h1><span id="OSC_h2_12"></span><h2>容器集羣針對藍綠的改造</h2><p style="color:#24292f; text-align:start">我們容器的 workload 使用的 OpenKruise 來進行管理。在進行藍綠髮布之前，我們使用的單個 clonesets 進行控制。</p><p style="color:#24292f; text-align:start">以下圖所示，為我們一個測試非藍綠集羣，這裏就是使用單個 cloneset 進行控制的單實例。</p><p style="color:#24292f; text-align:start"><img alt="41.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/41.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">在進行藍綠改造後，我們將 workload 分為藍綠兩個 clonesets，通過這樣，我們可以實現藍綠髮布時候的單邊實例發佈。同時在我們管理平台界面，任是單個集羣界面， 以此來實現單集羣下，藍綠集羣的拆分。</p><p style="color:#24292f; text-align:start"><img alt="80.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/80.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_13"></span><h2>藍綠髮布擴容資源優化</h2><p style="color:#24292f; text-align:start">前面就説過，藍綠髮布的一大缺點是通常需要準備平常流量 2 倍的資源，以應對藍綠髮布期間的流量。我們在加入藍綠髮布集羣時，也儘量會提醒需要增加資源以應對藍綠髮布。但如果毫無規劃的進行擴容，則會帶來以下幾個問題，比如長期保留擴容資源，則會帶來成本的答覆增長，而臨時的擴容，則代表着對人力的消耗增加，而且臨時的擴容也增長了對資源池管理的難度。可能在用戶擴容時，出現資源池不足的情況。</p><p style="color:#24292f; text-align:start">為了應對這個問題，我們針對藍綠髮布進行了優化。首先是在發佈流程中加入了擴縮容的環節。讓平台自動幫助進行服務的擴縮容。其次，在容器層面，我們利用雲服務商的彈性實例功能，來彌補常規資源池不足的情況，通過基於 Virtual Kubelet 技術接入到 k8s 中，<strong>支持秒級啓動，按量計費，可快速完成擴縮容，滿足業務的實時響應需求。</strong></p><p style="color:#24292f; text-align:start">注意: 在應用加入發佈通道時，因藍綠髮佈會導致流量減半，請務必對核心服務進行擴容<span>&nbsp;</span><strong>(SRE 建議擴容 30% 以上)。</strong></p><p style="color:#24292f; text-align:start"><img alt="08.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/08.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="06.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/06.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="021.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/021.jpeg" referrerpolicy="no-referrer"></p><span id="OSC_h2_14"></span><h2>發佈監控</h2><p style="color:#24292f; text-align:start">加入灰度的藍綠髮布，因為涉及流量切換過程，因此對監控要求非常高，需要及時觀測整個通道中的服務狀態，而歷史中單應用的監控頁面無法滿足發佈 owner 有效觀測。因此，針對這個問題，我們專門設計了通道級的藍綠髮布大盤，有效的觀測流量分佈情況，服務的請求情況等。通過該大盤，發佈 owner 能有效掌握本次發佈情況，決定是否繼續進行切流。</p><p style="color:#24292f; text-align:start"><img alt="043.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/043.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_15"></span><h1>五、藍綠髮布期間可能出現的問題及應急響應策略</h1><span id="OSC_h2_16"></span><h2>資源不足導致的服務異常</h2><ol><li><strong>發佈前擴容</strong></li></ol><p style="color:#24292f; text-align:start">根據藍綠髮布原理可知，我們在發佈時，只有 50% 的實例來支撐原先 100% 的流量， 因此務必在藍綠髮布前勾選發佈前臨時擴容。擴容量需要評估以下幾個數據：</p><ul><li>服務 CPU 水位情況</li></ul><p style="color:#24292f; text-align:start">根據歷史經驗，如日常水位 99 值在 20% 以內的服務，無需進行臨時擴容，而 99 值在 20%-30 以內的服務，建議擴容 20% 左右。而 99 值在 30-40% 之間的服務，應當擴容 30% 以上。同時也要考慮發佈當天的流量情況。</p><p style="color:#24292f; text-align:start">比如我們在七夕大促期間的發佈，因大促流量過高，我們許多服務在藍綠髮布時擴容達到了 50% 以上的情況，通過此方式，保證在切流期間，服務也能正常。</p><p style="color:#24292f; text-align:start">因為我們的服務大多以 JAVA 為主，內存大多用固定方式分配給了 JVM 堆，因此內存不是一個核心的參考指標。</p><ul><li>服務線程使用情況</li></ul><p style="color:#24292f; text-align:start">除了服務 CPU 外，服務線程也是一個核心參考指標，特別是 Dubbo 線程池以及 DB/Redis 的線程池。比如原先 Dubbo 線程池，max 為 200,10 個實例的服務，當日常 QPS 大於 1000 的時候，在藍綠髮布時就需要擴容了，否則實例數少了一半，意味着可用線程也少了一半，這個時候就會出現線程拒絕異常了。</p><ol><li><strong>發佈期間的資源不足</strong></li></ol><p style="color:#24292f; text-align:start">有些時候，我們評估不足會導致在開始發佈後因為資源不足導致的錯誤率上升，此時需要我們緊急處理，但為了發佈期間的穩定性，一旦我們開啓了藍綠通道，就不允許進行集羣的擴容了。此時需要 SRE 接入在後台進行處理，處理邏輯如下：</p><ul><li><p>確認待擴容集羣未處於發佈狀態。</p></li><li><p>手動修改藍/綠單邊集羣 cloneset 的 replicas 數據。</p></li><li><p>待發布完畢後，手動還原該 cloneset 的 replicas 數據。</p></li></ul><p style="color:#24292f; text-align:start"><strong>因該操作非標準操作，且存在風險，請儘量不要使用以上方式進行。</strong></p><span id="OSC_h2_17"></span><h2>發佈中出現流量不均衡的情況</h2><p style="color:#24292f; text-align:start">之前的一次測試中，我們在引流後出現了服務流量不均衡的問題，當時因為 Fusion 框架升級了 Dubbo 異步的改造中存在邏輯缺陷，導致流量無法均衡分佈。之後，通過回退 Fusion 框架版本後問題恢復。</p><p style="color:#24292f; text-align:start"><img alt="77.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/77.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">這是個比較危險的情況，某些節點會在發佈時承擔日常 400% 的流量，很容易造成服務雪崩。因此，在藍綠髮布中，負責人和 SRE 要加強服務的監控和關注力度，及時發現流量不均衡的情況並介入。</p><span id="OSC_h2_18"></span><h2>發佈中出現流量互竄的情況</h2><p style="color:#24292f; text-align:start">流量互竄的問題會有許多種情況：有因為切流前的 JOB 持續運行，導致雙邊集羣依舊有流量；有的因為鏈路中間節點沒有升級藍綠能力，導致流量錯位；有的因為 MQ 請求下游導致的流量錯位。這裏不針對問題進行一一分析，問題的解決僅能依靠框架的升級，這裏僅説下問題的影響和排查方法。</p><p style="color:#24292f; text-align:start">在藍綠髮布時，原先我們的預計是老代碼連老代碼，新代碼連新代碼，但出現異常請求時，可能出現新代碼連老代碼，或者老代碼連下游新代碼的情況，這個時候就會出現因為依賴不匹配，導致的服務異常。<img alt="243.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/243.png" referrerpolicy="no-referrer">要發現此類問題，我們首先要知道，在這種情況下，大多會出現單邊集羣錯誤率上升。通過我們的監控頁面，我們能很好的發現單邊錯誤率上升的情況。此時，我們就能根據這些錯誤的情況，在天眼的調用鏈分析中，查看錯誤的具體情況。此時需要我們判斷鏈路裏是否有出現流量異常的情況，查看節點的 Host name，可以判斷是藍或者綠集羣節點。<img alt="123.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/123.png" referrerpolicy="no-referrer"><img alt="60.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/60.png" referrerpolicy="no-referrer"></p><span id="OSC_h1_19"></span><h1>六、歷史總結及展望未來</h1><span id="OSC_h2_20"></span><h2>藍綠髮布的效果</h2><p style="color:#24292f; text-align:start">自從交易域進行藍綠髮布以來，平均大版本的發佈時效較之前得到了較大的提升，同時近期大版本已沒有出現故障事件，在升級藍綠髮布後，我們可以提前在切流階段發現問題，並快速回切進行修復，避免了故障帶入生產。因此，現在藍綠髮布相比過去滾動部署，在效率和穩定性上均大有提升。</p><span id="OSC_h2_21"></span><h2>未來展望</h2><p style="color:#24292f; text-align:start">目前我們核心服務都已切換至藍綠集羣，這種為我們的多活打下了優勢，已經天然具備了多活的條件。因此，未來我們可以通過這種架構來部署我們的多活，這樣，當任何單機房出現異常後，能夠快速切換到另外一個機房，我們的抗風險能力也會有巨大的提升。</p><p style="color:#24292f; text-align:start"><strong>參考引用:</strong><span>&nbsp;</span>[1] 特別鳴謝，本節藍綠髮布架構及原理部分引用了得物中間件平台 「羊羽」同學的文章。</p><p style="color:#24292f; text-align:start"><strong>文/latte</strong></p><p style="color:#24292f; text-align:start">&nbsp;</p><p style="color:#252933; text-align:start">本文屬得物技術原創，更多精彩文章請看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" rel="nofollow" target="_blank">得物技術官網</a></p><p style="color:#252933; text-align:start">未經得物技術許可嚴禁轉載，否則依法追究法律責任！</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 14 Jan 2024 02:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10773874</guid>
            <link>https://my.oschina.net/u/5783135/blog/10773874</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linus「溫馨提示」：Intel Xe 驅動代碼嚴重缺乏測試]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Linux 6.8 的 </span><span style="color:#121212">Direct Rendering Manager (DRM)&nbsp;</span><span style="color:#000000">內核圖形/顯示驅動程序更新包括新的英特爾"Xe"DRM 和 PowerVR Imagination 驅動程序、實驗形式的 AMD 色彩管理屬性、Raspberry Pi 5 圖形支持等。</span></p><p><span style="color:#000000">但 Linus Torvalds 最近在合併相關</span><span style="color:#333333">代碼</span><span style="color:#000000">時卻發現，一些新提交的 Intel Xe 驅動程序代碼"嚴重缺乏"測試。對此，他在內核郵件列表中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2FCAHk-%3DwgPJttFz8yrdpPTN-ypMmDXHOKw9yi1nZSEq%2B7%2BtGftZA%40mail.gmail.com%2F" target="_blank">表達</a>了自己的不滿：</span></p><blockquote><p><span style="color:#000000">你的測試嚴重不足。甚至無法構建，原因似乎在於該&nbsp;commit b49e894c3fd8 ("drm/i915: Replace custom intel runtime_pm tracker with ref_tracker library")&nbsp;將"intel_wakeref_t"類型從"deep_stack_handle_t"改為了"unsigned long"......</span></p><p><span style="color:#000000">真令人不悅。我已經修復了那個損壞的 Xe compat 頭文件並完成了構建，但這絕對不是事情的本來應該有的樣子。我怎麼會遇到這種情況？竟然會沒有進行任何構建測試。</span></p><p><span style="color:#000000">為什麼 %^!@$% 頭文件會包含 C 文件？無論如何，這個錯誤都不應該發生。</span></p></blockquote><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-7e522381a922470c222f72c566df84b3bea.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000">與以前的一些「火爆」回覆相比，Linus 這次的措辭可以説是算的上溫和，並且也提出了一些合理的問題。事實上，在 2023 年底的&nbsp;Linux 基金會的日本開源峯會上，Linus 就<a href="https://www.oschina.net/news/269762/linus-torvalds-linux-future-ai">表示</a>自己已經收斂了脾氣，在吸取了一些教訓之後不會再 「對一些公司豎中指」。</span></p><p><span style="color:#000000">但也正如 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FTorvalds-Unhappy-Linux-6.8-DRM" target="_blank">Phoronix</a> 所言，無論如何 Linus 已經將新代碼合併到 Linux 6.8 中。希望這只是&nbsp;Intel Xe 驅動程序的一個 one-off issue，而沒有更大的代碼質量問題。</span></p><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2FCAHk-%3DwgPJttFz8yrdpPTN-ypMmDXHOKw9yi1nZSEq%2B7%2BtGftZA%40mail.gmail.com%2F" target="_blank">查看郵件列表</a>。</span></p><p><strong><span style="color:#000000">相關閲讀：</span></strong></p><ul><li><a href="https://www.oschina.net/news/269762/linus-torvalds-linux-future-ai" target="news">Linus Torvalds 收斂脾氣，談內核社區「老齡化」問題</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 04:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275552/linus-torvalds-intel-xe-drive-code-linux-6-8</guid>
            <link>https://www.oschina.net/news/275552/linus-torvalds-intel-xe-drive-code-linux-6-8</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三部門：到 2025 年初步形成支撐區塊鏈發展標準體系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>工業和信息化部、中央網絡安全和信息化委員會辦公室、國家標準化管理委員會印發《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fzwgk%2Fzcwj%2Fwjfb%2Ftz%2Fart%2F2024%2Fart_c82be443223e4a5aa9cee2c435112e00.html" target="_blank">區塊鏈和分佈式記賬技術標準體系建設指南</a>》(下稱《指南》)。</p><p>其中提出，區塊鏈和分佈式記賬技術 (以下簡稱「區塊鏈」) 是新一代信息技術的重要組成部分，是分佈式網絡、加密技術、智能合約等多種技術集成的新型數據庫軟件。區塊鏈技術具有數據透明、不易篡改、可追溯等特性，有望解決網絡空間的信任和安全問題，推動互聯網從傳遞信息向傳遞價值變革，將成為推動元宇宙、Web3.0 等未來產業快速發展的重要數字基礎設施。</p><p><img height="316" src="https://oscimg.oschina.net/oscnet/up-380ad5c9a1d0ae2453b5bdb61fc89ff89ca.png" width="700" referrerpolicy="no-referrer"></p><p>《指南》提出建設目標：</p><p>到 2025 年，初步形成支撐區塊鏈發展的標準體系。建立標準體系建設和標準研製的總體規則，重點面向基礎共性、應用和服務等標準化領域，制定 30 項以上區塊鏈相關標準，基本滿足我國區塊鏈標準化需求。</p><p>到 2027 年，全面形成支撐區塊鏈發展的標準體系。制定 50 項以上區塊鏈相關標準，持續推動區塊鏈基礎共性、關鍵應用示範、安全保障等標準研製。適度超前佈局一批支撐未來產業發展需要的關鍵應用標準，有效指導我國區塊鏈技術和產業發展，提升技術與應用服務水平。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/275546</guid>
            <link>https://www.oschina.net/news/275546</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenVoice —— 多功能即時語音克隆]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OpenVoice，這是一種多功能的即時語音克隆方法，只需要參考説話者的一個簡短的音頻剪輯即可複製他們的聲音並生成多種語言的語音。</span></p><p><span style="color:#000000">除了複製參考説話者的音色之外，OpenVoice 還可以對語音風格進行精細控制，包括情感、口音、節奏、停頓和語調。OpenVoice 還可以針對海量説話人訓練集中未包含的語言實現零樣本跨語言語音克隆。OpenVoice 的計算效率也很高，其成本比性能較差的商用 API 低數十倍。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#000000"><strong><span style="background-color:oklch(1 0 0)">準確的音色克隆</span></strong></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:oklch(1 0 0)">OpenVoice 可以準確克隆參考音色並生成多種語言和口音的語音。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#000000"><span style="background-color:oklch(1 0 0)">靈活的語音風格控制</span></span></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:oklch(1 0 0)">OpenVoice 可以對語音風格（例如情感和口音）以及其他風格參數（包括節奏、停頓和語調）進行精細控制。</span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span style="color:#000000"><strong><span style="background-color:oklch(1 0 0)">零樣本跨語言語音克隆</span></strong></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:oklch(1 0 0)">參考語音和生成的語音可以是海量説話人多語言數據集之外的任何語言。</span></span></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 03:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/openvoice</guid>
            <link>https://www.oschina.net/p/openvoice</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | Windows 和 iOS 設備間文件傳輸 AirDropPlus]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-airdrop-plus" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#airdrop-plus"></a>AirDrop Plus</h1><p>用於 iOS 設備和 Windows 電腦之間進行文件傳輸，基於 HTTP，需要配合快捷指令使用</p><h1><a id="user-content-依賴" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E4%BE%9D%E8%B5%96"></a>依賴</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python==3.10.6</span><span id="LC2" class="line">flask==3.0.0</span><span id="LC3" class="line">win10toast==0.9</span><span id="LC4" class="line">psutil==5.9.6</span><span id="LC5" class="line">pyinstaller==6.2.0</span><span id="LC6" class="line">windows_toasts==1.0.1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-打包" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%89%93%E5%8C%85"></a>打包</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">pyinstaller <span class="nt">--add-data</span><span class="s1">'config;config'</span><span class="nt">-w</span> AirDropPlus.py</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-使用" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E4%BD%BF%E7%94%A8"></a>使用</h1><ol><li>Windows 端安裝 bonjour，這樣可以通過 「設備名.local」 訪問到 Windows，而不需要通過 IP 地址。
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/windows_device_name.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>修改配置文件 config.ini，設置文件保存路徑和密鑰</li><li>手機端下載快捷指令
<ul><li>文件：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.icloud.com%2Fshortcuts%2Fdbbc2d75a611471babbe69e128db6702">https://www.icloud.com/shortcuts/dbbc2d75a611471babbe69e128db6702</a></li><li>剪貼板：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.icloud.com%2Fshortcuts%2F8b0a81ddf004422fbbb8fc8099546811">https://www.icloud.com/shortcuts/8b0a81ddf004422fbbb8fc8099546811</a></li></ul></li><li>設置快捷指令的主機為 Windows 的設備名 (不是用戶名).local，設置快捷指令的密鑰和 config.ini 中的密鑰相同
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/shortcut_conf.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>發送文件時在文件分享菜單執行 AirDrop Plus 快捷指令。接收文件時，直接執行 AirDrop Plus 快捷指令
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/send_file.png" alt="Image" referrerpolicy="no-referrer"><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/receive_file.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>同步剪貼板直接執行快捷指令，點擊發送或者接收!
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/sync_clipboard.png" alt="Image" referrerpolicy="no-referrer"></div></li><li>Windows 端退出在任務管理器中退出
 <div><img src="https://gitee.com/yeytytytytyytyt/air-drop-plus/raw/master/pic/exit.png" alt="Image" referrerpolicy="no-referrer"></div></li></ol><h1><a id="user-content-api" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#api"></a>API</h1><h2><a id="user-content-請求頭參數" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%A4%B4%E5%8F%82%E6%95%B0"></a>請求頭參數</h2><table><thead><tr><th>參數名</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>ShortcutVersion</td><td>String</td><td>快捷指令的版本，需要和 config.ini 中的 version 一致</td></tr><tr><td>Authorization</td><td>String</td><td>密鑰，需要和 config.ini 中的 key 一致</td></tr></tbody></table><h2><a id="user-content-文件發送" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81"></a>文件發送</h2><blockquote><p>移動端發送一個文件到 PC</p></blockquote><h3><a id="user-content-請求" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82"></a>請求</h3><h4><a id="user-content-請求方式" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F"></a>請求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /file/send</li></ul><h4><a id="user-content-請求參數" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0"></a>請求參數</h4><ul><li>發送格式: 表單</li></ul><table><thead><tr><th>參數名</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>file</td><td>File</td><td>要發送的文件</td></tr><tr><td>filename</td><td>String</td><td>發送的文件名</td></tr><tr><td>notify_content</td><td>String</td><td>讓 PC 端通知顯示的內容<br>如果是發送單個文件：這裏填寫的就是 filename 的內容<br>如果是發送 n 個文件：前 n-1 個的 notify_content 為空，第 n 個的 notify_content 包含 n 個文件的 filename，使用\n 分隔</td></tr></tbody></table><h3><a id="user-content-返回" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E"></a>返回</h3><ul><li>返回類型: JSON</li><li>返回內容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">"發送成功"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="kc">null</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-文件發送列表" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E5%8F%91%E9%80%81%E5%88%97%E8%A1%A8"></a>文件發送列表</h2><blockquote><p>移動端發送文件列表到 PC（通知 PC 接下來要發送哪些文件）</p></blockquote><h3><a id="user-content-請求-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-1"></a>請求</h3><h4><a id="user-content-請求方式-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-1"></a>請求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /file/send/list</li></ul><h4><a id="user-content-請求參數-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-1"></a>請求參數</h4><ul><li>發送格式: 表單</li></ul><table><thead><tr><th>參數名</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>file_list</td><td>String</td><td>要發送的文件列表，文件之間用\n 分隔，如：aaa.jpg\nbbb.png</td></tr></tbody></table><h3><a id="user-content-返回-1" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-1"></a>返回</h3><ul><li>返回類型: JSON</li><li>返回內容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">"發送成功"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="kc">null</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-文件接收列表" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E6%8E%A5%E6%94%B6%E5%88%97%E8%A1%A8"></a>文件接收列表</h2><blockquote><p>獲取 PC 複製的文件的文件地址列表</p></blockquote><h3><a id="user-content-請求-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-2"></a>請求</h3><h4><a id="user-content-請求方式-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-2"></a>請求方式</h4><ul><li>HTTP 方法: GET</li><li>URL: /file/receive/list</li></ul><h4><a id="user-content-請求參數-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-2"></a>請求參數</h4><ul><li>無</li></ul><h3><a id="user-content-返回-2" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-2"></a>返回</h3><ul><li>返回類型: JSON</li><li>返回內容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">""</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="p">[</span><span class="s2">"c:/xx/xx/aa.txt"</span><span class="p">,</span><span class="w"></span><span class="s2">"c:/xx/xx/bb.txt"</span><span class="p">]</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-文件接收" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E6%96%87%E4%BB%B6%E6%8E%A5%E6%94%B6"></a>文件接收</h2><blockquote><p>移動端接收 PC 上的文件</p></blockquote><h3><a id="user-content-請求-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-3"></a>請求</h3><h4><a id="user-content-請求方式-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-3"></a>請求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /file/receive</li></ul><h4><a id="user-content-請求參數-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-3"></a>請求參數</h4><ul><li>發送格式: 表單</li></ul><table><thead><tr><th>參數名</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>path</td><td>String</td><td>要接收的文件的路徑</td></tr></tbody></table><h3><a id="user-content-返回-3" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-3"></a>返回</h3><ul><li>返回類型: 文件</li><li>返回內容: 文件</li></ul><h2><a id="user-content-剪貼板發送" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%8F%91%E9%80%81"></a>剪貼板發送</h2><blockquote><p>把移動端的剪貼板發送到 PC 的剪貼板</p></blockquote><h3><a id="user-content-請求-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-4"></a>請求</h3><h4><a id="user-content-請求方式-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-4"></a>請求方式</h4><ul><li>HTTP 方法: POST</li><li>URL: /clipboard/send</li></ul><h4><a id="user-content-請求參數-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-4"></a>請求參數</h4><ul><li>發送格式: 表單</li></ul><table><thead><tr><th>參數名</th><th>類型</th><th>描述</th></tr></thead><tbody><tr><td>clipboard</td><td>String</td><td>移動端剪貼板內容</td></tr></tbody></table><h3><a id="user-content-返回-4" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-4"></a>返回</h3><ul><li>返回類型: JSON</li><li>返回內容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">"發送成功"</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="kc">null</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul><h2><a id="user-content-剪貼板接收" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%8E%A5%E6%94%B6"></a>剪貼板接收</h2><blockquote><p>把 PC 端的剪貼板發送到移動端的剪貼板</p></blockquote><h3><a id="user-content-請求-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82-5"></a>請求</h3><h4><a id="user-content-請求方式-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E6%96%B9%E5%BC%8F-5"></a>請求方式</h4><ul><li>HTTP 方法: GET</li><li>URL: /clipboard/receive</li></ul><h4><a id="user-content-請求參數-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0-5"></a>請求參數</h4><ul><li>無</li></ul><h3><a id="user-content-返回-5" class="anchor" href="https://gitee.com/yeytytytytyytyt/air-drop-plus#%E8%BF%94%E5%9B%9E-5"></a>返回</h3><ul><li>返回類型: JSON</li><li>返回內容:
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="p">{</span></span><span id="LC2" class="line"><span class="w"></span><span class="nl">"success"</span><span class="p">:</span><span class="w"></span><span class="kc">true</span><span class="p">,</span></span><span id="LC3" class="line"><span class="w"></span><span class="nl">"msg"</span><span class="p">:</span><span class="w"></span><span class="s2">""</span><span class="p">,</span></span><span id="LC4" class="line"><span class="w"></span><span class="nl">"data"</span><span class="p">:</span><span class="w"></span><span class="s2">"PC 端剪貼板的內容"</span></span><span id="LC5" class="line"><span class="p">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li></ul>]]>
            </description>
            <pubDate>Sat, 13 Jan 2024 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/yeytytytytyytyt/air-drop-plus</guid>
            <link>https://gitee.com/yeytytytytyytyt/air-drop-plus</link>
        </item>
    </channel>
</rss>
