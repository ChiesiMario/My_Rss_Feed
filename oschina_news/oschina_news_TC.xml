<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 26 Jan 2024 05:49:50 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[今天是將 Firefox 設置為默認瀏覽器的好日子]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>蘋果今日<u><a href="https://www.oschina.net/news/276674">宣佈</a></u>在在歐盟地區對 iOS、Safari 瀏覽器和 App Store 進行更改。</p><p>其中 Safari 瀏覽器在歐盟地區的更改如下：<strong>iOS 用戶現在就可以將第三方網絡瀏覽器（而非 Safari 瀏覽器）設為默認瀏覽器</strong>。</p><p>Firefox 當即發推表示：「<em>今天是將 Firefox 設置為默認瀏覽器的好日子<img alt="😎" height="20.39772605895996" src="https://abs-0.twimg.com/emoji/v2/svg/1f60e.svg" style="margin-left:0.075em; margin-right:0.075em" width="20.39772605895996" referrerpolicy="no-referrer">。</em>」</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-af61337c299ca89913bc382cdf8e3d8f7e7.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Ffirefox%2Fstatus%2F1750252384582803578" target="_blank">https://twitter.com/firefox/status/1750252384582803578</a></u></em></p></blockquote><ul><li>延伸閲讀：<em><u><a href="https://www.oschina.net/news/269923/firefox-on-the-brink" target="news">Firefox 會被淘汰嗎？</a></u></em></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 04:15:29 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276693</guid>
            <link>https://www.oschina.net/news/276693</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[重慶警方破獲「蘋果 ID 貸」非法經營案，以「庫克回租」為名非法放貸、暴力催收]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.thepaper.cn%2FnewsDetail_forward_26150502" target="_blank">據中新網報道</a></u>，重慶巫溪縣公安局獲悉，該局成功偵破一起全國性「蘋果 ID 貸」非法經營案，搗毀涉及 21 省 (市) 非法經營網絡貸款犯罪團夥 9 個，抓獲犯罪嫌疑人 41 人，涉及借款人員 2 萬餘名，涉案金額 1.3 億元。</p><p>2023 年 5 月，重慶巫溪縣公安局鳳凰派出所接到陶某報警稱，自己的蘋果手機 (iPhone13) 被人遠程控制鎖機，請求民警幫助。後經民警綜合研判，一個以黃某為首的從事互聯網非法放貸犯罪團夥逐漸浮出水面。</p><p>經查，自 2022 年 8 月以來，黃某等 9 人未經監管部門批准，以營利為目的，打着「庫克回租」的幌子，通過平台投放「蘋果 ID 貸」廣告，招攬蘋果手機用戶並提供貸款，再通過遠程控制手機應用，修改蘋果 ID 密碼，威脅將手機鎖機，並以撥打親屬電話騷擾、曝光個人信息等催收方式，讓借款人超額還款。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-26b87b238e3799ee00df2fb9ff4bb158c38.png" referrerpolicy="no-referrer"></p></blockquote><p>該團夥累計非法放貸本金 700 餘萬元，非法獲利 100 餘萬元。掌握相關證據後，專案組民警分赴陝西、四川等地，將該非法經營犯罪團夥成員全部抓獲。</p><p>辦案民警隨後對該案擴線研判出另外 8 個涉及全國 21 省 (市) 與黃某團夥具有相同作案手法的非法經營犯罪團夥，梳理出借款人員 2 萬餘名。</p><p>巫溪縣公安局在重慶市公安局經偵總隊指導下，將該案報請公安部，併成功發起全國集羣戰役，成功打掉利用「蘋果 ID 貸」非法經營網絡貸款犯罪團夥 9 個，抓獲犯罪嫌疑人 41 人，涉案金額 1.3 億元。</p><p>目前，該案所有犯罪嫌疑人均被依法採取刑事強制措施，案件正在進一步辦理中。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 04:03:29 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276691</guid>
            <link>https://www.oschina.net/news/276691</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[升級 JDK21、 Spring Boot 3.2 並開啓 Virtual Thread、CRaC]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><div><div><div><div><div><div><div><span id="OSC_h2_1"></span><h2>背景</h2><ul><li><p>JDK21 已發佈一段時間，是 JDK17 後的的又一個長期維護版本，支持了 Virtual Thread、CRaC 特性，並帶來了新的分代 ZGC 算法</p></li><li><p>Spring Boot 3.2.1 (<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspring.io%2Fblog%2F2023%2F10%2F16%2Fruntime-efficiency-with-spring%2F%23jvm-checkpoint-restore-scale-to-zero-with-spring-and-project-crac" rel="nofollow" target="_blank"><span><span><img height="14" src="https://spring.io/favicon-32x32.png?v=96334d577af708644f6f0495dd1c7bc8" width="14" referrerpolicy="no-referrer"></span><span>Runtime efficiency with Spring (today and tomorrow)</span></span></a></span></span></span></span> ) 版本發佈後，框架層面原生的支持了 Virtual Thread、CRaC 特性</p></li></ul><p>同時在 ops-job 上應用積累經驗，可在其他項目如 Apollo 、xxljob 上繼續落地</p><p>ps：本次升級項目原依賴是 JDK17，Spring Boot 2.6.5&nbsp;</p><span id="OSC_h2_2"></span><h2><span>關鍵結果（收益）</span></h2><ul><li><p>在不影響程序邏輯情況下，大幅縮短啓動時間</p></li><li><p>內存使用降低，性能更好</p></li><li><p>CPU 資源使用率降低（因 GC 導致的 CPU 使用降低）</p></li></ul><span id="OSC_h2_3"></span><h2>升級改動</h2><span id="OSC_h3_4"></span><h3>Maven 依賴調整</h3><p>調整 Spring Boot 的依賴</p><pre><code class="language-xml">  &lt;parent&gt;
    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;
    &lt;version&gt;3.2.1&lt;/version&gt;
    &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;
  &lt;/parent&gt;</code></pre><p>調整 Spring Cloud 、JDK 的依賴</p><pre><code class="language-xml">  &lt;properties&gt;
    &lt;java.version&gt;21&lt;/java.version&gt;
    &lt;spring-cloud.version&gt;2021.0.1&lt;/spring-cloud.version&gt;
  &lt;/properties&gt;</code></pre><span id="OSC_h3_5"></span><h3>代碼兼容性改動</h3><div><div>
            &nbsp; 
          </div><div><p>Spring Boot3 升級是個比較大的變動，有很多的不兼容性。這裏只記錄 ops-job 這個項目遇到的問題。更多問題參考：<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot%2Fwiki%2FSpring-Boot-3.0-Migration-Guide" rel="nofollow" target="_blank"><span><span><img height="14" src="https://github.com/fluidicon.png" width="14" referrerpolicy="no-referrer"></span><span>Spring Boot 3.0 Migration Guide</span></span></a></span></span></span></span> (<span style="color:var(--custom-palette-color, inherit)">官網升級指南必看</span>)</p></div></div><span id="OSC_h4_6"></span><h4>1、包名變動</h4><p>javax 更名為 jakarta，相關的資源都需要改動。比如：</p><p>@PostConstruct 註解包名拜改變路徑：javax.annotation.PostConstruct 變到 jakarta.annotation.PostConstruct</p><span id="OSC_h4_7"></span><h4>2、Spring 的 <code><a href="https://my.oschina.net/bean" class="referer" target="_blank">@Bean</a></code> 註解只能用於有返回值的方法。</h4><p>比如下面代碼，想在 Bean 初始化生命週期中運行一些邏輯，升級後就不支持了。被 <code><a href="https://my.oschina.net/bean" class="referer" target="_blank">@Bean</a></code> 註解的方法需要有返回值了</p><pre><code class="language-java">    @Bean
    public void initSenTry() {
        String dsn = xx
        Sentry.init(options -&gt; {
            options.setDsn(dsn);
            options.setEnvironment(env);
        });
        SentryAppender sentryAppender = new SentryAppender();
        sentryAppender.setContext(ctx);
        ThresholdFilter filter = new ThresholdFilter();
        filter.setLevel(Level.ERROR.levelStr);
        filter.start();
        sentryAppender.addFilter(filter);
        sentryAppender.start();
        ctx.addTurboFilter(new TurboFilter() {
            @Override
            public FilterReply decide(Marker marker, ch.qos.logback.classic.Logger logger, Level level, String format, Object[] params, Throwable t) {
                logger.addAppender(sentryAppender);
                return FilterReply.NEUTRAL;
            }
        });

    }</code></pre><span id="OSC_h4_8"></span><h4>3、Spring 日誌系統變化</h4><p>slf4j 的 StaticLoggerBinder 類沒有了，想要獲取 LoggerContext 對象實現日誌級別的動態調整，需要使用</p><p>LoggerFactory.getILoggerFactory 取而代之。比如：</p><pre><code class="language-java">private final LoggerContext ctx = (LoggerContext) LoggerFactory.getILoggerFactory();</code></pre><span id="OSC_h4_9"></span><h4>4、Apollo 功能受限</h4><p>Apollo 配置中心的 <code>@ApolloConfig</code> 註解失效了（內部配置加載邏輯是正常的，不影響應用啓動）。比如：</p><pre><code class="language-java">@ApolloConfig
private Config config;</code></pre><p>原因是：<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot%2Fissues%2F32566" rel="nofollow" target="_blank"><span><span><img height="14" src="https://github.com/fluidicon.png" width="14" referrerpolicy="no-referrer"></span><span>Spring Boot 3 milestone 5 EnableAutoConfiguration spring.factories · Issue #32566 · spring-projects/spring-boot</span></span></a></span></span></span></span></p><p>從 Spring Boot 3 M5 開始，來自 spring.factories 文件的「org.springframework.boot.autoconfigure.EnableAutoConfiguration」自動配置註冊不再起作用</p><p>基於此，預計有很多 start 都會受到影響，比如 mybatis-plus 、xxl-job</p><ul><li>臨時解決</li></ul><p>在類路徑下創建<code>META-INF/spring/org.springframework.boot.autoconfigure.AutoConfiguration.imports</code>文件，把 Apollo 的自動加載類放進去，如：</p><pre><code>com.ctrip.framework.apollo.spring.boot.ApolloAutoConfiguration com.taptap.xxl.job.spring.XxlJobAutoConfiguration</code></pre><p>其他有影響的框架，都可以複製下自動加載類，放到這個文件裏</p><ul><li>最終解決</li></ul><p>可以嘗試用最新版本，看官方是否解決了 Spring Boot3.x 的兼容性問題。</p><p>1、apollo-client : 升級到 2.1.0(<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapolloconfig%2Fapollo-java%2Fpull%2F4" rel="nofollow" target="_blank"><span><span><img height="14" src="https://github.com/fluidicon.png" width="14" referrerpolicy="no-referrer"></span><span>apollo-client support spring boot 3.0 by nobodyiam · Pull Request #4 · apolloconfig/apollo-java</span></span></a></span></span></span></span> )</p><p>2、xxl-job-spring-boot-starter : 更新到 2.3.2-183</p><span id="OSC_h2_10"></span><h2>問題記錄</h2><span id="OSC_h3_11"></span><h3>1、日誌框架衝突</h3><p>服務啓動，會輸出如下的日誌</p><pre><code>Standard Commons Logging discovery in action with spring-jcl: please remove commons-logging.jar from classpath in order to avoid potential conflicts</code></pre><p>這個是 Spring Boot 的依賴衝突檢查輸出的，在 Maven 裏排除 <code>commons-logging.jar</code> 就好了，如：</p><pre><code class="language-xml">    &lt;dependency&gt;
      &lt;groupId&gt;ru.yandex.clickhouse&lt;/groupId&gt;
      &lt;artifactId&gt;clickhouse-jdbc&lt;/artifactId&gt;
      &lt;version&gt;0.3.2&lt;/version&gt;
      &lt;exclusions&gt;
        &lt;exclusion&gt;
          &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;
          &lt;groupId&gt;commons-logging&lt;/groupId&gt;
        &lt;/exclusion&gt;
      &lt;/exclusions&gt;
    &lt;/dependency&gt;</code></pre><span id="OSC_h3_12"></span><h3>2、Server VM warning</h3><p>當加載 agent 時，會出現如下的警告日誌。</p><pre><code>OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
[otel.javaagent 2024-01-23 17:38:45:581 +0800] [main] INFO io.opentelemetry.javaagent.tooling.VersionLogger - opentelemetry-javaagent - version: 1.12.1
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended
OpenJDK 64-Bit Server VM warning: Sharing is only supported for boot loader classes because bootstrap classpath has been appended</code></pre><div>
           &nbsp; 
         </div><p>可通過 JVM 參數 -Xshare:off 關閉 CDS 相關的邏輯</p><span id="OSC_h2_13"></span><h2>大功告成</h2><p>如果一切順利，啓動成功後會在控制枱看到如下輸出</p><p><img height="540" src="https://oscimg.oschina.net/oscnet/up-c89cbd8949a1c5ef0e8aaeb37dee992e6d8.png" width="1520" referrerpolicy="no-referrer"></p><span id="OSC_h2_14"></span><h2>開啓 Virtual Thread</h2><span id="OSC_h3_15"></span><h3>啓用並驗證</h3><p>通過如下配置，可以一鍵開啓 spring 的 Virtual Thread 特性。</p><pre><code>spring.threads.virtual.enabled=true</code></pre><p>驗證是否開啓了</p><pre><code class="language-java">@RequestMapping("/")
@RestController
public class VirtualController {

    @GetMapping("/test")
    public String virtual() {
        System.out.println(Thread.currentThread());
        return "test";
    }

}</code></pre><p>上面代碼將會在控制枱輸出</p><pre><code>VirtualThread[#70,tomcat-handler-0]/runnable@ForkJoinPool-1-worker-1</code></pre><div>
           &nbsp; 
         </div><span id="OSC_h3_16"></span><h3>性能測試</h3><div><div>
            &nbsp; 
          </div><div><p>環境：Redis 為本地的實例</p></div></div><div><div><div><div><pre><code class="language-java">@RequestMapping("/")
@RestController
public class VirtualController {

    final StringRedisTemplate redisTemplate;

    public VirtualController(StringRedisTemplate redisTemplate) {
        this.redisTemplate = redisTemplate;
    }

    @GetMapping("/test")
    public String virtual() {
        redisTemplate.opsForValue().set("test", "test");
        return redisTemplate.opsForValue().get("test");
    }

}</code></pre><p>我在本地通過 wrk 壓測上面的代碼 (讀寫了下 Redis )，發現在不做任何參數調優的情況下，結果如下</p></div></div></div></div><p>tomcat 默認的線程池配置：</p><pre><code>server.tomcat.threads.max=200
server.tomcat.threads.min-spare=10</code></pre><ul><li><p>wrk -t80 -c100 -d 10s --latency <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F127.0.0.1%3A8040%2Ftest" rel="nofollow" target="_blank">http://127.0.0.1:8040/test</a></p></li></ul><div><div><p><img height="454" src="https://oscimg.oschina.net/oscnet/up-778d1c6616698d7fbacd4586940df71a153.png" width="1536" referrerpolicy="no-referrer"></p></div></div><ul><li><p>wrk -t150 -c200 -d 10s --latency <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F127.0.0.1%3A8040%2Ftest" rel="nofollow" target="_blank">http://127.0.0.1:8040/test</a></p></li></ul><div><div><img height="460" src="https://oscimg.oschina.net/oscnet/up-10c91dde54ae8b0d9f84cda5b35a3f810bb.png" width="1532" referrerpolicy="no-referrer"></div></div><p>從兩次測試結果可以看出，在不做任何優化的前提下：</p><div><div>
            &nbsp; 
          </div><div><ul><li><p>低負載（-t80 -c100）：性能相當，差別不大</p></li><li><p>高負載（-t150 -c200）：Virtual threads 依然保持高性能，Platform threads 出現了性能下降的問題。且兩者 QPS 差距非常明顯，<strong>Virtual threads </strong>比 <strong>Platform threads</strong> 多 19%~29% 的性能。</p></li></ul></div></div><p>在 Platform threads 模式下，嘗試調大 tomcat 的線程參數</p><pre><code class="language-java">server.tomcat.threads.max=300
server.tomcat.threads.min-spare=50</code></pre><p>分別使用</p><ul><li><p>wrk -t150 -c200 -d 10s --latency <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F127.0.0.1%3A8040%2Ftest" rel="nofollow" target="_blank">http://127.0.0.1:8040/test</a></p></li><li><p>wrk -t80 -c100 -d 10s --latency <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F127.0.0.1%3A8040%2Ftest" rel="nofollow" target="_blank">http://127.0.0.1:8040/test</a></p></li></ul><p>壓 Platform threads 的服務。</p><p><img height="458" src="https://oscimg.oschina.net/oscnet/up-e6526d1643da2f8c406ec63b7c228a525c7.png" width="1528" referrerpolicy="no-referrer"></p><div><div><p>從 tomcat 調參後的測試結果看，至少我本地這個環境，這個場景沒法在通過加大 threads 數加大性能了。也在一次印證了 Platform threads 模式下，負載高過一個臨界值後，性能會下降。</p></div></div><span id="OSC_h3_17"></span><h3>三方測試</h3><ul><li><p>三方測試參考：<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2Farticle%3Fid%3D89" rel="nofollow" target="_blank"><span><span><img height="14" src="https://tech.dewu.com/favicon.ico" width="14" referrerpolicy="no-referrer"></span><span>虛擬線程原理及性能分析</span></span></a></span></span></span></span></p></li></ul><span id="OSC_h2_18"></span><h2>開啓 CRaC</h2><span id="OSC_h3_19"></span><h3>説明（還不成熟）</h3><div><div>
            &nbsp; 
          </div><div><p>CRaC 當前只是初步支持，有些場景：比如內存裏維護了複雜狀態的應用，可能會遇到問題，啓用前請謹慎做好全場景的測試。</p></div></div><p>參考文檔：<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.spring.io%2Fspring-boot%2Fdocs%2Fcurrent%2Freference%2Fhtmlsingle%2F%23deployment.efficient.checkpoint-restore" rel="nofollow" target="_blank"><span><span><img height="14" src="https://docs.spring.io/favicon.ico" width="14" referrerpolicy="no-referrer"></span><span>Spring Boot Reference Documentation</span></span></a></span></span></span></span> \ <span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.spring.io%2Fspring-framework%2Freference%2Fintegration%2Fcheckpoint-restore.html" rel="nofollow" target="_blank"><span><span><img height="14" src="https://docs.spring.io/spring-framework/reference/_/img/favicon.ico" width="14" referrerpolicy="no-referrer"></span><span>JVM Checkpoint Restore :: Spring Framework</span></span></a></span></span></span></span></p><span id="OSC_h3_20"></span><h3>啓用並驗證</h3><span id="OSC_h4_21"></span><h4>集成步驟</h4><ul><li><p>1、JVM 層面（指定內存 dump 路徑）：啓動時添加 <code>-XX:CRaCCheckpointTo=PATH</code> 參數，指定 CRaC 的輸出加載路徑</p></li><li><p>2、Spring 層面（找個合適的時機觸發內存 dump）：啓動時添加 <code>-Dspring.context.checkpoint=onRefresh</code> 參數。該階段啓動時會自動創建檢查點<code>LifecycleProcessor.onRefresh</code>。此階段完成後，所有非延遲初始化的單例都已實例化，並且 <code>InitializingBean#afterPropertiesSet</code>回調已被調用；但生命週期尚未開始，且 <code>ContextRefreshedEvent</code>尚未發佈。</p></li><li><p>3、JVM 層面（加載內存恢復狀態）：啓動時添加 <code>-XX:CRaCRestoreFrom=PATH</code> 參數，指定加載的 CRaC 的路徑</p></li></ul><p>從集成步驟看，第 1、2 步應該都發生在 CI 階段，且 Spring 的觸發內存 dump 的意圖很明顯，等 onRefresh 完成後再出發，相當於初始 Bean 的時間就可以節省出來了。當然還可以使用 jcmd 指令觸發 dump，比如：</p><pre><code class="language-bash">jcmd target/example-spring-boot-0.0.1-SNAPSHOT.jar JDK.checkpoint</code></pre><p>這個可以在任意時候觸發，這就可以在 dump 前做完所有的預熱邏輯，然後 dump 出來的狀態就是性能峯值狀態了</p><span id="OSC_h4_22"></span><h4>遇到的問題</h4><p><strong>1、JDK 依賴問題</strong></p><p>CRaC 特性依賴 JDK 特性支持，目前 openjdk 發行版只支持到 JDK17：<span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FCRaC%2Fopenjdk-builds%2Freleases" rel="nofollow" target="_blank"><span><span><img height="14" src="https://github.com/fluidicon.png" width="14" referrerpolicy="no-referrer"></span><span>Releases · CRaC/openjdk-builds</span></span></a></span></span></span></span> 。如果在不支持的 JDK 下啓用 <code>CRaCCheckpointTo</code>，則會輸出：</p><pre><code class="language-bash">Unrecognized VM option 'CRaCCheckpointTo'
Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.</code></pre><p>CRaC 最早是 Azul 發起的一個項目，可以用 Azul 的社區發行版來驗證 CRaC 特性，如：</p><ul><li><span style="background-color:var(--ds--code--bg-color,var(--ds-background-neutral, #F4F5F7)); color:var(--ds-text, #172B4D)"><code class="language-"><span>docker image：azul/zulu-openjdk:21-jdk-crac</span></code></span></li></ul><p><strong>2、GC 算法問題</strong></p><p>ZGC 算法下，不支持 CRaC，在 ZGC 啓用時，會輸出：</p><pre><code class="language-bash">Error: Could not create the Java Virtual Machine.
Error: A fatal exception has occurred. Program will exit.
-XX:+UseZGC is currently unsupported for -XX:CRaCCheckpointTo.</code></pre><p>為了驗證 CRaC 功能，只好先移除 <code>-XX:+UseZGC</code></p><p><strong>3、打開的 FD &amp; Socket 問題</strong></p><p>CRaC 要求應用程序關閉所有打開的文件、網絡連接等。在 Linux 上，這些內容表示為文件描述符。但是，可能很難更改應用程序以與檢查點正確協調，例如，由於無法修改庫中的代碼。在這些情況下，CRaC 通過配置提供有限的處理。</p><div><div>
            &nbsp; 
          </div><div><p>理論上所有的資源都需要向 JVM 註冊資源的 Checkpoint 前後的資源狀態，Spring 內置的依賴都處理好了這一步，但是三方依賴，比如 Opentelemetry 、Apollo 等沒有做這一步，就會出現一些異常。</p></div></div><ul><li>Opentelemetry 的問題</li></ul><pre><code class="language-java">Suppressed: jdk.internal.crac.mirror.impl.CheckpointOpenFileException: FD fd=35 type=regular path=/tmp/opentelemetry-temp-jars2649059754140254392/jartqV3k80l.jar (deleted)
at java.base/jdk.internal.crac.mirror.Core.translateJVMExceptions(Core.java:114) ~[na:na]
at java.base/jdk.internal.crac.mirror.Core.checkpointRestore1(Core.java:188) ~[na:na]
at java.base/jdk.internal.crac.mirror.Core.checkpointRestore(Core.java:286) ~[na:na]
at java.base/jdk.internal.crac.mirror.Core.checkpointRestore(Core.java:265) ~[na:na]
at jdk.crac/jdk.crac.Core.checkpointRestore(Core.java:72) ~[jdk.crac:na]
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103) ~[na:na]
at java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]
at org.crac.Core$Compat.checkpointRestore(Core.java:141) ~[crac-1.4.0.jar!/:na]
... 17 common frames omitted</code></pre><ul><li>Apollo</li></ul><pre><code class="language-java">        Suppressed: java.nio.channels.IllegalSelectorException
                at java.base/sun.nio.ch.EPollSelectorImpl.beforeCheckpoint(EPollSelectorImpl.java:401)
                at java.base/jdk.internal.crac.mirror.impl.AbstractContext.invokeBeforeCheckpoint(AbstractContext.java:43)
                at java.base/jdk.internal.crac.mirror.impl.AbstractContext.beforeCheckpoint(AbstractContext.java:58)
                at java.base/jdk.internal.crac.mirror.impl.BlockingOrderedContext.beforeCheckpoint(BlockingOrderedContext.java:64)
                at java.base/jdk.internal.crac.mirror.impl.AbstractContext.invokeBeforeCheckpoint(AbstractContext.java:43)
                at java.base/jdk.internal.crac.mirror.impl.AbstractContext.beforeCheckpoint(AbstractContext.java:58)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore1(Core.java:153)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore(Core.java:286)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestoreInternal(Core.java:299)
        Suppressed: jdk.internal.crac.mirror.impl.CheckpointOpenSocketException: Socket[addr=apollo-config.dev.tapsvc.com/172.20.12.187,port=80,localport=47004]
                at java.base/jdk.internal.crac.JDKSocketResourceBase.lambda$beforeCheckpoint$0(JDKSocketResourceBase.java:68)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore1(Core.java:169)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore(Core.java:286)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestoreInternal(Core.java:299)</code></pre><p><strong>解決</strong></p><p>可通過 <span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.azul.com%2Fcore%2Fcrac%2Ffd-policies" rel="nofollow" target="_blank"><span><span><img height="14" src="https://docs.azul.com/favicon.webp" width="14" referrerpolicy="no-referrer"></span><span>File Descriptor Policies</span></span></a></span></span></span></span>來有限的處理。</p><p>新建文件 crac.yaml ，配置內容如下：</p><pre><code class="language-xml">type: socket
localAddress: *
action: ignore
---
type: file
path: /opt
action: ignore
---
type: file
path: /tmp
action: ignore
---
type: pipe
action: ignore</code></pre><p>在 Java 應用啓動系統參數裏設置 -Djdk.crac.resource-policies = /{path}/crac.yaml</p><p><strong>4、遺留的問題</strong></p><p>遺留了一個問題，怎麼都處理不了。剛好這個問題我認識的一個好友（Apollo 的作者）也遇到了，issue 如下：</p><ul><li><p><span><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-framework%2Fissues%2F31680" rel="nofollow" target="_blank"><span><span><img height="14" src="https://github.com/fluidicon.png" width="14" referrerpolicy="no-referrer"></span><span>CheckpointOpenFileException occurred with spring boot log files · Issue #31680 · spring-projects/spring-framework</span></span></a></span></span></span></span></p></li></ul><pre><code class="language-java"> Suppressed: jdk.internal.crac.mirror.impl.CheckpointOpenResourceException: FD fd=12 type=unknown path=anon_inode:[eventpoll]
                at java.base/jdk.internal.crac.mirror.Core.translateJVMExceptions(Core.java:117)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore1(Core.java:188)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore(Core.java:286)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestoreInternal(Core.java:299)
        Suppressed: jdk.internal.crac.mirror.impl.CheckpointOpenResourceException: FD fd=13 type=unknown path=anon_inode:[eventfd]
                at java.base/jdk.internal.crac.mirror.Core.translateJVMExceptions(Core.java:117)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore1(Core.java:188)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestore(Core.java:286)
                at java.base/jdk.internal.crac.mirror.Core.checkpointRestoreInternal(Core.java:299)</code></pre><span id="OSC_h3_23"></span><h3>關於 CRaC 的結論</h3><p>基於如下：</p><ul><li><p>Openjdk 發行版並未全部覆蓋支持，目前支持的最高版本是 JDK17。更高版本的支持只能用 Azul 的 JDK</p></li><li><p>當前還有非常多的集成問題，且大量第三方包並沒有做適配，Azul 官方給的 resource-policies 解決方案還屬於初步階段</p></li><li><p>Spring Boot 3.2 也是初步支持，Issue 區有大量集成的問題</p></li></ul><p>綜上，CRaC 距離生產可用還有很長的路要長，至少，當前解決應用啓動問題，預熱峯值問題，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.graalvm.org%2F" rel="nofollow" target="_blank">GraalVM</a> 的 Native 方案比 CRaC 要更成熟。當然，未來哪個方向會成為標準還不好説，CRaC 的優勢是保留了 JIT 的優化。</p></div></div></div></div></div></div></div></div></div><div><div>
   &nbsp; 
 </div></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 03:49:29 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/klblog/blog/10946547</guid>
            <link>https://my.oschina.net/klblog/blog/10946547</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GreatSQL 2023 年報]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>不知不覺 2023 年已經是過去式了，本文將從產品迭代、豐收收穫、生態合作、社區活動 4 個方面帶大家瞭解 GreatSQL 社區的 2023。</p><h2>01 產品迭代</h2><p>2023 年是發展的一年。在這一年裏，GreatSQL 社區版發佈了 3 個版本：8.0.25-17、8.0.32-24 以及 8.0.32-25。在最新發布的 8.0.32-25 版本中，GreatSQL 首次推出支持高性能的內存查詢加速 AP 引擎，可將 GreatSQL 的數據分析性能提升幾個數量級；同時大幅增加 Oracle 兼容特性，支持更多數據類型、SQL 語法、函數及存儲過程等；支持異步刪除 InnoDB 大表；支持在 MGR 只讀節點綁定動態 VIP 以及主節點切換時主動斷開當前連接，縮短應用端不可用時長。</p><p>此外，GreatSQL 8.0.32-25 基於 Percona Server for MySQL 8.0.32 版本，在 MySQL 8.0.32 基礎上做了大量的改進和提升以及眾多新特性。這其中包括線程池、審計、數據脫敏等 MySQL 企業版才有的特性，以及 performance_schema 提升、information_schema 提升、性能和可擴展性提升、用戶統計增強、PROCESSLIST 增強、Slow log 增強等大量改進和提升，這裏不一一重複列出。</p><p>GreatSQL 的持續迭代，離不開用戶們的反饋與貢獻。從 2022 年 8 月社區官網論壇上線，至目前為止，社區已經收到超過 400 個問題討論，2000 條互動回覆。</p><p>對於每位用戶來説，文檔是使用過程中不可或缺的重要資源。細心的用戶可能已經注意到，過去一年中，我們的文檔內容也在持續增加和完善。</p><p>在此，我們衷心感謝這一年中為 GreatSQL 項目開發、文檔編寫以及基礎設施進行貢獻的夥伴。由於感謝列表過長，詳細名單請參見社區文檔：致謝（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2Fdocs%2F8032-25%2Fuser-manual%2F1-docs-intro%2F1-7-thanks.html%EF%BC%89%E3%80%82" target="_blank">https://greatsql.cn/docs/8032-25/user-manual/1-docs-intro/1-7-thanks.html）。</a></p><h2>02 豐收收穫</h2><p>2023 年是收穫的一年。GreatSQL 開源數據庫項目成功捐贈開放原子開源基金會，成為基金會旗下孵化項目。同時，GreatSQL 社區還通過了中國信通院可信開源社區評審，取得了社區運營能力先進級、社區治理和社區開發能力增強級的社區成熟度評估，加入信通院數據庫應用創新實驗室，成為實驗室成員之一。</p><p>在開源社區、開源組織合作上，GreatSQL 與 OpenAnolis、OpenCloudOS 達成社區合作；同時是開源之夏活動合作社區之一。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c3b6f5256bff43f1657324cd690c2f73d00.png" alt="file" referrerpolicy="no-referrer"></p><p>除此之外，GreatSQL 還收穫了以下榮譽：</p><ol><li>入選 2023 年中國數據庫產業圖譜</li><li>開源中國 2023 年度優秀開源技術團隊</li><li>開放原子開源基金會 2023 年度快速成長開源項目</li><li>OpenCloudOS 社區 2023 年度優秀貢獻企業</li></ol><p><img src="https://oscimg.oschina.net/oscnet/up-eaac4f3e71d2fada057f62b688e93cca9d5.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-b4b3d4cc5b77a12e4e2a147a0e3f0045957.png" alt="file" referrerpolicy="no-referrer"></p><h2>03 生態合作</h2><p>2023 年是合作的一年。在這一年中，GreatSQL 社區與華為存儲、騰訊雲、OpenCloudOS 社區、神州數碼、軟通動力、浪潮卓數、中科海光、中科馭數、中科可控、秦派軟件、JumpServer、TOPIAM、ScaleFlux 等 20 餘家企業完成產品兼容性測試，為社區用戶提供了更便捷的軟硬件及應用服務對接。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7fbd9bf9a2a8e6413e5a8651911ff6f7576.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-83a796aa6732690280492d183b7f9c55472.png" alt="file" referrerpolicy="no-referrer"></p><h2>04 社區活動</h2><p>2023 是互動的一年。在這一年中，社區組織了 10 餘個線上論壇互動活動，創建了社區茶話會、社區月會；自建、參加了 20 餘場線上直播分享、線下技術沙龍，與墨天輪、3306Π、InfoQ、開源中國、開放原子開源基金會、中國信通院達成了深度合作。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a017eeb32a56e6fb336a19955e7caa9982a.png" alt="file" referrerpolicy="no-referrer"></p><h2>05 展望</h2><p>2024 社區將繼續發展，GreatSQL 將繼續投入更多的精力開發優化產品，同時，我們也希望能夠有更多的外部開發者參與到項目的開發建設中，歡迎大家給 GreatSQL 提 issue、提 pr~</p><p>在每月社區月會的線上分享方面，也期待大家踴躍報名參與線上分享。分享內容是 GreatSQL 相關即可，如有意向可以聯繫社區小助手哦~（小助手微信：wanlidbc）</p><p>最後，大家對於產品、網站、文檔有何建議，歡迎到社區論壇反饋~（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2Fforum-39-1.html%EF%BC%89" target="_blank">https://greatsql.cn/forum-39-1.html）</a></p><h2>2024 期待更多的人加入 GreatSQL，並肩前行。</h2><p>Enjoy GreatSQL :)</p><h2>關於 GreatSQL</h2><p>GreatSQL 是適用於金融級應用的國內自主開源數據庫，具備高性能、高可靠、高易用性、高安全等多個核心特性，可以作為 MySQL 或 Percona Server 的可選替換，用於線上生產環境，且完全免費併兼容 MySQL 或 Percona Server。</p><p>相關鏈接： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2F" target="_blank">GreatSQL 社區</a><a href="https://gitee.com/GreatSQL/GreatSQL">Gitee</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreatSQL%2FGreatSQL" target="_blank">GitHub</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F1363850082%2Ffavlist" target="_blank">Bilibili</a></p><h2>GreatSQL 社區：</h2><p><img src="https://oscimg.oschina.net/oscnet/up-98ea3fd53d8ec58d6807ed1d9e70d1217af.png" alt="image" referrerpolicy="no-referrer"></p><p><strong>社區有獎建議反饋：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2Fthread-54-1-1.html" target="_blank">https://greatsql.cn/thread-54-1-1.html</a></p><p><strong>社區博客有獎徵稿詳情：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2Fthread-100-1-1.html" target="_blank">https://greatsql.cn/thread-100-1-1.html</a></p><p>（對文章有疑問或者有獨到見解都可以去社區官網提出或分享哦~）</p><h2>技術交流羣：</h2><p>微信&amp;QQ 羣：</p><p>QQ 羣：533341697</p><p>微信羣：添加 GreatSQL 社區助手（微信號：<code>wanlidbc</code> ）好友，待社區助手拉您進羣。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 03:47:29 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/GreatSQL/blog/10946645</guid>
            <link>https://my.oschina.net/GreatSQL/blog/10946645</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Deno 1.4 正式發佈，新增 Temporal API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Deno 1.40 已正式發佈，新版本包含了大量增強 Deno 體驗的功能，引入了用於高級日期和時間操作的強大的 Temporal API，並採用了最新的裝飾器語法，使代碼更具表現力。在取得這些進步的同時，還實施了一系列棄用、穩定和刪除措施，旨在簡化 Deno 的功能併為 Deno 2 做好準備。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6569c160926801e26123b213e2088ef4952.png" referrerpolicy="no-referrer"></p><p>新功能概覽：</p><ul><li><p><code>Temporal</code>API</p></li><li><p><code>import.meta.filename</code>和<code>import.meta.dirname</code></p></li><li><p>裝飾器</p></li><li><p>簡化<code>deno.json</code>中的導入</p></li><li><p>停用、穩定和刪除</p></li><li><p>Web API：<code>rejectionhandled</code>事件</p></li><li><p>WebGPU 窗口/"自帶窗口"</p></li><li><p>Node.js 兼容性改進，API 更新</p></li><li><p>LSP 改進</p></li><li><p>更美觀的診斷程序</p></li><li><p><code>deno lint</code>更新</p></li><li><p>更改處理不穩定功能的方式</p></li></ul><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeno.com%2Fblog%2Fv1.40" target="_blank"><strong>詳情</strong></a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 03:40:47 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276687/deno-1-40-released</guid>
            <link>https://www.oschina.net/news/276687/deno-1-40-released</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JavaScript 運行時 Bun 引入新工具：Bun Shell]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日，Bun 開發團隊宣佈推出新工具：<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbun.sh%2Fblog%2Fthe-bun-shell" target="_blank">Bun Shell</a></u></strong>。Bun Shell 是 Bun 新引入的實驗性嵌入式語言和解釋器，支持在 JavaScript 和 TypeScript 中運行跨平台 Shell 腳本，不需要額外的轉換和打包。</p><p>在 Bun Shell 中，所有模板變量都會自動「逃逸」 (Escape)，以增加 Shell 指令執行的安全性。另外，諸如通配符、重定向、管道命令 (Pipe)、環境變量等常見 Shell 功能，Bun Shell 也一應俱全。</p><blockquote><p>Bun 是速度極快的 JavaScript 運行時，採用 Zig 編寫，集打包器、轉譯器和包管理器於一身。</p><p><img height="538" src="https://static.oschina.net/uploads/space/2024/0126/110818_6mK2_2720166.png" width="1430" referrerpolicy="no-referrer"></p></blockquote><p>團隊稱 Bun Shell 旨在解決在 JavaScript 中執行 Shell 困難的問題，其簡單直觀，具有豐富的功能，支持在 Windows、macOS 和 Linux 跨平台上使用。</p><p>開發者如果在 JavaScript 執行 Shell 指令，首先會遇到跨平台兼容性問題，因為不同的操作系統具有不同的 Shell 環境和指令，因此即便是相同的 Shell 指令，在不同的操作系統上的結果也可能不同，甚至特定指令在部分系統上不存在。</p><p>而且不同的操作系統設置環境變量的方式也不同，這增加了跨平台應用中管理環境變量的複雜性。啓動 Shell 程序還會增加額外的系統資源消耗，尤其是需要執行多個 Shell 指令的場景，在特定情況下，啓動 Shell 的時間甚至可能比執行指令本身還久。</p><p>基於此背景，Bun 開發團隊推出了 Bun Shell 工具，旨在為開發者提供更高效的跨平台解決方案。&nbsp;Bun Shell 作為 Bun JavaScript 執行環境的一部分，提供了跨平台執行 Shell 指令的新方法。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 03:19:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276685/bun-shell</guid>
            <link>https://www.oschina.net/news/276685/bun-shell</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Vulkan 2024 路線圖發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Khronos Group <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.khronos.org%2Fnews%2Fpress%2Fkhronos-drives-industry-support-for-expanded-3d-features-with-vulkan-roadmap-2024" target="_blank">宣佈</a>了跨平台 3D 圖形和計算 API 項目 Vulkan 的 Roadmap 2024&nbsp;里程碑，作為其最新 API 功能的規範。定義了一套重要的着色器和光柵化功能，遊戲和應用程序開發人員可以依靠這些功能從 2024 年開始在中高端 GPU 上獲得廣泛支持。</p><p>Vulkan 路線圖的目標市場是由中高端智能手機、平板電腦、筆記本電腦、遊戲機和台式機組成的"immersive graphics"市場。該路線圖規範為目標設備提供了<span style="background-color:#ffffff; color:#333333">顯着的功能增強</span>，並設定了 API 的發展方向，包括<span style="background-color:#ffffff; color:#333333">為 Vulkan 開發人員提供新的硬件功能和編程模型的改進</span>。</p><p><span style="background-color:#ffffff; color:#333333">Vulkan 路線圖 2024 是 Vulkan 路線圖的第二個里程碑版本，</span><span style="background-color:#ffffff; color:#121212">基於 Vulkan 1.3 和 Vulkan 路線圖 2022 規範構建；包括新的擴展、</span><span style="background-color:#ffffff; color:#333333">對許多以前可選功能的強制支持以及最低硬件功能的增加：</span></p><ul><li><strong><span style="background-color:#ffffff; color:#333333">Dynamic Rendering Local Read</span>：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.vulkan.org%2Fspec%2Flatest%2Fproposals%2Fproposals%2FVK_KHR_dynamic_rendering_local_read.html" target="_blank">VK_KHR_dynamic_rendering_local_read</a>&nbsp;擴展添加了對動態渲染的幀緩衝區本地依賴性的支持，允許開發人員完全轉向在所有 GPU 上進行動態渲染。查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.khronos.org%2Fblog%2Fstreamlining-subpasses" target="_blank">博客文章</a>瞭解詳細信息。</li><li><strong>Shader Maximal Reconvergence：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.vulkan.org%2Fspec%2Flatest%2Fproposals%2Fproposals%2FVK_KHR_shader_maximal_reconvergence.html" target="_blank">VK_KHR_shader_maximal_reconvergence</a>&nbsp;擴展定義了着色器中線程發散的直觀行為，從而能夠開發高級並行算法。&nbsp;</li><li><strong>Shader Quad Control：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.vulkan.org%2Fspec%2Flatest%2Fproposals%2Fproposals%2FVK_KHR_shader_quad_control.html" target="_blank">VK_KHR_shader_quad_control</a>&nbsp;擴展定義了控制流中的增強紋理操作，從而提高了性能和質量。更多詳細信息可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.khronos.org%2Fblog%2Fkhronos-releases-maximal-reconvergence-and-quad-control-extensions-for-vulkan-and-spir-v" target="_blank">博客。</a></li><li><strong>其他功能：</strong>Vulkan Roadmap 2024 里程碑還要求支持 shader half-float 和 8/16 位整數類型、multi-draw indirect、着色器繪製參數、push descriptors，以及增加到 7 個 Descriptor Sets 和 8 個 Color Attachments。</li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>對這些新擴展的支持將包含在下一個 Vulkan SDK 版本中。大多數支持 Vulkan Roadmap 2024 里程碑的 Vulkan 採用者預計將從 2024 年開始提供符合要求的產品。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>其他新擴展包括 VK_KHR_shader_subgroup_rotate、VK_KHR_shader_expect_assume 和 VK_KHR_shader_float_controls2。此外，VK_KHR_index_type_uint8、VK_KHR_line_rasterization 和 VK_KHR_load_store_op_none 擴展也從以前的"EXT"擴展升級到了 Khronos (KHR)。</p><p><img height="298" src="https://oscimg.oschina.net/oscnet/up-aaa27db5446559e0346e8725c26684b620b.png" width="500" referrerpolicy="no-referrer"></p><p>Vulkan 路線圖規範是對 Vulkan 核心規範的補充，它確定了在特定細分市場中逐漸得到廣泛支持的功能，併為實施定義了額外的最低限制，以減少碎片化。</p><p>更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.khronos.org%2Fnews%2Fpress%2Fkhronos-drives-industry-support-for-expanded-3d-features-with-vulkan-roadmap-2024" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 03:17:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276684/vulkan-roadmap-2024</guid>
            <link>https://www.oschina.net/news/276684/vulkan-roadmap-2024</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[蘋果在歐盟地區放開對瀏覽器和應用商店的限制]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">1 月 25 日，蘋果<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.apple.com.cn%2Fnewsroom%2F2024%2F01%2Fapple-announces-changes-to-ios-safari-and-the-app-store-in-the-european-union%2F" target="_blank">發佈官方新聞稿</a></u>，宣佈在歐盟地區對 iOS、Safari 瀏覽器和 App Store 進行更改。這些更改包括 600 多個新 API、拓展的 app 分析、<strong>支持替代瀏覽器引擎的功能</strong>，以及<strong>處理 app 支付和發行 iOS app 的新選項</strong>。</p><p>具體來説，iOS 在歐盟地區將發生的更改包括：</p><ul><li><p><strong>通過替代 app 市場發行 iOS app 的新選項</strong>——包括新的 API 和工具，使開發者能在 App Store 以外的 app 市場提供 iOS app 供用戶下載。</p></li><li><p><strong>創建替代 app 市場的新框架和 API</strong>——使市場開發者能夠代表其他開發者通過其專門的市場 app 來安裝 app 並管理更新。</p></li><li><p><strong>替代瀏覽器引擎的新框架和 API</strong>——使開發者能夠使用 WebKit 之外的瀏覽器引擎，提供瀏覽器 app 和包括 app 內瀏覽體驗的 app。</p></li><li><p><strong>互操作性申請表</strong>——開發者可以提交額外申請，以實現 iPhone 和 iOS 軟硬件功能的互操作性。</p></li></ul><p>Safari 瀏覽器在歐盟地區的更改如下：iOS 用戶現在就可以將第三方網絡瀏覽器（而非 Safari 瀏覽器）設為默認瀏覽器。按照 DMA 的規定，Apple 還將推出新的選擇界面，用戶在 iOS 17.4 或後續版本中首次打開 Safari 瀏覽器時將顯示新的可選界面。這個界面將提示歐盟用戶從選項列表中選擇默認瀏覽器。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f9b12adb84f5c3b5de102d8b1f5e146bb5.png" referrerpolicy="no-referrer"></p><p>最後是關於 App Store 的更改。這涉及在歐盟地區發行 app 的開發者，對 iOS、iPadOS、macOS、watchOS 和 tvOS 等 Apple 操作系統的 app 構成影響。這些更改還包括新的信息披露，告知歐盟用戶使用 App Store 安全支付處理之外的替代方式可能帶來的相關風險。</p><p><img src="https://oscimg.oschina.net/oscnet/up-730b6de9add6449d08aafe3f6f9724444ea.png" referrerpolicy="no-referrer"></p><p>蘋果還共享了面向在歐盟地區發行 app 的開發者的新業務條款。開發者可選擇採用這些新業務條款，或者保持 Apple 現有的條款。<strong>開發者如需在歐盟發行的 app 中使用替代發行或替代支付處理的新功能，則必須採用這些新業務條款</strong>。</p><p>歐盟地區 iOS app 的新業務條款包括三個要素：</p><ul><li><p><strong>降低的手續費</strong>——通過 App Store 發行的 iOS app 為數字商品和服務交易支付的手續費降低為 10 %（適用於絕大多數開發者及首年後的訂閲）或 17%。</p></li><li><p><strong>支付處理使用費</strong>——通過 App Store 發行的 iOS app 另行支付 3% 的手續費後，可使用 App Store 的支付處理功能。開發者可在其 app 內使用支付服務提供商，或通過鏈接引導用戶訪問其網站以處理支付，無需向 Apple 支付額外費用。</p></li><li><p><strong>核心技術使用費</strong>——通過 App Store 和/或其他 app 市場發行的 iOS app 安裝量超過 100 萬次後，須每年為每首次安裝支付 €0.50。</p></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5056c6b387dfceea303badd372714a1c904.png" referrerpolicy="no-referrer"></p><p>對於在歐盟發行的 iPadOS、macOS、watchOS 和 tvOS app，開發者如使用 PSP 處理支付或通過鏈接將用戶引導至其網站進行支付處理，其支付給 Apple 的手續費將享受 3% 的折扣。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 02:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276674</guid>
            <link>https://www.oschina.net/news/276674</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2023 年我國軟件業務收入 123258 億元，同比增長 13.4%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">工信部<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.miit.gov.cn%2Fgxsj%2Ftjfx%2Frjy%2Fart%2F2024%2Fart_5af672124ebc48149d9c793b6ca7ed79.html" target="_blank">發佈</a>了「</span>2023 年軟件業經濟運行情況<span style="background-color:#ffffff; color:#222222">」指出，</span><span style="color:#070707">2023 年，我國軟件和信息技術服務業（下稱「軟件業」）運行穩步向好，軟件業務收入高速增長，盈利能力保持穩定，軟件業務出口小幅回落。</span></p><h4><strong>一、總體運行情況</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>軟件業務收入高速增長。</strong>2023 年，全國軟件和信息技術服務業規模以上企業超 3.8 萬家，累計完成軟件業務收入 123258 億元，同比增長 13.4%，增速較上年同期提高 2.2 個百分點。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="234" src="https://oscimg.oschina.net/oscnet/up-1b97b22cee91cda6a3f540dd959411d3e79.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>盈利能力保持穩定。</strong>2023 年，軟件業利潤總額 14591 億元，同比增長 13.6%，增速較上年同期提高 7.9 個百分點，主營業務利潤率提高 0.1 個百分點至 9.2%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="246" src="https://oscimg.oschina.net/oscnet/up-f15afaf046e89fcb3cfd28a5311c2507a21.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>軟件業務出口小幅下滑。</strong>2023 年，軟件業務出口 514.2 億美元，同比下降 3.6%。其中，軟件外包服務出口同比增長 5.4%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="258" src="https://oscimg.oschina.net/oscnet/up-4f0dcd7f0c918ddcfde0f9cdaa78acfd5cd.png" width="500" referrerpolicy="no-referrer"></p><h4><strong>二、分領域情況</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>軟件產品收入平穩增長。</strong>2023 年，軟件產品收入 29030 億元，同比增長 11.1%，增速較上年同期提高 1.2 個百分點，佔全行業收入比重為 23.6%。其中，工業軟件產品實現收入 2824 億元，同比增長 12.3%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>信息技術服務收入較快增長。</strong>2023 年，信息技術服務收入 81226 億元，同比增長 14.7%，高出全行業整體水平 1.3 個百分點，佔全行業收入比重為 65.9%。其中，雲服務、大數據服務共實現收入 12470 億元，同比增長 15.4%，佔信息技術服務收入的 15.4%，佔比較上年同期提高 0.5 個百分點；集成電路設計收入 3069 億元，同比增長 6.4%；電子商務平台技術服務收入 11789 億元，同比增長 9.6%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>信息安全產品和服務收入穩步增長。</strong>2023 年，信息安全產品和服務收入 2232 億元，同比增長 12.4%，增速較上年同期提高 2.0 個百分點。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>嵌入式系統軟件收入兩位數增長。</strong>2023 年，嵌入式系統軟件收入 10770 億元，同比增長 10.6%，增速較上年同期回落 0.7 個百分點。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="281" src="https://oscimg.oschina.net/oscnet/up-1d99c080b597f4b24191920bde6400d2883.png" width="500" referrerpolicy="no-referrer"></p><h4><strong>三、分地區情況</strong></h4><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>東部、東北地區保持較快增長，中部地區增勢突出。</strong>2023 年，東部、中部、西部和東北地區分別完成軟件業務收入 100783 億元、6965 億元、12626 億元和 2884 億元，分別同比增長 13.8%、17.4%、8.7% 和 13.9%。其中，東部、中部、東北部地區高出全國平均水平 0.4、4.0、0.5 個百分點。四個地區軟件業務收入在全國總收入中的佔比分別為 81.8%、5.7%、10.2% 和 2.3%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="241" src="https://oscimg.oschina.net/oscnet/up-0f77a3ad2e52d1aced3eeabe74eae297d32.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>京津冀地區增勢突出，長三角地區穩中有升。</strong>2023 年，京津冀地區完成軟件業務收入 29827 億元，同比增長 17.1%，高出全國平均水平 3.7 個百分點；長三角地區完成軟件業務收入 35437 億元，同比增長 10.6%，增速上年同期提高 2.5 個百分點。兩個地區軟件業務收入在全國總收入中的佔比分別為 24.2%、28.7%。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>主要軟件大省收入佔比小幅提高，部分中西部省市增速亮眼。</strong>2023 年，軟件業務收入居前 5 名的北京、廣東、江蘇、山東、上海共完成收入 85135 億元，佔全國軟件業比重的 69.1%，佔比較上年同期提高 1.1 個百分點。軟件業務收入增速高於全國整體水平的省市有 13 個，其中增速高於 20% 的省份集中在中西部地區，包括內蒙古、安徽、青海等。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="253" src="https://oscimg.oschina.net/oscnet/up-8ff7d9c36aee2b9e76bfaab64e8ca01c0fb.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><strong>中心城市軟件業務收入穩步增長，利潤總額增速大幅提高。</strong>2023 年，全國 15 個副省級中心城市實現軟件業務收入 59604 億元，同比增長 11.2%，增速較上年同期提高 1.2 個百分點，佔全國軟件業的比重為 48.4%；實現利潤總額 7936 億元，同比增長 15.6%，增速較上年同期提高 13.2 個百分點。其中，哈爾濱、武漢、大連、深圳、濟南、青島、廈門和瀋陽軟件業務收入同比增速超過全行業整體水平。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left"><img height="321" src="https://oscimg.oschina.net/oscnet/up-45bf8cc440d9477f4ba12755cfa3e1612e4.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left">注：1.文中 2023 年數據均為快報數據，其他年份數據為年報數據。</p><p style="color:#070707; margin-left:0; margin-right:0; text-align:left">　　2.文中增速均按可比口徑計算。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 02:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276673</guid>
            <link>https://www.oschina.net/news/276673</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[淘寶啓動鴻蒙原生應用開發]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>華為終端雲服務微博發佈消息稱，淘寶正式啓動鴻蒙原生應用開發。</p><blockquote><p><span style="color:#000000">官宣！淘寶正式啓動鴻蒙原生應用開發，鴻蒙生態電商領域版圖進一步壯大<img alt="[送花花]" height="18" src="https://face.t.sinajs.cn/t4/appstyle/expression/ext/normal/cb/2022_Flowers_org.png" width="18" referrerpolicy="no-referrer">作為國內頭部電商平台，淘寶將基於 HarmonyOS NEXT 鴻蒙星河版，為消費者打造原生精緻、原生易用、原生流暢、原生安全、原生智能、原生互聯的全場景購物新體驗，也為千萬淘寶商家帶來更多商機。雙方的合作，將為電商行業帶來更廣闊的發展空間和機遇，加速行業奔赴全場景新未來！</span></p></blockquote><p><img height="250" src="https://oscimg.oschina.net/oscnet/up-1ec21c934f03bfea3623ef0fb104247fd6c.png" width="500" referrerpolicy="no-referrer"></p><p>目前，京東、支付寶、釘釘等頭部應用均已啓動鴻蒙原生應用開發。據華為此前介紹，已有超 200 家頭部應用加速鴻蒙原生開發，原生應用版圖成型。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 02:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276671</guid>
            <link>https://www.oschina.net/news/276671</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Lan Mouse —— 鍵鼠共享軟件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Lan Mouse 是一款類似於蘋果設備上的萬能控制的鍵鼠共享軟件。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>它允許用一套鼠標和鍵盤使用多台電腦。它也被稱為軟件 KVM 切換器。</p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>主要目標是 Linux 上的 Wayland，但 Windows 和 MacOS 以及 Xorg 上的 Linux 也有部分支持。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>目前已經有了 gtk 前端</li></ul><p><img alt="" height="416" src="https://static.oschina.net/uploads/space/2024/0103/171926_Xa22_4252687.png" width="300" referrerpolicy="no-referrer"></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>該項目的目標是成為 Synergy 2/3、Share Mouse&nbsp;等專有工具的開源替代品。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start">重點在於性能和簡潔、易於管理的實現，並可輕鬆擴展以支持其他後端，如 Android、iOS......。</p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>極快，</strong>因為它是用 Rust 編寫的。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 02:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lan-mouse</guid>
            <link>https://www.oschina.net/p/lan-mouse</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 管理與大模型的對話和提示歷史 DevChat]]>
            </title>
            <description>
                <![CDATA[<div align="center"><p><img src="https://github.com/devchat-ai/devchat/assets/592493/f39979fe-fe32-410b-bf9d-2118ac8ea3d5" alt="devchat" referrerpolicy="no-referrer"></p><h1><a id="user-content-devchat" class="anchor" href="https://gitee.com/devchat-ai/devchat#devchat"></a>DevChat</h1></div><p>👉 For an enhanced experience and UI, we welcome you to install <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fdevchat-vscode">Visual Studio Code extension</a> from <a href="https://gitee.com/link?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmerico.devchat">Visual Studio Marketplace</a>! Enjoy DevChat VSCode! 👏</p><div align="center"><p><a href="https://gitee.com/link?target=http%3A%2F%2Fmakeapullrequest.com"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square" alt="PRs Welcome" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fcircleci.com%2Fgh%2Fdevchat-ai%2Fdevchat%2Ftree%2Fmain"><img src="https://circleci.com/gh/devchat-ai/devchat/tree/main.svg?style=shield" alt="CircleCI" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fdevchat%2Fblob%2Fmain%2FLICENSE"><img src="https://img.shields.io/github/license/devchat-ai/devchat.svg" alt="GitHub license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fpepy.tech%2Fproject%2Fdevchat"><img src="https://pepy.tech/badge/devchat" alt="Downloads" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fbadge.fury.io%2Fpy%2Fdevchat"><img src="https://badge.fury.io/py/devchat.svg" alt="PyPI version" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdiscord.gg%2F9t3yrbBUXD"><img src="https://img.shields.io/discord/1106908489114206309?logo=discord" alt="Discord Chat" referrerpolicy="no-referrer"></a></p><p><strong>The AI Coding Assistant Made Effective by Manual Control</strong></p><p>🛠️ No excessive automation, just right AI where it works.</p><p>☕ Simple to use, without complicated prompt engineering.</p><p>🍻 Designed for extensibility.</p></div><h2><a id="user-content-what-is-devchat" class="anchor" href="https://gitee.com/devchat-ai/devchat#what-is-devchat"></a>What is DevChat?</h2><p>DevChat is an open-source platform that empowers developers to more effectively integrate AI into code generation and documentation. DevChat aims to go beyond simple code auto-completion and limited operations on code snippets. DevChat offers a highly <em>practical</em> and <em>effective</em> way for developers to interact and collaborate with large language models (LLMs).</p><h2><a id="user-content-why-devchat" class="anchor" href="https://gitee.com/devchat-ai/devchat#why-devchat"></a>Why DevChat?</h2><p>While there are many AI coding tools available, we developed DevChat based on our practical insights from generating tens of thousands of lines of code. DevChat makes the following distinctive design choices:</p><ul><li><strong>Precise manual control over the context embedded in a prompt</strong>. Precise control over context is the key to effective AI use. We find that most other "intelligent" or "automatic" tools tend to over-guess what a user needs to put into a prompt. That typically introduces more noise than LLMs can effectively manage.</li><li><strong>A simple, extensible prompt directory</strong>. Bring your own prompts, and build a library of what works for you and your team. Easily integrate your own prompt templates into DevChat, avoiding significant engineering effort or a steep learning curve. You don't need a complex framework to make AI work for you. All it takes is a standard editor operating on your filesystem.</li></ul><h2><a id="user-content-feature-overview" class="anchor" href="https://gitee.com/devchat-ai/devchat#feature-overview"></a>Feature Overview</h2><h3><a id="user-content-context-building" class="anchor" href="https://gitee.com/devchat-ai/devchat#context-building"></a>Context Building</h3><p>Great output requires great input. To maximize the power of AI, DevChat assists you seamlessly to <strong>provide the right context</strong> to the AI.</p><ul><li><p>For instance, to generate test cases for a function, you can add to the prompt the function along with an existing test case. The test case serves as a useful reference for DevChat, enabling it to understand how to write a valid test case specific to your environment, thus eliminating the need for you to specify every requirement in your prompt.</p><p><img src="https://github.com/devchat-ai/devchat-vscode/assets/592493/9b19c798-d06f-4373-8f8a-6a950c3a8ba5" alt="Add to context" referrerpolicy="no-referrer"></p></li><li><p>You can incorporate the output of any command, such as <code>tree ./src</code>, into a prompt with DevChat. For example, you can add the output of <code>git diff --cached</code> to DevChat, which can then generate a commit message for you.</p><p><img src="https://github.com/devchat-ai/devchat-vscode/assets/592493/7bd34547-762c-4f97-b792-8d05a9eb1dcf" alt="Generate a commit message" referrerpolicy="no-referrer"></p></li><li><p>Program analysis can assist in building the necessary context. Suppose you want DevChat to explain some code to you. DevChat can perform better if it's aware of the dependent functions that the code is calling. In this scenario, you can select the target code with DevChat to explain and add "symbol definitions" to the context (by clicking the plus button). DevChat will then generate a prompt that explains the target code, taking into account the dependent functions.</p></li></ul><h3><a id="user-content-prompt-extension" class="anchor" href="https://gitee.com/devchat-ai/devchat#prompt-extension"></a>Prompt Extension</h3><p>DevChat utilizes a directory to manage predefined prompt templates. You can easily add your own or modify existing ones using a text editor.
By default, the directory is named <code>workflows</code> and located in the <code>.chat</code> folder at your home directory. You can run <code>ls ~/.chat/workflows</code> in a terminal to see what's inside.</p><p>The <code>workflows</code> directory typically contains three subdirectories, <code>sys</code>, <code>org</code>, and <code>usr</code>. The <code>sys</code> (system) directory is a clone of <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fworkflows">https://github.com/devchat-ai/workflows</a>, which contains the default prompt templates. You can overwrite those system prompts. For instance, if you create <code>commit_message</code> in the <code>usr</code> directory and define your own <code>prompt.txt</code>, DevChat will use your version instead of the default in <code>sys</code> or <code>org</code>.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">workflows</span><span id="LC2" class="line">├── sys</span><span id="LC3" class="line">│   └── commit_message</span><span id="LC4" class="line">│       └── prompt.txt</span><span id="LC5" class="line">├── org</span><span id="LC6" class="line">│   └── commit_message</span><span id="LC7" class="line">│       └── prompt.txt</span><span id="LC8" class="line">└── usr</span><span id="LC9" class="line">    └── commit_message</span><span id="LC10" class="line">        └── prompt.txt</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>The <code>org</code> directory is useful for cleanly maintaining team-wise conventions or requirements. Your team can share a Git repository to store prompts in <code>org</code>, and every team member can locally sync <code>~/.chat/workflows/org</code> with the repository. The <code>org</code> prompts will overwrite those in <code>sys</code>, while an individual developer can then further customize them in <code>usr</code>.</p><p>You can incorporate a template in your prompt by typing a "command" with the corresponding name in the DevChat input. Type <code>/</code> followed by the command name, as shown below. The <code>/</code>-separated path to the prompt directory corresponds to a <code>.</code>-separated command name. For instance, if you want to embed the 'prompt.txt' file located in <code>path/to/dir</code> into your current prompt, you should type <code>/path.to.dir</code> into the DevChat input field, along with the other content of the prompt. Note that <code>sys</code>, <code>org</code>, or <code>usr</code> do not need to be included in a command name. DevChat will first look up the corresponding path under <code>usr</code>, then <code>org</code>, and finally <code>sys</code>.</p><img width="386" alt="image" src="https://github.com/devchat-ai/devchat-vscode/assets/592493/145d94eb-a3e8-42ca-bb88-a462b6070b2f" referrerpolicy="no-referrer"><h2><a id="user-content-quick-start" class="anchor" href="https://gitee.com/devchat-ai/devchat#quick-start"></a>Quick Start</h2><p><strong>For UI, install our <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fdevchat-vscode">Visual Studio Code extension</a> from <a href="https://gitee.com/link?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dmerico.devchat">Visual Studio Marketplace</a>. Read <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fdevchat-vscode%23quick-start">Quick Start</a> for the VS Code extension.</strong></p><p>For CLI:</p><ul><li>Install Python 3.8+ and <a href="https://gitee.com/link?target=https%3A%2F%2Fpip.pypa.io%2Fen%2Fstable%2Finstallation%2F">pip</a>.</li><li>Install DevChat by running: <code>pip install devchat</code>.</li><li>Set your <a href="https://gitee.com/link?target=https%3A%2F%2Fplatform.openai.com%2Faccount%2Fapi-keys">OpenAI API Key</a> by running <code>export OPENAI_API_KEY="[sk-...]"</code> (or DevChat access key).</li><li>To access help, use the command: <code>devchat --help</code> or <code>devchat prompt --help</code>.</li></ul><h2><a id="user-content-community" class="anchor" href="https://gitee.com/devchat-ai/devchat#community"></a>Community</h2><ul><li>Join our <a href="https://gitee.com/link?target=https%3A%2F%2Fdiscord.gg%2F9t3yrbBUXD">Discord</a>!</li><li>Participate in <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fdevchat%2Fdiscussions">discussions</a>!</li></ul><h2><a id="user-content-what-is-prompt-centric-software-development-pcsd" class="anchor" href="https://gitee.com/devchat-ai/devchat#what-is-prompt-centric-software-development-pcsd"></a>What is Prompt-Centric Software Development (PCSD)?</h2><ul><li><p>The traditional code-centric paradigm is evolving. Stay ahead of the curve with DevChat.</p></li><li><p>Write prompts to create code. Transform prompts into all the artifacts in software engineering.</p><img width="600" alt="image" src="https://github.com/devchat-ai/devchat/assets/592493/dd32e900-92fd-4fa4-8489-96ed17ab5e0e" referrerpolicy="no-referrer"><p><sub>(This image is licensed by devchat.ai under a <a rel="license" href="https://gitee.com/link?target=http%3A%2F%2Fcreativecommons.org%2Flicenses%2Fby-sa%2F4.0%2F">Creative Commons Attribution-ShareAlike 4.0 International License</a>.)</sub></p></li><li><p>We like to call it DevPromptOps</p><img width="500" alt="image" src="https://github.com/devchat-ai/devchat/assets/592493/e8e1215b-53b0-4473-ab00-0665d33f204a" referrerpolicy="no-referrer"><p><sub>(This image is licensed by devchat.ai under a <a rel="license" href="https://gitee.com/link?target=http%3A%2F%2Fcreativecommons.org%2Flicenses%2Fby-sa%2F4.0%2F">Creative Commons Attribution-ShareAlike 4.0 International License</a>.)</sub></p></li></ul><h2><a id="user-content-contributing" class="anchor" href="https://gitee.com/devchat-ai/devchat#contributing"></a>Contributing</h2><p>Issues and pull request are welcome: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdevchat-ai%2Fdevchat%2Fissues">https://github.com/devchat-ai/devchat/issues</a></p><h2><a id="user-content-contact" class="anchor" href="https://gitee.com/devchat-ai/devchat#contact"></a>Contact</h2><p>Email: <a href="mailto:hello@devchat.ai">hello@devchat.ai</a></p><p>We are creators of <a href="https://gitee.com/link?target=https%3A%2F%2Fdevlake.apache.org%2F">Apache DevLake</a>.</p>]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 01:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/devchat-ai/devchat</guid>
            <link>https://gitee.com/devchat-ai/devchat</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 小紅書如何做混部？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><em>作者：宋澤輝（小紅書）、張佐瑋（阿里雲）</em></p><p><strong>編者按：</strong></p><p>Koordinator 是一個開源項目，是基於阿里巴巴內部多年容器調度、混部實踐經驗孵化誕生，是行業首個生產可用、面向大規模場景的開源混部系統，致力於提升應用服務質量，優化資源使用效率。自 2022 年 4 月正式開源以來，吸引了業界眾多優秀工程師的貢獻參與和討論。</p><p>小紅書是 Koordinator 社區的活躍成員，自項目誕生初期就深度參與了一系列重要功能的演進。</p><h2>背景介紹</h2><p>隨着小紅書業務的高速發展，各類在線、離線業務對於計算資源的需求也在快速增長。與此同時，部分在線集羣天均利用率水位卻維持在較低水平，造成這一現象的主要原因有以下幾點：</p><ul><li>在線服務資源使用量隨着終端用戶的使用習慣呈現穩定的潮汐現象，夜間 CPU 利用率極低，導致集羣均值 CPU 利用率較低；</li><li>業務保有大量的獨佔資源池，資源池割裂產生大量的資源碎片，拉低 CPU 利用率；</li><li>業務為了穩定性考慮，會過量囤積資源，進一步拉低 CPU 利用率。</li></ul><p>基於以上背景，為了幫助業務降低資源使用成本，提升集羣 CPU 利用率，小紅書容器團隊從 2022 年開始，通過規模化落地混部技術來大幅提升集羣資源效能，降低業務資源成本。</p><h2>技術演進</h2><p>小紅書混部技術演進分為以下四個階段：</p><p><img src="https://oscimg.oschina.net/oscnet/up-b59b9a7f8d0367a4eda12acbb9c3b203f73.png" alt="" referrerpolicy="no-referrer"></p><h3>階段一：閒置資源再利用</h3><p>早期集羣資源管理粗放，集羣中存在大量業務獨佔資源池，因為資源碎片等因素存在大量低分配率的低效節點，散落在各個集羣中的低效節點形成大量資源浪費。另一方面，部分基於 K8s 發佈的轉碼類近線/離線場景，全天時段均存在大量計算資源需求。</p><p>基於以上背景，容器平台通過技術手段將集羣中的閒置資源收集起來，分配給轉碼類業務場景使用。</p><p>我們通過 virtual-kubelet 打通元數據集羣與物理集羣，將閒置資源匯聚起來，在元數據集羣分配給轉碼類場景近線/離線計算服務。策略方面，二次調度器負責巡檢集羣所有節點，識別為低效節點後標記出來，virtual-kubelet 獲取物理集羣中的低效節點可用資源作為集羣閒置資源二次分配給離線轉碼，同時二次調度器需要保證一旦在線服務有資源需求，將會立刻驅逐離線 pod 並歸還資源。</p><p><img src="https://oscimg.oschina.net/oscnet/up-78e3d5cbc621e1c69abc0afefcbe2197d3c.png" alt="" referrerpolicy="no-referrer"></p><h3>階段二：整機騰挪分時複用</h3><p>搜推廣等業務的獨佔資源池，CPU 利用率潮汐現象明顯，夜間利用率極低，資源池中的單個節點往往也只部署一個大規格業務 Pod。基於以上背景，平台通過彈性能力（HPA），在凌晨業務低峯期按比例對在線業務縮容，騰挪空出整機，並將轉碼、訓練等離線 pod 在該時段運行起來，起到利用率「填谷」的效果。</p><p>具體實施時，需要確保在線服務能在規定的時間內全部被拉起。為此，策略方面我們實現了<strong>離線提前退場</strong>，並通過<strong>調度器搶佔機制</strong>兜底，確保在線服務在業務高峯期來臨之前能被全量及時拉起。</p><p><img src="https://oscimg.oschina.net/oscnet/up-84cfb939630e3290582da737276ccf7ace3.png" alt="" referrerpolicy="no-referrer"></p><h3>階段三：常態混部</h3><p>為了降低資源碎片率，降低業務資源持有成本，平台持續推進業務大規模合池，將業務由獨佔池遷至平台託管的公共混部池，通過合池、資源超賣等技術手段，CPU 分配率得到有效提升，但依舊無法解決合併後的資源池夜間利用率較低等問題。</p><p>另一方面，合池後的複雜混部場景下，整機騰挪分時混部離線的調度策略很難再繼續實施，平台需要通過建設更為細粒度的資源管理與調度能力來實現均值利用率提升的目標，具體包含以下幾點：</p><ul><li><strong>調度側：</strong></li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>通過動態超賣技術獲取可二次分配給離線的可用資源量，並抽象出離線資源視圖讓 K8s 調度器感知到，調度器調度離線負載到對應節點上，實現離線對節點利用率的「填谷」效果；</li><li>通過負載調度，儘可能避免在線服務被調度到高負載機器，讓集羣中節點負載更加均衡；</li><li>通過二次調度，驅逐負載熱點機器上的高利用率服務，使得集羣負載處於動態均衡狀態。</li></ul></li></ul><p>&lt;!----&gt;</p><ul><li><strong>單機側：</strong></li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>支持 QoS(Quality of service) 保障策略，根據服務的 QoS 等級提供差異化的運行時資源保障能力；</li><li>支持幹擾檢測、離線驅逐等能力，當離線對在線敏感服務產生幹擾時，第一時間驅逐離線。</li></ul></li></ul><p>通過以上技術手段，可以有效保障服務混部時的穩定性，從而常態化的讓在線離線工作負載混跑在節點上，實現利用率填谷效果的最大化。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c998cbca3a8fdb866b8f348eee02a1b01b3.png" alt="" referrerpolicy="no-referrer"></p><h2>架構設計與實現</h2><p>小紅書容器資源調度架構設計如圖所示：</p><p><img src="https://oscimg.oschina.net/oscnet/up-ddb703bb314f3320fc3682b89fb86524ff5.png" alt="" referrerpolicy="no-referrer"></p><p>小紅書各類業務場景通過各類發佈平台、任務平台提交後，通過上層負載編排能力，以 pod 形式下發到統一調度系統。統一調度系統基於不同的調度需求，對在線服務提供強保障的資源交付能力，差異化的 QoS 保障能力，對離線服務提供最小資源需求的保障能力和極致的彈性能力。</p><p><strong>調度側：</strong></p><ul><li>離線調度：coscheduling；</li><li>二次調度：熱點驅逐，碎片整理；</li><li>負載調度：基於 CPU 水位；</li><li>資源視圖：模擬調度。</li></ul><p><strong>單機側：</strong></p><ul><li>壓制策略：bvt 壓制，內存驅逐；</li><li>QoS 保障：綁核，超線程幹擾抑制等；</li><li>Batch 資源上報：Batch 可用資源計算，上報；</li><li>指標採集 (from kernel)：psi，sched info 等；</li><li>幹擾檢測：基於 cpi、psi，業務指標的幹擾檢測。</li></ul><h3>離線調度資源視圖</h3><p>離線服務資源調度的基本原理是基於在線服務負載感知能力的動態超賣，具體實現是將節點空閒資源二次分配給離線業務：</p><p><img src="https://oscimg.oschina.net/oscnet/up-9f0140d3bc4c514c29851f93be91a4c3081.png" alt="" referrerpolicy="no-referrer"></p><p>其中離線可用資源為節點上的空閒資源（包含未分配資源和已分配未使用資源之和），扣除安全預留資源之後剩餘資源，離線可用資源計算公式如下：</p><p><strong>離線可用資源=整機資源–預留資源-在線服務實際使用量</strong></p><p>將計算出的離線可用資源量按照時間分佈後如圖所示（圖中綠色部分）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-9b5fa6103d2a81e88ec09bae09fa979dbfe.png" alt="" referrerpolicy="no-referrer"></p><p>實際落地過程中，為了避免離線可用資源隨在線服務資源使用波動而大幅波動，從而影響離線資源質量和離線服務運行穩定性，通過資源畫像對上述公式中的在線服務實際使用量數據進一步處理，去除數據噪點，最終計算出一個相對穩定的離線可用資源量（圖中綠色部分），如圖所示：</p><p><img src="https://oscimg.oschina.net/oscnet/up-0059aa876dc7ef1a03173b62449f22cdcc5.png" alt="" referrerpolicy="no-referrer"></p><h3>混部 QoS 保障策略</h3><h4>QoS 分級</h4><p>按照業務對於服務質量（QoS: Quality of Service）的需求，我們將小紅書的業務類型簡單的劃分為三個 QoS 級別，如下表所示：</p><table><thead><tr><th align="left"><strong>Qos 等級</strong></th><th align="left"><strong>説明</strong></th><th align="left"><strong>業務場景</strong></th></tr></thead><tbody><tr><td align="left">latency-sensitive</td><td align="left">最高 Qos 保障等級，延遲極為敏感服務</td><td align="left">搜推廣延遲極為敏感場景</td></tr><tr><td align="left">mid</td><td align="left">默認 Qos 保障等級，容忍部分幹擾延遲</td><td align="left">網關，java 微服務</td></tr><tr><td align="left">batch</td><td align="left">最低 Qos 保障等級，延遲不敏感，資源隨時可能被搶</td><td align="left">轉碼，spark，flink，訓練等計算場景</td></tr></tbody></table><h4>QoS 保障</h4><p>根據服務的 QoS 需求，節點側會做 Pod 粒度的分級資源保障，實現各個資源維度差異化 QoS 保障策略，具體的保障參數如下：</p><table><thead><tr><th align="left"><strong>資源</strong></th><th align="left"><strong>特性</strong></th><th align="left"><strong>latency-sensitive</strong></th><th align="left"><strong>mid</strong></th><th align="left"><strong>batch</strong></th></tr></thead><tbody><tr><td align="left">CPU</td><td align="left">cpu burst</td><td align="left">enable</td><td align="left">enable</td><td align="left">disable</td></tr><tr><td align="left">調度優先級</td><td align="left">最高</td><td align="left">默認</td><td align="left">低</td><td align="left"></td></tr><tr><td align="left">綁核</td><td align="left">share(默認)</td><td align="left">share(默認)</td><td align="left">reclaimed</td><td align="left"></td></tr><tr><td align="left">numa</td><td align="left">強保證</td><td align="left">prefer（默認）</td><td align="left">none</td><td align="left"></td></tr><tr><td align="left">L3 cache</td><td align="left">100%</td><td align="left">100%（默認）</td><td align="left">30%（默認）</td><td align="left"></td></tr><tr><td align="left">內存帶寬</td><td align="left">100%</td><td align="left">100%（默認）</td><td align="left">30%（默認）</td><td align="left"></td></tr><tr><td align="left">內存</td><td align="left">OOM 優先級</td><td align="left">最低</td><td align="left">默認</td><td align="left">最高</td></tr><tr><td align="left">內存回收水線</td><td align="left">調高</td><td align="left">默認</td><td align="left">調低</td><td align="left"></td></tr></tbody></table><p>在 CPU 核調度層面，分別設置了三種綁核類型，並設計了一套精細化 CPU 核編排策略，分配示意圖如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-9b81b8f479dca622fc2faff72988e3725bf.png" alt="" referrerpolicy="no-referrer"></p><p>三種綁核類型分別為：</p><ul><li>exclusive（不推薦）</li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>特點：綁定 cpuset 調度域，CCD 感知，numa 綁定，獨佔排他</li><li>場景：極為敏感的搜推廣大規格延遲敏感服務</li></ul></li></ul><p>&lt;!----&gt;</p><ul><li>share</li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>特點：綁定 cpuset 調度域，CCD 感知，numa（可選）綁定，share/exlusive 排他，可與 none 類型業務共享</li><li>場景：容忍部分幹擾的 Java 微服務，應用網關，web 服務</li></ul></li></ul><p>&lt;!----&gt;</p><ul><li>reclaimed</li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>特點：無 cpuset 綁定，可能與非 exlusive 綁核模式業務共享核，核的分配完全交由內核，CPU 資源並非 100% 能得到滿足</li><li>場景：batch 類離線服務，部分對延遲無要求的計算服務</li></ul></li></ul><h4>離線驅逐</h4><p>極端場景下，如整機內存使用率較高，有觸發 OOM 風險，或者離線業務 CPU 長期得不到滿足，單機側支持按照離線服務內部定義的優先級配置，資源用量，運行時長等多維度綜合算分排序後按序驅逐。</p><h3>離線業務場景</h3><p>小紅書作為一個數億用戶的內容社區，其離線業務場景豐富多樣，其中包含大量視頻類，圖片類轉碼場景，搜推，cv/nlp 算法推理訓練，算法特徵生產，數倉查詢等離線場景，具體來講，包含以下業務類型：</p><ul><li>近離線轉碼場景（已容器化）</li><li>Flink 流式/批式計算（已容器化）</li><li>Spark 批式計算 （未容器化，on yarn）</li><li>cv/nlp 算法回掃場景（已容器化）</li><li>訓練場景 （已容器化）</li></ul><p>通過提供以 K8s 為底座的在離線統一調度能力，將這些離線業務與在線服務混合部署在統一計算資源池內，為在線服務提供差異化的資源質量保障，為離線服務提供海量的低層本算力，實現資源效能的提升。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e278c91df5dff9cd5dfa0b2c8ec2fb2fe2c.png" alt="" referrerpolicy="no-referrer"></p><h4>K8s 與 Yarn 混部方案</h4><p>小紅書內部商業化，社區搜索等業務存在大量的算法類 Spark 任務因為離線集羣資源緊張導致任務堆積，不能得到及時處理，同時在線集羣在業務低峯時段資源使用率較低；另一方面，相當佔比的 Spark 任務資源調度仍舊運行在 Yarn 調度器上，在這樣的背景下，為了降低業務遷移成本，方案選型方面，我們選擇與 Kooridinator 社區合作，採用 Yarn on K8s 混部方案來快速落地 Spark 離線場景混部，具體方案如圖所示：</p><p><img src="https://oscimg.oschina.net/oscnet/up-21c973af2e9abe240b6e967c56668d29420.png" alt="" referrerpolicy="no-referrer"></p><p>其中容器化的在線、離線工作負載通過 K8s 鏈路發佈到在線集羣內，Spark 作業通過 Yarn ResourceManager 調度到具體節點，並由節點上的 Nodemanager 組件拉起。其中 Nodemanager 通過容器的方式部署在在線 K8s 集羣內，除此之外，還涉及到以下組件：</p><ul><li>調度側</li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>koord-yarn-operator ：支持 K8s 與 yarn 調度器資源視圖雙向同步；</li></ul></li></ul><p>&lt;!----&gt;</p><ul><li>節點側</li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>copilot：NodeManager 操作代理，提供 Yarn Task 管控接口；</li><li>Neptune-agent/koordlet：離線資源上報，節點離線 Pod/task 管理，衝突解決，驅逐，壓制策略；</li></ul></li></ul><p>支持 K8s 與 YARN 混部的核心能力目前已經在社區研發完成，在 Koordinator 1.4 版本進行發佈。</p><p><strong>多調度器資源同步</strong></p><p>K8s 調度器與 YARN 調度器之間原本獨立且相互不感知，為了共享分配在線集羣節點上的總可用離線資源，需要通過 koord-yarn-operator 組件來做兩個調度器之間的資源雙向同步和協調，並實現兩個同步鏈路：</p><ol><li>K8s-&gt;YARN 調度器資源同步鏈路，負責同步 Yarn 視角離線資源總量，其中 YARN 離線資源總量計算如下：</li></ol><p><strong>YARN 離線資源總量=離線總可用量-K8s 側節點已分配</strong></p><ol start="2"><li>YARN-&gt;K8s 調度器資源同步鏈路，負責同步 YARN 已分配資源量，其中 K8s 離線資源總量計算如下：</li></ol><p><strong>K8s 離線資源總量=離線總可用量-YARN 側節點已分配</strong></p><p>基於各自節點離線資源視圖，兩個調度器分別做出調度決策，調度 K8s 離線 Pod 與 YARN Task 到節點上，由於同步過程不適合加鎖，可能會出現資源被過量分配的問題：</p><p><img src="https://oscimg.oschina.net/oscnet/up-6d5e77cabc64d55070c37537e6985b4c5a2.png" alt="" referrerpolicy="no-referrer"></p><p>具體解決措施是在單機側增加了仲裁邏輯，當節點已分配離線服務資源量長期超過節點可用離線資源，且離線使用率持續較高，存在離線服務得不到資源被餓死的可能，單機側則會根據離線服務的優先級，資源佔用量，運行時長等因素綜合算分並按序驅逐。</p><p><strong>阿里雲 EMR 產品化支持</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-d1c1c3c4aa9bef46e34c575a9f0f6156861.png" alt="" referrerpolicy="no-referrer"></p><p>與此同時，阿里雲 EMR 團隊在產品層面提供了混部功能的開發支持，在兼容 EMR 原有日誌，監控，運維邏輯的基礎上，支持了 K8s 集羣彈性擴縮容 NodeManager Pod 的能力。</p><h2>落地收益</h2><p>截至目前，<strong>小紅書混部能力覆蓋數十萬台機器規模，覆蓋算力規模數百萬核，支持數萬規模在線、離線場景服務的資源調度。</strong> 通過大規模容器混部的持續推進，小紅書在資源成本效能等方面都取得了顯著收益，具體包含以下兩方面：</p><ul><li><strong>CPU 利用率</strong></li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>在保證在線服務服務質量的前提下，在線混部集羣天均 CPU 利用率提升至&nbsp;<strong>45% 以上</strong>，部分集羣天均 CPU 利用率可穩定提升至&nbsp;<strong>55%。</strong></li><li>通過在離線混部等技術手段，在線集羣 CPU 利用率提升&nbsp;<strong>8%-15%</strong>&nbsp;不等，部分存儲集羣 CPU 利用率提升可達&nbsp;<strong>20% 以上。</strong></li></ul></li></ul><p>&lt;!----&gt;</p><ul><li><strong>資源成本</strong></li></ul><p>&lt;!----&gt;</p><ul><li><ul><li>在保證離線業務穩定性的前提下，為小紅書各類離線場景提供<strong>數百萬核時</strong>的低成本算力。</li><li>混部集羣 CPU 分配率提升至 125% 以上，相較於獨佔資源池，資源碎片率明顯下降。</li></ul></li></ul><h2>社區共建歷程</h2><p><img src="https://oscimg.oschina.net/oscnet/up-4bd9476d9b418fa4c29e0b648c65ab748c9.png" alt="" referrerpolicy="no-referrer"></p><p>小紅書是早期參與 Koordinator 社區的公司之一，2022 年 4 月，Koordinator 正式開源，同年 6 月，小紅書內部啓動了在離線混部項目，開始參與 Koordinator 方案設計與代碼提交。2022 年 8 月，小紅書與社區共建了 runtime-proxy 組件，並在內部場景落地。2023 年 4 月，小紅書在社區主導啓動了 YARN 與 K8s 混部項目，2023 年 8 月，該方案在小紅書內規模化落地。</p><p>截至目前，依託 Koordinator 的助力，小紅書的混部已經覆蓋公司數萬台節點，提供數十萬核離線資源，<strong>整體混部集羣的利用率提升至 45% 以上，</strong> 取得了不錯的落地效果。</p><h2>總結與展望</h2><p>在小紅書近一年多混部技術探索過程中，我們在資源效能提升方面積累了較為豐富的落地經驗，並取得了不錯的提升效果，隨着公司業務規模逐步增長，場景愈發複雜，我們將會面臨諸多新的技術挑戰。下個階段我們的目標是建設面向混合雲架構的統一資源調度能力，具體工作將圍繞以下三方面展開：</p><ol><li><strong>混合工作負載調度能力支持：</strong> 包括大數據、AI 在內的任務型工作負載調度能力建設，滿足小紅書所有業務場景的資源調度功能，性能需求；</li><li><strong>資源效能進一步提升：</strong> 面向混合雲架構，推進更大規模的資源合池，推進 quota 化資源交付，通過更加激進的彈性，混部，超賣等技術手段，實現集羣資源利用率的進一步提升，資源成本的大幅下降；</li><li><strong>更高服務質量保障能力：</strong> 在更為激進的 CPU 利用率目標背景下，通過建設 QoS 感知調度能力，幹擾檢測能力，依託安全容器等技術手段，解決深水區混部中可能遇到的各類混部幹擾問題。</li></ol><h2>Koordinator&nbsp;社區近期規劃</h2><p>再接下來的幾個版本中，Koordinator 將在以下幾個方面進行重點投入：</p><ul><li><strong>調度器性能優化：</strong> 支持等價類調度，通過合併 request 相同的 pod，避免 filter、score 等調度過程的重複計算。</li><li><strong>Network QoS：</strong> 網絡維度容器服務質量，保障高優先級帶寬，設計 request/limit 模型，保障最低帶寬需求。</li><li><strong>大數據負載：</strong> 支持 Gang 調度原子搶佔，按分組整體搶佔 Pod；面向 Hadoop YARN 任務的 QoS 策略適配。</li><li><strong>資源幹擾檢測：</strong> 基於底層指標、感知容器資源競爭情況，識別異常 Pod，消除幹擾並反饋調度鏈路。</li></ul><p>釘釘搜索羣號：33383887&nbsp;加入 Koordinator 社區釘釘羣。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 26 Jan 2024 01:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10946554</guid>
            <link>https://my.oschina.net/u/3874284/blog/10946554</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[前谷歌 TensorFlow 核心創始成員潘欣加入零一萬物]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fm0eaQE1v31TuikBUPzT7jg" target="_blank">根據「甲子光年」的獨家報道</a></u>，前谷歌 TensorFlow 核心創始成員潘欣已於去年加入「零一萬物」，擔任首席架構師，負責多模態研發。</p><p>潘欣畢業於北京郵電大學與滑鐵盧大學計算機系，與深度學習框架打交道多年，曾任職於谷歌、百度、騰訊、字節跳動，在 CVPR，ICCV，SoCC 等會議發表論文。</p><p><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-a04b47ece9e9525e21443ef117ecec0e7a2.png" width="300" referrerpolicy="no-referrer"></p><p>在谷歌期間，潘欣先在 Core Infra 從事大數據系統開發，後在 2015 年底加入谷歌大腦團隊（Google Brain），與谷歌大腦的聯合創始人傑夫·迪恩（Jeff Dean）、薩米·本吉奧（Samy Bengio）等合作，為 TensorFlow 和 Brain Research 的核心創始成員之一，對 Eager、TPU、Profiling 和 Model Zoo 等技術做出重要貢獻。</p><p>2017 年底，潘欣帶着「打造國產第一框架」的理想受邀加入百度，擔任深度學習技術平台部架構師，負責 PaddlePaddle 框架開發。2019 年，潘欣加入騰訊擔任平台與內容事業羣（PCG） AI 平台技術負責人，打造了深度學習框架「無量」。</p><p>在加入零一萬物之前，潘欣在字節跳動擔任 AIGC 和視覺大模型 AI 平台負責人。</p><blockquote><p>零一萬物是李開復博士在 2023 年 3 月底正式宣佈籌辦的大模型公司，由創新工場出資設立。2023 年 11 月，據報道，零一萬物已完成由阿里雲領投的新一輪融資，估值達到 10 億美元，躋身大模型獨角獸之列。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e43530b36778f17a86630730a5953d511ec.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 11:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276646</guid>
            <link>https://www.oschina.net/news/276646</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AI 工具正在導致代碼質量的下降]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">開發者分析公司 GitClear 最新發布了一份調查<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gitclear.com%2Fcoding_on_copilot_data_shows_ais_downward_pressure_on_code_quality" target="_blank">報告</a>，基於對着&nbsp;4 年來的數據的檢查，其中包括超過 1.5 億行被修改過的代碼，以確定 Copilot 對代碼編寫質量的影響。</span></p><p><span style="color:#000000">結果發現，代碼的流失率顯着上升，為 7.1%，而 2020 年這一數據僅為 3.3%。與此同時，代碼複用率卻出現了令人擔憂的下降。</span></p><p><span style="color:#000000">GitHub 的 Copilot 於 2021 年 6 月推出測試版，掀起了 AI 編碼浪潮；來自 GitHub 和其他消息來源的數據稱，在 2023 年期間，採用 AI 輔助開發的開發人員將超過 50%。GitHub 首席執行官 Thomas Dohmke 稱，該軟件已擁有超過 100 萬開發者付費訂閲。並表示，藉助此工具開發者完成任務的速度提高了 55%，在啓用 Copilot 的文件中，46% 的代碼是由 Copilot 完成的。</span></p><p><span style="color:#000000">GitClear 的這項調查主要聚焦於代碼質量而非數量。研究人員觀察到，AI 助手傾向於給出"添加代碼的建議，但從未給出更新、移動或刪除代碼的建議"。且"代碼建議算法的動機是提出最有可能被接受的建議"。</span></p><p><img height="204" src="https://oscimg.oschina.net/oscnet/up-5cfd06b230fbe9cc212837f160c873c9ee9.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">研究人員發現，added、deleted、updated 以及 copy/pasted 的代碼量已經突破新高；但移動代碼的實例卻有所下降。他們對大量複製/粘貼代碼的行為影響深惡痛絕，並指出"對代碼的長期可維護性而言，沒有比這更大的禍害了"。</span></p><p><span style="color:#000000">不過，GitClear 的研究人員並沒有就如何解決發現的問題發表太多意見，而是提出了"後續研究的問題"。但他們提出建議稱"監控接收到的數據，並考慮其對未來產品維護的影響"。</span></p><p><span style="color:#000000">總的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2024%2F01%2F24%2Fai-assistance-is-leading-to-lower-code-quality-claim-researchers%2F" target="_blank">來説</a>，AI 助手不會消失，儘管它們可能會有所改進，並且像所有新工具一樣，開發人員將學習如何優化其使用。</span></p><p style="text-align:start"><span style="color:#000000">在某些方面，這項研究可能會讓那些擔心被 AI 工具取代的開發人員感到放心。</span><span style="background-color:#ffffff"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcodescene.com%2Fhubfs%2Fwhitepapers%2FRefactoring-vs-Refuctoring-Advancing-the-state-of-AI-automated-code-improvements.pdf" target="_blank">代碼分析公司 CodeScene 最近</a></span><span style="color:#000000">進行的一項關於 AI 重構的研究得出的結論是：「在編碼環境中，AI 遠無法取代人類；今天的 AI 太容易出錯，而且遠未達到能夠安全修改現有代碼的程度。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 10:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276640/ai-assistance-lower-code-quality</guid>
            <link>https://www.oschina.net/news/276640/ai-assistance-lower-code-quality</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[原魅族副總嘲諷華為花上萬億建設鴻蒙生態]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>曾擔任過魅族副總裁，但如今已離職多年的李楠發文嘲諷華為花上萬億把安卓生態移植到鴻蒙，是硬製造困難，而後引發激烈爭論。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ed126bf0724c6b85a56bb88acc1c3c4a43f.png" referrerpolicy="no-referrer"></p></blockquote><p>1 月 22 日，李楠發文稱：</p><blockquote><p>華為鴻蒙哥説把 Android 生態移植到鴻蒙要上萬億。我就想説沒有看到今天 AIAgent 的能力嗎，本地 API 學習一遍，AI 可以直接寫 Py 分步驟完成任務了。需需可能沒幾年，LLM 要把 Apps 生態覆了，你花上萬億還去搞移植，這就是所謂的沒有困難就製造困難嗎。</p></blockquote><p>隨後，李楠的言論遭到了對方反駁：</p><blockquote><p>第一，我不是華為的;第二，我説的數據都有案例支撐，例如京東，美團;第三，AI 確實可以加速這一進程，但目前還停留在概念上:第四，你又沒寫過程序，你裝啥逼？</p></blockquote><p>對此李楠迴應稱，自己是 20 多年前 211 計算機專業正經本科畢業，互聯網後端和移動互聯網前端寫了 10 多年代碼。碼農，troubleshooting，架構，項目，產品一路幹過來，反駁了對方説自己沒寫過程序的説法。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3c73b7065d810c2f30d7d723a6a94bcc5a5.png" referrerpolicy="no-referrer"></p></blockquote><p>1 月 22 日晚，李楠進一步發文稱：</p><blockquote><p>算了我也直接一點吧，AI 時代研究怎麼花上億遷移 apps 生態的，都是 sb。更別説萬億了，相關的我都拉黑。這個內容我不改，就像幾年前我預言 ARM 反攻桌面一樣。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ef3ef94a39bf36319191c2a54de00c07868.png" referrerpolicy="no-referrer"></p></blockquote><p>1 月 24 日下午，李楠最後一次迴應此次「論戰」：</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-271d9fca5d439c8791831048cb216485b0a.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 08:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276635</guid>
            <link>https://www.oschina.net/news/276635</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[全面升級！Apache HugeGraph 1.2.0 版本發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span>圖數據庫以獨特的數據管理和分析能力，在企業數智化轉型的過程中正在成為數據治理的核心，根據 IDC 調研顯示，95% 的企業認為圖數據庫是重要的數據管理工具，超過 65% 的廠商認為在業務上圖數據庫優於其他選擇，尤其是在金融風控、欺詐檢測、關係分析和預測分析等方面。中國圖數據庫市場正經歷從市場教育階段到大規模商業化落地的初期轉變，在此行業背景下，&nbsp;<span style="color:#0052ff"><strong>Apache HugeGraph (Incubating) 1.2.0 版本的發佈，不僅是技術的迭代，更是對產業的積極響應，該版本在系統語言、查詢語言支持、服務器端算法、大數據處理框架以及易用性等方面進行了全面升級，旨在為用戶提供更高效、更靈活的數據管</strong></span></span><span style="color:#0052ff"><strong>理和開發解決方案。經過百度內部的風控、搜索、愛企查等多個產品線使用驗證，並<span style="background-color:#ffffff; color:#0052ff">有<strong><span style="background-color:#ffffff">網易遊戲、科大訊飛、視源股份、網商銀行、虎牙直播、YY 直播、貨拉拉、360</span><span style="background-color:#ffffff">、</span><span style="background-color:#ffffff">百分點科技等</span></strong>超過 100 個社區用戶/組織在使用 HugeGraph 。</span></strong></span></p><p><span>Apache HugeGraph 1.2.0 版本包含 3W+ 行 Pull Request 代碼變更提交 ，在性能和實用性、易用性上做了大量改進和修復。&nbsp; HugeGraph 1.2.0 版本繼續支持 Java 11，並保留對 Java 8 的兼容，下一步邁向 Java17。確保了與最新技術的無縫對接。Server 端大幅重構增強了已有的 OLTP 圖算法，支持並行化迭代 + BFS/DFS 雙模式查詢, 內置了監控和 Trace 插件, 支持了初版的 Slow Query 查詢, 新增 Spark-Connector 組件進行數據的導入導出, Computer 也新增了隨機遊走/社羣發現等算法。更多詳細內容請參見官網發佈説明</span><span>（<span style="color:#0052ff">https://hugegraph.apache.org/docs/changelog/hugegraph-1.2.0-release-notes/</span>）。</span></p><p><span><img alt="" height="974" src="https://oscimg.oschina.net/oscnet/up-c22a598ea842ef16e1cd9b3024882a50513.png" width="866" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">易用性方面，HugeGraph 1.2.0 版本提供了一鍵 Server/Hubble 容器化 Docker 支持，重構整合了圖周邊工具鏈為 HugeGraph Toolchain ，簡化了部署和使用流程。此外，</span><span style="background-color:#ffffff; color:#0052ff"><strong>2023 年 HugeGraph 通過了飛騰、麒麟、海光等信創廠商的兼容性認證，以及入選</strong><strong>GLCC 2023 優秀社區及優秀管理員、開放原子開源基金會 2023 年活力開源貢獻者，進一步證明瞭其在國產數據庫生態中的重要地位。</strong></span></p><p><span style="background-color:#ffffff; color:#0052ff"><strong><img alt="" height="1144" src="https://oscimg.oschina.net/oscnet/up-1ddd13ae8695acd71cb2e74578d5efb081d.jpg" width="788" referrerpolicy="no-referrer"></strong></span></p><p><span style="color:#000000"><span style="color:#000000">HugeGraph 於 2016 年由百度安全發起兩年後開源，在 2022 年以全票通過的優秀表現正式成為全球首個加入 Apache 孵化的圖數據庫項目，是國內首個開源的圖數據庫，提供了一站式的千億級大規模圖數據的存儲、在線查詢、離線分析平台，促使國產圖數據庫走向世界，在提升圖數據庫產品開發效率、降低產業應用成本的同時，在人才、生態建設產生深遠的影響，讓更多開發者因此受益。</span></span></p><p><span>Apache HugeGraph 1.2.0 版本的發佈，標誌着圖數據庫技術的又一重要進步。我們期待這一版本能夠助力企業在金融風控、欺詐檢測等領域實現更高效的數據管理和分析，推動中國圖數據庫市場的快速發展。立即體驗 HugeGraph 1.2.0 版本，開啓您的數據智能新篇章！未來，百度安全也將持續與產學研各界合作伙伴保持合作，共同迎接大模型時代下圖數據庫的新機遇、新挑戰，共築安全防線，探索圖數據庫賦能千行百業的無限可能。</span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 08:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4501957/blog/10946509</guid>
            <link>https://my.oschina.net/u/4501957/blog/10946509</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[開源軟件的存在是否影響了廣大程序員的收入？]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/2720166_2331655">開源軟件的存在是否影響了廣大程序員的收入？</a><div class="ui red label horizontal" data-tooltip="置頂">頂</div></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/hardbone" class="__user"><span>局</span></a> 發佈於，昨天 15:49
                    </div><div class="item">閲讀 1K+</div><div class="item collect-btn " data-id="2331655" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331655" data-obj-type="2">1</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/2720166_2331655#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">11</span></a></div></div><div class="content" id="articleContent"><p><span><strong>開源運動的反對者認為：</strong></span></p><div><div><div><div><div><p><span>類似於 Linux 內核之類的軟件，相當於軟件開發人員將自己的勞動成本免費拋向社會，而這一部分價值原本應該是由整個社會來承擔的。</span></p><p><span>人們對於軟件的需求是有限的，當這部分需求被免費得到後，相當於整個軟件開發行業的收入就會降低。</span></p><p><span>而對於另一些項目，在需求不變的情況下，如果沒有開源項目以供參考，軟件公司就要招收更多的軟件開發人員開發程序，如此下來軟件開發人員的工作崗位就會增加。</span></p><p><span>按照這種邏輯，首先開發開免費的源軟件的那個程序員的平均時薪會降低，因為他的一部分工作是沒有獲得勞動報酬的。其次整個行業的總收入會降低，因為有了免費的軟件，人們不大可能會願意花錢購買收費的同樣功能的軟件。</span></p><p><span>即使開源軟件採取收費策略，但相比起閉源軟件來説，也更容易遭到破解。事實上大部分開源軟件都並不收費。</span></p><p><span><strong>對開源運動做出維護：</strong></span></p><p><span>開源軟件的盛行使更多的人接觸到更多的軟件（人們更樂意接受不收費的東西），使人們更加依賴計算機軟件解決問題，而不是其他途徑。這使得使用計算機軟件的人數增多，從而催生出更多的需求。</span></p><p><span>另一方面，大量的開源軟件的出現帶動了社會生產力的進步，生產力的進步使社會的總體收入增加，程序開發人員自然也會跟着增加。</span></p><p><span><strong>你認為開源軟件的存在對廣大程序員的收入是正向的還是負面的？</strong></span></p></div></div></div></div></div></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331655" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331655" data-obj-type="2">1</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331655" data-obj-type="2" data-url="https://www.oschina.net/question/2720166_2331655"><i class="flag red icon"></i>舉報</a></div></div>
            ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 07:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/2720166_2331655</guid>
            <link>https://www.oschina.net/question/2720166_2331655</link>
        </item>
        <item>
            <title>
                <![CDATA[蘋果 Mac 誕生 40 年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>蘋果 CEO 蒂姆·庫克今天在個人微博慶祝 Mac 誕生 40 週年。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-6fe3fc1659e0c08bb7388f87a41590780e4.png" referrerpolicy="no-referrer"></p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5524254784%2FNDqPXgd7H" target="_blank">https://weibo.com/5524254784/NDqPXgd7H</a></em></u></p></blockquote><p>40 年前的 1984 年，史蒂夫·喬布斯向外界展示了 Macintosh，並稱其為「計算機的未來」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ee0017fdf2ae38f2df579a0596c872a37da.png" referrerpolicy="no-referrer"></p><p>麥金塔電腦（Macintosh，1998 年後多被簡稱為 Mac），是自 1984 年 1 月起由蘋果公司設計、開發和銷售的個人電腦系列產品。目前 Mac 產品線包含以下系列：iMac、Mac mini、Mac Studio、Macbook Air、Macbook Pro、Macbook、Mac Pro 等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-77ad4fac2810b6172e79419b15f14a89534.png" referrerpolicy="no-referrer"></p><p>Mac 在歷史上曾經 3 次更換指令集架構：</p><ul><li>1994 年，Mac 從摩托羅拉 68000 系處理器遷移至 PowerPC 處理器</li><li>2005 年至 2006 年，Mac 從 PowerPC 處理器遷移至 Intel 平台處理器</li><li>2020 年至 2023 年，Mac 從 Intel 平台處理器遷移至蘋果處理器</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 04:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276599/apple-mac-40-anniversary</guid>
            <link>https://www.oschina.net/news/276599/apple-mac-40-anniversary</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ollama 發佈 Python 和 JavaScript 庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Ollama Python 和 JavaScript 庫的初始版本現已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Follama.ai%2Fblog%2Fpython-javascript-libraries" target="_blank">推出</a>：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Follama%2Follama-python" target="_blank">Ollama Python Library</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Follama%2Follama-js" target="_blank">Ollama JavaScript Library</a></li></ul><p>這兩個庫都可以通過幾行代碼將新的和現有的應用程序與 Ollama 集成，並共享 Ollama REST API 的 features 和 feel。</p><p><img height="224" src="https://oscimg.oschina.net/oscnet/up-4ef62e38763d1ebcd9807a29b6849e8339c.png" width="500" referrerpolicy="no-referrer"></p><blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Ollama 是一款命令行工具，可在 macOS 和 Linux 上本地運行 Llama 2、Code Llama 和其他模型。目前適用於 macOS 和 Linux，並計劃支持 Windows。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Ollama 目前支持近二十多個語言模型系列，每個模型系列都有許多可用的 "tags"。Tags&nbsp;是模型的變體，這些模型使用不同的微調方法以不同的規模進行訓練，並以不同的級別進行量化，以便在本地良好運行。量化級別越高，模型越精確，但運行速度越慢，所需的內存也越大。</span></p></blockquote><h4><strong>Getting Started</strong></h4><p><strong>Python</strong></p><pre><code class="language-shell">pip install ollama</code></pre><pre><code class="language-python">import ollama
response = ollama.chat(model='llama2', messages=[
  {
    'role': 'user',
    'content': 'Why is the sky blue?',
  },
])
print(response['message']['content'])</code></pre><p><strong>JavaScript</strong></p><pre><code>npm install ollama</code></pre><pre><code class="language-javascript">import ollama from 'ollama'

const response = await ollama.chat({
  model: 'llama2',
  messages: [{ role: 'user', content: 'Why is the sky blue?' }],
})
console.log(response.message.content)
</code></pre><h4><strong>用例</strong></h4><p>這兩個庫都支持 Ollama 的全套功能。以下是 Python 中的一些示例：</p><p><strong>Streaming</strong></p><pre style="margin-left:0; margin-right:0; text-align:start"><code class="language-python">for chunk in chat('mistral', messages=messages, stream=True):
  print(chunk['message']['content'], end='', flush=True)
</code></pre><p><strong>Multi-modal&nbsp;</strong></p><pre style="margin-left:0; margin-right:0; text-align:start"><code class="language-python">with open('image.png', 'rb') as file:
  response = ollama.chat(
    model='llava',
    messages=[
      {
        'role': 'user',
        'content': 'What is strange about this image?',
        'images': [file.read()],
      },
    ],
  )
print(response['message']['content'])
</code></pre><p><strong>Text Completion&nbsp;</strong></p><pre style="margin-left:0; margin-right:0; text-align:start"><code class="language-python">result = ollama.generate(
  model='stable-code',
  prompt='// A c function to reverse a string\n',
)
print(result['response'])
</code></pre><p><strong>Creating custom models&nbsp;</strong></p><pre style="margin-left:0; margin-right:0; text-align:start"><code class="language-python">modelfile='''
FROM llama2
SYSTEM You are mario from super mario bros.
'''

ollama.create(model='example', modelfile=modelfile)
</code></pre><p><strong>Custom client</strong>&nbsp;</p><pre style="margin-left:0; margin-right:0; text-align:start"><code class="language-python">ollama = Client(host='my.ollama.host')</code></pre><p>更多示例可查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Follama%2Follama-python%2Ftree%2Fmain%2Fexamples" target="_blank">Python</a>&nbsp;和&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Follama%2Follama-js%2Ftree%2Fmain%2Fexamples" target="_blank">JavaScript</a>&nbsp;庫。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 25 Jan 2024 02:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276592/python-javascript-libraries</guid>
            <link>https://www.oschina.net/news/276592/python-javascript-libraries</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
