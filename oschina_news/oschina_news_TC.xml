<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-最新資訊]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-最新資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 28 Nov 2023 05:15:19 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[滴滴昨晚系統服務故障，技術團隊連夜修復]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>11 月 28 日凌晨，「滴滴崩了」相關話題登上微博熱搜，多個用戶表示滴滴 App 無法正常使用。對此滴滴緊急迴應稱「由於系統故障，今天晚間滴滴 App 服務出現異常，經技術同學緊急修復，目前正陸續恢復中。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-795f1525cfa56ab2e93c3007ac4f10118a3.png" referrerpolicy="no-referrer"></p><p>從用戶反饋看，11 月 27 日晚間 10 點多起，陸續有用戶反饋無法使用滴滴旗下相關 App，滴滴搶修超過了 9 小時。</p><p>對此，在 11 月 28 日早間，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuBQfuzij" target="_blank">滴滴發佈微博更新了恢復情況</a></u>，滴滴稱「經技術團隊連夜修復，滴滴網約車等服務已恢復，用戶可下載滴滴 App 使用打車服務。騎車等服務還在陸續修復中，所有可開鎖或未關鎖的青桔車輛均可免費騎行，希望能為緩解早高峯壓力努力多做一點點。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3e973f0017d2a44b92e63ec57b2224d9ef6.png" referrerpolicy="no-referrer"></p><p>雖然滴滴表示網約車服務已恢復，但是不少用戶早間在微博反饋仍然無法打車，只能選擇其他平台出行。</p><p>從司機反饋看，此次滴滴平台在接單、定位、計費等環節上都出現了問題。有網約車司機表示，昨晚 App 崩潰時剛好在接單，「從晚上 10 點 20 分開始什麼都做不了，客服電話也進不了線。目前恢復了少部分功能，但不能正常使用，很多錯單亂單，還出現了多位司機接同一單的現象。」</p><p>有業內人士表示，出問題的應該是滴滴自己的 IDC，這種事故也會加速滴滴全部上雲的步伐。從過往情況看，滴滴崩潰多是因為機房網絡故障等原因，不過故障當天都能修好，本次故障維修時長或是滴滴歷次故障之最。</p><p>目前滴滴由滴滴雲提供服務。滴滴雲官網顯示，滴滴出行的雲計算服務基於滴滴出行的業務技術和經驗積累，採用領先的雲計算架構、高規格服務器集羣搭建、高性能資源配置機制、精細化運營模式，致力於為開發者提供簡單快捷、高效穩定、高性價比、安全可靠的 IT 基礎設施雲服務。</p><p>在今年 2 月，滴滴雲發佈公告，由於產品線調整，滴滴雲在 2023 年 3 月 31 日起將不再對外提供公有云服務。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 04:30:11 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268480</guid>
            <link>https://www.oschina.net/news/268480</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mitosis —— 前端編譯時框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mitosis 是一個編譯時框架，可以讓開發者使用 JSX 編寫組件，並將其編譯為原生 JavaScript、Angular、React、Vue 等多種框架的代碼。</p><p>Mitosis 使用了受 Solid 啓發的靜態 JSX 子集，可以將其解析為簡單的 JSON 結構，然後輕鬆構建針對不同框架和實現的序列化器。</p><p>與其他編譯時框架相比，Mitosis 類似於 Svelte 和 SolidJS，它們都是編譯時框架，非常快速。但與它們的不同之處在於，Mitosis 允許你生成多個框架的代碼，從而提供了最大的靈活性。</p><p>與 SolidJS 類似，Mitosis 使用一種將組件編譯為 JSON 的 JSX 版本。插件可以將組件編譯為不同的目標，使你可以創建雙向工具：</p><ol><li>可以轉換為 Mitosis JSON 的代碼</li><li>將 JSON 編譯或序列化為目標框架的插件</li></ol><p>Mitosis 得到了 <a href="http://builder.io/">Builder.io</a> 的支持，因為 Mitosis 還支持無代碼工具。通過將其序列化為 <a href="http://builder.io/">Builder.io</a> 的 JSON 格式，Mitosis 可以與無代碼工具無縫集成。</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:08:51 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/mitosis</guid>
            <link>https://www.oschina.net/p/mitosis</link>
        </item>
        <item>
            <title>
                <![CDATA[龍芯宣佈兼容 IE 的龍芯瀏覽器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">在今日上午舉辦的 2023 龍芯產品發佈暨用戶大會上，龍芯中科介紹了龍芯平台當前的生態發展，稱其已可運行絕大多數 X86 / Linux 應用，並爭取 1-2 年後流暢運行絕大多數 X86 / Windows 應用。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a41459afcde42a92f9ad416d6fca4d8f732.png" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start">龍芯平台已支持多個國產操作系統和基礎應用，後續將通過二進制翻譯運行 X86 應用，兼容 Windows 和安卓應用。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-86b36d9e89683e59c00caa945cf2aab9fef.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c91a07b40ce827b5d10883b6fe1138abc2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55e8d68de37d96583e2acb6ba8d53dba16b.png" referrerpolicy="no-referrer"></p><p>大會上，龍芯中科宣佈了與 IE 瀏覽器兼容的<strong>「龍芯瀏覽器」</strong>。從官方公開的 PPT 可以看到，龍芯瀏覽器之所以在 2023 年還兼容 IE，是因為我國信息系統主要基於 IE 構建。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b7fb745bc3039ea3eb00357a2cc36dd5d5d.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 04:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268477</guid>
            <link>https://www.oschina.net/news/268477</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Reddit 再次試水 IPO]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">彭博社</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-27%2Freddit-leads-class-of-2024-us-ipo-candidates-testing-the-water%3Fsref%3Dgni836kR" target="_blank"><span style="color:#2980b9">報道</span></a><span style="color:#000000">稱，Reddit「正在與潛在投資者就首次公開募股進行談判。」&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Reddit 總部位於舊金山，由&nbsp;Steve Huffman&nbsp;、Aaron Swartz 和 Alexis Ohanian 於 2005 年聯合創立。消息人士透露，該公司正在考慮最早在明年第一季度上市。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="331" src="https://oscimg.oschina.net/oscnet/up-2b1b4904c5ce1731bc1a4743a3619d6d07d.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">2021 年 12 月，Reddit 祕密向美國證券交易委員會提交了一份上市註冊聲明草案，但相關計劃並未成功實現。此舉發生在 Reddit 獲得由富達（Fidelity）領投的 4.1 億美元鉅額融資、估值達到 100 億美元的幾個月之後。當時，Reddit 計劃以 7 億美元完成 F 輪融資。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">然後，在 2022 年 1 月，Reddit 甚至邀請摩根士丹利和高盛參與上市工作。當時，該公司考慮的估值高達 150 億美元。&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">目前尚不清楚如果該公司真的上市，明年的估值將會達到多少。Reddit 發言人向外媒 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F11%2F27%2Freddit-might-once-again-be-flirting-with-an-ipo%2F" target="_blank">TechCrunch</a> 表示，該公司正處於靜默期，無法發表評論。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268471/reddit-might-once-again-flirting-ipo</guid>
            <link>https://www.oschina.net/news/268471/reddit-might-once-again-flirting-ipo</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[龍芯 3A6000 桌面處理器正式發佈，國產之光！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在今日上午舉辦的&nbsp;2023 龍芯產品發佈暨用戶大會上，龍芯 3A6000 國產桌面通用處理器正式發佈。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3e6662d2058f428348499738edb731d2f88.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2bf0856cd3fa1f2a6bae9ce059cc87ace7f.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-064f9db667224d22c42556b43acac5bafe7.png" referrerpolicy="no-referrer"></p><blockquote><p>此處引用一下<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWgrMt3RO7w0a1kNyydptog" target="_blank">央視新聞的報道原文</a></u></em>：<br><br><strong>龍芯 3A6000 採用我國自主設計的指令系統和架構，無需依賴任何國外授權技術，是我國自主研發、自主可控的新一代通用處理器，可運行多種類的跨平台應用，滿足各類大型複雜桌面應用場景。</strong></p><p><strong>它的推出，標誌着我國自主研發的 CPU 在自主可控程度和產品性能方面達到新高度，性能達到國際主流產品水平。</strong></p></blockquote><p>據介紹，<strong>龍芯 3A6000 </strong>擁有四個物理核 / 八個邏輯核，主頻 2.0-2.5GHz，<strong>採用第四代 64 位微架構 LA664，實現 SMT2 技術</strong>，支持雙通道 DDR4-3200 內存，片內集成安全可信模塊，支持安全啓動和國密算法（SM2、SM3、SM4）等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f13f4b4df7a318d97e95b08500fbdf966c5.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b28daeabb9b929cefa3541d62533899f8cd.png" referrerpolicy="no-referrer"></p><p>龍芯 3A6000 突破了同時多線程 (SMT, Simultaneous Multi-Threading) 技術，支持 CPU 核心在同一時刻運行多個線程，<strong>相比上一代龍芯 3A5000 的單線程性能提升 60%，多線程性能提升 100%</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-59bdeef2ea7f1bf45930f2862938198ffc6.png" referrerpolicy="no-referrer"></p><p>根據龍芯官方實測，<strong>2.5GHz 龍芯 3A6000 性能可達英特爾 10 代酷睿 3.6GHz&nbsp;i3-10100 的水平</strong>，下一步爭取使用成熟工藝達到英特爾、AMD 先進工藝 CPU 的性能。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f0c409ce43a2e7c78d093de804acbc7ce2f.png" referrerpolicy="no-referrer"></p><p>此外，<strong>龍芯後續將推 3B6000、3B7000 等桌面端產品</strong>，而在服務端已完成龍芯 3C6000 設計，筆記本端已完成 2K3000 前端設計。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-202643b33452a1f49b4f60821a77e9010eb.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e19da8aac185fc7beffd93031306d623c92.png" referrerpolicy="no-referrer"></p><hr><p>華碩電腦開放平台中國區總經理俞元麟昨晚在其 B 站賬號（@普普通通 Tony 大叔）更新的視頻介紹了龍芯 3A6000 CPU 的性能表現：：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV15u4y1A7aK%2F">《國產最強！龍芯中科 3A6000 台式機 CPU 性能測試》</a></em></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2f786c32b8e5bec71a427021176790a2fdb.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268459/loongson-3a6000</guid>
            <link>https://www.oschina.net/news/268459/loongson-3a6000</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 數據同步中間件 MyDataHarbor]]>
            </title>
            <description>
                <![CDATA[<p align="center"><br><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.mydataharbor.com" target="_blank"><img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/mydataharbor.png" alt="logo" referrerpolicy="no-referrer"></a></p><p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fmydataharbor.com"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmydataharbor%2Fmydataharbor%2Factions%2Fworkflows%2Fmaven.yml" target="_blank"><img src="https://img.shields.io/github/actions/workflow/status/mydataharbor/mydataharbor/maven.yml?branch=main" alt="GitHub-CI" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmydataharbor%2Fmydataharbor%2Freleases" target="_blank"><img src="https://img.shields.io/github/v/release/mydataharbor/mydataharbor" alt="查看發行的版本" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fsearch.maven.org%2Fsearch%3Fq%3Dcom.mydataharbor" target="_blank"><img src="https://img.shields.io/maven-central/v/com.mydataharbor/mydataharbor" alt="maven 倉庫" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmydataharbor%2Fmydataharbor%2Freleases" target="_blank"><img src="https://img.shields.io/github/downloads/mydataharbor/mydataharbor/total" alt="下載數量" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmydataharbor%2Fmydataharbor%2Fblob%2Fmain%2FLICENSE" target="_blank"><img src="https://img.shields.io/github/license/mydataharbor/mydataharbor" alt="開源協議" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fmydataharbor.yuque.com%2Fbooks%2Fshare%2Fd5b1360e-d316-4be0-85de-b0958ac64267%2Fpckin3" target="_blank"><img src="https://img.shields.io/badge/plugins-%E6%B8%85%E5%8D%95-blue" alt="插件列表" referrerpolicy="no-referrer"></a></p><p>歡迎前端、插件開發人員前來貢獻代碼，感興趣的請聯繫我：<a href="mailto:1053618636@qq.com">1053618636@qq.com</a></p><h2><a id="user-content-簡介定位" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E7%AE%80%E4%BB%8B%E5%AE%9A%E4%BD%8D"></a>簡介/定位</h2><p><img class="emoji" alt=":cn:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/cn-8adc9b40bd67529ae9a9135ebbc60809.png" width="14" height="14" referrerpolicy="no-referrer"> 🚢 MyDataHarbor 是一個致力於解決異構數據源之間的分佈式、高擴展性、高性能、微事務（至少一次保證）、準實時的數據同步中間件。</p><p>它可以幫助用戶可靠、快速、穩定的對海量數據進行準實時增量同步或者定時全量同步，主要定位是為實時交易系統服務，亦可用於大數據的數據同步（ETL 領域）。</p><h2><a id="user-content-背景" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%83%8C%E6%99%AF"></a>背景</h2><p>在微服務的大背景下，實時交易系統的數據的分散存儲已經成為常態，然而有時候我們需要對這些數據進行實時或者定時全量的同步到另外一個地方。</p><p>比如，一個公司的 C 部門的系統，需要用到 A、B 部門產生的數據，這時候避免不了進行全量或者增量的數據同步。再比如，數據庫中的數據我要實時同步到 elasticsearch、redis 等等中進行搜索。</p><p>數據同步的應用場景在日常的分佈式系統開發中非常常見，而且非常重要，一旦數據同步出現問題，將會導致數據不一致，引起其他嚴重的異常。</p><p>目前小公司的做法是在業務程序系統裏修改代碼，往目標數據源中寫入數據，上點規模的公司的做法是，各個部門開發一套自己的同步小程序，沒有管理，更可能沒有監控，來一個需求開發一個、非常浪費資源，穩定性也得不到保障，而大公司則是有一套數據遷移平台（如阿里的精衞）。</p><p>MyDataHarbor 在這種場景需求下應用而生！</p><h2><a id="user-content-特性" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E7%89%B9%E6%80%A7"></a>特性</h2><h3><a id="user-content-分佈式設計" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%BE%E8%AE%A1"></a>🚩分佈式設計</h3><p>MyDataHarbor 是一個在 zookeeper 上構建的分佈式中間件，支持水平擴展，對節點進行分組，各分組下的機器形成一個子集羣，任務在子集羣隔離範圍內進行負載均衡，防止單點故障。</p><h3><a id="user-content-插件式設計" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E6%8F%92%E4%BB%B6%E5%BC%8F%E8%AE%BE%E8%AE%A1"></a>🚩插件式設計</h3><p>高度合理的抽象、插件化的設計使得 MyDataHarbor 擁有很高擴展性，任何數據遷移的需求都可以通過開發插件完成。</p><h3><a id="user-content-事務支持" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E4%BA%8B%E5%8A%A1%E6%94%AF%E6%8C%81"></a>🚩事務支持</h3><p>MyDataHarbor 設計之初就考慮到數據丟失問題，引入事務的支持保障數據不丟失！</p><h3><a id="user-content-插件自描述" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E6%8F%92%E4%BB%B6%E8%87%AA%E6%8F%8F%E8%BF%B0"></a>🚩插件自描述</h3><p>安裝插件後中間件會自動識別這個插件的能力，並且生成用戶 UI 友好的任務創建界面，不需要用戶直接編寫複雜的 json 配置。</p><h3><a id="user-content-自由組合" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%87%AA%E7%94%B1%E7%BB%84%E5%90%88"></a>🚩自由組合</h3><p>MyDataHarbor 支持從不同的插件中複用各種組件，形一個新的 pipeline 管道，並且這些都是可以通過可視化的方式進行。</p><h3><a id="user-content-任務監控" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E4%BB%BB%E5%8A%A1%E7%9B%91%E6%8E%A7"></a>🚩任務監控</h3><p>對接 java 的 jmx，每個任務都有詳細的監控，實時查看任務的運行狀態。</p><h3><a id="user-content-批量支持" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E6%89%B9%E9%87%8F%E6%94%AF%E6%8C%81"></a>🚩批量支持</h3><p>為可以批量進行提交的寫入源預留批量接口通道，有效提升數據遷移速度，摩托變汽車。</p><h3><a id="user-content-forkjoin" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#forkjoin"></a>🚩ForkJoin</h3><p>對於 DataSource 無法多線程併發拉取的情況下（如 jdbc 遊標取數據），內部引入 forkjoin 併發處理模型開啓多線程處理，並且靈活的事務控制，讓速度飛快的同時保證數據遷移的穩定、不丟失，汽車變高鐵。</p><h2><a id="user-content-設計" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%AE%BE%E8%AE%A1"></a>設計</h2><p>MyDataHarbor 唯一依賴的中間件是 zookeeper，共有兩個組件：mydataharbor-console、mydataharbor-server
<img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/doc/image/cluster-design.png" alt="集羣設計" referrerpolicy="no-referrer"><img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/doc/image/node-design.png" alt="節點任務設計" referrerpolicy="no-referrer"></p><h2><a id="user-content-支持的插件" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E6%94%AF%E6%8C%81%E7%9A%84%E6%8F%92%E4%BB%B6"></a>支持的插件</h2><p>詳見  <a href="https://gitee.com/link?target=https%3A%2F%2Fmydataharbor.yuque.com%2Fstaff-tzwgrd%2Fuqew9p%2Fpckin3">https://mydataharbor.yuque.com/staff-tzwgrd/uqew9p/pckin3</a></p><h2><a id="user-content-快速開始" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"></a>快速開始</h2><p>MyDataHarbor 的安裝非常簡單（啓動前請先準備好 zookeeper 集羣）：</p><h3><a id="user-content-下載二進制包" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E4%B8%8B%E8%BD%BD%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%8C%85"></a>下載二進制包</h3><p>下載地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmydataharbor%2Fmydataharbor%2Freleases">https://github.com/mydataharbor/mydataharbor/releases</a>
下載列表：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">  mydataharbor-console-xxx-bin.tar.gz</span><span id="LC2" class="line">  mydataharbor-server-xxx-bin.tar.gz</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>xxx 是發行的版本號</p></blockquote><h3><a id="user-content-mydataharbor-console" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#mydataharbor-console"></a>mydataharbor-console</h3><h4><a id="user-content-解壓" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%A7%A3%E5%8E%8B"></a>解壓</h4><p><img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/doc/image/image-20210812143819918.png" alt="image-20210812143819918" referrerpolicy="no-referrer"></p><h4><a id="user-content-配置" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E9%85%8D%E7%BD%AE"></a>配置</h4><p>進入 config 目錄，修改 application.yml，主要修改如下配置</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="na">server</span><span class="pi">:</span></span><span id="LC2" class="line"><span class="na">port</span><span class="pi">:</span><span class="m">8080</span><span class="c1">#console 服務啓動端口</span></span><span id="LC3" class="line"><span class="na">zk</span><span class="pi">:</span><span class="s">127.0.0.1:2181</span><span class="c1">#zk 地址</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-運行" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%BF%90%E8%A1%8C"></a>運行</h4><p>Windows 系統下運行 start.bat<br>
Linux 系統下運行 start.sh &nbsp;關閉 stop.sh</p><blockquote><p>start.sh 腳本支持 jmx、debug、status 參數，如：<br>
start.sh jmx   啓動遠程 jmx 支持 <br>
start.sh debug 開啓遠程 debug 方式啓動 <br>
start.sh status 查看當前程序狀態</p></blockquote><h3><a id="user-content-mydataharbor-server" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#mydataharbor-server"></a>mydataharbor-server</h3><h4><a id="user-content-解壓-1" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%A7%A3%E5%8E%8B-1"></a>解壓</h4><p><img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/doc/image/image-20210812144430744.png" alt="image-20210812144430744" referrerpolicy="no-referrer"></p><h4><a id="user-content-配置-1" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E9%85%8D%E7%BD%AE-1"></a>配置</h4><p>修改 config 目錄下的 system.yml</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="na">zk</span><span class="pi">:</span><span class="pi">[</span><span class="s2">"</span><span class="s">127.0.0.1:2181"</span><span class="pi">]</span><span class="c1">#zk 地址</span></span><span id="LC2" class="line"><span class="na">port</span><span class="pi">:</span><span class="m">1299</span><span class="c1">#server 服務啓動端口</span></span><span id="LC3" class="line"><span class="na">group</span><span class="pi">:</span><span class="s">biz001</span><span class="c1">#該節點所屬組</span></span><span id="LC4" class="line"><span class="na">pluginRepository</span><span class="pi">:</span><span class="s">http://127.0.0.1:8080</span><span class="c1">#插件倉庫地址</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-運行-1" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E8%BF%90%E8%A1%8C-1"></a>運行</h4><p>Windows 系統下運行 start.bat<br>
Linux 系統下運行 start.sh &nbsp;關閉 stop.sh</p><blockquote><p>start.sh 腳本支持 jmx、debug、status 參數，如：<br>
start.sh jmx   啓動遠程 jmx 支持 <br>
start.sh debug 開啓遠程 debug 方式啓動 <br>
start.sh status 查看當前程序狀態</p></blockquote><h4><a id="user-content-驗證" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E9%AA%8C%E8%AF%81"></a>驗證</h4><p>訪問：mydataharbor-console &nbsp;<a href="https://gitee.com/link?target=http%3A%2F%2F127.0.0.1%3A8080">http://127.0.0.1:8080</a>
是否可以看到剛剛啓動的節點
<img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/doc/image/demo.png" alt="image-20210812143819918" referrerpolicy="no-referrer"></p><h2><a id="user-content-其它" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E5%85%B6%E5%AE%83"></a>其它</h2><p>demo 運行實例：<a href="https://gitee.com/link?target=http%3A%2F%2Fdemo.mydataharbor.com">http://demo.mydataharbor.com</a></p><p>插件市場：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.mydataharbor.com%2Fuser%2Finfo.html">https://www.mydataharbor.com/user/info.html</a></p><p>文檔 (語雀)：<a href="https://gitee.com/link?target=http%3A%2F%2Fdoc.mydataharbor.com">http://doc.mydataharbor.com</a></p><h4><a id="user-content-qq 羣加羣時需要驗證項目 star 數請 star 一下然後記下 star 數告訴管理員" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#qq%E7%BE%A4%E5%8A%A0%E7%BE%A4%E6%97%B6%E9%9C%80%E8%A6%81%E9%AA%8C%E8%AF%81%E9%A1%B9%E7%9B%AEstar%E6%95%B0%E8%AF%B7star%E4%B8%80%E4%B8%8B%E7%84%B6%E5%90%8E%E8%AE%B0%E4%B8%8Bstar%E6%95%B0%E5%91%8A%E8%AF%89%E7%AE%A1%E7%90%86%E5%91%98"></a>QQ 羣（<strong><em>加羣時需要驗證項目 star 數，請 star 一下然後記下 star 數告訴管理員</em></strong>）</h4><p><img src="https://gitee.com/mydataharbor/mydataharbor/raw/main/doc/image/qq-discuz.png" alt="QQ 羣" referrerpolicy="no-referrer"></p><h2><a id="user-content-更新日誌" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#%E6%9B%B4%E6%96%B0%E6%97%A5%E5%BF%97"></a>更新日誌</h2><h3><a id="user-content-200 版本" class="anchor" href="https://gitee.com/mydataharbor/mydataharbor#200%E7%89%88%E6%9C%AC"></a>2.0.0 版本</h3><p>1、新增 mydataharbor.ITaskStorage 接口，允許各組件在運行期持久化記錄數據，並提供一個 zookeeper 的默認實現，每秒 1 次準實時同步，不影響性能。</p><p>2、默認將任務的監控信息通過持久化接口近乎實時的展示在管理台</p><p>3、任務修改重建功能</p><p>4、調整 rebalance 算法，新機器加入，將轉移當前管道數大於任務分配節點數的任務</p><p>5、鑑於 1.x 使用用戶可能較少，由於修復了一些拼寫錯誤，接口名稱變了，不再向 1.x 兼容，建議大家把任務移到 2.x 上，請諒解</p>]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/mydataharbor/mydataharbor</guid>
            <link>https://gitee.com/mydataharbor/mydataharbor</link>
        </item>
        <item>
            <title>
                <![CDATA[華碩發佈龍芯 3A6000 消費級主板]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在今日上午的&nbsp;2023 龍芯產品發佈暨用戶大會上，華碩宣佈推出支持龍芯 3A6000 處理器的消費級主板 ——<strong>XC-LS3A6M 主板</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-61f3a35d39534e4fb1085f11406b047d65b.png" referrerpolicy="no-referrer"></p><p>華碩電腦開放平台中國區總經理俞元麟在大會現場展示了龍芯 3A6000 的測試成績，在多核定點 / 浮點成績上強於英特爾 i3-10100 處理器。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-c6d03bcc64cbfa182ffe0874a92b73a9ad8.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4ba65ea3f7d7737f377147c043f38186a81.png" referrerpolicy="no-referrer"></p><p>此外，<strong>龍芯 3A6000 可以超頻到 2.63GHz，而在液氮下保守可跑到 3GHz（BIOS 限制）</strong>，後續還能繼續提升。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fffb0755e8808aa87c3bb539474c7452802.png" referrerpolicy="no-referrer"></p><hr><p>俞元麟昨晚在其 B 站賬號（@普普通通 Tony 大叔）更新的視頻介紹了龍芯 3A6000 CPU 的性能表現：：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV15u4y1A7aK%2F" target="_blank">《國產最強！龍芯中科 3A6000 台式機 CPU 性能測試》</a></em></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2f786c32b8e5bec71a427021176790a2fdb.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-87828dce58a34545dcb0a71096f24938a30.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268453</guid>
            <link>https://www.oschina.net/news/268453</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 時間複雜度為 O (nlogn) 的排序算法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>歸併排序</h1><p>歸併排序遵循<strong>分治</strong>的思想：將原問題分解為幾個規模較小但類似於原問題的子問題，遞歸地求解這些子問題，然後合併這些子問題的解來建立原問題的解，歸併排序的步驟如下：</p><ul><li><p><strong>劃分</strong>：分解待排序的 n 個元素的序列成各具 n/2 個元素的兩個子序列，將長數組的排序問題轉換為短數組的排序問題，當待排序的序列長度為 1 時，遞歸劃分結束</p></li><li><p><strong>合併</strong>：合併兩個已排序的子序列得出已排序的最終結果</p></li></ul><p>歸併排序的代碼實現如下：</p><pre><code>    private void sort(int[] nums, int left, int right) {
        if (left &gt;= right) {
            return;
        }

        // 劃分
        int mid = left + right &gt;&gt; 1;
        sort(nums, left, mid);
        sort(nums, mid + 1, right);
        // 合併
        merge(nums, left, mid, right);
    }

    private void merge(int[] nums, int left, int mid, int right) {
        // 輔助數組
        int[] temp = Arrays.copyOfRange(nums, left, right + 1);

        int leftBegin = 0, leftEnd = mid - left;
        int rightBegin = leftEnd + 1, rightEnd = right - left;
        for (int i = left; i &lt;= right; i++) {
            if (leftBegin &gt; leftEnd) {
                nums[i] = temp[rightBegin++];
            } else if (rightBegin &gt; rightEnd || temp[leftBegin] &lt; temp[rightBegin]) {
                nums[i] = temp[leftBegin++];
            } else {
                nums[i] = temp[rightBegin++];
            }
        }
    }

</code></pre><p>歸併排序最吸引人的性質是它能保證將長度為 n 的數組排序所需的時間和 nlogn 成正比；它的主要缺點是所需的額外空間和 n 成正比。</p><p>算法特性：</p><ul><li><p><strong>空間複雜度</strong>：藉助輔助數組實現合併，使用 O(n) 的額外空間；遞歸深度為 logn，使用 O(logn) 大小的棧幀空間。忽略低階部分，所以空間複雜度為 O(n)</p></li><li><p><strong>非原地排序</strong></p></li><li><p><strong>穩定排序</strong></p></li><li><p><strong>非自適應排序</strong></p></li></ul><p>以上代碼是歸併排序常見的實現，下面我們來一起看看歸併排序的優化策略：</p><span id="OSC_h3_2"></span><h3>將多次創建小數組的開銷轉換為只創建一次大數組</h3><p>在上文實現中，我們在每次合併兩個有序數組時，即使是很小的數組，我們都會創建一個新的 temp[] 數組，這部分耗時是歸併排序運行時間的主要部分。更好的解決方案是將 temp[] 數組定義成 sort() 方法的局部變量，並將它作為參數傳遞給 merge() 方法，實現如下：</p><pre><code>    private void sort(int[] nums, int left, int right, int[] temp) {
        if (left &gt;= right) {
            return;
        }

        // 劃分
        int mid = left + right &gt;&gt; 1;
        sort(nums, left, mid, temp);
        sort(nums, mid + 1, right, temp);
        // 合併
        merge(nums, left, mid, right, temp);
    }

    private void merge(int[] nums, int left, int mid, int right, int[] temp) {
        System.arraycopy(nums, left, temp, left, right - left + 1);
        int l = left, r = mid + 1;
        for (int i = left; i &lt;= right; i++) {
            if (l &gt; mid) {
                nums[i] = temp[r++];
            } else if (r &gt; right || temp[l] &lt; temp[r]) {
                nums[i] = temp[l++];
            } else {
                nums[i] = temp[r++];
            }
        }
    }

</code></pre><span id="OSC_h3_3"></span><h3>當數組有序時，跳過 merge() 方法</h3><p>我們可以在執行合併前添加判斷條件：如果<code>nums[mid] &lt;= nums[mid + 1]</code>時我們認為數組已經是有序的了，那麼我們就跳過 merge() 方法。它不影響排序的遞歸調用，但是對任意有序的子數組算法的運行時間就變成線性的了，代碼實現如下：</p><pre><code>    private void sort(int[] nums, int left, int right, int[] temp) {
        if (left &gt;= right) {
            return;
        }

        // 劃分
        int mid = left + right &gt;&gt; 1;
        sort(nums, left, mid, temp);
        sort(nums, mid + 1, right, temp);
        // 合併
        if (nums[mid] &gt; nums[mid + 1]) {
            merge(nums, left, mid, right, temp);
        }
    }

    private void merge(int[] nums, int left, int mid, int right, int[] temp) {
        System.arraycopy(nums, left, temp, left, right - left + 1);
        int l = left, r = mid + 1;
        for (int i = left; i &lt;= right; i++) {
            if (l &gt; mid) {
                nums[i] = temp[r++];
            } else if (r &gt; right || temp[l] &lt; temp[r]) {
                nums[i] = temp[l++];
            } else {
                nums[i] = temp[r++];
            }
        }
    }

</code></pre><span id="OSC_h3_4"></span><h3>對小規模子數組使用插入排序</h3><p>對小規模數組進行排序會使遞歸調用過於頻繁，而使用插入排序處理小規模子數組一般可以將歸併排序的運行時間縮短 10% ~ 15%，代碼實現如下：</p><pre><code>    /**
     * M 取值在 5 ~ 15 之間大多數情況下都能令人滿意
     */
    private final int M = 9;

    private void sort(int[] nums, int left, int right) {
        if (left + M &gt;= right) {
            // 插入排序
            insertSort(nums);
            return;
        }

        // 劃分
        int mid = left + right &gt;&gt; 1;
        sort(nums, left, mid);
        sort(nums, mid + 1, right);
        // 合併
        merge(nums, left, mid, right);
    }

    /**
     * 插入排序
     */
    private void insertSort(int[] nums) {
        for (int i = 1; i &lt; nums.length; i++) {
            int base = nums[i];

            int j = i - 1;
            while (j &gt;= 0 &amp;&amp; nums[j] &gt; base) {
                nums[j + 1] = nums[j--];
            }
            nums[j + 1] = base;
        }
    }

    private void merge(int[] nums, int left, int mid, int right) {
        // 輔助數組
        int[] temp = Arrays.copyOfRange(nums, left, right + 1);

        int leftBegin = 0, leftEnd = mid - left;
        int rightBegin = leftEnd + 1, rightEnd = right - left;
        for (int i = left; i &lt;= right; i++) {
            if (leftBegin &gt; leftEnd) {
                nums[i] = temp[rightBegin++];
            } else if (rightBegin &gt; rightEnd || temp[leftBegin] &lt; temp[rightBegin]) {
                nums[i] = temp[leftBegin++];
            } else {
                nums[i] = temp[rightBegin++];
            }
        }
    }

</code></pre><hr><span id="OSC_h1_5"></span><h1>快速排序</h1><p>快速排序也遵循<strong>分治</strong>的思想，它與歸併排序不同的是，快速排序是<strong>原地排序</strong>，而且快速排序會先排序當前數組，再對子數組進行排序，它的算法步驟如下：</p><ul><li><p><strong>哨兵劃分</strong>：選取數組中最左端元素為基準數，將小於基準數的元素放在基準數左邊，將大於基準數的元素放在基準數右邊</p></li><li><p><strong>排序子數組</strong>：將哨兵劃分的索引作為劃分左右子數組的分界，分別對左右子數組進行哨兵劃分和排序</p></li></ul><p>快速排序的代碼實現如下：</p><pre><code>    private void sort(int[] nums, int left, int right) {
        if (left &gt;= right) {
            return;
        }

        // 哨兵劃分
        int partition = partition(nums, left, right);

        // 分別排序兩個子數組
        sort(nums, left, partition - 1);
        sort(nums, partition + 1, right);
    }

    /**
     * 哨兵劃分
     */
    private int partition(int[] nums, int left, int right) {
        // 以 nums[left] 作為基準數，並記錄基準數索引
        int originIndex = left;
        int base = nums[left];

        while (left &lt; right) {
            // 從右向左找小於基準數的元素
            while (left &lt; right &amp;&amp; nums[right] &gt;= base) {
                right--;
            }
            // 從左向右找大於基準數的元素
            while (left &lt; right &amp;&amp; nums[left] &lt;= base) {
                left++;
            }
            swap(nums, left, right);
        }
        // 將基準數交換到兩子數組的分界線
        swap(nums, originIndex, left);

        return left;
    }

    private void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }

</code></pre><p>算法特性：</p><ul><li><p><strong>時間複雜度</strong>：平均時間複雜度為 O(nlogn)，最差時間複雜度為 O(n2)</p></li><li><p><strong>空間複雜度</strong>：最差情況下，遞歸深度為 n，所以空間複雜度為 O(n)</p></li><li><p><strong>原地排序</strong></p></li><li><p><strong>非穩定排序</strong></p></li><li><p><strong>自適應排序</strong></p></li></ul><blockquote><p>歸併排序的時間複雜度一直是 O(nlogn)，而快速排序在最壞的情況下時間複雜度為 O(n2)，為什麼歸併排序沒有快速排序應用廣泛呢？</p><p>答：因為歸併排序是非原地排序，在合併階段需要藉助非常量級的額外空間</p></blockquote><p>快速排序有很多優點，但是在哨兵劃分不平衡的情況下，算法的效率會比較低效。下面是對快速排序排序優化的一些方法：</p><span id="OSC_h3_6"></span><h3>切換到插入排序</h3><p>對於小數組，快速排序比插入排序慢，快速排序的 sort() 方法在長度為 1 的子數組中也會調用一次，所以，在排序小數組時切換到插入排序排序的效率會更高，如下：</p><pre><code>    /**
     * M 取值在 5 ~ 15 之間大多數情況下都能令人滿意
     */
    private final int M = 9;

    public void sort(int[] nums, int left, int right) {
        // 小數組採用插入排序
        if (left + M &gt;= right) {
            insertSort(nums);
            return;
        }

        int partition = partition(nums, left, right);
        sort(nums, left, partition - 1);
        sort(nums, partition + 1, right);
    }

    /**
     * 插入排序
     */
    private void insertSort(int[] nums) {
        for (int i = 1; i &lt; nums.length; i++) {
            int base = nums[i];

            int j = i - 1;
            while (j &gt;= 0 &amp;&amp; nums[j] &gt; base) {
                nums[j + 1] = nums[j--];
            }
            nums[j + 1] = base;
        }
    }

    private int partition(int[] nums, int left, int right) {
        int originIndex = left;
        int base = nums[left];

        while (left &lt; right) {
            while (left &lt; right &amp;&amp; nums[right] &gt;= base) {
                right--;
            }
            while (left &lt; right &amp;&amp; nums[left] &lt;= base) {
                left++;
            }
            swap(nums, left, right);
        }
        swap(nums, left, originIndex);

        return left;
    }

    private void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }

</code></pre><span id="OSC_h3_7"></span><h3>基準數優化</h3><p>如果數組為倒序的情況下，選擇最左端元素為基準數，那麼每次哨兵劃分會導致右數組長度為 0，進而使快速排序的時間複雜度為 O(n2)，為了儘可能避免這種情況，我們可以對基準數的選擇進行優化，採用<strong>三取樣切分</strong>的方法：選取數組最左端、中間和最右端這三個值的中位數為基準數，這樣選擇的基準數大概率不是區間的極值，時間複雜度為 O(n2) 的概率大大降低，代碼實現如下：</p><pre><code>    public void sort(int[] nums, int left, int right) {
        if (left &gt;= right) {
            return;
        }

        // 基準數優化
        betterBase(nums, left, right);

        int partition = partition(nums, left, right);

        sort(nums, left, partition - 1);
        sort(nums, partition + 1, right);
    }

    /**
     * 基準數優化，將 left, mid, right 這幾個值中的中位數換到 left 的位置
     * 注意其中使用了異或運算進行條件判斷
     */
    private void betterBase(int[] nums, int left, int right) {
        int mid = left + right &gt;&gt; 1;

        if ((nums[mid] &lt; nums[right]) ^ (nums[mid] &lt; nums[left])) {
            swap(nums, left, mid);
        } else if ((nums[right] &lt; nums[left]) ^ (nums[right] &lt; nums[mid])) {
            swap(nums, left, right);
        }
    }

    private int partition(int[] nums, int left, int right) {
        int originIndex = left;
        int base = nums[left];

        while (left &lt; right) {
            while (left &lt; right &amp;&amp; nums[right] &gt;= base) {
                right--;
            }
            while (left &lt; right &amp;&amp; nums[left] &lt;= base) {
                left++;
            }
            swap(nums, left, right);
        }
        swap(nums, originIndex, left);

        return left;
    }

    private void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }

</code></pre><span id="OSC_h3_8"></span><h3>三向切分</h3><p>在數組有大量重複元素的情況下，快速排序的遞歸性會使元素全部重複的子數組經常出現，而對這些數組進行快速排序是沒有必要的，我們可以對它進行優化。</p><p>一個簡單的想法是將數組切分為三部分，分別對應小於、等於和大於基準數的數組，每次將其中「小於」和「大於」的數組進行排序，那麼最終也能得到排序的結果，這種策略下我們不會對等於基準數的子數組進行排序，提高了排序算法的效率，它的算法流程如下：</p><p>從左到右遍歷數組，維護指針 l 使得 [left, l - 1] 中的元素都小於基準數，維護指針 r 使得 [r + 1, right] 中的元素都大於基準數，維護指針 mid 使得 [l, mid - 1] 中的元素都等於基準數，其中 [mid, r] 區間中的元素還未確定大小關係，圖示如下：</p><p><img alt="快速排序-荷蘭國旗.jpg" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-30-09-24mWidH7TKov10iOQb.jpg" referrerpolicy="no-referrer"></p><p>它的代碼實現如下：</p><pre><code>    public void sort(int[] nums, int left, int right) {
        if (left &gt;= right) {
            return;
        }

        // 三向切分
        int l = left, mid = left + 1, r = right;
        int base = nums[l];
        while (mid &lt;= r) {
            if (nums[mid] &lt; base) {
                swap(nums, l++, mid++);
            } else if (nums[mid] &gt; base) {
                swap(nums, mid, r--);
            } else {
                mid++;
            }
        }

        sort(nums, left, l - 1);
        sort(nums, r + 1, right);
    }

    private void swap(int[] nums, int left, int right) {
        int temp = nums[left];
        nums[left] = nums[right];
        nums[right] = temp;
    }

</code></pre><blockquote><p>這也是經典的荷蘭國旗問題，因為這就好像用三種可能的主鍵值將數組排序一樣，這三種主鍵值對應着荷蘭國旗上的三種顏色</p></blockquote><hr><span id="OSC_h3_9"></span><h3>巨人的肩膀</h3><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.hello-algo.com%2F" rel="nofollow" target="_blank">《Hello 算法》：11.5 和 11.6 小節</a></p></li><li><p>《算法，第四版》：2.3 節，快速排序</p></li><li><p>《算法導論，第三版》：第 2.2、2.3、7 章</p></li></ul><blockquote><p>作者：京東物流，王奕龍</p><p>來源：京東雲開發者社區，自猿其説 Tech 轉載請註明來源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10277308</guid>
            <link>https://my.oschina.net/u/4090830/blog/10277308</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[國家廣播電視總局發佈三項廣播電視和網絡視聽行業標準]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>11 月 27 日，國家廣播電視總局發佈通知，通知表示已組織審查了《有線電視業務技術要求》《IPTV 業務技術要求》《互聯網電視業務技術要求》等三項標準文件，並批准為我國廣播電視和網絡視聽推薦性行業標準。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-03c93c0f85c6c7cb4cd79deda8d4acfa63f.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nrta.gov.cn%2Fart%2F2023%2F11%2F27%2Fart_113_66209.html" target="_blank">https://www.nrta.gov.cn/art/2023/11/27/art_113_66209.html</a></u></em></p></blockquote><p>《有線電視業務技術要求》《IPTV 業務技術要求》中説明，有線電視終端與 IPTV 終端端應提供<strong>「開機進入全屏直播」和「開機進入突出直播頻道的交互主頁」</strong>兩種「開機模式」選項，<strong>系統默認設置應為「開機進入全屏直播」</strong>。</p><p>選擇進入交互主頁開機模式的，開機後默認焦點應停留在直播窗口，且如果用戶在 20s 內無操作，應自動進入全屏直播；包括開機廣告等特定內容在內的冷啓動開機時間應不大於 35s，且宜具備待機快速喚醒功能；遙控器應具備快捷看直播頻道的「看電視」按鍵。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-979f3921987d751af13a1ef1f85b0df4424.png" referrerpolicy="no-referrer"></p><p>《互聯網電視業務技術要求》中説明，互聯網電視應用<strong>啓動時間宜小於 3s</strong>，<strong>應不大於 5s</strong>，應用的啓動廣告時間應包含在互聯網電視應用啓動時間內，如展現了廣告，啓動時間仍應符合該要求。</p><p>交互主頁應設置顯著、便捷的免費業務專區入口，從交互主頁默認焦點至免費業務專區入口的操作次數不宜超過 3 次；交互主頁不應設置彈窗廣告；業務的訂購或退訂等相關操作，均應在用戶界面上提供明確的提示説明和流程操作説明，且應提供確認付費或取消付費的明確操作步驟，<strong>不應設置「一鍵付費」相關操作</strong>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268448</guid>
            <link>https://www.oschina.net/news/268448</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[B 站正式啓動鴻蒙原生應用開發]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>嗶哩嗶哩（B 站）與華為宣佈達成鴻蒙領域全面合作，並正式啓動鴻蒙原生應用開發工作。</p><p>數據顯示，今年上半年，B 站的日活用戶同比增長 17% 至超過 9500 萬，而月活用戶達 3.19 億；總日均視頻播放量同比增長 34% 至 41 億。截至今年 8 月，鴻蒙生態設備數量已超過 7 億，超過 220 萬開發者投入到鴻蒙生態開發中，且近期日新增註冊量已過萬。</p><p><img alt="" height="331" src="https://oscimg.oschina.net/oscnet/up-25a150372aecd554f4a31c934afbf6af3f8.webp" width="500" referrerpolicy="no-referrer"></p><p>目前，已宣佈啓動鴻蒙原生應用開發的 App 包括但不限於：同程旅行、開心消消樂、美團、去哪兒、釘釘、飛常準、小紅書、B 站。</p><p>嗶哩嗶哩方面表示，鴻蒙原生版本的嗶哩嗶哩將充分利用 HarmonyOS 獨特的全場景分佈式體驗、原生智能、純淨安全、大模型 AI 交互等能力，提供更多創新體驗。華為則表示，將提供端到端的鴻蒙開發和賦能套件，使得鴻蒙應用適配成本降低。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268446</guid>
            <link>https://www.oschina.net/news/268446</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Google Drive 出現數據丟失問題]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>有 Google Drive 用戶稱自己存儲在雲端的文件<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F11%2F27%2Fgoogle_drive_files_disappearing%2F" target="_blank">無端丟失</a></u>，他表示登錄 Google Drive 後發現自己的文件<strong>回到了 2023 年 5 月的狀態</strong>。由於他沒有手動刪除過文件，所以回收站也沒有任何丟失文件的記錄。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1128/102059_Ynyc_2720166.png" referrerpolicy="no-referrer"></p><p>來源：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.google.com%2Fdrive%2Fthread%2F245055606%2Fgoogle-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023%3Fhl%3Den" target="_blank">https://support.google.com/drive/thread/245055606/google-drive-files-suddenly-disappeared-the-drive-literally-went-back-to-condition-in-may-2023?hl=en</a></em></p></blockquote><p>其他用戶也<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.google.com%2Fdrive%2Fthread%2F245055606%3Fhl%3Den%26msgid%3D245207929" target="_blank">報告了類似的經歷</a></u>，有人聲稱丟失了六個月的業務數據。另外有一些用戶報告稱同步功能停止工作，導致雲存儲中的文件不再是最新的版本。</p><p>一些用戶通過調整緩存文件成功恢復了部分信息，<strong>但受影響用戶的建議是在工程師找到解決方案之前不要進行任何更改</strong>。</p><p>Google 支持團隊發佈的一條消息也建議在工程師調查問題期間不要對根/數據文件夾進行更改。一些用戶猜測可能與賬戶被意外刪除有關。</p><p>這一狀況通常會波及多達數月的雲文件，且無法用恢復工具還原。有部分用戶在緩存文件中找到部分數據。目前 Google 官方人員在其中一條反饋中表示該問題已在排查中，但未能給出具體修復時間，也無法確定在修復後是否能找回全部文件。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268442/google-drive-files-suddenly-disappeared</guid>
            <link>https://www.oschina.net/news/268442/google-drive-files-suddenly-disappeared</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[山東女子學院 openKylin 高校站正式揭牌成立]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">11 月 23 日下午，</span><strong><span style="color:#000000">山東女子學院 openKylin 高校站成立揭牌儀式</span></strong><span style="color:#000000">在山東女子學院圖書館一樓報告廳順利舉行。</span></span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="1852" src="https://oscimg.oschina.net/oscnet/up-19707e46ea14cdaeefc8d32907ba96786fe.png" width="4032" referrerpolicy="no-referrer"></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">山東女子學院副校長李纓，數據科學與計算機學院院長孫洪峯、副院長田傑、季振東、院長助理劉麗，麒麟軟件山東事業部總經理李雲龍、校企合作總監蘇勝男，openKylin 社區技術委員會委員王文竹、生態合作負責人馬發俊以及</span><strong><span style="color:#000000">200</span></strong><span style="color:#000000">多位山東女子學院數科院教師代表和學生等出席活動。</span><strong><span style="color:#000000">山東女子學院數據科學與計算機學院院長孫洪峯主持揭牌儀式，山東女子學院副校長李纓和麒麟軟件山東事業部總經理李雲龍共同為山東女子學院 openKylin 高校站揭牌。</span></strong></span></p><div><p style="text-align:center"><img alt="" height="810" src="https://oscimg.oschina.net/oscnet/up-b65aca3254c1e869b891fe4f4559367648a.png" width="1080" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">山東女子學院副校長李纓</span></strong><span style="color:#000000">為儀式致辭，對山東女子學院正式成為 openKylin 高校站的一員表示祝賀，並表示 openKylin 高校站為高校大力發展信息學科、培養高水平開源創新人才提供了寶貴平台。希望在雙方的共同努力下，能建設與發展好 openKylin 高校站，為我國開源創新體系建設以及國家信息技術發展貢獻更大的力量。</span></span></p><div>
 &nbsp;
</div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">openKylin 社區生態合作負責人馬發俊</span></strong><span style="color:#000000">以《中國桌面操作系統根社區建設介紹》為題，向在座師生介紹了 openKylin 社區的整體情況和開源建設成果，並着重介紹了 openKylin 社區與高校合作開展情況、社區高校站的建立和運營模式，openKylin 建立了高校專區，通過高校站與高校建立緊密合作關係，通過技術融合、教學創新、開源實踐等多維度促進高校和開源人才培養。</span></span></p><div><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">openKylin 社區技術委員會委員王文竹</span></strong><span style="color:#000000">帶來《走進開源的世界》主題演講，從開源的意義、如何參與開源、以及自身開源經歷等方面進行分享，讓同學們對開源參與有了更深入的瞭解。同時，在分享的最後，還為大家介紹了多個 openKyin 社區開源大賽，鼓勵感興趣的同學積極參與，開闊眼界的同時取得快速成長。</span></span></p><div>
 &nbsp;
</div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">在活動開展過程中，山東女子學院的同學們踴躍提問，對參與 openKylin 高校站開源貢獻表現出了極大的熱情和積極性。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">openKylin 高校站</span></strong><span style="color:#000000">是 openKylin 社區在高校建立的合作站點，通過推進高校開源技術的產學研融合，構建起學生 Linux 的基礎知識架構，再通過開源活動+項目實踐的方式，為學生積累實踐經驗，並對職業規劃等方面進行詳細講解，通過理論+實踐的形式，培養卓越創新能力的開源人才。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">截至目前，已有上海交通大學、天津大學、南京大學、新疆大學、山東女子學院、內蒙古大學、洛陽理工學院、深圳職業大學等</span><strong><span style="color:#000000">33</span></strong><span style="color:#000000">所 985、雙一流、普通本科和頭部職業院校加入 openKylin 社區並建立高校站，與社區開展了多種形式的合作。</span></span></p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:left"><span><span style="color:#000000">未來，openKylin 歡迎更多高校合作伙伴加入，一起建立產學研融合的開源創新人才培養體系，為實現國內開源事業可持續發展蓄勢儲能。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 01:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268436</guid>
            <link>https://www.oschina.net/news/268436</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[研易科技加入 openKylin，共推社區 ARM 生態繁榮！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">近日，深圳市研易科技有限公司（以下簡稱」研易科技「）簽署了 openKylin 社區 CLA（Contributor License Agreement 貢獻者許可協議），正式加入 openKylin 開源社區。</span></span></p><div><p style="text-align:center"><img alt="" height="1079" src="https://oscimg.oschina.net/oscnet/up-0f2a91ac2d8ef1357d5dd4e6294f78f07a8.png" width="829" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">研易科技依託資深研發銷售隊伍，集行業專用嵌入式計算機產品研發、生產、銷售及服務於一體，產品涉及嵌入式計算機板卡、嵌入式準系統、工業整機、工業平板電腦等，可廣泛應用於智慧醫療、人工智能、智慧零售、倉儲物流、智慧城市、軌道交通、燈光工程、網絡安全、智慧電網、國產化、工業自動化等行業領域。公司旗下 Coolpi 系列開源模塊產品，可提供高性能計算能力，方便廣大開發者評估項目與應用落地。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-ec10d5d2b359fddbaf627cab3d3c3505685.png" width="940" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">加入 opeKylin 社區後，研易科技完成了 Cool Pi 與社區操作系統 1.0 版本的兼容適配。後續，雙方將持續在技術和生態上展開合作，包括硬件升級和版本適配等。研易科技也將持續對 openKylin 社區進行投入，共同推動社區 ARM 生態繁榮。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 01:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268435</guid>
            <link>https://www.oschina.net/news/268435</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[浪潮發佈基礎大模型「源 2.0」，千億參數全面開源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong>浪潮信息<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrjnsUS83TT7aEN3r2i0IPQ" target="_blank">發佈</a></u>「源 2.0」基礎大模型，並宣佈全面開源</strong>。</p><p>據介紹，源 2.0 基礎大模型包括 1026 億、518 億、21 億等三種參數規模的模型，在編程、推理、邏輯等方面展示出了先進的能力。</p><p><strong>算法方面</strong>，源 2.0 提出並採用了一種新型的注意力算法結構：局部注意力過濾增強機制 (LFA：Localized Filtering-based Attention)。LFA 通過先學習相鄰詞之間的關聯性，然後再計算全局關聯性的方法，能夠更好地學習到自然語言的局部和全局的語言特徵，對於自然語言的關聯語義理解更準確、更人性，提升了模型的自然語言表達能力，進而提升了模型精度。</p><p><img src="https://static.oschina.net/uploads/space/2023/1127/184848_muAm_2720166.png" referrerpolicy="no-referrer"></p><p><strong>數據方面</strong>，源 2.0 通過使用中英文書籍、百科、論文等高質量中英文資料，降低了互聯網語料內容佔比，結合高效的數據清洗流程，為大模型訓練提供了高質量的專業數據集和邏輯推理數據集。</p><p>據稱，為了更高效地獲得相對匱乏的高質量中文數學及代碼數據集，源 2.0 採用了基於大模型的數據生產及過濾方法，在保證數據的多樣性的同時也在每一個類別上提升數據質量，獲取了一批高質量的數學與代碼預訓練數據。</p><p><img src="https://static.oschina.net/uploads/space/2023/1127/184918_iLAq_2720166.png" referrerpolicy="no-referrer"></p><p><strong>算力方面</strong>，源 2.0 採用了非均勻流水並行的方法，綜合運用流水線並行+優化器參數並行+數據並行的策略，讓模型在流水並行各階段的顯存佔用量分佈更均衡，避免出現顯存瓶頸導致的訓練效率降低的問題，該方法顯著降低了大模型對芯片間 P2P 帶寬的需求，為硬件差異較大訓練環境提供了一種高性能的訓練方法。</p><p><img src="https://static.oschina.net/uploads/space/2023/1127/184932_0UiQ_2720166.png" referrerpolicy="no-referrer"></p><p>源 2.0 在業界公開的評測上進行了代碼生成、數學問題求解、事實問答方面的能力測試，下面是測試結果：</p><p><img src="https://static.oschina.net/uploads/space/2023/1127/184945_PzyP_2720166.png" referrerpolicy="no-referrer"></p><p><strong>源 2.0 採用全面開源策略，全系列模型參數和代碼均可免費下載使用</strong>。</p><ul><li>代碼開源鏈接：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FIEIT-Yuan%2FYuan-2.0" target="_blank">https://github.com/IEIT-Yuan/Yuan-2.0</a></em></u></li><li>論文鏈接：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FIEIT-Yuan%2FYuan-2.0%2Fblob%2Fmain%2Fdocs%2FYuan2.0_paper.pdf" target="_blank">https://github.com/IEIT-Yuan/Yuan-2.0/blob/main/docs/Yuan2.0_paper.pdf</a></em></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 10:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268384</guid>
            <link>https://www.oschina.net/news/268384</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[字節跳動成立新部門 Flow，發力 AI 應用層]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">36 氪報道稱，</span><span style="background-color:#ffffff; color:#222222">字節跳動近期成立了一個新 AI 部門 Flow，技術負責人為字節跳動技術副總裁洪定坤。</span></p><p><span style="background-color:#ffffff; color:#222222">一位知情人士表示，這一新部門的業務帶頭人，為字節大模型團隊的負責人朱文佳。Flow 主要聚焦在 AI 應用層。在字節圈內，Flow 近期發佈了活水招聘帖，社會招聘也已經開始一段時間。</span></p><p><span style="background-color:#ffffff; color:#222222">在帖中，其表示是字節跳動旗下 AI 創新業務團隊，「目前已經在國內和海外分別上線豆包和 Cici 兩款產品，有多個 AI 相關創新產品孵化中」。截止發稿前，字節跳動尚無迴應。</span></p><p style="color:#262626; margin-left:0; margin-right:0; text-align:justify">在 11 月初，字節各個事業部都進行了不少業務和架構調整，這些調整仍在進行中，當前 Flow 的架構和彙報線未完全確定。且多位知情人士透露，在此次調整中，字節也從飛書、抖音等各個 BU 抽調人選，到這一部門做一款新的 C 端產品。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 10:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268383</guid>
            <link>https://www.oschina.net/news/268383</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雲原生週刊：Kubernetes 1.29 中的刪除、棄用和主要更改]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>開源項目推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyonahd%2Forphaned-configmaps" target="_blank">Orphaned ConfigMaps</a></h3><p>該版本庫包含一個腳本，用於識別 Kubernetes 命名空間中的孤立的配置映射。孤立的配置映射是指那些未被命名空間中的任何活動 Pod 或容器引用的配置映射。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmarvasgit%2Fkubernetes-multicooker" target="_blank">Kubernetes Multi Cooker</a></h3><p>該項目包含一個小型 Kubernetes 控制器，用於監視每個節點的 CPU 壓力；當超過某個閾值時，節點將被污染（這樣就不會在已經超載的節點上調度額外的工作負載），最後控制器將開始從該節點驅逐 Pod。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femberstack%2Fkubernetes-reflector" target="_blank">Reflector</a></h3><p>Reflector 是一個 Kubernetes 插件，旨在監視資源（祕密和配置映射）的更改並反映相同或其他命名空間中鏡像資源的更改。</p><h2>文章推薦</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubernetes.io%2Fblog%2F2023%2F11%2F16%2Fkubernetes-1-29-upcoming-changes%2F" target="_blank">Kubernetes 1.29 中的刪除、棄用和主要更改</a></h3><p>和其他每次發佈一樣，Kubernetes v1.29 將棄用和移除一些特性。一貫以來生成高質量發佈版本的能力是開發週期穩健和社區健康的證明。本文列舉即將發佈的 Kubernetes 1.29 中的一些棄用和移除事項。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcollabnix.com%2Ftop-5-storage-provider-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 5 大存儲提供商工具</a></h3><p>這篇文章介紹了 Kubernetes 的五個存儲提供者工具：SeaweedFS、Vitess、TiKV、Rook 和 OpenEBS。這些工具幫助管理 Kubernetes 上的數據工作負載，包括卷供應、複製、備份、加密、壓縮和性能調優等功能。它們與 Kubernetes API 和概念無縫集成，並支持持久卷（PV）、持久卷聲明（PVC）和存儲類（Storage Class）。這篇文章詳細介紹了每個工具的工作機制、優勢以及在實際使用中的案例和成功故事。通過閲讀這篇文章，讀者可以瞭解 Kubernetes 上可用的存儲提供者選項，並根據自己的需求選擇最合適的工具。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.atatus.com%2Fblog%2Ftroubleshooting-kubernetes-deployment%2F" target="_blank">對各個級別的 Kubernetes 部署進行故障排除</a></h3><p>這篇文章是關於在各個層面上解決 Kubernetes 部署問題的指南。文章首先介紹了 Kubernetes 作為容器編排的事實標準，並提到了它自動化部署、擴展和管理容器化應用程序的能力。然而，即使遵循最佳實踐並具備專業知識，Kubernetes 部署有時也是一個複雜而具有挑戰性的過程。文章探討了從應用代碼到基礎設施和 Kubernetes 組件的各個層面上的部署故障排除過程，並介紹了一些常見問題和挑戰，如容器鏡像拉取錯誤、Pod 調度問題、網絡連接問題和存儲問題。文章還討論了一些診斷和解決這些問題的最佳實踐和工具。通過閲讀這篇文章，讀者將更好地瞭解如何在 Kubernetes 部署的每個層面上進行故障排除，並更好地管理其應用程序。</p><h2>雲原生動態</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F11%2F20%2Fannouncing-the-platform-engineering-maturity-model%2F" target="_blank">CNCF 平台工程成熟度模型出爐</a></h3><p>CNCF（Cloud Native Computing Foundation）的平台工程成熟度模型首次發佈。該模型提供了對平台工程成熟度的具體應用，是今年 4 月份發佈的備受歡迎的白皮書的延伸。該模型將平台工程定義為通過在構建平台和其能力的各個方面（包括人員、流程、策略和技術）進行投資，提供內部平台作為產品的實踐，從而推動業務結果。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloudnativenow.com%2Ftopics%2Fcloudnativedevelopment%2Fmicrosoft-expands-scope-of-azure-kubernetes-services%2F" target="_blank">微軟擴大 Azure Kubernetes 服務範圍</a></h3><p>Microsoft 已普遍推出 Azure Kubernetes Fleet Manager，以便更輕鬆地集中管理多個集羣，並可與一組用於優化成本的工具一起分階段進行。</p><p>與此同時，除了預覽 Azure 容器應用程序平台的擴展以增加對事件的支持之外，微軟還使用 Kubernetes AI 工具鏈運算符簡化在 Azure Kubernetes 服務 (AKS) 上部署大型語言模型 (LLM) 的過程用於訓練 AI 模型的驅動框架，同時支持開源 Qdrant、Milvus 和 Weaviate 矢量數據庫。</p><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 09:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10293895</guid>
            <link>https://my.oschina.net/u/4197945/blog/10293895</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[What's new in dubbo-go-pixiu v1.0.0]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>dubbo 原生網關 dubbo-go-pixiu v1.0 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Freleases%2Ftag%2Fv1.0.0-rc2" target="_blank">https://github.com/apache/dubbo-go-pixiu/releases/tag/v1.0.0-rc2</a> 正式發版了，項目從 2019 年一路走來，四年磨劍，感謝從，鐵城、張天，到 呂夢超，三位負責人。</p><p>目前，dubbo-go-pixiu 可作為 dubbo/dubbogo 服務網關，也可作為 dubbo/dubbogo 服務的 sidecar，還額外基於 Istio v1.14.3 實現了 dubbo 的控制面。</p><p>dubbo-go 和 dubbo-go-pixiu 在 2023 年初被螞蟻集團採用內部容器 PAAS HCS(Hyper Container Service) 超級容器平台的微服務技術底座， v1.0.0 集成了螞蟻集團使用過程中的提交的很多改進和優化。感謝本次版本的主要貢獻者，胡瀟晗、樊凡、龔娜、張國強、【阿里】遠雲、【螞蟻】多航、王虓雄、望哥、於雨，等社區同學。</p><h1>1 New Features In v1.0.0</h1><h2>1.1 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F548" target="_blank">Triple 支持傳遞 Header 和引入 PB 定義</a></h2><p>Triple 代理現在可以正確傳遞 header 到 Triple 服務，且支持通過引入 protoset 文件來支持未開啓 Proto 反射或不支持反射的特定 proto，例如使用舊版本編譯的或 gogoproto 編譯的服務。</p><p>samples： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu-samples%2Ftree%2Fmain%2Fdubbogo%2Fsimple%2Ftriple" target="_blank">https://github.com/apache/dubbo-go-pixiu-samples/tree/main/dubbogo/simple/triple</a></p><h2>1.2 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F554" target="_blank">負載均衡 Maglev hashing</a></h2><p>負載均衡支持新算法：Maglev hashing。Maglev 是 Google 開發的基於 kernal bypass 技術實現的 4 層負載均衡，它具有非常強大的負載性能，承載了 Google 絕大部分接入流量。Maglev 在負載均衡算法上採用自行開發的一致性哈希算法被稱為 Maglev Hashing，該哈希算法在節點變化時能夠儘量少的影響其他幾點，且儘可能的保證負載的均衡，是一個非常優秀的一致性哈希算法。</p><p>samples： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshawnh2%2Fdubbo-go-pixiu-samples%2Ftree%2Fmain%2Fdubbogo%2Fsimple%2Ftraffic" target="_blank">https://github.com/shawnh2/dubbo-go-pixiu-samples/tree/main/dubbogo/simple/traffic</a></p><h2>1.3 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F565" target="_blank">Router 支持 Header 路由</a></h2><p>Router 支持通過 header 路由，可以更方便的管理流量。</p><pre><code class="language-yaml">              http_filters:
                  - name: dgp.filter.http.traffic
                    config:
                      traffics:
                        - name: "user-v1"
                          router: "/user"
                          canary-by-header: v1
                          canary-weight: 0
                        - name: "user-v2"
                          router: "/user"
                          canary-by-header: v2
                          canary-weight: 100
</code></pre><p>samples： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshawnh2%2Fdubbo-go-pixiu-samples%2Ftree%2Fmain%2Fdubbogo%2Fsimple%2Ftraffic" target="_blank">https://github.com/shawnh2/dubbo-go-pixiu-samples/tree/main/dubbogo/simple/traffic</a></p><h2>1.4 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F571" target="_blank">錯誤注入</a></h2><p>支持對特定 API 做錯誤注入，例如返回固定的響應，施加隨機性的延時/錯誤等。</p><pre><code class="language-yaml">                http_filters:
                  - name: dgp.filter.http.faultinjection
                    config:
                      fail_inject_rules:
                        "/UserService/com.dubbogo.pixiu.UserService/GetUserByCode":
                          type: delay
                          trigger_type: random
                          status_code: 500
                          body: 'error'
                          delay: 5s
                          odds: 30
</code></pre><p>samples： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fblob%2Fdevelop%2Fdocs%2Fsample%2Fothers%2Ffail-inject.md" target="_blank">https://github.com/apache/dubbo-go-pixiu/blob/develop/docs/sample/others/fail-inject.md</a></p><h2>1.5 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F522" target="_blank">Add GracefulShutdown Signal For Windows</a></h2><p>支持 Windows 優雅下線，Pixiu 關閉時避免流量損失。</p><pre><code class="language-yaml">static_resources:
.......
.......
  shutdown_config:
    timeout: "60s"
    step_timeout: "10s"
    reject_policy: "immediacy"
</code></pre><p>配置方式參考： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu-samples%2Ftree%2Fmain%2Fshutdown" target="_blank">https://github.com/apache/dubbo-go-pixiu-samples/tree/main/shutdown</a></p><h1>2 Enhancement in v1.0.0</h1><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F573" target="_blank">優化 Prometheus 指標上報</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F530" target="_blank">修復一致性 Hash 數組越界</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F521" target="_blank">優化 Timeout 時的 http status code</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F528" target="_blank">優化 Metric 推拉模式</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F524" target="_blank">優化 Nacos 客戶端啓動時的參數配置</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F517" target="_blank">修復特定 Filter 配置為空時的 NPE 問題</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F515" target="_blank">升級 wasmer-go v1.0.4 以支持 Mac ARM 版本</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F506" target="_blank">fix sample url using github.com/apache/dubbo-go-pixiu-samples</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F507" target="_blank">修復流量管理路由權重計算錯誤的問題</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F513" target="_blank">修復負載均衡在特定情況下無法正常工作的問題</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F574" target="_blank">移除無用的 imports</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F575" target="_blank">chore: unnecessary use of fmt.Sprintf</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F567" target="_blank">chore:use wasm filter build tags add wasm</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F556" target="_blank">修復無法錯誤的 samples 鏈接等</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F557" target="_blank">revert gatewayCmd to Run dubbo go pixiu</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go-pixiu%2Fpull%2F516" target="_blank">升級 hessian2 依賴到 v1.11.3</a></li></ul><h1>3 參考文檔</h1><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FRwIA7TitRfUMU8rTI4JsBg" target="_blank">What's new in dubbo-go-pixiu v0.6.0</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F5syzT64koPV77aRh04Izsw" target="_blank">What's new in dubbo-go-pixiu 0.5.1</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fdok42ssPJqazjeSRYaifVw" target="_blank">What's new in dubbo-go-pixiu 0.4.0</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FC7TxU0Zbee7EZ_6SJOLK8w" target="_blank">Dubbo 跨語言調用神獸：dubbo-go-pixiu</a></li></ul><h1>4 社區</h1><p>歡迎釘釘掃碼加入 dubbogo 社區釘釘羣【釘釘羣號 23331795】進行交流。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ff09984b6821a6da40dcdb6db415fcca4b8.png" alt="" referrerpolicy="no-referrer"></p><p>以及 dubbogo 社區微信公眾號：</p><p><img src="https://oscimg.oschina.net/oscnet/up-8feb2024cbf754333e9d7564cd0316dbb71.jpg" alt="" referrerpolicy="no-referrer"></p><p>從今年開始，除了以往負責的 dubbogo 社區項目外，於雨還負責了 pika 項目 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FOpenAtomFoundation%2Fpika" target="_blank">https://github.com/OpenAtomFoundation/pika</a>)，如果對該項目感興趣，請掃碼：</p><p><img src="https://oscimg.oschina.net/oscnet/up-3e900aa69386ac2190edb8035f4abb68415.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 09:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/dubbogo/blog/10294380</guid>
            <link>https://my.oschina.net/dubbogo/blog/10294380</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 內核開發人員爭論基於優先級的 Shutdown 支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Pengutronix 嵌入式 Linux 諮詢公司的 Oleksij Rempel 上週五發布了一系列<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F2023112403-laxative-lustiness-6a7f%40gregkh%2FT%2F" target="_blank">補丁</a>，提出了針<span style="background-color:#ffffff">對驅動程序/硬件的</span>基於優先級的 shutdown 支持。</span></p><p><span style="color:#000000">主要目的是<span style="background-color:#ffffff">在主線 Linux 內核提供優先關閉</span><span style="background-color:#ffffff">特定設備的功能</span>，「這在 power loss&nbsp;等情況下尤為重要，如果處理不當，可能會造成硬件損壞」。</span></p><p><span style="color:#000000">其內容<span style="background-color:#ffffff">重點在於，在</span>意外/<span style="background-color:#ffffff">即時&nbsp;shutdown&nbsp;</span>事件（例如電源/電壓下降或完全斷電）期間正確關閉關鍵設備。作為補丁系列的一部分，Oleksij Rempel&nbsp;還提出在 shutdown 階段將 (e)MMC 存儲設備設置為更高優先級，以幫助確保數據完整性/損壞。</span></p><p><img height="334" src="https://oscimg.oschina.net/oscnet/up-4ea11ce65c8b13c903a1f017372e8425e3b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Oleksij Rempel 的這一想法引發了 Linux 內核開發人員間的激烈討論，並形成了<span style="background-color:#ffffff">兩極分化的看法。</span><span style="background-color:#ffffff">Greg Kroah-Hartman&nbsp;</span>首先對這種基於優先級的<span style="background-color:#ffffff">&nbsp;shutdown&nbsp;</span>支持提出了質疑。他指出，這一做法會導致驅動程序和子系統之間出現優先級的爭奪：</span></p><blockquote><p><span style="color:#000000">每個驅動程序和子系統都堅持認為自己是最重要的！</span></p><p><span style="color:#000000">總之，從長遠來看，這樣做會帶來很多問題，這些硬件有什麼特別之處能使得其不可以按照現有順序 shutdown，而必須比其他人"優先"？這樣做究竟是為了防止什麼，哪些設備需要這樣做？</span></p><p><span style="color:#000000">最重要的是，在過去的 20 多年中，有什麼變化導致突然需要這種新功能，其他操作系統是如何處理的？</span></p></blockquote><p><span style="color:#000000">觀點雙方就<span style="background-color:#ffffff">主線 Linux 內核是否應該具有這樣的功能，以有效解決有問題的硬件設計做出了很多討論。最後事實證明，一些用於汽車行業的外層 Linux 內核版本已經提供了這種優先 shutdown 支持。Oleksij Rempel 將這一需求總結為：</span></span></p><blockquote><p><span style="color:#000000">它能防止硬件損壞。在典型的汽車欠壓測試中，通常可以在 Y 個欠壓週期內重現 X 個損壞的 eMMC 或 NAND（我現在沒有確切的數字）。即使在人工測試中出現的數量不是很多（有時一個月的測試中就會出現一個損壞的設備），但現場的回報率也很高，足以讓我們關心這個問題的軟件解決方案。</span></p><p><span style="color:#000000">同樣的問題不僅出現在汽車設備上，也出現在工業或農業設備上。換句話説，這個問題非常重要，必須要有某種解決方案。</span></p></blockquote><p><span style="color:#000000">對此，<span style="background-color:#ffffff">Greg 則用反問的語氣調侃稱，「這麼説的話，硬件試圖依靠軟件來防止同一硬件遭到破壞？硬件設計師肯定沒那麼瘋狂吧？」</span></span></p><p><span style="color:#000000">科技網站 Phoronix <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FLinux-Priority-Based-Shutdown" target="_blank">評論</a>稱，從較高層次上來看，如果設備/驅動程序有充分的理由希望優先為設備 shutdown&nbsp;做好準備，例如可以防止數據丟失或獲得其他重大優勢，那麼這種基於優先級的 shutdown&nbsp;支持似乎沒有問題。但在實踐中，如果有多個驅動程序聲稱在 shutdown&nbsp;過程中擁有"優先權"，並且在確保設計可靠且能妥善解決實際問題方面存在其他障礙，那麼具體的實現就會存在一些困難。</span></p><p><span style="color:#000000">目前為止，大家對這種方法的意見還很不統一。現階段能否設計出一種既能為主線所接受，又能滿足汽車和更廣泛的嵌入式/工業領域需求的適當解決方案，還有待觀察。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 09:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268371/linux-priority-based-shutdown</guid>
            <link>https://www.oschina.net/news/268371/linux-priority-based-shutdown</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LG 成立 webOS 開發小組]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>LG 電子宣佈改革組織架構，併成立 webOS 開發小組。</p><p>11 月 24 日，LG 電子<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lgnewsroom.com%2F2023%2F11%2Flg-electronics-announces-organizational-restructuring-for-future-growth%2F" target="_blank">發佈公告</a></u>稱將改革組織架構，以提升競爭力、促進增長。重組計劃包括為國際業務建立一個新的銷售和營銷公司，由 LG 電子北美公司前總裁兼首席執行官 Thomas Yoon 負責，管理世界各地的銷售子公司，以及直接面向消費者（D2C）的銷售業務集團。</p><p>此外，LG 家庭娛樂公司將成立 webOS 軟件開發小組，提高這一智能電視操作系統的實力，由該公司總裁直接領導；還將設立總部直屬的 XR 事業部。家電和空氣解決方案公司將增設工程銷售部門，併入其他部門的家居業務，以與家庭空間現有的產品陣容產生協同效應。車輛零部件解決方案公司將設立總部直屬的全球客戶戰略部。</p><blockquote><p><img height="400" src="https://oscimg.oschina.net/oscnet/up-cdf9a79048dc46240b393d4e2278760273b.png" width="1728" referrerpolicy="no-referrer"></p></blockquote><p>webOS 是基於 Linux 內核的智能電視操作系統，其前身是由&nbsp;Palm&nbsp;所開發的智能手機操作系統，最早於 2009 年面向公眾發佈。2010 年惠普收購 Palm，但之後終止了 Palm 手機和操作系統項目，並在 2011 年<u><a href="https://www.oschina.net/news/23908/hp-make-webos-opensource">決定開源</a></u>&nbsp;webOS。</p><p>2013 年，LG 宣佈收購惠普 webOS 部門，包括系統源代碼和僱員等。此後該操作系統被 LG 用於智能電視和電冰箱等產品。</p><p><img alt="080830_QqVe_2720166.png" src="https://static.oschina.net/uploads/space/2021/0302/080830_QqVe_2720166.png" referrerpolicy="no-referrer"></p><hr><p>延伸閲讀</p><ul><li><a href="https://www.oschina.net/news/131577/lg-says-it-will-license-webos-to-other-tv-mak">LG 將授權 webOS 給其他電視廠商使用</a></li><li><a href="https://www.oschina.net/news/94374/lg-webos-open-source-edition">LG 宣佈推出 webOS 開源版本，仍尋求將其商業化</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 06:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268346</guid>
            <link>https://www.oschina.net/news/268346</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[龍芯發佈 .NET 8 SDK 8.0.100-ea1（試用版）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>龍芯 .NET 編譯器團隊發佈了龍芯 .NET 8 SDK-8.0.100-ea1（試用版）。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ad83ed3331e20d86735205af7cae82b757f.png" referrerpolicy="no-referrer"></p></blockquote><p>2023 年 11 月 21 日龍芯發佈 LoongArch64 架構的 .NET 8.0-SDK 基於上游社區 .NET 8.0-SDK 製作，在生命週期維護範圍內，會持續進行更新升級。</p><ul><li><p>龍芯 LoongArch64 版 .NET 8 下載地址：<u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.loongnix.cn%2Fzh%2Fapi%2Fdotnet" target="_blank">http://www.loongnix.cn/zh/api/dotnet</a></u></p></li><li><p>開發過程中可能需要依賴一些平台相關的 nupkg 資源，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.loongnix.cn%2F" target="_blank">可在龍芯 Nuget 源搜索下載</a></u>。</p></li><li><p>相關配置方法見<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.loongnix.cn%2Fdotnet%2Fsupport%2Flist%2F01.%25E5%25B8%25B8%25E8%25A7%2581%25E9%2597%25AE%25E9%25A2%2598-FAQ.html" target="_blank">龍芯 Nuget 源配置方法</a></u>。</p></li></ul><p>特性更新：</p><ul><li>同步上游社區 v8.0.100&nbsp;新特性。</li></ul><p>關鍵更新:</p><ul><li><p>同步上游社區 v8.0.100&nbsp;更新。</p></li><li><p>默認開啓&nbsp;<code>DOTNET_TC_QuickJitForLoops</code>，支持 OSR 堆棧替換特性。</p></li><li><p>默認集成 PE32 + 格式 System.Private.CoreLib.dll 核心庫文件，提升了 .NET8.0 SDK 在 LoongArch64 平台上的性能表現。</p></li><li><p>支持 crossgen2 特性。</p></li></ul><p>龍芯平台 .NET 是龍芯公司基於開源社區 .NET 獨立研發適配的龍芯版本，官方稱會長期進行安全更新和錯誤修復，並持續進行性能優化。</p><p>社區 .NET 7 版本開始已經原生支持 LoongArch64 架構源碼，具備如下特性：</p><ul><li><p>跟進社區最新版本，獲取及時的安全更新和問題修復</p></li><li><p>支持多 OS：Loongnix、Loongnix-Server、統信 UOS、銀河麒麟等 64 位操作系統</p></li><li><p>支持 LoongArch 架構</p></li><li><p>明確的、多版本的產品維護計劃</p></li><li><p>專業團隊支持</p></li></ul><p>從龍芯 2019 年啓動 .NET 的研發工作，2022 年完成了 LoongArch64 架構代碼合併到 .NET 社區主幹分支上，2023 年 LoongArch64 架構代碼的開發完全和社區同步，從而保證了同時發佈 LoongArch64 的 .NET 8。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 26 Nov 2023 03:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268322</guid>
            <link>https://www.oschina.net/news/268322</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
