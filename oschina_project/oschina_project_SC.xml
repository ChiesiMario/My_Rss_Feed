<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-软件更新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news/project" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-软件更新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 26 Dec 2023 02:59:23 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Electron v28.1.0 发布，跨平台桌面应用开发工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Electron 是一个使用 JavaScript、HTML 和 CSS 构建跨平台的桌面应用程序。它基于 Node.js 和 Chromium，被 Atom 编辑器和许多其他应用程序使用。Electron 兼容 Mac、Windows 和 Linux，可以构建出三个平台的应用程序。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Electron<span>&nbsp;v28.1.0<span>&nbsp;</span></span><span style="color:#333333">更新内容如下：</span></p><p style="text-align:start"><strong>Features</strong></p><ul><li>在<code>protocol.registerSchemesAsPrivileged</code>中添加了一个选项，允许在自定义方案中使用 V8 代码缓存。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40709" target="_blank">#40709</a></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Fixes</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>修复了默认<code>--inspect</code>port 的文档。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40743" target="_blank">#40743</a></li><li>防止 macOS 上的其他应用程序将 node 模式用作脚本运行程序。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40710" target="_blank">#&nbsp;</a><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40737" target="_blank">40710</a></span></span></li></ul><p style="text-align:start"><strong><span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Other Changes</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><ul><li>安全性：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fadvisories%2FGHSA-7c6v-f3h8-2x89" target="_blank">CVE-2023-7024</a>&nbsp;的向后移植修复。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40806" target="_blank">#40806</a></li><li>将 Chromium 更新为 120.0.6099.71。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Fpull%2F40722" target="_blank">#40722</a></li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felectron%2Felectron%2Freleases%2Ftag%2Fv28.1.0" target="_blank">https://github.com/electron/electron/releases/tag/v28.1.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 02:25:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272725/electron-28-1-0-released</guid>
            <link>https://www.oschina.net/news/272725/electron-28-1-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[⚡ 比 rz / sz 更好用的文件传输工具发布 v1.1.7]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>trzsz ( trz / tsz ) 是支持 tmux 的 rz / sz，支持目录传输，支持拖动上传，支持进度条，支持各种终端……</p><p>Go 版 trzsz 发布 v1.1.7，支持文件权限保持，支持原生的 rz / sz 服务端。</p><hr><h2>安装方法</h2><ul><li><p style="margin-left:0; margin-right:0">Ubuntu 可用 apt 安装</p><code>sudo apt install trzsz</code><div><div><pre><code><span style="color:#0086b3">sudo </span>apt <span style="color:#d73a49">update</span><strong>&amp;&amp;</strong><span style="color:#0086b3">sudo </span>apt <span style="color:#0086b3"><span style="color:#d73a49">install</span></span>software-properties-common
<span style="color:#0086b3">sudo </span><span style="color:#d73a49">add</span>-apt-repository ppa:trzsz/ppa <strong>&amp;&amp;</strong><span style="color:#0086b3">sudo </span>apt <span style="color:#d73a49">update</span><span style="color:#0086b3">sudo </span>apt <span style="color:#0086b3"><span style="color:#d73a49">install</span></span>trzsz
</code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">Debian 可用 apt 安装</p><code>sudo apt install trzsz</code><div><div><pre><code><span style="color:#0086b3"><span style="color:#6f42c1">sudo</span></span><span style="color:#032f62">apt </span><span style="color:#0086b3"><span style="color:#032f62">install </span></span><span style="color:#032f62">curl gpg</span><span style="color:#6f42c1">curl</span><span style="color:#000080"><span style="color:#032f62">-s</span></span><span style="color:#032f62"></span><span style="color:#dd1144"><span style="color:#032f62">'https://keyserver.ubuntu.com/pks/lookup?op=get&amp;search=0x7074ce75da7cc691c1ae1a7c7e51d1ad956055ca'</span></span><span style="color:#032f62"></span><span style="color:#dd1144"><span style="color:#032f62">\</span></span><span style="color:#032f62">
    | gpg </span><span style="color:#000080"><span style="color:#032f62">--dearmor</span></span><span style="color:#032f62"></span><span style="color:#000080"><span style="color:#032f62">-o</span></span><span style="color:#032f62"> /usr/share/keyrings/trzsz.gpg</span><span style="color:#0086b3"><span style="color:#6f42c1">echo</span></span><span style="color:#dd1144"><span style="color:#032f62">'deb [signed-by=/usr/share/keyrings/trzsz.gpg] https://ppa.launchpadcontent.net/trzsz/ppa/ubuntu jammy main'</span></span><span style="color:#032f62"></span><span style="color:#dd1144"><span style="color:#032f62">\</span></span><span style="color:#032f62">
    | </span><span style="color:#0086b3"><span style="color:#032f62">sudo tee</span></span><span style="color:#032f62"> /etc/apt/sources.list.d/trzsz.list</span><span style="color:#0086b3"><span style="color:#6f42c1">sudo</span></span><span style="color:#032f62">apt update</span><span style="color:#0086b3"><span style="color:#6f42c1">sudo</span></span><span style="color:#032f62">apt </span><span style="color:#0086b3"><span style="color:#032f62">install </span></span><span style="color:#032f62">trzsz</span></code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">Linux 可用 yum 安装</p><code>sudo yum install trzsz</code><ul><li><p style="margin-left:0; margin-right:0">国内推荐使用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wlnmp.com%2Finstall" target="_blank">wlnmp</a><span>&nbsp;</span>源，安装 trzsz 只需要添加 wlnmp 源（ 配置 epel 源不是必须的 ）：</p><div><div><pre><code><span style="color:#0086b3"><span style="color:#6f42c1">curl</span><span style="color:#032f62">-fsSL "https://sh.wlnmp.com/wlnmp.sh" | bash</span></span><span style="color:#0086b3"><span style="color:#6f42c1">sudo</span></span><span style="color:#032f62">yum </span><span style="color:#0086b3"><span style="color:#032f62">install </span></span><span style="color:#032f62">trzsz</span></code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">也可使用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgemfury.com%2F" target="_blank">gemfury</a><span>&nbsp;</span>源（ 只要网络通，所有操作系统通用 ）</p><div><div><pre><code><span style="color:#0086b3">echo</span><span style="color:#dd1144">'[trzsz]
name=Trzsz Repo
baseurl=https://yum.fury.io/trzsz/
enabled=1
gpgcheck=0'</span> | <span style="color:#0086b3">sudo tee</span> /etc/yum.repos.d/trzsz.repo

<span style="color:#0086b3">sudo </span>yum <span style="color:#0086b3">install </span>trzsz
</code></pre></div></div></li></ul></li><li><p style="margin-left:0; margin-right:0">ArchLinux 可用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJguer%2Fyay" target="_blank">yay</a><span>&nbsp;</span>安装</p><code>yay -S trzsz</code><div><div><pre><code><span style="color:#6f42c1">yay</span><span style="color:#000080"><span style="color:#032f62">-Syu</span></span><span style="color:#6f42c1">yay</span><span style="color:#000080"><span style="color:#032f62">-S</span></span><span style="color:#032f62"> trzsz</span></code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">MacOS 可用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbrew.sh%2F" target="_blank">homebrew</a><span>&nbsp;</span>安装</p><code>brew install trzsz-go</code><div><div><pre><code>brew <span style="color:#d73a49">update</span>
brew <span style="color:#0086b3"><span style="color:#d73a49">install</span></span>trzsz-<span style="color:#d73a49">go</span></code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">Windows 可用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fscoop.sh%2F" target="_blank">scoop</a><span>&nbsp;</span>/<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fzh-cn%2Fwindows%2Fpackage-manager%2Fwinget%2F" target="_blank">winget</a><span>&nbsp;</span>/<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcommunity.chocolatey.org%2F" target="_blank">choco</a><span>&nbsp;</span>安装</p><code>scoop install trzsz</code><span>&nbsp;</span>/<span>&nbsp;</span><code>winget install trzsz</code><span>&nbsp;</span>/<span>&nbsp;</span><code>choco install trzsz</code><div><div><pre><code><span style="color:#6f42c1">scoop</span><span style="color:#0086b3"><span style="color:#032f62">install </span></span><span style="color:#032f62">trzsz</span></code></pre></div></div><div><div><pre><code><span style="color:#6f42c1">winget</span><span style="color:#0086b3"><span style="color:#032f62">install </span></span><span style="color:#032f62">trzsz</span></code></pre></div></div><div><div><pre><code><span style="color:#6f42c1">choco</span><span style="color:#0086b3"><span style="color:#032f62">install </span></span><span style="color:#032f62">trzsz</span></code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">用 Go 直接安装（ 要求 go 1.20 以上 ）</p><code>go install github.com/trzsz/trzsz-go/cmd/...@latest</code><div><div><pre><code>go <span style="color:#0086b3"><span style="color:#d73a49">install</span></span>github.com/trzsz/trzsz-<span style="color:#d73a49">go</span>/cmd/trz@latest
<span style="color:#d73a49">go</span><span style="color:#0086b3"><span style="color:#d73a49">install</span></span>github.com/trzsz/trzsz-<span style="color:#d73a49">go</span>/cmd/tsz@latest
<span style="color:#d73a49">go</span><span style="color:#0086b3"><span style="color:#d73a49">install</span></span>github.com/trzsz/trzsz-<span style="color:#d73a49">go</span>/cmd/trzsz@latest
</code></pre></div></div><p style="margin-left:0; margin-right:0">安装后，<code>trzsz</code><span>&nbsp;</span>程序一般位于<span>&nbsp;</span><code>~/go/bin/</code><span>&nbsp;</span>目录下（ Windows 一般在<span>&nbsp;</span><code>C:\Users\your_name\go\bin\</code><span>&nbsp;</span>）。</p></li><li><p style="margin-left:0; margin-right:0">可从<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz-go%2Freleases" target="_blank">Releases</a><span>&nbsp;</span>中直接下载适用的版本</p><code>或者用 Go 编译（ 要求 go 1.20 以上 ）</code><div><div><pre><code>git clone https:<span style="color:#6a737d">//github.com/trzsz/trzsz-go.git</span><span style="color:#0086b3">cd </span>trzsz-<span style="color:#d73a49">go</span><span>make</span><span style="color:#0086b3">sudo </span><span>make</span><span style="color:#0086b3">install</span></code></pre></div></div></li></ul><h2>使用方法</h2><h3>在本地电脑使用</h3><ul><li><p style="margin-left:0; margin-right:0">在命令前添加<span>&nbsp;</span><code>trzsz</code>，就可以支持 trzsz (trz /tsz) 上传和下载了，如：</p><div><div><pre><code><span style="color:#6f42c1">trzsz</span><span style="color:#032f62">bash</span><span style="color:#6f42c1">trzsz</span><span style="color:#032f62">PowerShell</span><span style="color:#6f42c1">trzsz</span><span style="color:#032f62">ssh x.x.x.x</span></code></pre></div></div></li><li><p style="margin-left:0; margin-right:0">在命令前添加<span>&nbsp;</span><code>trzsz --dragfile</code>，就可以启用拖拽上传功能，如：</p><div><div><pre><code><span style="color:#d73a49">trzsz</span><span style="color:#000080"><span style="color:#d73a49">-d</span></span><span style="color:#d73a49">ssh</span><span style="color:#d73a49">x</span><span style="color:#6f42c1">.x</span><span style="color:#6f42c1">.x</span><span style="color:#6f42c1">.x</span><span style="color:#d73a49">trzsz</span><span style="color:#000080"><span style="color:#d73a49">--dragfile</span></span><span style="color:#d73a49">ssh</span><span style="color:#d73a49">x</span><span style="color:#6f42c1">.x</span><span style="color:#6f42c1">.x</span><span style="color:#6f42c1">.x</span></code></pre></div></div></li></ul><h3>在跳板机上使用</h3><ul><li><p style="margin-left:0; margin-right:0">如果在跳板机上使用<span>&nbsp;</span><code>tmux</code>，则需要再使用<span>&nbsp;</span><code>trzsz --relay ssh</code><span>&nbsp;</span>登录远程服务器，如：</p><div><div><pre><code><span style="color:#6f42c1">trzsz</span><span style="color:#032f62">ssh jump_server</span><span style="color:#6f42c1">tmux</span><span style="color:#6f42c1">trzsz</span><span style="color:#000080"><span style="color:#032f62">--relay</span></span><span style="color:#032f62"> ssh remote_server</span></code></pre></div></div></li></ul><h3>在服务器上使用</h3><ul><li><p style="margin-left:0; margin-right:0">与 lrzsz (rz /sz) 类似，使用<span>&nbsp;</span><code>trz</code><span>&nbsp;</span>命令上传文件，使用<span>&nbsp;</span><code>tsz /path/to/file</code><span>&nbsp;</span>命令下载文件。</p></li><li><p style="margin-left:0; margin-right:0">有关<span>&nbsp;</span><code>trzsz</code><span>&nbsp;</span>更详细的文档，请查看<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftrzsz.github.io%2Fcn%2F" target="_blank">https://trzsz.github.io/cn/</a>。</p></li></ul><h2>使用建议</h2><ul><li><p style="margin-left:0; margin-right:0">为了使用方便，可以设置<span>&nbsp;</span><code>alias</code><span>&nbsp;</span>，例如<span>&nbsp;</span><code>alias ssh="trzsz ssh"</code>，又或者<span>&nbsp;</span><code>alias ssh="trzsz -d ssh"</code><span>&nbsp;</span>支持拖文件上传。</p></li><li><p style="margin-left:0; margin-right:0">如果在本地电脑使用<span>&nbsp;</span><code>tmux</code>，先不带<span>&nbsp;</span><code>trzsz</code><span>&nbsp;</span>运行<span>&nbsp;</span><code>tmux</code>，然后再使用<span>&nbsp;</span><code>trzsz ssh</code><span>&nbsp;</span>登录远程服务器。</p></li></ul><h2>可配置项</h2><p style="color:#606c71; margin-left:0; margin-right:0; text-align:start"><code>trzsz</code><span>&nbsp;</span>使用的配置文件是<span>&nbsp;</span><code>~/.trzsz.conf</code>（ Windows 是<span>&nbsp;</span><code>C:\Users\your_name\.trzsz.conf</code><span>&nbsp;</span>）。注意路径必须包含<span>&nbsp;</span><code>/</code><span>&nbsp;</span>结尾，如：</p><pre><code>DefaultUploadPath =
DefaultDownloadPath = /Users/username/Downloads/
</code></pre><ul><li><p style="margin-left:0; margin-right:0">如果<span>&nbsp;</span><code>DefaultUploadPath</code><span>&nbsp;</span>不为空，上传选择文件时会默认打开此目录。</p></li><li><p style="margin-left:0; margin-right:0">如果<span>&nbsp;</span><code>DefaultDownloadPath</code><span>&nbsp;</span>不为空，下载文件时会自动下载到此目录（ 不需要再弹窗选择路径 ）。</p></li></ul><h2>支持 Zmodem</h2><ul><li><p style="margin-left:0; margin-right:0">使用<span>&nbsp;</span><code>-z</code><span>&nbsp;</span>或<span>&nbsp;</span><code>--zmodem</code><span>&nbsp;</span>启用<span>&nbsp;</span><code>rz / sz</code><span>&nbsp;</span>功能，例如<span>&nbsp;</span><code>trzsz -z ssh remote_server</code>。</p></li><li><p style="margin-left:0; margin-right:0">需要在客户端（ 本地电脑 ）上安装<span>&nbsp;</span><code>lrzsz</code>，例如<span>&nbsp;</span><code>brew install lrzsz</code>、<code>apt install lrzsz</code><span>&nbsp;</span>等。</p></li><li><p style="margin-left:0; margin-right:0"><code>trzsz --zmodem ssh xxx</code><span>&nbsp;</span>不兼容 Windows，你可以使用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftrzsz.github.io%2Fcn%2Fssh" target="_blank">trzsz-ssh ( tssh )</a><span>&nbsp;</span>代替，如<span>&nbsp;</span><code>tssh --zmodem xxx</code>。</p></li><li><p style="margin-left:0; margin-right:0">关于进度条，己传文件大小和传输速度不是精确值，会有一些偏差，它的主要作用只是指示传输正在进行中。</p></li></ul><h2>常见问题</h2><ul><li><p style="margin-left:0; margin-right:0">如果<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.msys2.org%2F" target="_blank">MSYS2</a><span>&nbsp;</span>或<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.atlassian.com%2Fgit%2Ftutorials%2Fgit-bash" target="_blank">Git Bash</a><span>&nbsp;</span>遇到错误<span>&nbsp;</span><code>The handle is invalid</code>。</p><ul><li>在<span>&nbsp;</span><code>trzsz</code><span>&nbsp;</span>前面加上<span>&nbsp;</span><code>winpty</code><span>&nbsp;</span>即可，如<span>&nbsp;</span><code>winpty trzsz ssh x.x.x.x</code><span>&nbsp;</span>这样登录服务器。</li><li><code>Git Bash</code><span>&nbsp;</span>已默认安装有<span>&nbsp;</span><code>winpty</code>，<code>MSYS2</code><span>&nbsp;</span>需要手工安装<span>&nbsp;</span><code>pacman -S winpty</code>。</li></ul></li><li><p style="margin-left:0; margin-right:0">在<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.msys2.org%2F" target="_blank">MSYS2</a><span>&nbsp;</span>和<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cygwin.com%2F" target="_blank">Cygwin</a><span>&nbsp;</span>等，不支持直接使用<span>&nbsp;</span><code>/usr/bin/ssh</code><span>&nbsp;</span>那个<span>&nbsp;</span><code>ssh</code>，可能会传输失败。需要使用 Windows 自带的<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.microsoft.com%2Fen-us%2Fwindows-server%2Fadministration%2Fopenssh%2Fopenssh_install_firstuse" target="_blank">OpenSSH</a>。</p><ul><li><code>MSYS2</code><span>&nbsp;</span>中用法<span>&nbsp;</span><code>winpty trzsz /c/Windows/System32/OpenSSH/ssh.exe x.x.x.x</code>。</li><li><code>Cygwin</code><span>&nbsp;</span>中用法<span>&nbsp;</span><code>trzsz "C:\Windows\System32\OpenSSH\ssh.exe" x.x.x.x</code>。</li><li>⭐ 推荐使用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftrzsz.github.io%2Fcn%2Fssh" target="_blank">trzsz-ssh</a><span>&nbsp;</span>( tssh )，<code>tssh</code><span>&nbsp;</span>等同于<span>&nbsp;</span><code>trzsz ssh</code>。</li></ul></li><li><p style="margin-left:0; margin-right:0">拖文件或目录到终端后，没有自动上传？</p><ul><li>检查<span>&nbsp;</span><code>ssh</code><span>&nbsp;</span>登录时有没有加上<span>&nbsp;</span><code>--dragfile</code><span>&nbsp;</span>选项，如<span>&nbsp;</span><code>trzsz --dragfile ssh x.x.x.x</code><span>&nbsp;</span>。</li><li>检查服务器上有没有安装<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftrzsz.github.io%2F" target="_blank">trzsz</a>，<code>trz</code><span>&nbsp;</span>应在某个<span>&nbsp;</span><code>PATH</code><span>&nbsp;</span>路径下。</li><li>在 Windows 中，检查标题有没有<code>管理员</code>三个字，<code>以管理员运行</code><span>&nbsp;</span>时可能会由于 UAC 设置的原因导致拖不了文件。</li><li>在 Windows Terminal 中，需要将文件或目录拖到左上角，显示<code>粘贴文件路径</code><span>&nbsp;</span>时再放开。</li><li>在 Windows 的<span>&nbsp;</span><code>cmd</code><span>&nbsp;</span>和<span>&nbsp;</span><code>PowerShell</code><span>&nbsp;</span>中，一次只能拖一个文件或目录，拖多个也只有鼠标正对着的那个是生效的。</li></ul></li></ul><h2>开发指引</h2><p style="color:#606c71; margin-left:0; margin-right:0; text-align:start">想要让你自己开发的 ssh 客户端支持 trzsz ？请参考<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftrzsz%2Ftrzsz-go%2Fblob%2Fmain%2Fexamples%2Fssh_client.go" target="_blank">go ssh client example</a>。</p><h2>录屏演示</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在 windows 的 cmd 使用示例：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="500" src="https://oscimg.oschina.net/oscnet/up-a89db2d8017d9dc13594649a3ee31d756fb.gif" width="800" referrerpolicy="no-referrer"></p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在 Ubuntu 原生终端使用示例：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="500" src="https://oscimg.oschina.net/oscnet/up-0cfc7533b2690d884e6464ae804a074a206.gif" width="800" referrerpolicy="no-referrer"></p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在 Mac 原生终端拖文件上传的示例：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="500" src="https://oscimg.oschina.net/oscnet/up-1272a927e74f74368f43bfc310739b5e6b4.gif" width="800" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 02:18:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272724/trzsz-go-1-1-7-released</guid>
            <link>https://www.oschina.net/news/272724/trzsz-go-1-1-7-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开放签开源电子签章 1.0 版本上线一周的总结]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#4272ef"><strong><span>上线后的反馈</span></strong></span>&nbsp; &nbsp; &nbsp; &nbsp;</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 开放签 1.0 版本于 12 月 15 日上线发布后，给我们带来了很多惊喜，也矫正了我们很多错误的观点。</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 好的地方是我们开源工具版、企业版共有数百个用户在使用。在开源社区获取了 40 多个 start（感谢肯定），官网每天都有六七十的访问量。这些小成绩更加坚定了我们之前的判断。</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 不太好的是我们没有想明白企业版的收费逻辑，很多用户咨询企业版的收费方式，我们目前也没啥标准，可能会给早期客户带来不好的感受。不瞒大家说，其实企业版的收费逻辑我们也没有想好，因为我们产品出来前也没有真实付费的用户，所以收费这方面我们先跑跑再说。在没有明确的收费逻辑前，我们先让早期用户免费用起来也是挺好的方式，最起码能证明产品能力对用户来说是有价值的，怎么收费慢慢来吧。</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 两个版本用户反馈最多的问题主要有：</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>开源工具版：</strong>支持 SM2 算法、OFD 文件签署、分辨率兼容等；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>企业版：</strong>标准收费逻辑是什么？（希望大家可以提供些建议）</p><h1><span style="color:#4272ef"><strong><span>下一步工作计划</span></strong></span></h1><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>开源工具版：</strong></p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （1）支持 SM2 算法、OFD 文件签署、分辨率兼容等；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （2）前端页面支持移动端的相关操作；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>企业版：</strong></p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （1）增加 CA 机构数字证书，支持具有法律效力的电子签名；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （2）增加业务线功能模块，满足各种签署场景的灵活配置；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （3）增加文件模板功能，满足在线编辑文件模板；</p><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; （4）梳理企业版收费标准；</p><h1><strong><span style="color:#4272ef">总结</span></strong></h1><p style="color:#2c3e50; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; 开放签 1.0 版本上线后确实给我们带来了很多惊喜，也快速的验证了我们很多的想法。接下来还需要以更快的速度迭代出更多好用的功能带给用户，尽快打通与用户的真实互动，让用户早日应用在真实业务环境中。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 02:13:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272720</guid>
            <link>https://www.oschina.net/news/272720</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[web 通讯平台 webtim 第二版发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><span>这是 webtim 版本 v0.0.2 版本，该版本有比较大的界面调整，优化和功能新增</span><br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwebtim" target="_blank"><span>webtim 官网</span></a></blockquote><p style="color:#212529; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftim.tlnet.top%2F" target="_blank"><span><strong>webtim 在线访问地址</strong></span></a></p><p style="color:#212529; text-align:start"><strong>以下是更新说明：</strong></p><p><strong>一.解决问题：</strong><br> 解决 webtim 页面聊天记录部分乱序的问题。<br> 引起乱序的原因有两个：</p><ul><li>&nbsp;&nbsp;&nbsp; 数据异步加载导致</li><li>&nbsp;&nbsp;&nbsp; 离线数据比拉取数据先到达后被先加载</li></ul><p>以上两个问题导致的乱序都属于页面处理逻辑问题。<br> 解决方法：去掉同一批有序数据的异步加载.<br><strong>二. 功能优化：</strong><br> 优化视频加载闪烁问题，为了解决该问题，作者写了一个 js 视频组件 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fgithub.com%2Fdonnie4w%2Fvideojoin" target="_blank">videojoin </a>，支持视频流，无缝连续的播放。<br><strong>三. 功能更新：</strong></p><ol><li>增加直播间功能</li><li>增加消息撤回功能</li></ol><p><strong>四.&nbsp; webtim 说明：</strong></p><blockquote><span><strong>webtim 是 Web 通讯平台。服务器是<span>&nbsp;</span></strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Ftim" target="_blank"><span><strong>Tim</strong></span></a><span><strong>。前端使用 tim 的 js 客户端<span>&nbsp;</span></strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Ftimjs" target="_blank"><span><strong>timjs</strong></span></a><span><strong><span>&nbsp;</span>调用 tim 服务器接口渲染页面。webtim 开发目的是通过界面来显示表达 tim 接口功能。tim 是去中心化的分布式 IM 引擎。支持基础通讯模式，对端到端的数据流传输支持非常全面，几乎涵盖了所有端到端的通讯需求，所以 webtim 可以非常流畅的实现任意通讯需求。但 tim 的强大并非其通讯模式，而是去中心化的集群功能，tim 的水平扩展能力非常强，可以支持成千上万的节点集群，没有中心依赖和限制，支持数据分布式存储，数据库节点动态扩容。</strong></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftim.tlnet.top%2F" target="_blank"><span><strong>webtim 在线访问地址</strong></span></a></blockquote><p style="color:#212529; text-align:start">webtim 的 im 功能：用户注册，登录，修改资料，用户关系功能系列操作，群功能系列操作，用户状态传输，通信数据传输。</p><p style="color:#212529; text-align:start">webtim 的流实现：实时视频电话，个人直播，视频播放直播，多人视频会议等</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Ftimdoc" target="_blank"><span>TIM 开发使用文档</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Ftim" target="_blank"><span>TIM 即时通讯引擎</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwebtim" target="_blank"><span>webtim 源码地址</span></a><span><span>&nbsp;</span>&nbsp;</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Ftimjs" target="_blank"><span>timjs 源码地址</span></a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Ftldb" target="_blank">Tldb 分布式数据库</a></li></ul><p style="color:#212529; text-align:start"><strong>说明：</strong></p><ol><li>webtim 的 im 通讯逻辑功能是在 tim 服务端处理完成的，webtim 用 js 处理 tim 返回的处理结果，并将数据渲染到页面展示。所以，使用 tim 进行 IM 通讯是跨平台的，web 端，安卓，苹果等终端可以通过调用 tim 接口，进行业务上的数据通讯或业务处理。</li><li>webtim 不是专门的直播平台，只对视频进行简单采集。有时卡顿现象主要是采集数据出现错误或数据解析错误导致，更好的视频体验需要对采集数据做更细致的处理</li><li>注册 webtim 的账号是信息安全的。tim 不会记录注册者的账号，tim 是内置账号系统，使用内置账号通讯。而且通讯信息加密，用户资料加密，所以，用户不必担心资料泄密，即使是 tim 作者本人，也没法反向获取用户的账号密码等信息。这一点在开源代码中可以体现 
  <hr><p>&nbsp;</p></li></ol><h4><strong>webtim 功能截图：</strong></h4><p><img alt="" height="860" src="https://oscimg.oschina.net/oscnet/up-be20db0ace2613170d9cdc2a6e81556edd2.jpg" width="1907" referrerpolicy="no-referrer"></p><p><img alt="" height="899" src="https://oscimg.oschina.net/oscnet/up-e1c61d319ef7d2328fa697dd410fdb54b8a.jpg" width="1908" referrerpolicy="no-referrer"></p><p>&nbsp;</p><hr><p><strong>视频直播功能截图：</strong></p><p><strong><img alt="" height="820" src="https://oscimg.oschina.net/oscnet/up-4d9658741c5b0c256e136d122271e9a48e7.jpg" width="1900" referrerpolicy="no-referrer"></strong></p><p><img alt="" height="818" src="https://oscimg.oschina.net/oscnet/up-91c5c5c38b3eccb04e6ecd684637fd42cc4.jpg" width="1897" referrerpolicy="no-referrer"></p><p><img alt="" height="814" src="https://oscimg.oschina.net/oscnet/up-2f92a5d19edd6b5130d35c6d60474b458d3.jpg" width="1901" referrerpolicy="no-referrer"></p><p><img alt="" height="818" src="https://oscimg.oschina.net/oscnet/up-4f12b078a22a95528c5a5ed2381730b63e1.jpg" width="1903" referrerpolicy="no-referrer"></p><hr><p><strong>tim 开发使用</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Ftim" target="_blank">tim 官网</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Ftimdoc" target="_blank">tim 使用文档</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2FTim-Practical-Article" target="_blank">Github 持续更新 tim 系列文章</a></li></ul><hr><p style="color:#212529; text-align:start"><strong>有兴趣跟进 webtim 或 tim 项目可以加作者微信或 tim 微信交流群，或关注作者<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w" target="_blank"><strong>github</strong></a></p><hr><hr><p style="color:#212529; text-align:start">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 01:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272710/webtim-0-0-2-released</guid>
            <link>https://www.oschina.net/news/272710/webtim-0-0-2-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[魔豆文库 moredoc v2.2.0 发布，实现广告支持和富文本编辑器增强]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bookstack.cn%2Fprojects%2Fmoredoc%2F25025565fbb0a50a52bcb76e9586ac42.png" target="_blank"><img alt="魔豆文库" src="https://static.sitestack.cn/projects/moredoc/25025565fbb0a50a52bcb76e9586ac42.png" referrerpolicy="no-referrer"></a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">魔豆文库 MOREDOC，使用 Go 语言开发实现的文库解决方案，<a href="https://gitee.com/truthhun/DocHub">dochub</a>文库的重构版本，支持 office (全部类型)、PDF、TXT、EPUB、MOBI 等多种文档格式的在线阅读浏览，支持<code>无限级分类</code>、<code>文档批量上传</code>、<code>文档批量转换</code>、<code>全文搜索</code>、<code>云存储</code>、<code>网络爬虫</code>、<code>VIP</code>、<code>手机号登录注册</code>以及<code>支付宝</code>和<code>微信支付</code>等功能，拥有简洁美观的用户视觉和功能体验，以及配套的<a href="https://gitee.com/mnt-ltd/moredoc-app">微信小程序</a>。</p><h2>技术栈</h2><ul><li>Golang ：gin + gRPC + GORM</li><li>Vue.js : nuxt2 + element-ui</li><li>Database : MySQL 5.7+</li></ul><h2>升级日志</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>社区版 (开源版) 升级日志</strong></p><ul><li>文档默认预览格式调整为<code>webp</code>，以提升预览加载速度和减少存储空间占用</li><li>更换文章富文本编辑器，由<code>wangEditor</code>更换为<code>tinyMCE</code></li><li>优化图片验证码的获取，以节省服务器资源</li><li>增加广告位功能，可以在网站首页、列表页、搜索页、文档预览页等页面投放广告</li><li>支持按百分比设置最大预览页（在<code>系统设置</code>-&gt;<code>转换配置</code>中设置）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>专业版升级日志</strong></p><blockquote><p style="margin-left:0; margin-right:0">专业版升级内容包含社区版升级内容</p></blockquote><ul><li>集成 Google Oauth2 登录</li><li>支持关闭订单功能 (在<code>系统设置</code>-&gt;<code>展示配置</code>设置。适用于非营利机构网站)</li><li>支持微信小程序激励视频广告，用户可以在小程序通过观看激励视频广告获得积分奖励和文档下载（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bookstack.cn%2Fread%2Fmoredoc%2Frewarded-ad.md" target="_blank">微信小程序激励视频广告配置</a>）</li></ul><h2>演示站点</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">程序新功能体验，一睹为快！</p><ul><li>网址：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmoredoc.mnt.ltd%2F" target="_blank">https://moredoc.mnt.ltd</a></li><li>管理员账号： admin</li><li>管理员密码： mnt.ltd</li></ul><blockquote><p style="margin-left:0; margin-right:0">演示站点，每天凌晨 1:00 ~ 6:00，每隔一小时重置一次全部数据</p></blockquote><h2>开源地址</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>魔豆文库 MOREDOC</strong></p><ul><li>Gitee -<span>&nbsp;</span><a href="https://gitee.com/mnt-ltd/moredoc">https://gitee.com/mnt-ltd/moredoc</a></li><li>Github -<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmnt-ltd%2Fmoredoc" target="_blank">https://github.com/mnt-ltd/moredoc</a></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>配套小程序 ONEDOC</strong></p><ul><li>Gitee -<span>&nbsp;</span><a href="https://gitee.com/mnt-ltd/onedoc">https://gitee.com/mnt-ltd/onedoc</a></li><li>Github -<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmnt-ltd%2Fonedoc" target="_blank">https://github.com/mnt-ltd/onedoc</a></li></ul><h2>使用手册</h2><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:left">关于魔豆文库安装部署、二次开发等更详细的教程，详见书栈网<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bookstack.cn%2Fbooks%2Fmoredoc" target="_blank">《魔豆文库使用手册》</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 01:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272709/moredoc-2-2-0-released</guid>
            <link>https://www.oschina.net/news/272709/moredoc-2-2-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CLup 5.0.5 新版本发布：为您的 PostgreSQL/PolarDB 管控平台注入更强动能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>🎉 CLup 开源仓库已经发布了令人瞩目的 5.0.5 版本。这个全新的版本不仅延续了我们对高可用、监控告警、备份和恢复等功能的极致追求，更引入了两项重大更新，旨在提升您的 PostgreSQL/PolarDB 管控体验。</p><p>👉 首先，我们新增了 VIP 池的特性，可以让您更加灵活、高效地管理您的虚拟 IP 资源，确保服务的稳定性和可靠性达到全新高度。无论是 IP 资源的初次分配，还是回收再利用，VIP 池管理都能为您提供强大的支持，让您在面对复杂环境时游刃有余。</p><p>🌍 其次，我们在创建数据库或集群的过程中，新增了选择 WAL 段文件大小的支持。（友情提示：此功能仅适用于 PG11 及以上版本以及 PolarDB。）这意味着您现在可以根据实际业务需求，精细化调整 WAL 段文件的大小，从而优化存储效率，提高系统性能。这一改进将进一步提升您的数据库环境的自定义能力和适应性。</p><p>🚀 CLup 5.0.5 版本是我们持续创新和精益求精的成果，我们坚信它将为您的 PostgreSQL/PolarDB 管控工作带来前所未有的便利和效率。无论您是数据库管理员、开发者还是运维工程师，CLup 都将成为您不可或缺的得力助手。</p><p>📣 我们诚邀您立即升级到 CLup 5.0.5 版本，亲自体验这些强大新功能带来的改变。同时，我们也期待您的反馈和建议，共同推动 CLup 的发展。如果您觉得 CLup 对您有帮助，请给仓库点一颗星星，让更多的人可以看到这个项目，十分感谢！</p><p style="color:black; margin-left:0; margin-right:0; text-align:left">期待您的反馈，让我们一起见证 CLup 软件的不断成长和进步！</p><p style="color:black; margin-left:0; margin-right:0; text-align:left">产品官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.csudata.com%2Fclup">https://www.csudata.com/clup</a></p><p style="color:black; margin-left:0; margin-right:0; text-align:left">官方文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.csudata.com%2Fclup%2Fmanual">https://www.csudata.com/clup/manual</a></p><p style="color:black; margin-left:0; margin-right:0; text-align:left">开源版 Gitee 地址：</p><ul><li><p style="margin-left:0; margin-right:0">server: https://gitee.com/csudata/clup</p></li><li><p style="margin-left:0; margin-right:0">agent: https://gitee.com/csudata/clup-agent</p></li></ul><p style="color:black; margin-left:0; margin-right:0; text-align:left">开源版 Github 地址</p><ul><li><p style="margin-left:0; margin-right:0">server：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcsudata%2Fclup">https://github.com/csudata/clup</a></p></li><li><p style="margin-left:0; margin-right:0">agent：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcsudata%2Fclup-agent">https://github.com/csudata/clup-agent</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 00:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272705/clup-5-0-5-released</guid>
            <link>https://www.oschina.net/news/272705/clup-5-0-5-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Wine runner 3.6.1 已经发布，小白友好型 Wine 运行器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Wine runner 3.6.1 已经发布，小白友好型 Wine 运行器</p><p>此版本更新内容包括：</p><blockquote><p>注：spark-deepin-wine-runner 是普通包，spark-deepin-wine-runner-ace 是使用 ace 兼容环境运行的运行器</p></blockquote><h1>3.6.1 更新内容</h1><p><strong>※1、修复应用无法打开的问题</strong></p><h1>3.6.0 更新内容</h1><p><strong>※1、修复高级打包器选择软件适配脚本后无法打包的问题 <a href="https://gitee.com/gfdgd-xi/deep-wine-runner/issues/I8I110" target="_blank">https://gitee.com/gfdgd-xi/deep-wine-runner/issues/I8I110</a></strong><br><strong>※2、支持调用 Deepin Wine8 Stable</strong><br><strong>※3、移除过时的 Wine 安装程序入口</strong><br><strong>※4、Wine 安装器支持根据地区自动选择国内源以及国际源</strong><br><strong>※5、Wine 安装器新增 Sourceforge 源</strong><br><strong>※6、新增 Wine 运行报告生成功能</strong><br><strong>※7、初步英语翻译</strong><br><strong>※8、新增离线安装包（只支持 amd64）</strong><br><strong>※9、支持识别 /opt 文件夹下的 Wine</strong><br> 10、新增 Wine 运行器视频教程的 Youtube 入口</p><p><img alt="图片.png" src="https://storage.deepin.org/thread/202312241003211288_%E5%9B%BE%E7%89%87.png" referrerpolicy="no-referrer"></p><h1>离线版本下载链接</h1><p>123pan：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.123pan.com%2Fs%2FpDSKVv-pAJWv.html" target="_blank">https://www.123pan.com/s/pDSKVv-pAJWv.html</a> 百度网盘：<a href="https://gitee.com/link?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F1klBw63tw2_ZQLzmi11dDBw%3Fpwd%3D7bu5" target="_blank">https://pan.baidu.com/s/1klBw63tw2_ZQLzmi11dDBw?pwd=7bu5</a> 提取码: 7bu5 诚通网盘：<a href="https://gitee.com/link?target=http%3A%2F%2Fctfile.gfdgdxi.top%2Fd%2F31540479-59254792-909739%3Fp%3D2061" target="_blank">http://ctfile.gfdgdxi.top/d/31540479-59254792-909739?p=2061</a> (访问密码: 2061) Github：<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgfdgd-xi%2Fdeep-wine-runner%2Freleases%2F" target="_blank">https://github.com/gfdgd-xi/deep-wine-runner/releases/</a> Sourceforge：<a href="https://gitee.com/link?target=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fdeep-wine-runner%2Ffiles%2F" target="_blank">https://sourceforge.net/projects/deep-wine-runner/files/</a></p><p>详情查看：<a href="https://gitee.com/gfdgd-xi/deep-wine-runner/releases/3.6.1">https://gitee.com/gfdgd-xi/deep-wine-runner/releases/3.6.1</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 14:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272682/wine-runner-3-6-1-released</guid>
            <link>https://www.oschina.net/news/272682/wine-runner-3-6-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 工具集 Hutool-5.8.24 发布，一起发发牢骚]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img src="https://static.oschina.net/uploads/img/201803/21114512_tLDC.jpg" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhutool.cn%2F" target="_blank">https://hutool.cn/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#f6f6f6">Hutool</span><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span>是一个功能丰富且易用的</span><strong><span>&nbsp;</span>Java 工具库</strong><span style="background-color:#ffffff; color:#40485b">，通过诸多实用工具类的使用，旨在帮助开发者快速、便捷地完成各类开发任务。 这些封装的工具涵盖了字符串、数字、集合、编码、日期、文件、IO、加密、数据库 JDBC、JSON、HTTP 客户端等一系列操作， 可以满足各种不同的开发需求。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">----------------------------------------------------------------------------</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 此次更新为常规 bug 修复，整体来说 5.x 已经进入一个稳定期，之后的版本主要集中在 bug 修复上，最近的所谓 bug，其实是对 jdk9+的兼容性修复，还有针对 graalvm 的兼容性修复。</p><p>&nbsp; &nbsp; &nbsp; &nbsp; 这里略微发发牢骚，随着 Hutool 使用的广泛，用户群也逐渐扩展开来，甚至到了一些我的知识盲区，没办法，只能是一边修复 bug，一边学习，很多兼容性 bug 有的是用户抽出大量时间帮忙测试，有的是用户 debug 代码直接指明错误位置，甚至提交 PR 直接修复，还热心给出修复的原因以及参考的资料，在此为广大热心的用户表示感谢，你们的负重前行，会让后续的用户少走弯路。</p><p>&nbsp; &nbsp; &nbsp; &nbsp;第二个发牢骚的点就是 JDK 本身了，说实话，可能在大部分人心目中 JDK 是完美的存在的，一出问题不是框架库的问题，就是自己知识太浅薄，事实上根据用户提出的一些 issue，发现是 JDK 本身设计的不合理和 bug，我们需要总是需要通过一些「非常规」手段去绕过那些 bug（比如通过反射修改 JDK 某些参数属性），当然这些蜜汁操作，在升级 JDK9+后会成为用户的噩梦，换来的当然是对工具库和框架的强力吐槽。最后总结是：JDK 有 bug，可以当面试题啊 Spring 有 bug，你摆脱不掉还得继续用啊。其实国内开源环境的优点是沟通渠道顺畅，这也是一把双刃剑，优点是可以将用户的诉求及时反馈和处理，缺点也很明显，用户的情绪传递也很快，也会影响开发者的情绪。</p><p>&nbsp; &nbsp; &nbsp; 「没有银弹」，没有无 bug 的程序和代码，也没有完美的用户，我们也不是考试满分的神童，我们也是普通的开发者和学习者，开源的意义在于「分享」和"沟通"，好的开源项目不只是提供便利的工具，而是传递一种开源精神，一种协作方式和默契精神，从而更快的完成需求和团队协作。</p><p>----------------------------------------------------------------------------</p><p>主要更新如下：</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhutool.cn%2Fdocs%2F%23%2FCHANGELOG%3Fid%3D%25f0%259f%2590%25a3%25e6%2596%25b0%25e7%2589%25b9%25e6%2580%25a7" target="_blank"><span style="color:var(--textColor)">🐣新特性</span></a></h3><ul><li>【cache 】 Cache 增加 get 重载，可自定义超时时间（issue#I8G0DL@Gitee）</li><li>【cache 】 JWT#sign 增加重载，可选是否增加默认的 typ 参数（issue#3386@Github）</li><li>【db 】 增加识别 OpenGauss 的驱动类（issue#I8K6C0@Gitee）</li><li>【core 】 修复 CharSequenceUtil 注释和引用，避免循环引用</li><li>【extra 】 SpringUtil 增加 getProperty 重载（pr#1122@Gitee）</li><li>【core 】 FileTypeUtil 增加 null 判断（issue#3419@Github）</li><li>【core 】 DateUtil.parse 支持毫秒时间戳（issue#I8NMP7@Gitee）</li><li>【extra 】 优化 TokenizerEngine 使用 IK 分词器支持并发（pr#3427@Github）</li><li>【core 】 Opt.ofEmptyAble 支持更多类型（issue#I8OOSY@Gitee）</li><li>【http 】 HTMLFilter 保留 p 标签（issue#3433@Gitee）</li></ul><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhutool.cn%2Fdocs%2F%23%2FCHANGELOG%3Fid%3D%25f0%259f%2590%259ebug%25e4%25bf%25ae%25e5%25a4%258d" target="_blank"><span style="color:var(--textColor)">🐞Bug 修复</span></a></h3><ul><li>【core 】 修复 LocalDateTime#parseDate 未判断空问题问题（issue#I8FN7F@Gitee）</li><li>【http 】 修复 RootAction send404 抛异常问题（pr#1107@Gitee）</li><li>【extra 】 修复 Archiver 最后一个 Entry 为空文件夹时未关闭 Entry 问题（pr#1123@Gitee）</li><li>【core 】 修复 ImgUtil.convert png 转 jpg 在 jdk9+中失败问题（issue#I8L8UA@Gitee）</li><li>【cache 】 修复 StampedCache 的 get 方法非原子问题（issue#I8MEIX@Gitee）</li><li>【core 】 修复 StrSplitter.splitByRegex 使用空参数导致的 OOM 问题（issue#3421@Github）</li><li>【db 】 修复嵌套 SQL 中 order by 子句错误截断问题（issue#I89RXV@Gitee）</li><li>【http 】 修复 graalvm 编译后，未读取 Content-Length 可能导致的读取时间过长问题（issue#I6Q30X@Gitee）</li><li>【core 】 修复 JavaSourceCompiler.addSource 目录处理错误问题（issue#3425@Github）</li><li>【core 】 修复时间戳转 Bean 时异常问题（issue#I8NMP7@Gitee）</li><li>【core 】 修复 PostgreSQL 使用 upsert 字段大小写问题问题（issue#I8PB4X@Gitee）</li><li>【extra 】 修复 TinyPinyinEngine 可能的空指针问题（issue#3437@Github）</li><li>【core 】 修复 graalvm 原生打包使用 http 工具被转为 file 协议问题（issue#I8PY3Y@Gitee）</li><li>【poi 】 修复 cloneSheet 参数错误导致非 XSSFWorkbook 错误命名问题（issue#I8QIBB@Gitee）</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 10:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272641/hutool-5-8-24-released</guid>
            <link>https://www.oschina.net/news/272641/hutool-5-8-24-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源 AI 聊天、绘图软件 AIdea 1.0.10 支持 Gemini、GPT-4V 等]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>AIdea 最新版本的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea%2Freleases%2Ftag%2F1.0.10" target="_blank">1.0.10</a> 发布啦，大家快来体验体验！</p><blockquote><p>如果你还不知道这款 APP，那么可以简单看看这篇文章 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA3NTU1NDk4Mg%3D%3D%26mid%3D2454663369%26idx%3D1%26sn%3Dfc5ae7e09e5da885fecbe90747900bc9%26chksm%3D88d55900bfa2d016578008ec30550acbab49cf9ed5cd0b454c3ce8d308ff7cc1ab9416637f19%23rd" target="_blank">花了小半年开发了一个 AI 套壳 APP，然而大势已过，直接开源了</a>。</p></blockquote><p>下载体验地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faidea.aicode.cc" target="_blank">https://aidea.aicode.cc</a> 。</p><p><img alt="" src="https://ssl.aicode.cc/mweb/20231225/17034940908941.jpg" referrerpolicy="no-referrer"></p><p>本次更新内容如下</p><ul><li>新增了几个视觉模型的支持 
  <ul><li>GPT-4V</li><li>Google Gemini Pro Vision</li><li>通义千问 VL</li></ul></li><li>新增了几个大模型 
  <ul><li>Google Gemini Pro</li><li>通义千问 Max</li><li>天工 MegaVerse</li><li>零一万物的 Yi 34B</li></ul></li><li>创作岛增加艺术字、艺术二维码生成</li><li>群聊默认由所有成员同时回答（之前是随机选择一个）</li><li>朗读采用 OpenAI 的 TSS 模型输出（目前响应速度很慢）</li></ul><p>AIdea 是一款集成了主流大语言模型以及绘图模型的 APP，采用 Flutter + Golang 开发，代码完全开源，目前已经支持以下大语言模型</p><p><img alt="" src="https://ssl.aicode.cc/mweb/20231225/17034908007422.jpg" referrerpolicy="no-referrer"></p><p>整体技术栈如下图</p><p><img alt="" src="https://ssl.aicode.cc/mweb/20231225/17034970421740.jpg" referrerpolicy="no-referrer"></p><p>如果你对 AIdea 项目感兴趣，以下是 Github 地址，赶紧去 Star 一下吧！</p><ul><li>客户端（ Flutter ）： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea" target="_blank">https://github.com/mylxsw/aidea</a></li><li>服务端（ Golang ）： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea-server" target="_blank">https://github.com/mylxsw/aidea-server</a></li><li>Docker 一键部署安装包：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea-docker" target="_blank">https://github.com/mylxsw/aidea-docker</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 09:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272634/aidea-1-0-10-released</guid>
            <link>https://www.oschina.net/news/272634/aidea-1-0-10-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ruby 3.3.0 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Ruby 3.3.0 现已正式<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ruby-lang.org%2Fen%2Fnews%2F2023%2F12%2F25%2Fruby-3-3-0-released%2F" target="_blank">发布</a>。新版本<span style="background-color:#ffffff">添加了一个名为 Prism 的新解析器，使用 Lrama 作为解析器生成器，添加了一个名为 RJIT 的新纯 Ruby JIT 编译器，以及许多性能改进，尤其是 YJIT。</span></span></p><p><span style="background-color:#ffffff; color:#333333">具体更新内容如下：</span></p><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong><span style="color:#000000"><span style="background-color:#ffffff">Prism</span></span></strong></h4><ul style="margin-left:0; margin-right:0"><li>引入&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fruby%2Fprism" target="_blank">Prism 解析器</a>作为默认 gem 
  <ul style="margin-left:0; margin-right:0"><li>Prism 是一个可移植、容错且可维护的 Ruby 语言递归下降解析器</li></ul></li><li>Prism 已做好生产准备并积极维护，用户可以使用它代替 Ripper 
  <ul style="margin-left:0; margin-right:0"><li>具体介绍可查看&nbsp;Prism 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fruby.github.io%2Fprism%2F" target="_blank">文档</a>。</li><li>Prism 既是一个由 CRuby 内部使用的 C 库，又是一个可供任何需要解析 Ruby 代码的工具使用的 Ruby gem</li><li>Prism API 中值得注意的方法有： 
    <ul style="margin-left:0; margin-right:0"><li><code class="language-plaintext">Prism.parse(source)</code>返回 AST 作为解析结果对象的一部分</li><li><code class="language-plaintext">Prism.parse_comments(source)</code>返回&nbsp;comments</li><li><code class="language-plaintext">Prism.parse_success?(source)</code>如果没有错误，则返回 true</li></ul></li></ul></li><li>现在可以使用<code class="language-plaintext">ruby --parser=prism</code>或<code class="language-plaintext">RUBYOPT="--parser=prism"</code>尝试使用&nbsp; Prism 编译器。值得注意的是，该 flag 仅用于调试。</li></ul><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong><span style="color:#000000"><span style="background-color:#ffffff">使用 Lrama 代替 Bison</span></span></strong></h4><ul style="margin-left:0; margin-right:0"><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fruby%2Flrama" target="_blank">用 Lrama LALR 解析器生成器</a>替换 Bison&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.ruby-lang.org%2Fissues%2F19637" target="_blank">[Feature #19637]</a><ul style="margin-left:0; margin-right:0"><li>更多详情可参阅<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frubykaigi.org%2F2023%2Fpresentations%2Fspikeolaf.html" target="_blank">Ruby Parser 的未来愿景</a></li><li>为了便于维护，Lrama 内部解析器被替换为 Racc 生成的 LR 解析器</li><li>支持参数化规则<code class="language-plaintext">(?, *, +)</code>，将在 Ruby parse.y 中使用</li></ul></li></ul><h4 style="margin-left:0px; margin-right:0px; text-align:left"><span style="color:#000000"><strong><span style="background-color:#ffffff">YJIT</span></strong></span></h4><ul style="margin-left:0; margin-right:0"><li>相对 Ruby 3.2 的主要性能改进 
  <ul style="margin-left:0; margin-right:0"><li>对 splat 和 rest 参数的支持已得到改进。</li><li>为虚拟机的堆栈操作分配了寄存器。</li><li>编译更多带有可选参数的调用。异常处理程序也被编译。</li><li>不支持的调用类型和<span style="background-color:#ffffff; color:#333333">复态调用点</span>不再退出到解释器。</li><li>Rails <code class="language-plaintext">#blank?</code>和 specialized<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fpull%2F49909" target="_blank"><code class="language-plaintext">#present?</code></a>等基本方法都是内联的。</li><li>对<code class="language-plaintext">Integer#*</code>、<code class="language-plaintext">Integer#!=</code>、<code class="language-plaintext">String#!=</code>、<code class="language-plaintext">String#getbyte</code>、&nbsp;<code class="language-plaintext">Kernel#block_given?</code>、<code class="language-plaintext">Kernel#is_a?</code>、<code class="language-plaintext">Kernel#instance_of?</code>和<code class="language-plaintext">Module#===</code>进行了特别优化。</li><li>编译速度现在比 Ruby 3.2 稍快。</li><li>现在比 Optcarrot 上的解释器快 3 倍以上</li></ul></li><li>与 Ruby 3.2 相比显着提高了内存使用率 
  <ul style="margin-left:0; margin-right:0"><li>编译代码的元数据占用内存更少。</li><li>当应用程序的 ISEQ 超过 40,000 个时，<code class="language-plaintext">--yjit-call-threshold</code>会自动从 30 提高到 120。</li><li>添加<code class="language-plaintext">--yjit-cold-threshold</code>以跳过编译 cold&nbsp;ISEQ。</li><li>在 Arm64 上生成更紧凑的代码。</li></ul></li><li>Code GC 现在默认禁用 
  <ul style="margin-left:0; margin-right:0"><li><code class="language-plaintext">--yjit-exec-mem-size</code>被视为新代码编译停止的硬限制。</li><li>不会因 Code GC&nbsp;导致性能突然下降。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshopify%2Fpitchfork" target="_blank">使用 Pitchfork</a>&nbsp;重新分叉的服务器上有更好的 copy-on-write&nbsp;行为&nbsp;。</li><li>如果需要，仍然可以使用<code class="language-plaintext">--yjit-code-gc</code>启用&nbsp;code GC</li></ul></li><li>添加<code class="language-plaintext">RubyVM::YJIT.enable</code>以便在运行时启用 YJIT 
  <ul style="margin-left:0; margin-right:0"><li>无需修改​​命令行参数或环境变量即可启动 YJIT。Rails 7.2 将使用此方法<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fpull%2F49947" target="_blank">默认启用 YJIT</a>&nbsp;。</li><li>这也可用于仅在应用程序完成启动后启用 YJIT。如果想在启动时禁用 YJIT 的同时使用其他 YJIT 选项，可以使用<code class="language-plaintext">--yjit-disable</code>。</li></ul></li><li>默认情况下提供更多 YJIT stats 
  <ul style="margin-left:0; margin-right:0"><li>现在默认情况下还提供了<code class="language-plaintext">yjit_alloc_size</code>和更多与元数据相关的统计信息。</li><li>由<code class="language-plaintext">--yjit-stats</code>生成的 <code class="language-plaintext">ratio_in_yjit</code>stat 现在可在发行版中使用，不再需要特殊的 stats 或 dev 版本才能访问大多数统计信息。</li></ul></li><li>添加更多 profiling 功能 
  <ul style="margin-left:0; margin-right:0"><li>添加<code class="language-plaintext">--yjit-perf</code>以方便使用 Linux perf 进行分析。</li><li><code class="language-plaintext">--yjit-trace-exits</code>现在支持使用<code class="language-plaintext">--yjit-trace-exits-sample-rate=N</code>进行采样</li></ul></li><li>更全面的测试和多个错误修复</li></ul><h4 style="margin-left:0px; margin-right:0px; text-align:left"><strong><span style="color:#000000"><span style="background-color:#ffffff">RJIT</span></span></strong></h4><ul style="margin-left:0; margin-right:0"><li>引入了纯 Ruby JIT 编译器 RJIT 并取代了 MJIT。 
  <ul style="margin-left:0; margin-right:0"><li>RJIT 仅支持 Unix 平台上的 x86-64 架构。</li><li>与 MJIT 不同，它在运行时不需要 C 编译器。</li></ul></li><li>RJIT 的存在仅用于实验目的。 
  <ul style="margin-left:0; margin-right:0"><li>建议用户在生产环境中继续使用 YJIT。</li></ul></li><li>如果对为开发 JIT for Ruby 感兴趣，可查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frubykaigi.org%2F2023%2Fpresentations%2Fk0kubun.html%23day3" target="_blank">k0kubun 在 RubyKaigi 第 3 天的演示</a>。</li></ul><h4 style="margin-left:0px; margin-right:0px; text-align:left"><span style="color:#000000"><strong><span style="background-color:#ffffff">M:N 线程调度器</span></strong></span></h4><ul style="margin-left:0; margin-right:0"><li>引入了 M:N 线程调度程序。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.ruby-lang.org%2Fissues%2F19842" target="_blank">[Feature#19842]</a><ul style="margin-left:0; margin-right:0"><li>M 个 Ruby 线程由 N 个本机线程（操作系统线程）管理，因此减少了线程创建和管理成本。</li><li>它可能会破坏 C 扩展兼容性，因此默认情况下会在主 Ractor 上禁用 M:N 线程调度程序。 
    <ul style="margin-left:0; margin-right:0"><li><code class="language-plaintext">RUBY_MN_THREADS=1</code>环境变量可在主 Ractor 上启用 M:N 线程。</li><li>M:N 线程始终在非主 Ractor 上启用。</li></ul></li><li><code class="language-plaintext">RUBY_MAX_CPU=n</code>环境变量用于设置<code class="language-plaintext">N</code>（本地线程的最大数量）的最大值。默认值为 8。 
    <ul style="margin-left:0; margin-right:0"><li>由于每个 Ractor 只能同时运行一个 Ruby 线程，因此将使用的本地线程数是<code class="language-plaintext">RUBY_MAX_CPU</code>中指定的线程数和正在运行的 Ractor 数量中较小的一个。因此，单 Ractor 应用程序（大多数应用程序）将只使用 1 个本地线程。</li><li>为了支持阻塞操作，可以使用<code class="language-plaintext">N</code>个以上的本地线程。</li></ul></li></ul></li></ul><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ruby-lang.org%2Fen%2Fnews%2F2023%2F12%2F25%2Fruby-3-3-0-released%2F" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 08:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272610/ruby-3-3-0-released</guid>
            <link>https://www.oschina.net/news/272610/ruby-3-3-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[fastjson 2.0.44 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#e6edf3; text-align:start"><span style="color:#000000">这又是例行的 BUG 修复小版本，大家按需升级。</span></p><h1>Issues</h1><ol><li>反序列化跳过非 String Key 的报错<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2102" target="_blank">#2102</a></li><li>兼容 fastjson 1.x new Date 格式<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2086" target="_blank">#2086</a></li><li>修复缺省序列化 springboot ResolvableType 类型 StackOverflowError 的问题<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2103" target="_blank">#2103</a></li><li>修复序列化 BigDecimal 某些场景下会报 ArrayIndexOutOfBoundsException 的问题<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2076" target="_blank">#2076</a></li><li>修复某些场景反序列化解析引用不成功的问题<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2072" target="_blank">#2072</a></li><li>修复 List 字段的@JSONField#format 不起作用的问题<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2073" target="_blank">#2073</a></li><li>修复 Kotlin 数据类 is 开头非 boolean 类型字段序列化丢失的问题<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fissues%2F2069" target="_blank">#2069</a></li></ol><h1>MAVEN 依赖配置</h1><div><pre>&lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;com.alibaba.fastjson2&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;fastjson2&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;2.0.44&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;
&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
</pre></div><ul><li>android4 兼容版本</li></ul><div><pre>&lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;com.alibaba.fastjson2&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;fastjson2&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;2.0.44.android4&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;
&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
</pre></div><ul><li>1.x 兼容版本</li></ul><div><pre>&lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;com.alibaba&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;fastjson&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;2.0.44&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;
&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
</pre></div><ul><li>Spring 5 extension 配置</li></ul><div><pre>&lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;com.alibaba.fastjson2&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;fastjson2-extension-spring5&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;2.0.44&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;
&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
</pre></div><ul><li>Spring 6 extension 配置</li></ul><div><pre>&lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;com.alibaba.fastjson2&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">groupId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;fastjson2-extension-spring6&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">artifactId</span>&gt;
    &lt;<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;2.0.44&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">version</span>&gt;
&lt;/<span style="color:var(--color-prettylights-syntax-entity-tag)">dependency</span>&gt;
</pre></div><h1>相关链接</h1><ul><li>FASTJSON 1.x 用户升级指南<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fwiki%2Ffastjson_1_upgrade_cn" target="_blank">https://github.com/alibaba/fastjson2/wiki/fastjson_1_upgrade_cn</a></li><li>相关 issues<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fmilestone%2F44" target="_blank">https://github.com/alibaba/fastjson2/milestone/44</a></li><li>代码 tag<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Ftree%2F2.0.44" target="_blank">https://github.com/alibaba/fastjson2/tree/2.0.44</a></li><li>Maven 下载<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Fcom%2Falibaba%2Ffastjson2%2Ffastjson2%2F2.0.44%2F" target="_blank">https://repo1.maven.org/maven2/com/alibaba/fastjson2/fastjson2/2.0.44/</a></li><li>Android4 兼容版本<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Fcom%2Falibaba%2Ffastjson2%2Ffastjson2%2F2.0.44.android4%2F" target="_blank">https://repo1.maven.org/maven2/com/alibaba/fastjson2/fastjson2/2.0.44.android4/</a></li><li>1.x 兼容版本<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frepo1.maven.org%2Fmaven2%2Fcom%2Falibaba%2Ffastjson%2F2.0.44%2F" target="_blank">https://repo1.maven.org/maven2/com/alibaba/fastjson/2.0.44/</a></li><li>性能测试报告<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falibaba%2Ffastjson2%2Fblob%2Fmain%2Fdocs%2Fbenchmark%2Fbenchmark_2.0.44.md" target="_blank">https://github.com/alibaba/fastjson2/blob/main/docs/benchmark/benchmark_2.0.44.md</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 08:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272608/fastjson-2-0-44-released</guid>
            <link>https://www.oschina.net/news/272608/fastjson-2-0-44-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[国内第一个开源免费电子签章系统发布了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:left"><span><span><span><span><strong><span>一、前言 &nbsp;&nbsp;</span></strong><br> &nbsp;&nbsp;&nbsp;&nbsp;<span><span>如约而至，历经一年的奋战，开放签电子签章系统于 2023 年 12 月 15 日上线发布了。</span></span><br> &nbsp;&nbsp;&nbsp;&nbsp;<span><span>开放签是国内第一个开源免费的电子签章系统，为企业构建安全、可信、可控、灵活的一站式电子签章全服务体系产品链，我们相信将电子签章技术、产品开源开放，能够为产品与用户之间带来更多信任，让电子签署更加可信、简单。</span></span><br><strong><span><span><strong>二、产品理念 &nbsp;&nbsp;</strong></span></span></strong><br> &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<strong><span><span><strong>产品的核心价值理念：让电子签署更简单。</strong></span></span></strong></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>&nbsp; &nbsp; &nbsp; &nbsp;让电子签章技术更加简单：目前，市场上掌握电子签署完整技术的开发工程师比例相对较低，同时网上相关的技术资料和工具也比较分散，很难系统性的学习和应用。所以，我们希望开放签可以将电子签章技术和工具完整的、开源的提供出来，让有技术能力的个人或团队学习或自建电子签章系统；</span></span><br><span><span>让电子签章应用更加简单：在应用层面，我们希望可以降低企业应用电子签章产品的门槛，免费下载，零采购成本使用；</span></span><br><strong><span><span><strong>三、产品矩阵和功能</strong></span></span></strong><br> &nbsp;&nbsp;&nbsp;&nbsp;<strong>&nbsp; &nbsp;&nbsp;</strong><strong><span><span><strong>基于产品理念，开放签的产品矩阵和功能如下：</strong></span></span></strong></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span>&nbsp; &nbsp; &nbsp; &nbsp;开源工具版：将电子签章的核心技术代码和工具进行开源，开源版采用更加宽松的 MIT 开源协议，且不受商业限制。产品功能包括：电子印章制作，手写签名生成，数字证书生成，PDF 文件转图片，电子签章（关键字签署、指定位置签署），文件验签等。</span></span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span><span>企业版：提供免费版本的电子签章应用系统，用户可以一键下载、部署安装，部署完成后，用户即可拥有电子签章的基本功能。支持私有化部署、多租户、SaaS 化等多种服务模式，提供在线签署、电子签章、电子印章管控、审批流程管理、数字证书服务等功能，满足电子合同、电子保单、电子报告单、招投标文件、电子成绩单、电子证明、金融凭证、会计凭证、电子处方等多种电子文件签署场景。</span></span><br> &nbsp; &nbsp; &nbsp; &nbsp;<span><span>定制版：对于比较复杂的、定制的场景需求，开放签提供本地化、深度定制化、专属技术服务，为您提供专属电子签章平台。</span></span><br><strong><span><span><strong>四、开放签产品地址</strong></span></span></strong><br><span><span>开源工具版下载地址：</span></span></span></span></span></span></p><p><a href="https://gitee.com/kaifangqian">gitee 仓库地址</a>：https://gitee.com/kaifangqian</p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.kaifangqian.com" target="_blank">产品官网地址</a>：www.kaifangqian.com</p><p><span style="background-color:#ffffff; color:#4d4d4d">开放签将始终以开源、开放的价值观持续更新系统，为用户提供更加开放、好用的电子签章系统。</span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 07:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272595</guid>
            <link>https://www.oschina.net/news/272595</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Furion 商业化探索：轻舟已过万重山，v4.9.1.15]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p><strong>两岸猿声啼不住，轻舟已过万重山。</strong></p><p><strong>所有人的看法和评价都是暂时的，只有自己的经历和成绩是伴随一生的。</strong>几乎所有的担忧和畏惧，都是来源于自己的想象，只有你真的去做了，才会发现有多快乐。</p></blockquote><p>经过为期一个月的商业化探索，Furion 收获了 1.4 万个付费用户，其中开通年付费 VIP 服务的有 519 位，同时获得了国内两家和国外一家企业超过 10 万人民币的友情赞助。NuGet 总下载量也达到了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nuget.org%2Fprofiles%2Fmonk.soul" target="_blank">1200 万</a>。</p><hr><p><strong>尽人事，听天命，事在人为。</strong></p><p>经过一个月对开源文档商业化的深入探索，我们已成功建立了一套全面且规范的流程，并在此过程中积累了丰富的经验。这些经验涵盖了流程设计、财务收款、防盗版措施、客户投诉处理、安全合规以及舆论公关等多个方面。</p><p>面对新事物和改变，人们往往会产生恐惧和不安。然而，<strong>作为互联网行业的从业者，我们不仅需要思考如何改变，更要勇于接受、拥抱并实现这些改变。</strong></p><p><strong>不论未来人们如何评价我们的这一尝试，至少在目前，我们已经为开源商业化领域开辟了一条新的道路。</strong></p><h2>本期更新</h2><ul><li><p style="margin-left:0; margin-right:0"><strong>新特性</strong></p><ul><li>[新增]<span>&nbsp;</span><code>EFCore</code><span>&nbsp;</span>数据库操作<span>&nbsp;</span><code>EntityNotTenant</code><span>&nbsp;</span>和<span>&nbsp;</span><code>EntityBaseNotTenant</code><span>&nbsp;</span>实体基类<span>&nbsp;</span>4.9.1.11<span>&nbsp;</span>⏱️2023.12.04<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/b62bfb1a18d57f7fe3dd9548aa02372025dfed85">b62bfb1</a></li><li>[新增] 控制枱日志支持启动时同步<span>&nbsp;</span><code>ConsoleFormatterExtendOptions</code><span>&nbsp;</span>配置<span>&nbsp;</span>4.9.1.10<span>&nbsp;</span>⏱️2023.12.04<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/a96fe08336dbf99b7cf5cc5e6ec304adf7413a4b">a96fe08</a></li><li>[新增] 定时任务支持取消正在运行的作业程序<span>&nbsp;</span>4.9.1.9<span>&nbsp;</span>⏱️2023.12.03<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/3cc9be0da1eabc0f3baaa7801b115bb2909bb085">3cc9be0</a></li><li>[新增]<span>&nbsp;</span><code>JSON.IsValid(jsonString)</code><span>&nbsp;</span>判断<span>&nbsp;</span><code>JSON</code><span>&nbsp;</span>字符串有效性<span>&nbsp;</span>4.9.1.8<span>&nbsp;</span>⏱️2023.11.30<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/22bc69bd4a445f81833c082da7c99f4a5c518012">22bc69b</a></li><li>[新增]<span>&nbsp;</span><code>axios-utils.ts</code><span>&nbsp;</span>解析<span>&nbsp;</span><code>token</code><span>&nbsp;</span>信息导出方法<span>&nbsp;</span>4.9.1.7<span>&nbsp;</span>⏱️2023.11.29<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/ae8c3e8c47494fa3ba37d2b076d54f9f2c016252">ae8c3e8</a></li><li>[新增] 规范化处理自动过滤<span>&nbsp;</span><code>SSE</code><span>&nbsp;</span>请求、文件请求、图片请求<span>&nbsp;</span>4.9.1.6<span>&nbsp;</span>⏱️2023.11.22<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I8IP6D">#I8IP6D</a></li><li>[新增]<span>&nbsp;</span><code>[AppDbContext]</code><span>&nbsp;</span>特性支持<span>&nbsp;</span><code>UseSnakeCaseNaming</code><span>&nbsp;</span>属性配置表名使用蛇形命名<span>&nbsp;</span>4.9.1.5<span>&nbsp;</span>⏱️2023.11.20<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I8HGR2">#I8HGR2</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/863">!863</a></li><li>[新增] 时间戳模型绑定器将时间戳转换为<span>&nbsp;</span><code>DateTime/DateTimeOffset</code><span>&nbsp;</span>类型<span>&nbsp;</span>4.9.1.5<span>&nbsp;</span>⏱️2023.11.20<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/df3053cf081d5e4d8eb63d567ed95c45267e0969">df3053c</a></li><li>[新增]<span>&nbsp;</span><code>Newtonsoft.Json</code><span>&nbsp;</span>自动将时间戳转换为<span>&nbsp;</span><code>DateTime/DateTimeOffset</code><span>&nbsp;</span>类型<span>&nbsp;</span>4.9.1.3<span>&nbsp;</span>⏱️2023.11.17<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/78a589d99eb5985b576e4c96acd6e4890391d6ff">78a589d</a></li><li>[新增]<span>&nbsp;</span><code>System.Text.Json</code><span>&nbsp;</span>自动将时间戳转换为<span>&nbsp;</span><code>DateTime/DateTimeOffset</code><span>&nbsp;</span>类型<span>&nbsp;</span>4.9.1.2<span>&nbsp;</span>⏱️2023.11.17<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/abd5196f5c5160a5df96dad80c7c5aa51b96d5b9">abd5196</a></li><li>[新增]<span>&nbsp;</span><code>IRepositoryFactory&lt;TEntity, TDbContextLocator&gt;</code><span>&nbsp;</span>仓储功能，解决在<span>&nbsp;</span><code>Blazor</code><span>&nbsp;</span>中使用<span>&nbsp;</span><code>EFCore</code><span>&nbsp;</span>问题<span>&nbsp;</span>4.9.1.1<span>&nbsp;</span>⏱️2023.11.16<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/4285ec0b8debc2d71c7f978126cb3dc394a8ad30">4285ec0</a><span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fzh-cn%2Faspnet%2Fcore%2Fblazor%2Fblazor-ef-core%3Fview%3Daspnetcore-7.0" target="_blank">文档说明</a></li><li>[新增] 补偿策略模块功能<span>&nbsp;</span>4.9.1<span>&nbsp;</span>⏱️2023.11.15<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/tree/v4/framework/Furion/RescuePolicy">【源码地址】</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/dfc63e7f0ffd2e03653f11a3e49a21646902ddc4">dfc63e7</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>突破性变化</strong></p><ul><li>[调整]<span>&nbsp;</span><strong>动态<span>&nbsp;</span><code>WebAPI</code><span>&nbsp;</span>生成版本控制路由规则，版本分隔符默认由<span>&nbsp;</span><code>@</code><span>&nbsp;</span>调整为<span>&nbsp;</span><code>v</code></strong><span>&nbsp;</span>4.9.1.14<span>&nbsp;</span>⏱️2023.12.14<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/7677d0fa615d3ccdf784542b5702cd1d6165e78f">7677d0f</a></li><li>[升级]<span>&nbsp;</span><code>Serilog</code><span>&nbsp;</span>拓展包依赖至<span>&nbsp;</span><code>8.0.0</code><span>&nbsp;</span>版本，<strong>移除<span>&nbsp;</span><code>.NET8.0</code><span>&nbsp;</span>的<span>&nbsp;</span><code>IWebHostBuilder.UseSerilogDefault</code><span>&nbsp;</span>拓展方法</strong><span>&nbsp;</span>4.9.1.1<span>&nbsp;</span>⏱️2023.11.16<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/5ab3e43722a298db56a86792dde301adf1f3fe7f">5ab3e43</a></li><li>[升级]<span>&nbsp;</span><strong>框架底层适配<span>&nbsp;</span><code>.NET8.0</code><span>&nbsp;</span>正式版</strong><span>&nbsp;</span>4.9.1<span>&nbsp;</span>⏱️2023.11.15</li><li>[升级]<span>&nbsp;</span><strong>框架脚手架适配<span>&nbsp;</span><code>.NET8.0</code><span>&nbsp;</span>正式版</strong><span>&nbsp;</span>4.9.1<span>&nbsp;</span>⏱️2023.11.15</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>问题修复</strong></p><ul><li>[修复] 动态<span>&nbsp;</span><code>WebAPI</code><span>&nbsp;</span>因<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/d9810bece0a1d1108e134cfdae2fdd868554f769">1dc7ea7</a><span>&nbsp;</span>提交导致<span>&nbsp;</span><code>AsLowerCamelCase</code><span>&nbsp;</span>配置失效问题<span>&nbsp;</span>4.9.1.15<span>&nbsp;</span>⏱️2023.12.20<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/d9810bece0a1d1108e134cfdae2fdd868554f769">d9810be</a></li><li>[修复] 粘土对象转换成<span>&nbsp;</span><code>Dictionary</code><span>&nbsp;</span>对象不支持递归问题<span>&nbsp;</span>4.9.1.13<span>&nbsp;</span>⏱️2023.12.11<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I8NFT4">#I8NFT4</a></li><li>[修复]<span>&nbsp;</span><code>Scoped.CreateAsync</code><span>&nbsp;</span>内部异常上层应用不能捕获问题<span>&nbsp;</span>4.9.1.12<span>&nbsp;</span>⏱️2023.12.08<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/0a89a434223c45d84b8908f6aff1bf1d7528193a">0a89a43</a></li><li>[修复]<span>&nbsp;</span><code>Scoped.CreateUowAsync</code><span>&nbsp;</span>内部异常上层应用不能捕获问题<span>&nbsp;</span>4.9.1.8<span>&nbsp;</span>⏱️2023.11.30<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/3c859e83c0ed6f07fcf191973fe465599a823224">3c859e8</a></li><li>[修复] 定时任务设置触发器<span>&nbsp;</span><code>Result</code><span>&nbsp;</span>后作业执行异常不能重置问题<span>&nbsp;</span>4.9.1.7<span>&nbsp;</span>⏱️2023.11.24<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/147215f1631f58fca900f17cca5695f9431555e5">147215f</a></li><li>[修复]<span>&nbsp;</span><code>JWTEncryption.GetJWTSettings()</code><span>&nbsp;</span>独立使用时无法获取自定义配置<span>&nbsp;</span>4.9.1.4<span>&nbsp;</span>⏱️2023.11.18<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/c045e084670a98f71d5ea5ed55ca5cbbfc981e0b">c045e08</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>文档</strong></p><ul><li>[更新] 仓储文档、<code>Db</code><span>&nbsp;</span>静态类文档、脚手架文档、<code>.NET7</code><span>&nbsp;</span>升级<span>&nbsp;</span><code>.NET8</code><span>&nbsp;</span>文档、<code>JSON</code><span>&nbsp;</span>序列化文档、<code>Docker</code><span>&nbsp;</span>部署文档、数据库上下文文档、虚拟文件文档、远程请求文档、<code>HttpContext</code><span>&nbsp;</span>文档、<code>JSON</code><span>&nbsp;</span>静态类文档、定时任务文档、数据库仓储拓展文档、数据库实体文档、规范化文档</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>贡献者</strong></p><ul><li>zuohuaijun (<a href="https://gitee.com/zuohuaijun">@zuohuaijun</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/865">!865</a></li><li>anliuty (<a href="https://gitee.com/www.fengyunmy.com">@anliuty</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/863">!863</a></li><li>风云明月 (<a href="https://gitee.com/www.fengyunmy.com">@www.fengyunmy.com</a>)<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/pulls/862">!862</a></li></ul></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 06:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272578/furion-4-9-1-15-released</guid>
            <link>https://www.oschina.net/news/272578/furion-4-9-1-15-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stellarium 23.4 发布，开源 3D 天象模拟软件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Stellarium 23.4 已发布。从 v23.1 开始，发布的版本号将显示 year.release scheme。对于 Windows，所使用的 Qt 框架版本作为包名称的一部分可见。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Stellarium 是一款免费开源 GPL（自由软件基金会 GNU 通用公共许可证）软件，它使用 OpenGL 图形接口对星空进行实时渲染。软件可以模拟肉眼、双筒望远镜和小型天文等观察天空，根据观测者所处时间和位置，计算出天空中太阳、月球、行星等天体位置，并将其精确地显示出来。还可以绘制星座、演示天文现象，如流星雨、日食和月食等。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">Stellarium 还被应用于天文馆中作为教学展示软件，作为天文爱好者星空望远镜观测辅助软件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="374" src="https://oscimg.oschina.net/oscnet/up-0aa6143a3e2a1325d21d488ecfd731d4a83.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">此版本的主要变化内容如下：</span></p><ul><li>新插件：Lens Distortion Estimator（实验性）</li><li>新天空文化：Tibetan Lunar Mansions</li><li>更改了 GUI：能够通过 normalStyle.css 更改外观</li><li>为 Windows 软件包添加了新的 MESA</li><li>添加了对 Windows/ARM64 软件包的支持</li><li>添加了对 nomenclature names 起源的支持</li><li>插件和 AstroCalc 工具的改进</li><li>macOS/ARM64 上的性能改进</li><li>以及许多小问题的修复</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>TELESCOPE USERS</strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><span style="color:#000000">已经发现并修复了基于 Qt6 版本的 TelescopeControl 插件中的一些错误。</span></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Telescope users 可检查一下问题是否已经解决。如果没有解决的话，</span>Stellarium 团队正在寻求有能力解决该问题的开发者的协助，可能会有奖励。</p><p><span style="background-color:#ffffff; color:#000000">详情可</span><span style="background-color:#ffffff; color:#333333">参阅</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstellarium.org%2Frelease%2F2023%2F12%2F23%2Fstellarium-23.4.html" target="_blank">完整的更改列表</a><span style="background-color:#ffffff; color:#333333">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 06:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272572/stellarium-23-4-released</guid>
            <link>https://www.oschina.net/news/272572/stellarium-23-4-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RuleGo v0.18.0 发布：Go 轻量级、高性能、嵌入式、可编排组件式规则引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><ul></ul><p><code>RuleGo</code> 是一个基于 <code>Go</code> 语言的轻量级、高性能、嵌入式、可编排组件式的规则引擎。也一个灵活配置和高度定制化的事件处理框架。支持异构系统数据集成，可以对输入消息进行聚合、分发、过滤、转换、丰富和执行各种动作。</p><h4>典型使用场景</h4><ul><li><strong>边缘计算：</strong> 可以在边缘服务器部署 <code>RuleGo</code>，对数据进行预处理，筛选、聚合或者计算后再上报到云端。数据的处理规则和分发规则可以通过规则链动态配置和修改，而不需要重启系统。</li><li><strong>物联网：</strong> 收集设备数据上报，经过规则链的规则判断，触发一个或者多个动作，例如：发邮件、发告警、和其他设备或者系统联动。</li><li><strong>数据分发：</strong> 可以根据不同的消息类型，调用 HTTP、MQTT 或者 gRPC 把数据分发到不同系统。</li><li><strong>应用集成：</strong> 把 <code>RuleGo</code> 当做胶水连接各种系统或者协议，例如：ssh、webhook、kafka、消息队列、数据库、chatGPT、第三方应用系统。</li><li><strong>异构系统数据集中处理：</strong> 从不同的数据源（如 MQTT、HTTP、WS、TCP/UDP 等）接收数据，然后对数据进行过滤、格式转换、然后分发到数据库、业务系统或者仪表板。</li><li><strong>高度定制化业务：</strong> 把高度定制化或者经常变化的业务解耦出来，交给 <code>RuleGo</code> 规则链进行管理。业务需求变化而不需要重启主程序。</li><li><strong>复杂业务编排：</strong> 把业务封装成自定义组件，通过 <code>RuleGo</code> 编排和驱动这些自定义的组件，业务逻辑并支持动态调整和替换。</li><li><strong>微服务编排：</strong> 通过 <code>RuleGo</code> 编排和驱动微服务，或者动态调用第三方服务处理业务，并返回结果。</li><li><strong>业务代码和业务逻辑解耦：</strong> 例如：用户积分计算系统、风控系统。</li><li><strong>自动化：</strong> 例如：流程自动化系统、营销自动化系统、对接<code>大模型</code>提取用户意图，然后触发规则链与其他系统进行联动或者进行业务处理。</li><li><strong>灵活配置和高度定制化的事件处理框架：</strong> 对不同的消息类型，进行异步或者同步的处理。</li></ul><h3>架构图</h3><p><img alt="" height="1536" src="https://oscimg.oschina.net/oscnet/up-e549bd3e4e005f5ac2031927b4ab00e516b.png" width="2149" referrerpolicy="no-referrer"></p><h3><strong>本次更新</strong></h3><p>筑牢底座，迎接 2024，本次主要增加了：</p><p>1.增加<strong>AOP</strong>(面向切面编程，Aspect Oriented Programming) 机制，它类似拦截器或者 hook 机制，但是功能更加强大和灵活。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2Fpages%2Fa1ed6c%2F" target="_blank">文档</a></p><ul><li>它允许在不修改规则链或节点的原有逻辑的情况下，对规则链的执行添加额外的行为，或者直接替换原规则链或者节点逻辑。</li><li>它允许把一些公共的行为（例如：日志、安全、规则链执行情况跟踪、组件降级、组件重试、组件缓存）从业务逻辑中分离出来。</li><li>它允许你更好地控制和扩展 RuleGo 框架。</li></ul><p>2.另外增加生产环境的可靠性验证，增加了大量的单元测试（覆盖率 92%）和性能测试测试用例（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2Fpages%2Ff60381%2F" target="_blank">链接</a>）。</p><p><strong>详细更新：</strong></p><h2>[v0.18.0] 2023/12/27</h2><ul><li>feat:增加 AOP 模块，它允许在不修改规则链或节点的原有逻辑的情况下，对规则链的执行添加额外的行为，或者直接替换原规则链或者节点逻辑。 提供以下增强点：Before Advice、After Advice、Around Advice、Start Advice、End Advice、Completed Advice、OnCreated Advice、OnReload Advice、OnDestroy Advice。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2Fpages%2Fa1ed6c%2F" target="_blank">文档</a></li><li>feat:restApiCall 节点组件，增加 SSE(Server-Sent Events) 流式请求模式，支持对接大模型接口。</li><li>feat:增加 CI 自动化测试流程。</li><li>feat:增加大量单元测试，覆盖率达到 92%。</li><li>feat:增加性能<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2Fpages%2Ff60381%2F" target="_blank">测试用例</a><span>&nbsp;</span>。</li><li>feat:sendEmail 节点组件，增加 ConnectTimeout 配置。</li><li>feat:/examples/server 示例工程，增加 -js -plugins -chain_id flags，支持启动加载 js 原生文件、插件和指定 mqtt 订阅处理规则链 ID。</li><li>fix:/examples/server 示例工程，规则链文件夹多层路径无法正常解析。</li><li>fix:/examples/server 示例工程，保存规则链，可能会出现旧规则链文件数据无法正确覆盖。</li><li>fix:metadata 可能会出现并发读写问题。</li><li>fix:规则引擎同步处理数据，有几率无法正确调用 onCompleted 回调函数。</li><li>fix:RuleChainPool nil 问题。</li><li>fix:mqtt endpoint，无法通过 header 得到主题。</li><li>refactor:onEnd 回调函数允许得到 relationType。</li><li>refactor:删除函数 Configuration.GetToString。</li><li>opt:部分组件，增强 nil 检查。</li><li>opt:dsl AdditionalInfo 字段，增加 omitempty json tag。</li><li>opt:run go fmt。</li></ul><h3>其他信息</h3><ul><li>欢迎在<span>&nbsp;</span><a href="https://gitee.com/rulego/rulego" target="_blank">Gitee</a><span>&nbsp;</span>或者<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frulego%2Frulego" target="_blank">Github</a><span>&nbsp;</span>上提交反馈或建议</li><li>如果喜欢这个项目，请给我们点个 Star</li><li>文档官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frulego.cc%2F" target="_blank">rulego.cc</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272552/rulego-0-18-0-released</guid>
            <link>https://www.oschina.net/news/272552/rulego-0-18-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[NativeScript 8.6.2 发布，跨平台原生应用框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>NativeScript 8.6.2&nbsp;<span style="background-color:#ffffff; color:#333333">现已发布。NativeScript 使用户能够直接从 JavaScript 访问&nbsp;native API。目前，该框架为丰富的移动开发提供了 iOS 和 Android 运行时，并可用于多种不同的用例。</span></p><h4 style="margin-left:0; margin-right:0; text-align:left"><strong>Bug Fixes</strong></h4><ul><li><strong>android：</strong>以编程方式正确更改输入交互模式（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10434" target="_blank">#10434</a>）（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F07d2129f9c9b387c238c9a7c2da29b5690bac986" target="_blank">07d2129</a>）</li><li><strong>android：</strong>在 TextField 中使用 nativeTextViewProtected (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10450" target="_blank">#10450</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2Fc5561d60df0fb093c88a30e072ffdc10f31015b8" target="_blank">c5561d6</a>&nbsp;)</li><li><strong>core：</strong>可继承属性更改 backstack 传播 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10438" target="_blank">#10438</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F48b1856d6cb024ee2a42082e6cf0b8923b0cd8f4" target="_blank">48b1856</a>&nbsp;)</li><li><strong>core：</strong>安全重要检查 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10455" target="_blank">#10455</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F172d3463a30cf1ee3727aaa42d6a33505332c6bf" target="_blank">172d346</a>&nbsp;)</li><li><strong>css：</strong>box-shadow 无处理 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10445" target="_blank">#10445</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F67440095f4fafd68da528e9a88e6a42a86136d9c" target="_blank">6744009</a>&nbsp;)</li><li><strong>ios：</strong>字体变化设置不适用于标签（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10429" target="_blank">#10429</a>）（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F2cf166da5974083d1f1431624a4ff06ad648913b" target="_blank">2cf166d</a>）</li><li><strong>ios：</strong>边界角度不统一（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10437" target="_blank">#10437</a>）（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2Faba3093e69004e44aa4afa1f245e7cfa3f6e7b97" target="_blank">aba3093</a>）</li><li><strong>ios：</strong>带有监听器的 ScrollView 已删除 scroll delegate（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10432" target="_blank">#10432</a>）（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F9fae9c428185ed2f99b3710e3fe16cf060bc072b" target="_blank">9fae9c4</a>）</li><li><strong>ios：</strong>shadow 不考虑 z-index (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10433" target="_blank">#10433</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F5a4bb7c38cc694a312135e44022d5a4c8dc79d1c" target="_blank">5a4bb7c</a>&nbsp;)</li><li><strong>time-picker：</strong>使用 valueChanged 正确处理小时和分钟上的 0 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10460" target="_blank">#10460</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F4762699fa19fb81a766310724ad2cf0741b105c3" target="_blank">4762699</a>&nbsp;)</li></ul><h4><strong>Features</strong></h4><ul><li><strong>core：</strong>&nbsp;initRootView 事件 (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10442" target="_blank">#10442</a>&nbsp;) (&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F82e9c67d3398c376be1641c5f23bf82a492a48c3" target="_blank">82e9c67</a>&nbsp;)</li><li><strong>core：</strong>新的<code>defaultVisualState</code> 属性选项可覆盖"normal"默认 visualState（&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fissues%2F10440" target="_blank">#10440</a>）（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Fcommit%2F31ed40c17ab6ff026dde65c786a3c8ad8e625b3b" target="_blank">31ed40c</a>）</li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNativeScript%2FNativeScript%2Freleases%2Ftag%2F8.6.2-core" target="_blank">https://github.com/NativeScript/NativeScript/releases/tag/8.6.2-core</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272551/nativescript-8-6-2-released</guid>
            <link>https://www.oschina.net/news/272551/nativescript-8-6-2-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[REBUILD 3.5.3 已经发布，高度可定制化企业管理系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>REBUILD 3.5.3 已经发布，高度可定制化企业管理系统</p><p>此版本更新内容包括：</p><p>V3.5.3 Fix Version 修订版</p><ol><li>[新增] 报表中导出 <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fadmin%2Fexcel-admin%23%25E5%258C%2585%25E5%2590%25AB%25E7%259B%25B8%25E5%2585%25B3%25E8%25AE%25B0%25E5%25BD%2595" target="_blank">相关记录</a> 支持 <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fadmin%2Fentity%2Ffield-nreference" target="_blank">多引用</a> 字段</li><li>[修复] <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fadmin%2Ftrigger%2Fdatavalidate" target="_blank">数据校验</a> 高级表达式中数字值未保持类型导致的问题</li><li>[修复] 高并发情况下可能导致的触发器不执行问题</li><li>[修复] <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fmanual%2Fmobile-h5" target="_blank">手机版</a> 使用 iPhone 无法预览视频</li><li>[优化] <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fadmin%2Ftrigger%2Fsendnotification" target="_blank">发送通知</a> 邮件内容支持 HTML</li></ol><blockquote><p>V3.5 更新详情 <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fdev%2Fchangelog" target="_blank">CHANGELOG</a></p></blockquote><blockquote><p>一键安装包 <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdownload" target="_blank">https://getrebuild.com/download</a> 安装指南 <a href="https://gitee.com/link?target=https%3A%2F%2Fgetrebuild.com%2Fdocs%2Fadmin%2Finstall" target="_blank">https://getrebuild.com/docs/admin/install</a></p></blockquote><p>详情查看：<a href="https://gitee.com/getrebuild/rebuild/releases/3.5.3">https://gitee.com/getrebuild/rebuild/releases/3.5.3</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 03:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272550/rebuild-3-5-3-released</guid>
            <link>https://www.oschina.net/news/272550/rebuild-3-5-3-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IoTOS-物联卡运营性能天花板-更新报告]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0"><span>&nbsp;&nbsp;&nbsp;&nbsp;</span><span style="color:#40485b">物联网卡国际化运营综合平台；多接口能力集成，极致同步算法、千万数据承载、国际化方案。多端系统支持、直充内充、阶梯限速、自动化运营方案、阶梯防超套、多支付方式；</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><span style="color:#0e88eb">极致同步算法 (实测数据)：</span></p><p style="margin-left:0; margin-right:0"><span style="color:#40485b">&nbsp;&nbsp;&nbsp;&nbsp;每 20 秒触发一次同步，同步时间 20 秒内，配置【服务器 4 核 8G CPU30% 卡量 600+】</span></p><p style="margin-left:0; margin-right:0"><span style="color:#40485b"><span>&nbsp; &nbsp; ToB 卡量实测 17W+,&nbsp;配置【</span><span>服务</span><span>器 2</span><span>核 8G CPU20% 内存 60%</span><span>】</span></span></p><p style="margin-left:0; margin-right:0"><span style="color:#40485b"><span>&nbsp; &nbsp; 以上举例&nbsp;纯服务器，数据库、中间件无其他终端依赖。</span></span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="margin-left:0; margin-right:0"><strong>一、发展历程</strong></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p><span style="color:inherit">2023/06/18</span></p><p>&nbsp;</p><p style="color:inherit; margin-left:0; margin-right:0"><span style="color:inherit"><strong>开源 IoTOS 开源版 PC 项目，代码开源&nbsp;</strong></span></p><p style="margin-left:0; margin-right:0">在 Gitee 发布源码，荣获，推荐项目 200 点赞</p><p style="margin-left:0; margin-right:0">&nbsp;https://gitee.com/chinaiot/iotos</p><p><span style="color:inherit">2023/07/06</span></p><p>&nbsp;</p><p style="color:inherit; margin-left:0; margin-right:0"><span style="color:inherit"><strong>开源 IoTOS-App 移动端代码，开源</strong></span></p><p style="margin-left:0; margin-right:0">针对代理的移动端卡号管理诊断多终端部署</p><p style="margin-left:0; margin-right:0">安卓/ios/h5/小程序，等</p><p><span style="color:inherit">2023/07/09</span></p><p>&nbsp;</p><p style="color:inherit; margin-left:0; margin-right:0"><span style="color:inherit"><strong>开源 IoTOS-IM 消息中间件，开源</strong></span></p><p style="margin-left:0; margin-right:0">后续作为网络及时通信中间件</p><p><span style="color:inherit">2023/10/06</span></p><p>&nbsp;</p><p style="color:inherit; margin-left:0; margin-right:0"><span style="color:inherit"><strong>IoTOS-Plus 上线</strong></span></p><p style="margin-left:0; margin-right:0">国际化套餐设计（货币汇率/套餐多类型[流量、短信、语音、话费、套餐]/语言设置）</p><p style="margin-left:0; margin-right:0">套餐直充、内部充值运营，实现</p><p><span style="color:inherit">2023/11/06</span></p><p>&nbsp;</p><p style="color:inherit; margin-left:0; margin-right:0"><span style="color:inherit"><strong>IoTOS-Plus 更新</strong></span></p><p style="margin-left:0; margin-right:0">运营方案 [阶梯限速] [阶梯防超套]&nbsp;</p><p style="margin-left:0; margin-right:0">[达量停机-日用量/月用量] 触发灵活通知&nbsp;</p><p style="margin-left:0; margin-right:0">套餐组，拓展&nbsp;</p><p style="margin-left:0; margin-right:0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实名类型、实名顺序、卡密类型、套餐详情、用量算法、提前停机、移动端公告、</p><p style="margin-left:0; margin-right:0">充值金额/赠送金额，档位</p><p style="margin-left:0; margin-right:0">套餐，拓展</p><p style="margin-left:0; margin-right:0">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无限量套餐、日租包、用量详情</p><p style="margin-left:0; margin-right:0"><span style="color:#6d67ff">2023/12/2X</span></p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="color:inherit; margin-left:0; margin-right:0"><span style="color:#6d67ff"><strong>IoTOS-Plus-App 上线</strong></span></p><p style="margin-left:0; margin-right:0">卡号绑定、多卡切换、单卡余额、余额预存</p><p style="margin-left:0; margin-right:0">支付目前适配，微信、余额，支付</p><p style="margin-left:0; margin-right:0">单卡可开启自扣费，模式</p><p style="margin-left:0; margin-right:0">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>二、成绩成果</strong></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">开源社区：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">荣获 Gitee(码云) 推荐项目，获点赞 200+</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">半年度访问 IP 地址 6000+ 拉取下载 1000+</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">演示站点演示账号，登录 IP 1600+ 登录成功次数 2000</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">社区账号：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">‘开源 IoTOS’ 公众号，关注人数 800+</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">‘开源 IoTOS’ 哔哩哔哩，投稿视频，播放量 10000+ 点赞/收藏 100+</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>三、目前商业版功能介绍</strong></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">常见物联网卡系统功能 ：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">阶梯限速、阶梯防超套、达量断网，日用量/月用量、流量包套餐内部充值运营、用量记录、智能诊断、在线信息、自动化管理推送、多支付平台接入、</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">日租包套餐、 等。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">特色功能-智能诊断高适配 API：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">依据上游 API 能力提供多 API 适配如，中国移动、中国联通、中国电信</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic2.zhimg.com/v2-4734d893a554a43a610c69d4e656e349_b.jpg" width="1080" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">(智能诊断，中国移动 )</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic3.zhimg.com/v2-45da8cb56cb1025f20ea722ef72d8fde_b.jpg" width="1080" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">(智能诊断，中国电信)</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic2.zhimg.com/v2-2eeb4dd75011c4ab11470270238f4f91_b.jpg" width="1080" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">(智能诊断，中国联通)</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">特色功能-国际化套餐汇率：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">提供套餐正负差价类型，汇率本币支付实时同步国际汇率变更售价</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">多国家地区》运营商，套餐类型【流量/短信/语音/话费/带宽，等】</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic1.zhimg.com/v2-9515361067867bf2b40efcf27335aa94_b.jpg" width="1080" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（套餐编辑，页面展示）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">特色功能-极致同步算法：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">依据目前市场未找到同配置能比较的系统。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">每 10 秒触发同步，同步时间 10 秒内，配置【服务器 4 核 8G CPU30% 卡量 600+】</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">ToB 卡量实测 17W+, 配置【服务器 2 核 8G CPU20% 内存 60%】</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">以上举例，纯服务器，数据库、中间件无其他终端依赖。(测试可直接下载开源版)</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">特色功能-安全数据加密：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">全链路请求数据加密，安全守衞您的数据资产。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">(PS: 已见过多数系统将重要通道秘钥、代理等信息全数明文加载 ‘数据裸奔’)</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic2.zhimg.com/v2-1efb1d9b9d23e9d0d2d7ce1278092bfd_b.jpg" width="1080" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">(浏览器 F12 网络[network] 请求连接，查看，请求及返回数据，是否加密)</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>四、商业版用户移动端页面预览</strong></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">商业版移动：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">将于 2023-12 底发布上线。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic4.zhimg.com/v2-199e7801b843c26e640269e7e7bd4183_b.jpg" width="413" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（首页功能）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic4.zhimg.com/v2-7b0347475d1075a4f65734e42555fd1b_b.jpg" width="421" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（我的卡号-需用户注册后方可绑定）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic2.zhimg.com/v2-2252f15692708d471e468216af8851e5_b.jpg" width="409" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（套餐充值，多支付方式展示）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic3.zhimg.com/v2-5424a4b35b36f6e39021ccd98e70764a_b.jpg" width="427" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（订单记录，套餐记录、单卡余额消费记录）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><div><img src="https://pic2.zhimg.com/v2-a8fbadd89c81328e9fe0ae0c66fc68c5_b.jpg" width="398" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（登录用户，页面，展示当前账号卡号）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>五、研发计划-2024 年</strong></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">2024-03-18 商业版增值：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">目前商业版定伙伴价 6800 年后 3-18 增值到 8800</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">（PC 端+移动端，终生升级，详细质询，微信号 iotos_top）</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">商户收款适配多商户收款自动切换：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">适配多商户号灵活收款、订单退款返还、手动校验收款</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">数据统计</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">平台财务报表[复充率、激活增长、套餐销量排行]、</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">代理排行报表</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">自动化</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">微信推送: [代理账单、统计报表、用户充值提醒、活动券发放]，App 推送</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">ToB 方面</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">流量池管理、流量池规格配置、客户账单</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">ToC 方面</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">换卡申请、流量转移、批量充值余额</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">物联网商城</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">店铺、商品分类、列表、发货、物流、评价、活动、优惠券</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">分销，等。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>六、感谢</strong></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">感谢各位关注：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">感谢各位，资源商、用户、开发者、同行，关注。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们将在新的一年中拿出新的成绩反馈给各位</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">服务宗旨</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们只作为辅助角色协作</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">不去触碰具体运营核心业务</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为企业保留自身竞争核心与商业模式</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">仅做平台不出资源。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">‘分享利润’ 打造可共同发展盈利生态，合作共赢。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">提升服务体验、加强行业落地发展；</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">尽微薄之力助力物联网行业发展。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">服务永不止步，因为有您我们的服务更有意义。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272537/iotos-app-updated</guid>
            <link>https://www.oschina.net/news/272537/iotos-app-updated</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[go-carbon v2.3.0 发布，轻量级、语义化、对开发者友好的 Golang 时间处理库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">go-carbon v2.3.0 圣诞节特别版发布，这应该是 2023 年的最后一个版本，祝大家圣诞节快乐！</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">carbon 是一个轻量级、零依赖、语义化、对开发者友好的 Golang 时间处理库，支持链式调用、农历和 gorm、xorm 等主流 orm。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">目前已被<span><span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyinggaozhen%2Fawesome-go-cn%23%25E6%2597%25A5%25E6%259C%259F%25E5%2592%258C%25E6%2597%25B6%25E9%2597%25B4" target="_blank">awesome-go-cn</a><span><span>&nbsp;</span></span>收录，如果您觉得不错，请给个 star 吧</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang-module%2Fcarbon" target="_blank">github.com/golang-module/carbon</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/golang-module/carbon" target="_blank">gitee.com/golang-module/carbon</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>更新日志</strong></p><ul><li>正式移除弃用的<code>FromStdTime</code>,<span>&nbsp;</span><code>Time2Carbon</code>,<span>&nbsp;</span><code>Carbon2Time</code><span>&nbsp;</span>方法</li><li>将 <code>ToANSICString</code><span>&nbsp;</span>方法更名为<span>&nbsp;</span><code>ToAnsicString</code></li><li>将<span>&nbsp;</span><code>CreateFromDateTime</code><span>&nbsp;</span>方法中的毫秒设置为 0</li><li>将<span>&nbsp;</span><code>CreateFromDate</code><span>&nbsp;</span>方法中的时分秒设置为 0</li><li>修复<span>&nbsp;</span><code>DiffInMonths</code><span>&nbsp;</span>方法计算错误</li><li>将<span>&nbsp;</span><code>GormDataType</code><span>&nbsp;</span>方法从<span>&nbsp;</span><code>json.go</code><span>&nbsp;</span>文件移动到<span>&nbsp;</span><code>database.go 文件</code></li><li><code>String</code><span>&nbsp;</span>方法根据设置的不同 tag 输出不同格式字符串</li><li>新增&nbsp;<code>LoadTag</code>&nbsp;方法<span style="background-color:#f6f6f6">，</span>利用反射通过设置 tag 进行 json 自定义编码和解码</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Dec 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272536/go-carbon-2-3-0-released</guid>
            <link>https://www.oschina.net/news/272536/go-carbon-2-3-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Angular v17 正式发布！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fblog.angular.io%2Fintroducing-angular-v17-4d7033312e4b" target="_blank">Introducing Angular v17</a></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">上个月是 Angular 红色盾牌诞生 13 周年。 AngularJS（注意是 AngularJS 不是 Angular，也就是 1.x 版本） 是新一波 JavaScript 框架的起点，旨在支持对丰富 Web 体验日益增长的需求。今天，我们凭借新的外观和一系列前瞻性功能，通过 v17 带领大家走向未来，为性能和开发体验奠定了新的基础。</p><div><img alt="" height="405" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225182432043-179844286.webp" width="720" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>在 v17 中，我们很高兴地介绍：</strong></p><ul><li><strong>Deferrable views 可延迟视图将性能和开发体验提升到一个新的水平，从开发预览版正式稳定</strong></li><li><strong>在</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fkrausest.github.io%2Fjs-framework-benchmark%2Fcurrent.html" target="_blank">公共基准测试</a><strong>中，通过内置控制流的循环，运行时间提高了 90%</strong></li><li><strong>混合渲染的构建速度提高了 87%，客户端渲染的构建速度提高了 67%</strong></li><li><strong>全新的外观，代表了 Angular 面向未来的特征</strong></li><li><strong>全新的互动学习教程，从简单到深入，包括在线 Playground</strong></li><li><strong>以及许多其他功能和改进！</strong></li></ul><h2>面向未来的身份</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在过去的几个版本中，Angular 的复兴一直在全力进行。我们一直在通过基于信号（signal-based）的反应性（reactivity）、hydration（水合作用）、独立组件、组合指令和许多其他功能等改进来加快势头。尽管 Angular 发展迅速，但它的品牌却未能跟上 —— 从 AngularJS 早期以来，它几乎一模一样。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><br><strong>今天，你喜爱的、经过数百万开发者考验的框架焕然一新，反映了其面向未来的开发体验和性能！</strong></p><div><div><img alt="" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225182439272-1046899011.gif" referrerpolicy="no-referrer"></div></div><h2>面向未来的文档</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">与新品牌一起，我们还为 Angular 文档开发了一个新家 — angular.dev。对于新的文档网站，我们采用了新的结构、新的指南、改进的内容，并构建了一个交互式学习之旅平台，让你可以直接在浏览器中按照自己的节奏学习 Angular 和 Angular CLI。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><br> 新的交互式学习体验由<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwebcontainers.io%2F" target="_blank">WebContainers</a><span>&nbsp;</span>提供支持，让你可以在任何现代 Web 浏览器中使用 Angular CLI 的强大功能！</p><div><div><img alt="" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225182816361-167791283.gif" referrerpolicy="no-referrer"><div>
   &nbsp;
  </div></div></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">今天，我们将推出 angular.dev 的 Beta 预览版，并计划在 v18 将其设为 Angular 的默认网站。你可以在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F665420129" target="_blank">Angular.dev 它来了</a>（原文<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fblog.angular.io%2Fannouncing-angular-dev-1e1205fa3039" target="_blank">Announcing angular.dev</a>）中了解有关 Angular 新外观和 angular.dev 的更多信息。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><br> 现在让我深入了解 v17 的功能，我们迫不及待地想告诉你！</p><h2>内置控制流</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为了改善开发体验，我们发布了新的块模板语法，通过简单的声明性 API 为你提供强大的功能。在底层，Angular 编译器将语法转换为高效的 JavaScript 指令，可以执行控制流、延迟加载等等。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们使用新的块语法来实现一个被优化的内置控制流。在进行用户研究后，我们发现许多开发人员都在使用<span>&nbsp;</span><code>*ngIf</code><span>&nbsp;</span>、<span>&nbsp;</span><code>*ngSwitch</code><span>&nbsp;</span>和<span>&nbsp;</span><code>*ngFor</code><span>&nbsp;</span>时遇到了一些困难。自 2016 年开始使用 Angular 并在过去 5 年里成为 Angular 团队的一员，我个人仍然需要查找<span>&nbsp;</span><code>*ngFor</code><span>&nbsp;</span>和<span>&nbsp;</span><code>trackBy</code><span>&nbsp;</span>的语法。在收集了社区、合作伙伴的反馈并进行用户体验研究后，我们为 Angular 开发了一个新的内置控制流！</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">内置控制流程可以：</p><ul><li>更舒适的语法，更接近 JavaScript，因此更直观，需要更少的文档查找</li><li>得益于优化的类型收窄（type narrowing），可以进行更好的类型检查</li><li>这是一个主要存在于构建时的概念，它可以减少运行时占用空间（使其「消失」），从而可以将你的包大小减少多达 30 KB，并进一步提高你的 Core Web Vital 分数</li><li>它会自动在你的模板中可用，无需额外导入，过去的结构型指令需要在 common 模块导入 NgIf、NgFor 等</li><li>稍后会介绍显著的性能提升</li></ul><h2>条件语句</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">让我们看一下与<code>*ngIf</code>的比较：</p><div><pre><code class="language-html"><span>&lt;</span><span style="color:#093e8b">div</span><span style="color:#d95350">*</span><span style="color:#1772f6">ngIf</span><span>=</span><span style="color:#d95350">"loggedIn; else anonymousUser"</span><span>&gt;</span>
  The user is logged in
<span>&lt;/</span><span style="color:#093e8b">div</span><span>&gt;</span><span>&lt;</span><span style="color:#093e8b">ng-template</span><span style="color:#d95350">#</span><span style="color:#1772f6">anonymousUser</span><span>&gt;</span>
  The user is not logged in
<span>&lt;/</span><span style="color:#093e8b">ng-template</span><span>&gt;</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">使用内置 if 语句，此条件将如下所示：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>if</span><span>(</span><span>loggedIn</span><span>)</span><span>{</span><span>The</span><span>user</span><span>is</span><span>logged</span><span>in</span><span>}</span><span style="color:#d95350">@</span><span>else</span><span>{</span><span>The</span><span>user</span><span>is</span><span>not</span><span>logged</span><span>in</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">与旧版<span>&nbsp;</span><code>*ngIf</code><span>&nbsp;</span>替代方案的 else 子句相比，能够直接在<code>@else</code>中填写模板内容是一项重大简化。当前的控制流也使得<span>&nbsp;</span><code>@else if</code><span>&nbsp;</span>变得可能，过去的结构性指令是不可能做到的。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><code>*ngSwitch</code><span>&nbsp;</span>改进的效果更加明显：</p><div><pre><code class="language-js"><span>&lt;</span><span>div</span><span>[</span><span>ngSwitch</span><span>]</span><span>=</span><span style="color:#d95350">"accessLevel"</span><span>&gt;</span><span>&lt;</span><span>admin</span><span>-</span><span>dashboard</span><span>*</span><span>ngSwitchCase</span><span>=</span><span style="color:#d95350">"admin"</span><span>/&gt;</span><span>&lt;</span><span>moderator</span><span>-</span><span>dashboard</span><span>*</span><span>ngSwitchCase</span><span>=</span><span style="color:#d95350">"moderator"</span><span>/&gt;</span><span>&lt;</span><span>user</span><span>-</span><span>dashboard</span><span>*</span><span>ngSwitchDefault</span><span>/&gt;</span><span>&lt;</span><span style="color:#d95350">/div&gt;</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">通过内置控制流，它变成：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>switch</span><span>(</span><span>accessLevel</span><span>)</span><span>{</span><span style="color:#d95350">@</span><span>case</span><span>(</span><span style="color:#d95350">'admin'</span><span>)</span><span>{</span><span>&lt;</span><span>admin</span><span>-</span><span>dashboard</span><span>/&gt;</span><span>}</span><span style="color:#d95350">@</span><span>case</span><span>(</span><span style="color:#d95350">'moderator'</span><span>)</span><span>{</span><span>&lt;</span><span>moderator</span><span>-</span><span>dashboard</span><span>/&gt;</span><span>}</span><span style="color:#d95350">@</span><span>default</span><span>{</span><span>&lt;</span><span>user</span><span>-</span><span>dashboard</span><span>/&gt;</span><span>}</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">新的控制流可以在<span>&nbsp;</span><code>@switch</code><span>&nbsp;</span>中的各个分支中实现更好的类型收窄，这在<span>&nbsp;</span><code>*ngSwitch</code><span>&nbsp;</span>结构型指令中是不可能做到的。</p><h2>内置 for 循环</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我最喜欢的更新之一是我们引入的内置 for 循环，它除了开发体验改进之外，还将 Angular 的渲染速度推向了另一个水平！</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">其基本语法是：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>for</span><span>(</span><span>user</span><span>of</span><span>users</span><span>;</span><span>track</span><span>user</span><span>.</span><span>id</span><span>)</span><span>{</span><span>{{</span><span>user</span><span>.</span><span>name</span><span>}}</span><span>}</span><span style="color:#d95350">@</span><span>empty</span><span>{</span><span>Empty</span><span>list</span><span>of</span><span>users</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们经常会在应用程序中看到由于<code>*ngFor</code>中缺少<code>trackBy</code>功能而导致的性能问题。<span>&nbsp;</span><code>@for</code>中的一些区别是 track 是强制性的，以确保快速比较性能。此外，它更容易使用，因为它只是一个表达式而不是组件类中的方法。内置的<code>@for</code>循环还具有通过可选的<span>&nbsp;</span><code>@empty</code><span>&nbsp;</span>块进行零项集合的快捷方式。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><code>@for</code><span>&nbsp;</span>语句使用了新的比较算法，并且与<span>&nbsp;</span><code>*ngFor</code><span>&nbsp;</span>相比具有更优化的实现，这使得社区框架基准测试的运行时间提高了 90%！</p><div><img alt="" height="1456" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225182921204-1508718499.webp" width="720" referrerpolicy="no-referrer"></div><h2>试一试！</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>内置控制流现已在 v17 开发者预览版中发布！</strong></p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">内置控制流的设计目标之一是实现完全自动化的迁移。要在现有项目中尝试它，请使用以下 Schematics 一键迁移：</p><div><pre><code class="language-text">ng generate @angular/core:control-flow</code></pre></div><h2>下一步是什么？</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">你已经可以使用带有最新语言服务的内置控制流，我们与 JetBrains 密切合作，以便在他们的产品中提供更好的支持。我们还与 Prettier 的<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fsosukesuzuki" target="_blank">Sosuke Suzuki<span>&nbsp;</span></a>联系，以确保 Angular 模板可以正确格式化。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">与<code>*ngIf</code>、<code>*ngFor</code>和<code>*ngSwitch</code>相比，内置控制流处理内容投影（content projection）的方式仍然存在一些差异，我们将在接下来的几个月里努力解决这些问题。除此之外，我们对内置控制流的实现和稳定性充满信心，所以你今天就可以尝试一下！我们希望将其保留在开发者预览版中，直到下一个主要版本，以便我们可以为潜在的向后不兼容问题进行修复，以防我们找到进一步增强开发体验的机会。</p><h2>延迟视图（Deferrable views）</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">现在让我们谈谈懒加载的未来！利用新的块语法，我们开发了一种新的强大机制，你可以使用它来使你的应用程序更快。在博客文章的开头，我说过可延迟视图将性能和开发体验提升到了一个新的水平，因为它们通过前所未有的舒适的实现了声明性和强大的延迟加载。</p><div><img alt="" height="603" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225182938849-2097420811.webp" width="720" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">假设你有一个博客，并且你想延迟加载用户评论列表。目前，你必须使用<span>&nbsp;</span><code>ViewContainerRef</code><span>&nbsp;</span>，同时还要管理清理、管理加载错误、显示占位符等一系列复杂的问题。处理各种极端情况可能会产生一些复杂代码，这将很难测试和调试。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">新的可延迟视图允许你使用一行声明性代码延迟加载评论列表及其所有的依赖项：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>defer</span><span>{</span><span>&lt;</span><span>comment</span><span>-</span><span>list</span><span>/&gt;</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">最令人难以置信的部分是，这一切都是通过编译时转换发生的：Angular 通过查找<span>&nbsp;</span><code>@defer</code><span>&nbsp;</span>块内部使用的组件、指令和管道、生成动态导入并管理加载过程来抽象所有复杂性以及状态之间的切换。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">当某个 DOM 元素进入视口时开始延迟加载组件涉及许多更重要的逻辑和<code>IntersectionObserver</code><span>&nbsp;</span>API。<span>&nbsp;</span><strong>Angular 使使用<code>IntersectionObservers</code>就像添加可延迟视图触发器一样简单！</strong></p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>defer</span><span>(</span><span>on</span><span>viewport</span><span>)</span><span>{</span><span>&lt;</span><span>comment</span><span>-</span><span>list</span><span>/&gt;</span><span>}</span><span style="color:#d95350">@</span><span>placeholder</span><span>{</span><em>&lt;!--</em><span>A</span><span>placeholder</span><span>content</span><span>to</span><span>show</span><span>until</span><span>the</span><span>comments</span><span>load</span><span>--&gt;</span><span>&lt;</span><span>img</span><span>src</span><span>=</span><span style="color:#d95350">"comments-placeholder.png"</span><span>&gt;</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在上面的示例中，Angular 首先渲染占位符块的内容。当它在可视窗（viewport）中可见时，<span>&nbsp;</span><code>&lt;comment-list/&gt;</code><span>&nbsp;</span>组件就会开始加载。加载完成后，Angular 会删除占位符并渲染组件。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">还有用于加载和错误状态的块：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>defer</span><span>(</span><span>on</span><span>viewport</span><span>)</span><span>{</span><span>&lt;</span><span>comment</span><span>-</span><span>list</span><span>/&gt;</span><span>}</span><span style="color:#d95350">@</span><span>loading</span><span>{</span><span>Loading</span><span style="color:#d95350">…</span><span>}</span><span style="color:#d95350">@</span><span>error</span><span>{</span><span>Loading</span><span>failed</span><span>:</span><span>(</span><span>}</span><span style="color:#d95350">@</span><span>placeholder</span><span>{</span><span>&lt;</span><span>img</span><span>src</span><span>=</span><span style="color:#d95350">"comments-placeholder.png"</span><span>&gt;</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">就是这样！ Angular 为你管理了大量的复杂逻辑。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">可延迟视图提供了更多触发器：</p><ul><li><code>on idle</code><span>&nbsp;</span>- 当浏览器不做任何繁重的工作时延迟加载块</li><li><code>on immediate</code><span>&nbsp;</span>— 自动开始延迟加载，不阻塞浏览器</li><li><code>on timer(&lt;time&gt;)</code><span>&nbsp;</span>— 使用计时器延迟加载</li><li><code>on viewport</code><span>&nbsp;</span>和<span>&nbsp;</span><code>on viewport(&lt;ref&gt;)</code><span>&nbsp;</span>- 可视窗还允许指定锚元素的引用。当锚元素可见时，Angular 将延迟加载组件并渲染它</li><li><code>on interaction</code><span>&nbsp;</span>和<span>&nbsp;</span><code>on interaction(&lt;ref&gt;)</code><span>&nbsp;</span>— 使你能够在用户与特定元素交互时启动延迟加载</li><li><code>on hover</code><span>&nbsp;</span>和<span>&nbsp;</span><code>on hover(&lt;ref&gt;)</code><span>&nbsp;</span>- 当用户悬停元素时触发延迟加载</li><li><code>when &lt;expr&gt;</code><span>&nbsp;</span>— 使你能够通过返回承诺的表达式指定你自己的条件</li></ul><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">可延迟视图还提供了在渲染依赖项之前预取依赖项的能力。添加预取就像向 defer 块添加<span>&nbsp;</span><code>prefetch</code><span>&nbsp;</span>语句一样简单，并且支持所有相同的触发器。</p><div><pre><code class="language-text">@defer (on viewport; prefetch on idle) {
  &lt;comment-list /&gt;
}</code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>今天，可延迟视图在 v17 的开发者预览版中可用！了解有关</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fdefer" target="_blank">本指南</a><strong>中该功能的更多信息。</strong></p><h2>下一步是什么？</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">可延迟视图已准备好使用，我们强烈鼓励你尝试一下！我们将它们保留在开发人员预览中的原因是这样我们可以收集更多反馈并在 API 中引入更改，直到我们将它们锁定为像框架的其余部分一样遵循语义版本控制。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">目前，服务器端渲染将渲染指定的占位符。一旦框架加载应用程序并对其进行水合，可延迟视图将按照我们上面描述的方式工作。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">下一步，我们将探索在服务器上渲染延迟块内的内容，并在客户端上启用部分水合。在这种情况下，客户端不会下载延迟视图的代码，直到触发器请求它。此时，Angular 将下载相关的 JavaScript 并仅对视图的这一部分进行水合。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">还将有许多令人兴奋的信号互操作性，敬请期待！</p><h2>改进的混合渲染体验</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">今天，我们通过<code>ng new</code>中的提示，使服务器端渲染 (SSR) 和静态站点生成（SSG 或预渲染）更接近开发人员：</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">这是我们长期以来一直想要做出的改变，但首先我们希望 Angular 的 SSR 开发体验充满信心。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">要不，你可以通过以下方式在新项目中启用 SSR：</p><div><pre><code class="language-text">ng new my-app --ssr</code></pre></div><div><img alt="" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225183105094-1291642340.gif" referrerpolicy="no-referrer"></div><h2>Hydration 从开发者预览版正式稳定</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在过去的 6 个月里，我们看到数千个应用程序采用了水合作用 (hydration)。<strong>今天，我们很高兴地宣布，水合作用已不再是开发者预览版，并且在所有使用服务器端渲染的新应用程序中默认启用！</strong></p><h2>新的 @angular/ssr 包</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们将 Angular Universal 仓储移至 Angular CLI 仓储库，并使服务器端渲染成为我们工具中更加不可或缺的一部分！</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">从今天开始，要向现有应用程序添加 Hybrid 渲染支持直接运行：</p><div><pre><code class="language-text">ng add @angular/ssr</code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">此命令将生成服务入口点，添加 SSR 和 SSG 构建功能，并默认启用水合。<span>&nbsp;</span><code>@angular/ssr</code><span>&nbsp;</span>提供与当前处于维护模式的<span>&nbsp;</span><code>@nguniversal/express-engine</code><span>&nbsp;</span>等效的功能。如果你使用的是 express-engine，Angular CLI 会自动将您的代码更新为<code>@angular/ssr</code><span>&nbsp;</span>。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>从旧平台迁移到最新的 Angular 混合渲染解决方案后，Virgin Media O2 的销售额增长了 112%。</strong>通过将<span>&nbsp;</span><code>NgOptimizedImage</code><span>&nbsp;</span>与带有 DOM Hydration 的 Angular SSR 结合使用，累积布局偏移平均减少了 99.4%。</p><h2>使用 SSR 部署你的应用程序</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为了进一步增强开发体验，我们与云提供商密切合作，以实现顺利部署到他们的平台。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">Firebase 现在将自动识别并以接近零配置部署你的 Angular 应用程序，并提供<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ffirebase.google.com%2Fdocs%2Fhosting%2Fframeworks%2Fangular" target="_blank">新的框架感知 CLI 提前预览</a>。</p><div><pre><code class="language-text">firebase experiments:enable webframeworks
firebase init hosting
firebase deploy</code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">framework-aware CLI 可识别 SSR、i18n、图像优化等的使用，使你能够在经济高效的无服务器基础设施上提供高性能的 Web 应用程序。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">对于那些拥有复杂 Angular monorepos 或只是喜欢本机工具的人，AngularFire 允许使用<span>&nbsp;</span><code>ng deploy</code><span>&nbsp;</span>部署到 Firebase：</p><div><pre><code class="language-text">ng add @angular/fire
ng deploy</code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为了能够普通开发人员也可以部署，我们在 Angular 的服务器端渲染中启用了 ECMAScript 模块支持，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular%2Fpull%2F50247" target="_blank">引入</a>了<span>&nbsp;</span><code>HttpClient</code><span>&nbsp;</span>的获取后端，并与 CloudFlare 合作<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdevelopers.cloudflare.com%2Fpages%2Fframework-guides%2Fdeploy-an-angular-site%2F" target="_blank">简化</a>了流程。</p><h2>新的生命周期钩子</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为了提高 Angular 的 SSR 和 SSG 的性能，从长远来看，我们希望摆脱 DOM 模拟和直接 DOM 操作。同时，在大多数应用程序的生命周期中，它们需要与元素交互以实例化第三方库、测量元素大小等。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为了实现这一点，我们开发了一组新的生命周期挂钩：</p><ul><li><code>afterRender</code><span>&nbsp;</span>— 注册一个回调函数，每次应用程序完成渲染时调用</li><li><code>afterNextRender</code><span>&nbsp;</span>— 注册一个回调函数，在下次应用程序完成渲染时调用，注意 Next 一个词表示下一次，也就是只会执行一次</li></ul><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">只有浏览器相关逻辑才会调用这些钩子，这使你能够将自定义 DOM 逻辑安全地直接插入组件中。例如，如果你想实例化图表库，可以使用<span>&nbsp;</span><code>afterNextRender</code><span>&nbsp;</span>：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>selector</span><span>:</span><span style="color:#d95350">'my-chart-cmp'</span><span>,</span><span>template</span><span>:</span><span style="color:#d95350">`&lt;div #chart&gt;{{ ... }}&lt;/div&gt;`</span><span>,</span><span>})</span><span>export</span><span>class</span><span>MyChartCmp</span><span>{</span><span style="color:#d95350">@</span><span>ViewChild</span><span>(</span><span style="color:#d95350">'chart'</span><span>)</span><span>chartRef</span><span>:</span><span>ElementRef</span><span>;</span><span>chart</span><span>:</span><span>MyChart</span><span>|</span><span>null</span><span>;</span><span>constructor</span><span>()</span><span>{</span><span>afterNextRender</span><span>(()</span><span>=&gt;</span><span>{</span><span>this</span><span>.</span><span>chart</span><span>=</span><span>new</span><span>MyChart</span><span>(</span><span>this</span><span>.</span><span>chartRef</span><span>.</span><span>nativeElement</span><span>);</span><span>},</span><span>{</span><span>phase</span><span>:</span><span>AfterRenderPhase</span><span>.</span><span>Write</span><span>});</span><span>}</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">每个钩子都支持一个阶段值（例如读取、写入），Angular 将使用该阶段值来安排回调以减少布局抖动并提高性能。</p><h2>新项目默认使用 Vite 和 esbuild</h2><div><img alt="" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225183618741-2002323503.webp" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">如果没有对 Angular CLI 的构建管道进行底层的改变，我们从一开始就无法在 Angular 中启用 SSR！</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在 v16 中，我们引入了 esbuild 和 Vite 构建的开发者预览版。从那时起，许多开发人员和一些企业合作伙伴都对其进行了试验，<strong>使他们的一些应用程序的构建时间缩短了 67%！</strong>今天，我们很高兴地宣布，新的应用程序构建器已从开发者预览版中正式稳定，并且默认为所有新应用程序启用！</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">此外，我们还更新了使用混合渲染时的构建管道。通过 SSR 和 SSG，您可以观察到<span>&nbsp;</span><strong><code>ng build</code></strong><span>&nbsp;</span>的速度提高了 87%，<span>&nbsp;</span><strong><code>ng serve</code></strong><span>&nbsp;</span>的编辑刷新循环速度提高了 80%。</p><div><img alt="" height="445" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225183719596-1185793546.webp" width="720" referrerpolicy="no-referrer"></div><p>原图是 bin 文件的动画，当前平台不支持，如果想查看进原文</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在未来的次要版本中，我们将提供原理图，以使用混合渲染（​​使用 SSG 或 SSR 进行客户端渲染）自动迁移现有项目。如果你今天想测试新的应用程序构建器，请查看我们<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fesbuild" target="_blank">文档</a>中的本指南。</p><h2>DevTools 中的依赖注入调试</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">去年，我们展示了 Angular DevTools 中依赖注入调试功能的预览。在过去的几个月里，我们实现了全新的调试 API，使我们能够插入框架的运行时并检查注入器树。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">Based on these APIs we built an inspection user interface that allows you to preview the:<br> 基于这些 API，我们构建了一个检查用户界面，允许您预览：</p><ul><li>Dependencies of your components in the component inspector<br> 组件 Inspector 中查看组件的依赖关系</li><li>Injector tree and dependency resolution path<br> 注入器树和依赖解析路径</li><li>Providers declared within the individual injectors<br> 在各个注入器中声明的提供程序</li></ul><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">You can find a quick preview of the features in the animation below. Learn more about<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fdevtools" target="_blank">Angular DevTools on angular.io</a>.<br> 你可以在下面的动画中快速预览这些功能。在<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fangular.io" target="_blank"><span style="color:#3498db"><span style="background-color:transparent">http://</span></span><span>angular.io</span></a><span>&nbsp;</span>上了解有关<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fdevtools" target="_blank">Angular DevTools</a><span>&nbsp;</span>的更多信息。</p><div><div><img alt="" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225183907781-1326515808.gif" referrerpolicy="no-referrer"><div>
   &nbsp;
  </div></div></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><br> 下一步，我们将完善 UI 并致力于更好地可视化注入器层次结构、提供程序及其分辨率。</p><h2>从一开始就提供独立 API</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在过去一年半的时间里收集了独立组件、指令和管道的反馈并完善了它们的开发体验后，我们有信心从一开始就在所有新应用程序中启用它们。所有<code>ng generate</code>命令现在都将构建独立组件、指令和管道。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">与此同时，我们还重新审视了<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2FAngular.io" target="_blank"><span style="background-color:transparent; color:transparent">http://</span><span>Angular.io</span></a><span>&nbsp;</span>和 Angular.dev 的整个文档，以确保一致的学习体验、开发实践和建议。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在可预见的未来，我们将保留 NgModules，但看到新的独立 API 的好处，我们强烈建议你逐步将项目迁移到它们。我们还提供了一个示意图，可以为您自动完成大部分工作：</p><div><pre><code class="language-text">ng generate @angular/core:standalone</code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">有关更多信息，请查看我们的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fstandalone-migration" target="_blank">迁移指南</a>。</p><h2>Reactivity 的下一步</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">Angular 新的基于信号的响应式系统是我们在该框架中所做的最大转变之一。为了确保与基于 Zone.js 的变更检测的向后兼容性和互操作性，我们一直在努力制作原型并设计前进的道路。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>今天，我们很高兴地宣布 Angular Signals 从开发者预览版正式稳定</strong>。目前，我们将把<span>&nbsp;</span><code>effect</code><span>&nbsp;</span>函数保留在开发者预览中，以便我们可以进一步迭代它的语义。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在接下来的几个月中，我们将开始推出基于信号的输入、视图查询等功能。到明年 5 月，在 Angular v18 中，我们将提供许多功能来进一步改善开发人员使用 Signals 的体验。</p><h2>测试的下一步</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们正在继续试验 Jest，并确保我们构建一个高性能、灵活且直观的解决方案，满足开发人员的需求。我们还开始尝试 Web Test Runner，并为初始实施提供了一个<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular-cli%2Fpull%2F25860" target="_blank">PR</a>。在不久的将来，我们可能会首先关注 Web Test Runner，以解锁那些渴望摆脱 Karma 的项目。</p><h2>Material 3 的下一步</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们一直在与 Google 的 Material Design 团队努力合作，重构 Angular Material 的内部结构，以纳入<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fm3.material.io%2Ffoundations%2Fdesign-tokens%2Foverview" target="_blank">design tokens</a>，该系统将为组件提供更多的自定义选项并启用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fm3.material.io%2F" target="_blank">Material 3</a><span>&nbsp;</span>支持。虽然我们还没有准备好为 v17 提供 design token 和 M3 支持，但我们预计很快会在 v17 小版本中提供这些功能。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在 2022 年第四季度，我们宣布推出基于 MDC 的新 Angular Material 组件，并弃用具有相同功能但 DOM 结构和样式不同的旧组件。我们在 v15 中弃用了旧组件，并将在 v17 中删除。即使它们不属于 Angular Material v17 包的一部分，你仍然可以将应用程序更新到 Angular v17 并使用 v16 Angular Material 包。在 v18 之前，这将是一个选项，之后 Angular Material v16 将不再与较新版本的 Angular 兼容。我们还与<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.herodevs.com%2Fsupport" target="_blank">HeroDevs</a><span>&nbsp;</span>的合作伙伴合作，他们将提供无休止的付费支持，以防你暂时无法执行迁移。</p><h2>生活质量提升</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">除了所有这些面向未来的功能之外，我们还从待办事项中提供了一系列较小的开发人员体验增强功能！</p><h2>实验性视图转换支持</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fweb-platform%2Fview-transitions%2F" target="_blank">View Transitions API</a><span>&nbsp;</span>可在更改 DOM 时实现平滑转换。在 Angular 路由器中，我们现在通过<span>&nbsp;</span><code>withViewTransitions</code><span>&nbsp;</span>功能提供对此 API 的直接支持。使用此功能，不可以使用浏览器的本机功能在路线之间创建动画过渡。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">你现在可以通过在应用启动时通过路由器的提供程序声明配置此功能来将此特性添加到你的应用程序中：</p><div><pre><code class="language-js"><span>bootstrapApplication</span><span>(</span><span>App</span><span>,</span><span>{</span><span>providers</span><span>:</span><span>[</span><span>provideRouter</span><span>(</span><span>routes</span><span>,</span><span>withViewTransitions</span><span>()),</span><span>]</span><span>});</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><code>withViewTransitions</code><span>&nbsp;</span>接受带有属性<span>&nbsp;</span><code>onViewTransitionCreated</code><span>&nbsp;</span>的可选配置对象，这是一个为你提供一些额外控制的回调：</p><ul><li>决定是否要跳过特定动画</li><li>向 Document 添加 Class 以自定义动画并在动画完成时删除这些 Class</li><li>等等。</li></ul><h2>图像指令中的自动预连接</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">Angular 图像指令现在会自动为你作为参数提供给图像加载器的域生成预连接链接。如果图像指令无法自动识别源并且未检测到 LCP 图像的预连接链接，它将在开发过程中发出警告。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fimage-directive" target="_blank">图像指令指南中</a>了解有关此功能的更多信息。</p><h2>延迟加载动画模块</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">此功能可以使你的初始捆绑包（压缩后的 16KB）减少 60KB。社区贡献者<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2FJeanMeche" target="_blank">Matthieu Riegler</a><span>&nbsp;</span>提出并实现了一项功能，允许你通过异步提供程序函数延迟加载动画模块：</p><div><pre><code class="language-js"><span>import</span><span>{</span><span>provideAnimationsAsync</span><span>}</span><span>from</span><span style="color:#d95350">'@angular/platform-browser/animations-async'</span><span>;</span><span>bootstrapApplication</span><span>(</span><span>RootCmp</span><span>,</span><span>{</span><span>providers</span><span>:</span><span>[</span><span>provideAnimationsAsync</span><span>()]</span><span>});</span></code></pre></div><h2>输入值变换</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">常见的模式是具有接收布尔输入的组件。然而，这对如何将值传递给此类组件设置了限制。例如，如果我们对 Expander 组件有以下定义：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>standalone</span><span>:</span><span>true</span><span>,</span><span>selector</span><span>:</span><span style="color:#d95350">'my-expander'</span><span>,</span><span>template</span><span>:</span><span style="color:#d95350">`…`</span><span>})</span><span>export</span><span>class</span><span>Expander</span><span>{</span><span style="color:#d95350">@</span><span>Input</span><span>()</span><span>expanded</span><span>:</span><span>boolean</span><span>=</span><span>false</span><span>;</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">...我们尝试将其用作：</p><div><pre><code class="language-js"><span>&lt;</span><span>my</span><span>-</span><span>expander</span><span>expanded</span><span>/&gt;</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">你会得到一个错误「字符串不能分配给布尔值」。输入值转换允许你通过配置输入装饰器来解决此问题：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>standalone</span><span>:</span><span>true</span><span>,</span><span>selector</span><span>:</span><span style="color:#d95350">'my-expander'</span><span>,</span><span>template</span><span>:</span><span style="color:#d95350">`…`</span><span>})</span><span>export</span><span>class</span><span>Expander</span><span>{</span><span style="color:#d95350">@</span><span>Input</span><span>({</span><span>transform</span><span>:</span><span>booleanAttribute</span><span>})</span><span>expanded</span><span>:</span><span>boolean</span><span>=</span><span>false</span><span>;</span><span>}</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">可以在 GitHub 上找到原始功能请求 - 作为 HTML<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular%2Fissues%2F14761" target="_blank">二进制属性的布尔属性</a>和<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular%2Fissues%2F14761" target="_blank">作为 HTML 二进制属性的布尔属性。</a></p><h2>作为字符串的 styles 和 styleUrls</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">Angular 组件支持每个组件多个样式表。然而，绝大多数情况下，当我想要设置组件的样式时，我会创建一个数组，其中包含指向内联样式或引用外部样式表的单个元素。一项新功能使你你可以切换</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>styles</span><span>:</span><span>[</span><span style="color:#d95350">`
</span><span style="color:#d95350">    ...
</span><span style="color:#d95350">  `</span><span>]</span><span>})</span><span>...</span><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>styleUrls</span><span>:</span><span>[</span><span style="color:#d95350">'styles.css'</span><span>]</span><span>})...</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">到更简单、更符合逻辑：</p><div><pre><code class="language-js"><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>styles</span><span>:</span><span style="color:#d95350">`
</span><span style="color:#d95350">    ...
</span><span style="color:#d95350">  `</span><span>})</span><span>...</span><span style="color:#d95350">@</span><span>Component</span><span>({</span><span>styleUrl</span><span>:</span><span style="color:#d95350">'styles.css'</span><span>})</span><span>...</span></code></pre></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">当你使用数组时，我们仍然支持多个样式表。这更简单，更直观，并且与自动格式化工具配合使用效果更好。</p><h2>社区原理图 Schematics</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">为了支持社区原理图的开发，我们提供了一些实用方法作为<span>&nbsp;</span><code>@schematics/angular/utility</code><span>&nbsp;</span>的一部分。现在，你可以将表达式直接导入到 Angular 应用程序的根目录中，并将提供程序添加到 Angular 应用程序的根目录中，以及向<span>&nbsp;</span><code>package.json</code><span>&nbsp;</span>添加依赖项的现有功能。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">你可以在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular.io%2Fguide%2Fschematics-for-libraries" target="_blank">文档中的原理图指南</a>中了解更多信息。</p><h2>Angular 开发者培训</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们与交互式 EdTech 平台 SoloLearn 合作，基于我们最近开发的「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.youtube.com%2Fwatch%253Fv%253DxAT0lHYhHMY%2526list%253DPL1w1q3fL4pmj9k1FrJ3Pe91EPub2_h4jF" target="_blank">Angular 介绍</a>」课程开发了新的 Angular 培训。他们创建了一个互动学习之旅，在过去两个月内覆盖了超过 7 万人！</p><div><img alt="" height="405" src="https://img2023.cnblogs.com/blog/999445/202312/999445-20231225183954852-1286944851.webp" width="720" referrerpolicy="no-referrer"></div><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">请在我们<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fblog.angular.io%2Fnew-free-interactive-angular-course-for-beginners-on-sololearn-7a4c4f91810a" target="_blank">最近的公告中</a>了解更多信息。</p><h2>社区亮点</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start"><strong>我们要感谢 346 位贡献者，是他们让 Angular v17 变得如此特别！</strong>我们想列出的一些亮点：</p><ul><li><code>HttpClient</code><span>&nbsp;</span>now can<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular%2Fpull%2F50247" target="_blank">use fetch as a backend</a><span>&nbsp;</span>which is one of the features enabling Angular to run in an edge worker. We’d like to thank to<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2FJeanMeche" target="_blank">Matthieu Riegler</a><span>&nbsp;</span>for the help<br><code>HttpClient</code><span>&nbsp;</span>现在可以<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular%2Fpull%2F50247" target="_blank">使用 fetch 作为后端</a>，这是使 Angular 能够在 edge 工作线程中运行的功能之一。我们要感谢 Matthieu Riegler 的帮助</li><li>Matthieu 还启用了<span>&nbsp;</span><code>HttpTransferCache</code><span>&nbsp;</span>的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular%2Fpull%2F52029" target="_blank">自定义</a>，它允许为 post 请求指定标头、过滤器和缓存</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fcexbrayat" target="_blank">Cédric Exbrayat</a><span>&nbsp;</span>在新的应用程序构建器中引入了对<span>&nbsp;</span><code>namedChunks</code><span>&nbsp;</span>的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fangular%2Fangular-cli%2Fpull%2F25913" target="_blank">支持</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftomalaforge" target="_blank">Thomas Laforge</a><span>&nbsp;</span>的<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fangular-challenges.vercel.app%2F" target="_blank">Angular Challenges</a><span>&nbsp;</span>是一个优秀的资源，一直在帮助 Angular 开发人员更上一层楼</li><li>AnalogJS 一直在稳步发展并接近 1.0。祝贺<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fbrandonroberts" target="_blank">Brandon Roberts</a><span>&nbsp;</span>所做的出色工作！</li><li>祝贺<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fsantoshyadavdev" target="_blank">Santosh Yadav</a><span>&nbsp;</span>的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fwww.youtube.com%2Fwatch%253Fv%253D3qBXWUpoPHo" target="_blank"><span>&nbsp;</span>Angular 初学者课程</a>浏览量达到 100 万次</li></ul><h2>用 Angular 构建未来</h2><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在过去的六个月里，我们一直在继续 Angular 的复兴，发布了一些功能，以提供更好的开发体验和性能。今天，我们很高兴在 Angular 的全新品牌和<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fangular.dev%2F" target="_blank">angular.dev</a>.学习体验中体现出这一势头。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">在下一个发布周期中，预计 Angular 基于信号的响应式、Hybrid 渲染和学习之旅将发生大量演变。</p><p style="color:#191b1f; margin-left:0; margin-right:0; text-align:start">我们很荣幸能够成为你使用 Angular 构建未来的旅程的一部分！谢谢你！</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Dec 2023 10:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272640/angular-17-released</guid>
            <link>https://www.oschina.net/news/272640/angular-17-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
