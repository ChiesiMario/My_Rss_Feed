<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-软件更新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="https://rsshub.app/oschina/news/project" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-软件更新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 09 Nov 2023 01:30:33 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[EasyGoAdmin 敏捷开发框架 GoFrame+AntdVue 版本 v2.0.0 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">v2.0.0 更新内容：</span><br><span style="background-color:#ffffff; color:#333333">1、重新菜单模块和菜单表数据；</span><br><span style="background-color:#ffffff; color:#333333">2、划分权限功能，不同账号根据角色权限获取不同的菜单；</span><br><span style="background-color:#ffffff; color:#333333">3、修复用户已反馈的 BUG；</span><br><span style="background-color:#ffffff; color:#333333">4、新增版权和免责声明；</span></p><p><span style="background-color:#ffffff; color:#40485b">一款 Go 语言基于 GoFrame、Vue3、AntDesign、MySQL 等框架精心打造的一款模块化、插件化、高性能的前后端分离架构敏捷开发框架，可快速搭建前后端分离后台管理系统，本着简化开发、提升开发效率的初衷，框架自研了一套个性化的组件，实现了可插拔的组件式开发方式，同时为了敏捷快速开发，框架特地集成了代码生成器，完全自主研发了自定义 GO 后端服务模板和前端 Vue 自定义模板，可以根据已建好的表结构，可以快速的一键生成整个模块的所有代码和增删改查等等功能业务，真正实现了低代码开发方式，极大的节省了人力成本的同时提高了开发效率，缩短了研发周期，是一款真正意义上实现组件化、可插拔式的敏捷开发框架。</span></p><h2>软件信息</h2><ul><li>软件名称：EasyGoAdmin 敏捷开发框架 GoFrame+AntdVue 版本</li><li>官网网址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.easygoadmin.vip" target="_blank">https://www.easygoadmin.vip</a></li><li>文档网址：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdocs.goframe.antdvue.easygoadmin.vip" target="_blank">http://docs.goframe.antdvue.easygoadmin.vip</a></li><li>演示地址：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmanage.goframe.antdvue.easygoadmin.vip" target="_blank">http://manage.goframe.antdvue.easygoadmin.vip</a></li></ul><h2>版本说明</h2><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#40485b; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Helvetica,Arial,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Liberation Sans&quot;,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,&quot;Hiragino Sans GB&quot;,&quot;Wenquanyi Micro Hei&quot;,&quot;WenQuanYi Zen Hei&quot;,&quot;ST Heiti&quot;,SimHei,SimSun,&quot;WenQuanYi Zen Hei Sharp&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:635px; word-break:initial; word-spacing:0px"><tbody><tr><th>版本名称</th><th>版本说明</th><th>版本地址</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">GoFrame+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 GoFrame、Layui 等框架研发</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_GoFrame_Layui">https://gitee.com/easygoadmin/EasyGoAdmin_GoFrame_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Beego+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Beego、Layui 等框架研发</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Beego_Layui">https://gitee.com/easygoadmin/EasyGoAdmin_Beego_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Gin+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Gin、Layui 等框架研发</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Gin_Layui">https://gitee.com/easygoadmin/EasyGoAdmin_Gin_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Iris+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Iris、Layui 等框架研发</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Iris_Layui">https://gitee.com/easygoadmin/EasyGoAdmin_Iris_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Echo+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Echo、Layui 等框架研发</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Echo_Layui">https://gitee.com/easygoadmin/EasyGoAdmin_Echo_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Revel+Layui 混编版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Revel、Layui 等框架研发</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Revel_Layui">https://gitee.com/easygoadmin/EasyGoAdmin_Revel_Layui</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">GoFrame+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 GoFrame、Vue、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_GoFrame_EleVue">https://gitee.com/easygoadmin/EasyGoAdmin_GoFrame_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Beego+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Beego、Vue、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Beego_EleVue">https://gitee.com/easygoadmin/EasyGoAdmin_Beego_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Gin+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Gin、Vue、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Gin_EleVue">https://gitee.com/easygoadmin/EasyGoAdmin_Gin_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Iris+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Iris、Vue、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Iris_EleVue">https://gitee.com/easygoadmin/EasyGoAdmin_Iris_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Echo+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Echo、Vue、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Echo_EleVue">https://gitee.com/easygoadmin/EasyGoAdmin_Echo_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Revel+EleVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Revel、Vue、ElementUI 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Revel_EleVue">https://gitee.com/easygoadmin/EasyGoAdmin_Revel_EleVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">GoFrame+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 GoFrame、Vue、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_GoFrame_AntdVue">https://gitee.com/easygoadmin/EasyGoAdmin_GoFrame_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Beego+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Beego、Vue、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Beego_AntdVue">https://gitee.com/easygoadmin/EasyGoAdmin_Beego_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Gin+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Gin、Vue、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Gin_AntdVue">https://gitee.com/easygoadmin/EasyGoAdmin_Gin_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Iris+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Iris、Vue、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Iris_AntdVue">https://gitee.com/easygoadmin/EasyGoAdmin_Iris_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Echo+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Echo、Vue、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Echo_AntdVue">https://gitee.com/easygoadmin/EasyGoAdmin_Echo_AntdVue</a></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Revel+AntdVue 前后端分离版</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">采用 Revel、Vue、AntDesign 等框架研发前后端分离版本</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><a href="https://gitee.com/easygoadmin/EasyGoAdmin_Revel_AntdVue">https://gitee.com/easygoadmin/EasyGoAdmin_Revel_AntdVue</a></td></tr></tbody></table><h2>项目结构</h2><div><div><pre><span>├── app             // 应用目录</span><span>│   ├── controller  // 控制器</span><span>│   ├── dao         // DAO 层</span><span>│   ├── model       // 模型层</span><span>│   └── service     // 服务层</span><span>│   └── utils       // 系统工具</span><span>├── boot</span><span>├── config          // 系统配置</span><span>├── docker</span><span>├── document        // 文档目录</span><span>├── i18n            // 国际化</span><span>├── library         // 类库</span><span>├── packed</span><span>├── public          // 资源目录</span><span>├── router          // 路由</span><span>├── template        // 自定义模板</span><span>├── Dockerfile</span><span>├── go.mod</span><span>└── main.go</span></pre></div></div><h2>模块展示</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4029a1577f7991976a7956a8dfcb033d978.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 00:42:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265659</guid>
            <link>https://www.oschina.net/news/265659</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源无代码/低代码平台 NocoBase 发布 V0.14，全新的插件管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">v0.14 实现了生产环境下插件的即插即用，可以直接通过界面添加插件，支持从 npm registry（可以是私有的）下载、本地上传、URL 下载。</p><h2>新特性</h2><h3>全新的插件管理器界面</h3><p><img alt="" height="1596" src="https://blog-cn.nocobase.com/content-static/6de7c906518b6c6643570292523b06c8.png.webp" width="2994" referrerpolicy="no-referrer"></p><h3>上传的插件位于 storage/plugins 目录</h3><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">提供 storage/plugins 目录用于上传即插即用的插件，目录以 npm packages 的方式组织</p><pre><code><span><span style="color:#abb2bf">|</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/storage/</span></span><span><span style="color:#abb2bf">  |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugins/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/@nocobase/</span></span><span><span style="color:#abb2bf">      |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugin-hello1/</span></span><span><span style="color:#abb2bf">      |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugin-hello2/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/my-nocobase-plugin-hello1/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/my-nocobase-plugin-hello2/</span></span></code></pre><h3>插件的更新</h3><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">目前仅 storage/plugins 下的插件才有更新操作，如图：</p><p><img alt="" height="127050" src="https://blog-cn.nocobase.com/content-static/703809b8cd74cc95e1ab2ab766980817.gif" width="1976" referrerpolicy="no-referrer"></p><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">备注：为了便于维护和升级，避免因为升级导致 storage 插件不可用，也可以直接将新插件放到 storage/plugins 目录下，再执行升级操作</p><h2>不兼容的变化</h2><h3>插件目录变更</h3><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">开发中的插件统一都放到 packages/plugins 目录下，以 npm packages 的方式组织</p><pre><code><span><span style="color:#abb2bf"><span>|</span>- /packages/</span></span><span><span style="color:#e06c75"><span>-</span> |- /plugins/acl/</span></span><span><span style="color:#98c379"><span>+</span> |- /plugins/@nocobase/plugin-acl/</span></span><span><span style="color:#e06c75"><span>-</span> |- /samples/hello/</span></span><span><span style="color:#98c379"><span>+</span> |- /plugins/@nocobase/plugin-sample-hello/</span></span></code></pre><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">全新的目录结构为</p><pre><code><span><em># 开发中的插件</em></span><span><span style="color:#abb2bf">|</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/packages/</span></span><span><span style="color:#abb2bf">  |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugins/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/@nocobase/</span></span><span><span style="color:#abb2bf">      |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugin-hello1/</span></span><span><span style="color:#abb2bf">      |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugin-hello2/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/my-nocobase-plugin-hello1/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/my-nocobase-plugin-hello2/</span></span><span><em># 通过界面添加的插件</em></span><span><span style="color:#abb2bf">|</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/storage/</span></span><span><span style="color:#abb2bf">  |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugins/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/@nocobase/</span></span><span><span style="color:#abb2bf">      |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugin-hello1/</span></span><span><span style="color:#abb2bf">      |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/plugin-hello2/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/my-nocobase-plugin-hello1/</span></span><span><span style="color:#abb2bf">    |</span><span style="color:#61afef">-</span><span style="color:#abb2bf"></span><span style="color:#98c379">/my-nocobase-plugin-hello2/</span></span></code></pre><h3>插件名的变化</h3><ul><li>不再提供 PLUGIN_PACKAGE_PREFIX 环境变量</li><li>插件名和包名统一，旧的插件名仍然可以以别名的形式存在</li></ul><h3>pm add 的改进</h3><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">变更情况</p><pre><code><span><span style="color:#e06c75"><span>-</span> pm add sample-hello</span></span><span><span style="color:#98c379"><span>+</span> pm add @nocobase/plugin-sample-hello</span></span></code></pre><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">pm add 参数说明</p><pre><code><span><em># 用 packageName 代替 pluginName，从本地查找，找不到报错</em></span><span><span style="color:#61afef">pm</span><span style="color:#abb2bf"></span><span style="color:#98c379">add</span><span style="color:#abb2bf"></span><span style="color:#98c379">packageName</span></span><span><em># 只有提供了 registry 时，才从远程下载，也可以指定版本</em></span><span><span style="color:#61afef">pm</span><span style="color:#abb2bf"></span><span style="color:#98c379">add</span><span style="color:#abb2bf"></span><span style="color:#98c379">packageName</span><span style="color:#abb2bf"></span><span style="color:#d19a66">--registry=xx</span><span style="color:#abb2bf"></span><span style="color:#d19a66">--auth-token=yy</span><span style="color:#abb2bf"></span><span style="color:#d19a66">--version=zz</span></span><span><em># 也可以提供本地压缩包，多次 add 用最后的替换</em></span><span><span style="color:#61afef">pm</span><span style="color:#abb2bf"></span><span style="color:#98c379">add</span><span style="color:#abb2bf"></span><span style="color:#98c379">/a/plugin.zip</span></span><span><em># 远程压缩包，同名直接替换</em></span><span><span style="color:#61afef">pm</span><span style="color:#abb2bf"></span><span style="color:#98c379">add</span><span style="color:#abb2bf"></span><span style="color:#98c379">http://url/plugin.zip</span></span></code></pre><h3>Nginx 配置的变化</h3><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">新增<span>&nbsp;</span><code>/static/plugins/</code><span>&nbsp;</span>location</p><pre><code><span><span style="color:#abb2bf">server {</span></span><span><span style="color:#abb2bf">    location ^~ /static/plugins/ {</span></span><span><span style="color:#abb2bf">        proxy_pass http://127.0.0.1:13000/static/plugins/;</span></span><span><span style="color:#abb2bf">        proxy_http_version 1.1;</span></span><span><span style="color:#abb2bf">        proxy_set_header Upgrade $http_upgrade;</span></span><span><span style="color:#abb2bf">        proxy_set_header Connection 'upgrade';</span></span><span><span style="color:#abb2bf">        proxy_set_header Host $host;</span></span><span><span style="color:#abb2bf">        proxy_cache_bypass $http_upgrade;</span></span><span><span style="color:#abb2bf">        proxy_connect_timeout 600;</span></span><span><span style="color:#abb2bf">        proxy_send_timeout 600;</span></span><span><span style="color:#abb2bf">        proxy_read_timeout 600;</span></span><span><span style="color:#abb2bf">        send_timeout 600;</span></span><span><span style="color:#abb2bf">    }</span></span><span><span style="color:#abb2bf">}</span></span></code></pre><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">更多查看完整版的<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnocobase%2Fnocobase%2Fblob%2Fmain%2Fdocker%2Fnocobase%2Fnocobase.conf" target="_blank">nocobase.conf</a></p><h2>插件开发指南</h2><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs-cn.nocobase.com%2Fdevelopment%2Fyour-fisrt-plugin" target="_blank">编写第一个插件</a></p><p style="color:rgba(var(--color-text-base),var(--tw-text-opacity)) !important; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><hr><h2>NocoBase 是什么</h2><p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start">NocoBase 是一个极易扩展的开源无代码开发平台。 不必投入几年时间、数百万资金研发，花几分钟时间部署 NocoBase，马上拥有一个私有、可控、极易扩展的无代码开发平台。</p><p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start">中文官网：<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.nocobase.com%2F" target="_blank">https://cn.nocobase.com/</a></p><p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start">在线体验：<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdemo-cn.nocobase.com%2Fnew" target="_blank">https://demo-cn.nocobase.com/new</a></p><p style="color:rgba(0, 0, 0, 0.88); margin-left:0; margin-right:0; text-align:start">文档：<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs-cn.nocobase.com%2F" target="_blank">https://docs-cn.nocobase.com/</a></p><div><h2>与众不同之处</h2><h4>1. 模型驱动，「数据结构」与「使用界面」分离</h4><p style="margin-left:0; margin-right:0">多数以表单、表格或者流程驱动的无代码产品都是在使用界面上直接创建数据结构，比如 Airtable 在表格里新增一列就是新增一个字段。这样的好处是使用简单，不足是功能和灵活性受限，难以满足较复杂场景的需求。</p><p style="margin-left:0; margin-right:0">NocoBase 采用数据结构与使用界面分离的设计思路，可以为数据表创建任意数量、任意形态的区块（数据视图），每个区块里可以定义不同的样式、文案、操作。这样既兼顾了无代码的简单操作，又具备了原生开发的灵活性。</p><p style="margin-left:0; margin-right:0"><img alt="model" src="https://nocobase-file.oss-cn-beijing.aliyuncs.com/model-l.png" referrerpolicy="no-referrer"></p><h4>2. 所见即所得</h4><p style="margin-left:0; margin-right:0">NocoBase 可以开发复杂和有特色的业务系统，但这并不意味着需要复杂和专业的操作。只需一次点击，就可以在使用界面上显示出配置选项，具备系统配置权限的管理员可以用所见即所得的操作方式，直接配置用户的使用界面。</p><p style="margin-left:0; margin-right:0"><img alt="wysiwyg" src="https://nocobase-file.oss-cn-beijing.aliyuncs.com/wysiwyg.gif" referrerpolicy="no-referrer"></p><h4>3. 功能即插件</h4><p style="margin-left:0; margin-right:0">NocoBase 采用插件化架构，所有新功能都可以通过开发和安装插件来实现，扩展功能就像在手机上安装 APP 一样简单。</p><p style="margin-left:0; margin-right:0"><img alt="plugins" src="https://nocobase-file.oss-cn-beijing.aliyuncs.com/plugins-l.png" referrerpolicy="no-referrer"></p></div></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 00:36:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265658/nocobase-0-14-released</guid>
            <link>https://www.oschina.net/news/265658/nocobase-0-14-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">ONLYOFFICE 发布了 SuiteCRM 的集成连接器。现在，您可以在 SuiteCRM 文档模块中编辑和协作处理 Office 文件。继续阅读了解详情。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07162428/ONLYOFFICE-SuiteCRM-integration.png" referrerpolicy="no-referrer"></p><h2>关于 ONLYOFFICE 文档</h2><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Foffice-suite.aspx" target="_blank">ONLYOFFICE 文档</a></strong><span style="background-color:#ffffff; color:#4d4d4d">是一款全面的在线办公工具，提供了文本文档、电子表格和演示文稿的查看和编辑功能。它高度兼容微软 Office 格式，包括 .docx、.xlsx 和 .pptx 等文件格式，并支持实时协作编辑，使团队成员能够同时在同一文档上进行实时协作。</span></p><p>ONLYOFFICE 文档可与多种云服务进行集成，如：CMS 框架（WordPress/Strapi/Drupal）、协作与内容平台（ONLYOFFICE 工作区/Nextcloud/Seafile/Confluence/Alfresco）、问题跟踪工具（Jira/Redmine）、线上教育解决方案（Moodle/Chamilo/HumHub）等等。您还可将编辑器嵌入至自建 Web 服务中。</p><h2><strong>关于 SuiteCRM</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsuitecrm.com%2F" target="_blank">SuiteCRM</a>&nbsp;是一款开源的，面向企业的客户关系管理应用程序，可作为 SaaS 或本地部署使用。它有多个功能模块，用于管理和自动化销售、建立关系、吸引客户、监控业务数据等。</p><h2><strong>用于 SuiteCRM 的 ONLYOFFICE 连接器</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">利用 ONLYOFFICE 可以直接在 SuiteCRM 文档模块中查看、编辑和协作文档、工作表、幻灯片、表单和 PDF：</p><ul><li>单击该文件打开「详细信息视图」页面。</li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07155648/onlyoffice-suitecrm-files.png" referrerpolicy="no-referrer"></p><ul><li>单击「操作」下拉菜单中的「在 ONLYOFFICE 中打开」。</li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07155448/open-in-onlyoffice.png" referrerpolicy="no-referrer"></p><ul><li>该文件会在相应 ONLYOFFICE 编辑器的新选项卡中打开。</li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07160003/onlyoffice-presentation-editor-in-suitecrm.png" referrerpolicy="no-referrer"></p><h2><strong>如何安装连接器</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">要在 SuiteCRM 中处理办公文档，需要一个 ONLYOFFICE 文档实例。您可以选择<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdownload-docs.aspx" target="_blank"><u>自托管版本</u></a>或无需要下载和安装的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocs-registration.aspx" target="_blank"><u>云实例</u></a>。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">ONLYOFFICE 连接器可在<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2Fonlyoffice-suitecrm" target="_blank">GitHub</a><span>&nbsp;</span>上获取。安装请按照下列步骤操作：</p><ol><li>启动 SuiteCRM，切换到管理 -&gt; 管理工具 -&gt; 模块加载器并上传<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2Fonlyoffice-suitecrm%2Freleases" target="_blank">连接器存档</a>。</li><li>选择相应按钮，安装上传的模块。</li><li>切换到管理 -&gt; 管理工具 -&gt; 修复并运行快速修复和重建。</li></ol><h2><strong>如何配置集成</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">要配置连接器，请转至管理 -&gt; ONLYOFFICE -&gt; ONLYOFFICE 设置，设置以下参数：</p><ul><li><strong>文档编辑服务地址。</strong>输入安装的 ONLYOFFICE 文档服务器的名称或 ONLYOFFICE 文档云的地址。</li><li><strong>密钥。</strong>从 ONLYOFFICE 文档 7.2 版本开始，默认启用<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fblog%2Fzh-hans%2F2022%2F09%2Fwhat-is-jwt" target="_blank"><u>JWT</u></a>，并出于安全原因和数据完整性的原因，会自动生成密钥限制对编辑器的访问。如果需要，您可以指定自己的密钥。在这种情况下，请在 ONLYOFFICE 文档<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapi.onlyoffice.com%2Feditors%2Fsignature%2F" target="_blank"><u>配置文件</u></a>中指定相同的密钥以启用验证。</li><li><strong>授权标头。</strong></li></ul><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="用于 SuiteCRM 的 ONLYOFFICE 连接器现已推出" src="https://static-blog.onlyoffice.com/wp-content/uploads/2023/11/07155724/onlyoffice-suitecrm-settings.png" referrerpolicy="no-referrer"></p><div><h3><strong>相关链接</strong></h3><p style="color:#333333; margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FONLYOFFICE%2Fonlyoffice-suitecrm" target="_blank"><u>GitHub 上用于 SuiteCRM 的 ONLYOFFICE 连接器</u></a></p><p style="color:#333333; margin-left:0; margin-right:0">ONLYOFFICE 文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdownload-docs.aspx" target="_blank"><u>自托管版</u></a><span>&nbsp;</span>/<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fdocs-registration.aspx" target="_blank"><u>云</u><u>端</u><u>版</u></a></p><p style="color:#333333; margin-left:0; margin-right:0">最新文档更新：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fblog%2Fzh-hans%2F2023%2F10%2Fonlyoffice-docs-7-5-released" target="_blank"><u>版本 7.5</u></a></p><p style="color:#333333; margin-left:0; margin-right:0"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.onlyoffice.com%2Fzh%2Fall-connectors.aspx" target="_blank"><u>ONLYOFFICE<span>&nbsp;</span></u><u>的</u><u>所有</u><u>集成</u></a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 13:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265635</guid>
            <link>https://www.oschina.net/news/265635</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Fedora 39 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Fedora 39 已正式发布。此版本采用 Linux 6.5 内核，更新的版本将作为稳定版更新发布。</p><p><img src="https://static.oschina.net/uploads/space/2023/1108/111228_g9O6_2720166.png" referrerpolicy="no-referrer"></p><p><strong>下载地址</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fworkstation%2Fdownload%2F" target="_blank">Fedora Workstation 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fserver%2Fdownload%2F" target="_blank">Fedora Server 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fiot%2Fdownload%2F" target="_blank">Fedora IoT 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fcloud%2Fdownload%2F" target="_blank">Fedora Cloud 39</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fcoreos%2Fdownload%3Fstream%3Dnext" target="_blank">Fedora CoreOS 「next」 stream</a></li></ul><p>Fedora Workstation 39 搭载 GNOME 45 桌面环境、LibreOffice 7.6 办公套件、LLVM 17 编译器栈以及许多其他可用的更新软件包。</p><p>Fedora 39 还有各种工具链升级，如 GCC 13.2 和 GNU Binutils 2.40、Glibc 2.38 以及其他更新，如 Python 3.12 和 RPM 4.19。Fedora Onyx 也将作为 Fedora 不可变变体与 Budgie 桌面正式亮相。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d3bc4d25724768ddc84dd034104a3f7e4e9.png" referrerpolicy="no-referrer"></p><p><strong>以下是官方介绍译文：</strong></p><p>2003 年 11 月 6 日，Fedora 项目发布了 Fedora Core 1。二十年后的今天 Fedora Linux 39 正式发布，这是为台式机、笔记本电脑、服务器、云、边缘设备以及您能想到的任何其他设备打造的完整的社区操作系统。</p><p>Fedora 工作站现在采用 GNOME 45，它带来了更好的性能和许多可用性增强功能，包括一个新的工作区切换器和一个大为改进的图片查看器。</p><p>如果您正在寻找不同的桌面体验，Budgie 特别兴趣小组已经创建了 Fedora Onyx，这是一个基于 Budgie 的"原子"桌面，与 Fedora Silverblue 的精神一脉相承。</p><p>当然，这还不是全部，系统还提供了 KDE Plasma 桌面、Xfce、Cinnamon 等桌面。</p><p>Fedora 云镜像将在 Microsoft Azure（除了 Google Cloud 和 AWS 之外）正式可用。此外，我们的云镜像现在已配置为 cloud-init（由您选择）安装更新，并在首次调配时重启，这样您就可以知道您正在运行的是最新的安全更新。</p><p>一如既往，Fedora 39 更新了很多很多其他软件包，包含 gcc 13.2、binutils 2.40、glibc 2.38、gdb 13.2 和 rpm 4.19。它还更新了流行的编程语言栈，包括 Python 3.12 和 Rust 1.73。</p><p>特别值得一提的是，系统包含了 Inkscape 的最新版本，这是一款流行的矢量图形插图和绘图工具。Inkscape 昨天也满 20 周岁了。</p><p>原文：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoramagazine.org%2Fannouncing-fedora-linux-39%2F" target="_blank">https://fedoramagazine.org/announcing-fedora-linux-39/</a></u></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 02:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265540/fedora-linux-39</guid>
            <link>https://www.oschina.net/news/265540/fedora-linux-39</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Xmake v2.8.5 发布，支持链接排序和单元测试]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake" target="_blank">Xmake</a><span>&nbsp;</span>是一个基于 Lua 的轻量级跨平台构建工具。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它非常的轻量，没有任何依赖，因为它内置了 Lua 运行时。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它使用 xmake.lua 维护项目构建，相比 makefile/CMakeLists.txt，配置语法更加简洁直观，对新手非常友好，短时间内就能快速入门，能够让用户把更多的精力集中在实际的项目开发上。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们能够使用它像 Make/Ninja 那样可以直接编译项目，也可以像 CMake/Meson 那样生成工程文件，另外它还有内置的包管理系统来帮助用户解决 C/C++ 依赖库的集成使用问题。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">目前，Xmake 主要用于 C/C++ 项目的构建，但是同时也支持其他 native 语言的构建，可以实现跟 C/C++ 进行混合编译，同时编译速度也是非常的快，可以跟 Ninja 持平。</p><div><pre><code>Xmake = Build backend + Project Generator + Package Manager + [Remote|Distributed] Build + Cache
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">尽管不是很准确，但我们还是可以把 Xmake 按下面的方式来理解：</p><div><pre><code>Xmake ≈ Make/Ninja + CMake/Meson + Vcpkg/Conan + distcc + ccache/sccache
</code></pre></div><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake" target="_blank">项目源码</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxmake.io%2F%23%2Fzh-cn%2F" target="_blank">官方文档</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxmake.io%2F%23%2Fzh-cn%2Fabout%2Fcourse" target="_blank">入门课程</a></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img src="https://github.com/xmake-io/xmake-docs/raw/master/assets/img/index/package.gif" width="650px" referrerpolicy="no-referrer"></p><h2>新特性介绍</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在介绍新特性之前，我们有一个好消息要告诉大家，Xmake 最近进入了 Debian 的官方仓库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpackages.debian.org%2Fsid%2Fxmake" target="_blank">https://packages.debian.org/sid/xmake</a>， 等到明年 4 月份 Ubuntu 24.04 发布，我们应该就能直接通过<span>&nbsp;</span><code>apt install xmake</code><span>&nbsp;</span>命令去快速安装 Xmake 了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">同时也感谢 @Lance Lin 的帮助，他全程帮助我们维护并上传 Xmake 包到 Debian 仓库，真的非常感谢！</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">接下来，我们来介绍下 2.8.5 版本引入的一些改动，这个版本带来了很多的新特性，尤其是对链接排序，链接组的支持，还有对<span>&nbsp;</span><code>xmake test</code><span>&nbsp;</span>内置单元测试的支持。 另外，我们还新增了 Apple XROS 平台的构建支持，可以用于构建苹果新的 VisionOS 上的程序，还有我们还提供了更加灵活通用的<span>&nbsp;</span><code>check_sizeof</code><span>&nbsp;</span>检测接口，用于快速检测类型的大小。</p><h3>链接重排序支持</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这是一个存在了两年多的需求，主要用于调整 target 内部的链接顺序。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">由于 xmake 提供了<span>&nbsp;</span><code>add_links</code>,<span>&nbsp;</span><code>add_deps</code>,<span>&nbsp;</span><code>add_packages</code>,<span>&nbsp;</span><code>add_options</code><span>&nbsp;</span>接口，可以配置目标、依赖，包和选项中的链接，尽管<span>&nbsp;</span><code>add_links</code><span>&nbsp;</span>本身的链接顺序可以根据添加顺序来调整。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">但是 links，deps 和 packages 之间的链接顺序，只能按固定顺序生成，无法灵活调整，这对于一些复杂的项目，就有点显得力不从心了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">而我们在这个版本，彻底解决了这个问题，新增了<span>&nbsp;</span><code>add_linkorders</code><span>&nbsp;</span>接口，可用于配置目标、依赖、包、选项、链接组引入的各种链接顺序。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">更多详情和背景，请见：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F1452" target="_blank">#1452</a></p><h4>排序链接</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">为了更加灵活的调整 target 内部的各种链接顺序，我们可以通过<span>&nbsp;</span><code>add_linkorders</code><span>&nbsp;</span>这个新接口来实现，例如：</p><div><pre><code><span style="color:#000000">add_links</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><span style="color:#ff00ff">"c"</span><strong>,</strong><span style="color:#ff00ff">"d"</span><strong>,</strong><span style="color:#ff00ff">"e"</span><strong>)</strong><em>-- e -&gt; b -&gt; a</em><span style="color:#000000">add_linkorders</span><strong>(</strong><span style="color:#ff00ff">"e"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><span style="color:#ff00ff">"a"</span><strong>)</strong><em>-- e -&gt; d</em><span style="color:#000000">add_linkorders</span><strong>(</strong><span style="color:#ff00ff">"e"</span><strong>,</strong><span style="color:#ff00ff">"d"</span><strong>)</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">add_links 是配置的初始链接顺序，然后我们通过 add_linkorders 配置了两个局部链接依赖<span>&nbsp;</span><code>e -&gt; b -&gt; a</code><span>&nbsp;</span>和<span>&nbsp;</span><code>e -&gt; d</code><span>&nbsp;</span>后。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">xmake 内部就会根据这些配置，生成 DAG 图，通过拓扑排序的方式，生成最终的链接顺序，提供给链接器。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">当然，如果存在循环依赖，产生了环，它也会提供警告信息。</p><h4>排序链接和链接组</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">另外，对于循环依赖，我们也可以通过<span>&nbsp;</span><code>add_linkgroups</code><span>&nbsp;</span>配置链接组的方式也解决。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">并且<span>&nbsp;</span><code>add_linkorders</code><span>&nbsp;</span>也能够对链接组进行排序。</p><div><pre><code><span style="color:#000000">add_links</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><span style="color:#ff00ff">"c"</span><strong>,</strong><span style="color:#ff00ff">"d"</span><strong>,</strong><span style="color:#ff00ff">"e"</span><strong>)</strong><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"c"</span><strong>,</strong><span style="color:#ff00ff">"d"</span><strong>,</strong><strong>{</strong><span style="color:#000000">name</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>,</strong><span style="color:#000000">group</span><strong>=</strong><strong>true</strong><strong>})</strong><span style="color:#000000">add_linkorders</span><strong>(</strong><span style="color:#ff00ff">"e"</span><strong>,</strong><span style="color:#ff00ff">"linkgroup::foo"</span><strong>)</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果要排序链接组，我们需要对每个链接组取个名，<code><span>{</span><span>name</span><span><span>&nbsp;</span></span><span>=</span><span><span>&nbsp;</span></span><span>"foo"</span><span>}</span></code><span>&nbsp;</span>，然后就能在<span>&nbsp;</span><code>add_linkorders</code><span>&nbsp;</span>里面通过<span>&nbsp;</span><code>linkgroup::foo</code><span>&nbsp;</span>去引用配置了。</p><h4>排序链接和 frameworks</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以排序链接和 macOS/iPhoneOS 的 frameworks。</p><div><pre><code><span style="color:#000000">add_links</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><span style="color:#ff00ff">"c"</span><strong>,</strong><span style="color:#ff00ff">"d"</span><strong>,</strong><span style="color:#ff00ff">"e"</span><strong>)</strong><span style="color:#000000">add_frameworks</span><strong>(</strong><span style="color:#ff00ff">"Foundation"</span><strong>,</strong><span style="color:#ff00ff">"CoreFoundation"</span><strong>)</strong><span style="color:#000000">add_linkorders</span><strong>(</strong><span style="color:#ff00ff">"e"</span><strong>,</strong><span style="color:#ff00ff">"framework::CoreFoundation"</span><strong>)</strong></code></pre></div><h4>完整例子</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">相关的完整例子，我们可以看下：</p><div><pre><code><span style="color:#000000">add_rules</span><strong>(</strong><span style="color:#ff00ff">"mode.debug"</span><strong>,</strong><span style="color:#ff00ff">"mode.release"</span><strong>)</strong><span style="color:#000000">add_requires</span><strong>(</strong><span style="color:#ff00ff">"libpng"</span><strong>)</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"bar"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"shared"</span><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/foo.cpp"</span><strong>)</strong><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"m"</span><strong>,</strong><span style="color:#ff00ff">"pthread"</span><strong>,</strong><strong>{</strong><span style="color:#000000">whole</span><strong>=</strong><strong>true</strong><strong>})</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"foo"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"static"</span><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/foo.cpp"</span><strong>)</strong><span style="color:#000000">add_packages</span><strong>(</strong><span style="color:#ff00ff">"libpng"</span><strong>,</strong><strong>{</strong><span style="color:#000000">public</span><strong>=</strong><strong>true</strong><strong>})</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"demo"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">add_deps</span><strong>(</strong><span style="color:#ff00ff">"foo"</span><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/main.cpp"</span><strong>)</strong><span style="color:blue">if</span><span style="color:#000000">is_plat</span><strong>(</strong><span style="color:#ff00ff">"linux"</span><strong>,</strong><span style="color:#ff00ff">"macosx"</span><strong>)</strong><span style="color:blue">then</span><span style="color:#000000">add_syslinks</span><strong>(</strong><span style="color:#ff00ff">"pthread"</span><strong>,</strong><span style="color:#ff00ff">"m"</span><strong>,</strong><span style="color:#ff00ff">"dl"</span><strong>)</strong><span style="color:blue">end</span><span style="color:blue">if</span><span style="color:#000000">is_plat</span><strong>(</strong><span style="color:#ff00ff">"macosx"</span><strong>)</strong><span style="color:blue">then</span><span style="color:#000000">add_frameworks</span><strong>(</strong><span style="color:#ff00ff">"Foundation"</span><strong>,</strong><span style="color:#ff00ff">"CoreFoundation"</span><strong>)</strong><span style="color:blue">end</span><span style="color:#000000">add_linkorders</span><strong>(</strong><span style="color:#ff00ff">"framework::Foundation"</span><strong>,</strong><span style="color:#ff00ff">"png16"</span><strong>,</strong><span style="color:#ff00ff">"foo"</span><strong>)</strong><span style="color:#000000">add_linkorders</span><strong>(</strong><span style="color:#ff00ff">"dl"</span><strong>,</strong><span style="color:#ff00ff">"linkgroup::syslib"</span><strong>)</strong><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"m"</span><strong>,</strong><span style="color:#ff00ff">"pthread"</span><strong>,</strong><strong>{</strong><span style="color:#000000">name</span><strong>=</strong><span style="color:#ff00ff">"syslib"</span><strong>,</strong><span style="color:#000000">group</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">完整工程在：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fblob%2Fmaster%2Ftests%2Fprojects%2Fc%252B%252B%2Flinkorders%2Fxmake.lua" target="_blank">linkorders example</a></p><h3>链接组支持</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">另外，这个版本，我们还新增了链接组的原生支持，它目前主要用于 linux 平台的编译，仅支持 gcc/clang 编译器。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">需要注意的是 gcc/clang 里面的链接组概念主要特指：<code>-Wl,--start-group</code></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">而 Xmake 对齐进行了封装，做了进一步抽象，并且不仅仅用于处理<span>&nbsp;</span><code>-Wl,--start-group</code>，还可以处理<span>&nbsp;</span><code>-Wl,--whole-archive</code><span>&nbsp;</span>和<span>&nbsp;</span><code>-Wl,-Bstatic</code>。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">下面我们会一一对其进行讲解。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">更多详情见：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F1452" target="_blank">#1452</a></p><h4>–start-group 支持</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><code>-Wl,--start-group</code><span>&nbsp;</span>和<span>&nbsp;</span><code>-Wl,--end-group</code><span>&nbsp;</span>是用于处理复杂库依赖关系的链接器选项，确保链接器可以解决符号依赖并成功连接多个库。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 xmake 中，我们可以通过下面的方式实现：</p><div><pre><code><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><strong>{</strong><span style="color:#000000">group</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它会对应生成<span>&nbsp;</span><code>-Wl,--start-group -la -lb -Wl,--end-group</code><span>&nbsp;</span>链接选项。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果 a 和 b 库之间有符号的循环依赖，也不会报链接错误，能够正常链接成功。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">对于不支持的平台和编译，会退化成<span>&nbsp;</span><code>-la -lb</code></p><h4>–whole-archive 支持</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><code>--whole-archive</code><span>&nbsp;</span>是一个链接器选项，通常用于处理静态库。 它的作用是告诉链接器将指定的静态库中的所有目标文件都包含到最终可执行文件中，而不仅仅是满足当前符号依赖的目标文件。 这可以用于确保某些库的所有代码都被链接，即使它们在当前的符号依赖关系中没有直接引用。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">更多信息，可以参考 gcc/clang 的文档。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 xmake 中，我们可以通过下面的方式实现：</p><div><pre><code><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><strong>{</strong><span style="color:#000000">whole</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它会对应生成<span>&nbsp;</span><code>-Wl,--whole-archive -la -lb -Wl,--no-whole-archive</code><span>&nbsp;</span>链接选项。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">对于不支持的平台和编译，会退化成<span>&nbsp;</span><code>-la -lb</code></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">另外，我们可以同时配置 group/whole：</p><div><pre><code><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><strong>{</strong><span style="color:#000000">whole</span><strong>=</strong><strong>true</strong><strong>,</strong><span style="color:#000000">group</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><h4>-Bstatic 支持</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><code>-Bstatic</code><span>&nbsp;</span>也是用于编译器（如 gcc）的选项，用于指示编译器在链接时只使用静态库而不使用共享库。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">更多信息，可以参考 gcc/clang 的文档。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 xmake 中，我们可以通过下面的方式实现：</p><div><pre><code><span style="color:#000000">add_linkgroups</span><strong>(</strong><span style="color:#ff00ff">"a"</span><strong>,</strong><span style="color:#ff00ff">"b"</span><strong>,</strong><strong>{</strong><span style="color:#000000">static</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它会对应生成<span>&nbsp;</span><code>-Wl,-Bstatic -la -lb -Wl,-Bdynamic</code><span>&nbsp;</span>链接选项。</p><h3>单元测试支持</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">新版本中，我们还增加了一个内置的测试命令：<code>xmake test</code>，我们只需要在需要测试的 target 上通过 add_tests 配置一些测试用例，就可以自动执行测试。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">即使当前 target 被设置成了<span>&nbsp;</span><code>set_default(false)</code>，在执行测试的时候，xmake 也还是会先自动编译它们，然后自动运行所有的测试。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们可以先看个整体的例子，大概知道下它是怎么样子的。</p><div><pre><code><span style="color:#000000">add_rules</span><strong>(</strong><span style="color:#ff00ff">"mode.debug"</span><strong>,</strong><span style="color:#ff00ff">"mode.release"</span><strong>)</strong><span style="color:blue">for</span><span style="color:#000000">_</span><strong>,</strong><span style="color:#000000">file</span><span style="color:blue">in</span><span style="color:black">ipairs</span><strong>(</strong><span style="color:#000000">os</span><strong>.</strong><span style="color:#000000">files</span><strong>(</strong><span style="color:#ff00ff">"src/test_*.cpp"</span><strong>))</strong><span style="color:blue">do</span><span style="color:blue">local</span><span style="color:#000000">name</span><strong>=</strong><span style="color:#000000">path</span><strong>.</strong><span style="color:#000000">basename</span><strong>(</strong><span style="color:#000000">file</span><strong>)</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#000000">name</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/"</span><strong>..</strong><span style="color:#000000">name</span><strong>..</strong><span style="color:#ff00ff">".cpp"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"default"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"args"</span><strong>,</strong><strong>{</strong><span style="color:#000000">runargs</span><strong>=</strong><strong>{</strong><span style="color:#ff00ff">"foo"</span><strong>,</strong><span style="color:#ff00ff">"bar"</span><strong>}})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"pass_output"</span><strong>,</strong><strong>{</strong><span style="color:#000000">trim_output</span><strong>=</strong><strong>true</strong><strong>,</strong><span style="color:#000000">runargs</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>,</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello foo"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"fail_output"</span><strong>,</strong><strong>{</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><strong>{</strong><span style="color:#ff00ff">"hello2 .*"</span><strong>,</strong><span style="color:#ff00ff">"hello xmake"</span><strong>}})</strong><span style="color:blue">end</span></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这个例子，自动扫描源码目录下的<span>&nbsp;</span><code>test_*.cpp</code><span>&nbsp;</span>源文件，然后每个文件自动创建一个测试目标，它被设置成了<span>&nbsp;</span><code>set_default(false)</code>，也就是正常情况下，默认不会编译它们。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">但是，如果执行<span>&nbsp;</span><code>xmake test</code><span>&nbsp;</span>进行测试，它们就会被自动编译，然后测试运行，运行效果如下：</p><div><pre><code>ruki-2:test ruki<span style="color:black">$ </span>xmake <span style="color:black">test
</span>running tests ...
<strong>[</strong>  2%]: test_1/args        .................................... passed 7.000s
<strong>[</strong>  5%]: test_1/default     .................................... passed 5.000s
<strong>[</strong>  8%]: test_1/fail_output .................................... passed 5.000s
<strong>[</strong> 11%]: test_1/pass_output .................................... passed 6.000s
<strong>[</strong> 13%]: test_2/args        .................................... passed 7.000s
<strong>[</strong> 16%]: test_2/default     .................................... passed 6.000s
<strong>[</strong> 19%]: test_2/fail_output .................................... passed 6.000s
<strong>[</strong> 22%]: test_2/pass_output .................................... passed 6.000s
<strong>[</strong> 25%]: test_3/args        .................................... passed 7.000s
<strong>[</strong> 27%]: test_3/default     .................................... passed 7.000s
<strong>[</strong> 30%]: test_3/fail_output .................................... passed 6.000s
<strong>[</strong> 33%]: test_3/pass_output .................................... passed 6.000s
<strong>[</strong> 36%]: test_4/args        .................................... passed 6.000s
<strong>[</strong> 38%]: test_4/default     .................................... passed 6.000s
<strong>[</strong> 41%]: test_4/fail_output .................................... passed 5.000s
<strong>[</strong> 44%]: test_4/pass_output .................................... passed 6.000s
<strong>[</strong> 47%]: test_5/args        .................................... passed 5.000s
<strong>[</strong> 50%]: test_5/default     .................................... passed 6.000s
<strong>[</strong> 52%]: test_5/fail_output .................................... failed 6.000s
<strong>[</strong> 55%]: test_5/pass_output .................................... failed 5.000s
<strong>[</strong> 58%]: test_6/args        .................................... passed 7.000s
<strong>[</strong> 61%]: test_6/default     .................................... passed 6.000s
<strong>[</strong> 63%]: test_6/fail_output .................................... passed 6.000s
<strong>[</strong> 66%]: test_6/pass_output .................................... passed 6.000s
<strong>[</strong> 69%]: test_7/args        .................................... failed 6.000s
<strong>[</strong> 72%]: test_7/default     .................................... failed 7.000s
<strong>[</strong> 75%]: test_7/fail_output .................................... failed 6.000s
<strong>[</strong> 77%]: test_7/pass_output .................................... failed 5.000s
<strong>[</strong> 80%]: test_8/args        .................................... passed 7.000s
<strong>[</strong> 83%]: test_8/default     .................................... passed 6.000s
<strong>[</strong> 86%]: test_8/fail_output .................................... passed 6.000s
<strong>[</strong> 88%]: test_8/pass_output .................................... failed 5.000s
<strong>[</strong> 91%]: test_9/args        .................................... passed 6.000s
<strong>[</strong> 94%]: test_9/default     .................................... passed 6.000s
<strong>[</strong> 97%]: test_9/fail_output .................................... passed 6.000s
<strong>[</strong>100%]: test_9/pass_output .................................... passed 6.000s

<span style="color:#8f5902">80% </span>tests passed, 7 tests failed out of 36, spent 0.242s
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img alt="" src="https://tboox.org/assets/img/manual/xmake-test1.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以执行<span>&nbsp;</span><code>xmake test -vD</code><span>&nbsp;</span>查看详细的测试失败的错误信息：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img alt="" src="https://tboox.org/assets/img/manual/xmake-test2.png" referrerpolicy="no-referrer"></p><h4>运行指定测试目标</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以指定运行指定 target 的某个测试：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test </span>targetname/testname
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">或者按模式匹配的方式，运行一个 target 的所有测试，或者一批测试：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test </span>targetname/<span style="color:blue">*</span><span style="color:#8f5902">$ </span>xmake <span style="color:black">test </span>targetname/foo<span style="color:blue">*</span></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">也可以运行所有 target 的同名测试：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span><span style="color:blue">*</span>/testname
</code></pre></div><h4>并行化运行测试</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">其实，默认就是并行化运行的，但是我们可以通过<span>&nbsp;</span><code>-jN</code><span>&nbsp;</span>调整运行的并行度。</p><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span> -jN
</code></pre></div><h4>分组运行测试</h4><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span> -g <span style="color:#ff00ff">"foo"</span><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span> -g <span style="color:#ff00ff">"foo*"</span></code></pre></div><h4>添加测试到目标（无参数）</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果没有配置任何参数，仅仅配置了测试名到<span>&nbsp;</span><code>add_tests</code>，那么仅仅测试这个目标程序的是否会运行失败，根据退出代码来判断是否通过测试。</p><div><pre><code>target("test")
    add_tests("testname")
</code></pre></div><h4>配置运行参数</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以通过<span>&nbsp;</span><code><span>{</span><span>runargs</span><span><span>&nbsp;</span></span><span>=</span><span><span>&nbsp;</span></span><span>{</span><span>"arg1"</span><span>,</span><span><span>&nbsp;</span></span><span>"arg2"</span><span>}}</span></code><span>&nbsp;</span>的方式，给<span>&nbsp;</span><code>add_tests</code><span>&nbsp;</span>配置指定测试需要运行的参数。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">另外，一个 target 可以同时配置多个测试用例，每个测试用例可独立运行，互不冲突。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">runargs</span><strong>=</strong><span style="color:#ff00ff">"arg1"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">runargs</span><strong>=</strong><strong>{</strong><span style="color:#ff00ff">"arg1"</span><strong>,</strong><span style="color:#ff00ff">"arg2"</span><strong>}})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果我们没有配置 runargs 到<span>&nbsp;</span><code>add_tests</code>，那么我们也会尝试从被绑定的 target 中，获取<span>&nbsp;</span><code>set_runargs</code><span>&nbsp;</span>设置的运行参数。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>)</strong><span style="color:#000000">set_runargs</span><strong>(</strong><span style="color:#ff00ff">"arg1"</span><strong>,</strong><span style="color:#ff00ff">"arg2"</span><strong>)</strong></code></pre></div><h4>配置运行目录</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以通过 rundir 设置测试运行的当前工作目录，例如：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">rundir</span><strong>=</strong><span style="color:#000000">os</span><strong>.</strong><span style="color:#000000">projectdir</span><strong>()})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果我们没有配置 rundir 到<span>&nbsp;</span><code>add_tests</code>，那么我们也会尝试从被绑定的 target 中，获取<span>&nbsp;</span><code>set_rundir</code><span>&nbsp;</span>设置的运行目录。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>)</strong><span style="color:#000000">set_rundir</span><strong>(</strong><span style="color:#ff00ff">"$(projectdir)"</span><strong>)</strong></code></pre></div><h4>配置运行环境</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以通过 runenvs 设置一些运行时候的环境变量，例如：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">runenvs</span><strong>=</strong><strong>{</strong><span style="color:#000000">LD_LIBRARY_PATH</span><strong>=</strong><span style="color:#ff00ff">"/lib"</span><strong>}})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果我们没有配置 runenvs 到<span>&nbsp;</span><code>add_tests</code>，那么我们也会尝试从被绑定的 target 中，获取<span>&nbsp;</span><code>add_runenvs</code><span>&nbsp;</span>设置的运行环境。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>)</strong><span style="color:#000000">add_runenvs</span><strong>(</strong><span style="color:#ff00ff">"LD_LIBRARY_PATH"</span><strong>,</strong><span style="color:#ff00ff">"/lib"</span><strong>)</strong></code></pre></div><h4>匹配输出结果</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">默认情况下，<code>xmake test</code><span>&nbsp;</span>会根据测试运行的退出代码是否为 0，来判断是否测试通过。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">当然，我们也可以通过配置测试运行的输出结果是否满足我们的指定的匹配模式，来判断是否测试通过。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">主要通过这两个参数控制：</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#f8f8fd; border-bottom:2px solid #777777; border-collapse:collapse; border-top:2px solid #777777; color:#333333; font-family:&quot;Helvetica Neue&quot;,Helvetica,Arial,&quot;Microsoft YaHei&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin:8px 0px; orphans:2; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; word-spacing:0px"><tbody><tr><th style="text-align:left">参数</th><th style="text-align:left">说明</th></tr></tbody><tbody><tr><td>pass_outputs</td><td>如果输出匹配，则测试通过</td></tr><tr><td>fail_outputs</td><td>如果输出匹配，则测试失败</td></tr></tbody></table><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">传入<span>&nbsp;</span><code>pass_outputs</code><span>&nbsp;</span>和<span>&nbsp;</span><code>fail_outputs</code><span>&nbsp;</span>的是一个 lua 匹配模式的列表，但模式稍微做了一些简化，比如对<span>&nbsp;</span><code>*</code><span>&nbsp;</span>的处理。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果要匹配成功，则测试通过，可以这么配置：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname1"</span><strong>,</strong><strong>{</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname2"</span><strong>,</strong><strong>{</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello *"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname3"</span><strong>,</strong><strong>{</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><strong>{</strong><span style="color:#ff00ff">"hello"</span><strong>,</strong><span style="color:#ff00ff">"hello *"</span><strong>}})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果要匹配成功，则测试失败，可以这么配置：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname1"</span><strong>,</strong><strong>{</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname2"</span><strong>,</strong><strong>{</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello *"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname3"</span><strong>,</strong><strong>{</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><strong>{</strong><span style="color:#ff00ff">"hello"</span><strong>,</strong><span style="color:#ff00ff">"hello *"</span><strong>}})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以同时配置它们：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>,</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello"</span><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">由于一些测试输出的结果，尾部会有一些换行什么的空白字符，干扰匹配模式，我们可以再配置<span>&nbsp;</span><code>trim_output = true</code>，先截断空白字符后，再做匹配。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">trim_output</span><strong>=</strong><strong>true</strong><strong>,</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>,</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello"</span><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们还可以配置<span>&nbsp;</span><code><span>{</span><span>plain</span><span><span>&nbsp;</span></span><span>=</span><span><span>&nbsp;</span></span><span>true</span><span>}</span></code><span>&nbsp;</span>是禁用 lua 模式匹配，仅仅做最基础的平坦文本匹配。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>,</strong><strong>{</strong><span style="color:#000000">plain</span><strong>=</strong><strong>true</strong><strong>,</strong><span style="color:#000000">pass_outputs</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>,</strong><span style="color:#000000">fail_outputs</span><strong>=</strong><span style="color:#ff00ff">"hello"</span><strong>})</strong></code></pre></div><h4>配置测试组</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以通过<span>&nbsp;</span><code>group = "foo"</code><span>&nbsp;</span>来配置一个测试组，进行分组测试：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname1"</span><strong>,</strong><strong>{</strong><span style="color:#000000">group</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname2"</span><strong>,</strong><strong>{</strong><span style="color:#000000">group</span><strong>=</strong><span style="color:#ff00ff">"foo"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname3"</span><strong>,</strong><strong>{</strong><span style="color:#000000">group</span><strong>=</strong><span style="color:#ff00ff">"bar"</span><strong>})</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname4"</span><strong>,</strong><strong>{</strong><span style="color:#000000">group</span><strong>=</strong><span style="color:#ff00ff">"bae"</span><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">其中 testname1/testname2 是一个组 foo，另外两个是在另外一个组。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">然后，我们就可以使用<span>&nbsp;</span><code>xmake test -g groupname</code><span>&nbsp;</span>来进行分组测试了。</p><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span> -g <span style="color:#ff00ff">"foo"</span><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span> -g <span style="color:#ff00ff">"foo*"</span></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">!&gt; 运行分组，也是支持模式匹配的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">另外，如果没有设置<span>&nbsp;</span><code>group</code><span>&nbsp;</span>参数给<span>&nbsp;</span><code>add_tests</code>，我们也可以默认获取绑定到 target 的组名。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>)</strong><span style="color:#000000">set_group</span><strong>(</strong><span style="color:#ff00ff">"foo"</span><strong>)</strong></code></pre></div><h4>自定义测试脚本</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们还新增了<span>&nbsp;</span><code>before_test</code>,<span>&nbsp;</span><code>on_test</code><span>&nbsp;</span>和<span>&nbsp;</span><code>after_test</code><span>&nbsp;</span>配置脚本，用户可以在 rule 和 target 域，自定义配置它们实现定制化的测试执行。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">on_test</span><strong>(</strong><span style="color:blue">function</span><strong>(</strong><span style="color:#000000">target</span><strong>,</strong><span style="color:#000000">opt</span><strong>)</strong><span style="color:black">print</span><strong>(</strong><span style="color:#000000">opt</span><strong>.</strong><span style="color:#000000">name</span><strong>,</strong><span style="color:#000000">opt</span><strong>.</strong><span style="color:#000000">runenvs</span><strong>,</strong><span style="color:#000000">opt</span><strong>.</strong><span style="color:#000000">runargs</span><strong>,</strong><span style="color:#000000">opt</span><strong>.</strong><span style="color:#000000">pass_outputs</span><strong>)</strong><em>-- do test</em><em>-- ...</em><em>-- passed</em><span style="color:blue">return</span><strong>true</strong><em>-- failied</em><span style="color:blue">return</span><strong>false</strong><strong>,</strong><span style="color:#000000">errors</span><span style="color:blue">end</span><strong>)</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">其中，opt 里面可以获取到所有传入<span>&nbsp;</span><code>add_tests</code><span>&nbsp;</span>的参数，我们在 on_test 里面自定义测试逻辑，然后返回 true 就是测试通过，返回 false 就是测试失败，然后继续返回测试失败的错误信息。</p><h4>自动化构建</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">由于测试目标在正常开发构建阶段，通常是不需要被构建的，因此我们会设置<span>&nbsp;</span><code>set_default(false)</code>。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"testname"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">但是运行<span>&nbsp;</span><code>xmake test</code><span>&nbsp;</span>进行测试时候，这些测试对应的 target 还是会被自动构建，确保能够被运行。</p><div><pre><code><span style="color:#8f5902">$ </span>xmake <span style="color:black">test</span><strong>[</strong> 25%]: cache compiling.release src/main.cpp
<strong>[</strong> 50%]: linking.release <span style="color:black">test
</span>running tests ...
<strong>[</strong>100%]: <span style="color:black">test</span>/testname .................................... passed 6.000s

<span style="color:#8f5902">100% </span>tests passed, 0 tests failed out of 1, spent 0.006s
</code></pre></div><h4>首次测试失败就终止</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">默认情况下，<code>xmake test</code><span>&nbsp;</span>会等到所有测试都运行完，不管里面有多少是没通过的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">而有时候，我们想在第一个测试没通过，就直接中断测试，那么我们可以通过下面的配置启用：</p><div><pre><code><span style="color:#000000">set_policy</span><strong>(</strong><span style="color:#ff00ff">"test.return_zero_on_failure"</span><strong>,</strong><strong>true</strong><strong>)</strong></code></pre></div><h4>测试失败返回 0</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">默认情况下，只要有一个测试没通过，等到<span>&nbsp;</span><code>xmake test</code><span>&nbsp;</span>运行完成，它都会返回非 0 退出代码，这对于一些 CI 环境非常有用，可以中断 CI 的其他脚本继续运行。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">然后触发信号告诉 CI，我们需要生成测试报告和告警了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">然后，如果我们想要压制这种行为，可以强制将<span>&nbsp;</span><code>xmake test</code><span>&nbsp;</span>的退出代码总是设置成 0。</p><div><pre><code><span style="color:#000000">set_policy</span><strong>(</strong><span style="color:#ff00ff">"test.return_zero_on_failure"</span><strong>,</strong><strong>true</strong><strong>)</strong></code></pre></div><h4>仅仅测试编译</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">有时候，我们仅仅想要测试代码是否通过编译，或者没有通过编译，不需要运行它们，那么可以通过配置<span>&nbsp;</span><code>build_should_pass</code><span>&nbsp;</span>和<span>&nbsp;</span><code>build_should_fail</code><span>&nbsp;</span>来实现。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test_10"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/compile.cpp"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"compile_fail"</span><strong>,</strong><strong>{</strong><span style="color:#000000">build_should_fail</span><strong>=</strong><strong>true</strong><strong>})</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test_11"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/compile.cpp"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"compile_pass"</span><strong>,</strong><strong>{</strong><span style="color:#000000">build_should_pass</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这通常用于一些测试代码中带有<span>&nbsp;</span><code>static_assert</code><span>&nbsp;</span>的场景，例如：</p><div><pre><code><span style="color:blue">template</span><strong>&lt;</strong><span style="color:blue">typename</span><span style="color:#000000">T</span><strong>&gt;</strong><span style="color:blue">bool</span><span style="color:#000000">foo</span><strong>(</strong><span style="color:#000000">T</span><span style="color:#000000">val</span><strong>)</strong><strong>{</strong><span style="color:blue">if</span><span style="color:blue">constexpr</span><strong>(</strong><span style="color:#000000">std</span><strong>::</strong><span style="color:#000000">is_same_v</span><strong>&lt;</strong><span style="color:#000000">T</span><strong>,</strong><span style="color:blue">int</span><strong>&gt;</strong><strong>)</strong><strong>{</strong><span style="color:#000000">printf</span><strong>(</strong><span style="color:#ff00ff">"int!</span><span style="color:#ff00ff">\n</span><span style="color:#ff00ff">"</span><strong>);</strong><strong>}</strong><span style="color:blue">else</span><span style="color:blue">if</span><span style="color:blue">constexpr</span><strong>(</strong><span style="color:#000000">std</span><strong>::</strong><span style="color:#000000">is_same_v</span><strong>&lt;</strong><span style="color:#000000">T</span><strong>,</strong><span style="color:blue">float</span><strong>&gt;</strong><strong>)</strong><strong>{</strong><span style="color:#000000">printf</span><strong>(</strong><span style="color:#ff00ff">"float!</span><span style="color:#ff00ff">\n</span><span style="color:#ff00ff">"</span><strong>);</strong><strong>}</strong><span style="color:blue">else</span><strong>{</strong><span style="color:blue">static_assert</span><strong>(</strong><span style="color:black">false</span><strong>,</strong><span style="color:#ff00ff">"unsupported type"</span><strong>);</strong><strong>}</strong><strong>}</strong><span style="color:blue">int</span><span style="color:#000000">main</span><strong>(</strong><span style="color:blue">int</span><strong>,</strong><span style="color:blue">char</span><strong>**</strong><strong>)</strong><strong>{</strong><span style="color:#000000">foo</span><strong>(</strong><span style="color:#ff00ff">"BAD"</span><strong>);</strong><span style="color:blue">return</span><strong>0</strong><strong>;</strong><strong>}</strong></code></pre></div><h4>配置额外的代码编译</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们还可以在配置测试用例的时候，对每个测试配置额外需要编译的代码，以及一些宏定义，实现内联测试。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">xmake 会为每个测试单独编译一个独立的可执行程序去运行它，但这并不会影响到 target 在生产环境的编译结果。</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test_13"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/test_1.cpp"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"stub_1"</span><strong>,</strong><strong>{</strong><span style="color:#000000">files</span><strong>=</strong><span style="color:#ff00ff">"tests/stub_1.cpp"</span><strong>,</strong><span style="color:#000000">defines</span><strong>=</strong><span style="color:#ff00ff">"STUB_1"</span><strong>})</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test_14"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/test_2.cpp"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"stub_2"</span><strong>,</strong><strong>{</strong><span style="color:#000000">files</span><strong>=</strong><span style="color:#ff00ff">"tests/stub_2.cpp"</span><strong>,</strong><span style="color:#000000">defines</span><strong>=</strong><span style="color:#ff00ff">"STUB_2"</span><strong>})</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test_15"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">set_default</span><strong>(</strong><strong>false</strong><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/test_1.cpp"</span><strong>)</strong><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#ff00ff">"stub_n"</span><strong>,</strong><strong>{</strong><span style="color:#000000">files</span><strong>=</strong><span style="color:#ff00ff">"tests/stub_n*.cpp"</span><strong>,</strong><span style="color:#000000">defines</span><strong>=</strong><span style="color:#ff00ff">"STUB_N"</span><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">以 doctest 为例，我们可以在不修改任何 main.cpp 的情况下，外置单元测试：</p><div><pre><code><span style="color:#000000">add_rules</span><strong>(</strong><span style="color:#ff00ff">"mode.debug"</span><strong>,</strong><span style="color:#ff00ff">"mode.release"</span><strong>)</strong><span style="color:#000000">add_requires</span><strong>(</strong><span style="color:#ff00ff">"doctest"</span><strong>)</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"doctest"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"binary"</span><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/*.cpp"</span><strong>)</strong><span style="color:blue">for</span><span style="color:#000000">_</span><strong>,</strong><span style="color:#000000">testfile</span><span style="color:blue">in</span><span style="color:black">ipairs</span><strong>(</strong><span style="color:#000000">os</span><strong>.</strong><span style="color:#000000">files</span><strong>(</strong><span style="color:#ff00ff">"tests/*.cpp"</span><strong>))</strong><span style="color:blue">do</span><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#000000">path</span><strong>.</strong><span style="color:#000000">basename</span><strong>(</strong><span style="color:#000000">testfile</span><strong>),</strong><strong>{</strong><span style="color:#000000">files</span><strong>=</strong><span style="color:#000000">testfile</span><strong>,</strong><span style="color:#000000">remove_files</span><strong>=</strong><span style="color:#ff00ff">"src/main.cpp"</span><strong>,</strong><span style="color:#000000">languages</span><strong>=</strong><span style="color:#ff00ff">"c++11"</span><strong>,</strong><span style="color:#000000">packages</span><strong>=</strong><span style="color:#ff00ff">"doctest"</span><strong>,</strong><span style="color:#000000">defines</span><strong>=</strong><span style="color:#ff00ff">"DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN"</span><strong>})</strong><span style="color:blue">end</span></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">定义 DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN 会引入额外的 main 入口函数，因此我们需要配置 remove_files 去移除已有的 main.cpp 文件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">运行效果如下：</p><div><pre><code>ruki-2:doctest ruki<span style="color:black">$ </span>xmake <span style="color:black">test
</span>running tests ...
<strong>[</strong> 50%]: doctest/test_1 .................................... failed 0.009s
<strong>[</strong>100%]: doctest/test_2 .................................... passed 0.009s

<span style="color:#8f5902">50% </span>tests passed, 1 tests failed out of 2, spent 0.019s
ruki-2:doctest ruki<span style="color:black">$ </span>xmake <span style="color:black">test</span> -v
running tests ...
<strong>[</strong> 50%]: doctest/test_1 .................................... failed 0.026s
<strong>[</strong>doctest] doctest version is <span style="color:#ff00ff">"2.4.11"</span><strong>[</strong>doctest] run with <span style="color:#ff00ff">"--help"</span><span style="color:blue">for </span>options
<strong>===============================================================================</strong>
tests/test_1.cpp:7:
TEST CASE:  testing the factorial <span style="color:blue">function

</span>tests/test_1.cpp:8: ERROR: CHECK<strong>(</strong> factorial<strong>(</strong>1<strong>)</strong><strong>==</strong> 10 <strong>)</strong> is NOT correct!
  values: CHECK<strong>(</strong> 1 <strong>==</strong> 10 <strong>)</strong><strong>===============================================================================</strong><strong>[</strong>doctest] <span style="color:black">test </span>cases: 1 | 0 passed | 1 failed | 0 skipped
<strong>[</strong>doctest] assertions: 4 | 3 passed | 1 failed |
<strong>[</strong>doctest] Status: FAILURE!

run failed, <span style="color:black">exit </span>code: 1
<strong>[</strong>100%]: doctest/test_2 .................................... passed 0.010s

<span style="color:#8f5902">50% </span>tests passed, 1 tests failed out of 2, spent 0.038s
</code></pre></div><h4>测试动态库</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">通常，<code>add_tests</code><span>&nbsp;</span>仅用于对可执行程序进行运行测试，运行动态库需要有一个额外的 main 主入口，因此我们需要额外配置一个可执行程序去加载它，例如：</p><div><pre><code><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"doctest_shared"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"shared"</span><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"src/foo.cpp"</span><strong>)</strong><span style="color:blue">for</span><span style="color:#000000">_</span><strong>,</strong><span style="color:#000000">testfile</span><span style="color:blue">in</span><span style="color:black">ipairs</span><strong>(</strong><span style="color:#000000">os</span><strong>.</strong><span style="color:#000000">files</span><strong>(</strong><span style="color:#ff00ff">"tests/*.cpp"</span><strong>))</strong><span style="color:blue">do</span><span style="color:#000000">add_tests</span><strong>(</strong><span style="color:#000000">path</span><strong>.</strong><span style="color:#000000">basename</span><strong>(</strong><span style="color:#000000">testfile</span><strong>),</strong><strong>{</strong><span style="color:#000000">kind</span><strong>=</strong><span style="color:#ff00ff">"binary"</span><strong>,</strong><span style="color:#000000">files</span><strong>=</strong><span style="color:#000000">testfile</span><strong>,</strong><span style="color:#000000">languages</span><strong>=</strong><span style="color:#ff00ff">"c++11"</span><strong>,</strong><span style="color:#000000">packages</span><strong>=</strong><span style="color:#ff00ff">"doctest"</span><strong>,</strong><span style="color:#000000">defines</span><strong>=</strong><span style="color:#ff00ff">"DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN"</span><strong>})</strong><span style="color:blue">end</span></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">通过<span>&nbsp;</span><code>kind = "binary"</code><span>&nbsp;</span>可以将每个单元测试改为 binary 可执行程序，并通过<span>&nbsp;</span><code>DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN</code><span>&nbsp;</span>引入 main 入口函数。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这样就能实现动态库目标中外置可运行的单元测试。</p><h3>新增类型大小检测</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在先前的版本中，我们可以通过<span>&nbsp;</span><code>check_csnippets</code><span>&nbsp;</span>和<span>&nbsp;</span><code>output = true</code><span>&nbsp;</span>的方式，来实现类型检测。</p><div><pre><code><span style="color:#000000">check_csnippets</span><strong>(</strong><span style="color:#ff00ff">"INT_SIZE"</span><strong>,</strong><span style="color:#ff00ff">'printf("%d", sizeof(int)); return 0;'</span><strong>,</strong><strong>{</strong><span style="color:#000000">output</span><strong>=</strong><strong>true</strong><strong>,</strong><span style="color:#000000">number</span><strong>=</strong><strong>true</strong><strong>})</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">但是这种方式，是通过尝试运行测试代码，然后获取运行输出结果，提取类型大小信息。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">这对于交叉编译，就不适用了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 2.8.5 版本中，我们新增了<span>&nbsp;</span><code>check_sizeof</code><span>&nbsp;</span>辅助接口，可以通过直接解析测试程序的二进制文件，提取类型大小信息。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">由于不需要运行测试，这种方式不仅可以支持交叉编译，而且对检测效率也有极大的提升，使用也更加的简单。</p><div><pre><code><span style="color:#000000">includes</span><strong>(</strong><span style="color:#ff00ff">"@builtin/check"</span><strong>)</strong><span style="color:#000000">target</span><strong>(</strong><span style="color:#ff00ff">"test"</span><strong>)</strong><span style="color:#000000">set_kind</span><strong>(</strong><span style="color:#ff00ff">"static"</span><strong>)</strong><span style="color:#000000">add_files</span><strong>(</strong><span style="color:#ff00ff">"*.cpp"</span><strong>)</strong><span style="color:#000000">check_sizeof</span><strong>(</strong><span style="color:#ff00ff">"LONG_SIZE"</span><strong>,</strong><span style="color:#ff00ff">"long"</span><strong>)</strong><span style="color:#000000">check_sizeof</span><strong>(</strong><span style="color:#ff00ff">"STRING_SIZE"</span><strong>,</strong><span style="color:#ff00ff">"std::string"</span><strong>,</strong><strong>{</strong><span style="color:#000000">includes</span><strong>=</strong><span style="color:#ff00ff">"string"</span><strong>})</strong></code></pre></div><div><pre><code><span style="color:#8f5902">$ </span>xmake f -c
checking <span style="color:blue">for </span>LONG_SIZE ... 8
checking <span style="color:blue">for </span>STRING_SIZE ... 24
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">另外，我也可以通过<span>&nbsp;</span><code>target:check_sizeof</code><span>&nbsp;</span>在脚本域进行检测。</p><h3>新增 Apple XROS 平台</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">苹果在 Xcode15 中新增了 visionOS 设备的构建支持，因此我们也在第一时间对其进行了支持，只需要执行：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake f -p applexros
<span style="color:#8f5902">$ </span>xmake
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">就可以完成 visionOS/XROS 平台的构建。</p><h3>支持代码合并</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">最后，我们还提供了一个小工具模块，它可以用于快速合并指定 target 里面的所有 c/c++ 和，头文件源码到单个源文件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">会生成类似 sqlite3.c 的这种单源码文件，用户可以根据自己的实际需求来决定是否使用这个功能。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">而在做合并的时候，Xmake 会将内部 includes 头文件全部展开，并生成 DAG，通过拓扑排序引入。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">默认它会处理所有 target 的合并，例如：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake l cli.amalgamate
build/tbox.c generated!
build/tbox.h generated!
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以指定合并需要的目标：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake l cli.amalgamate tbox
build/tbox.c generated!
build/tbox.h generated!
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">也可以在合并每个源文件时候，指定一个自定义的 unique ID 的宏定义，来处理符号冲突问题。</p><div><pre><code><span style="color:#8f5902">$ </span>xmake l cli.amalgamate -u MY_UNIQUEU_ID
build/tbox.c generated!
build/tbox.h generated!
</code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">如果多个源文件内部有重名符号，就可以判断这个<span>&nbsp;</span><code>MY_UNIQUEU_ID</code><span>&nbsp;</span>宏是否被定义，如果定义了，说明是在单文件中，就自己在源码中处理下重名符号。</p><div><pre><code><em>#ifdef MY_UNIQUEU_ID
</em><em>// do some thing
</em><em>#endif
</em></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以指定输出位置：</p><div><pre><code><span style="color:#8f5902">$ </span>xmake l cli.amalgamate -o /xxx
/xxx/tbox.c generated!
/xxx/tbox.h generated!
</code></pre></div><h3>新增 windows.manifest.uac 策略</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">通过这个策略，我们可以快速方便的设置并启用 Windows UAC。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它支持以下几个 Level：</p><ul><li>invoker: asInvoker</li><li>admin: requireAdministrator</li><li>highest: highestAvailable</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">例如：</p><div><pre><code><span style="color:#000000">set_policy</span><strong>(</strong><span style="color:#ff00ff">"windows.manifest.uac"</span><strong>,</strong><span style="color:#ff00ff">"admin"</span><strong>)</strong></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">它等价于设置</p><div><pre><code><span style="color:blue">if</span><span style="color:#000000">is_plat</span><strong>(</strong><span style="color:#ff00ff">"windows"</span><strong>)</strong><span style="color:blue">then</span><span style="color:#000000">add_ldflags</span><strong>(</strong><span style="color:#ff00ff">"/manifest:embed"</span><strong>,</strong><strong>{</strong><span style="color:#ff00ff">"/manifestuac:level='requireAdministrator' uiAccess='false'"</span><strong>},</strong><strong>{</strong><span style="color:#000000">force</span><strong>=</strong><strong>true</strong><strong>,</strong><span style="color:#000000">expand</span><strong>=</strong><strong>false</strong><strong>})</strong><span style="color:blue">end</span></code></pre></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">但是更加方便简洁，并且不需要判断平台，其他平台自动忽略。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我们也可以通过<span>&nbsp;</span><code>windows.manifest.uac.ui</code><span>&nbsp;</span>策略，设置 Windows UAC 的 uiAccess，如果没有设置它，默认是 false。</p><div><pre><code><span style="color:#000000">set_policy</span><strong>(</strong><span style="color:#ff00ff">"windows.manifest.uac.ui"</span><strong>,</strong><strong>true</strong><strong>)</strong></code></pre></div><h2>更新日志</h2><h3>新特性</h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F1452" target="_blank">#1452</a>: 支持链接顺序调整，链接组</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F1438" target="_blank">#1438</a>: 支持代码 amalgamation</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F3381" target="_blank">#3381</a>: 添加<span>&nbsp;</span><code>xmake test</code><span>&nbsp;</span>支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4276" target="_blank">#4276</a>: 支持自定义域 API</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fpull%2F4286" target="_blank">#4286</a>: 添加 Apple XROS 支持</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4345" target="_blank">#4345</a>: 支持检测类型大小 sizeof</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fpull%2F4369" target="_blank">#4369</a>: 添加 windows.manifest.uac 策略</li></ul><h3>改进</h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4284" target="_blank">#4284</a>: 改进内置 includes 模块</li></ul><h3>Bugs 修复</h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxmake-io%2Fxmake%2Fissues%2F4256" target="_blank">#4256</a>: 为 vsxmake 生成器修复 c++ modules intellisense</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 07 Nov 2023 01:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265506/xmake-v2-8-5</guid>
            <link>https://www.oschina.net/news/265506/xmake-v2-8-5</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DALL·E 3 绘图来啦，开源 AI 聊天、绘图软件 AIdea 现已支持 DALL·E 3]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="color:inherit; margin-left:0; margin-right:0">昨晚 OpenAI 的开发者大会后开放了 DALL·E 3 的 API，今天花了一点时间在 AIdea 中增加了对 DALL·E 3 的支持。</p><blockquote><p style="color:inherit; margin-left:0; margin-right:0">简单来说，AIdea 类似于 POE，它是一款集成了主流大语言模型以及绘图模型的开源 APP。如果你还不知道它，那么可以简单看看这篇文章 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA3NTU1NDk4Mg%3D%3D%26mid%3D2454663369%26idx%3D1%26sn%3Dfc5ae7e09e5da885fecbe90747900bc9%26chksm%3D88d55900bfa2d016578008ec30550acbab49cf9ed5cd0b454c3ce8d308ff7cc1ab9416637f19%23rd" target="_blank">花了小半年开发了一个 AI 套壳 APP，然而大势已过，直接开源了</a>。</p><p style="color:inherit; margin-left:0; margin-right:0">AIdea 项目前后端所有代码均采用 MIT 协议开源。</p></blockquote><img alt="operate-note" src="https://ssl.aicode.cc/ai-server/assets/broadcast/dalle-preview.jpg" referrerpolicy="no-referrer"><p>operate-note</p><img alt="image" src="https://ssl.aicode.cc/ai-server/assets/broadcast/dalle-preview-result.png" referrerpolicy="no-referrer"><p>image</p><p style="color:inherit; margin-left:0; margin-right:0">下载体验地址</p><p style="color:inherit; margin-left:0; margin-right:0">https://aidea.aicode.cc/</p><blockquote><p style="color:inherit; margin-left:0; margin-right:0">注意：AIdea 项目前后端所有代码均采用 MIT 协议开源，但是在线体验服务并不免费（PS. 很多大语言模型每日都有免费使用次数）。</p></blockquote><p style="color:inherit; margin-left:0; margin-right:0">AIdea 是一款集成了主流大语言模型以及绘图模型的 APP ， 采用 Flutter + Golang 开发，代码完全开源，支持以下功能：</p><ul><li><span style="color:inherit">OpenAI 的 GPT-3.5 ，GPT-4 大语言模型</span></li><li><span style="color:inherit">Anthropic 的 Claude instant ，Claude 2.0 大语言模型</span></li><li><span style="color:inherit">国产模型：通义千问，文心一言，讯飞星火，商汤日日新，腾讯混元，百川 53B ，360 智脑</span></li><li><span style="color:inherit">开源模型：Llama2 ，ChatGLM2 ，AquilaChat 7B ，Bloomz 7B 等，后续还将开放更多</span></li><li><span style="color:inherit">文生图、图生图、超分辨率、黑白图片上色等功能，集成 Stable Diffusion 模型，支持 SDXL 1.0</span></li></ul><p style="color:inherit; margin-left:0; margin-right:0">Github 地址：</p><ul><li><span style="color:inherit">客户端（ Flutter ）： https://github.com/mylxsw/aidea</span></li><li><span style="color:inherit">服务端（ Golang ）： https://github.com/mylxsw/aidea-server</span></li></ul></div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 09:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265412</guid>
            <link>https://www.oschina.net/news/265412</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openKylin 1.0.1 版本更新推送]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 1.0.1 版本自 9 月份发布后，便受到社区小伙伴们的广泛关注。openKylin 社区也积极听取大家的问题反馈和建议，持续推动社区各 SIG 组修复相关 bug 和优化系统功能。现在，社区将 10 月份各 SIG 修复并通过 QA SIG 验收的相关软件包进行推送更新，大家可以将系统更新至最新版本，同时也欢迎更多新朋友使用 openKylin 系统，提出您的宝贵意见！</span></span></p><div><img src="https://p3-sign.toutiaoimg.com/tos-cn-i-axegupay5k/2fc7c9f3843640dbad8242fc532f3f79~noop.image?_iz=58558&amp;from=article.pc_detail&amp;lk3s=953192f4&amp;x-expires=1700032798&amp;x-signature=lsPAPAeHeiO%2FlhP8AGTOc6Sphy0%3D" referrerpolicy="no-referrer"><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#333333">一、系统升级方式</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">方式一、前往</span><strong><span style="color:#000000">系统设置—更新界面</span></strong><span style="color:#000000">，按提示完成系统更新。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">方式二、通过终端运行以下命令进行更新：</span></span></p><pre><code><span style="color:#114ba6">sudo</span> apt upgrade</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#000000">温馨提示：此次更新大约会占用您 5 分钟时间哦~</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#333333">二、系统更新日志</span></strong></span></p><ul><li><span><span style="color:#000000">【搜狗输入法 NG 版】修复任务栏图标缺失等问题并优化多项功能；</span></span></li><li><span><span style="color:#000000">【U 盘管理工具】修复点击任务栏 U 盘管理工具图标，鼠标悬浮在弹窗上，弹窗 3s 左右消失的问题；</span></span></li><li><span><span style="color:#000000">【WPS】修复应用打开后无最大化、最小化、关闭等按钮；</span></span></li><li><span><span style="color:#000000">【任务栏】修复任务栏为大尺寸时打开的应用图标会变小的问题；</span></span></li><li><span><span style="color:#000000">【侧边栏】修复中文模式下鼠标悬浮在侧边栏-电源按钮的提示文案为英文的问题；</span></span></li><li><span><span style="color:#000000">【侧边栏】修复侧边栏有消息时点击无法显示内容的问题；</span></span></li><li><span><span style="color:#000000">【侧边栏】修复插件区未适配字体大小的问题；</span></span></li><li><span><span style="color:#000000">【便签】修复便签"总在顶层"功能不生效的问题；</span></span></li><li><span><span style="color:#000000">【全局搜索】优化对系统设置的搜索结果的展示方式；</span></span></li><li><span><span style="color:#000000">【全局搜索】修复英文系统下搜索不到「代理」功能的问题；</span></span></li><li><span><span style="color:#000000">【声音】修复每次打开控制面板-声音界面，输出输入音量条均处于最左侧位置的问题；</span></span></li><li><span><span style="color:#000000">【安装】修复"发送可选诊断数据"取消勾选但安装后控制面板关于界面按钮仍为打开状态的问题；</span></span></li><li><span><span style="color:#000000">【归档管理器】修复归档管理器标题栏图标未适配系统图标；</span></span></li><li><span><span style="color:#000000">【文件管理器】修复用户手册部分内容与实际情况不一致的问题；</span></span></li><li><span><span style="color:#000000">【更新】修复系统更新时存在软件包安装失败报错的问题；</span></span></li><li><span><span style="color:#000000">【电源管理】修复英文模式下电源管理部分图片和图标与实际情况不符的问题；</span></span></li><li><span><span style="color:#000000">【看图】修复右上角「三」按钮悬浮提示的文案错误的问题；</span></span></li><li><span><span style="color:#000000">【看图】修复看图-关于版本号与 dpkg -l 查看的版本号不一致的问题；</span></span></li><li><span><span style="color:#000000">【系统监视器】修复右上角「三」按钮悬浮提示的文案错误的问题；</span></span></li><li><span><span style="color:#000000">【系统监视器】修复应用程序进程的网络状态列一直是 0% 的问题；</span></span></li><li><span><span style="color:#000000">【终端】修复 Wayland 模式下点击终端的标题栏其他选项但均显示文件下拉框的问题；</span></span></li><li><span><span style="color:#000000">【网络连接】修复无法组队连接的问题；</span></span></li><li><span><span style="color:#000000">【网络连接】修复移动热点名称修改不成功的问题；</span></span></li><li><span><span style="color:#000000">【虚拟键盘】修复 Wayland 下屏幕缩放放大后虚拟键盘图标有锯齿状的问题；</span></span></li><li><span><span style="color:#000000">【通知中心】修复部分机型出现的无法唤出侧边栏的界面显示、概率出现毛玻璃显示的问题；</span></span></li><li><span><span style="color:#000000">【通知中心】修复中文模式下「未插入网线」提醒弹窗的按钮显示为英文的问题；</span></span></li><li><span><span style="color:#000000">【通知中心】修复应用全屏模式下插入 U 盘有消息提醒的问题。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">更多 bug 反馈，请点击「</span><span style="color:#ffffff"><span style="background-color:#ff9900">阅读原文</span></span><span style="color:#000000">」前往 openKylin Gitee 仓库告诉我们哦~</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 07:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265591/openkylin-1-0-1-updated</guid>
            <link>https://www.oschina.net/news/265591/openkylin-1-0-1-updated</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Syncthing 1.26.0 发布，连续文件同步工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Syncthing&nbsp;是一个免费开源的工具，它能在你的各个网络计算机间同步文件 / 文件夹，它的同步数据是直接从一个系统中直接传输到另一个系统的，并且它是安全且私密的。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">Syncthing 1.26.0 现已发布，具体更新内容如下：</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Bug 修复</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9072" target="_blank">#9072</a>：从 LDAP 搜索过滤器中省略 %s 会导致搜索过滤器损坏</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9106" target="_blank">#9106</a>：发布具有无效版本控制类型的配置会导致&nbsp;panic</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9120" target="_blank">#9120</a>：Windows 上的 Deduplicated files 不再被视为常规文件（Go 1.21）</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9133" target="_blank">#9133</a>：如果底层文件系统不支持<code>chown</code>，Syncthing Docker 容器将无法启动</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9143" target="_blank">#9143</a>&nbsp;: traefik 不再 url escape X-Forwarded-Tls-Client-Cert header</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9149" target="_blank">#9149</a>：Favicon 卡在通知状态</li></ul><p style="text-align:start"><strong><span style="background-color:#ffffff; color:#1f2328">Enhancements：</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F4137" target="_blank">#4137</a>&nbsp;: 使用真实的登录屏幕 + 会话而不是 HTTP basic auth</li></ul><p>更新说明：&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Freleases%2Ftag%2Fv1.26.0" target="_blank">https://github.com/syncthing/syncthing/releases/tag/v1.26.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 06:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265588/syncthing-1-26-0-released</guid>
            <link>https://www.oschina.net/news/265588/syncthing-1-26-0-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[数据可视化引擎 G2 v5.1.7 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">数据可视化引擎&nbsp;G2 v5.1.7 版本现已发布，具体更新内容包括：</span></p><ul><li>fix：在每个关键帧中设置&nbsp;transform-origin&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5679" target="_blank">#5679</a></li><li>chore：添加 oscp 模板&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5680" target="_blank">#5680</a></li><li>chore：更新 oscp 模板&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5683" target="_blank">#5683</a></li><li>refactor：移除&nbsp;auto mark&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5687" target="_blank">#5687</a></li><li>docs：更新&nbsp;readme&nbsp;img&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5689" target="_blank">#5689</a></li><li>doc(README)：删除拼写错误&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5694" target="_blank">#5694</a></li><li>更新 oscp.yml 通过<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flzxue" target="_blank">@lzxue</a>在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5697" target="_blank">#5697</a></li><li>doc：<span style="background-color:#ffffff; color:#1f2328">滚动条监听滚动变化事件报错&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5700" target="_blank">#5700</a></li><li><span style="background-color:#ffffff; color:#1f2328">docs</span>：添加&nbsp;scrollbar demo&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fissues%2F5688" target="_blank">#5688</a>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5707" target="_blank">#5707</a></li><li><span style="background-color:#ffffff; color:#1f2328">docs</span>：添加 line-sample DEMO 案例&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5702" target="_blank">#5702</a></li><li><span style="background-color:#ffffff; color:#1f2328">docs</span>：添加包含中心文本的饼图案例&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5714" target="_blank">#5714</a></li><li><span style="background-color:#ffffff; color:#1f2328">chore</span>：当触发 pull_request 时运行构建操作&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5719" target="_blank">#5719</a></li><li>style：添加 line 默认样式&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5717" target="_blank">#5717</a></li><li>test：更新快照&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5731" target="_blank">#5731</a></li><li>docs：添加两个轴图演示&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5740" target="_blank">#5740</a></li><li>docs：添加自定义样式的视图框架示例&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5749" target="_blank">#5749</a></li><li>docs：自定义主题&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5750" target="_blank">#5750</a></li><li>fix(line)：使用 curveMonotone&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5751" target="_blank">#5751</a></li><li>fix：为 interval 添加最小高度配置&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5715" target="_blank">#5715</a></li><li>test：优化关键帧测试&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5754" target="_blank">#5754</a></li><li>fix(test)：更新快照&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5755" target="_blank">#5755</a></li><li>docs(Chart)：将&nbsp;Chart&nbsp;翻译为 En <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5757" target="_blank">#5757</a></li><li>chore：升级至 5.1.7&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Fpull%2F5765" target="_blank">#5765</a></li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fantvis%2FG2%2Freleases%2Ftag%2F5.1.7" target="_blank">https://github.com/antvis/G2/releases/tag/5.1.7</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 06:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265581/g2-5-1-7-released</guid>
            <link>https://www.oschina.net/news/265581/g2-5-1-7-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Rust 通用代码生成器莲花发布深度修复版红莲尝鲜版十六]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Rust 通用代码生成器莲花发布深度修复版红莲尝鲜版十六。<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.8)">修复了高级定制功能群，自动生成差异版本功能群，动词否定功能群和字段否定功能群里的一系列缺陷，并有其他缺陷修复。此版本支持 MariaDB，MySQL，PostgreSQL 和 Oracle 四种数据库。此版本支持枚举和 datadummy 模式。请部署在 Tomcat9 的 webapps 目录下。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.8)">参考视频：</span></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Pw411X7h5%2F" target="_blank">https://www.bilibili.com/video/BV1Pw411X7h5/</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1VC4y1Z7KF%2F" target="_blank">https://www.bilibili.com/video/BV1VC4y1Z7KF/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Fz4y1F7jf%2F" target="_blank">https://www.bilibili.com/video/BV1Fz4y1F7jf/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">红莲尝鲜版十六支持枚举，即常量表，不可以修改，通过初始化数据构建，内存数据模式。用枚举，只需将其页签设置为 Enum 起头即可，其他设置和 Domain 完全相同，生成的枚举只包含读取功能。注意，登录模块的 User,Role 和 Privilege 都不可以设置为枚举。红莲尝鲜版十六优化了模块结构，main.rs 只包含入口点和最低限度的其他程序，其他模块都放在 lib.rs 里，前端代码生成器的默认图片位置改到 static 目录下，方便 vue 前端的构建。请部署在 Tomcat9 的 webapps 目录下。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">代码生成器的项目地址：<a href="https://gitee.com/jerryshensjf/Lotus">https://gitee.com/jerryshensjf/Lotus</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">二进制 war 包的下载地址:<span>&nbsp;</span><a href="https://gitee.com/jerryshensjf/Lotus/attach_files">https://gitee.com/jerryshensjf/Lotus/attach_files</a></p><h1>Rust 通用代码生成器：莲花</h1><h3>介绍</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器：莲花</p><h3>软件架构说明</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">软件使用 Java 写成，部署在 Tomcat 9 的 webapps 目录中。目前的版本采用 openjdk 17 编译。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">本软件是从 Go 语言通用代码生成器：仙童改写而来。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">代码生成物是 rust 1.69 环境。采用 Axum 0.6.20, tokio 1.32.0 , sqlx 0.7.1 数据库访问层和 MariaDB, MySQL 8，PostgreSQL 数据库。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版十六。此版本是深度修复版，修复了高级定制功能群，自动生成差异版本功能群，动词否定功能群和字段否定功能群里的一系列缺陷，并有其他缺陷修复。此版本支持 MariaDB，MySQL，PostgreSQL 和 Oracle 四种数据库。此版本支持枚举和 datadummy 模式。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版十五。此版本是测试修复版，没有新功能，修复了尝鲜版十四的 DataDummy 功能。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版十四。此版本是测试修复版，没有新功能，都是尝鲜版十二的功能，但有错误修复。修复 Oracle 数据库，datadummy 模式和枚举。此版本支持 MariaDB，MySQL，PostgreSQL 和 Oracle 四种数据库。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版十二。此版本支持 Oracle 数据库。此版本支持 MariaDB，MySQL，PostgreSQL 和 Oracle 四种数据库。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版十一。此版本是一个修复增强版本，此版本完善了 DataDummy 模式，并完善了枚举的使用。并修复了数据库模式的脚本缺陷。暂不支持 Oracle 数据库。欢迎使用纯内存数据模式的原型功能，此功能为售前和产品经理开发，欢迎使用。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版十。此版本支持 DataDummy 模式，即纯内存数据模式的原型功能，为售前和产品经理开发。支持枚举，优化了模块结构，main.rs 只包含入口点和最低限度的其他程序，其他模块都放在 lib.rs 里，前端代码生成器的默认图片位置改到 static 目录下，方便 vue 前端的构建。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版九。此版本更新 Axum 至最新版 0.6.20,改进了前端登录失败的错误提示，去除了后端运行时在控制枱上输出的调试信息。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版八已发布。此版本更新 JQuery EasyUI 至最新版 1.10.17。此版本解决了编译警告问题。支持日期与日期时间的空值。修复了尝鲜版七过度更新引起的后端编辑不支持更新图片的缺陷。和其他一些缺陷。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花已发布红莲尝鲜版七，这是迄今为止最重要的里程碑。最重要的更新是数据库访问框架从 0.3.5 大幅更新至 0.7.1 最新版。这是一个重大的更新，尝试了几次才顺利完成了这个规划了很久的更新。第二个更新是消除了代码生成物上 90% 的编译警告，大幅改善了代码生成物的代码质量。而后通过更多的测试，修复了一系列缺陷。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版六。此版本支持日期与日期时间，支持三大部分生成功能群。支持自动登录模块，支持修改自己的资料和登陆密码。修复了尝鲜版五的克隆和批克隆出错问题，修复了尝鲜版五编辑用户会导致密码失效问题。和其他一些缺陷。暂不支持 Oracle 数据库，暂不支持空值。功能对标 java 通用代码生成器光电音之王版本。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版 5。此版本是第一个功能完整的可用版本，支持自动登录模块，支持 Axum 最新版 0.6.18,彻底改进了数据库访问层，解决了每次查询新建一个数据库链接，以致只能查询 10 余次的重大缺陷，经过更多测试，此版本支持 MariaDB,MySQL 和 PostgreSQL 数据库。支持所附全部非 Oracle 示例。本版本的功能和质量均达到可用水平。 尝鲜版 4。通过编程和测试，终于彻底修复了莲花生成的 Vue 前端。现在，前端和后端可以顺畅的工作，没有任何障碍了。莲花尝鲜版 4 除了弹性登录模块和 Oracle 数据库的功能外，其他功能都已完备。大家已经可以试用了。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">莲花尝鲜版 3 升级 Axum 至 0.6.6,并消除 2/3 的编译警告。后续版本有可能将 Axum 重新降级至 0.4。Axum0.6 的粉丝请使用此版本。您可以使用所附非 Oracle 示例测试系统，可以得到可以运行的代码生成物。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">此版本支持 Go 语言兼容性，即 Go 语言通用代码生成器仙童的模板直接生成 Rust 代码生成物。也支持 Java 兼容性，即支持 java 通用代码生成器光，和平之翼代码生成器，无垠式代码生成器的 Excel 模板直接生成 Rust 代码生成物。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 4 支持 Excel,PDF 数据导出。支持 Vue，ElementUI 的独立前端。支持 MySQL，MariaDB 和 PostgreSQL 数据库。支持图片功能。支持所附全部非 Oracle 示例。欢迎试用。</p><h3>百度话题</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">＃通用代码生成器＃</p><h3>介绍视频</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十五的视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Pw411X7h5%2F">https://www.bilibili.com/video/BV1Pw411X7h5/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1VC4y1Z7KF%2F">https://www.bilibili.com/video/BV1VC4y1Z7KF/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十四的视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Fz4y1F7jf%2F">https://www.bilibili.com/video/BV1Fz4y1F7jf/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十二的介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1MH4y1U7A1%2F">https://www.bilibili.com/video/BV1MH4y1U7A1/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十一的介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Qm4y1V77Q%2F">https://www.bilibili.com/video/BV1Qm4y1V77Q/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Ez4y157k2%2F">https://www.bilibili.com/video/BV1Ez4y157k2/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版十的介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Fh4y1P7xF%2F">https://www.bilibili.com/video/BV1Fh4y1P7xF/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版九的介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Hp4y1E7T2%2F">https://www.bilibili.com/video/BV1Hp4y1E7T2/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版八介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1qG411f7io%2F">https://www.bilibili.com/video/BV1qG411f7io/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1yV4y1Y7pM%2F">https://www.bilibili.com/video/BV1yV4y1Y7pM/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版七介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Kz4y1W7eH%2F">https://www.bilibili.com/video/BV1Kz4y1W7eH/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版六介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Cj41197nY%2F">https://www.bilibili.com/video/BV1Cj41197nY/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版五介绍视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Cg4y1574C%2F">https://www.bilibili.com/video/BV1Cg4y1574C/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Rust 通用代码生成器莲花尝鲜版 4 发布介绍视频，从源码开始构建 Rust 通用代码生成器莲花。并生成一个例程的前后端并演示运行。 视频请见：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV11N411c7H6%2F">https://www.bilibili.com/video/BV11N411c7H6/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 3</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1co4y1a7Ca%2F">https://www.bilibili.com/video/BV1co4y1a7Ca/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">尝鲜版 2</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1aj411N7YB%2F">https://www.bilibili.com/video/BV1aj411N7YB/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">冒烟测试版 4</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1jy4y1R79h%2F">https://www.bilibili.com/video/BV1jy4y1R79h/</a></p><h3>尝鲜版十六下载</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/Lotus/attach_files">https://gitee.com/jerryshensjf/Lotus/attach_files</a></p><h3>项目图片</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/RedLotus.jpg" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/pl_3.jpeg" referrerpolicy="no-referrer"></p><h3>软件截屏</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/lotus_excelg.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/lotus_wizard.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/Lotus_compare2.png" referrerpolicy="no-referrer"></p><h3>代码生成物截屏</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">日期时间对话框<span>&nbsp;</span><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/datetime.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">单表操作</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/lotus_grid.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">多对多</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/rust_mtm.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">复杂版面，树表</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/lotus_treegrid.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">图形报表</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/lotus_echarts.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">图片功能</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/lotus_pic.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Excel 数据导出</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/Lotus_excel_export.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">PDF 数据导出</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/Lotus_pdf_export.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Vue 前端日期对话框</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/front_date.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Vue 独立前端，登录界面</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/Lotus_frontend_login.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">Vue 独立前端，内页</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/jerryshensjf/Lotus/raw/master/Lotus_frontend_inner.png" referrerpolicy="no-referrer"></p><h3>源码编译用户指南</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通用代码生成器已经支持自己编译源码，我已把原来缺的前端代码生成器的 jar 包上传。支持大家自行编译源码。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">需要注意的是，现在我的开发平台是 Fedora 37 上的 openjdk 17。所以大家编译源码最好使用 openjdk17。编译好的 war 包运行在 apache tomcat 9.0 上。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">已有 jdk8 的用户报告默认下载的代码生成器 war 包在他的平台上无法运行。您如果遇到类似问题请报告。我的电子邮件是：<a href="https://www.oschina.net/action/GoToLink?url=mailto%3Ajerry_shen_sjf%40qq.com" target="_blank">jerry_shen_sjf@qq.com</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">附 openjdk 17 下载地址：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fjdk.java.net%2Fjava-se-ri%2F17">https://jdk.java.net/java-se-ri/17</a></p><h3>源码研读者注意事项</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">无垠式代码生成器第一个完整版本源码，有兴趣可以抄写一下：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5">https://gitee.com/jerryshensjf/InfinityGPGenerator_0_6_5</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">相关技术视频：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1fX4y1u7Bn%2F">https://www.bilibili.com/video/BV1fX4y1u7Bn/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1rv41187qY%2F">https://www.bilibili.com/video/BV1rv41187qY/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1xv41187cA%2F">https://www.bilibili.com/video/BV1xv41187cA/</a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1t64y1v7WA%2F">https://www.bilibili.com/video/BV1t64y1v7WA/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265553</guid>
            <link>https://www.oschina.net/news/265553</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Firefox 119.0.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Firefox 119.0.1 现已发布<span style="background-color:#ffffff; color:#333333">，此版本进行了一些 bug 修复。具体更新内容如下：</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong style="color:#333333">Fixed</strong></p><ul><li><p style="margin-left:0; margin-right:0"><span>修复了导致<code>&lt;select&gt;</code>HTML 元素中的颜色不适用于下拉菜单箭头的错误。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1861253" target="_blank">bug 1861253</a>）</span></p></li><li><p style="margin-left:0; margin-right:0"><span>修复了动态更新 ancestor&nbsp;<code>&lt;fieldset&gt;</code>上的<code>disabled</code>属性时，<code>&lt;input&gt;</code>HTML 元素状态未更改的错误。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1861027" target="_blank">bug 1861027</a>）</span></p></li><li><p style="margin-left:0; margin-right:0"><span>修复了导致单选组中带有<code>indeterminate</code>CSS 选择器的元素不更新的错误。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugzilla.mozilla.org%2Fshow_bug.cgi%3Fid%3D1861346" target="_blank">bug 1861346</a>）</span></p></li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Fen-US%2Ffirefox%2F119.0.1%2Freleasenotes%2F" target="_blank">https://www.mozilla.org/en-US/firefox/119.0.1/releasenotes/</a></p><p>下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fftp.mozilla.org%2Fpub%2Ffirefox%2Freleases%2F119.0.1%2F" target="_blank">https://ftp.mozilla.org/pub/firefox/releases/119.0.1/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 02:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265533/firefox-119-0-1-released</guid>
            <link>https://www.oschina.net/news/265533/firefox-119-0-1-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DBCart 多语言跨境商城系统 V3.1 Release 231106 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">DBCart 企业级开源 (多语言) 商城系统，使用 PHP 语言基于 Laminas + Doctrine 2 组合框架开发完成。可定制、多终端、多场景、多支付、多语言、多货币等特性。</p><ul><li>严谨的安全机制，可靠稳定；</li><li>方便的操作管理，节约时间；</li><li>清晰的权限分配，责任分明；</li><li>便捷的更新处理，一键搞定；</li><li>丰富的插件市场，扩展无限。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">默认支持：简体中文、繁体中文、英文、日文、韩文。<br><strong>后台配置好智能翻译，可以方便的在后台输入框翻译成对应语言内容，再优化修改。省时省力。</strong><br> 前台可任意切换不同语言内容。</p><h2>系统框架</h2><ul><li>Laminas （Zendframework 3）</li><li>Doctrine 2</li></ul><h2>环境要求</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>服务器系统</strong>&nbsp;Linux、Unix、Mac、Windows、其他</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>web 服务器</strong>&nbsp;Apache、Nginx、IIS、其他</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>MySQL 版本</strong>&nbsp;&gt;= 5.6</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>PHP 版本</strong>&nbsp;&gt;= 7.4</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>PHP 扩展 | 库</strong></p><ul><li>PDO</li><li>SSL（openssl）</li><li>Fileinfo</li><li>intl</li><li>Curl</li><li>GD2</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>系统空间</strong>&nbsp;&gt;= 500M</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>更新日志：</strong><br> 新增，语言包个性化定制支持<br> 新增，在线客服微信显示<br> 新增，货币设置加入货币单位<br> 优化，默认模板和健康绿模板去掉底部服务承诺<br> 优化，底层代码<br> 优化，后台单页文章标签显示<br> 优化快递 100 接口<br> 优化，更新列表页面提供系统更新日志链接<br> 优化，翻译接口<br> 优化，提示信息的语言包修改<br> 优化，前台订单金额显示优化<br> 优化，货币设置可以设置小数位数</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="background-color:#ffffff; color:#e74c3c">珑大官方全新发布&nbsp;</span><strong>语言包个性化定制扩展平台&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.loongdom.com.cn%2Fcloud%2Ftrans.html" target="_blank">https://docs.loongdom.com.cn/cloud/trans.htm</a></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>在线文档地址：</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs-dbcart.loongdom.com.cn%2F" target="_blank">https://docs-dbcart.loongdom.com.cn/</a><br><strong>前台演示地址：</strong><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdemo.dbcart.loongdom.cn%2F" target="_blank">http://demo.dbcart.loongdom.cn/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-603635b2b3ee3c73e4aa09c7e9b76d3b126.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b30e9e5073a8a315dd568014b192271bfbf.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-13a80c9b0c368adb47c0f9f3dc7560755b7.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-0b29bbfbe78d73a836170a11699f464d2c5.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-34f0b327045cf071393fee0bbc229275c28.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-eaac27f476cbb575773f4bb45111268fb5c.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdownload.loongdom.com.cn%2Fdbcart%2FV3.1%2FDBCartV3.1_Release231106.tar.gz" target="_blank">https://download.loongdom.com.cn/dbcart/V3.1/DBCartV3.1_Release231106.tar.gz</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265532</guid>
            <link>https://www.oschina.net/news/265532</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DBErp 进销存系统 V1.2 Release 231106 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="background-color:#ffffff; color:#333333"><strong>DBErp</strong><span>&nbsp;</span>基于 Laminas</span><span style="background-color:#ffffff; color:#333333">&nbsp;+ doctrine</span><span style="background-color:#ffffff; color:#333333">&nbsp;2 开发的一套进销存系统。</span></p><h2>系统框架</h2><ul><li>Laminas （Zendframework 3）</li><li>Doctrine 2</li></ul><h2>环境要求</h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>服务器系统</strong>&nbsp;Linux、Unix、Mac、Windows、其他</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>web 服务器</strong>&nbsp;Apache、Nginx、IIS、其他</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>MySQL 版本</strong>&nbsp;&gt;= 5.6</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>PHP 版本</strong>&nbsp;&gt;= 7.4</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>PHP 扩展 | 库</strong></p><ul><li>PDO</li><li>SSL（openssl）</li><li>Fileinfo</li><li>intl</li><li>Curl</li><li>GD2</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>系统空间</strong>&nbsp;&gt;= 500M</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>更新日志：</strong><br> 新增，语言包的个性化定制支持<br> 优化，销售订单加入序列号显示<br> 优化，后台商品 ajax 检索加入序列号产品标识<br> 优化，采购价格趋势图表<br> 优化，提示信息语言包<br> 优化，说明文件更新</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="background-color:#ffffff; color:#e74c3c">珑大官方全新发布&nbsp;</span><strong>语言包个性化定制扩展平台&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.loongdom.com.cn%2Fcloud%2Ftrans.html" target="_blank">https://docs.loongdom.com.cn/cloud/trans.html</a></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>在线文档地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.dberp.net%2F" target="_blank">https://docs.dberp.net/</a></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>演示地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdemo.dberp.com.cn%2F" target="_blank">https://demo.dberp.com.cn/</a></strong><br><strong>后台登录账号：</strong>dberp<br><strong>后台登录密码：</strong>123456</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img alt="dashboard" src="https://static.oschina.net/uploads/img/201906/30075605_OW5Q.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>下载地址：<span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdownload.loongdom.com.cn/dberp/V1.2/DBErpV1.2_Release231106.tar.gz" target="_blank">https://download.loongdom.com.cn/dberp/V1.2/DBErpV1.2_Release231106.tar.gz</a></span></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 02:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265531</guid>
            <link>https://www.oschina.net/news/265531</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[go-carbon v2.2.13 发布，轻量级、语义化、对开发者友好的 Golang 时间处理库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">carbon 是一个轻量级、零依赖、语义化、对开发者友好的 Golang 时间处理库，支持链式调用、农历和 gorm、xorm 等主流 orm</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">目前已被<span><span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyinggaozhen%2Fawesome-go-cn%23%25E6%2597%25A5%25E6%259C%259F%25E5%2592%258C%25E6%2597%25B6%25E9%2597%25B4" target="_blank">awesome-go-cn</a><span><span>&nbsp;</span></span>收录，如果您觉得不错，请给个 star 吧</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang-module%2Fcarbon" target="_blank">github.com/golang-module/carbon</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/golang-module/carbon" target="_blank">gitee.com/golang-module/carbon</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>更新日志</strong></p><ul><li>修复<span>&nbsp;</span><code>lang/fr.json</code><span>&nbsp;</span>和<span>&nbsp;</span><code>lang/jp.json</code><span>&nbsp;</span>文件翻译错误</li><li>修复<span>&nbsp;</span><code>IsZero</code><span>&nbsp;</span>方法的 bug&nbsp;</li><li>新增<span>&nbsp;</span><code>IsDST</code><span>&nbsp;</span>方法，判断是否是夏令时</li><li>新增<span>&nbsp;</span><code>Closest</code><span>&nbsp;</span>方法，获取距离指定 Carbon 对象最近的 Carbon 对象</li><li>新增<span>&nbsp;</span><code>Farthest</code><span>&nbsp;</span>方法，获取距离指定 Carbon 对象最远的 Carbon 对象</li><li>将<span>&nbsp;</span><code>modifier.go</code><span>&nbsp;</span>更名为<span>&nbsp;</span><code>boundary.go</code>,<span>&nbsp;</span><code>modifier_test.go</code><span>&nbsp;</span>更名为<span>&nbsp;</span><code>boundary_test.go</code></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 01:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265516/go-carbon-2-2-13-released</guid>
            <link>https://www.oschina.net/news/265516/go-carbon-2-2-13-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Simple Admin - Go 语言分布式后台管理系统 v1.2.2 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>Simple Admin Go 语言分布式后台管理系统 v1.2.2 更新</h2><h3>项目介绍</h3><p>Simple Admin 是一个开箱即用的分布式微服务后端管理系统，基于 go-zero 开发，为开发中大型后台提供了丰富的功能，支持三端代码生成。 官方自带多种扩展，助力中小企业快速上云，快速迭代。适合用于微服务学习和商用，开源免费。</p><h3>Simple Admin Core/Job/MCMS/FMS v1.2.2 更新</h3><h4>介绍</h4><p>核心模块 Core, 定时任务模块 Job, 消息中心模块 MCMS, 以及文件管理模块 FMS 均已升级至 v1.2.2</p><h4>本次更新</h4><ul><li>修复：mysql all in one 配置错误</li><li>新增：强制重置超级管理员权限功能</li><li>新增：新增数据库初始化开关配置，用于关闭初始化接口</li><li>新增：禁用用户后拉黑所有 token</li><li>修复：更新角色时出现的空指针错误</li><li>优化：优化菜单 i18n 翻译</li><li>新增（Common）：系统繁忙的 common 信息字段</li><li>修复（Common）：修复依赖版本导致的漏洞</li><li>修复（FMS）：修复空标签导致的前端显示错误</li><li>修复（FMS）：后台设置标签为空导致的不更新问题</li><li>更新： 更新依赖</li></ul><h3>Simple Admin Backend UI v1.2.2 更新</h3><h4>介绍</h4><p>Simple Admin UI 是基于 vue-vben-admin 二次开发的为 Simple Admin 专门开发的后台管理界面，基于 Vue3 和 TypeScript 开发， 提供后台错误统一处理，国际化等功能，本项目完全免费，可用于学习和商用.</p><h4>本次更新</h4><ul><li>修复：错误的目录类型值</li><li>修复：file API 提示信息改为 notice</li><li>修复：tree select 自动刷新失败的 bug</li><li>优化：优化 i18n 翻译信息</li><li>更新：更新依赖</li></ul><h3>Goctls v1.6.11 更新</h3><h4>介绍</h4><p>Goctls 是一个基于 Go Zero 官方生成工具 Goctl 开发的针对 Simple Admin 适配优化的生成工具。提供强大的代码生成功能，同时集成了许多定制工具，实现快速开发微服务接入后台和前台​。三端代码生成可以大大提升开发效率，欢迎体验​。</p><h4>特性</h4><ul><li>go-swagger : 基于 go-swagger 而不是官方的@doc 注解</li><li>多国语言支持</li><li>优化错误信息处理,支持多语言错误</li><li>简单易用的校验器</li><li>支持代码生成，生成 API,RPC 和 web 端的 CRUD 代码</li><li>支持多种额外插件如 GORM, RocketMQ</li><li>对 Simple Admin 的针对性优化</li><li>rpc logic group 分组</li><li>全面支持 Ent 代码生成</li><li>额外工具如本地日志查看，环境变量查看</li></ul><h4>本次更新</h4><ul><li>更新： 更新项目升级版本</li><li>更新： 更新依赖</li></ul><h3>更新预览</h3><blockquote><p>后台 Tree Select 修复点击加载</p></blockquote><p><img height="909" src="https://oscimg.oschina.net/oscnet/up-3363d8623829bd8408512ae8245285668b0.jpg" width="1062" referrerpolicy="no-referrer"></p><blockquote><p>Core 新增初始化配置</p></blockquote><p><img height="311" src="https://oscimg.oschina.net/oscnet/up-296a416b1e7dba1c8ecaa1786b254d6ff07.jpg" width="1050" referrerpolicy="no-referrer"></p><blockquote><p>优化菜单翻译</p></blockquote><p><img height="905" src="https://oscimg.oschina.net/oscnet/up-36009b7045d1fd5d3f0457faa16a8bcc552.jpg" width="945" referrerpolicy="no-referrer"><img height="913" src="https://oscimg.oschina.net/oscnet/up-5f23f89e6e59944302f051bce8b7f3e726b.jpg" width="639" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">项目文档地址:&nbsp;&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.ryansu.tech%2Fzh%2F" target="_blank">https://doc.ryansu.tech/zh/</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Gitee:&nbsp;&nbsp;<a href="https://gitee.com/hopefire/simple-admin-core">https://gitee.com/hopefire/simple-admin-core</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Github:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuyuan32%2Fsimple-admin-core" target="_blank">https://github.com/suyuan32/simple-admin-core</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 01:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265509</guid>
            <link>https://www.oschina.net/news/265509</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[iSulad v2.1.4 发布，云原生轻量级容器解决方案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>iSulad v2.1.4 已经发布，云原生轻量级容器解决方案</p><p>此版本更新内容包括：</p><h2>依赖组件版本</h2><table><tbody><tr><th>组件</th><th>版本</th><th>commit</th></tr></tbody><tbody><tr><td>lcr</td><td>v2.1.3</td><td>0075890d5</td></tr></tbody></table><h2>当前 release 版本合入 PR 列表</h2><div><pre><code>2023-11-07 xuepengxu release 2.1.4
    - !2238 modify the default value of EANBLE_IMAGE_LIBARAY to off * modify the default value of EANBLE_IMAGE_LIBARAY to off
    - !2237 delete the disabled reload configuration in isulad.service
    - !2235 [CI] change base ci test image to fedora
    - !2234 network:update dnsname verison * network:update dnsname verison
    - !2229 Fix critest fail for symlink volume * Fix critest fail for symlink
    - !2227 doc:update the cni plugins version * doc:update the cni plugins version
    - !2228 bugfix:'for' loop initial declarations are only allowed in C99 mode * bugfix:'for' loop initial declarations are only allowed in C99 mode
    - !2225 bugfix:fix typos and header file reference * bugfix:fix typos and header file reference
    - !2208 network:libcni upgrades v1.0.0
    - !2224 still use lxc 4.0.3 in CI tests * still use lxc 4.0.3 in CI tests
    - !2223 [Sandbox API]: update doc of shim controller design * [Sandbox API]: update doc of controller design
    - !2221 add create gpu container manual * add create gpu container manual
    - !2222 [Sandbox API]: update pod stats in cri_api_v1 * [Sandbox API]: Update pod stats in cri_api_v1
    - !2206 [Sandbox API]: add shim controller for cri-api-v1
    - !2217 [Sandbox API]: Fix sandbox dir not existed issue in SetupSandboxNetwork * [Sandbox API]: Fix sandbox dir not existed issue
    - !2218 install meson in CI * install meson in CI
    - !2216 use lxc master branch * use lxc master branch
    - !2210 document optimization:libcni upgrades v1.0.0 * document optimization:libcni upgrades v1.0.0
    - !2207 [refactor] update possible changed resources for oci spec
    - !2215 network:bugfix memory leak * network:bugfix memory leak
    - !2211 network:auto free for libcni * network:auto free for libcni
    - !2212 bugfix for rt_isula_exec_resize * bugfix for rt_isula_exec_resize
    - !2209 add runc listpid implement
    - !2205 bugfix for add --root option Merge pull request !2205 from zhongtao/fix
    - !2204 [refactor] eliminate duplicate code * [refactor] use common utils from libisula to eliminate duplicate code
    - !2203 add --root option when calling runc
    - !2067 add podsanbox cri interface design doc * add podsanbox cri interface design doc
    - !2200 remove same code and replace to isula-libutils
    - !2202 use __isula_auto_prw_unlock to improve code * use __isula_auto_prw_unlock to improve code
    - !2201 Add m_calls mutex in controller monitor * Add m_calls mutex in controller monitor
    - !2066 add sandbox module design doc * add sandbox module design doc
    - !2199 Add retry function for bigdata_stream_runc * !2195 Add retry function for bigdata_stream_runc
    - !2198 allow tls_mode not set * Allow tls_mode not set in grpc context from client
    - !2197 add config for enable cri v1
    - !2196 find libisulad_shim_libutils.a from libisula.pc * find libisulad_shim_libutils.a from libisula.pc
    - !2194 [CI] do not use tty to run docker run
    - !2193 [CI] fix relative path of file
    - !2192 【CI】new docker container do not need change resolv
    - !2191 [CI] support build isulad on many linux distros
    - !2190 [refactor] adapt new library for libisulad-shim utils
    - !2189 Limit the response size of ExecSync * !2129 Limit the response size of ExecSync
    - !2187 update docs/design/detailed/Image/remote_ro_design.md. * update docs/design/detailed/Image/remote_ro_design.md.
    - !2186 update docs/design/detailed/Image/image_storage_driver_design_zh.md. * update docs/design/detailed/Image/image_storage_driver_design_zh.md.
    - !2184 update docs/build_docs/guide/build_guide_riscv_zh.md. * update docs/build_docs/guide/build_guide_riscv_zh.md.
    - !2188 Support both C++11 and C++17 * Support both C++11 and C++17
    - !2185 sync from stable branch Merge pull request !2185 from haozi007/fixbug
    - !2183 Fix code inspection and add macro isolation
    - !2180 fix execlp not enough args * fix execlp not enough args
    - !2182 Add mutex for container list in sandbox * Add mutex for container list in sandbox
    - !2173 remove unneccessary strerror
    - !2176 [Sandbox API]Add vsock support for exec
    - !2171 Fix nullptr in src/daemon/entry * !2160 Fix nullptr in src/daemon/entry
    - !2168 fix code bug * fix code bug
    - !2163 add bind mount file lock * add bind mount file lock
    - !2162 Fix rename issue for id manager Merge pull request !2162 from xuxuepeng/master
    - !2158 Use crictl v1.22.0 for ci * Use crictl v1.22.0 for ci
    - !2156 Fix sandbox error logging * Fix sandbox error logging
    - !2155 Use reference in loop in listpodsandbox * Use reference in loop in listpodsandbox

    dev stats:
      - 325 files changed, 7714 insertions(+), 3264 deletions(-)
      - contributors: haozi007, zhongtao, liuxu, xuxuepeng, zhangxiaoyu, jake, wangyu, jikai
</code></pre><div>
  &nbsp;
 </div></div><p>详情查看：<a href="https://gitee.com/openeuler/iSulad/releases/v2.1.4">https://gitee.com/openeuler/iSulad/releases/v2.1.4</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 06 Nov 2023 01:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265508</guid>
            <link>https://www.oschina.net/news/265508</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[前端开源项目 Fes- Design Release v0.8.13]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcompare%2Fv0.8.12...v0.8.13" target="_blank">0.8.13</a><span>&nbsp;</span>(2023-11-06)</h2><h3>Bug Fixes</h3><ul><li><strong>Draggable:</strong><span>&nbsp;</span>修复可同时拖拽多个元素、和不可放置时跨容器拖拽报错的问题 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F494" target="_blank">#494</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F18839e5d9e33f39d50ad8ce70bd99b07fd794fa6" target="_blank">18839e5</a>)</li><li><strong>Form:</strong><span>&nbsp;</span>修复表单嵌套时必填项样式设置的问题 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F499" target="_blank">#499</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F7827186a739fd3ff31efd2f27290bc68c9ae2a70" target="_blank">7827186</a>)</li><li><strong>Form:</strong><span>&nbsp;</span>异步表单校验支持 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F496" target="_blank">#496</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F42798f253aa2229f6c8ac3255e20891c1ff93034" target="_blank">42798f2</a>)</li><li><strong>Modal:</strong><span>&nbsp;</span>解决无标题情况下，关闭按钮不可点击的问题 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F504" target="_blank">#504</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F359471783feda0475249e19950dfbb51193d2f33" target="_blank">3594717</a>)</li></ul><h3>Features</h3><ul><li>上传组件 Upload 禁用样式优化，表单项组件 FormItem 支持 align 配置项，及 支持多行文本展示 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F493" target="_blank">#493</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F896ac1761334b04b56d184c50edaaea3ff730ceb" target="_blank">896ac17</a>)</li><li><strong>Table:</strong><span>&nbsp;</span>增加 hover 行样式、斑马线条纹，配置项 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F502" target="_blank">#502</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F732dc5d74dc5aeb954f35e1589659c26b0f2129a" target="_blank">732dc5d</a>)</li><li><strong>Table:</strong><span>&nbsp;</span>展开行图标，修改及增加 hover 态交互 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F501" target="_blank">#501</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2Fe90d68300c2fd8be847f441445e1c15fc789438d" target="_blank">e90d683</a>)</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 09:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265430/fes-design-0-8-13-released</guid>
            <link>https://www.oschina.net/news/265430/fes-design-0-8-13-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[BackupSerenity V2.0 发布 - 开源数据库备份思路整合工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong><span style="color:#e74c3c">本次实现了在 Docker 中运行，将原有的底层相关环境舍去，直接在容器内运行，将原有 30min-1h 的部署过程，提升至 3min 内完成，大幅提升部署效率！</span></strong></p><p><span style="color:#e74c3c"><strong>只需要一条命令即可解决：具体参考</strong></span><a href="https://gitee.com/heike07code/Backup-tools/blob/V2.0/Doc/QuickStart.md"><span style="color:#e74c3c"><strong>Quick start 文档</strong></span></a><span style="color:#e74c3c"><strong>：</strong></span></p><pre><span>docker pull heike07/backupserenit</span></pre><p>此版本更新如下：</p><h3>V2.0 版本发布说明</h3><p><strong>新增功能：</strong></p><ol><li>新增判断当前环境是否为 docker 的逻辑和函数</li><li>新增 backupserenity 控制主程序</li><li>实现 docker 容器化封装，运行</li></ol><p><strong>修复错误功能：</strong></p><ol><li>去除容器内 crontab 定期任务逻辑</li><li>修复 docker exec 无法调度，提示 exit 1 的问题</li><li>解决 systemd 无法在容器中执行</li></ol><p>Gitee 详情见项目 Readme :&nbsp;<a href="https://gitee.com/heike07code/Backup-tools/tree/V2.0">https://gitee.com/heike07code/Backup-tools/tree/V2.0</a></p><p>Github 详情见项目 Readme :&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fheike-07%2FBackup-tools%2Ftree%2FV2.0" target="_blank">https://github.com/heike-07/Backup-tools/tree/V2.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 06:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265377</guid>
            <link>https://www.oschina.net/news/265377</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[HeidiSQL 12.6 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>HeidiSQL 12.6 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fforum.php%3Ft%3D41419%26cookie_consent%3D1" target="_blank">发布</a>。HeidiSQL 是一个功能非常强大的数据库客户端软件，采用 Delphi 开发，支持 Windows 操作系统。支持 MySQL、MariaDB、Percona Server 和微软的 SQL Server。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">此版本具体更新内容如下：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>3rd party updates：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmadshi.net%2F" target="_blank">将 madExcept</a>&nbsp;异常处理程序更新至 v5.1.3</li><li>升级到&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.embarcadero.com%2Fpress-releases%2Frad-studio-11-3-released" target="_blank">Delphi 编译器版本 11.3</a></li><li>更新&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJAM-Software%2FVirtual-TreeView" target="_blank">VirtualTrees</a>&nbsp;组件代码至 v7.6.5a</li><li>从当前主分支更新&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FRRUZ%2Fvcl-styles-utils" target="_blank">vcl-styles-utils</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2F" target="_blank">将 SQLite 库</a>更新到 v3.44.0</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1841" target="_blank">Issue #1841</a>：将 libpq-15.dll 使用的&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.openssl.org%2F" target="_blank">OpenSSL 库更新到 v3.1.3</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.chiark.greenend.org.uk%2F%7Esgtatham%2Fputty%2F" target="_blank">将 plink</a>&nbsp;可执行文件更新到 v0.79</li></ul><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>新的东西：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F861" target="_blank">Issue #861</a>：所有结果网格中新的静态行 id 列。使用会话背景颜色，并且可以隐藏。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fscreenshots.php%3Fwhich%3Ddata" target="_blank">见截图</a>）</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F750" target="_blank">Issue #750</a>：现在使用 2 个新的在线格式化程序进行 SQL 格式化：（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fscreenshots.php%3Fwhich%3Dreformat-sql" target="_blank">见截图</a>） 
  <ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdoctrine%2Fsql-formatter" target="_blank">https://github.com/doctrine/sql-formatter</a>&nbsp;- 托管在 heidisql.com</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlformat.org%2F" target="_blank">https://sqlformat.org/</a></li></ul></li><li>在数据网格标题上添加上下文菜单，其中包含「Query exact row count」项，可在底层表中查询<code><span><span style="color:royalblue"><strong>SELECT</strong></span></span>&nbsp;<span><span style="color:teal">COUNT</span></span>(*)...</code></li><li>支持单行主选项卡，并支持每个鼠标滚轮选项卡滚动</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F940" target="_blank">Issue #940</a>：支持删除首选项中每个按钮的快捷方式。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fscreenshots.php%3Fwhich%3Dshortcut-customizer" target="_blank">见截图</a>）</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1619" target="_blank">Issue #1619</a>：使用与保存查询文件相同的热键 (&nbsp;<code>Ctrl+S</code>) 来保存 table/trigger/...</li></ul><p style="text-align:start"><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>错误修复和增强功能：</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1863" target="_blank">Issue #1863</a>：&nbsp;再次修复了与 Wine v8.18 的兼容性，并可能与更多版本兼容</li><li>非活动选项卡上的灰度图标，以获得更清晰的用户界面（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fscreenshots.php%3Fwhich%3Ddata" target="_blank">见屏幕截图</a>）</li><li>用于关闭选项卡的 double-click 和 middle-click 选项（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fscreenshots.php%3Fwhich%3Dfiles-and-tabs-preferences" target="_blank">见屏幕截图</a>）</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1854" target="_blank">Issue＃1854</a>：修复当存在具有有效查询的注释时网格更新中使用的不正确的表名称</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F279" target="_blank">Issue#279</a>：PosgreSQL 中支持串行列，这与 MySQL 上的 auto_increment 不同</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F872" target="_blank">Issue #872</a>：修复打开列定义为<code>INVISIBLE</code>的表时发生崩溃的问题，并确保选择此类列并在数据网格中可见</li><li>翻译修复：删除各种未使用的字符串，修复一些拼写错误的字符串，添加一些缺失的字符串</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1850" target="_blank">Issue #1850</a>：当字段包含高位 UTF-8 字符（如表情符号）时，弹出文本编辑器中的文本太短</li><li>添加缺失的<code>PMYSQL_LENGTHS</code>类型，并将其用于<code><span><span style="color:teal">mysql_fetch_lengths</span></span>()</code>的结果。修复了一个自 2009 年起就已出现的问题</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1640" target="_blank">Issue＃1640</a>：通过计时器事件关闭/释放选项卡和按钮，修复查询选项卡关闭按钮的 MouseUp 事件中的崩溃</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F752" target="_blank">Issue #752</a>：修复在 MySQL 8 上导出 SQL 时覆盖视图辅助表导致 "xyz is not view"的问题</li><li>键盘快捷键：允许用户接受每个 ignore button 的重复分配。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fscreenshots.php%3Fwhich%3Dshortcut-customizer" target="_blank">见截图</a>）</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHeidiSQL%2FHeidiSQL%2Fissues%2F1826" target="_blank">Issue #1826</a>：修复 MySQL 8 上<code><span><span style="color:royalblue"><strong>DEFAULT</strong></span></span></code>子句中没有括号的<code><span><span style="color:royalblue"><strong>ON</strong></span></span>&nbsp;<span><span style="color:royalblue"><strong>UPDATE</strong></span></span></code>部分，仅初始<code><span><span style="color:royalblue"><strong>DEFAULT</strong></span></span></code>值需要括号。</li><li>修复了在上传的崩溃报告中发现的许多不同的崩溃： 
  <ul><li>修复遵循外键值后的崩溃问题</li><li>修复搜索/替换对话框中偶发的崩溃「Cannot make a visible window modal」</li><li>修复了在尝试获取当前剪贴板文本时出现的崩溃问题</li><li>CSV scanner：修复无法打开所选文件名时的崩溃问题</li><li>使用新的&nbsp;class helper .TrySetFocus 修复对 [TWinControl].SetFocus 的各种调用中的偶发崩溃</li><li>修复 highlighter customizer 中的崩溃（只要未选择任何属性）</li><li>修复 TMainForm.DBtreeFocusChanged:124 中的 EAccessViolation 问题</li><li>修复了尝试停止当前查询且 helper connection 由于某种原因无法连接时崩溃的问题。</li><li>修复 TDBObject.GetImageIndex:6 中的 EAccessViolation</li><li>修复 TMainForm.DBtreeGetText:12 中的 EAccessViolation</li><li>捕获在 ForceDirectories() 的罕见情况下发生的不同 EInOutError 异常</li><li>修复 TMainForm.AnyGridGetText 中的 EAccessViolation:5</li><li>修复了用户在非 MySQL 会话中单击维护对话框上的「Help」按钮时崩溃的问题</li><li>在 RunQueryFile 中捕获额外的 EReadError 崩溃</li><li>MSSQL：当无法列出 provider names 时捕获 OLE 异常</li><li>修复通过 SSH 隧道连接时 TMainForm.DBtreeGetText 发生的崩溃</li><li>修复连接到另一个会话时使用 focused Host tab 发生的偶发崩溃</li><li>警告用户在加载编码设置为「auto-detect」的 (csv) 文件时可能会丢失数据。</li></ul></li></ul><p><span style="background-color:#ffffff; color:#333333">详情可</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heidisql.com%2Fforum.php%3Ft%3D41419%26cookie_consent%3D1" target="_blank">查看发布公告</a><span style="background-color:#ffffff; color:#333333">。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 06:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265361/heidisql-12-6-released</guid>
            <link>https://www.oschina.net/news/265361/heidisql-12-6-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kotlin Multiplatform 已稳定，可用于生产环境]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Kotlin Multiplatform (KMP) 是一项由 JetBrains 构建的开源技术，使开发者能够在跨平台共享代码的同时保留原生编程的优势。</p><p>现在，这项技术取得了备受期待的进展，<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fzh-hans%2Fkotlin%2F2023%2F11%2Fkotlin-multiplatform-stable%2F" target="_blank">已经稳定</a></u>并完全做好了投入生产环境的准备</strong>。</p><p>根据介绍，Kotlin Multiplatform (KMP) 以灵活性和适应性为设计核心，模糊了跨平台与原生开发之间的界限。它使开发者可以重用尽可能多的代码，根据需要编写原生代码，并将共享的 Kotlin 代码无缝集成到任何项目中。</p><p>Kotlin Multiplatform 技术的核心由许多部分组成，例如编译器支持、语言功能、库 API、IDE、构建工具等。 这些部分覆盖了最热门的代码共享用例，并且在 Kotlin 1.9.20 中得到稳定。&nbsp;</p><p>除了核心之外，KMP 还有一些仍在继续开发的更高级部分。 expect/actual 类就是此类功能的一个示例（请勿与 expect/actual_函数_混淆，它们在 Kotlin 1.9.20 中已完全稳定）。 此类功能被明确标记为非稳定，Kotlin 会在您使用它们时发出通知。 请注意实验性警告和相应文档，以便明智地决定是否要在项目中使用此类功能。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 05 Nov 2023 06:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265360/kotlin-multiplatform-stable</guid>
            <link>https://www.oschina.net/news/265360/kotlin-multiplatform-stable</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
