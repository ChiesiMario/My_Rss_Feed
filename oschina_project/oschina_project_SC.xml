<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-软件更新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news/project" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-软件更新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 07 Mar 2024 10:47:01 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[野火 IM 1.2.3 已经发布，即时通讯系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>野火 IM 1.2.3 已经发布，即时通讯系统</p><p>此版本更新内容包括：</p><p>Release note 1.2.3:</p><ol><li>同步专业版 IM 服务 server SDK。</li><li>添加对鸿蒙平台的支持。</li><li>解决 server 端音视频 SDK 信令支持问题。</li><li>升级部分依赖，解决漏洞问题</li></ol><blockquote><p>附件的版本有 3 种格式，分别是 Java 通用版本、Deb 格式安装包和 Rpm 格式安装包包，可以根据平台或者自己的习惯下载其中一种软件包。另外在<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwildfirechat%2Fim-server%2Freleases" target="_blank">Github</a>也可以下载。也可以下载我们网站上的最新版本，<a href="https://gitee.com/link?target=http%3A%2F%2Fstatic.wildfirechat.cn%2Fdistribution-latest-bundle-tar.tar.gz" target="_blank">通用 Java 包</a>，<a href="https://gitee.com/link?target=http%3A%2F%2Fstatic.wildfirechat.cn%2Fim-server-latest.deb" target="_blank">deb 格式安装包</a>和<a href="https://gitee.com/link?target=http%3A%2F%2Fstatic.wildfirechat.cn%2Fim-server-latest.rpm" target="_blank">rpm 格式安装包</a>。 *** 0.42 版本增加了群成员数限制，默认为 2000。如果您想修改默认值，可以在升级版本之后，修改 t_setting 表，把默认的大小改为您期望的。另外修改 t_group 表，把已经存在的群组 max_member_count 改成您期望的，然后重启。*** *** 0.46 和 0.47 版本升级到 0.48 及以后版本时，可能会提示 flyway migrate 38 错误，请执行 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwildfirechat%2Fserver%2Fblob%2Fwildfirechat%2Fflyway_repaire_migrate_38.sql" target="_blank">修复脚本</a> 进行修复。0.46 和 0.47 版本之外的版本不会出现此问题。*** *** 0.50 版本添加了是否允许客户端发送群操作通知的配置。如果您在客户端自定义群通知，需要在服务器端配置允许，没有使用自定义群操作通知的不受影响。*** *** 从 0.54 之前版本升级到 0.54 及以后版本时，会提示 flyway migrate 错误。因为 0.54 版本删除了 sql 脚本中默认敏感词的内容，flyway checksum 失败。请执行<code>update flyway_schema_history set checksum = 0 where script = 'V17__add_default_sensitive_word.sql';</code>来修复。*** *** 从 0.59 之前的版本升级到之后的版本执行数据库升级时间比较长，请耐心等待提示运行成功，避免中途中断。 *** *** 0.62/0.63 版本有严重的问题，请使用 0.64 及以后版本，或者 0.61 版。 *** *** 从 0.68 版本起添加了 pc 在线是否默认手机接收推送的开关，默认为开，与以前版本作用相反，请注意兼容（可以关掉与之前保持一致或者升级客户端） *** *** 从 0.78 版本起把 MySQL 数据库中关键字都改为大小写敏感，另外生成 id 的方法也做了改变，只生成小写的 id，避免出现 id 重复的问题，建议所有客户都升级 *** *** 从 0.79 版本起把 log4j 升级到 log4j2，因为 log4j 已经不再维护而且还有已知的漏洞，建议所有客户都升级，升级时注意更新 log4j2 的配置文件 *** *** 0.97 版本更改了启动脚本<code>wildfirechat.sh</code>，如果是升级服务，请注意更新启动脚本。***</p></blockquote><h1>历史更新记录</h1><p>请参考附件的 release_note.md</p><p>详情查看：<a href="https://gitee.com/wfchat/im-server/releases/1.2.3">https://gitee.com/wfchat/im-server/releases/1.2.3</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 08:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281997/wildfirechat-1-2-3-released</guid>
            <link>https://www.oschina.net/news/281997/wildfirechat-1-2-3-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一个使用 Java 开发的 LLM 应用开发框架，Agents-Flex alpha.2 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="235" src="https://oscimg.oschina.net/oscnet/up-28f28677527d13113c29a56916625bb1b3d.png" width="300" referrerpolicy="no-referrer"></p><h1>Agents-Flex： 一个使用 Java 开发的 LLM（大语言模型） 应用开发框架</h1><h2>基本能力</h2><ul><li>LLM 的访问能力</li><li>Prompt、Prompt Template 定义加载的能力</li><li>Function Calling 定义、调用和执行等能力</li><li>记忆的能力（Memory）</li><li>Embedding</li><li>Vector Storage</li><li>文档处理 
  <ul><li>加载器（Loader） 
    <ul><li>Http</li><li>FileSystem</li></ul></li><li>分割器（Splitter）</li><li>解析器（Parser） 
    <ul><li>PoiParser</li><li>PdfBoxParser</li></ul></li></ul></li><li>LLM Chain</li><li>Agents Chain</li></ul><h2>功能列表</h2><p><img src="https://oscimg.oschina.net/oscnet/up-5335d770976c07c928c526ed75372a2d6b8.png" referrerpolicy="no-referrer"></p><h2>简单对话示例</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 OpenAi 大语言模型:</p><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>OpenAiConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"sk-rts5NF6n*******"</span></span><span>);</span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Prompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"请写一个关于小兔子战胜大灰狼的故事。"</span></span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"---&gt;"</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 「通义千问」 大语言模型:</p><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>QwenLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>QwenLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"sk-28a6be3236****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setModel</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"qwen-turbo"</span></span><span>);</span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>QwenLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Prompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"请写一个关于小兔子战胜大灰狼的故事。"</span></span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"---&gt;"</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 「讯飞星火」 大语言模型:</p><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>SparkLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setAppId</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiSecret</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Prompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"请写一个关于小兔子战胜大灰狼的故事。"</span></span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"---&gt;"</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><h2>历史对话示例</h2><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span>(</span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span>)</span></span><span></span><strong><span>throws</span></strong><span></span><strong><span>InterruptedException</span></strong><span>{</span></span><span><strong>SparkLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setAppId</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiSecret</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">// 创建一个大模型</span></span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlm</strong><span>(</span><span>config</span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">//创建一个历史对话的 prompt</span></span></span><span><strong>HistoriesPrompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>HistoriesPrompt</strong><span>();</span></span><span><strong>System</strong><span>.</span><span style="color:#008080"><span style="color:#d73a49">out</span></span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"您想问什么？"</span></span><span>);</span></span><span><strong>Scanner</strong><span>scanner</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>Scanner</strong><span>(</span><strong>System</strong><span>.</span><span style="color:#008080"><span style="color:#d73a49">in</span></span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">//等待用户从控制枱输入问题</span></span></span><span><strong>String</strong><span>userInput</span><span>=</span><span>scanner</span><span>.</span><span style="color:#008080">nextLine</span><span>();</span></span><span><strong><span style="color:#d73a49">while</span></strong><span>(</span><span>userInput</span><span>!=</span><strong><span style="color:#005cc5">null</span></strong><span>){</span></span><span><span>prompt</span><span>.</span><span style="color:#008080">addMessage</span><span>(</span><strong><span style="color:#d73a49">new</span></strong><strong>HumanMessage</strong><span>(</span><span>userInput</span><span>));</span></span><span><span style="color:#888888"><span style="color:#6a737d">//向大模型提问</span></span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>instance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080"><span style="color:#d73a49">out</span></span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"&gt;&gt;&gt;&gt; "</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><span style="color:#888888"><span style="color:#6a737d">//继续等待用户从控制枱输入内容</span></span></span><span><span>userInput</span><span>=</span><span>scanner</span><span>.</span><span style="color:#008080">nextLine</span><span>();</span></span><span><span>}</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><h2>Function Calling&nbsp;示例</h2><ul><li>第一步：通过注解定义本地方法</li></ul><div><div><pre><span><strong><span style="color:#d73a49">public</span></strong><strong><span><span style="color:#d73a49">class</span></span></strong><span></span><strong><span><span style="color:#6f42c1">WeatherUtil</span></span></strong><span></span><span>{</span></span><span><span><span style="color:#6a737d">@FunctionDef</span></span><span><span style="color:#6a737d">(</span></span><span><span style="color:#6a737d">name</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"get_the_weather_info"</span></span></span><span><span style="color:#6a737d">,</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">description</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"get the weather info"</span></span></span><span><span style="color:#6a737d">)</span></span></span><span><strong><span style="color:#d73a49">public</span></strong><strong>static</strong><strong>String</strong><strong>getWeatherInfo</strong><span>(</span></span><span><span><span style="color:#6a737d">@FunctionParam</span></span><span><span style="color:#6a737d">(</span></span><span><span style="color:#6a737d">name</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"city"</span></span></span><span><span style="color:#6a737d">,</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">description</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"the city name"</span></span></span><span><span style="color:#6a737d">)</span></span><strong>String</strong><span>name</span></span><span><span>)</span><span>{
&nbsp;       <span style="color:#6a737d">//这里应该是通过接口去调用获得天气信息</span></span></span><span><strong><span style="color:#d73a49">return</span></strong><span>name</span><span>+</span><span style="color:#dd2200"><span style="color:#032f62">"的天气是阴转多云。 "</span></span><span>;</span></span><span><span>}</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><ul><li>第二步：通过 Prompt、Functions 传入给大模型，然后得到结果</li></ul><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>OpenAiLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"sk-rts5NF6n*******"</span></span><span>);</span></span><span><strong>OpenAiLlm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Functions</strong><span>&lt;</span><strong>String</strong><span>&gt;</span><span>functions</span><span>=</span><strong>Functions</strong><span>.</span><span style="color:#008080">from</span><span>(</span><strong>WeatherUtil</strong><span><span>.</span></span><span style="color:#008080"><span><span style="color:#d73a49">class</span></span></span><span><span>,</span></span><span></span><strong><span><span style="color:#6f42c1">String</span></span></strong><span><span>.</span></span><span style="color:#008080"><span><span style="color:#6f42c1">class</span></span></span><span><span>)</span>;</span></span><span><strong>String</strong><span>result</span><span>=</span><span>llm</span><span>.</span><span style="color:#008080">call</span><span>(</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"今天的天气如何"</span></span><span>),</span><span>functions</span><span>);</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span>result</span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">// "北京的天气是阴转多云。 ";</span></span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre></div></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">注意：当前版本为 v1.0.0-alpha.2 ，还在开发中，请暂时勿使用于正式的商业产品中。</p><h2>开源地址​：</h2><ul><li>Gitee:&nbsp;<a href="https://gitee.com/agents-flex/agents-flex">https://gitee.com/agents-flex/agents-flex</a></li><li>Github:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fagents-flex%2Fagents-flex" target="_blank">https://github.com/agents-flex/agents-flex</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 08:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281991/agents-flex-alpha2</guid>
            <link>https://www.oschina.net/news/281991/agents-flex-alpha2</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[EmbedXrpc V5.0.0 已经发布，用於单片机场景的「gRPC」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>EmbedXrpc V5.0.0 已经发布，用於单片机场景的「gRPC」</p><p>此版本更新内容包括大版本，重大变更：</p><p>1.移植 Free RTOS 的 message buffer/queue 到 WIN32 和裸机</p><p>2.重构 RunTime 配置，减小很多无用内存</p><p>详情查看：<a href="https://gitee.com/snikeguo/EmbedXrpc/releases/V5.0.0">https://gitee.com/snikeguo/EmbedXrpc/releases/V5.0.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 08:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281985/embedxrpc-5-0-0-released</guid>
            <link>https://www.oschina.net/news/281985/embedxrpc-5-0-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[KCL v0.8.0 重磅发布 - 融汇社区生态，助力配置体验!]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><span>简介</span></h2><p><img height="1254" src="https://oscimg.oschina.net/oscnet/up-6dd01390dcc57caa46f5a95963603bef6f6.png" width="1819" referrerpolicy="no-referrer"></p><p>KCL 团队很高兴地宣布&nbsp;<strong>KCL v0.8.0 新版本现在已经可用</strong>！本次发布为大家带来了三方面的重点更新：<strong>语言</strong>、<strong>工具链</strong>、<strong>社区集成 &amp; 扩展支持</strong>。</p><ul><li><p><em>使用功能更完善错误更少的 KCL 语言、工具链和 IDE 提升代码编写体验和效率</em></p></li><li><p><em>更加全面丰富的社区生态集成，改善运维体验</em></p></li><li><p><em>更加丰富的 KCL 三方库模型，更加轻松的与云原生生态集成</em></p></li></ul><p>进一步您可以在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Freleases%2Ftag%2Fv0.8.0" target="_blank">KCL v0.8.0 发布页面</a>&nbsp;或者&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">KCL 官方网站</a>&nbsp;获得下载安装指南和详细发布信息。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl" target="_blank">KCL</a>&nbsp;是一个 CNCF 基金会托管的面向云原生领域开源的基于约束的记录及函数编程语言，期望通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于围绕配置的模块化、扩展性和稳定性，打造更简单的逻辑编写体验，构建更简单的自动化和生态集成路径。</p><h2><span>语言更新</span></h2><h3><span>🚗 语法语义更新</span></h3><h4><span>支持&nbsp;<code>show-hidden</code></span></h4><p>通过&nbsp;<code>--show-hidden</code>&nbsp;参数显示私有变量。</p><p>KCL 程序如下</p><pre><code>a&nbsp;=&nbsp;{_b&nbsp;=&nbsp;<span>1</span>}
</code></pre><p>通过命令&nbsp;<code>kcl run main.k --show-hidden</code>&nbsp;编译结果如下</p><pre><code><span>a:</span>
&nbsp;&nbsp;<span>_b:</span>&nbsp;<span>1</span></code></pre><h4><span>支持参数和关键字参数的合并</span></h4><p>KCL v0.8.0 版本中新增了参数和关键字参数的合并功能。带参数的 schema 实例在合并操作时参数也会合并。</p><pre><code>schema&nbsp;Person[separator]:
&nbsp;&nbsp;&nbsp;&nbsp;firstName:&nbsp;str&nbsp;=&nbsp;<span>"John"</span>
&nbsp;&nbsp;&nbsp;&nbsp;lastName:&nbsp;str
&nbsp;&nbsp;&nbsp;&nbsp;fullName:&nbsp;str&nbsp;=&nbsp;firstName&nbsp;+&nbsp;separator&nbsp;+&nbsp;lastName

x&nbsp;=&nbsp;Person(<span>"&nbsp;"</span>)&nbsp;{lastName&nbsp;=&nbsp;<span>"Doe"</span>}

y&nbsp;=&nbsp;Person(<span>"-"</span>)&nbsp;{lastName&nbsp;=&nbsp;<span>"Doe1"</span>}

z&nbsp;=&nbsp;x&nbsp;|&nbsp;y
</code></pre><p>对应编译结果</p><pre><code><span>x:</span>
&nbsp;&nbsp;<span>firstName:</span>&nbsp;<span>John</span>
&nbsp;&nbsp;<span>lastName:</span>&nbsp;<span>Doe</span>
&nbsp;&nbsp;<span>fullName:</span>&nbsp;<span>John</span>&nbsp;<span>Doe</span><span>y:</span>
&nbsp;&nbsp;<span>firstName:</span>&nbsp;<span>John</span>
&nbsp;&nbsp;<span>lastName:</span>&nbsp;<span>Doe1</span>
&nbsp;&nbsp;<span>fullName:</span>&nbsp;<span>John-Doe1</span><span>z:</span>
&nbsp;&nbsp;<span>firstName:</span>&nbsp;<span>John</span>
&nbsp;&nbsp;<span>lastName:</span>&nbsp;<span>Doe1</span>
&nbsp;&nbsp;<span>fullName:</span>&nbsp;<span>John-Doe1</span></code></pre><h4><span>支持字面值的 yaml stream 格式输出</span></h4><p>通过&nbsp;<code>yaml_stream</code>&nbsp;方法，可以支持输出 yaml 字面值的结果。</p><pre><code><span>import</span>&nbsp;manifests

x0&nbsp;=&nbsp;<span>1</span>
x1&nbsp;=&nbsp;<span>2</span>
manifests.yaml_stream([x0,&nbsp;x1])
</code></pre><p>对应编译结果</p><pre><code><span>1</span><span>---</span><span>2</span></code></pre><h4><span>修复了在循环表达式中的类型检查错误</span></h4><pre><code>name&nbsp;=&nbsp;<span>"volume"</span>
configMapVolumes1:&nbsp;{str:{str:}}&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>for</span>&nbsp;_&nbsp;<span>in</span>&nbsp;range(<span>1</span>)
}

configMapVolumes2:&nbsp;[{str:}]&nbsp;=&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>for</span>&nbsp;_&nbsp;<span>in</span>&nbsp;range(<span>1</span>)
]
</code></pre><p>在 v0.8.0 之前，上述程序编译会出现类型错误。</p><pre><code>error[E2G22]:&nbsp;TypeError
&nbsp;--&gt;&nbsp;main.k:4:9
&nbsp;&nbsp;|
4&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;expected&nbsp;{str:any},&nbsp;got&nbsp;str
&nbsp;&nbsp;|

&nbsp;--&gt;&nbsp;main.k:2:1
&nbsp;&nbsp;|
2&nbsp;|&nbsp;configMapVolumes1:&nbsp;{str:{str:}}&nbsp;=&nbsp;{
&nbsp;&nbsp;|&nbsp;^&nbsp;variable&nbsp;is&nbsp;defined&nbsp;here,&nbsp;its&nbsp;<span>type</span>&nbsp;is&nbsp;{str:any},&nbsp;but&nbsp;got&nbsp;str
&nbsp;&nbsp;|
</code></pre><p>在 v0.8.0 版本中, 将会成功编译出如下结果：</p><pre><code><span>name:</span>&nbsp;<span>volume</span><span>configMapVolumes1:</span>
&nbsp;&nbsp;<span>volume:</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>name:</span>&nbsp;<span>volume</span></code></pre><h4><span>修复了 Schema 对象必选属性递归检查错误</span></h4><p>在 Schema 内部定义了一个对象，对象内部的属性是必选的，但是在实例化时使用不存在的属性。</p><pre><code>schema&nbsp;Name:
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;str

schema&nbsp;Config:
&nbsp;&nbsp;&nbsp;&nbsp;n:&nbsp;{str:Name}

Config&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.n&nbsp;=&nbsp;<span>"n"</span>
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre><p>在 v0.8.0 之后，上述程序编译会出现类型错误。</p><pre><code>error[E2L23]:&nbsp;CompileError
&nbsp;--&gt;&nbsp;main.k:9:11
&nbsp;&nbsp;|
9&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.n&nbsp;=&nbsp;<span>"n"</span>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;Cannot&nbsp;add&nbsp;member&nbsp;<span>'n'</span>&nbsp;to&nbsp;schema&nbsp;<span>'Name'</span>
&nbsp;&nbsp;|
</code></pre><h4><span>在编译输出结果中去掉&nbsp;<code>__settings__</code>&nbsp;属性</span></h4><p>在 v0.8.0 版本中，编译输出结果中去掉了&nbsp;<code>__settings__</code>&nbsp;属性。</p><pre><code>schema&nbsp;Person:
&nbsp;&nbsp;&nbsp;&nbsp;__settings__:&nbsp;{str:str}&nbsp;=&nbsp;{<span>"output_type"</span>:&nbsp;<span>"STANDALONE"</span>}
&nbsp;&nbsp;&nbsp;&nbsp;name?:&nbsp;str
&nbsp;&nbsp;&nbsp;&nbsp;age?:&nbsp;int
&nbsp;&nbsp;&nbsp;&nbsp;school?:&nbsp;str

a&nbsp;=&nbsp;Person{
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;<span>"a"</span>,
}
</code></pre><p>在编译结果中去掉了&nbsp;<code>__settings__</code>&nbsp;属性。</p><pre><code><span>a:</span>
&nbsp;&nbsp;<span>name:</span>&nbsp;<span>a</span></code></pre><h4><span>支持在 config 表达式中计算 key 和 value 的值</span></h4><p>在 v0.8.0 版本中，支持在 config 表达式中计算 key 和 value 的值。</p><pre><code>_data&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;<span>"a"</span>:&nbsp;<span>'foo'</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>"b"</span>:&nbsp;<span>'bar'</span>
}

r0&nbsp;=&nbsp;[{v&nbsp;=&nbsp;k}&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r1&nbsp;=&nbsp;[{k&nbsp;=&nbsp;v}&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r2&nbsp;=&nbsp;[{k.foo&nbsp;=&nbsp;v}&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r3&nbsp;=&nbsp;[[k]&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r4&nbsp;=&nbsp;[[k,&nbsp;v]&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
</code></pre><p>编译结果如下：</p><pre><code><span>r0:</span><span>-</span>&nbsp;<span>foo:</span>&nbsp;<span>a</span><span>-</span>&nbsp;<span>bar:</span>&nbsp;<span>b</span><span>r1:</span><span>-</span>&nbsp;<span>a:</span>&nbsp;<span>foo</span><span>-</span>&nbsp;<span>b:</span>&nbsp;<span>bar</span><span>r2:</span><span>-</span>&nbsp;<span>a:</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>foo:</span>&nbsp;<span>foo</span><span>-</span>&nbsp;<span>b:</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>foo:</span>&nbsp;<span>bar</span><span>r3:</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>a</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>b</span><span>r4:</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>a</span>
&nbsp;&nbsp;<span>-</span>&nbsp;<span>foo</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>b</span>
&nbsp;&nbsp;<span>-</span>&nbsp;<span>bar</span></code></pre><h3><span>🔧 诊断信息的优化</span></h3><p>KCL 语法在 if 块中使用的是&nbsp;<code>elif</code>&nbsp;关键字，而不是&nbsp;<code>else if</code>。</p><p>编译以下 KCL 程序：</p><pre><code><span>if</span>&nbsp;<span>True</span>:&nbsp;a&nbsp;=&nbsp;<span>1</span><span>else</span>&nbsp;<span>if</span>&nbsp;<span>False</span>:&nbsp;b&nbsp;=&nbsp;<span>1</span></code></pre><p>KCL 在诊断信息中增加了错误修正的建议：</p><pre><code>error[E1001]:&nbsp;InvalidSyntax
&nbsp;--&gt;&nbsp;main.k:2:6
&nbsp;&nbsp;|
2&nbsp;|&nbsp;<span>else</span>&nbsp;<span>if</span>&nbsp;False:&nbsp;b&nbsp;=&nbsp;1
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;<span>'else&nbsp;if'</span>&nbsp;here&nbsp;is&nbsp;invalid&nbsp;<span>in</span>&nbsp;KCL,&nbsp;consider&nbsp;using&nbsp;the&nbsp;<span>'elif'</span>&nbsp;keyword
&nbsp;&nbsp;|
</code></pre><h3><span>🚀 语言编写体验优化</span></h3><h4><span>KCL 标准库新增文件系统访问方法</span></h4><p>KCL 增加了访问文件系统的方法。在 v0.8.0 版本中支持了包括&nbsp;<code>read</code>,&nbsp;<code>glob</code>&nbsp;等访问文件系统的方法。</p><p>通过&nbsp;<code>read</code>&nbsp;方法，可以读取一个文件内容为字符串。</p><pre><code><span>import</span>&nbsp;file

a&nbsp;=&nbsp;file.read(<span>"hello.txt"</span>)
</code></pre><p>在文件&nbsp;<code>hello.txt</code>&nbsp;中添加如下内容：</p><pre><code>Hello World !
</code></pre><p>编译结果</p><pre><code><span>a:</span>&nbsp;<span>Hello</span>&nbsp;<span>World</span>&nbsp;<span>!</span></code></pre><p>通过结合&nbsp;<code>json.decode</code>&nbsp;方法，可以轻松的实现将 json 文件反序列化。</p><p>在&nbsp;<code>hello.json</code>&nbsp;文件中增加如下内容</p><pre><code>{
&nbsp;&nbsp;<span>"name"</span>:&nbsp;<span>"John"</span>,
&nbsp;&nbsp;<span>"age"</span>:&nbsp;<span>10</span>
}
</code></pre><p>KCL 程序如下所示：</p><pre><code><span>import</span>&nbsp;file
<span>import</span>&nbsp;json

_a&nbsp;=&nbsp;json.decode(file.read(<span>"hello.json"</span>))

name&nbsp;=&nbsp;_a.name
age&nbsp;=&nbsp;_a.age
</code></pre><p>编译结果如下所示：</p><pre><code><span>name:</span>&nbsp;<span>John</span><span>age:</span>&nbsp;<span>10</span></code></pre><p>更多内容 -&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fdocs%2Freference%2Fmodel%2Ffile%2F" target="_blank">https://kcl-lang.io/zh-CN/docs/reference/model/file/</a></p><h4><span>KCL 编译缓存路径支持使用环境变量 KCL_CACHE_PATH 指定</span></h4><p>KCL 编译器会将缓存生成到环境变量<code>KCL_CACHE_PATH</code>指定的目录当中，如果没指定，将会生成到项目根目录中。</p><h4><span>插件系统支持使用 golang 编写 KCL 插件</span></h4><p>使用 golang 定义 hello 插件。</p><pre><code><span>package</span>&nbsp;hello_plugin

<span>import</span>&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;<span>"kcl-lang.io/kcl-go/pkg/plugin"</span>
)

<span><span>func</span>&nbsp;<span>init</span><span>()</span></span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;plugin.RegisterPlugin(plugin.Plugin{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name:&nbsp;<span>"hello"</span>,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodMap:&nbsp;<span>map</span>[<span>string</span>]plugin.MethodSpec{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>"add"</span>:&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Body:&nbsp;<span><span>func</span><span>(args&nbsp;*plugin.MethodArgs)</span>&nbsp;<span>(*plugin.MethodResult,&nbsp;error)</span></span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v&nbsp;:=&nbsp;args.IntArg(<span>0</span>)&nbsp;+&nbsp;args.IntArg(<span>1</span>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;&amp;plugin.MethodResult{V:&nbsp;v},&nbsp;<span>nil</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;})
}
</code></pre><p>借助 KCL Go SDK 开发，扩展 KCL 编译器使用插件。</p><pre><code><span>package</span>&nbsp;main

<span>import</span>&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;<span>"fmt"</span>

&nbsp;&nbsp;&nbsp;&nbsp;<span>"kcl-lang.io/kcl-go/pkg/kcl"</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>"kcl-lang.io/kcl-go/pkg/native"</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;Import&nbsp;the&nbsp;native&nbsp;API</span>
&nbsp;&nbsp;&nbsp;&nbsp;_&nbsp;<span>"kcl-lang.io/kcl-go/pkg/plugin/hello_plugin"</span>&nbsp;<span>//&nbsp;Import&nbsp;the&nbsp;hello&nbsp;plugin</span>
)

<span><span>func</span>&nbsp;<span>main</span><span>()</span></span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;Note&nbsp;we&nbsp;use&nbsp;`native.MustRun`&nbsp;here&nbsp;instead&nbsp;of&nbsp;`kcl.MustRun`,&nbsp;because&nbsp;it&nbsp;needs&nbsp;the&nbsp;cgo&nbsp;feature.</span>
&nbsp;&nbsp;&nbsp;&nbsp;yaml&nbsp;:=&nbsp;native.MustRun(<span>"main.k"</span>,&nbsp;kcl.WithCode(code)).GetRawYamlResult()
&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(yaml)
}

<span>const</span>&nbsp;code&nbsp;=&nbsp;<span>`
import&nbsp;kcl_plugin.hello

name&nbsp;=&nbsp;"kcl"
three&nbsp;=&nbsp;hello.add(1,2)&nbsp;#&nbsp;3
`</span></code></pre><h3><span>😸 新增 Linux arm64 版本</span></h3><p>KCL 的 Release 产物中新增了对 Linux arm64 平台的支持。</p><p>可以在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Freleases" target="_blank">KCL Release Page</a>&nbsp;中找到后缀为&nbsp;<code>linux-arm64</code>&nbsp;的压缩包。</p><h3><span>🏄 SDK &amp; API 更新</span></h3><h4><span>Rust SDK</span></h4><p>KCL Rust SDK 提供了一系列的 API，可以用于 KCL 文件的编译、校验、测试和格式化代码等操作。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Flib" target="_blank">KCL Rust SDK: https://github.com/kcl-lang/lib</a></p><h4><span>Java SDK</span></h4><p>KCL Java SDK 新增语法树、作用域、符号等语法语义结构定义及相关查询 API。</p><h4><span>Go SDK 更新</span></h4><ul><li><p>KCL Doc 工具支持输出为 OpenAPI 格式。</p></li><li><p>增加 Parse 过程相关 API。</p></li></ul><h4><span>API 更新</span></h4><ul><li><p>新增 json/yaml 验证 API 用来验证 json 和 yaml 文件。</p></li><li><p>新增语法和语义分析 API 用于对 KCL 代码进行分析。</p></li><li><p>新增构建二进制产物 API 用于缓存编译结果。</p></li><li><p>新增运行二进制产物 API 用于直接运行编译结果，避免重复编译并提升性能。</p></li><li><p>新增代码生成 API 以编程方式实现 KCL 代码生成而不是编写复杂的模版。</p></li></ul><p>更多的更新可以查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Freference%2Fxlang-api%2Fgo-api" target="_blank">KCL v0.8 API 文档</a></p><h3><span>🐞 其他更新及错误修复</span></h3><ul><li><p>修复了 KCL CLI 使用编译参数 -S 可能会导致的编译错误</p></li><li><p>修复了 kcl fmt 工具对 lambda 表达式进行格式化时，结尾增加一个空行的错误。</p></li><li><p>修复 Schema Doc 补全代码片段错误</p></li><li><p>修复 Schema 对象必选属性递归检查错误</p></li><li><p>提升 Schema 索引签名类型检查健壮性</p></li><li><p>修复 Schema 内部诸如 "$if" 的字符串标识符定义找不到的错误</p></li><li><p>优化非预期 token 的语法错误提示</p></li><li><p>修复非预期的字典生成表达式中的 key 与循环变量相同时的变量计算</p></li></ul><h2><span>IDE &amp; 工具链更新</span></h2><h3><span>IDE 更新</span></h3><h4><span>IDE 语义级别的高亮增强</span></h4><p>KCL IDE 高亮之前仅支持 KCL 语法高亮，今年逐步启用了新的 KCL 语义架构模型，在新语义架构的支撑下，KCL IDE 支持语义级别的高亮，在语义上有关联的代码会显示相同的高亮。</p><p><img height="664" src="https://oscimg.oschina.net/oscnet/up-ca71cb381178754a79d3e6bab643331ccc8.png" width="560" referrerpolicy="no-referrer"></p><p>更多关于 KCL 语义架构模型的内容，参考：&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fblog%2F2023-12-09-kcl-new-semantic-model" target="_blank">KCL 高效语义模型技术揭秘：实现快速编译与增强 IDE 支持</a></p><h4><span>新增 builtin 方法的补全</span></h4><p>KCL IDE 支持 builtin 方法的补全，如下图所示：</p><p><img height="456" src="https://oscimg.oschina.net/oscnet/up-148aa113dc1c90e129c43dba3d796502f3e.gif" width="1218" referrerpolicy="no-referrer"></p><p><img alt="" src="https://files.mdnice.com/user/44450/f7e1a184-22b8-4d3c-9362-6e523650e1aa.gif" referrerpolicy="no-referrer"></p><h4><span>增加变量引用错误时的快速修复功能</span></h4><p>KCL IDE 支持变量引用错误时的快速修复功能，如下图所示：<img alt="" src="https://files.mdnice.com/user/44450/de4f89fe-bced-4a95-8888-7c2b9de6d28e.gif" referrerpolicy="no-referrer"></p><p><img height="496" src="https://oscimg.oschina.net/oscnet/up-b4fd597987857f9db1aec93a500f8fbd4f3.gif" width="1218" referrerpolicy="no-referrer"></p><h4><span>IDE 支持增量解析和异步编译功能</span></h4><p>IDE 通过 KCL 新语义模型支持增量解析和异步编译功能，提升了编译速度和编写体验。</p><p>更多内容详见&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fblog%2F2023-12-09-kcl-new-semantic-model" target="_blank">https://kcl-lang.io/zh-CN/blog/2023-12-09-kcl-new-semantic-model</a></p><h4><span>IDE LSP 问题修复</span></h4><ul><li><p>修复 assert 语句中字符串插值变量不能跳转的异常</p></li><li><p>修复了字符串中异常触发函数补全的异常</p></li><li><p>修复了字符串后跟注释中补全错误的问题</p></li><li><p>修复了 schema 内部属性符号不能跳转的问题</p></li><li><p>修复 import 语句别名语义检查和补全的异常</p></li><li><p>修复了 schema 中 check 表达式补全的异常</p></li><li><p>修复了嵌套 schema 定义中补全错误的问题</p></li><li><p>修复了部分悬停信息缺失的问题</p></li><li><p>修复不同语法补全符号类型不统一的问题</p></li><li><p>区分 Schema 类型和实例补全符号</p></li><li><p>统一 Schema 注释文档补全的格式</p></li><li><p>修复了配置块内部 if 语句符号不能跳转和补全的问题</p></li></ul><h3><span>验证工具更新</span></h3><p>本次更新中，我们对 KCL 验证工具的报错信息进行了优化，在使用 KCL 验证工具对 json/yaml 文件进行验证的工作中，将会准确定位到 json 文件的异常位置。</p><p>以 json 文件为例，我们将要对以下 hello.json 文件进行验证</p><pre><code>{
&nbsp;&nbsp;&nbsp;&nbsp;<span>"name"</span>:&nbsp;<span>10</span>,
&nbsp;&nbsp;&nbsp;&nbsp;<span>"age"</span>:&nbsp;<span>18</span>,
&nbsp;&nbsp;&nbsp;&nbsp;<span>"message"</span>:&nbsp;<span>"This&nbsp;is&nbsp;Alice"</span>
}
</code></pre><p>定义如下 main.k 文件来对 json 文件中的内容进行验证</p><pre><code>schema&nbsp;User:
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;str
&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;int
&nbsp;&nbsp;&nbsp;&nbsp;message?:&nbsp;str
</code></pre><p>通过以下命令对 json 文件内容进行验证</p><pre><code>kcl&nbsp;vet&nbsp;hello.json&nbsp;main.k
</code></pre><p>可以看到在 json 文件中的错误位置：</p><pre><code>error[E2G22]:&nbsp;TypeError
&nbsp;--&gt;&nbsp;test.json:2:5
&nbsp;&nbsp;|
2&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>"name"</span>:&nbsp;10,
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;expected&nbsp;str,&nbsp;got&nbsp;int(10)
&nbsp;&nbsp;|

&nbsp;--&gt;&nbsp;main.k:2:5
&nbsp;&nbsp;|
2&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;str
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;variable&nbsp;is&nbsp;defined&nbsp;here,&nbsp;its&nbsp;<span>type</span>&nbsp;is&nbsp;str,&nbsp;but&nbsp;got&nbsp;int(10)
&nbsp;&nbsp;|
</code></pre><h4><span>KCL cli 新增 git 仓库作为编译入口</span></h4><p>通过以下命令，可以将 KCL 的 git 仓库作为编译入口</p><pre><code>kcl&nbsp;run&nbsp;&lt;git&nbsp;url&gt;
</code></pre><h4><span>kcl mod graph 支持输出 KCL 包依赖图</span></h4><p>通过命令&nbsp;<code>kcl mod graph</code>&nbsp;输出 KCL 包的依赖图。</p><h3><span>KCL 包管理工具</span></h3><h4><span>KCL 包管理支持通过 commit 添加 git 依赖</span></h4><p>KCL 包管理工具增加了通过 commit 来添加 git 三方库依赖的功能。以&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack%2Fcatalog" target="_blank">https://github.com/KusionStack/catalog</a>&nbsp;为例，添加 commit 为 a29e3db 的版本作为依赖。可以通过编辑 kcl.mod 文件中的依赖或者命令行直接添加。</p><p>编辑 kcl.mod 文件内容如下：</p><pre><code>[dependencies]
catalog = { git = "https://github.com/KusionStack/catalog.git", commit = "a29e3db" }
</code></pre><p>或者通过命令行添加：</p><pre><code>kcl&nbsp;mod&nbsp;add&nbsp;-git&nbsp;https://github.com/KusionStack/catalog.git&nbsp;-commit&nbsp;a29e3db
</code></pre><h4><span>KCL 包管理工具支持三方库名称带有「-」</span></h4><p>KCL 包管理工具支持三方库名称中带有「-」，KCL 包管理工具会自动将 「-」 替换为 「_」。</p><p>以三方库&nbsp;<code>set-annotation</code>&nbsp;为例，通过以下命令添加&nbsp;<code>set-annotation</code>&nbsp;为依赖：</p><pre><code>kcl&nbsp;mod&nbsp;add&nbsp;set-annotation
</code></pre><p>在 KCL 程序中，通过&nbsp;<code>set_annotation</code>&nbsp;引用：</p><pre><code>import&nbsp;set_annotation&nbsp;
</code></pre><h3><span>KCL 导入工具更新，支持更多特性</span></h3><ul><li><p>支持 OpenAPI multiplyOf 规范映射到 KCL multiplyof 函数进行校验</p></li><li><p>支持 YAML Stream 格式的 Kubernetes CRD 文件输出为多个 KCL 文件</p></li><li><p>支持 OpenAPI allOf 关键字校验表达式生成</p></li><li><p>支持 KCL 数组和字典类型的 all/any 校验表达式生成</p></li></ul><h2><span>社区集成 &amp; 扩展更新</span></h2><h3><span>Flux KCL Controller 发布</span></h3><p>我们开发了&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fflux-kcl-controller" target="_blank">Flux KCL Controller</a>&nbsp;支持 KCL 与 Flux 集成。在集群中安装 Flux KCL Controller 后，通过以下资源就可以实现 KCL git 仓库通过 FluxCD 进行持续集成。</p><pre><code>apiVersion:&nbsp;source.toolkit.fluxcd.io/v1
kind:&nbsp;GitRepository
metadata:
&nbsp;&nbsp;name:&nbsp;kcl-deployment
&nbsp;&nbsp;namespace:&nbsp;<span>source</span>-system
spec:
&nbsp;&nbsp;interval:&nbsp;30s
&nbsp;&nbsp;<span>#&nbsp;需要持续集成的&nbsp;github&nbsp;仓库</span>
&nbsp;&nbsp;url:&nbsp;https://github.com/awesome-kusion/kcl-deployment.git
&nbsp;&nbsp;ref:
&nbsp;&nbsp;&nbsp;&nbsp;branch:&nbsp;main
---
apiVersion:&nbsp;krm.kcl.dev.fluxcd/v1alpha1
kind:&nbsp;KCLRun
metadata:
&nbsp;&nbsp;name:&nbsp;kcl-deployment
&nbsp;&nbsp;namespace:&nbsp;<span>source</span>-system
spec:
&nbsp;&nbsp;sourceRef:
&nbsp;&nbsp;&nbsp;&nbsp;kind:&nbsp;GitRepository
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;kcl-deployment
</code></pre><p>更多内容详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fblog%2F2024-02-01-biweekly-newsletter%2F" target="_blank">https://kcl-lang.io/zh-CN/blog/2024-02-01-biweekly-newsletter/</a></p><h3><span>CodeQL KCL 工具</span></h3><p>初步支持 CodeQL KCL dbschema 定义以及对 KCL 语法语义进行数据提取，并可通过 CodeQL 进行数据查询对 KCL 代码进行静态分析和扫描，提升代码安全。</p><p>更多内容详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcodeql-kcl" target="_blank">https://github.com/kcl-lang/codeql-kcl</a></p><h2><span>模型更新</span></h2><p>KCL 模型数量新增至 303 个，主要新增与 Crossplane Provider 相关的模型和与 JSON 合并操作相关的库</p><ul><li><p>KCL JSON Patch 库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fjsonpatch" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/jsonpatch</a></p></li><li><p>KCL JSON Merge Patch 库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fjson_merge_patch" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/json_merge_patch</a></p></li><li><p>KCL Kubernetes Strategy Merge Patch 库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fstrategic_merge_patch" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/strategic_merge_patch</a></p></li><li><p>KCL Crossplane 及 Crossplane Provider 系列模型：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fsearch%3Forg%3Dkcl%26sort%3Drelevance%26page%3D1%26ts_query_web%3Dcrossplane" target="_blank">https://artifacthub.io/packages/search?org=kcl&amp;sort=relevance&amp;page=1&amp;ts_query_web=crossplane</a></p></li><li><p>Kubenetes 1.29 版本:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fk8s%2F1.29.0" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/k8s/1.29.0</a></p></li><li><p>新增 Podinfo 应用配置模型，支持设置外部动态参数如 replicas 等，可以直接通过一条命令渲染 Kubernetes 资源配置，并且可以在此模型的基础上修改并自定义资源模版</p></li></ul><pre><code>kcl&nbsp;run&nbsp;oci://ghcr.io/kcl-lang/podinfo&nbsp;-D&nbsp;replicas=2
</code></pre><ul><li><p>JSON Schema 库发布 0.0.4 版本，修复类型定义错误, 可以执行如下命令更新或添加依赖</p></li></ul><pre><code>kcl&nbsp;mod&nbsp;add&nbsp;jsonschema:0.0.4
</code></pre><h2><span>其他更新</span></h2><p>完整更新和错误修复列表详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fcompare%2Fv0.7.0...v0.8.0" target="_blank">https://github.com/kcl-lang/kcl/compare/v0.7.0...v0.8.0</a></p><h2><span>文档更新</span></h2><p>KCL 网站新增 KCL v0.7.0 文档内容并支持版本化语义选项，目前支持 v0.4.x, v0.5.x, v0.6.x, v0.7.0 和 v0.8.0 版本选择，同时欢迎社区同学进行文档共建。</p><h2><span>社区动态</span></h2><h3><span>KCL LFX 项目启动</span></h3><p>恭喜 @AkashKumar7902, @octonawish-akcodes, @shashank-iitbhu 入选 CNCF KCL LFX 项目，同时感谢 @Vanshikav123, @Amit Pandey 的积极参与。</p><h3><span>KCL 登陆 Crossplane 官方函数市场</span></h3><p>自 Crossplane v1.14 中的组合函数 Beta 版发布以来，使用 Crossplane 构建云原生平台的可能体验范围一直在迅速扩大。KCL 团队在第一时间进行跟进并主动构建了一个可重用的函数，整个 Crossplane 生态系统现在可以利用 KCL 提供的高水平经验和能力来构建自己的云原生平台。</p><p>更多内容详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.crossplane.io%2Ffunction-kcl%2F" target="_blank">https://blog.crossplane.io/function-kcl/</a></p><h3><span>特别鸣谢</span></h3><p>感谢社区的小伙伴在 KCL v0.8.0 版本中的贡献，以下排名不分先后</p><ul><li><p>感谢 @professorabhay 支持 KCL 测试 Diff 功能 🙌</p></li><li><p>感谢 @jakezhu9 同学对 kcl import 工具的持续贡献 🤝</p></li><li><p>感谢 @octonawish-akcodes 对 KCL 代码清理和 FAQ 文档的持续贡献 🙌</p></li><li><p>感谢 @satyazzz123 对 KRM KCL 支持读取环境变量功能的贡献 🙌</p></li><li><p>感谢 @AkashKumar7902 对 KCL 包管理工具功能的贡献 🙌</p></li><li><p>感谢 @UtkarshUmre 对 KCL linux-arm64 构建 CI 的贡献 🙌</p></li><li><p>感谢 @octonawish-akcodes 和 @d4v1d03 对 KCL FAQ 文档和 KCL IDE 功能的持续贡献 🙌</p></li><li><p>感谢 @octonawish-akcodes 对 Ansible KCL Module 的贡献</p></li><li><p>感谢 @AkashKumar7902 和 @Vanshikav123 对 KCL 包管理工具功能的贡献 🙌</p></li><li><p>感谢 @StevenLeiZhang 对 KCL 文档和 KCL 插件的贡献 🙌</p></li><li><p>感谢 @patrycju, @Callum Lyall, @Matt Gowie, @ShiroDN, @FLAGLORD, @YiuTerran, @flyinox, @steeling, @Anoop, @Even Solberg，@Phillip Neumann，@Naxe, @rozaliev, @CloudZero357, @martingreber, @az, @Art3mK, @Erick, @TheChinBot, @Evgeny Shepelyuk, @yonas, @vtomilov, @Fdall, @bozaro, @starkers, 和 @MrGuoRanDuo 等在 KCL v0.8 版本迭代过程中使用 KCL 提供的宝贵建议与反馈 🙌</p></li></ul><h2><span>下一步计划</span></h2><p>感谢所有 KCL 用户和社区小伙伴在此次版本更新过程中提出的宝贵反馈与建议。预计 2024 年 5 月，我们将发布 KCL v0.9.0 版本，更多详情请参考 KCL 2024 路线规划，和 KCL v0.9.0 Milestone，如果您有更多的想法和需求，欢迎在 KCL Github 仓库发起 Issues 或讨论，也欢迎加入我们的社区进行交流 🙌 🙌 🙌</p><p>更多其他资源请参考：</p><ul><li><p>KCL 网站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io/</a></p></li><li><p>KusionStack 网站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkusionstack.io%2F" target="_blank">https://kusionstack.io/</a></p></li><li><p>KCL GitHub 仓库:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang" target="_blank">https://github.com/kcl-lang</a></p></li><li><p>KusionStack GitHub 仓库:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack" target="_blank">https://github.com/KusionStack</a></p></li><li><p>KCL v0.9.0 Milestone:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F9" target="_blank">https://github.com/kcl-lang/kcl/milestone/9</a></p></li><li><p>KCL 2024 路线规划:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues%2F882" target="_blank">https://github.com/kcl-lang/kcl/issues/882</a></p></li><li><p>KCL 社区:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity" target="_blank">https://github.com/kcl-lang/community</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 07:29:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281971/kcl-0-8-0-released</guid>
            <link>https://www.oschina.net/news/281971/kcl-0-8-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WFS 文件存储系统 v1.0.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h4>WFS 文件存储系统，主要解决海量小文件的存储问题</h4><p>wfs 有非常高效的读写效率，在高并发压力下，wfs 存储引擎读写响应时间可以达到微秒级别.</p><p>海量小文件可能带来的许多问题：</p><p style="text-align:left"><span>&nbsp; &nbsp;<span>&nbsp;</span></span><span>海量小文件存储在不同的硬件环境和系统架构下，都会带来一系列显著的问题。无论是采用传统的机械硬盘（HDD）还是现代的固态硬盘（SSD），这些问题都可能影响系统的性能、效率、扩展性和成本：</span></p><ol><li><span>存储效率低下：对于任何类型的硬盘，小文件通常会导致物理存储空间的低效使用。由于硬盘有其最小存储单元（扇区或页），小文件可能会占用超过其实际内容大小的空间，尤其是在每个文件还需额外存储元数据的情况下，如 inode（在 Unix-like 系统中）或其他形式的元数据记录，这会进一步加大空间浪费。inode 耗尽：每个文件和目录至少占用一个 inode，而 inode 的数量是在格式化磁盘并创建文件系统时预先设定的。当系统中有大量小文件时，即使硬盘空间还很充足，也可能因为 inode 用完而导致无法继续创建新文件，尽管剩余磁盘空间足以存放更多数据。性能影响：随着 inode 数量增多，查找和管理这些 inode 所对应的元数据会变得更复杂和耗时，尤其是对于不支持高效索引机制的传统文件系统，这会影响文件系统的整体性能。扩展性受限：文件系统设计时通常有一个固定的 inode 总数，除非通过特殊手段（如调整文件系统或重新格式化时指定更多 inode），否则无法动态增加 inode 数量来适应小文件增长的需求。</span></li><li><span>I/O 性能瓶颈与资源消耗：在 HDD 环境中，随机读写大量小文件会引发频繁的磁盘寻道操作，从而降低整体 I/O 性能。而在 SSD 中，尽管寻道时间几乎可以忽略，但过于密集的小文件访问仍可能导致控制器压力增大、写入放大效应以及垃圾回收机制负担加重。</span></li><li><span>索引与查询效率问题：海量小文件对文件系统的索引结构形成挑战，随着文件数量的增长，查找、更新和删除小文件时所需的元数据操作会变得非常耗时。尤其在需要快速检索和分析场景下，传统索引方法难以提供高效的查询服务。</span></li><li><span>备份恢复复杂性与效率：备份海量小文件是一个繁琐且耗时的过程，同时在恢复过程中，尤其是按需恢复单个文件时，需要从大量备份数据中定位目标文件，这将极大地影响恢复速度和效率。</span></li><li><span>扩展性与可用性挑战：存储系统在处理海量小文件时，可能面临扩展性难题。随着文件数量的增长，如何有效分配和管理资源以维持良好的性能和稳定性是一大考验。在分布式存储系统中，还可能出现热点问题，导致部分节点负载过高，影响整个系统的稳定性和可用性。</span></li></ol><p style="text-align:left"><strong>&nbsp; &nbsp;wfs 作用在于将海量提交存储的小文件进行高效的压缩归档。并提供简洁的数据获取方式，以及后台文件管理，文件碎片整理等。</strong></p><hr><p><strong>wfs 相关程序</strong></p><ul><li>wfs 源码地址 &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs" target="_blank">https://github.com/donnie4w/wfs</a></li><li>go 客户端 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs-goclient" target="_blank">https://github.com/donnie4w/wfs-goclient</a></li><li>java 客户端 &nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs-jclient" target="_blank">https://github.com/donnie4w/wfs-jclient</a></li><li>python 客户端 &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs-pyclient" target="_blank">https://github.com/donnie4w/wfs-pyclient</a></li><li>wfs 在线体验 &nbsp; &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ftestwfs.tlnet.top%2F" target="_blank">http://testwfs.tlnet.top</a><span>&nbsp;</span>&nbsp; &nbsp; 用户名 admin &nbsp; &nbsp;密码 123</li><li>wfs 使用文档 &nbsp; &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwfsdoc" target="_blank">https://tlnet.top/wfsdoc</a></li></ul><hr><p><strong>wfs 的特点</strong></p><ul><li>高效性</li><li>简易性</li><li>零依赖</li><li>管理平台</li><li>图片处理</li></ul><hr><p><strong>应用场景</strong></p><ul><li>媒体存储：适用于存储和访问海量的小文件，如图片、文本等。凭借高性能存储引擎，WFS 可实现高速存取，并提供丰富的图片资源处理功能。</li></ul><hr><p><strong>技术特点</strong></p><ul><li>高吞吐量低延迟<span>：保证在高并发场景下的数据存取速度。</span></li><li>支持多级别数据压缩存储<span>：节省存储空间，提高存储效率。</span></li><li>支持 http(https) 协议存取文件</li><li>支持 thrift 协议长连接存取文件</li><li>支持图片基本处理<span>：内置图片处理功能，满足多媒体存储需求。</span></li></ul><hr><p><strong>WFS 的压力测试与性能评估</strong></p><p><span>请注意，以下基准测试数据主要针对 WFS 数据存储引擎，未考虑网络因素的影响。在理想条件下，基于基准测试数据得出估算数据</span></p><p><strong>以下为部分压测数据截图</strong></p><p><img alt="" src="https://tlnet.top/f/1709371893_7752.jpg" width="1264" referrerpolicy="no-referrer"></p><p><img alt="" src="https://tlnet.top/f/1709371933_7249.jpg" width="1264" referrerpolicy="no-referrer"></p><p><img alt="" src="https://tlnet.top/f/1709373380_17625.jpg" width="1264" referrerpolicy="no-referrer"></p><p><img alt="" src="https://tlnet.top/f/1709373414_15548.jpg" width="1264" referrerpolicy="no-referrer"></p><p><strong>测试数据说明：</strong></p><ul><li><strong>第一列为测试方法，写 Append, 读 Get ， *-4 四核，*-8 八核</strong></li><li><strong>第二列为本轮测试</strong><span><strong>执行总次</strong></span><strong>数</strong></li><li><strong>ns/op: 每执行一次消耗的时间</strong></li><li><strong>B/op：每执行一次消耗的内存</strong></li><li><strong>allocs/op：每执行一次分配内存次数</strong></li></ul><p style="text-align:start">&nbsp;</p><p><strong>根据基准测试数据，可以估算出 wfs 存储引擎的性能</strong></p><ul><li><strong>存储数据性能估算</strong></li></ul><ol><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (36489 ns/operation) ≈ 27405 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (31303 ns/operation) ≈ 31945 次/s</span></li><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (29300 ns/operation) ≈ 34129 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (24042 ns/operation) ≈ 41593 次/s</span></li><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (30784 ns/operation) ≈ 32484 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (30966 ns/operation) ≈ 32293 次/s</span></li><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (35859 ns/operation) ≈ 27920 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (33821 ns/operation) ≈ 29550 次/s</span></li></ol><ul><li><strong>获取数据性能估算</strong></li></ul><ol><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (921 ns/operation) ≈ &nbsp;1085776 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (636 ns/operation) ≈ &nbsp;1572327 次/s</span></li><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (1558 ns/operation) ≈ 641848 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (1296 ns/operation) ≈ 771604 次/s</span></li><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (1695 ns/operation) ≈ 589970 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (1402ns/operation) ≈ &nbsp;713266 次/s</span></li><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (1865 ns/operation) ≈ 536000 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (1730 ns/operation) ≈ 578034 次/s</span></li></ol><p style="text-align:start">&nbsp;</p><p style="text-align:start"><strong>写入数据性能</strong></p><ul><li>在不同并发条件下，WFS 存储引擎的写入操作平均每秒执行次数介于约 3 万次/s 至 4 万次/s 之间。</li></ul><p style="text-align:start"><strong>读取数据性能</strong></p><ul><li>WFS 存储引擎读数据操作的性能更为出色，平均每秒执行次数在<span>&nbsp;</span><span>53 万</span>次/s 至<span>&nbsp;</span><span>150 万</span>次/s 之间。</li></ul><p style="text-align:start">&nbsp;</p><p style="text-align:start"><strong>&nbsp; &nbsp;请注意：测试结果与环境有很大关系。</strong><span><strong>实际应用中的性能可能会受到多种因素的影响，如系统负载、网络状况、磁盘 I/O 性能等，实际部署时需要根据具体环境进行验证和调优。</strong></span></p><hr><p><strong>wfs 内置图片基础处理</strong></p><p style="text-align:left"><strong>原图: &nbsp;<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg</a></p><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li><span>裁剪正中部分，等比缩小生成 200x200 缩略图 &nbsp;<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F1%2Fw%2F200%2Fh%2F200" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/1/w/200/h/200</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/1/w/200/h/200" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li><span>宽度固定为 200px，高度等比缩小，生成宽 200 缩略图 &nbsp; &nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li><span>高度固定为 200px，宽度等比缩小，生成高 200 缩略图 &nbsp; &nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fh%2F200" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/h/200</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/h/200" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>高斯模糊，生成模糊程度<span>Sigma 为 5，宽 200 的图片 &nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Fblur%2F5" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/blur/5</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/blur/5" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>灰色图片，生成灰色，<span>宽 200 的</span>图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Fgrey%2F1" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/grey/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/grey/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>颜色反转，生成颜色相反，宽 200 的图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Finvert%2F1" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/invert/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/invert/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>水平反转 ，生成水平反转，宽 200 的图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Ffliph%2F1" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/fliph/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/fliph/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>垂直反转 ，生成垂直反转，宽 200 的图片 &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Fflipv%2F1" target="_blank"><span>&nbsp;</span>https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/flipv/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/flipv/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>图片旋转 ，生成向左旋转 45 度，宽 200 的图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Frotate%2F45" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>格式转换 ，生成向左旋转 45，宽 200 的 png 图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Frotate%2F45%2Fformat%2Fpng" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45/format/png</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45/format/png" referrerpolicy="no-referrer"></p><p><strong>图片处理方式见<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwfsdoc" target="_blank"><strong>wfs 使用文档</strong></a></p><hr><p><strong>WFS 的使用简单说明</strong></p><ol><li>执行文件下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fdownload" target="_blank">https://tlnet.top/download</a></li><li>启动：</li></ol><p style="text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>./linux101_wfs &nbsp; &nbsp; -c &nbsp; &nbsp;wfs.json</strong></p><p style="text-align:left">3. &nbsp; wfs.json 配置说明</p><pre><code>{
    "listen": 4660,     
    "opaddr": ":6802",
    "webaddr": ":6801",
    "memLimit": 128,
    "data.maxsize": 10000,
    "filesize": 100,
}</code></pre><p style="text-align:left"><strong>属性说明：</strong></p><ul><li><span>listen &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;http/https 资源获取服务监听端口</span></li><li><span>opaddr &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; thrift 后端资源操作地址</span></li><li><span>webaddr &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;管理后台服务地址</span></li><li><span>memLimit &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wfs 内存最大分配 (单位：MB)</span></li><li><span>data.maxsize &nbsp; &nbsp; &nbsp;wfs 上传图片大小上限 (单位：KB)</span></li><li><span>filesize &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wfs 后端归档文件大小上限 (单位：MB)</span></li></ul><p><strong>wfs 使用详细说明请参考<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwfsdoc" target="_blank"><strong>wfs 使用文档</strong></a></p><hr><p><strong>WFS 如何存储，删除数据</strong></p><p><strong>1. http/https</strong></p><p>curl -F "file=@1.jpg" &nbsp;"http://127.0.0.1:6801/append/test/1.jpg" -H "username:admin" -H "password:123"</p><p>curl -X DELETE "http://127.0.0.1:6801/delete/test/1.jpg" -H "username:admin" -H "password:123"</p><p><strong>2. 使用客户端</strong></p><p>&nbsp; &nbsp; 以下是 java 客户端，示例</p><pre><code>    public void append() throws WfsException, IOException {
        String dir = System.getProperty("user.dir") + "/src/test/java/io/github/donnie4w/wfs/test/";
        WfsClient wc = newClient();
        WfsFile wf = new WfsFile();
        wf.setName("test/java/1.jpeg");
        wf.setData(Files.readAllBytes(Paths.get(dir + "1.jpeg")));
        wc.append(wf);
    }</code></pre><p style="text-align:left"><strong>3. 通过管理后台上传/删除文件</strong></p><h4>&nbsp;</h4><hr><h4><strong>WFS 管理后台</strong></h4><p><strong>默认搜索</strong></p><p><img alt="" src="https://tlnet.top/f/1709440477_578.jpg" width="1264" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><strong>前缀搜索</strong></p><p><img alt="" src="https://tlnet.top/f/1709440507_7665.jpg" width="1264" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><strong>碎片整理</strong></p><p><img alt="" src="https://tlnet.top/f/1709440627_3436.jpg" width="1264" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>&nbsp;</p><hr><h4>WFS 的分布式部署方案</h4><p><span>wfs0.x 版本到 wfs1.x 版本的设计变更说明：</span>wfs0.x 版本实现了分布式存储，这使得系统能够跨多个服务器分散存储和处理数据，具备水平扩展能力和数据备份冗余能力，但是在实际应用中也暴露出一些问题，如元数据重复存储导致空间利用率不高。对于小文件的处理效率低，因为在节点间频繁转发传输，造成系统资源消耗增加。</p><p style="text-align:start">wfs1.x 版本的目标在于通过精简架构、聚焦性能提升来满足特定应用场景的需求，而在分布式部署方面的考量则交由用户借助第三方工具和服务来实现。</p><ol><li>wfs1.x 不直接支持分布式存储，但为了应对大规模部署和高可用需求，推荐采用如 Nginx 这样的负载均衡服务，通过合理的资源配置和定位策略，可以在逻辑上模拟出类似分布式的效果。也就是说，虽然每个 wfs 实例都是单机存储，但可以通过外部服务实现多个 wfs 实例之间的请求分发，从而达到业务层面的「分布式部署」。如何实现 wfs 的「分布式部署」可以参考文章《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Farticle%2F22425158" target="_blank">WFS 的分布式部署方案</a>》</li><li>必须说明的是，超大规模数据存储业务中，分布式系统确实具有显著优势，包括动态资源调配、数据分块存储、多节点备份等高级功能。然而，分布式采用负载均衡策略的 wfs1.x，则需要用户自行采取措施保证数据安全性和高可用性，例如定期备份数据、搭建负载均衡集群，并且在应用程序中配置并设计路由规则，确保数据能正确地路由到目标节点。</li><li>wfs 的优势在于其简洁性和高效性。实际上，并非任何文件存储业务都需要复杂的分布式文件系统，相反，大部分业务尚未达到超大规模的量级，而使用复杂的分布式文件系统可能会带来与之不相匹配的过多<span>额外成本和运维难度</span>。<span>目前的 wfs 及其相应的分布式部署策略已经能够较好地满足各种业务需求</span>。</li></ol></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 03:58:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281930/wfs-go-1-0-1-released</guid>
            <link>https://www.oschina.net/news/281930/wfs-go-1-0-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Syncthing 1.27.4 发布，连续文件同步工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Syncthing&nbsp;是一个免费开源的工具，它能在你的各个网络计算机间同步文件 / 文件夹，它的同步数据是直接从一个系统中直接传输到另一个系统的，并且它是安全且私密的。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">Syncthing 1.27.4 现已发布，具体更新内容如下：</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Bug 修复</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9369" target="_blank">#9369</a>：filesystem watcher 忽略无效 UTF-8 匹配时的&nbsp;<span style="background-color:#ffffff; color:#1f2328">Panic</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9435" target="_blank">＃9435</a>：syncthing 应能&nbsp;cgroup aware</li></ul><p style="text-align:start"><strong style="color:#333333"><span style="background-color:#ffffff; color:#1f2328">Enhancements</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9339" target="_blank">＃9339</a>：File system watcher 应该在更多情况下跳过忽略的目录</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9357" target="_blank">#9357</a>：在 Linux 容器中设置<code>GOMAXPROCS</code>配额感知</li></ul><p style="text-align:start"><strong style="color:#333333"><span style="background-color:#ffffff; color:#1f2328">Other issues</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9386" target="_blank">#9386</a>：folder_sendrecv.go 中的拼写错误引用了不存在的<code>dbUpdateShourtcutFile</code>类型</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9389" target="_blank">#9389</a>：typo：<code>Complection</code><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>→<span>&nbsp;</span></span><code>Completion</code><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>?</span></li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Freleases%2Ftag%2Fv1.27.4" target="_blank">https://github.com/syncthing/syncthing/releases/tag/v1.27.4</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 03:13:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281915/syncthing-1-27-4-released</guid>
            <link>https://www.oschina.net/news/281915/syncthing-1-27-4-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【比较 ORM 操作数据】总结]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h4>写在最后</h4><p>经过将近一周时间的框架收集、学习、实验、编码、测试市面上常见的 ORM 框架，过程中拜读了很多作者的博文、样例，学习很多收获很多。 重新梳理下整理的框架：mybatis-plus、lazy、sqltoy、mybatis-flex、easy-query、mybatis-mp、jpa、dbvisitor、beetlsql</p><p>下面从一下几点出发作出总结</p><ul><li>文档方面：学习过程中 mybatis-plus、jpa 提供的文档资料是比较全和晚上，经得住市场的考验</li><li>技术方面：beetlsql、easy-query、mybatis 系列，三类框架都已经支持 spring 和 solon 生态，其技术架构设计可以推荐大家学习</li><li>并发方面：jpa、db_visitor 还需要开发时候深度优化处理</li><li>大数据存储方面： Lazy 具有一定优势，大数据查询方面：sqltoy 反射处理的比较优秀</li></ul><p>以上是个人整理的观点，如果大家有不同的想法和意见可以在<a href="https://gitee.com/wujiawei1207537021">gitee</a>或者个人博客留言<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2Fqq_22903677%3Ftype%3Dblog" target="_blank">CSDN</a></p><p>细节数据对比（一万以内基本相差不大）</p><ul><li>细节数据对比，数据属于并发行测试数据，如果测试总数是一百，那么会执行一百次 batchStory，一百次 findPage 每次执行的条数在之前数据的基础上+1</li></ul><p>从形成的折线图看（具体趋势看排名与测试结果）</p><ul><li>存储性能对比: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql 更适合并发性数据存储。jpa、db_visitor 处理耗时较长</li><li>分页查询性能对比: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、db_visitor、beetlSql 都比较稳定。jpa 处理时间明显起伏</li></ul><p><img height="679" src="https://oscimg.oschina.net/oscnet/up-108d2b6dbb2cbdc219a75ca4040c5d2ab0a.png" width="1406" referrerpolicy="no-referrer"></p><p><img height="698" src="https://oscimg.oschina.net/oscnet/up-0738f46c7c49b88bb0b6c58ca71c33372cd.png" width="1402" referrerpolicy="no-referrer"></p><p>批量保存：</p><ul><li>一万条数据以内 lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql、jpa、db_visitor 性能趋于一致</li><li>十万数据时，处理时间由快到慢依次是: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql、db_visitor、jpa，其中 db_visitor、jpa 处理时间明显起伏</li></ul><p>分页查询：</p><ul><li>一万条数据以内，几款 ORM 均保持在 200 毫秒内</li><li>十万数据时，处理时间由快到慢依次是: sqltoy、db_visitor、easy-query、lazy、beetlSql、mybatis、mybatis-mp、jpa、mybatis-flex</li><li>&nbsp;</li></ul><h3>快速数据对比 (大数据曲线图)</h3><p><img height="674" src="https://oscimg.oschina.net/oscnet/up-b50ab90449379aba424545ef66277f5b0ce.png" width="1391" referrerpolicy="no-referrer"></p><p><img height="691" src="https://oscimg.oschina.net/oscnet/up-15d9a6ed061150752d3225078a5b7199560.png" width="1402" referrerpolicy="no-referrer"></p><h4><a href="https://gitee.com/wujiawei1207537021/wu-compare-orm-demo">当前项目地址</a></h4><h4><a href="https://gitee.com/wujiawei1207537021/wu-framework-parent/tree/master/wu-inner-integration/wu-database-parent">lazy-orm 地址</a></h4><h4><a href="https://gitee.com/baomidou/mybatis-plus">mybatis 地址</a></h4><h4><a href="https://gitee.com/sagacity/sagacity-sqltoy">sqltoy 地址</a></h4><h4><a href="https://gitee.com/mybatis-flex/mybatis-flex">mybatis-flex 地址</a></h4><h4><a href="https://gitee.com/xuejm/easy-query">easy-query 地址</a></h4><h4><a href="https://gitee.com/mybatis-mp/mybatis-mp">mybatis-mp 地址</a></h4><h4><a href="https://gitee.com/zycgit/dbvisitor">dbvisitor 地址</a></h4><h4><a href="https://gitee.com/xiandafu/beetlsql">beetlsql 地址</a></h4></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 03:04:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281908</guid>
            <link>https://www.oschina.net/news/281908</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🎉 领域模型即服务 | Wow 2.16.16 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><a href="https://ahoowang.gitee.io/wow/"><img alt="Wow:基于 DDD、EventSourcing 的现代响应式 CQRS 架构微服务开发框架" src="https://static.oschina.net/uploads/img/202312/13135012_Zb9v.svg" width="150" referrerpolicy="no-referrer"></a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow%2Fblob%2Fmvp%2FLICENSE"><img alt="License" src="https://img.shields.io/badge/license-Apache%202-4EB1BA.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow%2Freleases"><img alt="GitHub release" src="https://img.shields.io/github/release/Ahoo-Wang/Wow.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fmaven-badges.herokuapp.com%2Fmaven-central%2Fme.ahoo.wow%2Fwow-core"><img alt="Maven Central" src="https://maven-badges.herokuapp.com/maven-central/me.ahoo.wow/wow-core/badge.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fapp.codacy.com%2Fgh%2FAhoo-Wang%2FWow%2Fdashboard%3Futm_source%3Dgh%26utm_medium%3Dreferral%26utm_content%3D%26utm_campaign%3DBadge_grade"><img alt="Codacy Badge" src="https://app.codacy.com/project/badge/Grade/cfc724df22db4f9387525258c8a59609" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fcodecov.io%2Fgh%2FAhoo-Wang%2FWow"><img alt="codecov" src="https://codecov.io/gh/Ahoo-Wang/Wow/branch/main/graph/badge.svg?token=uloJrLoQir" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow"><img alt="Integration Test Status" src="https://github.com/Ahoo-Wang/Wow/actions/workflows/integration-test.yml/badge.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FKotlinBy%2Fawesome-kotlin"><img alt="Awesome Kotlin Badge" src="https://kotlin.link/awesome-kotlin.svg" referrerpolicy="no-referrer"></a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>领域驱动</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>事件驱动</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>测试驱动</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>声明式设计</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>响应式编程</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>命令查询职责分离</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>事件溯源</strong></p><blockquote><p style="margin-left:0; margin-right:0"><strong>官方文档：</strong><img alt="👉" height="14" src="https://cn-assets.gitee.com/assets/emoji/point_right-8d392cf32998e3bca12bb7b4ee10dae0.png" width="14" referrerpolicy="no-referrer"><span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/" target="_blank">https://ahoowang.gitee.io/wow/</a><span>&nbsp;</span><img alt="👈" height="14" src="https://cn-assets.gitee.com/assets/emoji/point_left-4570b6929b8880ab2e8b8031007fef18.png" width="14" referrerpolicy="no-referrer"></p></blockquote><h2>更新内容</h2><blockquote><p style="margin-left:0; margin-right:0"><a href="https://ahoowang.gitee.io/wow/guide/query.html" target="_blank">https://ahoowang.gitee.io/wow/guide/query.html</a></p></blockquote><blockquote><p style="margin-left:0; margin-right:0"><strong>Wow</strong><span>&nbsp;</span>除了为命令 (<code>Command</code>) 自动生成了<span>&nbsp;</span><em>OpenAPI</em><span>&nbsp;</span>端点，另外还提供了查询 (<code>Query</code>)<span>&nbsp;</span><em>OpenAPI</em><span>&nbsp;</span>端点。 这意味着开发人员通常只需专注于编写领域模型，即可完成服务开发，而无需费心处理查询逻辑的实现，极大提升了开发效率。</p></blockquote><ul><li>特性 (query): 新增<span>&nbsp;</span><code>SnapshotQueryServiceRegistrar</code><span>&nbsp;</span>以支持自动将所有本地聚合根查询服务注册到<span>&nbsp;</span><code>Spring</code><span>&nbsp;</span>容器中。</li><li>特性 (query): 为<span>&nbsp;</span><code>SnapshotQueryService</code><span>&nbsp;</span>API 添加属性<span>&nbsp;</span><code>NamedAggregate</code></li><li>重构 (compensation): 使用<span>&nbsp;</span><code>QueryDSL</code><span>&nbsp;</span>替换<span>&nbsp;</span><code>MongoExecutionFailedQuery</code></li><li>依赖 (build): 升级<span>&nbsp;</span><code>org.testcontainers:testcontainers-bom</code><span>&nbsp;</span>版本，到<span>&nbsp;</span><code>v1.19.7</code></li></ul><h3>查询服务注册器</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><code>SnapshotQueryServiceRegistrar</code><span>&nbsp;</span>用于自动将所有本地聚合根查询服务注册到<span>&nbsp;</span><code>Spring</code><span>&nbsp;</span>容器中。 开发者可以通过指定的<span>&nbsp;</span><code>Bean Name</code><span>&nbsp;</span>从<span>&nbsp;</span><code>BeanFactory</code><span>&nbsp;</span>中获取相应的<span>&nbsp;</span><code>SnapshotQueryService</code>。</p><blockquote><p style="margin-left:0; margin-right:0"><code>Bean Name</code><span>&nbsp;</span>命名规则：<code>聚合根名称 + ".SnapshotQueryService"</code>。</p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">使用案例：</p><blockquote><p style="margin-left:0; margin-right:0">构造函数注入</p></blockquote><div><pre><code>class OrderService(
    @Qualifier("example.order.SnapshotQueryService")
    private val queryService: SnapshotQueryService&lt;OrderState&gt;
) {
    fun getById(id: String): Mono&lt;OrderState&gt; {
        return condition {
            id(id)
        }.single(queryService).toState()
    }
}
</code></pre></div><blockquote><p style="margin-left:0; margin-right:0">字段注入</p></blockquote><div><pre><code>@Qualifier("example.order.SnapshotQueryService")
@Autowired
private lateinit var queryService: SnapshotQueryService&lt;OrderState&gt;
</code></pre></div><h3>操作符</h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,&quot;system-ui&quot;,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 20px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:816.25px; word-break:keep-all; word-spacing:0px"><tbody><tr><th>操作符</th><th>描述</th></tr></tbody><tbody><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">AND</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">对提供的条件列表执行逻辑与</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">OR</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">对提供的条件列表执行逻辑或</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ID</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>id</code>字段值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">IDS</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>id</code>字段值等于指定值列表中的任何值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TENANT_ID</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>tenantId</code>字段值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">DELETED</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>deleted</code>字段值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ALL</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">EQ</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段名称值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段名称值不等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">GT</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值大于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LT</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值小于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">GTE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值大于或等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LTE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值小于或等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">CONTAINS</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值包含指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">IN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值等于指定值列表中的任何值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NOT_IN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值不等于任何指定值或不存在的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">BETWEEN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ALL_IN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配所有文档，其中字段值是包含所有指定值的数组</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">STARTS_WITH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值以指定字符串开头的文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ENDS_WITH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值以指定字符串结尾的文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ELEM_MATCH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">条件与包含数组字段的所有文档相匹配，其中数组中至少有一个成员与给定的条件匹配。</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NULL</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值为<code>null</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NOT_NULL</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值不为<code>null</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TRUE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值为<code>true</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">FALSE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值为<code>false</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">RAW</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">原始操作符，将条件值直接作为原始的数据库查询条件</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TODAY</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在今天范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>为<span>&nbsp;</span><code>2024-06-06</code>，匹配范围<span>&nbsp;</span><code>2024-06-06 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-06 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TOMORROW</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在昨天范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>为<span>&nbsp;</span><code>2024-06-06</code>，匹配范围<span>&nbsp;</span><code>2024-06-05 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-05 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">THIS_WEEK</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在本周范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NEXT_WEEK</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在下周范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LAST_WEEK</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在上周范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">THIS_MONTH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在本月范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>:<span>&nbsp;</span><code>2024-06-06</code>，匹配范围 :<span>&nbsp;</span><code>2024-06-01 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-30 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LAST_MONTH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在上月范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>:<span>&nbsp;</span><code>2024-06-06</code>，匹配范围 :<span>&nbsp;</span><code>2024-05-01 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-05-31 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">RECENT_DAYS</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在指定值最近天数范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>:<span>&nbsp;</span><code>2024-06-06</code>，近三天，匹配范围 :<span>&nbsp;</span><code>2024-06-04 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-06 23:59:59.999</code><span>&nbsp;</span>的所有文档。即 : 今天、昨天、前天</td></tr></tbody></table><h3>QueryDsl</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">通过<span>&nbsp;</span><code>QueryDsl</code>，您可以轻松构建复杂的查询条件，例如：</p><div><pre><code>pagedQuery {
    pagination {
        index(1)
        size(10)
    }
    sort {
        "field1".asc()
    }
    condition {
        all()
        not {
           "field1" eq "value1"
           "field2" ne "value2"
        }
        "filed3" gt 1
        "field4" lt 1
        "field5" gte 1
        "field6" lte 1
        "field7" like "value7"
        "field8" isIn listOf("value8")
        "field9" notIn listOf("value9")
        "field10" between (1 to 2)
        "field11" all listOf("value11")
        "field12" startsWith "value12"
        "field13" elemMatch {
            "field14" eq "value14"
        }
        "field15".isNull()
        "field16".notNull()
        "field17".isTrue()
        "field18".isFalse()
        and {
            "field3" eq "value3"
            "field4" eq "value4"
        }
        or {
            "field3" eq "value3"
            "field4" eq "value4"
        }
    }
}
</code></pre></div><h3>OpenAPI</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">以下是一个示例<span>&nbsp;</span><code>curl</code><span>&nbsp;</span>命令，用于执行查询：</p><div><pre><code>  curl -X 'POST' \
  'http://localhost:8080/execution_failed/snapshot/pagination' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "sort": [
    {
      "field": "_id",
      "direction": "DESC"
    }
  ],
  "pagination": {
    "index": 1,
    "size": 10
  },
  "condition": {
    "field": "",
    "operator": "AND",
    "value": "",
    "children": [
      {
        "field": "state.recoverable",
        "operator": "NE",
        "value": "UNRECOVERABLE",
        "children": []
      },
      {
        "field": "state.status",
        "operator": "NE",
        "value": "SUCCEEDED",
        "children": []
      },
      {
        "field": "state.isBelowRetryThreshold",
        "operator": "EQ",
        "value": false,
        "children": []
      }
    ]
  }
}'
</code></pre></div><h3>TypeScript</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在<span>&nbsp;</span><em>TypeScript</em><span>&nbsp;</span>中，您可以使用<span>&nbsp;</span><code>Conditions</code><span>&nbsp;</span>类来构建复杂的查询条件，例如：</p><div><pre><code>Conditions.and(
    [
        Conditions.ne(RECOVERABLE, UNRECOVERABLE),
        Conditions.ne(STATUS, SUCCEEDED),
        Conditions.eq(IS_BELOW_RETRY_THRESHOLD, false)
    ]
)
</code></pre></div><div>
 &nbsp;
</div><h2>简介</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>Wow</em><span>&nbsp;</span>是一个基于领域驱动设计和事件溯源的现代响应式<span>&nbsp;</span><em>CQRS</em><span>&nbsp;</span>微服务开发框架，历经多年生产环境验证。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">旨在帮助开发者构建现代化的、高性能且易于维护的微服务应用程序，充分发挥领域驱动设计和事件溯源等模式优势的同时降低应用的复杂性以及实践成本。</p><blockquote><p style="margin-left:0; margin-right:0">值得一提的是，领域驱动设计和事件溯源并非微服务架构的专属，<em>Wow</em><span>&nbsp;</span>框架不仅适用于微服务开发，同样也可用于构建基于领域驱动设计的单体应用程序。</p></blockquote><h2>快速开始</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://ahoowang.gitee.io/wow/guide/getting-started.html">使用 Wow 项目模板快速创建基于 Wow 框架的 DDD 项目</a></p><h2>特性概览</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="Wow-Features" src="https://gitee.com/AhooWang/Wow/raw/main/documentation/docs/public/images/Features.png" referrerpolicy="no-referrer"></p><h2>架构图</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="Wow-Architecture" src="https://gitee.com/AhooWang/Wow/raw/main/documentation/docs/public/images/Architecture.svg" referrerpolicy="no-referrer"></p><h2>背景</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">随着业务的发展和复杂性的增加，传统的架构和开发方式逐渐显露出瓶颈。<em>领域驱动设计</em>和<em>事件溯源</em>等理念在提高系统设计的灵活性和可维护性方面表现出色，但在实践中常常需要面对复杂性和学习曲线的挑战。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>Wow</em><span>&nbsp;</span>框架的目标是以简单易用的方式将领域驱动设计和事件溯源等理念融入到微服务应用开发中，降低开发者的学习成本，提高开发效率。 通过提供现代响应式的<span>&nbsp;</span><em>CQRS</em><span>&nbsp;</span>架构和相关组件，<em>Wow</em><span>&nbsp;</span>框架旨在让开发者更专注于业务逻辑的实现，而不必过多关心底层技术细节。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">经过多年的实践和不断的演进，<em>Wow</em><span>&nbsp;</span>框架在生产环境中得到了验证，积累了丰富的经验。这些经验和反馈不仅丰富了框架的功能和性能，也为持续的改进和优化提供了宝贵的指导。</p><h2>对于开发者而言，<em>Wow</em><span>&nbsp;</span>框架意味着什么？</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">我曾告诫我的团队：如果我们过于依赖<em>数据驱动设计</em>而忽视<em>领域驱动设计</em>，我们最终将沦为<span>&nbsp;</span><em>CRUD</em><span>&nbsp;</span>工程师。</p><blockquote><p style="margin-left:0; margin-right:0"><em>CRUD</em><span>&nbsp;</span>工程师的竞争力和可替代性可想而知，这或许是为何会有<span>&nbsp;</span><em>35</em><span>&nbsp;</span>岁效应，企业显然更倾向于招募没有太多生活羁绊、更加廉价的<span>&nbsp;</span><em>25</em><span>&nbsp;</span>岁<span>&nbsp;</span><em>CRUD</em><span>&nbsp;</span>工程师。</p></blockquote><h3>业务价值</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">软件系统的核心价值体现在业务价值上，研发人员不应只关注技术实现上，而是应该更多地关注业务价值的实现。 这其中的好处显而易见，当你开发完一个业务系统之后，你将变成一个业务专家，甚至比跟你合作的领域专家还要专业，因为你需要洞察业务细节。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，意味着你将关注点放在围绕领域模型设计上，与业务专家一起探索业务领域，而不是关注于技术实现上。 你仅需编写领域模型，即可完成服务开发，<em>Wow</em><span>&nbsp;</span>框架自动为你准备好<span>&nbsp;</span><em>OpenAPI</em><span>&nbsp;</span>接口。</p><blockquote><p style="margin-left:0; margin-right:0">在《实现领域驱动设计》一书中，作者 Vaughn Vernon 提到：核心域才值得投入精力进行领域驱动设计， 但如果你使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你将发现，因为低廉开发成本、快速的开发效率，即使是次要的支撑子域也值得<span>&nbsp;</span><em>DDD</em>。</p></blockquote><h3>性能与伸缩性</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">随着业务的发展，你需要开始思考系统的性能和伸缩性问题。 在传统架构中，这牵扯到数据库关系模式、分片规则等复杂问题，同时你还需要处理因数据库分片导致的跨分片事务问题。 这时，你不得不修改你的业务代码，以适应水平拆分后的数据库架构。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">然而，如果你选择使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你将不再需要过多关注数据库关系模式、分片规则等问题。你的业务代码无需变更，系统能够轻松实现水平伸缩。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你可以在这里了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/perf-test.html">Wow 框架的性能</a>。</p><h3>读写分离与同步延迟</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">读写分离是一种极为普遍的性能优化架构模式。 然而，同步延迟问题常伴随而来，事务执行成功后写库落库成功，但读库同步延迟，用户刷新页面后无法获取最新数据，从而对用户的体验产生影响。例如：</p><ul><li>用户发起下单事务，写库执行成功，但由于某种原因，读库同步延迟，用户刷新页面后发现订单未成功创建。</li><li>商家编辑完商品后，同步到<span>&nbsp;</span><em>Elasticsearch</em><span>&nbsp;</span>索引库，但由于某种原因，同步延迟，导致商家刷新页面后搜索不到该商品。</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通常，大家采用最简便的方法，等待 1 秒后刷新页面。 虽然这种方式能解决大多数数据同步延迟的问题，但效率不够高。 因为大多数情况下，同步在 100 毫秒内就已完成，剩余的 900 毫秒成了<em>浪费</em>。 然而，有时 1 秒无法完成同步，这就导致用户获取的数据变得<strong>无效</strong>。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你可以通过等待<span>&nbsp;</span><em>PROJECTED</em><span>&nbsp;</span>信号完成，然后再将结果返回给用户，以更为优雅和高效的方式处理数据同步延迟的问题。</p><h3>工程质量</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>单元测试</em>是确保代码质量且符合预期业务需求的重要手段，但在传统架构中，单元测试往往是一项相当困难的任务，因为你需要考虑数据库连接、事务管理、数据清理等问题。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你将会发现基于<span>&nbsp;</span><em>Given-&gt;When-&gt;Expect</em><span>&nbsp;</span>模式的测试套件，使得单元测试变得异常简单。 你只需关注领域模型是否符合预期，而无需为数据库连接等问题烦恼。</p><blockquote><p style="margin-left:0; margin-right:0">在实际应用中，我们将领域模型的单元测试覆盖率下限阈值设置为<span>&nbsp;</span><strong>85%</strong>，也是可以轻松实现的。</p><p style="margin-left:0; margin-right:0">在没有刻意要求的情况下，开发人员甚至自觉地将覆盖率提升至<span>&nbsp;</span><strong>95%</strong>。</p><p style="margin-left:0; margin-right:0">因此，每次提交代码都变得轻松自在，因为你确信你的代码经过了充分的测试，并且真正意义上从单元测试中获得了收益。</p></blockquote><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">在研发同级别的项目中，我们的测试团队在系统<span>&nbsp;</span><em>API</em><span>&nbsp;</span>测试中发现，基于 Wow 框架的项目，其<span>&nbsp;</span><em>BUG</em><span>&nbsp;</span>数仅为传统架构项目的<span>&nbsp;</span><strong>1/3</strong>。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你可以在这里了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/test-suite.html">Wow 单元测试套件</a>。</p><h2>对于企业而言，<em>Wow</em><span>&nbsp;</span>框架意味着什么？</h2><h3>商业智能</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="传统架构 VS 事件溯源" src="https://foruda.gitee.com/images/1704878807657006766/300ee974_384561.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="ETL 同步流程" src="https://foruda.gitee.com/images/1704878793697689592/5fda25c1_384561.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>商业智能</em>是企业决策的关键支持，而数据则是商业智能的分析原料。业务数据越为丰富有价值，商业智能的分析结果越准确，决策也就更加可靠。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">与传统架构有着显著差异，<em>Wow</em><span>&nbsp;</span>提供了实时聚合根状态事件（<code>StateEvent</code>）和聚合命令（<code>Command</code>）作为数据分析的数据源，同时极大降低了实时<span>&nbsp;</span><em>ETL</em>（<code>Extract</code>,<span>&nbsp;</span><code>Transform</code>,<span>&nbsp;</span><code>Load</code>）的难度。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">在传统架构中，实现实时<span>&nbsp;</span><em>ETL</em><span>&nbsp;</span>通常需要经过繁琐的流程，包括<span>&nbsp;</span><code>DB-&gt;CDC-&gt;Process-&gt;DB</code>，而在<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架中，仅需一段简单的<span>&nbsp;</span><em>SQL</em><span>&nbsp;</span>脚本即可完成这一过程。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">另外，在传统架构中，使用<span>&nbsp;</span><em>CDC</em>（<code>MySql Binlog</code>）数据仅记录数据的变化，缺乏明确的业务语义。进行业务分析时，需要基于数据状态的变化推断出业务语义，这往往需要进行大量的数据处理。 相较之下，<em>Wow</em><span>&nbsp;</span>框架直接提供了聚合根状态事件和聚合命令作为数据分析的数据源，极大降低了数据处理的难度。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>Wow</em><span>&nbsp;</span>提供的实时同步机制将数据实时同步至数据仓库（<em>ClickHouse</em>），为实时数据分析提供了极大的便利。这种方法为商业智能提供了强有力的支持，构建了一个实时数据分析系统，使决策制定能够基于及时而准确的信息。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你可以在这里了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/bi.html">Wow 商业智能</a>。</p><h3>操作审计</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>操作审计</em>是企业中保障安全性和合规性的重要组成部分，同时也是对系统操作进行监控和追踪的关键手段。<em>Wow</em><span>&nbsp;</span>框架在这方面为企业带来了显著的优势。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通过记录聚合命令（<code>Command</code>）作为操作审计的数据源，<em>Wow</em><span>&nbsp;</span>框架能够详细追踪系统中的各种操作。 这些记录不仅包含了操作本身的内容，还涵盖了操作触发的副作用（<em>领域事件</em>），为审计提供了更为全面和准确的数据基础。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">相较于传统审计方法，<em>Wow</em><span>&nbsp;</span>框架的操作审计的数据源具备更加明确的业务语义，以及操作后产生的明确领域事件。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">此外，Wow 框架提供的实时数据同步机制也为操作审计带来了便利，确保了审计数据的及时性和一致性。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/bi.html#%E8%81%9A%E5%90%88%E5%91%BD%E4%BB%A4">Wow 操作审计</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 01:49:57 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281886/wow-2-16-16-released</guid>
            <link>https://www.oschina.net/news/281886/wow-2-16-16-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FolkMQ 增加 Node.js 客户端，v1.3.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; text-align:start">FolkMQ，作一个最简单的消息中间件（单机版，约 180K TPS）。面向简单，面向未来！</p><h3>功能简介</h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,&quot;system-ui&quot;,&quot;Segoe UI&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:960px; word-spacing:0px"><tbody><tr><th>角色</th><th>功能</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">生产端（或发起端）</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发布消息、定时消息（或叫延时）、顺序消息、可过期消息、事务消息。发送消息（rpc）<br> 支持 Qos0、Qos1</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">消费端（或接收端）</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">订阅、取消订阅。消费-ACK（自动、手动）。监听（rpc）</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">服务端</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发布-Confirm、订阅-Confirm、取消订阅-Confirm、派发-Retry、派发-Delayed</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">服务端</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">单线程、内存运行、快照持久化（自动、停机、手动）、Broker 模式集群、集群热扩展</td></tr></tbody></table><h3>中间件特点</h3><ul><li>高吞吐量、低延迟</li></ul><p style="color:#24292e; text-align:start">集群模式每秒能处理百万消息，最低延迟不到 1 毫秒。</p><ul><li>可扩展性</li></ul><p style="color:#24292e; text-align:start">集群模式支持服务节点热扩展。流量高时随时加，流量低时可减。视频：</p><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1vG411a7Q7%2F" target="_blank">《FolkMQ - "多中心" 集群模式部署视频》</a></p></li><li><p>持久性、可靠性</p></li></ul><p style="color:#24292e; text-align:start">消息被快照持久化（类似于 redis）到本地磁盘，并且支持数据备份防止数据丢失</p><ul><li>可集群、高可用</li></ul><p style="color:#24292e; text-align:start">可单机，可集群。集群内任何节点坏掉只要还有「一个」同类节点，仍可提供服务。视频：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Ha4y1R73b%2F" target="_blank">《FolkMQ - 集群"高可用性"测试视频》</a></li></ul><h3>本次更新</h3><ul><li>新增 javascript 语言客户端实现（浏览器, uniapp[h5, android, ios], weixin, node.js）</li><li>调整 docker 基础镜像改为：adoptopenjdk/openjdk11-openj9 （内存可省一半）</li><li>调整 folkmq-broker 更名为：folkmq-server-broker （相互兼容，体验不变）</li><li>添加 folkmq-server 对 ws 输传协议的支持</li><li>添加 rpc 异常传导机制</li><li>完善，顺序消息的消费逻辑（改为串行消费），更适合数据库有序同步之类的场景</li><li>完善，许可证本地处理机制（基于 rsa 签名机制）</li></ul><p style="color:#24292e; text-align:start">启动服务：</p><pre><code class="language-css">docker run -<span style="color:#e45649">p</span><span style="color:#986801">18602</span>:<span style="color:#986801">18602</span> -p <span style="color:#986801">8602</span>:<span style="color:#986801">8602</span> -e folkmq.schema=<span style="color:#50a14f">'ws'</span> noearorg/folkmq-server:<span style="color:#986801">1.3</span>.<span style="color:#986801">1</span></code></pre><p style="color:#24292e; text-align:start">新功能示例（for Js or Node.js Demo）：</p><pre><code class="language-java">const {FolkMQ} = require(<span style="color:#50a14f">"@noear/folkmq"</span>);

async function <span style="color:#4078f2">main</span><span>()</span> {
    <em>//创建客户端，并连接</em><span style="color:#986801">const</span><span style="color:#986801">client</span><span>=</span> await FolkMQ.createClient(<span style="color:#50a14f">"folkmq🇼🇸//127.0.0.1:18602"</span>)
                            .nameAs(<span style="color:#50a14f">"demoapp"</span>)
                            .connect();

    <em>//订阅主题</em>
    client.subscribe(<span style="color:#50a14f">"demo"</span>, <span style="color:#0184bb">null</span>, <span style="color:#0184bb">true</span>, message =&gt; {
        console.log(message);
    });

    <em>//发布消息</em>
    client.publish(<span style="color:#50a14f">"demo"</span>, FolkMQ.newMqMessage(<span style="color:#50a14f">"helloworld!"</span>));
}

main();
</code></pre><h3>代码仓库</h3><ul><li><a href="https://gitee.com/noear/folkmq">https://gitee.com/noear/folkmq</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Ffolkmq" target="_blank">https://github.com/noear/folkmq</a></li></ul><h3>官网</h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffolkmq.noear.org%2F" target="_blank">https://folkmq.noear.org</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 00:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281876/folkmq-1-3-1-released</guid>
            <link>https://www.oschina.net/news/281876/folkmq-1-3-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[冰盾·主动防御系统 4.0 更新说明]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>冰盾·主动防御系统是一款基于场景模式的终端、主机主动防御系统。使用冰盾可以帮助您拦截漏洞攻击、对抗流氓软件、保护电脑安全、提高工作效率。</span></p><h3><span>冰盾跟其他 HIPS 软件的差异</span></h3><blockquote><p style="margin-left:0; margin-right:0"><span>经常有人问，冰盾跟其他的 HIPS 软件有什么差异，为什么选择冰盾，而不是其他安全软件。</span></p></blockquote><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>冰盾打破传统基于对象操作的防护模型（比如文件的增、删、改、读等操作防御），采用基于场景模式的创新规则模型（比如禁止进程启动、文档保护、隐私保护），而且设计了基于模板+参数的规则引擎，大大降低了防御规则的编辑难度，同时还提供规则市场，让规则的分享和获取变得触手可及。</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>在性能上，冰盾规则引擎采用双缓存模式，匹配的效率提升到了极致，在不错误设置规则的情况，对系统几乎没有任何性能消耗。长期运行也不会有任何内存增长或者性能累计消耗，不仅适应于个人电脑，也非常适用于云服务器。</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>冰盾完全采用微软推荐的标准内核 API 实现功能，兼容性好，可以跟其他的安全软件很好并存。</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span><img alt="" height="659" src="https://oscimg.oschina.net/oscnet/up-8cb7dc6bc1a19ecd0e51cdc5f09ba05b859.png" width="1292" referrerpolicy="no-referrer"></span></p><h2><span>版本更新说明（4.0.0）</span></h2><ul><li><p style="margin-left:.5rem; margin-right:0"><span>iMonitorSDK 更新到 4.0</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>添加内核规则引擎</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加文件隐藏支持</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加沙箱支持</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加 RPC 调用进程溯源</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>优化部分性能</span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>模板</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>添加内置规则模板</span></strong></span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>添加高级模板（内核模式）支持</span></strong></span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>添加文件隐藏模板</span></strong></span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>添加轻量级沙箱模板</span></strong></span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>添加域名查询模板</span></strong></span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>增强防御</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>添加模拟鼠标键盘监控</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加访问剪切板监控</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加修改系统时间监控</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加关键事件监控</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加修改桌面背景监控</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加磁盘控制监控</span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>询问弹框</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>添加签名信息显示</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加事件自定义</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>弹框响应记录支持缓存（默认 1 分钟相同事件不提醒，可以设置里面修改）</span></strong></span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>拦截记录</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>添加分页支持</span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>信任列表</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>支持参数组</span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>优化</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>优化规则参数设置</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>废弃部分过期的模板</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>优化内核进程列表性能</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加 Image 挟持保护</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>增强自保护逻辑</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span><strong><span>添加远程调用溯源（服务创建、驱动加载、任务计划、用户创建、DNS 查询等可以定位到来源）</span></strong></span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加内核级别的规则设置</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>添加 WMI 进程创建监控</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>规则组支持剪切板导入</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>参数支持拖曳移动位置</span></p></li></ul></li><li><p style="margin-left:.5rem; margin-right:0"><span>修复</span></p><ul><li><p style="margin-left:.5rem; margin-right:0"><span>添加网络过滤驱动的兼容性</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>优化 HKEY_CLASSES_ROOT 重定向问题</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>修复端口防火墙弹框信任错误</span></p></li></ul></li></ul><p><img alt="" height="474" src="https://oscimg.oschina.net/oscnet/up-bcac92e03041cc32c65c9061a0838870136.png" width="668" referrerpolicy="no-referrer"></p><p><img alt="" height="486" src="https://oscimg.oschina.net/oscnet/up-cd947567df7f756bf5dbbcbe1b068228f7e.png" width="664" referrerpolicy="no-referrer"></p><p><img alt="" height="412" src="https://oscimg.oschina.net/oscnet/up-46e1a1e16b5d86d6738ce4fd27a8da42c4c.png" width="647" referrerpolicy="no-referrer"></p><p><img alt="" height="446" src="https://oscimg.oschina.net/oscnet/up-9bbe646c78de8c81565458c2e340dba1d07.png" width="660" referrerpolicy="no-referrer"></p><p><img alt="" height="448" src="https://oscimg.oschina.net/oscnet/up-d2316bc803892382fa769d1715436b9f9ab.png" width="660" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 14:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281851</guid>
            <link>https://www.oschina.net/news/281851</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Claude 3 系列模型来啦 - 开源 AI 聊天、绘图软件 AIdea 已更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近期，OpenAI 的主要竞争者 Anthropic 推出了他们的新一代大型语言模型 Claude 3，该系列涵盖了三个不同规模的模型：Opus、Sonnet 和 Haiku。</p><p><img alt="Claude 3 模型比较图" src="https://ssl.aicode.cc/mweb/20240306/17097175055447.jpg" referrerpolicy="no-referrer"></p><p>AIdea 已经更新，加入了对最新的 Claude 3 模型的支持（尽管 Haiku 模型目前还未对外开放）。欢迎大家尝试体验！下载体验地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faidea.aicode.cc" target="_blank">https://aidea.aicode.cc</a> 。</p><p><img alt="数字人对话" src="https://ssl.aicode.cc/mweb/20240306/17097177358067.jpg" referrerpolicy="no-referrer"></p><p><img alt="群聊对话" src="https://ssl.aicode.cc/mweb/20240306/17097177424575.jpg" referrerpolicy="no-referrer"></p><p><img alt="常用模型设置" src="https://ssl.aicode.cc/mweb/20240306/17097177476476.jpg" referrerpolicy="no-referrer"></p><p>AIdea 是一款集成了主流大语言模型以及绘图模型的 APP，采用 Flutter + Golang 开发，代码完全开源，目前已经支持以下大语言模型</p><p><img alt="" src="https://ssl.aicode.cc/mweb/20240220/17084183450421.jpg" referrerpolicy="no-referrer"></p><p>整体技术栈如下图</p><p><img alt="" src="https://ssl.aicode.cc/mweb/20231225/17034970421740.jpg" referrerpolicy="no-referrer"></p><p>如果你对 AIdea 项目感兴趣，以下是 Github 地址，赶紧去 Star 一下吧！</p><ul><li>客户端（ Flutter ）： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea" target="_blank">https://github.com/mylxsw/aidea</a></li><li>服务端（ Golang ）： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea-server" target="_blank">https://github.com/mylxsw/aidea-server</a></li><li>Docker 一键部署安装包：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmylxsw%2Faidea-docker" target="_blank">https://github.com/mylxsw/aidea-docker</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 09:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281805/aidea-claude3</guid>
            <link>https://www.oschina.net/news/281805/aidea-claude3</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【Java 比较 ORM 框架操作数据】操作批量新增、分页查询（七）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>orm 框架使用性能比较</h3><h4>比较 mybatis、lazy、sqltoy、mybatis-flex、easy-query、mybatis-mp、jpa、dbvisitor、beetlsql 操作数据</h4><h4>环境：</h4><pre><code>idea 
jdk17
spring boot 3.0.7
mysql 8.0
</code></pre><h3>测试条件常规对象</h3><table><tbody><tr><th>orm 框架</th><th>是否支持 xml</th><th>是否支持 Lambda</th><th>对比版本</th><th>编码方式</th></tr></tbody><tbody><tr><td>mybatis</td><td>☑️</td><td>☑️</td><td>3.5.4</td><td>lambda +xml 优化</td></tr><tr><td>sqltoy</td><td>☑️</td><td>☑️</td><td>5.2.98</td><td>lambda</td></tr><tr><td>lazy</td><td>✖️</td><td>☑️</td><td>1.2.4-JDK17-SNAPSHOT</td><td>lambda</td></tr><tr><td>mybatis-flex</td><td>☑️</td><td>☑️</td><td>1.8.0</td><td>lambda +xml 优化</td></tr><tr><td>easy-query</td><td>✖️</td><td>☑️</td><td>1.10.31</td><td>lambda</td></tr><tr><td>mybatis-mp</td><td>☑️</td><td>☑️</td><td>1.4.1</td><td>xml 优化</td></tr><tr><td>jpa</td><td>☑️</td><td>☑️</td><td>3.0.7</td><td>----------------------</td></tr><tr><td>dbvisitor</td><td>☑️</td><td>☑️</td><td>5.4.1</td><td>xml 优化</td></tr><tr><td>beetlsql</td><td>支持 md</td><td>☑️</td><td>3.26.0-RELEASE</td><td>insert ignore into 优化</td></tr></tbody></table><h3>数据库表 (含有唯一性索引 s_u)</h3><pre><code class="language-sql">CREATE TABLE `sys_user`
(
    `column_name` varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '额外字段',
    `create_time` datetime                                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '创建时间',
    `id`          bigint NOT NULL AUTO_INCREMENT COMMENT '用户 ID',
    `is_deleted`  tinyint(1) DEFAULT NULL COMMENT 'null',
    `password`    varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '密码',
    `scope`       varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT 'null',
    `status`      tinyint(1) DEFAULT NULL COMMENT '状态',
    `update_time` datetime                                DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间',
    `username`    varchar(255) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '用户名',
    PRIMARY KEY (`id`) USING BTREE,
    UNIQUE KEY `s_u` (`scope`,`username`)
) ENGINE=InnoDB AUTO_INCREMENT=9223371632070323791 DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci;
</code></pre><h3>比较方法:增加、修改、删除、分页查询（当前项目暂时只比较批量新增和分页）</h3><h4>项目设计</h4><ul><li><p>声明 ORMRepository 接口提供对应增删改查方法&nbsp;</p></li><li><p>声明 ORMComparisonRepository 接口，继承 ORMRepository 下游由不同 ORM 实现</p></li><li><p>声明 SysUserRepository 接口，继承 ORMRepository 用于循环调用不同 orm 实现方法执行方法测试产生测试结果</p></li><li><p>声明抽象类 SysUserRepositoryAbstractRecord 继承 ORMComparisonRepository 并且提供对应的框架执行结果存储&nbsp;</p></li><li><p>不同 ORM 框架创建 ORMComparisonRepository 的实现</p></li><li><p>不同 ORM 操作数据的实现</p></li></ul><h3>测试条件，批量插入数据 10、100、1000、10000、100000 ，分页查询数据 10、100、1000、10000、100000</h3><pre><code>项目启动后使用浏览器打开 http://localhost:1003/sys/user/run-compare
</code></pre><h3>测试条件（细节比较） 批量插入数据 1～10000，分页查询数据 1～10000</h3><pre><code>项目启动后使用浏览器打开 http://localhost:1003/sys/user/run-particulars-compare
</code></pre><h3>测试执行过程</h3><pre><code>清空需要插入表中所有数据
通过三种 ORM 框架进行数据批量新增、而后进行分页查询，记录消耗时间，输出 md 文档
</code></pre><h3><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Flocalhost%3A1003%2F" target="_blank">查看结果曲线图</a></h3><p><img height="757" src="https://oscimg.oschina.net/oscnet/up-61371d910485615d211e20a380e8457b728.png" width="1401" referrerpolicy="no-referrer"></p><h3>测试结果（结果只提供参考）</h3><table><tbody><tr><th>MYBATIS_FLEX(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>25 毫秒</strong></td><td><strong>18 毫秒</strong></td><td><strong>73 毫秒</strong></td><td><strong>671 毫秒</strong></td><td><strong>6653 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>MYBATIS(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>51 毫秒</strong></td><td><strong>28 毫秒</strong></td><td><strong>84 毫秒</strong></td><td><strong>601 毫秒</strong></td><td><strong>5963 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>LAZY(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>4 毫秒</strong></td><td><strong>12 毫秒</strong></td><td><strong>48 毫秒</strong></td><td><strong>353 毫秒</strong></td><td><strong>3512 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>MYBATIS_MP(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>8 毫秒</strong></td><td><strong>16 毫秒</strong></td><td><strong>66 毫秒</strong></td><td><strong>589 毫秒</strong></td><td><strong>6060 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>DB_VISITOR(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>67 毫秒</strong></td><td><strong>155 毫秒</strong></td><td><strong>897 毫秒</strong></td><td><strong>8368 毫秒</strong></td><td><strong>82348 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>JPA(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>67 毫秒</strong></td><td><strong>64 毫秒</strong></td><td><strong>952 毫秒</strong></td><td><strong>8608 毫秒</strong></td><td><strong>95946 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>EASY_QUERY(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>58 毫秒</strong></td><td><strong>91 毫秒</strong></td><td><strong>395 毫秒</strong></td><td><strong>1608 毫秒</strong></td><td><strong>15802 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>SQLTOY(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>35 毫秒</strong></td><td><strong>36 毫秒</strong></td><td><strong>173 毫秒</strong></td><td><strong>1540 毫秒</strong></td><td><strong>15167 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>BEETL_SQL(batchStory)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>187 毫秒</strong></td><td><strong>106 毫秒</strong></td><td><strong>260 毫秒</strong></td><td><strong>1713 毫秒</strong></td><td><strong>16778 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>MYBATIS_FLEX(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>28 毫秒</strong></td><td><strong>8 毫秒</strong></td><td><strong>19 毫秒</strong></td><td><strong>113 毫秒</strong></td><td><strong>865 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>MYBATIS(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>26 毫秒</strong></td><td><strong>7 毫秒</strong></td><td><strong>20 毫秒</strong></td><td><strong>98 毫秒</strong></td><td><strong>732 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>LAZY(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>5 毫秒</strong></td><td><strong>5 毫秒</strong></td><td><strong>9 毫秒</strong></td><td><strong>71 毫秒</strong></td><td><strong>474 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>MYBATIS_MP(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>28 毫秒</strong></td><td><strong>5 毫秒</strong></td><td><strong>16 毫秒</strong></td><td><strong>89 毫秒</strong></td><td><strong>752 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>DB_VISITOR(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>14 毫秒</strong></td><td><strong>4 毫秒</strong></td><td><strong>9 毫秒</strong></td><td><strong>50 毫秒</strong></td><td><strong>424 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>JPA(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>85 毫秒</strong></td><td><strong>11 毫秒</strong></td><td><strong>49 毫秒</strong></td><td><strong>117 毫秒</strong></td><td><strong>805 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>EASY_QUERY(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>39 毫秒</strong></td><td><strong>9 毫秒</strong></td><td><strong>22 毫秒</strong></td><td><strong>60 毫秒</strong></td><td><strong>474 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>SQLTOY(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>23 毫秒</strong></td><td><strong>4 毫秒</strong></td><td><strong>10 毫秒</strong></td><td><strong>45 毫秒</strong></td><td><strong>249 毫秒</strong></td></tr></tbody></table><table><tbody><tr><th>BEETL_SQL(findPage)</th><th>影响行数:10</th><th>影响行数:100</th><th>影响行数:1000</th><th>影响行数:10000</th><th>影响行数:100000</th></tr></tbody><tbody><tr><td>执行时间:</td><td><strong>43 毫秒</strong></td><td><strong>13 毫秒</strong></td><td><strong>21 毫秒</strong></td><td><strong>76 毫秒</strong></td><td><strong>633 毫秒</strong></td></tr></tbody></table><h4>写在最后</h4><p>细节数据对比（一万以内基本相差不大）</p><ul><li>细节数据对比，数据属于并发行测试数据，如果测试总数是一百，那么会执行一百次 batchStory，一百次 findPage 每次执行的条数在之前数据的基础上+1</li></ul><p>从形成的折线图看（具体趋势看排名与测试结果）</p><ul><li>存储性能对比: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql 更适合并发性数据存储。jpa、db_visitor 处理耗时较长</li><li>分页查询性能对比: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、db_visitor、beetlSql 都比较稳定。jpa 处理时间明显起伏</li></ul><p><img height="679" src="https://oscimg.oschina.net/oscnet/up-f09e3ee8efef84baba88890fb63e6d31a3b.png" width="1406" referrerpolicy="no-referrer"></p><p><img height="698" src="https://oscimg.oschina.net/oscnet/up-928ba767617bad09b2b47481d399c812a70.png" width="1402" referrerpolicy="no-referrer"></p><p>批量保存：</p><ul><li>一万条数据以内 lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql、jpa、db_visitor 性能趋于一致</li><li>十万数据时，处理时间由快到慢依次是: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql、db_visitor、jpa，其中 db_visitor、jpa 处理时间明显起伏</li></ul><p>分页查询：</p><ul><li>一万条数据以内，几款 ORM 均保持在 200 毫秒内</li><li>十万数据时，处理时间由快到慢依次是: sqltoy、db_visitor、easy-query、lazy、beetlSql、mybatis、mybatis-mp、jpa、mybatis-flex</li><li>&nbsp;</li></ul><h3>快速数据对比 (大数据曲线图)</h3><p><img height="674" src="https://oscimg.oschina.net/oscnet/up-6a71c9a1e912b97ed59450e7362b127b8cf.png" width="1407" referrerpolicy="no-referrer"></p><p><img height="686" src="https://oscimg.oschina.net/oscnet/up-f5898a01682ab16289012b658c8c02e3c2c.png" width="1389" referrerpolicy="no-referrer"></p><h4><a href="https://gitee.com/wujiawei1207537021/wu-compare-orm-demo">当前项目地址</a></h4><h4><a href="https://gitee.com/wujiawei1207537021/wu-framework-parent/tree/master/wu-database-parent">lazy-orm 地址</a></h4><h4><a href="https://gitee.com/baomidou/mybatis-plus">mybatis 地址</a></h4><h4><a href="https://gitee.com/sagacity/sagacity-sqltoy">sqltoy 地址</a></h4><h4><a href="https://gitee.com/mybatis-flex/mybatis-flex">mybatis-flex 地址</a></h4><h4><a href="https://gitee.com/xuejm/easy-query">easy-query 地址</a></h4><h4><a href="https://gitee.com/mybatis-mp/mybatis-mp">mybatis-mp 地址</a></h4><h4><a href="https://gitee.com/zycgit/dbvisitor">dbvisitor 地址</a></h4><h4><a href="https://gitee.com/xiandafu/beetlsql">beetlsql 地址</a></h4></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 09:24:40 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281792</guid>
            <link>https://www.oschina.net/news/281792</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[前端开源项目 Fes-design 版本更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3><span style="background-color:#ffffff; color:#24292f">v0.8.32</span></h3><h3>Bug Fixes</h3><ul><li>修复 ExtractPublicPropTypes 推导组件 Props 类型问题 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F644" target="_blank">#644</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2Fc48fc19bc8f721113ee9ba091c39d1f8b10f8778" target="_blank">c48fc19</a>)</li><li>修复因 vue 版本升级引起的类型报错 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F654" target="_blank">#654</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2Fc8a4424e3fac4d76c88576d026965bdb968a7c46" target="_blank">c8a4424</a>)</li><li><strong>Input:</strong><span>&nbsp;</span>word limit 样式优化 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F638" target="_blank">#638</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F7052bc9a2e2a7cf7029bfbc84f889dc92f4f18cb" target="_blank">7052bc9</a>)</li><li><strong>Tabs:</strong><span>&nbsp;</span>移除 props 中的 key 配置项，由于是 vue 的保留字段 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F646" target="_blank">#646</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F525e822de34bdf1d0596b25d1bcd8d53736e6a46" target="_blank">525e822</a>)</li></ul><h3>Features</h3><ul><li>日期选择器 minDate,maxDate 传时间戳 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F634" target="_blank">#634</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2Fcc3624b54a7a15cd7faf931a08958eef9497d452" target="_blank">cc3624b</a>)</li><li><strong>Avatar:</strong><span>&nbsp;</span>新增头像，头像组组件 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F633" target="_blank">#633</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F676dfec6c465cda5320a632f4ccbbfc195b3978c" target="_blank">676dfec</a>)</li><li><strong>Popper:</strong><span>&nbsp;</span>新增 popperStyle prop (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fissues%2F652" target="_blank">#652</a>) (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FWeBankFinTech%2Ffes-design%2Fcommit%2F287dab8a1572ff8e500646999037c3fa98b9628c" target="_blank">287dab8</a>)</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 08:54:47 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281779/fes-design-0-8-32-released</guid>
            <link>https://www.oschina.net/news/281779/fes-design-0-8-32-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[新篇章，稳步向前，.NET 流行框架 Furion v4.9.1.37 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>自上次版本发布以来，已过去十余日。经过四年的持续精进与迭代，Furion v4 已变得极为成熟与稳定，吸引了越来越多的企业与个人用户。去年，我们推行了 Furion 部分文档付费政策，这一决策在当时引发了用户的各种反馈。然而，令人欣慰的是，今年我们获得了大多数用户的理解与支持，这使得我们的整体运营逐渐回归正轨。同时，选择并信赖 Furion 的用户数量也在持续增长。</p><p><strong>截止至 2024 年 3 月 6 日，Furion 在 Gitee 平台上的 Star 数量已突破 11K，并持续以每日 8-10 个 Star 的速度稳健增长。</strong></p><p><img height="1322" src="https://oscimg.oschina.net/oscnet/up-ea663fb55b7fd69dd53fd165b018e850fc3.png" width="1695" referrerpolicy="no-referrer"></p><p><img height="1322" src="https://oscimg.oschina.net/oscnet/up-e76a64ebf417abdc8cb218cde143339b45c.png" width="1695" referrerpolicy="no-referrer"></p><p><img height="1322" src="https://oscimg.oschina.net/oscnet/up-edb97edcc5227472feb2008a1633583f41f.png" width="1695" referrerpolicy="no-referrer"></p><h2>项目信息</h2><ul><li>Gitee：<strong><a href="https://gitee.com/dotnetchina/Furion">https://gitee.com/dotnetchina/Furion</a></strong></li><li>Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMonkSoul%2FFurion" target="_blank">https://github.com/MonkSoul/Furion</a></li><li>文档：<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffurion.net" target="_blank">https://furion.net</a></strong></li></ul><h2>本期亮点</h2><h3>1. 完善了诊断日志输出，打印更多信息</h3><p><img src="https://foruda.gitee.com/images/1709356730243808553/6c65cb08_974299.png" referrerpolicy="no-referrer"></p><h3>2. Docker 部署文档添加 Harbor 漏洞 Trivy 组件扫描文档</h3><p><img height="1328" src="https://oscimg.oschina.net/oscnet/up-7cd33f157453f581208d9de5e0381a0145f.png" width="1718" referrerpolicy="no-referrer"></p><h2>本期更新</h2><ul><li><p style="margin-left:0; margin-right:0"><strong>新特性</strong></p><ul><li>[新增] 监听日志<span>&nbsp;</span><code>Monitor</code><span>&nbsp;</span>支持显示服务端端口号<span>&nbsp;</span>4.9.1.36<span>&nbsp;</span>⏱️2024.03.02<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/9280b6d02fa14cc2a22248d8dd9f82c9d3679d63">9280b6d</a></li><li>[新增] 监听日志<span>&nbsp;</span><code>Monitor</code><span>&nbsp;</span>支持显示客户端（远程）<code>NAT</code><span>&nbsp;</span>端口号<span>&nbsp;</span>4.9.1.36<span>&nbsp;</span>⏱️2024.03.02<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I957SE">#I957SE</a></li><li>[新增] 监听日志<span>&nbsp;</span><code>Monitor</code><span>&nbsp;</span>支持显示<span>&nbsp;</span><code>Web</code><span>&nbsp;</span>主机启动或监听的地址<span>&nbsp;</span>4.9.1.36<span>&nbsp;</span>⏱️2024.03.02<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/issues/I94XR1">#I94XR1</a><span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/0e3417285f3a9fb1ccc8ae10e9a1155717bf9a58">0e34172</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>问题修复</strong></p><ul><li>[修复]<span>&nbsp;</span><code>Web</code><span>&nbsp;</span>主机未启动但泛型主机已启动时使用<span>&nbsp;</span><code>App.GetService</code><span>&nbsp;</span>出现<span>&nbsp;</span><code>RootServices</code><span>&nbsp;</span>为<span>&nbsp;</span><code>null</code><span>&nbsp;</span>问题<span>&nbsp;</span>4.9.1.37<span>&nbsp;</span>⏱️2024.03.03<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/ee70ab9bdf5b38683b6c3f9aeef12a2bf64f787a">ee70ab9</a></li><li>[修复] 任务队列订阅任务执行结果处理程序中出现异常后重复触发问题<span>&nbsp;</span>4.9.1.35<span>&nbsp;</span>⏱️2024.02.28<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/fa81c548f02c0e6d8c90eb9abddb658cf50aa6c9">fa81c54</a></li><li>[修复] 事件总线因<span>&nbsp;</span><code>4.9.1.33</code>（<a href="https://gitee.com/dotnetchina/Furion/commit/0bbeb49b97e186d1719b106637e131f6333417e3">0bbeb49</a>） 版本导致自定义事件存储器无法消费动态订阅器问题<span>&nbsp;</span>4.9.1.34<span>&nbsp;</span>⏱️2024.02.27<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/d66175c9a3b84f0dc626ed6dc44a64673432e830">d66175c</a></li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>其他更改</strong></p><ul><li>[优化] 事件总线在超高频事件中内存占用（约<span>&nbsp;</span><code>9%</code>）<span>&nbsp;</span>4.9.1.33<span>&nbsp;</span>⏱️2024.02.25<span>&nbsp;</span><a href="https://gitee.com/dotnetchina/Furion/commit/0bbeb49b97e186d1719b106637e131f6333417e3">0bbeb49</a></li></ul></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 08:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281763/furion-4-9-1-37-released</guid>
            <link>https://www.oschina.net/news/281763/furion-4-9-1-37-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Swift 5.10 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Swift 5.10 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.swift.org%2Fblog%2Fswift-5.10-released%2F" target="_blank">发布</a>，此版本<span style="color:#000000"><strong>在并发语言模型中实现了完全的数据隔离。</strong>公告称，「这一重要的里程碑经过了多年的积极开发，历经多个版本。」</span></p><p><span style="color:#000000">并发模型是在 Swift 5.5 中引入的，包括</span><code class="language-plaintext">async</code><span style="color:#000000">/</span><code class="language-plaintext">await</code><span style="color:#000000">、actors 和结构化并发 (structured concurrency)。Swift 5.7 引入了<code class="language-plaintext">Sendable</code>线程安全类型的基本概念，其值可以在任意并发上下文之间共享，而不会引入数据竞争的风险。现在，在 Swift 5.10 中，当启用完整的并发检查选项时，语言的所有区域都会在编译时强制执行完全数据隔离。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Swift 5.10 中的完全数据隔离为下一个主要版本 Swift 6 奠定了基础。Swift 6.0 编译器将提供新的、可选的 Swift 6 语言模式，该模式将默认强制执行完全数据隔离，项目团队将着手进行过渡消除所有用 Swift 编写的软件之间的数据竞争。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Swift 5.10 会在某些情况下产生数据竞争警告，而在这些情况下，通过额外的编译器分析可以证明代码是安全的。Swift 6 版本的语言开发的一个主要重点是通过减少已证明安全的常见代码模式中的误报并发错误，来提高严格并发检查的可用性。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><strong><span style="color:#000000">完全数据隔离</span></strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Swift 5.10 完善了语言各个角落的数据竞争安全语义，并修复了<code class="language-plaintext">Sendable</code>和 actor isolation checking 中的大量错误，以加强完整并发检查的保证。使用编译器 flag<code class="language-plaintext">-strict-concurrency=complete</code>构建代码时，Swift 5.10 将在编译时诊断数据竞争的可能性，除非使用 explicit unsafe opt-out（例如<code class="language-plaintext">nonisolated(unsafe)</code>或<code class="language-plaintext">@unchecked Sendable</code>）。</span></p><pre><code> warning: expression is 'async' but is not marked with 'await'
    let model = MyModel.shared
                ^~~~~~~~~~~~~~
                await</code></pre><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">解决数据竞争的可能修复方法有：</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">1)&nbsp;</span><span style="color:#000000">access&nbsp;</span><code class="language-plaintext">MyModel.shared</code><span style="color:#000000">&nbsp;asynchronously using&nbsp;</span><code class="language-plaintext">await</code></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">2) 使<code class="language-plaintext">MyModel.init</code>和<code class="language-plaintext">MyModel.shared</code>两者都<code class="language-plaintext">nonisolated</code>，并将需要 main actor 的代码移到单独的隔离方法中，或 </span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">3) 将<code class="language-plaintext">useShared()</code>隔离到<code class="language-plaintext">@MainActor</code>。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapple%2Fswift%2Fblob%2Frelease%2F5.10%2FCHANGELOG.md" target="_blank">可以在 Swift 5.10 发行说明</a>中查看更多详细信息。</span></p><p><strong>Unsafe opt-outs</strong></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Swift 5.10 引入了一个新<code class="language-plaintext">nonisolated(unsafe)</code>keyword，用于 opt out 对存储的属性和变量的 actor isolation checking。<code class="language-plaintext">nonisolated(unsafe)</code>可用于任何形式的存储，包括存储属性、局部变量和全局/静态变量。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><code class="language-plaintext">nonisolated(unsafe)</code>还消除了对<code class="language-plaintext">@unchecked Sendable</code>wrapper types 的需要，</span>这些类型仅用于在不存在并发访问可能性时跨隔离边界传递非<span style="color:#000000"><code class="language-plaintext">Sendable</code></span>值的特定实例：</p><pre><code>// 'MutableData' is not 'Sendable'
class MutableData { ... }

func processData(_: MutableData) async { ... }

@MainActor func send() async {
  nonisolated(unsafe) let data = MutableData()
  await processData(data)
}</code></pre><h4><strong>Swift 6 之前的语言演变</strong></h4><p>Swift 的下一个版本将是 Swift 6。鉴于 Swift 5.10 中的完整并发模型限制过多，团队目前正在积极开发几项 Swift Evolution 提议，以通过消除误报数据竞争错误来提高完整数据隔离的可用性。</p><p>这项工作包括：当编译器确定没有并发访问的可能性时，取消对跨隔离边界传递 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapple%2Fswift-evolution%2Fblob%2Fmain%2Fproposals%2F0414-region-based-isolation.md" target="_blank">non-<code class="language-plaintext">Sendable</code></a>值的限制；为&nbsp;functions 和 key-paths&nbsp;提供更有效的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapple%2Fswift-evolution%2Fblob%2Fmain%2Fproposals%2F0418-inferring-sendable-for-methods.md" target="_blank"><code class="language-plaintext">Sendable</code>&nbsp;inference</a>&nbsp;等。可以在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.swift.org%2Fswift-evolution%2F%23%3Fversion%3D6.0" target="_blank">Swift.org/swift-evolution</a>&nbsp;上找到将完善 Swift 6 的提案集。</p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.swift.org%2Fblog%2Fswift-5.10-released%2F" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 07:07:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281751/swift-5-10-released</guid>
            <link>https://www.oschina.net/news/281751/swift-5-10-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Steam++ 3.0.0-rc.4 已经发布，Steam 工具箱]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Steam++ 3.0.0-rc.4 已经发布，Steam 工具箱</p><p>此版本更新内容包括：</p><h3>更新说明</h3><ol><li>新增与迅游合作推出的游戏加速功能</li><li>修复令牌确认交易时某些状况下导致程序闪退和错误</li><li>新增令牌搜索</li><li>修复挂卡某些用户无法正常获取卡片数据导致无法启动挂卡</li><li>修复脚本在某些情况下失效问题</li><li>账号切换数据加载性能优化</li><li>修复账号切换 <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.riotgames.com%2Fen" target="_blank">Riot Games</a>、<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.rockstargames.com%2F" target="_blank">Rockstar Games</a> 等平台出现问题</li><li>修复开机启动任务计划请求的操作需要提升</li><li>此版本开始将恢复微软商店版本更新</li><li>修复开启最小化启动情况下解锁成就、云存档管理也被错误的最小化导致无法使用问题</li></ol><h3>注意事项</h3><p>macos 版本文件过大 gitee 无法上传请去 github 下载，为避免意外丢失数据，跨大版本覆盖升级时注意备份旧版本重要数据（比如令牌）。</p><h2>文件校验</h2><table><tbody><tr><th>File</th><th>Checksum (SHA256)</th></tr></tbody><tbody><tr><td>Steam++_v3.0.0-rc.4_win_x64.7z</td><td>7D0F44DC472CB40899FAE6805374AEDFF3FB15EFA7B72E581A9D712890D4CAD8</td></tr><tr><td>Steam++_v3.0.0-rc.4_win_x64.exe</td><td>8C09B94D3B673A5202DF4F374E6B8A5159454206C13D118DF6141FA29C0A0260</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Steam++_v3.0.0-rc.4_linux_x64.tgz</td><td>53C76CF3FFF3F793487233125F41C9AF478C8987FDD9FDE029AA6C30C1914101</td></tr><tr><td>&nbsp;</td><td>&nbsp;</td></tr><tr><td>Steam++_v3.0.0-rc.4_macos.dmg</td><td>7440091C2BA1E8AF52BB0E3FB695E8F8946EA8E64E21211244CE9208CA2FF4DB</td></tr></tbody></table><p><a href="https://gitee.com/link?target=https%3A%2F%2Fsteampp.net" target="_blank"><img alt="Official steampp.net" src="https://img.shields.io/badge/Official-steampp.net-brightgreen.svg?style=flat-square&amp;color=61dafb" referrerpolicy="no-referrer"></a><img alt="Steam++ v3.0.0-rc3" src="https://img.shields.io/badge/Steam++-v3.0.0-brightgreen.svg?style=flat-square&amp;color=512bd4" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FBeyondDimension%2FSteamTools%2Fblob%2Fdevelop%2Fdownload-guide.md" target="_blank">不知道该下载哪个文件?</a></p><p>详情查看：<a href="https://gitee.com/rmbgame/SteamTools/releases/3.0.0-rc.4">https://gitee.com/rmbgame/SteamTools/releases/3.0.0-rc.4</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 06:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281740/steampp-3-0-0-rc-4-released</guid>
            <link>https://www.oschina.net/news/281740/steampp-3-0-0-rc-4-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[outline.js 3.32.1 已经发布，自动生成文章导读导航]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>outline.js 3.32.1 已经发布，自动生成文章导读导航</p><p>此版本更新内容包括：</p><h3>Bug Fixes</h3><ul><li>修复 Anchors 模块初始化 attrs 属性直接复制等于 Anchors.DEFAULTS 在创建多个实例时出现的共用一个配置的问题；</li></ul><p>详情查看：<a href="https://gitee.com/yaohaixiao/outline.js/releases/3.32.1">https://gitee.com/yaohaixiao/outline.js/releases/3.32.1</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 05:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281724/outline-js-3-32-1-released</guid>
            <link>https://www.oschina.net/news/281724/outline-js-3-32-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JimuReport 积木报表 v1.7.1 版本发布，低代码报表工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>项目介绍</h3><blockquote><p style="margin-left:0; margin-right:0">一款免费的数据可视化报表，含报表和大屏设计，像搭建积木一样在线设计报表！功能涵盖，数据报表、打印设计、图表报表、大屏设计等！</p><ul><li>Web 版报表设计器，类似于 excel 操作风格，通过拖拽完成报表设计。</li><li>秉承 「简单、易用、专业」 的产品理念，极大的降低报表开发难度、缩短开发周期、节省成本、解决各类报表难题。</li><li>领先的企业级 Web 报件，采用纯 Web 在线技术，专注于解决企业报表快速制作难题。</li></ul></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>当前版本</strong>：v1.7.1 | 2024-03-06</p><h4>集成依赖</h4><ul><li>springboot2 依赖</li></ul><pre><code><span style="color:#333333">&lt;<span style="color:#22863a">dependency</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">groupId</span>&gt;</span>org.jeecgframework.jimureport<span style="color:#333333">&lt;/<span style="color:#22863a">groupId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">artifactId</span>&gt;</span>jimureport-spring-boot-starter<span style="color:#333333">&lt;/<span style="color:#22863a">artifactId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">version</span>&gt;</span>1.7.1<span style="color:#333333">&lt;/<span style="color:#22863a">version</span>&gt;</span><span style="color:#333333">&lt;/<span style="color:#22863a">dependency</span>&gt;</span></code></pre><ul><li>springboot3 依赖</li></ul><pre><code><span style="color:#333333">&lt;<span style="color:#22863a">dependency</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">groupId</span>&gt;</span>org.jeecgframework.jimureport<span style="color:#333333">&lt;/<span style="color:#22863a">groupId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">artifactId</span>&gt;</span>jimureport-spring-boot3-starter-fastjson2<span style="color:#333333">&lt;/<span style="color:#22863a">artifactId</span>&gt;</span><span style="color:#333333">&lt;<span style="color:#22863a">version</span>&gt;</span>1.7.1<span style="color:#333333">&lt;/<span style="color:#22863a">version</span>&gt;</span><span style="color:#333333">&lt;/<span style="color:#22863a">dependency</span>&gt;</span></code></pre><h4>升级日志</h4><ul><li>新增冻结功能（支持锁定列行）</li><li>导出 pdf 行距错乱，变得不可控<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2431" target="_blank"><span>&nbsp;</span>#2431</a></li><li>点击打印预览时会多出两个空白页 [#2415](点击打印预览时会多出两个空白页 #2415 "#2415")</li><li>springboot3， 积木报表，聚合分组查询失败<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport%2Fissues%2F2398" target="_blank">#2398</a></li><li>支持 base64 格式图片</li><li>图表颜色配置，按照顺序给系列赋颜色并支持调整顺序</li><li>压缩静态资源，提升加载性能</li><li>横向动态合并，支持前边合计</li><li>pdf 导出两边默认有空格，需要减去两边的空格</li><li>pgsql 为数据源的情况下，数值类型变量莫名其妙被转成字符类型比较</li></ul><h4>代码下载</h4><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fjeecgboot%2FJimuReport" target="_blank">https://github.com/jeecgboot/JimuReport</a></li><li><a href="https://gitee.com/jeecg/JimuReport">https://gitee.com/jeecg/JimuReport</a></li></ul><h4>技术文档</h4><ul><li>体验官网：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fjimureport.com%2F" target="_blank">http://jimureport.com</a></li><li>快速集成文档 ：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.jeecg.com%2Fjimureport%2Fquick.html" target="_blank">https://help.jeecg.com/jimureport/quick.html</a></li><li>技术文档：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhelp.jeecg.com%2Fjimureport" target="_blank">https://help.jeecg.com/jimureport</a></li></ul><h4>为什么选择 JimuReport?</h4><blockquote><p style="margin-left:0; margin-right:0">永久免费，支持各种复杂报表，并且傻瓜式在线设计，非常的智能，低代码时代，这个是你的首选！</p></blockquote><ul><li>采用 SpringBoot 的脚手架项目，都可以快速集成</li><li>Web 版设计器，类似于 excel 操作风格，通过拖拽完成报表设计</li><li>通过 SQL、API 等方式，将数据源与模板绑定。同时支持表达式，自动计算合计等功能，使计算工作量降低</li><li>开发效率很高，傻瓜式在线报表设计，一分钟设计一个报表，又简单又强大</li><li>支持 ECharts，目前支持 28 种图表，在线拖拽设计，支持 SQL 和 API 两种数据源</li><li>支持分组、交叉，合计、表达式等复杂报表</li><li>支持打印设计（支持套打、背景打印等）可设置打印边距、方向、页眉页脚等参数，一键快速打印，同时可实现套打，不动产证等精准、无缝打印</li><li>大屏设计器支持几十种图表样式，可自由拼接、组合，设计炫酷大屏</li><li>可设计各种类型的单据、大屏，如出入库单、销售单、财务报表、合同、监控大屏、旅游数据大屏等</li></ul><h4>报表设计效果</h4><ul><li>报表设计器（专业一流，数据可视化，解决各类报表难题）<span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-a2a8557722593e6c5a5e8f015a0df2b70e9.png" referrerpolicy="no-referrer"></li><li>报表设计器（完全在线设计，简单易用）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-752b454f64ed87c798b3e8a083fbd6622d4.gif" referrerpolicy="no-referrer"></p><ul><li>打印设计（支持套打、背景打印）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9b6cd73719de68e0e45e1cf95cd6104a103.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-8863ea4e67c02dbd844bb8022652f1be651.png" referrerpolicy="no-referrer"></p><ul><li>数据报表（支持分组、交叉，合计等复杂报表）</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fe2ac0dfc3933734961924de0538b3049d2.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-be956cbc19287e4df9cc46c9d15e96da99d.png" referrerpolicy="no-referrer"></p><ul><li>图形报表（目前支持 28 种图表）<span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-3eda428ef182cb64a1a8e132e4bfeb87718.png" referrerpolicy="no-referrer"><span>&nbsp;</span><img alt="" src="https://oscimg.oschina.net/oscnet/up-22096123c5b6a10a801967c33cc33a7af11.png" referrerpolicy="no-referrer"></li><li>数据报表斑马线</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-e77ba28f6fb56d1147c13388e7e5d19d1bc.png" referrerpolicy="no-referrer"></p><p>仪表盘设计器</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c9d41288c31398d76b390bdd400f13a582.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8ebff9357b6a22161f668586af28be31488.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fad98d42b2cf92f92a903c9cff7579f18ec.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-4be5b44bf771d8c55aba2adf9ae074eac18.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-57676eb5dcf4726933e0f6e429a4b2e31a9.png" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-7938331a342ba363a9691d76a53f34298fc.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 04:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281720/jimureport-1-7-1-released</guid>
            <link>https://www.oschina.net/news/281720/jimureport-1-7-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[BuildAdmin-v2.0.5 发布，Vite、Element plus 等依赖升级到最新版本]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>新增</h3><ul><li>更新所有前端依赖<code>Vite5+ElementPlus2.4</code></li><li>模块更新<code>composer.json</code>中的<code>config</code>字段实现</li></ul><h3>重构/优化/修复</h3><ul><li>优化前台页脚样式</li><li>优化路由动态注册</li><li>优化获取第一个菜单的函数</li><li>优化通用搜索按钮样式 !142</li><li>优化系统配置数据模型</li><li>优化可视化<code>CRUD</code>设计器的样式</li><li>后台会员管理中的会员分组设为必填</li><li>默认不再内置<code>easywechat</code>依赖，添加<code>guzzlehttp</code>依赖（受益于模块可以调整<code>composer.json</code>的<code>config</code>）</li><li>系统配置中的快捷配置入口使用路由<code>name</code>而不再是路由<code>path</code></li><li>语言包按需加载映射表中的后台入口路径由字面量改为变量</li><li>管理员登录接口返回的路由路径使用的字面量改为变量</li><li><code>eslint</code>和<code>prettier</code>与<code>ESM</code>的兼容</li><li>修复系统配置变量值为<code>0</code>时可能无法回显的问题</li><li>修复可视化<code>CRUD</code>富文本字段默认值为<code>null</code>时表单打不开的问题</li><li>修复设置浏览器标题的函数可能失败的问题</li><li>修复初次打开前端时页面标题不完整的问题</li><li>修复双栏模式子级菜单跳转异常的问题 close #I7ZECR</li><li>其他细节</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 04:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281718</guid>
            <link>https://www.oschina.net/news/281718</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Dromara DaxPay 支付网关 v2.0.1 发布: 增加支付对账功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><span>背景</span></h2><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>在平时对接三方支付时，尤其需要对接多家支付的时候，是不是有以下痛点：</span></p><blockquote><ol><li><p style="margin-left:.5rem; margin-right:0"><span>各家支付系统的调用方式、返回参数、数据签名、回调格式等都不尽相同，对接时互相之间无法复用</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>各家支付系统提供的支付能力不尽相同，有时候业务系统为了对客户展现的功能一致，需要写大量的适配代码才能实现</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>支付订单、退款订单、回调记录、订单关闭、对账分账等必要功能都需要进行实现，需要考虑各种场景才能保证不出问题</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>有时候业务上需要支持一些扩展的支付类型，如要支持钱包支付、支持多种支付方式进行组合支付、支持聚合支付实现一码通扫等</span></p></li></ol></blockquote><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>如果你遇到这些问题，</span><span><strong><span>Dromara DaxPay</span></strong></span><span>（开源支付网关）或许能帮助到你：</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>它是</span><span><code>Dromara 开源社区</code></span><span>旗下新晋的一款开源支付网关系统，将各种支付通道（如支付宝、微信、云闪付等）的调用方式进行抽象统一，隐藏开发者不需要关注的细节，只需要一份代码就可以与多家支付通道对接。</span><span><code>DaxPay</code></span><span>独立部署，提供独立的管理界面，不侵入业务系统也不需要业务系统进行改造，只需要通过</span><span><code>http</code></span><span>进行调用就拥有相应的支付能力。除了对各类三方支付系统进行了对接，还对常用的支付方式进行了扩展，支持聚合支付、组合支付、钱包支付等功能。</span></p><h2>🧭 特色功能</h2><ol><li><p style="margin-left:.5rem; margin-right:0"><span>基于</span><span><code>Spring Boot</code></span><span>、</span><span><code>Vue3</code></span><span>主流技术栈，方便对系统进行扩展和改造</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>已对接</span><span><code>微信支付</code></span><span>和</span><span><code>支付宝</code></span><span>支付的接口，后续版本将支持</span><span><code>V3</code></span><span>版本支付接口，以及</span><span><code>云闪付</code></span><span>、</span><span><code>PayPal</code></span><span>等更多类型的支付通道</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>对接各类支付通道对外提供统一的接口，简化支付对接的复杂度，也方便后期快速替换或增加新的支付通道</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>提供</span><span><code>钱包支付</code></span><span>、</span><span><code>现金支付</code></span><span>、</span><span><code>储值卡支付</code></span><span>等扩展支付方式，同时支持组合支付，满足业务系统多样的支付场景</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>提供</span><span><code>Java</code></span><span>版本的</span><span><code>SDK</code></span><span>工具包，简化业务系统对接流程，同时也可以使用</span><span><code>HTTP</code></span><span>方式进行接口调用，保证了更低的耦合性和通用性</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>请求、响应、回调数据都支持启用签名机制，可根据实际需要进行开关，保证交易的安全可靠</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>提供管理平台，可以对各类订单、记录、配置进行便捷的操作，方便运营人员进行支付业务的管理</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>提供</span><span><code>聚合支付</code></span><span>、</span><span><code>电脑收银台</code></span><span>和</span><span><code>手机收银台</code></span><span>的演示模块，供开发者参考其实现支付功能的逻辑</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>系统源码为商业友好的</span><span><code>Apache-2.0</code></span><span>协议，文档为更加宽松的</span><span><code>MIT</code></span><span>协议，不需要担心后续代码和文档会突然进行收费</span></p></li></ol><h2>🥞&nbsp;本次更新内容</h2><ul><li>增加微信支付对账功能</li><li>增加支付宝支付对账功能</li><li>优化: 修复策略对订单时间和状态字段的变更优化</li><li>fix: 前端支付订单查询条件中"支付 ID"条件不生效</li></ul><h2>🍒 文档和源码地址</h2><h3>文档地址</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">在<span>&nbsp;</span><a href="https://bootx.gitee.io/">Bootx 开源文档站</a><span>&nbsp;</span>下的支付网关 (DaxPay) 模块下可以进行查阅相关文档，具体链接地址如下：<span>&nbsp;</span><a href="https://bootx.gitee.io/daxpay/guides/overview/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D.html">快速指南</a>、<span>&nbsp;</span><a href="https://bootx.gitee.io/daxpay/gateway/overview/%E6%8E%A5%E5%8F%A3%E6%B8%85%E5%8D%95.html">支付对接</a>、<span>&nbsp;</span><a href="https://bootx.gitee.io/daxpay/admin/config/%E5%B9%B3%E5%8F%B0%E9%85%8D%E7%BD%AE.html">操作手册</a></p><h2>🏬 <span>项目和演示地址</span></h2><h3><span>源码地址</span></h3><table cellspacing="0" style="border-collapse:collapse; border-spacing:0px; box-sizing:border-box; break-inside:auto; cursor:text; margin:0px; overflow:auto; padding:0px; text-align:left; white-space:pre-wrap; width:964px; word-break:initial"><tbody><tr><th><span><span>项目</span></span></th><th><span><span>GITEE</span></span></th><th><span><span>GITHUB</span></span></th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span>后端地址</span></span></td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span><a href="https://gitee.com/dromara/dax-pay">https://gitee.com/dromara/dax-pay</a></span></span></td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdromara%2Fdax-pay" target="_blank">https://github.com/dromara/dax-pay</a></span></span></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span>Web 前端地址</span></span></td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span><a href="https://gitee.com/bootx/dax-pay-ui">https://gitee.com/bootx/dax-pay-ui</a></span></span></td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxxm1995%2Fdax-pay-ui" target="_blank">https://github.com/xxm1995/dax-pay-ui</a></span></span></td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span>H5 前端地址</span></span></td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span><a href="https://gitee.com/bootx/dax-pay-h5">https://gitee.com/bootx/dax-pay-h5</a></span></span></td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px"><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fxxm1995%2Fdax-pay-h5" target="_blank">https://github.com/xxm1995/dax-pay-h5</a></span></span></td></tr></tbody></table><h3><span>管理平台:</span></h3><blockquote><p style="margin-left:0; margin-right:0"><span>注：演示账号部分功能修改删除权限未开放。</span></p></blockquote><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>地址：</span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaxpay.demo.bootx.cn" target="_blank">https://daxpay.demo.bootx.cn</a></span><span> 账号：daxpay 密码：123456</span></p><h3><span>网关接口</span></h3><blockquote><p style="margin-left:0; margin-right:0"><span>注：接口平台只开放支付网关相关的接口，不开放系统其他接口。</span></p></blockquote><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>地址: </span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaxpay.server.bootx.cn%2Fdoc.html" target="_blank">https://daxpay.server.bootx.cn/doc.html</a></span><span> 账号: daxpay 密码: 123456</span></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h3><span>收银台</span></h3><blockquote><p style="margin-left:0; margin-right:0"><span>请勿大额支付，可以通过后台管理平台进行退款</span></p></blockquote><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>电脑收银台地址: </span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaxpay.demo.bootx.cn%2F%23%2Fcashier" target="_blank">https://daxpay.demo.bootx.cn/#/cashier</a></span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>手机收银台地址: </span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdaxpay.demo.bootx.cn%2Fh5%2F%23%2Fcashier%2FuniCashier" target="_blank">https://daxpay.demo.bootx.cn/h5/#/cashier/uniCashier</a></span></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h2>🥞 核心技术栈</h2><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#40485b; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,Helvetica,Arial,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Liberation Sans&quot;,&quot;PingFang SC&quot;,&quot;Microsoft YaHei&quot;,&quot;Hiragino Sans GB&quot;,&quot;Wenquanyi Micro Hei&quot;,&quot;WenQuanYi Zen Hei&quot;,&quot;ST Heiti&quot;,SimHei,SimSun,&quot;WenQuanYi Zen Hei Sharp&quot;,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:635.286px; word-break:initial; word-spacing:0px"><tbody><tr><th>名称</th><th>描述</th><th>版本要求</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Jdk</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Java 环境</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">1.8+，11 版本可以正常使用，但 17+版本暂不支持</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Spring Boot</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">开发框架</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">2.7.x</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Redis</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">分布式缓存</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">5.x 版本及以上</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">MySQL</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">数据库</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">基于 5.7.X 版本开发，基本支持 8.x 版本</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">Vue</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">前端框架</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">3.x</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">IJpay</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">支付 SDK 开发包</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">项目自动管理，不需要额外处理</td></tr></tbody></table><h2>🍎 系统截图</h2><h3>H5 收银台演示</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://jsd.cdn.zzko.cn/gh/xxm1995/bootx-img@master/daxpay/3.3e0781my8tc0.webp" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h3>收银台演示</h3><p><img alt="" height="1825" src="https://oscimg.oschina.net/oscnet/up-d6ae2e823c5910947b6d01679bbbfb08317.jpg" width="2140" referrerpolicy="no-referrer"></p><h3>支付通道配置</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="" src="https://jsd.cdn.zzko.cn/gh/xxm1995/bootx-img@master/daxpay/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20240215020450.3abki92bc6w0.webp" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-fc3b1c709335b70c619272af5f572be1389.jpg" referrerpolicy="no-referrer"></p><h2>🍻 鸣谢</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">感谢 JetBrains 提供的免费开源 License：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.jetbrains.com%2F%3Ffrom%3Dbootx"><img alt="JetBrains" src="https://gitee.com/bootx/dax-pay/raw/gateway/_doc/images/jetbrains.png" referrerpolicy="no-referrer"></a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">感谢其他提供灵感和思路的开源项目</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/bootx/dax-pay/blob/gateway/_license/LICENSE.md">部分参考的开源项目和开源许可列表</a></p><h2>🍷License</h2><p style="color:#40485b; margin-left:0em; margin-right:0em; text-align:left">Apache License Version 2.0</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Mar 2024 03:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281715/daxpay-updated</guid>
            <link>https://www.oschina.net/news/281715/daxpay-updated</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
