<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-软件更新资讯]]>
        </title>
        <link>https://www.oschina.net/news/project</link>
        <atom:link href="http://rsshub.app/oschina/news/project" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-软件更新资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 08 Mar 2024 14:07:22 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[重磅发布｜AutoMQ 1.0.0 GA 版本官宣：已验证生产环境可用性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><strong>AutoMQ 是基于云构建的无服务、极速弹性、极具成本效益的下一代 Kafka。100% 兼容 Apache Kafka，无分区数据复制。在无副作用的前提下解决了 Kafka 弹性、运维上的诸多痛点并且带来了数量级的成本降低。</strong></div><div>
  &nbsp;
 </div><div>
  AutoMQ 1.0.0 GA 版本现已在 Github 仓库 (https://github.com/AutoMQ/automq-for-kafka) 正式发布，欢迎大家关注与下载使用。
 </div><div>
  &nbsp;
 </div><div>
  我们自信地认为 1.0.0 可以作为 GA 版本，用于生产环境主要是基于以下事实：
 </div><ul><li><div>
    通过我们自研 Long Running 自动化测试框架长时间稳定运行，对 GA 版本兼容性、稳定性、性能有全面的长时间可靠验证。
   </div></li><li><div>
    通过自研 Long Running Chaos 自动化测试长时间稳定运行，对各故障注入场景注入网络问题、磁盘 hang 等都可以正常及时恢复。
   </div></li><li><div>
    长时间稳定运行 E2E 测试，覆盖 Apache Kafka 所有测试用例 (Kraft 相关部分) 合计 387 个测试用例。
   </div></li><li><div>
    支持统一完整的指标透出，可用于全面监控 AutoMQ，满足投产标准。
   </div></li><li><div>
    内核大量优化与改进，保证 AutoMQ 在各种功能、性能上满足我们的 GA 标准。性能白皮书可以从官网 (https://www.automq.com) 下载。
   </div></li></ul><div>
  版本更新细节包括：
 </div><ul><li><div>
    在 AutoMQ 多个早期用户真实场景经过打磨与验证。
   </div></li><li><div>
    ci: Bump version to 1.0.0-rc8 by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmooc9988" target="_blank">@mooc9988</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F785" target="_blank">#785</a></u></div></li><li><div>
    build(s3stream): switch back to dev mode by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F786" target="_blank">#786</a></u></div></li><li><div>
    fix(e2e): wait for more time for broker hard bounce by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmooc9988" target="_blank">@mooc9988</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F787" target="_blank">#787</a></u></div></li><li><div>
    feat(issues791): change s3.stream.object.compaction.max.size.bytes default 1GB by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F792" target="_blank">#792</a></u></div></li><li><div>
    fix(auth): throw an exception when failed to create a credential from env by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F793" target="_blank">#793</a></u></div></li><li><div>
    fix(e2e): fix transaction timeout; merge streams tests by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmooc9988" target="_blank">@mooc9988</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F795" target="_blank">#795</a></u></div></li><li><div>
    feat(core): verify stream epoch for stream object commit by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F796" target="_blank">#796</a></u></div></li><li><div>
    fix(core): prevent generate stream object record for noop object id by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F797" target="_blank">#797</a></u></div></li><li><div>
    fix(issues798): checkpoint NPE by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F800" target="_blank">#800</a></u></div></li><li><div>
    fix(e2e): add consumer api timeout to 90s in hard bounce tests by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmooc9988" target="_blank">@mooc9988</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F803" target="_blank">#803</a></u></div></li><li><div>
    feat(issues801): stream trim only update stream metadata by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F805" target="_blank">#805</a></u></div></li><li><div>
    feat(core): add metrics to monitor auto balancer metrics delay by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F807" target="_blank">#807</a></u></div></li><li><div>
    fix(issues806): stream object leak by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F808" target="_blank">#808</a></u></div></li><li><div>
    fix: range end offset isn't revertable by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F809" target="_blank">#809</a></u></div></li><li><div>
    chore: rename s3ObjectRetention* to s3ObjectDeleteRetention for a more precise description by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdaniel-y" target="_blank">@daniel-y</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F810" target="_blank">#810</a></u></div></li><li><div>
    fix: set destroyed object size by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F811" target="_blank">#811</a></u></div></li><li><div>
    chore: suppress out of order error by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F812" target="_blank">#812</a></u></div></li><li><div>
    fix(metrics): present metrics from active controller only by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F815" target="_blank">#815</a></u></div></li><li><div>
    fix(core): prevent anomaly detect exit on inactive controller by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F816" target="_blank">#816</a></u></div></li><li><div>
    fix(issues817): txn index fetch out of bound by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F818" target="_blank">#818</a></u></div></li><li><div>
    feat(shell): add metadata summary to metadata shell by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F813" target="_blank">#813</a></u></div></li><li><div>
    fix(ReplicaManager): fix memory leak caused by uncaught exception by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F821" target="_blank">#821</a></u></div></li><li><div>
    fix(core): remove topic partition metrics on partition offline by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F820" target="_blank">#820</a></u></div></li><li><div>
    feat(core): add metrics to monitor s3 objects by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F823" target="_blank">#823</a></u></div></li><li><div>
    fix(core): record s3 object metrics on active controller only by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F824" target="_blank">#824</a></u></div></li><li><div>
    feat: add object ttl reach log by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F825" target="_blank">#825</a></u></div></li><li><div>
    fix(issues826): fix consume records leak in closing channel by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F827" target="_blank">#827</a></u></div></li><li><div>
    fix(pr-827): fix release 
    <code>PooledMemoryRecords</code> twice by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F828" target="_blank">#828</a></u></div></li><li><div>
    chore: support release tgz file in workflow by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKaimingWan" target="_blank">@KaimingWan</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F832" target="_blank">#832</a></u></div></li><li><div>
    fix(core): catch exceptions on replaying records by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F836" target="_blank">#836</a></u></div></li><li><div>
    feat(core): refine grafana dashboards by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F837" target="_blank">#837</a></u></div></li><li><div>
    fix(core): fix auto balancer metrics delay time calculation by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F838" target="_blank">#838</a></u></div></li><li><div>
    fix(ReplicaManager): release permits after sending responses by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F831" target="_blank">#831</a></u></div></li><li><div>
    fix: log permanet fail by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F839" target="_blank">#839</a></u></div></li><li><div>
    feat(core): redirect JUL log to sl4j and remove unused logging exporter by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F843" target="_blank">#843</a></u></div></li><li><div>
    perf(DelayedFetch): only try to fast read on complete a delayed fetch by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F844" target="_blank">#844</a></u></div></li><li><div>
    perf(ReplicaManager): return fast if slow fetch timeout by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F845" target="_blank">#845</a></u></div></li><li><div>
    fix(core): fix node id regex in broker dashboard by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F841" target="_blank">#841</a></u></div></li><li><div>
    feat: record pooled record memory usage by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F846" target="_blank">#846</a></u></div></li><li><div>
    ci: skip nightly schedule on forks by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftisonkun" target="_blank">@tisonkun</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F842" target="_blank">#842</a></u></div></li><li><div>
    fix(metrics): add label 'version' to kafka.request.count by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F847" target="_blank">#847</a></u></div></li><li><div>
    feat(telemetry): add host name to OTel resource by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F849" target="_blank">#849</a></u></div></li><li><div>
    feat(metrics): metrics on fetch limiters and executors by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F848" target="_blank">#848</a></u></div></li><li><div>
    feat(metrics): add buffer and thread metrics by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FShadowySpirits" target="_blank">@ShadowySpirits</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F851" target="_blank">#851</a></u></div></li><li><div>
    feat(telemetry): add direct memory panels by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F853" target="_blank">#853</a></u></div></li><li><div>
    fix(telemetry): fix read ahead throughput panel unit by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F854" target="_blank">#854</a></u></div></li><li><div>
    feat(metrics): rename DirectByteBufAlloc to ByteBufAlloc by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FShadowySpirits" target="_blank">@ShadowySpirits</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F855" target="_blank">#855</a></u></div></li><li><div>
    fix(telemetry): fix memory allocation metrics name by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F856" target="_blank">#856</a></u></div></li><li><div>
    feat(metrics): enable buffer pools metrics by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FShadowySpirits" target="_blank">@ShadowySpirits</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F857" target="_blank">#857</a></u></div></li><li><div>
    fix: remove special char from issue template file name by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F858" target="_blank">#858</a></u></div></li><li><div>
    fix(telemetry): fix jvm metrics by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F859" target="_blank">#859</a></u></div></li><li><div>
    fix(telemetry): refine grafana dashboard by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FSCNieh" target="_blank">@SCNieh</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F860" target="_blank">#860</a></u></div></li><li><div>
    feat: release automq 1.0.0 by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F861" target="_blank">#861</a></u></div></li><li><div>
    ci: Bump version to 1.0.0 by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuperhx" target="_blank">@superhx</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F862" target="_blank">#862</a></u></div></li><li><div>
    ci: fix regex on release by 
    <u><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FChillax-0v0" target="_blank">@Chillax-0v0</a></strong></u> in 
    <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ%2Fautomq-for-kafka%2Fpull%2F863" target="_blank">#863</a></u></div></li></ul><div><strong>END</strong></div><h3>关于我们</h3><div>
  AutoMQ 是来自 Apache RocketMQ 和 Linux LVS 项目的核心团队，曾经见证并应对过消息队列基础设施在大型互联网公司和云计算公司的挑战。现在我们基于对象存储优先、存算分离、多云原生等技术理念，重新设计并实现了 Apache Kafka 和 Apache RocketMQ，带来高达 10 倍的成本优势和百倍的弹性效率提升。
 </div><div>
  🌟 GitHub 地址：
  <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAutoMQ">https://github.com/AutoMQ</a></span></div><div>
  💻 官网：
  <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.automq.com">https://www.automq.com</a></span></div><div>
  👀 B 站：
  <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F3546572478482870">AutoMQ 官方账号</a></span></div><div>
  🔍 视频号：AutoMQ
 </div></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 10:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282187/automq-1-0-0-ga</guid>
            <link>https://www.oschina.net/news/282187/automq-1-0-0-ga</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ShopWind v4.7 更新，多语言外贸商城系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#353535">ShopWind 多商户商城系统</span><span style="background-color:#ffffff; color:#353535"><span>&nbsp;</span>v4.7 发布更新，PHP+MySQL，服务端 Yii2 框架，移动端 uniapp。使用 vue3/vite、Element Plus UI、 axios 数据请求、页面异步加载。 本次更新新增虚拟</span>商品，服务类型商品，虚拟商品，支持线下到店二维码核销，无需发货，修复优化了 webIM 客服系统等多项。</p><h4>演示体验</h4><ul><li><p style="margin-left:0; margin-right:0">后台体验：<a href="https://gitee.com/link?target=https%3A%2F%2Fv4.shopwind.net%2Fadmin" target="_blank">&nbsp;</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv4.shopwind%E2%80%8D.net%2Fadmin" target="_blank">https://v4.shopwind‍.net/admin</a>&nbsp;平台管理员账号：admin 密码：111111</p></li><li><p style="margin-left:0; margin-right:0">前台体验：<a href="https://gitee.com/link?target=https%3A%2F%2Fv4.shopwind.net" target="_blank">&nbsp;</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv4.shopwi%E2%80%8Dn%E2%80%8Dd.net" target="_blank">https://v4.shopwi‍n‍d.net</a>&nbsp;自行微信登录、QQ、支付宝登录</p></li><li><p style="margin-left:0; margin-right:0">商家体验：<a href="https://gitee.com/link?target=https%3A%2F%2Fv4.shopwind.net%2Fseller%2Flogin%2Findex" target="_blank">&nbsp;</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv4.shopwind.n%E2%80%8Det%2Fseller%2Flogin" target="_blank">https://v4.shopwind.n‍et/seller/login</a>&nbsp;商家测试账号：18978189171 密码：111111</p></li></ul><h4><strong>扫码体验其他端</strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:justify"><img alt="" height="325" src="https://oscimg.oschina.net/oscnet/up-654636914825b60991e96bf693f37fdf421.png" width="900" referrerpolicy="no-referrer"></p><h4><strong><span style="background-color:#ffffff; color:#353535">移动端预览：</span></strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#353535"><img alt="" height="721" src="https://oscimg.oschina.net/oscnet/up-ad4c897cac6d22df44d65b50003da818761.jpg" width="1000" referrerpolicy="no-referrer"></span></p><h4>平台后台预览</h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="615" src="https://oscimg.oschina.net/oscnet/up-38308bb8c073ef01a0b40623283c9312119.png" width="1000" referrerpolicy="no-referrer"></p><h4><strong>PC 端预览</strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:justify"><img alt="" height="1507" src="https://oscimg.oschina.net/oscnet/up-c8a4483db8b755c7e99d53d6601285fbf93.png" width="1000" referrerpolicy="no-referrer"></p><h4><strong>商家管理预览</strong></h4><p style="color:#353535; margin-left:0; margin-right:0; text-align:left"><img alt="" height="559" src="https://oscimg.oschina.net/oscnet/up-b31dffba2932f4a1e1a4e0ee8786143fd0d.png" width="1000" referrerpolicy="no-referrer"></p><h4><strong>自定义页面装修预览</strong></h4><p style="color:#353535; margin-left:0; margin-right:0; text-align:left"><img alt="" height="463" src="https://oscimg.oschina.net/oscnet/up-31a72c1f4619e18eae6b48ad5fad33cd9e6.png" width="1000" referrerpolicy="no-referrer"></p><p style="color:#353535; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><h4>更新内容如下：</h4><ul><li>新增电脑端用户中心首页修改暱称入口</li><li>新增用户表字段【用户注册来源：regtype】，取值有：MP = 小程序用户，WAP=H5 用户，APP=APP 端用户</li><li>新增提现手续费设置</li><li>新增电脑端商家中心导出订单 EXCEl 文件</li><li>优化资产提现表【deposit_withdraw】增加字段【 手续费：fee】</li><li>优化资产交易表【deposit_trade】取消字段【交易分类：tradeCat】业务逻辑</li><li>优化资产交易表【deposit_trade】增加字段【支付用户标识：openid】，为后续业务逻辑处理需要该参数</li><li>优化移动端卖家中心添加 / 编辑商品详情字段逻辑</li><li>优化门店自提订单提货人数据初始化</li><li>修复商品详情页不显示商品详情问题</li><li>修复地区数据保存后显示错误问题</li><li>修复订单页使用优惠券数据有误问题</li><li>修复我的订单列表，订单状态【取消订单】按钮显示场景有误的问题</li><li>修复电脑端添加后编辑我的收货地址数据显示有误的问题</li><li>修复电脑端店铺 - 店铺分类 - 编辑分类时，父级分类显示错误的问题</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 08:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282154</guid>
            <link>https://www.oschina.net/news/282154</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Visual Studio 2022 v17.9：面向 C++ 开发人员的全面更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#333333">Visual Studio 2022 版本 17.9 为 C++ 开发人员引入了许多新功能和改进。</span></p><p><span style="color:#333333"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fvisualstudio%2Fvisual-studio-2022-version-17-9-a-comprehensive-update-for-c-developers%2F" target="_blank">公告</a>指出，用户现在可以使用&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fvisualstudio%2Fsize-alignment-and-memory-layout-insights-for-c-classes-structs-and-unions%2F" target="_blank"><strong>Memory Layout</strong></a>&nbsp;<span style="color:#333333">功能直接在编辑器中可视化类、结构和联合的内存布局。此外，</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcppblog%2Finclude-diagnostics-in-visual-studio%2F" target="_blank"><strong>#include Diagnostics&nbsp;</strong></a><span style="color:#333333">功能还可以深入了解包含文件中的元素使用频率，以及每个 #include 指令对当前正在编辑的文件的构建时间的影响。这些信息会方便地显示在编辑器中，便于参考。</span></p><p><span style="color:#333333">对于 Unreal Engine 开发人员，IntelliSense 的一致性和准确性得到了提高，UE Blueprint 引用也得到了简化。对于 C++ 跨平台开发人员，现在可以直接从 Visual Studio 在远程 Linux 机器上运行单元测试，并为自己的项目指定自定义 CMake 可执行文件。</span></p><p><span style="color:#333333">且新版 Visual Studio 2022 17.9 为包括 C++ 用户在内的所有 Visual Studio 用户带来了多项增强功能。譬如：</span></p><ul><li><span style="color:#333333">现在可以利用 AI 生成的 Git commit 信息，它有助于创建清晰、相关的提交描述。</span></li></ul><p><span style="color:#333333"><img alt="" height="322" src="https://oscimg.oschina.net/oscnet/up-20df20c246618c8c70f75818e54617dd782.png" width="300" referrerpolicy="no-referrer">​​​​​​​</span></p><ul><li><span style="color:#333333">还引入了一个 secondary link，让你不仅能在 Visual Studio 中打开拉取请求，还能在网页浏览器中打开拉取请求。</span></li><li><span style="color:#333333">Git 仓库窗口现在采用了响应式 Git Ref 标签，可根据可用空间调整内容，从而简化了仓库导航。</span></li><li><span style="color:#333333">新的"Multi Project Configuration"功能可以为多项目解决方案中的特定项目设置配置文件。</span></li></ul><p><span style="color:#333333">有关 Visual Studio 版本 17.9 中最新 C++ 功能的详细概述，可参阅</span><strong style="color:#333333"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevblogs.microsoft.com%2Fcppblog%2Fwhats-new-for-cpp-developers-in-visual-studio-2022-17-9%2F" target="_blank">公告博客文章</a></strong><span style="color:#333333">。</span>&nbsp;</p><p>下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvisualstudio.microsoft.com%2Fzh-hans%2Fdownloads%2F" target="_blank">https://visualstudio.microsoft.com/zh-hans/downloads/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 03:02:02 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282097/visual-studio-2022-version-17-9-update-for-c-developers</guid>
            <link>https://www.oschina.net/news/282097/visual-studio-2022-version-17-9-update-for-c-developers</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Socket.D v2.4.6 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3>Socket.D 协议</h3><p style="color:#24292e; text-align:start">是基于"事件"和"语义消息""流"的网络应用层传输协议。有用户说，「Socket.D 之于 Socket，尤如 Vue 之于 Js、Mvc 之于 Http」。<span style="background-color:#f1c40f">支持 tcp, udp, ws, kcp 传输</span>。协议特点可参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsocketd.noear.org%2Farticle%2F748" target="_blank">《官网介绍》</a>。</p><p style="color:#24292e; text-align:start">pyton 已开发完成，再在测试中；go, rust, c++ 正在开发中。</p><h3>for Java 更新</h3><ul><li>添加 ClientConnectHandler 接口，提供连接时的拦截处理</li><li>添加，连接时 Handshake 元信息交互机制</li><li>添加 BrokerListener 异常转发支持</li><li>添加 Entity:delMeta 删除元信息接口</li><li>添加 BrokerListenerBase:getPlayerAny(name) 接口</li><li>优化，流异常传导性</li><li>优化 EntityDefault:metaPut 当 val=null 时，视为删除</li><li>优化 ClientChannel:heartbeatHandle 添加 isClosing 的判断</li><li>优化 ClientChannel:heartbeatHandle 处理，增加内部会话关闭时，同步到外层</li><li>优化 ChannelDefault 内部的通道关闭改为延时 100ms 关，避免 sendClose 时通道坏掉</li><li>调整 BrokerListener 的能力方法，都改为公有</li><li>调整，心跳日志级别改为 debug</li><li>smart-socket 升为 1.5.42</li></ul><h3>for JavaScript 更新</h3><ul><li>新增 BrokerListener 实现（node.js 可以开发 broker 服务了）</li><li>添加 Entity:delMeta 删除元信息接口</li><li>添加，连接时 Handshake 元信息交互机制</li><li>添加 ClientConnectHandler 接口，提供连接时的拦截处理</li><li>优化 EntityDefault:metaPut 当 val=null 时，视为删除</li><li>优化 ClientChannel:heartbeatHandle 添加 isClosing 的判断</li><li>优化 ClientChannel:heartbeatHandle 处理，增加内部会话关闭时，同步到外层</li><li>优化 ChannelDefault 内部的通道关闭改为延时 100ms 关，避免 sendClose 时通道坏掉</li><li>优化 isClosedAndEnd 的判断条件，去掉 CLOSE1000_PROTOCOL_CLOSE_STARTING</li></ul><h3>视频演示效果：</h3><ul><li>for H5 
  <ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1ck4y197BV%2F" target="_blank">https://www.bilibili.com/video/BV1ck4y197BV/</a></li><li><a href="https://gitee.com/noear/socket.d/tree/main/javascript/socketd-examples/demo01-js-ws">演示源码</a></li></ul></li><li>for UniAPP 
  <ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1T94y1T7sp%2F" target="_blank">https://www.bilibili.com/video/BV1T94y1T7sp/</a></li><li><a href="https://gitee.com/noear/socket.d/tree/main/javascript/socketd-examples/demo03-uniapp-ws">演示源码</a></li></ul></li></ul><h3>代码仓库：</h3><ul><li><a href="https://gitee.com/noear/socketd">https://gitee.com/noear/socketd</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Fsocketd" target="_blank">https://github.com/noear/socketd</a></li></ul><h3>官网：</h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsocketd.noear.org%2F" target="_blank">https://socketd.noear.org</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 02:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282093/socketd-2-4-6-released</guid>
            <link>https://www.oschina.net/news/282093/socketd-2-4-6-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源 OA 办公系统 — 勾股 OA 4.97.38 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0em; margin-right:0em; text-align:start">勾股 OA 办公系统是一款简单实用的开源的企业办公系统。系统集成了系统设置、附件管理、人事管理、行政管理、消息管理、企业公告、知识库、审批流程设置、办公审批、日常办公、财务管理、客户管理、合同管理、项目管理、任务管理等功能模块。系统简约，易于功能扩展，方便二次开发，可以用来做日常 OA，CRM，ERP，业务管理等系统。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:start">勾股 OAv4.97.38 发布啦，本次主要更新了如下功能：</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:start">🔴更新日志：</p><p style="color:#40485b; margin-left:0em; margin-right:0em; text-align:start">1、优化：项目任务完成度，当没任务的时候调整为 0%；<br> 2、修复：修复不能越权删除他人的知识文章；<br> 3、修复：项目删除最后一条评论信息后不刷新问题修复；<br> 4、优化：新增员工姓名至少是两个汉字判断；<br> 5、优化：数据库 text 类型字段统一修改为比较长的 mediumtext 类型；<br> 6、修复：修复客户详情跟进记录、联，系 人、销售机会新增和编辑时，列表不更新问题；<br> 7、优化：table2excel 导出 excel 插件，新增表格行高，新增表格背景色，新增表格居左中右排版；<br> 8、升级：layui 更新到 2.9.7 版本；<br> 9、修复：菜单展开模式下，右侧页面打开滚动展现不完整问题修复；<br> 10、优化：优化客户列表的搜索条件，修复：下属客户中出现自己的客户信息的 bug；<br> 11、完善部分已知的问题或者细节调整。</p><h3>内置模块</h3><ul><li>配置管理：对系统的常规配置信息进行维护，网站配置管理功能统一维护。</li><li>用户管理：维护管理系统的用户，常规信息的维护与账号设置。</li><li>菜单管理：配置系统菜单，操作权限，按钮权限标识等。</li><li>权限角色：角色菜单管理与权限分配、设置角色所拥有的菜单权限。</li><li>部门管理：管理系统组织架构，对组织架构进行统一管理维护。</li><li>岗位管理：管理用户担任的岗位。</li><li>操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。</li><li>基础数据：对系统中常用的较为固定的数据进行统一维护管理。</li><li>消息通知：系统通知私信、消息等管理。</li><li>企业公告：企业公告信息发布维护。</li><li><span style="background-color:#ffffff; color:#40485b">办公审批：</span>支持人事、财务、行政、业务等多审批流程。</li><li><span style="background-color:#ffffff; color:#40485b">日常办公：</span>日程、计划、周报、日报等信息化办公工具。</li><li><span style="background-color:#ffffff; color:#40485b">财务管理：</span>财务报销、开票、到账，财务数据规范化管理。</li><li><span style="background-color:#ffffff; color:#40485b">客户管理：</span>统一管理客户，沉淀客户资产，避免客户流失。</li><li><span style="background-color:#ffffff; color:#40485b">合同管理：</span>合同维护、审批、执行、变更、关闭全流程管理。</li><li><span style="background-color:#ffffff; color:#40485b">项目管理：</span>项目操作记录全覆盖跟踪，项目进度一目了然，任务分派，工时记录。</li><li><span style="background-color:#ffffff; color:#40485b">知，识 库：公司制度，工作经验、行业知识归类管理。</span></li></ul><h3>软件信息</h3><ul><li>软件名称：勾股 OA</li><li>开源地址：<a href="https://gitee.com/gouguopen/office">https://gitee.com/gouguopen/office</a></li><li>官网网址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gougucms.com%2Fhome%2Fpages%2Fdetail%2Fs%2Fgouguoa.html" target="_blank">https://www.gougucms.com/home/pages/detail/s/gouguoa.html</a></li><li>文档网址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.gougucms.com%2Fhome%2Fbook%2Fdetail%2Fbid%2F3.html" target="_blank">https://blog.gougucms.com/home/book/detail/bid/3.html</a></li></ul><h3>系统预览</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img alt="" height="688" src="https://oscimg.oschina.net/oscnet/up-114ac577175174bd2d0e57babceb6711d72.jpg" width="700" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 02:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282092/gougu-oa-4-97-38-released</guid>
            <link>https://www.oschina.net/news/282092/gougu-oa-4-97-38-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[IntelliJ IDEA 2024.1 Beta 发布，解绑 AI 助手]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>IntelliJ IDEA 2024.1 Beta 版本现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2024%2F03%2Fintellij-idea-2024-1-beta%2F" target="_blank">发布</a>。最新版本集成了 IntelliJ IDEA 2024.1 早期访问计划期间引入的所有重要更新，以下是旨在增强开发工作流程各个方面的新功能的简短回顾：</p><ul><li>支持 Java 22 功能</li><li>全行代码自动补全</li><li>改进的终端工具窗口</li><li>条件语句覆盖范围</li><li>编辑器中的 Sticky lines</li><li>项目索引期间 IDE 功能的早期可用性</li><li>编辑器内代码审查</li><li>丰富的 GitHub Actions 支持</li><li>改进了日志的工作流程</li><li>多个语句的内联断点</li><li>Maven 项目的打开速度提升</li><li>支持 OpenRewrite</li><li>WireMock 服务器支持，等等</li></ul><p>与此同时，项目团队正在进一步完善 v2024.1 中所包含的功能：</p><h4><span>Java</span></h4><p><strong>改进的「Detected Conflicts」对话框</strong></p><p>在 v2024.1 中改进了「Detected Conflicts」对话框，以改善用户体验和可读性。现在，代码上下文反映了编辑器，使用户可以更清楚地了解 conflicts。优化了文本显示，IDE 现在会自动保存窗口大小调整以供将来使用。还更新了按钮及其行为以简化重构工作流程。现在可以通过键盘完全访问该对话框，这意味着用户可以使用快捷键和箭头键进行无缝交互。</p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-fb3e830774429c43d2c93a5c1fd5b61456b.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span>重命名&nbsp;refactoring inlay hint</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span>为了让重命名过程更简单、更直观，项目团队在已更改的代码元素上添加了一个新的 inlay hint。要更新代码库中对新版本的所有引用，只需点击提示并确认更改即可。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><span><span><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><img alt="" height="200" src="https://oscimg.oschina.net/oscnet/up-4028277552a55f988d2beadf612b4715a3a.gif" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 style="margin-left:0px; margin-right:0px; text-align:start">&nbsp;</h4><div style="text-align:start"><h4 style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span>Kotlin</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></h4><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span>在所有项目上传播官方 Kotlin 代码风格</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>从 2024.1 版本开始，除非另有明确指定，IDE 统一应用官方 Kotlin 样式指南作为所有项目的默认选项。如果你的现有项目使用较旧的代码风格而没有显式配置，IDE 将自动切换到 Kotlin 编码约定代码风格，并提供通知以提醒用户此更改。为了防止任何不需要的格式更改，官方建议用户熟悉此<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkotlinlang.org%2Fdocs%2Fcode-style-migration-guide.html%23migration-to-a-new-code-style-discussion" target="_blank">代码样式迁移指南</a>。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="200" src="https://oscimg.oschina.net/oscnet/up-9aeaee456e34a161f4cfce3aebd0fe591eb.png" width="500" referrerpolicy="no-referrer"></p><div style="text-align:start"><p style="margin-left:0px; margin-right:0px"><strong><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><span><span><span><span><span><span style="color:#19191c"><span><span><span><span>复制粘贴时保留的&nbsp;Static imports</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></strong></p></div><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>在版本 2024.1 中对复制和粘贴功能进行了一项期待已久的改进，在处理嵌套对象、枚举和 Java static imports 时特别有价值。IDE 现在可以准确保留 static imports，确保它们的传输方式与源代码中显示的方式完全相同。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span style="color:#19191c"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="200" src="https://oscimg.oschina.net/oscnet/up-857afb8e728fb28d75776d69f08cb63fb1b.gif" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4 style="margin-left:0px; margin-right:0px; text-align:start"><strong>AI 助手</strong></h4><p style="margin-left:0; margin-right:0; text-align:start">从 IntelliJ IDEA 2024.1 Beta 版本开始，AI Assistant 已解绑，现在作为单独的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplugins.jetbrains.com%2Fplugin%2F22282-ai-assistant" target="_blank">插件</a>提供。公告称，「这一变化的原因是，我们需要为您的各种偏好和要求提供更大的灵活性和控制力，使您能够选择是否以及何时在工作环境中使用人工智能驱动的技术。」</p><p style="margin-left:0; margin-right:0; text-align:start"><strong>延伸阅读：</strong><a href="https://www.oschina.net/news/277463/jetbrains-unremovable-ai-assistant" target="news">JetBrains 捆绑 AI 助手引起用户不满</a></p><p style="margin-left:0; margin-right:0; text-align:start">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.jetbrains.com%2Fidea%2F2024%2F03%2Fintellij-idea-2024-1-beta%2F" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 02:43:02 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282088/intellij-idea-2024-1-beta</guid>
            <link>https://www.oschina.net/news/282088/intellij-idea-2024-1-beta</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[go-carbon v2.3.10 发布，轻量级、语义化、对开发者友好的 golang 时间处理库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">carbon 是一个轻量级、语义化、对开发者友好的 Golang 时间处理库，支持链式调用、农历和 gorm、xorm 等主流 orm。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">目前已被<span><span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyinggaozhen%2Fawesome-go-cn%23%25E6%2597%25A5%25E6%259C%259F%25E5%2592%258C%25E6%2597%25B6%25E9%2597%25B4" target="_blank">awesome-go-cn</a><span><span>&nbsp;</span></span>收录，如果您觉得不错，请给个 star 吧</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgolang-module%2Fcarbon" target="_blank">github.com/golang-module/carbon</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/golang-module/carbon" target="_blank">gitee.com/golang-module/carbon</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>更新日志</strong></p><ol><li><span style="background-color:rgba(175, 184, 193, 0.2); color:#1f2328">json.Unmarshaler&nbsp;&nbsp;</span>增加对包含 <span style="background-color:rgba(175, 184, 193, 0.2); color:#1f2328">null</span> 值的 <span style="background-color:rgba(175, 184, 193, 0.2); color:#1f2328">json</span> 字符串的解码支持</li><li>新增<span>&nbsp;</span><code>ISO8601ZuluLayout</code>,<code>ISO8601ZuluMilliLayout</code>,<code>ISO8601ZuluMicroLayout</code>,<code>ISO8601ZuluNanoLayout</code><span>&nbsp;常量</span></li><li>新增&nbsp;<code>FormattedDateLayout</code>,<code>FormattedDayDateLayout</code><span>&nbsp;</span>常量</li><li>新增&nbsp;<code>ISO8601ZuluFormat</code>,<code>ISO8601ZuluMilliFormat</code>,<code>ISO8601ZuluMicroFormat</code>,<code>ISO8601ZuluNanoFormat</code><span>&nbsp;</span>常量</li><li>新增<span>&nbsp;</span><code>FormattedDateFormat</code>,<code>FormattedDayDateFormat</code><span>&nbsp;</span>常量</li><li>新增<span>&nbsp;</span><code>ToIso8601ZuluString</code>,<code>ToIso8601ZuluMilliString</code>,<code>ToIso8601ZuluMicroString</code>,<code>ToIso8601ZuluNanoString</code><span>&nbsp;</span>方法</li><li>新增<span>&nbsp;</span><code>ToFormattedDateString</code>,<code>ToFormattedDayDateString</code><span>&nbsp;</span>方法</li><li>新增<span>&nbsp;</span><code>GoString</code><span>&nbsp;</span>方法</li><li>移除<code>ToFormatString</code><span>&nbsp;</span>方法, 用<span>&nbsp;</span><code>Format</code><span>&nbsp;</span>方法替代</li><li><p>移除<code>ToLayoutString</code><span>&nbsp;</span>方法, 用<span>&nbsp;</span><code>Layout</code><span>&nbsp;</span>方法替代</p></li></ol></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 02:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282089/go-carbon-2-3-10-released</guid>
            <link>https://www.oschina.net/news/282089/go-carbon-2-3-10-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🔥 突破 700 万/秒，这个 MQTT 有点快]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><span style="background-color:#e7642b; color:white">1、smart-mqtt 简介</span></h2><p style="color:black; margin-left:0; margin-right:0; text-align:left"><strong>smart-mqtt，是 smartboot 组织下面向物联网的首款解决方案，它使用 Java 语言开发，提供高效、可靠的 MQTT Broker 服务。</strong></p><p style="color:black; margin-left:0; margin-right:0; text-align:left">smart-mqtt 的独特优势在于大量设备接入的情况下，仍能保持低延迟和高吞吐量，满足物联网领域严苛的实时性需求。同时，smart-mqtt 为了最大限度地节省硬件成本，采用了高度优化的资源管理策略，降低了系统运行时的 CPU 和内存占用，使企业在保持高性能的同时，大幅降低运维成本。</p><p style="color:black; margin-left:0; margin-right:0; text-align:left"><strong>另外，mqtt 协议天然适合 IM 场景，需要打造企业级 IM 应用，smart-mqtt 同样是一个非常好的选择。</strong></p><p style="color:black; margin-left:0; margin-right:0; text-align:left"><img src="https://smartboot.tech/assets/img/framework.87b57b29.svg" referrerpolicy="no-referrer"></p><blockquote><p style="color:#424b5d; margin-left:0; margin-right:0">smartboot 开源组织，一个容易被误认为是在 「重复造轮子」 的低调组织。曾获得<span>&nbsp;</span><strong>2020 年度 OSC 中国开源项目「优秀 Gitee 组织 」</strong>荣誉。</p><p style="color:#424b5d; margin-left:0; margin-right:0">该组织内的明星项目包括：</p><ul><li><p style="margin-left:0; margin-right:0">smart-socket<br> 历时 5 年精炼出 2 千多行代码，轻松实现百万级长连接的 AIO 通信框架。</p></li><li><p style="margin-left:0; margin-right:0">smart-http<br> 基于 smart-socket 实现的 HTTP/1.1 web 服务。</p></li><li><p style="margin-left:0; margin-right:0">smart-servlet<br> 基于 smart-http 实现的 Servlet 4.0 容器服务。</p></li><li><p style="margin-left:0; margin-right:0">smart-mqtt<br> 基于 smart-socket 实现的 MQTT 3.1.1/5.0 Broker&amp;Client 服务。</p></li><li><p style="margin-left:0; margin-right:0">smart-flow<br> 一款具备可观测性的轻量级业务编排框架。</p></li></ul><p style="color:#424b5d; margin-left:0; margin-right:0">组织地址：<span>?</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsmartboot.tech%2F" target="_blank">https://smartboot.tech/</a><br> 代码仓库：<span>?</span><a href="https://gitee.com/smartboot">https://gitee.com/smartboot</a></p></blockquote><h3>快速启动</h3><pre><code class="language-bash"><span style="color:#6f42c1"><span style="color:#6f42c1"><span style="color:#6f42c1">docker</span></span></span><span style="color:#032f62"><span style="color:#032f62"><span style="color:#032f62">run --name smart-mqtt \
  -p 18083:18083 \
  -p 1883:1883  \
  -d smartboot/smart-mqtt:latest</span></span></span></code></pre><ul><li><p style="margin-left:0; margin-right:0">18083：Web 管理后台服务端口</p></li><li><p style="margin-left:0; margin-right:0">1883：mqtt 端口</p><p style="margin-left:0; margin-right:0"><img height="619" src="https://oscimg.oschina.net/oscnet/up-848a14fa3a1b6e76dfc3831d3d4316bc4bb.png" width="1080" referrerpolicy="no-referrer"></p></li></ul><h2><span style="background-color:#e7642b; color:white">2、 版本更新</span></h2><p style="color:black; margin-left:0; margin-right:0; text-align:left"><strong>在功能方面</strong>，smart-mqtt 的最新版本引入了<strong>共享订阅</strong>的新特性。该特性的主要优势在于它提供了订阅端的负载均衡功能，以一种更灵活、可扩展的消息分发机制，改善大规模消息系统中的性能问题。</p><p style="color:black; margin-left:0; margin-right:0; text-align:left">在传统的 MQTT 订阅模式中，每个订阅了特定主题的客户端都会收到该主题下所有发布的消息，这可能导致消费能力较弱的客户端无法及时处理大量消息，从而成为系统的性能瓶颈。<strong>共享订阅通过允许一个主题的消息被多个订阅者共同消费，可以有效地分散这种压力，提高系统的整体效率和可靠性。</strong></p><p style="color:black; margin-left:0; margin-right:0; text-align:left">虽然共享订阅是 MQTT 5.0 规范的一部分，但 smart-mqtt 将此特性适配至低版本的 MQTT 协议，所以 MQTT 3.1/3.1.1 的客户端也能从中受益。</p><hr><p style="color:black; margin-left:0; margin-right:0; text-align:left"><strong>而在性能方面</strong>，smart-mqtt 再一次突破算力极限，TPS 峰值达到<span>&nbsp;</span><strong>738W/s</strong>。这样的表现，背后所依托的是与 smart-http 中相同原理的黑科技算法：字节树。</p><p><img height="476" src="https://oscimg.oschina.net/oscnet/up-4ff105977cb7ce3e4f68fbcc8368c974982.png" width="1080" referrerpolicy="no-referrer"></p><hr><p style="color:black; margin-left:0; margin-right:0; text-align:left"><strong>至于稳定性</strong>，有一组数据足以体现。smart-mqtt 于 2024-02-01 启动了一个 15000 个客户端的压测任务。然后，这个压测任务就被遗忘了，服务器足足被持续压了一个多月。最终连接状态、吞吐量、CPU、内存皆表现稳定。</p><p><img height="433" src="https://oscimg.oschina.net/oscnet/up-c82cea71362211b545f48b9b46cc80e2ef5.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:black; margin-left:0; margin-right:0; text-align:left"><strong>本次更新内容</strong>：</p><ol><li><p>降低控制枱指标监控打印频次。</p></li><li><p>新增共享订阅特性。</p></li><li><p>调整 Topic 编解码算法。</p></li></ol><h2><span style="background-color:#e7642b; color:white">3、性能测试报告</span></h2><ul><li><p style="margin-left:0; margin-right:0">场景一：<br> 10 个 publisher 每隔 1 毫秒发送 payload 为 128 字节的消息，这些消息分布在 128 种 topic 下，有 2000 个 subscriber 订阅这些 topic 的消息。</p></li></ul><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box !important; color:#000000; display:table; font-family:Optima-Regular,Optima,PingFangSC-light,PingFangTC-light,&quot;PingFang SC&quot;,Cambria,Cochin,Georgia,Times,&quot;Times New Roman&quot;,serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; overflow:auto; padding:0px; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:657px; word-break:keep-all; word-spacing:0px"><tbody><tr><th style="text-align:left">&nbsp;</th><th style="text-align:left"><strong>v0.34</strong></th><th style="text-align:left"><strong>v0.35</strong></th><th style="text-align:left">v0.36</th></tr></tbody><tbody><tr><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">QoS0</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">600W/s</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">670W/s</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left"><span style="background-color:#ffffff; color:#000000">738W/s</span></td></tr><tr><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">QoS1</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">280W/s</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">320W/s</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left"><span style="background-color:#f8f8f8; color:#000000">310W/s</span></td></tr><tr><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">QoS2</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">150w/s</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">180W/s</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left"><span style="background-color:#ffffff; color:#000000">185W/s</span></td></tr></tbody></table><ul><li><p style="margin-left:0; margin-right:0">场景二：</p></li></ul><p style="color:black; margin-left:0; margin-right:0; text-align:left">2000 个 publisher 每隔 1 毫秒发送 10 个 payload 为 128 字节的消息，这些消息分布在 128 种 topic 下。</p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box !important; color:#000000; display:table; font-family:Optima-Regular,Optima,PingFangSC-light,PingFangTC-light,&quot;PingFang SC&quot;,Cambria,Cochin,Georgia,Times,&quot;Times New Roman&quot;,serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; overflow:auto; padding:0px; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:657px; word-break:keep-all; word-spacing:0px"><tbody><tr><th style="text-align:left">&nbsp;</th><th style="text-align:left">smart-mqtt 企业版</th></tr></tbody><tbody><tr><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">QoS0</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">97W/s</td></tr><tr><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">QoS1</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">63W/s</td></tr><tr><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">QoS2</td><td style="border-color:#cccccc; border-style:solid; border-width:1px; text-align:left">53W/s</td></tr></tbody></table><h2><span style="background-color:#e7642b; color:white">4、如何获取 smart-mqtt</span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>源码</strong></p><ul><li><p style="margin-left:0; margin-right:0">主仓库：<a href="https://gitee.com/smartboot/smart-mqtt">https://gitee.com/smartboot/smart-mqtt</a></p></li><li><p style="margin-left:0; margin-right:0">镜像同步：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsmartboot%2Fsmart-mqtt" target="_blank">https://github.com/smartboot/smart-mqtt</a></p></li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>产品手册</strong>：<a href="https://smartboot.gitee.io/smart-mqtt/enterprise.html">https://smartboot.gitee.io/smart-mqtt/enterprise.html</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 01:49:03 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282075</guid>
            <link>https://www.oschina.net/news/282075</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【店滴云】1.4.8 发布，优化微信生态能力接入，扩展微信第三方平台]]>
            </title>
            <description>
                <![CDATA[<div class="content"><ul><li>公众号与小程序初始化兼容 admin 接口</li><li>增加对微信第三方平台的全局扩展 <p><img height="919" src="https://oscimg.oschina.net/oscnet/up-dbbbc2697244f09f476a3dfc5d60c7fb91c.png" width="1920" referrerpolicy="no-referrer"></p></li></ul><p><img height="919" src="https://oscimg.oschina.net/oscnet/up-1a949a464e48a651986b2f8bfcb950d9a32.png" width="1920" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><img height="919" src="https://oscimg.oschina.net/oscnet/up-9c8fd9da392903f828fecfe54e5e426527d.png" width="1920" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 00:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282070</guid>
            <link>https://www.oschina.net/news/282070</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[DDIOT 1.4.8 已经发布，围绕经营性场所进行物联网改造]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>DDIOT 1.4.8 已经发布，围绕经营性场所进行物联网改造</p><p>此版本更新内容包括：</p><h2>更新内容</h2><ul><li>公众号与小程序初始化兼容 admin 接口</li></ul><p><strong>完整的更新日志</strong>: <a href="https://gitee.com/wayfirer/ddiot/compare/1.4.7...1.4.8" target="_blank">https://gitee.com/wayfirer/ddiot/compare/1.4.7...1.4.8</a></p><p>详情查看：<a href="https://gitee.com/wayfirer/ddiot/releases/1.4.8">https://gitee.com/wayfirer/ddiot/releases/1.4.8</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Mar 2024 00:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282069/ddiot-1-4-8-released</guid>
            <link>https://www.oschina.net/news/282069/ddiot-1-4-8-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[凹语言 v0.9.2 发布, 完善 p5 支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><span style="color:#000000">凹语言是国内 Gopher 发起的纯社区构建的开源国产编程语言项目（没有公司背景、没有任何赞助）。同时凹语言也是国内第一个实现纯浏览器内编译、执行全链路的自研静态类型的编译型通用编程语言。</span>凹语言 v0.9.2 发布, 完善 p5 支持：
 </div></div><ul><li>完善<span>&nbsp;</span><code>js/p5</code><span>&nbsp;</span>包, 增加键盘事件处理, 改用凹语言原生绘图</li><li><code>wa init</code><span>&nbsp;</span>增加<span>&nbsp;</span><code>-p5</code><span>&nbsp;</span>参数</li></ul><p>更多信息请访问凹语言官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwa-lang.org%2F" target="_blank">https://wa-lang.org/</a></p><p><img height="1800" src="https://oscimg.oschina.net/oscnet/up-ac34bd5dfae5cc210de9f6110efa46a37c3.png" width="2880" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 13:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/282043</guid>
            <link>https://www.oschina.net/news/282043</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[野火 IM 1.2.3 已经发布，即时通讯系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>野火 IM 1.2.3 已经发布，即时通讯系统</p><p>此版本更新内容包括：</p><p>Release note 1.2.3:</p><ol><li>同步专业版 IM 服务 server SDK。</li><li>添加对鸿蒙平台的支持。</li><li>解决 server 端音视频 SDK 信令支持问题。</li><li>升级部分依赖，解决漏洞问题</li></ol><blockquote><p>附件的版本有 3 种格式，分别是 Java 通用版本、Deb 格式安装包和 Rpm 格式安装包包，可以根据平台或者自己的习惯下载其中一种软件包。另外在<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwildfirechat%2Fim-server%2Freleases" target="_blank">Github</a>也可以下载。也可以下载我们网站上的最新版本，<a href="https://gitee.com/link?target=http%3A%2F%2Fstatic.wildfirechat.cn%2Fdistribution-latest-bundle-tar.tar.gz" target="_blank">通用 Java 包</a>，<a href="https://gitee.com/link?target=http%3A%2F%2Fstatic.wildfirechat.cn%2Fim-server-latest.deb" target="_blank">deb 格式安装包</a>和<a href="https://gitee.com/link?target=http%3A%2F%2Fstatic.wildfirechat.cn%2Fim-server-latest.rpm" target="_blank">rpm 格式安装包</a>。 *** 0.42 版本增加了群成员数限制，默认为 2000。如果您想修改默认值，可以在升级版本之后，修改 t_setting 表，把默认的大小改为您期望的。另外修改 t_group 表，把已经存在的群组 max_member_count 改成您期望的，然后重启。*** *** 0.46 和 0.47 版本升级到 0.48 及以后版本时，可能会提示 flyway migrate 38 错误，请执行 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwildfirechat%2Fserver%2Fblob%2Fwildfirechat%2Fflyway_repaire_migrate_38.sql" target="_blank">修复脚本</a> 进行修复。0.46 和 0.47 版本之外的版本不会出现此问题。*** *** 0.50 版本添加了是否允许客户端发送群操作通知的配置。如果您在客户端自定义群通知，需要在服务器端配置允许，没有使用自定义群操作通知的不受影响。*** *** 从 0.54 之前版本升级到 0.54 及以后版本时，会提示 flyway migrate 错误。因为 0.54 版本删除了 sql 脚本中默认敏感词的内容，flyway checksum 失败。请执行<code>update flyway_schema_history set checksum = 0 where script = 'V17__add_default_sensitive_word.sql';</code>来修复。*** *** 从 0.59 之前的版本升级到之后的版本执行数据库升级时间比较长，请耐心等待提示运行成功，避免中途中断。 *** *** 0.62/0.63 版本有严重的问题，请使用 0.64 及以后版本，或者 0.61 版。 *** *** 从 0.68 版本起添加了 pc 在线是否默认手机接收推送的开关，默认为开，与以前版本作用相反，请注意兼容（可以关掉与之前保持一致或者升级客户端） *** *** 从 0.78 版本起把 MySQL 数据库中关键字都改为大小写敏感，另外生成 id 的方法也做了改变，只生成小写的 id，避免出现 id 重复的问题，建议所有客户都升级 *** *** 从 0.79 版本起把 log4j 升级到 log4j2，因为 log4j 已经不再维护而且还有已知的漏洞，建议所有客户都升级，升级时注意更新 log4j2 的配置文件 *** *** 0.97 版本更改了启动脚本<code>wildfirechat.sh</code>，如果是升级服务，请注意更新启动脚本。***</p></blockquote><h1>历史更新记录</h1><p>请参考附件的 release_note.md</p><p>详情查看：<a href="https://gitee.com/wfchat/im-server/releases/1.2.3">https://gitee.com/wfchat/im-server/releases/1.2.3</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 08:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281997/wildfirechat-1-2-3-released</guid>
            <link>https://www.oschina.net/news/281997/wildfirechat-1-2-3-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一个使用 Java 开发的 LLM 应用开发框架，Agents-Flex alpha.2 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="235" src="https://oscimg.oschina.net/oscnet/up-28f28677527d13113c29a56916625bb1b3d.png" width="300" referrerpolicy="no-referrer"></p><h1>Agents-Flex： 一个使用 Java 开发的 LLM（大语言模型） 应用开发框架</h1><h2>基本能力</h2><ul><li>LLM 的访问能力</li><li>Prompt、Prompt Template 定义加载的能力</li><li>Function Calling 定义、调用和执行等能力</li><li>记忆的能力（Memory）</li><li>Embedding</li><li>Vector Storage</li><li>文档处理 
  <ul><li>加载器（Loader） 
    <ul><li>Http</li><li>FileSystem</li></ul></li><li>分割器（Splitter）</li><li>解析器（Parser） 
    <ul><li>PoiParser</li><li>PdfBoxParser</li></ul></li></ul></li><li>LLM Chain</li><li>Agents Chain</li></ul><h2>功能列表</h2><p><img src="https://oscimg.oschina.net/oscnet/up-5335d770976c07c928c526ed75372a2d6b8.png" referrerpolicy="no-referrer"></p><h2>简单对话示例</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 OpenAi 大语言模型:</p><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>OpenAiConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"sk-rts5NF6n*******"</span></span><span>);</span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Prompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"请写一个关于小兔子战胜大灰狼的故事。"</span></span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"---&gt;"</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 「通义千问」 大语言模型:</p><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>QwenLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>QwenLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"sk-28a6be3236****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setModel</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"qwen-turbo"</span></span><span>);</span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>QwenLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Prompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"请写一个关于小兔子战胜大灰狼的故事。"</span></span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"---&gt;"</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 「讯飞星火」 大语言模型:</p><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>SparkLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setAppId</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiSecret</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Prompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"请写一个关于小兔子战胜大灰狼的故事。"</span></span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"---&gt;"</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><h2>历史对话示例</h2><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span>(</span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span>)</span></span><span></span><strong><span>throws</span></strong><span></span><strong><span>InterruptedException</span></strong><span>{</span></span><span><strong>SparkLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setAppId</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiSecret</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"****"</span></span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">// 创建一个大模型</span></span></span><span><strong>Llm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>SparkLlm</strong><span>(</span><span>config</span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">//创建一个历史对话的 prompt</span></span></span><span><strong>HistoriesPrompt</strong><span>prompt</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>HistoriesPrompt</strong><span>();</span></span><span><strong>System</strong><span>.</span><span style="color:#008080"><span style="color:#d73a49">out</span></span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"您想问什么？"</span></span><span>);</span></span><span><strong>Scanner</strong><span>scanner</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>Scanner</strong><span>(</span><strong>System</strong><span>.</span><span style="color:#008080"><span style="color:#d73a49">in</span></span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">//等待用户从控制枱输入问题</span></span></span><span><strong>String</strong><span>userInput</span><span>=</span><span>scanner</span><span>.</span><span style="color:#008080">nextLine</span><span>();</span></span><span><strong><span style="color:#d73a49">while</span></strong><span>(</span><span>userInput</span><span>!=</span><strong><span style="color:#005cc5">null</span></strong><span>){</span></span><span><span>prompt</span><span>.</span><span style="color:#008080">addMessage</span><span>(</span><strong><span style="color:#d73a49">new</span></strong><strong>HumanMessage</strong><span>(</span><span>userInput</span><span>));</span></span><span><span style="color:#888888"><span style="color:#6a737d">//向大模型提问</span></span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>instance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong>System</strong><span>.</span><span style="color:#008080"><span style="color:#d73a49">out</span></span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"&gt;&gt;&gt;&gt; "</span></span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><span style="color:#888888"><span style="color:#6a737d">//继续等待用户从控制枱输入内容</span></span></span><span><span>userInput</span><span>=</span><span>scanner</span><span>.</span><span style="color:#008080">nextLine</span><span>();</span></span><span><span>}</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><h2>Function Calling&nbsp;示例</h2><ul><li>第一步：通过注解定义本地方法</li></ul><div><div><pre><span><strong><span style="color:#d73a49">public</span></strong><strong><span><span style="color:#d73a49">class</span></span></strong><span></span><strong><span><span style="color:#6f42c1">WeatherUtil</span></span></strong><span></span><span>{</span></span><span><span><span style="color:#6a737d">@FunctionDef</span></span><span><span style="color:#6a737d">(</span></span><span><span style="color:#6a737d">name</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"get_the_weather_info"</span></span></span><span><span style="color:#6a737d">,</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">description</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"get the weather info"</span></span></span><span><span style="color:#6a737d">)</span></span></span><span><strong><span style="color:#d73a49">public</span></strong><strong>static</strong><strong>String</strong><strong>getWeatherInfo</strong><span>(</span></span><span><span><span style="color:#6a737d">@FunctionParam</span></span><span><span style="color:#6a737d">(</span></span><span><span style="color:#6a737d">name</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"city"</span></span></span><span><span style="color:#6a737d">,</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">description</span></span><span style="color:#6a737d"></span><span><span style="color:#6a737d">=</span></span><span style="color:#6a737d"></span><span style="color:#dd2200"><span style="color:#6a737d"><span>"the city name"</span></span></span><span><span style="color:#6a737d">)</span></span><strong>String</strong><span>name</span></span><span><span>)</span><span>{
&nbsp;       <span style="color:#6a737d">//这里应该是通过接口去调用获得天气信息</span></span></span><span><strong><span style="color:#d73a49">return</span></strong><span>name</span><span>+</span><span style="color:#dd2200"><span style="color:#032f62">"的天气是阴转多云。 "</span></span><span>;</span></span><span><span>}</span></span><span><span>}</span></span></pre><div>
   &nbsp;
  </div></div></div><ul><li>第二步：通过 Prompt、Functions 传入给大模型，然后得到结果</li></ul><div><div><pre><span><strong><span><span style="color:#d73a49">public</span></span></strong><span></span><strong><span><span style="color:#d73a49">static</span></span></strong><span></span><strong><span><span style="color:#d73a49">void</span></span></strong><span></span><strong><span><span style="color:#6f42c1">main</span></span></strong><span><span><span>(</span></span></span><strong><span><span>String</span></span></strong><span><span><span>[]</span></span></span><span><span></span></span><span><span><span>args</span></span></span><span><span><span>)</span></span></span><span></span><strong><span><span style="color:#d73a49">throws</span></span></strong><span></span><strong><span>InterruptedException</span></strong><span></span><span>{</span></span><span><strong>OpenAiLlmConfig</strong><span>config</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"sk-rts5NF6n*******"</span></span><span>);</span></span><span><strong>OpenAiLlm</strong><span>llm</span><span>=</span><strong><span style="color:#d73a49">new</span></strong><strong>OpenAiLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong>Functions</strong><span>&lt;</span><strong>String</strong><span>&gt;</span><span>functions</span><span>=</span><strong>Functions</strong><span>.</span><span style="color:#008080">from</span><span>(</span><strong>WeatherUtil</strong><span><span>.</span></span><span style="color:#008080"><span><span style="color:#d73a49">class</span></span></span><span><span>,</span></span><span></span><strong><span><span style="color:#6f42c1">String</span></span></strong><span><span>.</span></span><span style="color:#008080"><span><span style="color:#6f42c1">class</span></span></span><span><span>)</span>;</span></span><span><strong>String</strong><span>result</span><span>=</span><span>llm</span><span>.</span><span style="color:#008080">call</span><span>(</span><strong><span style="color:#d73a49">new</span></strong><strong>SimplePrompt</strong><span>(</span><span style="color:#dd2200"><span style="color:#032f62">"今天的天气如何"</span></span><span>),</span><span>functions</span><span>);</span></span><span><strong>System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span>result</span><span>);</span></span><span><span style="color:#888888"><span style="color:#6a737d">// "北京的天气是阴转多云。 ";</span></span></span><span><strong>Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999"><span>10000</span></span><span>);</span></span><span><span>}</span></span></pre></div></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">注意：当前版本为 v1.0.0-alpha.2 ，还在开发中，请暂时勿使用于正式的商业产品中。</p><h2>开源地址​：</h2><ul><li>Gitee:&nbsp;<a href="https://gitee.com/agents-flex/agents-flex">https://gitee.com/agents-flex/agents-flex</a></li><li>Github:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fagents-flex%2Fagents-flex" target="_blank">https://github.com/agents-flex/agents-flex</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 08:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281991/agents-flex-alpha2</guid>
            <link>https://www.oschina.net/news/281991/agents-flex-alpha2</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[EmbedXrpc V5.0.0 已经发布，用於单片机场景的「gRPC」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>EmbedXrpc V5.0.0 已经发布，用於单片机场景的「gRPC」</p><p>此版本更新内容包括大版本，重大变更：</p><p>1.移植 Free RTOS 的 message buffer/queue 到 WIN32 和裸机</p><p>2.重构 RunTime 配置，减小很多无用内存</p><p>详情查看：<a href="https://gitee.com/snikeguo/EmbedXrpc/releases/V5.0.0">https://gitee.com/snikeguo/EmbedXrpc/releases/V5.0.0</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 08:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281985/embedxrpc-5-0-0-released</guid>
            <link>https://www.oschina.net/news/281985/embedxrpc-5-0-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[KCL v0.8.0 重磅发布 - 融汇社区生态，助力配置体验!]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><span>简介</span></h2><p><img height="1254" src="https://oscimg.oschina.net/oscnet/up-6dd01390dcc57caa46f5a95963603bef6f6.png" width="1819" referrerpolicy="no-referrer"></p><p>KCL 团队很高兴地宣布&nbsp;<strong>KCL v0.8.0 新版本现在已经可用</strong>！本次发布为大家带来了三方面的重点更新：<strong>语言</strong>、<strong>工具链</strong>、<strong>社区集成 &amp; 扩展支持</strong>。</p><ul><li><p><em>使用功能更完善错误更少的 KCL 语言、工具链和 IDE 提升代码编写体验和效率</em></p></li><li><p><em>更加全面丰富的社区生态集成，改善运维体验</em></p></li><li><p><em>更加丰富的 KCL 三方库模型，更加轻松的与云原生生态集成</em></p></li></ul><p>进一步您可以在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Freleases%2Ftag%2Fv0.8.0" target="_blank">KCL v0.8.0 发布页面</a>&nbsp;或者&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">KCL 官方网站</a>&nbsp;获得下载安装指南和详细发布信息。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl" target="_blank">KCL</a>&nbsp;是一个 CNCF 基金会托管的面向云原生领域开源的基于约束的记录及函数编程语言，期望通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于围绕配置的模块化、扩展性和稳定性，打造更简单的逻辑编写体验，构建更简单的自动化和生态集成路径。</p><h2><span>语言更新</span></h2><h3><span>🚗 语法语义更新</span></h3><h4><span>支持&nbsp;<code>show-hidden</code></span></h4><p>通过&nbsp;<code>--show-hidden</code>&nbsp;参数显示私有变量。</p><p>KCL 程序如下</p><pre><code>a&nbsp;=&nbsp;{_b&nbsp;=&nbsp;<span>1</span>}
</code></pre><p>通过命令&nbsp;<code>kcl run main.k --show-hidden</code>&nbsp;编译结果如下</p><pre><code><span>a:</span>
&nbsp;&nbsp;<span>_b:</span>&nbsp;<span>1</span></code></pre><h4><span>支持参数和关键字参数的合并</span></h4><p>KCL v0.8.0 版本中新增了参数和关键字参数的合并功能。带参数的 schema 实例在合并操作时参数也会合并。</p><pre><code>schema&nbsp;Person[separator]:
&nbsp;&nbsp;&nbsp;&nbsp;firstName:&nbsp;str&nbsp;=&nbsp;<span>"John"</span>
&nbsp;&nbsp;&nbsp;&nbsp;lastName:&nbsp;str
&nbsp;&nbsp;&nbsp;&nbsp;fullName:&nbsp;str&nbsp;=&nbsp;firstName&nbsp;+&nbsp;separator&nbsp;+&nbsp;lastName

x&nbsp;=&nbsp;Person(<span>"&nbsp;"</span>)&nbsp;{lastName&nbsp;=&nbsp;<span>"Doe"</span>}

y&nbsp;=&nbsp;Person(<span>"-"</span>)&nbsp;{lastName&nbsp;=&nbsp;<span>"Doe1"</span>}

z&nbsp;=&nbsp;x&nbsp;|&nbsp;y
</code></pre><p>对应编译结果</p><pre><code><span>x:</span>
&nbsp;&nbsp;<span>firstName:</span>&nbsp;<span>John</span>
&nbsp;&nbsp;<span>lastName:</span>&nbsp;<span>Doe</span>
&nbsp;&nbsp;<span>fullName:</span>&nbsp;<span>John</span>&nbsp;<span>Doe</span><span>y:</span>
&nbsp;&nbsp;<span>firstName:</span>&nbsp;<span>John</span>
&nbsp;&nbsp;<span>lastName:</span>&nbsp;<span>Doe1</span>
&nbsp;&nbsp;<span>fullName:</span>&nbsp;<span>John-Doe1</span><span>z:</span>
&nbsp;&nbsp;<span>firstName:</span>&nbsp;<span>John</span>
&nbsp;&nbsp;<span>lastName:</span>&nbsp;<span>Doe1</span>
&nbsp;&nbsp;<span>fullName:</span>&nbsp;<span>John-Doe1</span></code></pre><h4><span>支持字面值的 yaml stream 格式输出</span></h4><p>通过&nbsp;<code>yaml_stream</code>&nbsp;方法，可以支持输出 yaml 字面值的结果。</p><pre><code><span>import</span>&nbsp;manifests

x0&nbsp;=&nbsp;<span>1</span>
x1&nbsp;=&nbsp;<span>2</span>
manifests.yaml_stream([x0,&nbsp;x1])
</code></pre><p>对应编译结果</p><pre><code><span>1</span><span>---</span><span>2</span></code></pre><h4><span>修复了在循环表达式中的类型检查错误</span></h4><pre><code>name&nbsp;=&nbsp;<span>"volume"</span>
configMapVolumes1:&nbsp;{str:{str:}}&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>for</span>&nbsp;_&nbsp;<span>in</span>&nbsp;range(<span>1</span>)
}

configMapVolumes2:&nbsp;[{str:}]&nbsp;=&nbsp;[
&nbsp;&nbsp;&nbsp;&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<span>for</span>&nbsp;_&nbsp;<span>in</span>&nbsp;range(<span>1</span>)
]
</code></pre><p>在 v0.8.0 之前，上述程序编译会出现类型错误。</p><pre><code>error[E2G22]:&nbsp;TypeError
&nbsp;--&gt;&nbsp;main.k:4:9
&nbsp;&nbsp;|
4&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;name
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;expected&nbsp;{str:any},&nbsp;got&nbsp;str
&nbsp;&nbsp;|

&nbsp;--&gt;&nbsp;main.k:2:1
&nbsp;&nbsp;|
2&nbsp;|&nbsp;configMapVolumes1:&nbsp;{str:{str:}}&nbsp;=&nbsp;{
&nbsp;&nbsp;|&nbsp;^&nbsp;variable&nbsp;is&nbsp;defined&nbsp;here,&nbsp;its&nbsp;<span>type</span>&nbsp;is&nbsp;{str:any},&nbsp;but&nbsp;got&nbsp;str
&nbsp;&nbsp;|
</code></pre><p>在 v0.8.0 版本中, 将会成功编译出如下结果：</p><pre><code><span>name:</span>&nbsp;<span>volume</span><span>configMapVolumes1:</span>
&nbsp;&nbsp;<span>volume:</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>name:</span>&nbsp;<span>volume</span></code></pre><h4><span>修复了 Schema 对象必选属性递归检查错误</span></h4><p>在 Schema 内部定义了一个对象，对象内部的属性是必选的，但是在实例化时使用不存在的属性。</p><pre><code>schema&nbsp;Name:
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;str

schema&nbsp;Config:
&nbsp;&nbsp;&nbsp;&nbsp;n:&nbsp;{str:Name}

Config&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;n&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.n&nbsp;=&nbsp;<span>"n"</span>
&nbsp;&nbsp;&nbsp;&nbsp;}
}
</code></pre><p>在 v0.8.0 之后，上述程序编译会出现类型错误。</p><pre><code>error[E2L23]:&nbsp;CompileError
&nbsp;--&gt;&nbsp;main.k:9:11
&nbsp;&nbsp;|
9&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n.n&nbsp;=&nbsp;<span>"n"</span>
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;Cannot&nbsp;add&nbsp;member&nbsp;<span>'n'</span>&nbsp;to&nbsp;schema&nbsp;<span>'Name'</span>
&nbsp;&nbsp;|
</code></pre><h4><span>在编译输出结果中去掉&nbsp;<code>__settings__</code>&nbsp;属性</span></h4><p>在 v0.8.0 版本中，编译输出结果中去掉了&nbsp;<code>__settings__</code>&nbsp;属性。</p><pre><code>schema&nbsp;Person:
&nbsp;&nbsp;&nbsp;&nbsp;__settings__:&nbsp;{str:str}&nbsp;=&nbsp;{<span>"output_type"</span>:&nbsp;<span>"STANDALONE"</span>}
&nbsp;&nbsp;&nbsp;&nbsp;name?:&nbsp;str
&nbsp;&nbsp;&nbsp;&nbsp;age?:&nbsp;int
&nbsp;&nbsp;&nbsp;&nbsp;school?:&nbsp;str

a&nbsp;=&nbsp;Person{
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;<span>"a"</span>,
}
</code></pre><p>在编译结果中去掉了&nbsp;<code>__settings__</code>&nbsp;属性。</p><pre><code><span>a:</span>
&nbsp;&nbsp;<span>name:</span>&nbsp;<span>a</span></code></pre><h4><span>支持在 config 表达式中计算 key 和 value 的值</span></h4><p>在 v0.8.0 版本中，支持在 config 表达式中计算 key 和 value 的值。</p><pre><code>_data&nbsp;=&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;<span>"a"</span>:&nbsp;<span>'foo'</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>"b"</span>:&nbsp;<span>'bar'</span>
}

r0&nbsp;=&nbsp;[{v&nbsp;=&nbsp;k}&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r1&nbsp;=&nbsp;[{k&nbsp;=&nbsp;v}&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r2&nbsp;=&nbsp;[{k.foo&nbsp;=&nbsp;v}&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r3&nbsp;=&nbsp;[[k]&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
r4&nbsp;=&nbsp;[[k,&nbsp;v]&nbsp;<span>for</span>&nbsp;k,&nbsp;v&nbsp;<span>in</span>&nbsp;_data]
</code></pre><p>编译结果如下：</p><pre><code><span>r0:</span><span>-</span>&nbsp;<span>foo:</span>&nbsp;<span>a</span><span>-</span>&nbsp;<span>bar:</span>&nbsp;<span>b</span><span>r1:</span><span>-</span>&nbsp;<span>a:</span>&nbsp;<span>foo</span><span>-</span>&nbsp;<span>b:</span>&nbsp;<span>bar</span><span>r2:</span><span>-</span>&nbsp;<span>a:</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>foo:</span>&nbsp;<span>foo</span><span>-</span>&nbsp;<span>b:</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>foo:</span>&nbsp;<span>bar</span><span>r3:</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>a</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>b</span><span>r4:</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>a</span>
&nbsp;&nbsp;<span>-</span>&nbsp;<span>foo</span><span>-</span>&nbsp;<span>-</span>&nbsp;<span>b</span>
&nbsp;&nbsp;<span>-</span>&nbsp;<span>bar</span></code></pre><h3><span>🔧 诊断信息的优化</span></h3><p>KCL 语法在 if 块中使用的是&nbsp;<code>elif</code>&nbsp;关键字，而不是&nbsp;<code>else if</code>。</p><p>编译以下 KCL 程序：</p><pre><code><span>if</span>&nbsp;<span>True</span>:&nbsp;a&nbsp;=&nbsp;<span>1</span><span>else</span>&nbsp;<span>if</span>&nbsp;<span>False</span>:&nbsp;b&nbsp;=&nbsp;<span>1</span></code></pre><p>KCL 在诊断信息中增加了错误修正的建议：</p><pre><code>error[E1001]:&nbsp;InvalidSyntax
&nbsp;--&gt;&nbsp;main.k:2:6
&nbsp;&nbsp;|
2&nbsp;|&nbsp;<span>else</span>&nbsp;<span>if</span>&nbsp;False:&nbsp;b&nbsp;=&nbsp;1
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;<span>'else&nbsp;if'</span>&nbsp;here&nbsp;is&nbsp;invalid&nbsp;<span>in</span>&nbsp;KCL,&nbsp;consider&nbsp;using&nbsp;the&nbsp;<span>'elif'</span>&nbsp;keyword
&nbsp;&nbsp;|
</code></pre><h3><span>🚀 语言编写体验优化</span></h3><h4><span>KCL 标准库新增文件系统访问方法</span></h4><p>KCL 增加了访问文件系统的方法。在 v0.8.0 版本中支持了包括&nbsp;<code>read</code>,&nbsp;<code>glob</code>&nbsp;等访问文件系统的方法。</p><p>通过&nbsp;<code>read</code>&nbsp;方法，可以读取一个文件内容为字符串。</p><pre><code><span>import</span>&nbsp;file

a&nbsp;=&nbsp;file.read(<span>"hello.txt"</span>)
</code></pre><p>在文件&nbsp;<code>hello.txt</code>&nbsp;中添加如下内容：</p><pre><code>Hello World !
</code></pre><p>编译结果</p><pre><code><span>a:</span>&nbsp;<span>Hello</span>&nbsp;<span>World</span>&nbsp;<span>!</span></code></pre><p>通过结合&nbsp;<code>json.decode</code>&nbsp;方法，可以轻松的实现将 json 文件反序列化。</p><p>在&nbsp;<code>hello.json</code>&nbsp;文件中增加如下内容</p><pre><code>{
&nbsp;&nbsp;<span>"name"</span>:&nbsp;<span>"John"</span>,
&nbsp;&nbsp;<span>"age"</span>:&nbsp;<span>10</span>
}
</code></pre><p>KCL 程序如下所示：</p><pre><code><span>import</span>&nbsp;file
<span>import</span>&nbsp;json

_a&nbsp;=&nbsp;json.decode(file.read(<span>"hello.json"</span>))

name&nbsp;=&nbsp;_a.name
age&nbsp;=&nbsp;_a.age
</code></pre><p>编译结果如下所示：</p><pre><code><span>name:</span>&nbsp;<span>John</span><span>age:</span>&nbsp;<span>10</span></code></pre><p>更多内容 -&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fdocs%2Freference%2Fmodel%2Ffile%2F" target="_blank">https://kcl-lang.io/zh-CN/docs/reference/model/file/</a></p><h4><span>KCL 编译缓存路径支持使用环境变量 KCL_CACHE_PATH 指定</span></h4><p>KCL 编译器会将缓存生成到环境变量<code>KCL_CACHE_PATH</code>指定的目录当中，如果没指定，将会生成到项目根目录中。</p><h4><span>插件系统支持使用 golang 编写 KCL 插件</span></h4><p>使用 golang 定义 hello 插件。</p><pre><code><span>package</span>&nbsp;hello_plugin

<span>import</span>&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;<span>"kcl-lang.io/kcl-go/pkg/plugin"</span>
)

<span><span>func</span>&nbsp;<span>init</span><span>()</span></span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;plugin.RegisterPlugin(plugin.Plugin{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name:&nbsp;<span>"hello"</span>,
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MethodMap:&nbsp;<span>map</span>[<span>string</span>]plugin.MethodSpec{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>"add"</span>:&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Body:&nbsp;<span><span>func</span><span>(args&nbsp;*plugin.MethodArgs)</span>&nbsp;<span>(*plugin.MethodResult,&nbsp;error)</span></span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v&nbsp;:=&nbsp;args.IntArg(<span>0</span>)&nbsp;+&nbsp;args.IntArg(<span>1</span>)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>return</span>&nbsp;&amp;plugin.MethodResult{V:&nbsp;v},&nbsp;<span>nil</span>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},
&nbsp;&nbsp;&nbsp;&nbsp;})
}
</code></pre><p>借助 KCL Go SDK 开发，扩展 KCL 编译器使用插件。</p><pre><code><span>package</span>&nbsp;main

<span>import</span>&nbsp;(
&nbsp;&nbsp;&nbsp;&nbsp;<span>"fmt"</span>

&nbsp;&nbsp;&nbsp;&nbsp;<span>"kcl-lang.io/kcl-go/pkg/kcl"</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span>"kcl-lang.io/kcl-go/pkg/native"</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;Import&nbsp;the&nbsp;native&nbsp;API</span>
&nbsp;&nbsp;&nbsp;&nbsp;_&nbsp;<span>"kcl-lang.io/kcl-go/pkg/plugin/hello_plugin"</span>&nbsp;<span>//&nbsp;Import&nbsp;the&nbsp;hello&nbsp;plugin</span>
)

<span><span>func</span>&nbsp;<span>main</span><span>()</span></span>&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;<span>//&nbsp;Note&nbsp;we&nbsp;use&nbsp;`native.MustRun`&nbsp;here&nbsp;instead&nbsp;of&nbsp;`kcl.MustRun`,&nbsp;because&nbsp;it&nbsp;needs&nbsp;the&nbsp;cgo&nbsp;feature.</span>
&nbsp;&nbsp;&nbsp;&nbsp;yaml&nbsp;:=&nbsp;native.MustRun(<span>"main.k"</span>,&nbsp;kcl.WithCode(code)).GetRawYamlResult()
&nbsp;&nbsp;&nbsp;&nbsp;fmt.Println(yaml)
}

<span>const</span>&nbsp;code&nbsp;=&nbsp;<span>`
import&nbsp;kcl_plugin.hello

name&nbsp;=&nbsp;"kcl"
three&nbsp;=&nbsp;hello.add(1,2)&nbsp;#&nbsp;3
`</span></code></pre><h3><span>😸 新增 Linux arm64 版本</span></h3><p>KCL 的 Release 产物中新增了对 Linux arm64 平台的支持。</p><p>可以在&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Freleases" target="_blank">KCL Release Page</a>&nbsp;中找到后缀为&nbsp;<code>linux-arm64</code>&nbsp;的压缩包。</p><h3><span>🏄 SDK &amp; API 更新</span></h3><h4><span>Rust SDK</span></h4><p>KCL Rust SDK 提供了一系列的 API，可以用于 KCL 文件的编译、校验、测试和格式化代码等操作。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Flib" target="_blank">KCL Rust SDK: https://github.com/kcl-lang/lib</a></p><h4><span>Java SDK</span></h4><p>KCL Java SDK 新增语法树、作用域、符号等语法语义结构定义及相关查询 API。</p><h4><span>Go SDK 更新</span></h4><ul><li><p>KCL Doc 工具支持输出为 OpenAPI 格式。</p></li><li><p>增加 Parse 过程相关 API。</p></li></ul><h4><span>API 更新</span></h4><ul><li><p>新增 json/yaml 验证 API 用来验证 json 和 yaml 文件。</p></li><li><p>新增语法和语义分析 API 用于对 KCL 代码进行分析。</p></li><li><p>新增构建二进制产物 API 用于缓存编译结果。</p></li><li><p>新增运行二进制产物 API 用于直接运行编译结果，避免重复编译并提升性能。</p></li><li><p>新增代码生成 API 以编程方式实现 KCL 代码生成而不是编写复杂的模版。</p></li></ul><p>更多的更新可以查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Freference%2Fxlang-api%2Fgo-api" target="_blank">KCL v0.8 API 文档</a></p><h3><span>🐞 其他更新及错误修复</span></h3><ul><li><p>修复了 KCL CLI 使用编译参数 -S 可能会导致的编译错误</p></li><li><p>修复了 kcl fmt 工具对 lambda 表达式进行格式化时，结尾增加一个空行的错误。</p></li><li><p>修复 Schema Doc 补全代码片段错误</p></li><li><p>修复 Schema 对象必选属性递归检查错误</p></li><li><p>提升 Schema 索引签名类型检查健壮性</p></li><li><p>修复 Schema 内部诸如 "$if" 的字符串标识符定义找不到的错误</p></li><li><p>优化非预期 token 的语法错误提示</p></li><li><p>修复非预期的字典生成表达式中的 key 与循环变量相同时的变量计算</p></li></ul><h2><span>IDE &amp; 工具链更新</span></h2><h3><span>IDE 更新</span></h3><h4><span>IDE 语义级别的高亮增强</span></h4><p>KCL IDE 高亮之前仅支持 KCL 语法高亮，今年逐步启用了新的 KCL 语义架构模型，在新语义架构的支撑下，KCL IDE 支持语义级别的高亮，在语义上有关联的代码会显示相同的高亮。</p><p><img height="664" src="https://oscimg.oschina.net/oscnet/up-ca71cb381178754a79d3e6bab643331ccc8.png" width="560" referrerpolicy="no-referrer"></p><p>更多关于 KCL 语义架构模型的内容，参考：&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fblog%2F2023-12-09-kcl-new-semantic-model" target="_blank">KCL 高效语义模型技术揭秘：实现快速编译与增强 IDE 支持</a></p><h4><span>新增 builtin 方法的补全</span></h4><p>KCL IDE 支持 builtin 方法的补全，如下图所示：</p><p><img height="456" src="https://oscimg.oschina.net/oscnet/up-148aa113dc1c90e129c43dba3d796502f3e.gif" width="1218" referrerpolicy="no-referrer"></p><p><img alt="" src="https://files.mdnice.com/user/44450/f7e1a184-22b8-4d3c-9362-6e523650e1aa.gif" referrerpolicy="no-referrer"></p><h4><span>增加变量引用错误时的快速修复功能</span></h4><p>KCL IDE 支持变量引用错误时的快速修复功能，如下图所示：<img alt="" src="https://files.mdnice.com/user/44450/de4f89fe-bced-4a95-8888-7c2b9de6d28e.gif" referrerpolicy="no-referrer"></p><p><img height="496" src="https://oscimg.oschina.net/oscnet/up-b4fd597987857f9db1aec93a500f8fbd4f3.gif" width="1218" referrerpolicy="no-referrer"></p><h4><span>IDE 支持增量解析和异步编译功能</span></h4><p>IDE 通过 KCL 新语义模型支持增量解析和异步编译功能，提升了编译速度和编写体验。</p><p>更多内容详见&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fblog%2F2023-12-09-kcl-new-semantic-model" target="_blank">https://kcl-lang.io/zh-CN/blog/2023-12-09-kcl-new-semantic-model</a></p><h4><span>IDE LSP 问题修复</span></h4><ul><li><p>修复 assert 语句中字符串插值变量不能跳转的异常</p></li><li><p>修复了字符串中异常触发函数补全的异常</p></li><li><p>修复了字符串后跟注释中补全错误的问题</p></li><li><p>修复了 schema 内部属性符号不能跳转的问题</p></li><li><p>修复 import 语句别名语义检查和补全的异常</p></li><li><p>修复了 schema 中 check 表达式补全的异常</p></li><li><p>修复了嵌套 schema 定义中补全错误的问题</p></li><li><p>修复了部分悬停信息缺失的问题</p></li><li><p>修复不同语法补全符号类型不统一的问题</p></li><li><p>区分 Schema 类型和实例补全符号</p></li><li><p>统一 Schema 注释文档补全的格式</p></li><li><p>修复了配置块内部 if 语句符号不能跳转和补全的问题</p></li></ul><h3><span>验证工具更新</span></h3><p>本次更新中，我们对 KCL 验证工具的报错信息进行了优化，在使用 KCL 验证工具对 json/yaml 文件进行验证的工作中，将会准确定位到 json 文件的异常位置。</p><p>以 json 文件为例，我们将要对以下 hello.json 文件进行验证</p><pre><code>{
&nbsp;&nbsp;&nbsp;&nbsp;<span>"name"</span>:&nbsp;<span>10</span>,
&nbsp;&nbsp;&nbsp;&nbsp;<span>"age"</span>:&nbsp;<span>18</span>,
&nbsp;&nbsp;&nbsp;&nbsp;<span>"message"</span>:&nbsp;<span>"This&nbsp;is&nbsp;Alice"</span>
}
</code></pre><p>定义如下 main.k 文件来对 json 文件中的内容进行验证</p><pre><code>schema&nbsp;User:
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;str
&nbsp;&nbsp;&nbsp;&nbsp;age:&nbsp;int
&nbsp;&nbsp;&nbsp;&nbsp;message?:&nbsp;str
</code></pre><p>通过以下命令对 json 文件内容进行验证</p><pre><code>kcl&nbsp;vet&nbsp;hello.json&nbsp;main.k
</code></pre><p>可以看到在 json 文件中的错误位置：</p><pre><code>error[E2G22]:&nbsp;TypeError
&nbsp;--&gt;&nbsp;test.json:2:5
&nbsp;&nbsp;|
2&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span>"name"</span>:&nbsp;10,
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;expected&nbsp;str,&nbsp;got&nbsp;int(10)
&nbsp;&nbsp;|

&nbsp;--&gt;&nbsp;main.k:2:5
&nbsp;&nbsp;|
2&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;str
&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;^&nbsp;variable&nbsp;is&nbsp;defined&nbsp;here,&nbsp;its&nbsp;<span>type</span>&nbsp;is&nbsp;str,&nbsp;but&nbsp;got&nbsp;int(10)
&nbsp;&nbsp;|
</code></pre><h4><span>KCL cli 新增 git 仓库作为编译入口</span></h4><p>通过以下命令，可以将 KCL 的 git 仓库作为编译入口</p><pre><code>kcl&nbsp;run&nbsp;&lt;git&nbsp;url&gt;
</code></pre><h4><span>kcl mod graph 支持输出 KCL 包依赖图</span></h4><p>通过命令&nbsp;<code>kcl mod graph</code>&nbsp;输出 KCL 包的依赖图。</p><h3><span>KCL 包管理工具</span></h3><h4><span>KCL 包管理支持通过 commit 添加 git 依赖</span></h4><p>KCL 包管理工具增加了通过 commit 来添加 git 三方库依赖的功能。以&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack%2Fcatalog" target="_blank">https://github.com/KusionStack/catalog</a>&nbsp;为例，添加 commit 为 a29e3db 的版本作为依赖。可以通过编辑 kcl.mod 文件中的依赖或者命令行直接添加。</p><p>编辑 kcl.mod 文件内容如下：</p><pre><code>[dependencies]
catalog = { git = "https://github.com/KusionStack/catalog.git", commit = "a29e3db" }
</code></pre><p>或者通过命令行添加：</p><pre><code>kcl&nbsp;mod&nbsp;add&nbsp;-git&nbsp;https://github.com/KusionStack/catalog.git&nbsp;-commit&nbsp;a29e3db
</code></pre><h4><span>KCL 包管理工具支持三方库名称带有「-」</span></h4><p>KCL 包管理工具支持三方库名称中带有「-」，KCL 包管理工具会自动将 「-」 替换为 「_」。</p><p>以三方库&nbsp;<code>set-annotation</code>&nbsp;为例，通过以下命令添加&nbsp;<code>set-annotation</code>&nbsp;为依赖：</p><pre><code>kcl&nbsp;mod&nbsp;add&nbsp;set-annotation
</code></pre><p>在 KCL 程序中，通过&nbsp;<code>set_annotation</code>&nbsp;引用：</p><pre><code>import&nbsp;set_annotation&nbsp;
</code></pre><h3><span>KCL 导入工具更新，支持更多特性</span></h3><ul><li><p>支持 OpenAPI multiplyOf 规范映射到 KCL multiplyof 函数进行校验</p></li><li><p>支持 YAML Stream 格式的 Kubernetes CRD 文件输出为多个 KCL 文件</p></li><li><p>支持 OpenAPI allOf 关键字校验表达式生成</p></li><li><p>支持 KCL 数组和字典类型的 all/any 校验表达式生成</p></li></ul><h2><span>社区集成 &amp; 扩展更新</span></h2><h3><span>Flux KCL Controller 发布</span></h3><p>我们开发了&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fflux-kcl-controller" target="_blank">Flux KCL Controller</a>&nbsp;支持 KCL 与 Flux 集成。在集群中安装 Flux KCL Controller 后，通过以下资源就可以实现 KCL git 仓库通过 FluxCD 进行持续集成。</p><pre><code>apiVersion:&nbsp;source.toolkit.fluxcd.io/v1
kind:&nbsp;GitRepository
metadata:
&nbsp;&nbsp;name:&nbsp;kcl-deployment
&nbsp;&nbsp;namespace:&nbsp;<span>source</span>-system
spec:
&nbsp;&nbsp;interval:&nbsp;30s
&nbsp;&nbsp;<span>#&nbsp;需要持续集成的&nbsp;github&nbsp;仓库</span>
&nbsp;&nbsp;url:&nbsp;https://github.com/awesome-kusion/kcl-deployment.git
&nbsp;&nbsp;ref:
&nbsp;&nbsp;&nbsp;&nbsp;branch:&nbsp;main
---
apiVersion:&nbsp;krm.kcl.dev.fluxcd/v1alpha1
kind:&nbsp;KCLRun
metadata:
&nbsp;&nbsp;name:&nbsp;kcl-deployment
&nbsp;&nbsp;namespace:&nbsp;<span>source</span>-system
spec:
&nbsp;&nbsp;sourceRef:
&nbsp;&nbsp;&nbsp;&nbsp;kind:&nbsp;GitRepository
&nbsp;&nbsp;&nbsp;&nbsp;name:&nbsp;kcl-deployment
</code></pre><p>更多内容详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fzh-CN%2Fblog%2F2024-02-01-biweekly-newsletter%2F" target="_blank">https://kcl-lang.io/zh-CN/blog/2024-02-01-biweekly-newsletter/</a></p><h3><span>CodeQL KCL 工具</span></h3><p>初步支持 CodeQL KCL dbschema 定义以及对 KCL 语法语义进行数据提取，并可通过 CodeQL 进行数据查询对 KCL 代码进行静态分析和扫描，提升代码安全。</p><p>更多内容详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcodeql-kcl" target="_blank">https://github.com/kcl-lang/codeql-kcl</a></p><h2><span>模型更新</span></h2><p>KCL 模型数量新增至 303 个，主要新增与 Crossplane Provider 相关的模型和与 JSON 合并操作相关的库</p><ul><li><p>KCL JSON Patch 库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fjsonpatch" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/jsonpatch</a></p></li><li><p>KCL JSON Merge Patch 库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fjson_merge_patch" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/json_merge_patch</a></p></li><li><p>KCL Kubernetes Strategy Merge Patch 库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fstrategic_merge_patch" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/strategic_merge_patch</a></p></li><li><p>KCL Crossplane 及 Crossplane Provider 系列模型：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fsearch%3Forg%3Dkcl%26sort%3Drelevance%26page%3D1%26ts_query_web%3Dcrossplane" target="_blank">https://artifacthub.io/packages/search?org=kcl&amp;sort=relevance&amp;page=1&amp;ts_query_web=crossplane</a></p></li><li><p>Kubenetes 1.29 版本:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fkcl%2Fkcl-module%2Fk8s%2F1.29.0" target="_blank">https://artifacthub.io/packages/kcl/kcl-module/k8s/1.29.0</a></p></li><li><p>新增 Podinfo 应用配置模型，支持设置外部动态参数如 replicas 等，可以直接通过一条命令渲染 Kubernetes 资源配置，并且可以在此模型的基础上修改并自定义资源模版</p></li></ul><pre><code>kcl&nbsp;run&nbsp;oci://ghcr.io/kcl-lang/podinfo&nbsp;-D&nbsp;replicas=2
</code></pre><ul><li><p>JSON Schema 库发布 0.0.4 版本，修复类型定义错误, 可以执行如下命令更新或添加依赖</p></li></ul><pre><code>kcl&nbsp;mod&nbsp;add&nbsp;jsonschema:0.0.4
</code></pre><h2><span>其他更新</span></h2><p>完整更新和错误修复列表详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fcompare%2Fv0.7.0...v0.8.0" target="_blank">https://github.com/kcl-lang/kcl/compare/v0.7.0...v0.8.0</a></p><h2><span>文档更新</span></h2><p>KCL 网站新增 KCL v0.7.0 文档内容并支持版本化语义选项，目前支持 v0.4.x, v0.5.x, v0.6.x, v0.7.0 和 v0.8.0 版本选择，同时欢迎社区同学进行文档共建。</p><h2><span>社区动态</span></h2><h3><span>KCL LFX 项目启动</span></h3><p>恭喜 @AkashKumar7902, @octonawish-akcodes, @shashank-iitbhu 入选 CNCF KCL LFX 项目，同时感谢 @Vanshikav123, @Amit Pandey 的积极参与。</p><h3><span>KCL 登陆 Crossplane 官方函数市场</span></h3><p>自 Crossplane v1.14 中的组合函数 Beta 版发布以来，使用 Crossplane 构建云原生平台的可能体验范围一直在迅速扩大。KCL 团队在第一时间进行跟进并主动构建了一个可重用的函数，整个 Crossplane 生态系统现在可以利用 KCL 提供的高水平经验和能力来构建自己的云原生平台。</p><p>更多内容详见:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.crossplane.io%2Ffunction-kcl%2F" target="_blank">https://blog.crossplane.io/function-kcl/</a></p><h3><span>特别鸣谢</span></h3><p>感谢社区的小伙伴在 KCL v0.8.0 版本中的贡献，以下排名不分先后</p><ul><li><p>感谢 @professorabhay 支持 KCL 测试 Diff 功能 🙌</p></li><li><p>感谢 @jakezhu9 同学对 kcl import 工具的持续贡献 🤝</p></li><li><p>感谢 @octonawish-akcodes 对 KCL 代码清理和 FAQ 文档的持续贡献 🙌</p></li><li><p>感谢 @satyazzz123 对 KRM KCL 支持读取环境变量功能的贡献 🙌</p></li><li><p>感谢 @AkashKumar7902 对 KCL 包管理工具功能的贡献 🙌</p></li><li><p>感谢 @UtkarshUmre 对 KCL linux-arm64 构建 CI 的贡献 🙌</p></li><li><p>感谢 @octonawish-akcodes 和 @d4v1d03 对 KCL FAQ 文档和 KCL IDE 功能的持续贡献 🙌</p></li><li><p>感谢 @octonawish-akcodes 对 Ansible KCL Module 的贡献</p></li><li><p>感谢 @AkashKumar7902 和 @Vanshikav123 对 KCL 包管理工具功能的贡献 🙌</p></li><li><p>感谢 @StevenLeiZhang 对 KCL 文档和 KCL 插件的贡献 🙌</p></li><li><p>感谢 @patrycju, @Callum Lyall, @Matt Gowie, @ShiroDN, @FLAGLORD, @YiuTerran, @flyinox, @steeling, @Anoop, @Even Solberg，@Phillip Neumann，@Naxe, @rozaliev, @CloudZero357, @martingreber, @az, @Art3mK, @Erick, @TheChinBot, @Evgeny Shepelyuk, @yonas, @vtomilov, @Fdall, @bozaro, @starkers, 和 @MrGuoRanDuo 等在 KCL v0.8 版本迭代过程中使用 KCL 提供的宝贵建议与反馈 🙌</p></li></ul><h2><span>下一步计划</span></h2><p>感谢所有 KCL 用户和社区小伙伴在此次版本更新过程中提出的宝贵反馈与建议。预计 2024 年 5 月，我们将发布 KCL v0.9.0 版本，更多详情请参考 KCL 2024 路线规划，和 KCL v0.9.0 Milestone，如果您有更多的想法和需求，欢迎在 KCL Github 仓库发起 Issues 或讨论，也欢迎加入我们的社区进行交流 🙌 🙌 🙌</p><p>更多其他资源请参考：</p><ul><li><p>KCL 网站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io/</a></p></li><li><p>KusionStack 网站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkusionstack.io%2F" target="_blank">https://kusionstack.io/</a></p></li><li><p>KCL GitHub 仓库:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang" target="_blank">https://github.com/kcl-lang</a></p></li><li><p>KusionStack GitHub 仓库:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack" target="_blank">https://github.com/KusionStack</a></p></li><li><p>KCL v0.9.0 Milestone:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F9" target="_blank">https://github.com/kcl-lang/kcl/milestone/9</a></p></li><li><p>KCL 2024 路线规划:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues%2F882" target="_blank">https://github.com/kcl-lang/kcl/issues/882</a></p></li><li><p>KCL 社区:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity" target="_blank">https://github.com/kcl-lang/community</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 07:29:17 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281971/kcl-0-8-0-released</guid>
            <link>https://www.oschina.net/news/281971/kcl-0-8-0-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WFS 文件存储系统 v1.0.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h4>WFS 文件存储系统，主要解决海量小文件的存储问题</h4><p>wfs 有非常高效的读写效率，在高并发压力下，wfs 存储引擎读写响应时间可以达到微秒级别.</p><p>海量小文件可能带来的许多问题：</p><p style="text-align:left"><span>&nbsp; &nbsp;<span>&nbsp;</span></span><span>海量小文件存储在不同的硬件环境和系统架构下，都会带来一系列显著的问题。无论是采用传统的机械硬盘（HDD）还是现代的固态硬盘（SSD），这些问题都可能影响系统的性能、效率、扩展性和成本：</span></p><ol><li><span>存储效率低下：对于任何类型的硬盘，小文件通常会导致物理存储空间的低效使用。由于硬盘有其最小存储单元（扇区或页），小文件可能会占用超过其实际内容大小的空间，尤其是在每个文件还需额外存储元数据的情况下，如 inode（在 Unix-like 系统中）或其他形式的元数据记录，这会进一步加大空间浪费。inode 耗尽：每个文件和目录至少占用一个 inode，而 inode 的数量是在格式化磁盘并创建文件系统时预先设定的。当系统中有大量小文件时，即使硬盘空间还很充足，也可能因为 inode 用完而导致无法继续创建新文件，尽管剩余磁盘空间足以存放更多数据。性能影响：随着 inode 数量增多，查找和管理这些 inode 所对应的元数据会变得更复杂和耗时，尤其是对于不支持高效索引机制的传统文件系统，这会影响文件系统的整体性能。扩展性受限：文件系统设计时通常有一个固定的 inode 总数，除非通过特殊手段（如调整文件系统或重新格式化时指定更多 inode），否则无法动态增加 inode 数量来适应小文件增长的需求。</span></li><li><span>I/O 性能瓶颈与资源消耗：在 HDD 环境中，随机读写大量小文件会引发频繁的磁盘寻道操作，从而降低整体 I/O 性能。而在 SSD 中，尽管寻道时间几乎可以忽略，但过于密集的小文件访问仍可能导致控制器压力增大、写入放大效应以及垃圾回收机制负担加重。</span></li><li><span>索引与查询效率问题：海量小文件对文件系统的索引结构形成挑战，随着文件数量的增长，查找、更新和删除小文件时所需的元数据操作会变得非常耗时。尤其在需要快速检索和分析场景下，传统索引方法难以提供高效的查询服务。</span></li><li><span>备份恢复复杂性与效率：备份海量小文件是一个繁琐且耗时的过程，同时在恢复过程中，尤其是按需恢复单个文件时，需要从大量备份数据中定位目标文件，这将极大地影响恢复速度和效率。</span></li><li><span>扩展性与可用性挑战：存储系统在处理海量小文件时，可能面临扩展性难题。随着文件数量的增长，如何有效分配和管理资源以维持良好的性能和稳定性是一大考验。在分布式存储系统中，还可能出现热点问题，导致部分节点负载过高，影响整个系统的稳定性和可用性。</span></li></ol><p style="text-align:left"><strong>&nbsp; &nbsp;wfs 作用在于将海量提交存储的小文件进行高效的压缩归档。并提供简洁的数据获取方式，以及后台文件管理，文件碎片整理等。</strong></p><hr><p><strong>wfs 相关程序</strong></p><ul><li>wfs 源码地址 &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs" target="_blank">https://github.com/donnie4w/wfs</a></li><li>go 客户端 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs-goclient" target="_blank">https://github.com/donnie4w/wfs-goclient</a></li><li>java 客户端 &nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs-jclient" target="_blank">https://github.com/donnie4w/wfs-jclient</a></li><li>python 客户端 &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdonnie4w%2Fwfs-pyclient" target="_blank">https://github.com/donnie4w/wfs-pyclient</a></li><li>wfs 在线体验 &nbsp; &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Ftestwfs.tlnet.top%2F" target="_blank">http://testwfs.tlnet.top</a><span>&nbsp;</span>&nbsp; &nbsp; 用户名 admin &nbsp; &nbsp;密码 123</li><li>wfs 使用文档 &nbsp; &nbsp; &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwfsdoc" target="_blank">https://tlnet.top/wfsdoc</a></li></ul><hr><p><strong>wfs 的特点</strong></p><ul><li>高效性</li><li>简易性</li><li>零依赖</li><li>管理平台</li><li>图片处理</li></ul><hr><p><strong>应用场景</strong></p><ul><li>媒体存储：适用于存储和访问海量的小文件，如图片、文本等。凭借高性能存储引擎，WFS 可实现高速存取，并提供丰富的图片资源处理功能。</li></ul><hr><p><strong>技术特点</strong></p><ul><li>高吞吐量低延迟<span>：保证在高并发场景下的数据存取速度。</span></li><li>支持多级别数据压缩存储<span>：节省存储空间，提高存储效率。</span></li><li>支持 http(https) 协议存取文件</li><li>支持 thrift 协议长连接存取文件</li><li>支持图片基本处理<span>：内置图片处理功能，满足多媒体存储需求。</span></li></ul><hr><p><strong>WFS 的压力测试与性能评估</strong></p><p><span>请注意，以下基准测试数据主要针对 WFS 数据存储引擎，未考虑网络因素的影响。在理想条件下，基于基准测试数据得出估算数据</span></p><p><strong>以下为部分压测数据截图</strong></p><p><img alt="" src="https://tlnet.top/f/1709371893_7752.jpg" width="1264" referrerpolicy="no-referrer"></p><p><img alt="" src="https://tlnet.top/f/1709371933_7249.jpg" width="1264" referrerpolicy="no-referrer"></p><p><img alt="" src="https://tlnet.top/f/1709373380_17625.jpg" width="1264" referrerpolicy="no-referrer"></p><p><img alt="" src="https://tlnet.top/f/1709373414_15548.jpg" width="1264" referrerpolicy="no-referrer"></p><p><strong>测试数据说明：</strong></p><ul><li><strong>第一列为测试方法，写 Append, 读 Get ， *-4 四核，*-8 八核</strong></li><li><strong>第二列为本轮测试</strong><span><strong>执行总次</strong></span><strong>数</strong></li><li><strong>ns/op: 每执行一次消耗的时间</strong></li><li><strong>B/op：每执行一次消耗的内存</strong></li><li><strong>allocs/op：每执行一次分配内存次数</strong></li></ul><p style="text-align:start">&nbsp;</p><p><strong>根据基准测试数据，可以估算出 wfs 存储引擎的性能</strong></p><ul><li><strong>存储数据性能估算</strong></li></ul><ol><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (36489 ns/operation) ≈ 27405 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (31303 ns/operation) ≈ 31945 次/s</span></li><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (29300 ns/operation) ≈ 34129 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (24042 ns/operation) ≈ 41593 次/s</span></li><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (30784 ns/operation) ≈ 32484 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (30966 ns/operation) ≈ 32293 次/s</span></li><li><span>Benchmark_Append-4 平均每秒执行的操作次数约为：1 / (35859 ns/operation) ≈ 27920 次/s</span></li><li><span>Benchmark_Append-8 平均每秒执行的操作次数约为：1 / (33821 ns/operation) ≈ 29550 次/s</span></li></ol><ul><li><strong>获取数据性能估算</strong></li></ul><ol><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (921 ns/operation) ≈ &nbsp;1085776 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (636 ns/operation) ≈ &nbsp;1572327 次/s</span></li><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (1558 ns/operation) ≈ 641848 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (1296 ns/operation) ≈ 771604 次/s</span></li><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (1695 ns/operation) ≈ 589970 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (1402ns/operation) ≈ &nbsp;713266 次/s</span></li><li><span>Benchmark_Get-4 平均每秒执行的操作次数约为：1 / (1865 ns/operation) ≈ 536000 次/s</span></li><li><span>Benchmark_Get-8 平均每秒执行的操作次数约为：1 / (1730 ns/operation) ≈ 578034 次/s</span></li></ol><p style="text-align:start">&nbsp;</p><p style="text-align:start"><strong>写入数据性能</strong></p><ul><li>在不同并发条件下，WFS 存储引擎的写入操作平均每秒执行次数介于约 3 万次/s 至 4 万次/s 之间。</li></ul><p style="text-align:start"><strong>读取数据性能</strong></p><ul><li>WFS 存储引擎读数据操作的性能更为出色，平均每秒执行次数在<span>&nbsp;</span><span>53 万</span>次/s 至<span>&nbsp;</span><span>150 万</span>次/s 之间。</li></ul><p style="text-align:start">&nbsp;</p><p style="text-align:start"><strong>&nbsp; &nbsp;请注意：测试结果与环境有很大关系。</strong><span><strong>实际应用中的性能可能会受到多种因素的影响，如系统负载、网络状况、磁盘 I/O 性能等，实际部署时需要根据具体环境进行验证和调优。</strong></span></p><hr><p><strong>wfs 内置图片基础处理</strong></p><p style="text-align:left"><strong>原图: &nbsp;<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg</a></p><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li><span>裁剪正中部分，等比缩小生成 200x200 缩略图 &nbsp;<span>&nbsp;</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F1%2Fw%2F200%2Fh%2F200" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/1/w/200/h/200</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/1/w/200/h/200" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li><span>宽度固定为 200px，高度等比缩小，生成宽 200 缩略图 &nbsp; &nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li><span>高度固定为 200px，宽度等比缩小，生成高 200 缩略图 &nbsp; &nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fh%2F200" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/h/200</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/h/200" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>高斯模糊，生成模糊程度<span>Sigma 为 5，宽 200 的图片 &nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Fblur%2F5" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/blur/5</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/blur/5" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>灰色图片，生成灰色，<span>宽 200 的</span>图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Fgrey%2F1" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/grey/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/grey/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>颜色反转，生成颜色相反，宽 200 的图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Finvert%2F1" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/invert/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/invert/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>水平反转 ，生成水平反转，宽 200 的图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Ffliph%2F1" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/fliph/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/fliph/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>垂直反转 ，生成垂直反转，宽 200 的图片 &nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Fflipv%2F1" target="_blank"><span>&nbsp;</span>https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/flipv/1</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/flipv/1" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>图片旋转 ，生成向左旋转 45 度，宽 200 的图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Frotate%2F45" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45" referrerpolicy="no-referrer"></p><p style="text-align:left">&nbsp;</p><ul><li>格式转换 ，生成向左旋转 45，宽 200 的 png 图片 &nbsp;<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fstatics%2Ftest%2Fwfs_test.jpg%3FimageView2%2F2%2Fw%2F200%2Frotate%2F45%2Fformat%2Fpng" target="_blank">https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45/format/png</a></li></ul><p style="text-align:left"><img alt="" src="https://tlnet.top/statics/test/wfs_test.jpg?imageView2/2/w/200/rotate/45/format/png" referrerpolicy="no-referrer"></p><p><strong>图片处理方式见<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwfsdoc" target="_blank"><strong>wfs 使用文档</strong></a></p><hr><p><strong>WFS 的使用简单说明</strong></p><ol><li>执行文件下载地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fdownload" target="_blank">https://tlnet.top/download</a></li><li>启动：</li></ol><p style="text-align:left">&nbsp; &nbsp; &nbsp; &nbsp;<span>&nbsp;</span><strong>./linux101_wfs &nbsp; &nbsp; -c &nbsp; &nbsp;wfs.json</strong></p><p style="text-align:left">3. &nbsp; wfs.json 配置说明</p><pre><code>{
    "listen": 4660,     
    "opaddr": ":6802",
    "webaddr": ":6801",
    "memLimit": 128,
    "data.maxsize": 10000,
    "filesize": 100,
}</code></pre><p style="text-align:left"><strong>属性说明：</strong></p><ul><li><span>listen &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;http/https 资源获取服务监听端口</span></li><li><span>opaddr &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; thrift 后端资源操作地址</span></li><li><span>webaddr &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;管理后台服务地址</span></li><li><span>memLimit &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wfs 内存最大分配 (单位：MB)</span></li><li><span>data.maxsize &nbsp; &nbsp; &nbsp;wfs 上传图片大小上限 (单位：KB)</span></li><li><span>filesize &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;wfs 后端归档文件大小上限 (单位：MB)</span></li></ul><p><strong>wfs 使用详细说明请参考<span>&nbsp;</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Fwfsdoc" target="_blank"><strong>wfs 使用文档</strong></a></p><hr><p><strong>WFS 如何存储，删除数据</strong></p><p><strong>1. http/https</strong></p><p>curl -F "file=@1.jpg" &nbsp;"http://127.0.0.1:6801/append/test/1.jpg" -H "username:admin" -H "password:123"</p><p>curl -X DELETE "http://127.0.0.1:6801/delete/test/1.jpg" -H "username:admin" -H "password:123"</p><p><strong>2. 使用客户端</strong></p><p>&nbsp; &nbsp; 以下是 java 客户端，示例</p><pre><code>    public void append() throws WfsException, IOException {
        String dir = System.getProperty("user.dir") + "/src/test/java/io/github/donnie4w/wfs/test/";
        WfsClient wc = newClient();
        WfsFile wf = new WfsFile();
        wf.setName("test/java/1.jpeg");
        wf.setData(Files.readAllBytes(Paths.get(dir + "1.jpeg")));
        wc.append(wf);
    }</code></pre><p style="text-align:left"><strong>3. 通过管理后台上传/删除文件</strong></p><h4>&nbsp;</h4><hr><h4><strong>WFS 管理后台</strong></h4><p><strong>默认搜索</strong></p><p><img alt="" src="https://tlnet.top/f/1709440477_578.jpg" width="1264" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><strong>前缀搜索</strong></p><p><img alt="" src="https://tlnet.top/f/1709440507_7665.jpg" width="1264" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><strong>碎片整理</strong></p><p><img alt="" src="https://tlnet.top/f/1709440627_3436.jpg" width="1264" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>&nbsp;</p><hr><h4>WFS 的分布式部署方案</h4><p><span>wfs0.x 版本到 wfs1.x 版本的设计变更说明：</span>wfs0.x 版本实现了分布式存储，这使得系统能够跨多个服务器分散存储和处理数据，具备水平扩展能力和数据备份冗余能力，但是在实际应用中也暴露出一些问题，如元数据重复存储导致空间利用率不高。对于小文件的处理效率低，因为在节点间频繁转发传输，造成系统资源消耗增加。</p><p style="text-align:start">wfs1.x 版本的目标在于通过精简架构、聚焦性能提升来满足特定应用场景的需求，而在分布式部署方面的考量则交由用户借助第三方工具和服务来实现。</p><ol><li>wfs1.x 不直接支持分布式存储，但为了应对大规模部署和高可用需求，推荐采用如 Nginx 这样的负载均衡服务，通过合理的资源配置和定位策略，可以在逻辑上模拟出类似分布式的效果。也就是说，虽然每个 wfs 实例都是单机存储，但可以通过外部服务实现多个 wfs 实例之间的请求分发，从而达到业务层面的「分布式部署」。如何实现 wfs 的「分布式部署」可以参考文章《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftlnet.top%2Farticle%2F22425158" target="_blank">WFS 的分布式部署方案</a>》</li><li>必须说明的是，超大规模数据存储业务中，分布式系统确实具有显著优势，包括动态资源调配、数据分块存储、多节点备份等高级功能。然而，分布式采用负载均衡策略的 wfs1.x，则需要用户自行采取措施保证数据安全性和高可用性，例如定期备份数据、搭建负载均衡集群，并且在应用程序中配置并设计路由规则，确保数据能正确地路由到目标节点。</li><li>wfs 的优势在于其简洁性和高效性。实际上，并非任何文件存储业务都需要复杂的分布式文件系统，相反，大部分业务尚未达到超大规模的量级，而使用复杂的分布式文件系统可能会带来与之不相匹配的过多<span>额外成本和运维难度</span>。<span>目前的 wfs 及其相应的分布式部署策略已经能够较好地满足各种业务需求</span>。</li></ol></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 03:58:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281930/wfs-go-1-0-1-released</guid>
            <link>https://www.oschina.net/news/281930/wfs-go-1-0-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Syncthing 1.27.4 发布，连续文件同步工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">Syncthing&nbsp;是一个免费开源的工具，它能在你的各个网络计算机间同步文件 / 文件夹，它的同步数据是直接从一个系统中直接传输到另一个系统的，并且它是安全且私密的。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">Syncthing 1.27.4 现已发布，具体更新内容如下：</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>Bug 修复</strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9369" target="_blank">#9369</a>：filesystem watcher 忽略无效 UTF-8 匹配时的&nbsp;<span style="background-color:#ffffff; color:#1f2328">Panic</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9435" target="_blank">＃9435</a>：syncthing 应能&nbsp;cgroup aware</li></ul><p style="text-align:start"><strong style="color:#333333"><span style="background-color:#ffffff; color:#1f2328">Enhancements</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9339" target="_blank">＃9339</a>：File system watcher 应该在更多情况下跳过忽略的目录</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9357" target="_blank">#9357</a>：在 Linux 容器中设置<code>GOMAXPROCS</code>配额感知</li></ul><p style="text-align:start"><strong style="color:#333333"><span style="background-color:#ffffff; color:#1f2328">Other issues</span></strong></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9386" target="_blank">#9386</a>：folder_sendrecv.go 中的拼写错误引用了不存在的<code>dbUpdateShourtcutFile</code>类型</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Fissues%2F9389" target="_blank">#9389</a>：typo：<code>Complection</code><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>→<span>&nbsp;</span></span><code>Completion</code><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>?</span></li></ul><p>更新说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsyncthing%2Fsyncthing%2Freleases%2Ftag%2Fv1.27.4" target="_blank">https://github.com/syncthing/syncthing/releases/tag/v1.27.4</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 03:13:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281915/syncthing-1-27-4-released</guid>
            <link>https://www.oschina.net/news/281915/syncthing-1-27-4-released</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【比较 ORM 操作数据】总结]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h4>写在最后</h4><p>经过将近一周时间的框架收集、学习、实验、编码、测试市面上常见的 ORM 框架，过程中拜读了很多作者的博文、样例，学习很多收获很多。 重新梳理下整理的框架：mybatis-plus、lazy、sqltoy、mybatis-flex、easy-query、mybatis-mp、jpa、dbvisitor、beetlsql</p><p>下面从一下几点出发作出总结</p><ul><li>文档方面：学习过程中 mybatis-plus、jpa 提供的文档资料是比较全和晚上，经得住市场的考验</li><li>技术方面：beetlsql、easy-query、mybatis 系列，三类框架都已经支持 spring 和 solon 生态，其技术架构设计可以推荐大家学习</li><li>并发方面：jpa、db_visitor 还需要开发时候深度优化处理</li><li>大数据存储方面： Lazy 具有一定优势，大数据查询方面：sqltoy 反射处理的比较优秀</li></ul><p>以上是个人整理的观点，如果大家有不同的想法和意见可以在<a href="https://gitee.com/wujiawei1207537021">gitee</a>或者个人博客留言<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.csdn.net%2Fqq_22903677%3Ftype%3Dblog" target="_blank">CSDN</a></p><p>细节数据对比（一万以内基本相差不大）</p><ul><li>细节数据对比，数据属于并发行测试数据，如果测试总数是一百，那么会执行一百次 batchStory，一百次 findPage 每次执行的条数在之前数据的基础上+1</li></ul><p>从形成的折线图看（具体趋势看排名与测试结果）</p><ul><li>存储性能对比: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql 更适合并发性数据存储。jpa、db_visitor 处理耗时较长</li><li>分页查询性能对比: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、db_visitor、beetlSql 都比较稳定。jpa 处理时间明显起伏</li></ul><p><img height="679" src="https://oscimg.oschina.net/oscnet/up-108d2b6dbb2cbdc219a75ca4040c5d2ab0a.png" width="1406" referrerpolicy="no-referrer"></p><p><img height="698" src="https://oscimg.oschina.net/oscnet/up-0738f46c7c49b88bb0b6c58ca71c33372cd.png" width="1402" referrerpolicy="no-referrer"></p><p>批量保存：</p><ul><li>一万条数据以内 lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql、jpa、db_visitor 性能趋于一致</li><li>十万数据时，处理时间由快到慢依次是: lazy、mybatis-flex、mybatis-mp、mybatis、easy-query、sqltoy、beetlSql、db_visitor、jpa，其中 db_visitor、jpa 处理时间明显起伏</li></ul><p>分页查询：</p><ul><li>一万条数据以内，几款 ORM 均保持在 200 毫秒内</li><li>十万数据时，处理时间由快到慢依次是: sqltoy、db_visitor、easy-query、lazy、beetlSql、mybatis、mybatis-mp、jpa、mybatis-flex</li><li>&nbsp;</li></ul><h3>快速数据对比 (大数据曲线图)</h3><p><img height="674" src="https://oscimg.oschina.net/oscnet/up-b50ab90449379aba424545ef66277f5b0ce.png" width="1391" referrerpolicy="no-referrer"></p><p><img height="691" src="https://oscimg.oschina.net/oscnet/up-15d9a6ed061150752d3225078a5b7199560.png" width="1402" referrerpolicy="no-referrer"></p><h4><a href="https://gitee.com/wujiawei1207537021/wu-compare-orm-demo">当前项目地址</a></h4><h4><a href="https://gitee.com/wujiawei1207537021/wu-framework-parent/tree/master/wu-inner-integration/wu-database-parent">lazy-orm 地址</a></h4><h4><a href="https://gitee.com/baomidou/mybatis-plus">mybatis 地址</a></h4><h4><a href="https://gitee.com/sagacity/sagacity-sqltoy">sqltoy 地址</a></h4><h4><a href="https://gitee.com/mybatis-flex/mybatis-flex">mybatis-flex 地址</a></h4><h4><a href="https://gitee.com/xuejm/easy-query">easy-query 地址</a></h4><h4><a href="https://gitee.com/mybatis-mp/mybatis-mp">mybatis-mp 地址</a></h4><h4><a href="https://gitee.com/zycgit/dbvisitor">dbvisitor 地址</a></h4><h4><a href="https://gitee.com/xiandafu/beetlsql">beetlsql 地址</a></h4></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 03:04:52 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281908</guid>
            <link>https://www.oschina.net/news/281908</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🎉 领域模型即服务 | Wow 2.16.16 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><a href="https://ahoowang.gitee.io/wow/"><img alt="Wow:基于 DDD、EventSourcing 的现代响应式 CQRS 架构微服务开发框架" src="https://static.oschina.net/uploads/img/202312/13135012_Zb9v.svg" width="150" referrerpolicy="no-referrer"></a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow%2Fblob%2Fmvp%2FLICENSE"><img alt="License" src="https://img.shields.io/badge/license-Apache%202-4EB1BA.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow%2Freleases"><img alt="GitHub release" src="https://img.shields.io/github/release/Ahoo-Wang/Wow.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fmaven-badges.herokuapp.com%2Fmaven-central%2Fme.ahoo.wow%2Fwow-core"><img alt="Maven Central" src="https://maven-badges.herokuapp.com/maven-central/me.ahoo.wow/wow-core/badge.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fapp.codacy.com%2Fgh%2FAhoo-Wang%2FWow%2Fdashboard%3Futm_source%3Dgh%26utm_medium%3Dreferral%26utm_content%3D%26utm_campaign%3DBadge_grade"><img alt="Codacy Badge" src="https://app.codacy.com/project/badge/Grade/cfc724df22db4f9387525258c8a59609" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fcodecov.io%2Fgh%2FAhoo-Wang%2FWow"><img alt="codecov" src="https://codecov.io/gh/Ahoo-Wang/Wow/branch/main/graph/badge.svg?token=uloJrLoQir" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FAhoo-Wang%2FWow"><img alt="Integration Test Status" src="https://github.com/Ahoo-Wang/Wow/actions/workflows/integration-test.yml/badge.svg" referrerpolicy="no-referrer"></a><span style="background-color:#ffffff; color:#40485b"><span>&nbsp;</span></span><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FKotlinBy%2Fawesome-kotlin"><img alt="Awesome Kotlin Badge" src="https://kotlin.link/awesome-kotlin.svg" referrerpolicy="no-referrer"></a></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><strong>领域驱动</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>事件驱动</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>测试驱动</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>声明式设计</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>响应式编程</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>命令查询职责分离</strong><span>&nbsp;</span>|<span>&nbsp;</span><strong>事件溯源</strong></p><blockquote><p style="margin-left:0; margin-right:0"><strong>官方文档：</strong><img alt="👉" height="14" src="https://cn-assets.gitee.com/assets/emoji/point_right-8d392cf32998e3bca12bb7b4ee10dae0.png" width="14" referrerpolicy="no-referrer"><span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/" target="_blank">https://ahoowang.gitee.io/wow/</a><span>&nbsp;</span><img alt="👈" height="14" src="https://cn-assets.gitee.com/assets/emoji/point_left-4570b6929b8880ab2e8b8031007fef18.png" width="14" referrerpolicy="no-referrer"></p></blockquote><h2>更新内容</h2><blockquote><p style="margin-left:0; margin-right:0"><a href="https://ahoowang.gitee.io/wow/guide/query.html" target="_blank">https://ahoowang.gitee.io/wow/guide/query.html</a></p></blockquote><blockquote><p style="margin-left:0; margin-right:0"><strong>Wow</strong><span>&nbsp;</span>除了为命令 (<code>Command</code>) 自动生成了<span>&nbsp;</span><em>OpenAPI</em><span>&nbsp;</span>端点，另外还提供了查询 (<code>Query</code>)<span>&nbsp;</span><em>OpenAPI</em><span>&nbsp;</span>端点。 这意味着开发人员通常只需专注于编写领域模型，即可完成服务开发，而无需费心处理查询逻辑的实现，极大提升了开发效率。</p></blockquote><ul><li>特性 (query): 新增<span>&nbsp;</span><code>SnapshotQueryServiceRegistrar</code><span>&nbsp;</span>以支持自动将所有本地聚合根查询服务注册到<span>&nbsp;</span><code>Spring</code><span>&nbsp;</span>容器中。</li><li>特性 (query): 为<span>&nbsp;</span><code>SnapshotQueryService</code><span>&nbsp;</span>API 添加属性<span>&nbsp;</span><code>NamedAggregate</code></li><li>重构 (compensation): 使用<span>&nbsp;</span><code>QueryDSL</code><span>&nbsp;</span>替换<span>&nbsp;</span><code>MongoExecutionFailedQuery</code></li><li>依赖 (build): 升级<span>&nbsp;</span><code>org.testcontainers:testcontainers-bom</code><span>&nbsp;</span>版本，到<span>&nbsp;</span><code>v1.19.7</code></li></ul><h3>查询服务注册器</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><code>SnapshotQueryServiceRegistrar</code><span>&nbsp;</span>用于自动将所有本地聚合根查询服务注册到<span>&nbsp;</span><code>Spring</code><span>&nbsp;</span>容器中。 开发者可以通过指定的<span>&nbsp;</span><code>Bean Name</code><span>&nbsp;</span>从<span>&nbsp;</span><code>BeanFactory</code><span>&nbsp;</span>中获取相应的<span>&nbsp;</span><code>SnapshotQueryService</code>。</p><blockquote><p style="margin-left:0; margin-right:0"><code>Bean Name</code><span>&nbsp;</span>命名规则：<code>聚合根名称 + ".SnapshotQueryService"</code>。</p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">使用案例：</p><blockquote><p style="margin-left:0; margin-right:0">构造函数注入</p></blockquote><div><pre><code>class OrderService(
    @Qualifier("example.order.SnapshotQueryService")
    private val queryService: SnapshotQueryService&lt;OrderState&gt;
) {
    fun getById(id: String): Mono&lt;OrderState&gt; {
        return condition {
            id(id)
        }.single(queryService).toState()
    }
}
</code></pre></div><blockquote><p style="margin-left:0; margin-right:0">字段注入</p></blockquote><div><pre><code>@Qualifier("example.order.SnapshotQueryService")
@Autowired
private lateinit var queryService: SnapshotQueryService&lt;OrderState&gt;
</code></pre></div><h3>操作符</h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:1px; border:none; box-sizing:border-box; color:#444444; display:block; font-family:-apple-system,&quot;system-ui&quot;,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif; font-size:14px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; line-height:inherit; margin:0px 0px 20px; max-width:100%; orphans:2; overflow:auto; text-align:left; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:816.25px; word-break:keep-all; word-spacing:0px"><tbody><tr><th>操作符</th><th>描述</th></tr></tbody><tbody><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">AND</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">对提供的条件列表执行逻辑与</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">OR</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">对提供的条件列表执行逻辑或</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ID</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>id</code>字段值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">IDS</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>id</code>字段值等于指定值列表中的任何值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TENANT_ID</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>tenantId</code>字段值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">DELETED</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<code>deleted</code>字段值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ALL</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">EQ</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段名称值等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段名称值不等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">GT</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值大于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LT</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值小于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">GTE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值大于或等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LTE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值小于或等于指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">CONTAINS</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配给定字段的值包含指定值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">IN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值等于指定值列表中的任何值的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NOT_IN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值不等于任何指定值或不存在的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">BETWEEN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ALL_IN</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配所有文档，其中字段值是包含所有指定值的数组</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">STARTS_WITH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值以指定字符串开头的文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ENDS_WITH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值以指定字符串结尾的文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">ELEM_MATCH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">条件与包含数组字段的所有文档相匹配，其中数组中至少有一个成员与给定的条件匹配。</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NULL</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值为<code>null</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NOT_NULL</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值不为<code>null</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TRUE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值为<code>true</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">FALSE</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配字段值在指定值为<code>false</code>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">RAW</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">原始操作符，将条件值直接作为原始的数据库查询条件</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TODAY</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在今天范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>为<span>&nbsp;</span><code>2024-06-06</code>，匹配范围<span>&nbsp;</span><code>2024-06-06 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-06 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">TOMORROW</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在昨天范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>为<span>&nbsp;</span><code>2024-06-06</code>，匹配范围<span>&nbsp;</span><code>2024-06-05 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-05 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">THIS_WEEK</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在本周范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">NEXT_WEEK</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在下周范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LAST_WEEK</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在上周范围区间的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">THIS_MONTH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在本月范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>:<span>&nbsp;</span><code>2024-06-06</code>，匹配范围 :<span>&nbsp;</span><code>2024-06-01 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-30 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">LAST_MONTH</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在上月范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>:<span>&nbsp;</span><code>2024-06-06</code>，匹配范围 :<span>&nbsp;</span><code>2024-05-01 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-05-31 23:59:59.999</code><span>&nbsp;</span>的所有文档</td></tr><tr><td style="border-color:#dddddd; border-style:solid; border-width:1px">RECENT_DAYS</td><td style="border-color:#dddddd; border-style:solid; border-width:1px">匹配<em>数值类型时间戳</em>字段在指定值最近天数范围区间的所有文档。比如：<code>today</code><span>&nbsp;</span>:<span>&nbsp;</span><code>2024-06-06</code>，近三天，匹配范围 :<span>&nbsp;</span><code>2024-06-04 00:00:00.000</code><span>&nbsp;</span>~<span>&nbsp;</span><code>2024-06-06 23:59:59.999</code><span>&nbsp;</span>的所有文档。即 : 今天、昨天、前天</td></tr></tbody></table><h3>QueryDsl</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">通过<span>&nbsp;</span><code>QueryDsl</code>，您可以轻松构建复杂的查询条件，例如：</p><div><pre><code>pagedQuery {
    pagination {
        index(1)
        size(10)
    }
    sort {
        "field1".asc()
    }
    condition {
        all()
        not {
           "field1" eq "value1"
           "field2" ne "value2"
        }
        "filed3" gt 1
        "field4" lt 1
        "field5" gte 1
        "field6" lte 1
        "field7" like "value7"
        "field8" isIn listOf("value8")
        "field9" notIn listOf("value9")
        "field10" between (1 to 2)
        "field11" all listOf("value11")
        "field12" startsWith "value12"
        "field13" elemMatch {
            "field14" eq "value14"
        }
        "field15".isNull()
        "field16".notNull()
        "field17".isTrue()
        "field18".isFalse()
        and {
            "field3" eq "value3"
            "field4" eq "value4"
        }
        or {
            "field3" eq "value3"
            "field4" eq "value4"
        }
    }
}
</code></pre></div><h3>OpenAPI</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">以下是一个示例<span>&nbsp;</span><code>curl</code><span>&nbsp;</span>命令，用于执行查询：</p><div><pre><code>  curl -X 'POST' \
  'http://localhost:8080/execution_failed/snapshot/pagination' \
  -H 'accept: application/json' \
  -H 'Content-Type: application/json' \
  -d '{
  "sort": [
    {
      "field": "_id",
      "direction": "DESC"
    }
  ],
  "pagination": {
    "index": 1,
    "size": 10
  },
  "condition": {
    "field": "",
    "operator": "AND",
    "value": "",
    "children": [
      {
        "field": "state.recoverable",
        "operator": "NE",
        "value": "UNRECOVERABLE",
        "children": []
      },
      {
        "field": "state.status",
        "operator": "NE",
        "value": "SUCCEEDED",
        "children": []
      },
      {
        "field": "state.isBelowRetryThreshold",
        "operator": "EQ",
        "value": false,
        "children": []
      }
    ]
  }
}'
</code></pre></div><h3>TypeScript</h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在<span>&nbsp;</span><em>TypeScript</em><span>&nbsp;</span>中，您可以使用<span>&nbsp;</span><code>Conditions</code><span>&nbsp;</span>类来构建复杂的查询条件，例如：</p><div><pre><code>Conditions.and(
    [
        Conditions.ne(RECOVERABLE, UNRECOVERABLE),
        Conditions.ne(STATUS, SUCCEEDED),
        Conditions.eq(IS_BELOW_RETRY_THRESHOLD, false)
    ]
)
</code></pre></div><div>
 &nbsp;
</div><h2>简介</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>Wow</em><span>&nbsp;</span>是一个基于领域驱动设计和事件溯源的现代响应式<span>&nbsp;</span><em>CQRS</em><span>&nbsp;</span>微服务开发框架，历经多年生产环境验证。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">旨在帮助开发者构建现代化的、高性能且易于维护的微服务应用程序，充分发挥领域驱动设计和事件溯源等模式优势的同时降低应用的复杂性以及实践成本。</p><blockquote><p style="margin-left:0; margin-right:0">值得一提的是，领域驱动设计和事件溯源并非微服务架构的专属，<em>Wow</em><span>&nbsp;</span>框架不仅适用于微服务开发，同样也可用于构建基于领域驱动设计的单体应用程序。</p></blockquote><h2>快速开始</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><a href="https://ahoowang.gitee.io/wow/guide/getting-started.html">使用 Wow 项目模板快速创建基于 Wow 框架的 DDD 项目</a></p><h2>特性概览</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="Wow-Features" src="https://gitee.com/AhooWang/Wow/raw/main/documentation/docs/public/images/Features.png" referrerpolicy="no-referrer"></p><h2>架构图</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="Wow-Architecture" src="https://gitee.com/AhooWang/Wow/raw/main/documentation/docs/public/images/Architecture.svg" referrerpolicy="no-referrer"></p><h2>背景</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">随着业务的发展和复杂性的增加，传统的架构和开发方式逐渐显露出瓶颈。<em>领域驱动设计</em>和<em>事件溯源</em>等理念在提高系统设计的灵活性和可维护性方面表现出色，但在实践中常常需要面对复杂性和学习曲线的挑战。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>Wow</em><span>&nbsp;</span>框架的目标是以简单易用的方式将领域驱动设计和事件溯源等理念融入到微服务应用开发中，降低开发者的学习成本，提高开发效率。 通过提供现代响应式的<span>&nbsp;</span><em>CQRS</em><span>&nbsp;</span>架构和相关组件，<em>Wow</em><span>&nbsp;</span>框架旨在让开发者更专注于业务逻辑的实现，而不必过多关心底层技术细节。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">经过多年的实践和不断的演进，<em>Wow</em><span>&nbsp;</span>框架在生产环境中得到了验证，积累了丰富的经验。这些经验和反馈不仅丰富了框架的功能和性能，也为持续的改进和优化提供了宝贵的指导。</p><h2>对于开发者而言，<em>Wow</em><span>&nbsp;</span>框架意味着什么？</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">我曾告诫我的团队：如果我们过于依赖<em>数据驱动设计</em>而忽视<em>领域驱动设计</em>，我们最终将沦为<span>&nbsp;</span><em>CRUD</em><span>&nbsp;</span>工程师。</p><blockquote><p style="margin-left:0; margin-right:0"><em>CRUD</em><span>&nbsp;</span>工程师的竞争力和可替代性可想而知，这或许是为何会有<span>&nbsp;</span><em>35</em><span>&nbsp;</span>岁效应，企业显然更倾向于招募没有太多生活羁绊、更加廉价的<span>&nbsp;</span><em>25</em><span>&nbsp;</span>岁<span>&nbsp;</span><em>CRUD</em><span>&nbsp;</span>工程师。</p></blockquote><h3>业务价值</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">软件系统的核心价值体现在业务价值上，研发人员不应只关注技术实现上，而是应该更多地关注业务价值的实现。 这其中的好处显而易见，当你开发完一个业务系统之后，你将变成一个业务专家，甚至比跟你合作的领域专家还要专业，因为你需要洞察业务细节。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，意味着你将关注点放在围绕领域模型设计上，与业务专家一起探索业务领域，而不是关注于技术实现上。 你仅需编写领域模型，即可完成服务开发，<em>Wow</em><span>&nbsp;</span>框架自动为你准备好<span>&nbsp;</span><em>OpenAPI</em><span>&nbsp;</span>接口。</p><blockquote><p style="margin-left:0; margin-right:0">在《实现领域驱动设计》一书中，作者 Vaughn Vernon 提到：核心域才值得投入精力进行领域驱动设计， 但如果你使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你将发现，因为低廉开发成本、快速的开发效率，即使是次要的支撑子域也值得<span>&nbsp;</span><em>DDD</em>。</p></blockquote><h3>性能与伸缩性</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">随着业务的发展，你需要开始思考系统的性能和伸缩性问题。 在传统架构中，这牵扯到数据库关系模式、分片规则等复杂问题，同时你还需要处理因数据库分片导致的跨分片事务问题。 这时，你不得不修改你的业务代码，以适应水平拆分后的数据库架构。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">然而，如果你选择使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你将不再需要过多关注数据库关系模式、分片规则等问题。你的业务代码无需变更，系统能够轻松实现水平伸缩。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你可以在这里了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/perf-test.html">Wow 框架的性能</a>。</p><h3>读写分离与同步延迟</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">读写分离是一种极为普遍的性能优化架构模式。 然而，同步延迟问题常伴随而来，事务执行成功后写库落库成功，但读库同步延迟，用户刷新页面后无法获取最新数据，从而对用户的体验产生影响。例如：</p><ul><li>用户发起下单事务，写库执行成功，但由于某种原因，读库同步延迟，用户刷新页面后发现订单未成功创建。</li><li>商家编辑完商品后，同步到<span>&nbsp;</span><em>Elasticsearch</em><span>&nbsp;</span>索引库，但由于某种原因，同步延迟，导致商家刷新页面后搜索不到该商品。</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通常，大家采用最简便的方法，等待 1 秒后刷新页面。 虽然这种方式能解决大多数数据同步延迟的问题，但效率不够高。 因为大多数情况下，同步在 100 毫秒内就已完成，剩余的 900 毫秒成了<em>浪费</em>。 然而，有时 1 秒无法完成同步，这就导致用户获取的数据变得<strong>无效</strong>。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你可以通过等待<span>&nbsp;</span><em>PROJECTED</em><span>&nbsp;</span>信号完成，然后再将结果返回给用户，以更为优雅和高效的方式处理数据同步延迟的问题。</p><h3>工程质量</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>单元测试</em>是确保代码质量且符合预期业务需求的重要手段，但在传统架构中，单元测试往往是一项相当困难的任务，因为你需要考虑数据库连接、事务管理、数据清理等问题。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架，你将会发现基于<span>&nbsp;</span><em>Given-&gt;When-&gt;Expect</em><span>&nbsp;</span>模式的测试套件，使得单元测试变得异常简单。 你只需关注领域模型是否符合预期，而无需为数据库连接等问题烦恼。</p><blockquote><p style="margin-left:0; margin-right:0">在实际应用中，我们将领域模型的单元测试覆盖率下限阈值设置为<span>&nbsp;</span><strong>85%</strong>，也是可以轻松实现的。</p><p style="margin-left:0; margin-right:0">在没有刻意要求的情况下，开发人员甚至自觉地将覆盖率提升至<span>&nbsp;</span><strong>95%</strong>。</p><p style="margin-left:0; margin-right:0">因此，每次提交代码都变得轻松自在，因为你确信你的代码经过了充分的测试，并且真正意义上从单元测试中获得了收益。</p></blockquote><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">在研发同级别的项目中，我们的测试团队在系统<span>&nbsp;</span><em>API</em><span>&nbsp;</span>测试中发现，基于 Wow 框架的项目，其<span>&nbsp;</span><em>BUG</em><span>&nbsp;</span>数仅为传统架构项目的<span>&nbsp;</span><strong>1/3</strong>。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你可以在这里了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/test-suite.html">Wow 单元测试套件</a>。</p><h2>对于企业而言，<em>Wow</em><span>&nbsp;</span>框架意味着什么？</h2><h3>商业智能</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="传统架构 VS 事件溯源" src="https://foruda.gitee.com/images/1704878807657006766/300ee974_384561.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:center"><img alt="ETL 同步流程" src="https://foruda.gitee.com/images/1704878793697689592/5fda25c1_384561.png" referrerpolicy="no-referrer"></p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>商业智能</em>是企业决策的关键支持，而数据则是商业智能的分析原料。业务数据越为丰富有价值，商业智能的分析结果越准确，决策也就更加可靠。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">与传统架构有着显著差异，<em>Wow</em><span>&nbsp;</span>提供了实时聚合根状态事件（<code>StateEvent</code>）和聚合命令（<code>Command</code>）作为数据分析的数据源，同时极大降低了实时<span>&nbsp;</span><em>ETL</em>（<code>Extract</code>,<span>&nbsp;</span><code>Transform</code>,<span>&nbsp;</span><code>Load</code>）的难度。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">在传统架构中，实现实时<span>&nbsp;</span><em>ETL</em><span>&nbsp;</span>通常需要经过繁琐的流程，包括<span>&nbsp;</span><code>DB-&gt;CDC-&gt;Process-&gt;DB</code>，而在<span>&nbsp;</span><em>Wow</em><span>&nbsp;</span>框架中，仅需一段简单的<span>&nbsp;</span><em>SQL</em><span>&nbsp;</span>脚本即可完成这一过程。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">另外，在传统架构中，使用<span>&nbsp;</span><em>CDC</em>（<code>MySql Binlog</code>）数据仅记录数据的变化，缺乏明确的业务语义。进行业务分析时，需要基于数据状态的变化推断出业务语义，这往往需要进行大量的数据处理。 相较之下，<em>Wow</em><span>&nbsp;</span>框架直接提供了聚合根状态事件和聚合命令作为数据分析的数据源，极大降低了数据处理的难度。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>Wow</em><span>&nbsp;</span>提供的实时同步机制将数据实时同步至数据仓库（<em>ClickHouse</em>），为实时数据分析提供了极大的便利。这种方法为商业智能提供了强有力的支持，构建了一个实时数据分析系统，使决策制定能够基于及时而准确的信息。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">你可以在这里了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/bi.html">Wow 商业智能</a>。</p><h3>操作审计</h3><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><em>操作审计</em>是企业中保障安全性和合规性的重要组成部分，同时也是对系统操作进行监控和追踪的关键手段。<em>Wow</em><span>&nbsp;</span>框架在这方面为企业带来了显著的优势。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">通过记录聚合命令（<code>Command</code>）作为操作审计的数据源，<em>Wow</em><span>&nbsp;</span>框架能够详细追踪系统中的各种操作。 这些记录不仅包含了操作本身的内容，还涵盖了操作触发的副作用（<em>领域事件</em>），为审计提供了更为全面和准确的数据基础。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">相较于传统审计方法，<em>Wow</em><span>&nbsp;</span>框架的操作审计的数据源具备更加明确的业务语义，以及操作后产生的明确领域事件。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">此外，Wow 框架提供的实时数据同步机制也为操作审计带来了便利，确保了审计数据的及时性和一致性。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">了解更多关于<span>&nbsp;</span><a href="https://ahoowang.gitee.io/wow/guide/bi.html#%E8%81%9A%E5%90%88%E5%91%BD%E4%BB%A4">Wow 操作审计</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 01:49:57 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281886/wow-2-16-16-released</guid>
            <link>https://www.oschina.net/news/281886/wow-2-16-16-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FolkMQ 增加 Node.js 客户端，v1.3.1 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; text-align:start">FolkMQ，作一个最简单的消息中间件（单机版，约 180K TPS）。面向简单，面向未来！</p><h3>功能简介</h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#24292e; display:block; font-family:-apple-system,&quot;system-ui&quot;,&quot;Segoe UI&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:960px; word-spacing:0px"><tbody><tr><th>角色</th><th>功能</th></tr></tbody><tbody><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">生产端（或发起端）</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发布消息、定时消息（或叫延时）、顺序消息、可过期消息、事务消息。发送消息（rpc）<br> 支持 Qos0、Qos1</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">消费端（或接收端）</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">订阅、取消订阅。消费-ACK（自动、手动）。监听（rpc）</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">&nbsp;</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">服务端</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">发布-Confirm、订阅-Confirm、取消订阅-Confirm、派发-Retry、派发-Delayed</td></tr><tr><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">服务端</td><td style="border-color:#dfe2e5; border-style:solid; border-width:1px">单线程、内存运行、快照持久化（自动、停机、手动）、Broker 模式集群、集群热扩展</td></tr></tbody></table><h3>中间件特点</h3><ul><li>高吞吐量、低延迟</li></ul><p style="color:#24292e; text-align:start">集群模式每秒能处理百万消息，最低延迟不到 1 毫秒。</p><ul><li>可扩展性</li></ul><p style="color:#24292e; text-align:start">集群模式支持服务节点热扩展。流量高时随时加，流量低时可减。视频：</p><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1vG411a7Q7%2F" target="_blank">《FolkMQ - "多中心" 集群模式部署视频》</a></p></li><li><p>持久性、可靠性</p></li></ul><p style="color:#24292e; text-align:start">消息被快照持久化（类似于 redis）到本地磁盘，并且支持数据备份防止数据丢失</p><ul><li>可集群、高可用</li></ul><p style="color:#24292e; text-align:start">可单机，可集群。集群内任何节点坏掉只要还有「一个」同类节点，仍可提供服务。视频：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Ha4y1R73b%2F" target="_blank">《FolkMQ - 集群"高可用性"测试视频》</a></li></ul><h3>本次更新</h3><ul><li>新增 javascript 语言客户端实现（浏览器, uniapp[h5, android, ios], weixin, node.js）</li><li>调整 docker 基础镜像改为：adoptopenjdk/openjdk11-openj9 （内存可省一半）</li><li>调整 folkmq-broker 更名为：folkmq-server-broker （相互兼容，体验不变）</li><li>添加 folkmq-server 对 ws 输传协议的支持</li><li>添加 rpc 异常传导机制</li><li>完善，顺序消息的消费逻辑（改为串行消费），更适合数据库有序同步之类的场景</li><li>完善，许可证本地处理机制（基于 rsa 签名机制）</li></ul><p style="color:#24292e; text-align:start">启动服务：</p><pre><code class="language-css">docker run -<span style="color:#e45649">p</span><span style="color:#986801">18602</span>:<span style="color:#986801">18602</span> -p <span style="color:#986801">8602</span>:<span style="color:#986801">8602</span> -e folkmq.schema=<span style="color:#50a14f">'ws'</span> noearorg/folkmq-server:<span style="color:#986801">1.3</span>.<span style="color:#986801">1</span></code></pre><p style="color:#24292e; text-align:start">新功能示例（for Js or Node.js Demo）：</p><pre><code class="language-java">const {FolkMQ} = require(<span style="color:#50a14f">"@noear/folkmq"</span>);

async function <span style="color:#4078f2">main</span><span>()</span> {
    <em>//创建客户端，并连接</em><span style="color:#986801">const</span><span style="color:#986801">client</span><span>=</span> await FolkMQ.createClient(<span style="color:#50a14f">"folkmq🇼🇸//127.0.0.1:18602"</span>)
                            .nameAs(<span style="color:#50a14f">"demoapp"</span>)
                            .connect();

    <em>//订阅主题</em>
    client.subscribe(<span style="color:#50a14f">"demo"</span>, <span style="color:#0184bb">null</span>, <span style="color:#0184bb">true</span>, message =&gt; {
        console.log(message);
    });

    <em>//发布消息</em>
    client.publish(<span style="color:#50a14f">"demo"</span>, FolkMQ.newMqMessage(<span style="color:#50a14f">"helloworld!"</span>));
}

main();
</code></pre><h3>代码仓库</h3><ul><li><a href="https://gitee.com/noear/folkmq">https://gitee.com/noear/folkmq</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnoear%2Ffolkmq" target="_blank">https://github.com/noear/folkmq</a></li></ul><h3>官网</h3><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffolkmq.noear.org%2F" target="_blank">https://folkmq.noear.org</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Mar 2024 00:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281876/folkmq-1-3-1-released</guid>
            <link>https://www.oschina.net/news/281876/folkmq-1-3-1-released</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
