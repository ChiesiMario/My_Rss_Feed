<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 18 Dec 2023 06:44:46 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[要解锁小米手机 BL？先做一份 Java 程序员面试题]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>小米最近启用了新的解锁 Bootloader 流程，除了要去小米社区获取经验（要求社区等级达到 5），还需要参与答题。</p><p>答题要求：</p><blockquote><ol><li>答题开放时间为：工作日上午 10 点 - 下午 18 点（法定节假日为答题系统维护时间，请参阅」近期答题系统维护时间」），还请合理安排答题时间。 [近期答题系统维护时间：2023 年 12 月 16 日 - 17 日、2023 年 12 月 23 - 24 日、2023 年 12 月 30 日 - 2024 年 1 月 1 日]</li><li>答题成绩每周三上午 10:59 失效，如答题通过，请务必在周三中午 11 点前完成申请，避免成绩失效影响申请</li><li>用户即使满足解锁申请条件，如在社交媒介（包括但不限于各论坛、微博、微信、QQ 群等）对小米有过恶意诋毁、谩骂、造谣等情况，申请不予通过</li><li>用户即使满足解锁申请条件，如在申请时不填写申请理由、或使用 AI 生成申请理由、或申请理由出现过辱骂威胁等内容，申请不予通过</li><li>用户即使满足解锁申请条件，但出现被判定为作弊的行为（包括但不限于找人「代答」、使用脚本或工具达到申请条件等），或有其他违反小米账号使用协议的相关情形，申请不予通过</li></ol></blockquote><p>可以看到，答题有时间限制，而且随着时间推移小米不停地更新问题库。新问题甚至加上了排列组合速算：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-45e03e2ab55ddf67fdbd42f7b1b5b02becd.png" referrerpolicy="no-referrer"></p><p>下面这种题目的难度确定不是雷总招 Java 程序员用的面试题吗？JVM 垃圾回收机制都整上了……</p><p><img src="https://oscimg.oschina.net/oscnet/up-33b487bb3fc7e05ce34ab6bed8fabaf2b4a.png" referrerpolicy="no-referrer"><img height="1484" src="https://oscimg.oschina.net/oscnet/up-246ac5dd82b0862a70fe3d11a7cda949a3d.png" width="892" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-fa8da0795c61974da6d4f0554fabd9010a9.png" referrerpolicy="no-referrer"></p><p>据了解，小米官方在 11 月<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweb.vip.miui.com%2Fpage%2Finfo%2Fmio%2Fmio%2Fdetail%3FpostId%3D41559680" target="_blank">宣布 Bootloader 解锁权限变更</a></u>：</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-4f489c01770aa3a174774f20cafe2abdb6b.png" referrerpolicy="no-referrer"></p></blockquote><p>总结下来就是：</p><ul><li>小米社区的等级为 5 级</li><li>完成实名验证</li><li>参与答题</li><li>每年最多只能解锁 3 台小米设备的 Bootloader</li><li>引导加载程序解锁仅在解锁之日起一年内有效，之后您必须为该特定小米设备重新解锁引导加载程序一年</li><li>申请解锁​​Bootloader 权限时，72 小时内不能使用该设备</li><li>如果引导加载程序解锁，HyperOS 设备将不会收到更新（这一特定更新也适用于全球用户）</li></ul><p><img height="1660" src="https://oscimg.oschina.net/oscnet/up-adb61862206cae6b8a931759672e13280d0.png" width="776" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-893e84a9c2497eb96f8e7a3c32142572cbe.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 05:52:48 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271547</guid>
            <link>https://www.oschina.net/news/271547</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源软件无法通过「更低价」获取市场]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Lago 是一个用于基于计量和使用量的开源计费工具，提供了开源（自己本地部署）和 SaaS 版本。Lago 是专门针对处理复杂计费逻辑场景打造的低代码工具，用户可以直接使用 UI 或 API，来创建计费指标和计划。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-e25d1d8220a67a57066c2312fa80bdc6ff4.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgetlago%2Flago%2Fwiki%2FOpen-Source-does-not-win-by-being-cheaper" target="_blank">https://github.com/getlago/lago/wiki/Open-Source-does-not-win-by-being-cheaper</a></u></em></p></blockquote><p>Lago 联合创始人发表文章《<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgetlago%2Flago%2Fwiki%2FOpen-Source-does-not-win-by-being-cheaper" target="_blank"><em>Open Source does not win by being cheaper</em></a></u>》探讨了开源软件的竞争优势。正如标题所言，她认为<strong>开源软件无法通过「更低价」取胜</strong>——迎合价格敏感的人反而是一种失败。</p><p>因为开源软件优势在<strong>于灵活性、透明度、安全性、数据可移植性以及持续性</strong>。</p><ul><li>开源软件使得组织能够快速整合新技术到其技术栈中，相比传统方法，团队可以更快地将开源软件连接到他们每天使用的其他工具上。这种灵活性使得开发团队能够根据需要构建完美的工具，而不是被迫改变他们的工作方式以适应不灵活的专有工具。</li><li>开源软件使得组织能够掌控自己的安全性，因为所有人都可以彻底检查源代码，这样漏洞就能更快地得到修复，从而不断增强软件的安全性。在远程工作的时代，开源软件也能够促进高信任的远程协作，保护敏感数据的安全。</li><li>开源软件能够避免供应商锁定，使得数据可移植。相比专有软件，开源软件提供了避免供应商锁定的自由和灵活，使得组织能够自由地携带数据到任何他们想去的地方。 &nbsp;</li><li>开源软件还具有可持续性。相比专有软件可能会因为公司破产或者推出新产品而停止更新，开源软件由一个庞大的社区支持，因此不太可能停止维护。即使社区停止维护，你也有自由访问和修改源代码的权利。</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271534</guid>
            <link>https://www.oschina.net/news/271534</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[State of PostgreSQL 2023 报告解读]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">基于 PostgreSQL 内核的时序数据库厂商 Timescale 发布了一年一度的 State of Postgres 2023 报告。</span><br style="outline: 0px;"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="491" data-imgfileid="100028228" data-ratio="0.43796296296296294" data-type="png" data-w="1080" data-width="1122" src="https://oscimg.oschina.net/oscnet/cd5af3fa-a9bf-434f-83f2-c05037fe9543.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><img class="rich_pages wxw-img" data-imgfileid="100028227" data-ratio="0.10925925925925926" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/501f9254-8909-4823-ab73-fc5268cf32eb.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></strong></h1><span id="OSC_h1_1"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;">Timescale 介绍</span></strong></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">简单先介绍一下 Timescale 这家公司的历史。它最早是提供了一个 PG 的插件，引入了 Hypertable 这个概念，来高效地处理时序数据，后来提供了托管的云服务。今年又紧跟潮流陆续引入了 Serverless 和 Vector。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="426" data-imgfileid="100028231" data-ratio="0.287962962962963" data-type="png" data-w="1080" data-width="1478" src="https://oscimg.oschina.net/oscnet/a7d587c3-0b0e-4aab-baa3-951ed19898a2.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">Timescale 也在今年做了一次品牌升级，笔者觉得是比较成功的。Logo 有辨识度且含义贴切，整体的风格也契合公司的阶段。在商业能力这块，Timescale 应该是目前 Postgres 阵营里最成熟的。不过 Timescale 本身做的是基于 Postgres 的时序数据库而不是 Postgres 通用数据库，所以它也要面临其他专门做时序数据库的竞争。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="511" data-imgfileid="100028230" data-ratio="0.5273477812177503" data-type="png" data-w="969" data-width="969" src="https://oscimg.oschina.net/oscnet/1f9e8c6a-72d2-464e-a6ab-35cd8c64987d.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">Wiki 上显示的发布时间应该是错误的，2017 年笔者在 Google Cloud SQL 负责 Postgres 时, Timescale 团队就接触过我们希望可以引入他们的插件。当时从成熟度的考虑，并没有接纳。不过有点意外的是，现在 Google Cloud SQL 上仍然没有上架 Timescale 插件。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="192" data-imgfileid="100028229" data-ratio="0.24" data-type="png" data-w="800" data-width="800" src="https://oscimg.oschina.net/oscnet/0fd31385-064f-4dc5-a1d1-bba6ce8e6b3c.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028236" data-ratio="0.10925925925925926" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/ad316e21-e120-445c-8d6f-6ef5bd28e852.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></h1><span id="OSC_h1_2"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><strong style="outline: 0px;">报告整体</strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">首先这是一份相对有偏向性的报告，本身 Timescale 的立场就使得报告的受众群体会是 Postgres 的使用者。比如说下面这个问题的答案。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="431" data-imgfileid="100028234" data-ratio="0.49032992036405004" data-type="png" data-w="879" data-width="879" src="https://oscimg.oschina.net/oscnet/a668922b-94d7-430c-a764-3493f797369a.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">Timescale 从 2019 开始做 State of PostgreSQL，今年的调研持续 6 周，报告结果从 888 份问卷中汇总而成。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="54" data-imgfileid="100028232" data-ratio="0.0819423368740516" data-type="png" data-w="659" data-width="659" src="https://oscimg.oschina.net/oscnet/1e0c2b22-819c-45af-abaa-34d7b547f49d.png" style="outline: 0px;width: 659px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">相比于我们之前做过的<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506004%26idx%3D1%26sn%3Dc6eb5cb91a61e78ddd4d2d3948b94e28%26chksm%3Dc25ce660f52b6f76de08b19c4e3d032b9733d65efb9dfe26072ff29d87b2b2e5a254d1c59d2f%26scene%3D21%23wechat_redirect" textvalue="谷歌 DORA" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">谷歌 DORA</a>&nbsp;以及&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506451%26idx%3D1%26sn%3D04b3b6f6313f1243eb43fb90a70c1205%26chksm%3Dc25ce427f52b6d31fee26c69a9e5e86d064aeead057165bae50ef1747bd2dfcd2be85e5bcda3%26scene%3D21%23wechat_redirect" textvalue="JetBrains 开发者报告" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="outline: 0px;color: var(--weui-LINK);-webkit-user-drag: none;cursor: pointer;">JetBrains 开发者报告</a>，Timescale 报告样本数要小许多，一是因为 Timescale 还没有那么大的影响力，二是 PostgreSQL 只是整个开发者群体下的数据库领域下的一个垂直领域。</span></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028233" data-ratio="0.10925925925925926" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/3366c12e-fe40-426c-85c4-1ddd4eab39a3.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></h1><span id="OSC_h1_3"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><strong style="outline: 0px;">调研人群</strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="1074" data-imgfileid="100028235" data-ratio="1.2740213523131672" data-type="png" data-w="843" data-width="843" src="https://oscimg.oschina.net/oscnet/85c8e1e0-f192-4498-8f2e-c092d4442c4c.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">没有再细分到国家。工作经验分布比较平均，有点意外的，尤其是 10 年以上占了 2/3。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100028240" data-ratio="0.48703703703703705" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/fdd18ffc-3bc8-4a08-96f2-644460c06f16.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">Postgres 基本盘还是后端开发人员。</span></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028237" data-ratio="0.10925925925925926" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/a36affdd-f583-4a4a-8d93-c94650b59189.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></h1><span id="OSC_h1_4"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><strong style="outline: 0px;">选择 PostgreSQL 的原因</strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="639" data-imgfileid="100028238" data-ratio="0.8374836173001311" data-type="png" data-w="763" data-width="763" src="https://oscimg.oschina.net/oscnet/0ed0e918-8ace-42ae-96f5-d0d9c862025d.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">开源证书是最大的优势。但这里没有说清楚是相比于使用不同开源证书的 MySQL，还是相比于闭源的数据库。丰富的的功能另一个显著的优势。相对来说选择 Extension 的人没有预想的多。这里最有意思的是 15+ 工作经验的，排序是证书 &gt; 稳定性 &gt; 功能 &gt; ACID。大道至简，返璞归真。</span></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028239" data-ratio="0.10947368421052632" data-s="300,640" data-type="png" data-w="950" src="https://oscimg.oschina.net/oscnet/68d055a2-cd96-46f0-9198-67e3632ded36.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></h1><span id="OSC_h1_5"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><strong style="outline: 0px;">PostgreSQL 的上手体验</strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="799" data-imgfileid="100028241" data-ratio="0.9913151364764268" data-type="png" data-w="806" data-width="806" src="https://oscimg.oschina.net/oscnet/b93f20a5-0e01-44bc-97a0-d1addc9ca49b.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">平均水平以上，但谈不上很优秀。PostgreSQL 强大功能的另一面就是上手更有门槛。比如说 Database / Schema / Table 三层以及对应的权限系统，适合大型项目，对小型开发就显得臃肿了。</span></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028242" data-ratio="0.10947368421052632" data-s="300,640" data-type="png" data-w="950" src="https://oscimg.oschina.net/oscnet/c98ae2aa-f829-4205-8b0b-fb214af265b7.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></h1><span id="OSC_h1_6"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><strong style="outline: 0px;">生态和工具</strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="499" data-imgfileid="100028244" data-ratio="0.5802325581395349" data-type="png" data-w="860" data-width="860" src="https://oscimg.oschina.net/oscnet/824110b9-ef61-4c32-876a-0332684230c7.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">这个插件的问题有点狡猾，把 favorite 和 most frequently 并在了一起，结果东道主的 timescaledb 就力压 pg_stat_statements 了🤔。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="555" data-imgfileid="100028243" data-ratio="0.69375" data-type="png" data-w="800" data-width="800" src="https://oscimg.oschina.net/oscnet/f8247ef4-d129-48ed-a4cc-3c28e338a0ae.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">DBeaver 在通用数据库客户端里遥遥领先。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100028245" data-ratio="0.3675925925925926" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/6e69c23e-2d83-4ebb-b659-fc9376670d41.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">pgBouncer 依然是最流行的工具，不用连接池的话，很容易造成连接打满。第二常用的就是可视化查询计划工具 Depesz，这个工具也存在好久了，也是开源的，Bytebase 也在 SQL Editor 中集成了。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="613" data-imgfileid="100028246" data-ratio="0.706221198156682" data-type="png" data-w="868" data-width="868" src="https://oscimg.oschina.net/oscnet/f8dfc64a-fbc1-4842-a091-2d879484363a.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">版本分布情况。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="944" data-imgfileid="100028250" data-ratio="1.1919191919191918" data-type="png" data-w="792" data-width="792" src="https://oscimg.oschina.net/oscnet/74982ce9-c6ca-4c25-866a-314109c0aad0.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">使用上的挑战。果然是把 VACUUM 单独拎出来吊打了。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="1054" data-imgfileid="100028251" data-ratio="1.2031963470319635" data-type="png" data-w="876" data-width="876" src="https://oscimg.oschina.net/oscnet/aa0683c7-95a8-4143-81d3-3b0c3886da09.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">部署的方式，这个图没有太看懂，如果大家都跌了，那应该有人大涨才对？不过当年最早做 Postgres 托管的 Heroku 也快要退出历史舞台了。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="573" data-imgfileid="100028249" data-ratio="0.7234848484848485" data-type="png" data-w="792" data-width="792" src="https://oscimg.oschina.net/oscnet/ff3168f9-d1e4-4d0f-a2b8-98f6e6603aea.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">在 Kubernetes 上部署 PG 的方式，CloudNativePG 和 Helm 并驾齐驱。国内用前者的应该不多。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="784" data-imgfileid="100028248" data-ratio="1.0509383378016086" data-type="png" data-w="746" data-width="746" src="https://oscimg.oschina.net/oscnet/386daa0d-8dbe-4d35-9561-199894922ea3.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">使用的功能点，这些都算是高级功能，也体现了 PostgreSQL 高级能力的实用性。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="862" data-imgfileid="100028247" data-ratio="1.0883838383838385" data-type="png" data-w="792" data-width="792" src="https://oscimg.oschina.net/oscnet/996c4cd7-8946-4f74-8385-d4cc9cef449c.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">JSON 还是很香。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="865" data-imgfileid="100028252" data-ratio="1.1248374512353707" data-type="png" data-w="769" data-width="769" src="https://oscimg.oschina.net/oscnet/d1c9661b-ebb7-4cd3-8e88-2d2ff2f2e967.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">阿里云在全球市场份额和 GCP 比较接近。但这个报告主要面向海外，所以阿里云就相对靠后了。也可以从侧面看出光中国是一个多么巨大的市场。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="616" data-imgfileid="100028256" data-ratio="0.7897435897435897" data-type="png" data-w="780" data-width="780" src="https://oscimg.oschina.net/oscnet/70a24bc6-76f4-45ab-b71c-b6b2184a64a8.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">除了 PG 外使用的其它数据库，也可以侧面反映其他数据库的流行度，和 DB-Engines 排名是有些区别的。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="542" data-imgfileid="100028254" data-ratio="0.5425425425425425" data-type="png" data-w="999" data-width="999" src="https://oscimg.oschina.net/oscnet/a8573963-5970-4b4a-93a9-2617f06a730d.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="554" data-imgfileid="100028255" data-ratio="0.7194805194805195" data-type="png" data-w="770" data-width="770" src="https://oscimg.oschina.net/oscnet/03d8af15-c980-47fe-a5c8-a03f4fb0c3cd.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">PG 实例数据量大小，相当符合正态分布。</span></section><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028253" data-ratio="0.10947368421052632" data-s="300,640" data-type="png" data-w="950" src="https://oscimg.oschina.net/oscnet/8b2a9189-22b1-445a-b57b-d27970f040d3.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></strong></h1><span id="OSC_h1_7"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 20px;"><strong style="outline: 0px;"><span style="outline: 0px;letter-spacing: 0.5px;">社区</span></strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">可以给做社区的同行一些参考。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="630" data-imgfileid="100028257" data-ratio="0.7134767836919592" data-type="png" data-w="883" data-width="883" src="https://oscimg.oschina.net/oscnet/60877cea-77d9-410f-8be6-c67dece7fe15.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100028260" data-ratio="0.45555555555555555" data-s="300,640" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/034de392-ecd8-4ba0-98ae-a0810e7ffddc.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">Postgres Weekly Newsletter 比较有影响力。不过它这次也给报告带了货，所以也会造成偏向性。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="1071" data-imgfileid="100028259" data-ratio="1.3205918618988903" data-type="png" data-w="811" data-width="811" src="https://oscimg.oschina.net/oscnet/1b0a0f17-913a-424f-96eb-77d1f3db4739.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">一些希望社区改进的地方。其中几点笔者也有感触：</span></section><ol start="1" class="list-paddingleft-1" style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);"><li style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;"><p style="margin-bottom: 8px;outline: 0px;text-align: left;line-height: 1.75em;"><span style="outline: 0px;">PG 的官方文档已经很详尽了，不过如果配些示例图的话，会更容易吸收。</span></p></li><li style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;"><p style="margin-bottom: 8px;outline: 0px;text-align: left;line-height: 1.75em;"><span style="outline: 0px;">邮件列表的问答形式比较过时，找帖子，翻帖子真的有点累。</span></p></li><li style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;"><p style="margin-bottom: 24px;outline: 0px;text-align: left;line-height: 1.75em;"><span style="outline: 0px;">需要更多面向应用开发者以及研发流程 DevOps 的内容，而不是仅仅针对 DBA 和数据库内核开发者的内容。</span></p></li></ol><h1 style="margin-right: 8px;margin-bottom: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;"><img class="rich_pages wxw-img" data-imgfileid="100028261" data-ratio="0.10947368421052632" data-s="300,640" data-type="png" data-w="950" src="https://oscimg.oschina.net/oscnet/6e944c0d-405f-487a-8843-286af419526b.png" style="outline: 0px;letter-spacing: 0.578px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></span></h1><span id="OSC_h1_8"></span><h1 style="margin-right: 8px;margin-bottom: 16px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;letter-spacing: 0.5px;font-size: 20px;"><strong style="outline: 0px;">AI</strong></span></h1><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">今年报告里自然不能免俗的会有 AI 问题。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="527" data-imgfileid="100028258" data-ratio="0.6185446009389671" data-type="png" data-w="852" data-width="852" src="https://oscimg.oschina.net/oscnet/18cd5bca-5ace-4986-9b8f-79a414cf4730.png" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">大多数人还是持观望态度。</span></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><img class="rich_pages wxw-img" data-height="745" data-imgfileid="100028262" data-ratio="0.8602771362586605" src="https://oscimg.oschina.net/oscnet/564482fa-4e4d-4a60-a4d8-71e6b5f5996c.png" data-type="png" data-w="866" data-width="866" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></section><section style="margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;">让向量处理和关系型数据处理在同一个数据库是 PG 最大的优势。一专多能，传统艺能。</span></section><hr style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);border-style: solid;border-right-width: 0px;border-bottom-width: 0px;border-left-width: 0px;border-color: rgba(0, 0, 0, 0.1);transform-origin: 0px 0px;transform: scale(1, 0.5);"><p style="margin-top: 16px;margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">就这些啦，这里只选取了部分报告摘要，也建议去阅读原文&nbsp;</span><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;color: rgb(79, 70, 229);">https://www.timescale.com/blog/announcing-the-new-timescale/</span><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">。</span></p><p style="margin-top: 16px;margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><br></span></p><p style="margin-top: 16px;margin-right: 8px;margin-left: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;line-height: 1.75em;"><span style="outline: 0px;font-size: 16px;letter-spacing: 0.5px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;"><strong style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;font-size: 15px;color: rgb(34, 34, 34);text-align: start;text-indent: 36.8px;background-color: rgb(255, 255, 255);"><img class="rich_pages wxw-img" data-backh="331" data-backw="562" data-imgfileid="100028263" data-ratio="0.5881188118811881" data-s="300,640" src="https://oscimg.oschina.net/oscnet/472df27d-7aa5-4400-94e4-c618daac1eed.png" data-type="png" data-w="1010" style="outline: 0px;letter-spacing: 0.544px;color: rgb(51, 51, 51);width: 100%;visibility: visible !important;height: auto;" referrerpolicy="no-referrer"><img class="rich_pages wxw-img" data-backh="262" data-backw="562" data-cropselx1="0" data-cropselx2="578" data-cropsely1="0" data-cropsely2="269" data-imgfileid="100028264" data-ratio="0.46574074074074073" data-s="300,640" src="https://oscimg.oschina.net/oscnet/985ed68d-c3d1-4cef-8cd8-54e0c6bb2f8c.png" data-type="png" data-w="1080" style="outline: 0px;letter-spacing: 0.544px;color: rgb(51, 51, 51);border-radius: 8px;width: 100%;background-size: 16px !important;visibility: visible !important;height: auto;" referrerpolicy="no-referrer"></strong></span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - 开源软件联盟 PostgreSQL 分会（kaiyuanlianmeng）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/postgresqlchina/blog/10322198</guid>
            <link>https://my.oschina.net/postgresqlchina/blog/10322198</link>
            <author>
                <![CDATA[PostgreSQLChina]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8 AOT 与 LLVM 什么关系？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#3c70c6">前言</span></strong></span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">.NET8 的 AOT 为了支持各个平台，比如 MacOS,Linux 等平台，ILC(AOT Compiler) 的目标文件用的是 LLVM 生成的。本篇看下。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">原文:<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485778%26idx%3D1%26sn%3Dc7fce583f2eadab39b626aaf6ca7c6c6%26chksm%3Dc01c44c9f76bcddf7fae3828297699e1252e7b97c1e84b5d2b09502732e9ccb6fd5fa1d69335%26token%3D2009208964%26lang%3Dzh_CN%23rd" rel="nofollow" target="_blank"><u><strong>.NET8 AOT 与 LLVM 什么关系?</strong></u></a></p><p style="color:#4a4a4a; margin-left:0px; margin-right:0px; text-align:center">公众号:jianghuht，欢迎关注</p><p style="color:#4a4a4a; margin-left:0px; margin-right:0px; text-align:center"><u><strong><img alt="" height="430" src="https://oscimg.oschina.net/oscnet/up-736ea9cda29ab0849e37b740d5b255ea7bc.png" width="430" referrerpolicy="no-referrer"></strong></u></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#3c70c6">详述</span></strong></span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span>为了更为细致的让大家了解 LLVM 在 AOT 里面的作用，这里用一个例子演示下。以下以最新版的.NET8.0/windows11 为蓝本演示。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong><span>第一步:</span></strong><span>在 nuget 上面下载一个 ILC 组件,名称:runtime.win-x64.Microsoft.DotNet.ILCompiler</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong>第二步:</strong>找到这个包在你当前电脑的路径，一般为如下，这个路径有个 objwriter.dll:</p><pre><code><span><span style="color:#ca7d37">C</span>:\<span style="color:#ca7d37">Users</span>\<span style="color:#ca7d37">Administrator</span>\<span>.nuget</span>\<span style="color:#ca7d37">packages</span>\<span style="color:#ca7d37">runtime</span><span>.win-x64</span><span>.microsoft</span><span>.dotnet</span><span>.ilcompiler</span>\8<span>.0</span><span>.0</span>\<span style="color:#ca7d37">tools</span></span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong><span>第三步:</span></strong>操作 objwriter.dll</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff">新建一个.NET8 控制枱应用程序，把这个 objwriter.dll 放入到控制枱</span><span style="background-color:#ffffff">bin/x64/debug/net8.0 目录下。</span><span style="background-color:#ffffff">Main 写入如下代码：</span></p><pre><code><span>  [<span style="color:#afafaf">DllImport(<span>"objwriter.dll"</span>)</span>]</span></code><code><span><span><span style="color:#ca7d37">private</span><span style="color:#ca7d37">static</span><span style="color:#ca7d37">extern</span> IntPtr <span style="color:#dd1144">InitObjWriter</span>(<span>[MarshalAs(UnmanagedType.LPUTF8Str</span>)] <span style="color:#ca7d37">string</span> objectFilePath, <span style="color:#ca7d37">string</span> triple</span> = <span style="color:#0e9ce5">null</span>);</span></code><code><span>  [<span style="color:#afafaf">DllImport(<span>"objwriter.dll"</span>)</span>]</span></code><code><span><span><span style="color:#ca7d37">private</span><span style="color:#ca7d37">static</span><span style="color:#ca7d37">extern</span><span style="color:#ca7d37">void</span><span style="color:#dd1144">FinishObjWriter</span>(<span>IntPtr objWriter</span>)</span>;</span></code><code><span>  [<span style="color:#afafaf">DllImport(<span>"objwriter.dll"</span>)</span>]</span></code><code><span><span><span style="color:#ca7d37">private</span><span style="color:#ca7d37">static</span><span style="color:#ca7d37">extern</span><span style="color:#ca7d37">void</span><span style="color:#dd1144">EmitIntValue</span>(<span>IntPtr objWriter, <span style="color:#ca7d37">ulong</span><span style="color:#ca7d37">value</span>, <span style="color:#ca7d37">int</span> size</span>)</span>;</span></code><code><span><span style="color:#ca7d37">private</span> IntPtr _nativeObjectWriter = IntPtr.Zero;</span></code><code><span><span><span style="color:#ca7d37">static</span><span style="color:#ca7d37">void</span><span style="color:#dd1144">Main</span>(<span><span style="color:#ca7d37">string</span>[] args</span>)</span></span></code><code><span>  {</span></code><code><span>      IntPtr objectWriter = InitObjWriter(<span style="color:#dd1144">"Demo.obj"</span>, <span style="color:#dd1144">"x86_64-pc-win32-windows"</span>);</span></code><code><span>      EmitIntValue(objectWriter, <span style="color:#0e9ce5">0x10</span>, <span style="color:#0e9ce5">4</span>);</span></code><code><span>      FinishObjWriter(objectWriter);</span></code><code><span>  }</span></code></pre><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#4a4a4a">objwriter.dll 通过 LLVM_Project 项目构建，应用于.NET8 ILC AOT 里面。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">以上代码运行之后，就会在控制枱的 bin/x64/debug/net8.0 目录下面看到生成的目标文件 Demo.obj。这个就是 ILC 调用 LLVM 生成的当前 Windows 平台 (InitObjWriter 的参数:x86_64-pc-win32-windows 表示的是 Windows 目标文件) 上面的目标文件，此后通过引导程序 BootStrap(关于.NET8 AOT 引导程序参考:<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247484953%26idx%3D1%26sn%3D3d9e15f17fe5ccbfd3f36ff64a0e25c4%26chksm%3Dc01c4b82f76bc294ed18a3db625c379281f61da3e35e84ed68072aed51e92125f416468d3efb%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><u><strong>.Net8 的 AOT 引导程序 BootStrap</strong></u></a><span>) 链接下，即可生成独立的可执行文件。</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">以上就是 LLVM 在.NET8 AOT 里面的简单应用。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#3c70c6">题外话</span></strong></span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">微软从.NET7.0 开始，就有意识的分离.NET 里面的各个耦合度极高的组件。举个例子，比如说在.NET Framework 里面 GC 和 CLR 分离是不可想象的，但是在.NET8.0 里面，GC 不仅和 CLR 分离，JIT 也可以和 CLR 分离。进行独自定制。这些.NET 核心组件通过动态链接库，也即是 DLL 的形式分发出来，可以让开发人员进行自由定制。</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">这里稍微列举下:</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong>1.</strong>ILC 的可移植性目标文件组件:objwriter.dll(本文所述)</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong>2.</strong>分离的可定制 GC 组件:clrgc.dll(参考:<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485315%26idx%3D1%26sn%3Db964e0860d799e3b01cc99e258f10ef6%26chksm%3Dc01c4a18f76bc30e6cb78c731df1c2389e9ced771f710c455bfe9fe45e131a89f0d18ad49e4a%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><u><strong>自定义 GC 垃圾回收</strong></u></a>)</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong>3.</strong><span>分离的可定制 JIT 组件:</span>c<span>lrjit.dll（参考:</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485395%26idx%3D1%26sn%3Db640a5e447083dc7312effe3dc28dfe9%26chksm%3Dc01c4a48f76bc35ecec1f6aa4559d8fcf8686cec2e4d489afe35f1f021cd9a8c8e436fcd5afa%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><u><strong>自定义 JIT 即时编译</strong></u></a><span>）</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong>4.</strong>分离的可定制 CLR 组件:coreclr.dll（参考:目前空白）</p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left"><strong>5.</strong>可自定义的运行时宿主组件<span>:hostfxr.dll(参考:</span><u><strong>自定义</strong></u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247484930%26idx%3D1%26sn%3D3c9e3dc9f97fff2339db202122993991%26chksm%3Dc01c4b99f76bc28fa9cc60ff3e2ee6f32b28e76ba3e9a188bdec8160eba5c3b92a4a198ef6e5%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>宿主组件</span></strong></a><span>)</span></p><p style="color:#4a4a4a; margin-left:0; margin-right:0; text-align:left">以上都可以进行自由定制，你在各个平台上 (MacOS/Linux) 看到的动态链接库 DLL，都是有自定制进行各种平台的自由分发，比如国内外大热的 Risc-V 支持的新平台，比如国内的 Arm64 指令集平台等。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5407571/blog/10322112</guid>
            <link>https://my.oschina.net/u/5407571/blog/10322112</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一个 38 岁程序员，在技术圈自由游曳]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>程超，一个 38 岁的程序员，面对互联网世界的暗流涌动，显得游刃有余。</p><p>最近，他正在忙着研究生毕业答辩，不过其生活节奏仍然非常规律：每天早上六点起床，跑步五到十公里；然后学英语背单词，已经坚持了七百六十多天；接着送孩子上学，再去上班，上班路上看技术文档或是练听力；晚上回去看看书，直到零点。</p><p>从事互联网行业 16 年，程超深耕支付、交易、订单等业务，颇擅长 DevOps、AIOps、基础架构、稳定性建设、高并发等技术。因此，热衷于分享知识的他，在技术圈留下了不少足迹，除了用「小程故事多」的网名发布了诸多的技术博文之外，还主导了《高可用可伸缩微服务架构》一书，并合著有《深入分布式缓存——从原理到实践》，此外还翻译了《Spring5 设计模式》。</p><p>此外程超还被多个技术社区所认可，获得过「腾讯云 TVP」「阿里云 MVP 成员」「云智慧最有价值专家」等称号。</p><p>我们很想知道：在忙碌的工作之外，程超是如何达成这许多成就的；在职业生涯转折点，他的选择是什么；关于写作、出书、翻译，他有哪些心得可以分享；面对 AI 等新技术的到来，他又做了什么。为此，我们采访了程超，看看他如何在技术圈自由游曳。</p><p style="text-align:center"><img height="624" src="https://oscimg.oschina.net/oscnet/up-0d2b69c27c7ab1e6eedcc1ae4168e55b94e.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:center"><strong>程超，高级</strong><strong>研发管理</strong><strong>专家</strong></p><span id="OSC_h4_1"></span><h4>一、能否介绍一下您当前的工作方向？</h4><p>主要有两个：一是 DevOps 平台建设，二是 AI 工程建设。之前我一直负责公司的稳定性建设，以及 DevOps、AIOps 的体系建设，今年年初开始研究 AI 相关，建设公司的 AI 工程，目前已经上线一个平台支持公司的智能客服业务。</p><span id="OSC_h4_2"></span><h4>二、从事互联网行业 16 年，最引以为傲的成就是什么？</h4><p>职业生涯挺长，有很多收获与感悟，总结下来：</p><p>在公司层面：</p><ul><li><p>在目前公司主导了 DevOps 和 AiOps 相关的工作，推动了多云架构的设计与研发，同时也负责团队管理。你的工作在公司内部得到了认可，获得了 2022 年度最佳领导奖和最佳技术团队奖。</p></li><li><p>松果出行阶段，负责了多个业务线的核心工作，尤其是订单中台和用户中心的设计和架构工作。通过性能优化和微服务体系建设，你成功将服务性能从 500qps 提升到 3000qps。此外我设计和开发了多个关键系统，如订单重试中心、超时控制中心等。</p></li><li><p>在易宝支付，我主要聚焦在支付平台和实时统计方面。在优化和重构支付平台的过程中，你将性能从 50TPS 提升到 200TPS，并且实现了可扩展性，这为公司带来了巨大的收益。同时获得了公司的年度"工匠提名奖"和"开放分享奖"。</p></li></ul><p>在个人层面：</p><p>负责书籍的撰写和翻译工作，包括《高可用可伸缩微服务架构》的主导、合著书籍《深入分布式缓存——从原理到实践》以及翻译《Spring5 设计模式》。此外我还担任过极客时间的讲师，贡献过每日一课等视频课程。</p><span id="OSC_h4_3"></span><h4>三、您在过去的工作中，遇到最具挑战性的项目是什么？ 对您而言，在该项目中的最大收获是什么？</h4><p>最具挑战的项目是支付交易平台，不仅需要平台提供高并发能力，同时也要保障系统的资金安全，与钱有关的项目往往都需要特别谨慎。</p><p>最大的收获是对自己的技术体系做了重新梳理，做项目要三思而后行，稳定性保障的多种技术方案和手段。</p><span id="OSC_h4_4"></span><h4>四、能否跟我们聊一下一路以来您的职业发展路径？在技术方向这块经历了什么样的变化？</h4><p>个人坚持的理念是一专多能。首先是要专，从毕业到现在，我一直坚持 Java 技术方向，然而 Java 发展很快，从我刚接触的 Jdk1.5 一直发展到今天的 Java21，已经经历了非常多的版本，而我一直在坚持学习，虽然到目前还谈不上极为精通，但至少已经积累了大量工作经验。</p><p>其次是多能， 目前在市面上除了 Java 这个老牌开发语言，还有非常多其他类语言，比如 Go、Python、Rust 等等，每种语言的出现一定有它的优势和使用场景，因此需要根据项目情况、使用场景，适当选择最合适的语言来对项目进行整体提高。</p><span id="OSC_h4_5"></span><h4>五、在技术方向抉择的过程中，您是主动选择还是被动接受的？</h4><p>从心理学的角度来讲，技术方向的主动选择会给人带来更多的自主感觉，主动选择自己熟悉的技术方向，更容易产生成就感，而成就感会带给人以责任感，也将伴随的是积极的态度与行动。</p><p>当然这个世界本来就是多样性，有主动的技术选择，就一定会存在被动的情况，当在某一场景下，自己无法把握技术方向，而只能变为被动选择的时候，应该选择接受，从整体上分析现状，改变自己的格局和视野，变化角度来看问题，积极调整心态，化被动为主动。</p><span id="OSC_h4_6"></span><h4>六、您是什么时候开始有自己明确的职业规划的？当工作方向跟职业规划发生冲突时，您是如何选择的？</h4><p>我是工作到第五年的时候，开始认真思考自己的职业规则。</p><p>有一个网上看到的冷笑话。很多程序员每天都在写代码，每天都很忙，当面试官问他，你的职业规划是什么？程序员回答说：「没有「。那么，如果你必须选择一个角色，你会选择什么？例如，技术总监。程序员回答说：「CEO」......</p><p>很多程序员在刚毕业工作的时候，往往前几年都是想多学习技术，多积累经验，当工作到一定时间，就会遇到职业瓶颈，这就需要认真思考自己未来应该如何规划，这往往也是程序员未来选择的分水岭。是一直做技术，做架构师、高级架构师、首席架构师，还是从事技术管理，做经理、总监、CTO ？还是有可能会转型，做产品、销前，或是创业？是要一直在一个领域深耕，还是会变换方向和领域，做个多面手？这里面应该如何选择呢？我们了解自己吗？自己是内向，还是外向，喜欢沟通，还是喜欢安静，这都是决定未来方向的衡量指标。</p><p>当工作方向与职业规划冲突的时候，不要轻易立刻下决定，要先思考：</p><ul><li><p>方向</p></li></ul><p>假如你自己的职业规划目标是做架构师，那么现在公司决定让人做经理，那么管理性质的岗位就与架构师的目标不匹配，按常理来说应该止损，重新选择架构师的技术方向。但是重新选择的前提是，你之前制定的规划是合理的。为什么这样说的呢？我遇到一些朋友，他们也有自己的职业规划，结果深入沟通后才现，他们的职业规划并不十分合理，既不符合自身的优势或性格，也不符合现实情况。</p><ul><li><p>平台</p></li></ul><p>其实方向不能抛开平台而存在，我们要考虑目前所处的平台如何。这里会涉及到公司与部门，假如公司走下坡路了，公司也没有明确的发展方向，无法让你在新的工作方向上提升自己的竞争力，那么当工作方向与规划冲突的时候，那这样的平台有可能会消耗自己的时间。</p><span id="OSC_h4_7"></span><h4>七、您先后在京东、360 和易宝支付等公司工作过。想知道在不同公司，您的工作方式和风格有何不同？</h4><p>其实每家公司都有自己的特点与优点，但可以根据所处的行业，来匹配不同的工作方式。</p><p><strong>京东：</strong> 因为公司规模非常大和人员非常多，所以沟通和协作可能需要更多的层级，并需要更多的协调工作来确保项目顺利推进。另外作为一个大型电商平台，京东可能更注重创新和用户体验，可能更倾向于尝试新技术和创新解决方案。</p><p><strong>360：</strong> 安全领域可能更注重团队间的严格合规和保密性，可能有更多的审查和验证程序，以确保代码的安全性和质量，注重稳定性和已有的可靠技术。</p><p><strong>易宝支付：</strong> 在金融领域，可能更加注重细节和合规性，以及资金安全性。可能有更严格的流程和规范，以确保系统的稳定性和安全性，做事风格是三思而后行，要充分考虑，认真考虑各种可能存在的情况，要能给客户带来稳定性和可靠性的体验。</p><span id="OSC_h4_8"></span><h4>八、不同公司对您的职业发展有何影响？在不同公司，您学到的最宝贵的经验是什么？</h4><ul><li><p>在京东更多的是学习到了电商与互联网经验，学到了高并发场景的应用，收获了很多技术的最佳实践，以及在大公司与不同部门如何高效协作。</p></li><li><p>在易宝支付我收获了如何建设稳定性的平台，如何站在用户角度去思考，如何带领一支大团队来高效协同，共同完成目标。此外公司还为我培训了大量管理方面的课程，让我的管理经验从野路子变成具有方法论的系统性实践。</p></li><li><p>在现在公司，收获的更多是建立产品化思维，让我的想法不再仅是基于技术思维，要以产品角度来思考，让自己做的产品如何得到更好的用户体验，如何更快更高效地响应用户的需求与问题。</p></li></ul><p>可以看到我的职业发展是一条从底层逐步向上层的过程，从底层技术思维到管理思维，再到产品思维。</p><span id="OSC_h4_9"></span><h4>九、互联网技术变化相当之快，您是如何应对挑战和变化的？</h4><ul><li><p>需要持续学习，积极参加各种培训、讲座、研讨会等活动，学习最新的科技发展动态和应用技巧。</p></li><li><p>培养团队协作能力，团队合作可以集思广益，共同面对挑战，解决难题。</p></li><li><p>多关注信息来源，不断涌现的新技术和信息意味着需要更多的时间和精力去跟上这些变化。</p></li><li><p>接受改变，应该以积极的心态去拥抱和适应，不能去抵制他们。</p></li></ul><span id="OSC_h4_10"></span><h4>十、面对技术的快速变化，跟十年前的自己相比，心态有什么不一样吗？</h4><p>十年前，自己更愿意在熟悉的领域深耕，如今自己心态更开放，更愿意接触不同的技术和方向，这中间有职位的变化导致，也有经过十年的技术沉淀后，技术视野需要变得宽广，不管是哪个方式，我始终持续学习。</p><span id="OSC_h4_11"></span><h4>十一、您当前关注互联网行业的哪些热点领域？将如何平衡个人发展和行业发展的关系？</h4><p>当前最热的领域无非就是 AIGC 了，我一直在持续关注，不过幸运的是，我目前正在做这一相关的工作。</p><p>对于许多人来说，个人发展和职业发展是两个重要的方面，但却经常会出现平衡问题。有时候，我们会专注于一方面而忽视另一方面。如果我们只关注行业发展而不注重个人发展，我们可能会陷入职业倦怠。反之，如果我们仅关注个人发展而不注重行业发展，我们可能会错过许多职业机会。</p><p>其实我认为这两者完全可以做到相辅相成，行业发展代表的是趋势，个人发展只能代表自己某一场景下制定的目标。个人发展只是能过去发展的梳理，然后对未来的展望，当新的行业发展到来时，这将会对个人发展带来冲击和变动，我们将接受这一切，如果认为新的行业发展带来的是机遇和机会，那么可以适当调整个人的发展，将新行业发展与个人发展进行适当结合与融入，让个人发展变得与时俱进，始终保持竞争力才是根本。</p><span id="OSC_h4_12"></span><h4>十二、DevOps、AIOps 的概念近几年在国内颇为盛行，您是什么时候开始接触这方面的？有什么机缘巧合吗？</h4><p>我是在 2014 开始正式接触并产生浓厚兴趣的，但当时我在负责业务线的部门，发现业务团队与运维团队协作并不是非常顺畅，存在着业务开发端，测试端和运维端的信息鸿沟，所以我想推动解决这个事，发现 DevOps 的核心更是解决这三者的关系的，打通软件交付过程中的 IT 工具链，使各个团队减少时间损耗，更高效地协作。于是我从国内外网站上看了几百篇相关文章，在社区里与相关朋友讨论 DevOps 的推动与发展，与公司高层沟通我的想法，与运维团队紧密沟通配合，开始推动 DevOps 在公司的落地。</p><span id="OSC_h4_13"></span><h4>十三、从了解 DevOps、AIOps 等概念到实际落地，您经历了怎样的一个过程，能够否结合案例聊一聊？实践 DevOps、AIOps 其中的难点是什么？</h4><p>先谈谈其中的难点。</p><p><strong>DevOps：</strong></p><p>文化变革： DevOps 不仅仅是工具和流程，更是一种文化变革。最大的挑战之一是将团队从传统的瀑布式开发模式转变为迭代、自动化和协作的方式。这需要时间和领导层的支持。</p><p>自动化： 自动化是 DevOps 的核心，但建立自动化流程需要投入大量时间和资源。自动化测试、部署和监控等方面的工具选择和集成是挑战之一。</p><p>工具链整合： 在 DevOps 中，使用多种工具来实现自动化流程，但这些工具的整合和互操作性可能会带来复杂性和困难。</p><p>团队沟通与协作： 从传统的团队结构转变为跨职能团队需要更多的沟通和协作。团队成员可能需要适应新的工作方式和角色。</p><p>文化变革和接受度： 引入 DevOps 文化可能会遇到团队成员的抵制或不适应。确保他们理解变革的重要性并逐步接受需要耐心和教育。</p><p>持续学习与改进： DevOps 是一个持续改进的过程。持续学习新技术和最佳实践，以及不断改进工作流程是非常重要的。</p><p><strong>AIOps</strong><strong>：</strong></p><p>数据质量和整合： AIOps 依赖于大量数据来进行分析和预测。确保数据的质量、完整性以及不同数据源的整合是挑战之一。</p><p>算法和模型选择： 选择合适的机器学习算法和模型来应对特定的运维挑战需要一定的专业知识。在实践中，不同情况可能需要不同的算法，因此选择和调整模型是一个挑战。</p><p>解释性和透明性： 对于许多业务场景来说，AI 模型的决策必须可解释和透明。这意味着需要找到平衡，确保模型的预测不仅仅是准确的，而且还能解释其背后的原因。</p><p>逐步采用： 对于一些组织来说，接受和信任 AI 在运维中的作用可能需要时间。逐步展示 AI 在提高效率和准确性方面的成果是至关重要的。</p><p>团队技能提升： 引入 AIOps 可能需要团队成员具备一定的机器学习和数据分析知识。这可能需要培训和技能提升计划。</p><p>监管和合规性考虑： 在某些行业，AI 的使用可能受到监管和合规性要求的限制。确保 AI 系统符合相关法规是挑战之一。</p><p>我目前公司正是经历了这一阵痛，在前期依然是依靠传统运维的方式，导致生产和上线效率极低，因为变更导致的故障频出。而 DevOps 平台推出后，从研发生产域（需求管理、迭代管理、开发和测试），持续交付与布署（研发资源、发布管理、运行时管理、分析大盘、系统管理等），到产线运行域（aPaaS、bPaaS、tPaaS、dPaaS 以及多云管理平台、CMDB)， SRE 域（智能分析与告警平台、排班中心、统一数据采集平台、技术中间件统一管理平台）等多领域进行统一自助管理，实现一站式全生命周期管理。</p><span id="OSC_h4_14"></span><h4>十四、大模型技术的发展，给 AIOps 带来了什么样的影响？ 面对大模型对 AIOps 技术带来的巨大影响，身处其中，您的感受是什么？</h4><p>主要有四个方面的影响：</p><ul><li><p>智能决策支持： 大模型技术能够处理更多更复杂的数据，使 AIOps 系统能够提供更智能的决策支持。</p></li><li><p>异常检测和预测能力： 大模型能够提供更准确和高效的异常检测和预测。通过分析历史数据和实时流数据，AIOps 系统可以更好地识别潜在的故障和异常模式，甚至在问题发生之前预测到可能出现的问题。</p></li><li><p>自动化运维： 借助大模型技术，AIOps 系统可以更好地实现自动化运维。这意味着系统能够自主识别问题并尝试自动修复，减少对人工干预的需求，提高运维效率。</p></li><li><p>精细化的问题定位： 有助于提供更精准的问题定位。通过对复杂数据的分析，AIOps 系统可以更准确地定位问题所在，提供更具针对性的解决方案。</p></li></ul><p>大模型技术对 AIOps 的影响是革命性的。对我而言，身处这个变革中让我感到兴奋和充满挑战。这种变革为 AIOps 注入了更多可能性，让我们能够更全面、更智能地处理运维问题。这种感受就像站在技术的前沿，目睹着未来的可能性一样。同时，也带来了新的学习和适应等方面的挑战，但这也是促使自己不断进步和学习的机会。</p><span id="OSC_h4_15"></span><h4>十五、您先后参写了两本《高可用可伸缩微服务架构》、《深入分布式缓存》著作，又翻译《Spring5 设计模式》一书，想问您写作/翻译的初衷和动机是什么？</h4><p>我之前在 CSDN 上写了二百多篇技术博客，其中包括微服务相关的，也包括缓存相关的，当时写作的初衷就是想把自己积累下来的博客文章能够以书籍的方式做个系统性梳理，这样不仅便于知识的系统化，同时也能更好地和读者进行交流。</p><p>而翻译的想法来源于我持续的英语学习，在翻译《Spring5 设计模式》书之前，我已经持续学习英语五年，深知学习英语的重要性，这是打开与世界交流的窗口，所以正好有朋友约我翻译这本书，所以我想做尝试，也是对自己多年英语学习的一个检验。</p><span id="OSC_h4_16"></span><h4>十六、这些创作给您的工作和生活有带来了什么变化？</h4><p>首先这些创作本质上是会给自己带来技术影响力的提升，增加更多与同行交流的的机会，其次这也是一种深度学习和整理知识的过程，需要将复杂的技术概念转化为易于理解的内容，这种能力可以让我更好地将技术知识分享给其他人，同时也加深了自己对技术领域的理解。</p><span id="OSC_h4_17"></span><h4>十七、您在写作过程中的创作经验和心得可以分享吗？</h4><p>写书本身是一件持续性的体力与脑力劳动，需要对自己的主题做出针对性的内容建设，同时也会占用大量的业余时间来写，我记得当时我每天早上六点起床开始写，写到八点然后赶快去上班，晚上下班回来经常写到零点左右，而且周末也会减少陪伴家人的时间。当然家人在这个过程中也给与我很大的支持和鼓励。</p><p>写作的过程往往是漫长的，很多时候遇到一些写作瓶颈后容易产生放弃的情绪，遇到这种情况，首先想到的一定是正向能量的输入，就是坚持，还有与出版社编辑或是朋友进行相关沟通，找到解决问题的办法，不能轻言放弃。</p><p><strong>下面聊一下写书的过程：</strong></p><ul><li><p>首先要考虑书籍的选题，如何确定选题，是选一个稀缺的书籍题目，还是在众多重复的主题之间想一个标新立异的。</p></li><li><p>第二要考虑受众群体，其实越偏入门的书，越容易产生销售，越有深度的书，受众群体的层级就越高，写作难度也就越大。</p></li><li><p>第三就是写作资料的收集，我们是否之前已经积累了大量与主题相关的材料，这点挺重要的。这决定你的写作速度，如果之前从来没有收集和创作过与主题相关的材料，那写作过程将是漫长的。</p></li><li><p>第四就是要充分考虑写作大纲，大纲是书籍的灵魂，大纲的成功与否，将在一定程度上决定书籍的销量是否成功。</p></li><li><p>第五是写作计划，什么时候开始写？什么时候写完？每个月的进度是多少？每个星期的进度要多少？每天都写多少？要做好统筹规划。</p></li><li><p>第六就是真正写作了，在写作的过程中，你的自律能力会不断地提高，让你感觉到了一种机械的状态，而这种状态，会让你忘记掉时间，这就是心流。而自律依赖于目标，依赖于你的欲望。自律刚开始会打破你原有的习惯，会让你感觉是一件痛苦的事，但坚持一段时间后，就觉得，这其实没什么。</p></li><li><p>第七是写作的时候，要考虑借助哪些工具。有些出版社采用的是在线 markdown，有一些出版社则接收的是 Word。所以，在你采用工具之前，先了解一下最后的格式。而我建议使用可以分布式协作的版本管理平台，诸如于 GitHub 或者云共享平台等。这样可以高效地进行协同。</p></li><li><p>第八是要考虑，这本书是一个人写，还是多个人写，一个人写就是进度会慢，但更加聚焦，进度自己能把控。多人写作的话就需要团队管理能力，每个人的情况不一样，对于知识的掌握情况也不一样，他们目前的忙闲程度也不一样，如何更好地管控每个人的进度，就需要与大家一起讨论，制定每周例会沟通进度与遇到的问题，大家一起想办法解决，而不至于让其个作者太过落后，影响整体书籍进度的编写。</p></li></ul><span id="OSC_h4_18"></span><h4>十八、听说您目前正在写一本稳定性建设相关的书，能否跟我们聊一聊这本书？为什么会选择这一方向？当前进展如何？</h4><p>目前确实是在写一本关于稳定性建设的书，原因就是想把多年积累下来的经验做个总结分享给大家，这本书的构想囊括了从稳定性建设的总论到技术组件的建设，每个章节都涵盖了不同方面的主题，例如微服务带来的挑战、故障发现与定位、故障的快速解决，分布式事务、服务限流和熔断等等。为读者提供了系统稳定性建设的全面视角，从概念到实践都有所涉及。每章都有明确的目标，介绍了相关技术领域的知识点，并提供了实际场景下的解决方案。</p><p>当前这本书已经完成三分之一，相信明年上半年会写完出版。</p><span id="OSC_h4_19"></span><h4>十九、您获得过「腾讯云 TVP」「阿里云 MVP」「云智慧最有价值专家」等称号，能否结合自身案例谈一下，社区对个人成长和行业发展的重要性？</h4><p>以我参与的，腾讯云 TVP 团队倾力打造的 TVP 第六期吐槽大会为例，由 6 位，腾讯云 TVP 专家与 Cloud Studio 产品及技术掌舵人强强碰撞，直面产品问题，共同为 Cloud Studio 产品指明提升方向，为 AI 时代云端 IDE 的未来发展探索更多可能。</p><p>技术的发展少不了 issue 区的反馈，产品的进步免不了用户的吐槽。腾讯云将产品使用开放出来，倾听业界专家与用户心声，持续打磨升级技术和产品能力，为用户提供更极致的产品体验。个人的成长也能够通过与社区专家的多次碰撞得到极大的提高与视野的开阔。</p><span id="OSC_h4_20"></span><h4>二十、您对个人未来发展有何期待？</h4><p>目前正在从事 AIGC 相关的研究和研发，是我的兴趣点，也希望未来能够在这方面不断深耕与发展。</p><div>
  &nbsp; 
</div></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10322167</guid>
            <link>https://my.oschina.net/u/3859945/blog/10322167</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Debian 将停止支持 i386 架构]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Debian GNU/Linux 团队在最近的 DebConf 会议上<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.debian.org%2Fdebian-devel-announce%2F1997%2F12%2Fthreads.html" target="_blank">决定</a></u>，<strong>其 Linux 内核、Debian 安装器和 Debian 镜像团队未来将不再支持 i386 架构</strong>。这意味着用户需要考虑将系统迁移到更现代的架构，以确保系统的长期支持和兼容性。</p><blockquote><p>i386 架构是英特尔的 32 位微处理器，最初被称为 80386，后来更名为 i386。它是 x86 架构的一部分，是早期个人电脑和工作站的中央处理单元（CPU）。i386 架构具有 32 位数据宽度和 32 位地址宽度，支持实模式、保护模式和虚拟模式。</p><p>虽然 i386 架构已经过时，但它对后来的 x86 处理器设计产生了深远影响。i386 的后继产品包括 i486 和 P5 Pentium 系列处理器，这些处理器都是基于 i386 设计的后代产品。</p></blockquote><p>此后用户可以<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FDebian-Plans-Cease-i386" target="_blank">通过两种方式</a></u>来运行 i386：</p><ul><li>作为 amd64 系统上的多架构选项</li><li>作为其他架构系统上的 i386 chroot</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1aa45d2c70d5a540253652db272c69ff530.png" referrerpolicy="no-referrer"></p><p>Debian 并不打算像 Ubuntu 那样将 i386 作为部分架构，arch:any 仍将包含 i386，因此一切都将默认构建。希望放弃 i386 支持的维护者可以在与软件包的反向（构建）依赖关系协调后放弃 i386 支持，就像放弃对其他架构的支持一样。Debian 方面指出，并不反对在出现这些变更时对基线进行修改。</p><p>考虑到其他 Linux 发行版多年来一直在放弃 i386，一些 Linux 发行版甚至提高了它们的 x86-64 微架构基线，看到 Debian 也最终也决定停止支持 i386，尤其是在 Debian 13 大约两年后发布之前，这并不太令人惊讶。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 02:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271507/debian-plans-cease-i386</guid>
            <link>https://www.oschina.net/news/271507/debian-plans-cease-i386</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[字节跳动被 OpenAI 「封号」事件始末]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 16 日，The Verge 根据获得的内部文件<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2F2023%2F12%2F15%2F24003151%2Fbytedance-china-openai-microsoft-competitor-llm" target="_blank">报道称</a></u>，字节跳动曾秘密使用 OpenAI 的技术来开发自己的大语言模型，在代号为 Project Seed 的项目各阶段，都使用了 Azure 上的 OpenAI API 进行模型的训练和评估，<strong>并且频繁触及 API 的最大限额</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-cfbc41a7285880aacc51983647d94705836.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2F2023%2F12%2F15%2F24003151%2Fbytedance-china-openai-microsoft-competitor-llm" target="_blank">https://www.theverge.com/2023/12/15/24003151/bytedance-china-openai-microsoft-competitor-llm</a></u></em></p></blockquote><p>报道还称，相关员工知悉这种做法违反 OpenAI 使用政策，并在内部 Lark 上的对话中提及了「数据脱敏」等说法。但几个月前，字节命令团队在「模型开发的任何阶段」停止使用 GPT 生成的文本。同期，字节的「豆包」服务在国内获批并上线。据称，字节的内部目标是年底达到 GPT-3.5 的水平，明年中达到 GPT-4 的水平。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2998d77fbdf3ed444a1ad273512c149fd5d.png" referrerpolicy="no-referrer"></p><p>该报道发出后，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theverge.com%2F2023%2F12%2F15%2F24003542%2Fopenai-suspends-bytedances-account-after-it-used-gpt-to-train-its-own-ai-model" target="_blank">OpenAI 声明称</a></u>，字节的 API 用量很少，但已将其账户暂停使用并做进一步调查。如发现违反使用政策，将要求纠正或关停账户。微软在声明中重述了 Azure OpenAI 服务的政策，但未对报道事实或后续措施置评。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e9398156152491a1ed3203047b0cf781449.png" referrerpolicy="no-referrer"></p><blockquote><p>OpenAI 发言人 Niko Felix 确认字节跳动的账户已被暂停，并说道：「所有 API 客户都必须遵守我们的使用政策，以确保我们的技术得到良好利用。虽然字节跳动对我们 API 的使用很少，但我们在进一步调查期间已暂停了他们的帐户。如果我们发现他们的使用不遵守这些政策，我们将要求他们进行必要的更改或终止其帐户。」</p></blockquote><p>就此，字节国外发言人于 16 日对 The Verge 表示，GPT 生成的数据在 Project Seed 项目开发的早期就被用于注释模型，并在今年年中左右从字节跳动的训练数据中删除。GPT 仅在中国以外市场的产品和功能中使用，豆包则是基于自行开发的模型，且仅在中国可用。</p><p>字节相关负责人则于 17 日回应媒体称，<strong>仅在年初有部分工程师将 OpenAI 服务用于较小模型的实验性项目研究</strong>；随着公司在 4 月引入 GPT API 调用规范检查，这种做法已经停止；9 月，内部又进行了一轮检查并采取进一步规范措施；在未来几天里会再次全面检查，以确保严格遵守相关服务的使用条款。</p><p>对于 OpenAI 禁止用其服务训练竞争模型的政策，历来存在不同看法。支持的观点认为，OpenAI 为训练模型做了大量前期投入，借助其服务「抄近道」是不正当的。反对的观点则认为，OpenAI 的训练过程得益于当时对 AI 训练无戒备的外部环境，在其之后的模型已不再能轻易获得到同样规模的训练数据，阻止其他公司调用其模型相当于建立事实上的垄断。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 18 Dec 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271501/bytedance-china-openai-microsoft-competitor-llm</guid>
            <link>https://www.oschina.net/news/271501/bytedance-china-openai-microsoft-competitor-llm</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[12.23 源创会·上海站，聊聊 LLM 基础设施]]>
            </title>
            <description>
                <![CDATA[12.23 源创会·上海站，聊聊 LLM 基础设施]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 16:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/event/2331502</guid>
            <link>https://www.oschina.net/event/2331502</link>
        </item>
        <item>
            <title>
                <![CDATA[Chrome 测试限制跨站点跟踪功能，以逐步淘汰第三方 Cookie]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌 Chrome 浏览器正在测试 Tracking Protection，一项可限制<span style="background-color:#ffffff">跨站点跟踪的新功能</span>。</span></p><p><span style="color:#000000">这项新功能是谷歌"</span><span style="background-color:#ffffff; color:#202124">Privacy Sandbox</span><span style="color:#000000">"计划的一部分，该计划旨在以负责任的方式在 2024 年下半年逐步淘汰第三方 cookie，其中包括为网站创建新的工具来实现基本功能，并给予开发人员适应的时间。</span></p><p><span style="color:#000000">Tracking Protection&nbsp;<span style="background-color:#ffffff">的引入将首先从一小部分 Chrome 用户开始，公告透露，</span>他们将于 2024 年 1 月 4 日开始测试 Tracking Protection 功能，面向全球 1% 的 Chrome 浏览器用户推出。</span></p><p><span style="color:#000000">近三十年来，第三方 cookie 一直是网络的基本组成部分。它们可用于跟踪网站活动，但网站同时也在使用它们来支持一系列在线体验，例如帮助用户登录或展示相关广告。</span></p><blockquote><p><span style="color:#000000">「通过 Privacy Sandbox，我们正在采取负责任的方式逐步淘汰 Chrome 中的第三方 Cookie。我们为网站构建了新工具，支持关键用例，并为开发人员提供了过渡时间。我们将从一小部分 Chrome 用户开始引入 Tracking Protection，以便开发者可以测试他们对没有第三方 Cookie 的网络的准备情况。」</span></p></blockquote><p>参与&nbsp;<span style="color:#000000">Tracking Protection 功能试用的用户将随机抽取。被选中的用户在</span><span style="background-color:#ffffff; color:#202124">打开 Chrome 浏览器时，会收到相关通知。启用该功能后，用户在浏览网页时，默认情况下第三方 cookie 将受到限制，从而限制在不同网站上跟踪的能力。</span></p><p><span style="background-color:#ffffff; color:#202124"><img alt="" height="344" src="https://oscimg.oschina.net/oscnet/up-57f1c84f1b3c261331013a59a537fd1aae8.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#202124">如果某个网站在没有第三方 cookie 的情况下无法运行，而 Chrome 浏览器又发现用户遇到了该问题（比如进行了多次页面刷新），就会在地址栏右侧的眼睛图标上提示用户暂时重新启用该网站的第三方 cookie。</span></p><p><span style="background-color:#ffffff; color:#202124"><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-7dfa96f75c4d4ba43aa7ade9fd6ab653d77.gif" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">此前，谷歌方面已经发布一系列 Privacy Sandbox 更新。 譬如 8 月推出了 Project Flight，该项目包含一系列示例应用程序，共同展示了 Privacy Sandbox API 在真实用户体验中的实际应用。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Fproducts%2Fchrome%2Fprivacy-sandbox-tracking-protection%2F" target="_blank">查看官方博客</a>。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/204434/google-delays-third-party-cookies" target="_blank">2022、2023 再到 2024，谷歌再次推迟 Cookies 淘汰时间</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 04:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271417/google-chrome-tracking-protection</guid>
            <link>https://www.oschina.net/news/271417/google-chrome-tracking-protection</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ONF 解散，将所有业务转移到 Linux 基金会]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Open Networking Foundation (ONF) <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Fonf-merges-market-leading-portfolio-of-networking-projects-into-linux-foundation" target="_blank">宣布</a>，其涵盖接入、边缘和云解决方案的领先开源网络项目组合将毕业成为 Linux 基金会下的独立项目。「此举为三个主要项目领域（Broadband，Aether 和 P4）创造了独立的、由社区领导的治理，并为项目的广泛协作和采用奠定了基础。」</p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-7377a8aba31c8b7c4d29de527f9310b8382.webp" width="500" referrerpolicy="no-referrer"></p><p>由于此次合并，ONF 将解散，将所有业务转移到 Linux 基金会。Linux 基金会将创建三个新的项目指导基金，以支持技术项目的工作，包括：</p><ul><li>LF Broadband Directed Fund - 支持一系列改变宽带网络和被动光纤网络（Passive Optical Network，PON）行业的项目。该组合包括用于构建开放宽带网络的 SEBA 参考设计和用于虚拟化多厂商 PON 系统的 VOLTHA 开源项目。这些项目已在德国电信、Jio、Türk Telekom 等世界各地部署。</li><li>Aether Directed Fund - 支持一系列 5G 移动网络项目，包括 Aether（私有 5G 和边缘计算）、SD-Core（开放 5G 移动核心）和 SD-RAN（开放 RAN）。电信、商业和研究部署依赖于这些项目，并且刚刚获得了 200 万美元的美国政府研究拨款，以推动 5G 网络的节能和可持续性。</li><li>P4 Directed Fund - 支持一系列工作，实现网络数据平面的可编程性，包括 P4 体系结构、语言、API、应用和平台。其中包括可编程网络 Fabric 的开源编译器和堆栈实现（SD-Fabric、Stratum），在从云到数据中心和运营商边缘网络（如 Comcast、Google、SKT、腾讯和巴西的空中交通管制系统）的各种部署中。</li></ul><p>公告称，ONF 与 LF 的合并反映了项目治理的变化，但保留了基于社区合作的技术项目的演进过程，以适应市场需求的变化。</p><p>ONF 现有的技术指导团队<span style="color:#000000">将继续指导技术工作</span>。但成立了新的管理委员会，以领导每个新指导基金，使社区完全拥有项目的方向和 ONF 为指导基金提供的约 500 万美元资金的应用权。这些资金将用于有选择地为项目提供工程人员的支持。</p><p>&nbsp;详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Fonf-merges-market-leading-portfolio-of-networking-projects-into-linux-foundation" target="_blank">查看官方公告</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 03:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271412/onf-linux-foundation</guid>
            <link>https://www.oschina.net/news/271412/onf-linux-foundation</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[HTTPie Desktop —— 跨平台 API 测试客户端]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>HTTPie for Web &amp; Desktop，跨平台 API 测试客户端，轻松测试 REST、GraphQL 和 HTTP API。目前已发布了适用于 Mac、Windows 和 Linux 的 HTTPie for Desktop 版本。初次安装后，应用程序会持续自动更新。</p><p><strong>特点：</strong></p><ul style="margin-left:0; margin-right:0"><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>与 API 轻松交互</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>利用人工智能辅助工作的力量</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>在空间、集合和选项卡中组织您的工作</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>使用变量和环境参数化请求</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>通过自动保存和实时同步跨设备工作</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>构建并预览请求而不发送请求</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:rgb(209 209 207/var(--tw-text-opacity))"><span><span><span><span>无需帐户即可离线使用该应用程序</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></li></ul><p><img alt="" height="307" src="https://static.oschina.net/uploads/space/2023/1009/155957_SR87_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 03:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/httpie-desktop</guid>
            <link>https://www.oschina.net/p/httpie-desktop</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 基于 eBPF 的 Linux 审计观测工具 safeguard]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-safeguard-linux-security-audit-control-and-behavior-analysis-tools-based-on-krsiebpflsm" class="anchor" href="https://gitee.com/openeuler/safeguard#safeguard-linux-security-audit-control-and-behavior-analysis-tools-based-on-krsiebpflsm"></a>safeguard: Linux security audit, control, and behavior analysis tools based on KRSI(eBPF+LSM)</h1><p>针对操作系统、内核安全，safeguard 是一个基于 eBPF 的 Linux 审计观测工具，可以实现安全操作的拦截及审计记录。项目采用 libbpfgo 库，使用 go 语言实现顶层控制</p><h1><a id="user-content-特性" class="anchor" href="https://gitee.com/openeuler/safeguard#%E7%89%B9%E6%80%A7"></a>特性</h1><ul><li>审计：日志记录配置范围内的行为</li><li>控制：针对文件，进程，网络的安全访问控制</li><li>行为分析：收集信息，进行资源，热点，异常等分析</li><li>主机管理：从安全角度自动化构建细粒度资产信息</li><li>风险管理：精准发现内部风险，快速定位问题并有效解决安全风险</li><li>入侵检测：提供多锚点的检测能力，能够实时、准确的感知入侵事件，发现失陷主机，并提供对入侵事件的响应手段。</li></ul><p><img src="https://gitee.com/openeuler/safeguard/raw/master/docs/architecture.png" alt="architecture" referrerpolicy="no-referrer"></p><h1><a id="user-content-编译" class="anchor" href="https://gitee.com/openeuler/safeguard#%E7%BC%96%E8%AF%91"></a>编译</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>git clone <span class="nt">--recursive</span> https://gitee.com/openeuler/safeguard.git <span class="o">&amp;&amp;</span><span class="nb">cd </span>safeguard</span><span id="LC2" class="line"><span class="c"># $ vagrant up &amp;&amp; vagrant reload</span></span><span id="LC3" class="line"><span class="c"># $ vagrant ssh</span></span><span id="LC4" class="line"></span><span id="LC5" class="line"><span class="nv">$ </span>make libbpf-static</span><span id="LC6" class="line"><span class="nv">$ </span>make build</span><span id="LC7" class="line"></span><span id="LC8" class="line"><span class="nv">$ </span><span class="nb">sudo</span> ./build/safeguard <span class="nt">--config</span> config/safeguard.yml <span class="c">#|grep BLOCK</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-项目功能部分位于开发阶段" class="anchor" href="https://gitee.com/openeuler/safeguard#%E9%A1%B9%E7%9B%AE%E5%8A%9F%E8%83%BD%E9%83%A8%E5%88%86%E4%BD%8D%E4%BA%8E%E5%BC%80%E5%8F%91%E9%98%B6%E6%AE%B5"></a>项目功能 (部分位于开发阶段)</h1><h3><a id="user-content-审计控制" class="anchor" href="https://gitee.com/openeuler/safeguard#%E5%AE%A1%E8%AE%A1%E6%8E%A7%E5%88%B6"></a>审计控制</h3><p>文件：</p><ul><li>追踪文件系统的活动，包括文件的打开、关闭、读写、删除等。</li><li>修改文件系统的行为，例如拦截某些文件操作，或者实现自定义的<strong>安全策略</strong>。
安全策略：
<ol><li>拦截或重定向某些文件操作，使用 eBPF 来拦截对敏感文件的读写操作，或者重定向对某些文件的访问到其他位置。</li><li>实现自定义的访问控制，使用 eBPF 来检查对文件的访问者的身份、权限、环境等信息，然后根据一些规则来允许或拒绝访问。</li><li>实现自定义的审计和监控，使用 eBPF 来记录对某些文件的操作的详细信息，如操作者、时间、内容等，并将这些信息输出到日志。</li></ol></li></ul><p>进程：</p><ul><li>追踪进程的生命周期，例如进程的创建、终止、调度、上下文切换等。</li><li>修改进程的行为，例如注入或修改某些系统调用，或者实现自定义的调度策略。</li></ul><p>网络：</p><ul><li>追踪网络的活动，例如网络包的发送、接收、转发、丢弃等。</li><li>修改网络的行为，例如过滤或重写某些网络包，或者实现自定义的路由策略。</li></ul><h3><a id="user-content-行为分析" class="anchor" href="https://gitee.com/openeuler/safeguard#%E8%A1%8C%E4%B8%BA%E5%88%86%E6%9E%90"></a>行为分析</h3><ul><li><p>收集并分析文件系统的性能、热点、异常等。（选择合适的 eBPF 程序类型和挂载点，例如，使用 kprobes 或 tracepoints 来追踪文件系统相关的内核函数或事件，如 vfs_read, vfs_write, ext4_sync_file 等。）</p></li><li><p>收集信息来分析进程的资源消耗、状态变化、依赖关系等（do_fork, do_exit, schedule 等）。</p></li><li><p>收集信息，分析网络的流量、延迟、丢包率、拥塞等（使用 tc 或 xdp 来追踪网络包的发送、接收、转发、丢弃等事件）。</p></li></ul><h3><a id="user-content-主机管理" class="anchor" href="https://gitee.com/openeuler/safeguard#%E4%B8%BB%E6%9C%BA%E7%AE%A1%E7%90%86"></a>主机管理</h3><p>从安全角度自动化构建细粒度资产信息，支持对业务层资产精准识别和动态感知，让保护对象清晰可见。</p><ul><li>账号展示</li><li>端口列表</li><li>进程列表</li></ul><h3><a id="user-content-风险管理" class="anchor" href="https://gitee.com/openeuler/safeguard#%E9%A3%8E%E9%99%A9%E7%AE%A1%E7%90%86"></a>风险管理</h3><p>精准发现内部风险，快速定位问题并有效解决安全风险，提供详细的资产信息、风险信息以供分析和响应。</p><ul><li>漏洞检测</li><li>安全补丁</li><li>弱密码</li><li>系统风险</li><li>账号风险</li></ul><h3><a id="user-content-入侵检测" class="anchor" href="https://gitee.com/openeuler/safeguard#%E5%85%A5%E4%BE%B5%E6%A3%80%E6%B5%8B"></a>入侵检测</h3><p>提供多锚点的检测能力，能够实时、准确的感知入侵事件，发现失陷主机，并提供对入侵事件的响应手段。</p><ul><li>暴力破解</li><li>异常登录</li><li>反弹 shell</li><li>本地提权</li><li>后门检测，Web 后门</li></ul><h1><a id="user-content-开发路线" class="anchor" href="https://gitee.com/openeuler/safeguard#%E5%BC%80%E5%8F%91%E8%B7%AF%E7%BA%BF"></a>开发路线</h1><table><thead><tr><th></th><th></th><th align="center">23.12（22.03 LTS SP3）</th><th align="center">24.03 LTS</th><th align="center">24.09 创新版本</th><th align="center">24.09（24.03 LTS SP1）</th><th align="center">已实现</th></tr></thead><tbody><tr><td>控制-主机规则设置</td><td>文件操作拦截</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td></tr><tr><td></td><td>进程拦截（采用 path hook）</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>网络拦截</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td></tr><tr><td>主机管理</td><td>账号</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>端口</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>进程</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td>风险管理</td><td>漏洞检测</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>安全补丁</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>弱密码</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>系统风险</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>账号风险</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td>入侵检测</td><td>暴力破解</td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>异常登录</td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>反弹 shell</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>本地提权</td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>后门检测，Web 后门</td><td align="center"></td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td></tr><tr><td>安全日志</td><td>审计日志：文件 hook 拦截方式由路径更改为 inode</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center">✓</td></tr><tr><td></td><td>登录日志</td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td></td><td>账户变更日志</td><td align="center"></td><td align="center">✓</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h1><a id="user-content-license" class="anchor" href="https://gitee.com/openeuler/safeguard#license"></a>LICENSE</h1><p>safeguard's userspace program is licensed under Apache License 2.0 License.<br>
eBPF programs inside <a href="https://gitee.com/openeuler/safeguard/blob/master/pkg/bpf">pkg/bpf directory</a> are licensed under <a href="https://gitee.com/openeuler/safeguard/blob/master/pkg/bpf/LICENSE.md">GNU General Public License version 2</a>.</p>]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/openeuler/safeguard</guid>
            <link>https://gitee.com/openeuler/safeguard</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | PWA 离线方案研究报告]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>本文并不是介绍如何将一个网页配置成离线应用并支持安装下载的。研究 PWA 的目的仅仅是为了保证用户的资源可以直接从本地加载，来忽略全国或者全球网络质量对页面加载速度造成影响。当然，如果页面上所需的资源，除了资源文件外并不需要任何的网络请求，那它除了不支持</span></span></span><span><span><strong><span>安装到桌面</span></strong></span></span><span><span><span>，已经算是一个离线应用了。</span></span></span></p><span id="OSC_h1_1"></span><h1><span><span><span>什么是 PWA</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>PWA（Progressive Web App）是一种结合了网页和原生应用程序功能的新型应用程序开发方法。PWA 通过使用现代 Web 技术，例如 Service Worker 和 Web App Manifest，为用户提供了类似原生应用的体验。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><strong><span><span><span>从用户角度来看，PWA 具有以下特点：</span></span></span></strong></p><div><span>1.</span><span><span><span><span>可离线访问：PWA 可以在离线状态下加载和使用，使用户能够在没有网络连接的情况下继续浏览应用；</span></span></span></span></div><div><span>2.</span><span><span><span><span>可安装：用户可以将 PWA 添加到主屏幕，就像安装原生应用一样，方便快捷地访问；</span></span></span></span></div><div><span>3.</span><span><span><span><span>推送通知：PWA 支持推送通知功能，可以向用户发送实时更新和提醒；</span></span></span></span></div><div><span>4.</span><span><span><span><span>响应式布局：PWA 可以适应不同设备和屏幕大小，提供一致的用户体验。</span></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><strong><span><span><span>从开发者角度来看，PWA 具有以下优势：</span></span></span></strong></p><div><span>1.</span><span><span><span><span>跨平台开发：PWA 可以在多个平台上运行，无需单独开发不同的应用程序；</span></span></span></span></div><div><span>2.</span><span><span><span><span>更新便捷：PWA 的更新可以通过服务器端更新 Service Worker 来实现，用户无需手动更新应用；</span></span></span></span></div><div><span>3.</span><span><span><span><span>可发现性：PWA 可以通过搜索引擎进行索引，增加应用的可发现性；</span></span></span></span></div><div><span>4.</span><span><span><span><span>安全性：PWA 使用 HTTPS 协议传输数据，提供更高的安全性。</span></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>总之，PWA 是一种具有离线访问、可安装、推送通知和响应式布局等特点的新型应用开发方法，为用户提供更好的体验，为开发者带来更高的效率。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>我们从 PWA 的各种能力中，聚焦下其</span></span></span><span><span><strong><span>可离线访问</span></strong></span></span><span><span><span>的能力。</span></span></span></p><span id="OSC_h1_2"></span><h1><span><span><span>Service Worker</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>离线加载本质上是页面所需的各种</span></span></span><span><span><code><span>js</span></code></span></span><span><span><span>、</span></span></span><span><span><code><span>css</span></code></span></span><span><span><span>以及页面本身的</span></span></span><span><span><code><span>html</span></code></span></span><span><span><span>，都可以缓存到本地，不再从网络上请求。这个能力是通过</span></span></span><span><span><code><span>Service Worker</span></code></span></span><span><span><span>来实现的。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>Service Worker 是一种在浏览器背后运行的脚本，用于处理网络请求和缓存数据。它可以拦截和处理网页请求，使得网页能够在离线状态下加载和运行。Service Worker 可以缓存资源，包括 HTML、CSS、JavaScript 和图像等，从而提供更快的加载速度和离线访问能力。它还可以实现推送通知和后台同步等功能，为 Web 应用带来更强大的功能和用户体验。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>某些情况下，Service Worker 和浏览器插件的 background 很相似，但在功能和使用方式上有一些区别：</span></span></span></p><ul><li><span><span><span><strong><span>功能差异：</span></strong></span></span><span><span><span> Service Worker 主要用于处理网络请求和缓存数据，可以拦截和处理网页请求，实现离线访问和资源缓存等功能。而浏览器插件的 background 主要用于扩展浏览器功能，例如修改页面、拦截请求、操作 DOM 等。</span></span></span></span></li><li><span><span><span><strong><span>运行环境：</span></strong></span></span><span><span><span> Service Worker 运行在浏览器的后台，独立于网页运行。它可以在网页关闭后继续运行，并且可以在多个页面之间共享状态。而浏览器插件的 background 也在后台运行，但是它的生命周期与浏览器窗口相关，关闭浏览器窗口后插件也会被终止。</span></span></span></span></li><li><span><span><span><strong><span>权限限制：</span></strong></span></span><span><span><span> 由于安全考虑，Service Worker 受到一定的限制，无法直接访问 DOM，只能通过 postMessage() 方法与网页进行通信。而浏览器插件的 background 可以直接操作 DOM，对页面有更高的控制权。</span></span></span></span></li></ul><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>总的来说，Service Worker 更适合用于处理网络请求和缓存数据，提供离线访问和推送通知等功能；而浏览器插件的 background 则更适合用于扩展浏览器功能，操作页面 DOM，拦截请求等。</span></span></span></p><span id="OSC_h1_3"></span><h1><span><span><span>注册</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>注册一个 Service Worker 其实是非常简单的，下面举个简单的例子</span></span></span></p><pre><code><span><span><span style="color:#708090">&lt;!-- index.html --&gt;</span></span><span><span></span></span><span><span style="color:#708090">&lt;!DOCTYPE html&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;html&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;head&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;title&gt;</span></span><span><span>Service Worker 示例</span></span><span><span style="color:#990055">&lt;/title&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;/head&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;body&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;script&gt;</span></span><span><span>
    if ('serviceWorker' in navigator) {
      window.addEventListener('load', function() {
        navigator.serviceWorker.register('/service-worker.js')
          .then(function(registration) {
            console.log('Service Worker 注册成功:', registration.scope);
          })
          .catch(function(error) {
            console.log('Service Worker 注册失败:', error);
          });
      });
    }
  </span></span><span><span style="color:#990055">&lt;/script&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;/body&gt;</span></span><span><span></span></span><span><span style="color:#990055">&lt;/html&gt;</span></span><span><span></span></span></span></code></pre><pre><code><span><span><span style="color:#708090">// service-worker.js</span></span><span><span></span></span><span><span style="color:#708090">// 定义需要预缓存的文件列表</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> filesToCache </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">[</span></span><span><span></span></span><span><span style="color:#669900">'/'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#669900">'/index.html'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#669900">'/styles.css'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#669900">'/script.js'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#669900">'/image.jpg'</span></span><span><span></span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 安装 Service Worker 时进行预缓存</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'install'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">waitUntil</span></span><span><span style="color:#999999">(</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'my-cache'</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addAll</span></span><span><span style="color:#999999">(</span></span><span><span>filesToCache</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 激活 Service Worker</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'activate'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">waitUntil</span></span><span><span style="color:#999999">(</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">keys</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>cacheNames</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> Promise</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">all</span></span><span><span style="color:#999999">(</span></span><span><span>
        cacheNames</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">filter</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> cacheName </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="color:#669900">'my-cache'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">map</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">delete</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 拦截 fetch 事件并从缓存中返回响应</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'fetch'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">respondWith</span></span><span><span style="color:#999999">(</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>上述示例中，注册 Service Worker 的逻辑包含在 HTML 文件的</span></span></span><span><span><code><span>&lt;script&gt;</span></code></span></span><span><span><span>标签中。当浏览器加载页面时，会检查是否支持 Service Worker，如果支持，则注册 Service Worker 文件</span></span></span><span><span><code><span>/service-worker.js</span></code></span></span><span><span><span>。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>Service Worker 文件中，首先定义了需要预缓存的文件列表</span></span></span><span><span><code><span>filesToCache</span></code></span></span><span><span><span>。在</span></span></span><span><span><code><span>install</span></code></span></span><span><span><span>事件中，将这些文件添加到缓存中。在</span></span></span><span><span><code><span>activate</span></code></span></span><span><span><span>事件中，删除旧缓存。在</span></span></span><span><span><code><span>fetch</span></code></span></span><span><span><span>事件中，拦截请求并从缓存中返回响应。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>Service Worker 文件</span></span></span><span><span><code><span>service-worker.js</span></code></span></span><span><span><span>需要放置在页面的主域名下。在调用</span></span></span><span><span><code><span>navigator.serviceWorker.register('/service-worker.js')</span></code></span></span><span><span><span>时，可以在第二个参数中设置</span></span></span><span><span><code><span>scope</span></code></span></span><span><span><span>，用来确定 Service Worker 的影响范围，默认是 sw 文件所在 path 的作用域。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>需要注意的是，如果 sw 文件被放置在</span></span></span><span><span><code><span>/a</span></code></span></span><span><span><span>目录下，是不能设置作用域为</span></span></span><span><span><code><span>/</span></code></span></span><span><span><span>的。因为文件本身路径的级别小于根路径。</span></span></span></p><span id="OSC_h1_4"></span><h1><span><span><span>使用</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>当我们按照上面的示例，配置好了</span></span></span><span><span><code><span>html</span></code></span></span><span><span><span>及对应的</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>后，启动服务并刷新页面，应该就能看到控制枱打印出了</span></span></span><span><span><code><span>Service Worker 注册成功</span></code></span></span><span><span><span>的日志。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>如果在 chrome 浏览器中，可以打开控制枱，切换到应用 Tab，就能看到我们刚注册好的应用了。 </span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-02-17-022Ah2qfo8NupBJK8.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>此时在浏览器的缓存空间中，也能发现我们开辟的缓存</span></span></span><span><span><code><span>my-cache</span></code></span></span><span><span><span>，内部存储着我们指定的预缓存文件</span></span></span><span><span><code><span>index.html</span></code></span></span><span><span><span>。由于我的项目只有根页面，所以只有一个条目。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-02-17-02z9Numw0dw0WYJTS.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>此时如果页面所需的所有文件都被缓存了，即使将浏览器设置成断网模式，刷新页面也是能打开的。本文的目的并不是创建离线应用，下面我们讲讲上面方式会面临的问题。</span></span></span></p><span id="OSC_h3_5"></span><h3><span><span><span>如何确定预缓存范围</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>如果我们的项目只有一个仓库，可以使用一些</span></span></span><span><span><code><span>webpack</span></code></span></span><span><span><span>插件，可以直接帮我们生成</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>文件。每次重新构建都会生成新的文件，这样就不用担心多存或者少存文件了。同时，在下一章节的删除旧缓存中，每次更新版本号就好了。</span></span></span></p><blockquote><span><span><span>﻿</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Fworkbox" target="_blank" rel="nofollow"><span><span><span>Workbox</span></span></span></a><span><span><span>是一个用于创建离线优先的网络应用程序的 JavaScript 库。它提供了一套工具和功能，帮助开发人员创建可靠的离线体验，并使网页应用程序能够在网络连接不稳定或断开的情况下正常工作。Workbox 可以用于缓存和提供离线资源，实现离线页面导航，处理后台同步和推送通知等功能。它能够简化离线应用程序的开发过程，并提供强大的缓存管理和资源加载能力。</span></span></span></blockquote><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>对于有统一配置后台的微前端项目，这个问题有些棘手。</span></span></span></p><div><span>1.</span><span><span><span><span>由于有后台管理，更新某个模块的文件很常见，但并不想每次都更新</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>。</span></span></span></span></div><div><span>2.</span><span><span><span><span>由于资源的不确定性，无法在</span></span></span><span><span><code><span>precache</span></code></span></span><span><span><span>中列举出所有的资源列表，即使列举出了，可能用户永远也不会用到某个文件，造成缓存浪费或溢出。</span></span></span></span></div><div><span>3.</span><span><span><span><span>出于第 1、2 条缘由，更新</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>文件后，无法确定如何删除旧缓存。</span></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>对于这个问题，首先确定的是，先在</span></span></span><span><span><code><span>precache</span></code></span></span><span><span><span>中列举出所有的基础底座的资源文件，并单独占用一个</span></span></span><span><span><code><span>cacheName</span></code></span></span><span><span><span>。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>对于剩下的不确定性的业务文件，可以使用动态缓存的方式，这个会在后面具体讲解，也是本文要研究的重点。</span></span></span></p><span id="OSC_h3_6"></span><h3><span><span><span>资源更新</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>由于刷新页面后，所有资源都从缓存中获取，此时修改</span></span></span><span><span><code><span>html</span></code></span></span><span><span><span>后，再刷新浏览器，页面并没有更新。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>这个问题其实不用太担心，虽然我们的资源都被缓存了，但是</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>本身是不会被缓存的。即使我们在下一次更新中，删除了页面上注册 Service Worker 的代码，已经注册的 Service Worker 也会一直激活，直到我们主动的删除它。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>对于一般的 SPA 项目，上线后资源一般是不变的，如果我们希望更新页面，只需要更新</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>就好。当注册的 Service Worker 文件发生变化时，浏览器会自动下载新的 Service Worker 文件，并在下一次访问页面时激活新的 Service Worker。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>更新文件需要注意几个问题：</span></span></span></p><div><span>1.</span><span><span><span><strong><span>删除旧缓存：</span></strong></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>示例代码中，在</span></span></span><span><span><code><span>activate</span></code></span></span><span><span><span>阶段，我们执行了删除缓存的逻辑。真实环境中，一般会将</span></span></span><span><span><code><span>cacheName</span></code></span></span><span><span><span>带上版本号，每次更新</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>都更新下版本号。这样每次都会将旧缓存删掉，并重新开辟新版本的缓存。各浏览器对于缓存超出后的处理是不同的，例如</span></span></span><span><span><code><span>chrome</span></code></span></span><span><span><span>就是缓存逐出策略。及时的清理缓存，可以防止出现一些奇怪的问题。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">const</span></span><span><span> version </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'v1'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> preCacheName </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'pre-cache-'</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> version</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 将后文调用的 ’my-cache‘的位置替换为 preCacheName</span></span><span><span></span></span></span></code></pre><div><span>2.</span><span><span><span><strong><span>Service Worker 更新不及时：</span></strong></span></span></span></div><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>同一个域下，只能有一个 Service Worker 被激活，只有所有该域下的页面都关闭了，下一个注册的 Service Worker 才能被激活并取代上一个。对于某些用户来说，这个时间太长了。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>因此，我们需要在</span></span></span><span><span><code><span>install</span></code></span></span><span><span><span>事件中，等待</span></span></span><span><span><code><span>precache</span></code></span></span><span><span><span>环节结束后，调用</span></span></span><span><span><code><span>self.skipWaiting();</span></code></span></span><span><span><span>来立即激活新的 Service Worker，但并不会立即接管控制所有客户端（即浏览器标签页）。这意味着旧的 Service Worker 仍然会处理当前打开的页面，直到这些页面被关闭或重新加载。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>为了确保新的 Service Worker 可以立即接管所有客户端，在</span></span></span><span><span><code><span>activate</span></code></span></span><span><span><span>事件中调用</span></span></span><span><span><code><span>clients.claim()</span></code></span></span><span><span><span>方法。这个方法会在新的 Service Worker 激活后，立即接管所有已打开的页面，而不需要等待这些页面重新加载。这样可以确保新的 Service Worker 能够立即生效，提供更新的功能和服务。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>更改完后的代码如下，这样修改后，</span></span></span><span><span><code><span>skipWaiting()</span></code></span></span><span><span><span>和</span></span></span><span><span><code><span>clients.claim()</span></code></span></span><span><span><span>方法会在异步操作完成后被调用，确保新的 Service Worker 在安装完成后立即激活并接管所有客户端。</span></span></span></p><pre><code><span><span><span style="color:#708090">// 安装 Service Worker 时进行预缓存</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'install'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">waitUntil</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">async</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">await</span></span><span><span> caches
        </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>preCacheName</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addAll</span></span><span><span style="color:#999999">(</span></span><span><span>filesToCache</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
          self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">skipWaiting</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 激活 Service Worker</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'activate'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">waitUntil</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">async</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">await</span></span><span><span></span></span><span><span style="color:#dd4a68">clearOutdateResources</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    self</span></span><span><span style="color:#999999">.</span></span><span><span>clients</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">claim</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>现在，更新下</span></span></span><span><span><code><span>index.html</span></code></span></span><span><span><span>，然后将上述</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>的更新保存，接着刷新两次页面 (不要着急，给注册和加载资源一些时间，可以在控制枱中观察下 Service Worker 的活跃状态以及缓存的变化)。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-12-02-17-060ft9bqjUqI5nj5X.png" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>可以在某个时刻，发现同时存在两个 Service Worker，一个处于激活状态，是我们正在使用的，另一个处于待激活状态，因为正在进行</span></span></span><span><span><code><span>install</span></code></span></span><span><span><span>。此时缓存空间也会同时存在两个版本的缓存，等新的 Service Worker 激活后，就会删除旧缓存。然后就只存在一个最新的 Service Worker 了，同时缓存也只剩一个了。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>现在每次用户打开新的页面，</span></span></span></p><ul><li><span><span><span><span>优先从缓存中获取资源</span></span></span></span></li><li><span><span><span><span>如果发现</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>文件被更新，安装新的文件</span></span></span></span></li><li><span><span><span><span>文件内会下载新的资源，同时删除旧缓存，并且接管所有页面</span></span></span></span></li><li><span><span><span><span>用户下一次打开新页面或刷新当前页面，就会展示最新的内容</span></span></span></span></li></ul><span id="OSC_h1_7"></span><h1><span><span><span>能力扩展</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>基础操作搞定了。但是上面我们还欠了点技术债，即如果不确定到底有哪些资源，怎么动态的做出缓存。不要着急，现在先进行下扩展阅读。</span></span></span></p><span id="OSC_h3_8"></span><h3><span><span><span>缓存的几种策略</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>当谈到 Service Worker 缓存策略时，有以下几种常见的策略：</span></span></span></p><ul><li><span><span><span><span>Cache First（优先缓存）：首先尝试从缓存中获取响应，如果缓存中存在该资源，则直接返回；如果没有缓存或缓存过期，则向网络发送请求。</span></span></span></span></li><li><span><span><span><span>Network First（优先网络）：首先尝试从网络获取响应，如果网络请求成功，则返回网络响应；如果网络请求失败，则从缓存中获取响应，即使缓存过期也会返回缓存的响应。</span></span></span></span></li><li><span><span><span><span>Cache Only（仅缓存）：只从缓存中获取响应，不向网络发送请求。适用于完全离线可访问的资源。</span></span></span></span></li><li><span><span><span><span>Network Only（仅网络）：只从网络获取响应，不使用缓存。适用于需要实时数据的场景。</span></span></span></span></li><li><span><span><span><span>Stale-While-Revalidate（同时更新和使用缓存）：首先尝试从缓存中获取响应，如果缓存过期，则向网络发送请求获取最新响应，并更新缓存。同时返回缓存的响应，以便快速展示内容。</span></span></span></span></li></ul><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中我们使用的，就是缓存优先模式。对于不怎么更新或者只有一个仓库的应用来说，使用</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>文件的更新来说已经足够了。毕竟代码写的越多，bug 就越多。同比，更新的越频繁，系统就越不稳定。</span></span></span></p><span id="OSC_h3_9"></span><h3><span><span><span>Stale-While-Revalidate</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>其他策略如果有兴趣，可以自行搜索，现在我们来讲下动态缓存是怎么实现的。毕竟对于微服务来说，不更新</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>是最好的，如果能忘了它就更好了。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中我们介绍了</span></span></span><span><span><code><span>Cache First</span></code></span></span><span><span><span>，重新附下代码</span></span></span></p><pre><code><span><span><span style="color:#708090">// 拦截 fetch 事件并从缓存中返回响应</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'fetch'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">respondWith</span></span><span><span style="color:#999999">(</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>新增一个</span></span></span><span><span><code><span>mock.js</span></code></span></span><span><span><span>，脚本会向 body 中新增一个字符串。将</span></span></span><span><span><code><span>js</span></code></span></span><span><span><span>文件使用</span></span></span><span><span><code><span>script</span></code></span></span><span><span><span>的方式加载。</span></span></span></p><pre><code><span><span><span style="color:#708090">// mock.js</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> div </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> document</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">createElement</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'div'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
div</span></span><span><span style="color:#999999">.</span></span><span><span>innerText </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'Hello World'</span></span><span><span style="color:#999999">;</span></span><span><span>
document</span></span><span><span style="color:#999999">.</span></span><span><span>body</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">appendChild</span></span><span><span style="color:#999999">(</span></span><span><span>div</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// index.html</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span>script src</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span style="color:#669900">"./mock.js"</span></span><span><span> type</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span style="color:#669900">"text/javascript"</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">/</span></span><span><span>script</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>同时调整下</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>的拦截逻辑。</span></span></span></p><pre><code><span><span><span style="color:#708090">// 新增 runtime 缓存</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> runtimeCacheName </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'runtime-cache-'</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> version</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 符合条件也是缓存优先，但是每次都重新发起网络请求更新缓存</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span></span></span><span><span>isStaleWhileRevalidate</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> url </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> request</span></span><span><span style="color:#999999">.</span></span><span><span>url</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> index </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">[</span></span><span><span style="color:#669900">'http://127.0.0.1:5500/mock.js'</span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">indexOf</span></span><span><span style="color:#999999">(</span></span><span><span>url</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> index </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span>

self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'fetch'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">respondWith</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#708090">// 尝试从缓存中获取响应</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> fetchPromise </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// 符合匹配条件才克隆响应并将其添加到缓存中</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isStaleWhileRevalidate</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> responseToCache </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">clone</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
          caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>runtimeCacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">put</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">,</span></span><span><span> responseToCache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">clone</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 返回缓存的响应，然后更新缓存中的响应</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> fetchPromise</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>现在每次用户打开新的页面，</span></span></span></p><ul><li><span><span><span><span>优先从缓存中获取资源，同时发起一个网络请求</span></span></span></span></li><li><span><span><span><span>有缓存则直接返回缓存，没有则返回一个</span></span></span><span><span><code><span>fetchPromise</span></code></span></span></span></li><li><span><span><span><code><span>fetchPromise</span></code></span></span><span><span><span>内部更新符合缓存条件的请求</span></span></span></span></li><li><span><span><span><span>用户下一次打开新页面或刷新当前页面，就会展示最新的内容</span></span></span></span></li></ul><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通过修改</span></span></span><span><span><code><span>isStaleWhileRevalidate</span></code></span></span><span><span><span>中 url 的匹配条件，就能够控制是否更新缓存。在上面的示例中，我们可以将</span></span></span><span><span><code><span>index.html</span></code></span></span><span><span><span>从</span></span></span><span><span><code><span>precache</span></code></span></span><span><span><span>列表中移除，放入</span></span></span><span><span><code><span>runtime</span></code></span></span><span><span><span>中，或者专门处理下</span></span></span><span><span><code><span>index.html</span></code></span></span><span><span><span>的放置规则，去更新</span></span></span><span><span><code><span>precache</span></code></span></span><span><span><span>中的缓存。最好不要出现多个缓存桶中存在同一个</span></span></span><span><span><code><span>request</span></code></span></span><span><span><span>的缓存，那样就不知道走的到底是哪个缓存了。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>一般来说，微前端的应用，资源文件都有个固定的存放位置，文件本身通过在文件名上增加</span></span></span><span><span><code><span>hash</span></code></span></span><span><span><span>或版本号来进行区分。我们在</span></span></span><span><span><code><span>isStaleWhileRevalidate</span></code></span></span><span><span><span>函数中匹配存放资源位置的路径，这样用户在第二次打开页面时，就可以直接使用缓存了。如果是内嵌页面，可以与平台沟通，是否可以在应用冷起的时候，偷偷访问一个资源页面，提前进行预加载，这样就能在首次打开的时候也享受本地缓存了。</span></span></span></p><span id="OSC_h3_10"></span><h3><span><span><span>缓存过期</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>即使我们缓存了一些资源文件，例如 Iconfont、字体库等只会更新自身内容，但不会变化名称的文件。仅使用</span></span></span><span><span><code><span>Stale-While-Revalidate</span></code></span></span><span><span><span>其实也是可以的。用户会在第二次打开页面时看到最新的内容。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>但为了提高一些体验，例如，用户半年没打开页面了，突然在今天打开了一下，展示历史的内容就不太合适了，这时候可以增加一个缓存过期的策略。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>如果我们使用的是</span></span></span><span><span><code><span>Workbox</span></code></span></span><span><span><span>，通过使用</span></span></span><span><span><code><span>ExpirationPlugin</span></code></span></span><span><span><span>来实现的。</span></span></span><span><span><code><span>ExpirationPlugin</span></code></span></span><span><span><span>是</span></span></span><span><span><code><span>Workbox</span></code></span></span><span><span><span>中的一个缓存插件，它允许为缓存条目设置过期时间。示例如下所示</span></span></span></p><pre><code><span><span><span style="color:#0077aa">import</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span> registerRoute </span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">from</span></span><span><span></span></span><span><span style="color:#669900">'workbox-routing'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">import</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span> CacheFirst</span></span><span><span style="color:#999999">,</span></span><span><span> StaleWhileRevalidate </span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">from</span></span><span><span></span></span><span><span style="color:#669900">'workbox-strategies'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">import</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span> ExpirationPlugin </span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">from</span></span><span><span></span></span><span><span style="color:#669900">'workbox-expiration'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 设置缓存的有效期为一小时</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> cacheExpiration </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  maxAgeSeconds</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#990055">60</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">*</span></span><span><span></span></span><span><span style="color:#990055">60</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">// 一小时</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 使用 CacheFirst 策略，并应用 ExpirationPlugin</span></span><span><span></span></span><span><span style="color:#dd4a68">registerRoute</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>{ request }</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span> request</span></span><span><span style="color:#999999">.</span></span><span><span>destination </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">===</span></span><span><span></span></span><span><span style="color:#669900">'image'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">CacheFirst</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">{</span></span><span><span>
    cacheName</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#669900">'image-cache'</span></span><span><span style="color:#999999">,</span></span><span><span>
    plugins</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#999999">[</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ExpirationPlugin</span></span><span><span style="color:#999999">(</span></span><span><span>cacheExpiration</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 使用 StaleWhileRevalidate 策略，并应用 ExpirationPlugin</span></span><span><span></span></span><span><span style="color:#dd4a68">registerRoute</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>{ request }</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span> request</span></span><span><span style="color:#999999">.</span></span><span><span>destination </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">===</span></span><span><span></span></span><span><span style="color:#669900">'script'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">StaleWhileRevalidate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">{</span></span><span><span>
    cacheName</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#669900">'script-cache'</span></span><span><span style="color:#999999">,</span></span><span><span>
    plugins</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#999999">[</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ExpirationPlugin</span></span><span><span style="color:#999999">(</span></span><span><span>cacheExpiration</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>或者我们可以实现一下自己的缓存过期策略。首先是增加缓存过期时间。在原本的更新缓存的基础上，设置自己的</span></span></span><span><span><code><span>cache-control</span></code></span></span><span><span><span>，然后再放入缓存中。示例中直接删除了原本的</span></span></span><span><span><code><span>cache-control</span></code></span></span><span><span><span>，真正使用中，需要判断下，比如</span></span></span><span><span><code><span>no-cache</span></code></span></span><span><span><span>类型的资源，就不要使用缓存了。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>每次命中缓存时，都会判断下是否过期，如果过期，则直接返回从网络中获取的最新的请求，并更新缓存。</span></span></span></p><pre><code><span><span><span>self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'fetch'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">respondWith</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#708090">// 尝试从缓存中获取响应</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> fetchPromise </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isStaleWhileRevalidate</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// 检查响应的状态码是否为成功</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>status </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">===</span></span><span><span></span></span><span><span style="color:#990055">200</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// 克隆响应并将其添加到缓存中</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> clonedResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">clone</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 在存储到缓存之前，设置正确的缓存头部</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> headers </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Headers</span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
            headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">delete</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'cache-control'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
            headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">append</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'cache-control'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#669900">'public, max-age=3600'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 设置缓存有效期为 1 小时</span></span><span><span></span></span><span><span style="color:#708090">// 创建新的响应对象并存储到缓存中</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> cachedResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Response</span></span><span><span style="color:#999999">(</span></span><span><span>clonedResponse</span></span><span><span style="color:#999999">.</span></span><span><span>body</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
              status</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>status</span></span><span><span style="color:#999999">,</span></span><span><span>
              statusText</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>statusText</span></span><span><span style="color:#999999">,</span></span><span><span>
              headers</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> headers</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>

            caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>runtimeCacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
              cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">put</span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">.</span></span><span><span>request</span></span><span><span style="color:#999999">,</span></span><span><span> cachedResponse</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 检查缓存的响应是否存在且未过期</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span style="color:#dd4a68">isExpired</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 返回缓存的响应</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> fetchPromise</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">isExpired</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// 从响应的 headers 中获取缓存的有效期信息</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> cacheControl </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> response</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'cache-control'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>cacheControl</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> maxAgeMatch </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> cacheControl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#ee9900">/max-age=(\d+)/</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>maxAgeMatch</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> maxAgeSeconds </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">parseInt</span></span><span><span style="color:#999999">(</span></span><span><span>maxAgeMatch</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">parse</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'date'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> expirationTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> maxAgeSeconds </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">*</span></span><span><span></span></span><span><span style="color:#990055">1000</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 检查当前时间是否超过了缓存的有效期</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">now</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> expirationTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 未过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 已过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><blockquote><span><span><span>从 Service Worker 发起的请求，可能会被浏览器自身的内存缓存或硬盘缓存捕获，然后直接返回。</span></span></span></blockquote><span id="OSC_h3_11"></span><h3><span><span><span>精确清理缓存</span></span></span></h3><blockquote><span><span><span>下面的内容，默认为微前端应用。</span></span></span></blockquote><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>随着微前端应用的更新，会逐渐出现失效的资源文件一直出现在缓存中，时间长了可能会导致缓存溢出。</span></span></span></p><span id="OSC_h4_12"></span><h4><span><span><span>定时更新</span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如以半年为期限，定期更新</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>文件的版本号，每次更新都会一刀切的将上一个版本中的</span></span></span><span><span><strong><span>动态缓存</span></strong></span></span><span><span><span>干掉，此操作会导致下次加载变慢，因为会重新通过网络请求的方式加载来创建缓存。但如果更新频率控制得当，并且资源拆分合理，用户感知不会很大。</span></span></span></p><span id="OSC_h4_13"></span><h4><span><span><span>处理不常用缓存</span></span></span></h4><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中的缓存过期策略，并不适用于此处。因为微服务中资源文件中，只要文件名不变，内容就应该不变。我们只是期望删除超过一定时间没有使用的条目，防止缓存溢出。这里也使用</span></span></span><span><span><code><span>Stale-While-Revalidate</span></code></span></span><span><span><span>的原因是为了帮助我们识别长期不使用的</span></span></span><span><span><code><span>js</span></code></span></span><span><span><span>文件，方便删除。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>本来可以使用</span></span></span><span><span><code><span>self.registration.periodicSync.register</span></code></span></span><span><span><span>来创建一个周期性任务，但是由于兼容性问题，放弃了。需要的可自行研究，附上</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FAPI%2FPeriodicSyncManager" target="_blank" rel="nofollow"><span><span><span>网址</span></span></span></a><span><span><span>。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>这里我们换一个条件。每当有网络请求被触发时，启动一个延迟 20s 的</span></span></span><span><span><code><span>debounce</span></code></span></span><span><span><span>函数，来处理缓存问题。先把之前的清除旧版本缓存的函数改名成</span></span></span><span><span><code><span>clearOldResources</span></code></span></span><span><span><span>。然后设定缓存过期时间为 10s，刷新两次页面来触发网路请求，20s 之后，</span></span></span><span><span><code><span>runtime</span></code></span></span><span><span><span>缓存中的</span></span></span><span><span><code><span>mock.js</span></code></span></span><span><span><span>就会被删除了。真实场景下，延迟函数和缓存过期都不会这么短，可以设置成 5min 和 3 个月。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">debounce</span></span><span><span style="color:#999999">(</span></span><span><span>func, delay</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">let</span></span><span><span> timerId</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>...args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">clearTimeout</span></span><span><span style="color:#999999">(</span></span><span><span>timerId</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>

    timerId </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">setTimeout</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">func</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">apply</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">,</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">,</span></span><span><span> delay</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> clearOutdateResources </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">debounce</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  cache
    </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>runtimeCacheName</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">keys</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>requests</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
      requests</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">forEach</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// response 为匹配到的 Response 对象</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isExpiredWithTime</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">delete</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">isExpiredWithTime</span></span><span><span style="color:#999999">(</span></span><span><span>response, time</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">parse</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'date'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>requestTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> expirationTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">*</span></span><span><span></span></span><span><span style="color:#990055">1000</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 检查当前时间是否超过了缓存的有效期</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">now</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> expirationTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 未过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 已过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>重新总结下微前端应用下的缓存配置：</span></span></span></p><div><span>1.</span><span><span><span><span>使用版本号，并初始化</span></span></span><span><span><code><span>preCache</span></code></span></span><span><span><span>和</span></span></span><span><span><code><span>runtimeCache</span></code></span></span></span></div><div><span style="color:var(--vscode-textPreformat-foreground)">2.</span><span><span><span><code><span>preCache</span></code></span></span><span><span><span>中预缓存基座数据，使用</span></span></span><span><span><code><span>Cache First</span></code></span></span><span><span><span>策略，</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>不更新则基座数据不更新</span></span></span></span></div><div><span style="color:var(--vscode-textPreformat-foreground)">3.</span><span><span><span><code><span>runtimeCache</span></code></span></span><span><span><span>使用</span></span></span><span><span><code><span>Stale-While-Revalidate</span></code></span></span><span><span><span>策略负责动态缓存业务资源的数据，每次访问页面都动态更新一次</span></span></span></span></div><div><span>4.</span><span><span><span><span>使用</span></span></span><span><span><code><span>debounce</span></code></span></span><span><span><span>函数，每次访问页面都会延迟清除过期的缓存</span></span></span></span></div><div><span>5.</span><span><span><span><span>如果需要更新</span></span></span><span><span><code><span>preCache</span></code></span></span><span><span><span>中的基座数据，则需要升级版本号并重新安装</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>文件。新服务激活后会删除上一个版本的数据</span></span></span></span></div><div><span style="color:var(--vscode-textPreformat-foreground)">6.</span><span><span><span><code><span>runtimeCache</span></code></span></span><span><span><span>和</span></span></span><span><span><code><span>preCache</span></code></span></span><span><span><span>不能同时存储一个资源，否则可能导致混乱。</span></span></span></span></div><span id="OSC_h1_14"></span><h1><span><span><span>最终示例</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>下面是最终的</span></span></span><span><span><code><span>sw.js</span></code></span></span><span><span><span>，我删除掉了缓存过期的逻辑，如有需要请自行从上文代码中获取。顺便我增加了一点点丧心病狂的错误处理逻辑。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>理论上，</span></span></span><span><span><code><span>index.html</span></code></span></span><span><span><span>应该放入预缓存的列表里，但我懒得写在</span></span></span><span><span><code><span>Stale-While-Revalidate</span></code></span></span><span><span><span>里分别更新</span></span></span><span><span><code><span>preCache</span></code></span></span><span><span><span>和</span></span></span><span><span><code><span>runtimeCache</span></code></span></span><span><span><span>了，相信看完上面内容的你，一定可以自己实现对应逻辑。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>如果你用了下面的文件，每次刷新完页面的 20s 后，runtime 的缓存就会被清空，因为我们过期时间只设置了 10s。而每次发起请求后的 20s 后就会进行过期判断。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在真实的验证过程中，有部分</span></span></span></p><pre><code><span><span><span style="color:#0077aa">const</span></span><span><span> version </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'v1'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> preCacheName </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'pre-cache-'</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> version</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> runtimeCacheName </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#669900">'runtime-cache'</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// runtime 不进行整体清除</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> filesToCache </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 这里将 index.html 放到动态缓存里了，为了搭自动更新的便车。这个小项目也没别的需要预缓存的了</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> maxAgeSeconds </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 缓存过期时间，单位 s</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> debounceClearTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">20</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 延迟清理缓存时间，单位 s</span></span><span><span></span></span><span><span style="color:#708090">// 符合条件也是缓存优先，但是每次都重新发起网络请求更新缓存</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span></span></span><span><span>isStaleWhileRevalidate</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> url </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> request</span></span><span><span style="color:#999999">.</span></span><span><span>url</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> index </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">[</span></span><span><span>`${self.location.origin}/mock.js`</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span>`${self.location.origin}/index.html`</span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">indexOf</span></span><span><span style="color:#999999">(</span></span><span><span>url</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> index </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">/*********************上面是配置代码***************************** */</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span></span></span><span><span>addResourcesToCache</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">async</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>preCacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addAll</span></span><span><span style="color:#999999">(</span></span><span><span>filesToCache</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 安装 Service Worker 时进行预缓存</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'install'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">waitUntil</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#dd4a68">addResourcesToCache</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
      self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">skipWaiting</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 删除上个版本的数据</span></span><span><span></span></span><span><span style="color:#0077aa">async</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">clearOldResources</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">keys</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>cacheNames</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> Promise</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">all</span></span><span><span style="color:#999999">(</span></span><span><span>
      cacheNames
        </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">filter</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span style="color:#999999">[</span></span><span><span>preCacheName</span></span><span><span style="color:#999999">,</span></span><span><span> runtimeCacheName</span></span><span><span style="color:#999999">]</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">includes</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">map</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">delete</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// 激活 Service Worker</span></span><span><span>
self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'activate'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">waitUntil</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#dd4a68">clearOldResources</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">finally</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
      self</span></span><span><span style="color:#999999">.</span></span><span><span>clients</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">claim</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">clearOutdateResources</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 缓存优先</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span></span></span><span><span>isCacheFirst</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> url </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> request</span></span><span><span style="color:#999999">.</span></span><span><span>url</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> index </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> filesToCache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">findIndex</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>u</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span> url</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">includes</span></span><span><span style="color:#999999">(</span></span><span><span>u</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> index </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">addToCache</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName, request, response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>cacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
      cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">put</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">,</span></span><span><span> response</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">error</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'add to cache error =&gt;'</span></span><span><span style="color:#999999">,</span></span><span><span> error</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">async</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">cacheFirst</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> caches
      </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// 检查是否成功获取到响应</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> response</span></span><span><span style="color:#999999">.</span></span><span><span>status </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="color:#990055">200</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 返回原始响应</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> clonedResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> response</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">clone</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">addToCache</span></span><span><span style="color:#999999">(</span></span><span><span>runtimeCacheName</span></span><span><span style="color:#999999">,</span></span><span><span> request</span></span><span><span style="color:#999999">,</span></span><span><span> clonedResponse</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">catch</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">error</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'match in cacheFirst error'</span></span><span><span style="color:#999999">,</span></span><span><span> error</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">error</span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// 缓存优先，同步更新</span></span><span><span></span></span><span><span style="color:#0077aa">async</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">handleFetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">clearOutdateResources</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 尝试从缓存中获取响应</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> fetchPromise </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// 检查响应的状态码是否为成功</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>networkResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>status </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="color:#990055">200</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// 克隆响应并将其添加到缓存中</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> clonedResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">clone</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">addToCache</span></span><span><span style="color:#999999">(</span></span><span><span>runtimeCacheName</span></span><span><span style="color:#999999">,</span></span><span><span> request</span></span><span><span style="color:#999999">,</span></span><span><span> clonedResponse</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 返回缓存的响应，然后更新缓存中的响应</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> fetchPromise</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">error</span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>

self</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">addEventListener</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'fetch'</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>event</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span> request </span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> event</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isCacheFirst</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">respondWith</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">cacheFirst</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isStaleWhileRevalidate</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    event</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">respondWith</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">handleFetch</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">debounce</span></span><span><span style="color:#999999">(</span></span><span><span>func, delay</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">let</span></span><span><span> timerId</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>...args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">clearTimeout</span></span><span><span style="color:#999999">(</span></span><span><span>timerId</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>

    timerId </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">setTimeout</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">func</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">apply</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">,</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">,</span></span><span><span> delay</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> clearOutdateResources </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">debounce</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    caches</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">open</span></span><span><span style="color:#999999">(</span></span><span><span>runtimeCacheName</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>cache</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
      cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">keys</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>requests</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        requests</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">forEach</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
          cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">match</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> isExpired </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">isExpiredWithTime</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">,</span></span><span><span> maxAgeSeconds</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>isExpired</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
              cache</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">delete</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">error</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'clearOutdateResources error =&gt; '</span></span><span><span style="color:#999999">,</span></span><span><span> error</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">,</span></span><span><span> debounceClearTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">*</span></span><span><span></span></span><span><span style="color:#990055">1000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">isExpiredWithTime</span></span><span><span style="color:#999999">(</span></span><span><span>response, time</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">parse</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'date'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>requestTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> expirationTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">*</span></span><span><span></span></span><span><span style="color:#990055">1000</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 检查当前时间是否超过了缓存的有效期</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">now</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> expirationTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 未过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 已过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_15"></span><h3><span><span><strong><span>注意</span></strong></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在真实的验证过程中，有部分资源获取不到</span></span></span><span><span><code><span>date</span></code></span></span><span><span><span>这个数据，因此为了保险，我们还是在存入缓存时，自己补充一个存入时间</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#708090">// 克隆响应并将其添加到缓存中</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> clonedResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">clone</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 在存储到缓存之前，设置正确的缓存头部</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> headers </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Headers</span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>

headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">append</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'sw-save-date'</span></span><span><span style="color:#999999">,</span></span><span><span> Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">now</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 创建新的响应对象并存储到缓存中</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> cachedResponse </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Response</span></span><span><span style="color:#999999">(</span></span><span><span>clonedResponse</span></span><span><span style="color:#999999">.</span></span><span><span>body</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
  status</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>status</span></span><span><span style="color:#999999">,</span></span><span><span>
  statusText</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> networkResponse</span></span><span><span style="color:#999999">.</span></span><span><span>statusText</span></span><span><span style="color:#999999">,</span></span><span><span>
  headers</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> headers</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在判断过期时，取我们自己写入的</span></span></span><span><span><code><span>key</span></code></span></span><span><span><span>即可。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#dd4a68">isExpiredWithTime</span></span><span><span style="color:#999999">(</span></span><span><span>response, time</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Number</span></span><span><span style="color:#999999">(</span></span><span><span>response</span></span><span><span style="color:#999999">.</span></span><span><span>headers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'sw-save-date'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>requestTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">var</span></span><span><span> expirationTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> requestTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">*</span></span><span><span></span></span><span><span style="color:#990055">1000</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 检查当前时间是否超过了缓存的有效期</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>Date</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">now</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> expirationTime</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 未过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 已过期</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><span id="OSC_h3_16"></span><h3><span><span><span>不可见响应</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>还记得上面为了安全考虑，在存入缓存时，对响应的状态做了判断，非 200 的都不缓存。然后就又发现异常场景了。</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#708090">// 检查是否成功获取到响应</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>response </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> response</span></span><span><span style="color:#999999">.</span></span><span><span>status </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!==</span></span><span><span></span></span><span><span style="color:#990055">200</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> response</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 返回原始响应</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><code><span>opaque</span></code></span></span><span><span><span> 响应通常指的是跨源请求（CORS）中的一种情况，在该情况下，浏览器出于安全考虑，不允许访问服务端返回的响应内容。</span></span></span><span><span><code><span>opaque</span></code></span></span><span><span><span> 响应通常发生在服务工作者（Service Workers）进行的跨源请求中，且没有 CORS 头部的情况下。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><code><span>opaque</span></code></span></span><span><span><span> 响应的特征是：</span></span></span></p><ul><li><span><span><span><span>响应的内容无法被 JavaScript 访问。</span></span></span></span></li><li><span><span><span><span>响应的大小无法确定，因此 Chrome 开发者工具中会显示为 (opaque)。</span></span></span></span></li><li><span><span><span><span>响应的状态码通常是 0，即使实际上服务器可能返回了不同的状态码。</span></span></span></span></li></ul><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>因此我们需要做一些补充动作。不单是补充</span></span></span><span><span><code><span>cors</span></code></span></span><span><span><span>模式，还得同步设置下</span></span></span><span><span><code><span>credentials</span></code></span></span><span><span><span>。</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">const</span></span><span><span> newRequest </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span>
  request</span></span><span><span style="color:#999999">.</span></span><span><span>url </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">===</span></span><span><span></span></span><span><span style="color:#669900">'index.html'</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span> request
    </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Request</span></span><span><span style="color:#999999">(</span></span><span><span>request</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span> mode</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#669900">'cors'</span></span><span><span style="color:#999999">,</span></span><span><span> credentials</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#669900">'omit'</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在 Service Workers 发起网络请求时，如果页面本身需要认证，那就像上面代码那样，对页面请求做个判断。</span></span></span><span><span><code><span>request.url === 'index.html'</span></code></span></span><span><span><span>是我写的示例，真实请求中，需要拼出完整的 url 路径。而对于资源文件，走非认证的</span></span></span><span><span><code><span>cors</span></code></span></span><span><span><span>请求即可。将请求的</span></span></span><span><span><code><span>request</span></code></span></span><span><span><span>改为我们变更后的</span></span></span><span><span><code><span>newRequest</span></code></span></span><span><span><span>，请求资源就可以正常的被缓存了。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">var</span></span><span><span> fetchPromise </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">fetch</span></span><span><span style="color:#999999">(</span></span><span><span>newRequest</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">function</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>networkResponse</span></span><span><span style="color:#999999">)</span></span></span></code></pre><span id="OSC_h1_17"></span><h1><span><span><span>销毁</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>离线缓存用得好升职加薪，用不好就删库跑路。除了上面的一点点的防错逻辑，整体的降级方案一定要有。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>看到这里，应该已经忘了 Service Worker 是如何被注册上的吧。没事，我们看个新的脚本。在原本的基础上，我们加了个变量</span></span></span><span><span><code><span>SW_FALLBACK</span></code></span></span><span><span><span>，如果离线缓存出问题了，赶紧到管理后台，把对应的值改成</span></span></span><span><span><code><span>true</span></code></span></span><span><span><span>。让用户多刷新两次就好了。只要不是彻底的崩溃导致</span></span></span><span><span><code><span>html</span></code></span></span><span><span><span>无法更新，这个方案就没问题。</span></span></span></p><pre><code><span><span><span style="color:#708090">// 如果有问题，将此值改成 true</span></span><span><span></span></span><span><span style="color:#990055">SW_FALLBACK</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'serviceWorker'</span></span><span><span></span></span><span><span style="color:#0077aa">in</span></span><span><span> navigator</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span style="color:#990055">SW_FALLBACK</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    navigator</span></span><span><span style="color:#999999">.</span></span><span><span>serviceWorker
      </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">register</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'/eemf-service-worker.js'</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>registration</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">log</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'Service Worker 注册成功！'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">catch</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>error</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        console</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">log</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'Service Worker 注册失败：'</span></span><span><span style="color:#999999">,</span></span><span><span> error</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">else</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
    navigator</span></span><span><span style="color:#999999">.</span></span><span><span>serviceWorker</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getRegistration</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">'/'</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">then</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>reg</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
      reg </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> reg</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unregister</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span style="color:#999999">(</span></span><span><span>reg</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">{</span></span><span><span>
        window</span></span><span><span style="color:#999999">.</span></span><span><span>location</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">reload</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>对于没有管理后台配置</span></span></span><span><span><code><span>html</span></code></span></span><span><span><span>的项目，可以将上面的脚本移动到</span></span></span><span><span><code><span>sw-register.js</span></code></span></span><span><span><span>的脚本中，在</span></span></span><span><span><code><span>html</span></code></span></span><span><span><span>以</span></span></span><span><span><code><span>script</span></code></span></span><span><span><span>的形式加载该脚本，并将该文件缓存设置为</span></span></span><span><span><code><span>no-cache</span></code></span></span><span><span><span>，也不要在</span></span></span><span><span><code><span>sw</span></code></span></span><span><span><span>中缓存该文件。这样出问题后，覆写下该文件即可。</span></span></span></p><span id="OSC_h1_18"></span><h1><span><span><span>总结</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>所有要说的，在上面都说完了。PWA 的离线方案，是一种很好的解决方案，但是也有其局限性。本项目所用的 demo 已经上传到了</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsuilang%2FPWA-demo" target="_blank" rel="nofollow"><span><span><span>github</span></span></span></a><span><span><span>，可自行查看。</span></span></span></p><span id="OSC_h1_19"></span><h1><span><span><span>参考文档</span></span></span></h1><ul><li><span><span><span><span>﻿</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FService_Worker_API" target="_blank" rel="nofollow"><span><span><span>Service Worker</span></span></span></a><span><span><span>﻿</span></span></span></span></li><li><span><span><span><span>﻿</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fworkbox%2Fservice-worker-overview%2F" target="_blank" rel="nofollow"><span><span><span>Service worker overview</span></span></span></a><span><span><span>﻿</span></span></span></span></li><li><span><span><span><span>﻿</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevelopers.google.com%2Fweb%2Ftools%2Fworkbox" target="_blank" rel="nofollow"><span><span><span>Workbox</span></span></span></a><span><span><span>﻿</span></span></span></span></li><li><span><span><span><span>GPT 问答</span></span></span></span></li></ul><blockquote><p>作者：CHO 张鹏程</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 03:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10320663</guid>
            <link>https://my.oschina.net/u/4090830/blog/10320663</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[字节跳动就「OpenAI 服务被禁」做出澄清]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">日前有外媒报道称，字节跳动在使用 OpenAI 技术开发自己的大语言模型，违反了服务条款；从而导致被&nbsp;<span style="background-color:#ffffff">OpenAI 封禁了账号。</span></span></p><p><span style="color:#000000">OpenAI 发言人 Niko Felix 也发表了回复称，「所有的 API 用户都必须遵循我们的使用政策，以确保我们的技术被正当使用。虽然字节跳动使用我们的 API 不多，我们还是停了他们的账号，同时我们会进一步调查。如果我们发现字节跳动的使用没有遵循这些政策，我们会要求字节跳动做出必要的改变，或者完全终止其账号。」</span></p><p><span style="color:#000000"><img alt="" height="121" src="https://oscimg.oschina.net/oscnet/up-bfe96c04fc77632f0eab90187cd2c162ead.jpg" width="700" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">对此，字节跳动相关负责人向《科创板日报》回应称：今年年初，当技术团队刚开始进行大模型的初期探索时，有部分工程师将 GPT 的 API 服务应用于较小模型的实验性项目研究中。该模型仅为测试，没有计划上线，也从未对外使用。</span></p><p><span style="color:#000000">4 月公司引入 GPT API 调用规范检查后，这种做法已经停止。9 月，公司采取措施进一步保证对 GPT 的 API 调用符合规范要求。例如分批次抽样检测模型输出结果与 GPT 的相似度，避免数据标注人员私自使用 GPT。「未来几天里，我们会再次全面检查，以确保严格遵守相关服务的使用条款。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 17 Dec 2023 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271500</guid>
            <link>https://www.oschina.net/news/271500</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[商汤科技创始人汤晓鸥离世，享年 55 岁]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 16 日，腾讯新闻报道称，商汤科技董事长、人工智能科学家汤晓鸥于 12 月 15 日在睡梦中不幸离世，享年 55 岁。</p><p>汤晓鸥主要从事计算机视觉相关领域的研究，包括多媒体、计算机视觉、模式识别及视频处理，是全球人脸识别技术的「开拓者」和「探路者」。</p><blockquote><p><img height="1272" src="https://static.oschina.net/uploads/space/2023/1216/153402_su2B_2720166.png" width="1442" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fview.inews.qq.com%2Fa%2F20231216A051VT00" target="_blank"><span style="background-color:rgba(0, 0, 0, 0); color:inherit">https://</span>view.inews.qq.com/a/20231216A051<span style="background-color:rgba(0, 0, 0, 0); color:inherit">VT00</span></a></u></em></p></blockquote><p>最早的网传消息：</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1216/153606_97lp_2720166.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1644054135%2FNxokl6vOQ%3Fpagetype%3Dprofilefeed" target="_blank">https://weibo.com/1644054135/Nxokl6vOQ</a></u></em></p></blockquote><p>公开信息显示，汤晓鸥 1968 年出生于辽宁鞍山，香港中文大学信息工程学系教授、工程学院杰出学人。汤晓鸥于 1990 年从中国科学技术大学毕业；1991 年获得美国罗切斯特大学硕士学位；1996 年获得麻省理工学院博士学位，之后进入香港中文大学工作；2001 年创立了香港中文大学多媒体实验室；2005 年至 2007 年在微软亚洲研究院工作，担任视觉计算组主任；2008 年在深圳先进技术研究院多媒体集成技术研究室工作，担任主任和研究员。</p><p><img height="457" src="https://oscimg.oschina.net/oscnet/up-a417892a92b7c38cf49b69a36526d033f48.png" width="300" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">汤晓鸥指导的博士生何恺明是深度残差网络 (ResNets) 的主要开发者。深度残差网络</span>使神经网络能够达到前所未有的深度，获得以前难以实现的能力，促成了多个突破性的成果——包括 AlphaGo、AlphaFold 和 ChatGPT，为人工智能做出了基础性贡献。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Dec 2023 07:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271336</guid>
            <link>https://www.oschina.net/news/271336</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 设立 1000 万美元基金，支持超人类 AI 风险研究]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OpenAI <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenai.com%2Fblog%2Fsuperalignment-fast-grants" target="_blank">宣布</a>与 Eric Schmidt 合作，启动了一项 1000 万美元的新资助计划，以支持技术研究，确保超人类人工智能（superhuman AI）系统的一致性和安全性。</span></p><p><span style="color:#000000">「<span style="background-color:#ffffff">我们相信超级智能可能在未来十年内到来。这些人工智能系统将拥有巨大的能力 —— 它们可能带来巨大的好处，但也可能带来巨大的风险。</span>」</span></p><p><img height="249" src="https://oscimg.oschina.net/oscnet/up-76bbf42b019b3dacb6d1b9184ea8dcc692a.png" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">该公司表示，当前确保 AI 系统安全的手段主要是依赖于人工监督的对齐技术（例如 RLHF）。但超</span>人类&nbsp;AI&nbsp;<span style="background-color:#ffffff">系统将能够执行人类无法完全理解的复杂且富有创造性的行为。例如，如果一个超人模型生成一百万行极其复杂的代码，人类将无法可靠地评估这些代码执行起来是安全还是危险，现有的技术可能不再够用。&nbsp;</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">「这就引出了一个根本性的挑战：人类如何引导和信任比自己聪明得多的人工智能系统？这是世界上尚未解决的最重要的技术问题之一。但我们认为，只要齐心协力，这个问题是可以解决的。现存<span style="background-color:#ffffff">许多有希望的方法和令人兴奋的方向，以及许多唾手可得的成果。</span>」</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">作为其 Superalignment 项目的一部分，OpenAI 推出的这一资助计划旨在：</span></p><ul><li style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">向学术实验室、非营利组织和个人研究人员捐赠 10 万至 200 万美元</span></span></li><li style="text-align:start"><span style="color:#000000">并<span style="background-color:#ffffff">为研究生推出为期一年的 15 万美元奖学金（一半将用于研究经费，另一半将作为津贴）</span></span></li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">根据 OpenAI 的说法，申请这一资助资金的研究人员不要求有对齐工作的经验，他们已准备好为尚未在这方面做过任何工作的研究人员提供支持。</span></span><span><span><span><span style="color:#585858"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fairtable.com%2FappnIXmOlWAJBzrJp%2FpaghnoKL6EHiKmKbf%2Fform" target="_blank"><span><span><span>申请</span></span></span></a></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="color:#000000"><span style="background-color:#ffffff">将持续开放至 2 月 18 日，申请人将在申请截止日期后四个星期内收到回复。&nbsp;</span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fairtable.com%2FappnIXmOlWAJBzrJp%2FpaghnoKL6EHiKmKbf%2Fform" target="_blank">申请表单</a></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Dec 2023 03:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271307/openai-superalignment-grant-fund</guid>
            <link>https://www.oschina.net/news/271307/openai-superalignment-grant-fund</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[今年我国语言大模型市场增长率将超 100%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">据央视新闻报道，工业和信息化部赛迪研究院数据显示，2023 年我国语言大模型市场规模实现较快提升，应用场景不断丰富，增长率有望突破 100%。</span></p><p><span style="background-color:#ffffff; color:#222222">工业和信息化部赛迪研究院数据显示，目前，我国已有超过 19 个语言大模型研发厂商，其中，15 家厂商的模型产品已经通过备案，预计今年我国语言大模型市场规模将达到 132.3 亿元，增长率将达到 110%。</span></p><p><span style="background-color:#ffffff; color:#222222">语言大模型能够模仿人类的对话和决策能力，是率先实现技术突破和应用落地的大模型，是当下人工智能的主赛道，在金融、医疗、教育、工业、游戏、法律等多个行业应用广泛。专家预测，到 2027 年，我国语言大模型市场规模有望达到 600 亿元。</span></p><p><img height="273" src="https://oscimg.oschina.net/oscnet/up-256c6498333f3d9198b73f867a58b33c90d.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Dec 2023 03:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/271303</guid>
            <link>https://www.oschina.net/news/271303</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 分布式块存储系统 fastblock]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-fastblock 简介" class="anchor" href="https://gitee.com/openeuler/fastblock#fastblock%E7%AE%80%E4%BB%8B"></a>fastblock 简介</h1><p>目前使用的分布式块存储系统 (ceph) 存在的问题已经不能适应对性能、延迟、成本和稳定性的需求，主要体现在:</p><ul><li>CPU 经济性: 目前需要消耗大量的 CPU，CPU 在 nvme ssd 集群中成为瓶颈</li><li>可用性差: 采用主从强同步复制策略, 集群抖动时有 IO 会被 hang 住</li><li>单卷性能不足: 对接 qemu 时性能更差，做压测时需要多个卷才能跑满整个集群的性能</li><li>单卷延迟过大: 不能充分利用 nvme 设备的低延迟特性，rbd 块设备通常延迟都在毫秒级别</li><li>并发总性能不足: iops 和吞吐相对硬件能够提供的水平相差较大</li></ul><p>fastblock 是为解决性能和延迟问题而生的，它的特点是:</p><ul><li>使用 spdk 编程框架编写，利用用户态 nvme 驱动、无锁队列等特性降低 IO 路径延迟</li><li>引入 RDMA 网卡进行零拷贝、内核旁路、无需 CPU 干预的网络通信</li><li>使用 multi-raft 进行数据复制，保证数据可靠性</li><li>简单、可靠、易定制的集群元数据管理</li></ul><h1><a id="user-content-fastblock 设计及架构" class="anchor" href="https://gitee.com/openeuler/fastblock#fastblock%E8%AE%BE%E8%AE%A1%E5%8F%8A%E6%9E%B6%E6%9E%84"></a>fastblock 设计及架构</h1><p>fastblock 的架构跟 ceph 非常类似，且 monitor、osd、pg 等众多概念都跟 ceph 一样以便于快速理解，架构如下图所示:<br><img src="https://gitee.com/openeuler/fastblock/raw/master/docs/architecture.png" alt="arch" referrerpolicy="no-referrer">
其中:</p><ul><li>Compute 表示计算服务</li><li>Monitor cluster 负责维护集群元数据（包括 osdMap、pgMap、pool 信息和 image 信息），以及 pool 和 pg 的管理。</li><li>storage cluster 对应存储集群，每个存储集群包含多个 Storage Node，每个 Storage Node 上运行多个 osd(Object Storage Daemon)。</li><li>Control rpc 用于传输元数据，使用 tcp socket；Data rpc 用于在客户端和 osd 之间传输数据请求；raft rpc 用于在 osd 之间传输 raft 论文中定义的 RPC 消息。其中 Data rpc 和 raft rpc 使用 protobuf 和 RDMA。</li><li>Monitor Client 是 monitor 客户端模块，用于跟 monitor 通信。</li><li>Command Dispatcher 是消息处理模块，用于接收处理客户端的数据请求。</li><li>raft Protocol Processer 用于处理 raft RPC 消息、选举、成员变更等 raft 协议规定的内容。</li><li>raft Log Manager 负责管理和持久化 raft Log，持久化 raft Log 使用了 spdk blob。</li><li>Data State Machine 存储用户数据，使用了 spdk blobstore。</li><li>raft Log Entry Cache 用于缓存 raft Log，提高性能。</li><li>KV System 则提供 kv api，持久化时使用了 spdk blob。</li></ul><h1><a id="user-content-fastblock 组件及交互逻辑" class="anchor" href="https://gitee.com/openeuler/fastblock#fastblock%E7%BB%84%E4%BB%B6%E5%8F%8A%E4%BA%A4%E4%BA%92%E9%80%BB%E8%BE%91"></a>fastblock 组件及交互逻辑</h1><h2><a id="user-content-monitor" class="anchor" href="https://gitee.com/openeuler/fastblock#monitor"></a>monitor</h2><p>monitor 服务负责维护存储节点状态和节点加入删除、存储卷的元数据、维护集群的拓扑结构、响应用户创建 pool 等操作、根据当前的拓扑结构在 osd 上均匀创建 raft group 等。monitor 作为集群管理工具，并不需要存储数据，也不需要追求极致性能，所以使用 golang 进行实现, monitor 使用 etcd 进行多副本存储。<br>
monitor 集群是一致性的重要保证，因为客户端、osd 看到的都是相同的视图。对于所有客户端的 io 操作都只能看到 pg 这一层，而 osd 和客户端都会在启动时开启一个定时器定时去向 monitor 获取 osdmap 和 pgmap 信息，所以所有的 osd 和客户端都能够看到相同的 pg 状态变化并作出相同的相应，针对特定 pg 的写入操作也不会写到错误的地方。<br>
详情可参考<a href="https://gitee.com/openeuler/fastblock/blob/master/monitor/README.md" title="monitor 简介">monitor 简介</a></p><h2><a id="user-content-osd-rpc 子系统" class="anchor" href="https://gitee.com/openeuler/fastblock#osd-rpc%E5%AD%90%E7%B3%BB%E7%BB%9F"></a>osd rpc 子系统</h2><p>rpc 子系统是连接各模块的重要系统，出于异构网络的要求，rpc 子系统的实现了两种方式，即基于 socket（Control rpc）的和基于 rdma（Data Rpc 和 Raft Rpc）的，基于 socket 的就是经典的 linux socket 应用场景，而基于 rdma 的 rpc 则是使用异步 rdma(即 rdma write) 语义实现的。<br><img src="https://gitee.com/openeuler/fastblock/raw/master/docs/rpc_subsystem.png" alt="rpc 子系统" referrerpolicy="no-referrer">
上图是 fastblock 中各个模块之间的联系，由图中可以看出使用了三种类型的 rpc，分别为 Control Rpc、Data Rpc 和 Raft Rpc:
Control rpc： 用于在客户端与 monitor 之间，osd 与 monitor 之间传递 osdmap、pgmap 和 image 信息等数据，这些数据量不大，频率不高，因此可以使用基于 socket 的实现;
Data rpc：用于在客户端与 osd 之间传输对象数据操作和结果，这些数据量比较大，频率会很高，因此需要基于 rdma 的方法;
Raft rpc： 用于在 osd 之间传输 raft rpc 协议内容，里面会保护对象数据，这些数据量比较大，频率会很高，因此需要基于 rdma 的方法。
Data rpc 和 Raft rpc 使用 protobuf 的 RPC 框架，网络交互部分代码使用 RDMA,rpc 传输数据的序列号都使用 protobuf。</p><h2><a id="user-content-osd-raft 子系统" class="anchor" href="https://gitee.com/openeuler/fastblock#osd-raft%E5%AD%90%E7%B3%BB%E7%BB%9F"></a>osd raft 子系统</h2><p>raft 通过选举一个领导人，然后给予他全部的管理复制日志的责任来实现一致性。领导人从客户端接收日志条目（log entries），把日志条目复制到其他服务器上，并告诉其他的服务器什么时候可以安全地将日志条目应用到他们的状态机中。 raft 在已经有很多开源实现，我们参考<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwillemt%2Fraft" title="raft 的 C 语言实现">willemt</a>的 C 语言 raft 实现，并额外实现了 multi-raft，这个模块主要包括了:</p><ul><li>raft groups 的管理，包括 raft 的创建、修改和删除;</li><li>raft 选举以及选举超时处理;</li><li>raft log 处理，包括 log 缓存、log 落盘和 log 复制到 follower 节点;</li><li>数据 state machine 处理，既数据落盘;</li><li>raft 快照管理和 raft log recovery;</li><li>raft 成员变更管理 (暂未实现);</li><li>raft 心跳合并。</li></ul><p>实现 multi-group raft,意味着有多个 raft 并存，每个 raft 的 leader 需要给它的 follower 发送心跳包，因此就会有多个心跳包，如果 raft 过多就会导致心跳包过多，占用大量的带宽和 cpu 资源。解决方法也很简单，每个 osd 可能属于多个 raft，因此可以对相同 leader、相同 flower 的 raft 进行心跳的合并，这样就可以减少心跳包数量。如下图所示，有两个 pg（raft）分别为 pg1 和 pg2，pg1 和 pg2 中都包含 osd1、osd2 和 osd3，osd1 是 leader，osd1 需要给 osd2 和 osd3 分别发送 heartbeat (pg1)，pg2 中 osd1 需要给 osd2 和 osd3 分别发送 heartbeat (pg2)。心跳合并后，只需要 osd1 给 osd2 和 osd3 分别发送 heartbeat (pg1, pg2)。
<img src="https://gitee.com/openeuler/fastblock/raw/master/docs/heartbeat_merge.png" alt="心跳合并" referrerpolicy="no-referrer"></p><h2><a id="user-content-osd-kv 子系统" class="anchor" href="https://gitee.com/openeuler/fastblock#osd-kv%E5%AD%90%E7%B3%BB%E7%BB%9F"></a>osd kv 子系统</h2><p>kv 子系统用于存储 raft 的元数据、存储系统本身的数据，由于数据量不大，就自己设计了一套。因为数据量不大，内存中的 hash map 就可以存储所有数据，提供 put、remove 和 get 接口，每隔 10ms 把 hash map 中修改的数据写到磁盘中。</p><h2><a id="user-content-osd-localstore 子系统" class="anchor" href="https://gitee.com/openeuler/fastblock#osd-localstore%E5%AD%90%E7%B3%BB%E7%BB%9F"></a>osd localstore 子系统</h2><p>本地存储基于 spdk blobstrore 进行存储，包含 3 个存储功能模块：</p><ul><li>disk_log: 存储 raft log，一个 pg(对应一个 raft 组) 对应一个 spdk blob。</li><li>object_store: 存储对象数据，一个对象对应一个 spdk blob。</li><li>kv_store: 每个 cpu 核拥有一个 spdk blob。保存当前 cpu 核上的需要保存的所有 kv 数据，包括 raft 的元数据、存储系统本身的数据。
如下图所示，假设我们运行了两个 raft，localstore 为这两个 raft 提供了 log、object 和 kv 这 3 部分存储功能。
<img src="https://gitee.com/openeuler/fastblock/raw/master/docs/osd_localstore.png" alt="本地存储引擎" referrerpolicy="no-referrer"></li></ul><h2><a id="user-content-客户端" class="anchor" href="https://gitee.com/openeuler/fastblock#%E5%AE%A2%E6%88%B7%E7%AB%AF"></a>客户端</h2><p>客户端用于创建、修改和删除 image，把用户对 image 的数据操作转换为对 object（osd 处理的基本数据单元）的操作，然后封装为 Data Rpc 消息发送给 pg 的 leader osd，并接收处理 leader osd 返回的响应，结果返回给用户。 客户端有多种模式：使用 spdk vhost 提供给虚拟机使用；使用 NBD 提供给裸金属使用；使用 CSI 提供给虚拟机使用。这三种模式最终都会调用 libfastblock 库进行 image 到 object 的转换，并和 osd 通信。 下面主要介绍使用 spdk vhost 提供给虚拟机使用的模式:<br>
调用 spdk 库创建一个 vhost app，spdk 资源初始化后，需要开启一个定时器去向 monitor 获取 osdmap、pgmap 和 image 信息。
使用 spdk 的 rpc.py 脚本向 vhost app 发送创建 bdev（bdev_fastblock_create）的请求，vhost app 收到请求后创建 image，把 image 信息发送给 monitor，创建 bdev 设备，然后注册此设备的操作接口（此接口会调用 libfastblock 库）。
使用 spdk 的 rpc.py 脚本向 vhost app 发送创建 bdev 的 vhost-blk controller（vhost_create_blk_controller）的请求，vhost app 收到请求后打开 bdev 设备，注册一个 vhost 驱动去处理 vhost 消息（创建一个可供客户端 (如 qemu) 连接的 socket，并遵循 vhost 协议实现连接服务，这是 DPDK 中已实现的功能）。
libfastblock 把用户对 image 的数据操作转换为对 object（osd 处理的基本数据单元）的操作，然后封装为 Data Rpc 消息发送给 pg 的 leader osd，并接收处理 leader osd 返回的响应。</p><h1><a id="user-content-代码结构及编译" class="anchor" href="https://gitee.com/openeuler/fastblock#%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84%E5%8F%8A%E7%BC%96%E8%AF%91"></a>代码结构及编译</h1><p>fastblock 代码主要位于 src、monitor 和 spdk 目录中:</p><ul><li>src 目录主要包含 raft 实现、rdma 通信、底层存储引擎、块层 API 封装等功能, 详情见<a href="https://gitee.com/openeuler/fastblock/blob/master/src/README.md" title="src 代码简介">src 目录简介</a></li><li>monitor 目录则包含了集群元数据存储管理、monitor 选举、pg 分配、clustermap 分发等功能, 详情见<a href="https://gitee.com/openeuler/fastblock/blob/master/monitor/README.md" title="monitor 代码简介">monitor 目录简介</a></li><li>spdk 目录是通过复用 spdk 的 rdma 通信模块以支撑低延迟的 rpc 通信, 详情见<a href="https://gitee.com/openeuler/fastblock/blob/master/spdk/README.md" title="spdk 目录简介">spdk 目录简介</a>
编译之前需要先安装依赖，目前已进行了 ubuntu 21.10 和 openEuler 22.03 版本的验证，其他操作系统可酌情更改.</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">./install-deps.sh</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>首次编译时，需要获取 spdk 和 abseil-cpp 等依赖，可通过运行以下命令分别编译 Release 版本的 montior 和 osd:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">./build.sh -t Release -c monitor</span><span id="LC2" class="line">./build.sh -t Release -c osd</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>编译完成后，<code>fastblock-mon</code>和<code>fastblock-client</code>二进制位于<code>mon/</code>目录下，而<code>fastblock-osd</code>和<code>fastblock-vhost</code>二进制位于<code>build/src/osd/</code>目录和<code>build/src/bdev</code>目录下。
后续 osd、vhost 有代码改动，则可仅在<code>build/</code>目录下编译，而 monitor 有改动则可仅在<code>mon/</code>目录下<code>make</code>即可。</p><h1><a id="user-content-部署及性能测试" class="anchor" href="https://gitee.com/openeuler/fastblock#%E9%83%A8%E7%BD%B2%E5%8F%8A%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95"></a>部署及性能测试</h1><p>参考<a href="https://gitee.com/openeuler/fastblock/blob/master/docs/performance_test_1012.md" title="性能测试报告">部署及测试报告</a>, 在我们的测试环境中，在每个 osd 仅适用一个核的情况下，获得了 4k 随机写单线程 100us 以下的延迟以及并发 41 万 iops 的性能。</p><h1><a id="user-content-future-works" class="anchor" href="https://gitee.com/openeuler/fastblock#future-works"></a>future works</h1><ul><li>实现卷快照、快照组等功能</li><li>实现卷 QoS</li><li>osd 和 client 多核性能优化</li><li>实现本地存储引擎的可恢复性，以及本地存储引擎优化</li><li>添加测试系统，进行单元测试、集成测试，特别是 raft 层和本地存储引擎的故障测试</li><li>接入 CI 系统</li><li>实现可定制的 monitor 的 pg 分配插件</li><li>实现 raft 成员变更及与 monitor 的 pg 分配整体联调</li><li>优化 osd client 的 rdma 连接管理</li><li>重写 rdma 传输层以替换 spdk nvmf 版的 rdma 传输层</li><li>支持 DPU 卸载 vhost</li><li>监控数据导出及集群运行时数据展示</li><li>部署工具开发及系统配置文件简化</li><li>支持卷加解密功能</li><li>支持卷共享</li></ul>]]>
            </description>
            <pubDate>Sat, 16 Dec 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/openeuler/fastblock</guid>
            <link>https://gitee.com/openeuler/fastblock</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何做到人均告警减少 90%？B 站新一代告警平台的设计与实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一分钟精华速览</h1><p>B 站的业务规模和用户群体不断扩大，对于服务的稳定性和可用性的要求也日益增高。这就需要 B 站的监控告警系统能够及时、准确地发现和定位问题，以便尽快解决，维护好用户的使用体验。</p><p>本文是对 B 站在告警监控系统上的一次重要迭代和优化的详细记录。文章详细阐述了 B 站对告警平台设计思路和优化迭代，以及在实现过程中遇到的问题和解决方法。特别是对于告警定位的精准性和定位效率的提升，文章给出了新的设计方案和实践方法。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1c59a16c99cd6269dbb40c664c5cf2055c4.png" alt="file" referrerpolicy="no-referrer"></p><h1>作者介绍</h1><p><img src="https://oscimg.oschina.net/oscnet/up-a440bfaf0e2d837fc556f9759e77fe1f9e6.png" alt="file" referrerpolicy="no-referrer"></p><p>哔哩哔哩资深开发工程师——王程田</p><p>TakinTalks 稳定性社区专家团成员，哔哩哔哩资深开发工程师。2020 年加入 B 站先后负责事件平台，链路追踪，AIOps 及告警平台方向技术演进 &amp;平台迭代。完成了新一代告警平台落地，达成了 99 分位一分钟内的异常端到端发现，实现了人均告警从每周 1000+条/人到 70+条/人告警治理上的突破。</p><p>温馨提醒：本文约 6000 字，预计花费 8 分钟阅读。</p><p>TakinTalks 稳定性社区后台回复 「交流」 进入读者交流群；回复「1130」获取课件；</p><h1>背景</h1><p>在 B 站的多元化业务中，告警平台起着至关重要的作用。无论是视频播放、弹幕发送、用户评论、直播间管理，还是后台的内容审核、数据统计等，都离不开系统的稳定运行。告警平台可以实时监控这些业务系统的运行状态，一旦出现异常，就会及时发出告警示，使运维人员能够迅速定位问题，及时进行处理。</p><p>然而，维护这些业务的稳定运行并非易事。从告警发生的前、中、后三个阶段，即生产端、传输端和消费端来看，B 站的告警平台设计都面临着不小的挑战和复杂性。 <img src="https://oscimg.oschina.net/oscnet/up-1dd0249404eb178d97848101b0fd3492b8f.png" alt="file" referrerpolicy="no-referrer"></p><p>考虑到这些业务需求和复杂度，我们着手对 B 站新一代告警平台进行了全面升级，结果达成了人均告警减少 90%，根因分析准确率高达 87.9% 的突破。在本文中，我将概述新一代告警平台的设计理念，并重点分享该平台在告警降噪和告警智能化分析方面的实施策略。</p><h1>一、告警平台做了哪些重点设计？</h1><h2>1.1 业务核心诉求</h2><p>在告警平台的设计和迭代过程中，我们不断收到各类业务需求。总体上，这些需求的核心都集中在「以质量为中心，及时发现并处理异常，确保业务稳定性」。具体来说，需求场景可划分为风险场景和故障场景。在风险场景中，需要提前感知并有效应对潜在问题；而在故障场景中，需要迅速发现线上问题，及时响应，以实现快速恢复。</p><p>在满足这些业务需求的过程中，我们提炼出三个核心诉求和目标：</p><p>有效性：我们期望所有收到的告警都是有效的，即每次接收到告警时，都确实存在异常，而且这条告警对当前的接收者是具有意义的。</p><p>及时性：对于高优先级的异常，我们希望能在第一时间触达并被用户感知，以便他们能够及时采取行动进行处理。</p><p>覆盖性与跟进：我们期望实现告警的全面覆盖和跟进。从用户的角度来看，他们希望所有自己负责的业务或应用的场景都能被告警覆盖，同时，他们也希望能了解不同场景的告警覆盖情况。当规则产生异常后，用户需要有一个便捷的方式去快速处理并跟进解决问题。</p><h2>1.2 告警平台详细设计</h2><h3>1.2.1 闭环模型</h3><p>在告警平台的详细设计中，我们基于前述的目标和业务需求，构建了一个闭环模型。这个模型旨在保证各关联方的积极参与，从而推动目标的持续改善。特别的，告警定义和告警治理是模型中的两个关键环节，因为它们决定了告警降噪和召回效果的优劣。 <img src="https://oscimg.oschina.net/oscnet/up-412a40c1cfbb39cb0c17812de113d3f3d26.png" alt="file" referrerpolicy="no-referrer"></p><p>接下来将详细介绍 B 站告警定义、检测、通道侧功能的设计。重点是告警处理、根因分析以及告警治理侧的实践内容。</p><h3>1.2.2 告警接入</h3><p>在告警接入环节，主要区分了三个场景，这些场景的设计可以覆盖业务对于告警接入的大部分需求。</p><p>1）面向平台的场景</p><p>我们为平台覆盖的告警场景提供告警规则和模板的开放接口能力，支持多租户规则集成。不同租户可以基于预定义的模板进行配置，可以在业务申请或者注册资源时，快速完成告警的定义和覆盖，整个过程成本低，便捷性高。</p><p>2）面向自定义场景</p><p>我们为业务直接开放告警规则定义，包括规则的触发条件配置、表达式及通知策略的配置。</p><p>3）面向第三方事件</p><p>我们开放事件集成能力，用户可以通过注册事件完成准入，主动触发方式发送到告警平台，告警平台完成后续闭环的处理。</p><h3>1.2.3 告警计算</h3><p>我们设计了一个分布式的告警计算引擎，实现了多级的调度。基于线上全量生效的规则，进行全局调度，将告警的场景、可用区调度到不同的可用区和计算集群下。在同一个计算集群下，进行本地调度，将任务调度到不同的计算节点，实现负载均衡。计算节点会周期性地检测数据判断告警是否触发，触发后将投递到告警通道。 <img src="https://oscimg.oschina.net/oscnet/up-6dd8eb1e13f1625434405ab2a73c51430a1.png" alt="file" referrerpolicy="no-referrer"></p><h3>1.2.4 告警通道</h3><p>主要做降噪、渲染、分发，以实现准确的投递和快速的触达。对于引擎侧产生的告警事件，在通道会生成告警消息，然后先经过降噪模块，依次完成通知窗口拦截、通知频率拦截、接警拦截、静默拦截、抑制拦截、告警聚合等。接下来，经过告警渲染分发模块，完成渲染接收人、渲染通知通道、渲染通知模板，最终触达到用户并更新告警的投递状态。 <img src="https://oscimg.oschina.net/oscnet/up-9ceb09b7a6a29d8ed6874d76ba957d1e1c1.png" alt="file" referrerpolicy="no-referrer"></p><h1>二、告警治理有哪些实践心得？</h1><p>下面我将主要阐述 B 站在告警治理的实践过程中，如何推行告警治理策略，降低告警噪声，以及提高告警的有效性。</p><h2>2.1 告警治理背景</h2><p>过去一段时间里，B 站的告警通知泛滥问题，对技术团队和平台来说，这已经成为一个多年的困扰，也是一个较大的痛点。一方面，随着稳定性问题的出现以及新平台的接入，告警规则和配置不断增加；另一方面，又缺乏有效的告警治理和运营分析机制。这导致告警数量越来越多，很多用户也不会去主动治理告警，反而选择设定免打扰。最后，真实的风险和异常往往被淹没在众多告警中，无法第一时间被感知到。</p><p>用一句话来概括，就是「太多的告警就相当于没有告警」。</p><h2>2.2 问题分析</h2><p>我们认为，这主要由以下四部分原因导致：</p><p>告警定义不合理：很多规则缺乏有效的维护，大量的规则在触发后，并不代表有异常发生，业务也不会去处理。此外，有些告警的粒度太细，导致同一异常触发后产生大量的告警，放大了整个通知的影响。</p><p>通知人数放大：由于历史组织架构的变更或临时排查问题，定位权限相耦合，导致服务树长期缺乏治理，造成告警通知人数的大幅度放大，经常发给一些无关的人员。</p><p>缺少分析治理工具：虽然大家都知道告警太多了，需要治理，但是却没有头绪，也没有合适的平台能力帮助他们分析告警主要集中的部分，从而进行有针对性的治理。</p><p>缺乏有效的运营机制：大家对治理告警的动力不足，同时也缺乏有效的机制和规范约束。在历史上可能经过一些短期治理后，告警又出现反弹，治理效果就不复存在。</p><h2>2.3 告警治理的三个阶段</h2><p>在分析了告警泛滥的原因后，我们开始了告警治理，这个过程主要分为三个阶段。 <img src="https://oscimg.oschina.net/oscnet/up-88282d9da6f4baae2fd9486d47eae1f9705.png" alt="file" referrerpolicy="no-referrer"></p><p>第一阶段：目标设定</p><p>经过多轮的会议和讨论，我们确定了告警数的指标，将原先每周超过 1000 条的告警数量降低到每周 80 条。这个目标在初始阶段看起来几乎是不可能完成的。然而，我们认为这 80 条告警是一个业务人员能够逐条响应处理的合理范围。于是，我们坚持以这个目标去执行，并尽力去达成。</p><p>第二阶段：数据分析</p><p>我们将告警数据集成到数据仓库中，提供了多维度的分析视图，为告警治理提供了数据支持。通过计算公式来确定影响因子，公式基于告警通知数量，即：告警通知数量=告警数<em>每次触发通知的人数</em>降噪系数。这个公式帮助我们明确了治理的方向和重点。</p><p>第三阶段：治理动作</p><p>在这个阶段，我们开始执行一系列治理动作。</p><p>首先，优化了告警项，与 SRE 和平台同事一起评估了默认告警项的合理性，对无效的告警项进行了关闭处理。对于一些不合理的告警项，我们评估并优化了其表达式和默认阈值等条件，以降低告警噪声并提高告警的有效性。</p><p>其次，为了解决通知人数放大的问题，优化了告警接收人的设置。我们深度参与并推动了服务树研发和负责人角色的校准，并推出了值班，升级等能力，以缩小告警的通知范围，有效地降低了通知人数放大的噪声。</p><p>最后，丰富了通道的告警降噪策略，支持了规则组的微调拦截能力，以及多维度下的告警汇总和聚合能力，从而更高效降低了告警噪声。</p><h2>2.4 告警治理过程经验总结</h2><p>在进行了一系列的告警治理行动后，我们对治理过程进行了总结和思考。主要从以下三个方面进行分享：</p><p>1）异常召回是底线</p><p>在整个治理过程中，集中处理的主要是无效的噪声告警，然而，绝不能忽视真实且有效的告警。在治理中，我们始终坚守一个原则，即不能牺牲异常的召回率。因此，我们将注意力集中在那些持续触发、重复触发以及异常放大等不合理的规则上，以及 Top 级别的规则上，并对这些问题进行专项治理。</p><p>2）运营推进不可少</p><p>实际上，治理过程就是一个运营推进的过程。在这个过程中，创建了数十个群组，制定了无数的治理、推进和跟进文档，以确保整个密集且强制性的告警治理工作的落实。同时，也与各个场景平台以及 SRE 进行了紧密合作，共同推动了告警治理工作。</p><p>3）分层分级抓重点是方向</p><p>我们借鉴了毛剑老师的理念，强调分层分级，抓住重点，尤其是保证业务可用性的核心告警。对于事件类的告警，建议记录并可查询，以避免淹没其他重要的告警通知。对于一些不适合直接通知业务侧的依赖告警，建议通过关联的方式来呈现，这样可以有效地降低告警的噪声。</p><h2>2.5 告警治理效果</h2><p>近半年地推式的告警治理，告警数据得到显著改善：</p><p>中位数告警 1000 次/周减少到 74 次/周，减少到原来的 7.4%；</p><p>整体告警通知数从治理前 300w+减少到 22w+，减少到原来的 7%；</p><p>人均告警通知数从 1600+减少到 140，减少到原来的 8.8%； <img src="https://oscimg.oschina.net/oscnet/up-4aaba5026a5563dc1f202fb6d8ec6184710.png" alt="file" referrerpolicy="no-referrer"></p><h2>2.6 建立长效治理机制</h2><p>为了确保告警治理所取得的成果能够持续稳定，我们构建了一套长效治理机制，具体包含以下三个方面：</p><p>1）便捷治理分析工具</p><p>包含了一个告警治理分析大盘，它被集成在告警平台上。这个大盘支持从业务、个人和公司等多个视角，通过多个维度对告警的分布和趋势进行分析。此外，我们还利用了一些治理工具，为快速治理提供了必要的能力。</p><p>2）数据报表订阅</p><p>我们与 SRE 各个组件平台达成了共识，制定了共同的目标，并生成了各类数据报表的订阅。持续跟进这些报表，以防止告警的恶化，并持续进行告警治理。 <img src="https://oscimg.oschina.net/oscnet/up-c3811ee980a3d066894a0537c26b3846b35.png" alt="file" referrerpolicy="no-referrer"></p><p>3）接入管控</p><p>针对新接入的规则和平台场景，增加了一些告警数据接入的人工校验，以及平台侧的校验和噪声监控。对于一些不合理的规则，我们会建议对应的接入方进行优化，以保持告警治理成果。</p><h1>三、告警根因分析是如何设计和应用的？</h1><p>结合当下业界广泛运用的前沿技术，例如异常检测、智能降噪、智能合并策略以及根因分析等，我将重点分享 B 站在根因分析方面的实践和实战经验。</p><h2>3.1 根因分析背景</h2><p>随着 SLO 体系的日益完善，更多的业务被接入到 SLO 体系中。这使得我们有了明确的异常定义和触发对象，能够更精确地实施根因分析。</p><p>此外，B 站已经设定了 「1-5-10」 的目标。目前，已经通过优化告警计算采集和通道，实现了 99 分位端到端一分钟内的问题发现。然而，对于 5 分钟的定位，仍存在一些瓶颈。定位过程过于依赖人工经验，存在一定的不确定性。人工专家经验因人而异，同时受场景影响，导致定位效率也不一致。另外，由于平台能力的建设和交互，以及一些极端情况下的响应延时，如凌晨故障或者出差等场景，都会影响定位效率。</p><p>最后，用户需求的积累也在不断增加。随着业务和基础设施的增长，人们越来越关注告警定位的效率，并积累了大量定位告警的经验。因此，对于根因分析的需求日益迫切，同时，根因分析的实施条件也逐渐成熟。</p><h2>3.2 根因分析设计</h2><h3>3.2.1 根因分析设计 1.0 版</h3><p>首先，我们采用了以 SLO 告警为基础的设计方案，对微服务架构下的黄金指标进行定位能力的设计，这就是 1.0 版根因分析设计。整个设计方案主要包含三个阶段。 <img src="https://oscimg.oschina.net/oscnet/up-9bd92ad17719b87e37ee6ac443eaf813c83.png" alt="file" referrerpolicy="no-referrer"></p><p>首阶段，我们监听 SLO 的告警触发，关联错误的范围和数据，然后基于这些数据分析日志指标，挖掘出异常的维度。例如，错误可能集中在特定集群的某个实例下，或者某个上游请求的某个接口。</p><p>第二阶段，我们根据这些错误维度，对应用侧的链路调用进行关联，找出异常期间的异常链路。通过聚合分析，能区分出耗时和错误的场景，通过关键路径分析和剪枝下钻的方式，定位到异常链路下的异常节点。</p><p>最后一阶段，将定位到的异常节点映射到知识图谱中，通过数据图谱关联到相关的数据库、缓存、消息队列、容器、机器、交换机、机柜、机房等信息。然后，结合异常、告警、变更等信息，通过关联分析模型进行打分推荐，最终推荐出可能的 Top 根因排序。</p><p>尽管这个 1.0 版的根因分析设计在某些场景下的准确率可以接受，但是它仍然存在一些瓶颈。</p><p><img src="https://oscimg.oschina.net/oscnet/up-54c493835c8d5726c828410f1bc25b115b6.png" alt="file" referrerpolicy="no-referrer"></p><h3>3.2.2 根因分析设计 2.0 版</h3><p>在设计 2.0 版的根因分析时，我们进行了全面的调研，深入了解了业界资深的 SRE 和业务同事们在定位问题时的过程。</p><p>总结下来，这个过程主要是：在告警触发后，根据专家的经验，关联到具体的异常事件；然后再根据这些经验，分析这个异常可能由哪些原因导致，并找出这些原因的相关指标和日志等观测数据；最后，通过观察这些数据，判断出导致异常的根源。</p><p>在设计 2.0 版的过程中，我们力求将这个过程普遍化，并构建一个异常知识图谱，将专家的经验沉淀下来。同时，也开放了根因分析的集成和知识目录的功能，提供通用的根因分析能力。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e5caf92711bcb72bd249bb36169653cf1be.png" alt="file" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-f219736ec60c443fe1e4c5ee319640d9a75.png" alt="file" referrerpolicy="no-referrer"></p><p>根因分析的实现主要围绕知识的定义。这里的知识主要是基于异常节点定义。每个异常都会定义在具体的某个实体节点下，例如某个应用或某个数据库的集群实例。每个异常都会关联到具体的数据节点，比如日志、指标、告警等，通过这些数据我们可以检测和判断异常的发生。同时，异常之间也存在传导关系，一个异常可能由哪些异常导致，这些异常之间的传导链路和关联关系是怎样的。这就是我们在知识工程中定义的整个知识结构。</p><p>这种基于知识图谱的根因分析方式，很好地解决了 1.0 版中遇到的问题。使我们能够更深入地理解异常发生的原因，更准确地定位到问题的根源。通过将专家的经验进行系统化的沉淀，不仅提高了问题定位的效率，也使得知识的传承和积累成为可能。</p><h3>3.2.3 AIOps 算法支持</h3><p>根因分析的能力建设，离不开 AIOps 算法的支撑。目前，我们已经构建了一个全面的算法体系，设计了指标、日志、事件、链路等多个场景。同时，也根据不同类型的数据，支持了时序预测、异常检测、指标分类以及日志聚类、多维下钻，和事件聚类、链路分析等多个场景的算法能力。 <img src="https://oscimg.oschina.net/oscnet/up-59882e82b01a1f6dfdd569508b48de9e812.png" alt="file" referrerpolicy="no-referrer"></p><h3>3.2.4 关联分析模型升级</h3><p>在关联分析的过程中，我们将异常图通过特征构建、模型加载，基于模型推理预测并打分，最终推荐出异常的根因和传导路径。特征设计包括：时间依赖特征、图关系/距离特征、因果特征、路径相似特征、事件类别特征。</p><p>模型构建方面，在初期主要是基于冷启动的方式，预定义了一些异常之间的传播系数。随着样本标注数据的增多，开始进行模型的训练，并基于模型进行推理和推荐。此外，我们也支持 GBDT 模型，以进一步提升关联分析能力。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d6b0445d907edbb174e1774270aaad5e9fe.png" alt="file" referrerpolicy="no-referrer"></p><h2>3.3 难点和重点</h2><p>在根因分析的过程中，我们面临着一些难点和重点。难点主要在于，如何有效评价推荐的根因，以及如何获取用户的准确率和评价数据。这对于评估不同版本，以及根因分析的准确率和有效性，以及帮助模型进行迭代至关重要。为了解决这个难题，我们进行了以下四部分工作：</p><p><img src="https://oscimg.oschina.net/oscnet/up-5420196edcfd8b93bbbd8b23c00f71ee132.png" alt="file" referrerpolicy="no-referrer"></p><p>在整个过程中，一个重点是围绕专家经验的收集和构建。我们会与不同业务和 SRE 同学深度沟通，梳理相关的异常知识和专家经验，完成这部分知识的定义。</p><p>对于组件方面，我们会与相关同学持续完善这部分知识的定义和构建能力。针对一些特殊场景，也会提供外部专家经验的集成方案，提供根因分析的集成能力和接口，让外部的根因也可以通过分析能力完成，实现人工告警的推荐、展示和评价。</p><h2>3.4 案例分析</h2><h3>3.4.1 上游流量突增导致服务限流，可用率下降</h3><p>在这种情况下，可以基于告警关联到具体服务的 SLO 异常，并且下钻得到具体的异常接口和错误。同时，通过异常关联分析可以检测到上游的流量突增，明确具体哪一个入口的流量突增。有了这些信息，业务侧可以对上游的服务进行一些限流的配置并进行修复。</p><p><img src="https://oscimg.oschina.net/oscnet/up-447ee94180d00bc126ef72c16b89a733600.png" alt="file" referrerpolicy="no-referrer"></p><h3>3.4.2 下游变更导致服务异常影响网关接口可用率</h3><p>可以通过根因分析关联到具体的链路，并关联到具体下游的异常和变更。最终，可以推荐出 AI 服务的变更是影响网关接口的主要原因。业务同学可以快速找到对应的变更人，然后进行排查和回滚等止损操作。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d0179cd8afb98967fa016c6b5edc192f2ce.png" alt="file" referrerpolicy="no-referrer"></p><h3>3.4.3 下游 Redis 请求异常影响服务接口</h3><p>可以通过内部分析以及异常关联到具体的服务，并构建起异常的传导路径。同时，可以推荐出具体的异常请求耗时和日志。此外，业务侧也可以与相关组件的同学一起进行更深入的定位。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5ffa4fd875968133050d7a1cdeac23233f3.png" alt="file" referrerpolicy="no-referrer"></p><h2>3.5 效果评估</h2><p>根因分析已经落地，并取得了一些成效——</p><p>根因分析次数：20652/天</p><p>准确率：87.9%</p><p>召回率：77.5%</p><p>分析耗时 95 分位：10s</p><p>平均分析耗时：4s 内（这意味着，在告警发出后，平均仅需 4 秒钟就可以推荐出根因，业务人员打开告警卡片就可以直接看到对应的异常根因。）</p><p><img src="https://oscimg.oschina.net/oscnet/up-c32a5ed1c13a8e5e899857ff7a6633ab6ae.png" alt="file" referrerpolicy="no-referrer"></p><h1>四、总结与展望</h1><p>设计告警平台时，需要考虑到多种多样的业务需求和不同的应用场景。理解这些需求的本质，然后基于这个本质来构建平台的能力以及关键功能模型，并设计出闭环逻辑，以此来设计出更贴近业务需求的告警平台。其次，告警治理过程是必不可少的。无论告警的数量多少，只有通过完善的告警治理机制，才能使整个系统的闭环优化规则的定义，持续提升告警的有效性，发挥告警的价值。最后，告警与人工智能的结合是未来的发展趋势。通过深度结合的一些能力，可以提升故障发现的准确率，减少定位和恢复止损的时间，为质量管理和系统稳定性提供保障。（全文完）</p><h1>Q&amp;A：</h1><p>1、这个告警治理是否主要靠人力筛选减少规则？</p><p>2、业务侧的告警关联降噪可以举个例子吗？是在监控侧关联还是在告警侧关联？业务告警可以和基础告警关联吗？</p><p>3、告警后有进一步的自动分析场景吗？</p><p>4、监控告警通知的发送状态和效果怎么管理？怎么处理通知失败或异常的情况？</p><p>5、在告警合并方面，高优告警怎么不被淹没？同时保证低优告警的质量巡检？</p><p>6、怎么优化根因分析的效率和准确性，来支持实时分析和批量处理呢？根因分析过程中，大量的数据和日志信息怎么管理和存储？有哪些最佳实践和经验可以分享？</p><p>以上问题答案，欢迎点击「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.shulie.io%2F%3Fp%3D7721" target="_blank">阅读全文</a>」，观看完整版解答！</p><p>声明：本文由公众号「TakinTalks 稳定性社区」联合社区专家共同原创撰写，如需转载，请后台回复「转载」获得授权。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 16 Dec 2023 02:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/5129714/blog/10321815</guid>
            <link>https://my.oschina.net/5129714/blog/10321815</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Prompt flow —— 构建高质量的 LLM 应用程序]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>Prompt flow&nbsp;</strong>是一套开发工具，旨在简化基于 LLM 的人工智能应用程序的端到端开发周期，从构思、原型设计、测试、评估到生产部署和监控。它使即时工程变得更加容易，并使你能够构建具有生产质量的 LLM 应用程序。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>通过该项目，你将能够：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><ul><li>创建将 LLM、提示、Python 代码和其他工具链接在一起的可执行工作流程。</li><li>轻松调试和迭代你的流程，尤其是与 LLM 的交互。</li><li>使用更大的数据集评估流程的质量和性能。</li><li>将测试和评估集成到你的 CI/CD 系统中，以确保流程的质量。</li><li>将你的流程部署到你选择的服务平台或轻松集成到应用程序的代码库中。</li><li>（可选，官方强烈推荐）利用 Azure AI 中 Prompt flow 的云版本与团队协作。
<p>&nbsp;</p></li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 15 Dec 2023 03:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/promptflow</guid>
            <link>https://www.oschina.net/p/promptflow</link>
        </item>
    </channel>
</rss>
