<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 17 Oct 2023 06:44:34 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[雷军：小米全新操作系统澎湃 OS 正式版已完成封包]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>小米创办人、董事长兼 CEO 雷军今天在个人微博<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1749127163%2FNoeRxu6Ro%3Frefer_flag%3D1001030103_" target="_blank">宣布</a>，小米全新的操作系统小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。小米 14 系列，第一款搭载新系统的手机，已交付工厂开始生产。</p><blockquote><p><span style="color:#333333">今天，对小米来说，是一个历史性时刻。小米全新的操作系统，小米澎湃 OS（Xiaomi HyperOS），正式版已完成封包。</span></p><p><span style="color:#333333">小米 14 系列，第一款搭载新系统的手机，已交付工厂，正式开始生产。从这一刻起，</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs.weibo.com%2Fweibo%3Fq%3D%2523%25E5%25B0%258F%25E7%25B1%25B3%25E6%25BE%258E%25E6%25B9%2583OS%2523" target="_blank">#小米澎湃 OS#</a><span style="color:#333333"> 将逐步接替 MIUI。 ​​​</span></p><p><span style="color:#000000">对于小米来说，这是一个划时代的里程碑，是迈向<strong style="color:#222222">「人车家全生态」</strong>的关键跨越。这一刻，我的内心，激动不已，心潮澎湃。</span></p></blockquote><p><img height="243" src="https://oscimg.oschina.net/oscnet/up-1fead1c930f622a1877c21aa62d184206e2.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p><span style="background-color:#ffffff; color:#222222">雷军在公众号发文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FvjNBvY8Bn9Npnmisru_EKw" target="_blank">介绍</a></span><span style="color:#000000"><span style="background-color:#ffffff">称，</span><span style="background-color:#ffffff">2014 年，从 IoT 业务开始初具规模，该公司就开始了小米澎湃 OS 的探索式开发和验证。2017 年，全新系统研发工作正式开启，以一套融合的系统框架统一支持全生态设备与应用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">时至今日，小米澎湃 OS 正式诞生，秉承</span><strong style="color:rgba(0, 0, 0, 0.9)"><span style="background-color:#ffffff">「以人为中心，打造人车家全生态操作系统」。</span></strong><span style="background-color:#ffffff">基于深度进化的 Android 以及自研的 Vela 系统融合，彻底重写底层架</span><span style="background-color:#ffffff">构，为未来百亿设备、百亿连接做好了万物互联的公有底座。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-8c53666ec4b5313f3b5983d44ffe6a445b7.jpg" width="500" referrerpolicy="no-referrer"></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 03:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262088</guid>
            <link>https://www.oschina.net/news/262088</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心大模型 4.0 发布，较 GPT-4 毫不逊色]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="background-color:#ffffff; color:#222222">在百度世界 2023 大会上，百度创始人、董事长兼首席执行官李彦宏宣布文心大模型 4.0 正式发布，开启邀请测试。</span></p><p><span style="background-color:#ffffff; color:#222222">李彦宏表示，文心大模型 4.0 </span>是迄今为止最强大的文心大模型，实现了基础模型的全面升级，在理解、生成、逻辑和记忆能力上都有着明显提升，综合水平「与 GPT-4 相比毫不逊色」。</p><p><img height="230" src="https://oscimg.oschina.net/oscnet/up-cb21975862a8f7b014aeea47cbab52da1df.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">李彦宏在现场演示中用文心 4.0 撰写了一篇武侠小说，并将第四、五轮的生成内容与首轮小说框架结合，文心一言仍然「记得」最初生成的内容，李彦宏称，这展示了文心大模型 4.0 的记忆能力。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">目前文心 4.0 已同步开始邀测，现场观众扫描嘉宾证二维码，即可登录文心一言官网或文心一言 App，体验专业版。其<span style="background-color:#ffffff; color:#222222">随后将逐步面前全网开启公测。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 03:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262086</guid>
            <link>https://www.oschina.net/news/262086</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stack Overflow 裁员 28%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p><span style="color:#000000">Stack Overflow 是一家拥有 15 年历史的 IT 技术问答网站，其首席执行官 Prashanth Chandrasekar 近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.blog%2F2023%2F10%2F16%2Fstack-overflow-company-announcement-october-2023%2F" target="_blank">宣布</a>，该机构将裁员 28%。</span></p><p><span style="color:#000000">该公司没有具体说明有多少员工会受到影响，但其 LinkedIn 页面显示，目前该公司共拥有 501-1000 名员工，LinkedIn 上的员工数为 769，因此大概影响 215 名员工左右。</span></p><p><span style="color:#000000"><img alt="" height="263" src="https://oscimg.oschina.net/oscnet/up-a695411b01f10f2f0c67268f263266606ca.webp" width="500" referrerpolicy="no-referrer"></span></p><blockquote><p><span style="color:#000000">在过去的 15 年中，我们将 Stack Overflow 打造成数百万开发人员和技术专家的行业重要知识库。在此期间，我们经历了充满机遇和挑战的岁月。今年也不例外，从为成功推出 OverflowAI 所做的不懈努力，到应对宏观经济压力对整个技术行业造成的客户预算转移的持续威胁。这也是为什么我们在致力于 Stack Overflow for Teams 的持续产品创新以及通过增强我们的人工智能/移动语言能力来确保公共平台健康发展的同时，还如此专注于盈利之路。今年，我们采取了许多措施来减少开支。我们从尽量减少对 Stacker 生活的影响的角度出发进行了改革。不幸的是，这些改变还不够，我们做出了一个极其艰难的决定，将公司员工人数减少约 28%。</span></p><p style="text-align:start"><span style="color:#000000">当我们结束本财年并进入下一个财年时，我们将重点投资于我们的产品。因此，我们在此期间将大幅缩减市场营销组织的规模。整个组织的支持团队和其他团队也会受到影响。正如我所提到的，我们本财年和下一财年的重点是盈利能力，这一点以及宏观经济压力导致了今天的变化。随着我们调整工作重点、优先事项和战略，我们将更好地满足用户、客户和合作伙伴的需求，这也是我们致力于产品创新和持续推动 OverflowAI 在 Stack Overflow for Teams 和我们的公共平台上发展的一部分。我们的新团队结构最有利于我们在这些举措方面取得成功。</span></p></blockquote><p><span style="color:#000000">面对&nbsp;Stack Overflow 的这一裁员之举，外界纷纷猜测该公司是受到了来自&nbsp;OpenAI 的 ChatGPT 的冲击。<span style="background-color:#ffffff">人工智能聊天助手 ChatGPT 崛起已经改变了开发者寻求编程帮助方式，能提供更为具体的帮助。</span></span></p><p><span style="color:#000000">伦敦和德国两地的一家初创公司创始人 Laura Wendel&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FLauramaywendel%2Fstatus%2F1713949264336847318%3Fs%3D20" target="_blank">发帖称<span style="color:#000000">，</span></a><span style="color:#000000">&nbsp;「这可能是第一次直接因 AI 导致的大规模裁员」，并例举了「大众向 ChatGPT 而不是 Stack Overflow 寻求问题答案」的例子。还贴出了一张图表，显示从 2023 年 4 月开始，Stack Overflow 的页面浏览量急剧下降；与此同时，聊天机器人正广受追捧。</span></p><p><span style="color:#000000"><strong>相关阅读：</strong></span></p><ul><li><a href="https://www.oschina.net/news/237758/stack-overflow-chatgpt" target="news">ChatGPT 的统治正在冲击 Stack Overflow？</a></li><li><a href="https://www.oschina.net/news/251072/the-fall-of-stack-overflow" target="news">Stack Overflow 访问量大幅下降，马斯克称其已被 LLM 取代</a></li><li><a href="https://www.oschina.net/news/251277/overflow-ai" target="news">Stack Overflow 推出 Overflow AI</a></li><li><a href="https://www.oschina.net/news/253044/chatgpt-stack-overflow-research" target="news">ChatGPT 和 Stack Overflow，谁的解答更胜一筹？</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforc</guid>
            <link>https://www.oschina.net/news/262083/stack-overflow-layoffs-affecting-28-of-workforc</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Disjob —— 分布式任务调度框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="project_detail_above_text_link_1" data-tracepid="project_detail_above_text_link"><a style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>Disjob 是一款分布式的任务调度框架，天然为支持分布式长任务执行而设计，它除了具备常规的任务调度功能外，还提供：任务拆分及分布式并行执行、暂停及取消运行中的任务、恢复执行被暂停的任务、任务执行失败重试、保存任务的执行快照 (Checkpoint)、任务依赖、任务编排 (DAG)、广播任务等能力。</p><p>以下是 Disjob 的整体流程图：</p><p><img alt="" src="https://gitee.com/dromara/disjob/raw/master/docs/images/architecture.jpg" referrerpolicy="no-referrer"></p><hr><p><strong>特性</strong></p><ul><li>分为管理器 (Supervisor) 和执行器 (Worker) 两种角色，Supervisor 与 Worker 可分离部署</li><li>Supervisor 与 Worker 通过注册中心相互发现，支持的注册中心有：Database、Redis、Consul、Nacos、Zookeeper、Etcd</li><li>Supervisor 负责生成任务，把任务派发给 Worker 执行，支持的任务派发方式有：Redis、Http</li><li>需要指定 Job 的分组 (job-group)，Job 的任务只会派发给指定组的 Worker 执行</li><li>提供拆分任务的能力，重写拆分方法<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/handle/JobSplitter.java">JobHandler#split</a>即可拆分为多个任务，实现分布式任务及并行执行</li><li>支持暂停和取消运行中的任务，已暂停的任务可恢复继续执行，执行失败的任务支持重试</li><li>支持任务保存 (savepoint) 其执行状态，让手动或异常暂停的任务能从上一次的执行状态中恢复继续执行</li><li>任务在执行时若抛出<a href="https://gitee.com/dromara/disjob/blob/master/disjob-core/src/main/java/cn/ponfee/disjob/core/exception/PauseTaskException.java">PauseTaskException</a>，会暂停对应实例下的全部任务 (包括分布在不同 worker 机器中的任务)</li><li>支持广播任务，广播任务会派发给 job-group 下的所有 worker 执行</li><li>支持 Job 间的依赖，多个 Job 配置好依赖关系后便会按既定的依赖顺序依次执行</li><li>支持 DAG 工作流，可把 jobHandler 配置为复杂的 DAG 表达式，如：A-&gt;B,C,(D-&gt;E)-&gt;D,F-&gt;G</li><li>提供 Web 管理后台，通过界面进行作业配置，任务监控等</li></ul><p><strong>项目结构</strong></p><pre><code>disjob                                        # 主项目①
├── disjob-admin                              # 管理后台项目②(基于 Ruoyi 框架二次开发)
├── disjob-bom                                # Maven project bom module
├── disjob-common                             # 公共的工具类模块
├── disjob-core                               # 任务调度相关的核心类（如数据模型、枚举类、抽象层接口等）
├── disjob-dispatch                           # 任务派发模块
│   ├── disjob-dispatch-api                   # 任务派发的抽象接口层
│   ├── disjob-dispatch-http                  # 任务派发的 Http 实现
│   └── disjob-dispatch-redis                 # 任务派发的 Redis 实现
├── disjob-id                                 # 分布式 ID 生成模块
├── disjob-registry                           # Server(Supervisor &amp; Worker) 注册模块
│   ├── disjob-registry-api                   # Server 注册中心的抽象接口层
│   ├── disjob-registry-consul                # Server 注册中心：Consul 实现
│   ├── disjob-registry-database              # Server 注册中心：Database 实现
│   ├── disjob-registry-etcd                  # Server 注册中心：Etcd 实现
│   ├── disjob-registry-nacos                 # Server 注册中心：Nacos 实现
│   ├── disjob-registry-redis                 # Server 注册中心：Redis 实现
│   └── disjob-registry-zookeeper             # Server 注册中心：Zookeeper 实现
├── disjob-reports                            # 聚合各个模块的测试覆盖率报告
├── disjob-samples                            # Samples 项目③
│   ├── disjob-samples-frameless-worker       # Worker 单独部署的范例（普通 Java-main 应用）
│   ├── disjob-samples-springboot-common      # Samples Spring-boot 公共模块
│   ├── disjob-samples-springboot-merged      # Supervisor 与 Worker 合并部署的范例（Spring-boot 应用）
│   ├── disjob-samples-springboot-supervisor  # Supervisor 单独部署的范例（Spring-boot 应用）
│   └── disjob-samples-springboot-worker      # Worker 单独部署的范例（Spring-boot 应用）
├── disjob-supervisor                         # Supervisor 代码
├── disjob-test                               # 用于辅助测试
└── disjob-worker                             # Worker 代码</code></pre></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 02:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/disjob</guid>
            <link>https://www.oschina.net/p/disjob</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 任天堂红白机模拟器 Nes4j]]>
            </title>
            <description>
                <![CDATA[<div align="center"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/build/icon/nes4j.png" alt="Nes4j logo" width="200" height="auto" referrerpolicy="no-referrer"><h1><a id="nes4j" class="anchor" href="https://gitee.com/navigatorCode/nes4j#nes4j"></a>Nes4j</h1><p>任天堂红白机模拟器</p></div><div align="center"><h3><a id="--english-document--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--english-document--"></a><a href="https://gitee.com/navigatorCode/nes4j/blob/master/README.md">English Document</a></h3><h3><a id="--github 仓库--" class="anchor" href="https://gitee.com/navigatorCode/nes4j#--github%E4%BB%93%E5%BA%93--"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGZYangKui%2Fnes4j">github 仓库</a></h3><img src="https://github.com/GZYangKui/nes4j/actions/workflows/maven.yml/badge.svg" alt="Build status" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/license-Apache%202.0-blue" alt="Apache 2.0" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/I18n-Support-orange.svg" alt="I18n support" referrerpolicy="no-referrer"><img src="https://badgen.net/github/stars/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="stars" referrerpolicy="no-referrer"><img src="https://badgen.net/github/forks/GZYangKui/nes4j?icon=github&amp;color=4ab8a1" alt="forks" referrerpolicy="no-referrer"><br></div><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Main.png" alt="nes4j" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/DuckTables.png" alt="DuckTables" referrerpolicy="no-referrer"><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/Super%20Mario.png" alt="Super Mario" referrerpolicy="no-referrer"></p><h2><a id="项目介绍" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p><strong>nes4j</strong>是使用 java 语言实现任天堂红白机模拟器,主要包括<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FCPU">CPU</a>、
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FPPU_programmer_reference">PPU</a>和<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FAPU">APU</a>三部分组成.其中 PPU 是红白机
实现难度最大的一个模块,理解起来有点困难.</p><h2><a id="项目结构" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84"></a>项目结构</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">nes4j</span><span id="LC2" class="line">├── app UI 模块 (javafx)</span><span id="LC3" class="line">├── bin 模拟器核心模块 (CPU/PPU/APU)</span><span id="LC4" class="line">└── document 开发文档</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="快速启动" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%BF%AB%E9%80%9F%E5%90%AF%E5%8A%A8"></a>快速启动</h2><h3><a id="下载项目" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E4%B8%8B%E8%BD%BD%E9%A1%B9%E7%9B%AE"></a>下载项目</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://gitee.com/navigatorCode/nes4j.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="启动项目" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%90%AF%E5%8A%A8%E9%A1%B9%E7%9B%AE"></a>启动项目</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"> mvn run</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="已实现卡带 mapper" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%B7%B2%E5%AE%9E%E7%8E%B0%E5%8D%A1%E5%B8%A6mapper"></a>已实现卡带 Mapper</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FNROM">NROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FUxROM">UxROM</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nesdev.org%2Fwiki%2FINES_Mapper_003">CNROM</a></li></ul><blockquote><p>更多卡带 Mapper 正在实现中,敬请期待。</p></blockquote><h2><a id="自定义音视频输出" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%9F%B3%E8%A7%86%E9%A2%91%E8%BE%93%E5%87%BA"></a>自定义音视频输出</h2><blockquote><p>如果你觉得当前游戏输出程序无法满足你的需求,你可以给我们提 PR,我们会尽可能满足你的需求,另外一种方法就是你自己引入 nes4j-bin 模块自己实现
游戏视屏和音频输出</p></blockquote><h3><a id="首先引入依赖" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E9%A6%96%E5%85%88%E5%BC%95%E5%85%A5%E4%BE%9D%E8%B5%96"></a>首先引入依赖</h3><ul><li>Apache Maven</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;groupId&gt;</span>cn.navclub<span class="nt">&lt;/groupId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;artifactId&gt;</span>nes4j-bin<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;version&gt;</span>1.0.2<span class="nt">&lt;/version&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(groovy)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="nl">group:</span><span class="s1">'cn.navclub'</span><span class="o">,</span><span class="nl">name:</span><span class="s1">'nes4j-bin'</span><span class="o">,</span><span class="nl">version:</span><span class="s1">'1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>or</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="n">implementation</span><span class="s1">'cn.navclub:nes4j-bin:1.0.2'</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>Gradle(Kotlin)</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nf">implementation</span><span class="p">(</span><span class="s">"cn.navclub:nes4j-bin:1.0.2"</span><span class="p">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="创建 nes 实例并初始化" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%88%9B%E5%BB%BAnes%E5%AE%9E%E4%BE%8B%E5%B9%B6%E5%88%9D%E5%A7%8B%E5%8C%96"></a>创建 NES 实例并初始化</h3><ul><li>GameWorld.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.NES</span><span class="o">;</span></span><span id="LC3" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.io.JoyPad</span><span class="o">;</span></span><span id="LC4" class="line"><span class="kn">import</span><span class="nn">cn.navclub.nes4j.bin.ppu.Frame</span><span class="o">;</span></span><span id="LC5" class="line"></span><span id="LC6" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">GameWorld</span><span class="o">{</span></span><span id="LC7" class="line"><span class="kd">public</span><span class="no">NES</span><span class="nf">create</span><span class="o">()</span><span class="o">{</span></span><span id="LC8" class="line"><span class="no">NES</span><span class="n">instance</span><span class="o">=</span><span class="no">NES</span><span class="o">.</span><span class="na">NESBuilder</span></span><span id="LC9" class="line"><span class="o">.</span><span class="na">newBuilder</span><span class="o">()</span></span><span id="LC10" class="line"><span class="c1">//nes 游戏 rom</span></span><span id="LC11" class="line"><span class="o">.</span><span class="na">file</span><span class="o">(</span><span class="n">file</span><span class="o">)</span></span><span id="LC12" class="line"><span class="c1">//音频输出程序 </span></span><span id="LC13" class="line"><span class="o">.</span><span class="na">player</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">)</span></span><span id="LC14" class="line"><span class="c1">//Game loop 回调</span></span><span id="LC15" class="line"><span class="o">.</span><span class="na">gameLoopCallback</span><span class="o">(</span><span class="nc">GameWorld</span><span class="o">.</span><span class="na">this</span><span class="o">::</span><span class="n">gameLoopCallback</span><span class="o">)</span></span><span id="LC16" class="line"><span class="o">.</span><span class="na">build</span><span class="o">();</span></span><span id="LC17" class="line"><span class="k">try</span><span class="o">{</span></span><span id="LC18" class="line"><span class="c1">//一旦当前方法被调用将会阻塞当前线程直到游戏结束或者异常发生</span></span><span id="LC19" class="line"><span class="n">instance</span><span class="o">.</span><span class="na">execute</span><span class="o">();</span></span><span id="LC20" class="line"><span class="o">}</span><span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span><span class="n">e</span><span class="o">)</span><span class="o">{</span></span><span id="LC21" class="line"><span class="c1">//todo 当异常发生当前游戏立即停止</span></span><span id="LC22" class="line"><span class="o">}</span></span><span id="LC23" class="line"><span class="o">}</span></span><span id="LC24" class="line"></span><span id="LC25" class="line"><span class="c1">//当 PPU 输出一帧视屏时回调该函数</span></span><span id="LC26" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">gameLoopCallback</span><span class="o">(</span><span class="nc">Frame</span><span class="n">frame</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad</span><span class="o">,</span><span class="nc">JoyPad</span><span class="n">joyPad1</span><span class="o">)</span><span class="o">{</span></span><span id="LC27" class="line"></span><span id="LC28" class="line"><span class="o">}</span></span><span id="LC29" class="line"><span class="o">}</span></span><span id="LC30" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ul><li>JavaXAudio.java</li></ul><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"></span><span id="LC2" class="line"><span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"all"</span><span class="o">)</span></span><span id="LC3" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">JavaXAudio</span><span class="kd">implements</span><span class="nc">Player</span><span class="o">{</span></span><span id="LC4" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kt">byte</span><span class="o">[]</span><span class="n">sample</span><span class="o">;</span></span><span id="LC5" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">Line</span><span class="o">.</span><span class="na">Info</span><span class="n">info</span><span class="o">;</span></span><span id="LC6" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">AudioFormat</span><span class="n">format</span><span class="o">;</span></span><span id="LC7" class="line"><span class="kd">private</span><span class="kd">final</span><span class="nc">SourceDataLine</span><span class="n">line</span><span class="o">;</span></span><span id="LC8" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">ldx</span><span class="o">;</span></span><span id="LC9" class="line"><span class="c1">//当前填充下标</span></span><span id="LC10" class="line"><span class="kd">private</span><span class="kt">int</span><span class="n">index</span><span class="o">;</span></span><span id="LC11" class="line"><span class="kd">private</span><span class="nc">Thread</span><span class="n">thread</span><span class="o">;</span></span><span id="LC12" class="line"><span class="kd">private</span><span class="kd">volatile</span><span class="kt">boolean</span><span class="n">stop</span><span class="o">;</span></span><span id="LC13" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">SAMPLE_SIZE</span><span class="o">=</span><span class="mi">735</span><span class="o">*</span><span class="mi">2</span><span class="o">;</span></span><span id="LC14" class="line"><span class="c1">//音频默认缓存区大小为 32kb</span></span><span id="LC15" class="line"><span class="kd">private</span><span class="kd">final</span><span class="kd">static</span><span class="kt">int</span><span class="no">DEF_BUF_SIZE</span><span class="o">=</span><span class="mi">32</span><span class="o">*</span><span class="mi">1024</span><span class="o">;</span></span><span id="LC16" class="line"></span><span id="LC17" class="line"><span class="kd">private</span><span class="kd">static</span><span class="kd">final</span><span class="nc">LoggerDelegate</span><span class="n">log</span><span class="o">=</span><span class="nc">LoggerFactory</span><span class="o">.</span><span class="na">logger</span><span class="o">(</span><span class="nc">JavaXAudio</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></span><span id="LC18" class="line"></span><span id="LC19" class="line"></span><span id="LC20" class="line"><span class="kd">public</span><span class="nf">JavaXAudio</span><span class="o">()</span><span class="kd">throws</span><span class="nc">LineUnavailableException</span><span class="o">{</span></span><span id="LC21" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC22" class="line"><span class="k">this</span><span class="o">.</span><span class="na">format</span><span class="o">=</span><span class="k">new</span><span class="nc">AudioFormat</span><span class="o">(</span><span class="mi">44100</span><span class="o">,</span><span class="mi">8</span><span class="o">,</span><span class="mi">1</span><span class="o">,</span><span class="kc">false</span><span class="o">,</span><span class="kc">false</span><span class="o">);</span></span><span id="LC23" class="line"><span class="k">this</span><span class="o">.</span><span class="na">info</span><span class="o">=</span><span class="k">new</span><span class="nc">DataLine</span><span class="o">.</span><span class="na">Info</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">.</span><span class="na">class</span><span class="o">,</span><span class="n">format</span><span class="o">);</span></span><span id="LC24" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">=</span><span class="o">(</span><span class="nc">SourceDataLine</span><span class="o">)</span><span class="nc">AudioSystem</span><span class="o">.</span><span class="na">getLine</span><span class="o">(</span><span class="n">info</span><span class="o">);</span></span><span id="LC25" class="line"></span><span id="LC26" class="line"><span class="n">line</span><span class="o">.</span><span class="na">open</span><span class="o">(</span><span class="n">format</span><span class="o">);</span></span><span id="LC27" class="line"><span class="n">line</span><span class="o">.</span><span class="na">start</span><span class="o">();</span></span><span id="LC28" class="line"></span><span id="LC29" class="line"><span class="nc">CompletableFuture</span><span class="o">.</span><span class="na">runAsync</span><span class="o">((</span><span class="k">this</span><span class="o">::</span><span class="n">exec</span><span class="o">));</span></span><span id="LC30" class="line"><span class="o">}</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="nd">@Override</span></span><span id="LC33" class="line"><span class="kd">public</span><span class="kd">synchronized</span><span class="kt">void</span><span class="nf">output</span><span class="o">(</span><span class="kt">byte</span><span class="n">sample</span><span class="o">)</span><span class="o">{</span></span><span id="LC34" class="line"><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">[</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">++]</span><span class="o">=</span><span class="n">sample</span><span class="o">;</span></span><span id="LC35" class="line"><span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">lcalculate</span><span class="o">()</span><span class="o">&gt;</span><span class="no">SAMPLE_SIZE</span><span class="o">&amp;&amp;</span><span class="n">thread</span><span class="o">!=</span><span class="kc">null</span><span class="o">)</span><span class="o">{</span></span><span id="LC36" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC37" class="line"><span class="o">}</span></span><span id="LC38" class="line"><span class="n">index</span><span class="o">=</span><span class="n">index</span><span class="o">%</span><span class="no">DEF_BUF_SIZE</span><span class="o">;</span></span><span id="LC39" class="line"><span class="o">}</span></span><span id="LC40" class="line"></span><span id="LC41" class="line"></span><span id="LC42" class="line"><span class="kd">private</span><span class="kt">void</span><span class="nf">exec</span><span class="o">()</span><span class="o">{</span></span><span id="LC43" class="line"><span class="kt">var</span><span class="n">arr</span><span class="o">=</span><span class="k">new</span><span class="kt">byte</span><span class="o">[</span><span class="no">DEF_BUF_SIZE</span><span class="o">];</span></span><span id="LC44" class="line"><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">=</span><span class="nc">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span></span><span id="LC45" class="line"><span class="k">while</span><span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">)</span><span class="o">{</span></span><span id="LC46" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">park</span><span class="o">();</span></span><span id="LC47" class="line"><span class="kd">final</span><span class="kt">int</span><span class="n">length</span><span class="o">;</span></span><span id="LC48" class="line"><span class="kd">synchronized</span><span class="o">(</span><span class="k">this</span><span class="o">)</span><span class="o">{</span></span><span id="LC49" class="line"><span class="n">length</span><span class="o">=</span><span class="n">lcalculate</span><span class="o">();</span></span><span id="LC50" class="line"><span class="k">if</span><span class="o">((</span><span class="n">length</span><span class="o">+</span><span class="n">ldx</span><span class="o">&gt;</span><span class="no">DEF_BUF_SIZE</span><span class="o">))</span><span class="o">{</span></span><span id="LC51" class="line"><span class="kt">var</span><span class="n">tmp</span><span class="o">=</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC52" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">tmp</span><span class="o">);</span></span><span id="LC53" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="n">tmp</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">);</span></span><span id="LC54" class="line"><span class="o">}</span><span class="k">else</span><span class="o">{</span></span><span id="LC55" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">sample</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">,</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC56" class="line"><span class="o">}</span></span><span id="LC57" class="line"><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">;</span></span><span id="LC58" class="line"><span class="o">}</span></span><span id="LC59" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">arr</span><span class="o">,</span><span class="mi">0</span><span class="o">,</span><span class="n">length</span><span class="o">);</span></span><span id="LC60" class="line"><span class="o">}</span></span><span id="LC61" class="line"><span class="o">}</span></span><span id="LC62" class="line"></span><span id="LC63" class="line"><span class="kd">private</span><span class="kt">int</span><span class="nf">lcalculate</span><span class="o">()</span><span class="o">{</span></span><span id="LC64" class="line"><span class="kt">var</span><span class="n">len</span><span class="o">=</span><span class="k">this</span><span class="o">.</span><span class="na">index</span><span class="o">-</span><span class="k">this</span><span class="o">.</span><span class="na">ldx</span><span class="o">;</span></span><span id="LC65" class="line"><span class="k">if</span><span class="o">(</span><span class="n">len</span><span class="o">&gt;</span><span class="mi">0</span><span class="o">)</span><span class="o">{</span></span><span id="LC66" class="line"><span class="k">return</span><span class="n">len</span><span class="o">;</span></span><span id="LC67" class="line"><span class="o">}</span></span><span id="LC68" class="line"><span class="k">return</span><span class="no">DEF_BUF_SIZE</span><span class="o">-</span><span class="n">ldx</span><span class="o">+</span><span class="n">index</span><span class="o">;</span></span><span id="LC69" class="line"><span class="o">}</span></span><span id="LC70" class="line"></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="nd">@Override</span></span><span id="LC73" class="line"><span class="kd">public</span><span class="kt">void</span><span class="nf">stop</span><span class="o">()</span><span class="o">{</span></span><span id="LC74" class="line"><span class="k">this</span><span class="o">.</span><span class="na">stop</span><span class="o">=</span><span class="kc">true</span><span class="o">;</span></span><span id="LC75" class="line"><span class="nc">LockSupport</span><span class="o">.</span><span class="na">unpark</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">thread</span><span class="o">);</span></span><span id="LC76" class="line"><span class="k">this</span><span class="o">.</span><span class="na">line</span><span class="o">.</span><span class="na">close</span><span class="o">();</span></span><span id="LC77" class="line"><span class="o">}</span></span><span id="LC78" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="参与贡献" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>参与贡献</h2><p>我们强烈欢迎有兴趣的开发者参与到项目建设中来，同时欢迎大家对项目提出宝贵意见建议和功能需求，项目正在积极开发，欢迎 PR 👏。</p><h2><a id="版权说明" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E7%89%88%E6%9D%83%E8%AF%B4%E6%98%8E"></a>版权说明</h2><p>目前市场上绝大部分游戏版权为<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nintendo.com%2F">任天堂</a>所有,请勿在未取得任天堂授权的情况下私自分发游戏.
如果因此引发的任何侵权行为均与本软件无关.如果本软件中设计任何侵权素材请发送邮件到<a href="mailto:GZYangKui@126.com">GZYangKui@126.com</a>通知我删除对应侵权素材.</p><h2><a id="文档" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%96%87%E6%A1%A3"></a>文档</h2><p>如果你也想编写自己的模拟器或想了解模拟器内部结构,以下资源可以给你提供一些模拟器基础知识:</p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fnesdev.com%2FNESDoc.pdf">NES Documentation (PDF)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwiki.nesdev.com%2Fw%2Findex.php%2FNES_reference_guide">NES Reference Guide (Wiki)</a></li><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.obelisk.me.uk%2F6502%2Freference.html">6502 CPU Reference</a></li></ul><h3><a id="汇编调试实验功能" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%B1%87%E7%BC%96%E8%B0%83%E8%AF%95%E5%AE%9E%E9%AA%8C%E5%8A%9F%E8%83%BD"></a>汇编调试 (实验功能)</h3><blockquote><p>主界面 -&gt; 工具 -&gt; 调试</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/assemblera.png" alt="Assembler" referrerpolicy="no-referrer"></p><blockquote><p>程序内存快照 (内存)</p></blockquote><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/SNAPSHOTS/MemoryView.png" alt="Assembler" referrerpolicy="no-referrer"></p><h2><a id="技术交流学习" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E5%AD%A6%E4%B9%A0"></a>技术交流学习</h2><p><img src="https://gitee.com/navigatorCode/nes4j/raw/master/document/im_qq.jpg" alt="qq" referrerpolicy="no-referrer"></p><h2><a id="特别感谢" class="anchor" href="https://gitee.com/navigatorCode/nes4j#%E7%89%B9%E5%88%AB%E6%84%9F%E8%B0%A2"></a>特别感谢</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.jetbrains.com%2F">Jetbrain</a></td><td>免费提供全套集成开发环境</td></tr><tr><td><a href="https://gitee.com/link?target=https%3A%2F%2Fforums.nesdev.org%2F">NES forum</a></td><td>提供技术支持</td></tr></tbody></table>]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/navigatorCode/nes4j</guid>
            <link>https://gitee.com/navigatorCode/nes4j</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Trino 容错模式深度测评与思考]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F411218%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">走向批处理-交互式分析一体化： Trino 容错模式深度测评与思考</a>》，作者：HetuEngine 九级代言 。</p><p><strong>本文系华为云大数据研发团队原创，原创作者：文博，梦月</strong></p><span id="OSC_h1_1"></span><h1>1 Trino 简介</h1><p>2020 年 12 月 27 日，Presto 社区大佬们——Martin Traverso、 Dain Sundstrom 以及 David Phillips 宣布将开源项目 PrestoSQL 的名字更名为 TrinoDB（本文简称 Trino）。</p><p>Trino 是一款开源的高性能、分布式 SQL 查询引擎，专门用于对各种异构数据源运行交互式分析查询，支持从 GB 到 PB 的数据量范围。Trino 专门为交互式分析而设计，可以对来自不同数据源的数据（包括：Hive、AWS S3、Alluxio、MySQL、Kafka、ES 等等）进行合并查询，并提供良好的自定义连接器编程扩展框架。适用于期望响应时间从亚秒到数分钟不等的分析师场景。</p><p><img alt="1.PNG" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695110884831740337.PNG" referrerpolicy="no-referrer"></p><p>在诞生之初，Trino 是为了填补当时 Facebook 内部实时查询和 ETL 处理之间的空白。Trino 的核心目标就是提供交互式查询，也就是我们常说的 Ad-Hoc Query，很多公司都使用它作为 OLAP 计算引擎。近年来业务场景越来越复杂，除了交互式查询场景，很多公司也需要兼顾批处理作业，技术大佬们开始思考如何用 Trino 来进行大数据集的批加工处理。</p><span id="OSC_h1_2"></span><h1>2 传统 Trino 架构的局限性</h1><p>在传统 Trino 运行架构中，Trino 预先规划了处理特定查询的所有 task 。这些 task 彼此关联，一项 task 的结果是下一项 task 的输入。对于 MPP 引擎来说，这种相互依赖是必要的。一旦任何任务在此过程中失败，就会破坏整个任务链条，导致整个 SQL 执行退出。</p><p>Trino 执行 SQL 任务过程如下图（来自 Trino 官网）：</p><p><img alt="2.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111024056590140.png" referrerpolicy="no-referrer"></p><p><strong>优点：</strong></p><p>数据通过 task 进行流式传输，没有中间检查点，高吞吐低延迟</p><p><strong>不足：</strong></p><ul><li>缺乏细粒度的故障回复，出现问题只能从头运行整个 Query</li><li>完全依赖内存资源进行数据装载和交换</li><li>执行规划一旦确定就无法根据实际执行进展灵活调整</li></ul><span id="OSC_h1_3"></span><h1>3 Trino 容错执行架构（FTE）</h1><p>Trino 开源社区设计了一种新的容错执行架构（fault-tolerant execution architecture），它允许我们实现具有细粒度重试的高级资源感知调度（advanced resource-aware scheduling）。该项目代号为「Tardigrade」。</p><p>Tardigrade 项目旨在打破原有的全有或全无的执行障碍。它为资源管理、自适应查询优化和故障恢复带来了许多新的机会。该项目以水熊虫命名 ，水熊虫是世界上最坚不可摧的生物，类似于 FTE 为 Trino 带来的鲁棒性。</p><p><img alt="3.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111069158719757.png" referrerpolicy="no-referrer"></p><p>以下是 Tardigrade 项目带来的一些直观效果：</p><ul><li>当长时间运行的 SQL Query 遇到故障时，不必从头开始运行；</li><li>当 Query 需要的内存超过集群中当前可用的内存时，仍然能够运行成功；</li><li>当多个 Query 同时提交时，它们能够以公平的方式共享资源，并稳步运行</li></ul><p>从代码实现角度看， Trino 直接在内核中实现了 task 级容错、自动重试、shuffle 等核心功能。如下图所示（来自 Trino 官网）：</p><p><img alt="4.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111096042877403.png" referrerpolicy="no-referrer"></p><p>Trino 会将一个 Query 执行分成多个 stage。在容错模式下，上游 stage 的 shuffle 数据会进行落盘（支持写到 AWS S3、HDFS 及本地存储）。下游 stage 从中间存储里读取所需要的数据，并在该过程中对后续 task 任务进行重新优化与分配。</p><p><img alt="5.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111122989942394.png" referrerpolicy="no-referrer"></p><p><strong>带来的改进：</strong></p><ul><li><strong>适应性规划</strong>：可以在缓冲数据时，动态调整查询计划</li><li><strong>资源管理</strong>：在查询运行时调整资源分配。当集群空闲时，我们可以允许单个查询利用集群上的所有可用资源。当更多工作负载开始时，可​​以逐渐减少初始查询的资源分配。</li><li><strong>细粒度的故障恢复</strong>：允许透明地重启失败的任务，使得 ETL 完成时间更可预测。</li></ul><p>接下来，本文将带各位深入体验 Trino 容错执行模式。</p><span id="OSC_h1_4"></span><h1>4 基础性能测试</h1><p>首先在计算资源充足的场景下进行基础性能测试。选取 1TB 数据量的 TPCDS，计算资源规格为 2CN+16Worker 136GB/进程，测试开启容错前后，执行 TPCDS99，耗时统计如下：</p><p><img alt="6.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695111179677854014.png" referrerpolicy="no-referrer"></p><p>测试写入性能选择 TPCDS 表中最大的表 catalog_sales 测试写入性能，SQL 为：</p><p><em>--- create table catalog_sales_copy as select * from catalog_sales;</em></p><p><strong>测试数据如下：</strong></p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>数据集</strong></p></td><td><p><strong>计算资源</strong></p></td><td><p><strong>执行耗时（单位：秒）</strong></p></td></tr><tr><td><p><strong>不开容错和</strong><strong>spill</strong></p></td><td><p><strong>Task</strong><strong>容错</strong></p></td><td><p><strong>Task</strong><strong>容错+spill</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,20GB/进程</p></td><td><p>622.2</p></td><td><p>673</p></td><td><p>687</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/进程</p></td><td><p>3445</p></td><td><p>1485</p></td><td><p>1486</p></td></tr></tbody></table><p><strong>小结：</strong></p><ul><li>开启 Task 容错会进行中间交换区结果落盘，存在性能损耗，执行耗时约为之前的 2 倍；</li><li>Query 容错没有落盘的过程，与不开启容错性能持平。</li><li>1TB 数据集时，Task 容错写入性能也会有 8%-10% 损耗，但在 10TB 数据集时反而有性能提升，待深入分析；</li></ul><span id="OSC_h1_5"></span><h1>5 大数据量场景的稳定性测试</h1><p>本节将在计算资源严重不足的场景下进行 TPCDS 压力测试。测试结果如下：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>数据量</strong></p></td><td><p><strong>计算资源</strong></p></td><td><p><strong>错误率</strong></p></td></tr><tr><td><p><strong>不开容错</strong></p></td><td><p><strong>Task</strong><strong>容错</strong></p></td><td><p><strong>Task</strong><strong>容错+<br> spill to disk</strong></p></td></tr><tr><td><p>1TB</p></td><td><p>1CN+2Worker,40GB/进程</p></td><td><p>7.07%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,20GB/进程</p></td><td><p>12.12%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>1CN+2Worker,10GB/进程</p></td><td><p>16.16%</p></td><td><p>4.04%</p></td><td><p>0%</p></td></tr><tr><td><p>10TB</p></td><td><p>1CN+3Worker,136GB/进程</p></td><td><p>8.08%</p></td><td><p>0%</p></td><td><p>0%</p></td></tr><tr><td><p>50TB</p></td><td><p>1CN+16Worker,136GB/进程</p></td><td><p>13.13%</p></td><td><p>6.06%</p></td><td><p>5.05%</p></td></tr></tbody></table><p><strong>小结：</strong></p><ul><li>内存不足情况下使用 Task 容错，能够大幅度提高 SQL 执行成功率。与 spill to disk 特性结合使用能带来更好的容错效果；</li><li>在 50TB 数据集时，Task 容错仍然能够提高执行成功率，但某些复杂 SQL 可能会存在单点瓶颈。目前观察到主要是单点聚合瓶颈。</li></ul><span id="OSC_h1_6"></span><h1>6 高并发场景测试</h1><span id="OSC_h2_7"></span><h2>6.1 1TB TPCD 标准数据集</h2><p>计算资源规格：1CN+8Worker，136GB/进程</p><p>测试 SQL 用例： Q01（多事实表关联查询，即 TPCDS99 中的 Q29）</p><p>测试结果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>测试场景</strong></p></td><td><p><strong>1</strong><strong>并发</strong></p></td><td><p><strong>100</strong><strong>并发</strong></p></td><td><p><strong>200</strong><strong>并发</strong></p></td></tr><tr><td><p>不开启容错</p></td><td><p>QUERY 容错</p></td><td><p>TASK 容错</p></td><td><p>不开启容错</p></td><td><p>QUERY 容错</p></td><td><p>TASK 容错</p></td><td><p>不开启容错</p></td><td><p>QUERY 容错</p></td><td><p>TASK 容错</p></td></tr><tr><td><p>多表关联查询（多事实表）Q01-1 轮</p></td><td><p>4.1/min</p></td><td><p>5.2/min</p></td><td><p>2.6/min</p></td><td><p>7.3/min</p></td><td><p>7.2/min</p></td><td><p>8.1/min</p></td><td><p>17.50% 失败</p></td><td><p>18% 失败</p></td><td><p>7.9/min</p></td></tr><tr><td><p>多表关联查询（多事实表）Q01-5 轮</p></td><td><p>5.2/min</p></td><td><p>4.8/min</p></td><td><p>3.4/min</p></td><td><p>8.3/min</p></td><td><p>8.6/min</p></td><td><p>8.6/min</p></td><td><p>64.9% 失败</p></td><td><p>74.9% 失败</p></td><td><p>8.5/min</p></td></tr></tbody></table><p><img alt="7.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114254782786537.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_8"></span><h2>6.2 10TB TPCD 标准数据集</h2><p>计算资源规格：1CN+8Worker，136GB/进程</p><p>测试 SQL 用例：</p><p>单表多列聚合排序查询 Q02：</p><p><strong>select</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk,</li><li>sum(ws_sales_price) total</li></ul><p><strong>from</strong></p><ul><li>web_sales</li></ul><p><strong>where</strong></p><ul><li>ws_sold_date_sk &gt;= 2450815</li><li>and ws_sold_date_sk &lt;= 2451179</li></ul><p><strong>group by</strong></p><ul><li>ws_item_sk,</li><li>ws_web_site_sk</li></ul><p><strong>having</strong></p><ul><li>sum(ws_sales_price) &gt; 0</li></ul><p><strong>order by</strong></p><ul><li>total desc</li></ul><p><strong>limit 100;</strong></p><p>开启 TASK 容错全部能够执行成功。测结果如下表所示：</p><table border="1" cellspacing="0" style="border-collapse:collapse; border-spacing:0px; border:1px solid #f6f6f6; box-sizing:border-box; font-size:0.8em; max-width:100%; overflow:auto"><tbody><tr><td><p><strong>测试场景</strong></p></td><td><p><strong>1</strong><strong>并发</strong></p></td><td><p><strong>100</strong><strong>并发</strong></p></td><td><p><strong>200</strong><strong>并发</strong></p></td><td><p><strong>300</strong><strong>并发</strong></p></td><td><p><strong>400</strong><strong>并发</strong></p></td></tr><tr><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td><td><p>不开容错</p></td><td><p>TASK 容错</p></td></tr><tr><td><p>单表多列聚合排序查询 Q02_1 轮</p></td><td><p>3.3/min</p></td><td><p>1.3/min</p></td><td><p>7.9/min</p></td><td><p>5.7/min</p></td><td><p>9.7/min</p></td><td><p>8.8/min</p></td><td><p>8.5/min</p></td><td><p>5.9/min</p></td><td><p>97.25% 失败</p></td><td><p>6.8/min</p></td></tr><tr><td><p>单表多列聚合排序查询 Q02_5 轮</p></td><td><p>7.1/min</p></td><td><p>2.0/min</p></td><td><p>10.7/min</p></td><td><p>9.5/min</p></td><td><p>10.3/min</p></td><td><p>9.3/min</p></td><td><p>8.20% 失败</p></td><td><p>8.0/min</p></td><td><p>99.1% 失败</p></td><td><p>6.6/min</p></td></tr></tbody></table><p><strong>小结：</strong></p><p>Task 容错能够提升 Trino 引擎的并发上限，很大程度上减少诸如「Encountered too many errors talking to a worker node.」报错的产生。</p><span id="OSC_h1_9"></span><h1>7 多个引擎横向对比测试</h1><p>首先从 TPCDS99 中挑选出计算资源受限前提下，Trino 不开启容错 100% 会跑失败的 SQL 用例，包括：</p><p>Q04，Q11，Q23，Q38，Q64，Q65，Q67，Q74，Q75，Q78，Q80，Q81，Q85，Q87，Q93，Q95，Q97</p><p>基于相同计算资源（内存、CPU、Container 个数），横向对比 Trino、Spark、Hive(TEZ) 的性能表现。</p><p>注：测试 Trino 时实际采用的是华为云 HetuEngine 2.0 的内核版本。</p><span id="OSC_h2_10"></span><h2>7.1 1TB TPCD 标准数据集</h2><p>&nbsp;</p><p><img alt="8.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112918036114849.png" referrerpolicy="no-referrer"></p><p>可看出，在 1TB 数据量、使用相同资源情况下，开启 Task 容错，Trino 能够将原先跑失败的 SQL 执行成功，且性能约为 Spark 的 3 倍左右，是 Hive(TEZ) 的数十倍。</p><span id="OSC_h2_11"></span><h2>7.2 10TB TPCDS 标准数据集</h2><p>针对 10TB TPCDS 标准数据集，进行对比测试：</p><p><img alt="9.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695112947034508561.png" referrerpolicy="no-referrer"></p><p>可看出，在 10TB 数据量、使用相同资源情况下，开启 Task 容错，Trino 能够将原先跑失败的 SQL 执行成功，且性能约为 Spark 的 3 倍左右。</p><span id="OSC_h1_12"></span><h1>8 综合评价</h1><p><strong>综上，基于测试数据总结归纳如下——</strong></p><p><strong>单并发基础性能</strong></p><ol><li>内存资源充足：不开启容错 = Query 容错 &gt; Task 容错</li><li>内存资源不足：Task 容错可以跑过，不开启容错/Query 容错跑不出结果</li></ol><p><strong>大数据量场景的稳定性</strong></p><p>Task 容错 + spill to disk &gt; Task 容错 &gt; 不开启容错</p><ul><li>1-10TB 数据集：Task 容错的表现很稳定，通过率 100%</li><li>50TB 数据集： 结合使用 Task 容错、spill to disk 相比单独用 Task 容错表现更好 (少失败 1 个用例)</li></ul><p><strong>并发场景的稳定性</strong></p><p>Task 容错 &gt; 不开启容错</p><p><strong>多个引擎横向性能对比</strong></p><ul><li>1TB TPCDS 数据集：Trino(Task 容错) &gt; Spark &gt; Hive(TEZ)</li><li>10TB TPCDS 数据集：Trino (Task 容错) &gt; Spark</li></ul><p>总体而言，Trino 的 FTE 功能在性能、稳定性维度的测试表现超出了预期。随着该能力的逐步演进与完善，相信 Trino 将在一站式数据加工与分析场景发挥出更大的价值。</p><span id="OSC_h1_13"></span><h1>9 思考与改进</h1><p>在拥有了第一手的测试数据与分析结论后，接下来我们将思考如何利用好 Trino 容错模式，最大化的发挥其价值，同时要提前识别可能存在的问题，探索解决之道。</p><span id="OSC_h2_14"></span><h2>9.1 容错模式启用决策</h2><p>从前面的测试数据可以看出，开启容错模式对于短查询性能存在一定的影响（对大查询性能反而存在优化的可能）。因此需要思考何时、何种方式来开启容错模式。</p><p>有如下思路可供选择——</p><ul><li><strong>用户自主择机启用</strong></li></ul><p>最简单的办法就是让业务用户自主择机选择启用或者关闭容错模式。通常情况下，有经验的用户知道哪些查询可能是计算量大或者运行时间久的查询。他们可以通过改变 JDBC 连接的 session 参数来实现在「交互式模式」和「容错模式」之间灵活切换；</p><ul><li><strong>基于代价决策</strong></li></ul><p>可以基于 SQL 执行的预测代价来决定是否开启「容错模式」。一般来说，这个技术需要依赖实现统计获得的列级别统计信息。然而，列级别统计信息有时候是不可用的，而且基于代价估算的预测精度往往不够理想；</p><ul><li><strong>自适应选择技术</strong></li></ul><p>默认情况下，查询可以「交互式模式」启动，然后在运行 N 分钟后，经过一段时间学习后，由引擎内核根据可用资源情况、业务特点等维度信息，自主决策启动或关闭「容错模式」。这个思路需要将 Trino 引擎与机器学习、AI 技术结合起来，践行数智融合路线；</p><ul><li><strong>基于历史信息决策</strong></li></ul><p>针对特定数据源的某些类型的查询，可以预先收集历史运行记录并进行分析建模。基于事先学习掌握的先验知识模型，在 SQL 执行前选择最优的执行模式。</p><span id="OSC_h2_15"></span><h2>9.2 水平扩展规模应用</h2><p>Trino 具备了容错执行模式，测试数据显示效果不错，那么接下来大家就会思考：是否可以基于该能力提供更大规模的分析查询加速服务呢？</p><p>实际业务场景中，企业可能需要按需进行任务提交与弹性资源调度，尤其是在大规模、云原生环境中，即使开启容错模式，对於单个 Trino 集群，其协调节点（Coordinator）依然可能存在并发能力的瓶颈。此外，从软件架构角度看，单一 Trino 集群的可用性也存在一定的风险，影响云服务环境下的 SLA 目标达成。</p><p>针对上述问题，华为云交互式分析引擎 HetuEngine 提供了三层分布式架构，通过统一的 SQL 访问入口——<strong>HSFabric</strong>来向业务提供全局唯一的<strong>JDBC</strong>服务地址。</p><p><img alt="10.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113244022274958.png" referrerpolicy="no-referrer"></p><p>通过 HSFabric 统一 SQL 访问入口，HetuEngine 实现了将业务层逻辑与某个特定的计算实例解耦，单个资源租户内部可以横向扩展多个计算实例，同一个租户内部的 SQL 任务可以在不同计算实例间灵活分配。</p><p>无论从多租户还是单一租户角度看，HetuEngine 的并发容量可水平扩展，同时也提升了服务可用性和资源利用率。</p><p>基于上述架构，HetuEngine 支持服务管理员自由决定是否开启/关闭单个租户的容错执行模式，以便更好的满足不同场景的业务诉求。</p><p><img alt="11.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695114116664351503.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_16"></span><h2>9.3 故障处理与恢复</h2><p>在 Trino 容错执行过程中，Stage 间的 Shuffle 数据会大量落入到分布式文件系统上。这里以 HDFS 为例进行讨论可能存在问题。</p><p>假设——1 个大 SQL 在执行过程中，Trino 正在往 HDFS 上写 shuffle 数据，突然 Trino 所在物理机节点发生意外（比如，停电、断网、操作系统崩溃等），或者 Trino 本身出现故障停止工作（比如，过载等）。这可能会导致整个 Trino 集群都彻底停止工作。此时，需要管理员人工介入才能重新恢复 Trino 集群的正常工作状态。</p><p>显而易见，对 Trino 来说，至少存在 2 个问题需要思考和解决：</p><ul><li>如何实现 Trino 集群的应急快速恢复</li><li>确保 HDFS 上的残留文件及时被清理，避免存储空间耗尽</li></ul><p>华为云交互式分析引擎 HetuEngine 基于三层服务化+容器化架构，可有效应对上述挑战：</p><p><strong><u>针对问题 1</u></strong><strong>：</strong></p><p>借助于全容器化的部署架构，HetuEngine 的任一计算实例（对应于 1 个分布式 Trino 集群）中的任一软件进程在发生故障/意外时，均可由 Service 层快速自动拉起新的容器进程来接管和补齐服务缺失，在人工介入前快速完成故障自愈。</p><p>在可用资源可能存在不足时，HetuEngine 支持计算实例在线弹性伸缩，通过自动调整 Worker 数量来动态平衡资源利用率，快速补充因故障而丢失的 Worker 节点资源。</p><p>在 Coordinator 节点发生故障时，HetuEngine 从三方面入手进行应对——</p><ol><li>同一计算实例中的 Worker 节点立即与备 Coordinator 进行组网；</li><li>备 Coordinator 升为新的主 Coordinator；</li><li>统一 SQL 入口立即将新的 SQL 请求引流到新的主 Coordinator</li></ol><p><img alt="12.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113305047480491.png" referrerpolicy="no-referrer"></p><p><strong><u>针对问题 2</u></strong><strong>：</strong></p><p>HetuEngine 的 Service 层全天 24 小时不间断监控，跟踪并及时发现、清理各层级作业残留（包括：数据、文件、目录、元数据等）。</p><p>同时针对历史任务进行多维度地深入洞察，生成高价值 SQL 运维图表和决策推荐信息，最终呈现在控制枱页面。</p><p>Service 层提供的全方位贴心服务，极大降低了对数据分析平台管理员的专业知识要求，解决管理员对于长期运营的后顾之忧。</p><span id="OSC_h2_17"></span><h2>9.4 大数据平台业务无损的弹性扩缩容</h2><p>通常来说，大数据平台的弹性伸缩方案只会涵盖 Hive、Spark 这类批处理引擎。因 Hive、Spark 本身具备了容错执行能力，即使因为大数据平台的管控面下发指令强制缩容一个正在运行 Hive/Spark 作业的物理节点，也不会影响相关作业的最终执行成功，最多只是引发了局部 task 的重试，增加了执行时长。因此，面向 Hive、Spark 引擎的大数据平台弹性伸缩方案相对来说比较容易，只需要关注资源层面的管理操作即可。</p><p>但对 Trino 这类 MPP 架构引擎来说，上述大数据平台的弹性伸缩管理模式就可能会面临如下几个方面的挑战：</p><ul><li>MPP 架构的 SQL 引擎一般都是常驻形态，在缩容过程中任何一个节点被强杀都可能导致该节点上正在运行中的 SQL 任务失败；</li><li>Trino 的协调节点 Coordinator 默认为 1 个，在缩容过程中，强杀 Coordinator 所在的节点会导致整个 Trino 集群不可用，运行中的所有 SQL 任务失败；</li><li>Trino 集群的扩容，需要平台管理面深入理解 Trino 集群的内部服务发现与工作机制，针对具体集群的 IP 和端口号定制配置，才能顺利的将新节点加入到一个已经存在的 Trino 集群中。</li></ul><p>综上，要想在大数据平台服务上实现对 Trino 生态引擎的弹性伸缩，且做到业务无损，需要在大数据平台服务层和 Trino 内核层之间抽象出一个面向多资源租户+多个计算实例（Trino 集群）的资源管理&amp;业务接入 service 层。</p><p>HetuEngine 的 service 层对大数据平台服务层屏蔽底层 Trino 内核细节，对上提供 Rest API 调用，并将大数据平台服务层的管理运维诉求转换为对具体 Trino 集群的实际变更。同时要做到对多个 Trino 集群的日常状态监控与自维护。</p><p><img alt="13.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113353062381452.png" referrerpolicy="no-referrer"></p><p>在上述架构基础之上，可以基于 Trino 容错执行的能力，在开启弹性伸缩时，进一步降低大数据平台层面弹性伸缩的等待时间。</p><p>一种可行的思路大致是——大数据平台服务层向 HetuEngine 的 service 层下发缩容指令，service 确定即将被缩容的节点上正在运行的计算实例，并将其动态切换到容错模式。在通常情况下，service 层可以快速向上层服务层答复缩容操作准备继续，不用等待 SQL 任务执行完。</p><span id="OSC_h2_18"></span><h2>9.5 小结</h2><p>基于上述架构与思路，华为云 HetuEngine 能很好地应对容错执行模式可能引入的新问题，显著提升生产环境实际运维效率，助力用户很方便地享受容错执行的新红利。</p><p>接下来， HetuEngine 将逐步引入和完善在两个不同执行模式间的智能切换能力，进一步完善对大数据云服务弹性伸缩的场景适配，在数据湖内一站式 SQL 分析领域持续创新、长期演进。</p><span id="OSC_h1_19"></span><h1>10 HetuEngine 2.0 版本预告</h1><p>预计 2023 年 9 月 30 日，HetuEngine 2.0 将随华为云 MRS 3.3.0-LTS 正式发布。在该版本中，可以看到一系列的新能力，例如——</p><ul><li>基于 Java17 运行全新内核，基础性能、稳定性再上一个新台阶，TPCDS 提速 30%</li><li>大 SQL 主动防御：事前提示/拦截，事中熔断，事后统计</li><li>支持容错执行模式：适用范围更广泛，使能一站式 SQL 加工 &amp; 分析</li><li>租户内多计算实例架构：自动负载均衡、针对单个业务的并发能力可水平扩展</li><li>新增数据源类型：Hudi，MySQL</li><li>新增支持新建 Hudi 表、Insert 数据</li><li>新增支持 Hue 对接 HetuEngine，提供可视化 SQL 编辑页面</li><li>新增支持代理用户模式，支持对客户的自有用户体系的代理鉴权及审计</li></ul><p><img alt="14.png" src="https://bbs-img.huaweicloud.com/blogs/img/20230919/1695113424230425833.png" referrerpolicy="no-referrer"></p><p>相关链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.huaweicloud.com%2Fintl%2Fzh-cn%2Fcmpntguide-lts-mrs%2Fmrs_01_1711.html" rel="nofollow" target="_blank">https://support.huaweicloud.com/intl/zh-cn/cmpntguide-lts-mrs/mrs_01_1711.html</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10117447</guid>
            <link>https://my.oschina.net/u/4526289/blog/10117447</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云原生周刊：CNCF 宣布 Cilium 毕业]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h2>开源项目推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fstakater%2FReloader" target="_blank">Reloader</a></h3><p>Reloader 是一个 Kubernetes 控制器，用于监控 ConfigMap 和 Secrets 中的变化，并对 Pod 及其相关部署、StatefulSet、DaemonSet 和 DeploymentConfig 进行滚动升级！</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXenitAB%2Fspegel" target="_blank">Spegel</a></h3><p>Spegel 在瑞典语中意为镜像，是一种无状态集群本地 OCI 注册镜像。</p><p>Spegel 使 Kubernetes 集群中的每个节点都能充当本地注册镜像，允许节点之间共享镜像。一个节点已提取的任何映像都可供集群中的任何其他节点提取。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkr8s-org%2Fkr8s" target="_blank">kr8s</a></h3><p>这是一个用于 Kubernetes 的简单、可扩展的 Python 客户端库，对于已经知道如何使用 kubectl 的人来说，感觉非常熟悉。</p><h2>文章推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40sachin.singh.professional%2Freal-application-industry-based-project-on-devops-b3764c9688b2" target="_blank">基于 DevOps 的真实应用行业项目</a></h3><p>这篇文章是关于基于 DevOps 的真实应用行业项目的介绍。作者在文章中提到了如何设置 AWS 云环境、安装和配置必要的工具（如 AWS CLI、eksctl、Helm 和 kubectl），以及如何使用这些工具来创建和管理基于 Kubernetes 的应用集群。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40saadullahkhanwarsi%2Ftitle-comprehensive-ci-cd-pipeline-with-terraform-packer-jenkins-sonarqube-maven-docker-fa4e51b57971" target="_blank">使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 的综合 CI/CD 流水线</a></h3><p>这篇文章介绍了如何使用 Terraform、Packer、Jenkins、SonarQube、Maven、Docker、Datree 和 ArgoCD 建立一个全面的 CI/CD 流水线。这篇文章提供了一个全面而详细的指南，介绍了每个步骤的具体操作和配置，并强调了建立可靠和高效的开发流水线的重要性。通过按照文章中的步骤进行操作，读者可以建立一个完整的 CI/CD 流水线，并实现高质量软件的快速交付</p><h2>云原生动态</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fannouncements%2F2023%2F10%2F11%2Fcloud-native-computing-foundation-announces-cilium-graduation%2F" target="_blank">CNCF 宣布 Cilium 毕业</a></h3><p>日前 CNCF 宣布 Cilium 毕业。Cilium 是一种基于 eBPF 的开源云原生解决方案，用于提供、保护和观测工作负载之间的网络连接。</p><p>Cilium 最初由 Isovalent 创建，基于 eBPF 从头开始构建。它于 2021 年 10 月成为 CNCF 孵化项目，现在有来自 7 家不同公司的维护者和 800 多名个人贡献者。该项目为全球最大的 Kubernetes 集群提供支持，最终用户涵盖从数字原生初创企业到全球最大的金融机构和电信运营商。它拥有 46 个来自公司的公开案例研究，包括 Bell Canada、Bloomberg、DB Schenker、S&amp;P Global、Sky 和纽约时报，在其用户文件中列出了 100 多家组织。Cilium 是活跃度第二高的 CNCF 项目，仅次于 Kubernetes。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fcncf-crio-graduation%2F%3FtopicPageSponsorship%3D82a399eb-74a1-4f0b-83c4-ccff2bdfcda1" target="_blank">CNCF 宣布 CRI-O 项目毕业</a></h3><p>云原生计算基金会宣布 CRI-O 项目毕业，该项目为 Kubernetes 生产环境中的 kubelet 提供安全、高性能且稳定的容器运行时接口 (CRI) 实现。该项目已被 7 个新组织采用，发布了 11 个新的次要版本，并向主分支提交了 4,000 多次提交。</p><p>CRI-O 早在 2016 年就起源于 Kubernetes 孵化器，由 Red Hat 创立。到 2019 年 4 月，它已获得云原生计算基金会 (CNCF) 的认可。为了从孵化阶段过渡到正式毕业，CRI-O 采取了几个重要步骤。其中包括加强治理结构、制定行为准则、建立安全列表、接受 Ada Logics 与 CNCF 和 OSTIF 协调进行的安全审计、获取多元化的用户群并进行用户访谈、投资全面的文档以及积极培养新的贡献者。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 02:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10118125</guid>
            <link>https://my.oschina.net/u/4197945/blog/10118125</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一份谷歌写给 CTO 们的报告 - DORA 2023 版全面解读]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p><img src="https://oscimg.oschina.net/oscnet/up-5eb3d1822561be3b093c8103f70b3865546.png" alt="file" referrerpolicy="no-referrer"></p><h2>背景</h2><p>几天前，谷歌云旗下的 DORA (DevOps Research and Assessments) 发布了一年一度的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Fdevops-sre%2Fannouncing-the-2023-state-of-devops-report" target="_blank">State of DevOps 2023 报告</a>。DORA 在国内不像 Gartner 有那么高的知名度，但在全球，DORA 是研发效能 / DevOps 领域最具影响力的报告，从 2014 年开始，每年会出一份，2020 因为疫情的原因没有出，所以加上今年的一共有 9 份。</p><p>DORA 一开始是一家独立的研究机构，不过在 2018 年底加入了谷歌云。总体来讲 DORA 的报告是整个 DevOps 行业里面最为专业和客观的，这也应该是他当初受到谷歌青睐的原因。即使是加入谷歌后，它的报告也基本可以保持中立性。从最初聚焦在软件发布指标，到现在延伸到组织文化，业务表现，DORA 的阅读人群也从经理，总监为主的技术中层扩展到 CTO, VP 为主的技术管理层，这点尤其在今年的报告中更为突出，也贴合谷歌云从面向开发者到面向管理者的重心转移。</p><p>Bytebase 作为一家面向研发团队，提供前沿数据库 CI/CD 开源工具的厂商，这也是我们连续第三年对 DORA 进行深度解读：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247483758%26idx%3D1%26sn%3D61859a6708f6f5b535ed0bd5ff98f199%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2021 报告深度解读</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247497479%26idx%3D1%26sn%3Da3908d32d14a24b377c937186f8c8cdf%26scene%3D21%23wechat_redirect" target="_blank">State of DevOps DORA 2022 报告深度解读</a></li></ul><h2>赞助商</h2><p><img src="https://oscimg.oschina.net/oscnet/up-a571211f81156e33243d22cc85baf809521.png" alt="file" referrerpolicy="no-referrer"> 今年获取报告需要先留下联系方式，在收购 DORA 后的第 5 个年头，谷歌云也开始加速了对 DORA 的变现。今年的赞助商相比去年也发生了很大的变化 <img src="https://oscimg.oschina.net/oscnet/up-a4a6a5d060ce086f67922e136fa6647cc5d.png" alt="file" referrerpolicy="no-referrer"></p><h3>去年的老面孔</h3><ol><li>Broadcom Software。Broadcom 算是一家比较传统的软件厂商，和 DevOps 相关的产品线多来自于 2018 年对 CA 的收购。总部在硅谷，当年 CA 大大的 Logo 还挂在 Highway 101 旁的唯一一栋高楼上。</li><li>Deloitte。IT 实施咨询，DORA 报告赞助商的常客。</li></ol><h3>今年的新面孔</h3><ol><li>LinearB。研发流程的优化。通用企业流程挖掘领域的领导者是 Celonis，而 LinearB 可以理解为软件研发这个特定领域的 Celonis。 <img src="https://oscimg.oschina.net/oscnet/up-de3386de47e94ff6f9827947556a4f0e36e.png" alt="file" referrerpolicy="no-referrer"></li><li>Digital.ai。和 LinearB 类似，只是更加直白地用 AI 来宣传。 <img src="https://oscimg.oschina.net/oscnet/up-395cb0cd74c0e800da5e2cdeba2f02b0962.png" alt="file" referrerpolicy="no-referrer"></li><li>Opsera。也和前两家类似。 <img src="https://oscimg.oschina.net/oscnet/up-8b7dcc3e83be5073ef33648e4c85fb8b24a.png" alt="file" referrerpolicy="no-referrer"></li><li>Sleuth。也是做类似的事情，不过更加聚焦在 DORA 上。 <img src="https://oscimg.oschina.net/oscnet/up-521be51a5ff92a6025053bfcb17e834b93b.png" alt="file" referrerpolicy="no-referrer"> 插曲，这家叫 swarmia 有点机智，知道新的 DORA 报告出了，会有人去搜赞助商，然后就投放了对应的关键词？ <img src="https://oscimg.oschina.net/oscnet/up-ccb1f7e5dd1601eb36d716183f45958e27f.png" alt="file" referrerpolicy="no-referrer"></li><li>Qarik。帮用户迁移到云原生架构的。 <img src="https://oscimg.oschina.net/oscnet/up-610f2b5db5857c3339cafc7b974b4731486.png" alt="file" referrerpolicy="no-referrer"> 从赞助商列表看，做研发流程洞察优化的厂商占了绝大部分，也贴合 DORA 报告的目标受众。不过也可以看到这个领域竞争的激烈程度。接下来我们进入正题，解读一下 DORA 报告本身。</li></ol><h2>受访人群</h2><p>样本量相比去年增加了 3.6 倍，整个业界应该是仅次于 Stack Overflow Developer Survey 的规模。覆盖人群则更加全面。 <img src="https://oscimg.oschina.net/oscnet/up-d2964cbd9daae32bd711ab2f1906b0aeca9.png" alt="file" referrerpolicy="no-referrer"></p><p>地域分布上，除去依然保持低调的某东方大国，也体现了各国软件业的相对体量。 <img src="https://oscimg.oschina.net/oscnet/up-46905759d065ca9f3bdbf33a66bc3accaae.png" alt="file" referrerpolicy="no-referrer"></p><p>这个分布也可以作为出海软件公司的参考，用于选择进入一个新大陆的落脚点。看非洲，肯尼亚已经排在了南非之前。 <img src="https://oscimg.oschina.net/oscnet/up-47a0ad283cc693b1fe29d3ab4c051ef7d2b.png" alt="file" referrerpolicy="no-referrer"></p><h2>方法论</h2><p><img src="https://oscimg.oschina.net/oscnet/up-236857daf38920f85a315070fd207b3ef72.png" alt="file" referrerpolicy="no-referrer"> DORA 最近几年的报告都有两条主线：</p><ul><li>组织线：业务表现，团队表现，个体感受</li><li>事务线：交付表现和运行表现</li></ul><p>DORA 的风格和海外做软件的风格一样，都是从点切入，由小及大。它最初的切入点是软件交付，后面增加了软件运行。再在此基础上推演业务表现 / 团队表现 / 个体感受。</p><h2>四大核心指标</h2><p>四大核心指标基本没变：</p><ul><li>Deployment frequency（发布频率）</li><li>Change lead time (代码从提交到上线的时间）</li><li>Change failure rate (上线失败需要介入的比例）</li><li>Failed deployment recovery time (失败的部署需要恢复的时间）</li></ul><p>其中最后一个术语做了调整，之前报告用的是更加通用的术语 time-to-restore。因为通用，所以无法区分发布造成的故障和自然灾害造成的故障。新的术语更加精确地限定在了发布领域。 <img src="https://oscimg.oschina.net/oscnet/up-0c7561f6d41f7eb884aee368f442f6af0c3.png" alt="file" referrerpolicy="no-referrer"></p><h2>分级 (Grading) - 精英级的回归</h2><p>去年报告因为 Elite 和 High 之间缺乏区分度，本来的四档变成了三档。 <img src="https://oscimg.oschina.net/oscnet/up-2b50c2b87c2c2d71b00e52b14c2b1fcea42.png" alt="file" referrerpolicy="no-referrer"></p><p>今年 Elite 精英级又回归了，原因是因为样本量的大幅增加，区分度又出来了 <img src="https://oscimg.oschina.net/oscnet/up-612c3f1d0205e1573279d38a151553c2d47.png" alt="file" referrerpolicy="no-referrer"></p><h2>分类 (Clustering) - 全新的组合</h2><p><img src="https://oscimg.oschina.net/oscnet/up-593502e6fe58556ee4de9a617803a60c51e.png" alt="file" referrerpolicy="no-referrer"></p><p>去年的报告采用了类似 Tuckman 组织发展模型的按阶段分类 (Forming &gt; Storming &gt; Norming &gt; Performing &gt; Adjourning)，划分为 Staring &gt; Flowing &gt; Slowing &gt; Retiring。 <img src="https://oscimg.oschina.net/oscnet/up-a7e04be377333e0575e992aed282c5772ca.png" alt="file" referrerpolicy="no-referrer"></p><p>今年采用了新的基于特质的分类：</p><ul><li>User-centric - 用户导向型</li><li>Feature-driven - 功能导向型</li><li>Developing - 发展型</li><li>Balanced - 均衡型</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-870577da04ed356ac34cbb857cff2d3b907.png" alt="file" referrerpolicy="no-referrer"></p><p>不同分类下各项指标的表现： <img src="https://oscimg.oschina.net/oscnet/up-9cecad6ba3b191fc650daa36a587d3ce4d8.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-aeb3f3797efd9aa334df838820f3eb44da1.png" alt="file" referrerpolicy="no-referrer"></p><p>笔者觉得今年的分类有点模糊，边界不清晰。拿 Bytebase 自身来说，按照去年的阶段分类，可以很清楚地落在 starting 到 flowing 之间。而对于今年的 4 个分类，Bytebase 其实都能沾上边。按照特质分类，个人感觉需要像 MBTI 人格分析那样更加的细分才行。</p><h2>关键发现</h2><p><img src="https://oscimg.oschina.net/oscnet/up-28145dc564762f1808214447ffad28a4bf3.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>建立健康的文化</li><li>站在用户视角做事</li><li>通过更快的代码评审提高软件交付</li><li>通过高质量的文档加成技术能力</li><li>通过云提升基础设施的灵活性</li><li>平衡交付的速度，运行的表现和用户</li><li>公平地分配工作量</li></ul><h3>文化和用户视角</h3><p>用户视角也是文化的一部分，就放在一起讲了。 <img src="https://oscimg.oschina.net/oscnet/up-d4b9e7f67efeab0aa7925412e569aff5947.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-e2216b39ddf54ed1c64cf79e94fe1eb2631.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-a58f36f397b485ac33cd22c0b200e56fa9a.png" alt="file" referrerpolicy="no-referrer"></p><blockquote><p>Westrum culture 来自于 Westrum 在 2004 年的论文 A typology of organisational cultures 里的观点。高度信任且注重信息交流的组织文化能带来出色的业务表现。</p></blockquote><p>在所有评估的指标里，Westrum 文化和以用户为中心是最能带来正向效果的。前者大家可以进一步阅读 Westrum 的论文，而后者在 DORA 报告里还给出了进一步的数据。 <img src="https://oscimg.oschina.net/oscnet/up-fd32e6b68e3a63952fd9181557bbb936d61.png" alt="file" referrerpolicy="no-referrer"></p><p>可以看到以用户为中心能给每一个指标都带来显著提升，自然现在的公司都要大力提倡了。</p><h3>影响表现的技术因素</h3><p><img src="https://oscimg.oschina.net/oscnet/up-b4c4307c5e25a57a2a9d52afb54b25dd442.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-5d62680bc8930b6157424dc0775ff2d5417.png" alt="file" referrerpolicy="no-referrer"></p><p>延用了计算机的经典解法 - 分治。松耦合的架构 &gt; 更小的变更 &gt; DORA 四大核心指标的提升。 <img src="https://oscimg.oschina.net/oscnet/up-6b5812b180b6aae192f078f4309b168f867.png" alt="file" referrerpolicy="no-referrer"></p><h2>重新验证 Reliability 和 Performance 的关系</h2><p><img src="https://oscimg.oschina.net/oscnet/up-36bc9047b6db543a0c8185a3dc00f51f3a6.png" alt="file" referrerpolicy="no-referrer"> 2022 年报告的数据显示，组织先要投入很长一段时间的稳定性建设，才能看到成果。这个结论多少让人沮丧，开始没有正向反馈就容易劝退。</p><p>不过 2023 年通过优化问卷，得出了一个鼓舞人心的结论，就是稳定性和表现的关系符合 J 曲线，投入前期就有效果，然后再经过一段瓶劲期，最终再是显著的收益。</p><h2>还解决不了主要矛盾的 AI</h2><p><img src="https://oscimg.oschina.net/oscnet/up-fdaf6d7748c0b601b199870f4e087122966.png" alt="file" referrerpolicy="no-referrer"><img src="https://oscimg.oschina.net/oscnet/up-946410a6e01eb4391dd33570bd0286f22ac.png" alt="file" referrerpolicy="no-referrer"> 今年的报告自然不能忽视 AI，结论算是浇了一盆冷水，在所有技术影响因子里是以很大的差距垫底的。这倒也符合个人的预期，因为目前 AI 唯一破圈的场景是帮助写代码，属于「道法术器」里的「器」，是影响最小的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-36288bc0d74bf857329cfdc1bddc0d7848c.png" alt="file" referrerpolicy="no-referrer"> 这幅图也比较有意思，展示了当下在研发交付领域，AI 擅长的和不擅长的。除了最后一个 Solving file path issue 是个有点奇怪的问题外，垫底的几个对应的都是「道法」层面的主要矛盾。</p><h2>总结</h2><h3>一份专业的报告</h3><p>抛开内容本身，DORA 一如即往地给我们展示了如何撰写一份专业的行业报告。方法论，受访人群，分析方法都在报告中有清晰阐述。 <img src="https://oscimg.oschina.net/oscnet/up-3d18a669ca3106519c0952cf0ec9b5ae842.png" alt="file" referrerpolicy="no-referrer"></p><p>有反直觉的数据，也不会勉强附和，而是把疑问抛出。 <img src="https://oscimg.oschina.net/oscnet/up-d66aed3bd7c358764137da07ccf5594ce95.png" alt="file" referrerpolicy="no-referrer"></p><p>关注更多的声音，既让报告更加全面，也注入了人文的元素。 <img src="https://oscimg.oschina.net/oscnet/up-443671e03d566e7c444137d802adf5be8ff.png" alt="file" referrerpolicy="no-referrer"></p><p>说几点我读下来的不足：</p><h3>I. 轻描淡写的平台工程</h3><p><img src="https://oscimg.oschina.net/oscnet/up-5e850566eedb734896a3ec88d39c1a7f6c3.png" alt="file" referrerpolicy="no-referrer"></p><p>今年的报告里第一次提到了最近兴起的平台工程 (Platform Engineering)。DORA 的主题是研发效能 / DevOps，从行业趋势看，这部分工作对应到的就是平台工程团队。</p><p>平台工程的用户是内部的研发工程师，所以这部分也就出现在第 19 页 User-centric 里。但作为一份研究研发组织的报告，应该可以展开讲讲平台工程，毕竟这是近 10 多年里，继 DevOps / SRE 后，终于涌现出来的一个新组织形态。</p><h3>II. 老生常谈的 Cloud</h3><p><img src="https://oscimg.oschina.net/oscnet/up-bb34887f4cf48b52aca04ad414bde728faf.png" alt="file" referrerpolicy="no-referrer"></p><p>报告里列举了 Cloud 的各种优势，但对于最近业界 Cloud cost 相关的讨论以及伴随着的下云呼声没有涉及，缺少了一点辩证，这是报告出自谷歌云之手的一点偏心吧。除此之外，谷歌的另外一处植入就是谈论自家的 SRE 实践。 <img src="https://oscimg.oschina.net/oscnet/up-c53fa3904c6646e61ba9f9e618ed89534da.png" alt="file" referrerpolicy="no-referrer"></p><h3>III. 转型期的 DORA</h3><p><img src="https://oscimg.oschina.net/oscnet/up-ce8afdbe7baf804fcc7c2c4968e6d97eab7.png" alt="file" referrerpolicy="no-referrer"> 业界权威的年度报告里，Stack Overflow Developer Survey 偏一线，关注具体工作中所使用的产品技术；Gartner 面向管理层，关注行业的趋势。DORA 介于两者之间，DORA 里 DO 所代表的 DevOps 基因决定了报告的一线视角，RA 所代表的 Research &amp; Assessment 又使得它会给出价值判断。而从这几年的报告趋势来看，DORA 正逐步走向管理层。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09fd199bbdf16e597abce5f819dacb538e8.png" alt="file" referrerpolicy="no-referrer"> 比如从赞助商列表来看，往年都有不少研发链路某一个环节的工具厂商，像做 IDE 的 JetBrains，制品库的 JFrog，代码托管的 GitLab，应用部署的 Octopus，数据库变更的 Liquibase。而今年则是清一色的研发效能过程优化赞助商，或许这也是和报告背后的金主谷歌云面向大客的策略调整有关。</p><p>再从正文看，今年的报告弱化了 DORA 一直背书的软件发布四大核心指标，而是更多地去敍述核心指标背后的元素。这其中把文化和以用户为中心放在了前两位。</p><blockquote><p>Culture eats strategy for breakfast - 彼得·德鲁克</p></blockquote><p>既然转型走高层的路线，那就要面临阵痛，DORA 团队分析覆盘的能力很强，但相比 Gartner，缺少前瞻性。其本身又绑定在 DevOps 这个早已成熟的概念，再叠加上要宣传 SRE 这个也已经过了成长期的实践。对于平台工程，对于 AI，DORA 这次提及的不多，这一方面体现了它务实的部分，但这些未来 3 - 5 年可见的趋势，才是管理层们更关心的内容。</p><h2>结束语</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0e98a4ed8b4be53aec56928693c2d1406c0.png" alt="file" referrerpolicy="no-referrer"> 度量不是目的，就像发布软件并不是目的。数据若能印证假设固然值得欣喜，但更有价值的往往还是揭示错误的假设。提高软件发布的效率，也是为了形成更短的反馈闭环，发现产品的缺陷，进行改良，更好地满足用户。</p><p><img src="https://oscimg.oschina.net/oscnet/up-0d34715122deb2e90e01ded95b89e965f32.png" alt="file" referrerpolicy="no-referrer"> 在这个 AI 的黎明，虚拟现实的前夜，一个具备持续改进能力的组织才是面向未来不确定性下的最大确定性🦾。</p><p>能读到这里的，也一定是对软件交付有追求的读者。可以看一下我们正在做的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">Bytebase</a>，它目前是整个行业里，数据库变更 CI/CD 领域的领导者。</p><hr><p>💡 你可以访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2F" target="_blank">官网</a>，免费注册云账号，立即体验 Bytebase。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10118131</guid>
            <link>https://my.oschina.net/u/6148470/blog/10118131</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源软件有漏洞，作者需要负责吗？是的！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>近日，禅道创始人王春生在开源中国发布的一篇<a href="https://my.oschina.net/oscpyaqxylk/blog/10114031" rel="nofollow">文章</a>引起了众多同行的围观，原因是他分享了一个开源协议在中国面临的 bug：开源软件许可协议通常会表明作者不对用户使用该开源软件所造成的任何问题负责。但是！这种条款，在中国，是违法的——</p><p><strong>2017 年发布的《中华人民共和国网络安全法》</strong></p><p><strong>第二十二条规定：</strong></p><p>网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，<span style="color:#d83931"><strong>应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</strong></span></p><p><span style="color:#d83931"><strong>网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</strong></span></p><p>网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p><strong>第六十条规定：</strong></p><p>违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，<span style="color:#d83931"><strong>由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</strong></span></p><p>（一）设置恶意程序的；</p><p>（二）<span style="color:#d83931"><strong>对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</strong></span></p><p>（三）<span style="color:#d83931"><strong>擅自终止为其产品、服务提供安全维护的。</strong></span></p><p><strong>也就是说，不管你写的这个是不是</strong><strong>开源软件</strong><strong>，只要你提供给别人用了，那你就得负责到底。</strong></p><p>这无疑是跟我们熟悉的开源协议相违背了，也跟我们习惯的开源规则相抵触：</p><p>作为开源软件，我本身就没收你钱了，开源出来纯属做公益，怎么你还要我给你免费搞售后啊？那岂不是让我打白工吗？</p><p>这样的条款，让人还敢参与开源吗？</p><p>对于这样的担忧，开源中国特地邀请了软件行业的专业律师邓超，来听听他的分享和解读~</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：《网络安全法》第二十二条规定是出于怎样的考量？</strong></span></p><p>邓超：在我国，建设、运营和使用网络，都要受到网络安全法的约束。小到普通人的上网安全，大到国家的信息安全，都是网络安全法的维护目标。这就要求我们的网络产品和网络服务、各种程序，都不能有安全漏洞。</p><p>对于开源软件的话，一般它都会有一些免责条款，声明如果软件出了问题作者会免责之类的。<strong>但是，它这个免责条款，是平等主体之间的免责条款。</strong>比如说开源软件的提供者和开源软件的使用者，他们是平等的主体，所以在民事意义上，他是免责的。但是网络安全法，它瞄准的不是平等主体之间的责任，它是站在国家层面、政府层面，对所有的网络产品/服务运营商提出的要求，这个跟开源协议的免责条款，并不冲突。</p><p>举个例子，假设现在有个开源软件存在漏洞，把 100 个用户的信息泄露了。这时候由于免责条款，你用户不能按照这个开源许可证，来追究我的责任，不能起诉我让我赔钱。<strong>但是没有民法的责任，不代表没有行政法、甚至是刑法的责任。</strong>你把用户的信息泄露了，那国家肯定是要处罚你的，罚款或者督促整改，或者把你关停，都有可能。所以这两者之间并不矛盾。</p><p>在网络安全法这里，它并没有给开源软件什么豁免权。退一步来说，开源软件，只是免费提供代码而已，并不代表它在整个过程中不获利。就好像微信也免费，可是它卖广告赚钱。开源软件也一样，它也有自己的盈利模式的。<strong>反正从法律上来讲，开源跟其他形式的软件比没有任何的特殊性，</strong>最终还是要受到网络安全法的监管。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：假设只是免费开源一个项目，例如工具库，放在码云，被另一家公司用来做商业产品了，现在产品找到一个漏洞和这个工具库有关，请问是谁来负责呢？</strong></span></p><p>邓超：<strong>根据工信部、互联网办公室、公安部《网络产品安全漏洞管理规定》的通知第 7 条规定，</strong>负责任的应该是网络产品提供者。包括我刚才提到的网络安全法，它们主要针对的还是运行网络产品和提供网络服务的这些人。你说我只写了一个中间件，我给它传到网上，它能提供网络服务吗？从我个人的观点来讲，我可能会认为它是一种半成品或者是零部件儿的东西，不是最终产品。从这个角度上来讲，你单独开发一个中间件，它不能单独使用，你也没有对外提供产品和服务的可能，那这个责任就会小很多。</p><p>回到《网络产品安全漏洞管理规定》的通知第 7 条，它规定了如果发生安全漏洞方面的问题，首先是网络产品的运营者来负责，还要通知你的上下游，及时上报工信部。</p><p style="text-align:center"><img height="779" src="https://oscimg.oschina.net/oscnet/up-d964ac2e4d84b1a2c7c8fe1fbe7347f49bc.png" width="1639" referrerpolicy="no-referrer"></p><p>所以说我觉得对于咱们开发者来讲，可能需要理清一下，<strong>咱们开发的究竟是一个完整的网络产品，提供完整的网络服务，还是咱们仅仅是作为一个个人开发者，开发的是无法提供完整服务的一个网络组件。</strong></p><p>在前种情况下，受到网络安全法和相关规定的约束肯定更重一点。虽然说咱不直接收费，但是在法律上讲抗辩很难成立，除非说你是非盈利性组织运营的。但这里是一个公司行为，公司，它本身就是以盈利为目的的。哪怕你说你现在是亏钱的，或者说这个软件本身你没有收费，但是不影响它的盈利方式呀，它将来有可能挣钱，你也有可能通过其他的方式挣钱，所以抗辩很难成立。</p><p>相反，如果你是提供一个中间件，没有提供完整的网络服务，只是提供一个插件或者一段代码，那我觉得可能这个责任要更轻一点，有可能不构成网络安全法里面描述的提供网络服务或者提供网络产品。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：举个例子，假如现在出了个国产开源系统，被手机厂商拿来做商业产品了，这个系统出了问题先找谁呢？</strong></span></p><p>邓超：找手机厂商，然后手机厂商肯定要联系开源系统让他们处理。开源系统属于上游。但反正第一责任人是手机厂商。谁离用户更近，责任更靠前。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：如果</strong><strong>开源软件</strong><strong>中有 bug，一般是谁来监管这样的 bug ？</strong></span></p><p>邓超：会有网警负责不定期地对一些网络产品进行抽查，不会说等到出事儿了才去追究。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：如果是对于非盈利的个人开源者的话，没有收费还要负责维护这个软件一辈子，负担是不是太重了，会不会有点不公平？</strong></span></p><p>邓超：这其实是一件有价值取向的事儿。虽然大家觉得说我是在用爱发电，没有收费。但至少从咱们现在的法律条款来看，国家肯定还是把安全放在更重要的位置。不能因为我做的东西是免费的，就能获得一些豁免，或者拥有一些特权。万一造成一些什么信息安全的事故，那肯定就因小失大了。所以说，对咱们开源业界来讲，即使是开源开发者，如果你提供一种完整的网络服务，提供完整的网络产品，那同时也就有义务，维护网络安全。</p><p>&nbsp;</p><p><span style="color:#2980b9"><strong>Q：你觉得这样的条款对开源这个行业来说，提出了什么样的要求？有什么样的影响？</strong></span></p><p>邓超：我觉得只要大家尽到一些基础的义务，避免发生网络安全的事故，我觉得就够了。虽说这样一来有了限制，肯定是比没限制的时候，要「阻碍」一点，最好就什么限制什么义务都没有，这样利于开源的发展。但咱们刚才讲了，这毕竟不是现实。而且，维护网络安全，也不是特别严苛的义务，提供了完整的网络产品和网络服务，才受网络安全法的约束。所以我觉得对于这些公司来讲，进行安全漏洞的审查、提高网络安全的等级也并不是一个特别严苛的要求。相反，对于个人开发者，他可能没有能力提供完整的网络服务或网络产品，可能也不会受到网络安全法的约束。</p><p>对于开源的发展，我们从网络安全的角度讲，这确保了大家的信息不会被盗取，公司的商业秘密也不会被泄露，这样对整个社会都有好处。具体到开源，你说这样做对开源施加了义务，那我觉得这也是一个好的义务。可能有一种想法是——施加义务会有一些负面的影响。但我要说，这要看是从小的图景看还是从大的图景看：从小图景看，人家使用者也要注意网络安全，使用开源软件也一样会有顾虑的；从大的图景看，确保了网络安全之后，我们整个网络社会都会受益，对开源的推广说不定更友好。</p><p>&nbsp;</p><hr><p><strong>本期嘉宾：</strong>邓超|律师（微信号：dengchao）</p><p><img height="500" src="https://oscimg.oschina.net/oscnet/up-16343324407e4264d7fe0514fb742b0d6ff.jpg" width="357" referrerpolicy="no-referrer"></p><p>具有理学学士和法学博士学位，有着深厚的法学理论基础；在知识产权行业从业十余年，有着丰富的实践经验。</p><p>长期专注于科技和媒体领域的知识产权前沿问题的研究和实践，代表客户处理相关的诉讼和非诉法律事务。</p><p>在进入律师事务所之前，曾就职于世界 500 强公司的法务部以及国内顶尖的知识产权事务所，为众多跨国公司、国内上市公司等提供知识产权法律服务。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 17 Oct 2023 00:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6852546/blog/10118120</guid>
            <link>https://my.oschina.net/u/6852546/blog/10118120</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 引擎中国版 ——「团结引擎」开启内测]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Unity「团结引擎」的首款产品<strong>团结引擎创世版</strong>和<strong>团结引擎车机版</strong>正式开启内测，官方称这是「团结引擎」首次面向开发者进行小范围内测。</p><p><img src="https://static.oschina.net/uploads/space/2023/1016/185215_SpWK_2720166.png" referrerpolicy="no-referrer"></p><p><strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fform.cloud.custouch.com%2Fshow%2F1133685117202554880%3Fsource_id%3D1089517583%2520109238785%26source%3D%25E7%25BA%25BF%25E4%25B8%258A%25E5%2592%25A8%25E8%25AF%25A2%26utm_content%3Dofficialwebsite" target="_blank">试用团结引擎</a></u>&nbsp;|&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fform.cloud.custouch.com%2Fshow%2F1133691357160824832%3Fsource_id%3D1089517583%2520109238785%26source%3D%25E7%25BA%25BF%25E4%25B8%258A%25E5%2592%25A8%25E8%25AF%25A2%26utm_content%3Dofficialwebsite" target="_blank">试用团结引擎车机版</a></u></strong></p><p>测试时间：<strong>2023 年 10 月 16 日至&nbsp;2023 年 12 月 31 日</strong>。</p><blockquote><ul><li>团结引擎创世版内测指南：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.unity.cn%2Fprojects%2F652cd17cedbc2a5e496b4fc5" target="_blank">https://developer.unity.cn/projects/652cd17cedbc2a5e496b4fc5</a></li><li>团结引擎内测常见问题解答：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.unity.cn%2Fask%2Fquestion%2F65228668edbc2ae4d76d40c0" target="_blank">https://developer.unity.cn/ask/question/65228668edbc2ae4d76d40c0</a></li></ul></blockquote><p style="margin-left:0; margin-right:0"><span>团结引擎是 Unity 中国研发团队推出的 Unity 中国版引擎，它以<strong> Unity 2022 LTS </strong>为研发基础，推出了微信小游戏解决方案、团结引擎车机版。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f082776e33a3e9573c60fb125932e11db69.png" referrerpolicy="no-referrer"></p><p>团结引擎主页：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Funity.cn%2Ftuanjie%2Ftuanjieyinqing" target="_blank">https://unity.cn/tuanjie/tuanjieyinqing</a></u></p><hr><p>延伸阅读：<a href="https://www.oschina.net/news/255156" target="_blank">Unity 引擎中国版 「团结引擎」 正式发布</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 10:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261999</guid>
            <link>https://www.oschina.net/news/261999</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「Firefox 账户」更名为「Mozilla 账户」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>Mozilla <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.mozilla.org%2Fzh-CN%2Fkb%2Ffirefox-accounts-renamed-mozilla-accounts" target="_blank">宣布</a>，从 11 月 1 日，起，「Firefox 账户」将更名为「Mozilla 账户」。</p><p><img src="https://static.oschina.net/uploads/space/2023/1016/162545_lOgp_2720166.png" referrerpolicy="no-referrer"></p><p>Mozilla 表示，Firefox 账户已成为 Mozilla 为各种产品和服务提供的主要身份验证和账户管理服务，为全球数百万活跃账户客户提供支持。因此，<strong>原来的「Firefox」品牌已不能准确反映 Mozilla 产品的广泛范围</strong>。</p><p>重新命名的目的是为所有 Mozilla 产品创造更加一致的品牌体验，提高人们对&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.mozilla.org%2Ffirefox%2Fproducts%2F" target="_blank">Mozilla 产品组合</a>的认识。</p><p>具体内容查看官方公告：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsupport.mozilla.org%2Fzh-CN%2Fkb%2Ffirefox-accounts-renamed-mozilla-accounts" target="_blank">https://support.mozilla.org/</a></u></p><hr><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37884585" target="_blank">有网友表示</a>，Mozilla&nbsp; 更应该将「<strong>Firefox」</strong>打造成品牌，因为这个名字传递了<strong>「快速」</strong>、<strong>「灵活」</strong>的理念，符合 Mozilla 产品的气质，还自带有趣且可爱的属性 。而<strong>「Mozilla」</strong>给人的感觉则是又丑又笨重。</p><p>Mozilla 和 Firefox 的 logo 对比：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f441d71d24ac6d3fae21c3ec85c9957bf63.png" referrerpolicy="no-referrer">&nbsp;<img alt="" src="https://oscimg.oschina.net/oscnet/up-c6fa82516091b2f4eee07b3cdd0a2ea7c87.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 08:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261971/firefox-accounts-renamed-mozilla-accounts</guid>
            <link>https://www.oschina.net/news/261971/firefox-accounts-renamed-mozilla-accounts</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 大屏数据可视化设计器 Light Chaser]]>
            </title>
            <description>
                <![CDATA[<h2 align="middle"><a id="user-content--light-chaser" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#-light-chaser"></a> LIGHT CHASER</h2><p align="middle"><img alt="" src="https://img.shields.io/badge/version-v0.0.3-blue" referrerpolicy="no-referrer"><img alt="" src="https://img.shields.io/badge/language-typescript-blue" referrerpolicy="no-referrer"><img alt="" src="https://img.shields.io/badge/license-MIT-08CE5D?logoColor=08CE5D" referrerpolicy="no-referrer"><img alt="" src="https://img.shields.io/badge/framework-React-61daeb?logoColor=08CE5D" referrerpolicy="no-referrer"></p><p align="middle">light chaser 是一个可拖拽式的 WEB 数据可视化设计器</p><p align="middle"><a href="https://gitee.com/link?target=https%3A%2F%2Fxiaopujun.github.io%2Flight-chaser-app%2F%23%2F" target="_blank">Demo</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1v8411z78f%2F%3Fshare_source%3Dcopy_web%26vd_source%3Dece0559aa5b8c4f5c0d7307cb2b06aac" target="_blank">视频</a></p><h1><a id="user-content-一简介" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%B8%80%E7%AE%80%E4%BB%8B"></a>一、简介</h1><p>Light Chaser(LC) 是一款基于 React 生态的大屏数据可视化设计器。通过简单的拖拽，即可生成漂亮、美观的可视化数据大屏和看板。</p><p>她具有以下特点：</p><ul><li>高性能：结合 React 和 Mobx 的特点以及 LC 本身的设计理念。 尽最大努力的避免组件的无效渲染。 使得 LC 的整体性能保持在了一个较好的水平。 在几百个复杂组件的场景下。 仍能做到流畅的渲染。</li><li>高扩展：LC 提供一个统一接口。只需实现该接口。理论上可以接入任何 react 生态的组件。这使得 LC 的组件库可以无限扩展。</li><li>高可定制：同样依赖于设计的统一接口。 对于开发者自己实现的组件。它的配置项完全可以由开发者自定义。你可以使用 LC 提供的默认配置组件。也可以完全使用自己的实现。</li><li>前后端分离：本项目 100% 前后端分离，即使没有后端服务。LC 设计器也可以像本地应用一样完美运行（目前仅支持本地运行，后续会支持部署到服务器）。</li><li>主题快速切换：LC 提供了主题切换功能。你可以在全局切换主题。也可以在组件级别切换主题。这使得你可以快速的切换主题。从而快速的生成不同风格的大屏。</li><li>快捷键操作：LC 提供了丰富的快捷键操作。你可以通过快捷键快速的完成一些操作。从而提高你的工作效率。</li><li>拖拽栅格化布局：LC 提供了拖拽栅格化布局功能。你可以通过拖拽的方式快速的完成布局。从而快速的生成大屏。</li></ul><h1><a id="user-content-二效果展示" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%BA%8C%E6%95%88%E6%9E%9C%E5%B1%95%E7%A4%BA"></a>二、效果展示</h1><p><img src="https://s2.loli.net/2023/08/30/SnIYcomQWxaGyfj.png" alt="image.png" referrerpolicy="no-referrer"></p><h1><a id="user-content-三如何运行" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%B8%89%E5%A6%82%E4%BD%95%E8%BF%90%E8%A1%8C"></a>三、如何运行</h1><ol><li>克隆项目到本地</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://gitee.com/xiaopujun/light-chaser.git</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="2"><li>安装项目依赖</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">yarn <span class="nb">install</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="3"><li>启动项目</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">yarn start</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="4"><li>访问项目</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">http://localhost:3000</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><ol start="5"><li>打包项目</li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">yarn build</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-四如何使用" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E5%9B%9B%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8"></a>四、如何使用</h1><table><thead><tr><th>操作方式/快捷键</th><th>说明</th></tr></thead><tbody><tr><td>双击左侧组件</td><td>添加组件到画布</td></tr><tr><td>鼠标右键长按</td><td>拖拽画布</td></tr><tr><td>alt + 滑轮</td><td>缩放画布</td></tr><tr><td>ctrl + v</td><td>复制组件</td></tr><tr><td>ctrl + l</td><td>锁定组件</td></tr><tr><td>ctrl + 方向上键</td><td>置顶组件</td></tr><tr><td>ctrl + 方向下键</td><td>置底组件</td></tr><tr><td>delete</td><td>删除组件</td></tr><tr><td>up</td><td>组件上移</td></tr><tr><td>down</td><td>组件下移</td></tr><tr><td>left</td><td>组件左移</td></tr><tr><td>right</td><td>组件右移</td></tr><tr><td>ctrl + shift + up</td><td>组件向上放大</td></tr><tr><td>ctrl + shift + down</td><td>组件向下放大</td></tr><tr><td>ctrl + shift + left</td><td>组件向左放大</td></tr><tr><td>ctrl + shift + right</td><td>组件向右放大</td></tr><tr><td>ctrl + alt + up</td><td>组件向上缩小</td></tr><tr><td>ctrl + alt + down</td><td>组件向下缩小</td></tr><tr><td>ctrl + alt + left</td><td>组件向左缩小</td></tr><tr><td>ctrl + alt + fight</td><td>组件向右缩小</td></tr><tr><td>ctrl + z</td><td>撤销</td></tr><tr><td>ctrl + shift + z</td><td>重做</td></tr></tbody></table><h1><a id="user-content-五目录结构" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%BA%94%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84"></a>五、目录结构</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">src</span><span id="LC2" class="line">├─comps 设计器组件列表（所有可拖拽的组件均在该目录下实现）</span><span id="LC3" class="line">│  ├─antd antd 组件实现</span><span id="LC4" class="line">│  ├─common-fragment 公共代码片段</span><span id="LC5" class="line">│  └─lc 设计器自带组件实现</span><span id="LC6" class="line">├─designer 设计器</span><span id="LC7" class="line">│  ├─canvas 画布</span><span id="LC8" class="line">│  ├─common 公共代码</span><span id="LC9" class="line">│  ├─footer 设计器底部</span><span id="LC10" class="line">│  ├─header 设计器头部</span><span id="LC11" class="line">│  ├─left 设计器左侧</span><span id="LC12" class="line">│  ├─operate-provider 设计器事件操作</span><span id="LC13" class="line">│  ├─right 设计器右侧</span><span id="LC14" class="line">│  ├─store 设计器状态管理</span><span id="LC15" class="line">│  ├─structure 设计器页面框架结构</span><span id="LC16" class="line">│  └─view </span><span id="LC17" class="line">├─framework 框架设计</span><span id="LC18" class="line">│  └─core 自动扫描组件定义</span><span id="LC19" class="line">├─icon </span><span id="LC20" class="line">├─lib 自己实现的组件库</span><span id="LC21" class="line">├─list 列表页（首页）</span><span id="LC22" class="line">└─utils 工具类</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-六如何快速接入自己的组件" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E5%85%AD%E5%A6%82%E4%BD%95%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5%E8%87%AA%E5%B7%B1%E7%9A%84%E7%BB%84%E4%BB%B6"></a>六、如何快速接入自己的组件</h1><p>在 LC 中接入自己的组件非常简单。你仅需要做一件事！！！</p><ol><li>找到 src/comps 目录，新建一个你自定义组件的文件夹</li><li>假设我的自定义组件名为：MyComp</li><li>新建 ts 文件，命名为：MyComp.ts，在该文件中新建一个 class，并继承 AbstractCustomComponentDefinition。实现其中的方法。</li><li>新建 ts 文件，命名为：MyCompDefinition.ts，在该文件中新建一个 class，并继承 AbstractDesignerComponent。实现其中的方法。</li></ol><p>到此就结束了！！！剩下的交给自动扫描器，他会自动扫描你的组件，并将其注册到 LC 中。</p><p>代码示例可参考：src/comps/antd/pie 中的实现</p><h1><a id="user-content-七-结语" class="anchor" href="https://gitee.com/xiaopujun/light-chaser#%E4%B8%83-%E7%BB%93%E8%AF%AD"></a>七、 结语</h1><p>如果觉得本项目不错，欢迎 star</p>]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 08:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/xiaopujun/light-chaser</guid>
            <link>https://gitee.com/xiaopujun/light-chaser</link>
        </item>
        <item>
            <title>
                <![CDATA[为.NET 打开新大门：OpenVINO.NET 开源项目全新发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h1>为.NET 打开新大门：OpenVINO.NET 开源项目全新发布</h1><p>在 AI 的应用越来越广泛的今天，优化深度学习模型并进行推理部署已经成为了一门必要的技术。Intel 开发的 OpenVINO 工具包（Open Visual Inference and Neural network Optimization）就是这样一款强大的工具。作为一个开源的工具包，OpenVINO 为开发者提供了强大的深度学习模型优化和推理功能，支持跨不同的 Intel 硬件平台进行部署，包括 CPU, 集成 GPU, Intel Movidius VPU, 和 FPGAs。该工具包的初衷就是实现一处编码后，能在任何地方部署的机器学习推理的解决方案。</p><p>然而在与深度学习模型推理打交道的过程中，我逐渐发现原本我基于百度<a href="https://www.oschina.net/action/visit/ad?id=1185">飞桨</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fpaddlepaddle%2Fpaddle" target="_blank" rel="nofollow">paddlepaddle</a>开发过的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fpaddlesharp" target="_blank" rel="nofollow">PaddleSharp</a>项目在 CPU 推理 OCR 性能方面，同样的模型，OpenVINO 的性能更胜一筹。于是我开始关注 OpenVINO，发现它的 C API 对于.NET 世界来说并没有一个合适且高质量的封装。市面上的一部分封装可能只是为了满足特定项目的需求，功能不够完善；有些虽然功能完善但命名规范可能不符合.NET 社区规范；有些在错误处理和性能方面存在问题，或者无法做到跨平台，这与 OpenVINO 的跨平台性矛盾。.NET 世界亟需一个更高质量的 OpenVINO 封装，而我感觉我有能力去努努力。因此，我在今年的节前立下了 flag——国庆期间大干一票，开始了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fopenvino.net" target="_blank" rel="nofollow">OpenVINO.NET</a>的开源之旅。</p><h1>如何使用</h1><h2>NuGet 包简介</h2><p>使用<code>OpenVINO.NET</code>，最简单的方法不是克隆我的 Github 库（但欢迎 star），而是使用我发布的 NuGet 包，一般它需要配合<code>OpenCVSharp4</code>一起使用，因此你通常可以安装下面 4 个 NuGet：</p><ul><li>Sdcb.OpenVINO</li><li>Sdcb.OpenVINO.runtime.win-x64</li><li>OpenCvSharp4</li><li>OpenCvSharp4.runtime.win</li></ul><p>和<code>OpenCvSharp4</code>一样，我发布的包也包含.NET PInvoke 包和平台动态链接库包，如上<code>Sdcb.OpenVINO</code>为.NET PInvoke 包，<code>Sdcb.OpenVINO.runtime.win-x64</code>为兼容 Windows 平台的动态链接库包，里面包含了一些 dll。</p><p>如果是基于<code>Linux</code>，我专门发布了一个镜像用于减轻部署压力：<code>sdflysha/openvino-base</code>，这个镜像基于.NET 7 SDK 的 Ubuntu 22.04 版本，包含了 OpenCvSharp 4.8 的运行时和所有<code>OpenVINO</code>的运行时依赖，要使用这个镜像，需将.NET 项目第一行的<code>FROM mcr.microsoft.com/dotnet/runtime</code>改为<code>FROM sdflysha/openvino-base</code>，使用时当然也需要安装<code>ubuntu 22.04</code>平台的动态链接库包：<code>Sdcb.OpenVINO.runtime.ubuntu.22.04-x64</code>。</p><p>实际上我发布了 8 种不同平台的 NuGet 包，这是所有我此项目新发布的 NuGet 包列表：</p><table><tbody><tr><th>包名</th><th>版本号</th><th>简介</th></tr></tbody><tbody><tr><td>Sdcb.OpenVINO</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085843_q2uM.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>.NET PInvoke</td></tr><tr><td>Sdcb.OpenVINO.runtime.centos.7-x64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.centos.7-x64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085843_AE0m.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>CentOS 7 x64</td></tr><tr><td>Sdcb.OpenVINO.runtime.debian.9-arm</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.debian.9-arm" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085844_dArb.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>Debian 9 ARM</td></tr><tr><td>Sdcb.OpenVINO.runtime.debian.9-arm64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.debian.9-arm64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085844_Jea2.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>Debian 9 ARM64</td></tr><tr><td>Sdcb.OpenVINO.runtime.rhel.8-x64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.rhel.8-x64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085844_nKVZ.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>RHEL 8 x64</td></tr><tr><td>Sdcb.OpenVINO.runtime.ubuntu.18.04-x64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.ubuntu.18.04-x64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085844_oDIl.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>Ubuntu 18.04 x64</td></tr><tr><td>Sdcb.OpenVINO.runtime.ubuntu.20.04-x64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.ubuntu.20.04-x64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085845_WPl1.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>Ubuntu 20.04 x64</td></tr><tr><td>Sdcb.OpenVINO.runtime.ubuntu.22.04-x64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.ubuntu.22.04-x64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085845_oFIw.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>Ubuntu 22.04 x64</td></tr><tr><td>Sdcb.OpenVINO.runtime.win-x64</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.runtime.win-x64" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085845_5HRp.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>Windows x64</td></tr></tbody></table><p>有兴趣的朋友一定会想，发布并维护这么多包做起来一定很麻烦。其实还好，感谢我此前<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp 项目的经验（那个项目也维护了一屏幕的包），我基于官网的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstorage.openvinotoolkit.org%2Ffiletree.json" target="_blank" rel="nofollow">filetree.json</a>做了一些解析，它可以一键自动下载并生成上面这些 NuGet 包，有兴趣的朋友可以看看我 Github 中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FOpenVINO.NET%2Ftree%2F123733cddebce2351a26452a15017fdd1104cb80%2Fgenerator%2FSdcb.OpenVINO.NuGetBuilder" target="_blank" rel="nofollow">Sdcb.OpenVINO.NuGetBuilder</a>这个项目了解我是如何解析并自动创建 NuGet 包的。</p><h2>API 设计</h2><p>和我此前做过的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FPaddleSharp" target="_blank" rel="nofollow">PaddleSharp</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fsdcb.libraw" target="_blank" rel="nofollow">Sdcb.LibRaw</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fsdcb.arithmetic" target="_blank" rel="nofollow">Sdcb.Arithmetic</a>, <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fsdcb.ffmpeg" target="_blank" rel="nofollow">Sdcb.FFmpeg</a>等开源项目相似，我这个项目也秉持下面这些原则：</p><ol><li>完全支持低级 C API，也就是说如果你更享受原汁原味的 C API 的感觉——或者像我一样不想失去对低层的掌控，使用 OpenVINO.NET 可以满足这一期望；</li><li>同时也为所有的低级 API 提供了便利好用的高层 API；</li><li>高层 API 符合<code>C#</code>的命名规范，完全利用了<code>C#</code>的优秀特性，做好了异常错误处理；</li><li>高层 API 使用了<code>C#</code>世界有利于性能优化的特性，如<code>ReadOnlySpan&lt;T&gt;</code>，比如恰当使用值类型；</li><li>所有的高层 API 都提供了完善了 XML 注释，并经过了详尽的单元测试；</li><li>此外我还控制了我携带的「私货」——没必要做成公有的 API 一律做成<code>internal</code>或<code>private</code>，且不污染常用类型的扩展方法</li></ol><p>目前这个项目已经基本稳定，基于这些<code>API</code>，我测试发现它和<code>C</code>/<code>C++</code>推理性能几乎并无差异，<code><a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR</code>推理时，性能可以比<code><a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp</code>项目快得多，且得益于<code>C#</code>的优秀语言特性，使用起来会非常的省心。</p><p>设计 FAQ：</p><ul><li>Q: 为何<code>OpenVINO.NET</code>没有直接引用<code>OpenCvSharp4</code>？ 
  <ul><li>A: 我个人很喜欢<code>OpenCvSharp4</code>，开源协议很友好，但一来<code>OpenCvSharp4</code>官方支持的平台不够多，且有些人可能更喜欢<code>Emgu.CV</code>或<code>ImageSharp</code>，尽量不做绑架为好</li></ul></li><li>Q: C API 有 158 个函数接口、26 个接口体，也写了详尽的<code>XML</code>注释，是怎么在短时间内高质量地做到的？ 
  <ul><li>A: 我是自动生成的，我使用了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmono%2FCppSharp" target="_blank" rel="nofollow">CppSharp</a>项目，CppSharp 将 C API 的头文件内容转换为抽象语法树 (AST)，然后我将这些 AST 转换为 XML 注释详尽的<code>C#</code>代码。其实我已经不是第一次将 CppSharp 应用到开源项目中，有兴趣的朋友可以看我 Github <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FOpenVINO.NET%2Ftree%2F123733cddebce2351a26452a15017fdd1104cb80%2Fgenerator%2FSdcb.OpenVINO.AutoGen" target="_blank" rel="nofollow">Sdcb.OpenVINO.AutoGen</a>这个项目了解实现的细节。</li></ul></li></ul><p>为想了解如何使用的朋友，我还写了基于<code>yolov8</code>的检测和分类的推理示例，<code>OpenVINO</code>官方的人脸检测示例以及我为它原生设计和迁移的<code><a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR</code>项目。另外我还想畅谈一下项目的设计思路和未来的发展方向。</p><h2>4 个示例</h2><h3>人脸检测 - 基于 OpenVINO 官网提供的 face-detection-0200 模型</h3><p>我这个示例中使用的是 OpenVINO 官网提供的<code>face-detection-0200</code>模型，官网提供了介绍页面：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.openvino.ai%2F2023.1%2Fomz_models_model_face_detection_0200.html%25E3%2580%2582" target="_blank" rel="nofollow">https://docs.openvino.ai/2023.1/omz_models_model_face_detection_0200.html。</a></p><p>详尽的示例代码可以从我创建的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fmini-openvino-facedetection" target="_blank" rel="nofollow">mini-openvino-facedetection</a>这个 Github 仓库找到，运行时，它会将摄像头中定位人脸位置并框出来，效果图如下：<br><img src="https://static.oschina.net/uploads/img/202310/16085845_hXGO.png" alt="" referrerpolicy="no-referrer"></p><p>如图，人脸识别效果正常，上面也标注了每帧推理耗时（约 2.14ms）。</p><p>我使用的是 AMD R7 5800X 进行的 CPU 推理，其实代码也支持 Intel 的 GPU。将<code>DeviceOptions</code>的第一个参数从<code>"CPU"</code>（默认值）改为<code>"GPU"</code>即可，但我只有集成显卡，测试发现虽然能正常工作，且 CPU 使用率降低了且 GPU 使用率上升了，但<code>GPU</code>推理时间比<code>CPU</code>还更慢。</p><h3>物体识别 - 基于 yolov8 模型的物体分类</h3><p>在上一个例子中，我们已经看到了如何使用 OpenVINO.NET 进行人脸检测。接下来，我们再来看一下如何使用物体识别模型进行物体分类。</p><p>这个示例使用的是<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.ultralytics.com%2Fmodels%2Fyolov8%2F%23supported-modes" target="_blank" rel="nofollow">yolov8 官网</a>下载的<code>YOLOv8n</code>模型，这个模型支持 80 种物体的检测。下载后格式为<code>.pt</code>文件，表示<code>pytorch</code>模型，需使用<code>yolo export model=yolov8n.pt format=openvino</code>命令（yolo 通过 pip 安装 ultralytics 包得到）将其导出为<code>openvino</code>格式的模型，<code>openvino</code>模型包含一个<code>xml</code>和一个<code>bin</code>文件。</p><p>详尽的示例代码可以从我创建的另一个仓库：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fsdcb-openvino-yolov8-det" target="_blank" rel="nofollow">sdcb-openvino-yolov8-det</a>中找到，仓库我我已经将模型转换好了。运行时，代码会读取摄像头的每一帧，并将检测到的物体位置框出来，效果图如下：</p><p><img src="https://static.oschina.net/uploads/img/202310/16085846_OjX7.png" alt="" referrerpolicy="no-referrer"></p><p>如图，检测出了 3 个物体，画面中的人、手机和水杯，总耗时约 30ms。</p><h3>物体分类 - 基于 yolov8 的分类模型</h3><p>yolov8 模型提供了 1000 种不同的预定义分类，和上面的模型一样，需要从 yolov8 官网下载并转换，只想快速尝鲜的朋友可以直接打开我写的另一个 Github 示例：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fsdcb-openvino-yolov8-cls" target="_blank" rel="nofollow">sdcb-openvino-yolov8-cls</a></p><p>运行时，代码会读取一张图片，然后尝试推测出该图片最像 1000 种分类中的哪一种，在我的代码示例中，输入图片为 hen.jpg：</p><p><img src="https://static.oschina.net/uploads/img/202310/16085846_voqF.jpg" alt="" referrerpolicy="no-referrer"></p><p>输出如下：</p><pre><code>class id=hen, score=0.59
preprocess time: 0.00ms
infer time: 1.65ms
postprocess time: 0.49ms
Total time: 2.14ms
</code></pre><p>推理得到最有可能的分类是 hen（母鸡），信心值为 0.59，总耗时 2.14ms。</p><h3><a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR - 混合 3 种模型</h3><p><a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR 是百度<a href="https://www.oschina.net/action/visit/ad?id=1185">飞桨</a>发布了一款性能、精度都较好的开源模型。</p><p>和<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp 项目一样，我给 OpenVINO.NET 项目也内置了<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR 的便利化项目，且 API 设计和<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp 几乎完全一样，熟悉<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp 的朋友应该可以很轻松地迁移到 OpenVINO.NET，我专门为<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR 提供发布了下面 2 个 NuGet 包：</p><table><tbody><tr><th>包名</th><th>版本号 📌</th><th>描述</th></tr></tbody><tbody><tr><td>Sdcb.OpenVINO.<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.PaddleOCR" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085846_Bh4x.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>OCR 主包</td></tr><tr><td>Sdcb.OpenVINO.<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR.Models.Online</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnuget.org%2Fpackages%2FSdcb.OpenVINO.PaddleOCR.Models.Online" target="_blank" rel="nofollow"><img src="https://static.oschina.net/uploads/img/202310/16085846_Ao8q.svg" alt="NuGet" referrerpolicy="no-referrer"></a></td><td>包含需在线下载的模型包</td></tr></tbody></table><p>加上上面那 4 个包，运行基于 OpenVINO.NET 的<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR 需要下载下面这 6 个包：</p><ul><li>Sdcb.OpenVINO</li><li>Sdcb.OpenVINO.runtime.win-x64</li><li>OpenCvSharp4</li><li>OpenCvSharp4.runtime.win</li><li>Sdcb.OpenVINO.<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR</li><li>Sdcb.OpenVINO.<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>OCR.Models.Online</li></ul><p>最小代码示例如下：</p><pre><code class="language-csharp">using OpenCvSharp;
using Sdcb.OpenVINO.PaddleOCR.Models.Online;
using Sdcb.OpenVINO.PaddleOCR.Models;
using Sdcb.OpenVINO.PaddleOCR;
using System.Diagnostics;
using System;

FullOcrModel model = await OnlineFullModels.ChineseV3.DownloadAsync();

using Mat src = Cv2.ImDecode(await new HttpClient().GetByteArrayAsync("https://io.starworks.cc:88/paddlesharp/ocr/samples/xdr5450.webp"), ImreadModes.Color);

using (PaddleOcrAll all = new(model)
{
    AllowRotateDetection = true,
    Enable180Classification = true,
})
{
    // Load local file by following code:
    // using (Mat src2 = Cv2.ImRead(@"C:\test.jpg"))
    Stopwatch sw = Stopwatch.StartNew();
    PaddleOcrResult result = all.Run(src);
    Console.WriteLine($"elapsed={sw.ElapsedMilliseconds} ms");
    Console.WriteLine("Detected all texts: \n" + result.Text);
    foreach (PaddleOcrResultRegion region in result.Regions)
    {
        Console.WriteLine($"Text: {region.Text}, Score: {region.Score}, RectCenter: {region.Rect.Center}, RectSize:    {region.Rect.Size}, Angle: {region.Rect.Angle}");
    }
}
</code></pre><p>运行效果如下：</p><pre><code>elapsed=246 ms
Detected all texts:
高速 4X4160MHz 数据流
5GHz 频段流数多一倍
速度快一倍 3
AX5400 无线规格的路由器，
5GHz 频段采用高速 4X4160MHz 数据流，
相比市面上主流的 AX3000 路由器（2X2 数据流）
5GHz 频段流数多一倍，速度快一倍。
...
</code></pre><p>耗时为 246ms，根据我的测试，实际上第二次运行 OpenVINO 可以降低到 140ms 左右，同样的代码<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp 耗时约 452ms（<a href="https://www.oschina.net/action/visit/ad?id=1185">Paddle</a>Sharp 使用 MKLDNN，仅测试首次运行），显然使用我的新开源项目 OpenVINO.NET 更快。</p><p>上面完整的可运行代码，可以从我的 Github 另一个仓库<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2Fmini-openvino-paddleocr" target="_blank" rel="nofollow">mini-openvino-paddleocr</a></p><h1>结语</h1><p>本文中，我向大家介绍了如何使用我新发布的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FOpenVINO.NET" target="_blank" rel="nofollow">OpenVINO.NET</a>，并提供了数个生动的示例来演示如何将 OpenVINO.NET 用于深度学习模型的推理任务。虽然我只展示了四个应用示例，其实它们都可以被看作为学习 OpenVINO.NET 使用的良好起点。</p><p>通过这四个示例，读者可以轻松理解 OpenVINO.NET 的工作原理，在此基础上扩展将其用于其它模型的推理是加深理解和实践的不二选择。我专注于.NET 开源项目，并不断地为全球.NET 开发者提供更多的可能性，我尤其期待看到大家将 OpenVINO.NET 用于自身项目之中。</p><p>我相信开源的力量以及它为我们提供的无尽可能性。因此，我将<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FOpenVINO.NET" target="_blank" rel="nofollow">OpenVINO.NET</a>作为开源项目，希望它能帮助所有在寻找高效，便捷的深度学习推理工具的.NET 开发者。如果你发现这个项目有用，或者正在使用它，我非常欢迎你能去<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FOpenVINO.NET" target="_blank" rel="nofollow">我的项目主页</a>上给我一个 star🌟，这对我将会是巨大的鼓励！你们的使用经验和星标都是我继续进行.NET 开源项目工作的动力！</p><p>我还创建了一个.NET 骚操作技术交流 QQ 群：495782587，欢迎对.NET「骚」操作感兴趣的朋友加入一起探讨。</p><p>最后，如果你对我的业余开源工作感兴趣，并希望获取更多有关我.NET 开源项目的信息，也可以关注我的微信公众号：【DotNet 骚操作】</p><p><img src="https://static.oschina.net/uploads/img/202310/16085846_CGVW.jpg" alt="DotNet 骚操作" referrerpolicy="no-referrer"></p><p>让我们一起探索.NET 的无尽可能性。期待.NET 世界未来的更多精彩！</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 07:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/sdflysha/blog/10117949</guid>
            <link>https://my.oschina.net/sdflysha/blog/10117949</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenVINO.NET 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>在深度学习应用日益广泛的今天，优化深度学习模型并进行推理部署已经成为了一项必要的技术。OpenVINO 工具包，由 Intel 开发，作为一款开源的工具包，为开发者提供了强大的深度学习模型优化和推理功能。然而，对于.NET 世界来说，OpenVINO 的 C API 并没有一个适合且高质量的封装。这导致开发者在实现跨平台的深度学习模型推理时面临挑战。基于此，开源开发者 sdcb 发布了 OpenVINO.NET 项目，提供了高质量的 OpenVINO 封装。</p><p>OpenVINO.NET 项目不仅完全支持低级 C API，还为所有的低级 API 提供了便利好用的高层 API，其高层 API 符合 C#的命名规范，结合 C#的优秀特性，进行了良好的异常错误处理，同时享受 C#性能优化特性。并且，所有的高层 API 都提供了详尽的 XML 注释，并经过了详尽的单元测试。</p><p>开发者 sdcb 还在其博客文章中分享了如何使用 OpenVINO.NET 项目，包括如何使用 NuGet 包、API 设计、以及四个应用示例：基于 OpenVINO 官网提供的 face-detection-0200 模型的人脸检测、基于 yolov8 模型的物体分类、物体识别以及混合 3 种模型的 PaddleOCR。</p><p>OpenVINO.NET 项目旨在帮助所有在寻找高效，便捷的深度学习推理工具的.NET 开发者。如果你对这个项目有兴趣，欢迎前往开源项目主页了解更多详情：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsdcb%2FOpenVINO.NET" target="_blank">OpenVINO.NET</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 06:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261944</guid>
            <link>https://www.oschina.net/news/261944</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[esProc SPL —— 数据分析引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="project_detail_above_text_link_1" data-tracepid="project_detail_above_text_link"><a style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><p>esProc SPL 是一款面向结构化和半结构化数据的计算和处理引擎，可以用做分析型数据库和数据计算中间件。</p><p>esProc SPL 具有精心设计的丰富库函数和强大的语法，可通过 JDBC 接口在 Java 程序中执行，并可独立计算，主要应用于线下跑批和在线查询两个数据分析型应用场景。</p><p>作为一款数据分析引擎，esProc SPL 具备 4 个主要特点：低代码、高性能、轻量级、全功能。</p><p>主要特性</p><p style="color:#111111; text-align:left"><strong>（1）写法简单。</strong><span>&nbsp;</span>它使用可读的、描述性的语句，进行数据计算。比如，股票连续上涨的最长天数，它的写法要比 SQL 简单很多。</p><pre><code>stockprice
.sort(tradedate)
.group@i(closingprice &lt; closingprice[-1])
.max(~.len())</code></pre><p style="color:#111111; text-align:left"><strong>（2）计算快速。</strong><span>&nbsp;</span>它使用离散数学，避免了关系型数据库的查询模型，不需要生成中间表，能够快速得到计算结果，并且资源占用少。</p><p style="color:#111111; text-align:left"><strong>（3）使用成本低。</strong><span>&nbsp;</span>它不需要改造现有开发流程，本身采用 Java 开发，可以独立运行，无缝集成到应用之中，不用部署服务，解释执行。它提供标准 JDBC 接口，可以被 Java 应用集成调用。对于非 Java 应用，则提供 HTTP 的 RESTful 接口。</p><p style="color:#111111; text-align:left"><strong>（4）支持多种数据源</strong>，包括 MySQL 等主流关系型数据库、NoSQL 数据库、文本文件，JSON 文件。它本身也有自己的数据引擎，也可以把数据存在它里面。</p><p style="color:#111111; text-align:left"><strong>（5）易于使用。</strong><span>&nbsp;</span>为了适应国内的实际情况，加速推广，它有一个类似 Excel 的图形界面，输入指令就直接得到结果表格，学习成本低，便于快速上手。</p><p style="color:#111111; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-d9137499b03ed0f6b94d4c9a4f13216f001.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 05:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/esproc-spl</guid>
            <link>https://www.oschina.net/p/esproc-spl</link>
        </item>
        <item>
            <title>
                <![CDATA[苹果开发新装置：给未拆封的全新 iPhone 升级系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>根据 Apple Insider 援引彭博社的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fappleinsider.com%2Farticles%2F23%2F10%2F15%2Fapple-plans-to-update-iphones-in-store-without-opening-the-boxes" target="_blank">报道</a>，苹果公司开发了新的装置<strong>给尚未拆封的全新 iPhone 升级 iOS 操作系统</strong>。</p><p>彭博社原文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Fnewsletters%2F2023-10-15%2Fapple-october-2023-executive-promotions-new-vps-of-retail-software-operations-lnrh4t94" target="_blank">写道</a>：</p><blockquote><p>Apple 已准备好系统将最新软件加载到未拆封的 iPhone 上。当顾客从 Apple 零售店购买新 iPhone 时，该设备有时会附带过时的软件。例如，第一批出厂的 iPhone 15 机型预装了 iOS 17，但在设备可供购买时 iOS 17.0.1 已经可用。购买没有最新软件的新 iPhone 并不理想，尤其是存在一些引人注目的错误时。</p><p>但这种情况即将改变。<strong>苹果公司正在为其零售店规划一套新系统，该系统将在 iPhone 销售前更新软件</strong>。</p><p>该公司开发了一种<strong>类似垫子的专门设备</strong>，零售店可以将未拆封的盒装 iPhone 放在上面。然后，该设备以无线方式连接手机，唤醒 iPhone、自动下载更新、安装最新版 iOS，完成系统升级，然后关机——所有这些操作都无需打开手机的包装。该公司的目标是在今年年底前开始将其推广到其线下零售店。</p></blockquote><p>下面是用 AI 根据以上描述为这款装置生成的图片：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fcbc4ecc914950e6587fbea55630ea51aed.png" referrerpolicy="no-referrer"><br><em>via <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fxiaohuggg%2Fstatus%2F1713758779718996453" target="_blank">小互</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 04:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261929/apple-plans-to-update-iphones-in-store-without-opening-the-boxes</guid>
            <link>https://www.oschina.net/news/261929/apple-plans-to-update-iphones-in-store-without-opening-the-boxes</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[🔥周热点 | ChromeOS 就是 Linux；开源框架作者转行卖钢材；C# 逼近 Java......]]>
            </title>
            <description>
                <![CDATA[回顾一周热门资讯。2023.10.09-2023.10.15]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649093876&#38;idx=1&#38;sn=f35fb8f62002f2b5e3f41ee9d42ed30a&#38;chksm=880c4de7bf7bc4f1798eeae0bcc55b0e3da69a3600f77ea3e2391b3242b7ddc23ba81eabeff1&#38;token=1849529235&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649093876&#38;idx=1&#38;sn=f35fb8f62002f2b5e3f41ee9d42ed30a&#38;chksm=880c4de7bf7bc4f1798eeae0bcc55b0e3da69a3600f77ea3e2391b3242b7ddc23ba81eabeff1&#38;token=1849529235&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[拔出罗技 USB 接收器后，Linux 内核竟然崩溃了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p>科技媒体 Phoronix&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FLogitech-USB-Unplug-Linux-Crash" target="_blank">报道</a>了一个导致 Linux 内核崩溃的错误，触发原因有点出乎意料——竟然是<strong>拔出罗技 USB 接收器</strong>。</p><p>没错，就是下面这玩意儿 ↓</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0634db91f40d11c8fda1a4a2f78876db79d.png" referrerpolicy="no-referrer"></p><p>根据报道，在今天 Linux 6.6-rc6 发布之前，作为 HID 子系统修复的一部分，提到了一个相当尴尬的错误：</p><blockquote><p>在过去几个月里，拔出罗技 USB 接收器一直导致 Linux 内核崩溃。</p><p>围绕这个问题，从拔下罗技键盘/鼠标接收器到关掉连接有设备的 USB 开关，出现了许多错误报告。目前 Linux 6.6-rc6 内核已经进行了修复，并标记为向后移植到现有稳定 Linux 内核。</p></blockquote><p>Red Hat 工程师 Hans de Goede 在修复和改进 Linux 台式机/笔记本电脑硬件支持方面继续创造奇迹。他负责解决了罗技 USB 接收器断开连接触发的 bug。</p><p><img src="https://static.oschina.net/uploads/space/2023/1016/111519_Nosd_2720166.png" referrerpolicy="no-referrer"></p><p>Hans de Goede <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgit.kernel.org%2Fpub%2Fscm%2Flinux%2Fkernel%2Fgit%2Fhid%2Fhid.git%2Fcommit%2F%3Fh%3Dfor-linus%26id%3Ddac501397b9d81e4782232c39f94f4307b137452" target="_blank">提交的补丁</a>中称，<strong>有四个检查时间与使用时间的竞态条件问题 (</strong><strong>time-of-check vs. time-of-use races</strong><strong>) 需要解决。</strong></p><p>其实在这之前，Red Hat 在今年夏天发布了一系列不同的错误报告： USB 断开导致内核崩溃、USB 上的 power_supply_uevent 导致 page_fault_oops、内核模块 hid_logitech_dj 导致崩溃和 USB 损坏，以及罗技统一接收器无法正常工作等等。</p><p>该修复补丁已合并到今天发布的&nbsp;Linux 6.6-rc6 中，并将在未来几天向后移植到 Linux 稳定系列。</p><p>对了，如果你使用的是最新 Linux 内核版本，请勿拔出罗技 USB 接收器，以免内核崩溃。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 16 Oct 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261914/logitech-usb-unplug-linux-crash</guid>
            <link>https://www.oschina.net/news/261914/logitech-usb-unplug-linux-crash</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Timeplus 为全球开发者开源高性能实时数据平台核心]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><a data-traceid="news_detail_above_text_link_1" data-tracepid="news_detail_above_text_link" style="color:#A00; font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" _blank"="">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt;<img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>2023 年 9 月 21 日</strong><span>&nbsp;</span>- Timeplus，业界最快最强的实时流式分析平台之一，宣布将其核心引擎「Proton」正式开源提供给全球开发者。Timeplus 在融合 ClickHouse 的历史在线分析处理的基础上，开发了一款全新的流式数据处理优先、统一历史数据从存储到计算原生一体化的实时数据平台。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">这意味着企业现在可以使用统一 SQL 语言实时无缝地查询流式数据和历史数据，进行实时处理分析，实时生成报表。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">相对于其他流式数据处理技术而言，Timeplus 的高效和简洁的统一架构，不仅可以提供增强的数据处理及分析功能以及更好的性能，更可以让企业大大降低实时数据处理的开发、部署和运维成本。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 的联合创始人兼首席执行官王亭表示：「Timeplus 是一家由工程师创办，并为工程师服务的公司。我们广泛的开发者用户都表示十分喜欢 Timeplus 产品的简单、高效和优雅，许多人也都希望我们能开放源代码。我们倾听到大家的心声，非常高兴地正式宣布核心引擎‘Proton‘的开源，同时和 ClickHouse 成为合作伙伴并为社区作贡献，这将惠及全球的开发者。用户可以从高效的流式处理分析和 OLAP 历史分析结合中受益。」</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 认为仅靠单一的流式处理无法满足实时分析的复杂需求。要实时找到问题的根源并精确处理相关内容，需要参考历史数据。通过使用 Timeplus 和 ClickHouse 的集成，开发者现在可以无缝地关联历史数据和统一分析，以解决复杂的实时分析需求。例如：在线与离线数据的关联比较、数据回填和回测等。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">同时，用户现在也能更轻松、更经济、更快速地运行统一的实时分析，来应对一系列具有挑战性的多样化用例的分析问题，比如在金融服务和物联网等领域的分析。在实际使用中，Timeplus 客户使用统一高效的 SQL 流式处理完成实时分析，可以大幅度降低总体拥有成本（TCO），只是使用其他系统的 10%。</p><h2><strong>为应对行业挑战而生，为业界提供实时分析的创新技术方案</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 解决了一个极其困难的技术挑战：在单一内核提供了简单、高效、统一的流式分析与历史分析的融合。通过与 ClickHouse OLAP 分析能力的无缝整合，Timeplus 提供了强大的流式处理及复杂的增量计算能力，彻底改变了数据工程师和分析师的工作方式。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">许多行业都需要创新的方法来实现实时持续智能。例如资本市场，从优化成本以及基础设施来支持更可靠的交易，到在不断变化的市场环境下进行实时的风险控制和欺诈检测，实时处理技术一直至关重要。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">开发者常常陷入一个「三难选择」的境地，他们必须在速度、功能和开放性之间做出权衡，通常只能选择其中一个或两个。Timeplus 基于 SQL 的开放标准实现了历史和流式分析的强大功能以及超低延迟。通过将核心开源，Timeplus 为整个社区的开发者提供了机会，一起来参与到实时流式数据分析的平台创新中。Timeplus 强大的流式 SQL 和实时分析能力也能更好地帮助开发者加速各行各业的竞争优势。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">正如华泰证券信息技术部联席负责人、数字化运营部总经理王玲表示：「在今天瞬息万变的市场中，企业必须具备实时运营能力，否则将不进而退。Timeplus 填补了市场上的重要空白，它支持流式 SQL，不仅易于使用且分析速度快。这项技术使企业从流数据中提取洞见变得更加容易，节省了数百小时开发成千上万行代码的时间。Timeplus 能够实时监控并同步分析大量数据，大幅提升企业风控管理和成本分析的水平。」</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 产品在 2022 年 3 月份推出，目前拥有超过 250 家客户在这个平台上使用和测试。迄今为止，公司已经从领先的全球投资者中获得 900 万美元的天使轮融资，这些投资者包括高瓴创投、Sentinel Capital 的创始人 Jeremy Kranz、Apple 前供应链高级副总裁 Rory Sexton、世界流式数据技术先驱和 StreamBase 的创始人 Richard Tibbetts 等在内的天使投资者。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">全球开发者和技术爱好者还在犹豫什么，快来访问<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank">GitHub 上的 Proton</a>，只需几分钟的时间就可以启动预配置的 Docker 镜像，快速对接各种数据开始体验流批一站式实时数据处理和分析。欢迎大家查看代码，运行样例，提交反馈和贡献社区。</p><h2><strong>有关 Timeplus</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Timeplus 是一个「流式优先」的实时数据平台。它提供强大的端到端功能，帮助团队快速直观地处理流式数据和历史数据。该平台使数据工程师和平台工程师能够通过使用 SQL 解锁流式数据价值。Timeplus 的控制枱允许开发人员轻松连接到各种不同的数据源（如 Apache Kafka, Confluent Cloud, Redpanda, CSV 文件上传），通过 SQL 查询探索流式数据模式，向其他系统或个人发送实时洞察和警报，并创建仪表板和可视化图标。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">更多信息请访问：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fwww.timeplus.com%2F" target="_blank">timeplus.com</a>或<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank"><span style="background-color:transparent">https://</span>github.com/timeplus-io/<span style="background-color:transparent">proton</span></a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">最后，希望对 Timeplus 感兴趣的朋友可以关注我们的微信公众号<strong>Timeplus 公司</strong>与知乎号，欢迎体验<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Ftimeplus-io%2Fproton" target="_blank">开源</a>，免费注册试用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttp%253A%2F%2Fdemo.timeplus.cloud%2F" target="_blank">Timeplus Cloud</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 23:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/262043</guid>
            <link>https://www.oschina.net/news/262043</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【京东开源项目】微前端框架 MicroApp 1.0 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://gitee.com/gitee-community/gitee-talk/blob/fe3647ff951894421dbeb6c0c1c62a0a4fdb37db/Yuanchuanghui-1024.md" target="_blank">【源创会预告】1024 程序员节（的前两天），相约开源中国办公室，我们一起聊 AI！&gt;&gt;&gt; <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><h1><strong>介绍</strong></h1><p>MicroApp 是由京东前端团队推出的一款微前端框架，它从组件化的思维，基于类 WebComponent 进行微前端的渲染，旨在降低上手难度、提升工作效率。MicroApp 无关技术栈，也不和业务绑定，可以用于任何前端框架。</p><ul><li>源码地址： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicro-zoe%2Fmicro-app" target="_blank">https://github.com/micro-zoe/micro-app</a></li><li>官网地址： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmicro-zoe.github.io%2Fmicro-app" target="_blank">https://micro-zoe.github.io/micro-app</a></li></ul><p>微前端是一种页面整合方案，它的核心在于将一个庞大的前端应用拆分成多个独立灵活的小型应用，每个应用都可以独立开发、独立运行、独立部署，再将这些小型应用融合为一个完整的应用，或者将原本运行已久、没有关联的几个应用融合为一个应用。微前端既可以将多个项目融合为一，又可以减少项目之间的耦合，提升项目扩展性，相比一整块的前端仓库，微前端架构下的前端仓库倾向于更小更灵活。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-09-17-56s9u9k5698xquXhiR.png" alt="" referrerpolicy="no-referrer"></p><h1><strong>升级亮点</strong></h1><p>距离 MicroApp 开源已经有一年多时间，在这段时间里我们收到了很多问题反馈，包括沙箱的性能、vite 的兼容、路由冲突等等，为了解决这些问题我们将很多核心功能进行升级和重构，经过不断的打磨和验证，最终推出 MicroApp1.0 正式版。</p><p>正式版的升级主要在以下几个方面：</p><ol><li><p>更简洁的接入方式</p></li><li><p>沙箱的性能</p></li><li><p>虚拟路由系统</p></li><li><p>样式隔离</p></li><li><p>兼容 vite</p></li><li><p>开发工具</p></li></ol><h1>一行代码嵌入</h1><p>MicroApp 借鉴了 WebComponent 的思想，通过 CustomElement 结合自定义的 ShadowDom，将微前端封装成一个类 WebComponent 组件，实现微前端的组件化渲染。在此基础上，通过实现 JS 隔离、样式隔离、路由隔离，降低子应用的接入成本，子应用只需设置允许跨域请求，不需要改动任何代码即可接入微前端，使用方式和 iframe 几乎一致，但却没有 iframe 存在的问题。</p><p>接入方式如下：</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37W37IZAN9Rm8zyOgl.png" alt="" referrerpolicy="no-referrer"></p><h1>JS 沙箱的困境</h1><p>在 MicroApp 开源后我们收到社区的一些反馈，其中一条关于性能的问题引起我们的重视。这不是 MicroApp 才存在的问题，而是微前端长久以来的难题，在社区有大量关于沙箱性能问题的讨论，却始终没有完美的解决方案。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37Tl118FkIfctahnto.png" alt="" referrerpolicy="no-referrer"></p><p>MicroApp 采用的是和 qiankun 一样的 proxy+with 的沙箱方案，这也是目前 js 沙箱的主流方案 。with 沙箱的功能非常完善，但是性能损耗却非常明显，在社区中也不乏对 with 沙箱性能问题的讨论，但一直没有特别完美的解决方案，这是由于 with 改变了 js 的作用域链，从而产生大量的重复请求。问题的根源是 with，但又不全是 with 的问题，准确的说是 with 和 proxy 两者叠加造成的，with 和 proxy 本质上的性能都不高，需要一种方案避免对这两个方法的频繁读取操作，MicroApp 采用的解决方案是变量前置和异步防抖。</p><p>• 变量前置：是指使用 Object.defineProperty 定义全局变量，通过 get 和 set 设置响应数据，一是为了避免在 proxy 的 get 中进行多余的操作，二是 defineProperty 的性能比 proxy 更优秀 。</p><p>• 异步防抖：是指在子应用运行时对 promise 进行标记，确保在上一个 promise 执行完成之后才会进入下一个，避免并行触发，防止 promise 被频繁触发会造成性能损失。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37ouEY627EsroKJ8rL.png" alt="" referrerpolicy="no-referrer"></p><p>在此基础上，MicroApp 沙箱还提供了快照、缓存、预加载等功能，在保证功能不变的前提下，彻底解决沙箱的性能问题，升级后的沙箱运行效率媲美原生 JS。</p><h1>虚拟路由系统</h1><p>微前端是将多个不同的 web 应用融合在一起渲染，但浏览器只有一个路由系统，这很容易造成应用之间的路由冲突，最常见的就是 vue3 的路由冲突问题。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37Qp37TNOrIGW27NnjK.png" alt="" referrerpolicy="no-referrer"></p><p>上面是 vue-router 作者对于在微前端环境下的冲突问题的回答，他认为 vue-router 已经覆盖足够多场景，微前端的问题应该由微前端解决。</p><p>在我们刚开源时，并没有对路由进行隔离，用户对于 MicroApp 的问题几乎一半都和路由相关，因为一个路由系统同时满足多个应用的渲染容易导致冲突，也非常反直觉和难以理解，于是我们推出了虚拟路由系统。</p><p>概念图：</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37PtwhNaywYgWETFS.png" alt="" referrerpolicy="no-referrer"></p><p>虚拟路由系统与浏览器的路由行为一致，它通过自定义 location 和 history 等核心路由 API，重写了 popState 和 hashChange 事件，拦截路由导航和事件，并提供了一系列自定义 API，模拟了在浏览器环境下的 Web 应用程序的渲染、跳转和返回等路由行为。子应用程序在这个虚拟路由系统中运行，与基座应用程序的路由相互隔离，从而避免相互影响，并增强了子应用程序与基座应用程序之间的交互能力。通过虚拟路由系统，基座应用程序可以方便地获取子应用程序的路由信息并控制子应用程序的跳转，子应用程序的路由信息会作为参数同步到浏览器地址上。此外，虚拟路由系统还提供了许多功能，帮助开发人员提高工作效率。</p><h1>样式隔离方案升级</h1><p>MicroApp 最初是基于 style 元素的 CSSStyleSheet 实现的样式隔离：即将 CSS 字符串插入 style 元素生成 CSSStyleSheet，遍历每个 CSS 规则，添加前缀实现样式隔离。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-11-17-29FthmdZweFFtcyXt.png" alt="" referrerpolicy="no-referrer"></p><p>这种一种取巧的方式，利用浏览器自身的能力格式化 CSS，并在此基础上进行修改，省去很多工作量。但问题也出现在这里，不同浏览器对于相同的 CSS 生成的 CSSStyleSheet 可能会不同，这就导致我们在处理 CSSStyleSheet 会遇到不可以预知的问题，导致 CSS 表现不一致。</p><p>于是 MicroApp 换了一种方式来实现样式隔离，我们使用正则将 CSS 字符串切割成最小单元，每个单元包含一段 CSS 信息，将所有的信息整理生成 CSSTree，遍历 CSSTree 的每个规则，添加前缀实现样式隔离。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-10-11-18-300F8YVeL6CeZjdLr.png" alt="" referrerpolicy="no-referrer"></p><p>新的方案不但抹平了不同平台间的差异，在性能上相较于旧版普遍提升 30% 以上，并且拥有更加灵活的配置：</p><pre><code>/* 对指定的选择器禁用样式隔离 *
/*! scopecss-disable .test1, .test2 */
.test1 {
  color: red;
}
.test2 {
  color: yellow;
}
.test3 {
  /* 在某一行中禁用样式隔离 */
  /*! scopecss-disable-next-line */
  background: url(/test.png);
}
</code></pre><h1>vite 的兼容</h1><p>在之前的版本中，MicroApp 也支持 vite 的接入，但必须关闭沙箱，因为 vite 打包出来的是 esm 类型的 js 文件，而 esm 无法运行在 with 环境中，但这样容易导致基座和子应用之间的冲突，显然是需要进一步优化的。</p><p>为此我们为 vite（更准确的说是为 esm 类型的项目）开发了一套 iframe 沙箱方案，将 esm 类型的 js 文件放入 iframe 中运行，并通过重写子应用底层原型链的方式，实现对 js 和元素的拦截和处理。</p><p>iframe 沙箱和 with 沙箱的实现方式不同，功能也略有不同，with 沙箱拥有更加灵活的操作，而 iframe 沙箱拥有更加严格的隔离环境，两者各有优劣。用户可以在两种沙箱之间灵活切换，以满足更多特殊场景的覆盖和兼容。</p><h1>Micro-App-DevTools</h1><p>Micro-App-DevTools 是基于 MicroApp 推出的一款 Chrome 浏览器插件，目的是为了在开发和使用 MicroApp 过程中提高效率。通过此插件可以有效的解决调试困难、模拟数据通信、查看视窗范围、设置路由、获取环境变量等诉求，进而更好地帮助用户去了解和使用 MicroApp。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37rml6376o0OR6YYL11.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-377XIbxyxtutrT6TB.png" alt="" referrerpolicy="no-referrer"></p><h4>方案详解</h4><p>Micro-App-DevTools 通过模拟子应用开发环境，获取父应用数据，来可视化查看通讯数据，提高开发调试效率。对于路由，将会显示所有应用的路由，包含层层嵌套应用以及一个父应用多个子应用的路由，使不同团队应用也能快速定位自己问题，方便协作。还提供了全局变量和高亮视窗功能，实现快速定位范围，提高排查效率的功能，并集结了图标、右键、控制枱的快捷进入方式，使用户快速上手，零成本使用。</p><p><img src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-27-11-37BJKlXGFQbhuSLQV.png" alt="" referrerpolicy="no-referrer"></p><h2>总结</h2><p>MicroApp 1.0 已经发布，我们将积极回应开发者的问题和反馈，并持续改进，以帮助更多开发者提高效率和改善开发体验。欢迎大家使用 MicroApp 并参与共建，也希望在 GitHub 上给我们点个 Star 来支持我们~</p><p>MicroApp Github 地址：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicro-zoe%2Fmicro-app" target="_blank">https://github.com/micro-zoe/micro-app</a></p><p>Micro-App-DevTools Github 地址：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicro-zoe%2Fmicro-app-chrome-plugin" target="_blank">https://github.com/micro-zoe/micro-app-chrome-plugin</a></p><p>MicroApp 官网地址：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmicro-zoe.github.io%2Fmicro-app%2F" target="_blank">https://micro-zoe.github.io/micro-app</a></p><blockquote><p>作者：京东零售，马国华</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 14 Oct 2023 10:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10117983</guid>
            <link>https://my.oschina.net/u/4090830/blog/10117983</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
