<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 27 Dec 2023 10:49:26 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[周鸿祎：鸿蒙原生必将成功]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>360 集团创始人、董事长周鸿祎今日在微博宣布，360 浏览器等应用完成了鸿蒙原生核心版本的开发。并表示，未来还会把全线产品转移到鸿蒙生态里。</p><blockquote><p><span style="color:#333333">我在直播里很多次旗帜鲜明地表态，任何情况下都会支持华为，不能只停留在口号。今天我们正式宣布 360 浏览器等应用完成了鸿蒙原生核心版本的开发，未来我们还会把全线产品转移到鸿蒙生态里。我相信鸿蒙会成为中国最大的操作系统，鸿蒙原生必将成功。</span></p></blockquote><p><img height="391" src="https://oscimg.oschina.net/oscnet/up-f5c3b4b96af20fc9564ad022c5e8336ee24.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 09:15:08 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272979</guid>
            <link>https://www.oschina.net/news/272979</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RISC-V 新成果！openKylin 社区完成对 RV64G 架构支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">openKylin 社区继与深度数智联合发布默认搭载 openKylin 1.0 操作系统的全球首款 RISC-V 笔记本电脑 DC-ROMA 后，近日，联合苏州睿芯公司，</span><strong><span style="color:#000000">openKylin 平台正式部署上线对 RV64G 架构支持</span></strong><span style="color:#000000">，后续 RV64G 非压缩指令集爱好者可以通过社区平台开发编译并部署自己的代码。</span></span></p><div><p style="text-align:center"><img alt="" height="410" src="https://oscimg.oschina.net/oscnet/up-d435b9748188f6ead24dab10652e7b259f4.png" width="940" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RISC-V 是一个自由的指令集，硬件厂商可以基于国际基金会认可的标准，自主扩展，目前市场上很多厂商是基于 RV64GC 来生产产品，但是也有厂商基于 RV64G 来生产产品，为配合国内厂商的市场需求，openKylin 社区率先推出对 RV64G 架构支持。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">一、RV64G 架构简介</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">相比较于目前在嵌入式小型设备上应用更广泛的 RV64GC（即大家比较熟悉的 riscv64）, RV64G 更加聚焦于通用计算场景功能，服务器或者桌面系统。其中：</span></span></p><ul><li><span><span style="color:#000000">「RV」代表 RISC-V；</span></span></li></ul><ul><li><span><span style="color:#000000">「64」代表所支持的指令是 64 位的（实际上，交叉编译器在生成代码时可能会采用 32 位指令减小生成的目标代码长度），地址长度和寄存器长度都为 64 位；</span></span></li><li><span><span style="color:#000000">「G」代表通用（General）计算平台。实际上，「G」等效于「IMAFD」，其中「I」代表整数（Integer）计算指令、整数 load、整数 store 以及控制流（如分支跳转）指令，这些指令在任何 RISC-V 的实现中都是必须的；「M」代表乘法（Multiply），即平台支持乘法和除法运算；「A」代表原子（Atomic）扩展，支持对寄存器进行的原子读、修改和原子写操作，这些操作在多核设计中非常有用；「F」代表单精度浮点（Float）运算支持，「D」代表双精度浮点（Double）运算支持。</span></span></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">RV64G 和 RV64GC 之间的主要区别在于是否包含压缩指令集（C 指令集）。RV64GC 在 RV64G 的基础上增加了 C 指令集，这些指令用于缩小指令长度，降低代码占用空间，RV64G 则不包含这些压缩指令，因此 RV64G 的应用程序可以在 RV64GC 的硬件上运行，反之则不行。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">比较而言，RV64GC 比 RV64G 具有更高的代码密度，程序具有更小的 footprint，可以更有效地利用内存空间，这些特点让 RV64GC 指令在嵌入式应用中更有优势；另一方面，RV64G 的硬件实现可能比 RV64GC 更简单，可采用简化指令译码逻辑，更容易预测指令预取模式，减少内存访问次数、提高指令执行速度，降低功耗，设计人员可以更好的对高性能计算进行优化。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">二、开发过程</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">1.基础工具链改造编译验证。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">第一阶段，对基础编译工具进行适配，包括 gcc，glibc，binutils 源码包的修改编译，技术攻关，以适配 RV64G 新架构。运行新编译的 gcc 版本，检查相关输出参数，确认为-- -with-arch=rv64imafd 表示修改成功。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">2.stage0/ bootstroop 阶段相关包的编译。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">基于第一阶段完成的基础编译工具链，开始 bootstroo 阶段相关包的编译工作。包括 apt，dpkg，llvm，python3，perl，cmake，make，openmpi，netplan.io，openssl，meson 等软件包的编译工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">3.初期上层应用包编译工作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">完成前两步中的软件包编译工作后，需要进一步扩展软件包的数量。在本地编译环境下通过脚本逐层编译更多上层应用包。同时验证使用 RV64GC 相关依赖包与现有 RV64G 包混合编译没有问题。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">4.Choort 平台编译环境调试制作。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">使用目前已重新编译的 RV64G 架构新软件包，来构建 OKBS 平台的 chroot 基础环境，调试过程碰到架构符号相关的较多问题，需要多次重构测试，过程中不断尝试修改 chroot 的系统文件。直到可以正常编译出 rv64g.deb 格式的二进制文件。制作完成的 chroot 地址为：</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><span style="color:#0052ff">http://api.build.openkylin.top/devel/openkylin/yangtze/rv64g</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">5.平台架构新增部署，与编译机搭建。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">为了与现有 RV64GC 架构做区分，在 OKBS 系统上增加 RV64G 架构相关配置数据。利用之前基于新架构编译完成的软件包，新增创建 source.list 源，作为编译环境的依赖源。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">6.初期编译环境调试。</span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">上线初期，解决新架构 chroot 与 OKBS 系统融合，编译依赖源 RV64G 架构修改等问题。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#6ec1f5">三、RV64G 架构支持优势</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">1.</span><strong><span style="color:#000000">支持 RV64G 架构的代码同源编译</span></strong><span style="color:#000000">，即</span><strong><span style="color:#000000">代码一次提交</span></strong><span style="color:#000000">。可在 OKBS 平台同源编译出 AMD64、I386、ARM64、RV64GC、RV64G 五个架构的二进制包，无需再单独维护一套 RV64G 软件源及代码仓库，提升 RV64G 架构代码开发维护效率。</span></span></p><div><p style="text-align:center"><img height="343" src="https://oscimg.oschina.net/oscnet/up-e3b0d0deee341c3cf2c9b95667d25b56b29.png" width="921" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">2.</span><strong><span style="color:#000000">支持 RV64G 架构软件仓库的同源发布</span></strong><span style="color:#000000">，有效提升 RV64G 架构软件仓库的管理和维护升级效率。</span></span></p><div><p style="text-align:center"><img alt="" height="521" src="https://oscimg.oschina.net/oscnet/up-c9f3cf8283f562f55599cdc9ece977b4ecb.png" width="1358" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="224" src="https://oscimg.oschina.net/oscnet/up-989b966311f60b0bceab547c82705c8fde3.png" width="640" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">3.</span><strong><span style="color:#000000">镜像制作与版本发布统一规范化</span></strong><span style="color:#000000">。在镜像制作与版本发布管理上可与其他架构以同流程处理，统一 RV64G 架构版本构建规范。</span></span></p><div><p style="text-align:center"><img alt="" height="418" src="https://oscimg.oschina.net/oscnet/up-ff54131837683f63c926c6bcabafa8a63cd.png" width="652" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">4.</span><strong><span style="color:#000000">解决与 RV64GC 架构名称冲突的问题</span></strong><span style="color:#000000">，至此可以兼容 RISCV-V 规范的两种指令集架构的编译工作。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">5.</span><strong><span style="color:#000000">编译机可同时支持 RV64GC 和 RV64G 两种架构</span></strong><span style="color:#000000">，有效提升编译机资源利用率。</span></span></p><div><p style="text-align:center"><img height="484" src="https://oscimg.oschina.net/oscnet/up-78f5b565841630b75a362cc5f5ff57d9363.png" width="909" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><div><p style="text-align:center"><img alt="" height="408" src="https://oscimg.oschina.net/oscnet/up-28aee798583cba92a8d59b14df44d4e814c.png" width="360" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px">&nbsp;</p></div><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">后续苏州睿芯公司将继续携手 openKylin 社区，成立 RV64G SIG 组，加大资源投入，解决软件包编译过程中遇到的问题，并完成该架构镜像制作、硬件适配、软件源管理和生态需求软件自主构建等，进一步集成基于 RV64G 架构的桌面与服务器整机系统。欢迎感兴趣的小伙伴加入我们，携手共创！</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272960</guid>
            <link>https://www.oschina.net/news/272960</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[一个公司到底需要几个 DBA]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>前段时间某家公司透露自家有 1000 人的 DBA 团队，一时成为了数据库圈内讨论的焦点。昨天又读到「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0NDIxNDg5Mg%3D%3D%26mid%3D2247486204%26idx%3D1%26sn%3D179fbefbee62f538f07dfcbc81fe9585%26scene%3D21%23wechat_redirect" target="_blank">DBA 团队的规模应该是什么样的配置</a>」。正好到年底了，不少公司也要做新年的预算，其中就包括 HC 的规划。所以也分享一点想法。</p><p>先明确这里讲的 DBA 指的是专职负责数据库管理的人员，不算还身兼其他职责的人员，也不包括数据库内核开发人员。</p><p>首先 1000 人的 DBA 团队肯定是言过其实的，这也是当初新闻公布后，引起大家讨论的原因。在我们所居住的蓝色星球上，应该还不存在 1000 人规模的 DBA 天团。那么正常一个公司该养几个 DBA 比较合适呢？下面就按照公司的发展阶段进行阐述。</p><h2>&lt; 30 人 - 不需要 DBA</h2><p>公司研发人数在 30 人以下规模时是不需要 DBA 的，通常这个阶段的职责由团队里的后端工程师，DevOps / 平台工程师或者技术负责人来兼职。这个阶段建议无脑选择云数据库托管服务，因为自带开箱即用的运维，监控，备份。至于数据库的日常变更，可以引入工具，也可以选择不引入。如果不引入的话，由技术负责人通过设计评审，代码审核等方式也能应付。</p><h2>30 人 ～ 50 人 - 第一个 DBA 和工具</h2><p>数据库相关工作的并发加大，兼职已经很难应付。同时因为业务开始有起色，所以需要为更长期的数据治理做铺垫。所以这个阶段公司就需要考虑引入专门的 DBA 来负责数据库相关事宜，随着引入第一个 DBA，也要同时考虑引入相关的数据库工具，其中最核心的就是涉及研发流程的数据库变更审核工具。至于究竟在哪个节点引入，一个是看之前兼职同学处理 DBA 事务的占比，50% 是一个零界点。另一个是看整个技术团队高优先级工作项里， 是否超过 50% 都是数据库相关。当然还有一个指标，就是故障数，如果已经连续两个月发生过影响业务的数据库故障，那引入 DBA 就是迫在眉睫了。</p><p>再说一下引入的第一个 DBA 的定位。通常在这个阶段，公司还很难吸引到比较优秀的 DBA，也没有必要。第一个 DBA 不需要构建体系，只要建立起机制。机制分两部分，一部分是数据库运维的常态化，比如优化监控，巡检以及备份。另一部分则是规范数据库访问和变更上线的流程。这两件事情都需要依托工具来落地。前者通常是围绕云平台提供的能力，通过配置或者少量的二开来实现；后者则基本完全依赖于引入工具，业内比较流行的 Archery, Yearning 便是出自 DBA 之手，解决这块的问题。Bytebase 同样也是由兼具研发和 DBA 背景的团队打造的开源产品。</p><p>这个阶段，也需要研发负责人在一旁做策应。因为引入 DBA 和工具，会限制研发的自由度，而 DBA 和研发的诉求点并不一致，DBA 又是新加入的成员。这个时候需要研发负责人从中斡旋，避免双方抵触，产生部门墙。说到底，在这个阶段，仍然是业务绝对优先，所以如果研发以业务优先为理由不愿意配合，DBA 建立的流程工具都能被绕过。</p><p>另一方面研发负责人也要着力培养 DBA 去熟悉业务，帮助他能跟随公司成长到下一阶段。</p><h2>100 人 - 第二个 DBA</h2><p>通常在研发规模达到百人左右时，就必须引入第二个 DBA。这里最重要的是能有一个互备。至于引入的 DBA 定位，如果第一个 DBA 成长起来的话，那第二个 DBA 可以是相对初级的，老人带新人。但如果第一个 DBA 没有跟上公司的成长，那么这时就需要引入一个相对资深的 DBA。这个阶段要开始构建体系，首先要审视当前使用的数据库种类，之前业务发展，可能对于数据库选型并没有做约束，现在就到了决策数据库选型的时候，尽可能统一。另外也要审视使用的数据库工具链，是否需要进行替换。关健就是这两件事情，选对数据库，选对工具。这也是为什么需要一个更资深的 DBA，所谓观千剑而识器。如果是一个相对经验不足的 DBA，在强势的业务研发面前，很难据理力争。这个阶段之后，无论是要换数据库还是相关工具，那都是浩大的工程，绝对比找一个有经验的 DBA 代价要大。</p><p>研发负责人在这个阶段算是基本退出了数据库日常工作，交由这组 DBA 二人转了。</p><h2>&gt; 200 人 - DBA 团队</h2><p>极限操作的话，公司也可以维持 2 个 DBA 的配置很长时间。国内上市公司，千人研发团队，2 个 DBA 配置也不是个例。但 DBA 人数还是和风险挂钩的，这里还是建议按照人员配比，尽量 DBA : 研发的配比不要低于 1:200。业务上了规模后，一个 DBA 但凡一年能帮助公司规避掉一次故障，就能收回人力成本。</p><p>另一方面，到这个阶段势必会出现一系列定制化需求，标准工具往往无法全部满足，所以这个时候也需要 DBA 亲自下场做深度二开。</p><p>不过在公司研发达到 500 人规模前，也要谨慎控制 DBA 团队的扩张。DBA 团队扩充到 5 人后，通常都会走上自研工具链的道路，否则无法支撑团队规模。但这个阶段选择自研道路，往往不会对业务带来增量。因为自研虽然在某些功能点更贴近业务，但从整体的产品体验来说，肯定是远远不如市面上成熟的标品，此消彼长。</p><p>那该如何给 DBA 团队尤其是 DBA 团队负责人提供成长空间呢。这里有两条路径，一是培养 DBA 负责人去超越 DBA 的职能，往职责更大的存储负责人/基础设施负责人方向走；另一条路，是鼓励 DBA 负责人走出公司，在行业内建立起影响力。</p><p>总之就是避免让 DBA 团队自己往前走的太快。虽然数据库在整个研发链路里是一块基石，但它不是枢纽。自研数据库工具链的时机，是要配合公司整体研发平台的自研规划，而且通常是在整体研发平台自研规划基本确立后，再进行数据库相关的规划。</p><h2>&gt; 1000 人 - 中央和地方</h2><p>能走到这步，公司往往已经形成了 BU 编制，这就会牵扯到是否每个 BU 会自建 DBA 团队。这通常就不再是技术问题，而是组织问题了。一个强势的业务 BU 通常都会希望可以有独立的建制，但是往往自己运行一段时间后，又发现招不到/留不住人，然后即使名义上还是独立，实际还是回退到中央集权。国内几家大厂有中央集权的，也有地方自治的。到了这个阶段兵无常势，水无常形。</p><h2>如何评估 DBA 团队的绩效</h2><p>两句话：</p><ul><li>专业的人做专业的事</li><li>善战者无赫赫之功</li></ul><p>地铁在既定的轨道上运行，依然也还是要配备 2 名驾驶员。事前预防，事中止血，事后补救，目前围绕数据库的日常工作，无论是云平台还是第三方工具，还只能承担 co-pilot 的角色，最终还需要 DBA 拍板。希望每个研发都具备数据库常识的理想很丰满，但现实很骨感。面试时虽然都考察了 MVCC 原理的八股文，但真的上了前线，往往连最基本的执行计划也看不懂。</p><h2>总结</h2><p><img src="https://oscimg.oschina.net/oscnet/up-f36de6034e654d8a673cf05664d8e135703.png" alt="file" referrerpolicy="no-referrer"></p><p>新的一年也希望 DBA 们稳如泰山，数据库都平平安安。</p><p><img src="https://oscimg.oschina.net/oscnet/up-07e2c0e2378dffdef4b198c2c7ec24344e0.png" alt="file" referrerpolicy="no-referrer"></p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10433139</guid>
            <link>https://my.oschina.net/u/6148470/blog/10433139</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[三星成功验证 CXL 内存与 Red Hat Linux 的互操作性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">三星电子发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.samsung.com%2Fglobal%2Fsamsung-electronics-and-red-hat-partnership-to-lead-expansion-of-cxl-memory-ecosystem-with-key-milestone" target="_blank">公告称</a>，已与 Red Hat 合作，在真实用户环境中成功验证了 CXL (Compute Express Link) 内存操作；此举系业内首次，将进一步扩大其 CXL 生态系统。</span></p><p><span style="color:#000000">该公司表示，他们针对 Red Hat Enterprise Linux 9.3 发行版优化了 CXL 内存，并在 Red Hat 的 KVM 和 Podman 环境中验证了内存识别、读取和写入操作。由此，数据中心客户将无需对现有硬件进行额外调整，即可使用三星 CXL 内存。</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">红帽公司高级副总裁兼亚太区负责人 Marjet Andriesse 称，「三星 CXL 内存扩展器与红帽企业级 Linux 互操作性的成功验证具有重要意义，因为它拓展了 CXL 内存扩展器在基于 IaaS 和 PaaS 的红帽软件中的适用性。这是硬件和软件集成的重要里程碑，为下一代内存开发构建了一个开源生态系统。」</span></p><p style="color:#424242; margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><img alt="" height="317" src="https://oscimg.oschina.net/oscnet/up-902ea73f4e148bd1626fdd7de2c37b4b0dd.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，双方正在合作制定《RHEL 9.3 CXL 内存启用指南》，帮助用户在 RHEL 9.3 上利用三星的 CXL 内存，并在各种用户环境中构建高性能计算系统。</span></p><p><span style="color:#000000">两家公司于 2022 年 5 月首次签署了一份谅解备忘录（MOU），开始在 CXL 上进行合作。合作关系涵盖一系列存储和内存产品，包括 NVMe SSD、CXL 内存、计算内存/存储和结构。</span></p><p><span style="color:#000000">三星执行副总裁兼内存产品规划主管 Yongcheol Bae 在接受 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zdnet.com%2Farticle%2Fsamsung-verifies-cxl-memory-with-red-hat%2F" target="_blank">ZDNet</a> 采访时表示：通过最新的验证，三星将成为业内第一家提供支持 CXL 2.0 的 CXL 模块、开源软件和 CXL DRAM 的公司。双方还将致力于灵活的数据放置和汽车以及其他项目，以实现为 CXL 内存打造强大生态系统的最终目标。</span></p><p><span style="color:#000000">CXL 是一个统一的接口标准，于 2019 年推出，通过 PCIe 接口以比以前更低的延迟和更高的带宽连接各种处理器和内存设备。这样，现有的数据中心就能以低成本提高速度、延迟和可扩展性。</span></p><p><span style="color:#000000">市场研究公司 Yole Group 数据指出，CXL 市场目前估值约为 1400 万美元；且得益于 2024 年底 CXL 2.0 的推出，预计到 2028 年还将增长至 160 亿美元。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</guid>
            <link>https://www.oschina.net/news/272935/samsung-verifies-cxl-memory-with-red-hat</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ClkLog —— 免费、可商用的轻量级完全开源的埋点用户分析系统]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-项目简介" class="anchor" href="https://gitee.com/clklog/clklog#%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B"></a>项目简介</h1><p>ClkLog 是一款记录用户行为分析和画像的免费可商用开源软件，技术人员可快速搭建私有的应用系统。项目基于神策分析 SDK，采用 ClickHouse 数据库对采集数据进行存储，采用前后端分离的方式来实现的访问统计和用户画像分析系统。在这里，你可以轻松看到用户访问网页、APP、小程序或业务系统的行为轨迹，同时也可以从时间、地域、渠道、用户访客类型等多维度了解用户的全方位信息。</p><h1><a id="user-content-核心功能" class="anchor" href="https://gitee.com/clklog/clklog#%E6%A0%B8%E5%BF%83%E5%8A%9F%E8%83%BD"></a>核心功能</h1><ul><li><p><strong>数据采集</strong>：支持网页、小程序、IOS、Android 等多端数据采集</p></li><li><p><strong>流量概览</strong>：提供流量渠道、设备、地域、访客类型多维度分析</p></li><li><p><strong>用户画像</strong>：解析用户唯一 ID，定位追踪用户全生命周期画像</p></li><li><p><strong>数据下载</strong>：支持各项汇总数据、明细数据的下载</p></li></ul><h1><a id="user-content-技术栈选择" class="anchor" href="https://gitee.com/clklog/clklog#%E6%8A%80%E6%9C%AF%E6%A0%88%E9%80%89%E6%8B%A9"></a>技术栈选择</h1><ul><li><p><strong>后端</strong>：Redis 、Zookeeper、Kafka 、Flink</p></li><li><p><strong>前端</strong>：vue、vue-element-admin、element-ui 、echarts</p></li><li><p><strong>数据</strong>：Clickhouse</p></li></ul><h1><a id="user-content-示意图" class="anchor" href="https://gitee.com/clklog/clklog#%E7%A4%BA%E6%84%8F%E5%9B%BE"></a>示意图</h1><table><thead><tr><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/1.png" alt="" referrerpolicy="no-referrer"></th><th><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/2.png" alt="" referrerpolicy="no-referrer"></th></tr></thead><tbody><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/3.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/4.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/5.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/6.png" alt="" referrerpolicy="no-referrer"></td></tr><tr><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/7.png" alt="" referrerpolicy="no-referrer"></td><td><img src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/8.png" alt="" referrerpolicy="no-referrer"></td></tr></tbody></table><h1><a id="user-content-在线体验" class="anchor" href="https://gitee.com/clklog/clklog#%E5%9C%A8%E7%BA%BF%E4%BD%93%E9%AA%8C"></a>在线体验</h1><p>演示地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com" target="_blank"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdemo.clklog.com">https://demo.clklog.com</a></p><h1><a id="user-content-快速接入" class="anchor" href="https://gitee.com/clklog/clklog#%E5%BF%AB%E9%80%9F%E6%8E%A5%E5%85%A5"></a>快速接入</h1><p>官方文档：<a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fclklog.com">https://clklog.com</a></p><h1><a id="user-content-协议许可" class="anchor" href="https://gitee.com/clklog/clklog#%E5%8D%8F%E8%AE%AE%E8%AE%B8%E5%8F%AF"></a>协议许可</h1><ul><li><p>开源协议：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.gnu.org%2Flicenses%2Fagpl-3.0.en.html">AGPL V3.0</a></p></li><li><p>免费使用：Clklog 遵循 AGPL V3.0 开源许可证, 使用的组织或个人在复制、分发、转发或修改时请遵守相关条款，不得移除 ClkLog 相关版权标识进行。如有违反，ClkLog 将保留对侵权者追究责任的权利。</p></li><li><p>商业使用：请联系客服进行细节咨询</p></li></ul><h1><a id="user-content-联系我们" class="anchor" href="https://gitee.com/clklog/clklog#%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>联系我们</h1><ul><li><p>客服邮箱：<a href="mailto:info@clklog.com">info@clklog.com</a></p></li><li><p>客服手机：16621363853</p></li><li><p>客服微信：opensoft66</p></li><li><p>客服二维码：<img title="" src="https://gitee.com/clklog/clklog/raw/main/docs/assets/imgs/contactqrcode.jpg" alt="" width="120" referrerpolicy="no-referrer"></p></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 06:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/clklog/clklog</guid>
            <link>https://gitee.com/clklog/clklog</link>
        </item>
        <item>
            <title>
                <![CDATA[华为云多个开源项目通过信通院可信认证]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>2023</span></span></span><span><span><span>年 12 月 21 日，由中国信息通信研究院主办的《2024 中国信通院 ICT 深度观察报告会》开源和软件供应链分论坛上重磅发布了可信开源评估结果。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云共计 3 个开源社区、5 个开源项目通过可信开源社区、可信开源项目认证，其中，三个开源社区：KubeEdge、Karmada、Volcano 在社区运营、社区治理与社区开发能力方面均获得了先进级评级。</span></span></span></span></span></span></p><p style="margin-left:0.0001pt; margin-right:0px; text-align:center"><img height="2594" src="https://oscimg.oschina.net/oscnet/up-8c3992cba052f6407c45af867bb5b58ff96.jpg" width="3892" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:center">&nbsp;</p><span id="OSC_h2_1"></span><h2><span><span><span><strong><span><span><span>3</span></span></span></strong><strong><span><span><span>大开源社区通过可信开源社区 4 大专项测评，获先进级评级</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云 3 大开源社区（KubeEdge、Volcano、Karmada）顺利通过信通院可信开源社区成熟度能力检验，并在社区运营、社区治理与社区开发能力方面获得先进级社区评级，该认证为中国信通院可信开源治理能力成熟度认证的最高等级。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="790" src="https://oscimg.oschina.net/oscnet/up-42e95f4a1bd080702470d5d9ffe006ece7f.jpg" width="563" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信开源社区评估从基础设施、社区治理、社区运营与社区开发等角度，梳理开源社区应关注的内容及指标，聚焦于如何构建活跃的开发者生态与可信的开源社区。先进级评级是可信开源社区评估的最高级别，相较于基础级和增强级而言，先进级要求社区能够针对开源社区进行更加专业化和自动化等管理。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>先进级认证不仅是对华为云 3 大开源社区在开源软件的开发流程、产生的技术贡献、贡献者管理、社区氛围营造等维度结果的认可，更是对开源社区工作的肯定，未来这些社区将会持续加大技术研发投入，与社区用户、合作伙伴共建开源生态，持续创新。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="1864" src="https://oscimg.oschina.net/oscnet/up-f9465e80d1c92d3bb6719470eea23494dbf.jpg" width="4096" referrerpolicy="no-referrer"></p><span id="OSC_h2_2"></span><h2><span><span><span><strong><span><span><span>5</span></span></span></strong><strong><span><span><span>个开源项目通过中国信通院可信开源项目测评</span></span></span></strong></span></span></span></h2><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>华为云一键构建分布式云原生平台 Kurator、云原生无代理服务网格 Sermant、时序数据库 openGemini、企业级前端组件库 DevUI、OpenTiny Vue 均已通过中国信通院的可信开源项目认证检测，并获得可信开源项目评估证书。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><img height="829" src="https://oscimg.oschina.net/oscnet/up-f237b87e138d721a6a69683b4b3edcc989f.jpg" width="582" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>可信开源项目重点考察开源项目在许可证合规性、软件安全性、软件活跃度、技术成熟度、服务支持力和软件兼容性六个方面的能力。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>通过可信开源项目认证，意味着以上这些项目通过了业界开源项目认证标准的检验，项目具有高质量、高可靠性、高安全性和高可维护性，这些项目可以为用户提供更好的开源软件使用体验。</span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0"><span><span><span><span><span><span>本次通过可信认证的开源社区与开源项目目前已广泛应用于各行各业，通过不断完善开发者生态，提升产品易用性，为企业或个人提供更多的选择和机会，帮助个人或企业更好的利用开源技术提升业务效率和创新能力。</span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6410005/blog/10332529</guid>
            <link>https://my.oschina.net/u/6410005/blog/10332529</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openGemini 获 1 项大奖，2 项认证，一年一个台阶]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="306" src="https://oscimg.oschina.net/oscnet/up-2305df6d4314acb367af05d3ada47349caa.jpg" width="1021" referrerpolicy="no-referrer"></p><p>最近，openGemini 先后获得开放原子基金会授予的 「2023 快速成长开源项目」 奖项，以及由中国信通院评估颁发的 「可信开源项目」 和 「可信数据库」 两项证书，成为社区最值得庆贺的事，可谓是「寒冬喜来茶当酒，竹炉汤沸火初红」。回头望，旭日东升，社区就像一个朝气蓬勃的小孩，正在一天天长大。这些荣誉的背后，是 openGemini 团队、众多社区开发者不断努力和创新的结果。</p><ul><li><span id="OSC_h3_1"></span><h3><span><strong>2023 年度快速成长开源项目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">开放原子基金会「2023 年度快速成长开源项目」评委会从时间范围内的定量指标数据增长速度和定性指标情况发展速度两个维度考察，综合衡量了开源项目在 2023 年度社区治理（社区管理、开源合规管理、社区运营、基础设施能力、安全治理）和社区活跃度（生态参与度、社区影响力和项目活跃度）方面的表现，决定授予 openGemini 社区「2023 年度快速成长开源项目」，充分肯定了 openGemini 社区在治理与生态方面做出的努力。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-6cfaf4c1a329a2a347fa19b42618269367e.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_2"></span><h3><span><strong>可信开源项目</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信开源项目」 是由中国信通院推动的开源项目评估，对开源项目的健康程度与可持续性展开评测，以降低开源项目的安全风险，完善开源项目的开发者、用户生态。重点考察开源项目在许可证合规性、软件安全性、软件活跃度、技术成熟度、服务支持力和软件兼容性六个方面的能力，全面衡量社区版开源项目的健康程度，为开源项目使用方提供选型的参考依据。openGemini 通过该项认证，充分证明了社区的健康程度和可持续性发展。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="807" src="https://oscimg.oschina.net/oscnet/up-c0917d6ee0589169bff1269025c1be55999.jpg" width="600" referrerpolicy="no-referrer"></p><ul><li><span id="OSC_h3_3"></span><h3><span><strong>可信数据库</strong></span></h3></li></ul><p style="margin-left:0; margin-right:0">「可信数据库」是由中国信通院开展的面向数据库产品及周边工具、数据库服务商和应用侧为评价目标的权威评测体系，重点考察时序数据库基础能力、兼容能力、管理能力、高可用能力、扩展性、兼容性等七个方面能力。openGemini 通过该项认证，再次证明 openGemini 项目是高质量、高安全的，能够满足海量时序数据存储、处理、应用等各类场景数据管理需求。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="803" src="https://oscimg.oschina.net/oscnet/up-659dbe1066941e46180a914be7c208ddc31.jpg" width="600" referrerpolicy="no-referrer"></p><span id="OSC_h3_4"></span><h3><span><strong>再接再厉</strong></span><span><strong><em>✦</em></strong></span></h3><p style="margin-left:0; margin-right:0">作为一个开源项目，openGemini 一直致力于为开发者提供更好的平台和软件，帮助他们了解数据库架构、功能原理和内核开发过程，降低开发门槛，最终具备问题自我定位、自我修复的能力。同时也为最终用户提供更好的工具（目前社区的派生项目已达 20 余个），帮助他们更好的使用 openGemini，降低生产成本，提高产品竞争力。在这个过程中，openGemini 团队不仅注重技术的创新和优化，还积极投入社区建设，与其他开源项目合作，推动整个开源社区的发展。</p><p style="margin-left:0; margin-right:0">在未来，openGemini 社区将继续努力，不断提升自身的技术实力和社区影响力，为用户和开发者提供更好的时序数据库软件。同时，openGemini 也将继续与其他开源项目合作，共同推动整个开源社区的发展，为技术的进步和社会的发展做出贡献。一年一个台阶，明年我们拭目以待！</p><p style="margin-left:0; margin-right:0">今日恰值冬至，祝福大家冬至欢愉，常安常乐。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img height="288" src="https://oscimg.oschina.net/oscnet/up-1ccc6c43a3a6a9ae796c53a6365d4d0d6e5.png" width="200" referrerpolicy="no-referrer"></p><hr><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 官网：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.opengemini.org%2F" target="_blank">http://www.openGemini.org</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 开源地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FopenGemini" target="_blank">https://github.com/openGemini</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">openGemini 公众号：</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify"><img src="https://oscimg.oschina.net/oscnet/up-9c3a28f01ff2ece95893e6eb22755543105.jpg" style="margin-top:20px" referrerpolicy="no-referrer"></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">欢迎关注～ 诚邀你加入 openGemini 社区，共建、共治、共享未来！</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3234792/blog/10331495</guid>
            <link>https://my.oschina.net/u/3234792/blog/10331495</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[你好！Apache Seata]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>北京时间 2023 年 10 月 29 日，分布式事务开源项目 Seata 正式通过 Apache 基金会的投票决议，<strong>以全票通过的优秀表现正式成为 Apache 孵化器项目！</strong></p><p>根据 Apache 基金会邮件列表显示，在包含 13 个约束性投票 (binding votes) 和 6 个无约束性投票 (non-binding votes) 的投票全部持赞同意见，无弃权票和反对票，投票顺利通过。</p><p><em>「Welcome&nbsp;Seata&nbsp;to&nbsp;the&nbsp;ASF&nbsp;incubator.」</em></p><p><img src="https://oscimg.oschina.net/oscnet/up-240076d1009f584bb6fe458f33fe0bedb6f.png" alt="" referrerpolicy="no-referrer"></p><h2>项目历史</h2><ul><li><p>**早在&nbsp;**2007 年****阿里巴巴和蚂蚁集团内部开发了分布式事务中间件，用于解决电商、支付、物流等业务场景中应用数据的一致性问题。内部项目分别被称为 TXC (Taobao Transaction Constructor)/XTS (eXtended Transaction Service)，该项目几乎在每笔订单的交易支付链路几乎都有使用。</p></li><li><p><strong>自 2013 年以来</strong></p><p>阿里巴巴和蚂蚁集团已在阿里云和金融云上向企业客户分别发布了分布式事务云服务产品 GTS(global transaction service)/DTX(Distributed Transaction-eXtended)，在各个行业领域积累了大量用户。</p></li><li><p><strong>2019 年 1 月</strong></p><p>阿里巴巴集团正式开源了该项目，项目命名为 Fescar (Fast &amp; Easy Commit and Rollback)）。项目开源以来，它受到了众多开发人员的热烈欢迎和赞扬，开源一周收获了超 3k star，曾一度蝉联 GitHub Trending 排行榜第一。</p></li><li><p><strong>2019 年 4 月</strong></p><p>蚂蚁集团数据中间件团队加入了 Fescar 社区。为了创建一个更加开放和中立的社区，Fescar 改名为 Seata（Simple Extensible Autonomous Transaction Architecture），代码仓库从 Alibaba organization 迁移到其独立的 Seata organization。</p></li><li><p><strong>2019 年 12 月</strong></p><p>Seata 开源项目正式发布 1.0.0 GA 版本，标志着项目已基本可生产使用。</p></li><li><p><strong>2023 年 10 月</strong></p><p>为了更好的通过社区驱动技术的演进，阿里和蚂蚁集团正式将 Seata 捐赠给 Apache 基金会，提案通过了 Apache 基金会的投票决议。</p></li></ul><h2>项目现状</h2><ul><li>Seata 开源 4 年来主项目在 GitHub&nbsp;<strong>累计收获 star 超 24k，累计发布版本超 40 次，参与代码贡献人数超 300 人。</strong></li><li>Seata 被各领域企业/组织广泛应用于解决分布式事务问题，在 GitHub「Used by」超过 3.1k 的仓库依赖，金融领域企业纷纷试点使用。</li><li>Seata 对于市面上主流的关系数据库，RPC 框架做了广泛的支持，同时被许多第三方社区做了主动和被动集成。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-c486e4329d5fe25e8f7bbd6d4290fdf4740.png" alt="" referrerpolicy="no-referrer"></p><h2>项目特性</h2><ul><li>提供 AT、TCC、Saga 和 XA 事务模式，支持事务模式的混用，满足不同业务场景的数据一致性需求。</li><li>提供 Java、Golang 等多语言 SDK 支持。</li><li>支持了 Apache Dubbo、Spring Cloud Alibaba、gRPC、Motan、sofaRPC、HttpClient 等服务调用框架。</li><li>支持了 MySQL、MariaDB、Oracle、PostgreSQL、OceanBase、TiDB、SQLServer、PolarDB、Dameng 等关系数据库无侵入 AT 事务模式的支持。</li><li>支持基于多种关系数据库、Redis 存储的存算分离的集群模式，支持基于 Raft 的存算不分离集群模式，满足不同运维场景下的集群高可用需求。</li><li>支持了市面上主流的注册中心和配置中心。</li><li>提供了丰富的插件化扩展机制，支持用户自定义 SDK 侧 30 多个扩展点。</li></ul><h2>致谢</h2><p>感谢所有曾经参与到社区的贡献者。</p><p>特别感谢愿意给 Seata 提供指导的 champion 和 mentors。</p><p>Champion：</p><ul><li>Sheng&nbsp;Wu(wusheng&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li></ul><p>Mentors：</p><ul><li>Sheng&nbsp;Wu(wusheng&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li><li>Justin&nbsp;Mclean(justin&nbsp;at&nbsp;classsoftware&nbsp;dot&nbsp;com)</li><li>Huxing&nbsp;Zhang(huxing&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li><li>Heng&nbsp;Du(duhengforever&nbsp;at&nbsp;apache&nbsp;dot&nbsp;org)</li></ul><p>我们坚信将 Seata 引入 ASF 可以推动更强大、更多元化的开源社区的发展。我们将努力践行 Apache Way，同时欢迎更多的公司和个人加入到开发者队伍中来，让 Seata 社区更加健康和健壮的成长，让更多人享受开源带来的技术红利！</p><h2>项目寄语</h2><p>四年前，我们秉持开源开放的理念，在社区写下了第一行代码。回顾过去四年，Seata 开源社区的技术演进和社区运营就像一次创业旅程。这四年我们取得了不菲的成绩，Seata 的出现快速占领了开发者的心智，<strong>成为了分布式事务领域的事实标准，在理论实践中我们牵头推动了行业标准的建立。</strong> Seata 捐赠给 ASF 是我们迈向更多元化社区治理和全球化发展的重要里程碑。</p><p><em>--&nbsp;季敏｜Seata&nbsp;开源社区创始人</em></p><p>阿里云是开源的受益方，也在持续贡献开源，继 Apache RocketMQ、Apache Dubbo 之后，我们将 Seata 也捐赠给了 ASF。相信 Seata 的捐赠，将进一步推动云原生微服务领域的技术发展。一直以来，阿里云通过投入开源，建立技术标准，帮助千万开发者使用更先进的云原生技术，让社区生态和云之间建立起非常好的连接，助力企业和云协同发展。</p><p><em>--&nbsp;丁宇｜阿里云云原生应用平台负责人</em></p><p>分布式事务是微服务架构最复杂，技术水位最深的部分，阿里&amp;蚂蚁在开源捐献之前申请了数十个专利，开源之后在社区推动下高速发展，<strong>吸收 70%+ 外部开发者，大幅降低分布式的复杂度，扩展了分布式事务的生态；</strong> 未来随着微服务高速发展，随着数据一致性要求越来越高，相信分布式事务会发挥越来越大的作用！</p><p><em>-- 李艳林｜阿里云微服务团队负责人</em></p><p>Seata 是一款由阿里巴巴和蚂蚁集团共同参与开发的分布式事务解决方案，广泛应用于两家公司的内部系统。它的突出特点在于高性能和简单易用，为微服务架构下的分布式事务处理提供了高效且可靠的解决方案。我们坚信将 Seata 捐赠给 ASF，社区将会得到更好的发展，能为更多的开发者提供更优质的服务。同时，我们也期待更多的开发者能够加入到 Seata 的开发中来，共同推动分布式事务解决方案的进步和发展。</p><p><em>--&nbsp;谢吉宝｜阿里云云原生中间件负责人</em></p><p>恭喜 Seata 全票通过进入 Apache 孵化器！2019 年，蚂蚁集团和阿里集团携手一起开源了分布式事务框架 Seata，各自贡献了内部分布式事务的最佳实践。经过了四年的发展，Seata 早已成为一个被社区广泛认可的分布式事务项目，大量的贡献者在 Seata 里面贡献代码，丰富了 Seata 的各种功能，很多用户在自己的环境中使用 Seata，给 Seata 带来了大量的实践落地案例。<strong>Seata 进入 Apache 孵化器不是终点，而是新的起点，</strong> 期待 Seata 后面能够持续按照 The Apache Way 的方式运作，以更加中立的姿态，吸引更多的贡献者和用户，走向更加宽阔的未来。</p><p><em>--&nbsp;黄挺｜蚂蚁集团中间件负责人</em></p><p>非常高兴 Seata 这个阿里和蚂蚁合作多年的开源项目进入 Apache 基金会进行孵化，相信 Apache Way 会帮助项目更加社区化、服务更多人，也期待 Apache 的 Seata 能为社区带来更多微小而美好的改变。对于蚂蚁开源来说，Seata 进入 Apache 孵化也是一个重要的里程碑，希望未来有更多蚂蚁团队发起的项目也能走上 Apache 之路。</p><p><em>--&nbsp;王旭｜蚂蚁开源技术委员会副主席</em></p><p>很高兴能够作为 Champion 和 Mentor ，帮助 Seata 社区进入到 Apache 孵化器。Seata 项目在过去的 4 年，在分布式事务领域取得了长足的进度，并以开放的心态面向社区，并一步步的做好走进 Apache 孵化器的各项准备工作。希望在未来的一到两年的实践中，项目成员能够很好的学习以及融入 ASF 的文化中，并进一步增加社区的多元化和国际化。进入孵化器是一个里程碑，更是一个新的开始，祝贺 Seata 项目。</p><p><em>--&nbsp;吴晟｜Apache&nbsp;软件基金会会员、Apache&nbsp;软件基金会首位中国董事、Apache&nbsp;软件基金会孵化器 PMC 成员和项目导师</em></p><p>我关注 Seata 这个项目关注很长时间，从 Fescar 到 Seata，该项目从诞生之初就保持了旺盛的生命力，在近几年社区和逐步壮大，逐步成长为分布式事务这个领域杰出的一个开源项目，很高兴看到 Seata 加入 Apache 基金会进行孵化，相信 Seata 今后会以更加中立的身份，吸引更多的贡献者，一群走一起走可以走的更稳更远。很荣幸以导师的身份陪伴 Seata 的孵化之旅，预祝 Seata 一切顺利！&nbsp;</p><p><em>--&nbsp;张乎兴｜Apache&nbsp;基金会成员、Apache Tomcat&nbsp;和&nbsp;Apache Dubbo&nbsp;社区&nbsp;PMC&nbsp;成员、Apache Seata(incubating)&nbsp;导师</em></p><p>Seata 作为在阿里跟蚂蚁久经验证的分布式事务框架，不仅经历了历年海量流量的验证，而且在开源之后迅速成长为国内分布式事务领域的事实标准。很高兴看到 Seata 成为 Apache 基金会孵化项目，作为一个新的开始，希望 Seata 能够吸引更多的开发者，打磨更多的场景，行稳致远，相信在众多开发者的共同努力下，Seata 一定能够成为数据与应用之间的坚实桥梁。&nbsp;</p><p><em>--&nbsp;杜恒｜ASF member、Apache RocketMQ PMC member</em></p><p>Seata 作为分布式事务协调器，是微服务架构中最重要的独立组件之一，也是整个阿里巴巴微服务领域最精华的部分之一。Seata 项目从开源以来就受到了广泛的开发者支持，而现在它将进入 Apache 基金会孵化，我相信会在 Apache Way 开放的文化帮助下，Seata 项目将继续成为微服务架构中的一颗明星，为我们带来更多便利和创新。</p><p><em>--&nbsp;王小瑞｜AutoMQ&nbsp;联合创始人&nbsp;&amp;&nbsp;CEO、Apache RocketMQ&nbsp;作者、PMC Chair</em></p><p>在分布式、微服务领域，Seata 绝对占得重要的一席，它开创性的创造了多种事务模式。Dubbo &amp; Spring Cloud Alibaba 一直和 Seata 有深度的集成与合作，我本人也与作者季敏、社区核心成员有过多次深入交流，<strong>这是一个有技术追求、有责任心、充满活力的开源社区。</strong> 非常高兴见证 Seata 加入 ASF 大家庭，开启新的旅程，祝一切顺利。</p><p><em>--&nbsp;刘军｜Apache Dubbo PMC Chair、Spring Cloud Alibaba&nbsp;负责人</em></p><p>分布式事务一直是一个被大众敬而远之，视而不见却实际存在的问题,四年前 Seata 将业界对待分布式事务的「鸵鸟心态」转为轻松面对，将一个业界最难攻克的问题，以一种标准化、无侵入、低成本的方式引进，<strong>目前登记在册已有数百家企业，覆盖各式各样的业务场景。</strong> 如果说四年前 Seata 是一粒种在这个领域的种子，那么目前已经枝繁叶茂了，相信捐赠给 ASF 后更加的中立与开放,吸引更多开发者共同建设，共同演进分布式事务领域的未来技术架构，将这颗已经枝繁叶茂的大树做到硕果累累。</p><p><em>--&nbsp;陈健斌｜Apache Seata（incubating）PPMC&nbsp;成员</em></p><p>作为分布式事务领域的重要项目，Seata 自诞生以来，一直致力于解决微服务架构下的数据一致性问题，<strong>帮助开发者构建高性能、易扩展、易使用的分布式应用。</strong> 现在，Seata 即将踏上新的征程。我们相信 Seata 在捐赠给 ASF 这个大家庭后，将会得到更广泛的关注和使用，也相信在未来的日子里，Seata 将会为更多的开发者解决分布式事务的难题。</p><p><em>--&nbsp;王良｜Apache Seata（incubating）PPMC&nbsp;成员</em></p><p>Seata 作为一个强大而稳定的开源分布式事务解决方案，为广大开发者在分布式事务的场景下，提供了极大的帮助和便利。贡献给 Apache 将进一步推动项目发展和全球社区的参与度。祝愿在 Apache 的托管下，能够不断发展，更加中立化，标准化，助力全球更多的开发者构建可靠的分布式事务业务。</p><p><em>--&nbsp;雷志远｜Apache Seata（incubating）PPMC&nbsp;成员</em></p><p>作为一名中间件老兵，有幸见证：微服务浪潮下，源自国内的分布式事务中间件从阿里、蚂蚁内部创新孵化，到商业化，再到开源，一步步走向更广阔的天地，产生更大的价值。相信，捐赠给 ASF 将让 SEATA 成为世界上更多「苦分布式事务久矣」的开发者们的解药！</p><p><em>--&nbsp;申海强｜Apache Seata（incubating）PPMC&nbsp;成员、前阿里分布式事务中间件核心成员</em></p><p>有幸跟随着这个项目从 Fescar 到 Seata 再到现在捐献给 Apache 基金会，见证了在这四年时间里一间又一间的企业因为 Seata 而解决了分布式事务的难题。现在 Seata 站在了全新的起点上将以开放、包容的姿态去面对每一个用户，悉心聆听每一个声音，开拓出这条能够通往全球的道路。</p><p><em>--&nbsp;张嘉伟｜Apache Seata(incubating)&nbsp;PPMC&nbsp;成员</em></p><p>非常高兴看到 Seata 成为 Apache 孵化项目，这定会是分布式事务领域的标杆解决方案。从最初的 Fescar 到 Seata，我与你一路相伴，让我们一起努力，期待 Seata 蜕变成 Apache Seata。</p><p><em>--&nbsp;吴江坷｜Apache Seata（incubating)PPMC&nbsp;成员</em></p><p>在微服务开发模式下，分布式系统的数据一致性常常成为系统的难题。Seata 开源以来，社区积累了各种事务模式解决方案和丰富的用户使用案例。非常高兴 Seata 项目能加入 Apache 基金会，社区将更加开放和多元化，将吸引更多的提交者，帮助更多的用户，项目成为分布式事务的事实标准。</p><p><em>--&nbsp;王欣｜Apache Dubbo&nbsp;社区&nbsp;PMC&nbsp;成员、Apache Seata（incubating）PPMC&nbsp;成员</em></p><h2>写到最后</h2><p>为促进分布式事务技术的普及和实践，增进 Apache Seata（incubating）使用者的交流与学习，我们将定期邀请业内资深的技术专家，分享实战经验。</p><p>欢迎订阅 <a href="https://www.oschina.net/action/GoToLink?url=mailto%3Adev-subscribe%40seata.apache.org" target="_blank">dev-subscribe@seata.apache.org</a> 邮件组，关注 Apache Seata（incubating）社区技术发展。</p><p>Seata 官网：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fseata.io%2Fzh-cn%2F" target="_blank">https://seata.io/zh-cn/</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10419504</guid>
            <link>https://my.oschina.net/u/3874284/blog/10419504</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[dubbo-go v3.2.0 -alpha 版本预览]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><em>作者：王宇轩， Apache Dubbo Committer</em></p><p>随着 Dubbo3 在云原生微服务方向的快速发展，Dubbo 的 go 语言实现迎来了 Dubbo3 版本以来最全面、最大幅度的一次升级，这次升级是全方位的，涉及 API、协议、流量管控、可观测能力等。</p><p>总的来说，新版本的 dubbo-go：</p><ul><li><strong>全面升级 Triple 协议，</strong> 兼容 gRPC、标准 HTTP 客户端，提供简单明了的 API 用于编写 RPC server 与 client，解决组件间的基本通信问题。</li><li><strong>针对微服务场景，提供了完善的服务治理能力，</strong> 这包括配置管理、可观测性、流量管控规则、生态集成与适配等的全面升级。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-1ba6bcbccf62c5e941408b62bab31e2ff20.png" alt="" referrerpolicy="no-referrer"></p><h2>全新升级的 Triple 协议</h2><p>基于 dubbo-go 实现的 Triple 协议，你可以轻松编写浏览器、gRPC 兼容的 RPC 服务，并让这些服务同时运行在 HTTP/1 和 HTTP/2 上。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c2f770e1d49c85a280727a64e462490922a.png" alt="" referrerpolicy="no-referrer"></p><p>如上图所示，你可以使用 "http+json" 的标准形式访问 dubbo-go 发布的后端 triple 服务，基于这一特性， 我们可以在 dubbo 客户端在浏览器页面、移动设备上访问后端服务，使用标准 cURL 工具访问服务，也可以让比如 Spring 体系的应用轻松的调通 Dubbo 服务。</p><p>由于 Triple 协议完全兼容 gRPC 协议，Dubbo 后端服务有可以直接调通标准的 gRPC 服务，它们之间可以无缝的互通，不论是 unary 还是 streaming 通信模式。</p><h3>发布一个 triple rpc 服务</h3><p>为了体验升级后的 triple 协议，我们接下来会尝试启动一个 dubbo-go server，并发布一个基于 triple 协议的服务。</p><p>创建一个新的 server 并启动 server，它将在指定的端口监听 triple 协议请求。</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServerProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50051),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><h3>cURL 访问服务</h3><p>Triple 服务启动完成之后，最简单方式是使用 HTTP/1.1 POST 访问服务，参数则作以标准 JSON 格式作为 HTTP 负载传递。如下是使用 cURL 命令的访问示例：</p><pre><code>curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50051/greet.GreetService/Greet
</code></pre><p>Triple 协议的一项重大升级是支持标准 http 工具直接访问，通过 cURL 可以极大的降低 dubbo-go 服务的测试验证、前端接入成本。</p><h2>简单明了的 API</h2><p>Dubbo Go SDK 支持使用 IDL 或编程语言特有的方式定义服务，并提供一套轻量的 API 来发布或调用这些服务。在上一节的示例中，我们已经看到了部分 dubbo-go API 的使用方式，接下来，让我们更仔细全面的看一下新版本的 API 设计。</p><h3>RPC Server 与 Client</h3><p>对于一些 RPC 通信的场景，开发者只需要使用 dubbo-go 编写一个最简单的 RPC server 或者 RPC client，这在新版本 dubbo-go 中只需要几行代码即可完成。</p><p>通常，我们会使用 Protocol Buffer (IDL) 来定义一个 Dubbo 服务。</p><pre><code>syntax = "proto3";
package greet;

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}
</code></pre><p>使用 Protocol Buffers Compiler 从 IDL 生成 stub 代码（篇幅关系，我们不在此展示，具体请参见官网 dubbo-go 快速开始）。接下来，我们实现 greettriple.GreeterClient 接口并提供自定义服务实现。</p><pre><code>type GreeterServer struct {
}

func (s *GreeterServer) SayHello(ctx context.Context, in *greet.HelloRequest) (*greet.User, error) {
  return &amp;greet.User{Name: "Hello " + in.Name, Id: "12345", Age: 21}, nil
}
</code></pre><p>以下是一个简单的 RPC server 示例，执行协议信息，并注册服务到 server 中：</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServer_Protocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><p>如前面 Triple 协议一节所述，你可以使用 cURL 直接测试以上 server 服务运行正常。与此同时，对应的 RPC client 示例如下：</p><pre><code>func main() {
  // for the most brief RPC case
  cli, err := client.NewClient(
    client.WithURL("tri://127.0.0.1:50052"),
  )
  if err != nil {
    panic(err)
  }
  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  common.TestClient(svc)
}
</code></pre><h3>微服务开发</h3><p>如果你正在开发微服务应用，那么除了 RPC 通信之外，你通常还需要为应用配置一些服务治理能力，比如 retistry 注册中心、配置中心、可观测能力等。</p><p>以下展示了如何使用 dubbo-go 开发一个微服务应用。</p><p>首先，创建一个代表微服务的应用 Server，将服务注册给它，添加注册中心等服务治理配置。</p><pre><code>
func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
    // create a server with registry and protocol set above
  srv, err := ins.NewServer()
  if err != nil {
    panic(err)
  }
    // register a service to server
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
    // start the server
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}
</code></pre><p>其中，Instance 是我们在新版本中引入的全局配置，你可以将所有微服务全局配置在这里进行初始化。这里，我们设置了微服务通信协议 protocol 和注册中心 registry，如以下代码片段所示：</p><pre><code>ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
        registry.WithZookeeper(),
        registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
        protocol.WithTriple(),
        protocol.WithPort(50052),
    ),
)
</code></pre><p>接下来的操作就非常简单明了了，我们创建一个 server，将服务注册给它并启动，如下所示。如果有更多的服务，则可以依次注册到 server 后再启动。</p><pre><code>// create a server with registry and protocol set above
srv, err := ins.NewServer()
// register a service to server
if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
}
// start the server
if err := srv.Serve(); err != nil {
    panic(err)
}
</code></pre><p>以上就是一个微服务应用的基本开发过程，如果你的微服务应用要调用一些远程 Dubbo 服务，那么你只需要参照以下方式创建一个 client 就行了。</p><p>下面的代码示例创建了一个 client，紧接着生成了一个 GreetService 远程服务代理，之后，就可以像调用本地方法一样调用远端 Dubbo 服务了。client 将基于注册中心实现 server 实例的自动发现并自动为流量应用负载均衡策略。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
  )
  
  // configure the params that only client layer cares
  cli, err := ins.NewClient()
  if err != nil {
    panic(err)
  }

  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  resp, err := svc.Greet(context.Background(), &amp;greet.GreetRequest{Name: "triple"})
  if err != nil {
    return err
  }
  logger.Infof("TRIPLE unary call resp: %s", resp.Greeting)
}
</code></pre><h2>企业级服务治理能力</h2><h3>动态配置</h3><p>除了 API 模式之外，Dubbo-go 支持基于配置文件驱动的编码方式，这对于一些更大规模的微服务开发场景非常适用。在这种模式下，我们将 registry、protocol 等组件配置，甚至包括服务声明等都放在 dubbogo.yml 文件中，框架会在启动过程中完成配置文件加载。</p><p>以下是一个基于 dubbogo.yml 的微服务应用的开发示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-428c365aca1834e8772eaabd7bdbe8c423d.png" alt="" referrerpolicy="no-referrer"></p><p>其中，server.go 定义如下：</p><pre><code>func main() {
  greettriple.SetProviderService(&amp;GreeterServiceImpl{})
  if err := dubbo.Load(); err != nil {
    panic(err)
  }
}
</code></pre><p>dubbogo.yml 示例内容如下：</p><pre><code>dubbo:
  application: # 应用信息，服务启动后会将相关信息注册到注册中心，可被客户端从 url 中识别
    name: myApp
  registries:
    nacos:
      protocol: nacos # 注册中心选择 nacos 
      address: 127.0.0.1:8848 # nacos ip
      group: DEFAULT_GROUP # nacos group, 默认 DEFAULT_GROUP
      namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1 # nacos namespaceID, should be created before. 默认 public
      username: abc
      password: abc
  protocols:
    dubbo:
      name: tri
      port: 20000
  provider:
    services:
      UserProviderWithCustomGroupAndVersion: # 接口三元组：接口名、版本号、分组。client 和 server 需要保持一致。
        interface: org.apache.dubbo.UserProvider.Test # 接口名必填
        version: myInterfaceVersion # 默认为空
        group: myInterfaceGroup # 默认为空
</code></pre><p>可以看到相比于之前的 API 编码方式，这里的 server.go 只有两行代码，dubbo.Load() 会完成所有配置的自动组装并启动相关组件，我们只需要在启动应用时指定 export DUBBO_GO_CONFIG_PATH=$ABSOLUTE_PATH/conf/dubbogo.yml 即可。</p><h3>可观测性</h3><p>自 3.2.0 版本开始，dubbo-go 重点升级了内置 metrics 指标采集能力，提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合。</p><p>dubbo-go 内置 metrics 指标导出到 Prometheus + Grafana 体系的能力，以下是 dubbo-go v3.2.0 示例在 Grafana 的监控效果图，具体示例我们将与随后发布在 dubbo-go-samples/metrics。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d75533206a38fc2219b6f61e4a677d4d907.png" alt="" referrerpolicy="no-referrer"></p><h3>流量管控</h3><p>Dubbo 提供了丰富的流量管控策略：</p><ul><li><strong>地址发现与负载均衡，</strong> 地址发现支持服务实例动态上下线，负载均衡确保流量均匀的分布到每个实例上。</li><li><strong>基于路由规则的流量管控，</strong> 路由规则对每次请求进行条件匹配，并将符合条件的请求路由到特定的地址子集。</li></ul><p>服务发现保证调用方看到最新的提供方实例地址，服务发现机制依赖注册中心 (Zookeeper、Nacos、Istio 等) 实现。在消费端，Dubbo 提供了多种负载均衡策略，如随机负载均衡策略、一致性哈希负载、基于权重的轮询、最小活跃度优先、P2C 等。</p><p>Dubbo 的流量管控规则可以基于应用、服务、方法、参数等粒度精准的控制流量走向，根据请求的目标服务、方法以及请求体中的其他附加参数进行匹配，符合匹配条件的流量会进一步的按照特定规则转发到一个地址子集。以下是 dubbo-go 流量管控规则可以实现的一些具体管控场景示例：</p><ul><li>基于权重的比例流量分发</li><li>灰度验证</li><li>金丝雀发布</li><li>按请求参数的路由</li><li>同区域优先</li><li>超时时间调整</li><li>重试</li><li>限流降级</li></ul><p>以下是一个基于 dubbo-go 实现的全链路灰度示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-5db7bb3a33e5312c6b284dee83c2f07e978.png" alt="" referrerpolicy="no-referrer"></p><p>以下是一个基于 dubbo-go 实现的按比例流量转发示例：</p><p><img src="https://oscimg.oschina.net/oscnet/up-feff2328b1b30e38c9f80fedf30ef7d4849.png" alt="" referrerpolicy="no-referrer"></p><p>关于 dubbo-go 流量管控，我们以一个商城系统提供了一个完整的 demo 示例，感兴趣的读者可以参考详细信息：</p><ul><li>流量管控规则详情 <strong>[</strong><strong>1]</strong></li><li>流量管控商场示例解读 <strong>[</strong><strong>2]</strong></li></ul><h3>生态</h3><p>dubbo-go 总体上遵循框架内核+插件的的设计理念，左侧的框架内核定义了 dubbo-go 作为微服务框架的一些核心概念，右侧的插件部分则提供了核心概念扩展实现。</p><p><img src="https://oscimg.oschina.net/oscnet/up-130d4ae7744867b2043dfa8d36fc953563e.png" alt="" referrerpolicy="no-referrer"></p><p>框架内核，可分为 4 个层次，从上到下依次为：</p><ul><li><p><strong>API 层</strong></p><p>dubbo-go 同时支持基于 IDL、interface/struct 的服务契约定义，兼顾跨语言与易用性诉求；支持基于纯 yaml 文件的微服务配置模式；提供了同步、异步、单次 (unary)、流式 (streaming) 等 RPC 通信与编码模型。</p></li><li><p><strong>服务治理层</strong></p><p>dubbo-go 内置了多维度的服务治理能力抽象，确保满足微服务开发与集群治理的核心诉求，这包括地址发现（Service Discovery）、负载均衡（Load Balancing）、可观测指标（Metrics）、流量管控（Traffic Management）、全链路追踪（Tracing）等。</p></li><li><p><strong>RPC 协议层</strong></p><p>dubbo-go 实现的最核心的 RPC 协议是 - triple 协议，triple 可同时工作在 http1/2 之上 (支持 CURL 直接访问)，兼容 gRPC；从设计上，dubbo-go 还提供了多协议发布服务的支持，你可以在一个进程内同时发布 triple、dubbo2、rest、jsonRPC 等多种不同通信协议的服务。</p></li><li><p><strong>传输层</strong>支持 HTTP1/2、TCP 传输层，兼顾性能与通用性，同时支持多种序列化方式。</p></li></ul><p>插件体系极大的丰富了 dubbo-go 功能与生态，社区内置提供了大量的内置扩展实现，同时，开发者可以非常容易的根据需求增加扩展实现。以下是一些典型的插件定义：</p><ul><li><p><strong>Protocol</strong></p><p>dubbo-go 基于 protocol 插件内置提供了 triple、dubbo2、rest 等协议支持，通过扩展 protocol 可以为 dubbo-go 扩展更多协议。</p></li><li><p><strong>Service Discovery</strong></p><p>支持 Nacos、Zookeeper、Polaris 等主流注册中心集成。</p></li><li><p><strong>Traffic Management</strong></p><p>dubbo-go 支持 Dubbo 体系定义的流量规则，可以实现在运行期动态的调整服务行为如超时时间、重试次数、限流参数等，通过控制流量分布可以实现 A/B 测试、金丝雀发布、多版本按比例流量分配、条件匹配路由、黑白名单等。</p></li><li><p><strong>Metrics</strong></p><p>提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合。</p></li><li><p><strong>Logging</strong></p><p>提供通用的日志采集接口定义，内置 Zap、Logrus 支持。</p></li><li><p><strong>Tracing</strong></p><p>提供分布式链路追踪能力，通过此插件扩展可接入 Zipkin、Jaeger、Skywalking 等链路追踪系统。</p></li></ul><h2>总结</h2><p>dubbo-go 3.2.0 的首个 alpha 版本将于 11 月底发布，本文是发版前的抢先预览，感兴趣的读者也可以访问源码尝鲜：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%2Ftree%2Ffeature-triple%2Fprotocol%2Ftriple%2Finternal" target="_blank">https://github.com/apache/dubbo-go/tree/feature-triple/protocol/triple/internal</a></em></p><p>接下来，我们将持续推进 3.2.0 版本迭代并计划与 2 月份发布正式稳定版本，详细 Roadmap 请关注项目仓库：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdubbo-go" target="_blank">https://github.com/apache/dubbo-go</a></em></p><p>社区期待 Go 语言相关开发者的加入，可搜索关注&nbsp;「apachedubbo」&nbsp;微信公众号并回复 「dubbogo」 接受邀请，加入官方社群组织。</p><p><strong>相关链接：</strong></p><p>[1]&nbsp;流量管控规则详情</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fcore-features%2Ftraffic%2F" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/core-features/traffic/</a></em></p><p>[2]&nbsp;流量管控商场示例解读</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Ftasks%2Ftraffic-management%2F" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/tasks/traffic-management/</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 03:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10422864</guid>
            <link>https://my.oschina.net/u/3874284/blog/10422864</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软悄然推出 Copilot Android 版应用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软在一周前悄然<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Ftechosarusrex%2Fstatus%2F1739569672058450165" target="_blank">上线</a>了 Android 版本的 Copilot 应用，目前可从 Google Play 商店进行下载，但 iOS 版本尚未推出。</span></p><p><span style="color:#000000"><img alt="" height="423" src="https://oscimg.oschina.net/oscnet/up-fbbce70c8deda05fed32340399295f80d10.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">Android 版的 Copilot 应用与 ChatGPT 非常相似，可以访问聊天机器人功能，通过 DALL-E 3 生成图像，并可以为电子邮件和文档起草文本。它还能够免费访问 OpenAI 最新的 GPT-4 模型，而如果用户使用 ChatGPT，就必须付费。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 02:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272891/microsoft-copilot-app-for-android</guid>
            <link>https://www.oschina.net/news/272891/microsoft-copilot-app-for-android</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Pororoca —— HTTP 测试工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>Pororoca 是一个</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff; color:#1f2328">支持 HTTP/2 和 HTTP/3 的</span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>&nbsp;HTTP 测试工具，受到 Postman 的启发，但有许多改进。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>适用于 Windows、Mac OSX 和 Linux。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><img alt="" height="300" src="https://static.oschina.net/uploads/space/2023/1128/164543_T3WY_4252687.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p><strong>特性：</strong></p><ul><li>支持<a href="https://http2.github.io/">HTTP/2</a>和<a href="https://developers.cloudflare.com/http3/">HTTP/3</a>。</li><li>集合范围的环境。</li><li>轻松的变量管理。</li><li><span style="background-color:#ffffff; color:#1f2328">Secret&nbsp;</span>变量。</li><li>集合和环境可以一起导出到单个文件中。</li><li>与 Postman 完全导出和导入兼容性。</li><li>内存使用量低得多 - 比 Postman 少两到三倍。</li><li>自动化测试。</li><li>WebSockets。</li><li>启动时间快。</li><li>免费且开源。</li></ul><p><strong>注意：</strong>在 Windows 上，对 HTTP/2 的支持需要 Windows 10 或更高版本。支持 HTTP/3 需要 Linux 或 Windows 11 及更高版本。HTTP/3 仍处于实验阶段。</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 02:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/pororoca</guid>
            <link>https://www.oschina.net/p/pororoca</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 物联网终端操作系统 TencentOS Tiny]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-开放原子开源基金会首批孵化项目" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%BC%80%E6%94%BE%E5%8E%9F%E5%AD%90%E5%BC%80%E6%BA%90%E5%9F%BA%E9%87%91%E4%BC%9A%E9%A6%96%E6%89%B9%E5%AD%B5%E5%8C%96%E9%A1%B9%E7%9B%AE"></a>开放原子开源基金会首批孵化项目</h1><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_log.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fblob%2Fmaster%2FLICENSE"><img src="http://img.shields.io/badge/license-BSD-blue.svg" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FTencent%2FTencentOS-tiny%2Fpulls"><img src="https://img.shields.io/badge/PRs-welcome-blue.svg" alt="PRs Welcome" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/README_en.md">(English Documents Available)</a></p><h1><a id="user-content-一 tencentos-tiny-简介" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%80tencentos-tiny-%E7%AE%80%E4%BB%8B"></a>一、TencentOS Tiny 简介</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Ftos-tiny">TencentOS tiny</a> 是腾讯面向物联网领域开发的实时操作系统，具有低功耗，低资源占用，模块化，安全可靠等特点，可有效提升物联网终端产品开发效率。TencentOS tiny 提供精简的 RTOS 内核，内核组件可裁剪可配置，可快速移植到多种主流 MCU (如 STM32 全系列) 及模组芯片上。而且，基于 RTOS 内核提供了丰富的物联网组件，内部集成主流物联网协议栈（如 CoAP/MQTT/TLS/DTLS/LoRaWAN/NB-IoT 等），可助力物联网终端设备及业务快速接入腾讯云物联网平台。</p><h2><a id="user-content-1tencentos-tiny 整体架构" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1tencentos-tiny%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84"></a>1、TencentOS tiny 整体架构</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/TencentOS_tiny_Architecture.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 主体架构图，从下到上主要包括：</p><p><strong>CPU 库</strong> ：TencentOS tiny 支持的 CPU IP 核架构，当前主要支持 ARM Cortex M0/3/4/7，Cortex A7，RISC-V、MSP430、AVR、STM8 等。</p><p><strong>驱动管理层</strong> ：包括板级支持包（BSP，主要由 MCU 芯片厂家开发与维护）、硬件抽象层（HAL，主要由 TencentOS tiny 提供，方便不同芯片的适配与移植）、设备驱动（Drivers，例如 Wi-Fi、GPRS、LoRa 等模块的驱动程序）。</p><p><strong>内核</strong> ：TencentOS tiny 实时内核包括任务管理、实时调度、时间管理、中断管理、内存管理、异常处理、软件定时器、链表、消息队列、信号量、互斥锁、事件标志等模块。</p><p><strong>IoT 协议栈</strong>：TencentOS tiny 提供 lwip、AT Adapter、SAL 层，支持不同的网络硬件，例如以太网、串口 Wi-Fi、GPRS、NB-IoT、4G 等通信模块。TCP/IP 网络协议栈上提供常用的物联网协议栈，例如 CoAP、MQTT，支撑终端业务快速接入腾讯云。</p><p><strong>安全框架</strong>：TencentOS tiny 为了确保物联网终端数据传输安全以及设备认证安全，提供了完整的安全解决方案。安全框架提供的 DTLS 和 TLS 安全协议，加固了 COAP 及 MQTT 的传输层，可确保物联网终端在对接腾讯云时实现安全认证和数据加密；另外针对低资源的终端硬件，安全框架还提供与腾讯云 IoTHub 配套的密钥认证方案，确保资源受限设备也能在一定程度上实现设备安全认证。</p><p><strong>组件框架</strong>：TencentOS tiny 提供文件系统、KV 存储、自组网、JS 引擎、低功耗框架、设备框架、OTA、调试工具链等一系列组件，供用户根据业务场景选用。</p><p><strong>开放 API（规划开发中）</strong>：TencentOS tiny 将在协议中间件和框架层上提供开放 API 函数，方便用户调用中间件功能，使用户无需过多关心中间件具体实现，快速对接腾讯云，实现终端业务上云的需求，期望最大程度减少终端物联网产品开发周期，节省开发成本。</p><p><strong>示例应用</strong>：TencentOS tiny 提供的示例代码，模块测试代码等，方便用户参考使用。</p><h2><a id="user-content-2tencentos-tiny-优势" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E4%BC%98%E5%8A%BF"></a>2、TencentOS tiny 优势</h2><h3><a id="user-content-1 小体积" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E5%B0%8F%E4%BD%93%E7%A7%AF"></a>(1).小体积</h3><p>最小内核：RAM 0.6KB，ROM 1.8KB
典型 LoraWAN 及传感器应用：RAM 3.3KB，ROM 12KB</p><h3><a id="user-content-2 低功耗" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2%E4%BD%8E%E5%8A%9F%E8%80%97"></a>(2).低功耗</h3><p>休眠最低功耗低至 2uA
支持外设功耗管理框架</p><h3><a id="user-content-3 丰富的-iot-组件" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3%E4%B8%B0%E5%AF%8C%E7%9A%84-iot-%E7%BB%84%E4%BB%B6"></a>(3).丰富的 IoT 组件</h3><p>集成主流 IoT 协议栈
多种通信模组 SAL 层适配框架；
支持 OTA 升级
提供简单易用端云 API，加速用户业务接入腾讯云</p><h3><a id="user-content-4 可靠的安全框架" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#4%E5%8F%AF%E9%9D%A0%E7%9A%84%E5%AE%89%E5%85%A8%E6%A1%86%E6%9E%B6"></a>(4).可靠的安全框架</h3><p>多样化的安全分级方案
均衡安全需求&amp;成本控制</p><h3><a id="user-content-5 良好的可移植性" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#5%E8%89%AF%E5%A5%BD%E7%9A%84%E5%8F%AF%E7%A7%BB%E6%A4%8D%E6%80%A7"></a>(5).良好的可移植性</h3><p>内核及 IoT 组件高度解耦，提供标准适配层
提供自动化移植工具，提升开发效率</p><h3><a id="user-content-6 便捷的调试手段" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#6%E4%BE%BF%E6%8D%B7%E7%9A%84%E8%B0%83%E8%AF%95%E6%89%8B%E6%AE%B5"></a>(6).便捷的调试手段</h3><p>提供云化的最后一屏调试功能
故障现场信息自动上传云平台，方便开发人员调试分析</p><h2><a id="user-content-3tencentos-tiny 携手合作伙伴共建 iot 生态" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny%E6%90%BA%E6%89%8B%E5%90%88%E4%BD%9C%E4%BC%99%E4%BC%B4%E5%85%B1%E5%BB%BAiot%E7%94%9F%E6%80%81"></a>3、TencentOS tiny 携手合作伙伴共建 IoT 生态</h2><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/Partners.png" alt="" referrerpolicy="no-referrer"></p><p>TencentOS tiny 自开源发布以来也在努力发展合作伙伴，期待合作共赢，共同扩展 IoT 应用生态。目前已经与多家 MCU/IP 核厂家达成了合作，包括意法半导体、恩智浦半导体、兆易半导体、ARM、华大半导体、芯来科技等；也与无线 SOC 和模组厂家达成了广泛的合作关系，包括瑞兴恒方、国民技术、Nordic 蓝牙、亮牛半导体、有人物联网等，</p><p>除了 MCU 和模组外，TencentOS tiny 也积极推进终端产品及项目的落地，目前已经形成了 AI 智慧农业、智能货柜、智慧会议室等方案，并且在腾讯内部与微信支付、腾讯云智慧行业、 AI 平台部、腾讯微瓴、QQ family 达成内部合作，共同扩展行业生态；同时也开始积极发展外部客户，目前与深圳光合显示科技的墨水屏零售标签、鑫悦购充电桩等达成业务合作。TencentOS tiny 将携手合作伙伴为物联网终端厂家提供更优质的 IoT 终端软件解决方案，方便各种物联网设备快速接入腾讯云，共同扩展 IoT 生态，更好地支撑智慧城市、智能水表、智能家居、智能穿戴、车联网等多种行业应用。</p><p>欢迎 IoT 相关项目合作，有合作需求的请邮件联系 TencentOS tiny 官方工作人员，邮箱地址 ： <a href="mailto:supowang@tencent.com">supowang@tencent.com</a></p><h1><a id="user-content-二 tencentos-tiny-代码目录" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%8Ctencentos-tiny-%E4%BB%A3%E7%A0%81%E7%9B%AE%E5%BD%95"></a>二、TencentOS tiny 代码目录</h1><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/09.Code_Directories.md">TencentOS tiny 代码目录说明</a></li></ul><h1><a id="user-content-三 tencentos-tiny-参考文档" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%89tencentos-tiny-%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3"></a>三、TencentOS tiny 参考文档</h1><h2><a id="user-content-1 移植指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#1%E7%A7%BB%E6%A4%8D%E6%8C%87%E5%8D%97"></a>1、移植指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/10.Porting_Manual_for_KEIL.md">TencentOS tiny 移植指南（KEIL 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/11.Porting_Manual_for_IAR.md">TencentOS tiny 移植指南（IAR 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/12.Porting_Manual_for_GCC.md">TencentOS tiny 移植指南（GCC 版本）</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/mdk_pack/Documentation/README.md">TencentOS tiny 移植指南（基于 MDK pack)</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/tools/STM32CubeMX_pack/Documentation/README.md">TencentOS tiny 移植指南（基于 STM32 CubeMx)</a></li></ul><h2><a id="user-content-2tencentos-tiny-开发指南" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#2tencentos-tiny-%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97"></a>2、TencentOS tiny 开发指南</h2><ul><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/04.Development_Manual.md">TencentOS tiny 内核开发指南</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/05.SDK_Manual.md">TencentOS tiny API 参考</a></li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/08.QCloud_IoTHub_Quick_Start.md">TencentOS tiny 对接腾讯云 IoTHub 开发指南</a></li></ul><h2><a id="user-content-3tencentos-tiny-腾讯云大学视频教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#3tencentos-tiny-%E8%85%BE%E8%AE%AF%E4%BA%91%E5%A4%A7%E5%AD%A6%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>3、TencentOS tiny 腾讯云大学视频教程</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fedu%2Fpaths%2Fseries%2FIoT">TencentOS tiny 端侧开发实践课</a></li></ul><h1><a id="user-content-四 tencentos-tiny-开源协议" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%9B%9Btencentos-tiny-%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>四、TencentOS tiny 开源协议</h1><ul><li>TencentOS tiny 遵循 <a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/LICENSE">BSD-3 开源许可协议</a></li></ul><h1><a id="user-content-五 tencentos-tiny-支持的物联网平台" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%BA%94tencentos-tiny-%E6%94%AF%E6%8C%81%E7%9A%84%E7%89%A9%E8%81%94%E7%BD%91%E5%B9%B3%E5%8F%B0"></a>五、TencentOS tiny 支持的物联网平台</h1><p>TencentOS tiny 能支持物联网终端设备和业务快速接入<a href="https://gitee.com/link?target=https%3A%2F%2Fcloud.tencent.com%2Fproduct%2Fiotexplorer">腾讯云物联网平台 IoT Explorer</a>。</p><p>TencentOS tiny 结合腾讯云物联网开发平台 IoT Explorer，已经构筑起连接通讯芯片到云开发的能力，加上已经建设完成的国内最大规模 LoRa 网络，腾讯彻底打通从芯片通讯开发、网络支撑服务，物理设备定义管理，数据分析和多场景应用开发等全链条 IoT 云开发服务能力，重新定义了物联网开发模式，助力亿级设备多方式多模式低门槛接入腾讯云服务。作为物联网基础设施建设服务者，腾讯将持续打造开放的物联网生态体系，促进物联网生态良性发展。</p><h1><a id="user-content-六 tencentos-tiny-快速入门参考" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%ADtencentos-tiny-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%8F%82%E8%80%83"></a>六、TencentOS tiny 快速入门参考</h1><p>TencentOS tiny 联合合作伙伴 (南京厚德物联网) 设计了定制开发板，如下图：
<img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/EVB_MX.png" alt="" referrerpolicy="no-referrer"></p><ul><li><a href="https://gitee.com/link?target=http%3A%2F%2Fwww.holdiot.com%2Fproduct%2Fshowproduct.php%3Fid%3D8">TencentOS tiny 定制开发板介绍页</a>，开发者可以基于定制开发板进行快速入门学习，点击下载参考文档</li><li><a href="https://gitee.com/TencentOS/TencentOS-tiny/blob/master/doc/15.TencentOS_tiny_EVB_MX_Plus_Quick_Start.md">TencentOS-tiny 定制开发板入门指南</a></li></ul><h1><a id="user-content-七贡献代码" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B8%83%E8%B4%A1%E7%8C%AE%E4%BB%A3%E7%A0%81"></a>七、贡献代码</h1><ul><li><ol><li>在您自己的 GitHub 账户下 Fork TencentOS tiny 开源项目；</li></ol></li><li><ol start="2"><li>根据您的需求在本地 clone 一份 TencentOS tiny 代码；</li></ol></li><li><ol start="3"><li>您修改或者新增功能后，push 到您 fork 的远程分支；</li></ol></li><li><ol start="4"><li>创建 pull request，向 TencentOS tiny 官方开发分支提交合入请求；</li></ol></li><li><ol start="5"><li>TencentOS tiny 研发团队会定期 review 代码，通过测试后合入。</li></ol></li></ul><h1><a id="user-content-八加入 tencentos-tiny 官方 qq 技术交流群" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E5%85%AB%E5%8A%A0%E5%85%A5tencentos-tiny%E5%AE%98%E6%96%B9qq%E6%8A%80%E6%9C%AF%E4%BA%A4%E6%B5%81%E7%BE%A4"></a>八、加入 TencentOS tiny 官方 QQ 技术交流群</h1><p>扫码加群，请备注 TencentOS tiny 开发者，工作人员会根据备注进行审核：</p><p><img src="https://gitee.com/TencentOS/TencentOS-tiny/raw/master/doc/image/introduction/qq.png" alt="" referrerpolicy="no-referrer"></p><h1><a id="user-content-九第三方开发者评测" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E4%B9%9D%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BC%80%E5%8F%91%E8%80%85%E8%AF%84%E6%B5%8B"></a>九、第三方开发者评测</h1><p>1.基于 TencentOS tiny 的环境监测实战项目
<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav73782956%3Ffrom%3Dsearch%26seid%3D4421984671929108231">【TencentOS tiny】环境监测实战项目最终完整版</a>
感谢阿正的贡献</p><p>2.基于野火 stm32f103 开发板上移植的 TencentOS tiny 例程、源码剖析、视频讲解。
感谢 CSDN 博客专家杰杰的贡献</p><h2><a id="user-content-简单上手" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%AE%80%E5%8D%95%E4%B8%8A%E6%89%8B"></a>简单上手：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101034426">超详细的 TencentOS tiny 移植到 STM32F103 全教程</a></li></ul><h2><a id="user-content-深度源码分析" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E6%B7%B1%E5%BA%A6%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90"></a>深度源码分析：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99618912">【TencentOS tiny 学习】源码分析（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99665883">【TencentOS tiny 学习】源码分析（2）——调度器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99687678">【TencentOS tiny 学习】源码分析（3）——队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F99781093">【TencentOS tiny 学习】源码分析（4）——消息队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100052643">【TencentOS tiny 学习】源码分析（5）——信号量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100056641">【TencentOS tiny 学习】源码分析（6）——互斥锁</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F100492219">【TencentOS tiny 学习】源码分析（7）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fjiejiemcu%2Farticle%2Fdetails%2F101846089">【TencentOS tiny 学习】源码分析（8）——软件定时器</a></p></li></ul><h2><a id="user-content-配套例程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E9%85%8D%E5%A5%97%E4%BE%8B%E7%A8%8B"></a>配套例程：</h2><ul><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2Fhello-world">【TencentOS tiny 学习】例程（0）——hello world</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F01-task">【TencentOS tiny 学习】例程（1）——task</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F02-queue">【TencentOS tiny 学习】例程（2）——队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F03-msg_queue">【TencentOS tiny 学习】例程（3）——消息队列</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F04-sem">【TencentOS tiny 学习】例程（4）——信号量</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F05-mutex">【TencentOS tiny 学习】例程（5）——互斥锁</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F06-event">【TencentOS tiny 学习】例程（6）——事件</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F07-timer">【TencentOS tiny 学习】例程（7）——软件定时器</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F08-mmblk">【TencentOS tiny 学习】例程（8）——内存池</a></p></li><li><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2F09-mmheap">【TencentOS tiny 学习】例程（9）——内存堆</a></p></li></ul><h2><a id="user-content-视频教程" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E8%A7%86%E9%A2%91%E6%95%99%E7%A8%8B"></a>视频教程：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%3Ffrom%3Dsearch%26seid%3D10160676184801585522">【TencentOS tiny 学习】视频汇总</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D1">【视频】01-初识 TencentOS tiny</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D2">【视频】02-TencentOS tiny 基础知识</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D3">【视频】03-TencentOS tiny 移植</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D4">【视频】04-TencentOS tiny 任务-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D5">【视频】05-TencentOS tiny 任务-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D6">【视频】06-TencentOS tiny 队列-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D7">【视频】07-TencentOS tiny 队列-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D8">【视频】08-TencentOS tiny 消息队列</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D9">【视频】09-TencentOS tiny 信号量-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D10">【视频】10-TencentOS tiny 信号量-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【视频】11-TencentOS tiny 互斥锁-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D12">【视频】12-TencentOS tiny 互斥锁-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D13">【视频】13-TencentOS tiny 互斥锁-3</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D14">【视频】14-TencentOS tiny 事件-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D15">【视频】15-TencentOS tiny 事件-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D16">【视频】16-TencentOS tiny 软件定时器-1</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D11">【视频】17-TencentOS tiny 软件定时器-2</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2Fav70478596%2F%3Fp%3D18">【视频】18-TencentOS tiny 软件定时器-3</a></li></ul><h2><a id="user-content-相关 ppt 资料" class="anchor" href="https://gitee.com/TencentOS/TencentOS-tiny#%E7%9B%B8%E5%85%B3ppt%E8%B5%84%E6%96%99"></a>相关 PPT 资料：</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FjiejieTop%2FTencentOS-Demo%2Ftree%2Fmaster%2FPPT">【TencentOS tiny 学习】视频 PPT</a></li></ul>]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 01:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/TencentOS/TencentOS-tiny</guid>
            <link>https://gitee.com/TencentOS/TencentOS-tiny</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | vivo 容器平台资源运营实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">作者：vivo 互联网服务器团队 - Chen Han</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="font-size: 14px;text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p style="text-wrap: wrap;">容器平台针对业务资源申请值偏大的运营问题，通过静态超卖和动态超卖两种技术方案，使业务资源申请值趋于合理化，提高平台资源装箱率和资源利用率。</p></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、背景</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">在 Kubernetes 中，容器申请资源有 request 和 limit 概念来描述资源请求的最小值和最大值。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">requests 值在容器调度时会结合节点的资源容量 (capacity) 进行匹配选择节点</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">。</span></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">limits 表示容器在节点运行时可以使用的资源上限，当尝试超用资源时，CPU 会被约束 (throttled)，内存会终止 (oom-kill)。</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">总体而言，在调度的时候 requests 比较重要，在运行时 limits 比较重要。在实际使用时，容器资源规格 request 和 limit 的设置规格也一直都让 Kubernetes 的用户饱受困扰：</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">对业务运维人员</span></strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">：希望预留相当数量的资源冗余来应对上下游链路的负载波动</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">，保障线上应用的稳定性。</span></p></li><li><p style="text-wrap: wrap;"><strong><span style="letter-spacing: 0.034em;">对平台人员</span></strong><span style="letter-spacing: 0.034em;">：集群的资源装箱率高，节点利用率低，存在大量的空闲资源无法调度，造成算力浪费。</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、现状</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 vivo 容器平台介绍</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">vivo 容器平台基于 Kubernetes 技术对内部业务提供容器服务。内部业务统一在 CICD 平台部署和管理容器资源，容器平台自研的 caas-openapi 组件提供 restful 接口与 CICD 交互。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">平台通过标签，从资源维度逻辑上可以分为测试池、共享池、专有池、混部池。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: right;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);height: auto;"><section style="font-size: 14px;text-align: justify;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;background-color: rgb(239, 239, 239);">测试池</span></strong><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;background-color: rgb(239, 239, 239);">：为业务部署容器测试，一般非现网业务，为业务测试提供便利。</span><br></p></li><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;">共享池</span></strong><span style="font-size: 15px;">：为业务不感知物理机，类似公有云全托管容器服务。</span></p></li><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;letter-spacing: 0.034em;">专有池</span></strong><span style="font-size: 15px;letter-spacing: 0.034em;">：为业务独享物理机，类似公有云半托管容器服务，业务方独占资源，容器平台维护。</span></p></li><li><p style="text-wrap: wrap;"><strong><span style="font-size: 15px;letter-spacing: 0.034em;">混部池</span></strong><span style="font-size: 15px;letter-spacing: 0.034em;">：为业务独享物理机，在专有池基础上，混部离线业务，缓解离线资源缺口，提升整机利用率。</span></p></li></ul></section></section></section><p style="text-align: center;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014003" data-ratio="0.5453315290933695" data-s="300,640" src="https://oscimg.oschina.net/oscnet/0bd49caa-1769-4418-89b1-2e353db5c6d5.png" data-type="png" data-w="739" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.2 资源部署现状和问题</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">vivo 容器平台的所有在线业务部署均要求设置 request 和 limit，且 request &lt;= limit，默认情况 request 等于 limit。在共享池中，常见业务 request 设置会出现如下情况：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>（1） 较少情况</strong>，业务设置较低的 request 值，而实际使用资源远大于它的 request 值，若大量 pod 调度一个节点，加剧节点热点问题影响同节点其他业务。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>（2）大多情况</strong>，业务按最大资源需求设置较高的 request 值，而实际使用资源长期远小于它的 request 值。业务侧账单成本高 (按 request 计费)，且容器异常退出时，重调度时可能因为平台空闲资源碎片，导致大规格容器无法调度。这会导致，平台侧可调度资源少，但平台整体节点资源利用率偏低。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">对平台和用户方，request 值设置合理很重要，但平台无法直接判断用户设置 request 值合理性，所以无法首次部署时硬限制。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014004" data-ratio="0.5070967741935484" data-s="300,640" src="https://oscimg.oschina.net/oscnet/38a6b780-753d-4a77-b444-ad2c242316de.png" data-type="png" data-w="775" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3 资源规格合理性思考</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.3.1 request 怎么样才是合理设置</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">request 值接近业务实际使用量，例如用户申请 request 为 2 核，limit 为 4 核，实际真实使用量最多 1 核，那么合理 request 值设置为 1 核附近。但是业务真实使用量只有运行一段时间后才能评估，属于后验知识。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>2.3.2 保障资源最大使用量</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">不修改 limit 值就能保障业务最大使用量符合业务预期。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014005" data-ratio="0.4636471990464839" data-s="300,640" src="https://oscimg.oschina.net/oscnet/858557c2-5110-48da-b2a0-9d5f9ba876a1.png" data-type="png" data-w="839" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、解决方案探索</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.1 静态超卖方案</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">思路：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">静态超卖方案是将 CICD 用户申请规格的 request 按一定比例降低，根据平台运营经验设置不同集群不同机房不同环境的静态系数，由 caas-openapi 组件自动修改。如下图：<br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014007" data-ratio="1.8846153846153846" data-s="300,640" src="https://oscimg.oschina.net/oscnet/844bc6e1-0139-4de4-9b85-5b61f7fb8572.png" data-type="png" data-w="338" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">优点：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">首次部署时可以应用，实现简单。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">缺点：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">生产环境系数设置保守，导致 request 依然偏大，且由于内存是不可压缩资源，实际实施时为避免业务实例内存 oom-kill，静态超卖只开启了 cpu 维度，未开启内存静态超卖。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.2 动态超卖方案</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.1 方案思路</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">开发 caas-recommender 组件，基于业务监控数据的真实资源用量来修正业务 request 值。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">从监控组件拉取各个容器资源的真实使用量。</span><br></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">通过算法模型得到业务申请量的推荐值。</span></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">业务重新部署时，使用推荐值修改业务 request 值。</span></p></li></ol></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.2 半衰期滑动窗口模型</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">结合容器业务的特点，对推荐算法有如下要求：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;">当 workload 负载上升时，结果需要快速响应变化，即越新的数据对算法模型的影响越大；</p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">当 workload 负载下降时，结果需要推迟体现，即越旧的数据对算法结果的影响越小。</span></p></section></li></ul><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">半衰期滑动窗口模型可以根据数据的时效性对其权重进行衰减，可以满足上述要求。</p><p style="text-wrap: wrap;">详细描述参考：google Borg Autopilot 的 moving window 模型，<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdl.acm.org%2Fdoi%2Fpdf%2F10.1145%2F3342195.3387524" textvalue="参看原论文>>" linktype="text" imgurl="" tab="outerlink" data-linktype="2">参看原论文&gt;&gt;</a></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">公式如下：</p></section><section style="font-size: 15px;line-height: 1.5;"><section style="text-align: left;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 50%;height: auto;"><br></section></section></section><section style="font-size: 15px;line-height: 1.5;"><section style="text-align: center;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 30%;height: auto;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="173" data-cropsely1="0" data-cropsely2="173" data-imgfileid="100014023" data-ratio="0.22407407407407406" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1f44a5f7-da1d-4fd9-a403-67e1496d6613.jpg" data-type="jpeg" data-w="1080" style="vertical-align: middle;width: 578px;height: 130px;" referrerpolicy="no-referrer"></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">其中&nbsp;τ&nbsp;为数据样本的时间点，t1/2 为半衰期，表示每经过 t1/2 时间间隔，前一个 t1/2 时间窗口内数据样本的权重就降低一半。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>核心理念</strong>：在参考时间点之前的数据点，离的越远权重越低。在参考时间点之后的数据点权重越高。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>半衰期 halfLife</strong>：经过时间 halfLife 后，权重值降低到一半。默认的 halfLife 为 24 小时。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>数据点的时间 timestamp</strong>：监控数据的时间戳。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>参考时间 referenceTimestamp</strong>：监控数据上的某个时间（一般是监控时间最近的零点 00:00）。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>衰减系数 decayFactor</strong>：2^((timestamp-referenceTimestamp)/halfLife)</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>cpu 资源的固定权重</strong>：CPU 使用量数据对应的固定权重是基于容器 CPU request 值确定的。当 CPU request 增加时，对应的固定权重也随之增加，旧的样本数据固定权重将相对减少。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>memory 资源的固定权重</strong>：由于内存为不可压缩资源，而内存使用量样本对应的固定权重系数为 1.0。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>数据点权重 = 固定权重*衰减系数</strong></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">例如现在的数据点的权重为 1，那么 24 小时之前的监控数据点的权重为 0.5，48 小时前的数据点的权重为 0.25，48 小时后的数据权重为 4。</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.3 指数直方图计算推荐值</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">caas-recommender 每个扫描周期（默认 1min）从 metrics server 或 prometheus 中获取带时间戳的样本数据，如 container 维度的 CPU、Memory 资源使用等。样本数据结合权重值，为每个 workload 构建指数直方图，指数直方图中每个桶的大小以指数速率逐步提升。指数直方图的样本存储方式也便于定期 checkpoint 保存，可以显著提升程序 recover 性能。如下图：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014009" data-ratio="0.7993079584775087" data-s="300,640" src="https://oscimg.oschina.net/oscnet/64da2d6c-d91d-4315-9e1f-cdbbf8bcd8cc.png" data-type="png" data-w="578" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><ol class="list-paddingleft-1" style="list-style-type: decimal;"><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;">指数直方图的横轴定义为资源量，纵轴定义为对应权重，资源量统计间隔以 5% 左右的幅度增加。</p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">桶的下标为 N，桶的大小是指数增加的 bucketSize=0.01*(1.05^N)，下标为 0 的桶的大小为 0.01，容纳范围为[0,0.01)，下标为 1 的桶的大小为 0.01*1.05^1=0.0105，容纳范围[0.01-0.0205)。</span><span style="letter-spacing: 0.034em;">[0.01,173]只需要两百个桶即可完整保存。</span><span style="letter-spacing: 0.034em;"></span><span style="letter-spacing: 0.034em;"></span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">将每个数据点，按照数值大小丢到对应的桶中。</span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">当某个桶里增加了一个数据点，则这个桶的权重增加</span><strong style="letter-spacing: 0.034em;">固定权重*衰减系数</strong><span style="letter-spacing: 0.034em;">，所有桶的权重也增加</span><strong style="letter-spacing: 0.034em;">固定权重*衰减系数</strong><span style="letter-spacing: 0.034em;">。</span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">计算出 W(95)=95%*所有桶的总权重，如上图仅考虑前 4 个桶，总权重为 20，w(95) 权重为 19。</span><span style="letter-spacing: 0.034em;">&nbsp;</span></p></section></li><li><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">从最小的桶到最大桶开始累加桶的权重，这个权重记为 S，当 S&gt;=W(95) 时候，这个时候桶的下标为 N，那么下标为 N+1 桶的最小边界值就是 95 百分位值，如上图 N=3 时，S&gt;=W(95)，95 百分位值即为 0.01*1.05^2。</span></p></section></li></ol><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">比如 CPU 波动较大且可压缩，采用 95% 分位值（P95），内存采用 99% 分位值（P99）。最终得到 workload 的资源推荐值。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.4 caas-recommender 组件流程图</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014010" data-ratio="0.9929971988795518" data-s="300,640" src="https://oscimg.oschina.net/oscnet/9640df4b-639d-4743-b458-23edf102c5a6.png" data-type="png" data-w="714" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>1. 启动 controller</strong>：profile Controller 监听 profile template crd，根据 profile crd 创建相应维度的 recommendation crd，可支持 namepace\</p><p style="text-wrap: wrap;">workload\pod 维度。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>2. 初始化：</strong></p><p style="text-wrap: wrap;">判断是否有 checkpoint，若无，可以选择从 prometheus 拉取数据构建直方图。若有，由 checkpoint 直接 recover。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>3. loop 循环：</strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;">从 recommendation crd 中判断哪些 pod 需要纳管（pod labels）</p></li><li><p style="text-wrap: wrap;">根据 pod label 从 Kubernetes 获取 pod 信息</p></li><li><p style="text-wrap: wrap;">根据 pod 的 namespace 从 metrics server 拉取监控数据，由 container 数据汇聚成 pod 用量数据。</p></li><li><p style="text-wrap: wrap;">构建指数直方图，填充 pod 用量数据和权重值。</p></li><li><p style="text-wrap: wrap;">根据直方图的分位值计算推荐值</p></li><li><p style="text-wrap: wrap;">存储推荐值和直方图 chekpoint</p></li><li><p style="text-wrap: wrap;">gc 需要删除的 recommendation crd 或者直方图内存等无用数据。</p></li></ul><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>4.支持原生 workload 常用类型</strong>，拓展支持了 OpenKruise 相关 workload 类型。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.5 推荐值校正规则</strong></p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: transparent;padding: 10px;background-color: rgb(239, 239, 239);"><section powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;background-color: rgb(239, 239, 239);">推荐值 = 模型推荐值 * 扩大倍数 (可配置)&nbsp;</span><br></p></li><li><p style="text-wrap: wrap;">推荐值 &lt; 原生 request 值：按照推荐值修改</p></li><li><p style="text-wrap: wrap;">推荐值 &gt; 原始 request 值:&nbsp; 按照原始 request 修改</p></li><li><p style="text-wrap: wrap;">内存是否修改可以通过配置</p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">不修改 workload 的 limit 值</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.3 HPA 利用率计算逻辑改造</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">Pod 水平自动扩缩（Horizontal Pod Autoscaler, 简称 HPA）可以基于 CPU/MEM 利用率自动扩缩 workload 的 Pod 数量，也可以基于其他应程序提供的自定义度量指标来执行自动扩缩。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">原生 Kubernetes 的 HPA 扩缩容利用率计算方式是基于 request 值。若资源超卖，request 值被修改后，那么业务设置的 HPA 失灵，导致容器不符合预期扩缩容。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">关于 HPA 是基于 request 还是基于 limit，目前 Kubernetes 社区还存在争论，相关 issue 见 72811。若需要使用 limit 计算利用率，可以修改 kube-controller-manager 源码，或者使用自定义指标来代替。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">vivo 容器平台兼容业务物理机利用率逻辑，规定内部统一监控系统的 Pod 利用率均基于 limit 计算。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>HPA 改造思路：</strong>通过修改 kube-controller-manager 源码方式实现基于 limit 维度计算。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">在</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">pod annotation 中记录设置值信息（request 值和 limit 值），以及维度信息（request 或 limit 维度）。</span><br></p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">controller 计算 pod 资源时，判断是否有指定 annotation，若有，解析 annotation 记录值和维度信息计算利用率，若无，使用原生逻辑。</span><br></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通过上述方式解耦 HPA 与 pod request 值，这样平台的资源超卖功能修改 request 不影响 HPA 自动扩缩预期。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.4 专有池支持超卖能力</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">专有池物理机由业务自行运维管理，从平台角度，不应该随意修改业务的容器 request 规格。但是专有池业务也有降低容器规格，部署更多业务，复用资源，提高整机利用率的需求。平台默认所有共享池自动开启超卖能力，专有池可配置选择开启超卖能力。</p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">可自定义开启超卖类型：</span><span style="font-size: 15px;letter-spacing: 0.578px;text-wrap: wrap;">静态、动态、静态+动态。</span><br></p></li><li><p style="text-wrap: wrap;">可自定义静态系数、动态超卖扩大系数。</p></li><li><p style="text-wrap: wrap;"><span style="letter-spacing: 0.034em;">可配置是否自动修改超卖值，当不自动生效可通过接口查询推荐值，由业务自行修改。</span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.5 整体方案</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">首次部署：</p></section></section></section><section powered-by="xiumi.us"><p style="text-wrap: wrap;">根据先验知识评估，通过固定静态系数修改 request 值，再根据部署后各个 pod 监控用量数据，生成 workload 的 request 推荐值。</p><p style="text-wrap: wrap;"><br></p></section><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(65, 95, 255);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgb(62, 62, 62);text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">再次部署：</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us">若有推荐值，使用推荐值部署。无推荐值或者推荐值未生效时，使用静态系数。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014011" data-ratio="0.6361111111111111" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3e7583ce-f7a8-421b-811c-7ac199f805fe.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、效果和收益</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.1 测试集群收益</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014012" data-ratio="0.6662908680947013" data-s="300,640" src="https://oscimg.oschina.net/oscnet/d0349323-1425-40ad-b342-40cfec68f226.png" data-type="png" data-w="887" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">原测试机器的静态超卖系数很低，且只缩减 cpu 维度资源，导致集群内存成为资源瓶颈。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">开启动态超卖能力 4 个月后，纳管 90% 的 workload，节点 pod 平均内存 request 由 4.07Gi 下降到 3.1Gi，内存平台装箱率降低 10%，有效缓解集群内存不足问题。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">4.2 共享池生产集群收益</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img js_insertlocalimg" data-imgfileid="100014013" data-ratio="0.6462053571428571" data-s="300,640" src="https://oscimg.oschina.net/oscnet/82973f95-b870-422f-a4f5-647a0b81e40c.png" data-type="png" data-w="896" style="" referrerpolicy="no-referrer"></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">原生产集群静态超卖系数较高，CPU 资源装箱率高，导致集群的 CPU 成为瓶颈。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">开启动态超卖能力 3 个月后，纳管 60% 的 workload，节点 pod 平均 cpu request 由 2.86 降低为 2.35，整体 cpu 利用率相比未开启前提升 8% 左右。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>五、总结与展望</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">vivo 容器平台通过资源超卖方案，将业务容器的 request 降低到合理值，降低业务使用成本，缓解了集群资源不足问题，达到了提升节点利用率目的。但是当前仅在生产集群开启了 CPU 资源超卖，规划近期开启内存资源超卖。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">未来基于上述方法，可以纳管更多维度，比如 GPU 卡利用率再结合 GPU 虚拟化能力，从而提高 GPU 资源共享效率。根据动态超卖推荐值可以用于构建用户画像，区分业务是计算型或内存型，方便平台更好理解用户特性，辅助资源调度等。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(65, 95, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;">参考资料：</p></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><section powered-by="xiumi.us"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2FCCE-SWR%2Fp%2F10530980.html" textvalue="深入理解 Kubernetes 资源限制：CPU" linktype="text" imgurl="" tab="outerlink" data-linktype="2">深入理解 Kubernetes 资源限制：CPU</a></p></section></li><li><section powered-by="xiumi.us"><p><span style="letter-spacing: 0.034em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnblogs.com%2FCCE-SWR%2Fp%2F10494025.html" textvalue="深入理解 Kubernetes 资源限制：内存&nbsp;" linktype="text" imgurl="" tab="outerlink" data-linktype="2">深入理解 Kubernetes 资源限制：内存&nbsp;</a></span></p></section></li><li><section powered-by="xiumi.us"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzNzYxNjAzMg%3D%3D%26mid%3D2247524786%26idx%3D1%26sn%3Dddcc8c59751ddc8987c1b13fe0e71a61%26scene%3D21%23wechat_redirect" textvalue="资源画像，让容器资源规格的填写不再纠结" linktype="text" imgurl="" tab="outerlink" data-linktype="2">资源画像，让容器资源规格的填写不再纠结</a></p></section></li><li><section powered-by="xiumi.us"><p><span style="letter-spacing: 0.034em;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2F0fd.org%2F2020%2F09%2F05%2Fautopilot-workload-autoscaling-at-google%2F" textvalue="Autopilot: workload autoscaling at Google" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Autopilot: workload autoscaling at Google</a></span></p></section></li><li><section powered-by="xiumi.us"><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.cn%2Farticle%2Fz40lmwmtoyvecq6tpoik" textvalue="深入理解 VPA Recommender" linktype="text" imgurl="" tab="outerlink" data-linktype="2">深入理解 VPA Recommender</a></p></section></li></ul><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><br></p><section style="" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: 40%;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(160, 160, 160);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: top;width: 20%;"><section style="text-align: center;color: rgb(160, 160, 160);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: top;width: 40%;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(160, 160, 160);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:132.title1"><p>猜你喜欢</p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497810%26idx%3D1%26sn%3Dfb5334c9637cdde4b5125f69ed32e89f%26chksm%3Debdb88c0dcac01d6faf82e4d44e8421616ec9128f46ea494339a599c346b13212b9f1d774886%26scene%3D21%23wechat_redirect" textvalue="Hudi 在 vivo 湖仓一体的落地实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">Hudi 在 vivo 湖仓一体的落地实践</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497721%26idx%3D1%26sn%3D7fc575754a006dc68bb08cf730971cde%26chksm%3Debdb876bdcac0e7d1b579c0e69b8d36854bb08457c231640dab9418ee75dd35788e90e0688bf%26scene%3D21%23wechat_redirect" textvalue="RocksDB 在 vivo 消息推送系统中的实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">RocksDB 在 vivo 消息推送系统中的实践</a></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247497638%26idx%3D1%26sn%3D7c773beb9f6062991ff11a068d55b132%26chksm%3Debdb8734dcac0e22e33f20a45472e8918c2b4bb7ccc47f138e3d1d37af76cd1fef986283edbd%26scene%3D21%23wechat_redirect" textvalue="线上 ES 集群参数配置引起的业务异常案例分析" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">线上 ES 集群参数配置引起的业务异常案例分析</a></p></li></ul></section></section></section></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互联网技术" data-alias="vivoVMIC" data-signature="分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。" data-from="0" data-is_biz_ban="0"></mp-common-profile></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - vivo 互联网技术（vivoVMIC）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Dec 2023 01:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/10322908</guid>
            <link>https://my.oschina.net/vivotech/blog/10322908</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[邀请好友使用 BaiduComate，赢取丰厚京东卡奖励！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2><span><span><strong><strong><span><span><strong>什么是 BaiduComate？</strong></span></span></strong></strong></span></span></h2><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>BaiduComate 是基于文心大模型，结合百度积累多年的编程现场大数据和外部优秀开源数据，为你生成更符合实际研发场景的优质代码的智能代码助手。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>Comate 目前可以通过自然语言及上下文，帮你生成代码，更能契合您的个人代码风格和业务需求，帮您提高编码效率，更有技术问答来帮您解答编码过程中遇到的技术难题。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>同时 Comate 能够帮您智能生成单元测试、快速生成代码注释、为您的代码内容提供优化建议，让您从繁杂零碎的工作中解放出来。</span></span></span></span></p><h2><span><span><strong><strong><span><span><strong>什么活动？</strong></span></span></strong></strong></span></span></h2><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>参与积分榜活动，邀请好友注册并使用 BaiduComate，即可轻松赢取丰厚的京东卡奖励。</span></span></span></span></p><h2><span><span><strong><strong><span><span><strong>活动怎么玩？</strong></span></span></strong></strong></span></span></h2><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>一、活动时间：</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>2023 年 12 月 26 日至 2023 年 12 月 31 日。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>二、活动内容：</strong></span></span></strong></span></span></p><ol><li><span><span>登录 Comate（</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcomate.baidu.com%2F" target="_blank"><u><span><span style="color:#3f83f8"><u><span>https://comate.baidu.com/</span></u></span></span></u></a><span><span>)，进入个人中心，分享您的专属链接给好友，邀请好友注册并使用 Comate；</span></span></li><li><span><span>您可以通过分享您的专属链接或生成您的专属二维码向您的好友分享；</span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img alt="" height="166" src="https://static.oschina.net/uploads/space/2023/1226/185627_hIls_4252687.png" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img alt="" height="149" src="https://static.oschina.net/uploads/space/2023/1226/185655_vMNA_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span><span>好友通过您的链接使用 Comate 后，您和您的好友将共同获得 10 积分；</span></span></p><p><span><span>邀请的好友越多，获得的京东卡奖励越丰厚，您可在积分榜活动页查看活动详情（</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcomate.baidu.com%2F1%2Factivity" target="_blank"><u><span><span style="color:#3f83f8"><u><span>https://comate.baidu.com/1/activity</span></u></span></span></u></a><span><span>）。</span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img alt="" height="299" src="https://static.oschina.net/uploads/space/2023/1226/185733_Gean_4252687.png" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>三、活动奖励：</strong></span></span></strong></span></span></p><ol><li><span><span>积分超过 500 分且总排行榜前 20 名，可得 500 京东卡；</span></span></li><li><span><span>积分超过 200 分且总排行榜前 100 名，可得 200 京东卡；</span></span></li><li><span><span>积分超过 100 分且总排行榜前 200 名，可得 100 京东卡；</span></span></li><li><span><span>积分超过 50 分且总排行榜前 400 名，可得 50 京东卡；</span></span></li><li><span><span>其他有积分的用户，可以兑换 Baidu Comate 的使用时长，10 积分可兑换一个月的使用时长；</span></span></li><li><span><span>总排行榜前三且积分超过 500 分的用户，可额外获得神秘大奖！</span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>四、活动规则：</strong></span></span></strong></span></span></p><ol><li><span><span><span style="color:#1c1d1f">被分享人注册并使用 Comate 后，分享人和被分享人均加 10 分；</span></span></span></li><li><span><span>活动期间内，邀请的好友数量不设上限；</span></span></li><li><span><span>相同积分的用户，按照最后一名被邀请用户的使用先后顺序进行排序；</span></span></li><li><span><span>京东卡将在活动结束后 15 个工作日内发放至用户账户；</span></span></li><li><span><span><span style="color:#1c1d1f">更多规则详见 Comate 官网活动页</span></span></span><span><span>。</span></span></li></ol><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>与好友一起探索 Comate 的无限可能，让智能云技术为您的代码添色。现在，就通过您的专属链接邀请好友加入 Comate，共同开启智能新篇章！</span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 10:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272829</guid>
            <link>https://www.oschina.net/news/272829</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[信通院发布《人工智能伦理治理研究报告（2023 年）》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 26 日，中国信息通信研究院（简称「中国信通院」）在「2024 中国信通院 ICT 深度观察报告会」科技伦理治理分论坛上发布了《人工智能伦理治理研究报告（2023 年）》。</span></p><p style="margin-left:0; margin-right:0">报告在总结人工智能伦理治理有关概念和特点的基础上，对人工智能生成内容、自动驾驶、智慧医疗三个典型应用场景的伦理风险进行分析，并结合国内外人工智能伦理治理实践，提出人工智能伦理治理的四点展望，以期为更加广泛深入的讨论提供参考。</p><p style="margin-left:0; margin-right:0"><img alt="" height="424" src="https://oscimg.oschina.net/oscnet/up-c579b9404f2057e3d9c3aea95b7c78ca41e.png" width="300" referrerpolicy="no-referrer"></p><h4 style="margin-left:0px; margin-right:0px"><strong>报告核心观点</strong></h4><p style="margin-left:0; margin-right:0"><strong>1. 人工智能伦理风险挑战亟需关注</strong></p><p style="margin-left:0; margin-right:0">目前，人工智能引发的伦理挑战已从理论研讨变为现实风险。在技术研发阶段，由于人工智能技术开发主体在数据获取和使用、算法设计、模型调优等方面还存在技术能力和管理方式的不足，可能产生偏见歧视、隐私泄露、错误信息、不可解释等伦理风险。在产品研发与应用阶段，人工智能产品所面向的具体领域、人工智能系统的部署应用范围等将影响人工智能伦理风险程度，并可能产生误用滥用、过度依赖、冲击教育与就业等伦理风险。对于人工智能生成内容、自动驾驶、智慧医疗等典型应用场景，需要根据风险发生频率、影响范围、影响程度等评估主要风险。</p><p style="margin-left:0; margin-right:0"><strong>2. 人工智能伦理治理是应对人工智能风险的有效机制</strong></p><p style="margin-left:0; margin-right:0">人工智能伦理治理是人工智能治理的重要组成部分，是应对人工智能风险挑战的主要机制。人工智能伦理治理把以人为本、公平非歧视、透明可解释、人类可控制、责任可追溯、可持续发展等作为核心内容，并根据人工智能技术发展和应用情况，及时提出调整人与人工智能关系和应对人工智能风险的方法。</p><p style="margin-left:0; margin-right:0"><strong>3. 各国积极推进人工智能伦理治理</strong></p><p style="margin-left:0; margin-right:0">为应对人工智能技术应用带来的风险，世界各国积极推动人工智能伦理国际治理合作。各国政府通过出台人工智能伦理原则、发布人工智能伦理治理指引、提供技术治理工具等加强本国本地区的人工智能伦理治理监管。我国通过积极完善人工智能伦理制度规范，探索人工智能伦理治理技术化、工程化、标准化落地措施，引导行业自律，加强人工智能治理国际合作等举措推动人工智能向善发展。</p><p style="margin-left:0; margin-right:0"><strong>4. 人工智能伦理治理四点展望</strong></p><p style="margin-left:0; margin-right:0">在治理理念方面，坚持促进创新与防范风险相统一，统筹发展与安全。在治理举措方面，健全多学科多主体合作、探索分类分级治理、推动治理技术工具开发。在能力建设方面，重视科研人员、开发人员、社会公众等各主体科技伦理素养提升。在开放合作方面，积极参与全球人工智能伦理治理合作，推动人工智能技术造福人类。</p><hr><p style="margin-left:0; margin-right:0">完整报告地址：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.caict.ac.cn%2Fkxyj%2Fqwfb%2Fztbg%2F202312%2Ft20231226_468983.htm" target="_blank">http://www.caict.ac.cn/kxyj/qwfb/ztbg/202312/t20231226_468983.htm</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 09:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272816</guid>
            <link>https://www.oschina.net/news/272816</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2023 年各编程语言中最流行的许可证]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">OSI 所属的&nbsp;Voices of Open Source 发布了一篇「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.opensource.org%2Fthe-most-popular-licenses-for-each-language-2023%2F" target="_blank">2023 年每种语言中最流行的许可证</a>」的文章，揭示了每种编程语言生态系统中的许可偏好，并强调了清晰和标准化许可证对开发人员、组织和整个开源社区健康的重要性。</span></p><p><span style="color:#000000">文章指出，MIT 和 Apache 2.0 许可证在不同的编程语言和包管理器中最为普遍。JavaScript 社区通常倾向于使用 MIT 许可证，Python 开发人员则偏爱 Apache 2.0。ISC 许可证以其简单性和宽容性在 JavaScript 社区中颇受欢迎。BSD 许可证（包括 3-Clause 和 2-Clause）保持稳定但相对较低的采用率。GPL 也有一定的影响力，但落后于 MIT 和 Apache 2.0。</span></p><h4><strong><span style="color:#000000">Javascript (npm)</span></strong></h4><p><span style="color:#000000">JavaScript 的 npm 软件包管理器中，大多数组件采用的是 MIT 许可（53%），其次是 Apache 2.0（14.76%）和 ISC（10.48%）。ISC 许可证由 Internet Systems Consortium 发布，虽然在 JavaScript 项目中很流行，但在其他编程语言中使用得并不多。小部分项目没有许可证（8%）或或是没有 SPDX 识别的许可证/无声明（5.49%）。</span></p><p><span style="color:#000000"><img alt="" height="275" src="https://oscimg.oschina.net/oscnet/up-6f1b2371f321720b27dc902d1b1b82de159.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">.NET (Nuget)</span></strong></h4><p><span style="color:#000000">而在 .NET 的包管理器 Nuget 中，最令人担忧的点在于，它的大部分组件要么没有许可证（26.76%），要么被认定为"NOASSERTION"（31.95%）。使用 MIT 或 Apache 2.0 许可的比例分别为 21.55% 和 13.37%。</span></p><p><span style="color:#000000"><img alt="" height="286" src="https://oscimg.oschina.net/oscnet/up-9a25d804c9c72bfbf419888c776e096bf8c.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Java (Maven)</span></strong></h4><p><span style="color:#000000">Maven (Java 的包管理器) 中的绝大多数组件都使用 Apache 2.0 许可证（69.18%），使用 MIT 的组件仅占 7.4%。此外，被归类于 NOASSERTION 的组件占比为 14.75%。</span></p><p><span style="color:#000000"><img alt="" height="283" src="https://oscimg.oschina.net/oscnet/up-7beb2e608f1e7aed00f71e9ef72300b8bf4.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Python (Pypi)</span></strong></h4><p><span style="color:#000000">在 Python 的包管理器 Pypi 中，MIT 和 Apache 2.0 许可下的组件占主导地位，分别为 29.14% 和 23.98%。BSD 2-Clause 和 GPL 3.0 下的组件分别占 6.25% 和 6.11%，还有相当一部分组件没有许可（23.69%）。</span></p><p><span style="color:#000000"><img alt="" height="282" src="https://oscimg.oschina.net/oscnet/up-8a891bd50b9f1b941ece9f07d7b367b19c3.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Ruby（Gem）</span></strong></h4><p><span style="color:#000000">Gem（Ruby 的包管理器）中绝大多数组件都使用 MIT 许可证 (63.11%)。其次是 Apache 2.0 和 BSD 3-Clause 许可证，分别占 8.22% 和 6.66%。</span></p><p><span style="color:#000000"><img alt="" height="273" src="https://oscimg.oschina.net/oscnet/up-992730f13a25f44a6e27261837dd4cf2451.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">PHP（Composer）</span></strong></h4><p><span style="color:#000000">在 PHP 的包管理器 Composer 中，MIT 许可证非常受欢迎，占 64.37%。BSD 3-Clause 和 Apache 2.0 下的项目分别占 5.72% 和 3.92%。</span></p><p><span style="color:#000000"><img alt="" height="277" src="https://oscimg.oschina.net/oscnet/up-924aba8c7c052842a7bd363e09566d1e4cb.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Go</span></strong></h4><p><span style="color:#000000">Apache 2.0 和 MIT 许可证在 Go 中占主导地位，分别为 32.49% 和 20.1%。很大一部分 Go 组件没有许可证（29.67%）。</span></p><p><span style="color:#000000"><img alt="" height="293" src="https://oscimg.oschina.net/oscnet/up-ff275f5eef822cdecae73540f0717f58d65.png" width="500" referrerpolicy="no-referrer"></span></p><h4><strong><span style="color:#000000">Rust（Crate）</span></strong></h4><p><span style="color:#000000">对于 crate（Rust 包管理器），使用 MIT 和/或 Apache 2.0 的项目占主导地位，合计占比 83.52%。</span></p><p><span style="color:#000000"><img alt="" height="275" src="https://oscimg.oschina.net/oscnet/up-e115fe1f099762a3b124de0f891eddaaae0.png" width="500" referrerpolicy="no-referrer"></span></p><hr><p><span style="color:#000000">总的来说，虽然市场上已经存在一些成熟的许可证供选择，但仍有<span style="background-color:#ffffff">许多开源组件未指定许可证或标记为 SPDX 「NOASSERTION」。文章指出， 这种模糊性致使此类组件的使用也存在很多不确定性，</span><span style="background-color:#ffffff">可能会阻碍协作、</span><span style="background-color:#ffffff">并给开发者造成法律和安全风险。</span></span></p><p><span style="color:#000000">解决<span style="background-color:#ffffff">无许可证组件的</span>问题对于开源社区的持续健康发展至关重要。开发人员、组织和整个社区都受益于清晰和标准化的许可。它不仅促进协作，还确保法律合规性并保护贡献者的知识产权。此外，它还可以帮助开发人员跟踪可能存在漏洞的组件。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 07:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272790/the-most-popular-licenses-for-each-language-2023</guid>
            <link>https://www.oschina.net/news/272790/the-most-popular-licenses-for-each-language-2023</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[如何在手机上使用 Linux＆如何培养多路径开发思维？2023 年 12 月 WHLUG 回顾]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 12 月 23 日下午，由 deepin（深度）社区主办的武汉 Linux 用户组沙龙（WHLUG）成功举行，20 余名 Linux 爱好者齐聚一堂，10 余名外地伙伴线上参与，共同度过 2023 年最后一场 WHLUG。</p><p>现在，一起来回顾本次年末收官活动的精彩瞬间吧！</p><h1>关于 Droidian 发行版的种种</h1><p>本次沙龙上，archiemeng 为大家分享了 Droidian 发行版的相关内容并进行了现场演示。Droidian 是一个基于 GNOME 的 Linux 手机端发行版，在提供基础 Linux 手机应用的同时，对桌面应用有较完整的适配，且通过 Waydroid 对 Android 应用进行了一定的支持。</p><p>更重要的是，Droidian 对于上述两种应用均能流畅运行，是一个可玩性极强的发行版。目前社区正在积极踊跃开发中，感兴趣的用户可以自行去官网获取刷机教程，也可以参与移植和开发等工作。</p><p>Droidian 官方网站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdroidian.org%2F" target="_blank">https://droidian.org/</a></p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-1f2dc7ca1122468904def7e4bc5cc3eb82e.jpg" referrerpolicy="no-referrer"></p><h1>毕业季，引用模块化思路加载开源人生&nbsp;</h1><p>根据之前的话题收集，我们发现很多学生对于如何参与开源社区感到迷茫，所以在本次活动中，ziggy 便从实际经验及当前就业背景出发，分享了学生时期如何参与开源社区并发挥自己的价值，以及如何引用模块化思维在学业或职场中不断打怪升级成长等话题。</p><p>ziggy 通过开源生态适配中的实际案例和项目经验，生动形象地向学生们展示了掌握多领域知识的重要性。在讨论过程中更是充分发挥了社区力量，大家通过经验交流，为某历史遗留问题提供了解决方案。此次分享不仅给学生们提供了实用的指导，也激发了他们对于参与开源社区的热情和信心。</p><p style="text-align:center"><img height="615" src="https://oscimg.oschina.net/oscnet/up-e43d3f96df95ec88fcc0273bac9446650a9.png" width="1046" referrerpolicy="no-referrer"></p><p>值得一提的是，一位在 20 年前就参与 WHLUG 的资深用户也在本月来到现场，并为大家分享了经验和心得。他表示，很多人在开源社区中提问时还略显羞涩，希望大家能够放下顾虑，树立正确的社区参与心态，勇敢参与社区活动，共同推动开源社区的繁荣发展。</p><p style="text-align:center"><img height="683" src="https://oscimg.oschina.net/oscnet/up-cbb21d8467cf3f73da16231cabd999dbe48.png" width="913" referrerpolicy="no-referrer"></p><h1>小彩蛋</h1><p>WHLUG 自 1997 年创建以来，一直专注开源技术讨论和分享，我们致力于为武汉的 Linux 爱好者创建一个不受外界干扰的讨论氛围，让每一个技术爱好者回归技术本质。</p><p>我们诚挚地欢迎<strong>武汉地区的学生/开源爱好者</strong>加入，共同参与到 WHLUG 活动的策划和组织中，同时，热忱欢迎<strong>各高校社团</strong>与我们携手，为构建武汉最纯粹的 Linux 技术圈和推动本地开源发展贡献力量。</p><p>若您对参与活动共建感兴趣，<strong>请点击<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwj.qq.com%2Fs2%2F13816139%2F8b53%2F" target="_blank">「此处」</a>或扫码填写报名表</strong>，我们的工作人员将会与您取得联系，期待与您一同开启这段激动人心的开源之旅！</p><p style="text-align:center"><img height="280" src="https://oscimg.oschina.net/oscnet/up-c7b73e05cc3a7a94a2d131d1c0fea354f78.png" width="290" referrerpolicy="no-referrer"></p><div><div><p><strong>什么是 WHLUG：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwelcome-to-whlug%2F" target="_blank">武汉 LUG – 深度科技社区</a></strong></p><p><strong>了解 deepin：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin - 基于 Linux 的开源国产操作系</a></strong></p></div></div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 07:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272782</guid>
            <link>https://www.oschina.net/news/272782</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[WAVE SUMMIT 迎来第十届，文心一言将有最新披露！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>1</span></span><span><span>0</span></span><span><span>句话 2 分钟，挑战成功说服宿管阿姨开门，这个人群中的「显眼包」是一个接入文心大模型 4</span></span><span><span>.0</span></span><span><span>游戏里的 NPC，妥妥 「工具人」实锤～</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>尝试用</span></span><span><span>AI</span></span><span><span>一键自动识别好坏咖啡豆，看一眼便知好坏，真正「颜值即正义」，让咖啡星人狂喜～</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>借助 AI 在</span></span><span><span>任何平面上模拟</span></span><span><span>的</span></span><span><span>钢琴，</span></span><span><span>即兴「弹奏」世界名曲，开一场科技感满满的专属演奏会～</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>在虚拟世界</span></span><span><span>的</span></span><span><span>神奇办公室，输入你的创业方向，智慧打工人们将为你的项目勤劳奔走，并在过程中，把日报</span></span><span><span>、</span></span><span><span>周报写好，让你随时掌握项目进度和最终成果</span></span><span><span>……</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="280" src="https://static.oschina.net/uploads/space/2023/1226/134838_ASJC_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>这些听起来新奇而有趣的 A</span></span><span><span>I</span></span><span><span>应用，都将在两天后举行的 W</span></span><span><span>AVE SUMMIT+深度学习开发者大会 2023</span></span><span><span>开发者市集亮相。</span></span><span><span>作为业界影响力最大的深度学习与大模型开发者大会，WAVE SUMMIT+ 2023</span></span><span><span>定于</span></span><span><span>12 月 28 日</span></span><span><span>在</span></span><span><span>北京开启</span></span><span><span>。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="285" src="https://static.oschina.net/uploads/space/2023/1226/134858_tJnB_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>现场大咖云集，</span></span><span><span>百度首席技术官</span></span><span><span>、</span></span><span><span>深度学习技术及应用国家工程研究中心主任王海峰</span></span><span><span>及数百位</span></span><span><span>产业大咖、知名学者、技术大牛、顶尖开源项目发起人等重磅嘉宾，从大模型技术、开源开放、产业护航、软硬一体等议题出发，</span></span><span><span>为开发者奉上大模型时代低门槛开发和创建应用的硬核干货。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>倒计时 2 天，大会的五大亮点带大家抢鲜看。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>亮点一：趋势引领，「扛把子」文心一言将曝新进展</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>今年 1</span></span><span><span>0</span></span><span><span>月 1</span></span><span><span>7</span></span><span><span>日，迄今为止综合实力最强的文心大模型 4</span></span><span><span>.0</span></span><span><span>重磅面世，</span></span><span><span>理解、生成、逻辑、记忆</span></span><span><span>四大能力得到</span></span><span><span>显著提升，大语言模型</span></span><span><span>正在</span></span><span><span>为通用人工智能带来曙光。</span></span><span><span>截至 1</span></span><span><span>1</span></span><span><span>月初，文心一言用户数达到 7</span></span><span><span>000</span></span><span><span>万，场景达</span></span><span><span>4300</span></span><span><span>个。这</span></span><span><span>得益于飞桨与文心的协同优化，</span></span><span><span>文心大模型 4</span></span><span><span>.0</span></span><span><span>的</span></span><span><span>模型周均训练有效率超过 98%，</span></span><span><span>相比于 3 月份，</span></span><span><span>训练算法效率提升</span></span><span><span>至</span></span><span><span>3.6 倍</span></span><span><span>，推理性能提升至 5</span></span><span><span>0</span></span><span><span>倍。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>本次大会，文心一言以及飞桨将披露技术和生态层面的最新进展，更关乎千万开发者的切身使用体验和权益～第十届</span></span><span><span>WAVE SUMMIT</span></span><span><span>，值得期待。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>亮点二：干货十足，硬核低门槛开发秘籍大放送</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>当今，技术圈万众瞩目的</span></span><span><span>A</span></span><span><span>gent 到底是何方神圣，应该怎么打造</span></span><span><span>A</span></span><span><span>gent？</span></span><span><span>大模型与开发工具链相结合，为开发提效提供了哪些</span></span><span><span>新</span></span><span><span>可能？</span></span><span><span>硬件-框架-模型到底怎样协同优化发挥最大效能？开发者们的「趁手利器」</span></span><span><span>C</span></span><span><span>omate 还能怎么用？你想了解的各类技术干货，前沿的科技圈热点，来</span></span><span><span>WAVE SUMMIT+2023</span></span><span><span>，不容错过！</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span>亮点三：蓄势待发，大模型赋能产业正当时</span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>大会主论坛之后，聚焦前沿、产业、硬件、开发应用等主题的五大平行论坛同步举行，将</span></span><span><span>大模型前沿技术分享与产业落地的</span></span><span><span>心法一一奉上。</span></span><span><span>科学启智</span></span><span><span>、</span></span><span><span>AI 赋能</span></span><span><span>，</span></span><span><span>AI for Science 塑造多学科研究新范式</span></span><span><span>，跨界融合创新展现</span></span><span><span>巨大应用潜能</span></span><span><span>；大模型产业应用中的标杆先行者放大招：华晨宝马将带来企</span></span><span><span>业级大模型 Agent 服务平台</span></span><span><span>、东方电科新能源功率准确性提升实现能效优化……</span></span><span><span>主流硬件厂商悉数亮相：NVIDIA、Intel、中科曙光、升腾、燧原科技、太初</span></span><span><span>……</span></span><span><span>飞桨硬件生态朋友圈再扩大，生态势能贯通产业链。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span><strong>亮点四：群星闪耀，AI 产业生态星河万里</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>开源开放、众行致远</span></span><span><span>。为</span></span><span><span>持续引导探索产业 AI 关键场景，大会</span></span><span><span>还从</span></span><span><span>开源开放、产业创新等多个维度</span></span><span><span>，</span></span><span><span>评选出 「星河产业应用创新奖」，「文心 x 飞桨最具影响力开发者」</span></span><span><span>等大奖</span></span><span><span>，</span></span><span><span>并将于大会</span></span><span><span>现场颁奖，激发开源创新活力，</span></span><span><span>赋能产业繁荣生态，</span></span><span><span>助推产业智能化</span></span><span><span>。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>W</span></span><span><span>AVE</span></span>&nbsp;<span><span>SUMMIT</span></span><span><span>&nbsp;五年十届，这也是中</span></span><span><span>国 AI 技术生态繁荣与崛起的关键时期。</span></span><span><span>开发者作为中坚力量，为智能世界贡献出自己的智慧；飞桨星河社区以开源开放的姿态，汇聚了开发者们最聪明的大脑。大会将设有开发者相关环节，让大家看到群像背后的一个个故事，感受一点点星光、见证科技让世界更有温度。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><strong><span><span>亮点五：</span></span></strong><strong><span><span><strong>应用繁荣，创意市集与</strong></span></span></strong><strong><span><span><strong>AI</strong></span></span></strong><strong><span><span><strong>原生</strong></span></span></strong><strong><span><span><strong>W</strong></span></span></strong><strong><span><span><strong>orkshop 尽显极客范</strong></span></span></strong></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>这次</span></span><span><span>WAVE SUMMIT+ 2023 为开发者专设多个体验互动环节，</span></span><span><span>前面</span></span><span><span>提到的开发者市集就是其中之一</span></span><span><span>。本次开发者市集上，几十款开发者打造的</span></span><span><span>AI</span></span><span><span>互动小应用，带你沉浸式感受技术的魅力，现场还有开发者亲自讲解、示范，零距离接触那些开发者大神。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><img height="265" src="https://static.oschina.net/uploads/space/2023/1226/134921_vHME_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>此外，大会还为开发者们精心准备了三场</span></span><span><span>Workshop</span></span><span><span>，</span></span><span><span>现场</span></span><span><span>手把手教你</span></span><span><span>打造自己的 AI</span></span><span><span>原生</span></span><span><span>应用</span></span><span><span>。星河探索，智能应用，志在推进高质量、高可用的</span></span><span><span>AI</span></span><span><span>原生应用落地的最后一公里，</span></span><span><span>现场</span></span><span><span>将带来星河社区</span></span><span><span>ERNIE Bot</span></span>&nbsp;<span><span>SDK</span></span><span><span>的能力讲解与实战，帮你解锁文心一言无限可能，还有更多</span></span><span><span>AI</span></span><span><span>原生应用落地和开发实战，</span></span><span><span>玩转原生应用</span></span><span><span>，感受 AI 原生应用魅力。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>在经历过下午一系列酣畅的技术烧脑与极客碰撞后，晚上，开发者们可以到「</span></span><span><span>AI 开发者之夜</span></span><span><span>」好好放松一下，在这不仅可以挑战</span></span><span><span>AI 原生小游戏</span></span><span><span>，观看精彩表演，也能「以 AI 会友」，共同奔赴 AI 时代的「诗与远方」。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>随着大模型的爆发，人工智能</span></span><span><span>的风已经吹到</span></span><span><span>社会的</span></span><span><span>各个</span></span><span><span>角落。</span></span><span><span>W</span></span><span><span>AVE SUMMIT+ 2023</span></span><span><span>这场 AI 开发者的「嘉年华」，让每位参会者深入探索基于大模型的 AI 应用，了解技术发展前沿信息和应用风向，在新时代新机遇来临之际，抓住先机，创造更多可能。</span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 05:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/272772</guid>
            <link>https://www.oschina.net/news/272772</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Kuasar 成为 CNCF 官方项目，探索容器运行时新纪元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F418445%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">Kuasar 成为 CNCF 官方项目，探索容器运行时新纪元！</a>》，作者：云容器大未来。</p><p>北京时间 12 月 20 日，云原生计算基金会（CNCF）正式接纳多沙箱容器运行时项目<span>&nbsp;</span><strong>Kuasar</strong>（https://github.com/kuasar-io/kuasar）。Kuasar 的加入，极大地推动了云原生领域容器运行时技术的探索、创新和发展。</p><p><img alt="11.png" src="https://bbs-img.huaweicloud.com/blogs/img/20231222/1703228593906841756.png" referrerpolicy="no-referrer"></p><p>作为 CNCF 首个多沙箱容器运行时项目，Kuasar 于 2023 年 4 月在 KubeCon + CloudNativeCon Europe 上由华为云、中国农业银行以及 openEuler 社区、WasmEdge 社区和 Quark Containers 社区联合发起。Kuasar 融入了各企业和社区在容器运行时领域的前沿探索、技术积累和生产实践，开源至今受到业界的广泛关注和支持，已收获 900 多个 GitHub Star 和 70 多个 Fork，数十位来自外部企业、高校的开源爱好者参与开发贡献和积极落地应用，Kuasar 正以开源创新的姿态促进云原生产业发展。</p><div><div><div><div><div><p><strong>「WebAssembly 正在快速成为云原生技术栈的一个关键部分，Kuasar 深度集成了高性能、轻量级的 WasmEdge 沙箱，Kuasar 的加入使得 WebAssembly 生态和 CNCF 生态联系更加紧密，未来 WasmEdge 和 Kuasar 将共同推动在大模型、边缘计算和函数计算等领域的发展。」</strong><strong>—— WasmEdge 项目创始人 Michael Yuan</strong></p></div></div></div></div></div><div><div><div><div><div><p><strong>「openEuler 社区在 Kuasar 项目发布之初就率先完成与 Kuasar 多沙箱生态的对接，推出基于 iSulad + Kuasar + StratoVirt 的极速轻量安全容器解决方案。未来 openEuler 社区将继续深化与 CNCF 社区项目的合作，为用户提供更轻量、更安全、更多样的容器化底座。」—— openEuler 技术委员会主席，胡欣蔚</strong></p></div></div></div></div></div><div><div><div><div><div><p><strong>「Kuasar 项目融入了华为云在容器运行时领域多年的积累，结合了社区合作伙伴的实践经验。成为 CNCF 官方项目，表明了 Kuasar 社区开放治理的决心，致力于为企业和开发者提供厂商中立、多方协作的开放环境，促进各种沙箱技术的商用成熟，为用户带来极致体验。」—— CNCF 官方大使，华为云云原生开源团队负责人，王泽锋</strong></p></div></div></div></div></div><div><div><div><div><div><p><strong>「云原生场景多样化促进了多种沙箱技术的蓬勃发展，沙箱技术接入北向生态成为普遍需求，Kuasar 推动了 Containerd 中沙箱技术标准的统一，提供了多种沙箱技术实现，为 CNCF 的容器运行时板块注入了新鲜活力。」—— CNCF 官方大使 Containerd 社区维护者，蔡威</strong></p></div></div></div></div></div><span id="OSC_h2_1"></span><h2>Kuasar 项目介绍</h2><p>为了满足企业在云原生场景下的诉求，业界出现了多种沙箱容器隔离技术。然而，应用云原生的沙箱技术仍面临挑战。一方面，各类云原生场景对沙箱提出更高要求，单一沙箱无法同时满足用户云上业务对安全隔离、极速低噪、标准通用等多个维度的要求，企业面临云原生业务场景全覆盖问题；另一方面，支持多类沙箱带来运维压力显著上升，当前业界沙箱技术对接容器运行时的实现缺乏统一开发框架，因此关键日志、重要事件、沙箱管理逻辑等均存在差异，新引入沙箱的同时运维压力陡增。</p><p>Kuasar 在保留传统容器运行时功能的基础上，与 Containerd 社区一起推动新的沙箱接口统一标准，并通过全面 Rust 化以及优化管理模型框架等手段，进一步降低管理开销，简化调用链路，灵活扩展对业界主流沙箱技术的支持。此外，通过支持多安全沙箱共节点部署，Kuasar 可以充分利用节点资源、降本增效，为用户提供更安全高效的沙箱场景解决方案。</p><p><img alt="12.png" src="https://bbs-img.huaweicloud.com/blogs/img/20231222/1703228609750179875.png" referrerpolicy="no-referrer"></p><p>▲ Kuasar 项目全景图</p><p>南向沙箱方面，Kuasar 已支持基于轻量级虚拟化技术的安全容器沙箱（Cloud Hypervisor、Qemu、StratoVirt），基于新兴的 WebAssembly 沙箱（WasmEdge、Wasmtime），基于进程级虚拟化的 App Kernel 沙箱（Quark）以及基于内核的原生普通容器沙箱（runC）；北向引擎方面，Kuasar 已与 Containerd 联合构建最新的沙箱接口标准，并共同推动该标准在 Containerd v2.0 版本的完整实现。此外，轻量级容器引擎 iSulad 项目也已经完成与 Kuasar 项目的深度集成，支持在 openEuler 23.09 创新版本上一键部署。</p><span id="OSC_h2_2"></span><h2>未来可期</h2><p>此次 CNCF 正式将 Kuasar 接纳为官方项目，将极大促进 Kuasar 上下游社区生态构建及合作。Kuasar 将持续探索云原生容器运行时领域技术创新，在企业数字化、云原生转型过程中发挥作用，让基于 Kuasar 的多沙箱容器运行时方案融入更广泛的云原生技术生态。</p><p>作为 CNCF 亚洲唯一创始成员、白金会员，华为云在 CNCF 贡献量、Kubernetes 社区和 Istio 社区的代码贡献量持续多年稳居亚洲第一，已向 CNCF 贡献了业界首个云原生边缘计算项目 KubeEdge、首个云原生批量算力项目 Volcano、首个多云容器编排项目 Karmada 等多个重量级云原生开源项目，并持续开源 Kurator、Kappital、Kmesh 等创新项目，与全球云原生社区共同发展。</p><span id="OSC_h3_3"></span><h3>Kuasar 社区技术交流地址</h3><p>Kuasar 官网：https://kuasar.io</p><p>项目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkuasar-io%2Fkuasar" rel="nofollow" target="_blank">https://github.com/kuasar-io/kuasar</a></p><p>Twitter:<span>&nbsp;</span>https://twitter.com/Kuasar_io</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 03:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10412251</guid>
            <link>https://my.oschina.net/u/4526289/blog/10412251</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云原生周刊：Karmada 成为 CNCF 孵化项目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>开源项目推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Femberstack%2Fkubernetes-reflector" target="_blank">kubernetes-reflector</a></h3><p>Reflector 是一个 Kubernetes 的插件，旨在监视资源（secrets 和 configmaps）的变化，并将这些变化反映到同一命名空间或其他命名空间中的镜像资源中。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsubstratusai%2Flingo" target="_blank">Lingo</a></h3><p>Lingo 是适用于 K8s 的 OpenAI 兼容 LLM 代理和自动缩放器。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fflanksource%2Fcanary-checker" target="_blank">canary-checker</a></h3><p>canary-checker 是一个基于 Kubernetes 的本地平台，用于通过被动和主动（合成）机制监控应用程序和基础架构的健康状况。</p><h2>文章推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40elementtech.dev%2Fkubernetes-image-proxy-cache-from-minutes-to-milliseconds-fd14173e831f" target="_blank">Kubernetes Harbor 图像代理缓存 — 从几分钟到几毫秒</a></h3><p>这篇文章介绍了如何通过使用 Harbor 作为 Kubernetes 的代理缓存来提高容器镜像的拉取速度。文章首先解释了 Kubernetes 中容器镜像的拉取过程和现有的缓存机制的局限性，然后介绍了 Harbor 作为一个 CNCF 项目的作用，并详细说明了 Harbor 的 Pull Through Proxy Cache 机制。该机制可以在本地缓存中存储常用的镜像，当节点需要拉取镜像时，可以直接从本地缓存中获取，减少了网络延迟和带宽消耗。文章还介绍了如何在 Kubernetes 上安装和配置 Harbor，并提供了使用 Harbor 的示例命令。最后，文章介绍了如何通过使用 Harbor Cache Mutating Webhook 来自动让 Kubernetes 使用代理缓存。总体而言，这篇文章详细介绍了如何通过 Harbor 实现快速的镜像缓存，提高容器化环境中的部署效率。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40sushantkapare1717%2Fhelm-vs-kustomize-in-kubernetes-cc063bbb4b0e" target="_blank">Kubernetes 中的 Helm 与 Kustomize</a></h3><p>这篇文章比较了 Helm 和 Kustomize 这两个用于管理 Kubernetes 清单文件的工具。文章首先介绍了 Kubernetes 在现代 IT 基础架构中作为容器编排和管理的事实标准，并指出在规模化部署应用程序时，管理复杂配置和清单文件变得至关重要。然后详细介绍了 Helm 和 Kustomize 这两个工具的特点和优势。Helm 是一个用于简化应用程序部署和管理的 Kubernetes 包管理器，具有模板化、可重用性、版本管理和社区支持等优点。Kustomize 是另一个用于自定义 Kubernetes 清单文件的工具，采用"patch"的方法，支持声明性修改现有清单文件和配置覆盖。文章还提供了使用 Helm 和 Kustomize 的示例，并对它们进行了比较，包括模板化与补丁应用、灵活性和学习曲线等方面。最后，文章强调了根据具体需求和偏好选择适合的工具的重要性，并鼓励读者保持对最新工具和最佳实践的了解，以提高部署效率。</p><h2>云原生动态</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthenewstack.io%2Fkarmada-finally-brings-multicloud-control-to-kubernetes%2F" target="_blank">Karmada 成为 CNCF 孵化项目</a></h3><p>日前，云原生计算基金会的技术监督委员会 (TOC) 投票决定接受 Karmada 作为 CNCF 孵化项目。</p><p>Karmada 通过一组 Kubernetes 原生 API 和高级调度功能，提供了一种跨不同云提供商运行 Kubernetes 集群的方法。它不需要对应用程序本身进行任何更改。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2023%2F12%2F12%2Fdocker-buys-atomicjar-to-integrate-container-based-test-automation%2F" target="_blank">Docker 购买 AtomicJar 以集成基于容器的测试自动化</a></h3><p>Docker 购买了 AtomicJar 及其 Testcontainer 项目，为 Docker 提供了更好的测试方案，但引发了对未来许可成本和对其他容器运行时支持的担忧。</p><p>Docker 首席执行官 Scott Johnston 表示，添加 TestContainers 使 Docker 的开发人员工作流程更加完整，为涵盖构建、验证、运行、调试和共享的现有功能添加了测试。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F12%2F21%2Fciliums-2023-annual-report%2F" target="_blank">Cilium 2023 年年度报告</a></h3><p>2023 年对于 Cilium 来说是一个重要的里程碑，被称为 Cilium 毕业年。今年，我们看到 Cilium 生态系统在贡献和采用方面都取得了显着增长。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fcilium%2Fcilium.io%2Fblob%2Fmain%2FAnnual-Reports%2FCilium%2520Annual%2520Report%25202023.pdf" target="_blank">2023 年 Cilium 年度报告</a>旨在强调这些进步，重点关注 Cilium 贡献者和最终用户社区的增长和活动。</p><p>该报告通过项目里程碑和承诺等数字数据以及社区领导者、最终用户和贡献者的个人见解，全面介绍了社区的健康状况。它深入探讨了几个关键领域：Cilium 毕业进度、贡献者增长、主要发布亮点、2023 年 Cilium 用户调查的反馈、Cilium 在生产环境中的使用情况、社区参与和报价、社区活动以及 2024 年项目方向。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 26 Dec 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10398476</guid>
            <link>https://my.oschina.net/u/4197945/blog/10398476</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
