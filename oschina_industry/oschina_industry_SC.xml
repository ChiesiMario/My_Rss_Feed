<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 Nov 2023 04:36:07 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[eBPF 的发展演进 --- 从石器时代到成为神（一）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h2_1"></span><h2><span><span>1. 前言</span></span></h2><div><div><span><span>技术的发展往往是积跬步而至千里的。Linux 从 92 年诞生，发展至今已经覆盖大小各类的信息基础设施。是什么样的力量，让 Linux 能够始终保持发展活力，又如何看待 Linux 之上出现的新的技术趋势？</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>本文试图通过梳理 eBPF 的演进过程，探索 Linux 内核的发展动力来源与发展轨迹，与大家一同畅想 eBPF 给内核技术、Linux 生态带来的全新变局。</span></span></div><div>
   &nbsp; 
 </div></div><span id="OSC_h2_2"></span><h2><span><span>2. eBPF 概览</span></span></h2><div><span><span>2.1. </span></span><strong><span>实现原理</span></strong></div><div>
  &nbsp; 
</div><div><div><span><span>大家可能都知道图灵机，这是一个可计算理论模型，可以用来判断计算机的计算能力。图灵机是目前有可能实现的计算能力最强的理论模型，目前我们常用的计算机，理论上都是等价于图灵机的。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出现，是对计算能力的渴求，其原理就是通过 IR 模拟一台 RISC 指令集的计算机嵌入到内核中，将内核内部的静态编译逻辑转变为更加灵活的动态编译逻辑，使内核获得近似于图灵机的动态逻辑定制能力。而从 classic BPF 到 extended BPF 的发展，是将这一计算方式进一步夯实和通用化。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出现乃至到 eBPF 的进一步发展，为内核带来了巨大的改变，使内核具备了更加强大、可编程的动态变化的能力。这种能力在各种需要定制化的应用场景中，将发挥巨大的价值，既可以用于扩展功能，也可以用于优化性能。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在实现上，为适应不同业务场景的需求，使 eBPF 具备等价于一台 RISC 指令集计算机的计算能力，通过输入参数、Map 数据存储、Helper 帮助函数，构成了 eBPF 程序与内核交互的运行环境。eBPF 指令集的计算和控制能力、运行环境与内核的交互能力，两者叠加构成了 eBPF 程序强大的处理能力。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在安全方面，通过 Verifier 严格检查 eBPF 程序的可完成性、数据访问的合法性等，保证了 eBPF 程序与内核交互过程中内核不被挂起、核心数据不会被破坏。</span></span></div></div><div><div><span><span>BPF 发展过程中，由 cBPF 发展成为 eBPF 是一次大的技术升级。eBPF 在 cBPF 的基础上重新设计了指令集、引入了 JIT、增加了辅助函数，大大扩展了复杂逻辑的设计能力。虽然 eBPF 有巨大的进步，但是基本的底层设计还是一致的，因此两者统称为 BPF。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>由于 eBPF 兼容 cBPF，在未指定时，BPF 更多指 eBPF 所定义的内涵。后文用 BPF 泛指整个 BPF 相关的基础机制，eBPF 特指最新的 BPF 标准。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.2. </span></span><strong><span>技术特点</span></strong></div><div><div><span><span>BPF 还在快速发展，它的计算能力和完备性也在迅速提高，前景无限。但就具体的版本而言，却又呈现具体技术特点，主要是其支持的能力和受到的约束两个方面。以最新的 BPF 的技术标准 (v6.1) 为蓝本，介绍 BPF 的主要技术特点。</span></span></div><div>
   &nbsp; 
 </div></div><ul><li><div><span><span>RISC 指令集</span></span></div></li></ul><div><div><span><span>BPF 的核心是一个虚拟计算机，它采用类 RISC 指令集，支持跳转、算数运算、尾调用等基本操作。在运行 BPF 程序的计算机上，BPF 指令会被内核的 JIT 编译器动态编译为物理机原生指令，实现运行效率的「零」损耗。在支持 BPF 卸载的设备上，BPF 程序也可以卸载到设备上执行。在 BPF 的指令集中还支持伪调用指令，可以调用到内核帮助函数。</span></span></div></div><div><div><span><span>同时，BPF 的指令的编码空间中还有大量的储备，未来根据需要一定还会继续增加指令，提升 BPF 实现复杂逻辑的能力。</span></span></div></div><ul><li><div><span><span>Map</span></span></div></li></ul><div><div><span><span>基于键值对的数据存储机制，可用于实现内核、用户态的数据存储和交换。</span></span></div></div><ul><li><div><span><span>Helper 函数</span></span></div></li></ul><div><div><span><span>专用于 BPF 程序调用的函数接口，用于封装内核中的功能，使 BPF 程序可以和内核互操作，同时保持 BPF 程序和内核的安全隔离。</span></span></div></div><ul><li><div><span><span>BPF 子程序</span></span></div></li></ul><div><div><span><span>实现了 BPF 程序之间的调用。</span></span></div></div><ul><li><div><span><span>上下文</span></span></div></li></ul><div><div><span><span>BPF 程序的语境和运行上下文，是一种内部透明的数据结构。只有在明确 BPF 程序的类型时，上下文的定义和内部数据结构才是确定的。不同的 BPF 程序类型，上下文也各不相同。</span></span></div></div><ul><li><div><span><span>CO-RE</span></span></div></li></ul><div><div><span><span>通过运行时类型支持，实现一次编译、随处运行。</span></span></div></div><ul><li><div><span><span>支持特权和非特权级两类运行模式</span></span></div></li></ul><div><div><span><span>分为特权级（百万 ins）和非特权级（4096ins）两类运行方式。</span></span></div></div><div><div><span><span>特权级模式下 BPF 程序可以获得更宽的权限，实现更复杂的逻辑功能。</span></span></div></div><ul><li><div><span><span>保证向后兼容</span></span></div></li></ul><div><div><span><span>这一原则对于 BPF 的推广应用非常重要，可以保证旧标准的 BPF 程序在新标准下也可以正确执行。但同时，也对未来 BPF 发展带来了约束，只有把握好 BPF 的发展方向，做好底层设计，才能两者得到兼顾。</span></span></div></div><div><div><span><span>比如，从老版本遗留下来的 cBPF 程序在 eBPF 中都会被 JIT 正确翻译和执行。</span></span></div></div><ul><li><div><span><span>稳定的 ABI</span></span></div></li></ul><div><div><span><span>BPF 稳定的 ABI 包括，BPF 程序类型对应的输入参数定义，可调用的内核帮助函数定义，返回值定义等。使用稳定的 ABI 的 BPF 程序，可保证与不同版本的内核都是兼容的。</span></span></div></div><div><div><span><span>另外，BPF 还在快速发展中，它的功能特性需要逐步释放，因此目前还有诸多限制，其中有些是基于安全、可靠性考虑，有些是没有超出范围的应用需求的保守设计等等。随着安全机制的完善、应用程序的扩展、生态体系的成熟，相应的限制也会逐步的改变。</span></span></div></div><div><div><span><span>目前的实现中，有如下限制：</span></span></div></div><ul><li><div><span><span>总运行时间有界</span></span></div></li></ul><div><div><span><span>有界性这是基本原则，应该在比较长的时间内都不会改变。但是，在不改变有界性的前提下，根据具体需要适当调整更合理的上限，这是存在极大可能的。</span></span></div></div><ul><li><div><span><span>指令总数限制</span></span></div></li></ul><div><div><span><span>非特权用户最大指令数 4096，特权用户最大指令数 1 百万。</span></span></div></div><ul><li><div><span><span>分支数限制</span></span></div></li><li><div><span><span>BPF 调用嵌套层次限制</span></span></div></li><li><div><span><span>Map 实例数限制</span></span></div></li><li><div><span><span>验证状态数限制</span></span></div></li><li><div><span><span>最大分支数限制</span></span></div></li><li><div><span><span>堆栈长度限制</span></span></div></li></ul><div><div><span><span>目前支持的堆栈最大长度为 512 字节。</span></span></div></div><ul><li><div><span><span>上下文限制</span></span></div></li></ul><div><div><span><span>每一种类型的 BPF 程序，都有其对应输入参数定义，彼此不同。也就是说，BPF 程序只能接受特定的输入并进行处理，不能访问内核的全部状态空间。</span></span></div></div><ul><li><div><span><span>辅助函数限制</span></span></div></li></ul><div><div><span><span>每一个 BPF 程序类，都有其对应的辅助函数集合。这些辅助函数，由内核各子系统提供，是 BPF 程序类上下文的一部分。它们帮助 BPF 程序与内核各子系统交互，同时又保护内核不会被破坏。</span></span></div></div><div><div><span><span>上面赘述了很多特性，大家可能会有很多疑问，比如：</span></span></div></div><div><div><span><span>为什么采用精简指令集呢？因为这是目前最主流的指令集类型，相对于复杂指令集，精简指令集更有利于实现更高密度、更高吞吐量、更高主频的处理器。因此 x86 之后出现的新型指令集系统，绝大多数都是精简指令集，包括现在的开源指令集 RISC-V。</span></span></div></div><div><div><span><span>为什么不采用原生的指令集呢？</span></span></div></div><div><div><span><span>为什么 5 个参数寄存器呢？</span></span></div></div><div><div><span><span>本篇暂不深入讨论，后续主题涉及到的时候再详细讲解。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.3. </span></span><strong><span>应用价值</span></strong></div><div><div><span><span>BPF 的应用价值与其动态和可定制特性强相关。</span></span></div></div><div><div><span><span>内核研发中一直坚守的原则是：「机制与策略分离」，即：内核负责提供机制，将策略开放给上层。在机制与策略之间需要一层界面来进行交互。</span></span></div></div><div><div><span><span>系统调用是最初方案。它是单向发起的，缺少事件模型。</span></span></div></div><div><div><span><span>虚拟文件系统，提供了双向的交互方式，但难以灵活定制复杂的逻辑。</span></span></div></div><div><div><span><span>由于软件功能越来越复杂，无法用简单规则来表达，软件的基础功能设施与业务逻辑，需要进行解偶。而业务逻辑部分，需要根据业务定制，因此很适合用 BPF 实现。比如：</span></span></div></div><ul><li><div><span><span>过滤器</span></span></div></li><li><div><span><span>权限检查</span></span></div></li><li><div><span><span>模糊测试</span></span></div></li></ul><div><div><span><span>等类型的功能，比较适合用 BPF 实现。另外，视具体问题，也可以应用于：</span></span></div></div><ul><li><div><span><span>调度算法</span></span></div></li><li><div><span><span>用户态交互（替代系统调用，实现更加可变的服务逻辑）</span></span></div></li><li><div><span><span>加载器、模拟器、兼容层</span></span></div></li><li><div><span><span>轻量化内核</span></span></div></li><li><div><span><span>多态内核</span></span></div></li><li><div><span><span>启动方式</span></span></div></li></ul><div><div><span><span>每一种业务类型都有其独具特征的逻辑模型，通过更形式化地定义这些业务模型，可以更好地理解它们和 BPF 的结合性，找到更好的实现方案，充分发挥 BPF 带来的强大能力。后续篇章，我们会对典型的应用模型进行更深入的讨论，以及 BPF 在这些应用场景中，应该在哪些特性方面进行加强或改进。</span></span></div></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 04:28:04 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4450925/blog/8685883</guid>
            <link>https://my.oschina.net/u/4450925/blog/8685883</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.1 - 数据脱敏支持语义类型和脱敏算法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>数据脱敏支持自定义脱敏算法和语义类型。 <img src="https://oscimg.oschina.net/oscnet/up-1585b72201b92b51627496f6baf9671402c.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🔔 重大变更</h2><ul><li>用户页面的 URL 由 <code>/u/{uid}</code> 变更为 <code>/users/{email}</code>。</li><li>工作空间的所有者和开发者分别更名为：管理员和成员。 <img src="https://oscimg.oschina.net/oscnet/up-82d69e61f7501b0b1e11ac2bbd6e2f231e4.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🎄 改进</h2><ul><li><p>SQL 编辑器支持显示表的 DDL 语句（MySQL, PostgreSQL 和 TiDB）。 <img src="https://oscimg.oschina.net/oscnet/up-d913361c2eae9e174893e134b791ad8493b.png" alt="file" referrerpolicy="no-referrer"></p></li><li><p>提升了启用数据脱敏时的查询速度。</p></li><li><p>支持在工单<strong>待发布</strong>或<strong>审批通过</strong>的时候发送 webhook 通知。</p></li><li><p>改进了 Oracle Parser 用以支持存储过程和分区表。</p></li><li><p>优化了工单过滤功能。</p></li><li><p>优化了工单指派人功能。</p></li><li><p>优化了 Schema 编辑器的性能。</p></li></ul><p>📕 安装及升级，参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升级指南</a>。如果从之前版本升级，获取新版本后，重新启动升级即可。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:41:20 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10150991</guid>
            <link>https://my.oschina.net/u/6148470/blog/10150991</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌员工离职后抨击大老板，曾深度参与 Flutter 项目、制定 HTML 相关标准]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>伊恩·希克森 (Ian Hickson) 是在谷歌工作了 18 年的老员工，他于 2005 年 10 月加入谷歌，18 年后递交了辞职信。上周是他在谷歌的最后一周。</p><p>离职后，希克森在个人博客发表了一封措辞严厉的批评信，虽然标题为<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fln.hixie.ch%2F%3Fstart%3D1700627373" target="_blank">《回顾在 Google 的 18 年》</a></em></u>，但内容主要是抨击谷歌「腐化的文化」，并指责首席执行官桑达尔·皮查伊 (Sundar Pichai) 「缺乏远见」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1124/111037_IJjJ_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fln.hixie.ch%2F%3Fstart%3D1700627373" target="_blank">https://ln.hixie.ch/?start=1700627373</a></u></em></p><p>希克森表示，他「非常幸运地」经历了公司的早期成长历程，那时的高管对员工坦诚，鼓励他们去做雄心勃勃的实验，但如今这家搜索巨头的文化已经「腐化」。</p><p>希克森在谷歌的职业生涯可以分为两部分，在头九年里，他致力于 HTML 和相关标准的研究，任务是打造最好的 Web——因为任何对 Web 有利的事情都会对谷歌有利；在最后九年里<strong>，他一直致力于打造跨平台应用程序开发框架 Flutter</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a03893271e334eda0f60bd821d7ca0fd33c.png" referrerpolicy="no-referrer"></p><p>希克森写道，Flutter 是「老谷歌人」最后推出的项目之一，属于 Larry Page 在 Alphabet 创建前不久发起的一系列雄心勃勃的实验的一部分。Flutter 团队基本上也像一家初创公司一样运作，而且在很大程度上是建立在年轻的谷歌文化基础上。例如<strong>优先考虑内部透明度、工作/生活平衡和数据驱动决策</strong>。所以整个团队从一开始就非常开放，这使得他们能够积极构建一个健康的开源项目。</p><p>与此同时，谷歌的高速发展让其公司文化受到了侵蚀。</p><p>希克森表示：「透明度消失了。以前我会迫不及待地参加每一次公司全体会议，以便了解情况。现在，我发现自己甚至能够预测高管们所给出的每一个答案。今天，我不知道在谷歌还有谁能解释它的愿景，员工士气也空前低落。如果你和湾区的治疗师交谈，他们会告诉你，他们所有的谷歌客户都对谷歌感到不满意。」</p><p>对于今年 1 月份的<u><a href="https://www.oschina.net/news/226273/google-open-source">「大裁员」</a></u>，希克森称这是公司非常短视的决策——目的只是为了确保股价保持季度增长，而不是遵循谷歌以前的战略，即优先考虑长期成功，即使这会导致短期损失。</p><p>而且自那以来，谷歌一直在进行规模更小、更低调的裁员，以至于员工们现在都在一份内部文件中追踪裁员情况。</p><p>希克森说，这些裁员对公司文化产生了「潜在」影响，可能导致员工「大幅减少冒险行为」。他写道：「我现在在谷歌看到了很多负面现象，比如员工对管理层缺乏信任，而管理层也不再信任员工，公司制定的政策也越来越显得空洞。」</p><p>此前曾有媒体报道称，谷歌的普通员工和管理层之间关系紧张。比如，谷歌要求高管为员工表现进行绩效打分。</p><p>希克森建议，应该努力将权力从首席财务官办公室转移到这样一个人手中——他应该对如何利用谷歌广泛的资源为用户创造价值有清晰长期的愿景。</p><p>至于谷歌的文化是否可以挽救，希克森认为可以，但他称「时间紧迫」。他写道：「谷歌文化的腐化最终将变得不可逆转，因为它需要充当道德指南针的那种人，而这类人在没有道德指南针的情况下不会愿意加入谷歌。」</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:39:20 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267932</guid>
            <link>https://www.oschina.net/news/267932</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[vivo 称从 2024 年 1 月 4 日起，逐步开始清理未备案 App]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>vivo 开发者的微信公众号发布了<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7kYh9q5df1au7qWhaYCL8g" target="_blank">《关于尽快履行 App 备案手续通知及指引》</a></u>通知，要求开发者尽快完成移动应用程序（App）备案工作。</p><p><img src="https://static.oschina.net/uploads/space/2023/1124/105449_8NrG_2720166.png" referrerpolicy="no-referrer"></p><p>vivo 在公告写道，<span style="background-color:#ffffff; color:#424242">2023 年 12 月 5 日起，未备案 App 在应用商店及手机安装器上显示「未备案」。</span><strong>2024 年 1 月 4 日起，逐步开始清理未备案 App。</strong></p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/question/2720166_2329768">工信部要求 APP 备案</a></li><li><a href="https://www.oschina.net/news/253058">工信部：不得为未备案 App 提供网络接入服务</a></li><li><a href="https://www.oschina.net/news/260160">苹果中国 App Store 将不允许未备案应用上架</a></li><li><a href="https://www.oschina.net/question/2720166_2329781">关于开展微信小程序备案的通知</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267923</guid>
            <link>https://www.oschina.net/news/267923</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin V23 成功适配国产显卡摩尔线程 MTT S80]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">deepin <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-v23-adapts-mtt-s80%2F" target="_blank">宣布</a>，在社区爱好者以及 deepin 研发团队的推动下，完成了摩尔线程 MTT S80 显卡的适配工作，成功在 deepin V23 Beta2 版本上驱动 MTT S80 显卡。</span></p><p><span style="color:#000000">据悉，此次适配的摩尔线程 MTT S80 显卡，于 2022 年 11 月发布，搭载了完整的「春晓」芯片核心，内置 4096 个 MUSA 流处理核心、128 个 Tensor 张量核心，在 1.8GHz 的主频下，能够提供 14.4TFLOPS 的单精度浮点算力。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-24b90e4c555c3dce9d7c2bd8dcf255ff8c6.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">deepin 面向 MTT S80 的体验版镜像已经推出，可以下载试用。MTT S80 显卡驱动在 deepin V23 Beta2 操作系统上运行稳定，能够达到主流 Linux 平台显卡水平。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-bb6700d8bf04b78428d098b799746afe61d.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-21dfd2787d98251884cf766af12fa8cf84e.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-97a82a853f7689b89f6151579e93404022f.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">当前，该驱动程序已支持 Opengl 4.0 、Opengl ES 3.2 ，由于还是技术预览版本，仅支持 5.15 版本内核，部分用户态驱动还未合入主线。此外，还存在一些其他问题，有待后续更新解决。因此，官方警告在生产环境中请务必谨慎使用。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><strong>镜像下载地址：</strong></span></p><ul><li style="text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fci.deepin.com%2Frepo%2Fdeepin%2Fdeepin-community%2Fmoore-driver%2Fcdimage%2Fdeepin-23-Beta2-for-moore-s80-amd64.iso" target="_blank">https://ci.deepin.com/repo/deepin/deepin-community/moore-driver/cdimage/deepin-23-Beta2-for-moore-s80-amd64.iso</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267913</guid>
            <link>https://www.oschina.net/news/267913</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【直播预告】替代 Oracle，我们还有多长的路要走？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="text-align:center"><img height="450" src="https://oscimg.oschina.net/oscnet/up-7cd126308d5a4478deb0afffc710879fd62.png" width="2400" referrerpolicy="no-referrer"></p><p>早在十多年前，就有了 「去 IOE 」 的提议。2008 年，时任阿里巴巴首席架构师的王坚提议，减少外国供应商，并用内部开发的设备和技术取而代之。</p><p>所谓减少外国供应商，主要就是要摆脱 IOE 系统——服务器 IBM，数据库软件 Oracle，存储设备 EMC，三者构成了一个从软件到硬件的企业数据库系统，几乎占领了全球大部分商用数据库系统市场份额。</p><p>原本，「去 IOE 」 只是阿里为了节省成本的一场技术革新。IBM 小型机价格从几十万到高达百万级人民币，与 Oracle 签订的数据库软件费用达数千万，还要再加上一大笔软硬件支付和一大笔维护费，维持 IOE 的成本太过高昂。</p><p>在我国频频遭遇外国技术封锁之后，「去 IOE 」 成为了软件行业自主可控的正面战场之一。在信创的推波助澜之下，国产化替代更是势不可挡。Oracle 数据库作为 IOE 的核心系统，国产化替代的进程到底如何呢？</p><p>要知道，替代 Oracle 并不是一蹴而就的事情。Oracle 在数据库领域的地位是建立在多年的技术积累和市场认可之上的。替代 Oracle 需要考虑到企业的具体需求、现有系统的迁移成本以及新技术的可行性和稳定性。同时，替代 Oracle 也需要面对数据迁移、应用兼容性、安全性和性能等方面的挑战。</p><p>11 月 29 日 19:00，OSCHINA 直播——【开源漫谈】第 6 期，将深入地聊一聊：替代 Oracle，我们还有多长的路要走？</p><p><strong>直播主题：替代 Oracle，我们还有多长的路要走？</strong></p><p style="text-align:left"><strong>直播时间：</strong>11 月 29 日（周三） 19:00-21:00</p><p style="text-align:left"><strong>直播平台：</strong>「OSC 开源社区」 视频号</p><p><strong>主办方：</strong>开源中国</p><p><strong>直播嘉宾：</strong></p><p><strong>马继超，瀚高售前总监</strong></p><p>现任浪潮集团瀚高基础软件股份有限公司售前总监，拥有近十年数据库技术经验和卓越售前经验。曾参与多个大型项目的实施，专注于深入洞察客户需求，精心为客户打造数据库个性化解决方案，并提供卓越的数据库产品和服务。以其对客户业务的深刻理解，助力客户实现卓越的业务目标。</p><p><strong>吴疆，拓数派产品社区负责人</strong></p><p>深耕云计算行业和数据库行业十余年，热衷于数据库技术的云原生化（数据库与云计算技术的深度融合），致力于云原生虚拟数仓 PieCloudDB 的产品推广。加入拓数派（Openpie）之前，就职于 Pivotal（现 VMWare）任职大数据平台 Greenplum 资深产品经理，并曾在 EMC 和 IBM 担任主管工程师，参与过多个大数据和云计算相关项目。毕业于清华大学计算机系，先后获得本科和研究生学位。</p><p><strong>赵向前，万里数据库平台产品</strong></p><p>万里数据库产品，有多年运营商、银行、政企、电网行业的数据库管理经验，Oracle OCM、MySQL OCP、 PGCP，目前负责万里数据库相关产品的功能统筹建设，通过投产项目运行数据分析，致力改进完善产品用户体验。</p><p><strong>直播话题：</strong></p><ul><li><p>当前数据库国产化进程情况如何？</p></li><li><p>替代 Oracle 的难点在哪里？（技术角度和非技术角度都谈一谈）</p></li><li><p>有哪些能够替代 Oracle 的国产数据库？优势在哪？不足之处在于？</p></li><li><p>现有国产数据库跟 Oracle 相比，有多大的差距？</p></li><li><p>国产数据库未来要怎么走？</p></li></ul><p><img height="2416" src="https://oscimg.oschina.net/oscnet/up-6aa123abfaaa251c29aeaf1fc62fc04df2a.png" width="750" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>直播福利</strong></p><ul><li><p style="margin-left:0; margin-right:0">互动抽奖：在直播评论区提问，被直播嘉宾回复的用户可获 OSC T 恤 1 件，名额不限。</p></li><li><p style="margin-left:0; margin-right:0">福袋抽奖：直播中将有多轮抽奖，参与就有机会获得 OSC T 恤、笔记本、马克杯 、前沿技术书籍等。</p></li></ul><p style="margin-left:0; margin-right:0"><img height="338" src="https://oscimg.oschina.net/oscnet/up-189c7f6fa386b87c3dda724a66c35fca104.jpg" width="600" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">我们直播间见吧～</p><hr><p style="text-align:left"><strong>另外，本次直播得到了诸多社区或组织的大力支持，在此特别表示感谢：</strong></p><p style="text-align:left"><strong>IvorySQL 开源数据库社区</strong></p><p style="text-align:left">IvorySQL 是由浪潮集团瀚高股份主导研发的一款开源的兼容 Oracle 的 PostgreSQL，致力于为企业和开发者提供一个高性能、可扩展和安全的 Oracle 替代最佳解决方案。</p><p style="text-align:left">IvorySQL 社区以安全、兼容、易用为特色，以链接开发者为核心，背后由数十年的全球 PostgreSQL 开发经验的资深专家和开发爱好者组成。</p><p style="text-align:left">自发布以来，IvorySQL 紧跟 PG 国际社区，快速进行版本迭代，保持与最新版本 PostgreSQL 数据库内核同步，累计发布 10 个版本，并兼容丰富的 PG 周边工具和扩展。推出包括 Package、层级查询、全局唯一索引、各种兼容函数和类型等 Oracle 兼容功能近百个。</p><p>官网链接：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ivorysql.org%2Fzh-cn%2F" target="_blank">https://www.ivorysql.org/zh-cn/</a></u></span></p><p style="text-align:left">社区仓库：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FIvorySQL%2FIvorySQL" target="_blank">https://github.com/IvorySQL/IvorySQL</a></u></span></p><p>&nbsp;</p><p><strong>GreatSQL 社区 </strong></p><p style="text-align:left">GreatSQL 社区成立于 2021 年，由万里数据库发起，致力于通过开放的社区合作，构建国内自主开源数据库版本及开源数据库技术，推动中国开源数据库及应用生态繁荣发展。GreatSQL 是适用于金融级应用的国内自主开源数据库，具备高性能、高可靠、高易用性、高安全等多个核心特性，可以作为 MySQL 或 Percona Server 的可选替换，用于线上生产环境，且完全免费并兼容 MySQL 或 Percona Server。</p><p style="text-align:left">官网链接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2F">https://greatsql.cn/</a></span></p><p>Gitee 仓库：<span style="color:#245bdb"><a href="https://gitee.com/GreatSQL">https://gitee.com/GreatSQL</a></span></p><p>&nbsp;</p><p><strong>拓数派（OpenPie）</strong></p><p>拓数派（OpenPie）是国内基础数据计算领域的高科技创新企业，与云上数据库和数据计算领域的引领者，自成立以来专注于数据计算领域，旗下大模型数据计算系统（PieDataComputingSystem, 缩写：πDataCS），以云原生技术重构数据存储和计算，一份存储，多引擎数据计算，让 AI 模型更大更快，全面升级大数据系统至大模型时代。</p><p>πDataCS 首款计算引擎 PieCloudDB 云原生虚拟数仓实现了分析型数据数仓上云虚拟化，将物理数仓整合，根据数据授权动态创建虚拟数仓，按需灵活计算，打破数据孤岛，支撑更大模型所需的数据和计算。在 PieCloudDB，存储和计算各自作为两个独立变量，各自在云里弹性伸缩，解决基于 PC 的传统 MPP 的缺陷，不仅可实现瞬间扩缩容。还支持用户对云中数据同时开启多个集群进行数据计算，并能持续将所有数据在云中存储，为已有的应用和未来的应用真正实现数据共享。PieCloudDB 目前提供社区版（免费下载），云上云版（免费试用），企业版，与一体机版本。</p><p>官网链接：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.openpie.com" target="_blank">www.openpie.com</a></p><p>社区公众号：PieCloudDB 技术派</p><p>&nbsp;</p><p><strong>重庆软件园</strong></p><p>重庆软件园位于重庆经开区，占地 110 万平方米，布局四大组团，是重庆市首批软件产业园 (综合型)、A 区入选重庆市软件和信息服务业「满天星」示范楼宇 (首批)，于 2019 年 9 月 16 日正式开园，坚持「做生态=做产业，做人才=做产业，做服务=做产业」的发展理念，建设集科技、人文、生态、智慧为一体的领军型软件园区。聚焦「3+2」产业布局，实现新一代信息技术产业集群发展。园区聚集软件类企业近 2000 家，软件人才近 3 万人，已登记 4000 多项软件著作权，研发投入超 50 亿，40 余项专利将获得科技奖，营收上亿企业近 20 家。立足南岸区、重庆经开区优质产业资源，聚焦软件信息服务业、智能制造、绿色环保 、汽车软件汽车电子、大健康等产业，推动软件产业高质量发展，重庆软件园将全面贯彻落实「满天星」计划，力争到 2026 年成功建成中国软件名园。</p><p>园区官网：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.chongqingpark.com" target="_blank">www.chongqingpark.com</a></p><p>&nbsp;</p><p style="text-align:left"><strong>渠成开源社区</strong></p><p style="text-align:left">渠成开源社区由禅道项目管理软件团队发起，社区的经营主体为青岛渠成开源计算机网络技术研究中心，是非营利性社会服务活动的社会组织。 渠成开源社区主要面向一线开源软件生产者、贡献者、组织者、赞助商和用户，以解决具体实际问题为宗旨，旨在打造以开源软件为核心纽带的开源生态系统，真正做到让每一个优秀的开源软件都能实现商业化。</p><p style="text-align:left">官网：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.qucheng.cc">www.qucheng.cc</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>爱可生开源社区</strong></p><p style="text-align:left">爱可生开源社区，一个有深度的 MySQL 开源社区。社区成立于 2017 年，以开源高质量的运维工具、日常分享技术干货内容、数据库技术布道为己任；目前开源的产品有：SQL 审核工具 SQLE、分布式中间件 DBLE 和数据传输组件 DTLE。在这里，你将收获：高质量的技术内容，企业级数据库工具及服务，丰富的社区活动。</p><p style="text-align:left">链接： <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensource.actionsky.com%2F">https://opensource.actionsky.com/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>AllData</strong></p><p style="text-align:left">AllData 大数据产品是可定义数据中台，以数据平台为底座，以数据中台为桥梁，以机器学习平台，GPT 平台为框架，提供全链路数字化解决方案。</p><p style="text-align:left">项目地址：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falldatacenter%2Falldata">https://github.com/alldatacenter/alldata</a></span></p><p style="text-align:left">社区官网：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Falldata.readthedocs.io%2Fzh%2Fmaster%2F">https://alldata.readthedocs.io/zh/master/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>东方瑞通 </strong></p><p style="text-align:left">东方瑞通成立于 1998 年，是国内较早的 IT 高级技术培训企业之一，拥有华为、红帽、微软、PMI、VMware、Oracle 等 33 余家国际厂商授权资质，以培养 it 人才为主，目前覆盖领域：虚拟化、操作系统、网络、安全、数据库、IT 管理、软件开发等细分领域，提供线上，线下交流培训课程与活动。</p><p style="text-align:left">官网链接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.easthome.com" target="_blank">www.easthome.co</a></span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.easthome.com" target="_blank"><span style="color:#245bdb">m</span></a></p><p>&nbsp;</p><p style="text-align:left"><strong>秦派软件</strong></p><p style="text-align:left">北京秦派软件科技有限公司 (Pulsarware® Technologies Ltd.) 是一家致力于开发生产力工具软件的技术公司，成立之初立志要在工具软件领域深耕，践行精益求精的研发精神，努力推出优质的生产力工具软件服务国内外的开发者，提升开发者的工作效率，同时创造出商业价值和社会价值。</p><p style="text-align:left">ATOMDB™ 数据库管理客户端是秦派软件研发的一款服务广大开发者的工具软件。可以让开发者方便地执行查询，创建和管理数据库，支持管理市场上主流的数据库管理系统。例如： TIDB, PolarDB, GreatDB, 人大金仓，神舟通用，TDengine, MySQL, PostgreSQL, Microsoft SQL Server, Oracle 等等。软件设计支持 Windows、MacOS、Linux 等操作系统，软件采用插件扩展的方式对多数据库进行支持。</p><p style="text-align:left">官网链接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fatomdb.com" target="_blank">atomdb.com</a></span></p><p>&nbsp;</p><p><strong>墨天轮</strong></p><p>墨天轮是中国专业的数据技术社区，创建于 2019 年，目前已覆盖国内 40 万数据库相关从业人员。其围绕数据人的学习成长提供一站式的全面服务，打造集新闻资讯、技术文章、在线问答、活动直播、视频课程、文档阅览、在线运维等为一体的门户网站。墨天轮致力于在新时代下打造更具创新性的学习形态、构建完整的数据知识体系，共同建设一个有温度的技术社区和全新的数据社群聚合体。</p><p>链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2F" target="_blank">https://www.modb.pro/</a></p><p>&nbsp;</p><p><strong>示说</strong></p><p>示说是音视频互动社交 SaaS 平台,提供一站式的自动化营销和数据分析服务,专注赋能企业在垂直领域建立产品的用户生态,成为行业用户、社区互动和分享的专业平台。</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.slidestalk.com%2F" target="_blank">https://www.slidestalk.com/</a></p><p>&nbsp;</p><p><strong>盛见开源社区</strong></p><p>盛见开源社区是由盛见团队的开源项目作者、贡献者、维护者共同组成的开源社区，提供开源的区块链框架、区块链钱包、区块链监控等系列开源产品及解决方案，专注区块链内核模块化和数字资产金融衍生品。 同时还进行开源技术内容发布、开源赛事参与、开源项目共创等开源活动。</p><p>官网: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.shengjian.net" target="_blank">https://www.shengjian.net</a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10150339</guid>
            <link>https://my.oschina.net/u/3859945/blog/10150339</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenTiny Vue 开源组件库突破 1000 Star]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>你好，我是 Kagol。</p><p>今天是感恩节，我们怀着无比激动的心情，庆祝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 达到 1000 Star ⭐</p><p>感谢所有支持 OpenTiny 开源社区的朋友们！</p><p><img src="https://oscimg.oschina.net/oscnet/up-1992757ee39875aabd70bc8e9d462a970eb.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-87db039989ef9101d4011633ea25be16749.jpg" alt="" referrerpolicy="no-referrer"></p><p>2023 年 2 月 16 日，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 正式开源。</p><p>和业界组件库相比，<code>OpenTiny Vue</code> 最大的特色就是使用 Renderless 无渲染组件设计架构，实现了一套代码同时支持 Vue2 / Vue3 / React，支持 PC / Mobile 端，并支持<code>函数级别的逻辑定制</code>和<code>全模板替换</code>，灵活性好、二次开发能力强。</p><p>我们拥有更丰富的组件，目前组件数量已经超过 100 个，除了业界常见组件之外，我们还提供了一些独有的特色组件，如：Split 面板分割器、IpAddress IP 地址输入框、Calendar 日历、Crop 图片裁切等。</p><p>经过 9 个多月的持续打磨，我们发布了 6 个大版本，支持了更加丰富的特性，能力更强、体验更好。</p><ul><li>完成 Monorepo 和 TypeScript 工程改造</li><li>支持 Vue2.7</li><li>支持 VitePress 服务端渲染</li><li>官网提供 Composition API 写法的示例</li><li>提供 Playground 代码演练场</li><li>提供 XDesign / Aurora / Infinite 3 套新主题</li><li>增加 RichTextEditor / ColorPicker / Anchor / Guide 等 13 个新组件</li></ul><p>开源不易，请给 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">OpenTiny Vue</a> 点个 Star ⭐ 鼓励下，感谢你对我们 OpenTiny 的大力支持🌹</p><p>源码：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><h2>1 围绕开发者需求，不断完善自身能力</h2><p>开源的 9 个多月以来，我们收到了非常多友好、耐心的开发者的反馈，这些宝贵的反馈意见对于我们优化 TinyVue 组件库，打造真正有竞争力的开源项目提供了非常大的帮助，感谢所有耐心地给我们 TinyVue 提交 Issue 的开发者们🌹</p><h3>1.1 Monorepo 和 TypeScript 工程改造</h3><p>今年 2 月份刚开源时，我们的项目结构还不是 Monorepo 工程，整个组件库分成了 4 个仓库：</p><ul><li>tiny-vue // 组件模板</li><li>tiny-vue-renderless // 组件逻辑</li><li>tiny-theme // PC 端组件样式</li><li>tiny-theme-mobile // 移动端组件样式</li></ul><p>这样会带来以下问题：</p><ol><li>第一次 clone 代码比较麻烦，需要 clone 4 个仓库的代码</li><li>clone 完代码之后，还需要切换 develop 分支 4 次，npm i 安装 4 次依赖包</li><li>这 4 个工程安装的依赖包如果有重复的，会在各自的工程目录下安装多次，导致更多的磁盘空间占用</li><li>增加新组件或给组件增加新特性，一般都会涉及模板/逻辑/样式的同时修改，提交 MR 时需要在三个仓库都提交一个 MR，不太方便</li><li>填写 MR 的描述信息时也需要在多个仓库填写多次</li><li>检视 MR 是也需要在多个仓库进行检视、提交检视意见，比较分散</li></ol><p>由于我们是一个开源项目，希望能够团结社区开发者一起共同建设，肯定希望大家参与贡献的门槛尽可能降低，贡献的体验尽可能流畅，所以我们在 3 月份对项目进行了一次大改造，将原来分散在 4 个代码仓库的代码集中到一个仓库，通过 Monorepo 方式进行管理。除此之外，我们还将原来的 JavaScript 工程改造成了 TypeScript 工程，并在持续补充组件的 TypeScript 类型声明。</p><blockquote><p>目前组件 TypeScript 类型声明还未全部补充完，欢迎朋友们一起参与贡献。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></p></blockquote><h3>1.2 支持 Vue 2.7</h3><p>说来惭愧，支持 Vue 2.7 的诉求从今年 4 月份就有人提 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F141" target="_blank">#141</a>，我们在最近的大版本 v2.11.0 才正式支持。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7291598231954653240" target="_blank">OpenTiny Vue 支持 Vue2.7 啦！</a></p><p>Vue2.7 是升级 Vue3 的一个过渡版本，支持了 Composition API 写法，相较于 Vue2.6 差异较大，并且目前是 Vue 2.x 的默认版本，在 Vue2 项目中默认会安装 Vue 2.7.x，这时安装和使用 TinyVue v2.x 版本，项目会报错。</p><p>v2.11.0 版本之后将不再有这个问题，欢迎还在使用 Vue2 的朋友们体验和使用。</p><h3>1.3 官网提供 Composition API 写法的示例</h3><p>TinyVue 是一个能同时支持 Vue2 和 Vue3 的组件库，但是之前我们官网的组件 Demo 只有 Options API 的版本，使用 Vue3 的开发者会觉得很不方便，拷贝 Demo 代码之后还需要手动转换成 Composition API 的写法。</p><p>于是我们优化了文档的呈现，参考 Vue 官网，增加了 Options(选项式) 和 Composition(组合式) 两种写法的切换。</p><p><img src="https://oscimg.oschina.net/oscnet/up-11b40155bd5aad12b5a1a5c253fbbdb557a.png" alt="" referrerpolicy="no-referrer"></p><p>欢迎朋友们到我们官网体验：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.4 提供 Playground 代码演练场</h3><p>早期我们的组件 Demo 代码是可以直接在页面上编辑，然后查看组件渲染效果的，但是编辑之后的代码没法通过链接形式分享出来。</p><p>我们缺少代码演练场功能，这个问题 4 月份就有朋友提 Issue <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F182" target="_blank">#182</a>，8 月初，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmengqiuleo" target="_blank">xiaoy</a> 同学给我们贡献了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue-playground" target="_blank">TinyVue Playground</a> 项目。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7262349502920523833" target="_blank">但因热爱，愿迎万难，OpenTiny 社区增加一枚前端程序媛贡献者🎉</a></p><p>我们将这个项目集成到了 TinyVue 的官网，现在你可以在每个组件 Demo 的右上角点击「打开演练场」的按钮，在演练场中编辑这个 Demo，实时查看修改后的组件效果，并通过链接形式分享出去。</p><p>这样提交 Issue 时，可以在 Playground 中实现最小可复现 Demo，并将链接贴到 Issue 描述中，大大降低了沟通成本，提升了缺陷修复的效率。</p><h3>1.5 四套主题，总有一套是你喜欢的</h3><p>为了满足不同业务的需求，我们内置了四套主题，大家可以挑选自己喜欢的一款，如果这四套主题依然没有一款能完全符合自己的要求，你也可以基于现有主题，修改部分主题变量，扩展出一套自己的主题，或者从 0 到 1 自定义一套主题，都是可以的。</p><p>具体如何自定义主题，可以参考以下文章：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7235603140262838329%23heading-21" target="_blank">自定义 TinyVue 主题</a></p><p><img src="https://oscimg.oschina.net/oscnet/up-84297e83aea2a488ad2f6698221e7bdfcd9.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p>温馨提醒：主题切换入口在组件页面右上角</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-381625d2749f199ea19c0f6a5dc6e0ab035.png" alt="" referrerpolicy="no-referrer"></p><p>欢迎朋友们在 TinyVue 官网体验不同主题：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.6 更加丰富的组件</h3><p>有很多开发者在 Issue 给我们提出新组件的诉求，经过仔细评估，我们实现了其中一部分通用的组件。</p><ul><li>Anchor 锚点 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenxi-20" target="_blank">@chenxi-20</a></li><li>CalendarView 日历视图 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol" target="_blank">@kagol</a></li><li>ColorPicker 颜色选择器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>ConfigProvider 全局设置 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>Divider 分隔线 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvaebe" target="_blank">@vaebe</a></li><li>Drawer 抽屉 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHuangyilin19" target="_blank">@Huangyilin19</a></li><li>Guide 引导 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyuanningning" target="_blank">@yuanningning</a></li><li>PopConfirm 确认框 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgimmyhehe" target="_blank">@gimmyhehe</a></li><li>RichTextEditor 富文本编辑器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FCaesar-ch" target="_blank">Caesar-ch</a></li><li>...</li></ul><p>还有好多组件未实现，欢迎感兴趣的朋友们一起参与共建！</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到顶部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 标签输入框</li><li>LoadingBar 加载进度条 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 对话组件</li><li>IpSection 分段 IP 输入框</li><li>Video 视频播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思维导图 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程设计器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>如果你想参与 TinyVue 项目贡献，可以在对应的 Issue 下评论认领，并仔细阅读我们的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">贡献指南</a>。</p><h2>2 酒香也怕巷子深呐</h2><p>俗话说：酒香不怕巷子深，但是在前端组件库开源方面可能不太适用，近几年开源的前端组件库越来越多，这其实是一件好事，百花齐放，前端人也有更多的选择。</p><p>但是不熟悉这些组件库的开发者会觉得这些组件库好像都差不多，何必又要重复造轮子呢？</p><p>因此有必要做一些宣传，让大家了解 TinyVue 组件库的核心设计理念，TinyVue 与其他组件库的不同，有什么竞争优势。</p><h3>2.1 开发者大会</h3><p>从今年 4 月份开始，OpenTiny 参加了 17 场开发者大会、开源峰会、高校行活动，包括：</p><ul><li>5.13 重庆的开源未来发展峰会</li><li>5.27 上海的 GOTC</li><li>6.11 北京的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7242676549735776314" target="_blank">开放原子全球峰会</a></li><li>⭐ 7.7 东莞的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7255138771985219639" target="_blank">HDC 大会</a></li><li>9.20 上海的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7287473826061189181" target="_blank">HC 大会</a></li><li>9.26 上海的 KubeCon China</li><li>10.24 长沙的中国程序员节</li><li>10.28 成都的中国开源年会</li><li>...</li></ul><p>通过在大会分享议题，我们能将 TinyVue 的理念传递给广泛的开发者； 通过展台互动，我们可以近距离与开发者互动，给大家分享 OpenTiny 的独特优势，倾听开发者的声音，了解用户的痛点问题； 通过编程训练营，可以带着开发者一起体验 TinyVue 组件，快速搭建 Web 应用。</p><p>值得一提的是，7 月份在东莞华为溪村的 HDC 大会真是一场开发者的盛宴，各种开发者活动非常丰富，只要你有心，可以学到很多技术知识，认识超多业界大佬，哪怕只是去「欧洲小镇」逛一圈，我觉得也是非常值得推荐的。</p><p>虽然那几天天气很热，也很累，但是却是非常难忘的一段经历，OpenTiny 有演讲议题、展台、训练营和挑战赛，参加人数都非常多，开发者们都很活跃。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09a594762462062dd5c2c95967aae95f29b.png" alt="" referrerpolicy="no-referrer"></p><p>非常高兴，TinyVue 也是在 HDC 大会上正式进行发布！</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7254020450160934973" target="_blank">OpenTiny 前端组件库正式开源啦！面向未来，为开发者而生</a></p><p>大家可以关注 <code>OpenTiny</code> 公众号，随时掌握 OpenTiny 最新活动动态。</p><h3>2.2 直播</h3><p>除了线下开发者大会之外，线上直播也是一种向开发者传递项目价值的方式，今年共做了 8 次直播。</p><ul><li>华为云 DTT 直播 2 次</li><li>与前端知名 UP 主前端杨村长联合直播 3 次</li><li>与 ToB Dev / Dooring 低代码联合直播 1 次</li><li>受邀参加中国开源社区 landscape 直播分享 1 次</li><li>自主策划 TinyEngine 线上答疑 1 次</li></ul><p>大家感兴趣可以关注 OpenTiny 的 B 站账号，我们会将直播的录播视频上传上去。</p><p>OpenTiny B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><h3>2.3 写文章</h3><p>相比参加开发者大会和组织直播活动，写文章相对比较容易，并且写文章能够更加全面、细致地传递开源项目价值，也是一种细水长流的传播方式，门槛相对也比较低，几乎任何人都可以做。</p><p>不过写文章并不是一件容易的事，从 4 月份我们发布第一篇 OpenTiny 的宣传文章至今，共发布了 75 篇文章，平均每周 2 篇。</p><p>主要发布在 OpenTiny 公众号、掘金、开源中国等平台，累计阅读量超过 50 万。</p><p>另外我们也和多位前端 KOL 建立合作关系，如：前端早读课、前端迷、一飞开源、前端之巅、前端进阶之旅、高级前端进阶、村长学前端、前端大班车、code 秘密花园、、技术胖学程序、若川视野、前端帮、前端 Q、大厂杂谈、LowCode 低码时代、华为开源、OSC 开源、ITPUB、前端开源星球、前端前沿技术等，感谢前辈们的提携！</p><p>开源不易，写文章也不易，推荐朋友们关注以上大佬们的公众号，也给我们 TinyVue 开源项目点个 Star 鼓励下🌹</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><p>感谢朋友们对 TinyVue 的支持！</p><p>如果你有一个开源项目，千万不能抱着酒香不怕巷子深的观念，而是积极主动地走出去，接触广大的开发者，不断对外宣传你的开源项目的价值和核心优势，让大家了解你的开源项目，让大家评判你的开源项目，让大家使用你的开源项目。</p><h2>3 规划</h2><p>2024 年我们将继续根据用户需求优化组件库。</p><p>一方面继续完善组件库能力，提供更多实用组件和特性，满足更广泛的业务场景；</p><p>另一方面持续优化组件库工程架构和质量，完善组件的 TypeScript 类型声明、E2E 测试用例、单元测试用例。</p><p>以下是我们 2024 年的规划。</p><h3>3.1 新特性</h3><p>根据用户提交的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues" target="_blank">Issue</a> 持续修复组件缺陷、完善组件能力。</p><p>新组件：</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到顶部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 标签输入框</li><li>LoadingBar 加载进度条 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 对话组件</li><li>IpSection 分段 IP 输入框</li><li>Video 视频播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思维导图 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程设计器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>新特性：</p><ul><li>支持 Nuxt3 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F577" target="_blank">#577</a></li><li>支持 unplugin-vue-components <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F304" target="_blank">#304</a></li><li>支持深色主题 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F415" target="_blank">#415</a></li><li>Tree 支持虚拟滚动 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F256" target="_blank">#256</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F317" target="_blank">#317</a></li><li>RichTextEditor 富文本组件功能增强</li><li>CalendarView 组件功能增强</li></ul><h3>3.2 工程优化</h3><p>工程优化的目的是提升质量和效率，主要包含以下几个方面：</p><ul><li>完善组件的 TypeScript 类型声明 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></li><li>优化组件的 Demo/API 文档 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F484" target="_blank">#484</a></li><li>完善 E2E 测试用例</li><li>完善单元测试用例 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F206" target="_blank">#206</a></li><li>Grid 组件抽离 renderless 逻辑层</li></ul><h2>3.3 生态扩展</h2><p>2023 年我们完成了 TinyReact 组件库的基础适配，包括基础版本的 React 适配层、本地开发和部署流程，提供了 Button / Alert / Switch / Badge 4 个组件，并发布第一个 alpha 版本。</p><p>2024 年我们将持续扩展组件库生态，主要包含：</p><ul><li>持续完善 TinyReact 组件库，完善 react-common 适配层，增加更丰富的组件模板</li><li>适配 <a href="https://gitee.com/openInula/inula">openInula</a> 框架，增加 inula-common 适配层</li><li>完善移动端组件库并部署官网，为 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-engine" target="_blank">TinyEngine</a> 低代码引擎提供移动端组件物料</li><li>探索和扩展 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsolidjs%2Fsolid" target="_blank">Solid</a> / <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsveltejs%2Fsvelte" target="_blank">Svelte</a> 等新兴框架的组件库</li></ul><p>欢迎广发开发者朋友一起参与 TinyVue 开源共建！</p><p>如果你有意向参与 TinyVue 开源贡献，请在对应的 Issue 下面评论，并在参与贡献之前阅读<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">贡献指南</a></p><p>最后，再一次感谢所有支持 TinyVue 的朋友们！</p><p><img src="https://oscimg.oschina.net/oscnet/up-7528c4a9c1dd5436bad2907842bfc87e831.png" alt="" referrerpolicy="no-referrer"></p><h2>联系我们</h2><p>GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a>（欢迎 Star ⭐）</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">https://opentiny.design/tiny-vue</a></p><p>B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><p>公众号：OpenTiny</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/10150927</guid>
            <link>https://my.oschina.net/u/4863191/blog/10150927</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 内核放弃支持过时的图形驱动基础设施]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linux 内核正在准备删除支持旧的和过时的图形驱动程序的基础设施。</p><p>早在 Linux 6.3 内核中就已经移除了许多旧版的 DRM 驱动程序，现在的补丁进一步删除了支持这些旧的用户空间模式设置图形/显示驱动程序的基础设施。</p><p>在 Linux 6.3 内核中，ATI Rage 128、3Dfx、S3 Savage、Intel 810、SiS、VIA 和 Matrox MGA DRM 驱动程序被淘汰。这是为了清除 DRI1 时代过时 GPU 驱动程序的努力的一部分。</p><p>现在，SUSE 工程师 Thomas Zimmermann 计划进一步删除用户空间模式设置的基础设施。他认为，由于 Linux 6.6 是今年的长期支持版本（LTS）内核。现在是一个很好的时机来删除这个基础设施。如果有人仍在使用这些旧的驱动程序或类似的驱动程序，他们可以继续使用 Linux 6.6 LTS。</p><p>Zimmermann<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2F20231122122449.11588-1-tzimmermann%40suse.de%2F" target="_blank">在 dri-devel 上写道</a></u>：</p><blockquote><p>旧的用户空间模式设置驱动程序已经在 Linux v6.3 中被删除。没有人抱怨或要求它们的恢复。现在是时候从 DRM 核心中删除这些驱动程序的基础设施了。</p><p>最近的 Linux v6.6 已被指定为长期支持版本，因此任何剩余的用户还有几年时间来购买新的显卡。通过简单的 drm 仍然支持这些旧设备。将适当的驱动程序与内核模式设置合并也是一个选择。</p><p>补丁 1 到 7 修复了在删除驱动程序过程中被遗忘的一些微不足道的问题。</p><p>补丁 8 和 9 删除了旧的 ioctl 接口。其中一个操作与其他操作不同，因此它有自己的补丁。</p><p>补丁 10 到 12 从 DRM 中删除了旧的源代码。随着这些代码的消失，补丁 13 中的 AGP 代码也可以简化。以前有一个用于用户空间模式设置的设备文件/dev/agpgart，现在已经过时了。</p><p>这 14 个补丁在直接渲染管理器子系统中消除了另外 8000 行旧代码。如果没有提出异议，这个旧的用户空间模式设置基础设施的删除可能会在新的一年的 Linux 6.8 内核周期中发生。</p></blockquote><p>这项工作主要是为了清除过时的 GPU 驱动程序，并为用户提供更好的性能和稳定性。对于依赖旧版驱动程序的用户，他们可以继续使用 Linux 6.6 LTS，直到他们准备好升级到支持新的图形驱动程序的版本。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267831/linux-drop-old-ums-drm-infra</guid>
            <link>https://www.oschina.net/news/267831/linux-drop-old-ums-drm-infra</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 在新 AMD Zen 4 Threadripper 上的性能比 Windows 11 高约 20%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Freview%2Fthreadripper-7995wx-windows-linux" target="_blank">根据 Phoronix 的报道</a></u>，对于最新的 AMD Zen 4 Threadripper 处理器，运行 Ubuntu 会比 Windows 11 获得更好的性能，前者较后者大约提升了 20% 的性能。这项测试是在一台配置了 HP Z6 G5 A 工作站的 96 核 AMD Ryzen Threadripper PRO 7995WX 处理器上进行的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c4adb3609ed3dba446e73d67cbfe76cf0a3.png" referrerpolicy="no-referrer"></p><p>测试结果显示，Linux 在处理高核心数处理器时的性能优势比 Windows 更明显。这主要归功于 Linux 内核调度程序在处理大核心数处理器时的优秀表现。此外，Linux 在处理这类高端台式机和工作站上的性能方面也比 Windows 更出色。</p><p>测试中，HP Z6 G5 A 工作站分别运行了预装的 Windows 11 Pro 和 Ubuntu 23.10 操作系统。在运行了一系列适用于高端台式机和工作站的基准测试后，结果显示 Ubuntu Linux 在大部分测试中都表现出更好的性能。这表明 Ubuntu Linux 在处理高核心数处理器时能够更好地利用硬件资源，从而提供更高的性能。</p><p>需要注意的是，这项测试是在特定硬件配置下进行的，因此结果可能会因为不同的硬件配置而有所不同。此外，这项测试只涉及到 Ubuntu 23.10 操作系统，其他 Linux 发行版的性能可能会有所不同。</p><p>总的来说，根据这项测试结果，如果你在使用 AMD Zen 4 Threadripper 处理器的高端台式机或工作站，选择 Ubuntu Linux 作为操作系统可能会获得更好的性能。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267827</guid>
            <link>https://www.oschina.net/news/267827</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 6.8 将更新 Zstd 代码以获得更好的压缩性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FZstd-1.5.5-Patches-Linux-Kernel" target="_blank">根据 Phoronix 的报道</a></u>，Linux 6.8 内核计划在明年升级其 Zstd 代码，以提供更好的压缩性能。</p><p>在 Linux 6.2 中，内核的 Zstd 压缩/解压缩代码已经根据 Zstd 1.5 的最新状态进行了更新。而在 Linux 6.8 内核中，计划升级到 Zstd 1.5.5 版本，这将提供更好的压缩性能。</p><p>这次 Zstd 升级对 Linux 内核的动力之一是英特尔希望在 Linux 内核中使用更新的 Zstd 版本，因为它公开了 Zstd 的外部匹配提供程序 API，从而允许 QuickAssist 技术（QAT）加速 LZ 匹配查找阶段。这对于那些拥有 QAT 硬件或将 QAT 加速集成到 Xeon Sapphire Rapids 和即将推出的 Emerald Rapids 处理器的用户来说是个好消息。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b673c0555866551114bd2e08b4c9c512046.png" referrerpolicy="no-referrer"></p><p>除了满足英特尔的需求之外，内核中更新的 Zstd 代码经过测试，发现在写入+压缩时间上可以减少约 6%。然而，读取+解压缩时间略有增加。Zstd 1.5.5 本身是在今年 4 月发布的，其中包含了一些性能改进、修复和其他变更。</p><p>目前可以在邮件列表的补丁中找到适用于 Linux 内核的 Zstd 1.5.5 版本，内核维护者计划在 Linux 6.8 合并窗口提交这项工作。</p><p>这次 Zstd 代码的升级将为 Linux 内核带来更好的压缩性能，这对于文件系统驱动程序的透明文件系统压缩/解压缩、将各种内核资源压缩为 Zstd 格式等方面都是有益的。</p><p>详情查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F20231121010318.524570-1-nickrterrell%40gmail.com%2FT%2F%23m693429838032e235560212b8339b315dcaa02460" target="_blank">https://lore.kernel.org/lkml/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267826/zstd-1-5-5-patches-linux-kernel</guid>
            <link>https://www.oschina.net/news/267826/zstd-1-5-5-patches-linux-kernel</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌将于 2024 年 6 月开始禁用 Manifest V2]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fresuming-the-transition-to-mv3%2F" target="_blank">宣布</a>恢复&nbsp;<span style="background-color:#ffffff">Manifest V2 的</span><span style="background-color:#ffffff">弃用时间表，以继续向 Manifest V3 迈进从而提供更高的安全性和隐私保障。</span>计划最早将于 2024 年 6 月开始在 Chrome 127 及更高版本的 pre-stable 版（开发版、金丝雀版和测试版）中禁用 Manifest V2 扩展。</span></p><p><span style="color:#000000">生效后，Manifest V2 扩展程序将在浏览器中被自动禁用，并且无法再从 Chrome 网上商城安装 Manifest V2 扩展程序。与此同时，Manifest V2 扩展程序将失去 Chrome 网上商城中的精选徽章（如果目前有的话）。</span></p><p><img height="311" src="https://static.oschina.net/uploads/space/2023/1123/174712_jZM4_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">此前谷歌曾宣布 Chrome 浏览器将在 2023 年 1 月停止支持 Manifest V2 扩展，并且也不再支持更新。但后续却因为 Bug 太多，导致</span></span><a href="https://www.oschina.net/news/221452/google-delays-chrome-manifest-v3">多次推迟发布</a><span style="background-color:#ffffff; color:#333333"><span>&nbsp;</span></span><span style="color:#000000"><span style="background-color:#ffffff">Manifest V3 版本，延长&nbsp;Manifest V2 的使用日期，</span>并于去年 12 月宣布暂停了 Manifest V2 的弃用计划。</span></p><p><span style="color:#000000">在这将近一年的时间里，项目团队表示已根据反馈对 Manifest V3 进行了一系列修改，解决了开发人员反馈的问题并为迁移提供了更好的解决方案。</span></p><p><span style="color:#000000">该公司计划逐步推出这一变更，同时收集用户反馈并收集数据，以确保 Chrome 浏览器用户充分了解详情并寻找到可替代的扩展。预计变更从 pre-stable 版推广到 Chrome 稳定版至少需要一个月的时间，具体时间可能会根据收集到的数据而有所不同。</span></p><p><span style="color:#000000">对于那些使用 ExtensionManifestV2Availability 策略来确保 Manifest V2 扩展在其组织中持续运行的企业，将有额外一年的时间（直到 2025 年 6 月）来迁移其组织中的 Manifest V2 扩展。在此之前，启用了该策略的浏览器不会受到停用的影响。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">对于仍在发布 Manifest V2 扩展的开发者，谷歌方面强烈建议他们在 2024 年 6 月之前完成向 Manifest V3 的迁移，并提供了一份</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fextensions%2Fmigrating%2F" target="_blank">迁移指南</a>。</p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fresuming-the-transition-to-mv3%2F" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267820/google-resuming-the-transition-to-mv3</guid>
            <link>https://www.oschina.net/news/267820/google-resuming-the-transition-to-mv3</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[快来查收 KCL 社区开源快讯 | 云原生模型、语言和工具链更新速递!]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="258" src="https://oscimg.oschina.net/oscnet/up-10a425f008580d122921fd1db5cbadc672c.jpg" width="520" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:left"><strong>双周同步开源进展</strong></p><p style="color:#000000; text-align:left"><strong>欢迎加入 KCL 社区进行互动～</strong></p><p style="color:#000000; text-align:left">KCL 是一个&nbsp;CNCF 基金会托管的基于约束的记录及函数语言，期望通过成熟的编程语言技术和实践来改进对大量繁杂配置比如云原生 Kubernetes 配置场景的编写，致力于构建围绕配置的更好的模块化、扩展性和稳定性，更简单的逻辑编写，以及更简单的自动化和生态工具集成。</p><p style="color:#000000; text-align:left">本栏目将会双周更新 KCL 语言社区最新动态，包括功能、官网更新和最新的社区动态等，帮助大家更好地了解 KCL 社区！</p><p style="color:#000000; text-align:left"><em><strong>KCL 官网：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io</a></strong></em></p><h2>内容概述</h2><p style="color:#000000; text-align:left">感谢所有贡献者过去两周 (2023 11.09 - 11.23) 的杰出工作，以下是重点内容概述</p><p style="color:#000000; text-align:left"><strong>📦 模型更新</strong></p><ul><li>KCL 模型数量新增至<span>&nbsp;</span><strong>200 个</strong>，主要新增与<span>&nbsp;</span><code>Pod</code>,<span>&nbsp;</span><code>RBAC</code><span>&nbsp;</span>相关的校验模型及 Kubernetes 1.14-1.28 版本的模型参考文档</li><li>可以在<span>&nbsp;</span><code>Artifact Hub</code><span>&nbsp;</span>中搜索浏览到所有模型的文档及使用方式:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fsearch%3Forg%3Dkcl%26sort%3Drelevance%26page%3D1" target="_blank">https://artifacthub.io/packages/search?org=kcl&amp;sort=relevance&amp;page=1</a></em></li></ul><p style="color:#000000; text-align:left"><strong>💬 语言更新</strong></p><ul><li><strong>体验改进</strong><ul><li>优化配置代码块的语法缩进检查，不再强制报错</li><li>支持通过文件路径通配符作为编译入口</li></ul></li><li><strong>错误修复</strong><ul><li>修复部分场景字典类型的类型推导错误</li><li>修复 Schema 参数数量的检查</li></ul></li></ul><p style="color:#000000; text-align:left"><strong>🔧 工具链更新</strong></p><ul><li><strong>测试工具发布</strong><ul><li>支持使用 KCL 函数编写单元测试并使用工具执行测试</li><li>支持使用正则表达式过滤待测试用例</li><li>支持单元测试快速失败功能</li></ul></li><li><strong>导入工具更新</strong><ul><li>修复 patterns 到正则匹配表达式的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F70" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/70</a></em></li><li>修复 minItems/maxItems 到字段长度校验规则的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F69" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/69</a></em></li><li>修复 0 或空字符串为默认值的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F69" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/69</a></em></li><li>修复 Kubernetes CRD 到 KCL Package 转换中包名的生成为：<code>${apiVersion}_${kind}</code>:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F68" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/68</a></em></li></ul></li><li><strong>包管理工具更新</strong><ul><li>新增 update 命令用于自动更新本地依赖:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkpm%2Fpull%2F212" target="_blank">https://github.com/kcl-lang/kpm/pull/212</a></em></li></ul></li></ul><p style="color:#000000; text-align:left"><strong>💻 IDE 更新</strong></p><ul><li><strong>体验改进</strong><ul><li>支持包管理工具引入的外部包依赖 import 语句补全</li></ul></li><li><strong>错误修复</strong><ul><li>修复函数参数未定义类型错误显示位置</li></ul></li></ul><p style="color:#000000; text-align:left"><strong>🏄 API 更新</strong></p><ul><li>新增 KCL 单元测试 API:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F904" target="_blank">https://github.com/kcl-lang/kcl/pull/904</a></em></li><li>新增 KCL 符号重命名 API:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F890" target="_blank">https://github.com/kcl-lang/kcl/pull/890</a></em></li></ul><p style="color:#000000; text-align:left"><strong>🔥 架构升级</strong></p><ul><li>KCL 设计并重构了新的语义模型以及支持最近符号查找和符号语义信息查询 API</li><li>IDE 补全，跳转和悬停等功能实现迁移至新语义模型，显著降低 IDE 功能开发难度和代码量</li></ul><p style="color:#000000; text-align:left"><strong>🚀 性能提升</strong></p><ul><li>KCL 编译器支持语法增量解析以及语义增量检查，大部分场景提升 KCL 编译构建和 IDE 插件使用性能<span>&nbsp;</span><strong>5-10 倍</strong></li></ul><h2>特别鸣谢</h2><p style="color:#000000; text-align:left">以下排名不分先后</p><ul><li>感谢 @cr7258 对 KCL 模型库以及 KCL 文档的贡献 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F203" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/203</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F209" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/209</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F210" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/210</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F211" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/211</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fmodules%2Fpull%2F67" target="_blank">https://github.com/kcl-lang/modules/pull/67</a></em></li></ul></li><li>感谢 @XiaoK29 为 KCL IDE 的悬停和引用查找功能代码架构重构以及 KCL 文档的贡献 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F887" target="_blank">https://github.com/kcl-lang/kcl/pull/887</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F899" target="_blank">https://github.com/kcl-lang/kcl/pull/899</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F205" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/205</a></em></li></ul></li><li>感谢 @MeenuyD, @negz 对&nbsp;<strong>Crossplane KCL Composition Functions</strong>&nbsp;集成的讨论与支持 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues%2F885" target="_blank">https://github.com/kcl-lang/kcl/issues/885</a></em></li></ul></li><li>感谢 @kolloch 对&nbsp;<strong>Bazel KCL</strong>&nbsp;构建规则脚本的宝贵反馈 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Frules_kcl%2Fpull%2F2" target="_blank">https://github.com/kcl-lang/rules_kcl/pull/2</a></em></li></ul></li><li>感谢 @陆云, @Even Solberg, @Prahalad Ramji @Matt Gowie, @ddh 和 @mouuii 在使用推广 KCL 过程中的交流与宝贵反馈 🙌</li></ul><h2>精选更新</h2><h3>在 Artifact Hub 上检索 KCL 代码包及云原生模型</h3><ul><li>通过 k8s 模型编写或者校验 Kubernetes 配置</li></ul><p style="color:#000000; text-align:left">&nbsp;</p><p><img height="413" src="https://oscimg.oschina.net/oscnet/up-be579d3f163ed2a9ef989f516169d64f9b1.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>通过 Open Application Model (OAM) 开放应用模型配合 KubeVela 控制器进行应用发布与运维</li></ul><p style="color:#000000; text-align:left">&nbsp;</p><p><img height="770" src="https://oscimg.oschina.net/oscnet/up-8a2737b64f74b1d5a27733ce7a5a084a195.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>查找 KCL 代码库如&nbsp;<code>jsonpatch</code>&nbsp;进行配置操作</li></ul><p><img height="718" src="https://oscimg.oschina.net/oscnet/up-15703cf81898b8126bed226fd3e1c45141a.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>通过引入 KusionStack Modules 模型生态并配合 KusionStack 增强客户端的应用交付体验：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack%2Fcatalog" target="_blank">https://github.com/KusionStack/catalog</a></em></li></ul><p><img height="697" src="https://oscimg.oschina.net/oscnet/up-16ff10fe152afe1ca5321397a39a1b5b41d.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:left">想了解更多？🤔️ 后续我们会通过一系列文章讲解各个模型更具体使用场景以及工作流程，敬请期待! 此外，200+ 模型的源代码位于&nbsp;<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fmodules" target="_blank">https://github.com/kcl-lang/modules</a></em>，欢迎社区的小伙伴进行共建。❤️</p><h2>其他资源</h2><p style="color:#000000; text-align:left">❤️ 感谢所有 KCL 用户和社区小伙伴在社区中提出的宝贵反馈与建议。预计&nbsp;11 月底我们会正式发布 KCL v0.7 新版本，敬请期待!</p><p style="color:#000000; text-align:left">更多其他资源请参考：</p><ul><li><p>KCL 网站<span>&nbsp;</span><em>:</em><span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io/</a></em></p></li><li><p>KusionStack 网站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkusionstack.io%2F" target="_blank">https://kusionstack.io/</a></p></li><li><p>KCL 2023 路线规划:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Fcommunity%2Frelease-policy%2Froadmap" target="_blank">https://kcl-lang.io/docs/community/release-policy/roadmap</a></p></li><li><p>KCL v0.7.0 Milestone:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F7" target="_blank">https://github.com/kcl-lang/kcl/milestone/7</a></p></li><li><p>KCL v0.8.0 Milestone:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F8" target="_blank">https://github.com/kcl-lang/kcl/milestone/8</a></p></li><li><p>KCL Github Issues:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues" target="_blank">https://github.com/kcl-lang/kcl/issues</a></p></li><li><p>KCL Github Discussion:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Forgs%2Fkcl-lang%2Fdiscussions" target="_blank">https://github.com/orgs/kcl-lang/discussions</a></p></li><li><p>👉&nbsp;戳链接加入 KCL 社区:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity" target="_blank">https://github.com/kcl-lang/community</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267815</guid>
            <link>https://www.oschina.net/news/267815</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TQUIC - 高性能轻量级跨平台 QUIC 协议库]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#1f2328; text-align:start">TQUIC 是 IETF QUIC 协议的实现。它是一个高性能、轻量级、跨平台的 QUIC 库。</p><h4 style="text-align:start"><strong>特性及优点</strong></h4><ul><li><p><strong>高性能</strong>：TQUIC 是为高性能和低延迟而设计的。相关细节可以参考<a href="https://tquic.net/zh/docs/further_readings/benchmark">基准测试结果</a>。</p></li><li><p><strong>可插拔拥塞控制</strong>：TQUIC 支持多种拥塞控制算法，包括 CUBIC，BBR，BBRv3，COPA。</p></li><li><p><strong>多路径传输</strong>：TQUIC 支持多路径，一个连接可同时使用多个路径提高性能及可靠性。</p></li><li><p><strong>易用性</strong>：TQUIC 提供易用的接口，支持灵活的配置参数，提供丰富的可观测性。</p></li><li><p><strong>跨平台</strong>：TQUIC 可运行在 Rust 语言支持的各种平台，同时提供了 Rust/C/C++语言接口。</p></li><li><p><strong>基于 Rust</strong>：TQUIC 基于用内存安全语言编写，可避免缓冲区溢出漏洞和其他内存相关错误的影响。</p></li><li><p><strong>高质量</strong>：TQUIC 包括充分的自动化测试，包括单元测试、模糊测试、集成测试、性能基准测试、互操作性测试等。</p></li><li><p><strong>协议一致性</strong>：TQUIC 已通过基于 Ivy 的形式化规范验证。同时通过了 IETF 互操作性测试。</p></li><li><p><strong>丰富的功能</strong>：TQUIC 支持所有 QUIC、HTTP/3 规范中的重大功能。</p></li></ul><h4><strong>架构</strong></h4><p><img height="383" src="https://static.oschina.net/uploads/space/2023/1108/104746_mwuM_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 07:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/tquic</guid>
            <link>https://www.oschina.net/p/tquic</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何做好架构设计，架构设计有章可循吗？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>设计一个系统的过程，就是建造一座大厦的过程，架构设计的质量直接决定了大厦的质量。</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在我们进行系统的架构设计时，总是会遇到一系列的问题，比如一个大型系统的架构应该如何起步，从哪里开始设计？系统是否应该划分成多个模块，应该怎么划分模块才更加的合理？亦或是觉得产品提出的需求非常不合理，完全影响我们正常的架构设计！对于非功能性的需求，我们是否可以得过且过，不去重视？</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>这些问题，让我们在刚开始架构设计时手足无措，但是随着我们完成一个又一个的系统架构设计以后，发现架构设计是有章法可循的，只要我们学习这些章法和套路，并且在工作过程中不断的积累与沉淀，就会行成一个完整的架构设计方法论，面对新的大型系统架构设计，也会一步一步有节奏进行，最终完成整体的架构设计。</span></span></span></p><span id="OSC_h1_1"></span><h1><span><span><span style="background-color:#b7eb8f">架构设计的原则</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架构设计需要遵循一些原则：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">1、架构设计需要方法体系</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>架构设计并不是一个」单一的方法「，直接拿来进行架构设计，而是多个各具特色的方法，组成的「方法体系」，并且这个体系随着新技术的发展还会不断进化。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">2、架构设计是质疑驱动</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架构设计是质疑驱动的过程，在」需求驱动「的基础上，我们需要不断的质疑我们架构设计的中间成果，进一步通过「质疑」，引入更多的「质量属性」及更多「功能场景」。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">3、多阶段下的多视图</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架构设计，是多阶段还是多视图？架构设计首先是「多阶段的」，我们将架构设计划分成多个阶段，在每个阶段中才会考虑」视图「这个维度。</span></span></span></p><span id="OSC_h3_2"></span><h3><span><span><em><span>架构设计的三个阶段</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>阶段一、 预备阶段</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>预备阶段的目标：全面理解需求，把握需求特点，确定架构设计驱动力。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在预备阶段，我们需要全面的梳理与理解需求，不放过任何一个需求细节。同时分析需求产生的各项质量属性与系统约束，同时兼顾这些约束进行架构设计，才能不遗漏重大的架构属性。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>阶段二、 概念架构</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>概念架构，必须考虑包括</span></span></span><span><span><strong><span>功能</span></strong></span></span><span><span><strong><span>，</span></strong></span></span><span><span><strong><span>质量</span></strong></span></span><span><span><strong><span>，</span></strong></span></span><span><span><strong><span>约束</span></strong></span></span><span><span><span>在内的所有方面的需求。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>阶段三、 细化架构</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在细化架构阶段，我们从五个不同的角度出发，设计五个视图，完成整个系统全方位的设计。</span></span></span></p><span id="OSC_h3_3"></span><h3><span><span><em><span>架构设计的一个贯穿环节</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><strong><span>对非功能需求的考虑</span></strong></span></span><span><span><span style="color:black">：</span></span></span><span><span><span>非功能需求无法一蹴而就，因为在设计的过程当中，会有新的需求不断的被发现，即使设计完成，在开发阶段，都会有影响非功能需求的约束出现，所以在整个阶段，都应该注意非功能需求。</span></span></span></p><span id="OSC_h1_4"></span><h1><span><span><span style="background-color:#b7eb8f">预备架构阶段分析</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>预备架构的最重要的目标，是建立需求大局观，把握需求特点，确定架构设计驱动力。通过对需求的详细分析，有一个宏观的需求感知，同时还要兼顾系统的质量要求和约束对系统设计造成的制约条件。</span></em></span></span></p><span id="OSC_h3_5"></span><h3><span><span><em><span>需求结构化</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>需求是有结构的，而不是零散的需求点，只有将分析后的需求结构化，才能宏观的感知整个需求。可以借助 ADMEMS 二维矩阵，将架构影响因素，梳理脉络。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如以下矩阵分析，将需求划分为多个维度，横向上从」广义功能「」，质量「」，约束「三个方面分析，广义功能是指需求需要满足的基本功能，及产品或业务人员的直接要求。质量维度则是系统设计时需要考虑的高并发，高可用，可拓展等技术设计维护，保证系统在满足基本需求的同时，同时对后续系统进化发展以及极端场景（例如：用户量激增，秒杀）等的满足。约束则是系统设计时的一些制约，例如上线日期，上线环境，开发人员技能水平等。纵向上划分为」业务级需求「」，用户级需求「」，开发级需求「三个维护」，业务级需求「是指产品或业务人员提出的基本要求」，用户级需求「则是从系统的使用用户角度出发，发现的例如用户电脑操作水平，用户使用习惯等潜在需求，而」开发级需求「，则是从研发人员角度出发，发现的例如可拓展，可测试，技术环境等不同维度的需求。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通过将需求结构化，我们可以全面的分析整体的需求，对需求进行整体的理解，同时也可以从不同的角度发现系统制约条件，在系统设计的最开始阶段就着手设计，防止遗漏重大约束导致架构设计失败。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-21F216gXpb11EiRfhbt.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_6"></span><h3><span><span><em><span>分析约束影响</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>约束分析的几个方面：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 来自产品或运营人员的约束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>系统的非功能需求，例如：上线时间，预算，工期要求等</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>业务领域相关的限制，例如业务规则或业务限制，相关法律，专利等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 来自</span></span></span><span><span><strong><span>用户</span></strong></span></span><span><span><span>的约束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>系统的用户，同样会产生约束性需求，比如用户的计算机水平，年龄段，使用偏好，国家等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如用户计算机水平整体较弱的话，在开发交互方式时就不应太过复杂，同时要兼顾系统的鲁棒性，防止系统被用户搞挂。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>用户使用产品时的外部环境同样可能产生约束条件，比如访问环境是内网或是外网，则决定了系统提供访问链接不同的网络权限。访问环境信号强度若，则系统的性能要求则更高。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 来自</span></span></span><span><span><strong><span>开发或运维人员</span></strong></span></span><span><span><span>的约束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>开发团队的技术水平，磨合程度，同样制约着系统的开发，如果开发人员均是高级研发人员且对当前技术栈有深入的了解，则开发进度就会更快，如果是新团队，且需要对技术栈进行学习才可以介入开发，则在工期或系统风险层面需要额外考虑。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 业界</span></span></span><span><span><strong><span>当前技术环境</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>当前技术环境中间件的成熟程度，编程语言及流行度，优缺点等，都会对架构设计产生约束条件。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>约束的分类：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 直接约束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：系统运行于 linux 平台。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 转换为功能需求的约束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>对于这种约束，可以直接转换为功能需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：供应商拥有自己的一套城市信息表 -&gt; 引出的功能需求：需要进行城市转换</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：供应商服务器性能差，tps 最大 10 -&gt; 引出的功能需求：需要进行限流请求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 转换为质量属性需求的约束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：系统使用者计算机水平不高</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>转换为质量属性：易用性（否则不会用），鲁棒性（系统被搞瘫）</span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><em><span>确定关键质量</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>系统的关键质量是需要进行取舍的，需要确认业务人员更注重那方面或在满足需求的基础上，确定哪些是必须的，哪些是可以适当忽略的。</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>我们需要首先确定架构重点支持哪些质量属性，然后对于相互矛盾的质量属性，进行权衡折中。例如当满足性能这个质量属性时，同时就会因为引入新的方案或组件，导致可维护性，可测试性降低；提高可拓展性时，就会对系统的性能和安全性产生影响等等，我们需要做的，就是在各个关键质量中进行取舍。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-22LELMr9d22zFXatK50.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_8"></span><h3><span><span><em><span>确定关键功能</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>确定关键功能的 4 个方面</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 核心功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 必做功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 高风险功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 独特功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>其他常见系统不存在的功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><strong><span>注意衍生需求：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>从需求转入设计时，因方案制定过程的复杂，会产生大量的衍生需求，衍生需求是原始需求的数倍。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>举例：</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>原始需求：定时拉取供应商数据。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>衍生需求：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 由于供应商数量较多，需要引入分布式定时任务，集群并发拉取</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 由于供应商数据量大，需要分库分表设计</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、需要快速搜索，引入存储引擎组件等等</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-24DBopViOOSWkb7SO.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>这些衍生需求我们必须要考虑，虽然业务需求没有体现，但缺失架构设计的关键影响因素。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>架构驱动力对比：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>业务需求驱动架构：</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-25pbrXAR24YnLHpXB21.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>重大需求驱动架构：</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-2511lKgKmtlkleQWxu.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>由此可以看出，通过重大需求驱动的架构，更能考虑到更关键的部分，设计的架构更能满足需求的要求，架构设计成功的概率会更高。</span></span></span></p><span id="OSC_h1_9"></span><h1><span><span><span style="background-color:#b7eb8f">概念架构阶段分析</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>概念架构阶段，对系统进行适当的分解，而不陷入细节</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>概念架构的过程是，先根据关键功能进行初步设计，然后对设计的系统进行高层分割，接下来考虑非功能性需求（关键质量和约束），然后修改自己的初步设计，循环往复，在不断的质疑和优化过程中，完善架构设计。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-26T7A52xvPwdCSGT7q.png" width="474" referrerpolicy="no-referrer"></div><p>&nbsp;</p><span id="OSC_h3_10"></span><h3><span><span><em><span>初步设计</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>初步设计的目标是发现职责，无需展开细节设计。基于关键功能，进行初步设计，</span></span></span><span><span><strong><span>基于主流程，关键流程，黄金流程等进行流转图设计，从而发现职责。</span></strong></span></span></p><span id="OSC_h3_11"></span><h3><span><span><em><span>高层分割</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>切分复杂系统，为多个二级系统。或者直接切分为具体子系统。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>高层分割的两种方式：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 系统切分</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>切分的考虑点，包括系统功能、部署环境、语言、系统规模等</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如一个大型系统，切分为订单，商品，供应链等系统。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 系统内切分</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>根据系统的职责、调用关系、通用性等，进行系统内部切分。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>最常见的就是分层，例如一个系统，切分为网关层，服务层，搜索模块，man 端等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>分层的角度</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 逻辑分层</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>逻辑分层重视职责的划分，职责直接常常是上层使用下层的关系，上层和下层，可以是分布在不同的机器，也可以分布在同一台机器。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 物理分层</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>分布在不同机器上的软件单元。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 通用性分层</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通用性不同的，划分为不同的层，一般通用性越大，所处的层次越靠下。</span></span></span></p><span id="OSC_h3_12"></span><h3><span><span><em><span>考虑非功能需求</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>具体方法是：采用</span></span></span><span><span><strong><span>目标-场景-决策表</span></strong></span></span><span><span><span>，见下图：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架构设计是质疑驱动的，例如，质疑系统的可用性，考虑系统可能宕机，则引入集群部署设计，考虑下游接口可能超时或出现异常，则引入接口降级的设计等。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-30khnlGt6Qe939QO21.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>考虑场景的 5 个要素</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 影响来源，来自系统内部还是系统外部</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 如何影响的</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 受影响的对象</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 有什么问题或有什么价值</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>5、 所处的环境为何</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>对场景的权衡因素：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>价值，代价，开发难度，出现几率。对于某些场景，经过全面的权衡和思考，可以不支持，并不是所有的场景都要支持，否则可能存在过度设计。</span></span></span></p><span id="OSC_h1_13"></span><h1><span><span><span style="background-color:#b7eb8f">细化架构阶段分析</span></span></span></h1><span id="OSC_h3_14"></span><h3><span><span><span style="color:black">逻辑视图</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>逻辑视图是对系统的不同部分</span></span></span><span><span><strong><span>职责</span></strong></span></span><span><span><span>的划分，根据职责不同，可以将系统进行细粒度的拆分，划分为多个子系统。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="background-color:#87e8de">分层的细化</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>根据系统设计的需要，可以将系统的分层进行细化，例如展示层 -&gt; 业务层 -&gt; 数据层，可以细化为：展示层 -&gt; 控制层 -&gt; 接口层 -&gt; 接口实现层 -&gt; 数据层。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-32iq0B11mN3f32twUqC.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span style="background-color:#87e8de">分区的引入</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>分区的概念是业务流程相关的，分区的依据是：</span></span></span><span><span><strong><span>职责</span></strong></span></span><span><span><span>，比如结算流程可以作为一个分区，下单流程可以作为一个分区。将系统划分为多个分区，一方面可以支持并行开发，另一方面也将系统划分为多个子域，有利于业务概念和业务流程的收敛。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-33tPJdWeJMDcvCT5c.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="background-color:#87e8de">机制的提取</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>机制是指系统可以抽象的公共部分，例如公共工具，公共组件，公共流程等，提取这些公共部分，对于架构设计是至关重要的。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>划分子系统的原则：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 职责不同的单元，划分为不同的子系统</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 通用性不同的单元，划分为不同的子系统</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 需要不同开发技能的单元，划分为不同的子系统兼顾工作量，进一步切分太大的系统</span></span></span></p><span id="OSC_h3_15"></span><h3><span><span><span style="color:black">开发视图</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>开发架构视图的任务，是将「逻辑职责」映射为「程序单元」，例如：要自主编写的「源程序」，可重用的库，框架等；同时进行开发技术选型，例如：开发语言，开发工具等，然后也需要确立程序单元间的关系，project 划分，目录结构，编译依赖关系等。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-37jm117lDma8m21KTOo.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><span id="OSC_h3_16"></span><h3><span><span><span>运行视图</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>运行架构设计的工作内容，是确定引入哪些控制流：进程，线程等；确定每条控制流的任务，同时还要处理相关问题，例如控制流的创建，销毁，通信机制等，控制流之间的同步关系，是否有资源争用，是否需要加锁等也需要考虑。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-37xeumJqiBEAkn0Su.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_17"></span><h3><span><span><span>物理视图</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>物理架构设计的 3 项任务</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1. 硬件的选择与物理拓扑</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2. 软件到硬件的映射关系</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3. 方案的优化</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>思维要点：「开销」和「争用」是核心，应避免争用，降低开销。</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>数据视图</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>数据视图是系统的数据存储设计，根据对系统的分析，确定一种或多种数据策略，常见的数据分布策略如下 6 种：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>1、独立的 Schema</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>不同系统应用，使用不同的数据 schema，数据完全独立，一般界限清晰的不同系统可以采用这种方式。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-38IAcR6ctu568BXqUB.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">2</span></span></span><span><span><span style="color:black">、集中</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">不同的系统应用，使用同一个数据库，一般具有关联属性的应用可以采用这种方式，比如一个系统分为服务端和管理端，但都属于一个系统，则可以使用同一个数据库。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-39lOCEP39j21zaVHggv.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">3</span></span></span><span><span><span style="color:black">、分区</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>水平分区</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>水平分区即我们常见的分表方案，当一个 schema 无法满足我们的数据量要求时，可以划分为多个分区，每个分区存储一部分数据。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-396Zrt9eYBraZnGV0.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">垂直分区</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">垂直分区是分区策略的另外一个维度，当我们单库无法承载巨大的数据量时，也可以根据数据的类别，进行垂直分区。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40EKfhbfQ13Rmif3x.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>4、复制</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">多个数据库保存相同的数据，根据制定的更新策略保证不同库之间的数据同步，</span></span></span><span><span><span>我们常用的读写库分离，即为此方案，主库提供写能力，从库提供读能力，其中从库的数据是根据主库数据同步而来。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40LnrTouVj21EUvpx0.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>5、子集</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>根据一些特殊的场景要求，需要保存原数据的部分数据，例如 application1 保存全量订单，application2 只需要部分出票成功的订单，进行后续分析操作，则可以使用子集的策略进行数据视图设计。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40Moxg9UObMUth8l9.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>6、重组</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">通过多个不同的 application 作为数据来源，异构至其他 application，用于数据的分析或后续流程使用。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-41RIaqyVykQOqcxwX.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h1_19"></span><h1><span><span><span>总结</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架构设计的三个阶段：预备架构阶段；概念架构阶段；细化架构阶段</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架构设计的四个要素：需求结构化；分析约束的影响；确定关键质量；确定关键功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>概念架构的三个步骤：基于关键功能初步设计；系统高层分割；分析非功能需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>细化架构的五个视图：逻辑视图；开发视图；运行视图；物理视图；数据视图</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>一个贯穿环节：非功能需求的考虑</span></span></span></p><span id="OSC_h3_20"></span><h3><span><span><span>参考资料</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1.《一线架构设计指南》</span></span></span></p><blockquote><p>作者：京东零售&nbsp;冯晓涛</p><p>来源：京东云开发者社区，转载请注明来源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 07:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10149764</guid>
            <link>https://my.oschina.net/u/4090830/blog/10149764</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[特斯拉「完全开源」初代 Roadster 设计和工程]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">埃隆·马斯克 (Elon Musk)<span>&nbsp;在社交平台发文<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Felonmusk%2Fstatus%2F1727392569238159491" target="_blank">宣布</a>，已将</span></span><span style="background-color:#ffffff; color:#222222">特斯拉 (Tesla) 初代 Roadster 跑车的设计和工程细节「完全开源」，并发布了所有人都可以访问的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fservice.tesla.com%2Froadster" target="_blank">研发文件</a>。</span></p><blockquote><p><span style="color:#000000">「我们拥有的一切，现在你也拥有。」</span></p></blockquote><p><img height="312" src="https://oscimg.oschina.net/oscnet/up-34c1eef102f415f2e8a40190a16e4475a65.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">所披露的研发文件下方声明指出：</span></span></p><blockquote><div><span style="color:#000000">此处提供的信息是为了向 Roadster 爱好者提供的，是在 Roadster 的研发设计阶段创建的。它不是制造商的参考资料或维修保养材料，可能无法准确反映实际生产的车型或销售的部件。如果您使用这些信息，您有责任确保遵守所有法律和安全协议，因为无论您是否使用此处提供的信息，我们都不对非特斯拉人员所做的任何工作提供任何保证。您还需了解，如果您根据此信息制造或设计零件或创建新的维修或程序，我们将不对它们负责，并且它们不是正品 Tesla 零件或配件或 Tesla 批准的程序。</span>&nbsp;
 </div></blockquote><p><span style="color:#000000"><span style="background-color:#ffffff">开源 Roadster 蓝图和技术细节的决定，被<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fteslanorth.com%2F2023%2F11%2F22%2Ftesla-opens-up-original-roadster-design-and-engineering-to-public%2F" target="_blank">视为</a>特斯拉促进电动汽车行业创新与合作的战略步骤。此举允许世界各地的个人、公司和研究人员访问、研究特斯拉首款电动跑车所采用的技术，并在此基础上进行开发。「这标志着特斯拉对其专有技术的态度发生了重大转变。」</span></span></p><p><span style="color:#000000">特斯拉初代 <span style="background-color:#ffffff">Roadster&nbsp;</span>于 2008 年推出，是电动汽车行业的里程碑式车型。它是第一辆在高速公路上合法使用锂离子电池的纯电动汽车，也是<span style="background-color:#ffffff">第一款</span>每次充电行驶里程超过 200 英里的电动汽车。</span></p><p><span style="color:#000000">但是特斯拉<span style="background-color:#ffffff">初代 Roadster 当时只生产了 2000 多辆，且已经有十多年没有进行量产。特斯拉</span><span style="background-color:#ffffff">新一代的 Roadster&nbsp;曾在 </span><span style="background-color:#ffffff">2017 年 11 月的</span><span style="background-color:#ffffff">一场活动中亮相，但在经历了多次推迟之后，至今仍未正式推出。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 06:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267767/roadster-open-source</guid>
            <link>https://www.oschina.net/news/267767/roadster-open-source</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[程序员篡改 ETC 余额，一年私吞 260 余万元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>上海网警公众号今日报道了一起程序员的违法犯罪案件。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrSUrzlxsrEHgzp0dqhXH1A" target="_blank">据介绍</a></u>，2023 年 9 月上海警方接到某科技公司员工张女士报案称，其公司发现计算机系统被他人篡改数据，导致公司账户钱款损失。</p><p>民警对公司后台电子数据出现的异常账户进行提取，搜证中发现，<strong>操作者很有可能是管理网站后台系统的员工，监守自盗的可能性较大</strong>。</p><p>民警随即展开工作，最终嫌疑人曹某迫于压力主动投案自首。</p><p><img height="810" src="https://static.oschina.net/uploads/space/2023/1123/140254_7G6Y_2720166.png" width="1080" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1123/140427_D2nm_2720166.png" referrerpolicy="no-referrer"></p><p>曹某是该公司的软件工程师，他坦白称，<strong>去年 8 月发现公司网站后台的漏洞，用母亲和朋友身份证注册了两个 ETC 账户。</strong></p><p><strong>一年内两个账户分别从公司提取来了 230 余万元和 36 万元，总计 260 余万元。</strong>目前其因涉嫌盗窃罪已被依法刑事拘留，案件正在进一步审理中。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 06:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267760</guid>
            <link>https://www.oschina.net/news/267760</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[9 月国内手机市场出货量 3327.7 万部，5G 手机占比 86.3%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>中国信通院<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FhtODPwuYMGpG0LLkXScHqw" target="_blank">发布</a>了 2023 年 9 月国内手机市场运行分析报告，具体情况如下：</p><h4 style="margin-left:0px; margin-right:0px"><strong>一、国内手机市场总体情况</strong></h4><p style="margin-left:0; margin-right:0">2023 年 9 月，国内市场手机出货量 3327.7 万部，同比增长 59.0%，其中，5G 手机 2871.7 万部，同比增长 90.1%，占同期手机出货量的 86.3%。</p><p style="margin-left:0; margin-right:0">2023 年 1-9 月，国内市场手机总体出货量累计 2.0 亿部，同比增长 2.2%，其中，5G 手机出货量 1.62 亿部，同比增长 5.5%，占同期手机出货量的 80.7%。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="288" src="https://oscimg.oschina.net/oscnet/up-69c95e09317725c4f7ffc7ef79b2f4738ff.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>图 1&nbsp; 国内手机市场出货量及 5G 手机占比</strong></p><p style="margin-left:0; margin-right:0">2023 年 9 月，国内手机上市新机型 42 款，同比增长 23.5%，其中 5G 手机 20 款，同比增长 33.3%，占同期手机上市新机型数量的 47.6%。</p><p style="margin-left:0; margin-right:0">2023 年 1-9 月，上市新机型累计 335 款，同比增长 9.8%，其中 5G 手机 153 款，同比下降 1.9%，占同期手机上市新机型数量的 45.7%。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="294" src="https://oscimg.oschina.net/oscnet/up-c560fe8a7f746252f0eb067442a16f4a434.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>图 2&nbsp; 国内手机上市新机型数量及 5G 手机占比</strong></p><h4 style="margin-left:0px; margin-right:0px"><strong>二、国内手机市场国内外品牌构成</strong></h4><p style="margin-left:0; margin-right:0">2023 年 9 月，国产品牌手机出货量 2494.6 万部，同比增长 36.1%，占同期手机出货量的 75.0%；上市新机型 41 款，同比增长 36.7%，占同期手机上市新机型数量的 97.6%。</p><p style="margin-left:0; margin-right:0">2023 年 1-9 月，国产品牌手机出货量累计 1.63 亿部，同比下降 3.9%，占同期手机出货量的 81.4%；上市新机型累计 307 款，同比增长 10.4%，占同期手机上市新机型数量的 91.6%。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="229" src="https://oscimg.oschina.net/oscnet/up-f96594c4ab35fa2f58a6f38fc849910fae5.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>图 3&nbsp; 国产品牌手机出货量及占比</strong></p><h4 style="margin-left:0px; margin-right:0px"><strong>三、国内智能手机发展情况</strong></h4><p style="margin-left:0; margin-right:0">2023 年 9 月，智能手机出货量 3193.4 万部，同比增长 60.9%，占同期手机出货量的 96.0%。2023 年 1-9 月，智能手机出货量 1.92 亿部，同比增长 0.3%，占同期手机出货量的 95.6%。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="260" src="https://oscimg.oschina.net/oscnet/up-914d590bdbd5b0ede95fa2c8e1f6e33b3f8.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>图 4&nbsp; 国内智能手机出货量及占比</strong></p><p style="margin-left:0; margin-right:0">2023 年 9 月，智能手机上市新机型 32 款，同比增长 14.3%，占同期手机上市新机型数量的 76.2%。2023 年 1-9 月，智能手机上市新机型累计 279 款，同比增长 8.6%，占同期上市新机型数量的 83.3%。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267742</guid>
            <link>https://www.oschina.net/news/267742</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[俄罗斯操作系统 ALT Linux 支持龙芯处理器 (LoongArch)]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>根据俄媒 CNews 的<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnews.ru%2Fnews%2Ftop%2F2023-11-16_rossiyane_vpervye_nauchili" target="_blank">报道</a></u>，ALT Linux 操作系统已经正式添加对龙芯处理器的适配，支持龙芯 3A5000、龙芯 3A6000 等 CPU。得益于龙芯 CPU 出口限制已经被解除，<strong>俄罗斯相关部门可以采购这些 CPU 来替代 AMD 和英特尔的产品</strong>。</p><p><img src="https://static.oschina.net/uploads/space/2023/1123/113827_V5RM_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b019b0af83f74abe941843b40680ea69e8a.png" referrerpolicy="no-referrer"></p><p>ALT Linux 由俄罗斯公司 Basalt SPO 开发，其桌面环境基于 KDE Plasma 及 Xfce 构建，设计风格和 Windows 类似。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6090cfdcee56fe3b264b7d1c10ce5b543eb.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5842fd873798b6510a44b29f117b94c0961.png" referrerpolicy="no-referrer"></p><p>报道称，Basalt SPO 的开发团队非常高效，只花了 9 个月时间，就将 ALT Linux 移植到了龙芯 LoongArch 架构。</p><p>Basalt SPO 表示，目前支持龙芯的 ALT Linux 已开始提供不稳定的测试分支，<strong>预计稳定的 11.0 正式版将在明年第一季度发布，采用 Xfce 桌面环境</strong>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267741/russia-alt-os-linux-loongson-loongarch</guid>
            <link>https://www.oschina.net/news/267741/russia-alt-os-linux-loongson-loongarch</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[长安汽车基于 Apache Doris 的车联网数据分析平台建设实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>导读：随着消费者更安全、更舒适、更便捷的驾驶体验需求不断增长，汽车智能化已成必然趋势。长安汽车智能化研究院作为长安汽车集团有限责任公司旗下的研发机构，专注于汽车智能化技术的创新与研究。为满足各业务部门的数据分析需求，长安汽车基于 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fdoris" target="_blank">Apache Doris</a> 升级了车联网数据分析平台，支撑单日百亿级别数据实时处理，并实现十亿级别数据查询秒级响应，为长安汽车在提升用户用车体验、实时预警车辆故障、保证车辆安全驾驶等方面带来显著成果，为其在智能化方向的技术创新提供了有力支持。</p><p>作者｜长安汽车智能化研究院</p></blockquote><p>智能化是汽车工业进程中的一场革命，它旨在利用大数据、人工智能、云计算、物联网等前沿数字技术，对汽车设备和系统的运行状态进行全方位的感知、分析、决策和控制，从而提高汽车的安全性、舒适性、便捷性和节能性。</p><p>长安汽车智能化研究院作为长安汽车集团有限责任公司旗下的研发机构，专注于汽车智能化技术的创新与研究，其愿景是通过持续创新和技术突破，实现汽车智能驾驶、智能网联和智能交通的全面发展，为消费者提供更安全、更便捷、更智能的出行体验，并致力于成为中国汽车智能化领域的领军企业。</p><p>实现汽车智能化的关键之一，是需要建立稳定、高效的数据平台，以承载和利用海量的车联网数据。作为智能化发展的重要支撑，长安汽车智能化研究院肩负着整个长安汽车集团车联网数据的汇聚、处理和应用工作。为满足各业务部门提出的数据支持需求，目前已经构建了车联网数据分析平台，并在业务指标分析、质量管理系统、智慧能耗、智能诊断、智慧运营等多个重点领域实现数据应用。</p><p>本文将详细介绍长安汽车车联网数据分析平台的演进历程及实践经验，<strong>分享长安汽车基于 Apache Doris 支撑单日百亿级别数据实时处理、实现十亿级别数据查询秒级响应的实践经验</strong>。此外，<strong>Apache Doris 的引入还为长安汽车在用户用车体验提升、驾驶安全保障等方面带来显著收益，为长安汽车从机电化到智能化转型发展提供有力支持</strong>。</p><h1>汽车智能化所面临的挑战</h1><p>近些年来，长安汽车取得了令人瞩目的销量增长成绩。1-8 月，长安汽车自主乘用车累计销量超百万辆、保持持续上升的发展势头，以深蓝、阿维塔、启源为代表的新能源系列品牌力和产品竞争力不断提升，自主新能源车累计销量约为 25.6 万辆、同比增长 102.44%，成为销量增长新动能。</p><p>在汽车销量快速攀升的背后，车联网数据更是呈现爆发式增长的态势，其中最为核心的即车辆 CAN 总线数据。CAN 即 Controller Area Network，通过 CAN 总线可以对车辆上的各类电子控制系统进行统一通信，在实际车辆运行过程中 ，CAN 总线数据是车辆安全性、可靠性和高性能的重要保证：</p><ul><li>车辆系统监测和控制：CAN 总线数据可用于监测和控制系统中的各种设备和组件。传感器通过 CAN 总线发送其测量值，如温度、压力、位置等，以便其他设备或控制器实时监测和采取相应的措施。同时，控制器可以通过 CAN 总线向执行器发送控制指令，如调节阀门、驱动电机等，以实现对系统的控制。</li><li>车辆信息实时反馈：CAN 总线数据可用于提供实时反馈信息。例如在车辆控制系统中，传感器通过 CAN 总线传输车速、转向角度、制动状态等数据，控制器可以根据这些数据进行实时决策和调整，以确保车辆的安全性和性能。</li><li>数据共享和协调：CAN 总线数据允许不同设备之间进行数据共享和协调。通过 CAN 总线，不同的控制器和设备可以交换信息，共享状态和控制命令，有利于提高系统的整体性能和效率。</li><li>网络管理和故障诊断：CAN 总线数据用于网络管理和故障诊断。通过 CAN 总线，可以进行设备的自动识别、配置和监控，以便进行网络管理和故障排查，提高系统的可靠性和可维护性。</li></ul><p><strong>随着网联车销量不断增长，车辆每天将产生千亿级别的 CAN 数据，清洗处理后的数据也在 50 亿级别</strong>，面对如此庞大且持续膨胀的数据规模，如何从海量数据中快速提取挖掘有价值的信息，为研发、生产、销售等部门提供数据支持，成为当前亟需解决的问题。</p><p>而想要提供良好的数据支持及服务，首先需要应对以下几大挑战：</p><ul><li><strong>大规模数据实时写入及处理</strong>：为实现智能化，汽车的车门、座椅、刹车灯设备被设置了大量的传感器，每个传感器收集一种或者多种信号数据，数据被汇聚后进一步加工处理。目前长安汽车需要支持至少 400 万辆车的链接，车联网数据每秒吞吐量已达百万级 TPS ，每日新增数据规模高达数十 TB ，且还在持续增长中。如何对数据进行实时写入成为了长安汽车首要面临的挑战。</li><li><strong>准确及时的实时数据分析需求</strong>：车联网场景下数据分析通常要求实时性，快速获取分析结果是实时监控、故障诊断、预警和实时决策等服务的重要保障。例如在智能诊断中，车企需要近实时地收集相关信号数据，并快速定位故障原因。通过分析车辆传感器数据、行驶记录等，可以提前发现潜在故障，进行预防性维护，提高车辆的可靠性和安全性。</li><li><strong>更加低廉的数据存储和计算成本</strong>：面对快速增长的的数据以及日益强烈的全量写入和计算需求，导致数据存储和计算成本不断攀升。这就要求数据平台具备低成本存储和计算的能力，以降低使用成本；同时需具备弹性伸缩能力，以便用户在业务高峰期快速扩容，提升海量数据计算场景的分析效率。</li></ul><p>为给用户提供更优质的驾车体验、为业务部门提供更准确高效的数据支持，长安汽车开始对大数据平台的建设进行探索和实践。</p><h1>Hive 离线数据仓库难以支撑超大规模实时数据服务</h1><p><img src="https://cdn.selectdb.com/static/Hive_17776ddfed.jpg" alt="长安汽车车联网-Hive 离线数仓.jpg" referrerpolicy="no-referrer"></p><p>长安汽车最早以 Hive 为核心构建了数据平台架构，所处理数据包括车辆 CAN 总线数据和埋点数据，这些数据通过 4G 网络从车端传送至长安云端网关，然后由网关将数据写入 Kafka。考虑到数据量级和存储空间的限制，早期架构中的数据处理流程是将 Kafka 采集到的数据直接通过 Flink 进行处理，并通过 ETL 将结果存储到 Hive 中。下游应用使用 Spark SQL 进行逐层离线计算，并通过 Sqoop 将汇总数据导出到 MySQL 中。最终由 Hive 和 MySQL 分别为应用层提供数据服务。</p><p>尽管该架构在早期基本满足了数据处理需求，但随着车辆销量不断增长，当需要面对每天千亿级别的数据处理分析工作时，架构的问题逐步暴露出来：</p><ul><li><strong>数据时效性无法保证</strong>：Hive 的导入速度较慢，尤其在处理大规模数据时，导入时间明显增加；同时部分业务依赖 T+1 离线任务，无法满足实时数据处理需求；此外， Hive 只支持分区覆盖，不支持主键级别的数据更新，无法满足特殊场景的数据更新需求。</li><li><strong>数据查询分析延迟较高</strong>：对于 10 亿级别以上大规模表查询，Hive 查询性能较慢。通过 SparkSQL 进行数仓分层运算时，启动和任务执行时间较长，对查询响应也会产生影响。此外，数据看板、BI 展示应用无法直接从 Hive 中查询，需要将 Hive 中数据导出到 MySQL 中，由 MySQL 提供服务，受限于 Hive 导数性能，当数据量较大时，导出到 MySQL 耗时大幅增加，进而导致查询响应时间变长。此外，通过 Java 后端查询 MySQL 时，数据量过大也会影响数据的响应时间。</li></ul><p>追根究底，产生这些问题的根本原因在于早期架构无法满足超大规模实时数据场景下的数据需求，这迫使长安汽车必须进行平台升级改造。</p><h1>技术调研与选型</h1><p>长安汽车经过深入调研，决定引入开源实时数据仓库 Apache Doris ，在导入性能、实时查询等方面具有显著优势：</p><ul><li><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.selectdb.com%2Fblog%2F106" target="_blank">丰富的数据导入方式</a></strong>：Doris 提供了丰富的内置导入方式，如 Broker Load 和 Stream Load 等，可以满足实时和离线场景中数据导入需求。</li><li><strong>支持实时查询分析</strong>：Doris 大表 Join 能力突出，提供了多种分布式 Join 方式，使 Join SQL 编写具备高度灵活性，极大提升数据分析的效率。此外，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.selectdb.com%2Fblog%2F56" target="_blank">Doris 支持单节点上万 QPS 的超高并发</a>，可解决早期架构由于前端并发量过大导致查询失败的问题。</li><li><strong>较低的使用成本</strong>：Doris 兼容 MySQL 协议，开发人员可以更高效便捷的使用 MySQL 编写和执行查询语句，有效提高开发效率。基于 Doris 极简的架构，不仅让部署运维更加简单，也让扩缩容操作变的更加方便弹性。同时，Doris 拥有良好的上下游生态，可为用户提供灵活高效的数据管理和分析体验。这些优势和特性都极大的降低了 Doris 的使用成本。</li></ul><p>除此以外，<strong>开源社区的活跃度也是我们考虑的重要因素之一</strong> 。Apache Doris 吸引了大量的开发者及用户参与社区，共同贡献代码和改进 Doris，这对质量和稳定性的提高起关键作用。同时，Doris 社区为用户提供了全面的文档资料和技术支持，任何问题都可以快速得到解答和帮助。Apache Doris 的活跃程度使我们在使用时更加放心，解决了技术方面的后顾之忧。</p><h1>基于 Apache Doris 车联网数据分析平台</h1><p><img src="https://cdn.selectdb.com/static/_50f5a17a88.jpg" alt="长安汽车车联网-车联网数据分析平台.jpg" referrerpolicy="no-referrer"></p><p>在新的车联网数据分析平台中，通过 Flink 结合 Doris 的 Stream Load 功能，可直接将 Kafka 数据实时写入 Doris，同时，利用 Doris Broker Load 功能可以将 Hive 中数据导入到 Doris 中进行分析计算。在这个架构中，Apache Doris 承担了实时数据部分的计算和处理，还作为结果端直接输出数据给上游业务平台调用。</p><p>这一升级在系统上缩短了数据处理的路径，保证了大规模数据导入的时效性。此外，Apache Doris 的引入为上游应用层提供统一数据服务支持，这对于查询分析效率的提升至关重要。具体收益如下：</p><ul><li>便捷进行数据写入和迁移：Doris 支持丰富的数据导入形式，可轻松从不同的数据源中导入数据。其次，Doris 支持通过 insert into select 快速导入数据，无需进行繁重的数据迁移配置以及引入外部同步组件。</li><li>统一数据服务，秒级查询响应：通过 Doris Multi-Catalog 功能，数据分析师可直接从 Doris 上查询数据，实现秒级别查询响应。其次，Doris Join 能力优异，对于超过 1000 万的结果表查询也可实现秒级返回结果。</li><li>降低存储和计算成本：在早期架构中，使用 Flink 实时写入数据并进行压缩时需要消耗大量的计算资源。而引入 Apache Doris 后，借助 Doris ZSTD 压缩算法（3-5 倍压缩率提升），可有效降低计算和存储所需的资源，还可以将压缩处理流程放到 Doris 内部进行，无需消耗 Flink 计算资源。</li></ul><h1>从 T+1 到 T+0，实时数据提升智能驾驶体验</h1><p>CAN 总线数据在车辆分析中扮演着关键的角色，通过 CAN 总线可以读取车辆的各种状态信息，例如车速、转速、水温等。这些数据对于分析车辆的行驶数据具有重要的价值，为整车研发单位提供宝贵的参考信息。</p><p>在早期架构中，车辆 CAN 数据是按照 CAN ID 作为维度进行上传的，而在实际使用中，通常需要将不同 CAN ID 的信号按照时间对齐形成一个宽表。过去的数仓架构解决方案会先将 Kafka 中的数据写入到 Hive，此时不同 CAN ID 的数据被存储在不同的行中，需要使用 SparkSQL T+1 将数据转换为几个不同业务域的宽表。然而，这种计算方式耗时较长，SQL 语句难以维护，且数据的实时性较差。</p><p>在引入 Apache Doris 之后，我们在 Doris 中基于 Aggregate 聚合模型建立了业务域的宽表，将车辆和时间等作为主键，其他的信号字段都用<code>REPLACE_IF_NOT_NULL</code>定义。具体如下：</p><p><img src="https://cdn.selectdb.com/static/_c3afa33c84.jpg" alt="长安汽车车联网-实时数据.jpg" referrerpolicy="no-referrer"></p><p>首先，可以使用 Flink 来消费 Kafka 中按 CAN ID 维度的数据，在 Flink 中根据业务域宽表的配置对数据进行分流，将同一个 CAN ID 上的信号分配到相应的业务域宽表中。当同一个车辆在同一时间内不同 CAN ID 的数据到达同一个业务域宽表时，可以将这些数据填充到同一行中的不同 CAN ID 的信号数据字段中，实现宽表的构建（如上图 Doris 的表示例）。</p><p>在这种方式中，主要通过 Flink 对数据进行分流，将数据发送到不同的 Doris 业务域宽表中（每个宽表约有 200 个字段）。宽表的生成逻辑被放在了 Doris 中，而不是在 Flink 中进行宽表对齐的操作。这样设计的原因是不同 CAN ID 的数据上传存在一定的时间差，时间窗口过大时，使用 Flink 根据车辆和时间进行聚合可能会导致资源开销过高。</p><p><strong>通过以上方案，可以将数据的新鲜度从 T+1 提高到 T+0 。同时，对于包含约 10 亿行数据的宽表，可以达到秒级的查询效率，即在进行单车查询时，可以快速地获取查询结果。</strong></p><h1>10 亿级别 DTC 故障码实时查询，保障车辆驾驶安全</h1><p>DTC 属于 CAN 数据中的故障报文，因此对其进行单独的业务数据存储。每天的 DTC 数据量级可以达到 10 亿条，为了让业务端便捷高效的使用这些数据，快速进行故障诊断，提升车辆安全性，需要将 DTC 故障码明细数据与一张 MySQL 业务配置表进行关联。</p><p>在早期架构中，开发人员每天都需要将海量 DTC 数据先写入到 Kafka 中，然后通过 Flink 进行实时处理，并将结果存储到 Hive 中。而这种处理方式存在一些问题：</p><ul><li>面对 10 亿级数据量的表，难以将其导入 MySQL 进行实时查询。如果直接查询 Hive，则查询反馈时间会非常长，难以满足业务需求。</li><li>由于无法直接关联 MySQL 的配置表，不得不定时将配置表导入 Hive 数仓。这样做虽然能够满足数据处理的需求，但却丢失了 DTC 配置的实时性。</li></ul><p><img src="https://cdn.selectdb.com/static/_98e4700c50.jpg" alt="长安汽车车联网-实时查询.jpg" referrerpolicy="no-referrer"></p><p>在引入 Apache Doris 后，采用上图所示处理方式成功解决了早期架构存在的问题。首先将 Hive 的 DTC 明细数据通过 HDFS 文件导入的方式导入到 Doris 中，然后创建对应的 MySQL Catalog 连接，最后使用后端 Java 通过 MyBatis 连接 Doris 数据库，并使用 SQL 通过 Catalog 连接 MySQL 的 DTC 配置表进行 Join 操作，可直接实时查询返回结果。</p><p>通过 Apache Doris 成功完成了 10 亿级别数据的实时查询，并且可以对关联的 MySQL 配置表进行直接关联查询，成功实现了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.selectdb.com%2Fblog%2F31" target="_blank">配置的实时更新</a>。</p><h1>总结与规划</h1><p><strong>凭借 Apache Doris 卓越的性能，目前在长安汽车已经部署数十台机器，支撑了近十条业务线，每天处理数据规模达到百亿级别。</strong> Apache Doris 的引入为长安汽车在提升用户用车体验、实时预警车辆故障、保证车辆安全驾驶等方面带来显著成果，为其在智能化方向的技术创新提供了有力支持。</p><p>未来，长安汽车将进一步将 Apache Doris 应用在标签和指标业务，实现以下需求：</p><ul><li>自动识别冷热数据：将热数据存储在 Apache Doris 中，冷数据存储在 Hive 中，通过这种方式实现更高效的数据访问和管理。</li><li>扩大业务范围：对现有的 Doris 业务 SQL 代码进行优化，利用 Doris 的某些特性和功能，将适合这些特性的业务迁移到 Doris 中，从而提高数据处理和查询的效率。</li><li>共建社区：积极尝试使用 Doris 最新版本及新功能，在与社区保持同步的同时，不断探索和应用新的技术，反哺社区、为社区发展做出贡献。</li></ul><p>最后，衷心感谢 Apache Doris 社区和<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.selectdb.com%2F" target="_blank">飞轮科技技术团队</a>的积极支持，期待未来与大家继续深入合作，推动长安汽车智能化发展，为用户提供更好的驾车体验！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5735652/blog/10143334</guid>
            <link>https://my.oschina.net/u/5735652/blog/10143334</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[博通宣布成功收购 VMware]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">博通（Broadcom）宣布已经获得<span style="background-color:#ffffff">收购所需的所有必要监管批准，成功</span>完成了对云计算公司 VMware 的收购。</span></p><p><span style="color:#000000">中国方面于 2023 年 11 月 21 日批准了该收购，不过附带了额外的限制性条件。声明明确指出，VMWare 的服务器软件应与本地硬件保持兼容，收购不得对客户购买和使用博通的硬件产品（包括存储适配器）施加限制。</span></p><p><span style="color:#000000"><img height="266" src="https://oscimg.oschina.net/oscnet/up-304e8a97c668a6833abc83fd09a46010735.png" width="700" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">收购完成后，该公司将致力于开发解决方案，帮助客户优化其私有云、混合云和多云环境，并从任何地方运行应用程序和服务。公告表示，博通未来的工作重点将聚焦在帮助企业客户创建并现代化其私有云和混合云环境。</span></p><p><span style="color:#000000">该公司计划投资 VMware Cloud Foundation，<span style="background-color:#ffffff">这是一个作为私有云和混合云基础的软件堆栈。</span>作为收购的一部分，VMware 将在 VMware Cloud Foundation 之上提供一系列服务。</span></p><p><span style="color:#000000">博通针对 VMware Tanzu 的计划是通过加速跨各种云环境的应用程序开发、交付和管理来增强客户的业务敏捷性。该解决方案适用于 VMware Cloud Foundation 和主要的超大规模提供商，为 Spring 等应用程序开发框架提供优化。Tanzu 提高了开发人员的工作效率，同时使平台团队能够执行标准、维护安全性和跟踪性能。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.broadcom.com%2Fblog%2Fbroadcom-announces-successful-acquisition-of-vmware" target="_blank">查看官方公告</a>。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/197527/broadcom-vmware-61-billion" target="_blank">博通拟以 610 亿美元收购 VMware</a></li><li><a href="https://www.oschina.net/news/249166/eu-approves-broadcom-vmware-acquisition" target="news">博通 610 亿美元收购 VMware 已获欧盟委员会批准</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 03:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267737/broadcom-successful-acquisition-of-vmware</guid>
            <link>https://www.oschina.net/news/267737/broadcom-successful-acquisition-of-vmware</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
