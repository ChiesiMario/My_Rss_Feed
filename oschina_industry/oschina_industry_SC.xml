<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 29 Nov 2023 05:58:38 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[恭喜 Devlive DataCap 新晋一位 Committer]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>非常感谢所有对 DataCap 项目的支持和贡献，我们迎来了新的一位来自互联网行业的大数据资深运维工程师，感谢他对 DataCap 的支持以及代码的贡献。</p></blockquote><h3>关于 DataCap</h3><hr><p>DataCap 是数据转换、集成和可视化的集成软件。支持多种数据源，文件类型，大数据相关数据库，关系型数据库，NoSQL 数据库等。通过软件可以实现管理多种数据源，对该源下的数据进行各种操作转换，制作数据图表，监控数据源等各种功能。</p><h3>DataCap 喜迎一位 Committer 成员</h3><hr><table><tbody><tr><th>名字</th><th>职业</th><th>GitHub ID</th></tr></tbody><tbody><tr><td>陈文明</td><td>大数据资深运维工程师</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenwenming-zj" target="_blank">chenwenming-zj</a></td></tr></tbody></table><h4>个人描述</h4><hr><p>有多年大数据组件维护经验，对 Hadoop 集群有丰富的经验，同时对 Apache Kafka 以及各个大数据组件有一定的经验。</p><ol><li>优化过亿 Blocks 的 NameNode，优化解决集群小文件问题，减少 NameNode RPC 压力</li><li>迁移并运维过 PB 级别的 Hadoop 集群</li><li>维护管理万级别 Topic 的 Kafka 集群，自动化脚本实现分区均衡迁移，Reassignment 限速等</li></ol><h4>对 DataCap 的认识</h4><hr><p>在做公司 Clickhouse 迁移时，从 GitHub 中搜索，发现 datacap 项目，结合公司内部业务，经过一段时间运行后发现缺失，服务功能缺失 JVM 动态加载功能，因为我对 Shell 比较熟悉且做过 JVM 优化工作，特意在源码中支持了服务启动读取 JVM 配置功能。</p><h4>代码提交之路</h4><hr><ol><li>在 datacap 上提交了相关代码 (commit 57473faf4f45616a96962b7f84b9b5b81ecfbc42(HEAD-&gt;dev_get_jvm, origin/dev_get_jvm)</li></ol><h4>得到的收获</h4><hr><ol><li>作为大数据运维,很少参与工程项目，非常荣幸能在 datacap 上贡献自己微薄的代码</li><li>这次参与也体会到团队协助的力量，希望 datacap 做的越来越好</li></ol><h4>对新人的建议</h4><hr><ol><li>上线前整理 checklist</li><li>一定要写好注释，方便以后维护，要写好注释，可以写某个方法是做什么的，主要步骤是什么</li><li>测试！一定要多测试，先上测试环境，再上线</li><li>新参与项目时，可以多参考官方文档</li></ol><h4>如何参与 DataCap</h4><hr><ul><li>参考官网 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdatacap.devlive.org%2Fdeveloper_guide%2Fenv.html" target="_blank">开发者文档</a></li><li>通过 Issues 列表参与 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevlive-community%2Fdatacap%2Fissues" target="_blank">GitHub</a>&nbsp;&amp;&nbsp; <a href="https://gitee.com/devlive-community/datacap/issues">Gitee</a></li><li>加入我们的微信群&amp;钉钉群（在代码仓库中可以看到二维码）</li><li>微信公众号后台留言（搜索微信公公众号 <code>devlive-sf</code> 关注，标记 DataCap 项目给我们留言即可）</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268646</guid>
            <link>https://www.oschina.net/news/268646</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[两名玩家利用 DNF 漏洞获利近 1 亿元人民币，已被公诉]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>日前，南京市玄武区人民检察院依法对 2 名涉嫌非法获取计算机信息系统数据罪被告人提起公诉。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-22fa6166d578719921e446311de49657bc3.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月以来，被告人唐某利用深圳市腾讯计算机系统有限公司运营的网络游戏《地下城与勇士》个人揹包和仓库程序的漏洞，使用被告人蔡某某提供的脚本，利用游戏漏洞非法复制出「矛盾的结晶体」「扭曲的次元结晶」 「无瑕的金绿柱石」 等八种游戏道具，将所复制的游戏道具放在多个游戏公会仓库内，再进行出售。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-078b174cef4e6dae71ce7917a7f3ddb43e1.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月起，被告人唐某先后向王某某、王某、周某出售非法获取的游戏道具，获利人民币 9163 万余元。被告人蔡某某将被告人唐某复制的游戏道具出售给王某某，获利人民币 182 万余元。</p><p><img src="https://oscimg.oschina.net/oscnet/up-855b94f09d04a42b9687726b3241276edaa.jpg" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268643</guid>
            <link>https://www.oschina.net/news/268643</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Jenkins 任务如何迁移到 Zadig 工作流]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-645523f745c4b7ebf67fbdd388751cbe2ff.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">我们在「</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放弃 Jenkins？这么做也能云原生</a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">」一文中详细描述了如何在保留 Jenkins 的前提下，通过 Zadig 快速提升效率和工程师幸福度。然而，尽管这样做可以取得一些显著的成果，却未能实质解决运维人员对系统维护的繁重负担。实际情况中，Jenkins 的管理和维护存在诸如插件兼容性、内存泄漏、用户权限管理、脚本维护等多方面的问题，导致运维人员仍需花费大量时间进行系统维护。因此，是否可以完全弃用 Jenkins，并将现有任务全部迁移到 Zadig 上执行呢？</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>答案是肯定的</strong></span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。Zadig 不仅具备 Jenkins 的全部功能，而且能够实现软件开发过程中复杂流程的自动化。</span></p><span id="OSC_h1_1"></span><h1><strong>一、Zadig 工作流到底有何独特之处？</strong></h1><p style="margin-left:0; margin-right:0">Zadig 工作流引擎起初基于 Kubernetes 原生能力搭建，借助 Kubernertes 的资源动态分配能力，实现多任务的并发执行，相比 Jenkins 至少可以节省<span>&nbsp;</span><span><strong>50%</strong></span><span>&nbsp;</span>的资源，并可以提高至少<span>&nbsp;</span><strong><span>40%</span></strong><span>&nbsp;</span>的任务执行效率。</p><p style="margin-left:0; margin-right:0">Zadig 工作流的设计更贴合实际业务场景，支持编排产品交付过程中涉及到的任何系统和工具，如：项目管理系统、代码托管平台、测试平台、部署工具、配置管理工具、数据管理工具、审批系统、企业自建系统等等。Zadig 工作流除了具备 CI 工作流的基本能力（比如克隆代码、执行 shell 脚本、触发器、通知、缓存等等）外，支持以下更多能力：</p><ul><li><p style="margin-left:0; margin-right:0"><span>支持多服务共享构建、构建模板、利用 Serverless 资源构建</span></p></li><li><p style="margin-left:0; margin-right:0">支持多服务的并发构建、并发部署、并发测试</p></li><li><p style="margin-left:0; margin-right:0">支持项目管理中的任务状态变更、配置变更、数据变更</p></li><li><p style="margin-left:0; margin-right:0">支持蓝绿发布、金丝雀发布、分批次灰度发布、MSE 全链路和 Istio 全链路发布</p></li><li><p style="margin-left:0; margin-right:0">支持发布过程审批</p></li><li><p style="margin-left:0; margin-right:0">在执行时支持根据实际的分支策略，自由选择<span>&nbsp;</span><span style="background-color:rgba(0, 0, 0, 0.19)">Branch</span><span style="background-color:#ffffff">、</span><span style="background-color:rgba(0, 0, 0, 0.19)">PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Branch+PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Tag</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Commit</span><span>&nbsp;</span>方式进行构建</p></li><li><p style="margin-left:0; margin-right:0"><span>......</span></p></li></ul><span id="OSC_h3_2"></span><h3><span style="color:#fd2968">工作流实现方式的细节差异</span></h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box; color:rgba(0, 0, 0, 0.9); display:table; font-family:system-ui,-apple-system,&quot;system-ui&quot;,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei UI&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:657px; word-spacing:0px"><tbody><tr><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>工作流关键环节</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Jenkins</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Zadig</strong></span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>执行环境</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">手工制作环境</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">可扩展云原生环境及依赖包</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代码信息</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散配置代码源</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">统一管理多种代码来源</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>执行脚本与变量</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散编写脚本</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">统一配置脚本规范</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>定时触发</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">定时触发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">多种可定制触发策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代码变更触发</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">插件代码触发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">海量多种触发策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>工作流间的串接</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">根据工作流状态触发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">服务化灵活编排调度</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>多任务并发执行</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">编写脚本控制并发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">云原生任务 GUI 配置并发</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>任务并发数量控制</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">资源节点控制并发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">统一管理并发调度策略</span></p></td></tr></tbody></table><p>&nbsp;</p><span id="OSC_h1_3"></span><h1><strong><span style="color:#ff2968">二、如何将 Jenkins 上的配置</span></strong><strong><span style="color:#ff2968">迁移到 Zadig 上</span></strong></h1><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">下面详细介绍如何将已经在 Jenkins 上的相应配置迁移到 Zadig 上，按照不同的阶段拆解迁移的过程。</span></p><span id="OSC_h3_4"></span><h3><span style="color:#fd2968"><strong>比较一：执行环境</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">对于工作流任务依赖的环境，在 Jenkins 上需在对应节点上手工制作，而在 Zadig 上支持管理任务运行时基础环境和依赖的软件包，方便平台运维统一管控业务构建、测试等过程使用的基础资源，保障资源的安全及合规。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 任务的执行环境通过在配置中选择运行节点来指定，任务执行过程中用到的软件包需要在对应节点上安装和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b03a84b1b4a2458670650dacef1c171c016.png" referrerpolicy="no-referrer"></p><p>&nbsp;<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 任务的执行环境通过在配置中选择操作系统和依赖软件包来指定。</span></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-66a8378c904b5f89d3ee1eb8d897bdb75a2.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2683317702faa1d26a984502cad7be11112.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2acc8d6572e9822324abf804ba7b27b1fcf.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3><span style="color:#fd2968"><strong>比较二：代码信息</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">对企业内部使用的代码源，在 Jenkins 上将其分散在不同的任务中进行管理，而在 Zadig 上由管理员统一集成，以确保代码源的安全性。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">下面以 GitLab 为例，比对 Jenkins 和 Zadig 上代码信息的配置。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通过配置「源码管理」来实现构建代码源的定义。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-febe241da9a1686ed0b8f46d3f0f7b21095.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">Zadig 支持 GitLab、GitHub、Gerrit、Gitee 、其他通用 Git 代码源等代码托管平台的集成，完成集成后可列出代码库中有权限的代码仓库信息，包括 Branch、PR/MR、Tag 等等，对于开发者更加直观、体验更友好。</p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong>步骤 1：集成代码源。具体过程参考<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">GitLab 代码源集成</span></a><span>&nbsp;</span>[1]</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-999d1878b4bf86f8d9eea338e6e44eed49c.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">步骤 2：任务中配置代码信息。Zadig 构建、测试、代码扫描及通用任务均支持拉取代码信息。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-d823c5f1fe7a383959d3e9661142357980c.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_6"></span><h3><span style="color:#fd2968"><strong>比较三：执行脚本及变量</strong></span></h3><p style="margin-left:0; margin-right:0">对于服务执行脚本和变量的定义，在 Jenkins 上分散在各个任务中进行管理，而在 Zadig 上可以通过构建模版来标准化服务的构建过程，降低运维管理的负担。</p><p style="margin-left:0; margin-right:0">下面以一个多服务的代码仓库的构建并推送镜像为例，比较 Jenkins 脚本编写和 Zadig 脚本编写的差异。</p><p style="margin-left:0; margin-right:0">Jenkins 执行脚本及变量如下图所示，脚本中主要进行服务构建、镜像构建以及镜像推送过程。其中 $SERVICE、$VERSION、$PWD 变量需要在配置中定义。</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-38c673bada87035ad70e58c24f0e028dd21.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-ae40af20e6b1b72caaf08dd2bc574e43e05.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 执行脚本及变量如下图所示，Zadig 构建内置 $SERVICE、$IMAGE 变量，脚本更加简洁。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-29b021813c3330edbc16205166a2a0f7d25.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-c151777d9c835d19a639bed96ea643e76c6.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">两者之间的差异：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">1. Zadig 任务执行过程中根据工作流配置的镜像仓库自动完成<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>docker login<span>&nbsp;</span></span>操作，所以无需在脚本中声明。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">2. 在 Zadig 中镜像命名规则支持统一配置和管理，具体可参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">文档</span></a><span>&nbsp;</span>[2]，所以无需在脚本中定义<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>IMAGE<span>&nbsp;</span></span>变量的生成规则。</p><span id="OSC_h3_7"></span><h3>&nbsp;</h3><span id="OSC_h3_8"></span><h3><span style="color:#fd2968"><strong>比较四：定时触发</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">工作流任务的定时执行场景比较常见，Jenkins 针对工作流任务的默认参数可以配置定时触发，而 Zadig 上除了可以指定触发时间周期外，还支持配置任务的执行变量，更加灵活。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 触发器支持配置 Cron 表达式来定时触发任务。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-916400c25cec910faaf5caa14f50bb82bb0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 定时器支持多种触发方式，包括定时循环、间隔循环和 Cron 表达式，以满足各种定时触发的需求。此外，相较于 Jenkins 使用默认参数执行，Zadig 定时器允许配置不同的工作流执行变量，提供更灵活的定制选项。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-5a857454ef740f8ecc70b00f4ebc517306b.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>&nbsp;</h3><span id="OSC_h3_10"></span><h3><span style="color:#fd2968"><strong>比较五：代码变更触发</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">开发者提交代码自动触发工作流执行是持续集成和持续部署（CI/CD）中常见的实践。在 Jenkins 中，为实现这一需求，需要依赖插件。相比之下，Zadig 则内建 Git 触发器功能，无需额外插件，通过灵活的配置满足各种触发场景，从而提升整体效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 可以通过安装插件实现代码变更触发任务的执行。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-8969ed3234ff36d444ddfcb159cb3ac0191.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig Git 触发器支持代码变更触发，通过定义代码信息、触发事件、代码文件目录以及工作流执行变量，来配置触发规则。这使得在代码库发生变更时，可以灵活而精准地触发相应的工作流，以满足各种复杂的自动化流程的执行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1444" src="https://oscimg.oschina.net/oscnet/up-0b6f382446af82a670dc25d831d63126c0a.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除了上述两种触发器，Zadig 还支持多种其他触发器，包括「JIRA 触发器」、「飞书项目触发器」和「通用触发器」等，使用详情参考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文档</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[3]。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><span id="OSC_h3_11"></span><h3><span style="color:#fd2968"><strong>比较六：工作流之间的串接编排</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">企业内部对于一些服务化的任务，例如安全扫描服务，需要进行统一管理并在多个工作流中使用。通常，这些任务由安全部门或平台团队进行统一管理，然后在各个业务工作流中进行调用。为了降低实施和后续维护的负担，一般选择采用多工作流串接的方式，以实现更高效的任务调度和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通过配置「构建其他工程」来触发其他任务。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-6af1ce2aae3f7eeb01d1a3f2b037c0589c9.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 的工作流本身采用了服务化的设计，使得测试、代码扫描等配置可以实现集中化的管理，然后轻松挂接到各个工作流中使用。这种设计使得配置和管理变得更加高效，同时在不同的工作流中灵活地应用这些服务，提高了整体工作流的可维护性和可扩展性。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-5dd0db5d0c2484d09a8fe71af3c8ab26fd2.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_12"></span><h3>&nbsp;</h3><span id="OSC_h3_13"></span><h3><span style="color:#fd2968"><strong>比较七：多任务并发执行</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">多任务并发执行在复杂的软件开发流程、持续集成和部署中尤为关键。这能够显著减少工程师的等待时间，提高整体研发效率，从而加速项目进程，更灵活地应对不断变化的需求。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 流水线支持不同的 "stage" 并发执行，详细配置请参考以下结构。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="582" src="https://oscimg.oschina.net/oscnet/up-3be3980e313fc5d5e0caa6dfb825822a50a.png" width="822" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 工作流仅需在「阶段」上打开「并发执行」的开关，即可实现阶段内多个任务的并发执行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-df878ddc393fe89803cc5ccd6adb4fbc5c8.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-19fbbbb66f8dfb1f131220b679faf5efc10.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_14"></span><h3>&nbsp;</h3><span id="OSC_h3_15"></span><h3><span style="color:#fd2968"><strong>比较八：任务并发数量控制</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 和 Zadig 均支持同一工作流的多个任务并发执行。Jenkins 通过资源节点来控制并发数量，而 Zadig 则统一管理并发调度策略，具有灵活控制任务优先级能力。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通过在节点上配置「任务执行数量」来控制多个任务的并发，单个 Jenkins 任务的并发可以在任务配置中指定。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-16aee0879ad6a67f8bb0a2a8f6d9e645af0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2a9a5bef154eeb56b5410d206a91d0bbb51.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 通过在任务配置中修改「任务并发数量设置」实现并发数控制，其中「工作流任务并发数量」控制同时执行的工作流任务数，「单任务服务并发数」控制同一个工作流任务中服务的并发数量。除此之外，面对低优先级任务占用全局并发数量的场景，可以通过配置工作流的「执行并发数」来解决。Zadig 具有更自由的任务并发数控制，能够灵活应对企业内部复杂的任务并发场景。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-4acde3574c2e0b7e1f4d8fad7f01f629f9f.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-e7872ba2b6aec2838c8c1ad71c7ccdc7f78.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除以上能力外，Jenkins 通过插件来扩展更多的能力，而 Zadig 可以通过开发「自定义任务」，和企业自建系统打通，来满足企业复杂流程，具体开发过程参考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文档</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[4]。</span></p><span id="OSC_h4_16"></span><h4><strong>参考链接</strong></h4><p style="margin-left:0; margin-right:0; text-align:left"><span>[1]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/codehost/gitlab/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left"><span>[2]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/service/k8s/#策略配置</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[3]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/workflow-trigger/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[4]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/custom-task/</span></a></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="margin-left:0px; margin-right:0px; text-align:center"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">立即体验 Zadig V2.0 新架构，开启高效交付之旅！🚀&nbsp;</span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968">Zadig 开放，链接，专业</span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b3270466a68bf98a90c5d08b91cd0ebc98c.png" referrerpolicy="no-referrer"></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" target="_blank">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig">Zadig 在 Gitee</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><strong>推荐阅读：</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" target="_blank">是时候和 Jenkins 说再见了</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放弃 Jenkins？这么做也能云原生</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491064%26idx%3D1%26sn%3D4bbe7bfe944feaa8b44a08e6156e04e2%26chksm%3Dcfb45158f8c3d84e40d44d2dd9228a844b9bcdeea1fe32a7b0ae41b9af982c11319a38f6675e%26scene%3D21%23wechat_redirect" target="_blank">Zadig 推出环境睡眠，平均节省一半测试资源</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" target="_blank">Zadig vs. Jenkins 详细比对：时代的选择与开发者之选</a>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10314033</guid>
            <link>https://my.oschina.net/koderover/blog/10314033</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 8 仍被广泛使用，占比 50%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">JetBrains&nbsp;最新发布的 2023 年度开发者生态系统调查报告指出，在面向 Java 开发者的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">调查</a>中，</span>更多的开发人员选择在生产中使用 Java 17，而不是 Java 11。Docker 逐渐成为打包 Web 应用程序的首选，且 Spring 和 Spring Boot 的使用率遥遥领先。</span></p><p><span style="color:#000000">具体而言，开发者最常使用的&nbsp;Java 版本是&nbsp;Java 8，占比高达&nbsp;50%；其次分别是&nbsp;Java 17 (45%)、Java 11(38%) 以及&nbsp;Java 20 (11%)。</span></p><p><span style="color:#000000">「很遗憾看到这么多人仍在使用 Java 8（及更旧的版本）。我想知道是什么阻碍了他们升级到更新的版本并获得强大的新语言功能，以及我们如何帮助他们将代码迁移到更新的 Java 版本。」</span></p><p><img height="356" src="https://oscimg.oschina.net/oscnet/up-d79d8c2307c0972948764928b7719266a39.png" width="300" referrerpolicy="no-referrer"></p><p>其他一些发现包括：</p><ul><li><span style="color:#000000">58% 的受访者表示，他们打包 Web 应用程序的方式是&nbsp;Docker，还有 56% 使用的是<span style="background-color:#ffffff">嵌入式服务器。</span></span></li><li>最常用的是单元测试框架是&nbsp;JUnit，以 84% 的占比稳居首位。</li><li><span style="color:#000000">Web 框架方面，72</span>% 开发者正在使用&nbsp;Spring Boot。</li><li>Java EE 8 / Jakarta EE 8 使用率为 33%，Jakarta EE 10 以 10% 的使用率超过了 Jakarta EE 9 的 7%。</li><li>Java 开发中使用最多的&nbsp;IDE/编辑器是 IntelliJ IDEA，占比 78%。</li><li><span style="background-color:#ffffff; color:#19191c">JavaScript、SQL、Python 和 HTML / CSS 是那些使用 Java 作为主要语言之一的人中最常用的语言和技术。</span></li></ul><p><img height="184" src="https://oscimg.oschina.net/oscnet/up-7a087c1c4d8482dffc48bd3f1d157872f49.png" width="500" referrerpolicy="no-referrer"></p><p>更多详情可查看<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">此处</a></strong>。</p><p><strong>相关阅读：</strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/267606/jetbrains-devecosystem-2023" target="_blank">JetBrains 报告：Scala/Go/Kotlin 薪酬最高，Objective-C 日薄西山</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268636/devecosystem-2023-java8</guid>
            <link>https://www.oschina.net/news/268636/devecosystem-2023-java8</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴史上最严重服务故障，罪魁祸首是底层软件 or 「降本增笑」？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 27 日晚间，<u><a href="https://www.oschina.net/news/268480">滴滴因系统故障导致 App 服务异常</a></u>，不显示定位且无法打车。11 月 27 日晚，滴滴出行进行了回复：非常抱歉，由于系统故障。</p><p>2023 年 11 月 28 日早间，滴滴出行消息称，网约车等服务已恢复，骑车等在陆续修复中。11 月 28 日，在滴滴发出公告的同时，记者在上海、深圳等地使用滴滴呼叫网约车，发现网约车功能并未恢复使用，网络加载异常，仍无法打车。11 月 28 日，滴滴向记者回应称，网约车服务已恢复，司机乘客权益陆续恢复补发。</p><p><strong>11 月 29 日，滴滴再次发文致歉，称初步确定事故起因是底层系统软件发生故障</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-de730d329966eb2d4a658c5008f11be82a7.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuMAAaUEl" target="_blank">https://weibo.com/2838754010/NuMAAaUEl</a></em></u></p></blockquote><p>在滴滴官方发布这份公告之前，已经有资深 IT 技术人士分析：「从表现上看，打车、共享单车全挂，不同的业务板块之间应该是有隔离的，说明问题出在更加底层的基础设施。攻击者一般只能访问到应用层，基础设施访问不到。要么是被攻击者打穿，要么是自己系统操作不慎挂了。即便是前者，也算是一种系统缺陷，才会被打穿。」</p><p>360 安全专家认为，滴滴闪崩背后的技术原因可能有六种：</p><p>第一，系统更新升级过程中出现了编程错误、逻辑错误或未处理的异常情况：一般情况下，互联网厂商发布更新都会在晚上，与滴滴发生故障的时间也能对应，当然业务升级维护是放量更新，但现在滴滴全平台、全业务都故障了，说明肯定是他「家里」的问题。</p><p>第二，服务器故障：比如滴滴的核心机房，可能恒温恒湿环境出了问题，导致服务器过热、CPU 烧了，或者核心机房所在地发生了自然灾害如地震、洪水、海啸等，这种情况下，硬件需要重新更换，里面的服务软件也需要重新配置，恢复周期相对较长，但这个可能性比较小。</p><p>第三，第三方服务故障：滴滴的后台架构可能使用了第三方服务或者组件。如果第三方出了问题，也可能会影响滴滴的正常运行。但出于安全性考虑，滴滴可能不会将核心业务托管给第三方，不过这个可能性也较小。</p><p>第四，DDOS 攻击：黑客采用分布式拒绝服务的方式，抢占了大量的服务器资源，导致用户无法访问，但这个不太可能，因为 DDos 不会导致数据出错，而且滴滴从体量上来说，有足够的成本和能力去对抗。</p><p>第五，其他网络攻击：某些黑灰产团伙可能会通过拖库盗取数据，然后在暗网上售卖，在这个过程中不排除会有误操作，破坏了数据库。</p><p>第六，勒索病毒：网络攻击黑客对滴滴的底层数据、业务代码进行了加密。据披露现象，用户的账单和打车数据都算错了，存在一定可能是滴滴为了避免更大损失主动暂停了业务。近期勒索攻击事件屡屡发生，月初，某金融机构就是因为遭遇勒索病毒攻击造成了业务停摆。</p><p>不过也有网络安全公司专家认为，如果是来自外部的黑客攻击，公司一般会在第一时间进行声明。他猜测更集中于滴滴发生了内部重大业务调整，或有新业务接入原系统，但没有做好预案，导致关联业务或关联系统出现重大故障，这是大公司系统故障最常见的原因。</p><p>因此对于滴滴此次大规模的长时间故障，有行业人士认为，<strong>降本增效可能也是原因之一</strong>。</p><p>该人士认为，<strong>互联网公司核心业务频繁宕机，且长时间宕机，是降本增效的附属品之一。系统投资少了，维护资源少了，程序员更换频繁了，BUG 就多</strong>。</p><p>他举例称，一般在业务上行阶段都有冗余，为了迎接随时爆发的订单，上行阶段要维持负载的上限不能过大，比如平时 70%，这样遇到一个小爆发不用担心会出问题，足以应对小高峰；但是下行期的逻辑就不同了，负载很高的时候抗一抗就行了，虽然后面遇到小高峰可能会难受，但是随着时间的推移总体负载会下降。</p><hr><p>最后来看一下网传的消息，有同行说滴滴这次严重故障是 K8S 的问题导致，当时 SRE 工程师定位了三个小时没定位到。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1129/113103_VOdZ_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c6757d79e017225bd7d61ecc642362132f.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268635</guid>
            <link>https://www.oschina.net/news/268635</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鸿祎：「360 无法卸载」是彻底的谣言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>俞敏洪在公众号更新了与周鸿祎的采访对话。对话中双方聊到了大众对 360 的误解，<strong>周鸿祎表示，360 不能卸载是一个彻底的谣言。</strong></p><blockquote><p><img height="1206" src="https://static.oschina.net/uploads/space/2023/1129/110144_gNAL_2720166.png" width="1480" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fpd2R8Y5Q6HtYODNfRvcbnA" target="_blank">https://mp.weixin.qq.com/s/pd2R8Y5Q6HtYODNfRvcbnA</a></u></em></p></blockquote><p>周鸿祎称，因为 360 提供了完整的卸载过程。有的小朋友总是试图用一个 Windows 的删除想把 360 的目录删掉，这样其实是删不掉的，所以大家就会有一个错误的印象，好像 360 删不掉。</p><p>但是你想，360 在电脑上是起保护作用的，最恨 360 的是什么？是各种黑产、黑客，现在无论是国外的网军做攻击，还是国内的勒索软件做攻击，因为 360 装的太广，所以他们很重要的一个任务就是想办法让 360 失效，要不然 360 一报警他们就出问题了，<strong>所以你随便用一个 Windows 做一个拖拽，把它移垃圾箱里肯定是不行的</strong>。</p><p>甚至<strong>现在很多国外的攻击软件试图调动 360 自己删自己的过程，因为 360 提供了自己卸载自己的能力，所以在用户卸载的时候，我们要区别是用户真的在卸载，还是被攻击了模拟用户在卸载</strong>，因为很多软件可以模拟用户的操作。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-75c92d5bced77262bd78834927c10f9975c.png" referrerpolicy="no-referrer"></p><p>我们为了做自我保护，可能有一个比较烦琐的提示过程，就是这样以讹传讹，好像就变成了 360 不能卸载，这是一个彻底的谣言。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268632</guid>
            <link>https://www.oschina.net/news/268632</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RHEL 10 将移除 X.org，默认使用 Wayland]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/news/240614/rhel10-deprecated-xorg-server">根据此前的报道</a></u>，RHEL 9 已经标记将弃用 X.org 显示服务器。现在红帽官方<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redhat.com%2Fde%2Fblog%2Frhel-10-plans-wayland-and-xorg-server" target="_blank">正式宣布</a></u>，计划于 2025 年上半年发布的&nbsp;<strong>RHEL 10 将移除 X.org，默认使用 Wayland</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1d62539558b9d502f364802ade1ca24877d.png" referrerpolicy="no-referrer"></p></blockquote><p>Red Hat 工程经理 Carlos Soriano Sanchez 说道：「从 X Window System 到 Wayland 的过渡已经持续了 15 年。Red Hat 从一开始就参与其中。随着时间的推移，人们发现 X11 协议和 X.org 服务器存在需要解决的基础问题，而 Wayland 就是解决方案。如今，Wayland 已被公认为事实上的窗口和显示基础设施解决方案。」</p><p>他还表示，「Xorg Server」和「X11」不是同义词，X11 是一个通过 Xwayland 支持的协议，而 Xorg Server 是 X11 协议的实现之一。虽然 RHEL 10 默认使用 Wayland，但 X11 客户端支持可通过 XWayland 来实现。</p><p>因此，RHEL 10 将使用 Xwayland 处理绝大部分尚未移植到 Wayland 的 X11 客户端。但如果用户必须 X.org，可以在其软件生命周期内继续用 RHEL 9。</p><p>Red Hat 认为，这一决定将使他们能够专注于现代化的软件栈和生态，解决诸如 HDR、增强安全性、混合低密度和高密度显示设置、更好的 GPU/显示器热插拔、更好的手势和滚动等问题。</p><p>有人认为，Red Hat 这一决策基本上是在宣布&nbsp;<strong style="color:#121212"> X.Org Server 事实上已死亡。</strong>因为 Red Hat 工程师通常负责管理新的 X.Org Server 版本以及进行各种开发。除了 XWayland 之外，他们已多年没有发布过重要 X.Org Server 版本更新。而且除了推出安全修复程序或严重的错误修复程序之外，没有人主动管理新功能版本甚至点版本。</p><p>到 2025 年，除了为 RHEL9 客户提供安全/错误处理之外，Red Hat 将更不愿意为 X.Org Server 投入开发资源。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</guid>
            <link>https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 内核安全架构 & 软件包构建方案 | 2023-11 月 WHLUG 回顾]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 26 日下午，由 deepin 社区主办的武汉 Linux 用户组沙龙（WHLUG）在新青年创客咖啡举行，吸引了来自武汉地区诸多 Linux 爱好者线下参与，10 余名外地伙伴线上参与，大家共同探讨技术话题，分享技术经验和见解，现场气氛热烈。现在就让我们一起来回顾本次活动的精彩瞬间吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539076258_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011569946326.png" referrerpolicy="no-referrer"></p><p>本次沙龙上，内核研发工程师 Avenger_285714 为大家分享了 Linux 内核安全框架相关内容。Avenger_285714 详细介绍了当前内核所包含的 SELinux 安全子系统、Apparmor、Smack、Tomoyo 等安全模块，以及 IMA 完整性校验的原理和可用于不可变发行版的 loapin 模块。同时分享了统信自研的内核安全机制：UOS Security Kernel Interface 和 elfverify 应用程序签名、filearmor 文件保护和 SELinux 扩展，并与在场的小伙伴们讨论了基于 inode 和基于路径的安全措施之间的优劣及其应用前景。</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539468047_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570901113.png" referrerpolicy="no-referrer"></p><p>随后，Shiroko 为大家展示了他近期新「折腾」出来的打包工具 ShiroDEB。据 Shiroko 介绍，ShiroDEB 作为一种软件包构建方案，由构建工具和构建脚本组成。</p><p>为了解决依赖版本不同的问题，ShiroDEB 还可通过构建素材的形式将自建库或其他工具容纳到构建流程中，并会自动创建包含了自建库等的软件包。此外，也提供了一个可以调用构建素材的交互终端以供开发者使用。期待能够接收社区用户贡献的构建脚本，形成属于社区的用户软件仓库。</p><p>项目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/shirodeb</a>&nbsp;</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281540109947_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570644077.png" referrerpolicy="no-referrer"></p><p>WHLUG 的创办希望能够帮助 Linux 社区的每一个人都可以充分地交流经验和心得，本月活动的主题分享资料已经上传至 Github，供大家下载：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/deepin-community/.WHLUG/tree/master/WHLUG-2023.11</a></p><p>我们期待 12 月的活动能够聚集更多的爱好者！如果你有兴趣在 WHLUG 上做分享，或是有更多意见和建议让 WHLUG 变得更好，请告诉我们吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281614425541_1.jpeg" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268627</guid>
            <link>https://www.oschina.net/news/268627</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高手问答第 310 期 —— 软件发展史上那些不为人知的故事]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4855753_2331437">高手问答第 310 期 —— 软件发展史上那些不为人知的故事</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4855753" class="__user"><span>OSC 哒哒</span></a><span class="org-label org-label--simple primary" data-tooltip="认证官方账号"><i class="oicon oicon-org"></i></span> 发布于，昨天 14:26
                    </div><div class="item">阅读 244</div><div class="item collect-btn " data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331437" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4855753_2331437#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">2</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手问答</a></div><div class="content" id="articleContent"><p><span><span><span><span>今天的世界是运行在软件之上的。伟大的软件不是一朝一夕发明出来的，而是人类文明长期积累的结果。可以</span></span><span><span>说</span></span><span><span>，软件文明就是人类文明在电气化时代的延续。那么软件发展史上有哪些关键事件和不为人知的故事呢？</span></span></span></span></p><p><strong><span><span><span><span>本期高手问答我们一起探讨「软件发展史上那些不为人知的故事」，做客高手问答的嘉宾是新书《软件简史》的作者<a href="https://my.oschina.net/u/6992678" rel="nofollow">张银奎</a>老师。</span></span></span></span></strong></p><p><span style="background-color:#ffffff; color:#000000">可讨论的问题包括但不限于：</span></p><ul><li><span><span><span><span>世界上第一个计算机程序是怎么诞生的？</span></span></span></span></li><li><span><span><span><span>两位现代计算机之父图灵与冯·诺依曼有哪些交集和故事？</span></span></span></span></li><li><span><span><span><span>古老的提花织布机与计算机之间有什么渊源？</span></span></span></span></li><li><span><span><span><span>在 ENIAC 出现之前，还有更早的计算机吗？</span></span></span></span></li><li><span><span><span><span>最早的内存采用的是什么技术？</span></span></span></span></li></ul><p><span><span><span><span>有其他相关的问题，也欢迎提问。</span></span></span></span></p><hr><h2>嘉宾介绍</h2><p><span><span><strong><span><span><strong>张银奎</strong></span></span></strong><span><span>&nbsp;，国内知名的调试技术专家。毕业于上海交通大学信息与控制工程系，长期从事软件开发和研究工作，曾在英特尔工作 13 年，对 IA-32 架构、操作系统内核、驱动程序，尤其是对软件调试有较深入的研究。著有畅销书《软件调试》《格蠹汇编》等，格蠹科技（nanocode.cn）创始人，高端调试网站（advdbg.org）创建者。翻译（合译）作品有《二十一世纪机器人》《观止——微软创建 NT 和未来的夺命狂奔》《数据挖掘原理》《机器学习》《人工智能：复杂问题求解的结构和策略》等。</span></span></span></span></p><p><span><span><span><span><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-6c20792bfc000c6d2385b84b080ce1a071b.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>为鼓励踊跃提问，我们会在问答结束后从提问者中抽取 3 名幸运会员赠予《</span></span><span><span>软件简史</span></span><span><span>》（上下册）。</span></span></span></span></p><p><span><span><span><span><img alt="" height="328" src="https://oscimg.oschina.net/oscnet/up-4b1d01a7d62014760f9f4ba80aa1440ef55.png" width="250" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>《</span></span><span><span>软件简史</span></span><span><span>》天猫有售：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdetail.tmall.com%2Fitem.htm%3Fid%3D750806496720" rel="nofollow" target="_blank"><span><span>https://detail.tmall.com/item.htm?id=750806496720</span></span></a></span></span></p><p><span><span><span><span>OSChina 高手问答一贯的风格，不欢迎任何与主题无关的讨论和喷子。</span></span></span></span></p><p><span><span><span><span>下面欢迎大家向 <a href="https://my.oschina.net/u/6992678" rel="nofollow">张银奎</a> 老师积极提问，直接回帖提问即可。</span></span></span></span></p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331437" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331437" data-obj-type="2" data-url="https://www.oschina.net/question/4855753_2331437"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4855753_2331437</guid>
            <link>https://www.oschina.net/question/4855753_2331437</link>
        </item>
        <item>
            <title>
                <![CDATA[Builder —— 拖放式 Headless CMS]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Builder 是一个适用于 React、Vue、Svelte、Qwik 等的拖放式&nbsp;headless CMS。与任何网站或应用程序集成，使用代码库中已有的组件进行拖放。</p><p><img alt="" height="415" src="https://static.oschina.net/uploads/space/2023/1127/145541_fgX7_4252687.gif" width="500" referrerpolicy="no-referrer"></p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody><tr><td style="border-style:solid; border-width:1px">Register components</td><td style="border-style:solid; border-width:1px">Rendered your visually created content</td></tr><tr><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-comment)">// Register our heading component for use in</span><span style="color:var(--color-prettylights-syntax-comment)">// the visual editor</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>props</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">className</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"my-heading"</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>{</span><span>props</span><span>.</span><span style="color:var(--color-prettylights-syntax-constant)">title</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">registerComponent</span><span>(</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span>,</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'Heading'</span><span>,</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">inputs</span>: <span>[</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'title'</span><span>,</span><span style="color:var(--color-prettylights-syntax-constant)">type</span>: <span style="color:var(--color-prettylights-syntax-string)">'text'</span><span>}</span><span>]</span><span>}</span><span>)</span></pre><div>&nbsp;</div></div></td><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span>,</span><span>builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">init</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'YOUR_KEY'</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-entity)">getStaticProps</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-keyword)">async</span><span>(</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span>{</span> 
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">props</span>: <span>{</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">builderJson</span>: <span style="color:var(--color-prettylights-syntax-keyword)">await</span><span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">get</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'page'</span><span>,</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">url</span>: <span style="color:var(--color-prettylights-syntax-string)">'/'</span><span>}</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">promise</span><span>(</span><span>)</span>
&nbsp;&nbsp;<span>}</span><span>}</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">function</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderPage</span><span>(</span><span>{</span> builderJson <span>}</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-keyword)">return</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourHeader</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span style="color:var(--color-prettylights-syntax-constant)">model</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"page"</span><span style="color:var(--color-prettylights-syntax-constant)">content</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>{</span><span>builderJson</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourFooter</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>}</span></pre><div>&nbsp;</div></div></td></tr></tbody></table><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody></tbody></table><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/builder</guid>
            <link>https://www.oschina.net/p/builder</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 阿里云自主研发的云原生数据库产品 PolarDB for PostgreSQL]]>
            </title>
            <description>
                <![CDATA[<div align="center"><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb.png" alt="logo" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#polardb-for-postgresql"></a>PolarDB for PostgreSQL</h1><p><strong>阿里云自主研发的云原生数据库产品</strong></p><h4><a id="user-content-english--简体中文" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#english--%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/README.md">English</a> | 简体中文</h4><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://img.shields.io/badge/%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99-blueviolet?style=for-the-badge&amp;logo=alibabacloud" alt="official" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_STABLE"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_STABLE?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-stable" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_DEV"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_DEV?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-dev" referrerpolicy="no-referrer"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE"><img src="https://img.shields.io/badge/license-Apache--2.0-blue?style=for-the-badge&amp;logo=apache" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fissues"><img src="https://img.shields.io/github/issues/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-issues" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fpulls"><img src="https://img.shields.io/github/issues-pr/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-pullrequest" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fnetwork%2Fmembers"><img src="https://img.shields.io/github/forks/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-forks" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fstargazers"><img src="https://img.shields.io/github/stars/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://img.shields.io/github/contributors/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-contributors" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fopensource.alibaba.com%2Fcontribution_leaderboard%2Fdetails%3FprojectValue%3Dpolardb-pg"><img src="https://img.shields.io/badge/PolarDB--for--PostgreSQL-%E6%9F%A5%E7%9C%8B%E8%B4%A1%E7%8C%AE%E6%8E%92%E8%A1%8C%E6%A6%9C-orange?style=for-the-badge" alt="Leaderboard" referrerpolicy="no-referrer"></a></p></div><h2><a id="user-content-什么是-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BB%80%E4%B9%88%E6%98%AF-polardb-for-postgresql"></a>什么是 PolarDB for PostgreSQL</h2><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/zh/imgs/1_polardb_architecture.png" alt="arch.png" referrerpolicy="no-referrer"></p><p>PolarDB for PostgreSQL（下文简称为 PolarDB）是一款阿里云自主研发的云原生数据库产品，100% 兼容 PostgreSQL，采用基于 Shared-Storage 的存储计算分离架构，具有极致弹性、毫秒级延迟、HTAP 的能力。</p><ol><li>极致弹性：存储与计算能力均可独立地横向扩展。
<ul><li>当计算能力不够时，可以单独扩展计算集群，数据无需复制。</li><li>当存储容量或 I/O 不够时，可以单独扩展存储集群，而不中断业务。</li></ul></li><li>毫秒级延迟：
<ul><li>WAL 日志存储在共享存储上，RW 到所有 RO 之间仅复制 WAL 的元数据。</li><li>独创的 <em>LogIndex</em> 技术，实现了 Lazy 回放和 Parallel 回放，理论上最大程度地缩小了 RW 和 RO 节点间的延迟。</li></ul></li><li>HTAP 能力：基于 Shared-Storage 的分布式并行执行框架，加速在 OLTP 场景下的 OLAP 查询。一套 OLTP 型的数据，可支持 2 套计算引擎：
<ul><li>单机执行引擎：处理高并发的 TP 型负载。</li><li>分布式执行引擎：处理大查询的 AP 型负载。</li></ul></li></ol><p>PolarDB 还支持时空、GIS、图像、向量、搜索、图谱等多模创新特性，应对企业对数据处理日新月异的需求。</p><h2><a id="user-content-分支说明" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%88%86%E6%94%AF%E8%AF%B4%E6%98%8E"></a>分支说明</h2><p><code>POLARDB_11_STABLE</code> 为稳定分支，持存储计算分离的云原生形态。 <code>distribute</code> 分支支持分布式形态。</p><h2><a id="user-content-产品架构" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BA%A7%E5%93%81%E6%9E%B6%E6%9E%84"></a>产品架构</h2><p>PolarDB 采用了基于 Shared-Storage 的存储计算分离架构。数据库由传统的 Share-Nothing 架构，转变成了 Shared-Storage 架构。由原来的 N 份计算 + N 份存储，转变成了 N 份计算 + 1 份存储。虽然共享存储上数据是一份，但是数据在各节点内存中的状态是不同的，需要通过内存状态的同步来维护数据的一致性；同时主节点在刷脏时也需要做协调，避免只读节点读取到超前的 <strong>「未来页面」</strong>，也要避免只读节点读取到过时的没有在内存中被正确回放的 <strong>「过去页面」</strong>。为了解决该问题，PolarDB 创造性地设计了 <em>LogIndex</em> 数据结构来维护页面的回放历史，该结构能够实现主节点与只读节点之间的同步。</p><p>在存储计算分离后，I/O 单路延迟变大的同时，I/O 的吞吐也变大了。在处理分析型查询时，仅使用单个只读节点无法发挥出存储侧的大 I/O 带宽优势，也无法利用其他只读节点的 CPU、内存和 I/O 资源。为了解决该问题，PolarDB 研发了基于 Shared-Storage 的并行执行引擎，能够在 SQL 级别上弹性利用任意数目的 CPU 来加速分析查询，支持 HTAP 的混合负载场景。</p><p>详情请查阅 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Ftheory%2Farch-overview.html">产品架构</a>。</p><h2><a id="user-content-快速入门" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入门</h2><p>如果您已安装 Docker，那么可以从 DockerHub 上拉取 PolarDB for PostgreSQL 的，本地存储实例镜像，创建、运行并进入容器，然后直接使用 PolarDB 实例：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 拉取单节点 PolarDB 镜像</span></span><span id="LC2" class="line">docker pull polardb/polardb_pg_local_instance:single</span><span id="LC3" class="line"><span class="c"># 创建运行并进入容器</span></span><span id="LC4" class="line">docker run <span class="nt">-it</span><span class="nt">--cap-add</span><span class="o">=</span>SYS_PTRACE <span class="nt">--privileged</span><span class="o">=</span><span class="nb">true</span><span class="nt">--name</span> polardb_pg_single polardb/polardb_pg_local_instance:single bash</span><span id="LC5" class="line"><span class="c"># 测试实例可用性</span></span><span id="LC6" class="line">psql <span class="nt">-h</span> 127.0.0.1 <span class="nt">-c</span><span class="s1">'select version();'</span></span><span id="LC7" class="line">            version</span><span id="LC8" class="line"><span class="nt">--------------------------------</span></span><span id="LC9" class="line"> PostgreSQL 11.9 <span class="o">(</span>POLARDB 11.9<span class="o">)</span></span><span id="LC10" class="line"><span class="o">(</span>1 row<span class="o">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>对于更多进阶部署方式，请移步在线文档中的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fdeploy.html">进阶部署</a>。在部署前，我们建议您先了解一下 PolarDB for PostgreSQL 的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fintroduction.html">架构简介</a>。</p><h2><a id="user-content-文档" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E6%96%87%E6%A1%A3"></a>文档</h2><p>请移步本项目的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2F">在线文档网站</a> 查阅完整文档。</p><p>如果需要在本地预览或开发文档，请参考 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fcontributing%2Fcontributing-polardb-docs.html">贡献文档</a>。</p><h2><a id="user-content-参与贡献" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>参与贡献</h2><p>我们诚挚欢迎社区参与 PolarDB 的贡献，无论是代码还是文档。</p><p>以下是贡献者列表（由 <a href="https://gitee.com/link?target=https%3A%2F%2Fcontrib.rocks">contrib.rocks</a> 支持）：</p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://contrib.rocks/image?repo=ApsaraDB/PolarDB-for-PostgreSQL" referrerpolicy="no-referrer"></a><h2><a id="user-content-软件许可" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF"></a>软件许可</h2><p>PolarDB for PostgreSQL 的源代码遵循 Apache 2.0 许可证，基于遵循 PostgreSQL 许可证的 PostgreSQL 开发。其中还包含了部分遵循其它开源许可证的第三方组件。请移步 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE">LICENSE</a> 和 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/NOTICE">NOTICE</a> 了解更多信息。</p><h2><a id="user-content-致谢" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%87%B4%E8%B0%A2"></a>致谢</h2><p>部分代码和设计思路参考了其他开源项目，例如：PG-XC/XL (pgxc_ctl)、TBase (部分基于时间戳的 vacuum 和 MVCC)、Greenplum 以及 Citus (pg_cron)。感谢以上开源项目的贡献。</p><h2><a id="user-content-加入社区" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8A%A0%E5%85%A5%E7%A4%BE%E5%8C%BA"></a>加入社区</h2><ul><li><p>PolarDB PostgreSQL Slack：<a href="https://gitee.com/link?target=https%3A%2F%2Fapp.slack.com%2Fclient%2FT023NM10KGE%2FC023VEMKS02">https://app.slack.com/client/T023NM10KGE/C023VEMKS02</a></p></li><li><p>使用钉钉扫描如下二维码，加入 PolarDB 技术推广组钉钉群</p><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb_group.png" alt="polardb_group" referrerpolicy="no-referrer"></p></li></ul><hr><p>Copyright © Alibaba Group, Inc.</p>]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/polardb/PolarDB-for-PostgreSQL</guid>
            <link>https://gitee.com/polardb/PolarDB-for-PostgreSQL</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | PostgreSQL 数据脱敏方式盘点]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>数据脱敏是一种广泛采用的保护敏感数据（如信用卡，社保卡，地址等信息）的方法。脱敏数据不仅仅是为了保护你和客户的数据安全，在一些情况下，法律也有相应要求，最著名的例子就是 GDPR。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4dab30bd6a2aa59a8d109180e68fa97cd9f.png" alt="" referrerpolicy="no-referrer"></p><p>市面上也有各种不同的数据脱敏方法，例如遮挡，替换，洗牌和加密，适用于不同场景。通过对敏感数据进行脱敏处理，组织能够降低数据泄露和未经授权访问的风险，同时仍然能够使用真实数据进行开发、测试和分析等任务。</p><p>本文来盘点一下 PostgreSQL 的几种常用脱敏方式。</p><h2>PostgreSQL Anonymizer</h2><p><img src="https://oscimg.oschina.net/oscnet/up-3aad9a7f7d2e9df748828641b923a88fb25.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.postgresql.org%2Fabout%2Fnews%2Fpostgresql-anonymizer-10-privacy-by-design-for-postgres-2452%2F" target="_blank">PostgreSQL Anonymizer</a> 是个社区贡献的扩展 ，可以为 PostgreSQL 添加不同的数据脱敏选项和方法。它将脱敏配置存储在 PostgreSQL 的 SECURITY LABEL（安全标签）中。</p><h3>动态脱敏</h3><p>PostgreSQL Anonymizer 实现动态脱敏的方式是通过将定义某个角色为 "MASKED" 以及脱敏规则。被授予 "MASKED" 角色的用户将无法访问原始数据，而其他角色仍然可以访问。它现已支持多种的脱敏语法，你甚至可以编写自己的规则。</p><p><img src="https://oscimg.oschina.net/oscnet/up-81ce353e198292328ef3b8e6dd45a7a4a3c.png" alt="file" referrerpolicy="no-referrer"></p><p>这种方法有一定的局限性，例如在他们<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpostgresql-anonymizer.readthedocs.io%2Fen%2Flatest%2Fdynamic_masking%2F%23limitations" target="_blank">文档中</a> 有提到，如果你同时使用脱敏插件和 GUI 工具如 DBeaver 或 pgAdmin 进行查询的时候可能会出现问题；对于某些查询来说，动态脱敏可能非常慢。此外，不同的脱敏变体需要不同的视图，在角色或底层表发生变化时，这又很快变得难以管理起来。</p><h3>静态脱敏</h3><p>PostgreSQL Anonymizer 还支持静态脱敏，可以直接转换原始数据集。比如可以用虚假数据替换原始数据，添加噪音或者混淆数据以隐藏敏感信息。</p><p>静态脱敏的原则是更新包含至少一个被脱敏列的所有表的所有行。基本上意味着 PostgreSQL 将重写磁盘上的所有数据。所以请注意，这种方法会破坏原始数据，并且是一个比较缓慢的过程。因此，在使用静态脱敏之前，请三思而后行。</p><h2>Bytebase 动态数据脱敏</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0fafa1a0df862325f60276f4a73b95107cd.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fsecurity%2Fdata-masking%2Foverview%2F" target="_blank">Bytebase 动态数据脱敏</a> 不依赖于 PostgreSQL 视图或其用户，而是通过 Bytebase 内部管理脱敏策略和授权管理。当用户通过 SQL 编辑器查询时，会自动应用动态脱敏策略。</p><p><img src="https://oscimg.oschina.net/oscnet/up-03e05ae16e4f31409c552b924345c5e0a93.png" alt="file" referrerpolicy="no-referrer"></p><p>Bytebase 动态数据脱敏包括以下组件：</p><ul><li><strong>全局脱敏规则</strong>：工作空间的「管理员」和「DBA」可以批量定义全局脱敏规则。例如，可以将所有名为 email 的列脱敏程度设置为「半脱敏」。这样，修改脱敏策略就无需手动修改数千列了，还节省了维护视图的麻烦。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-a2bd3b732489e2b78eb7d1d7cd37cdb52a5.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>列脱敏规则</strong>：工作空间的「管理员」和「DBA」可以将列设置为不同的脱敏级别。列脱敏规则优先于全局脱敏规则。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-f37ca5c6e716c61e5b7faf61445e88dacc1.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>访问未脱敏数据</strong>：对于脱敏数据，工作空间的「管理员」和「DBA」可以授予特定用户访问未脱敏数据的权限。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-20a2ff4276bc57d8ec25d94d8bd72a0f10e.png" alt="file" referrerpolicy="no-referrer"></p><p>📣 工作空间的「管理员」和「DBA」均为 Bytebase 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fconcepts%2Froles-and-permissions%2F" target="_blank">角色</a>。</p><h2>对比</h2><p><img src="https://oscimg.oschina.net/oscnet/up-91ab870f77b13f4a5f0e46cac11ab3a1ef4.png" alt="file" referrerpolicy="no-referrer"></p><p>PostgreSQL Anonymizer 的优势在于它是在数据库本身中实现的。因此，无论查询如何发送到数据库，数据脱敏规则都会被强制执行。对于 Bytebase 动态数据脱敏，查询必须通过 SQL 编辑器才会强制执行。</p><p>Bytebase 动态数据脱敏的优势在于其与所有 PostgreSQL 发行版（和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506225%26idx%3D1%26sn%3D71a523fb3059705ad743b766c5193404%26chksm%3Dc25ce705f52b6e13eefc8196cc7c800e36ce7d5e130bb0723d7e849d6f71d8831f9c6098c90b%26scene%3D21%23wechat_redirect" target="_blank">MySQL 发行版</a>🐬）都兼容，且支持细粒度的脱敏策略和访问权限。只要团队通过 Bytebase SQL 编辑器来查询数据库，那么 Bytebase 动态数据脱敏可以保障组织敏感数据的安全。</p><p>🔧 欢迎<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247505900%26idx%3D1%26sn%3D46296b29b2bca3d023a3c0fb8f291c70%26chksm%3Dc25ce9d8f52b60ce481827e3bc65ea4dc9eeb13427f8bae6cb7e44e07073cb7d5cbea4b943c7%26scene%3D21%23wechat_redirect" target="_blank">跟着教程</a>来试试 Bytebase 动态数据脱敏。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 02:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10306946</guid>
            <link>https://my.oschina.net/u/6148470/blog/10306946</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Furion 文档收费？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天访问 Furion 官网发现它的文档居然要付费才能看：</p><p><img height="1392" src="https://static.oschina.net/uploads/space/2023/1128/173151_D1kJ_2720166.png" width="2338" referrerpolicy="no-referrer"></p><p>http://furion.baiqian.ltd/docs/saas</p><p>而且还搞了个 499 的 VIP 技术支持服务……</p><p><img height="1858" src="https://static.oschina.net/uploads/space/2023/1128/173121_ZrVP_2720166.png" width="3360" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 09:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268540</guid>
            <link>https://www.oschina.net/news/268540</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenUK：扶持开源将有效遏制人才流向美国]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">英国开源非营利组织 OpenUK&nbsp;最新发布了 「</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenuk.uk%2Fstate-of-open-the-uk-in-2023-phase-three-skills-or-bust%2F" target="_blank">State of Open: The UK in 2023: Phase 3 Skills or Bust</a><span style="background-color:#ffffff">」 报告，此部分内容主要聚焦于英国开源软件的贡献者和维护者。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">「开源软件是数字经济的潜水艇。无论是互联网、云计算、人工智能、ML 还是区块链，它都是我们所有技术生态系统的基础。」</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="420" src="https://oscimg.oschina.net/oscnet/up-a2e7775cd5fe8e3981df48a726e8410b676.jpg" width="300" referrerpolicy="no-referrer"></span></span></p><p><span style="color:#000000">Skills or Bust 重点分析了英国开源社区的数据，发现英国共有 320 万个 GitHub 帐户（占英国人口的 4.5%）和 31800 个开源项目贡献者。过去 12 个月里，开源项目的贡献者达 8200 人；开源项目新增了 1700 名贡献者，实现了 20.7% 的增长。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">报告作者明确指出，英国政府有机会支持开源人才，并在英国建立一个更强大的技术部门。远程工作是开源技术的一种常态，这意味着许多国际公司是根据技能而非地理位置来招聘人才的。随着英国各地互联互通的改善，无论是在城市还是农村地区，这都为掌握紧缺技能的人才提供了就业机会。这只会推动英国科技经济的增长，并确保其未来成为"下一个硅谷"。</span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">报告还揭示了 OpenUK 对英国技术和开源技能需求的调查见解：</span></p><ul><li><span style="color:#000000"><strong>77% </strong>的英国公司正在寻求编程技能</span></li><li><span style="color:#000000"><strong>后端开发人员是最受欢迎的职位</strong>（招聘比例为 51%），其次是云工程师（36%）和开发运维工程师（32%）</span></li><li><span style="color:#000000"><strong>后端开发人员仍然是未来招聘的重点</strong>（28%），另外还有云工程师（23%）和开发运维工程师（16%）</span></li></ul><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><img alt="" height="500" src="https://oscimg.oschina.net/oscnet/up-7eec672f4d5ab2c1eec10c4fc10e98ebe5c.jpg" width="500" referrerpolicy="no-referrer"></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">以及确定了支持英国科技行业增长至关重要的三个关键政策领域：</span></p><ul><li><span style="color:#000000"><strong>填补英国人才库商业技能的空白&nbsp;</strong>—— 因收购而留下的空白，目前英国缺乏将其创新商业化所需的商业技能。</span></li><li><span style="color:#000000"><strong>留住经常逃往美国的人才&nbsp;</strong>—— 通过支持这些技能在英国的发展来阻止移民，并鼓励技术工人移民。</span></li><li><span style="color:#000000"><strong>培训人员掌握正确的工程和开发技能&nbsp;</strong>—— 英国目前还没有，而且团队缺乏实践经验。</span></li></ul><p><span style="color:#000000">OpenUK 首席执行官 Amanda Brock 称，这十年以来，开源软件的重要性一直被英国政府所忽视。而为此做出贡献的开源工作者，是全球科技行业中受人尊敬和有影响力的一部分。</span></p><p><span style="color:#000000">「他们中的许多人都是 homeworkers，掌握着紧缺的技能，在这艘'全球潜艇'上工作并成长为领导者，将湾区的薪资带入英国。现在是时候让潜艇浮出水面了......」</span></p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenuk.uk%2Fstateofopen" target="_blank"><span style="color:#2980b9">查看完整报告</span></a></strong></p><hr><p><strong><span style="color:#000000">相关阅读</span></strong></p><ul><li><a href="https://www.oschina.net/news/249841/openuk-report-benefits-of-open-source" target="_blank">英国科技总增值 27% 来自开源，价值达 135.9 亿英镑</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 08:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268523/state-of-open-the-uk-in-2023</guid>
            <link>https://www.oschina.net/news/268523/state-of-open-the-uk-in-2023</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[大语言模型的前世今生]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>本文分享自华为云社区《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%2F416109%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" target="_blank" rel="nofollow">大语言模型的前世今生</a>》，作者： 码上开花_Lancer 。</p><p><strong>大规模语言模型（Large Language Models，LLM）</strong>，也称大规模语言模型或大型语言模型，是一种由包含数百亿以上参数的深度神经网络构建的语言模型，使用自监督学习方法通过大量无标注文本进行训练。自 2018 年以来，Google、OpenAI、Meta、百度、华为等公司和研究机构都相继发布了包括 BERT，GPT 等在内多种模型，并在几乎所有自然语言处理任务中都表现出色。2019 年大模型呈现爆发式的增长，特别是 2022 年 11 月 ChatGPT（Chat Generative Pre-trained Transformer）发布后，更是引起了全世界的广泛关注。用户可以使用自然语言与系统交互，从而实现包括问答、分类、摘要、翻译、聊天等从理解到生成的各种任务。大型语言模型展现出了强大的对世界知识掌握和对语言的理解。</p><span id="OSC_h1_1"></span><h1>一、大规模语言模型基本概念</h1><p>语言是人类与其他动物最重要的区别，而人类的多种智能也与此密切相关。逻辑思维以语言的形式表达，大量的知识也以文字的形式记录和传播。如今，互联网上已经拥有数万亿以上的网页资源，其中大部分信息都是以自然语言描述。因此，如果人工智能算法想要获取知识，就必须懂得如何理解人类使用的不太精确、可能有歧义、混乱的语言。语言模型（Language Model，LM）目标就是建模自然语言的概率分布。词汇表 V 上的语言模型，由函数 P(w1w2...wm) 表示，可以形式化地构建为词序列 w1w2...wm 的概率分布，表示词序列 w1w2...wm 作为一个句子出现的可能性大小。由于联合概率 P(w1w2...wm) 的参数量十分巨大，直接计算 P(w1w2...wm) 非常困难。按照《现代汉语词典（第七版）》包含 7 万单词，句子长度按照 20 个词计算，模型参数量达到 7.9792×1096 的天文数字。中文的书面语中超过 100 个单词的句子也并不罕见，如果要将所有可能都纳入考虑，模型的复杂度还会进一步急剧增加，无法进行存储和计算。为了减少 P(w1w2...wm) 模型的参数空间，可以利用句子序列通常情况下从左至右的生成过程进行分解，使用链式法则得到：</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700874836405431196.png" referrerpolicy="no-referrer"></p><p>由此，w1w2...wm 的生成过程可以看作单词逐个生成的过程。首先生成 w1，之后根据 w1 生成 w2，再根据 w1 和 w2 生成 w3，以此类推，根据前 m− 1 个单词生成最后一个单词 wm。例如：对于句子「把努力变成一种习惯」的概率计算，使用上述公式可以转化为：</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700874878791508245.png" referrerpolicy="no-referrer"></p><p>通过上述过程将联合概率 P(w1w2...wm) 转换为了多个条件概率的乘积。但是，仅通过上述过程模型的参数空间依然没有下降，P(wm|w1w2...wm.1) 的参数空间依然是天文数字。为了解决上述问题，可以进一步假设任意单词 wi 出现的概率只与过去 n − 1 个词相关，即：</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700874915077390823.png" referrerpolicy="no-referrer"></p><p>满足上述条件的模型被称为 n 元语法或 n 元文法 (n-gram) 模型。其中 n-gram 表示由 n 个连续单词构成的单元，也被称为 n 元语法单元。尽管 n 元语言模型能缓解句子概率为 0 的问题，但语言是由人和时代创造的，具备无穷的可<br> 能性，再庞大的训练语料也无法覆盖所有的 n-gram，而训练语料中的零频率并不代表零概率。因此，需要使用平滑技术（Smoothing）来解决这一问题，对所有可能出现的字符串都分配一个非零的概率值，从而避免零概率问题。平滑是指为了产生更合理的概率，对最大似然估计进行调整的一类方法，也称为数据平滑（Data Smoothing）。平滑处理的基本思想是提高低概率，降低高概率，使整体的概率分布趋于均匀。这类方法通常称为统计语言模型（Statistical Language models，SLM）。n 语法模型整体上来看与训练语料规模和模型的阶数有较大的关系，不同的平滑算法在不同情况下的表现有较大的差距。平滑算法虽然较好的解决了零概率问题，但是基于稀疏表示的 n 元语言模型仍然有三个较为明显的缺点：（1）无法建模长度超过 n 的上下文；（2）依赖人工设计规则的平滑技术；（3）当 n 增大时，数据的稀疏性随之增大，模型的参数量更是指数级增加，并且模型受到数据稀疏问题的影响，其参数难以被准确的学习。此外，n 语法中单词的离散表示也忽略了词之间的相似性。</p><p>因此，基于分布式表示和神经网络的语言模型逐渐成为了研究热点。Bengio 等人在 2000 年提出了使用前馈神经网络对 P(wi|wi−n+1...wi−1) 进行估计的语言模型。词的独热编码被映射为一个低维稠密的实数向量，称为词向量（Word Embedding）。此后，循环神经网络、卷积神经网络、端到端记忆网络等神经网络方法都成功应用于语言模型建模。相较于 n 元语言模型，神经网络方法可以在一定程度上避免数据稀疏问题，有些模型还可以避免对历史长度的限制，从而更好的建模长距离依赖关系。这类方法通常称为神经语言模型（Neural Language Models，NLM）。深度神经网络需要采用有监督方法，使用标注数据进行训练，因此，语言模型的训练过程也不可避免需要构造训练语料。但是由于训练目标可以通过无标注文本直接获得，从而使得模型的训练仅需要大规模无标注文本即可语言模型也成为了典型的自监督学习（Self-supervised Learning）任务。互联网的发展，使得大规模文本非常容易获取，因此训练超大规模的基于神经网络的语言模型也成为了可能。受到计算机视觉领域采用 ImageNet 对模型进行一次预训练，使得模型可以通过海量图像充分学习如何提取特征，然后再根据任务目标进行模型精调的范式影响，自然语言处理领域基于预训练语言模型的方法也逐渐成为主流。以 ELMo 为代表的动态词向量模型开启了语言模型预训练的大门，此后以 GPT 和 BERT 为代表的基于 Transformer 模型的大规模预训练语言模型的出现，使得自然语言处理全面进入了预训练微调范式新时代。将预训练模型应用于下游任务时，不需要了解太多的任务细节，不需要设计特定的神经网络结构，只需要「微调」预训练模型，即使用具体任务的标注数据在预训练语言模型上进行监督训练，就可以取得显著的性能提升。这类方法通常称为预训练语言模型（Pre-trained Language Models，PLM）。2020 年 Open AI 发布了包含 1750 亿参数的生成式大规模预训练语言模型 GPT-3（GenerativePre-trained Transformer 3）。开启了大规模语言模型的时代。由于大规模语言模型的参数量巨大，如果在不同任务上都进行微调需要消耗大量的计算资源，因此预训练微调范式不再适用于大规模语言模型。但是研究人员发现，通过语境学习（Incontext Learning，ICL）等方法，直接使用大规模语言模型就可以在很多任务的少样本场景下取得了很好的效果。此后，研究人员们提出了面向大规模语言模型的提示词（Prompt）学习方法、模型即服务范式（Model as a Service，MaaS）、指令微调（Instruction Tuning）等方法，在不同任务上都取得了很好的效果。与此同时，Google、Meta、百度、华为等公司和研究机构都纷纷发布了包括 PaLM、LaMDA、T0 等为代表的不同大型语言模型。</p><p>2022 年底 ChatGPT 的出现，将大规模语言模型的能力进行了充分的展现，也引发了大规模语言模型研究的热潮。Kaplan 等人在文献中提出了缩放法则（Scaling Laws），指出模型的性能依赖于模型的规模，包括：参数数量、数据集大小和计算量，模型的效果会随着三者的指数增加而线性提高。如图 1.1 所示，模型的损失（Loss）值随着模型规模的指数增大而线性降低。这意味着模型的能力是可以根据这三个变量估计的，提高模型参数量，扩大数据集规模都可以使得模型的性能可预测地提高。这为继续提升大模型的规模给出了定量分析依据。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231125/1700875112804923222.png" referrerpolicy="no-referrer"></p><p>图 1.1 大规模语言模型的缩放法则（Scaling Laws）</p><span id="OSC_h1_2"></span><h1>二、大规模语言模型发展历程</h1><p>大规模语言模型的发展历程虽然只有短短不到五年的时间，但是发展速度相当惊人，截止 2023 年 6 月，国内外有超过百种大模型相继发布。中国人民大学赵鑫教授团队在文献按照时间线给出 2019 年至 2023 年 5 月比较有影响力并且模型参数量超过 100 亿的大规模语言模型，如图 2.1 所示。大规模语言模型的发展可以粗略的分为如下三个阶段：基础模型、能力探索、突破发展。</p><p><strong>基础模型阶段</strong>主要集中于 2018 年至 2021 年，2017 年 Vaswani 等人提出了 Transformer[ 架构，在机器翻译任务上取得了突破性进展。2018 年 Google 和 Open AI 分别提出了 BERT[1] 和 GPT-1 模型，开启了预训练语言模型时代。BERT-Base 版本参数量为 1.1 亿，BERT-Large 的参数量为 3.4 亿，GPT-1 的参数量 1.17 亿。这在当时，相比其它深度神经网络的参数量已经是有数量级上提升。2019 年 Open AI 又发布了 GPT-2，其参数量达到了 15 亿。此后，Google 也发布了参数规模为 110 亿的 T5 模型。2020 年 Open AI 进一步将语言模型参数量扩展到 1750 亿，发布了 GPT-3。此后，国内也相继推出了一系列的大规模语言模型，包括清华大学<a href="https://www.oschina.net/action/visit/ad?id=1191">ERNIE</a>(THU)、百度<a href="https://www.oschina.net/action/visit/ad?id=1191">ERNIE</a>(Baidu)、华为盘古-α 等。这个阶段研究主要集中语言模型本身，包括仅编码器（Encoder Only）、编码器-解码器（Encoder-Decoder）、仅解码器（Decoder Only）等各种类型的模型结构都有相应的研究。模型大小与 BERT 相类似的算法，通常采用预训练微调范式，针对不同下游任务进行微调。但是模型参数量在 10 亿以上时，由于微调的计算量很高，这类模型的影响力在当时相较 BERT 类模型有不小的差距。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819499486261627.png" referrerpolicy="no-referrer"></p><p>图 2.1 大规模语言模型发展时间线</p><p><strong>能力探索阶段</strong>集中于 2019 年至 2022 年，由于大规模语言模型很难针对特定任务进行微调，研究人员们开始探索在不针对单一任务进行微调的情况下如何能够发挥大规模语言模型的能力。2019 年 Radford 等人，就使用 GPT-2 模型研究了大规模语言模型在零样本情况下的任务处理能力。在此基础上，Brown 等人在 GPT-3 模型上研究了通过语境学习（In-Context Learning）进行少样本学习的方法。将不同任务的少量有标注的实例拼接到待分析的样本之前输入语言模型，用语言模型根据实例理解任务并给出正确结果。在包括 TriviaQA、WebQS、CoQA 等评测集合都展示出了非常强的能力，在有些任务中甚至超过了此前的有监督方法。上述方法不需要修改语言模型的参数，模型在处理不同任务时无需花费的大量计算资源进行模型微调。但是仅依赖基于语言模型本身，其性能在很多任务上仍然很难达到有监督学习效果，因此研究人员们提出了指令微调（Instruction Tuning）方案，将大量各类型任务，统一为生成式自然语言理解框架，并构造训练语料进行微调。</p><p><strong>突破发展阶段</strong>以 2022 年 11 月 ChatGPT 的发布为起点。ChatGPT 通过一个简单的对话框，利用一个大规模语言模型就可以实现问题回答、文稿撰写、代码生成、数学解题等过去自然语言处理系统需要大量小模型订制开发才能分别实现的能力。它在开放领域问答、各类自然语言生成式任务以及对话上文理解上所展现出来的能力远超大多数人的想象。2023 年 3 月 GPT-4 发布，相较于 ChatGPT 又有了非常明显的进步，并具备了多模态理解能力。GPT-4 在多种基准考试测试上的得分高于 88% 的应试者，包括美国律师资格考试（Uniform Bar Exam）、法学院入学考试（Law School Admission Test）、学术能力评估（Scholastic Assessment Test，SAT）等。它展现了近乎「通用人工智能（AGI）」的能力。各大公司和研究机构也相继发布了此类系统，包括 Google 推出的 Bard、百度的文心一言、科大讯飞的星火大模型、智谱 ChatGLM、复旦大学 MOSS 等。表 1.1 给出了截止 2023 年 6 月典型开源和未开源大规模语言模型的基本情况。可以看到从 2022 年开始大模型呈现爆发式的增长，各大公司和研究机构都在发布各种不同类型的大模型。</p><span id="OSC_h1_3"></span><h1>三、 大规模语言模型构建流程</h1><p>根据 OpenAI 联合创始人 Andrej Karpathy 在微软 Build 2023 大会上所公开的信息，OpenAI 所使用的大规模语言模型构建流程如图 2.2 所示。主要包含四个阶段：预训练、有监督微调、奖励建模、强化学习。这四个阶段都需要不同规模数据集合、不同类型的算法，产出不同类型的模型，所需要的资源也有非常大的差别。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819526965391967.png" referrerpolicy="no-referrer"></p><p>图 2.2 OpenAI 使用的大规模语言模型构建流程</p><p><strong>预训练</strong><strong>（</strong><strong>Pretraining</strong><strong>）阶段</strong>需要利用海量的训练数据，包括互联网网页、维基百科、书籍、GitHub、论文、问答网站等，构建包含数千亿甚至数万亿单词的具有多样性的内容。利用由数千块高性能 GPU 和高速网络组成超级计算机，花费数十天完成深度神经网络参数训练，构建基础语言模型（Base Model）。基础大模型构建了长文本的建模能力，使得模型具有语言生成能力，根据输入的提示词（Prompt），模型可以生成文本补全句子。也有部分研究人员认为，语言模型建模过程中也隐含的构建了包括事实性知识（Factual Knowledge）和常识知识（Commonsense）在内的世界知识（World Knowledge）。根据他们的文献介绍，GPT-3 完成一次训练的总计算量是 3640PFlops，按照 NVIDIA A100 80G 和平均利用率达到 50% 计算，需要花费近一个月时间使用 1000 块 GPU 完成。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819546103132882.png" referrerpolicy="no-referrer"></p><p>表 1.1 典型开源大规模语言模型汇总</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819565269758033.png" referrerpolicy="no-referrer"></p><p>表 1.2 典型闭源大规模语言模型汇总</p><p><strong>有监督微调</strong>（Supervised Finetuning），也称为指令微调（Instruction Tuning），利用少量高质量数据集合，包含用户输入的提示词（Prompt）和对应的理想输出结果。用户输入包括问题、闲聊对话、任务指令等多种形式和任务。</p><p><strong>例如</strong>：提示词（Prompt）：复旦大学有几个校区？</p><p>理想输出：复旦大学现有 4 个校区，分别是邯郸校区、新江湾校区、枫林校区和张江校区。其中邯郸校区是复旦大学的主校区，邯郸校区与新江湾校区都位于杨浦区，枫林校区位于徐汇区，张江校区位于浦东新区。</p><p>利用这些有监督数据，使用与预训练阶段相同的语言模型训练算法，在基础语言模型基础上再进行训练，从而得到有监督微调模型（SFT 模型）。经过训练的 SFT 模型具备了初步的指令理解能力和上下文理解能力，能够完成开放领域问题、阅读理解、翻译、生成代码等能力，也具备了一定的对未知任务的泛化能力。由于有监督微调阶段的所需的训练语料数量较少，SFT 模型的训练过程并不需要消耗非常大量的计算。根据模型的大小和训练数据量，通常需要数十块 GPU，花费数天时间完成训练。SFT 模型具备了初步的任务完成能力，可以开放给用户使用，很多类 ChatGPT 的模型都属于该类型，包括：Alpaca、Vicuna、MOSS、ChatGLM-6B 等。很多这类模型效果也非常好，甚至在一些评测中达到了 ChatGPT 的 90% 的效果。当前的一些研究表明有监督微调阶段数据选择对 SFT 模型效果有非常大的影响，因此如何构造少量并且高质量的训练数据是本阶段有监督微调阶段的研究重点。</p><p>目标是构建一个文本质量对比模型，对于同一个提示词，SFT 模型给出的多个不同输出结果的质量进行排序。奖励模型（RM 模型）可以通过二分类模型，对输入的两个结果之间的优劣进行判断。RM 模型与基础语言模型和 SFT 模型不同，RM 模型本身并不能单独提供给用户使用。奖励模型的训练通常和 SFT 模型一样，使用数十块 GPU，通过几天时间完成训练。由于 RM 模型的准确率对于强化学习阶段的效果有着至关重要的影响，因此对于该模型的训练通常需要大规模的训练数据。Andrej Karpathy 在报告中指出，该部分需要百万量级的对比数据标注，而且其中很多标注需要花费非常长的时间才能完成。图 2.3 给出了 InstructGPT 系统中奖励模型训练样本标注示例。可以看到，示例中文本表达都较为流畅，标注其质量排序需要制定非常详细的规范，标注人员也需要非常认真的对标规范内容进行标注，需要消耗大量的人力，同时如何保持众包标注人员之间的一致性，也是奖励建模阶段需要解决的难点问题之一。此外奖励模型的泛化能力边界也在本阶段需要重点研究的另一个问题。如果 RM 模型的目标是针对所有提示词系统所生成输出都能够高质量的进行判断，该问题所面临的难度在某种程度上与文本生成等价，因此如何限定 RM 模型应用的泛化边界也是本阶段难点问题。</p><p><img src="https://bbs-img.huaweicloud.com/blogs/img/20231124/1700819609846149973.png" referrerpolicy="no-referrer"></p><p>图 2.3 InstructGPT 系统中奖励模型训练样本标注示例</p><p><strong>强化学习</strong><strong>（</strong><strong>Reinforcement Learning</strong><strong>）阶段</strong>根据数十万用户给出的提示词，利用在前一阶段训练的 RM 模型，给出 SFT 模型对用户提示词补全结果的质量评估，并与语言模型建模目标综合得到更好的效果。该阶段所使用的提示词数量与有监督微调阶段类似，数量在十万量级，并且不需要人工提前给出该提示词所对应的理想回复。使用强化学习，在 SFT 模型基础上调整参数，使得最终生成的文本可以获得更高的奖励（Reward）。该阶段所需要的计算量相较预训练阶段也少很多，通常也仅需要数十块 GPU，经过数天时间的即可完成训练。文献[给出了强化学习和有监督微调的对比，在模型参数量相同的情况下，强化学习可以得到相较于有监督微调好得多的效果。关于为什么强化学习相比有监督微调可以得到更好结果的问题，截止到 2023 年 9 月也还没有完整和得到普遍共识的解释。此外，Andrej Karpathy 也指出强化学习也并不是没有问题的，它会使得基础模型的熵降低，从而减少了模型输出的多样性。在经过强化学习方法训练完成后的 RL 模型，就是最终提供给用户使用具有理解用户指令和上下文的类 ChatGPT 系统。由于强化学习方法稳定性不高，并且超参数众多，使得模型收敛难度大，再叠加 RM 模型的准确率问题，使得在大规模语言模型如何能够有效应用强化学习非常困难。</p><p>大语言模型研究进展之快，让在自然语言处理领域开展了近三十年工作的我们也难以适从。其研究之火爆程度令人咋舌，自然语言处理领域重要国际会议 EMNLP，2022 年语言模型相关论文投稿占比只有不到 5%。然而，2023 年语言模型相关投稿则超过了 EMNLP 整体投稿的 20%。如何能够兼顾大语言模型的基础理论，又能够在快速发展的各种研究中选择最具有代表性的工作介绍给大家，是写作中面临的最大挑战之一，受限于我们的认知水平和所从事的研究工作的局限，对其中一些任务和工作的细节理解可能存在不少错误，也恳请专家、读者批评指正！</p><p>&nbsp;</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.huaweicloud.com%2Fblogs%3Futm_source%3Doschina%26utm_medium%3Dbbs-ex%26utm_campaign%3Dother%26utm_content%3Dcontent" rel="nofollow" target="_blank"><strong>点击关注，第一时间了解华为云新鲜技术~</strong></a></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 05:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4526289/blog/10278002</guid>
            <link>https://my.oschina.net/u/4526289/blog/10278002</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴昨晚系统服务故障，技术团队连夜修复]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>11 月 28 日凌晨，「滴滴崩了」相关话题登上微博热搜，多个用户表示滴滴 App 无法正常使用。对此滴滴紧急回应称「由于系统故障，今天晚间滴滴 App 服务出现异常，经技术同学紧急修复，目前正陆续恢复中。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-795f1525cfa56ab2e93c3007ac4f10118a3.png" referrerpolicy="no-referrer"></p><p>从用户反馈看，11 月 27 日晚间 10 点多起，陆续有用户反馈无法使用滴滴旗下相关 App，滴滴抢修超过了 9 小时。</p><p>对此，在 11 月 28 日早间，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuBQfuzij" target="_blank">滴滴发布微博更新了恢复情况</a></u>，滴滴称「经技术团队连夜修复，滴滴网约车等服务已恢复，用户可下载滴滴 App 使用打车服务。骑车等服务还在陆续修复中，所有可开锁或未关锁的青桔车辆均可免费骑行，希望能为缓解早高峰压力努力多做一点点。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3e973f0017d2a44b92e63ec57b2224d9ef6.png" referrerpolicy="no-referrer"></p><p>虽然滴滴表示网约车服务已恢复，但是不少用户早间在微博反馈仍然无法打车，只能选择其他平台出行。</p><p>从司机反馈看，此次滴滴平台在接单、定位、计费等环节上都出现了问题。有网约车司机表示，昨晚 App 崩溃时刚好在接单，「从晚上 10 点 20 分开始什么都做不了，客服电话也进不了线。目前恢复了少部分功能，但不能正常使用，很多错单乱单，还出现了多位司机接同一单的现象。」</p><p>有业内人士表示，出问题的应该是滴滴自己的 IDC，这种事故也会加速滴滴全部上云的步伐。从过往情况看，滴滴崩溃多是因为机房网络故障等原因，不过故障当天都能修好，本次故障维修时长或是滴滴历次故障之最。</p><p>目前滴滴由滴滴云提供服务。滴滴云官网显示，滴滴出行的云计算服务基于滴滴出行的业务技术和经验积累，采用领先的云计算架构、高规格服务器集群搭建、高性能资源配置机制、精细化运营模式，致力于为开发者提供简单快捷、高效稳定、高性价比、安全可靠的 IT 基础设施云服务。</p><p>在今年 2 月，滴滴云发布公告，由于产品线调整，滴滴云在 2023 年 3 月 31 日起将不再对外提供公有云服务。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 04:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268480</guid>
            <link>https://www.oschina.net/news/268480</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[龙芯宣布兼容 IE 的龙芯浏览器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">在今日上午举办的 2023 龙芯产品发布暨用户大会上，龙芯中科介绍了龙芯平台当前的生态发展，称其已可运行绝大多数 X86 / Linux 应用，并争取 1-2 年后流畅运行绝大多数 X86 / Windows 应用。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a41459afcde42a92f9ad416d6fca4d8f732.png" referrerpolicy="no-referrer"></p><p style="margin-left:0px; margin-right:0px; text-align:start">龙芯平台已支持多个国产操作系统和基础应用，后续将通过二进制翻译运行 X86 应用，兼容 Windows 和安卓应用。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-86b36d9e89683e59c00caa945cf2aab9fef.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c91a07b40ce827b5d10883b6fe1138abc2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55e8d68de37d96583e2acb6ba8d53dba16b.png" referrerpolicy="no-referrer"></p><p>大会上，龙芯中科宣布了与 IE 浏览器兼容的<strong>「龙芯浏览器」</strong>。从官方公开的 PPT 可以看到，龙芯浏览器之所以在 2023 年还兼容 IE，是因为我国信息系统主要基于 IE 构建。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b7fb745bc3039ea3eb00357a2cc36dd5d5d.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 04:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268477</guid>
            <link>https://www.oschina.net/news/268477</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Reddit 再次试水 IPO]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">彭博社</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-27%2Freddit-leads-class-of-2024-us-ipo-candidates-testing-the-water%3Fsref%3Dgni836kR" target="_blank"><span style="color:#2980b9">报道</span></a><span style="color:#000000">称，Reddit「正在与潜在投资者就首次公开募股进行谈判。」&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Reddit 总部位于旧金山，由&nbsp;Steve Huffman&nbsp;、Aaron Swartz 和 Alexis Ohanian 于 2005 年联合创立。消息人士透露，该公司正在考虑最早在明年第一季度上市。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><img height="331" src="https://oscimg.oschina.net/oscnet/up-2b1b4904c5ce1731bc1a4743a3619d6d07d.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">2021 年 12 月，Reddit 秘密向美国证券交易委员会提交了一份上市注册声明草案，但相关计划并未成功实现。此举发生在 Reddit 获得由富达（Fidelity）领投的 4.1 亿美元巨额融资、估值达到 100 亿美元的几个月之后。当时，Reddit 计划以 7 亿美元完成 F 轮融资。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">然后，在 2022 年 1 月，Reddit 甚至邀请摩根士丹利和高盛参与上市工作。当时，该公司考虑的估值高达 150 亿美元。&nbsp;</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">目前尚不清楚如果该公司真的上市，明年的估值将会达到多少。Reddit 发言人向外媒 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F11%2F27%2Freddit-might-once-again-be-flirting-with-an-ipo%2F" target="_blank">TechCrunch</a> 表示，该公司正处于静默期，无法发表评论。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268471/reddit-might-once-again-flirting-ipo</guid>
            <link>https://www.oschina.net/news/268471/reddit-might-once-again-flirting-ipo</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周热点 | 微软开源 Terminal Chat；Fish Shell 采用 Rust 重写会导致性能下降；程序员篡改 ETC 余额......]]>
            </title>
            <description>
                <![CDATA[回顾一周热门资讯。2023.11.20-2023.11.27]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649094007&#38;idx=1&#38;sn=c31a714cf204a2b39bc6c24fc06671d9&#38;chksm=880c4c64bf7bc57274d01421a2877a746fb9f7fbeaaada17eb65b684a5f45c287aa67387684a&#38;token=958250931&#38;lang=zh_CN#rd</guid>
            <link>https://mp.weixin.qq.com/s?__biz=MzA4OTI5NjUwOA==&#38;mid=2649094007&#38;idx=1&#38;sn=c31a714cf204a2b39bc6c24fc06671d9&#38;chksm=880c4c64bf7bc57274d01421a2877a746fb9f7fbeaaada17eb65b684a5f45c287aa67387684a&#38;token=958250931&#38;lang=zh_CN#rd</link>
        </item>
        <item>
            <title>
                <![CDATA[龙芯 3A6000 桌面处理器正式发布，国产之光！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在今日上午举办的&nbsp;2023 龙芯产品发布暨用户大会上，龙芯 3A6000 国产桌面通用处理器正式发布。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3e6662d2058f428348499738edb731d2f88.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2bf0856cd3fa1f2a6bae9ce059cc87ace7f.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-064f9db667224d22c42556b43acac5bafe7.png" referrerpolicy="no-referrer"></p><blockquote><p>此处引用一下<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWgrMt3RO7w0a1kNyydptog" target="_blank">央视新闻的报道原文</a></u></em>：<br><br><strong>龙芯 3A6000 采用我国自主设计的指令系统和架构，无需依赖任何国外授权技术，是我国自主研发、自主可控的新一代通用处理器，可运行多种类的跨平台应用，满足各类大型复杂桌面应用场景。</strong></p><p><strong>它的推出，标志着我国自主研发的 CPU 在自主可控程度和产品性能方面达到新高度，性能达到国际主流产品水平。</strong></p></blockquote><p>据介绍，<strong>龙芯 3A6000 </strong>拥有四个物理核 / 八个逻辑核，主频 2.0-2.5GHz，<strong>采用第四代 64 位微架构 LA664，实现 SMT2 技术</strong>，支持双通道 DDR4-3200 内存，片内集成安全可信模块，支持安全启动和国密算法（SM2、SM3、SM4）等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f13f4b4df7a318d97e95b08500fbdf966c5.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b28daeabb9b929cefa3541d62533899f8cd.png" referrerpolicy="no-referrer"></p><p>龙芯 3A6000 突破了同时多线程 (SMT, Simultaneous Multi-Threading) 技术，支持 CPU 核心在同一时刻运行多个线程，<strong>相比上一代龙芯 3A5000 的单线程性能提升 60%，多线程性能提升 100%</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-59bdeef2ea7f1bf45930f2862938198ffc6.png" referrerpolicy="no-referrer"></p><p>根据龙芯官方实测，<strong>2.5GHz 龙芯 3A6000 性能可达英特尔 10 代酷睿 3.6GHz&nbsp;i3-10100 的水平</strong>，下一步争取使用成熟工艺达到英特尔、AMD 先进工艺 CPU 的性能。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f0c409ce43a2e7c78d093de804acbc7ce2f.png" referrerpolicy="no-referrer"></p><p>此外，<strong>龙芯后续将推 3B6000、3B7000 等桌面端产品</strong>，而在服务端已完成龙芯 3C6000 设计，笔记本端已完成 2K3000 前端设计。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-202643b33452a1f49b4f60821a77e9010eb.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e19da8aac185fc7beffd93031306d623c92.png" referrerpolicy="no-referrer"></p><hr><p>华硕电脑开放平台中国区总经理俞元麟昨晚在其 B 站账号（@普普通通 Tony 大叔）更新的视频介绍了龙芯 3A6000 CPU 的性能表现：：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV15u4y1A7aK%2F">《国产最强！龙芯中科 3A6000 台式机 CPU 性能测试》</a></em></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2f786c32b8e5bec71a427021176790a2fdb.png" referrerpolicy="no-referrer"></p><hr><p><strong><span style="background-color:#e67e22">延伸阅读</span></strong></p><ul><li><strong><a href="https://www.oschina.net/news/268453" target="news">华硕发布龙芯 3A6000 消费级主板</a></strong></li><li><strong><a href="https://www.oschina.net/news/268477" target="news">龙芯宣布兼容 IE 的龙芯浏览器</a></strong></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 27 Nov 2023 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268459/loongson-3a6000</guid>
            <link>https://www.oschina.net/news/268459/loongson-3a6000</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
