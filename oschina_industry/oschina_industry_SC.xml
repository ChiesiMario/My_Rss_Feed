<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 26 Sep 2023 18:41:19 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[高效能软件工程师的 7 个习惯]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>管理学大师史蒂芬·柯维代表作《高效能人士的 7 个习惯》是商业书籍的经典之作，产生了积极而深远的影响。如果我们把《高效能人士的 7 个习惯》的理念应用到软件工程师身上，又会怎么样呢？</p><p>资深软件工程师 Luthfur Chowdhury 根据职业生涯中见过的优秀软件工程师的常见习惯，整理出以下清单——</p><p><strong>7 Habits of Highly Effective Software Engineers（高效能软件工程师的 7 个习惯）：</strong></p><p><strong>1. 快速将想法打造出原型，进行概念验证</strong></p><p>许多想法和新技术概念听起来很棒，但现实往往会有所不同。</p><p>为了更好地了解想法的可行性，优秀的工程师会更快地投入原型设计和概念验证。原型设计是一个很好的学习和探索工具。你会发现自己想到的方法是否可行，是否真正解决了你原来的问题，或者是否存在你之前没有想到的限制。</p><p><strong>2. 有效评估工作量</strong></p><p>工作量评估会影响产品路线图、技术方法和交付给终端用户的价值。</p><p>拥有良好评估能力的工程师的团队会给他们的工作带来信心。经常延期的团队会产生压力和不确定感。优秀的工程师通过跟踪他们的估计和工作实际花费时间之间的差异来更好地做到这一点。</p><p><strong>3. 快速且及时地 review 代码</strong></p><p>审查 PR 的速度越快，代码改进的速度就越快，并且投入生产的速度也就越快。快速的代码 review 可以向开发者提供反馈，同时代码和相关概念仍然记忆犹新。</p><p><strong>4. 主动记录代码、设计和流程，形成文档</strong></p><p>优秀的文档将帮助未来的工程师维护和构建工作。</p><p>放弃现有系统的一个关键原因通常是周围没有人知道它是如何运行的，或者不了解技术决策背后的背景。优秀的工程师通过记录他们的工作来确保他们留下坚实的基础和遗产。</p><p><strong>5. 坦诚地参与技术讨论</strong></p><p>构建出色的软件需要一个对技术想法持开放和坦诚态度的团队。</p><p>每个人都应该坦诚说出自己的想法，并营造一种邀请其他人也这样做的氛围。提出一个好主意并继续重复它以使其变得更好。</p><p>如果看到了想法中的缺陷，就公开地指出来，并解释你的理由。</p><p><strong>6. 完成「狗屎」工作</strong></p><p>只有完成工作才能取得成果。你需要把事情做好并交付生产。当一个项目接近完成时，我们都有过能量减弱的经历，当时间不够，终点线仍然感觉很遥远的时候。这就是需要集中注意力、缩小功能范围、保持强度水平并推动项目完成的地方。把事情做好是伟大工程师所体现的一种技能和习惯。</p><p><strong>7. 保持好奇心</strong></p><p>伟大的工程师往往具有天生的好奇心。他们不止对解决长期业务问题的新技术、新技术方法感兴趣。因为他们的好奇心不仅限于技术，还会经常进一步了解他们所做工作的用户和业务背景，以及他们可以产生的影响。</p><p>原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmakingsmallercircles.com%2Farticles%2F7-habits-of-highly-effective-software-engineers%2F" target="_blank">https://makingsmallercircles.com/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</guid>
            <link>https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云原生周刊：K8s 的 13 个最佳开源监控工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>开源项目推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevtron-labs%2Fsilver-surfer" target="_blank">Silver Surfer</a></h3><p>该项目旨在检查 Kubernetes 对象的 API 版本兼容性，并为其提供迁移路径，以便为集群升级做好准备。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Factions%2Factions-runner-controller" target="_blank">Actions Runner Controller</a></h3><p>Actions Runner Controller (ARC) 是一个 Kubernetes 操作器，可为 GitHub Actions 编排和扩展自托管运行器。</p><p>使用 ARC，您可以创建运行程序规模集，该规模集可根据存储库、组织或企业中运行的工作流数量自动扩展。由于受控运行程序可能是短暂的并且基于容器，因此新的运行程序实例可以快速、干净地扩展或缩减。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fhelm%2Fhelm-mapkubeapis" target="_blank">helm-mapkubeapis</a></h3><p>这是一个 Helm 插件，可将版本中废弃或移除的 Kubernetes API 映射到受支持的 API 中。</p><h2>文章推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40omers1414%2Fmastering-argocd-management-advanced-gitops-techniques-for-flexibility-and-scale-5a1375958482" target="_blank">掌握 ArgoCD 管理：实现灵活性和规模的高级 GitOps 技术</a></h3><p>这篇文章深入探讨了如何利用 ArgoCD 的潜力进行高级 GitOps 管理，通过 ApplicationSet Helm Chart 实现灵活的部署，以及通过扩展 ArgoCD 实例实现可扩展性和多租户支持的未来发展方向。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogz.io%2Fblog%2Fopen-source-monitoring-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 13 个最佳开源监控工具</a></h3><p>这篇文章提供了关于 Kubernetes 的 13 个开源监控工具的概述，并介绍了每个工具的优点和缺点，以帮助读者选择适合其需求的工具。</p><h2>云原生动态</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Fannouncing-opentofu" target="_blank">Linux 基金会推出 OpenTofu</a></h3><p>Linux 基金会宣布成立 OpenTofu，这是一个开源替代方案，用于 Terraform 广泛使用的基础设施即代码工具。OpenTofu 以前被称为 OpenTF，是对 Terraform 最近宣布的许可证变更（从 Mozilla Public License v2.0（MPLv2）变更为 Business Source License v1.1）的开放和社区驱动的回应，为每个人提供了一个可靠的开源替代方案，采用中立的治理模型。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgTzDuuX3ZdMjPrJ1qka2tw" target="_blank">Fluent Operator 2.5.0 发布：新增多个插件</a></h3><p>Fluent Operator v2.5.0 新增 11 个 features， 其中 Fluent Bit 新增支持 7 个插件， Fluentd 新增支持 1 个插件。此外，对 Fluent Operator 也进行了增强，调整了默认参数，以便适应更多场景，并对 helm chart 进行了优化，用户可以更方便的进行安装，并修复了部分 bug。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fhashicorp-vault-kubernetes%2F%3FtopicPageSponsorship%3D6457dc55-9c2d-4b4a-a65a-641549fdbe17" target="_blank">适用于 Kubernetes 的 HashiCorp Vault Secrets Operator 正式推出</a></h3><p>HashiCorp 已将适用于 Kubernetes 的 HashiCorp Vault Secrets Operator 正式投入使用。该 Kubernetes Operator 将 Vault 的 secret 缓存相结合。操作员还处理 Secrets 轮换，并拥有用于各种特定于 Secrets 的自定义资源的控制器。</p><p>Vault Secrets Operators 监视其自定义资源定义 (CRD) 集的更改。每个 CRD 都允许操作员将 Vault Secret 同步到 Kubernetes Secret。该运算符将源 Vault secret 直接写入目标 Kubernetes secret。这可确保对源所做的所有更改都能正确复制，并使用 Kubernetes 自定义资源来管理服务使用的 secret。应用程序能够以 Kubernetes 原生方式从目的地使用 secret。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2023%2F09%2F21%2Fharness-introduces-gitness-open-source-git-platform%2F" target="_blank">Harness 推出开源 Git 平台 Gitness</a></h3><p>DevOps 公司 Harness 发布了 Gitness，这是一个新的开源 Git 平台，据称这是「近十年来开源 Git 平台的第一个重要版本」。</p><p>Gitness 有两个主要组件，自托管的 Git 存储库和基于 Drone 的管道。</p><p>Harness 提供了所谓的软件交付平台，该平台可以自托管、安装在 AWS 上或由 Harness 托管的云上，提供各种产品，包括持续交付、功能标记、错误跟踪和混沌工程。该公司还提供多种可免费使用的开源或可用源代码产品，但由于许可限制，并非所有产品都有资格成为真正的开源产品。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10114425</guid>
            <link>https://my.oschina.net/u/4197945/blog/10114425</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[低代码引擎 —— TinyEngine]]>
            </title>
            <description>
                <![CDATA[<p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fopentiny.design%2Ftiny-engine" target="_blank" rel="noopener noreferrer"><img alt="OpenTiny Logo" src="https://gitee.com/opentiny/tiny-engine/raw/develop/logo.svg" height="100" referrerpolicy="no-referrer"></a></p><p align="center">TinyEngine 低代码引擎使能开发者定制低代码平台，支持在线实时构建低码平台，支持二次开发或集成低码平台能力</p><p><a href="https://gitee.com/opentiny/tiny-engine/blob/develop/README.md">English</a> | 简体中文</p><p>🌈 特性：</p><ul><li>跨端跨框架前端组件</li><li>支持在线实时构建、支持二次开发或被集成</li><li>直接生成可部署的源码，运行时无需引擎支撑</li><li>允许接入第三方组件、允许定制扩展插件</li><li>支持高代码与低代码，混合开发部署应用</li><li>平台接入 AI 大模型能力，辅助开发者构建应用</li></ul><h2><a id="user-content-开发" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%BC%80%E5%8F%91"></a>开发</h2><h3><a id="user-content-安装所需的依赖" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E7%9A%84%E4%BE%9D%E8%B5%96"></a>安装所需的依赖</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>npm <span class="nb">install</span></span><span id="LC2" class="line"><span class="nv">$ </span><span class="nb">pushd </span>mockServer</span><span id="LC3" class="line"><span class="nv">$ </span>npm <span class="nb">install</span></span><span id="LC4" class="line"><span class="nv">$ </span><span class="nb">popd</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-本地开发启动本地-mock-服务器使用本地-mock-服务器的-mock-数据" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0-mock-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0-mock-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-mock-%E6%95%B0%E6%8D%AE"></a>本地开发，启动本地 mock 服务器，使用本地 mock 服务器的 mock 数据</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>npm run serve</span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="c"># 另起一个终端</span></span><span id="LC4" class="line"><span class="nv">$ </span><span class="nb">cd </span>mockServer</span><span id="LC5" class="line"><span class="nv">$ </span>npm run dev</span><span id="LC6" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>浏览器打开：<code>http://localhost:8080/?type=app&amp;id=918&amp;tenant=1&amp;pageid=NTJ4MjvqoVj8OVsc</code><br><code>url search</code>参数：</p><ul><li><code>type=app</code> 应用类型</li><li><code>id=xxx</code> 应用 ID</li><li><code>tenant=xxx</code> 组织 ID</li><li><code>pagdId=xxx</code> 页面 ID</li></ul><h2><a id="user-content-构建" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E6%9E%84%E5%BB%BA"></a>构建</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 先构建所有插件</span></span><span id="LC2" class="line">npm run build:plugin</span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c"># 构建设计器</span></span><span id="LC5" class="line">npm run build:alpha  或 build:prod</span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="c"># 发布所有插件</span></span><span id="LC8" class="line">npm run publish:plugin</span><span id="LC9" class="line"></span><span id="LC10" class="line"><span class="c"># 发布设计器</span></span><span id="LC11" class="line">npm run publish:core</span><span id="LC12" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-常规发包流程" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%B8%B8%E8%A7%84%E5%8F%91%E5%8C%85%E6%B5%81%E7%A8%8B"></a>常规发包流程</h2><ol><li><p>发布插件
npm run build:plugin &amp;&amp; npm run publish:plugin</p></li><li><p>发布设计器</p></li></ol><p>a) 修改包名和版本号:
包名：@opentiny/tinybuilder-design-core-test
版本号：末位每次+1, 例如：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">  "name": "@opentiny/tinybuilder-design-core-test",</span><span id="LC2" class="line">  "version": "1.0.87",</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>b) npm publish</p><h2><a id="user-content--参与贡献" class="anchor" href="https://gitee.com/opentiny/tiny-engine#-%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>🤝 参与贡献</h2><p>如果你对我们的开源项目感兴趣，欢迎加入我们！🎉</p><p>参与贡献之前请先阅读<a href="https://gitee.com/opentiny/tiny-engine/blob/develop/CONTRIBUTING.zh-CN.md">贡献指南</a>。</p><ul><li>添加官方小助手微信 opentiny-official，加入技术交流群</li><li>加入邮件列表 <a href="mailto:opentiny@googlegroups.com">opentiny@googlegroups.com</a></li></ul><h2><a id="user-content-开源协议" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>开源协议</h2><p><a href="https://gitee.com/opentiny/tiny-engine/blob/develop/LICENSE">MIT</a></p>]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 08:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/opentiny/tiny-engine</guid>
            <link>https://gitee.com/opentiny/tiny-engine</link>
        </item>
        <item>
            <title>
                <![CDATA[ABP Framework — 基于 ASP.NET 的 Web 应用框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>ABP Framework 是基于 ASP.NET Core 用于创建现代 Web 应用程序的完整架构和基础设施，遵循最佳实践和约定。</p><p>ABP Framework 提供了完整的<span style="background-color:#ffffff; color:#212529">全栈应用程序基础设施，主要功能</span></p><ul><li>多个 UI 选项</li><li>多个数据库提供程序</li><li>ABP CLI</li><li>模块化</li><li>多租户</li><li>BOOTSTRAP 标签助手</li><li>动态表单</li><li>认证与授权</li><li>虚拟文件系统</li><li>DOMAIN DRIVEN DESIGN 基础设施</li><li>自动 REST APIS</li><li>动态客户端代理</li><li>具有 RABBITMQ 集成的分布式事件总线</li><li>测试基础设施</li><li>……</li></ul><p><strong>架构</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2ab8ea6f22e02f599298ab0c79a0d3b25b4.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 07:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/abp-framework</guid>
            <link>https://www.oschina.net/p/abp-framework</link>
        </item>
        <item>
            <title>
                <![CDATA[Apache OpenOffice 是事实上的「无人维护」项目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frocket9labs.com%2Fpost%2Fits-time-to-let-go-apache-software-foundation%2F" target="_blank">Apache Open Office as an unmaintained project?</a>》这篇文章今天在 Hacker News 引起了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37645160" target="_blank">广泛讨论</a>。作者指出，Apache OpenOffice 最后一个大版本更新是在 2014 年 (<a href="https://www.oschina.net/news/51324/apache-openoffice-4-1-0-final" target="news">Apache OpenOffice 4.1.0</a>)，后面一直只发布小版本更新，目前最新版本是今年 2 月发布的 4.1.14。</p><p>考虑到这些发布历史，是否可以将 Apache OpenOffice 视为一个无人维护的项目？</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37645160" target="_blank"><img height="152" src="https://static.oschina.net/uploads/space/2023/0926/142540_9sYB_2720166.png" width="939" referrerpolicy="no-referrer"></a></p><p>文章简单地回顾了 Apache OpenOffice 的历史：</p><ul><li>1985 年，Star Division 公司发布私有办公软件套装 StarOffice</li><li>2000 年，Sun Microsystems 公开 StarOffice 源代码，随后 OpenOffice.org 诞生</li><li>2010 年，LibreOffice 基于 OpenOffice.org 源代码发布首个版本</li><li>2010 年，Oracle 收购 Sun Microsystems 之后将 OpenOffice.org 相关商标和代码捐赠给了 Apache 软件基金会，创造了 Apache Open Office</li><li>在 2012 年的第一个版本 3.4 和 2014 年的最后一个主要版本 4.1 之间，Apache Open Office 集成了 IBM Lotus Symphony，在捐赠给 Apache 软件基金会后，添加了重新设计的侧边栏和一些其他新功能</li><li>自 2014 年以来……Apache OpenOffice 的更新主要是：错误修复、字典更新、错误修复、字典更新、空格「修复」、字典更新、字典更新……</li><li>相比之下，LibreOffice 在 OpenOffice.org 源代码基础上活跃开发至今，Apache OpenOffice 在 4.1 之后再也没有发布过大版本更新</li></ul><p>此外，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fopenoffice%2Fcommits%2Ftrunk" target="_blank">从 OpenOffice 的提交记录来看</a>，大多数 commit 都没有意义。在许多情况下，这些 commit 甚至不会对程序进行任何更改，因为它们只是改动源代码周围的空白区域。</p><p><img height="2690" src="https://static.oschina.net/uploads/space/2023/0926/144608_xzWl_2720166.png" width="1787" referrerpolicy="no-referrer"></p><p>作者认为他们这样做有两个原因：</p><ol><li>有一些合情合理的空白字符问题需要解决。</li><li><strong>人们有动机让一个项目看起来好像是活跃的，而实际上它并不活跃。</strong></li></ol><p>因此作者认为，Apache OpenOffice 项目已经变成了无人维护的状态——这不是在质问 Apache 软件基金会，这就是事实。他还说道，基金会及其贡献者在近十年来不披露与缺乏实质性更新或变化有关的信息的方式，并且似乎故意掩盖项目缺乏发展的情况。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 06:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259569/open-office-as-an-unmaintained-project</guid>
            <link>https://www.oschina.net/news/259569/open-office-as-an-unmaintained-project</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软开源 windows-drivers-rs，用 Rust 开发 Windows 驱动程序]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Microsoft Azure 首席技术官兼著名 Windows 软件开发人员 Mark Russinovich 在社交平台上<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fmarkrussinovich%2Fstatus%2F1705730703957405826" target="_blank">宣布</a>，启动了一个名为 windows-drivers-rs 的新开源项目。</span></p><p><span style="color:#000000">该项目可帮助开发人员使用 Rust 开发 Windows 驱动程序，旨在支持 WDM (Windows Driver Model) 和 WDF (Windows Driver Framework) 驱动程序开发模型。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-f6fe123e928e766cef55d1f83ecd65770f5.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">当前版本的资源库主要由 Rust crates 组成，具体包括：</span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-build" target="_blank">wdk-build</a><span style="color:#000000">：用于配置 Cargo 构建脚本以进行 WDK 的绑定生成和下游链接的库。虽然此 crate 的编写目的是灵活地适应不同的 WDK 版本和不同的 WDF 版本，但目前仅针对 NI eWDK、KMDF 1.33、UMDF 2.33 和 WDM 驱动程序进行了测试。旧版 DDK 可能缺少链接器选项。</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-sys" target="_blank">wdk-sys</a><span style="color:#000000">：直接 FFI 绑定到 WDK 中可用的 API。这包括从<code>bindgen</code>中自动生成的 ffi 绑定，以及包括手动重新实现 bindgen 无法生成的宏。</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk" target="_blank">wdk</a><span style="color:#000000">：与 WDK 中可用的 API 的安全惯用绑定</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-panic" target="_blank">wdk-panic</a><span style="color:#000000">：使用 WDK 构建的程序的默认 panic 处理程序实现</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-alloc" target="_blank">wdk-alloc</a><span style="color:#000000">：对使用 WDK 编译的二进制文件的分配支持</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-macros" target="_blank">wdk-macros</a><span style="color:#000000">：宏的集合，有助于更轻松地与 wdk-sys 的直接绑定进行交互。该 crate 通过<code>wdk-sys</code>重新导出，并且通常情况下 crates 不需要直接依赖<code>wdk-macros</code></span></li></ul><p><span style="color:#000000">具体示例可查看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FWindows-rust-driver-samples" target="_blank">Windows-rust-driver-samples</a><span style="color:#000000">。</span></p><p><span style="color:#000000">值得注意的是，该项目仍处于早期阶段，不建议用于商业用途；但微软方面鼓励社区对该项目的实验、建议和讨论。在 windows-drivers-rs 的开发过程中，该公司将把 GitHub 讨论区作为与社区互动的主要形式。目前，windows-drivers-rs 项目已得到了微软开发人员 Melvin Wang 的支持。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/238894/microsoft-windows-rust" target="_blank">微软正在用 Rust 重写核心 Windows 库</a></p></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/249719/rust-in-the-windows-kernel" target="_blank">微软：加大力度在 Windows 11 使用 Rust</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 06:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259564/develop-windows-drivers-in-rust</guid>
            <link>https://www.oschina.net/news/259564/develop-windows-drivers-in-rust</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌建造海底光缆 Nuvem —— 连接葡萄牙、百慕大和美国]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Google Cloud 官方博客<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Finfrastructure%2Fintroducing-the-nuvem-subsea-cable%2F" target="_blank">宣布 Nuvem</a> ——&nbsp;这是一个新的连接葡萄牙、百慕大和美国的跨大西洋海底光缆系统。</p><p>Nuvem&nbsp;是这条新海底光缆的名字，在葡萄牙语中是 'cloud' 的意思。Nuvem 将提升跨大西洋的网络弹性，帮助满足对数字服务不断增长的需求。</p><p>这条新的光缆将增加国际路线的多样性，并支持相关大陆和国家的信息和通信技术 (ICT) 基础设施的发展。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-17a78469606eb791bffede853dbbe14484c.png" referrerpolicy="no-referrer"></p><p>▲ Nuvem 海底光缆路线</p><p>Nuvem 预计将于 2026 年投入使用，将为世界各地的 Google 用户和 Google Cloud 客户增加容量、提高可靠性并减少延迟。它将与 Firmina 和 Equiano 一起创建连接北美、南美、欧洲和非洲的重要数据长廊。</p><p>博客还提到，百慕大长期以来一直致力于发展海底光缆市场，而且全球 95% 的数据流动都是通过海底光缆传输。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259549/nuvem-subsea-cable</guid>
            <link>https://www.oschina.net/news/259549/nuvem-subsea-cable</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度发布首个量子领域大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在近日召开的 2023 量子产业大会上，百度量子计算研究所所长段润尧带来百度量子软硬件和解决方案等方面的最新成果，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FQpACJh3RXKKfyKCvBvapjQ" target="_blank">发布</a>了首个量子领域大模型，及百度量子助手和量子写作助手两大 AI 原生应用；还发布了量子领域大模型白皮书。</span></p><p><span style="color:#000000">根据介绍，百度发布首个量子领域大模型，旨在芯片层、框架层、模型层及应用层等全栈技术上加速量子技术与大模型深度融合，充分激发两大技术各自的潜力。该量子领域大模型是在文心一言基础上，使用量子领域高质量数据进行更有针对性的训练和优化而构建的量子领域大模型，能更好地理解量子知识，专业执行量子任务。</span></p><p><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-0ff8b0a44302a63883fc37980394ad3c7c2.jpg" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">百度量子助手是依托百度量子知识库与产业级知识增强文心大模型，基于 7800 万原始数据、22 万精调数据训练打造。只需输入 6 个变量，量子写作助手可在 5 分钟内撰写一篇 13000 字符合格式要求的专利文档，高效帮助企业将量子领域的研究成果与知识产权沉淀为企业资产。</span></p><p><span style="color:#000000">段润尧表示，量子领域大模型的未来发展将会呈现出多个代表性阶段。从近期以适配量子领域的行业大模型开始，大幅降低量子教育行业门槛；逐渐过渡为经典和量子混合大模型，再发展到通用量子领域大模型，有望实现大模型技术在数据、算法、算力等各维度的全面量子化；最终，量子领域大模型将会成为新时代的操作系统，在量子互联网的基础上互联互通，成为社会发展的基础设施。</span></p><p><span style="color:#000000">此外，段润尧还公布了百度在量子芯片、软硬一体化解决方案等核心领域的最新进展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259545</guid>
            <link>https://www.oschina.net/news/259545</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[聆心智能发布定制角色对话交互模型 CharacterGLM]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">聆心智能团队<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FoD4nJjAlWxp8wM_Lm0GEsQ" target="_blank">开发</a>了用于定制角色进行对话交互的 CharacterGLM，以 ChatGLM 模型为底座，具有 6B、12B、66B 的参数量。聆心智能将对社会开放 12B 和 66B 模型的 API 访问，并将 CharacterGLM-6B 模型进行开源。</span></p><p><span style="color:#000000">该团队采用人工交互的方式评测 CharacterGLM 与业界最强的竞争对手（以下简称 JP）的性能。定制了数十个角色，类型分布于名人类、生活类、游戏影音类和虚拟恋爱类；要求标注者与每个角色至少交互 20 轮，每轮对话由两个模型生成回复。标注者选择胜出的回复继续展开对话，若回复偏好相同则随机选择。</span></p><p><span style="color:#000000">按角色类别统计两个模型的 win/tie/lose 比率。结果如表 1 所示，CharacterGLM 在大多数类别上的表现均优于 JP。</span></p><p><img height="228" src="https://oscimg.oschina.net/oscnet/up-629a6df96c49d3e6cd16ed068a107536ee4.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">为了衡量 CharacterGLM 在不同话题下的表现，其进一步将对话话题限定在常见的闲聊、访谈和恋爱场景下进行交互测试，评测方式与上面相同，结果如表 2 所示，CharacterGLM 在闲聊和恋爱场景下与 JP 持平，但在访谈场景下显著优于 JP。</span></p><p><img height="223" src="https://oscimg.oschina.net/oscnet/up-bc7f2d8f46bbcaa6f9dd6419e087ba01cb0.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">以及进一步分析了 CharacterGLM 在不同轮次范围内的角色表现，结果如表 3 所示，CharacterGLM 在对话的前期略次于 JP，但随着对话的推进，CharacterGLM 的优势则逐渐凸显。</span></p><p><span style="color:#000000">下面展示了从交互测评数据中采样的名人类、生活类、游戏影音类和虚拟恋爱类角色的交互样例。</span></p><p><strong><span style="color:#000000">名人类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="913" src="https://oscimg.oschina.net/oscnet/up-abb418380711fbc4c5f6af9c0640577898b.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">生活类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="421" src="https://oscimg.oschina.net/oscnet/up-2e4fe595a847879295de61567d340332e2f.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">游戏影音类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="458" src="https://oscimg.oschina.net/oscnet/up-9e3176f285b0fbfada2bd51e4b8cdc7062b.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">虚拟恋爱类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="687" src="https://oscimg.oschina.net/oscnet/up-9ad6daae66ce227eb3a043cb4408ccf839a.png" width="300" referrerpolicy="no-referrer"></span></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259539</guid>
            <link>https://www.oschina.net/news/259539</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 为 ChatGPT 添加多模态输入功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenAI CEO Sam Altman 昨晚在 Twitter <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1706292549198237997" target="_blank">宣布</a>，ChatGPT 新增了语音和图像功能。换言之，ChatGPT 支持看、听和说话了。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7ac69cc2cb8172192a8ff7f1c26e65c8018.png" referrerpolicy="no-referrer"></p><p>据介绍，ChatGPT 此次推出的语音和图像功能提供了一种新的、更直观的界面类型，允许用户跟它进行语音对话，向 ChatGPT 展示说话内容。</p><p>更新之后的 ChatGPT 将会支持语音输入和图像输入，更方便用户与机器人进行交流。其中语音输入功能仅在 iOS 和 Android 平台上线，而图像输入功能将会登录全平台。</p><p><strong>使用示例</strong></p><p><img src="https://static.oschina.net/uploads/space/2023/0926/110206_sVWo_2720166.gif" referrerpolicy="no-referrer"></p><p>新功能将会在两周内陆续向 Plus 用户开放。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259535/chatgpt-can-now-see-hear-and-speak</guid>
            <link>https://www.oschina.net/news/259535/chatgpt-can-now-see-hear-and-speak</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mwmbl —— 开源非盈利搜索引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mwmbl (发音类似 "mumble") 是一个用 Python 实现的，非营利、无广告、免费的搜索引擎，注重可用性和速度。目前，它只不过是一个想法以及在小型索引上实现 Web 前端和搜索技术的<a href="https://mwmbl.org/">概念验证。</a></p><p>项目<span style="background-color:#ffffff; color:#1f2328">愿景是建立一个致力于提供高质量搜索（特别是针对黑客）的社区，其资金完全来自捐赠。</span></p><p><img alt="" height="394" src="https://static.oschina.net/uploads/space/2023/0919/162741_A8HW_4252687.gif" width="700" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/mwmbl</guid>
            <link>https://www.oschina.net/p/mwmbl</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | Kubernetes 集群部署工具 KubeKey]]>
            </title>
            <description>
                <![CDATA[<p>内容可能含有违规信息</p>
]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/kubekey</guid>
            <link>https://gitee.com/kchstack/kubekey</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 交易日均千万订单的存储架构设计与实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>一、订单系统概述</span></span></span></h1><span id="OSC_h3_2"></span><h3><span><span><span>1.1 业务范围</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>服务业务线：快递、快运、中小件、大件、冷链、国际、B2B 合同物流、CLPS、京喜、三入三出（采购入、退货入、调拨入、销售出、退供出、调拨出）等</span></span></span></p><span id="OSC_h3_3"></span><h3><span><span><span>1.2 订单中心价值</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>1、解耦（</span></strong></span></span><span><span><span>提升系统稳定性</span></span></span><span><span><strong><span>）</span></strong></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>原系统：</span></strong></span></span><span><span><span>交易与生产耦合在一起，业务新增需求，涉及个上下游多个系统。ECLP、外单、运单、终端系统等。多条业务线的逻辑耦合在一起，单一业务条线的需求改动，涉及原系统中其他业务线的关联改造。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>新系统：</span></strong></span></span><span><span><span>交易与生产运营解耦：交易相关的需求在订单的域内解决；生产侧的需求，在生产域内解决，减少上下游的相互影响。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>业务条线接耦：不同业务线，业务流程不同，单一业务条线的需求改动，只在具体的流程中做迭代更新，不影响其他业务线。提升整个流程和业务的稳定性。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>2、提升新业务接入速度</span></strong></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>订单中心向前台提供可复用的标准能力，提升新业务的导入速度。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>订单中心将原系统中的大应用，拆分、抽象为多个小的应用组合，并支持不同场景下按需编排业务流程。新业务通过对中台公共标准能力的复用，可快速接入订单中心，避免相同功能的重复建设。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>3、提供全局化统一数据模型</span></strong></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>原系统：</span></strong></span></span><span><span><span>订单分属于多个系统，外单、ECLP、大件系统，有多套数据库，业务语义不统一，不便于数据化建设。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>新系统：</span></strong></span></span><span><span><span>订单中心统一定义订单的标准数据模型，让不同业务的数据，沉淀在同一系统，</span></span></span><span><span><span style="color:#333333">减少订单域相关功能的重复建设，避免资源浪费，打破部门壁垒。</span></span></span><span><span><span>使得数据和流程可以集中得以管理和优化，为集团经营分析、</span></span></span><span><span><strong><span>预测京东未来的创新空间，</span></strong></span></span><span><span><span>提供订单域的标准数据。</span></span></span></p><span id="OSC_h1_4"></span><h1><span><span><span>二、架构介绍</span></span></span></h1><span id="OSC_h3_5"></span><h3><span><span><span>2.1 整体架构设计</span></span></span></h3><div><img alt="" height="663" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-186STGzUWAqSV88m9.png" width="532" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>通过技术中台架构升级项目，将交易体系以新的接入-交易-履约-执行四层架构进行重新搭建。其中交易订单负责物流与客户之间产生物流服务契约的单据流量收口，同时承载向下游 OFC（订单履约层）分发的职责。</span></span></span></p><span id="OSC_h3_6"></span><h3><span><span><span>2.2 实时数据层架构设计</span></span></span></h3><span id="OSC_h4_7"></span><h4><span><span><span>2.2.1 系统交互图</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>系统交互如下：</span></span></span></p><div><img alt="" height="556" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-1831YBALdgqayRN7mp.png" width="747" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>订单中心的标准接口在上层做了单据收口，同时我们在数据层也做了统一的收口。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>将</span></span></span><span><span><strong><span>业务架构与数据解耦</span></strong></span></span><span><span><span>，分布式数据库、缓存、一致性等高可用、高性能设计从业务架构范畴剥离，使业务架构聚焦在业务自身。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>持久化系统</span></strong></span></span><span><span><span>：用于支撑接单、订单修改、订单取消、订单删除等数据持久化。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>搜索系统</span></strong></span></span><span><span><span>：提供订单详情查询、订单列表查询、订单状态流水查询、判断是否百川订单等服务。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>中继系统</span></strong></span></span><span><span><span>：数据枢纽，通过消费消息队列将订单数据写入 Elasticsearch、HBase、MySQL。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>数据对账系统</span></strong></span></span><span><span><span>：用于对比多套存储中间件的数据是否一致，以保障数据最终一致性。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>数据同步系统</span></strong></span></span><span><span><span>：将订单列表查询所需的查询条件和列表展示字段从老系统同步至订单中心，用于解决因切量过程中订单数据存在于新老系统中而分页困难的问题。</span></span></span></p><span id="OSC_h4_8"></span><h4><span><span><span>2.2.2 技术架构图</span></span></span></h4><div><img alt="" height="568" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-1818Ny8awTwDlWZ11ZQ.png" width="767" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><div><span style="color:black">•</span><span><span><span><span style="color:black">【读写分离架构】采用读写分离架构模式（CQRS），将订单读写流量分离，以提高查询性能和可扩展性，同时达到读、写解耦。</span></span></span></span></div><div><span style="color:black">•</span><span><span><span><span style="color:black">【缓存】使用分布式缓存 Redis 缓存热门订单数据以及与订单相关的信息提高并发和响应速度</span></span></span><span><span><span>减少对 HBase 的访问</span></span></span><span><span><span style="color:black">，同时，通过主、备、临时 3 套高性能缓存以提升系统容灾能力。</span></span></span></span></div><div><span style="color:black">•</span><span><span><span><span style="color:black">【消息队列】使用消息队列 JMQ 实现异步处理订单提升系统吞吐量，同时流量削峰减轻直接请求 ES、HBase、数据库的压力。将不同业务场景 (如下单、回传) 使用不同的 Topic 进行隔离，</span></span></span><span><span><span>可以更好地管理和维护；将不同业务使用不同的 Topic 隔离，可以实现消息的并行处理和水平扩展，提高系统的吞吐量和性能。</span></span></span></span></div><div><span>•</span><span><span><span><span>【复杂查询】使用搜索引擎 Elasticsearch 解决订单复杂查询，先通过 Elasticsearch 获取订单号，然后根据订单号查询分布式缓存 Redis+列式数据库 HBase。</span></span></span></span></div><div><span>•</span><span><span><span><span>【低成本持久化存储】采用 HBase 列式数据库以支持海量数据规模的存储和极强的扩展能力。</span></span></span></span></div><div><span>•</span><span><span><span><span>【数据一致性】通过强事务、最终一致、幂等、补偿、分布式锁、版本号等实现</span></span></span></span></div><div><span>•</span><span><span><span><span>【多租户架构】系统中采用多租户数据模型，将租户的数据分离存储，以确保数据的隔离性和安全性。根据不同租户的需求动态扩展系统的容量和资源，可以支持系统的水平扩展。通过共享基础设施和资源，多租户架构实现了更高的资源利用率和降低成本。</span></span></span></span></div><span id="OSC_h3_9"></span><h3><span><span><span>﻿</span></span></span><span><span><span>2.3 设计优势</span></span></span></h3><span id="OSC_h4_10"></span><h4><span><span><span>2.3.1 高可用</span></span></span></h4><div><span style="color:black">•</span><span><span><span><span style="color:black">应用服务器、MySQL、Redis、HBase、JMQ 等均跨机房部署；</span></span></span><span><span><span>ES 单机房部署，搭建 ES 主备双机房集群</span></span></span></span></div><div><span style="color:black">•</span><span><span><span><span style="color:black">隔离、限流、熔断、削峰、监控</span></span></span></span></div><span id="OSC_h4_11"></span><h4><span><span><span style="color:black">2.3.2 高性能</span></span></span></h4><div><span style="color:black">•</span><span><span><span><span style="color:black">高性</span></span></span><span><span><span>能缓</span></span></span><span><span><span style="color:black">存</span></span></span></span></div><div><span style="color:black">•</span><span><span><span><span style="color:black">异步化</span></span></span></span></div><span id="OSC_h4_12"></span><h4><span><span><span style="color:black">2.3.3 海量数据处理</span></span></span></h4><div><span style="color:black">•</span><span><span><span><span style="color:black">分库分表</span></span></span></span></div><div><span style="color:black">•</span><span><span><span><span style="color:black">冷热分离</span></span></span></span></div><div><span style="color:black">•</span><span><span><span><span style="color:black">列式存储 (</span></span></span><span><span><span>HBase)</span></span></span></span></div><span id="OSC_h4_13"></span><h4><span><span><span>2.3.4 数据安全</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:black">敏感信息加密存储，Log、Redis、ES、MySQL、HBase 等均采用加密存储，「谁存储谁加密，谁使用谁解密」。</span></span></span></p><span id="OSC_h1_14"></span><h1><span><span><span>三、订单数据模型</span></span></span></h1><span id="OSC_h3_15"></span><h3><span><span><span>3.1 PDM 模型</span></span></span></h3><blockquote><span><span><span>在订单模型设计上，基于统一业务属性、抽象通用模型、归纳共性实体的原则，将订单模型主要分成了订单的主档信息、订单的货品信息、订单的物流服务信息、订单的营销信息、订单的财务信息、订单的客户渠道信息、订单的收发货信息、订单的操作信息、订单的扩展信息等几类</span></span></span></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-18189KglU6qGqeUN7B.png" width="628" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-18H6HrmciYQrxOniE.png" width="795" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_16"></span><h3><span><span><span>3.2 模型扩展性</span></span></span></h3><span id="OSC_h4_17"></span><h4><span><span><span>3.2.1 标准模型扩展性设计</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>订单中存在几十上百个标识字段，若每次都采用新增字段形式，订单业务属性、数据模型会大量膨胀，腐蚀模型，同时开发效率较低，故采用 KV 形式承接和存储。将标识划分到各个业务域中，如订单标识、货品标识、营销标识等。</span></span></span></p><span id="OSC_h4_18"></span><h4><span><span><span>3.2.2 个性化业务模型扩展性</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>针对个性化业务，提供了一套可配置的数据库字段管理方案，通过开箱即用的一些设置，订单在提交、修改、查询时，可以根据业务身份+业务类型+业务字段找到不同的数据模型以及数据扩展编码，即找到存储到哪张表哪个字段。在每张表都预留 N 个扩展属性，同一个扩展属性，不同的业务身份+业务类型表示不同的含义，以此实现扩展存储。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-18I6o9tjo6Y7jFBGA.png" width="795" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h1_19"></span><h1><span><span><span>四、未来及挑战</span></span></span></h1><span id="OSC_h3_20"></span><h3><span><span><strong><span>4.1 订单个性化查询</span></strong></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>个性化查询需求增多，如模糊查询、根据查询条件实时聚合等需求，若 ES 索引都放在同一个集群中，会影响整体集群稳定性，但拆分后该业务数据无法与其他业务一块查询展示。</span></span></span></p><span id="OSC_h3_21"></span><h3><span><span><strong><span>4.2 单元化架构</span></strong></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>当前接单持久化 TP99 是 47ms，在非跨机房情况下 TP99 是 20ms，从数据来看，跨机房对性能影响很大。</span></span></span></p><div><img alt="" height="192" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2023-09-06-11-1811oSHVJ8DjdRK11CW.png" width="767" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>单元化，可以</span></span></span><span><span><strong><span>让同一个用户的相关请求，只在一个机房内完成所有业务「闭环」，不再出现「跨机房」访问</span></strong></span></span><span><span><span style="color:#555555">。</span></span></span><span><span><span>单元化的部署方式，可以让每个机房部署在任意地区，随时扩展新机房。</span></span></span><span><span><span>通过单元化，持续加强订单平台的基座稳固。</span></span></span></p><span id="OSC_h3_22"></span><h3><span><span><strong><span>4.3 硬件成本控制</span></strong></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>订单日均单量不断上升，数据量越来越大，随之而来是硬件成本的增加，如何控制硬件成本增加，是当下及未来的一项挑战。我们计划通过数据归档、冷热温数据分层等方式来</span></span></span><span><span><span>降低数据存储成本。</span></span></span></p><blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿作者：京东物流，王衞东</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>来源：京东云开发者社区，自猿其说 Tech 转载请注明来源</span></span></span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10114003</guid>
            <link>https://my.oschina.net/u/4090830/blog/10114003</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[关于 smart-doc 项目捐赠给同程旅行的重要通知]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>尊敬的 smart-doc 社区用户们：</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在这个秋高气爽的国庆佳节前夕，我想向大家宣布一个重要消息。我决定将 smart-doc 捐赠给同程旅行。自 2018 年以来，smart-doc 已经陪伴我们走过了五个春秋。在这五年的时间里，我们一起见证了这个项目的成长和发展，它逐渐成长为备受欢迎的 API 文档生成工具，也一起度过了无数个难忘的时光。然而，随着时间的推移和社区需求的增加，我的个人精力已经无法满足 smart-doc 未来更好的发展和国际化推广。因此，我决定将其交给同程旅行，希望同程旅行能够为 smart-doc 注入新的活力、资源和发展机遇。同程旅行作为一家领先的在线旅游服务提供商，具有丰富的资源和技术实力，他们将能够为 smart-doc 带来更多的机遇和发展。</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在捐赠之后，我将继续参与 smart-doc 的日常维护工作，并以 PMC（Project Management Committee）成员的身份参与项目的决策和推进。我会尽我所能为 smart-doc 的发展贡献自己的力量。同时，我也希望大家能够继续关注和支持这个项目，让我们携手共进，共同见证 smart-doc 的成长和发展。</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;同时，我也要感谢所有给 smart-doc 点过 star 的各位用户以及同仁，<span style="color:#d35400"><strong>你们的 star，胜过我所读过的诗</strong></span>！此外，我还要感激过去 smart-doc 的社区贡献者们，你们无私的奉献让 smart-doc 在过去的时光里更得越来越好。未来，我们也非常欢迎更多的开源小伙伴一起来参与 smart-doc 的社区共建，为全球开发者用户打造一款好用的 API 文档生成工具。未来社区也会为优秀的贡献者准备一些小礼品，以示感激和祝贺。</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，我衷心祝愿每一个人都能够<strong><span style="color:#d35400">走出半生，归来仍是少年</span></strong>，<strong><span style="color:#d35400">在漫长的人生道路上保持初心和热情</span></strong>。也祝愿大家在这个国庆节期间有一个美好的旅程，享受快乐和幸福。同程旅行开源社区新的 smart-doc 版本将在国庆后推出，敬请期待！</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再次感谢大家一直以来对 smart-doc 的支持和关注。我们相信，在同程旅行和社区用户的共同努力下，smart-doc 的未来一定会更加美好！</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><strong>项目地址</strong></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>GitHub 地址：</span><span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTongchengOpenSource%2Fsmart-doc" target="_blank">https://github.com/TongchengOpenSource/smart-doc</a></span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>Gitee 地址：</span><span><a href="https://gitee.com/TongchengOpenSource/smart-doc">https://gitee.com/TongchengOpenSource/smart-doc</a></span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start">&nbsp;</p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>敬礼！</span></p><p style="color:#333333; margin-left:.8em; margin-right:.8em; text-align:start"><span>smart-doc 作者 SunYu(上官胡闹)</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259520</guid>
            <link>https://www.oschina.net/news/259520</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Tiny RDM — 现代化轻量级跨平台 Redis 桌面客户端]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Tiny RDM 是一个现代化轻量级的跨平台 Redis 桌面客户端，支持 Mac、Windows 和 Linux。</p><p><strong>功能特性</strong></p><ul><li>基于 Webview，无内嵌浏览器</li><li>更精美的界面和直观的结构布局</li><li>多国语言支持（点我贡献和完善多国语言支持）</li><li>便捷的数据查看和编辑修改</li><li>更多功能持续开发中…</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-36601911cb73477055ae902c2211d0c08ec.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 11:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/tiny-rdm</guid>
            <link>https://www.oschina.net/p/tiny-rdm</link>
        </item>
        <item>
            <title>
                <![CDATA[阿里云通义千问 14B 模型开源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">阿里云宣布开源通义千问 140 亿参数模型 Qwen-14B 及其对话模型 Qwen-14B-Chat，</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">免费可商用。</span><span style="background-color:#ffffff; color:#222222">据阿里云 CTO 周靖人介绍，Qwen-14B 在多个权威评测中超越同等规模模型，部分指标甚至接近 Llama2-70B。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span><strong>Qwen-14B</strong>是一款支持多种语言的高性能开源模型，相比同类模型使用了更多的</span><span>高质量数据，整体训练数据超过 3 万亿 Token，使得模型具备更强大的推理、认</span><span>知、规划和记忆能力。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><strong><span>Qwen-14B-Chat&nbsp;</span></strong><span>是在基座模型上经过精细 SFT 得到的对话模型。</span><span>借助基座模型强</span><span>大性能，Qwen-14B-Chat 生成内容的准确度大幅提升，也更符合人类偏好，内容</span><span>创作上的想象力和丰富度也有显著扩展。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span>用户可从魔搭社区直接下载模型，也可通过阿里云灵积平台访问和调用</span><span>Qwen-14B 和 Qwen-14B-Chat。</span></p><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>效果展示：</span></strong></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">国际惯例自我认知</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="114" src="https://oscimg.oschina.net/oscnet/up-ba41084baf4e54574082f67689daa5ee7ad.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">写作创作</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="165" src="https://oscimg.oschina.net/oscnet/up-38bcc16d1d1f9d97efd019efa0766dd0427.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">知识常识</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="135" src="https://oscimg.oschina.net/oscnet/up-07c15e6bbd711044edc21ef483bc70b8b15.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">数学</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="137" src="https://oscimg.oschina.net/oscnet/up-29dde8414bcd875eea156ad12aa2b9a5716.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">代码</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="135" src="https://oscimg.oschina.net/oscnet/up-9efe859813065d5b02adf51a95674796dce.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">安全</p></li></ul><p><img height="95" src="https://oscimg.oschina.net/oscnet/up-9e4c4580c590e97f8926d482a9d66168a3b.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 08:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259447</guid>
            <link>https://www.oschina.net/news/259447</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[向 PC 厂商付钱阻碍 AMD 进入市场，英特尔被欧盟罚款 4 亿美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">欧盟因一起&nbsp;<span style="background-color:#ffffff">2002 年至 2007&nbsp;</span>期间的市场垄断案件对英特尔处以 4 亿美元（3.76 亿欧元）</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fec.europa.eu%2Fcommission%2Fpresscorner%2Fdetail%2Fen%2Fqanda_23_4571" target="_blank">的罚款</a><span style="color:#000000">。<span style="background-color:#ffffff">导致此罚款的案件与英特尔在 PC 处理器市场的商业行为有关，该公司以赤裸裸的限制行为阻碍竞争对手进入市场。</span></span></p><p><img height="259" src="https://oscimg.oschina.net/oscnet/up-2b85d5cfbdb20a92efee4134f93b711f816.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">相关裁决可追溯到 2009 年，彼时欧盟委员会对英特尔处以创纪录的 10.6 亿欧元罚款，理由是英特尔滥用其在 x86 中央处理单元（「CPU」）计算机芯片市场的主导地位。该公司的一些过分行为包括：</span></p><ul><li><span style="color:#000000">向计算机制造商提供全部或部分隐性回扣，条件是他们从英特尔购买全部或几乎全部 x86 CPU（即所谓的「conditional rebates」&nbsp;）；</span></li><li><span style="color:#000000">向计算机制造商付费，以停止或推迟推出包含竞争对手 x86 CPU 的特定产品，并限制这些产品的销售渠道（所谓的「naked restrictions」）。</span></li></ul><p><span style="color:#000000">此后英特尔方面提起了上诉，欧洲第二高等法院「欧盟普通法院」(General Court) 于 2022 年判决认为，欧盟委员会对英特尔有条件回扣的评估不完整，并认为该决定没有充分证明这些回扣具有限制竞争的能力。该公司的一些行为（如隐性回扣）在上诉时因缺乏相关证据而被撤销。</span></p><p><span style="color:#000000">但委员会仍认定了英特尔付钱给 PC 制造商以推迟或限制使用 AMD 处理器的产品的事实。</span><span style="color:#000000"><span style="background-color:#ffffff">并具体举例称：</span></span></p><ul><li><span style="color:#000000">2002 年 11 月至 2005 年 5 月期间，英特尔向惠普付款，条件是惠普 (i) 仅向中小型企业销售基于其竞争对手 AMD x86 CPU 的商用台式机；(ii) 仅通过直接分销渠道（而非分销商）；(iii) 惠普推迟 6 个月在欧洲推出首款基于 AMD 的商用台式机。</span></li><li><span style="color:#000000">英特尔向宏碁支付款项的条件是，宏碁将基于 AMD 的笔记本电脑的推出时间从 2003 年 9 月推迟到 2004 年 1 月。</span></li><li><span style="color:#000000">英特尔向联想付款的条件是，联想将基于 AMD 的笔记本电脑的推出时间从 2006 年 6 月推迟到 2006 年底。</span></li></ul><p>「<span style="color:#000000">由于这些限制行为，计算机制造商停止、推迟或限制基于竞争对手芯片组的产品的商业化，而这些产品是他们积极计划的，并且有消费者需求。因此，英特尔公司赤裸裸的限制对市场竞争造成了不利影响，剥夺了消费者本来可以拥有的选择权。&nbsp;</span>」</p><p><span style="color:#000000">欧盟委员会目前正在就 <span style="background-color:#ffffff">General Court&nbsp;</span>对英特尔回扣行为的判决提起上诉，官方已向欧盟最高法院 -- 欧盟法院提出上诉。如果上诉被受理，英特尔被要求支付的罚款可能会增加。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 08:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259446/eu-intel-400-million-blocking-amds-market-access</guid>
            <link>https://www.oschina.net/news/259446/eu-intel-400-million-blocking-amds-market-access</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[马斯克硬核迁移服务器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>马斯克传里面有一个故事，去年底马斯克接手 Twitter 后为了省钱，要将萨克拉门托的服务器搬到波特兰，IT 经理跟马斯克汇报说要 9 个月，马斯克觉得这时间太长了，一个月就能搞定，但 IT 经理坚持不妥协，于是他亲自跑到机房拔电源租卡车搬服务器。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0925/152809_qJYK_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-08b1517c2a8541bf0ccb680727cc7118b0d.png" referrerpolicy="no-referrer"></p></blockquote><p>《伊隆·马斯克亲自搬运服务器，彰显他在 X 公司（此前为 Twitter）的「狂热紧迫感」》</p><p>*此内容改编自 Walter Isaacson 本月出版的传记《伊隆·马斯克》。</p><p>「这个时间表看起来像是我会认为勉强可以接受的吗？」马斯克问道。「显然不是。如果计划时间长，那就是错的。」</p><p>那是 12 月 22 日深夜，位于 X 公司 10 楼的会议室，马斯克正在与两名基础设施经理进行紧张的交谈。他们之前与他的接触并不多，尤其是在他心情不好时。</p><p>其中一人试图解释问题。位于萨克拉门托的一家数据服务公司允许 X 公司延长其服务器租约，以便在 2023 年有序迁出。「但今天早上」，这名显得有些紧张的经理告诉马斯克，「他们回来告诉我们说这个计划不再适用，因为他们认为我们在财务上不再稳健。」</p><p>这个设施每年花费 X 公司超过 1 亿美元。马斯克想通过将服务器迁移到 X 公司在俄勒冈州波特兰的其他设施来节省这笔费用。另一位经理表示这项工作不能立即进行。她平静地说：「我们至少需要六到九个月的时间，因为萨克拉门托仍然需要服务流量。」</p><p>多年来，马斯克经常面临着他认为的必要与别人告诉他的可能之间的选择。结果几乎总是一样的。他沉默了几秒钟，然后宣布：「你们有 90 天时间来完成这项任务。如果你们做不到，你们可以辞职。」</p><p>这名经理开始详细解释迁移服务器到波特兰的障碍。「机架密度不同，电力密度也不同」，她说。「所以机房需要进行升级。」她开始详细介绍更多，但被马斯克打断。</p><p>「这让我的大脑感到压抑」，他说。</p><p>「对不起，我没有这个意思」，她平稳地回答。</p><p>「你知道头爆炸的表情符号吗？」他问她。「我的脑袋现在就是这个感觉。真是一堆屁话。波特兰明显有大量的空间，从一个地方迁移到另一个地方简直小菜一碟。」</p><p>当 X 公司的经理们再次试图解释时，马斯克打断了他们。「你们能不能去我们的服务器中心，然后给我发视频？」他问。</p><p>那是圣诞节前的三天，经理承诺一周后提供视频。「不，明天」，马斯克命令。「我曾经自己建设过服务器中心，我可以判断是否还可以放更多的服务器。这就是为什么我问你们是否真的去过那些设施。如果你们没有去过，那你们说的就是胡说八道。」</p><p>SpaceX 和 Tesla 的成功是因为马斯克不懈地推动他的团队更加敏捷、有创造力，并发起突击冲刺以解决所有障碍。这就是他们如何在弗里蒙特快速组装汽车生产线，并在得克萨斯州的沙漠中建立试验设施，以及在卡纳维拉尔角使用旧零件建造发射场。</p><p>「你们需要做的就是将服务器迁移到波特兰」，他说。「如果超过 30 天，我会很震惊。」他停顿了一下，重新计算。「找一家搬家公司，运输电脑需要一个星期，然后再花一个星期来连接它们。两周。就应该这样。」</p><p>所有人都默不作声。但马斯克仍在发火。「如果你们租了一个 U-Haul （一家租车公司），你们可能自己就能完成。」两位 X 公司的经理看着他，试图判断他是否是认真的。马斯克的两位亲密助手 Steve Davis 和 Omead Afshar 也在场。他们多次看到过他这样，知道他可能真的这么认为。</p><p>「为什么我们现在不去做？」James Musk 提议。</p><p>James 和他的弟弟 Andrew，是马斯克的小堂弟，12 月 23 日，也就是那次令人沮丧的关于如何迁移服务器的基础设施会议的次日，与他一同从旧金山飞往奥斯汀。他们原计划去塔霍度过圣诞节，但那天伊隆邀请他们去奥斯汀。</p><p>James 有点犹豫，他精疲力竭，不想再加重压力，但 Andrew 说服他们应该去。所以他们最后坐在飞机上听伊隆抱怨服务器的事。</p><p>当飞机飞过拉斯维加斯时，James 提出了一个建议，他们现在就可以移动服务器。这是马斯克喜欢的那种冲动、不切实际的建议。尽管已经是深夜，但他让飞行员转向，他们重新返回萨克拉门托。</p><p>他们着陆后能租到的唯一一辆车是丰田 Corolla。他们不确定晚上如何进入数据中心，但一个名为 Alex 的来自乌兹别克斯坦的 X 员工还在那里。他欣然让他们进入，并带领他们参观。</p><p>这个设施也为许多其他公司提供了服务器存放空间，非常安全，进入每个金库都需要进行视网膜扫描。乌兹别克斯坦的 Alex 帮助他们进入了 X 公司的金库，那里有大约 5200 个冰箱大小的机架，每个机架有 30 台电脑。</p><p>「这些东西看起来并不难移动」，伊隆宣布。这是一个扭曲现实的说法，因为每个机架重约 2500 磅，高 8 英尺。</p><p>「你们需要雇佣承包商来抬起地板面板」，Alex 说。「它们需要用吸盘来抬起。」他说，还需要另一组承包商去拆除电缆和地震杆。</p><p>马斯克转向他的保安，借了一把小刀。使用它，他能够抬起地板上的一个通风口，这让他可以撬开地板面板。然后他爬到服务器下面，用小刀撬开了一个电箱，拔掉了服务器插头，等着看会发生什么。没什么异常发生。服务器已经准备好迁移。</p><p>「这看起来并不难」，当他这么说时，Alex 和其他人都目瞪口呆地看着他。此刻的马斯克完全兴奋起来。他大声笑说，这就像是《碟中谍》的萨克拉门托版。</p><p>第二天——圣诞前夜，马斯克召集了增援。Ross Nordeen，与他的朋友 James 在 Tesla 工作，从旧金山驱车而来。他在联合广场的 Apple Store 花了 2000 美元，买下了所有的 AirTags，这样服务器在迁移过程中就可以被跟踪。然后他去了家得宝，花了 2500 美元买了扳手、断线钳、头灯和拧下地震螺栓所需的工具。</p><p>Steve Davis，马斯克的忠诚副手，找人租了一辆半挂车，并安排了搬家车。其他来自 SpaceX 的援助队员也已到达。这些服务器机架都有轮子，所以团队能够断开其中四个并将它们推到待命的卡车上。这表明，这五千两百多个服务器可能在几天内全部移动。 「伙计们干得好！」马斯克兴高采烈地说。</p><p>该设施的其他工作人员带着混合的惊奇和恐惧看着。马斯克和他的团队在没有用箱子包装或用防护材料包裹的情况下，直接推动服务器，然后使用店里买来的绑带固定它们在卡车上。「我从未装载过半挂车」，James 承认。Ross 称其为「令人恐惧」。这就像清理衣橱，「但里面的东西都是至关重要的。」</p><p>下午 3 点，当他们把四台服务器装到卡车上后，这一消息传到了拥有并管理数据中心的 NTT 公司的高层。他们下令马斯克的团队停止行动。马斯克的表情中混杂着欢乐和愤怒，这是他经常伴随着他的狂热激进时出现的情绪。他给存储部门的 CEO 打电话，CEO 告诉他，在没有专家的情况下，是不可能移动服务器机架的。「屁话」，马斯克反驳。「我们已经装了四台到半挂车上了。」</p><p>这位 CEO 随后告诉他，一些地板承受不了超过 500 磅的压力，所以滚动一个 2000 磅的服务器会造成损坏。马斯克回应说，服务器有四个轮子，所以任何一个点上的压力只有 500 磅。「这家伙数学真的不太行」，马斯克告诉他的队友。</p><p>在破坏了 NTT 管理层的圣诞前夜，并使他们在明年可能损失超过 1 亿美元的收入后，马斯克表示同情，并说他会暂停迁移服务器两天。但他警告说，圣诞节后他们会继续。</p><p>圣诞节后，Andrew 和 James 返回萨克拉门托，看看他们还能移动多少服务器。他们没有带足够的衣服，所以去了沃尔玛买了牛仔裤和 T 恤。</p><p>NTT 希望他们使用的搬运承包商收费是每小时 200 美元。所以 James 在 Yelp 上找到了一个名为 Extra Care Movers 的公司，他们只需要十分之一的费用。这家看起来有些乱七八糟的公司将低成本的理念发挥到极致。老板曾在街上流浪，后来有了孩子，他正在试图重整旗鼓。他没有银行账户，所以 James 使用 PayPal 支付给他。</p><p>第二天，工作团队希望付现金，所以 James 去银行从他的个人账户中取出了 13,000 美元。两名团队成员没有身份证明，这使得他们很难进入设施。但他们用勤奋弥补了这一点。「每多移动一台服务器，你们可以得到一美元的小费」，James 在某个时刻宣布。从那时起，每当他们将新的服务器装到卡车上，工人们都会问他们现在装了多少。</p><p>服务器上有用户数据，James 最初并没有意识到，出于隐私原因，它们在迁移前应该被彻底擦除。「当我们知道这个时候，服务器已经被拔掉并推出去，所以我们不可能再推回去，插入，然后再擦除」，他说。此外，擦除软件也不能工作。「靠，我们怎么办？」他问。伊隆建议他们锁住卡车并进行追踪。</p><p>所以 James 派人到家得宝买了一些大的挂锁，他们将组合代码发送到波特兰，以便卡车可以在那里被打开。「我简直不敢相信它起作用了」，James 说。「他们都安全地到达了波特兰。」</p><p>到这周结束时，他们已经使用了萨克拉门托所有可用的卡车。尽管该地区受到了雨的袭击，他们在三天内移动了 700 多个机架。该设施之前的记录是一个月移动 30 台。这仍然留下了大量的服务器在设施中，但这群人已经证明了它们可以被快速移动。其余的部分在 1 月份由 X 公司的基础设施团队处理。</p><p>这一切听起来都很激动人心和鼓舞人心，对吧？这是马斯克大胆和有创意的方法的一个例子！但与所有关于马斯克的事情一样，这也并非那么简单。这也是他鲁莽、对反驳的不耐烦和他恐吓人们的一个例子。一个星期前，X 公司的基础设施工程师在那次令人头疼的会议中试图解释为什么快速关闭萨克拉门托中心会有问题，但他打断了他们。他在忽略否定者时有很好的记录。但并不完美。</p><p>在接下来的两个月里，X 公司不稳定。服务器的缺乏导致了多次系统崩溃，包括当马斯克为总统候选人 Ron DeSantis 主持 Twitter Spaces 时。到 2023 年 3 月，马斯克会承认：「回头看，整个萨克拉门托的关停是一个错误。有人告诉我我们的数据中心有冗余。我不知道的是，我们有 70,000 个硬编码的引用指向萨克拉门托。由此导致的问题至今仍然存在。」</p><p>在 Tesla 和 SpaceX，他最有价值的助手已经学会了如何避开他的坏主意，并给他逐渐透露不受欢迎的信息，但 X 公司的老员工不知道该怎么处理他。也就是说，X 公司还活着。萨克拉门托的事件向 X 公司的员工展示了，当他谈到需要狂热的紧迫感时，他是认真的。</p><p>Walter Isaacson 是 CNBC 的撰稿人，他还写过关于伊隆·马斯克、Jennifer Doudna、Leonardo da Vinci、Steve Jobs、Albert Einstein、Benjamin Franklin 和 Henry Kissinger 的传记。他在 Tulane 大学教授历史，曾是 Time 杂志的编辑和 CNN 的 CEO。</p><p>相关链接</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FNkRTyymTQ" target="_blank">https://weibo.com/1727858283/NkRTyymTQ</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fthecat%2Fstatus%2F1705860673149059115" target="_blank">https://twitter.com/thecat/status/1705860673149059115</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbc.com%2F2023%2F09%2F11%2Felon-musk-moved-twitter-servers-himself-in-the-night-new-biography-details-his-maniacal-sense-of-urgency.html" target="_blank">https://www.cnbc.com/2023/09/11/elon-musk-moved-twitter-servers-himself-in-the-night-new-biography-details-his-maniacal-sense-of-urgency.html</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 07:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259436/elon-musk-moved-twitter-servers-himself</guid>
            <link>https://www.oschina.net/news/259436/elon-musk-moved-twitter-servers-himself</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TCP 拥塞控制拯救了互联网]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>这篇文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F09%2F24%2Ftcp_congestion_control_internet%2F" target="_blank">介绍</a>了 <strong>TCP 拥塞控制如何拯救互联网</strong>。</p><blockquote><p><img alt="" src="https://static.oschina.net/uploads/space/2023/0925/120655_8mQ8_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>在今年的 SIGCOMM 会议上，尽管关于 TCP 拥塞控制的第一篇论文已经发表了 35 年，但拥塞控制仍然在会议议程中占有一个小时的时间。</p><p>关于 TCP/IP 协议为何比同时代的协议更成功，有许多理论，但这些理论并不容易验证。互联网协议的成功很可能有很多因素。文章观点认为，<strong>拥塞控制是使互联网从中等规模发展到全球规模的关键因素之一</strong>。</p><p>在 David Clark 的论文「DARPA 互联网协议的设计哲学」中，一个明确的设计目标是：「<strong>互联网架构必须允许其资源进行分布式管理</strong>。」这个目标有许多不同的含义，但 Jacobson 和 Karels 首次在 TCP 中实现拥塞控制就是一个很好的例子，体现了他们对这个原则的重视。</p><p>文章之所以将互联网的成功归功于拥塞控制算法，其中一个原因是，互联网的失败之路在 1986 年就已清晰可见。Jacobson&nbsp;描述了一些早期的拥塞崩溃事件，导致吞吐量下降了三倍。</p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/252693/google-bbr-v3-linux" target="_blank">谷歌称 TCP 拥塞控制算法 BBRv3 表现出色，本月提交到 Linux 内核主线</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 04:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259408/tcp-congestion-control-internet</guid>
            <link>https://www.oschina.net/news/259408/tcp-congestion-control-internet</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[单一数据库拆分成几十个数据库的意义]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">文章来源：微信公众号「四海内皆兄弟」</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">作者：薛晓刚，Oracle ACE/PG ACE partner/ TiDB MVA、布道师/OCP 讲师/ITPUB 核心专家/墨天轮 MVP/Oracle 认证/MySQL 认证/PG 认证/Oceanbase 认证/达梦数据库认证/TiDB 认证</p></blockquote><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">我经历过很多项目，从前就一个数据库支持上万并发，存储上百亿行数据的级别是非常容易得。现如今的玩法不是这样了，而是将一台数据库能解决的事情，拆分成几十个数据库。有一次我的群里有人说有个项目将一个 Oracle 拆了 100 个 MySQL，每个 MySQL 一主两从。也就是 2 比 300 的这样的比例。（因为 Oracle 也是主从，算两个吧）。这技术难度和成本上都陡增。这和最近几年流行的微服务和中台有一定的关系。以下之言代表我个人的愚见。如有冒犯请见谅。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><span>我和多个业内顶级大师的认同一样：<strong>架构师&nbsp; 喜欢&nbsp; &nbsp;重复&nbsp; 造轮子</strong>。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">我特意分开写，这样突出一下&nbsp; 喜欢&nbsp; 和&nbsp; 重复，造轮子也就算了，有的时候为了生活被迫。但是如果是主观就不对了。而且还是重复。为此有些经验丰富的人不仅感慨「一台一体机能搞定的事，有些人强行拆成几百台 x86，不知道图的啥，收益是啥，投入产出比高不高？」答案是一定是比原来成本高的。不仅仅是硬件，还有人工。本来可能开发人员 30 人，现在每个 300 人根本搞不下来。接下来运维也要加人。由于数据库一堆，没法出报表了，来 Hadoop 做大数据吧。别人都有，我们也要有。有了 Hadoop 数据要加工，做主题，再来 30-50 人。从促进就业的角度是积极的。不过如今全国都是降薪裁员不知道还有多少企业还是能这样搞下去？那回答刚才的提问，这是在图什么？</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">余窃以为：想想天龙八部中<span>慕容博为什么要鼓动宋辽开战，就明白了。这是一个意思。原文如下：</span>慕容博道：「不错，其时我慕容氏建一支义旗，兵发山东，为大辽呼应，同时吐蕃、西夏、大理三国一时并起，咱五国瓜分了大宋，亦非难事。你看不乱我怎么有机会？&nbsp; 如果一个系统一个数据库再加几十个 tomcat。10 个人搞定了。那么我还怎么凸显我的能力？根本没机会。回归到工作中来，我经历过三个典型的缩容架构。给大家说说。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 1：</strong>某公司要做一个登录系统，用到了 Oracle、MongoDB、Redis、Memcache、Cassandra。我开始不明白这是为什么？答：说要承载每秒 1000 个的用户登录需求，怕扛不住。我一听就笑了。如果懂数据库的就知道任何一个关系型数据库，如果用户登录这种信息采用关系型数据做的话，就是一个点查的场景，建立好索引。每秒几万都不是问题。为什么 1000 都担心？其实质就是全表查呀。我问到如果你担心登录？那么登录以后得浏览和下单等动作任何一个都比登录验证用户密码的动作要复杂，你不担心吗？而且据我了解，这个方案的架构是把以上 5 个串行的，不知道那个架构师是不是培训机构出来的。估计是想一层层减缓冲击，但是不懂数据库就这样设计了。结果任何一个环节的问题都导致整个不能用。在我的建议下，去掉了 MongoDB、Memcache、Cassandra。其实 Redis 也可以不用。但是领导说留下吧。再去掉实在是太丢脸了。一个 Oracle 能每秒 1000 次吗？&nbsp; 我搭建了模型给他演示了一下，每秒 3 万。领导尴尬的说，嗯，够用就行。Redis 还是留着吧。我知道如果这个再去掉，就实在太打脸了。为此系统稳定性急剧上升。该公司还省了一笔钱。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 2：</strong>某公司有几十个业务系统，希望用户系统打通。结果各个系统之间要对用户的注册、注销、变更做同步。接下来就是开发人员喜欢的接口了。大量的接口。结果是不是丢了，就是慢了。同步慢导致这里能登录那里不能立即生效。丢了导致过了一天，都登录不上去。为此运营和运维压力都大。我了解了以后说你们几十个系统都是一个数据库实例，就是不同的 schema，甚至有的还是一个 schema。为什么要做接口？最后一个开发组长受不了了。搞毛线啊，直接访问吧。不做接口了。最后就直接走表与表之前的访问，所有系统都访问一个用户会员表。效果是，系统稳定性急剧上升。数据永远一致，而且访问效率提升 1000 倍以上。其实接口这个是针对外部是不得不做的，为了是保护数据。比如支付宝对银行，这是不同的企业。但是一个企业内部，其实没有必要。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 3：</strong>某公司有三个业务系统。分了 3 个开发团队，分别用了 Oracle、MySQL 和 SQLServer 数据。结果流程是紧耦合的。一个公司业务的必然是耦合啊。结果是一个需求下来，三个开发团队都要做，之间还有接口，每个团队都说人力不足。结果最后该公司领导受不了了。三个数据库合并。结果是稳定性急剧上升。原来说人力不够的，现在够了。因为同样事情只做一次了，接口统统没有了。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">但是如果都是这样做，天下太平了，那慕容博没机会了。你身边有这样的吗？</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oscpyaqxylk/blog/10114049</guid>
            <link>https://my.oschina.net/oscpyaqxylk/blog/10114049</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
