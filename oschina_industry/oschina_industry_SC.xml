<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 25 Sep 2023 09:31:01 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[阿里云通义千问 14B 模型开源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">阿里云宣布开源通义千问 140 亿参数模型 Qwen-14B 及其对话模型 Qwen-14B-Chat，</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">免费可商用。</span><span style="background-color:#ffffff; color:#222222">据阿里云 CTO 周靖人介绍，Qwen-14B 在多个权威评测中超越同等规模模型，部分指标甚至接近 Llama2-70B。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span><strong>Qwen-14B</strong>是一款支持多种语言的高性能开源模型，相比同类模型使用了更多的</span><span>高质量数据，整体训练数据超过 3 万亿 Token，使得模型具备更强大的推理、认</span><span>知、规划和记忆能力。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><strong><span>Qwen-14B-Chat&nbsp;</span></strong><span>是在基座模型上经过精细 SFT 得到的对话模型。</span><span>借助基座模型强</span><span>大性能，Qwen-14B-Chat 生成内容的准确度大幅提升，也更符合人类偏好，内容</span><span>创作上的想象力和丰富度也有显著扩展。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span>用户可从魔搭社区直接下载模型，也可通过阿里云灵积平台访问和调用</span><span>Qwen-14B 和 Qwen-14B-Chat。</span></p><p style="margin-left:0; margin-right:0; text-align:left"><strong><span>效果展示：</span></strong></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">国际惯例自我认知</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="114" src="https://oscimg.oschina.net/oscnet/up-ba41084baf4e54574082f67689daa5ee7ad.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">写作创作</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="165" src="https://oscimg.oschina.net/oscnet/up-38bcc16d1d1f9d97efd019efa0766dd0427.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">知识常识</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="135" src="https://oscimg.oschina.net/oscnet/up-07c15e6bbd711044edc21ef483bc70b8b15.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">数学</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="137" src="https://oscimg.oschina.net/oscnet/up-29dde8414bcd875eea156ad12aa2b9a5716.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">代码</p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><img height="135" src="https://oscimg.oschina.net/oscnet/up-9efe859813065d5b02adf51a95674796dce.png" width="500" referrerpolicy="no-referrer"></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left">安全</p></li></ul><p><img height="95" src="https://oscimg.oschina.net/oscnet/up-9e4c4580c590e97f8926d482a9d66168a3b.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 08:26:45 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259447</guid>
            <link>https://www.oschina.net/news/259447</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[向 PC 厂商付钱阻碍 AMD 进入市场，英特尔被欧盟罚款 4 亿美元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">欧盟因一起&nbsp;<span style="background-color:#ffffff">2002 年至 2007&nbsp;</span>期间的市场垄断案件对英特尔处以 4 亿美元（3.76 亿欧元）</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fec.europa.eu%2Fcommission%2Fpresscorner%2Fdetail%2Fen%2Fqanda_23_4571" target="_blank">的罚款</a><span style="color:#000000">。<span style="background-color:#ffffff">导致此罚款的案件与英特尔在 PC 处理器市场的商业行为有关，该公司以赤裸裸的限制行为阻碍竞争对手进入市场。</span></span></p><p><img height="259" src="https://oscimg.oschina.net/oscnet/up-2b85d5cfbdb20a92efee4134f93b711f816.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">相关裁决可追溯到 2009 年，彼时欧盟委员会对英特尔处以创纪录的 10.6 亿欧元罚款，理由是英特尔滥用其在 x86 中央处理单元（「CPU」）计算机芯片市场的主导地位。该公司的一些过分行为包括：</span></p><ul><li><span style="color:#000000">向计算机制造商提供全部或部分隐性回扣，条件是他们从英特尔购买全部或几乎全部 x86 CPU（即所谓的「conditional rebates」&nbsp;）；</span></li><li><span style="color:#000000">向计算机制造商付费，以停止或推迟推出包含竞争对手 x86 CPU 的特定产品，并限制这些产品的销售渠道（所谓的「naked restrictions」）。</span></li></ul><p><span style="color:#000000">此后英特尔方面提起了上诉，欧洲第二高等法院「欧盟普通法院」(General Court) 于 2022 年判决认为，欧盟委员会对英特尔有条件回扣的评估不完整，并认为该决定没有充分证明这些回扣具有限制竞争的能力。该公司的一些行为（如隐性回扣）在上诉时因缺乏相关证据而被撤销。</span></p><p><span style="color:#000000">但委员会仍认定了英特尔付钱给 PC 制造商以推迟或限制使用 AMD 处理器的产品的事实。</span><span style="color:#000000"><span style="background-color:#ffffff">并具体举例称：</span></span></p><ul><li><span style="color:#000000">2002 年 11 月至 2005 年 5 月期间，英特尔向惠普付款，条件是惠普 (i) 仅向中小型企业销售基于其竞争对手 AMD x86 CPU 的商用台式机；(ii) 仅通过直接分销渠道（而非分销商）；(iii) 惠普推迟 6 个月在欧洲推出首款基于 AMD 的商用台式机。</span></li><li><span style="color:#000000">英特尔向宏碁支付款项的条件是，宏碁将基于 AMD 的笔记本电脑的推出时间从 2003 年 9 月推迟到 2004 年 1 月。</span></li><li><span style="color:#000000">英特尔向联想付款的条件是，联想将基于 AMD 的笔记本电脑的推出时间从 2006 年 6 月推迟到 2006 年底。</span></li></ul><p>「<span style="color:#000000">由于这些限制行为，计算机制造商停止、推迟或限制基于竞争对手芯片组的产品的商业化，而这些产品是他们积极计划的，并且有消费者需求。因此，英特尔公司赤裸裸的限制对市场竞争造成了不利影响，剥夺了消费者本来可以拥有的选择权。&nbsp;</span>」</p><p><span style="color:#000000">欧盟委员会目前正在就 <span style="background-color:#ffffff">General Court&nbsp;</span>对英特尔回扣行为的判决提起上诉，官方已向欧盟最高法院 -- 欧盟法院提出上诉。如果上诉被受理，英特尔被要求支付的罚款可能会增加。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 08:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259446/eu-intel-400-million-blocking-amds-market-access</guid>
            <link>https://www.oschina.net/news/259446/eu-intel-400-million-blocking-amds-market-access</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[马斯克硬核迁移服务器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>马斯克传里面有一个故事，去年底马斯克接手 Twitter 后为了省钱，要将萨克拉门托的服务器搬到波特兰，IT 经理跟马斯克汇报说要 9 个月，马斯克觉得这时间太长了，一个月就能搞定，但 IT 经理坚持不妥协，于是他亲自跑到机房拔电源租卡车搬服务器。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0925/152809_qJYK_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-08b1517c2a8541bf0ccb680727cc7118b0d.png" referrerpolicy="no-referrer"></p></blockquote><p>《伊隆·马斯克亲自搬运服务器，彰显他在 X 公司（此前为 Twitter）的「狂热紧迫感」》</p><p>*此内容改编自 Walter Isaacson 本月出版的传记《伊隆·马斯克》。</p><p>「这个时间表看起来像是我会认为勉强可以接受的吗？」马斯克问道。「显然不是。如果计划时间长，那就是错的。」</p><p>那是 12 月 22 日深夜，位于 X 公司 10 楼的会议室，马斯克正在与两名基础设施经理进行紧张的交谈。他们之前与他的接触并不多，尤其是在他心情不好时。</p><p>其中一人试图解释问题。位于萨克拉门托的一家数据服务公司允许 X 公司延长其服务器租约，以便在 2023 年有序迁出。「但今天早上」，这名显得有些紧张的经理告诉马斯克，「他们回来告诉我们说这个计划不再适用，因为他们认为我们在财务上不再稳健。」</p><p>这个设施每年花费 X 公司超过 1 亿美元。马斯克想通过将服务器迁移到 X 公司在俄勒冈州波特兰的其他设施来节省这笔费用。另一位经理表示这项工作不能立即进行。她平静地说：「我们至少需要六到九个月的时间，因为萨克拉门托仍然需要服务流量。」</p><p>多年来，马斯克经常面临着他认为的必要与别人告诉他的可能之间的选择。结果几乎总是一样的。他沉默了几秒钟，然后宣布：「你们有 90 天时间来完成这项任务。如果你们做不到，你们可以辞职。」</p><p>这名经理开始详细解释迁移服务器到波特兰的障碍。「机架密度不同，电力密度也不同」，她说。「所以机房需要进行升级。」她开始详细介绍更多，但被马斯克打断。</p><p>「这让我的大脑感到压抑」，他说。</p><p>「对不起，我没有这个意思」，她平稳地回答。</p><p>「你知道头爆炸的表情符号吗？」他问她。「我的脑袋现在就是这个感觉。真是一堆屁话。波特兰明显有大量的空间，从一个地方迁移到另一个地方简直小菜一碟。」</p><p>当 X 公司的经理们再次试图解释时，马斯克打断了他们。「你们能不能去我们的服务器中心，然后给我发视频？」他问。</p><p>那是圣诞节前的三天，经理承诺一周后提供视频。「不，明天」，马斯克命令。「我曾经自己建设过服务器中心，我可以判断是否还可以放更多的服务器。这就是为什么我问你们是否真的去过那些设施。如果你们没有去过，那你们说的就是胡说八道。」</p><p>SpaceX 和 Tesla 的成功是因为马斯克不懈地推动他的团队更加敏捷、有创造力，并发起突击冲刺以解决所有障碍。这就是他们如何在弗里蒙特快速组装汽车生产线，并在得克萨斯州的沙漠中建立试验设施，以及在卡纳维拉尔角使用旧零件建造发射场。</p><p>「你们需要做的就是将服务器迁移到波特兰」，他说。「如果超过 30 天，我会很震惊。」他停顿了一下，重新计算。「找一家搬家公司，运输电脑需要一个星期，然后再花一个星期来连接它们。两周。就应该这样。」</p><p>所有人都默不作声。但马斯克仍在发火。「如果你们租了一个 U-Haul （一家租车公司），你们可能自己就能完成。」两位 X 公司的经理看着他，试图判断他是否是认真的。马斯克的两位亲密助手 Steve Davis 和 Omead Afshar 也在场。他们多次看到过他这样，知道他可能真的这么认为。</p><p>「为什么我们现在不去做？」James Musk 提议。</p><p>James 和他的弟弟 Andrew，是马斯克的小堂弟，12 月 23 日，也就是那次令人沮丧的关于如何迁移服务器的基础设施会议的次日，与他一同从旧金山飞往奥斯汀。他们原计划去塔霍度过圣诞节，但那天伊隆邀请他们去奥斯汀。</p><p>James 有点犹豫，他精疲力竭，不想再加重压力，但 Andrew 说服他们应该去。所以他们最后坐在飞机上听伊隆抱怨服务器的事。</p><p>当飞机飞过拉斯维加斯时，James 提出了一个建议，他们现在就可以移动服务器。这是马斯克喜欢的那种冲动、不切实际的建议。尽管已经是深夜，但他让飞行员转向，他们重新返回萨克拉门托。</p><p>他们着陆后能租到的唯一一辆车是丰田 Corolla。他们不确定晚上如何进入数据中心，但一个名为 Alex 的来自乌兹别克斯坦的 X 员工还在那里。他欣然让他们进入，并带领他们参观。</p><p>这个设施也为许多其他公司提供了服务器存放空间，非常安全，进入每个金库都需要进行视网膜扫描。乌兹别克斯坦的 Alex 帮助他们进入了 X 公司的金库，那里有大约 5200 个冰箱大小的机架，每个机架有 30 台电脑。</p><p>「这些东西看起来并不难移动」，伊隆宣布。这是一个扭曲现实的说法，因为每个机架重约 2500 磅，高 8 英尺。</p><p>「你们需要雇佣承包商来抬起地板面板」，Alex 说。「它们需要用吸盘来抬起。」他说，还需要另一组承包商去拆除电缆和地震杆。</p><p>马斯克转向他的保安，借了一把小刀。使用它，他能够抬起地板上的一个通风口，这让他可以撬开地板面板。然后他爬到服务器下面，用小刀撬开了一个电箱，拔掉了服务器插头，等着看会发生什么。没什么异常发生。服务器已经准备好迁移。</p><p>「这看起来并不难」，当他这么说时，Alex 和其他人都目瞪口呆地看着他。此刻的马斯克完全兴奋起来。他大声笑说，这就像是《碟中谍》的萨克拉门托版。</p><p>第二天——圣诞前夜，马斯克召集了增援。Ross Nordeen，与他的朋友 James 在 Tesla 工作，从旧金山驱车而来。他在联合广场的 Apple Store 花了 2000 美元，买下了所有的 AirTags，这样服务器在迁移过程中就可以被跟踪。然后他去了家得宝，花了 2500 美元买了扳手、断线钳、头灯和拧下地震螺栓所需的工具。</p><p>Steve Davis，马斯克的忠诚副手，找人租了一辆半挂车，并安排了搬家车。其他来自 SpaceX 的援助队员也已到达。这些服务器机架都有轮子，所以团队能够断开其中四个并将它们推到待命的卡车上。这表明，这五千两百多个服务器可能在几天内全部移动。 「伙计们干得好！」马斯克兴高采烈地说。</p><p>该设施的其他工作人员带着混合的惊奇和恐惧看着。马斯克和他的团队在没有用箱子包装或用防护材料包裹的情况下，直接推动服务器，然后使用店里买来的绑带固定它们在卡车上。「我从未装载过半挂车」，James 承认。Ross 称其为「令人恐惧」。这就像清理衣橱，「但里面的东西都是至关重要的。」</p><p>下午 3 点，当他们把四台服务器装到卡车上后，这一消息传到了拥有并管理数据中心的 NTT 公司的高层。他们下令马斯克的团队停止行动。马斯克的表情中混杂着欢乐和愤怒，这是他经常伴随着他的狂热激进时出现的情绪。他给存储部门的 CEO 打电话，CEO 告诉他，在没有专家的情况下，是不可能移动服务器机架的。「屁话」，马斯克反驳。「我们已经装了四台到半挂车上了。」</p><p>这位 CEO 随后告诉他，一些地板承受不了超过 500 磅的压力，所以滚动一个 2000 磅的服务器会造成损坏。马斯克回应说，服务器有四个轮子，所以任何一个点上的压力只有 500 磅。「这家伙数学真的不太行」，马斯克告诉他的队友。</p><p>在破坏了 NTT 管理层的圣诞前夜，并使他们在明年可能损失超过 1 亿美元的收入后，马斯克表示同情，并说他会暂停迁移服务器两天。但他警告说，圣诞节后他们会继续。</p><p>圣诞节后，Andrew 和 James 返回萨克拉门托，看看他们还能移动多少服务器。他们没有带足够的衣服，所以去了沃尔玛买了牛仔裤和 T 恤。</p><p>NTT 希望他们使用的搬运承包商收费是每小时 200 美元。所以 James 在 Yelp 上找到了一个名为 Extra Care Movers 的公司，他们只需要十分之一的费用。这家看起来有些乱七八糟的公司将低成本的理念发挥到极致。老板曾在街上流浪，后来有了孩子，他正在试图重整旗鼓。他没有银行账户，所以 James 使用 PayPal 支付给他。</p><p>第二天，工作团队希望付现金，所以 James 去银行从他的个人账户中取出了 13,000 美元。两名团队成员没有身份证明，这使得他们很难进入设施。但他们用勤奋弥补了这一点。「每多移动一台服务器，你们可以得到一美元的小费」，James 在某个时刻宣布。从那时起，每当他们将新的服务器装到卡车上，工人们都会问他们现在装了多少。</p><p>服务器上有用户数据，James 最初并没有意识到，出于隐私原因，它们在迁移前应该被彻底擦除。「当我们知道这个时候，服务器已经被拔掉并推出去，所以我们不可能再推回去，插入，然后再擦除」，他说。此外，擦除软件也不能工作。「靠，我们怎么办？」他问。伊隆建议他们锁住卡车并进行追踪。</p><p>所以 James 派人到家得宝买了一些大的挂锁，他们将组合代码发送到波特兰，以便卡车可以在那里被打开。「我简直不敢相信它起作用了」，James 说。「他们都安全地到达了波特兰。」</p><p>到这周结束时，他们已经使用了萨克拉门托所有可用的卡车。尽管该地区受到了雨的袭击，他们在三天内移动了 700 多个机架。该设施之前的记录是一个月移动 30 台。这仍然留下了大量的服务器在设施中，但这群人已经证明了它们可以被快速移动。其余的部分在 1 月份由 X 公司的基础设施团队处理。</p><p>这一切听起来都很激动人心和鼓舞人心，对吧？这是马斯克大胆和有创意的方法的一个例子！但与所有关于马斯克的事情一样，这也并非那么简单。这也是他鲁莽、对反驳的不耐烦和他恐吓人们的一个例子。一个星期前，X 公司的基础设施工程师在那次令人头疼的会议中试图解释为什么快速关闭萨克拉门托中心会有问题，但他打断了他们。他在忽略否定者时有很好的记录。但并不完美。</p><p>在接下来的两个月里，X 公司不稳定。服务器的缺乏导致了多次系统崩溃，包括当马斯克为总统候选人 Ron DeSantis 主持 Twitter Spaces 时。到 2023 年 3 月，马斯克会承认：「回头看，整个萨克拉门托的关停是一个错误。有人告诉我我们的数据中心有冗余。我不知道的是，我们有 70,000 个硬编码的引用指向萨克拉门托。由此导致的问题至今仍然存在。」</p><p>在 Tesla 和 SpaceX，他最有价值的助手已经学会了如何避开他的坏主意，并给他逐渐透露不受欢迎的信息，但 X 公司的老员工不知道该怎么处理他。也就是说，X 公司还活着。萨克拉门托的事件向 X 公司的员工展示了，当他谈到需要狂热的紧迫感时，他是认真的。</p><p>Walter Isaacson 是 CNBC 的撰稿人，他还写过关于伊隆·马斯克、Jennifer Doudna、Leonardo da Vinci、Steve Jobs、Albert Einstein、Benjamin Franklin 和 Henry Kissinger 的传记。他在 Tulane 大学教授历史，曾是 Time 杂志的编辑和 CNN 的 CEO。</p><p>相关链接</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1727858283%2FNkRTyymTQ" target="_blank">https://weibo.com/1727858283/NkRTyymTQ</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fthecat%2Fstatus%2F1705860673149059115" target="_blank">https://twitter.com/thecat/status/1705860673149059115</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cnbc.com%2F2023%2F09%2F11%2Felon-musk-moved-twitter-servers-himself-in-the-night-new-biography-details-his-maniacal-sense-of-urgency.html" target="_blank">https://www.cnbc.com/2023/09/11/elon-musk-moved-twitter-servers-himself-in-the-night-new-biography-details-his-maniacal-sense-of-urgency.html</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 07:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259436/elon-musk-moved-twitter-servers-himself</guid>
            <link>https://www.oschina.net/news/259436/elon-musk-moved-twitter-servers-himself</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TCP 拥塞控制拯救了互联网]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>这篇文章<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F09%2F24%2Ftcp_congestion_control_internet%2F" target="_blank">介绍</a>了 <strong>TCP 拥塞控制如何拯救互联网</strong>。</p><blockquote><p><img alt="" src="https://static.oschina.net/uploads/space/2023/0925/120655_8mQ8_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>在今年的 SIGCOMM 会议上，尽管关于 TCP 拥塞控制的第一篇论文已经发表了 35 年，但拥塞控制仍然在会议议程中占有一个小时的时间。</p><p>关于 TCP/IP 协议为何比同时代的协议更成功，有许多理论，但这些理论并不容易验证。互联网协议的成功很可能有很多因素。文章观点认为，<strong>拥塞控制是使互联网从中等规模发展到全球规模的关键因素之一</strong>。</p><p>在 David Clark 的论文「DARPA 互联网协议的设计哲学」中，一个明确的设计目标是：「<strong>互联网架构必须允许其资源进行分布式管理</strong>。」这个目标有许多不同的含义，但 Jacobson 和 Karels 首次在 TCP 中实现拥塞控制就是一个很好的例子，体现了他们对这个原则的重视。</p><p>文章之所以将互联网的成功归功于拥塞控制算法，其中一个原因是，互联网的失败之路在 1986 年就已清晰可见。Jacobson&nbsp;描述了一些早期的拥塞崩溃事件，导致吞吐量下降了三倍。</p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/252693/google-bbr-v3-linux" target="_blank">谷歌称 TCP 拥塞控制算法 BBRv3 表现出色，本月提交到 Linux 内核主线</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 04:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259408/tcp-congestion-control-internet</guid>
            <link>https://www.oschina.net/news/259408/tcp-congestion-control-internet</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[单一数据库拆分成几十个数据库的意义]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">文章来源：微信公众号「四海内皆兄弟」</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">作者：薛晓刚，Oracle ACE/PG ACE partner/ TiDB MVA、布道师/OCP 讲师/ITPUB 核心专家/墨天轮 MVP/Oracle 认证/MySQL 认证/PG 认证/Oceanbase 认证/达梦数据库认证/TiDB 认证</p></blockquote><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">我经历过很多项目，从前就一个数据库支持上万并发，存储上百亿行数据的级别是非常容易得。现如今的玩法不是这样了，而是将一台数据库能解决的事情，拆分成几十个数据库。有一次我的群里有人说有个项目将一个 Oracle 拆了 100 个 MySQL，每个 MySQL 一主两从。也就是 2 比 300 的这样的比例。（因为 Oracle 也是主从，算两个吧）。这技术难度和成本上都陡增。这和最近几年流行的微服务和中台有一定的关系。以下之言代表我个人的愚见。如有冒犯请见谅。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><span>我和多个业内顶级大师的认同一样：<strong>架构师&nbsp; 喜欢&nbsp; &nbsp;重复&nbsp; 造轮子</strong>。</span></p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">我特意分开写，这样突出一下&nbsp; 喜欢&nbsp; 和&nbsp; 重复，造轮子也就算了，有的时候为了生活被迫。但是如果是主观就不对了。而且还是重复。为此有些经验丰富的人不仅感慨「一台一体机能搞定的事，有些人强行拆成几百台 x86，不知道图的啥，收益是啥，投入产出比高不高？」答案是一定是比原来成本高的。不仅仅是硬件，还有人工。本来可能开发人员 30 人，现在每个 300 人根本搞不下来。接下来运维也要加人。由于数据库一堆，没法出报表了，来 Hadoop 做大数据吧。别人都有，我们也要有。有了 Hadoop 数据要加工，做主题，再来 30-50 人。从促进就业的角度是积极的。不过如今全国都是降薪裁员不知道还有多少企业还是能这样搞下去？那回答刚才的提问，这是在图什么？</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">余窃以为：想想天龙八部中<span>慕容博为什么要鼓动宋辽开战，就明白了。这是一个意思。原文如下：</span>慕容博道：「不错，其时我慕容氏建一支义旗，兵发山东，为大辽呼应，同时吐蕃、西夏、大理三国一时并起，咱五国瓜分了大宋，亦非难事。你看不乱我怎么有机会？&nbsp; 如果一个系统一个数据库再加几十个 tomcat。10 个人搞定了。那么我还怎么凸显我的能力？根本没机会。回归到工作中来，我经历过三个典型的缩容架构。给大家说说。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 1：</strong>某公司要做一个登录系统，用到了 Oracle、MongoDB、Redis、Memcache、Cassandra。我开始不明白这是为什么？答：说要承载每秒 1000 个的用户登录需求，怕扛不住。我一听就笑了。如果懂数据库的就知道任何一个关系型数据库，如果用户登录这种信息采用关系型数据做的话，就是一个点查的场景，建立好索引。每秒几万都不是问题。为什么 1000 都担心？其实质就是全表查呀。我问到如果你担心登录？那么登录以后得浏览和下单等动作任何一个都比登录验证用户密码的动作要复杂，你不担心吗？而且据我了解，这个方案的架构是把以上 5 个串行的，不知道那个架构师是不是培训机构出来的。估计是想一层层减缓冲击，但是不懂数据库就这样设计了。结果任何一个环节的问题都导致整个不能用。在我的建议下，去掉了 MongoDB、Memcache、Cassandra。其实 Redis 也可以不用。但是领导说留下吧。再去掉实在是太丢脸了。一个 Oracle 能每秒 1000 次吗？&nbsp; 我搭建了模型给他演示了一下，每秒 3 万。领导尴尬的说，嗯，够用就行。Redis 还是留着吧。我知道如果这个再去掉，就实在太打脸了。为此系统稳定性急剧上升。该公司还省了一笔钱。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 2：</strong>某公司有几十个业务系统，希望用户系统打通。结果各个系统之间要对用户的注册、注销、变更做同步。接下来就是开发人员喜欢的接口了。大量的接口。结果是不是丢了，就是慢了。同步慢导致这里能登录那里不能立即生效。丢了导致过了一天，都登录不上去。为此运营和运维压力都大。我了解了以后说你们几十个系统都是一个数据库实例，就是不同的 schema，甚至有的还是一个 schema。为什么要做接口？最后一个开发组长受不了了。搞毛线啊，直接访问吧。不做接口了。最后就直接走表与表之前的访问，所有系统都访问一个用户会员表。效果是，系统稳定性急剧上升。数据永远一致，而且访问效率提升 1000 倍以上。其实接口这个是针对外部是不得不做的，为了是保护数据。比如支付宝对银行，这是不同的企业。但是一个企业内部，其实没有必要。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start"><strong>案例 3：</strong>某公司有三个业务系统。分了 3 个开发团队，分别用了 Oracle、MySQL 和 SQLServer 数据。结果流程是紧耦合的。一个公司业务的必然是耦合啊。结果是一个需求下来，三个开发团队都要做，之间还有接口，每个团队都说人力不足。结果最后该公司领导受不了了。三个数据库合并。结果是稳定性急剧上升。原来说人力不够的，现在够了。因为同样事情只做一次了，接口统统没有了。</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:start">但是如果都是这样做，天下太平了，那慕容博没机会了。你身边有这样的吗？</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oscpyaqxylk/blog/10114049</guid>
            <link>https://my.oschina.net/oscpyaqxylk/blog/10114049</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GitHub CEO：AI 无法取代程序员]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GitHub 首席执行官 Thomas Dohmke 最近在公开场合分享了他对于人工智能和软件开发之间关系的看法。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ed3366196721b2077f4c73a8e594213ac86.png" referrerpolicy="no-referrer"></p><p>Thomas Dohmke 认为，在 Copilot 及其相关 Copilot Chat 等辅助工具的推动下，人工智能和软件开发现在已密不可分。</p><p>与此同时，他也坚持自己的观点——<strong>滚雪球式的人工智能革命不会给软件开发行业敲响丧钟</strong>。</p><p>Dohmke 说道，行业对软件开发者的需求将继续超过供应。事实上，Doohmke 和许多其他技术领导者一样，长期以来一直坚持认为 Copilot 等 AI 工具只是用于提高开发者的工作效率，而不是取而代之。</p><p>至于未来，比如十年后——又会怎样呢？</p><p>Doohmke 表示，十年内软件的数量只会呈指数增长，我们需要管理的代码行数越来越多，我们的想法也越来越多，坦白说，现在每家公司都是软件公司。</p><p>Doohmke 提到行业对于软件开发者仍有高需求的原因之一是大量「老」代码仍然以其原始形式存在。比如银行和金融机构仍在运行 60 年代的 COBOL 代码，而那些 60 年代的开发者现在都退休了。而且当时的代码没有采用基於单元测试和 CI/CD 进行编写，因此必须有人维护它，并希望将 COBOL 代码转换为 Java 或 Python。</p><p>当然，随着公司发展其技术栈，可能并不需要长期维护遗留的老代码。但 Doohmke 认为，生成式人工智能本身将创造更多对技术人才的需求。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259402</guid>
            <link>https://www.oschina.net/news/259402</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[智谱 AI 推出数学模型 MathGLM]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">智谱 AI 宣布推出数学模型 MathGLM，以提升大语言模型的数学推理能力。它可以在不使用计算器工具的情况下，执行复杂算术运算，解答中文数学应用题，部分表现超过 GPT4 和 ChatGPT，目前已在魔搭社区 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FZhipuAI%2FMathGLM%2Fsummary" target="_blank">ModelScope</a> 全球首发上架。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">MathGLM 旨在增强大模型在数学推理上的性能，主要关注在精确计算算术运算（基础算术运算和复杂混合运算）和提升模型的中文数学解决能力。具体表现如下：</span></span></p><p><span style="color:#000000"><strong><span style="background-color:#ffffff">算术能力</span></strong></span></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">高位数加减乘</span></p></li></ul><p style="margin-left:0; margin-right:0"><span style="color:#000000"><img height="248" src="https://oscimg.oschina.net/oscnet/up-0019452a7ef51ed43ea63d6a0ecf4139b8f.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">解方程</span></p></li></ul><p style="margin-left:0; margin-right:0"><span style="color:#000000"><img height="93" src="https://oscimg.oschina.net/oscnet/up-5a8a2bb76df8fd1b267e609afee8b3da82f.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">算价格</span></p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><img height="103" src="https://oscimg.oschina.net/oscnet/up-2e2bef015e4fff480a8bde8e03bc06e1bc6.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#000000">分苹果余数问题</span></p></li></ul><p style="margin-left:0; margin-right:0"><span style="color:#000000"><img height="101" src="https://oscimg.oschina.net/oscnet/up-6082ffe6421c08e575d40b9f57d5752f21a.png" width="500" referrerpolicy="no-referrer"></span></p><ul><li><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">浓度计算类</span></p></li></ul><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><img height="113" src="https://oscimg.oschina.net/oscnet/up-719a234879746772de63fdf0ad83444df0b.png" width="500" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259400</guid>
            <link>https://www.oschina.net/news/259400</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Opentofu —— 开源基础设施即代码工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenTofu 是一种 OSS 工具，用于安全高效地构建、更改和版本控制基础设施。 OpenTofu 可以管理现有和流行的服务提供商以及定制的内部解决方案。项目目前正在积极开发中。</p><p>OpenTofu 的主要特点是：</p><ul><li>基础设施即代码：基础设施是使用高级配置语法来描述的。 这允许对数据中心的蓝图进行版本控制并像处理任何其他代码一样进行处理。 此外，基础设施可以共享和重复使用。</li><li>执行计划：OpenTofu 有一个「计划」步骤，用于生成执行计划。 执行计划显示了当你调用 apply 时 OpenTofu 将执行的操作。这可以让你避免在 OpenTofu 操作基础设施时出现任何意外。</li><li>资源图：OpenTofu 构建所有资源的图，并并行化任何非依赖资源的创建和修改。 因此，OpenTofu 尽可能高效地构建基础设施，并且运营商可以深入了解其基础设施中的依赖关系。</li><li>变更自动化：复杂的变更集可以通过最少的人工交互应用于您的基础设施。 通过前面提到的执行计划和资源图，你可以准确地知道 OpenTofu 将更改什么内容以及以什么顺序更改，从而避免了许多可能的人为错误。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/opentofu</guid>
            <link>https://www.oschina.net/p/opentofu</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | IDEA ORM 代码生成插件 CodeGenerateORM]]>
            </title>
            <description>
                <![CDATA[<p>仓库简介：该插件是从个人插件中心孵化出来的，已经可以独立使用了，目前在 idea 的官方插件市场已经有挺多人在使用；
该插件是用于快速生成 ORM 层代码的插件，具体的介绍可以参考同级目录下的 「插件简介.md」；</p><p>Warehouse introduction: This plugin was incubated from the personal plugin center and can now be used independently. Currently, there are quite a few people using it in the official plugin market of IDEA;
This plugin is used to quickly generate ORM layer code. For specific introduction, please refer to "Introduction to plugins. md" in the same level directory;</p><p>个人 idea 孵化中心项目：<a href="https://gitee.com/yysimple/idea-plugins">https://gitee.com/yysimple/idea-plugins</a></p><p>Personal Idea Incubation Center Project：<a href="https://gitee.com/yysimple/idea-plugins">https://gitee.com/yysimple/idea-plugins</a></p><h2><a id="user-content-简单的用法" class="anchor" href="https://gitee.com/yysimple/CodeGenerateORM#%E7%AE%80%E5%8D%95%E7%9A%84%E7%94%A8%E6%B3%95"></a>简单的用法</h2><h3><a id="user-content-直接自己连接数据源生成" class="anchor" href="https://gitee.com/yysimple/CodeGenerateORM#%E7%9B%B4%E6%8E%A5%E8%87%AA%E5%B7%B1%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E6%BA%90%E7%94%9F%E6%88%90"></a>直接自己连接数据源生成</h3><blockquote><p>无需在 idea 的 database 里面配置，自己配置数据源连接，目前我是把入口放在不同的地方</p><ol><li>选中项目 -&gt; 右键,最下面 -&gt; ORMCodeGenerate，然后就会出来弹窗让你先配置；（mac 用户不适用快捷键推荐）</li><li>Tools -&gt; 最下面；（Windows 用户不适用快捷键推荐）</li><li>control + 9，快捷键的方式是我最推荐的；</li></ol></blockquote><p><strong>下面就是几张操作图：参考代码里面的 「images/插件用法.png」;</strong><img src="https://gitee.com/yysimple/CodeGenerateORM/raw/master/images/%E6%8F%92%E4%BB%B6%E7%94%A8%E6%B3%95.png" alt="直接连接数据源" referrerpolicy="no-referrer"></p><h3><a id="user-content-直接选择 idea 的 database 选中表生成" class="anchor" href="https://gitee.com/yysimple/CodeGenerateORM#%E7%9B%B4%E6%8E%A5%E9%80%89%E6%8B%A9idea%E7%9A%84database%E9%80%89%E4%B8%AD%E8%A1%A8%E7%94%9F%E6%88%90"></a>直接选择 idea 的 database 选中表生成</h3><blockquote><p>这个就是大多数 ORM 生成的方式，支持的数据源就是 idea 支持多少，这里就支持多少，但是这里就是每个项目都需要配置数据源，
所以才有了上面那种方式，当然看个人喜好，两种方式都支持了，我是 mysql 生成的时候比较喜欢用上面那个，我不喜欢在项目
里面去连接数据源，我专门开个窗口连所有数据源的（有些人还喜欢用 DG，Navicat；纯看个人喜好）</p></blockquote><p>操作也比较简单，但是没提供快捷键：</p><p><strong>操作图片在：「images/table2Orm.png」;</strong><img src="https://gitee.com/yysimple/CodeGenerateORM/raw/master/images/table2Orm.png" alt="选择数据源" referrerpolicy="no-referrer"></p><blockquote><ol><li>需要选中表，然后右键</li><li>中间没有找到对应列类型，会询问你需要关联到 java 的什么类型；</li><li>最后的弹窗就是上面的阉割版，功能是一样的，就不介绍了；</li><li>这里有个小问题，你的表中必须要有主键，没有的话，mapper 文件、service 文件里面的方法不会帮你生成，因为有个方法是 byId 的；</li></ol></blockquote><p>具体详细的文档参考：「插件简介.md」 or 「plugin-intro.md」；</p><p>插件源码详解：</p><p>微信公众号：<a href="https://gitee.com/link?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fm4-P2vLRn68w4y9vEHnwqQ">https://mp.weixin.qq.com/s/m4-P2vLRn68w4y9vEHnwqQ</a></p><p>csdn：<a href="https://gitee.com/link?target=https%3A%2F%2Fblog.csdn.net%2Fweixin_44704261%2Farticle%2Fdetails%2F124071700">https://blog.csdn.net/weixin_44704261/article/details/124071700</a></p><p>公众号：爱搞技术的吴同学</p><blockquote><p>公众号里经常会写高质量文章</p></blockquote><p><img src="https://gitee.com/yysimple/CodeGenerateORM/raw/master/images/wechat.png" alt="微信公众号" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/yysimple/CodeGenerateORM</guid>
            <link>https://gitee.com/yysimple/CodeGenerateORM</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 十行代码让日志存储降低 80%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>前言</h3><p style="text-align:justify">履约管理是一个面向物流商家的 OMS 工作台，自从初代目把架子搭起来之后，就没有继续投入了，后来一直是合作伙伴同学在负责日常维护和需求支撑。经过几年的野蛮生长，系统已经杂草丛生，乱象百出。再后来，甚至一度成为一块无主之地，走行业共建的方式来支持。对于一个不支持行业隔离的系统，行业共建意味这个系统将快速腐化。两年前我开始接管履约管理，来到这片广阔的蛮荒之地，正如所有那些渴望造物乐趣并且手里刚好有锤子镰刀的人，我就像一匹脱缰的野马，脑子里经常会产生很多大胆且新奇的想法，希望借此把履约管理打造成一个完美的系统。只可惜真正能够付诸实践的少之又少，本篇就是为数不多得以落地，并且有相当实用价值 idea 中的一个，整理出来分享给有需要的同学做参考。</p><span id="OSC_h3_2"></span><h3>日志乱象</h3><p style="text-align:justify">日志是日常开发中最有可能被忽视，最容易被滥用的一个模块。被忽视是因为打日志实在是一个再简单不过的事，前人设计好了一个 logback.xml，后面只需要依样画葫芦定义一个 logger，随手一个 info 调用就搞定，他甚至不确定这条日志能不能打出来，也不知道会打在哪个文件，反正先跑一次试试，不行就换 error。被滥用是因为不同场景日志的格式内容千差万别，或者说日志打法太灵活，太随意了，风格太多样化了，以至于几乎每个人一言不合就要自己写一个 LogUtil，我见过最夸张的，一个系统中用于打日志的工具类，有二三十个之多，后人纠结该用哪个工具可能就要做半个小时的思想斗争，完美诠释了什么叫破窗效应。最好的学习方式就是通过反面教材吸取教训，下面我们列举一些最常见的日志设计开发过程中的问题。</p><span id="OSC_h4_3"></span><h4><strong>分类之乱</strong></h4><p style="text-align:justify">一般来说，一个系统必然需要设计多个日志文件以区分不同业务或场景，不可能所有的日志都打到一个文件里。但是怎么进行分类，没人告诉我们，于是就有了各种各样的分类。按系统模块分。这种分类应该是最基础的一种分类，也是最有层次感的分类。比如履约服务中枢的系统分层。基本上每一层对应一个日志文件。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-b868a86724884a413f29b7f34466c7ec_720w.webp" referrerpolicy="no-referrer"></p><p><strong>按租户身份分。</strong>一般中台系统都会支持多个租户 (行业)，每一个租户单独对应一个日志文件。这种分类一般不会单独使用，除非你要做完全意义上的租户隔离。<strong>意识流分类法。</strong>不符合 MECE 法则，没有清晰统一的分类逻辑，按业务分，按系统模块分，按接口能力分，按新老链路分，各种分法的影子都能看到，结果就是分出来几十个文件，打日志的人根本就不知道这一行的日志会打进哪个文件。以上说的各种分类方式，都不是绝对纯粹的，因为无论哪一种，无论一开始设计的多么边界清晰，随着时间的推进，最后都会演变为一个大杂烩。</p><ul><li>某人希望单独监控某个类产生的日志，新增日志文件；</li><li>新增了一个业务，比如一盘货，想单独监控，新增日志文件；</li><li>发起了一场服务化战役，针对服务化链路单独监控，新增日志文件；</li><li>某个业务想采集用户行为，又不想全接日志消息，新增日志文件；</li><li>资损敞口的场景，需要特别关注，新增日志文件；</li><li>特殊时期内产生的日志，比如大促，新增日志文件；</li></ul><p style="text-align:justify">凡此种种，不一而足。发现没有，总有那么一瞬间能让人产生新增日志文件的神经冲动，他们的诉求和场景也不可谓不合理，尽管这些日志的维度完全不相关，然而没有什么能阻止这种冲动。最开始的那一套日志设计，就像一个濒临死亡的大象，不断地被不同的利益方从身上扯下一块分去。</p><span id="OSC_h4_4"></span><h4><strong>格式之乱</strong></h4><p style="text-align:justify">对于日志需要有一定的格式这点相信没有人会有异议，格式的乱象主要体现在两个方面，一个是格式的设计上，有些系统设计了非常复杂的格式，用多种分隔符组合，支持日志内容的分组，用关键词定位的方式代替固定位置的格式，同时支持格式扩展，这对人脑和计算机去解析都是一种负担。第二个是同一个日志文件，还能出现不同格式的内容，堆栈和正常业务日志混杂。来看一个例子，我不给任何提示，你能在大脑里很快分析出这个日志的结构吗？</p><pre><code>requestParam$&amp;trace@2150435916867358634668899ebccf&amp;scene@test&amp;logTime@2023-06-14 17:44:23&amp;+skuPromiseInfo$&amp;itemId@1234567:1&amp;skuId@8888:1&amp;buyerId@777:1&amp;itemTags@,123:1,2049:1,249:1,&amp;sellerId@6294:1&amp;toCode@371621:1&amp;toTownCode@371621003:1&amp;skuBizCode@TMALL_TAOBAO:1&amp;skuSubBizCode@TMALL_DEFAULT:1&amp;fromCode@DZ_001:1+orderCommonInfo$&amp;orderId@4a04c79734652f6bd7a8876379399777&amp;orderBizCode@TMALL_TAOBAO&amp;orderSubBizCode@TMALL_DEFAULT&amp;toCode@371621&amp;toTownCode@371621003&amp;+</code></pre><span id="OSC_h4_5"></span><h4><strong>工具之乱</strong></h4><p style="text-align:justify">有时候甚至会出现，同一个类，同一个方法中，两行不同的日志埋点，打出来的日志格式不一样，落的日志文件也不一样。为什么会出现这种情况？就是因为用了不同的日志工具。要究其根源，我们需要分析一下不同的工具究竟是在做什么。可以发现，很多工具之间的差别就是支持的参数类型不一样，有些是打印订单对象的，有些是打印消息的，有些是打印调度日志的。还有一些差别是面向不同业务场景的，比如一盘货专用工具，负卖专用工具。还有一些差异是面向不同的异常封装的，有些是打印 ExceptionA，有些是打印 ExceptionB 的。人间离奇事，莫过于此，或许只能用存在即合理去解释了。</p><span id="OSC_h3_6"></span><h3>日志分层</h3><p style="text-align:justify">我一直信奉极简的设计原则，简单意味着牢不可破。上面提到，一套日志系统最终的结局一定是走向混乱，既然这种趋势无法避免，那么我们在最初设计的时候就只能确保一件事，保证原始的分类尽量简单，且不重叠。其实通用的分类方式无非就两种，一种按职能水平拆分，一种按业务垂直拆分。一般来说，一级分类，应该采用水平拆分。因为业务的边界一般是很难划清的，边界相对模糊，职能的边界就相对清晰稳定很多，职能其实反映的是工作流，工作流一经形成，基本不会产生太大的结构性变化。基于这种思路，我设计了如下的日志分层。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-ad19d22bbcb1ee0df488c71b08ec897b_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">从层次上来看，其实只有三层，入口，内核，出口。入口日志只负责打印流量入口的出入参，比如 HSF，controller。出口日志负责打印所有第三方服务调用的出入参。内核日志，负责打印所有中间执行过程中的业务日志。就三层足矣，足够简单，不重不漏。另外把堆栈日志单独拎出来，堆栈相比业务日志有很大的特殊性，本文标题所指出的日志存储降低优化，也只是针对堆栈日志做的优化，这个后面再讲。</p><span id="OSC_h3_7"></span><h3>格式设计</h3><p style="text-align:justify">日志的格式设计也有一些讲究。首先日志的设计是面向人可读的，这个无需多言。另外也非常重要的一个点，要面向可监控的设计，这是容易被很多人忽视的一个点。基于这两个原则，说一下我在格式设计上的一些思路。首先要做维度抽象。既然是面向监控，监控一般需要支持多个维护，比如行业维度，服务维度，商家维度等等，那么我们就需要把所有的维度因子抽出来。那么这些维度实际打印的时候怎么传给 logger 呢？建议是把他们存到 ThreadLocal 中，打的时候从上下文中取。这样做还有一个好处是，日志打印工具设计的时候就会很优雅，只需要传很少的参数。格式尽量简单，采用约定大于配置的原则，每一个维度占据一个固定的位置，用逗号分割。切忌设计一个大而全的模型，然后直接整个的序列化为一个 JSON 字符串。也不要被所谓的扩展性给诱惑，给使用方轻易开出一个能够自定义格式的口子，即便你能轻而易举的提供这种能力。根据我的经验，这种扩展性一定会被滥用，到最后连设计者也不知道实际的格式究竟是怎样的。当然这个需要设计者有较高的视野和远见，不过这不是难点，难的还是克制自己炫技的欲望。在内容上，尽量打印可以自解释的文本，做到见名知义。举个例子，我们要打印退款标，退款标原本是用 1, 2, 4, 8 这种二进制位存储的，打印的时候不要直接打印存储值，翻译成一个能描述它含义的英文 code。格式示例</p><pre><code>timeStamp|threadName logLevel loggerName|sourceAppName,flowId,traceId,sceneCode,identityCode,loginUserId,scpCode,rpcId,isYace,ip||businessCode,isSuccess||parameters||returnResult||</code></pre><p style="text-align:justify">内容示例</p><pre><code>2023-08-14 14:37:12.919|http-nio-7001-exec-10 INFO c.a.u.m.s.a.LogAspect|default,c04e4b7ccc2a421995308b3b33503dda,0bb6d59616183822328322237e84cc,queryOrderStatus,XIAODIAN,5000000000014,123456,0.1.1.8,null,255.255.255.255||queryOrderStatus,success||{"@type":"com.alibaba.common.model.queryorder.req.QueryOrderListReq","currentUserDTO":{"bizGroup":888,"shopIdList":[123456],"supplierIdList":[1234,100000000001,100000000002,100000000004]},"extendFields":{"@type":"java.util.HashMap"},"invokeInfoDTO":{"appName":"uop-portal","operatorId":"1110","operatorName":"account_ANXRKY8NfqFjXvQ"},"orderQueryDTO":{"extendFields":{"@type":"java.util.HashMap"},"logisTypeList":[0,1],"pageSize":20,"pageStart":1},"routeRuleParam":{"@type":"java.util.HashMap","bizGroup":199000},"rule":{"$ref":"$.routeRuleParam"}}||{"@type":"com.alibaba.common.model.ResultDTO","idempotent":false,"needRetry":false,"result":{"@type":"com.alibaba.common.model.queryorderstatus.QueryOrderStatusResp","extendFields":{"@type":"java.util.HashMap"}},"success":true}||</code></pre><span id="OSC_h3_8"></span><h3>堆栈倒打</h3><p style="text-align:justify">本文的重点来啦，这个设计就是开头提到的奇思妙想。堆栈倒打源于我在排查另一个系统问题过程中感受到的几个痛点，首先来看一个堆栈示例。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-b85e443818a5d8815964fbbb06a5e0ee_720w.webp" referrerpolicy="no-referrer"></p><p>这么长的堆栈，这密密麻麻的字母，即使是天天跟它打交道的开发，相信第一眼看上去也会头皮发麻。回想一下我们看堆栈，真正想得到的是什么信息。所以我感受到的痛点核心有两个。第一个是，SLS(阿里云日志产品系统) 上搜出来的日志，默认是折叠的。对于堆栈，我们应该都知道，传统异常堆栈的特征是，最顶层的异常，是最接近流量入口的异常，这种异常我们一般情况下不太关心。最底层的异常，才是引起系列错误的源头，我们日常排查问题的时候，往往最关心的是错误源头。所以对于堆栈日志，我们无法通过摘要一眼看出问题出在哪行代码，必须点开，拉到最下面，看最后一个堆栈才能确定源头。我写了一个错误示例来说明这个问题。常规的堆栈结构其实分两部分，我称之为，异常原因栈，和错误堆栈。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-8b99db6a76ead8d6f00bae77d13fc8a7_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">如上，一个堆栈包含有三组异常，每一个 RuntimeException 是一个异常，这三个异常连起来，我们称为一个<strong>异常原因栈</strong>。每一个 RuntimeException 内部的堆栈，我们称为<strong>错误堆栈</strong>。说明一下，这两个名词是我杜撰的，没有看到有人对二者做区分，我们一般都统称为堆栈。读者能理解我想表达的就行，不用太纠结名词。第二个痛点是，这种堆栈存储成本太高，有效信息承载率很低。老实说这一点可能大多数一线开发并没有太强烈的体感，但在这个降本增效的大环境下，我们每个人应该把这点作为自己的 OKR 去践行，变被动为主动，否则在机器成本和人力成本之间，公司只好做选择题了。现在目标很明确了，那我们就开始对症下药。核心思路有两个。针对堆栈折叠的问题，采用堆栈倒打。倒打之后，最底层的异常放在了最上面，甚至不用点开，瞟一眼就能知道原因。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/v2-89f7a5f4b16f386a7d1b94485177fcc1_r.jpg" referrerpolicy="no-referrer"></p><p style="text-align:justify">同时我们也支持异常原因栈层数配置化，以及错误堆栈的层数配置化。解这个问题，本质上就是这样一个简单的算法题：倒序打印堆栈的最后 N 个元素。核心代码如下。</p><pre><code>/**
 * 递归逆向打印堆栈及 cause(即从最底层的异常开始往上打)
 * @param t 原始异常
 * @param causeDepth 需要递归打印的 cause 的最大深度
 * @param counter 当前打印的 cause 的深度计数器 (这里必须用引用类型，如果用基本数据类型，你对计数器的修改只能对当前栈帧可见，但是这个计数器，又必须在所有栈帧中可见，所以只能用引用类型)
 * @param stackDepth 每一个异常栈的打印深度
 * @param sb 字符串构造器
 */
public static void recursiveReversePrintStackCause(Throwable t, int causeDepth, ForwardCounter counter, int stackDepth, StringBuilder sb){
    if(t == null){
        return;
    }
    if (t.getCause() != null){
        recursiveReversePrintStackCause(t.getCause(), causeDepth, counter, stackDepth, sb);
    }
    if(counter.i++ &lt; causeDepth){
        doPrintStack(t, stackDepth, sb);
    }
}</code></pre><p style="text-align:justify">要降低存储成本，同时也要确保信息不失真，我们考虑对堆栈行下手，把全限定类名简化为类名全打，包路径只打第一个字母，行号保留。如：c.a.u.m.s.LogAspect#log:88。核心代码如下。</p><pre><code>public static void doPrintStack(Throwable t, int stackDepth, StringBuilder sb){
    StackTraceElement[] stackTraceElements = t.getStackTrace();
    if(sb.lastIndexOf("\t") &gt; -1){
        sb.deleteCharAt(sb.length()-1);
        sb.append("Caused: ");
    }
    sb.append(t.getClass().getName()).append(": ").append(t.getMessage()).append("\n\t");
    for(int i=0; i &lt; stackDepth; ++i){
        if(i &gt;= stackTraceElements.length){
            break;
        }
        StackTraceElement element = stackTraceElements[i];
        sb.append(reduceClassName(element.getClassName()))
          .append("#")
          .append(element.getMethodName())
          .append(":")
          .append(element.getLineNumber())
          .append("\n\t");
    }
}</code></pre><p style="text-align:justify">最终的效果大概长这样。我们随机挑了一个堆栈做对比，统计字符数量，在同等信息量的情况下，压缩比达到 88%。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-eaa31591500cbc80c9a34ce9c88c6cae_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>思维拓展</h3><p style="text-align:justify">很多文章喜欢鼓吹所谓的最佳实践，在笔者看来最佳实践是个伪命题。当你在谈最佳实践的时候，你需要指明这个"最"是跟谁比出来的，你的适用范围是哪些，我相信没有任何一个人敢大言不惭自己的框架或方案是放之四海而皆准的。本文所提出的日志设计实践方案，是在一个典型的中台应用中落地的，三段的日志分层方案虽然足够简单，足够通用，但是最近解触了一些富客户端应用，这个方案要想迁移，可能就得做一些本土化的改造了。他们的特点是依赖的三方服务少，大量的采用缓存设计，这种设计的底层逻辑是，尽量使得所有逻辑能在本地客户端执行以降低分布式带来的风险和成本，这意味着，可能 99% 的日志都是内部执行逻辑打的，那我们就得考虑从另一些维度去做拆分。另外对于日志降本，本文探讨的也只是降堆栈的存储，一个系统不可能所有日志都是堆栈，所以实际整体的日志存储成本，可能降幅不会有这么多。谈这么多，归根结底还是一句话，不要迷信银弹，减肥药一类的东西，所有的技术也好，思想也好，都要量体裁衣，量力而行。</p><p style="text-align:justify">作者｜伏难</p><blockquote><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000373503%2F" target="_blank"><span style="color:#ff9900">点击立即免费试用云产品，开启云上实践之旅！</span></a></strong></blockquote><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fclick.aliyun.com%2Fm%2F1000380610%2F" target="_blank">原文链接</a></strong></p><p style="text-align:justify"><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10112501</guid>
            <link>https://my.oschina.net/yunqi/blog/10112501</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[禅道创始人王春生：关于开源软件的七大错误认知]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong>本文作者：</strong>王春生</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong>作者自我介绍：</strong>我是春哥，禅道软件公司的创始人，二十年的 IT 老兵，14 年的创业者。喜欢编码，喜欢做产品，所以我用了<span style="color:#ff2941">代码之歌</span>做我的公众号的名字。我会持续地更新关于企业管理、产品管理、项目管理、团队建设、创业、学习型组织、企业文化、开源软件等方面话题的实践和思考，欢迎大家和我讨论交流。</p></blockquote><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">开源软件已经像水和电一样融入到了我们日常的生活中，但我们对开源软件还有很多错误的认知。我尝试站在开源软件作者的角度来进行总结，总共有七大错误认知。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0px; margin-right:0px; text-align:justify"><span style="color:#2980b9"><strong>首先来看第一个错误认知：只要软件开源了，就会有人用。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">很多刚开始从事开源软件开发的作者，会有这样的想法。认为我只要把软件开源出来，就会有人来使用。但事实上一个软件有没有人用，首先看它有没有价值，而不是先看它是不是开源软件。<span style="color:#7a4442">开源软件首先是一个软件</span>，开源是其定语。所以从这个角度来讲，开源软件不会超越软件本身的属性限制，要先有用。在这个基础上，再进行开源，可以为用户带来增强的附加属性。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">这给我们的提示就是在做开源软件之前，要认真思考软件的定位：</p><ul><li><p style="margin-left:0; margin-right:0">这款软件要解决的问题是什么；</p></li><li><p style="margin-left:0; margin-right:0">它的目标用户是谁；</p></li><li><p style="margin-left:0; margin-right:0">和市面上其他软件相比有什么优势；</p></li><li><p style="margin-left:0; margin-right:0">如何进行宣传推广。</p></li></ul><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#2980b9"><strong>第二个错误认知：我又没收你钱，软件有漏洞、问题跟我没关系。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">开源软件许可协议通常会包含类似这样的条款，表明作者不对用户使用该软件所造成的任何问题负责。比如 GPL V3 的第 15 条款，就是这样的声明：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">15. Disclaimer of Warranty.</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM 「AS IS」 WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">中文版本：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">本程序在适用法律范围内不提供品质担保。除非另作书面声明，版权持有人及其他程序提供者「概」不提供任何显式或隐式的品质担保，品质担保所指包括而不仅限于有经济价值和适合特定用途的保证。全部风险，如程序的质量和性能问题，皆由你承担。若程序出现缺陷，你将承担所有必要的修复和更正服务的费用。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">这份协议还特意用了全大写的方式来声明。但是自 2017 年《中华人民共和国网络安全法》正式实施以来，这样的声明就不再有效了。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">《中华人民共和国网络安全法》第二十二条规定：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">网络产品、服务应当符合相关国家标准的强制性要求。网络产品、服务的提供者不得设置恶意程序；发现其网络产品、服务存在安全缺陷、漏洞等风险时，<strong><span style="color:#d92142">应当立即采取补救措施，按照规定及时告知用户并向有关主管部门报告。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#d92142">网络产品、服务的提供者应当为其产品、服务持续提供安全维护；在规定或者当事人约定的期限内，不得终止提供安全维护。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">网络产品、服务具有收集用户信息功能的，其提供者应当向用户明示并取得同意；涉及用户个人信息的，还应当遵守本法和有关法律、行政法规关于个人信息保护的规定。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">第六十条规定：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">违反本法第二十二条第一款、第二款和第四十八条第一款规定，有下列行为之一的，<strong><span style="color:#d92142">由有关主管部门责令改正，给予警告；拒不改正或者导致危害网络安全等后果的，处五万元以上五十万元以下罚款，对直接负责的主管人员处一万元以上十万元以下罚款：</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">（一）设置恶意程序的；</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">（二）<strong><span style="color:#d92142">对其产品、服务存在的安全缺陷、漏洞等风险未立即采取补救措施，或者未按照规定及时告知用户并向有关主管部门报告的；</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">（三）<strong><span style="color:#d92142">擅自终止为其产品、服务提供安全维护的。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">所以各位开源软件的开发者们，一定要认真理解这个法律的条款。我们已经收到过五次公安部下发到青岛市网警的漏洞整改通知。具体细节就不跟大家讲述了。这给到开源软件作者们两点警示：第一个就是一定要及时处理自己产品的相关漏洞，另外一点就是认真思考开源商业化方面。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#2980b9"><strong>第三个错误认知：我应当选择最宽松的开源软件协议。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">许可协议是开源软件的法律基础，它规定了用户可以如何使用、修改和分发软件。有些人错误地认为，选择最宽松的许可协议可以吸引更多的用户和贡献者。然而，许可协议的选择应该根据具体情况进行权衡，并考虑到软件作者的目标和需求。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">比较宽松的许可协议限制比较少，如 MIT 和 BSD 许可证。这些许可协议几乎没有限制，允许用户自由地使用、修改和分发软件。然而，这也意味着其他人可以将开源软件用于商业目的，甚至将其更改后的版本作为专有软件发布，而无需向原作者贡献任何代码或修改。对于一些开源软件作者来说，这可能不符合他们的意愿和目标。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">相比之下，像 GNU 通用公共许可证（GPL）这样的许可协议对代码的再分发和修改设置了更严格的限制。它要求任何使用或修改 GPL 许可的软件的派生作品必须以相同的许可证开放源代码。这样可以保护开源软件的自由性和共享精神，防止将其私有化。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">因此，在选择许可协议时，开源软件作者应该考虑到他们的目标、期望用户和社区的需求，并选择合适的许可协议来平衡开放性和保护性的要求。</p><p><span style="color:#2980b9"><strong>第四个错误的认知：我应当努力地将软件捐献给基金会。</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>最近这几年，有不少国产的开源项目陆续从 Apache 软件基金会毕业，成为 Apache 软件基金会旗下的项目。姜宁老师也两度当选 Apache 软件基金会董事。还有一些项目是加入了 CNCF 云原生计算基金会。包括中国也成立了开放原子基金会，大厂也都有一些项目捐赠给了开放原子基金会。这对中国的开源软件作者也是一个鼓舞，很多开源软件作者也都在思考自己的软件是否也可以加入这些基金会呢？我尝试来阐述下自己的观点：</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#ab1942">首先这是好事情。说明了中国的开源软件生态越来越成熟</span><span>，也涌现了一批高质量的开源项目，在国际上也能够产生我们的影响力，一定程度上也改变了中国只是开源软件消费大国、对开源社区回馈较少的尴尬局面。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>但是不是我们要努力地将项目捐赠给基金会，以谋求项目的健康发展呢？对此我会有完全不同的观点。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#ab1942">第一，基金会并不是你想加入就能加入</span><span>。无论是 Apache 软件基金会，还是 CNCF 云原生计算基金会，对项目的方向、成熟度、投入都有比较高的要求。所以目前能够加入这些基金会的项目大部分都是大厂背景的开发团队开发的。开放原子基金会目前的项目基本上都是会员单位捐赠的，网站上貌似也没有公开加入开放原子基金会的具体章程。所以，对于我们这些个人或者小团队的开源软件开发者来讲</span><span>，</span><span style="color:#ab1942">这条路就不要想了，门槛太高</span><span>。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#ab1942">第二，如果你的项目真的很不错，都达到了加入基金会的标准，我也建议你认真思考一下加入基金会的诉求是什么</span><span>。对于大厂来讲，将项目捐赠给这些基金会，可以提升自己的品牌，吸引优秀的开发者加入，建立行业标准，这些都是可以通过基金会来达成的。</span><span style="color:#ab1942">但如果你有明确的开源商业化方面的诉求，我建议还是要慎重</span><span>，因为将项目捐赠给基金会，</span><span style="color:#ab1942">需要将代码的所有权和商标都要捐赠给基金会</span><span>。换句话讲，这个项目就属于基金会了，你只是这个项目的主要贡献者。无论从哪些方面来讲，你都阻止不了其他团队可以利用已经不属于你的项目去做商业化的操作。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>这一块我要展开来说一下。整个自由软件和开源软件运动的基础，还是 Copyright。正是有了 Copyright，才有了 Copyleft。开源软件这种游戏规则之所以能够运转起来，底层还是法律。</span><span style="color:#ab1942">只要是你创作的东西，你天然拥有对它的著作权</span><span>（著作权不需要额外申请，都受法律保护。通过著作权登记、时间戳存证等手段可以更好地保护自己，后续再讲）。之前的软件售卖都是有源码的，后来比尔盖茨说我们只能给你二进制文件，从而开启了微软帝国时代，所以才有了黑客们对商业软件的反击。</span><span style="color:#ab1942">开源软件区别于商业软件，就是向软件的用户让渡了更多的权力：你可以对代码进行修改、进行二次分发</span><span>。那开源软件作者为什么可以这么授权呢？因为代码的版权是我的，所以我想怎么样就怎么样。这是底层的游戏逻辑。当然开源软件还有一个基本游戏规则，就是我不对你使用软件造成的任何问题负责，因为开源软件和用户之间并没有形成商业合同上的契约关系。（但是随着《中华人民共和国网络安全法》的实施，后面的这个游戏规则不成立了，所以我们必须要对开源软件的玩法做修改，参考我的前一篇文章《关于开源软件的七大错误认知（上）》。）</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以从这个角度来讲，你将开源软件捐赠给国外的基金会，这个代码的 Copyright 和商标从法律上就归人家基金会了。如果我们上升到国家的角度来看这个问题，我们把我们优秀的开源软件都捐献给国外的基金会，</span><span style="color:#ab1942">这会不会对国家的知识产权和国家安全造成威胁呢？</span><span>2021 年闹得沸沸扬扬的 Log4j2 组件的安全漏洞，可窥一斑。阿里云的工程师在发现了这个漏洞之后，第一反应不是向中国工信部通报相关信息，而是先向美国的 Apache 软件基金会披露了该漏洞。工信部得知这个漏洞之后，时间已经过去了 15 天。15 天会发生什么呢？尤其是在现在的这种国际政治背景下面。</span><span style="color:#ab1942">这个问题往小的方面讲，是国家安全意识不够，往大里面讲，是屁股坐得正不正的问题。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>有童鞋估计会问，我们不是还有国内的基金会吗？前面也讲了，现在门槛太高，不是我们想加入就加入。另外开放原子基金会有非常强的政府背景，在运作上会有比较强的监管，在各种政策措施出台上</span><span style="color:#ab1942">会比较慎重（</span><span style="color:#ab1942">慢）</span><span>。所以在国内的开源相关的基金会成熟之前，我们需要通过社区的方式来推进开源生态的发展，所以这是渠成开源社区成立的初衷（突如其来的广告）。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#2980b9">第五个错误认知：开源之后会有很多人来帮我完善项目。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>很多开源软件作者开源，是希望有更多的人参与到项目中，这样项目的问题能够得到及时地发现和处理，项目也可以持续地发展。但实际的情况是什么样的呢？InfoQ 联合 X-lab 开放实验室发布的「GitHub 2019 数字年报」，通过对 2019 年 GitHub 上 5.46 亿条日志进行分析，得出了世界范围内开源软件项目的一些汇总数据。这其中有这样的信息值得我们思考：</span></p><ol><li><p style="margin-left:0; margin-right:0"><span>&nbsp;2019 年总活跃项目数为 512 万，但活跃度超过 1000 的项目只有 1399 个，不到万分之三。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>在这 512 万个项目中，只有 333 个项目有 1000 位开发者参与，而 2019 年 Github 上活跃的开发者数量是 360 万。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>2019 年活跃度排行前 10 的项目中，有 60% 来自大厂，其中有 2 个来自微软，分别是 vscode 和 azure-doc。3 个来自 Google，分别是 Flutter、Tensorflow、Kubernetes。还有一个是来自红帽的 Ansible。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>2019 年活跃度前列的项目中，大厂维护的项目现在仍然非常活跃，而排名第 10 的 tweakCompatible，已经停止维护了。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>2019 年中国 Top20 的项目中，主要都是大厂维护的项目。</span></p></li><li><p style="margin-left:0; margin-right:0"><span>Vue 项目 2019 年大部分的贡献是由一个账号 Evan You，也就是尤雨溪尤大贡献的。</span></p></li></ol><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>2022 年 1 月份，cURL 的作者发表了一篇文章，吐槽世界 500 强企业白嫖技术支持的乌龙事件。具体新闻可以看开源中国的网址：</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>https://www.oschina.net/news/180252/fortune-500-log4j-curl。类似的事情太多了，就不一一列举了。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以，结论是，开源项目的维护主要还是要靠自己。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#2980b9">第六个错误认知：我开源不是为了钱。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>这个话题估计会有很多开源软件的作者会不赞同。就像 Linus 做 Linux 项目，just for fun。</span><span>很多开源软件</span><span>作者比较纯粹，把软件开源出来就是希望能够对用户有用，并没有商业化的目的。但我把这个话题换一种表达方式，估计大家都会赞同。也许大家刚开始开源的时候，确实没有想着赚钱。但随着事情的变化，大家就会考虑，我能不能通过开源项目赚钱呢？</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>刚开始开源的时候，开源软件的作者更多的是兴奋，以及软件得到用户认可所带来的成就感。但随着用户的增多，来自用户的问题就会越来越多。有的是希望你帮我解决一些使用安装的问题，有的是希望你帮他做一些功能。随着这些问题的增多，你做开源这件事情的性质就会逐渐发生变化。从最开始的分享为主，逐渐变成维护为主。开源项目给到你的乐趣会逐渐减少，责任和义务就会逐渐增多。自己的投入会越来越多，心里的不平衡感就会越来越强。这时候大家就会考虑，我是不是可以通过开源项目来赚点钱呢？</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以这是水到渠成的想法，也是非常合情合理的想法。能够通过开源项目获得一定的收益，然后支持自己在开源项目做更多的投入，这是一件非常好的事情。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong><span style="color:#2980b9">再来看最后一个错误认知：开源软件靠服务和捐助可以赚钱。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>网上有很多的资料，在讲到开源软件的商业模式时候，都会谈到软件免费，服务收费。这个模式按道理是能够讲得通的。毕竟软件我都给你了，你要是有问题，我通过服务来收点费用，不是很合理吗？但这里面有一个悖论，我来给大家分析一下。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>先来界定下这个服务的范围。我所理解的软件免费，服务收费的服务，是指保证软件正常运行使用过程中所产生的支持类的服务。二次开发类的服务和咨询培训类的服务，超脱了这个服务的范围。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>如果我们尝试通过支持服务来收费，那么什么情况下用户需要支持服务呢？肯定是软件有问题用户才会需要服务，对吧。如果我们希望通过服务来赚比较多的钱，肯定是希望用户提出越多的问题越好。那如果一个软件问题比较多，那就说明软件复杂度或者质量有问题。那这样用户就比较少。用户少，那怎么通过服务来收费呢？所以这里面就存在了这样一个悖论。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>什么样的软件可以通过支持服务收费呢？这个软件对企业非常关键，他们需要一个商业主体来为这个软件的正常运行负责，这样的软件通过服务收费才能行得通。什么样的软件符合这样的标准呢，基础软件。所以红帽卖自己的订阅制服务是行得通的。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>我们禅道团队在开发项目管理软件之初，就放弃了通过支持服务收费的想法。我们给禅道开源免费版的用户都会提供近乎于实时的技术支持。我们的目的很简单，吸引更多的用户使用禅道</span><span style="color:#ab1942"><span>。</span>一个社区的陌生小伙伴，只有成为你软件的用户，才有可能成为你的客户</span><span>。为了吸引更多的社区小伙伴成为禅道的用户，我们不遗余力的完善产品、提供各种技术支持。然后通过我们的收费的版本来实现商业化。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>很多开源软件作者也都放出了自己的捐助账号，但实际的情况如何呢？我们在网上也看到过很多的新闻，很多知名的开源项目，一年收到的捐助少得可怜，可能连主要维护人员的正常生活都保证不了，这还是在欧美。比如 Core-js 项目每周下载量达数千万次，累积下载量已经超过 90 亿次，但作者 Denis 并没有从这个项目中获得更多的回报，甚至因为全职维护 Core-js 而穷困潦倒。他想了各种办法来筹集资金以便维护开源项目，结果每个月也只能获得几十美元的赞助。估计会有小伙伴会提 Vue 尤大的例子，但这个只能是个例，而且很多对 Vue 的捐赠是有品牌推广的性质在里面，和我们通常说的打赏类的捐赠还是不太一样。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>我们最开始几年也有开放捐赠的通道，也陆续收到一些捐助，不过相比较于我们的研发投入来讲，只能说是杯水车薪。因为我们跑通了商业化这条路，我们把我们所收到的捐助又全部捐了出去。后来我们就关闭了捐赠的通道，是因为有的人因为捐赠之后，希望我们能够给他做一些额外的事情，这已经超出了捐赠这件事情本身的含义。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>所以大家就不要幻想通过技术支持和捐助来实现健康的收入了。需要认真考虑开源软件的商业化之路。这是关于开源软件的七大错误认知系列的最后一篇文章。欢迎大家来讨论。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/oscpyaqxylk/blog/10114031</guid>
            <link>https://my.oschina.net/oscpyaqxylk/blog/10114031</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gmail 将停止支持基本 HTML 视图]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>根据 Google 支持文档的更新内容，<strong>Gmail 将从明年 1 月起停止支持基本 HTML 视图</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0cdd4e28b49bf3c37718b40baee96da1d75.png" referrerpolicy="no-referrer"></p><p>▲ Gmai&nbsp;基本 HTML 视图界面</p><p>目前网页版 Gmail 提供两个界面：基本 HTML 视图和标准视图。停止支持基本 HTML 视图后，当前打开经典模式的基本 HTML 视图模式 URL 将自动重定向到标准视图界面。Google 解释称，如果浏览器受支持，Gmail 将自动在标准视图中打开。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0925/104240_D3E0_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>基本 HTML 视图旨在解决 Gmail 无法加载或加载太慢的问题，比如浏览器不被支持或网速太慢，它只包含 Gmail 基本功能，没有新版本 Gmail 加入的与邮件无关的功能，例如：</p><ul><li>聊天</li><li>拼写检查工具</li><li>键盘快捷键</li><li>添加或导入联系人</li><li>自定义发件人地址</li><li>富文本格式</li></ul><p>在 Gmail 停止支持基本 HTML 视图后，如果用户遇到加载问题，Google 建议使用 Gmail 应用或邮件客户端。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 02:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259383</guid>
            <link>https://www.oschina.net/news/259383</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源项目 WEMQ 加入 Dromara 社区，物联网设备调试系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="300" src="https://img.nicholasld.cn/i/2023/09/22/650d382ad4e66.png" width="300" referrerpolicy="no-referrer"></p><h2>项目背景</h2><p>随着物联网技术的迅猛发展，越来越多的物联网设备被应用于各个行业和领域。物联网设备的调试和管理是确保设备正常运行和提供稳定服务的关键环节。然而，传统的物联网设备调试方案往往存在一些问题，如复杂的配置流程、安全性不足、功能不完善等。</p><p>为了解决这些问题，<strong>WeMQ</strong>应运而生。WeMQ 是一款面向物联网设备运营商的开源物联网设备调试系统，旨在提供完整的物联网设备调试方案，并集成了设备管理、MQTT 服务器管理、客户管理等功能。该系统采用自研的 Nmqs 通信层组件，实现了连接信息的加密，保证了数据的安全性。</p><p>WeMQ 的项目背景源于对物联网设备调试过程中存在问题的深入研究和理解。通过提供开源的解决方案，WeMQ 希望为物联网设备运营商提供一个高性能、安全可靠、功能强大的调试和管理平台，帮助他们简化设备调试流程、提高调试效率，并保证设备的稳定运行。</p><p><strong>项目的主要特性：</strong></p><ol><li>提供一套完整的物联网设备调试方案，包括设备管理、MQTT 服务器管理、客户管理等功能，帮助设备运营商简化调试流程。</li><li>自研 Nmqs 通信层组件，实现连接信息的加密，确保数据传输的安全性。</li><li>提供高性能、稳定可靠的服务，满足大规模物联网设备的调试和管理需求。</li><li>开源项目，吸引更多的开发者参与贡献，推动物联网设备调试领域的发展。</li></ol><p>通过 WeMQ，物联网设备运营商可以更轻松地进行设备调试和管理，提高工作效率，降低运营成本，并为最终用户提供更好的物联网设备体验。</p><p><img alt="GitHub" src="https://img.shields.io/github/license/NicholasLD/WeMQ" referrerpolicy="no-referrer"><a href="https://gitee.com/nicholasld/WeMQ/stargazers"><img alt="star" src="https://gitee.com/nicholasld/WeMQ/badge/star.svg?theme=dark" referrerpolicy="no-referrer"></a><a href="https://gitee.com/nicholasld/WeMQ/members"><img alt="fork" src="https://gitee.com/nicholasld/WeMQ/badge/fork.svg?theme=dark" referrerpolicy="no-referrer"></a></p><h2>技术选型</h2><h4>1. 系统环境</h4><ul><li>Java 8</li><li>Servlet 3.0</li><li>Apache Maven 3</li></ul><h4>2. 主框架</h4><ul><li>Spring Boot 2.7.x</li><li>Spring Framework 5.3.x</li><li>Spring MVC 5.3.x</li></ul><h4>3. 持久层</h4><ul><li>Mybatis 3.5.x</li><li>Alibaba Druid 1.2.x</li><li>Hibernate Validation 6.0.x</li><li>Java MySQL Connector 8.0.x</li></ul><h4>4. 视图层</h4><ul><li>Thymeleaf 3.x</li><li>Bootstrap 5.x</li><li>Layui 2.x</li></ul><h4>5. 工具类</h4><ul><li>Apache Commons</li><li>Hutool 5.x</li></ul><h4>6. 通信层</h4><ul><li>Nmqs 实现连接信息加密、消息转发，支持 WS/TCP 协议连接</li><li>Eclipse Paho</li></ul><h2>项目结构</h2><pre><code>cn.mmanager
├── mm-common            // 工具类
│       └── annotation                    // 自定义注解
│       └── constant                      // 通用常量
│       └── core                          // 核心控制
│       └── enums                         // 通用枚举
│       └── exception                     // 通用异常
├── mm-framework         // 框架核心
│       └── aspectj                       // 注解实现
│       └── interceptor                   // 拦截器
│       └── manager                       // 异步处理
│       └── web                           // 前端控制
├── mm-web            // Web 服务
├── mm-dao           // 数据访问层
├── mm-service     // 业务层
├── mm-model       // 模型
</code></pre><h2>通信层</h2><pre><code>  _   _ __  __  ____   _____ 
 | \\ | |  \\/  |/ __ \\ / ____|
 |  \\| | \\  / | |  | | (___  
 | . ` | |\\/| | |  | |\\___ \\ 
 | |\\  | |  | | |__| |____) |
 |_| \\_|_|  |_|\\___\\_\\_____/ 
</code></pre><p>通信层组件在物联网设备调试系统中扮演着重要的角色，它负责设备与服务器之间的通信和数据传输。在 WeMQ 中，采用了自研的 Nmqs 通信层组件，它实现了连接信息的加密，确保数据传输的安全性。</p><p><strong>Nmqs 通信层组件具有以下特点和功能：</strong></p><ol><li>**连接信息加密：**Nmqs 采用先进的加密算法，对设备与服务器之间的连接信息进行加密处理。这样可以确保通信过程中的数据安全，防止信息被窃取或篡改。</li><li>**安全认证：**Nmqs 提供了安全认证机制，确保只有经过授权的设备和服务器才能建立连接。通过身份验证和密钥交换等方式，确保通信双方的身份合法性和通信的安全性。</li><li>**数据压缩和优化：**Nmqs 支持数据压缩和优化技术，可以在传输过程中对数据进行压缩，减少数据传输的带宽占用和传输延迟，提高通信效率。</li><li>**可靠性保证：**Nmqs 具备可靠性保证机制，能够处理通信过程中的数据丢失、重传和错误处理。它采用可靠的传输协议，确保数据的完整性和可靠性。</li><li>**适应性和灵活性：**Nmqs 通信层组件具有良好的适应性和灵活性，可以适应不同的网络环境和设备类型。它支持多种通信协议和网络传输方式，能够适应不同的物联网设备调试场景。</li></ol><p>通过自研的 Nmqs 通信层组件，WeMQ 能够提供安全可靠的设备与服务器之间的通信服务。它保护设备数据的安全性，确保通信过程的可靠性和稳定性，为物联网设备调试和管理提供了强大的基础支持。</p><h2>开源地址</h2><p>Gitee：<a href="https://gitee.com/dromara/WeMQ">https://gitee.com/dromara/WeMQ</a></p><p>Github：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdromara%2FWeMQ" target="_blank">https://github.com/dromara/WeMQ</a></p><h2>Issues &amp; Pull Requests</h2><p>欢迎提交 Issues 和 Pull Requests，开源大门永远向所有人敞开。</p><h2>作者介绍</h2><ul><li>名称：NicholasLD</li><li>全栈开发工程师，物联网爱好者</li><li>Dromara 开源组织成员，dromara/WeMQ 作者</li></ul><p><strong>联系方式：</strong></p><ul><li>Email: <a href="https://www.oschina.net/action/GoToLink?url=mailto%3A878639947%40qq.com" target="_blank">878639947@qq.com</a></li><li>WeChat: NicholasLD505</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 00:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259364</guid>
            <link>https://www.oschina.net/news/259364</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[罚款 200 元，没收 100 多万]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>微博博主称自己「翻墙访问国际互联网打工被处罚百万」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0924/173843_dYKe_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c8e2f2b485bcdbe4cc8452865dcd67e9f1.png" referrerpolicy="no-referrer"></p><p><em>来源：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcard.weibo.com%2Farticle%2Fm%2Fshow%2Fid%2F2309404949447133233199" target="_blank">https://card.weibo.com/article/m/show/id/2309404949447133233199</a></u></em></p></blockquote><p>根据这名博主提供的资料，在 2019 年 9 月份至 2022 年 11 月期间，他在家中<strong>擅自使用非法信道进行国际联网</strong>，为境外公司提供网络顾问服务，<strong>违法所得共计人民币 1058000 余元</strong>。</p><p>根据《中华人民共和国计算机信息网络国际联网管理暂行规定》第六条和第十四条、《中华人民共和国计算机信息网络国际联网管理暂行规定实施办法》第七条和第二十二条第一款之规定，这名博主受到了行政处罚，并处罚款贰佰元整，没收违法所得一百零五万八千元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4c9d4c52a10a1b05cf39730b000daa514e2.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-326b36667644a24fce944857b5a461dd043.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259325</guid>
            <link>https://www.oschina.net/news/259325</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 致社区公开信，调整 runtime fee 政策]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>面对此前制定的<a href="https://www.oschina.net/news/257929/unity-runtime-fee" target="_blank">"Funtime Fee"收费政策</a>所引发的用户争议与不满，<span style="color:#333333">Unity Create 负责人 Marc Whitten 正式发布了一封致社区的道歉<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">公开信</a>，并详细解释了其定价策略的变更。</span></p><blockquote><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>我想以此开始：对不起。&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>在宣布新的 Runtime Fee 政策之前，我们本应与大家进行更多的沟通，我们本应采纳更多的反馈意见。我们制定此政策的目标是确保我们能够在今天和明天继续为您提供支持，并继续深入投资我们的游戏引擎。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你们让 Unity 变得伟大，我们知道我们需要倾听并努力赢得您的信任。我们已经听到了您的担忧，并且正在对我们宣布的政策进行更改以解决这些问题。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p></blockquote><p style="margin-left:0; margin-right:0; text-align:start"><img alt="" height="167" src="https://oscimg.oschina.net/oscnet/up-03756292fbd61192f7edc3f71fc2060de26.jpg" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">根据修订后的条款，<strong>Unity Personal </strong></span><strong>plan&nbsp;</strong><span style="color:#000000"><strong>将保持免费，</strong>并且基于 Unity Personal&nbsp;构建的游戏将不收取 Runtime Fee；同时个人版的适用范围也从每年收入 10 万美元以下提高到 20 万美元，并取消了使用 Made with Unity 启动画面的要求。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">对于企业版和专业版用户，过去 12 个月收入达到或超过 100 万美元，仍需缴纳该费用。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">使用当前版本的 Unity 开发的任何游戏都无需支付 Runtime Fee，Runtime Fee 政策将仅适用于 2024 年采用最新版本的开发者。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">而对于需要缴纳 Runtime Fee 的游戏，则可以选择按&nbsp;<strong>2.5% 的收入分成</strong>，或者根据每月参与游戏的新用户数量计算付费，具体可以较低者为准。</span></p><p style="margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.unity.com%2Fnews%2Fopen-letter-on-runtime-fee" target="_blank">查看官方公告</a>。</span></p><p style="margin-left:0px; margin-right:0px; text-align:start"><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/258513/unity-apologize-for-runtime-fee" target="_blank">Unity 道歉：将修改 "runtime fee" 收费政策</a></li><li><a href="https://www.oschina.net/news/257929/unity-runtime-fee">Unity 引擎明年起根据游戏安装量收费 (runtime fee)</a></li><li><a href="https://www.oschina.net/news/258280/unity-closes-offices-following-death-threats">游戏引擎开发商 Unity 收到死亡威胁</a></li><li><a href="https://www.oschina.net/news/258477/wait-is-unity-allowed-to-just-change-its-fee-structure-like-that">走近 「收费门」：互相矛盾的服务条款导致 Unity 面临被起诉的风险</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259300/open-letter-on-runtime-fee</guid>
            <link>https://www.oschina.net/news/259300/open-letter-on-runtime-fee</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[LightDiffusionFlow —— SD 工作流保存插件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#333333">LightDiffusionFlow 是一个基于 AI 绘画开源平台 StableDiffusion webUI（简称 SD）的开源插件，它可以帮助你一键保存所有工作流数据，下次使用只需拖入 Flow 文件，就能快速复现整个工作流，就像使用 Photoshop 的 PSD 样机文件那样方便。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-761ae50dada20a421f4f5a91e5852c6d720.png" width="500" referrerpolicy="no-referrer"></p><p><strong>功能</strong></p><ul><li>使用单个文件导出/导入网页用户界面参数（图像、输入、滑块、复选框等）。</li><li>支持解析图片中的 png 信息，并将参数还原回网络用户界面。</li></ul><p><strong>支持的扩展：</strong></p><ul><li>理论上，它可以支持任何插件。(某些插件图片除外，因为它们需要提供相应的 elem_id）。</li></ul></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/lightdiffusionflow</guid>
            <link>https://www.oschina.net/p/lightdiffusionflow</link>
        </item>
        <item>
            <title>
                <![CDATA[清华系创企推出千亿参数生物医药大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">清华系创企水木分子<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fl5iE9NCA2v0fC_wg3S5DTw" target="_blank">宣布</a>发布新一代对话式药物研发助手 ChatDD (Drug Design) 和全球首个千亿参数多模态生物医药对话大模型 ChatDD-FM 100B。水木分子成立于今年 6 月，由清华大学智能产业研究院（AIR）孵化，专注于生物医药垂直行业大模型的研发与应用。</span></p><p><img height="235" src="https://oscimg.oschina.net/oscnet/up-9aa47749420f10ded3e2467c43ac413545b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">根据介绍，水木分子提出的 ChatDD，基于大模型能力，能够对多模态数据进行融合理解，与专家自然交互人机协作，将人类专家知识与大模型知识联结，重新定义药物研发模式。</span></p><p><span style="color:#000000">ChatDD 基于水木分子千亿参数多模态生物医药对话大模型底座 ChatDD-FM，具备专业知识力、认知探索力和工具调用能力。作为生物医药研发助手 Copilot 可以服务医药研发全流程场景，从立项调研，早期药物发现，临床前研究到临床试验、药物重定位等各环节。</span></p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-7cbd38053ca323a3d0d0aeed787e187b3c2.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">在具体应用场景方面，发布会上展示了 ChatDD-BI 立项场景、ChatDD-Discovery 研发探索场景和 ChatDD-Trail 临床试验场景应用。</span></p><p><span style="color:#000000">ChatDD 的底座为千亿参数多模态生物医药对话大模型 ChatDD-FM 100B，在通用语言模型基础上经过：生物医药专业知识增强、生物医药多模态对齐、专业领域指令微调和 RLHF 三层淬炼。ChatDD-FM 100B 在 C-Eval 评测榜单中达到综合成绩 Top10，全部医学专项 4 项评测排名第一，是唯一在该 4 项评测中平均分超过 90 分（93.1 分）的模型。</span></p><p><img height="277" src="https://oscimg.oschina.net/oscnet/up-72ba7b6e5f51510eaafae5386eb6a5902ea.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 23 Sep 2023 03:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259292</guid>
            <link>https://www.oschina.net/news/259292</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 高性能任务调度引擎 Volcano]]>
            </title>
            <description>
                <![CDATA[<a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F"><img src="https://raw.githubusercontent.com/volcano-sh/volcano/master/docs/images/volcano-horizontal-color.png" referrerpolicy="no-referrer"></a><hr><p><a href="https://gitee.com/link?target=https%3A%2F%2Ftravis-ci.org%2Fvolcano-sh%2Fvolcano"><img src="https://travis-ci.org/volcano-sh/volcano.svg?branch=master" alt="Build Status" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgoreportcard.com%2Freport%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://goreportcard.com/badge/github.com/volcano-sh/volcano" alt="Go Report Card" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano"><img src="https://img.shields.io/github/repo-size/volcano-sh/volcano.svg" alt="RepoSize" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Freleases"><img src="https://img.shields.io/github/release/volcano-sh/volcano.svg" alt="Release" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fblob%2Fmaster%2FLICENSE"><img src="https://img.shields.io/github/license/volcano-sh/volcano.svg" alt="LICENSE" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fbestpractices.coreinfrastructure.org%2Fprojects%2F3012"><img src="https://bestpractices.coreinfrastructure.org/projects/3012/badge" alt="CII Best Practices" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano.sh%2F">Volcano</a> is a batch system built on Kubernetes. It provides a suite of mechanisms that are commonly required by
many classes of batch &amp; elastic workload including: machine learning/deep learning, bioinformatics/genomics and
other "big data" applications. These types of applications typically run on generalized domain frameworks like
TensorFlow, Spark, Ray, PyTorch, MPI, etc, which Volcano integrates with.</p><p>Volcano builds upon a decade and a half of experience running a wide
variety of high performance workloads at scale using several systems
and platforms, combined with best-of-breed ideas and practices from
the open source community.</p><p>Until June 2021, Volcano has been widely used around the world at a variety of industries such as Internet/Cloud/Finance/
Manufacturing/Medical. More than 20 companies or institutions are not only end users but also active contributors. Hundreds
of contributors are taking active part in the code commit/PR review/issue discussion/docs update and design provision. We
are looking forward to your participation.</p><p><strong>NOTE</strong>: the scheduler is built based on <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubernetes-sigs%2Fkube-batch">kube-batch</a>;
refer to <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fissues%2F241">#241</a> and <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Fpull%2F288">#288</a> for more detail.</p><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/cncf-logo.png" alt="cncf_logo" referrerpolicy="no-referrer"></p><p>Volcano is an incubating project of the <a href="https://gitee.com/link?target=https%3A%2F%2Fcncf.io%2F">Cloud Native Computing Foundation</a> (CNCF). Please consider joining the CNCF if you are an organization that wants to take an active role in supporting the growth and evolution of the cloud native ecosystem.</p><h2><a id="user-content-overall-architecture" class="anchor" href="https://gitee.com/kchstack/volcano#overall-architecture"></a>Overall Architecture</h2><p><img src="https://gitee.com/kchstack/volcano/raw/master/docs/images/volcano-architecture.png" alt="volcano" referrerpolicy="no-referrer"></p><h2><a id="user-content-talks" class="anchor" href="https://gitee.com/kchstack/volcano#talks"></a>Talks</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Farchsummit.infoq.cn%2F2019%2Fshenzhen%2Fpresentation%2F1817">Volcano 在 Kubernetes 中运行高性能作业实践 @ ArchSummit 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fagenda.events.huawei.com%2F2019%2Fcn%2Fminisite%2Fagenda.html%23dayTab%3Dday7%26tagName%3D%257B%2522language%2522%253A%2522Cn%2522%257D%26seminarId%3D1743">Volcano：基于云原生的高密计算解决方案 @ Huawei Connection 2019</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUaZi">Improving Performance of Deep Learning Workloads With Volcano @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FUajv">Batch Capability of Kubernetes Intro @ KubeCon 2019 NA</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fsched.co%2FMPi7">Intro: Kubernetes Batch Scheduling @ KubeCon 2019 EU</a></li></ul><h2><a id="user-content-ecosystem" class="anchor" href="https://gitee.com/kchstack/volcano#ecosystem"></a>Ecosystem</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGoogleCloudPlatform%2Fspark-on-k8s-operator%2Fblob%2Fmaster%2Fdocs%2Fvolcano-integration.md">spark-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.kubeflow.org%2Fdocs%2Fuse-cases%2Fjob-scheduling%2F">kubeflow/tf-operator</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkubeflow%2Farena%2Fblob%2Fmaster%2Fdocs%2Ftraining%2Fvolcanojob%2Fvolcanojob.md">kubeflow/arena</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fmpi">Horovod/MPI</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvolcano-sh%2Fvolcano%2Ftree%2Fmaster%2Fexample%2Fintegrations%2Fpaddlepaddle">paddlepaddle</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbroadinstitute%2Fcromwell%2Fblob%2Fdevelop%2Fdocs%2Fbackends%2FVolcano.md">cromwell</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fray-project.github.io%2Fkuberay%2Fguidance%2Fvolcano-integration">KubeRay</a></li></ul><h2><a id="user-content-quick-start-guide" class="anchor" href="https://gitee.com/kchstack/volcano#quick-start-guide"></a>Quick Start Guide</h2><h3><a id="user-content-prerequisites" class="anchor" href="https://gitee.com/kchstack/volcano#prerequisites"></a>Prerequisites</h3><ul><li>Kubernetes 1.12+ with CRD support</li></ul><p>You can try Volcano by one of the following two ways.</p><p>Note:</p><ul><li>For Kubernetes v1.17+ use CRDs under config/crd/bases (recommended)</li><li>For Kubernetes versions &lt; v1.16 use CRDs under config/crd/v1beta1 (deprecated)</li></ul><h3><a id="user-content-install-with-yaml-files" class="anchor" href="https://gitee.com/kchstack/volcano#install-with-yaml-files"></a>Install with YAML files</h3><p>Install Volcano on an existing Kubernetes cluster. This way is both available for x86_64 and arm64 architecture.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">kubectl apply -f https://raw.githubusercontent.com/volcano-sh/volcano/master/installer/volcano-development.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>Enjoy! Volcano will create the following resources in <code>volcano-system</code> namespace.</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">NAME                                       READY   STATUS      RESTARTS   AGE</span><span id="LC2" class="line">pod/volcano-admission-5bd5756f79-dnr4l     1/1     Running     0          96s</span><span id="LC3" class="line">pod/volcano-admission-init-4hjpx           0/1     Completed   0          96s</span><span id="LC4" class="line">pod/volcano-controllers-687948d9c8-nw4b4   1/1     Running     0          96s</span><span id="LC5" class="line">pod/volcano-scheduler-94998fc64-4z8kh      1/1     Running     0          96s</span><span id="LC6" class="line"></span><span id="LC7" class="line">NAME                                TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)   AGE</span><span id="LC8" class="line">service/volcano-admission-service   ClusterIP   10.98.152.108   &lt;none&gt;        443/TCP   96s</span><span id="LC9" class="line"></span><span id="LC10" class="line">NAME                                  READY   UP-TO-DATE   AVAILABLE   AGE</span><span id="LC11" class="line">deployment.apps/volcano-admission     1/1     1            1           96s</span><span id="LC12" class="line">deployment.apps/volcano-controllers   1/1     1            1           96s</span><span id="LC13" class="line">deployment.apps/volcano-scheduler     1/1     1            1           96s</span><span id="LC14" class="line"></span><span id="LC15" class="line">NAME                                             DESIRED   CURRENT   READY   AGE</span><span id="LC16" class="line">replicaset.apps/volcano-admission-5bd5756f79     1         1         1       96s</span><span id="LC17" class="line">replicaset.apps/volcano-controllers-687948d9c8   1         1         1       96s</span><span id="LC18" class="line">replicaset.apps/volcano-scheduler-94998fc64      1         1         1       96s</span><span id="LC19" class="line"></span><span id="LC20" class="line">NAME                               COMPLETIONS   DURATION   AGE</span><span id="LC21" class="line">job.batch/volcano-admission-init   1/1           48s        96s</span><span id="LC22" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-install-from-code" class="anchor" href="https://gitee.com/kchstack/volcano#install-from-code"></a>Install from code</h3><p>If you don't have a kubernetes cluster, try one-click install from code base:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">./hack/local-up-volcano.sh</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>This way is only available for x86_64 temporarily.</p><h3><a id="user-content-install-monitoring-system" class="anchor" href="https://gitee.com/kchstack/volcano#install-monitoring-system"></a>Install monitoring system</h3><p>If you want to get prometheus and grafana volcano dashboard after volcano installed, try following commands:</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">make <span class="nv">TAG</span><span class="o">=</span>latest generate-yaml</span><span id="LC2" class="line">kubectl create <span class="nt">-f</span> _output/release/volcano-monitoring-latest.yaml</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-kubernetes-compatibility" class="anchor" href="https://gitee.com/kchstack/volcano#kubernetes-compatibility"></a>Kubernetes compatibility</h2><table><thead><tr><th></th><th>Kubernetes 1.17</th><th>Kubernetes 1.18</th><th>Kubernetes 1.19</th><th>Kubernetes 1.20</th><th>Kubernetes 1.21</th><th>Kubernetes 1.22</th><th>Kubernetes 1.23</th><th>Kubernetes 1.24</th><th>Kubernetes 1.25</th></tr></thead><tbody><tr><td>Volcano v1.6</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>-</td><td>-</td></tr><tr><td>Volcano v1.7</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr><tr><td>Volcano HEAD (master)</td><td>-</td><td>-</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td><td>✓</td></tr></tbody></table><p>Key:</p><ul><li><code>✓</code> Volcano and the Kubernetes version are exactly compatible.</li><li><code>+</code> Volcano has features or API objects that may not be present in the Kubernetes version.</li><li><code>-</code> The Kubernetes version has features or API objects that Volcano can't use.</li></ul><h2><a id="user-content-meeting" class="anchor" href="https://gitee.com/kchstack/volcano#meeting"></a>Meeting</h2><p>Community weekly meeting for Asia: 15:00 - 16:00 (UTC+8) Friday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community biweekly meeting for America: 08:30 - 09:30 (UTC-8) Thursday. (<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.thetimezoneconverter.com%2F%3Ft%3D10%253A00%26tz%3DGMT%252B8%26">Convert to your timezone.</a>)</p><p>Community meeting for Europe is ongoing on demand now. If you have some ideas or topics to discuss, please leave message
in the <a href="https://gitee.com/link?target=https%3A%2F%2Fcloud-native.slack.com%2Farchives%2FC011GJDQS0N">slack</a>. Maintainers will contact with you and book an open meeting for that.</p><p>Resources:</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.google.com%2Fdocument%2Fd%2F1YLbF8zjZBiR9PbXQPB22iuc_L0Oui5A1lddVfRnZrqs%2Fedit">Meeting notes and agenda</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fzoom.us%2Fj%2F91804791393">Meeting link</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%2Fembed%3Fsrc%3Dvolcano.sh.bot%40gmail.com">Meeting Calendar</a> | <a href="https://gitee.com/link?target=https%3A%2F%2Fcalendar.google.com%2Fcalendar%2Fb%2F1%3Fcid%3Ddm9sY2Fuby5zaC5ib3RAZ21haWwuY29t">Subscribe</a></li></ul><h2><a id="user-content-contact" class="anchor" href="https://gitee.com/kchstack/volcano#contact"></a>Contact</h2><p>If you have any question, feel free to reach out to us in the following ways:</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fvolcano-sh.slack.com">Volcano Slack Channel</a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgroups.google.com%2Fforum%2F%23%21forum%2Fvolcano-sh">Mailing List</a></p>]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/volcano</guid>
            <link>https://gitee.com/kchstack/volcano</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 深入浅出线程池]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1><span><span><span>一、线程</span></span></span></h1><span id="OSC_h2_2"></span><h2><span><span><span style="color:#333333">1、什么是线程 </span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>线程</span></strong></span></span><span><span><span style="color:#333333">(thread) 是操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际，运作单位。一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线，程并行执行不同的任务。 </span></span></span></p><span id="OSC_h2_3"></span><h2><span><span><span style="color:#333333">2、如何创建线程</span></span></span></h2><span id="OSC_h3_4"></span><h3><span><span><span>2.1、JAVA 中创建线程</span></span></span></h3><pre><code><span><span><span style="color:#708090">/**
 * 继承 Thread 类，重写 run 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"myThread..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 实现 Runnable 接口，实现 run 方法 
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"MyRunnable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">/**
 * 实现 Callable 接口，指定返回类型，实现 call 方法
 */</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"MyCallable..."</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getName</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><span id="OSC_h3_5"></span><h3><span><span><span>2.2、测试一下</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span> thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...main</span></span><span><span>
    thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//myThread...Thread-0</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span> myRunnable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread1 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>myRunnable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    myRunnable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...main</span></span><span><span>
    thread1</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyRunnable...Thread-1</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span> myCallable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyCallable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;String&gt;</span></span><span><span> futureTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread2 </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
    thread2</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>myCallable</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...main</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>futureTask</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//MyCallable...Thread-2</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_6"></span><h3><span><span><span>2.3、问题</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">既然我们创建了线程，那为何我们直接调用方法和我们调用 start() 方法的结果不同?new Thread() 是否真实创建了线程? </span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><span style="color:#333333">2.4、问题分析</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">我们直接调用方法，可以看到是执行的主线程，而调用 start() 方法就是开启了新线程，那说明 new Thread() 并没有创建线程，而是在 start() 中创建了线程。 </span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span style="color:#333333">那我们看下 Thread 类 start() 方法: </span></span></span></p><pre><code><span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//Thread 类实现了 Runnalbe 接口，实现了 run() 方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> target</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">synchronized</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//可以看到，start() 方法真实的调用时 start0() 方法 </span></span><span><span>
            started </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">native</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">start0</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//start0() 是一个 native 方法，由 JVM 调用底层操作系统，开启一个线程，由操作系统过统一调度 </span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>target </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
             target</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//操作系统在执行新开启的线程时，回调 Runnable 接口的 run() 方法，执行我们预设的线程任务</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_8"></span><h3><span><span><span>2.5、总结</span></span></span></h3><div><span style="color:#333333">1.</span><span><span><span><span style="color:#333333">JAVA 不能直接创建线程执行任务，而是通过创建 Thread 对象调用操作系统开启线程，在由操作系，统回调 Runnable 接口的 run() 方法执行任务; </span></span></span></span></div><div><span style="color:#333333">2.</span><span><span><span><span style="color:#333333">实现 Runnable 的方式，将线程实际要执行的回调任务单独提出来了，实现线程的启动与回调任务，解耦; </span></span></span></span></div><div><span style="color:#333333">3.</span><span><span><span><span style="color:#333333">实现 Callable 的方式，通过 Future 模式不但将线程的启动与回调任务解耦，而且可以在执行完成后，获取到执行的结果; </span></span></span></span></div><span id="OSC_h1_9"></span><h1><span><span><span style="color:#333333">二、多线程</span></span></span></h1><span id="OSC_h2_10"></span><h2><span><span><span>1、什么是多线程</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>多线程</span></strong></span></span><span><span><span style="color:#333333">(multithreading)，是指从软件或者硬件上实现多个线程并发执行的技术。同一个线程只，能处理完一个任务在处理下一个任务，有时我们需要多个任务同时处理，这时，我们就需要创建多，个线程来同时处理任务。 </span></span></span></p><span id="OSC_h2_11"></span><h2><span><span><span style="color:#333333">2、多线程有什么好处</span></span></span></h2><span id="OSC_h3_12"></span><h3><span><span><span>2.1、串行处理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每个任务执行 2 秒 </span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//处理执行结果</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//执行结果</span></span><span><span>
start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">10043</span></span></span></code></pre><span id="OSC_h3_13"></span><h3><span><span><span>2.2、并行处理</span></span></span></h3><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"start..."</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> start </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">List</span></span><span><span>&lt;Future&gt;</span></span><span><span> list </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayList</span></span><span><span>&lt;&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span> callable </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Callable</span></span><span><span>&lt;String&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span>@Override</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">String</span></span><span><span></span></span><span><span style="color:#dd4a68">call</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">2000</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每个任务执行 2 秒 </span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#669900">"task done..."</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">FutureTask</span></span><span><span style="color:#999999">(</span></span><span><span>callable</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
        list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
    
    list</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">forEach</span></span><span><span style="color:#999999">(</span></span><span><span>future </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-&gt;</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>future</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//处理执行结果 } catch (Exception e) {</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentTimeMillis</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"end...,time = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>end </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span> start</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">//执行结果</span></span><span><span>
 start</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>
 task done</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span> end</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">,</span></span><span><span>time </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2005</span></span><span><span></span></span></span></code></pre><span id="OSC_h3_14"></span><h3><span><span><span>2.3、总结</span></span></span></h3><div><span>1.</span><span><span><span><span>多线程可以把一个任务拆分为几个子任务，多个子任务可以并发执行，每一个子任务就是一个线程。</span></span></span></span></div><div><span>2.</span><span><span><span><span>多线程是为了同步完成多项任务，不是为了提高运行效率，而是为了提高资源使用效率来提高系统，的效率。</span></span></span></span></div><span id="OSC_h3_15"></span><h3><span><span><span>2.4、多线程的问题</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上面示例中我们可以看到，如果每来一个任务，我们就创建一个线程，有很多任务的情况下，我们，会创建大量的线程，可能会导致系统资源的耗尽。同时，我们知道线程的执行是需要抢占 CPU 资源，的，那如果有太多的线程，就会导致大量时间用在线程切换的开销上。</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>再有，每来一个任务都需要创建一个线程，而创建一个线程需要调用操作系统底层方法，开销较，大，而线程执行完成后就被回收了。在需要大量线程的时候，创建线程的时间就花费不少了。</span></span></span></p><span id="OSC_h1_16"></span><h1><span><span><span>三、线程池</span></span></span></h1><span id="OSC_h2_17"></span><h2><span><span><span>1、如何设计一个线程池</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>由于多线程的开发存在上述的一些问题，那我们是否可以设计一个东西来避免这些问题呢?当然可以! 线程池就是为了解决这些问题而生的。那我们该如何设计一个线程池来解决这些问题呢?或者说，一个线程池该具备什么样的功能?</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>1.1、线程池基本功能</span></span></span></h3><div><span>1.</span><span><span><span><span>多线程会创建大量的线程耗尽资源，那线程池应该对线程数量有所限制，可以保证不会耗尽系统资，源;</span></span></span></span></div><div><span>2.</span><span><span><span><span>每次创建新的线程会增加创建时的开销，那线程池应该减少线程的创建，尽量复用已创建好的线，程;</span></span></span></span></div><span id="OSC_h3_19"></span><h3><span><span><span>1.2、线程池面临问题</span></span></span></h3><div><span>1.</span><span><span><span><span>我们知道线程在执行完自己的任务后就会被回收，那我们如何复用线程?</span></span></span></span></div><div><span>2.</span><span><span><span><span>我们指定了线程的最大数量，当任务数超出线程数时，我们该如何处理?</span></span></span></span></div><span id="OSC_h3_20"></span><h3><span><span><span>1.3、创新源于生活</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>先假设一个场景:假设我们是一个物流公司的管理人员，要配送的货物就是我们的任务，货车就是，我们配送工具，我们当然不能有多少货物就准备多少货车。那当顾客源源不断的将货物交给我们配，送，我们该如何管理才能让公司经营的最好呢?</span></span></span></p><div><span>1.</span><span><span><span><span>最开始货物来的时候，我们还没有货车，每批要运输的货物我们都要购买一辆车来运输;</span></span></span></span></div><div><span>2.</span><span><span><span><span>当货车运输完成后，暂时还没有下一批货物到达，那货车就在仓库停着，等有货物来了立马就可以，运输;</span></span></span></span></div><div><span>3.</span><span><span><span><span>当我们有了一定数量的车后，我们认为已经够用了，那后面就不再买车了，这时要是由新的货物来，了，我们就会让货物先放仓库，等有车回来在配送;</span></span></span></span></div><div><span>4.</span><span><span><span><span>当 618 大促来袭，要配送的货物太多，车都在路上，仓库也都放满了，那怎么办呢?我们就选择临，时租一些车来帮忙配送，提高配送的效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>但是货物还是太多，我们增加了临时的货车，依旧配送不过来，那这时我们就没办法了，只能让发，货的客户排队等候或者干脆不接受了;</span></span></span></span></div><div><span>6.</span><span><span><span><span>大促圆满完成后，累计的货物已经配送完成了，为了降低成本，我们就将临时租的车都还了;</span></span></span></span></div><span id="OSC_h3_21"></span><h3><span><span><span>1.4、技术源于创新</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>基于上述场景，物流公司就是我们的线程池、货物就是我们的线程任务、货车就是我们的线程。我，们如何设计公司的管理货车的流程，就应该如何设计线程池管理线程的流程。</span></span></span></p><div><span>1.</span><span><span><span><span>当任务进来我们还没有线程时，我们就该创建线程执行任务;</span></span></span></span></div><div><span>2.</span><span><span><span><span>当线程任务执行完成后，线程不释放，等着下一个任务进来后接着执行;</span></span></span></span></div><div><span>3.</span><span><span><span><span>当创建的线程数量达到一定量后，新来的任务我们存起来等待空闲线程执行，这就要求线程池有个，存任务的容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>当容器存满后，我们需要增加一些临时的线程来提高处理效率;</span></span></span></span></div><div><span>5.</span><span><span><span><span>当增加临时线程后依旧处理不了的任务，那就应该将此任务拒绝;</span></span></span></span></div><div><span>6.</span><span><span><span><span>当所有任务执行完成后，就应该将临时的线程释放掉，以免增加不必要的开销;</span></span></span></span></div><span id="OSC_h2_22"></span><h2><span><span><span>2、线程池具体分析</span></span></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>上文中，我们讲了该如何设计一个线程池，下面我们看看大神是如何设计的；</span></span></span></p><span id="OSC_h3_23"></span><h3><span><span><span>2.1、 JAVA 中的线程池是如何设计的</span></span></span></h3><span id="OSC_h4_24"></span><h4><span><span><span>2.1.1、 线程池设计</span></span></span></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>看下线程池中的属性，了解线程池的设计。</span></span></span></p><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractExecutorService</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//线程池的打包控制状态,用高 3 位来表示线程池的运行状态,低 29 位来表示线程池中工作线程的数量 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span> ctl </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AtomicInteger</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>RUNNING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//值为 29,用来表示偏移量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> COUNT_BITS </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Integer</span></span><span><span style="color:#999999">.</span></span><span><span>SIZE </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池的最大容量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池的运行状态，总共有 5 个状态，用高 3 位来表示 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> RUNNING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//接受新任务并处理阻塞队列中的任务 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不接受新任务但会处理阻塞队列中的任务  </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不会接受新任务，也不会处理阻塞队列中的任务，并且中断正在运行的任务</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TIDYING </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">2</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//所有任务都已终止， 工作线程数量为 0，即将要执行 terminated() 钩子方法 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> TERMINATED </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">3</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;&lt;</span></span><span><span> COUNT_BITS</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// terminated() 方法已经执行结束</span></span><span><span></span></span><span><span style="color:#708090">//任务缓存队列，用来存放等待执行的任务</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//全局锁，对线程池状态等属性修改时需要使用这个锁</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池中工作线程的集合，访问和修改需要持有全局锁</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span> workers </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">HashSet</span></span><span><span>&lt;Worker&gt;</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// 终止条件</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Condition</span></span><span><span> termination </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newCondition</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程池中曾经出现过的最大线程数 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//已完成任务的数量</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTaskCount</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程工厂</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//任务拒绝策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程存活时间</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//是否允许核心线程超时</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> allowCoreThreadTimeOut</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//核心池大小，若 allowCoreThreadTimeOut 被设置，核心线程全部空闲超时被回收的情况下会为 0 </span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//最大池大小，不得超过 CAPACITY</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//默认的任务拒绝策略</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> defaultHandler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">AbortPolicy</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//运行权限相关</span></span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span> shutdownPerm </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">RuntimePermission</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"modifyThread"</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结一下：以上线程池的设计可以看出，线程池的功能还是很完善的。</span></span></span></p><div><span>1.</span><span><span><span><span>提供了线程创建、数量及存活时间等的管理;</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供了线程池状态流转的管理;</span></span></span></span></div><div><span>3.</span><span><span><span><span>提供了任务缓存的各种容器;</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供了多余任务的处理机制;</span></span></span></span></div><div><span>5.</span><span><span><span><span>提供了简单的统计功能;</span></span></span></span></div><span id="OSC_h4_25"></span><h4><span><span><span>2.1.2、线程池构造函数</span></span></span></h4><pre><code><span><span><span style="color:#708090">//构造函数</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//核心线程数 </span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//最大允许线程数 </span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//线程存活时间 </span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span> unit</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//存活时间单位 </span></span><span><span></span></span><span><span style="color:#dd4a68">BlockingQueue</span></span><span><span>&lt;Runnable&gt;</span></span><span><span> workQueue</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//任务缓存队列</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadFactory</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#708090">//线程工厂 </span></span><span><span></span></span><span><span style="color:#dd4a68">RejectedExecutionHandler</span></span><span><span> handler</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//拒绝策略 </span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
        keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalArgumentException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>workQueue </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workQueue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>keepAliveTime </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> unit</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">toNanos</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>threadFactory </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> threadFactory</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>handler </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> handler</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结一下：</span></span></span></p><div><span>1.</span><span><span><span><span>构造函数告诉了我们可以怎样去适用线程池，线程池的哪些特性是我们可以控制的;</span></span></span></span></div><span id="OSC_h4_26"></span><h4><span><span><span>2.1.3、线程池执行</span></span></span></h4><p><span><span><span>2.1.3.1、提交任务方法</span></span></span></p><div><span>•</span><span><span><span><span>public void execute(Runnable command);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future&lt;?&gt; submit(Runnable task);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Runnable task, T result);</span></span></span></span></div><div><span>•</span><span><span><span><span>Future submit(Callable task);</span></span></span></span></div><pre><code><span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#dd4a68">Future</span></span><span><span>&lt;?&gt;</span></span><span><span></span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">NullPointerException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">RunnableFuture</span></span><span><span>&lt;Void&gt;</span></span><span><span> ftask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">newTaskFor</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">execute</span></span><span><span style="color:#999999">(</span></span><span><span>ftask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> ftask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>可以看到 submit 方法的底层调用的也是 execute 方法，所以我们这里只分析 execute 方法；</span></span></span></p><pre><code><span><span><span>    public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        
        int c = ctl.get();
        //第一步：创建核心线程
        if (workerCountOf(c) &lt; corePoolSize) {  //worker 数量小于 corePoolSize
            if (addWorker(command, true))       //创建 worker
                return;
            c = ctl.get();
        }
        //第二步：加入缓存队列
        if (isRunning(c) &amp;&amp; workQueue.offer(command)) { //线程池处于 RUNNING 状态，将任务加入 workQueue 任务缓存队列
            int recheck = ctl.get();    
            if (! isRunning(recheck) &amp;&amp; remove(command))    //双重检查，若线程池状态关闭了，移除任务
                reject(command);
            else if (workerCountOf(recheck) == 0)       //线程池状态正常，但是没有线程了，创建 worker
                addWorker(null, false);
        }
        //第三步：创建临时线程
        else if (!addWorker(command, false))
            reject(command);
    }</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结一下：execute() 方法主要功能：</span></span></span></p><div><span>1.</span><span><span><span><span>核心线程数量不足就创建核心线程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>核心线程满了就加入缓存队列；</span></span></span></span></div><div><span>3.</span><span><span><span><span>缓存队列满了就增加非核心线程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>非核心线程也满了就拒绝任务；</span></span></span></span></div><p><span><span><span>2.1.3.2、创建线程</span></span></span></p><pre><code><span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> core</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
        retry</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//等价于：rs&gt;=SHUTDOWN &amp;&amp; (rs != SHUTDOWN || firstTask != null || workQueue.isEmpty())</span></span><span><span></span></span><span><span style="color:#708090">//线程池已关闭，并且无需执行缓存队列中的任务，则不创建</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span>
                   firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> CAPACITY </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span>
                    wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>core </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span> corePoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> maximumPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndIncrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//CAS 增加线程数</span></span><span><span></span></span><span><span style="color:#0077aa">break</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span>
                c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// Re-read ctl</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span> rs</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span> retry</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// else CAS failed due to workerCount change; retry inner loop</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#708090">//上面的流程走完，就可以真实开始创建线程了</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            w </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span>firstTask</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//这里创建了线程</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">// Recheck while holding lock.</span></span><span><span></span></span><span><span style="color:#708090">// Back out on ThreadFactory failure or if</span></span><span><span></span></span><span><span style="color:#708090">// shut down before lock acquired.</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
                    </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isAlive</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// precheck that t is startable</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">IllegalThreadStateException</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">add</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//这里将线程加入到线程池中</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>s </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> largestPoolSize</span></span><span><span style="color:#999999">)</span></span><span><span>
                            largestPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> s</span></span><span><span style="color:#999999">;</span></span><span><span>
                        workerAdded </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>workerAdded</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    t</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">start</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加成功，启动线程</span></span><span><span>
                    workerStarted </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorkerFailed</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//添加线程失败操作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> workerStarted</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结：addWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>增加线程数；</span></span></span></span></div><div><span>2.</span><span><span><span><span>创建线程 Worker 实例加入线程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>加入完成开启线程；</span></span></span></span></div><div><span>4.</span><span><span><span><span>启动失败则回滚增加流程；</span></span></span></span></div><p><span><span><span>2.1.3.3、工作线程的实现</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">class</span></span><span><span></span></span><span><span style="color:#dd4a68">Worker</span></span><span><span></span></span><span><span style="color:#708090">//Worker 类是 ThreadPoolExecutor 的内部类</span></span><span><span></span></span><span><span style="color:#0077aa">extends</span></span><span><span></span></span><span><span style="color:#dd4a68">AbstractQueuedSynchronizer</span></span><span><span></span></span><span><span style="color:#0077aa">implements</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> thread</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//持有实际线程</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker 所对应的第一个任务，可能为空</span></span><span><span></span></span><span><span style="color:#0077aa">volatile</span></span><span><span></span></span><span><span style="color:#0077aa">long</span></span><span><span> completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//记录执行任务数</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">Worker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> firstTask</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">setState</span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">-</span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// inhibit interrupts until runWorker</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> firstTask</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>thread </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getThreadFactory</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">newThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//当前线程调用 ThreadPoolExecutor 中的 runWorker 方法，在这里实现的线程复用</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span>继承 AQS，实现了不可重入锁</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#999999">.</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结：工作线程 Worker 类主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>此类持有一个工作线程，不断处理拿到的新任务，持有的线程即为可复用的线程；</span></span></span></span></div><div><span>2.</span><span><span><span><span>此类可看作一个适配类，在 run() 方法中真实调用 runWorker() 方法不断获取新任务，完成线程复用；</span></span></span></span></div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>2.1.3.4、线程的复用</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">runWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//ThreadPoolExecutor 中的 runWorker 方法，在这里实现的线程复用</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span> wt </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">currentThread</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span>firstTask </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span>
        w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// allow interrupts</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//标识线程是否异常终止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">while</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//这里会不断从任务队列获取任务并执行</span></span><span><span>
                w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程是否需要中断</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isInterrupted</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    wt</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">interrupt</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">beforeExecute</span></span><span><span style="color:#999999">(</span></span><span><span>wt</span></span><span><span style="color:#999999">,</span></span><span><span> task</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行任务前的 Hook 方法，可自定义</span></span><span><span></span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        task</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">run</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行实际的任务</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">RuntimeException</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Error</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Throwable</span></span><span><span> x</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        thrown </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> x</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">throw</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">Error</span></span><span><span style="color:#999999">(</span></span><span><span>x</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">afterExecute</span></span><span><span style="color:#999999">(</span></span><span><span>task</span></span><span><span style="color:#999999">,</span></span><span><span> thrown</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行任务后的 Hook 方法，可自定义</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                    task </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行完成后，将当前线程中的任务制空，准备执行下一个任务</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">;</span></span><span><span>
                    w</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
            completedAbruptly </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">,</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//线程执行完成后的清理工作</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小结：runWorker() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>循环从缓存队列中获取新的任务，直到没有任务为止；</span></span></span></span></div><div><span>2.</span><span><span><span><span>使用 worker 持有的线程真实执行任务；</span></span></span></span></div><div><span>3.</span><span><span><span><span>任务都执行完成后的清理工作；</span></span></span></span></div><p><span><span><span>2.1.3.5、队列中获取待执行任务</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span></span></span><span><span style="color:#dd4a68">getTask</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//标识当前线程是否超时未能获取到 task 对象</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Check if queue empty only if necessary.</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>rs </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> STOP </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">int</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#708090">// Are workers subject to culling?</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span> maximumPoolSize </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span> timedOut</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>wc </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">compareAndDecrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">//若线程存活时间超时，则 CAS 减去线程数量</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">continue</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">Runnable</span></span><span><span> r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> timed </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">poll</span></span><span><span style="color:#999999">(</span></span><span><span>keepAliveTime</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>NANOSECONDS</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span></span></span><span><span style="color:#708090">//允许超时回收则阻塞等待</span></span><span><span>
                    workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">take</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//不允许则直接获取，没有就返回 null</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>r </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span> r</span></span><span><span style="color:#999999">;</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">true</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">InterruptedException</span></span><span><span> retry</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                timedOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>小结：getTask() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>实际在缓存队列中获取待执行的任务；</span></span></span></span></div><div><span>2.</span><span><span><span><span>在这里管理线程是否要阻塞等待，控制线程的数量；</span></span></span></span></div><p><span><span><span>2.1.3.6、清理工作</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">private</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">processWorkerExit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Worker</span></span><span><span> w</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">boolean</span></span><span><span> completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#708090">// If abrupt, then workerCount wasn't adjusted</span></span><span><span></span></span><span><span style="color:#dd4a68">decrementWorkerCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
        mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            completedTaskCount </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+=</span></span><span><span> w</span></span><span><span style="color:#999999">.</span></span><span><span>completedTasks</span></span><span><span style="color:#999999">;</span></span><span><span>
            workers</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">remove</span></span><span><span style="color:#999999">(</span></span><span><span>w</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//移除执行完成的线程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
        </span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//每次回收完一个线程后都尝试终止线程池</span></span><span><span>
​
        </span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateLessThan</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> STOP</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//到这里说明线程池没有终止</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span>completedAbruptly</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> allowCoreThreadTimeOut </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">?</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">:</span></span><span><span> corePoolSize</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span>
                    min </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">1</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&gt;=</span></span><span><span> min</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">// replacement not needed</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">addWorker</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">null</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">false</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//异常终止线程的话，需要在常见一个线程</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小结：processWorkerExit() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>真实完成线程池线程的回收；</span></span></span></span></div><div><span>2.</span><span><span><span><span>调用尝试终止线程池；</span></span></span></span></div><div><span>3.</span><span><span><span><span>保证线程池正常运行；</span></span></span></span></div><p><span><span><span>2.1.3.7、尝试终止线程池</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">tryTerminate</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">;</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">int</span></span><span><span> c </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span> ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">get</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//若线程池正在执行、线程池已终止、线程池还需要执行缓存队列中的任务时，返回</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">isRunning</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#dd4a68">runStateAtLeast</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span> TIDYING</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">||</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">runStateOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">==</span></span><span><span> SHUTDOWN </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&amp;&amp;</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!</span></span><span><span> workQueue</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">isEmpty</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行到这里，线程池为 SHUTDOWN 且无待执行任务，或 STOP 状态</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">workerCountOf</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">!=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">interruptIdleWorkers</span></span><span><span style="color:#999999">(</span></span><span><span>ONLY_ONE</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//只中断一个线程</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span>
​
            </span></span><span><span style="color:#708090">//执行到这里，线程池已经没有可用线程了，可以终止了</span></span><span><span></span></span><span><span style="color:#0077aa">final</span></span><span><span></span></span><span><span style="color:#dd4a68">ReentrantLock</span></span><span><span> mainLock </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">this</span></span><span><span style="color:#999999">.</span></span><span><span>mainLock</span></span><span><span style="color:#999999">;</span></span><span><span>
            mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">lock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">if</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span>ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">compareAndSet</span></span><span><span style="color:#999999">(</span></span><span><span>c</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TIDYING</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//CAS 设置线程池终止</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#dd4a68">terminated</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//执行钩子方法</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                        ctl</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">set</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">ctlOf</span></span><span><span style="color:#999999">(</span></span><span><span>TERMINATED</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//这里将线程池设为终态</span></span><span><span>
                        termination</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">signalAll</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">return</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">finally</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                mainLock</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">unlock</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#708090">// else retry on failed CAS</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span><span><span>小结：tryTerminate() 方法主要功能；</span></span></span></p><div><span>1.</span><span><span><span><span>实际尝试终止线程池；</span></span></span></span></div><div><span>2.</span><span><span><span><span>终止成功则调用钩子方法，并且将线程池置为终态。</span></span></span></span></div><span id="OSC_h3_27"></span><h3><span><span><span>2.2、JAVA 线程池总结</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通过对 JAVA 线程池的具体分析我们可以看出，虽然流程看似复杂，但其实有很多内容都是状态重复校验、线程安全的保证等内容，其主要的功能与我们前面所提出的设计功能一致，只是额外增加了一些扩展，下面我们简单整理下线程池的功能；</span></span></span></p><p><span><span><span>2.2.1、主要功能</span></span></span></p><div><span>1.</span><span><span><span><span>线程数量及存活时间的管理；</span></span></span></span></div><div><span>2.</span><span><span><span><span>待处理任务的存储功能；</span></span></span></span></div><div><span>3.</span><span><span><span><span>线程复用机制功能；</span></span></span></span></div><div><span>4.</span><span><span><span><span>任务超量的拒绝功能；</span></span></span></span></div><div>
  &nbsp; 
</div><p><span><span><span>2.2.2、扩展功能</span></span></span></p><div><span>1.</span><span><span><span><span>简单的执行结果统计功能；</span></span></span></span></div><div><span>2.</span><span><span><span><span>提供线程执行异常处理机制；</span></span></span></span></div><div><span>3.</span><span><span><span><span>执行前后处理流程自定义；</span></span></span></span></div><div><span>4.</span><span><span><span><span>提供线程创建方式的自定义；</span></span></span></span></div><p><span><span><span>2.2.3、流程总结</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>以上通过对 JAVA 线程池任务提交流程的分析我们可以看出，线程池执行的简单流程如下图所示；</span></span></span></p><div><img alt="" height="229" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-18-06DlWGyY11FjcoyluS.png" width="949" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_28"></span><h3><span><span><span>2.3、JAVA 线程池使用</span></span></span></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>线程池基本使用验证上述流程：</span></span></span></p><pre><code><span><span><span></span></span><span><span style="color:#0077aa">public</span></span><span><span></span></span><span><span style="color:#0077aa">static</span></span><span><span></span></span><span><span style="color:#0077aa">void</span></span><span><span></span></span><span><span style="color:#dd4a68">main</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">String</span></span><span><span style="color:#999999">[</span></span><span><span style="color:#999999">]</span></span><span><span> args</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#0077aa">throws</span></span><span><span></span></span><span><span style="color:#dd4a68">Exception</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#708090">//创建线程池</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span> threadPoolExecutor </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ThreadPoolExecutor</span></span><span><span style="color:#999999">(</span></span><span><span></span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">10</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#990055">100</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#dd4a68">TimeUnit</span></span><span><span style="color:#999999">.</span></span><span><span>SECONDS</span></span><span><span style="color:#999999">,</span></span><span><span></span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">ArrayBlockingQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">5</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//加入 4 个任务，小于核心线程，应该只有 4 个核心线程，队列为 0</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 4</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 个任务，超过核心线程，但是没有超过核心线程 + 缓存队列容量，应该 5 个核心线程，队列为 3</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 3</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 个任务，队列满了，应该 5 个热核心线程，队列 5 个，非核心线程 2 个</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
            threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 7</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#708090">//再加 4 个任务，核心线程满了，应该 5 个热核心线程，队列 5 个，非核心线程 5 个，最后一个拒绝</span></span><span><span></span></span><span><span style="color:#0077aa">for</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">int</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">=</span></span><span><span></span></span><span><span style="color:#990055">0</span></span><span><span style="color:#999999">;</span></span><span><span> i </span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">&lt;</span></span><span><span></span></span><span><span style="color:#990055">4</span></span><span><span style="color:#999999">;</span></span><span><span> i</span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">++</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span></span></span><span><span style="color:#0077aa">try</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">submit</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#0077aa">new</span></span><span><span></span></span><span><span style="color:#dd4a68">MyRunnable</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#0077aa">catch</span></span><span><span></span></span><span><span style="color:#999999">(</span></span><span><span style="color:#dd4a68">Exception</span></span><span><span> e</span></span><span><span style="color:#999999">)</span></span><span><span></span></span><span><span style="color:#999999">{</span></span><span><span>
                e</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">printStackTrace</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//java.util.concurrent.RejectedExecutionException</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#999999">}</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 10</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span>threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getTaskCount</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//共执行 15 个任务</span></span><span><span></span></span><span><span style="color:#708090">//执行完成，休眠 15 秒，非核心线程释放，应该 5 个核心线程，队列为 0</span></span><span><span></span></span><span><span style="color:#dd4a68">Thread</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">sleep</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#990055">1500</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"worker count = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getPoolSize</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//worker count = 5</span></span><span><span></span></span><span><span style="color:#dd4a68">System</span></span><span><span style="color:#999999">.</span></span><span><span>out</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">println</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#669900">"queue size = "</span></span><span><span></span></span><span><span style="background-color:rgba(255, 255, 255, 0.5)">+</span></span><span><span> threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">getQueue</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">size</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#708090">//queue size = 0</span></span><span><span></span></span><span><span style="color:#708090">//关闭线程池</span></span><span><span>
        threadPoolExecutor</span></span><span><span style="color:#999999">.</span></span><span><span style="color:#dd4a68">shutdown</span></span><span><span style="color:#999999">(</span></span><span><span style="color:#999999">)</span></span><span><span style="color:#999999">;</span></span><span><span></span></span><span><span style="color:#999999">}</span></span></span></code></pre><blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>﻿作者：京东零售，秦浩然&nbsp;</span></span></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span><span><span>来源：京东云开发者社区，转载请注明来源</span></span></span></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10112678</guid>
            <link>https://my.oschina.net/u/4090830/blog/10112678</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Remix 2.0 正式发布，现代化全栈 Web 框架！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>9 月 16 日，全栈 Web 框架 Remix 正式发布了 2.0 版本，Remix 团队在发布 1.0 版本后经过近 2 年的持续努力，发布了 19 个次要版本、100 多个补丁版本，并解决了数千个问题和拉取请求，终于迎来了第二个主要版本！</p><blockquote><p>Remix 具有以下特性：</p><ul><li><p>追求速度、用户体验（UX），支持任何 SSR/SSG 等</p></li><li><p>基于 Web 基础技术，如 HTML/CSS 与 HTTP 以及 Web Fecth API，在绝大部分情况可以不依赖于 JavaScript 运行，所以可以运行在任何环境下，如 Web Browser、Cloudflare Workers、Serverless 或者 Node.js 等</p></li><li><p>客户端与服务端一致的开发体验，客户端代码与服务端代码写在一个文件里，无缝进行数据交互，同时基于 TypeScript，类型定义可以跨客户端与服务端共用</p></li><li><p>内置文件即路由、动态路由、嵌套路由、资源路由等</p></li><li><p>去掉 Loading、骨架屏等任何加载状态，页面中所有资源都可以预加载（Prefetch），页面几乎可以立即加载</p></li><li><p>告别以往瀑布式（Waterfall）的数据获取方式，数据获取在服务端并行（Parallel）获取，生成完整 HTML 文档，类似 React 的并发特性</p></li><li><p>提供开发网页需要所有状态，开箱即用；提供所有需要使用的组件，包括 <code>&lt;Links&gt;</code> 、<code>&lt;Link&gt;</code>、 <code>&lt;Meta&gt;</code> 、<code>&lt;Form&gt;</code> 、<code>&lt;Script/&gt;</code> ，用于处理元信息、脚本、CSS、路由和表单相关的内容</p></li><li><p>内置错误处理，针对非预期错误处理的 <code>&lt;ErrorBoundary&gt;</code> 和开发者抛出错误处理的 <code>&lt;CatchBoundary&gt;</code></p></li></ul></blockquote><p>Remix 是一个由 React Router 开发团队所开发的基于 React 和 TypeScript 的全栈框架。2021 年 11 月，Remix 正式开源，至今已在 Github 上获得了 24.6k star。Remix 正式开源时，引发了前端圈不小的关注，其被普遍认为是 Next.js 的强劲对手，那时隔两年，它和 Next.js 之间的「竞争」怎么样了呢？</p><p>目前，Next.js 拥有 112k star，是 Remix 的近 5 倍。Next.js 周下载量 279 万，而 Remix 仅有 1.4 万，Next.js 是 Remix 的近 200 倍。可见，Remix 并没有像大家预料的那样，成为 Next.js 的有力竞争对手，在开发者社区中只有较小的市场份额。尽管如此，Remix 仍然吸引了一些开发者，并且在特定领域或项目中有其优势和适用性。</p><p>下面就来看看 Remix 2.0 都有哪些更新！</p><h2>v1.0 以来的更新</h2><ul><li><p>v1.8 和 v1.10 中，将 Remix 与 React Router v6 进行了对齐。当开始开发 Remix 时，承诺它将使 React Router 变得更好。这个版本真正实现了这一承诺，并将两个库都对齐到使用相同的底层依赖。</p></li><li><p>在 v1.11 中，发布了"promises over the wire"，即延迟加载模块。现在，如果真的想在 Remix 应用中添加 loading 图标，可以这么做了！</p></li><li><p>在 v1.11 中，添加了"flat"路由，简化了使用嵌套布局而不需要嵌套目录的操作，这成为 v2 版本的默认设置。</p></li><li><p>在 v1.13 和 v1.16 中，改进了 Remix 对各种 CSS 策略的支持，包括 PostCSS、CSS 模块、Vanilla Extract 和 CSS 副作用（全局）导入。</p></li><li><p>在 v1.14 和 v1.18 中，发布了一个新的开发服务器，支持热更新（HMR）和热数据重载（HDR）。这个新的开发服务器成为 v2 版本的默认设置。</p></li><li><p>在 v2 版本中，最重要的亮点之一是全新的<code>create-remix</code>命令行工具体验。</p></li></ul><h2>v2.0 的更新内容</h2><h3>重大变化</h3><h4>升级的依赖要求</h4><p>Remix v2 已经升级了对 React 和 Node 的最低版本支持，并正式支持以下版本：</p><ul><li><p>React 18</p></li><li><p>Node 18 或更高版本</p></li></ul><h4>移除未来标志</h4><p>以下未来标志已被移除，并且它们的行为现在是默认的，现在可以从<code>remix.config.js</code>文件中删除这些设置。</p><ul><li><p><code>v2_dev</code>，新的开发服务器，具有 HMR + HDR，如果在<code>future.v2_dev</code>中有配置而不仅仅是布尔值（例如，<code>future.v2_dev.port</code>），可以将它们提升到<code>remix.config.js</code>中的根<code>dev</code>对象中。</p></li><li><p><code>v2_errorBoundary</code>，移除了<code>CatchBoundary</code>，改为使用单个<code>ErrorBoundary</code></p></li><li><p><code>v2_headers</code>，修改了嵌套路由场景中的头部逻辑</p></li><li><p><code>v2_meta</code>，修改了<code>meta()</code>的返回格式</p></li><li><p><code>v2_normalizeFormMethod</code>，将<code>formMethod</code>规范化为大写</p></li><li><p><code>v2_routeConvention</code>，现在默认情况下，路由使用扁平化路由约定</p></li></ul><h4>重大变更/API 删除</h4><p>下面列出了 Remix v1 中具有弃用警告的其他重大更改/API 删除。如果使用的是最新 1.19.3 版本且没有任何控制枱警告，那么可能可以继续执行所有这些操作！</p><p><strong>（1）有破坏性更改/API 移除</strong></p><ul><li><p>remix.config.js</p></li><li><p>将<code>browserBuildDirectory</code>重命名为<code>assetsBuildDirectory</code></p></li><li><p>删除<code>devServerBroadcastDelay</code></p></li><li><p>将<code>devServerPort</code>重命名为<code>dev.port</code></p></li><li><p>如果在 1.x 版本中选择此选项，则配置标记将是<code>future.v2_dev.port</code>，但在稳定的 2.x 版本中，它将是<code>dev.port</code></p></li><li><p>将默认的<code>serverModuleFormat</code>从<code>cjs</code>更改为<code>esm</code></p></li><li><p>删除<code>serverBuildTarget</code></p></li><li><p>将<code>serverBuildDirectory</code>更改为<code>serverBuildPath</code></p></li><li><p>默认情况下不再在服务器上对 Node 内置模块进行<code>polyfill</code>，必须通过<code>serverNodeBuiltinsPolyfill</code>选择加入<code>polyfill</code></p></li><li><p>@remix-run/react</p></li><li><p>删除<code>useTransition</code></p></li><li><p>删除<code>fetcher.type</code>并压缩<code>fetcher.submission</code></p></li><li><p><code>&lt;fetcher.Form method="get"&gt;</code>现在更准确地被归类为<code>state：「loading」</code>，而不是<code>state：「submitting」</code>，以更好地与底层的 GET 请求保持一致</p></li><li><p>要求<code>camelCased</code>版本的<code>imagesrcset/imagesizes</code></p></li></ul><p><strong>（2）没有弃用警告</strong></p><p>此版本没能在每个破坏性更改或 API 移除上都收到废弃警告。以下是可能需要查看的剩余变更列表，以升级到 v2：</p><ul><li><p>remix.config.js</p></li><li><p>Node 内置模块不再默认在浏览器中进行 polyfill，可以通过<code>browserNodeBuiltinsPolyfill</code>选项选择加入<code>polyfill</code></p></li><li><p>如果存在配置文件，则<code>PostCSS/Tailwind</code>将默认启用，可以通过 postcss 和 tailwind 标志禁用此功能</p></li><li><p>@remix-run/cloudflare</p></li><li><p>删除<code>createCloudflareKVSessionStorage</code>方法</p></li><li><p>不再支持@cloudflare/workers-types v2 和 v3</p></li><li><p>@remix-run/dev</p></li><li><p>删除<code>REMIX_DEV_HTTP_ORIGIN</code>，增加<code>REMIX_DEV_ORIGIN</code></p></li><li><p>删除<code>REMIX_DEV_SERVER_WS_PORT</code>，增加<code>dev.port</code>或<code>--port</code></p></li><li><p>删除<code>--no-restart/restart</code>标志，增加<code>--manual/manual</code></p></li><li><p>删除<code>--scheme/scheme</code>和<code>--host/host</code>，增加<code>REMIX_DEV_ORIGIN</code></p></li><li><p>删除<code>codemod</code>命令</p></li><li><p>@remix-run/eslint-config</p></li><li><p>删除<code>@remix-run/eslint-config/jest</code>配置</p></li><li><p>删除魔法<code>imports</code>的 ESLint 警告</p></li><li><p>@remix-run/netlify</p></li><li><p><code>@remix-run/netlify</code>适配器已被删除，推荐使用 Netlify 官方适配器</p></li><li><p>@remix-run/node</p></li><li><p>默认不再对<code>fetch</code>进行<code>polyfill</code>，应用需要调用<code>installGlobals()</code>来安装<code>polyfills</code></p></li><li><p>不再从<code>@remix-run/node</code>导出<code>fetch</code>和相关 API，应用应使用全局命名空间中的版本</p></li><li><p>应用需要调用<code>sourceMapSupport.install()</code>来设置源映射支持</p></li><li><p>@remix-run/react</p></li><li><p>删除<code>unstable_shouldReload</code>，增加<code>shouldRevalidate</code></p></li><li><p>@remix-run/serve</p></li><li><p>如果 3000 端口被占用且未指定 PORT，则<code>remix-serve</code>将选择一个可用的端口</p></li><li><p>集成手动模式</p></li><li><p>删除未记录的<code>createApp Node API</code></p></li><li><p>在<code>remix-serve</code>中保留动态 imports 以供外部 bundle 使用</p></li><li><p>@remix-run/vercel</p></li><li><p><code>@remix-run/vercel</code>适配器已被删除，推荐使用 Vercel 官方提供的功能</p></li><li><p>create-remix</p></li><li><p>停止传递<code>isTypeScript</code>给<code>remix.init</code>脚本</p></li><li><p>remix</p></li><li><p>删除魔法 <code>exports</code></p></li></ul><p><strong>（3）破坏类型变化</strong></p><ul><li><p>从 <code>future.v2_meta</code> 类型中删除了 <code>V2_</code> 前缀，因为它们现在是默认行为。</p></li><li><p><code>V2_MetaArgs</code> -&gt; <code>MetaArgs</code></p></li><li><p><code>V2_MetaDescriptor</code> -&gt; <code>MetaDescriptor</code></p></li><li><p><code>V2_MetaFunction</code> -&gt; <code>MetaFunction</code></p></li><li><p><code>V2_MetaMatch</code> -&gt; <code>MetaMatch</code></p></li><li><p><code>V2_MetaMatches</code> -&gt; <code>MetaMatches</code></p></li><li><p><code>V2_ServerRuntimeMetaArgs</code> -&gt; <code>ServerRuntimeMetaArgs</code></p></li><li><p><code>V2_ServerRuntimeMetaDescriptor</code> -&gt; <code>ServerRuntimeMetaDescriptor</code></p></li><li><p><code>V2_ServerRuntimeMetaFunction</code> -&gt; <code>ServerRuntimeMetaFunction</code></p></li><li><p><code>V2_ServerRuntimeMetaMatch</code> -&gt; <code>ServerRuntimeMetaMatch</code></p></li><li><p><code>V2_ServerRuntimeMetaMatches</code> -&gt; <code>ServerRuntimeMetaMatches</code></p></li><li><p>以下类型已进行调整，更偏向于使用<code>unknown</code>而不是<code>any</code>，并与底层的 React Router 类型保持一致：</p></li><li><p>将<code>useMatches()</code>的返回类型从<code>RouteMatch</code>改名为<code>UIMatch</code></p></li><li><p>将<code>LoaderArgs</code>/<code>ActionArgs</code>改名为<code>LoaderFunctionArgs</code>/<code>ActionFunctionArgs</code></p></li><li><p>将<code>AppData</code>的类型从<code>any</code>改为<code>unknown</code></p></li><li><p>将<code>Location["state"]</code>（<code>useLocation.state</code>）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p>将<code>UIMatch["data"]</code>（<code>useMatches()[i].data</code>）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p>将<code>UIMatch["handle"]</code>（<code>useMatches()[i].handle</code>）的类型从<code>{ [k: string]: any }</code>改为<code>unknown</code></p></li><li><p>将<code>Fetcher["data"]</code>（<code>useFetcher().data</code>）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p><code>MetaMatch.handle</code>（在<code>meta()</code>函数中使用）的类型从<code>any</code>改为<code>unknown</code></p></li><li><p><code>AppData</code>/<code>RouteHandle</code>不再导出，因为它们只是<code>unknown</code>的别名</p></li></ul><h3>新增功能</h3><ul><li><p>新的<code>create-remix</code>命令行界面工具</p></li><li><p>最显著的改变是，不再使用下拉菜单选择模板/堆栈，而是使用<code>--template</code>参数和不断增长的可用模板列表。</p></li><li><p>新增<code>--overwrite</code>参数</p></li><li><p>支持<code>bun</code>包管理器</p></li><li><p>通过<code>build.mode</code>检测构建模式</p></li><li><p>支持通过<code>serverNodeBuiltinsPolyfill.globals</code>/<code>browserNodeBuiltinsPolyfill.globals</code>来对 Node 全局对象进行<code>polyfill</code></p></li><li><p>新的<code>redirectDocument</code>实用工具，通过重新加载文档实现重定向</p></li><li><p>在<code>meta</code>参数中添加<code>error</code>，以便可以渲染错误标题等</p></li><li><p><code>unstable_createRemixStub</code>现在支持在 stubbed Remix 路由上添加<code>meta/links</code>函数</p></li><li><p><code>unstable_createRemixStub</code>不再支持在路由上使用<code>element/errorElement</code>属性。必须使用<code>Component/ErrorBoundary</code>与从 Remix 路由模块导出的内容匹配。</p></li></ul><h3>其他更新</h3><ul><li><p>Remix 现在在内部使用 React Router 的<code>route.lazy</code>方法在导航时加载路由模块。</p></li><li><p>删除了<code>@remix-run/node</code>中的<code>atob/btoa</code> polyfills，改用内置版本。</p></li><li><p>将<code>@remix-run/dev</code>包与<code>@remix-run/css-bundle</code>包的内容解耦。</p></li><li><p>现在，<code>@remix-run/css-bundle</code>包的内容完全由 Remix 编译器管理。尽管仍然建议 Remix 依赖项共享相同的版本，但这个变化确保在升级<code>@remix-run/dev</code>而不升级<code>@remix-run/css-bundle</code>时没有运行时错误。</p></li><li><p><code>remix-serve</code>现在将选择一个空闲的端口（如果 3000 端口被占用）。</p></li><li><p>如果设置了 PORT 环境变量，r<code>emix-serve</code>将使用该端口。</p></li><li><p>否则，<code>remix-serve</code>将选择一个空闲的端口（除非 3000 端口已被占用）。</p></li><li><p>更新的依赖项：</p></li><li><p><code>react-router-dom@6.16.0</code></p></li><li><p><code>@remix-run/router@1.9.0</code></p></li><li><p><code>@remix-run/web-fetch@4.4.0</code></p></li><li><p><code>@remix-run/web-file@3.1.0</code></p></li><li><p><code>@remix-run/web-stream@1.1.0</code></p></li></ul><h2>React Server Components？</h2><p>Remix 对于 React Server Components（RSC）的支持计划是积极的。他们希望在 Remix v3 中添加对 RSC 的支持，并希望能够展示这项技术在多个框架中的能力。</p><p>RSC 是一个有趣且强大的功能，但是 Remix v2 是基于当前稳定的 React 特性构建的，因此 RSC 在 Remix v2 中尚未包含。一旦 RSC 稳定下来，Remix 将会支持它。</p><p>然而，与之前支持的其他 React 特性相比，「支持 RSC」需要更深入的集成。RSC 的异步组件与 Remix 的加载器和组件结合得非常相似，并且 Remix 在 v3 中决定摒弃使用第三方库 useLoaderData，因此在数据加载方面可能会有所不同。他们希望开发者只需要将现有的加载器代码迁移到新的异步组件中，但需要注意数据依赖的瀑布效应。</p><p>Remix 团队在今年早些时候的 Remix Conf 上与 React 核心团队的成员举办了一个讨论会，讨论了 RSC 以及如何共同推进这项技术的稳定发布。他们以各种方式帮助准备 RSC，并希望能够成功地集成它到 Remix 中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-3b8a79fd9e4920af8f87057e0a296e31755.png" alt="" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 22 Sep 2023 02:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5152974/blog/10113443</guid>
            <link>https://my.oschina.net/u/5152974/blog/10113443</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
