<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 15 Mar 2024 08:18:33 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[离职后可以删除自己所编写的软件吗？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一名开发者近日在 StackExchange 问答社区的「法律」板块发布了一个<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flaw.stackexchange.com%2Fquestions%2F101283%2Fdeleting-software-i-wrote-upon-leaving-employment-of-a-company" target="_blank">求助帖</a>，咨询「如果在从公司离职时，删除了自己所编写的软件」是否要承担相关的责任。</span></p><p><span style="color:#000000">根据这名开发者的表述，他现在住在美国，属于自由职业者，不存在雇佣合同关系。但他年轻的时候，曾在一家仓库以小时工的身份从事与库存相关的工作。彼时，为了让自己的工作更轻松，他编写了一款可将大量的手工操作自动化的软件。之后，与他同岗位的其他人也开始使用这一软件来提升工作效率。</span></p><p><span style="color:#000000">但作为软件作者的他基本属于无偿贡献，公司从未给过他任何实际的回报或奖赏。时至今日，他也不再指望可以得到任何补偿；不过却萌生了一个想法：「如果我在离职时删除了我的代码，我会承担责任吗？」</span></p><p><img height="280" src="https://oscimg.oschina.net/oscnet/up-afef8f87a173dcede82e719d5c041831c0b.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">这一帖子在论坛引起了热烈的讨论，其中一个高赞回答对问题进行了分析，并言简意赅的给出如下建议：</span></p><blockquote><p><span style="color:#000000">如果你是在工作时间（朝九晚五）写的这个软件，并为此获得了报酬，那么公司就拥有该软件的所有权。即使他们不知道是你写的。因此，删除该软件就是对公司财产的损害。</span></p><p><span style="color:#000000">如果软件是你利用业余时间编写的，那么在法律上就比较棘手了。你的工作性质会有不同。如果你没有从中得到任何好处，我的建议是放弃该软件。毁掉它只会给你带来麻烦。</span></p></blockquote><p><span style="color:#000000">更多详情<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flaw.stackexchange.com%2Fquestions%2F101283%2Fdeleting-software-i-wrote-upon-leaving-employment-of-a-company" target="_blank">可查看原贴</a>。&nbsp;</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 07:23:10 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283203/deleting-software-leaving-company</guid>
            <link>https://www.oschina.net/news/283203/deleting-software-leaving-company</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[阿里旗下 11 款应用启动鸿蒙原生应用开发]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>3 月 14 日，阿里旗下多款应用与华为举行鸿蒙合作签约仪式，宣布将基于 HarmonyOS NEXT 鸿蒙星河版，启动闲鱼、1688、飞猪、饿了么、盒马、菜鸟、点淘、淘宝特价版、大麦、淘票票、灯塔专业版共 11 款 App 的鸿蒙原生应用开发。</p><p><img height="250" src="https://oscimg.oschina.net/oscnet/up-79a1bd1023d178ca73674a0adce6feda9f3.png" width="500" referrerpolicy="no-referrer"></p><p>据了解，此前，钉钉、高德、淘宝、UC 浏览器、夸克等 app 应用已率先启动鸿蒙原生应用的开发。此次合作，更是覆盖电商、新零售、本地生活、旅游服务、文化娱乐等多个领域，极大丰富了鸿蒙生态的应用版图。双方强强联合，将满足用户在全场景下的多元化需求，为用户提供更加流畅、智能、安全的服务体验。</p><p>基于鸿蒙系统的生态，上述 11 款 app 应用能更好地实现跨设备、跨平台的数据共享和任务协同，提升用户体验，同时获得更精准的服务分发。其次，鸿蒙系统中有元服务和原生应用等多种形态，在合适的时机为用户提供服务，助力应用实现更高的用户转化率，更有效地吸引和留住用户。值得一提的是，鸿蒙系统支持一次开发、多端部署，这意味着开发者只需要编写一次代码，就可以在多个终端设备上部署和运行应用，对于阿里集团这种拥有多个重要应用的公司来说，降低了开发成本和时间，提高开发效率。</p><p>据悉，鸿蒙生态已进入第二发展阶段，如今，已有众多来自各行各业的头部伙伴启动鸿蒙原生应用开发。未来，华为将与更多伙伴及开发者携手，加速千行百业的应用鸿蒙化，共建鸿蒙花园。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 06:33:10 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283192</guid>
            <link>https://www.oschina.net/news/283192</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openKylin 出席 2024 玄铁 RISC-V 生态大会 ，最新生态成果公布！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span>3 月 14 日，以「开放·连接」为主题的 2024</span><span style="color:var(--weui-LINK)">达摩院</span><span>「玄铁 RISC-V 生态大会」在深圳精彩开幕。作为开年首场 RISC-V 产业国际化盛会，openKylin 社区受邀出席，与来自全球的多位产业专家、知名学者、企业决策者以及 RISC-V 社区开发者等产学研各界汇聚一堂，共同见证、参与并推动 RISC-V 生态的多元融合。</span></span></p><p><span style="color:#0052ff"><strong>openKylin 强「芯」助基，助力 RISC-V 生态建设发展</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span><strong><span style="color:#000000">openKylin 社区生态委员会主任李震宁</span></strong></span><span style="color:#000000">受邀出席大会并做《openKylin 强「芯」助基，助力 RISC-V 生态建设发展》主题分享。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-67e03253c61c35c82a4f923605434ffdc7e.jpg" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><span>当前，RISC-V 的发展进入了高性能和软硬件生态加速发展的新阶段。openKylin 作为中国领先的</span><span style="color:var(--weui-LINK)">开源操作系统</span><span><span>根社区，自成立起，就十分关注并持续投入 RISC-V 架构生态建设，从源码级别自主构建了 RISC-V 开源桌面操作系统版本，并已适配完成市场主流的 RISC-V 硬件平台。同时，与玄铁、钉钉等软硬件厂商开展深入合作，首次支撑实现了商用 IM（即时通讯）的顺滑体验。此外，社区研发团队还基于 RISC-V</span><span style="color:var(--weui-LINK)">指令集</span><span><span>和 GPU 优化了 UKUI 桌面环境，提升用户使用体验，并通过适配 openKylin 自研软件、上游</span><span style="color:var(--weui-LINK)">开源软件</span><span>等常用软件，满足了用户的基本使用需求。</span></span></span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="1243" src="https://oscimg.oschina.net/oscnet/up-3b910fb2918f4b7d00de8316e0f70881952.jpg" width="2211" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">在此基础上，</span><strong><span style="color:#000000">基于玄铁 C910 处理器+openKylin 操作系统的基础平台，联合福昕鲲鹏、上海韬略，于近期</span></strong><strong><span style="color:#000000">成功完成了</span></strong></span><span style="color:#000000"><strong><span><span>福昕</span><span style="color:var(--weui-LINK)">OFD</span><span>版式办公套件软件</span></span></strong><strong><span>和</span></strong><strong><span>搜狗输入法</span></strong><strong><span>在 op</span></strong></span><span><strong><span style="color:#000000">enKylin RISC-V 版本上的迁移工作，这也是</span></strong></span><span style="color:#0052ff"><strong><span style="color:#0052ff">国际上</span></strong></span><span style="color:#0052ff"><strong><span>首次<span style="color:#0052ff"><strong><span>实现</span></strong></span>RISC-V 架构系统上办公套件和输入法的成功迁移</span></strong></span><span><strong><span style="color:#000000">，</span></strong></span><span style="color:#000000">其相关成果也将逐步合并到 openKylin 2.0 版本中。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p><span style="color:#0052ff"><strong>展示区：openKylin RISC-V 最新生态成果体验</strong></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">在大会展区，<strong>openKylin 社区技术委员会委员王文竹博士</strong><strong>带领 RV 版本团队</strong>出席本次会议，为嘉宾和开发者介绍了 openKylin 在玄铁系列产品上的最新进展，包括 openKylin 对玄铁硬件产品的全面适配优化、openKylin 自研应用软件、福昕 pdf 和搜狗输入法商业软件的最新移植成果等，以及 openKylin 对 RISC-V 开发者的支持，包括编程开发环境、AI 框架和基础库等，充分展示了 openKylin 社区在 RISC-V 生态发展中所取得的成绩，<span style="color:#000000">获得了现场参会者的高度关注和好评。</span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="1500" src="https://oscimg.oschina.net/oscnet/up-9ff8d56383f07d8e814b04fa8af7caa1f4b.jpg" width="2250" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000"><span style="color:#000000">众多开发者和伙伴围聚展台前咨询互动，深入了解 openKylin 社区，交流开源技术，并申请</span><span style="color:#000000">签署 CLA</span><span style="color:#000000">加入</span><span style="color:#000000">社区</span><span style="color:#000000">，</span><span style="color:#000000">畅享开源乐趣。</span></span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="color:#000000">开放连接促生态，技术交流共进步。未来，openKylin 社区将在 RISC-V 领域持续发力，打牢操作系统基座，联合更多产、学、研、用伙伴，推动软件发展技术创新，从可用到好用构筑 RISC-V 架构新生态，为用户及开发者创造全新体验及价值。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 05:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283188</guid>
            <link>https://www.oschina.net/news/283188</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AMD 开源 HIP Ray-Tracing]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">AMD <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgpuopen.com%2Fhiprt%2F" target="_blank">宣布</a>在 MIT 许可下正式开源 HIP Ray-Tracing (HIP RT)。HIP RT 是适用于 HIP 的光线跟踪库，可轻松在 HIP 中编写光线跟踪应用程序。其 API 和库被设计得非常简约，且易于使用并集成到任何现有的 HIP 应用程序中。</span></p><p><span style="color:#000000">目前，HIP RT 项目仓库中只包含了一次 commit —— 即，将所有 HIP RT 2.3 源文件进行了上传。而 GPUOpen 官网上现在显示的最新版本是于去年 12 月份发布的 HIP RT v2.2.0e68f54。</span></p><p><img height="252" src="https://oscimg.oschina.net/oscnet/up-495ab9ed99792b60558f96af11223340ea3.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><strong>要求</strong></span></p><p><span style="color:#000000">HIP RT 可在 AMD 和 NVIDIA GPU 上运行。HIP 和 CUDA API 是动态加载的，因此如果用户在驱动程序软件包中安装了这些 dll，则无需安装这些 SDK。硬件加速光线追踪仅适用于 RDNA 2 GPU（Radeon RX 6000 系列或更新版本）。</span></p><p><span style="color:#000000">支持的 AMD GPU 架构系列包括：</span></p><ul><li><span style="color:#000000">Navi3x (Radeon RX 7000 系列)</span></li><li><span style="color:#000000">Navi2x (Radeon RX 6000 系列)</span></li><li><span style="color:#000000">Navi1x (Radeon RX 5000 系列)</span></li></ul><p><span style="color:#000000">此外，还需要 AMD 软件： Windows 下需要 Adrenalin Edition 23.30 或更高版本，Linux 下需要 ROCm 5.7。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 05:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283187/amd-hip-ray-tracing</guid>
            <link>https://www.oschina.net/news/283187/amd-hip-ray-tracing</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[80 岁图灵奖得主再度出山，打造基于数据库的云原生操作系统 DBOS]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>数据库领域一共出了四位图灵奖获得者，按照先后顺序分别是：</p><ol><li>开创数据库品类的 Charles Bachman</li><li>发明数据库关系模型的 Edgar F. Codd</li><li>实现第一个关系型数据库系统 System R，引入 ACID 的 Jim Gray</li><li>以及本文的主人公 Michael Stonebraker，也是唯一健在的一位</li></ol><p>Stonebraker 教授之前在伯克利，现在在 MIT。他主要的贡献来自于两方面，一方面是在数据库理论上，引入对象概念，如今知名的 PostgreSQL 数据库的前身就是他发起的 Ingres 项目。Postgres 既是 Post-Ingres，后来加上了 SQL 层，才变成了今天的 PostgreSQL。另一方面是在工业界的实践，教授是一名连续创业者。最早基于 Postgres 工作创立了 Illustra，卖给了当年的数据库巨头 Informix。后来又先后创立了 Vertica 以及 VoltDB。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b5045fa7057d6a40319508573b8925b9496.png" alt="file" referrerpolicy="no-referrer"></p><p>本来以为教授该颐养天年了，没想到以 80 岁高龄，再度出山。这次老爷子还跨界了，把手伸到了操作系统领域，要把操作系统建在数据库上。通常的认知里，数据库是建在操作系统之上的，而教授则要乾坤反转。大概是下面这个架构。</p><p><img src="https://oscimg.oschina.net/oscnet/up-42e08249dfc21af8b69346e4b5ef17e7b91.png" alt="file" referrerpolicy="no-referrer"></p><p>来是一张更加具体的图。</p><p><img src="https://oscimg.oschina.net/oscnet/up-47524f2503a534fa17981498352e707952f.png" alt="file" referrerpolicy="no-referrer"></p><p>是不是还是有点抽象，那就看下面这个例子，来自 IBM 古早的 AS/400 大型机。是的，这个架构在很早的 IBM 大型机里就有了。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2cbddd7b80375d623c6e0dede7d0c9ad1c0.png" alt="file" referrerpolicy="no-referrer"></p><p>上面这张图是文件目录，PEOPLE 是一个文本文件。QCSRC 也是一个文本文件，不过是代码文件。而 HELLOWORLD 则是通过 QCSRC 编译出的程序。这个看上去和我们现在熟悉的文件目录类似，但其实这是一张数据库的表，为什么这么说，我们看下面这张图。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f2c15421e30bf609b34c51add752e3dc7b1.png" alt="file" referrerpolicy="no-referrer"></p><p>我们打开了 QCSRC 的源代码文件，展示了 Hello world 的 C 代码。但是这个打开的方式，不是 open file.c。而<strong>用的是 SQL 语言 SELECT * FROM qcsrc</strong>。仔细看的话，这其实是一样表，每一行就是表的数据行。</p><p><img src="https://oscimg.oschina.net/oscnet/up-79b626defb31117d9f38591d7e9fb5eaf82.png" alt="file" referrerpolicy="no-referrer"></p><p>因为是一张表，所以我们<strong>也可以用 SELECT * FROM qcsrc ORDER BY scrdta 打开</strong>，这时你会看到行重新排列了。</p><p>作为当年的卧龙凤雏，IBM 之外，微软也曾经动过这个念头。微软历史上 WinXP 大获成功，而之后发布的 Vista 不仅大大延期，发布后还差评一片。其实在 WinXP 和 Vista 之间还有一个被砍掉的操作系统，代号 longhorn。配合 longhorn 还准备开发一个叫做 WinFS (Windows Future Storage) 的全新存储系统。</p><p><img src="https://oscimg.oschina.net/oscnet/up-25995587986a177fde062481aa3626c1520.png" alt="file" referrerpolicy="no-referrer"></p><p>WinFS 看名字就知道被寄托了很大的希望，它的愿景来自于比尔盖茨，要把 WinFS 构建在 SQL Server 上，让 Windows 也能做类似于 AS/400 那样的操作。当然随着 longhorn 的破产，WinFS 项目也就嘎然而止了。</p><p>DBOS 故名思义，基于 DB 的 OS，就是把数据库作为操作系统的底层，这样操作系统就获得了数据库的特性。比如事务性。像下面这个例子是确保一个客户下单流程的事务性，可以处理各种异常情况。</p><p><img src="https://oscimg.oschina.net/oscnet/up-349fac505d65c405dd86f3042e734d47142.png" alt="file" referrerpolicy="no-referrer"></p><p>本来在应用层要妥善处理这样涉及多个外部系统的工作流，会非常复杂。也诞生了像 Temporal 这样专门解决这个问题的独角兽公司。</p><p><img src="https://oscimg.oschina.net/oscnet/up-356b8a52d36fec47290b059c124445d0343.png" alt="file" referrerpolicy="no-referrer"></p><p>除了给操作系统原生的数据库能力之外，DBOS 的另一个目标是做一个云原生的操作系统。现在的操作系统都是面向单机的，然后在应用层用 Kubernetes 把这些单机的操作系统糊在一起。如果我们把分布式，调度直接做到操作系统里的话，就不需要 Kubernetes 了。而分布式，调度这些正是分布式数据库的拿手好戏。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b06408811aa2cd9e69ae1b23d0944d300ad.png" alt="file" referrerpolicy="no-referrer"></p><p>DBOS 这个项目 2022 年就启动了，发起者中也有国人。考虑到 Stonebraker 教授的年龄，这也可能是他生涯最后一战。教授乃是性情中人，当年 NoSQL 风头正劲，大有要灭了关系型数据库的势头。教授实在看不下去，下场写了篇 what goes around comes around (因果报应)，给大家好好上了堂数据库历史课。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1e998e9061635fdadceb3fcc6d6fe90022e.png" alt="file" referrerpolicy="no-referrer"></p><p>这次 DBOS 的愿景和商业落地难度还要远超教授之前的 Vertica 和 VoltDB。但作为数据库领域当世第一战神，干就是了！</p><p><img src="" alt="Uploading file..." referrerpolicy="no-referrer"></p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 05:48:07 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/11047444</guid>
            <link>https://my.oschina.net/u/6148470/blog/11047444</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Spring Boot 3.2.3 中文参考指南重磅发布：全面助力您的 Spring 开发之旅]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h3><strong>简介</strong></h3><p style="color:#e3e3e3; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Spring Boot 3.2.3 已正式发布，全新的中文参考指南也同步上线，为广大中国开发者提供更全面、更便捷的 Spring 开发指南。该指南涵盖了 Spring Boot 3.2.3 的所有核心功能和特性，并结合中文示例和最佳实践，帮助开发者快速上手 Spring Boot 开发。</span></p><h3><strong>指南亮点</strong></h3><ul><li><strong>全面覆盖：</strong><span>&nbsp;</span>涵盖 Spring Boot 3.2.3 的所有核心功能和特性，包括 Web 开发、数据访问、安全、测试等。</li><li><strong>深入解析：</strong><span>&nbsp;</span>深入剖析每个功能和特性的原理和使用方法，并提供丰富的代码示例和图表说明。</li><li><strong>最佳实践：</strong><span>&nbsp;</span>提供 Spring Boot 开发最佳实践，帮助开发者打造高性能、可维护的应用程序。</li><li><strong>中文本土化：</strong><span>&nbsp;</span>采用易懂的中文翻译和文档结构，方便中国开发者阅读和理解。</li></ul><h3><strong>指南价值</strong></h3><ul><li><strong>快速入门：</strong><span>&nbsp;</span>帮助开发者快速学习 Spring Boot 的核心知识和使用方法，并开始构建 Spring Boot 应用程序。</li><li><strong>深入学习：</strong><span>&nbsp;</span>帮助开发者深入理解 Spring Boot 的底层原理和设计思想，提升开发效率。</li><li><strong>经验分享：</strong><span>&nbsp;</span>学习和借鉴 Spring Boot 开发最佳实践，打造高质量、高可靠的应用程序。</li></ul><h3><strong>获取指南</strong></h3><p style="color:#e3e3e3; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Spring Boot 3.2.3 中文参考指南现已上线，您可以通过以下方式获取：</span></p><ul><li><strong>在线阅读：</strong><span>&nbsp;</span>在 Spring Boot 中文文档: [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcunzaima.cn" target="_blank">存在码</a>] 网站上阅读在线版本。</li></ul><h3><strong>结语</strong></h3><p style="color:#e3e3e3; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000">Spring Boot 3.2.3 中文参考指南的发布，将进一步降低中国开发者学习 Spring Boot 的门槛，助力更多开发者加入 Spring 生态，共同打造更加繁荣的 Java 开发环境。</span></p><p style="color:#e3e3e3; margin-left:0; margin-right:0; text-align:start"><img align="left" height="400" src="https://cunzaima.cn/logo.jpg" width="400" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 05:35:07 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283184</guid>
            <link>https://www.oschina.net/news/283184</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报 | 英特尔获准继续向华为出售芯片；明年 AI 将比任何人都聪明]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#e67e22"><strong># 2024.3.14</strong></span></h3><h2 style="margin-left:0; margin-right:0; text-align:left"><strong><span style="color:#16a085">今日要点</span></strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>OpenSource Daily</strong></p><h3 style="margin-left:0; margin-right:0; text-align:left"><strong><a href="https://www.oschina.net/news/283003/ktor-roadmap-for-2024" target="_blank">JetBrains 公布 Ktor 2024 路线图</a></strong></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">JetBrains 公布了 Ktor 的 0224 年开发路线图。项目团队将致力于在每个新版本中提高所提供功能的质量和性能，同时扩展 Ktor 插件生态系统。此举将涉及引入新插件来简化现有用例（例如事务处理）并添加对新用例（例如 Observability 和 gRPC）的支持。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">在改进核心产品的同时，还将为用户提供更轻松的开发体验。使插件生态系统更易于使用，并消除社区贡献的障碍。以及致力于提高所提供文档的范围、质量和多样性。并利用 Kotlin Multiplatform (KMP) 的稳定性和不断发展的多平台库生态系统，让 Ktor 开发人员能够享受到 KMP 的优势，创建多平台应用程序。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="281" src="https://oscimg.oschina.net/oscnet/up-085d99ec88e786fe7765205a2d60852b18c.png" width="500" referrerpolicy="no-referrer"></p><h3 style="margin-left:0px; margin-right:0px; text-align:start"><strong><a href="https://www.oschina.net/news/283043/linux-6-9-bcachefs-attempt" target="_blank">Linus Torvalds 不满 Linux 6.9 中的一些 Bcachefs 代码</a></strong></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Linus Torvalds 在，回 应，相 关 PR 时，表 示 ： 「 我，看 了，看 'make randombcachefs codebealibrary function' 的内容，觉得毫无意义，最终决定在没有进一步解释的情况下我不会使用它（老实说，我不认为这些解释站得住脚）。」</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#000000">并直言 "stdio_redirect_printf ()" 和 darray_char 都很 「恶心」。建议 Overstreet 将其保留在自己的代码中就好，不要试图提交上来。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="318" src="https://oscimg.oschina.net/oscnet/up-87349de7cf38ec24e77d98c8c7165c68d31.png" width="500" referrerpolicy="no-referrer"></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><strong><span style="color:#16a085">今日观察</span></strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="129" src="https://oscimg.oschina.net/oscnet/up-951630ba9bded13190b3230241a09bf8d1e.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">- 微博 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7327831653%2FO4XqOeiT7%3Frefer_flag%3D1001030103_" target="_blank"><em><u>呆哥说数码</u></em></a></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="117" src="https://oscimg.oschina.net/oscnet/up-36f67e3ac79e16d93e738e920b56bfcb229.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">-<span>&nbsp;</span></span><u><em>I</em></u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fai.it168.com%2Fa2024%2F0314%2F6842%2F000006842281.shtml" target="_blank"><u><em>T168</em></u></a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="117" src="https://oscimg.oschina.net/oscnet/up-3bd84c97f3cb00eeb0401a9c71f714049bd.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">-&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2Ftech%2F2024-03-14%2Fdetail-inanfxxv9807142.d.html%3Ffromtech%3D1" target="_blank"><em><u>快科技</u></em></a></span></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#16a085"><strong>今日推荐</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="405" src="https://oscimg.oschina.net/oscnet/up-76f71686b627fed56c16a9ad502002fda05.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fdevicescript" target="_blank">https://github.com/microsoft/devicescript</a></u></em></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#16a085"><strong>事件点评</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="520" src="https://oscimg.oschina.net/oscnet/up-3ca34c464e1495c52cf676a4e263bee9b05.png" width="500" referrerpolicy="no-referrer"></p><hr><h2 style="margin-left:0; margin-right:0; text-align:left"><span style="color:#16a085"><strong>每日项目榜</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong><span style="background-color:#e67e22">每日 GitHub 精选</span></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="649" src="https://oscimg.oschina.net/oscnet/up-a8ef0d6a166332894be59186a1274bcba18.png" width="500" referrerpolicy="no-referrer"></p><blockquote><h4 style="margin-left:0; margin-right:0"><strong><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span></strong><br><em><u><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/71npja41p7l4ojy/29_risc_v_ai_smart_B3RnKR88Kl.pdf" target="_blank">开源日报第 029 期：英特尔获准继续向华为出售芯片；明年 AI 将比任何人都聪明</a></u></em></h4></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>往期回顾</strong></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/q35lx4s6qq9ls4r/28_cognition_labs_devin_Epbxne3xzN.pdf" target="_blank">开源日报第 028 期：全球首位 AI 软件工程师 Devin；谷歌承认 「窃取」 OpenAI 模型关键信息</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/hh291xp9mxksc9i/27_ai_google_50_gpt_4_KfagjDXXfZ.pdf" target="_blank">开源日报第 027 期：AI 接连翻车的 Google 要变天了；互联网大厂 50 款大模型及应用，能否全面超越 GPT-4？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/uwsizmmsnhq8zdk/26_git_hub_22_web_os_22_vue_rolldown_FpVykoR7rJ.pdf" target="_blank">开源日报第 026 期：大模型替代程序员根本就是一个伪命题；GitHub 顶流 "Web OS"</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6ho57sxydzsh9jh/25_ai_5_ax1LWz5GP5.pdf" target="_blank">开源日报第 025 期：买手机送大模型；「钓鱼式维权」 须遏制；「AI 原生」 骗局江湖</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7xd6teyhekcvamw/24_risc_v_x86_arm_5LsjoStPUn.pdf" target="_blank">开源日报第 024 期：RISC-V 能否和 x86、Arm 一起成为三大主流架构；给阎王开发地府管理系统</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/svxac61bjmbmmw5/23_google_microsoft_cM5zZacKru.pdf" target="_blank">开源日报第 023 期：Google = 开源，好评；Microsoft = 闭源收入还低，差评</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/3vmzfjvp7mpvv26/22_sora_cuda_Syy7OJyUvc.pdf" target="_blank">开源日报第 022 期：轻松复现 Sora 模型；事关 CUDA 兼容，英伟达禁止了；百度还差一个 「遥遥领先」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/z3rhs3qkyeqwoax/21_open_ai_JROaEZat3b.pdf" target="_blank">开源日报第 021 期：闭源模型就是比开源安全；起诉 OpenAI 不能更赞同</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/lv84pwvd03it00i/20_open_ai_pingora_yaml_mE5RuB20Vl.pdf" target="_blank">开源日报第 020 期：为什么王炸都来自 OpenAI；Pingora 最好不要用 YAML 当配置文件</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/mx86z1dhywrw71p/19_ai_c_llm_IgpNOVZtCz.pdf" target="_blank">开源日报第 019 期：我让 AI 用 C 语言写一个算法；微软三进制 LLM</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/qdljicvqiqsshd6/187ZiLwG48lc_CngfQJ1Qxs.pdf" target="_blank">开源日报第 018 期：苹果十年造车梦碎；这个开源项目有点...「大胆」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7r8dkz3232v4e7a/17_maria_db_v_linux_GoyNoM85IZ.pdf">开源日报第 017 期：MariaDB 消亡史；写代码我有三不沾；V 神建议马斯克用 Linux</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6typ9w3u98f5mxn/16_1_8_2efTeNfFjN.pdf">开源日报第 016 期：鸿蒙程序员平均月薪超 1 万 8；中美 AI 差距有多大？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/92n4c9ryegpcq1z/015_sora_KcAkRNX93Y.pdf">开源日报第 015 期：为什么挡不住英伟达；Sora 不靠蛮力</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/s7n800w84o6guyv/014_kyezhNxOGD.pdf">开源日报第 014 期：目前的人工智能技术连猫的智能水平都没达到</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC013%E6%9C%9F%EF%BC%9A%E7%AD%89%E5%88%B0%20Sora%20%E5%BC%80%E6%BA%90%E4%BA%86%E7%AB%8B%E5%88%BB%E6%8E%A8%E5%87%BA%E5%B1%9E%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B.pdf">开源日报第 013 期：等到 Sora 开源了立刻推出属于我们自己的大模型</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC012%E6%9C%9F%EF%BC%9ASora%20%E7%BB%99%E4%B8%AD%E5%9B%BD%20AI%20%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%8F%98%E5%8C%96%EF%BC%9BDart%203.3%20%E5%8F%91%E5%B8%83.pdf">开源日报第 012 期：Sora 给中国 AI 带来的真实变化；Dart 3.3 发布</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC11%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有 「大模型版 Linux」</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></li><li><a href="https://www.oschina.net/news/277585">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></li><li><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></li><li><a href="https://www.oschina.net/news/277214">开源日报第 006 期：选择技术栈一定要选择开源的</a></li><li><a href="http://www.oschina.net/news/277040">开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</a></li><li><a href="https://www.oschina.net/news/276864">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 03:22:50 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283165</guid>
            <link>https://www.oschina.net/news/283165</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024 年人工智能安全报告 —— AI 技术是把双刃剑]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#060607">奇安信近期发布了《2024 年人工智能安全报告》，主要探讨了人工智能（AI）技术在恶意活动中的应用，以及这些应用对网络安全、物理安全、政治安全和军事安全等方面的潜在威胁。</span></p><p><span style="background-color:#ffffff; color:#060607"><img alt="" height="396" src="https://static.oschina.net/uploads/space/2024/0315/104716_Of71_4700705.png" width="300" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#060607">以下是报告的核心内容概要：</span></p><h3 style="text-align:start">1. AI 的定义和科技变革</h3><ul><li>AI 技术被定义为能够执行智能任务的计算机系统，包括学习、推理、感知等能力。</li><li>AI 技术的发展带来了效率提升、决策支持、新服务和产品创造、解决复杂问题和提升生活质量等多方面的变革。</li><li>AI 技术的应用范围广泛，从自动驾驶汽车到智能助手，再到医疗诊断和金融预测等。</li></ul><h3 style="text-align:start">2. AI 滥用风险</h3><ul><li>AI 技术的恶意使用可能导致政治安全、网络安全、物理安全和军事安全等方面的威胁。</li><li>报告显示，基于 AI 的深度伪造和钓鱼邮件数量急剧增长，国家背景的 APT 组织利用 AI 实施网络攻击。</li><li>AI 武器化趋势显现，可能导致道德和法律问题，如责任归属和国际人道法的遵守。</li></ul><h3 style="text-align:start">3. AI 普及引入的威胁</h3><ul><li><strong>深度伪造</strong>：利用 AI 合成图像、音频和视频，用于虚假新闻、操纵舆论等。</li><li><strong>黑产大语言模型基础设施</strong>：如 WormGPT 和 FraudGPT，用于网络钓鱼、恶意软件制作等。</li><li><strong>自动化攻击</strong>：AI 帮助攻击者发现漏洞、定制攻击和绕过安全措施。</li><li><strong>AI 武器化</strong>：AI 增强自主武器系统，可能在无人控制下攻击目标。</li><li><strong>LLM 安全风险</strong>：大语言模型可能存在提示注入、数据泄漏等安全风险。</li><li><strong>恶意软件</strong>：AI 增强的恶意软件更难被检测，更具破坏力。</li><li><strong>钓鱼邮件</strong>：AI 技术提高钓鱼邮件的真实性和针对性。</li><li><strong>口令爆破</strong>：AI 技术提高口令爆破的效率和成功率。</li><li><strong>验证码破解</strong>：AI 技术用于识别和解析验证码，绕过安全机制。</li><li><strong>社会工程学技术支持</strong>：AI 用于语音克隆、文本生成，提高社会工程攻击的成功率。</li><li><strong>虚假内容和活动的生成</strong>：AI 生成虚假新闻、社交媒体帖子，用于舆论操控。</li><li><strong>硬件传感器相关威胁</strong>：针对自动驾驶车辆的传感器进行攻击，可能导致安全事故。</li></ul><h3 style="text-align:start">4. 当前状况总结</h3><ul><li>恶意行为者正在利用 AI 技术加强攻击策略，提高攻击成功率。</li><li>AI 技术推动了安全范式的变革，需要启动人工智能网络防御推进计划。</li></ul><h3 style="text-align:start">5. 应对措施建议</h3><ul><li><strong>安全行业</strong>：提升 AI 安全性，开发安全工具，监测 AI 恶意使用案例。</li><li><strong>监管机构</strong>：建立沟通平台，探索开放模式，创建和推广安全制度。</li><li><strong>政企机构</strong>：部署 AI 安全框架和解决方案，教育和培训员工，推动安全技术创新。</li><li><strong>网络用户</strong>：保持警惕，强化密码管理，启用双因素认证，保持软件更新，安装安全软件，备份数据，加密通信，保护个人隐私，定期培训。</li></ul><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">报告强调了 AI 技术的双刃剑特性，以及对 AI 技术滥用的监管和治理的重要性。同时，提出了多方面的建议，以应对 AI 技术可能带来的安全挑战。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">报告详情可至<strong><span style="color:#333333"><span style="background-color:#f39c12">「开源中国 APP - 报告模块」</span></span></strong>查看。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">APP 下载地址：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="300" src="https://oscimg.oschina.net/oscnet/up-8ab7bb9f45ecaae87f7a862ea446ae1dacf.png" width="300" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>（<em>目前仅提供 Android 版本）</em></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 02:47:50 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283161</guid>
            <link>https://www.oschina.net/news/283161</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Intel 6.2GHz 限量旗舰 i9-14900KS 正式发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Intel 正式发布了酷睿 14 代家族的顶级限量版本，酷睿 i9-14900KS，国行定价 6299 元。它在历史上第一次将 PC 处理器的加速频率做到了惊人的 6.2GHz，比上代限量版 i9-13900KS 又高出 200MHz。</p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-31771afaf5580581d60e2cfd9446465afea.png" width="500" referrerpolicy="no-referrer"></p><p><img height="272" src="https://oscimg.oschina.net/oscnet/up-3349dddd8640fa732924019627a31b6f3c8.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="269" src="https://oscimg.oschina.net/oscnet/up-2223cd7c410d1d6eec8f6d01abf597a85d9.webp" width="500" referrerpolicy="no-referrer"></p><p>i9-14900KS 可以看作是 i9-14900K 的特挑加速版，同样都是 8P+16E 24 核心 32 线程、32MB 二级缓存、36MB 三级缓存、UHD 770 核芯显卡，内存支持 DDR4-3200、DDR5-5600，最大容量 192GB，扩展支持 16 条 PCIe 5.0、4 条 PCIe 4.0，兼容 Z690、Z790 主板。</p><p>变化的是频率和功耗。</p><p>P 核基础频率还是 3.2GHz，睿频 2.0 最高频率还是 5.6GHz，睿频 Max 3.0 最高频率从 5.8GHz 提高到 5.9GHz，TVB 自适应睿频的最高频率从 6.0GHz 来到 6.2GHz。</p><p>E 核基础频率维持在 2.4GHz，最大睿频从 4.4GHz 增至 4.5GHz。</p><p>基础功耗从 125W 增加到 150W，但是最大睿频功耗继续标称 253W，只是实测会远高于此，已经达到了 432W。</p><p><img height="272" src="https://oscimg.oschina.net/oscnet/up-3cb48a2d218b2a83431865d27225b0265c1.png" width="500" referrerpolicy="no-referrer"></p><p>借着 i9-14900KS 正式发布的机会，Intel 再次更新了 APO 游戏优化器技术的情况。</p><p>迄今为止，Intel APO 支持的游戏已经达到 14 款，其中 12 款是近期新验证的，官方测试可免费带来多达 11％的性能增益 (有实测甚至可达 31％)。</p><p>Intel 此前曾确认，APO 技术会下放给 12/13 代酷睿，但尚未落地。</p><p><img height="282" src="https://oscimg.oschina.net/oscnet/up-48bd11bb2e62b5266bb8800c75722d86bd0.png" width="500" referrerpolicy="no-referrer"></p><p><img height="276" src="https://oscimg.oschina.net/oscnet/up-34955962f681689b7e680ef584e1f15b3d1.png" width="500" referrerpolicy="no-referrer"></p><p><img height="276" src="https://oscimg.oschina.net/oscnet/up-a086b7e488f812601bdc47bb31dfdd17bc6.png" width="500" referrerpolicy="no-referrer"></p><p><img height="278" src="https://oscimg.oschina.net/oscnet/up-610215b185f9d43c39257c3c5e6d8473b8f.png" width="500" referrerpolicy="no-referrer"></p><p><img height="274" src="https://oscimg.oschina.net/oscnet/up-01d84d8924afbfd9ade0bd7dd1d328fb1c7.png" width="500" referrerpolicy="no-referrer"></p><p>Intel 还公布了 i9-14900KS 的一些性能对比数据，包括上一代 i9-13900KS，以及竞品的锐龙 9 7950X3D、锐龙 9 7950X、锐龙 7 7800X3D。</p><p><em>来源：快科技</em></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 02:41:50 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283159</guid>
            <link>https://www.oschina.net/news/283159</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[joshuto —— Rust 编写的终端文件管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>joshuto 是一个用 Rust 编写的类似 ranger 的终端文件管理器。</p><p><img alt="" height="275" src="https://static.oschina.net/uploads/space/2024/0315/103323_Sf0W_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:start"><strong>特性：</strong></p><ul><li>Tabs</li><li>Devicons</li><li><a href="https://github.com/junegunn/fzf">通过 fzf</a>&nbsp;进行模糊搜索</li><li>Ctrl/Shift/Alt 支持</li><li>批量重命名</li><li>文件预览
	<ul><li>有关详细信息，参阅<a href="https://github.com/kamiyaa/joshuto/blob/main/docs/image_previews.md">Image 预览</a></li></ul></li><li>退出到当前目录</li><li>异步文件 IO（剪切/复制/粘贴）</li><li>自定义颜色/主题</li><li>行号
	<ul><li>跳转到号码</li></ul></li><li>文件选择器</li><li>Trash 支持</li></ul><p style="text-align:start"><strong>Dependencies</strong></p><ul><li><a href="https://github.com/rust-lang/cargo/">cargo</a><span>&nbsp;</span>&gt;= 1.55</li><li><a href="https://www.rust-lang.org/">rustc</a><span>&nbsp;</span>&gt;= 1.55</li><li>xsel/xclip/wl-clipboard (可选，用于支持剪贴板)</li><li>fzf (可选)</li><li>zoxide (可选)</li></ul><p style="color:#1f2328; text-align:start">也可参见<span>&nbsp;</span><a href="https://github.com/kamiyaa/joshuto/blob/main/Cargo.toml">Cargo.toml</a>。</p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 02:32:50 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/joshuto</guid>
            <link>https://www.oschina.net/p/joshuto</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | Java 代码实现调用 RapidOCR RapidOcr-Java]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-rapidocr-java" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#rapidocr-java"></a>RapidOcr-Java</h1><p><img src="https://gitee.com/lc_monster/rapid-ocr-java/raw/main/docs/img/line.png" alt="" referrerpolicy="no-referrer"></p><h2><a id="user-content--项目起源" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#-%E9%A1%B9%E7%9B%AE%E8%B5%B7%E6%BA%90"></a>😺 项目起源</h2><ul><li>现有的 JavaOCR 工具包识别效果差强人意，<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FPaddlePaddle%2FPaddleOCR">PaddleOCR</a>在实现前沿算法的基础上，考虑精度与速度的平衡，进行模型瘦身和深度优化，使其尽可能满足产业落地需求。</li><li>PaddleOCR 官方并未提供 Java 版本，而<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FRapidAI%2FRapidOCR">RapidOcr</a>解决了这个问题，其提供了 Kotlin 和 Java 混合版本的<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FRapidAI%2FRapidOcrOnnxJvm">Demo-onnx</a>和<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FRapidAI%2FRapidOcrNcnnJvm">Demo-ncnn</a></li><li>而实际使用过程中，项目中并<strong>不想再引入 Kotlin、不想了解 OCR 相关知识，开箱即用、不想额外再部署 OCR 服务</strong></li></ul><p>因此本项目将 Kotlin 部分移除，并在此基础上加以完善且提供了更友好的的调用方法，更方便 java 开发者直接进行使用。</p><blockquote><p>✨如果该项目对您有帮助，您的 star 是我不断优化的动力！！！</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2FRapidOcr-Java">github 点击前往</a></li><li><a href="https://gitee.com/lc_monster/rapid-ocr-java">gitee 点击前往</a></li></ul></blockquote><h2><a id="user-content--项目特点" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#-%E9%A1%B9%E7%9B%AE%E7%89%B9%E7%82%B9"></a>👏 项目特点</h2><ul><li>纯 Java 代码调用 RapidOcr</li><li>集成 ncnn 和 onnx 推理引擎方式</li><li>均使用 CPU 版本，GPU 版本请自行编译</li><li>支持 Mac、Windows、Linux 等多平台，详细支持的系统请查看<a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/ADVANCED.md">版本说明</a></li></ul><h2><a id="user-content--快速开始" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#-%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B"></a>🎉 快速开始</h2><p>项目提供了<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2Frapidocr-demo%2Ftree%2Fmain%2Fjava-ee">JavaEE</a> 和 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2Frapidocr-demo%2Ftree%2Fmain%2Fspring-boot">SpringBoot</a> 的使用 Demo，仅作参考（可以拉取下来运行试一下）</p><h3><a id="user-content-1️⃣-添加依赖" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#1%EF%B8%8F%E2%83%A3-%E6%B7%BB%E5%8A%A0%E4%BE%9D%E8%B5%96"></a>1️⃣ 添加依赖</h3><p>此种方式会根据你使用的系统自动使用对应的 jar 包，目前支持的系统请查看<a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/ADVANCED.md">版本说明</a></p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">&lt;!--  rapidocr 这个必须要引入     --&gt;</span></span><span id="LC2" class="line"><span class="c">&lt;!--  可前往 maven 中央仓库 https://repo1.maven.org/maven2/io/github/mymonstercat/rapidocr/，查看版本      --&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;groupId&gt;</span>io.github.mymonstercat<span class="nt">&lt;/groupId&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;artifactId&gt;</span>rapidocr<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;version&gt;</span>0.0.7<span class="nt">&lt;/version&gt;</span></span><span id="LC7" class="line"><span class="nt">&lt;/dependency&gt;</span></span><span id="LC8" class="line"></span><span id="LC9" class="line"><span class="c">&lt;!--  一般只需要引入一个，CPU 端建议使用 onnx，移动端建议使用 ncnn     --&gt;</span></span><span id="LC10" class="line"><span class="c">&lt;!--  可前往 maven 中央仓库 https://repo1.maven.org/maven2/io/github/mymonstercat/，查看版本      --&gt;</span></span><span id="LC11" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC12" class="line"><span class="nt">&lt;groupId&gt;</span>io.github.mymonstercat<span class="nt">&lt;/groupId&gt;</span></span><span id="LC13" class="line"><span class="nt">&lt;artifactId&gt;</span>rapidocr-onnx-platform<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC14" class="line"><span class="nt">&lt;version&gt;</span>0.0.7<span class="nt">&lt;/version&gt;</span></span><span id="LC15" class="line"><span class="nt">&lt;/dependency&gt;</span></span><span id="LC16" class="line"></span><span id="LC17" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC18" class="line"><span class="nt">&lt;groupId&gt;</span>io.github.mymonstercat<span class="nt">&lt;/groupId&gt;</span></span><span id="LC19" class="line"><span class="nt">&lt;artifactId&gt;</span>rapidocr-ncnn-platform<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC20" class="line"><span class="nt">&lt;version&gt;</span>0.0.7<span class="nt">&lt;/version&gt;</span></span><span id="LC21" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-2️⃣-使用示例" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#2%EF%B8%8F%E2%83%A3-%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B"></a>2️⃣ 使用示例</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="kd">public</span><span class="kd">class</span><span class="nc">Main</span><span class="o">{</span></span><span id="LC2" class="line"><span class="kd">public</span><span class="kd">static</span><span class="kt">void</span><span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span><span class="n">args</span><span class="o">)</span><span class="o">{</span></span><span id="LC3" class="line"><span class="nc">InferenceEngine</span><span class="n">engine</span><span class="o">=</span><span class="nc">InferenceEngine</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="nc">Model</span><span class="o">.</span><span class="na">ONNX_PPOCR_V3</span><span class="o">);</span></span><span id="LC4" class="line"><span class="nc">OcrResult</span><span class="n">ocrResult</span><span class="o">=</span><span class="n">engine</span><span class="o">.</span><span class="na">runOcr</span><span class="o">(</span><span class="s">"/images/test.png"</span><span class="o">);</span></span><span id="LC5" class="line"><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ocrResult</span><span class="o">.</span><span class="na">getStrRes</span><span class="o">().</span><span class="na">trim</span><span class="o">());</span></span><span id="LC6" class="line"><span class="o">}</span></span><span id="LC7" class="line"><span class="o">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>更多使用示例请参考<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2Frapidocr-demo%2Fblob%2Fmain%2Fjava-ee%2Fsrc%2Fmain%2Fjava%2Fio%2Fgithub%2Fmymonstercat%2FMain.java">使用示例</a></p></blockquote><h3><a id="user-content-3️⃣-添加打印日志可选" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#3%EF%B8%8F%E2%83%A3-%E6%B7%BB%E5%8A%A0%E6%89%93%E5%8D%B0%E6%97%A5%E5%BF%97%E5%8F%AF%E9%80%89"></a>3️⃣ 添加打印日志 (可选)</h3><p>项目中添加了日志打印，方便打印 OCR 日志，请自行添加日志实现（springboot 自带，可以不用添加）</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">&lt;!-- 非 SpringBoot 项目：例如添加 slf4j-simple     --&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;artifactId&gt;</span>slf4j-simple<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;version&gt;</span>2.0.3<span class="nt">&lt;/version&gt;</span></span><span id="LC6" class="line"><span class="nt">&lt;/dependency&gt;</span></span><span id="LC7" class="line"><span class="c">&lt;!-- SpringBoot 项目：去除依赖，防止冲突     --&gt;</span></span><span id="LC8" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC9" class="line"><span class="nt">&lt;groupId&gt;</span>io.github.mymonstercat<span class="nt">&lt;/groupId&gt;</span></span><span id="LC10" class="line"><span class="nt">&lt;artifactId&gt;</span>rapidocr<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC11" class="line"><span class="nt">&lt;exclusions&gt;</span></span><span id="LC12" class="line"><span class="nt">&lt;exclusion&gt;</span></span><span id="LC13" class="line"><span class="nt">&lt;artifactId&gt;</span>slf4j-api<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC14" class="line"><span class="nt">&lt;groupId&gt;</span>org.slf4j<span class="nt">&lt;/groupId&gt;</span></span><span id="LC15" class="line"><span class="nt">&lt;/exclusion&gt;</span></span><span id="LC16" class="line"><span class="nt">&lt;/exclusions&gt;</span></span><span id="LC17" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>添加后效果如下：</p><p><img src="https://gitee.com/lc_monster/rapid-ocr-java/raw/main/docs/img/run-result.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p>⚠️ 注意：当前 JVM 启动时<strong>只能同时启动一种推理引擎</strong>，以第一次调用 runOcr 方法时的引擎配置为准</p></blockquote><h2><a id="user-content--进阶使用" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#-%E8%BF%9B%E9%98%B6%E4%BD%BF%E7%94%A8"></a>🔝 进阶使用</h2><ul><li><a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/ADVANCED.md">参数调优、版本说明、分支说明</a></li><li><a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/COMPILE_JAR.md">如何打包 jar 包在 Linux 系统上运行</a></li><li><a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/CentOS7.md">如何在 CentOS7 或其他低版本 Linux 系统上运行</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2Frapidocr-demo">SpringBoot 示例和普通 Java 程序示例</a></li><li><a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/COMPARE.md">JVM 下不同 PaddleOCR 调用方式性能比对👍</a></li></ul><h2><a id="user-content--todo" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#-todo"></a>📌 TODO</h2><ul class="task-list"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 根据系统版本自适应加载动态库</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 动态库集成到 jar 中</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 是否删除临时文件夹配置为可选项</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> jvm 未退出场景连续调用识别结果集乱码<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2FRapidOcr-Java%2Fissues%2F1">#1</a></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 集成 ONNX<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2FRapidOcr-Java%2Fissues%2F2">#2</a>，感谢<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fnn200433">nn200433</a>及<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fnn200433%2Ftika-server">tika-server</a>👏</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 添加日志，规范日志打印</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> ONNX 支持 Mac-Arm64</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> 支持 Docker 镜像</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> Maven 仓库提供 packages</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled=""> SpringBoot 下，以配置文件方式改造</li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 多模块打包<a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/%E5%8F%AF%E4%BB%A5%E5%90%A6%E5%B0%86dll%EF%BC%8C%E6%89%80%E4%BB%A5%E8%BF%98%E6%9C%89onnx%E6%96%87%E4%BB%B6%E5%88%86%E5%88%AB%E5%AD%98%E6%94%BE%E8%BF%9Bjar">#6</a></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> 多线程情况下库和模型可能重复加载、编译目标 jdk 版本改为 1.8，感谢<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FFlyInWind1">FlyInWind1</a></li><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="" disabled=""> CentOS7 升级指引</li></ul><h2><a id="user-content--faq" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#-faq"></a>🤔 FAQ</h2><h4><a id="user-content-q1centos7 无法运行" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#q1centos7%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C"></a>Q1:CentOS7 无法运行？</h4><p>请参考<a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/CentOS7.md">CentOS7 升级 GCC</a></p><h4><a id="user-content-q2 如何使用自己编译的动态库和模型" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#q2%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E7%9A%84%E5%8A%A8%E6%80%81%E5%BA%93%E5%92%8C%E6%A8%A1%E5%9E%8B"></a>Q2:如何使用自己编译的动态库和模型？</h4><p>自 0.0.5 版本开始，项目引入了多模块打包，如果不喜欢这种方式，请使用 0.0.4-light</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nt">&lt;dependency&gt;</span></span><span id="LC2" class="line"><span class="nt">&lt;groupId&gt;</span>io.github.mymonstercat<span class="nt">&lt;/groupId&gt;</span></span><span id="LC3" class="line"><span class="nt">&lt;artifactId&gt;</span>rapidocr<span class="nt">&lt;/artifactId&gt;</span></span><span id="LC4" class="line"><span class="nt">&lt;version&gt;</span>0.0.4-light<span class="nt">&lt;/version&gt;</span></span><span id="LC5" class="line"><span class="nt">&lt;/dependency&gt;</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>代码位于<code>0.0.4-light 分支</code>，但该分支后续不进行维护。在该分支代码下，你可能会需要以下帮助</p><ul><li><a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/UPDATE_MODEL.md">如何更新模型</a></li><li><a href="https://gitee.com/lc_monster/rapid-ocr-java/blob/main/docs/COMPILE_LIB.md">如何自行编译动态库</a></li></ul><blockquote><p>如有其他问题请提 issue，我会尽快解决。</p></blockquote><h2><a id="user-content-鸣谢" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#%E9%B8%A3%E8%B0%A2"></a>鸣谢</h2><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FRapidAI%2FRapidOCR">RapidOCR</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FPaddlePaddle%2FPaddleOCR">PaddleOCR</a></li></ul><h2><a id="user-content-开源许可" class="anchor" href="https://gitee.com/lc_monster/rapid-ocr-java#%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF"></a>开源许可</h2><p>使用 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMyMonsterCat%2FDeviceTouch%2Fblob%2Fmain%2FLICENSE">Apache License 2.0</a></p>]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/lc_monster/rapid-ocr-java</guid>
            <link>https://gitee.com/lc_monster/rapid-ocr-java</link>
        </item>
        <item>
            <title>
                <![CDATA[零一万物 API 正式上线：支持输入 30 万汉字]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">零一万物正式发布了 Yi 大模型 API 开放平台。链接地址：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fplatform.lingyiwanwu.com%2F" target="_blank">https://platform.lingyiwanwu.com/</a></p><p><span style="color:#000000">此次 API 开放平台提供以下模型：</span></p><ul><li><span style="color:#000000">Yi-34B-Chat-0205：支持通用聊天、问答、对话、写作、翻译等功能。</span></li><li><span style="color:#000000">Yi-34B-Chat-200K：200K 上下文，多文档阅读理解、超长知识库构建小能手。</span></li><li><span style="color:#000000">Yi-VL-Plus: 多模态模型，支持文本、视觉多模态输入，中文图表体验超过 GPT-4V。</span></li></ul><p><img alt="" height="315" src="https://oscimg.oschina.net/oscnet/up-8e0007c7ff2ff5e986b65ba01b954470494.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">几个亮点如下：</span></p><ul><li><span style="color:#000000">200K 上下文</span></li></ul><p><span style="color:#000000"><img alt="" height="311" src="https://oscimg.oschina.net/oscnet/up-7ced82363570b151be4c3fa25a05a3480de.png" width="300" referrerpolicy="no-referrer"></span></p><ul><li><span style="color:#000000">在 Yi-34B-Chat-0205、Yi-34B-Chat-200K 之外，零一万物开放平台此次同期上新全新的多模态大模型 Yi-VL-Plus。Yi-VL-Plus 支持文本、视觉多模态输入，面向实际场景大幅增强。多位用户反馈：「中文体验超过 GPT-4V。」</span></li><li><span style="color:#000000">零一万物 Yi 大模型 API 开放平台和 OpenAI API 是兼容的，迁移丝滑。</span></li></ul><p><span style="color:#000000">零一万物表示，近期将为开发者提供更多更强模型和 AI 开发框架。主要亮点包括：</span></p><ul><li><span style="color:#000000">推出一系列的模型 API，覆盖更大的参数量、更强的多模态，更专业的代码/数学推理模型等。</span></li><li><span style="color:#000000">突破更长的上下文，目标 100 万 tokens；支持更快的推理速度，显著降低推理成本。</span></li><li><span style="color:#000000">基于超长上下文能力，构建向量数据库、RAG、Agent 架构在内的全新开发者 AI 框架。旨在提供更加丰富和灵活的开发工具，以适应多样化的应用场景。</span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 15 Mar 2024 02:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283139</guid>
            <link>https://www.oschina.net/news/283139</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国 AIGC 产业全景报告：万亿市场潜力解析、全景图谱揭秘及 50 家机构瞩目亮相！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">《中国 AIGC 产业全景报告》（2023 年 3 月版）由量子位智库出品。报告详细分析了中国 AIGC（人工智能生成内容）产业的市场规模、产业全景图谱、行业变革分析、代表案例以及值得关注的 AIGC 机构。</p><p style="color:#060607; margin-left:0; margin-right:0; text-align:start"><img height="787" src="https://static.oschina.net/uploads/space/2024/0314/165804_tahR_4700705.png" width="1119" referrerpolicy="no-referrer"></p><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">以下是报告的核心内容概要：</p><ol><li><p style="margin-left:0; margin-right:0"><strong>市场规模</strong>：</p><ul><li>预计到 2030 年，中国 AIGC 市场规模将达到万亿级别。</li><li>2023-2025 年为培育摸索期，2025-2027 年为应用蓬勃期，2028 年后为整体加速期。</li><li>AIGC 产业的营收模式主要包括 MaaS（Model as Service）、按产出内容量付费、软件订阅付费和模型定制开发费。</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>产业全景图谱</strong>：</p><ul><li>AIGC 产业分为基础设施层、模型层和应用层。</li><li>基础设施层包括数据层、算力层、计算平台等。</li><li>模型层主要分为底层通用大模型和中间层模型。</li><li>应用层涉及直接生产可消费内容、结合底层系统生产高附加值内容、提供内容生产辅助工具和提供体系化解决方案。</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>行业变革分析</strong>：</p><ul><li>AIGC 技术将深刻影响线上游戏、影视传媒、内容资讯、电子商务等多个行业。</li><li>AIGC 技术的应用将提高创作灵活度、激发内容生产多样性、降低内容创作门槛等。</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>代表案例</strong>：</p><ul><li>报告列举了多家中国 AIGC 产业的代表性公司及其产品，如百度的「文心一言」、科大讯飞的 SMART-TTS 系统、阿里巴巴的达摩院和阿里云、腾讯的 AlLab 等。</li><li>这些案例展示了 AIGC 技术在不同领域的应用，包括数字人生成、内容创作、虚拟主播、AI 写作等。</li></ul></li><li><p style="margin-left:0; margin-right:0"><strong>中国最值得关注的 50 家 AIGC 机构（AIGC50）</strong>：</p><ul><li>报告评选出了中国最值得关注的 50 家 AIGC 机构，包括百度、阿里巴巴、腾讯、华为、京东科技、小冰公司等，这些机构在 AIGC 领域具有显著的技术实力和市场影响力。</li></ul></li></ol><p style="color:#060607; margin-left:0; margin-right:0; text-align:start">报告强调了 AIGC 产业的快速发展和巨大潜力，同时也指出了产业发展中的挑战和机遇。通过对市场规模的预测、产业图谱的梳理、行业变革的分析以及代表性案例的展示，报告为读者提供了一个全面的中国 AIGC 产业现状和未来趋势的视角。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">报告详情可至<strong><span style="color:#333333"><span style="background-color:#f39c12">「开源中国 APP - 报告模块」</span></span></strong>查看。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">APP 下载地址：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="300" src="https://oscimg.oschina.net/oscnet/up-8ab7bb9f45ecaae87f7a862ea446ae1dacf.png" width="300" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>（<em>目前仅提供 Android 版本）</em></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 09:07:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283068</guid>
            <link>https://www.oschina.net/news/283068</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《零基础 SICP》公开课课程主页上线了]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>墨干理工套件是使用 C++和 Scheme 的自由的开源软件。墨客实验室上线了《零基础 SICP》这门公开课，目的是</p><ul><li>让更多的小伙伴知道墨干这个强大的面向理工科学生和研究者的自由软件，并用于日常的学习和科研</li><li>让非计算机专业的小伙伴一起结伴学习 SICP 和 Scheme 编程语言，以及编程的本质</li><li>对参加墨干的开源之夏感兴趣的小伙伴可以一起系统学习 Scheme 编程语言，为参加墨干的开源之夏项目做准备</li></ul><p>《<span style="background-color:#ffffff; color:#191b1f">计算机程序的构造和解释</span>》（SICP）<span style="background-color:#ffffff; color:#191b1f">它是一本经受住几十年考验，被各种赞誉的经典，是从事计算机程序相关行业人员都推荐阅读的书籍。国内外有一些大学有开设基于 SICP 的课程，比如南京大学。</span></p><p>《零基础 SICP》面向任何无编程基础、对 Scheme 和编程的本质感兴趣的小伙伴。相对于大学计算机系开设的课程，本公开课会更基础，讲解会更加细致。</p><p>期望读者：</p><ul><li>具有高中水平的数学基础和英文基础</li><li>对操作系统（Windows/macOS/Linux 三者之一）有一定了解，能够学会如何打开终端，并使用 cd 命令切换当前目录</li></ul><p>从去年一月底到现在，我们已经录制了 7 个公开课视频，一共四堂课，包含了 SICP 第一章前两节的内容。现在我们上线了课程的官网，希望有更多小伙伴一起学习。</p><p>课程官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmogan.app%2Fzh%2Fguide%2FSICP.html" target="_blank">https://mogan.app/zh/guide/SICP.html</a></p><p>墨干本身内置 Scheme 会话，可以直接运行 Scheme 代码，另外我们也为读者们构建了 S7 Scheme 的解释器：</p><p><a href="https://gitee.com/XmacsLabs/s7-scheme-binary">https://gitee.com/XmacsLabs/s7-scheme-binary</a></p><p>对于主流的操作系统，比如 Windows/macOS/Ubuntu/UOS 龙芯芯片，读者们只需要下载 2M 左右的 S7 解释器，就可以使用最原始的 S7 解释器，无需自行构建。（S7 Scheme 解释器官方只提供了源代码，并没有提供 S7 Scheme 解释器的安装包）</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 08:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283058</guid>
            <link>https://www.oschina.net/news/283058</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[VLC 下载量突破 50 亿，计划推出 Vision Pro 应用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">开发 VLC 及相关技术的非营利组织 VideoLAN 的总裁 Jean-Baptiste Kempf <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lowpass.cc%2Fp%2Fvlc-five-billion-downloads-vision-pro-app" target="_blank">透露</a>，开源多媒体播放器 VLC 在桌面和移动平台上的下载量已超过了 50 亿次。</span></p><p><span style="color:#000000">VLC 于 2001 年首次发布，是有史以来最成功、最知名的开源桌面应用程序之一。2019 年初，该应用的下载量突破了 30 亿次；尽管 Netflix 等流媒体服务近年来有所增长，但大众对它的兴趣依然浓厚。就 11 月发布的最新 VLC 版本而言，仅桌面用户的下载量就已达到了 3.35 亿次。</span></p><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-4d9be4beeb6dac65d1b5272e14016566b55.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">VLC 在移动设备上的使用量也在持续增加，Android 和 iOS 版本的应用程序总下载量约为 3.18 亿次。Kempf 称，「大家仍然在大量下载 VLC。」</span></p><p><span style="color:#000000">谈到项目的未来规划时，Videolan 团队并不满足于成为桌面设备上最受欢迎的多媒体播放器，并已经把目光投向了下一代平台。Kempf 表示，除了继续开发 VLC 4.0，Videolan 团队还在将 VLC 移植到苹果的 Vision Pro 头戴式耳机，未来甚至可能提供对 FAST 频道和其他广告支持的在线媒体的访问。</span></p><p><span style="color:#000000">他们已经在 Vision Pro 上运行了一个版本的 VLC。不过，该应用程序尚未发布。Kempf 称，部分原因是潜在用户群仍然很小。「我还不确定是否有任何用例」。Kempf 表示，他也愿意为 Meta 的 Quest 耳机开发一个版本，虽然该平台上已经有「许多优秀的播放器」可用。</span></p><p><span style="color:#000000">Kempf 还解释道，VLC 4.0 版本原本应在前段时间发布，但由于其复杂程度高于预期所以导致了推迟。「我们一直在重写 VLC 的整个核心」。此外，Videolan 团队还在开发 VLC 的 WebAssembly 版本。</span></p><p><span style="color:#000000">Videolan 4 的 Nightly 版本提供了一个更加以内容为中心的界面，它将默认播放器窗口替换成了 someone’s library。不过，Kempf 提醒道，其中一些改动很可能会在应用程序正式发布前被还原。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 08:40:30 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283057/vlc-five-billion-downloads</guid>
            <link>https://www.oschina.net/news/283057/vlc-five-billion-downloads</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[System76 计划 5 月底发布 COSMIC Desktop Alpha]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>System76 原计划在第一季度末发布 Rust 编写的 COSMIC 桌面环境的第一个 alpha 版本，但现在他们将时间推迟到了 5 月下旬，以便有时间完成新桌面应用程序的功能开发工作。</p><p>最初，System76 打算将其首个 COSMIC alpha 版本与 Pop!_OS 22.04 上的 GNOME 应用程序一起发布，但随着 COSMIC <span style="color:#121212">应用程序取得良好进展</span>，他们打算将 alpha 版本的发布时间推迟两个月，以便使其应用程序处于更好的状态。</p><p>System76 在终端编辑器、文本编辑器、文件管理器和应用程序商店方面都取得了不错的进展。虽然首个 alphas 版本已经推迟发布，但 System76 的目标仍然是在今年发布 COSMIC 桌面稳定版，同时发布的还有基于 Ubuntu 24.04 LTS 的 Pop!_OS 24.04。</p><p>COSMIC 开发人员最近完成了混合图形支持、窗口最小化和还原、新壁纸、平铺小程序和输入设备设置等方面的工作。COSMIC 今后的工作主要集中在应用程序、图标和其他用户界面方面。</p><p><img alt="" height="282" src="https://oscimg.oschina.net/oscnet/up-ac24e7f96ded9d378f335ac724fc52b08b7.webp" width="500" referrerpolicy="no-referrer"></p><p>更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.system76.com%2Fpost%2Fcosmic-more-alpha-more-fun" target="_blank">查看官方博客</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 07:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283047/system76-cosmic-alpha-may</guid>
            <link>https://www.oschina.net/news/283047/system76-cosmic-alpha-may</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linus Torvalds 不满 Linux 6.9 中的一些 Bcachefs 代码]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Bcachefs 文件系统自从被纳入 Linux 6.7 内核的上游版本以来，一直保持着良好的运行状态。但现如今，随着 Bcachefs 的功能更新被提交到 Linux 6.9 合并窗口，引发了 Linus Torvalds 对其中一些 proposed code 的不满。</span></p><p><span style="color:#000000">维护者 Kent Overstreet 将针对 Linux 6.9 的 Bcachefs 改动的拉取请求<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2Flfypw4vqq3rkohlh2iwhub3igjopdy26lfforfcjws2dfizk7d%4032yk5dnemi4u%2F" target="_blank">总结为</a>：</span></p><ul><li><span style="color:#000000">Subvolume children btree；是为 walking subvolumes 提供用户空间界面所必需的，计划在稍后提供</span></li><li><span style="color:#000000">对目录结构检查进行了大量改进</span></li><li><span style="color:#000000">改进了日志管道，显着提高了 high iodepth write workloads 的性能</span></li><li><span style="color:#000000">Discard path 改进：Discard path 更加高效，并且不再不必要地刷新日志</span></li><li><span style="color:#000000">Buffered write path 现在可以避免占用 inode lock</span></li><li><span style="color:#000000">调出用于 XFS 的各种库代码：time stats、mean_and_variance、darray、eytzinger、thread_with_file</span></li><li><span style="color:#000000">新的 mm helper：memalloc_flags_{save|restore}</span></li><li><span style="color:#000000">mempool now does kvmalloc mempools</span></li></ul><p><span style="color:#000000">但让 Linus Torvalds 感到不解的是，这些补丁把 Bcachefs 代码中的一些元素移到了一些 library-type 的代码中，以至于可以轻松地被其他文件系统重用。</span></p><p><span style="color:#000000">Linus Torvalds 在</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3Dwg3djFJMeN3L_zx3P-6eN978Y1JTssxy81RhAbxB%3D%3DL8Q%40mail.gmail.com%2F" target="_blank">回应</a><span style="color:#000000">相关 PR 时表示：「我看了看'make random bcachefs code be a library function'的内容，觉得毫无意义，最终决定在没有进一步解释的情况下我不会使用它（老实说，我不认为这些解释站得住脚）。」</span></p><p><span style="color:#000000">并直言 "stdio_redirect_printf() "和 darray_char 都很「恶心」。建议 Overstreet 将其保留在自己的代码中就好，不要试图提交上来。如果实在不死心的话，建议他先做好以下几点：</span></p><ul><li><span style="color:#000000">多加解释</span></li><li><span style="color:#000000">有更合理的命名，减少恶心和完全无意义的 interfaces ("DARRAY()")。</span></li></ul><p><img height="318" src="https://oscimg.oschina.net/oscnet/up-87349de7cf38ec24e77d98c8c7165c68d31.png" width="500" referrerpolicy="no-referrer"></p><blockquote><p><span style="color:#000000">而且，仅仅找到一个其他文件系统来共享这种代码并不足以证明它是一个合理的 interfaces 和合理的命名。</span></p><p><span style="color:#000000">但是，最主要的问题是疯狂的数学计算。该死的，我们很久以前就讨论过"mean and variance"这种愚蠢的垃圾。当时就错了，现在还是错的。你没有解释为什么它不能使用简单得多的 MAD（<em>median absolute deviation</em>），而不是使用 variance。这个错误的决定直接导致无意义地使用过于复杂的 128 位数学。</span></p><p><span style="color:#000000">我当时称其为疯狂的过度工程化，而就我所知，除了一些轻微的类型名称细节外，绝对没有任何变化。</span></p><p><span style="color:#000000">只要你把它改成某种只适用于 bcachefs 的东西，我就不介意。但现在，你却试图把这些垃圾作为通用库代码推向市场，让其他人也能使用，这就意味着，我会介意这种过度设计的 interfaces。</span></p><p><span style="color:#000000">在其他方面，time_stats 看上去就像是一个有名称和用途的正常 interfaces，但使用了这种可怕的基础架构后，它就变得不伦不类了。</span></p></blockquote><p><span style="color:#000000">在 Overstreet 争辩之后，Linus 进一步</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2FCAHk-%3DwhbgtooUErM9bOP2iWimndpkPLaPy1YZmbmHACU07h3Mw%40mail.gmail.com%2F" target="_blank">补充道</a><span style="color:#000000">：</span></p><blockquote><p><span style="color:#000000">加权版本的代码字面上没有任何变化。</span></p><p><span style="color:#000000">variance value 是不同的，但 MAD 和 standard deviation&nbsp;之间的区别基本上只是一个 constant factor（不同的分布会有所不同，但那又怎样？任何特定情况都会有特定的分布）。那么，为什么 constant factor&nbsp;会对指数加权产生任何影响呢？</span></p><p><span style="color:#000000">不管怎样，请随意将您的代码保存在 bcachefs 中。也许 xfs 甚至想复制该代码。我不在乎，这看起来很愚蠢，但这是文件系统的选择。但如果我们要把它打造成一个通用的内核库，它就必须是健全的。不要让人们仅仅为了随机统计元素而进行 64 位平方根和 128 位除法。</span></p></blockquote><p><span style="color:#000000">因此，就目前情况而言，Linus Torvalds 并没有接受这个针对 Linux 6.9 内核的 Bcachefs 拉取请求。至于后续如何，就要看新的 PR 会不会放弃这些补丁或以其他方式重新修改以满足&nbsp;Linus 的要求。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 07:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283043/linux-6-9-bcachefs-attempt</guid>
            <link>https://www.oschina.net/news/283043/linux-6-9-bcachefs-attempt</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[不卡科技系列全新 Logo 发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="1395" src="https://oscimg.oschina.net/oscnet/up-d91ca53fe6e4275e089c404f966b1009a32.jpg" width="1073" referrerpolicy="no-referrer"></p><p>新 Logo 由前 vivo 官网设计师操刀，更加高端大气上档次，有圆角也有棱角，预示着产品有态度也有温度。</p><p><img height="1298" src="https://oscimg.oschina.net/oscnet/up-0d5d0bafee553d66a62a40447c60c3e6116.png" width="2534" referrerpolicy="no-referrer"></p><p>也和官网整体风格匹配，更加成熟，商务和技术风格相融合，也是产品的基本调性。打造酷炫且实用的产品体验。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 06:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283025</guid>
            <link>https://www.oschina.net/news/283025</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报 | 全球首位 AI 软件工程师 Devin；谷歌承认「窃取」OpenAI 模型关键信息]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3><span style="color:#e67e22"><strong># 2024.3.13</strong></span></h3><h2><strong><span style="color:#16a085">今日要点</span></strong></h2><p><strong>OpenSource Daily</strong></p><h3><strong><a href="https://www.oschina.net/news/282901/laravel-11-released" target="_blank">Laravel 11 正式发布</a></strong></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Laravel 11 和 Laravel Reverb 现已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flaravel-news.com%2Flaravel-11" target="_blank">发布</a>。Reverb 是 Laravel 生态系统的最新成员，是第一方、可扩展的 WebSocket 服务器，旨在为用户的应用程序提供强大的实时功能。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Laravel 11 引入了：极简应用结构、默认使用 SQLite、实现 health routing、提供每秒速率限制、支持优雅的加密密钥轮换、改进队列测试、引入新的 Artisan 命令、添加 Resend 邮件传输、集成 Prompt validator、新的 Artisan commands、Model Casts 改进、The once function、改进了使用内存数据库进行测试时的性能、改进了对 MariaDB 的支持等等。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="352" src="https://oscimg.oschina.net/oscnet/up-0453b972568e047b7d57af4dd0cf5cf3c7d.png" width="500" referrerpolicy="no-referrer"></p><h3><strong><a href="https://www.oschina.net/news/282895/cognition-labs-devin" target="_blank">全球首位 AI 软件工程师 Devin：能自学新语言、开发迭代 App、自动 Debug</a></strong></h3><p>初创公司 Cognition 近日发布公告，宣布推出全球首个 AI 软件工程师 Devin，并号称会彻底改变人类构建，软件的方式。官方描述如下：Devin 是一位不知疲倦、技术娴熟的队友，随时准备与您并肩作战，或独立完成，任务供您审查。有了 Devin，工程师可以专注于更有趣的问题，工程团队可以努力实现更远大的目标。Devin 在 SWE-bench 编码基准测试中取得了突破性的成功，展示了执行复杂任务的能力，甚至超越了顶尖的人类工师。</p><p><img height="287" src="https://oscimg.oschina.net/oscnet/up-9eca7b14f877d8f53cdbf3e675e1942c4a7.png" width="500" referrerpolicy="no-referrer"></p><hr><h2><strong><span style="color:#16a085">今日观察</span></strong></h2><p><img height="160" src="https://oscimg.oschina.net/oscnet/up-4101ac3e993fdd0d11ceb478c4000751d2b.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- 微信&nbsp;</span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU4ODQwNTIxMw%3D%3D%26mid%3D2247526466%26idx%3D1%26sn%3D50c1810505d13cd76439d7099e062905%26scene%3D0" target="_blank">人工智能产业链 union</a></em></u></p><p><img height="123" src="https://oscimg.oschina.net/oscnet/up-26d3c03709ed15944aee6780c7a432211d8.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- </span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fk.sina.cn%2Farticle_5182171545_134e1a99902001pzg3.html" target="_blank">界面新闻</a></em></u></p><p><img height="218" src="https://oscimg.oschina.net/oscnet/up-413b05deedd40f689af0d5326b693b401dc.png" width="500" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- </span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.cn%2Fusstock%2Fmggd%2F2024-03-13%2Fdetail-inanefqq3854800.d.html" target="_blank">环球市场播报</a></em></u></p><hr><h2><span style="color:#16a085"><strong>今日推荐</strong></span></h2><p><img height="401" src="https://oscimg.oschina.net/oscnet/up-1b97b2ca5e5274365ef49658a177ccdc3d9.png" width="500" referrerpolicy="no-referrer"></p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ftremorlabs%2Ftremor" target="_blank">https://github.com/tremorlabs/tremor</a></em></u></p><hr><h2><span style="color:#16a085"><strong>事件点评</strong></span></h2><p><img height="527" src="https://oscimg.oschina.net/oscnet/up-8c63b78a5992700821d2183b90b07e6027b.png" width="500" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>每日项目榜</strong></span></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong><span style="background-color:#e67e22">每日 GitHub 精选</span></strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img height="659" src="https://oscimg.oschina.net/oscnet/up-07e7c0e0484d7ed9ad4c32f79130e119b77.png" width="500" referrerpolicy="no-referrer"></p><blockquote><h4><strong><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span></strong><br><em><u><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/q35lx4s6qq9ls4r/28_cognition_labs_devin_Epbxne3xzN.pdf" target="_blank">开源日报第 028 期：全球首位 AI 软件工程师 Devin；谷歌承认「窃取」OpenAI 模型关键信息</a></u></em></h4></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>往期回顾</strong></p><ul><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/hh291xp9mxksc9i/27_ai_google_50_gpt_4_KfagjDXXfZ.pdf" target="_blank">开源日报第 027 期：AI 接连翻车的 Google 要变天了；互联网大厂 50 款大模型及应用，能否全面超越 GPT-4？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/uwsizmmsnhq8zdk/26_git_hub_22_web_os_22_vue_rolldown_FpVykoR7rJ.pdf" target="_blank">开源日报第 026 期：大模型替代程序员根本就是一个伪命题；GitHub 顶流 "Web OS"</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6ho57sxydzsh9jh/25_ai_5_ax1LWz5GP5.pdf" target="_blank">开源日报第 025 期：买手机送大模型；「钓鱼式维权」 须遏制；「AI 原生」 骗局江湖</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7xd6teyhekcvamw/24_risc_v_x86_arm_5LsjoStPUn.pdf" target="_blank">开源日报第 024 期：RISC-V 能否和 x86、Arm 一起成为三大主流架构；给阎王开发地府管理系统</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/svxac61bjmbmmw5/23_google_microsoft_cM5zZacKru.pdf" target="_blank">开源日报第 023 期：Google = 开源，好评；Microsoft = 闭源收入还低，差评</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/3vmzfjvp7mpvv26/22_sora_cuda_Syy7OJyUvc.pdf" target="_blank">开源日报第 022 期：轻松复现 Sora 模型；事关 CUDA 兼容，英伟达禁止了；百度还差一个 「遥遥领先」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/z3rhs3qkyeqwoax/21_open_ai_JROaEZat3b.pdf" target="_blank">开源日报第 021 期：闭源模型就是比开源安全；起诉 OpenAI 不能更赞同</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/lv84pwvd03it00i/20_open_ai_pingora_yaml_mE5RuB20Vl.pdf" target="_blank">开源日报第 020 期：为什么王炸都来自 OpenAI；Pingora 最好不要用 YAML 当配置文件</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/mx86z1dhywrw71p/19_ai_c_llm_IgpNOVZtCz.pdf" target="_blank">开源日报第 019 期：我让 AI 用 C 语言写一个算法；微软三进制 LLM</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/qdljicvqiqsshd6/187ZiLwG48lc_CngfQJ1Qxs.pdf" target="_blank">开源日报第 018 期：苹果十年造车梦碎；这个开源项目有点...「大胆」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7r8dkz3232v4e7a/17_maria_db_v_linux_GoyNoM85IZ.pdf">开源日报第 017 期：MariaDB 消亡史；写代码我有三不沾；V 神建议马斯克用 Linux</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6typ9w3u98f5mxn/16_1_8_2efTeNfFjN.pdf">开源日报第 016 期：鸿蒙程序员平均月薪超 1 万 8；中美 AI 差距有多大？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/92n4c9ryegpcq1z/015_sora_KcAkRNX93Y.pdf">开源日报第 015 期：为什么挡不住英伟达；Sora 不靠蛮力</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/s7n800w84o6guyv/014_kyezhNxOGD.pdf">开源日报第 014 期：目前的人工智能技术连猫的智能水平都没达到</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC013%E6%9C%9F%EF%BC%9A%E7%AD%89%E5%88%B0%20Sora%20%E5%BC%80%E6%BA%90%E4%BA%86%E7%AB%8B%E5%88%BB%E6%8E%A8%E5%87%BA%E5%B1%9E%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B.pdf">开源日报第 013 期：等到 Sora 开源了立刻推出属于我们自己的大模型</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC012%E6%9C%9F%EF%BC%9ASora%20%E7%BB%99%E4%B8%AD%E5%9B%BD%20AI%20%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%8F%98%E5%8C%96%EF%BC%9BDart%203.3%20%E5%8F%91%E5%B8%83.pdf">开源日报第 012 期：Sora 给中国 AI 带来的真实变化；Dart 3.3 发布</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC11%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有 「大模型版 Linux」</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></li><li><a href="https://www.oschina.net/news/277585">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></li><li><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></li><li><a href="https://www.oschina.net/news/277214">开源日报第 006 期：选择技术栈一定要选择开源的</a></li><li><a href="http://www.oschina.net/news/277040">开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</a></li><li><a href="https://www.oschina.net/news/276864">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 14 Mar 2024 06:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/283024</guid>
            <link>https://www.oschina.net/news/283024</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[互动游戏团队如何将性能体验优化做到 TOP 级别]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="ad-wrap" style="margin-bottom: 8px;"><div data-traceid="news_comment_top_ad" data-tracepid="news_comment_top" style="text-align: center;"><a style="color:#A00;font-weight:bold;" href="https://www.oschina.net/event/2331708?fr=news0304" target="_blank">3 月 16 日，北京源创会 —— 「数据库，2024 开炫」 <img src="https://www.oschina.net/img/hot3.png" align="absmiddle" style="max-height: 32px;max-width: 32px;margin-top: -4px;" referrerpolicy="no-referrer"></a></div></div><span id="OSC_h1_1"></span><h1>一、背景</h1><p style="color:#24292f; text-align:start">随着互动游戏业务 DAU 量级增加，性能和体验重要性也越发重要，好的性能和体验不仅可以增加用户使用体感，也可以增加用户对于互动游戏的使用粘性。</p><p style="color:#24292f; text-align:start">对现状分析，主要存在首屏渲染速度慢、打开页面存在白屏、页面加载过多资源等问题，核心手段是增加骨架、接口优先级调整、预渲染、减小包体积等。</p><p style="color:#24292f; text-align:start">优化后，互动游戏签到功能做到同类业务性能体验 Top 级别，下面是优化后数据：</p><ul><li>首屏渲染速度：优化后提升首屏渲染速度<span>&nbsp;</span><strong>39%</strong>。</li><li>首屏骨架：骨架体积大小减少<span>&nbsp;</span><strong>44%</strong>（压缩后减少<span>&nbsp;</span><strong>50%</strong>）。</li><li>首次加载总资源：资源总体积优化后，大小减少<span>&nbsp;</span><strong>69%</strong>。</li></ul><span id="OSC_h1_2"></span><h1>二、骨架</h1><p style="color:#24292f; text-align:start">骨架屏是指在页面加载时，临时显示出页面的主要结构，可以让用户在等待页面加载完成时，得到视觉上的反馈，提升页面的用户体验。<img alt="100.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/100.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>骨架示意图 vs 数据渲染</strong><img alt="109.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/109.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><img alt="108.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/108.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看出在接口返回数据之前，可以先使用骨架得到一些界面反馈。</p><span id="OSC_h1_3"></span><h1>三、缓存</h1><p style="color:#24292f; text-align:start">虽然骨架屏可以让用户在视觉上得到反馈，毕竟不是真实的数据，总体还是有一些简陋，用户也可能并不知道这块区域实际渲染的是什么样的内容，若是网络环境不好，很可能会长时间的停留在骨架屏阶段，为了增强一些体感，使用缓存进一步对页面进行优化。<img alt="107.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/107.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">使用缓存渲染具备以下优势：</p><ul><li>与骨架屏相比，缓存渲染十分接近用户最终所见，因为每次接口返回数据都会更新缓存，用户再次进入时看到的都是自己上次进入时的数据。</li><li>当用户处在弱网或者断网等不可抗力的环境中时，可以得到较为完整的页面数据展示，可以很好减弱用户环境带来的网络营销。</li></ul><p style="color:#24292f; text-align:start">使用缓存注意事项：</p><ul><li>一些缓存渲染应屏蔽事件响应，避免造成不必要的报错和客诉。比如商品的缓存渲染，由于商品存在下架、优惠券调整等情况，缓存的数据和实际数据会存在一定的偏差。</li><li>缓存渲染逻辑需要更加前置，不应该将缓存渲染的逻辑放在原本的位置，这样会拖慢渲染的时机。</li></ul><span id="OSC_h1_4"></span><h1>四、接口后置</h1><p style="color:#24292f; text-align:start">浏览器对同一时间内的请求数量是有限制的，既并发请求限制。当一个页面首次渲染时需要浏览器发起很多接口请求，用于填充页面渲染需要的数据，若是对于页面渲染时的请求数量不加以控制，便可能导致一些问题出现。</p><p style="color:#24292f; text-align:start">现在有 home 和 info 两个接口，home 接口返回的数据是<strong>首屏渲染需要依赖</strong>的，info 接口返回的数据则<strong>不是首屏必须依赖</strong>的。假设现在还有一些其他请求占据了并发请求限制的数量，导致 home 接口请求变慢。<img alt="105.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/105.jpeg" referrerpolicy="no-referrer">若是 info 接口响应慢，长时间占据这浏览器的请求进程，会导致页面首屏渲染速度更慢，那么就需要有个一套方案可以根据接口的优先级进行加载顺序控制，可以将顺序变为如下。<img alt="104.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/104.jpeg" referrerpolicy="no-referrer"><strong>方案：</strong><span>&nbsp;</span>当页面加载完成后一定时间后，进行低优先级接口的请求，或者触发页面的滚动、点击等时立即进行接口请求。</p><p style="color:#24292f; text-align:start">此方案适用于：确定接口延迟加载并不会阻塞用户的交互和操作。</p><p style="color:#24292f; text-align:start">将其封装为一个 hooks，便于复用，直接先看代码再解释：</p><pre><code>import { useRM, createRM } from 'xxx'

const listen = (type: string, listener: () =&gt; void) =&gt; {
  const l = () =&gt; {
    listener()
    document.removeEventListener(type, l)
  }
  document.addEventListener(type, l)
}

const pageFlowModule = createRM(
  {
    assemble(state) {
      const reactionObserver = () =&gt; {
        state.isUserReactioned = true
      }

      ;['scroll', 'mousedown', 'touchstart'].forEach((type) =&gt; {
        listen(type, reactionObserver)
      })
      setTimeout(reactionObserver, 4000)
    },
  },
  { isUserReactioned: false },
)

pageFlowModule.actions.assemble()

export const usePageFlow = () =&gt; {
  const [state] = useRM(pageFlowModule)
  return state
}
</code></pre><p style="color:#24292f; text-align:start">使用：</p><pre><code>import { usePageFlow } from 'xxx'

const Demo = () =&gt; {
    const { isUserReactioned } = usePageFlow()

    const fetchHanlder = useCallback(() =&gt; {
        // 接口请求数据
    }, [])

    useEffect(() =&gt; {
        if(isUserReactioned) {
            fetchHanlder()
        }
    }, [isUserReactioned, fetchHanlder])

    return &lt;div&gt;{/* 渲染接口返回的数据 */}&lt;/div&gt;
}
</code></pre><p style="color:#24292f; text-align:start">从上面代码可以看到，会将一些非首屏需要的请求后置，后置的接口可以在页面加载完成 4s 后自动触发调用，也会在用户有触屏、滚动页面等行为的时触发接口的调用。</p><span id="OSC_h1_5"></span><h1>五、骨架优化</h1><p style="color:#24292f; text-align:start">签到和许愿树目前主文档中除了骨架部分还包含了一些公共的 JS 和 CSS，对不同资源类型进行拆分、汇总后发现，不管是签到还是许愿树，实际包含 HTML + JS 部分仅占极小比例，大量的流量消耗在了 CSS 上。</p><p style="color:#24292f; text-align:start">对 HTML 中 CSS 部分再进行梳理发现，文件中包含的除了骨架的 CSS 部分和公共组件库的 CSS 部分之外，还包含了大量弹框的 CSS。这三类中，骨架的 CSS 要保留，公共组件库的 CSS 可以拆分但是难度较大，剩下的就是弹框或者非骨架部分的 CSS。</p><ul><li>需要把弹框部分组件做异步加载，保证预渲染的时候这部分 CSS 文件不会被加载到。</li><li>拆分骨架组件，把骨架组件从业务组件中剥离，预渲染的时候只渲染和加载骨架部分，不加载其余主文件部分 CSS，进一步缩小骨架。<img alt="102.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/102.jpeg" referrerpolicy="no-referrer"></li></ul><span id="OSC_h1_6"></span><h1>六、localStorage 性能问题</h1><p style="color:#24292f; text-align:start">在做优化之前，并未意识到 localStorage 所隐藏的性能问题，业务中使用了大量的本地存储，使用 Performance 记录一下存储消耗的时间。</p><p style="color:#24292f; text-align:start">记录核心代码：</p><pre><code>export const setMallFlowStoreData = (data: any) =&gt; {
  performance.mark('start_localstorage_operation')
  // localStorage 操作.....
  performance.mark('end_localstorage_operation')

  performance.measure('localstorage_operation_duration', 'start_localstorage_operation', 'end_localstorage_operation')
}
</code></pre><p style="color:#24292f; text-align:start">输出记录的时间：</p><pre><code>const entries = performance.getEntriesByName('localstorage_operation_duration')
const TOTAL_TIME = entries.reduce((current, next) =&gt; {
return current + next?.duration
}, 0)

console.log('全部记录:', entries, '共耗时:', TOTAL_TIME)
</code></pre><p style="color:#24292f; text-align:start">输出结果：</p><p style="color:#24292f; text-align:start">可以看到通过 localStorage 进行一次存储操作，大致需要耗时<span>&nbsp;</span><strong>0.2-0.5ms</strong>之间，若是当页面存在大量的前端的存储操作时，低端机型在存储操作上消耗甚至达到<span>&nbsp;</span><strong>10-20ms</strong>，若是代码写的不合理，导致页面 reload、反复触发获取操作等情况，这个时间又将会成倍的增加。</p><p style="color:#24292f; text-align:start">接下来先一起看看为何会存在性能方面的问题和解决方案。</p><span id="OSC_h2_7"></span><h2>存储数据</h2><p style="color:#24292f; text-align:start"><strong>问题：</strong></p><p style="color:#24292f; text-align:start">localStorage 的存储是同步的操作，因此在存储大量数据时，可能会导致阻塞 UI 线程，影响用户体验。</p><p style="color:#24292f; text-align:start"><strong>方案：</strong></p><p style="color:#24292f; text-align:start">核心思路便是将同步操作转换为异步操作，这样就不会阻塞 UI 线程。</p><ul><li>使用 Web Worker ，会增加一些项目维护的复杂度，且其是 HTML5 标准中新增的技术，存在一定的兼容性（ChatGPT 给的，应该是错误答案，并未在 MDN 中看到）。</li></ul><p style="color:#24292f; text-align:start"><img alt="201.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/201.png" referrerpolicy="no-referrer"></p><ul><li><p>使用 setTimeout、setInterval，兼容性绝对的好，但是并未从根本解决问题。</p></li><li><p>不用 localStorage，直接上 IndexDB，但是由于代码项目原因，不能改动原有的太多逻辑。</p></li></ul><p style="color:#24292f; text-align:start">综合解决方案和历史原因，只能退而求其次选择 setTimeout 的方式解决这个问题。</p><span id="OSC_h2_8"></span><h2>读取数据</h2><p style="color:#24292f; text-align:start"><strong>问题：</strong></p><p style="color:#24292f; text-align:start">每次读取 localStorage 数据时，都需要从磁盘中读取数据，因此在处理大量数据时，可能会出现性能问题。</p><p style="color:#24292f; text-align:start"><strong>方案：</strong></p><p style="color:#24292f; text-align:start">可以将数据进行放到内存中缓存处理，在用户的整个操作周期内只从 localStorage 获取一次数据，需要注意的是每次对数据进行操作时，需要将 localStorage 和内存缓存的数据同步更新。</p><span id="OSC_h2_9"></span><h2>数据类型转换</h2><p style="color:#24292f; text-align:start"><strong>问题：</strong></p><p style="color:#24292f; text-align:start">在存储和读取数据时，需要将数据进行序列化和反序列化操作。这些操作可能会导致性能问题。</p><p style="color:#24292f; text-align:start"><strong>方案：</strong></p><p style="color:#24292f; text-align:start">使用 JSON.stringify() 和 JSON.parse() 函数来处理数据的序列化和反序列化。</p><p style="color:#24292f; text-align:start">经过对 localStorage 存储优化以后，在红米 note 11 上面进行了简单测试，首屏打开速度提升，对于整体提升首屏提升约<span>&nbsp;</span><strong>2%</strong>。</p><span id="OSC_h1_10"></span><h1>七、动效执行时机</h1><p style="color:#24292f; text-align:start">页面存在渐入渐现的动效，在页面首次加载时，由于渐现动效的存在，会延迟用户感知该模块，从而导致感觉页面存在更多时间的白屏，动效如下：<span>&nbsp;</span><img alt="203.gif" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/203.gif" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">核心问题是首次渲染直出 DOM 结构，不走渐现动效便可，这个比较偏向于逻辑处理，属于体验优化的范畴，主打的就是在后续有相关首屏动效时，有意识对其做一下处理，保证首屏首次渲染的完整度。</p><span id="OSC_h1_11"></span><h1>八、渲染模块的取舍</h1><p style="color:#24292f; text-align:start">首先看一下两种状态各自的样式：未签到 VS 已签到。<img alt="204.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/204.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">签到业务的日历会根据用户当天签到状态进行渲染，存在已签到和未签到两种渲染逻辑，由于当前的架构限制，并不能在预渲染时感用户的签到状态，导致日历部分的渲染会滞后，严重影响页面的首屏渲染速度。</p><p style="color:#24292f; text-align:start"><strong>第一版本优化</strong></p><p style="color:#24292f; text-align:start">将签到状态进行缓存，当用户进入签到时的大致流程如下：<img alt="207.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/207.jpeg" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">当用户进入页面时，会优先获取缓存中的数据进行渲染，确保用户可以第一时间看到日历部分的渲染，这里需要注意：1. 缓存需要结合用户 token 一起判断，避免造成切换账号时造成数据污染。2. 若是用户第一次进入或者当天未签到，会使用系统时间作为小日历上的数字展示，当用户修改了系统时间设置时，日期判断会存在误差。</p><p style="color:#24292f; text-align:start">缓存数据必然会先于接口响应数据，因此页面第一时间看到的肯定是缓存数据（没有缓存数据，会默认使用未签到数据）所渲染的页面，那么当接口响应完成时，需要使用真实的数据触发页面的 rerender，需要注意处理，避免造成页面闪烁。</p><p style="color:#24292f; text-align:start">虽然这样做可以提高页面的渲染体感，当进入页面时，顶部区域还是会存在一定时间的空白，毕竟还是需要执行 JS 后才能执行骨架渲染逻辑，本质提升速度为：接口响应时间 - JS 执行时间，在低端机表现会较为好一些，高端机体感并非太明显。</p><p style="color:#24292f; text-align:start"><strong>第二版优化</strong></p><p style="color:#24292f; text-align:start">日历部分由于已签到和未签到的样式存在着较大的出入，不能像某些竞品一样：已签、未签的整体页面布局并未有区分，使用一套公用的渲染逻辑，这样也导致签到业务需要将渲染日历部分的动作滞后，那么核心就是怎么解决这个问题。</p><p style="color:#24292f; text-align:start">综合考虑后，决定将未签到样式作为预渲染时直接生成 DOM，这样可以保证用户未签到的状态下进入到页面可以第一时间对的状态，也可以更快的完成首屏的渲染。</p><p style="color:#24292f; text-align:start">若是用户已签到，便在此基础之上覆用今日签到的逻辑，就是会在签到完成后展示一个小的动效，将小日历变成大日历的样式。这样做的好处可以是获取到用户真实状态后，自动切换到大日历状态，效果如下。<img alt="309.gif" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/309.gif" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">结合用户行为分析：多数用户一天不会多次访问，也就是在即不怎么牺牲高频率访问用户的体验之下，提高了绝大多数用户的体验。</p><span id="OSC_h1_12"></span><h1>九、首屏数据优先请求</h1><p style="color:#24292f; text-align:start"><strong>前置小知识：最大并发请求数</strong></p><p style="color:#24292f; text-align:start">为了避免浏览器过度占用系统资源，浏览器对于同一域名下的请求数量是有一定限制的，也就是常见的浏览器最大请求数量。</p><p style="color:#24292f; text-align:start">以 Chrome 浏览器举例：同一域名下，HTTP 协议最多允许同时存在 6 个 TCP 连接进行，HTTPS 协议最多为 4 个。</p><p style="color:#24292f; text-align:start"><strong>业务现状</strong></p><p style="color:#24292f; text-align:start">签到进入页面共计加载许多接口。</p><p style="color:#24292f; text-align:start">其中首屏渲染需要的几个核心接口如图红色标记所示，核心的接口滞后会导致页面数据渲染的更慢，严重影响体验，那么到底影响多少呢？可以在浏览器 Network 中查看 Waterfall。<img alt="304.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/304.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">核心接口是在其他完成后开始，是因为其没有赶上浏览器第一批次接口请求队列中，需要等待前面某些接口结束后，才会将其放到请求队列中。</p><p style="color:#24292f; text-align:start"><strong>动作</strong></p><p style="color:#24292f; text-align:start">有了问题，接下来便是如何做：</p><ul><li><p>首先是制定方案，如何确保接口的请求可以搭上浏览器请求队列的第一班车，本质是将之前散落在各个组件内的 useEffect 中的初始化逻辑进行提取，统一触发。</p></li><li><p>梳理接口和首屏渲染的关联度，确定哪些接口的优先级权重更高。</p></li></ul><p style="color:#24292f; text-align:start">核心代码如下：</p><pre><code>export const StartModule = createRM(
  {
    init() {
      SigninTopModule?.actions?.getHomeData()
      AdModule?.actions?.reqAdInfoList()
      HomeModule?.actions?.getBubbleList()
    },
  }
)
</code></pre><p style="color:#24292f; text-align:start">在页面初始化时执行 StartModule?.actions?.init()，将核心接口优化执行，通过控制接口请求顺序，签到业务在此提升了大致<span>&nbsp;</span><strong>6-8%</strong><span>&nbsp;</span>的首屏渲染速度。</p><span id="OSC_h1_13"></span><h1>十、字体使用和优化</h1><p style="color:#24292f; text-align:start">字体加载和优化是前端开发中的一个重要问题，特别是在移动端和低网络状况下。下面是一些字体加载和优化的技巧。</p><p style="color:#24292f; text-align:start"><strong>FOUT 问题</strong></p><p style="color:#24292f; text-align:start">通过设置 Font-Display 属性可以控制字体加载时的显示效果，包括 Auto、Swap、Block、FallBack 和 Optional 几种模式，可以减少字体加载时间和防止文本闪烁。</p><p style="color:#24292f; text-align:start">设置属性为 FallBack 时效果：<span>&nbsp;</span><img alt="33.gif" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/33.gif" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看到日期存在明显的 FOUT（无样式文本闪现）问题，设置 Swap 也是类似效果，并不符合预期。</p><p style="color:#24292f; text-align:start">设置属性为 Block 时效果：<span>&nbsp;</span><img alt="22.gif" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/22.gif" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看到第一时间并没有渲染日期，而是有点的短暂空白，因为其可以避免 FOUT，字体文件必须在后台下载完全后，文本才能显示。</p><p style="color:#24292f; text-align:start">最终选择了 font-display: block；效果会更好一些。</p><p style="color:#24292f; text-align:start">注意，并不是整个页面都使用 Block 属性，对于一些非首屏关键渲染的样式，使用 fallback 更为合适一些，因为其会使用浏览器默认字体，所以还是需要结合业务、场景合理使用。</p><p style="color:#24292f; text-align:start"><strong>字体库大小，你得懂</strong></p><p style="color:#24292f; text-align:start">先看一个 GPT 对于签到业务常用字体库打下的统计：</p><blockquote><p>DIN Condensed 字体库的大小在几百 KB 到几 MB 之间 Helvetica Neue 字体库的大小在几 MB 到十几 MB 之间</p></blockquote><p style="color:#24292f; text-align:start">也就是这两种字体的大小，如果不加以处理，全部加载的大小在<strong>几 MB 到十几 MB</strong><span>&nbsp;</span>之间，对于前端项目而言，这是挺夸张的一件事。</p><p style="color:#24292f; text-align:start">可以和设计人员沟通，将字体库中常用的字体导出，前端项目仅仅引入需要的字体就好，比如 DIN Condensed 字体都是使用在阿拉伯数字上，并不会在其他字上使用，那么只需要将阿拉伯数字导出即可。比如汉字，根据《现代汉语通用字表》（GB/T 13000-2018），常用汉字（包括简体字和繁体字）共计 3500 个，其中常用的一般是指前 1000 个左右的汉字，那么在使用字体库的时候，是不是可以默认只需要导出部分即可。</p><p style="color:#24292f; text-align:start">经过处理后的字体库大小如下图：<img alt="0981.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/0981.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>字体库数量，你得控制</strong></p><p style="color:#24292f; text-align:start">上面说了一个字体库的大小是多大，就算是经过处理，最少也会有 30KB 大小，所以项目引入的字体种类是需要控制的，不能设计同学使用了多少种类字体设计，我们就要照单全收。</p><p style="color:#24292f; text-align:start">当设计同学新增字体库时，如果字体使用在 3 次以内，是不是可以使用图片来代替文字，或者使用现有的字体库来平替。</p><span id="OSC_h1_14"></span><h1>十一、慎用三方库</h1><p style="color:#24292f; text-align:start">业务中存在一些简单的校验、转换和动效并不需要引入三方库，尤其是因为一个较为简单的功能引入了一个较为大且冷门的库时，不仅会增加项目的打包体积，还会增加项目后续维护的沟通、学习成本。</p><p style="color:#24292f; text-align:start">例如下面一个简单切换动效：<span>&nbsp;</span><img alt="210.gif" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/210.gif" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">是一个比较常规的切换动效，却在项目中引入了一个第三方库来实现，该库的使用也是有一些学习成本，因为其具备实现比较复杂的动效能力，在业务动效具备一定复杂度且非首屏的场景下，是可以考虑引入使用的，否则类似这种首屏便需要加载的动效，还是慎重。</p><p style="color:#24292f; text-align:start">上述的切换动效 CSS 实现代码如下：</p><pre><code>@keyframes bigScale {
  0% {
    opacity: 0;
    transform: scale(0.95);
  }

  to {
    transform: scale(1);
    opacity: 1;
  }
}

@keyframes smallScale {
  0% {
    transform: scale(1);
    opacity: 1;
  }

  to {
    transform: scale(0.95);
    opacity: 0;
  }
}

.squareInCenter {
  animation: 0.3s linear 0s 1 normal forwards running bigScale;
}

.squareOutCenter {
  animation: 0.3s linear 0s 1 normal forwards running smallScale;
}
</code></pre><p style="color:#24292f; text-align:start">在业务开发的过程中，尤其是 C 端的页面，在实现功能时对于引入额外的库是一件需要十分谨慎的事情，在内部就看到不少项目在引入关于日期处理方面的库时，DayJS、MomentJS 同时都会引用到项目中，B 端项目都不能忍，更何况 C 端项目。</p><span id="OSC_h1_15"></span><h1>十二、总结</h1><p style="color:#24292f; text-align:start">本文仅仅介绍得物前端增长团队在互动游戏侧一些体验优化实践心得，后续还在不断迭代和优化，将实践经验应用扩大至多个业务中，将整个互动游戏性能体验优化至 TOP 级别。</p><p style="color:#24292f; text-align:start">*<strong>文/来骏</strong></p><p style="color:#24292f; text-align:start">&nbsp;</p><p style="color:#252933; text-align:start">本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" rel="nofollow" target="_blank">得物技术官网</a></p><p style="color:#252933; text-align:start">未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 23 Feb 2024 06:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/11044519</guid>
            <link>https://my.oschina.net/u/5783135/blog/11044519</link>
            <author>
                <![CDATA[得物技术]]>
            </author>
        </item>
    </channel>
</rss>
