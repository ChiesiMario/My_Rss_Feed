<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 03 Dec 2023 15:00:28 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[腾讯视频出现服务故障]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今日晚间，大量网友反馈称腾讯视频陆续出现网络故障，具体表现包括不限于首页无法加载内容、VIP 用户看不了会员视频等等。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fbded3b9e2461b9d04e455454ad632a16a.png" referrerpolicy="no-referrer"></p><p>针对这一问题，腾讯视频回应称：目前腾讯视频出现了短暂技术问题，正在加紧修复，各项功能在逐步恢复中。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-899c4218fa5a6cdf5b7eee20ecd37feef59.png" referrerpolicy="no-referrer"></p></blockquote><p>腾讯客服表示：关于腾讯视频会员用户无法观看影片的问题，非常抱歉，技术人员已经紧急修复处理，辛苦您重启 App 再次尝试观看，感谢您的支持和陪伴。</p><p>目前，「腾讯视频崩了」已经登顶微博热搜，目前该话题已经有 11.2 亿的阅读量和 22.8 万次讨论。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8e92af99ecae1719adadcb80374d59c0f61.png" referrerpolicy="no-referrer"></p><p>根据微博网友反馈，自己即使是 VIP 用户，也会出现无法观看会员内容的情况。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 14:26:18 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269337</guid>
            <link>https://www.oschina.net/news/269337</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[巴西颁布了一部完全由 ChatGPT 编写的法案]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">今年 10 月份，巴西市第二大城市阿雷格里港的立法者在不知情的情况下，通过了似乎是该国第一部完全由人工智能编写的法案。该法案旨在防止城市向纳税人收取更换被盗水表的费用；其中 36 名议员投票一致通过了该提案，并于 11 月底生效。</span></p><p><span style="color:#000000">时至今日，市议员 Ramiro Rosário 则向<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapnews.com%2Farticle%2Fbrazil-artificial-intelligence-porto-alegre-5afd1240afe7b6ac202bb0bbc45e08d4" target="_blank">美联社</a>透露，该法案其实是由聊天机器人编写的。他实际上使用 ChatGPT 撰写了相关提案，并在没有做出任何改动的基础上将此呈现给了其他 35 名同僚，同时有意对他们隐瞒了内容的来源。</span></p><p><span style="color:#000000">「如果我在此之前透露了这一消息，该提案肯定不会被付诸表决。如果仅仅因为该项目是由人工智能编写的，就冒着不被批准的风险，这对民众来说是不公平的。」</span></p><p><img height="269" src="https://oscimg.oschina.net/oscnet/up-5cdb167b97dbc135bce51409c0865d3ff48.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">Rosário 表示，自己仅在 ChatGPT 中输入了 49 个字的提示，就在几秒钟内收到了该工具返回的完整提案草案，其中还包括理由说明。所以他此举的目的不仅仅是为了解决一个地方性问题，还希望引发一场辩论。</span></p><p><span style="color:#000000">他深信人类将经历一场新的技术革命。并认为，人类文明所开发的所有工具既可以用来为恶，也可以用来为善。「这也就是为什么我们必须展示如何将其用于善」。</span></p><p><span style="color:#000000">法案真相的浮现引发了诸多的反对意见，并对 AI 在公共政策中的作用提出了质疑。市议会主席 Hamilton Sossmeier 此前曾发言谴责 Rosário 的做法，并称这是一个"危险的先例"。但他的想法如今似乎也出现了动摇，"我改变了主意。我开始更深入地阅读，发现不管是不幸还是幸运，这都将成为一种趋势。"</span></p><p><span style="color:#000000">事实上，Rosário 并不是首例。美国<span style="background-color:#ffffff">马萨诸塞州的民主党州参议员 Barry Finegold 早些时候也向 ChatGPT 求助，帮助起草一项旨在监管包括 ChatGPT 在内的人工智能模型的法案。该法案于今年早些时候提交，但目前尚未进行投票。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Finegold 在接受采访时表示，ChatGPT 可以帮助解决立法过程中一些较为繁琐的问题，包括正确、快速地搜索和引用已颁布的法律。不过，他也补充说明，关键是要让每个人都知道在这个过程中使用了 ChatGPT 或类似的工具，保持透明度。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">目前，使用像 ChatGPT 这样的大型语言模型来编写法律文档目前存在争议且存在风险，特别是因为系统往往会伪造信息和产生幻觉。研究表明，所有聊天机器人在总结文档时都有引入错误信息的可能，最先进的 GPT 模型的错误率约为 3%，而谷歌的一个模型的错误率约为 27%。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">今年上半年，纽约就有律师因在诉讼中引用 ChatGPT 编造的虚假法律案例而遭到抨击。</span></span></p><p style="text-align:start"><strong><span style="color:#000000"><span style="background-color:#ffffff">相关阅读：</span></span></strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/242932/lawsuit-chatgpt-false-case-citations" target="news">律师借助 ChatGPT 打官司，资料造假危及职业生涯</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 04:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269286/brazil-ordinance-chatgpt</guid>
            <link>https://www.oschina.net/news/269286/brazil-ordinance-chatgpt</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[复旦大学发布保险领域专用大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">复旦大学保险团队发布了一款自主研发的保险领域专用大模型——「保险智酷」，旨在为保险场景下的各类用户提供专业、智能、全面的数字化服务</span></p><p><span style="background-color:#ffffff; color:#222222">根据介绍，「保险智酷」基于复旦保险多年沉淀积累的中文保险语料库，通过引入专家知识、构建思维链与 LLM 数据蒸馏的方式，构建了以保险知识问答、保险知识检索、保险案例分析、保险个性化服务等为基础任务的大语言模型训练数据集，并在此基础上对通用基座大模型进行训练微调。</span></p><p><span style="background-color:#ffffff; color:#222222">具备以下核心能力：</span></p><ul><li><span style="background-color:#ffffff; color:#222222">丰富的保险知识，「保险智酷」模型融合了广泛的保险领域知识，能够以保险专家的身份对用户面临的保险相关问题进行解答；</span></li><li><span style="background-color:#ffffff; color:#222222">保险知识检索，通过配备检索模块，为模型构建了对保险知识的检索和应用能力，确保了模型在处理保险法规、条款、案例分析时能够准确地引用正确的保险知识和数据；</span></li><li><span style="background-color:#ffffff; color:#222222">保险文本理解与处理，「保险智酷」具备保险语境理解与文本处理能力，能够有效应对如信息提取、文本总结、文本扩写等 NLP 任务； </span></li><li><span style="background-color:#ffffff; color:#222222">保险个性化服务，能够根据用户的信息和需求，提供定制化的保险建议和解决方案；</span></li><li><span style="background-color:#ffffff; color:#222222">保险案例分析，能够结合国家政策法规对保险案例进行深入分析与解读。</span></li></ul><p>此外，<span style="background-color:#ffffff; color:#222222">复旦保险团队还搭建了基于「保险智酷」的一体化服务平台。平台以海量法规、条款、报告数据为基础，以「保险智酷」大模型为核心，集成数据分析、可视化处理、文生图片等一系列能力，实现多角色、多场景的保险个性化服务。</span>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:53:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269282</guid>
            <link>https://www.oschina.net/news/269282</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Veilid —— 反数据收集开源框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Veilid（读作 "Vay-Lid"，源自 "Valid and Veiled Identification"），是一个点对点网络，用于轻松共享各种数据。</p><p>Veilid 允许任何人创建分布式私人应用程序，许用户选择退出数据收集和在线跟踪。Veilid 以用户体验、隐私和安全为首要任务。</p><p>Veilid 在设计时考虑到了社交维度，因此每个用户都可以在网络上存储个人内容，也可以与自己选择的其他人共享这些内容，如果愿意，还可以与全世界共享。</p><p>Veilid 网络的主要目的是为特定类型的共享数据提供基础设施：各种形式的社交媒体。这包括轻量级内容（例如 Twitter 的 tweets 或&nbsp; Mastodon 的 toots）、中等量级内容（例如图像和歌曲）以及重量级内容（例如视频）。个人订阅、回复、私人消息等 Meta-content 也旨在在 Veilid 上运行。</p><p>Veilid 超越了现有的隐私技术，有可能彻底改变人们使用互联网的方式。Veilid 没有盈利动机，可以在不损害资本主义的情况下促进理想的实现。</p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/veilid</guid>
            <link>https://www.oschina.net/p/veilid</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | Go 实现的接口在线文档管理系统 MinDoc]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-mindoc-简介" class="anchor" href="https://gitee.com/gsw945/mindoc#mindoc-%E7%AE%80%E4%BB%8B"></a>MinDoc 简介</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Ftravis-ci.com%2Fmindoc-org%2Fmindoc"><img src="https://travis-ci.com/mindoc-org/mindoc.svg?branch=master" alt="Build Status" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fci.appveyor.com%2Fproject%2Fmindoc-org%2Fmindoc"><img src="https://ci.appveyor.com/api/projects/status/7680ia6mu29m12wx?svg=true" alt="Build status" referrerpolicy="no-referrer"></a></p><p>MinDoc 是一款针对 IT 团队开发的简单好用的文档管理系统。</p><p>MinDoc 的前身是 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671%2FSmartWiki">SmartWiki</a> 文档系统。SmartWiki 是基于 PHP 框架 laravel 开发的一款文档管理系统。因 PHP 的部署对普通用户来说太复杂，所以改用 Golang 开发。可以方便用户部署和实用。</p><p>开发缘起是公司 IT 部门需要一款简单实用的项目接口文档管理和分享的系统。其功能和界面源于 kancloud 。</p><p>可以用来储存日常接口文档，数据库字典，手册说明等文档。内置项目管理，用户管理，权限管理等功能，能够满足大部分中小团队的文档管理需求。</p><h5><a id="user-content-演示站点文档" class="anchor" href="https://gitee.com/gsw945/mindoc#%E6%BC%94%E7%A4%BA%E7%AB%99%E7%82%B9%E6%96%87%E6%A1%A3"></a>演示站点&amp;文档:</h5><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.iminho.me%2Fwiki%2Fdocs%2Fmindoc%2F">https://www.iminho.me/wiki/docs/mindoc/</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdoc.gsw945.com%2Fdocs%2Fmindoc-docs%2F">https://doc.gsw945.com/docs/mindoc-docs/</a></li></ul><hr><h3><a id="user-content-开发维护使用-悉知" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%BC%80%E5%8F%91%E7%BB%B4%E6%8A%A4%E4%BD%BF%E7%94%A8-%E6%82%89%E7%9F%A5"></a>开发&amp;维护&amp;使用，悉知</h3><ul><li>感谢作者 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671">lifei6671</a> 创造了 MinDoc，并持续维护了很久。</li><li>作者因工作等原因，精力有限，无法花费足够的时间来持续维护 mindoc，已于北京时间 2021 年 3 月 23 日将 mindoc 交给社区 (github 组织<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org">mindoc-org</a>) 维护，期待热心开发者加入<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org">mindoc-org</a>一起来维护 MinDoc。</li><li>遇到问题请提 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fissues">Issues</a>，欢迎使用者和贡献者加入 QQ 群 <code>1051164153</code><a target="_blank" href="https://gitee.com/link?target=https%3A%2F%2Fqm.qq.com%2Fcgi-bin%2Fqm%2Fqr%3Fk%3DbHFR7P3Qp1nsSPbsTw4KN_ZpFLUAblIU%26jump_from%3Dwebapi"><img border="0" src="https://pub.idqqimg.com/wpa/images/group.png" alt="MinDoc 使用&amp;开发交流群" title="MinDoc 使用&amp;开发交流群" referrerpolicy="no-referrer"></a></li><li>对开发感兴趣请关注 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1">Development</a>:
<ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1%23column-13554511">Todo List</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1%23column-13554512">Work in progress</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fprojects%2F1%23column-13554513">Review in progress</a></li></ul></li><li>Mindoc 基于 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbeego%2Fbeego">beeego</a> 开发，beego 文档地址: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbeego%2Fbeego-doc%2Ftree%2Fmain%2Fdocs%2Fzh">https://github.com/beego/beego-doc/tree/main/docs/zh</a></li><li><img class="emoji" alt=":warning:" style="vertical-align: middle" src="https://cn-assets.gitee.com/assets/emoji/warning-e22260ba8d6c6bc2c0b65eabb98299bf.png" width="14" height="14" referrerpolicy="no-referrer"><strong>特别声明</strong>:
<ul><li>原作者 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671">lifei6671</a> 已于 2021-08-06 删除了个人捐赠信息，参见: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fcommit%2F1a179179c1fe4d0d4db95e0b757d863aee5bf395">1a179179c1fe4d0d4db95e0b757d863aee5bf395</a></li><li>截止目前 (2023-03-27)，<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org">mindoc-org</a> 暂未发布任何捐赠信息，请勿轻信</li></ul></li></ul><hr><h1><a id="user-content-安装与使用" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8"></a>安装与使用</h1><p><del>如果你的服务器上没有安装 golang 程序请手动设置一个环境变量如下：键名为 ZONEINFO，值为 MinDoc 跟目录下的/lib/time/zoneinfo.zip 。</del></p><p>更多信息请查看手册： <a href="https://gitee.com/link?target=https%3A%2F%2Fwww.iminho.me%2Fwiki%2Fdocs%2Fmindoc%2Fmindoc-summary.md">MinDoc 使用手册</a></p><p>对于没有 Golang 使用经验的用户，可以从 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Freleases">https://github.com/mindoc-org/mindoc/releases</a> 这里下载编译完的程序。</p><p>如果有 Golang 开发经验，建议通过编译安装，要求 golang 版本不小于 1.15.1(需支持<code>CGO</code>、<code>go mod</code>和<code>import _ "time/tzdata"</code>)(推荐 Go 版本为 1.18.1)。</p><blockquote><p>注意: CentOS7 上 GLibC 版本低，常规编译版本不能使用。需要自行源码编译,或使用使用 musl 编译版本。</p></blockquote><h2><a id="user-content-常规编译" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%B8%B8%E8%A7%84%E7%BC%96%E8%AF%91"></a>常规编译</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 克隆源码</span></span><span id="LC2" class="line">git clone https://github.com/mindoc-org/mindoc.git</span><span id="LC3" class="line"><span class="c"># go 包安装</span></span><span id="LC4" class="line">go mod tidy <span class="nt">-v</span></span><span id="LC5" class="line"><span class="c"># 编译 (sqlite 需要 CGO 支持)</span></span><span id="LC6" class="line">go build <span class="nt">-ldflags</span><span class="s2">"-w"</span><span class="nt">-o</span> mindoc main.go</span><span id="LC7" class="line"><span class="c"># 数据库初始化 (此步骤执行之前，需配置`conf/app.conf`)</span></span><span id="LC8" class="line">./mindoc <span class="nb">install</span></span><span id="LC9" class="line"><span class="c"># 执行</span></span><span id="LC10" class="line">./mindoc</span><span id="LC11" class="line"><span class="c"># 开发阶段运行</span></span><span id="LC12" class="line">bee run</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>MinDoc 如果使用 MySQL 储存数据，则编码必须是<code>utf8mb4_general_ci</code>。请在安装前，把数据库配置填充到项目目录下的 <code>conf/app.conf</code> 中。</p><p>如果使用 <code>SQLite</code> 数据库，则直接在配置文件中配置数据库路径即可.</p><p>如果 conf 目录下不存在 <code>app.conf</code> 请重命名 <code>app.conf.example</code> 为 <code>app.conf</code>。</p><p><strong>默认程序会自动初始化一个超级管理员用户：admin 密码：123456 。请登录后重新设置密码。</strong></p><h2><a id="user-content-linux 系统中不依赖 glibc 的编译方式" class="anchor" href="https://gitee.com/gsw945/mindoc#linux%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%B8%8D%E4%BE%9D%E8%B5%96glibc%E7%9A%84%E7%BC%96%E8%AF%91%E6%96%B9%E5%BC%8F"></a>Linux 系统中不依赖 gLibC 的编译方式</h2><h3><a id="user-content-安装-musl-gcc" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%AE%89%E8%A3%85-musl-gcc"></a>安装 musl-gcc</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">wget <span class="nt">-c</span> http://musl.libc.org/releases/musl-1.2.2.tar.gz</span><span id="LC2" class="line"><span class="nb">tar</span><span class="nt">-xvf</span> musl-1.2.2.tar.gz</span><span id="LC3" class="line"><span class="nb">cd </span>musl-1.2.2</span><span id="LC4" class="line">./configure</span><span id="LC5" class="line">make</span><span id="LC6" class="line"><span class="nb">sudo </span>make <span class="nb">install</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-使用-musl-gcc-编译-mindoc" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%BD%BF%E7%94%A8-musl-gcc-%E7%BC%96%E8%AF%91-mindoc"></a>使用 musl-gcc 编译 mindoc</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">go mod tidy <span class="nt">-v</span></span><span id="LC2" class="line"><span class="nb">export </span><span class="nv">GOARCH</span><span class="o">=</span>amd64</span><span id="LC3" class="line"><span class="nb">export </span><span class="nv">GOOS</span><span class="o">=</span>linux</span><span id="LC4" class="line"><span class="c"># 设置使用 musl-gcc</span></span><span id="LC5" class="line"><span class="nb">export </span><span class="nv">CC</span><span class="o">=</span>/usr/local/musl/bin/musl-gcc</span><span id="LC6" class="line"><span class="c"># 设置版本</span></span><span id="LC7" class="line"><span class="nb">export </span><span class="nv">TRAVIS_TAG</span><span class="o">=</span>temp-musl-v<span class="sb">`</span><span class="nb">date</span> +%y%m%d<span class="sb">`</span></span><span id="LC8" class="line">go build <span class="nt">-v</span><span class="nt">-o</span> mindoc_linux_musl_amd64 <span class="nt">-ldflags</span><span class="o">=</span><span class="s2">"-linkmode external -extldflags '-static' -w -X 'github.com/mindoc-org/mindoc/conf.VERSION=</span><span class="nv">$TRAVIS_TAG</span><span class="s2">' -X 'github.com/mindoc-org/mindoc/conf.BUILD_TIME=</span><span class="sb">`</span><span class="nb">date</span><span class="sb">`</span><span class="s2">' -X 'github.com/mindoc-org/mindoc/conf.GO_VERSION=</span><span class="sb">`</span>go version<span class="sb">`</span><span class="s2">'"</span></span><span id="LC9" class="line"><span class="c"># 验证</span></span><span id="LC10" class="line">./mindoc_linux_musl_amd64 version</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-windows-上后台运行" class="anchor" href="https://gitee.com/gsw945/mindoc#windows-%E4%B8%8A%E5%90%8E%E5%8F%B0%E8%BF%90%E8%A1%8C"></a>Windows 上后台运行</h2><p>使用 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc-daemon">mindoc-daemon</a></p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c">#邮件配置-示例</span></span><span id="LC2" class="line"><span class="c">#是否启用邮件</span></span><span id="LC3" class="line"><span class="py">enable_mail</span><span class="p">=</span><span class="s">true</span></span><span id="LC4" class="line"><span class="c">#smtp 服务器的账号</span></span><span id="LC5" class="line"><span class="py">smtp_user_name</span><span class="p">=</span><span class="s">admin@iminho.me</span></span><span id="LC6" class="line"><span class="c">#smtp 服务器的地址</span></span><span id="LC7" class="line"><span class="py">smtp_host</span><span class="p">=</span><span class="s">smtp.ym.163.com</span></span><span id="LC8" class="line"><span class="c">#密码</span></span><span id="LC9" class="line"><span class="py">smtp_password</span><span class="p">=</span><span class="s">1q2w3e__ABC</span></span><span id="LC10" class="line"><span class="c">#端口号</span></span><span id="LC11" class="line"><span class="py">smtp_port</span><span class="p">=</span><span class="s">25</span></span><span id="LC12" class="line"><span class="c">#邮件发送人的地址</span></span><span id="LC13" class="line"><span class="py">form_user_name</span><span class="p">=</span><span class="s">admin@iminho.me</span></span><span id="LC14" class="line"><span class="c">#邮件有效期 30 分钟</span></span><span id="LC15" class="line"><span class="py">mail_expired</span><span class="p">=</span><span class="s">30</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-使用 docker 部署" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%BD%BF%E7%94%A8docker%E9%83%A8%E7%BD%B2"></a>使用 Docker 部署</h1><p>如果是 Docker 用户，可参考项目内置的 Dockerfile 文件自行编译镜像 (编译命令见 Dockerfile 文件底部注释，仅供参考)。</p><p>在启动镜像时需要提供如下的常用环境变量 (全部支持的环境变量请参考: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fmindoc-org%2Fmindoc%2Fblob%2Fmaster%2Fconf%2Fapp.conf.example"><code>conf/app.conf.example</code></a>)：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="err">DB_ADAPTER</span><span class="err">指定 DB 类型 (默认为 sqlite)</span></span><span id="LC2" class="line"><span class="err">MYSQL_PORT_3306_TCP_ADDR</span><span class="err">MySQL 地址</span></span><span id="LC3" class="line"><span class="err">MYSQL_PORT_3306_TCP_PORT</span><span class="err">MySQL 端口号</span></span><span id="LC4" class="line"><span class="err">MYSQL_INSTANCE_NAME</span><span class="err">MySQL 数据库名称</span></span><span id="LC5" class="line"><span class="err">MYSQL_USERNAME</span><span class="err">MySQL 账号</span></span><span id="LC6" class="line"><span class="err">MYSQL_PASSWORD</span><span class="err">MySQL 密码</span></span><span id="LC7" class="line"><span class="err">HTTP_PORT</span><span class="err">程序监听的端口号</span></span><span id="LC8" class="line"><span class="err">MINDOC_ENABLE_EXPORT</span><span class="err">开启导出 (默认为 false)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-举个栗子-当前公开镜像信息页面-httpscrconsolealiyuncomimagescn-hangzhoumindoc-orgmindocdetail--需要登录阿里云账号才可访问列表" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-%E5%BD%93%E5%89%8D%E5%85%AC%E5%BC%80%E9%95%9C%E5%83%8F%E4%BF%A1%E6%81%AF%E9%A1%B5%E9%9D%A2-httpscrconsolealiyuncomimagescn-hangzhoumindoc-orgmindocdetail--%E9%9C%80%E8%A6%81%E7%99%BB%E5%BD%95%E9%98%BF%E9%87%8C%E4%BA%91%E8%B4%A6%E5%8F%B7%E6%89%8D%E5%8F%AF%E8%AE%BF%E9%97%AE%E5%88%97%E8%A1%A8"></a>举个栗子-当前 (公开) 镜像 (信息页面: <a href="https://gitee.com/link?target=https%3A%2F%2Fcr.console.aliyun.com%2Fimages%2Fcn-hangzhou%2Fmindoc-org%2Fmindoc%2Fdetail">https://cr.console.aliyun.com/images/cn-hangzhou/mindoc-org/mindoc/detail</a> , 需要登录阿里云账号才可访问列表)</h4><h5><a id="user-content-windows" class="anchor" href="https://gitee.com/gsw945/mindoc#windows"></a>Windows</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">set </span><span class="nv">MINDOC</span><span class="o">=</span>//d/mindoc</span><span id="LC2" class="line">docker run <span class="nt">-it</span><span class="nt">--name</span><span class="o">=</span>mindoc <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-v</span><span class="s2">"%MINDOC%/conf"</span>:<span class="s2">"/mindoc/conf"</span><span class="nt">-p</span> 8181:8181 <span class="nt">-e</span><span class="nv">MINDOC_ENABLE_EXPORT</span><span class="o">=</span><span class="nb">true</span><span class="nt">-d</span> registry.cn-hangzhou.aliyuncs.com/mindoc-org/mindoc:v2.1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="user-content-linuxmac" class="anchor" href="https://gitee.com/gsw945/mindoc#linuxmac"></a>Linux、Mac</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nb">export </span><span class="nv">MINDOC</span><span class="o">=</span>/home/ubuntu/mindoc-docker</span><span id="LC2" class="line">docker run <span class="nt">-it</span><span class="nt">--name</span><span class="o">=</span>mindoc <span class="nt">--restart</span><span class="o">=</span>always <span class="nt">-v</span><span class="s2">"</span><span class="k">${</span><span class="nv">MINDOC</span><span class="k">}</span><span class="s2">/conf"</span>:<span class="s2">"/mindoc/conf"</span><span class="nt">-p</span> 8181:8181 <span class="nt">-e</span><span class="nv">MINDOC_ENABLE_EXPORT</span><span class="o">=</span><span class="nb">true</span><span class="nt">-d</span> registry.cn-hangzhou.aliyuncs.com/mindoc-org/mindoc:v2.1</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h5><a id="user-content-举个栗子-更多环境变量示例镜像已过期仅供参考请以当前镜像为准" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%B8%BE%E4%B8%AA%E6%A0%97%E5%AD%90-%E6%9B%B4%E5%A4%9A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E7%A4%BA%E4%BE%8B%E9%95%9C%E5%83%8F%E5%B7%B2%E8%BF%87%E6%9C%9F%E4%BB%85%E4%BE%9B%E5%8F%82%E8%80%83%E8%AF%B7%E4%BB%A5%E5%BD%93%E5%89%8D%E9%95%9C%E5%83%8F%E4%B8%BA%E5%87%86"></a>举个栗子-更多环境变量示例 (镜像已过期，仅供参考，请以当前镜像为准)</h5><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">docker run <span class="nt">-p</span> 8181:8181 <span class="nt">--name</span> mindoc <span class="nt">-e</span><span class="nv">DB_ADAPTER</span><span class="o">=</span>mysql <span class="nt">-e</span><span class="nv">MYSQL_PORT_3306_TCP_ADDR</span><span class="o">=</span>10.xxx.xxx.xxx <span class="nt">-e</span><span class="nv">MYSQL_PORT_3306_TCP_PORT</span><span class="o">=</span>3306 <span class="nt">-e</span><span class="nv">MYSQL_INSTANCE_NAME</span><span class="o">=</span>mindoc <span class="nt">-e</span><span class="nv">MYSQL_USERNAME</span><span class="o">=</span>root <span class="nt">-e</span><span class="nv">MYSQL_PASSWORD</span><span class="o">=</span>123456 <span class="nt">-e</span><span class="nv">httpport</span><span class="o">=</span>8181 <span class="nt">-d</span> daocloud.io/lifei6671/mindoc:latest</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h4><a id="user-content-dockerfile 内容参考" class="anchor" href="https://gitee.com/gsw945/mindoc#dockerfile%E5%86%85%E5%AE%B9%E5%8F%82%E8%80%83"></a>dockerfile 内容参考</h4><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fblog.frytea.com%2Farchives%2F504%2F">无需代理直接加速各种 GitHub 资源拉取 | 国内镜像赋能 | 助力开发</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Fmirror%2Fubuntu">阿里云 - Ubuntu 镜像</a></li></ul><h3><a id="user-content-docker-compose-一键安装" class="anchor" href="https://gitee.com/gsw945/mindoc#docker-compose-%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85"></a>docker-compose 一键安装</h3><ol><li><p>修改配置文件
修改<code>docker-compose.yml</code>中的配置信息，主要修改<code>volumes</code>节点，将宿主机的两个目录映射到容器内。
<code>environment</code>节点，配置自己的环境变量。</p></li><li><p>一键完成所有环境搭建</p><blockquote><p>docker-compose up -d</p></blockquote></li><li><p>浏览器访问</p><blockquote><p><a href="https://gitee.com/link?target=http%3A%2F%2Flocalhost%3A8181%2F">http://localhost:8181/</a></p></blockquote><p>整个部署完成了</p></li><li><p>常用命令参考</p><ul><li><p>启动</p><blockquote><p>docker-compose up -d</p></blockquote></li><li><p>停止</p><blockquote><p>docker-compose stop</p></blockquote></li><li><p>重启</p><blockquote><p>docker-compose restart</p></blockquote></li><li><p>停止删除容器，释放所有资源</p><blockquote><p>docker-compose down</p></blockquote></li><li><p>删除并重新创建</p><blockquote><p>docker-compose -f docker-compose.yml down &amp;&amp; docker-compose up -d</p><p>更多 docker-compose 的使用相关的内容，请查看官网文档或百度</p></blockquote></li></ul></li></ol><h1><a id="user-content-项目截图" class="anchor" href="https://gitee.com/gsw945/mindoc#%E9%A1%B9%E7%9B%AE%E6%88%AA%E5%9B%BE"></a>项目截图</h1><p><strong>创建项目</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204438.png" alt="创建项目" referrerpolicy="no-referrer"></p><p><strong>项目列表</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203542.png" alt="项目列表" referrerpolicy="no-referrer"></p><p><strong>项目概述</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203619.png" alt="项目概述" referrerpolicy="no-referrer"></p><p><strong>项目成员</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203637.png" alt="项目成员" referrerpolicy="no-referrer"></p><p><strong>项目设置</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203656.png" alt="项目设置" referrerpolicy="no-referrer"></p><p><strong>基于 Editor.md 开发的 Markdown 编辑器</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501203854.png" alt="基于 Editor.md 开发的 Markdown 编辑器" referrerpolicy="no-referrer"></p><p><strong>基于 wangEditor 开发的富文本编辑器</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204651.png" alt="基于 wangEditor 开发的富文本编辑器" referrerpolicy="no-referrer"></p><p><strong>项目预览</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204609.png" alt="项目预览" referrerpolicy="no-referrer"></p><p><strong>超级管理员后台</strong></p><p><img src="https://raw.githubusercontent.com/lifei6671/mindoc/master/uploads/20170501204710.png" alt="超级管理员后台" referrerpolicy="no-referrer"></p><h1><a id="user-content-使用的技术 todo-最新技术栈整理中使用的第三方库升级中" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%BD%BF%E7%94%A8%E7%9A%84%E6%8A%80%E6%9C%AFtodo-%E6%9C%80%E6%96%B0%E6%8A%80%E6%9C%AF%E6%A0%88%E6%95%B4%E7%90%86%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%9A%84%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E5%8D%87%E7%BA%A7%E4%B8%AD"></a>使用的技术 (TODO: 最新技术栈整理中，使用的第三方库升级中)</h1><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbeego%2Fbeego">Beego</a><del>1.10.0</del></li><li>MySQL 5.6</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fpandao%2Feditor.md">editor.md</a> Markdown 编辑器</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ftwbs%2Fbootstrap">Bootstrap</a> 3.2</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fjquery%2Fjquery">jQuery</a> 库</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ffex-team%2Fwebuploader">WebUploader</a> 文件上传框架</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Frstacruz%2Fnprogress">NProgress</a> 库</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvakata%2Fjstree">jsTree</a> 树状结构库</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FFortAwesome%2FFont-Awesome">Font Awesome</a> 字体库</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ffengyuanchen%2Fcropper">Cropper</a> 图片剪裁库</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fsentsin%2Flayer">layer</a> 弹出层框架</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fhighlightjs%2Fhighlight.js">highlight.js</a> 代码高亮库</li><li><del>to-markdown</del><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fdomchristie%2Fturndown">Turndown</a> HTML 转 Markdown 库</li><li><del>quill 富文本编辑器</del></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwangeditor-team%2FwangEditor">wangEditor</a> 富文本编辑器
<ul><li>参考
<ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.bookstack.cn%2Fbooks%2Fwangeditor-4.7-zh">wangEditor v4.7 富文本编辑器教程</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fwangeditor-team%2FwangEditor%2Fissues%2F2493">扩展菜单注册太过繁琐 #2493</a></li></ul></li><li>工具： <code>https://babeljs.io/repl</code> + <code>@babel/plugin-transform-classes</code></li></ul></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fvuejs%2Fvue">Vue.js</a> 框架</li></ul><h1><a id="user-content-主要功能" class="anchor" href="https://gitee.com/gsw945/mindoc#%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD"></a>主要功能</h1><ul><li>项目管理，可以对项目进行编辑更改，成员添加等。</li><li>文档管理，添加和删除文档等。</li><li>评论管理，可以管理文档评论和自己发布的评论。</li><li>用户管理，添加和禁用用户，个人资料更改等。</li><li>用户权限管理 ， 实现用户角色的变更。</li><li>项目加密，可以设置项目公开状态，私有项目需要通过 Token 访问。</li><li>站点配置，可开启匿名访问、验证码等。</li></ul><h1><a id="user-content-参与开发" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%8F%82%E4%B8%8E%E5%BC%80%E5%8F%91"></a>参与开发</h1><p>我们欢迎您在 MinDoc 项目的 GitHub 上报告 issue 或者 pull request。</p><p>如果您还不熟悉 GitHub 的 Fork and Pull 开发模式，您可以阅读 GitHub 的文档（<a href="https://gitee.com/link?target=https%3A%2F%2Fhelp.github.com%2Farticles%2Fusing-pull-requests%25EF%25BC%2589">https://help.github.com/articles/using-pull-requests）</a> 获得更多的信息。</p><h1><a id="user-content-关于作者 lifei6671" class="anchor" href="https://gitee.com/gsw945/mindoc#%E5%85%B3%E4%BA%8E%E4%BD%9C%E8%80%85lifei6671"></a>关于作者<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Flifei6671">lifei6671</a></h1><p>一个不纯粹的 PHPer，一个不自由的 gopher 。</p>]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:40:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/gsw945/mindoc</guid>
            <link>https://gitee.com/gsw945/mindoc</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何画出规范的 UML 用例图]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote>
  如果你在做设计过程中有一些困惑，如：不会找用例、两个用例图分不清楚、不知道自己画的对不对。那么希望本文能帮助厘清上面几个问题，真正掌握用例图，在后面的设计中能运用的得心应手。 
</blockquote><p>在做设计的时候你是否有以下困惑？</p><p>1.不会找用例：业务用例、系统用例又都是啥啊？我该如何把用例写对啊？</p><p>2.两个用例图分不清楚：业务用例图和系统用例图感觉好像啊，似乎没啥区别啊？</p><p>3.不知道自己画的对不对：照猫画虎画了个用例图，但是我也不知道画的对不对，万一评审的人也不会呢，就这样交差吧</p><p>如果你在做设计过程中有以上困惑，那么希望本文能帮助厘清上面几个问题，真正掌握用例图，在后面的设计中能运用的得心应手。</p><span id="OSC_h3_1"></span><h3>一、如何识别正确的用例</h3><p>首先看用例的概念，百科上定义「用例是软件工程或系统工程中对系统如何反应外界请求的描述，是一种通过用户的使用场景来获取需求的技术」。什么意思呢，这里我引用《大象：Thinking in UML》里面的一段话来解释下这个定义</p><blockquote>
  这个世界的功能性体现在，首先有某人的一个愿望，这个愿望驱使人去做事并获得一个确定的结果。如果没有愿望，功能性就无从谈起。一个系统就是由各种各样的愿望组成的，换句话说，各种各样的人为着各自的目的做着各种各样的事情共同组成了一个系统。如果我们要描述一个系统的功能性需求，就要找到对这个系统有愿望的人，让他们来说明他们会在这个系统里做什么事，想要什么结果。如果所有对系统有愿望的人要做的所有事情都找全了，那这个系统的功能性就被确定下来了。 
</blockquote><p>用例的一个最主要的特征是它是相对独立的。这意味着它不需要与其他用例交互而独自完成参与者的目的，也就是说用例从「功能」上说是完备的。用例本质体现了系统参与者的愿望，不能完整达到参与者愿望的不能称为用例。例如取钱是一个有效的用例，填写取款单却不是，因为完整的目的是取到钱，没有人会为了填写取款单而专门跑一趟银行的。</p><p>用例有两种，业务用例和系统用例，那么我们如何准确的识别用例呢？接下来我们就对业务用例、系统用例逐一分析。</p><span id="OSC_h4_2"></span><h4><strong>1.1 业务用例</strong></h4><p>业务用例的定义是业务执行者希望通过和所研究组织交互获得的价值。</p><p>我们可以看到一个关键词--价值，这个价值不是指你（组织）能提供什么而是指我（执行者）想要什么，这个时候就需要把视角放在组织外部，切换到执行者上，看看他希望从组织获得什么，而不是把视角放在组织内部，看组织能提供什么。比如说以餐馆这个组织为例，其业务执行者主要是顾客，虽然餐馆可以提供零钱兑换、球赛播放、充电宝租借等服务，但是顾客来餐馆就是为了吃饭的，顾客-&gt;就餐就是餐馆的业务用例，提供就餐服务就是餐馆这个组织最大的价值。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-a5374eb74aae14cc95076a410d7cd661_720w.webp" referrerpolicy="no-referrer"></p><p>试想一个餐馆如果不围绕「提供物美价廉的就餐服务」这一理念去经营，而是饭菜质量做的很差，提供了很多充电宝服务，那么这个餐馆的结果可想而知。</p><span id="OSC_h4_3"></span><h4><strong>1.2 系统用例</strong></h4><p>说完业务用例我们再来看看系统用例，系统用例的定义是<strong>系统能够为执行者提供的、涉众可以接受的价值</strong>。其中的几个概念：</p><p><strong>1.系统</strong></p><p>封装了自身的数据和行为，能独立对外提供服务的东西才能称为系统。需要注意的系统是一个整体，系统可能会有很多子系统。比如银行转账交易时候需要做风控，如果有商家向银行售卖交易系统，那么风控这个子系统肯定是包含在整个交易系统内的，一起打包卖给银行的。</p><p><strong>2.系统执行者</strong></p><p>系统执行者的定义是在所研究系统外，与该系统发生功能性交互的其他系统。这里需要注意几点：</p><ul><li>系统执行者一定是在系统外的，可以是人或者其他系统；</li><li>系统执行者必须是要和系统有交互的；</li><li>系统执行者不一定是业务执行者；</li></ul><p><strong>3.涉众</strong></p><p>涉众是与要建设的业务系统相关的一切人和事，系统执行者也是涉众的一部分。</p><p>这里还是以餐馆为例，假如顾客是通过口头告诉服务员（不是自己扫码下单）我要点啥菜，服务员通过下单系统为顾客下单，那么研究这个下单系统可以得出：</p><p>1.系统执行者：服务员，虽然顾客作为餐馆这个组织的业务执行者，但是与下单系统直接交互的是服务员，所以服务员才是点餐系统的系统执行者；</p><p>2.涉众，这个就很多了，顾客、服务员、餐馆老板、厨师等等都是涉众，因为都是下单系统的利益关系者；</p><p>a.顾客担心自己下单没成功，等了很久不上菜；b.服务员担心没出单导致顾客投诉，自己奖金被扣；c.老板担心系统故障引起很多顾客投诉，生意受到影响；</p><p>d.厨师担心下单系统分配不合理，所有的菜都分配给自己做；</p><p>一般这个下单系统可以登录、下单，查看下单记录，这些都是下单系统的一些功能。我们再来回顾下系统用例的概念：系统用例指的是系统能够为执行者提供的、涉众可以接受的价值。那我们接下来就从每个涉众的视角分析一下对这些功能的需要情况。</p><table><tbody><tr><td>&nbsp;</td><td>登录</td><td>下单</td><td>查看下单记录</td></tr><tr><td>服务员</td><td>我需要，要不然别人下错单了怪我头上咋办</td><td>I need it！</td><td>我需要，方便查看顾客菜品上齐了没</td></tr><tr><td>顾客</td><td>I don't care！</td><td>能不能下单直接影响我能不能吃上饭</td><td>我也需要，得打印出来我的菜单，结账时候好核对</td></tr><tr><td>老板</td><td>我也需要，可以看看服务员的工作情况</td><td>下单系统不能下单我买它来干啥</td><td>我需要，方便订单管理，也方便看看哪个菜客人点的最多</td></tr><tr><td>厨师</td><td>I don't care！</td><td>不能下单谁告诉我该做什么菜</td><td>我需要，要不然说我少做了一道菜没法解释</td></tr></tbody></table><p>所以，从上可以得出下单、查看下单记录满足系统用例的概念，系统用例图如下</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-941f85ed3f3c76603776890c626baad0_720w.webp" referrerpolicy="no-referrer"></p><p>可以看到，和业务用例不同的是在研究系统用例时我们需要把视角切换到系统，从系统出发看看能为执行者提供什么样的、涉众都可以接受价值。</p><blockquote>
  Tips: 
 <br> 1.用例的名字一般是动宾结构，也就是「动词+名词」，但是不严格要求的。比如「成果分析」这个行业术语没必要硬倒过来改成「分析成果」 
 <br><br> 2.老老实实去研究业务流程，做好业务建模，尽量从业务序列图中映射出系统用例，这样得到的系统用例才是是最真实的。 
 <br><br> 3.用例是可以有主执行者和辅执行者的：主执行者从执行者指向用例，而辅执行者从用例指向执行者，主执行者发起用例的交互，辅执行者在交互过程中被动参与进来。一般说来，辅执行者是人肉系统的情况比较少，更多时候是另一个非人智能系统。 
 <br><br> 4.主执行者和辅执行者是相对于用例来说的，「 xx 是 xx 用例的主/辅执行者」 是正确的，「 xx 是 xx 系统的主/辅执行者」 说法是错误的。 
</blockquote><span id="OSC_h3_4"></span><h3>二、如何区分业务用例图和系统用例图</h3><p>相信经过上面的分析，你已经发现了两个用例图的异同点，如果没有，我再贴一下两个图（便于对比下单系统就简化成下单这个一个用例），便于更直观的对比：</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-935cabd4815c857f5f1f213313cdc984_720w.webp" referrerpolicy="no-referrer"></p><p>没错，两个图的最大的不同就是有无「/」，业务用例图在业务执行者和业务用例上是有「/」的，系统用例图在系统执行者和系统用例图上没有「/」，就是这么简单。所以现在再看到下面这个几个图，你是不是可以一眼看出其中的问题了。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-0f359402226387decb7f2f84f596e1b8_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3>三、如何用 PlantUML 画出规范的用例图</h3><p>PlantUML 是一个快速创建 UML 图形的组件或者可以说是语言，通过简单和直观的语言来定义图形。其在学习成本、效率、团队协同以及维护成本上都有比较大的优势，所以推荐使用 PlantUML 来画图。</p><p>用例图画起来其实很简单，主要就是四个要素，这里以系统用例为例，四个要素分别是系统、执行者、用例、关系。</p><span id="OSC_h4_6"></span><h4><strong>3.1 系统</strong></h4><p>系统用一个矩形块表示，在 UML 语法中是 rectangle。如下：</p><pre><code>@startuml

rectangle "xx 系统" {

}

@enduml</code></pre><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-1e56d6f4f00762e9c52c4e80fc19b415_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_7"></span><h4><strong>3.2 执行者</strong></h4><p>执行者是用火材人表示，在 UML 语法中是 actor，主要有两种写法，如下：</p><pre><code>@startuml

'系统执行者的两种写法'
actor Actor1
:Actor2:

'业务执行者的两种写法'
actor/ Actor3
:Actor4:/

@enduml</code></pre><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-7bc9069607955953a91b022f6407ecfb_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_8"></span><h4><strong>3.3 用例</strong></h4><p>用例是用一个椭圆表示。在 UML 语法中是 usecase ，业务用例和系统用例的两种写法如下：</p><pre><code>@startuml

usecase/ " 业务用例 1" as UC1
'业务用例的第二种写法：() + 用例名称 + /'
(业务用例 2)/ as UC3

usecase "系统用例 1" as UC2
'系统用例的第二种写法：() + 用例名称 '
(系统用例 2)
@enduml</code></pre><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-d60475c23c6c1f7ba9f91182a7c28adc_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_9"></span><h4><strong>3.4 关系</strong></h4><p>系统用例图中关系主要有四种，分别是关联、包含、扩展、泛化。</p><p><strong>3.4.1 关联</strong></p><p>关联是执行者和用例之间的一种关系，一般用实线 + 实心箭头表示：</p><pre><code>@startuml

actor Actor
rectangle "xx 系统" {
  usecase "系统用例 1" as UC1
}

Actor -&gt; UC1
@enduml</code></pre><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-dcc124640edc5d5498032e9f6c0dc23e_720w.webp" referrerpolicy="no-referrer"></p><p>这里有一点需要注意的是，虽然表示关联关系可以直接用实线如 A-B 这样表示，但是在用例图中我们尽量用实线+箭头表示，否则如下：</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-3958002f20d09e5d978c2395431b5839_720w.webp" referrerpolicy="no-referrer"></p><p>你无法区分 Actor1 和 Actor2 谁是主执行者谁是辅执行者，又或者两个都是主执行者？加上箭头后就非常容易区分，如下</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-3cdc28e1905d6fa775aece4c99141bbb_720w.webp" referrerpolicy="no-referrer"></p><p><strong>3.4.2 包含</strong></p><p>包含是用例之间的一种关系，其中一个用例（称为基本用例）的行为包含了另一个用例（称为包含用例）的行为，用虚线箭头 + &lt;&lt;include&gt;&gt;表示，箭头指向包含用例。</p><p>包含关系意味着包含用例是基本用例中不可缺少的一个执行步骤，如果缺少了该包含用例，基本用例就会变得不完整，可类比类图中对象之间的组合关系。使用包含关系的两个场景：</p><ul><li>当基本用例较复杂时，可以分解出一些包含用例；</li><li>当两个或以上的基本用例存在一些重复行为时，可以提炼出一个包含用例；</li></ul><pre><code>@startuml
'加入下面代码指定方向，使 UML 从左往右更直观'
left to right direction

actor Actor
rectangle "xx 系统" {
  usecase "基本用例" as UC1
  usecase "包含用例 1" as UC2
  usecase "包含用例 2" as UC3
}

Actor --&gt; UC1
UC1 ..&gt; UC2 : &lt;&lt;include&gt;&gt;
UC1 ..&gt; UC3 : &lt;&lt;include&gt;&gt;

@enduml</code></pre><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-bb9073fa37bdb0a2b7c993b41e093e15_720w.webp" referrerpolicy="no-referrer"></p><blockquote>
  上面我用了 Actor --&gt; UC1、UC1 ..&gt; UC2，有兴趣的可以换成-&gt;、.&gt;看看效果 
</blockquote><p><strong>3.4.3 扩展关系</strong></p><p>扩展是用例之间的一种关系，其中一个用例（称为扩展用例）的行为增强了另一个用例（称为基本用例）的行为，用虚线箭头 + &lt;&lt;extend&gt;&gt;表示，箭头指向基本用例。</p><p>扩展用例是对基本用例的一种补充或强化，即使没有该扩展用例，对基本用例也不会产生直接影响，基本用例自身仍然是完整的。也就是说扩展用例是基本用例的一种可能的补充，如购买运费险就是对下单这一用例的扩展，买不买运费险都不影响下单。</p><pre><code>@startuml
left to right direction

actor Actor
rectangle "xx 系统" {
  usecase "基本用例" as UC1
  usecase "扩展用例" as UC2
}

Actor --&gt; UC1
UC1 &lt;.. UC2 : &lt;&lt;extend&gt;&gt;

@enduml</code></pre><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-ae3bc9630dd18392734594241a350a08_720w.webp" referrerpolicy="no-referrer"></p><p><strong>3.4.4 泛化</strong></p><p>泛化关系也可以称作继承关系（类比类图中的泛化），用一个实线 + 空心箭头来表示，可以表示执行者间的关系也可以表示用例之间的关系。</p><pre><code>@startuml
left to right direction
actor Actor

rectangle "xx 系统" {
  usecase "支付" as UC1
  usecase "微信支付" as UC2
  usecase "支付宝支付" as UC3
}

Actor --&gt; UC1
UC1 &lt;|-- UC2 
UC1 &lt;|-- UC3

@enduml</code></pre><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-6e8cf697b38eacfe683e94aee360c1d6_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_10"></span><h4>四、一个案例</h4><p>这里我们以某银行的 App 为例，作为银行的一个系统我们对其进行分析：</p><p>1.系统：那自然是这个 App</p><p>2.系统执行者</p><p>a.主执行者：一般来银行办业务的客户都是主执行者，包括个人用户和企业用户；</p><p>b.辅执行者：银行，用户在 App 办理的所有业务都需要银行来配合执行；</p><p>3.系统用例：作为银行的线上业务，包含转账、查询余额、理财、贷款。</p><p>4.关系：这里需要注意的是转账过多有可能会超过限额，这个时候会提示超限；在办贷款业务之前，银行肯定会对用户的资产进行评估，这样才能决定其贷款额度。</p><pre><code>@startuml
left to right direction
actor 客户 as Actor
actor 银行 as Actor2

rectangle "某银行 App" {
  usecase "转账" as UC1
  usecase "查询余额" as UC2
  usecase "理财" as UC3
  usecase "贷款" as UC4
  usecase "评估资产" as UC5
  usecase "提示限额" as UC6
}

Actor &lt;|-up- 个人用户
Actor &lt;|-up- 企业用户
Actor --&gt; UC1

Actor --&gt; UC2
Actor --&gt; UC3
Actor --&gt; UC4
UC1 ----&gt; Actor2
UC2 ----&gt; Actor2
UC3 ----&gt; Actor2
UC4 ----&gt; Actor2

UC4 .left.&gt; UC5 :&lt;&lt;include&gt;&gt;
UC1 &lt;.down. UC6 :&lt;&lt;extend&gt;&gt;

@enduml</code></pre><p>整体用例图如下：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-83c93363c552d5ae6a26289ca7afe982_720w.webp" referrerpolicy="no-referrer"></p><p>作者 | 夜合</p><p><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1383600%3Futm_content%3Dg_1000384812" target="_blank">原文链接</a></strong></p><p><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 03 Dec 2023 03:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10314456</guid>
            <link>https://my.oschina.net/yunqi/blog/10314456</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AWS 全面推出适用于 Rust 和 Kotlin 的 SDK]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">自 2021 年 12 月首次公开预览两年后，AWS 宣布已全面推出适用于 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Fdeveloper%2Fannouncing-general-availability-of-the-aws-sdk-for-rust%2F" target="_blank">Rust</a> 和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Fdeveloper%2Faws-sdk-for-kotlin-ga%2F" target="_blank">Kotlin</a> 的 SDK 并支持生产使用。&nbsp;</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">官方介绍称，</span>AWS SDK for Rust 提供了惯用的类型安全 API；以及涵盖了 Rust 语言的优势，例如性能、可靠性和生产力。该 SDK 支持 async/await、非阻塞 IO 和构建器等现代 Rust 语言特性。并提供对 300 多个 AWS 服务的访问，每个服务都有自己的 &nbsp;crate；项目团队后续计划将继续增加对新服务和功能的支持。</span></p><p><span style="color:#000000">该 SDK 使用合理的默认值开箱即用，但它也是可扩展的，允许用户根据自己独特的用例对其进行自定义。SDK 是模块化的，允许客户仅为他们使用的服务编译 crate。它的设计速度也很快。借助 Rust SDK，用户可以在 Amazon Simple Storage Service (Amazon S3)、Amazon Elastic Compute Cloud (Amazon EC2) 和 Amazon DynamoDB 之间快速传输数据。</span></p><p><img height="300" src="https://oscimg.oschina.net/oscnet/up-79f46fd536e1e97a2b7983b321eed1fb7f8.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">事实上，对 AWS 服务的非官方 Rust 支持至少从 2015 年就开始存在了，当时 Matthew Mayer 和 Anthony DiMarco 在 Rust 1.0 发布后不久启动了一个名为 Rusoto 的独立项目，目标包括学习 Rust。根据 Rust crate 存储库 crates.io 上的统计，Rusoto 已被下载超过 1100 万次。2021 年，AWS Rust SDK 的第一个 alpha 版本由当时在 AWS 工作的 iliana etaoin 推出，她也是 Rusoto 的联合维护者。</span></p><p><span style="color:#000000">另一方面，AWS SDK for Kotlin 采用了从头开始设计。AWS 方面表示，此举旨在为用户您提供惯用的 Kotlin 体验，包括特定域语言 (DSL) 构建器，以及使用例程对异步 AWS 服务调用的支持。新发布的版本使开发人员能够使用 JVM 平台或 Android API Level 24+，未来版本还将支持 Kotlin/Native 等其他平台。</span></p><p><span style="color:#000000">那么就有人问了，既然 Kotlin 可以轻松地与现有的 Java SDK 进行互操作，那么&nbsp;AWS 为什么还要为 Kotlin 制作 SDK 呢？对此，AWS 解释原因有三：</span></p><ul><li style="text-align:start"><span style="color:#000000">首先，Kotlin 比 Java 具有更多的互操作性，包括 null-safety、coroutines、extension functions 和 smart casting。AWS 希望提供一个能够充分利用该语言并且让 Kotlin 开发者感到符合语言习惯的 SDK。</span></li><li style="text-align:start"><span style="color:#000000">其次，自 2019 年以来，Android 移动开发一直以 Kotlin 为先。Android 开发人员应该能够使用支持所有 AWS 服务的现代 SDK。这也是 AWS SDK for Kotlin 支持 Android API 24+ 的首要原因。事实上，AWS Amplify for Android v2 就是在 AWS SDK for Kotlin 的基础上构建的。</span></li><li style="text-align:start"><span style="color:#000000">最后，Kotlin 并不是一种仅限 JVM 的语言。Kotlin multiplatform 允许用户编写针对 JVM、本机二进制文件（Linux、Windows、macOS 和 iOS）、JavaScript 和 WASM 的 Kotlin 代码。因此该 SDK 从一开始也就被定位开发为多平台库，项目团队计划在未来支持更多目标。</span></li></ul><p><span style="color:#000000">了解有关未来版本计划推出的功能的详细信息，可查看</span><span style="color:#333333">&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Forgs%2Fawslabs%2Fprojects%2F50%2F" target="_blank">AWS SDK for Rust 路线图</a>&nbsp;<span style="color:#333333">和&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fawslabs%2Faws-sdk-kotlin%2Fprojects%2F2" target="_blank">AWS SDK for Kotlin 路线图</a>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 04:24:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269167/aws-sdks-for-rust-and-kotlin</guid>
            <link>https://www.oschina.net/news/269167/aws-sdks-for-rust-and-kotlin</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米回应「雷军最落魄时只剩冰冷的 40 亿」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#222222">近日，存在两张有关小米创始人雷军的图片在网络上广为流传。图片文案显示，「雷军最落魄的时候，只剩下银行卡里冰冷的 40 亿」。</span></p><p><span style="background-color:#ffffff; color:#222222"><img alt="" height="392" src="https://oscimg.oschina.net/oscnet/up-90e839ec6755aa3946e458eff583478c12a.jpg" width="300" referrerpolicy="no-referrer"></span></p><p><span style="background-color:#ffffff; color:#222222">对此，小米公司发言人官方微博昨日发文回应称：</span></p><blockquote><p><span style="color:#333333">今日网上出现大量关于本集团创始人雷军的不实传闻，所谓「冰冷的 40 亿」 纯属子虚乌有、完全失实。请大家勿信、勿传。 人生从来不是爽文，而是脚踏实地的历程，感谢大家的理解与支持。 ​​​</span></p></blockquote><p>雷军本人也在评论区评论称：</p><blockquote><p><span style="color:#333333">人生从来不是爽文，都是脚踏实地的历程，感谢大家的理解与支持。</span>&nbsp;</p></blockquote><p><img height="308" src="https://oscimg.oschina.net/oscnet/up-bf1373ae5fb064655792a016bd1dc5ca6d7.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269159</guid>
            <link>https://www.oschina.net/news/269159</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[gkd —— 自定义屏幕点击 APP]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>gdk 是一个<span style="background-color:#ffffff; color:#1f2328">基于<span>&nbsp;</span></span><strong style="color:#1f2328">无障碍</strong><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>+<span>&nbsp;</span></span><strong style="color:#1f2328">高级选择器</strong><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>+<span>&nbsp;</span></span><strong style="color:#1f2328">订阅规则</strong><span style="background-color:#ffffff; color:#1f2328"><span>&nbsp;</span>的自定义屏幕点击 APP。</span></p><p style="color:#1f2328; text-align:start">基于<span>&nbsp;</span><a href="https://github.com/gkd-kit/selector">高级选择器</a><span>&nbsp;</span>+<span>&nbsp;</span><a href="https://github.com/gkd-kit/subscription">订阅规则</a><span>&nbsp;</span>+<span>&nbsp;</span><a href="https://github.com/gkd-kit/inspect">快照审查</a>，它可以实现</p><ul><li>点击跳过任意开屏广告/点击关闭应用内部任意弹窗广告, 如关闭百度贴吧帖子广告卡片/知乎回答底部推荐广告卡片</li><li>一些快捷操作, 如微信电脑登录自动同意/微信扫描登录自动同意/微信自动领取红包</li></ul><p><img alt="" height="667" src="https://static.oschina.net/uploads/space/2023/1120/165010_l9Dm_4252687.jpg" width="300" referrerpolicy="no-referrer">&nbsp;<img alt="" height="667" src="https://static.oschina.net/uploads/space/2023/1120/165048_Krg3_4252687.jpg" width="300" referrerpolicy="no-referrer"></p><p><img alt="" height="674" src="https://static.oschina.net/uploads/space/2023/1120/165057_bqXk_4252687.gif" width="300" referrerpolicy="no-referrer"></p><p>&nbsp;<img alt="" height="500" src="https://static.oschina.net/uploads/space/2023/1120/165116_uE95_4252687.gif" width="300" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/gkd</guid>
            <link>https://www.oschina.net/p/gkd</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 在纯 WebGPU/Rust 中实现 RWKV 语言模型]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-web-rwkv" class="anchor" href="https://gitee.com/cryscan/web-rwkv#web-rwkv"></a>Web-RWKV</h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcrates.io%2Fcrates%2Fweb-rwkv"><img src="https://img.shields.io/crates/v/web-rwkv" alt="crates.io" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fdocs.rs%2Fweb-rwkv"><img src="https://docs.rs/web-rwkv/badge.svg" alt="docs.rs" referrerpolicy="no-referrer"></a></p><p align="center"></p><p>This is an inference engine for the <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FBlinkDL%2FRWKV-LM">language model of RWKV</a> implemented in pure WebGPU.</p><h2><a id="user-content-features" class="anchor" href="https://gitee.com/cryscan/web-rwkv#features"></a>Features</h2><ul><li>No dependencies on CUDA/Python.</li><li>Support Nvidia/AMD/Intel GPUs, including integrated GPUs.</li><li>Vulkan/Dx12/OpenGL backends.</li><li>Batched inference.</li><li>Int8 and NF4 quantization.</li><li>Very fast.</li><li>LoRA merging at loading time.</li><li>Support RWKV V4, V5 and V6.</li></ul><p align="center"></p><p>Note that <code>web-rwkv</code> is only an inference engine. It only provides the following functionalities:</p><ul><li>A tokenizer.</li><li>Model loading.</li><li>State creation and updating.</li><li>A <code>run</code> function that takes in prompt tokens and returns logits (predicted next token probabilities after calling <code>softmax</code>).</li></ul><p>It <em>does not</em> provide the following:</p><ul><li>OpenAI API or APIs of any kind.
<ul><li>If you would like to deploy an API server, check <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fcgisky1980%2Fai00_rwkv_server">AI00 RWKV Server</a> which is a fully-functional OpenAI-compatible API server built upon <code>web-rwkv</code>.</li><li>You could also check the <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FPrunoideae%2Fweb-rwkv-axum"><code>web-rwkv-axum</code></a> project if you want some fancy inference pipelines, including Classifier-Free Guidance (CFG), Backus–Naur Form (BNF) guidance, and more.</li></ul></li><li>Samplers, though in the examples a basic nucleus sampler is implemented, this is <em>not</em> included in the library itself.</li><li>State caching or management system.</li><li>Python (or any other languages) binding.</li><li>Runtime. Without a runtime makes it easy to be integrated into any applications from servers, front-end apps (yes, <code>web-rwkv</code> can run in browser) to game engines.</li></ul><h2><a id="user-content-compile-and-run" class="anchor" href="https://gitee.com/cryscan/web-rwkv#compile-and-run"></a>Compile and Run</h2><ol><li><a href="https://gitee.com/link?target=https%3A%2F%2Frustup.rs%2F">Install Rust</a>.</li><li>Download the model from <a href="https://gitee.com/link?target=https%3A%2F%2Fhuggingface.co%2FBlinkDL%2Frwkv-5-world">HuggingFace</a>, and convert it using <a href="https://gitee.com/cryscan/web-rwkv/blob/main/convert_safetensors.py"><code>convert_safetensors.py</code></a>. Put the <code>.st</code> model under <code>assets/models</code>.</li><li>To generate 100 tokens and measure the time cost, run
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> gen</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To chat with the model, run
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To generate 4 batches of text with various lengths simultaneously, run
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> batch</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To specify the location of your safetensors model, use
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat <span class="nt">--</span><span class="nt">--model</span> /path/to/model</span></pre><div class="markdown-code-block-copy-btn"></div></div></div></li><li>To load custom prompts for chat, use
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat <span class="nt">--</span><span class="nt">--prompt</span> /path/to/prompt</span></pre><div class="markdown-code-block-copy-btn"></div></div></div>
See <a href="https://gitee.com/cryscan/web-rwkv/blob/main/assets/prompt.json"><code>assets/prompt.json</code></a> for details.</li><li>To specify layer quantization, use <code>--quant &lt;LAYERS&gt;</code> or <code>--quant-nf4 &lt;LAYERS&gt;</code> to quantize the first <code>&lt;LAYERS&gt;</code> layers. For example, use
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--example</span> chat <span class="nt">--</span><span class="nt">--quant</span> 32</span></pre><div class="markdown-code-block-copy-btn"></div></div></div>
to quantize all 32 layers.</li><li>Use <code>--turbo</code> flag to switch to alternative <code>GEMM</code> kernel when inferring long prompts.</li></ol><h2><a id="user-content-use-in-your-project" class="anchor" href="https://gitee.com/cryscan/web-rwkv#use-in-your-project"></a>Use in Your Project</h2><p>To use in your own rust project, simply add <code>web-rwkv = "0.4"</code> as a dependency in your <code>Cargo.toml</code>.
Check examples on how to create the environment, the tokenizer and how to run the model.</p><h3><a id="user-content-explanation-of-batched-inference" class="anchor" href="https://gitee.com/cryscan/web-rwkv#explanation-of-batched-inference"></a>Explanation of Batched Inference</h3><p>Since version v0.2.4, the engine supports batched inference, i.e., inference of a batch of prompts (with different length) in parallel.
This is achieved by a modified <code>WKV</code> kernel.</p><p>When building the model, the user specifies <code>token_chunk_size</code> (default: 32, but for powerful GPUs this could be much higher), which is the maximum number of tokens the engine could process in one <code>run</code> call.</p><p>After creating the model, the user creates a <code>ModelState</code> with <code>max_batch</code> specified.
This means that there are <code>max_batch</code> slots that could consume the inputs in parallel.</p><p>Before calling <code>run()</code>, the user fills each slot with some tokens as prompt.
If a slot is empty, no inference will be run for it.</p><p>After calling <code>run()</code>, some (but may not be all) input tokens are consumed, and <code>logits</code> appears in their corresponding returned slots if the inference of that slot is finished during this run.
Since there are only <code>token_chunk_size</code> tokens are processed during each <code>run()</code> call, there may be none of <code>logits</code> appearing in the results.</p><h2><a id="user-content-convert-models" class="anchor" href="https://gitee.com/cryscan/web-rwkv#convert-models"></a>Convert Models</h2><p><em>You must download the model and put in <code>assets/models</code> before running if you are building from source.</em>
You can now download the converted models <a href="https://gitee.com/link?target=https%3A%2F%2Fhuggingface.co%2Fcgisky%2FRWKV-safetensors-fp16">here</a>.</p><p>You may download the official RWKV World series models from <a href="https://gitee.com/link?target=https%3A%2F%2Fhuggingface.co%2FBlinkDL%2Frwkv-5-world">HuggingFace</a>, and convert them via the provided <a href="https://gitee.com/cryscan/web-rwkv/blob/main/convert_safetensors.py"><code>convert_safetensors.py</code></a>.</p><p>If you don't have python installed or don't want to, there is a pure rust converter that you can run</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span><span class="nb">cd</span> ./crates/web-rwkv-converter</span><span id="LC2" class="line"><span class="nv">$ </span>cargo run <span class="nt">--release</span><span class="nt">--</span><span class="nt">--input</span> /path/to/model.pth</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-troubleshoot" class="anchor" href="https://gitee.com/cryscan/web-rwkv#troubleshoot"></a>Troubleshoot</h2><ul><li><p>"thread 'main' panicked at 'called <code>Result::unwrap()</code> on an <code>Err</code> value: HeaderTooLarge'"</p><p>Your model is broken, mainly because you cloned the repo but did not set up git-lfs.Please download the model manually and overwrite that one in <code>assets/models</code>.</p></li><li><p>"thread 'main' panicked at 'Error in Queue::submit: parent device is lost'"</p><p>Your GPU is not responding.
Maybe you are running a model that is just too big for your device. If the model doesn't fit into your VRam, the driver needs to constantly swap and transfer the model parameters, causing it to be 10x slower.
Try to quantize your model first.</p></li></ul><h2><a id="user-content-credits" class="anchor" href="https://gitee.com/cryscan/web-rwkv#credits"></a>Credits</h2><ul><li>Tokenizer is implemented by <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fkoute%2Frwkv_tokenizer">@koute</a>.</li></ul>]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/cryscan/web-rwkv</guid>
            <link>https://gitee.com/cryscan/web-rwkv</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 七年 4 个阶段：滴滴可观测架构演进与实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一分钟精华速览</h1><p>在当前阶段，可观测性的建设并没有统一的执行路径。每家公司会根据自身的业务需求、运营模式和规模，形成一套独特的实践方案。为了应对业务规模的扩大和需求的变化，可观测团队必须持续优化和升级其架构，并始终保证可观测系统本身的高可用性。</p><p>本文详尽地描绘了滴滴从 2017 年至今，在四个不同阶段所遭遇的技术挑战，如单体应用阶段的资源瓶颈、运维成本的上升、分布式服务的通信问题等等。滴滴通过寻找并应用适宜的技术方案，逐渐战胜了这些技术难题，使其可观测架构始终能为业务提供强大的支持。 <img src="https://oscimg.oschina.net/oscnet/up-37ea3e51d7965f7f81e1f723481e1d1511f.png" alt="file" referrerpolicy="no-referrer"></p><p>作者介绍 <img src="https://oscimg.oschina.net/oscnet/up-0a5962d122ef197918b9378c33d36a225a4.png" alt="file" referrerpolicy="no-referrer"></p><p>滴滴出行可观测架构负责人——钱威</p><p>TakinTalks 稳定性社区专家团成员，滴滴出行可观测架构负责人。深耕可观测领域多年，专注于架构设计与优化。带领团队完成了滴滴第二代到第四代的架构迭代。多个可观测开源项目的 Contributor。目前聚焦在滴滴可观测的稳定性建设和滴滴场景下的可观测性的实现与落地工作。</p><p>温馨提醒：本文约 7500 字，预计花费 12 分钟阅读。</p><p>「TakinTalks 稳定性社区」公众号后台回复 「交流」 进入读者交流群；回复「1026」获取课件资料；</p><h1>背景</h1><p>大家先来看一个故事——</p><p>「20 世纪初，当时处于高速发展期的福特公司。有一天一台电机坏了，相关生产工作被迫停止。很多工人和专家都找不到问题在哪。直到请到了一个叫斯坦门茨的人，斯坦门茨检查后用粉笔在电机外壳画了一条线，说打开电机，把记号处的线圈减少 16 圈。修理工照做后，故障排除，生产随即恢复。」</p><p>我们在工作或在开发过程中，时常会遇到这样的场景——让你一头雾水，不知道从何下手的难题，但是总有那么一两个「专家」一眼就能洞察问题所在。那么，我们需要思考一下，这到底是好事还是坏事？</p><p>滴滴作为一家出行平台，业务涵盖快车、专车、顺风车、共享单车等多个领域。每天有千万的用户和司机在平台上进行交互和使用，服务之间形成了复杂的依赖关系。在如此大规模的分布式系统中，故障排查和性能优化无疑是一项复杂的任务。</p><p>每次都依赖于个别专家的经验显然是无法控制的，也无法保证结果。因此，我们更愿意通过不断地演进可观测的架构，来支持业务的快速迭代和创新。</p><h1>一、可观测架构演进解决了哪些问题？</h1><h2>1.1 滴滴可观测系统通用架构</h2><p>滴滴可观测系统通用架构主要包含几个部分，如下图所示。</p><p><img src="https://oscimg.oschina.net/oscnet/up-41df9f4c584d6ec7df86ea7af9d0dfc6121.png" alt="file" referrerpolicy="no-referrer"></p><p>我们会采集目标主机或其他的相关指标，经过传输链路后，某些指标可能会经过计算模块进行处理，然后再写回系统中。随后，这些数据会被存储起来。基于这些存储的数据，查询功能可以为上层应用提供数据展示，如仪表板、数据大盘、报警和事件等。</p><p>需要注意的是，每个模块需要完成的任务或实现的功能各不相同。例如，查询模块可能需要负责数据路由、聚合以及实现 DSL 等功能，这些功能通常在查询层进行实现。</p><p>数据存储的实现方式有很多种，如 InfluxDB、RRDtool、Prometheus、Druid、ClickHouse 等，都可以作为可观测系统的存储方案。</p><p>传输模块在系统中起到连接的作用，常见的消息队列就是用在这一模块中。当我们提到消息队列时，大家首先想到的可能是 Kafka，当然也有一些较为小众的选择，如 NSQ。</p><p>计算模块的任务则是将大量的指标转换成我们所需的形式，可能会去除一些维度进行计算。Flink、Spark 等工具在这一模块中都是常见的选择。</p><p>对于数据采集，也有许多丰富的工具可以选择，如 Telegraf、Node exporter，以及最近推出的 Grafana Agent 等。</p><h2>1.2 可观测架构演进的 4 个阶段</h2><h3>1.2.1 阶段一：2017 年以前</h3><p>当业务需求发生变化时，存储模块的性能问题通常是最先暴露出来的。在 2017 年以前，滴滴主要使用 InfluxDB 作为存储选择。我们根据业务服务的维度将 InfluxDB 实例进行了拆分，这样的设计便带来了一些问题。</p><p>首先，单机版本的性能存在瓶颈。例如，我们可能会遇到查询量较大的情况，如查询跨度长或查询数据多，这种情况下很可能会出现内存溢出（OOM）的问题。这也是社区中经常讨论的问题。 <img src="https://oscimg.oschina.net/oscnet/up-416c08cc213a26dc5a99ac0e2175637595c.png" alt="file" referrerpolicy="no-referrer"></p><p>再者，我们采用的分片方式也存在问题。我们是按照服务进行拆分的，例如，如果今天有 50 个服务，那可能需要 50 个或更少的实例。但如果服务数量在明天增加到 500 个，那么运维成本将随之显著增加。特别是在当前大家普遍采用微服务架构的情况下，这种运维成本将会非常高。</p><h3>1.2.2 阶段二：2017-2018 年</h3><p>为了解决上述问题，我们在 2017 年引入了 RRDTool。在此期间，RRDTool 取代了 InfluxDB，成为滴滴可观测的主要存储工具。</p><p>在 RRDTool 的设计中，我们采用了一致性哈希算法，在读写链路中进行多个 RRDTool 实例的分片。这种哈希算法的过程是先将所有的 Tag 打平，然后排序，最后再进行哈希，分配到各个实例中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7ac44d840041980a63c09d3c56e62770b70.png" alt="file" referrerpolicy="no-referrer"></p><p>除此之外，我们还引入了一个名为「索引」的服务。这个服务的主要任务是满足产品需求。比如，我们可能需要提供服务列表，当用户选择了他们自己的服务后，需要知道该服务下有哪些指标，以及每个指标下有哪些 Tag。这种需求需要一个高效的索引服务来完成。</p><p>基于 RRDTool 的架构改进带来了两大成果。首先，它解决了 InfluxDB 的热点问题。我们原来是按照服务去拆分实例，现在我们将这些曲线分散到各个实例上。其次，这也减轻了 InfluxDB 的运维成本，因为我们采用了相对自动化的分片方式。</p><h3>1.2.3 阶段三：2018-2020 年</h3><p>在 2018 年以后，我们面临了新的挑战。由于 RRDTool 的设计原理是每条曲线一个文件，因此，当数据规模扩大时，对 IO 的需求也随之增大。我们的 IOPS 已经超过了 3 万，这就需要我们增加更多的设备，例如具有高 IO 性能的机器，以解决这个问题。但是，这导致成本逐渐增高，且问题愈发严重。同时，可观测性中的读写是正交的，读写优化存在冲突——写通常是所有曲线写入最新的部分，而读通常是读取多条曲线或某条曲线长时间的数据。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d81c56d2f84ab2161a197aedd244e17e750.png" alt="file" referrerpolicy="no-referrer"></p><p>（纵向为 Writes，横向为 Reads)</p><p>那么，我们如何解决这个问题呢？经过分析，我们发现 80% 的查询都集中在最近两个小时内，因此，我们设计了一个冷热分层策略。这个策略的核心就是将压缩后的数据存储在内存中。压缩主要针对两个方面，一是时间戳，二是值。由于时间戳产生的时间间隔通常比较固定，而值的变化往往较为平缓，这为我们的压缩策略提供了依据。</p><p>基于这个原理，我们内部创建了一个名为"Cacheserver"的服务，主要服务于最近两小时的数据，采用了全内存的设计。这种设计使得用户查询的延迟从 10 秒降低到了 1 秒以内，每个数据点的存储由原来的 16 字节降低到了 1.64 字节。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a65d91b989d8dd692a5abc11952dddb1621.png" alt="file" referrerpolicy="no-referrer"></p><p>整个设计可以通过上述图示来理解。首先是冷热分层，RRDTool 和 Cacheserver 共同完成了整个存储任务。以图示右半部分为例，原始的时间戳为 350、360、370、381，存储这些数据需要 256 比特。但经过压缩后，只需要 88 比特就足够了。这只是四个时间戳的情况，如果时间戳更多，那么压缩效果会更加显著。</p><h3>1.2.4 阶段四：2020-至今</h3><p>随着用户接入的组件不断增多，用户的查询需求也变得越来越复杂。在我们的使用场景中，一旦 RRDTool 进行了降采，我们就无法再查看到原始数据。</p><p>面对这种情况，我们开始思考如何设计一个能满足用户当前和未来需求的系统。我们改变了问题解决的策略，不再针对每个具体情况单独设计方案。例如，如果过去有新增的查询形态，我们会需要编码并上线一个新的函数。而现在，我们选择直接利用业界的生态。</p><p>当时，Prometheus 是非常流行的。我们将目标从引入生态转变为引入 Prometheus 的生态。选择 Prometheus 的原因是，随着 K8s 的普及，Prometheus 已经成为了监控系统的事实标准。许多业界大厂和流行的厂商都在为 Prometheus 持续贡献代码和架构。</p><p>然而，如果我们选择引入 Prometheus 的生态，就无法继续使用 RRDTool，因为它无法兼容 Prometheus 的生态。这就需要我们寻找新的存储方案。</p><p>难点 1：新的存储方案如何选择？</p><p>在面临新的存储方案选择时，我们主要考虑了 Cortex、Thanos 和 VictoriaMetrics（简称 VM）。这些方案都是为了弥补 Prometheus 本身的一些缺陷而设计的，因为 Prometheus 从诞生之初就定位为单机存储，不支持长期存储，也没有高可用性。因此，Cortex 和 Thanos 在当时成为了业界主要的解决方案。</p><p><img src="https://oscimg.oschina.net/oscnet/up-176778420cc3bcd7e50c8134538547fba02.png" alt="file" referrerpolicy="no-referrer"></p><p>（调研业界 Prometheus 相关方案）</p><p>在对比这些方案时，我们发现 Cortex 和 Thanos 都能有效解决 Prometheus 的原生缺点。从成本角度考虑，由于 Thanos 和 Cortex 都采用了对象存储，因此它们的成本相对较低。但是，这两个方案由于使用了大量的第三方服务，如果公司没有对象存储或者没有云服务，那么这些组件的维护工作可能就需要由可观测团队来完成。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1d163b32eaf5437ddae21f7a3ecc49ca221.png" alt="file" referrerpolicy="no-referrer"></p><p>(RRDTool 与 VictoriaMetrics 方案对比）</p><p>相比之下，VM 与 RRDTool 相比，它是完全兼容 Prometheus 的。此外，我们之前提到过降采策略，RRDTool 的数据在超过两小时后会进行降采，一旦降采，我们就无法查看到原始数据。而 VM 本身不进行降采，这为我们带来了更多可能性。在降低存储成本方面，VM 的表现较好，在我们的环境测试中，其存储成本只有 RRDTool 的 1/20 左右。在数据上报形态上，Prometheus 是 Pull 形式，而 RRDTool 只能支持 Push 形式，并且只支持私有协议。但 VM 既支持 Pull 也支持 Push，对流行的数据上报协议也有良好的支持。</p><p>难点 2：如何引入 Prometheus 生态？</p><p>那么，我们是否可以简单地将存储方案替换为 VM 呢？实际上，答案是否定的。在引入新的生态系统时，我们首先需要考虑现有的公司方案。引入新的生态并不意味着要完全颠覆现有的产品架构，不能简单地进行替换。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4ced98fb48857f34094958a2cf4099a710e.png" alt="file" referrerpolicy="no-referrer"></p><p>为了引入新的生态，滴滴进行了一些改造。如图所示，绿色部分是使用 Prometheus 原生方案所需完成的工作。只要被监控的对象支持"/metrics"这样的接口，Prometheus 便可以进行数据拉取。对滴滴而言，我们原来的架构是基于采集、传输、存储的 Push 模型。因此，我们在采集部分增加了一个兼容 Prometheus 的 Adapter。在原有基础上，对于那些新增并且支持 Prometheus 拉取的服务，我们也可以使用自有的采集方法进行数据拉取。</p><p>在生态引入的成果方面，我们已经支持了 Prometheus 的数据采集，并且可以支持 PromQL 的图表查看和报警这两个常见场景。此外，我们还在图表查看这个维度上增加了一些新的功能，比如增加了 TopK/BottomK 等图表维度的 Outlier 能力。这样，如果一个服务有很多个实例，我们就可以利用 TopK/BottomK 这样的功能找出异常点。</p><p>在回馈社区方面，我们向 VM 官方和 Prometheus 社区递交了一些 PR，以此为整个社区做出贡献。</p><h1>二、如何保障可观测系统自身稳定性？</h1><p>众所周知，可观测系统的目的是保障业务的稳定性。那么，我们如何保障可观测系统本身的稳定性呢？首先，我们需要探讨如何监测这个可观测的系统。是否可以在自身的系统上配置一些策略？或者建立一些仪表盘？或者采取其他一些方式？在这方面，我将分享一些我们的实验和思考。</p><h2>2.1 如何观测可观测系统？</h2><p>我们不能让可观测的系统对其本身做观测。例如，如果存储系统出现故障，而查询数据的方式是从自身的存储中查询，那么就会形成循环依赖。因此，第一个原则就是不能让可观测的系统自观测。第二个原则与第一个原则有关，即需要一套独立的数据采集和报警服务来进行观测。</p><p>在我们的实践中，主要采用了两种方法。</p><p><img src="https://oscimg.oschina.net/oscnet/up-2baf281d16b9116d4a30925231fa56d1a24.png" alt="file" referrerpolicy="no-referrer"></p><p>第一种方法用于监测流量，适用于数据采集、传输和存储。这种方法主要通过使用 Exporter、Prometheus 和 Alertmanager 来进行自我监测。例如，如果存储写入流量突然变化，就可以使用这套系统进行自我监测。</p><p>另一种方法是监测能力。以报警为例，最简单的方法是设置一条始终会触发阈值的报警，但可能不会发送实时消息或短信通知。一旦报警事件中断，可能是因为报警系统本身存在问题，或者报警系统所依赖的存储查询存在问题。在这种情况下，我们可以通过设置探测器和进行端到端的检查来解决问题。</p><h2>2.2 如何保障可观测架构始终稳定？</h2><p>我们可以从两个方面来考虑：一是通过架构优化, 二是采取常用的保障手段。</p><h3>2.2.1 架构优化</h3><p>要点 1：鸡蛋不要放在一个篮子里</p><p>对于架构优化，一个简单的原则就是不要把所有的鸡蛋放在一个篮子里。我们可以通过以下的设计实现这一点。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8c1c833a7b8db7fbd51e4b6d56286bd0b83.png" alt="file" referrerpolicy="no-referrer"></p><p>（VictoriaMetrics 存储多集群设计）</p><p>滴滴主要从事打车业务，我们的网约车和非网约车业务的观测数据各自存储在不同的存储集群上，这就是我们采用的 VM 多集群设计。例如，如果非网约车业务实例出现问题，我们希望这不会影响到网约车业务，反之亦然。因此，我们在存储方面进行了多集群的设计。</p><p><img src="https://oscimg.oschina.net/oscnet/up-cd3d73594c6c53d06c8471fcc73d75d357f.png" alt="file" referrerpolicy="no-referrer"></p><p>（传输多集群设计）</p><p>在数据传输方面，我们的设计理念也是类似的，但有一点区别在于，传输和存储会用到不同的分片策略，这是因为它们的负载特性不同。例如，某个业务的传输量非常大，但存储查询的量却非常小，这种情况下，我们会在传输端对数据进行拆分，在存储端只需要保证数据的写入即可。它们可以共享同一存储集群。</p><p>要点 2：及时扔掉坏鸡蛋</p><p>另外还有一个原则，我们称之为「及时扔掉坏鸡蛋」。在传输模块中，除了写入存储，还有其他的下游模块，如流式报警等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e7a9c8c431cd89da042a2190e0ddb20e84f.png" alt="file" referrerpolicy="no-referrer"></p><p>因此，如果某个子系统因为某些原因运行变慢，从而影响了整个传输模块，这是我们不愿看到的。我们希望在子系统运行变慢或出现问题时，能够及时将其剔除出系统，即熔断策略。在某些情况下，我们可以自动进行熔断，并尝试不断恢复这个子系统。如果它成功恢复，那我们就会重新将这个系统接入。</p><h3>2.2.2 其他常用保障手段</h3><p>熔断、降级、多维度限流：</p><p>除了熔断和降级，我们还有其他保障手段，如多维度的限流。多维度限流采取灵活策略对请求进行限制，例如，一些持续且高频的跨度长时间的查询，比如几个月甚至几年的数据查询，我们就会应用多维度的限流手段。</p><p>慢查治理：</p><p>另一个保障手段是慢查的治理，这涉及到对大量曲线的查询。比如，一次查询涉及到了上百万的曲线，此时我们需要进行慢查发现，然后进行治理。在一些重点保障的时期，我们会开启这些策略，一旦识别到异常，就采用多维度限流，根据它的特征进行限流或者直接禁用。</p><p>多活：</p><p>内部可观测的多活，我们采用的方式是做单元化。例如，如果 A 机房和 B 机房的专线中断，我们需要保障用户可以单独访问相应机房的数据。</p><p>容量评估体系：</p><p>我们还有容量评估体系。因为在可观测架构和业务流量或订单量的增长可能不成正比，所以需要一套自身的容量评估体系。每家公司的业务模型可能不同，所以这个体系需要建立起来，对于保障手段来说，这是有帮助的。</p><p>预案、演练：</p><p>我们还会制定预案并进行演练，以保证这些手段是有效的。</p><h1>三、可观测性在滴滴是怎么实现的？</h1><h2>3.1 策略选择</h2><p>可观测性这个主题在 2021 或 2022 年是一个非常热门的话题。有人可能会觉得，如果不谈论可观测性，就相当落后了。我们先来看一下各大厂对可观测性的定义。</p><p>可观测性是可帮助团队有效调试其系统的工具或技术解决方案。可观测性基于对事先未定义的属性和模式的探索。——来源 Google</p><p>可观测性是指能够通过检查系统或应用的输出、日志和性能指标来监控、测量和理解系统或应用的状态。——来源 RedHat</p><p>可观测性是指您仅根据所了解的外部输出对复杂系统内部状态或条件的理解程度。——来源 IBM</p><p>我在这里分别引用了 Google、RedHat 和 IBM 对可观测性的定义，他们有两个共识。第一个是，可观测性是能从外部理解系统内部的状态，而这些状态并不需要是已知的。第二个共识是，可观测性有许多手段，包括日志、指标、事件等。</p><p>那么，如何实现可观测性呢？各大厂都有自己的实现方式。Google 推荐使用其云平台 GCP，RedHat 推荐使用 OpenShift Observability，IBM 有其自己的产品 Instana Observability，而 Grafana 推荐使用 LGTM(Loki、Tempo、Mimir)。</p><p>综合来看，实现可观测性的方法大概有三种。第一种是购买 SaaS 厂商的服务，第二种是尽可能地采集和存储详尽的可观测数据，第三种是关联多种观测数据。</p><h2>3.2 方案对比</h2><p>对于滴滴，第一种实现方式并不适合，因此我们优先排除。</p><p>至于第二种实现方式是「尽可能详尽」，于是我们将观测数据分为两个维度，即 Dimensionality 和 Cardinality。Dimensionality 类似于标签的概念，例如时间戳、版本、顾客 ID 等。Cardinality 则以顾客 ID 为例，可能有从 1 万 01 到 1 万 9999 的数据。这种方案优点是能采集大量数据，但缺点是实现成本高、资源消耗大，且数据利用率偏低。</p><p>第三种实现方式是关联多种观测数据，常见的观测数据包括 Metric、Trace、Log。Metric 数据属于高层次抽象，能告诉你错误数，但无法提供具体错误信息。Trace 数据主要用于跨服务关联，比如一个请求经历了哪些服务。Log 数据则是开发人员偏好的信息，它提供最详细的、人类可读的数据。然而，这种关联多种观测数据的方式，其缺点是架构实现相对复杂。</p><h2>3.3 架构设计</h2><p>在滴滴，我们借鉴了上述两种方法，将数据分为低基数和高基数两类。低基数指的是指标数据，而高基数则是日志数据。我们将这两种数据分别存储在不同的数据库中，并建立它们的关联关系。 <img src="https://oscimg.oschina.net/oscnet/up-0c28337ec890c982e26ae239ad7987fc15e.png" alt="file" referrerpolicy="no-referrer"></p><p>举个例子，如果在一段时间内我们收集到两个错误日志，我们就会将这个错误数「2」上报到时序数据库。同时，我们将对其中一条错误日志进行采样，并将其存储在 Exemplar DB 中。然后，我们会通过标签将时序数据库和 Exemplar DB 进行关联。</p><h2>3.4 实践成果</h2><p>滴滴的可观测性实践成果非常显著。在建立可观测性之前，我们在排查故障时需要登录到机器上并检索日志。如果有幸找到了问题所在的机器，那就算是幸运的。但如果并非问题出在这台机器，甚至不是这个服务，我们就需要重复上述的操作。而且，即使经过这样的操作，是否能找到问题也是不确定的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b9ba869b9b09a5cf7b46c0cc30f7de8a81a.png" alt="file" referrerpolicy="no-referrer"></p><p>然而，在建立了可观测性之后，当我们收到报警消息时，我们可以直接查看与这条报警相关联的日志原文。查阅了日志原文之后，如果认为没有大问题，可以暂时不进行处理。如果是紧急情况，我们就会启动紧急处理流程。</p><p>此外，当我们在查看图表时，如果发现某个指标突然升高，想要知道是什么原因导致的，我们可以使用下钻功能。这个功能不仅可以让我们查看日志原文，如果日志中包含 Trace 信息，还可以将这个 Trace 信息提取出来。然后可以将 Trace 信息下钻到专门的 Trace 产品进行进一步的处理。</p><p>四、总结展望，滴滴的可观测性架构的发展实际上是基于不同的需求、场景和时代背景，选择了最适宜的解决方案。</p><p>我们对接了业界一些成熟的生态系统，并将这些生态系统融入到我们的系统中，这极大地帮助我们完成了许多工作，也提升了我们的工作效率。同时，在建设可观测性平台的过程中，我们也采用了一些策略来实现观测系统自身的稳定性保障。</p><p>值得注意的是，可观测性的建设并没有一种统一的实现方式，每家公司都有其自身的特色。因此，各公司需要根据自己的特点去定制专门的解决方案，并根据实际情况不断选择和调整最合适的方案。（全文完）</p><h1>Q&amp;A</h1><p>1、滴滴是否有专门的技术团队去维护可观测架构？Prometheus 的横向扩展能力相对有限。InfluxDB 具体有哪些问题？</p><p>2、如何去度量一个架构的可观测性？有什么建议吗？</p><p>3、Metric 的时效性有必要做到秒级吗？</p><p>4、接口偶发性超时，调用链只能看到超时接口名称，看不到内部方法，无法定位根因，也难以复现，怎么办？</p><p>以上问题答案，欢迎点击<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.shulie.io%2F%3Fp%3D7518" target="_blank">「阅读全文」</a>，观看完整版解答！</p><p>声明：本文由公众号「TakinTalks 稳定性社区」联合社区专家共同原创撰写，如需转载，请后台回复「转载」获得授权。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Dec 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/5129714/blog/10315681</guid>
            <link>https://my.oschina.net/5129714/blog/10315681</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[昆仑万维发布「天工 SkyAgents」平台，零代码打造 AI 智能体]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">12 月 1 日，昆仑万维正式发布「天工 SkyAgents」平台，助力大模型走入千家万户。「天工 SkyAgents」是国内领先的 AI Agents 开发平台，基于昆仑万维「天工大模型」打造，具备从感知到决策，从决策到执行的自主学习和独立思考能力。用户可以通过自然语言构建自己的单个或多个「私人助理」。并且将不同任务模块化，通过操作系统模块的方式，实现执行包括问题预设、指定回复、知识库创建与检索、意图识别、文本提取、http 请求等任务。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">在「天工 SkyAgents」平台上，用户可以通过自然语言和简单操作，无需代码编程，即可在几分钟之内部署属于自己的 AI Agents，完成行业研究报告、单据填写、商标设计、甚至健身计划、旅行航班预定等多项私人定制需求。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">对于企业用户而言，「天工 SkyAgents」则可以按需拼装成企业 IT、智能客服、企业培训、HR、法律顾问等众多个性化的应用，并支持一键服务部署，确保其在不同业务系统中的无缝接入。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-b2d9f445592d6b227dc00b733eb3b8eff7b.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">AI Agent 一般译为「人工智能体」或「人工智能代理」，是一种能够感知环境、进行决策和执行动作的智能实体。不同于传统的人工智能程序，基于大模型能力打造的 AI Agent 具备通过独立思考、调用工具去逐步完成给定目标的能力。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">模块交互，更易用</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">当前，多数用户既不具备代码开发经验，也不具备训练大模型提示词工程（Prompt Engineering）的能力，难以将众多日常生活的实际需求通过对话问答形式快速实现，无法将大模型能力发挥到极致。「天工 SkyAgents」正是为了解决这一痛点而研发的一款产品。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">「天工 SkyAgents」通过将 Agent-to-Agent，Human-to-Agent 的交互模式集成在高度模块化的大语言模型构件中，实现完全无代码化操作，并通过简单直观的图形界面进行任务设定和部署，为广大用户提供了一个全面、高效且易于使用的 AI 产品，能够帮助用户轻松利用大模型能力应对复杂任务，满足日常需求、驱动业务增长、激发灵感创新。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left">&nbsp;</p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">数据导入，更灵活</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-6d36ddc7cbd9554af55070f2b41d742d529.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">大模型能力虽强，但也有其天生的弱项。一方面，大模型通过参数训练获得的知识只能停留在某一时点，更新成本很高；另一方面，大模型的训练数据通常以通用知识为主，细分领域的数据往往缺乏。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">为了解决这一问题， 「天工 SkyAgents」具备数据检索增强（RAG）的能力， 能够支持导入更多格式和更大规模的数据和知识，相当于给大模型增加了「智能知识库外脑」。结合人工智能技术，平台能够从导入的数据中自动识别关键信息点，形成结构化的知识体系。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">从此，「天工 SkyAgents」不仅能够成为你的私人 AI 助理，还能是你的私人法律专家、私人人力顾问、私人 IT 大神……</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">技术领先，更强大</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">对话问答类大模型应用遇到需要多流程、多步骤处理的复杂业务，往往要么容易产生「幻觉」，输出错误回答，要么容易错步、漏步、跳步，直接输出结果。然而不幸的是，人们在现实生活中遇到的大多数问题，往往都是复杂流程任务。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">为了解决这一问题，「天工 SkyAgents」在原有大模型技术基础上进一步了强化自然语言处理能力，辅之以先进的目标理解与工作流自动化技术，使得「天工 SkyAgents」能更精准地识别和解析复杂的业务目标，自动生成定制化的工作流程，甚至预测并建议潜在的优化方案。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><img alt="" height="713" src="https://oscimg.oschina.net/oscnet/up-c7e6afa126be7553e35e2f575f2b5953f3c.jpg" width="1268" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">本次「天工 SkyAgents」的发布，将有助于缺乏代码开发能力的个人与中小企业积极拥抱大模型技术，以简单的模块化操作，设计出专属于自己的大模型 AI 助手，从而推动大模型技术的行业落地与普惠化，助力大模型走入千家万户，为人工智能产业发展贡献力量。前往天工开放平台预约申请：</span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fagentspro.cn%2F%23%2F" target="_blank"><span><span><span><span style="color:#3370ff">https://agentspro.cn/#/</span></span></span></span></a></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><strong><span><span><span><span style="color:#1f2329">昆仑万维集团</span></span></span></span></strong></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">昆仑万维于 2008 年成立，2015 年深交所上市，从游戏起家到 AII In AGI 与 AIGC， 全面构建多元化的业务生态，至今十余年的发展，我们始终致力于为全球用户提供领先的互联网产品与服务。现今，昆仑万维还在不断探索 AI 领域的无限可能。目前昆仑万维逐渐构建了 AGI 与 AIGC、海外信息分发与元宇宙、投资三大业务板块，业务覆盖全球一百多个国家和地区，全球平均月活跃用户近 4 亿。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#1f2329">凭借对科技发展趋势的超前预判，昆仑万维早在 2020 年便已开始布局 AIGC 领域。至今，已积累近三年的相关工程研发经验，并建立了行业领先的预训练数据深度处理能力，昆仑万维也在人工智能领域取得了重大突破，目前已形成 AI 大模型、AI 搜索、AI 游戏、AI 音乐、AI 动漫、AI 社交六大 AI 业务矩阵，是国内模型技术与工程能力最强，布局最全面，同时全身心投入开源社区建设的企业之一。</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 09:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269081</guid>
            <link>https://www.oschina.net/news/269081</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[支持 Upsert、Kafka Connector、集成 Airbyte，Milvus 助力高效数据流处理]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Milvus 已支持 Upsert、 Kafka Connector、Airbyte！</p><p>在上周的文章中《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzMDI5OTA5NQ%3D%3D%26mid%3D2247499457%26idx%3D1%26sn%3D210ed71ffaa36d4220df3907a9a0ab41%26chksm%3Dfa515f79cd26d66f573354b0dc98dba492b925b1db63fbf5e5ad8b4cafb3f3b315d2bf6c5502%26scene%3D21%23wechat_redirect" target="_blank">登陆 Azure、发布新版本……Zilliz 昨夜今晨发生了什么？</a>》，我们已经透露过 Milvus（Zilliz Cloud）为提高数据流处理效率， 先后支持了 Upsert、 Kafka Connector、Airbyte，而这些功能的作用都是简化数据处理和集成流程，为开发人员提供更高效的工具来管理复杂的数据，今天我们将向大家一一介绍。</p><h2>01.Upsert：简化数据更新流程</h2><p>Upsert 功能上线以前，在 Milvus 中的更新数据需要两个步骤：删除数据，然后再插入新数据。虽然这种方法也可行，但无法确保数据原子性，且操作过于繁琐。Milvus 2.3 版本发布了全新的 Upsert 功能。（Zilliz Cloud 海外版也已上线 Upsert 功能 Beta 版）。</p><p>可以说，Upsert 功能重新定义了数据更新和管理方式。使用 Upsert 时，Milvus 会判断数据是否已经存在。如果数据不存在则插入数据，如果已存在则更新数据。这种具有原子性的方法对 Milvus 这样单独管理插入和删除数据的系统中尤为重要。</p><p>Upsert 具体的顺序为：先插入数据，然后删除重复数据。这样可以确保了操作期间的数据仍然可见。</p><p>此外，Upsert 功能还特别考虑了修改主键的场景。在数据更新过程中无法更改主键列。这与 Milvus 根据主键哈希跨分片（shard）管理数据的原则一致。这种限制避免了跨 Shard 操作带来的复杂性和潜在的数据不一致性。</p><p>Upsert 使用方法简单，类似于插入操作。用户可以轻松将 Upsert 集成到现有的工作流程中，无需对原有流程进行大改。在 Pymilvus 等 SDK 中，Upsert 命令调用和插入命令完全一致。熟悉 Milvus 的用户使用起来没有任何难度，可以获得一致和丝滑的用户体验。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f41551a015823f1b2df852545459520d410.png" alt="" referrerpolicy="no-referrer"></p><p>执行命令时，Upsert 会提供关于操作成功与否以及受影响的数据的反馈，进一步增加了开发者的使用便利性。这种易于使用且稳定的功能能够助力数据管理。更多详情，请查看 Upsert 文档。</p><p>但是使用 Upsert 功能时还需要考虑以下两点：</p><ul><li><p>AutoID 限制：使用 Upsert 功能的前提条件是将 AutoID 设置为 false。如果 Collection Schema 中将 AutoID 设置为 true，则无法执行 Upsert 操作。我们设置了这个限制的主要考量是，Upsert 也包含数据更新操作，更新的数据需要有新的主键值。如果用户提供的主键值与 AutoID 自动生成的主键值发生冲突，那可能会导致数据被覆盖。所以，已经开启了 AutoID 的 Collection 不可使用 Upsert 功能。后续新版本中我们可能会取消这一限制。</p></li><li><p>性能开销：Upsert 可能会导致性能成本。Milvus 使用 WAL 架构，过多删除操作可能会导致性能下滑。Milvus 中的删除操作不会立即清除数据，而是为数据打上删除标记。随后在数据压缩过程中才会根据这些标记真正清除数据。因此，频繁的删除操作可能会导致数据膨胀，影响性能。我们建议不要太过于频繁地使用 Upsert 功能，以确保最佳性能。</p></li></ul><h2>02.Kafka Connector：赋能实时数据处理</h2><p>近期，Milvus 和 Zilliz Cloud 接入了 Kafka Sink Connector，向量数据可以无缝丝滑地通过 Confluent/Kafka 实时导入 Milvus 或 Zilliz Cloud 向量数据库中。本次集成能够进一步释放向量数据库潜能，助力实时生成式 AI 应用，尤其是使用 OpenAI GPT-4 这种大模型的场景。</p><p>如今，我们所获取的信息中，非结构化数据已占据 80% 以上，且这类数据还在呈爆炸式增长。Zilliz 与 Confluent 的合作标志着非结构化数据管理和分析的重大进步，我们能够更高效存储、处理实时向量数据流，将其转化为易于搜索的数据。</p><p>Kafka Connector + Milvus / Zilliz Cloud 的常见用例包括：</p><p>增强生成式 AI：为 GenAI 应用提供最新的向量数据，从而确保生成的准确性和及时性。这两点对于金融和媒体等领域尤为重要，因为都需要实时处理各种来源的流式数据。</p><p>优化电商推荐系统：电商平台需要实时根据库存和客户行为动态调整其推荐商品或内容以提升用户体验。</p><p>在 Zilliz Cloud 中使用 Kafka Connector 的步骤也十分简单：</p><ul><li><p>从 GitHub 或 Confluent Hub 下载 Kafka Sink Connector。</p></li><li><p>配置 Confluent 和 Zilliz Cloud 账号。</p></li><li><p>阅读在 GitHub 仓库中提供的指南并配置 Kafka Connector。</p></li><li><p>运行 Kafka Connector，将实时流数据导入 Zilliz Cloud。</p></li></ul><p>如需更深入了解如何设置 Kafka Connector 和相关用例，请前往 GitHub 仓库或访问此网页。</p><h2>03.集成 Airbyte：数据处理更高效</h2><p>近期，Milvus 与 Airbyte 团队合作，在 Milvus 中集成 Airbyte，增强了大语言模型（LLM）和向量数据库中的数据获取和使用流程。本次集成能增强开发者存储、索引和搜索高维向量数据的能力，大大简化生成式聊天机器人和产品推荐等应用搭建流程。</p><p>本次集成的主要亮点包括：</p><ul><li><p>数据传输更高效：Airbyte 能够无缝将数据从各种来源传输到 Milvus 或 Zilliz Cloud，即时将数据转化为 Embedding 向量，简化了数据处理流程。</p></li><li><p>搜索功能更强大：此次集成增强了向量数据库的语义搜索能力。基于 Embedding 向量，系统可以自动识别并搜索出语义相似性高的相关内容，能够为需要高效检索非结构化数据的应用赋能。</p></li><li><p>设置过程更简单：设置 Milvus 集群和配置 Airbyte 同步数据的步骤十分简单。如果需要使用 Streamlit 和 OpenAI Embedding API 构建应用也是同样的设置步骤。</p></li></ul><p>此次集成简化了数据传输和处理，释放实时 AI 应用的无限可能性。例如，在客户支持系统中，使用 Milvus 或 Zilliz Cloud 集成 Airbyte 可以创建基于语义搜索的智能技术支持工单系统，从而为用户提供即时、有用的信息，减少人工干预，提升用户体验。</p><p>Zilliz 始终致力于提升非结构化数据管理和处理能力和技术，本次推出的 Upsert、Kafka Connector、Airbyte 等工具的集成都展现了这一点。后续，我们将进一步优化数据获取和数据 Pipeline 功能，敬请期待！</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/10315720</guid>
            <link>https://my.oschina.net/u/4209276/blog/10315720</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[算力基础设施领域国家标准发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0; margin-right:0">2023 年 11 月 27 日，国家标准 GB/T 43331-2023《互联网数据中心（IDC）技术和分级要求》正式发布。中国信息通信研究院（简称「中国信通院」）联合多家企事业单位编制的这一国家标准正契合当前国家算力基础设施建设和算力产业高质量发展需要。</p><p style="margin-left:0; margin-right:0"><img alt="" height="292" src="https://oscimg.oschina.net/oscnet/up-cc1753c1d4186d7e0e332aeaa3974d09ff3.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">该标准规定了互联网数据中心（IDC）在绿色、可用性、安全性、服务能力、算力算效、低碳等六大方面的技术及分级要求，适用于互联网数据中心（IDC）的规划、设计、建设、运维和评估，期望更好的为不同行业深化赋能作用。</p><p style="margin-left:0; margin-right:0">2013 年以来，中国信通院云计算与大数据研究所数据中心团队基于中国通信标准化协会编制发布了数项数据中心评级通信行业标准，对数据中心的绿色、可靠和安全性进行分级分类。经过多年实践迭代，团队联合业界众多使用方、设计方和供应方共同编制了该国家标准，以期更好地指导我国数据中心的健康发展。</p><p style="margin-left:0; margin-right:0">高能效一直是数据中心发展过程中广受关注的问题，该国家标准将在绿色技术应用和运维制度管理等方面提出促进数据中心能效水平提升的具体要求；服务能力是数据中心对外服务的综合体现，通过对服务能力的客观评价，有利于数据中心的自我改进提升，也有利于客户根据业务需求选择合适的数据中心；可用性方面，通过提高设备冗余，可以在架构方面更好地保障数据中心应对突发情况的能力；安全性有助于保障数据中心设备运行及人员的安全。通过综合评估数据中心等级情况，有利于运营者加强自我了解，更有利于行业按需选择。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269062</guid>
            <link>https://www.oschina.net/news/269062</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[国产编程语言 MoonBit（月兔）需要支持中文关键字吗？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>MoonBit（月兔）是中国开发者团队创建的编程语言，由粤港澳大湾区数字经济研究院（IDEA 研究院）基础软件中心负责人张宏波领导的团队开发。</p><p>张宏波本人不仅为多种编程语言做出了贡献，包括 OCaml、ReScript（原 ReasonML/BuckleScript）和 Flow，还曾是 Rescript 语言工具链几乎所有关键组件的作者，包括高速编译器、标准库以及构建系统等。</p><blockquote><p>MoonBit 专为云计算、边缘计算设计，是一个用于云计算和边缘计算的 WebAssembly 端到端编程语言工具链，集开发、编译、测试、部署于一体 —— 涵盖了通用程序语言设计、编译器、构建系统、IDE、部署工具等。在语言设计、编译器和构建系统上实现高度的垂直整合，为用户提供更佳的开发体验和性能，致力打造未来世界级的基础软件生态。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8f1d876877f96c97b9e12b93fb1fef4c7ec.gif" referrerpolicy="no-referrer"></p></blockquote><p>昨天，张宏波在知乎发表提问：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F632589892" target="_blank">《MoonBit 国产编程语言提供中文关键字的可能性？》</a></u>，希望收集一些关于为 MoonBit 提供中文关键字支持的反馈，主要是有两方面考虑：一是支持中文关键字从社区来说会带来什么潜在的负面作用？另外就是了解下真实的中文编程用户有多少。</p><p>张宏波说道：</p><blockquote><p>对于专业人士来说，中文确实不是学习编程的主要难点，但是从讨论热烈的程度来说，好像对一部分人来说或多或少是个门槛。<strong>从技术实现来讲，可能就是一个上午就能大概支持了</strong>。</p><p>我提这个问题是想从两方面收集一些反馈：<strong>一方面是支持中文关键字从社区来说会带来什么潜在的负面作用？另一方面是了解下真实的中文编程用户有多少，你会因问 MoonBit 支持中文关键字而更多地使用或者推荐给其他人吗？</strong></p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-11a36224f77741f56eab1b317a5008a9d60.png" referrerpolicy="no-referrer"></p><p>下面是用 MoonBit 语言实现<code>fib</code>函数的示例代码：</p><pre><code>// Moonbit
func fib(num : Int) -&gt; Int {
  fn aux(n, acc1, acc2) {
    match n {
      0 =&gt; acc1
      1 =&gt; acc2
      _ =&gt; aux(n - 1, acc2, acc1 + acc2)
    }
  }

  aux(num, 0, 1)
}
</code></pre><p><strong>延伸阅读：</strong></p><ul><li><strong><em><u><a href="https://www.oschina.net/news/255951/moonbit-first-announce" target="_blank">中国开发者团队创建的编程语言：MoonBit（月兔）</a></u></em></strong></li><li><strong><em><u><a href="https://www.oschina.net/project/awesome?columnId=20" target="_blank">中国人主导编程语言列表</a></u></em></strong></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269052</guid>
            <link>https://www.oschina.net/news/269052</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AYANEO 新品复古 Mini PC：R3 3200U/R7 5700U 可选]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">游戏硬件公司 Ayaneo 于近日<span style="background-color:#ffffff">正式发布了旗下首款迷你主机：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ayaneo.com%2Fproduct%2FAYANEO-Retro-Mini-PC-AM01.html" target="_blank">Ayaneo Retro Mini PC AM01</a>，号称引领 Mini PC 2.0 时代。该公司全新的 Mini PC 系列旨在满足玩家的多样化需求，打造无缝的游戏体验。</span></p><p><span style="color:#000000">Retro Mini PC AM01 整体设计致敬了苹果公司经典的&nbsp;Macintosh。精致复古的造型设计搭配<span style="background-color:#ffffff">仅 1L 的小巧体积，轻巧且便携，Bare System 重量约为 466 克。机身正面带有一个可自主更换的磁吸装饰件，虚拟屏幕（仅用于装饰目的，不可拆卸）同样也可以使用自定义贴纸进行装饰。</span></span></p><p><span style="color:#000000">虽然&nbsp;<span style="background-color:#ffffff">Ayaneo Retro Mini PC 具有苹果风格的外观，但实际上运行的却是 Windows 11；支持安装 Windows 和 Ubuntu、Debian 等 Linux 系统，以及 Steam OS 和 Batocera 等游戏系统。它可以配置为软件路由器或个人 NAS 系统使用。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">核心配置方面，AYANEO Retro Mini PC AM01&nbsp;配备 AMD Ryzen 3 3200U 或 Ryzen 7 5700U，提供多种处理器选项以适应各种用途需要。并且具有良好的可扩展性，配备五个 USB 端口（一个 USB-C 和四个 USB-A），另外还有 HDMI、DisplayPort、耳机插孔、以太网、蓝牙和 Wi-Fi。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">散热方面采用了高性能四铜管导热结构、35W 大尺寸高压涡轮风扇、60008 mm² 铝制散热片的设计；</span></span><span style="color:#000000"><span style="background-color:#ffffff">立体环绕进排气</span></span><span style="color:#000000"><span style="background-color:#ffffff">系统，智能风扇控制。</span></span></p><p><img height="430" src="https://oscimg.oschina.net/oscnet/up-d080ffb024ee9f3cec60c28fd06a4058905.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">AM01 的<span style="background-color:#ffffff">早鸟优惠价格为 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.indiegogo.com%2Fprojects%2Fayaneo-retro-mini-pc-creator-of-mini-pc-2-0-era%23%2F" target="_blank">149 美元起</a>，最高为 459 美元。</span>现已接受预订，官方计划于 12 月开始发货。<span style="background-color:#ffffff">具体的价格矩阵如下所示：</span></span></p><p><img alt="" height="267" src="https://oscimg.oschina.net/oscnet/up-0cd8ae66a9a0393d2fb33a48f61a185f409.jpg" width="500" referrerpolicy="no-referrer"></p><p><strong>外观：</strong></p><p><img alt="" height="359" src="https://oscimg.oschina.net/oscnet/up-f8a5d7972d50038132cff8a992237d7b940.webp" width="500" referrerpolicy="no-referrer"></p><p><img height="376" src="https://oscimg.oschina.net/oscnet/up-e356e6ca490bb95486b9e1c3f8430ed747b.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="399" src="https://oscimg.oschina.net/oscnet/up-062ac361b585bde3beff445262346fb83b7.webp" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="472" src="https://oscimg.oschina.net/oscnet/up-79b4dd3419f6dc327dc82be45836609e8cb.webp" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="115" src="https://oscimg.oschina.net/oscnet/up-9517c76acb34e140a6044d3e7472437369f.webp" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">详情可查看<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ayaneo.com%2Fproduct%2FAYANEO-Retro-Mini-PC-AM01.html" target="_blank">官网</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 07:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269045/ayaneo-retro-mini-pc-am01</guid>
            <link>https://www.oschina.net/news/269045/ayaneo-retro-mini-pc-am01</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Turbo Pascal 诞生 40 年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Turbo Pascal <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.marcocantu.com%2Fblog%2F2023-november-turbopascal40.html" target="_blank">迎来了 40 岁生日</a></u>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-48365f6b4678042d953b96727360a44c28a.png" referrerpolicy="no-referrer"></p><p>1983 年 11 月 20 日，Borland 公司发布了 Turbo Pascal 的第一个版本。<strong>该版本的编译器核心部分由&nbsp;<span style="background-color:#ffffff; color:#333333">Anders Hejlsberg&nbsp;</span>授权给 Borland 公司</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-55fee9e8e268162cefc3a9f34a094250bdc.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwinworldpc.com%2Fproduct%2Fturbo-pascal%2F100" target="_blank">https://winworldpc.com/product/turbo-pascal/100</a></u></em></p><p>Anders Hejlsberg 为 MS-DOS 和 CP/M 设计了 Pascal 编译器，Borland 买下该编译器并改称 <strong>Turbo Pascal</strong>，之后 Anders Hejlsberg 也加入了 Borland 公司，并且是后来所有 Turbo Pascal 版本与 Delphi 前 3 个版本的架构师。</p><p>再后来 Anders Hejlsberg 被比尔·盖茨下重本挖到了微软，先后创造了 Visual J++、.NET、C#&nbsp;和&nbsp;TypeScript。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f1f3c48731e272b9d855120589ccc1969de.png" referrerpolicy="no-referrer"></p><p>说回 Turbo Pascal，它作为一种结构化编程语言对计算机编程产生了重大影响，并成为了许多程序员的入门语言。</p><p>Turbo Pascal 的设计目标是提供一种易于学习和使用的编程语言，同时具有高效的编译器和强大的功能。它采用了 Pascal 语言的语法和结构，但在性能和功能上进行了优化和扩展。Turbo Pascal 的编译器非常快速，可以在几秒钟内将源代码编译成可执行文件。这使得程序员能够快速地进行开发和调试。</p><p>Turbo Pascal 在教育领域也非常受欢迎。许多学校和大学使用 Turbo Pascal 作为计算机科学课程的教学工具。它的简单易学的语法和清晰的结构使得初学者能够快速上手，并理解编程的基本概念。</p><hr><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/130871/26-years-of-delphi" target="news">Delphi 26 岁</a></li><li><a href="https://www.oschina.net/news/241121/delphi-11-n-cbuilder-11-ce-released" target="news">Delphi 11 和 C++Builder 11 社区版发布</a></li><li><a href="https://www.oschina.net/news/265941/rad-studio-12-athens" target="news">Delphi 12 &amp; C++ Builder 12、RAD Studio 12 发布</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269027/turbo-pascal-turns-40</guid>
            <link>https://www.oschina.net/news/269027/turbo-pascal-turns-40</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Sailfish OS 开发商 Jolla 已被其前管理层收购]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>芬兰科技公司 Jolla 的前管理层收购了 Jolla Ltd. 的全部业务和员工。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjolla.com%2Fcontent%2Fuploads%2F2023%2F11%2FFormer_leadership_buys_Jolla_Business_Pressrelease_271123_.pdf" target="_blank">根据 Jolla 发布的新闻稿</a></u>，Jolla Ltd 专注于操作系统和汽车软件的全部业务和员工将被转移到一家新公司，这家新公司已被 Jolla 前管理层收购。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-a0fea2cd154728b4d75b4df0ee0fe5f1894.png" referrerpolicy="no-referrer"></p></blockquote><p>由于乌克兰战争，<strong>俄罗斯在 Jolla 集团结构中的所有权成为员工和客户面临的一个紧迫问题</strong>，最终导致该公司于 2023 年春季开始实施企业重组计划。2023 年 11 月 24 日，Pirkanmaa 地方法院就重组计划做出了决定，并责成将业务完全出售给另一家公司。目前 Jolla 的前管理层已经收购了该公司。</p><p>Jolla 是一家曾经致力于开发智能手机和平板电脑的公司，但是这些产品并没有取得成功。后来 Jolla 将重心转向了基于 Linux 的 Sailfish OS<span style="background-color:#ffffff; color:#333333">（旗鱼）</span>，并将其应用于现有设备上。<span style="background-color:#ffffff; color:#333333">Sailfish OS 是由 Jolla 在 MeeGo 基础上开发的移动操作系统。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-11949d06737c31b962048e00e7e15b11d7f.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7f799a724c401bfe3018e347c698e78405b.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><img height="1476" src="https://oscimg.oschina.net/oscnet/up-7b2f29a69cf34959186e9e7746927ce1a22.png" width="3226" referrerpolicy="no-referrer"></p><p>新公司将继续致力于开发 Sailfish OS，并向全球客户销售。他们还计划将 Sailfish OS 引入新的「人工智能时代」。Jolla 还将通过自己的子公司 Seafarix 为汽车行业提供软件。</p><p><strong>延伸阅读：<em><u><a href="https://www.oschina.net/news/266231">俄罗斯操作系统 Aurora OS 5.0 全新 UI 亮相</a></u></em></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269024/jolla-acquired-by-management</guid>
            <link>https://www.oschina.net/news/269024/jolla-acquired-by-management</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 表达式引擎选型调研分析]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><p><span style="letter-spacing: 1px;display: none;line-height: 0px;">‍‍</span></p><p style="margin-bottom: 24px;line-height: 1.6em;margin-top: 0px;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.22676579925650558" src="https://oscimg.oschina.net/oscnet/73c34fc7-7990-4717-b675-aba8baad56ca.gif" data-type="gif" data-w="1076" style="" referrerpolicy="no-referrer"></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 编辑器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">一、简介</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"></h1><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">我们项目组主要负责面向企业客户的业务系统，<strong>企业的需求往往是多样化且复杂的，对接不同企业时会有不同的定制化的业务模型和流程</strong>。我们在业务系统中<strong>使用表达式引擎，集中配置管理业务规则，并实现实时决策和计算，可以提高系统的灵活性和响应能力</strong>，从而更好地满足业务的需求。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">举个简单的例子，假设我们有一个业务场景，在返利系统中，当推广员满足一定的奖励条件时，就会给其对应的奖励金额。例如某个产品的具体奖励规则如下：</span></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024223" data-ratio="0.3739612188365651" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1bb246c0-169f-4742-ab48-5956e774e993.png" data-type="png" data-w="361" style="" referrerpolicy="no-referrer"></p><section style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">这个规则看起来很好实现，只要在代码里写几个 if else 分支就可以了。但是如果返利系统对接了多家供应商，且每家提供的产品的奖励规则都不同呢？再通过硬编码的方式写 if else 似乎就不太好了，每次增加修改删除规则都需要系统发版上线。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">引入规则引擎似乎就能解决这个问题，规则引擎的一个好处就是可以使业务规则和业务代码分离，从而降低维护难度，同时它还可以满足业务人员通过编写 DSL 或通过界面指定规则的诉求，这样就可以在没有开发人员参与的情况下建立规则了，这种说法听起来似乎很有道理，但在实践中却很少行得通。首先，规则引擎有一定的学习成本，即使开发人员使用也需要进行专门的学习，更何况没有任何编程背景的业务人员，其次，其实现的复杂度也高，如果业务规则复杂，规则制定者对规则引擎内部隐藏的程序流程不了解，很可能会得到意想不到的结果，最后，有些规则引擎还存在性能瓶颈。如果对规则引擎和表达式引擎都不熟悉，抽离的业务规则又需要由开发人员来制定，那么<strong>相比之下表达式引擎就要容易上手得多，其语法更接近 Java，而且有些表达式引擎还会将表达式编译成字节码，在执行速度和资源利用方面可能就更有优势。</strong>所以，对于此类业务场景，使用表达式引擎似乎更加合适一些。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">本文主要对 Java 表达式引擎进行概要性介绍和分析，并提供一定建议，为团队研发过程中对表达式引擎的技术选型提供输入。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 编辑器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">二、技术栈简介</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6em;visibility: visible;"></h1><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);visibility: visible;"></h2><section style="margin-top: 24px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6em;visibility: visible;"><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">本文将针对</span>AviatorScript 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>MVEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>OGNL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>SpEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>QLExpress 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>JEXL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">、</span>JUEL 
  <span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">几种常见表达式引擎进行选型调研。先简单介绍一下这几种表达式引擎。</span></section><span id="OSC_h2_1"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.1 AviatorScript</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript 是一门高性能、轻量级寄宿于 JVM 之上的脚本语言。AviatorScript 可将表达式编译成字节码。它原来的定位一直只是一个表达式引擎，不支持 if/else 条件语句，也不支持 for/while 循环语句等，随着 5.0 的发布变身为一个通用脚本语言，支持了这些语言特性。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：https://www.yuque.com/boyan-avfmj/aviatorscript﻿</span></section><span id="OSC_h2_2"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.2 MVEL (MVFLEX Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL 是一种混合的动态/静态类型的、可嵌入 Java 平台的表达式语言，MVEL 被众多 Java 项目使用。MVEL 在很大程度上受到 Java 语法的启发，但也有一些本质区别，目的是使其作为一种表达式语言更加高效，例如直接支持集合、数组和字符串匹配的操作符，以及正则表达式。最早版本发布于 2007 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：http://mvel.documentnode.com/﻿</span></section><span id="OSC_h2_3"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.3 OGNL (Object-Graph Navigation Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">OGNL 是 Object-Graph Navigation Language（对象图导航语言）的缩写；它是一种表达式语言，用于获取和设置 Java 对象的属性，以及其他额外功能，如列表投影和选择以及 lambda 表达式。于 2005 年发布 2.1.4 版。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：https://commons.apache.org/dormant/commons-ognl/language-guide.html﻿</span></section><span id="OSC_h2_4"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.4 SpEL (Spring Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">SpEL 是一种功能强大的表达式语言，支持在运行时查询和操作对象图。该语言的语法与 Unified EL 相似，但提供了更多的功能，其中最主要的是方法调用和基本的字符串模板功能。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：https://docs.spring.io/spring-framework/docs/5.3.x/reference/html/core.html#expressions﻿</span></section><span id="OSC_h2_5"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.5 QLExpress</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由阿里的电商业务规则、表达式（布尔组合）、特殊数学公式计算（高精度）、语法分析、脚本二次定制等强需求而设计的一门动态脚本引擎解析工具，于 2012 年开源。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：https://github.com/alibaba/QLExpress﻿</span></section><span id="OSC_h2_6"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.6 JEXL (Java Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JEXL 旨在促进在 Java 编写的应用程序和框架中实现动态脚本功能。JEXL 基于对 JSTL 表达式语言的一些扩展实现了一种表达式语言，支持 shell 脚本或 ECMAScript 中的大部分构想。1.0 版发布于 2005 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：https://commons.apache.org/proper/commons-jexl/reference/syntax.html﻿</span></section><span id="OSC_h2_7"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.7 JUEL (Java Unified Expression Language)</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JUEL 是统一表达式语言 (EL) 的实现，该语言是 JSP 2.1 标准 (JSR-245) 的一部分，已在 JEE5 中引入。此外，JUEL 2.2 实现了 JSP 2.2 维护版本规范，完全符合 JEE6 标准。于 2006 年发布 2.1.0 版本，2.2.7 发布于 2014 年。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：https://juel.sourceforge.net/guide/start.html﻿</span></section><span id="OSC_h2_8"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.8 Janino</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">Janino 是一个超小、超快的 Java 编译器，也可以用作表达式引擎，它的性能非常出色，根据官网介绍，Apache Spark、Apache Flink、Groovy 等优秀的开源项目都在用 Janino。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">文档：http://janino-compiler.github.io/janino/﻿</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由于 Janino 实际是一个 Java 编译器，理论上其性能应该更接近于直接执行 Java 代码，其次作为表达式引擎使用起来比较复杂。因此，下面的对比中，Janino 不参与比较，可以将其作为一个参照。</span></section><span id="OSC_h2_9"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">2.9 其他</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如下一些表达式引擎虽然也常见于各技术博客，但由于长期没有更新维护，因此没有纳入此次选型比较</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">Fel</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">Fel 是轻量级的高效的表达式计算引擎。Fel 源自于企业项目，设计目标是为了满足不断变化的功能需求和性能需求。项目托管于 Google Code，上次更新是 2012 年，已经十几年没有更新了，所以没有纳入此次选型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">ik-expression</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">IK Expression 是一个开源的（OpenSource)，可扩展的（Extensible），基于 java 语言开发的一个超轻量级（Super lightweight）的公式化语言解析执行工具包。2009 年 2 月发布第一个版本，2009 年 10 月发布最后一个版本后再没有新版本发布，所以没有纳入此次选型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">JSEL</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JSEL 是一个兼容 JavaScript 运算规则的简单的表达式解释引擎，你可以通过 Map 接口，或者 JavaBean 给出一个变量集合，能后通过表达式从这个集合中抽取变量，再通过表达式逻辑生成你需要的数据。2009 年发布第一个版本，2011 年发布最后一个版本后未再更新，所以没有纳入此次选型。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">此外规则引擎如 Drools， urule， easy-rules 不参与此次选型比较。相对比较成熟完善的脚本语言如 Groovy 也不参与选型比较。这篇文章主要针对相对轻量简单的表达式引擎进行选型。</span></section><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 编辑器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">三、技术栈选型评估</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"></h1><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">选择表达式引擎，我们希望其社区支持情况良好、实现复杂度适中、执行速度快、安全并且简单易学。所以，接下来将<strong>从社区支持情况、引入的大小和依赖、性能、安全性、使用案例和语法几个方面对几种表达式引擎进行比较评估。</strong></span></section><span id="OSC_h2_10"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.1 社区支持情况</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">社区支持情况可以辅助评估项目的健康度，有问题是不是能及时解决，项目是不是能持续演进等等</span></strong><span style="font-size: 15px;letter-spacing: 1px;">，下面列出了 GitHub star，watch，fork，last commit 等数据，可以作为参考，由于数据随着时间推移会产生变化，以下仅针对 2023.10.29 的数据进行分析。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><img class="rich_pages wxw-img" data-imgfileid="100024219" data-ratio="0.28055555555555556" src="https://oscimg.oschina.net/oscnet/c39b5f24-498a-493f-a227-256df954a368.png" data-type="png" data-w="1080" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿﻿由于 Spring 项目被广泛使用，而 SpEl 又是 Spring 的一个子项目，所以从各项数据来看 SpEl 的社区支持情况是最好的。下面先排除 SpEl 分析其他几个表达式引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">QLExpress，AviatorScript 和 MVEL 在国内使用比较多，这可能是他们 star，watch，fork 数较高的原因。说明这几个项目受欢迎度，受认可度，影响力应该较高。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">从 issues，pull requests 数来分析，可以看到 MVEL，AviatorScript 和 QLExpress 高于其他脚本引擎，说明他们的用户需求和反馈较多，也可能意味着项目面临较多问题和挑战。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL，JEXL，OGNL 均有较多贡献者参与。他们的社区协作、项目可持续性方面应该都比较不错。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">综合以上分析，除 SpEl 外，QLExpress，AviatorScript 和 MVEL 的社区支持情况都相对较好。</span></strong></section><span id="OSC_h2_11"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.2 引入大小和依赖</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">代码大小和依赖可以辅助评估代码的复杂性，下面列出了各个 Github 仓库的代码大小，可以作为一个参考（实际并不完全准确反映其实现的复杂性）。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">以下是 2023.10.29 的数据</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024218" data-ratio="1.41635687732342" src="https://oscimg.oschina.net/oscnet/afac92d7-a244-4283-bc12-84e3f543152c.png" data-type="png" data-w="269" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">﻿﻿JUEL，QLExpress 代码大小最小，都在 600 多 KB；其次是 OGNL 1MB 多一点；AviatorScript，MVEL，JEXL 大小都在 2MB 左右；SpEl 由于在 spring-framework 仓库中，上表中统计的是 spring-framework 的总量，单纯看 SpEl 的模块 spring-expression 的话，大小是 1.3MB 左右。但是其还依赖了 spring-core 和 spring-jcl，再含这两个的话，大小 7.4MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">我们再结合各个项目的依赖来分析一下。</span></section><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="ruby"><code><span class="code-snippet_outer">+- org.mvel:mvel2:jar:2.5.0.Final:compile</span></code><code><span class="code-snippet_outer">+- com.googlecode.aviator:aviator:jar:5.3.3:compile</span></code><code><span class="code-snippet_outer">+- com.alibaba:QLExpress:jar:3.3.1:compile</span></code><code><span class="code-snippet_outer">|  +- commons-beanutils:commons-beanutils:jar:1.8.2:compile</span></code><code><span class="code-snippet_outer">|  |  \- (commons-logging:commons-logging:jar:1.1.1:compile - omitted for conflict with 1.2)</span></code><code><span class="code-snippet_outer">|  \- commons-lang:commons-lang:jar:2.4:compile</span></code><code><span class="code-snippet_outer">+- org.codehaus.janino:janino:jar:3.1.10:compile</span></code><code><span class="code-snippet_outer">|  \- org.codehaus.janino:commons-compiler:jar:3.1.10:compile</span></code><code><span class="code-snippet_outer">+- ognl:ognl:jar:3.4.2:compile</span></code><code><span class="code-snippet_outer">|  \- org.javassist:javassist:jar:3.29.2-GA:compile</span></code><code><span class="code-snippet_outer">+- org.apache.commons:commons-jexl3:jar:3.3:compile</span></code><code><span class="code-snippet_outer">|  \- commons-logging:commons-logging:jar:1.2:compile</span></code><code><span class="code-snippet_outer">+- org.springframework:spring-expression:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">|  \- org.springframework:spring-core:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">|     \- org.springframework:spring-jcl:jar:5.3.29:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-api:jar:2.2.7:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-impl:jar:2.2.7:compile</span></code><code><span class="code-snippet_outer">+- de.odysseus.juel:juel-spi:jar:2.2.7:compile</span></code></pre></section></pre><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">除了 SpEl 外，QLExpress，OGNL，JEXL 也都有其他依赖。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考虑 commons-beanutils， commons-lang， commons-logging 三个依赖，QLExpress 引入的大小在 10MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考虑 javassist 依赖，OGNL 引入的大小是 4MB 多。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">如果考虑 commons-logging 依赖，JEXL 引入的大小是 2.5MB 左右。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">综合来看，JUEL，AviatorScript，MVEL，JEXL 在引入大小和依赖方面要好于其他。</span></strong></section><span id="OSC_h2_12"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3 性能</span></strong></span></h2><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">较好的性能意味着系统能够快速地响应用户的请求，减少等待时间，提升体验。</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">性能方面主要通过 JMH 在字面量表达式、含有变量的表达式以及含有方法调用的表达式等使用场景对几个表达式引擎进行测试。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">JMH（Java Microbenchmark Harness），是用于代码微基准测试的工具套件，主要是基于方法层面的基准测试，精度可以达到纳秒级。该工具是由 Oracle 内部实现 JIT 的大牛们编写的，他们应该比任何人都了解 JIT 以及 JVM 对于基准测试的影响。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由于不同表达式引擎语法或特性稍有差别，下面测试中对于差异项会进行说明。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">性能测试代码地址：</span><span style="letter-spacing: 1px;font-size: 15px;">GitHub</span><span style="font-size: 15px;">-https://github.com/howiefh/expression-engine-benchmark</span></section><span id="OSC_h3_13"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.1 字面量表达式</span></strong></h3><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024215" data-ratio="0.43444730077120824" src="https://oscimg.oschina.net/oscnet/57f87300-b4c2-48fe-bb02-d1bd3b156186.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: left;"><span style="font-size: 15px;letter-spacing: 1px;text-align: justify;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;text-align: justify;">：1000 + 100.0 * 99 - (600 - 3 * 15) / (((68 - 9) - 3) * 2 - 100) + 10000 % 7 * 71</span></section><section style="line-height: 1.6em;margin-top: 16px;margin-bottom: 16px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(61, 170, 214);">&nbsp;&nbsp; </span><span style="font-size: 15px;letter-spacing: 1px;">：6.7 - 100 &gt; 39.6 ? 5 == 5 ? 4 + 5 : 6 - 1 : !(100 % 3 - 39.0 &lt; 27) ? 8 * 2 - 199 : 100 % 3</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">说明：</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">由于 QlExpress 执行第 2 个表达式时报错，需要增加圆括号，实际执行的是 6.7 - 100 &gt; 39.6 ? (5 == 5 ? 4 + 5 : 6 - 1) : (!(100 % 3 - 39.0 &lt; 27) ? 8 * 2 - 199 : 100 % 3)</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">结果分析:</span></strong></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">可以明显看到 JEXL，JUEL，QlExpress 这三个表达式引擎性能明显不如其他引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">SpEl 在执行第 1 个算数操作时表现出色，但是在执行第 2 个嵌套三元操作时明显不如 AviatorScript，MVEL，OGNL 引擎。</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">此轮测试中 AviatorScript，OGNL，MVEL 表现出色。AviatorScript，OGNL 执行两个表达式表现都比较出色，其中 AviatorScript 略好于 OGNL。MVEL 在执行第 1 个算数操作时表现最出色，但是在执行第 2 个嵌套三元操作时慢于 AviatorScript，OGNL 引擎。</span></section><span id="OSC_h3_14"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.2 含有变量的表达式</span></strong></h3><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024217" data-ratio="0.8046272493573264" src="https://oscimg.oschina.net/oscnet/cf08fbe6-72a8-45dc-bf9e-1303f1f07414.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;"><span style="letter-spacing: 1px;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span>：pi * d + b - (1000 - d * b / pi) / (pi + 99 - i * d) - i * pi * d / b</span><br></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;color: rgb(61, 170, 214);background-color: rgb(61, 170, 214);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：piDecimal * dDecimal + bDecimal - (1000 - dDecimal * bDecimal / piDecimal) / (piDecimal + 99 - iDecimal * dDecimal) - iDecimal * piDecimal * dDecimal / bDecimal</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 128, 255);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99 == i * pi + (d * b - 199) / (1 - d * pi) - (2 + 100 - i / pi) % 99</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 209, 0);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：(clientVersion == '1.9.0' || clientVersion == '1.9.1' || clientVersion == '1.9.2') &amp;&amp; deviceType == 'Xiaomi' &amp;&amp; weight &gt;= 4 &amp;&amp; osVersion == 'Android 9.0' &amp;&amp; osType == 'Android' &amp;&amp; clientIp != null &amp;&amp; requestTime &lt;= now&amp;&amp; customer.grade &gt; 1 &amp;&amp; customer.age &gt; 18</span></section><section style="margin-top: 24px;margin-bottom: 24px;line-height: 1.6em;"><span style="font-size: 15px;letter-spacing: 1px;">说明：</span></section><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由于不同的表达式引擎在执行第 2 个表达式时底层实现除法时有所差别，MVEL，AviatorScript，JEXL 执行 decimal.divide(otherDecimal, java.math.MathContext.DECIMAL128)，其他实际执行的是 decimal.divide(otherDecimal, scale, roundingMode)，只是参数略有不同，分析时分组进行。</span></p></li><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由于 QlExpress 执行第 3 个表达式时报错，不支持非整型 mod 操作，需要增加类型转换，实际执行的是 i * pi + (d * b - 199) / (1 - d * pi) - (int)(2 + 100 - i / pi) % 99 == i * pi + (d * b - 199) / (1 - d * pi) - (int)(2 + 100 - i / pi) % 99</span></p></li><li><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由于 A</span><span style="font-size: 15px;letter-spacing: 1px;">viatorScript 执行第 4 个表达式时报错，null 的字面量是 nil，实际执行的是 (clientVersion == '1.9.0' || clientVersion == '1.9.1' || clientVersion == '1.9.2') &amp;&amp; deviceType == 'Xiaomi' &amp;&amp; weight &gt;= 4 &amp;&amp; osVersion == 'Android 9.0' &amp;&amp; osType == 'Android' &amp;&amp; clientIp != nil &amp;&amp; requestTime &lt;= now&amp;&amp; customer.grade &gt; 1 &amp;&amp; customer.age &gt; 18</span></p></li></ul><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">结果分析：</span></strong></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 1 个基本类型包装类的算术计算 SpEl 最优。其次是 AviatorScript，MVEL，OGNL。而 JEXL，JUEL，QlExpress 则不如其他引擎。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 2 个 BigDecimal 类型的算术计算。由于底层实现不同，分为两组。第 1 组 MVEL、AviatorScript 和 JEXL，AviatorScript 优于 MVEL 优于 JEXL。第 2 组 JUEL，QlExpress，OGNL 和 SpEl，性能由优到差依次是 OGNL，SpEl，JUEL，QlExpress。并且第 1 组由于精度更高，性能明显都差于第 2 组。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 3 个含有基本类型包装类算数计算的布尔表达式。SpEl 最优，AviatorScript 次之，接下来依次是 OGNL, MVEL，JUEL，JEXL，QlExpress。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">第 4 个含有字符串比较的布尔表达式。AviatorScript，MVEL，JEXL，OGNL 性能优于 JUEL，QlExpress，SpEl。</span></p><span id="OSC_h3_15"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.3 含有方法调用的表达式</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;text-align: center;"><img class="rich_pages wxw-img" data-imgfileid="100024216" data-ratio="0.6195372750642674" src="https://oscimg.oschina.net/oscnet/f7706f84-f707-493c-8470-1d59715d2194.svg" data-type="svg" data-w="1556" style="border-width: 0px;border-style: none;border-color: rgb(235, 238, 245);" referrerpolicy="no-referrer"></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(2, 30, 170);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：new java.util.Date()</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(61, 170, 214);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：s.substring(b.d)</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;background-color: rgb(0, 128, 255);">&nbsp; &nbsp;</span><span style="font-size: 15px;letter-spacing: 1px;">：s.substring(b.d).substring(a, b.c.e)</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">说明：</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由于 JUEL 执行 new java.util.Date() 时报错，不支持 new 实例，本轮实际执行的是自定义函数 fn:date()</span></p></li><li><p style="margin-top: 16px;margin-bottom: 16px;"><span style="letter-spacing: 1px;font-size: 15px;">由于 A</span><span style="font-size: 15px;letter-spacing: 1px;">viatorScript 执行 s.substring 时报错，需使用其提供的内部函数，本轮实际执行的是其内部函数 string.substring</span></p></li></ul><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">结果分析：</span></strong></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">此轮测试中 SpEl 的表现最优，甚至比 Janino 还要快。MVEL，AviatorScript 次之，在执行构造方法时 MVEL 要好于 AviatorScript。JEXL 表现也比较出色。QlExpress，JUEL，OGNL 这三个表达式引擎则不如其他引擎。</span></p><span id="OSC_h3_16"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.3.4 总结</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">综合以上测试结果，AviatorScript，SpEl，MVEL，OGNL 性能表现相对较好。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript 性能相对较好，表现均衡，但其语法相较其他引擎跟 Java 的差异略大。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">SpEl 除了在个别场景下性能较差，大部分场景表现非常出色，尤其是在字面量和含有变量的算数计算及方法调用场景下。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">MVEL 性能表现相对均衡，含有变量的算术计算略差于 AviatorScript，其在字面量算术计算，方法调用场景下表现都非常出色。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">OGNL 性能表现也相对均衡，但方法调用场景下表现不佳。</span></p><span id="OSC_h2_17"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><span style="color: rgb(2, 30, 170);"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4 安全</span></strong></span></h2><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">引入表达式引擎，应该重视系统的安全性和可靠性，比如要防止在不可信环境中被注入恶意脚本，越权执行某些系统命令或使应用停止服务等。</span></strong><span style="font-size: 15px;letter-spacing: 1px;">安全性方面主要通过漏洞披露、安全指南和配置比较几种表达式引擎。</span></p><span id="OSC_h3_18"></span><h3 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4.1 漏洞</span></strong></h3><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">首先在 https://cve.mitre.org/cve/search_cve_list.html 通过关键字搜索的方式粗略了解一下不同表达式引擎被公开的漏洞。这种方式可能不是非常的准确，由于不同表达式引擎的使用场景、使用方式、关注度的不同可能导致被公开的漏洞存在差异。比如我们所熟悉的 OGNL、SpEl 的关键字出现在漏洞中的频率明显高于其他表达式引擎。OGNL 在 MyBatis 和 Struts 中被使用，SpEl 则在 Spring 中被广泛使用，这两个表达式引擎会被大部分项目间接使用，直接将用户输入作为表达式的一部分执行，很容易导致出现漏洞。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">我们<strong>可以从这些公布的漏洞中了解不同表达式引擎可能存在的安全隐患及其修复情况，在使用过程中尽可能避免出现类似问题。</strong></span></p><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">此外，不推荐将表达式执行直接开放到不可信的环境，如果确实需要，应该详细了解选择的表达式引擎，是否提供了必要的设置选项可以避免某些安全隐患。</span></strong></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024222" data-ratio="0.5028901734104047" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3f83fb13-b9be-47be-bbef-ecbcbf8b045c.png" data-type="png" data-w="519" style="" referrerpolicy="no-referrer"></p><p><strong><span style="font-size: 15px;letter-spacing: 1px;">3.4.2 安全设置</span></strong><br></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript，QLExpress，JEXL 均从不同程度提供了一些安全选项设置。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">AviatorScript</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">设置白名单</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 在 new 语句和静态方法调用中允许使用的类白名单，默认 null 表示无限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.ALLOWED_CLASS_SET, Sets.newHashSet(List.class));</span></code><code><span class="code-snippet_outer">// 在 new 语句和静态方法调用中允许使用的类白名单，包含子类，默认 null 表示无限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.ASSIGNABLE_ALLOWED_CLASS_SET, Sets.newHashSet(List.class));</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">防止死循环</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 循环最大次数，默认 0 表示无限制</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.MAX_LOOP_COUNT, 10000);</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">特性开关</span></p></li></ul><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="php"><code><span class="code-snippet_outer">// 关闭某些特性</span></code><code><span class="code-snippet_outer">AviatorEvaluator.getInstance().disableFeature(Feature.Module);</span></code><code><span class="code-snippet_outer">AviatorEvaluator.getInstance().disableFeature(Feature.NewInstance);</span></code><code><span class="code-snippet_outer">// 只开启需要的特性</span></code><code><span class="code-snippet_outer">AviatorEvaluator.setOption(Options.FEATURE_SET, Feature.asSet(Feature.If));</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">QLExpress</span></strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">开启沙箱模式</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">QLExpressRunStrategy.setSandBoxMode(true);</span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">在沙箱模式中，不可以：</span></p><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">import Java 类</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">显式引用 Java 类，比如 String a = 'mmm'</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">取 Java 类中的字段：a = new Integer(11); a.value</span></section><section style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">调用 Java 类中的方法：Math.abs(12)</span></section><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">可以：</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">使用 QLExpress 的自定义操作符/宏/函数，以此实现与应用的受控交互</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">使用. 操作符获取 Map 的 key 对应的 value，比如 a 在应用传入的表达式中是一个 Map，那么可以通过 a.b 获取</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">所有不涉及应用 Java 类的操作</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">设置白名单</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="swift"><code><span class="code-snippet_outer">// 设置编译期白名单</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setCompileWhiteCheckerList(Arrays.asList(</span></code><code><span class="code-snippet_outer">    // 精确设置</span></code><code><span class="code-snippet_outer">    CheckerFactory.must(Date.class),</span></code><code><span class="code-snippet_outer">    // 子类设置</span></code><code><span class="code-snippet_outer">    CheckerFactory.assignable(List.class)</span></code><code><span class="code-snippet_outer">));</span></code><code><span class="code-snippet_outer">// 设置运行时白名单// 必须将该选项设置为 true</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setForbidInvokeSecurityRiskMethods(true);</span></code><code><span class="code-snippet_outer">// 有白名单设置时, 则黑名单失效</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.addSecureMethod(RiskBean.class, "secureMethod");</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">设置黑名单</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="swift"><code><span class="code-snippet_outer">// 必须将该选项设置为 true</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.setForbidInvokeSecurityRiskMethods(true);</span></code><code><span class="code-snippet_outer">// 这里不区分静态方法与成员方法, 写法一致</span></code><code><span class="code-snippet_outer">// 不支持重载, riskMethod 的所有重载方法都会被禁止</span></code><code><span class="code-snippet_outer">QLExpressRunStrategy.addSecurityRiskMethod(RiskBean.class, "riskMethod");</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">QLExpess 目前默认添加的黑名单有：</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.System.exit</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.Runtime.exec</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.ProcessBuilder.start</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.Method.invoke</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.Class.forName</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.ClassLoader.loadClass</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span data-w-e-reserve="true" style="border-width: 0px;border-style: solid;border-color: rgb(235, 238, 245);">◦</span><span style="font-size: 15px;letter-spacing: 1px;">java.lang.reflect.ClassLoader.findClass</span></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">防止死循环</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">//可通过 timeoutMillis 参数设置脚本的运行超时时间:1000ms</span></code><code><span class="code-snippet_outer">Object r = runner.execute(express, context, null, true, false, 1000);</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><p style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">JEXL</span></strong></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">使用沙箱</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 使用中应该通过 JexlSandbox 的重载构造方法进行配置</span></code><code><span class="code-snippet_outer">new JexlBuilder().sandbox(new JexlSandbox()).create();</span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">设置白名单权限</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="css"><code><span class="code-snippet_outer">new JexlBuilder().permissions(JexlPermissions.RESTRICTED.compose("com.jd.*")).create();</span></code></pre></section></pre><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">特性开关</span></p></li></ul><pre data-slate-node="element" data-slate-inline="false"><section class="code-snippet__fix code-snippet__js"><pre class="code-snippet__js" data-lang="javascript"><code><span class="code-snippet_outer">// 关闭循环、new 实例，import 等特性</span></code><code><span class="code-snippet_outer">new JexlBuilder().features(new JexlFeatures().loops(false).newInstance(false).importPragma(false)).create();</span></code><code><span class="code-snippet_outer"><br></span></code></pre></section></pre><span id="OSC_h2_19"></span><h2 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"><strong><span style="font-size: 15px;letter-spacing: 1px;">3.5 使用案例</span></strong></h2><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">从业界使用情况可以了解不同表达式引擎的可行性、生态和整合性，以及最佳实践，进而借鉴。从下表可以看到 AviatorScript，MVEL，QLExpress 在国内业务线均有使用案例，有些企业也有文章输出，我们可以借鉴使用。</span></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100024221" data-ratio="0.8702064896755162" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7351a73e-f1e0-4db3-a3d3-b3fe2ca7815b.png" data-type="png" data-w="339" style="" referrerpolicy="no-referrer"></p><p><strong style="color: rgb(2, 30, 170);font-size: 16px;letter-spacing: 0.034em;"><span style="font-size: 15px;letter-spacing: 1px;">3.6 语法</span></strong><br></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">易于理解和使用的语法可以提高开发效率，并降低学习成本。接下来从类型、操作符、控制语句、集合、方法定义几方面比较一下不同表达式引擎的语法设计。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">类型方面，AviatorScript 设计了特有的类型，使用时需要注意其类型转换的优先级 long-&gt;bigint-&gt;decimal-&gt;double。AviatorScript、MVEL、OGNL、JEXL 都支持 BigInteger、BigDecimal 字面量，这意味着进行精确计算时可以使用字面量，将更方便，如 10.24B 就表示一个 BigDecimal 字面量（AviatorScript 中 BigDecimal 字面量后缀是 M）。此外 AviatorScript、QLExpress 还支持高精度计算的设置项。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">操作符方面，QLExpress 支持替换、自定义操作符及添加操作符别名，这可能有助于简化复杂表达式或使表达式更加直观，不过添加预置函数应该可以达到差不多的效果。AviatorScript 也支持自定义部分操作符，不过支持数量相当有限。AviatorScript、SpEl、JEXL 支持正则匹配操作符。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">控制语句方面，除 OGNL、SpEl、JUEL 不支持控制语句外，其他都支持，不过需要注意 AviatorScript 的 else if 语法有些特殊写作 elsif，foreach 语句跟 Java 也有所不同。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">集合方面，除 JUEL 外其他都提供了快捷定义的方式，只不过语法不同。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">函数定义方面，SpEl、JUEL 均不支持，OGNL 支持伪 lambda 定义，其他都支持定义函数。QLExpress 不支持定义 lambda。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">综合来看，和 Java 语法都或多或少存在一些差异。<strong>AviatorScript 设计了自己特有的一些语法，使用的话需要熟悉一下。QLExpress 支持自定义操作符，可以使表达式看起来更直观。MVEL、JEXL 的语法可能更接近 Java，让人更容易接受一些。OGNL、SpEl、JUEL 的语法更简单一些，不支持控制语句和函数定义，当然也可以通过预置一些函数变通解决一些较复杂的问题。</strong></span></p><section style="margin-bottom: 0px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: left;visibility: visible;"><section data-role="paragraph" style="outline: 0px;letter-spacing: 0.544px;visibility: visible;"><section data-role="outer" label="edit by 135editor" style="outline: 0px;visibility: visible;"><section data-role="title" data-tools="135 编辑器" data-id="114995" style="margin-bottom: 24px;outline: 0px;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;visibility: visible;"><section style="margin: 20px auto;outline: 0px;visibility: visible;"><section style="outline: 0px;display: flex;justify-content: flex-start;visibility: visible;"><section style="outline: 0px;display: flex;align-items: center;visibility: visible;"><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;background-color: rgb(10, 77, 209);height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="outline: 0px;color: rgb(34, 34, 34);font-size: 16px;width: 5px;height: 41.5938px;overflow: hidden;visibility: visible;"><br style="outline: 0px;visibility: visible;"></section><section style="padding: 8px 30px;outline: 0px;background-image: linear-gradient(to left, transparent 0%, transparent 50%, rgb(198, 217, 240) 100%);background-position: initial;background-size: initial;background-repeat: initial;background-attachment: initial;background-origin: initial;background-clip: initial;visibility: visible;"><span style="outline: 0px;color: rgb(2, 30, 170);font-size: 15px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">四、选型建议</strong></span></section></section></section></section></section></section></section></section><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 24px;"></h1><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">社区方面，SpEl 无疑是最活跃的。AviatorScript，QLExpress，MVEL 在国内很受欢迎，QLExpress 有阿里背书。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">代码大小和依赖方面，AviatorScript，MVEL 依赖少，并且代码大小也偏小。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">性能方面，如果你使用表达式引擎执行字面量算术计算或方法调用偏多可以选用 SpEl，MVEL。如果希望整体性能表现较好可以选用 AviatorScript。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">安全方面，如果想自定义安全选项，可以考虑 AviatorScript，QLExpress 和 JEXL。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">使用案例方面，AviatorScript，MVEL，QLExpress 在国内都有实际使用案例可循。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">语法方面，可能存在一些主观因素，仅供参考，个人觉得 MVEL、JEXL 的语法设计使用起来会更容易一些。</span></p><p style="margin-top: 24px;margin-bottom: 24px;"><span style="font-size: 15px;letter-spacing: 1px;">通过对以上几个方面的评估和分析，希望可以帮助团队基于自身情况及偏好选择最适合自己项目的 Java 表达式引擎。</span></p><span id="OSC_h1_20"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 24px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">参考资料</span></h1><span id="OSC_h1_21"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[1]</span><span style="outline: 0px;">&nbsp;QLExpress：</span></span><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">https://github.com/alibaba/QLExpress﻿</span></h1><span id="OSC_h1_22"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[2] AviatorScript：https://github.com/killme2008/aviatorscript﻿</span></h1><span id="OSC_h1_23"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[3] MVEL：https://github.com/mvel/mvel﻿</span></h1><span id="OSC_h1_24"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">[4] OGNL：https://github.com/orphan-oss/ognl﻿</span></h1><span id="OSC_h1_25"></span><h1 data-slate-node="element" data-slate-inline="false" style="margin-top: 8px;margin-bottom: 8px;text-wrap: wrap;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="outline: 0px;">[5]&nbsp;SpEl</span>：</span><span style="outline: 0px;color: rgb(136, 136, 136);font-size: 15px;">https://github.com/spring-projects/spring-framework</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></h1><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[6]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">Janino：</span><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/janino-compiler/janino</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[7]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">JUEL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/beckchr/juel</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[8]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">JEXL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/apache/commons-jexl</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[9]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">Fel：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://github.com/dbcxy/fast-el</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">﻿</span></span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">[10]&nbsp;</span><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">ik-expression：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://code.google.com/archive/p/ik-expression/</span></span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[11]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">JS</span><span style="color: rgb(136, 136, 136);font-size: 15px;"><span style="color: rgb(136, 136, 136);outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;">EL：</span><span style="color: rgb(136, 136, 136);outline: 0px;">https://code.google.com/archive/p/lite/wikis/JSEL.wiki</span></span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">﻿</span></p><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;color: rgb(34, 34, 34);background-color: rgb(255, 255, 255);line-height: 1.6em;margin-top: 8px;margin-bottom: 8px;"><span style="color: rgb(136, 136, 136);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;">[1]&nbsp;</span><span style="outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 1px;color: rgb(136, 136, 136);font-size: 15px;">JMH：https://www.cnblogs.com/wupeixuan/p/13091381.html</span></p><p style="margin-top: 8px;margin-bottom: 8px;"><span style="display: none;line-height: 0px;">‍</span></p><section style="margin-bottom: 8px;margin-top: 32px;text-align: center;"><span style="color: rgb(136, 136, 136);font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 1px;text-align: center;text-wrap: wrap;background-color: rgb(255, 255, 255);">-end-</span></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzU1OTgxMTg2Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/9K73WSRq6BWyKqhKFzMgibicMuLCqmmqWpOmQ2tovCBswRKVxdO6zaiarVIPc83MibTauxLibnACJWk48ibUyAXBF7dw/0?wx_fmt=png" data-nickname="京东云开发者" data-alias="JDT_Developers" data-signature="京东云开发者（Developer of JD Technology）是京东科技集团旗下为 AI、云计算、IoT 等相关领域开发者提供技术分享交流的平台。平台将发布京东产品技术信息、行业技术内容、技术活动等资讯。拥抱技术，与开发者携手预见未来！" data-from="0" data-is_biz_ban="0"></mp-common-profile></section><p><span style="letter-spacing: 1px;display: none;line-height: 0px;">‍</span></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - 京东云开发者（JDT_Developers）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10315584</guid>
            <link>https://my.oschina.net/u/4090830/blog/10315584</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JumpServer 开源堡垒机 V2 社区版即将停止维护]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start">尊敬的 JumpServer 开源堡垒机用户：您好！</p><p style="color:#000000; text-align:start">如《关于 JumpServer 开源堡垒机 V2 版本产品生命周期的相关说明》所示，<span style="color:#3e3e3e">JumpServer 开源堡垒机 V2 版本（社区版）将于</span><strong><span style="color:#28937c">2023 年 12 月 31 日</span></strong>停止维护支持。</p><p style="color:#000000; text-align:start">在过去两年多的时间里，JumpServer 开源堡垒机 V2 版本获得了众多用户的支持和喜爱。出于产品自身迭代和用户需求升级的要求，<strong>2023 年 2 月 27 日，JumpServer 开源堡垒机正式发布 v3.0 版本，目前已更新至 v3.9.2 版本。</strong>JumpServer 开源项目组<strong><span style="color:#28937c">建议社区版和企业版用户更新至 JumpServe v3.x 版本</span></strong>，以使用更多的新增功能并获取更好的软件使用体验。</p><p style="color:#000000; text-align:start">JumpServer V2 版本（企业版）维护支持截止日期为<strong><span style="color:#28937c">2025 年 12 月 31 日</span></strong>。</p><p style="color:#000000; text-align:start">aJumpServer 开源堡垒机 V2 版本产品生命周期具体如下，广大用户可以根据时间表合理安排系统升级及迁移工作。</p><p style="color:#000000; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-3c2a04eded6684a1a8f9948a1e26454f4ef.jpg" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ JumpServer 开源堡垒机 V2 版本产品生命周期</span></p><p style="color:#000000; text-align:start">感谢您长期以来对 JumpServer 开源项目的支持与厚爱。如果您在升级过程中遇到问题，可以联系 JumpServer 开源项目组获取升级建议和指导。</p><p style="color:#000000; text-align:right"><span><span style="color:#000000">JumpServer 开源项目组</span></span></p><p style="color:#000000; text-align:right"><span><span style="color:#000000">2023 年 12 月 1 日</span></span></p><p style="color:#000000; text-align:start"><span><strong><span style="color:#000000">关于 JumpServer 开源堡垒机</span></strong></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">JumpServer（jumpserver.org）是广受欢迎的开源堡垒机，遵循 GPL v3 开源许可协议，是符合 4A（包含认证 Authentication 、授权 Authorization、 账号 Accounting 和审计 Auditing）规范的运维安全审计系统。它通过企业版或者软硬件一体机的方式，向企业级用户交付开源增值的运维安全审计解决方案。</span></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">JumpServer 开源堡垒机在分布式架构设计、多云环境支持、大规模资产纳管、容器化部署、使用体验等方面极具领先性，能够很好地满足企业用户在混合 IT 环境中运维安全审计需求。</span></span></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">目前，JumpServer 开源项目在代码托管平台 Github 上的 Star 数量已经超过 22,400 个。在中国的企业用户群中，JumpServer 堡垒机拥有广泛的安装基础，社区版软件的累计安装部署次数超过 250,000 次，用户遍及金融、制造、物流、媒体、互联网等各行各业。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Dec 2023 06:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10315623</guid>
            <link>https://my.oschina.net/u/4736111/blog/10315623</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
