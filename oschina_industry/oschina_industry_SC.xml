<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 10 Dec 2023 20:31:10 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[惊人发现：加班与生产力下降之间的联系]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Slack 的劳动力指数揭示了如何安排工作日以最大化员工生产力、幸福感和满意度的新发现。</p><p><strong>概要：</strong> 你在工作上如何花费时间，它又在怎样消耗你？Slack 的劳动力指数是基于对全球 10,000 多名办公室员工的调查回复得出的，揭示了如何安排工作日以最大化生产力和增强员工幸福感和满意度的新发现。</p><p>主要知识点包括：</p><ul><li>在工作日结束时下线的员工比那些觉得有义务在下班后工作的员工的生产力得分高出 20%。</li><li>在工作日中抽出时间休息可以提高员工的生产力和幸福感，但有一半的办公室员工表示他们很少或从不休息。</li><li>平均而言，办公室员工表示每天理想的专注时间约为四个小时，而每天超过两个小时的会议是大多数员工感到会议负担过重的临界点。</li><li>每四个办公室员工中就有三个表示在下午 3 点到 6 点的时间段工作，但其中只有四分之一的人认为这些时间高效。</li></ul><p>几十年来，许多人在办公室加班被视为努力工作和生产力的标志，甚至是一种荣誉的象征。但 Slack 的新研究表明，尽管存在这种长期观念，但下班后工作往往与<em>较低</em>的生产力水平相关，并且可能是一个警告信号，表明员工正在处理过多的任务，需要帮助确定优先顺序和平衡时间。</p><p>根据 Slack 对全球 10,000 多名办公员工的调查，最新的劳动力指数结果显示生产力差距取决于是什么促使员工加班至深夜（或凌晨）。每五个办公员工中就有两个（37%）每周至少有几次在公司的标准工作时间之外登录系统，其中超过一半（54%）的员工表示这是由于感受到压力，而不是自己选择加班。</p><p>那些觉得有义务在业余时间工作的员工比那些在标准工作日结束时下班的员工生产力得分低 20%。这些员工还报告：</p><ul><li>与工作相关的压力大 2.1 倍</li><li>对整体工作环境的满意度低 1.7 倍</li><li>疲惫程度高 2 倍</li></ul><p><img src="https://d34u8crftukxnk.cloudfront.net/slackpress/prod/sites/6/Workforce-Lab-Blog-Graphics-Pulse-11_V2_After-Hours-Horchata.png" alt="受到压力而需要在非工作时间工作的员工全天的工作效率低 20%" referrerpolicy="no-referrer"></p><p>这两组员工都表示，他们用于工作的时间约 70% 是富有成效的——这表明那些加班的员工与他们的同事一样努力——但那些在非工作时间工作的员工比那些按时上下班的员工更容易认为他们的生产力被相互冲突的优先事项所阻碍（高出 50%）。</p><p>另一方面，那些选择在标准工作时间之外工作的员工，以更好地安排自己的时间表或追求个人抱负，他们的健康状况和生产力得分没有负面影响，甚至略有提高。</p><blockquote><p>「长期以来，从我们如何分配时间到如何定义生产力，许多工作的重点都放在数量而非质量上。始终感觉需要迎头赶上正在损害员工和企业的利益。这更加突显了建立信任文化的重要性，在这种文化中，员工在需要确定优先事项并平衡工作时间以便完成工作时，敢于表达自己的需求。」</p></blockquote><h2>关于生产率，关键不在于工作时间的长短，而在于质量</h2><p>根据劳动力指数的结果，全球范围内有相当一部分办公员工难以平衡工作时间，不同职业层级的员工面临不同程度的问题。</p><p>超过四分之一的办公员工（27%）表示他们花费太多时间开会，其中超过一半（55%）的高管也认同这一点。同样比例（25%）的员工表示他们花费太多时间在电子邮件上，其中 43% 的高管也表示同样的情况。</p><p>五分之一（20%）的员工表示他们没有足够的时间与同事沟通，这个问题在初级员工中最为明显。</p><p>令人担忧的是，数据显示各个层级的许多员工都在没有休息的情况下完成日常任务：在接受调查的办公员工中，有一半（50%）的人表示他们很少或从不休息。这些员工发生职业倦怠的可能性要高 1.7 倍。</p><p>然而，那些经常休息的同事表现出更高的工作与生活平衡能力（高 62%）、更强的应对压力和焦虑的能力（高 43%）、更高的整体满意度（高 43%），并且出人意料的是，他们的生产力得分高出 13%。</p><blockquote><p>「为什么我们都开始相信，如果我们始终处于工作状态，为了成功我们需要精疲力竭？这可以追溯到第一次工业革命，当时我们开始崇拜机器。机器的目标是尽量减少停机时间。但对于作为人类操作系统来说，停机时间并非缺陷，而是其特点。精英运动员知道恢复是达到最佳表现的一部分。休息时间则是生产力的一个乘数。」</p><p>健康和生产力平台 Thrive Global 创始人兼首席执行官阿丽安娜·赫芬顿（Arianna Huffington）如是说。</p></blockquote><p><img src="https://d34u8crftukxnk.cloudfront.net/slackpress/prod/sites/6/Workforce-Lab-Blog-Graphics-Pulse-11_V2_Taking-Breaks-Horchata.png" alt="经常休息的员工生产力高出 13%" referrerpolicy="no-referrer"></p><h2>最佳工作时间：无论你是晨型人还是夜猫子，下午的低迷期都是真实存在的</h2><p>平均而言，办公员工表示他们工作时间内只有 70% 的时间是高效的。当被问及工作效率最佳时间时，答案差异很大，有些员工喜欢在早上工作，有些则偏爱在晚上。但不管他们的偏好如何，大多数（71%）办公员工都认为下午晚些时候是最不适合工作的时间，从下午 3 点到 6 点这段时间内，工作效率急剧下降。</p><p><img src="https://d34u8crftukxnk.cloudfront.net/slackpress/prod/sites/6/Workforce-Lab-Blog-Graphics-Pulse-11_V2_Afternoon-Slump-Purple.png" alt="" referrerpolicy="no-referrer"></p><p>尽管有四分之三的办公员工表示在下午 3 点到 6 点这段时间内工作，但只有四分之一的人认为这段时间工作效率很高。</p><blockquote><p>「这表明生产效率并非线性增长。生产效率是在一天中不间断地爆发式增长和下降，并不一定在规定的时间窗口内，而且绝对不是连续八小时。‘下午的低迷期’不应该被视为一件坏事；对于许多员工来说，这可能是休息的理想时间，这将提高他们当天的整体工作效率。」</p><p>Slack 研究与分析部高级副总裁兼劳动力实验室负责人 Christina Janzer</p></blockquote><p>那些会管理时间的人往往更高效。他们使用时间管理策略的可能性高出 1.6 倍，更有可能安排一段时间来完成特定任务，只在特定时间查看电子邮件，并设置专注计时器，这样的可能性高出 2.2 倍。</p><h2>工作的「适居带」：如何平衡工作日以优化生产力</h2><p>尽管没有一种适用于所有行业、角色和职位的通用时间表，但仔细研究数据会发现一个公式，可以帮助员工获得成功。</p><p>研究表明，无论职位高低，理想的工作日安排都存在一个「适居带」，即专注时间、协作时间、社交联系和休息时间的平衡。平均而言，办公员工表示每天理想的专注时间约为四个小时。每天超过两个小时的会议是大多数员工表示他们在会议上花费「太多时间」的临界点，所有职位级别都出现了类似的模式。表示在会议上花费太多时间的人更有可能说他们没有足够的时间来集中注意力。相比之下，约有 10% 的办公员工（在新公司工作不到一年或 30 岁以下的员工中最常见）表示他们在会议上花费的时间_太少_，这也与归属感和生产力的降低有关。</p><blockquote><p>「专注时间、协作时间、连接和休息就像工作日的宏量营养素。正确的平衡可以为你提供最佳工作所需的能量。我们不能把这些工作的关键组成部分孤立起来考虑。为了最有效地工作，我们必须为协作工作和专注工作创造空间。」</p><p>Slack 和 Salesforce 员工成功部高级副总裁 David Ard</p></blockquote><h2>办公员工最希望 AI 提供什么帮助？协助和自动化以合理安排会议并腾出时间</h2><p>在办公员工时间管理困难的同时，他们也对 AI 工具的潜力感到兴奋，认为它可以更好地平衡他们的时间。</p><p>绝大多数高管——94%——感到整合 AI 的紧迫性，其中一半的高管表示有强烈的紧迫感。然而，我们的调查显示 AI 的采用仍处于初级阶段，只有五分之一的办公员工表示他们使用过 AI 工具。</p><p>鉴于采用率很低，大多数办公员工（超过 80%）表示 AI 工具尚未提高他们的工作效率也就不足为奇了。但他们预计 AI 将协助解决工作日中最大的难题之一：会议。员工期望 AI 未来能够提供最大价值的三大活动是：1）会议记录和回顾；2）写作协助；3）工作流程自动化。</p><blockquote><p>「各个职位级别的员工可能会惊讶地发现，每天超过两小时的会议会降低生产力。对于许多团队领导者来说，今天达到这个目标可能不切实际。但新一代的 AI 工具可能是救星。能够准确总结会议记录并自动化常见工作流程的 AI 助手可能是腾出时间、成功平衡的关键。」</p><p>Slack 研究和劳动力实验室高级副总裁兼负责人 Christina Janzer</p></blockquote><p><strong>你是在努力工作还是聪明地工作？在我们关于如何优化工作时间的研究中深入探讨这些问题。参加我们的网络研讨会「新研究揭示高效工作日的秘诀」</strong></p><h2>研究方法</h2><p><em>《劳动力指数》于 2023 年 8 月 24 日至 9 月 15 日对美国、澳大利亚、法国、德国、日本和英国的 10,333 名员工进行了调查。调查由 Qualtrics 负责，并未针对 Slack 或 Salesforce 的员工或客户进行。所有受访者都是全职员工（每周工作 30 小时或以上），担任以下其中一种职位，或表示他们「处理数据、分析信息或进行创造性思维」：执行管理层（例如总裁/合伙人、首席执行官、首席财务官、C 级高管）、高级管理层（例如执行副总裁、资深副总裁）、中级管理层（例如部门/团队经理、副总裁）、初级管理层（例如经理、团队负责人）、高级职员（非管理职位）、技术办公室员工（例如分析师、图形设计师）。为简洁起见，我们将调查对象称为「办公室员工」或「办公员工」。</em></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 09 Dec 2023 08:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/1434828/blog/10320336</guid>
            <link>https://my.oschina.net/u/1434828/blog/10320336</link>
            <author>
                <![CDATA[andalousie]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mistral AI 用「磁链链接」开源了 87 GB 的 8x7B MoE 模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>有「欧洲版 OpenAI」之称的大模型创业公司——Mistral AI 昨天发布了一条<strong>仅包含磁力链接</strong>的推文：</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-6d2f1eed8e7b0598bb332db3f7da2a8db77.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FMistralAI%2Fstatus%2F1733150512395038967" target="_blank">https://twitter.com/MistralAI/status/1733150512395038967</a></strong></em></u></p></blockquote><p>网友打开该磁力链接后发现居然是一个大小为 87 GB 的种子。从命名和目录结构来看，这是一个 PyTorch 模型文件。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f146450c2aefd9e4dd128ccf383b4348362.png" referrerpolicy="no-referrer"></p></blockquote><p>上图的「params.json」JSON 格式文件显然是该模型的主要参数信息，具体如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-1c197917ca03f170a988e23832ba8a2f592.png" referrerpolicy="no-referrer"></p><p>结合参数和文件名信息，Mistral AI 这次「开源」的&nbsp;<strong>mixtral-8x7b-32kseqlen&nbsp;</strong>是一个基于<strong>混合专家 (Mixture of Experts, MoE)</strong>&nbsp;的大模型，<strong>由 8 个 70 亿参数规模 (8×7b) 的专家网络组成</strong>。据称是全球首个开源 MoE 大模型。</p><p>MoE 是用于提高大语言模型效率和准确度的技术。这种方法的核心是将复杂任务划分为更小、更易管理的子任务，每个子任务由专门的小型模型或「专家」负责，然后根据输入数据的特性选择性地激活这些「专家」。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span>MoE 核心组成：</span></p><ol><li><p style="margin-left:0; margin-right:0"><span><strong>专家 (Experts)</strong>：</span><span style="background-color:#ffffff; color:#0f1419">训练有素的小型神经网络，擅长特定领域。</span><span>每个专家通常专注于处理一种特定类型的数据或任务。专家的设计可以是多种形式，如完全连接的网络、卷积网络等。</span></p></li><li><p style="margin-left:0; margin-right:0"><span><strong>门控机制 (Gating Mechanism)</strong>：</span><span style="background-color:#ffffff; color:#0f1419">MoE 架构决策者，</span><span>这是一个智能路由系统，负责决定哪些专家应该被激活来处理当前的输入数据。门控机制基于输入数据的特性，动态地将数据分配给不同的专家。</span></p></li></ol><p>根据 mixtral-8x7b-32kseqlen 的参数信息，该模型对每个 token 的推理使用 2 个专家进行处理（和传闻中的 GPT-4 一样）。</p><blockquote><p>此前<u><a href="https://www.oschina.net/news/249106/gpt-4-architecture-infrastructure" target="_blank">揭秘 GPT-4 技术细节</a></u>的文章提到，GPT-4 是由 16 个专家组成的 MoE 模型，每个专家则是一个包含 1110 亿参数的大模型，每次前向传递路由经过 2 个专家模型。</p></blockquote><p>Mistral AI 目前仍没公布除模型下载链接外的任何信息，如果不想下载但又想体验一把，可以访问下面的网站：</p><ul><li><strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Freplicate.com%2Fnateraw%2Fmixtral-8x7b-32kseqlen" target="_blank">https://replicate.com/nateraw/mixtral-8x7b-32kseqlen</a></u></strong></li><li><strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fapp.fireworks.ai%2Fmodels%2Ffireworks%2Fmixtral-8x7b-fw-chat" target="_blank"><span style="background-color:rgba(0, 0, 0, 0); color:inherit">https://</span>app.fireworks.ai/models/firewor<span style="background-color:rgba(0, 0, 0, 0); color:inherit">ks/mixtral-8x7b-fw-chat</span></a></u></strong></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-93dba40a2cac79b8ffbc7720a6db69dfd02.png" referrerpolicy="no-referrer"></p><p>对了，这不是 Mistral AI 第一次用「留种」的方式发布开源大模型。Mistral AI 在 9 月底发布的那条磁力链接是其开源的第一个大模型 Mistral-7B，该模型至今仍被称为「最好的 7B 模型」，在每个基准测试中都优于 Llama-2 13B，并且在代码、数学和推理方面优于 LLaMA-1 34B。</p><p><img src="https://oscimg.oschina.net/oscnet/up-28671bd6c309caf5b0fcc86e275681ef529.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 09 Dec 2023 07:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270317/mixtral-8x7b-32kseqlen</guid>
            <link>https://www.oschina.net/news/270317/mixtral-8x7b-32kseqlen</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 从浏览器原理出发聊聊 Chrome 插件]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h3_1"></span><h3>浏览器架构演进</h3><p style="text-align:justify"><strong>单进程浏览器时代</strong></p><p style="text-align:justify">单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。在 2007 年之前，市面上浏览器都是单进程的。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-3442db3861bb3221f7e853cfffa1ea45_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">单进程浏览器的架构</p><p style="text-align:justify">很多功能模块运行在一个进程里，是导致单进程浏览器不稳定、不流畅和不安全的一个主要因素。</p><ul><li><strong>不稳定：</strong>早期浏览器需要借助于插件来实现诸如 Web 视频、Web 游戏等各种强大的功能，但是插件是最容易出问题的模块，并且还运行在浏览器进程之中，所以一个插件的意外崩溃会引起整个浏览器的崩溃。除了插件之外，渲染引擎模块也是不稳定的，通常一些复杂的 JavaScript 代码就有可能引起渲染引擎模块的崩溃。和插件一样，渲染引擎的崩溃也会导致整个浏览器的崩溃。</li><li><strong>不流畅：</strong>所有页面的渲染模块、JavaScript 执行环境以及插件都是运行在同一个线程中的，这就意味着同一时刻只能有一个模块可以执行。如果一个脚本非常耗时，它就会独占整个线程，这样导致其他运行在该线程中的页面没有机会去执行任务，导致整个浏览器失去响应，变卡顿。</li><li><strong>不安全：</strong>当你在页面运行一个插件时，插件可以操作系统资源，如果是个恶意插件，那么它就可以释放病毒、窃取你的账号密码，引发安全性问题。</li></ul><span id="OSC_h4_2"></span><h4><strong>多进程浏览器时代</strong></h4><p style="text-align:justify"><strong>早期架构</strong></p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-98f663221fa15549837f9cd878d40653_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">2008 年 Chrome 发布时的进程架构</p><p style="text-align:justify">从图中可以看出，早期的架构已经对浏览器的能力进行了拆分，主要拆分为三类：<strong>浏览器进程、插件进程和渲染进程。</strong>每个页面是运行在单独的渲染进程中的，同时页面里的插件也是运行在单独的插件进程之中，进程之间是通过 IPC 机制进行通信。这就解决了单进程时代浏览器的各种问题：</p><ul><li><strong>解决不稳定：</strong>由于进程是相互隔离的，所以当一个页面或者插件崩溃时，影响到的仅仅是当前的页面进程或者插件进程，并不会影响到浏览器和其他页面。</li><li><strong>解决不流畅：</strong>JavaScript 运行在渲染进程中，所以即使 JavaScript 阻塞了渲染进程，也只会影响当前的渲染页面，并不会影响浏览器和其他页面，因为其他页面的脚本运行在它们自己的渲染进程中。</li><li><strong>解决不安全：</strong>Chrome 把插件进程和渲染进程锁在沙箱里面，沙箱里面的程序可以运行，但是不能在硬盘上写入任何数据，也不能在敏感位置读取任何数据，这样即使在渲染进程或者插件进程里面执行了恶意程序，恶意程序也无法突破沙箱去获取系统权限。</li></ul><p style="text-align:justify"><strong>近期架构</strong></p><p style="text-align:justify">相较之前，近期的架构又有了很多新的变化。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-4c1b8fc023fcd2ad0aa618575cdbc74b_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">近期 Chrome 进程架构</p><p style="text-align:justify">从图中可以看出，最新的 Chrome 浏览器包括：<strong>1 个浏览器主进程、1 个 GPU 进程、1 个网络进程、多个渲染进程和多个插件进程。</strong></p><ul><li><strong>浏览器进程：</strong>主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。可以理解浏览器进程是一个统一的"<strong>调度大师</strong>"去调度其他进程，比如我们在地址栏输入 url 时，浏览器进程首先会调用网络进程。</li><li><strong>渲染进程：</strong>核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li><strong>GPU 进程：</strong>其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。</li><li><strong>网络进程：</strong>主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li><strong>插件进程：</strong>主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。</li></ul><p style="text-align:justify"><strong>当前架构</strong></p><p style="text-align:justify">目前 Chrome 浏览器的架构正在发生一些改变，称为<strong>面向服务的架构 (SOA)</strong>，目的是将和浏览器本身（Chrome）相关的部分拆分为一个个不同的服务，服务化之后，这些功能既可以放在不同的进程里面运行也可以合并为一个单独的进程运行。这样做的主要原因是让 Chrome 在不同性能的硬件上有不同的表现。当 Chrome 运行在一些性能比较好的硬件时，浏览器进程相关的服务会被放在不同的进程运行以提高系统的稳定性。相反如果硬件性能不好，这些服务就会被放在同一个进程里面执行来减少内存的占用。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-42fd4b754c12dcb3981338f765d81a60_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">面向服务的架构</p><span id="OSC_h3_3"></span><h3>插件运行机制</h3><p style="text-align:justify">在运行机制前，我们先来回顾一下打开页面会发生什么：</p><span id="OSC_h4_4"></span><h4><strong>打开页面发生了什么</strong></h4><ul><li>用户新增一个 tab，此时系统浏览器进程、渲染进程、GPU 进程、网络进程会被创建好；</li><li>用户输入 url，浏览器进程检查 url，组装协议，构成完整的 url；</li><li>浏览器进程通过进程间通信（IPC）把 url 请求发送给网络进程；</li><li>网络进程接收到 url 请求后检查本地缓存是否缓存了该请求资源，如果有则将该资源返回给浏览器进程；</li><li>如果没有，网络进程向 web 服务器发起 http 请求（网络请求）；</li><li>网络进程解析响应流程； 
  <ul><li>检查状态码，非 200 执行状态码对应的处理逻辑；</li><li>200 响应处理：检查响应类型 Content-Type，如果是字节流类型，则将该请求提交给下载管理器，不再进行后续的渲染，如果是 html 则通知浏览器进程准备渲染进程进行渲染；</li></ul></li><li>准备渲染进程 
  <ul><li>浏览器进程检查当前 url 是否和之前打开的渲染进程根域名是否相同，如果相同，则复用原来的进程，如果不同，则开启新的渲染进程；</li></ul></li><li>传输数据、更新状态 
  <ul><li>渲染进程准备好后，浏览器向渲染进程发起「提交文档」的消息，渲染进程接收到消息和网络进程建立传输数据的「管道」；</li><li>渲染进程接收完数据后，向浏览器发送确认消息；</li><li>浏览器进程接收到确认消息后更新浏览器界面状态：安全、地址栏 url、前进后退的历史状态、更新 web 页面；</li></ul></li></ul><span id="OSC_h4_5"></span><h4><strong>打开插件发生了什么</strong></h4><p style="text-align:justify">插件的运行相较于页面会有简化</p><p style="text-align:justify">1.我们打开浏览器，新增一个空白 tab 页</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-fbdf73e0cfb877800ffc5a6b290cbee8_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">2.tab 栏空白处右键，选择任务管理器，打开任务管理器面板</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-71e105d5e40961a19574affc5d405506_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">3.可以看到运行了 6 个进程，分别是浏览器进程、GPU 进程、网络进程、存储进程、渲染进程和扩展进程。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-fd99f7006599b3a820d7ffb6dbeaab0d_720w.webp" referrerpolicy="no-referrer"></p><ul><li>扩展进程中运行 Extension Page，主要包括 backgrount.html 和 popup.html； 
  <ul><li>backgrount.html 中没有任何内容，是通过 background.js 创建生成，当浏览器打开时，会自动加载插件的 background.js 文件，它独立于网页并且一直运行在后台，它主要通过调用浏览器提供的 API 和浏览器进行交互；</li><li>popup.html 有内容的，跟我们普通的 web 页面一样，由 html、css、Javascript 组成，它是按需加载的，需要用户去点击地址栏的按钮去触发，才能弹出页面；</li></ul></li><li>渲染进程主要运行 Web Page,当打开页面时，会将 content_script.js 加载并注入到该网页的环境中，它和网页中引入的 Javascript 一样，可以操作该网页的 DOM Tree，改变页面的展示效果；</li><li>GPU 进程主要为插件界面的渲染提供硬件能力支持；</li><li>网络进程主要处理插件中的外部资源请求，比如 nexydy 插件依赖到一些外部 js；</li><li>存储进程为插件提供本地存储能力，比如使用 chrome.storage.local 进行持久化存储；</li><li>浏览器进程在这里更多起到桥梁作用，作为中转可以实现 Extension Page 和 content_script.js 之间的消息通信。</li></ul><span id="OSC_h3_6"></span><h3>插件基本介绍</h3><span id="OSC_h4_7"></span><h4><strong>版本发展</strong></h4><p style="text-align:justify">chrome 插件存在三个版本，分别是<strong>Manifest V1、Manifest V2 和 Manifest V3</strong>。其中 MV1 版本已经被废弃了，目前市面上存在 MV2 和 MV3 版本，以 MV2 为主流，在被 MV3 慢慢取代。时间线：</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-950393136d16d081528b01b5fbc794f1_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify"><strong>Manifest V2 新特性</strong></p><p style="text-align:justify"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fextensions%2Fmv2%2FmanifestVersion%2F%253Fspm%253Da2c6h.13046898.publish-article.26.c7c96ffa7eZ9TZ%2523manifest-v1-changes" target="_blank">https://developer.chrome.com/docs/extensions/mv2/manifestVersion/#manifest-v1-changes</a></p><ul><li>设置了默认的内容安全策略`script-src 'self'; object-src 'self';`。有关内容安全策略的详细配置，可以参考 MDN 文档；</li><li>默认情况下，插件包内的资源不再可供外部网站使用。需要通过清单 web_accessible_resources 属性将其显式列入白名单；</li><li>browser action API 更改；</li><li>page action API 更改；</li><li>chrome.extension 代替 chrome.self 来指向插件本身；</li><li>chrome.extension.getTabContentses 和 chrome.extension.getExtensionTabs 废弃，使用 extension.getViews 替代；</li><li>Port.tab 废弃，使用 runtime.Port 替代；</li></ul><p style="text-align:justify"><strong>Manifest V3 新特性</strong></p><ul><li>Service worker 替换 Background Page；</li><li>网络请求修改废弃 webRequest API 使用新的 declarativentrequest API 来处理；</li><li>不再允许执行远程托管的代码，只能执行扩展包内包含的 JS；</li><li>Promises 已经被添加到许多方法中，但仍支持回调作为替代方法；</li><li>Browser Action API 和 Page Action API 被统一为单独的 Action API；</li><li>Web 可访问的资源，可以只对指定的站点和扩展可用；</li><li>内容安全策略 (CSP)，现在可以为单个对象中的不同执行上下文指定单独的 CSP；</li><li>executeScript 的变化，不能再执行任意字符串，只能执行脚本文件和函数；</li></ul><p style="text-align:justify"><strong>切换 MV3 会带来的问题</strong></p><ul><li>由于 background 不再支持 page 页面配置 background.html，因此也无法调用 window 对象上的 XMLHttpRequest 来构建 ajax 请求，也就是说我们不能像 V2 版本一样，在 background.html 中使用 XMLHttpRequest 来发送请求了，而是需要使用 fetch 来获取接口数据；</li><li>由于 service workers 是短暂的，在不使用时会终止，这意味着它们在整个插件运行期间会不断的启动、运行和终止，也就是不稳定的；因此我们可能需要对 V2 中 background.js 的代码逻辑进行一些改造，以往我们会习惯将一些数据直接存储到全局变量，比如像下面这样：</li></ul><pre><code>// V2 background.js
let saveUserName = "";

// 其他页面，比如 content-script 或者 popup 中存储数据
chrome.runtime.onMessage.addListener(({ type, name }) =&gt; {
  if (type === "set-name") {
    saveUserName = name;
  }
});

// 点击 popup 时展示数据
chrome.action.onClicked.addListener((tab) =&gt; {
  // 这里 saveUserName 可能为空字符串
  console.log(saveUserName, "saveUserName");
});</code></pre><ul><li>因此在 V3 中，需要对这种全局变量数据进行改造，改造的方式也很简单，就是将数据持久化保存到 storage 中，需要用到的地方随用随取：</li></ul><pre><code>// V3 service worker
chrome.runtime.onMessage.addListener(({ type, name }) =&gt; {
  if (type === "set-name") {
    chrome.storage.local.set({ name });
  }
});

chrome.action.onClicked.addListener(async (tab) =&gt; {
  const { name } = await chrome.storage.local.get(["name"]);
  chrome.tabs.sendMessage(tab.id, { name });
});</code></pre><ul><li>由<strong>webRequest API</strong>切换至<strong>declarativentrequest API</strong>，很多代码逻辑需要重构；</li></ul><p style="text-align:justify"><strong>为什么切换 MV3？</strong></p><p style="text-align:justify">从 Manifest V1 到 Manifest V2，可以看到 Chrome 想提高插件的隐私和安全，同时也优化了不少 API。而 Manifest V3 除了安全性更完善外，还在性能上下了功夫。Manifest V3 的核心非常明确，就是限制扩展对系统资源的使用。一直以来高资源占用都是 Chrome 为人诟病的痛点，而且扩展由于在后台运行，如果出现问题，更是难以定位和管理。虽然增加了诸多限制，但 Manifest V3 还是有优点的：</p><ul><li>Service Worker 使扩展不再能常驻后台，让扩展所占用的资源可以被回收，降低了浏览器整体的开销；</li><li>限制规则的数量，相当于控制了单一扩展在规则计算方面的资源使用上限；</li></ul><p style="text-align:justify">这些变化可以让 Chrome 变得更加流畅，对于用户来说是好事。</p><span id="OSC_h4_8"></span><h4><strong>展示形式</strong></h4><p style="text-align:justify">Chrome 插件有以下常见的 8 中展现形式：</p><p style="text-align:justify"><strong>browserAction(浏览器右上角)</strong></p><p style="text-align:justify">在浏览器右上角扩展程序一栏显示，包含一个图标、名称和 popup</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-d1c2fce69c1223a54300c9a2ea96eb9b_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">山海关插件 popup</p><p style="text-align:justify"><strong>pageAction(地址栏右侧)</strong></p><p style="text-align:justify">pageAction 指的是在当某些特定页面打开才显示的图标。在早些版本的 Chrome 是将 pageAction 放在地址栏的最右边，左键单击弹出 popup，右键单击则弹出相关默认的选项菜单。而新版的 Chrome 更改了这一策略，pageAction 和普通的 browserAction 一样也是放在浏览器右上角，只不过没有点亮时是灰色的，点亮了才是彩色的，灰色时无论左键还是右键单击都是弹出选项。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-00231bae7597112980d8851b90979347_720w.webp" referrerpolicy="no-referrer"></p><p><strong>右键菜单</strong></p><p style="text-align:justify">通过开发 Chrome 插件可以自定义浏览器的右键菜单，主要是通过 chrome.contextMenus API 实现，右键菜单可以出现在不同的上下文，比如普通页面、选中的文字、图片、链接，等等。</p><p style="text-align:center"><img src="https://pic4.zhimg.com/80/v2-21338dc0d8e7b00dd4bcd5ef3922e777_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">掘金插件右键菜单</p><p style="text-align:justify"><strong>override(覆盖特定页面)</strong></p><p style="text-align:justify">使用 override 可以将 Chrome 默认的一些特定页面替换掉，改为使用扩展提供的页面。扩展可以替代如下页面：</p><ul><li>历史记录：从工具菜单上点击历史记录时访问的页面，或者从地址栏直接输入 chrome://history</li><li>新标签页：当创建新标签的时候访问的页面，或者从地址栏直接输入 chrome://newtab</li><li>书签：浏览器的书签，或者直接输入 chrome://bookmarks</li></ul><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-c730b7492405900d5f1c3cd9131abf06_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">掘金插件替换了新标签页</p><p style="text-align:justify"><strong>devtools(开发者工具)</strong></p><p style="text-align:justify">Chrome 允许插件在开发者工具 (devtools) 上开发，主要表现在：</p><ul><li>自定义一个和多个和 Elements、Console、Sources 等同级别的面板；</li><li>自定义侧边栏 (sidebar)，目前只能自定义 Elements 面板的侧边栏；</li></ul><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-1dca64511239cf86d0d29e29fccc403d_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">React Developer Tools</p><p style="text-align:justify"><strong>option(选项页)</strong></p><p style="text-align:justify">插件的设置页面，可以在右上角入口右键，有一个选项标签</p><div style="text-align:center"><img height="610" src="https://pic1.zhimg.com/80/v2-9fc5b949ed631b4718e3af633977c024_720w.webp" width="672" referrerpolicy="no-referrer"></div><div style="text-align:center">
  &nbsp; 
</div><div style="text-align:center"><img height="506" src="https://pic1.zhimg.com/80/v2-bb3b7e3db84d9b3f544b5fd3e1295b90_720w.webp" width="880" referrerpolicy="no-referrer"></div><p style="text-align:justify"><strong>omnibox</strong></p><p style="text-align:justify">omnibox 是向用户提供搜索建议的一种方式，可以在搜索栏输入特定的标识然后按 Tab 进入搜索。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-670f0e06b91ac66ccda32a21a111d409_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:center">JSON Viewer 插件</p><p style="text-align:justify"><strong>桌面通知</strong></p><p style="text-align:justify">Chrome 提供了一个 chrome.notificationsAPI 以便插件推送桌面通知，暂未找到 chrome.notifications 和 HTML5 自带的 Notification 的显著区别及优势。在后台 JS 中，无论是使用 chrome.notifications 还是 Notification 都不需要申请权限（HTML5 方式需要申请权限），直接使用即可。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-e9d3bc3ad06b822b37b4e3ba8543a8a5_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_9"></span><h4><strong>核心介绍</strong></h4><p style="text-align:justify"><strong>manifest.json</strong></p><p style="text-align:justify">这是一个 Chrome 插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在根目录。其中，manifest_version、name、version3 个是必不可少的。</p><p style="text-align:justify"><strong>Manifest V2</strong></p><pre><code>{
// 清单文件的版本，这里先使用 2 演示
"manifest_version": 2,
// 插件的名称
"name": "...",
// 插件的版本
"version": "1.0.0",
// 插件描述
"description": "...",
// 图标，一般偷懒全部用一个尺寸的也没问题
"icons": {
"16": "img/icon.png",
"48": "img/icon.png",
"128": "img/icon.png"
  },
// 会一直常驻的后台 JS 或后台页面
"background": {
"scripts": ["js/background.js"]
  },
// 浏览器右上角图标设置，browser_action、page_action、app 必须三选一
"browser_action": {
"default_icon": "img/icon.png",
"default_title": "...",
"default_popup": "popup.html"
  },
// 当某些特定页面打开才显示的图标
"page_action": {
"default_icon": "img/icon.png",
"default_title": "...",
"default_popup": "popup.html"
  },
// 需要直接注入页面的 JS
"content_scripts": [{
"matches": ["&lt;all_urls&gt;"],
"js": ["js/content-script.js"],
"css": ["css/custom.css"],
// 代码注入的时机，document_start, document_end, document_idle，默认 document_idle
"run_at": "document_start"
    },
  ],
// 权限申请
"permissions": [
"contextMenus", // 右键菜单
"tabs", // 标签
"notifications", // 通知
"webRequest", // web 请求
"webRequestBlocking",
"storage", // 插件本地存储
"https://*/*" // 可以通过 executeScript 或者 insertCSS 访问的网站
  ],
// 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的
"web_accessible_resources": ["js/inject.js"],
"homepage_url": "...", // 插件主页
"chrome_url_overrides": { // 覆盖浏览器默认页面
"newtab": "newtab.html"
  },
"options_ui": { // 插件选项页
"page": "options.html",
"chrome_style": true
  },
"omnibox": { "keyword" : "..." }, // 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字
"default_locale": "zh_CN", // 默认语言
"devtools_page": "devtools.html", // devtools 页面入口，注意只能指向一个 HTML 文件，不能是 JS 文件
"content_security_policy": "...", // 安全策略
"web_accessible_resources": [ // 可以加载的资源
    RESOURCE_PATHS
  ]
}</code></pre><p style="text-align:justify"><strong>Manifest V3（仅展示与 V2 版本的不同点）</strong></p><pre><code>{
"manifest_version": 3,
"background": {
"service_worker": js/background.js"
  },
  "action": { //browser_action 和 page_action，统一为 Action
    "default_icon": "img/icon.png",
    "default_title": "这是一个示例 Chrome 插件",
    "default_popup": "popup.html"
  }
  "content_security_policy": {
    "extension_pages": "...",
    "sandbox": "..."
  },
  "web_accessible_resources": [{
    "resources": [RESOURCE_PATHS]
  }]
}</code></pre><p style="text-align:justify"><strong>content-scripts</strong></p><p style="text-align:justify">是 Chrome 插件中向页面注入脚本的一种形式（虽然名为 script，其实还可以包括 css 的），借助 content-scripts 我们可以实现通过配置的方式轻松向指定页面注入 JS 和 CSS。content-scripts 和原始页面共享 DOM，但不共享 JS。如要访问页面 JS（例如某个 JS 变量），只能通过 injected js 来实现。content-scripts 不能访问绝大部分 chrome API，除了下面这 4 种：</p><ul><li>chrome.extension</li><li>chrome.i18n</li><li>chrome.runtime</li><li>chrome.storage</li></ul><p style="text-align:justify">这些 API 绝大部分时候都够用了，有需要调用其它 API 的话，可以通过通信让 background 或 service worker 来帮忙调用</p><p style="text-align:justify"><strong>background</strong></p><p style="text-align:justify">后台是一个常驻的页面，它的生命周期是插件中所有类型页面中最长的，它随着浏览器的打开而打开，随着浏览器的关闭而关闭，所以通常把需要一直运行的、启动就运行的、全局的代码放在 background 里面。background 的权限非常高，几乎可以调用所有的 Chrome 扩展 API（除了 devtools），而且它可以无限制跨域，可以跨域访问任何网站而无需要求对方设置 CORS。background 的概念在 MV3 版本中变为了 service worker，区别在于生命周期变短了，service worker 是短暂的基于事件的脚本，所以不适合用来保存全局变量。</p><p style="text-align:justify"><strong>popup</strong></p><p style="text-align:justify">popup 是点击右上角图标时打开的一个小窗口网页，焦点离开网页就立即关闭，一般用来做一些临时性的交互。权限级别和 background 差不多，就是生命周期比较短。</p><p style="text-align:justify"><strong>injected-script</strong></p><p style="text-align:justify">chrome 插件中其实没有 injected-script 这一概念，这是开发者们在开发过程中衍生出来的一种概念，指的是通过 DOM 操作的方式向页面注入的一种 JS。因为 content-script 无法访问页面中的 JS，虽然可以操作 DOM，但是 DOM 却不能调用它，也就是无法在 DOM 中通过绑定事件的方式调用 content-script 中的代码。但是在网页中增加一个按钮来调用插件的能力是一个比较常见的需求，所以诞生了 injected-script。</p><span id="OSC_h4_10"></span><h4><strong>插件通信机制</strong></h4><p style="text-align:justify">讲通信机制之前，先回顾一下插件中存在的脚本类型。Chrome 插件的 JS 主要可以分为这 5 类：injected script、content-script、popup js、background js 和 devtools js。</p><p style="text-align:justify"><strong>权限对比</strong></p><table><tbody><tr><td style="text-align:justify">JS 种类</td><td style="text-align:justify">可访问的 API</td><td style="text-align:justify">DOM 访问情况</td><td style="text-align:justify">JS 访问情况</td><td style="text-align:justify">直接跨域</td></tr><tr><td style="text-align:justify">injected</td><td style="text-align:justify">和普通 JS 无任何差别，不能访问任何扩展 API</td><td style="text-align:justify">可以访问</td><td style="text-align:justify">可以访问</td><td style="text-align:justify">不可以</td></tr><tr><td style="text-align:justify">content</td><td style="text-align:justify">只能访问 extension、runtime 等部分 API</td><td style="text-align:justify">可以访问</td><td style="text-align:justify">不可以</td><td style="text-align:justify">不可以</td></tr><tr><td style="text-align:justify">popup</td><td style="text-align:justify">可访问绝大部分 API，除了 devtools 系列</td><td style="text-align:justify">不可直接访问</td><td style="text-align:justify">不可以</td><td style="text-align:justify">可以</td></tr><tr><td style="text-align:justify">background</td><td style="text-align:justify">可访问绝大部分 API，除了 devtools 系列</td><td style="text-align:justify">不可直接访问</td><td style="text-align:justify">不可以</td><td style="text-align:justify">可以</td></tr><tr><td style="text-align:justify">devtools</td><td style="text-align:justify">只能访问 devtools、extension、runtime 等部分 API</td><td style="text-align:justify">可以</td><td style="text-align:justify">可以</td><td style="text-align:justify">不可以</td></tr></tbody></table><p style="text-align:justify">通过权限对比可以看到，每一种脚本在权限上都不相同，所以各种脚本间的相互通信就非常重要，这也是插件能够实现众多功能的基础。</p><p style="text-align:justify"><strong>通信概览</strong></p><table><tbody><tr><td style="text-align:justify">&nbsp;</td><td style="text-align:justify">injected</td><td style="text-align:justify">content</td><td style="text-align:justify">popup</td><td style="text-align:justify">background</td></tr><tr><td style="text-align:justify">injected</td><td style="text-align:justify">-</td><td style="text-align:justify">window.postMessage</td><td style="text-align:justify">-</td><td style="text-align:justify">-</td></tr><tr><td style="text-align:justify">content</td><td style="text-align:justify">window.postMessage</td><td style="text-align:justify">-</td><td style="text-align:justify">chrome.runtime.sendMessage chrome.runtime.connect</td><td style="text-align:justify">chrome.runtime.sendMessage chrome.runtime.connect</td></tr><tr><td style="text-align:justify">popup</td><td style="text-align:justify">-</td><td style="text-align:justify">chrome.tabs.sendMessage chrome.tabs.connect</td><td style="text-align:justify">-</td><td style="text-align:justify">chrome.extension. getBackgroundPage</td></tr><tr><td style="text-align:justify">background</td><td style="text-align:justify">-</td><td style="text-align:justify">chrome.tabs.sendMessage chrome.tabs.connect</td><td style="text-align:justify">chrome.extension.getViews</td><td style="text-align:justify">-</td></tr><tr><td style="text-align:justify">devtools</td><td style="text-align:justify">chrome.devtools. inspectedWindow.eval</td><td style="text-align:justify">-</td><td style="text-align:justify">chrome.runtime.sendMessage</td><td style="text-align:justify">chrome.runtime.sendMessage</td></tr></tbody></table><span id="OSC_h3_11"></span><h3>一些常见插件的实现思路</h3><span id="OSC_h4_12"></span><h4><strong>埋点日志检测</strong></h4><p style="text-align:justify">一般业务中都会进行一些埋点上报，埋点的本质就是发送一些带特定参数的请求，前端本地调试的时候想实时查看埋点信息通常需要去查看上报接口的入参，或者去对应的埋点平台查看，这样非常不方便。基于这个，我们可以使用插件来帮助我们快速的可视化查看埋点信息：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-d9e6e16e3db7cd8922d8b437219a96e2_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_13"></span><h4><strong>页面注入小工具</strong></h4><p style="text-align:justify">插件的另一个常见用法就是往页面注入一些工具代码，比如去除页面广告工具。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-0de602a3e05ff59d5e0b6f1450c44d76_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_14"></span><h3>总结</h3><ul><li>随着浏览器不断的发展，Chrome 逐渐把一些基础服务独立出来，类似于一个跨平台的线上操作系统。</li><li>Chrome 插件提供的能力很丰富，比如代码注入、跨域请求、持久化方案、各种通信机制等，开发者可以发挥想象，组装不同能力以适应不同场景的需求，基本可以实现现代 web 所能支持的所有功能。</li><li>Chrome 插件 MV2 版本将在 24 年 1 月全面废弃，需要尽快迁移至 MV3 版本。</li></ul><span id="OSC_h3_15"></span><h3><strong>参考资料：</strong></h3><p>《浏览器工作原理与实践》：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Ftime.geekbang.org%2Fcolumn%2Fintro%2F100033601%253Fspm%253Da2c6h.13046898.publish-article.27.c7c96ffa7eZ9TZ%2526tab%253Dcatalog" target="_blank">https://time.geekbang.org/column/intro/100033601?tab=catalog</a></p><p>《Inside look at modern web browser》：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdeveloper.chrome.com%2Fblog%2Finside-browser-part1%2F%253Fspm%253Da2c6h.13046898.publish-article.28.c7c96ffa7eZ9TZ" target="_blank">https://developer.chrome.com/blog/inside-browser-part1/</a></p><p>《图解浏览器的基本工作原理》：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F47407398%3Fspm%3Da2c6h.13046898.publish-article.29.c7c96ffa7eZ9TZ" target="_blank">https://zhuanlan.zhihu.com/p/47407398</a></p><p>《Welcome to Manifest V3》：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fextensions%2Fmv3%2Fintro%2F%253Fspm%253Da2c6h.13046898.publish-article.30.c7c96ffa7eZ9TZ" target="_blank">https://developer.chrome.com/docs/extensions/mv3/intro/</a></p><p>MDN 文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FHTTP%2FCSP%253Fspm%253Da2c6h.13046898.publish-article.31.c7c96ffa7eZ9TZ" target="_blank">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP</a>web_accessible_resources：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fextensions%2Fmv2%2Fmanifest%2Fweb_accessible_resources%2F%253Fspm%253Da2c6h.13046898.publish-article.32.c7c96ffa7eZ9TZ" target="_blank">https://developer.chrome.com/docs/extensions/mv2/manifest/web_accessible_resources/</a></p><p style="text-align:justify">作者｜闵子</p><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1381666%3Futm_content%3Dg_1000385322" target="_blank">原文链接</a></strong></p><p style="text-align:justify"><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 09 Dec 2023 04:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10319584</guid>
            <link>https://my.oschina.net/yunqi/blog/10319584</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[余承东：华为明年将推出颠覆性产品，改写行业历史]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 9 日，2023 华为花粉年会在松山湖基地举行。华为常务董事、终端 BG CEO、智能汽车解决方案 BU 董事长余承东在年会上表示，<strong>明年会推出非常有引领性、创新性、颠覆性的产品。</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d15077f4297790d71ee33fb17fcdc27333c.png" referrerpolicy="no-referrer"></p><p><strong><strong>余承东直言：「到时候你可以看到我们怎么样能够</strong>改写这个行业的历史</strong>。希望能够不断地带来超越大家的期待，做别人想不到的事情或者想到但做不到的事，甚至是他们不敢想的事情。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e2b780aafbf00c463c0e8273e50a58bead5.png" referrerpolicy="no-referrer"></p><p>余承东还预告，华为明年将会推出鸿蒙原生应用与原生体验的产品，「<strong>那将会是整个中国终端类操作系统里真正的王者</strong>」。</p><p>此前，有消息称华为可能明年推出不兼容 Android 的鸿蒙版本。11 月 20 日，据澎湃新闻报道，一华为相关人士表示，推出时间还不确定，未来 iOS、鸿蒙、Android 将为三个各自独立的系统。</p><p>稍早前据证券时报报道，有业内人士亦表示：「华为内部确实有这计划，就是明年推出不兼容 Android 的鸿蒙版本，但目前内部还没有下发相关通知，所以具体何时推出暂不明确。」</p><p>在 9 月 25 日举行的华为秋季全场景新品发布会上，华为常务董事、终端 BG CEO、智能汽车解决方案 BU 董事长余承东宣布，鸿蒙原生应用全面启动，HarmonyOS NEXT 开发者预览版将在 2024 年第一季度面向开发者开放。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-619518ef25720c3272f8663f57f84ce9cbb.png" referrerpolicy="no-referrer"></p><p>会上，华为与近 40 家合作伙伴举办鸿蒙生态合作签约仪式，包括：小红书、招商银行、携程旅行、美图、58 同城、360 浏览器、网易有道词典、石墨文档、classln 应用、洪恩识字、汉王科技、作业帮、亿图脑图 MindMaster 应用、会见会议、2345 好压、宝宝巴士、喜马拉雅、讯飞听见、浩辰 CAD、掌上生活、邮储银行、钛媒体、驾考宝典、书生电子、交通银行、中信银行、兴业证券、央广网、搜狐新闻、蜻蜓 FM、京东健康、动卡空间、东方财富、天天基金、大智慧、深圳 CA 签章、中软国际、中国音像与数字出版协会等应用与服务商。</p><p>10 月 26 日，包含支付宝、小红书、哔哩哔哩、滴滴出行、同程旅行、哈啰等十余家知名互联网企业，参加了华为在上海举行的鸿蒙生态伙伴联合创新会，了解 HarmonyOS NEXT 的能力与特性，现场达成 10+创新场景合作意向。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 09 Dec 2023 03:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270290</guid>
            <link>https://www.oschina.net/news/270290</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[黑客攻击招聘 APP 短信验证码接口用于「撞库」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>央视新闻报道了招聘 APP 遭黑客攻击导致 300 万条数据泄露的案件。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-e4acf1c1251a484866c2db701cf03469b78.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.weibo.com%2F2656274875%2FNwrWnni5v%3Fpagetype%3Dprofilefeed" target="_blank">https://www.weibo.com/2656274875/NwrWnni5v?pagetype=profilefeed</a></u></em></p></blockquote><p>根据报道，前段时间北京警方接到辖区内一家互联网公司报案，称该公司求职招聘类 App 的短信验证码接口遭受 1300 余万次攻击，且成功匹配注册账号 30 余万个。北京警方迅速研判，<strong>确定这是一起黑客利用网站漏洞非法获取账号信息并用于违法活动的案件</strong>。</p><p>据了解，犯罪嫌疑人喻某交代称，自己于 2022 年 10 月 18 日在该招聘平台注册账号，并数次尝试验证接口。<strong>他发现该网站的签名算法相对单一，便利用该弱点编写指令，制作黑客软件对网站进行「撞库」攻击</strong>。</p><p>同时，他还利用类似方式对其他各大网站进行渗透，并伺机查询网站漏洞，<strong>以此为诱饵向他人兜售自己编写的恶意程序、黑客工具，从中牟利</strong>。经过民警不懈努力，专案组成功在四川成都将另一名嫌疑人焦某抓获，<strong>现场起获各类公司、人员数据 330 余万条</strong>。</p><p>犯罪嫌疑人喻某、焦某因破坏计算机信息系统罪被依法刑事拘留，案件正进一步办理中。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 09 Dec 2023 02:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270288</guid>
            <link>https://www.oschina.net/news/270288</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[大家好，我龙博，我们做了个很酷的开源工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Hello ，大家好，我是龙博，目前担任 ILLA Cloud 的 CEO 。 创业之前在字节跳动和快手写代码，一直以来都是一个热爱技术的小伙伴！</p><h2>介绍一下我们产品</h2><p>ILLA Cloud 是一个非常好用的开源低代码工具，我们已经完整的迭代两年了。</p><p>传送门：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Filla.cloud" target="_blank">https://illa.cloud</a></p><p>Github: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fillacloud%2Filla-builder" target="_blank">https://github.com/illacloud/illa-builder</a></p><p>我们的 star 都是我们用户一个一个点上去的，我们没有进行任何的操作行为，所以 star 并没有那么多，还在冲击 1w ，希望大家多给我们点赞～</p><p>我们是一个开箱即用的低代码工具，希望大家能使用一下去解决公司里面搭建内部系统的问题，专注各种管理后台，也就是大家无法购买到的系统，只能通过传统前端方式构建，大家都知道没有前端喜欢写后台，^_^</p><p>使用我们可以构建出来相对比较美观的各种内部工具，保证大家的 App ，Web 网站有一个好用的管理后台工具。</p><p><img src="https://cdn.illacloud.com/illa-blog/Discussion/Frame%2033402x.png" alt="低代码" referrerpolicy="no-referrer"></p><p>我们也有很多用户在使用我们的产品搭建属于自己公司的内部 AI 工具，比如使用 Agent 去做邮件生成，使用低代码工具搭建属于自己的 Stable Diffusion 面板。</p><p><img src="https://cdn.illacloud.com/illa-blog/Discussion/discussion2.png" alt="AI" referrerpolicy="no-referrer"></p><p>我们在过去的大量工作里面支持了大量的集成能力，主流的数据库和接口都支持了。我们还同 Hugging Face 达成了官方的合作，保证每一个用户都可以快速的访问 Hugging Face 中的模型从而让自己构建出来的产品有大量开箱即用的 AI 能力</p><h2>关于我们公司</h2><p>我们是 2022 年元旦之后开始创立的，目前这个产品已经完整迭代两年了，才敢宣传一下，我们相信这里的小伙伴对产品都有极高的追求滴！</p><p>我们产品在创立初期也获得了高领资本，源码资本，奇绩创坛的融资，所以大家不用担心我们的生存问题。感谢国内顶级的资本对开源事业的支持，我们相信开源可以让产品更加的茁壮成长。</p><p>主要是真心邀请大家一起构建我们的产品，我们相信中国的开发者是全世界最优秀的一群人（数据上看也确实是），我们作为一家服务开发者的公司非常荣幸可以让大家来用一用我们的产品。</p><h2>最后</h2><p>如果你对我们产品感兴趣，欢迎找我聊聊，我的 v：owen_longbo</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 10:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/xlyg/blog/10320194</guid>
            <link>https://my.oschina.net/xlyg/blog/10320194</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[商汤科技发布 AI 编程助手「代码小浣熊 Raccoon」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>商汤科技宣布，基于商汤自研大语言模型的智能编程助手 —— 代码小浣熊 Raccoon (<strong>R</strong>accoon is<strong>A</strong>nother&nbsp;<strong>C</strong>ode&nbsp;<strong>CO</strong>-pil<strong>O</strong>t&nbsp;<strong>N</strong>avigator) 已开放公测。</p><p>代码小浣熊 Raccoon 支持 Python、Java、JavaScript、C++、Go、SQL 等 30+ 主流编程语言和 VS Code、IntelliJ IDEA 等主流 IDE。主要特性如下：</p><ul><li><p>代码编写建议覆盖 30 多种主流编程语言，依据上下文，自动生成代码。</p></li><li><p>开放对话功能，理解用户的自然语言需求描述。</p></li><li><p>预设基于注释生成代码、跨编程语言翻译、单元测试用例生成、代码修正、代码重构、技术领域知识问答等功能。</p></li><li><p>支持用户自定义需求：包括需求文档生成、代码生成注释、代码的解释文档生成、技术文档生成等开放式能力。</p></li></ul><blockquote><p><strong>体验地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.sensetime.com" target="_blank">https://code.sensetime.com</a></u></em><br> 使用文档</strong>：<strong><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.sensetime.com%2Fdocs" target="_blank">https://code.sensetime.com/docs</a></em></u></strong></p></blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2c679cff58be01097976aee3c1003e89b3a.png" referrerpolicy="no-referrer"></p><p><img height="722" src="https://oscimg.oschina.net/oscnet/up-21140dc87019c7b03213e62078c9e35292d.png" width="2398" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-fa0feda14f70e8765c400cbbda8eb386722.png" referrerpolicy="no-referrer"></p><p>代码小浣熊由商汤自研大语言模型提供支持，覆盖软件需求分析、架构设计、代码编写、软件测试等环节，满足用户代码编写、数据分析、编程学习等各类需求。在实际应用中，可帮助开发者提升编程效率超 50%。</p><p>在最新权威代码生成测试集 HumanEval 的测试中，该模型精度表现惊艳，一次通过率甚至达到惊人的 71%，已经大幅超越 GPT-3.5。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 07:59:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270111</guid>
            <link>https://www.oschina.net/news/270111</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[systemd 新组件 systemd-bsod — 为 Linux 引入「蓝屏」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>systemd 255 近日<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsystemd%2Fsystemd%2Freleases%2Ftag%2Fv255" target="_blank">发布了稳定版</a></u>，其新增的"<strong>systemd-bsod</strong>"实验性组件让人眼前一亮——没错，正是大名鼎鼎的「蓝屏死机」（Blue Screen of Death，简称 BSOD）。</p><p>BSOD 是微软 Windows 操作系统在无法从一个系统错误中恢复过来时，为保护电脑数据文件不被破坏而强制显示的屏幕图像。Windows 的蓝屏死机提示已成为标志性画面，大部分是系统崩溃的现象。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-51d3ac36bc416abe53fe1c0517c774a1824.png" referrerpolicy="no-referrer"></p><p><em>上图是 Windows 10 的蓝屏死机画面（版本 1607-21H2），它包含了一个悲伤的颜文字和一个用于快速排查错误的二维码</em>。</p><p>简而言之，BSOD 就是用于展示错误信息的诊断工具。虽然大家讨厌看到蓝屏界面，但这不意味着 BSOD 本身是一个坏方案。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d1cfdcf33e390c881d32ad1ef5146419e5e.png" referrerpolicy="no-referrer"></p><p>根据&nbsp;systemd 更新日志的介绍，当日志级别设置为"<strong>LOG_EMERG</strong>"时，如果 Linux 系统出现引导错误，新组件"systemd-bsod"会全屏显示报错信息（即 BSOD）。和 Windows 的 BSOD 类似，它也会生成二维码，以便用户通过手机获取启动失败报错的更多信息。</p><p>"systemd-bsod" 属于&nbsp;<span>Outreachy 项目的一部分，该项目是为开发开源工具的人员提供实习机会的组织。</span></p><p>systemd-bsod 目前处于实验性阶段，GitHub 上的更新日志也指出它仍会有改动。但不管怎样，不少主流 Linux 发行版如 Ubuntu、Fedora、Debian 和 Red Hat 都采用了 systemd。所以 2024 年，相信不少 Linux 发行版都会引入「蓝屏」。</p><p>对了，systemd 创始人兼首席开发者 Lennart Poettering 去年<u><a href="https://www.oschina.net/news/202119/systemd-creator-microsoft" target="_blank">被微软从 Red Hat 挖走</a></u>&nbsp;—— 继续专注于开发 systemd。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 05:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270207/systemd-255-bsod</guid>
            <link>https://www.oschina.net/news/270207/systemd-255-bsod</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[虚拟机成为 Android 的核心结构]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>安卓虚拟化框架（AVF）将出现在即将推出的部分安卓 14 设备上。AVF 于 Android 13 首次在 Pixel 设备上推出，为开发特权应用程序的平台开发人员提供了新的功能。</p><p>有了 AVF，我们将更广泛地支持安卓的虚拟化。虚拟化被广泛应用和部署，以隔离工作负载和操作系统。它可以有效地扩展基础设施、测试环境、兼容传统软件、创建虚拟桌面等。</p><p style="text-align:start">有了 AVF，虚拟机就成了安卓操作系统的核心结构，类似于安卓利用 Linux 进程的方式。开发人员可以灵活选择虚拟机的隔离级别：</p><ul><li><p>单向隔离：安卓（主机）可以控制和检查虚拟机的内容。这些虚拟机最常用于沙箱和隔离，使多个操作系统能在同一台机器/设备上运行，由一个操作系统主机（Android）控制和监视所有其他操作系统。</p></li></ul><ul><li><p>双向隔离（隔离虚拟机）：Android（主机）和虚拟机（客户机）完全相互隔离。处理或存储敏感数据的开发人员可能会受益于隔离虚拟机。隔离虚拟机具有双向屏障，主机（Android）和虚拟机都无法访问对方，除非通过明确商定的通信渠道。这有两个主要特性：</p></li></ul><blockquote><blockquote><ol><li><p>主机（Android）无法访问虚拟机内的工作负载和数据（保密）。</p></li><li><p>即使 Android 一直到（包括）主机内核都受到攻击，隔离的虚拟机也不会受到攻击。</p></li></ol></blockquote></blockquote><h3 style="text-align:start"><strong>AVF 的意义</strong></h3><h4 style="text-align:start"><strong>隔离</strong></h4><p style="text-align:start">有了隔离虚拟机，开发人员现在有了 Trustzone 之外的另一种选择，可用于需要在不升级权限的情况下与 Android 隔离的用例。</p><h4 style="text-align:start"><strong>便携性</strong></h4><p style="text-align:start">虚拟机及其内部运行的应用程序的可移植性远高于可信 applets。例如，带有 Linux 应用程序有效载荷的基于 Linux 的虚拟机可以在所有支持 AVF 的设备上运行。这意味着开发人员只需构建一次应用程序，就可以将其部署到任何地方。与移植到 Trustzone 操作系统相比，虚拟机还能无缝、轻松地移植基于 Linux 的现有应用程序。</p><h4 style="text-align:start"><strong>性能</strong></h4><p style="text-align:start">AVF 设计轻巧、高效、灵活。虚拟机可以：</p><ul><li><p>根据开发者的需要，小到一个 C 语言程序，大到整个操作系统；</p></li><li><p>做到持续性或间歇性；</p></li><li><p>根据整个系统的健康状况增加或缩小内存；</p></li><li><p>遵循 Android 的调度程序提示和低内存警告。</p></li></ul><h4 style="text-align:start"><strong>可扩展性</strong></h4><p style="text-align:start">AVF 在设计时考虑到了开发人员的需求。虚拟机可以定制，以满足特定用例的需求。只要符合 AVF 规定的某些启动和通信协议，开发人员就可以部署任何虚拟机有效载荷。</p><p style="text-align:start">除了将虚拟化的强大功能引入安卓系统，实现虚拟桌面、沙箱、AVF 使用隔离虚拟机的所有可能性外，还能使以下常见的安卓使用场景（以及更多使用场景）受益：</p><ul><li><p>生物识别：通过在隔离的虚拟机中部署生物识别可信 applets，开发人员将获得隔离保证、生物识别算法所需的更多计算能力、与 Trustzone 操作系统无关的轻松更新能力以及更简化的部署。</p></li></ul><ul><li><p>DRM：Widevine 可在安卓设备上实现流式 DRM。一旦部署在隔离的虚拟机中，无论安卓设备上部署的各种 Trustzone 操作系统的细节如何，Widevine 的更新在这些设备上都会变得更加容易。</p></li></ul><h3 style="text-align:start"><strong>AVF 使用</strong></h3><p style="text-align:start">AVF 提供了简单的应用程序接口，用于查询设备创建虚拟机的能力及其支持的类型，以及从创建虚拟机的应用程序和服务与这些虚拟机建立安全的通信渠道。</p><p style="text-align:start">例如，检查 AVF API 的可用性，以及隔离虚拟机和常规虚拟机的可用性：</p><pre><code>VirtualMachineManager manager =
     (VirtualMachineManager)context.
          getSystemService(VirtualMachineManager.class);
if (manager == null) {
    // AVF not supported
} else {
    int capabilities = manager.getCapabilities();
    if ((capabilities &amp; CAPABILITY_PROTECTED_VM) != 0) {
        // protected VM is supported
    }
    if ((capabilities &amp; CAPABILITY_NON_PROTECTED_VM) != 0) {
        // non protected VM is supported
    }
}
</code></pre><p style="text-align:start">有关 AVF 及其 API 的其他文档，请<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsource.android.com%2Fdocs%2Fcore%2Fvirtualization" target="_blank">点击此处查看</a>。</p><h3 style="text-align:start"><strong>AVF 组件</strong></h3><p><img align="left" alt="AVF Component architecture" height="219" src="https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEjqoflrFdKllbCL-ksao2ozMc0Vwp3eAXNadr58iaiCyd4noAKVuwaetGcVVoU1s1s_g3FA94wCHv_wg8AYbnczEY518U98tUwpYqkyLM-H2IbKpJcNY55xg6yCw5KO2Nk5HW2uAxAGNBXVdDVm8dNdG4das2y7RBWaQCWleykRilaLbd0sfFnb0JOXgC0/s1600/image1.png" width="453" referrerpolicy="no-referrer"></p><p>AVF 由框架 API、<strong>Hypervisor </strong>和虚拟机管理器组成。<strong>Hypervisor </strong>确保虚拟机（包括 Android）相互隔离，就像 Linux 内核对进程的隔离一样。不过，与 Linux 内核相比，AVF <strong>Hypervisor</strong>（pKVM）的代码量要小得多（约 50 倍）。</p><h4 style="text-align:start"><strong>Hypervisor (</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsource.android.com%2Fdocs%2Fcore%2Fvirtualization%2Farchitecture%23hypervisor" target="_blank"><strong>pKVM</strong></a><strong>)&nbsp;</strong></h4><p style="text-align:start"><strong>Hypervisor </strong>侧重于开源可用性、安全性、虚拟机的设备分配以及虚拟机之间的隔离安全。它的攻击面较小，符合较高的安全保证级别。受保护的 KVM <strong>Hypervisor</strong>（pKVM）完全支持 AVF API 和功能。</p><p style="text-align:start">pKVM 构建在 Linux 中基于内核的虚拟机（KVM）这一行业标准之上。这意味着所有依赖基于 KVM 的虚拟机的现有操作系统和工作负载都能通过 pKVM 在安卓设备上无缝运行。</p><h4 style="text-align:start"><strong>虚拟机管理器 (</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid.googlesource.com%2Fplatform%2Fexternal%2Fcrosvm%2F" target="_blank"><strong>crosvm</strong></a><strong>)</strong></h4><p style="text-align:start">crosvm 是基于 Rust 的虚拟机管理器（VMM），是 <strong>Hypervisor </strong>与 AVF 框架之间的桥梁。它负责创建、管理和销毁虚拟机。此外，它还提供了一个跨多个 <strong>Hypervisor </strong>实现的抽象层。</p><h4 style="text-align:start"><strong>隔离虚拟机</strong></h4><p style="text-align:start">隔离的虚拟机对 Android 来说是不可见的，即在 Android 中运行的任何进程都无法检查、查看或篡改此类虚拟机的内容。这一保证由 <strong>Hypervisor </strong>提供。</p><h4 style="text-align:start"><strong>虚拟机</strong></h4><p style="text-align:start">虚拟机与隔离的虚拟机相同，只是拥有正确权限的 Android 进程可以访问虚拟机。</p><h4 style="text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsource.android.com%2Fdocs%2Fcore%2Fvirtualization%2Fmicrodroid" target="_blank"><strong>Microdroid</strong></a></h4><p style="text-align:start">Microdroid 是一个经过精简的 Android 操作系统软件包，可作为启动虚拟机（VM）的模板。它为开发人员在虚拟机中构建和运行工作负载提供了熟悉的环境。Microdroid 使用熟悉的 Android 工具和库，如 Bionic、Binder IPC 和 keystore 支持。</p><h4 style="text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsource.android.com%2Fdocs%2Fcore%2Fvirtualization%2Fvirtualization-service" target="_blank"><strong>虚拟化服务</strong></a></h4><p style="text-align:start">VirtualizationService 管理所有客户虚拟机（无论是否隔离）。它主要通过管理 crosvm 实例来实现。它还公开了 AIDL API，系统服务或特权应用程序可使用该 API 启动、监控和停止虚拟机。</p><h4 style="text-align:start"><strong>RpcBinder</strong></h4><p style="text-align:start">RpcBinder 是为 Android 界面定义语言（AIDL）开发的全新后端。RpcBinder 可使用现有的 binder 线协议与虚拟机进行通信。这意味着：</p><ol><li><p>开发人员可以使用他们已经熟悉的语言和基础架构（AIDL）编写虚拟机接口。</p></li><li><p>只需继续使用现有的 AIDL 接口，即使绑定端点转移到虚拟机中也是如此。</p></li></ol><h3 style="text-align:start"><strong>Android 14 有哪些新功能？</strong></h3><p style="text-align:start">安卓 14 不仅使 AVF 可以在更多设备上使用，还提供了一个新的工具包，使用户可以使用 AVF 及其组件构建更多内容：</p><ul><li><p><strong>用于 AVF 的安卓系统应用程序接口</strong>&nbsp;</p></li></ul><blockquote><p>特权应用程序现在可以使用虚拟机来执行需要隔离的关键工作负载；</p></blockquote><ul><li><p><strong>Hypervisor DevEx 工具包</strong>&nbsp;</p></li></ul><blockquote><p>添加了跟踪功能、改进的可调试性和监控功能，以提供洞察力并协助平台开发人员在隔离虚拟机内进行开发；</p></blockquote><ul><li><p><strong>Hypervisor 供应商模块</strong></p></li></ul><blockquote><p>通过供应商模块扩展，我们的合作伙伴可以定制谷歌的 pKVM，以满足他们的特定需求，实现差异化；</p></blockquote><ul><li><p><strong>改善系统健康</strong>&nbsp;</p></li></ul><blockquote><p>安卓 14 中，基于 microdroid 的虚拟机启动速度比安卓 13 快 2 倍，而内存使用量却只有安卓 13 的一半。</p></blockquote><p>AVF 框架的其它部分可让 Android 服务和应用程序轻松使用虚拟化。例如，使用 AIDL 作为传输层抽象虚拟机之间的通信，管理虚拟机生命周期或虚拟机的创建方式。</p><blockquote><p>原文链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2023%2F12%2Fvirtual-machines-as-core-android-primitive.html" target="_blank">https://android-developers.googleblog.com/2023/12/virtual-machines-as-core-android-primitive.html</a></p><p><em>Posted by Sandeep Patil – Principal Software Engineer, and Irene Ang – Product Manager</em></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270066/virtual-machines-as-core-android-primitive</guid>
            <link>https://www.oschina.net/news/270066/virtual-machines-as-core-android-primitive</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenTiny Vue 3.12.0 发布：文档大优化！增加水印和二维码两个新组件🎈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>你好，我是 Kagol。</p><p>非常高兴跟大家宣布，2023 年 11 月 30 日，OpenTiny Vue 发布了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Freleases%2Ftag%2Fv3.12.0" target="_blank">v3.12.0</a> 🎉。</p><p>OpenTiny 每次大版本发布，都会给大家带来一些实用的新特性，10.24 我们发布了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Freleases%2Ftag%2Fv3.11.0" target="_blank">v3.11.0</a> 版本，增加了富文本、ColorPicker 等 4 个新组件，该版本共有 23 位贡献者参与。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7293122369610940452" target="_blank">🎊OpenTiny Vue 3.11.0 发布：增加富文本、ColorPicker 等 4 个新组件，迎来了贡献者大爆发！</a></p><p>本次 3.12.0 版本主要有以下更新：</p><ul><li>全面优化 54 个高频组件的 Demo / API 文档，让文档更加清晰易懂、符合预期</li><li>Watermark 水印组件</li><li>QrCode 二维码组件</li></ul><p>本次版本共有 21 位贡献者参与开发，其中有 8 位是新贡献者，欢迎新朋友们👏</p><p>以下是新贡献者：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffanbingbing16" target="_blank">@fanbingbing16</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F686" target="_blank">#686</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdyh333" target="_blank">@dyh333</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F667" target="_blank">#667</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbetavs" target="_blank">@betavs</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F719" target="_blank">#719</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbetterdancing" target="_blank">@betterdancing</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F742" target="_blank">#742</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FDavid-TechNomad" target="_blank">@David-TechNomad</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F772" target="_blank">#772</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Ffalcon-jin" target="_blank">@falcon-jin</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F844" target="_blank">#844</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwuyiping0628" target="_blank">@wuyiping0628</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F944" target="_blank">#944</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJames-9696" target="_blank">@James-9696</a>&nbsp;made their first contribution in&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fpull%2F970" target="_blank">#970</a></li></ul><p>也感谢老朋友们对 OpenTiny 的辛苦付出！</p><p>大家可以更新 <code>@opentiny/vue@3.12.0</code> 进行体验！</p><h2>组件文档优化</h2><p>为了提升开发者阅读文档的体验，从 9 月份至今，我们花了整整三个月时间对 54 个高频组件的 demo / api 文档进行全面的优化。</p><p>希望你能喜欢这波优化，如果你在使用过程中，发现有描述不清楚、不合理、不美观之处，也希望你能给我们提交&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues" target="_blank">Issue</a>&nbsp;进行反馈。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7309352577146126373" target="_blank">🎉开发者的福音：TinyVue 组件库文档大优化！类型更详细，描述更清晰！</a></p><h2>Watermark 水印</h2><p>水印组件用于保护文档的版权，防止文档被非法复制或盗用，常见的使用场景有：</p><ul><li>在公司内部文档中添加水印，以防止机密信息泄露</li><li>在商业合同或法律文件中添加水印，以保护文件的真实性和完整性</li><li>在电子书籍或其他数字内容中添加水印，以防止盗版和非法传播</li><li>在社交媒体发布图片时添加水印，以保护自己的版权</li></ul><p>Watermark 使用方式很简单，只需要用水印组件包裹要添加水印的内容即可。</p><pre><code class="language-html">&lt;template&gt;
  &lt;tiny-watermark v-bind="params"&gt;
    &lt;div style="height: 500px"&gt;&lt;/div&gt;
  &lt;/tiny-watermark&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { reactive } from 'vue'
import { Watermark as TinyWatermark } from '@opentiny/vue'

const params = reactive({
  content: ['I ❤️ TinyVue', 'TinyVue is 👍'],
})
&lt;/script&gt;
</code></pre><p>效果如下： <img src="https://oscimg.oschina.net/oscnet/up-562c09e08e9917cda421a6a2587e3ea3c93.png" alt="" referrerpolicy="no-referrer"></p><p>其中水印内容可以支持调整宽高、旋转角度、字体、间距等，并且支持图片水印。</p><p>图片水印效果：</p><p><img src="https://oscimg.oschina.net/oscnet/up-fd8835c16270be5786afdb4a6e2c654618c.png" alt="" referrerpolicy="no-referrer"></p><p>水印组件链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fwatermark" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/watermark</a></p><p>欢迎体验！</p><h2>QrCode 二维码</h2><p>二维码组件的使用场景非常丰富：</p><ul><li>线下演讲时，可以在 PPT 放个人微信的二维码，方便听众用手机扫码获得讲师的联系方式，进行进一步的沟通</li><li>商家可以在产品上印制二维码，用户通过扫描二维码来获取产品信息或说明书</li><li>用户通过扫描二维码来登录网站或应用，提高登录的安全性和便捷性</li></ul><p>QrCode 使用方式也很简单，只需要传入链接地址即可。</p><pre><code class="language-html">&lt;template&gt;
  &lt;tiny-qr-code v-bind="params"&gt;&lt;/tiny-qr-code&gt;
&lt;/template&gt;

&lt;script setup&gt;
import { QrCode as TinyQrCode } from '@opentiny/vue'

const params = {
  value: 'https://opentiny.design/tiny-vue'
}
&lt;/script&gt;
</code></pre><p>效果如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-6cd3890d8cffa77d3bdc957eba9a64ebdf0.png" alt="" referrerpolicy="no-referrer"></p><p>可以尝试扫描上面的二维码，将会进入 TinyVue 官网。</p><p>二维码的大小、颜色、背景、间距等都支持配置，同时也支持自定义图片。</p><p>自定义图片的二维码效果：</p><p><img src="https://oscimg.oschina.net/oscnet/up-1c1ee113e783fece7810d1d2f23432dc9fd.png" alt="" referrerpolicy="no-referrer"></p><p>二维码组件链接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fqr-code" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/qr-code</a></p><p>欢迎体验！</p><hr><p>欢迎加入 OpenTiny 开源社区。</p><p>添加微信小助手：opentiny-official，一起参与共建！</p><p>开源不易，请给&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a>&nbsp;点个 Star ⭐ 鼓励下，感谢你对我们 OpenTiny 的大力支持！</p><p>源码：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><p><img src="https://oscimg.oschina.net/oscnet/up-8eccff9b756a679b6502e7d270961b07240.png" alt="" referrerpolicy="no-referrer"></p><h2>联系我们</h2><p>GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a>（欢迎 Star ⭐）</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">https://opentiny.design/tiny-vue</a></p><p>B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><p>公众号：OpenTiny</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/10320008</guid>
            <link>https://my.oschina.net/u/4863191/blog/10320008</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2023 年，再来聊聊：微服务、中台？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>阿里巴巴市值被拼多多反超后，互联网上出现了各种对比和分析两家公司的文章，基本都是围绕组织架构、商业模式、企业愿景等宏观方面展开。</p><p>片刻之间，阿里此前的各种「战略」似乎都成了「昏招」。这不，曾经他们引以为豪的「中台」也被拿出来批判了。</p><p><img src="https://static.oschina.net/uploads/space/2023/1208/115007_40xS_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1208/115136_JIEp_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-3b2b9bdc8dc5a4b3e10ffbfff09cc03a74d.png" referrerpolicy="no-referrer"></p><blockquote><p>阿里巴巴是中国第一个明确提出「中台战略」的企业。在 2015 年年中的时候，马云参观了芬兰游戏公司 Supercell。这家公司的员工人数非常少，还不到 200 人，但是一年的利润高达 15 亿美金。虽然开发了像《部落冲突》这样的知名游戏，但这家公司开发游戏的团队规模都很小，只有六七个人而已。</p><p>这么小规模的团队，怎么做成了这么大的业务呢？其中一个原因是他们把游戏开发过程中，要用的一些通用的游戏素材和算法整理出来，把这些作为工具提供给所有的小团队。</p><p>同一套工具，可以支持好几个小团队研发游戏。这种管理方式，就是一个「中台」的模型。</p><p>参观完之后，马云非常受启发，不久后阿里集团就正式提出了「<strong>大中台、小前台」</strong>的中台战略，通过将原本分散到各个业务的支持部门，比如技术部门、数据部门集中到一起。</p><p>这样，原本分散的支持部门聚合在一起后可以进行快速的服务迭代，更高效地支撑前线，大幅降低支持部门的重复投资建设。从此中台渐入中国企业家的视野。</p></blockquote><hr><p>说到中台，必然离不开「微服务」——这也是前几年非常火热的技术概念，但现在已经没什么话题度了。所以 2023 年，大家对微服务、中台有什么切身感受吗，一起来聊聊。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270064</guid>
            <link>https://www.oschina.net/news/270064</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米澎湃 OS 首批正式版开始陆续推送]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span>小米澎湃 OS 官方微博发布动态称，小米澎湃 OS 第一批正式版正在逐步推送中。</span></p><p><span>5 款机型已于 12 月 7 日起开始陆续推送，分别为 Xiaomi 13 Pro、Xiaomi 13、Redmi K60 Pro、Redmi K60、Xiaomi Pad 6 Max 14。更多机型即将陆续推送。</span></p><p><span>Xiaomi MIX Fold 3、Xiaomi MIX Fold 2、Xiaomi Pad 6 Pro、Xiaomi Pad 6 则预计于 2024 年 1 月开始陆续推送。</span></p><p><img height="667" src="https://oscimg.oschina.net/oscnet/up-b95d11366413ac08d4ed48c93d084478d52.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270061</guid>
            <link>https://www.oschina.net/news/270061</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中国信通院发布《区块链白皮书（2023 年）》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">2023 年 12 月 7 日，中国信息通信研究院（简称「中国信通院」）在「2023 年 Web3.0 创新大赛暨颁奖典礼」上<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F6_R6Mvw1xEPoTaTRoInFfQ" target="_blank">发布</a>了《区块链白皮书（2023 年）》并对白皮书进行了深度解读。</span></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">白皮书在之前基础上，重点融入了「2023 年区块链生态及产业发展情况调研」相关结果分析，并系统梳理了 2023 年国内外区块链技术、应用创新热点，以及产业生态发展新动态，特别是在全球 Web3.0 快速推进、数据要素价值加快释放的背景下，展望我国区块链技术应用和产业发展新趋势。</span></p><h4 style="margin-left:0px; margin-right:0px"><strong>白皮书核心观点</strong></h4><p style="margin-left:0; margin-right:0"><strong>1. 区块链技术面向高扩展、高性能和高安全持续演进。</strong>当前，区块链技术沿公有链和联盟链两大技术路线分别演进，公有链聚焦高性能、高扩展性和高安全性强化技术创新，联盟链则面向自主化、广域化、规模化应用实现持续优化。当前融合二者优势的开放联盟链也迎来快速发展，有望成为 Web3.0 时代数据价值释放和协作共享的技术底座。</p><p style="margin-left:0; margin-right:0"><strong>2. 区块链技术与公共服务、实体经济等领域深度融合。</strong>全球区块链应用范围从金融领域逐步向外延展，在实体经济、政务服务、公共服务、数字原生等领域加速落地，场景创新、模式创新层出不穷，行业生态逐步完善。此外，数字资产应用拓展了要素的发展边界，数字身份已成为数字世界的重要入口，区块链通过独特的机制正在成为促进数据要素供给流通与价值释放的重要基础设施，为构建 Web3.0 应用生态提供有力支撑。</p><p style="margin-left:0; margin-right:0"><strong>3. 多国政府积极布局 Web3.0 产业发展。</strong>全球多个国家和地区政府正在积极布局 Web3.0 发展，着力提升区块链治理及监管能力，沿不同路径持续推进区块链基础设施建设。我国区块链产业布局更加全面、协作更加紧密，标准体系日益完善，区块链基础设施建设初见成效，国产自主生态正稳步发展壮大。</p><p style="margin-left:0; margin-right:0"><strong>4. 全球加快优化区块链监管治理体系。</strong>全球范围内多个国家和地区正加快推动区块链监管治理体系优化，探索基于区块链的 Web3.0、数字资产等发展路径。我国地方政府积极开展相关布局，以政策扶持、机制创新等方式促进产业发展与监管合规同步推进，为数字经济发展提供新路径和新模式</p><p style="margin-left:0; margin-right:0"><img height="278" src="https://oscimg.oschina.net/oscnet/up-4dcdb04a180dee8c68991d52429f2a6c2cf.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="303" src="https://oscimg.oschina.net/oscnet/up-cc6a0478e95ab4852645905ddfd7661997b.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="309" src="https://oscimg.oschina.net/oscnet/up-e9d6c8a146fce01dab3e8838032809ad6f1.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="304" src="https://oscimg.oschina.net/oscnet/up-fc41d1b4f65c0ba86ad662b7019a04e50d2.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="307" src="https://oscimg.oschina.net/oscnet/up-e3b923b9f287991de935689803c56da9f6a.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="309" src="https://oscimg.oschina.net/oscnet/up-2862283eaefbd74a141207fba2634893f29.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="304" src="https://oscimg.oschina.net/oscnet/up-85f57208cc7017a701696280ab3e56b201a.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="311" src="https://oscimg.oschina.net/oscnet/up-264fed980163542fda3951f73cfafa9c9ef.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="311" src="https://oscimg.oschina.net/oscnet/up-22eb41296a9f9d624589657f9570e1a3818.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="306" src="https://oscimg.oschina.net/oscnet/up-5aec9e8e8721925137d746e323b3a4b472e.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="310" src="https://oscimg.oschina.net/oscnet/up-354bc09172ab7fb04087f99b2d259a2737c.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="313" src="https://oscimg.oschina.net/oscnet/up-d1edf6f022b4fb437c2d1ec45461338d608.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="303" src="https://oscimg.oschina.net/oscnet/up-9afaffbca935ed920989d45296f9ef7df9d.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="301" src="https://oscimg.oschina.net/oscnet/up-5d0ebfdcc4b0800d3d6aef007e153610e30.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="310" src="https://oscimg.oschina.net/oscnet/up-ef45c8ef4adcf6de0893a2b7c1585484e5e.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="310" src="https://oscimg.oschina.net/oscnet/up-7112a4582a8090126bac3344cffcd931c4b.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="306" src="https://oscimg.oschina.net/oscnet/up-4d508541738c8fc65a2f367dfeb655bda8b.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="311" src="https://oscimg.oschina.net/oscnet/up-a8bb5722b74ee290874eb54b2373cb00ff6.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="306" src="https://oscimg.oschina.net/oscnet/up-50cbdf8186a0c4335d77afaa69acda349e2.png" width="500" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270058</guid>
            <link>https://www.oschina.net/news/270058</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[雷军 30 年前写的论文：《计算机病毒判定专家系统原理与设计》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>雷军 1992 年发表的《计算机病毒判定专家系统原理与设计》论文在网上曝光，引发热议。</p><p>这份论文详细地描述了计算机病毒判定专家系统的原理与具体设计方法，一定程度上解决了流行病毒的判定问题。论文结语写道：<strong>研制解决流行病毒判定问题的专家系统，在目前具有相当大的使用价值。本文介绍的这种智能判定方法大大优于传统的检测方法，具有准确率高，适用性广的有点，还可以不断发展和扩充。关于这种方法，目前国内外文献上尚未提及。（参考文献略）</strong></p><p>附论文原文：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-00e57539a1c6a07aa17cb70f341f3f2d3c1.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9babb896439e0b4a049532c7537dba1318f.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-c000968b49128269073f6f38373e6162709.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-a14bb1726495836bf7d6d463cbbefdb16a1.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-63cb2ee41ae8f0981dc0a88d94251dd61fb.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-d7986af830afb49d055c14584452431d642.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-dea1bb17744fa373895687fd84a7d5520ab.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b68d4f4408348e18bba5c70dd2006a1a855.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F5714719345%2FNvR23gzWc%3Fpagetype%3Dviewer" target="_blank">https://weibo.com/5714719345/NvR23gzWc?pagetype=viewer</a></em></u></p><p>华为消费者 BG 战略 Marketing 部副总裁李昌竹转发了该论文的微博，<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F1402329495%2FNwbO90AHM%3Fpagetype%3Dprofilefeed" target="_blank">并说道</a></u>：<strong>「技术创新和前沿探索都是值得尊敬和学习的。」</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-4cbc7936df3d1ad8b4a787215eb1fbea304.png" referrerpolicy="no-referrer"></p><p>1992 年，雷军还与求伯君合著了《深入 DOS 编程》一书。在接下来的两年里，雷军涉猎广泛，写过加密软件、杀毒软件、财务软件、CAD 软件、中文系统以及各种实用小工具等。</p><p><img src="https://oscimg.oschina.net/oscnet/up-389de1159783b7b408cade4d27be661e412.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-d80cc19de34a8b5e73cfe14690d437a0a70.png" referrerpolicy="no-referrer"></p><p>公开资料显示，1987 年，雷军毕业于原沔阳中学（现湖北省仙桃中学），同年考上了武汉大学计算机系。</p><p>1992 年初，雷军加盟金山公司。先后出任金山公司北京开发部经理、珠海公司副总经理、北京金山软件公司总经理等职务。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270190</guid>
            <link>https://www.oschina.net/news/270190</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度 Comate 荣获「2023 AIIA 人工智能十大先锋应用案例」奖]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span>12 月 7-8 日，中国人工智能产业发展联盟（AIIA）第十次全体会议暨 2023 年通用人工智能创新发展论坛在重庆召开。</span>大会围绕软件工程、基础平台、科学智能、具身智能等技术创新，数据、开源开放、安全治理等产业关键要素，以及金融、汽车等重点行业应用等人工智能最新热点展开。</p><p><span>作为大会重磅环节，从今年 10 月起，AIIA 启动</span><strong>「2023 人工智能十大先锋应用案例征集」活动</strong><span>，旨在甄选具有高价值、标杆性、真落地的行业典型应用实践，打造 AI 界「奥斯卡」。经过为期 2 个月的征集评审，从百余项入围案例中，</span><strong>百度智能代码助手 Comate 脱颖而出，斩获「2023AIIA 人工智能十大先锋应用案例」奖，也是本次十大先锋应用案例奖中的唯一软件工程领域 AI 应用</strong><span><strong>。</strong></span></p><p><img height="846" src="https://static.oschina.net/uploads/space/2023/1208/110825_3Ktq_3820517.png" width="1269" referrerpolicy="no-referrer"></p><p><strong>（现场颁奖）</strong></p><p>从在百度内部全面落地应用，到面向企业开发者发布「国内首个商用全场景智能编程助手」，再到 SaaS 版全面开放，百度 Comate 厚积薄发，持续引领 AI 原生研发新范式。</p><p>目前，百度 Comate 已覆盖 100+种编程语言，支持 10+种主流 IDE，覆盖编程前、后、移动端，支持软硬件不同开发场景，为研发全生命周期提供全场景智能辅助，大幅提升研发效率的同时，也提升了工程师的工作幸福感。</p><p><img height="716" src="https://static.oschina.net/uploads/space/2023/1208/110838_ghZG_3820517.png" width="1268" referrerpolicy="no-referrer"></p><p><span>在技术创新优势上，依赖文心大模型、飞桨深度学习平台以及百度多年积累的技术经验，Comate 智能代码助手具备</span><strong>模型训练、推理加速、工程实践和安全保障四重技术创新</strong><span>，并在</span><strong>代码续写、代码解释、NL2Code、Code Debug 等能力上领先行业与竞品</strong><span>。</span></p><p><img height="712" src="https://static.oschina.net/uploads/space/2023/1208/110849_LSh5_3820517.png" width="1267" referrerpolicy="no-referrer"></p><p>在应用实效上，基于模型层多种能力，百度 Comate 具有优秀的代码推荐、单测生成、自然语言代码生成和代码修复等能力；并通过开放 SaaS 版和私有化部署能力，满足个人用户、中小企业和大型企业的不同需求。在百度内部，通过 Comate 生成代码占比 20%，整体采纳率达 40%；SaaS 版开箱即用，注册企业累计 4000+；涵盖金融、汽车、互联网、高端制造等在内的数十家大型企业已与 Comate 达成私有化部署合作。</p><p><img height="1842" src="https://static.oschina.net/uploads/space/2023/1208/192440_aMPH_3820517.png" width="3260" referrerpolicy="no-referrer"></p><p>未来，百度 Comate 还将持续强化产品能力建设，坚守安全性的同时增强开放性，为企业和个人用户提供更智能、更高效、更便捷的代码辅助服务，助力研发效率持续提升，加速产业创新落地。</p><p>马上申请免费试用，还有超多限时福利！</p><p><img height="533" src="https://static.oschina.net/uploads/space/2023/1208/110911_Fwzq_3820517.png" width="300" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270054/comate-aiia-2023-news</guid>
            <link>https://www.oschina.net/news/270054/comate-aiia-2023-news</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[网信办发布《网络安全事件报告管理办法（征求意见稿）》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>国家互联网信息办公室就《网络安全事件报告管理办法（征求意见稿）》公开征求意见。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-c1eb5e22a141f8e4fc99760bb45a85f397d.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.cac.gov.cn%2F2023-12%2F08%2Fc_1703609634347501.htm" target="_blank">http://www.cac.gov.cn/2023-12/08/c_1703609634347501.htm</a></u></em></p></blockquote><p>征求意见稿提出，运营者在发生网络安全事件时，应当及时启动应急预案进行处置。按照《网络安全事件分级指南》，<strong>属于较大、重大或特别重大网络安全事件的，应当于 1 小时内进行报告</strong>。</p><p>其中，<strong>网络和系统归属中央和国家机关各部门及其管理的企事业单位的，运营者应当向本部门网信工作机构报告</strong>。属于重大、特别重大网络安全事件的，各部门网信工作机构在收到报告后应当于 1 小时内向国家网信部门报告。</p><p><strong>网络和系统为关键信息基础设施的，运营者应当向保护工作部门、公安机关报告</strong>。属于重大、特别重大网络安全事件的，保护工作部门在收到报告后，应当于 1 小时内向国家网信部门、国务院公安部门报告。</p><p><strong>其他网络和系统运营者应当向属地网信部门报告</strong>。属于重大、特别重大网络安全事件的，属地网信部门在收到报告后，应当于 1 小时内逐级向上级网信部门报告。</p><p>有行业主管监管部门的，<strong>运营者还应当按照行业主管监管部门要求报告</strong>。</p><p>运营者应当按照《网络安全事件信息报告表》报告事件，至少包括下列内容：</p><ul><li><p><strong>事发单位名称及发生事件的设施、系统、平台的基本情况</strong>；</p></li><li><p><strong>事件发现或发生时间、地点、事件类型、已造成的影响和危害，已采取的措施及效果</strong>。对勒索软件攻击事件，还应当包括要求支付赎金的金额、方式、日期等；</p></li><li><p>事态发展趋势及可能进一步造成的影响和危害；</p></li><li><p>初步分析的事件原因；</p></li><li><p>进一步调查分析所需的线索，包括可能的攻击者信息、攻击路径、存在的漏洞等；</p></li><li><p>拟进一步采取的应对措施以及请求支援事项；</p></li><li><p>事件现场的保护情况；</p></li><li><p>其他应当报告的情况。</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-c423dc28f0c5f4929c6ec12f752d357f88f.png" referrerpolicy="no-referrer"></p><p>当事件处置结束后，运营者应当于 5 个工作日内对事件原因、应急处置措施、危害、责任处理、整改情况、教训等进行全面分析总结，形成报告按照原渠道上报。</p><hr><p>附网络安全事件分级指南：</p><p><img height="1406" src="https://oscimg.oschina.net/oscnet/up-3bd9fcd558b1e34d9278bc32bdf7f4a8048.png" width="1030" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-b5c16894520b3208bea288209ff7de41132.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-66e96efeef0f4b5e2538e297a57ab5d40a8.png" referrerpolicy="no-referrer"></p><p><img height="1486" src="https://oscimg.oschina.net/oscnet/up-79b90dfeb4395d333078f97cdaff1a28129.png" width="936" referrerpolicy="no-referrer"></p><p><img height="1488" src="https://oscimg.oschina.net/oscnet/up-77f78a766c7e070b24b239150c9ec5de38f.png" width="934" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-dd98b736f8b6a5c76679267826d5058dada.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 03:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270052</guid>
            <link>https://www.oschina.net/news/270052</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[支付宝启动鸿蒙原生应用开发]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>支付宝与华为终端宣布合作，基于 HarmonyOS NEXT 启动支付宝鸿蒙原生应用开发。</p><p><img alt="" height="326" src="https://oscimg.oschina.net/oscnet/up-a9aa0abdc54a1c436a2c973752477f7b5a2.webp" width="500" referrerpolicy="no-referrer"></p><p>支付宝事业群总裁倪行军表示，双方的合作将进一步满足用户在不同终端、不同场景下享受智慧生活服务的需求；同时，华为在支付宝小程序领域的数字化布局也有利于提升商家在两个生态中的经营效率。</p><p><span style="background-color:#ffffff; color:#2b2b2b">支付宝目前服务商家已达 8000 万。通过支付宝 App，有近 400 万个商家机构小程序，扫码点单、生活缴费等超过 1000 项生活服务。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 02:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270047</guid>
            <link>https://www.oschina.net/news/270047</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米发布《小米澎湃 OS 技术白皮书》]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>小米正式发布《小米澎湃 OS 技术白皮书》（下简称《白皮书》）。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7edcacdddcb86895ce723541906e9102497.png" referrerpolicy="no-referrer"></p><p><strong><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcdn-file.hyperos.mi.com%2Fhyperos-file%2F%25E5%25B0%258F%25E7%25B1%25B3%25E6%25BE%258E%25E6%25B9%2583OS%25E6%258A%2580%25E6%259C%25AF%25E7%2599%25BD%25E7%259A%25AE%25E4%25B9%25A6V1.0.pdf" target="_blank">小米澎湃 OS 技术白皮书 V1.0</a></em></u></strong></p></blockquote><p>根据《白皮书》介绍，小米澎湃 OS 是一个为下一代的计算与多种设备生态设计的系统。</p><p><span style="background-color:rgba(255, 255, 255, 0.65); color:#151631">《白皮书》</span>对小米澎湃 OS 系统架构进行了详细介绍、包括对各个子系统的架构以及关键技术的阐述，以及开发团队对各个子系统的设计思路。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1dff4e9939fb63c6ac59b0c14f3aa700571.png" referrerpolicy="no-referrer"></p><p>小米表示：「希望通过分享这些技术成果和见解，激发更多的创意和合作，推动整个行业的进步，共同构建「人车家全生态」的未来。」</p><p>小米 CEO 雷军在《白皮书》的序言中说道，2016 年，小米就开始研发跨端应用框架。2019 年，开始并行研发纯自研通用系统 Mina OS，并在部分产品上小规模量产验证，同时在实验室中也成功在手机上跑通，其中部分技术成果也已融入小米澎湃 OS。2021 年，小米开启了车机 OS 的研发。2022 年初，小米决定统一 MIUI、Vela、Mina、车机 OS 四个系统的软件架构。自此，小米的操作系统底层合并完成。</p><blockquote><p><img height="1690" src="https://oscimg.oschina.net/oscnet/up-2b2e2aa832685a84d24571029ea1b7cccf2.png" width="1760" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270045</guid>
            <link>https://www.oschina.net/news/270045</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 内核源代码官网 git.kernel.org 原生支持深色模式]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linux 内核开发者收到了一份提前的圣诞礼物 ——&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgit.kernel.org%2F" target="_blank">git.kernel.org</a>&nbsp;Web 界面已原生支持深色模式。对于开发者来说，深色模模式可以增强浏览官方 Linux 内核 Git 仓库，以及其他开发分支的查看体验。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7e14e90ceb4a018a01f4aebacdc75e3f470.png" referrerpolicy="no-referrer"></p><p>从提交记录可以看到，几个月前就已经有补丁将 CSS 暗模式支持添加到 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fgit.kernel.org" target="_blank">git.kernel.org</a> cgit Web 界面，现在终于上线了。</p><p><img src="https://oscimg.oschina.net/oscnet/up-514a596f11bc68a1ff4ba9c95167bba29c7.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 08 Dec 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/270043</guid>
            <link>https://www.oschina.net/news/270043</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 前后端分离的全栈开源项目 AirPower]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img width="300" src="https://gitee.com/air-power/AirPower4T/raw/web/assets/img/airpower.png" referrerpolicy="no-referrer"></p><p align="center"><img src="https://svg.hamm.cn/?key=Lang&amp;value=TypeScript&amp;bg=green" referrerpolicy="no-referrer"><img src="https://svg.hamm.cn/?key=Base&amp;value=Vue3" referrerpolicy="no-referrer"><img src="https://svg.hamm.cn/?key=Build&amp;value=Vite" referrerpolicy="no-referrer"><img src="https://svg.hamm.cn/?key=UI&amp;value=ElementPlus" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/air-power/AirPower4T">Gitee</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FHammCn%2FAirPower4T">Github</a> / <a href="https://gitee.com/air-power/AirPower4T/blob/web/CHANGELOG.md">CHANGELOG</a></p><h2><a id="user-content--这是个什么项目" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E8%BF%99%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E9%A1%B9%E7%9B%AE"></a>📖 这是个什么项目</h2><blockquote><p>你当前查看的是 <code>web</code> 分支，我们也同时提供了 <code>wechat</code>、<code>uniapp</code> 等分支：） 你可以先阅读 <a href="https://gitee.com/link?target=https%3A%2F%2Fjuejin.cn%2Fpost%2F7273290114921889807">掘金专栏</a> 的一些文章，也可以体验 <a href="https://gitee.com/link?target=https%3A%2F%2Fservice.hamm.cn">线上示例 DEMO</a>，如果你喜欢这个项目，欢迎给我们大大的 ⭐️⭐️⭐️</p></blockquote><p>为了满足前端开发标准化、工程化、系统化等等需求，我们设计并开发了一个开发组件库和常用类库和方法库的集合基础脚手架，其中包含了一些页面通用的布局、常用的弹窗和交互、提示信息以及网络请求，强类型面向对象的约束规范等，以满足日常开发的快捷、稳健、标准化等要求。</p><p><strong>AirPower</strong> 是一个基于 <code>Vue3</code><code>TypeScript</code><code>Element Plus</code><code>Vite</code> 的开发基础库，使用 <strong>装饰器</strong>、<strong>面向对象</strong>、<strong>Hook</strong> 等前端开发方式。</p><h2><a id="user-content--为何起名 airpower" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E4%B8%BA%E4%BD%95%E8%B5%B7%E5%90%8Dairpower"></a>🎈 为何起名<strong>AirPower</strong></h2><p>早期是子仓库方式的设计, 这个依赖库跟宿主项目在一起, 所以为了排前面, 选择使用<strong>A</strong>开头的单词, 后来想起 <strong>Apple</strong> 家难产了的一个产品的名称, <strong>AirPower</strong>, 作者是 Apple 十年老粉, 那就顺便致敬下 <strong>Apple</strong>.</p><h2><a id="user-content--有哪些功能设计" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1"></a>🎉 有哪些功能 (设计)</h2><ol><li><strong>Model</strong> / <strong>Entity</strong> 所有的数据交互都以数据模型实例的方式进行, 不再直接使用 JSON.</li><li><strong>Service</strong> 使用服务类对所有的网络请求进行抽象, 通过继承方式实现相似代码的复用</li><li><strong>Component</strong> 提供了很多后台管理系统常用的组件和一些反馈组件</li><li><strong>Hook</strong> 提供了与 Service 交互的一些通用的交互 Hooks</li><li><strong>Enum</strong> 提供了很多很多很多的枚举</li><li><strong>Decorator</strong> 提供了很多很多很多的装饰器</li><li>提供了类似 <strong>Java</strong> BeanCopy 相关的数据转换方式, 提供了完整的面向对象实现</li><li>......</li></ol><h2><a id="user-content--代码风格展示" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%B1%95%E7%A4%BA"></a>💻 代码风格展示</h2><p><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/1.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/2.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/3.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/4.png" referrerpolicy="no-referrer"></p><h2><a id="user-content--如何使用初始化" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96"></a>🔑 如何使用 (初始化)?</h2><p>你可以通过我们提供的 <code>AirPower 宿主仓库</code> 项目来完成 <strong>AirPower</strong> 宿主项目的初始化:</p><p>AirPowerWebStarter via <a href="https://gitee.com/air-power/AirPowerWebStarter/blob/main/README.md">Gitee</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FHammCn%2FAirPowerWebStarter%2Fblob%2Fmain%2FREADME.md">Github</a></p><h2><a id="user-content--我们的建议" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E6%88%91%E4%BB%AC%E7%9A%84%E5%BB%BA%E8%AE%AE"></a>🛎 我们的建议</h2><p>我们提供的 <strong>AirPower 宿主仓库</strong> 里面提供了一些 <code>ESlint 规则</code><code>路由配置</code><code>环境变量配置</code><code>tsconfig</code><code>vite.config</code>, 以及很多的 <strong>demo</strong> 代码, 你可以进行参考。</p><p>如果你有什么疑问或者问题，你也可以加入开发者交流 QQ 群 (<code>555156313</code>) 进行咨询，当然，我们更建议你发起 <a href="https://gitee.com/air-power/AirPower4T/issues/new">Gitee issue</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FHammCn%2FAirPower4T%2Fissues%2Fnew">Github issue</a></p><h2><a id="user-content--enjoy-it" class="anchor" href="https://gitee.com/air-power/AirPower4T#-enjoy-it"></a>⏰ Enjoy it</h2><p>好了, 那么接下来你可以愉快的开发了, 如果你有什么建议或者意见, 可以在本仓库中提交你的 <strong>issues</strong>, 你可以为这个依赖库进行 <strong>添砖加瓦</strong>!</p><blockquote><p>☕️Java: 加瓦? 什么 Java?</p></blockquote><h2><a id="user-content--来点图示例" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E6%9D%A5%E7%82%B9%E5%9B%BE%E7%A4%BA%E4%BE%8B"></a>📷 来点*图 (示例)</h2><p><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/5.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/6.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/7.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/8.png" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 10:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/air-power/AirPower4T</guid>
            <link>https://gitee.com/air-power/AirPower4T</link>
        </item>
    </channel>
</rss>
