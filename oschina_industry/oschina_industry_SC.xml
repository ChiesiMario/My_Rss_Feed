<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Thu, 07 Dec 2023 14:59:20 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 前后端分离的全栈开源项目 AirPower]]>
            </title>
            <description>
                <![CDATA[<p align="center"><img width="300" src="https://gitee.com/air-power/AirPower4T/raw/web/assets/img/airpower.png" referrerpolicy="no-referrer"></p><p align="center"><img src="https://svg.hamm.cn/?key=Lang&amp;value=TypeScript&amp;bg=green" referrerpolicy="no-referrer"><img src="https://svg.hamm.cn/?key=Base&amp;value=Vue3" referrerpolicy="no-referrer"><img src="https://svg.hamm.cn/?key=Build&amp;value=Vite" referrerpolicy="no-referrer"><img src="https://svg.hamm.cn/?key=UI&amp;value=ElementPlus" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/air-power/AirPower4T">Gitee</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FHammCn%2FAirPower4T">Github</a> / <a href="https://gitee.com/air-power/AirPower4T/blob/web/CHANGELOG.md">CHANGELOG</a></p><h2><a id="user-content--这是个什么项目" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E8%BF%99%E6%98%AF%E4%B8%AA%E4%BB%80%E4%B9%88%E9%A1%B9%E7%9B%AE"></a>📖 这是个什么项目</h2><blockquote><p>你当前查看的是 <code>web</code> 分支，我们也同时提供了 <code>wechat</code>、<code>uniapp</code> 等分支：） 你可以先阅读 <a href="https://gitee.com/link?target=https%3A%2F%2Fjuejin.cn%2Fpost%2F7273290114921889807">掘金专栏</a> 的一些文章，也可以体验 <a href="https://gitee.com/link?target=https%3A%2F%2Fservice.hamm.cn">线上示例 DEMO</a>，如果你喜欢这个项目，欢迎给我们大大的 ⭐️⭐️⭐️</p></blockquote><p>为了满足前端开发标准化、工程化、系统化等等需求，我们设计并开发了一个开发组件库和常用类库和方法库的集合基础脚手架，其中包含了一些页面通用的布局、常用的弹窗和交互、提示信息以及网络请求，强类型面向对象的约束规范等，以满足日常开发的快捷、稳健、标准化等要求。</p><p><strong>AirPower</strong> 是一个基于 <code>Vue3</code><code>TypeScript</code><code>Element Plus</code><code>Vite</code> 的开发基础库，使用 <strong>装饰器</strong>、<strong>面向对象</strong>、<strong>Hook</strong> 等前端开发方式。</p><h2><a id="user-content--为何起名 airpower" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E4%B8%BA%E4%BD%95%E8%B5%B7%E5%90%8Dairpower"></a>🎈 为何起名<strong>AirPower</strong></h2><p>早期是子仓库方式的设计, 这个依赖库跟宿主项目在一起, 所以为了排前面, 选择使用<strong>A</strong>开头的单词, 后来想起 <strong>Apple</strong> 家难产了的一个产品的名称, <strong>AirPower</strong>, 作者是 Apple 十年老粉, 那就顺便致敬下 <strong>Apple</strong>.</p><h2><a id="user-content--有哪些功能设计" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8A%9F%E8%83%BD%E8%AE%BE%E8%AE%A1"></a>🎉 有哪些功能 (设计)</h2><ol><li><strong>Model</strong> / <strong>Entity</strong> 所有的数据交互都以数据模型实例的方式进行, 不再直接使用 JSON.</li><li><strong>Service</strong> 使用服务类对所有的网络请求进行抽象, 通过继承方式实现相似代码的复用</li><li><strong>Component</strong> 提供了很多后台管理系统常用的组件和一些反馈组件</li><li><strong>Hook</strong> 提供了与 Service 交互的一些通用的交互 Hooks</li><li><strong>Enum</strong> 提供了很多很多很多的枚举</li><li><strong>Decorator</strong> 提供了很多很多很多的装饰器</li><li>提供了类似 <strong>Java</strong> BeanCopy 相关的数据转换方式, 提供了完整的面向对象实现</li><li>......</li></ol><h2><a id="user-content--代码风格展示" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E4%BB%A3%E7%A0%81%E9%A3%8E%E6%A0%BC%E5%B1%95%E7%A4%BA"></a>💻 代码风格展示</h2><p><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/1.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/2.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/3.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/4.png" referrerpolicy="no-referrer"></p><h2><a id="user-content--如何使用初始化" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%88%9D%E5%A7%8B%E5%8C%96"></a>🔑 如何使用 (初始化)?</h2><p>你可以通过我们提供的 <code>AirPower 宿主仓库</code> 项目来完成 <strong>AirPower</strong> 宿主项目的初始化:</p><p>AirPowerWebStarter via <a href="https://gitee.com/air-power/AirPowerWebStarter/blob/main/README.md">Gitee</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FHammCn%2FAirPowerWebStarter%2Fblob%2Fmain%2FREADME.md">Github</a></p><h2><a id="user-content--我们的建议" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E6%88%91%E4%BB%AC%E7%9A%84%E5%BB%BA%E8%AE%AE"></a>🛎 我们的建议</h2><p>我们提供的 <strong>AirPower 宿主仓库</strong> 里面提供了一些 <code>ESlint 规则</code><code>路由配置</code><code>环境变量配置</code><code>tsconfig</code><code>vite.config</code>, 以及很多的 <strong>demo</strong> 代码, 你可以进行参考。</p><p>如果你有什么疑问或者问题，你也可以加入开发者交流 QQ 群 (<code>555156313</code>) 进行咨询，当然，我们更建议你发起 <a href="https://gitee.com/air-power/AirPower4T/issues/new">Gitee issue</a> / <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FHammCn%2FAirPower4T%2Fissues%2Fnew">Github issue</a></p><h2><a id="user-content--enjoy-it" class="anchor" href="https://gitee.com/air-power/AirPower4T#-enjoy-it"></a>⏰ Enjoy it</h2><p>好了, 那么接下来你可以愉快的开发了, 如果你有什么建议或者意见, 可以在本仓库中提交你的 <strong>issues</strong>, 你可以为这个依赖库进行 <strong>添砖加瓦</strong>!</p><blockquote><p>☕️Java: 加瓦? 什么 Java?</p></blockquote><h2><a id="user-content--来点图示例" class="anchor" href="https://gitee.com/air-power/AirPower4T#-%E6%9D%A5%E7%82%B9%E5%9B%BE%E7%A4%BA%E4%BE%8B"></a>📷 来点*图 (示例)</h2><p><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/5.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/6.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/7.png" referrerpolicy="no-referrer"><img width="24%" src="https://gitee.com/air-power/AirPower4T/raw/web/docs/img/8.png" referrerpolicy="no-referrer"></p>]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 10:39:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/air-power/AirPower4T</guid>
            <link>https://gitee.com/air-power/AirPower4T</link>
        </item>
        <item>
            <title>
                <![CDATA[周星驰 Web3 团队下个月上线独立 App]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 7 日，新浪科技报道称，周星驰 Web3 团队透露，周星驰旗下 Web3 初创公司 Moonbox&nbsp;最早将于明年 1 月份完成上线 Moonbox App，届时 App 将免费向用户开放。</p><p>目前，App 研发工作已经基本完成，Moonbox 团队在 NFT 玩法上下了很多功夫，已设计出基于 AI 和 NFT 聊天的互动玩法，「周星驰将以 Moonbox First Creator 身份与大家见面」。</p><p>与此同时，周星驰参与创作的 NobodyNFT 新品，也将随之发售，用户可以通过 App 和每个 Nobody NFT 角色聊天互动以了解人物性格、爱好、背景故事。</p><p>据悉，2023 年 8 月，周星驰曾公开宣布入局 Web3+AI，并第一时间与 OKX 进行互动。周星驰当时在 INS 发文称，「感恩找到一班志同道合的 Web3 伙伴，正在研究 Web3+AI 项目，希望做个我的 AI 代替我。」</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fa24c9504d7b6c03e1cf018b165b6154e6.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 09:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269952</guid>
            <link>https://www.oschina.net/news/269952</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[新概念「防御性编程」：让自己稳拿铁饭碗]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="559" src="https://static.oschina.net/uploads/space/2023/1207/164342_Cpqj_3820517.png" width="400" referrerpolicy="no-referrer"></p><p>&nbsp;</p><blockquote><p>译者：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FcoderLMN" target="_blank"><span style="color:#3498db"><span style="background-color:#fdfdfd">/coderLMN</span></span></a></p><p><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>翻译链接：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcoderlmn.github.io%2FfrontEndCourse%2Funmaintainable.html" target="_blank">https://coderlmn.github.io/frontEndCourse/unmaintainable.html</a></p></blockquote><hr><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>让自己稳拿铁饭碗 ;-)</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><p><strong>-- Roedy Green</strong><br><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>（老码农翻译，略有删节）</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><br> &nbsp;</p><hr><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>简介</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><p><em>永远不要（把自己遇到的问题）归因于（他人的）恶意，这恰恰说明了（你自己的）无能。&nbsp;</em>-- 拿破仑</p></blockquote><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>为了造福大众，在 Java 编程领域创造就业机会，兄弟我在此传授大师们的秘籍。这些大师写的代码极其难以维护，后继者就是想对它做最简单的修改都需要花上数年时间。而且，如果你能对照秘籍潜心修炼，你甚至可以给自己弄个铁饭碗，因为除了你之外，没人能维护你写的代码。再而且，如果你能练就秘籍中的<strong>全部</strong>招式，那么连你自己都无法维护你的代码了！</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你不想练功过度走火入魔吧。那就不要让你的代码<strong>一眼看去</strong>就完全无法维护，只要它<strong>实质上是</strong>那样就行了。否则，你的代码就有被重写或重构的风险！</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>总体原则</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><p><em>Quidquid latine dictum sit, altum sonatur.</em><br> (随便用拉丁文写点啥都会显得高大上。)</p></blockquote><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>想挫败维护代码的程序员，你必须先明白他的思维方式。他接手了你的庞大程序，没有时间把它全部读一遍，更别说理解它了。他无非是想快速找到修改代码的位置、改代码、编译，然后就能交差，并希望他的修改不会出现意外的副作用。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>他查看你的代码不过是管中窥豹，一次只能看到一小段而已。你要确保他永远看不到全貌。要尽量和让他难以找到他想找的代码。但更重要的是，要让他不能有把握<strong>忽略</strong>任何东西。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>程序员都被编程惯例洗脑了，还为此自鸣得意。每一次你处心积虑地违背编程惯例，都会迫使他必须用放大镜去仔细阅读你的每一行代码。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你可能会觉得每个语言特性都可以用来让代码难以维护，其实不然。你必须精心地误用它们才行。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>命名</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><p><em>"当我使用一个单词的时候" Humpty Dumpty 曾经用一种轻蔑的口气说, "它就是我想表达的意思，不多也不少。「</em><br> - Lewis Carroll -- 《爱丽丝魔镜之旅》， 第 6 章</p></blockquote><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>编写无法维护代码的技巧的重中之重是变量和方法命名的艺术。如何命名是和编译器无关的。这就让你有巨大的自由度去利用它们迷惑维护代码的程序员。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4>妙用&nbsp;宝宝起名大全</h4><p>买本宝宝起名大全，你就永远不缺变量名了。比如&nbsp;<span style="color:#000099"><span>Fred</span></span>&nbsp;就是个好名字，而且键盘输入它也省事。如果你就想找一些容易输入的变量名，可以试试&nbsp;<span style="color:#000099"><span>adsf</span></span>&nbsp;或者&nbsp;<span style="color:#000099"><span>aoeu</span></span>之类。</p><h4>单字母变量名</h4><p>如果你给变量起名为 a,b,c，用简单的文本编辑器就没法搜索它们的引用。而且，没人能猜到它们的含义。</p><h4>创造性的拼写错误</h4><p>如果你必须使用描述性的变量和函数名，那就把它们都拼错。还可以把某些函数和变量名拼错，再把其他的拼对 (例如 SetPintleOpening 和 SetPintalClosing) ，我们就能有效地将 grep 或 IDE 搜索技术玩弄于股掌之上。这招超级管用。还可以混淆不同语言（比如<em>colour</em>&nbsp;-- 英国英语，和&nbsp;<em>color</em>&nbsp;-- 美国英语)。</p><h4>抽象</h4><p>在命名函数和变量的时候，充分利用抽象单词，例如&nbsp;<em>it</em>,&nbsp;<em>everything</em>,&nbsp;<em>data</em>,&nbsp;<em>handle</em>,&nbsp;<em>stuff</em>,&nbsp;<em>do</em>,&nbsp;<em>routine</em>,&nbsp;<em>perform</em>&nbsp;和数字，例如 e.g.&nbsp;<span style="color:#000099"><span>routineX48</span></span>,&nbsp;<span style="color:#000099"><span>PerformDataFunction</span></span>,&nbsp;<span style="color:#000099"><span>DoIt</span></span>,&nbsp;<span style="color:#000099"><span>HandleStuff</span></span>&nbsp;还有&nbsp;<span style="color:#000099"><span>do_args_method</span></span>。</p><h4>首字母大写的缩写</h4><p>用首字母大写缩写（比如 GNU 代表 GNU's Not Unix) 使代码简洁难懂。真正的汉子 (无论男女) 从来不说明这种缩写的含义，他们生下来就懂。</p><h4>辞典大轮换</h4><p>为了打破沉闷的编程气氛，你可以用一本辞典来查找尽量多的同义词。例如&nbsp;<em>display</em>,&nbsp;<em>show</em>,&nbsp;<em>present</em>。在注释里含糊其辞地暗示这些命名之间有细微的差别，其实根本没有。不过，如果有两个命名相似的函数真的有重大差别，那倒是一定要确保它们用相同的单词来命名 (例如，对于 "写入文件", "在纸上书写" 和 "屏幕显示" 都用&nbsp;<em>print</em>&nbsp;来命名)。 在任何情况下都不要屈服于编写明确的项目词汇表这种无理要求。你可以辩解说，这种要求是一种不专业的行为，它违反了结构化设计的<em>信息隐藏原则</em>。</p><h4>首字母大写</h4><p>随机地把单词中间某个音节的首字母大写。例如&nbsp;<span style="color:#000099"><span>ComputeReSult()</span></span>。</p><h4>重用命名</h4><p>在语言规则允许的地方，尽量把类、构造器、方法、成员变量、参数和局部变量都命名成一样。更高级的技巧是在{}块中重用局部变量。这样做的目的是迫使维护代码的程序员认真检查每个示例的范围。特别是在 Java 代码中，可以把普通方法伪装成构造器。</p><h4>使用非英语字母</h4><p>在命名中偷偷使用不易察觉的非英语字母，例如看上去没啥不对是吧？嘿嘿嘿...这里的第二个 ínt 的&nbsp;<strong>í</strong>&nbsp;实际上是东北欧字母，并不是英语中的 i 。在简单的文本编辑器里，想看出这一点点区别几乎是不可能的。</p><h4>巧妙利用编译器对于命名长度的限制</h4><p>如果编译器只区分命名的前几位，比如前 8 位，那么就把后面的字母写得不一样。比如，其实是同一个变量，有时候写成&nbsp;<em>var_unit_update()</em>&nbsp;，有时候又写成&nbsp;<em>var_unit_setup()</em>，看起来是两个不同的函数调用。而在编译的时候，它们其实是同一个变量&nbsp;<em>var_unit</em>。</p><h4>下划线，一位真正的朋友</h4><p>可以拿 _ 和 __ 作为标示符。</p><h4>混合多语言</h4><p>随机地混用两种语言（人类语言或计算机语言都行）。如果老板要求使用他指定的语言，你就告诉他你用自己的语言更有利于组织你的思路，万一这招不管用，就去控诉这是语言歧视，并威胁起诉老板要求巨额精神损失赔偿。</p><h4>扩展 ASCII 字符</h4><p>扩展 ASCII 字符用于变量命名是完全合法的，包括 ß, Ð, 和 ñ 等。在简单的文本编辑器里，除了拷贝/粘贴，基本上没法输入。</p><h4>其他语言的命名</h4><p>使用外语字典作为变量名的来源。例如，可以用德语单词&nbsp;<em>punkt</em>&nbsp;代替&nbsp;<em>point</em>。除非维护代码的程序员也像你一样熟练掌握了德语. 不然他就只能尽情地在代码中享受异域风情了。</p><h4>数学命名</h4><p>用数学操作符的单词来命名变量。例如：</p><p>openParen<span>&nbsp;</span><strong>=</strong><span>&nbsp;</span>(slash<span>&nbsp;</span><strong>+</strong><span>&nbsp;</span>asterix)<span>&nbsp;</span><strong>/</strong><span>&nbsp;</span>equals;<br> (左圆括号 = (斜杠 + 星号)/等号;)</p><h4>令人眩晕的命名</h4><p>用带有完全不相关的感情色彩的单词来命名变量。例如：这一招可以让阅读代码的人陷入迷惑之中，因为他们在试图想清楚这些命名的逻辑时，会不自觉地联系到不同的感情场景里而无法自拔。</p><p>marypoppins<span>&nbsp;</span><strong>=</strong><span>&nbsp;</span>(superman<span>&nbsp;</span><strong>+</strong><span>&nbsp;</span>starship)<span>&nbsp;</span><strong>/</strong><span>&nbsp;</span>god;<br> (欢乐满人间 = (超人 + 星河战队)/上帝;)</p><h4>何时使用 i</h4><p>永远不要把&nbsp;<span style="color:#000099"><span>i</span></span>&nbsp;用作最内层的循环变量。 用什么命名都行，就是别用<span style="color:#000099"><span>i</span></span>。把&nbsp;<span style="color:#000099"><span>i</span></span>&nbsp;用在其他地方就随便了，用作非整数变量尤其好。</p><h4>惯例 -- 明修栈道，暗度陈仓</h4><p>忽视&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fjava.sun.com%2Fdocs%2Fcodeconv%2F" target="_blank">Java 编码惯例</a>，Sun 就是这样做的。幸运的是，你违反了它编译器也不会打小报告。这一招的目的是搞出一些在某些特殊情况下有细微差别的名字来。如果你被强迫遵循驼峰法命名，你还是可以在某些模棱两可的情况下颠覆它。例如，<em>input<strong>F</strong>ile<strong>n</strong>ame</em>&nbsp;和&nbsp;<em>input<strong>f</strong>ile<strong>N</strong>ame</em>&nbsp;两个命名都可以合法使用。在此基础上自己发明一套复杂到变态的命名惯例，然后就可以痛扁其他人，说他们违反了惯例。</p><h4>小写的 l 看上去很像数字 1</h4><p>用小写字母 l 标识 long 常数。例如 10l 更容易被误认为是 101 而不是 10L 。 禁用所有能让人准确区分 uvw wW gq9 2z 5s il17|!j oO08 `'" ;,. m nn rn {[()]} 的字体。要做个有创造力的人。</p><h4>把全局命名重用为私有</h4><p>在 A 模块里声明一个全局数组，然后在 B 模块的头文件里在声明一个同名的私有数组，这样看起来你在 B 模块里引用的是那个全局数组，其实却不是。不要在注释里提到这个重复的情况。</p><h4>误导性的命名</h4><p>让每个方法都和它的名字蕴含的功能有一些差异。例如，一个叫&nbsp;<span style="color:#000099"><span>isValid(x)</span></span>的方法在判断完参数 x 的合法性之后，还顺带着把它转换成二进制并保存到数据库里。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>伪装</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><p><em>当一个 bug 需要越长的时间才会暴露，它就越难被发现。</em><br> - Roedy Green（本文作者）</p></blockquote><p><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>编写无法维护代码的另一大秘诀就是伪装的艺术，即隐藏它或者让它看起来像其他东西。很多招式有赖于这样一个事实：编译器比肉眼或文本编辑器更有分辨能力。下面是一些伪装的最佳招式。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4>把代码伪装成注释，反之亦然</h4><p>下面包括了一些被注释掉的代码，但是一眼看去却像是正常代码。 如果不是用绿色标出来，你能注意到这三行代码被注释掉了么？</p><pre><code>for(j=0; j&lt;array_len; j+ =8)
    {
    total += array[j+0 ];
    total += array[j+1 ];
    total += array[j+2 ]; /* Main body of
    total += array[j+3]; * loop is unrolled
    total += array[j+4]; * for greater speed.
    total += array[j+5]; */
    total += array[j+6 ];
    total += array[j+7 ];
    }</code></pre><h4>用连接符隐藏变量</h4><p>对于下面的定义</p><p>#define local_var xy_z</p><p>可以把 "xy_z" 打散到两行里：</p><p>#define local_var xy\<br> _z // local_var OK</p><p>这样全局搜索 xy_z 的操作在这个文件里就一无所获了。 对于 C 预处理器来说，第一行最后的 "\" 表示继续拼接下一行的内容。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>文档</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><em>任何傻瓜都能说真话，而要把谎编圆则需要相当的智慧。</em><br> - Samuel Butler (1835 - 1902)
</blockquote><p style="text-align:start">&nbsp;</p><blockquote><em>不正确的文档往往比没有文档还糟糕。</em><br> - Bertrand Meyer
</blockquote><p><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>既然计算机是忽略注释和文档的，你就可以在里边堂而皇之地编织弥天大谎，让可怜的维护代码的程序员彻底迷失。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4>在注释中撒谎</h4><p>实际上你不需要主动地撒谎，只要没有及时保持注释和代码更新的一致性就可以了。</p><h4>只记录显而易见的东西</h4><p>往代码里掺进去类似于&nbsp;<span style="color:green">/* 给 i 加 1 */</span>&nbsp;这样的注释，但是永远不要记录包或者方法的整体设计这样的干货。 &nbsp;</p><h4>记录 How 而不是 Why</h4><p>只解释一个程序功能的细节，而不是它要完成的任务是什么。这样的话，如果出现了一个 bug，修复者就搞不清这里的代码应有的功能。</p><h4>该写的别写</h4><p>比如你在开发一套航班预定系统，那就要精心设计，让它在增加另一个航空公司的时候至少有 25 处代码需要修改。永远不要在文档里说明要修改的位置。后来的开发人员要想修改你的代码门都没有，除非他们能把每一行代码都读懂。</p><h4>计量单位</h4><p>永远不要在文档中说明任何变量、输入、输出或参数的计量单位，如英尺、米、加仑等。计量单位对数豆子不是太重要，但在工程领域就相当重要了。同理，永远不要说明任何转换常量的计量单位，或者是它的取值如何获得。要想让代码更乱的话，你还可以在注释里写上错误的计量单位，这是赤裸裸的欺骗，但是非常有效。如果你想做一个恶贯满盈的人，不妨自己发明一套计量单位，用自己或某个小人物的名字命名这套计量单位，但不要给出定义。万一有人挑刺儿，你就告诉他们，你这么做是为了把浮点数运算凑成整数运算而进行的转换。 &nbsp;</p><h4>坑</h4><p>永远不要记录代码中的坑。如果你怀疑某个类里可能有 bug，天知地知你知就好。如果你想到了重构或重写代码的思路，看在老天爷的份上，千万别写出来。切记电影《小鹿斑比》里那句台词&nbsp;<em>"如果你不能说好听的话，那就什么也不要说。"</em>。万一这段代码的原作者看到你的注释怎么办？万一老板看到了怎么办？万一客户看到了怎么办？搞不好最后你自己被解雇了。一句」这里需要修改「的匿名注释就好多了，尤其是当看不清这句注释指的是哪里需要修改的情况下。切记难得糊涂四个字，这样大家都不会感觉受到了批评。 &nbsp;</p><h4>说明变量</h4><p><strong>永远不要</strong>&nbsp;对变量声明加注释。有关变量使用的方式、边界值、合法值、小数点后的位数、计量单位、显示格式、数据录入规则等等，后继者完全可以自己从程序代码中去理解和整理嘛。如果老板强迫你写注释，就把方法体代码混进去，但绝对不要对变量声明写注释，即使是临时变量！</p><h4>在注释里挑拨离间</h4><p>为了阻挠任何雇佣外部维护承包商的倾向，可以在代码中散布针对其他同行软件公司的攻击和抹黑，特别是可能接替你工作的其中任何一家。例如：</p><p><span style="color:green">/* 优化后的内层循环<br> 这套技巧对于 SSI 软件服务公司的那帮蠢材来说太高深了，他们只会<br> 用 &lt;math.h&gt; 里的笨例程，消耗 50 倍的内存和处理时间。<br> */</span><br> class&nbsp;<strong>clever_SSInc</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;{<br><strong>&nbsp;&nbsp;&nbsp;&nbsp;..</strong>&nbsp;<strong>.</strong><br> &nbsp;&nbsp;&nbsp;&nbsp;}</p><p><span>可能的话，除了注释之外，这些攻击抹黑的内容也要掺到代码里的重要部分，这样如果管理层想清理掉这些攻击性的言论然后发给外部承包商去维护，就会破坏代码结构。</span></p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>程序设计</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><em>编写无法维护代码的基本规则就是：在尽可能多的地方，以尽可能多的方式表述每一个事实。</em><br> - Roedy Green
</blockquote><p style="text-align:start">编写可维护代码的关键因素是只在一个地方表述应用里的一个事实。如果你的想法变了，你也只在一个地方修改，这样就能保证整个程序正常工作。所以，编写无法维护代码的关键因素就是反复地表述同一个事实，在尽可能多的地方，以尽可能多的方式进行。令人高兴的是，像 Java 这样的语言让编写这种无法维护代码变得非常容易。例如，改变一个被引用很多的变量的类型几乎是不可能的，因为所有造型和转换功能都会出错，而且关联的临时变量的类型也不合适了。而且，如果变量值要在屏幕上显示，那么所有相关的显示和数据录入代码都必须一一找到并手工进行修改。类似的还有很多，比如由 C 和 Java 组成的 Algol 语言系列，Abundance 甚至 Smalltalk 对于数组等结构的处理，都是大有可为的。</p><h4>Java 造型</h4><p>Java 的造型机制是上帝的礼物。你可以问心无愧地使用它，因为 Java 语言本身就需要它。每次你从一个 Collection 里获取一个对象，你都必须把它造型为原始类型。这样这个变量的类型就必须在无数地方表述。如果后来类型变了，所有的造型都要修改才能匹配。如果倒霉的维护代码的程序员没有找全（或者修改太多），编译器能不能检测到也不好说。类似的，如果变量类型从<span style="color:#000099"><span>short</span></span>&nbsp;变成&nbsp;<span style="color:#000099"><span>int</span></span>，所有匹配的造型也都要从<span style="color:#000099"><span>(short)</span></span>&nbsp;改成&nbsp;<span style="color:#000099"><span>(int)</span></span>。</p><h4>利用 Java 的冗余</h4><p>Java 要求你给每个变量的类型写两次表述。 Java 程序员已经习惯了这种冗余，他们不会注意到你的两次表述有细微的差别，例如</p><p>Bubbleg<em>u</em>m<span>&nbsp;</span><strong>b</strong><span>&nbsp;</span><strong>=</strong><span>&nbsp;</span>new Bubbleg<em>o</em>m();</p><p>不幸的是 ++ 操作符的盛行让下面这种伪冗余代码得手的难度变大了：</p><p>swim<em>m</em>er<span>&nbsp;</span><strong>=</strong><span>&nbsp;</span>swim<em>n</em>er<span>&nbsp;</span><strong>+</strong><span>&nbsp;</span>1;</p><h4>永远不做校验</h4><p>永远不要对输入数据做任何的正确性或差异性检查。这样能表现你对公司设备的绝对信任，以及你是一位信任所有项目伙伴和系统管理员的团队合作者。总是返回合理的值，即使数据输入有问题或者错误。 &nbsp;</p><h4>有礼貌，无断言</h4><p>避免使用 assert() 机制，因为它可能把三天的 debug 盛宴变成 10 分钟的快餐。</p><h4>避免封装</h4><p>为了提高效率，不要使用封装。方法的调用者需要所有能得到的外部信息，以便了解方法的内部是如何工作的。 &nbsp;</p><h4>复制粘贴修改</h4><p>以效率的名义，使用，复制+粘贴+修改。这样比写成小型可复用模块效率高得多。在用代码行数衡量你的进度的小作坊里，这招尤其管用。</p><h4>使用静态数组</h4><p>如果一个库里的模块需要一个数组来存放图片，就定义一个静态数组。没人会有比 512 X 512 更大的图片，所以固定大小的数组就可以了。为了最佳精度，就把它定义成 double 类型的数组。 &nbsp;</p><h4>傻瓜接口</h4><p>编写一个名为 "WrittenByMe" 之类的空接口，然后让你的所有类都实现它。然后给所有你用到的 Java 内置类编写包装类。这里的思想是确保你程序里的每个对象都实现这个接口。最后，编写所有的方法，让它们的参数和返回类型都是这个 WrittenByMe。这样就几乎不可能搞清楚某个方法的功能是什么，并且所有类型都需要好玩的造型方法。更出格的玩法是，让每个团队成员编写它们自己的接口 (例如 WrittenByJoe)，程序员用到的任何类都要实现他自己的接口。这样你就可以在大量无意义接口中随便找一个来引用对象了。</p><h4>巨型监听器</h4><p>永远不要为每个组件创建分开的监听器。对所有按钮总是用同一个监听器，只要用大量的 if...else 来判断是哪一个按钮被点击就行了。 &nbsp;</p><h4>好事成堆 TM</h4><p>狂野地使用封装和 OO 思想。例如，这段很可能看起来不怎么好笑。别担心，只是时候未到而已。</p><p>myPanel<strong>.</strong>add( getMyButton<strong>(</strong><strong>)</strong>&nbsp;);<br> private JButton&nbsp;<strong>getMyButton</strong>()</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;return myButton;<br> &nbsp;&nbsp;&nbsp;&nbsp;}</p><h4>友好的朋友</h4><p>在 C++ 里尽量多使用 friend 声明。再把创建类的指针传递给已创建类。现在你不用浪费时间去考虑接口了。另外，你应该用上关键字<em>private</em>&nbsp;和&nbsp;<em>protected</em>&nbsp;来表明你的类封装得很好。</p><h4>使用三维数组</h4><p>大量使用它们。用扭曲的方式在数组之间移动数据，比如，用 arrayA 里的行去填充 arrayB 的列。这么做的时候，不管三七二十一再加上 1 的偏移值，这样很灵。让维护代码的程序员抓狂去吧。 &nbsp;</p><h4>混合与匹配</h4><p>存取方法和公共变量神马的都要给他用上。这样的话，你无需调用存取器的开销就可以修改一个对象的变量，还能宣称这个类是个"Java Bean"。对于那些试图添加日志函数来找出改变值的源头的维护代码的程序员，用这一招来迷惑他尤其有效。 &nbsp;</p><h4>没有秘密!</h4><p>把每个方法和变量都声明为 public。毕竟某个人某天可能会需要用到它。一旦方法被声明为 public 了，就很难缩回去。对不？这样任何它覆盖到的代码都很难修改了。它还有个令人愉快的副作用，就是让你看不清类的作用是什么。如果老板质问你是不是疯了，你就告诉他你遵循的是经典的透明接口原则。</p><h4>全堆一块</h4><p>把你所有的没用的和过时的方法和变量都留在代码里。毕竟说起来，既然你在 1976 年用过一次，谁知道你啥时候会需要再用到呢？当然程序是改了，但它也可能会改回来嘛，你"不想要重新发明轮子"（领导们都会喜欢这样的口气）。如果你还原封不动地留着这些方法和变量的注释，而且注释写得又高深莫测，甭管维护代码的是谁，恐怕都不敢对它轻举妄动。</p><h4>就是 Final</h4><p>把你所有的叶子类都声明为 final。毕竟说起来，你在项目里的活儿都干完了，显然不会有其他人会通过扩展你的类来改进你的代码。这种情况甚至可能有安全漏洞。 java.lang.String 被定义成 final 也许就是这个原因吧？如果项目组其他程序员有意见，告诉他们这样做能够提高运行速度。</p><h4>避免布局</h4><p>永远不要用到布局。当维护代码的程序员想增加一个字段，他必须手工调整屏幕上显示所有内容的绝对座标值。如果老板强迫你使用布局，那就写一个巨型的 GridBagLayout 并在里面用绝对座标进行硬编码。</p><h4>全局变量，怎么强调都不过分</h4><p>如果上帝不愿意我们使用全局变量，他就不会发明出这个东西。不要让上帝失望，尽量多使用全局变量。每个函数最起码都要使用和设置其中的两个，即使没有理由也要这么做。毕竟，任何优秀的维护代码的程序员都会很快搞清楚这是一种侦探工作测试，有利于让他们从笨蛋中脱颖而出。 &nbsp;</p><h4>再一次说说全局变量</h4><p>全局变量让你可以省去在函数里描述参数的麻烦。充分利用这一点。在全局变量中选那么几个来表示对其他全局变量进行操作的类型。</p><h4>局部变量</h4><p>永远不要用局部变量。在你感觉想要用的时候，把它改成一个实例或者静态变量，并无私地和其他方法分享它。这样做的好处是，你以后在其他方法里写类似声明的时候会节省时间。C++程序员可以百尺竿头更进一步，把所有变量都弄成全局的。</p><h4>配置文件</h4><p>配置文件通常是以，关键字 = 值，的形式出现。在加载时这些值被放入 Java 变量中。最明显的迷惑技术就是把有细微差别的名字用于关键字和 Java 变量.甚至可以在配置文件里定义运行时根本不会改变的常量。参数文件变量和简单变量比，维护它的代码量起码是后者的 5 倍。</p><h4>子类</h4><p>对于编写无法维护代码的任务来说，面向对象编程的思想简直是天赐之宝。如果你有一个类，里边有 10 个属性（成员/方法），可以考虑写一个基类，里面只有一个属性，然后产生 9 层的子类，每层增加一个属性。等你访问到最终的子类时，你才能得到全部 10 个属性。如果可能，把每个类的声明都放在不同的文件里。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>编码迷局</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><h4>迷惑 C</h4><p>从互联网上的各种混乱 C 语言竞赛中学习，追随大师们的脚步。</p><h4>追求极致</h4><p>总是追求用最迷惑的方式来做普通的任务。例如，要用数组来把整数转换为相应的字符串，可以这么做：</p><p>char *p;<br> switch (n)<br> {<br> case 1:<br> &nbsp;&nbsp;&nbsp;&nbsp;p = "one";<br> &nbsp;&nbsp;&nbsp;&nbsp;if (0)<br> case 2:<br> &nbsp;&nbsp;&nbsp;&nbsp;p = "two";<br> &nbsp;&nbsp;&nbsp;&nbsp;if (0)<br> case 3:<br> &nbsp;&nbsp;&nbsp;&nbsp;p = "three";<br> &nbsp;&nbsp;&nbsp;&nbsp;printf("%s", p);<br> &nbsp;&nbsp;&nbsp;&nbsp;break;<br> }</p><h4>一致性的小淘气</h4><p>当你需要一个字符常量的时候，可以用多种不同格式： ' ', 32, 0x20, 040。在 C 或 Java 里 10 和 010 是不同的数（0 开头的表示 16 进制），你也可以充分利用这个特性。</p><h4>造型</h4><p>把所有数据都以 void * 形式传递，然后再造型为合适的结构。不用结构而是通过位移字节数来造型也很好玩。</p><h4>嵌套 Switch</h4><p>Switch 里边还有 Switch，这种嵌套方式是人类大脑难以破解的。 &nbsp;</p><h4>利用隐式转化</h4><p>牢记编程语言中所有的隐式转化细节。充分利用它们。数组的索引要用浮点变量，循环计数器用字符，对数字执行字符串函数调用。不管怎么说，所有这些操作都是合法的，它们无非是让源代码更简洁而已。任何尝试理解它们的维护者都会对你感激不尽，因为他们必须阅读和学习整个关于隐式数据类型转化的章节，而这个章节很可能是他们来维护你的代码之前完全忽略了的。</p><h4>分号!</h4><p>在所有语法允许的地方都加上分号，例如：</p><p>if(a);<br> else;</p><p>&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;<strong>d</strong>;<br> &nbsp;&nbsp;&nbsp;&nbsp;d&nbsp;<strong>=</strong>&nbsp;c;<br> &nbsp;&nbsp;&nbsp;&nbsp;}<br> &nbsp;&nbsp;&nbsp;&nbsp;;</p><h4>使用八进制数</h4><p>把八进制数混到十进制数列表里，就像这样：</p><p>array&nbsp;<strong>=</strong>&nbsp;new int&nbsp;<strong>[</strong><strong>]</strong></p><p>&nbsp;&nbsp;&nbsp;&nbsp;{<br> &nbsp;&nbsp;&nbsp;&nbsp;111<strong>,</strong><br> &nbsp;&nbsp;&nbsp;&nbsp;120<strong>,</strong><br><span style="color:red">&nbsp;&nbsp;&nbsp;&nbsp;013</span><strong>,</strong><br> &nbsp;&nbsp;&nbsp;&nbsp;121<strong>,</strong><br> &nbsp;&nbsp;&nbsp;&nbsp;};</p><h4>嵌套</h4><p>尽可能深地嵌套。优秀的程序员能在一行代码里写 10 层 ()，在一个方法里写 20 层{}。 &nbsp;</p><h4>C 数组</h4><p>C 编译器会把&nbsp;<span style="color:#000099"><span>myArray[i]</span></span>&nbsp;转换成&nbsp;<span style="color:#000099"><span>*(myArray + i)</span></span>，它等同于&nbsp;<span style="color:#000099"><span>*(i + myArray)</span></span>&nbsp;也等同于&nbsp;<span style="color:#000099"><span>i[myArray]</span></span>。 高手都知道怎么用好这个招。可以用下面的函数来产生索引，这样就把代码搞乱了：</p><p><span style="color:#000099"><span>int myfunc(int q, int p) { return p%q; }<br> ...<br> myfunc(6291, 8)[Array];</span></span></p><p>遗憾的是，这一招只能在本地 C 类里用，Java 还不行。</p><h4>放长线钓大鱼</h4><p>一行代码里堆的东西越多越好。这样可以省下临时变量的开销，去掉换行和空格还可以缩短源文件大小。记住，要去掉运算符两边的空格。优秀的程序员总是能突破某些编辑器对于 255 个字符行宽的限制。</p><h4>异常</h4><p>我这里要向你传授一个编程中鲜为人知的秘诀。异常是个讨厌的东西。良好的代码永远不会出错，所以异常实际上是不必要的。不要把时间浪费在这上面。子类异常是给那些知道自己代码会出错的低能儿用的。在整个应用里，你只用在 main() 里放一个 try/catch，里边直接调用 System.exit() 就行了。在每个方法头要贴上标准的抛出集合定义，到底会不会抛出异常你就不用管了。 &nbsp;</p><h4>使用异常的时机</h4><p>在非异常条件下才要使用异常。比如终止循环就可以用&nbsp;<span style="color:#000099"><span>ArrayIndexOutOfBoundsException</span></span>。还可以从异常里的方法返回标准的结果。 &nbsp;</p><h4>狂热奔放地使用线程</h4><p>如题。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>测试</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><p><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>在程序里留些 bug，让后继的维护代码的程序员能做点有意思的事。精心设计的 bug 是无迹可寻的，而且谁也不知道它啥时候会冒出来。要做到这一点，最简单的办法的就是不要测试代码。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4>永不测试</h4><p>永远不要测试负责处理错误、当机或操作系故障的任何代码。反正这些代码永远也不会执行，只会拖累你的测试。还有，你怎么可能测试处理磁盘错误、文件读取错误、操作系统崩溃这些类型的事件呢？为啥你要用特别不稳定的计算机或者用测试脚手架来模拟这样的环境？现代化的硬件永远不会崩溃，谁还愿意写一些仅仅用于测试的代码？这一点也不好玩。如果用户抱怨，你就怪到操作系统或者硬件头上。他们永远不会知道真相的。</p><h4>永远不要做性能测试</h4><p>嘿，如果软件运行不够快，只要告诉客户买个更快的机器就行了。如果你真的做了性能测试，你可能会发现一个瓶颈，这会导致修改算法，然后导致整个产品要重新设计。谁想要这种结果？而且，在客户那边发现性能问题意味着你可以免费到外地旅游。你只要备好护照和最新照片就行了。</p><h4>永远不要写任何测试用例</h4><p>永远不要做代码覆盖率或路径覆盖率测试。自动化测试是给那些窝囊废用的。搞清楚哪些特性占到你的例程使用率的 90%，然后把 90% 的测试用在这些路径上。毕竟说起来，这种方法可能只测试到了大约你代码的 60%，这样你就节省了 40% 的测试工作。这能帮助你赶上项目后端的进度。等到有人发现所有这些漂亮的「市场特性」不能正常工作的时候，你早就跑路了。一些有名的大软件公司就是这样测试代码的，所以你也应该这样做。如果因为某种原因你还没走，那就接着看下一节。 &nbsp;</p><h4>测试是给懦夫用的</h4><p>勇敢的程序员会跳过这个步骤。太多程序员害怕他们的老板，害怕丢掉工作，害怕客户的投诉邮件，害怕遭到起诉。这种恐惧心理麻痹了行动，降低了生产率。有科学研究成果表明，取消测试阶段意味着经理有把握能提前确定交付时间，这对于规划流程显然是有利的。消除了恐惧心理，创新和实验之花就随之绽放。程序员的角色是生产代码，调试工作完全可以由技术支持和遗留代码维护组通力合作来进行。</p><p>如果我们对自己的编程能力有充分信心，那么测试就没有必要了。如果我们逻辑地看待这个问题，随便一个傻瓜都能认识到测试根本都不是为了解决技术问题，相反，它是一种感性的信心问题。针对这种缺乏信心的问题，更有效的解决办法就是完全取消测试，送我们的程序员去参加自信心培训课程。毕竟说起来，如果我们选择做测试，那么我们就要测试每个程序的变更，但其实我们只需要送程序员去一次建立自信的培训课就行了。很显然这么做的成本收益是相当可观的。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>编程语言的选择</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><p style="text-align:start"><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span>计算机语言正在逐步进化，变得更加傻瓜化。使用最新的语言是不人性的。尽可能坚持使用你会用的最老的语言，先考虑用穿孔纸带，不行就用汇编，再不行用 FORTRAN 或者 COBOL，再不行就用 C 还有 BASIC，实在不行再用 C++。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4>FØRTRAN</h4><p>用 FORTRAN 写所有的代码。如果老板问你为啥，你可以回答说有很多它非常有用的库，你用了可以节约时间。不过，用 FORTRAN 写出可维护代码的概率是 0，所以，要达到不可维护代码编程指南里的要求就容易多了。</p><h4>用 ASM</h4><p>把所有的通用工具函数都转成汇编程序。</p><h4>用 QBASIC</h4><p>所有重要的库函数都要用 QBASIC 写，然后再写个汇编的封包程序来处理 large 到 medium 的内存模型映射。</p><h4>内联汇编</h4><p>在你的代码里混杂一些内联的汇编程序，这样很好玩。这年头几乎没人懂汇编程序了。只要放几行汇编代码就能让维护代码的程序员望而却步。</p><h4>宏汇编调用 C</h4><p>如果你有个汇编模块被 C 调用，那就尽可能经常从汇编模块再去调用 C，即使只是出于微不足道的用途，另外要充分利用 goto, bcc 和其他炫目的汇编秘籍。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>与他人共事之道</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><h4>老板才是真行家</h4><p>如果你的老板认为他 20 年的 FORTRAN 编程经验对于现代软件开发具有很高的指导价值，你务必严格采纳他的所有建议。投桃报李，你的老板也会信任你。这会对你的职业发展有利。你还会从他那里学到很多搞乱程序代码的新方法。</p><h4>颠覆技术支持</h4><p>确保代码中到处是 bug 的有效方法是永远不要让维护代码的程序员知道它们。这需要颠覆技术支持工作。永远不接电话。使用自动语音答复「感谢拨打技术支持热线。需要人工服务请按 1，或在嘀声后留言。」，请求帮助的电子邮件必须忽略，不要给它分配服务追踪号。对任何问题的标准答复是「我估计你的账户被锁定了，有权限帮你恢复的人现在不在。」 &nbsp;</p><h4>沉默是金</h4><p>永远不要对下一个危机保持警觉。如果你预见到某个问题可能会在一个固定时间爆发，摧毁西半球的全部生命，不要公开讨论它。不要告诉朋友、同事或其他你认识的有本事的人。在任何情况下都不要发表任何可能暗示到这种新的威胁的内容。只发送一篇正常优先级的、语焉不详的备忘录给管理层，保护自己免遭秋后算账。如果可能的话，把这篇稀里糊涂的信息作为另外一个更紧急的业务问题的附件。这样就可以心安理得地休息了，你知道将来你被强制提前退休之后一段时间，他们又会求着你回来，并给你对数级增长的时薪！ &nbsp;</p><h4>每月一书俱乐部</h4><p>加入一个计算机每月一书俱乐部。选择那些看上去忙着写书不可能有时间真的去写代码的作者。去书店里找一些有很多图表但是没有代码例子的书。浏览一下这些书，从中学会一些迂腐拗口的术语，用它们就能唬住那些自以为是的维护代码的程序员。你的代码肯定会给他留下深刻印象。如果人们连你写的术语都理解不了，他们一定会认为你非常聪明，你的算法非常深奥。不要在你的算法说明里作任何朴素的类比。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>自立门户</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><p><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>你一直想写系统级的代码。现在机会来了。忽略标准库，&nbsp;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.roll-your-own.com%2F" target="_blank">编写你自己的标准</a><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span>，这将会是你简历中的一个亮点。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><h4>推出你自己的 BNF 范式</h4><p>总是用你自创的、独一无二的、无文档的 BNF 范式记录你的命令语法。永远不要提供一套带注解的例子（合法命令和非法命令之类）来解释你的语法体系。那样会显得完全缺乏学术严谨性。确保没有明显的方式来区分终结符和中间符号。永远不要用字体、颜色、大小写和其他任何视觉提示帮助读者分辨它们。在你的 BNF 范式用和命令语言本身完全一样的标点符号，这样读者就永远无法分清一段 (...), [...], {...} 或 "..." 到底是你在命令行里真正输入的，还是想提示在你的 BNF 范式里哪个语法元素是必需的、可重复的、或可选的。不管怎么样，如果他们太笨，搞不清你的 BNF 范式的变化，就没资格使用你的程序。 &nbsp;</p><h4>推出你自己的内存分配</h4><p>地球人儿都知道，调试动态存储是复杂和费时的。与其逐个类去确认它没有内存溢出，还不如自创一套存储分配机制呢。其实它无非是从一大片内存中 malloc 一块空间而已。用不着释放内存，让用户定期重启动系统，这样不就清除了堆么。重启之后系统需要追踪的就那么一点东西，比起解决所有的内存泄露简单得不知道到哪里去了！而且，只要用户记得定期重启系统，他们也永远不会遇到堆空间不足的问题。一旦系统被部署，你很难想象他们还能改变这个策略。</p><h2><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span><span>其他杂七杂八的招</span></span></span></span></span></span></span></span></span></span></span></span></span></span></h2><blockquote><p><em>如果你给某人一段程序，你会让他困惑一天；如果你教他们如何编程，你会让他困惑一辈子。&nbsp;</em>-- Anonymous</p></blockquote><h4>不要重编译</h4><p>让我们从一条可能是有史以来最友好的技巧开始：把代码编译成可执行文件。如果它能用，就在源代码里做一两个微小的改动 -- 每个模块都照此办理。<strong>但是不要费劲巴拉地再编译一次了。</strong>&nbsp;你可以留着等以后有空而且需要调试的时候再说。多年以后，等可怜的维护代码的程序员更改了代码之后发现出错了，他会有一种错觉，觉得这些肯定是他自己最近修改的。这样你就能让他毫无头绪地忙碌很长时间。</p><h4>挫败调试工具</h4><p>对于试图用行调试工具追踪来看懂你的代码的人，简单的一招就能让他狼狈不堪，那就是把每一行代码都写得很长。特别要把 then 语句，和 if 语句放在同一行里。他们无法设置断点。他们也无法分清在看的分支是哪个 if 里的。</p><h4>公制和美制</h4><p>在工程方面有两种编码方式。一种是把所有输入都转换为公制（米制）计量单位，然后在输出的时候自己换算回各种民用计量单位。另一种是从头到尾都保持各种计量单位混合在一起。总是选择第二种方式，这就是美国之道！ &nbsp;</p><h4>持续改进</h4><p>要持续不懈地改进。要常常对你的代码做出「改进」，并强迫用户经常升级 -- 毕竟没人愿意用一个过时的版本嘛。即便他们觉得他们对现有的程序满意了，想想看，如果他们看到你又「完善「了它，他们会多么开心啊！不要告诉任何人版本之间的差别，除非你被逼无奈 -- 毕竟，为什么要告诉他们本来永远也不会注意到的一些 bug 呢？</p><h4>「关于」</h4><p>「关于」一栏应该只包含程序名、程序员姓名和一份用法律用语写的版权声明。理想情况下，它还应该链接到几 MB 的代码，产生有趣的动画效果。但是，里边永远不要包含程序用途的描述、它的版本号、或最新代码修改日期、或获取更新的网站地址、或作者的 email 地址等。这样，所有的用户很快就会运行在不同的版本上，在安装 N+1 版之前就试图安装 N+2 版。</p><h4>变更</h4><p>在两个版本之间，你能做的变更自然是多多益善。你不会希望用户年复一年地面对同一套老的接口或用户界面，这样会很无聊。最后，如果你能在用户不注意的情况下做出这些变更，那就更好了 -- 这会让他们保持警惕，戒骄戒躁。</p><h4>无需技能</h4><p>写无法维护代码不需要多高的技能。喊破嗓子不如甩开膀子，不管三七二十一开始写代码就行了。记住，管理层还在按代码行数考核生产率，即使以后这些代码里的大部分都得删掉。</p><h4>只带一把锤子</h4><p>一招鲜吃遍天，轻装前进。如果你手头只有一把锤子，那么所有的问题都是钉子。</p><h4>规范体系</h4><p>有可能的话，忽略当前你的项目所用语言和环境中被普罗大众所接受的编程规范。比如，编写基于 MFC 的应用时，就坚持使用 STL 编码风格。</p><h4>翻转通常的 True False 惯例</h4><p>把常用的 true 和 false 的定义反过来用。这一招听起来平淡无奇，但是往往收获奇效。你可以先藏好下面的定义：</p><p>#define TRUE 0<br> #define FALSE 1</p><p>把这个定义深深地藏在代码中某个没人会再去看的文件里不易被发现的地方，然后让程序做下面这样的比较</p><p>if ( var == TRUE )</p><p>if ( var != FALSE )</p><p>某些人肯定会迫不及待地跳出来「修正」这种明显的冗余，并且在其他地方照着常规去使用变量 var：</p><p>if ( var )</p><p>还有一招是为&nbsp;<span style="color:#000099"><span>TRUE</span></span>&nbsp;和&nbsp;<span style="color:#000099"><span>FALSE</span></span>赋予相同的值，虽然大部分人可能会看穿这种骗局。给它们分别赋值 1 和 2 或者 -1 和 0 是让他们瞎忙乎的方式里更精巧的，而且这样做看起来也不失对他们的尊重。你在 Java 里也可以用这一招，定义一个叫&nbsp;<span style="color:#000099"><span>TRUE</span></span>&nbsp;的静态常量。在这种情况下，其他程序员更有可能怀疑你干的不是好事，因为 Java 里已经有了内建的标识符&nbsp;<span style="color:#000099"><span>true</span></span>。</p><h4>第三方库</h4><p>在你的项目里引入功能强大的第三方库，然后不要用它们。潜规则就是这样，虽然你对这些好的工具仍然一无所知，却还是可以在你简历的「其他工具」一节中写上这些没用过的库。</p><h4>不要用库</h4><p>假装不知道有些库已经直接在你的开发工具中引入了。如果你用 VC++编程，忽略 MFC 或 STL 的存在，手工编写所有字符串和数组的实现；这样有助于保持你的指针技术，并自动阻止任何扩展代码功能的企图。</p><h4>创建一套 Build 顺序</h4><p>把这套顺序规则做得非常晦涩，让维护者根本无法编译任何他的修改代码。秘密保留&nbsp;SmartJ&nbsp;，它会让&nbsp;<span style="color:#000099"><span>make</span></span>脚本形同废物。类似地，偷偷地定义一个&nbsp;<span style="color:#000099"><span>javac</span></span>&nbsp;类，让它和编译程序同名。说到大招，那就是编写和维护一个定制的小程序，在程序里找到需要编译的文件，然后通过直接调用&nbsp;<span style="color:#000099"><span>sun.tools.javac.Main</span></span>&nbsp;编译类来进行编译。</p><h4>Make 的更多玩法</h4><p>用一个 makefile-generated-batch-file 批处理文件从多个目录复制源文件，文件之间的覆盖规则在文档中是没有的。这样，无需任何炫酷的源代码控制系统，就能实现代码分支，并阻止你的后继者弄清哪个版本的 DoUsefulWork() 才是他需要修改的那个。</p><h4>搜集编码规范</h4><p>尽可能搜集所有关于编写可维护代码的建议，例如&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.squarebox.co.uk%2Fjavatips.html" target="_blank">SquareBox 的建议</a>&nbsp;，然后明目张胆地违反它们。</p><h4>规避公司的编码规则</h4><p>某些公司有严格的规定，不允许使用数字标识符，你必须使用预先命名的常量。要挫败这种规定背后的意图太容易了。比如，一位聪明的 C++ 程序员是这么写的：</p><p>#define K_ONE 1<br> #define K_TWO 2<br> #define K_THOUSAND 999</p><h4>编译器警告</h4><p>一定要保留一些编译器警告。在 make 里使用 「-」 前缀强制执行，忽视任何编译器报告的错误。这样，即使维护代码的程序员不小心在你的源代码里造成了一个语法错误，make 工具还是会重新把整个包 build 一遍，甚至可能会成功！而任何程序员要是手工编译你的代码，看到屏幕上冒出一堆其实无关紧要的警告，他们肯定会觉得是自己搞坏了代码。同样，他们一定会感谢你让他们有找错的机会。学有余力的同学可以做点手脚让编译器在打开编译错误诊断工具时就没法编译你的程序。当然了，编译器也许能做一些脚本边界检查，但是真正的程序员是不用这些特性的，所以你也不该用。既然你用自己的宝贵时间就能找到这些精巧的 bug，何必还多此一举让编译器来检查错误呢？</p><h4>把 bug 修复和升级混在一起</h4><p>永远不要推出什么「bug 修复"版本。一定要把 bug 修复和数据库结构变更、复杂的用户界面修改，还有管理界面重写等混在一起。那样的话，升级就变成一件非常困难的事情，人们会慢慢习惯 bug 的存在并开始称他们为特性。那些真心希望改变这些」特性「的人们就会有动力升级到新版本。这样从长期来说可以节省你的维护工作量，并从你的客户那里获得更多收入。</p><h4>在你的产品发布每个新版本的时候都改变文件结构</h4><p>没错，你的客户会要求向上兼容，那就去做吧。不过一定要确保向下是不兼容的。这样可以阻止客户从新版本回退，再配合一套合理的 bug 修复规则（见上一条），就可以确保每次新版本发布后，客户都会留在新版本。学有余力的话，还可以想办法让旧版本压根无法识别新版本产生的文件。那样的话，老版本系统不但无法读取新文件，甚至会否认这些文件是自己的应用系统产生的！温馨提示：PC 上的 Word 文字处理软件就典型地精于此道。</p><h4>抵消 Bug</h4><p>不用费劲去代码里找 bug 的根源。只要在更高级的例程里加入一些抵销它的代码就行了。这是一种很棒的智力测验，类似于玩 3D 棋，而且能让将来的代码维护者忙乎很长时间都想不明白问题到底出在哪里：是产生数据的低层例程，还是莫名其妙改了一堆东西的高层代码。这一招对天生需要多回合执行的编译器也很好用。你可以在较早的回合完全避免修复问题，让较晚的回合变得更加复杂。如果运气好，你永远都不用和编译器前端打交道。学有余力的话，在后端做点手脚，一旦前端产生的是正确的数据，就让后端报错。</p><h4>使用旋转锁</h4><p>不要用真正的同步原语，多种多样的旋转锁更好 -- 反复休眠然后测试一个 (non-volatile 的) 全局变量，直到它符合你的条件为止。相比系统对象，旋转锁使用简便」，通用「性强」，灵活「多变，实为居家旅行必备。</p><h4>随意安插 sync 代码</h4><p>把某些系统同步原语安插到一些用不着它们的地方。本人曾经在一段不可能会有第二个线程的代码中看到一个临界区（critical section）代码。本人当时就质问写这段代码的程序员，他居然理直气壮地说这么写是为了表明这段代码是很」关键「（也是 critical）的！</p><h4>优雅降级</h4><p>如果你的系统包含了一套 NT 设备驱动，就让应用程序负责给驱动分配 I/O 缓冲区，然后在任何交易过程中对内存中的驱动加锁，并在交易完成后释放或解锁。这样一旦应用非正常终止，I/O 缓存又没有被解锁，NT 服务器就会当机。但是在客户现场不太可能会有人知道怎么弄好设备驱动，所以他们就没有选择（只能请你去免费旅游了）。</p><h4>定制脚本语言</h4><p>在你的 C/S 应用里嵌入一个在运行时按字节编译的脚本命令语言。</p><h4>依赖于编译器的代码</h4><p>如果你发现在你的编译器或解释器里有个 bug，一定要确保这个 bug 的存在对于你的代码正常工作是至关重要的。毕竟你又不会使用其他的编译器，其他任何人也不允许！</p><h4>一个货真价实的例子</h4><p>下面是一位大师编写的真实例子。让我们来瞻仰一下他在这样短短几行 C 函数里展示的高超技巧。</p><pre><code>void* Realocate(void*buf, int os, int ns)
{
    void*temp;
    temp = malloc(os);
    memcpy((void*)temp, (void*)buf, os);
    free(buf);
    buf = malloc(ns);
    memset(buf, 0, ns);
    memcpy((void*)buf, (void*)temp, ns);
    return buf;
}</code></pre><ul><li>重新发明了标准库里已有的简单函数。</li><li><em>Realocate</em>&nbsp;这个单词拼写错误。所以说，永远不要低估创造性拼写的威力。</li><li>无缘无故地给输入缓冲区产生一个临时的副本。</li><li>无缘无故地造型。 memcpy() 里有 (void*)，这样即使我们的指针已经是 (void*) 了也要再造型一次。另外这样可以传递任何东西作为参数，加 10 分。</li><li>永远不必费力去释放临时内存空间。这样会导致缓慢的内存泄露，一开始看不出来，要程序运行一段时间才行。</li><li>把用不着的东西也从缓冲区里拷贝出来，以防万一。这样只会在 Unix 上产生 core dump，Windows 就不会。</li><li>很显然，os 和 ns 的含义分别是」old size" 和 "new size"。</li><li>给 buf 分配内存之后，memset 初始化它为 0。不要使用 calloc()，因为某些人会重写 ANSI 规范，这样将来保不齐 calloc() 往 buf 里填的就不是 0 了。（虽然我们复制过去的数据量和 buf 的大小是一样的，不需要初始化，不过这也无所谓啦）</li></ul><h4>如何修复 "unused variable" 错误</h4><p>如果你的编译器冒出了 "unused local variable" 警告，不要去掉那个变量。相反，要找个聪明的办法把它用起来。我最喜欢的方法是：<br><span style="color:#000099"><span>i = i;</span></span></p><h4>大小很关键</h4><p>差点忘了说了，函数是越大越好。跳转和 GOTO 语句越多越好。那样的话，想做任何修改都需要分析很多场景。这会让维护代码的程序员陷入千头万绪之中。如果函数真的体型庞大的话，对于维护代码的程序员就是哥斯拉怪兽了，它会在他搞清楚情况之前就残酷无情地将他们踩翻在地。</p><h4>一张图片顶 1000 句话，一个函数就是 1000 行</h4><p>把每个方法体写的尽可能的长 -- 最好是你写的任何方法或函数都没有少于 1000 行代码的，而且里边深度嵌套，这是必须的。</p><h4>少个文件</h4><p>一定要保证一个或多个关键文件是找不到的。利用 includes 里边再 includes 就能做到这一点。例如，在你的 main 模块里，你写上：</p><p>#include &lt;stdcode.h&gt;</p><p>Stdcode.h 是有的。但是在 stdcode.h 里，还有个引用：</p><p>#include "a:\\refcode.h"</p><p>然后，refcode.h 就没地方能找到了。</p><p><span>到处可写，无处可读</span></p><p>至少要把一个变量弄成这样：到处被设置，但是几乎没有哪里用到它。不幸的是，现代编译器通常会阻止你做相反的事：到处读，没处写。不过你在 C 或 C++ 里还是可以这样做的。</p><blockquote><p><em><strong>原始博文发布于：&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmindprod.com%2Funmain.html" target="_blank">Roedy Green's Mindproducts&nbsp;</a>。</strong></em></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 08:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269949/unmaintainable-new-defensive-programming</guid>
            <link>https://www.oschina.net/news/269949/unmaintainable-new-defensive-programming</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[美国 CISA 建议放弃 C/C++，消除内存安全漏洞]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美国网络安全与基础设施安全局 (CISA) 发布了一份名为「<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cisa.gov%2Fresources-tools%2Fresources%2Fcase-memory-safe-roadmaps" target="_blank">The Case for Memory Safe Roadmaps</a>」的文件，详细介绍了软件厂商应如何过渡到内存安全编程语言 (MSL)，以消除内存安全漏洞。</span></p><p><span style="color:#000000">CISA 认为，内存安全错误经常会造成重大损失，需要加以杜绝；因此敦促企业和技术领导者密切关注软件开发中的内存安全。而&nbsp;C 和 C++ 等编程语言就是内存不安全编程语言的典范；它们可能导致内存不安全代码，但仍然是当今使用最广泛的语言之一。</span></p><p><img height="339" src="https://oscimg.oschina.net/oscnet/up-5d0b5ed6634487780b08f8f39114dd5ed99.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">该指南文件由美国网络安全与基础设施安全局 (CISA)、国家安全局 (NSA)、联邦调查局 (FBI)，以及澳大利亚、加拿大、英国和新西兰的网络安全机构联合制定。旨在敦促每家软件厂商的高级管理人员通过优先考虑实施 MSL 的设计和开发实践来降低客户风险；同时敦促他们创建并发布内存安全路线图，以便客户了解所面临的内存安全风险。</span></p><blockquote><p><span style="color:#000000">「MSL 可以消除内存安全漏洞。因此，过渡到 MSL 可能会大大降低投资于旨在减少这些漏洞或将其影响降至最低的活动的必要性。此外，将不安全的代码库迁移到 MSL 的投资将以更安全的产品的形式带来长期回报--这也抵消了过渡到 MSL 的部分前期成本。」</span></p></blockquote><p><span style="color:#000000">文件指出，微软<span style="background-color:#ffffff">约 70% 的 CVE 是内存安全漏洞</span>（基于 2006-2018 年的 CVE），Mozilla 的 34 个关键/高危漏洞中有 32 个是内存安全漏洞。谷歌 Chromium 项目中所发现的漏洞，有约 70% 是内存安全漏洞；且 2021 年的零日漏洞中也有 67% 是内存安全漏洞。</span></p><p><span style="color:#000000">虽然一些组织为了减少&nbsp;<span style="background-color:#ffffff">C/C++</span> 内存不安全代码引入的风险，投入了大量资金用于开发人员培训。但 CISA 等机构认为，「虽然培训可以减少程序员可能引入的漏洞数量，但考虑到内存安全缺陷的普遍性，内存安全漏洞的出现几乎是不可避免的。」</span></p><p><span style="color:#000000">鉴于此，他们<span style="background-color:#ffffff">建议组织放弃 C/C++，转而使用 C#、Go、Java、Python、Rust 和 Swift&nbsp;等「内存安全语言」。</span></span></p><p><img height="355" src="https://oscimg.oschina.net/oscnet/up-e6e47911a81e83c6770f76378917ec074f9.png" width="300" referrerpolicy="no-referrer"></p><p><span style="color:#000000">详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cisa.gov%2Fsites%2Fdefault%2Ffiles%2F2023-12%2FThe-Case-for-Memory-Safe-Roadmaps-508c.pdf" target="_blank">查看完整文档</a>。</span></p><hr><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><a href="https://www.oschina.net/news/217425/nsa-memory-safe-programming-language" target="_blank">美国国家安全局建议从 C/C++ 切换到内存安全语言</a></li><li><a href="https://www.oschina.net/news/226780/c-plus-plus-bjarne-stroustrup-safety" target="news">C++ 之父：Rust 等内存安全语言的安全性并不优于 C++</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 07:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269933/cisa-the-case-for-memory-safe-roadmaps</guid>
            <link>https://www.oschina.net/news/269933/cisa-the-case-for-memory-safe-roadmaps</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Firefox 会被淘汰吗？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近期关于 Firefox 的一篇文章引起了<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D38531104" target="_blank">广泛讨论</a></u>。作者表示，Firefox 正处于危险边缘，可能很快就会被淘汰。</p><blockquote><img src="https://oscimg.oschina.net/oscnet/up-3d6519dad6718f830b4b0fc8ad29f4f8032.png" referrerpolicy="no-referrer"><p>来源 <em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.brycewray.com%2Fposts%2F2023%2F11%2Ffirefox-brink%2F" target="_blank">https://www.brycewray.com/posts/2023/11/firefox-brink/</a></u></em></p></blockquote><p>文章提到，根据美国政府网站的开发指南 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdesignsystem.digital.gov%2F" target="_blank">U.S. Web Design System</a>, USWDS)，<strong>如果 Firefox 的市场份额低于 2%</strong>（参考 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fanalytics.usa.gov" target="_blank">analytics.usa.gov</a> 的统计使用率），那么美国政府的网站可以不再兼容 Firefox。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1df9adfb989c674f23068f0710d9ed2993c.png" referrerpolicy="no-referrer"></p><p>过去 90 天，访问 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fanalytics.usa.gov" target="_blank">analytics.usa.gov</a> 的浏览器中 Chrome 占 49%，Safari 占 34.8%，Edge 8.5%，<strong>Firefox 只有 2.2 %</strong>——已经非常接近临界点。如果 Firefox 失去了美国政府网站的支持，这有可能在整个 Web 开发界产生涟漪效应。因为政府的决定会影响到无数企业，就像多米诺骨牌倒下一样，会有越来越多的网站跟随步伐不兼容 Firefox，导致 Firefox 处于淘汰边缘。</p><p><img src="https://oscimg.oschina.net/oscnet/up-dcc027785814f919e453f18776391477b5d.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4df67b9659f2a95d258721fbfed00bafe07.png" referrerpolicy="no-referrer"></p><p>有人可能会问；「政府网站不兼容 Firefox 又怎样？这只是针对美国政府的举措，并不会影响任何其他网站。」但作者认为：</p><ol><li><p>一旦 Firefox 在政府的访问者分析中跌破 2% 的阈值，USWDS 就会告诉政府网站开发者他们不必再支持 Firefox。</p></li><li><p>消息传出后，不仅前端开发社区，就连一些 Web 开发者所服务的企业 IT 部门也会迅速知晓。许多企业与政府有大量业务往来，因此，政府在 IT 方面的任何举措都会影响企业。</p></li><li><p>企业会将这一变化视为<strong>降低开发成本和缩短交付时间</strong>的机会，因为它提供了一个借口，可以从开发工作流程中移除一些测试（在极少数情况下还包括特定代码）。</p></li></ol><p>下图清晰展示了浏览器三巨头从 2009 到 2023 的市场份额变化情况，Firefox 在 2009 年 11 月达到了 31.82% 的峰值，此后便是持续下滑。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a1b0aacdd134ed153115b0354c1ba76e9d4.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 06:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269923/firefox-on-the-brink</guid>
            <link>https://www.oschina.net/news/269923/firefox-on-the-brink</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[防御性编程几大基本原则]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">当开发人员遇到意外的错误无法修复时，他们会「添加一些防御性代码」来使代码更安全，更容易找到问题所在。有时候，仅仅这样做就能解决问题。他们会加强数据验证——确保检查输入和输出字段以及返回值。审查并改进错误处理——也许在「不可能」的情况周围添加一些检查。增加一些有用的日志记录和诊断功能。换句话说，这些<strong>本应该从一开始就存在的代码</strong>。</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">防御性编程的整个目的是为了防范你意想不到的错误。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">——Steve McConnell，《代码大全》</p></blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">防御性编程的几个基本原则在 Steve McConnell 经典著作《代码大全》中有详细解释：</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>保护你的代码免受「外部」传入的无效数据影响</strong>，无论你认为「外部」是指什么地方。这里指来自外部系统、用户、文件或模块/组件之外的任何数据。建立「壁垒」、「安全区域」或「信任边界」——边界之外的一切都是危险的，边界之内的一切都是安全的。在壁垒代码中，验证所有输入数据：检查所有输入参数的正确类型、长度和取值范围。再次检查限制和范围。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">在检查完坏数据后，决定如何处理它。<strong>防御性编程并不意味着吞没错误或隐藏错误</strong>。它是关于在健壮性（如果遇到可处理的问题则继续运行）和正确性（永远不返回错误结果）之间做出权衡。选择一种处理坏数据的策略：立即返回错误并停止运行（快速失败），返回一个中立值，替换数据值等等。确保策略明确且一致。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>不要假设你代码之外的函数调用或方法调用会按照广告所述正常工作</strong>。确保你理解并测试了周围外部 API 和库的错误处理机制。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>使用断言来记录假设，并突出显示「不可能」的条件</strong>，至少在开发和测试阶段如此。这对于长期由不同人维护或高可靠性代码特别重要。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">巧妙地<strong>添加诊断代码、日志记录和跟踪功能</strong>，以帮助解释运行时发生了什么问题，尤其是当遇到问题时。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>标准化错误处理</strong>。决定如何处理「正常错误」或「预期错误」和警告，并始终保持一致。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start"><strong>只在需要时使用异常处理</strong>，并确保你对语言的异常处理机制了如指掌。将异常作为正常处理流程的一部分的程序会遭受经典意义上代码结构混乱的可读性和可维护性问题。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">Michael Nygard 在《发布！》中还提到了其他几个规则，比如永远不要无限期等待外部调用，尤其是远程调用。当出现问题时，无限期可能会很长时间。使用超时/重试逻辑以及他的断路器稳定模式来处理远程故障。</p><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">对于 C 和 C++等编程语言，防御性编程还包括使用安全函数调用来避免缓冲区溢出和常见编码错误。</p><blockquote><p style="color:#101828; margin-left:0; margin-right:0; text-align:start">原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fswreflections.blogspot.com%2F2012%2F03%2Fdefensive-programming-being-just-enough.html" target="_blank">https://swreflections.blogspot.com/2012/03/defensive-programming-being-just-enough.html</a></p></blockquote><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 06:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269921/defensive-programming</guid>
            <link>https://www.oschina.net/news/269921/defensive-programming</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[向量数据库领域又来一个很屌的项目，PostgresML]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#1f2328">PostgresML 是 PostgreSQL 的机器学习扩展，能让你使用 SQL 查询对文本和表格数据进行训练和推理。有了 PostgresML，你可以将机器学习模型无缝集成到 PostgreSQL 数据库中，并利用尖端算法的强大功能高效处理数据。</span></p><ul><li>执行自然语言处理任务，如情感分析、提问和回答、翻译、总结和文本生成</li><li>从 HuggingFace 模型 Hub 访问数千种最先进的语言模型，如 GPT-2、GPT-J 和 GPT-Neo</li><li>针对不同任务，在自己的文本数据上微调大型语言模型</li><li>将现有的 PostgreSQL 数据库用作向量数据库，从存储在数据库中的文本生成 <span style="background-color:#ffffff; color:#1f2328">embedding</span></li></ul><p><img height="1550" src="https://static.oschina.net/uploads/space/2023/1207/115401_hs4U_3820517.png" width="3300" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#1f2328">针对文本数据操作：</span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>翻译</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><em>SQL 查询</em></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span><span><span style="color:var(--color-prettylights-syntax-keyword)">SELECT</span></span><span><span style="color:var(--color-prettylights-syntax-constant)">pgml</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">transform</span></span>(
    <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>translation_en_to_fr<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
    inputs <span><span style="color:var(--color-prettylights-syntax-keyword)">=&gt;</span></span> ARRAY[
        <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>Welcome to the future!<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
        <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>Where have you been all this time?<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>
    ]
) <span><span style="color:var(--color-prettylights-syntax-keyword)">AS</span></span> french;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><div><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><em>结果</em></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div>&nbsp;</div></div><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span>                         french                                 
<span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">--</span></span>----------------------------------------------------------</span></span>

[
    {<span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>translation_text<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>: <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>Bienvenue à l'avenir!<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>},
    {<span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>translation_text<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>: <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>Où êtes-vous allé tout ce temps?<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>}
]</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><div><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>情感分析</strong> SQL 查询</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div>&nbsp;</div></div><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span><span><span style="color:var(--color-prettylights-syntax-keyword)">SELECT</span></span><span><span style="color:var(--color-prettylights-syntax-constant)">pgml</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">transform</span></span>(
    task   <span><span style="color:var(--color-prettylights-syntax-keyword)">=&gt;</span></span><span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>text-classification<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
    inputs <span><span style="color:var(--color-prettylights-syntax-keyword)">=&gt;</span></span> ARRAY[
        <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>I love how amazingly simple ML has become!<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>, 
        <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>I hate doing mundane and thankless tasks. ☹️<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>
    ]
) <span><span style="color:var(--color-prettylights-syntax-keyword)">AS</span></span> positivity;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><div><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><em>结果</em></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div>&nbsp;</div></div><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span>                    positivity
<span><span style="color:var(--color-prettylights-syntax-comment)"><span><span style="color:var(--color-prettylights-syntax-comment)">--</span></span>----------------------------------------------------</span></span>
[
    {<span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>label<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>: <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>POSITIVE<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>, <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>score<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>: <span><span style="color:var(--color-prettylights-syntax-constant)">0</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">9995759129524232</span></span>}, 
    {<span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>label<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>: <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>NEGATIVE<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>, <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">"</span></span>score<span><span style="color:var(--color-prettylights-syntax-string)">"</span></span></span></span>: <span><span style="color:var(--color-prettylights-syntax-constant)">0</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">9903519749641418</span></span>}
]</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div><p>针对表格数据操作：</p><ul><li><a href="https://postgresml.org/docs/training/algorithm_selection">47+ 种分类和回归算法</a></li><li><a href="https://postgresml.org/blog/postgresml-is-8x-faster-than-python-http-microservices">推理速度比基于 HTTP 的模型服务快 8 - 40 倍</a></li><li><a href="https://postgresml.org/blog/scaling-postgresml-to-one-million-requests-per-second">每秒数百万次事务</a></li><li><a href="https://github.com/postgresml/pgcat">横向可扩展性</a></li></ul><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><strong>训练分类模型</strong></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><em>训练</em></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span><span><span style="color:var(--color-prettylights-syntax-keyword)">SELECT</span></span><span><span style="color:var(--color-prettylights-syntax-keyword)">*</span></span><span><span style="color:var(--color-prettylights-syntax-keyword)">FROM</span></span><span><span style="color:var(--color-prettylights-syntax-constant)">pgml</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">train</span></span>(
    <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>Handwritten Digit Image Classifier<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
    algorithm <span><span style="color:var(--color-prettylights-syntax-keyword)">=&gt;</span></span><span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>xgboost<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
    <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>classification<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
    <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>pgml.digits<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>,
    <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>target<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>
);</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre><div><span><span><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span><em>推理</em></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></div><div>&nbsp;</div></div><div style="text-align:start"><pre><span><span><span><span><span><span><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span style="color:#1f2328"><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span><span style="color:var(--fgColor-default, var(--color-fg-default))"><span style="background-color:var(--bgColor-muted, var(--color-canvas-subtle))"><span><span><span style="color:var(--color-prettylights-syntax-keyword)">SELECT</span></span><span><span style="color:var(--color-prettylights-syntax-constant)">pgml</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">predict</span></span>(
    <span><span style="color:var(--color-prettylights-syntax-string)"><span><span style="color:var(--color-prettylights-syntax-string)">'</span></span>My Classification Project<span><span style="color:var(--color-prettylights-syntax-string)">'</span></span></span></span>, 
    ARRAY[<span><span style="color:var(--color-prettylights-syntax-constant)">0</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">1</span></span>, <span><span style="color:var(--color-prettylights-syntax-constant)">2</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">0</span></span>, <span><span style="color:var(--color-prettylights-syntax-constant)">5</span></span>.<span><span style="color:var(--color-prettylights-syntax-constant)">0</span></span>]
) <span><span style="color:var(--color-prettylights-syntax-keyword)">AS</span></span> prediction;</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></pre></div></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 04:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/postgresml</guid>
            <link>https://www.oschina.net/p/postgresml</link>
        </item>
        <item>
            <title>
                <![CDATA[腾讯 TDesignFlutter 组件库开源啦🎉🎉🎉]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>简介</span></span></span></span></strong></span></span></span></h1><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>作为一款诞生于腾讯内部开源、经过超 500 项内部业务检验的企业级设计体系，TDesign 汇集了腾讯众多优秀组件库能力和设计研发经验。之前，TDesign 已经支持 Vue2、Vue Next、React 等业界主流技术栈，方便使用者快速开发桌面端、移动端以及小程序等多个版本的应用程序，从而更好地服务设计师和开发者，助力企业提升设计研发效能，为产品体验设计带来新的思路。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>Flutter 跨平台框架自 2018 年开源以来，迅速发展，拥有大量用户。Flutter 采用自绘引擎，可以在不同平台上实现高性能、流畅的用户界面，用户体验出色。此外，Flutter 的跨平台特性使开发者只需编写一次代码，即可在多个平台上运行，减少开发和维护成本。Flutter 以其高效的开发流程、卓越的性能和跨平台能力，成为跨平台应用开发的首选框架。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>TDesignFlutter 不但拥有 Flutter 流畅的跨平台开发体验，而且拥有 TDesign 美观一致的设计资源。二者结合，开发者可以直接使用 TDesign 的组件构建 Flutter 应用，加快开发速度的同时，也确保了应用程序的一致性。在腾讯内部，TDesignFlutter 已支持多个产品线上稳定运行。</span></span></span></span></span></span></span></span></span></p><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>组件概览</span></span></span></span></strong></span></span></span></h1><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>TDesignFlutter 已上线 Text、Button、Input 等 29 个基础组件。详情可查阅：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftdesign.tencent.com%2Fflutter%2Foverview" target="_blank">https://tdesign.tencent.com/flutter/overview</a></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><img height="1562" src="https://static.oschina.net/uploads/space/2023/1207/121232_iU7V_3820517.png" width="1270" referrerpolicy="no-referrer"></p><p><span><span><span><span><span><span><span style="color:#333333"><span><span>此外，Collapse(折叠面板)、Upload(上传工具) 等组件已在开发测试中，相信很快可以和大家见面。</span></span></span></span></span></span></span></span></span></p><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>常用组件</span></span></span></span></strong></span></span></span></h1><p style="margin-left:0pt; text-align:left"><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>Text:</span></span></span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span style="color:#6d6e6f"><span><span>支持系统 Text 所有属性，可无缝切换。中文居中处理，并将常用属性扁平化，使用更加方便。</span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><img height="1548" src="https://static.oschina.net/uploads/space/2023/1207/121252_uk09_3820517.png" width="808" referrerpolicy="no-referrer"></p><p><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>Button:</span></span></span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span style="color:#6d6e6f"><span><span>丰富的主题样式，统一的设计规范。</span></span></span></span></span></span></span></span></span></span></p><div>
 &nbsp;
</div><div><div><p style="margin-left:0; margin-right:0; text-align:left"><img height="1395" src="https://static.oschina.net/uploads/space/2023/1207/121309_8Dew_3820517.png" width="1600" referrerpolicy="no-referrer"></p></div></div><p><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>Icon:</span></span></span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span style="color:#6d6e6f"><span><span>内容丰富的图标，使用 ttf 格式，简单易用，避免失真。</span></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><img height="1574" src="https://static.oschina.net/uploads/space/2023/1207/121324_6oME_3820517.png" width="810" referrerpolicy="no-referrer"></p><p><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>复杂组件:</span></span></span></span></strong></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span><span style="color:#6d6e6f"><span><span>完善的功能，统一的交互，易用的封装。</span></span></span></span></span></span></span></span></span></span></p><div>
 &nbsp;
</div><div><div><p style="margin-left:0; margin-right:0; text-align:left"><img height="1440" src="https://static.oschina.net/uploads/space/2023/1207/121344_TPc4_3820517.png" width="2184" referrerpolicy="no-referrer"></p></div></div><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>快速上手</span></span></span></span></strong></span></span></span></h1><h3><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>简单使用</span></span></span></span></strong></span></span></span></h3><ul><li><span><span><span><span><span><span><span style="color:#333333"><span><span>在 pubbspec.yaml 引入依赖。</span></span></span></span></span></span></span></span></span></li></ul><pre><span style="background-color:#fafafa"><span><code><span><span><span><span><span style="color:#000000"><span><span>dependencies</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>tdesign_flutter</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> ^0.1.0</span></span></span></span></span></span></span></code></span></span></pre><ul><li><span><span><span><span><span><span><span style="color:#333333"><span><span>在文件头部引入：import 'package:tdesign_flutter/tdesign_flutter.dart';</span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span style="color:#333333"><span><span>然后就可以使用 TDesignFlutter 的组件了:</span></span></span></span></span></span></span></span></span></li></ul><pre><span style="background-color:#fafafa"><span><code><span><span><span><span><span style="color:#dd4a68"><span><span>TDText</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>'测试文本'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>),</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>TDButton</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>text</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>'演示按钮'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>`</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> theme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>TDButtonTheme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>primary</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>`</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>),</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>Icon</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>TDIcons</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>add_circle</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>)</span></span></span></span></span></span></span></code></span></span></pre><p style="margin-left:0; margin-right:0; text-align:left"><img height="740" src="https://static.oschina.net/uploads/space/2023/1207/121407_Tmg5_3820517.png" width="1052" referrerpolicy="no-referrer"></p><p>&nbsp;</p><h3><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>自定义主题</span></span></span></span></strong></span></span></span></h3><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>TDesignFlutter 提供自定义主题的能力，可通过 json 文件配置颜色/字体尺寸/字体样式/圆角/阴影等主题样式。通过 TDTheme.of(context) 或者 TDTheme.defaultData() 获取主题数据。</span></span></span></span></span></span></span></span></span></p><pre><span style="background-color:#fafafa"><span><code><span><span><span><span><span style="color:#000000"><span><span> TDTheme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>of</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>context</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>).</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>brandNormalColor</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> TDTheme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>defaultData</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>().</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>fontBodyLarge</span></span></span></span></span></span></span></code></span></span></pre><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>使用示例：</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>下列代码不设置特殊主题，使用 TDesingFlutter 默认主题：</span></span></span></span></span></span></span></span></span></p><pre><span style="background-color:#fafafa"><span><code><span><span><span><span><span style="color:#000000"><span><span>TDText</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>'测试文本'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> textColor</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> TDTheme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>of</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>context</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>).</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>brandNormalColor</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> font</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> TDTheme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>of</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>context</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>).</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>fontBodyMedium</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>),</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>const</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>TDButton</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> text</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>'演示按钮'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> theme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> TDButtonTheme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>primary</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>)</span></span></span></span></span></span></span></code></span></span></pre><div>
 &nbsp;
</div><div><div><p style="margin-left:0; margin-right:0; text-align:left"><img height="320" src="https://static.oschina.net/uploads/space/2023/1207/121427_v0uq_3820517.png" width="638" referrerpolicy="no-referrer"></p></div></div><p><span><span><span><span><span><span><span style="color:#333333"><span><span>设置自定主题如下：</span></span></span></span></span></span></span></span></span></p><pre><span style="background-color:#fafafa"><span><code><span><span><span><span><span style="color:#dd4a68"><span><span>MaterialApp</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> theme</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>ThemeData</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> extensions</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>[</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>TDThemeData</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>.</span></span></span></span></span></span></span><span><span><span><span><span style="color:#dd4a68"><span><span>fromJson</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>(</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>'test'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> testThemeConfig</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>)</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>!</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>],</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>)</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span> ……</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>)</span></span></span></span></span></span></span></code></span></span></pre><p style="margin-left:0; margin-right:0; text-align:left">&nbsp;</p><pre><span style="background-color:#fafafa"><span><code><span><span><span><span><span style="color:#000000"><span><span>String testThemeConfig </span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>=</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>''</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>{</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"test"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>{</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"color"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>{</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"brandNormalColor"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"#D7B386"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>},</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"font"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>{</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"fontBodyMedium"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>{</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"size"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#990055"><span><span>40</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>,</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>"lineHeight"</span></span></span></span></span></span></span><span><span><span><span><span style="color:#9a6e3a"><span><span>:</span></span></span></span></span></span></span><span><span><span><span><span style="color:#990055"><span><span>55</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>}</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>}</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>}</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>}</span></span></span></span></span></span></span><span><span><span><span><span style="color:#669900"><span><span>''</span></span></span></span></span></span></span><span><span><span><span><span style="color:#000000"><span><span>'</span></span></span></span></span></span></span><span><span><span><span><span style="color:#999999"><span><span>;</span></span></span></span></span></span></span></code></span></span></pre><div>
 &nbsp;
</div><div><div><p style="margin-left:0; margin-right:0; text-align:left"><img height="344" src="https://static.oschina.net/uploads/space/2023/1207/121450_rEcV_3820517.png" width="524" referrerpolicy="no-referrer"></p></div></div><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>适用场景</span></span></span></span></strong></span></span></span></h1><ul><li><span><span><span><span><span><span><span style="color:#333333"><span><span>如果你是一个全新的业务，想要快速构建美观一致的 FlutterAPP。 √</span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span style="color:#333333"><span><span>如果你使用 Flutter 系统组件构建了 APP，想要一款简单易用、可快速迁移的组件库提升开发效率。 √</span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span style="color:#333333"><span><span>如果你想客户端和 web 端使用风格统一的组件，或者后续需要支持 pc 桌面端应用。 √</span></span></span></span></span></span></span></span></span></li></ul><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>后续规划</span></span></span></span></strong></span></span></span></h1><ul><li><span><span><span><span><span><span><span style="color:#333333"><span><span>提供更多可靠实用的组件</span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span style="color:#333333"><span><span>适配 Flutter Web 和 PC 桌面端,支持更多应用场景</span></span></span></span></span></span></span></span></span></li><li><span><span><span><span><span><span><span style="color:#333333"><span><span>提供更完善的单元测试模块和性能检测能力，确保组件更可靠和流畅</span></span></span></span></span></span></span></span></span></li></ul><h1><span><span><span><strong><span><span style="color:#1a1a1a"><span><span>反馈和共建</span></span></span></span></strong></span></span></span></h1><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>TDesignFlutter 现已开放，欢迎广大设计师和开发者使用和反馈，参与共建通用企业级设计体系。</span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftdesign.tencent.com%2Fflutter" target="_blank">https://tdesign.tencent.com/flutter</a></span></span></span></span></span></span></span></span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><span><span><span><span><span><span><span style="color:#333333"><span><span>项目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FTencent%2Ftdesign-flutter" target="_blank">https://github.com/Tencent/tdesign-flutter</a></span></span></span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 04:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269901/tdesignflutter-opensource</guid>
            <link>https://www.oschina.net/news/269901/tdesignflutter-opensource</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Windows 10 将于 2025 年 10 月 14 日终止支持]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软发布<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcommunity.microsoft.com%2Ft5%2Fwindows-it-pro-blog%2Fplan-for-windows-10-eos-with-windows-11-windows-365-and-esu%2Fba-p%2F4000414" target="_blank">公告</a>称，<span style="background-color:#ffffff">Windows 10 将于 2025 年 10 月 14 日终止支持 (EOS)。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">当 Windows 10 终止支持时，官方将不再提供问题的错误修复、漏洞的安全修复、时区更新或可能发生的问题的技术支持。22H2 版本是 Windows 10 的最终版本。Windows 10 的所有版本 22H2 都将在 2025 年 10 月 14 日前继续支持每月安全更新。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">距离&nbsp;Windows 10 EOS&nbsp; 仅剩不到两年的时间，</span>微软方面敦促用户尽快向&nbsp;<span style="background-color:#ffffff">Windows 11&nbsp;</span>系统迁移，并提供了一系列的过渡指南。</span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">「<span style="background-color:#ffffff">Windows 11 是迄今为止最安全的 Windows。其广泛的功能（包括 Windows 中的 Copilot）旨在帮助你的组织保持安全和高效。这些措施包括内置的高级加密、数据和凭据保护、强大的系统安全和网络安全，以及针对不断变化的威胁的智能防护措施。</span>」</span></p><p style="margin-left:0; margin-right:0; text-align:left"><img height="269" src="https://oscimg.oschina.net/oscnet/up-33aa42a83be38c18ba69809b1d17613b0f4.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">尽管如此，微软 Windows 服务和交付团队成员 Jason Leznek 也表示：「虽然我们强烈建议迁移到 Windows 11，但我们也理解有些情况可能会妨碍用户在 EOS&nbsp; 日期之前更换 Windows 10 设备。因此，微软将提供扩展安全更新 (Extended Security Updates)。」</span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><span style="background-color:#ffffff">与 Windows 7 </span><span style="background-color:#ffffff">ESU&nbsp;</span><span style="background-color:#ffffff">一样，</span>Windows 10 用户可以选择购买安全更新的年度订阅，可在服务终止日期后的三年内继续接收每月的安全更新。不过，Windows 10 ESU 计划只提供<span style="background-color:#ffffff">关键和/或重要的安全更新</span>。一字儿较小缺陷的补丁、功能请求或其他更改不一定会被考虑，技术支持也仅限于安全问题。</span></p><p style="margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">目前有关&nbsp;<span style="background-color:#ffffff">Windows 10 ESU 的相关定价尚未公布。Windows 7 ESU 定价为： 每台 Windows 7 Pro 设备第一年的价格为 50 美元；第二年为 100 美元；第三年为 200 美元。</span><span style="background-color:#ffffff">对于 Windows Enterprise 客户，价格则仅为其一半。</span></span></p><p style="margin-left:0; margin-right:0; text-align:left"><strong><span style="color:#000000"><span style="background-color:#ffffff">相关阅读：</span></span></strong></p><ul><li style="text-align:left"><a href="https://www.oschina.net/news/264497/pigc-microsoft-extends-windows-10-support" target="_blank">公益组织请愿微软延长 Windows 10 支持</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 03:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269897</guid>
            <link>https://www.oschina.net/news/269897</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[维基百科推出「可编程」新项目：Wikifunctions]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>维基媒体基金会&nbsp;<span>(Wikimedia Foundation) <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwikimediafoundation.org%2Fnews%2F2023%2F12%2F05%2Fintroducing-wikifunctions-first-wikimedia-project-to-launch-in-a-decade-creates-new-forms-of-knowledge%2F" target="_blank">宣布推出</a></u>&nbsp;</span><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wikifunctions.org%2Fwiki%2FWikifunctions%3AMain_Page" target="_blank">Wikifunctions</a></strong><span>，据称这是该组织十多年来的第一个新项目。该项目让志愿者编辑<strong>能够协作创建和维护一个函数库</strong>——用于回答问题并增强有关维基媒体项目及其他项目的知识。</span></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-304d34c058f3401b98838b2b5ccf0208c6b.png" referrerpolicy="no-referrer"></p><p>「函数」是一系列编程指令，它根据提供的数据进行计算。通过 Wikifunctions，这些函数可以以任何语言存在，因此对于许多用户来说，<strong>这将是他们首次能够用母语阅读和编写函数的项目</strong>。</p><p>Wikifunctions 的目标是使这些函数路径更加容易访问。它将提供一个单一的共享空间，简化维护人员的工作并增加函数的可访问性。最终，Wikifunctions 将与维基百科和其他维基媒体项目集成，为知识创造开辟新的机会。该项目将以维基百科的结构化数据为基础，从其他维基媒体项目中汇集不同的数据源，从而利用函数代码创建新形式的知识。</p><p><img src="https://oscimg.oschina.net/oscnet/up-eaa77a99abda8b84621cb9c8d3ccb01908a.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.wikifunctions.org%2Fwiki%2FWikifunctions%3AMain_Page" target="_blank">https://www.wikifunctions.org/wiki/Wikifunctions:Main_Page</a></u></em></p><p>Wikifunctions 作为底层技术基础设施，将支持维基媒体基金会更广泛的举措，使人们能够在维基百科上以更多语言分享更多知识。通过该项目，用户将能够使用他们的母语创建和维护内容，其他用户可以在维基媒体项目提供的 300 多种语言中访问这些内容。</p><p>Wikifunctions 于 2020 年获得维基媒体基金会董事会的批准，今年早些时候作为只读网站上线，现在任何人、任何地方都可以使用它。Wikifunctions 得到了 Google.org、洛克菲勒基金会和维基媒体捐赠基金的资助。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 03:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269893/wikifunctions-wikimedia</guid>
            <link>https://www.oschina.net/news/269893/wikifunctions-wikimedia</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[充电头也能 OTA 升级？苹果为电源适配器推送固件更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>苹果公司近日为 30W 和 140W 的 USB-C 电源适配器推送了固件更新。</p><p>用户通过 MagSafe 3 或者 USB-C 连接到 Mac 设备之后，系统会自动开始更新。更新之后打开「系统信息」应用，点击「电源」选项即可查看最新版本。</p><p>30W USB-C 电源适配器安装的最新版本为&nbsp;<strong>Ver.1030053</strong>（上个版本为&nbsp;<span style="background-color:#ffffff; color:#333333">Ver.1030052</span>），ID 从 0x1674 升级到&nbsp;<strong>0x7003</strong>；</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bf26c2e7e5c248d1a0aff7b7428adbbeb91.png" referrerpolicy="no-referrer"></p><p>140W USB-C 电源适配器安装更新后版本号升级至&nbsp;<strong>Ver.1040073</strong>（上个版本为 <span style="background-color:#ffffff; color:#333333">Ver.1040068</span>）。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-01b90e9cd0dcfa5ab9bcb0ef1d2ab2b4b10.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.macotakara.jp%2Fetc%2Fsupport%2Fentry-45789.html" target="_blank">https://www.macotakara.jp/etc/support/entry-45789.html</a></u></em>、<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.macotakara.jp%2Fetc%2Fsupport%2Fentry-45790.html" target="_blank">https://www.macotakara.jp/etc/support/entry-45790.html</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 03:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269879</guid>
            <link>https://www.oschina.net/news/269879</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SQLite 重写了 JSON 函数 —— 推出 JSONB]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>SQLite <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2Fforum%2Fforumpost%2Ffa6f64e3dc1a5d97" target="_blank">宣布推出 JSONB</a></u>，这是对 SQLite JSON 函数的重写，宣称比现有 JSON 函数「快几倍」。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7eec133035c4e37c1ac26035e420dcc9574.png" referrerpolicy="no-referrer"></p></blockquote><p>在过去几年中，SQLite 开发者为改进 JSON 数据与该 SQL 数据库的<strong>库集成</strong>做了大量工作。最新的工作是<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2Fsrc%2Finfo%2F7f0c79b94e8f55e5" target="_blank">已合并的 JSONB</a></u>。JSONB 对 SQLite JSON 函数进行了重写，将 JSON 的内部使用从二进制表示形式更改改为连续的字节数组，可以作为 SQL BLOB 读取或写入。</p><p>JSONB 有助于降低解析 JSON 文本和表示用于存储的 JSON 的开销。</p><p>此外，JSONB 保留所有旧功能，并且所有 JSON 函数也可以接受 JSONB 二进制内容。如需了解有关 SQLite JSONB 功能及其更快性能潜力的更多信息，查看<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsqlite.org%2Fforum%2Fforumpost%2Ffa6f64e3dc1a5d97" target="_blank">https://sqlite.org/forum/forumpost/fa6f64e3dc1a5d97</a></u></em>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269878/sqlite-lands-jsonb</guid>
            <link>https://www.oschina.net/news/269878/sqlite-lands-jsonb</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | JDK 21 虚拟线程原理及性能分析]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>一、背景</h1><p style="color:#24292f; text-align:start">JDK21 在 9 月 19 号正式发布，带来了较多亮点，其中虚拟线程备受瞩目，毫不夸张的说，它改变了高吞吐代码的编写方式，只需要小小的变动就可以让目前的 IO 密集型程序的吞吐量得到提升，写出高吞吐量的代码不再困难。</p><p style="color:#24292f; text-align:start">本文将详细介绍虚拟线程的使用场景，实现原理以及在 IO 密集型服务下的性能压测效果。</p><span id="OSC_h1_2"></span><h1>二、为了提升吞吐性能，我们所做的优化</h1><p style="color:#24292f; text-align:start">在讲虚拟线程之前，我们先聊聊为了提高吞吐性能，我们所做的一些优化方案。</p><span id="OSC_h2_3"></span><h2>串行模式</h2><p style="color:#24292f; text-align:start">在当前的微服务架构下，处理一次用户/上游的请求，往往需要多次调用下游服务、数据库、文件系统等，再将所有请求的数据进行处理最终的结果返回给上游。<img alt="2.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/2.png" referrerpolicy="no-referrer"><img alt="3.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/3.png" referrerpolicy="no-referrer">在这种模式下，使用串行模式去查询数据库，下游 Dubbo/Http 接口，文件系统完成一次请求，接口整体的耗时等于各个下游的返回时间之和，这种写法虽然简单，但是接口耗时长、性能差，无法满足 C 端高 QPS 场景下的性能要求。</p><span id="OSC_h2_4"></span><h2>线程池+Future 异步调用</h2><p style="color:#24292f; text-align:start">为了解决串行调用的低性能问题，我们会考虑使用并行异步调用的方式，最简单的方式便是使用线程池 +Future 去并行调用。<img alt="4.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/4.jpeg" referrerpolicy="no-referrer">典型代码如下：<img alt="11.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/11.png" referrerpolicy="no-referrer">这种方式虽然解决了大部分场景下的串行调用低性能问题，但是也存在着严重的弊端，由于存在 Future 的前后依赖关系，当使用场景存在大量的前后依赖时，会使得<strong>线程资源和 CPU 大量浪费在阻塞等待上</strong>，导致资源利用率低。</p><span id="OSC_h2_5"></span><h2>线程池+CompletableFuture 异步调用</h2><p style="color:#24292f; text-align:start">为了降低 CPU 的阻塞等待时间和提升资源的利用率，我们会使用 CompletableFuture 对调用流程进行编排，降低依赖之间的阻塞。</p><p style="color:#24292f; text-align:start">CompletableFuture 是由 Java8 引入的，在 Java8 之前一般通过 Future 实现异步。Future 用于表示异步计算的结果，如果存在流程之间的依赖关系，那么只能通过阻塞或者轮询的方式获取结果，同时原生的 Future 不支持设置回调方法，Java8 之前若要设置回调可以使用 Guava 的 ListenableFuture，回调的引入又会导致回调地狱，代码基本不具备可读性。</p><p style="color:#24292f; text-align:start">而 CompletableFuture 是对 Future 的扩展，原生支持通过设置回调的方式处理计算结果，同时也支持组合编排操作，一定程度解决了回调地狱的问题。</p><p style="color:#24292f; text-align:start">使用 CompletableFuture 的实现方式如下：<img alt="101.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/101.png" referrerpolicy="no-referrer">CompletableFuture 虽然一定程度上面缓解了 CPU 资源<strong>大量浪费在阻塞等待上的问题</strong>，但是只是缓解，核心的问题始终没有解决。这两个问题导致 CPU 无法充分被利用，系统吞吐量容易达到瓶颈。</p><ul><li><strong>线程资源浪费瓶颈始终在 IO 等待上</strong>，导致 CPU 资源利用率较低。目前大部分服务是 IO 密集型服务，一次请求的处理耗时大部分都消耗在等待下游 RPC，数据库查询的 IO 等待中，此时线程仍然只能阻塞等待结果返回，导致 CPU 的利用率很低。</li><li><strong>线程数量存在限制</strong>，<span>&nbsp;</span><strong>为了增加并发度，我们会给线程池配置更大的线程数</strong>，但是线程的数量是有限制的，Java 的线程模型是 1:1 映射平台线程的，导致 Java 线程创建的成本很高，不能无限增加。同时随着 CPU 调度线程数的增加，会导致更严重的资源争用，宝贵的 CPU 资源被损耗在上下文切换上。</li></ul><span id="OSC_h1_6"></span><h1>三、一请求一线程的模型</h1><p style="color:#24292f; text-align:start">在给出最终解决方案之前，我们先聊一聊 Web 应用中常见的一请求一线程的模型。</p><p style="color:#24292f; text-align:start">在 Web 中我们最常见的请求模型就是使用一请求一线程的模型，每个请求都由单独的线程处理。此模型易于理解和实现，对编码的可读性，Debug 都非常友好，但是，它有一些缺点。当线程执行阻塞操作（如连接到数据库或进行网络调用）时，线程会被阻塞，直到操作完成，这意味着线程在此期间将无法处理任何其他请求。<img alt="45.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/45.jpeg" referrerpolicy="no-referrer">当遇到大促或突发流量等场景导致服务承受的请求数增大时，为了保证每个请求在尽可能短的时间内返回，减少等待时间，我们经常会采用以下方案：</p><ul><li><strong>扩大服务最大线程数</strong>，简单有效，由于存在下列问题，导致平台线程有最大数量限制，不能大量扩充。 
  <ul><li>系统资源有限导致系统线程总量有限，进而导致与系统线程一一对应的平台线程有限。</li><li>平台线程的调度依赖于系统的线程调度程序，当平台线程创建过多，会消耗大量资源用于处理线程上下文切换。</li><li>每个平台线程都会开辟一块大小约 1m 私有的栈空间，大量平台线程会占据大量内存。<img alt="44.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/44.png" referrerpolicy="no-referrer"></li></ul></li><li><strong>垂直扩展，升级机器配置，水平扩展，增加服务节点</strong>，也就是俗称的升配扩容大法，效果好，也是最常见的方案，缺点是会增加成本，同时有些场景下扩容并不能 100% 解决问题。</li><li><strong>采用异步/响应式编程方案</strong>，例如 RPC NIO 异步调用，WebFlux，Rx-Java 等非阻塞的基于 Ractor 模型的框架，使用事件驱动使得少量线程即可实现高吞吐的请求处理，拥有较好的性能与优秀的资源利用，缺点是学习成本较高兼容性问题较大，编码风格与目前的一请求一线程的模型差异较大，理解难度大，同时对于代码的调试比较困难。</li></ul><p style="color:#24292f; text-align:start"><strong>那么有没有一种方法可以易于编写，方便迁移，符合日常编码习惯，同时性能很不错，CPU 资源利用率较高的方案呢?</strong></p><p style="color:#24292f; text-align:start"><strong>JDK21 中的虚拟线程可能给出了答案</strong>， JDK 提供了与 Thread 完全一致的抽象 Virtual Thread 来应对这种经常阻塞的情况，阻塞仍然是会阻塞，但是换了阻塞的对象，由昂贵的平台线程阻塞改为了成本很低的虚拟线程的阻塞，当代码调用到阻塞 API 例如 IO，同步，Sleep 等操作时，JVM 会自动把<span>&nbsp;</span><strong>Virtual Thread 从平台线程上卸载</strong>，平台线程就会去处理下一个虚拟线程，通过这种方式，提升了平台线程的利用率，让平台线程不再阻塞在等待上，<strong>从底层实现了少量平台线程就可以处理大量请求，提高了服务吞吐和 CPU 的利用率。</strong></p><span id="OSC_h1_7"></span><h1>四、虚拟线程</h1><span id="OSC_h2_8"></span><h2>线程术语定义</h2><p style="color:#24292f; text-align:start"><strong>操作系统线程（OS Thread）</strong>：由操作系统管理，是操作系统调度的基本单位。</p><p style="color:#24292f; text-align:start"><strong>平台线程（Platform Thread）</strong>：Java.Lang.Thread 类的每个实例，都是一个平台线程，是 Java 对操作系统线程的包装，与操作系统是 1:1 映射。</p><p style="color:#24292f; text-align:start"><strong>虚拟线程（Virtual Thread）</strong>：一种轻量级，由 JVM 管理的线程。对应的实例 java.lang.VirtualThread 这个类。</p><p style="color:#24292f; text-align:start"><strong>载体线程（Carrier Thread）</strong>：指真正负责执行虚拟线程中任务的平台线程。一个虚拟线程装载到一个平台线程之后，那么这个平台线程就被称为虚拟线程的载体线程。</p><span id="OSC_h2_9"></span><h2>虚拟线程定义</h2><p style="color:#24292f; text-align:start">JDK 中 java.lang.Thread 的每个实例都是一个平台线程。平台线程在底层操作系统线程上运行 Java 代码，并在代码的整个生命周期内独占操作系统线程，平台线程实例本质是由系统内核的线程调度程序进行调度，并且<strong>平台线程的数量受限于操作系统线程的数量</strong>。</p><p style="color:#24292f; text-align:start"><strong>而虚拟线程 (Virtual Thread) 它不与特定的操作系统线程相绑定</strong>。它在平台线程上运行 Java 代码，但在代码的整个生命周期内不独占平台线程。**这意味着许多虚拟线程可以在同一个平台线程上运行他们的 Java 代码，共享同一个平台线程。**同时虚拟线程的成本很低，<strong>虚拟线程的数量可以比平台线程的数量大得多。</strong><img alt="17.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/17.png" referrerpolicy="no-referrer"></p><span id="OSC_h2_10"></span><h2>虚拟线程创建</h2><p style="color:#24292f; text-align:start"><strong>方法一：直接创建虚拟线程</strong></p><pre><code>Thread vt = Thread.startVirtualThread(() -&gt; {
    System.out.println("hello wolrd virtual thread");
});
</code></pre><p style="color:#24292f; text-align:start"><strong>方法二：创建虚拟线程但不自动运行，手动调用 start() 开始运行</strong></p><pre><code>Thread.ofVirtual().unstarted(() -&gt; {
    System.out.println("hello wolrd virtual thread");
});
vt.start();
</code></pre><p style="color:#24292f; text-align:start"><strong>方法三：通过虚拟线程的 ThreadFactory 创建虚拟线程</strong></p><pre><code>ThreadFactory tf = Thread.ofVirtual().factory();
Thread vt = tf.newThread(() -&gt; {
    System.out.println("Start virtual thread...");
    Thread.sleep(1000);
    System.out.println("End virtual thread. ");
});
vt.start();
</code></pre><p style="color:#24292f; text-align:start"><strong>方法四：Executors.newVirtualThreadPer</strong><span>&nbsp;</span><strong>-TaskExecutor()</strong></p><pre><code>
ExecutorService executor = Executors.newVirtualThreadPerTaskExecutor();
executor.submit(() -&gt; {
    System.out.println("Start virtual thread...");
    Thread.sleep(1000);
    System.out.println("End virtual thread.");
    return true;
});
</code></pre><span id="OSC_h2_11"></span><h2>虚拟线程实现原理</h2><p style="color:#24292f; text-align:start">虚拟线程是由 Java 虚拟机调度，而不是操作系统。虚拟线程占用空间小，同时使用轻量级的任务队列来调度虚拟线程，避免了线程间基于内核的上下文切换开销，因此可以极大量地创建和使用。</p><p style="color:#24292f; text-align:start"><strong>简单来看，虚拟线程实现如下：virtual thread =continuation+scheduler+runnable</strong></p><p style="color:#24292f; text-align:start">虚拟线程会把任务（java.lang.Runnable 实例）包装到一个 Continuation 实例中:</p><ul><li>当任务需要阻塞挂起的时候，会调用 Continuation 的 yield 操作进行阻塞，虚拟线程会从平台线程卸载。</li><li>当任务解除阻塞继续执行的时候，调用 Continuation.run 会从阻塞点继续执行。</li></ul><p style="color:#24292f; text-align:start">Scheduler 也就是执行器，由它将任务提交到具体的载体线程池中执行。</p><ul><li>它是 java.util.concurrent.Executor 的子类。</li><li>虚拟线程框架提供了一个默认的 FIFO 的 ForkJoinPool 用于执行虚拟线程任务。</li></ul><p style="color:#24292f; text-align:start">Runnable 则是真正的任务包装器，由 Scheduler 负责提交到载体线程池中执行。</p><p style="color:#24292f; text-align:start">JVM 把虚拟线程分配给平台线程的操作称为 mount（挂载），取消分配平台线程的操作称为 unmount（卸载）：</p><p style="color:#24292f; text-align:start"><strong>mount 操作</strong>：虚拟线程挂载到平台线程，虚拟线程中包装的 Continuation 堆栈帧数据会被拷贝到平台线程的线程栈，这是一个从堆复制到栈的过程。</p><p style="color:#24292f; text-align:start"><strong>unmount 操作</strong>：虚拟线程从平台线程卸载，此时虚拟线程的任务还没有执行完成，所以虚拟线程中包装的 Continuation 栈数据帧会会留在堆内存中。</p><p style="color:#24292f; text-align:start">从 Java 代码的角度来看，其实是看不到虚拟线程及载体线程共享操作系统线程的，会认为虚拟线程及其载体都在同一个线程上运行，因此，在同一虚拟线程上多次调用的代码可能会在每次调用时挂载的载体线程都不一样。JDK 中使用了<span>&nbsp;</span><strong>FIFO 模式的 ForkJoinPool 作为虚拟线程的调度器</strong>，从这个调度器看虚拟线程任务的执行流程大致如下：</p><ul><li>调度器（线程池）中的平台线程等待处理任务。<img alt="66.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/66.png" referrerpolicy="no-referrer"></li><li>一个虚拟线程被分配平台线程，该平台线程作为载体线程执行虚拟线程中的任务。<img alt="90.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/90.png" referrerpolicy="no-referrer"></li><li>虚拟线程运行其 Continuation，Mount(挂载) 平台线程后，最终执行 Runnable 包装的用户实际任务。<img alt="009.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/009.png" referrerpolicy="no-referrer"></li><li>虚拟线程任务执行完成，标记 Continuation 终结，标记虚拟线程为终结状态，清空上下文，等待 GC 回收，解除挂载载体线程会返还到调度器（线程池）中等待处理下一个任务。<img alt="102.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/102.png" referrerpolicy="no-referrer"></li></ul><p style="color:#24292f; text-align:start">上面是没有阻塞场景的虚拟线程任务执行情况，如果遇到了阻塞 (例如 Lock 等) 场景，会触发 Continuation 的 yield 操作让出控制权，等待虚拟线程重新分配载体线程并且执行，具体见下面的代码：</p><pre><code> ReentrantLock lock = new ReentrantLock();
        Thread.startVirtualThread(() -&gt; {
            lock.lock();    
        });
        // 确保锁已经被上面的虚拟线程持有
        Thread.sleep(1000);  
        Thread.startVirtualThread(() -&gt; {
            System.out.println("first");
            会触发 Continuation 的 yield 操作
            lock.lock(); 
            try {
                System.out.println("second");
            } finally {
                lock.unlock();
            }
            System.out.println("third");
        });
        Thread.sleep(Long.MAX_VALUE);
    }
</code></pre><p>虚拟线程中任务执行时候调用 Continuation#run()<span>&nbsp;</span><strong>先执行了部分任务代码，然后尝试获取锁</strong>，该操作是阻塞操作会导致 Continuation 的 yield 操作让出控制权，如果 yield 操作成功，会从载体线程 unmount，载体线程栈数据会移动到 Continuation 栈的数据帧中，保存在堆内存中，虚拟线程任务完成，此时虚拟线程和 Continuation 还没有终结和释放，载体线程被释放到执行器中等待新的任务；如果 Continuation 的 yield 操作失败，则会对载体线程进行 Park 调用，<strong>阻塞在载体线程上，此时虚拟线程和载体线程同时会被阻塞</strong>，本地方法，Synchronized 修饰的同步方法都会导致 yield 失败。<img alt="008.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/008.png" referrerpolicy="no-referrer"></p><p>当锁持有者释放锁之后，<strong>会唤醒虚拟线程获取锁</strong>，获取锁成功后，虚拟线程会重新进行 mount，让虚拟线程任务再次执行，<strong>此时有可能是分配到另一个载体线程中执行</strong>，Continuation 栈会的数据帧会被恢复到载体线程栈中，然后再次调用 Continuation#run() 恢复任务执行。<img alt="172.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/172.png" referrerpolicy="no-referrer"></p><p>虚拟线程任务执行完成，标记 Continuation 终结，标记虚拟线程为终结状态，清空上下文变量，解除载体线程的挂载载体线程返还到调度器（线程池）中作为平台线程等待处理下一个任务。</p><p style="color:#24292f; text-align:start">Continuation 组件十分重要，<strong>它既是用户真实任务的包装器，同时提供了虚拟线程任务暂停/继续的能力，以及虚拟线程与平台线程数据转移功能，当任务需要阻塞挂起的时候，调用 Continuation 的 yield 操作进行阻塞。当任务需要解除阻塞继续执行的时候，则调用 Continuation 的 run 恢复执行。</strong></p><p style="color:#24292f; text-align:start">通过下面的代码可以看出 Continuation 的神奇之处，通过在编译参数加上--add-exports java.base/jdk.internal.vm=ALL-UNNAMED 可以在本地运行。</p><pre><code>ContinuationScope scope = new ContinuationScope("scope");
Continuation continuation = new Continuation(scope， () -&gt; {
    System.out.println("before yield 开始");
    Continuation.yield(scope);
    System.out.println("after yield 结束");
});
System.out.println("1 run");
// 第一次执行 Continuation.run
continuation.run();
System.out.println("2 run");
// 第二次执行 Continuation.run
continuation.run();
System.out.println("Done");
</code></pre><p style="color:#24292f; text-align:start"><img alt="756.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/756.png" referrerpolicy="no-referrer">通过上述案例可以看出，<strong>Continuation 实例进行 yield 调用后，再次调用其 run 方法就可以从 yield 的调用之处继续往下执行，从而实现了程序的中断和恢复。</strong></p><span id="OSC_h2_12"></span><h2>虚拟线程内存占用评估</h2><p style="color:#24292f; text-align:start"><strong>单个平台线程的资源占用：</strong></p><ul><li>根据 JVM 规范，预留 1 MB 线程栈空间。</li><li>平台线程实例，会占据 2000+ byte 数据。</li></ul><p style="color:#24292f; text-align:start"><strong>单个虚拟线程的资源占用：</strong></p><ul><li>Continuation 栈会占用数百 byte 到数百 KB 内存空间，是作为堆栈块对象存储在 Java 堆中。</li><li>虚拟线程实例会占据 200 - 240 byte 数据。</li></ul><p style="color:#24292f; text-align:start">从对比结果来看，<strong>理论上单个平台线程占用的内存空间至少是 KB 级别的，而单个虚拟线程实例占用的内存空间是 byte 级别</strong>，两者的内存占用差距较大，这也是虚拟线程可以大批量创建的原因。</p><p style="color:#24292f; text-align:start">下面通过一段程序去测试平台线程和虚拟线程的内存占用：</p><pre><code>private static final int COUNT = 4000;

/**
 *  -XX:NativeMemoryTracking=detail
 *
 * @param args args
 */
public static void main(String[] args) throws Exception {
    for (int i = 0; i &lt; COUNT; i++) {
        new Thread(() -&gt; {
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }， String.valueOf(i)).start();
    }
    Thread.sleep(Long.MAX_VALUE);
}
</code></pre><p style="color:#24292f; text-align:start">上面的程序运行后启动 4000 平台线程，通过 -XX:NativeMemoryTracking=detail 参数和 JCMD 命令查看所有线程占据的内存空间如下：<img alt="890.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/890.jpeg" referrerpolicy="no-referrer">内存占用大部分来自创建的平台线程，<strong>总线程栈空间占用约为 8096 MB，两者加起来占据总使用内存（8403MB）的 96% 以上。</strong></p><p style="color:#24292f; text-align:start">用类似的方式编写运行虚拟线程的程序：</p><pre><code>private static final int COUNT = 4000;

/**
 * -XX:NativeMemoryTracking=detail
 *
 * @param args args
 */
public static void main(String[] args) throws Exception {
    for (int i = 0; i &lt; COUNT; i++) {
        Thread.startVirtualThread(() -&gt; {
            try {
                Thread.sleep(Long.MAX_VALUE);
            } catch (Exception e) {
                e.printStackTrace();
            }
        });
    }
    Thread.sleep(Long.MAX_VALUE);
}
</code></pre><p style="color:#24292f; text-align:start">上面的程序运行后启动 4000 虚拟线程：<img alt="123.jpeg" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/123.jpeg" referrerpolicy="no-referrer">堆内存的实际占用量和总内存的实际占用量都不超过 300 MB，可以证明虚拟线程在大量创建的前提下也不会去占用过多的内存，且<strong>虚拟线程的堆栈是作为堆栈块对象存储在 Java 的堆中的，可以被 GC 回收，又降低了虚拟线程的占用。</strong></p><span id="OSC_h2_13"></span><h2>虚拟线程的局限及使用建议</h2><ul><li>虚拟线程存在 native 方法或者外部方法 (Foreign Function &amp; Memory API，jep 424 ) 调用不能进行 yield 操作，此时载体线程会被阻塞。</li><li>当运行在 synchronized 修饰的代码块或者方法时，不能进行 yield 操作，此时载体线程会被阻塞，推荐使用 ReentrantLock。</li><li><strong>ThreadLocal 相关问题</strong>，目前虚拟线程仍然是支持 ThreadLocal 的，但是由于虚拟线程的数量非常多，会导致 Threadlocal 中存的线程变量非常多，需要频繁 GC 去清理，对性能会有影响，官方建议尽量少使用 ThreadLocal，同时不要在虚拟线程的 ThreadLocal 中放大对象，目前官方是想通过 ScopedLocal 去替换掉 ThreadLocal，但是在 21 版本还没有正式发布，<strong>这个可能是大规模使用虚拟线程的一大难题</strong>。</li><li><strong>无需池化虚拟线程</strong><span>&nbsp;</span>虚拟线程占用的资源很少，因此可以大量地创建而无须考虑池化，它不需要跟平台线程池一样，平台线程的创建成本比较昂贵，所以通常选择去池化，去做共享，<strong>但是池化操作本身会引入额外开销</strong>，对于虚拟线程池化反而是得不偿失，使用虚拟线程我们抛弃池化的思维，用时创建，用完就扔。</li></ul><span id="OSC_h2_14"></span><h2>虚拟线程适用场景</h2><ul><li>大量的 IO 阻塞等待任务，例如下游 RPC 调用，DB 查询等。</li><li>大批量的处理时间较短的计算任务。</li><li>Thread-per-request (一请求一线程) 风格的应用程序，例如主流的 Tomcat 线程模型或者基于类似线程模型实现的 SpringMVC 框架 ，这些应用只需要小小的改动就可以带来巨大的吞吐提升。</li></ul><span id="OSC_h1_15"></span><h1>五、虚拟线程压测性能分析</h1><p style="color:#24292f; text-align:start">在下面的测试中，我们将模拟最常使用的场景-使用 Web 容器去处理 Http 请求。</p><p style="color:#24292f; text-align:start"><strong>场景一：</strong><span>&nbsp;</span>在 Spring Boot 中使用内嵌的 Tomcat 去处理 Http 请求，<strong>使用默认的平台线程池作为 Tomcat 的请求处理线程池。</strong></p><p style="color:#24292f; text-align:start"><strong>场景二</strong>：使用<strong>Spring -WebFlux</strong>创建基于事件循环模型的应用程序，进行响应式请求处理。</p><p style="color:#24292f; text-align:start"><strong>场景三：</strong><span>&nbsp;</span>在 Spring Boot 中使用内嵌的 Tomcat 去处理 Http 请求，<strong>使用虚拟线程池作为 Tomcat 的请求处理线程池</strong><span>&nbsp;</span>(Tomcat 已支持虚拟线程)。</p><span id="OSC_h2_16"></span><h2>测试流程</h2><ul><li>Jmeter 开启 500 个线程去并行发起请求。每个线程将等待请求响应后再发起下一次请求，单次请求超时时间为 10s，测试时间持续 60s。</li><li>测试的 Web Server 将接受 Jmeter 的请求，并调用慢速服务器获取响应并返回。</li><li>慢速服务器以随机超时响应。最大响应时间为 1000ms。平均响应时间为 500ms。<img alt="46.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/46.png" referrerpolicy="no-referrer"></li></ul><span id="OSC_h2_17"></span><h2>衡量指标</h2><p style="color:#24292f; text-align:start"><strong>吞吐量和平均响应时间</strong>，吞吐量越高，平均响应时间越低，性能就越好。</p><span id="OSC_h2_18"></span><h2>Tomcat+普通线程池</h2><p style="color:#24292f; text-align:start">默认情况下，Tomcat 使用一请求一线程模型处理请求，当 Tomcat 收到请求时，会从线程池中取一个线程去处理请求，该分配的线程将一直保持占用状态，直到请求结束才会释放。当线程池中没有线程时，请求会一直阻塞在队列中，直到有请求结束释放线程。默认队列长度为 Integer.MAX。</p><span id="OSC_h3_19"></span><h3>默认线程池</h3><p style="color:#24292f; text-align:start">默认情况下，线程池最多包含 200 个线程。这基本上意味着单个时间点最多处理 200 个请求。对于每个请求服务都会以阻塞的方式调用平均 RT500ms 的慢速服务器。因此，可以预期每秒 400 个请求的吞吐量，最终压测结果非常接近预期值，为 388 req/sec。<img alt="112.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/112.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start"><strong>增加线程池</strong></p><p style="color:#24292f; text-align:start">生产环境为了吞吐考虑,一般不会使用默认值,会把线程池增大到 server.tomcat.threads.max=500+，调整到 500+ 之后的压测结果如下：<img alt="998.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/998.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看出最终的吞吐量和线程数量呈比例上升，同时由于线程数的增加，请求等待减少，平均 RT 趋向于慢速服务器的响应平均 RT。</p><p style="color:#24292f; text-align:start">但是需要注意的是，平台线程的创建受到内存和 Java 线程映射模型的限制，不能无限扩展，同时大量线程会导致 CPU 资源大量消耗在上下文切换时，整体性能反而降低。</p><span id="OSC_h2_20"></span><h2>WebFlux</h2><p style="color:#24292f; text-align:start">WebFlux 跟传统的 Tomcat 线程模型不一样，他不会为每个请求分配一个专用线程，而是使用事件循环模型通过非阻塞 I/O 操作同时处理多个请求，这使得它能够用有限的线程数量处理大量的并发请求。</p><p style="color:#24292f; text-align:start">在压测的场景下，使用 WebClient 来进行一个非阻塞的 Http 调用慢速处理器，并使用 RouterFunction 来做请求映射和处理。</p><pre><code>@Bean
public WebClient slowServerClient() {
    return WebClient.builder()
            .baseUrl("http://127.0.0.1:8000")
            .build();
}

@Bean
public RouterFunction&lt;ServerResponse&gt; routes(WebClient slowServerClient) {
    return route(GET("/")， (ServerRequest req) -&gt; ok()
            .body(
                    slowServerClient
                            .get()
                            .exchangeToFlux(resp -&gt; resp.bodyToFlux(Object.class))，
                    Object.class
            ));
}

</code></pre><p style="color:#24292f; text-align:start">WebFlux 压测结果如下：<img alt="087.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/087.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看到，WebFlux 的请求完全没有阻塞，仅用了 25 个线程就达到了 964 req/sec 的吞吐。</p><span id="OSC_h2_21"></span><h2>Tomcat+虚拟线程池</h2><p style="color:#24292f; text-align:start">与平台线程相比，虚拟线程的内存占用量要低得多，运行程序大量的创建虚拟线程，而不会耗尽系统资源；同时当遇到 Thread.sleep()，CompletableFuture.await()，等待 I/O，获取锁时，虚拟线程会自动卸载，JVM 可以自动切换到另外的等待就绪的虚拟线程，提升单个平台线程的利用率，保证平台线程不会浪费在无意义的阻塞等待上。</p><p style="color:#24292f; text-align:start">要想使用虚拟线程，需要先在启动参数中加上 --enable-preview，同时 Tomcat 在 10 版本已支持虚拟线程，我们只需要替换 Tomcat 的平台线程池为虚拟线程池即可。</p><pre><code>@Bean
public TomcatProtocolHandlerCustomizer&lt;?&gt; protocolHandler() {
    return protocolHandler -&gt;
            protocolHandler.setExecutor(Executors.newVirtualThreadPerTaskExecutor());
}


private final RestTemplate restTemplate;

@GetMapping
public ResponseEntity&lt;Object&gt; callSlowServer(){
    return restTemplate.getForEntity("http://127.0.0.1:8000"， Object.class);
}
</code></pre><p style="color:#24292f; text-align:start">最终压测结果如下：<img alt="665.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/665.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">可以看到虚拟线程的压测结果实际上与 WebFlux 的情况相同，<strong>但我们根本没有使用任何复杂的响应式编程技术</strong>。同时对慢速服务器的调用，也使用常规的阻塞 RestTemplate。<strong>我们所做的只是用虚拟线程执行器替换线程池就达到更复杂的 Webflux 写法相同的效果。</strong></p><p style="color:#24292f; text-align:start">总的压测结果如下：<img alt="109.png" src="https://h5cdn.dewu.com/efe/ctoo-open-blog-admin/10569101/109.png" referrerpolicy="no-referrer"></p><p style="color:#24292f; text-align:start">通过以上压测结果，我们可以得出以下结论：</p><ul><li>传统的线程池模式效果差强人意，可以通过提高线程数量可以提升吞吐，但是需要考虑到系统容量和资源限制，但是对于大部分场景来说使用线程池去处理阻塞操作仍然是主流且不错的选择。</li><li>WebFlux 的效果非常好，但是考虑到需要完全按照响应式风格进行开发，成本及难度较大，同时 WebFlux 与现有的一些主流框架存在一些兼容问题，例如 Mysql 官方 IO 库不支持 NIO、Threadlocal 兼容问题等等。现有应用的迁移基本要重写所有代码，改动量和风险都不可控。</li><li><strong>虚拟线程的效果非常好，最大的优势就是我们没有修改代码或采用任何反应式技术，唯一更改是将线程池替换为虚拟线程</strong>。虽然改动较小，但与使用线程池相比，性能结果得到了显著改善。</li></ul><p style="color:#24292f; text-align:start">基于上述的压测结果，可以较为乐观的认为虚拟线程会颠覆我们目前的服务和框架中的请求处理方法。</p><span id="OSC_h1_22"></span><h1>六、总结</h1><p style="color:#24292f; text-align:start">过去很长时间，在编写服务端应用时，我们对于每个请求，都使用独占的线程来处理，请求之间是相互独立的，这就是<span>&nbsp;</span><strong>一请求一线程的模型</strong>这种方式易于理解和编程实现，也易于调试和性能调优。</p><p style="color:#24292f; text-align:start">然而，一请求一线程风格并不能简单地使用平台线程来实现，因为平台线程是操作系统中线程的封装。操作系统的线程会申请成本较高，存在数量上限。**对于一个要并发处理海量请求的服务器端应用来说，对每个请求都创建一个平台线程是不现实的。**在这种前提下，涌现出一批非阻塞 I/O 和异步编程框架，如 WebFlux ，RX-Java。当某个请求在等待 I/O 操作时，它会暂时让出线程，并在 I/O 操作完成之后继续执行。通过这种方式，可以用少量线程同时处理大量的请求。这些框架可以提升系统的吞吐量，但是要求开发人员必须熟悉所使用的底层框架，并按照响应式的风格来编写代码，响应式框架的调试困难，学习成本，兼容问题使得大部分人望而却步 。 在使用虚拟线程之后，一切都将改变，开发人员可以使用目前最习惯舒服的方式来编写代码，<strong>高性能和高吞吐由虚拟线程自动帮你完成，这极大地降低了编写高并发服务应用的难度。</strong></p><p style="color:#24292f; text-align:start"><strong>参考文档：</strong></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenjdk.org%2Fjeps%2F444" target="_blank">https://openjdk.org/jeps/444</a></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F514719325" target="_blank">https://zhuanlan.zhihu.com/p/514719325</a></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.vlts.cn%2Fpost%2Fvirtual-thread-source-code%23%25E5%2589%258D%25E6%258F%2590" target="_blank">https://www.vlts.cn/post/virtual-thread-source-code#%E5%89%8D%E6%8F%90</a></p><p style="color:#24292f; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F499342616" target="_blank">https://zhuanlan.zhihu.com/p/499342616</a></p><p style="color:#24292f; text-align:start">*<strong>文/creed</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com" target="_blank">得物技术官网</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10319533</guid>
            <link>https://my.oschina.net/u/5783135/blog/10319533</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[苹果开源深度学习框架 MLX，专门针对 Apple Silicon 芯片优化]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>苹果开源了针对 Apple Silicon 芯片优化的 MLX 深度学习框架，并表示该框架可以简化研究人员在&nbsp;<span>Mac、iPad、iPhone 平台设计和部署模型的过程。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-5c9da56834a3118a57e83b8ae26e0181df3.png" referrerpolicy="no-referrer"></p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fml-explore%2Fmlx" target="_blank">https://github.com/ml-explore/mlx</a></u></em></p><p>根据介绍，该深度学习框架提供了与主流开发工具接轨的 API、支持延迟计算、采用动态设计并软硬结合、对研究人员较为友好，且具有统一内存优势。</p><p><strong>MLX 主要特性</strong></p><ul><li><p><strong>提供开发者熟悉的 API</strong>：MLX 具有和 NumPy 接近的 Python API，此外还拥有功能齐全的 C++ API，它与 Python API 非常相似。 MLX 具有<code>mlx.nn</code>和<code>mlx.optimizers</code>等更高级别的包，其 API 紧密贴合 PyTorch，以简化构建更复杂的模型</p></li><li><p><strong>可组合函数转换</strong>：MLX 具有用于自动微分、自动矢量化和计算图优化的可组合函数转换</p></li><li><p><strong>惰性计算 (Lazy computation)</strong>：MLX 中的计算是惰性计算。数组仅在需要时才会具体化</p></li><li><p><strong>动态图构建</strong>：MLX 中的计算图采用动态构建，更改函数参数的形状不会触发缓慢的编译，并且调试简单直观</p></li><li><p><strong>多设备：</strong>可以在任何支持的设备上运行（当前为 CPU 和 GPU），确保用户能够充分利用硬件</p></li><li><p><strong>具备统一内存优势</strong>：MLX 和其他框架的显着区别是采用统一内存模型。 MLX 中的数组位于共享内存中，可以在任何支持的设备类型上执行 MLX 阵列上的操作，而无需移动数据。</p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269870</guid>
            <link>https://www.oschina.net/news/269870</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[麦当劳中国启动鸿蒙原生应用开发]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">麦当劳中国 12 月 6 日与华为达成鸿蒙合作协议，正式宣布麦当劳中国 APP 将基于 HarmonyOS NEXT 启动鸿蒙原生应用开发。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">中国市场已经成为了麦当劳全球的第二大市场。</span>麦当劳中国在中国市场坐拥 5500 多家餐厅，拥有超过 20 万员工，每年服务顾客超过十亿人次，成为首批启动鸿蒙原生应用开发的全球大型连锁餐饮企业。</span></p><p><span style="color:#000000"><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-0f4b27f891e839fc65b056b51f6d64a2c7d.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">目前，美团、去哪儿、新浪、钉钉、蚂蚁集团、小红书、58 集团、哔哩哔哩、高德地图等均已启动鸿蒙原生应用开发。</span></p><p><span style="background-color:#ffffff; color:#000000">华为终端云服务开发者服务与平台部总裁望岳表示：「麦当劳中国启动鸿蒙原生应用开发，是鸿蒙生态发展在餐饮界的又一次重要突破。」</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269869</guid>
            <link>https://www.oschina.net/news/269869</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[睿思芯科正式加入 deepin（深度）社区，共同推进 RISC-V 生态繁荣！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">内容来源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社区</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">近日，睿思芯科与&nbsp;deepin（深度）社区签署了&nbsp;CLA（Contributor License Agreement，贡献者许可协议），正式宣布加入&nbsp;deepin（深度）社区。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="383" src="https://storage.deepin.org/thread/202312070959511778_%E9%BB%98%E8%AE%A4%E6%A0%87%E9%A2%98__2023-12-07+09_58_20.jpeg" width="900" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">作为一家专注于 RISC-V 芯片设计开发的公司，睿思芯科始终致力于为用户提供高算力、低功耗和高安全性的处理器产品。通过加入 deepin（深度）社区，睿思芯科将进一步加强与开源社区的合作，推动技术创新和生态发展：</p><ul><li><p>在产品方面，睿思芯科将积极参与 deepin（深度）操作系统的适配和优化，共同探索和开发新的功能和应用，为 deepin 用户提供更好的体验；</p></li><li><p>在技术方面，将持续推动 deepin（深度）操作系统与 RISC-V 芯片的技术创新和发展，提升 deepin（深度）操作系统在 RISC-V 芯片上的性能和安全性；</p></li><li>在生态方面，将更多地参与 deepin（深度）社区的活动和项目，与 deepin 的众多合作伙伴一起，为用户提供更可靠的 RISC-V 芯片产品和服务，共同打造繁荣的 deepin 生态。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>「生态合作既要脚踏实地，也需要仰望星空。」</strong>对于此次合作，统信软件生态中心硬件生态部总经理苏毓航表示，「站在操作系统的角度来看，对于和睿思芯科及 RISC-V 的产品及生态发展，可以关注以下三个方向：<strong>第一，基于 deepin（深度）社区进行第一阶段的产品适配，同时放眼全球生态，坚持开放思维，寻找差异化发展之路；第二，专注实现应用场景的落地，尤其是在 AIoT、专用芯片、数据中心、边缘计算市场的应用；第三，共同培育人才和开发者生态，精简指令集的工具链及操作系统软件生态建设仍需要高水平的人才。</strong>」</p><hr><h4><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank"><strong>关于 deepin（深度）&nbsp;社区</strong></a></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">deepin（深度）社区成立于 2008 年，是国内历史悠久，全球规模最大且最活跃的开源 OS 社区之一，也是中国首个桌面操作系统根社区，致力通过社区开发与协作，为所有人提供自由、开放的交流平台以及最好的开源操作系统，推动桌面系统的开源与革新。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">目前，deepin（深度）社区注册用户近 15 万人，总发帖量 100 万+，共创建 44 个 SIG 组，累计解决 Issue 达 8000+，PR 超 15000+，总开源代码超过 1000 万行。同时，deepin（深度）社区积极吸纳全球开源智慧，推动操作系统技术和产品创新，用户遍布全球 100 多个国家和地区，已有 6 个海外分支社区，涵盖西班牙、巴西、意大利、俄罗斯等，镜像站点 150+，全球用户累计超过 300 万+。</p><h4><strong>关于睿思芯科</strong></h4><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">睿思芯科成立于 2018 年，主要开发基于 RISC-V 的处理器，提供垂直领域处理器设计及芯片解决方案，满足从边缘计算到数据中心等各领域的要求，客户涵盖国内外多家知名企业，开展处理器 IP 授权和 SoC 开发合作。公司创始团队来自于加州大学伯克利分校 RISC-V 原创项目组，拥有 RISC-V CPU 领域的深厚学识和卓越人才，具备世界一流的研发实力，致力于高端处理器解决方案的自主研发，聚焦 RISC-V CPU 核心技术和产品的研究与突破。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269863</guid>
            <link>https://www.oschina.net/news/269863</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌正式发布最强 AI 模型 Gemini]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>12 月 6 日，谷歌宣布推出其认为规模最大、功能最强大的人工智能模型 <strong>Gemini</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3b160dbfcd5f47ad00f617e0c64f7c2889e.png" referrerpolicy="no-referrer"></p><p>Gemini 将包括三种不同的套件：<strong>Gemini Ultra、Gemini Pro 和 Gemini Nano</strong>。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e8d709129890d597fe88456b9f64fdb2a43.jpg" referrerpolicy="no-referrer"></p><p><strong><em>Gemini Ultra 能力最强，Gemini Pro 可扩展多任务，Gemini Nano 适用于特定任务和移动设备。</em></strong></p><p>Google DeepMind 首席执行官兼联合创始人 Demis Hassabis 说道，Gemini 是一个多模态大模型，这意味着它可以概括并无缝地理解、操作和组合不同类型的信息，包括文本、代码、音频、图像和视频。</p><p>据介绍，从自然图像、音频和视频理解到数学推理， Gemini Ultra 在大型语言模型研发中被广泛使用的 32 个学术基准测试集中，在其中 30 个测试集的性能超过了目前最强的大语言模型 GPT-4。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-5f610c5aa071ded6d966aa4faa37051e950.png" referrerpolicy="no-referrer"></p><p>Gemini Ultra 在 MMLU（大规模多任务语言理解数据集）中的得分率高达 90.0%，首次超越了人类专家。MMLU 结合了数学、物理、历史、法律、医学和伦理学等 57 个科目来测试大模型的知识储备和解决问题的能力。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-6952202902ed32051c87ec7c36aa9e34475.png" referrerpolicy="no-referrer"></p><blockquote><p><strong>更多评测数据查看：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeepmind.google%2Ftechnologies%2Fgemini%2F%23introduction" target="_blank">https://deepmind.google/technologies/gemini/#introduction</a></em></u></strong></p></blockquote><p>Google 将在其产品中添加 Gemini。从今天开始，<strong>Bard 将使用 Gemini Pro 的微调版本来执行更高级的推理、规划、理解等。这是 Bard 自推出以来最大的升级</strong>。</p><p>Google 还将 Gemini 引入了 Pixel。Pixel 8 Pro 将是第一款运行 Gemini Nano 的智能手机。</p><p>在接下来的几个月中，Gemini 将出现在 Google 更多的产品和服务中，例如搜索、广告、Chrome 和 Duet AI。</p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fgoogle-gemini-ai%2F" target="_blank">详情查看谷歌官方通告</a></em></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 07 Dec 2023 00:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269844/google-gemini-ai</guid>
            <link>https://www.oschina.net/news/269844/google-gemini-ai</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[把电脑分辨率改成 500% —— 「赛博灯泡」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天网上冲浪看到了一个新梗：<strong>「赛博灯泡」</strong>，和古早的「别吞灯泡」老梗一样——</p><p><img src="https://static.oschina.net/uploads/space/2023/1206/194014_qo1V_2720166.gif" referrerpolicy="no-referrer"></p><p>不听劝的网友看到后纷纷将电脑分辨率调成 500%，结果不负众望：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b58bdd1d9ac016386d141c5f1775643896a.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-eeb007b40937823463cc0131b6201723aab.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8828681c7e3dd14ebf15b515bab9e525c4d.png" referrerpolicy="no-referrer"></p><p>现实中这样的例子比比皆是：别舔冬天的栏杆、别吃 xxx 辣薯片等等。触发这些经典名场面的条件很容易就能总结：</p><p>1.尝试门槛低<br> 2.后果严重，但又没有那么严重<br> 3.明确警告「不要尝试」</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-83e00d1164813fed613e5e6aeeb4d39b0c1.png" referrerpolicy="no-referrer"></p></blockquote><p>对了，谁能说一下怎么恢复到正常的分辨率。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 11:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269806</guid>
            <link>https://www.oschina.net/news/269806</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[小米 14 系列手机内核源代码已托管至 GitHub]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>小米 14 系列手机 (Xiaomi 14 &amp; Xiaomi 14 Pro) 的内核源代码已上传至 GitHub。提交记录显示，AOSP 版本基于 Android U，标签为 KERNEL.PLATFORM.3.0.r1-03200-kernel.0-1。</p><p><img height="1372" src="https://oscimg.oschina.net/oscnet/up-613df6bb8f2fb67ba1e36658886adfa4bab.png" width="1776" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FMiCode%2FXiaomi_Kernel_OpenSource%2Fcommit%2F317e609aa4fb956c3aff565b62215e5a8041ca0c" target="_blank">https://github.com/MiCode/Xiaomi_Kernel_OpenSource/commit</a></u></em></p><p>由于 Android 系统是基于 Linux 的，而 Linux 采用 GPLv2 授权，根据 GPL 协议的要求，派生作品均需要发布源代码。小米从 2018 年开始把新机型的内核源码开源，<strong>开源时间通常为新机发布后的三个月内</strong>。从 2019 年的小米 9 开始，小米将开源时间改为新机上市同时开源。</p><p>因此从小米 9 系列开始，几乎总会在发布当天或者隔一天就公开源码，不过这次的小米 14 系列机型慢了一个多月。</p><p><strong>延伸阅读</strong></p><ul><li><a href="https://www.oschina.net/news/125036/xiaomi-mi10-kernel-code">小米开源新机 Mi 11 内核源码</a></li><li><a href="https://www.oschina.net/news/114993/xiaomi-redmi-note-9-pro-max-8-kernel-source-code">小米开源 Redmi Note 8 Pro 和 Note 9 Pro 系列的内核源码</a></li><li><a href="https://www.oschina.net/news/114529/xiaomi-redmi-k30-pro-kernel-source-code">小米开源 Redmi K30 Pro 内核源码</a></li><li><a href="https://www.oschina.net/news/104598/xiaomi-9-open-source-kernel-code">小米 9 开源内核代码，上市即开源</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 10:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/269796</guid>
            <link>https://www.oschina.net/news/269796</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[揭秘 Zadig V2.0.0 新开源架构：效率飙升 50% 的背后故事！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" src="https://pic1.zhimg.com/80/v2-07cd622e59f2c7ab34d05817fd5cd569_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p>11 月初，Zadig 官方合并了 Zadig 系列产品并正式发布了 V2.0.0 全新架构「 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490989%26idx%3D1%26sn%3D53f771dcb0349babdc0077bd65ad52fa%26chksm%3Dcfb4510df8c3d81b11eb7a6f6ade9b4ba0b9d32f2d59e5d324eaee65487c1f83847edf1290bb%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">深秋，寒露：是时候和 Zadig 说再见了</a>」，此次合并基于开源 Zadig v1.18.0 最新版，并整合了 ZadigX v1.8.0 企业版的全部新功能代码。新版本定名为 Zadig v2.0.0，服务端代码完全开源于 GitHub。对于社区用户而言，V2.0.0 在原有开源基础上提供更多企业级功能，改进了易用性和性能，优化了安全细节，工作流并行和复杂场景的执行效率显著提高，提升效率高达 50%。Zadig 的资源运行成本也降低了近 30%。未来迭代中，所有用户将持续获得产品底层能力的可靠性，助力更多企业提升云原生持续交付能力，为开发者提供更出色的体验。对于已在大规模使用 Zadig 的用户，平滑升级后可以免费激活并体验专业版功能长达 30 天，到期后数据保留，基础版功能仍可正常使用。以下将详细介绍架构升级细节、业务及系统架构变化内容。</p><span id="OSC_h1_1"></span><h1><span style="color:#fd2968"><strong>Why Zadig V2.0.0 架构升级背景</strong></span></h1><p>随着业务的不断扩展，Zadig 面临的挑战也在不断演变。为了确保持续发展、满足用户需求，对 V1.x 系统架构进行升级已成为迫切需求。我们主要考虑到以下方面：</p><ol><li><p><span style="color:#fd2968"><strong>性能需求：</strong></span> v1.x 版本在处理大量请求时出现性能瓶颈，尤其在用户数量增加和权限配置复杂的情况下。升级旨在提高系统响应速度，改善用户体验。</p></li><li><p><span style="color:#fd2968"><strong>安全需求：</strong></span> 随着系统功能逐渐完善，用户关注点转向使用体验和安全性。v1.x 版本中的权限系统可能存在配置信息泄露问题。为了满足更细粒度权限管控和更复杂用户系统的需求，我们需要进行架构升级。</p></li></ol><span id="OSC_h1_2"></span><h1><span style="color:#fd2968"><strong>升级涉及的组件变化</strong></span></h1><p>Zadig 的底层部署基于标准的 Helm Chart，组件资源和配置在 Chart 中定义。从 Zadig v1.x.0 到 Zadig v2.0.0，以下是组件的变化：</p><p><span style="color:#fd2968"><strong><em>新增服务</em></strong></span></p><ul><li><p>user: 2.0.0</p></li><li><p>time-nlp: 2.0.0</p></li><li><p>redis: latest</p></li></ul><p><span style="color:#fd2968"><strong><em>下线服务</em></strong></span></p><ul><li><p>nsq</p></li><li><p>opa</p></li><li><p>resource-server</p></li></ul><p>Zadig 使用标准 Helm 执行部署，组件资源以及配置均在 Chart 中定义，Chart 结构如下：</p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-4a8fc9307e967dd7b083328d50a0d35d_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><span id="OSC_h1_3"></span><h1><span style="color:#fd2968"><strong>升级后的架构图示</strong></span></h1><p>Zadig V2.0.0 业务和系统架构图如下所示，帮助深入了解 Zadig v2.0.0 的整体业务和技术架构。</p><p style="text-align:center"><img alt="" src="https://pic1.zhimg.com/80/v2-dea2f29c4699ac8a1de1baa5c6464012_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><span style="color:#999999">Zadig v2.0.0 业务架构</span></p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-810c1ca4d6ee9df7ab44a9ee09561b9b_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><span style="color:#999999">Zadig v2.0.0 系统架构</span></p><span id="OSC_h1_4"></span><h1><span style="color:#fd2968"><strong>业务效果显著</strong></span></h1><span id="OSC_h3_5"></span><h3><span style="color:#fd2968">01-工作流效率提升：</span></h3><p>使用模板构建、执行和列表页面加载速度显著提高，使用户操作更为高效。</p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-47a242e9dccb5a756698aabb9ad65ff5_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><span id="OSC_h3_6"></span><h3><span style="color:#fd2968">02-环境页面加载效率提升：</span></h3><p>页面加载效率提高了 40%，大大提升了诊断问题的速度。</p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-2390dc99af5c1e44f6198ce4a2c8308d_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><span id="OSC_h3_7"></span><h3><span style="color:#fd2968">03-系统资源优化：</span></h3><p>预计系统整体负载将减少 30% - 40%，涉及 CPU 和内存资源的节约。</p><p style="text-align:center"><img alt="" src="https://pica.zhimg.com/80/v2-7e36013d61672f0cd8eac5dd05d8d000_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-f3258c8a46c58c0e87567ace72745773_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center"><span style="color:#999999">内部性能测试结果，不同场景下存在数据差异性，仅供参考</span></p><hr><p style="text-align:center">&nbsp;</p><p style="text-align:center"><span style="color:#fd2968">立即体验 Zadig V2.0 新架构，开启高效交付之旅！</span></p><p style="text-align:center"><span style="color:#fd2968"><strong>Zadig 开放，链接，专业</strong></span></p><p style="text-align:center"><img alt="" src="https://picx.zhimg.com/80/v2-1390b9a380108bf281ae5a0946a15087_720w.jpg?source=d16d100b" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>推荐阅读</strong></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">是时候和 Jenkins 说再见了</a></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491180%26idx%3D1%26sn%3D3320b05425fb5608aa0ddb994376d7ff%26chksm%3Dcfb452ccf8c3dbda46e16a0728daeed32cd172d4753b31bf89dc8471078dc4116404c820426c%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">Jenkins 任务如何迁移到 Zadig 工作流</a></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491208%26idx%3D1%26sn%3D6d1a8fc08eae6c00c180939da8e213eb%26chksm%3Dcfb45228f8c3db3efac6c9116f0a26cacdb6e8c6dcf71e8756608d3ae908d13a1c6676f80dbf%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">Jenkins 迁移 Zadig，新项目实施上线效率提升 6 倍</a></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" rel="nofollow" target="_blank">Zadig vs. Jenkins 详细比对：时代的选择与开发者之选</a></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491208%26idx%3D1%26sn%3D6d1a8fc08eae6c00c180939da8e213eb%26chksm%3Dcfb45228f8c3db3efac6c9116f0a26cacdb6e8c6dcf71e8756608d3ae908d13a1c6676f80dbf%23rd" rel="nofollow">阅读原文</a>&nbsp;/&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" rel="nofollow">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig" rel="nofollow">Zadig 在 Gitee</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 06 Dec 2023 10:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10319356</guid>
            <link>https://my.oschina.net/koderover/blog/10319356</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
    </channel>
</rss>
