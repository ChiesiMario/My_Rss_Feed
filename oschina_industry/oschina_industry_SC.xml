<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 29 Nov 2023 12:11:09 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Go 语言微服务框架重磅升级：dubbo-go v3.2.0 -alpha 版本预览]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:justify">随着 Dubbo3 在云原生微服务方向的快速发展，Dubbo 的 go 语言实现迎来了 Dubbo3 版本以来最全面、最大幅度的一次升级，这次升级是全方位的，涉及 API、协议、流量管控、可观测能力等。总的来说，新版本的 dubbo-go：</p><ul><li><strong>全面升级 Triple 协议，</strong>兼容 gRPC、标准 HTTP 客户端，提供简单明了的 API 用于编写 RPC server 与 client，解决组件间的基本通信问题。</li><li><strong>针对微服务场景，提供了完善的服务治理能力，</strong>这包括配置管理、可观测性、流量管控规则、生态集成与适配等的全面升级。</li></ul><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-c4c6b5317adb83a4b234eb8fcd15d8c9_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h3_1"></span><h3>全新升级的 Triple 协议</h3><p style="text-align:justify">基于 dubbo-go 实现的 Triple 协议，你可以轻松编写浏览器、gRPC 兼容的 RPC 服务，并让这些服务同时运行在 HTTP/1 和 HTTP/2 上。</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-8146beb5d33000f7180c25928e62fba0_720w.webp" referrerpolicy="no-referrer"></p><p>如上图所示，你可以使用 "http+json" 的标准形式访问 dubbo-go 发布的后端 triple 服务，基于这一特性， 我们可以在 dubbo 客户端在浏览器页面、移动设备上访问后端服务，使用标准 cURL 工具访问服务，也可以让比如 Spring 体系的应用轻松的调通 Dubbo 服务。</p><p style="text-align:justify">由于 Triple 协议完全兼容 gRPC 协议，Dubbo 后端服务有可以直接调通标准的 gRPC 服务，它们之间可以无缝的互通，不论是 unary 还是 streaming 通信模式。</p><span id="OSC_h4_2"></span><h4>发布一个 triple rpc 服务</h4><p style="text-align:justify">为了体验升级后的 triple 协议，我们接下来会尝试启动一个 dubbo-go server，并发布一个基于 triple 协议的服务。</p><p style="text-align:justify">创建一个新的 server 并启动 server，它将在指定的端口监听 triple 协议请求。</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServerProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50051),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}</code></pre><span id="OSC_h4_3"></span><h4>cURL 访问服务</h4><p style="text-align:justify">Triple 服务启动完成之后，最简单方式是使用 HTTP/1.1 POST 访问服务，参数则作以标准 JSON 格式作为 HTTP 负载传递。如下是使用 cURL 命令的访问示例：</p><pre><code>curl \
    --header "Content-Type: application/json" \
    --data '{"name": "Dubbo"}' \
    http://localhost:50051/greet.GreetService/Greet</code></pre><p style="text-align:justify">Triple 协议的一项重大升级是支持标准 http 工具直接访问，通过 cURL 可以极大的降低 dubbo-go 服务的测试验证、前端接入成本。</p><span id="OSC_h3_4"></span><h3>简单明了的 API</h3><p style="text-align:justify">Dubbo Go SDK 支持使用 IDL 或编程语言特有的方式定义服务，并提供一套轻量的 API 来发布或调用这些服务。在上一节的示例中，我们已经看到了部分 dubbo-go API 的使用方式，接下来，让我们更仔细全面的看一下新版本的 API 设计。</p><span id="OSC_h4_5"></span><h4>RPC Server 与 Client</h4><p style="text-align:justify">对于一些 RPC 通信的场景，开发者只需要使用 dubbo-go 编写一个最简单的 RPC server 或者 RPC client，这在新版本 dubbo-go 中只需要几行代码即可完成。</p><p style="text-align:justify">通常，我们会使用 Protocol Buffer (IDL) 来定义一个 Dubbo 服务。</p><pre><code>syntax = "proto3";
package greet;

message GreetRequest {
  string name = 1;
}

message GreetResponse {
  string greeting = 1;
}

service GreetService {
  rpc Greet(GreetRequest) returns (GreetResponse) {}
}</code></pre><p style="text-align:justify">使用 Protocol Buffers Compiler 从 IDL 生成 stub 代码（篇幅关系，我们不在此展示，具体请参见官网 dubbo-go 快速开始）。接下来，我们实现 greettriple.GreeterClient 接口并提供自定义服务实现。</p><pre><code>type GreeterServer struct {
}

func (s *GreeterServer) SayHello(ctx context.Context, in *greet.HelloRequest) (*greet.User, error) {
  return &amp;greet.User{Name: "Hello " + in.Name, Id: "12345", Age: 21}, nil
}</code></pre><p style="text-align:justify">以下是一个简单的 RPC server 示例，执行协议信息，并注册服务到 server 中：</p><pre><code>func main() {
  srv, err := server.NewServer(
    server.WithServer_Protocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
  if err != nil {
    panic(err)
  }
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}</code></pre><p style="text-align:justify">如前面 Triple 协议一节所述，你可以使用 cURL 直接测试以上 server 服务运行正常。与此同时，对应的 RPC client 示例如下：</p><pre><code>func main() {
  // for the most brief RPC case
  cli, err := client.NewClient(
    client.WithURL("tri://127.0.0.1:50052"),
  )
  if err != nil {
    panic(err)
  }
  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  common.TestClient(svc)
}</code></pre><span id="OSC_h4_6"></span><h4>微服务开发</h4><p style="text-align:justify">如果你正在开发微服务应用，那么除了 RPC 通信之外，你通常还需要为应用配置一些服务治理能力，比如 retistry 注册中心、配置中心、可观测能力等。</p><p style="text-align:justify">以下展示了如何使用 dubbo-go 开发一个微服务应用。</p><p style="text-align:justify">首先，创建一个代表微服务的应用 Server，将服务注册给它，添加注册中心等服务治理配置。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
      protocol.WithTriple(),
      protocol.WithPort(50052),
    ),
  )
    // create a server with registry and protocol set above
  srv, err := ins.NewServer()
  if err != nil {
    panic(err)
  }
    // register a service to server
  if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
  }
    // start the server
  if err := srv.Serve(); err != nil {
    panic(err)
  }
}</code></pre><p style="text-align:justify">其中，Instance 是我们在新版本中引入的全局配置，你可以将所有微服务全局配置在这里进行初始化。这里，我们设置了微服务通信协议 protocol 和注册中心 registry，如以下代码片段所示：</p><pre><code>ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
        registry.WithZookeeper(),
        registry.WithAddress("127.0.0.1:2181"),
    ),
    dubbo.WithProtocol(
        protocol.WithTriple(),
        protocol.WithPort(50052),
    ),
)</code></pre><p style="text-align:justify">接下来的操作就非常简单明了了，我们创建一个 server，将服务注册给它并启动，如下所示。如果有更多的服务，则可以依次注册到 server 后再启动。</p><pre><code>// create a server with registry and protocol set above
srv, err := ins.NewServer()
// register a service to server
if err := greettriple.RegisterGreetServiceHandler(srv, &amp;api.GreetTripleServer{}); err != nil {
    panic(err)
}
// start the server
if err := srv.Serve(); err != nil {
    panic(err)
}</code></pre><p style="text-align:justify">以上就是一个微服务应用的基本开发过程，如果你的微服务应用要调用一些远程 Dubbo 服务，那么你只需要参照以下方式创建一个 client 就行了。</p><p style="text-align:justify">下面的代码示例创建了一个 client，紧接着生成了一个 GreetService 远程服务代理，之后，就可以像调用本地方法一样调用远端 Dubbo 服务了。client 将基于注册中心实现 server 实例的自动发现并自动为流量应用负载均衡策略。</p><pre><code>func main() {
  // configure global configurations and common modules
  ins, err := dubbo.NewInstance(
    dubbo.WithName("dubbo_test"),
    dubbo.WithRegistry(
      registry.WithZookeeper(),
      registry.WithAddress("127.0.0.1:2181"),
    ),
  )
  
  // configure the params that only client layer cares
  cli, err := ins.NewClient()
  if err != nil {
    panic(err)
  }

  svc, err := greettriple.NewGreetService(cli)
  if err != nil {
    panic(err)
  }

  resp, err := svc.Greet(context.Background(), &amp;greet.GreetRequest{Name: "triple"})
  if err != nil {
    return err
  }
  logger.Infof("TRIPLE unary call resp: %s", resp.Greeting)
}</code></pre><span id="OSC_h3_7"></span><h3>企业级服务治理能力</h3><span id="OSC_h4_8"></span><h4>动态配置</h4><p style="text-align:justify">除了 API 模式之外，Dubbo-go 支持基于配置文件驱动的编码方式，这对于一些更大规模的微服务开发场景非常适用。在这种模式下，我们将 registry、protocol 等组件配置，甚至包括服务声明等都放在 dubbogo.yml 文件中，框架会在启动过程中完成配置文件加载。</p><p style="text-align:justify">以下是一个基于 dubbogo.yml 的微服务应用的开发示例：</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-7420aaf1df69816f650d9fafc20a94e5_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">其中，server.go 定义如下：</p><pre><code>func main() {
  greettriple.SetProviderService(&amp;GreeterServiceImpl{})
  if err := dubbo.Load(); err != nil {
    panic(err)
  }
}</code></pre><p style="text-align:justify">dubbogo.yml 示例内容如下：</p><pre><code>dubbo:
  application: # 应用信息，服务启动后会将相关信息注册到注册中心，可被客户端从 url 中识别
    name: myApp
  registries:
    nacos:
      protocol: nacos # 注册中心选择 nacos 
      address: 127.0.0.1:8848 # nacos ip
      group: DEFAULT_GROUP # nacos group, 默认 DEFAULT_GROUP
      namespace: 9fb00abb-278d-42fc-96bf-e0151601e4a1 # nacos namespaceID, should be created before. 默认 public
      username: abc
      password: abc
  protocols:
    dubbo:
      name: tri
      port: 20000
  provider:
    services:
      UserProviderWithCustomGroupAndVersion: # 接口三元组：接口名、版本号、分组。client 和 server 需要保持一致。
        interface: org.apache.dubbo.UserProvider.Test # 接口名必填
        version: myInterfaceVersion # 默认为空
        group: myInterfaceGroup # 默认为空</code></pre><p style="text-align:justify">可以看到相比于之前的 API 编码方式，这里的 server.go 只有两行代码，dubbo.Load() 会完成所有配置的自动组装并启动相关组件，我们只需要在启动应用时指定 export DUBBO_GO_CONFIG_PATH=$ABSOLUTE_PATH/conf/dubbogo.yml 即可。</p><span id="OSC_h4_9"></span><h4>可观测性</h4><p style="text-align:justify">自 3.2.0 版本开始，dubbo-go 重点升级了内置 metrics 指标采集能力，提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合。</p><p style="text-align:justify">dubbo-go 内置 metrics 指标导出到 Prometheus + Grafana 体系的能力，以下是 dubbo-go v3.2.0 示例在 Grafana 的监控效果图，具体示例我们将与随后发布在 dubbo-go-samples/metrics。</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-b4ec54c1891c2d1f09b91227746c751e_720w.webp" referrerpolicy="no-referrer"></p><span id="OSC_h4_10"></span><h4>流量管控</h4><p style="text-align:justify">Dubbo 提供了丰富的流量管控策略：</p><ul><li><strong>地址发现与负载均衡，</strong>地址发现支持服务实例动态上下线，负载均衡确保流量均匀的分布到每个实例上。</li><li><strong>基于路由规则的流量管控，</strong>路由规则对每次请求进行条件匹配，并将符合条件的请求路由到特定的地址子集。</li></ul><p style="text-align:justify">服务发现保证调用方看到最新的提供方实例地址，服务发现机制依赖注册中心 (Zookeeper、Nacos、Istio 等) 实现。在消费端，Dubbo 提供了多种负载均衡策略，如随机负载均衡策略、一致性哈希负载、基于权重的轮询、最小活跃度优先、P2C 等。</p><p style="text-align:justify">Dubbo 的流量管控规则可以基于应用、服务、方法、参数等粒度精准的控制流量走向，根据请求的目标服务、方法以及请求体中的其他附加参数进行匹配，符合匹配条件的流量会进一步的按照特定规则转发到一个地址子集。以下是 dubbo-go 流量管控规则可以实现的一些具体管控场景示例：</p><ul><li>基于权重的比例流量分发</li><li>灰度验证</li><li>金丝雀发布</li><li>按请求参数的路由</li><li>同区域优先</li><li>超时时间调整</li><li>重试</li><li>限流降级</li></ul><p style="text-align:justify">以下是一个基于 dubbo-go 实现的全链路灰度示例：</p><p style="text-align:center"><img src="https://pic1.zhimg.com/80/v2-d3af29d517bd1d38914a8b7df29c0384_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">以下是一个基于 dubbo-go 实现的按比例流量转发示例：</p><p style="text-align:center"><img src="https://pic3.zhimg.com/80/v2-4688342e32359c6fa7e25ef3bc3c22b6_720w.webp" referrerpolicy="no-referrer"></p><p>关于 dubbo-go 流量管控，我们以一个商城系统提供了一个完整的 demo 示例，感兴趣的读者可以参考详细信息：</p><ul><li>流量管控规则详情<strong>[1]</strong></li><li>流量管控商场示例解读<strong>[2]</strong></li></ul><span id="OSC_h4_11"></span><h4>生态</h4><p style="text-align:justify">dubbo-go 总体上遵循框架内核+插件的的设计理念，左侧的框架内核定义了 dubbo-go 作为微服务框架的一些核心概念，右侧的插件部分则提供了核心概念扩展实现。</p><p style="text-align:center"><img src="https://pic2.zhimg.com/80/v2-c4c6b5317adb83a4b234eb8fcd15d8c9_720w.webp" referrerpolicy="no-referrer"></p><p style="text-align:justify">框架内核，可分为 4 个层次，从上到下依次为：</p><ul><li><strong>API 层</strong></li></ul><p style="text-align:justify">dubbo-go 同时支持基于 IDL、interface/struct 的服务契约定义，兼顾跨语言与易用性诉求；支持基于纯 yaml 文件的微服务配置模式；提供了同步、异步、单次 (unary)、流式 (streaming) 等 RPC 通信与编码模型。</p><ul><li><strong>服务治理层</strong></li></ul><p style="text-align:justify">dubbo-go 内置了多维度的服务治理能力抽象，确保满足微服务开发与集群治理的核心诉求，这包括地址发现（Service Discovery）、负载均衡（Load Balancing）、可观测指标（Metrics）、流量管控（Traffic Management）、全链路追踪（Tracing）等。</p><ul><li><strong>RPC 协议层</strong></li></ul><p style="text-align:justify">dubbo-go 实现的最核心的 RPC 协议是 - triple 协议，triple 可同时工作在 http1/2 之上 (支持 CURL 直接访问)，兼容 gRPC；从设计上，dubbo-go 还提供了多协议发布服务的支持，你可以在一个进程内同时发布 triple、dubbo2、rest、jsonRPC 等多种不同通信协议的服务。</p><ul><li><strong>传输层</strong></li></ul><p style="text-align:justify">支持 HTTP1/2、TCP 传输层，兼顾性能与通用性，同时支持多种序列化方式。</p><p style="text-align:justify">插件体系极大的丰富了 dubbo-go 功能与生态，社区内置提供了大量的内置扩展实现，同时，开发者可以非常容易的根据需求增加扩展实现。以下是一些典型的插件定义：</p><ul><li><strong>Protocol</strong></li></ul><p style="text-align:justify">dubbo-go 基于 protocol 插件内置提供了 triple、dubbo2、rest 等协议支持，通过扩展 protocol 可以为 dubbo-go 扩展更多协议。</p><ul><li><strong>Service Discovery</strong></li></ul><p style="text-align:justify">支持 Nacos、Zookeeper、Polaris 等主流注册中心集成。</p><ul><li><strong>Traffic Management</strong></li></ul><p style="text-align:justify">dubbo-go 支持 Dubbo 体系定义的流量规则，可以实现在运行期动态的调整服务行为如超时时间、重试次数、限流参数等，通过控制流量分布可以实现 A/B 测试、金丝雀发布、多版本按比例流量分配、条件匹配路由、黑白名单等。</p><ul><li><strong>Metrics</strong></li></ul><p style="text-align:justify">提供 RPC 调用（RT、QPS、调用量、请求成功数、请求失败数、并发请求数等）、注册中心、元数据中心、配置中心交互统计等丰富的内置采集埋点，支持多维度的指标聚合。</p><ul><li><strong>Logging</strong></li></ul><p style="text-align:justify">提供通用的日志采集接口定义，内置 Zap、Logrus 支持</p><ul><li><strong>Tracing</strong></li></ul><p style="text-align:justify">提供分布式链路追踪能力，通过此插件扩展可接入 Zipkin、Jaeger、Skywalking 等链路追踪系统。</p><span id="OSC_h3_12"></span><h3>总结</h3><p style="text-align:justify">dubbo-go 3.2.0 的首个 alpha 版本将于 11 月底发布，本文是发版前的抢先预览，感兴趣的读者也可以访问源码尝鲜：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%2Ftree%2Ffeature-triple%2Fprotocol%2Ftriple%2Finternal%253Fspm%253Da2c6h.13046898.publish-article.3.79d66ffahA9acR" target="_blank">https://github.com/apache/dubbo-go/tree/feature-triple/protocol/triple/internal</a></em></u></p><p style="text-align:justify">接下来，我们将持续推进 3.2.0 版本迭代并计划与 2 月份发布正式稳定版本，详细 Roadmap 请关注项目仓库：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fgithub.com%2Fapache%2Fdubbo-go%253Fspm%253Da2c6h.13046898.publish-article.4.79d66ffahA9acR" target="_blank">https://github.com/apache/dubbo-go</a></em></u></p><p style="text-align:justify"><strong>相关链接：</strong></p><p style="text-align:justify">[1] 流量管控规则详情</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Fcore-features%2Ftraffic%2F%253Fspm%253Da2c6h.13046898.publish-article.5.79d66ffahA9acR" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/core-features/traffic/</a></em></u></p><p style="text-align:justify">[2] 流量管控商场示例解读</p><p style="text-align:justify"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Fcn.dubbo.apache.org%2Fzh-cn%2Foverview%2Ftasks%2Ftraffic-management%2F%253Fspm%253Da2c6h.13046898.publish-article.6.79d66ffahA9acR" target="_blank">https://cn.dubbo.apache.org/zh-cn/overview/tasks/traffic-management/</a></em></u></p><p style="text-align:justify"><em>作者：王宇轩， Apache Dubbo Committer</em></p><p style="text-align:justify"><strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.aliyun.com%2Farticle%2F1380725%3Futm_content%3Dg_1000384715" target="_blank">原文链接</a></strong></p><p style="text-align:justify"><strong>本文为阿里云原创内容，未经允许不得转载。</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 09:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/yunqi/blog/10314426</guid>
            <link>https://my.oschina.net/yunqi/blog/10314426</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[国内首个农业开源鸿蒙操作系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">11 月 29 日，在全球首个以供应链为主题的国家级展会——中国国际供应链促进博览会上，中信农业科技股份有限公司（简称「中信农业」）联合深圳开鸿数字产业发展有限公司（简称「深开鸿」）、华为技术有限公司（简称「华为」）正式对外发布了<strong>国内首个自主可控的农业开源鸿蒙操作系统。</strong></p><p style="margin-left:0px; margin-right:0px; text-align:start">据介绍，农业开源鸿蒙是致力于维护农业数据安全，打造自主可控的农业操作系统。</p><p><img src="https://static.oschina.net/uploads/space/2023/1129/170904_6My8_2720166.png" referrerpolicy="no-referrer"></p><p>下图是农业开源鸿蒙操作系统的演示：</p><p><img height="906" src="https://static.oschina.net/uploads/space/2023/1129/171101_l9cl_2720166.png" width="2232" referrerpolicy="no-referrer"></p><p><img height="928" src="https://static.oschina.net/uploads/space/2023/1129/171017_86bC_2720166.png" width="2226" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-116c65e954d843c9b90f6fb5ba8f83258c5.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-c8e4bc96284803ab6547db6797684372387.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fj4EIO_8RPUdwqLJBhsozAQ" target="_blank">https://mp.weixin.qq.com/s/j4EIO_8RPUdwqLJBhsozAQ</a></u></em></p><p>深开鸿 CEO 王成录博士介绍道，农业开源鸿蒙操作系统是基于 KaihongOS 的新一代面向数字农业领域的万物智联操作系统，为大小不一、类型多样设备的互联和协同提供统一的数字底座，让所有农业设备都用统一的操作系统，讲同一种语言，而且全栈关键核心技术均为国产自主研发，从底层操作系统源头上保证了数据的安全可靠。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268706</guid>
            <link>https://www.oschina.net/news/268706</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软开源 Azure RTOS，更名为 Eclipse ThreadX]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">微软<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcommunity.microsoft.com%2Ft5%2Finternet-of-things-blog%2Fmicrosoft-contributes-azure-rtos-to-open-source%2Fba-p%2F3986318" target="_blank">宣布</a>将 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fazure-rtos" target="_blank">Azure RTOS</a> 托管至&nbsp;<span style="background-color:#ffffff">Eclipse 基金会，并更名为&nbsp;Eclipse ThreadX。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Azure RTOS 是一个带有 ThreadX 实时操作系统（RTOS）的嵌入式开发套件。ThreadX 是一个普及性很高的小型 RTOS，</span>可为资源受限的设备提供可靠、超快的性能；<span style="background-color:#ffffff">目前已部署在全球超过 120 亿台设备上。除了作为 RTOS 内核的 Azure RTOS ThreadX 之外，Azure RTOS 还提供了一组系统组件来加速构建嵌入式系统和物联网应用程序。</span></span></p><p><span style="color:#000000">在基金会管理下，<span style="background-color:#ffffff">Eclipse ThreadX 项目计划将于 2024 年第一季度在 MIT 协议下开源提供。「</span><span style="background-color:#ffffff">ThreadX 将成为世界上第一个开源实时操作系统。</span><span style="background-color:#ffffff">」</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="374" src="https://oscimg.oschina.net/oscnet/up-70e9a7d446ccf867ef9551516c458a9610d.png" width="700" referrerpolicy="no-referrer"></span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">公告称，Eclipse ThreadX 为实时应用提供了一个供应商中立、开放源代码、安全认证的操作系统。它是第一个也是唯一一个具有这种独特混合属性的实时操作系统，可满足广泛的需求，使行业采用者、开发人员和最终用户都能从中受益。</span><span style="background-color:#ffffff">主要优点包括：</span></span></p><ul><li><span style="color:#000000">不间断访问：更广泛、持续地访问 ThreadX 技术</span></li><li><span style="color:#000000">加速创新：通过社区参与提供更快的更新和改进</span></li><li><span style="color:#000000">开放且可预测：透明的开发流程以增强社区协作</span></li><li><span style="color:#000000">更广泛的覆盖范围：对于各种应用来说更易于访问和通用</span></li></ul><p><span style="color:#000000">「这一变革性合作为嵌入式 RTOS 技术的空前发展铺平了道路，并将在新成立的 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprojects.eclipse.org%2Fproposals%2Feclipse-threadx" target="_blank">Eclipse ThreadX Project</a>&nbsp;<span style="color:#000000"><span style="background-color:#ffffff">和</span></span>&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fprojects.eclipse.org%2Finterest-groups%2Fthreadx-interest-group" target="_blank">Eclipse ThreadX Interest Group</a><span style="color:#4c4d4e">&nbsp;</span><span style="color:#000000">的框架内展开。<span style="background-color:#ffffff">与我们一起塑造嵌入式系统的未来并利用开源的力量促进创新！</span>」&nbsp;</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">Eclipse 基金会<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Feclipse-foundation.blog%2F2023%2F11%2F21%2Fintroducing-eclipse-threadx%2F" target="_blank">认为</a>，</span></span><span style="background-color:#ffffff"><span style="color:#222222">ThreadX 将凭借其全面的属性，迅速扩大在航空航天、汽车、物联网、医疗、交通、自动化和消费可穿戴设备等广泛用例中的采用。「Eclipse ThreadX 为行业带来了改变游戏规则的机会。」</span></span></p><p><strong><span style="background-color:#ffffff"><span style="color:#222222">项目官网：</span></span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fthreadx.io%2F" target="_blank">https://threadx.io/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 09:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268705/microsoft-azure-rtos-eclipse-threadx</guid>
            <link>https://www.oschina.net/news/268705/microsoft-azure-rtos-eclipse-threadx</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[1 - 10 月我国电子信息制造业生产持续回升]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 1-10 月份电子信息制造业运行情况已<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F-NlHIDx-kRamtsv2EoBppQ" target="_blank">公布</a>。1-10&nbsp;<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">月份，我国电子信息制造业生产持续回升，出口降幅收窄，效益持续改善，投资稳定增长，地区间营收分化明显。</span></p><p style="margin-left:0; margin-right:0"><strong>一、生产持续回升</strong></p><p style="margin-left:0; margin-right:0">1—10 月份，规模以上电子信息制造业增加值同比增长 1.7%，增速较前三季度提高 0.3 个百分点；<span>增速分别比同期工业、高技术制造业低 2.4 个和 0.2 个百分点。10 月份，规模以上电子信息制造业增加值同比增长 4.8%，较同期工业高 0.2 个百分点。</span></p><p><img height="284" src="https://oscimg.oschina.net/oscnet/up-c7e8347b11afa929069846f119706440564.png" width="500" referrerpolicy="no-referrer"></p><p>1—10 月份，主要产品中，手机产量 12.5 亿台，同比增长 1.6%，其中智能手机产量 9.06 亿台，同比下降 4.8%；微型计算机设备产量 2.81 亿台，同比下降 20.8%；集成电路产量 2765 亿块，同比增长 0.9%；光电子器件产量 11753 亿只，同比增长 9.3%。</p><p style="margin-left:0; margin-right:0"><strong>二、出口降幅收窄</strong></p><p>1—10 月份，规模以上电子信息制造业出口交货值同比下降 6.9%，降幅较前三季度收窄 1.2 个百分点，比同期工业降幅深 2.7 个百分点。10 月份，规模以上电子信息制造业出口交货值与去年同期持平。</p><p><img height="278" src="https://oscimg.oschina.net/oscnet/up-8fddcd7d4c558e2d88e81617b79a9576a58.png" width="500" referrerpolicy="no-referrer"></p><p>据海关统计，1—10 月份，我国出口笔记本电脑 11774 万台，同比下降 18%；出口手机 6.42 亿台，同比下降 6.5%；出口集成电路 2218 亿个，同比下降 4.1%。</p><p style="margin-left:0; margin-right:0"><strong>三、效益持续改善</strong></p><p style="margin-left:0px; margin-right:0px; text-align:justify">1—10 月份，规模以上电子信息制造业实现营业收入 12.1 万亿元，同比下降 2.9%，较前三季度降幅收窄 0.5 个百分点；营业成本 10.5 万亿元，同比下降 2.6%；实现利润总额 4826 亿元，同比下降 18.2%，较前三季度降幅收窄 0.4 个百分点；营业收入利润率为 4%，较前三季度持平。</p><p><img height="280" src="https://oscimg.oschina.net/oscnet/up-8fb3765349827aa46ce821c7b2ef59dfc32.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>四、投资稳定增长</strong></p><p style="margin-left:0; margin-right:0">1—10 月份，电子信息制造业固定资产投资同比增长 9.6%，比同期工业投资增速高 0.7 个百分点，但比高技术制造业投资增速低 1.7 个百分点。</p><p><img height="274" src="https://oscimg.oschina.net/oscnet/up-ed620009a27ece0de52f59079cdf61d17da.png" width="500" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong>五、地区间营收分化明显</strong></p><p>1—10 月份，规模以上电子信息制造业东部地区实现营业收入 82003 亿元，同比下降 3%，较前三季度降幅收窄 0.8 个百分点；中部地区实现营业收入 19834 亿元，同比下降 3.9%，较前三季度降幅收窄 1.3 个百分点；西部地区实现营业收入 17982 亿元，同比下降 1.9%，较前三季度降幅加深 1.8 个百分点；东北地区实现营业收入 823 亿元，同比增加 9%，较前三季度回落 0.5 个百分点。四个地区电子信息制造业营业收入占全国比重分别为 68.0%、16.4%、14.9% 和 0.7%。</p><p><img height="310" src="https://oscimg.oschina.net/oscnet/up-b0043b1d7c4585093e396d4d7d5f544fe2a.png" width="500" referrerpolicy="no-referrer"></p><p>1—10 月份，规模以上电子信息制造业京津冀地区实现营业收入 5995 亿元、同比下降 6.3%，较前三季度降幅持平，营收占全国比重 5%；长三角地区实现营业收入 33990 亿元、同比下降 3.8%，较前三季度降幅收窄 1.1 个百分点，营收占全国比重 28.2%。</p><p><span style="color:#888888">（注：1.文中统计数据除注明外，其余均为国家统计局数据或据此测算。2.文中「电子信息制造业」与国民经济行业分类中的「计算机、通信和其他电子设备制造业」为同一口径。）</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268691</guid>
            <link>https://www.oschina.net/news/268691</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴向所有用户补偿 10 元无门槛打车通用券]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>滴滴出行今日就 11 月 27 日夜间发生的系统故障进行了说明，并再一次道歉。同时，滴滴还为所有用户派发了一张「致歉补偿券」，无门槛使用，立减 10 元。</p><blockquote><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-f2fd281711327e482dba21d9ff535b24145.png" referrerpolicy="no-referrer"></p></blockquote><p>扫码领取：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-28207da7bde2ec3598e23358e58cbbeaafd.png" referrerpolicy="no-referrer"></p><p>滴滴表示，目前滴滴 App 的所有服务已经全部恢复。初步确定，这起事故的起因是底层系统软件发生故障，并非网传的「遭受攻击」，后续将深入开展技术风险隐患排查和升级工作，全面保障服务稳定性。</p><hr><p><strong>事件回顾</strong></p><ul><li><a href="https://www.oschina.net/news/268635" target="news">滴滴史上最严重服务故障，罪魁祸首是底层软件 or 「降本增笑」？</a></li><li><a href="https://www.oschina.net/news/268480" target="news">滴滴昨晚系统服务故障，技术团队连夜修复</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 07:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268677</guid>
            <link>https://www.oschina.net/news/268677</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AWS 推出 AI 聊天机器人 Amazon Q]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">AWS 正式加入聊天机器人赛道，宣布推出一款名为 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Faws%2Famazon-q-brings-generative-ai-powered-assistance-to-it-pros-and-developers-preview%2F" target="_blank">Amazon Q</a> 的生成式 AI 助手；可以帮助用户完成工作中的各种任务，如聊天、生成内容和采取行动。</span></p><p><span style="color:#000000">根据介绍，Amazon Q 主要面向企业提供，旨在帮助员工完成日常任务，例如总结文档、填写内部文件以及回答有关公司政策的问题。其可供企业使用多种功能，包括开发应用程序、转换代码、生成商业智能、充当业务应用程序的生成式 AI 助手以及帮助客户通过 Amazon Connect 产品的服务代理。</span></p><p><span style="color:#000000"><img alt="" height="260" src="https://oscimg.oschina.net/oscnet/up-1f94a6a3ef5eecb740529e810e21d309130.png" width="700" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">AWS 首席执行官 Adam Selipsky 介绍称，Amazon Q 可以利用来自各种应用程序的业务数据，包括办公软件 Microsoft 365、企业协作软件 Slack、客户服务软件 Salesforce、网络储存应用 Dropbox 和 Amazon S3。目前开箱即用地支持 40 多种应用程序和服务。</span></p><p><span style="color:#000000">他还强调了安全和隐私的重要性，并表示 Amazon Q 尊重用户现有的身份、角色和权限，不会使用用户的内容来训练其底层模型。</span></p><p><span style="color:#000000">Selipsky 表示，AWS 已将许多功能融入 Amazon Q 中以帮助开发人员，其中包括允许程序员在构建应用程序时提出问题的自然语言对话功能。与此同时，该公司还在将 Amazon Q 集成到 Visual Studio Code 和 IntelliJ IDEA 等 IDE 中。</span></p><p><span style="color:#000000">Amazon Q 目前处于预览阶段，部分功能免费对外提供。亚马逊计划未来将面向企业用户收取每人每月 20 美元的费用，为开发人员和 IT 人员提供功能的版本则将收取每人每月 25 美元。</span></p><p><span style="color:#000000">更多详情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fcn%2Fblogs%2Faws%2Famazon-q-brings-generative-ai-powered-assistance-to-it-pros-and-developers-preview%2F" target="_blank">查看官方博客</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 06:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268675/amazon-q</guid>
            <link>https://www.oschina.net/news/268675/amazon-q</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[AI 生成图片著作权侵权第一案宣判：被告构成侵权，赔偿 500 元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>11 月 29 日消息，近日，北京互联网法院针对<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FrdzctOfPu9zQaKO4ZVDCwQ" target="_blank">人工智能生成图片（AI 绘画图片）著作权侵权纠纷</a></u>作出一审判决，据悉该案为 AI 生成图片相关领域著作权第一案。</p><p>法院最终判决，<strong>被告构成侵权，需向原告公开道歉，并赔偿 500 元</strong>。</p><p>据悉，原告李某使用 AI 生成涉案图片后发布于小红书平台；被告系百家号博主，发布文章配图使用了原告该 AI 生成的图片，原告遂起诉。</p><p>北互审理认为涉案人工智能生成图片（AI 绘画图片）具备「独创性」要件，体现了人的独创性智力投入，应当被认定为作品，受到著作权法保护等。</p><p><img alt="1701225443968.png" src="https://static.oschina.net/uploads/img/202311/29143541_fABc.png" referrerpolicy="no-referrer"></p><p><img alt="图片" src="https://static.oschina.net/uploads/img/202311/29143541_3GlB.png" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FWu3-GuFvMJvJKJobqqq7vQ" target="_blank">https://mp.weixin.qq.com/s/Wu3-GuFvMJvJKJobqqq7vQ</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 06:35:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268672</guid>
            <link>https://www.oschina.net/news/268672</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[恭喜 Devlive DataCap 新晋一位 Committer]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>非常感谢所有对 DataCap 项目的支持和贡献，我们迎来了新的一位来自互联网行业的大数据资深运维工程师，感谢他对 DataCap 的支持以及代码的贡献。</p></blockquote><h3>关于 DataCap</h3><hr><p>DataCap 是数据转换、集成和可视化的集成软件。支持多种数据源，文件类型，大数据相关数据库，关系型数据库，NoSQL 数据库等。通过软件可以实现管理多种数据源，对该源下的数据进行各种操作转换，制作数据图表，监控数据源等各种功能。</p><h3>DataCap 喜迎一位 Committer 成员</h3><hr><table><tbody><tr><th>名字</th><th>职业</th><th>GitHub ID</th></tr></tbody><tbody><tr><td>陈文明</td><td>大数据资深运维工程师</td><td><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenwenming-zj" target="_blank">chenwenming-zj</a></td></tr></tbody></table><h4>个人描述</h4><hr><p>有多年大数据组件维护经验，对 Hadoop 集群有丰富的经验，同时对 Apache Kafka 以及各个大数据组件有一定的经验。</p><ol><li>优化过亿 Blocks 的 NameNode，优化解决集群小文件问题，减少 NameNode RPC 压力</li><li>迁移并运维过 PB 级别的 Hadoop 集群</li><li>维护管理万级别 Topic 的 Kafka 集群，自动化脚本实现分区均衡迁移，Reassignment 限速等</li></ol><h4>对 DataCap 的认识</h4><hr><p>在做公司 Clickhouse 迁移时，从 GitHub 中搜索，发现 datacap 项目，结合公司内部业务，经过一段时间运行后发现缺失，服务功能缺失 JVM 动态加载功能，因为我对 Shell 比较熟悉且做过 JVM 优化工作，特意在源码中支持了服务启动读取 JVM 配置功能。</p><h4>代码提交之路</h4><hr><ol><li>在 datacap 上提交了相关代码 (commit 57473faf4f45616a96962b7f84b9b5b81ecfbc42(HEAD-&gt;dev_get_jvm, origin/dev_get_jvm)</li></ol><h4>得到的收获</h4><hr><ol><li>作为大数据运维,很少参与工程项目，非常荣幸能在 datacap 上贡献自己微薄的代码</li><li>这次参与也体会到团队协助的力量，希望 datacap 做的越来越好</li></ol><h4>对新人的建议</h4><hr><ol><li>上线前整理 checklist</li><li>一定要写好注释，方便以后维护，要写好注释，可以写某个方法是做什么的，主要步骤是什么</li><li>测试！一定要多测试，先上测试环境，再上线</li><li>新参与项目时，可以多参考官方文档</li></ol><h4>如何参与 DataCap</h4><hr><ul><li>参考官网 <a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fdatacap.devlive.org%2Fdeveloper_guide%2Fenv.html" target="_blank">开发者文档</a></li><li>通过 Issues 列表参与 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevlive-community%2Fdatacap%2Fissues" target="_blank">GitHub</a>&nbsp;&amp;&nbsp; <a href="https://gitee.com/devlive-community/datacap/issues">Gitee</a></li><li>加入我们的微信群&amp;钉钉群（在代码仓库中可以看到二维码）</li><li>微信公众号后台留言（搜索微信公公众号 <code>devlive-sf</code> 关注，标记 DataCap 项目给我们留言即可）</li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268646</guid>
            <link>https://www.oschina.net/news/268646</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[两名玩家利用 DNF 漏洞获利近 1 亿元人民币，已被公诉]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>日前，南京市玄武区人民检察院依法对 2 名涉嫌非法获取计算机信息系统数据罪被告人提起公诉。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-22fa6166d578719921e446311de49657bc3.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月以来，被告人唐某利用深圳市腾讯计算机系统有限公司运营的网络游戏《地下城与勇士》个人揹包和仓库程序的漏洞，使用被告人蔡某某提供的脚本，利用游戏漏洞非法复制出「矛盾的结晶体」「扭曲的次元结晶」 「无瑕的金绿柱石」 等八种游戏道具，将所复制的游戏道具放在多个游戏公会仓库内，再进行出售。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-078b174cef4e6dae71ce7917a7f3ddb43e1.png" referrerpolicy="no-referrer"></p><p>2022 年 8 月起，被告人唐某先后向王某某、王某、周某出售非法获取的游戏道具，获利人民币 9163 万余元。被告人蔡某某将被告人唐某复制的游戏道具出售给王某某，获利人民币 182 万余元。</p><p><img src="https://oscimg.oschina.net/oscnet/up-855b94f09d04a42b9687726b3241276edaa.jpg" referrerpolicy="no-referrer"></p><hr><p>DNF 昨日在官网回应了此事：</p><blockquote><p><img height="1284" src="https://oscimg.oschina.net/oscnet/up-d04269bfc1d55a0b8914d959668a5eccc08.png" width="1506" referrerpolicy="no-referrer"></p></blockquote><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdnf.qq.com%2Fwebplat%2Finfo%2Fnews_version3%2F119%2F495%2F498%2Fm21449%2F202311%2F944229.shtml" target="_blank">https://dnf.qq.com/webplat/info/news_version3/119/495/498/m21449/202311/944229.shtml</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268643</guid>
            <link>https://www.oschina.net/news/268643</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Jenkins 任务如何迁移到 Zadig 工作流]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-645523f745c4b7ebf67fbdd388751cbe2ff.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">我们在「</span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放弃 Jenkins？这么做也能云原生</a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">」一文中详细描述了如何在保留 Jenkins 的前提下，通过 Zadig 快速提升效率和工程师幸福度。然而，尽管这样做可以取得一些显著的成果，却未能实质解决运维人员对系统维护的繁重负担。实际情况中，Jenkins 的管理和维护存在诸如插件兼容性、内存泄漏、用户权限管理、脚本维护等多方面的问题，导致运维人员仍需花费大量时间进行系统维护。因此，是否可以完全弃用 Jenkins，并将现有任务全部迁移到 Zadig 上执行呢？</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><strong>答案是肯定的</strong></span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。Zadig 不仅具备 Jenkins 的全部功能，而且能够实现软件开发过程中复杂流程的自动化。</span></p><span id="OSC_h1_1"></span><h1><strong>一、Zadig 工作流到底有何独特之处？</strong></h1><p style="margin-left:0; margin-right:0">Zadig 工作流引擎起初基于 Kubernetes 原生能力搭建，借助 Kubernertes 的资源动态分配能力，实现多任务的并发执行，相比 Jenkins 至少可以节省<span>&nbsp;</span><span><strong>50%</strong></span><span>&nbsp;</span>的资源，并可以提高至少<span>&nbsp;</span><strong><span>40%</span></strong><span>&nbsp;</span>的任务执行效率。</p><p style="margin-left:0; margin-right:0">Zadig 工作流的设计更贴合实际业务场景，支持编排产品交付过程中涉及到的任何系统和工具，如：项目管理系统、代码托管平台、测试平台、部署工具、配置管理工具、数据管理工具、审批系统、企业自建系统等等。Zadig 工作流除了具备 CI 工作流的基本能力（比如克隆代码、执行 shell 脚本、触发器、通知、缓存等等）外，支持以下更多能力：</p><ul><li><p style="margin-left:0; margin-right:0"><span>支持多服务共享构建、构建模板、利用 Serverless 资源构建</span></p></li><li><p style="margin-left:0; margin-right:0">支持多服务的并发构建、并发部署、并发测试</p></li><li><p style="margin-left:0; margin-right:0">支持项目管理中的任务状态变更、配置变更、数据变更</p></li><li><p style="margin-left:0; margin-right:0">支持蓝绿发布、金丝雀发布、分批次灰度发布、MSE 全链路和 Istio 全链路发布</p></li><li><p style="margin-left:0; margin-right:0">支持发布过程审批</p></li><li><p style="margin-left:0; margin-right:0">在执行时支持根据实际的分支策略，自由选择<span>&nbsp;</span><span style="background-color:rgba(0, 0, 0, 0.19)">Branch</span><span style="background-color:#ffffff">、</span><span style="background-color:rgba(0, 0, 0, 0.19)">PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Branch+PR/MR</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Tag</span>、<span style="background-color:rgba(0, 0, 0, 0.19)">Commit</span><span>&nbsp;</span>方式进行构建</p></li><li><p style="margin-left:0; margin-right:0"><span>......</span></p></li></ul><span id="OSC_h3_2"></span><h3><span style="color:#fd2968">工作流实现方式的细节差异</span></h3><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; box-sizing:border-box; color:rgba(0, 0, 0, 0.9); display:table; font-family:system-ui,-apple-system,&quot;system-ui&quot;,&quot;Helvetica Neue&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei UI&quot;,&quot;Microsoft YaHei&quot;,Arial,sans-serif; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:0.544px; margin:0px 0px 10px; max-width:100%; orphans:2; outline:0px; overflow-wrap:break-word !important; padding:0px; text-align:justify; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:657px; word-spacing:0px"><tbody><tr><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>工作流关键环节</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Jenkins</strong></span></p></td><td style="background-color:#ff7faa; border-color:#3e3e3e #f0f9ff #3e3e3e #3e3e3e; border-image:initial; border-style:none solid none none; border-width:0px 1px 0px 0px"><p style="margin-left:0; margin-right:0"><span style="color:#ffffff"><strong>Zadig</strong></span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>执行环境</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">手工制作环境</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">可扩展云原生环境及依赖包</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代码信息</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散配置代码源</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">统一管理多种代码来源</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>执行脚本与变量</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">分散编写脚本</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">统一配置脚本规范</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>定时触发</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">定时触发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">多种可定制触发策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>代码变更触发</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">插件代码触发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">海量多种触发策略</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>工作流间的串接</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">根据工作流状态触发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">服务化灵活编排调度</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>多任务并发执行</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">编写脚本控制并发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">云原生任务 GUI 配置并发</span></p></td></tr><tr><td style="background-color:rgba(255, 242, 243, 0.46); border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699"><strong>任务并发数量控制</strong></span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">资源节点控制并发</span></p></td><td style="border-color:#3e3e3e #7aafe7 #7aafe7 #3e3e3e; border-image:initial; border-style:solid; border-width:0px; vertical-align:top"><p style="margin-left:0; margin-right:0"><span style="color:#ff6699">统一管理并发调度策略</span></p></td></tr></tbody></table><p>&nbsp;</p><span id="OSC_h1_3"></span><h1><strong><span style="color:#ff2968">二、如何将 Jenkins 上的配置</span></strong><strong><span style="color:#ff2968">迁移到 Zadig 上</span></strong></h1><p><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">下面详细介绍如何将已经在 Jenkins 上的相应配置迁移到 Zadig 上，按照不同的阶段拆解迁移的过程。</span></p><span id="OSC_h3_4"></span><h3><span style="color:#fd2968"><strong>比较一：执行环境</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">对于工作流任务依赖的环境，在 Jenkins 上需在对应节点上手工制作，而在 Zadig 上支持管理任务运行时基础环境和依赖的软件包，方便平台运维统一管控业务构建、测试等过程使用的基础资源，保障资源的安全及合规。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 任务的执行环境通过在配置中选择运行节点来指定，任务执行过程中用到的软件包需要在对应节点上安装和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b03a84b1b4a2458670650dacef1c171c016.png" referrerpolicy="no-referrer"></p><p>&nbsp;<span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 任务的执行环境通过在配置中选择操作系统和依赖软件包来指定。</span></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-66a8378c904b5f89d3ee1eb8d897bdb75a2.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2683317702faa1d26a984502cad7be11112.png" width="2904" referrerpolicy="no-referrer"></p><p><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2acc8d6572e9822324abf804ba7b27b1fcf.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_5"></span><h3><span style="color:#fd2968"><strong>比较二：代码信息</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">对企业内部使用的代码源，在 Jenkins 上将其分散在不同的任务中进行管理，而在 Zadig 上由管理员统一集成，以确保代码源的安全性。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">下面以 GitLab 为例，比对 Jenkins 和 Zadig 上代码信息的配置。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通过配置「源码管理」来实现构建代码源的定义。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-febe241da9a1686ed0b8f46d3f0f7b21095.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">Zadig 支持 GitLab、GitHub、Gerrit、Gitee 、其他通用 Git 代码源等代码托管平台的集成，完成集成后可列出代码库中有权限的代码仓库信息，包括 Branch、PR/MR、Tag 等等，对于开发者更加直观、体验更友好。</p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong>步骤 1：集成代码源。具体过程参考<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">GitLab 代码源集成</span></a><span>&nbsp;</span>[1]</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-999d1878b4bf86f8d9eea338e6e44eed49c.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><strong><span>·<span>&nbsp;</span></span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">步骤 2：任务中配置代码信息。Zadig 构建、测试、代码扫描及通用任务均支持拉取代码信息。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-d823c5f1fe7a383959d3e9661142357980c.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_6"></span><h3><span style="color:#fd2968"><strong>比较三：执行脚本及变量</strong></span></h3><p style="margin-left:0; margin-right:0">对于服务执行脚本和变量的定义，在 Jenkins 上分散在各个任务中进行管理，而在 Zadig 上可以通过构建模版来标准化服务的构建过程，降低运维管理的负担。</p><p style="margin-left:0; margin-right:0">下面以一个多服务的代码仓库的构建并推送镜像为例，比较 Jenkins 脚本编写和 Zadig 脚本编写的差异。</p><p style="margin-left:0; margin-right:0">Jenkins 执行脚本及变量如下图所示，脚本中主要进行服务构建、镜像构建以及镜像推送过程。其中 $SERVICE、$VERSION、$PWD 变量需要在配置中定义。</p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-38c673bada87035ad70e58c24f0e028dd21.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-ae40af20e6b1b72caaf08dd2bc574e43e05.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 执行脚本及变量如下图所示，Zadig 构建内置 $SERVICE、$IMAGE 变量，脚本更加简洁。</span></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-29b021813c3330edbc16205166a2a0f7d25.png" width="2904" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-c151777d9c835d19a639bed96ea643e76c6.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">两者之间的差异：</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">1. Zadig 任务执行过程中根据工作流配置的镜像仓库自动完成<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>docker login<span>&nbsp;</span></span>操作，所以无需在脚本中声明。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">2. 在 Zadig 中镜像命名规则支持统一配置和管理，具体可参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">文档</span></a><span>&nbsp;</span>[2]，所以无需在脚本中定义<span style="background-color:rgba(0, 0, 0, 0.19)"><span>&nbsp;</span>IMAGE<span>&nbsp;</span></span>变量的生成规则。</p><span id="OSC_h3_7"></span><h3>&nbsp;</h3><span id="OSC_h3_8"></span><h3><span style="color:#fd2968"><strong>比较四：定时触发</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">工作流任务的定时执行场景比较常见，Jenkins 针对工作流任务的默认参数可以配置定时触发，而 Zadig 上除了可以指定触发时间周期外，还支持配置任务的执行变量，更加灵活。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 触发器支持配置 Cron 表达式来定时触发任务。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-916400c25cec910faaf5caa14f50bb82bb0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 定时器支持多种触发方式，包括定时循环、间隔循环和 Cron 表达式，以满足各种定时触发的需求。此外，相较于 Jenkins 使用默认参数执行，Zadig 定时器允许配置不同的工作流执行变量，提供更灵活的定制选项。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-5a857454ef740f8ecc70b00f4ebc517306b.png" width="2904" referrerpolicy="no-referrer"></p><span id="OSC_h3_9"></span><h3>&nbsp;</h3><span id="OSC_h3_10"></span><h3><span style="color:#fd2968"><strong>比较五：代码变更触发</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">开发者提交代码自动触发工作流执行是持续集成和持续部署（CI/CD）中常见的实践。在 Jenkins 中，为实现这一需求，需要依赖插件。相比之下，Zadig 则内建 Git 触发器功能，无需额外插件，通过灵活的配置满足各种触发场景，从而提升整体效率。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 可以通过安装插件实现代码变更触发任务的执行。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1428" src="https://oscimg.oschina.net/oscnet/up-8969ed3234ff36d444ddfcb159cb3ac0191.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig Git 触发器支持代码变更触发，通过定义代码信息、触发事件、代码文件目录以及工作流执行变量，来配置触发规则。这使得在代码库发生变更时，可以灵活而精准地触发相应的工作流，以满足各种复杂的自动化流程的执行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1444" src="https://oscimg.oschina.net/oscnet/up-0b6f382446af82a670dc25d831d63126c0a.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除了上述两种触发器，Zadig 还支持多种其他触发器，包括「JIRA 触发器」、「飞书项目触发器」和「通用触发器」等，使用详情参考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文档</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[3]。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><span id="OSC_h3_11"></span><h3><span style="color:#fd2968"><strong>比较六：工作流之间的串接编排</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">企业内部对于一些服务化的任务，例如安全扫描服务，需要进行统一管理并在多个工作流中使用。通常，这些任务由安全部门或平台团队进行统一管理，然后在各个业务工作流中进行调用。为了降低实施和后续维护的负担，一般选择采用多工作流串接的方式，以实现更高效的任务调度和管理。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通过配置「构建其他工程」来触发其他任务。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-6af1ce2aae3f7eeb01d1a3f2b037c0589c9.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 的工作流本身采用了服务化的设计，使得测试、代码扫描等配置可以实现集中化的管理，然后轻松挂接到各个工作流中使用。这种设计使得配置和管理变得更加高效，同时在不同的工作流中灵活地应用这些服务，提高了整体工作流的可维护性和可扩展性。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-5dd0db5d0c2484d09a8fe71af3c8ab26fd2.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_12"></span><h3>&nbsp;</h3><span id="OSC_h3_13"></span><h3><span style="color:#fd2968"><strong>比较七：多任务并发执行</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">多任务并发执行在复杂的软件开发流程、持续集成和部署中尤为关键。这能够显著减少工程师的等待时间，提高整体研发效率，从而加速项目进程，更灵活地应对不断变化的需求。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 流水线支持不同的 "stage" 并发执行，详细配置请参考以下结构。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="582" src="https://oscimg.oschina.net/oscnet/up-3be3980e313fc5d5e0caa6dfb825822a50a.png" width="822" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 工作流仅需在「阶段」上打开「并发执行」的开关，即可实现阶段内多个任务的并发执行。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-df878ddc393fe89803cc5ccd6adb4fbc5c8.png" width="2936" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1432" src="https://oscimg.oschina.net/oscnet/up-19fbbbb66f8dfb1f131220b679faf5efc10.png" width="2936" referrerpolicy="no-referrer"></p><span id="OSC_h3_14"></span><h3>&nbsp;</h3><span id="OSC_h3_15"></span><h3><span style="color:#fd2968"><strong>比较八：任务并发数量控制</strong></span></h3><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 和 Zadig 均支持同一工作流的多个任务并发执行。Jenkins 通过资源节点来控制并发数量，而 Zadig 则统一管理并发调度策略，具有灵活控制任务优先级能力。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Jenkins 通过在节点上配置「任务执行数量」来控制多个任务的并发，单个 Jenkins 任务的并发可以在任务配置中指定。</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-16aee0879ad6a67f8bb0a2a8f6d9e645af0.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1414" src="https://oscimg.oschina.net/oscnet/up-2a9a5bef154eeb56b5410d206a91d0bbb51.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">Zadig 通过在任务配置中修改「任务并发数量设置」实现并发数控制，其中「工作流任务并发数量」控制同时执行的工作流任务数，「单任务服务并发数」控制同一个工作流任务中服务的并发数量。除此之外，面对低优先级任务占用全局并发数量的场景，可以通过配置工作流的「执行并发数」来解决。Zadig 具有更自由的任务并发数控制，能够灵活应对企业内部复杂的任务并发场景。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-4acde3574c2e0b7e1f4d8fad7f01f629f9f.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><img height="1418" src="https://oscimg.oschina.net/oscnet/up-e7872ba2b6aec2838c8c1ad71c7ccdc7f78.png" width="2904" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">除以上能力外，Jenkins 通过插件来扩展更多的能力，而 Zadig 可以通过开发「自定义任务」，和企业自建系统打通，来满足企业复杂流程，具体开发过程参考</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="background-color:#ffffff; color:#0080ff">文档</span></a><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)"><span>&nbsp;</span>[4]。</span></p><span id="OSC_h4_16"></span><h4><strong>参考链接</strong></h4><p style="margin-left:0; margin-right:0; text-align:left"><span>[1]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcodehost%2Fgitlab%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/codehost/gitlab/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left"><span>[2]&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fservice%2Fk8s%2F%23%E7%AD%96%E7%95%A5%E9%85%8D%E7%BD%AE" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/service/k8s/#策略配置</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[3]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fproject%2Fworkflow-trigger%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/project/workflow-trigger/</span></a></p><p style="margin-left:0; margin-right:0; text-align:left">[4]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.koderover.com%2Fzadig%2Fsettings%2Fcustom-task%2F" target="_blank"><span style="color:#0080ff">https://docs.koderover.com/zadig/settings/custom-task/</span></a></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="margin-left:0px; margin-right:0px; text-align:center"><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">立即体验 Zadig V2.0 新架构，开启高效交付之旅！🚀&nbsp;</span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968">Zadig 开放，链接，专业</span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center"><strong><span style="color:#ff2968"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b3270466a68bf98a90c5d08b91cd0ebc98c.png" referrerpolicy="no-referrer"></span></strong></p><p style="margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkoderover%2Fzadig" target="_blank">Zadig 在 Github</a>&nbsp;/&nbsp;<a href="https://gitee.com/koderover/zadig">Zadig 在 Gitee</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><strong>推荐阅读：</strong></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490415%26idx%3D1%26sn%3D1914c7fd25aac5d33b98663571bbb744%26chksm%3Dcfb457cff8c3ded9c02809aad88012fa802eac55222eebe70b8c637ca2c86a101045aa81e73a%26scene%3D21%23wechat_redirect" target="_blank">是时候和 Jenkins 说再见了</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491115%26idx%3D1%26sn%3D83e593f77e1aec4d59cee72cca711927%26chksm%3Dcfb4528bf8c3db9de4d0adbe3c0cb15600d35e647c869867dc2e99a599cd7f58ca6208bb4443%26scene%3D21%23wechat_redirect" target="_blank">不想放弃 Jenkins？这么做也能云原生</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247491064%26idx%3D1%26sn%3D4bbe7bfe944feaa8b44a08e6156e04e2%26chksm%3Dcfb45158f8c3d84e40d44d2dd9228a844b9bcdeea1fe32a7b0ae41b9af982c11319a38f6675e%26scene%3D21%23wechat_redirect" target="_blank">Zadig 推出环境睡眠，平均节省一半测试资源</a>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:center">&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4NDY0NTMyNw%3D%3D%26mid%3D2247490637%26idx%3D1%26sn%3D6e0498b37fb15f8b8903c4997e5611d8%26chksm%3Dcfb450edf8c3d9fb758d691081f09fd85d91dbb17534ba9c18c2300725462d3806581efbd237%26scene%3D21%23wechat_redirect" target="_blank">Zadig vs. Jenkins 详细比对：时代的选择与开发者之选</a>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/koderover/blog/10314033</guid>
            <link>https://my.oschina.net/koderover/blog/10314033</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Java 8 仍被广泛使用，占比 50%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">JetBrains&nbsp;最新发布的 2023 年度开发者生态系统调查报告指出，在面向 Java 开发者的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">调查</a>中，</span>更多的开发人员选择在生产中使用 Java 17，而不是 Java 11。Docker 逐渐成为打包 Web 应用程序的首选，且 Spring 和 Spring Boot 的使用率遥遥领先。</span></p><p><span style="color:#000000">具体而言，开发者最常使用的&nbsp;Java 版本是&nbsp;Java 8，占比高达&nbsp;50%；其次分别是&nbsp;Java 17 (45%)、Java 11(38%) 以及&nbsp;Java 20 (11%)。</span></p><p><span style="color:#000000">「很遗憾看到这么多人仍在使用 Java 8（及更旧的版本）。我想知道是什么阻碍了他们升级到更新的版本并获得强大的新语言功能，以及我们如何帮助他们将代码迁移到更新的 Java 版本。」</span></p><p><img height="356" src="https://oscimg.oschina.net/oscnet/up-d79d8c2307c0972948764928b7719266a39.png" width="300" referrerpolicy="no-referrer"></p><p>其他一些发现包括：</p><ul><li><span style="color:#000000">58% 的受访者表示，他们打包 Web 应用程序的方式是&nbsp;Docker，还有 56% 使用的是<span style="background-color:#ffffff">嵌入式服务器。</span></span></li><li>最常用的是单元测试框架是&nbsp;JUnit，以 84% 的占比稳居首位。</li><li><span style="color:#000000">Web 框架方面，72</span>% 开发者正在使用&nbsp;Spring Boot。</li><li>Java EE 8 / Jakarta EE 8 使用率为 33%，Jakarta EE 10 以 10% 的使用率超过了 Jakarta EE 9 的 7%。</li><li>Java 开发中使用最多的&nbsp;IDE/编辑器是 IntelliJ IDEA，占比 78%。</li><li><span style="background-color:#ffffff; color:#19191c">JavaScript、SQL、Python 和 HTML / CSS 是那些使用 Java 作为主要语言之一的人中最常用的语言和技术。</span></li></ul><p><img height="184" src="https://oscimg.oschina.net/oscnet/up-7a087c1c4d8482dffc48bd3f1d157872f49.png" width="500" referrerpolicy="no-referrer"></p><p>更多详情可查看<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Flp%2Fdevecosystem-2023%2Fjava%2F" target="_blank">此处</a></strong>。</p><p><strong>相关阅读：</strong></p><ul><li style="text-align:start"><a href="https://www.oschina.net/news/267606/jetbrains-devecosystem-2023" target="_blank">JetBrains 报告：Scala/Go/Kotlin 薪酬最高，Objective-C 日薄西山</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 03:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268636/devecosystem-2023-java8</guid>
            <link>https://www.oschina.net/news/268636/devecosystem-2023-java8</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[滴滴史上最严重服务故障，罪魁祸首是底层软件 or 「降本增笑」？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 27 日晚间，<u><a href="https://www.oschina.net/news/268480">滴滴因系统故障导致 App 服务异常</a></u>，不显示定位且无法打车。11 月 27 日晚，滴滴出行进行了回复：非常抱歉，由于系统故障。</p><p>2023 年 11 月 28 日早间，滴滴出行消息称，网约车等服务已恢复，骑车等在陆续修复中。11 月 28 日，在滴滴发出公告的同时，记者在上海、深圳等地使用滴滴呼叫网约车，发现网约车功能并未恢复使用，网络加载异常，仍无法打车。11 月 28 日，滴滴向记者回应称，网约车服务已恢复，司机乘客权益陆续恢复补发。</p><p><strong>11 月 29 日，滴滴再次发文致歉，称初步确定事故起因是底层系统软件发生故障</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-de730d329966eb2d4a658c5008f11be82a7.png" referrerpolicy="no-referrer"></p><p>来源：<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F2838754010%2FNuMAAaUEl" target="_blank">https://weibo.com/2838754010/NuMAAaUEl</a></em></u></p></blockquote><p>在滴滴官方发布这份公告之前，已经有资深 IT 技术人士分析：「从表现上看，打车、共享单车全挂，不同的业务板块之间应该是有隔离的，说明问题出在更加底层的基础设施。攻击者一般只能访问到应用层，基础设施访问不到。要么是被攻击者打穿，要么是自己系统操作不慎挂了。即便是前者，也算是一种系统缺陷，才会被打穿。」</p><p>360 安全专家认为，滴滴闪崩背后的技术原因可能有六种：</p><p>第一，系统更新升级过程中出现了编程错误、逻辑错误或未处理的异常情况：一般情况下，互联网厂商发布更新都会在晚上，与滴滴发生故障的时间也能对应，当然业务升级维护是放量更新，但现在滴滴全平台、全业务都故障了，说明肯定是他「家里」的问题。</p><p>第二，服务器故障：比如滴滴的核心机房，可能恒温恒湿环境出了问题，导致服务器过热、CPU 烧了，或者核心机房所在地发生了自然灾害如地震、洪水、海啸等，这种情况下，硬件需要重新更换，里面的服务软件也需要重新配置，恢复周期相对较长，但这个可能性比较小。</p><p>第三，第三方服务故障：滴滴的后台架构可能使用了第三方服务或者组件。如果第三方出了问题，也可能会影响滴滴的正常运行。但出于安全性考虑，滴滴可能不会将核心业务托管给第三方，不过这个可能性也较小。</p><p>第四，DDOS 攻击：黑客采用分布式拒绝服务的方式，抢占了大量的服务器资源，导致用户无法访问，但这个不太可能，因为 DDos 不会导致数据出错，而且滴滴从体量上来说，有足够的成本和能力去对抗。</p><p>第五，其他网络攻击：某些黑灰产团伙可能会通过拖库盗取数据，然后在暗网上售卖，在这个过程中不排除会有误操作，破坏了数据库。</p><p>第六，勒索病毒：网络攻击黑客对滴滴的底层数据、业务代码进行了加密。据披露现象，用户的账单和打车数据都算错了，存在一定可能是滴滴为了避免更大损失主动暂停了业务。近期勒索攻击事件屡屡发生，月初，某金融机构就是因为遭遇勒索病毒攻击造成了业务停摆。</p><p>不过也有网络安全公司专家认为，如果是来自外部的黑客攻击，公司一般会在第一时间进行声明。他猜测更集中于滴滴发生了内部重大业务调整，或有新业务接入原系统，但没有做好预案，导致关联业务或关联系统出现重大故障，这是大公司系统故障最常见的原因。</p><p>因此对于滴滴此次大规模的长时间故障，有行业人士认为，<strong>降本增效可能也是原因之一</strong>。</p><p>该人士认为，<strong>互联网公司核心业务频繁宕机，且长时间宕机，是降本增效的附属品之一。系统投资少了，维护资源少了，程序员更换频繁了，BUG 就多</strong>。</p><p>他举例称，一般在业务上行阶段都有冗余，为了迎接随时爆发的订单，上行阶段要维持负载的上限不能过大，比如平时 70%，这样遇到一个小爆发不用担心会出问题，足以应对小高峰；但是下行期的逻辑就不同了，负载很高的时候抗一抗就行了，虽然后面遇到小高峰可能会难受，但是随着时间的推移总体负载会下降。</p><hr><p>最后来看一下网传的消息，有同行说滴滴这次严重故障是升级 k8s 版本导致，当时 SRE 工程师定位了三个小时都没定位到问题。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-a181b0f3434ee33fc8d1903a1fdf9a188bc.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1129/113103_VOdZ_2720166.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9c6757d79e017225bd7d61ecc642362132f.png" referrerpolicy="no-referrer"><span>&nbsp;</span></p></blockquote><p>从滴滴公开的技术分享来看，滴滴弹性云在上个月升级了 k8s 版本：从 k8s 1.12 升级到 1.20。</p><ul><li>K8s 1.12<span>&nbsp;</span>发布于 2018 年：<em><u><a href="https://www.oschina.net/news/100393/kubernetes-1-12-0-released" target="_blank">Kubernetes 1.12 正式发布，新增 VMSS 支持</a></u></em></li><li>K8s 1.20 发布于 2020 年：<em><u><a href="https://www.oschina.net/news/123008/kubernetes-1-20-released" target="_blank">Kubernetes 1.20 发布：妙啊</a></u></em></li></ul><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-d0aafb8fd2141c9aaf3394b4081fcda9aef.png" referrerpolicy="no-referrer"><br><br><strong><em>来源：</em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FnMSIsS72fSXGqJO9Vy_Pfw" target="_blank"><u><em>滴滴弹性云基于 K8S 的调度实践</em></u></a></strong></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 03:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268635</guid>
            <link>https://www.oschina.net/news/268635</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[周鸿祎：「360 无法卸载」是彻底的谣言]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>俞敏洪在公众号更新了与周鸿祎的采访对话。对话中双方聊到了大众对 360 的误解，<strong>周鸿祎表示，360 不能卸载是一个彻底的谣言。</strong></p><blockquote><p><img height="1206" src="https://static.oschina.net/uploads/space/2023/1129/110144_gNAL_2720166.png" width="1480" referrerpolicy="no-referrer"></p><p>来源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2Fpd2R8Y5Q6HtYODNfRvcbnA" target="_blank">https://mp.weixin.qq.com/s/pd2R8Y5Q6HtYODNfRvcbnA</a></u></em></p></blockquote><p>周鸿祎称，因为 360 提供了完整的卸载过程。有的小朋友总是试图用一个 Windows 的删除想把 360 的目录删掉，这样其实是删不掉的，所以大家就会有一个错误的印象，好像 360 删不掉。</p><p>但是你想，360 在电脑上是起保护作用的，最恨 360 的是什么？是各种黑产、黑客，现在无论是国外的网军做攻击，还是国内的勒索软件做攻击，因为 360 装的太广，所以他们很重要的一个任务就是想办法让 360 失效，要不然 360 一报警他们就出问题了，<strong>所以你随便用一个 Windows 做一个拖拽，把它移垃圾箱里肯定是不行的</strong>。</p><p>甚至<strong>现在很多国外的攻击软件试图调动 360 自己删自己的过程，因为 360 提供了自己卸载自己的能力，所以在用户卸载的时候，我们要区别是用户真的在卸载，还是被攻击了模拟用户在卸载</strong>，因为很多软件可以模拟用户的操作。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-75c92d5bced77262bd78834927c10f9975c.png" referrerpolicy="no-referrer"></p><p>我们为了做自我保护，可能有一个比较烦琐的提示过程，就是这样以讹传讹，好像就变成了 360 不能卸载，这是一个彻底的谣言。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268632</guid>
            <link>https://www.oschina.net/news/268632</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RHEL 10 将移除 X.org，默认使用 Wayland]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/news/240614/rhel10-deprecated-xorg-server">根据此前的报道</a></u>，RHEL 9 已经标记将弃用 X.org 显示服务器。现在红帽官方<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.redhat.com%2Fde%2Fblog%2Frhel-10-plans-wayland-and-xorg-server" target="_blank">正式宣布</a></u>，计划于 2025 年上半年发布的&nbsp;<strong>RHEL 10 将移除 X.org，默认使用 Wayland</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1d62539558b9d502f364802ade1ca24877d.png" referrerpolicy="no-referrer"></p></blockquote><p>Red Hat 工程经理 Carlos Soriano Sanchez 说道：「从 X Window System 到 Wayland 的过渡已经持续了 15 年。Red Hat 从一开始就参与其中。随着时间的推移，人们发现 X11 协议和 X.org 服务器存在需要解决的基础问题，而 Wayland 就是解决方案。如今，Wayland 已被公认为事实上的窗口和显示基础设施解决方案。」</p><p>他还表示，「Xorg Server」和「X11」不是同义词，X11 是一个通过 Xwayland 支持的协议，而 Xorg Server 是 X11 协议的实现之一。虽然 RHEL 10 默认使用 Wayland，但 X11 客户端支持可通过 XWayland 来实现。</p><p>因此，RHEL 10 将使用 Xwayland 处理绝大部分尚未移植到 Wayland 的 X11 客户端。但如果用户必须 X.org，可以在其软件生命周期内继续用 RHEL 9。</p><p>Red Hat 认为，这一决定将使他们能够专注于现代化的软件栈和生态，解决诸如 HDR、增强安全性、混合低密度和高密度显示设置、更好的 GPU/显示器热插拔、更好的手势和滚动等问题。</p><p>有人认为，Red Hat 这一决策基本上是在宣布&nbsp;<strong style="color:#121212"> X.Org Server 事实上已死亡。</strong>因为 Red Hat 工程师通常负责管理新的 X.Org Server 版本以及进行各种开发。除了 XWayland 之外，他们已多年没有发布过重要 X.Org Server 版本更新。而且除了推出安全修复程序或严重的错误修复程序之外，没有人主动管理新功能版本甚至点版本。</p><p>到 2025 年，除了为 RHEL9 客户提供安全/错误处理之外，Red Hat 将更不愿意为 X.Org Server 投入开发资源。</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</guid>
            <link>https://www.oschina.net/news/268629/rhel-10-plans-wayland-and-xorg-server</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 内核安全架构 & 软件包构建方案 | 2023-11 月 WHLUG 回顾]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年 11 月 26 日下午，由 deepin 社区主办的武汉 Linux 用户组沙龙（WHLUG）在新青年创客咖啡举行，吸引了来自武汉地区诸多 Linux 爱好者线下参与，10 余名外地伙伴线上参与，大家共同探讨技术话题，分享技术经验和见解，现场气氛热烈。现在就让我们一起来回顾本次活动的精彩瞬间吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539076258_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011569946326.png" referrerpolicy="no-referrer"></p><p>本次沙龙上，内核研发工程师 Avenger_285714 为大家分享了 Linux 内核安全框架相关内容。Avenger_285714 详细介绍了当前内核所包含的 SELinux 安全子系统、Apparmor、Smack、Tomoyo 等安全模块，以及 IMA 完整性校验的原理和可用于不可变发行版的 loapin 模块。同时分享了统信自研的内核安全机制：UOS Security Kernel Interface 和 elfverify 应用程序签名、filearmor 文件保护和 SELinux 扩展，并与在场的小伙伴们讨论了基于 inode 和基于路径的安全措施之间的优劣及其应用前景。</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281539468047_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570901113.png" referrerpolicy="no-referrer"></p><p>随后，Shiroko 为大家展示了他近期新「折腾」出来的打包工具 ShiroDEB。据 Shiroko 介绍，ShiroDEB 作为一种软件包构建方案，由构建工具和构建脚本组成。</p><p>为了解决依赖版本不同的问题，ShiroDEB 还可通过构建素材的形式将自建库或其他工具容纳到构建流程中，并会自动创建包含了自建库等的软件包。此外，也提供了一个可以调用构建素材的交互终端以供开发者使用。期待能够接收社区用户贡献的构建脚本，形成属于社区的用户软件仓库。</p><p>项目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/shirodeb</a>&nbsp;</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281540109947_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17011570644077.png" referrerpolicy="no-referrer"></p><p>WHLUG 的创办希望能够帮助 Linux 社区的每一个人都可以充分地交流经验和心得，本月活动的主题分享资料已经上传至 Github，供大家下载：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fshirodeb" target="_blank">https://github.com/deepin-community/.WHLUG/tree/master/WHLUG-2023.11</a></p><p>我们期待 12 月的活动能够聚集更多的爱好者！如果你有兴趣在 WHLUG 上做分享，或是有更多意见和建议让 WHLUG 变得更好，请告诉我们吧！</p><p style="text-align:center"><img src="https://storage.deepin.org/thread/202311281614425541_1.jpeg" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268627</guid>
            <link>https://www.oschina.net/news/268627</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高手问答第 310 期 —— 软件发展史上那些不为人知的故事]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/4855753_2331437">高手问答第 310 期 —— 软件发展史上那些不为人知的故事</a><div class="ui red label horizontal" data-tooltip="置顶">顶</div></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/u/4855753" class="__user"><span>OSC 哒哒</span></a><span class="org-label org-label--simple primary" data-tooltip="认证官方账号"><i class="oicon oicon-org"></i></span> 发布于，昨天 14:26
                    </div><div class="item">阅读 489</div><div class="item collect-btn " data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331437" data-obj-type="2">0</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/4855753_2331437#comments" class="normal"><i class="comment outline icon"></i> 答案 <span data-article-reply-count="">8</span></a></div></div><div class="tags"><a class="ui horizontal label" href="https://www.oschina.net/question/topic/masteronline" target="_blank"><img src="https://static.oschina.net/uploads/logo/masteronline_9WTeU.png" referrerpolicy="no-referrer">高手问答</a></div><div class="content" id="articleContent"><p><span><span><span><span>今天的世界是运行在软件之上的。伟大的软件不是一朝一夕发明出来的，而是人类文明长期积累的结果。可以</span></span><span><span>说</span></span><span><span>，软件文明就是人类文明在电气化时代的延续。那么软件发展史上有哪些关键事件和不为人知的故事呢？</span></span></span></span></p><p><strong><span><span><span><span>本期高手问答我们一起探讨「软件发展史上那些不为人知的故事」，做客高手问答的嘉宾是新书《软件简史》的作者<a href="https://my.oschina.net/u/6992678" rel="nofollow">张银奎</a>老师。</span></span></span></span></strong></p><p><span style="background-color:#ffffff; color:#000000">可讨论的问题包括但不限于：</span></p><ul><li><span><span><span><span>世界上第一个计算机程序是怎么诞生的？</span></span></span></span></li><li><span><span><span><span>两位现代计算机之父图灵与冯·诺依曼有哪些交集和故事？</span></span></span></span></li><li><span><span><span><span>古老的提花织布机与计算机之间有什么渊源？</span></span></span></span></li><li><span><span><span><span>在 ENIAC 出现之前，还有更早的计算机吗？</span></span></span></span></li><li><span><span><span><span>最早的内存采用的是什么技术？</span></span></span></span></li></ul><p><span><span><span><span>有其他相关的问题，也欢迎提问。</span></span></span></span></p><hr><h2>嘉宾介绍</h2><p><span><span><strong><span><span><strong>张银奎</strong></span></span></strong><span><span>&nbsp;，国内知名的调试技术专家。毕业于上海交通大学信息与控制工程系，长期从事软件开发和研究工作，曾在英特尔工作 13 年，对 IA-32 架构、操作系统内核、驱动程序，尤其是对软件调试有较深入的研究。著有畅销书《软件调试》《格蠹汇编》等，格蠹科技（nanocode.cn）创始人，高端调试网站（advdbg.org）创建者。翻译（合译）作品有《二十一世纪机器人》《观止——微软创建 NT 和未来的夺命狂奔》《数据挖掘原理》《机器学习》《人工智能：复杂问题求解的结构和策略》等。</span></span></span></span></p><p><span><span><span><span><img alt="" height="334" src="https://oscimg.oschina.net/oscnet/up-6c20792bfc000c6d2385b84b080ce1a071b.png" width="500" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>为鼓励踊跃提问，我们会在问答结束后从提问者中抽取 3 名幸运会员赠予《</span></span><span><span>软件简史</span></span><span><span>》（上下册）。</span></span></span></span></p><p><span><span><span><span><img alt="" height="328" src="https://oscimg.oschina.net/oscnet/up-4b1d01a7d62014760f9f4ba80aa1440ef55.png" width="250" referrerpolicy="no-referrer"></span></span></span></span></p><p><span><span><span><span>《</span></span><span><span>软件简史</span></span><span><span>》天猫有售：</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdetail.tmall.com%2Fitem.htm%3Fid%3D750806496720" rel="nofollow" target="_blank"><span><span>https://detail.tmall.com/item.htm?id=750806496720</span></span></a></span></span></p><p><span><span><span><span>OSChina 高手问答一贯的风格，不欢迎任何与主题无关的讨论和喷子。</span></span></span></span></p><p><span><span><span><span>下面欢迎大家向 <a href="https://my.oschina.net/u/6992678" rel="nofollow">张银奎</a> 老师积极提问，直接回帖提问即可。</span></span></span></span></p></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331437" data-user-id="4855753" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331437" data-obj-type="2">0</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331437" data-obj-type="2" data-url="https://www.oschina.net/question/4855753_2331437"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/4855753_2331437</guid>
            <link>https://www.oschina.net/question/4855753_2331437</link>
        </item>
        <item>
            <title>
                <![CDATA[Builder —— 拖放式 Headless CMS]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Builder 是一个适用于 React、Vue、Svelte、Qwik 等的拖放式&nbsp;headless CMS。与任何网站或应用程序集成，使用代码库中已有的组件进行拖放。</p><p><img alt="" height="415" src="https://static.oschina.net/uploads/space/2023/1127/145541_fgX7_4252687.gif" width="500" referrerpolicy="no-referrer"></p><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody><tr><td style="border-style:solid; border-width:1px">Register components</td><td style="border-style:solid; border-width:1px">Rendered your visually created content</td></tr><tr><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-comment)">// Register our heading component for use in</span><span style="color:var(--color-prettylights-syntax-comment)">// the visual editor</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>props</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">className</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"my-heading"</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>{</span><span>props</span><span>.</span><span style="color:var(--color-prettylights-syntax-constant)">title</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-entity-tag)">h1</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">registerComponent</span><span>(</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">Heading</span><span>,</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'Heading'</span><span>,</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">inputs</span>: <span>[</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">name</span>: <span style="color:var(--color-prettylights-syntax-string)">'title'</span><span>,</span><span style="color:var(--color-prettylights-syntax-constant)">type</span>: <span style="color:var(--color-prettylights-syntax-string)">'text'</span><span>}</span><span>]</span><span>}</span><span>)</span></pre><div>&nbsp;</div></div></td><td style="border-style:solid; border-width:1px"><div><pre><span style="color:var(--color-prettylights-syntax-keyword)">import</span><span>{</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span>,</span><span>builder</span><span>}</span><span style="color:var(--color-prettylights-syntax-keyword)">from</span><span style="color:var(--color-prettylights-syntax-string)">'@builder.io/react'</span>
&nbsp;
<span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">init</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'YOUR_KEY'</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">const</span><span style="color:var(--color-prettylights-syntax-entity)">getStaticProps</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-keyword)">async</span><span>(</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>(</span><span>{</span> 
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">props</span>: <span>{</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">builderJson</span>: <span style="color:var(--color-prettylights-syntax-keyword)">await</span><span>builder</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">get</span><span>(</span><span style="color:var(--color-prettylights-syntax-string)">'page'</span><span>,</span><span>{</span><span style="color:var(--color-prettylights-syntax-constant)">url</span>: <span style="color:var(--color-prettylights-syntax-string)">'/'</span><span>}</span><span>)</span><span>.</span><span style="color:var(--color-prettylights-syntax-entity)">promise</span><span>(</span><span>)</span>
&nbsp;&nbsp;<span>}</span><span>}</span><span>)</span>
&nbsp;
<span style="color:var(--color-prettylights-syntax-keyword)">export</span><span style="color:var(--color-prettylights-syntax-keyword)">function</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderPage</span><span>(</span><span>{</span> builderJson <span>}</span><span>)</span><span style="color:var(--color-prettylights-syntax-constant)">=&gt;</span><span>{</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-keyword)">return</span><span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourHeader</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">BuilderComponent</span><span style="color:var(--color-prettylights-syntax-constant)">model</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span style="color:var(--color-prettylights-syntax-string)">"page"</span><span style="color:var(--color-prettylights-syntax-constant)">content</span><span style="color:var(--color-prettylights-syntax-constant)">=</span><span>{</span><span>builderJson</span><span>}</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-storage-modifier-import)">YourFooter</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span>
&nbsp;&nbsp;<span style="color:var(--color-prettylights-syntax-constant)">&lt;</span><span style="color:var(--color-prettylights-syntax-constant)">/</span><span style="color:var(--color-prettylights-syntax-constant)">&gt;</span><span>}</span></pre><div>&nbsp;</div></div></td></tr></tbody></table><table cellspacing="0" style="-webkit-text-stroke-width:0px; background-color:#ffffff; border-collapse:collapse; border-spacing:0px; box-sizing:border-box; color:#1f2328; display:block; font-family:-apple-system,BlinkMacSystemFont,&quot;Segoe UI&quot;,&quot;Noto Sans&quot;,Helvetica,Arial,sans-serif,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;; font-size:16px; font-style:normal; font-variant-caps:normal; font-variant-ligatures:normal; font-weight:400; letter-spacing:normal; margin-bottom:16px; margin-top:0px; max-width:100%; orphans:2; overflow:auto; text-align:start; text-decoration-color:initial; text-decoration-style:initial; text-decoration-thickness:initial; text-transform:none; white-space:normal; widows:2; width:max-content; word-spacing:0px"><tbody></tbody></table><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:21:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/builder</guid>
            <link>https://www.oschina.net/p/builder</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 阿里云自主研发的云原生数据库产品 PolarDB for PostgreSQL]]>
            </title>
            <description>
                <![CDATA[<div align="center"><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb.png" alt="logo" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#polardb-for-postgresql"></a>PolarDB for PostgreSQL</h1><p><strong>阿里云自主研发的云原生数据库产品</strong></p><h4><a id="user-content-english--简体中文" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#english--%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/README.md">English</a> | 简体中文</h4><p><a href="https://gitee.com/link?target=https%3A%2F%2Fdeveloper.aliyun.com%2Ftopic%2Fpolardb-for-pg"><img src="https://img.shields.io/badge/%E5%AE%98%E6%96%B9%E7%BD%91%E7%AB%99-blueviolet?style=for-the-badge&amp;logo=alibabacloud" alt="official" referrerpolicy="no-referrer"></a></p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_STABLE"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_STABLE?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-stable" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fcirrus-ci.com%2Fgithub%2FApsaraDB%2FPolarDB-for-PostgreSQL%2FPOLARDB_11_DEV"><img src="https://img.shields.io/cirrus/github/ApsaraDB/PolarDB-for-PostgreSQL/POLARDB_11_DEV?style=for-the-badge&amp;logo=cirrusci" alt="cirrus-ci-dev" referrerpolicy="no-referrer"></a><a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE"><img src="https://img.shields.io/badge/license-Apache--2.0-blue?style=for-the-badge&amp;logo=apache" alt="license" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fissues"><img src="https://img.shields.io/github/issues/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-issues" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2FGitHub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fpulls"><img src="https://img.shields.io/github/issues-pr/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-pullrequest" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fnetwork%2Fmembers"><img src="https://img.shields.io/github/forks/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-forks" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fstargazers"><img src="https://img.shields.io/github/stars/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://img.shields.io/github/contributors/ApsaraDB/PolarDB-for-PostgreSQL?style=for-the-badge&amp;logo=github" alt="github-contributors" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fopensource.alibaba.com%2Fcontribution_leaderboard%2Fdetails%3FprojectValue%3Dpolardb-pg"><img src="https://img.shields.io/badge/PolarDB--for--PostgreSQL-%E6%9F%A5%E7%9C%8B%E8%B4%A1%E7%8C%AE%E6%8E%92%E8%A1%8C%E6%A6%9C-orange?style=for-the-badge" alt="Leaderboard" referrerpolicy="no-referrer"></a></p></div><h2><a id="user-content-什么是-polardb-for-postgresql" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BB%80%E4%B9%88%E6%98%AF-polardb-for-postgresql"></a>什么是 PolarDB for PostgreSQL</h2><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/zh/imgs/1_polardb_architecture.png" alt="arch.png" referrerpolicy="no-referrer"></p><p>PolarDB for PostgreSQL（下文简称为 PolarDB）是一款阿里云自主研发的云原生数据库产品，100% 兼容 PostgreSQL，采用基于 Shared-Storage 的存储计算分离架构，具有极致弹性、毫秒级延迟、HTAP 的能力。</p><ol><li>极致弹性：存储与计算能力均可独立地横向扩展。
<ul><li>当计算能力不够时，可以单独扩展计算集群，数据无需复制。</li><li>当存储容量或 I/O 不够时，可以单独扩展存储集群，而不中断业务。</li></ul></li><li>毫秒级延迟：
<ul><li>WAL 日志存储在共享存储上，RW 到所有 RO 之间仅复制 WAL 的元数据。</li><li>独创的 <em>LogIndex</em> 技术，实现了 Lazy 回放和 Parallel 回放，理论上最大程度地缩小了 RW 和 RO 节点间的延迟。</li></ul></li><li>HTAP 能力：基于 Shared-Storage 的分布式并行执行框架，加速在 OLTP 场景下的 OLAP 查询。一套 OLTP 型的数据，可支持 2 套计算引擎：
<ul><li>单机执行引擎：处理高并发的 TP 型负载。</li><li>分布式执行引擎：处理大查询的 AP 型负载。</li></ul></li></ol><p>PolarDB 还支持时空、GIS、图像、向量、搜索、图谱等多模创新特性，应对企业对数据处理日新月异的需求。</p><h2><a id="user-content-分支说明" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%88%86%E6%94%AF%E8%AF%B4%E6%98%8E"></a>分支说明</h2><p><code>POLARDB_11_STABLE</code> 为稳定分支，持存储计算分离的云原生形态。 <code>distribute</code> 分支支持分布式形态。</p><h2><a id="user-content-产品架构" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E4%BA%A7%E5%93%81%E6%9E%B6%E6%9E%84"></a>产品架构</h2><p>PolarDB 采用了基于 Shared-Storage 的存储计算分离架构。数据库由传统的 Share-Nothing 架构，转变成了 Shared-Storage 架构。由原来的 N 份计算 + N 份存储，转变成了 N 份计算 + 1 份存储。虽然共享存储上数据是一份，但是数据在各节点内存中的状态是不同的，需要通过内存状态的同步来维护数据的一致性；同时主节点在刷脏时也需要做协调，避免只读节点读取到超前的 <strong>「未来页面」</strong>，也要避免只读节点读取到过时的没有在内存中被正确回放的 <strong>「过去页面」</strong>。为了解决该问题，PolarDB 创造性地设计了 <em>LogIndex</em> 数据结构来维护页面的回放历史，该结构能够实现主节点与只读节点之间的同步。</p><p>在存储计算分离后，I/O 单路延迟变大的同时，I/O 的吞吐也变大了。在处理分析型查询时，仅使用单个只读节点无法发挥出存储侧的大 I/O 带宽优势，也无法利用其他只读节点的 CPU、内存和 I/O 资源。为了解决该问题，PolarDB 研发了基于 Shared-Storage 的并行执行引擎，能够在 SQL 级别上弹性利用任意数目的 CPU 来加速分析查询，支持 HTAP 的混合负载场景。</p><p>详情请查阅 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Ftheory%2Farch-overview.html">产品架构</a>。</p><h2><a id="user-content-快速入门" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8"></a>快速入门</h2><p>如果您已安装 Docker，那么可以从 DockerHub 上拉取 PolarDB for PostgreSQL 的，本地存储实例镜像，创建、运行并进入容器，然后直接使用 PolarDB 实例：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 拉取单节点 PolarDB 镜像</span></span><span id="LC2" class="line">docker pull polardb/polardb_pg_local_instance:single</span><span id="LC3" class="line"><span class="c"># 创建运行并进入容器</span></span><span id="LC4" class="line">docker run <span class="nt">-it</span><span class="nt">--cap-add</span><span class="o">=</span>SYS_PTRACE <span class="nt">--privileged</span><span class="o">=</span><span class="nb">true</span><span class="nt">--name</span> polardb_pg_single polardb/polardb_pg_local_instance:single bash</span><span id="LC5" class="line"><span class="c"># 测试实例可用性</span></span><span id="LC6" class="line">psql <span class="nt">-h</span> 127.0.0.1 <span class="nt">-c</span><span class="s1">'select version();'</span></span><span id="LC7" class="line">            version</span><span id="LC8" class="line"><span class="nt">--------------------------------</span></span><span id="LC9" class="line"> PostgreSQL 11.9 <span class="o">(</span>POLARDB 11.9<span class="o">)</span></span><span id="LC10" class="line"><span class="o">(</span>1 row<span class="o">)</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>对于更多进阶部署方式，请移步在线文档中的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fdeploy.html">进阶部署</a>。在部署前，我们建议您先了解一下 PolarDB for PostgreSQL 的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fdeploying%2Fintroduction.html">架构简介</a>。</p><h2><a id="user-content-文档" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E6%96%87%E6%A1%A3"></a>文档</h2><p>请移步本项目的 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2F">在线文档网站</a> 查阅完整文档。</p><p>如果需要在本地预览或开发文档，请参考 <a href="https://gitee.com/link?target=https%3A%2F%2Fapsaradb.github.io%2FPolarDB-for-PostgreSQL%2Fzh%2Fcontributing%2Fcontributing-polardb-docs.html">贡献文档</a>。</p><h2><a id="user-content-参与贡献" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>参与贡献</h2><p>我们诚挚欢迎社区参与 PolarDB 的贡献，无论是代码还是文档。</p><p>以下是贡献者列表（由 <a href="https://gitee.com/link?target=https%3A%2F%2Fcontrib.rocks">contrib.rocks</a> 支持）：</p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FApsaraDB%2FPolarDB-for-PostgreSQL%2Fgraphs%2Fcontributors"><img src="https://contrib.rocks/image?repo=ApsaraDB/PolarDB-for-PostgreSQL" referrerpolicy="no-referrer"></a><h2><a id="user-content-软件许可" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%BD%AF%E4%BB%B6%E8%AE%B8%E5%8F%AF"></a>软件许可</h2><p>PolarDB for PostgreSQL 的源代码遵循 Apache 2.0 许可证，基于遵循 PostgreSQL 许可证的 PostgreSQL 开发。其中还包含了部分遵循其它开源许可证的第三方组件。请移步 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/LICENSE">LICENSE</a> 和 <a href="https://gitee.com/polardb/PolarDB-for-PostgreSQL/blob/POLARDB_11_STABLE/NOTICE">NOTICE</a> 了解更多信息。</p><h2><a id="user-content-致谢" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E8%87%B4%E8%B0%A2"></a>致谢</h2><p>部分代码和设计思路参考了其他开源项目，例如：PG-XC/XL (pgxc_ctl)、TBase (部分基于时间戳的 vacuum 和 MVCC)、Greenplum 以及 Citus (pg_cron)。感谢以上开源项目的贡献。</p><h2><a id="user-content-加入社区" class="anchor" href="https://gitee.com/polardb/PolarDB-for-PostgreSQL#%E5%8A%A0%E5%85%A5%E7%A4%BE%E5%8C%BA"></a>加入社区</h2><ul><li><p>PolarDB PostgreSQL Slack：<a href="https://gitee.com/link?target=https%3A%2F%2Fapp.slack.com%2Fclient%2FT023NM10KGE%2FC023VEMKS02">https://app.slack.com/client/T023NM10KGE/C023VEMKS02</a></p></li><li><p>使用钉钉扫描如下二维码，加入 PolarDB 技术推广组钉钉群</p><p><img src="https://gitee.com/polardb/PolarDB-for-PostgreSQL/raw/POLARDB_11_STABLE/docs/.vuepress/public/images/polardb_group.png" alt="polardb_group" referrerpolicy="no-referrer"></p></li></ul><hr><p>Copyright © Alibaba Group, Inc.</p>]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/polardb/PolarDB-for-PostgreSQL</guid>
            <link>https://gitee.com/polardb/PolarDB-for-PostgreSQL</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | PostgreSQL 数据脱敏方式盘点]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>数据脱敏是一种广泛采用的保护敏感数据（如信用卡，社保卡，地址等信息）的方法。脱敏数据不仅仅是为了保护你和客户的数据安全，在一些情况下，法律也有相应要求，最著名的例子就是 GDPR。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4dab30bd6a2aa59a8d109180e68fa97cd9f.png" alt="" referrerpolicy="no-referrer"></p><p>市面上也有各种不同的数据脱敏方法，例如遮挡，替换，洗牌和加密，适用于不同场景。通过对敏感数据进行脱敏处理，组织能够降低数据泄露和未经授权访问的风险，同时仍然能够使用真实数据进行开发、测试和分析等任务。</p><p>本文来盘点一下 PostgreSQL 的几种常用脱敏方式。</p><h2>PostgreSQL Anonymizer</h2><p><img src="https://oscimg.oschina.net/oscnet/up-3aad9a7f7d2e9df748828641b923a88fb25.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.postgresql.org%2Fabout%2Fnews%2Fpostgresql-anonymizer-10-privacy-by-design-for-postgres-2452%2F" target="_blank">PostgreSQL Anonymizer</a> 是个社区贡献的扩展 ，可以为 PostgreSQL 添加不同的数据脱敏选项和方法。它将脱敏配置存储在 PostgreSQL 的 SECURITY LABEL（安全标签）中。</p><h3>动态脱敏</h3><p>PostgreSQL Anonymizer 实现动态脱敏的方式是通过将定义某个角色为 "MASKED" 以及脱敏规则。被授予 "MASKED" 角色的用户将无法访问原始数据，而其他角色仍然可以访问。它现已支持多种的脱敏语法，你甚至可以编写自己的规则。</p><p><img src="https://oscimg.oschina.net/oscnet/up-81ce353e198292328ef3b8e6dd45a7a4a3c.png" alt="file" referrerpolicy="no-referrer"></p><p>这种方法有一定的局限性，例如在他们<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpostgresql-anonymizer.readthedocs.io%2Fen%2Flatest%2Fdynamic_masking%2F%23limitations" target="_blank">文档中</a> 有提到，如果你同时使用脱敏插件和 GUI 工具如 DBeaver 或 pgAdmin 进行查询的时候可能会出现问题；对于某些查询来说，动态脱敏可能非常慢。此外，不同的脱敏变体需要不同的视图，在角色或底层表发生变化时，这又很快变得难以管理起来。</p><h3>静态脱敏</h3><p>PostgreSQL Anonymizer 还支持静态脱敏，可以直接转换原始数据集。比如可以用虚假数据替换原始数据，添加噪音或者混淆数据以隐藏敏感信息。</p><p>静态脱敏的原则是更新包含至少一个被脱敏列的所有表的所有行。基本上意味着 PostgreSQL 将重写磁盘上的所有数据。所以请注意，这种方法会破坏原始数据，并且是一个比较缓慢的过程。因此，在使用静态脱敏之前，请三思而后行。</p><h2>Bytebase 动态数据脱敏</h2><p><img src="https://oscimg.oschina.net/oscnet/up-0fafa1a0df862325f60276f4a73b95107cd.png" alt="file" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fsecurity%2Fdata-masking%2Foverview%2F" target="_blank">Bytebase 动态数据脱敏</a> 不依赖于 PostgreSQL 视图或其用户，而是通过 Bytebase 内部管理脱敏策略和授权管理。当用户通过 SQL 编辑器查询时，会自动应用动态脱敏策略。</p><p><img src="https://oscimg.oschina.net/oscnet/up-03e05ae16e4f31409c552b924345c5e0a93.png" alt="file" referrerpolicy="no-referrer"></p><p>Bytebase 动态数据脱敏包括以下组件：</p><ul><li><strong>全局脱敏规则</strong>：工作空间的「管理员」和「DBA」可以批量定义全局脱敏规则。例如，可以将所有名为 email 的列脱敏程度设置为「半脱敏」。这样，修改脱敏策略就无需手动修改数千列了，还节省了维护视图的麻烦。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-a2bd3b732489e2b78eb7d1d7cd37cdb52a5.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>列脱敏规则</strong>：工作空间的「管理员」和「DBA」可以将列设置为不同的脱敏级别。列脱敏规则优先于全局脱敏规则。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-f37ca5c6e716c61e5b7faf61445e88dacc1.png" alt="file" referrerpolicy="no-referrer"></p><ul><li><strong>访问未脱敏数据</strong>：对于脱敏数据，工作空间的「管理员」和「DBA」可以授予特定用户访问未脱敏数据的权限。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-20a2ff4276bc57d8ec25d94d8bd72a0f10e.png" alt="file" referrerpolicy="no-referrer"></p><p>📣 工作空间的「管理员」和「DBA」均为 Bytebase 的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bytebase.com%2Fdocs%2Fconcepts%2Froles-and-permissions%2F" target="_blank">角色</a>。</p><h2>对比</h2><p><img src="https://oscimg.oschina.net/oscnet/up-91ab870f77b13f4a5f0e46cac11ab3a1ef4.png" alt="file" referrerpolicy="no-referrer"></p><p>PostgreSQL Anonymizer 的优势在于它是在数据库本身中实现的。因此，无论查询如何发送到数据库，数据脱敏规则都会被强制执行。对于 Bytebase 动态数据脱敏，查询必须通过 SQL 编辑器才会强制执行。</p><p>Bytebase 动态数据脱敏的优势在于其与所有 PostgreSQL 发行版（和 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247506225%26idx%3D1%26sn%3D71a523fb3059705ad743b766c5193404%26chksm%3Dc25ce705f52b6e13eefc8196cc7c800e36ce7d5e130bb0723d7e849d6f71d8831f9c6098c90b%26scene%3D21%23wechat_redirect" target="_blank">MySQL 发行版</a>🐬）都兼容，且支持细粒度的脱敏策略和访问权限。只要团队通过 Bytebase SQL 编辑器来查询数据库，那么 Bytebase 动态数据脱敏可以保障组织敏感数据的安全。</p><p>🔧 欢迎<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMjI2MDY5OQ%3D%3D%26mid%3D2247505900%26idx%3D1%26sn%3D46296b29b2bca3d023a3c0fb8f291c70%26chksm%3Dc25ce9d8f52b60ce481827e3bc65ea4dc9eeb13427f8bae6cb7e44e07073cb7d5cbea4b943c7%26scene%3D21%23wechat_redirect" target="_blank">跟着教程</a>来试试 Bytebase 动态数据脱敏。</p><hr><p>💡 更多资讯，请关注 Bytebase 公号：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 29 Nov 2023 02:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10306946</guid>
            <link>https://my.oschina.net/u/6148470/blog/10306946</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Furion 文档收费？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>今天访问 Furion 官网发现它的文档居然要付费才能看：</p><p><img height="1392" src="https://static.oschina.net/uploads/space/2023/1128/173151_D1kJ_2720166.png" width="2338" referrerpolicy="no-referrer"></p><p>http://furion.baiqian.ltd/docs/saas</p><p>而且还搞了个 499 的 VIP 技术支持服务……</p><p><img height="1858" src="https://static.oschina.net/uploads/space/2023/1128/173121_ZrVP_2720166.png" width="3360" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 28 Nov 2023 09:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268540</guid>
            <link>https://www.oschina.net/news/268540</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
