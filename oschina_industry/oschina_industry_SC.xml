<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Wed, 27 Sep 2023 05:02:19 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[macOS Containers：在 macOS 用 Docker 运行 macOS 镜像]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>macOS Containers 是一群开发者基于 chroot 打造的工具，能让你在 macOS 用 Docker 运行 macOS 镜像。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e8fbfed437c488003bb6d570a3f4afa4b01.png" referrerpolicy="no-referrer"></p><p>macOS Containers 官网<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmacoscontainers.org%2F" target="_blank">写道</a>：</p><blockquote><p>容器从根本上改变了现代软件的开发和部署方式。包括 FreeBSD、Solaris、Linux 甚至 Windows 在内的多种操作系统都支持容器，<strong>但 macOS 却没有原生支持容器</strong>——直到现在 macOS Containers 诞生。</p><p><img src="https://static.oschina.net/uploads/space/2023/0927/121649_g9Y7_2720166.png" referrerpolicy="no-referrer"></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 04:15:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259695/macos-containers</guid>
            <link>https://www.oschina.net/news/259695/macos-containers</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[历史最悠久的 Unity 官方用户组在 13 年后宣布解散]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">自称为历史最悠久的&nbsp;Unity&nbsp;开发者团队 Boston Unity Group (BUG) <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbostonunitygroup.s3.us-east-1.amazonaws.com%2Findex.html" target="_blank">宣布</a>将在&nbsp;9 月 27 日晚组织最后一次会议，然后进行解散。根据介绍，BUG 由 Elliott Mitchell 和 Alex Schwartz 于 2010 年夏天创立，是世界上第一个官方 Unity 用户组。</span></p><blockquote><p><span style="color:#000000">「BUG 社区的持续发展催生了波士顿及其他地区游戏开发的新时代......从第一天起，BUG 就得到了 Unity 和前首席执行官 David Helgason 的热情认可和支持。Unity 提供了后勤支持、专业许可证赠品、研讨会、演讲、赞助、在 Unite 大会上发言的机会等等。在早期，David 和 Unity 明白，培养独立开发者的草根团体对 Unity 的长期发展至关重要，并有助于实现他们为各行各业的人们提供民主化游戏开发的目标。」</span></p></blockquote><p><img height="261" src="https://static.oschina.net/uploads/space/2023/0927/120517_6aBs_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">BUG 在致社区的公开信中表达了对 David 和所有 Unity 员工的感谢。但他们也指出，过去几年间 Unity 已将其重点从游戏行业和支持开发者社区转移开。IPO 后，该公司似乎将利润看得比一切都重要，包括进行了多次收购并裁减了核心人员。导致开发者所需的许多关键系统仍然处于混乱且通常不完整的状态，Unity 传递的信息是广告和收入比游戏开发者关心的功能要更为重要。</span></p><p><span style="color:#000000">尤其是 Unity 本月推出的新定价模式，BUG 将其描述为「令人匪夷所思的敌对服务条款和价格表动」；也正是 Unity 的这一举措，促使了 BUG 解散的决策。</span></p><blockquote><p><span style="color:#000000">来自游戏行业的响亮而明确的谴责是前所未有的，Unity 别无选择，只能撤销一些最令人震惊的修改。即使有了这些新的让步，修改后的定价模式还是对我们社区中独立工作室的成功造成了不成比例的影响。</span></p><p><span style="color:#000000">更重要的是，我们看到了一个由高管主导的商业决策是多么容易和轻率，就能让我们辛辛苦苦建立起来的工作室面临破产的风险，威胁到我们作为专业人士的生计，并对我们行业的长远发展提出挑战。今天的 Unity 已经不再是集团成立之初的那个公司了，我们曾经对公司的信任已经彻底被侵蚀了。</span></p></blockquote><p><span style="color:#000000">BUG 的这一感受也在游戏开发社区的广大群体中得到了</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FFuckedByUnity" target="_blank">回应</a><span style="color:#000000">，许多知名开发者表示，Unity 的举措基本没有挽回他们对该公司的信任。</span></p><p><span style="color:#000000">《吸血鬼幸存者》游戏的开发者 Poncle 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fpcgaming%2Fcomments%2F16rsuh0%2Fvampire_survivors_ama_with_developers_poncle%2F" target="_blank">Reddit AMA</a> 上被问及他们的下一款游戏/续作是否会再次使用 Unity 引擎时，就简明扼要地表示了拒绝："不，谢谢......即使 Unity 会完全收回他们的决定，我也不认为在他们目前的领导下信任他们是明智之举。"</span></p></div>
                                    ]]>
            </description>
            <pubDate>Wed, 27 Sep 2023 04:06:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259693/first-official-unity-user-group-disbands</guid>
            <link>https://www.oschina.net/news/259693/first-official-unity-user-group-disbands</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 45 动态三层缓存补丁更新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GNOME 45 "Rīga" 上周已正式<a href="https://www.oschina.net/news/259088/gnome-45-r%C4%ABga-released">发布</a>，此版本虽然有许多针对桌面环境的改进，但上游缺少的一个功能是 Canonical 主导的<strong> Mutter 动态三层缓存</strong>。</p><p>动态三层缓存用于在需要时提升性能，并且已被证明有助于提高桌面渲染性能，例如使用英特尔集成显卡和 Raspberry Pi 显卡。此外，Debian 和 Ubuntu 已经合并这个动态三重缓冲补丁有一段时间了，但这项特性仍未能合并到上游。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-311bd78a79409ec737ca4af54e1a17734ef.png" referrerpolicy="no-referrer"></p><p>虽然动态三层缓存未能进入 GNOME 45，但 Canonical 的工程师 Daniel van Vugt <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsalsa.debian.org%2Fgnome-team%2Fmutter%2F-%2Fmerge_requests%2F108" target="_blank">更新了 Debian/Ubuntu 补丁</a>以与 Mutter 45.0 兼容。</p><blockquote><p>动态三层缓存是 Daniel 负责的一项功能，其动机是为了在需要的时候动态地进行三级缓存，以使 GPU 加快其时钟频率，否则它的渲染效率就会变慢。让 GPU 工作得更快并暂时导致额外的帧延迟不是理想的方式，但它似乎确实能在需要的时候让 GPU 性能得到提升。</p></blockquote><p><img src="https://static.oschina.net/uploads/space/2023/0927/112744_naxT_2720166.png" referrerpolicy="no-referrer"></p><p>目前看来，一切都已准备就绪——使用 GNOME 45 的 Ubuntu 23.10 将提供动态三层缓存，该版本将于 10 月中旬首次亮相。该补丁现在还修复了显示器拔出插头时可能导致的潜在内存泄漏，该泄漏可能会导致独立 GPU 无法进入低功耗状态。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 03:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259683/gnome-45-triple-buffering</guid>
            <link>https://www.oschina.net/news/259683/gnome-45-triple-buffering</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Apple 推出全球开发者资源 —— 人人能编程]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>9 月 26 日，Apple 宣布推出&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fexperts%2F" target="_blank">Meet with Apple Experts</a>&nbsp;开发者资源，帮助全球 Apple 开发者社区发现并参与课程、研讨会、实验室、一对一咨询等体验。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-03b3fbe6bda95fda8279db7ce8319e77581.png" referrerpolicy="no-referrer"></p><p>Meet with Apple Experts 初期提供超过 50 个课程、研讨会和咨询项目，并将持续提供线上和线下活动，开发者也可借助该平台和 Apple 专家直接沟通，获取洞见、支持和反馈；Meet with Apple Experts 同时也为所有开发者提供在各时区、通过各种语言举行的课程、实验室、研讨会和挑战赛，开发者即日起可报名参与多种主题的课程，深入探索 iOS 17、iPadOS 17、watchOS 10、visionOS，了解如何针对最新发布的硬件产品优化 app 和游戏。</p><p>注册 Apple 开发者、Apple Developer Program 和 Apple Developer Enterprise Program 的现成员可访问&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fexperts%2F" target="_blank">developer.apple.com/experts</a>&nbsp;进一步了解可参与的最新课程、实验室和特别活动的信息。</p><p>据了解，除了 Meet with Apple Experts，Apple 还为开发者提供了众多额外的开发工具和资源，包括各种先进工具与端到端支持，协助开发者构建、测试、营销和发行应用；同时内容丰富的免费工具与框架套件、Apple 开发者学院、企业家培训营、App 加速器和 Swift Student Challenge 等项目，以及「人人能编程」和 Swift Playgrounds 等开放工具，也确保所有人都能平等、方便地获取编程技术资源。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259667</guid>
            <link>https://www.oschina.net/news/259667</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Appilot —— 面向 DevOps 场景的 AI 助手]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><strong style="color:rgba(0, 0, 0, 0.9)"><span style="color:#006ed5">Appilot 是面向 DevOps 场景的 AI 助手 </span></strong><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">，这款产品将充分利用 AI 大语言模型的能力为用户提供变革性的部署和应用管理体验</span><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">。</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">Appilot 基于大语言模型进行推理，并且可以运行在本地个人电脑上。用户可以根据自身的需求和使用习惯，将 Appilot 集成到任意平台，进而实现通过输入自然语言即可调用后端平台的能力。具体特性包括：</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">应用管理</span></strong>：借助 Appilot，您可以通过自然语言交互来轻松地部署、升级、回滚和查看应用程序的日志，无需繁琐的手动操作。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">环境管理</span></strong>：无论克隆环境还是查看环境内的依赖关系，均可通过 Appilot 实现，使用简单的指令即可完成复杂的环境管理任务。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">诊断排障</span></strong>：如果发现系统异常，Appilot 所拥有的排查和修复功能，可以帮助您快速识别问题并采取措施解决它们。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">行为护栏</span></strong>：我们深知安全的重要性，因此 Appilot 仅提供领域特定的回答，并要求审批任何可能导致系统变更的操作，有助于确保您的系统不会受到未经授权的访问。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">混合基础设施编排</span></strong>：Appilot 可以轻松对接任意基础设施，无缝集成各种云服务、容器化平台等，使您能够在多样化的环境中运行应用程序。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">支持多语言</span></strong>：您可以采用包括但不限于中文、英文等语言输入指令进行交互。</p></li><li><p style="margin-left:0; margin-right:0"><strong><span style="color:#006ed5">可插拔后端</span></strong>：我们秉持着开源开放的理念，避免供应商锁定。因此您可以根据需要自定义后端，以满足您的具体需求。</p></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4f085f385caee96aa02b719013b8c3bad6d.png" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 02:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/appilot</guid>
            <link>https://www.oschina.net/p/appilot</link>
        </item>
        <item>
            <title>
                <![CDATA[为承德程序员发声]]>
            </title>
            <description>
                <![CDATA[<h1 class="header article-title"><a href="https://www.oschina.net/question/2720166_2331095">为承德程序员发声</a></h1><div class="extra ui horizontal list meta-wrap"><div class="item"><a href="https://my.oschina.net/hardbone" class="__user"><span>局</span></a> 发布于，今天 10:28
                    </div><div class="item">阅读 1K+</div><div class="item collect-btn " data-id="2331095" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i> 收藏 <span data-collect-count="" data-id="2331095" data-obj-type="2">2</span></div><div class="item comment-count"><a href="https://www.oschina.net/question/2720166_2331095#comments" class="normal"><i class="comment outline icon"></i> 评论 <span data-article-reply-count="">8</span></a></div></div><div class="content" id="articleContent"><blockquote><p>转载自，唐巧微信公众号<br><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FdudaNfJJJVUpy2MKiZQAIA" target="_blank" rel="nofollow">https://mp.weixin.qq.com/s/dudaNfJJJVUpy2MKiZQAIA</a></p></blockquote><p><strong>事情起因</strong></p><p>承德一位程序员因为在 GitHub 上接海外的开源项目，因为交流不方便使用了俗话称作「fan 墙」的软件以便访问 Google 等外网服务，被罚款 200 元，没收 3 年「非法收入」100 多万元。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-edac4ca38ffde4385c9de44dba968ab1986.png" referrerpolicy="no-referrer"></p><p><strong>行业观点</strong></p><p>事情发生后，我身边的所有人都为该处罚表达不满情绪。部分朋友把这个归结小地方处罚不规范。</p><p>胡锡进专门发文，希望对这种社会危害性为零的远程打工挣外汇行为进行宽容。</p><p>但随后他删除了微博。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7c214e7091ef10a031e68380830f004df3c.png" referrerpolicy="no-referrer"></p><p><strong>我的观点</strong></p><p>1、程序员在国内向境外输出劳动力，既赚取了外汇，又解决了自己的就业问题，而且向世界展示了中国互联网行业的全球竞争力。国家非但不应该打击，而且应该鼓励。</p><p>这是一种新形态的「出口」。有助于中国建立更大的全球影响力。事实上，这位被罚同行的工作内容，就是从事大量被使用的开源项目的开发。参与开源项目本就是输出行业影响力的最佳方式。</p><p>2、当前并没有渠道为这一类人群的合法访问外国网络提供便利。希望相关部门能对合法的使用外网需求，建立合适的申请和监管渠道。</p><p>3、在相关规章制度完善之前，对于工作生活需要，不得已访问境外网站的。如果没有对社会产生负面影响，那么不应该处罚。对于有利于个人就业，有利于行业发展，有利于国家声誉的事情，国家应该适度鼓励并组织研究相关法规，帮助规范和健全相关经济活动。</p><hr><ul><li><a href="https://www.oschina.net/news/259325" target="_blank" rel="nofollow">罚款 200 元，没收 100 多万</a></li></ul></div><div class="poll-wrap"></div><div class="additional-remarks"></div><div class="ui basic center aligned segment action"><div class="ui big buttons"><a class="ui basic button collect-btn hover" data-id="2331095" data-user-id="2720166" data-obj-type="2" data-max="99" data-tag-required="" data-current-user-id="" data-recommend-tags=""><i class="star outline icon"></i>收藏 (<span data-collect-count="" data-id="2331095" data-obj-type="2">2</span>)</a><div class="ui basic dropdown share button osc-share dropdown-share" data-tag="share-question"><i class="share icon"></i><span>分享</span><div class="menu"><a class="item" data-platform="weibo" data-value="weibo"><i class="weibo icon"></i>微博</a><a class="item" data-platform="qq" data-value="qq"><i class="qq icon"></i>QQ</a><a class="item" data-platform="wechat" data-value="wechat"><i class="weixin icon"></i>微信</a></div></div></div><div class="ui basic segment"><a class="ban" ban-report="" data-id="2331095" data-obj-type="2" data-url="https://www.oschina.net/question/2720166_2331095"><i class="flag red icon"></i>举报</a></div></div>
            ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 02:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/question/2720166_2331095</guid>
            <link>https://www.oschina.net/question/2720166_2331095</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 用于构建用户界面的 JavaScript 库 openInula]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-openinula-开源项目" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE"></a>openInula 开源项目</h1><h2><a id="user-content-项目介绍" class="anchor" href="https://gitee.com/openInula/inula#%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D"></a>项目介绍</h2><p>单词 Inula（发音为：[ˈɪnjʊlə]），意为一类旋覆花属菊科的植物。openInula 是一款用于构建用户界面的 JavaScript 库，提供响应式 API 帮助开发者简单高效构建 web 页面，比传统虚拟 DOM 方式渲染效率提升 30% 以上！同时 InulaJS 提供与 React 保持一致的 API，并且提供 5 大常用功能丰富的核心组件：状态管理器、路由、国际化、请求组件、应用脚手架，以便开发者高效、高质量的构筑基于 InulaJS 的前端产品。</p><h2><a id="user-content-技术架构" class="anchor" href="https://gitee.com/openInula/inula#%E6%8A%80%E6%9C%AF%E6%9E%B6%E6%9E%84"></a>技术架构</h2><p><img src="https://gitee.com/openInula/inula-doc/raw/master/static/img/structure.PNG" alt="输入图片说明" referrerpolicy="no-referrer"></p><h3><a id="user-content-核心能力" class="anchor" href="https://gitee.com/openInula/inula#%E6%A0%B8%E5%BF%83%E8%83%BD%E5%8A%9B"></a>核心能力</h3><p><strong>响应式 API</strong></p><ul><li>openInula 通过最小化重新渲染的范围，从而进行高效的 UI 渲染。这种方式避免了虚拟 DOM 的开销，使得 openInula 在性能方面表现出色。</li><li>openInula 通过比较变化前后的 JavaScript 对象以细粒度的依赖追踪机制来实现响应式更新，无需用户过度关注性能优化。</li><li>简洁 API：
<ol><li>openInula 提供了两组简洁直观的 API--响应式 API 和与 React 一致的传统 API，使得开发者可以轻松地构建复杂的交互式界面。</li><li>openInula 简洁的 API 极大降低了开发者的学习成本，开发者使用响应式 API 可以快速构建高效的前端界面。</li></ol></li></ul><p><strong>兼容 ReactAPI</strong></p><ul><li>与 React 保持一致 API 的特性、可以无缝支持 React 生态。</li><li>使用传统 API 可以无缝将 React 项目切换至 openInula，React 应用可零修改切换至 openInula。</li></ul><h3><a id="user-content-openinula-配套组件" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E9%85%8D%E5%A5%97%E7%BB%84%E4%BB%B6"></a>openInula 配套组件</h3><p><strong>状态管理器/inula-X</strong></p><p>inula-X 是 openInula 默认提供的状态管理器，无需额外引入三方库，就可以简单实现跨组件/页面共享状态。
inula-X 与 Redux 比可创建多个 Store，不需要在 Reducer 中返回 state 并且简化了 Action 和 Reducer 的创建步骤，原生支持异步能力，组件能做到精准重渲染。inula-X 均可使用函数组件、class 组件，能提供 redux 的适配接口及支持响应式的特点。</p><p><strong>路由/inula-router</strong></p><p>inula-router 是 openInula 生态组建的一部分，为 openInula 提供前端路由的能力，是构建大型应用必要组件。
inula-router 涵盖 react-router、history、connect-react-router 的功能。</p><p><strong>请求/inula-request</strong></p><p>inula-request 是 openInula 生态组件，涵盖常见的网络请求方式，并提供动态轮询钩子函数给用户更便捷的定制化请求体验。</p><p><strong>国际化/inula-intl</strong></p><p>inula-intl 是基于 openInula 生态组件，其主要提供了国际化功能，涵盖了基本的国际化组件和钩子函数，便于用户在构建国际化能力时方便操作。</p><p><strong>调试工具/inula-dev-tools</strong></p><p>inula-dev-tools 是一个为 openInula 开发者提供的强大工具集，能够方便地查看和编辑组件树、管理应用状态以及进行性能分析，极大提高了开发效率和诊断问题的便捷性。</p><p><strong>脚手架/inula-cli</strong></p><p>inula-cli 是一套针对 openInula 的编译期插件，它支持代码优化、JSX 语法转换以及代码分割，有助于提高应用的性能、可读性和可维护性。</p><h2><a id="user-content-openinula-文档" class="anchor" href="https://gitee.com/openInula/inula#openinula-%E6%96%87%E6%A1%A3"></a>openInula 文档</h2><p>欢迎访问 openInula 官网文档仓库，参与 openInula 开发者文档开源项目，与我们一起完善开发者文档。</p><p><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.openinula.net%2F">访问官网</a></p><h2><a id="user-content-代码仓地址" class="anchor" href="https://gitee.com/openInula/inula#%E4%BB%A3%E7%A0%81%E4%BB%93%E5%9C%B0%E5%9D%80"></a>代码仓地址</h2><p>openInula 仓库地址：<a href="https://gitee.com/openinula">https://gitee.com/openinula</a></p><h2><a id="user-content-如何参与" class="anchor" href="https://gitee.com/openInula/inula#%E5%A6%82%E4%BD%95%E5%8F%82%E4%B8%8E"></a>如何参与</h2><p><strong>参与贡献</strong>
欢迎您参与<a href="https://gitee.com/openinula/docs/blob/master/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97.md">贡献</a>，我们鼓励开发者以各种方式参与文档反馈和贡献。</p><p>您可以对现有文档进行评价、简单更改、反馈文档质量问题、贡献您的原创内容，详细请参考<a href="https://gitee.com/openinula/docs/blob/master/%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97.md">贡献文档</a>。</p><h2><a id="user-content-许可协议" class="anchor" href="https://gitee.com/openInula/inula#%E8%AE%B8%E5%8F%AF%E5%8D%8F%E8%AE%AE"></a>许可协议</h2><p>openInula 主要遵循 Mulan Permissive Software License v2 协议，详情请参考各代码仓 LICENSE 声明。</p><h2><a id="user-content-联系方式" class="anchor" href="https://gitee.com/openInula/inula#%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F"></a>联系方式</h2><p><a href="mailto:team@inulajs.org">team@inulajs.org</a></p>]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 02:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/openInula/inula</guid>
            <link>https://gitee.com/openInula/inula</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 小程序编译器性能优化之路]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://oscimg.oschina.net/oscnet/up-47f7698050b7b5de818c8012cafcc66ac83.png" alt="" referrerpolicy="no-referrer"></p><p>作者 | 马可</p><blockquote><p>导读</p><p>小程序编译器是百度开发者工具中的编译构建模块，用来将小程序代码转换成运行时代码。旧版编译器由于业务发展，存在编译慢、内存占用高的问题，我们对编译器做了一次大规模的重构，采用自研架构，做了多线程、代码缓存、sourcemap 等多项优化，在性能和内存占用上都有很大提升。全文介绍了新版编译器的设计思路和优化方法，以及一些能够用在通用打包工具里的技术点。</p></blockquote><blockquote><p><em>全文 6629 字，预计阅读时间 17 分钟。</em></p></blockquote><h1><strong>01 前言</strong></h1><p>小程序编译器在小程序开发、预览、发布各个阶段都需要使用，因此编译器性能会直接影响到开发者开发效率，也会影响到开发者工具的使用体验。</p><p>由于旧版的编译器（基于 webpack4）在构建大型项目时会很慢，内存占用也高，一直被开发者吐槽。我们经过大量的调研和开发，最后采用完全自研架构做新编译，针对小程序项目构建做了大量优化，基本解决了旧编译存在的问题。</p><p>下图是部分项目构建时间对比：</p><p><img src="https://oscimg.oschina.net/oscnet/up-af3d75670e77d75bf9f10f93f81c0f04a5a.png" alt="" referrerpolicy="no-referrer"></p><p>新版编译器相对于旧版实现了 2~7 倍的性能提升，并且支持实时编译、热重载等特性，内存占用更少，构建产物更优。</p><p>下面从，框架选型、新编译器工作原理、性能和产物优化方法，等方面介绍新版编译器的成长之路。</p><h1><strong>02 框架选型</strong></h1><p>在进行新版编译器设计时，需要明确当前的痛点问题：性能，优先解决性能问题。其他新技术和新想法对编译器有帮助的也一起实施。</p><p><strong>旧版编译器基于 webpack4 存在如下几个问题：</strong></p><ul><li><p>大型项目构建速度太慢。</p></li><li><p>dev 启动慢、增量编译慢，仅支持 loader 缓存，bundle 无缓存也比较慢。</p></li><li><p>基于 webpack4 做扩展开发，需要 patch 部分模块才能工作，维护困难。</p></li><li><p>部分 webpack bundle 过程无法针对小程序代码结构进行优化，存在无效构建。</p></li></ul><p><strong>新编译的设计目标：</strong></p><ul><li><p>更快的全量编译速度，消除 webpack 存在的无效构建过程。</p></li><li><p>支持全缓存，加快首次和增量编译速度。</p></li><li><p>支持实时编译，减少 dev 启动和二次编译时间。</p></li><li><p>支持多线程编译加速，支持页面热重载。</p></li><li><p>优化产物结构，减少产物体积。</p></li></ul><h2><strong>2.1 主流构建工具</strong></h2><p>下面介绍的是我们调研过的主流前端构建工具，每个工具都有适用场景和优缺点。</p><p>在新版本编译器架构设计时，其他构建工具的设计理念和技术特点都值得参考。</p><p><strong>Webpack 构建过程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-475b788c3ef6ad78df38db53396609efc33.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Webpack 优点</strong>：功能完善、社区活跃、可配置性强、有很强的扩展性。</p><p><strong>Webpack 缺点</strong>：配置复杂、构建速度慢，二次开发困难。</p><p><strong>Parcel 构建过程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-b554482b6f2ef7aed547d2b55f1a4f68183.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Parcel 优点</strong>：无需配置，构建速度快，原生支持多线程和全缓存，多线程之间共享数据通过 lmdb 进行，避免跨线程通信开销。</p><p><strong>Parcel 缺点</strong>：生态小，自定义性有限，大量采用 Node 插件，兼容性也差一些。</p><p><strong>Vite 构建过程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-38aeaa049d0994119a775d2669a0dbe769c.png" alt="" referrerpolicy="no-referrer"></p><p><strong>Vite 优点</strong>：配置较为简单，按需编译，启动快，dev 时有不错的体验。</p><p><strong>Vite 缺点</strong>：生态小，dev 和，发布走两套构建流程。</p><p><strong>其他小程序平台：</strong></p><ul><li><p>微信基于 gulp 和 C++ 模块做小程序构建，并且对 npm 模块做了预构建，在性能和开发体验上做的比较好。</p></li><li><p>支付宝基于 webpack 做小程序构建，并且使用了 esbuild 加速代码压缩。</p></li><li><p>抖音小程序使用自研编译器，构建流程比较简单。</p></li></ul><h2><strong>2.2 新版编译器</strong></h2><p>在设计新编译框架时，借鉴了主流打包工具的工作流程，结合小程序代码特点，决定不做通用打包工具，重点优化小程序打包性能。</p><p>最终选择了自研编译器的方案，并做了大量优化工作，新版编译器优化点有如下几个方面：</p><p>1.支持多 Compiler 协同工作，将动态库开发等多类型项目构建解耦。</p><p>2.编译阶段全流程缓存，节省二次构建时间 90% 以上。</p><p>3.dev 开发默认采用按需编译，提升单页编译性能。</p><p>4.支持 babel 和 swc 多线程编译，提升全量编译速度 2 ~ 7 倍。</p><p>5.采用新版 sourcemap 协议，移除非必要解析合并，将 bundle 阶段耗时大幅缩减。</p><p>6.对 js、css、swan 模板编译均做了构建时标记优化，减少 bundle 合并耗时。</p><p>7.对于预览、发布阶段的 js 压缩和混淆，采用了 terser 和 esbuild 并行方案，esbuild 用于快速打出预览包，terser 可以保证压缩率用于发布包。</p><p>从结果看，新编译器从速度、资源占用和可维护性上相对于旧版都有显著的提升。</p><h1><strong>03 新版编译器工作原理</strong></h1><p>新编译器的处理流程和 parcel 比较类似，Compiler 控制处理流程，Processor 进行代码转换，基本流程如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-70518bd0ba131a6e1ec9b169622be792fc3.png" alt="" referrerpolicy="no-referrer"></p><p>其中几个重要的模块：</p><ul><li><p>CompileEntry 编译器为入口模块，包含 cli 通信、dev server 通信、命令调用等。</p></li><li><p>CompileManager 为编译管理器，用于依赖资源下载和管理以及多个 Compiler 协同构建。</p></li><li><p>Compiler 为编译器模块，用于将项目源码编译成运行时代码，项目构建时 Compiler 可能有多个。</p></li><li><p>Processor 为单元处理器，用于处理，代码转换、代码合并，等单个编译任务。</p></li></ul><p><strong>注</strong>：小程序 App 项目有 1 个 Compiler，动态库和动态扩展项目 2 个 Compiler。</p><h2><strong>3.1 Compiler 编译器</strong></h2><p>用于编译单个小程序项目，将开发者原始代码编译为可运行代码。</p><p><strong>工作职能：</strong></p><p>1.创建运行上下文，提供 config、fs 文件处理、watcher 监控、logger 等模块，给 Processor 使用。</p><p>2.全量编译、文件变更时二次编译；这里二次编译也是走一遍全量编译流程，不过大部分用的是缓存结果。</p><p>3.管理、调度、运行 Processor 处理单元。</p><p>4.维护 Processor 依赖关系和结果缓存。</p><p><strong>特点：</strong></p><p>1.实现全流程缓存，将每个 Processor 的输入参数、输出结果写入缓存，在有缓存情况下二次编译时长可减少 90% 。</p><p>2.支持按需编译，每次按需单页编译、增量编译、全量编译，都走同样的 Processor 处理流程。</p><p>3.通过 Proxy 机制自动计算缓存参数依赖，不用手动为每个 Processor 生成缓存 hash，相对于 webpack 或 parcel 减少 bug 产生。</p><p>4.仅维护 Processor 依赖关系，不维护 ModuleGraph，简化处理流程。</p><p>关于全流程缓存每家打包器都有自己的实现方案，基本原理是根据当前输入参数和依赖情况为处理单元生成一个唯一 hash，hash 一致则结果一致。</p><p>webpack 和 parcel 由于维护了 ModuleGraph，缓存的计算和重用会复杂一些。小程序编译器仅根据 Processor 入参和调用依赖进行计算。</p><h2><strong>3.2 Processor 单元处理器</strong></h2><p><strong>Processor 有如下特性：</strong></p><p>1.在输入参数一致的情况下，保证输出一致，输入和输出都必须可序列化为 json ，实现了 Processor 全缓存。</p><p>2.Processor 中的 uri 为构建 ID，在单次构建过程中 ID 一致则处理结果一致，例如处理 app.js 文件，uri 为：js:app.js，好处是可以统一 Processor 资源处理路径。</p><p>3.Processor 之间支持互相调用：processWith 调用并继续执行，processWithResult 调用并等待返回结果。</p><p><strong>注意</strong>：这里的输入参数包含 uri、app config, contextFreeData。</p><p><strong>几种常用的 Processor：</strong></p><p>1.JS Processor 将 es6 代码转换成 es5 代码，这是最耗时的模块。</p><p>2.Swan Processor 将 swan 模板代码转换成 view 层 js 代码。</p><p>3.Css Processor 使用 postcss 处理 css 中的单位转换、依赖收集等工作。</p><p>4.Bundle Processor 将前面 transformer 处理结果按照 bundle 算法合并文件并输出结果。</p><p><strong>Processor 工作流程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-8b070b7436cae7395aa1b3ece2ae58346d8.png" alt="" referrerpolicy="no-referrer"></p><p>Processor 处理流程需要经过 transform -&gt; bundle 的过程，在小程序里 js, css, swan 模板的 bundle 可以分开并行处理，这里和 webpack 的处理模式不一样，和 parcel 的 pipeline 类似。</p><h2><strong>3.3 性能和产物优化方法</strong></h2><h3><strong>3.3.1 多核心编译优化</strong></h3><p>由于 Node 中多线程模块初始化速度和通信效率比多进程好一些，新编译选择使用，多线程，做多核心优化。</p><p><strong>多线程编译有 2 种方案选择：</strong></p><ul><li><p>方案 1：基于 processor 做多线程调度，由于 processor 间支持相互调用，实际处理会很复杂且有通信成本。</p></li><li><p>旧的编译器做过基于 webpack 的 workerthread-loader，性能提升有限（10%~15%）。</p></li><li><p>parcel 基于 lmdb 公共缓存消除线程间通信，保证读写效率，是一个比较好的解决方法。</p></li><li><p>方案 2：仅对 js 转译做多线程调度，仅有一来一回 2 次通信成本。</p></li><li><p>使用 jest-worker 和 babel transform 做 js 多线程转译或者用 swc 多线程做 js 转译。</p></li></ul><p>由于大部分构建时间在 js 转译这里（js 中有大量 node_modules 依赖，均需要转换），css 和 swan 模块转换耗时少。</p><p>最终选择方案 2 仅做 js 多线程转译，处理流程简单且收益较好，整体提升如下：</p><ul><li><p>使用 jest-worker 多线程 babel 转译，4 线程可提升 1 倍以上速度。</p></li><li><p>使用 swc 做 js 转译，4 线程提升 4 倍以上速度。</p></li></ul><p><strong>JS Processor 多线程处理：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-c3616ceaffc1873c47e87951e92160d998e.png" alt="" referrerpolicy="no-referrer"></p><p>其中：</p><p><strong>uri</strong>： 为处理器构建 ID</p><p><strong>contextFreeData</strong>： 单次构建中不可变数据，例如 app.json 中的配置项</p><p><strong>context args</strong>：全局参数，例如优化实验开关、多线程开关等</p><p>在 js 转换处理时规定了 transformer 统一转换接口，基于接口实现了 babel 单线程、babel 多线程、swc 转换 3 种处理器，并且可随时做处理器切换。</p><p>对于不同的编译环境可以做到灵活设置：</p><p>1.开发者工具中开发者根据机器配置情况可以切换，多线程、swc 编译模式，提升效率。</p><p>2.云编译流水线默认开多线程编译提高性能。</p><p>3.webIDE 默认开单线程降低资源消耗。</p><h3><strong>3.3.2 SWC 编译优化</strong></h3><p>新编译器多线程模式相对于旧编译提升了 1 倍左右，在 dev 开发时一些大型项目页面首次编译还是有些慢，需要 10 秒以上，主要耗时在 js transform 这里。</p><p>swc 目前在 js 转译上基本成熟了，且大部分场景能提升 4 倍以上转译速度，因此增加了 swc 多线程转译支持，将大型项目页面首次编译控制在了 5 秒以内。</p><p>需要编写 2 个 swc 插件来适配 swc 转译：</p><ul><li><p>@swanide/swc-require-rename 将 require/import/export 中的模块提取路径信息，以便于后续在 js 中分析模块依赖关系。</p></li><li><p>@swanide/swc-web-debug 对 js 代码进行插桩处理，用来支持真机调试中的断点调试。</p></li></ul><p>swc 编译带来的性能提升是巨大的，在使用中也发现了一些问题：</p><p>1.swc 存在内存泄露，在 dev 阶段如果全量编译次数过多，会导致内存占用很高，需手动重启编译器。</p><p>2.swc 插件支持的 api 较少，一部分 babel 容易实现的功能，在 swc 中很难处理。</p><p>3.swc 由于使用 rust 编写插件，插件在不同 @swc/core 版本间不能通用，需要为不同平台生成 swc 插件，在部署上会麻烦一些。</p><p>在实际使用中，对于一部分 swc 不能很好处理的场景，会降级到 babel 处理。</p><h3><strong>3.3.3 代码压缩和运行时缓存</strong></h3><p>在 dev 阶段，编译后的代码是没有经过压缩的，可以在模拟器中运行。在预览发布阶段由于限制了包体积，需要做代码压缩以减少产物体积。</p><p>可选的代码压缩工具有如下 3 个：</p><p>1.terser 压缩率高，产物体积小，速度最慢。</p><p>2.swc 压缩快，mangle 支持不完善，压缩率较差。</p><p>3.esbuild 压缩最快（比 terser 快了 10 倍以上），支持 mangle，代码压缩率不如 terser。</p><p>最后经过对比考虑，选择了如下压缩方案：</p><p>1.预览阶段由于不需要 sourcemap，移除 sourcemap，并使用 esbuild 做代码压缩，提高预览速度（对于自动预览场景有很大提升）。</p><p>2.发布阶段使用 terser 做多线程压缩，并保留 sourcemap。</p><p>运行时缓存，指的是构建过程的中间结果都在内存中做了缓存，包括 Processor 处理结果，和 代码压缩结果，在二次构建时可以节省大部分重新构建时间。由于缓存中保留的是字符串和 json 对象，相对于基于 webpack 的旧版编译器有 40% ~ 60% 的内存节省，在内存占用上处于可接受范围。</p><h3><strong>3.3.4 Swan 模板处理优化</strong></h3><p>旧的 swan 模板处理使用 swan-loader 进行模板转换，由于设计时没有处理好模板 import 作用域，导致 &lt;template&gt; 标签以及 filter 过滤器函数只能内联到页面代码中，如果模板中大量使用了 template 和 filter，最终生成的代码体积会非常大。</p><p>新编编译器纠正了 import 作用域关系，将编译产物中的 template 、 filter 生成模式由内联改为 require 引用，然后在 bundle 阶段做代码合并，使相同模块能够得到重用，算是填了一个大坑。</p><p><strong>新编译器 swan 模板处理流程：</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-41f43a8a82b471e090692098e7e8c0960ce.png" alt="" referrerpolicy="no-referrer"> 单个 swan 文件经过 Processor 处理后可能的产物有：</p><ul><li><p>component 组件模块，用于生成页面和自定义组件</p></li><li><p>template 模块</p></li><li><p>filter 过滤器函数、sjs 过滤器函数</p></li><li><p>transformed document 中间代码</p></li></ul><p>将 swan 模板转换成不同类型的 js module，并维护依赖关系，便于后续的代码合并时更精细化的控制。</p><p>由于历史原因 import/include 中包含 sjs 或者 template 引用时不能直接生成 template 模块，需要在最后入口模板中生成。新编译也提供了 template 静态编译选项，将严格限制 import 作用域，可直接生成 template 模块代码，对于 taro 生成的小程序项目可以节约 30% 左右的产物大小。</p><h3><strong>3.3.5 Sourcemap 优化</strong></h3><p>由于编译器需要支持 js 代码调试以及运行时 error 跟踪，在 dev 和发布阶段都需要生成 sourcemap。</p><p>在 webpack 中生成代码时需要对 sourcemap 进行合并计算，较大的项目 sourcemap 合并会占用很长时间，并且每次重新编译都要重新计算 sourcemap。</p><p>调研时发现浏览器 devtools 对 sourcemap 协议，的 index map 支持非常好， 新编译器基于 index map 协议做了 sourcemap 合并优化，由之前的多文件 sourcemap 合并计算，变成了计算生成 offset map 并拼接内容，这样 js bundle 耗时就由原来的，几秒到几十秒变为了固定 3 秒以内。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7988863ee8de85eae8738399ff63f0d4573.png" alt="" referrerpolicy="no-referrer"></p><p>一个有意思的事情是 vscode 的 js-debugger 直到 22 年 6 月份才支持 index map 调试（index map 2011 年发布的），微软的动作稍微慢了一些。</p><h3><strong>3.3.6 后续工作</strong></h3><p>在新编译器开发完成之后的推广中，采用了渐进式推广方式：</p><p><strong>第一阶段</strong>，开发者工具新旧编译器共存，dev、预览使用新编译器，发布使用旧编译器。</p><p><strong>第二阶段</strong>，内部 pipeline 预览和发布全量使用新编译。</p><p><strong>第三阶段</strong>，开发者工具全部切换到新编译器。</p><p>新版编译实际上线后还存在一些小的兼容性问题，需要尽量提前暴露问题才能做发布全量替换。</p><p>针对小程序项目，新编译做了大量的优化工作，部分优化工作还没有完成开发，包括：</p><p><strong>hmr 热重载</strong>：开发中，由于，运行时框架、开发者工具均需要做接口适配，需要较长时间调试才能达到预期。</p><p><strong>tree-shaking 代码消除</strong>：对于 es6 模块在 transform 阶段可以做 tree-shaking 消减代码。</p><p><strong>scope-hoisting 作用域提升</strong>：理论可行，需要验证代码缩减效果。</p><p>新版编译器由于需要完全兼容旧版编译器构建结果，在 bundle 打包场景还存在优化空间，我们在后续工作中配合运行时框架可以做更多打包产物优化。</p><h1><strong>04 总结</strong></h1><p>新版编译器采用自研打包方案，对比基于 webpack 的旧编译器实现了巨大的性能提升，彻底解决了编译慢、资源占用高的问题，相对友商的编译器也有不错的性能优势。</p><p>一些新编译引入的优化手段如 swc 转译、esbuild 压缩、sourcemap 优化，也能用在其他前端项目构建中，并起到加速效果。</p><p>在新编译器项目中每个同学都非常努力，贡献了很多奇妙的点子，遇到的大部分难题都有效解决了。我们会继续坚持性能和产物优化这两个方向，不断提升开发者体验和运行时效率。</p><p>——END——</p><p><strong>推荐阅读</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247571280%26idx%3D1%26sn%3Df52aee0632693276224b4de1ba4fb0ba%26chksm%3Dc03fe72cf7486e3a0795aaabd4af6783b01f1aee769bf8d43d892101c2ca9feb7e9e7521f552%26scene%3D21%23wechat_redirect" target="_blank">百度 APP iOS 端包体积 50M 优化实践 (六) 无用方法清理</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570869%26idx%3D1%26sn%3Dce0712fad8ff6386c48a1363892b6a6b%26chksm%3Dc03fe5c9f7486cdfadf587b505c9de45d7bae6578e0ec6159c2f969854e488337d1544d37562%26scene%3D21%23wechat_redirect" target="_blank">基于异常上线场景的实时拦截与问题分发策略</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570853%26idx%3D1%26sn%3D51afb6a105c191c9bebdf19a1042ac94%26chksm%3Dc03fe5d9f7486ccfdfe33952845e048f506680bbf56be8448ee2be780c0fe90f170c86e3030c%26scene%3D21%23wechat_redirect" target="_blank">极致优化 SSD 并行读调度</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570809%26idx%3D1%26sn%3D2e9514a2d5233e0611c39361d29505a3%26chksm%3Dc03fe505f7486c138fab993da98004f431ff399d7a3700edca4cd9bdbab57b78e1098b18f9ac%26scene%3D21%23wechat_redirect" target="_blank">AI 文本创作在百度 App 发文的实践</a></p><p><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5MjU0NTI5OQ%3D%3D%26mid%3D2247570754%26idx%3D1%26sn%3Da11c148b57e0fc5b91e600404ce063a0%26chksm%3Dc03fe53ef7486c28ff8980433db6437dad74c6bd3fbaf0fb516e59182dd8d85d7c6af090b665%26scene%3D21%23wechat_redirect" target="_blank">DeeTune：基于 eBPF 的百度网络框架设计与应用</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 25 Sep 2023 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4939618/blog/10114374</guid>
            <link>https://my.oschina.net/u/4939618/blog/10114374</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[高效能软件工程师的 7 个习惯]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>管理学大师史蒂芬·柯维代表作《高效能人士的 7 个习惯》是商业书籍的经典之作，产生了积极而深远的影响。如果我们把《高效能人士的 7 个习惯》的理念应用到软件工程师身上，又会怎么样呢？</p><p>资深软件工程师 Luthfur Chowdhury 根据职业生涯中见过的优秀软件工程师的常见习惯，整理出以下清单——</p><p><strong>7 Habits of Highly Effective Software Engineers（高效能软件工程师的 7 个习惯）：</strong></p><p><strong>1. 快速将想法打造出原型，进行概念验证</strong></p><p>许多想法和新技术概念听起来很棒，但现实往往会有所不同。</p><p>为了更好地了解想法的可行性，优秀的工程师会更快地投入原型设计和概念验证。原型设计是一个很好的学习和探索工具。你会发现自己想到的方法是否可行，是否真正解决了你原来的问题，或者是否存在你之前没有想到的限制。</p><p><strong>2. 有效评估工作量</strong></p><p>工作量评估会影响产品路线图、技术方法和交付给终端用户的价值。</p><p>拥有良好评估能力的工程师的团队会给他们的工作带来信心。经常延期的团队会产生压力和不确定感。优秀的工程师通过跟踪他们的估计和工作实际花费时间之间的差异来更好地做到这一点。</p><p><strong>3. 快速且及时地 review 代码</strong></p><p>审查 PR 的速度越快，代码改进的速度就越快，并且投入生产的速度也就越快。快速的代码 review 可以向开发者提供反馈，同时代码和相关概念仍然记忆犹新。</p><p><strong>4. 主动记录代码、设计和流程，形成文档</strong></p><p>优秀的文档将帮助未来的工程师维护和构建工作。</p><p>放弃现有系统的一个关键原因通常是周围没有人知道它是如何运行的，或者不了解技术决策背后的背景。优秀的工程师通过记录他们的工作来确保他们留下坚实的基础和遗产。</p><p><strong>5. 坦诚地参与技术讨论</strong></p><p>构建出色的软件需要一个对技术想法持开放和坦诚态度的团队。</p><p>每个人都应该坦诚说出自己的想法，并营造一种邀请其他人也这样做的氛围。提出一个好主意并继续重复它以使其变得更好。</p><p>如果看到了想法中的缺陷，就公开地指出来，并解释你的理由。</p><p><strong>6. 完成「狗屎」工作</strong></p><p>只有完成工作才能取得成果。你需要把事情做好并交付生产。当一个项目接近完成时，我们都有过能量减弱的经历，当时间不够，终点线仍然感觉很遥远的时候。这就是需要集中注意力、缩小功能范围、保持强度水平并推动项目完成的地方。把事情做好是伟大工程师所体现的一种技能和习惯。</p><p><strong>7. 保持好奇心</strong></p><p>伟大的工程师往往具有天生的好奇心。他们不止对解决长期业务问题的新技术、新技术方法感兴趣。因为他们的好奇心不仅限于技术，还会经常进一步了解他们所做工作的用户和业务背景，以及他们可以产生的影响。</p><p>原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmakingsmallercircles.com%2Farticles%2F7-habits-of-highly-effective-software-engineers%2F" target="_blank">https://makingsmallercircles.com/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</guid>
            <link>https://www.oschina.net/news/259604/7-habits-of-highly-effective-software-engineers</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云原生周刊：K8s 的 13 个最佳开源监控工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>开源项目推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fdevtron-labs%2Fsilver-surfer" target="_blank">Silver Surfer</a></h3><p>该项目旨在检查 Kubernetes 对象的 API 版本兼容性，并为其提供迁移路径，以便为集群升级做好准备。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Factions%2Factions-runner-controller" target="_blank">Actions Runner Controller</a></h3><p>Actions Runner Controller (ARC) 是一个 Kubernetes 操作器，可为 GitHub Actions 编排和扩展自托管运行器。</p><p>使用 ARC，您可以创建运行程序规模集，该规模集可根据存储库、组织或企业中运行的工作流数量自动扩展。由于受控运行程序可能是短暂的并且基于容器，因此新的运行程序实例可以快速、干净地扩展或缩减。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fhelm%2Fhelm-mapkubeapis" target="_blank">helm-mapkubeapis</a></h3><p>这是一个 Helm 插件，可将版本中废弃或移除的 Kubernetes API 映射到受支持的 API 中。</p><h2>文章推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmedium.com%2F%40omers1414%2Fmastering-argocd-management-advanced-gitops-techniques-for-flexibility-and-scale-5a1375958482" target="_blank">掌握 ArgoCD 管理：实现灵活性和规模的高级 GitOps 技术</a></h3><p>这篇文章深入探讨了如何利用 ArgoCD 的潜力进行高级 GitOps 管理，通过 ApplicationSet Helm Chart 实现灵活的部署，以及通过扩展 ArgoCD 实例实现可扩展性和多租户支持的未来发展方向。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flogz.io%2Fblog%2Fopen-source-monitoring-tools-for-kubernetes%2F" target="_blank">Kubernetes 的 13 个最佳开源监控工具</a></h3><p>这篇文章提供了关于 Kubernetes 的 13 个开源监控工具的概述，并介绍了每个工具的优点和缺点，以帮助读者选择适合其需求的工具。</p><h2>云原生动态</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Fannouncing-opentofu" target="_blank">Linux 基金会推出 OpenTofu</a></h3><p>Linux 基金会宣布成立 OpenTofu，这是一个开源替代方案，用于 Terraform 广泛使用的基础设施即代码工具。OpenTofu 以前被称为 OpenTF，是对 Terraform 最近宣布的许可证变更（从 Mozilla Public License v2.0（MPLv2）变更为 Business Source License v1.1）的开放和社区驱动的回应，为每个人提供了一个可靠的开源替代方案，采用中立的治理模型。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FgTzDuuX3ZdMjPrJ1qka2tw" target="_blank">Fluent Operator 2.5.0 发布：新增多个插件</a></h3><p>Fluent Operator v2.5.0 新增 11 个 features， 其中 Fluent Bit 新增支持 7 个插件， Fluentd 新增支持 1 个插件。此外，对 Fluent Operator 也进行了增强，调整了默认参数，以便适应更多场景，并对 helm chart 进行了优化，用户可以更方便的进行安装，并修复了部分 bug。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoq.com%2Fnews%2F2023%2F09%2Fhashicorp-vault-kubernetes%2F%3FtopicPageSponsorship%3D6457dc55-9c2d-4b4a-a65a-641549fdbe17" target="_blank">适用于 Kubernetes 的 HashiCorp Vault Secrets Operator 正式推出</a></h3><p>HashiCorp 已将适用于 Kubernetes 的 HashiCorp Vault Secrets Operator 正式投入使用。该 Kubernetes Operator 将 Vault 的 secret 缓存相结合。操作员还处理 Secrets 轮换，并拥有用于各种特定于 Secrets 的自定义资源的控制器。</p><p>Vault Secrets Operators 监视其自定义资源定义 (CRD) 集的更改。每个 CRD 都允许操作员将 Vault Secret 同步到 Kubernetes Secret。该运算符将源 Vault secret 直接写入目标 Kubernetes secret。这可确保对源所做的所有更改都能正确复制，并使用 Kubernetes 自定义资源来管理服务使用的 secret。应用程序能够以 Kubernetes 原生方式从目的地使用 secret。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2023%2F09%2F21%2Fharness-introduces-gitness-open-source-git-platform%2F" target="_blank">Harness 推出开源 Git 平台 Gitness</a></h3><p>DevOps 公司 Harness 发布了 Gitness，这是一个新的开源 Git 平台，据称这是「近十年来开源 Git 平台的第一个重要版本」。</p><p>Gitness 有两个主要组件，自托管的 Git 存储库和基于 Drone 的管道。</p><p>Harness 提供了所谓的软件交付平台，该平台可以自托管、安装在 AWS 上或由 Harness 托管的云上，提供各种产品，包括持续交付、功能标记、错误跟踪和混沌工程。该公司还提供多种可免费使用的开源或可用源代码产品，但由于许可限制，并非所有产品都有资格成为真正的开源产品。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 09:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10114425</guid>
            <link>https://my.oschina.net/u/4197945/blog/10114425</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[低代码引擎 —— TinyEngine]]>
            </title>
            <description>
                <![CDATA[<p align="center"><a href="https://gitee.com/link?target=https%3A%2F%2Fopentiny.design%2Ftiny-engine" target="_blank" rel="noopener noreferrer"><img alt="OpenTiny Logo" src="https://gitee.com/opentiny/tiny-engine/raw/develop/logo.svg" height="100" referrerpolicy="no-referrer"></a></p><p align="center">TinyEngine 低代码引擎使能开发者定制低代码平台，支持在线实时构建低码平台，支持二次开发或集成低码平台能力</p><p><a href="https://gitee.com/opentiny/tiny-engine/blob/develop/README.md">English</a> | 简体中文</p><p>🌈 特性：</p><ul><li>跨端跨框架前端组件</li><li>支持在线实时构建、支持二次开发或被集成</li><li>直接生成可部署的源码，运行时无需引擎支撑</li><li>允许接入第三方组件、允许定制扩展插件</li><li>支持高代码与低代码，混合开发部署应用</li><li>平台接入 AI 大模型能力，辅助开发者构建应用</li></ul><h2><a id="user-content-开发" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%BC%80%E5%8F%91"></a>开发</h2><h3><a id="user-content-安装所需的依赖" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%AE%89%E8%A3%85%E6%89%80%E9%9C%80%E7%9A%84%E4%BE%9D%E8%B5%96"></a>安装所需的依赖</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>npm <span class="nb">install</span></span><span id="LC2" class="line"><span class="nv">$ </span><span class="nb">pushd </span>mockServer</span><span id="LC3" class="line"><span class="nv">$ </span>npm <span class="nb">install</span></span><span id="LC4" class="line"><span class="nv">$ </span><span class="nb">popd</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-本地开发启动本地-mock-服务器使用本地-mock-服务器的-mock-数据" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0-mock-%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BD%BF%E7%94%A8%E6%9C%AC%E5%9C%B0-mock-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84-mock-%E6%95%B0%E6%8D%AE"></a>本地开发，启动本地 mock 服务器，使用本地 mock 服务器的 mock 数据</h3><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="nv">$ </span>npm run serve</span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="c"># 另起一个终端</span></span><span id="LC4" class="line"><span class="nv">$ </span><span class="nb">cd </span>mockServer</span><span id="LC5" class="line"><span class="nv">$ </span>npm run dev</span><span id="LC6" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>浏览器打开：<code>http://localhost:8080/?type=app&amp;id=918&amp;tenant=1&amp;pageid=NTJ4MjvqoVj8OVsc</code><br><code>url search</code>参数：</p><ul><li><code>type=app</code> 应用类型</li><li><code>id=xxx</code> 应用 ID</li><li><code>tenant=xxx</code> 组织 ID</li><li><code>pagdId=xxx</code> 页面 ID</li></ul><h2><a id="user-content-构建" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E6%9E%84%E5%BB%BA"></a>构建</h2><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c"># 先构建所有插件</span></span><span id="LC2" class="line">npm run build:plugin</span><span id="LC3" class="line"></span><span id="LC4" class="line"><span class="c"># 构建设计器</span></span><span id="LC5" class="line">npm run build:alpha  或 build:prod</span><span id="LC6" class="line"></span><span id="LC7" class="line"><span class="c"># 发布所有插件</span></span><span id="LC8" class="line">npm run publish:plugin</span><span id="LC9" class="line"></span><span id="LC10" class="line"><span class="c"># 发布设计器</span></span><span id="LC11" class="line">npm run publish:core</span><span id="LC12" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h2><a id="user-content-常规发包流程" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%B8%B8%E8%A7%84%E5%8F%91%E5%8C%85%E6%B5%81%E7%A8%8B"></a>常规发包流程</h2><ol><li><p>发布插件
npm run build:plugin &amp;&amp; npm run publish:plugin</p></li><li><p>发布设计器</p></li></ol><p>a) 修改包名和版本号:
包名：@opentiny/tinybuilder-design-core-test
版本号：末位每次+1, 例如：</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">  "name": "@opentiny/tinybuilder-design-core-test",</span><span id="LC2" class="line">  "version": "1.0.87",</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>b) npm publish</p><h2><a id="user-content--参与贡献" class="anchor" href="https://gitee.com/opentiny/tiny-engine#-%E5%8F%82%E4%B8%8E%E8%B4%A1%E7%8C%AE"></a>🤝 参与贡献</h2><p>如果你对我们的开源项目感兴趣，欢迎加入我们！🎉</p><p>参与贡献之前请先阅读<a href="https://gitee.com/opentiny/tiny-engine/blob/develop/CONTRIBUTING.zh-CN.md">贡献指南</a>。</p><ul><li>添加官方小助手微信 opentiny-official，加入技术交流群</li><li>加入邮件列表 <a href="mailto:opentiny@googlegroups.com">opentiny@googlegroups.com</a></li></ul><h2><a id="user-content-开源协议" class="anchor" href="https://gitee.com/opentiny/tiny-engine#%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE"></a>开源协议</h2><p><a href="https://gitee.com/opentiny/tiny-engine/blob/develop/LICENSE">MIT</a></p>]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 08:19:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/opentiny/tiny-engine</guid>
            <link>https://gitee.com/opentiny/tiny-engine</link>
        </item>
        <item>
            <title>
                <![CDATA[ABP Framework — 基于 ASP.NET 的 Web 应用框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>ABP Framework 是基于 ASP.NET Core 用于创建现代 Web 应用程序的完整架构和基础设施，遵循最佳实践和约定。</p><p>ABP Framework 提供了完整的<span style="background-color:#ffffff; color:#212529">全栈应用程序基础设施，主要功能</span></p><ul><li>多个 UI 选项</li><li>多个数据库提供程序</li><li>ABP CLI</li><li>模块化</li><li>多租户</li><li>BOOTSTRAP 标签助手</li><li>动态表单</li><li>认证与授权</li><li>虚拟文件系统</li><li>DOMAIN DRIVEN DESIGN 基础设施</li><li>自动 REST APIS</li><li>动态客户端代理</li><li>具有 RABBITMQ 集成的分布式事件总线</li><li>测试基础设施</li><li>……</li></ul><p><strong>架构</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-2ab8ea6f22e02f599298ab0c79a0d3b25b4.png" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 07:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/abp-framework</guid>
            <link>https://www.oschina.net/p/abp-framework</link>
        </item>
        <item>
            <title>
                <![CDATA[Apache OpenOffice 是事实上的「无人维护」项目]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Frocket9labs.com%2Fpost%2Fits-time-to-let-go-apache-software-foundation%2F" target="_blank">Apache Open Office as an unmaintained project?</a>》这篇文章今天在 Hacker News 引起了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37645160" target="_blank">广泛讨论</a>。作者指出，Apache OpenOffice 最后一个大版本更新是在 2014 年 (<a href="https://www.oschina.net/news/51324/apache-openoffice-4-1-0-final" target="news">Apache OpenOffice 4.1.0</a>)，后面一直只发布小版本更新，目前最新版本是今年 2 月发布的 4.1.14。</p><p>考虑到这些发布历史，是否可以将 Apache OpenOffice 视为一个无人维护的项目？</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D37645160" target="_blank"><img height="152" src="https://static.oschina.net/uploads/space/2023/0926/142540_9sYB_2720166.png" width="939" referrerpolicy="no-referrer"></a></p><p>文章简单地回顾了 Apache OpenOffice 的历史：</p><ul><li>1985 年，Star Division 公司发布私有办公软件套装 StarOffice</li><li>2000 年，Sun Microsystems 公开 StarOffice 源代码，随后 OpenOffice.org 诞生</li><li>2010 年，LibreOffice 基于 OpenOffice.org 源代码发布首个版本</li><li>2010 年，Oracle 收购 Sun Microsystems 之后将 OpenOffice.org 相关商标和代码捐赠给了 Apache 软件基金会，创造了 Apache Open Office</li><li>在 2012 年的第一个版本 3.4 和 2014 年的最后一个主要版本 4.1 之间，Apache Open Office 集成了 IBM Lotus Symphony，在捐赠给 Apache 软件基金会后，添加了重新设计的侧边栏和一些其他新功能</li><li>自 2014 年以来……Apache OpenOffice 的更新主要是：错误修复、字典更新、错误修复、字典更新、空格「修复」、字典更新、字典更新……</li><li>相比之下，LibreOffice 在 OpenOffice.org 源代码基础上活跃开发至今，Apache OpenOffice 在 4.1 之后再也没有发布过大版本更新</li></ul><p>此外，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fopenoffice%2Fcommits%2Ftrunk" target="_blank">从 OpenOffice 的提交记录来看</a>，大多数 commit 都没有意义。在许多情况下，这些 commit 甚至不会对程序进行任何更改，因为它们只是改动源代码周围的空白区域。</p><p><img height="2690" src="https://static.oschina.net/uploads/space/2023/0926/144608_xzWl_2720166.png" width="1787" referrerpolicy="no-referrer"></p><p>作者认为他们这样做有两个原因：</p><ol><li>有一些合情合理的空白字符问题需要解决。</li><li><strong>人们有动机让一个项目看起来好像是活跃的，而实际上它并不活跃。</strong></li></ol><p>因此作者认为，Apache OpenOffice 项目已经变成了无人维护的状态——这不是在质问 Apache 软件基金会，这就是事实。他还说道，基金会及其贡献者在近十年来不披露与缺乏实质性更新或变化有关的信息的方式，并且似乎故意掩盖项目缺乏发展的情况。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 06:51:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259569/open-office-as-an-unmaintained-project</guid>
            <link>https://www.oschina.net/news/259569/open-office-as-an-unmaintained-project</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软开源 windows-drivers-rs，用 Rust 开发 Windows 驱动程序]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Microsoft Azure 首席技术官兼著名 Windows 软件开发人员 Mark Russinovich 在社交平台上<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fmarkrussinovich%2Fstatus%2F1705730703957405826" target="_blank">宣布</a>，启动了一个名为 windows-drivers-rs 的新开源项目。</span></p><p><span style="color:#000000">该项目可帮助开发人员使用 Rust 开发 Windows 驱动程序，旨在支持 WDM (Windows Driver Model) 和 WDF (Windows Driver Framework) 驱动程序开发模型。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-f6fe123e928e766cef55d1f83ecd65770f5.webp" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">当前版本的资源库主要由 Rust crates 组成，具体包括：</span></p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-build" target="_blank">wdk-build</a><span style="color:#000000">：用于配置 Cargo 构建脚本以进行 WDK 的绑定生成和下游链接的库。虽然此 crate 的编写目的是灵活地适应不同的 WDK 版本和不同的 WDF 版本，但目前仅针对 NI eWDK、KMDF 1.33、UMDF 2.33 和 WDM 驱动程序进行了测试。旧版 DDK 可能缺少链接器选项。</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-sys" target="_blank">wdk-sys</a><span style="color:#000000">：直接 FFI 绑定到 WDK 中可用的 API。这包括从<code>bindgen</code>中自动生成的 ffi 绑定，以及包括手动重新实现 bindgen 无法生成的宏。</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk" target="_blank">wdk</a><span style="color:#000000">：与 WDK 中可用的 API 的安全惯用绑定</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-panic" target="_blank">wdk-panic</a><span style="color:#000000">：使用 WDK 构建的程序的默认 panic 处理程序实现</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-alloc" target="_blank">wdk-alloc</a><span style="color:#000000">：对使用 WDK 编译的二进制文件的分配支持</span></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2Fwindows-drivers-rs%2Fblob%2Fmain%2Fcrates%2Fwdk-macros" target="_blank">wdk-macros</a><span style="color:#000000">：宏的集合，有助于更轻松地与 wdk-sys 的直接绑定进行交互。该 crate 通过<code>wdk-sys</code>重新导出，并且通常情况下 crates 不需要直接依赖<code>wdk-macros</code></span></li></ul><p><span style="color:#000000">具体示例可查看 </span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmicrosoft%2FWindows-rust-driver-samples" target="_blank">Windows-rust-driver-samples</a><span style="color:#000000">。</span></p><p><span style="color:#000000">值得注意的是，该项目仍处于早期阶段，不建议用于商业用途；但微软方面鼓励社区对该项目的实验、建议和讨论。在 windows-drivers-rs 的开发过程中，该公司将把 GitHub 讨论区作为与社区互动的主要形式。目前，windows-drivers-rs 项目已得到了微软开发人员 Melvin Wang 的支持。</span></p><p><strong><span style="color:#000000">相关阅读：</span></strong></p><ul><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/238894/microsoft-windows-rust" target="_blank">微软正在用 Rust 重写核心 Windows 库</a></p></li><li><p style="margin-left:0px; margin-right:0px; text-align:start"><a href="https://www.oschina.net/news/249719/rust-in-the-windows-kernel" target="_blank">微软：加大力度在 Windows 11 使用 Rust</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 06:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259564/develop-windows-drivers-in-rust</guid>
            <link>https://www.oschina.net/news/259564/develop-windows-drivers-in-rust</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌建造海底光缆 Nuvem —— 连接葡萄牙、百慕大和美国]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Google Cloud 官方博客<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Fblog%2Fproducts%2Finfrastructure%2Fintroducing-the-nuvem-subsea-cable%2F" target="_blank">宣布 Nuvem</a> ——&nbsp;这是一个新的连接葡萄牙、百慕大和美国的跨大西洋海底光缆系统。</p><p>Nuvem&nbsp;是这条新海底光缆的名字，在葡萄牙语中是 'cloud' 的意思。Nuvem 将提升跨大西洋的网络弹性，帮助满足对数字服务不断增长的需求。</p><p>这条新的光缆将增加国际路线的多样性，并支持相关大陆和国家的信息和通信技术 (ICT) 基础设施的发展。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-17a78469606eb791bffede853dbbe14484c.png" referrerpolicy="no-referrer"></p><p>▲ Nuvem 海底光缆路线</p><p>Nuvem 预计将于 2026 年投入使用，将为世界各地的 Google 用户和 Google Cloud 客户增加容量、提高可靠性并减少延迟。它将与 Firmina 和 Equiano 一起创建连接北美、南美、欧洲和非洲的重要数据长廊。</p><p>博客还提到，百慕大长期以来一直致力于发展海底光缆市场，而且全球 95% 的数据流动都是通过海底光缆传输。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259549/nuvem-subsea-cable</guid>
            <link>https://www.oschina.net/news/259549/nuvem-subsea-cable</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度发布首个量子领域大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在近日召开的 2023 量子产业大会上，百度量子计算研究所所长段润尧带来百度量子软硬件和解决方案等方面的最新成果，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FQpACJh3RXKKfyKCvBvapjQ" target="_blank">发布</a>了首个量子领域大模型，及百度量子助手和量子写作助手两大 AI 原生应用；还发布了量子领域大模型白皮书。</span></p><p><span style="color:#000000">根据介绍，百度发布首个量子领域大模型，旨在芯片层、框架层、模型层及应用层等全栈技术上加速量子技术与大模型深度融合，充分激发两大技术各自的潜力。该量子领域大模型是在文心一言基础上，使用量子领域高质量数据进行更有针对性的训练和优化而构建的量子领域大模型，能更好地理解量子知识，专业执行量子任务。</span></p><p><img alt="" height="333" src="https://oscimg.oschina.net/oscnet/up-0ff8b0a44302a63883fc37980394ad3c7c2.jpg" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">百度量子助手是依托百度量子知识库与产业级知识增强文心大模型，基于 7800 万原始数据、22 万精调数据训练打造。只需输入 6 个变量，量子写作助手可在 5 分钟内撰写一篇 13000 字符合格式要求的专利文档，高效帮助企业将量子领域的研究成果与知识产权沉淀为企业资产。</span></p><p><span style="color:#000000">段润尧表示，量子领域大模型的未来发展将会呈现出多个代表性阶段。从近期以适配量子领域的行业大模型开始，大幅降低量子教育行业门槛；逐渐过渡为经典和量子混合大模型，再发展到通用量子领域大模型，有望实现大模型技术在数据、算法、算力等各维度的全面量子化；最终，量子领域大模型将会成为新时代的操作系统，在量子互联网的基础上互联互通，成为社会发展的基础设施。</span></p><p><span style="color:#000000">此外，段润尧还公布了百度在量子芯片、软硬一体化解决方案等核心领域的最新进展。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259545</guid>
            <link>https://www.oschina.net/news/259545</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[聆心智能发布定制角色对话交互模型 CharacterGLM]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">聆心智能团队<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FoD4nJjAlWxp8wM_Lm0GEsQ" target="_blank">开发</a>了用于定制角色进行对话交互的 CharacterGLM，以 ChatGLM 模型为底座，具有 6B、12B、66B 的参数量。聆心智能将对社会开放 12B 和 66B 模型的 API 访问，并将 CharacterGLM-6B 模型进行开源。</span></p><p><span style="color:#000000">该团队采用人工交互的方式评测 CharacterGLM 与业界最强的竞争对手（以下简称 JP）的性能。定制了数十个角色，类型分布于名人类、生活类、游戏影音类和虚拟恋爱类；要求标注者与每个角色至少交互 20 轮，每轮对话由两个模型生成回复。标注者选择胜出的回复继续展开对话，若回复偏好相同则随机选择。</span></p><p><span style="color:#000000">按角色类别统计两个模型的 win/tie/lose 比率。结果如表 1 所示，CharacterGLM 在大多数类别上的表现均优于 JP。</span></p><p><img height="228" src="https://oscimg.oschina.net/oscnet/up-629a6df96c49d3e6cd16ed068a107536ee4.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">为了衡量 CharacterGLM 在不同话题下的表现，其进一步将对话话题限定在常见的闲聊、访谈和恋爱场景下进行交互测试，评测方式与上面相同，结果如表 2 所示，CharacterGLM 在闲聊和恋爱场景下与 JP 持平，但在访谈场景下显著优于 JP。</span></p><p><img height="223" src="https://oscimg.oschina.net/oscnet/up-bc7f2d8f46bbcaa6f9dd6419e087ba01cb0.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">以及进一步分析了 CharacterGLM 在不同轮次范围内的角色表现，结果如表 3 所示，CharacterGLM 在对话的前期略次于 JP，但随着对话的推进，CharacterGLM 的优势则逐渐凸显。</span></p><p><span style="color:#000000">下面展示了从交互测评数据中采样的名人类、生活类、游戏影音类和虚拟恋爱类角色的交互样例。</span></p><p><strong><span style="color:#000000">名人类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="913" src="https://oscimg.oschina.net/oscnet/up-abb418380711fbc4c5f6af9c0640577898b.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">生活类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="421" src="https://oscimg.oschina.net/oscnet/up-2e4fe595a847879295de61567d340332e2f.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">游戏影音类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="458" src="https://oscimg.oschina.net/oscnet/up-9e3176f285b0fbfada2bd51e4b8cdc7062b.png" width="300" referrerpolicy="no-referrer"></span></strong></p><p><strong><span style="color:#000000">虚拟恋爱类角色</span></strong></p><p><strong><span style="color:#000000"><img alt="" height="687" src="https://oscimg.oschina.net/oscnet/up-9ad6daae66ce227eb3a043cb4408ccf839a.png" width="300" referrerpolicy="no-referrer"></span></strong></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 03:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259539</guid>
            <link>https://www.oschina.net/news/259539</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 为 ChatGPT 添加多模态输入功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenAI CEO Sam Altman 昨晚在 Twitter <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsama%2Fstatus%2F1706292549198237997" target="_blank">宣布</a>，ChatGPT 新增了语音和图像功能。换言之，ChatGPT 支持看、听和说话了。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7ac69cc2cb8172192a8ff7f1c26e65c8018.png" referrerpolicy="no-referrer"></p><p>据介绍，ChatGPT 此次推出的语音和图像功能提供了一种新的、更直观的界面类型，允许用户跟它进行语音对话，向 ChatGPT 展示说话内容。</p><p>更新之后的 ChatGPT 将会支持语音输入和图像输入，更方便用户与机器人进行交流。其中语音输入功能仅在 iOS 和 Android 平台上线，而图像输入功能将会登录全平台。</p><p><strong>使用示例</strong></p><p><img src="https://static.oschina.net/uploads/space/2023/0926/110206_sVWo_2720166.gif" referrerpolicy="no-referrer"></p><p>新功能将会在两周内陆续向 Plus 用户开放。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:56:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/259535/chatgpt-can-now-see-hear-and-speak</guid>
            <link>https://www.oschina.net/news/259535/chatgpt-can-now-see-hear-and-speak</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mwmbl —— 开源非盈利搜索引擎]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mwmbl (发音类似 "mumble") 是一个用 Python 实现的，非营利、无广告、免费的搜索引擎，注重可用性和速度。目前，它只不过是一个想法以及在小型索引上实现 Web 前端和搜索技术的<a href="https://mwmbl.org/">概念验证。</a></p><p>项目<span style="background-color:#ffffff; color:#1f2328">愿景是建立一个致力于提供高质量搜索（特别是针对黑客）的社区，其资金完全来自捐赠。</span></p><p><img alt="" height="394" src="https://static.oschina.net/uploads/space/2023/0919/162741_A8HW_4252687.gif" width="700" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/mwmbl</guid>
            <link>https://www.oschina.net/p/mwmbl</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | Kubernetes 集群部署工具 KubeKey]]>
            </title>
            <description>
                <![CDATA[<p>内容可能含有违规信息</p>
]]>
            </description>
            <pubDate>Sun, 24 Sep 2023 02:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/kchstack/kubekey</guid>
            <link>https://gitee.com/kchstack/kubekey</link>
        </item>
    </channel>
</rss>
