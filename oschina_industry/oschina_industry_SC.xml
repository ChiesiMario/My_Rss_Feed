<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 11 Nov 2023 18:04:09 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[比尔·盖茨：AI Agent 将颠覆软件行业]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>比尔·盖茨在其个人网站<strong><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gatesnotes.com%2FAI-agents" target="_blank">撰文</a></u></strong>谈论了&nbsp;<strong>AI Agent</strong>，称它将彻底改变大众使用电脑的方式，并颠覆软件行业。</p><p><img src="https://static.oschina.net/uploads/space/2023/1111/211033_XnvN_2720166.png" referrerpolicy="no-referrer"></p><blockquote><p>AI Agent 属于人工智能领域的术语，是一种能够感知环境、进行决策和执行动作的智能实体。不同于传统的人工智能，AI Agent 具备通过独立思考、调用工具去逐步完成给定目标的能力。</p></blockquote><p>比尔·盖茨认为，现在要在电脑上执行任何任务，必须先告诉设备启动相应的程序。但它们无法帮助用户发送邮件、分享自拍、分析数据、安排聚会获购买电影票，即便是最好的网站，也无法完全了解自己的工作、生活、兴趣和人际关系。并且使用这些信息为你做事的能力也有限。这种事情在今天只有与另一个人（例如亲密的朋友或私人助理）合作时才有可能实现。</p><p>但是未来五年内，上述情况将彻底改变。用户只需要用简洁明了的语言「告诉」设备自己想做什么，软件便可根据用户分享信息的多少、对用户生活的了解程度，作出个性化的回应。在不久的将来，任何上网的人都可以拥有一个由远远超出当今技术的&nbsp;<span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">AI 驱动的个人助理。</span></p><p>比尔·盖茨说道，这种对自然语言做出反应，并能根据对用户的了解完成许多不同任务的软件被称为<strong> Agent</strong>。而他在这 30 多年来，一直在思考关于 Agent 的问题，并在 1995 年出版的《未来之路》<em>(The Road Ahead)&nbsp;</em>一书中对其进行了论述。但直到最近，由于人工智能的进步，Agent 才变得切实可行。</p><p>他认为，<strong>Agent 不仅会改变每个人与计算机交互的方式。它们还将颠覆软件行业，掀起自我们从输入命令到点击图标以来最大的计算革命</strong>。而 AI Agent 最令人兴奋的影响是它们将使当今对大多数人来说过于昂贵的服务民主化。它们将在四个领域产生特别大的影响：医疗保健、教育、生产力以及购物娱乐。</p><p>原文：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gatesnotes.com%2FAI-agents" target="_blank">https://www.gatesnotes.com/AI-agents</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 11 Nov 2023 13:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266065/bill-gate-talk-about-ai-agents</guid>
            <link>https://www.oschina.net/news/266065/bill-gate-talk-about-ai-agents</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 上的 .NET 8 独立体积减少 50%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>.NET 7 首次引入了以<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fdeploying%2Fnative-aot%2F" target="_blank">原生 AOT (Native AOT)</a></u>发布应用程序的选项。基于此特性，开发者使用原生 AOT 发布应用程序可以创建一个完全独立 (self-contained) 的版本，它不需要运行时，所有内容都包含在一个文件中。</p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fwhats-new%2Fdotnet-8%23native-aot-support" target="_blank">微软介绍道</a></u>，.NET 8 为原生 AOT 发布带来了以下改进：</p><ul><li>增加对 x64 和 macOS Arm64 架构的支持</li><li>将 Linux 上原生 AOT 应用程序的大小最多减少 50%<br><br> 下表显示了使用原生 AOT 发布的 "Hello World" 应用程序的大小，其中包括 .NET 7 与 .NET 8 上的整个 .NET 运行时：<br><img height="414" src="https://static.oschina.net/uploads/space/2023/1111/184357_9MxX_2720166.png" width="2356" referrerpolicy="no-referrer"></li></ul><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flearn.microsoft.com%2Fen-us%2Fdotnet%2Fcore%2Fwhats-new%2Fdotnet-8" target="_blank">点此查看详情</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 11 Nov 2023 10:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266051</guid>
            <link>https://www.oschina.net/news/266051</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mozilla 发布首款大模型 Fakespot Chat]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Mozilla 今年初收购了一家利用 AI 和机器学习识别虚假和欺骗性产品评论的初创公司 Fakespot。现在它推出了自己的首款大模型 Fakespot Chat。</p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.fakespot.com%2Factivate-fakespot-chat" target="_blank">https://www.fakespot.com/activate-fakespot-chat</a></u></em></p><p>根据介绍，Fakespot Chat 会在消费者在线购物时为其提供帮助，评估商品，回答有关产品的问题，甚至提出对产品研究有用的问题。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0c8ba2eab76180ea01cd2354846b379bc1a.png" referrerpolicy="no-referrer"></p><p>Fakespot 一直在利用 AI，包括生成式 AI 技术，来提高而不是降低网上购物过程的可信度。例如，它在去年推出了一项名为"优点和缺点"的人工智能生成功能，通过自己编写产品的优点和缺点总结，取代了阅读评论的需要。公司表示，该功能是在数十亿个数据点的基础上训练出来的，模型本身使用了五种不同的模型。</p><p>本周，Fakespot Chat 开始测试，购物者可以向它询问正在考虑的产品，就像在现实世界中的实体店购物时向销售人员寻求帮助一样。该技术利用 AI 和机器学习对产品评论进行排序，分辨真伪，回答用户的问题。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3195b13d6b959f1bddbd173f9fb8e7c06c6.png" referrerpolicy="no-referrer"></p><p>Mozilla 表示，聊天会话中的信息会被保存下来，这是为了改善体验，用户可在无需创建账户或泄露个人信息的前提下使用这项服务。</p><p>Mozilla 也承认，这个 AI 聊天机器人不一定总能做出正确决策，因此它邀请用户提交反馈意见，如果他们认为该模型可以改进的话。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 11 Nov 2023 03:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/266008/fakespot-chat-mozillas-first-llm</guid>
            <link>https://www.oschina.net/news/266008/fakespot-chat-mozillas-first-llm</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Unity 中国版——「团结引擎」全面支持 OpenHarmony]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Unity 中国<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FPtRYKloNoBFpicvPGiDFgw" target="_blank">宣布</a></u>与开放原子开源基金会达成平台级战略合作。</p><p><strong>据称团结引擎已全面支持 OpenHarmony 操作系统</strong>，同时将为 OpenHarmony 生态快速带来更多高品质游戏与实时 3D 内容。Unity 称现在用户可以「在 OpenHarmony 框架中感受到与安卓和 iOS 同样丝滑的游戏体验」。</p><p>目前，<strong>团结引擎已全面适配 OpenHarmony 各项系统能力</strong>，包括但不限于 Ability 框架适配、XComponent 能力适配、ArkUI 适配等等。同时，开发者可以通过团结引擎完成底层渲染架构、文件系统、触控系统和音视频等系统能力相适配。</p><p>据介绍，Unity 中国引擎研发团队将引擎原来的各项能力在 OpenHarmony 上进行实现，从而兼容原来所有的接口及逻辑实现。现在，开发者可以直接通过 Editor 导出 Ability Project 用于 Deveco Studio 的开发，也能直接打包出安装包，加速项目的适配开发。</p><p>出包环节，团结引擎延用了 Unity 2022 LTS 版本的高效打包流程，确保开发者不会在陌生的环境下进行打包操作，降低学习成本。通过在团结引擎中新增的 "OpenHarmony 平台"&nbsp;的 BuildTarget，开发者能够<strong>一键切换平台和构建出包</strong>，可使得项目组在不增加额外人手和时间成本的基础上，快速完成出包、审核、上架的流程。</p><hr><p>团结引擎是 Unity 中国研发团队推出的 Unity 中国版引擎，它以<strong>Unity 2022 LTS</strong>为研发基础。上个月，<u><a href="https://www.oschina.net/news/261999">「团结引擎」开启内测</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 10:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265946</guid>
            <link>https://www.oschina.net/news/265946</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.0 - 支持 OceanBase Oracle 模式]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>支持 OceanBase Oracle 模式。</li><li>支持设置 MySQL 在线变更参数。</li><li>新增项目数据库查看者的角色。</li></ul><h2>🎄 改进</h2><ul><li>支持在项目中直接选择所有用户并为之添加角色。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-5201834160b7cab041ef604993e52243517.png" alt="file" referrerpolicy="no-referrer"></p><ul><li>调整了项目页面的布局。</li><li>在 SQL 编辑器中通过悬浮面板展示表和列的详情。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-d67bf21c4131f374bed4fd7aefcd4cedef9.png" alt="file" referrerpolicy="no-referrer"></p><h2>🪦 不再支持</h2><ul><li>Bytebase 新版本中将不再提供书签功能。我们建议您使用浏览器的书签功能作为替代方案。</li></ul><h2>🐞 Bug 修复</h2><p>修复在 Azure DevOps 或 Bitbucket 中重命名文件无法触发在 Bytebase 中工单创建的问题。</p><h2>🎠 社区</h2><p>感谢 @bds-congnguyen 提交 fix: update bytebase-sql-review.yml for CICD #8984</p><h2>📕 安装及升级</h2><p>参考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升级指南</a>。如果从之前版本升级，获取新版本后，重新启动升级即可。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 09:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10141966</guid>
            <link>https://my.oschina.net/u/6148470/blog/10141966</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stability AI 再融资 5000 万美元，英特尔领投]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span style="color:#000000">彭博社援引消息人士的话</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bloomberg.com%2Fnews%2Farticles%2F2023-11-09%2Fstability-ai-gets-intel-backing-in-new-financing%3Fsrnd%3Dtechnology-ai" target="_blank"><span style="color:#2980b9">报道称</span></a><span style="color:#000000">，AI 初创公司 Stability AI 已获得了由英特尔领投的新一轮融资。该公司在这笔交易中以可转换票据的形式筹集了近 5000 万美元，交易于 10 月份完成。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 是 Stable Diffusion 背后的公司，Stable Diffusion 是一个文本转图像模型，是除 OpenAI 之外其他较为流行的生成式 AI 工具之一。</span></p><p style="color:#494949"><span style="color:#000000">彭博社指出，此次现金注入正值 Stability AI 的关键时刻，因为该公司最近遇到了一些挑战。一方面是公司高层出现了一些更替，解雇了包括人力资源主管在内的六名高级员工。</span></p><p style="color:#494949"><span style="color:#000000">另一方面则是董事会代表之间存在一些分歧。Stability AI 的主要投资者 Coatue Management 对其首席执行官 Emad Mostaque 的领导能力有些意见，并考虑增加一名联合首席执行官或总裁。</span></p><p style="color:#494949"><img height="219" src="https://static.oschina.net/uploads/space/2023/1110/153216_qixm_4252687.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#494949"><span style="color:#000000">知情人士透露，Coatue 已于 10 月离开了 Stability AI 董事会。并表示原因在于英特尔对 Stability 的投资，因为 Coatue 持有英特尔的竞争对手 AMD 公司的大量股份。目前 Coatue 公司仍持有 Stability 公司 5000 万美元的股份。</span></p><p style="color:#494949"><span style="color:#000000">另一位投资者 Lightspeed Venture Partners 的 Gaurav Gupta 最近也辞去了 Stability AI 董事会观察员的职务，原因是他与管理层在公司发展方向上存在意见分歧。目前，Coatue 和 Lightspeed 的代表都拒绝对此发表评论。</span></p><p style="color:#494949"><span style="color:#000000">此外，Stability AI 还面临联合创始人 Cyrus Hodes 的诉讼，他声称自己在 Stability AI 达到 10 亿美元估值里程碑之前被欺骗以低估值出售了手中的股票。但 Stability AI 对这些说法提出了异议。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 对其未来前景表示乐观。该公司声称，员工流动是初创企业生态系统中的正常现象，并强调其对董事会成员的指导和专业知识的重视。还进一步强调了其显着的收入增长，称其在过去一年中增长了十倍，并预测随着其推出更多产品，到年底收入将进一步扩大。</span></p><p style="color:#494949"><span style="color:#000000">Stability AI 发言人在一份声明中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.pymnts.com%2Fartificial-intelligence-2%2F2023%2Freport-stability-ai-secures-50-million-in-financing%2F" target="_blank">表示</a>： 「Stability AI 公司正以强劲、健康的态势继续其在生成式 AI 领域的世界领先工作。去年，我们的收入增长了十倍，随着我们继续推出新产品，我们的目标是在今年年底前进一步增长。我们是全球唯一一家独立、开源、多模态（图像、语言、代码、三维、音频）人工智能公司。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 09:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265920/stability-ai-intel-50-million</guid>
            <link>https://www.oschina.net/news/265920/stability-ai-intel-50-million</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 开源量化交易框架 AmazingQuant]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-amazingquant" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#amazingquant"></a>AmazingQuant<br></h1><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fwatchers"><img src="https://img.shields.io/github/watchers/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Watchers&amp;" alt="Github workers" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fstargazers"><img src="https://img.shields.io/github/stars/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Star&amp;" alt="GitHub stars" referrerpolicy="no-referrer"></a><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Ffork"><img src="https://img.shields.io/github/forks/zhanggao2013/AmazingQuant.svg?style=social&amp;label=Fork&amp;" alt="GitHub forks" referrerpolicy="no-referrer"></a></p><h1><a id="user-content-1 简介" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#1%E7%AE%80%E4%BB%8B"></a>1.简介</h1><p>AmazingaQuant——为交易而生的智能投研 Lab。包含策略模型研究服务、量化数据服务、指标计算服务、绩效分析服务四大功能模块。<br>
1.1 策略研究服务<br>
　　四大策略体系的研究体系<br>
（1）选股体系<br>
　　中低频组合选股模型、强势短线模型<br>
（2）风险预警体系<br>
　　事件风险等建立黑白名单模型<br>
（3）择时体系<br>
　　仓位控制择时、行业风格轮动<br>
（4）T+0 体系<br>
　  全市场股票分类（活跃型与稳定型），做 T0 模型<br></p><p>1.2 量化数据服务<br>
1.2.1 历史数据存储<br>
存储到服务器的 mongoDB 作为数据服务器，并保存到本地的 HDF5，满足策略需求。<br>
（1）基础行情数据<br>
　　tick、1min、5min、日线等周期的股票、指数<br>
（2）基本面数据<br>
　　财务数据<br>
　　股本数据<br>
（3）行情衍生数据<br>
　　龙虎榜数据<br>
　　指数成分股数据<br>
　　行业板块成分股数据<br>
　　行业指数日线行情数据<br></p><p>1.2.1  实时行情对接<br>
（1）股票、指数的 tick 数据实时全推行情<br>
（2）重采样为 1min、5min、日线等三个周期数据<br></p><p>1.3 指标计算服务<br>
　　历史指标计算满足策略研究，实时指标计算满足实盘交易<br>
（1）日线、周线、月线、年线周期等低频指标的历史数据计算，固定存储为 HDF5 格式，<br>
（2）分钟、tick 周期等高频数据指标计算，历史数据计算和实时指标计算两部分<br></p><p>1.4 绩效分析服务<br>
　　回测数据格式对接，满足策略研究的评价；实盘数据格式对接，满足实盘运行的监控。<br>
1.4.1 净值数据分析<br>
（1）年化波动率,日收益波动率,月收益波动率，该值表明因子对收益率贡献的波动程度<br>
（2）日收益率分布,月收益率分布,正收益天数,负收益天数,日胜率,月胜率,峰度,偏度<br>
（3）最大回撤<br>
（4）夏普比率,calmar 比率,特雷诺比率,索提诺比率<br>
（5）beta,跟踪误差,信息比率<br>
1.4.2 交易数据分析<br>
（1）也针对回测的：滑点损失<br>
（2）总交易次数、日均交易次数、胜率（个股从建仓到完全平仓）、平均持仓周期、换手率、交易费用、总交易金额<br>
（3）分每只股票统计，交易数量、金额、时间<br>
1.4.3 持仓数据分析<br>
（1）持仓行业市值、占比<br>
（2）持仓估值风格分析<br>
（3）持仓综合风格分析<br>
1.4.4 绩效归因<br>
（1）多因子归因<br>
　　投资收益分为每个风格（行业）因子收益、特殊收益、日内调仓收益 <br>
（2）brinson 归因<br>
　　投资收益分为基准收益和超额收益，其中超额收益分为：资产配置收益、个股选择收益和交互收益<br>
（3）收益分解<br>
　　市场中性策略,基本分解公式为：总收益=交易收益+选股收益+择时收益+基差收益+交易成本<br>
　　纯股票策略,基本分解公式为：总收益=交易收益+选股收益+择时收益+基准收益+交易成本<br></p><p>下图是总体框架架构。<br><img src="https://github.com/zhanggao2013/AmazingQuant/blob/master/documents/framework_architecture.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li>data_center
<ul><li>to_mongoDB 存放行情、财务等各种数据到 MongoDB 的存储模块</li><li>get_data   策略中从数据库中取数据的接口模块</li></ul></li><li>trade_center
<ul><li>mossion_engine   包含下单任务（event_order）和风控（event_risk_management）两部分的 engine，分别完成下单前的检查和风控</li><li>broker_engine    分为回测时的 simulate 的 broker（主要是 event_deal）撮合成交和连接实盘交易 CTP、xSpeed 等接口两部分</li></ul></li><li>strategy_center
<ul><li>bar_engine       在回测或者交易模式下，用<code>逐 K 线</code>的方式执行每一根 bar 的交易逻辑，可在日线、分钟线、分笔下运行</li></ul></li><li>analysis_center
<ul><li>analysis_engine  对回测形成的交易记录进行分析和可视化，净值、年化收益、alpha、beta、回撤等指标，brison、Fama 等经典模型的实现</li></ul></li></ul><h1><a id="user-content-2 安装配置" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE"></a>2.安装配置</h1><ul><li>MongoDB 3.4 <br>
建议使用 shard，<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fzhanggao2013%2FAmazingQuant%2Fblob%2Fmaster%2Fdocuments%2FMongoDB_config.md">配置启动项示例</a></li><li>pymongo <br>
python 调用 MongoDB</li><li>talib <br>
技术指标计算库</li><li>anaconda <br>
python 3.5 的版本，如果大于 3.5 的版本，ctp 的接口暂时不能用，因为编译问题，后续可以解决</li><li>Linux Ubuntu <br>
开发环境是 ubuntu，当然也可以在 windows 下用，但是数据库的配置和 ctp 等交易接口需要重新做</li><li>安装 AmazingQuant
pip install AmazingQuant  直接安装</li></ul><h1><a id="user-content-3 策略编写" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#3%E7%AD%96%E7%95%A5%E7%BC%96%E5%86%99"></a>3.策略编写</h1><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line"><span class="c1">#-*- coding: utf-8 -*-</span></span><span id="LC2" class="line"></span><span id="LC3" class="line"><span class="c1"># ------------------------------</span></span><span id="LC4" class="line"><span class="c1"># @Time    : 2019/11/14</span></span><span id="LC5" class="line"><span class="c1"># @Author  : gao</span></span><span id="LC6" class="line"><span class="c1"># @File    : example_strategy.py.py</span></span><span id="LC7" class="line"><span class="c1"># @Project : AmazingQuant</span></span><span id="LC8" class="line"><span class="c1"># ------------------------------</span></span><span id="LC9" class="line"><span class="kn">import</span><span class="nn">time</span></span><span id="LC10" class="line"></span><span id="LC11" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.utils.performance_test</span><span class="kn">import</span><span class="n">Timer</span></span><span id="LC12" class="line"><span class="c1"># import strategy 基类</span></span><span id="LC13" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.strategy_center.strategy</span><span class="kn">import</span><span class="o">*</span></span><span id="LC14" class="line"></span><span id="LC15" class="line"><span class="c1"># 取各种数据</span></span><span id="LC16" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.data_center.api_data.get_index_member</span><span class="kn">import</span><span class="n">GetIndexMember</span></span><span id="LC17" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.indicator_center.save_get_indicator</span><span class="kn">import</span><span class="n">SaveGetIndicator</span></span><span id="LC18" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.utils.logger</span><span class="kn">import</span><span class="n">Logger</span></span><span id="LC19" class="line"><span class="kn">from</span><span class="nn">AmazingQuant.environment</span><span class="kn">import</span><span class="n">Environment</span></span><span id="LC20" class="line"></span><span id="LC21" class="line"></span><span id="LC22" class="line"><span class="c1"># 继承 strategy 基类</span></span><span id="LC23" class="line"><span class="k">class</span><span class="nc">MaStrategy</span><span class="p">(</span><span class="n">StrategyBase</span><span class="p">):</span></span><span id="LC24" class="line"><span class="k">def</span><span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">strategy_name</span><span class="o">=</span><span class="s">'ma_strategy'</span><span class="p">):</span></span><span id="LC25" class="line"><span class="s">"""</span></span><span id="LC26" class="line"><span class="s">        用户定义类变量</span></span><span id="LC27" class="line"><span class="s">        取本地数据</span></span><span id="LC28" class="line"><span class="s">        :param strategy_name:</span></span><span id="LC29" class="line"><span class="s">        """</span></span><span id="LC30" class="line"><span class="nb">super</span><span class="p">().</span><span class="n">__init__</span><span class="p">(</span><span class="n">strategy_name</span><span class="o">=</span><span class="n">strategy_name</span><span class="p">)</span></span><span id="LC31" class="line"></span><span id="LC32" class="line"><span class="c1"># 取指数成分股实例</span></span><span id="LC33" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="o">=</span><span class="n">GetIndexMember</span><span class="p">()</span></span><span id="LC34" class="line"><span class="c1"># 取 K 线数据实例</span></span><span id="LC35" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">data_class</span><span class="o">=</span><span class="n">GetKlineData</span><span class="p">()</span></span><span id="LC36" class="line"><span class="c1"># 取指标实例</span></span><span id="LC37" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="o">=</span><span class="n">SaveGetIndicator</span><span class="p">()</span></span><span id="LC38" class="line"></span><span id="LC39" class="line"><span class="c1"># 取指标数据</span></span><span id="LC40" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">ma5</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">get_indicator</span><span class="p">(</span><span class="s">'ma5'</span><span class="p">)</span></span><span id="LC41" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">ma10</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">indicator</span><span class="p">.</span><span class="n">get_indicator</span><span class="p">(</span><span class="s">'ma10'</span><span class="p">)</span></span><span id="LC42" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span></span><span id="LC43" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="o">=</span><span class="n">Logger</span><span class="p">(</span><span class="n">strategy_name</span><span class="p">)</span></span><span id="LC44" class="line"></span><span id="LC45" class="line"><span class="k">def</span><span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span></span><span id="LC46" class="line"><span class="c1"># 设置运行模式，回测或者交易</span></span><span id="LC47" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">run_mode</span><span class="o">=</span><span class="n">RunMode</span><span class="p">.</span><span class="n">BACKTESTING</span><span class="p">.</span><span class="n">value</span></span><span id="LC48" class="line"><span class="c1"># 设置回测资金账号</span></span><span id="LC49" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="o">=</span><span class="p">[</span><span class="s">'test0'</span><span class="p">]</span></span><span id="LC50" class="line"><span class="c1"># 设置回测资金账号资金量</span></span><span id="LC51" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">capital</span><span class="o">=</span><span class="p">{</span><span class="s">'test0'</span><span class="p">:</span><span class="mi">2000000</span><span class="p">}</span></span><span id="LC52" class="line"><span class="c1"># 设置回测基准</span></span><span id="LC53" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">benchmark</span><span class="o">=</span><span class="s">'000300.SH'</span></span><span id="LC54" class="line"><span class="c1"># 设置复权方式</span></span><span id="LC55" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">rights_adjustment</span><span class="o">=</span><span class="n">RightsAdjustment</span><span class="p">.</span><span class="n">FROWARD</span><span class="p">.</span><span class="n">value</span></span><span id="LC56" class="line"><span class="c1"># 设置回测起止时间</span></span><span id="LC57" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">start</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2018</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span></span><span id="LC58" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">end</span><span class="o">=</span><span class="n">datetime</span><span class="p">(</span><span class="mi">2019</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span></span><span id="LC59" class="line"><span class="c1"># 设置运行周期</span></span><span id="LC60" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">period</span><span class="o">=</span><span class="s">'daily'</span></span><span id="LC61" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_all_index_members</span><span class="p">()</span></span><span id="LC62" class="line"><span class="n">_</span><span class="p">,</span><span class="n">index_members_all</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_index_members</span><span class="p">(</span><span class="s">'000300.SH'</span><span class="p">)</span></span><span id="LC63" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">universe</span><span class="o">=</span><span class="n">index_members_all</span></span><span id="LC64" class="line"></span><span id="LC65" class="line"><span class="c1"># 设置在运行前是否缓存日线，分钟线等各个周期数据</span></span><span id="LC66" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">daily_data_cache</span><span class="o">=</span><span class="bp">True</span></span><span id="LC67" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">universe</span><span class="p">)</span></span><span id="LC68" class="line"></span><span id="LC69" class="line"><span class="c1"># 回测滑点设置，按固定值 0.01,20-0.01 = 19.99;百分比 0.01,20*(1-0.01) = 19.98;平仓时用'+'</span></span><span id="LC70" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_slippage</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">slippage_type</span><span class="o">=</span><span class="n">SlippageType</span><span class="p">.</span><span class="n">SLIPPAGE_FIX</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">value</span><span class="o">=</span><span class="mf">0.01</span><span class="p">)</span></span><span id="LC71" class="line"></span><span id="LC72" class="line"><span class="c1"># 回测股票手续费和印花税，卖出印花税，千分之一；开仓手续费，万分之三；平仓手续费，万分之三，最低手续费，５元</span></span><span id="LC73" class="line"><span class="c1"># 沪市，卖出有万分之二的过户费，加入到卖出手续费</span></span><span id="LC74" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_commission</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK_SH</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">tax</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span><span class="n">open_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC75" class="line"><span class="n">close_commission</span><span class="o">=</span><span class="mf">0.00032</span><span class="p">,</span></span><span id="LC76" class="line"><span class="n">close_today_commission</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min_commission</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span><span id="LC77" class="line"><span class="c1"># 深市不加过户费</span></span><span id="LC78" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">set_commission</span><span class="p">(</span><span class="n">stock_type</span><span class="o">=</span><span class="n">StockType</span><span class="p">.</span><span class="n">STOCK_SZ</span><span class="p">.</span><span class="n">value</span><span class="p">,</span><span class="n">tax</span><span class="o">=</span><span class="mf">0.001</span><span class="p">,</span><span class="n">open_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC79" class="line"><span class="n">close_commission</span><span class="o">=</span><span class="mf">0.0003</span><span class="p">,</span></span><span id="LC80" class="line"><span class="n">close_today_commission</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="n">min_commission</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span></span><span id="LC81" class="line"></span><span id="LC82" class="line"><span class="k">def</span><span class="nf">handle_bar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">event</span><span class="p">):</span></span><span id="LC83" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'self.time_tag'</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">,</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">(),</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="p">)</span><span class="o">*</span><span class="mi">1000</span><span class="p">)</span></span><span id="LC84" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">debug</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">bar_position_data_list</span><span class="p">))</span></span><span id="LC85" class="line"><span class="c1"># 取当前 bar 的持仓情况</span></span><span id="LC86" class="line"><span class="k">with</span><span class="n">Timer</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span></span><span id="LC87" class="line"><span class="n">available_position_dict</span><span class="o">=</span><span class="p">{}</span></span><span id="LC88" class="line"><span class="k">for</span><span class="n">position</span><span class="ow">in</span><span class="n">Environment</span><span class="p">.</span><span class="n">bar_position_data_list</span><span class="p">:</span></span><span id="LC89" class="line"><span class="n">available_position_dict</span><span class="p">[</span></span><span id="LC90" class="line"><span class="n">position</span><span class="p">.</span><span class="n">instrument</span><span class="o">+</span><span class="s">'.'</span><span class="o">+</span><span class="n">position</span><span class="p">.</span><span class="n">exchange</span><span class="p">]</span><span class="o">=</span><span class="n">position</span><span class="p">.</span><span class="n">position</span><span class="o">-</span><span class="n">position</span><span class="p">.</span><span class="n">frozen</span></span><span id="LC91" class="line"><span class="n">index_member_list</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">index_member_obj</span><span class="p">.</span><span class="n">get_index_member_in_date</span><span class="p">(</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">)</span></span><span id="LC92" class="line"></span><span id="LC93" class="line"><span class="n">close_price_all</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">data_class</span><span class="p">.</span><span class="n">get_market_data</span><span class="p">(</span><span class="n">Environment</span><span class="p">.</span><span class="n">daily_data</span><span class="p">,</span><span class="n">stock_code</span><span class="o">=</span><span class="n">index_member_list</span><span class="p">,</span></span><span id="LC94" class="line"><span class="n">field</span><span class="o">=</span><span class="p">[</span><span class="s">'close'</span><span class="p">],</span></span><span id="LC95" class="line"><span class="n">start</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">,</span><span class="n">end</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">)</span></span><span id="LC96" class="line"><span class="c1"># 循环遍历股票池</span></span><span id="LC97" class="line"><span class="k">for</span><span class="n">stock</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC98" class="line"><span class="c1"># 取当前股票的收盘价</span></span><span id="LC99" class="line"><span class="n">close_price</span><span class="o">=</span><span class="n">close_price_all</span><span class="p">[</span><span class="s">'close'</span><span class="p">][</span><span class="n">stock</span><span class="p">]</span></span><span id="LC100" class="line"><span class="k">if</span><span class="n">close_price</span><span class="p">:</span></span><span id="LC101" class="line"><span class="n">ma5</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ma5</span><span class="p">[</span><span class="n">stock</span><span class="p">][</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">]</span></span><span id="LC102" class="line"><span class="n">ma20</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">ma10</span><span class="p">[</span><span class="n">stock</span><span class="p">][</span><span class="bp">self</span><span class="p">.</span><span class="n">time_tag</span><span class="p">]</span></span><span id="LC103" class="line"><span class="k">if</span><span class="n">ma5</span><span class="ow">and</span><span class="n">ma20</span><span class="p">:</span></span><span id="LC104" class="line"><span class="c1"># 如果 5 日均线突破 20 日均线，并且没有持仓，则买入这只股票 100 股，以收盘价为指定价交易</span></span><span id="LC105" class="line"><span class="k">if</span><span class="n">ma5</span><span class="o">&gt;</span><span class="n">ma20</span><span class="ow">and</span><span class="n">stock</span><span class="ow">not</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">()</span><span class="ow">and</span><span class="n">stock</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC106" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">trade</span><span class="p">.</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC107" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC108" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC109" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'buy'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC110" class="line"><span class="c1"># 如果 20 日均线突破 5 日均线，并且有持仓，则卖出这只股票 100 股，以收盘价为指定价交易</span></span><span id="LC111" class="line"><span class="k">elif</span><span class="n">ma5</span><span class="o">&lt;</span><span class="n">ma20</span><span class="ow">and</span><span class="n">stock</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span></span><span id="LC112" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">trade</span><span class="p">.</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=-</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC113" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC114" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC115" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'sell'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC116" class="line"><span class="k">for</span><span class="n">stock</span><span class="ow">in</span><span class="n">available_position_dict</span><span class="p">.</span><span class="n">keys</span><span class="p">():</span></span><span id="LC117" class="line"><span class="k">if</span><span class="n">stock</span><span class="ow">not</span><span class="ow">in</span><span class="n">index_member_list</span><span class="p">:</span></span><span id="LC118" class="line"><span class="n">Trade</span><span class="p">(</span><span class="bp">self</span><span class="p">).</span><span class="n">order_shares</span><span class="p">(</span><span class="n">stock_code</span><span class="o">=</span><span class="n">stock</span><span class="p">,</span><span class="n">shares</span><span class="o">=-</span><span class="mi">100</span><span class="p">,</span><span class="n">price_type</span><span class="o">=</span><span class="s">'fix'</span><span class="p">,</span></span><span id="LC119" class="line"><span class="n">order_price</span><span class="o">=</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC120" class="line"><span class="n">account_id</span><span class="o">=</span><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span></span><span id="LC121" class="line"><span class="n">Environment</span><span class="p">.</span><span class="n">logger</span><span class="p">.</span><span class="n">info</span><span class="p">(</span><span class="s">'sell not in index_member_list'</span><span class="p">,</span><span class="n">stock</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="s">'fix'</span><span class="p">,</span><span class="n">close_price</span><span class="p">,</span></span><span id="LC122" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">account</span><span class="p">)</span></span><span id="LC123" class="line"><span class="bp">self</span><span class="p">.</span><span class="n">now</span><span class="o">=</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span></span><span id="LC124" class="line"></span><span id="LC125" class="line"></span><span id="LC126" class="line"><span class="k">if</span><span class="n">__name__</span><span class="o">==</span><span class="s">'__main__'</span><span class="p">:</span></span><span id="LC127" class="line"><span class="c1"># 测试运行完整个策略所需时间，沪深 300 动态股票池，一年数据，均线策略,10s 完成,10S 绩效分析</span></span><span id="LC128" class="line"><span class="k">with</span><span class="n">Timer</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span></span><span id="LC129" class="line"><span class="c1"># 运行策略，设置是否保存委托，成交，资金，持仓</span></span><span id="LC130" class="line"><span class="n">ma_strategy</span><span class="o">=</span><span class="n">MaStrategy</span><span class="p">()</span></span><span id="LC131" class="line"><span class="n">ma_strategy</span><span class="p">.</span><span class="n">run</span><span class="p">(</span><span class="n">save_trade_record</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span></span><span id="LC132" class="line"></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h1><a id="user-content-4 联系方式" class="anchor" href="https://gitee.com/zhanggao2013/AmazingQuant#4%E8%81%94%E7%B3%BB%E6%96%B9%E5%BC%8F"></a>4.联系方式</h1><ul><li>微信号 (转发我的公众号文章后，可加入微信群):：<br>
gao_me150 <br></li><li>微信公众号：<br>
水善量化说<br><img src="https://github.com/zhanggao2013/AmazingQuant/blob/master/documents/wechat.jpg" alt="" referrerpolicy="no-referrer"></li></ul>]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 08:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/zhanggao2013/AmazingQuant</guid>
            <link>https://gitee.com/zhanggao2013/AmazingQuant</link>
        </item>
        <item>
            <title>
                <![CDATA[中国电信发布千亿级参数星辰语义大模型]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#494949"><span><span style="color:#222222">在 2023 数字科技生态大会上，中国</span><span style="color:#222222">国电信发布千亿级参数规模的星辰语义大模型。同时，星辰多模态大模型、星辰系列行业大模型也一并亮相。</span></span></p><p style="color:#494949"><span><span style="color:#222222">根据介绍，星辰语义大模型是中国电信自研大模型的升级，由此前的百万参数量级升至千亿，升级后在抑制幻觉、外推窗口、交互体验、多轮理解能力上均有所提升。</span></span></p><p style="color:#494949"><span><span style="color:#222222">技术方面，星辰语义拥有超 12 亿风格数据、训练显存降低 50%、推理提速 4.5 倍；中文意象理解生成能力提升 30%；语义细粒度生成效果提升 25%。在创意提效方面，星辰语义生产时间较此前生产工具减少 92%；设计成本下降 95%。</span></span></p><p style="color:#494949"><span><span style="color:#222222">中国电信方面表示，计划于今年 12 月开源百亿参数大模型；2024 年 4 月开源千亿参数大模型，明年 3 月实现平台工具的开放。</span></span></p><p style="color:#494949"><span><span style="color:#222222">此外，中国电信还在会议现场陆续发布了一连串产品及平台，其中一站式智算服务平台「慧聚」可实现模型开发、任务管理、模型优化、服务部署、模型服务等多项功能；中国电信「天衍」量子计算云平台则具备指数级加速大模型训练速率的潜力。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 06:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265881</guid>
            <link>https://www.oschina.net/news/265881</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[诺基亚在开源云平台 Sylva 成功进行 5G 独立组网测试]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>诺基亚<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.nokia.com%2Fabout-us%2Fnews%2Freleases%2F2023%2F11%2F09%2Fnokia-conducts-successful-tests-of-5g-standalone-core-with-orange-on-sylva-open-source-cloud-stack%2F" target="_blank">发布新闻稿称</a></u>，他们与电信运营商 Orange 共同合作，在开源云平台 Sylva 成功进行了 5G 独立组网 (5G Standalone Core, 5G SA) 测试。</p><p>文章提到诺基亚 5G SA 核心网络功能的互操作性测试在法国 Orange 的 Sylva 验证中心成功完成。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/140712_6l0n_2720166.png" referrerpolicy="no-referrer"></p><p>据介绍，Sylva 的整体目标是提供一个可被广泛使用的开源云平台，专为电信和边缘计算场景而定制，以解决行业的技术挑战。 Sylva 于 2022 年底在 Linux 欧洲基金会旗下推出，其支持者包括诺基亚和 Orange。</p><p>测试验证是提供灵活的云原生解决方案的关键一步，该解决方案可实现 5G SA 核心网络功能的大规模部署。对于 5G 专用无线企业客户，Sylva 旨在提供一种在边缘设备部署工业 4.0、物联网和 B2B2X 用例的有效方法。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/142112_gnv5_2720166.png" referrerpolicy="no-referrer"></p><p>诺基亚核心网络、云和网络服务高级副总裁兼总经理 Fran Heeran 表示：「诺基亚完全云原生的核心网络产品组合旨在通过开放、灵活的部署选项来支持不断发展的电信云环境，同时大大减少集成度，以及提供先进的自动化能力。由 Orange 主办的 Sylva 验证中心成功完成了 5G SA 核心用户平面功能 (User Plane Function) 的互操作性测试，这突显了我们的承诺和我们正在取得的进步。」</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 06:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265875</guid>
            <link>https://www.oschina.net/news/265875</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[亚马逊开发基于 Linux 的操作系统，以摆脱 Android 依赖]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Lowpass 记者 Janko Roettgers 从多方消息来源<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.lowpass.cc%2Fp%2Famazon-vega-os-fire-tv-android" target="_blank">得知</a>，亚马逊一直在开发一种新的操作系统 —— 内部代号为「Vega」，以便在 Fire TV、智能显示器和其他联网设备上取代 Android 系统。</span></p><p><span style="color:#000000">一直以来，亚马逊的一些智能家居设备都使用了名为 Fire OS 的 Android 分叉版本。但也正是因为依赖 Android 开源项目来构建 Fire OS，导致该公司操作系统的开发落后于谷歌多年。</span></p><p><span style="color:#000000">而 Vega 并不是一个新的 Android 分叉，也不是基于 AOSP，「是一种基于 Linux 的风格，并采用了一种更加面向网络的应用模式。应用程序开发人员被告知使用 React Native 作为应用程序框架，这样他们就可以使用 Javascript 驱动的界面来构建本地应用程序。」</span></p><p><img height="333" src="https://static.oschina.net/uploads/space/2023/1110/120051_g6gS_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">目前，亚马逊设备操作系统部门已有"数百人"在致力于新操作系统的开发，其中就包括前 Mozilla 工程师和 Javascript 专家 Zibi Braniecki。Branieck 于 2022 年初加入亚马逊从事 Alexa 工作，然后在 2023 年初过渡到设备操作系统团队。他当时曾在 LinkedIn 上透露，自己正在「为智能家居、汽车和其他亚马逊设备产品线开发下一代操作系统」。</span></p><p><span style="color:#000000">Roettgers 指出，Vega 开发进度似乎相当快。该系统已经在 Fire TV 流媒体适配器上进行了测试，且亚马逊已向部分合作伙伴透露了在不久的将来过渡到新应用框架的计划。</span></p><p><span style="color:#000000">一位了解该公司计划的消息人士表示，亚马逊最早可能会在明年开始在部分 Fire TV 设备上搭载 Vega。SDK 也正在准备发布，以便开发人员在 Vega 上市前将他们的应用程序移植到 Vega 上。</span></p><p><span style="color:#000000">此外，消息称亚马逊的<strong>最终目标是在其所有的新设备上摆脱对 Android 的依赖</strong>。Vega 不仅可以在 Fire TV 和智能显示器上运行，还可以在车载娱乐系统和其他未来的硬件产品上运行。亚马逊发布的多份招聘信息显示，Vega 将成为其汽车业务的关键。</span></p><p><span style="color:#000000">Vega 的出现，也帮助亚马逊避免了与谷歌的进一步冲突。Roettgers 称，两家公司长期以来一直为亚马逊使用 Android 系统的问题争吵不休，谷歌曾一度向硬件制造商施压，要求他们不要生产搭载亚马逊系统的智能电视。直到后来两家公司达成协议，允许亚马逊与海信和 TCL 等电视机制造商合作」，但亚马逊放弃 Android 系统后，应该能更好地掌控自己的命运。「</span></p><p><span style="color:#000000">不过一些业内人士认为，<span style="background-color:#ffffff">竞争压力可能并不是亚马逊转向 Vega 的主要原因。亚马逊真正关心的是如何在各种廉价设备上吸引数亿眼球，然后通过广告和服务将其货币化--而内置定制操作系统可能正是实现这一目标的最佳途径。</span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 04:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265858/amazon-vega-linux-based-os</guid>
            <link>https://www.oschina.net/news/265858/amazon-vega-linux-based-os</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GNOME 获 100 万欧元投资]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">GNOME 基金会<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffoundation.gnome.org%2F2023%2F11%2F09%2Fgnome-recognized-as-public-interest-infrastructure%2F" target="_blank">宣布</a></u>收到了来自「<span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund</span>」的 100 万欧元投资，并表示这笔资金将用于实现平台现代化、改进工具和可访问性，并支持符合公共利益的功能。</p><p style="margin-left:0px; margin-right:0px; text-align:start"><img src="https://static.oschina.net/uploads/space/2023/1110/122408_NeTS_2720166.png" referrerpolicy="no-referrer"></p><p>具体包括：</p><ul><li>改进当前的可访问性状态</li><li>设计新的辅助功能堆栈并制作原型</li><li>支持单独加密 user 主目录</li><li>实现现代化的秘密存储</li><li>扩大硬件支持的范围和质量</li><li>为质量保证和开发者体验投入资源</li><li>扩展和拓宽 freedesktop API</li><li>整合和改进平台组件</li></ul><p><span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund 是</span>德国政府资助的一项计划，由 Adriana Groh 和 Fiona Krakenbürg 运营，他们在国家和国际层面拥有「多年推广开源技术的经验」。目标是支持「开源数字基础设施的开发、改进和维护」，这与 GNOME 项目的协同作用是显而易见的。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/122533_HxD1_2720166.png" referrerpolicy="no-referrer"></p><p>他们在官方网站写道：「.....开源生态虽然非常成功，但也越来越脆弱。因为使用开源软件的人永远比为该软件做出贡献的人多。现在是投资数字共享、志愿者社区和开源来建设我们希望看到的数字世界的时候了。」</p><p><span style="background-color:#ffffff; color:#000000">Sovereign Tech Fund 投资过的项目</span>包括 curl、Fortran、WireGuard、OpenSSH、Yocto，以及与 OpenJS 基金会合作「改进 Javascript 生态基础设施和安全性」。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 10 Nov 2023 02:33:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265839/gnome-sovereign-tech-fund</guid>
            <link>https://www.oschina.net/news/265839/gnome-sovereign-tech-fund</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[正在被代码折磨到深夜的你，何不请 AI 帮帮你]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>就在生成式 AI 工具规模化应用仍被质疑和观望的时候，由其生成的内容、视觉、代码程序已经高速涌入大众视野。AI 技术一日千里，拥抱 AI 开发工具或将成为向未来工程师的进化的必经之路。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/204756_bv5c_2720166.gif" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p style="text-align:center"><strong>「半天时间就能梳理 20000 行代码」</strong></p><p>大星是某电商业务的后端核心研发，入行 3 年，成长很快，已经是项目 owner 独当一面。但是大星也自有烦恼，电商促销活动频繁，且因为需求方复杂，经常需要处理突发状况，还有一个「重灾区」就是频繁修复历史技术债，不断打补丁，使得系统的可维护性越来越差，重构迫在眉睫。</p><p>今年提前两个月，双十一大促进入筹备期。大星发现，如果不尽快重构系统，不仅很难继续补丁式的开发新活动，甚至稳定性也存在风险。但是重构系统又与新的开发工作存在矛盾，人力有限，极容易顾此失彼。这时，大星想到了近期在试用的百度 Comate 研发插件，在理解老代码、生成注释方面都有不错的表现，于是大星和小伙伴，迅速梳理了遗留的老代码，制定了新优惠逻辑的实现融合方案，快速融合了新旧优惠逻辑，2 名研发只用了半天时间完成了 20000 多行代码的梳理。</p><p>后来，大星多次分享了这次经历：「这不仅等于增派了研发人力，更重要的是百度 Comate 理解更准确，注释生成更规范。这次成功救场，启发我作为工程师，更应该超前使用新工具，这样才能跑得更快。」</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/204929_EoB7_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>「不被语言所困，我就是研发 E 人！」</strong></p><p>去年毕业的小韩，作为优秀校招生入职大厂，工作一年有余，由于好学爱折腾，已经接了不少项目。最近，小韩接手了一个新项目，该项目的实现语言是 Go，但是小韩不太擅长，另外，由于对项目的已有代码不熟悉，让他接手项目和快速修改其中的内容有了不少阻碍。</p><p>他想到平时使用的百度 Comate，利用其代码解释和使用其它语言实现的能力，快速理解了项目已有的代码，高质量实现了快速接手任务，得到了团队内其他成员的一致好评。</p><p>「我属于程序员 E 人，平时喜欢多交流，百度 Comate 就是小伙伴推荐的，我发现，面对短板，找到方法其实就能快速弯道超车，这对研发新人很重要。」小韩直言不讳。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205015_NLab_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><p style="text-align:center"><strong>「用好工具，重组生产要素，提升研发生产力」</strong></p><p>作为研发团队管理者，大刚最近痛失两名 QA，新的 QA 迟迟招不到，团队的 bug 数直线上升，质量危机迫在眉睫，将近年底，眼看质量指标达成就要灰飞烟灭。多年的经验告诉大刚要沉下心来，仔细分析找到解法，在角色、人力、环节、工时、质量几个维度上设计出最优解。</p><p>通过分析，大刚逐步梳理出了解法：既然人力缺失，是否尽可能利用自动化能力来减少人工的投入，如在每次回归测试中释放 QA 的人力。再推导一步：如果对现有代码批量生成单元测试，对于缓解 QA 人力紧缺也将有非常大的帮助。</p><p>最后，大刚决定使用百度 Comate 插件来解决这些问题。大刚和团队研发成员一起，针对遗留代码和新增的代码，使用百度 Comate 的单测生成能力，快速的生成了满足业务要求的单元测试代码，通过自动化的方式实现回归验证，保证代码在变更后的运行结果符合预期情况，将测试环节左移，更早发现问题，减少后续环节的人力投入。</p><p>大刚团队的案例，是通过百度 Comate 生成了主要流程的单元测试用例，虽然在研发过程中看上去对单个功能的开发时间加长了，但是方案保证了核心流程的正确性，提高验证效率，最大化的缓解了人员紧缺的情况。</p><p>后来大刚在覆盘中，这样总结：「研发是一个系统性工程，不仅有人人协同，还有人机协同，用好工具提升人机协同能力，重组生产要素，用技术的力量提升研发生产力。」</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205101_OWD9_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1109/205125_R8fr_2720166.png" referrerpolicy="no-referrer"></p><p style="text-align:center">&nbsp;</p><h3 style="text-align:center"><strong>⭐ 百度 Comate SaaS 有哪些优势？</strong></h3><p style="color:#000000; text-align:left"><span>依托文心大模型和飞桨，百度 Comate 具备多项卓越能力。例如，在和用户交互的过程中，需要准确理解用户的意图，以及根据用户的意图做出合理的解答。借助文心大模型对自然语言、代码的理解和</span><span style="color:#1c1d1f">生成</span><span>的能力，百度 Comate 在人与模型交互、代码内容的理解、知识点输出方面，都达到了领先水准，能够回答更加准确、服务更多类型的研发需求。再比如，在代码续写的场景中，需要模型能够跟得上用户的思路，即代码还没写完，就给用户正确的提示，这就需要更快的响应速度，基于飞桨的推理框架，可以让模型在推理时响应速度更快，用户体验更好。</span></p><p style="color:#000000; text-align:left"><span>在具体性能表现上，百度 Comate SaaS 支持单行推荐、多行推荐、多条推荐、代码知识的问答、代码生成、注释生成、注释文档生成、代码解释、生成行间注释、函数拆分、优化和重构等一系列编码相关的能力，在编程现场实现帮你想、帮你写、帮你改代码的效果。</span></p><p style="color:#000000; text-align:left"><span>此外，经过测试，百度 Comate 在易用性、速度、安全性、使用体验上具有明显优势。功能完备，开箱即用，后续支持私域数据索引，推理结果更精准。在使用体验上，支持全中文交互，交互速度更快，体验更好；领先的安全机制保证代码数据的安全，同时成本和部署方式上也更灵活、更具高性价比。</span></p><h3 style="text-align:center"><strong>🌈 限时福利！</strong></h3><p><span style="color:#2980b9"><strong>福利一：限时免费试用</strong></span>（活动时间：即日起- 11 月 20 日）</p><ul><li><p>扫描或长按下图二维码，即装即用，<span style="color:#c0392b"><strong>限时领取免费试用 1 个月！</strong></span></p></li><li><p>邀请其他人注册，<span style="color:#c0392b"><strong>每分享 1 人注册成功，即可获得+1 个月免费试用期，总计最高获得 6 个月免费试用</strong>。</span></p></li></ul><p><span style="color:#2980b9"><strong>福利二：限时特价</strong></span>（活动时间：即日起- 11 月 20 日）</p><p style="text-align:center"><img height="557" src="https://static.oschina.net/uploads/space/2023/1110/144509_QoI6_2720166.png" width="1268" referrerpolicy="no-referrer"></p><p style="text-align:center">福利直达链接：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.baidu.com%2Fcampaign%2Fcomate%2Findex.html" target="_blank">https://cloud.baidu.com/campaign/comate/index.html</a></u></p><p style="text-align:center">&nbsp;</p><h4 style="text-align:center"><span style="color:#c0392b"><strong>以上福利扫码立即获得！</strong></span></h4><p>下载下面图片➡️转发小伙伴，成功推荐其他新用户，即可延长免费试用时间，最高得 6 个月免费试用～</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1110/144648_TUoU_2720166.jpg" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 12:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265796</guid>
            <link>https://www.oschina.net/news/265796</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[微软计划为 Windows 10 提供 AI 助手 Copilot]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.windowscentral.com%2Fsoftware-apps%2Fwindows-10%2Fexclusive-microsoft-plans-to-bring-its-ai-copilot-to-1-billion-windows-10-users" target="_blank">根据 Windows Central 的报道</a></u>，微软计划将 Copilot 引入 Windows 10。该公司做出这一决定的主要原因是希望为 Copilot 增加更多用户。</p><p>Windows 11 最近发布的重大更新 v23H2 包含了 AI 助手 Copilot，它直接添加到了桌面的工具栏上。但 Windows 11 的用户数目前还远不及上一代的 Windows 10，而微软致力于让每个用户都能使用 Copilot，它正计划向有 10 亿用户的 Windows 10 提供 Copilot。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7b7b3e6ab4e1286eb6e8ecd2789040a2a53.png" referrerpolicy="no-referrer"></p><p>Windows 10 的 Copilot 和 Windows 11 基本一致，Copilot 按钮放置在工具栏上，点击该按钮会显示一个可用于对话的侧边栏。</p><p>报道还指出，Windows 10 和 Windows 11 的 Copilot 体验将是相同的，包括插件的兼容性。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 09:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265760</guid>
            <link>https://www.oschina.net/news/265760</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[reverse_sql —— MySQL 数据闪回恢复工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:start">reverse_sql 是一个用于解析和转换 MySQL 二进制日志（binlog）的工具。它可以将二进制日志文件中记录的数据库更改操作（如插入、更新、删除）转换为反向的 SQL 语句，以便进行数据恢复。其运行模式需二进制日志设置为 ROW 格式。</p><p style="color:#1f2328; text-align:start">该工具的主要功能和特点包括：</p><p style="color:#1f2328; text-align:start">1、解析二进制日志：reverse_sql 能够解析 MySQL 的二进制日志文件，并还原出其中的 SQL 语句。</p><p style="color:#1f2328; text-align:start">2、生成可读的 SQL：生成原始 SQL 和反向 SQL。</p><p style="color:#1f2328; text-align:start">3、支持过滤和筛选：可以根据时间范围、表、DML 操作等条件来过滤出具体的误操作 SQL 语句。</p><p style="color:#1f2328; text-align:start">4、支持多线程并发解析 binlog 事件。</p><h3 style="text-align:start"><a href="https://github.com/hcymysql/reverse_sql#%E4%BD%BF%E7%94%A8">使用</a></h3><div style="text-align:start"><pre><code>shell&gt; chmod 755 reverse_sql
shell&gt; ./reverse_sql --help
usage: reverse_sql [-h] [-ot ONLY_TABLES [ONLY_TABLES ...]] [-op ONLY_OPERATION] -H MYSQL_HOST
                   -P MYSQL_PORT -u MYSQL_USER -p MYSQL_PASSWD -d MYSQL_DATABASE
                   [-c MYSQL_CHARSET] --binlog-file BINLOG_FILE [--binlog-pos BINLOG_POS]
                   --start-time ST --end-time ET [--max-workers MAX_WORKERS] [--print]

Binlog 数据恢复，生成反向 SQL 语句。

options:
  -h, --help            show this help message and exit
  -ot ONLY_TABLES [ONLY_TABLES ...], --only-tables ONLY_TABLES [ONLY_TABLES ...]
                        设置要恢复的表，多张表用,逗号分隔
  -op ONLY_OPERATION, --only-operation ONLY_OPERATION
                        设置误操作时的命令（insert/update/delete）
  -H MYSQL_HOST, --mysql-host MYSQL_HOST
                        MySQL 主机名
  -P MYSQL_PORT, --mysql-port MYSQL_PORT
                        MySQL 端口号
  -u MYSQL_USER, --mysql-user MYSQL_USER
                        MySQL 用户名
  -p MYSQL_PASSWD, --mysql-passwd MYSQL_PASSWD
                        MySQL 密码
  -d MYSQL_DATABASE, --mysql-database MYSQL_DATABASE
                        MySQL 数据库名
  -c MYSQL_CHARSET, --mysql-charset MYSQL_CHARSET
                        MySQL 字符集，默认 utf8
  --binlog-file BINLOG_FILE
                        Binlog 文件
  --binlog-pos BINLOG_POS
                        Binlog 位置，默认 4
  --start-time ST       起始时间
  --end-time ET         结束时间
  --max-workers MAX_WORKERS
                        线程数，默认 4（并发越高，锁的开销就越大，适当调整并发数）
  --print               将解析后的 SQL 输出到终端
  --replace             将 update 转换为 replace 操作

Example usage:
    shell&gt; ./reverse_sql -ot table1 -op delete -H 192.168.198.239 -P 3336 -u admin -p hechunyang -d hcy \
            --binlog-file mysql-bin.000124 --start-time "2023-07-06 10:00:00" --end-time "2023-07-06 22:00:00" 
</code></pre><div>&nbsp;</div></div><p><a href="https://github.com/hcymysql/reverse_sql#%E5%BD%93%E5%87%BA%E7%8E%B0%E8%AF%AF%E6%93%8D%E4%BD%9C%E6%97%B6%E5%8F%AA%E9%9C%80%E6%8C%87%E5%AE%9A%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%9A%84%E6%97%B6%E9%97%B4%E6%AE%B5%E5%85%B6%E5%AF%B9%E5%BA%94%E7%9A%84binlog%E6%96%87%E4%BB%B6%E9%80%9A%E5%B8%B8%E4%BD%A0%E5%8F%AF%E4%BB%A5%E9%80%9A%E8%BF%87show-master-status%E5%BE%97%E5%88%B0%E5%BD%93%E5%89%8D%E7%9A%84binlog%E6%96%87%E4%BB%B6%E5%90%8D%E4%BB%A5%E5%8F%8A%E5%88%9A%E6%89%8D%E8%AF%AF%E6%93%8D%E4%BD%9C%E7%9A%84%E8%A1%A8%E5%92%8C%E5%85%B7%E4%BD%93%E7%9A%84dml%E5%91%BD%E4%BB%A4%E6%AF%94%E5%A6%82update%E6%88%96%E8%80%85delete">当出现误操作时，只需指定误操作的时间段，其对应的 binlog 文件（通常你可以通过 show master status 得到当前的 binlog 文件名）以及刚才误操作的表，和具体的 DML 命令，比如 update 或者 delete。</a></p><p style="color:#1f2328; text-align:start">工具运行时，首先会进行 MySQL 的环境检测（if binlog_format != 'ROW' and binlog_row_image != 'FULL'），如果不同时满足这两个条件，程序直接退出。</p><p style="color:#1f2328; text-align:start">工具运行后，会在当前目录下生成一个{db}_{table}_recover.sql 文件，保存着原生 SQL（原生 SQL 会加注释） 和，反向 SQL，如果想将结果输出到前台终端，可以指定--print 选项。</p><p style="color:#1f2328; text-align:start">如果你想把 update 操作转换为 replace，指定--replace 选项即可，同时会在当前目录下生成一个{db}_{table}_recover_replace.sql 文件。</p><p style="color:#1f2328; text-align:start"><a href="https://user-images.githubusercontent.com/19261879/251670057-b06528a6-fbff-4e00-8adf-0cba19737d66.png" target="_blank"><img alt="图片" src="https://static.oschina.net/uploads/img/202311/08114920_eBdc.png" referrerpolicy="no-referrer"></a></p><p style="color:#1f2328; text-align:start">MySQL 最小化用户权限：</p><div style="text-align:start"><pre><code>&gt; GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO `yourname`@`%`;

&gt; GRANT SELECT ON `test`.* TO `yourname`@`%`;
</code></pre></div><h3 style="text-align:start"><br><a href="https://github.com/hcymysql/reverse_sql#%E6%81%A2%E5%A4%8D">恢复</a></h3><p style="color:#1f2328; text-align:start">在{db}_{table}_recover.sql 文件中找到你刚才误操作的 DML 语句，然后在 MySQL 数据库中执行逆向工程后的 SQL 以恢复数据。</p><p style="color:#1f2328; text-align:start">如果{db}_{table}_recover.sql 文件的内容过多，也可以通过 awk 命令进行分割，以便更容易进行排查。</p><div style="text-align:start"><pre><code>shell&gt; awk '/^-- SQL 执行时间/{filename = "output" ++count ".sql"; print &gt; filename; next} {print &gt; filename}' test_t1_recover.sql
</code></pre><div>&nbsp;</div></div><p style="color:#1f2328; text-align:start">不支持 drop 和 truncate 操作，因为这两个操作属于物理性删除，需要通过历史备份进行恢复。</p><h4 style="text-align:start"><a href="https://github.com/hcymysql/reverse_sql#%E6%B3%A8reverse_sql-%E6%94%AF%E6%8C%81mysql-5780-%E5%92%8C-mariadb%E9%80%82%E7%94%A8%E4%BA%8Ecentos-7%E7%B3%BB%E7%BB%9F">注：reverse_sql 支持 MySQL 5.7/8.0 和 MariaDB，适用于 CentOS 7 系统。</a></h4><hr><h3 style="text-align:start"><a href="https://github.com/hcymysql/reverse_sql#docker%E9%83%A8%E7%BD%B2%E4%BD%BF%E7%94%A8">Docker 部署使用</a></h3><p style="color:#1f2328; text-align:start">shell&gt; wget<span>&nbsp;</span><a href="https://github.com/hcymysql/reverse_sql/archive/refs/heads/reverse_sql_progress.zip">https://github.com/hcymysql/reverse_sql/archive/refs/heads/reverse_sql_progress.zip</a></p><p style="color:#1f2328; text-align:start">shell&gt; unzip reverse_sql_progress.zip</p><p style="color:#1f2328; text-align:start">shell&gt; cd reverse_sql_progress</p><p style="color:#1f2328; text-align:start">shell&gt; vim Dockerfile</p><div style="text-align:start"><pre><code>FROM centos:7

COPY reverse_sql /root/
RUN chmod 755 /root/reverse_sql
</code></pre></div><p style="color:#1f2328; text-align:start">shell&gt; docker build -t reverse_sql .</p><p style="color:#1f2328; text-align:start">shell&gt; docker run -itd --name reverse_sql reverse_sql /bin/bash</p><p style="color:#1f2328; text-align:start">shell&gt; docker exec -it reverse_sql /root/reverse_sql --help</p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 09:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/reverse-sql</guid>
            <link>https://www.oschina.net/p/reverse-sql</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | Android 发热监控实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h1>一、背景</h1><p>相信移动端高度普及的现在，大家或多或少都会存在电量焦虑，拥有过手机发热发烫的糟糕体验。而发热问题是一个长时间、多场景的指标存在，且涉及到端侧应用层、手机 ROM 厂商系统、外界环境等多方面的影响。如何有效衡量发热场景、定位发热现场、以及归因发热问题成为了端侧应用层发热监控的面前的三座大山。本文通过得物 Android 端侧现有的一些监控实践，不深入功耗计算场景无法自拔，优先聚焦于发热场景本身，希望能给大家一些参考。</p><h1>二、发热定义</h1><p>温度是最直观能反映发热问题的指标，当前 Android 侧，我们以体感温度 37° 以上作为分界线，向上每 3° 作为一个发热温度区间，区间细分上限温度 49° ，即划分出 37-40，40-43，43-46，46-49，49+ 五个等级。</p><p>以手机温度、CPU 使用率作为第一、第二要素来判断用户是否发热的同时，获取其他参数来支撑发热现场情况。</p><p><strong>具体指标如下:</strong></p><p>手机温度 CPU 使用率、GPU 使用率；</p><p>线程堆栈；</p><p>系统服务使用频次；</p><p>设备前后台、亮灭屏时长；</p><p>电量、充电情况；</p><p>热缓解发热等级；</p><p>系统机型、版本；</p><p>....</p><h1>三、指标获取</h1><h2>温度</h2><ul><li><strong>电池温度</strong></li></ul><p>系统 BatteryManger 已经提供了一系列自带的接口和粘性广播获取电池信息。</p><p>BatteryManager.EXTRA_TEMPERATURE 广播，获取的温度值是摄氏度为单位的 10 倍数值。</p><pre><code>//获取电池温度 BatteryManager.EXTRA_TEMPERATURE，华氏温度需要除以 10
fun getBatteryTempImmediately(context: Context): Float {
    return try {
        val batIntent = getBatteryStickyIntent(context) ?: return 0f
        batIntent.getIntExtra(BatteryManager.EXTRA_TEMPERATURE, 0) / 10F
    } catch (e: Exception) {
        0f
    }
}

private fun getBatteryStickyIntent(context: Context): Intent? {
    return try {
        context.registerReceiver(null, IntentFilter(Intent.ACTION_BATTERY_CHANGED))
    } catch (e: Exception) {
        null
    }
}
</code></pre><p>BatteryManager 除支持电池温度的系统广播外，也包含电量、充电状态等额外信息的读取，均定义在其源码中。</p><pre><code>以下罗列几个值得关注的:
//BATTERY_PROPERTY_CHARGE_COUNTER 剩余电池容量，单位为微安时
//BATTERY_PROPERTY_CURRENT_NOW 瞬时电池电流，单位为微安
//BATTERY_PROPERTY_CURRENT_AVERAGE 平均电池电流，单位为微安
//BATTERY_PROPERTY_CAPACITY 剩余电池容量，显示为整数百分比
//BATTERY_PROPERTY_ENERGY_COUNTER 剩余能量，单位为纳瓦时
// EXTRA_BATTERY_LOW  是否认为电量低
// EXTRA_HEALTH  电量健康常量的常数
// EXTRA_LEVEL  电量值
// EXTRA_VOLTAGE 电压
// ACTION_CHARGING   进入充电状态
// ACTION_DISCHARGING  进入放电状态
</code></pre><ul><li><strong>传感器温度</strong></li></ul><p>Android 是基于 Linux 基础上修改的开源操作系统，同样的在手机系统 sys/class/thermal/ 目录下存在以 thermal_zoneX 为代表各传感器的温度分区，以及 cooling_deviceX 为代表风扇或散热器等冷却设备。</p><p>以一加 9 为例，共存在 105 个温度传感器 or 温度分区，以及 48 个冷却设备。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b5cf3938151953ff43b21f0a681ce4c9b65.jpg" alt="" referrerpolicy="no-referrer"></p><p>每个温度分区下记录下具体的参数类型，我们重点关注的是 type 文件和&nbsp;temp 文件，分别记录了该传感器设备的名称，以及当前的传感器温度。以 thermal_zone29 为例，代表了 CPU 第一核心的，第五处理单元的温度值为 33.2 摄氏度。而对单一设备来说分区对应的名称是固定的，从而我们可以通过读取 thermal_zone 文件的方式来记录当前第一个 type 文件名称包含&nbsp;CPU&nbsp;的传感器作为&nbsp;CPU&nbsp;温度。</p><p><img src="https://oscimg.oschina.net/oscnet/up-f2279774ca9ce74031e6897a9db4a7ea9dc.jpg" alt="" referrerpolicy="no-referrer"></p><ul><li><strong>壳温</strong></li></ul><p>Android 10 Google 官方推出了热缓解框架，通过 HAL2.0 框架监听底层硬件传感器（主要为 USB 传感器、Skin 传感器）提供 USB、壳温的热信号等级变更监听， 系统 PowerManager 源码提供了对应发热等级变更的回调和发热等级的获取，共 7 个等级，提供给开发者主动或被动获取。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1110179d6d33bc1f87ed57c99e6797dc931.jpg" alt="" referrerpolicy="no-referrer"></p><pre><code>final PowerManager powerManager = (PowerManager) mContext.getSystemService(Context.POWER_SERVICE);
powerManager.addThermalStatusListener(new PowerManager.OnThermalStatusChangedListener() {
    @Override
    public void onThermalStatusChanged(int status) {
       //返回对应的热状态
    }
});
</code></pre><p>但对于发热等级来说，壳温无疑是最为能够反应手机的发热情况的。可以看到 Android 系统的 API 实际上是提供了 AIDL 接口，可以直接注册 Thermal 变更事件的监听，获取到 Temperature 对象。但由于标识了 Hide API 。常规应用层是无法获取到的，在考虑好 Android 版本兼容性前提下，通过反射代理 ThermalManagerService 方式进行读取。</p><p><img src="https://oscimg.oschina.net/oscnet/up-50f7b8b0252859eb185129ba23e59b367cb.jpg" alt="" referrerpolicy="no-referrer"></p><p>但事与愿违，国内厂商并没有完全适配官方热缓解框架，热状态回调时常不够准确，而是需要单独接入每个厂商的热缓解 SDK 去直接获取到壳温，具体 API 则以各应用厂商的内部接入文档为准。</p><h2>CPU 使用率</h2><p>CPU 使用率的采集通过读取解析 Proc stat 文件的方式进行计算。</p><p>在系统 proc/[pid]/stat&nbsp; 和&nbsp; /proc/[pid]/task/[tid]/stat &nbsp;分别记录了对应进程 ID、进程 ID 下的线程 ID 的 CPU 信息。具体的字段描述在此不进行赘述，详见：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fman7.org%2Flinux%2Fman-pages%2Fman5%2Fprocfs.5.html" target="_blank">https://man7.org/linux/man-pages/man5/procfs.5.html</a> 。</p><p><img src="https://oscimg.oschina.net/oscnet/up-49d2512961ec5d6361ee15326af3c2c5885.jpg" alt="" referrerpolicy="no-referrer"></p><p>我们重点关注 14.15 位的信息，分别代表进程/线程的用户态运行的时间和内核态运行的时间。 <img src="https://oscimg.oschina.net/oscnet/up-30cbd118f0cbd9df3ddf67043cc22b050ea.jpg" alt="" referrerpolicy="no-referrer"></p><p>通过解析当前进程的 Stat 文件，以及 Task 目录下所有线程的 Stat 文件，在两次采样周期内 (当前设置为 1s) 的 utime+stime 之和的差值/采样间隔，即可认为是进线程的 CPU 的使用率。即，进线程 CPU 使用率 = ((utime+stime)-(lastutime+laststime)) / period</p><h2>GPU 使用率</h2><p>高通芯片的设备，我们可以参考&nbsp;/sys/class/kgsl/kgsl-3d0/gpubusy&nbsp;下文件内容，参考高通官网的说明。</p><p>GPU 的使用率 = (下图) 数值 1 / 数值 2 * 100，经过验证与 SnapDragonProfiler 信息采集获取的数值基本一致。 <img src="https://oscimg.oschina.net/oscnet/up-0be7cfc4a8df3b97c0a5600c5512c4e415e.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-9496bbec4a96755eb7d59997c3ac6fd12bc.jpg" alt="" referrerpolicy="no-referrer"></p><p>联发科芯片的设备，我们可以直接通过读取&nbsp;<strong>/d/ged/hal/gpu_utilization</strong> 下的使用率数值。</p><p>同样的通过指定周期 (每秒 1 次) 的采样间隔，即可获取到每秒的当前 GPU 使用率。</p><h2>系统服务使用</h2><p>Android 系统服务包括 Warelock、Alarm、Sensor、Wifi、Net、Location、Bluetooth、Camera 等。</p><p>与市面上常规的监控手段差异不大，都是通过系统 Hook ServiceManager 的方式，监听系统服务的 Binder 通信，匹配对应的调用方法名，做对应中间层监控的回调记录处理。</p><p>熟悉 Android 开发的同学知道 Android 的 Zygote 进程是 Android 系统启动时的第一个进程。在 Zygote Fork 进程中会孵化出系统服务相关的进程 SystemServer，在其核心的 RUN 方法中，会注册启动大量的系统服务，并通过 ServiceManager 进行管理。 <img src="https://oscimg.oschina.net/oscnet/up-f43504f6a7801c8edffd8a299338158a10c.jpg" alt="" referrerpolicy="no-referrer"></p><p>故我们可以通过反射代理 ServiceManager 的方式，以 LocationManager 为例进行监听，拦截对应 LocationManager 内对应的方法，记录我们期望获取的数据。</p><pre><code>// 获取 ServiceManager 的 Class 对象
Class&lt;?&gt; serviceManagerClass = Class.forName("android.os.ServiceManager");
// 获取 getService 方法
Method getServiceMethod = serviceManagerClass.getDeclaredMethod("getService", String.class);
// 通过反射调用 getService 方法获取原始的 IBinder 对象
IBinder originalBinder = (IBinder) getServiceMethod.invoke(null, "location");
// 创建一个代理对象 Proxy
Class&lt;?&gt; iLocationManagerStubClass = Class.forName("android.location.ILocationManager$Stub");
Method asInterfaceMethod = iLocationManagerStubClass.getDeclaredMethod("asInterface", IBinder.class);
final Object originalLocationManager = asInterfaceMethod.invoke(null, originalBinder);
Object proxyLocationManager = Proxy.newProxyInstance(context.getClassLoader(),
        new Class[]{Class.forName("android.location.ILocationManager")},
        new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                // 在这里进行方法的拦截和处理
                Log.d("LocationManagerProxy", "Intercepted method: " + method.getName());
                // 执行原始的方法
                return method.invoke(originalLocationManager, args);
            }
        });
// 替换原始的 IBinder 对象
getServiceMethod.invoke(null, "location", proxyLocationManager);
</code></pre><p>同理，我们获取在固定采样周期内，各系统服务对应，申请次数、计算间隔时长等进行记录。</p><p>源码&nbsp;Power_profile&nbsp;文件中定义了每个系统服务状态下的电流量定义。</p><p>我们在需要记录每个元器件在不同状态的工作时间之后，通过以下计算方式，可以得出元器件的发热贡献排行，即：</p><p>元器件，电量消耗（发热贡献） &nbsp;~~ &nbsp;电流量 * 运行时长 * 电压（一般为固定值，可忽略）</p><p><img src="https://oscimg.oschina.net/oscnet/up-95b4814576aef6a67210588b65b259c9abf.jpg" alt="" referrerpolicy="no-referrer"></p><h2>线程堆栈</h2><p>由于发热问题是一个综合性的问题，并不像 Crash 问题一样，在发生现场我们就可以知道是哪个线程触发的。如果将所有线程的堆栈都进行 Dump 记录的话，得物当前运行时的子线程数量在 200+，全部进行存储的话无疑是不合理的。问题就转变为，如何较为准确的找到发热代码的线程堆栈？</p><p>上文说到，在计算 CPU 使用率的时读取进程下所有线程的 Stat 文件，我们可以获取到子线程的 CPU 使用率，对其使用率进行倒排，筛选超过阈值（当前定义 50% ) 或，占用 Top N 的线程进行存储。由于堆栈频繁采集时机上是有性能折损的，故牺牲了部分的堆栈采样精度和准确性，在温度、CPU 使用率等指标超过阈值定义后，才开始采集，指定下发时间的堆栈信息。</p><p>我们还要明确一个概念，线程 Stat 文件的文件名即为线程标识名，Thread.id 是指线程 ID。</p><p>其两者并不等价，但 Native 方法中给我们提供了对应的方式去建立两者的映射关系。</p><p>在 Art &nbsp;Thread.cc 方法中，将 Java 中的 Thread 对象转换成 C++ 中的 Thread 对象，调用 ShortDump 打印线程的相关信息，我们通过字符串匹配到核心的 Tid= 的信息，即可获取到线程的 Tid。 <img src="https://oscimg.oschina.net/oscnet/up-6e69839410035c1793072333c26c962790c.jpg" alt="" referrerpolicy="no-referrer"></p><p>核心代码逻辑如下:</p><pre><code>//获取队列中最近一次 cpu 采样的数据
 val threadCpuUsageData = cpuProfileStoreQueue.last().threadUsageDataList
       val hotStacks = mutableListOf&lt;HotStack&gt;()
        if (threadCpuUsageData != null) {
            val dataCount = if (threadCpuUsageData.size &lt;= TOP_THREAD_COUNT) {
                threadCpuUsageData.size
            } else {
                TOP_THREAD_COUNT
            }
            val traces: MutableMap&lt;Thread, Array&lt;StackTraceElement&gt;&gt; = Thread.getAllStackTraces()
            //定义 tid 和 thread 的映射关系 map
            val tidMap: MutableMap&lt;String, Thread&gt; = mutableMapOf()
            traces.keys.forEach { thread -&gt;
                //调用 native 方法获取到 tid 信息
                val tidInfo = hotMonitorListener?.findTidInfoByThread(thread)
                tidInfo?.let {
                    findTidByTidInfo(tidInfo).let { tid -&gt;
                        if (tid.isNotEmpty()) {
                            tidMap[tid] = thread
                        }
                    }
                }
            }
            //采集 topN 的发热堆栈
            for (index in 1..dataCount) {
                val singleThreadData = threadCpuUsageData[index - 1]
                val isMainThread = singleThreadData.pid == singleThreadData.tid
                val thread = tidMap[singleThreadData.tid.toString()]
                thread?.let { findThread -&gt;
                    traces[findThread]?.let { findStackTrace -&gt;
                        //获取当前的线程堆栈
                        val sb = StringBuilder()
                        for (element in findStackTrace) {
                            sb.append(element.toString()).append("\n")
                        }
                        sb.append("\n")
                        if (findStackTrace.isNotEmpty()) {
                            //是否为主线程
                            //组装 hotStack
                            val hotStack = HotStack(
                                //进程 id
                                singleThreadData.pid,
                                singleThreadData.tid,
                                singleThreadData.name,
                                singleThreadData.cpuUseRate,
                                sb.toString(),
                                thread.state
                                isMainThread
                            )
//                        Log.d("HotMonitor", sb.toString())
                            hotStacks.add(hotStack)
                        }
                    }
                }

            }
        }
</code></pre><h1>四、监控方案</h1><p>了解核心指标数据是如何获取的前提下，其实监控方案的核心思路无非就是通过远端 APM 配置中心下发的采样阈值、采样周期、各模块数据开关等限定采样配置，子线程 Handler 定时发消息，采集各个模块的数据进行组装，在合适的时机进行数据上报即可，具体的数据拆解、分析工作则由发热平台进一步处理。</p><p><strong>模块整体架构</strong><img src="https://oscimg.oschina.net/oscnet/up-b5030680856c30aab1b0a1b2d301fbbeea8.jpg" alt="" referrerpolicy="no-referrer"></p><p><strong>上报时机</strong><img src="https://oscimg.oschina.net/oscnet/up-0cbaca499275d7a3292d7a5990c26ced860.jpg" alt="" referrerpolicy="no-referrer"></p><p><strong>核心采集流程</strong><img src="https://oscimg.oschina.net/oscnet/up-81a16007734e761fbece449580c494a4ccb.jpg" alt="" referrerpolicy="no-referrer"></p><p><strong>线上线下区分</strong></p><p>由于所有子线程的 CPU 采集、堆栈采集实际上是会对性能有折损的，200+ 的线程的读取耗时整体在 200ms 左右，采样子线程的 CPU 使用率在 10%，考虑到线上用户体验问题，并不能全量开启高频率采样。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b83fd9a6c760d788fb151f04d854e8c40eb.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-2e9a9a66b142535b29d5dc9793467e73fdf.jpg" alt="" referrerpolicy="no-referrer"></p><p>故整体方案来说: 线下场景以重点侧重发现、排查、治理全量问题，上报全量日志，以 CPU、GPU 使用率为第一衡量指标；</p><p>线上场景以重点侧重观察整体发热大盘趋势、分析潜在问题场景，上报核心日志，以电池温度为第一衡量指标。</p><p><strong>发热平台</strong></p><p>在平台侧同学的支持下，发热现场数据经过平台侧进行消费，将核心的发热堆栈经过 Android 堆栈反混淆服务进行聚合，补齐充电状态、主线程 CPU 使用率、问题类型、电池温度等基础字段，平台侧就具备发现、分析、解决的流程化监控推进的能力。</p><p>具体的堆栈信息 &amp; 发热信息平台展示如下:</p><p><img src="https://oscimg.oschina.net/oscnet/up-3251d963a881ef9e7f09fcc6d73d9b2925d.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-04b122e8d11a65f06b2ed4f71062b718945.jpg" alt="" referrerpolicy="no-referrer"></p><p>由于电池温度、CPU 使用率是针对运行时发热场景最直观的指标，且我们一期重点关注发热场景的治理，不针对元器件 Hook 等耗电场景进行持续深入分析，故当前得物侧是以电池温度、CPU 使用率为第一第二指标 &nbsp;建立核心的发热问题四象限，优先关注高温、高 CPU 的问题场景。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5a65d936a2e2676307b5562a55eb4fca2e7.jpg" alt="" referrerpolicy="no-referrer"></p><p>在数据分析过程中，我们遇到了数据上的效率排查效率不够高、问题精度不够准的情况。</p><ul><li>如何定位是高温场景是发生在 App 内部，且在使用过程中明显上升的？ 通过过滤从启动开始即高温、后台切换回来即高温的场景，重点关注在 App 内部温度上升的场景。</li><li>线上的采样后仍旧单日有 6w+ 数据的上报，我们如何筛选出更为核心的数据？当前的做法是定义了温度跨度的概念，优先看在 App 内部温度跨度较大的 Case。</li><li>线程存在调用 Wait 等方法阻塞的堆栈，消耗内核态的时间分配，但实际不消耗整体 CPU 的误报数据。 补充了线程的运行状态和 Proc 文件中记录的 State，方便优先处理 RUNNABLE 线程的 CPU 高温高占用问题。</li><li>手机温度上升作为渐进式的场景，如何实现温度上升场景下的页面精确归因？增加温度采样频率的同时，汇总 CPU 使用率和实时堆栈等瞬时数据作为数据支撑，但考虑到数据体量的情况，数据上报聚合裁剪方式仍在逐步探索更为合理的方式，力求在两者之间找到一个平衡点。</li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-838ac3d056faa216013c5cf2b87b08cbf57.jpg" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-abcc4634539696d10682e28632c278d9415.jpg" alt="" referrerpolicy="no-referrer"></p><h1>五、收益</h1><p>Android 端侧发热监控自上线以来，背靠平台侧的支撑，陆续发现了一些问题并联合开发同学做了对应场景的治理优化工作，如：</p><p>耗时独立线程任务，接入统一线程池调度管理；</p><p>动画执行死循环监测修复；</p><p>高 IO 场景的文件读写策略优化；</p><p>高并发任务锁粒度优化；</p><p>日志库等 Json 解析频繁场景，采用效率更高的序列化方；</p><p>系统相机等系统功率过高的采集参数设备分级尝试；</p><p>基于 Webgl 的游戏场景，帧率降低和资源及时回收优化运行时内存；</p><p>....</p><p>这无疑给未来体验工作的场景技术选型、技术实现沉淀了一些有价值的经验，符合对 App 体验追求极致的高标准、高要求。</p><h1>六、未来展望</h1><p>手机发热作为渐进式的体验场景，涉及手机硬件、系统服务、软件使用、外界环境多方位因素。对于端侧的排查上来说，当前优先级聚焦于应用层的不合理使用上，对于排查工具链路增强、问题业务归因、低电量、低功耗模式下的动态策略降低、自动化诊断报告等环节仍旧有很多值得深入挖掘的点，例如：</p><p><strong>监控/工具增强</strong></p><ul><li>App 浮层分析工具 (CPU\GPU/频率/温度/功耗等信息)</li><li>借鉴 BatteryHistorian、SnapdragonProfiler、Systrace 等工具，实现自研 TeslaLab 能力增强。</li></ul><p><strong>业务归因</strong></p><ul><li>发热堆栈自动分配</li><li>调用溯源归因精细化</li></ul><p><strong>场景策略、降级</strong></p><ul><li>CPU 调频、动态帧率、分辨率降级</li><li>端内低功耗模式探索</li></ul><p><strong>自动化诊断报告</strong></p><ul><li>单用户定向自动化分析输出诊断报告</li></ul><p>‍</p><h1>七、总结</h1><p>在此也只是粗略介绍当前已经做的针对发热治理的一些初步工作，以及对未来发热功耗相关开展的思路，希望能让 App 带来更好的体验，给用户带来更对美好事物的向往的感受。</p><p>*文 / GavinX</p><p>本文属得物技术原创，更多精彩文章请看：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftech.dewu.com%2F" target="_blank">得物技术官网</a></p><p>未经得物技术许可严禁转载，否则依法追究法律责任！</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 09:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5783135/blog/10141675</guid>
            <link>https://my.oschina.net/u/5783135/blog/10141675</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[英伟达或将推出针对中国区的最新改良版 AI 芯片]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.chinastarmarket.cn%2Fdetail%2F1512299" target="_blank">据<span style="background-color:#ffffff">《科创板日报》</span>报道</a></u>，产业链人士称英伟达现已开发出针对中国区的最新改良版 AI 芯片：HGX H20、L20 PCle 和 L2 PCle。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-edecf0f4b0f979b064fa454bfd31a0ec4e3.png" referrerpolicy="no-referrer"></p><p>知情人士称，最新三款芯片是由 H100 改良而来，英伟达最快或将于本月 16 号之后公布，国内厂商最快将在这几天拿到产品。</p><p>NVIDIA H100 Tensor Core GPU&nbsp;采用全新 Hopper 架构，基于台积电 N4 工艺，集成了 800 亿个晶体管。与上一代产品相比，可为多专家 (MoE) 模型提供高 9 倍的训练速度。</p><p>它配备第四代 Tensor Core 和 Transformer 引擎（FP8 精度），还具有高度可扩展的 NVLink 互连技术（最多可连接达 256 个 H100 GPU，相较于上一代采用 HDR&nbsp;Quantum&nbsp;InfiniBand 网络，带宽高出 9 倍，带宽速度为 900GB/s）等功能。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-acc6975ca53f0be377caf78b3f05ea055f8.png" referrerpolicy="no-referrer"></p><p>记者向英伟达求证该消息的真实性，但截至发稿，英伟达方面暂无回应。</p><hr><p>2023 年 10 月 17 日，CNBC 报道称，美国商务部计划在未来几周内限制向中国出售更先进的人工智能芯片。高级政府官员表示，<strong>新政策将限制 NVIDIA A800 和 H800 芯片的出口</strong>。详情：<em><u><a href="https://www.oschina.net/news/262251/us-bans-export-of-more-ai-chips-including-nvidia-h800-to-china">美国政府限制向中国出口 NVIDIA H800 GPU</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 07:25:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265728</guid>
            <link>https://www.oschina.net/news/265728</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[美团招兵买马，拟开发鸿蒙系统 App]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">美团招聘官网近日更新了多个鸿蒙相关的社招开发岗位，为鸿蒙原生应用开发招兵买马。主要开发美团鸿蒙 App、大众点评鸿蒙 App。</span></p><p><span style="color:#000000">其中的一个「鸿蒙高级工程师（C++）」职位就是面向美团鸿蒙 App 研发团队。根据介绍，具体的岗位职责为：</span></p><ol><li><span style="color:#000000">参与鸿蒙端动态化容器的架构设计，确保项目研发质量和代码的可维护性；</span></li><li><span style="color:#000000">负责鸿蒙端动态化容器的模块设计与实现，实现高性能、高质量的容器模块；</span></li><li><span style="color:#000000">对项目中的技术难点和重点进行深入研究和总结，积累可复用的经验。</span></li><li><span style="color:#000000">能够主动解决和推动项目前鸿蒙端动态化容器技术领域的阻塞点和难点；</span></li><li><span style="color:#000000">结合美团的业务需求，探索行业前沿技术，规划容器技术路线。</span></li></ol><p><span style="color:#000000">且满足「熟悉 ArkTS 和鸿蒙上的主流开发框架（例如 ArkUI）；作为主要贡献者参与过有影响力的开源产品的开发；了解 Web 开发，熟悉浏览器内核的运行机制；了解动态化容器原理，熟悉 Hybrid、React Native、Flutter 等前沿技术之一；乐于分享和沟通，活跃于 GitHub 和各大技术社区，或有自己的高质量原创博客」等条件的将优先考虑。</span></p><p><span style="color:#000000"><img alt="" height="267" src="https://oscimg.oschina.net/oscnet/up-ae63f8c42eec2e0095d1026cb5f531df31b.png" width="500" referrerpolicy="no-referrer"></span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 07:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265725</guid>
            <link>https://www.oschina.net/news/265725</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[vivo 公布蓝心大模型 BlueLM-7B 开源地址]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>vivo 已在&nbsp;Hugging Face 上正式开源蓝心大模型 BlueLM-7B。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7b7b72160940bf13dc85103adc480ff135f.png" referrerpolicy="no-referrer"></p><p>地址：<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fhuggingface.co%2Fvivo-ai" target="_blank">https://huggingface.co/vivo-ai</a></u></p><p>BlueLM-7B 开源大模型包括&nbsp;<strong>7B 基础模型和 7B 对话模型</strong>，vivo 还开源了支持&nbsp;32K&nbsp;的长文本基础模型和对话模型。</p><p>据介绍，BlueLM 采用高质量语料库进行训练，<strong>规模达到了&nbsp;2.6 万亿&nbsp;的 token 数，该语料库包含中文、英文以及少量日韩数据</strong>。其中 BlueLM-7B-Chat 在&nbsp;C-Eval&nbsp;和&nbsp;CMMLU&nbsp;上均取得领先结果。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-032d6f2119d13af32e2019c475fa5b87681.png" referrerpolicy="no-referrer"></p><p>BlueLM-7B-Base-32K 和 BlueLM-7B-Chat-32K 均支持&nbsp;32K&nbsp;长文本，在保持基础能力相当情况下，能够支持更长上下文理解。</p><p>延伸阅读</p><ul><li><a href="https://www.oschina.net/news/264455" target="_blank">vivo 开源蓝心大模型-7B：70 亿参数、适合中国开发者</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 06:37:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265715</guid>
            <link>https://www.oschina.net/news/265715</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GitHub 发布开源编程字体家族 Monaspace]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>GitHub 推出了名为「Monaspace」的开源等宽编程字体家族。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/120711_f6hb_2720166.png" referrerpolicy="no-referrer"></p><p>地址：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmonaspace.githubnext.com%2F" target="_blank">https://monaspace.githubnext.com/</a></u></em></p><blockquote>
 「字体家族」（typeface / font family）和 「单款字体」（font）是不同的概念，虽然通常习惯将两者都称作 「字体」，但一个字体家族通常包含多个单款字体，字型之间以字重（粗细）、风格（正斜体）等设置区分开来。
 <br><br> 简而言之，「字体家族」 是一整套的设计，其中包含若干款 「字体」，即单独的字体文件。
</blockquote><p>根据介绍，「GitHub Monaspace」作为字体家族，整体可分为<strong>「静态」和「可变」</strong>两种类型。</p><ul><li><code>Monaspace _____</code>代表<strong>静态</strong></li><li><code>Monaspace _____ Var</code>或<code>VF</code>代表<strong>可变</strong></li></ul><p>其中「可变」字体的每个系列都包含一个文件（Neon、Argon 等）。GitHub Monaspace 总共包含 5 种字体，由于它们的属性相互兼容，因此可以混搭使用。</p><p>官方介绍道，等宽字体通常彼此不兼容。因为每个字体都使用不同的字型度量，所以无法对不同的字体进行混用。不过 GitHub Monaspace 的每款字体都经过精心设计，支持无缝混搭使用和匹配。通过超越颜色和更大胆的权重的调色板，为代码赋予更多含义，为需要更多结构和层次结构的代码构建接口。</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121225_m9Kc_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121823_4wpr_2720166.png" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1110/123709_02AU_2720166.png" referrerpolicy="no-referrer"></p><p>下面是单独使用 Xe 字体的效果：</p><p><img height="1228" src="https://static.oschina.net/uploads/space/2023/1110/121353_QrHp_2720166.png" width="1716" referrerpolicy="no-referrer"></p><p>开发者可基于上述 5 种字体任意搭配组合使用，如下：</p><p><img src="https://static.oschina.net/uploads/space/2023/1110/121517_ONNu_2720166.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 04:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265861</guid>
            <link>https://www.oschina.net/news/265861</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[文心一言用户规模已达 7000 万]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">在前沿数字技术创新与安全论坛和人工智能赋能产业发展论坛上，百度 CTO 王海峰</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FbH6zON1itJDh9bwCAeLfWw" target="_blank"><span style="color:#2980b9">披露</span></a><span style="color:#000000">，文心一言自 8 月 31 日面向全社会开放至今，用户规模现已达到 7000 万，场景 4300 个，应用 2492 个。</span></p><p><span style="color:#000000"><img alt="" height="281" src="https://static.oschina.net/uploads/space/2023/1110/115002_eScQ_4252687.jpg" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">王海峰表示，人工智能是新一轮科技革命和产业变革的重要驱动力量，深度学习作为人工智能的核心技术，具有很强的通用性，并具备标准化、自动化和模块化的工业大生产特征，而大模型的兴起，使得人工智能应用的深度和广度进一步拓展。人工智能已进入工业大生产阶段。</span></p><p><span style="color:#000000">例如，标准化方面，框架和模型联合优化，多硬件统一适配，应用模式简洁高效，大幅降低人工智能应用门槛；自动化方面，从训练、适配，到推理部署，提升人工智能研发全流程效率；模块化方面，丰富的产业级模型库，支撑人工智能在广泛场景的便捷应用。</span></p><p><span style="color:#000000">王海峰认为，人工智能具有多种典型能力，理解、生成、逻辑、记忆是其中的基础能力，这四项能力越强，越接近通用人工智能，而大语言模型具备了这四项能力，且越来越强，为通用人工智能带来了曙光。</span></p><p><span style="color:#000000">面对大模型产业化的挑战，王海峰表示，类似芯片代工厂模式，可以采用「集约化生产，平台化应用」的模式，即具有算法、算力和数据综合优势的企业将模型生产的复杂过程封装起来，通过低门槛、高效率的生产平台，为千行百业提供大模型服务。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 09 Nov 2023 02:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/265847</guid>
            <link>https://www.oschina.net/news/265847</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
