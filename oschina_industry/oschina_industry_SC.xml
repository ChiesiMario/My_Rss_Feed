<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="http://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sat, 02 Mar 2024 06:09:44 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Canonical 为 Launchpad 进行主页改版]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Launchpad 主页进行了更新，这是该网站自 2016 年以来的首次重大改版。</span></p><blockquote><p><span style="color:#000000">「如果你进入 </span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Flaunchpad.net" target="_blank">launchpad.net</a><span style="color:#000000">，你会发现它与过去 10 年的样子大不相同--它已经更新过了！我们的目标是在保持 Launchpad 外观的同时使其现代化。内容保持不变，只增加了一些文字，但在样式上做了很多改动。」</span></p></blockquote><p><span style="color:#000000">公告<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.launchpad.net%2Fgeneral%2Flaunchpads-new-homepage" target="_blank">指出</a>，最重要的一项变化在于 Launchpad 主页现在采用了 Vanilla 组件，以使得网站布局看起来更现代，同时也更有利于好奇的新用户通过移动设备访问页面，且「页面的可访问性得分从 75 分提高到了几乎完美的 98 分。」</span></p><p><span style="color:#000000">从首页更新开始，Launchpad 接下来还计划对其他部分进行重新设计，从而实现更现代、用户体验更直观的目标。</span></p><p><span style="color:#000000">以下分别是 Launchpad 在 2006 年、3 月 1 号更新之前以及更新后的样子：</span></p><p><span style="color:#000000"><img alt="" height="139" src="https://oscimg.oschina.net/oscnet/up-6f9b009ba1df2e4799c692dc387e3327ccf.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="background-color:#ffffff; color:#333333">2006 年</span></em></p><p><span style="background-color:#ffffff; color:#333333"><img alt="" height="321" src="https://oscimg.oschina.net/oscnet/up-9123de2dcc490b270b0788183de8e38c17e.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="background-color:#ffffff; color:#333333">更新前</span></em></p><p><span style="background-color:#ffffff; color:#333333"><img alt="" height="335" src="https://oscimg.oschina.net/oscnet/up-c6a9b949630d6a8ecae579f5ef8c19ef0d0.png" width="500" referrerpolicy="no-referrer"></span></p><p><em><span style="background-color:#ffffff; color:#333333">更新后</span></em></p><p><span style="color:#000000">Launchpad 于 2004 年推出，是 Ubuntu 母公司 Canonical 公司所资助架设的网站，是一个提供维护、支持或连络 Ubuntu 开发者的平台。开发人员通过它进行协作、提交代码、计划发布、提交错误、添加翻译，并处理与开发新版本相关的其他任务。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Mar 2024 04:05:12 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281141/launchpads-new-homepage</guid>
            <link>https://www.oschina.net/news/281141/launchpads-new-homepage</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CNCF 宣布 Falco 毕业]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>CNCF <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fannouncements%2F2024%2F02%2F29%2Fcloud-native-computing-foundation-announces-falco-graduation%2F" target="_blank">宣布</a> Falco 毕业，它是一款专为 Linux 系统设计的云原生安全工具，也是事实上的 Kubernetes 威胁检测引擎。</p><p><img height="218" src="https://static.oschina.net/uploads/space/2024/0302/111141_0zZB_4252687.png" width="500" referrerpolicy="no-referrer"></p><p>Falco 是由 Sysdig 在 2016 年创建并开源的，并于 2018 年成为第一个被 CNCF Sandbox 接受的运行时安全项目，随后在 2020 年 4 月进入孵化器。自那时以来，Falco 已经吸纳了来自亚马逊、苹果、IBM、红帽等公司的维护者。该项目的活跃贡献者数量自孵化以来增加了 400%，目前有数百名活跃的代码贡献者。</p><p>该项目有超过 30 个公开自述的采用者，包括 Cisco、Shopify、Skyscanner 和 Vinted 等组织。自孵化以来，总下载量增长了 526%，平均每月下载量增长了 135%。</p><p>「在大规模云原生部署中，实时可见性对于安全至关重要。」CNCF 首席技术官 Chris Aniszczyk 表示：「Falco 正在通过 eBPF 推动开源云原生运行时安全领域的进步，我们期待在项目继续发展的过程中看到这个领域的进展。」</p><p>Falco 通过对内核事件应用自定义规则，提供实时警报，帮助用户获得对异常行为、潜在安全威胁和合规性违规行为的可见性，为全面的运行时安全做出贡献。在过去几年中，维护者们致力于改进工程流程和重构 Falco 代码库，包括改进测试套件和新的内核测试框架，增加质量检查，以及新功能，如新的 eBPF 探针和与新的第一方数据源的集成。</p><p>「Falco 的开发和贡献到 CNCF 的结论是，运行时安全必须在云原生基础设施中广泛可访问和无缝集成——在云中需要预防，但威胁检测同样重要。」Falco 创始人、SysdigCTO 和创始人 Loris Degioanni 表示：「Falco 得到的支持证明了一个事实，即你无法阻止一切，安全团队需要深度防御，即使在云中也是如此。我对 Falco 社区的支持感激不尽，并且很高兴在 CNCF 内达到了这个里程碑，但 Falco 社区从未将毕业视为终点，而是通过其插件系统扩展 Falco 用例的开始。」</p><p>公告指出，为了正式从孵化阶段毕业，Falco 项目经历了与 CNCF 技术监督委员会（Technical Oversight Committee，TOC）的尽职调查过程，完成了第三方安全审计，并支持 CNCF 项目在 eBPF 代码旁边包含 GPL 许可的 Linux 内核模块的过程。毕业证实了 Falco 的成长、成熟和未来前景，并巩固了该项目在运行时安全领域的领导地位。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Mar 2024 03:11:36 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281135/cncf-falco-graduation</guid>
            <link>https://www.oschina.net/news/281135/cncf-falco-graduation</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[httpsok —— SSL 证书自动续期工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div style="text-align:start"><span>​</span><strong>一行命令，轻松搞定 SSL 证书自动续期。</strong><span><code>httpsok</code></span><span> 是一个便捷的 HTTPS 证书自动续期工具，专为 Nginx 服务器设计。已服务众多中小企业，稳定、安全、可靠。</span></div><h2 style="margin-left:0; margin-right:0; text-align:start"><span>文档</span></h2><ul style="margin-left:.8em; margin-right:.8em"><li><p style="margin-left:.5rem; margin-right:0"><span>帮助文档：</span><span><a href="https://fposter.cn/doc/"><span>https://fposter.cn/doc/</span></a></span></p></li></ul><h2 style="margin-left:0; margin-right:0; text-align:start"><span>特性</span></h2><ul style="margin-left:.8em; margin-right:.8em"><li><p style="margin-left:.5rem; margin-right:0"><span>使用简单，一行命令，一分钟轻松解决 SSL 证书自动续期。</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>无需修改任何 nginx 配置。</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>对于复杂配置的生产环境，无缝支持。</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>多域名、多服务器节点支持。</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>证书监控功能，对于即将失效的证书，提供公众号推送提醒。</span></p></li><li><p style="margin-left:.5rem; margin-right:0"><span>支持主流 Linux 系统</span></p></li></ul><h1 style="text-align:start"><span>快速开始</span></h1><h2 style="margin-left:0; margin-right:0; text-align:start"><span>安装 httpsok</span></h2><pre style="margin-left:.8rem; margin-right:.8rem; text-align:left"><span><span style="color:#3300aa">curl</span><span style="color:#0000cc">-s</span> https://fposter.cn/httpsok.sh | <span style="color:#3300aa">bash</span><span style="color:#0000cc">-s</span><span style="color:#22a2c9">'your token'</span></span></pre><blockquote><p style="margin-left:0; margin-right:0"><span>登陆控制枱 👉 👉 </span><span><a href="https://fposter.cn/console/"><span>获取 token</span></a></span></p></blockquote><h2 style="margin-left:0; margin-right:0; text-align:start"><span>安装成功</span></h2><p style="color:#34495e; margin-left:.8em; margin-right:.8em; text-align:start"><span>安装成功后，会自动检测一次系统中的</span><span><code>nginx</code></span><span>证书。</span></p><pre style="margin-left:.8rem; margin-right:.8rem; text-align:left"><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:56 os-name: TencentOS Server <span style="color:#116644">2</span>.4</span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:56 version: nginx/1.20.1</span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:56 nginx-config-home: /etc/nginx</span><span><span>​</span></span><span>Httpsok <span style="color:#3300aa">make</span> SSL easy. &nbsp; &nbsp; https://fposter.cn/ </span><span>version: <span style="color:#116644">1</span>.7.1</span><span>home: /root/.httpsok</span><span><span>​</span></span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:57 DNS check pass</span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:57 cdb8e6b945154127 /etc/nginx/certs/api.fastposter.net_nginx/api.fastposter.net_bundle.crt Cert valid</span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:58 e29c94e6c2504f37 /etc/nginx/certs/cloud.fastposter.net_nginx/cloud.fastposter.net_bundle.crt Cert valid</span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:58 32614897bc364812 /etc/nginx/certs/fastposter.net_nginx/fastposter2.net_bundle.crt Cert valid</span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:58 7b9be1c745cb41f8 /etc/nginx/certs/fposter.cn_nginx/fposter.cn_bundle.crt Cert valid</span><span><span>​</span></span><span><span style="color:#116644">2024</span><span style="color:#0000cc">-01-21</span><span style="color:#116644">00</span>:22:58 Nginx reload needless.</span></pre></div>
                                                                ]]>
            </description>
            <pubDate>Sat, 02 Mar 2024 02:51:36 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/httpsok</guid>
            <link>https://www.oschina.net/p/httpsok</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 为项目生成 SBOM 清单的 CLI 工具 SBOM-TOOL]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-sbom-tool" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#sbom-tool"></a>SBOM-TOOL</h1><p><a href="https://gitee.com/JD-opensource/sbom-tool/blob/master/README.md">English</a> | 简体中文</p><p>SBOM-TOOL 是通过源码仓库、代码指纹、构建环境、制品信息、制品内容、依赖组建等多种维度信息，为软件项目生成软件物料清单（SBOM）的一款 CLI 工具。</p><h2><a id="user-content-功能特性" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E5%8A%9F%E8%83%BD%E7%89%B9%E6%80%A7"></a>功能特性</h2><h3><a id="user-content-信息采集" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E4%BF%A1%E6%81%AF%E9%87%87%E9%9B%86"></a>信息采集</h3><ul><li>采集源代码工程信息，包括仓库地址、版本信息等</li><li>采集并生成代码指纹，利用一定算法生成代码指纹</li><li>采集工程构建依赖环境信息，包括操作系统、内核、编译器、构建工具等</li><li>采集工程构建的依赖组件，支持多种语言、多种包管理器的依赖采集</li><li>采集最终制品包信息，包括包名、类型、唯一校验码等</li><li>采集制品内容信息，包括文件名类型、唯一校验码等</li></ul><h3><a id="user-content-sbom 文档" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#sbom%E6%96%87%E6%A1%A3"></a>SBOM 文档</h3><ul><li>组装 SBOM 文档，基于上述采集的信息组装标准 SBOM 文档</li><li>规范格式转换，支持 XSPDX、SPDX 等规范，支持 JSON 等格式</li><li>规范格式校验，支持 XSPDX、SPDX 等规范，支持 JSON 等格式</li></ul><h2><a id="user-content-代码指纹生成能力" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E4%BB%A3%E7%A0%81%E6%8C%87%E7%BA%B9%E7%94%9F%E6%88%90%E8%83%BD%E5%8A%9B"></a>代码指纹生成能力</h2><table><thead><tr><th>开发语言</th><th>是否支持</th></tr></thead><tbody><tr><td><code>C/C++</code></td><td>是</td></tr><tr><td><code>Java</code></td><td>是</td></tr><tr><td><code>C#</code></td><td>是</td></tr><tr><td><code>Dart</code></td><td>是</td></tr><tr><td><code>Golang</code></td><td>是</td></tr><tr><td><code>Javascript</code></td><td>是</td></tr><tr><td><code>Objective-C</code></td><td>是</td></tr><tr><td><code>Php</code></td><td>是</td></tr><tr><td><code>Python</code></td><td>是</td></tr><tr><td><code>Ruby</code></td><td>是</td></tr><tr><td><code>Rust</code></td><td>是</td></tr><tr><td><code>Swift</code></td><td>是</td></tr><tr><td><code>Lua</code></td><td>是</td></tr></tbody></table><h2><a id="user-content-依赖包扫描能力" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E4%BE%9D%E8%B5%96%E5%8C%85%E6%89%AB%E6%8F%8F%E8%83%BD%E5%8A%9B"></a>依赖包扫描能力</h2><p>现已支持以下编程语言相关的配置文件解析、二进制包解析，后续会逐步支持更多的编程语言。</p><table><thead><tr><th>包类型</th><th>包管理器</th><th>解析文件</th><th>是否支持依赖图谱</th></tr></thead><tbody><tr><td><code>maven</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fmaven.apache.org">Maven</a></td><td><ul><li><code>pom.xml</code></li><li><code>*.jar</code></li><li><code>*.war</code></li><li><code>[graph]maven-dependency-tree.txt(mvn dependency:tree -DoutputFile=maven-dependency-tree.txt)</code></li></ul></td><td>是</td></tr><tr><td><code>maven</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgradle.org">Gradle</a></td><td><ul><li><code>*.gradle</code></li><li><code>.gradle.lockfile</code></li><li><code>[graph]gradle-dependency-tree.txt(gradlew gradle-baseline-java:dependencies &gt; gradle-dependency-tree.txt)</code></li></ul></td><td>是</td></tr><tr><td><code>conan</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fconan.io">Conan</a></td><td><ul><li><code>conanfile.txt</code></li><li><code>conan.lock</code></li><li><code>[graph]conan-graph-info.json(conan graph info -f json &gt; conan-graph-info.json)</code></li></ul></td><td>是</td></tr><tr><td><code>npm</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.npmjs.com">NPM</a></td><td><ul><li><code>package.json</code></li><li><code>package-lock.json</code></li></ul></td><td>否</td></tr><tr><td><code>npm</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fyarnpkg.com">Yarn</a></td><td><ul><li><code>[graph]yarn.lock</code></li></ul></td><td>是</td></tr><tr><td><code>npm</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fpnpm.io%2F">PNPM</a></td><td><ul><li><code>[graph]pnpm.lock</code></li></ul></td><td>是</td></tr><tr><td><code>golang</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgo.dev%2Fref%2Fmod">Go Module</a></td><td><ul><li><code>go.mod</code></li><li><code>Go Binary file</code></li><li><code>[graph]go-mod-graph.txt(go mod graph &gt; go-mod-graph.txt)</code></li></ul></td><td>是</td></tr><tr><td><code>golang</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FMasterminds%2Fglide">Glide</a></td><td><ul><li><code>glide.yml</code></li><li><code>glide.yaml</code></li></ul></td><td>否</td></tr><tr><td><code>golang</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Ftools%2Fgodep">GoDep</a></td><td><ul><li><code>Godeps.json</code></li></ul></td><td>否</td></tr><tr><td><code>golang</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fgolang%2Fdep">Dep</a></td><td><ul><li><code>Gopkg.toml</code></li></ul></td><td>否</td></tr><tr><td><code>golang</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FFiloSottile%2Fgvt">GVT</a></td><td><ul><li><code>*/vendor/manifest</code></li></ul></td><td>否</td></tr><tr><td><code>pypi</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fpip.pypa.io">PIP</a></td><td><ul><li><code>Pipfile.lock</code></li><li><code>*dist-info/METADATA</code></li><li><code>PKG-INFO</code></li><li><code>*requirements*.txt</code></li><li><code>setup.py</code></li><li><code>[graph]pipenv-graph.txt(pipenv graph &gt; pipenv-graph.txt)</code></li></ul></td><td>是</td></tr><tr><td><code>pypi</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fpython-poetry.org">Poetry</a></td><td><ul><li><code>[graph]poetry.lock</code></li></ul></td><td>是</td></tr><tr><td><code>conda</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fconda.io">Conda</a></td><td><ul><li><code>environment.yml</code></li><li><code>environment.yaml</code></li><li><code>package-list.txt</code></li></ul></td><td>否</td></tr><tr><td><code>composer</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgetcomposer.org">Composer</a></td><td><ul><li><code>composer.json</code></li><li><code>composer.lock</code></li></ul></td><td>否</td></tr><tr><td><code>cargo</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fdoc.rust-lang.org%2Fcargo">Cargo</a></td><td><ul><li><code>Cargo.toml</code></li><li><code>[graph]Cargo.lock</code></li><li><code>Rust Binary file</code></li></ul></td><td>是</td></tr><tr><td><code>carthage</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FCarthage%2FCarthage">Carthage</a></td><td><ul><li><code>Cartfile</code></li><li><code>Cartfile.resolved</code></li></ul></td><td>否</td></tr><tr><td><code>swift</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.swift.org%2Fpackage-manager">SwiftPM</a></td><td><ul><li><code>Package.swift</code></li></ul></td><td>否</td></tr><tr><td><code>cocoapods</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fcocoapods.org">Cocoapods</a></td><td><ul><li><code>Podfile.lock</code></li><li><code>Podfile</code></li><li><code>*.podspec</code></li></ul></td><td>是</td></tr><tr><td><code>gem</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Frubygems.org">Gem</a></td><td><ul><li><code>[graph]Gemfile.lock</code></li><li><code>Gemfile</code></li><li><code>*.gemspec</code></li></ul></td><td>是</td></tr><tr><td><code>nuget</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.nuget.org">NuGet</a></td><td><ul><li><code>[graph]*.deps.json</code></li><li><code>*.csproj</code></li><li><code>*.vbproj</code></li><li><code>*.fsproj</code></li><li><code>*.vcproj</code></li><li><code>*.nuget.dgspec.json</code></li><li><code>*.nuspec</code></li><li><code>packages.json</code></li><li><code>packages.lock.json</code></li></ul></td><td>是</td></tr><tr><td><code>pub</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fpub.dev">Pub</a></td><td><ul><li><code>[graph]pub-deps.json(dart pub deps --json &gt; pub-deps.json)</code></li><li><code>pubspec.lock</code></li><li><code>pubspec.yaml</code></li></ul></td><td>是</td></tr><tr><td><code>rpm</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Frpm-packaging-guide.github.io">RPM</a></td><td><ul><li><code>*.spec</code></li></ul></td><td>否</td></tr><tr><td><code>deb</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fdeb.debian.org%2Fdebian">DEB</a></td><td><ul><li><code>*.deb</code></li><li><code>*.control</code></li></ul></td><td>否</td></tr><tr><td><code>lua</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fluarocks.org">LuaRocks</a></td><td><ul><li><code>*.rockspec</code></li></ul></td><td>否</td></tr><tr><td><code>bower</code></td><td><a href="https://gitee.com/link?target=https%3A%2F%2Fbower.io">Bower</a></td><td><ul><li><code>*.spec</code></li></ul></td><td>否</td></tr></tbody></table><h2><a id="user-content-软件架构" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84"></a>软件架构</h2><p><img src="https://gitee.com/JD-opensource/sbom-tool/raw/master/docs/img/arch.png" alt="SBOM-TOOL 整体架构" referrerpolicy="no-referrer"></p><h2><a id="user-content-下载安装" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85"></a>下载安装</h2><ol><li>下载源码编译 (需要 <code>go 1.18</code> 及以上版本)
<div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone git@gitee.com:JD-opensource/sbom-tool.git</span><span id="LC2" class="line"><span class="nb">cd </span>sbom-tool</span><span id="LC3" class="line">make</span></pre><div class="markdown-code-block-copy-btn"></div></div></div>
默认生成多个系统架构的程序二进制包
<ul><li>Linux X86_64：sbom-tool-linux-amd64</li><li>Linux arm64：sbom-tool-linux-arm64</li><li>Windows X86_64：sbom-tool-windows-amd64.exe</li><li>Windows arm64：sbom-tool-windows-arm64.exe</li><li>MacOS amd64:  sbom-tool-darwin-amd64</li><li>MacOS arm64: sbom-tool-darwin-arm64</li></ul></li></ol><p>或者通过 go install 安装</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">   go <span class="nb">install </span>gitee.com/JD-opensource/sbom-tool/cmd/sbom-tool@latest</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>或者通过下载二进制文件安装:   <a href="https://gitee.com/JD-opensource/sbom-tool/releases">SBOM-TOOL 发行版</a></p><h2><a id="user-content-子命令说明" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E5%AD%90%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E"></a>子命令说明</h2><table><thead><tr><th>子命令</th><th>功能</th></tr></thead><tbody><tr><td><code>help</code></td><td>工具帮助手册</td></tr><tr><td><code>artifact</code></td><td>采集软件包制品信息</td></tr><tr><td><code>assembly</code></td><td>把各阶段生成的文档组装为 SBOM 文档</td></tr><tr><td><code>completion</code></td><td>为指定的 shell 生成自动完成脚本</td></tr><tr><td><code>convert</code></td><td>转换 SBOM 文档格式</td></tr><tr><td><code>env</code></td><td>生成环境信息</td></tr><tr><td><code>generate</code></td><td>生成 SBOM 文档</td></tr><tr><td><code>package</code></td><td>收集包依赖项</td></tr><tr><td><code>source</code></td><td>收集源代码信息</td></tr><tr><td><code>validate</code></td><td>验证 SBOM 文档格式</td></tr><tr><td><code>info</code></td><td>获取工具介绍信息</td></tr><tr><td><code>modify</code></td><td>修改 SBOM 文档属性</td></tr></tbody></table><h2><a id="user-content-参数说明" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E5%8F%82%E6%95%B0%E8%AF%B4%E6%98%8E"></a>参数说明</h2><table><thead><tr><th>参数</th><th>短参数</th><th>描述</th><th>使用样例</th></tr></thead><tbody><tr><td><code>--log-level </code></td><td></td><td>指定日志级别，包括 <code>debug</code>、<code>info</code>、<code>warn</code>、<code>error</code></td><td><code>--log-level info</code></td></tr><tr><td><code>--log-path </code></td><td></td><td>指定日志路径，默认在用户主目录下自动生成日志目录及日志文件 ($home/sbom-tool/sbom-tool.log)</td><td><code>--log-path /tmp/sbom.log</code></td></tr><tr><td><code>--quiet  </code></td><td><code>-q</code></td><td>无控制枱输出</td><td><code>--quiet</code><code>-q</code></td></tr><tr><td><code>--ignore-dirs</code></td><td></td><td>要忽略的目录，跳过所有点目录，以逗号分隔。示例：NODE_MODULES，LOGS</td><td><code>--ignore-dirs log,logs</code></td></tr><tr><td><code>--language</code></td><td><code>-l</code></td><td>指定语言 (目前支持：<code>java</code>，<code>cpp</code>)(默认为「*」)</td><td><code>--language java</code><code>-l cpp</code></td></tr><tr><td><code>--parallelism</code></td><td><code>-m</code></td><td>并发度 (默认为<code>8</code>)</td><td><code>--parallelism 4</code><code>-m 9</code></td></tr><tr><td><code>--output</code></td><td><code>-o</code></td><td>指定结果输出文件存放路径及名称，默认会在当前目录下自动生成</td><td><code>--output /tmp/sbom.json</code></td></tr><tr><td><code>--src</code></td><td><code>-s</code></td><td>指定源代码存放路径，默认为当前目录</td><td><code>--src /tmp/sbomtool/src/</code></td></tr><tr><td><code>--path</code></td><td><code>-p</code></td><td>指定项目工程主目录；assembly 子命令中用于指定各阶段临时文档路径</td><td><code>--path /tmp/sbomtool/</code></td></tr><tr><td><code>--dist </code></td><td><code>-d</code></td><td>指定制品存放路径，默认为当前目录</td><td><code>--dist /tmp/sbomtool/bin/</code></td></tr><tr><td><code>--format</code></td><td><code>-f</code></td><td>指定 SBOM 文档格式 (目前支持：<code>xspdx-json</code>、<code>spdx-json</code>、<code>spdx-tagvalue</code>)(默认为<code>spdx-json</code>)</td><td><code>--format spdx-json</code><code>-f spdx-json</code></td></tr><tr><td><code>--input</code></td><td><code>-i</code></td><td>指定 SBOM 文档作为输入</td><td><code>--input /tmp/sbom.jsom</code></td></tr><tr><td><code>--algorithm</code></td><td><code>-a</code></td><td>用于指定生成 SBOM 文档标识的算法 (目前支持:<code>SHA1</code>、<code>SHA256</code>、<code>SM3</code>)(默认为<code>SM3</code>)</td><td><code>--algorithm SHA256</code></td></tr></tbody></table><h2><a id="user-content-sbom 文档规范与格式" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#sbom%E6%96%87%E6%A1%A3%E8%A7%84%E8%8C%83%E4%B8%8E%E6%A0%BC%E5%BC%8F"></a>SBOM 文档规范与格式</h2><table><thead><tr><th align="left">规范</th><th align="left">格式</th><th align="left">SBOM 文档格式</th><th align="left">是否支持</th></tr></thead><tbody><tr><td align="left"><code>XSPDX</code></td><td align="left"><code>JSON</code></td><td align="left"><code>xspdx-json</code></td><td align="left">已支持</td></tr><tr><td align="left"><code>SPDX</code></td><td align="left"><code>JSON</code></td><td align="left"><code>spdx-json</code></td><td align="left">已支持</td></tr><tr><td align="left"><code>SPDX</code></td><td align="left"><code>TagValue</code></td><td align="left"><code>spdx-tagvalue</code></td><td align="left">已支持</td></tr></tbody></table><p><code>XSPDX 是基于 SPDX 扩展的 SBOM 格式规范</code></p><h2><a id="user-content-使用示例" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E4%BD%BF%E7%94%A8%E7%A4%BA%E4%BE%8B"></a>使用示例</h2><p>生成 SBOM 文档并指定格式</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">sbom-tool generate <span class="nt">-m</span> 4 <span class="nt">-p</span><span class="k">${</span><span class="nv">project_path</span><span class="k">}</span><span class="nt">-s</span><span class="k">${</span><span class="nv">src_path</span><span class="k">}</span><span class="nt">-d</span><span class="k">${</span><span class="nv">dist_path</span><span class="k">}</span><span class="nt">-o</span> sbom.spdx.json <span class="nt">-f</span> spdx-json <span class="nt">--ignore-dirs</span> .git  <span class="nt">-n</span><span class="k">${</span><span class="nv">name</span><span class="k">}</span><span class="nt">-v</span><span class="k">${</span><span class="nv">version</span><span class="k">}</span><span class="nt">-u</span><span class="k">${</span><span class="nv">supplier</span><span class="k">}</span><span class="nt">-b</span><span class="k">${</span><span class="nv">namespace</span><span class="k">}</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>获取工具介绍信息</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">sbom-tool info</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>更多使用案例，详见<a href="https://gitee.com/JD-opensource/sbom-tool/blob/master/docs/zh-CN/user-guide.md">文档</a></p><h2><a id="user-content-开发指南" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97"></a>开发指南</h2><p>详见 <a href="https://gitee.com/JD-opensource/sbom-tool/blob/master/docs/zh-CN/development-guide.md">开发指南文档</a></p><h2><a id="user-content-问题反馈联系我们" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E9%97%AE%E9%A2%98%E5%8F%8D%E9%A6%88%E8%81%94%E7%B3%BB%E6%88%91%E4%BB%AC"></a>问题反馈&amp;联系我们</h2><p>如果在使用中遇到问题，欢迎您向我们提交 ISSUE。</p><h2><a id="user-content-如何贡献" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E5%A6%82%E4%BD%95%E8%B4%A1%E7%8C%AE"></a>如何贡献</h2><p>SBOM-TOOL 是一款开源的软件成分分析工具，期待您的贡献。</p><h2><a id="user-content-许可证" class="anchor" href="https://gitee.com/JD-opensource/sbom-tool#%E8%AE%B8%E5%8F%AF%E8%AF%81"></a>许可证</h2><p>此项目是在 <strong>MulanPSL2</strong> 下授权的，有关详细信息，请参阅<a href="https://gitee.com/JD-opensource/sbom-tool/blob/master/LICENSE">许可证文件</a>。</p>]]>
            </description>
            <pubDate>Sat, 02 Mar 2024 02:46:36 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/JD-opensource/sbom-tool</guid>
            <link>https://gitee.com/JD-opensource/sbom-tool</link>
        </item>
        <item>
            <title>
                <![CDATA[揭秘！KubeSphere 背后的 「超级大脑」：etcd 的魅力与力量]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>作者：尹珉，KubeSphere Ambassador &amp; Contributor，KubeSphere 社区用户委员会杭州站站长。</p></blockquote><h2>1. 开篇：揭开神秘面纱，etcd 如何驱动 KubeSphere 高效运转</h2><p>在云原生时代，etcd 作为 Kubernetes 生态中不可或缺的核心组件，扮演着 KubeSphere 集群「神经系统」的角色。它利用 Raft 一致性算法提供强大的分布式键值存储能力，确保集群状态信息的实时同步和持久化。</p><p>每当在 KubeSphere 中执行资源操作时，这些指令首先通过 etcd 进行处理和分发，从而实现对整个集群状态的瞬时更新与管理。正是由于 etcd 的存在，KubeSphere 才得以在大规模容器编排中展现卓越的性能和稳定性。</p><p>接下来，我们将深入探索 etcd 如何巧妙地融入 KubeSphere 生态系统，并通过实际应用场景展示其对提升平台工作效率和可靠性的关键作用。</p><h2>2. 时光机：从诞生到崛起，etcd 如何在云原生时代崭露头角</h2><p>etcd 的旅程始于 2013 年 CoreOS 团队的一项创新尝试，随着其 V1 和 V2 版本的发展，逐渐奠定了在分布式系统数据一致性解决方案中的地位。从 etcd V1、V2 到 V3 版本的迭代过程中，性能不断提升，稳定性日益增强，功能上也不断丰富和完善。</p><p>经历数次重要升级后，etcd V3 版本尤其显著地解决了 Kubernetes 发展过程中面临的存储瓶颈问题。在性能方面，通过优化实现了更快的数据读写速度；在稳定性上，引入了更为健壮的一致性保证机制；在功能上，则扩展了 API 接口，增强了安全性与可管理性。</p><p>因此，etcd 凭借这些改进，在性能、稳定性和功能上的卓越表现成功捍衞了作为 Kubernetes 核心存储组件的地位，并在云原生时代中扮演着不可或缺的角色，持续推动整个生态系统的进步与发展。</p><h2>3. 深度剖析：etcd 核心原理与架构设计，它是如何做到数据存储的万无一失</h2><h3>3.1 基础架构图</h3><p>etcd 是典型的读多写少存储，实际业务场景中，读一般占据 2/3 以上的请求。为了让大家对 etcd 每个模块有一定的初步了解，简单介绍一下每个模块的功能作用。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ee75e231aa87a0517da0140ae92dd291498.png" alt="" referrerpolicy="no-referrer"></p><ul><li><p>Client 层：etcd 提供了 v2 和 v3 两个版本的 API 客户端库，通过负载均衡、节点故障自动转移等机制简化了业务集成过程，有效提升了开发效率与服务稳定性。</p></li><li><p>API 网络层：该层处理客户端与服务器以及服务器间的通信。v2 API 基于 HTTP/1.x 协议，而 v3 API 则使用 gRPC 协议，并通过 grpc-gateway 支持 HTTP/1.x 调用以满足多语言需求。此外，Raft 一致性算法驱动下的服务器间通信也采用 HTTP 协议来实现数据复制和 Leader 选举等功能。</p></li><li><p>Raft 算法层：这一关键层实现了诸如 Leader 选举、日志复制及 ReadIndex 等核心特性，确保了 etcd 集群中多个节点间的数据一致性和高可用性。</p></li><li><p>功能逻辑层：在此层面上，etcd 的核心模块包括 KV 存储、多版本并发控制（MVCC）、权限验证（Auth）、租约管理（Lease）以及数据压缩（Compactor）等组件，其中 MVCC 模块由 treeIndex 和 boltdb 组成，用于高效且安全地处理键值操作。</p></li><li><p>存储层：为保证数据安全性与持久化，存储层包含预写日志（WAL）和快照（Snapshot）机制，以及用于存储元数据和用户数据的 boltdb 数据库。WAL 防止 etcd 在崩溃后丢失数据，而 boltdb 则负责实际的数据存储与检索。</p></li></ul><h3>3.2 etcd 实现高可用、数据一致性的秘诀</h3><p>秘诀就是 Raft 算法，旨在简化分布式系统中的共识问题理解与实现。它将复杂的共识过程分解为三个关键环节：</p><ul><li><p>Leader 选举：确保在 Leader 节点失效时能快速重新选举出新的 Leader。</p></li><li><p>日志复制：通过仅允许 Leader 节点写入日志，并负责向 Follower 节点复制日志记录，以保证集群内部数据一致性。</p></li><li><p>安全性：在安全性方面，Raft 算法设计了严格的规则，例如一个任期内仅产生一个有效的 Leader、先前已提交的日志条目在新 Leader 上必定存在，且所有节点的状态机应用的相同位置应具有相同的日志内容。这一系列机制共同保障了分布式系统的稳定性和一致性。</p></li></ul><h3>3.3 探秘 etcd 读请求：一次闪电般的数据检索之旅</h3><p>在分布式系统背景下，看似简单的数据读取操作实则蕴含复杂机制。对于 etcd 这类追求高可用与强一致性的键值存储系统，每一次读请求均是对底层技术细节和算法智慧的深度实践。面对大规模集群环境，当客户端发送读取指令时，etcd 如何确保快速准确地响应呢？接下来，我们一起揭示 etcd 读请求背后的核心技术流程。</p><ul><li><p>客户端发起请求：应用通过 etcd 的 v2 或 v3 版本 API 客户端库发送读取键值对的请求，支持 HTTP/1.x 和 gRPC 协议。</p></li><li><p>Raft 算法交互：对于读操作，etcd 采用 ReadIndex 机制。客户端将读请求发送至当前 Leader 节点，Leader 节点先记录下这次读请求，然后在提交一个新的日志条目后，再响应客户端的读请求，确保在此期间没有新的写入导致集群状态改变。</p></li><li><p>一致性保证：Leader 节点根据 Raft 算法确保所有已提交的日志条目已被集群内所有 Follower 节点复制，并达到一致状态。</p></li><li><p>KV 存储查询：Leader 节点从内部 MVCC（多版本并发控制）模块中的 boltdb 数据库中检索对应键的最新有效版本数据。</p></li><li><p>返回结果：一旦获取到数据，Leader 节点将结果返回给客户端，完成读取操作。</p></li></ul><p>在深入探讨 etcd 的读流程时，我们触及到了其核心机制——线性读与串行读。这两种读模式分别应对不同的一致性需求场景。接下来，我们只对它们的含义做一个简单的解释：</p><ul><li><p>串行读（Serializable Read）适用于对数据实时性要求不严苛的情况，直接从节点状态机中获取数据，实现低延迟、高吞吐，但可能存在一定的数据一致性风险。</p></li><li><p>线性读（Linearizable Read）则是为了满足关键业务操作对强一致性的需求，确保任何更新后的值都能被后续请求及时准确地访问到，即使集群中有多个节点，客户端通过线性读也能如同访问单一节点般获得最新且已达成共识的数据。尽管相比串行读可能带来更高的延时和较低的吞吐，但在要求严格数据一致性的场景下，线性读是 etcd 默认且理想的读取方式。</p></li></ul><h2>4. 实战演练：构建 KubeSphere 环境下的 etcd 服务</h2><h3>4.1 什么是 KubeSphere？</h3><p>KubeSphere&nbsp;是在 Kubernetes&nbsp;之上构建的面向云原生应用的分布式操作系统，完全开源，支持多云与多集群管理，提供全栈的 IT 自动化运维能力，简化企业的 DevOps 工作流。它的架构可以非常方便地使第三方应用与云原生生态组件进行即插即用 (plug-and-play) 的集成。</p><h3>4.2 架构说明</h3><p>KubeSphere 将前端与后端分开，实现了面向云原生的设计，后端的各个功能组件可通过 REST API 对接外部系统。可参考 API 文档。下图是系统架构图。KubeSphere 无底层的基础设施依赖，可以运行在任何 Kubernetes、私有云、公有云、VM 或物理环境（BM）之上。此外，它可以部署在任何 Kubernetes 发行版上。</p><p><img src="https://oscimg.oschina.net/oscnet/up-47654e91babcf7bcd46cf2f153768394038.png" alt="" referrerpolicy="no-referrer"></p><h3>4.3 为什么选择 KubeKey</h3><p>KubeKey 由 Go 语言开发，使用便捷、轻量，支持多种主流 Linux 发行版。KubeKey 支持多种集群部署模式，例如 All-in-One、多节点、高可用以及离线集群部署。KubeKey 也支持快速构建离线安装包，加速离线交付场景下的集群交付效率。KubeKey 实现多节点并行安装，且利用 Kubeadm 对集群和节点进行初始化，极大地节省了集群部署时间，同时也遵循了 Kubernetes 社区主流集群部署方法。KubeKey 提供内置高可用模式，支持一键部署高可用 Kubernetes 集群。</p><h3>4.4 环境准备</h3><p>为了演示效果使用 all-in-one 快速部署。</p><h4>4.4.1 获取 KubeKey</h4><pre><code class="language-yaml">export KKZONE=cn
</code></pre><pre><code class="language-yaml">curl -sfL https://get-kk.kubesphere.io | VERSION=v3.0.13 sh -
</code></pre><pre><code class="language-yaml">chmod +x kk
</code></pre><h4>4.4.2 安装 Kubernetes+KubeSphere</h4><pre><code class="language-yaml">./kk create cluster --with-kubernetes v1.22.12 --with-kubesphere v3.4.1
</code></pre><p><img src="https://oscimg.oschina.net/oscnet/up-f62358927456f293fd4c00f1961169fcbc4.png" alt="" referrerpolicy="no-referrer"></p><h4>4.4.3 检查集群状态</h4><p><img src="https://oscimg.oschina.net/oscnet/up-4c4e05f3208543b4751c8f7d65c9c8e0f8d.png" alt="" referrerpolicy="no-referrer"></p><h4>4.4.4 安装 etcdctl 工具（可选）</h4><p>使用 KubeKey 部署集群会默认安装 etcdctl。</p><pre><code class="language-yaml">https://github.com/etcd-io/etcd/releases  #自行下载
</code></pre><pre><code class="language-yaml">tar -zxvf etcd-v3.5.11-linux-amd64.tar.gz
</code></pre><pre><code class="language-yaml">cp etcdctl /usr/local/bin/
</code></pre><h4>4.4.5 获取证书并查看 etcd 状态</h4><p>说明：KubeKey 安装集群时默认 etcd 使用二进制安装，证书路径默认在此处。</p><pre><code class="language-yaml">/etc/ssl/etcd/ssl
</code></pre><p><img src="https://oscimg.oschina.net/oscnet/up-e2c17f21c96bb35b76d9f7c7aa1ee901230.png" alt="" referrerpolicy="no-referrer"></p><p>通过采用 KubeKey 工具实施最小化部署案例，展示了如何运用安全证书机制来实现对 etcd 的访问以监控集 etcd 服务状态。尽管此处演示以单一实例呈现，但在实际生产环境中，etcd 服务必然是基于高可用集群模式运行，始终坚守着高可靠性的核心原则。</p><h3>4.6 etcd 部署建议</h3><h4>4.6.1 系统要求</h4><p>为保证 etcd 性能，推荐使用 SSD 硬盘，并通过工具（如 fio）进行磁盘速度评估。建议系统配置至少与默认存储配额（2GB）相等的 RAM，一般推荐 8GB 以上以避免性能下降。典型部署中，etcd 集群应在具有双核 CPU、2GB 内存和 80GB SSD 的专用服务器上运行。请根据实际工作负载对硬件配置进行调整并预先测试，确保生产环境性能达标。</p><h4>4.6.2 集群成员数量尽量为奇数</h4><p>etcd 集群达成状态更新共识需要多数节点参与，即至少（n/2）+1 个成员在具有 n 个节点的集群中。对于奇数节点数量的集群，增加一个节点虽表面上增强了系统规模，但实际上降低了容错性：相同数量节点故障时仍能保持仲裁，但更多节点故障可能导致仲裁丢失。因此，在集群无法容忍额外故障且新节点可能注册失败的情况下，贸然添加节点是危险的，因为这可能导致永久性的仲裁损失。</p><h4>4.6.3 最大集群大小不超过 7 个</h4><p>理论上，etcd 集群规模无明确上限，但实践中推荐不超过 7 个节点。参照 Google 内部广泛部署的 Chubby 锁服务经验，建议维持 5 节点配置。这样的集群能容忍两个成员故障，通常已满足需求。尽管更大集群提升容错性，但会因数据在更多节点上的复制而导致写入性能下降。</p><h2>5. etcd 集群运维那些事儿</h2><h3>5.1 监控及告警</h3><p>在构建和运维 etcd 集群时，监控是确保业务稳定性和提前识别风险的关键步骤。</p><p>etcd 提供了众多 metrics，按模块划分包括磁盘、网络、MVCC 事务、gRPC RPC 和 etcdserver 等核心指标，用于展示集群健康状况。为了有效监控这些指标，推荐使用 Prometheus 服务采集 etcd 2379 端口的 metrics 数据，并可通过静态或动态配置实现。</p><h4>5.1.1 静态配置</h4><p>静态配置需手动在 Prometheus 配置文件中的 scrape_configs 下添加新 job，内容包含被监控的 etcd 集群地址，如开启了认证还需配置证书等。</p><p>示例：</p><pre><code class="language-yaml">scrape_configs:
  - job_name: 'etcd'
    static_configs:
      - targets: ['&lt;etcd-node-1&gt;:2379', '&lt;etcd-node-2&gt;:2379', '&lt;etcd-node-3&gt;:2379']
    metrics_path: '/metrics'
    scheme: 'https'
    tls_config:
      ca_file: /path/to/prometheus-server/ca.pem  # 在 Prometheus 服务器上的 CA 证书路径
      cert_file: /path/to/prometheus-server/client.pem  # 客户端证书路径
      key_file: /path/to/prometheus-server/client-key.pem  # 客户端密钥路径
</code></pre><h4>5.1.2 动态配置</h4><p>动态配置借助 Prometheus-Operator 的 ServiceMonitor 机制，可自动发现并采集 Kubernetes 集群中的 etcd 服务 metrics。通过创建 ServiceMonitor 资源，Prometheus 可根据 Namespace 和 Labels 自动关联待监控的服务 Endpoint。</p><p>示例：</p><pre><code class="language-yaml">apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: etcd-service-monitor
  namespace: monitoring
spec:
  selector:
    matchLabels:
      app: etcd # 根据服务标签选择匹配的服务
  endpoints:
  - port: http-metrics
    scheme: https
    tlsConfig:
      caFile: /etc/prometheus/secrets/etcd-certs/ca.crt
      certFile: /etc/prometheus/secrets/etcd-certs/client.crt
      keyFile: /etc/prometheus/secrets/etcd-certs/client.key
      insecureSkipVerify: true
  namespaceSelector:
    matchNames:
    - kube-system # 指定监控哪个命名空间下的服务
</code></pre><p><img src="https://oscimg.oschina.net/oscnet/up-1c358cfdf24a005aa12e1d840d0a19bc5ab.png" alt="" referrerpolicy="no-referrer"></p><p>获取监控数据后，利用 Prometheus 与 Alertmanager 组件设置告警规则至关重要，重点关注影响集群可用性的核心 metric，例如 Leader 状态、切换次数及 WAL 和事务操作延时等。社区提供了一些参考告警规则。</p><p>最后，为了提升运维效率和问题定位能力，可以基于收集到的 metrics，在 Grafana 中创建可视化面板，展示集群 Leader 状态、key 总数、watcher 数、出流量以及 WAL 持久化延时等关键运行状态指标。</p><p><img src="https://oscimg.oschina.net/oscnet/up-87fbf7d9d8847b546cc3237ec9da4effeb6.png" alt="" referrerpolicy="no-referrer"></p><h3>5.2 数据及还原</h3><p>在完成监控与告警设置后，确保 etcd 集群在生产环境安全使用还需进行数据备份。针对数据备份，有以下几种方法：</p><h4>5.2.1 手动备份恢复</h4><p>通过指定端口、证书进行手动备份。</p><pre><code class="language-yaml">etcdCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \
  --cacert=&lt;trusted-ca-file&gt; --cert=&lt;cert-file&gt; --key=&lt;key-file&gt; \
  snapshot save &lt;backup-file-location&gt;
</code></pre><p>使用备份的数据进行恢复。</p><pre><code class="language-yaml">etcdCTL_API=3 etcdctl --endpoints=https://127.0.0.1:2379 \
  --cacert=&lt;trusted-ca-file&gt; --cert=&lt;cert-file&gt; --key=&lt;key-file&gt; \
  restore save &lt;backup-file-location&gt;
</code></pre><h4>5.2.2 定时自动备份</h4><p>建议每小时至少备份一次，可通过定时任务实现。</p><h4>5.2.3 自动化备份</h4><p>利用 etcd-backup-operator 工具，通过创建备份任务 CRD 实现自动化备份管理，例如配置备份频率、最大保留备份数量以及 S3 存储等参数。</p><p>示例：</p><pre><code class="language-yaml">apiVersion: "etcd.database.coreos.com/v1beta2"
kind: etcdBackup
metadata:
  name: example-etcd-cluster-backup
spec:
  etcdEndpoints: ["http://etcd-cluster-endpoint:2379"] # 替换为你的 etcd 集群实际端点
  storageType: S3
  backupPolicy:
    backupIntervalInSecond: 3600 # 每小时执行一次备份（这里仅为示例，可自定义间隔时间）
    maxBackups: 5 # 最多保留 5 个备份文件
  s3:
    path: "my-s3-bucket/etcd/backups" # 替换为 S3 存储桶路径
    awsSecret: qy-credentials # 替换为引用 qy 凭据 secret 的名称
</code></pre><p>最后，为了实现跨地域热备，可在 etcd 集群中添加 Learner 节点。Learner 节点作为非投票成员，不影响集群性能，其原理是跟随 Leader 节点同步日志信息。不过请注意，在 etcd 3.4 版本中，仅支持一个 Learner 节点且串行读取。</p><h2>6. 未来可期：展望 etcd 在 Kubernetes 生态系统中持续创新的可能性与挑战</h2><p>在 Kubernetes 生态系统中，etcd 作为核心组件起着不可或缺的作用。随着云原生技术的持续演进，etcd 在 Kubernetes 体系中的创新空间及潜在挑战值得关注。面对未来，etcd 同样需要应对诸多挑战，包括如何高效处理海量数据增长、如何更好地兼容异构基础设施接入，以及如何有效抵御不断演变的安全风险。但相信在广大开发者的共同努力下，etcd 将持续突破，在 Kubernetes 生态系统内推动技术创新，稳固其基石地位。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 02 Mar 2024 02:42:36 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/11044560</guid>
            <link>https://my.oschina.net/u/4197945/blog/11044560</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[向使当时真开源，小人/君子有谁知？某开源账号引发众怒]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日 Github 一标记为 Alibaba 的账户（https://github.com/HumanAIGC）被发现大量空头开源仓库：<strong>这些仓库大多有几百上千的 Star，而无实质内容</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-0ce013d83e7939e4945c1bd3ead549a1ea4.png" referrerpolicy="no-referrer"></p><p>这些项目包括：</p><ol><li>https://github.com/HumanAIGC/EMO （4.4k star）</li><li>https://github.com/HumanAIGC/AnimateAnyone （13.3k star）</li><li>https://github.com/HumanAIGC/VividTalk （644 star）</li><li>https://github.com/HumanAIGC/OutfitAnyone （4.6k star）</li><li><p>https://github.com/HumanAIGC/MaTe3D （67 star）</p></li></ol><p>它们普遍无实质性内容，仅发布有限文件：README.md、LICENCE、doc/下的一些图片、视频等。相关图片见附录 1。</p><p>另一个特征是，它们多和 AIGC 论文相关，相关论文信息见附录 2。</p><p>目前已经有大量网友提起 issue，声讨这种在开源社区打广告而不公开实质性内容的行为，主要内容包括：</p><ol><li>把开源社区当广告区是否合理？</li><li>空壳项目能拿这么多 star，是否正常？</li><li>真 EMO，假论文，骗绩效。</li><li>我不在乎是否开源，起码把 api 放出来让我玩啊。（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHumanAIGC%2FEMO%2Fissues%2F75" target="_blank">I don't mind it is open source or not, pls make the product or API so I could pay for it）</a></li><li>代码呢？</li><li>&nbsp;建议阿里把这群骗子裁掉，有损公司名誉，丢中国人的脸</li></ol><p>此外，在 pull request 方面，存在着一些不知所云的内容，例如 EMO 项目：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a856f161261f63318cefcafe6d5ba980fa3.png" referrerpolicy="no-referrer"></p><hr><p>评论</p><hr><p>附录 1：</p><pre><code>@misc{tian2024emo,
      title={EMO: Emote Portrait Alive - Generating Expressive Portrait Videos with Audio2Video Diffusion Model under Weak Conditions}, 
      author={Linrui Tian and Qi Wang and Bang Zhang and Liefeng Bo},
      year={2024},
      eprint={2402.17485},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}
</code></pre><pre><code>@article{zhou2023mate3d,
  title     = {MaTe3D: Mask-guided Text-based 3D-aware Portrait Editing},
  author    = {Kangneng Zhou, Daiheng Gao, Xuan Wang, Jie Zhang, Peng Zhang, Xusen Sun, Longhao Zhang, Shiqi Yang, Bang Zhang, Liefeng Bo, Yaxing Wang},
  journal   = {arXiv preprint arXiv:2312.06947},
  website   = {https://humanaigc.github.io/MaTe3D/},
  year      = {2023}}
</code></pre><pre><code>@article{hu2023animateanyone,
  title={Animate Anyone: Consistent and Controllable Image-to-Video Synthesis for Character Animation},
  author={Li Hu and Xin Gao and Peng Zhang and Ke Sun and Bang Zhang and Liefeng Bo},
  journal={arXiv preprint arXiv:2311.17117},
  website={https://humanaigc.github.io/animate-anyone/},
  year={2023}
}</code></pre><pre><code>@article{sun2023vividtalk,
  title     = {VividTalk: One-Shot Audio-Driven Talking Head Generation Based 3D Hybrid Prior},
  author    = {Xusen Sun, Longhao Zhang, Hao Zhu, Peng Zhang, Bang Zhang, Xinya Ji, Kangneng Zhou, Daiheng Gao, Liefeng Bo, Xun Cao},
  journal   = {arXiv preprint arXiv:2312.01841},
  website   = {https://humanaigc.github.io/vivid-talk/},
  year      = {2023},</code></pre><p>附录 2：部分项目截图</p><p><img alt="" height="1716" src="https://oscimg.oschina.net/oscnet/up-e7f92fdbff5f155a7d03276013c45a2d3b6.png" width="797" referrerpolicy="no-referrer"></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 22:17:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281116</guid>
            <link>https://www.oschina.net/news/281116</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[马斯克起诉 OpenAI 及其 CEO 奥特曼，要求公司恢复开源状态]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>当地时间周四晚间，特斯拉 CEO 埃隆·马斯克向旧金山高等法院提起诉讼，以违反合同为由起诉 OpenAI 及其 CEO 萨姆·奥特曼。</p><p>马斯克在诉讼中表示，奥特曼和 OpenAI 违背了这家人工智能研究公司成立时达成的一项协议，即开发技术以造福人类而不是追逐利润。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-c1344f68b8ada81d79b927740c5e75e2cce.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FxDaily%2Fstatus%2F1763464048908382253" target="_blank">https://twitter.com/xDaily/status/1763464048908382253</a></u></em></p></blockquote><p>马斯克声称 OpenAI 最近与科技巨头微软的关系损害了该公司最初致力于公共、开源的通用人工智能。自从公司将其开发的人工通用智能技术 (AGI) 以闭源形式交给微软后，OpenAI 已经失去了其「开放」的本质。</p><blockquote><p>GPT-4 的内部细节只有 OpenAI 知道，据悉微软也知道。因此，<strong>GPT-4 与'开放人工智能'恰恰相反</strong>。</p><p>它的封闭是出于商业考虑：微软通过向公众出售 GPT-4 获得巨额收益，但如果 OpenAI 按照要求将这项技术免费提供给公众，那么这是不可能的。</p></blockquote><p>马斯克提出的诉讼包括违反合同、违反受托责任和不公平的商业行为。<strong>他要求公司恢复到开源状态</strong>，并寻求法院颁布禁令，以阻止 OpenAI 及其高管——包括被列为共同被告的总裁格雷戈里·布罗克曼和 CEO 萨姆·奥特曼——以及微软，利用公司的人工通用智能技术获利。</p><p><span style="background-color:#ffffff; color:#0f1419">马斯克是 OpenAI 最初的董事会成员之一，于 2018 年离开，他认为董事会与奥特曼之间的冲突源自 GPT-4 的开发和下一代 AGI 技术的潜在开发，这可能会危及公众安全。 </span></p><p>详情：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.courthousenews.com%2Felon-musk-sues-openai-over-ai-threat%2F" target="_blank">https://www.courthousenews.com/elon-musk-sues-openai-over-ai-threat/</a></u></em></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 08:38:04 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281047/elon-musk-sues-openai-over-ai-threat</guid>
            <link>https://www.oschina.net/news/281047/elon-musk-sues-openai-over-ai-threat</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[魅族 21 PRO 发布，面向所有大模型团队开放]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#222222">魅族发布 21 PRO 手机，定价 4999~5899 元</span>。<span style="color:#333333">2 月 29 日 20:00 在魅族商城、各大授权电商、魅族线下门店开启预售，3 月 2 日 10:00 线下线下全渠道开售。</span></p><p><span style="color:#222222">魅族称其是公司历史上首个开放式 AI 终端，并面向</span>所有的大模型团队进行开放，向开发者提供系统权限、API 文档，并开放处理器的 AI 算力。<span style="color:#333333">魅族「百万悬赏」计划也宣布同步启动，邀请更多团队基于魅族开放平台开发大模型应用。</span></p><p>基于 FlymeOS 操作系统，魅族 21 PRO 将实现包括 Aicy 语音助手、AI 图库在内的多项 AI 功能。根据规划，魅族 21 PRO 的 AI 灵动键和 AI 辅助输入等功能也将在今年上半年陆续推出。</p><p><img alt="" height="443" src="https://oscimg.oschina.net/oscnet/up-694cfed6a8793190b89faae0e8477609ea1.jpg" width="300" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 08:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281036</guid>
            <link>https://www.oschina.net/news/281036</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenNJet telemetry 支持 Ubuntu 环境！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><span><a href="https://gitee.com/njet-rd/njet-telemetry">Gitee 代码仓库</a>提供了如何使用源码在 ubuntu 环境下进行编译的方法；并且提供了 v2.0.1 版本的 deb 安装包，可直接通过 apt 源（<span style="background-color:#ffffff; color:#000000">Openet apt 源使用方法:&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnjet.org.cn%2Fcases%2Fapt-online%2F" target="_blank">https://njet.org.cn/cases/apt-online/</a>）进行下载安装使用：</span></div><ul><li><span>&nbsp;apt update</span></li><li><span>&nbsp;apt search njet-otel</span></li><li><span>&nbsp;apt install njet-otel</span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 08:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281034</guid>
            <link>https://www.oschina.net/news/281034</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源中国 APP 全新上线：「动弹」回归、集成大模型对话、畅读技术报告]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>经过数月筹备和研发的<strong>新版开源中国 APP —— 今日正式上线</strong>！</p><p>在当今 AI 浪潮的冲击下，我们身处一个充满无限可能的时代。在这个时代，技术的发展呈现出前所未有的速度和深度，而开发者无疑是引领这股潮流的关键力量。</p><p>开源中国不忘「为开发者服务」的初心，希望将 APP 打造成 AI 浪潮中的一艘航船，和广大开发者一起远行。</p><p>闲言少敍（要敍咱去<strong><span style="background-color:#e67e22">「动弹」</span></strong>敍），先来感受一波新版 APP 的丝滑体验：</p><p>&nbsp;</p><p style="text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-925497f35e3f24a14318d7b6ad12f2ed5d4.gif" width="400" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>新版本 APP 亮点版块</p><ul><li><p><strong><span style="background-color:#e67e22">「广场」</span></strong>：「动弹」回归、最新鲜开源资讯、最全开源软件库</p></li><li><p><strong><span style="background-color:#e67e22">「报告」</span></strong>：畅读技术报告</p></li><li><p><strong><span style="background-color:#e67e22">「O Insight」</span></strong>：集成大模型对话</p></li></ul><p>下面继续看看详细的新功能体验。</p><h3><span style="color:#f39c12"><strong># 动弹</strong></span></h3><p>大家期待已久的开源中国社区「灵魂」——动弹终于不负众望回归了！</p><p>动弹移动版上线，欢迎大家畅所欲言。在这里，您可以和广大程序员交流互动，分享经验、讨论技术话题，还可随时随地查看开发者各类分享和吐槽。</p><p style="text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-7c3c3c0ed0058a81a6d0115364fe9e5faed.gif" width="400" referrerpolicy="no-referrer"></p><h3><span style="color:#f39c12"><strong># 大模型对话</strong></span></h3><p>置身 AI 浪潮，新版开源中国 APP 新增大模型对话，准确率高，提供齐全的数据内容；还可选择「社区版、智普 AI 、导师版」三个不同版本；</p><p style="text-align:center"><img height="895" src="https://oscimg.oschina.net/oscnet/up-764690510ca07e10016c28ed8240767c06e.gif" width="400" referrerpolicy="no-referrer"></p><h3><span style="color:#f39c12"><strong># 开源报告</strong></span></h3><p>新版开源中国 APP 还新增报告模块，包含「开源日报、开发者研究、行业研究」三类研究报告，涵盖了开发领域的最新技术趋势和前沿研究。</p><p style="text-align:center"><img height="889" src="https://oscimg.oschina.net/oscnet/up-842e51ced6d226559af1af95c8041338cb2.gif" width="400" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p>这些报告不仅是您学习、探索的宝藏，更是洞悉行业动态的重要参考。通过开源中国 APP，您可以随时随地获取最新的技术资讯，紧跟行业的脉搏，把握未来发展的方向。</p><p>&nbsp;</p><p>除了上面介绍的功能，新版 APP 还有许多其他改进，欢迎大家扫码下载安装体验 ↓↓↓</p><h4 style="text-align:center"><img alt="" height="300" src="https://oscimg.oschina.net/oscnet/up-8ab7bb9f45ecaae87f7a862ea446ae1dacf.png" width="300" referrerpolicy="no-referrer"><br><strong><span style="background-color:#e67e22">（</span><em><span style="background-color:#e67e22">目前仅提供 Android 版本</span></em><span style="background-color:#e67e22">）</span></strong></h4><p>另外，后续我们还将推出「智能终端」，敬请期待。</p><hr><p>身处人工智能时代，开源中国社区积极拥抱创新，致力于服务每一位开发者。</p><p>2024，开源中国社区将全面加速拥抱 AI 技术，提供研究报告、大模型应用、AIGC 创作等产品，打造一个充满活力和创新的开源技术生态社区。</p><p>2024，开源中国社区全新起航！</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 07:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281031/oschina-app-2024</guid>
            <link>https://www.oschina.net/news/281031/oschina-app-2024</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Stack Overflow 向谷歌 Gemini 开放 API]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Stack Overflow 和 Google Cloud <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fstackoverflow.co%2Fcompany%2Fpress%2Farchive%2Fgoogle-cloud-strategic-gen-ai-partnership" target="_blank">宣布</a>建立战略合作伙伴关系，将通过 Stack Overflow 平台、Google Cloud Console 和 Gemini for Google Cloud 为开发者提供新的 AI 功能。</span></p><p><span style="color:#000000">他们新推出了一个&nbsp;Overflow API，使得 Google 的 Gemini AI 模型能够访问 Stack Overflow 的知识库，为开发人员提供来自 Stack Overflow 的建议、代码和答案。Overflow API 目前正处于开发阶段，预计将在 4 月份举行的 Google Cloud Next 会议上预览，并于 2024 年上半年推出。</span></p><p><img height="251" src="https://oscimg.oschina.net/oscnet/up-1882278c0c317615884d15fe98b7c0c961f.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">这次合作除了可以帮助谷歌改进&nbsp;Gemini 外，对&nbsp;Stack Overflow 而言也有助于其在 AI 浪潮中保持对开发人员的影响力。此前，Stack Overflow 就推出了一项 OverflowAI 产品，旨在为其平台添加生成式 AI 功能。借助于谷歌的合作，其 OverflowAI 产品也或将得到增强。</span></p><p><span style="color:#000000">另一方面，Stack Overflow 去年已经经历了多轮裁员。因此 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.infoworld.com%2Farticle%2F3713343%2Fstack-overflow-opens-api-to-googles-gemini.html" target="_blank">InfoWorld</a> 指出，尽管谷歌是 Overflow API 的启动合作伙伴，但 Stack Overflow 也有意与更多希望利用其知识库和内容培训 LLM 的公司达成合作。共享数据用于模型训练可以成为公司新的收入来源，也可以为公司提供杠杆，确保在开发人员经常使用的平台上提供数据。</span></p><p><span style="color:#000000">谷歌和 Stack Overflow 没有透露具体的合作财务条款。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 06:39:15 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/281010/stack-overflow-api-googles-gemini</guid>
            <link>https://www.oschina.net/news/281010/stack-overflow-api-googles-gemini</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[万字带你走过数据库的这激荡的三年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img src="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-blog/andy-database-review/database-review.jpg" alt="" referrerpolicy="no-referrer"></p><p>本文收集了卡内基梅隆大学计算机科学系数据库学副教授 Andy Pavlo 从 2021 到 2023 连续三年对数据库领域的回顾，希望通过连续三年的回顾让你对数据库领域的技术发展有所了解。</p><blockquote><p>关于 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cs.cmu.edu%2F%7Epavlo%2F" target="_blank">Andy Pavlo</a>：卡内基梅隆大学计算机科学系数据库学副教授，数据库调优公司 OtterTune 的 CEO 兼联合创始人。</p></blockquote><p>为了聚焦于数据库技术趋势演变，本文未对原文「寒暄式」开头和注释性语句作翻译。此外，为了节约部分读者的时间，本文分为「观点简述」及「历年回顾」两部分：在「观点简述」部分，你将了解到 Andy 这 3 年对数据库的看法、见解；在「历年回顾」部分，你将了解到该年具体的数据库领域发生的事件，以及 Andy 对该事件的看法。</p><p>本文目录：</p><ul><li>观点简述</li><li>历年回顾 
  <ul><li>2023 年数据库回顾：向量数据库虽然大火，但没有技术壁垒 
    <ul><li>向量数据库的崛起 
      <ul><li>Andy 说：向量数据库没有技术护城河</li></ul></li><li>SQL 持续变好 
      <ul><li>属性图查询（SQL/PGQ）</li><li>多维数组（SQL/MDA）</li><li>Andy 说：SQL:2023 是个里程碑</li></ul></li><li>MariaDB 的困境 
      <ul><li>Andy 说：数据库的声誉比以往任何时候都重要</li></ul></li><li>美国航空因政府数据库崩溃而停飞 
      <ul><li>Andy 说：历史悠久的核心数据系统，是每个数据库从业者最大的噩梦</li></ul></li><li>数据库的融资情况 
      <ul><li>Andy 说：无论初创公司，还是高估值的公司日子都不好过</li></ul></li><li>史上最贵的密码重置 
      <ul><li>Andy 说：意料之外的大人物生活</li></ul></li></ul></li><li>2022 年数据库回顾：江山代有新人出，区块链数据库还是那个傻主意 
    <ul><li>放缓的大规模数据库融资 
      <ul><li>Andy 说：不只是 OLAP 领域，OLTP 领域前景也一样严峻</li></ul></li><li>区块链数据库还是那个蠢点子 
      <ul><li>Andy 说：有让人信服的用例才是合格的新技术</li></ul></li><li>新的数据系统 
      <ul><li>Andy 说：欣然看到数据库领域的勃勃生机</li></ul></li><li>数据库先驱的逝世 
      <ul><li>Andy 说：这是一个让人难过的消息</li></ul></li><li>数据库的巨额财富和民主 
      <ul><li>Andy 说：Larry 干得漂亮</li></ul></li></ul></li><li>2021 年数据库回顾：性能之争烽烟起，不如低调搞大钱 
    <ul><li>PostgreSQL 的主导地位 
      <ul><li>Andy 说：PostgreSQL 只会在未来几年变得更好</li></ul></li><li>基准测试之争 
      <ul><li>Databricks vs Snowflake</li><li>Rockset vs Apache Druid vs ClickHouse</li><li>ClickHouse vs TimescaleDB</li><li>Andy 说：性能之争不值当</li></ul></li><li>大数据搞大钱 
      <ul><li>Andy 说：我们正处在数据库的黄金时代</li></ul></li><li>消逝的数据库们 
      <ul><li>ServiceNow 收购了 Swarm64</li><li>Splice Machine 破产了</li><li>私募公司收购了 Cloudera</li><li>Andy 说：2022 年可能会有更多的数据库公司倒闭</li></ul></li><li>坚持的回报 
      <ul><li>Andy 说：为 Larry 高兴</li></ul></li></ul></li></ul></li></ul><h2>观点简述</h2><p>从 2021 年兴起的数据库性能之争，似乎经过 2 年时间的洗礼，热度有所降低，2022、2023 的数据库厂商们相对 Peace 并没有发起过多的性能战。枯木又逢春，尽管向量数据库存在已久，2023 年 vector database 又大火的一把。不过在 Andy 看来，向量数据库并没有技术壁垒：有多种现成的集成方式，可快速集成向量能力到现有的数据库，这些集成方式甚至还有开源的，更是大大降低数据库厂商的集成成本。SQL 新规范 SQL:2023 在对图数据的支持上，虽然目前只是做了读查询的适配，在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fconfluence.nebula-graph.io%2Fpages%2Fviewpage.action%3FpageId%3D103353671" target="_blank">Oracle v23c</a> 给出了 Oracle 的图查询示例。不过，目前跟进 SQL/PGQ 的 DBMS 不多，像是 DuckDB 的实验性分支；此外，Andy 觉得 SQL/PGQ 对现有的图数据库并不会造成威胁，毕竟还有查询的性能问题需要攻克。在多维数组的支持上，SQL 新规范强化了数组功能，支持了真正意义上的数组——任意维度的数组。</p><p>在融资方面，2021 年是融资大年，各类数据库无论是初创还是老牌数据库厂商都能融到八位数的融资；到了 2022 年，上半年依旧保持着「好融资，融资高」的劲头，但在下半年融资情况急转直下，大额度的融资变少了，资金缩紧。这个情况延续到了 2023 年，除了市场融资变冷清之外，更多的资金集中到了同向量相关的领域，虽然还是有一些数据库厂商「破局」成功融到了钱。</p><p>在数据库可持续发展方面，自 2021 年 Swarm64、Cloudera 被收购，Splice Machine 破产之后。随后的 2022、2023 年，MarkLogic、Ahana、EverSQL、Seafowl 也先后分别被 Progress Software、IBM、Aiven、EnterpriseD 收购，结束了他们的「独立」生涯。</p><p>这 3 年也发生了一些逸事，比如 Oracle 的联合创始人 Larry Ellison 虽然在 2018 年在亿万富翁排名中跌至第十位，但是在 2021 年重返第五位，甚至在 2023 年仅次于 Bernard Arnault、Elon Musk、Jeff Bezos 以 1,070 亿美元名列第四。此外，Larry Ellison 在 2023 年还花了 10 亿给 Elon Musk 来重置他的 Twitter 密码好继续他的推特之旅。习惯用子女名来命名数据库的 MySQL、MaxDB、MariaDB 之父 Monty Widenus 估计最近的日子不好过，因为 MariaDB 的公司和基金会发生了一些矛盾，不仅如此，它的市值还蒸发了 90%。</p><p>除了上面的一些事件，像是美国航空因政府数据库崩溃而停飞 11,000 多架飞机、区块链数据库是个蠢点子之类的指控，就得你翻阅历年回顾了。</p><h2>历年回顾</h2><h3>2023 年数据库回顾：向量数据库虽然大火，但没有技术壁垒</h3><blockquote><p>英文原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2F2023-databases-retrospective" target="_blank">https://ottertune.com/blog/2023-databases-retrospective</a></p></blockquote><h4>向量数据库的崛起</h4><p>毫无疑问，2023 年是向量数据库的一年。尽管几年前相关的某些系统早已存在，但去年人们对 LLM 及其上构建的服务（例如，ChatGPT）的广泛关注让向量数据库成为大家的视线焦点。向量数据库旨在基于语义，而不仅仅是数据内容来提供更深层的数据检索能力，特别是针对非结构化数据。也就是说，应用程序可以搜索与<strong>主题相关</strong>的文档（例如，「有 Slinging 相关歌曲的 hip-hop 团体」），而<strong>不是包含精准关键字</strong>（例如，「Wu-Tang Clan」）的文档。</p><p>这种主题搜索所依赖的「魔法」是 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FTransformer_%28deep_learning_architecture%29" target="_blank">transformer</a>，它将数据转换为一个固定长度的一维浮点数向量，称之为嵌入 Embedding。人类虽然不能直接理解这些嵌入的值，但嵌入的内容编码了参数和 transformer 训练语料库之间的某种关系。这些嵌入向量的大小从简单 transformer 的数百维到高端模型的数千维不等。</p><p>假如，我们使用 transformer 为数据库中的所有记录生成嵌入，就能通过查找与给定输入在高维空间中最相近的记录嵌入来搜索相似记录。然而，暴力比较所有向量以找到最相近的匹配结果是非常昂贵的。这种暴力搜索的复杂度是 O(N * d * k)，其中 N 是嵌入的数量，d 是每个向量的大小，k 是你想要的匹配数量——你可能不知道这个复杂度代表什么，反正很糟糕就是。</p><p>这也促成向量数据库的崛起。本质上，向量数据库只是一个带有特定索引数据结构的文档数据库，以加速对嵌入的相似性搜索。不同于对查询进行精准匹配来找到最相似的向量，向量数据库用近似搜索来生成结果，在速度和精度之间做了权衡，这种结果做出了「足够好」的折中。</p><p>在 2022 年区块链数据库神话崩盘之后，风投们嗅到了向量数据库的商机，再次变得兴奋。他们几乎投资了向量数据库领域的所有主流玩家（厂商）们。在 2023 年的种子轮融资中，Marqo 爆出了一个 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.prnewswire.com%2Fnews-releases%2Fmarqo-secures-us5-2m-to-bring-continuous-learning-vector-search-to-businesses-301902319.html" target="_blank">520 万美元的种子轮</a>，Qdrant 拿到了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftechcrunch.com%2F2023%2F04%2F19%2Fqdrant-an-open-source-vector-database-startup-wants-to-help-ai-developers-leverage-unstructured-data%2F" target="_blank">750 万美元的种子轮</a>，而 Chroma 则融到一个巨额的 1,800 万美元种子轮。同年 4 月，Weaviate 在 B 轮成功融到 5,000 万美元。最抢眼的还是 2023 年 Pinecone 在 B 轮融到让人羡慕的 1 亿美元。很显然，向量数据库公司在正确的时间点出现在了正确的赛道。</p><h5>Andy 说：向量数据库没有技术护城河</h5><p>自从 LLM 在 2022 年末随着 ChatGPT 变成热点，在<strong>不到一年的时间</strong>，多家 DBMS 厂商便添加了自己的向量搜索扩展，其中包括有 SingleStore、Oracle、Rockset 和 ClickHouse。同时，不少基于 PostgreSQL 的数据库产品也宣布支持向量搜索；有些使用 pgvector 扩展（像 Supabase、AlloyDB），而另外一些则使用其他的开源 ANN（近似最近邻算法，Approximate Nearest Neighbor）库，比如：Timescale、Neon。此外，领先的 NoSQL 数据库，像 MongoDB 和 Cassandra，也支持了向量索引。</p><p>我们将多个 DBMS 对向量的快速支持，和先前 JSON 数据类型的兴起做个有意思的对比。在 2000 年代后期，原生存储 JSON 的 NoSQL 系统变得流行（像 MongoDB 和 CouchDB）。但在之后几年时间里，关系型 DBMS 的老牌厂商才添加了对 JSON 的支持，像 PostgreSQL、Oracle 和 MySQL 分别是在 2012、2014 和 2015 年支持的该类型。SQL 标准虽在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSQL%3A2016" target="_blank">SQL:2016</a> 中添加了操作 JSON 数据的函数，但直到 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpeter.eisentraut.org%2Fblog%2F2023%2F04%2F04%2Fsql-2023-is-finished-here-is-whats-new%23new-json-features" target="_blank">SQL:2023</a> 才添加了官方的 JSON 数据类型。尽管许多关系型 DBMS 已经支持了概念上相似的 XML，这种适配的拖延还是让人唏嘘。</p><p>向量搜索索引的快速支持有两个可能的解释。第一个是能通过嵌入进行的相似性搜索越发重要，以至于每个 DBMS 厂商都快速推出了自己的向量版本并第一时间宣布该消息。第二个是引入新的访问方法和索引数据结构所需的工程成本如此低，以至于 DBMS 厂家们添加向量搜索并不需要太多工作。大多数厂商甚至没有从头开始编写向量索引，而是直接集成了几个可用的高质量开源库之一，像是 Microsoft DiskANN、Meta Faiss。</p><p>DBMS 集成向量搜索能力的成本如此低，向量 DBMS 厂商根本没有足够深的护城河来抵抗现有 DBMS 的侵略，保持竞争优势。</p><p>我最近和两家公司 Pinecone 和 Weaviate （上面提到融资成功的向量数据库厂商）的联合创始人聊过，他们可以走两条路（详情参考 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D_QBZv5DrCUM%26t%3D3230s" target="_blank">Andy 对话 Weaviate CTO 的采访视频</a>）。第一条路是，客户开始用向量 DBMS 作为「记录数据库」，厂商将为操作型工作提供更好的支持。最终，向量数据库会看起来更像流行的文档 DBMS，比如：MongoDB。接着，在五年内，像之前的 NoSQL 一样增加对 SQL 的支持。另一条路是，向量 DBMS 作为次级数据库，通过上游操作型 DBMS 的变更进行更新。就像人们使用 Elastic 和 Vespa 这样的搜索引擎 DBMS 一样。在这种情况下，向量 DBMS 可以在不扩展它们的查询语言或拥有更结构化的数据模型的情况下生存。</p><p>旁注： 我最近录制了一个关于<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DjDhVEjgCHGk" target="_blank">向量与关系数据库的问答节目</a>。在里面我提到了，每个关系型 DBMS 在未来五年内都将拥有一个高性能的向量索引实现。</p><h4>SQL 持续变好</h4><p>今年 2024 年是 Don Chamberlain 和 Ray Boyce (RIP) 在 IBM 研究院创建 SQL 的五十周年。最初被称为 SEQUEL（Structured English QUEry Language，结构化英语查询语言）的 SQL，自 1980 年代以来，一直是与数据库交互的事实标准。尽管 SQL 已经很老了，但它的使用情况和功能一直在增加，尤其是过去的十年。</p><p>去年，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FISO%2FIEC_9075" target="_blank">ISO/IEC 9075</a> 规范的最新版本 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSQL%3A2023" target="_blank">SQL:2023</a> 面世。这次更新包括了不少用来处理各种 SQL 方言中的痛点和不一致性的「好用功能」，比如：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpeter.eisentraut.org%2Fblog%2F2023%2F04%2F04%2Fsql-2023-is-finished-here-is-whats-new%23any_value-t626" target="_blank">ANY_VALUE</a>）。值得一提的是，当中两个 SQL 增强功能，进一步削弱了对替代数据模型和查询语言的需求。不过需要注意一点，新的 SQL 规范包含这些内容，并不代表你喜欢的关系型 DBMS 会立即支持这些新特性。</p><h5>属性图查询（SQL/PGQ）</h5><p>目前，SQL 支持对图进行只读查询。这允许应用程序在现有表上声明一个属性图结构。下面这个 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblogs.oracle.com%2Fdatabase%2Fpost%2Fget-started-with-property-graphs-in-oracle-database-23c-free-developer-release" target="_blank">Oracle v23c</a> 的图示例，它记录了哪些人在哪支乐队中：</p><pre><code class="language-sql">CREATE TABLE PEOPLE (ID INT PRIMARY KEY, NAME VARCHAR(32) UNIQUE);
CREATE TABLE BANDS (ID INT PRIMARY KEY, NAME VARCHAR(32) UNIQUE);
CREATE TABLE MEMBEROF (PERSON_ID INT REFERENCES PEOPLE (ID), 
                       BAND_ID INT REFERENCES BANDS (ID), 
                       PRIMARY KEY (PERSON_ID, BAND_ID));

CREATE PROPERTY GRAPH BANDS_GRAPH
   VERTEX TABLES (
      PEOPLE KEY (ID) PROPERTIES (ID, NAME),
      BANDS KEY (ID) PROPERTIES (ID, NAME)
   )
   EDGE TABLES (
      MEMBEROF
      KEY (PERSON_ID, BAND_ID)
      SOURCE KEY (PERSON_ID) REFERENCES PEOPLE (ID)
      DESTINATION KEY (BAND_ID) REFERENCES BANDS (ID)
      PROPERTIES (PERSON_ID, BAND_ID)
   );
</code></pre><p>它由 DBMS 决定是为属性图创建辅助数据结构（例如，邻接矩阵）还是仅跟踪元数据。你可以用 <code>MATCH</code> 关键字在 SQL 中编写图遍历查询，这个语法建立在现有查询语言（像是 Neo4j 的 Cypher，Oracle 的 PGQL 和 TigerGraph 的 GSQL）的基础上，并且兼容了新兴的 GQL 标准。以下查询返回每支乐队的成员数：</p><pre><code class="language-sql">SELECT band_id, COUNT(1) AS num_members
   FROM graph_table ( BANDS_GRAPH
      MATCH (src) - [IS MEMBEROF] -&gt; (dst)
      COLUMNS ( dst.id AS band_id )
   ) GROUP BY band_id ORDER BY num_members DESC FETCH FIRST 10 ROWS ONLY;
</code></pre><p>截至 2024 年 1 月，我知道的唯一支持 SQL/PGQ 的 DBMS 是 Oracle。DuckDB 的实验性分支虽然也支持 SQL/PGQ，但上面示例不能运行，因为两个数据库支持的语法略有不同。你可以从 CWI/DuckDB 研究员 Gabor Szarnyas 整理的这个 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fszarnyasg%2Fgql-sql-pgq-pointers" target="_blank">SQL/PGQ 的优秀资源列表</a>中了解更多关于 SQL/PGQ 的信息。</p><h5>多维数组（SQL/MDA）</h5><p>从 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSQL%3A1999" target="_blank">SQL:1999</a> 引入有限的单维度、固定长度数组数据类型以来，SQL 就支持数组类型。而 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FSQL%3A2003" target="_blank">SQL:2003</a> 更是增强了该功能，支持嵌套数组，而无需预定义最大基数。在 SQL:2023 中，SQL/MDA 部分更新支持了使用整数座标的真正的多维数组，这些数组可以是任意维度。此外，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdoc.rasdaman.org%2F04_ql-guide.html" target="_blank">Rasdaman 的 RQL</a> 大大地启发了 SQL/MDA 语法，SQL 可以提供与其兼容，并与集合语义正交的结构和操作数组构造。借此让应用程序只用在 SQL 中与多维数组交互和操作，而无需将它们导出，例如：到 Python Notebook。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fd-nb.info%2F1137054492%2F34" target="_blank">下表</a>展示了在 <code>CREATE TABLE</code> 语句中使用 <code>MDARRAY</code> 数据类型的不同示例：</p><p><img src="https://nebula-website-cn.oss-cn-hangzhou.aliyuncs.com/nebula-blog/andy-database-review/01.svg" alt="" referrerpolicy="no-referrer"></p><p>尽管 SQL/MDA 规范在 2019 年以技术报告的形式出现，但直到 SQL:2023 它才被正式纳入 SQL 标准。据我所知，除了 Rasdaman 之外，没有其他生产级别的 DBMS 支持 SQL/MDA 扩展。我能找到的唯一其他数据库是 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmisev%2Fasqldb" target="_blank">ASQLDB</a>，一个数据库 HSQLDB 的分支。</p><h5>Andy 说：SQL:2023 是个里程碑</h5><p>SQL:2023 修订版是 SQL 这种通用查询语言持续进化和改进的下一个阶段。当然，SQL 并不完美，也不具备真正的可移植性，因为每个 DBMS 都有自己的特点、专有特性和非标准扩展。就像我个人就非常喜欢 PostgreSQL 的 <code>::</code> 转换操作符快捷方式。</p><p>虽然 SQL/PGQ（SQL 对图的支持）是个大事，但我不觉得它会立即对图数据库造成威胁，因为已经有多种方法将面向图的查询转换为 SQL。包括 SQL Server 和 Oracle 在内的 DBMS 都提供了内置的 SQL 扩展，可以容易地存储和查询图数据。Amazon Neptune 则是在 Aurora MySQL 之上的图数据服务层。Apache AGE 在 PostgreSQL 之上提供了一个 openCypher 接口。我预测其他主流 OLAP 数据系统，例如：Snowflake，Redshift，BigQuery，都会在不久的将来支持 SQL/PGQ。</p><p>但在一个 DBMS 中添加 SQL/PGQ 并不像添加新语法那样简单。要确保图查询性能良好，需要考虑几个工程上的问题。例如，图查询执行多路连接来遍历图。但当这些连接的中间结果比基础表还大时，问题就来了。一个 DBMS 必须使用最坏情况下最优连接（<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FWorst-case_optimal_join_algorithm" target="_blank">WCOJ</a>，Worst-case optimal join）算法来更有效地执行两表联合查询，而不是通常用来连接两个表的 hash join。另一个技术要点是使用因式分解来避免在连接过程中物化冗余的中间结果。这种类型的压缩让 DBMS 规避了一遍又一遍地用相同的连接记录导致内存耗尽的问题。</p><p>上面我提到的优化点，并不是说现有的图数据库都做到了。据我所知，像是 Neo4j、TigerGraph 等图数据库都没有实现。我唯一知道的实现了优化的是滑铁卢大学的嵌入式图数据库 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkuzudb.com%2F" target="_blank">Kuzu</a>。大多数关系型数据库也没有实现它们，至少我知道的那些开源数据库没有。上面提到的 DuckDB 实验分支实现了 WCOJ 和因式分解优化，并在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cidrdb.org%2Fcidr2023%2Fpapers%2Fp66-wolde.pdf" target="_blank">2023 年的论文</a>中显示，在一个行业标准的图基准测试中，其性能比 Neo4j 高出多达 10 倍。</p><p>我很久之前说过，SQL 可能在你出生之前就存在，到你去世它依然会存在。对于那些声称自然语言查询将完全取代 SQL 的说法，我依旧嗤之以鼻。</p><p>旁注：从上次我公开说到 2030 年图数据库都不会在数据库市场上超过关系型数据库以来，已经两年过去了。到目前为止，我还是对的。</p><h4>MariaDB 的困境</h4><p>过去的一年，MariaDB 频频出现在新闻报道中，而且大多数都不是什么好消息。独立于 MariaDB 基金会的 MariaDB 公司显然是一个混乱的公司。在 2022 年，这家公司试图借壳 SPAC 上市，但是股票（$MRDB）在 IPO 后的三天内立即跌了 40%。而为了加速在纽交所上市进度的借壳操作也被公诸于世。到 2023 年底，MariaDB 公司股价自开盘以来跌了 90% 以上。</p><p>因为这些糟糕的财务问题，MariaDb 公司宣布了两轮裁员。第一轮在 2023 年 4 月，但同年 10 月他们进行了另一轮更大规模的裁员。公司还宣布他们将关停两款产品：Xpand 和 SkySQL。前者是 MariaDB 公司在 2018 年收购的产品，当时它还被称为 Clustrix；我在 2014 年还参观了 Clustrix 的旧金山办公室，当时我觉得那里像个阴森的鬼城（办公室里一半的灯都熄灭了）。后者 SkySQL 的历史更加复杂。最初它只是一个提供 MariaDB 服务的独立公司，在 2013 年与 Monty Program AB 合并。在 2014 年，合并后的 Monty Program AB + SkySQL 公司变成了今天的 MariaDB 公司。但在 2023 年 12 月，公司又宣布 SkySQL 没有「死去」，而是作为一个独立公司重新回到了市场！</p><p>MariaDB 公司的情况如此糟糕，以至于 MariaDB 基金会的 CEO 专门写文章，抱怨自从 MariaDB 公司上市以来基金会与公司的关系是如何恶化，他希望能够重新审视彼此关系。雪上加霜的是，微软在 2023 年 9 月宣布，未来不再提供作为托管 Azure 服务的 MariaDB，而是改为采用 MySQL。可能有人不知道，MariaDB 本身就是 MySQL 的一个分支，是 MySQL 的原创始人 Monty Widenus 在 2009 年 Oracle 宣布收购 Sun Microsystems 后创建的。回忆下，Oracle 在 2005 年买了 InnoDB 的制造商 InnoBase，Sun 在 2008 年买了 MySQL AB。现在 MySQL 运行良好，MariaDB 却遇到了问题。戏剧来源于现实，多看看数据库市场你能吃到各种瓜！</p><h5>Andy 说：数据库的声誉比以往任何时候都重要</h5><p>过去的十年，数据库客户的精明程度有了大幅度的提升。各家公司也不再能仅凭华而不实的性能数字、取代 SQL 的新查询语言，或是名人效应来「扮成功直到真正成功」了。数据库的声誉比以往任何时候都更为重要，其背后的公司声誉也同样重要。也就是说，这意味着软件本身的稳定很重要，其公司也得有条不紊地运作。</p><p>开源数据库背后的公司如果倒闭了，很少数据库能继续发展和繁荣。不过，PostgreSQL 算一个例外，尽管今天我们用的开源版本是基于加州大学伯克利分校的源码，而不是 1996 年被 Informix 收购的商业版本 Illustra。另一个例子是，为 MySQL 构建 InfiniDB OLAP 引擎的公司在 2014 年破产后，其 GPLv2 源码被接手并作为 MariaDB 的 ColumnStore 持续发展。</p><p>相反，更多现实告诉我们，一旦支付最多开发费用的公司消失，对应的数据库就会逐渐衰落。唯二在某种程度上算是活下来数据库的例子是 Riak 和 RethinkDB。Basho 在 2017 年破产后，现在 Riak 由在 UK's NHS 工作的一个人维护。RethinkDB 公司在 2017 年倒闭（鉴于创始人对女性在科技界的看法，这并不奇怪）后，数据库源码就被转移到了 Linux 基金会。尽管基金会接手了项目，RethinkDB 仍处于活着的状态：该项目在 2023 年发布了一个新版本，但它们只是热修复，来解决一些已知问题。有兴趣的话，你可以去 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fattic.apache.org%2F" target="_blank">Apache 基金会档案室</a>看看那些被遗弃的数据库项目。</p><p>只在云端提供数据库服务的 DBaaS，在稳定性上只会更糟糕。因为如果公司失败，或是开始面临财务压力，他们就会关闭托管你数据库的服务器。Xeround 在 2013 年关闭云服务时，给了他们的客户两周时间迁移数据。为了降低成本，InfluxDB 在 2023 年 7 月删除整个 region 前给了客户六个月的时间迁移，但大家还是大吃一惊。</p><p>MariaDB 比一般的数据库创业公司处于更好的位置，因为 Monty 和其他人成立了一个管理开源项目的非营利基金。但当你是一个以盈利为目的的开源数据库公司，而帮助你管理该 DBMS 运作的非营利组织公开表示你管理混乱的话，那就是一个坏兆头！与此同时，MySQL 在持续改善，Oracle 依旧是那个从工程角度看不错的企业级数据库选择。MariaDB 公司的混乱将进一步促进人们转向使用 PostgreSQL。</p><p>MariaDB 肯定不能失败，据我所知，Monty 没有更多的孩子可以用来给数据库命名了（例如：MaxDB、MySQL、MariaDB）。</p><p>小趣闻：MariaDB 取名自 Monty 的小女儿 Maria，MaxDB 取名自儿子 Max，MySQL 来自大女儿 My。</p><h4>美国航空因政府数据库崩溃而停飞</h4><p>在 2023 年 1 月 11 日，由于飞行通知 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fen.wikipedia.org%2Fwiki%2FNOTAM" target="_blank">NOTAM</a> 系统故障，联邦航空管理局 FAA 停飞了美国所有的航班。NOTAM 系统向飞行员提供以纯文本编码的消息，告诉他们可能在飞行路径上会遇到的意外和潜在危险。当 NOTAM 系统在 1 月 11 日早晨崩溃时，直接导致美国大约 11,000 架航班无法起飞。所幸的是，其他国家运行着独立的、不受美国 NOTAM 故障影响的 NOTAM 系统能正常起飞。</p><p>根据 FAA 官方说法，这次故障是由于一个数据库文件损坏导致的。一名来自第三方承包商的工程师尝试用备份文件替换它，但结果是备份文件也有问题。2008 年也发生了类似的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.eweek.com%2Fnetworking%2Fcorrupt-file-brought-down-faa-s-antiquated-it-system%2F" target="_blank">事件</a>。</p><p>关于 FAA 在 NOTAM 所用的 DBMS 并没有公开信息。有一些报道称，NOTAM 仍然在运行于 1988 年的两台 Philips DS714/81 大型机上。但这些 Philips DS714 机器没有我们今天所知的操作系统；它们是 1960 大型机年代的遗物。也就是说，在 1980 年代 FAA 无法为应用使用现有的数据库系统，即便是那些当时已经存在的数据库，像是 Oracle、Ingres 和 Informix 都支持当时的各种 Unix。我觉得比较合理的可能是，NOTAM 可能用 Flat File（比如：CSV）来自行管理数据。1980 年代由非数据库专家编写的应用程序代码负责从文件中读取/写入记录，复制到备用服务器，并在出现故障时维护数据的完整性。</p><h5>Andy 说：历史悠久的核心数据系统，是每个数据库从业者最大的噩梦</h5><p>在无法替代的传统硬件上运行关键任务系统，使用的还是由早就退休的内部开发人员编写的自定义数据库访问库，这是每个数据库从业者最大的噩梦。我很惊讶它竟然没崩溃得更早（除非 2008 年的故障是同一系统），我觉得我们应该给这个运行了 35 年的系统一些掌声。</p><p>有消息称，NOTAM 系统每秒只处理 20 条消息。按照现代数据标准，这个数据量真的很小，但别忘记，FAA 是在 1980 年代配置的这个系统。数据库传奇人物，1998 年图灵奖得主 Jim Gray 在 1985 年写到，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjimgray.azurewebsites.net%2Fpapers%2FTandemTR85.1_1kTPS.pdf" target="_blank">「普通」的数据库管理系统可以执行大约每秒 50 次事务</a>（txn/sec），而非常高端的系统可以达到每秒 200 次。作为参考，五年前，有人使用 1980 年代的基准测试（基于 TPC-A 的 TPC-B）<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.rustprooflabs.com%2F2019%2F04%2Fpostgresql-pgbench-raspberry-pi" target="_blank">在树莓派 3 上运行 PostgreSQL，大约达到了每秒 200 次事务</a>。如果我们不考虑那些使用跨数据中心的强一致性复制（这会受到光速的限制）的系统，现代单节点在线事务处理（OLTP）DBMS 可以在某些工作负载下实现每秒数百万次事务的吞吐量。NOTAM 在 1980 年代的峰值每秒 20 条消息的吞吐量并没有推动当时的技术极限，而且显然今天也没有。</p><p>因为 NOTAM 没有将数据库与应用程序逻辑分离，所以独立升级这些组件是不可能的。考虑到在 1980 年代中期，关系模型的优点已经众所周知，NOTAM 这种设计是该批判的。当然，并不是说 SQL 就能防止这次确切的失败（这是一个人为错误），但独立性会让各个组件不那么笨重，更易于管理。</p><p>尽管如此，当时美国政府其实已经在用商用关系型 DBMS。例如，Stonebraker 的 RTI（Ingres 厂商）在 1988 年的 IPO 申报文件中提到，他们现有的客户包括国防部和内政部、军事分支和研究实验室。我相信当时美国政府的其他部门也在使用 IBM DB2 和 Oracle。因此，除非 NOTAM 有什么我不知道的特别之处，不然 FAA 本可以使用真正的数据库管理系统。</p><p>停飞事件发生的时候，我正在阿姆斯特丹的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cidrdb.org%2Fcidr2023%2F" target="_blank">CIDR 2023</a> 会议的返程中。幸运的是，停飞没有影响入境的国际航班，我的飞机可以顺利地降落。但我还是被困在纽瓦克机场，因为美国所有国内航班都停飞了。熟悉纽瓦克机场的人都知道，在这里待着并不是什么好事。</p><p>延伸阅读：你可以阅读我之前的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2Fwhy-the-faas-database-problem-wont-happen-in-aws" target="_blank">文章</a>，了解下为什么如果 NOTAM 数据库运行在 Amazon RDS 上，不太可能发生数据库崩溃。</p><h4>数据库的融资情况</h4><p>除了上面提到的向量数据库是风投的「新宠」之外，其他类型的数据库在 2023 年也是有融资的。但总体而言，今年的数据库融资活动比往年要冷清得多。</p><p>自动调优初创公司 DBTune 在欧洲完成了 260 万美元的种子轮融资。PostgresML 获得了 450 万美元的种子轮融资，来打造一个通过自定义扩展来支持从 SQL 调用 ML 框架的 DBaaS。TileDB 在秋季宣布完成了 3,400 万美元的 B 轮融资，以此继续完善他们的阵列数据库管理系统。尽管有着 13 年的历史，SQReam 还是获得了 4,500 万美元的 C 轮融资，来继续开发他们的 GPU 加速数据库管理系统。Neon 在 2023 年 8 月完成了 4,600 万美元的 B 轮融资，以扩展无服务器 PostgreSQL 平台。当然，2023 年的融资赢家再次是 Databricks，他们在 2023 年 9 月完成了 5 亿美元的 I 轮融资。虽然这是一笔巨款，但并不如他们在 2021 年 H 轮的 16 亿美元来得多。</p><p>Peter Boncz 和 Tianzhou Chen 提醒我了，还有 MotherDuck（DuckDB 的商业版本）在 2023 年 9 月完成的 5,250 万美元的 B 轮融资。另一个数据库产品 DBeaver，完成了 500 万美元的种子轮融资，来继续研发受欢迎的 multi-DBMS 。</p><p>此外，2023 年数据库领域也发生了一些收购。最大的一笔交易在年初发生，MarkLogic 被 Progress Software 以 3.55 亿美元现金收购。MarkLogic 是最古老的 XML 数据库管理系统之一（约 2001 年），而 Progress 拥有 OpenEdge，一种更古老的数据库管理系统（约 1984 年）。IBM 收购了 Meta 的衍生公司 Ahana，该公司试图将 PrestoDB（它不同于已经更名为 Trino 的 PrestoSQL）商业化。多云数据库服务提供商 Aiven 收购了 AI 驱动的查询重写器初创公司 EverSQL。EnterpriseDB 用 Bain Capital（私募投资公司）的资金收购了基于 DataFusion 兼容 PostgreSQL 的 OLAP 引擎的 Seafowl 团队。Snowflake 收购了两家初创公司：（1）由前斯坦福教授 Peter Bailis 打造的 Sisu Data，以及（2）由伯克利教授 Aditya Parameswaran 基于 Modin 研发的 Ponder。</p><h5>Andy 说：无论初创公司，还是高估值的公司日子都不好过</h5><p>我的风投朋友们说，他们在 2023 年看到了更多新公司的推介，但比往年签发的支票更少。这个趋势贯穿所有初创领域，数据库市场也不例外。大部分的风投注意力都在那些和人工智能+大型语言模型（LLM）有一点点关系的项目，这也合理，毕竟这是计算领域的新篇章。</p><p>尽管美国 2023 年的宏观经济指标有些积极的迹象，但科技产业依旧紧张，每家企业都在削减成本。像 OtterTune（作者所在的公司）客户希望我们的数据库优化服务能在 2023 年帮助他们降低数据库基础设施成本。这与公司早些年人们主要来找 OtterTune 提高数据库管理系统的性能和稳定性不同。我们计划在 2024 年宣布新功能，以帮助降低数据库成本。回到大学，这个学期有比平常更多的学生请我帮他们找数据库开发的工作。这让我很吃惊，因为 CMU 的计算机科学学生一直不愁找工作，靠自己就拿到不错的实习和全职 offer，除了有次我最优秀的本科生重写了我们的查询优化器，但因为忘了问我，结果找不到暑期实习，最后在匹兹堡机场附近的迪克体育用品店做网页开发——他现在在 Vertica 工作得很开心。</p><p>如果美国的科技市场继续低迷不振，接下来的几年众多数据库初创公司都难有大发展。小型的数据库初创公司要么会被大型科技公司或私募股权收购，要么就直接倒闭。但是，那些融到大笔钱且估值很高的公司也不好过。正如我之前说的那样，有些公司可能无法 IPO，而且没有哪家大型科技公司会需要这些 DBMS，因为如今大家都有自己的数据库系统。因此，这些大数据库管理系统公司将面临三个选择：接受降低估值的融资以保持运营；通过私募股权获得支持，保持运营（比如：Cloudera）；被一家 IT 服务公司收购（比如：Rocket，Actian），这些公司将 DBMS 置于维护模式，但继续从那些被困的客户那里收取许可费，因为这些客户有他们无法轻易迁移的遗留应用程序。不过，这三条路对于数据库公司来说都不理想，应该会吓跑潜在的新客户。</p><p>最后，我要重述一句：不要问 Databricks 是不是会 IPO，而是它何时会 IPO。</p><h4>史上最贵的密码重置</h4><p>2023 年，数据库传奇大佬 Larry Ellison 春风得意。对于他原本杰出的职业生涯来说，2023 年也是一个标志性的一年。2023 年 6 月，他重返世界第四富有的位置。Oracle 公司的股价（$ORCL）在 2023 年上涨了 22%，略低于标准普尔 500 指数 24% 的回报率。此外，在 2023 年 9 月，Larry 第一次去了 Redmond，并与微软首席执行官 Satya Nadella 一起登台宣布，Oracle 可作为 Azure 云平台上托管服务使用。随后同年 11 月，股东们压倒性地投票支持 79 岁的 Larry 继续担任 Oracle 董事会主席。</p><p>但 2023 年真正的大新闻是，Elon Musk 在 Larry 对 Musk 收购社交媒体公司投资了 10 亿美元后，亲自帮 Larry 重置了 Twitter 密码。正是这笔价值 10 亿美元的密码重置，我们在 2023 年 10 月有幸看到了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Flarryellison%2Fstatus%2F1709982050521125224" target="_blank">Larry 的第二条推文</a>，也是他十多年来的首条新推文。Larry 预告了他即将前往牛津大学的行程，后来他在那里宣布在牛津大学成立埃里森技术研究院（EIT）。</p><h5>Andy 说：意料之外的大人物生活</h5><p>其实 Larry 发了什么根本不重要，重要的是 Larry 回归推特发推文。我偷偷打听过，Larry 偶尔会看看推特，主要关注创业点子提案、祝福以及不经意冒出的奇思妙想。</p><p>Larry 的推文之所以出人意料，是因为人们一般会认为他总是忙于更宏伟的活动。毕竟，他拥有一架 MiG-29 战斗机和一个夏威夷岛屿。他有很多更伟大的事情可以做。所以，当他抽出时间在一个日益衰落的社交媒体上写推文，告诉我们他在做什么。这对我们所有人来说，都是一个重大的生活事件。为此，Larry 不得不请他那个世界上最富有的朋友来重置他的密码。虽然花费 10 亿美元，但当你拥有 1,030 亿美元时，这都不是什么事了。</p><h3>2022 年数据库回顾：江山代有新人出，区块链数据库还是那个傻主意</h3><blockquote><p>英文原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2F2022-databases-retrospective" target="_blank">https://ottertune.com/blog/2022-databases-retrospective</a></p></blockquote><h4>放缓的大规模数据库融资</h4><p>正如我去年说的那样，2021 年是数据库融资的大年。随着投资者继续寻找下一个 Snowflake，大量资金涌向了新的 DBMS 初创公司。2022 年初看起来像是要再过一次 2021 年，有非常多的大额融资消息。</p><p>融资狂欢在 2022 年的 2 月开始，Timescale 完成了 1.1 亿美元的 C 轮融资，Voltron Data 完成了 1.1 亿美元的种子轮 + A 轮融资，Dbt Labs 完成了 2.22 亿美元的 D 轮融资。Starburst 在 3 月宣布了他们 2.5 亿美元的 D 轮融资来继续提升他们的 Trino 产品。Imply 在 5 月拿出 1 亿美元的 D 轮融资用于开发他们的 Druid 商业版本。DataStax 在 6 月的 IPO 途中获得了 1.15 亿美元的资金。最后，SingleStore 在 7 月完成了 1.16 亿美元的 F 轮融资，然后在 10 月又融了 3,000 万美元。</p><p>2022 年上半年还有几家较小的公司完成了让人印象深刻的 A 轮融资，包括 Neon 的 3,000 万美元 A 轮用来研发无服务器 PostgreSQL 产品，ReadySet 2,900 万美元 A 轮融资来研发查询缓存层，Convex 的 2,600 万美元 A 轮来继续开发他们基于 PostgreSQL 的应用程序框架，以及 QuestDB 的 1,500 万美元 A 轮来开发时序数据库。尽管我们 OtterTune 没有新的 DBMS 或相关基础设施，但我们也在 4 月完成了 1,200 万美元的 A 轮融资。</p><p>但是，到了 2022 年下半年，大规模的融资轮停止了。尽管早期初创公司还是有较小额的融资进来，但更后面的公司再也没有九位数的美元融资了。</p><p>流处理引擎 RisingWave 在 10 月筹集了 3,600 万美元的 A 轮，Snowflake 查询加速器 Keebo 融到 1,050 万美元的 A 轮资金。在 11 月，我们看到了 MotherDuck 的 4,500 万美元种子轮 + A 轮融资的新闻来开发商业化 DuckDB 的云版本，以及 EdgeDB 在 11 月的 1,500 万美元 A 轮融资。最后，是 SurrealDB 完成了 600 万美元的种子轮融资。我可能漏掉了一些其他公司，这不是一个详尽的列表。</p><p>在数据库领域唯一其他值得注意的金融事件是，MariaDB 在 12 月的灾难性地通过 SPAC IPO，股价在首个交易日就下跌了 40%。</p><h5>Andy 说：不只是 OLAP 领域，OLTP 领域前景也一样严峻</h5><p>与 2021 年相比，在 2022 年大额融资轮减少的原因有两个。最明显的是整个科技行业在降温，部分原因是人们对通货膨胀、利率和加密经济崩溃的担忧。另一个原因是，有能力大额融资的公司在资金干涸之前就完成了融资。</p><p>例如，Starburst 在 2021 年完成了 1 亿美元的 C 轮融资后，在 2022 年进行了它的 D 轮融资。在过去两年完成巨额融资的数据库公司，很快就需要再次融资来保持增长势头。</p><p>坏消息是，除非科技行业有所改善，并且大型机构投资者开始再次将资金投入市场，否则这些公司们将面临困境。市场无法维持这么多独立软件供应商（ISVs）为数据库服务。这些拥有十亿美元估值的公司唯一继续前进的法子是，进行首次公开募股或破产。这些公司对于大多数公司来说太贵了，无法被收购（除非风投公司愿意大打折扣）。</p><p>此外，进行大型并购的大型科技公司（比如：亚马逊、谷歌、微软）都有了自己的云数据库产品。因此，不清楚谁会收购这些数据库初创公司。亚马逊没有理由在他们 Redshift 每年赚取数十亿美元时，去以 2021 年的 20 亿美元估值购买 ClickHouse。这个问题不仅限于 OLAP 数据库公司；OLTP 数据库公司很快也将面临同样的问题。</p><p>我并不是唯一一个对数据库初创公司的前景做出如此严峻预测的人。Gartner 分析师预测，到 2025 年，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gartner.com%2Fen%2Farticles%2F12-data-and-analytics-trends-to-keep-on-your-radar" target="_blank">50% 的独立 DBMS 供应商将退出市场</a>。显然我有自己的看法，我认为未来生存下来的公司是那些致力改善或者是强化 DBMS 的公司，而不是替换它们的公司（比如：dbt、ReadySet、Keebo 和 OtterTune）。</p><p>我无法判断 MariaDB 借壳 SPAC 「快速上市」是否是个好主意。这种金融操作不在我的专业领域（数据库）内。但既然这和前美国总统用他的社交媒体公司做的事情一样，我就姑且认为它不是什么好主意。</p><h4>区块链数据库还是那个蠢点子</h4><p>关于 Web3 根本性转变了构建新应用程序方式这点，有很多夸张的说法。我有一个学生甚至因为我教授的是关系数据库而不是 Web3，愤然从我的课堂离席。Web3 运动的核心是在区块链数据库中存储状态。</p><p>区块链本质上是去中心化的分散的日志结构数据库（即，账本），它们通过使用某种 Merkle 树的变体和 BFT 共识协议来维护增量校验和，从而确定下一个要入库的更新。这些增量校验和是区块链确保数据库日志记录不变性的方式：客户端使用这些校验和来验证之前的数据库更新没有被更改。</p><p>区块链是之前想法的巧妙结合。但是，厂商们认为去中心化账本是每个人构建 OLTP 应用程序必须的，这点是一种误导。从数据库的角度，除了加密货币之外，区块链数据库和现有的 DBMS 没有任何差别。此外，任何区块链在数据库安全性和可审计性比现有 DBMS 表现更好的说法，都是胡说。</p><p>如果说加密货币是区块链数据库的最佳实践，那么 2022 年加密市场的崩溃显然没有帮到它们，甚至是进一步阻碍了区块链数据库的发展。当然我会忽略 FTX 的崩盘（他们申请了破产保护），毕竟它就是彻头彻尾的诈骗，和数据库一点关系都没。不过，我要指出，FTX 和所有其他加密货币交易所一样，并没有在区块链数据库上运行业务，而是使用了 PostgreSQL。</p><p>此外，其他与加密货币无关的区块链数据库用例，如交易和游戏平台，都因为不切实际或诈骗没有落地。</p><h4>Andy 说：有让人信服的用例才是合格的新技术</h4><p>评估某项技术的原则之一是，一旦厂商开始制作它的媒体广告，它就不再是「新」技术了。简单来说，像是 IBM 之类的厂商在打广告的时还没有出来让人信服的用例，那么这个产品永远也不会有用例。</p><p>举个例子，IBM 在 2002 年在一则商业广告中吹捧 Linux 是一个热门的新事物，但那时已经有包括谷歌在内的成千上万的公司将 Linux 作为主要服务器操作系统使用了。所以，当 IBM 在 2018 年发布他们的区块链广告时，我就知道这项技术除了在加密货币领域有用，在其他领域毫无用处。因为其他领域没有一个问题是去中心化的区块链能解决，而中心化的 DBMS 不能解决的。</p><p>因此，2022 年 IBM 宣布将关闭与航运巨头 Maersk 合作的供应链 IT 基础设施改造项目，也就不奇怪了，毕竟这正是 IBM 在广告中炒作的场景。</p><p>相比任意一个可信权威管理、只允许受信任的客户端直连、用心编写的事务数据库，区块链数据库的效率低得可怕。除了加密货币（见上文）或者其他什么欺诈场景，现实数据世界的运行方式都是和其他数据库目前处理的那样。</p><p>信任是一个正常运转的社会的基石。例如，我授权托管 OtterTune 网站的公司向我的信用卡收费，他们又信任一个云提供商来托管他们的软件。没人会需要使用区块链数据库来进行这些「信任」交易。</p><p>从工作量证明（PoW：proof-of-work）转换到不那么费事的权益证明（PoS：proof-of-stake），共识机制确实提升了区块链数据库的性能。但这只影响数据库的吞吐量；区块链交易的延迟仍然以数十秒计算。如果解决这些长延迟的方法是使用参与者较少的 PoS 区块链，那么应用程序使用 PostgreSQL 来认证这些参与者会更好。</p><p>你可以读一读 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tbray.org%2Fongoing%2FWhen%2F202x%2F2022%2F11%2F19%2FAWS-Blockchain" target="_blank">Tim Bray（XML 之父）同 AWS 高层内部讨论是否有区块链可行用例</a>的精彩文章。值得留意的是，Tim 说 AWS 在 2016 年就得出过区块链数据库是数据问题的解决方案的结论，这比 IBM 推出区块链数据库广告早了两年！虽然 AWS 最终在 2018 年发布了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Faws.amazon.com%2Fqldb%2F" target="_blank">QLDB</a> 服务，但它不同于区块链；它是一个中心化的可验证账本，不使用 BFT 共识。与亚马逊极为成功的 Aurora 产品相比，QLDB 客户的采用率一直不太理想。</p><p>趣闻：在 FTX 崩盘（申请破产保护）前的三周，有人和我说 OtterTune 的全职工程师人数和 FTX 在巴哈马的团队一样。这个人还说，既然工程师人数一样，OtterTune 应该像 FTX 那样更有前景，而且现在应该有 10 亿美元的年度经常性收入（ARR）。真是有意思呀。</p><h4>新的数据系统</h4><p>今年有不少新的 DBMS 软件的重大新闻：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcloud.google.com%2Falloydb" target="_blank">Google AlloyDB</a>：2022 年最让人震惊的消息是 5 月份谷歌云宣布了它们的新数据库服务。AlloyDB 不是基于 Spanner 构建的，而是一个修改版的 PostgreSQL，它分离了计算层和存储层，并且支持在存储中直接处理 WAL 记录。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.snowflake.com%2Fen%2Fdata-cloud%2Fworkloads%2Funistore%2F" target="_blank">Snowflake Unistore</a>：6 月份，Snowflake 宣布了他们的新 Unistore 引擎，用「混合表」来支持 DML 操作的低延迟交易。当查询要更新表时，变更会传到 Snowflake 的列式存储中。SingleStore 数据库的某个人有些激动，说 SingleStore 在这个领域有一些专利，虽然这个说法没啥实质性证据支撑。补充信息：SingleStore 和 Snowflake Unistore 有部分技术交集，你可以理解为他们存在一定的竞争关系。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.oracle.com%2Fmysql%2Fheatwave%2F" target="_blank">MySQL Heatwave</a>：当 Oracle 发现 Amazon 从 MySQL 赚的钱比他们多后，终于在 2020 年决定为 MySQL 构建自己的云服务。但他们并没有仅仅做个 RDS（关系数据库服务）克隆版，而是用一个叫做 Heatwave 的内存向量化 OLAP 引擎扩展了 MySQL。2021 年 Oracle 还宣布他们的 MySQL 服务还支持自动化数据库优化（但与 OtterTune 提供的优化服务不同）。到了 2022 年，Oracle 终于发现他们不是领先的云供应商，并向 AWS 「低头」在 AWS 上托管了 MySQL Heatwave。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fvelox-lib.io%2F" target="_blank">Velox</a>：Meta 在 2020 年开始构建 Velox，作为 PrestoDB 的新执行引擎。两年后，他们宣布了这个项目并发表了一篇关于它的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fresearch.facebook.com%2Fpublications%2Fvelox-metas-unified-execution-engine%2F" target="_blank">VLDB 论文</a>。Velox 并不是一个完整的 DBMS：它不带 SQL 解析器、目录、优化器或网络支持。相反，它是一个带有内存池和存储连接器的 C++ 可扩展执行引擎。人们可以基于 Velox 构建一个成熟的 DBMS。</li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.influxdata.com%2Fblog%2Finfluxdb-engine%2F" target="_blank">InfluxDB IOx</a>：就像 Meta 的 Velox 一样，Influx 团队在过去两年一直在努力开发新 IOx 引擎。在 10 月，他们宣布新引擎正式上线（GA）。InfluxDB 从零开始基于 DataFusion 和 Apache Arrow 构建了 IOx。值得庆祝下的是，我在 2017 年和 Influx 的 CTO 说使用 MMAP 是个坏主意后，他们在新系统中抛弃了 MMAP。</li></ul><h5>Andy 说：欣然看到数据库领域的勃勃生机</h5><p>很高兴见证了 2022 年数据库领域发生的这些事。我对 AlloyDB 的看法是，它是一个简洁的系统，当中投入了让人感叹的工程量，但我还是不知道它有什么创新点。AlloyDB 的架构类似于 Amazon 的 Aurora 和 Neon，在 DBMS 存储中有个额外的计算层，可以独立于计算节点处理 WAL 记录。尽管谷歌云已经拥有坚挺的数据库产品组合（比如：Spanner、BigQuery），但它们还是觉得有必要构建 AlloyDB 来尝试赶上亚马逊和微软。</p><p>需要关注的长期趋势是诸如 Velox、DataFusion 和 Polars 之类的框架的普及。结合像 Substrait 之类的项目，这些查询执行组件的商品化意味着未来的五年内，所有的 OLAP DBMS 将在性能上大致持平。</p><p>与其完全从头开始构建一个新的 DBMS，或者是 hard fork 一个现有系统（像 Firebolt fork ClickHouse），比如使用一个像 Velox 这样的可扩展框架。也就是说，每个 DBMS 都将具备同 Snowflake 十年前独有的相同向量化执行能力。尤其是在云上，存储层对每个人来说都是相同的（比如：亚马逊控制的 EBS/S3），那么区分 DBMS 产品的关键因素将会是那些难以量化的事物，如 UI/UX 设计和查询优化。</p><h4>数据库先驱的逝世</h4><p>在 2022 年 7 月有一个让人难过的消息，Martin Kersten 逝世了。Martin 是 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cwi.nl%2Fresearch%2Fgroups%2Fdatabase-architectures" target="_blank">CWI</a> 的研究员，他是多个颇具影响力的数据库项目的引领者，包括 1990 年代最早的分布式内存 DBMS（PRISMA/DB）和 2000 年代最早的列式 OLAP DBMS（MonetDB）。因为他在数据库方面的贡献，Martin 在 2020 年因被荷兰政府授予皇家骑士称号。</p><p>MonetDB 的代码库还是其他几个 OLAP 系统项目的跳板。在 2000 年代末，Peter Boncz 和 Marcin Żukowski fork MonetDB 它开发 MonetDB/X100，后来商业化为 Vectorwise（现在叫 Actian Vector）。Marcin 后来离开，联合他人共同创立的 Snowflake，采用了原来他在 MonetDB 代码上开发的许多技术点。最近，Hannes Mühleisen 搞了个 MonetDB 的嵌入式版本 MonetDBLite，后来他又重写了项目，变成了现在的 DuckDB。</p><p>Martin 对现代数据库系统的贡献如此重大，以至于你如果使用任何现代分析型 DBMS（像是 Snowflake、Redshift、BigQuery、ClickHouse），你就是在享受 Martin 和他的学生在过去 30 年开发的众多进步成果。</p><h5>Andy 说：这是一个让人难过的消息</h5><p>我知道，相比 Mike Stonebraker（研究数据库的计算机科学家，2014 年图灵奖获得者）这样的人，数据库研究圈外人可能知晓 Martin 没那么多。我总把 Martin 看作是 Stonebraker 的欧洲版：他们都是多产的数据库研究者，高个子、瘦弱、戴眼镜，年龄相仿。但 Martin 并不是像 Nintendo Smitch 山寨 Nintendo Switch 那样的山寨货。</p><p>除了研究，在业余时间 Martin 也乐于同他人讨论数据库架构。我最后一次见 Martin 是在新冠爆发之前的 2019 年。我们就他为什么认为在 MonetDB 中使用 MMAP 是正确的选择争论了一个小时；他声称因为 MonetDB 专注只读的 OLAP 工作负载，所以 MMAP 就够好了。其实有件事很对不住 Martin，就是那些他应对过的在 YouTube 观看我的数据库课程后，给他发邮件询问为什么 MonetDB 做出了我声称的较差设计的学生。</p><p>我建议你看下 Martin 在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvjWRE0UnJDQ%26list%3DPLSE8ODhjZXjbeqnfuvp30VrI7VXiFuOXS%26index%3D19" target="_blank">2021 年 CMU-DB 研讨会的压轴演讲</a>。我和 Martin 承诺在他的演讲中，我不会用 MonetDB 采纳 MMAP 这点让他分心。为了表示诚意，在这个视频的前面 60 秒，我找了个荷兰人录制一个仿皇家的 Martin 短片介绍。</p><h4>数据库的巨额财富和民主</h4><p>2022 年 5 月，《华盛顿邮报》报道说，Oracle 创始人和帆船爱好者 Larry Ellison 参加了 2020 年 11 月刚结束的选举的电话会议，与会的有美国总统和其他保守派领袖。</p><p>电话会议集中讨论了总统的盟友和活动分子可能采取的、来推翻总统选举的结果的不同策略。正如《邮报》文中指出的那样，目前尚不清楚为什么政府要让 Larry 参与通话。一种猜测是，鉴于 Larry 显而易见的强大技术背景，他可能很适合评估外国势力利用某种方式来使用衞星技术来远程操控美国选举的说法是否可行。</p><h5>Andy 说：Larry 干得漂亮</h5><p>相信 Larry 和我都厌倦了人们对他支持美国右翼的离谱言论，甚至有人说这个电话是 Larry 做过的最糟糕的事。这不是真的，要知道这样的新闻和社交媒体言论会让 Larry 感到难过。</p><p>我向你保证，Larry 只是试图用他作为世界第七富有的人的巨额财富来帮助他的国家。他参与这次通话是值得钦佩的，应该受到赞扬。自由和公正的选举不是一件小事，不像划船比赛，有时候只要你能赢，搞点小动作也没关系。Larry 用他的钱做了一些被人忽视的伟大事情，比如：为了活得更久，在抗衰老研究上花费了 3.7 亿美元；投资了 10 亿美元帮助 Elon Musk 运营 (?，那时候推特尚未被收购) 推特。所以，我支持 Larry 这个行为。</p><h3>2021 年数据库回顾：性能之争烽烟起，不如低调搞大钱</h3><blockquote><p>英文原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2F2021-databases-retrospective" target="_blank">https://ottertune.com/blog/2021-databases-retrospective</a></p></blockquote><p>对数据库行业来说，2021 年是疯狂的一年，数据库的新人「超越」了老牌厂商，数据库厂商们为基准测试的数字争论不休，还有各种引人注目的融资轮次。好消息是不少，但是收购、破产或重组之类的不好消息，也让一些数据库消失在数据库市场。</p><h4>PostgreSQL 的主导地位</h4><p>开发者的认知已经发生转变：PostgreSQL 成为香饽饽，已是新应用程序的首选。它稳定可靠，功能丰富，且在不断增加新功能。2010 年，PostgreSQL 开发团队采取了更积极的发布计划，每年发布一个新的主要版本，这里要感谢下 Tomas Vondra。顺便提一嘴，PostgreSQL 是开源的。</p><p>如今，对很多系统来说，PostgreSQL 的兼容性是一个显著亮点。这种兼容性是通过支持 PostgreSQL 的 SQL 方言（如 DuckDB）、线协议（如 QuestDB、HyPer）或整个前端（如 Amazon Aurora、YugaByte、Yellowbrick）来实现的。大公司们也跟进了这个趋势。谷歌在 10 月宣布在 Cloud Spanner 中增加了 PostgreSQL 兼容性。还是在 10 月，亚马逊宣布了 Babelfish 功能，将 SQL Server 查询转换成 Aurora PostgreSQL 查询。</p><p>数据库受欢迎程度的一个衡量标准是 DB-Engine 排名。这个排名不是很客观，得分带有一点程度的主观性，但就排名前十的系统结果还是合理的。截至 2021 年 12 月，DB-Engine 排名显示，虽然 PostgreSQL 仍然是第四大流行数据库（仅次于 Oracle、MySQL 和 MSSQL），但它在过去的一年里缩小了与 MSSQL 的差距。</p><p>另一个值得考虑的趋势是 PostgreSQL 在线上社区的提及频率。它给我们提供了人们在数据库中讨论什么的信息。我下载了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reddit.com%2Fr%2Fdatabase%2F" target="_blank">Reddit 上 2021 年在数据库</a>相关的所有评论，并计算了数据库名称的出现频率，自然 PostgreSQL 在其中。我又交叉参考数据库的列表，合并了缩写（例如，Postgres → PostgreSQL，Mongo → MongoDB，ES → Elasticsearch），最后整理出了前 10 个提及最多的 DBMS：</p><pre><code class="language-shell">     dbms      | cnt 
---------------+-----
 PostgreSQL    | 656
 MySQL         | 317
 MongoDB       | 266
 Oracle        | 222
 SQLite        | 213
 Redis         |  88
 Elasticsearch |  70
 Snowflake     |  52
 DGraph        |  46
 Neo4j         |  42
</code></pre><p>自然，这个排名还是不科学，因为我没有对评论进行情感分析。但它清楚地显示了，在过去的一年里，人们提到 Postgres 的次数远超过其他数据系统。经常有开发者发帖询问新应用该用什么 DBMS，线上社区的回应几乎都是 Postgres。</p><h5>Andy 说：PostgreSQL 只会在未来几年变得更好</h5><p>首先，关系数据库系统成为新应用的首选肯定是一件好事。这表明 Ted Codd 在 1970 年代提出的关系模型的持久影响力。其次，PostgreSQL 是一个很棒的数据库系统。同所有 DBMS 一样，它有已知的问题和不足之处。但是有着如此高的关注，PostgreSQL 只会在未来几年变得更好。</p><h4>基准测试之争</h4><p>不同的数据库厂商之间在基准测试结果争议，今年并不少见。数据库厂商们试图证明他们的系统比竞争对手的更快，这种做法可以追溯到 1980 年代末。这也是为什么 TPC（交易处理性能委员会）成立的原因，希望能提供一个中立平台来监管性能比较。但是，随着 TPC 在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fandy_pavlo%2Fstatus%2F1461164543825129481" target="_blank">过去十年的影响力和普及度的减弱</a>，数据库们再次处于数据库基准测试战争的漩涡中。</p><p>让人印象深刻的有三场基准测试争论。</p><h5>Databricks vs Snowflake</h5><p>Databricks 宣布他们新的 Photon SQL 引擎在 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.databricks.com%2Fblog%2F2021%2F11%2F02%2Fdatabricks-sets-official-data-warehousing-performance-record.html" target="_blank">100TB TPC-DS 测试中创造了新的世界纪录</a>。Snowflake 回击说，他们的数据库速度是 Databricks 的两倍，并且 Databricks 运行 Snowflake 的方式不正确。Databricks 反驳道，他们的 SQL 引擎在执行和价格、性能方面都优于 Snowflake。</p><h5>Rockset vs Apache Druid vs ClickHouse</h5><p>ClickHouse 强势声明，与 Druid 和 Rockset 相比，CK 的成本效率方面更出色。但没那么简单：Imply 立即用 Druid 的新版本进行了测试，并声称 Druid 获得了性能胜利。Rockset 也加入了讨论，说它的性能在实时分析上比其他两个要好。</p><h5>ClickHouse vs TimescaleDB</h5><p>感受数据库市场的风向变化，采取老虎式行事风格的 Timescale 加入了性能战争。他们发布了自己的基准测试结果，并借此机会指出 ClickHouse 技术的弱点。在 Hacker News 上，第三方基准测试的相关讨论变得非常火爆。</p><h5>Andy 说：性能之争不值当</h5><p>在先前的数据库基准测试中，已经有太多血淋淋的故事（参考：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.percona.com%2Fblog%2Fis-voltdb-really-as-scalable-as-they-claim%2F" target="_blank">https://www.percona.com/blog/is-voltdb-really-as-scalable-as-they-claim/</a> 、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3D-TIUGC4X2q8%26t%3D418s%EF%BC%89%EF%BC%8C%E6%88%91%E4%B9%9F%E6%9B%BE%E6%98%AF%E5%85%B6%E4%B8%AD%E4%B8%80%E5%91%98%E3%80%82%E4%BD%86%E5%9C%A8%E6%80%A7%E8%83%BD%E7%AB%9E%E4%BA%89%E7%9A%84%E8%B7%AF%E4%B8%8A%EF%BC%8C%E6%88%91%E5%A4%B1%E5%8E%BB%E4%BA%86%E5%A4%AA%E5%A4%9A%EF%BC%9A%E4%B8%8D%E5%8F%AA%E6%98%AF%E6%9C%8B%E5%8F%8B%EF%BC%8C%E8%BF%98%E6%9C%89%E5%A5%B3%E6%9C%8B%E5%8F%8B%E3%80%82%E9%9A%8F%E7%9D%80%E6%97%B6%E9%97%B4%E7%9A%84%E6%B5%81%E9%80%9D%EF%BC%8C%E7%8E%B0%E5%9C%A8%E6%88%91%E8%A7%89%E5%BE%97%E6%80%A7%E8%83%BD%E4%B9%8B%E4%BA%89%E4%B8%8D%E5%80%BC%E5%BE%97%E3%80%82" target="_blank">https://www.youtube.com/watch?v=-TIUGC4X2q8&amp;t=418s），我也曾是其中一员。但在性能竞争的路上，我失去了太多：不只是朋友，还有女朋友。随着时间的流逝，现在我觉得性能之争不值得。</a></p><p><strong>现如今客观地比较数据系统更加困难</strong>，因为云数据库管理系统有很多可移动的部件和可调选项，往往很难确定性能差异的真正原因。真实的应用程序也不仅仅是一遍又一遍地运行相同的查询。在提取、转换和清洗数据时的用户体验，和原始性能数字一样重要。正如我在这篇<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.protocol.com%2Fenterprise%2Fdatabricks-snowflake-data-warehouse-tpc" target="_blank">关于 Databricks 基准测试结果的文章</a>中告诉记者的那样，只有老年人才关心官方的 TPC 数字。</p><h4>大数据搞大钱</h4><p>自 2020 年下半年以来，价值至少 1 亿美元的风险投资轮次数量一直在稳步增加。2020 年有 327 笔这样的大宗交易，几乎占总风险资本交易量的一半。截至 2021 年 1 月，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fexplodingtopics.com%2Fblog%2Fvc-trends" target="_blank">价值 1 亿美元或以上的风险投资回合已经超过 100 轮</a>。</p><p>2021 年，大量投资资金涌向数据库公司。在运营数据库方面，CockroachDB 以 1.6 亿美元的融资轮次领跑筹资排行榜，在 2021 年 12 月它再次融了 2.78 亿美元。Yugabyte 完成了 1.88 亿美元的 C 轮融资。PlanetScale 为他们的 Vitess 托管版融到了 2,000 万美元的 B 轮。相对较老的 NoSQL 簇拥者 DataStax 为他们的 Cassandra 实现了 3,760 万美元的风险融资。</p><p>尽管这些融资金额都很惊人，分析型数据库市场的竞争更为激烈。TileDB 在 2021 年 9 月筹集了一笔未披露金额的资金。Vectorized.io 为他们与 Kafka 兼容的流处理平台筹到 1,500 万美元。StarTree 不再低调，宣布了用来打造商业化 Apache Pinot 的 2,400 万美元融资。有着附加功能的物化视图的 DBMS Materialize 宣布他们在 C 轮获得了 6,000 万美元。Imply 为基于 Apache Druid 的数据库服务筹集了 7,000 万美元。SingleStore 在 2021 年 9 月筹集了 8,000 万美元，使他们朝着 IPO 迈近了一大步。</p><p>2021 年年初，Starburst Data 为其 Trino 系统（前身为 PrestoSQL）筹集了 1 亿美元。Firebolt 是另一家不再低调 DBMS 初创公司，他们发布了基于 ClickHouse 分支的云数仓的 1.27 亿美元融资新闻。一家新公司，ClickHouse, Inc.，融了可怕的 2.5 亿美元，来以 ClickHouse 为主建立新公司，以及从 Yandex 获得使用 ClickHouse 名称的权利。</p><p>不过 2023 年数据库领域融资的最大赢家显然是 Databricks，他们在 2021 年 8 月筹集了高达 16 亿美元的资金，遥遥领先其他数据库。</p><h5>Andy 说：我们正处在数据库的黄金时代</h5><p>我们正处在数据库的黄金时代，有很多优秀的数据库可以选择。投资者们正在寻觅下一个像 Snowflake 一样可以 IPO 的数据库初创公司。2021 年的融资金额比以往数据库初创公司都要大。例如，Snowflake 直到成立五年后的 D 轮融资才有超过 1 亿美元的单轮融资。Starburst 在成立不到三年的时间内就完成了 1 亿美元的融资。现在融资涉及许多因素，比如：Starburst 团队从 TeraData 独立出来之前已经在 Presto 工作多年，我觉得如今数据库的投入资金更多了。</p><h4>消逝的数据库们</h4><p>遗憾的是，2021 年我们也「送别」了一些数据库。</p><h5>ServiceNow 收购了 Swarm64</h5><p>该公司最初是开发在 PostgreSQL 上运行分析工作负载的 FPGA 加速器。后来，他们转向仅使用扩展作为 PostgreSQL 的软件加速器。但他们未能获得关注，尤其是与其他资金充裕的云数仓相比。在 ServiceNow 收购之后，目前仍然没有消息表明 Swarm64 产品是否会继续维护。</p><h5>Splice Machine 破产了</h5><p>Splice 推出了一种混合型（HTAP）DBMS，它结合了 HBase 和 Spark SQL，前者用来处理操作性工作负载，后来用来分析数据。后来，他们推动提供一个用于操作性/实时机器学习应用的平台。但是，由于专业的 OLTP 和 OLAP 系统在市场的主导地位，all-in-one 的混合系统在市场并没有取得什么进展。</p><h5>私募公司收购了 Cloudera</h5><p>在 2010 年到 2020 年这十年的后期，技术重心从 MapReduce 和 Hadoop 技术转移之后，Cloudera 同这些技术一样在云数仓市场上失去了竞争力。尽管项目依旧在开发且在发布新版本，Impala 和 Kudu 的初创团队的大部分人都已经离职。股价也跌破了 2018 年 IPO 的初始价。新投资者能否扭转公司局面，还有待观察。</p><h5>Andy 说：2022 年可能会有更多的数据库公司倒闭</h5><p>看到数据库项目或公司倒闭的新闻，总是让人唏嘘，但这也是数据库行业的残酷现实。开源可能有利于 DBMS 比开发它的厂商活得更久，但事实并非总是如此。由于数据库的复杂性，它需要全职人员持续地修复 bug 和新增功能。将一个只有躯壳（defunct）的 DBMS 的源码权和控制权转移到像 Apache 或是 CNCF 这样的开源软件基金会，并不代表这个项目就会神奇般地复苏。</p><p>例如，RethinkDB 在公司破产后捐给了 Linux 基金会，从 GitHub 上的迹象来看，这个项目已经处于停滞状态（很少有提交，PR 也没有合并）。无独有偶，另一个例子是 DeepDB：公司失败后，他们为代码创建了自己的非营利基金会，但从来没有人在上面工作。我预测，2022 年将有更多无法与主流云厂商、上面提到的那些资金充足的初创公司竞争的数据库公司倒闭。</p><h4>坚持的回报</h4><p>近年来，Oracle 的联合创始人 Larry Ellison 运气不是很好。早在 2015 年，他还是世界上第五富有的人。但世事难料，在 2018 年的亿万富翁排名中他跌到了第十位。</p><p>但这一切在 2021 年 12 月发生了转变，当 Larry 超过谷歌的联合创始人 Larry Page 和 Sergey Brin，再次登上世界第五富有的位置。在 2021 年 12 月的某天，在宣布公司季度盈利超过预期时，Oracle 股票达到过去 20 年单日第二高涨幅，Larry 也在一天之内赚了 160 亿美元。新闻媒体认为，这归功于投资者对 Oracle 成功转向云服务十分有信心。</p><h5>Andy 说：为 Larry 高兴</h5><p>Larry 和我是旧相识，他重返财富榜第五位无疑是一个振奋人心的新闻。当他运气不好，仅仅是世界上第十富有的人时，他可能有些忧郁。但是我很高兴看到他能够从低谷中走出来，回到他应有的排位。</p><hr><p>以上为 Andy 教授三年来的数据库 review。如果你对数据库的发展有自己的看法，记得留言哟~</p><h2>参考资料</h2><ul><li>2023 年数据库回顾原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2F2023-databases-retrospective" target="_blank">https://ottertune.com/blog/2023-databases-retrospective</a></li><li>2022 年数据库回顾原文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2F2022-databases-retrospective" target="_blank">https://ottertune.com/blog/2022-databases-retrospective</a></li><li>2021 年回顾：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fottertune.com%2Fblog%2F2021-databases-retrospective" target="_blank">https://ottertune.com/blog/2021-databases-retrospective</a> &nbsp;</li></ul><p>翻译：GPT-4 校对：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscuss.nebula-graph.com.cn%2Fu%2Fsteam%2Fsummary" target="_blank">清蒸</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fxiaobot.net%2Fp%2Fsystem-thinking" target="_blank">木鸟</a></p><hr><p>感谢你的阅读 (///▽///)</p><blockquote><p>关于 NebulaGraph：它是一款开源的分布式图数据库，自 2019 年开源以来，先后被美团、京东、360 数科、快手、众安金融等多家企业采用，应用在智能推荐、金融风控、数据治理、知识图谱等等应用场景。(^з^)-☆ GitHub 地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvesoft-inc%2Fnebula" target="_blank">https://github.com/vesoft-inc/nebula</a></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 04:15:44 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4169309/blog/11045421</guid>
            <link>https://my.oschina.net/u/4169309/blog/11045421</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报 | 我让 AI 用 C 语言写一个算法；微软三进制 LLM]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><h3><span style="color:#e67e22"><strong># 2024.2.29</strong></span></h3><h2><strong><span style="color:#16a085">今日要点</span></strong></h2><p><strong>OpenSource Daily</strong></p><h3><a href="https://www.oschina.net/news/280842" target="_blank">阿里发布肖像视频生成框架 EMO</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="background-color:#ffffff; color:#333333">来自阿里巴巴的团队发布了音频驱动的肖像视频生成框架 EMO（Emote Portrait Alive），相关论文同步发表于 arXiv。输入一张参考图像和声音音频，该框架能够生成具有丰富面部表情和头部姿势的声音肖像视频。<span>&nbsp;</span></span><img alt="" src="https://oscimg.oschina.net/oscnet/up-c3861be0f8476ff9f2bd3f603f40da0bfb7.png" referrerpolicy="no-referrer"></p><h3><a href="https://www.oschina.net/news/280752/bytedance-megascale" target="_blank">字节跳动打造 MegaScale：用于训练 LLM 的单一 「万卡集群」</a></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">MegaScale 将大语言模型训练扩展到超过 10000 个 GPU，在 12288 个 GPU 上训练 175B LLM 模型时，MegaScale 实现了 55.2% 的模型 FLOP 利用率（MFU），与层内模型并行技术 Megatron-LM 相比，MFU 提高了 1.34 倍。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img src="https://oscimg.oschina.net/oscnet/up-a9ada357531674c7eff4dfbd452a1d5c7ff.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span style="color:#16a085">今日观察</span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-1820b6584b86587277ddac5d427fcd78cbb.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- 微博&nbsp;</span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F7389231930%2FO2p3z9PSo" target="_blank">一个动态类型的幽灵</a></em></u></p><p><img src="https://oscimg.oschina.net/oscnet/up-eca415a4fd4d03ea517620492c70f1f537e.png" referrerpolicy="no-referrer"></p><p><span style="background-color:#ffffff; color:#333333">- </span><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fweibo.com%2F6105753431%2FO2OWtwvX7" target="_blank">量子位</a></em></u></p><hr><h2><span style="color:#16a085"><strong>今日推荐</strong></span></h2><p><img src="https://oscimg.oschina.net/oscnet/up-e6601611a548100f9fc98d57fcc92ceb0f2.png" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>开源之声</strong></span></h2><p><img src="https://oscimg.oschina.net/oscnet/up-6ff6bae6e0f678ef52c422248ccaf72102f.png" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-2baf3fa8669686d11308dec291c8c171c9b.png" referrerpolicy="no-referrer"></p><hr><h2><span style="color:#16a085"><strong>每日项目榜</strong></span></h2><p><strong><span style="background-color:#e67e22">每日 GitHub 精选</span></strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-e9fdc2d06458972c54c34a1682f2338527e.png" referrerpolicy="no-referrer"></p><blockquote><h4><strong><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span></strong><br><u><em><strong><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/qdljicvqiqsshd6/187ZiLwG48lc_CngfQJ1Qxs.pdf" target="_blank">开源日报第 19 期：我让 AI 用 C 语言写一个算法；微软三进制 LLM</a></strong></em></u></h4></blockquote><hr><p><strong>往期回顾</strong></p><ul><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/qdljicvqiqsshd6/187ZiLwG48lc_CngfQJ1Qxs.pdf" target="_blank">开源日报第 018 期：苹果十年造车梦碎；这个开源项目有点...「大胆」</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/7r8dkz3232v4e7a/17_maria_db_v_linux_GoyNoM85IZ.pdf">开源日报第 017 期：MariaDB 消亡史；写代码我有三不沾；V 神建议马斯克用 Linux</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/6typ9w3u98f5mxn/16_1_8_2efTeNfFjN.pdf">开源日报第 016 期：鸿蒙程序员平均月薪超 1 万 8；中美 AI 差距有多大？</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/92n4c9ryegpcq1z/015_sora_KcAkRNX93Y.pdf">开源日报第 015 期：为什么挡不住英伟达；Sora 不靠蛮力</a></li><li><a href="https://report.oschina.net/api/files/jhim80u9qm1ofsw/s7n800w84o6guyv/014_kyezhNxOGD.pdf">开源日报第 014 期：目前的人工智能技术连猫的智能水平都没达到</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC013%E6%9C%9F%EF%BC%9A%E7%AD%89%E5%88%B0%20Sora%20%E5%BC%80%E6%BA%90%E4%BA%86%E7%AB%8B%E5%88%BB%E6%8E%A8%E5%87%BA%E5%B1%9E%E4%BA%8E%E6%88%91%E4%BB%AC%E8%87%AA%E5%B7%B1%E7%9A%84%E5%A4%A7%E6%A8%A1%E5%9E%8B.pdf">开源日报第 013 期：等到 Sora 开源了立刻推出属于我们自己的大模型</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC012%E6%9C%9F%EF%BC%9ASora%20%E7%BB%99%E4%B8%AD%E5%9B%BD%20AI%20%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%9C%9F%E5%AE%9E%E5%8F%98%E5%8C%96%EF%BC%9BDart%203.3%20%E5%8F%91%E5%B8%83.pdf">开源日报第 012 期：Sora 给中国 AI 带来的真实变化；Dart 3.3 发布</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC11%E6%9C%9F%EF%BC%9A%E7%9B%AE%E5%89%8D%E8%BF%98%E6%B2%A1%E6%9C%89%E2%80%9C%E5%A4%A7%E6%A8%A1%E5%9E%8B%E7%89%88Linux%E2%80%9D.pdf">开源日报第 011 期：目前还没有「大模型版 Linux」</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC010%E6%9C%9F%EF%BC%9ATauri%20v2%20%E6%94%AF%E6%8C%81%20Android%20%E5%92%8C%20iOS%EF%BC%8C%E8%B7%A8%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%96%B0%E9%80%89%E6%8B%A9.pdf">开源日报第 010 期：Tauri v2 支持 Android 和 iOS，跨平台开发新选择</a></li><li><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5009%E6%9C%9F%EF%BC%9AVue.js%E8%AF%9E%E7%94%9F10%E5%91%A8%E5%B9%B4%EF%BC%9B%E6%89%8E%E5%85%8B%E4%BC%AF%E6%A0%BC%E8%A7%A3%E9%87%8AMeta%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%BC%80%E6%BA%90%E5%85%B6AI%E6%8A%80%E6%9C%AF.pdf">开源日报第 009 期：Vue.js 诞生 10 周年；扎克伯格解释 Meta 为什么要开源其 AI 技术</a></li><li><a href="https://www.oschina.net/news/277585">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</a></li><li><a href="https://www.oschina.net/news/277415">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></li><li><a href="https://www.oschina.net/news/277214">开源日报第 006 期：选择技术栈一定要选择开源的</a></li><li><a href="http://www.oschina.net/news/277040">开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</a></li><li><a href="https://www.oschina.net/news/276864">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 04:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280981</guid>
            <link>https://www.oschina.net/news/280981</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[黄仁勋：别让你的孩子长大后成为程序员]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">英伟达公司（Nvidia）首席执行官黄仁勋（Jensen Huang）认为，人工智能已经发展到了不再需要优先为全球青年提供计算机科学和编码教育的地步。</span></p><p><span style="color:#000000">他在一次关于人工智能未来的演讲中<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutu.be%2F8Pm2xEViNIo%3Fsi%3DAi7BOUQT9u9b4W6x%26t%3D1094" target="_blank">表示</a>，在过去的 10 年、15 年里，几乎所有站在这样的舞台上的人都会告诉你，让孩子们学习计算机科学至关重要。但现在，情况几乎完全相反。黄仁勋认为，人工智能的所带来的奇迹除了让英伟达的影响力和股价飙升之外</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2024%2F02%2F22%2Fnvidia_q4_fy_2024%2F" target="_blank"><span style="color:#000000">，</span></a><span style="color:#000000">还在于它可以让每个人都成为程序员。</span></p><blockquote><p><span style="color:#000000">"这就是今天这么多人谈论人工智能的原因，因为你第一次可以想象公司里的每个人都是技术专家。技术鸿沟已经完全消除。"</span></p></blockquote><p><img height="281" src="https://oscimg.oschina.net/oscnet/up-21396d6cbaa72a797d1aa181f21795a19eb.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">黄仁勋预测，人工智能将使那些需要综合大量信息的工人变得更有价值，因为他们不需要掌握编码技能，也不需要与开发人员合作。未来的科学家、制造专家和农民将能够自己利用最先进的计算系统。</span></p><p><span style="color:#000000">「你现在拥有一台计算机，它会按照你的指令做事，帮助你实现工作自动化，提高你的生产力，让你更有效率。提高每个人的技能至关重要，而我相信，当我们意识到这台计算机可以完成你指示它做的所有这些事情，而且做起来如此轻松时，这个提高技能的过程将是令人愉悦[和]惊喜的。」</span></p><p><span style="color:#000000">但行业分析师&nbsp;Patrick Moorhead 并不认可黄仁勋的观点，他表示，自己在这 30 多年来一直有听闻「XYZ will kill coding」的相关说法，但事实却是市场上的程序员供给仍然赶不上需求。</span></p><p><span style="color:#000000">Moorhead 还反面例举了低代码/无代码工具、集成开发环境、Swift、Java、Python 甚至编译器等一些曾被认为会 kill coding&nbsp;的东西。并类推预测，人工智能暂时也不会终结编码。「[AI] 将 [coding] 交到了更多人的手中。就像 desktop publishing 并没有扼杀 'creativity'，而是将其进行了扩大。」</span></p><p><span style="color:#000000">因此，不要绝望地认为你的学位毫无用处。即使是"进取号"也需要时不时地请来专门的程序员进行检查，而《星际迷航》中的生成式 AI 绝对比我们现有的能力更强。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 03:08:04 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280966</guid>
            <link>https://www.oschina.net/news/280966</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[GreptimeDB Roadmap 2024]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>自 GreptimeDB 于 2022 年 11 月 15 日正式开源以来，我们持续致力于打造一个云规模、快速、高效的时序数据处理平台。感谢我们团队和社区的共同努力，GreptimeDB 已取得了许多成果。</p><p>当我们全力以赴迈入 2024 时，我们不禁思考：「<strong>下一代时序数据库究竟是什么样的？</strong>」</p><p><strong>迈入 2024 年，我们将拥抱更多创新，GreptimeDB 也将迎来许多关键性的更新，这些关键更新将标志着我们产品能正式被纳入生产环境中使用，为用户呈现与行业内顶尖时序数据库相当的性能基准。</strong></p><p>这篇 Roadmap 揭示了我们团队** 2024 正在努力实现的目标和暂定的版本发布计划**，为希望在 GitHub 上为 GreptimeDB 贡献代码的人提供一些切入点。</p><p>🌟 Roadmap issue on GitHub: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fissues%2F3412" target="_blank">https://github.com/GreptimeTeam/greptimedb/issues/3412</a></p><h2>2024 年主要功能更新</h2><p>2024 年，GreptimeDB 将会计划上线一系列重大升级更新，将极大提升 GreptimeDB 的功能和性能，优化用户体验。</p><p>下面是一些即将到来的亮点：</p><ul><li>Metrics Engine (RFC[1]） 
  <ul><li>Tracking Issue (db#2070[2]）</li></ul></li></ul><p>一种针对可观测场景的全新引擎，它的主要目标是能处理大量的小表，特别适合云原生监控，比如使用 Prometheus 的场景。通过利用合成的宽表，这个新的 Engine 提供指标数据存储和元数据复用的能力，「表」在它之上变得更轻量，可以克服现有 Mito 引擎的表过于重量级的一些限制。</p><ul><li><p>Greptime Flow (RFC[3])</p><ul><li>Tracking Issue (db#3187[4]）</li><li>一个轻量级的可以对 GreptimeDB 数据流进行 Continuous Aggregation 的流计算组件。它可以被嵌入到 GreptimeDB 的 Frontend 中，也可以作为单独的服务独立部署在 GreptimeDB 的集群中。</li><li>一个 Flow Job 可以被以 SQL 的形式被提交：</li></ul><pre><code class="language-sql">	CREATE TASK avg_over_5m WINDOW_SIZE = "5m" AS SELECT avg(value) FROM table WHERE time &gt; now() - 5m GROUP BY time(1m);
</code></pre></li><li><p>Index</p><ul><li><p>Inverted Index (RFC[5]）</p><ul><li>Tracking Issue (db#2705[6]）</li></ul></li><li><p>Smart Index</p><ul><li>比如自动自动监控工作负载和查询性能，并在需要时自动创建相应的索引或者删除某些不被使用的索引。</li></ul></li><li><p>Spatial Index</p><ul><li>支持地理位置信息存储及检索</li></ul></li></ul></li><li><p>GreptimeDB Distributed &amp; Autopilot</p><ul><li>Region Migration 
    <ul><li>提供在 Datanode 之间迁移 region 的能力，实现热点数据迁移，以及负载平衡的水平扩展。</li></ul></li><li>Auto Rebalance Regions 
    <ul><li>基于 Region Migration 实现的自动化负载平衡调度。</li></ul></li></ul></li><li><p>Logs Engine</p><ul><li>针对日志数据的特性实现的存储引擎，并共用大部分 GreptimeDB 的架构和能力，例如 SQL 查询层、数据分片、分布式路由，以及查询、索引和压缩等都可以共享。使得 GreptimeDB 最终能够成为基于多引擎架构同时提供对 Metrics 和 Logs 数据最极致优化的存储层和相同访问体验的单一系统。</li></ul></li></ul><h2>GreptimeDB 版本发布计划</h2><p>下图展示了 GreptimeDB 2024 年的重大版本迭代路线（计划将根据实际发展略微调整）：</p><p><img src="https://oscimg.oschina.net/oscnet/up-0a5559cb78f782e631b158d77497c973a96.png" alt="" referrerpolicy="no-referrer"></p><p>🌟 一键跟踪 GreptimeDB 版本升级的最新进程： <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fmilestones" target="_blank">https://github.com/GreptimeTeam/greptimedb/milestones</a></p><p>GreptimeDB v1.0 将标志着我们向生产就绪版本迈出重要一步，搭载智能索引等进阶功能，重新定义效率与性能的新高标。</p><p>我们诚挚地邀请您持续关注 GreptimeDB，亲自体验 GreptimeDB v1.0 的卓越性能，赋能时序数据管理和分析，挖掘数据背后更大的价值。</p><ul><li><p>v0.7（3 月）</p><ul><li>Region Migration</li><li>Inverted Index</li><li>Metrics Engine</li></ul></li><li><p>v0.8（4 月）</p><ul><li>GreptimeFlow</li></ul></li><li><p>v0.9（6 月）</p><ul><li>Auto Rebalance Regions</li></ul></li><li><p>v1.0（8 月）</p><ul><li>Smart Index</li><li>Spatial Index</li></ul></li><li><p>v1.1（10 月）</p><ul><li>Logs Engine</li></ul></li><li><p>v1.2（12 月）</p><ul><li>Logs Engine</li><li>Data ingestion from popular log collectors</li></ul></li></ul><h2>加入 Greptime 社区</h2><p>如果对上文提及的任何功能感兴趣，欢迎在 GitHub 上 Star GreptimeDB，也欢迎前往 issue 页面，寻找一些有趣的 Good First Issues 进行实践。</p><p>我们不仅欢迎同学们积极参与上述计划中的功能开发，也期待任何意义上的创新想法～扫码添加微信小助手（文末二维码）加入技术交流群，或在 Slack 上加入 GreptimeDB 社区，和我们随时沟通你的反馈和想法。</p><h3>Reference:</h3><p>[1] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fblob%2Fmain%2Fdocs%2Frfcs%2F2023-07-10-metric-engine.md" target="_blank">https://github.com/GreptimeTeam/greptimedb/blob/main/docs/rfcs/2023-07-10-metric-engine.md</a></p><p>[2] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fissues%2F2070" target="_blank">https://github.com/GreptimeTeam/greptimedb/issues/2070</a></p><p>[3] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fblob%2Fmain%2Fdocs%2Frfcs%2F2024-01-17-dataflow-framework.md" target="_blank">https://github.com/GreptimeTeam/greptimedb/blob/main/docs/rfcs/2024-01-17-dataflow-framework.md</a></p><p>[4] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fissues%2F3187" target="_blank">https://github.com/GreptimeTeam/greptimedb/issues/3187</a></p><p>[5] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fblob%2Fmain%2Fdocs%2Frfcs%2F2023-11-03-inverted-index.md" target="_blank">https://github.com/GreptimeTeam/greptimedb/blob/main/docs/rfcs/2023-11-03-inverted-index.md</a></p><p>[6] <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb%2Fissues%2F2705" target="_blank">https://github.com/GreptimeTeam/greptimedb/issues/2705</a></p><p>GreptimeDB 作为开源项目，欢迎对时序数据库、Rust 语言等内容感兴趣的同学们参与贡献和讨论。第一次参与项目的同学推荐先从带有 good first issue 标签的 issue 入手，期待在开源社群里遇见你！</p><p>Star us on GitHub Now: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb" target="_blank">https://github.com/GreptimeTeam/greptimedb</a></p><p>微信搜索 GreptimeDB，关注公众号不错过更多技术干货和福利~</p><h3>关于 Greptime：</h3><p>Greptime 格睿科技致力于为智能汽车、物联网及可观测等产生大量时序数据的领域提供实时、高效的数据存储和分析服务，帮助客户挖掘数据的深层价值。目前主要有以下三款产品：</p><ul><li><p>GreptimeDB 是一款用 Rust 语言编写的时序数据库，具有分布式、开源、云原生和兼容性强等特点，帮助企业实时读写、处理和分析时序数据的同时降低长期存储成本。</p></li><li><p>GreptimeCloud 可以为用户提供全托管的 DBaaS 服务，能够与可观测性、物联网等领域高度结合。</p></li><li><p>GreptimeAI 是为 LLM 应用量身定制的可观测性解决方案。</p></li><li><p>车云一体解决方案是一款深入车企实际业务场景的时序数据库解决方案，解决了企业车辆数据呈几何倍数增长后的实际业务痛点。</p></li></ul><p>GreptimeCloud 和 GreptimeAI 已正式公测，欢迎关注公众号或官网了解最新动态！对企业版 GreptimDB 感兴趣也欢迎联系小助手（微信搜索 greptime 添加小助手）。</p><p>官网：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreptime.cn%2F" target="_blank">https://greptime.cn/</a></p><p>GitHub: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGreptimeTeam%2Fgreptimedb" target="_blank">https://github.com/GreptimeTeam/greptimedb</a></p><p>文档：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.greptime.cn%2F" target="_blank">https://docs.greptime.cn/</a></p><p>Twitter: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FGreptime" target="_blank">https://twitter.com/Greptime</a></p><p>Slack: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.greptime.com%2Fslack" target="_blank">https://www.greptime.com/slack</a></p><p>LinkedIn: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linkedin.com%2Fcompany%2Fgreptime" target="_blank">https://www.linkedin.com/company/greptime</a></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 03:05:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6839317/blog/11045394</guid>
            <link>https://my.oschina.net/u/6839317/blog/11045394</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[经济日报：Sora 远不是人工智能终点]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>经济日报文章指出，无论什么大模型，贴近产业才有未来。人工智能只有赋能千行百业，才能发挥出更大价值。要正视中美在人工智能技术上的差距，但也不必妄自菲薄。中国在制造业、服务业、交通业、健康教育等领域拥有丰富应用场景，加之拥有超大规模市场优势，能为人工智能产业提供更多发展空间。</p><p>大语言模型 ChatGPT 的热潮还未退去，文生视频大模型 Sora 又惊艳亮相，推动通用人工智能技术的「车轮」滚滚向前。ChatGPT 和 Sora 都证明，人工智能所孕育的颠覆性技术和前沿技术，有望成为新一轮科技革命与产业变革的「领头羊」。Sora 远不是人工智能的终点，作为一项使能技术，人工智能还会有更大空间、更多可能。</p><p>Sora 实现了对现实世界的学习、理解和模拟，这是人工智能的精髓所在。此前推出的文生视频产品大多只能生成几秒到十几秒的连贯视频，而 Sora 能将简短的文本描述转化成长达 1 分钟的高清视频，且视频更为真实立体，场景复杂、角色多元，画质卓越、连续稳定。以假乱真的背后，靠的是强大的语言理解能力和深度学习能力。通过学习海量视频，实现生成视频，还能基于视频扩展视频，Sora 延续了 OpenAI 的规模法则，即「大力出奇迹」。正是这种学习模拟能力，使得 Sora 看起来是一个「文生视频」的工具，本质是一个通用的「物理世界模拟器」。</p><p>无论什么大模型，贴近产业才有未来。人工智能的发展历史可以追溯到 20 世纪 50 年代，但早期出现的技术大多着眼于解决虚拟世界的问题，因而没掀起太多波澜。此前，ChatGPT 写诗作画的表现虽令人震撼，但业界很快明确，聚焦特定领域、针对特定场景、解决特定问题的行业大模型才有更多市场机会。此次，Sora 距离产业就更近了些。正如不少人发问，人工智能可以生成视频，电影还需要人拍吗？市场机构预测，Sora 将率先在短视频、广告、互动娱乐、影视制作和媒体等行业中应用，助力企业降低成本、提升效率、优化用户体验。人工智能只有赋能千行百业，才能发挥出更大价值。</p><p>要正视中美在人工智能技术上的差距。Sora 的惊艳登场，也让人工智能产业从业者看清了差距。一直以来，中美两国被视为人工智能发展的第一梯队。从科研成果、投资排名、大学排名等多项指标来看，中国多年来保持全球第二的水平。但类似 ChatGPT、Sora 这样的原始性创新、颠覆性技术却没有出现在中国，差距在哪里？人才、数据、算力被视为关键三要素，也是中国发展人工智能技术亟待突破的瓶颈。</p><p>当然也不必妄自菲薄。要看到，中国仅用了一年，就实现了在通用人工智能领域的迅速追赶，人脸识别、语音识别、自然语言处理等相关技术进步飞快。更要看到，中国具有庞大的互联网用户群体和数据规模，将为人工智能训练提供海量的资源支持。同时，中国在制造业、服务业、交通业、健康教育等领域拥有丰富的应用场景，加之拥有超大规模市场优势，能为人工智能产业提供更多发展空间。近年来，中国在人才、教育、专利产出等方面均有所进步。</p><p>新时代催生新技术，新技术创造新时代。进入数据要素和数字经济时代，人工智能有了更多「原料」和「出路」，具备更大的赋能力量。ChatGPT 也好，Sora 也罢，以人工智能为核心的第四次工业革命正奔涌而来。谁能牵住人工智能这只「领头羊」，谁就能靠颠覆性技术和前沿技术激发更多新质生产力，在重塑全球竞争新格局中掌握关键引擎。</p><p>（作者：黄鑫，来源：经济日报）</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 02:39:39 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280952</guid>
            <link>https://www.oschina.net/news/280952</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[ISS —— 智能自动驾驶系统]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000"><span style="background-color:#ffffff">中国科学院软件研究所可信智能系统团队，在开源自动驾驶（Self-driving System）方面构建了一个开放易用且自主可控的自动驾驶算法开发、测试、仿真与验证平台 </span><span style="background-color:#ffffff">Intelligent Self-driving System (ISS)。</span></span></p><p><span style="color:#000000">ISS 是一个用 Python 和 C++ 编写的模块化框架，旨在构建一个适合研究的可扩展工作空间。该框架将包含用于自动驾驶相关任务的传统和深度学习算法，例如感知、定位、映射、预测、规划和控制。对外部库依赖性最小的模块化设计可以为研究人员评估自动驾驶系统的算法提供透明、干净的工作空间。</span></p><p><strong>架构</strong></p><p><img alt="" height="329" src="https://oscimg.oschina.net/oscnet/up-bf752988659c49e05377c82e311313f3fb6.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">ISS 平台具体实现了以下六大模块功能。</span></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><span style="color:#000000">传感器模块：基于 CARLA 仿真器支持了常用的传感器；</span></li><li><span style="color:#000000">感知模块：基于深度学习方法实现了 2D 检测、2D 语义分割、Bev 地图生成、3D 目标检测等感知任务；</span></li><li><span style="color:#000000">预测模块：实现了匀速运动预测和基于 Motion Transformer 的预测；</span></li><li><span style="color:#000000">定位模块：实现了基于激光雷达、惯性测量单位、全球定位系统等的单传感器定位和基于卡尔曼滤波器等过滤器的多传感器融合定位；</span></li><li><span style="color:#000000">规划模块：实现了基于 Lanelet2 的 FloodFill 路线规划算法、基于规则的行为规划算法、基于 Lattice Planner 和 EM Planner 的运动规划算法；</span></li><li><span style="color:#000000">控制模块：实现了经典的 PID 和 MPC 控制算法。</span></li></ul><p><img height="267" src="https://oscimg.oschina.net/oscnet/up-67074db82f46cb368c7d1d3418d532cc664.png" width="700" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 02:10:39 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/iss</guid>
            <link>https://www.oschina.net/p/iss</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 漏洞扫描工具 afrog]]>
            </title>
            <description>
                <![CDATA[<p>内容可能含有违规信息</p>
]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 02:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/zanbin/afrog</guid>
            <link>https://gitee.com/zanbin/afrog</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | vivo 短视频体验与成本优化实践]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 15px;line-height: 1.6;"><section style="margin: 10px 0% 8px;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="color: rgba(0, 0, 0, 0.5);font-size: 14px;text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">作者：来自 vivo 互联网短视频研发团队</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgb(234, 241, 255);border-style: solid;border-width: 0px 0px 0px 4px;border-color: rgb(48, 97, 207) rgb(48, 97, 207) rgb(48, 97, 207) rgb(21, 151, 239);padding: 10px;"><section style="text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;">本文根据蔡创业、马运杰老师在「2023 vivo 开发者大会"现场演讲内容整理而成。公众号回复【2023 VDC】获取互联网技术分会场议题相关资料。</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: left;" powered-by="xiumi.us"><section style="text-align: justify;line-height: 1.8;padding-right: 5px;padding-left: 5px;color: rgb(160, 160, 160);"><p style="text-wrap: wrap;">在线点播场景，播放体验提升与成本优化是同等重要的两件事，并在部分场景体验优化与成本优化存在一定的互斥关系。vivo 短视频深入分析播放链路的每个环节、并结合大数据统计，探索出了多种的体验优化策略；同时针对成本优化，上线了转码、PCDN、共享闲时带宽等多种策略用于降低带宽成本。基于技术优化和业务发展的要求，vivo 短视频还上线了系统性的监控体系，对播放体验、带宽成本进行了多维度的监控。</p></section></section><section style="margin-right: 0%;margin-bottom: -5px;margin-left: 0%;text-align: right;line-height: 1;font-size: 5px;transform: translate3d(5px, 0px, 0px);" powered-by="xiumi.us"><section style="width: 0px;display: inline-block;vertical-align: top;border-bottom: 0.6em solid rgb(160, 160, 160);border-right: 0.6em solid rgb(160, 160, 160);border-top: 0.6em solid transparent !important;border-left: 0.6em solid transparent !important;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>一、业务介绍</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">vivo 短视频项目的业务架构，从链路上来说，主要包括：</p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">内容生产，主要包括拍摄、导入、剪辑以及作品上传</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: 0px;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">视频处理，包括画质增强、转码、压缩等</span></span></p></li><li><p style="margin-bottom: 10px;"><span style="letter-spacing: 0px;">分发</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">消费，包括预加载、视频播放</span><br></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;">除此之外，我们还设计了若干个子系统，其中比较重要的有：</span></p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">日志收集，主要用于收集用户主动反馈问题。</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: 0px;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">监控统计，主要用于监控线上核心指标，为后续优化提供方向。</span></span></p></li><li><p style="margin-bottom: 10px;"><span style="letter-spacing: 0px;">AB 测试，主要用于新功能验证。</span></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;"></span><span style="letter-spacing: 0.034em;"></span></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">技术架构的最终目的是为了给用户呈现一个有着良好体验的产品，同时又兼顾到开发、运营成本。通过我们产品内置的意见反馈、大数据统计以及用户调研，我们发现/用户对 vivo 短视频的反馈主要集中在播放卡顿、不流畅、画质不清晰上面，从成本方面，我们的主要压力来自于 CDN。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">这些也就是本文的主题，即：如何做到既要播放体验好，又要业务成本低。接下来，将分别介绍一些在播放流畅度以及成本优化相关的探索和实践。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014239" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8ea0d8fa-8c18-4965-8c99-4da736ef9fb9.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>二、体验优化</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.1 播放链路拆解</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">对于在线点播场景来说，影响用户体验的环节主要在视频开播以及播放过程。首先，在起播阶段，应尽力做到首帧零耗时，当用户观看视频时应直接展示视频画面而不是出现等待过程。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">我们对开播过程做了拆解和监控，在无任何优化策略的场景下，网络连接环节耗时占比 30%，下载环节占比 15%， 解封装、解复用环节占比 15%。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">其次，在视频播放过程中，应做到流畅播放不卡顿，这就需要合理的预加载策略、码率控制以及下载策略。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">通过以上的分析，确定了我们 4 个重点<strong>优化方向</strong>：</p></section><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">建连优化，通过连接复用、保活等方式减少在连接环节的耗时</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">分片下载，通过优化下载架构提升下载速度以及成功率</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">预渲染，把耗时的解封装、解复用、解码等环节前置</span></span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">数据预加载，通过预加载减少在下载环节的耗时</span></span></span><span style="letter-spacing: 0.034em;"></span><span style="letter-spacing: 0.034em;"></span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section powered-by="xiumi.us"><p style="text-wrap: wrap;">在此基础上，我们上线了数据监控体系，对开播性能、优化策略、视频基础信息、画质、带宽利用率等方面进行了详细的监控。<span style="letter-spacing: 0.034em;"></span></p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014240" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/82eac228-135d-4fa4-abe9-586bbd9b5c8f.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><section style="font-size: 16px;color: rgb(65, 95, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;">2.2 建连优化</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通过以下 4 个策略来降低建连环节的耗时：</p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">在应用冷启动以及视频播放时，通过连接复用，减少了 DNS 解析、SSL 以及 TCP 连接环节的耗时。</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">在视频播放过程中，用户可能因为某些原因暂停视频，比如把应用切到后台，几分钟后再打开，应用，这种情况下可能出现连接被断开，当恢复播放时需要重新建连，从而导致播放卡顿的问题。通过连接保活，可确保再次播放时视频快速下载、快速，开播。</span><br></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">传统的 local dns 可能会出现解析<span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">DNS</span>劫持、解析缓慢等问题，通过 http dns，可有效应对<span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">DNS</span>劫持以及解析缓慢的问题，为了应对复杂多变的网络环境，我们还通过在线配置的方式，支持多种 dns 解析以及降级策略。</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: 0px;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">当<span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">DNS</span>解析失败时，通过服务端下发的 IP 实现直连，从而提升连接成功率。</span></span><span style="letter-spacing: 0px;"></span></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;">以上就是我们在网络连接环节的一些优化策略，下面介绍我们在视频下载环节的优化。</span><span style="letter-spacing: 0.034em;"></span><span style="letter-spacing: 0.578px;"></span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.578px;"><br></span></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014241" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a0cc293c-560b-45d3-ba4a-68b0b9bd5529.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.3 分片下载</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">为了实现预加载，即在视频播放之前把在线视频提前下载到本地，我们在播放器和 CDN 直接增加了一个本地代理的服务，播放的网络请求都由本地代理服务响应，本地代理服务再向 CDN 发起请求。在弱网下测试，我们发现<strong>卡顿情况比较严重，</strong>主要是存在不必要的网速竞争，并且常规单线程下载效率低于多线程并发下载。为此，我们通过分析协议以及多次实验，最终确定了全新的下载方式，即首个视频起播时使用单线程，后续的视频下载以及预加载都通过多线程分片请求完成。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">同时，把播放器，与本地代理之间的 socket 通信方式修改为直连，避免了 socket 中不必要的读写缓冲区浪费。通过这样的调整，首帧耗时降低 3.8%，播放失败率下降 9%；并且还具备了播放过程中实时切换 cdn 的能力，即在首次开播时使用性能较好的标准 cdn，在缓存较充足时切换为低成本的 cdn。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014242" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1f9748a3-3dc9-4ee5-ab42-4f33dd4ce36d.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.4 预渲染</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通过以下优化策略提升预渲染效果：</p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">应用冷起后，首个视频的开播体验对用户的后续消费有着非常重要的影响，为了提升该的播放体验，在应用启动时预创建 H265 以及 H264 对应的 codec 实例，在开播环节直接使用预创建的解码器，开播耗时可降低 50ms 左右</span>。</p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">播放器的创建环节涉及到较多的流程，比较耗时；另外，常规的每次播放视频都创建一个播放器对象的方式，容易出现因播放器对象泄漏导致的 OOM、ANR 甚至播放失败。基于这两个问题，我们创建了全局复用的播放资源池，每次视频播放时都从资源池中直接获取已经创建好的播放器对象，通过该策略，可有效的降低播放器创建耗时，并且彻底解决了播放器实例泄漏问题，对系统稳定性以及播放成功率都有明显的改善。</span><br></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: 0px;">前面我们介绍了预加载策略，即在视频播放之前提前下载部分数据到本地，视频播放时直接播放本地准备好的缓存，开播速度较优化前有明显的提升；但本地视频开播仍需要嗅探、解封装、解码这些环节，开播耗时仍存在优化空间。因此，我们基于播放器资源池，使用另一个空闲的播放器对象来提前完成下一个即将播放的视频的嗅探、解封装、解码过程，通过这个策略，首帧耗时可降低到 50ms 以内。</span></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;"></span><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014243" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a38440db-0da9-4b97-a294-260882fdf816.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">2.5 预加载策略</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">首先介绍的是固定大小的预加载策略：视频播放时，把后续 5 个视频添加到缓存待下载队列，每个视频使用固定的预加载大小，当前视频的缓存处于高水位时，开始下载缓存队列中视频，当前视频缓存处于低水位即有可能即将发生卡顿时，停止下载缓存队列中的视频。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">这个方案整体实现比较简单，但存在两个<strong>问题</strong>：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">预加载大小是固定的，未能与视频码率、时长关联，当视频码率、时长发生变化时，可能会出现缓存不足或者缓存浪费。</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">对于一条用户会重度消费的视频，应提升预加载大小，从而提升用户在播放过程中的流畅度。</span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">为了解决以上两个问题，我们上线了动态预加载策略。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014244" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1ddf9c5c-094d-4e41-9456-0ba296a86ced.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">动态预加载就是在固定预加载的基础上，做了如下调整：</p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">缓存分级，把固定预加载策略中的单一缓存调整为 3 个不同优先级的缓存，优先级高的缓存较小，优先下载，优先级较低的缓存较大，下载优先级较低；一级缓存下载结束后开始下载二级缓存，二级缓存下载完成后再下载三级缓存。</span><br></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">缓存大小不再固定，修改为根据视频时长和预加载时长动态计算当用户快速滑动时，一般情况下会命中一级缓存，确保视频可以顺利开播；当用户在列表中重度消费时，后续的视频将有充足的时间完成三级缓存的下载。</span></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">动态预加载策略上线后，首帧耗时降低了 2.3%，卡顿率降低了 19.5%，当然，这个策略也存在的明显的问题，即体验提升了，但带宽成本也提升了。我们需要思考，如何在不增加成本的前提下提升体验。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014245" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/52fd5b71-8133-4fb0-a817-b40a5b2aa709.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">我们来看一个示例：在一个视频列表中，有些视频用户喜欢观看，完播率较高，有些视频用户不感兴趣，会快速滑过。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">也就是说，只有深度消费的视频，才真正的需要二级和三级缓存，快滑的视频能快速开播即可。基于这样的一个普遍性的案例，我们结合视频的观看时长调整了预加载策略。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">现在介绍的是智能预加载策略，整体流程如下：</p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">首先，在云端基于视频基础特征比如码率、时长、清晰度，网络以及时段、历史行为等特征，使用深度神经网络创建、训练模型，用于预测一个视频用户会深度消费还是快速滑过。</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">其次，模型导出、转换之后，部署在客户端，在视频开播之前预测消费深度。</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="font-size: 15px;letter-spacing: normal;text-wrap: wrap;">最后，播放器仍保留之前的一级缓存，并作为最高优先级进行下载；所有的一级缓存都下载完成后，根据预测的消费深度调整二级缓存的大小，如果该条视频会重度消费，则开启二级缓存，否则放弃二级缓存。</span><span style="letter-spacing: 0px;"></span><span style="letter-spacing: 0.034em;"></span></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">这个方案目前还在实验中，后续我们也将持续探索机器学习在播放上的其他应用。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014246" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/b56a7ea3-b204-4f81-8048-870bb65f9ea5.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">体验优化的效果需要被准确、客观的衡量，并且能准确反映用户的真实体验。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">在起播环节，我们设计了两个 P0 指标，即首帧耗时和失败率，同时，我们也设计了若干个 p1 指标，包括缓存大小、缓存命中率、预渲染命中率，下载速度等，这些指标的波动直接会影响到 P0 指标。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">在视频播放环节，我们设计了卡顿率、卡顿时长以及 seek 卡顿等 P0 指标，同时，设计了百秒卡顿时长、百秒卡顿次数、缓存利用率等 p1 指标作为对 P0 指标的补充。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">基于以上指标以及视频基础信息、预加载预渲染策略信息，我们设计并上线了分层监控系统，自上往下共分为<strong>4 个层级</strong>：</p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="letter-spacing: 0.034em;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);"><strong>P0 指标</strong>：</span><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">包括开播耗时、卡顿率等，这些是我们最为关注的核心指标</span></span><span style="letter-spacing: 0.034em;"></span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);letter-spacing: 0.034em;"><strong>P1 指标</strong>：</span><span style="font-size: 15px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);letter-spacing: 0.034em;">作为对 P0 指标拆解和补充</span><br></p></li><li><p style="margin-bottom: 10px;"><span style="letter-spacing: 0.034em;"><strong>策略指标</strong>：</span><span style="letter-spacing: 0.034em;">包</span><span style="letter-spacing: 0.034em;">括预加载开启率、命中率、预渲染开启率、命中率，这两个策略对播放体验的影响比较明显</span></p></li><li><p style="margin-bottom: 10px;"><span style="letter-spacing: 0.034em;"></span><span style="letter-spacing: 0.034em;">最后一层是<strong>视频基础信息</strong>，包括码率、时长、画质分等，这些指标也会影响到核心性能指标</span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014247" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/fa9802aa-65d7-4e53-96bb-00a0fc2ed9f6.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>三、成本优化</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">前面介绍了我们短视频在播放体验方面所做的一些努力，经过前述的这些优化，目前我们短视频的播放流畅度已经达到行业内的一流水平。而随着业务的不断发展，播放的成本也随之水涨船高，成为业务必须要应对处理的首要问题，接下来将和大家分享下我们在播放成本优化方面的一些思考及实践方案。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.1 成本拆解</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">首先，我们先了解下播放成本包含了哪些成本。它主要是由 CDN 成本、存储成本以及进行转码压缩等所需要的计算成本组成，而这里面 CDN 成本占了总成本的 80% 左右，是最大的一个成本来源，所以，接下来我们的分享主要是围绕如何降低 CDN 成本展开。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">要知道怎么进行 CDN 成本的降低，就需要了解哪些是影响 CDN 成本的重要因素。如下图所示：</p><p style="text-wrap: wrap;"><br></p></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014248" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/f9d33eef-06c8-452f-a6d6-4303bcd40bc5.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-align: center;"><br></p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li style="font-size: 15px;"><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: normal;text-wrap: wrap;font-size: 15px;">第一层拆解，CDN 成本 = 单价 x 用量，这个相信大家都能很好理解。</span></p></li><li><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: 0px;">第二层的拆解，正常情况下，用量=用户实际播放的视频时长乘以视频的码率，而前面我们也介绍过，为了提升视频播放的起播速度，降低播放过程中的卡顿率，我们会对视频进行预加载及预缓冲，那这部分量可能最后用户并没有产生播放行为，也就造成了流量的浪费。因此我们引出了流量利用率的概念，在后续还会详细介绍。这里我们需要知道的是 CDN 实际计费的用量=用户播放的时长 x 码率除以流量利用率。</span></p></li></ul></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;"></span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;">那现在有 4 个最基础的因素会影响成本，分别是单价、时长、码率、流量利用率，其中时长是业务追求的增长目标，无法用以降本，因此其他三个因素就成了我们重点</span><strong style="letter-spacing: 0.034em;">优化的方向</strong><span style="letter-spacing: 0.034em;">，它们分别是。</span></p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">寻找方案降低单价</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">对视频码率进行极致压缩</span><br></p></li><li><p><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);"><span style="font-size: 15px;letter-spacing: 0.51px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">对利用率进行治理提升流量利用率</span></span><span style="letter-spacing: 0.034em;"></span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;"><br></span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="letter-spacing: 0.034em;">在正式介绍我们的降本方案之前，我们还需要先思考一个问题：</span><span style="letter-spacing: 0.034em;">成本的降低往往带来的是服务质量的降低，我们需要如何才能在保证播放体验的同时，降低播放成本，也就是大家经常讨论的，如何做到体验与成本的非零和博弈。</span><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.2 单价降低</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">本小节将为大家介绍我们的第一个降本方向，CDN 单价的降低。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.1 引入 PCDN</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">我们的第一个方案是引入单价更低的 PCDN 技术，PCDN 是目前一种新兴的内容分发网络，其主要是利用路由器、小盒子等廉价的边缘设备代替标准 CDN 的边缘节点，由于接入设备及接入网络更加廉价，故而成本相对于标准 CDN，要低很多。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">其网络架构如下图所示，APP 通过 SDK 访问 PCDN 的边缘节点，如果内容热度值低，PCDN 节点中没有该视频的缓存，则返回 302 状态码给到客户端，客户端再去访问标准 CDN 获取资源，当视频热度达到一定阈值时，PCDN 会去标准 CDN 上回源获取对应的视频资源向客户端提供服务。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014249" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4f4dc9b1-00a6-422a-b208-ee60ec9c07a4.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><section powered-by="xiumi.us"><p style="text-wrap: wrap;">从这里我们可以看到，PCDN 的节点性能相比标准 CDN 更差，而访问时会有一定几率进行 302 跳转，增加了链路的耗时，所以必然会对视频播放时的起播速度和卡顿率造成较大的影响。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">对此，我们制定了多个优化措施，来降低播放体验的受损情况，在成本和体验之间进行平衡。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（1）播放器策略优化</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014250" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1bc1e001-72df-409c-81a8-84528349d7e5.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-align: left;"><br></p><section style="font-size: 15px;letter-spacing: 5px;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;border-width: 1px;border-style: solid;border-color: rgb(160, 160, 160);padding: 10px;"><section style="text-align: justify;letter-spacing: 0px;" powered-by="xiumi.us"><p style="margin-bottom: 10px;text-wrap: wrap;"><span style="letter-spacing: 0px;">第一个优化点是通过播放缓冲水位去控制是否走 PCDN，在视频起播时使用高性能的标准 CDN 进行分片下载，而只有当前视频的缓冲数据达到阈值后，才使用 PCDN 进行下载，利用缓冲视频的时长，可以有效抵消 PCDN 的链路耗时增加。</span></p><p style="text-wrap: wrap;">第二个优化点是，在视频起播阶段发送 1 字节的探测包到 PCDN 节点，以此来确定 PCDN 节点上是否存在对应的视频内容，不存在时则后续分片都从标准 CDN 拉取，存在的话后续再走 PCDN，这样可以大大减少 302 跳转发生的概率。<span style="letter-spacing: 0.034em;"></span></p></section></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">经过以上两个优化后，引入 PCDN 对我们的播放体验已基本不会产生负面影响了。以此，我们达到了保证播放体验的同时，降低了 CDN 成本的目的。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>（2）业务策略优化</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014251" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/6606e598-0a57-477f-9f15-b7acf57db7be.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">由于 PCDN 节点服务的主要是热点视频，因此我们对热点分发的场景进行了梳理，对这些场景用到的视频提前预热到边缘节点。由于做了预热，PCDN 节点提前缓存了相关视频，出现 302 跳转的概率进一步减少，因此我们可以适当降低缓冲水位的阈值，提前请求到 PCDN 节点。基于此方案，我们做了相关的 A/B 实验，实验的结果是，我们在保证 QoE 不变的情况下，提升了 PCDN 的分享率，即，会有更多的流量走到 PCDN 节点上，进一步降低了 CDN 成本。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">当前我们 PCDN 分享率在 46% 左右，在探测成功后，只有 1% 以内的流量会出现 302 跳转，基本可以忽略不计。通过线上长期实验组的观测，卡顿率和起播耗时上下波动，无显著负向。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">以上是我们进行单价降低的第一个方案，接入 PCDN，接下来我们看下<strong>另外一个方案</strong>。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong>3.2.2 共享闲时带宽</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">行业内 CDN 计费的方式有多种，包括流量计费，峰值带宽计费等，对于峰值带宽计费，是以每天的带宽最高点作为计费值的，这种计费方式，对于持续稳定的流量会更加合适。而我们短视频是一个用户实时消费视频的应用，访问热度会有明显的波峰和波谷，比如中午大家休息的时候以及下班的时候会有更多的时间去看视频，而夜里睡觉时，业务的流量则相对较低。正常情况下我们 CDN 的带宽波形如下图所示，可以看到闲时我们的带宽是很低的，造成了很大的浪费。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014252" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a348eed2-0de7-4c7d-93c7-dd3b7f7d6f8e.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">针对此种情况，我们和公司内其他业务进行合作，引入了他们的流量进行填谷，共享了我们的闲时带宽。可以看到填谷后，蓝色区域的比重明显增加了很多，其他业务会针对这部分流量进行成本分担，因此相当于降低了我们的成本单价。通过上述的 PCDN 及共享闲时带宽，CDN 的单价得到了大幅的降低，从而有效节省了 CDN 成本，是我们进行降本的重要手段。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.3 极致压缩</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">接下来，是我们降本的第二个方向，对视频进行极致的压缩从而降低视频的码率。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">我们当下遇到的<strong>问题</strong>是：一个视频的清晰度是和码率强相关的，而为了达到相同的清晰度，不同内容场景的视频所需的码率是不一样的。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">先前，为了保证用户的播放体验，减少低质视频的出现，我们设置的码率标准较高，导致很多视频没有得到有效的压缩。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">在解决这些问题时，我们面临着这样几个<strong>困难</strong>：<span style="text-align: left;background-color: rgb(247, 247, 247);letter-spacing: 0.034em;"></span></p></section><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">第一是内容库中有千万量级的视频内容，内容量非常大；</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">第二是这些视频场景非常复杂，千变万化；</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">第三则是这些原始视频的质量也是参差不齐的。</span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">为了能够在这样的情况下进行成本优化，我们需要根据视频的内容特征，自适应调整编码参数，在保证视频清晰度的前提下，对视频进行极致压缩。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">接下来，来看下我们是如何做的。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014253" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/d04b1b92-1b18-40eb-a3c0-f4ae4b708ebf.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">首先我们基于神经网络，自研了一套内容自适应编码算法。算法模型的训练过程如下：首先第一步我们会根据内容库中的场景标签，从内容库中收集足够大视频数据集作为模型的训练数据。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">然后对训练集中的视频进行不同比例的压缩转码作为 Ground Truth，再对压缩后的视频提取特征，这些特征包括视频的复杂度特征、码率信息、画质特征、码流特征等；最后利用上述特征，进行神经网络拟合训练，得到视频质量与压缩率的关系模型，该模型可以预测压缩比例和视频压缩质量之间的对应关系曲线。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014254" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/0a9f1527-60c8-47b1-ad6f-f89ab158b219.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us">上图展示的是我们模型的预测效果，白色弧线是视频在经过不同比例压缩后得到的 VMAF 曲线，是实际的 Ground Truth，而蓝色曲线则是我们模型的预测曲线，可以看到预测曲线和 Ground Truth 非常接近。于是，我们便可以通过预测曲线，在保证清晰度一致的情况下，确定不同视频需要的编码参数，达到内容自适应编码的目的。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">最后再来看下我们极致压缩的<strong>完整流程</strong>：</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014255" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/522363c3-5cae-4372-8314-f955590d7e39.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-align: center;"><br></p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">首先第一步是对视频进行前置增强处理，这一步处理的目的是提升原始视频的画质，从而可以抵消一部分视频编码带来的损伤，另外去除噪声等退化也有利于压缩过程中降低视频的码率。</span></span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">在经过增强修复后，需要对视频进行场景划分，一个视频可能包含多个场景，这些场景所需要的编码参数也不一样，通常我们称之为 Per-title 分场景编码，更细粒度的选择不同的编码参数对视频进行压缩。</span><br></p></li><li><p style="margin-bottom: 10px;"><span style="letter-spacing: 0.034em;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">第三步就是对每一个场景的视频提取视频特征，通过我们的自适应模型决策出最佳的编码参数，进行编码合成，最后得到输出视频。</span></span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通过这几步的处理，我们的压缩率相比之前有了大幅度的降低，通过线上的数据统计，我们的平均压缩率从 60% 降低到了 40%，可以看到这个优化效果非常明显，以上就是我们极致压缩的方案，通过进一步压缩码率，降低我们的 CDN 成本。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><span style="font-size: 16px;color: rgb(65, 95, 255);">3.4 利用率治理</span></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;">我们的最后一个优化方向是<strong>利用率治理</strong>。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">先解释下什么是流量利用率：在播放过程中，为了提升播放的流畅度，需要提前去缓存当前视频以及预加载后面的视频，同时网络层也会有 socket 的 buffer，用户如果使用不到这些流量，那就会产生流量浪费，这些浪费的流量与用户实际播放的流量相加，就是 CDN 实际产生的流量，流量利用率就等于实际播放的流量除以 CDN 实际产生的流量。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">由此可见，在整个播放链路上，都存在流量的浪费，而我们希望通过利用率的治理，控制并减少这些浪费的产生。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014256" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/cff9cfd6-1435-497c-a723-b3515a772eb3.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>3.4.1 利用率漏斗建设</strong></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">我们<strong>需要治理的第一个问题是：在版本迭代的过程中，播放的策略也是在不断优化的</strong>，比如我们可能为了体验着想，增加了预加载的数量，或者做了多级预加载。但是在做这些优化的时候，我们无法有效的衡量每个优化究竟对 CDN 成本带来了多大的变化，会不会增加流量的浪费。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">对于这个问题，我们的<strong>解决方案是，针对每个版本，建立了如下图所示利用率漏斗，并加入到了灰度报告中</strong>，严格监控每个版本出现的流量浪费情况，防止播放策略优化导致 CDN 成本大幅增加。</p><p style="text-wrap: wrap;"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014257" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/f37b59a4-6ad3-41e8-95cf-2061d6c352d6.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>3.4.2 利用率提升</strong></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">我们需要<strong>治理的第二个问题是：对于预加载或者预缓冲等策略，我们都会设置一个上限阈值，保证体验的同时防止消耗过多流量</strong>，但是这个阈值一直都是以我们工程师的经验设置的，无法确切的知道这个阈值是否合理。</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">针对这个问题，我们的<strong>治理方案是，通过前述建立的漏斗数据，针对阈值进行线上 A/B 实验，通过收集不同阈值下体验和成本的变化数据，找到投产比拐点，从而确定最优阈值。</strong></p><p style="text-wrap: wrap;"><strong><br></strong></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014258" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3040108c-b836-4af6-b00f-3dce1a577f13.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;"><strong>3.4.3 治理效果</strong></p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">这边展示了我们治理后的<strong>效果</strong>。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（1）首先在治理前，如下图左侧显示，有两个突刺点，这是因为某些版本优化时，没有识别到成本的增长量级，并且在灰度期间无法明显看出成本的变化，及时止损，最终导致我们的 CDN 带宽大幅增长。而<strong>在治理后，可以看到，我们的带宽变得平稳很多，不再出现突刺点，带宽突增问题得到了有效。</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">（2）其次，如下图右侧所示，在治理前，我们的流量利用率在 60% 左右，而在<strong>治理后，我们在保证体验不受损的情况下，将利用率提升到了 70%，从而节省了相应的 CDN 成本。</strong></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">通过对流量利用率的监控和治理，我们可以清晰的掌控播放链路中每个节点可能产生的流量及带宽情况，找到成本优化点，降低我们的 CDN 成本。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014259" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/262d7e8e-4f95-4cc3-b92e-50cb073caf92.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding: 3px;display: inline-block;border-bottom: 1px solid rgb(65, 94, 255);font-size: 17px;color: rgb(65, 94, 255);"><p>四、总结&amp;展望</p></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">如下图所示，可以看到我们的优化结合了大数据、A/B 实验、AI 技术等，通过对这些技术的应用，我们进行了播放体验和播放成本两个方面的优化。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014261" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8132c4ef-b62c-40ec-9220-6c14ab017155.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="margin-bottom: -2.25em;margin-right: 5px;background-color: rgb(247, 247, 247);"><section style="padding: 10px;margin-bottom: 5px;" powered-by="xiumi.us"><section style="text-align: left;"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">首先是对播放体验优化，我们依次从网络层、播放层、应用层进行了相关的策略优化，这里面主要包括分片下载、预加载/预渲染、分级缓存等策略。</span></p></li><li><p style="margin-bottom: 10px;"><span style="font-size: 15px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(247, 247, 247);">其次是播放成本的优化，我们分别从单价、码率、利用率等方向进行了降本，这里面主要包括 PCDN、极致压缩、利用率治理等方案。</span></p></li></ul></section></section></section><section style="margin-left: auto;width: 2.25em;height: 2.25em;border-right: 5px solid transparent;border-bottom: 5px solid transparent;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">这些优化方案，是我们短视频团队长时间的实践积累，帮助我们在体验和成本之间做到了双赢。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100014262" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/6ed217ea-d4b6-4788-a634-9d9cc5fb3fa1.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us">最后是我们未来的一些展望，我们会持续聚焦音视频前沿技术，在压缩编码方面，我们会去研究引入 H266 技术，进一步压缩视频的码率，而在增强方面，我们会对端侧增强技术进行预研，通过端云协同增强，进一步做到降本增效。</p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="margin-right: 0%;margin-bottom: 20px;margin-left: 0%;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section><section style="display: inline-block;vertical-align: middle;width: 20%;align-self: center;flex: 0 0 auto;"><section style="text-align: center;color: rgb(45, 66, 87);font-size: 11px;" powered-by="xiumi.us"><p>END</p></section></section><section style="display: inline-block;vertical-align: middle;width: 40%;align-self: center;flex: 0 0 auto;"><section style="margin-top: 0.5em;margin-bottom: 0.5em;" powered-by="xiumi.us"><section style="border-top: 1px dotted rgb(90, 98, 114);"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section><section style="margin-top: 10px;margin-bottom: 10px;text-align: left;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;text-align: center;"><span style="display: inline-block;padding: 0.3em 0.5em;border-radius: 0.5em;background-color: rgb(65, 94, 255);color: rgb(255, 255, 255);" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:161.title1"><p>猜你喜欢<span style="font-size: 14px;text-align: left;background-color: rgb(239, 239, 239);color: rgba(0, 0, 0, 0.9);letter-spacing: 0.034em;"></span></p></span></section><section style="border-width: 1px;border-style: solid;border-color: transparent;margin-top: -1em;padding: 20px 10px 10px;background-color: rgb(239, 239, 239);text-align: center;"><section style="font-size: 14px;text-align: left;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p><span style="font-size: 14px;letter-spacing: 0.578px;text-align: left;text-wrap: wrap;background-color: rgb(239, 239, 239);"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247498152%26idx%3D1%26sn%3Dedd66643831717629aad7aff83408d7b%26chksm%3Debdb893adcac002c6e3e83ce965f42a145933e65e0b6cda36b4dba5ca74b695d24c75ab1d8fb%26scene%3D21%23wechat_redirect" textvalue="vivo 海量微服务架构最新实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">vivo 海量微服务架构最新实践</a></span><br></p></li><li><p><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247498156%26idx%3D1%26sn%3D38a4f19cd0dd7ee722058fb93d24d9cd%26chksm%3Debdb893edcac00281d3dbdaaff9bf97849bc8c474718cc3a4897f8bc6591ac1d048d6fca32f0%26scene%3D21%23wechat_redirect" textvalue="vivo 智能活动中台-悟空系统建设之路" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2">vivo 智能活动中台-悟空系统建设之路</a></p></li><li><p><span style="letter-spacing: 0.034em;"></span><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4NjY4MTU5Nw%3D%3D%26mid%3D2247498161%26idx%3D1%26sn%3De2b373cf68dacf452f9a72914ff5d572%26chksm%3Debdb8923dcac00350b0fc183811faca38b835da3770032ff5aac641e3c43903fb520feb2415a%26scene%3D21%23wechat_redirect" textvalue="vivo 海量基础数据计算架构应用实践" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2"><span style="letter-spacing: 0.034em;">v</span><span style="letter-spacing: 0.034em;">ivo 海量基础数据计算架构应用实践</span></a><span style="letter-spacing: 0.034em;"></span></p></li></ul></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzI4NjY4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/4g5IMGibSxt45QXJZicZ9gaNU2mRSlvqhQd94MJ7oQh4QFj1ibPV66xnUiaKoicSatwaGXepL5sBDSDLEckicX1ttibHg/0?wx_fmt=png" data-nickname="vivo 互联网技术" data-alias="vivoVMIC" data-signature="分享 vivo 互联网技术干货与沙龙活动，推荐最新行业动态与热门会议。" data-from="0" data-is_biz_ban="0"></mp-common-profile></section></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - vivo 互联网技术（vivoVMIC）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 02:00:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/vivotech/blog/11044523</guid>
            <link>https://my.oschina.net/vivotech/blog/11044523</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[浪潮 KaiwuDB 拿下「物联之星」双项殊荣]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify"><span style="color:#666666 !important">2 月 27 日，「物联之星」2023 中国物联网行业年度榜单正式发布。浪潮&nbsp;</span><strong>KaiwuDB 拿下「2023 年度中国物联网行业创新产品」，KaiwuDB CTO 魏可伟再获「2023 年度中国物联网行业卓越人物」称号</strong><span style="color:#666666 !important">。</span></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">作为国内物联网行业最具影响力的评选活动之一，本届「物联之星」吸引到近 500 家企业携优秀成绩、创新产品、标杆项目竞相角逐。浪潮 KaiwuDB 凭借在技术创新、场景渗透、产业服务方面的突出贡献成功入选两大重要榜单。</p><p style="color:#666666 !important; margin-left:0px; margin-right:0px; text-align:center">&nbsp;</p><p style="color:#666666 !important; margin-left:0px; margin-right:0px; text-align:center"><img alt="11" src="https://www.inspur.com/lcjtww/445068/445237/2818531/2024022815215143620.png" referrerpolicy="no-referrer"></p><p style="color:#666666 !important; margin-left:0px; margin-right:0px">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">浪潮 KaiwuDB 作为一款分布式多模数据库，持续努力面向 AIoT 场景提供以时序处理能力为一大核心，结合分析、原生 AI 和云边端协同能力的数据智能产品和服务。依托「就地计算」为代表的创新技术，浪潮 KaiwuDB 在收集、处理庞大复杂数据量的同时满足计算端的性能需求，<strong>实现毫秒级的实时数据处理及分析，多维度、深层次挖掘数据结论</strong>，帮助企业更好地消费数据，指导生产管理决策，降本增效。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">2023 年，基于对 AIoT 垂直场景需求的深入探索，浪潮 KaiwuDB 先后推出<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0OTQyNjUxNA%3D%3D%26mid%3D2247490996%26idx%3D1%26sn%3D12700a8c79789945ed389c3fc28d3a7c%26chksm%3Dc359dd89f42e549ff886aaa9b30d2dcba44b99a2d2c1c7fb7a776de6142e4f5ecda4ce919d88%26scene%3D21%23wechat_redirect" target="_blank">工业物联网场景解决方案</a>、<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0OTQyNjUxNA%3D%3D%26mid%3D2247489703%26idx%3D1%26sn%3D45a035dea0474e38ec65caca1aefae9e%26chksm%3Dc359d89af42e518c8ac7eb0da601e8d1e0611fe06add0ed9da374edfb670a5d85cfeb8d7a90c%26scene%3D21%23wechat_redirect" target="_blank">离散制造业解决方案</a>、<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0OTQyNjUxNA%3D%3D%26mid%3D2247488879%26idx%3D1%26sn%3D069f1f994cd525844eab732d5386e1c9%26chksm%3Dc359d552f42e5c44d17fb513cbd204731062bbfedc1f236d5bc45a2724bbd49f7741dfd9801c%26scene%3D21%23wechat_redirect" target="_blank">数字能源解决方案</a>等，并在<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0OTQyNjUxNA%3D%3D%26mid%3D2247489348%26idx%3D1%26sn%3Daf607bf9cd1571eea89ff2ed56d7663d%26scene%3D21%23wechat_redirect" target="_blank">工业互联网大数据中心</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0OTQyNjUxNA%3D%3D%26mid%3D2247491938%26idx%3D1%26sn%3D0f0b8fb6efa3e1452e225d9b230cf6c5%26scene%3D21%23wechat_redirect" target="_blank">国网山东综能</a>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzk0OTQyNjUxNA%3D%3D%26mid%3D2247491603%26idx%3D1%26sn%3D6988067df0fe5a3d524208f58f71e3e1%26scene%3D21%23wechat_redirect" target="_blank">奇瑞青岛</a>的重点系统落地部署，大幅提升系统数据实时处理和数据价值挖掘的能力，实现以数据驱动的政府治理效率、企业生产运营效率的有质提升。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:justify">未来，浪潮 KaiwuDB 也将持续挖掘物联网衍生的场景需求，助力企业实现管理精细化、决策科学化和服务高效化，以领先的数据运管能力拥抱物联网时代。</p></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 01 Mar 2024 01:32:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/280932</guid>
            <link>https://www.oschina.net/news/280932</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
