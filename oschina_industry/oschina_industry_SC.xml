<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Sun, 04 Feb 2024 04:08:17 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[完蛋！我把 AI 喂吐了！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong>当我们用 RAG 构建一个知识库问答应用的时候，总是希望知识库里面灌的数据越多，问答的效果越好，事实真是如此吗？这篇文章给大家答案。</strong></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-dfdd57c27b133d44a1db4b25502172f74c3.png" referrerpolicy="no-referrer"></p><p><strong>引言</strong><br> 在人工智能问答系统的发展中，RAG（Retrieval-Augmented Generation）技术以其独特的检索增强生成方式，为减少大模型幻觉开辟了新的天地。然而，在实际落地过程中有一个很大的疑问：RAG 系统，数据越多效果越好吗？本文将深入分析数据量如何影响 RAG 系统的问答效果，并讨论如何优化这一系统以适应不断增长的海量数据。</p><p><strong>什么是 RAG？</strong><br> 大型语言模型（LLMs）已经展现出了强大的能力，但在实际应用中仍面临很多挑战，如模型幻觉、知识更新缓慢以及答案缺乏可信度等。LLM 虽然是在非常庞大的数据集上训练的，但并不是在您的数据上训练的。检索增强生成（RAG）通过将您的数据链接到 LLMs 来解决这个问题。</p><p>RAG 是一种将知识检索与生成模型相结合的技术，可以提高问答系统的准确性和相关性。它通过从外部知识源中动态检索信息，并将检索到的数据作为参考来组织答案，从而能有效缓解 LLM 中存在的幻觉问题。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-21528f3b3673b9c485e34ff04483f4fa81d.png" referrerpolicy="no-referrer"></p><p style="text-align:center">RAG 系统</p><p>RAG 的工作流程主要包含三个模块：</p><ul><li><strong>索引（indexing）</strong>：文本索引的构建包括以下步骤：文档解析、文本分块、Embedding 向量化和创建索引。先将不同格式的原始文件解析转换为纯文本，再把文本切分成较小的文本块。通过 Embedding 为每一个文本块生成一个向量表示，用于计算文本向量和问题向量之间的相似度。创建索引将原始文本块和 Embedding 向量以键值对的形式存储，以便将来进行快速和频繁的搜索。</li><li><strong>检索（Retrieval）</strong>：使用 Embedding 模型将用户输入问题转换为向量，计算问题的 Embedding 向量和语料库中文本块 Embedding 向量之间的相似度，选择相似度最高的前 K 个文档块作为当前问题的增强上下文信息。</li><li><strong>生成（Generation）</strong>：将检索得到的前 K 个文本块和用户问题一起送进大模型，让大模型基于给定的文本块来回答用户的问题。</li></ul><p>有关 RAG 更全面的信息请参阅综述论文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2312.10997.pdf" target="_blank">Retrieval-Augmented Generation for Large Language Models: A Survey</a>，不想阅读原始英文论文？<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fread.youdao.com%2F%23%2Fhome" target="_blank">使用「有道速读」快速了解什么是 RAG？</a></p><p><strong>RAG 系统：数据越多，效果越好吗？</strong><br> 从宏观层面来看，RAG 包含两个核心的要素：数据和系统。RAG 的应用场景非常多，包括文档助手，智能客服机器人，领域/行业知识库问答等。不同的应用场景优化的侧重点可能有所差异。</p><p>对于文档助手这类应用来说，数据是已知的，我就上传几篇文档，就针对这些文档来问问题。我们几乎不用关注数据侧的事情，把精力放在优化系统就可以了。</p><p>而对于领域/行业知识库问答来说，需要从数据侧和系统侧同时优化。因为如果用户问题回答不上来，有可能是没相关数据，也有可能是有数据但 RAG 系统没找到。</p><p>数据侧的优化很「简单」，就是尽可能多的收集领域内相关的数据，通通灌进知识库里面。但是， <strong>请先别着急！</strong>在开始组织人力收集整理数据之前，我们首先得弄清楚一件事情：RAG 系统，数据越多，效果越好吗？</p><p><strong>如果</strong>答案是肯定的，意味着：</p><ol><li><strong>海量数据放心灌，</strong>我可以一批一批地往知识库中加数据，不用担心数据量太大相互干扰导致效果不佳。</li><li><strong>快速迭代快速优化，</strong>对于上线之后的 badcase，业务侧可以直接通过加相应数据来快速迭代优化。</li><li><strong>降低数据成本</strong>，收集和整理的成本，不用费劲心思去做数据去重和脏数据的处理。</li><li><strong>增加系统的稳定性，</strong>如果我加的数据不相关，问答的效果不一定会变好，但是起码能保证以前的效果不会变差。</li></ol><p>反之，那工作量可就大了😭</p><p><strong>实验：数据量对于问答效果的影响</strong><br> 以教育领域的知识库问答为例，我们基于 RAG 做了一个升学百科问答的应用，专门解答用户关于高考升学规划和志愿填报政策相关的问题。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-3443e76cdb8062538f4fb914470c9aa7298.png" referrerpolicy="no-referrer"></p><p style="text-align:center">升学百科问答</p><p>升学百科问答不是给定数据，给定问题，然后只需要去优化算法或者系统的 Benchmark 任务。它的问题是开放的，数据也是开放的（你可以收集到尽可能多的相关数据来提升问答的效果）。所以优化的变量就多了一个：系统是一部分，数据也是一部分。问答效果的好坏不光取决于好的 RAG 系统，还取决于你的数据量够不够，覆盖的知识全不全？如何优化 RAG 能让它完全发挥出海量数据的价值是我们研究的重点。</p><p>关于数据量对 RAG 问答质量的影响，我们在升学百科问答项目中做了比较详细的研究。实验设置如下：</p><ul><li><strong>用户问题</strong>：收集了 176 个升学百科相关的问题，包括升学路径、志愿填报、选科等相关政策咨询问题。</li><li><strong>RAG 系统：</strong>一个经典的 RAG 系统，包括文本解析切片，embedding 向量化建库，检索相关片段，语言模型总结问答等模块。</li><li><strong>领域数据：</strong>我们收集了海量升学规划相关的资料来验证数据的问题，包括教育领域的互联网数据，书本资料，FAQ 问答对等。</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-519bd951fc8e8da2b60ca1c99438053376c.png" referrerpolicy="no-referrer"></p><p style="text-align:center">RAG 在升学百科问答中的实践</p><p><strong>结果：检索退化问题</strong><br> 我们分批往 RAG 知识库中灌入数据，每加一批数据都做一次评测，观察随着数据量变大，问答效果的变化情况：</p><ul><li><strong>baseline：</strong>第一批数据加入后问答正确率有 42.6%，此时有一些问题没回答上来是因为确实缺少相关资料。我们继续加数据…</li><li><strong>迎来上涨：</strong>第二批加了更多数据，覆盖知识范围更广。准确率提升到了 60.2%，提升非常明显，看来加数据确实还是挺有用的。</li><li><strong>坏消息：</strong>当加入第三批数据的时候，我们最担心的事情还是发生了。正确率急剧下降，跌了将近 8 个百分点。</li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9b4ab65b8b57cc9614dab72bf9b3b044189.png" referrerpolicy="no-referrer"></p><p>到这里，我们的问题有了答案，<strong>不是所的 RAG 系统都能保证：数据越多，效果越好。</strong>海量数据有可能会把 AI 喂吐，随着数据的增多，数据之间可能会有相互干扰，导致检索退化的问题，影响问答的质量。</p><p><strong>具体问题具体分析</strong><br> 先抓一个典型看看，<u>大连医科大学怎么样？</u>这个问题在 v2 版本（加入第三批数据前）是能回答对的，v3 版本（加入第三批数据后）回答错了。看了一下送到 LLM 的文本片段，居然全部都是<u>大连理工大学</u>相关的信息。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ec645d0fe9a4be46b204e35260b319c96bc.png" referrerpolicy="no-referrer"></p><p style="text-align:center">问题分析：大连医科大学的问答结果</p><p>主要原因是第三批加入的某些文档中恰好有<u>大连理工大学 xxx 怎么样</u>？的句子，和 query<u>大连医科大学怎么样？</u>表面上看起来确实非常像，Embedding 给它打了比较高的分。</p><p>而类似大连医科大学师资介绍这样的片段相关性就稍微低了些。而 LLM 输入 token 有限制，前面两个最相关但是实际并不能回答 query 问题的片段就已经占满了 token 的窗口，只能把他俩送进 LLM 里。结果可想而知，啥都不知道。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-ba46a78fcfeaa165d79b3d32ebff25651fa.png" referrerpolicy="no-referrer"></p><p style="text-align:center">RAG 中的检索退化问题</p><p><strong>语义检索：相似≠相关</strong><br> 文本片段与 query 的相似性和文本片段是否包含 query 的答案（相关性）是两回事。RAG 中一个非常重要的矛盾点在于检索召回的片段比较多，但是 LLM 输入 token 是有限制，所以必须把能回答 query 问题的片段（和问题最相关）给 LLM。</p><p><strong>Embedding（Bi-Encoder）</strong><br> Embedding 也可以给出一个得分，但是这个得分描述的更多的是相似性。Embedding 本质上是一个双编码器，两个文本在模型内部没有任何信息交互。只在最后计算两个向量的余弦相似度时才进行唯一一次交互。所以 Embedding 检索只能把最相似的文本片段给你，没有能力来判断候选文本和 query 之间的相关性。但是相似又不等于相关。</p><p>如下图所示，从某种程度上，Embedding 其实就是在算两个文本块中相似字符的个数占比，它分不清 query 中的重点是大连医科大学，在它看来每个字符的重要性都是一样的。感兴趣的话可以计算一下下图中红字部分的占比，和最后余弦相似度的得分基本是吻合的。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-e8edc0b11333a604827f66087e138276730.png" referrerpolicy="no-referrer"></p><p style="text-align:center">Embedding 原理</p><p><strong>Rerank（Cross-Encoder）</strong><br> Rerank 本质是一个 Cross-Encoder 的模型。Cross-Encoder 能让两个文本片段一开始就在 BERT 模型各层中通过 self-attention 进行交互。它能够用 self-attention 判断出来这个 query 中的重点在于<u>大连医科大学</u>，而不是<u>怎么样？</u>。所以，如下图所示，<u>大连医科大学怎么样？</u>这个 query 和<u>大连医科大学创建于 1947 年…</u>更相关。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-8d4d65f826a971d22b34c414fb70162d841.png" referrerpolicy="no-referrer"></p><p style="text-align:center">Rerank 原理</p><p><strong>Cross-Encoder 这么好，为什么不直接用？</strong><br> 因为速度慢。这里说的速度慢不是 cross-encoder 的模型比 bi-encoder 的模型速度慢。关键在于 bi-encoder 可以离线计算海量文本块的向量化表示，把他们暂存在向量数据库中，在问答检索的时候只需要计算一个 query 的向量化表示就可以了。拿着 query 的向量表示去库里找最相似的文本即可。</p><p>但是 cross-encoder 需要实时计算两个文本块的相关度，如果候选文本有几万条，每一条都需要和 query 一起送进 BERT 模型中算一遍，需要实时算几万次。这个成本是非常巨大的。</p><p>所以，我们可以把检索过程分为两个阶段：召回（粗排）和重排。</p><ul><li>第一个阶段的目标是尽可能多的召回相似的文本片段，这个阶段的文本得分排序不是特别靠谱，所以候选的 topK 可以设置大一些，比如 topK=100；</li><li>第二个阶段的目标是对 100 个粗排的候选文本片段进行重新排序，用 cross-encoder 计算 100 个候选文本和 query 的相关度得分；</li></ul><p>两阶段检索结合可以兼顾效果和效率。</p><p><strong>两阶段检索在 RAG 中的实验</strong><br> 我们对上面升学百科中的文本片段用 Rerank 模型再做一次排序，重排序后的结果如下图所示，左右可以对照着看，左边是 Rerank 之前的文本片段，右边是 Rerank 重排之后的文本片段。可以明显看到右边文本片段的得分和排序更加合理，和人的感受基本上是一致的。重排序之后送进 LLM 窗口内的文本和 query 是最相关的，语言模型也能轻松根据相关信息回答出问题，再也不会说不知道了。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-4797d54a8067ea396396171be813ce22a06.png" referrerpolicy="no-referrer"></p><p style="text-align:center">两阶段检索在 RAG 中的实验</p><p><strong>QAnything：两阶段检索问答框架</strong><br><strong>QAnything</strong> (<strong>Q</strong>uestion and <strong>A</strong>nswer based on <strong>Anything</strong>) 是致力于支持任意格式文件或数据库的本地知识库问答系统。基于有道自研两阶段检索框架，能够做到数据越多，问答效果越好！</p><p>QAnything 具有以下特点：</p><ul><li><strong>数据安全放心用，</strong>完全离线使用；</li><li><strong>跨语种知识随意问</strong>，中英文问答随意切换，无所谓文件是什么语种；</li><li><strong>海量数据放心灌，</strong>两阶段向量排序，解决了大规模数据检索退化的问题，数据越多，效果越好；</li><li><strong>生产级系统直接装，</strong>可直接部署企业级应用；</li><li><strong>一键安装轻松用</strong>，无需繁琐的配置，一键安装部署，拿来就用；</li><li><strong>多知识库随时切，</strong>支持多个知识库联合问答。</li><li><strong>完全开源，完全免费！</strong></li></ul><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d7ab5597d8e97eed09547979ca0d93b826b.png" referrerpolicy="no-referrer"></p><p style="text-align:center">QAnything 系统架构</p><p>QAnything 使用的有道自研检索组件<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FBCEmbedding" target="_blank">BCEmbedding</a>有非常强悍的双语和跨语种能力，能消除语义检索里面的中英语言之间的差异。其中包含的 embedding 和 rerank 模型均达到业界 SOTA，详细评测指标请参考：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FBCEmbedding%2Fblob%2Fmaster%2FDocs%2FEvaluationSummary%2Fembedding_eval_summary.md" target="_blank">有道 BECEmbedding 模型和 Rerank 模型指标汇总</a>，如果需要单独使用 embedding 和 rerank 组件，点击下面的链接进行下载：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FBCEmbedding" target="_blank">https://github.com/netease-youdao/BCEmbedding</a></p><p><strong>最终结果</strong><br> 至此，我们可以在以上两阶段检索的 QAnything 系统上重新跑前三批数据的实验了。结果如下：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1bb7b39cb3f131a6c5068dc62e72bdcbda2.png" referrerpolicy="no-referrer"></p><p>在数据不变的情况，两阶段检索问答准确率从 52.8% 提升到 65.9%，这个结果再次证明了一阶段检索中存在数据互相干扰的情况。两阶段检索可以最大化的挖掘出数据的潜力，我们继续加数据，效果能够稳定提升。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d8915eb8807fbceefc14299a7b320e15ae8.png" referrerpolicy="no-referrer"></p><p style="text-align:center">QAnything 实现数据越多效果越好</p><p>QAnything 两阶段检索最大的意义不是在某一个实验上面提升了 10 个点。它最大的意义在于让「数据越多，效果越好」变成了现实。这是在准备开始优化一个 RAG 系统之前要确保的第一件事情。</p><p><strong>QAnything 应用</strong><br> QAnything 和有道领世联合推出<em><strong>「AI 升学规划师」</strong></em>。基于 QAnything 强劲的检索增强生成能力和有道领世多年深耕的海量升学数据资料，可以为每个学生和家长配备一名私人 AI 升学规划师，提供更加全面、专业、及时的升学规划服务。</p><p>基于<strong><em>「QAnything」</em></strong>，有道 AI 升学规划师在升学百科问答中准确率达到 95%，可以解答用户关于高考政策、升学路径、学习生活以及职业规划等各种问题。并且随着不断地数据补充和更新，这个准确率会一直上涨。</p><div class="ckeditor-html5-video" style="text-align:center"><video autoplay="autoplay" controls="controls" poster="https://oscimg.oschina.net/oscnet/up-072ac9e407286e5b380d0c13eaa3c9454aa.png" src="https://www.bilibili.com/video/BV1MH4y1v7MQ/?vd_source=5b7cd5db06252fb1e0b555e9b076ec34">
   &nbsp; 
 </video></div><p style="text-align:center">有道领世 AI 规划师（Powered by QAnything）</p><p style="text-align:center">如果视频无法播放可点击视频原始链接播放：B 站播放链接，可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1MH4y1v7MQ%2F%3Fvd_source%3D5b7cd5db06252fb1e0b555e9b076ec34" target="_blank">点击此处播放</a>。</p><p><strong>展望</strong><br> 两阶段检索是一个大的框架，给 RAG 提供了一个好的基础。未来可以在两阶段的基础上做更多细致的优化。这里有一些想法，贴出来和大家一起探讨：</p><ul><li><strong>切片策略：</strong>切片策略对检索召回的影响非常大，目前主流的切片策略还比较机械，经常造成一些信息的损失，未来可能会出现更加智能的切片方式。</li><li><strong>多路召回：</strong>可以在 embedding 检索的基础上增加 BM25 检索，或者通过 LLM 改写 query 的方式生成多个检索 query 增加召回率。</li><li><strong>意图分类：</strong>不同的问题走不同的知识库，或者用不同的处理逻辑。</li><li><strong>Agent：</strong>基于文档的问答能做的事情非常有限，Agent 和 RAG 结合起来可以做更多事情。</li></ul><p><strong>开源</strong><br> 自从_<strong>「QAnything」</strong>_项目开放源代码以来，受到了开发社区的热烈欢迎和广泛认可。截至 2024 年 2 月 1 日，项目在 GitHub 上已经积累了 3600 多个星标，这反映出了其流行度和用户对其价值的高度评价。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-cf43409261471c344f4df393c2de66133fe.png" referrerpolicy="no-referrer"></p><p>欢迎点击下面的链接下载试用：</p><p>QAnything github: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FQAnything" target="_blank">https://github.com/netease-youdao/QAnything</a></p><p>QAnything gitee: <a href="https://gitee.com/netease-youdao/QAnything">https://gitee.com/netease-youdao/QAnything</a></p><p>欢迎大家在 GitHub 上为<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FQAnything" target="_blank">「QAnything」</a>加星助力，方便收到新版本更新的通知！</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bd913c4ea881c00bf7ac16c9184ac1c5d65.gif" referrerpolicy="no-referrer"></p><p><strong>参考信息</strong><br> QAnything: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FQAnything" target="_blank">https://github.com/netease-youdao/QAnything</a></p><p>BCEmbedding: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FBCEmbedding" target="_blank">https://github.com/netease-youdao/BCEmbedding</a></p><p>RAG Survery: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2312.10997.pdf" target="_blank">Retrieval-Augmented Generation for Large Language Models: A Survey</a></p><p>LlamaIndex RAG: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdocs.llamaindex.ai%2Fen%2Fstable%2Fgetting_started%2Fconcepts.html%23retrieval-augmented-generation-rag" target="_blank">https://docs.llamaindex.ai/en/stable/getting_started/concepts.html#retrieval-augmented-generation-rag</a></p><p>Cross-encoder: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.sbert.net%2Fexamples%2Fapplications%2Fcross-encoder%2FREADME.html" target="_blank">https://www.sbert.net/examples/applications/cross-encoder/README.html</a></p><p>Sentence-BERT: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F1908.10084.pdf" target="_blank">https://arxiv.org/pdf/1908.10084.pdf</a></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 03:21:14 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/youdaotech/blog/11015018</guid>
            <link>https://my.oschina.net/youdaotech/blog/11015018</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Mixtral-8x7B Pytorch 实现]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><span id="OSC_h1_1"></span><h1 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 24px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;visibility: visible;" data-mpa-powered-by="yiban.io">0.前言</h1><section data-tool="mdnice 编辑器" data-website="https://www.mdnice.com" style="margin-bottom: 0px;padding-right: 10px;padding-left: 10px;outline: 0px;letter-spacing: 0px;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 1.6;word-break: break-word;visibility: visible;"><p data-tool="mdnice 编辑器" style="padding-top: 8px;padding-bottom: 8px;outline: 0px;line-height: 26px;visibility: visible;">本文从代码角度来谈下&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Mixtral 8x7B</code>&nbsp;混合专家<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Pytorch</code>的实现</p></section><span id="OSC_h1_2"></span><h1 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 24px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;visibility: visible;">1.论文概述</h1><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;visibility: visible;"><img class="rich_pages wxw-img" data-imgfileid="100006729" data-ratio="0.47229551451187335" src="https://oscimg.oschina.net/oscnet/08de9207-ec2d-4fd6-8d38-f450e6e0396e.png" data-type="png" data-w="758" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.979px !important;" referrerpolicy="no-referrer"></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;visibility: visible;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Mixtral-8x7B&nbsp;</code>引爆了<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">MoE</code>的技术方向，更多针对<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">MoE</code>优化的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Trick</code>出现，回归模型本身来解析：</p><ol data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;visibility: visible;"><li style="outline: 0px;visibility: visible;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);visibility: visible;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Mixtral 8x7B</code>&nbsp;采用了 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">sMoE</code>模型结构，模型的细节如何？路由负载均衡如何计算？代码如何实现？ 
   </section></li><li style="outline: 0px;visibility: visible;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);visibility: visible;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Mixtral 8x7B</code>&nbsp;的训练流程和推理流程是怎么样的，如何提高训练和推理效率？ 
   </section></li><li style="outline: 0px;visibility: visible;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);visibility: visible;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Mixtral 8x7B</code>&nbsp;的模型参数是如何计算的？ 
   </section></li><li style="outline: 0px;visibility: visible;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);visibility: visible;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">Mixtral 8x7B</code>&nbsp;性能硬刚 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">LLaMA2-70B</code>和 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">GPT-3.5</code>， 性能一线水准，在 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">MBPP</code>代码能力超越 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;visibility: visible;">3.5</code></section></li></ol><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;visibility: visible;"><img class="rich_pages wxw-img" data-imgfileid="100006735" data-ratio="0.31203703703703706" src="https://oscimg.oschina.net/oscnet/570ae0a1-9cf9-4aec-abc1-eccfee1f7667.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.969px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_3"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2. Mixtral 8x7B 模型架构和计算流程</h2><blockquote data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;outline: 0px;border-left-color: rgba(0, 0, 0, 0.4);color: rgb(106, 115, 125);font-size: 0.9em;letter-spacing: normal;text-align: left;text-wrap: wrap;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;border-top: none;border-right: none;border-bottom: none;overflow: auto;background: rgba(0, 0, 0, 0.05);"><p style="padding-top: 8px;padding-bottom: 8px;outline: 0px;font-size: 16px;color: black;line-height: 26px;">Mixtral is based on a&nbsp;<strong style="outline: 0px;">transformer architecture [31]</strong>&nbsp;and uses the same&nbsp;<strong style="outline: 0px;">modifications</strong>&nbsp;<strong style="outline: 0px;">as described in [18]</strong>, with the notable exceptions that Mixtral supports a fully dense context length of 32k tokens, and the&nbsp;<strong style="outline: 0px;">feed forward</strong>&nbsp;<strong style="outline: 0px;">blocks are replaced by Mixture-of-Expert layers</strong>&nbsp;(Section 2.1). The model architecture parameters are summarized in Table 1.</p></blockquote><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">base</code>的模型结构为 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Transformers</code>的改版 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mistral-7B</code></section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MoE</code>&nbsp;作用在 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Feed Forward Blocks</code>上 
   </section></li></ul><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006730" data-ratio="0.46574074074074073" src="https://oscimg.oschina.net/oscnet/a4575f91-4dfa-4468-95a2-254e1ed3eadd.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.99px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_4"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.1 Mixtral 模型架构</h2><blockquote data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;outline: 0px;border-left-color: rgba(0, 0, 0, 0.4);color: rgb(106, 115, 125);font-size: 0.9em;letter-spacing: normal;text-align: left;text-wrap: wrap;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;border-top: none;border-right: none;border-bottom: none;overflow: auto;background: rgba(0, 0, 0, 0.05);"><p style="padding-top: 8px;padding-bottom: 8px;outline: 0px;font-size: 16px;color: black;line-height: 26px;">In a Transformer model, the MoE layer is applied independently per token and replaces the feed-forward (FFN) sub-block of the transformer block. For Mixtral we use the same SwiGLU architecture as the expert function Ei(x) and set K = 2. This means each token is routed to two SwiGLU sub-blocks with different sets of weights. Taking this all together, the output y for an input token x is computed as:</p></blockquote><section role="presentation" data-formula="y=\sum^{n-1}_{i=0}\text{Softmax}(\text{Top2}(x \cdot W_g))_i \cdot \text{SwiGLU}_i(x) 
" data-formula-type="block-equation" data-tool="mdnice 编辑器" style="margin-bottom: 0px;outline: 0px;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;text-align: center;overflow: auto;"><embed style="vertical-align: -2.819ex;width: 44.983ex;height: auto;max-width: 300% !important;" src="https://oscimg.oschina.net/oscnet/ce68f4d9-a02c-41e1-a90d-9789dedfa8e7.svg" data-type="svg+xml" data-imgfileid="100006734"></section><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     以 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">LLaMA2</code>或 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mistral-7B</code>来说其 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MLP</code>都是 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">SwiGLU</code>形式 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     在 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mixtral-8x7B</code>中 
    <em style="outline: 0px;color: black;">每层</em>的 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Decoder</code>层的 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MLP</code>都以 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>来替换掉 
   </section></li></ul><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006731" data-ratio="0.5712962962962963" src="https://oscimg.oschina.net/oscnet/81836df0-5cfd-463c-94c9-b71cbdff3faa.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.979px !important;" referrerpolicy="no-referrer"></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">Transformers Mixtral-of-Expert</p><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">代码实现:</p><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">在<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Huggingface</code>的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Transformers</code>框架中,&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mixtral</code>主要有两部分组成</p><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MixtralDecoderLayer</code></section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MixtralSparseMoeBlock</code>：替换掉原有的 MLP 层 
   </section></li></ul><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;">MixtralForCausalLM(<br style="outline: 0px;">  (model): MixtralModel(<br style="outline: 0px;">    (embed_tokens): Embedding(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">32000</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>)<br style="outline: 0px;">    (layers): ModuleList(<br style="outline: 0px;">      (<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>): MixtralDecoderLayer(<br style="outline: 0px;">        (self_attn): MixtralAttention(<br style="outline: 0px;">          (q_proj): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">          (k_proj): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">          (v_proj): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">          (o_proj): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">          (rotary_emb): MixtralRotaryEmbedding()<br style="outline: 0px;">        )<br style="outline: 0px;">        (block_sparse_moe): MixtralSparseMoeBlock(<br style="outline: 0px;">          (gate): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">          (experts): ModuleList(<br style="outline: 0px;">            (<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span><span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-7</span>): <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span> x MixtralBLockSparseTop2MLP(<br style="outline: 0px;">              (w1): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">256</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">              (w2): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">256</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">              (w3): Linear(in_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>, out_features=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">256</span>, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">              (act_fn): SiLU()<br style="outline: 0px;">            )<br style="outline: 0px;">          )<br style="outline: 0px;">        )<br style="outline: 0px;">        (input_layernorm): MixtralRMSNorm()<br style="outline: 0px;">        (post_attention_layernorm): MixtralRMSNorm()<br style="outline: 0px;">      )<br style="outline: 0px;">    )<br style="outline: 0px;">    (norm): MixtralRMSNorm()<br style="outline: 0px;">  )<br style="outline: 0px;"></code></pre><span id="OSC_h2_5"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.2 SMoE 层实现</h2><span id="OSC_h3_6"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 20px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.2.1 单个 Expert 实现</h3><section data-tool="mdnice 编辑器" data-website="https://www.mdnice.com" style="margin-bottom: 0px;padding-right: 10px;padding-left: 10px;outline: 0px;letter-spacing: 0px;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 1.6;word-break: break-word;"><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 637px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">import</span> torch<br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">from</span> torch <span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">import</span> nn<br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">from</span> transformers <span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">import</span> MixtralConfig<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">class</span><span style="outline: 0px;color: rgb(230, 192, 123);line-height: 26px;">MixtralBLockSparseTop2MLP</span><span style="outline: 0px;line-height: 26px;">(nn.Module)</span>:</span><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">def</span><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">__init__</span><span style="outline: 0px;line-height: 26px;">(self, config: MixtralConfig)</span>:</span><br style="outline: 0px;">        super().__init__()<br style="outline: 0px;">        self.ffn_dim = config.intermediate_size<br style="outline: 0px;">        self.hidden_dim = config.hidden_size<br style="outline: 0px;"><br style="outline: 0px;">        self.w1 = nn.Linear(self.hidden_dim, self.ffn_dim, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">        self.w2 = nn.Linear(self.ffn_dim, self.hidden_dim, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;">        self.w3 = nn.Linear(self.hidden_dim, self.ffn_dim, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;"><br style="outline: 0px;">        self.act_fn = nn.SiLU()<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># Forward 是 SwiGLU</span><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">def</span><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">forward</span><span style="outline: 0px;line-height: 26px;">(self, hidden_states)</span>:</span><br style="outline: 0px;">        y = self.act_fn(self.w1(hidden_states)) * self.w3(hidden_states)<br style="outline: 0px;">        y = self.w2(y)<br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">return</span> y<br style="outline: 0px;"><br style="outline: 0px;">x = torch.randn(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">64</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>)<br style="outline: 0px;">expert = MixtralBLockSparseTop2MLP(config)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'单个专家为原 LLaMA 的 MLP 层'</span>)<br style="outline: 0px;">print(expert)<br style="outline: 0px;">g = expert(x)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'单个专家输入:'</span>, x.shape)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'单个专家输出结果：'</span>, g.shape)</code></pre></section><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">结果</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;">单个专家为原 LLaMA 的 MLP 层<br style="outline: 0px;">MixtralBLockSparseTop2MLP(<br style="outline: 0px;">  (w1): Linear(in_features=128, out_features=256, bias=False)<br style="outline: 0px;">  (w2): Linear(in_features=256, out_features=128, bias=False)<br style="outline: 0px;">  (w3): Linear(in_features=128, out_features=256, bias=False)<br style="outline: 0px;">  (act_fn): SiLU()<br style="outline: 0px;">)<br style="outline: 0px;">单个专家输入:<br style="outline: 0px;">torch.Size([1, 64, 128])<br style="outline: 0px;">单个专家输出结果：<br style="outline: 0px;">torch.Size([1, 64, 128])<br style="outline: 0px;"></code></pre><span id="OSC_h3_7"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 20px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.2.2&nbsp;混合 Expert 实现</h3><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">class</span><span style="outline: 0px;color: rgb(230, 192, 123);line-height: 26px;">MixtralSparseMoeBlock</span><span style="outline: 0px;line-height: 26px;">(nn.Module)</span>:</span><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">def</span><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">__init__</span><span style="outline: 0px;line-height: 26px;">(self, config)</span>:</span><br style="outline: 0px;">        super().__init__()<br style="outline: 0px;">        self.hidden_dim = config.hidden_size<br style="outline: 0px;">        self.ffn_dim = config.intermediate_size<br style="outline: 0px;">        self.num_experts = config.num_local_experts<br style="outline: 0px;">        self.top_k = config.num_experts_per_tok<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># gating</span><br style="outline: 0px;">        self.gate = nn.Linear(self.hidden_dim, self.num_experts, bias=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">False</span>)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 多个 SwiGLU MLP 层组成混合专家</span><br style="outline: 0px;">        self.experts = nn.ModuleList([MixtralBLockSparseTop2MLP(config) \<br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">for</span> _ <span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">in</span> range(self.num_experts)])<br style="outline: 0px;"><br style="outline: 0px;">x = torch.randn(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">64</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>)<br style="outline: 0px;">experts = MixtralSparseMoeBlock(config)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'多个专家混合专家'</span>)<br style="outline: 0px;">print(experts)<br style="outline: 0px;"></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">在以上我们实现了模型的关键结构， 但是这里的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Forward</code>并没有实现</p><span id="OSC_h2_8"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.3 SMoE 计算流程</h2><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006740" data-ratio="0.8083333333333333" src="https://oscimg.oschina.net/oscnet/c0a489e5-d07a-48a6-86d2-943afad9c5df.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.99px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h3_9"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 20px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.3.1 Gating 流程</h3><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">以下表示为多个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token</code>的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">gating</code>计算流程</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 阶段一</span><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 计算稀疏 gating 值</span><br style="outline: 0px;">tokens = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">6</span><br style="outline: 0px;">x = torch.randn(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>, tokens, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span>) <span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 6 个 token</span><br style="outline: 0px;">hidden_states = x<br style="outline: 0px;">batch_size, sequence_length, hidden_dim = hidden_states.shape<br style="outline: 0px;">hidden_states = hidden_states.view(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>, hidden_dim)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 每层都会产生 router_logits, 将用于最后作 load balance loss</span><br style="outline: 0px;">router_logits = experts.gate(hidden_states)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'experts.gate output router logits : \n <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{router_logits}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 计算 TopK 的，专家 logits 和 Top2 专家的位置</span><br style="outline: 0px;">routing_weights = F.softmax(router_logits, dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>, dtype=torch.float)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'softmax weight  : \n <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{routing_weights}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;">routing_weights, selected_experts = torch.topk(routing_weights, \<br style="outline: 0px;">                                               experts.top_k, dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'expert select : \n <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{selected_experts}</span>'</span>)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'topk : \n <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{routing_weights}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;">routing_weights /= routing_weights.sum(dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>, keepdim=<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">True</span>)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'topk 归一化 : \n <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{routing_weights}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;">routing_weights = routing_weights.to(hidden_states.dtype)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;">## One Hot 编码</span><br style="outline: 0px;">expert_mask = torch.nn.functional.one_hot(selected_experts, \<br style="outline: 0px;">                                          num_classes=experts.num_experts).permute(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>)<br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">for</span> i <span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">in</span> range(tokens):<br style="outline: 0px;">    print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'【token_<span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{i}</span>】\n'</span>, expert_mask[:,:,i])<br style="outline: 0px;"></code></pre><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006744" data-ratio="0.8296296296296296" src="https://oscimg.oschina.net/oscnet/1c6f9548-60de-41a6-891f-8cc9b3014138.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.99px !important;" referrerpolicy="no-referrer"></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">追踪<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">x3</code>的结果</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006742" data-ratio="0.2518518518518518" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/1b246c20-c0e4-464e-a0cb-5b43546dc042.png" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.958px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_10"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.3.2 Expert 流程</h2><section role="presentation" data-formula="y = \sum ^{n-1}_{i=0}\text{Softmax}(\text{Top2}(x\cdot W_g))_i \cdot \text{SwiGLU}_i(x)
" data-formula-type="block-equation" data-tool="mdnice 编辑器" style="margin-bottom: 0px;outline: 0px;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;text-align: center;overflow: auto;"><embed style="vertical-align: -2.819ex;width: 44.983ex;height: auto;max-width: 300% !important;" src="https://oscimg.oschina.net/oscnet/ce68f4d9-a02c-41e1-a90d-9789dedfa8e7.svg" data-type="svg+xml" data-imgfileid="100006732"></section><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>中是基于专家来选择 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token</code>来计算的 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token</code>先序：左图为 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token3</code>选择 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert 2</code>,&nbsp; 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert 3</code>号来计算 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>结果 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert</code>先序：右图为依次计算 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert2</code>和 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert3</code>才得出 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token3</code>&nbsp;的 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>结果 
   </section></li></ul><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006743" data-ratio="0.6342592592592593" src="https://oscimg.oschina.net/oscnet/fca3697d-85f8-4851-8bde-773a42c43cca.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 657px !important;" referrerpolicy="no-referrer"></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">代码实现结果为：</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;">## 最终结果</span><br style="outline: 0px;">final_hidden_states = torch.zeros(<br style="outline: 0px;">    (batch_size * sequence_length, hidden_dim), \<br style="outline: 0px;">        dtype=hidden_states.dtype, device=hidden_states.device<br style="outline: 0px;">)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'final moe result shape for each token: <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{final_hidden_states.shape}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 每个专家收集需要计算 token</span><br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">for</span> expert_idx <span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">in</span> range(experts.num_experts):<br style="outline: 0px;"><br style="outline: 0px;">    print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'--------expert <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{expert_idx}</span> ---------'</span>)<br style="outline: 0px;"><br style="outline: 0px;">    expert_layer = experts.experts[expert_idx]<br style="outline: 0px;">    print(expert_mask[expert_idx])<br style="outline: 0px;">    idx, top_x = torch.where(expert_mask[expert_idx])<br style="outline: 0px;">    print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'专家 <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{expert_idx}</span> 计算的样本编号:'</span>,top_x.tolist()) <span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># select x_idx for expert top1</span><br style="outline: 0px;">    print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'专家 <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{expert_idx}</span> top1:0, top2:1 '</span>,idx.tolist()) <span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 0 is top1 ,1 is top2</span><br style="outline: 0px;">    print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'有 <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{len(top_x)}</span> / <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{x.shape[<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>]}</span> token 选到专家 <span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{expert_idx}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;">    top_x_list = top_x.tolist()<br style="outline: 0px;">    idx_list = idx.tolist()<br style="outline: 0px;"><br style="outline: 0px;">    current_state = hidden_states[<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">None</span>, top_x_list].reshape(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>, hidden_dim)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># expert_0(x) * routing_weights</span><br style="outline: 0px;">    current_hidden_states = expert_layer(current_state)  \<br style="outline: 0px;">                            * routing_weights[top_x_list, idx_list, <span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">None</span>]<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># 将计算的单个专家结果填入到结果表里</span><br style="outline: 0px;">    final_hidden_states.index_add_(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>, top_x, current_hidden_states.to(hidden_states.dtype))<br style="outline: 0px;"><br style="outline: 0px;">    print(current_state.shape) <br style="outline: 0px;">    print(routing_weights[top_x_list, idx_list, <span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">None</span>].shape)<br style="outline: 0px;">    print(current_hidden_states.shape)<br style="outline: 0px;">    print(final_hidden_states.shape)<br style="outline: 0px;"></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">输出结果为:</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006745" data-ratio="0.8870370370370371" src="https://oscimg.oschina.net/oscnet/4dbff434-6e52-42ad-9e57-99a809a779e2.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.99px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_11"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.4 Router Load Balence 计算</h2><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">路由负载均衡的实现来自<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Switch Transformers</code></p><blockquote data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;outline: 0px;border-left-color: rgba(0, 0, 0, 0.4);color: rgb(106, 115, 125);font-size: 0.9em;letter-spacing: normal;text-align: left;text-wrap: wrap;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;border-top: none;border-right: none;border-bottom: none;overflow: auto;background: rgba(0, 0, 0, 0.05);"><p style="padding-top: 8px;padding-bottom: 8px;outline: 0px;font-size: 16px;color: black;line-height: 26px;">Computes auxiliary load balancing loss as in Switch Transformer - implemented in Pytorch. See Switch Transformer for more details. This function implements the loss function presented in equations (4) - (6) of the paper. It aims at penalizing cases where the routing between experts is too unbalanced.</p></blockquote><span id="OSC_h3_12"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 20px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.4.1 Switch Transformers Load Balance Loss</h3><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">该算法为<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>简化版<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">load balance&nbsp;</code>, 去除了原版&nbsp;balance loss&nbsp;<span style="outline: 0px;">估计</span></p><section data-tool="mdnice 编辑器" data-website="https://www.mdnice.com" style="margin-bottom: 0px;padding-right: 10px;padding-left: 10px;outline: 0px;letter-spacing: 0px;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 1.6;word-break: break-word;"><section role="presentation" data-formula="loss = \alpha\cdot N\cdot \sum ^N_{i=1}f_i\cdot P_i
" data-formula-type="block-equation" data-tool="mdnice 编辑器" style="outline: 0px;text-align: center;overflow: auto;"><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -1733 10080.5 2978.9" aria-hidden="true" style="-webkit-overflow-scrolling: touch;vertical-align: -2.819ex;width: 22.806ex;height: 6.74ex;max-width: 300% !important;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="6C" d="M117 59Q117 26 142 26Q179 26 205 131Q211 151 215 152Q217 153 225 153H229Q238 153 241 153T246 151T248 144Q247 138 245 128T234 90T214 43T183 6T137 -11Q101 -11 70 11T38 85Q38 97 39 102L104 360Q167 615 167 623Q167 626 166 628T162 632T157 634T149 635T141 636T132 637T122 637Q112 637 109 637T101 638T95 641T94 647Q94 649 96 661Q101 680 107 682T179 688Q194 689 213 690T243 693T254 694Q266 694 266 686Q266 675 193 386T118 83Q118 81 118 75T117 65V59Z"></path></g><g data-mml-node="mi" transform="translate(298, 0)"><path data-c="6F" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(783, 0)"><path data-c="73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(1252, 0)"><path data-c="73" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mo" transform="translate(1998.8, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(3054.6, 0)"><path data-c="3B1" d="M34 156Q34 270 120 356T309 442Q379 442 421 402T478 304Q484 275 485 237V208Q534 282 560 374Q564 388 566 390T582 393Q603 393 603 385Q603 376 594 346T558 261T497 161L486 147L487 123Q489 67 495 47T514 26Q528 28 540 37T557 60Q559 67 562 68T577 70Q597 70 597 62Q597 56 591 43Q579 19 556 5T512 -10H505Q438 -10 414 62L411 69L400 61Q390 53 370 41T325 18T267 -2T203 -11Q124 -11 79 39T34 156ZM208 26Q257 26 306 47T379 90L403 112Q401 255 396 290Q382 405 304 405Q235 405 183 332Q156 292 139 224T121 120Q121 71 146 49T208 26Z"></path></g><g data-mml-node="mo" transform="translate(3916.8, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(4417, 0)"><path data-c="4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g><g data-mml-node="mo" transform="translate(5527.2, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="munderover" transform="translate(6027.4, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(148.2, -1087.9) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mo" transform="translate(345, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(1123, 0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mi" transform="translate(408, 1150) scale(0.707)"><path data-c="4E" d="M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z"></path></g></g><g data-mml-node="msub" transform="translate(7638.1, 0)"><g data-mml-node="mi"><path data-c="66" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g><g data-mml-node="mi" transform="translate(490, -150) scale(0.707)"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(8644.3, 0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="msub" transform="translate(9144.5, 0)"><g data-mml-node="mi"><path data-c="50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></section><section role="presentation" data-formula="f_i = \frac{1}{T}\sum_{x\in\mathcal{B}}\mathbb{1}\{\text{argmax }p(x)=i\}
" data-formula-type="block-equation" data-tool="mdnice 编辑器" style="outline: 0px;text-align: center;overflow: auto;"><embed style="vertical-align: -2.814ex;width: 30.879ex;height: auto;max-width: 300% !important;" src="https://oscimg.oschina.net/oscnet/a44025fc-3ccf-4c1b-9d1d-5b6c059ec916.svg" data-type="svg+xml" data-imgfileid="100006733"></section><p data-tool="mdnice 编辑器" style="padding-top: 8px;padding-bottom: 8px;outline: 0px;line-height: 26px;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">fi</code>:在一个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">batch</code>中第<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">i</code>专家分配到<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token</code>的数量概率</p><section role="presentation" data-formula="P_i=\frac{1}{T}\sum_{x\in \mathcal{B}}p_i(x)
" data-formula-type="block-equation" data-tool="mdnice 编辑器" style="outline: 0px;text-align: center;overflow: auto;"><svg
                xmlns="http://www.w3.org/2000/svg" role="img" focusable="false" viewBox="0 -1342 7337.8 2585.8" aria-hidden="true" style="-webkit-overflow-scrolling: touch;vertical-align: -2.814ex;width: 16.601ex;height: 5.85ex;max-width: 300% !important;"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="matrix(1 0 0 -1 0 0)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="50" d="M287 628Q287 635 230 637Q206 637 199 638T192 648Q192 649 194 659Q200 679 203 681T397 683Q587 682 600 680Q664 669 707 631T751 530Q751 453 685 389Q616 321 507 303Q500 302 402 301H307L277 182Q247 66 247 59Q247 55 248 54T255 50T272 48T305 46H336Q342 37 342 35Q342 19 335 5Q330 0 319 0Q316 0 282 1T182 2Q120 2 87 2T51 1Q33 1 33 11Q33 13 36 25Q40 41 44 43T67 46Q94 46 127 49Q141 52 146 61Q149 65 218 339T287 628ZM645 554Q645 567 643 575T634 597T609 619T560 635Q553 636 480 637Q463 637 445 637T416 636T404 636Q391 635 386 627Q384 621 367 550T332 412T314 344Q314 342 395 342H407H430Q542 342 590 392Q617 419 631 471T645 554Z"></path></g><g data-mml-node="mi" transform="translate(642, -150) scale(0.707)"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1213.7, 0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2269.5, 0)"><g data-mml-node="mn" transform="translate(322, 676)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mi" transform="translate(220, -686)"><path data-c="54" d="M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z"></path></g><rect width="904" height="60" x="120" y="220"></rect></g><g data-mml-node="munder" transform="translate(3580.2, 0)"><g data-mml-node="mo"><path data-c="2211" d="M60 948Q63 950 665 950H1267L1325 815Q1384 677 1388 669H1348L1341 683Q1320 724 1285 761Q1235 809 1174 838T1033 881T882 898T699 902H574H543H251L259 891Q722 258 724 252Q725 250 724 246Q721 243 460 -56L196 -356Q196 -357 407 -357Q459 -357 548 -357T676 -358Q812 -358 896 -353T1063 -332T1204 -283T1307 -196Q1328 -170 1348 -124H1388Q1388 -125 1381 -145T1356 -210T1325 -294L1267 -449L666 -450Q64 -450 61 -448Q55 -446 55 -439Q55 -437 57 -433L590 177Q590 178 557 222T452 366T322 544L56 909L55 924Q55 945 60 948Z"></path></g><g data-mml-node="TeXAtom" transform="translate(51.7, -1115.5) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(572, 0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(1239, 0)"><g data-mml-node="mi"><path data-c="42" d="M304 342Q292 342 292 353Q292 372 323 391Q331 396 417 428T533 487Q563 512 563 555V562Q563 575 557 589T530 618T475 636Q429 636 396 613T330 539Q263 446 210 238Q196 183 173 120Q135 31 121 16Q108 1 85 -10T47 -22T32 -10Q32 -5 44 18T77 93T112 206Q135 296 154 395T182 550T191 615Q191 616 190 616Q188 616 179 611T157 601T131 594Q113 594 113 605Q113 623 144 644Q154 650 205 676T267 703Q277 705 279 705Q295 705 295 693Q295 686 288 635T278 575Q278 572 287 582Q336 635 402 669T540 704Q603 704 633 673T664 599Q664 559 638 523T580 462Q553 440 504 413L491 407L504 402Q566 381 596 338T627 244Q627 172 575 110T444 13T284 -22Q208 -22 158 28Q144 42 146 50Q150 67 178 85T230 103Q236 103 246 95T267 75T302 56T357 47Q436 47 486 93Q526 136 526 198V210Q526 228 518 249T491 292T436 330T350 345Q335 345 321 344T304 342Z"></path></g></g></g></g><g data-mml-node="msub" transform="translate(5190.8, 0)"><g data-mml-node="mi"><path data-c="70" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mi" transform="translate(503, -150) scale(0.707)"><path data-c="69" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(5987.8, 0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(6376.8, 0)"><path data-c="78" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(6948.8, 0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></section><p data-tool="mdnice 编辑器" style="padding-top: 8px;padding-bottom: 8px;outline: 0px;line-height: 26px;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Pi</code>:在一个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">batch</code>中<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">T</code>个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">tokens</code>，各个专家选到<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">tokens</code>的概率和</p></section><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;"><img class="rich_pages wxw-img" data-imgfileid="100006748" data-ratio="0.8111111111111111" src="https://oscimg.oschina.net/oscnet/cb976fdf-8c5e-4d05-bc80-1dbabb5f288c.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 657px !important;" referrerpolicy="no-referrer"><span style="outline: 0px;font-size: 20px;font-weight: bold;">2.4.2&nbsp;手撕 Mixtral Load Balance Loss 计算流程</span></p><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">可以想象下<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">layer norm</code>只是在<strong style="outline: 0px;">当前层</strong>里对所有<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">tokens</code>&nbsp;做，而负载均衡处理范围更广，对<strong style="outline: 0px;">所有层</strong>的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">tokens</code>&nbsp;，在每个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert</code>的纵向计算出单专家负载值，求和便得到整个网络的负载均衡 loss</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006749" data-ratio="1.038888888888889" src="https://oscimg.oschina.net/oscnet/50a571f0-7da0-4439-8d14-de0abd1849fc.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.99px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h3_13"></span><h3 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 20px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">2.4.3 手撕 Mixtral Load Balance</h3><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">import</span> torch<br style="outline: 0px;"><br style="outline: 0px;">num_experts = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span><br style="outline: 0px;">batch = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">10</span><br style="outline: 0px;">seq_length = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">6</span><br style="outline: 0px;">top_k = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span><br style="outline: 0px;"><br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'sMoE num_experts:<span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{num_experts}</span> top_k:<span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{top_k}</span> batch:<span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{batch}</span> seq_length:<span style="outline: 0px;color: rgb(224, 108, 117);line-height: 26px;">{seq_length}</span>'</span>)<br style="outline: 0px;"><br style="outline: 0px;">router_logits_1 = torch.randn(batch, seq_length, num_experts).view(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>,num_experts) <span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># layer 1</span><br style="outline: 0px;">router_logits_2 = torch.randn(batch, seq_length, num_experts).view(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>,num_experts) <span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># layer 2</span><br style="outline: 0px;">router_logits = [router_logits_1, router_logits_2] <br style="outline: 0px;"><br style="outline: 0px;">concatenated_gate_logits = torch.cat(router_logits, dim = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'单层 gating 的路由 logits:'</span>, router_logits_1.shape) <br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'两层 gating 的路由 logits:'</span>, concatenated_gate_logits.shape)<br style="outline: 0px;"><br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'根据 logits top-k 计算热独编码'</span>)<br style="outline: 0px;">routing_weights = torch.nn.functional.softmax(concatenated_gate_logits, dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>)<br style="outline: 0px;">_, selected_experts = torch.topk(routing_weights, top_k, dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>)<br style="outline: 0px;">expert_mask = torch.nn.functional.one_hot(selected_experts, num_experts)<br style="outline: 0px;">print(expert_mask.shape)<br style="outline: 0px;"><br style="outline: 0px;">tokens_sum_expert = torch.sum(expert_mask.float(), dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>)<br style="outline: 0px;">tokens_per_expert = torch.mean(expert_mask.float(), dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'top1 每个专家平均处理的 token   :'</span>, tokens_sum_expert[<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>])<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'top2 每个专家平均处理的 token fi:'</span>, tokens_per_expert[<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>])<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">f'top1 与 top2 水平合计'</span>, tokens_per_expert.sum(dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1</span>))<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># Compute the average probability of routing to these experts</span><br style="outline: 0px;">router_prob_per_expert = torch.mean(routing_weights, dim=<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>)<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'router_prob_per_expert Pi: '</span> , router_prob_per_expert)<br style="outline: 0px;"><br style="outline: 0px;">print( <span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'每个专家的负载：'</span>,  tokens_per_expert * router_prob_per_expert.unsqueeze(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>))<br style="outline: 0px;">overall_loss = torch.sum(tokens_per_expert * router_prob_per_expert.unsqueeze(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0</span>))<br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'final loss:'</span>, overall_loss)<br style="outline: 0px;"><br style="outline: 0px;"></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">计算结果</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;">sMoE num_experts:<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span> top_k:<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> batch:<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">10</span> seq_length:<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">6</span><br style="outline: 0px;">单层 gating 的路由 logits:<br style="outline: 0px;">torch.Size([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">60</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span>])<br style="outline: 0px;">两层 gating 的路由 logits:<br style="outline: 0px;">torch.Size([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">120</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span>])<br style="outline: 0px;">根据 logits top-k 计算热独编码<br style="outline: 0px;">torch.Size([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">120</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span>])<br style="outline: 0px;">top1 每个专家平均处理的 token   : tensor([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">10.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">14.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">19.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">17.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">14.</span>,  <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">9.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">17.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">20.</span>])<br style="outline: 0px;">top2 每个专家平均处理的 token fi: tensor([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1667</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1333</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1833</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0833</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1167</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1500</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0667</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1000</span>])<br style="outline: 0px;">top1 与 top2 水平合计 tensor([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1.</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">1.</span>])<br style="outline: 0px;">router_prob_per_expert Pi:  tensor([<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1236</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1184</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1351</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1168</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1311</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1147</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1156</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.1447</span>])<br style="outline: 0px;">每个专家的负载：tensor([[<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0103</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0138</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0214</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0165</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0153</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0086</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0164</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0241</span>],<br style="outline: 0px;">        [<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0206</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0158</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0248</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0097</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0153</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0172</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0077</span>, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.0145</span>]])<br style="outline: 0px;">final loss: tensor(<span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">0.2520</span>)<br style="outline: 0px;"></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">这里的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">gating logits</code>&nbsp;是跨<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">batch</code>跨层的，作用在每个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token</code>上</p><span id="OSC_h1_14"></span><h1 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 24px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">3. Mixtral 8x7B 参数量计算</h1><span id="OSC_h2_15"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">3.1 原论文描述</h2><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">这里的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">13B</code>&nbsp;是指单个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">&nbsp;token</code>涉及的模型参数量，实际推理时每个<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">token</code>都有不同的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert</code>&nbsp;，那么实际运行还是跑<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">47B&nbsp;</code>参数的, 使用了 sMoE 并不会减少显存占用。</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006750" data-ratio="0.362962962962963" src="https://oscimg.oschina.net/oscnet/9dedd8c0-fbbd-4ab8-ab42-dd864369be7d.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.969px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_16"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">3.2 模型参数量计算</h2><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">忽略<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">GQA</code>计算</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;">dim = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">4096</span><br style="outline: 0px;">n_layers = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">32</span><br style="outline: 0px;">head_dim = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">128</span><br style="outline: 0px;">hidden_dim = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">14336</span><br style="outline: 0px;">n_heads = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">32</span><br style="outline: 0px;">n_kv_heads = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># ignore GQA</span><br style="outline: 0px;">vocab_size = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">32000</span><br style="outline: 0px;">num_experts = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span><br style="outline: 0px;">top_k_experts = <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span><br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># attention mlp layernorm</span><br style="outline: 0px;">llama_num = n_layers * (dim * dim * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">4</span> + hidden_dim * dim * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">3</span> + <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> * dim ) \<br style="outline: 0px;">        + <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> * vocab_size * dim <br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'llama:'</span>, llama_num)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># attention 【mlp*8】 layernorm</span><br style="outline: 0px;">moe_num = n_layers * (dim * dim * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">4</span> + hidden_dim * dim * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">3</span> * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">8</span> + <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> * dim ) \<br style="outline: 0px;">        + <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> * vocab_size * dim <br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'moe:'</span>, moe_num)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># attention 【mlp*2】 layernorm</span><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># ToP2-inference</span><br style="outline: 0px;">moe_num = n_layers * (dim * dim * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">4</span> + hidden_dim * dim * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">3</span> * <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> + <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> * dim ) \<br style="outline: 0px;">        + <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">2</span> * vocab_size * dim <br style="outline: 0px;">print(<span style="outline: 0px;color: rgb(152, 195, 121);line-height: 26px;">'moe top-2:'</span>, moe_num)<br style="outline: 0px;"></code></pre><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">结果</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;">llama: 8047034368<br style="outline: 0px;">moe: 47507046400<br style="outline: 0px;">moe top-2: 13684178944<br style="outline: 0px;"></code></pre><span id="OSC_h1_17"></span><h1 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 24px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">4. MoE 扩展</h1><span id="OSC_h2_18"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">4.1 MegaBlocks</h2><blockquote data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;outline: 0px;border-left-color: rgba(0, 0, 0, 0.4);color: rgb(106, 115, 125);font-size: 0.9em;letter-spacing: normal;text-align: left;text-wrap: wrap;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;border-top: none;border-right: none;border-bottom: none;overflow: auto;background: rgba(0, 0, 0, 0.05);"><p style="padding-top: 8px;padding-bottom: 8px;outline: 0px;font-size: 16px;color: black;line-height: 26px;">MoE layers can be run efficiently on single GPUs with high performance specialized kernels. For example,&nbsp;<strong style="outline: 0px;">Megablocks</strong></p></blockquote><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MegaBlocks</code>实现稀疏的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MoE</code>计算</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006753" data-ratio="0.26481481481481484" src="https://oscimg.oschina.net/oscnet/e1bfdd99-c538-4ff0-abdc-f9abb0d217f0.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.979px !important;" referrerpolicy="no-referrer"></figure><section data-tool="mdnice 编辑器" data-website="https://www.mdnice.com" style="margin-bottom: 0px;padding-right: 10px;padding-left: 10px;outline: 0px;letter-spacing: 0px;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);font-size: 16px;color: black;line-height: 1.6;word-break: break-word;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;"><p data-tool="mdnice 编辑器" style="padding-top: 8px;padding-bottom: 8px;outline: 0px;line-height: 26px;">题外话：<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">XFormers</code>也实现了类似思想的算子，<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">batch</code>里的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">attention</code>通过<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mask</code>实现多序列稀疏计算。</p></section><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006755" data-ratio="0.2351851851851852" data-type="png" data-w="1080" src="https://oscimg.oschina.net/oscnet/78f9ff04-18ec-4713-8eab-f99b63be1268.png" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.969px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_19"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">4.2 GShard</h2><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mixtral</code>论文里在<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">load balance</code>里提了一下<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">GShard</code>, 是首篇将<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MoE</code>引入到<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Transformers</code>的工作</p><blockquote data-tool="mdnice 编辑器" style="margin-top: 20px;margin-bottom: 20px;padding: 10px 10px 10px 20px;outline: 0px;border-left-color: rgba(0, 0, 0, 0.4);color: rgb(106, 115, 125);font-size: 0.9em;letter-spacing: normal;text-align: left;text-wrap: wrap;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;border-top: none;border-right: none;border-bottom: none;overflow: auto;background: rgba(0, 0, 0, 0.05);"><p style="padding-top: 8px;padding-bottom: 8px;outline: 0px;font-size: 16px;color: black;line-height: 26px;">This formulation is similar to the GShard architecture [21], with the exceptions that we replace all FFN sub-blocks by MoE layers while GShard replaces every other block, and that GShard uses a more elaborate gating strategy for the second expert assigned to each token.</p></blockquote><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">GShard</code>在不同<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">GPU</code>上分配不同的专家，其他参数都共享，数据派发到专家，专家结果汇总都由<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">All-to-All</code>算子实现</p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006754" data-ratio="0.6712962962962963" src="https://oscimg.oschina.net/oscnet/d8a02488-b56d-432d-859d-96169d2a7fa3.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 657px !important;" referrerpolicy="no-referrer"></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">DeepSpeed-MoE 源码对<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">All-to-All</code>的实现如下</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">class</span><span style="outline: 0px;color: rgb(230, 192, 123);line-height: 26px;">_AllToAll</span><span style="outline: 0px;line-height: 26px;">(torch.autograd.Function)</span>:</span><br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">    @staticmethod</span><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">def</span><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">forward</span><span style="outline: 0px;line-height: 26px;">(<br style="outline: 0px;">            ctx: Any,<br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># <span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">TODO:</span> replace with DS process group</span><br style="outline: 0px;">            group: torch.distributed.ProcessGroup,<br style="outline: 0px;">            input: Tensor)</span> -&gt; Tensor:</span><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># type: ignore</span><br style="outline: 0px;">        ctx.group = group<br style="outline: 0px;">        input = input.contiguous()<br style="outline: 0px;">        output = torch.empty_like(input)<br style="outline: 0px;">        dist.all_to_all_single(output, input, group=group)<br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">return</span> output<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">    @staticmethod</span><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">def</span><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">backward</span><span style="outline: 0px;line-height: 26px;">(ctx: Any, *grad_output: Tensor)</span> -&gt; Tuple[<span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">None</span>, Tensor]:</span><br style="outline: 0px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">return</span> (<span style="outline: 0px;color: rgb(86, 182, 194);line-height: 26px;">None</span>, _AllToAll.apply(ctx.group, *grad_output))<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">class</span><span style="outline: 0px;color: rgb(230, 192, 123);line-height: 26px;">MOELayer</span><span style="outline: 0px;line-height: 26px;">(Base)</span>:</span><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># ...</span><br style="outline: 0px;"><span style="outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(198, 120, 221);line-height: 26px;">def</span><span style="outline: 0px;color: rgb(97, 174, 238);line-height: 26px;">forward</span><span style="outline: 0px;line-height: 26px;">(self, *input: Tensor, **kwargs: Any)</span> -&gt; Tensor:</span><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># ...</span><br style="outline: 0px;">        dispatched_input = _AllToAll.apply(self.ep_group, dispatched_input)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;"># Re-shape after all-to-all: ecm -&gt; gecm</span><br style="outline: 0px;">        dispatched_input = dispatched_input.reshape(self.ep_size, self.num_local_experts, <span style="outline: 0px;color: rgb(209, 154, 102);line-height: 26px;">-1</span>, d_model)<br style="outline: 0px;"><br style="outline: 0px;">        expert_output = self.experts(dispatched_input)<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">        expert_output = _AllToAll.apply(self.ep_group, expert_output)<br style="outline: 0px;"><br style="outline: 0px;"><span style="outline: 0px;color: rgb(92, 99, 112);font-style: italic;line-height: 26px;">#...</span><br style="outline: 0px;"></code></pre><span id="OSC_h2_20"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">4.3 DeepSpeed-MoE</h2><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     更加工程化的实现可以看 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">DeepSpeed-MoE</code>的开源方案 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MoE</code>层使用 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Expert-Paralallelism</code>做并行&nbsp; 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">AlltoAll</code>实现如上 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     非 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MoE</code>层使用 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">TP+DP</code></section></li></ul><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006758" data-ratio="0.5425925925925926" src="https://oscimg.oschina.net/oscnet/fbcafecf-4739-44ac-94c8-e4c601d87f5f.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.99px !important;" referrerpolicy="no-referrer"></figure><span id="OSC_h2_21"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">4.4 LLaMA-MoE</h2><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mixtral 8x7B</code>训不动？试试将<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">LLaMA</code>原<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">MLP</code>改造成<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">LLaMA-MoE</code></p><figure data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;display: flex;flex-direction: column;justify-content: center;align-items: center;"><img class="rich_pages wxw-img" data-imgfileid="100006757" data-ratio="0.5592592592592592" src="https://oscimg.oschina.net/oscnet/39e6e216-e428-4182-b4aa-20a0b6bb3650.png" data-type="png" data-w="1080" style="margin-right: auto;margin-left: auto;outline: 0px;display: block;visibility: visible !important;width: 656.979px !important;" referrerpolicy="no-referrer"></figure><p data-tool="mdnice 编辑器" style="margin-bottom: 0px;padding-top: 8px;padding-bottom: 8px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;line-height: 26px;">LLaMA-MoE 上关键代码是用<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">LinearGLUExperts</code>代替原本<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">LLaMA</code>里的<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">SwiGLU</code>层</p><pre data-tool="mdnice 编辑器" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;letter-spacing: normal;text-align: left;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;border-radius: 5px;box-shadow: rgba(0, 0, 0, 0.55) 0px 2px 10px;"><span style="margin-bottom: -7px;outline: 0px;display: block;background: url(&quot;https://oscimg.oschina.net/oscnet/97137f2e-9f16-422b-aac0-3a34b7643e27.svg&quot;) 10px 10px / 40px no-repeat rgb(40, 44, 52);height: 30px;width: 657px;border-radius: 5px;"></span><code style="padding: 15px 16px 16px;outline: 0px;overflow-x: auto;color: rgb(171, 178, 191);display: -webkit-box;font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 12px;background: rgb(40, 44, 52);border-radius: 5px;"> class LinearGLUExperts(nn.Module):<br style="outline: 0px;">    # ...<br style="outline: 0px;">    def __init__(...):<br style="outline: 0px;">        # ... <br style="outline: 0px;">        # 每个专家都创建 SwiGLU MLP 层<br style="outline: 0px;">        for i in range(num_experts):<br style="outline: 0px;">            # this matrix will be transposed when performing linear forwarding<br style="outline: 0px;">            this_expert_weight_gate = nn.Parameter(<br style="outline: 0px;">                torch.empty((size_experts[i], in_features), **factory_kwargs)<br style="outline: 0px;">            )<br style="outline: 0px;">            # this matrix will be transposed when performing linear forwarding<br style="outline: 0px;">            this_expert_weight_up = nn.Parameter(<br style="outline: 0px;">                torch.empty((size_experts[i], in_features), **factory_kwargs)<br style="outline: 0px;">            )<br style="outline: 0px;">            # this matrix will be transposed when performing linear forwarding<br style="outline: 0px;">            this_expert_weight_down = nn.Parameter(<br style="outline: 0px;">                torch.empty((out_features, size_experts[i]), **factory_kwargs)<br style="outline: 0px;">            )<br style="outline: 0px;">            self.weight_gate.append(this_expert_weight_gate)<br style="outline: 0px;">            self.weight_up.append(this_expert_weight_up)<br style="outline: 0px;">            self.weight_down.append(this_expert_weight_down)<br style="outline: 0px;">        # ...<br style="outline: 0px;"></code></pre><h1 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 24px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;"></h1><span id="OSC_h1_22"></span><h1 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 24px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">5. Mixtral 8x7B 总结 &amp; 进一步阅读</h1><ul data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);"><li style="outline: 0px;color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);"><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">Mixtral 8x7B</code>实现并不复杂，其中 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">load-balance loss</code>是 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">expert-wise</code>维度计算的 
   </section></li><li style="outline: 0px;color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     当前发布的模型还是围绕模型结构展开的， 期待 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">mistral.AI</code>上线创新的对齐方案 
   </section></li><li style="outline: 0px;color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     涉及到多机多卡的 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">sMoE</code>分布式训练非常需要工程技巧, 不同的模型架构和集群可以有多种 
    <code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: 14px;border-radius: 4px;color: rgb(30, 107, 184);background-color: rgba(27, 31, 35, 0.05);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;word-break: break-all;">DP\TP\EP..</code>组合方案， 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;"><span style="outline: 0px;color: rgb(1, 1, 1);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;">在·Mixtral·中对于实验反直觉论点，专家的知识是作用在&nbsp;</span><span style="outline: 0px;color: rgb(30, 107, 184);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;"><span style="outline: 0px;font-size: 14px;background-color: rgba(27, 31, 35, 0.05);">token&nbsp;</span></span><span style="outline: 0px;color: rgb(1, 1, 1);font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;"><span style="outline: 0px;font-size: 16px;">级别，而不是<span style="outline: 0px;color: rgb(30, 107, 184);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 14px;background-color: rgba(27, 31, 35, 0.05);">domain</span>级别，对&nbsp;<span style="outline: 0px;color: rgb(30, 107, 184);font-family: &quot;Operator Mono&quot;, Consolas, Monaco, Menlo, monospace;font-size: 14px;background-color: rgba(27, 31, 35, 0.05);">MoE&nbsp;</span>感兴趣的话可以进一步开盒分析</span></span></section></li></ul><span id="OSC_h2_23"></span><h2 data-tool="mdnice 编辑器" style="margin-top: 30px;margin-bottom: 15px;outline: 0px;font-weight: bold;font-size: 22px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;">Reference</h2><ol data-tool="mdnice 编辑器" class="list-paddingleft-1" style="margin-top: 8px;margin-bottom: 8px;padding-left: 25px;outline: 0px;letter-spacing: normal;text-align: left;text-wrap: wrap;background-color: rgb(255, 255, 255);color: black;font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, &quot;PingFang SC&quot;, Cambria, Cochin, Georgia, Times, &quot;Times New Roman&quot;, serif;font-size: 16px;"><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Mixture of Experts Explained 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     方佳瑞：MoE 训练论文解读之 Megablocks：打破动态路由限制 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     方佳瑞：MoE 训练系统之 JANUS：参数服务器助力 MoE 训练 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     方佳瑞：MoE 训练论文解读之 Tutel: 动态切换并行策略实现动态路由 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     西门宇少：对 MoE 大模型的训练和推理做分布式加速——DeepSpeed-MoE 论文速读 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     吃果冻不吐果冻皮：大模型分布式训练并行技术（八）-MOE 并行 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     孟繁续：Mixtral-8x7B 模型挖坑 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Mixtral-of-experts 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Mistral-7B 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Gshard 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Switch Transformers 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     sMoE 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Transformers-Mixtral-of-Experts 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     DeepSpeed-MoE 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     Megablocks 
   </section></li><li style="outline: 0px;"><section style="margin-top: 5px;margin-bottom: 5px;outline: 0px;line-height: 26px;color: rgb(1, 1, 1);">
     LLaMA-MoE 
   </section></li></ol><hr style="border-style: solid;border-width: 1px 0 0;border-color: rgba(0,0,0,0.1);-webkit-transform-origin: 0 0;-webkit-transform: scale(1, 0.5);transform-origin: 0 0;transform: scale(1, 0.5);"><p><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 1px;"><br>本文由 H</span><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 1px;">ugging Face 中文社区内容共建项目提供，稿件由社区成员投稿，经授权发布于 Hugging Face 公众号。文章内容不代表官方立场，文中介绍的产品和服务等均不构成投资建议。了解更多请关注公众号:</span><br></p><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-pluginname="mpprofile" data-id="MzkzNzU4MTU5Nw==" data-headimg="http://mmbiz.qpic.cn/sz_mmbiz_png/kF2wpSFV2cicD6iaT6OicQEZPOnbLvlg4888uRNd3XqaPacRjELDf5EonkxM1eLaautlN2jDcUaClUI0siaH2QlaZA/0?wx_fmt=png" data-nickname="手撕 LLM" data-alias="xiaodonggua_AIGC" data-signature="原创课程 【手撕 LLM+RLHF】" data-from="0" data-is_biz_ban="0"></mp-common-profile></section><p style="outline: 0px;font-family: system-ui, -apple-system, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0.544px;text-wrap: wrap;background-color: rgb(255, 255, 255);"><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 1px;">如果你有与开源 AI、</span><span style="outline: 0px;color: rgb(62, 62, 62);font-family: system-ui, -apple-system, &quot;system-ui&quot;, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 1px;">Hugging Face 相关的技术和实践分享内容，以及最新的开源 AI 项目发布，希望通过我们分享给更多 AI 从业者和开发者们，请通过下面的链接投稿与我们取得联系:</span></p><section style="margin: 8px;outline: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);letter-spacing: 0.578px;line-height: 1.75em;font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, Arial, sans-serif;"><span style="outline: 0px;color: rgb(136, 136, 136);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 14px;letter-spacing: 1px;">https://hf.link/tougao</span></section><p><br></p><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - Hugging Face（gh_504339124f0f）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 03:01:22 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/HuggingFace/blog/11020073</guid>
            <link>https://my.oschina.net/HuggingFace/blog/11020073</link>
            <author>
                <![CDATA[HuggingFace]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[欧盟 AI 法案已获得成员国的一致批准]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欧盟《人工智能法案 ( AI Act)》是一项基于风险的监管人工智能应用的计划。目前，欧盟成员国已经投票就该法律草案的最终文本达成<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsiliconangle.com%2F2024%2F02%2F02%2Feu-member-states-approve-landmark-ai-regulation%2F" target="_blank">一致</a>，后续将提交欧洲议会表决，这也是新法律正式颁布的最后一个步骤。</p><p><img height="449" src="https://oscimg.oschina.net/oscnet/up-6bf9f5a6ac55a4844b0cf834eef6c8cbfba.png" width="300" referrerpolicy="no-referrer"></p><p>欧盟行政部门欧盟委员会于 2021 年首次提出该立法。2023 年 12 月，立法者就法律应包括的内容达成了临时协议。12 月获得临时批准的版本要求禁止有害的 AI 能用例，例如工作场所和教育机构中的情绪识别。此外，该草案还包含旨在规范高风险神经网络（例如保险和银行部门使用的神经网络）使用的规则。</p><p>12 月版本的立法将对所谓的 high-impact GPAI（或通用人工智能）模型应用第二套规则。这些附加要求指定开发人员必须检查其模型是否存在「系统性风险」并缓解他们发现的任何问题。开发人员还必须执行某些其他任务，例如报告神经网络的能效。</p><p>该法案在 12 月获得临时批准后，启动了长达数周、涉及多个欧盟成员国的谈判进程。据 Politico 报道，德国和法国曾暗示，由于担心该法案对 AI 创新的影响，他们可能会反对该法案。奥地利据说也表达了类似的立场，因为官员们对该法的隐私条款有疑虑。</p><p>为了解决这些问题，欧盟委员会针对 AI 领域推出了"一揽子支持创新措施"。还成立了一个名为"Artificial Intelligence Office "的新监管机构，负责实施《人工智能法案》。</p><p>一个由欧盟成员国官员组成的专家组将就实施过程向欧盟委员会提供建议。专家组的工作重点之一将是确保《人工智能法案》与其他法规之间没有重叠。预计这项工作将特别强调欧盟现有的一些与医疗设备和机械有关的法规。</p><p>该法案将于本月晚些时候在欧洲议会的委员会投票之前进行。如果获得批准，该法案将进入全体会议投票。大多数参与《人工智能法案》制定的欧洲议会官员预计，该法将在不对当前版本做任何修改的情况下通过。</p><p>一旦获得通过，该法案将在欧盟官方公报上发布 20 天后生效。在新规则适用于范围内的应用程序和人工智能模型之前，将有一个分级实施期——在法规中规定的人工智能禁止使用清单开始适用之前有六个月的宽限期（可能在秋季左右）。</p><p>分阶段生效还允许在基础模型（又称通用人工智能）适用规则前留出一年时间--因此要等到 2025 年。其余大部分规则要到法律发布两年后才适用。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 02:55:22 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277667/eu-member-states-approve-ai-act</guid>
            <link>https://www.oschina.net/news/277667/eu-member-states-approve-ai-act</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌已从搜索结果页面删除「缓存链接」]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌确认已从搜索结果页面删除「缓存链接」，并表示将在不久的将来<strong>彻底移除缓存功能</strong>。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1db958065a51564516fd6ec5c09f9897ce5.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fsearchliaison%2Fstatus%2F1753156161509916873" target="_blank">https://twitter.com/searchliaison/status/1753156161509916873</a></u></em></p></blockquote><p>目前谷歌搜索结果页面不会再出现任何缓存链接，不过仍可通过在搜索框中输入搜索运算符<code>cache:</code>来访问谷歌缓存的快照—— 会自动跳转到 "https://webcache.googleusercontent.com/search?q=cache:"，如下：</p><blockquote><p><img height="686" src="https://oscimg.oschina.net/oscnet/up-b852cd9166f6ee8b84f49fc8400ce2c03ea.png" width="1244" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-452fdcf89c884ae3bf8622fa0dc0b9ac519.png" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwebcache.googleusercontent.com%2Fsearch%3Fq%3Dcache%3Aoschina.net" target="_blank">https://webcache.googleusercontent.com/search?q=cache:oschina.net</a></p></blockquote><p>谷歌表示，缓存是为了帮助用户访问页面加载太慢的网页，现在这种情况有了很大改善，因此他们决定退役该功能。</p><p>早在 2022 年，百度搜索就下线了同样的「快照功能」，当时官方的回应是「由于网页技术的发展及代际变迁所致」。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-80d269bfd3fd8c8e81068b9fa3405297dd0.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffinance.sina.com.cn%2Ftech%2Finternet%2F2022-08-01%2Fdoc-imizmscv4375142.shtml" target="_blank">https://finance.sina.com.cn/tech/internet/2022-08-01/doc-imizmscv4375142.shtml</a></u></em></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 02:52:22 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277666</guid>
            <link>https://www.oschina.net/news/277666</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OurBMC 社区入驻开源中国！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><strong><span style="background-color:#ffffff; color:#343434">近日，OurBMC 社区完成</span>开源中国<span style="background-color:#ffffff; color:#343434">（OSCHINA）企业号注册，正式入驻开源中国技术社区。OurBMC 将携手开源中国优秀开发者们，共同推进 BMC 技术快速发展，共建 BMC 繁荣生态。</span></strong></p><p style="text-align:center"><img height="400" src="https://oscimg.oschina.net/oscnet/up-f144f219c0a9452e188438fb29d3ff0243e.jpg" width="940" referrerpolicy="no-referrer"></p><p><span style="color:#343434"><span>作为国内知名的开源技术社区，OSCHINA 聚集了超过 1500 万开发者，不仅推广了</span>开源软件<span>的使用，还在提升本土开源技术能力和优化开源生态环境方面发挥了重要作用。自创建至今，经过十五年深耕与发展，结合对中国本土开源环境的深刻理解，OSCHINA 已成为推动国内开源技术进步的重要力量。</span></span></p><p><span style="color:#343434">OurBMC 社区是飞腾公司携手昆仑太科、百敖软件联合筹建的国内首个 BMC 开源根社区。在多方共同努力下，OurBMC 社区官网已于 2023 年 9 月 21 日正式上线。社区在广大成员单位齐心协力建设 OurBMC 技术生态的努力之下，已经获得了不错的成效，不仅拥有来自芯片、固件、整机、操作系统等多方向的 47 家成员单位，还建立了 4 个 SIG 并发布了 11 个代码仓。经过社区开发者的共同努力，2023 年 12 月 29 日，OurBMC 首个版本 1.0.0 正式发布。</span></p><p><span style="color:#343434">OurBMC 入驻开源中国技术社区，将携手开源中国优秀的 BMC 技术爱好者一起为社区和 BMC 生态贡献力量，共同取得更加卓越的成就。大家可通过下面两种方式访问 OurBMC 相关信息：</span></p><h3><strong>一键搜索，技术干货贴展现眼前</strong></h3><p><span style="background-color:#ffffff; color:#343434">进入<span>&nbsp;</span></span><strong>开源中国官网首页</strong><strong>-&gt;</strong><strong>右上角输入 「OurBMC」 关键词</strong><strong>-&gt;</strong><strong>点击搜索</strong><span style="background-color:#ffffff; color:#343434">，查看 OurBMC 发布的技术博客、BMC 技术资讯及 OurBMC 产品资讯等干货信息。</span></p><p style="text-align:center"><img height="388" src="https://oscimg.oschina.net/oscnet/up-339ec0f66bbf91e77e8c90d91ec02b5ebaa.png" width="1473" referrerpolicy="no-referrer"></p><h3><strong><span>复制链接，更快、更全面地了解 OurBMC</span></strong></h3><p><span style="background-color:#ffffff; color:#343434">直接访问&nbsp;<strong>开源中国 OurBMC 个人中心</strong>（</span><a href="https://my.oschina.net/ourbmc">https://my.oschina.net/ourbmc</a><span style="background-color:#ffffff; color:#343434">），查看 OurBMC 发布的相关博文、资讯，以及 OurBMC 参与的技术问答情况等。</span></p><p style="text-align:center"><img height="790" src="https://oscimg.oschina.net/oscnet/up-fd758ff0673e642d72a0410f995dac05431.png" width="1441" referrerpolicy="no-referrer"></p><p><span style="color:#343434">未来，OurBMC 将在开源中国技术社区积极回答 BMC 技术问题，同时携手广大优秀开发者共同探索 BMC 全栈技术，厚培开源土壤，持续推动 BMC 生态成熟发展。OurBMC 社区诚邀业界广大同仁积极参与社区建设和交流！</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:center"><strong><span style="color:#343434">欢迎广大开发者加入 OurBMC 社区</span></strong></p><p style="text-align:center"><strong><span style="color:#343434">开源中国 OurBMC 个人空间更多信息请访问：</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:center"><a href="https://my.oschina.net/ourbmc">https://my.oschina.net/ourbmc</a></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:8px; margin-right:8px; text-align:center"><strong><span style="color:#343434">OurBMC 社区官网更多功能请访问：</span></strong></p><p style="text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ourbmc.cn%2F" target="_blank">https://www.ourbmc.cn/</a></p><p style="text-align:center"><img alt="动态底部图片.jpeg" src="https://oss-nc-beijing-2.cecloudcs.com/ourbmc/c257f53322344116b7eea72013ffcbd5/%E5%8A%A8%E6%80%81%E5%BA%95%E9%83%A8%E5%9B%BE%E7%89%87.jpeg" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 02:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277662</guid>
            <link>https://www.oschina.net/news/277662</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[飞致云开源社区月度动态报告（2024 年 1 月）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><span><span>自 2023 年 6 月起，中国领先的开源软件公司 FIT2CLOUD 飞致云以月度为单位发布《飞致云开源社区月度动态报告》，旨在向广大社区用户同步飞致云旗下系列开源软件的发展情况，以及当月主要的产品新版本发布、社区运营成果等相关信息。</span></span></div></div><div><div><strong><span>飞致云开源大屏（2024 年 1 月）</span></strong></div><div><img alt="" height="734" src="https://oscimg.oschina.net/oscnet/up-28bfa544042627ebd282c6fc43e3d636c52.png" width="1324" referrerpolicy="no-referrer"></div><div>
   ▲图 1 飞致云开源大屏（2024.1.31 12:00） 
 </div></div><div><div><span><span>2024 年 1 月飞致云开源软件运营数据概览（统计时间为 2024.1.1～2024.1.31）</span></span></div><div><img alt="" height="602" src="https://oscimg.oschina.net/oscnet/up-d8824acee812525358db28877275c9cf6af.png" width="1400" referrerpolicy="no-referrer"></div></div><div><div><strong><span>2024 年 1 月产品发布事件</span></strong></div></div><div><div><strong><span>■</span></strong><span><span><span>&nbsp;</span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkyNTI0OTYwOQ%3D%3D%26mid%3D2247485932%26idx%3D1%26sn%3Da31d07d9ded696e6ffdc86e2bb2a8930%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>DataEase 开源数据可视化分析工具</span></strong></a></div></div><div><div><span><span>2024 年 1 月 8 日，DataEase 开源数据可视化分析平台正式发布 v2.2.0 版本。</span></span></div></div><div><div><span><span>这一版本的功能升级包括：在「模板管理」页面中，用户可以通过模板管理的批量操作功能，对已有模板进行快速重新分类、删除等维护操作；数据大屏中，支持多个组件构成的分组中某一组件的快速重新定位；仪表板中的查询组件支持了设置查询条件为必填项。此外，DataEase 开源项目组还对其他一些常用的功能进行了功能优化和问题修复。</span></span></div></div><div><div><strong><span>■</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIxOTU1ODQ4NQ%3D%3D%26mid%3D2247484330%26idx%3D1%26sn%3Dada95d0a0893b6400946c3ad6915df96%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>1Panel 开源面板</span></strong></a></div></div><div><div><span><span>2024 年 1 月 15 日，现代化、开源的 Linux 服务器运维管理面板 1Panel 正式发布 v1.9.3 版本。</span></span></div></div><div><div><span><span>在这一版本中，1Panel 新增了 PostgreSQL 数据库管理功能，并且支持设置 PHP 运行环境扩展模版。此外，1Panel 开源项目组还进行了 30 多项功能更新和问题修复。1Panel 应用商店新增了 3 款应用，并且更新了 22 款应用。</span></span></div></div><div><div><strong><span>■<span>&nbsp;</span></span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4MzkwMjM5MQ%3D%3D%26mid%3D2247485612%26idx%3D1%26sn%3Dc4f3669a65417a419a80ec9e05656efc%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>JumpServer 开源堡垒机</span></strong></a></div></div><div><div><span><span>2024 年 1 月 22 日，JumpServer 开源堡垒机正式发布 v3.10.2 LTS 版本。JumpServer 开源项目组将对 v3.10 LTS 版本提供长期的支持和维护，并定期迭代发布小版本。欢迎广大社区用户升级至 v3.10 LTS 版本，以获得更佳的使用体验。</span></span></div></div><div><div><span><span>在 v3.10.2 LTS 版本中，JumpServer 的邮件服务功能新增支持 Exchange 协议。目前 JumpServer 所支持的邮件协议包括 SMTP 协议（即简单邮件传输协议）和 Exchange 协议，为用户提供了更多的选择。同时，LDAP（即轻量目录访问协议）定时同步用户功能支持设置消息收件人，定时同步用户任务完成后，系统会自动发送消息通知给收件人。另外，资产历史账号也支持设置保留数量，以满足用户的更多安全需求</span></span></div></div><div><div><span><span>X-Pack 增强包方面，JumpServer 的 SQL Server 数据库连接支持命令审计，用户通过 Magnus 代理连接 SQL Server 数据库时，进行 CURD 操作会进行命令审计记录。</span></span></div></div><div><div><strong><span>■ MeterSphere 开源持续测试平台</span></strong></div></div><div><div><span><span>2024 年 1 月 25 日，MeterSphere 开源持续测试平台发布 v2.10.11 LTS 版本。</span></span></div></div><div><div><span><span>在这一版本中，性能测试方面，性能测试的高级配置增加选项，报告采样支持显示接口返回数据类型为图片，下载 zip 文件时支持使用流下载；测试跟踪方面，修改场景测试转性能测试时部分 CSV 文件无法解析的问题，采用批量处理的方式自动清理报告数据，增加服务启动项，对删除失败的资源报告进行删除。此外，MeterSphere 项目组还进行了 14 项漏洞修复工作。</span></span></div></div><div><div><strong><span>其他重要事件</span></strong></div></div><div><div><strong><span>■</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI4OTA1NzQ1OQ%3D%3D%26mid%3D2649624563%26idx%3D1%26sn%3D1d2576847bce8dccb2a3ffa5123fd231%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span><span>&nbsp;</span>飞致云旗下开源项目 GitHub Star 数量突破 100,000 个！</span></strong></a></div></div><div><div><span><span>2024 年 1 月 19 日，中国领先的开源软件提供商 FIT2CLOUD 飞致云宣布，其旗下开源项目在代码托管平台 GitHub 上所获得的 Star 数量已经超过 100,000 个。与此同时，飞致云旗下开源项目的月度新增软件下载次数也超过 100,000 次。</span></span></div><div><img alt="" height="720" src="https://oscimg.oschina.net/oscnet/up-813fe7e32e429dcf3dd7fbec5c220afa93d.jpg" width="1280" referrerpolicy="no-referrer"></div><div>
   ▲图 2 飞致云旗下开源项目 GitHub Star 数量突破 100,000 个 
 </div></div><div><div><span><span>在创新与并购的双轮驱动下，飞致云以「为数字经济时代创造好软件」为使命的开源生态体系不断发展壮大。目前，飞致云旗下开源项目的贡献者超过 1,700 位，有超过 7,000 位社区用户提交 Issue，Fork 总数量超过 24,000 次，PR（(Pull Request）数量超过 43,000 次。另据不完全统计，飞致云开源社区交流总人数已经超过 30,000 人。</span></span></div></div><div><div><strong><span>■</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5Mjg3NTQ1Ng%3D%3D%26mid%3D2247485254%26idx%3D1%26sn%3Dfe5bba30cc4d9ca1d7009b51e3da70f3%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span><span>&nbsp;</span>Halo Maintainer 2023 年度榜单发布</span></strong></a></div></div><div><div><span><span>2024 年 1 月 24 日，Halo 开源项目组为了感谢 245 位开发者的慷慨付出，特别发布「Halo Maintainer 2023 年度榜单」，以表彰为 Halo 项目做出突出贡献的开发者们</span></span></div></div><div><div><strong><span>■<span>&nbsp;</span></span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIxOTU1ODQ4NQ%3D%3D%26mid%3D2247484339%26idx%3D1%26sn%3D92241cdb3029010995e575b4bcb94a98%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span>1Panel 开源面板项目 GitHub Star 数量突破 15,000！</span></strong></a></div></div><div><div><span><span>截至 2024 年 1 月 24 日 14:00，1Panel 开源 Linux 服务器运维管理面板项目 GitHub Star 数超过 15,000 个。</span></span></div></div><div><div><strong><span>■</span></strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzIxOTU1ODQ4NQ%3D%3D%26mid%3D2247484345%26idx%3D1%26sn%3Dc9cbfd07aaca2d077d184b688d53bbcf%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow"><strong><span><span>&nbsp;</span>1Panel 开源面板项目致敬社区开发者</span></strong></a></div></div><div><div><span><span>2024 年 1 月 26 日，1Panel 开源项目组发布 61 位社区开发者名单，感谢他们在过去的 10 个月为 1Panel 开源项目所做出的杰出贡献。</span></span></div></div><div><div><strong><span>关于飞致云开源大屏</span></strong></div></div><div><div><span><span>飞致云开源大屏（</span></span><em><span>https://bi.fit2cloud.com/link/6CgpMHrT</span></em><span><span>）是 FIT2CLOUD 飞致云为展示其旗下开源软件的社区运营情况制作的数据仪表板。该大屏使用 DataEase 开源数据可视化分析平台制作，实时呈现飞致云开源社区近 30 日内的动态信息。<span>&nbsp;</span></span></span></div></div><div><div><span><span>广大社区用户可以通过该大屏了解飞致云旗下开源项目的 GitHub Star、Fork、Issue、贡献者等指标的数量信息，以及近 30 日内新增的 Star、Fork、下载、Issue、PR 数量等，同时该大屏还展示了飞致云旗下开源项目的 Issue 趋势、Commit 趋势、PR 趋势、Issue 生命周期等。</span></span></div></div><div><div><span><span>除了展示所有项目的汇总信息外，该大屏还支持用户分类别查看 JumpServer、DataEase、MeterSphere、Halo、1Panel、CloudExplorer Lite 六个开源项目的独立运营数据。</span></span></div></div><div>
  &nbsp; 
</div><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 01:55:37 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10997723</guid>
            <link>https://my.oschina.net/u/4736111/blog/10997723</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenAI 推出 Vision Pro 版 ChatGPT]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>OpenAI <u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2FChatGPTapp%2Fstatus%2F1753480988569866332" target="_blank">宣布</a></u>推出可在 Vision Pro 上运行的 ChatGPT，现已在&nbsp;<span>visionOS App Store 上架。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-8a4aed40a73de4363dfa0fca1453aba4efa.png" referrerpolicy="no-referrer"></p><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fventurebeat.com%2Fai%2Fopenai-launches-chatgpt-app-for-apple-vision-pro%2F" target="_blank">据 VentureBeat 报道</a></u>，苹果 Vision Pro 上的 ChatGPT 由 OpenAI 最新的大型语言模型（LLM）GPT 4 Turbo 支持。</p><p>2 月 2 日，苹果 Vision Pro 头显今日正式在美国开售，该产品有 256GB、512GB、1TB 三种存储容量供选择。苹果公司称，Vision Pro 发布时将提供 600 个新应用和游戏，ChatGPT 就是其中之一。这款混合现实头显还支持 iPad 上的 100 多万个应用程序。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-1fffde79e15f258deab1180745435097ce9.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-d001be7f7613037ebb5b017f03c1317af73.png" referrerpolicy="no-referrer"></p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-bf210a7f1224575a21c9188df7ae0b97e72.png" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 01:48:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277654/chatgpt-app-for-apple-vision-pro</guid>
            <link>https://www.oschina.net/news/277654/chatgpt-app-for-apple-vision-pro</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Zig 编程语言 2024 年全新路线图发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在最新的一次专访中，Zig 编程语言的创始人 Andrew Kelley 详细介绍了 Zig 即将发布的版本和未来规划的精彩亮点。这次更新着眼于解决关键的第三方项目问题、修复 bug、提升编译器性能以及实施增量编译的战略。同时，Andrew 还分享了关于为 Zig 软件基金会（ZSF）筹集资金和实现 1.0 版本目标的宝贵信息。</p><p><strong>即将到来的版本：专注于质量而非时间</strong></p><p>Zig 团队采取了一种独特的方法来推进即将发布的版本，即专注于完成具体任务而不是遵循严格的时间表。这一策略允许开发人员专注于交付核心特性，而不是急于发布。通过 Zig 的 GitHub 页面上的「Milestones」标签，社区成员可以跟踪进展，并将他们的项目添加到重要的第三方项目列表中，确保了广泛的兼容性和支持。</p><p><strong>提升性能与用户体验</strong></p><p>随着发布后的焦点转向解决 bug 和提高编译器性能，Zig 面临着解决超过 1,200 个已报告 bug 的挑战。减少编译时间成为提高效率的关键，旨在使开发者能够更快地测试和编辑代码。此外，Andrew 强调了增量编译在 Zig 未来发展中的核心作用，这一特性尽管目前还未实施，但预计将为游戏开发、终端应用、JavaScript 引擎和数据库等资源密集型应用带来显著的生产力提升。</p><p><strong>解决异步编程与工具支持挑战</strong></p><p>在讨论到 Zig 的异步功能和工具支持时，Andrew 坦承虽然异步编程具有巨大吸引力，但将其融入 Zig 需要克服多项技术障碍，如自定义代码生成后端和调试工具的开发。他也提到，尽管 Zig 的部分工具，如语言服务器和文档生成器，已经相当健壮，但仍有其他领域需要进一步发展。团队对持续改进持开放态度，并鼓励社区贡献。</p><p><strong>资助 Zig 软件基金会（ZSF）</strong></p><p>为了加速 Zig 的发展并实现 1.0 版本目标，Andrew 讨论了 ZSF 面临的资金挑战，指出个人捐赠目前仅占总收入的三分之一。增加来自个人和组织的资金支持将极大助力 ZSF 雇佣更多承包商，从而加快开发进程。</p><p><strong>朝向 1.0 版本迈进</strong></p><p>Zig 正致力于几个关键目标以实现 1.0 版本，包括提升编译器性能、调整语言以适应编译器优化，以及增强标准库。Andrew 强调，即使在达到 1.0 版本之前，使用 Zig 也能帮助早期识别和解决问题，他建议在源代码中引入版本声明以支持不同版本的平滑过渡。</p><p>通过这一系列措施和计划，Zig 展现了其对开发者社区的承诺和对编程语言未来的雄心壮志。随着 Zig 不断发展和改进，它有望为编程社区带来更多的创新和便利。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 04 Feb 2024 01:18:37 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277651/zig-roadmap-2024</guid>
            <link>https://www.oschina.net/news/277651/zig-roadmap-2024</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[10 年前的今天 —— Vue.js 正式问世]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Vue 官方推特账号的最新动态<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftwitter.com%2Fvuejs%2Fstatus%2F1753678155444101385" target="_blank">写道</a></u>：</p><blockquote><p>10 年前的今天（2014 年 2 月 3 日），Vue 在 Hacker News 上首次对外亮相：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D7169288" target="_blank">news.ycombinator.com/item?id=7169288</a></p><p>10 年后，Vue 已成为使用最广泛的前端项目之一，在世界各地拥有多元化的社区。</p><p><img src="https://oscimg.oschina.net/oscnet/up-75ad5ac6e8149ffa4d18fee49546a79cd6a.png" referrerpolicy="no-referrer"></p></blockquote><p>Vue.js 是由尤雨溪独立开发的开源前端框架，目前由他和其他活跃的核心团队成员维护。</p><p>在谷歌的 Creative Lab 就职期间，尤雨溪接触到 Google 团队开发的 Web 前端框架「Angular」，他对 Angular 可通过数据绑定来处理网页 DOM 的运作方式很感兴趣，并想以此为基础开发出一个功能相似，但更轻量的框架。</p><p>后来，尤雨溪将所开发出的框架命名为「Vue.js」，并在 2014 年 2 月正式对外公布，宣称让「<strong>Java MVVM 变得更简单</strong>」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-581bff0bf554afab956437fa62cb1777d18.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fnews.ycombinator.com%2Fitem%3Fid%3D7169288" target="_blank">https://news.ycombinator.com/item?id=7169288</a></u></em></p><p>在与开发者的互动交流中，尤雨溪认真解答了 Vue.js 和 Angular 在技术架构设计方面的不同之处。为了保证框架尽可能轻量，Vue.js 舍弃了依赖注入、预编译 JSX 等特性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fafe1a062037bfc8b7e2738cefe3da01c61.png" referrerpolicy="no-referrer"></p><p>根据尤雨溪在 Vue.js 正式对外发布一周后的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.evanyou.me%2F2014%2F02%2F11%2Ffirst-week-of-launching-an-oss-project%2F" target="_blank">覆盘数据</a>，他最开始在 Hacke rNews、EchoJS 和 Reddit 子版块<span>/r/javascript 这三个网站宣布了 Vue.js。</span>一天之内，Vue.js 火速占据它们榜首。</p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 08:53:49 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277597/vuejs-10yr</guid>
            <link>https://www.oschina.net/news/277597/vuejs-10yr</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[开源日报：中国首个脑机接口开源软件平台；谨慎升级 VS Code]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>欢迎阅读 OSCHINA 编辑部出品的开源日报，每天更新一期。</p><p><strong># 2024.2.2</strong></p><h2><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日要点</span></span></span></span></span></span></h2><p style="text-align:justify"><strong>OpenSource Daily</strong></p><h3><u><a href="https://www.oschina.net/news/277399" target="_blank">天津大学发布中国首个脑机接口开源软件平台 MetaBCI 研究成果</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">近日，天津大学神经工程团队在数学与计算生物学领域 SCI 一区 TOP 期刊《Computers in Biology and Medicine》上发表论文，介绍了中国首个脑机接口开源软件平台 MetaBCI 的技术架构与实现方法。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">MetaBCI 由离线分析模块 Brainda、刺激呈现模块 Brainstim 和在线数据流模块 Brainflow 三大部分构成，提供了面向 BCI 软件层面全链条开发的解决方案。</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li>面向离线分析需求，Brainda 统一了现有公开数据集接口，优化了脑电数据读取、处理流程，复现多种主要 BCI 数据分析及解码算法，以此提高研究者的算法开发效率；</li><li>面向刺激呈现需求，Brainstim 提供了简洁高效的范式设计模块，可快速创建脑机接口范式刺激界面；</li><li>面向在线开发需求，Brainflow 利用双线程、双进程编程方法实现了实时高速的数据读取、数据处理、结果反馈等功能，帮助开发者轻松搭建脑机接口在线实验系统。</li></ul><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><img src="https://oscimg.oschina.net/oscnet/up-8f4d4e3e7fbcc8a74be3635f43436fba05b.png" referrerpolicy="no-referrer"></p><h3><u><a href="https://www.oschina.net/news/277439/vscode-1-86-drops-ubuntu-18-04" target="_blank">VS Code 1.86 会导致远程开发功能无法使用</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">Visual Studio Code 今日发布的最新版<span>&nbsp;</span><u><a href="https://www.oschina.net/news/277414/vs-code-1-86-released">1.86</a></u><span>&nbsp;引入一项严重的破坏性变化，其</span>远程开发服务器工具链<span>最低环境要求的&nbsp;</span>glibc 版本提升为 2.28。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">由于&nbsp;Ubuntu 18.04 LTS 使用 glibc 2.27，因此有开发者发现自己升级到 VS Code 新版本后，使用 Remote SSH 无法连接到远程机器。</p><blockquote><p style="margin-left:0; margin-right:0"><img src="https://oscimg.oschina.net/oscnet/up-7159057b7f201b731192ad420804af1891b.png" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0"><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv2ex.com%2Ft%2F1013590" target="_blank">https://v2ex.com/t/1013590</a></em></u></p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">对于该问题，目前的解决方案有两种：</p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><strong>根据对应的发行版，升级至 Ubuntu 20.04 LTS、Debian 10 或 RHEL 8</strong></li><li><strong>降级到 VS Code 1.85</strong></li></ul><h3><u><a href="https://www.oschina.net/news/277402/allenai-olmo-truly-open-llm" target="_blank">AI2 开源新 LLM，重新定义 open AI</a></u></h3><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">艾伦人工智能研究所（Allen Institute for AI，简称 AI2）<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.allenai.org%2Fhello-olmo-a-truly-open-llm-43f7e7359222" target="_blank">宣布</a>推出一个名为 OLMo 7B 的新大语言模型，并开源发布了预训练数据和训练代码。OLMo 7B 被描述为 「一个真正开放的、最先进的大型语言模型」。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">AI2 是由已故的微软公司联合创始人保罗 - 艾伦（Paul Allen）于 2014 年在西雅图创办的一家非营利组织。该组织表示，他们开源 OLMo 模型旨在让 AI 研究社区充分了解最先进的大语言模型（LLM），从而推动自然语言处理的发展，并以科学的方式正视现有 LLM 存在的问题。</span></p><p><img src="https://oscimg.oschina.net/oscnet/up-5f4ac19f48b404e2adf9eed484a4a22035d.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">今日推荐</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-4caec6d25c5413f5ea4275653e65a5444dd.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">媒体观点</span></span></span></span></span></span></strong></h2><p><img src="https://oscimg.oschina.net/oscnet/up-90cadeca4d271edb7a2ad700c6263fdc51d.png" referrerpolicy="no-referrer"></p><hr><h2><strong><span><span><span style="color:#000000"><span><span><span style="color:#00b050">每日项目榜</span></span></span></span></span></span></strong></h2><p>GitHub 榜单：</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b98d9200d2d848543db7dae28c134e95c33.png" referrerpolicy="no-referrer"><img alt="" src="https://oscimg.oschina.net/oscnet/up-5292ae0f6e0cd094f67afe814ba672e45a7.png" referrerpolicy="no-referrer"></p><blockquote><h4><span style="background-color:#e67e22">在线阅读完整日报内容，访问：</span><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC008%E6%9C%9F%EF%BC%9A%E6%8E%A8%E5%8A%A8%E4%B8%AD%E5%9B%BD%E5%BC%80%E6%BA%90%E8%BD%AF%E7%A1%AC%E4%BB%B6%E5%8F%91%E5%B1%95%E7%9A%84%E7%BB%8F%E9%AA%8C%E4%B8%8E%E5%BB%BA%E8%AE%AE.pdf" target="_blank"><span style="background-color:#e67e22">开源日报第 008 期：推动中国开源软硬件发展的经验与建议</span></a></u></h4></blockquote><hr><p><strong>往期回顾</strong></p><ul><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC007%E6%9C%9F.pdf">开源日报第 007 期：「Linux 中国」 开源社区宣布停止运营</a></u></li><li><u><a href="https://oscimg.oschina.net/public_shard/%E5%BC%80%E6%BA%90%E6%97%A5%E6%8A%A5%E7%AC%AC006%E6%9C%9F%EF%BC%9A%E9%80%89%E6%8B%A9%E6%8A%80%E6%9C%AF%E6%A0%88%E4%B8%80%E5%AE%9A%E8%A6%81%E9%80%89%E6%8B%A9%E5%BC%80%E6%BA%90%E7%9A%84.pdf" target="_blank">开源日报第 006 期：选择技术栈一定要选择开源的</a></u></li><li><a href="http://www.oschina.net/news/277040"><u>开源日报第 005 期：RISC-V 万兆开源交换机发售；npm 存在大量武林外传视频</u></a></li><li><u><a href="https://www.oschina.net/news/276864" target="news">开源日报第 004 期：百度输入法在候选词区域植入广告；大神用 Excel 构建 CPU</a></u></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 06:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277585</guid>
            <link>https://www.oschina.net/news/277585</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FastGateway：一个可以用于代替 Nginx 的网关]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在我本人研究 Yarp 的时候经常用于公司项目的业务网关代理，这时候就个大佬问我是否可以实现动态加载 HTTPS 证书？那时候我说不太可能实现，然而在某一天我看到</p><p>微软使用 Yarp 代替了 Nginx 吞吐量提升了百分之八十！</p><p><img height="2340" src="https://oscimg.oschina.net/oscnet/up-9b031c83a55889ff53d2b4981411def100f.png" width="1080" referrerpolicy="no-referrer"></p><p>这个时候我就萌生了自己使用 yarp 造一个 Gateway 的项目，应为我本身也经常使用 nginx 作为网关，但是 nginx 的使用总得写 conf，然后重启我的 nginx，并且还需要配置证书重启，我就在想是否可以实现界面管理，并且完全动态管理？</p><p>然后我们的 FastGateway 项目就诞生了，下面我们介绍一下我们的 FastGateway 的项目简单案例</p><p>## FastGateway</p><p>我们的 FastGateway 提供了俩个容器，一个是代理服务，一个是前端服务</p><p>一般简单使用就可以直接使用我们的 docker-compose 构建，非常简单</p><p>FastGateway 支持哪些功能？</p><ul><li><span>&nbsp;</span>登录授权&nbsp; 
  <ul><li>通过环境变量简单设置账号密码</li></ul></li><li><span>&nbsp;</span>动态路由管理 
  <ul><li>完全界面操作并且实时更新</li></ul></li><li><span>&nbsp;</span>动态配置证书管理 
  <ul><li>完全界面操作并且实时更新</li></ul></li><li><span>&nbsp;</span>dashboard 监控 
  <ul><li>提供了简单数据监控，后续还会提供更完善的功能</li></ul></li><li><span>&nbsp;</span>静态文件服务代理 
  <ul><li>使用中间件简单实现了静态文件代理（Yarp 默认是不支持静态文件代理）</li></ul></li><li><span>&nbsp;</span>穿透隧道功能 
  <ul><li>只需要提供一个公网的 Gateway 服务端，然后下载我们的 Gateway 的客户端就可以将客户端的局域网的服务映射到外网（只支持 http 协议的服务）</li></ul></li><li><span>&nbsp;</span>出入口流量监控 
  <ul><li>基于 Kestrel 实现出入口流量监控，还提供当前服务器的所有网卡的出入流量实时监控</li></ul></li></ul><h2>技术栈</h2><h3>后端技术栈</h3><ul><li>Asp.Net 8.0 用于提供基础服务</li><li>Yarp 用于提供反向代理服务</li><li>FreeSql 用于提供数据库服务</li><li>JWT 用于提供登录授权服务</li><li>MiniApis 提供 WebApi 服务</li></ul><h3>前端技术栈</h3><ul><li>reset-css 用于重置浏览器默认样式</li><li>axios 用于发送 http 请求</li><li>semi 用于提供基础组件</li><li>react-router-dom 用于路由管理</li></ul><h2>镜像执行指令</h2><div><div><pre><span><span style="color:#0086b3">mkdir </span>data</span><span>docker run <span style="color:#ffcc55">-d</span><span style="color:#ffcc55">--restart</span> always <span style="color:#ffcc55">--name</span> gateway-api <span style="color:#ffcc55">-p</span> 8000:8000 <span style="color:#ffcc55">-p</span> 8200:8080 <span style="color:#ffcc55">-p</span> 8300:8081 <span style="color:#ffcc55">-v</span><span style="color:orange">$(</span><span style="color:#0086b3">pwd</span><span style="color:orange">)</span>/data:/data/ registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span><span>docker run <span style="color:#ffcc55">-d</span><span style="color:#ffcc55">--restart</span> always <span style="color:#ffcc55">--privileged</span><span style="color:#ffcc55">--name</span> gateway-web <span style="color:#ffcc55">-p</span> 10800:80 <span style="color:#ffcc55">-e</span><span style="color:#ffaa44">api_url</span><span>=</span>http://localhost:8000 registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></pre><div>
   &nbsp;
  </div></div></div><h2>Docker-Compose 文件</h2><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供给 web 端调用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span><span style="color:#888888"># 请注意手动创建 data 目录，负责在 Linux 下可能出现权限问题导致无法写入</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">build</span><span>:</span></span><span><span style="color:#008080">context</span><span>:</span><span style="background-color:transparent; color:#00aadd">../web</span></span><span><span style="color:#008080">dockerfile</span><span>:</span><span style="background-color:transparent; color:#00aadd">Dockerfile</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">如果并没有提供账号密码则默认</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">账号：root</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">密码：Aa010426.</p><h2>替换默认的 https 证书</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">由于需要使用 https，为了方便系统默认提供了一个 pfx 证书，如果你需要提供的话可以按照以下操作进行，如果是 Docker 执行的话证书的目录则是<span>&nbsp;</span><code>/app/certificates/gateway.pfx</code></p><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供给 web 端调用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">HTTPS_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">HTTPS_FILE</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway.pfx</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./app/certificates:/app/certificates</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-web</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">参考上面的 docker-compose 文件，我们提供了俩个环境变量<code>HTTPS_PASSWORD</code>，<code>HTTPS_FILE</code>，</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><code>HTTPS_FILE</code>：</p><ul><li>在系统中已经指定了容器的<code>/app/certificates</code>目录，你只想要挂在目录中的文件名即可</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><code>HTTPS_PASSWORD</code>：</p><ul><li>Pfx 证书的密码，如果修改了证书请填写证书的密码。</li></ul><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><code>/app/certificates</code>：</p><ul><li>这个是系统证书默认存放目录，如果映射了目录则需要提供自己的证书。</li></ul><h2>使用隧道</h2><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">HTTPS_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">TUNNEL_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">HTTPS_FILE</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway.pfx</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供给 web 端调用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./app/certificates:/app/certificates</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-web</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre><div>
   &nbsp;
  </div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">增加<code>TUNNEL_PASSWORD</code>环境变量，默认为空不设置密码</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">下载隧道客户端<span>&nbsp;</span><a href="https://gitee.com/hejiale010426/Gateway/releases">https://gitee.com/hejiale010426/Gateway/releases</a><span>&nbsp;</span>然后解压压缩包，打开 appsettings.json 文件修改 Tunnel 节点的 Url，如果 Gateway 使用了 TUNNEL_PASSWORD，那么你的 URL 应该是<code>https://localhost:8081/api/gateway/connect-h2?host=backend1.app&amp;password=dd666666</code>，<span>&nbsp;</span><code>host</code>是在集群中的集群端点的域名，这个域名就是定义到我们的隧道客户端的<code>host</code>的这个参数，请保证值的唯一性，当绑定集群的路由匹配成功以后则会访问图片定义的端点，如果并没有存在节点那么他会直接代理。</p><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left"><img alt="输入图片说明" src="https://gitee.com/hejiale010426/FastGateway/raw/master/img/%E9%9B%86%E7%BE%A4-01.png.png" referrerpolicy="no-referrer"></p><h2>出入流量监控</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用环境变量控制是否启用流量监控，使用环境变量<code>ENABLE_FLOW_MONITORING</code>设置我们是否启用流量监控，如果为空则默认启动流量监控，然后可以打开我们的控制面板查看流量监控的数据。</p><div><div><pre><span><span style="color:#008080">services</span><span>:</span></span><span><span style="color:#008080">gateway-api</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-api</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-api</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">USER</span><span>:</span><span style="background-color:transparent; color:#00aadd">root</span></span><span><span style="color:#008080">PASS</span><span>:</span><span style="background-color:transparent; color:#00aadd">Aa010426.</span></span><span><span style="color:#008080">HTTPS_PASSWORD</span><span>:</span><span style="background-color:transparent; color:#00aadd">dd666666</span></span><span><span style="color:#008080">HTTPS_FILE</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway.pfx</span></span><span><span style="color:#008080">ENABLE_FLOW_MONITORING</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8000:8000</span><span style="color:#888888"># 提供给 web 端调用的管理接口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8200:8080</span><span style="color:#888888"># Http 代理端口</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">8300:8081</span><span style="color:#888888"># Https 代理端口</span></span><span><span style="color:#008080">volumes</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./data:/data/</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">./app/certificates:/app/certificates</span></span><span><span style="color:#008080">gateway-web</span><span>:</span></span><span><span style="color:#008080">image</span><span>:</span><span style="background-color:transparent; color:#00aadd">registry.cn-shenzhen.aliyuncs.com/tokengo/gateway-web</span></span><span><span style="color:#008080">restart</span><span>:</span><span style="background-color:transparent; color:#00aadd">always</span></span><span><span style="color:#008080">container_name</span><span>:</span><span style="background-color:transparent; color:#00aadd">gateway-web</span></span><span><span style="color:#008080">privileged</span><span>:</span><span style="color:turquoise">true</span></span><span><span style="color:#008080">environment</span><span>:</span></span><span><span style="color:#008080">api_url</span><span>:</span><span style="background-color:transparent; color:#00aadd">http://localhost:8000</span></span><span><span style="color:#008080">ports</span><span>:</span></span><span><span>-</span><span style="background-color:transparent; color:#00aadd">10800:80</span></span></pre></div></div><p>&nbsp;</p><p>开源地址：<a href="https://gitee.com/hejiale010426/FastGateway">FastGateway: FastGateway 一个超级简单方便的网关，基于 Kestrel+Yarp 实现的网关。 支持动态配置路由，支持动态配置集群，支持动态配置 HTTPS 证书，无需重启即可使用。 (gitee.com)</a></p><p>&nbsp;</p><p><strong>效果图</strong></p><p><img height="974" src="https://oscimg.oschina.net/oscnet/up-213cad83fbc8f296333c9970b2dee268483.png" width="1480" referrerpolicy="no-referrer"></p><p>&nbsp;</p><p><img height="979" src="https://oscimg.oschina.net/oscnet/up-64949f2af7f4f1cd4a212c94f185ba0df7d.png" width="1485" referrerpolicy="no-referrer"></p><p><img height="986" src="https://oscimg.oschina.net/oscnet/up-57d5ac2dcda53c11dc8019ca721f9835f84.png" width="1489" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 03:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277575</guid>
            <link>https://www.oschina.net/news/277575</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[扎克伯格解释 Meta 为什么要开源其 AI 技术]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在今天的 2023 年第四季度财报电话会议中，马克 - 扎克伯格解释 Meta 为什么要开源其 AI 技术。</p><p>Meta 开源其 AI 技术是出于推动技术创新、提升模型质量、建立行业标准、吸引人才、增加透明度和支持其长期战略的考虑。这不仅有助于 Meta 在竞争激烈的 AI 领域保持领先地位，也有助于推动整个行业的前进。</p><p>1. <strong>促进行业创新</strong>: 通过开源 AI 模型，Meta 可以鼓励全球的开发者、研究人员和公司利用这些技术进行创新。这种共享精神有助于加速 AI 技术的进步，并推动新应用和服务的开发。</p><p>2. <strong>提高模型质量</strong>: 开源允许更广泛的社区参与到模型的测试和改进中来。来自全球的贡献可以帮助发现并修复错误，提出改进意见，从而提高模型的性能和可靠性。</p><p>3. <strong>建立行业标准</strong>: 通过将自己的技术开源，Meta 有机会塑造行业标准和最佳实践。这种影响力可以确保 Meta 在 AI 领域的技术和方法得到广泛接受和使用，从而加强其市场地位。</p><p>4. <strong>吸引和保留人才</strong>: 开源项目通常对研究人员和开发者具有吸引力。通过贡献于开放且受尊重的项目，Meta 可以吸引顶尖人才加入，这对于维持其在 AI 领域的竞争优势至关重要。</p><p>5. <strong>提升安全性和透明度</strong>: 开源 AI 模型可以提高透明度，让外部研究人员和公众能够更好地理解模型的工作原理和潜在影响。这有助于识别和缓解与 AI 应用相关的风险和伦理问题，从而增强公众对 AI 技术的信任。</p><p>6. <strong>支持长期战略</strong>: Meta 开源 AI 技术也是其长期战略的一部分，旨在确保公司在 AI 和机器学习领域的长期领导地位。通过开源，Meta 可以推动整个生态系统的发展，为自己的产品和服务创造更多的创新机会。</p><blockquote><p>本文已获授权。</p><p>完整内容参考：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fs21.q4cdn.com%2F399680738%2Ffiles%2Fdoc_financials%2F2023%2Fq4%2FMETA-Q4-2023-Earnings-Call-Transcript.pdf" target="_blank">https://s21.q4cdn.com/399680738/files/doc_financials/2023/q4/META-Q4-2023-Earnings-Call-Transcript.pdf</a><br> 译文：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaoyu.io%2Ftranslations%2Fmeta%2Fmark-zuckerberg-explains-why-meta-open-sources-its-ai" target="_blank">https://baoyu.io/translations/meta/mark-zuckerberg-explains-why-meta-open-sources-its-ai</a></p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 03:01:36 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277568</guid>
            <link>https://www.oschina.net/news/277568</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌 Bard 支持文本生成图像功能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>谷歌对话式 AI 工具&nbsp;<span style="font-family:-apple-system,BlinkMacSystemFont,&quot;Apple Color Emoji&quot;,&quot;Segoe UI Emoji&quot;,&quot;Segoe UI Symbol&quot;,&quot;Segoe UI&quot;,&quot;PingFang SC&quot;,&quot;Hiragino Sans GB&quot;,&quot;Microsoft YaHei&quot;,&quot;Helvetica Neue&quot;,Helvetica,Arial,sans-serif">Bard 近日发布了更新，此次更新后将支持文生图和扩展双重检查功能。</span></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-1a225c71ee0e459f8cfa6a7ac710106c3f6.png" referrerpolicy="no-referrer"><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbard.google.com%2Fupdates" target="_blank">https://bard.google.com/updates</a></u></em></p></blockquote><p><strong>Bard 此次新增的图像生成功能将在全球受支持的地区免费提供，由谷歌 Imagen 2 模型提供支持，但需要英语指令</strong>。用户现在可以根据向 Bard 提供的描述生成自定义图像。谷歌承诺，Bard 可提供「高质量、逼真的图像输出」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-4b6453ff6415cb9ad30a9eab1cd5a61b3cb.png" referrerpolicy="no-referrer"></p><p>谷歌表示，Imagen 2 不会生成暴力、攻击性或包含色情内容的图片。此外，Imagen 2 还接受了一些「培训」，可以帮助它避免创建特定人群的图像。为将 Bard 生成的 AI 图片与人类作品区分开来，谷歌将嵌入「像素级别」的数字可识别水印。</p><p>Bard 在此次更新之后，谷歌 Gemini Pro 模型新增了 40 多种语言、230 多个国家和地区的支持。</p><p>谷歌表示，Gemini Pro 增强了 Bard 的理解、总结、推理、创意、协作和规划方面的能力。谷歌还将 Bard 的「双重检查」功能扩展到 40 多种语言，用户可以通过检查整个互联网的内容来验证 AI 所作回答的准确性。在此之前，「双重检查」功能仅限于英语。</p><p>详情查看&nbsp;<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.google%2Ftechnology%2Fai%2Fgoogle-imagen-2%2F" target="_blank">https://blog.google/technology/ai/google-imagen-2/</a></u></p></div>
                                    ]]>
            </description>
            <pubDate>Sat, 03 Feb 2024 02:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277567/bard-ai-image-generation</guid>
            <link>https://www.oschina.net/news/277567/bard-ai-image-generation</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin V23 最后一个测试版本 ——Beta3 来了！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify"><span>deepin V23 最后一个测试版本——Beta3&nbsp;来了！</span></p><p style="color:#020000; margin-left:0; margin-right:0"><span>deepin V23 Beta3 版本对镜像预装包中 1400+ 包进行升级，新增了 250+ 软件包系统更新，并进一步优化功能体验，包括：</span></p><ul><li><p style="color:#020000; margin-left:0; margin-right:0"><span>安装器支持 768P、1080P、2K、4K 屏幕界面自适应；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>支持 Steam 原生应用正常安装和游戏运行；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>系统底层依赖的更新升级：GCC、Qt、glibc 等等；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>对启动器进行了代码层面重构提升了运行速度；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>控制中心-时间日期-区域-国家地区支持根据用户所在的区域语言，设置本土化时间、日期格式；</span></p><p style="color:#020000; margin-left:0; margin-right:0"><span>......</span></p></li></ul><p style="color:#020000; margin-left:0; margin-right:0"><span>感谢每一位 deepiner 提供想法与建议，让我们一起为打造美观易用、安全可靠的开源操作系统而努力！</span></p><p style="margin-left:0px; margin-right:0px; text-align:center"><u><span><strong>&nbsp;</strong></span><span><strong>功能新增</strong></span><span><strong>&nbsp;</strong></span></u></p><p><strong><span style="color:#01a0e7">【系统/安装】</span></strong></p><ul><li><p><span style="background-color:#ffffff; color:#020000">镜像安装时 Grub 页面 safe 模式后增加了说明提示性文字</span><span style="background-color:#ffffff; color:#020000">，避免用户因不理解而错误使用 safe 模式安装问题；</span></p></li><li><p><span>安装器支持 768P、1080P、2K、4K 屏幕界面自适应；</span></p></li><li><p><span>对部分 i386 设备驱动进行了支持；</span></p></li><li><p><span>支持了 Steam 原生应用正常安装和游戏运行。</span></p></li></ul><p><strong><span style="color:#01a0e7">【系统仓库】</span></strong></p><ul><li><p><span>大量系统底层库得到更新，系统仓库整体约 4000+ 软件包更新 (包括新增软件包)&nbsp;添加了 i386、RISC-V64、LoongArch64 架构支持；</span></p></li><li><p><span>GCC 更新到 13.2 版本；</span></p></li><li><p><span>glibc 更新到 2.37；</span></p></li><li><p><span>ICU 更新到 73.2；</span></p></li><li><p><span>Qt6 更新到 6.6.1；</span></p></li><li><p><span>FFmpeg 更新到 6.0；</span></p></li><li><p><span>Mesa 更新到 23.3.3；</span></p></li><li><p><span>Python 默认版本更新到 3.11；</span></p></li><li><p><span>Perl 更新到 5.36；</span></p></li><li><p><span>LLVM 默认版本更新到 16。</span></p></li></ul><p><strong><span style="color:#01a0e7">【桌面环境】</span></strong></p><ul><li><p><span>对启动器进行了代码层面重构提升了运行速度；</span></p></li><li><p><span>优化了功能布局与界面 UI 设计细节，提升了整体视觉效果；</span></p></li><li><p><span>对键盘选中状态与鼠标 hover 状态进行状态区分；</span></p></li><li><p><span>新增增加字母表功能，可通过字母表进行应用快速检索；</span></p></li><li><p><span>对通知图标和时间日期点击换出内容进行优化；</span></p></li><li><p><span>通知中心中增加了日历组件；</span></p></li><li><p><span>优化了通知中心清除通知消息图标，解决了错误图标给用户带来的误导；</span></p></li><li><p><span>优化了控制中心-网络-VPN-导入操作按钮图标样式；</span></p></li><li><p><span>控制中心-账户头像中新增创意插图分类；</span></p></li><li><p><span>控制中心-账户头像-人物头像中增加了立体风格素材图片；</span></p></li><li><p><span>控制中心-通用新增启动动画设置项；</span></p></li><li><p><span>控制中心-蓝牙支持蓝牙设备剩余电量显示；</span></p></li><li><p><span>控制中心-账户密码登录、锁屏管理功能进行了统一管理；</span></p></li><li><p><span>控制中心-声音-音频增加外设插拔管理中插拔音频设备是否暂停播放进行管理；</span></p></li><li><p><span>控制中心-声音-多媒体音频框架高级设置，可切换音频框架；</span></p></li><li><p><span>控制中心-时间日期-区域-国家地区支持根据用户所在的区域语言，设置本土化时间、日期格式；</span></p></li><li><p><span>控制中心-网络设置中 IPV4\IPV6 方法设置项中增加了禁用选项；</span></p></li><li><p><span>控制中心-电源-通用，性能模式功能中增加了说明文字；</span></p></li><li><p><span>控制中心-电源-通用，对 Intel、AMD 内存增加了电源性能管理选项。</span></p></li></ul><p><strong><span style="color:#01a0e7">【UOS AI】</span></strong></p><ul><li><p><span>系统预装了 UOS AI 插件，用户可使用 UOS AI；</span></p></li><li><p><span>提供了免费的 AI 试用帐号，可在系统中使用 UOS AI 功能；</span></p></li><li><p><span>对了接了主流的 AI 模型接口，用户可使用自有的 AI 帐号进行绑定使用。</span></p></li></ul><p><strong><span style="color:#01a0e7">【日历】</span></strong></p><ul><li><p><span>日历应用更新了 2024 年法定休假安排。</span></p></li></ul><p><strong><span style="color:#01a0e7">【应用商店】</span></strong></p><ul><li><p><span>新增 deepin ID 同步应用下载记录功能；</span></p></li><li><p><span>新增用户提交心愿单，反馈所需应用功能；</span></p></li><li><p><span>应用更新页面，忽略应用更新功能；</span></p></li><li><p><span>应用更新/应用管理页面支持搜索已安装应用；</span></p></li><li><p><span>针对应用商店内付费应用添加提示。</span></p></li></ul><p><strong><span style="color:#01a0e7">【文件管理器】</span></strong></p><ul><li><p><span>新增右键菜单增加反选选项；</span></p></li><li><p><span>新增右键菜单显示快捷键功能；</span></p></li><li><p><span>新增右键文件属性复制信息；</span></p></li><li><p><span>新增窗口主视图筛选搜索功能；</span></p></li><li><p><span>新增远程环境是否展示缩略图预览设置项；</span></p></li><li><p><span>设置中增加复选项「列表视图以树形结构展示」功能设置项；</span></p></li><li><p><span>对文管图标视图布局进行优化，提升空间利用率；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>对侧边栏目录显示规则进行优化。</span></p></li></ul><p style="margin-left:0px; margin-right:0px; text-align:center"><u><span><strong>&nbsp;</strong></span><span><strong>用户反馈修复</strong></span><span><strong>&nbsp;</strong></span></u></p><p><strong><span style="color:#01a0e7">【DDE】</span></strong></p><ul><li><p><span>修复在商店中卸载应用后，桌面图标消失了，但是启动器中的图标没有消失问题；</span></p></li><li><p><span>修复启动器应用分类中的应用展示顺序及位置不正确；</span></p></li><li><p><span>修复打开应用如音乐，将音乐托盘图片拖动至任务栏，重新打开应用，托盘区域出现两个音乐图标问题；</span></p></li><li><p><span>修复开启托盘驻留应用后，任务栏重复拖动托盘图标导致托盘区域图标消失问题；</span></p></li><li><p><span>修复外接显示器后断开显示器连接，快捷面板中亮度调节插件无法恢复问题；</span></p></li><li><p><span>修复了在调整屏幕缩放比例后等待时间过长问题；</span></p></li><li><p><span>修复控制中心-网络无法连接或断开时，deepin ID 账户头像无法正常显示异常问题；</span></p></li><li><p><span>修复控制中心-更新设置项玲珑软件更新按钮关闭后,系统重启后变为开启状态,未记住用户设置；</span></p></li><li><p><span>修复切换主题时，主题切换成功但壁纸为上一主题的壁纸问题；</span></p></li><li><p><span>修复任务栏插件面板中屏幕键盘图标展示为白色图标，导致无法看清图标问题；</span></p></li><li><p><span>修复在终端安装 Libreswan 后，控制中心网络模块图标消失问题；</span></p></li><li><p><span>修复鼠标移动至任务栏快捷面板面板边缘错误显示可调整大小问题；</span></p></li><li><p><span>修复在任务栏快捷面板中，使用鼠标滚轮调整显示亮度时，亮度值在 28 和 56 时就无法继续滚动设置问题；</span></p></li><li><p><span>修复设置系统窗口圆角为直角，添加或修改系统时区时世界地图二级窗口圆角未跟随系统设置变化问题；</span></p></li><li><p><span>修复部分机型进入桌面后，关闭飞行模式后，无线网络搜索不到网络问题；</span></p></li><li><p><span>修复控制中心工作区相关的快捷键修改后，快捷键没有响应问题；</span></p></li><li><p><span>修复控制中心声音模块中的设备管理-输入设备和输出设备开关无实际作用问题。</span></p></li></ul><p><strong><span style="color:#01a0e7">【文件管理器】</span></strong></p><ul><li><p><span>修复深色模式下，重命名文件名称时右键菜单命令前的图标展示为黑色无法看清问题；</span></p></li><li><p><span>修复在 NTFS 格式磁盘中新建文件夹包含有空格字符结尾的文件夹无法创建成功，提示设备或资源繁忙问题；</span></p></li><li><p><span>修复从回收站复制文件夹到任意位置进行粘贴操作时会提示该文件夹已存在的错误提示；</span></p></li><li><p><span>修复在 SMB 上删除 .gif 格式图片无法删除成功，提示删除失败文件繁忙问题；</span></p></li><li><p><span>修复从 Ext4 格式分区复制或剪切文件夹名称中空格结尾的文件夹至 NTFS 格式分区时，无法复制或剪切成功问题；</span></p></li><li><p><span>修复从本机硬盘往 U 盘或移动硬盘复制或剪贴文件时进度和文件夹窗口消失，文件复制中断问题；</span></p></li><li><p><span>修复文件进行替换操作时，提示信息中展示的文件大小信息与实际文件大小信息不一致问题；</span></p></li><li><p><span>修复 Chrome 谷歌浏览器创建桌面应用快捷方式，生成网站 icon 失败问题。</span></p></li></ul><p><strong><span style="color:#01a0e7">【终端】</span></strong></p><ul><li><p><span>修复在任意目录右键点击，选择「在终端中打开」，都会被定位到家目录的问题；</span></p></li><li><p><span>修复终端分屏分辨率不一致时，雷神窗口宽度可能过小的问题；</span></p></li><li><p><span>修复新建用户登录系统，打开终端后未展示当前用户名、机器名称、当前路径等信息问题；</span></p></li><li><p><span>修复连接 4K 屏幕扩展模式下，在 4K 屏幕按 Alt F2 打开雷神终端，将鼠标移动到另一屏幕按 Alt F2 时，雷神终端显示异常问题；</span></p></li><li><p><span>双屏扩展模式下，在主屏 Alt F2 打开雷神终端,点击屏幕空白处，再将鼠标移动到另一屏幕按 Alt F2 时，出现两个雷神终端问题；</span></p></li><li><p><span>将主题设置为跟随系统后，再将鼠标移动到深色时，预览图的标题栏没有同步展示为深色问题；</span></p></li><li><p><span>调换切换前后标签页快捷键为正确顺序；</span></p></li><li><p><span>修复雷神窗口无法设置模糊的问题；</span></p></li><li><p><span>Dirty Fix 改为部分刷新光标后的显示问题；</span></p></li><li><p><span>修复无法打开未以&nbsp;「 / 」&nbsp;结尾带端口号链接的问题；</span></p></li><li><p><span>修复调整窗口大小时刷新大量 debug 日志的问题；</span></p></li><li><p><span>修改右键菜单打开文件/文件夹时的调用方式。</span></p></li></ul><p><strong><span style="color:#01a0e7">【深度之家】</span></strong></p><ul><li><p><span>修复提交反馈中邮箱文本框中，输入的文本中&nbsp;@&nbsp;字符不允许以首字符或中间字符输入问题；</span></p></li><li><p style="margin-left:0; margin-right:0"><span>修复点击主菜单图标，无法收起已经展开菜单。</span></p></li></ul><p><strong><span style="color:#01a0e7">【玲珑】</span></strong></p><ul><li><p><span>修复右键 Markdown 文件，以玲珑 MarkText 软件打开时可打开软件未显示文档内容问</span><span>题；</span></p></li><li><p><span>修复在启动器中设置玲珑为开机自启动后，玲珑应用启动过程中自动闪退问题；</span></p></li><li><p><span>修复了玲珑环境变量丢失问题；</span></p></li><li><p style="margin-left:0; margin-right:0"><span>修复浏览器更新版本后，无法播放网页视频问题。</span></p></li></ul><p><strong><span style="color:#01a0e7">【已知待修复问题】</span></strong></p><ul><li><p><span>更新了系统时区库，可能导致安装完成后区错误需进入控制中心中重新设置；</span></p></li><li><p><span>部分华为终端声音设备输出异常，需要刷新 BIOS 或更新内核至 6.6 后才可解决；</span></p></li><li><p><span>部分机型双屏扩展模式下，启动器全屏模式时，启动器会显示在另一个屏幕上；</span></p></li><li><p><span>双屏扩展模式下，启动器偶现在两个屏幕中间显示；</span></p></li><li><p><span>启动器全屏时，点击任务栏中应用图标打开应用，启动器未自动退出；</span></p></li><li><p><span>启动器全屏模式下未铺满整个屏幕；</span></p></li><li><p><span>启动器开启按下截图快捷键启动器被隐藏；</span></p></li><li><p><span>启动器全屏时按下右键菜单并滚动屏幕菜单不会被隐藏。</span></p></li></ul><p><span><span style="background-color:#ffffff; color:#020000">以上就是 deepin V23 Beta3 版本更新的主要内容，欢迎下载体验，并将所遇到的问题反馈给我们。</span></span></p><p><strong><span style="background-color:#ffffff; color:#020000">镜像下载地址：</span></strong><span style="background-color:#ffffff; color:#020000">www.deepin.org/download/</span></p><p style="color:#020000; margin-left:0; margin-right:0; text-align:justify"><strong>注意事项：</strong></p><ul><li><p style="color:#020000; margin-left:0; margin-right:0"><span>升级过程中不要锁屏、待机、关机、重启等；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>升级前请保证系统根分区拥有足够的备份空间和更新空间；</span></p></li><li><p style="color:#020000; margin-left:0; margin-right:0"><span>保留用户数据重装系统，可能会导致安装完成后无法启动。</span></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 10:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5046223/blog/11023703</guid>
            <link>https://my.oschina.net/u/5046223/blog/11023703</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Zabbix7.0 beta1 发布，性能提升、架构优化等新功能抢先看]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 16px;"><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020572" data-ratio="0.6055555555555555" data-s="300,640" src="https://oscimg.oschina.net/oscnet/6d5f4663-24d1-4652-acc5-0204d0a20461.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><a title="https://www.zabbix.com/cn/download_sources#pre-release" formlinkparm="[{&quot;href&quot;:&quot;https://www.zabbix.com/cn/download_sources#pre-release&quot;}]" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zabbix.com%2Fcn%2Fdownload_sources%23pre-release" target="_blank" rel="noopener noreferrer" powered-by="xiumi.us" data-linktype="2"><p style="text-align: center;text-wrap: wrap;"><span style="font-size: 15px;font-family: Optima-Regular, PingFangTC-light;">点击立即试用 Zabbix7.0&nbsp;</span><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;color: inherit;">beta1</span></p></a><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="font-size: 15px;line-height: 1.5;letter-spacing: 1px;font-family: Optima-Regular, PingFangTC-light;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong><span style="color: rgb(212, 0, 0);">Zabbix7.0 beta 1 于 1 月 30 日发布！</span></strong><span style="color: rgb(38, 33, 33);">（正式版将于第一季度发布。）</span></p><p style="text-wrap: wrap;"><strong><span style="color: rgb(212, 0, 0);">7.0 有什么新功能？本文<span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;letter-spacing: 1px;text-wrap: wrap;">一睹为快。</span></span></strong></p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">Zabbix7.0 聚焦于帮助用户通过性能优化和功能升级来快速响应业务需求，从而<span style="color: rgb(212, 0, 0);">满足客户的高期望值，并提升 IT 运维人员的生产力</span>。在可扩展性与性能、稳定性与高可用、可观测性几个领域获得持续提升。</p><p style="text-wrap: wrap;"><br></p></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: top;align-self: flex-start;flex: 100 100 0%;padding: 22px 28px;border-style: solid;border-width: 0px 0px 0px 2px;border-left-color: rgb(230, 15, 11);height: auto;margin-left: 20px;background-color: rgb(255, 249, 241);"><section style="text-align: justify;font-size: 15px;line-height: 1.5;letter-spacing: 1px;font-family: Optima-Regular, PingFangTC-light;" powered-by="xiumi.us"><p style="text-wrap: wrap;">一、性能提升之异步数据采集</p><p style="text-wrap: wrap;">1.各进程配置参数说明</p><p style="text-wrap: wrap;">2.异步数据采集效果</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">二、架构优化之 Zabbix Proxy 高可用和负载均衡</p><p style="text-wrap: wrap;">1.主机如何分配给 Zabbix Proxy group 监控</p><p style="text-wrap: wrap;">2.高可用和负载均衡机制</p><p style="text-wrap: wrap;">3.Zabbix Agent 参数配置</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">三、性能提升之 Zabbix Proxy 内存缓存</p><p style="text-wrap: wrap;">1.缓存模式设置</p><p style="text-wrap: wrap;">2.缓存模式差异</p><p style="text-wrap: wrap;"><br></p><p style="text-wrap: wrap;">四、功能优化之监控项级别 Timeout</p><p style="text-wrap: wrap;">五、性能提升之并行网络自动发现</p><p style="text-wrap: wrap;">六、功能优化之数据推送</p><p style="text-wrap: wrap;">七、功能优化之前端脚本输入参数</p><p style="text-wrap: wrap;">八、其它提升</p><p style="text-wrap: wrap;">九、新增模板和集成方案</p></section></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">一、性能提升之异步数据采集</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-size: 15px;font-family: Optima-Regular, PingFangTC-light;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix 通过各种功能进程采集数据，例如 Pollers、Trappers 和 Pingers 等，但每个进程每次只能采集单个指标的数据，导致各类进程数量都较多。</p><p><br></p><p>在 Zabbix7.0 中，Poller 进程拆分出了 SNMP Poller、Zabbix Agent Poller 和 HTTP Agent Poller 这些类型进程，它们都支持异步线程处理，极大地提升了处理效率并且减少了进程数量。</p><p><br></p><p>所谓异步处理指线程任务相互独立，不会阻塞主进程。单个进程最多开启 1000 个线程。</p><p><br></p><p><span style="color: rgb(212, 0, 0);">1. 各进程配置参数说明</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>SNMP Poller 进程数量控制</p></li></ul></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020570" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/2d73c7bf-91e3-4f61-b0a9-309e34709df7.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>Zabbix Agent Poller 进程数量控制</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020573" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/da5525f6-040e-498e-8991-eebd68d94d60.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>HTTP Agent Poller 进程数量控制</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020571" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e1f6e48c-372f-47ae-860d-759aa1b94935.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>单个进程并行检查数控制</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020575" data-ratio="0.23148148148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/9fa44017-75f7-48c7-a4b8-260b7b558bee.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><span style="color: rgb(212, 0, 0);">2. 异步数据采集效果</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>数据流</p></li></ul></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020577" data-ratio="0.687962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/e66d7e5d-ae3a-4243-bf78-0cc108745a92.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="text-align: unset;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>采集进程处理效果</p></li></ul></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020579" data-ratio="0.412962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/a30b5031-c40e-4c19-93e3-118466d75b78.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020576" data-ratio="0.125" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7c2a686a-6b59-487b-99bb-d5186af7d241.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="text-align: unset;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;color: rgb(212, 0, 0);" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>6.0 和 7.0 性能对比</p></li></ul></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020578" data-ratio="0.5314814814814814" data-s="300,640" src="https://oscimg.oschina.net/oscnet/bd3b0248-996b-4f1d-9646-8689311f2d5a.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">二、架构优化之 Zabbix Proxy 高可用和负载均衡</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix6.0 实现了 Zabbix Server 的高可用，但是未实现 Zabbix Proxy 高可用，Zabbix7.0 同时实现了 Zabbix Proxy 高可用和负载均衡。</p><p><br></p><p>引入 Zabbix Proxy group 概念，将多台 Zabbix Proxy 合并为一个组，组内的任意 Zabbix Proxy 离线后自动将其监控主机分配给其它 Zabbix Proxy。</p><p><br></p><p><span style="color: rgb(212, 0, 0);">1. 主机如何分配给 Zabbix Proxy group 监控</span></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020580" data-ratio="0.7835648148148148" data-s="300,640" src="https://oscimg.oschina.net/oscnet/4643ba20-0b3b-43c0-b38f-9a9301c5ff33.png" data-type="png" data-w="864" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><span style="color: rgb(212, 0, 0);">2. 高可用和负载均衡机制</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>Failover period 用于检测 Proxy 在线还是离线</p></li><li><p>Proxy group 可设置最少在线 Proxy 数量，低于该值则 Proxy group 为离线状态</p></li><li><p>负载重分配时将排除旧版本 Proxy</p></li><li><p>如果 Proxy group 离线，组内的主机将停止重分配</p></li><li><p>当 Proxy 或者主机状态发生变化，主机重分配将会触发</p></li><li><p>根据每台 Proxy 监控的主机数量做负载均衡</p></li><li><p>为避免频繁的主机重新分配，如果某台 Proxy 上较多主机同时掉线不会立即分配至其它 Proxy，而是等到主机上线后分配至主机数量最少的那台 Proxy</p></li></ul><p><br></p><p><span style="color: rgb(212, 0, 0);">3. Zabbix Agent 参数配置</span></p><p><span style="color: rgb(212, 0, 0);"><br></span></p><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>主动类型 Agent，ServerActive 参数至少包含 Proxy group 中一个节点 IP 地址，最好多个</p></li><li><p>被动类型 Agent，Server 参数需要包含 Proxy group 所有节点 IP 地址</p></li></ul></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p><br></p></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">三、性能提升之 Zabbix Proxy 内存缓存</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 支持多种 Proxy 缓存模式，Disk、Memory 和 Hybrid。Disk 即之前版本的磁盘存储；Memory 为内存存储，所有数据放在内存中；Hybrid 是 Disk 和 Memory 的混合，内存不够就磁盘存储。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;color: rgb(212, 0, 0);" powered-by="xiumi.us"><p>1. 缓存模式设置</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020581" data-ratio="0.2796296296296296" data-s="300,640" src="https://oscimg.oschina.net/oscnet/308aab62-27f3-4ee4-b9a1-687d942d88ff.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;color: rgb(212, 0, 0);" powered-by="xiumi.us"><p>2. 缓存模式差异</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020583" data-ratio="0.600925925925926" data-s="300,640" src="https://oscimg.oschina.net/oscnet/268862d9-c1af-4985-af74-0ed474e4010c.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">四、功能优化之监控项级别 Timeout</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 为大部分数据检查引入监控项级别 Timeout，可在前端页面配置 Timeout 数值，取值范围 1 秒到 600 秒（10 分钟）。Timeout 可在多个层级定义，包含 Zabbix Server 全局配置、单个 Zabbix Proxy 级别以及单个监控项。</p><p><br></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020582" data-ratio="0.6648148148148149" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8901f628-25aa-4103-a682-7dc898266da2.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">五、性能提升之并行网络自动发现</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>当网络自动发现中扫描的 IP 或者网段过多，并且包含多个检查规则时，完成一次任务将消耗大量时间，这是因为单个任务只能被单个 discoverer 进程处理，并且每个 IP 按顺序执行。</p><p>Zabbix7.0 引入新的网络自动发现进程，包含 Discovery manager 和 Discovery worker(discoverer process)，自监控模板中包含对应进程使用率和队列延迟指标。</p><p><br></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020584" data-ratio="0.11481481481481481" data-s="300,640" src="https://oscimg.oschina.net/oscnet/8fafad63-6e29-4a2e-9c5d-9eca501f582b.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><section style="text-align: unset;" powered-by="xiumi.us"><p><br></p></section><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>网络自动发现配置页面增加最大并行检查数（Maximum concurrent checks）选项，并行处理检查。</p></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020589" data-ratio="0.5138888888888888" data-s="300,640" src="https://oscimg.oschina.net/oscnet/17d635ab-58c5-4cd5-8fc1-4b03d17cd412.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">六、功能优化之数据推送</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 增加 history.push API 方法，对应监控项类型为 Zabbix Trapper 和 HTTP Agent(Enable trapping)。可在监控项中配置 Allow Server IP 只接收给定 IP 发送的数据，并且 API 方法权限可通过用户角色控制。</p><p>详细信息参见</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247504188%26idx%3D1%26sn%3Da69905144eb865d356635095315e728e%26scene%3D21%23wechat_redirect" target="_blank" data-linktype="2">《Zabbix7.0 新功能，还可以这样推送数据！不止 zabbix_sender》</a></p><p><br></p></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">七、功能优化之前端脚本输入参数</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p>Zabbix7.0 在执行前端脚本时可以输入参数，这样就不需要创建多个前端脚本或者频繁修改某个前端脚本。在脚本中使用{MANUALINPUT}宏引用自定义输入的数据。</p><p><br></p></section><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020588" data-ratio="0.5361111111111111" data-s="300,640" src="https://oscimg.oschina.net/oscnet/bab2a986-2c4a-4d4b-bd67-b5d9a90b7f29.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020586" data-ratio="0.600925925925926" data-s="300,640" src="https://oscimg.oschina.net/oscnet/05bf06f1-cdd4-44d7-8cc7-5574e3b48da4.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">八、其它提升</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: unset;font-family: Optima-Regular, PingFangTC-light;font-size: 15px;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p>支持监控项和监控项原型名称中使用用户宏（Zabbix6.0 中取消，7.0 又恢复）</p></li><li><p>提升普通用户前端权限校验速度</p></li><li><p>支持原生 Kafka topics 的 HTTP connector</p></li><li><p>支持主动检查（active checks）执行远程命令</p></li><li><p>提升聚合计算中不支持监控项处理性能</p></li><li><p>支持多页 PDF 格式定时报表</p></li><li><p>支持主机自动注册时分配标签</p></li><li><p>等<br></p></li></ul><p><br></p></section><section style="color: rgb(173, 25, 25);line-height: 1.75;" powered-by="xiumi.us"><p style="text-wrap: wrap;">九、新增模板和集成方案</p></section><section style="" powered-by="xiumi.us"><section style="background-color: rgb(226, 91, 91);height: 3px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020587" data-ratio="0.49074074074074076" data-s="300,640" src="https://oscimg.oschina.net/oscnet/fb5140c2-2f4a-444c-810c-1f1d5d47e3ef.png" data-type="png" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: bottom;width: auto;min-width: 5%;flex: 0 0 auto;height: auto;align-self: flex-end;margin-right: -11px;"><section style="display: flex;width: 100%;flex-flow: column;" powered-by="xiumi.us"><section style="z-index: 1;" powered-by="xiumi.us"><section style="text-align: center;line-height: 0;"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 26.8047px;height: auto;"><img class="rich_pages wxw-img" data-imgfileid="100020585" data-ratio="1.556" data-s="300,640" src="https://oscimg.oschina.net/oscnet/7219ef62-241c-4d83-bf02-e4cf6230e624.png" data-type="png" data-w="500" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section></section></section></section><section style="display: inline-block;vertical-align: bottom;width: auto;align-self: flex-end;flex: 0 0 auto;background-color: rgb(212, 0, 0);min-width: 5%;height: auto;padding: 5px 16px 5px 27px;"><section style="text-align: justify;color: rgb(255, 255, 255);" powered-by="xiumi.us"><p style="text-wrap: wrap;"><strong>立即体验</strong></p></section></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-bottom: 10px;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgb(255, 245, 237);"><section style="justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;padding: 29px;"><section style="text-align: justify;line-height: 1.5;letter-spacing: 1px;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;">点击查看&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zabbix.com%2Fcn%2Frelease_notes" textvalue="Zabbix7.0 发布日志 Release Notes" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Zabbix7.0 发布日志 Release Notes</a>，了解更多新增和优化特性。立即下载试用，开启崭新的 Zabbix 探索之旅。</span></p><p style="text-wrap: wrap;"><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;"><br></span></p><p style="text-wrap: wrap;"><span style="font-family: Optima-Regular, PingFangTC-light;font-size: 15px;">你们期待的 Zabbix7.0LTS 版本将很快与大家见面，敬请期待！</span></p></section></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;margin-top: -8px;margin-bottom: 10px;transform: translate3d(-10px, 0px, 0px);" powered-by="xiumi.us"><section style="display: inline-block;width: 90%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;border-style: solid;border-width: 0px 0px 1px;border-bottom-color: rgb(178, 0, 19);height: auto;"><section style="justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: top;align-self: flex-start;flex: 0 0 auto;min-width: 5%;height: auto;line-height: 0;"><section style="transform: rotateZ(90deg);" powered-by="xiumi.us"><section style="text-align: center;"><section style="display: inline-block;width: 33px;height: 1px;vertical-align: top;overflow: hidden;background-color: rgb(178, 0, 19);"><section style="text-align: justify;" powered-by="xiumi.us"><p style="text-wrap: wrap;"><br></p></section></section></section></section></section></section></section></section></section></section><p style="text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-imgfileid="100020597" data-ratio="0.5222222222222223" data-s="300,640" src="https://oscimg.oschina.net/oscnet/488e4d86-968c-465e-b703-dccea60e2033.png" data-type="png" data-w="1080" style="" referrerpolicy="no-referrer"></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.huodongxing.com%2F" textvalue="将在南京技术交流现场分享 Zabbix7.0 新功能！扫码免费报名。" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 14px;">将在南京技术交流现场分享 Zabbix7.0 新功能！扫码免费报名。</span></a><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><strong><span style="color: rgb(217, 33, 66);">延伸阅读</span></strong><br></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p><ul class="list-paddingleft-1" style="list-style-type: disc;"><li><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247504188%26idx%3D1%26sn%3Da69905144eb865d356635095315e728e%26chksm%3Deb06e01adc71690c8994cae676a4b9f942ff2fe0e63a086813426e648bdf8524ef3eb8555dc7%26scene%3D21%23wechat_redirect" textvalue="Zabbix7.0 新功能，还可以这样推送数据！不止 zabbix_sender" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" style="font-size: 15px;" data-linktype="2"><span style="font-size: 15px;">Zabbix7.0 新功能，还可以这样推送数据！不止 zabbix_sender</span></a><br></p></li><li><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247503844%26idx%3D1%26sn%3D66995b695ba25b4a5d77117138b7864d%26chksm%3Deb06fec2dc7177d4ba32f0c2faedc1856907c87e488b5b510bb75d66ce551d904ea588edc5fb%26scene%3D21%23wechat_redirect" textvalue="手把手教学 Zabbix7.0+麒麟操作系统，兼容认证" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" style="font-size: 15px;" data-linktype="2"><span style="font-size: 15px;">手把手教学 Zabbix7.0+麒麟操作系统，兼容认证</span></a><br></p></li><li><p style="text-wrap: wrap;" powered-by="xiumi.us"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzI3NTQ1ODEyMQ%3D%3D%26mid%3D2247503204%26idx%3D1%26sn%3D4913c89d2c4b14ff762e2acdd555bebe%26chksm%3Deb06fc42dc717554555e088b350d0995c21100eb7973df940e87cd8a8372ec22c70015ff0840%26scene%3D21%23wechat_redirect" textvalue="Zabbix 创始人提前揭秘 Zabbix7.0 新功能！" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" style="font-size: 15px;" data-linktype="2"><span style="font-size: 15px;">Zabbix 创始人提前揭秘 Zabbix7.0 新功能！</span></a></p><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p></li></ul><section style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-imgfileid="100020590" data-ratio="0.562962962962963" data-s="300,640" src="https://oscimg.oschina.net/oscnet/2e3728e3-275b-44d9-98c0-e5c5c0566e62.jpg" data-type="jpeg" data-w="1080" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section><p style="text-wrap: wrap;" powered-by="xiumi.us"><br></p></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - Zabbix 开源社区（china_zabbix）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 10:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3900302/blog/11020075</guid>
            <link>https://my.oschina.net/u/3900302/blog/11020075</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[JetBrain 捆绑 AI 助手引起用户不满]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>JetBrains 曾于去年宣布，<span style="background-color:#ffffff; color:#333333">所有基于 IntelliJ 的 IDE 和 .NET 工具都会集成&nbsp;</span><strong style="color:#333333">AI 助手 (AI Assistant) </strong>这一<span style="background-color:#ffffff; color:#333333">新功能；并表示会将它整合到 IDE 的核心工作流中，尤其是 JetBrains IDE 的强项 —— 将代码理解与 AI 深度集成。</span></p><p>但事情并非一帆风顺，无论是出于不兼容的公司政策、还是担忧安全风险等其他原因，一些 JetBrains 客户对 AI Assistant 有着强烈的抵触情绪，他们希望在自己的 JetBrains 应用程序中不要出现该插件。然而鉴于插件代码已经"深度集成"，相关的移除工作非常复杂。</p><p style="text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>自 AI 助手插件首次亮相以来，JetBrains 的 YouTrack 问题板上已经发布了十多个帖子，寻求删除、卸载或以其他方式删除该插件的方法。在一个名为"提供从系统中完全删除插件的可能性"的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fyoutrack.jetbrains.com%2Fissue%2FLLM-1760%2FCan-not-remove-Jetbrains-AI-Assistant-plugin-completely" target="_blank">主题</a>，就详细说明了为什么大家不希望在公司的开发者工具（如 PyCharm、IntelliJ IDEA 和其他应用程序）中安装该插件。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><p style="text-align:start"><img height="297" src="https://oscimg.oschina.net/oscnet/up-005a432b81b726ee7b9b144093d0d09568d.png" width="500" referrerpolicy="no-referrer"></p><p style="text-align:start"><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>开发人员提出了许多担忧，称该插件是"臃肿的软件"、对企业知识产权构成风险、是一个安全问题、令人讨厌、且有违信任。</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></p><blockquote><p style="text-align:start"><span style="color:#000000">「我只是想明确表示，我不能在我工作的公司使用这个产品，因为安全性不允许默认的 AI 实施成为产品的一部分。」</span></p><p style="text-align:start"><span style="color:#000000">"这是不可接受的。它不应该在默认情况下捆绑一些可以将整个代码库发送到天知道什么地方的东西。JetBrains 的这一举动非常糟糕，在此之后我将不再续订。这是一种无法挽回的失信行为。"</span></p><p style="text-align:start"><span style="color:#000000">"这项服务是基于 AI 的，你不知道它提供给你的代码的出处，这本身就是一个巨大的问题，因为它造成了可疑的许可/知识产权/法律状况。但最大的问题不是因为它是 AI，而是因为它将用户公司的知识产权泄露给了谁也不知道的地方，有可能直接泄露给竞争对手。"</span></p></blockquote><p><span style="color:#000000">对此，JetBrains 公司的 Matt Ellis 在给 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2024%2F02%2F01%2Fjetbrains_unremovable_ai_assistant%2F" target="_blank">The Register</a> 的一份声明中解释称：</span></p><blockquote><p><span style="color:#000000">"虽然捆绑了 AI 助手插件，而且插件本身也已启用，但默认情况下并没有启用 AI 功能，并且未经用户的同意也不会将数据发送到外部。你必须登录、接受数据政策，然后购买订阅或开始试用。发送到 AI 服务的任何数据都不会用于训练。我们还提供用于排名和完成的 ML 支持，这是由设备上的模型提供的，没有数据被发送到设备之外。"</span></p></blockquote><p><span style="color:#000000">Ellis 声称还有许多客户都对捆绑插件很满意，因此该公司正在研究可以同时满足捆绑和完全拆卸 AI 助手的方法。他指出，移除捆绑插件的问题在于，可能会破坏应用程序签名并导致一些更新问题。</span></p><p><span style="color:#000000">当被问及有多少 JetBrains 客户反对 AI 助手时，一位发言人则表示："我们无法确定这些意见是否代表了我们所有客户的立场。我们理解这种情绪的强度，我们正在倾听来自社区各方面的反馈，包括正在使用 AI 助手的许多快乐的个人和企业。"</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 07:59:01 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277463/jetbrains-unremovable-ai-assistant</guid>
            <link>https://www.oschina.net/news/277463/jetbrains-unremovable-ai-assistant</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[基于 Netty 开发轻量级 RPC 框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>笔者在开发基于客户端/服务端模式通信的插件的时候，需要用到轻量级最小包依赖的 RPC 框架，而市面上的 RPC 框架份量过于庞大，最终打包下来都是几十兆甚至上百兆，而这里面大多数功能我都用不上，于是思来想去我决定写一款属于自己的轻量级 RPC 框架，简单易用快速接入。</p></blockquote><span id="OSC_h2_1"></span><h2>关于技术选型</h2><span id="OSC_h3_2"></span><h3>协议序列化/反序列化</h3><p>网络通信基于 TCP/IP 为基础自定义应用层协议，常见的序列化/反序列化工具有 java 原生序列化，json,kryo,protobuf,fst,hessian 等。</p><p>在不考虑跨语言的情况下，从序列化时长/序列化大小/易用性/扩展性这几方面考虑，综合性比较强的是 kryo，但是 kryo 只支持 java 版本不能跨语言 (据说能跨语言但是非常复杂，相当于不能跨语言了)，protobuf 是性能最强的且支持跨语言，但是需要事先基于 proto 生成一个类，这会导致所有序列化和反序列化的时候只能用 proto 定义的类型。</p><p>最终选择 kryo 和 protobuf 两种序列化工具，使用的时候可选序列化类型，前者序列化几乎不受限制，后者支持跨语言，但是必须事先生成 proto 类型的类并使用其作为序列化工具。</p><span id="OSC_h3_3"></span><h3>通信框架使用</h3><p>高性能异步非阻塞框架非 Netty 不可了，客户端和服务端基于 Netty 开发可事半功倍。</p><p>但是基于 Netty 再加上 zk 连接和各种工具打包完都需要 20M 左右，所以除了 client 和 server 端外，再开发一个 client-mini 模块，这个模块是 client 端基于 nio 开发的，性能虽然不如 netty 但是没有任何依赖，打包下来仅 20kb。</p><span id="OSC_h3_4"></span><h3>服务注册和发现</h3><p>注册中心选择 zookeeper 作为服务注册和服务发现，当然如果只用单点模式的话其实是不需要注册中心的，所以 zookeeper 是可选组件。</p><span id="OSC_h2_5"></span><h2>开发 RPC 框架</h2><p>好了，有了上述这些技术就可以步入 RPC 框架的开发了，我这里分为了以下模块：</p><ul><li>base : 基础公共模块</li><li>protocol : 协议层，包含应用层通信协议，以及序列化/反序列化，支持 kryo 和 protobuf</li><li>registry : 注册模块，基于 zookeeper 作为注册中心，包含注册服务和服务发现</li><li>server : 服务端</li><li>client : 客户端</li><li>client-mini : 不依赖任何包的客户端，基于 NIO</li></ul><span id="OSC_h3_6"></span><h3>应用层协议</h3><p>首先设计通信协议层，一个 rpc 框架通信的每一次请求主要包含服务名 (serviceName)，函数名 (methodName)，参数类型 (paramTypes) 和参数 (params) 等字段，当然再加上请求唯一 id: traceId</p><pre><code class="language-java">@ShadowEntity  
public class ShadowRPCRequest {  

    @ShadowField(1)  
    private String traceId;  

    @ShadowField(2)  
    private String serviceName;  

    @ShadowField(3)  
    private String methodName;  

    @ShadowField(4)  
    private Class&lt;?&gt;[] paramTypes;  

    @ShadowField(5)  
    private Object[] params;
}

</code></pre><p>上述 ShadowRPCRequest 是基于 kryo 序列化方式进行的一个定义，适合于客户端和服务端都是 java，如果要跨语言，则需要使用 protobuf，protobuf 首先定义一个 request.proto</p><pre><code class="language-proto">syntax = "proto3";  
  
  
package com.liubs.shadowrpc.protocol.entity;  
option java_outer_classname="ShadowRPCRequestProto";  
  
message ShadowRPCRequest {  
    string traceId = 1;  
    string serviceName = 2;  
    string methodName = 3;  
    repeated string paramTypes = 4; //参数类名  
    repeated bytes params = 5; //bytes 类型充当参数  
}

</code></pre><p>由于要跨语言，所以参数用 bytes 的集合类型，反序列化时需要二次解压缩成具体的类型，但是即便是这样仍然比 kryo 要快。</p><p>同理，与 ShadowRPCRequest 对应的消息体是响应 ShadowRPCResponse</p><pre><code class="language-java">@ShadowEntity  
public class ShadowRPCResponse {  
 
    @ShadowField(1)  
    private String traceId;  

    @ShadowField(2)  
    private int code;  

    @ShadowField(3)  
    private String errorMsg;  

    @ShadowField(4)  
    private Object result;
}

</code></pre><p>然后就是基于 kryo 和 protobuf 的序列化和反序列化了，kryo 有很多种序列化策略，考虑到函数参数需要支持增减字段，所以 kryo 使用 TaggedField 策略，上面的@ShadowField 注解是我进行的一些简单的封装，每次新增字段的时候需要加上注解即可，而 protobuf 天生就支持参数增减字段。</p><p>kryo 的序列化和反序列化如下：</p><pre><code class="language-java">public class KryoSerializer implements ISerializer {  
  
    private static ThreadLocal&lt;Kryo&gt; kryoThreadLocal = ThreadLocal.withInitial(() -&gt; {  
        Kryo kryo = new Kryo();  

        kryo.setDefaultSerializer(new KryoFieldSerializerFactory());  

        kryo.setReferences(false);  
        kryo.setRegistrationRequired(false); //不需要提前注册  

        //注册一定会用到的，序列化可以省点空间  
        kryo.register(Class.class);  
        kryo.register(Class[].class);  
        kryo.register(Object[].class);  
        kryo.register(ShadowRPCRequest.class);  
        kryo.register(ShadowRPCResponse.class);  

        return kryo;  
    });  
  
  
  
    @Override  
    public byte[] serialize(Object object) {  

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();  
        Output output = new Output(byteArrayOutputStream);  
        kryoThreadLocal.get().writeObject(output, object);  
        output.close();  
        return byteArrayOutputStream.toByteArray();  
    }  
  
    @Override  
    public &lt;T&gt; T deserialize(byte[] array, Class&lt;T&gt; clazz) {  

        ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(array);  
        Input input = new Input(byteArrayInputStream);  
        T object = kryoThreadLocal.get().readObject(input, clazz);  
        input.close();  
        return object;  
    }  
}

</code></pre><p>protobuf 的序列化和反序列化则是通过调用生成的 proto 类来实现序列化和反序列化的，</p><p>序列化：</p><pre><code class="language-java">@Override  
public byte[] serialize(Object object) {  
    if (object instanceof MessageLite) {  
    return ((MessageLite) object).toByteArray();  
    }  
    if (object instanceof MessageLite.Builder) {  
    return (((MessageLite.Builder) object).build().toByteArray());  
    }  

    return new byte[0];  
}

</code></pre><p>反序列化:</p><pre><code class="language-java">
public &lt;T&gt; T deserialize(MessageLite messageLite,byte[] array, Class&lt;T&gt; clazz) {  
    return messageLite.getDefaultInstanceForType().getParserForType().parseFrom(array, 0, array.length);
}

</code></pre><span id="OSC_h3_7"></span><h3>消息的粘包/拆包和半包处理</h3><p>TCP/IP 是面向流的协议，操作系统底层其实并不关心我们自定义的应用层协议包是否完整，在高并发情况下，我们一次性发送多个包会被写入到一个流中，就是所谓的「粘包」，而接收方则需要根据收到的流进行拆分得到具体的包，称为「拆包」，</p><p><img height="183" src="https://oscimg.oschina.net/oscnet/up-f2a9582fee1ea86078a7229ef8328328729.png" width="600" referrerpolicy="no-referrer"></p><p>比如上面的 A,B,C,D,E,F 是一次性发送的包，但是在发送 D 的时候超过了发送缓冲区被拆分成了 D1 和 D2，而接收方从缓冲区读取到 A,B,C,D1 的时候完全不知所措，我们需要处理每个包的边界，并且还需要将第一次包中的 D1 和第二次包中的 D2 进行合并成 D 形成一个完整的包 D。</p><p>业界最常用的方案是，发送方在写入缓冲区字节流的时候，先写入消息的长度，再写入消息字节，而接收方则先读取长度 n，再读取 n 个字节，如果字节数不到 n，则重制 position，等下一次读取消息的时候再读取完整 n 个长度的字节流形成一个消息包。</p><p>写入字节流代码：</p><pre><code class="language-java">int dataLength = data.length;  
out.writeInt(dataLength); // 先写入消息长度  
out.writeBytes(data); // 写入序列化后的数据

</code></pre><p>而接收方，用 netty 现成的 LengthFieldBasedFrameDecoder 即可</p><pre><code class="language-java">pipeline.addLast(new LengthFieldBasedFrameDecoder(globalConfig.getMaxFrameLength(),  
0, 4, 0, 4));

</code></pre><p>这里的 4 表示 4 个字节 (int 类型)，它会先读取 4 个字节，再读取字节流，根据长度拆分不同的」Frame「，即我们需要的消息包。</p><span id="OSC_h3_8"></span><h3>Netty 构建通信框架</h3><p>针对 Netty 构建通信网络初始化，最终目标是实现客户端发送一个 ShadowRPCRequest 消息就能调用服务并返回给客户端 ShadowRPCResponse 消息</p><pre><code class="language-java">NioEventLoopGroup bossGroup = new NioEventLoopGroup();  
NioEventLoopGroup workerGroup = new NioEventLoopGroup();
ServerBootstrap bootstrap = new ServerBootstrap();  
bootstrap.group(bossGroup, workerGroup)  
.channel(NioServerSocketChannel.class)  
.childHandler(new ShadowChannelInitializer(serverConfig))  
.option(ChannelOption.SO_BACKLOG, 128)  
.childOption(ChannelOption.SO_KEEPALIVE, true);  
  
channelFuture = bootstrap.bind(port).sync();

</code></pre><p>childHandler 里面使用 ShadowChannelInitializer 作为每个连接的处理</p><pre><code class="language-java">public class ShadowChannelInitializer extends ChannelInitializer&lt;SocketChannel&gt; {  
  
    private ServerConfig serverConfig;  

    public ShadowChannelInitializer(ServerConfig serverConfig) {  
    this.serverConfig = serverConfig;  
    }  

    @Override  
    protected void initChannel(SocketChannel ch) throws Exception {  
    ChannelPipeline pipeline = ch.pipeline();  

    //qps 请求量统计  
    if(serverConfig.isQpsStat()) {  
    pipeline.addLast(new QpsStatHandler());  
    }  

    //处理帧边界，解决拆包和粘包问题  
    pipeline.addLast(new LengthFieldBasedFrameDecoder(serverConfig.getMaxFrameLength(),  
    0, 4, 0, 4));  

    //消息序列化和反序列化  
    pipeline.addLast(new MessageHandler());  

    //服务处理  
    pipeline.addLast(new ServerHandler());  
    }  
}

</code></pre><p>紧接着就是对接收到客户端的 ShadowRPCRequest 消息的处理，ShadowRPCRequest 里面包含了服务名，函数名以及参数，考虑到也有可能是 protobuf 类型 ShadowRPCRequestProto，这里统一转换成抽象层的 model: RequestModel，字段和 ShadowRPCRequest 都差不多，然后找到对应的服务触发逻辑和响应 ServerHandler</p><pre><code class="language-java">public class ServerHandler extends ChannelInboundHandlerAdapter {  
  
    @Override  
    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {  

    // 打印验证影响速度，压测时去掉  
    //logger.info("Server received: " + msg);  

    IModelParser modelParser = serializeModule.getSerializer().getModelParser();  

    RequestModel requestModel = modelParser.fromRequest(msg);  

    executorService.execute(()-&gt;{  
    try {  

        ServiceLookUp serviceLookUp = new ServiceLookUp();  
        serviceLookUp.setServiceName(requestModel.getServiceName());  
        serviceLookUp.setMethodName(requestModel.getMethodName());  
        serviceLookUp.setParamTypes(requestModel.getParamTypes());  
        ServiceTarget targetRPC = serverModule.getRPC(serviceLookUp);  

        Object result = targetRPC.invoke(requestModel.getParams());  

        ResponseModel responseModel = new ResponseModel();  
        responseModel.setTraceId(requestModel.getTraceId());  
        responseModel.setCode(ResponseCode.SUCCESS.getCode());  
        responseModel.setResult(result);  

        // 响应客户端  
        ctx.writeAndFlush(modelParser.toResponse(responseModel));  
        } catch (Exception e) {  
        e.printStackTrace();  
    }  

    });  

    }  
  
}

</code></pre><p>至于根据 RequestModel 是如何找到对应的服务的，就需要在服务端启动的时候扫描所有的服务缓存到 serverModule 里面了，这样就能通过 serverModule 获取到 targetRPC</p><pre><code class="language-java">@ShadowModule  
public class ServerModule implements IModule {  
    private static final Logger logger = LoggerFactory.getLogger(ServerModule.class);  

    @ModuleInject  
    private SerializeModule serializeModule;  

    private ServerConfig serverConfig;  

    //所有服务  
    private Map&lt;ServiceLookUp,ServiceTarget&gt; allRPC = new ConcurrentHashMap&lt;&gt;();  

    public void init(ServerConfig serverConfig,List&lt;String&gt; packages) {  
        this.serverConfig = serverConfig;  
        //初始化服务  
        List&lt;ShadowServiceHolder&lt;ShadowService&gt;&gt; shadowServices = new ArrayList&lt;&gt;();  

        for(String packageName : packages) {  
        try {  
        shadowServices.addAll(AnnotationScanner.scanAnnotations(packageName, ShadowService.class));  
        } catch (IOException e) {  
        logger.error("scanService err",e);  
        }  
        }  

        for(ShadowServiceHolder&lt;ShadowService&gt; ShadowServiceHolder : shadowServices) {  
        ShadowService serviceAnnotation = ShadowServiceHolder.getAnnotation();  
        Class&lt;?&gt; serviceClass = ShadowServiceHolder.getClassz();  
        try {  
        Object o = serviceClass.newInstance();  


        for(Method method : serviceClass.getMethods()) {  

        if(Modifier.isStatic(method.getModifiers()) || !Modifier.isPublic(method.getModifiers())){  
        continue;  
        }  

        ServiceLookUp serviceLookUp = new ServiceLookUp();  
        serviceLookUp.setServiceName(serviceAnnotation.serviceName());  
        serviceLookUp.setMethodName(method.getName());  
        serviceLookUp.setParamTypes(method.getParameterTypes());  

        ServiceTarget serviceTarget = new ServiceTarget();  
        serviceTarget.setTargetObj(o);  
        serviceTarget.setMethod(method);  
        addRPCInterface(serviceLookUp,serviceTarget);  
        }  

        } catch (InstantiationException | IllegalAccessException e) {  
        throw new RuntimeException(e);  
        }  
        }  
    }  

    public void addRPCInterface(ServiceLookUp lookUp,ServiceTarget obj) {  
        allRPC.put(lookUp,obj);  
    }  

    public ServiceTarget getRPC(ServiceLookUp lookUp) {  
        return allRPC.get(lookUp);  
    }  
  
  
  
}

</code></pre><span id="OSC_h3_9"></span><h3>客户端调用远程 rpc 服务</h3><p>刚才我们把服务端接收 ShadowRPCRequest 消息并触发逻辑返回 ShadowRPCResponse 消息实现了，而在客户端，我们只持有服务端的一个接口，要通过这个接口创建一个远程服务调用，来实现 rpc 调用，我们最终要实现的效果是这样的</p><pre><code class="language-java">IHello helloService = shadowClient.createRemoteProxy(IHello.class,"shadowrpc://DefaultGroup/helloservice");  
  
System.out.println("发送 hello 消息");  
String helloResponse = helloService.hello("Tom");  
System.out.println("hello 服务端响应:"+helloResponse);

</code></pre><p>IHello 是一个接口，没有任何实现类，实现类在服务端，而客户端我们通过创建一个远程代理的方式就能实现调用接口即发送 ShadowRPCRequest 消息到远程服务器。</p><p>我们这里使用动态代理，基于接口创建一个远程对象</p><pre><code class="language-java">public static &lt;T&gt; T create(IConnection connection, Class&lt;T&gt; serviceStub, final String service) {  
  
    String[] serviceArr = service.replace("shadowrpc://","").split("/");  
    if(serviceArr.length &lt; 2) {  
    throw new IllegalArgumentException("service 参数不符合规范");  
    }  
    String group = serviceArr[0];  
    String serviceName = serviceArr[1];  

    return (T)Proxy.newProxyInstance(  
        serviceStub.getClassLoader(),  
        new Class&lt;?&gt;[]{serviceStub},  
        new RemoteHandler(connection,serviceStub,group,serviceName)  
    );  
}

</code></pre><p>RemoteHandler 中实现代理对象的逻辑，发送消息到远程服务器</p><pre><code class="language-java">public class RemoteHandler implements InvocationHandler {  
private static final Logger logger = LoggerFactory.getLogger(RemoteHandler.class);  
  
/**  
* 如果不使用注册中心，则必须有 ShadowClient  
*/  
private IConnection clientConnection;  
  
/**  
* 远程接口 stub  
*/  
private Class&lt;?&gt; serviceStub;  
  
  
/**  
* 集群  
*/  
private String group;  
  
/**  
* 服务名  
*/  
private String serviceName;  
  
  
private SerializeModule serializeModule = ModulePool.getModule(SerializeModule.class);  
  
public RemoteHandler(IConnection client, Class&lt;?&gt; serviceStub, String group,String serviceName) {  
    this.clientConnection = client;  
    this.serviceStub = serviceStub;  
    this.group = group;  
    this.serviceName = serviceName;  
}  
  
@Override  
public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {  
  
    try{  
        RequestModel requestModel = new RequestModel();  
        String traceId = UUID.randomUUID().toString();  
        requestModel.setTraceId(traceId);  
        requestModel.setServiceName(serviceName);  
        requestModel.setMethodName(method.getName());  
        requestModel.setParamTypes(method.getParameterTypes());  
        requestModel.setParams(args);  

        IModelParser modelParser = serializeModule.getSerializer().getModelParser();  
        Future&lt;?&gt; future = ReceiveHolder.getInstance().initFuture(traceId);  

        Channel channel = clientConnection.getChannel(group);  

        if(!channel.isOpen()) {  
        logger.error("服务器已关闭,发送消息抛弃...");  
        return null;  
        }  

        try{  
        channel.writeAndFlush(modelParser.toRequest(requestModel)).sync();  
        }catch (Exception e) {  
        logger.error("发送请求{}失败",traceId);  
        return null;  
        }  

        ResponseModel responseModel = (ResponseModel)future.get(3, TimeUnit.SECONDS);  
        if(responseModel != null) {  
        return responseModel.getResult();  
        }else {  
        ReceiveHolder.getInstance().deleteWait(traceId);  
        logger.error("超时请求,抛弃消息{}",traceId);  
        return null;  
        }  

    }catch (Throwable e) {  
    logger.error("invoke err",e);  
    }  

    return null;  
    }  
}

</code></pre><span id="OSC_h3_10"></span><h3>服务注册与发现</h3><p>上面实现的客户端和服务端是单节点通信的，要实现服务注册与发现，需要注册中心 Registry，服务端向注册中心注册服务，客户端订阅服务节点的变化，获取到服务节点列表后负载均衡 rpc 调用服务节点的机器。</p><p><img height="426" src="https://oscimg.oschina.net/oscnet/up-a708679e97a8b88ed64a0ec96095d73c4aa.png" width="796" referrerpolicy="no-referrer"></p><p>服务端在启动的时候注册服务到 zookeeper</p><pre><code class="language-java">serviceRegistry.registerServer(new ServerNode(group,IPUtil.getLocalIp(),port));

public void registerServer(ServerNode serverNode) {  
    try {  
    String path = ServiceRegistryPath.getServerNodePath(serverNode.getGroup(),  
    ServiceRegistryPath.uniqueKey(serverNode.getIp(),serverNode.getPort()));  
    this.zkNodePath = zooKeeperClient.create(path, serverNode.toBytes());  
    } catch (Exception e) {  
    e.printStackTrace();  
    }  
}

</code></pre><p>即在服务启动的时候创建节点 /shadowrpc/services/group/node1，这个 node1 的值就是 ip+port，而在服务关闭的时候删除这个节点</p><pre><code class="language-java">zooKeeperClient.delete(zkNodePath);

</code></pre><p>客户端就可以获取 zk 下/shadowrpc/services/group 目录下的所有节点，监听目录变化，动态维护服务端的列表</p><pre><code class="language-java">ServiceDiscovery serviceDiscovery = new ServiceDiscovery(ZK_URL);

//监听增量变化事件  
//初始化状态会同步 SERVER_ADDED 事件，所以不用获取全量  
serviceDiscovery.watchService(group, (changeType, serverNode) -&gt; {  
    if(changeType == ServerChangeType.SERVER_ADDED) {  
        System.out.println("Child added: " + serverNode);  

        ShadowClient shadowClient = new ShadowClient(serverNode.getIp(),serverNode.getPort(),eventLoopGroup);  
        shadowClient.init();  
        finalShadowClients.add(shadowClient);  
    }else if(changeType == ServerChangeType.SERVER_REMOVED){  
        System.out.println("Child removed: " + serverNode);  

        Iterator&lt;ShadowClient&gt; iterator = finalShadowClients.iterator();  
        while(iterator.hasNext()) {  
            ShadowClient shadowClient1 = iterator.next();  
            if(serverNode.getIp().equals(shadowClient1.getRemoteIp()) &amp;&amp; serverNode.getPort() == shadowClient1.getRemotePort()) {  
                shadowClient1.close();  
                iterator.remove();  
            }  
        }  
    }
});

</code></pre><p>然后维护这个 List&lt;ShadowClient&gt;表示所有服务器列表的连接的增加和删除，最后负载均衡从这个 List 里面获取连接源发送消息到远程即可。</p><pre><code class="language-java">    int nextBalance = pollingBalance.getNextBalance();  
    shadowClientGroup.getShadowClients(group).get(nextBalance).writeAndFlush(message).sync();

</code></pre><span id="OSC_h3_11"></span><h3>精简版 Client</h3><p>刚才的 Client 和 Server 都是使用 Netty 作为异步非阻塞框架搭建的，有的时候对性能要求不高但是对最终的包大小有要求的时候 (比如开发 IDEA 插件最好是 kb 级别的)，我们这里基于 NIO 来的 Reactor 模式来搭建一套简单版的 rpc client。</p><p>我们还是参考上面的 client，想服务端发送 Request 消息，下面是对 NIO 的一个简单封装 NIOClient</p><pre><code class="language-java">public void connect() throws IOException, ConnectTimeoutException {  
    socketChannel = SocketChannel.open();  
    socketChannel.configureBlocking(false);  
    selector = Selector.open();  
    socketChannel.register(selector, SelectionKey.OP_CONNECT);  

    socketChannel.connect(new InetSocketAddress(host, port));  
    isRunning = true;  

    //reactor 模式  
    this.nioReactor = new NIOReactor(this);  
    nioReactor.start();  

    //等待连接完成  
    try{  
    waitConnection.get(nioConfig.getConnectTimeout(), TimeUnit.MILLISECONDS);  
    } catch (InterruptedException | ExecutionException | TimeoutException e) {  
    isRunning = false;  
    throw new ConnectTimeoutException(String.format("连接服务器%s:%d 超时",host,port));  
    }  
}
    
public MessageSendFuture sendMessage(byte[] bytes) {  
    if(null == bytes || bytes.length == 0) {  
    return null;  
    }  

    ByteBuffer writeBuffer = ByteBuffer.allocate(4 + bytes.length); // 4 bytes for length field  
    writeBuffer.putInt(bytes.length); // Write length of the message  
    writeBuffer.put(bytes); // Write message itself  
    writeBuffer.flip();  

    // Add to write queue  
    MessageSendFuture future = new MessageSendFuture(writeBuffer);  
    writeQueue.add(future);  

    // Change interest to OP_WRITE  
    SelectionKey key = socketChannel.keyFor(selector);  
    if(!key.isValid()) {  
    return null;  
    }  
    key.interestOps(SelectionKey.OP_WRITE);  
    selector.wakeup();  

    return future;  
}

</code></pre><p>这里写入消息 sendMessage 的时候，也是先写入长度 4 字节 bytes.length，再写入 bytes。</p><p>下面是基于 Reactor 模式实现对连接消息，读写消息的统一处理</p><pre><code class="language-java">while (nioClient.isRunning()) {  
    try {  
    if (selector.select() &gt; 0) {  
    processSelectedKeys();  
    }  
    } catch (IOException e) {  
    logger.error("selector err",e);  
    }  
}
    
private void processSelectedKeys() throws IOException {  
    Set&lt;SelectionKey&gt; selectedKeys = selector.selectedKeys();  
    Iterator&lt;SelectionKey&gt; iter = selectedKeys.iterator();  

    while (nioClient.isRunning() &amp;&amp; iter.hasNext()) {  
    SelectionKey key = iter.next();  

    if (key.isConnectable()) {  
    handleConnect(key);  
    }  
    if (key.isWritable()) {  
    handleWrite(key);  
    }  
    if (key.isReadable()) {  
    handleRead(key);  
    }  
    iter.remove();  
    }  
}  

</code></pre><p>而对读消息的拆包和半包处理原理也是和上面一样的，也是读取长度 4 字节，再读取对应长度的字节，如果不够重置 ByteBuffer 的 position 用于下次读取,这里是一个精简版本</p><pre><code class="language-java">private void handleRead(SelectionKey key) {  
  
    ByteBuffer buffer = readByteBuffer;  

    int numRead = 0;  
    try {  
        numRead = socketChannel.read(buffer);  
    } catch (IOException e) {  
        handleClose(key);  
        return;  
    }  

    if (numRead &gt; 0) {  
        buffer.flip(); // 切换到读模式  
        // 处理缓冲区中的所有数据  
        while (buffer.remaining() &gt; 4) { // 确保有足够的数据读取长度字段  
            buffer.mark();  
            int length = buffer.getInt();  
            //System.out.printf("read length=%d,remain=%d\n",length,buffer.remaining());  

            if (length &lt;= buffer.remaining()) {  
            byte[] data = new byte[length];  
                buffer.get(data);  
                nioClient.getReceiveMessageCallBack().handleMessage(data);  
            } else {  
                // 数据长度不足以构成一个完整的消息，重置并退出循环  
                buffer.reset();  
                break;  
            }  
        }  

        if (buffer.hasRemaining()) {  
            buffer.compact(); // 移动未处理数据到缓冲区开始位置  
        } else {  
            buffer.clear(); // 如果没有剩余数据，清空缓冲区  
        }  

        lastActiveTime = System.currentTimeMillis();  

    } else if (numRead &lt; 0) {  
        //接收到-1 表示服务器关闭  
        handleClose(key);  
    }  
}

</code></pre><span id="OSC_h2_12"></span><h2>RPC 框架的使用</h2><p>经过上述酣畅淋漓的 rpc 框架搭建，基本五脏俱全的 rpc 框架 ShadowRPC 就搭建完成了，下面是一些服务例子。</p><span id="OSC_h3_13"></span><h3>定义实体类</h3><pre><code class="language-java">@ShadowEntity
public class MyMessage {
    @ShadowField(1)
    private String content;

    @ShadowField(2)
    private int num;
}

</code></pre><p>如果是 protobuf 方式，可定义描述文件</p><pre><code class="language-proto">message MyMessage {
    string content = 1;
    int32 num = 2;
}

</code></pre><p>然后直接用 maven 插件 protobuf-maven-plugin 生成实体</p><span id="OSC_h3_14"></span><h3>编写接口和服务类</h3><pre><code class="language-java">@ShadowInterface
public interface IHello {
    String hello(String msg);
    MyMessage say(MyMessage message);
}

</code></pre><p>protobuf 方式的接口需要保证参数和返回类型都是 protobuf 定义的类型</p><pre><code class="language-java">@ShadowInterface
public interface IHelloProto {
    MyMessageProto.MyMessage say(MyMessageProto.MyMessage message);
}

</code></pre><p>然后编写服务实现类</p><pre><code class="language-java">@ShadowService(serviceName = "helloservice")
public class HelloService implements IHello {
    @Override
    public String hello(String msg) {
        return "Hello,"+msg;
    }
    @Override
    public MyMessage say(MyMessage message) {
        MyMessage message1 = new MyMessage();
        message1.setContent("hello received "+"("+message.getContent()+")");
        message1.setNum(message.getNum()+1);
        return message1;
    }
}

</code></pre><span id="OSC_h3_15"></span><h3>指定序列化类型和端口，启动服务端</h3><p>单点启动模式如下:</p><pre><code class="language-java">ServerConfig serverConfig = new ServerConfig();
        serverConfig.setQpsStat(true); //统计 qps
        serverConfig.setPort(2023);

ServerBuilder.newBuilder()
        .serverConfig(serverConfig)
        .addPackage("rpctest.hello")
        .build()
        .start(); 

</code></pre><p>使用 zk 作为集群模式启动</p><pre><code class="language-java">String ZK_URL = "localhost:2181";
ServerConfig serverConfig = new ServerConfig();
serverConfig.setGroup("DefaultGroup");
serverConfig.setPort(2023);
serverConfig.setRegistryUrl(ZK_URL);
serverConfig.setQpsStat(true); //统计 qps
serverConfig.setSerializer(SerializerEnum.KRYO.name());
ServerBuilder.newBuilder()
                .serverConfig(serverConfig)
                .addPackage("rpctest.hello")
                .build()
                .start();

</code></pre><span id="OSC_h3_16"></span><h3>客户端调用 rpc 服务</h3><pre><code class="language-java">ModulePool.getModule(ClientModule.class).init(new ClientConfig());

ShadowClient shadowClient = new ShadowClient("127.0.0.1",2023);
shadowClient.init();

IHello helloService = shadowClient.createRemoteProxy(IHello.class,"shadowrpc://DefaultGroup/helloservice");

logger.info("发送 hello 消息");
String helloResponse = helloService.hello("Tom");
logger.info("hello 服务端响应:"+helloResponse);

MyMessage message = new MyMessage();
message.setNum(100);
message.setContent("Hello, Server!");

System.out.printf("发送请求 : %s\n",message);
MyMessage response = helloService.say(message);
System.out.printf("接收服务端消息 : %s\n",response);    

</code></pre><p>使用 zk 作为服务发现负载均衡调用各个服务器</p><pre><code class="language-java">ClientConfig config = new ClientConfig();
config.setSerializer(SerializerStrategy.KRYO.name());
ModulePool.getModule(ClientModule.class).init(config);
String ZK_URL="localhost:2181";
ShadowClientGroup shadowClientGroup = new ShadowClientGroup(ZK_URL);
shadowClientGroup.init();

IHello helloService = shadowClientGroup.createRemoteProxy(IHello.class, "shadowrpc://DefaultGroup/helloservice");
List&lt;ShadowClient&gt; shadowClientList = shadowClientGroup.getShadowClients("DefaultGroup");

System.out.println("所有服务器: "+shadowClientList.stream().map(c-&gt; c.getRemoteIp()+":"+c.getRemotePort()).collect(Collectors.toList()));

for(int i = 0 ;i&lt;shadowClientList.size() * 5; i++) {
    String hello = helloService.hello(i + "");
    System.out.println(hello);
}

</code></pre><span id="OSC_h2_17"></span><h2>性能测试</h2><p>目前 Mac 笔记本 16G 4 核测试的 rpc 调用 hello 逻辑，如果使用 kryo 序列化/反序列化，100w 个请求耗时 27 秒，平均 QPS 为 3.7w，如果使用 protobuf 序列化/反序列化耗时 25 秒, 平均 QPS 为 4w，如果用 M1 芯片的 Mac，平均 QPS 可以达到 7W+，最高 QPS 可以达到 10w+。</p><span id="OSC_h2_18"></span><h2>源码</h2><p>篇幅有限，介绍的时候不够完整有些遗漏，所有源码见: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FLiubsyy%2FShadowRPC" target="_blank">https://github.com/Liubsyy/ShadowRPC</a><br> 目前仅供学习交流使用，后续我将逐步打磨此 rpc 框架达到企业级水准。</p><blockquote><p>本 RPC 框架使用的方案和技术栈都是业界通用，项目中部分源码如有雷同纯属巧合。</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 07:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3276866/blog/10993751</guid>
            <link>https://my.oschina.net/u/3276866/blog/10993751</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[CPU vs GPU：不仅仅是一字之差]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>当今科学技术的飞速发展，社会已经迈入了信息时代的智能化阶段。人脸识别、智能客服、个性化推荐等应用已经深入到日常生活的各个方面。这些看得见的应用背后，是看不见的算力在默默地支撑着。在满足这些高算力需求的过程中，CPU 和 GPU 作为计算机的核心组件发挥着重要的承载作用。那么，CPU 和 GPU 到底是什么？它们又有什么区别？</p><p>随着数据成为五大生产要素之一，算力的作用变得愈发重要。算力即计算能力（Computing Power），更具体来说，<strong>算力是指数据中心的服务器通过对数据进行处理后实现结果输出的一种能力。</strong></p><p>算力的概念起源于计算机的发明初期。最早的计算机是由机械装置完成计算任务，而算力指的就是这些机械装置的计算能力。随后，半导体技术的出现和发展，集成电路问世，开启了芯片时代。计算机在芯片的加持下，功能越来越强大，体积也越来越小，最终诞生了个人计算机（PC），成为人类最重要的算力工具。</p><p>而后人工智能和大数据技术的迅猛发展也带动了算力需求的飞速增长。无论是训练复杂的神经网络模型，还是进行大规模数据分析和处理，算力都扮演着至关重要的角色。如今，<strong>芯片已经成为算力的主要载体</strong>。当我们谈论算力时，实际上是在讨论 CPU 和 GPU 等芯片的计算能力。在计算机科学领域，CPU 和 GPU 作为计算机的核心组件，虽然名字只有「一字之差」，但其结构和功能却大不相同。</p><span id="OSC_h1_1"></span><h1><strong>1 CPU vs GPU: 概念</strong></h1><p><strong>CPU（Central Processing Unit），即中央处理器</strong>，是电脑、手机等众多电子产品的「心脏」。在我们日常生活的诸多场景中，如观看视频、玩游戏、聊天互动等，<strong>CPU 发挥着统一指挥和调度的关键作用</strong>。它主要负责执行程序指令、进行算术和逻辑运算以及控制和协调计算机各个部件。</p><p>为了满足处理各种不同数据的强大通用性能，CPU 的内部结构设计非常复杂。CPU 由多个核心组成，每个核心又包含算术逻辑单元、控制单元和高速缓存等组件，并且可以独立地执行任务。至今为止，所有的 CPU 都遵循冯·诺依曼体系结构的基本工作流程：取指令，指令译码，执行指令，数据回写，然后再取下一个指令、译码、执行、回写，重复进行直到程序结束。通过这种工作流程，CPU 能够有效地执行程序，并控制整个系统的运行。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-10e85bcb595265cd760feadac4d6ff9b532.png" referrerpolicy="no-referrer"></p><p style="text-align:center">CPU 工作流程</p><p>然而，随着计算机的普及，人们对图形显示的要求不断提高，例如在进行复杂的三维建模时，需要处理大量的图形数据以呈现逼真的效果；在玩大型游戏时，要求系统能够处理高分辨率的画面和复杂的游戏场景。尽管 CPU 内部采用了各种方法来加速指令执行，但随着任务的增多，CPU 的性能显得有些力不从心。</p><p>面对这个问题，能否考虑增加更多的 CPU 来解决呢？这固然是一种思路，但这涉及到相当高的成本，并且堆叠数量也不能保证完全解决计算能力不足的问题。这时候聪明的开发者就提出了一个更巧妙的解决方案：既然 CPU 的计算能力有限，为什么不将计算单元堆叠在同一块芯片上，让它们处理大量运算的任务呢？于是，GPU 诞生了。</p><p><strong>GPU（Graphics Processing Unit），即图形处理器，</strong> 顾名思义，一种专门用来处理图形和图像计算的处理器。<strong>GPU 最初是为图形渲染和显示而设计的，用于加速计算机中图像的处理</strong>，例如在视频游戏、电影渲染、图形设计等方面。它只有少量的控制单元和缓存单元，绝大部分的空间用来堆放运算单元，主要负责完成许多计算密集型任务。</p><span id="OSC_h1_2"></span><h1><strong>2 CPU vs GPU: 「差」在哪里？</strong></h1><p>通过引入 GPU，计算机系统可以充分利用其强大的并行计算能力，加速图形和图像相关的计算任务。CPU 负责逻辑任务，而 GPU 来处理大量简单重复的计算任务，这种不同类型的任务分配给不同类型的处理器的模式，大大提高了系统性能。那么，CPU 和 GPU 到底「差」在哪里呢？</p><p><strong>2.1 架构组成</strong></p><p>CPU 和 GPU 之间存在显著差异，是因为它们各自针对不同的目标和需求来设计，具体体现在：</p><ul><li><p>CPU 需要有强大的通用性，以处理各种不同类型的数据，同时需要进行逻辑判断，包括大量的分支跳转和中断处理，这导致内部结构异常复杂。</p></li><li><p>GPU 主要面向类型高度统一、相互无依赖的大规模数据，并在纯净的计算环境中执行，因此不需要处理复杂的逻辑操作。</p></li></ul><p>这就导致了 CPU 和 GPU 呈现出非常不同的架构：</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-8aa6a52075b93619752a89167782aee5119.png" referrerpolicy="no-referrer"></p><p style="text-align:center">CPU 基本架构</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-c3ccf2310c31a2e6354388180ec4615ba97.png" referrerpolicy="no-referrer"></p><p style="text-align:center">GPU 基本架构</p><p>CPU 拥有较大的缓存单元以及复杂的逻辑控制单元，相比之下计算能力只是 CPU 很小的一部分。而 GPU 则拥有数量众多的计算单元和超长的流水线，但只有非常简单的逻辑控制以及较小的缓存单元。</p><p><strong>2.2 设计理念</strong></p><p>CPU 和 GPU 的设计理念也截然不同。首先，<strong>CPU 是基于低延迟（Low Latency）设计的</strong>：</p><ul><li><p><strong>强大的运算单元：</strong> CPU 拥有数量较少但是单个计算性能更强的运算单元，可以减少操作延时，更快地响应。</p></li><li><p><strong>大容量缓存：</strong> 将一部分数据存储到高速缓存当中，使得高延迟的内存访问转换为低延迟的缓存访问。</p></li><li><p><strong>复杂的控制单元：</strong> 分支预测（Branch Prediction）机制可以降低分支延时；数据转发（Data Forwarding）机制降低数据延时。</p></li></ul><p>而&nbsp;<strong>GPU 则是基于高通量（High Throughput）设计的</strong>：</p><ul><li><p><strong>精简的运算单元：</strong> GPU 拥有大量的运算单元，虽然单个单元的性能比不上 CPU，但可以支持非常多的线程（Thread）从而达到非常大的吞吐量。</p></li><li><p><strong>小容量缓存：</strong> 与 CPU 不同，GPU 缓存的目的并不是用来存储后面需要访问的数据，而是为线程提供服务，如果有很多线程需要访问同一个相同的数据，缓存会合并这些访问，然后再去访问内存。</p></li><li><p><strong>简单的控制单元：</strong> GPU 的控制单元没有分支预测和数据转发机制。</p></li></ul><p>总的来说，CPU 拥有数量相对少（一般不超过两位数）但能力更强的核心，能够更快地处理单个任务，因而它尤其适合处理串行任务和逻辑控制等类型的工作。相比之下，GPU 拥有成百上千核，虽然每个核心运算能力较低，但可以将复杂任务分解成非常多的子任务再并行处理。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-9572c4d616cb11ca84427a84df0d2e95c1d.png" referrerpolicy="no-referrer"></p><p style="text-align:center">串行处理过程</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-d325166b8458a82bfd616ed21119309a3aa.png" referrerpolicy="no-referrer"></p><p style="text-align:center">并行处理过程</p><p><strong>2.3 适用场景</strong></p><p>CPU 与 GPU 二者的设计目的并不一样，因而适用的场景也截然不同。<strong>CPU 更擅长一次处理一项任务，而 GPU 则可以同时处理多项任务。</strong></p><p>用一个形象的比喻来解释。CPU 就像是一架高速飞机，而 GPU 则相当于一队货柜船。它们的任务是将大量货物从 A 位置迅速运送到 B 位置。虽然 CPU（飞机）速度非常快，但每次只能携带少量的货物，需要多次往返才能完成任务。相比之下，GPU（货柜船）虽然单次执行速度相对较慢，但通过协同工作，每艘都能同时携带一部分货物，最终以集体的力量高效完成运输任务。</p><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-b63aae29f97580397fb69a6ed0ae951f0e5.png" referrerpolicy="no-referrer"></p><p style="text-align:center">CPU 与 GPU 处理任务对比</p><p>因此，虽然 CPU 单次执行任务的时间更快，但是在需要大量重复工作负载时，GPU 优势就越显著。而当遇到前后计算步骤严密关联的计算场景，这些任务涉及到「流」的问题，必须先计算完第一步，再去计算第二步。或是需要进行大量逻辑判断和复杂计算的任务，比如运行操作系统、处理日常办公任务、进行单线程编程等。这种时候，使用 GPU 的效率反而没有 CPU 高。</p><p>综上所述，CPU 是个集各种运算能力的大成者。它的优点在于调度、管理、协调能力强，并且可以做复杂的逻辑运算，但由于运算单元和内核较少，只适合做相对少量的运算。GPU 无法单独工作，它相当于一大群接受 CPU 调度的流水线员工，适合做大量的简单运算。<strong>CPU 和 GPU 在功能上各有所长，互补不足，通过相互配合使用，实现最佳的计算性能</strong>。</p><p>因此，虽然 CPU 单次执行任务的时间更快，但是在需要大量重复工作负载时，GPU 优势就越显著。而当遇到前后计算步骤严密关联的计算场景，这些任务涉及到「流」的问题，必须先计算完第一步，再去计算第二步。或是需要进行大量逻辑判断和复杂计算的任务，比如运行操作系统、处理日常办公任务、进行单线程编程等。这种时候，使用 GPU 的效率反而没有 CPU 高。</p><p>综上所述，CPU 是个集各种运算能力的大成者。它的优点在于调度、管理、协调能力强，并且可以做复杂的逻辑运算，但由于运算单元和内核较少，只适合做相对少量的运算。GPU 无法单独工作，它相当于一大群接受 CPU 调度的流水线员工，适合做大量的简单运算。<strong>CPU 和 GPU 在功能上各有所长，互补不足，通过相互配合使用，实现最佳的计算性能</strong>。</p><span id="OSC_h1_3"></span><h1><strong>3 CPU vs GPU: 演进与发展</strong></h1><p>技术的不断更新推动着计算机领域的快速发展，而在这个不断演进的过程中，CPU 和 GPU 也在持续发展。在过去的几十年里它们在各自的领域取得了显著的突破，为计算机应用提供了更高的性能和效率。这不仅推动了数字化时代信息技术的发展，也为各个领域带来了新的可能性。</p><p><strong>3.1 扬长避短，稳步前进</strong></p><p>CPU 拥有强大的指令处理和计算能力（这里强大的计算能力是指 CPU 可以胜任更复杂的计算任务），通常用于处理计算机的核心工作，包括解释计算机指令和处理计算机软件中的数据。例如我们在使用个人计算机时，用户和各种软件会不断地产生指令流，CPU 要完成的一个重要工作就是负责处理这些指令，保证它们按照规定的顺序执行。此外，CPU 还要负责处理计算机软件所产生的类型多样且逻辑复杂的数据。</p><p>距离第一块 CPU 4004 的诞生已经过去了五十多年，尽管与早期相比，CPU 在物理形态、设计制造和具体任务的执行上有了极大的发展，但是其基本的操作原理一直没有改变。换句话来说 <strong>，CPU 的功能和使用场景并没有发生较大的改变，无非是在能耗、性能以及可靠性上面不断地优化。</strong></p><p><strong>3.2 GPU 加速应用遍地开花</strong></p><p>3.2.1 从 GPU 到 GPGPU</p><p>GPU 的概念在 1999 年 NVIDIA 公司发布 GeForce 256 时被首次提出， 在早期，GPU 主要用于 3D 图形渲染。但与 CPU 不同，随着 GPU 的功能和运算能力越来越强大，开发者开始探索除了图形处理之外，GPU 还能做什么？</p><p>在 2003 年，NVIDIA 推出新产品 GeForce 8800 GTX 时，首次提出了 GPGPU（General-purpose computing on Graphics Processing Unit）的概念，即通用图形处理器，意指利用 GPU 的计算能力，在非图形处理领域进行更通用、更广泛的计算。</p><p>到了 2007 年，NVIDIA 进一步提出了名为 CUDA（Compute Unified Device Architecture，计算统一设备架构）的全新技术，利用该技术可以通过 NVIDIA 的 GPU 进行图像处理之外的计算任务，它揭开了 GPU 计算革命序幕。随后，苹果公司也推出了类似的技术：OpenCL（Open Computing Language），<span style="background-color:#ffffff; color:#202122">并在与 AMD</span><span style="background-color:#ffffff; color:#202122">，IBM</span><span style="background-color:#ffffff; color:#202122">，Intel&nbsp;</span><span style="background-color:#ffffff; color:#202122">和 NVIDIA&nbsp;</span><span style="background-color:#ffffff; color:#202122">技术团队的合作之下初步完善。</span>OpenCL 是一个开放的、跨平台的并行计算框架，允许开发人员在不同的硬件平台（CPU、GPU、FPAG 等）上进行开发。</p><p>自此以后，<strong>GPU 不再以图形的 3D 加速为唯一目的，而是能够广泛应用于各领域的通用计算加速，尤其是科学计算、大数据分析以及人工智能等领域。</strong></p><p>3.2.2 大模型与向量数据库</p><p>当今互联网世界所需的计算能力远远超出任何人的想象，并且只会随着人工智能的兴起而增加。以如今爆火的生成式 AI ChatGPT 为代表，大小为 175B 的 GPT-3 使用了 1024 张 A100 GPU 训练了约 34 天，随着参数数量的增加，往后 AI 需要的算力资源更是天文数字。</p><p>大模型同样引发了数据库领域的革命，此前不温不火的向量数据库搭上了这辆顺风车，一举成为 AI 时代的新宠。在 2023 英伟达 GTC AI 开发者大会中，NVIDIA CEO 黄仁勋首次提及向量数据库，并强调<strong>对于构建专有大模型的组织而言，向量数据库至关重要。</strong></p><p>对于 AI 来说，向量是它理解世界的通用数据形式，不管是图片、视频、音频，都可以通过转换成向量来让 AI 识别，<strong>向量数据库作为专门对向量进行检索和存储的工具，能为大模型的应用落地解决诸如「没有长期记忆」、「幻觉」、「知识更新不及时」等问题。</strong></p><p>但是，向量数据库本身的性能也是一个问题，说到底与大模型的结合只是其应用的一部分，它本质上还是一个数据搜索和分析的工具，如果性能满足不了用户需求，同样也会被淘汰。于是乎，开发者们又想起了 GPU。</p><p>在向量数据库中，最核心的功能在于向量相似性搜索，即在一个海量的数据中找到和某个向量最相似的向量，它的计算量十分庞大，而这恰好是 GPU 所擅长的，<strong>利用 GPU 的并行计算能力可以加速向量相似性搜索，显著提高查询速度，降低延迟。</strong></p><span id="OSC_h1_4"></span><h1><strong>4 云原生向量数据库 PieCloudVector 支持 GPU 加速</strong></h1><p>拓数派大模型数据计算系统 πDataCS 三大数据计算引擎之一：<a href="https://my.oschina.net/u/5944765/blog/10321799"><em>向量数据库 PieCloudVector</em></a>，是大模型时代的分析型数据库升维，目标是助力多模态大模型 AI 应用，进一步实现海量向量数据存储与高效查询。PieCloudVector 支持和配合大模型的 Embeddings，帮助基础模型在场景 AI 的快速适配和二次开发，是大模型必备应用。</p><p><strong>PieCloudVector 充分利用现代化硬件能力，支持 GPU 加速功能。</strong> 这一特性让 PieCloudVector 能够利用 GPU 的并行计算能力来加速向量计算和数据处理任务，显著缩短任务的执行时间，提高计算效率，帮助用户更高效地进行数据计算。特别是在需要处理大规模数据集或进行复杂的数值运算时，GPU 加速可以大幅提升计算性能。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 05:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5944765/blog/11020020</guid>
            <link>https://my.oschina.net/u/5944765/blog/11020020</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[社区月报丨 2024 年 1 月，多款应用迎更新，还有 deepin Meetup 的初次相见和久别重逢！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>内容来源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-community-monthly-report-2024-01%2F" target="_blank">deepin 社区</a></p><hr><h1><strong>deepin（深度）社区 1 月总览</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月，有<strong>975</strong>位小伙伴加入了 deepin 开源社区大家庭，目前共有论坛伙伴<strong>151,007</strong>位；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 1 月，2024 年第一场 deepin Meetup 在北京正式举办，同时 deepin（深度）社区举办的龙年春节壁纸大赛也完美落下帷幕；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">1 月 deepin SIG 组共提交 PR 1116 个 ，提交 Issues 294 个，当前共有 SIG 组 40 个。</p><h1><strong>社区产品</strong></h1><h2><strong>深度之家</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月，深度之家共收到用户需求反馈及 bug166 条：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">当中 bug 反馈 126 个，需求反馈 40 个，已修复/确认 16 个，包括用户反馈的【玲珑卸载应用命令，第一次执行会报错，再执行一次才能卸载成功】、【微信更新后登陆不了】等问题；</p><h2><strong>SIG 组 1 月进展</strong></h2><ol><li><strong>DDE SIG:</strong></li></ol><ul><li>DDE-launchpad 脱离技术预览阶段，DDE-shell、Treeland、DDM 进入技术预览阶段</li></ul><ol><li><strong>dde-port SIG:</strong></li></ol><ul><li>持续推进 DDE 在各个发行版的移植</li><li>BigLinux 发行版下的 DDE v23 初步支持</li></ul><ol><li><strong>deepin-sysdev-team：</strong></li></ol><ul><li>持续进行系统仓库的打包与维护工作</li></ul><ol><li><strong>deepin-cicd-team:</strong></li></ol><ul><li>持续完善自动化流水线的智能程度</li></ul><ol><li><strong>deepin-ThemeDesign：</strong></li></ol><ul><li>已开始制作 deepin 适用壁纸，并向应用商店投递中</li></ul><h1><strong>应用商店</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><img alt="" src="https://bbs.deepin.org/uploader/f/TQNIvpoxovcuW4fP.png?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJhdWQiOiJhY2Nlc3NfcmVzb3VyY2UiLCJleHAiOjE3MDY3ODA2OTEsImZpbGVHVUlEIjoiOE5rNk13Nk1EV0ZHendxTCIsImlhdCI6MTcwNjc4MDA5MSwidXNlcklkIjoxMDMxM30.ArE7u7SqsjnfBy4BwVNK3_zpcWgZNnqqlvwLaBhFwsI" referrerpolicy="no-referrer">应用上新 100 款 ：上新应用中，99 款应用同步上新至 deepin V23，99 款应用为 Linux 应用，1 款 Wine 应用；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">上新应用中包括中望 3D 2024、OpenTrace 等多款主流应用；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">应用更新 124 款 ：更新应用中，80 款应用同步在 deepin V23 中更新。其中 113 款为 Linux 应用，Android 应用 7 款，Wine 应用 4 款；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">1 月更新的应用当中包括 QQ、墨刀、有道云笔记等主流应用。</p><h1><strong>deepin 论坛</strong></h1><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">1 月 deepin 论坛共发布了<strong>8803</strong>帖子；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">共发布主题帖<strong>1092</strong>个；</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">超过 900 + 新朋友加入到 deepin 论坛。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">当中，最受论坛用户欢迎的帖子 top5 为：</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>1.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267681" target="_blank">关于 deepin-V23 beta3 新版本的体验，及个人看法</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>2</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267289" target="_blank">.大家对文件管理器有什么不满吗？</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>3.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267297" target="_blank">V23 任务栏改进建议，集中反馈贴！</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>4.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267665" target="_blank">真的不要再高仿了，越来越刷新对国产自主能力的认知！</a></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>5.</strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbbs.deepin.org%2Fpost%2F267231" target="_blank">揭秘 deepin V23 Beta3！deepin Meetup · 2024 北京，出发！</a></p><h1><strong>社区活动</strong></h1><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwelcome-to-whlug%2F" target="_blank"><strong>【WHLUG】</strong></a></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月 20 日下午，由 deepin（深度）社区联合 Linux 中国、龙蜥社区（OpenAnolis）、华中科技大学网络空间安全学院开源俱乐部一起举办的 Linux 爱好者线下沙龙活动（WHLUG）在武汉未来科技城成功举办。沙龙邀请了武汉地区的 Linux 爱好者，共同探讨玲珑、容器技术、Linux 内核、开源参与、高性能网络等话题，现场气氛热烈。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="image.png" src="https://storage.deepin.org/thread/202402010937419026_image.png" referrerpolicy="no-referrer"></p><h2><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-meetup%2F" target="_blank"><strong>deepin Meetup（北京站）</strong></a></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">2024 年 1 月 27 日，deepin Meetup（北京站）成功举办，40 余名用户参与。本次活动带大家回顾 deepin（深度）社区的发展历史，展示了社区部分明星产品及技术成果，并提前揭秘了 deepin V23 Beta3 的部分新增功能，如启动器重构、UOS AI 预装、新增低电阈值设置功能、支持了 Steam 原生应用的安装等。各位 deepiner 线下相聚，昔日网友揭开神秘面纱，共同探讨最新产品进展、分享使用心得、实操经验，大家也对 deepin 未来发展提出了诸多宝贵意见，现场氛围热烈。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="image.png" src="https://storage.deepin.org/thread/202402010938049219_image.png" referrerpolicy="no-referrer"></p><h2><strong>deepin（深度）社区春节壁纸大赛</strong></h2><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">在 2024 年春节来临之际，国产操作系统「统信 UOS」及 deepin（深度）社区联合举办全新一期壁纸创作大赛，面向所有对电脑操作系统个性美化感兴趣的设计师，征集壁纸作品，展示心中的独特的「中国龙年」。活动已圆满结束，总计收到有效作品数 90 份（156 张图片），通过社区投递系统上架壁纸作品包共计 75 个，参赛人数 23 人（其中 4 位设计师、2 位老师、8 位学生），大众评委环节评分 300 次，参与人数 148 人。目前所有成功投稿的作品都已上架应用商店，可在应用商店中搜索【龙年壁纸】，安装使用。</p><p style="color:#333333; margin-left:0px; margin-right:0px; text-align:center"><img alt="image.png" src="https://storage.deepin.org/thread/202402010938569200_image.png" referrerpolicy="no-referrer"></p><p style="text-align:center">参赛作品：古韵新绎，「龙」光焕发</p><p style="text-align:center">设计师：MC 李狗蛋</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><h1><strong>社区鸣谢</strong></h1><h2><strong>【论坛最活跃小伙伴】</strong></h2><ul><li>阿尼樱奈奈</li><li>buyike</li><li>晚秋（lateautumn）</li></ul><h2><strong>【内测最活跃小伙伴】</strong></h2><ul><li>烟霞志</li><li>e*t@gmail.c<strong>o</strong>m**</li><li>jiutian123</li></ul><h2><strong>【PR 贡献最活跃小伙伴】</strong></h2><ul><li>Zeno-sole</li><li>UTsweetyfish</li><li>Decodetalkers</li><li>xzl01</li><li>18202781743</li><li>liyigang1</li><li>tsic404</li></ul><p style="margin-left:0px; margin-right:0px; text-align:start"><strong>每个贡献者都对深度开源社区的发展产生了巨大的影响，欢迎与我们同心协力，扬起 deepin 的桅杆！</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 02 Feb 2024 05:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277431</guid>
            <link>https://www.oschina.net/news/277431</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[VS Code 1.86 会导致远程开发功能无法使用]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Visual Studio Code 今日发布的最新版 <u><a href="https://www.oschina.net/news/277414/vs-code-1-86-released">1.86</a></u><span>&nbsp;引入一项严重的破坏性变化，其</span>远程开发服务器工具链<span>最低环境要求的&nbsp;</span>glibc 版本提升为 2.28。</p><p>由于&nbsp;Ubuntu 18.04 LTS 使用 glibc 2.27，因此有开发者发现自己升级到 VS Code 新版本后，使用 Remote SSH 无法连接到远程机器。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-7159057b7f201b731192ad420804af1891b.png" referrerpolicy="no-referrer"></p><p><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fv2ex.com%2Ft%2F1013590" target="_blank">https://v2ex.com/t/1013590</a></em></u></p></blockquote><p>对于该问题，目前的解决方案有两种：</p><ul><li><strong>根据对应的发行版，升级至 Ubuntu 20.04 LTS、Debian 10 或 RHEL 8</strong></li><li><strong>降级到 VS Code 1.85</strong></li></ul><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-cd7781af0c011f485dda9a5d8b8df221d79.png" referrerpolicy="no-referrer"></p></blockquote><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Fremote%2Ffaq%23_can-i-run-vs-code-server-on-older-linux-distributions" target="_blank">详情查看官方 FAQ</a></u>。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 01 Feb 2024 06:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/277439/vscode-1-86-drops-ubuntu-18-04</guid>
            <link>https://www.oschina.net/news/277439/vscode-1-86-drops-ubuntu-18-04</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
    </channel>
</rss>
