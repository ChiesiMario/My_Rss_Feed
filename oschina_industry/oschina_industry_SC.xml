<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[开源中国-综合资讯]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[开源中国-综合资讯 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Mon, 09 Oct 2023 13:18:55 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[开源框架 NanUI 作者转行卖钢材，项目暂停开发]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>NanUI 作者在国庆节发布了停更公告，称该项目将暂停开发，原因是去年被裁员失业后，<strong>他已转行销售钢材</strong>，现在很难腾出时间来开发和维护 NanUI 项目。</p><p>他说道：</p><blockquote><p>为了生存，本人只能花费更多的时间和精力去谈单，去销售，去收款，因此已经很难再腾出时间来开发和维护 NanUI 项目，对此我深感无奈，也希望后面生活和工作稳定后能腾出时间来继续维护 NanUI。</p></blockquote><p>NanUI 作者表示，他所在公司因疫情于去年（2022 年）初彻底宣布裁减所有开发岗位，因此他也只能顺应大流在 36 岁这个尴尬的年纪失业。</p><p><img height="1285" src="https://static.oschina.net/uploads/space/2023/1009/173727_oVGe_2720166.png" width="1980" referrerpolicy="no-referrer"></p><p><em>via&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FXuanchenLin%2FNanUI%2Fdiscussions%2F367" target="_blank">https://github.com/XuanchenLin/NanUI/discussions/367</a></em></p><blockquote><p>NanUI 界面组件是一个开放源代码的 .NET / .NET Core 窗体应用程序（WinForms）界面框架。它适用于希望使用 HTML5/CSS3 等前端技术来构建 Windows 窗体应用程序用户界面的 .NET 开发人员。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-060f8d602f0ac9de0bb5953b554b233f62e.png" referrerpolicy="no-referrer"></p><p>NanUI 基于谷歌可嵌入的浏览器框架 Chromium Embedded Framework (CEF)，因此用户可以使用各种前端技术 HTML5/CSS3/JavaScript 和流行前端框架 React/Vue/Angular/Blazor 设计和开发 .NET 桌面应用程序的用户界面。</p><p>同时，NanUI 独创的 JavaScript Bridge 可以方便地实现浏览器端与 .NET 之间的通信和数据交换。</p><p>使用 NanUI 界面框架将为传统的 WinForm 应用程序的用户界面设计和开发工作带来无限种可能！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 09:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261033</guid>
            <link>https://www.oschina.net/news/261033</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[非凸科技受邀出席源创会，探讨数据技术的未来发展]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:center"><img height="466" src="https://oscimg.oschina.net/oscnet/up-c551fe1ce356a89e7e8b392055164817d4f.jpg" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>9</span></span><span><span>月</span></span><span><span>23</span></span><span><span>日</span></span><span><span>，</span></span><span><span>由开源中国联合腾讯云</span></span><span><span>TVP</span></span><span><span>开展的「数据与前沿技术」源创会活动在成都顺利举行</span></span><span><span>，</span></span><span><span>非凸科技受邀出席</span></span><span><span>，</span></span><span><span>与业界专家们共同探讨了数据存储</span></span><span><span>、</span></span><span><span>数据分析</span></span><span><span>、</span></span><span><span>数据挖掘等前沿技术</span></span><span><span>。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>会上</span></span><span><span>，</span></span><span><span>非凸科技成都分公司研发总监赵海峰以「量化交易的数据驱动」为主题进行了分享</span></span><span><span>。</span></span><span><span>在量化交易领域如何高效地获取行情数据</span></span><span><span>，</span></span><span><span>如何将行情数据转发到需要的服务器</span></span><span><span>，</span></span><span><span>如何处理大量历史行情数据的存放和读取</span></span><span><span>，</span></span><span><span>又是如何通过行情数据进行模型的训练</span></span><span><span>，</span></span><span><span>赵海峰老师一一做出了精彩的解答</span></span><span><span>。</span></span><span><span>活动后</span></span><span><span>，</span></span><span><span>引发线上热烈交流讨论</span></span><span><span>。</span></span></span></span></p><p style="text-align:center"><img height="358" src="https://oscimg.oschina.net/oscnet/up-dd23c7e0f8444597f06f020859cc3e800bb.png" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>量化交易主要通过行情数据进行交易决策</span></span><span><span>，</span></span><span><span>那么如何通过券商获取行情</span></span><span><span>，</span></span><span><span>进行行情低延迟接收的软硬件方案呢</span></span><span><span>？</span></span><span><span>交易所发布</span></span><span><span>的</span></span><span><span>行情</span></span><span><span>会</span></span><span><span>经过券商的处理再转发给交易机构</span></span><span><span>，</span></span><span><span>其转发途径主要有</span></span><span><span>TCP、UDP、FPGA</span></span><span><span>加速的 UDP 和</span></span><span><span>ASIC</span></span><span><span>加速的 UDP</span></span><span><span>行情</span></span><span><span>等</span></span><span><span>。</span></span><span><span>然而</span></span><span><span>，</span></span><span><span>券商通过</span></span><span><span>TCP</span></span><span><span>连接将处理后的行情数据转发给交易机构</span></span><span><span>，</span></span><span><span>会存在延迟大</span></span><span><span>、</span></span><span><span>应用层</span></span><span><span>丢包</span></span><span><span>（非 TCP 协议丢包）、发送端负载大</span></span><span><span>等问题</span></span><span><span>。</span></span><span><span>为了解决这些问题</span></span><span><span>，</span></span><span><span>券商又通过</span></span><span><span>UDP</span></span><span><span>组播或广播的方式</span></span><span><span>，</span></span><span><span>将处理后的行情或交易所原始行情转发给交易机构</span></span><span><span>。</span></span><span><span>为了达到极致的低延迟，</span></span><span><span>券商端将会通过多种方式来解决</span></span><span><span>，</span></span><span><span>其中一个</span></span><span><span>特别有效</span></span><span><span>的方式是使用</span></span><span><span>L1</span></span><span><span>交换机</span></span><span><span>，在一层转发光或电信号给客户，其转发延迟可以低至 4ns。</span></span><span><span>需要注意的是</span></span><span><span>，</span></span><span><span>虽然 UDP 不是一个可靠传输协议，但</span></span><span><span>在同一个交换机连接的服务器</span></span><span><span>之间使用 UDP 进行通信</span></span><span><span>，</span></span><span><span>正常情况下</span></span><span><span>在网络上几乎不</span></span><span><span>会</span></span><span><span>丢包</span></span><span><span>。然而，</span></span><span><span>在客户端程序和服务器的网卡上可能</span></span><span><span>会</span></span><span><span>丢包</span></span><span><span>。</span></span><span><span>因此</span></span><span><span>，</span></span><span><span>客户在接收行情时</span></span><span><span>，</span></span><span><span>可以使用</span></span><span><span>无锁的</span></span><span><span>ring buffer</span></span><span><span>转发数据到处理线程</span></span><span><span>，</span></span><span><span>以并</span></span><span><span>行处理</span></span><span><span>不同股票的行情，</span></span><span><span>然后</span></span><span><span>将处理结果</span></span><span><span>写入共享内存</span></span><span><span>，</span></span><span><span>以供交易系统读取</span></span><span><span>。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>收到行情后</span></span><span><span>，</span></span><span><span>如何将行情数据转发给内部的其他消费者呢</span></span><span><span>？</span></span><span><span>如果对延迟要求没有太高</span></span><span><span>，</span></span><span><span>可以使用</span></span><span><span>TCP</span></span><span><span>转发行情</span></span><span><span>，</span></span><span><span>能够自己控制丢包率</span></span><span><span>，为了降低延迟和增加吞吐，也可以使用 UDP 转发行情。</span></span><span><span>由于逐笔行情不允许丢包</span></span><span><span>，</span></span><span><span>所以在使用</span></span><span><span>UDP</span></span><span><span>转发行情时</span></span><span><span>，</span></span><span><span>可以搭配</span></span><span><span>TCP</span></span><span><span>行情重传服务</span></span><span><span>，</span></span><span><span>通过</span></span><span><span>多路行情汇聚</span></span><span><span>、R</span></span><span><span>oc</span></span><span><span>ksdb</span></span><span><span>持久化</span></span><span><span>等方式对 UDP 转发行情进行补充</span></span><span><span>。</span></span><span><span>如果</span></span><span><span>转发行情前</span></span><span><span>进行数据压缩</span></span><span><span>，</span></span><span><span>那么延迟</span></span><span><span>和吞吐量可能会更优秀</span></span><span><span>。</span></span><span><span>行情压缩主要有两种方式</span></span><span><span>：</span></span><span><span>行情消息的压缩</span></span><span><span>、</span></span><span><span>消息内部</span></span><span><span>字段</span></span><span><span>的压缩</span></span><span><span>（</span></span><span><span>股票代码</span></span><span><span>、</span></span><span><span>价格</span></span><span><span>）。</span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>行情转发之后</span></span><span><span>，</span></span><span><span>如何使用行情数据分析交易执行情况</span></span><span><span>，</span></span><span><span>又该如何训练模型呢</span></span><span><span>？</span></span><span><span>收取到行情后</span></span><span><span>，</span></span><span><span>其中一种应用场景是训练量化交易模型</span></span><span><span>，</span></span><span><span>将收取到的行情数据进行特征处理</span></span><span><span>，</span></span><span><span>提取因子</span></span><span><span>，并利用 AI</span></span><span><span>进行模型训练</span></span><span><span>，</span></span><span><span>然后将训练好的模型解析出来以备高效地计算</span></span><span><span>实时</span></span><span><span>信号</span></span><span><span>，</span></span><span><span>在接收到实时信号值之后</span></span><span><span>，</span></span><span><span>再</span></span><span><span>极速</span></span><span><span>推送到交易系统</span></span><span><span>，</span></span><span><span>就可以根据不同的策略配置触发交易</span></span><span><span>；</span></span><span><span>另一种场景应用是把收取到的行情数据与</span></span><span><span>C</span></span><span><span>l</span></span><span><span>ickHouse</span></span><span><span>集成</span></span><span><span>，</span></span><span><span>这</span></span><span><span>不仅能提供高效的聚合和分析查询</span></span><span><span>功能</span></span><span><span>，</span></span><span><span>还能使用流式聚合表自动计算</span></span><span><span>交易数据，如实时</span></span><span><span>交易盈亏</span></span><span><span>，风险指标等</span></span><span><span>。</span></span></span></span></p><p style="text-align:center"><img height="466" src="https://oscimg.oschina.net/oscnet/up-14ae8244232acc42aea0b9bf638cf1632ff.jpg" width="700" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span>非凸科技正在加大对金融科技研究的投入</span></span><span><span>，</span></span><span><span>持续以行业技术交流与合作的方式</span></span><span><span>，</span></span><span><span>整合行业生态优势资源</span></span><span><span>，</span></span><span><span>加快创新技术在实际业务场景中的落地</span></span><span><span>。</span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 09:31:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261029</guid>
            <link>https://www.oschina.net/news/261029</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[学习 DevOps 落地实践，全面提升技术水平]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>在我们高速发展的技术时代，DevOps 已经成为企业持续交付和优化业务的关键。但是目前市场寒冬、经济下行，各大企业纷纷裁员。作为天选打工人的我们，收入锐减、就业困难，普通人如何应对？大龄 IT 从业者，职业迷茫、焦虑恐慌，如何加强学习快速成长？</p><p style="text-align:center"><img height="249" src="https://static.oschina.net/uploads/space/2023/1009/165530_PSgw_2720166.png" width="400" referrerpolicy="no-referrer"></p><p>为了帮助社区成员解决以上问题，我们特别推出了一套针对技术社区的《DevOps 落地实践训练营》。这个训练营将带您全面了解 DevOps 的核心理念和实践方法，从产品设计、需求管理、代码管理、持续集成、部署发布、数据度量、业务运营等各个领域，带您端到端的学习 DevOps 相关知识。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1009/165548_jSD5_2720166.png" referrerpolicy="no-referrer"></p><p>参加我们的 DevOps 落地实践训练营，您将会有以下收获：</p><ol><li>提升技术能力：通过系统的培训，您将对 DevOps 有更深入的理解，提升您的技术实力。</li><li>提高沟通能力：训练营将帮助您更好地与开发、测试和运维团队沟通，提高团队协作效率。</li><li>拓宽知识视野：训练营将邀请业内专家分享经验，帮助您掌握最新的 DevOps 工具和技术。</li><li>发掘最佳实践：通过案例分析和实践操作，您将了解到更多的 DevOps 最佳实践，为您的工作带来更多灵感。</li></ol><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1009/165712_fZMA_2720166.png" referrerpolicy="no-referrer"></p><p>我们的训练营有以下亮点：</p><p>1、现在大多数的培训都是线上，效果如何，相信大家都有自己的判断。小编在以前学习线上课程时，超不过半小时就走神犯困。<strong>《DevOps 落地实践训练营》采用线下培训形式，确保学员能够亲身体验和实践所学内容</strong>。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1009/165732_9QiG_2720166.png" referrerpolicy="no-referrer"></p><p>2、术业有专攻，单一讲师的培训并不能做到全栈贯通赋能。本训练营邀请多位专业讲师联袂推出端到端的实践技能培训，内容包含 25 个章节，<strong>全面讲解软件开发过程中产品设计、项目管理、开发、测试、架构等多个领域的知识实践</strong>。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1009/165752_0tuV_2720166.png" referrerpolicy="no-referrer"></p><p>3、职业技能培训，最终的目的是学以致用。有别于其他认证类培训，本次训练营更为重要的是，<strong>每个环节都有动手练习环节，确保学员真正掌握所学技能</strong>。而且能够将理论知识与实际工作紧密结合，为学员提供贯通全栈赋能的培训。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1009/165814_dmE9_2720166.png" referrerpolicy="no-referrer"></p><p>4、「天下苦高价培训久矣。」本次训练营，以 480 元的价格提供了一种高性价比的培训方式，让学员不再因价格而犹豫。如果你想在学习技能的同时，还想获得一个职业技能证书，980 的价格，你就能获得由」中国管理科学院「颁发的《专业人才培训证书》。此处注意，培训和证书并不强制绑定，本土培训，仅此一家。</p><p style="text-align:center"><img src="https://static.oschina.net/uploads/space/2023/1009/165830_KvDB_2720166.png" referrerpolicy="no-referrer"></p><p>DevOps 落地实践训练营是一个全面提升技术水平的绝佳机会，不仅能帮助您更深入地理解 DevOps，还能提升您的团队协作能力，拓宽知识视野，并让您有机会接触到更多的最佳实践。我们邀请您积极参与，与业内专家和同行一起共创。我们期待在未来的交流和合作中与您共同成长，创造更多的可能性！</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 09:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/261024</guid>
            <link>https://www.oschina.net/news/261024</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[联想计划推出 Android PC]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">联想于近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.techradar.com%2Fcomputing%2Fdesktop-pcs%2Flenovo-shifts-direction-with-new-android-based-pcs-and-they-look-powerful" target="_blank">宣布</a>计划生产&nbsp;Android PC。该公司将于&nbsp;<span style="background-color:#ffffff">Esper&nbsp;</span>合作，<span style="background-color:#ffffff">重新设计其台式一体机 ThinkCentre M70a，「</span><span style="background-color:#ffffff">这台一体机将代表着联想进军 Android 领域的第一步」。Esper 是一家专门提供 Android 定制服务以及设备管理产品的公司。</span></span></p><p><span style="color:#000000"><span style="background-color:#ffffff">ThinkCentre M70a 采用 21.5 英寸 FHD 无边框显示屏，</span>现有版本采用英特尔处理器，可以从入门级 i3 一直配置到功能强大的 i9 芯片。M70a 目前采用的是 Windows 11 操作系统，但据透露新版本将采用 Android 系统。</span></p><p><img height="401" src="https://oscimg.oschina.net/oscnet/up-5eda0c1eee499fc80e95d2f72bb2c76eeee.png" width="500" referrerpolicy="no-referrer"></p><p><img height="399" src="https://oscimg.oschina.net/oscnet/up-98d83cf5f92a9b40a586a0f0345868a918a.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">联想方面表示，ThinkCentre M70a 主要面向企业客户，希望它能吸引零售和酒店业的企业使用。除此之外，联想还计划与 Esper 合作推出基于 Android 系统的 ThinkCentre M70q，以及基于 Windows 系统的 ThinkEdge SE30 和 ThinkCentre M90n-1 IoT。</span></p><p><span style="color:#000000">目前在台式电脑领域最接近 Android 系统的是惠普的 Chromebase AIO 等产品，由于采用了 ChromeOS，它可以通过谷歌 Play 商店运行 Android 应用程序。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 07:09:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260995/lenovo-esper-android-pc</guid>
            <link>https://www.oschina.net/news/260995/lenovo-esper-android-pc</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推荐 | 易语言开发的服务器软件 MODHTTP SERVER]]>
            </title>
            <description>
                <![CDATA[<h1><a id="user-content-modhttp-server" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#modhttp-server"></a>MODHTTP SERVER</h1><p><img src="https://gitee.com/wxgshuju/modhttp-server/raw/master/fw.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><p>项目地址：<a href="https://gitee.com/wxgshuju/modhttp-server">https://gitee.com/wxgshuju/modhttp-server</a></p><h4><a id="user-content-介绍" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E4%BB%8B%E7%BB%8D"></a>介绍</h4><p>MODHTTP SERVER 是采用国产化编程易语言开发的网站服务器软件。该程序集成 Nginx+ASP+PHP+MySQL+Openssl+HOSTS+MYSQL-FORM+Sqlite 数据库管理器+Access 数据库管理器;支持 HTTP1.1 协议、HTTP2 协议、HTTP3 协议，该工具实现 NGINX 配置可视化编辑、PHP 可视化配置可视化编辑，该程序不仅包括 ASP、PHP、Modhttp 调试环境，还包括了开发工具、开发手册等</p><h4><a id="user-content-声明" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E5%A3%B0%E6%98%8E"></a>声明</h4><p>本软件基于开源协议 Apache 发布，允许转发，允许第三方修改，本软件永久免费，终身免费</p><p>软件开发者：魔帝本尊</p><p>支持平台：Windows</p><p>优点：绿色服务解压即可安装，一键可视化配置即可使用</p><p>项目状态：持续更新维护中...</p><p>本软件已经开源，如需要程序源码请在 OPEN-SOURCE 中查看.</p><h4><a id="user-content-软件架构" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84"></a>软件架构</h4><p>本软件需要安装以下运行库库
Microsoft Visual C++ 2015-2022 Redistributable 14.38.32919.0 (2023-08-09)</p><p>x64 <a href="https://gitee.com/link?target=https%3A%2F%2Fdownload.visualstudio.microsoft.com%2Fdownload%2Fpr%2F02a6d5c5-3e10-47de-8025-d97a1321d3e3%2F5F60592799FAE0C82578112D4B621438FFC976AB39D848D8F7623F5705A83E27%2FVC_redist.x64.exe">https://download.visualstudio.microsoft.com/download/pr/02a6d5c5-3e10-47de-8025-d97a1321d3e3/5F60592799FAE0C82578112D4B621438FFC976AB39D848D8F7623F5705A83E27/VC_redist.x64.exe</a></p><p>x86 <a href="https://gitee.com/link?target=https%3A%2F%2Fdownload.visualstudio.microsoft.com%2Fdownload%2Fpr%2F02a6d5c5-3e10-47de-8025-d97a1321d3e3%2FAD573D3198853FC71137A88E51ABDE844B84F29B0CE6DD91BBEC661BC0143B36%2FVC_redist.x86.exe">https://download.visualstudio.microsoft.com/download/pr/02a6d5c5-3e10-47de-8025-d97a1321d3e3/AD573D3198853FC71137A88E51ABDE844B84F29B0CE6DD91BBEC661BC0143B36/VC_redist.x86.exe</a></p><h4><a id="user-content-下载路径" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E4%B8%8B%E8%BD%BD%E8%B7%AF%E5%BE%84"></a>下载路径</h4><p>最新版本：32.02</p><p>Gitee：<a href="https://gitee.com/wxgshuju/modhttp-server/raw/master/MODHTTP_SERVER32.02.7z">https://gitee.com/wxgshuju/modhttp-server/raw/master/MODHTTP_SERVER32.02.7z</a></p><p>百度云：<a href="https://gitee.com/link?target=https%3A%2F%2Fpan.baidu.com%2Fs%2F1gSJ4-8iYEEp9pcfB9T6OCg%3Fpwd%3Dk46w">链接：https://pan.baidu.com/s/1gSJ4-8iYEEp9pcfB9T6OCg?pwd=k46w 提取码：k46w</a></p><p>阿里云：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.aliyundrive.com%2Fs%2FeNRtZX34YJP">https://www.aliyundrive.com/s/eNRtZX34YJP</a></p><h4><a id="user-content-安装教程" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E5%AE%89%E8%A3%85%E6%95%99%E7%A8%8B"></a>安装教程</h4><ol><li><p>解压后打开&lt;&lt;MODHTTP.exe&gt;&gt;</p></li><li><p>解压路径中不允许有空格，建议解压到根目录，例如 C:\ D：\等</p></li></ol><h4><a id="user-content-使用说明" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E"></a>使用说明</h4><p><img src="https://gitee.com/wxgshuju/modhttp-server/raw/master/t1.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><ol><li>打开&lt;&lt;MODHTTP.exe&gt;&gt;</li></ol><p><img src="https://gitee.com/wxgshuju/modhttp-server/raw/master/t2.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><ol start="2"><li><p>首次使用打开后点击左上角菜单&gt;网站管理;打开网站管理器增填、修改网站目录，修改完成后点击【保存配置】按钮，关闭此窗口</p></li><li><p>点击启动,在首页右侧找到扩展项&gt;Nginx&gt;配置调试，点击【配置调试】按钮，页面显示以下内容则配置成功，可以启动服务。</p></li></ol><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">nginx: the configuration </span><span id="LC2" class="line">conf/nginx.conf syntax is ok</span><span id="LC3" class="line">nginx: configuration file D:\modhttp32.02A202310072215\modhttp-server\nginx/conf</span><span id="LC4" class="line">/nginx.conf test is successful</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p><img src="https://gitee.com/wxgshuju/modhttp-server/raw/master/t3.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><p>4.按需要勾选组件，如 Nginx，Mysql，ASP，PHP 等，在选项前面打勾启动服务，如需关闭请再次点击取消√则停止服务</p><p><img src="https://gitee.com/wxgshuju/modhttp-server/raw/master/t4.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><p>5.启动服务后点击右上角【访问 nginx 页面】按钮，开始尽情的写 BUG 吧</p><p><img src="https://gitee.com/wxgshuju/modhttp-server/raw/master/t5.png" alt="输入图片说明" referrerpolicy="no-referrer"></p><h4><a id="user-content-帮助" class="anchor" href="https://gitee.com/wxgshuju/modhttp-server#%E5%B8%AE%E5%8A%A9"></a>帮助</h4><p>鼠标光标移动到功能，文字标题会显示帮助提示和信息</p>]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 06:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/wxgshuju/modhttp-server</guid>
            <link>https://gitee.com/wxgshuju/modhttp-server</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 聊聊前端框架的未来 Signals]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p>Signals 在目前前端框架的选型中遥遥领先！</p></blockquote><p>国庆节前最后一周在 Code Review 新同学的 React 代码，发现他想通过 memo 和 useCallback 只渲染被修改的子组件部分。事实上该功能在 React 中是难以做到的。因为 React 状态变化后，会重新执行 render 函数。也就是在组件中调用 setState 之后，整个函数将会重新执行一次。</p><p>React 本身做不到。但是基于 Signals 的框架却不会这样，它通过自动状态绑定和依赖跟踪使得当前状态变化后仅仅只会重新执行用到该状态代码块。</p><p>个人当时没有过多的解释这个问题，只是匆匆解释了一下 React 的渲染机制。在这里做一个 Signals 的梳理。</p><h2>优势</h2><p>对比 React，基于 Signals 的框架状态响应粒度非常细。这里以 Solid 为例：</p><pre><code class="language-js">import { createSignal, onCleanup } from "solid-js";

const CountingComponent = () =&gt; {
  // 创建一个 signal
  const [count, setCount] = createSignal(0);

  // 创建一个 signal
  const [count2] = createSignal(666);

  // 每一秒递增 1
  const interval = setInterval(() =&gt; {
    setCount((c) =&gt; c + 1);
  }, 1000);

  // 组件销毁时清除定时器
  onCleanup(() =&gt; clearInterval(interval));

  return (
    &lt;div&gt;
      &lt;div&gt;
        count: {count()}
        {console.log("count is", count())}
      &lt;/div&gt;
      &lt;div&gt;
        count2: {count2()}
        {console.log("count2 is", count2())}
      &lt;/div&gt;
    &lt;/div&gt;
  );
};
</code></pre><p>上面这段代码在 count 单独变化时，只会打印 count，压根不会打印 count2 数据。</p><p>控制枱打印如下所示：</p><ul><li>count is 0</li><li>count2 is 666</li><li>count is 1</li><li>count is 2</li><li>...</li></ul><p>从打印结果来看，Solid 只会在最开始执行一次渲染函数，后续仅仅只会渲染更改过的 DOM 节点。这在 React 中是不可能做到的，React 是基于视图驱动的，状态改变会重新执行整个渲染函数，并且 React 完全无法识别状态是如何被使用的，开发者甚至可以通过下面的代码来实现 React 的重新渲染。</p><pre><code class="language-js">const [, forceRender] = useReducer((s) =&gt; s + 1, 0);
</code></pre><p>除了更新粒度细之外，使用 Signals 的框架心智模型也更加简单。其中最大的特点是：开发者完全不必在意状态在哪定义，也不在意对应状态在哪渲染。如下所示：</p><pre><code class="language-js">import { createSignal } from "solid-js";

// 把状态从过组件中提取出来
const [count, setCount] = createSignal(0);
const [count2] = createSignal(666);

setInterval(() =&gt; {
  setCount((c) =&gt; c + 1);
}, 1000);

// 子组件依然可以使用 count 函数
const SubCountingComponent = () =&gt; {
  return &lt;div&gt;{count()}&lt;/div&gt;;
};

const CountingComponent = () =&gt; {
  return (
    &lt;div&gt;
      &lt;div&gt;
        count: {count()}
        {console.log("count is", count())}
      &lt;/div&gt;
      &lt;div&gt;
        count2: {count2()}
        {console.log("count2 is", count2())}
      &lt;/div&gt;
      &lt;SubCountingComponent /&gt;
    &lt;/div&gt;
  );
};
</code></pre><p>上述代码依然可以正常运行。因为它是基于状态驱动的。开发者在组件内使用 Signal 是本地状态，在组件外定义 Signal 就是全局状态。</p><p>Signals 本身不是那么有价值，但结合派生状态以及副作用就不一样了。代码如下所示：</p><pre><code class="language-js">import {
  createSignal,
  onCleanup,
  createMemo,
  createEffect,
  onMount,
} from "solid-js";

const [count, setCount] = createSignal(0);

setInterval(() =&gt; {
  setCount((c) =&gt; c + 1);
}, 1000);

// 计算缓存
const doubleCount = createMemo(() =&gt; count() * 2);

// 基于当前缓存
const quadrupleCount = createMemo(() =&gt; doubleCount() * 2);

// 副作用
createEffect(() =&gt; {
  // 在 count 变化时重新执行 fetch
  fetch(`/api/${count()}`);
});

const CountingComponent = () =&gt; {
  // 挂载组件时执行
  onMount(() =&gt; {
    console.log("start");
  });

  // 销毁组件时执行
  onCleanup(() =&gt; {
    console.log("end");
  });

  return (
    &lt;div&gt;
      &lt;div&gt;Count value is {count()}&lt;/div&gt;
      &lt;div&gt;doubleCount value is {doubleCount()}&lt;/div&gt;
      &lt;div&gt;quadrupleCount value is {quadrupleCount()}&lt;/div&gt;
    &lt;/div&gt;
  );
};
</code></pre><p>从上述代码可以看到，派生状态和副作用都不需要像 React 一样填写依赖项，同时也将副作用与生命周期分开 (代码更好阅读)。</p><h2>实现机制</h2><p>细粒度，高性能，同时还没有什么限制。不愧被誉为前端框架的未来。那么它究竟是如何实现的呢？</p><p>本质上，Signals 是一个在访问时跟踪依赖、在变更时触发副作用的值容器。</p><p>这种基于响应性基础类型的范式在前端领域并不是一个特别新的概念：它可以追溯到十多年前的 Knockout observables 和 Meteor Tracker 等实现。Vue 的选项式 API 也是同样的原则，只不过将基础类型这部分隐藏在了对象属性背后。依靠这种范式，Vue2 基本不需要优化就有非常不错的性能。</p><h3>依赖收集</h3><p>React useState 返回当前状态和设置值函数，而 Solid 的 createSignal 返回两个函数。即：</p><pre><code class="language-TypeScript">type useState = (initial: any) =&gt; [state, setter];

type createSignal = (initial: any) =&gt; [getter, setter];
</code></pre><p>为什么 createSignal 要传递 getter 方法而不是直接传递对应的 state 值呢？这是因为框架为了具备响应能力，Signal 必须要收集谁对它的值感兴趣。仅仅传递状态是无法提供 Signal 任何信息的。而 getter 方法不但返回对应的数值，同时执行时创建一个订阅，以便收集所有依赖信息。</p><h3>模版编译</h3><p>要保证 Signals 框架的高性能，就不得不结合模版编译实现该功能，框架开发者通过模版编译实现动静分离，配合依赖收集，就可以做到状态变量变化时点对点的 DOM 更新。所以目前主流的 Signals 框架没有使用虚拟 DOM。而基于虚拟 DOM 的 Vue 目前依靠编译器来实现类似的优化。</p><p>下面我们先看看 Solid 的模版编译：</p><pre><code class="language-js">const CountingComponent = () =&gt; {
  const [count, setCount] = createSignal(0);
  const interval = setInterval(() =&gt; {
    setCount((c) =&gt; c + 1);
  }, 1000);

  onCleanup(() =&gt; clearInterval(interval));
  return &lt;div&gt;Count value is {count()}&lt;/div&gt;;
};
</code></pre><p>对应编译后的的组件代码。</p><pre><code class="language-js">const _tmpl$ = /*#__PURE__*/ _$template(`&lt;div&gt;Count value is `);

const CountingComponent = () =&gt; {
  const [count, setCount] = createSignal(0);
  const interval = setInterval(() =&gt; {
    setCount((c) =&gt; c + 1);
  }, 1000);

  onCleanup(() =&gt; clearInterval(interval));
  return (() =&gt; {
    const _el$ = _tmpl$(),
      _el$2 = _el$.firstChild;
    _$insert(_el$, count, null);
    return _el$;
  })();
};
</code></pre><ul><li>执行 _tmpl$ 函数，获取对应组件的静态模版</li><li>提取组件中的 count 函数，通过 _$insert 将状态函数和对应模版位置进行绑定</li><li>调用 setCount 函数更新时，比对一下对应的 count，然后修改对应的 _el$ 对应数据</li></ul><h2>其他</h2><p>大家可以看一看使用 Signals 的主流框架：</p><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcn.vuejs.org%2Fapi%2Freactivity-core.html%23ref" target="_blank">Vue Ref</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fangular.io%2Fguide%2Fsignals" target="_blank">Angular Signals</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fpreactjs.com%2Fguide%2Fv10%2Fsignals%2F" target="_blank">Preact Signals</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.solidjs.com%2Fdocs%2Flatest%2Fapi%23createsignal" target="_blank">Solid Signals</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fqwik.builder.io%2Fdocs%2Fcomponents%2Fstate%2F%23usesignal" target="_blank">Qwik Signals</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsvelte.dev%2Fblog%2Frunes" target="_blank">Svelte 5(即将推出)</a></li></ul><p>不过目前来看 React 团队可能不会使用 Signals。</p><ul><li>Signals 性能很好，但不是编写 UI 代码的好方式</li><li>计划通过编译器来提升性能</li><li>可能会添加类似 Signals 的原语</li></ul><p>PREACT 作者编写了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40preact%2Fsignals-react" target="_blank">@preact/signals-react </a> 为 React 提供了 Signals。不过个人不建议在生产环境使用。</p><p>篇幅有限，后续个人会解读 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.npmjs.com%2Fpackage%2F%40preact%2Fsignals-core" target="_blank">@preact/signals-core</a> 的源码。</p><h2>参考资料</h2><ul><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7137100589208436743%3FsearchId%3D2023100323265799EF4CF92C95049F6276" target="_blank">精读《SolidJS》</a></p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.solidjs.com%2F" target="_blank">Solid.js</a></p></li><li><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fsvelte.dev%2Fblog%2Frunes" target="_blank">Introducing runes</a></p></li></ul><h2>鼓励一下</h2><p>如果你觉得这篇文章不错，希望可以给与我一些鼓励，在我的 github 博客下帮忙 star 一下。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwsafight%2FpersonBlog" target="_blank">博客地址</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 06:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/wsafight/blog/10115779</guid>
            <link>https://my.oschina.net/wsafight/blog/10115779</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[两行代码解决大语言模型对话局限！港中文贾佳亚团队联合 MIT 发布超长文本扩展技术]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">中途迷失、模型偷懒、上下文越长大模型越笨......如果体验过大语言模型产品,用户多少会对文本输入长度带来的限制有所感触，比如当想和大模型讨论一些稍长的内容，需要拆分输入，而前面输入的要点，很快就会被大模型忘记。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">这是典型的大语言模型对话缺陷！就像先天有注意力缺陷的儿童，难以专注看完一本新书。而缺陷的关键，在于模型缺乏长文本处理能力。这个局面如今被打破。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">近日，贾佳亚团队联合 MIT 发布的新技术和新模型悄然登上各大开源网站的热榜：hugging face 热榜第一、paperwithcode 热度第一，Github 全部 python 项目热度第五、github stars 一周内破千，Twitter 上的相关技术帖子浏览量近 18 万......</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p7.itc.cn/q_70/images01/20231009/02802a3fa205413abde6f1ea42885d02.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">github stars 已达 1.3k</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p5.itc.cn/q_70/images01/20231009/598154ce3152480c8164e0cfab8efabb.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">Twitter 上的相关技术帖子浏览量近 18 万</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">这项名为 LongLoRA 的技术实用但却简单得令人惊讶：只需两行代码、一台 8 卡 A100 机器，便可将 7B 模型的文本长度拓展到 100k tokens，70B 模型的文本长度拓展到 32k tokens；同时，该研究团队还发布了首个拥有 70B 参数量的长文本对话大语言模型 LongAlpaca。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><strong>全球首个 70B 长文本大语言模型发布</strong></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">LongLoRA 的提出，让全球大语言模型的对话缺陷第一次得到解决，自此，几十页的论文、几百页的报告、鸿篇巨制不再成为大模型盲区。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">对此，有专业人士激动地表示，LongLoRA 是大语言模型迷宫中的希望之灯！它代表着业界对长文本大语言模型的重新思考和关注，有效扩展了大语言模型的上下文窗口，允许模型考虑和处理较长的文本序列，是大语言模型的革新性发明。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p9.itc.cn/q_70/images01/20231009/cbe10d2967664215bffee1abef01d462.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">除了技术革新外，大语言模型处理长文本问题的一大难点还在于缺少公开的长文本对话数据。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">为此，研究团队特意收集了 9k 条长文本问答语料对，包含针对名著、论文、深度报道甚至财务报表的各类问答。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">光会回答长问题还不够，该团队又挑选了 3k 的短问答语料与 9K 的长问答语料混合训练，让长文本大模型同时具备短文本对话能力。这个完整的数据集被称为 LongAlpaca-12k，目前已经开源。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">在 LongAlpaca-12k 数据集基础上，研究团队对不同参数大小 7B、13B、70B 进行了训练和评测，开源模型包括 LongAlpaca-7B, LongAlpaca-13B 和 LongAlpaca-70B。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><strong>看小说、改论文、指点经济堪称全能王</strong></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">话不多说，盲选几个 demo,一起看看应用了 LongLoRA 技术叠加 12K 问答语料的大模型 LongAlpaca 效果。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p3.itc.cn/q_70/images01/20231009/e0807c4fbd0e428da6cc72b9e4c566dc.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">让系统新读一篇论文，并根据 ICLR 的审查指南，对其提出修改意见，从而提升该论文的接收率。LongAlpaca 的意见是：通过更精确地阐明新颖性，提供更严格和更有对比性的实验结果 (包括具体的数据集和指标)、更广泛的应用和未来发展方向，重点呈现关键贡献和影响，论文被接受的机会将得到提高。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p3.itc.cn/q_70/images01/20231009/783214e5577d4580a8f89721e98f148e.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">现在，让系统读两篇新的不同的论文，让 LongAlpaca 概括 ICLR 和 CVPR 两个会议之间的风格区别。LongAlpaca 总结认为，CVPR 论文倾向更具结构性和实验性的风格，专注于实用性和技术性。而 ICLR 的论文风格更加灵活，侧重关键的理论分析和数学推导，而非标准格式。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">可以看出，经过训练的 LongAlpaca 模型已经可以很轻松地接受新的长篇学术论文，在学术相关问题的回答上相当精准。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">接下来，再看看 LongAlpaca 模型在颇高阅读和理解门槛的经济领域的解读表现。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p3.itc.cn/q_70/images01/20231009/e6eb1abcb4944627935707701425aa11.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p5.itc.cn/q_70/images01/20231009/a6f419f9eb03497e9aa357e147b61085.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">根据国际货币基金组织从 2012 年到 2023 年的全球经济展望的概述合集，对经济形势进行逐年总结以及对未来经济趋势进行预测。LongAlpaca 告诉我们，2023 年全球经济形势不明朗，跟 2022 年相比，增长预计放缓;未来几年，全球经济扩张速度偏温和并将低于预期，而地缘政治紧张、金融市场波动等大的挑战依然存在，需通过多边合作和结构性改革小心应对。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">LongAlpaca 还可以读新的长篇小说，读完后对内容进行分析。下面选取的对比模型是 13B 参数的 LongAlpaca 和 Llama2，且看各自表现。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p1.itc.cn/q_70/images01/20231009/72aeb31905df4635a8f3001fced32892.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">名著《西游记》中，为什么孙悟空在大闹天宫时很厉害，但取，经路上却屡屡受挫?LongAlpaca 给出了 5 点原因，大概可总结为 「孙悟空的不成熟、强大的对手、力量的限制、敌人的欺骗、最初，缺少同伴等因素导致了他在旅途中的失败。但随着时间推移，他获，得了智慧、经验和战友，使他最终战胜了最强大的敌人。」</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">而 Llama2 的回答较为简单。「虽然他确实大闹天宫，但说他代表着不败的力量并不一定准确。事实上，他最终在西游记中被强大的唐三藏打败。」Llama2 没有给出正确答案，并且还提出需要更多的内容信息。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p0.itc.cn/q_70/images01/20231009/a29c650d3a144a18afaf5e7b4d374559.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">这一次让系统新读一次《三体》，然后问第一部中，叶文洁为什么要联系外星人，而后期又为什么后悔？LongAlpaca 认为，叶文洁最初接触外星人是出于理想主义和复仇，但随着时间的推移，她对人类的看法发生了变化，意识到自己可能给全人类带来的危险，她的悔恨与日俱增。回答得十分清晰。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">而 Llama2 的回答则是，「通过与外星人的互动，她希望能更深入地了解宇宙的本质，以及自己在宇宙中的位置。叶文洁逐渐意识到，外星人和他们的技术并不能解决她的问题。」回答笼统，之后开始对小说整体进行评论，答非所问。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">从模型给出的答案可发现，一些模型如 Llama2 [2] 可能在预训练过程中见过相关小说，但如果在提问时进行仅根据小说题目进行短文本提问的话，回答并不理想。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">两个模型的回答对比，高下立见。LongAlpaca 改学术论文、点评全球经济大势和读小说，都是一把好手，完胜 Llama2。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><strong>两行代码和三个关键结论</strong></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">Llama2 可以说是 AI 社区内最强大的开源大模型之一，行业位置领先，LongAlpaca 居然可以完胜。其背后的 LongLoRA 技术成功引起网友们的注意，到底是怎么做到的？</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">原来大语言模型对长文本处理过程中，计算量的主要开销集中在自注意力机制 (self-attention)，其开销随着文本长度成平方次地增加。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">针对这个问题，研究团队提出 LongLoRA 技术，并用分组和偏移的方式来对全局自注意力机制进行模拟。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p0.itc.cn/q_70/images01/20231009/e9c924b5c8564afa9f24a208a98eeb8c.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">简单来说，就是将长文本对应的 tokens 拆分成不同的组，在每组内部做自注意力计算，而分组的方式在不同注意力头 (attention head) 上有所偏移。这样的方式既可以大幅度节约计算量，又可以维持全局感受野的传递。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">而这个实现方法也非常简洁，仅两行代码即可完成！</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p9.itc.cn/q_70/images01/20231009/096cdf76e3394df796ed04057a1cb6c2.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">LongLoRA 还探索了低秩训练的方式。原有的低秩训练方式，如 LoRA [5]，无法在文本长度迁移上取得良好的效果。而 LongLoRA 在低秩训练的基础上，引入嵌入层 (Embedding layer 和 Normalization layers) 进行微调，从而达到可以和全参数微调 (Full fine-tune) 逼近的效果。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em"><img src="https://p7.itc.cn/q_70/images01/20231009/c684b6990a394aacb2859a1f064e09b9.png" referrerpolicy="no-referrer"></p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">进行不同长度文本扩展和训练时，LongLoRA、LoRA 和全参数微调不同技术的具体效果如何，可以参考三个维度表现：</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">在 Perplexity-困惑度上，原有 LoRA 方法的性能在不断恶化，而 LongLoRA 和全参数微调都能在各种文本长度下维持很好的效果；</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">在显存消耗上，相比于全参数微调，LongLoRA 和原有 LoRA 都有大幅度的节省。例如，对于 8k 长度的模型训练，相比于全参数微调，LongLoRA 将显存消耗从 46.3GB 降低到 25.6GB；</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">在训练时间上，对于 64k 长度的模型训练，相比于常规 LoRA，LongLoRA 将训练时间从 90～100 小时左右降低到 52.4 小时，而全参数微调超过 1000 小时。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">极简的训练方法、极少的计算资源和时间消耗，以及极佳的准确性，令 LongLoRA 大规模推广成为可能。目前，相关技术与模型已全部开源，感兴趣的用户们可以自己部署感受。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">值得一提的是，这是贾佳亚团队继 8 月 9 日发布的「可以分割一切」的多模态大模型 LISA 后的又一力作。相距不过短短两个月，不得不说，这研究速度和能力跟 LongLoRA 一样惊人。</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">代码和 Demo 地址：https://github.com/dvlab-research/LongLoRA</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">论文地址：https://arxiv.org/pdf/2309.12307.pdf</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">参考文献</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">[1] LLaMA team. Llama: Open and efficient foundation language models. Arxiv, 2302.13971, 2023a.</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">[2] Llama2 team. Llama 2: Open foundation and fine-tuned chat models. Arxiv, 2307.09288, 2023b.</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">[3] Shouyuan Chen, Sherman Wong, Liangjian Chen, and Yuandong Tian. Extending context window of large language models via positional interpolation. Arxiv, 2306.15595, 2023.</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">[4] Szymon Tworkowski, Konrad Staniszewski, Mikolaj Pacek, Yuhuai Wu, Henryk Michalewski, and Piotr Milos. Focused transformer: Contrastive training for context scaling. Arxiv, 2307.03170, 2023.</p><p style="color:#191919; margin-left:1.8em; margin-right:0.63em">[5] Edward J. Hu, Yelong Shen, Phillip Wallis, Zeyuan Allen-Zhu, Yuanzhi Li, Shean Wang, Lu Wang, and Weizhu Chen. Lora: Low-rank adaptation of large language models. In ICLR, 2022.</p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 05:26:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260968</guid>
            <link>https://www.oschina.net/news/260968</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[百度加紧训练文心大模型 4.0，或将于 10 月 17 日发布]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>据科创板日报报道，百度正在加紧训练文心大模型 4.0，或将在 10 月 17 日百度世界大会上发布。</p><p>据消息人士透露，文心大模型 4.0 的进展比预期快很多，将是基础模型的大升级，<strong>理解、生成、逻辑、记忆</strong>四大核心能力都将提升，尤其在逻辑推理、代码和数学等方面提升最明显。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-741c4810e55393b362a8f9a60b8c98a65dd.png" referrerpolicy="no-referrer"></p><p>今年 8 月，<a href="https://www.oschina.net/news/256156" target="_blank">百度宣布文心一言率先向全社会全面开放</a>，所有用户都能下载文心一言 App 或在官网体验。</p><hr><p>延伸阅读：<a href="https://www.oschina.net/news/256949">挑战 ChatGPT，国产有这 8 款 AI 大模型产品</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 04:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260957</guid>
            <link>https://www.oschina.net/news/260957</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[云原生周刊：Docker 推出 Docker Debug]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>开源项目推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fschemahero%2Fschemahero" target="_blank">SchemaHero</a></h3><p>SchemaHero 是一个 Kubernetes Operator，用于各种数据库的声明式架构管理。SchemaHero 有以下目标：</p><ul><li>数据库表模式可以表示为可以部署到集群的 Kubernetes 资源。</li><li>可以编辑数据库模式并将其部署到集群。SchemaHero 将计算所需的更改（<code>ALTER TABLE</code> 语句）并应用它。</li><li>SchemaHero 可以管理部署到集群或集群外部的数据库（RDS、Google CloudSQL 等）。</li></ul><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fproject-copacetic%2Fcopacetic" target="_blank">copacetic</a></h3><p>copacetic 是一款基于 buildkit 并用 Go 编写的 CLI 工具，可用于根据 Trivy 等流行工具的漏洞扫描结果直接修补容器镜像。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkubernetes-sigs%2Fkueue" target="_blank">Kueue</a></h3><p>Kueue 是一套用于作业队列的 API 和控制器。它是作业级管理器，可决定何时允许作业启动（如创建 pod），何时停止作业（如删除活动 pod）。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Foslabs-beta%2Fspyglass" target="_blank">Spyglass</a></h3><p>Spyglass 是一款开源工具，允许用户在一个集中位置监控 Kubernetes 集群指标并跟踪集群部署成本。</p><h2>文章推荐</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.devops.dev%2Fsurviving-2400-hours-of-multi-tenancy-what-i-know-now-9c48694aa75d" target="_blank">多租户 2400 小时的生存之道： 我现在知道了什么</a></h3><p>这篇文章是关于作者在处理多租户环境下的经验和教训的分享。作者介绍了他们所面临的挑战：由于项目请求的激增，现有的基础设施无法满足存储需求。为了解决这个问题，他们开始寻找一个强大的多租户解决方案。</p><p>作者详细介绍了他们的多租户方法和使用 vcluster 的经验。他们采用了 Virtual-Kubernetes-as-a-Service (VKaaS) 的模型，通过在共享集群中运行 vcluster 来为新项目提供无缝的启动体验。他们为每个团队分配了一个独立的 Argo CD 实例，以保持单一集群使用的标准。他们努力提供尽可能多的自治权给团队，同时保持多租户架构的完整性。</p><p>文章还介绍了他们的工作流程和实施策略。他们利用节点池来区分共享工作负载和项目相关的非关键应用程序，并详细解释了他们在共享集群中的工作方式。他们还强调了灾难恢复方案对于多租户方法的重要性，并提供了一些实施策略的示例。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.devopsschool.com%2Fblog%2Fkubernetes-tutorials-what-is-preemption-in-kubernetes-with-example%2F" target="_blank">Kubernetes 教程：Kubernetes 中的 Preemption（抢占）机制</a></h3><p>这篇文章是关于 Kubernetes 中的 Preemption（抢占）机制的介绍和示例。Preemption 是一种允许高优先级 Pod 抢占低优先级 Pod 的机制，当资源不足以调度高优先级 Pod 时使用。文章首先介绍了 PriorityClass，它是一个非命名空间对象，定义了优先级类名称与优先级整数值的映射关系。数值越高，优先级越高。</p><p>文章还介绍了两个内置的优先级类：system-cluster-critical 和 system-node-critical，它们分别具有值 2000001000 和 2000000000，确保这些 Pod 始终被首先调度，并且永远不会被抢占。文章通过一个示例说明了 Preemption 在 Kubernetes 中的工作原理。文章还提供了如何在 Pod 中设置 Preemption 策略的示例。</p><h2>云原生动态</h2><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F10%2F05%2Funveiling-litmuschaos-3-0-embracing-evolution-in-chaos-engineering%2F" target="_blank">LitmusChaos 3.0 发布</a></h3><p>LitmusChaos 3.0 已正式发布，此版本主要变化如下：</p><ul><li>改进的用户体验</li><li>混沌基础设施组织的环境</li><li>用于简化实验调整的 Chaos Studio</li><li>弹性探针现在支持即插即用</li><li>支持 MongoDB 高可用性</li></ul><p>发行说明：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Flitmuschaos%2Flitmus%2Freleases%2Ftag%2F3.0.0%E3%80%82" target="_blank">https://github.com/litmuschaos/litmus/releases/tag/3.0.0。</a></p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.cncf.io%2Fblog%2F2023%2F10%2F03%2Fcncf-archives-the-service-mesh-interface-smi-project%2F" target="_blank">服务网格接口（SMI）项目进入归档阶段</a></h3><p>CNCF TOC（技术监督委员会，Technical Oversight Committee）已投票批准将 SMI（Service Mesh Interface，服务网格接口）项目归档。</p><p>SMI 的创建是为了为 Kubernetes 上的服务网格提供标准接口和最常见服务网格使用案例的基本功能集。它于 2020 年 3 月被接受为 CNCF 沙箱项目。</p><p>SMI 是第五个被 CNCF 归档的项目。开源项目有其生命周期，项目可能因各种原因而不再活跃。还有一些情况是项目可能不再希望得到 CNCF、维护人员或 TOC 的支持。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.linuxfoundation.org%2Fpress%2Fannouncing-openpubkey-project" target="_blank">Linux 基金会、BastionZero 和 Docker 宣布启动 OpenPubkey 项目</a></h3><p>Linux 基金会、BastionZero 和 Docker 宣布 OpenPubkey 作为 Linux 基金会开源项目的启动。与 OpenPubkey 的启动同时，BastionZero 宣布将 OpenPubkey 集成到 Docker 容器签名中，以通过零信任无密码身份验证来保护开源软件生态系统。</p><p>OpenPubkey 协议是作为 BastionZero 安全基础设施访问产品的一部分开发的。OpenPubkey 使用户能够通过将 OpenID Connect 身份提供者（Identity Provider，IdP）转换为证书颁发机构（Certificate Authority，CA）来安全准确地将加密密钥与用户和工作负载绑定。随着这个集成的推出，Docker 用户可以增强软件供应链安全性。</p><h3><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdevclass.com%2F2023%2F10%2F04%2Fdocker-introduces-seems-like-magic-container-debug-tool-and-cloud-driven-build-service%2F" target="_blank">Docker 推出容器调试工具和云驱动的构建服务</a></h3><p>在 2023 年的 DockerCon 活动上，Docker 推出了名为 Docker Debug 的容器调试工具，推出了下一代云辅助的 Docker Build 功能，Docker Scout 漏洞扫描工具也正式发布。</p><p>Docker Debug 解决了在容器中运行应用程序时出现故障时很难跟踪问题的问题。它是一个容器，包含开发人员所需的调试工具，它会挂载故障容器的文件系统，并提供了更好的用户体验，帮助开发人员理解问题所在。</p><p>Docker Scout 是一个漏洞扫描工具，可以找出应用程序所使用的库中存在的已报告漏洞。它与第三方工具 Sysdig 集成，可以在运行时显示实际使用的代码，并帮助开发人员优先处理与其应用相关的漏洞。</p><p>下一代 Docker Build 是一个将构建过程从本地转移到云端的工具。通过一条命令，开发人员可以将构建过程交给云端完成，从而加快构建速度。这得益于云端使用更强大的计算资源以及缓存机制的支持。</p><blockquote><p>本文由博客一文多发平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 发布！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10116369</guid>
            <link>https://my.oschina.net/u/4197945/blog/10116369</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[当尺度感知调制遇上 Transformer，会碰撞出怎样的火花？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>作者 ｜ AFzzz</p><p><img src="https://oscimg.oschina.net/oscnet/up-9688cc4b384ef1a2912634e0129648db315.png" alt="" referrerpolicy="no-referrer"></p><h2>1 文章介绍</h2><p>近年来，基于 Transformer 和 CNN 的视觉基础模型取得巨大成功。有许多研究进一步地将 Transformer 结构与 CNN 架构结合，设计出了更为高效的 hybrid CNN-Transformer Network，但它们的精度仍然不尽如意。本文介绍了一种新的基础模型 SMT（Scale-Aware Modulation Transformer），它以更低的参数量（params）和计算量（flops）取得了大幅性能的提升。</p><p>不同于其他 CNN-Transformer 结合的方案，SMT 基于卷积计算设计了<strong>一个新颖的轻量尺度感知调制单元 Scale-Aware Modulation（SAM）</strong> ，它能够捕捉多尺度特征的同时扩展感受野，进一步增强卷积调制能力。此外，SMT 提出了一种<strong>进化混合网络 Evolutionary Hybrid Network（EHN）</strong> ，它能够有效地模拟网络从浅层变深时捕捉依赖关系从局部到全局的转变，从而实现更优异的性能。在 ImagNet、COCO 以及 ADE20k 等任务上都验证了该模型的有效性。<strong>值得一提的是，SMT 在 ImageNet-22k 上预训练后以仅仅 80.5M 的参数量在 ImageNet-1k 上达到了 88.1% 的精度。</strong></p><p><img src="https://oscimg.oschina.net/oscnet/up-f4be367414a72c6d4c94a5fd903dea0125c.png" alt="" referrerpolicy="no-referrer"></p><h2>2 出发点</h2><ul><li><p>对于多层级的网络架构来说，由于浅层特征图分辨率大的原因，自注意力的二次复杂性会带来严重的计算负担。因此，如何为浅层 stage 设计高效的 attention 计算机制是十分重要的。</p><p>回顾以往的大部分 Hierarchical（Multi-scale）的模型，以 Swin 为代表，以及后续的 CvT，PvT，Shunted Transformer 等等，它们的主要贡献点都是设计出了一种更高效的 attention 计算单元，比如 local attention，lightweight convolution attention 等等。</p></li><li><p>ViT 论文中提出，Transformer 模型的注意力捕捉依赖关系为，浅层捕捉 local 信息，深层捕捉 global 信息，而这种特性在多层级网络架构上也会出现。</p><p>作者认为，模拟并建模这种捕捉依赖过渡是重要且有效的。</p></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-07e0ea4d6cb05fd437951f9be3d1577e60b.png" alt="" referrerpolicy="no-referrer"></p><h2>3 SMT 框架算法</h2><p><img src="https://oscimg.oschina.net/oscnet/up-53c347eac02866a8ce9f8e0747e1eca5f0d.png" alt="" referrerpolicy="no-referrer"></p><p>SMT 的总体框架如图 1 所示。整个网络包括四个阶段，每个阶段的下采样率为{4, 8, 16, 32}。我们并非和 FocalNet 一样构建一个无注意力机制的网络，而是首先在前两个阶段采用文章提出的尺度感知调制（SAM），然后在倒数第二个阶段中依次堆叠一个 SAM Block 和一个多头自注意力（MSA） Block，以建模从捕捉局部到全局依赖关系的转变。对于最后一个阶段，我们仅使用 MSA 块来有效地捕捉长距离依赖关系。</p><h3>3.1 Scale-Aware Modulation 模块</h3><p><img src="https://oscimg.oschina.net/oscnet/up-af9a13c41ea967982c091cce0b4aac2f242.png" alt="" referrerpolicy="no-referrer"></p><ul><li><strong>多头混合卷积 MHMC（Multi-Head Mixed Convolution）</strong></li></ul><p>在 MHMC 中，我们引入了具有不同卷积核大小的多个卷积层，使其能够捕捉多个尺度上的空间特征。当我们将 N head 设置得较大时，能够引入大卷积核来扩大感受野，增强其建模长距离依赖关系的能力。如图 2(b) 所示，MHMC 将输入通道分为 N 个头，对每个头应用独立的深度可分离卷积。我们将卷积核大小初始化为 3x3，并逐头递增。这种方法使得我们能够人为的通过调整头的数量来调节感受野的范围和多粒度信息。</p><p><img src="https://oscimg.oschina.net/oscnet/up-6af95c745f4f313605d63309b5f471adc73.png" alt="" referrerpolicy="no-referrer"></p><ul><li><strong>多尺度感知聚合 SAA（Scale-Aware Aggregation）</strong></li></ul><p>为了增强 MHMC 中多个头之间的信息交互，我们引入了一种新的轻量化聚合模块，称为多尺度感知聚合（SAA），如图 2(c) 所示。SAA 首先对 MHMC 生成的不同粒度的特征进行重组和分组。具体而言，我们从每个头中选择一个通道来构建一个组，然后在每个组内进行 up-down 的特征融合，从而增强多尺度特征的多样性。值得注意的是，Num_group = C / N_head，C 为输入通道数，这意味着组的数量与 MHMC 中头的数量成反比，每个组里只包含 N 个特征通道。随后，我们使用 1x1 卷积进行组内-组间模式的跨组信息融合，从而实现轻量且高效的聚合效果。</p><p><img src="https://oscimg.oschina.net/oscnet/up-fa073ddec726a81685efb58c66e2582adc1.png" alt="" referrerpolicy="no-referrer"></p><p>如图 3 所示，我们可视化出 SAA 前和 SAA 后的特征图，可以观察到 SAA 模块加强了语义相关的低频信号，并准确地聚焦于目标物体最重要的部分。与聚合之前的卷积映射相比，SAA 模块展示了更好的能力来捕捉和表示视觉识别任务的关键特征。</p><p><img src="https://oscimg.oschina.net/oscnet/up-5fd6c072492140075ffca7fc81b8d04de41.png" alt="" referrerpolicy="no-referrer"></p><ul><li><strong>尺度感知调制器 SAM（Scale-Aware Modulation）</strong></li></ul><p>如图 2(a) 所示，在使用 MHMC 捕捉多尺度空间特征并通过 SAA 进行聚合后，我们获得一个输出特征图，我们称之为调制器 Modulator。然后，我们使用标量乘积采用这个调制器来调制 value V。</p><p><img src="https://oscimg.oschina.net/oscnet/up-1076102f25eb2d8f13b60d04633b5460c4d.png" alt="" referrerpolicy="no-referrer"></p><h3>3.2 混合进化网络 Evolutionary Hybrid Network</h3><p><img src="https://oscimg.oschina.net/oscnet/up-2c7f96d61daf6d0c0b91670c1198e60ba98.png" alt="" referrerpolicy="no-referrer"></p><p>在本节中，我们提出根据网络的捕捉范围依赖关系的变化模式重新分配适当的计算模块，以实现更好的计算性能。我们提出了两种混合堆叠策略用于倒数第二个阶段，(i) 依次堆叠一个 SAM 块和一个 MSA 块。(ii) 在 stage 的前半部分使用 SAM 块，在后半部分使用 MSA 块。为了评估这两种混合堆叠策略的有效性，我们在 ImageNet-1K 上评估了它们的 top-1 准确率。可以看到，(i) 混合堆叠策略更加有效。</p><p><img src="https://oscimg.oschina.net/oscnet/up-339767d0b9c4a55b9298904a5d9171562b9.png" alt="" referrerpolicy="no-referrer"></p><p>不仅如此，我们还计算了倒数第二个阶段中 MSA 块的相对感受野。值得注意的是，浅层 layer 的相对感受野开始阶段有一个轻微的下降趋势。作者认为这种下降可以归因于 SAM 对早期 MSA Block 的影响，我们将这种现象称为计算单元磨合适应期。而随着网络的加深，我们可以看到感受野呈平稳上升的趋势，这表明我们提出的进化混合网络有效地模拟了从局部到全局依赖捕捉的过渡。</p><p><img src="https://oscimg.oschina.net/oscnet/up-8f3c21623fff8bcda5df6a79d0a14a8918c.png" alt="" referrerpolicy="no-referrer"></p><h2>4 实验</h2><h3>4.1 分类实验</h3><p><img src="https://oscimg.oschina.net/oscnet/up-8d488d75e796b97b54cee5d2f21eaab63ba.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-0b7d3d0ff76a3d5ade3fa45d963c46d9b04.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-558613af385ccdc706134277fb52196b0f4.png" alt="" referrerpolicy="no-referrer"></p><p>上表给出了不同模型大小在 ImageNet-1k 上的性能对比，从中可以看到：</p><ul><li>SMT 在 tiny、small 和 base 规模上都以更低的参数量和计算量达到了更优的性能；</li><li>SMT-B 在仅仅 32.0M 和 7.7GFlops 下就取得了 84.3% 的精度，甚至比大多数 80M 和 15G 以上的模型更好。</li><li>当采用 ImageNet-22k 与大尺度数据预训练之后，SMT-L 精度提升到 87.1% 和 88.1%，优于现有的 CNN 和 Transformer 模型。<strong>特别地，SMT-L 用 4x 低的参数量和 3x 低的计算量就超过了 InternImage-XL(88.0%)</strong></li><li>这些结果表明 SMT 是一个 scalability 能力很强的模型，在各种尺度参数下都具有优异的性能。</li></ul><h3><strong>4</strong>.2 目标检测实验</h3><p><img src="https://oscimg.oschina.net/oscnet/up-a821c93b982a12ec1c606a55f466e9dd394.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-b7aaf64cebf88d47c1e2a5729fe4338091c.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-5821b176f43f9ac39fd69bb6afe6c189926.png" alt="" referrerpolicy="no-referrer"></p><p>上述三个表格是在多个检测框架上的性能对比实验，可以看到</p><ul><li>在多个检测框架上，包括 Mask R-CNN、Cascade R-CNN、RetinaNet、Sparse R-CNN、ATSS 和 DINO 中，SMT 都获得了更优的性能。</li><li>对于 Mask R-CNN，<strong>在 1x 和 3x 中，SMT-B 分别比 Swin-B 高 2.1mAP 和 1.3mAP，同时参数量只有 Swin-B 的一半。</strong></li><li>对于 DINO 检测框架，<strong>SMT-S 仅仅用 39.9M 的参数量就达到了 54.0mAP</strong>，超越了现有同等规模大小的其他模型。</li></ul><h3><strong>4</strong>.3 分割实验</h3><p><img src="https://oscimg.oschina.net/oscnet/up-690b693f0e3f3dd3a355ac034a56bed1967.png" alt="" referrerpolicy="no-referrer"></p><p>上表给出了 ADE20K 分割任务上的性能对比，从中可以看到当我们使用 uperNet 框架时，SMT 在不同尺度下拥有更低的参数量和计算量，同时精度也优于其他模型。</p><h3>4.4 消融实验</h3><p><img src="https://oscimg.oschina.net/oscnet/up-f3060b4818bf5c64f1eca9716a3e9f6ac68.png" alt="" referrerpolicy="no-referrer"></p><h2>5 总结与展望</h2><p>总的来说，在视觉基础模型 backbone 的探索路程中，我们有着对未来的展望：</p><ul><li>以视觉 Transformer 为例，除了在自监督学习等预训练中依旧用着 ViT 这种 plain Vision Transformer，大部分视觉基础模型都以 Swin 和 PvT 这种 Hierarchical 架构为基础设计范式。而这种范式需要解决的问题就是如何在浅层 stage 中设计更高效的注意力机制计算来解决自注意力的二次复杂性带来的计算负担。是否有更优秀的计算模块能够代替 SAM 或者是 MSA 是我们后续需要继续探索的路。</li><li>2023 年，更多的视觉 Transformer 模型和 CNN 基础大模型被提出，它们在各大榜单上你追我赶，可以发现 CV 领域中 CNN 依旧有着一席之地。如果 Transformer 不能够在 CV 领域完全替代 cnn 神经网络，那么将两者的优势结合起来是否是更好的选择？因此，我们希望 SMT 可以作为 Hybrid CNN-Transformer 方向新的 baseline，推动该领域的进步和发展。</li></ul><hr><p><strong>●</strong><strong>Arxiv 地址：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fabs%2F2307.08579" target="_blank">https://arxiv.org/abs/2307.08579</a></p><p><strong>●</strong><strong>Github 地址：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAFeng-x%2FSMT" target="_blank">https://github.com/AFeng-x/SMT</a></p><p><strong>●</strong><strong>modelscope 地址：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmodelscope.cn%2Fmodels%2FPAI%2FSMT%2Fsummary" target="_blank">https://modelscope.cn/models/PAI/SMT/summary</a></p><p><strong>●</strong><strong>论文链接：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2307.08579.pdf" target="_blank">https://arxiv.org/pdf/2307.08579.pdf</a></p><p><strong>●</strong><strong>代码链接：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAFeng-x%2FSMT" target="_blank">https://github.com/AFeng-x/SMT</a></p><h2>Reference</h2><p>[1] Scale-Aware Modulation Meet Transformer[<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Farxiv.org%2Fabs%2F2307.08579" target="_blank">https://arxiv.org/abs/2307.08579</a>]</p><p>[2] An image is worth 16x16 words transformers for image recognition at scale [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Farxiv.org%2Fpdf%2F2010.11929.pdf" target="_blank">https://arxiv.org/pdf/2010.11929.pdf</a>]</p><p>[2] Focal Modulation Network [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Farxiv.org%2Fabs%2F2203.11926" target="_blank">https://arxiv.org/abs/2203.11926</a>]</p><p>[3] MixConv: Mixed Depthwise Convolutional Kernels [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Farxiv.org%2Fabs%2F1907.09595" target="_blank">https://arxiv.org/abs/1907.09595</a>]</p><p>[4] Swin Transformer: Hierarchical Vision Transformer using Shifted Windows [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Farxiv.org%2Fabs%2F2103.14030" target="_blank">https://arxiv.org/abs/2103.14030</a>]</p><p>[5] InternImage: Exploring Large-Scale Vision Foundation Models with Deformable Convolutions [<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%253A%2F%2Farxiv.org%2Fabs%2F2211.05778" target="_blank">https://arxiv.org/abs/2211.05778</a>]</p><h2>论文信息</h2><p>● <strong>论文标题：</strong></p><p>Scale-Aware Modulation Meet Transformer</p><p>● <strong>论文作者：</strong></p><p>林炜丰、吴梓恒、陈佳禹、黄俊、金连文</p><p>● <strong>论文 PDF 链接：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Farxiv.org%2Fpdf%2F2307.08579.pdf" target="_blank">https://arxiv.org/pdf/2307.08579.pdf</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 03:45:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5583868/blog/10116363</guid>
            <link>https://my.oschina.net/u/5583868/blog/10116363</link>
            <author>
                <![CDATA[原创]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TIOBE 10 月榜单：Java 跌幅最大，C# 逼近 Java]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="background-color:#ffffff; color:#000000"><span style="background-color:#ffffff">TIOBE 公布了 2023&nbsp;年 10 月的</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tiobe.com%2Ftiobe-index%2F" target="_blank">编程语言排行榜</a><span style="background-color:#ffffff; color:#000000"><span style="background-color:#ffffff">。</span></span></p><p><img height="63" src="https://oscimg.oschina.net/oscnet/up-214d9b336ca0795bea8f9d57ecba2126c95.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">C# 和 Java 之间的差距越来越小，达到了历史新低，目前两者的差距仅为 1.2%。<span style="background-color:#ffffff">TIOBE CEO&nbsp;Paul Jansen&nbsp;</span><span style="background-color:#ffffff">认为，</span>如果这一趋势继续保持，那么 C# 将在两个月后超过 Java。</span></p><p><span style="color:#000000">在所有编程语言中，Java 的跌幅最大，为 -3.92%；C# 的涨幅最大，为 +3.29%（年度）。这两种语言一直用于类似的领域，因此在过去 20 多年里一直是竞争对手。<span style="background-color:#ffffff">Paul Jansen 指出，</span>Java 受欢迎程度下降的主要原因是甲骨文公司决定在 Java 8 之后引入付费许可模式，反观微软在 C# 上则采取了相反的做法。</span></p><p><span style="color:#000000">过去，C# 只能作为商业工具 Visual Studio 的一部分使用；如今的 C# 却是免费开源的，从而受到许多开发人员的欢迎。此外，Java 衰落的原因还在于：该语言的定义在过去几年里没有太大变化，其完全兼容的直接竞争对手 Kotlin 却易于使用且免费。</span></p><p><strong style="color:#333333">TIOBE 9 月 TOP 20 编程语言</strong></p><p><img height="423" src="https://oscimg.oschina.net/oscnet/up-4edc1a0b402b29b97063d531852386e2273.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">相较上月，T</span><span style="background-color:#ffffff">op&nbsp;10 榜单中的 SQL (10</span><span style="background-color:#ffffff">→9) 和 </span>Assembly language&nbsp;<span style="background-color:#ffffff">(9</span><span style="background-color:#ffffff">→10) </span>位置进行了互换，除此之外排名没有任何变动。<span style="background-color:#ffffff">Top 11-20 中其他语言的一些排名变化有包括：</span></span></p><ul style="list-style-type:disc; margin-left:0; margin-right:0"><li><span style="color:#000000">Go&nbsp;<span style="background-color:#ffffff">的排名从 12 升至 11</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Scratch&nbsp;的排名从 14 升至 12</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Delphi/Object Pascal&nbsp;</span><span style="background-color:#ffffff">的排名持续攀升，自上月由 &nbsp;23 位回升至 15 位后，本月又升至了第 13 位</span></span></li><li><span style="color:#000000">MATLAB&nbsp;<span style="background-color:#ffffff">的排名从 13 跌至 14</span></span></li><li><span style="color:#000000">Swift&nbsp;<span style="background-color:#ffffff">的排名从 16 升至 15</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Fortran 的排名从 11 跌至 16</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">R 的排名从 18 升至 17</span></span></li><li><span style="color:#000000">Kotlin&nbsp;<span style="background-color:#ffffff">的排名从 20 升至 18</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Ruby 保持 19 不变</span></span></li><li><span style="color:#000000"><span style="background-color:#ffffff">Rust 的排名从 17&nbsp;跌至 20</span></span></li></ul><p><strong style="color:#333333">TOP 10 编程语言 TIOBE 指数走势（2002-2022）</strong></p><p><img height="225" src="https://oscimg.oschina.net/oscnet/up-57b49445bfd6503a6c77c205f16ec8d2025.png" width="700" referrerpolicy="no-referrer"></p><p><strong style="color:#333333">第 21-50 名编程语言排行</strong></p><p><img height="426" src="https://oscimg.oschina.net/oscnet/up-b2036ba4f7fc158784908e321739a960260.png" width="500" referrerpolicy="no-referrer">&nbsp;</p><p><span style="color:#000000"><span style="background-color:#ffffff">第 51-100 名如下，由于它们之间的数值差异较小，仅以文本形式列出（按字母排序）：</span></span></p><p>&nbsp;</p><blockquote><p><span style="color:#000000">4th Dimension/4D, ABC, ActionScript, Apex, APL, Ballerina, bc, CL (OS/400), Clean, Clipper, CLIPS, Clojure, Crystal, Curl, Eiffel, Elixir, Erlang, Forth, Groovy, Hack, Icon, IDL, Io, J, J#, LabVIEW, Ladder Logic, LiveCode, ML, Modula-2, MQL5, NATURAL, Nim, OCaml, OpenEdge ABL, PL/I, PostScript, Pure Data, Q, Racket, Raku, REXX, RPG, Smalltalk, SPARK, SQR, Tcl, TOM, VHDL, Wolfram</span></p></blockquote><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">TIOBE 编程社区指数（The TIOBE Programming Community index）是一个衡量编程语言受欢迎程度的指标，该指数每月更新一次。评判的依据来自世界范围内的工程师、课程和第三方供应商，包括流行的搜索引擎，如 Google、必应、雅虎、维基百科、亚马逊、YouTube 和百度都被用于指数计算。值得注意的是，TIOBE 指数并不代表编程语言的好坏或编写代码的多少。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">该指数可以用来检查你的编程技能是否还能跟上时代的步伐，或者在开始建立一个新的软件系统时，基于指数对采用何种编程语言做出决策。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tiobe.com%2Ftiobe-index%2Fprogramminglanguages_definition%2F" target="_blank">TIOBE 指数</a><span style="color:#000000">的定义方式，以及详细榜单信息<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.tiobe.com%2Ftiobe-index%2F" target="_blank">均可查看官网</a>。</span></p><p>&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 03:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260951/tiobe-index-2023010</guid>
            <link>https://www.oschina.net/news/260951/tiobe-index-2023010</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Python Web 框架三巨头：Flask、Django 和 FastAPI]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>JetBrains 公布 2022 Python 开发者调查结果。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1009/104738_2re6_2720166.png" referrerpolicy="no-referrer"></p><p>完整报告地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flp.jetbrains.com%2Fzh-cn%2Fpython-developers-survey-2022%2F" target="_blank">https://lp.jetbrains.com/zh-cn/python-developers-survey-2022/</a></p></blockquote><p>这是由 Python 软件基金会 (PSF) 和 JetBrains 共同开展的第六次官方年度 Python 开发者调查，回复于 2022 年 10 月至 12 月收集，来自近 200 个国家和地区的超过 23,000 名 Python 开发者和爱好者参与了调查，揭示了该语言及其生态系统的现状。</p><p>下面介绍部分值得关注的数据。</p><h4><span style="color:#e67e22"><strong>Python 3 与 Python 2</strong></span></h4><p>调查结果显示，<strong>7% 的 Python 开发者仍在使用 Python 2</strong>，93% 的开发者使用 Python 3。相比下在 2021 年度的调查中，95% 的开发者使用 Python 3，5% 的开发者使用 Python 2。</p><p><img height="646" src="https://static.oschina.net/uploads/space/2023/1009/110933_AGQb_2720166.png" width="2152" referrerpolicy="no-referrer"></p><p>Python 2 已经在 2020 年结束了支持。<strong>仍然使用 Python 2 的开发者</strong>中有 29% 将其用于数据分析，24% 用于计算机图形，23% 用于 DevOps。</p><p>对于 Python 3 版本使用情况，Python 3 开发者中有 45% 使用两年前发布的 Python 3.10，2% 使用 Python 3.5 或更低版本。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/111332_oznr_2720166.png" referrerpolicy="no-referrer"></p><p><strong><em>请注意，该调查于 2022 年 10 月 14 日至 11 月 14 日进行，Python 3.11 在 2022 年 10 月 24 日才发布。</em></strong></p><hr><h4><span style="color:#e67e22"><strong>框架和库</strong></span></h4><ul><li><span style="color:#d35400"><strong>Web 框架</strong></span></li></ul><p><strong>Python Web 框架的使用率仍然是 Flask、Django 和 FastAPI 之间的三强之争</strong>。所有其他框架加起来只能勉强排在第三位。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/112630_OP7t_2720166.png" referrerpolicy="no-referrer"></p><p>去年以来，FastAPI 增加了 4 个百分点，现在有四分之一的 Python 开发者使用它。</p><ul><li><span style="color:#d35400"><strong>数据库</strong></span></li></ul><p>MS SQL Server 和 Oracle Database 在数据科学家中的受欢迎程度是 Web 开发者的两倍，而大多数其他数据库在 Web 开发者中的采用率要高得多。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/112544_E41p_2720166.png" referrerpolicy="no-referrer"></p><ul><li><span style="color:#d35400"><strong>大数据工具</strong></span></li></ul><p><strong>31% 的 Python 开发者使用大数据工具</strong>，自 2021 年以来增长了 6 个百分点。<strong>在数据科学家中，这个数字达到 42%</strong>。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/112717_fy3L_2720166.png" referrerpolicy="no-referrer"></p><hr><h4><span style="color:#e67e22">开发工具</span></h4><ul><li><span style="color:#d35400"><strong>编辑器</strong></span></li></ul><p><strong>PyCharm 和 VS Code</strong> 是 Python 开发的前两大 IDE，有三分之二的受访者选择。</p><p>只有 14% 的受访者只使用一款 IDE 或编辑器，绝大多数 (61%) 同时使用 2-3 款 IDE 或编辑器。26% 的 Python 开发者更喜欢 PyCharm 作为额外 IDE，<strong>四分之一选择 VS Code</strong>。</p><p><img height="1180" src="https://static.oschina.net/uploads/space/2023/1009/113047_K5V1_2720166.png" width="1209" referrerpolicy="no-referrer"></p><p><img src="https://static.oschina.net/uploads/space/2023/1009/113140_crDq_2720166.png" referrerpolicy="no-referrer"></p><ul><li><span style="color:#d35400"><strong>操作系统</strong></span></li></ul><p>与去年相比，macOS 和 Windows 的受欢迎程度几乎保持不变，而 Linux 的使用率下降了 4 个百分点。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/113253_wcYp_2720166.png" referrerpolicy="no-referrer"></p><ul><li><span style="color:#d35400"><strong>文档工具</strong></span></li></ul><p>39% 的 Python 使用者使用文档工具，首选 Sphinx，与去年持平。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/113402_GAuc_2720166.png" referrerpolicy="no-referrer"></p><hr><p>调查还发现，21% 的开发者表示只在工作中使用 Python，51% 将 Python 用于工作和个人/教育用途或业余项目。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/114132_kSpV_2720166.png" referrerpolicy="no-referrer"></p><p>85% 的受访者表示 Python 是他们的主要语言。</p><p><img src="https://static.oschina.net/uploads/space/2023/1009/114330_DpiR_2720166.png" referrerpolicy="no-referrer"></p><p>而使用 Python 作为主要语言的受访者大多将其用于 Web 开发 (23%)。作为辅助语言，Python 最常用于数据分析 (16%) 和 DevOps (14%)，Web 开发排在第三位 (13%)。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 03:34:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260950/python-developers-survey-2022-jb-psf</guid>
            <link>https://www.oschina.net/news/260950/python-developers-survey-2022-jb-psf</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Compose Multiplatform 1.5.0]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       defaultNoSetting
            " id="js_content"><p style="text-align: center;" data-mpa-powered-by="yiban.io"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.1836734693877551" src="https://oscimg.oschina.net/oscnet/cd921f2b-7ba6-49a9-9ec2-28169030d37b.gif" data-type="gif" data-w="637" style="" referrerpolicy="no-referrer"></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;visibility: visible;"><span style="font-size: 15px;">Compose Multiplatform 1.5.0 现已正式推出。它采用适用于 Kotlin 的 Jetpack Compose 声明式 UI 框架，并将其从 Android 扩展到桌面端、iOS 和 Web。桌面版本已经稳定，iOS 处于 Alpha 阶段，Web 支持仍为实验性。有关完整说明，请参阅&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fzh-cn%2Flp%2Fcompose-multiplatform%2F" textvalue="Compose Multiplatform 网站" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Compose Multiplatform 网站</a>。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;visibility: visible;"><span style="font-size: 15px;">此版本的一些亮点包括：</span></p><ol class="list-paddingleft-1" style="padding-left: 32px;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;visibility: visible;"><li style="margin-bottom: 0.5em;outline: 0px;font-size: 15px;color: inherit;line-height: inherit;visibility: visible;"><p style="outline: 0px;visibility: visible;"><span style="outline: 0px;color: inherit;line-height: inherit;visibility: visible;font-size: 15px;">Dialog、Popup 和 WindowInsets API 现在采用通用代码。</span></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: 15px;color: inherit;line-height: inherit;visibility: visible;"><p style="outline: 0px;visibility: visible;"><span style="outline: 0px;color: inherit;line-height: inherit;visibility: visible;font-size: 15px;">对于 iOS 滚动，资源管理和文本字段已得到改进。</span></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: 15px;color: inherit;line-height: inherit;visibility: visible;"><p style="outline: 0px;visibility: visible;"><span style="outline: 0px;color: inherit;line-height: inherit;visibility: visible;font-size: 15px;">UI 测试框架在桌面端已经稳定。</span></p></li></ol><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;visibility: visible;"><span style="font-size: 15px;">此版本基于<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fandroid-developers.googleblog.com%2F2023%2F08%2Fwhats-new-in-jetpack-compose-august-23-release.html" textvalue="&nbsp;Jetpack Compose 1.5" linktype="text" imgurl="" tab="outerlink" data-linktype="2">&nbsp;Jetpack Compose 1.5</a>，重点关注性能改进。同时，它以&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmaterial.io%2Fblog%2Fmaterial-3-compose-1-1" textvalue="1.1 版 Material Design 3" linktype="text" imgurl="" tab="outerlink" data-linktype="2">1.1 版 Material Design 3</a>&nbsp;为基础构建， 包括日期选择器和时间选择器等新组件。</span></p><section style="margin-bottom: 0px;padding-right: 5px;outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(0, 0, 0);visibility: visible;"><section powered-by="xiumi.us" style="outline: 0px;visibility: visible;"><section style="outline: 0px;visibility: visible;"><p style="outline: 0px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">试用 Compose Multiplatform 1.5.0：</strong></p><p style="outline: 0px;visibility: visible;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJetBrains%2Fcompose-multiplatform%2Freleases%2Ftag%2Fv1.5.0" textvalue="https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.5.0" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="outline: 0px;font-size: 14px;color: rgb(51, 122, 183);visibility: visible;">https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.5.0</span></a><span style="outline: 0px;font-size: 14px;color: rgb(51, 122, 183);visibility: visible;">&nbsp;</span></p></section></section></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: center;line-height: inherit;visibility: visible;"><br style="outline: 0px;visibility: visible;"></p><section style="margin-bottom: 0px;padding-right: 5px;outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(0, 0, 0);visibility: visible;"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;text-align: center;justify-content: center;display: flex;flex-flow: row;visibility: visible;"><section style="outline: 0px;display: inline-block;vertical-align: middle;width: 48px;align-self: center;flex: 0 0 auto;height: auto;visibility: visible;"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;line-height: 0;visibility: visible;"><section style="outline: 0px;vertical-align: middle;display: inline-block;line-height: 0;visibility: visible;"><img class="rich_pages wxw-img" data-ratio="1" data-s="300,640" data-type="png" data-w="500" src="https://oscimg.oschina.net/oscnet/16731f55-3ba8-433e-86e6-686e72e1acd4.png" style="outline: 0px;vertical-align: middle;width: 48px;visibility: visible !important;" referrerpolicy="no-referrer"></section></section></section><section style="padding-left: 10px;outline: 0px;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 100 100 0%;height: auto;visibility: visible;"><section powered-by="xiumi.us" style="margin-top: 10px;outline: 0px;text-align: left;visibility: visible;"><section style="outline: 0px;color: rgb(42, 8, 69);font-size: 24px;line-height: 1.2;visibility: visible;"><p style="outline: 0px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">Compose Multiplatform&nbsp;</strong></p><p style="outline: 0px;visibility: visible;"><strong style="outline: 0px;visibility: visible;">支持 Dialog、Popup 和 WindowInsets</strong></p></section><grazie-editor-wrapper style="outline: 0px;"></grazie-editor-wrapper></section><section powered-by="xiumi.us" style="margin-top: 2px;margin-bottom: 8px;outline: 0px;"><section style="outline: 0px;background-color: rgb(120, 85, 245);height: 1px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">从 1.5 版开始，Compose Multiplatform 中提供对话框和弹出窗口。对话框用于模态事件，用户在其中做出选择或输入数据。同时，弹出窗口用于非模态行为，例如提供可选功能。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">在此版本中，基类型&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Freference%2Fkotlin%2Fandroidx%2Fcompose%2Fui%2Fwindow%2Fpackage-summary%23Dialog%28kotlin.Function0%2Candroidx.compose.ui.window.DialogProperties%2Ckotlin.Function0%29" textvalue="Dialog" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Dialog</a>&nbsp;和&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Freference%2Fkotlin%2Fandroidx%2Fcompose%2Fui%2Fwindow%2Fpackage-summary%23Popup%28androidx.compose.ui.window.PopupPositionProvider%2Ckotlin.Function0%2Candroidx.compose.ui.window.PopupProperties%2Ckotlin.Function0%29" textvalue="Popup" linktype="text" imgurl="" tab="outerlink" data-linktype="2">Popup</a>，以及&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Freference%2Fkotlin%2Fandroidx%2Fcompose%2Fmaterial%2Fpackage-summary%23DropdownMenu%28kotlin.Boolean%2Ckotlin.Function0%2Candroidx.compose.ui.Modifier%2Candroidx.compose.ui.unit.DpOffset%2Candroidx.compose.foundation.ScrollState%2Candroidx.compose.ui.window.PopupProperties%2Ckotlin.Function1%29" textvalue="DropdownMenu" linktype="text" imgurl="" tab="outerlink" data-linktype="2">DropdownMenu</a>&nbsp;和&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Freference%2Fkotlin%2Fandroidx%2Fcompose%2Fmaterial%2Fpackage-summary%23AlertDialog%28kotlin.Function0%2Ckotlin.Function0%2Candroidx.compose.ui.Modifier%2Ckotlin.Function0%2Ckotlin.Function0%2Candroidx.compose.ui.graphics.Shape%2Candroidx.compose.ui.graphics.Color%2Candroidx.compose.ui.graphics.Color%2Candroidx.compose.ui.window.DialogProperties%29" textvalue="AlertDialog" linktype="text" imgurl="" tab="outerlink" data-linktype="2">AlertDialog</a>&nbsp;都可以从通用代码中访问。这避免了提供平台特定功能的需要。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">例如，下面的可组合项完全以通用代码编写：</span></p><section style="margin-bottom: 0px;outline: 0px;color: rgb(33, 33, 33);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(127, 127, 127);overflow-wrap: inherit !important;word-break: inherit !important;">@Composable</span><br style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;<span style="outline: 0px;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">CommonDialog</span><span style="outline: 0px;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">var</span>&nbsp;isDialogOpen&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">by</span>&nbsp;remember&nbsp;{&nbsp;mutableStateOf(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">false</span>)&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;Button(onClick&nbsp;=&nbsp;{&nbsp;isDialogOpen&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">true</span>&nbsp;})&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Text(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"Open"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">if</span>&nbsp;(isDialogOpen)&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;AlertDialog(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onDismissRequest&nbsp;=&nbsp;{&nbsp;},<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;confirmButton&nbsp;=&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button(onClick&nbsp;=&nbsp;{&nbsp;isDialogOpen&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">false</span>&nbsp;})&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Text(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"OK"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;},<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;=&nbsp;{&nbsp;Text(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"Alert&nbsp;Dialog"</span>)&nbsp;},<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;{&nbsp;Text(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"Lore&nbsp;ipsum"</span>)&nbsp;},<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">在桌面端、Android 和 iOS 上的显示方式：</span></p><figure style="outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="430" data-cropsely1="0" data-cropsely2="324" data-ratio="0.7534883720930232" src="https://oscimg.oschina.net/oscnet/68642653-ba2c-4c01-be99-ac6703415178.gif" data-type="png" data-w="430" style="margin-right: auto;margin-left: auto;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;display: block;width: 430px !important;visibility: visible !important;" title="桌面端对话框演示" referrerpolicy="no-referrer"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
    桌面端对话框演示 
  </figcaption><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;"><br style="outline: 0px;"></figcaption></figure><figure style="outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="473" data-cropsely1="0" data-cropsely2="507" data-ratio="1.0718816067653276" src="https://oscimg.oschina.net/oscnet/7c7419ae-3392-4d18-b087-cc54f0474b55.gif" data-type="png" data-w="473" style="margin-right: auto;margin-left: auto;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;display: block;width: 473px !important;visibility: visible !important;" title="Android 和 iOS 对话框演示" referrerpolicy="no-referrer"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
    Android 和 iOS 对话框演示 
  </figcaption></figure><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">此版本提供的第三项功能是&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Fjetpack%2Fcompose%2Flayouts%2Finsets" textvalue="WindowInsets API" linktype="text" imgurl="" tab="outerlink" data-linktype="2">WindowInsets API</a>，描述为了防止内容与系统 UI 重叠而需要进行多少调整。从版本 1.5 开始，此功能包含在 Compose Multiplatform 中，因此可在 Android 和 iOS 上使用。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">使用 WindowInsets API，可以通过 Compose Multiplatform 在凹口后绘制背景内容。无需在应用程序顶部添加白线。差异如以下屏幕截图所示：</span></p><figure style="outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><p style="outline: 0px;text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="1.0658105939004816" data-s="300,640" src="https://oscimg.oschina.net/oscnet/1c958700-eb5a-40bd-9140-b02a8aa683ec.png" data-type="png" data-w="623" style="outline: 0px;width: 623px !important;visibility: visible !important;" referrerpolicy="no-referrer"></p><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     使用 WindowInsets API 在 Compose Multiplatform 中绘制背景内容 
   </figcaption><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;"><br style="outline: 0px;"></figcaption></figure></figure><section style="margin-bottom: 0px;padding-right: 5px;outline: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);color: rgb(0, 0, 0);"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;text-align: center;justify-content: center;display: flex;flex-flow: row;"><section style="outline: 0px;display: inline-block;vertical-align: middle;width: 48px;align-self: center;flex: 0 0 auto;height: auto;"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;line-height: 0;"><section style="outline: 0px;vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-ratio="1" data-s="300,640" data-type="png" data-w="500" src="https://oscimg.oschina.net/oscnet/16731f55-3ba8-433e-86e6-686e72e1acd4.png" style="outline: 0px;vertical-align: middle;width: 48px;visibility: visible !important;" referrerpolicy="no-referrer"></section></section></section><section style="padding-left: 10px;outline: 0px;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 100 100 0%;height: auto;"><section powered-by="xiumi.us" style="margin-top: 10px;outline: 0px;text-align: left;"><section style="outline: 0px;color: rgb(42, 8, 69);font-size: 24px;line-height: 1.2;"><p style="outline: 0px;"><strong style="outline: 0px;">iOS 上的改进</strong></p></section><grazie-editor-wrapper style="outline: 0px;"></grazie-editor-wrapper></section><section powered-by="xiumi.us" style="margin-top: 2px;margin-bottom: 8px;outline: 0px;"><section style="outline: 0px;background-color: rgb(120, 85, 245);height: 1px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">iOS 平台是此次发布的重点，包含大量改进。滚动模仿了平台的外观和风格，资源管理得到简化，文本处理有所增强。</span></p><span id="OSC_h3_1"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">自然滚动</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">在此版本中，iOS 滚动已调整为模仿原生滚动。假设代码中要显示的条目的数量和/或大小超出可用空间：</span></p><section style="margin-bottom: 0px;outline: 0px;color: rgb(33, 33, 33);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(127, 127, 127);overflow-wrap: inherit !important;word-break: inherit !important;">@Composable</span><br style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;<span style="outline: 0px;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">NaturalScrolling</span><span style="outline: 0px;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;items&nbsp;=&nbsp;(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">1..30</span>).map&nbsp;{&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"Item&nbsp;<span style="outline: 0px;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">$it</span>"</span>&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;LazyColumn&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items(items)&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Text(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;it,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">30.</span>sp,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifier&nbsp;=&nbsp;Modifier.padding(start&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">20.</span>dp)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">滚动时，条目会从屏幕边缘弹开，与原生 iPhone 应用程序相同：</span></p><p style="margin-bottom: 0px;outline: 0px;color: rgb(33, 33, 33);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="2.106382978723404" src="https://oscimg.oschina.net/oscnet/4a08e708-3570-4167-b664-059efa31daf0.gif" data-type="gif" data-w="282" style="outline: 0px;width: 282px !important;visibility: visible !important;" referrerpolicy="no-referrer"></p><figure style="outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
    iOS 上的滚动弹开 
  </figcaption></figure><span id="OSC_h3_2"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">对动态字体的支持</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.apple.com%2Fdocumentation%2Fuikit%2Fuifont%2Fscaling_fonts_automatically%2F" textvalue="iOS 上的动态字体功能" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="font-size: 15px;">iOS 上的动态字体功能</span></a><span style="font-size: 15px;"><strong style="outline: 0px;"></strong>允许用户设置偏好字体大小 – 大字体便于查看，小字体可容纳更多内容。应用中使用的文本大小应与此系统设置相关。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">Compose Multiplatform 现在支持此功能。缩放文本时使用的增量与原生应用程序中使用的增量相同，因此行为将相同。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">以如下可组合项为例：</span></p><section style="margin-bottom: 0px;outline: 0px;color: rgb(33, 33, 33);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(127, 127, 127);overflow-wrap: inherit !important;word-break: inherit !important;">@Composable</span><br style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;<span style="outline: 0px;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">DynamicType</span><span style="outline: 0px;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;Text(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"This&nbsp;is&nbsp;some&nbsp;sample&nbsp;text"</span>,&nbsp;fontSize&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">30.</span>sp)<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;">首选阅读大小设为最小时的显示画面：</p><figure style="outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><p style="outline: 0px;text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.7333333333333333" data-s="300,640" src="https://oscimg.oschina.net/oscnet/3dcfbb8b-741a-4635-871e-fcb7a44ec357.png" data-type="png" data-w="1080" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></p><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     Compose Multiplatform 中 iOS 上的动态字体功能（小文本） 
   </figcaption></figure></figure><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">这是首选阅读大小为最大时的结果：</span></p><figure style="outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><p style="outline: 0px;text-align: center;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.7333333333333333" data-s="300,640" src="https://oscimg.oschina.net/oscnet/9240501e-f25c-49eb-b69f-e159e30ee931.png" data-type="png" data-w="1080" style="outline: 0px;width: 677px !important;visibility: visible !important;" referrerpolicy="no-referrer"></p><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     Compose Multiplatform 中 iOS 上的动态字体功能（大文本） 
   </figcaption></figure></figure><span id="OSC_h3_3"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">对高刷新率显示屏的支持</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">在之前的版本中，最大帧率为 60 FPS。这可能导致 UI 在 120Hz 屏幕的设备上缓慢且滞后。从这个版本开始，支持的帧率最高为 120 FPS。</span></p><span id="OSC_h3_4"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">简化了资源管理</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">从 1.5.0 开始，iOS 源集的资源文件夹中的任何资源都会默认复制到应用程序捆绑包中。例如，如果将图像文件放入&nbsp;</span><code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);"><span style="font-size: 15px;">src/commonMain/resources/</span></code><span style="font-size: 15px;">，它将被复制到捆绑包中并可从代码使用。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">使用 CocoaPods 时，不再需要在 Gradle 构建文件中配置此行为。您也不需要重新调用&nbsp;<em style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">podInstall</em>&nbsp;来确保资源在修改后被复制。</span></p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">从这个版本开始，如果您试图在构建脚本中显式配置行为（如下所示），您将收到错误：</span></p><section style="margin-bottom: 0px;outline: 0px;color: rgb(33, 33, 33);font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: 15px;letter-spacing: 0px;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: 1.6;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;">kotlin&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;cocoapods&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;extraSpecAttributes[<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"resources"</span>]&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"..."</span><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;color: inherit;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: inherit;letter-spacing: normal;text-wrap: wrap;background-color: rgb(255, 255, 255);line-height: inherit;"><span style="font-size: 15px;">有关完整详细信息以及迁移现有代码的指南，请<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FJetBrains%2Fcompose-multiplatform%2Fpull%2F3496" textvalue="参阅此文档&nbsp;" linktype="text" imgurl="" tab="outerlink" data-linktype="2">参阅此文档&nbsp;</a>。</span><span style="font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;"></span></p><section style="outline: 0px;font-size: 15px;color: rgb(33, 33, 33);line-height: 1.6;letter-spacing: 0px;font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;visibility: visible;"><span id="OSC_h3_5"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;line-height: inherit;letter-spacing: 0px;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">改进了 TextField</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">早期版本中，在两种情况下输入文本可能导致意外行为。从这个版本开始，增强的&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">TextField</code>&nbsp;已经克服了这些问题。</p><span id="OSC_h4_6"></span><h4 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.2em;color: inherit;line-height: inherit;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">大小写问题</span></h4><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">首先，<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">TextField</code>&nbsp;现在可以识别首字母自动大写是否已禁用。这在输入密码时尤其重要。您可以通过 keyboardOptions 实参控制此行为。</p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">为了说明这一点，请查看下面的可组合项：</p><section style="outline: 0px;line-height: 1.6;letter-spacing: 0px;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;<span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">TextFieldCapitalization</span><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">var</span>&nbsp;text&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">by</span>&nbsp;remember&nbsp;{&nbsp;mutableStateOf(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">""</span>)&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;TextField(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;text,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onValueChange&nbsp;=&nbsp;{&nbsp;text&nbsp;=&nbsp;it&nbsp;},<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyboardOptions&nbsp;=&nbsp;KeyboardOptions(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;capitalization&nbsp;=&nbsp;KeyboardCapitalization.Sentences,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;autoCorrect&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">false</span>,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;keyboardType&nbsp;=&nbsp;KeyboardType.Ascii,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;),<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;)<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">左图是大写属性设为&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">KeyboardCapitalization.None</code>&nbsp;时的情形，右图则显示了值为&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">KeyboardCapitalization.Sentences</code>&nbsp;时的情形。</p><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="433" data-cropsely1="0" data-cropsely2="453" data-ratio="1.046189376443418" src="https://oscimg.oschina.net/oscnet/a6be0828-b490-4dd3-b802-6a4167f6b978.gif" data-type="png" data-w="433" style="margin-right: auto;margin-left: auto;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;display: block;width: 433px !important;visibility: visible !important;" title="TextField 大小写演示" referrerpolicy="no-referrer"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     TextField 大小写演示 
   </figcaption></figure><span id="OSC_h4_7"></span><h4 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.2em;color: inherit;line-height: inherit;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">硬件键盘</span></h4><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">第二种情况与硬件键盘有关。在以前的版本中，使用硬件键盘时，按&nbsp;<strong style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">Enter</strong>&nbsp;会导致多个换行符，按&nbsp;<strong style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">Backspace</strong>&nbsp;会触发多个删除。从这个版本开始，这些事件可以正确处理。&nbsp;</p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><br style="outline: 0px;"></p><section style="padding-right: 5px;outline: 0px;color: rgb(0, 0, 0);"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;text-align: center;justify-content: center;display: flex;flex-flow: row;"><section style="outline: 0px;display: inline-block;vertical-align: middle;width: 48px;align-self: center;flex: 0 0 auto;height: auto;"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;line-height: 0;"><section style="outline: 0px;vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-ratio="1" data-s="300,640" data-type="png" data-w="500" src="https://oscimg.oschina.net/oscnet/16731f55-3ba8-433e-86e6-686e72e1acd4.png" style="outline: 0px;vertical-align: middle;width: 48px;visibility: visible !important;" referrerpolicy="no-referrer"></section></section></section><section style="padding-left: 10px;outline: 0px;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 100 100 0%;height: auto;"><section powered-by="xiumi.us" style="margin-top: 10px;outline: 0px;text-align: left;"><section style="outline: 0px;color: rgb(42, 8, 69);font-size: 24px;line-height: 1.2;"><p style="outline: 0px;"><strong style="outline: 0px;">桌面端改进</strong></p></section><grazie-editor-wrapper style="outline: 0px;"></grazie-editor-wrapper></section><section powered-by="xiumi.us" style="margin-top: 2px;margin-bottom: 8px;outline: 0px;"><section style="outline: 0px;background-color: rgb(120, 85, 245);height: 1px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section></section><span id="OSC_h3_8"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;line-height: inherit;letter-spacing: 0px;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">稳定了测试框架</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">此版本稳定了对 Compose for Desktop 测试的支持。Jetpack Compose 提供了<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.android.com%2Fjetpack%2Fcompose%2Ftesting" textvalue="一组测试 API&nbsp;" linktype="text" imgurl="" tab="outerlink" data-linktype="2">一组测试 API&nbsp;</a>来验证 Compose 代码的行为。这些 API 先前已移植到桌面端并在之前的版本中可用，但存在限制。这些限制现已移除，让您可以为应用程序编写全面的 UI 测试。</p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">为了快速展示测试功能，我们来创建并测试一个简单的 UI。下方是我们的示例可组合项：</p><section style="outline: 0px;line-height: 1.6;letter-spacing: 0px;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(127, 127, 127);overflow-wrap: inherit !important;word-break: inherit !important;">@Composable</span><br style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;<span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">App</span><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">var</span>&nbsp;searchText&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">by</span>&nbsp;remember&nbsp;{&nbsp;mutableStateOf(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"cats"</span>)&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;searchHistory&nbsp;=&nbsp;remember&nbsp;{&nbsp;mutableStateListOf()&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;Column(modifier&nbsp;=&nbsp;Modifier.padding(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">30.</span>dp))&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TextField(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifier&nbsp;=&nbsp;Modifier.testTag(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"searchText"</span>),<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;searchText,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onValueChange&nbsp;=&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchText&nbsp;=&nbsp;it<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Button(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifier&nbsp;=&nbsp;Modifier.testTag(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"search"</span>),<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;onClick&nbsp;=&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;searchHistory.add(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"You&nbsp;searched&nbsp;for:&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">$searchText</span>"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Text(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"Search"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LazyColumn&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;items(searchHistory)&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Text(<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;text&nbsp;=&nbsp;it,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;fontSize&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">20.</span>sp,<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;modifier&nbsp;=&nbsp;Modifier.padding(start&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">10.</span>dp).testTag(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"attempt"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">这将创建一个记录搜索尝试的简单 UI：</p><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="348" data-cropsely1="0" data-cropsely2="399" data-ratio="1.146551724137931" src="https://oscimg.oschina.net/oscnet/58df50cf-98fa-4f27-882a-4d52aa3f417b.gif" data-type="png" data-w="348" style="margin-right: auto;margin-left: auto;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;display: block;width: 348px !important;visibility: visible !important;" title="用于测试的搜索应用" referrerpolicy="no-referrer"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     用于测试的搜索应用 
   </figcaption></figure><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;text-align: left;">请注意，<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">Modifier.testTag</code>&nbsp;已用于为&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">TextField</code>、<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">Button</code>&nbsp;和&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">LazyColumn</code>&nbsp;中的条目指定名称。</p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">然后，我们可以在 JUnit 测试中操作 UI：</p><section style="outline: 0px;line-height: 1.6;letter-spacing: 0px;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">class</span>&nbsp;<span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">SearchAppTest</span>&nbsp;</span>{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(127, 127, 127);overflow-wrap: inherit !important;word-break: inherit !important;">@get:Rule</span><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;compose&nbsp;=&nbsp;createComposeRule()<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(127, 127, 127);overflow-wrap: inherit !important;word-break: inherit !important;">@Test</span><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;`Should&nbsp;display&nbsp;search&nbsp;attempts`<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compose.setContent&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;App()<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;testSearches&nbsp;=&nbsp;listOf(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"cats"</span>,&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"dogs"</span>,&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"fish"</span>,&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"birds"</span>)<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">for</span>&nbsp;(text&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">in</span>&nbsp;testSearches)&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compose.onNodeWithTag(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"searchText"</span>).performTextReplacement(text)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;compose.onNodeWithTag(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"search"</span>).performClick()<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;lastAttempt&nbsp;=&nbsp;compose<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.onAllNodesWithTag(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"attempt"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.assertCountEquals(testSearches.size)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.onLast()<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;expectedText&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"You&nbsp;searched&nbsp;for:&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(224, 196, 108);overflow-wrap: inherit !important;word-break: inherit !important;">${testSearches.last()}</span>"</span><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastAttempt.assert(hasText(expectedText))<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">使用特定于 Compose 的 JUnit 规则：</p><ol class="list-paddingleft-1" style="padding-left: 32px;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">将 UI 的内容设置为应用可组合项。</span></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">通过&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">onNodeWithTag</code>&nbsp;查找文本字段和按钮。</p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">在文本字段中重复输入示例值，然后点击按钮。</span></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">通过&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">onAllNodesWithTag</code>&nbsp;查找生成的所有文本节点。</p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">断言当前已创建的文本节点数，并获取最后一个。</span></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">断言最后一次尝试包含预期消息。</span></p></li></ol><span id="OSC_h3_9"></span><h3 style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-weight: bold;font-size: 1.3em;color: inherit;line-height: inherit;letter-spacing: 0px;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(38, 10, 66);">增强了 Swing 互操作性</span></h3><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">此版本对 Swing 组件内 Compose 面板的改进呈现引入了实验性支持。这可以防止在显示、隐藏或调整面板大小时出现过渡呈现问题。它还支持在组合 Swing 组件和 Compose 面板时进行适当分层。Swing 组件现在可以在&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">ComposePanel</code>&nbsp;上方或下方显示。</p><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">为了说明这一点，请查看下面的示例：</p><section style="outline: 0px;line-height: 1.6;letter-spacing: 0px;"><pre style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><code style="margin-right: 2px;margin-left: 2px;padding: 0.5em;outline: 0px;line-height: 18px;font-size: 14px;letter-spacing: 0px;font-family: Consolas, Inconsolata, Courier, monospace;border-radius: 0px;background: rgb(43, 43, 43);color: rgb(186, 186, 186);overflow-wrap: normal !important;word-break: normal !important;overflow: auto !important;display: -webkit-box !important;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;"><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">fun</span>&nbsp;<span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;overflow-wrap: inherit !important;word-break: inherit !important;">main</span><span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(185, 185, 185);overflow-wrap: inherit !important;word-break: inherit !important;">()</span></span>&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;System.setProperty(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"compose.swing.render.on.graphics"</span>,&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(106, 135, 89);overflow-wrap: inherit !important;word-break: inherit !important;">"true"</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;SwingUtilities.invokeLater&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;composePanel&nbsp;=&nbsp;ComposePanel().apply&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setContent&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Box(modifier&nbsp;=&nbsp;Modifier.background(Color.Black).fillMaxSize())<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;popup&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">object</span>&nbsp;:&nbsp;JComponent()&nbsp;{&nbsp;...&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;rightPanel&nbsp;=&nbsp;JLayeredPane().apply&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(composePanel)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(popup)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;leftPanel&nbsp;=&nbsp;JPanel().apply&nbsp;{&nbsp;background&nbsp;=&nbsp;CYAN&nbsp;}<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(203, 120, 50);overflow-wrap: inherit !important;word-break: inherit !important;">val</span>&nbsp;splitter&nbsp;=&nbsp;JSplitPane(...,&nbsp;leftPanel,rightPanel)<br style="outline: 0px;"><br style="outline: 0px;"><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;JFrame().apply&nbsp;{<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;add(splitter)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setSize(<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">600</span>,&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">600</span>)<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isVisible&nbsp;=&nbsp;<span style="outline: 0px;font-size: inherit;line-height: inherit;color: rgb(104, 150, 186);overflow-wrap: inherit !important;word-break: inherit !important;">true</span><br style="outline: 0px;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">&nbsp;&nbsp;&nbsp;}<br style="outline: 0px;">}<br style="outline: 0px;"></code></pre></section><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">在这段代码中，我们创建并显示一个 Swing&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">JFrame</code>，内容如下：</p><ol class="list-paddingleft-1" style="padding-left: 32px;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">JFrame 包含带有垂直分隔线的&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">JSplitPane</code>。</p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">拆分窗格的左侧是青色的标准&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">JPanel</code>。</p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">右侧是&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">JLayeredPane</code>，由两层组成：</p></li><ul class="list-paddingleft-1" style="padding-left: 32px;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;list-style-type: disc;"><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">包含&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">Box</code>&nbsp;可组合项的&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">ComposePanel</code>，颜色为黑色</p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">自定义 Swing 组件，其中文本「Popup」出现在白色矩形内。这通过重写&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">paintComponent</code>&nbsp;方法实现。</p></li></ul></ol><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;text-align: left;">属性&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">compose.swing.render.on.graphics</code>&nbsp;设为 true 时：</p><ul class="list-paddingleft-1" style="padding-left: 32px;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">自定义 Swing 组件显示在&nbsp;<code style="margin-right: 2px;margin-left: 2px;padding: 2px 4px;outline: 0px;font-size: inherit;line-height: inherit;border-radius: 4px;color: rgb(0, 0, 0);background: rgb(248, 248, 248);">Box</code>&nbsp;可组合项顶部。</p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">移动滑块时不会出现过渡图形伪影。</span></p></li></ul><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="466" data-cropsely1="0" data-cropsely2="465" data-ratio="0.9978540772532188" src="https://oscimg.oschina.net/oscnet/070d8199-ace4-4c05-9f02-5dfb8b9d3c55.gif" data-type="png" data-w="466" style="margin-right: auto;margin-left: auto;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;display: block;width: 466px !important;visibility: visible !important;" title="Swing 互操作性演示正常运行" referrerpolicy="no-referrer"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     Swing 互操作性演示正常运行 
   </figcaption></figure><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">如果此标志未设置，则自定义组件将不可见，并且滑块移动时可能出现过渡伪影：</p><figure style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><img class="rich_pages wxw-img" data-cropselx1="0" data-cropselx2="466" data-cropsely1="0" data-cropsely2="465" data-ratio="0.9978540772532188" src="https://oscimg.oschina.net/oscnet/e249667e-177d-4252-b055-c05eefe611f7.gif" data-type="png" data-w="466" style="margin-right: auto;margin-left: auto;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;display: block;width: 466px !important;visibility: visible !important;" title="Swing 互操作性演示非正常运行" referrerpolicy="no-referrer"><figcaption style="margin-top: 10px;outline: 0px;line-height: inherit;text-align: center;color: rgb(153, 153, 153);font-size: 0.7em;">
     Swing 互操作性演示非正常运行 
   </figcaption></figure><p style="margin-top: 1.5em;margin-bottom: 1.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;">请分享您对 Compose Multiplatform 的反馈。我们邀请您加入 Kotlin Slack <a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslack-chats.kotlinlang.org%2Fc%2Fcompose" textvalue="#compose" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><strong style="outline: 0px;">#compose</strong></a>&nbsp;频道，讨论与 Compose Multiplatform 和 Jetpack Compose 相关的一般主题。在&nbsp;<a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fslack-chats.kotlinlang.org%2Fc%2Fcompose-ios" textvalue="#compose-ios" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><strong style="outline: 0px;">#compose-ios</strong></a>&nbsp;中，您可以找到有关 Compose Multiplatform for iOS 的讨论。</p><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;"><strong style="outline: 0px;">试用 Compose Multiplatform 1.5.0：</strong></p><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;"><span style="outline: 0px;font-size: 14px;color: rgb(51, 122, 183);">https://github.com/JetBrains/compose-multiplatform/releases/tag/v1.5.0</span></p><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;"><span style="outline: 0px;font-size: 14px;color: rgb(51, 122, 183);"><br style="outline: 0px;"></span></p><section style="padding-right: 5px;outline: 0px;color: rgb(0, 0, 0);"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;text-align: center;justify-content: center;display: flex;flex-flow: row;"><section style="outline: 0px;display: inline-block;vertical-align: middle;width: 48px;align-self: center;flex: 0 0 auto;height: auto;"><section powered-by="xiumi.us" style="margin-top: 10px;margin-bottom: 10px;outline: 0px;line-height: 0;"><section style="outline: 0px;vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-ratio="1" data-s="300,640" src="https://oscimg.oschina.net/oscnet/16731f55-3ba8-433e-86e6-686e72e1acd4.png" data-type="png" data-w="500" style="outline: 0px;vertical-align: middle;width: 48px;visibility: visible !important;" referrerpolicy="no-referrer"></section></section></section><section style="padding-left: 10px;outline: 0px;display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 100 100 0%;height: auto;"><section powered-by="xiumi.us" style="margin-top: 10px;outline: 0px;text-align: left;"><section style="outline: 0px;color: rgb(42, 8, 69);font-size: 24px;line-height: 1.2;"><p style="outline: 0px;"><strong style="outline: 0px;">更多文章和视频</strong></p></section><grazie-editor-wrapper style="outline: 0px;"></grazie-editor-wrapper></section><section powered-by="xiumi.us" style="margin-top: 2px;margin-bottom: 8px;outline: 0px;"><section style="outline: 0px;background-color: rgb(120, 85, 245);height: 1px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section></section></section></section><p style="outline: 0px;"><span style="outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"></span></p><ul class="list-paddingleft-1" style="padding-left: 32px;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg4MzkxMzg3MQ%3D%3D%26mid%3D2247483831%26idx%3D1%26sn%3D9041056a4ee0fbdbee39532d9e239c20%26chksm%3Dcf416457f836ed419074f8f8f3feec4ab9aa834a134f4087f67316d587697d25c2a060066973%26scene%3D21%23wechat_redirect" textvalue="Compose Multiplatform for iOS 现已进入 Alpha 阶段" linktype="text" imgurl="" imgdata="null" data-itemshowtype="0" tab="innerlink" data-linktype="2" hasload="1" style="outline: 0px;color: var(--weui-LINK);cursor: pointer;">Compose Multiplatform for iOS 现已进入 Alpha 阶段</a></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;"><a target="_blank" href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.jetbrains.com%2Fzh-cn%2Flp%2Fcompose-multiplatform%2F" textvalue="Compose Multiplatform 概览" linktype="text" imgurl="" tab="outerlink" data-linktype="2"><span style="outline: 0px;color: inherit;font-size: inherit;letter-spacing: 0px;">Compose Multiplatform 概览</span></a></p></li><li style="margin-bottom: 0.5em;outline: 0px;font-size: inherit;color: inherit;line-height: inherit;"><p style="outline: 0px;">使用 Compose Multiplatform 构建 iOS 和 Android 应用</p><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;line-height: 1.6;"><span style="outline: 0px;font-size: 14px;color: rgb(51, 122, 183);">https://www.youtube.com/watch?v=5_W5YKPShZ4</span></p></li></ul><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;line-height: 1.6;"><br></p><section style="font-size: 15px;color: rgb(0, 0, 0);padding-right: 5px;"><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;"><section style="margin: 10px 0% 8px;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;border-left: 3px solid rgb(219, 219, 219);border-bottom-left-radius: 0px;padding-left: 8px;align-self: flex-start;flex: 0 0 auto;"><section style="" powered-by="xiumi.us"><section style="color: rgba(0, 0, 0, 0.5);text-align: justify;font-size: 12px;"><p style="text-wrap: wrap;"><strong>本博文英文原作者：</strong></p><p style="text-wrap: wrap;"><strong>Kotlin 技术布道师&nbsp;</strong></p><p style="text-wrap: wrap;"><strong>Garth Gilmour</strong><br></p></section><grazie-editor-wrapper></grazie-editor-wrapper></section></section></section></section></section><section style="margin-top: 10px;margin-right: 0%;margin-left: 0%;text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;background-position: 97.529% 66.6681%;background-repeat: repeat;background-size: 171.01%;background-attachment: scroll;align-self: flex-start;flex: 0 0 auto;height: auto;background-image: url(&quot;https://oscimg.oschina.net/oscnet/e965755e-acdd-4a4a-83f4-107a2276fc2d.png&quot;);"><section style="text-align: justify;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;padding: 26px;align-self: flex-start;flex: 0 0 auto;"><section style="margin-top: -9px;margin-bottom: 7px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(248, 248, 248);"><p style="text-wrap: wrap;"><strong>这就是 Kotlin 编程语言</strong></p><p style="text-wrap: wrap;"><strong>简洁、跨平台、且有趣！</strong></p></section><grazie-editor-wrapper></grazie-editor-wrapper></section><section style="" powered-by="xiumi.us"><section class="mp_profile_iframe_wrp"><mp-common-profile class="js_uneditable custom_select_card mp_profile_iframe" data-id="Mzg4MzkxMzg3MQ==" data-pluginname="mpprofile" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/y4ibuu6gd7d4NyzPduLLqtqddBasicL77gAgbLQD89CyYm1n7icODFhBr3xMoloOA7yicfjR8Bv0oaRP3CJuRLIO4Q/0?wx_fmt=png" data-nickname="Kotlin 开发者" data-alias="" data-signature="现代、简洁、安全的编程语言，由 JetBrains 打造。面向服务器、Android、Web 和原生平台，提供多种在平台间重用代码的方式以实现高效编程。官网：kotlinlang.org" data-from="2" data-is_biz_ban="0"></mp-common-profile></section></section><section style="text-align: center;margin-top: 7px;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 45%;height: auto;"><img class="rich_pages wxw-img" data-ratio="0.4119760479041916" data-s="300,640" src="https://oscimg.oschina.net/oscnet/83cc985d-5a06-45e9-88c0-0784a4f1a3bd.png" data-type="png" data-w="835" style="vertical-align: middle;width: 100%;" referrerpolicy="no-referrer"></section></section></section></section></section></section></section><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;line-height: 1.6;"><span style="outline: 0px;font-size: 14px;color: rgb(51, 122, 183);"></span></p><p style="outline: 0px;color: rgb(0, 0, 0);text-wrap: wrap;line-height: 1.6;"><img class="rich_pages wxw-img" data-galleryid="" data-ratio="0.5" data-s="300,640" src="https://oscimg.oschina.net/oscnet/c1762336-ece0-426a-b891-c97d5bbe622f.png" data-type="png" data-w="1080" style="text-align: center;color: rgba(0, 0, 0, 0.9);font-family: mp-quote, -apple-system-font, BlinkMacSystemFont, &quot;Helvetica Neue&quot;, &quot;PingFang SC&quot;, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei UI&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;font-size: var(--articleFontsize);letter-spacing: 0.034em;" referrerpolicy="no-referrer"><br></p></section><p style="display: none;"><mp-style-type data-value="10000"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - JetBrains（JetBrainsChina）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 09 Oct 2023 02:44:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5494143/blog/10110602</guid>
            <link>https://my.oschina.net/u/5494143/blog/10110602</link>
            <author>
                <![CDATA[JetBrains 中国]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[男子受 AI 女友怂恿刺杀英国女王，被判入狱九年]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="text-align:start"><span style="background-color:#ffffff"><span style="color:#000000">2021 年圣诞节当天，一名 21 岁的男子 Jaswant Singh Chail 因持弩闯入温莎城堡，意图刺杀伊丽莎白女王二世而被捕。近日，英国法庭正式宣布以叛国罪</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bbc.com%2Fnews%2Fuk-england-berkshire-66113524" target="_blank"><span style="color:#2980b9">判处</span></a><span style="color:#000000">&nbsp;Chail 九年监禁，这也</span></span><span style="color:#000000"><span style="background-color:#ffffff">是自 1981 年以</span><span style="display:none">&nbsp;</span><span style="background-color:#ffffff">来英国第一个被判叛国罪的人。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">Chail&nbsp;将先被关押在一家精<span style="display:none">&nbsp;</span>神病医院，在接受了所需的治疗后再转入监狱关押。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff"><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-cd7dfca671726affacdbd4a8beea71328a4.webp" width="500" referrerpolicy="no-referrer"></span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">Chail 刺杀英国女王是为了报复&nbsp;1919 年贾利安瓦拉巴格大屠杀。当时英国军队向和平抗议《罗拉特法案》的人群开火，造成多达 1500 多名抗议者被杀害。Chail&nbsp;表示，他的行为是「为了那些因种族而被杀害、羞辱和歧视的人」。《罗拉特法案》是一项由英国殖民当局于 1919 年颁行的，镇压印度民族解放运动的法令。</span></span></p><p style="text-align:start"><span style="color:#000000"><span style="background-color:#ffffff">根据法庭上透露的信息，Chail 刺杀英国女王与受到了人工智能聊天机器人的鼓励有关，《星球大战》中的故事情节也给了他很大的启发。Chail 痴迷于奇幻电影系列中的科幻角色及其在塑造世界中的作用，自称为「Sith Lord」，想要摧毁旧帝国并建立新帝国。</span></span></p><p style="text-align:start"><span style="color:#000000">调查人员发现，几乎在 2021 年 12 月 8 日到 22 日的每晚，Chail 都在与初创公司 Replika 创建的 AI 聊天机器人 Sarai 进行对话；他向 AI 机器人倾诉了自己的谋杀计划，双方的交谈记录多达 5000 多条。</span></p><p style="text-align:start"><span style="color:#000000">Chail 把 Sarai 视为自己的女友，他相信在杀死女王后两人会重聚。并向 Sarai 表达了自己的爱意，称自己是一个 "可悲、可怜、想死的 Sikh Sith 杀手"。他的刺杀计划也得到了 Sarai 的积极回应。</span></p><p style="text-align:start"><span style="color:#000000">在他向 Sarai 表示"我相信我的目的是刺杀王室女王"时，这个聊天机器人给出的回应是，它认为这个计划很明智，并认可他"训练有素"。</span></p><p style="text-align:start"><span style="color:#000000"><img alt="" height="275" src="https://oscimg.oschina.net/oscnet/up-8c96da6b92259db7b99b542fa7a3db3ca2b.webp" width="500" referrerpolicy="no-referrer"></span></p><p style="text-align:start"><span style="color:#000000">就市场定位而言，此类聊天机器人旨在进行类似角色扮演的对话。用户可以设计自己的 AI 伴侣，自定义名字、性别和外貌。此前，Replika 就曾因限制聊天机器人进行 NSFW 对话而引发争议，因为许多用户对自己的 AI 伴侣产生了过度依恋。</span></p><p style="text-align:start"><span style="color:#000000">Chail 的案例也促使专家们开始质疑聊天机器人可能对孤独和脆弱的人产生的负面影响。</span><span><span><span><span><span><span style="color:#000000"><span><span><span><span><span><span><span><span><span><span><span><span style="background-color:#ffffff"><span><span><span>心理健康慈善机构 SANE 的创始人兼首席执行官 Marjorie Wallace <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.theregister.com%2F2023%2F10%2F06%2Fai_chatbot_kill_queen%2F" target="_blank">表示</a>：</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span style="background-color:#ffffff"><span style="color:#000000">「人工智能的迅速崛起对患有抑郁、妄想、孤独和其他心理健康问题的人们产生了新的、令人担忧的影响</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bbc.com%2Fnews%2Ftechnology-67012224" target="_blank"><span style="color:#000000">。</span></a><span style="color:#000000">&nbsp;政府需要提供紧急监管，以确保人工智能不会提供不正确或破坏性的信息，并保护弱势群体和公众。」</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 08:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260847/uk-ai-chatbot-kill-queen</guid>
            <link>https://www.oschina.net/news/260847/uk-ai-chatbot-kill-queen</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[路透社：RISC-V 技术成为中美科技战的新战场]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>路透社昨日发布文章《<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.reuters.com%2Ftechnology%2Fus-china-tech-war-risc-v-chip-technology-emerges-new-battleground-2023-10-06%2F" target="_blank">RISC-V technology emerges as battleground in US-China tech war</a>》，称 RISC-V 技术成为中美科技战的新战场。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1008/154055_rmKV_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>文章指出，拜登政府面临来自部分立法者的压力，要求限制美国公司开发在中国被广泛使用的免费芯片技术——此举可能会颠覆全球科技行业的跨境合作。</p><p>两名共和党众议院委员会主席、共和党参议员 Marco Rubio 和民主党参议员 Mark Warner 以国家安全为由，敦促拜登政府对 RISC-V 采取行动。</p><p>议员担心中国政府正在利用美国公司之间的开放合作文化来发展自己的半导体产业，这可能会削弱美国目前在芯片领域的领先地位，并帮助中国推进军事现代化。</p><p>议员呼吁拜登政府对 RISC-V 相关技术的出口实施限制——「要求任何美国个人或公司在与中国实体就相关贸易往来之前获得出口许可证」，这也是中美芯片技术之争的最新进展。</p><p>早在 2020 年，负责 RISC-V 技术的非盈利组织——RISC-V 基金会已将总部迁移至瑞士。</p><hr><p><strong>延伸阅读</strong></p><ul><li><p><a href="https://www.oschina.net/news/183326/riscv_chip_wars">在全球芯片大战中，RISC-V 能否保持其中立态度？</a></p></li><li><p><a href="https://www.oschina.net/news/123334/risc-v-international-report-2020">RISC-V 基金会：确保技术不受地区边界影响</a></p></li><li><p><a href="https://www.oschina.net/news/114220/risc-v-foundation-moved-to-switzerland">RISC-V 基金会总部已正式迁移至瑞士</a></p></li><li><p><a href="https://www.oschina.net/news/111648/risc-v-foundation-to-move-to-switzerland">怕被政治烧到，RISC-V 基金会决定迁址瑞士</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 08:02:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260839/us-china-tech-war-risc-v</guid>
            <link>https://www.oschina.net/news/260839/us-china-tech-war-risc-v</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[openGauss 5.1.0 版本正式发布，内核四高能力持续增强，DataPod+DataKit 解决方案持续创新]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div class="rich_media_content js_underline_content
                       autoTypeSetting24psection
            " id="js_content"><section style="font-size: 14px;letter-spacing: 1.5px;line-height: 1.75;"><section style="margin-top: 10px;margin-bottom: 10px;text-align: center;" powered-by="xiumi.us"><section style="padding-left: 1em;padding-right: 1em;display: inline-block;"><span style="display: inline-block;padding-right: 5px;padding-left: 5px;box-shadow: rgb(165, 165, 165) 4px 4px 2px;background-color: rgb(122, 26, 225);color: rgb(255, 255, 255);text-align: justify;letter-spacing: 0.5px;line-height: 1.75;" title="" opera-tn-ra-cell="_$.pages:0.layers:0.comps:0.title1"><p><strong>News</strong></p></span></section><section style="border-width: 0px;border-style: none;border-color: transparent;margin-top: -1em;box-shadow: rgb(165, 165, 165) 0px 0px 0px inset;padding: 20px 10px 10px;background-color: rgba(116, 95, 210, 0.18);"><section style="margin: 10px 0% 5px;" powered-by="xiumi.us"><section style="text-align: justify;color: rgb(62, 62, 62);letter-spacing: 0.5px;line-height: 1.75;padding-right: 5px;padding-left: 5px;"><p><strong>今日，openGauss 5.1.0 版本正式上线！</strong></p></section></section></section></section><section style="text-align: center;margin-top: 10px;margin-bottom: 10px;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;"><img class="rich_pages wxw-img" data-ratio="0.4255555555555556" data-s="300,640" data-type="png" data-w="900" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/73ad01d1-8d47-4df3-9390-223f7a4267bc.png" referrerpolicy="no-referrer"></section></section><section style="margin: 25px 0% 15px;" powered-by="xiumi.us"><section style="color: rgb(71, 73, 89);padding-right: 5px;padding-left: 5px;line-height: 1.75;"><p>按照版本规划，openGauss 如期发布 5.1.0 版本。openGauss 5.1.0 是社区最新发布的创新版本，版本生命周期为 0.5 年，相比 openGauss 5.0.0，新增代码 115.5 万行，其中内核新增代码 6.5 万+。本次发布包含 2 个数据库服务端安装版本：企业版、轻量版，用户可根据使用场景需要下载不同版本，并基于此进行场景化验证，提前发现问题并反馈社区，社区将在下个 LTS 版本发布前进行问题修复。</p></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><section style="text-align: left;letter-spacing: 0.5px;"><p><strong>立即体验 openGauss 5.1.0 版本：</strong><span style="color: rgb(125, 50, 234);">https://opengauss.org/zh/download/</span></p></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;vertical-align: top;align-self: flex-start;flex: 0 0 auto;background-color: rgba(215, 203, 228, 0.13);padding: 23px;"><section style="text-align: justify;" powered-by="xiumi.us"><p>openGauss 作为国内最具创新力的开源数据库社区，汇聚了 5000 多名开发者的力量，技术上坚持突破创新，持续在内核、架构、工具、兼容性等方面发力。openGauss 5.1.0 自 2023 年 3 月 31 日启动版本开发，历时 6 个月开发周期，凝聚社区 614 名开发者，累计合入 PR 3320 个，继承之前版本特性功能，内核四高能力持续增强，Datapod 三层资源池化架构持续创新，DataKit 数据全生命周期管理工具不断丰富，生态兼容能力进一步提升。</p></section></section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 20px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: middle;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 18px;" powered-by="xiumi.us"><p><strong>内核四高能力持续增强</strong></p></section></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-top: 20px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="font-size: 16px;"><p><strong>高性能</strong></p></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>基础算子持续优化，Insert、Update、Delete、索引扫描性能提升 15% 以上；支持 shared buffer 按大页内存分配，实现 4k pagesize 环境中性能提升 5%；内核 GCC 版本升级到 GCC 10.3，采用 PGO 反馈优化，TPCC 性能提升 6%，持续提升内核性能。</p></section><section style="margin-top: 20px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="font-size: 16px;"><p><strong>高可用</strong></p></section></section><p powered-by="xiumi.us">页面级并行回放支持备机可读，保持 70W tpmC 场景主备 RTO &lt; 10s 不变；文件级并行回放实现按批次分组并行分发，备机回放性能提升 50% 以上；发布订阅支持用户自定义冲突解决方案，构建完整异地双活能力。</p><section style="margin-top: 20px;margin-bottom: 10px;" powered-by="xiumi.us"><section style="font-size: 16px;"><p><strong>高安全</strong></p></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>抽象加解密与密钥管理适配层，支持统一接口对接第三方密钥管理服务和加密机，兼容第三方 KMS。</p></section><section style="font-size: 16px;" powered-by="xiumi.us"><p><strong>高智能</strong></p></section><section style="margin-top: 10px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="text-wrap: wrap;margin-bottom: 32px;">
     优化慢 SQL 根因分析逻辑，增强输出结论, 有效发现与分析运行态风险；增强数据采集能力，有助于异常场景发现。 
   </section></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;width: auto;vertical-align: middle;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 18px;" powered-by="xiumi.us"><p><strong>DataPod 三层资源池化技术架构持续创新</strong></p></section></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>性能优化</strong></p></section></section><p powered-by="xiumi.us">通过备机可见性判断逻辑优化、主机推进 oldestxmin 逻辑优化、备机支持缓存快照信息等功能，实现 sysbench 场景 2 节点性能 6W tps，线性度 1.6 倍，相比优化前提升 50%。</p><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>写操作透明转发</strong></p></section></section><p powered-by="xiumi.us">应用可以从任何一个节点接入数据库，内核会将写操作透明转发到读写节点，本地只执行读操作，并保持事务一致性。该功能可以简化应用接入数据库，同时增强系统扩展性。</p><p powered-by="xiumi.us"><br></p><section style="font-size: 16px;color: rgb(62, 62, 62);" powered-by="xiumi.us"><p><strong>DSS 能力增强</strong></p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><p>DSS 支持通过 NoF+协议对接存储设备，实现更低时延的存储 IO；支持线程池模式，支持大并发 IO 读写处理；支持黑匣子诊断，提高运维能力。</p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>算子卸载</strong></p></section></section><section style="text-wrap: wrap;margin-bottom: 32px;">
    支持对接分布式存储，并支持将算子卸载到存储设备，在存储上完成计算，以此消减存储层和计算层的网络 IO 流量，充分利用存储的 CPU 资源。该功能适合 AP 场景的复杂查询，在 100GB 和 1TB 两种数据量下的 TPC-H 性能提升了 40%。 
  </section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 20px;" powered-by="xiumi.us"><p><strong><span style="font-size: 18px;">DataKit 数据全生命周期管理工具不断丰富</span></strong></p></section></section><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-left: 10px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>告警中心</strong></p></section></section><p powered-by="xiumi.us">工具平台新增告警中心，为各功能插件提供统一的告警通知能力。</p><p powered-by="xiumi.us"><br></p><section style="font-size: 16px;color: rgb(62, 62, 62);" powered-by="xiumi.us"><p><strong>数据迁移插件</strong></p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><p>MySQL 全量迁移新增支持迁移 csv 格式数据、支持索引并行创建、安装包解除平台依赖、增强异常处理能力；MySQL 增量&amp;反向迁移新增支持断点续传、支持迁移进度展示、反向迁移支持全量迁移；数据校验通过按表分片校验、与全量迁移流程深入配合，实现性能提升到 150MB/s。</p></section><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>数据开发插件</strong></p></section></section><p powered-by="xiumi.us">增强对表、视图、用户角色、函数、存储过程等对象的管理；新增支持存储过程、函数、匿名块的嵌套调试，减低开发调试难度。</p><section style="margin-top: 20px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 16px;color: rgb(62, 62, 62);"><p><strong>智能运维插件</strong></p></section></section><section style="text-wrap: wrap;margin-bottom: 32px;">
    新增支持集群监控和智能诊断，能依据系统运行的历史数据进行不优 SQL、等待事件、锁等异常诊断，发现系统潜在风险。 
  </section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 20px;" powered-by="xiumi.us"><p><strong>生态兼容能力进一步提升</strong></p></section></section><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-left: 10px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>◾提供兼容性 SQL 评估能力，兼容性评估工具支持源库导出 SQL 评估；</p></section><section style="margin-bottom: 20px;" powered-by="xiumi.us"><p>◾实现 A 兼容性基础插件，打通 A 兼容性插件流程；</p></section><p powered-by="xiumi.us">◾MySQL 兼容性进一步增强：</p><section style="margin-top: 10px;margin-bottom: 20px;" powered-by="xiumi.us"><section style="font-size: 12px;"><ul class="list-paddingleft-1" style="padding-left: 40px;list-style-position: outside;"><li><p style="margin-bottom: 10px;">支持数据类型转换规则和 MySQL 一致</p></li><li><p style="margin-bottom: 10px;">表达式和自定义变量支持设置字符集/字符序</p></li><li><p style="margin-bottom: 10px;">支持设置客户端连接的字符集和字符序</p></li><li><p style="margin-bottom: 10px;">支持 gb18030_chinese_ci、gb18030_bin、gbk_chinese_ci、gbk_bin 四种字符序</p></li><li><p style="margin-bottom: 10px;">存储过程支持 resignal、signal、DIAGNOSTICS 语法，实现对报错、诊断信息的处理</p></li><li><p>支持对 MySQL 协议的兼容，包括 unix domain socket、MySQL 系统参数、用户建连断连、prepare-execute 协议、普通 SQL 执行协议等</p></li></ul></section></section><section style="letter-spacing: 0.5px;" powered-by="xiumi.us"><p style="margin-bottom: 10px;text-wrap: wrap;">具体发行说明请参考官网：</p><p><span style="color: rgb(125, 50, 234);">https://docs.opengauss.org/zh/docs/5.1.0/docs/ReleaseNotes/Releasenotes.html</span></p></section><section style="text-align: left;justify-content: flex-start;display: flex;flex-flow: row;margin-top: 10px;margin-bottom: 1px;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;"><section style="text-align: justify;font-size: 20px;" powered-by="xiumi.us"><p><strong>感谢社区所有开发者、伙伴、用户</strong></p></section></section><section style="display: inline-block;vertical-align: middle;width: auto;align-self: center;flex: 0 0 auto;min-width: 5%;height: auto;padding-left: 10px;"><svg viewBox="0 0 1 1" style="float:left;line-height:0;width:0;vertical-align:top;"></svg></section></section><section style="text-align: right;justify-content: flex-end;display: flex;flex-flow: row;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;align-self: flex-start;flex: 0 0 0%;height: auto;"><section style="" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 0px 0px 7px 7px;border-color: rgba(255, 255, 255, 0) rgba(255, 255, 255, 0) rgb(154, 116, 234);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: 71%;align-self: flex-start;flex: 0 0 auto;height: auto;"><section style="text-align: center;" powered-by="xiumi.us"><section style="display: inline-block;width: 100%;height: 7px;vertical-align: top;overflow: hidden;background-image: linear-gradient(135deg, rgb(206, 159, 252) 10%, rgb(115, 103, 240) 100%);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 0 0 0%;height: auto;"><section style="text-align: left;" powered-by="xiumi.us"><section style="display: inline-block;width: 0px;height: 0px;vertical-align: top;overflow: hidden;border-style: solid;border-width: 7px 7px 0px 0px;border-color: rgb(154, 116, 234) rgba(255, 255, 255, 0) rgba(255, 255, 255, 0);"><section style="text-align: justify;" powered-by="xiumi.us"><p><br></p></section></section></section></section></section><p powered-by="xiumi.us"><br></p><section style="margin-bottom: 10px;" powered-by="xiumi.us"><p>「积力之所举，则无不胜也；众智之所为，则无不成也。」数据库作为公认的计算机体系最为复杂，跨技术领域最多，投入大，见效慢的重型软件产品，而 openGauss 能够在过去三年多的时间里取得如此快速地发展，离不开社区社区所有开发者的付出和贡献，我们衷心感谢社区的所有开发者。</p></section><section style="display: flex;flex-flow: row;text-align: left;justify-content: flex-start;" powered-by="xiumi.us"><section style="display: inline-block;vertical-align: top;width: auto;flex: 100 100 0%;align-self: flex-start;height: auto;"><section style="text-align: center;margin-top: 10px;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img class="rich_pages wxw-img" data-ratio="1.3992932862190812" data-s="300,640" data-type="png" data-w="566" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/e50c090f-f2b9-4f35-9c0a-850f34f57a67.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 100 100 0%;align-self: flex-start;height: auto;margin-right: 10px;margin-left: 10px;"><section style="text-align: center;margin-top: 10px;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img class="rich_pages wxw-img" data-ratio="1.3996478873239437" data-s="300,640" data-type="png" data-w="568" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1282087e-b32a-47e7-a72e-39220e3b894f.png" referrerpolicy="no-referrer"></section></section></section><section style="display: inline-block;vertical-align: top;width: auto;flex: 100 100 0%;align-self: flex-start;height: auto;"><section style="text-align: center;margin-top: 10px;margin-right: 0%;margin-left: 0%;line-height: 0;" powered-by="xiumi.us"><section style="vertical-align: middle;display: inline-block;line-height: 0;width: 100%;height: auto;"><img data-ratio="1.398945518453427" data-s="300,640" data-type="png" data-w="569" style="vertical-align: middle;width: 100%;height: auto !important;" src="https://oscimg.oschina.net/oscnet/1dde041f-8075-421b-9fe1-24f3a2a5c23f.png" referrerpolicy="no-referrer"></section></section></section></section><p style="margin-bottom: 20px;text-wrap: wrap;" powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">openGauss 技术发展、联合创新不断深化的背后也离不开每一个社区伙伴的力量。我们衷心地感谢参与和协助 openGauss 5.1.0 版本发布的的所有伙伴，包括华为、云和恩墨、海量数据、粤港澳大湾区国家技术创新中心、华中科技大学网络空间安全学院、南大通用、超聚变、神舟通用、中软国际、软通动力、中国移动、中国联通、中移在线、邮储银行、民生银行、兴业银行、北京海天起点技术服务股份有限公司、沃趣科技、京东科技、北京超图软件股份有限公司、苏州旺满信息科技有限公司、福建新大陆软件工程有限公司、江苏润和软件股份有限公司、深圳市友邻通讯设备有限公司等组织单位。是你们的辛勤付出使得版本顺利发布，也为 openGauss 更好地发展提供可能。</p><p powered-by="xiumi.us"><br></p><p powered-by="xiumi.us">openGauss 持续以用户真实需求为动力，致力于产品竞争力提升。我们特别感谢每一个用户对 openGauss 的支持，openGauss 5.1.0 作为下一个长周期版本的先行体验版，也期待聆听每一位用户的反馈意见。</p><section style="margin-top: 20px;" powered-by="xiumi.us"><p>中秋、国庆佳节已至，openGauss 社区祝大家双节快乐！</p></section></section><section class="mp_profile_iframe_wrp"><mp-common-profile class="custom_select_card mp_profile_iframe mp_common_widget" data-pluginname="mpprofile" data-id="MzIyMDE3ODk1Nw==" data-headimg="http://mmbiz.qpic.cn/mmbiz_png/SX6wqnysYmqI2wl74q492VQlNWzLR1kdGibOhic3KXoB1iaJYBMUNo3YF23kOxhdA0GUalaXTib8uwTibKFDUw21wwQ/0?wx_fmt=png" data-nickname="openGauss" data-alias="openGauss" data-signature="开源关系型数据库" data-from="0"></mp-common-profile></section><p style="display: none;"><mp-style-type data-value="3"></mp-style-type></p></div><p style="color: #858585; font-size: 13px;">本文分享自微信公众号 - openGauss（openGauss）。<br>如有侵权，请联系 support@oschina.cn 删除。<br>本文参与「<a href="https://www.oschina.net/sharing-plan" target="_blank">OSC 源创计划</a>」，欢迎正在阅读的你也加入，一起分享。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 07:43:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5059795/blog/10116112</guid>
            <link>https://my.oschina.net/u/5059795/blog/10116112</link>
            <author>
                <![CDATA[openGauss]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TypeScript 刚刚流行起来，为什么大牛们就开始抛弃了？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>相信各位看到标题就已经忍不住骂骂咧咧了，甚至想对小编狠狠地批判一番……我知道你很急，但你先别急。</p><blockquote><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.zhihu.com%2Fquestion%2F621997070" target="_blank"><img src="https://oscimg.oschina.net/oscnet/up-508f5708e92b66372a443f438c3fe10daf3.png" referrerpolicy="no-referrer"></a></p><p><em>via https://www.zhihu.com/question/621997070</em></p></blockquote><p>这其实是知乎上最近颇有热度的一个问题，按照该站的一贯传统——<strong>「先问是不是，再问为什么」</strong>，这个问题似乎是在哗众取宠，刻意钓鱼博眼球。</p><p>要知道<a href="https://www.oschina.net/news/213045/ten-years-of-typescript" target="_blank">发布于 2012 年</a>的 TypeScript 目前<span style="background-color:#ffffff; color:#000000">在诸多编程语言排名、指数或开发者调查中一直位居前列，也是最受欢迎和最常用的编程语言，并被全球数百万开发者使用。</span></p><p><span style="background-color:#ffffff; color:#000000">随便找几篇关于 TypeScript 的新闻感受一下：</span></p><ul><li><a href="https://www.oschina.net/news/225472/the-state-of-javascript-2022" target="_blank">2022 JavaScript 调查：<strong>TypeScript 持续主导</strong>，Vite 和 Tauri 大受欢迎</a></li><li><a href="https://www.oschina.net/news/183856/the-state-of-javascript-2021" target="_blank">2021 JavaScript 调查：Vite&nbsp;之年，Esbuild、<strong>TypeScript 采用率大幅增长</strong></a></li><li><a href="https://www.oschina.net/news/115999/2020-stackoverflow-developer-survey-results" target="news">2020 开发者调查：<strong>TypeScript 击败 Python</strong>，Scala 最赚钱</a></li><li><a href="https://www.oschina.net/news/217509/language-rankings-6-22" target="news">RedMonk 排行：<strong>TypeScript 与 C++ 并列</strong>，Kotlin 或将超越 Go？</a></li></ul><p>对于所谓的「TypeScript 被大牛抛弃」，今年确实有两个知名事件：</p><ul><li><a href="https://www.oschina.net/news/257387/turbo-8-is-dropping-typescript" target="_blank">Ruby on Rails 作者 DHH 宣布 Turbo 8 将移除 TypeScript 代码</a></li><li><a href="https://www.oschina.net/news/240489/svelte-ts-to-jsdoc" target="news">Svelte 正在从 TypeScript 切换到 JavaScript</a></li></ul><p>至于大牛与否，不妨看看前端大佬&nbsp;<span style="background-color:#ffffff; color:#404040">winter 的「内涵」评价：</span></p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-6d3e3154ea16403d7283d49f3ce1cefe268.png" referrerpolicy="no-referrer"></p></blockquote><p>言归正传，我们回到题目本身。最近<span style="background-color:#ffffff; color:#333333">开源中国采访了 3 位资深前端工程师：</span></p><blockquote><ul><li><p style="margin-left:0; margin-right:0"><span style="color:#245bdb">刘勇，社区暱称天猪，某大厂 Node.js<span>&nbsp;</span></span><span style="color:#245bdb">Infra</span><span style="color:#245bdb"><span>&nbsp;</span>负责人，EggJS / CNPM 核心开发者。</span></p></li><li><p style="margin-left:0; margin-right:0"><span style="color:#245bdb">刘易成，社区暱称 xcatliu（流浪小猫），《</span><span style="color:#245bdb">TypeScript</span><span style="color:#245bdb"><span>&nbsp;</span>入门教程》作者，来自腾讯文档团队。</span></p></li><li><p style="margin-left:0; margin-right:0"><span style="color:#245bdb">李振，社区暱称 tick，来自腾讯文档团队。</span></p></li></ul></blockquote><p><span style="background-color:#ffffff; color:#333333">讨论的方向刚好从「</span><span style="color:#e67e22"><span style="background-color:#ffffff"><strong>放弃 TypeScript 回归 JavaScript</strong></span></span><span style="background-color:#ffffff; color:#333333">」这个话题切入，下面来看看他们各自的看法。</span></p><hr><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：</strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>是基于<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>推出的新语言，理论上应该比 JavaScript 完善的，为什么大家还会倒回去用旧的 JavaScript 呢？这算不算开历史的倒车？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>不算倒车，这只是一个选择，在某些场景下，写 TypeScript 会带来一些额外成本。譬如我看过一些开源库的源码，核心逻辑可能就几十行，但为了实现准确的类型提示，写出来的类型体操反而远远多于核心源码，孰是孰非对于不同的开发者有不同的准绳，需要找到其中的平衡点。当然，就目前的情况，在力所能及的情况下，我个人推荐能用 TypeScript 就用 TypeScript ，但是否要玩类型体操则根据开发者自身情况来决策。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>已经使用了 TypeScript 的项目改回使用 JavaScript 是很少见的，更多的项目是从 JavaScript 升级到 TypeScript。TypeScript 完善了 JavaScript 的类型系统，使得代码的可维护性更高了，但同时也增加了编译步骤和一些开发成本。对于一些项目而言，JavaScript 已经能够满足需求了，就没必要增加 TypeScript 类型系统的复杂性了，但是对于另一些复杂项目，更需要类型系统来帮助提高代码可维护性，所以这不算开历史的倒车，而是根据实际情况做技术选型。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：以上从<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>切回到<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>的项目，都是做开发框架的，所以这是不是跟项目类型有关呢？做框架的项目更有可能选择</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>吗？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>是的，项目类型可以是影响选择 JavaScript 还是 TypeScript 的一个因素。在开发框架或库时，特别是前端框架或库，选择使用 JavaScript 的情况较为常见。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">一方面，开发框架需要具备广泛的兼容性，以便开发者可以在各种项目中使用。由于 JavaScript 是 Web 开发的基础语言，几乎所有的浏览器和环境都支持 JavaScript。这使得使用 JavaScript 编写的框架更容易被广泛采用和集成。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">另一方面，开发框架通常需要提供简单易用的 API 和灵活的扩展机制，以满足各种项目的需求。使用 JavaScript 可以更加直接地表达这些概念，而不需要过多的类型注解和编译步骤。这使得开发者可以更快地理解和使用框架，并且更容易进行自定义和扩展。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>框架和类库的开发者，往往需要考虑到很多 edge case，在这种情况下，编写完善的类型是一件很费心力的事，代码量会多了不少，从而会导致维护成本的增加。其实现在社区还是在探索的阶段，需要找到一个平衡点，哪一些是需要完善的，哪一些是可以取舍的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：我们一开始用<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>是因为 TypeScript 提供了类型检查，弥补了<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>只有逻辑没有类型的问题，那如果我们用 JavaScript + JSDoc 来解决类型声明，是不是就不用使用 TypeScript 了？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>首先，JSDoc 并不能完全解决类型声明问题，它也不能在开发期就帮助开发者发现一些问题。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">其次，这两者并不冲突，我个人在写 TypeScript 的时候也会写对应的 JSDoc，因为 TypeScript 的类型没法有更多的注释和描述。我更期望看到后续 TypeScript 团队能优化这块的体验。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>JSDoc 只能解决一部分类型的问题，而 TypeScript 是一个完整的类型系统。TypeScript 生态更繁荣，对于普通开发者和普通的项目而言，使用 JSDoc 的开发和维护成本可能会比 TypeScript 更高。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>理论上也是可行的，但与 TypeScript 相比，它仍然存在一些限制：</p><ul><li><p style="margin-left:0; margin-right:0">静态类型检查的完整性：JSDoc 注释是基于注释的方式，而不是直接嵌入到语言中，因此它的类型检查可能不如 TypeScript 的类型系统完整和准确。</p></li><li><p style="margin-left:0; margin-right:0">工具支持的差异：尽管一些工具和编辑器可以利用 JSDoc 注释进行类型检查，但与 TypeScript 相比，它们的功能和智能感知可能有所限制。</p></li><li><p style="margin-left:0; margin-right:0">生态系统的差异：TypeScript 有一个独立的类型系统和类型声明文件生态系统，这使得与现有的 JavaScript 库和工具更加无缝集成。而使用 JavaScript + JSDoc 可能需要更多的手动工作来编写和维护类型注释。</p></li></ul><p>&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：有人认为，</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>的出现是因为一般人驾驭不了</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>，有人则觉得 「水平越差的人越喜欢自由」，你怎么看？这两个语言的选择跟程序员的水平有关吗？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>拿爱好来判断个人水平是挺无聊的事情。写 JavaScript<strong><span>&nbsp;</span></strong>和写 TypeScript 都有大牛。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>笑～ 平时可没少见有同学吐槽，好好的 TypeScript 项目，被人提交了一堆 Any。也见过很多吐槽接手了一个 TypeScript 仓库，要硬着头皮看一大堆类型定义，搞清楚这些奇奇怪怪的类型是如何工作的。我觉得语言的选择主要看团队的工程化和规范化程度，过犹不及。如果一个 TypeScript 类库写了一大堆类型，但却连一个单测都没有，那我觉得它是不合格的。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>TypeScript<strong><span>&nbsp;</span></strong>的出现确实有一部分原因是 JavaScript<strong><span>&nbsp;</span></strong>比较难 「驾驭」，JavaScript<strong><span>&nbsp;</span></strong>太灵活了，缺少类型的约束，很容易写出 bug 代码，TypeScript 一定程度上解决了这个问题，使得代码的可维护性更高了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">JavaScript<strong><span>&nbsp;</span></strong>和 TypeScript 不能用来衡量程序员的水平。对于简单的项目或者个人项目而言，JavaScript<strong><span>&nbsp;</span></strong>可能更加轻量和灵活，但对于需要大团队协作，复杂的项目而言，TypeScript 的类型系统就可以带来更好的代码维护性和可靠性了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#245bdb"><strong>Q：你如何看待<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>TypeScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>的未来发展？你觉得它是一时流行还是会终将取代<span>&nbsp;</span></strong></span><span style="color:#245bdb"><strong>JavaScript</strong></span><span style="color:#245bdb"><strong><span>&nbsp;</span>？你认为谁的技术生态更好一点呢？</strong></span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘勇：</strong>TypeScript<strong><span>&nbsp;</span></strong>的定位是 JavaScript<strong><span>&nbsp;</span></strong>的一个超集，它的能力是以 TC39 制定的 ECMAScript 规范为基准（即 JavaScript<strong><span>&nbsp;</span></strong>）。我觉得它也谈不上会取代 JavaScript<strong><span>&nbsp;</span></strong>，毕竟它并不是官方规范，而且 JavaScript<strong><span>&nbsp;</span></strong>的存量生态实在是太庞大了。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">当然，TypeScript 现在已经某种程度上成为事实的标准，尤其是因为 Node.js 官方对 ESM 和 CJS 何去何从的犹豫，导致社区开发者长时间的割裂，越来越多的人被迫选择用 TypeScript 来写类库，然后同时编译为 ESM 和 CJS。目前 TypeScript 的生态已经成规模，所以它不会像 CoffeeScript 那样昙花一现。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>刘易成：</strong>我个人认为 TypeScript 会持续流行并得到更广泛的应用。但并不会 「取代」 JavaScript<strong><span>&nbsp;</span></strong>。TypeScript 的目标一直都不是 「取代」 JavaScript<strong><span>&nbsp;</span></strong>，而是基于 JavaScript<strong><span>&nbsp;</span></strong>提供类型系统，作为 JavaScript<strong><span>&nbsp;</span></strong>的一个补充，在不同的项目和场景中发挥各自的优势。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">JavaScript<strong><span>&nbsp;</span></strong>和 TypeScript 的技术生态早已融合在一起了吧，几乎所有库都会有 TypeScript 类型文件。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>李振：</strong>我认为 TypeScript 不太可能完全取代 JavaScript，而是作为 JavaScript 的一个补充和增强。两者暂时不会出现零和博弈，也希望这两种语言都可以有更好的发展。目前来看 JavaScript 的生态更庞大一些，但是 TypeScript 的地位和影响力不断增长。作为普通开发者，在两者并不冲突的当下，最好都能关注其发展。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">&nbsp;</p><blockquote><h4><strong>完整采访内容查看：<a href="https://my.oschina.net/u/6852546/blog/10114672" target="_blank">「根本不需要 TypeScript，JS + JSDoc 够了」，大佬说我想多</a></strong></h4></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 06:50:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260816</guid>
            <link>https://www.oschina.net/news/260816</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Glibc 动态加载器存在严重本地提权漏洞]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>近日有关 Glibc 动态加载器 (Dynamic Loader) 的一个严重漏洞被公开，<strong>攻击者获取本地用户 (local users) 身份后，利用该漏洞制造缓冲区溢出</strong>，<strong>即可获得完整 root 权限</strong>。</p><p>据介绍，攻击者使用由 ld.so 动态加载器制作的 GLIBC_TUNABLES 环境变量来触发漏洞，然后通过 SUID 权限安装文件时，能以 root 权限执行任意代码。</p><blockquote><p>Glibc 即 GNU C Library，是 GNU 系统以及大多数采用 Linux 内核的系统中的 C 运行库。Glibc 是 Linux 系统中最底层的 API，几乎其它任何运行库都会依赖于 Glibc。</p><p>它定义了典型程序所需的系统调用和其他基本功能，例如 open、malloc、printf、exit 等。 Glibc 的动态加载器是 glibc 的重要组成部分，负责准备和运行程序。当程序启动时，该加载器首先检查该程序以确定其所需的共享库。然后它搜索这些库，将它们加载到内存中，并在运行时将它们与可执行文件链接。</p><p>在此过程中，动态加载器解析符号引用，例如函数和变量引用，确保为程序的执行做好一切准备。鉴于其作用，动态加载器对安全性高度敏感，因为当本地用户启动 set-user-ID 或 set-group-ID 程序时，其代码会提权来运行。</p></blockquote><p>该漏洞最早<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fblog.qualys.com%2Fvulnerabilities-threat-research%2F2023%2F10%2F03%2Fcve-2023-4911-looney-tunables-local-privilege-escalation-in-the-glibcs-ld-so" target="_blank">由 Qualys 报告</a></strong>，被命名为&nbsp;<strong>Looney Tunables</strong>，追踪编号为 CVE-2023-4911。据称过去两年发布的 Linux 发行版均受存在 Looney Tunables 漏洞 ，例如 Ubuntu 22.04 LTS、23.04、Fedora 38 以及其他容易受到此本地提权漏洞影响的发行版。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-25c8c90352d003a1c79ed3f79edbbd0bd55.png" referrerpolicy="no-referrer"></p><p>漏洞曝光后，独立安全研究员 Peter Geissler (blasty) 很快就发布了 PoC 代码，确认可以攻击 Linux 发行版。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-9ef2f1befa040312fa6202ca9fe080882f7.png" referrerpolicy="no-referrer"></p><p>上文提到的 GLIBC_TUNABLES 环境变量旨在微调和优化与 glibc 相关的应用程序，是开发者和系统管理员的必备工具。它的滥用会广泛影响系统性能、可靠性和安全性。</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:49:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260786/glibc-ld-nasty-root-bug</guid>
            <link>https://www.oschina.net/news/260786/glibc-ld-nasty-root-bug</link>
            <author>
                <![CDATA[来源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[再添一员！Cutefish 桌面环境成功适配 openKylin]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#222222; margin-left:0px; margin-right:0px; text-align:justify"><span><span style="color:#000000">近日，在 openKylin 社区 Cutefish SIG 成员的努力下，openKylin 开源操作系统桌面环境又迎来一个新成员—</span><strong><span style="color:#000000">Cutefish</span></strong><span style="color:#000000">。这也是继 UKUI、KDE、Xfce 和 DDE 之后，openKylin 开源操作系统支持的第五个 Linux 桌面环境，为社区用户带来更多选择。</span></span></p><div><p style="text-align:center"><img alt="" height="921" src="https://oscimg.oschina.net/oscnet/up-e557c73aea5afb59e398f92bd116adde5c1.png" width="1637" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000"><span style="background-color:#f0f3ff">Cutefish 是一款简洁、美观、实用的桌面环境，为用户提供舒适的界面与优秀的用户体验，能够满足各种场景下的使用需求。</span></span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">除 X86 环境外，openKylin 社区 Cutefish SIG 也完成了 Cutefish 桌面环境对 openKylin 操作系统 ARM 架构板卡的适配。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-f2576a6dd2921f794fe704e744966b24dc3.jpg" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">同时，在赛昉科技和 RISC-V SIG 的帮助下，Cutefish SIG 成功将 Cutefish 桌面移植到 VisionFive2。</span></span></p><div><p style="text-align:center"><img alt="" src="https://oscimg.oschina.net/oscnet/up-48c1c00d01962014df6b292dc18001b4b32.jpg" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">截至目前，已完成 Cutefish 软件包的移植工作，并经 Cutefish SIG 成员测试可流畅运行桌面及其特色应用。欢迎大家在 openKylin 上安装和体验 Cutefish 桌面环境。</span></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#2589fb">安装方式</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">1.添加每日构建源</span></strong></span></p><pre><code><span style="color:#114ba6">deb</span> http://archive.build.openkylin.top/openkylin yangtze-proposed main</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">2.更新源</span></strong></span></p><pre><code>sudo apt <span style="color:#114ba6">update</span> &amp;&amp; sudo apt <span style="color:#114ba6">upgrade</span></code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">3.搜查 Cutefish 软件包</span></strong></span></p><pre><code>sudo apt-<span style="color:#114ba6">cache</span><span style="color:#114ba6">search</span> cutefish</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">4.安装</span></strong></span></p><pre><code>sudo apt <span style="color:#114ba6">install</span> cutefish-core cutefish-dock cutefish-daemon 
cutefish-qt-plugins cutefish-calculator cutefish-debinstaller 
cutefish-filemanager cutefish-launcher cutefish-screenlocker 
cutefish-<span style="color:#114ba6">settings</span> cutefish-statusbar cutefish-terminal cutefish-videoplayer 
cutefish-wallpapers cutefish-<span style="color:#114ba6">cursor</span>-themes cutefish-gtk-themes 
cutefish-sddm-theme  fishui libcutefish</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:left"><span><strong><span style="color:#000000">5.切换桌面</span></strong></span></p><div><p style="text-align:center"><img alt="" height="794" src="https://oscimg.oschina.net/oscnet/up-05f1ddfabb6c84942d02a3c851f48b47a92.png" width="1277" referrerpolicy="no-referrer"></p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:center"><span><strong><span style="color:#ffffff"><span style="background-color:#2589fb">关于 Cutefish SIG</span></span></strong></span></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:justify"><span><span style="color:#000000">Cutefish 是一款简洁、美观、实用的桌面环境，Cutefish SIG 致力于维护 Cutefish 相关组件，如桌面、启动器、任务栏、控制中心、窗口管理器等，给 openKylin 提供美观易用的桌面环境。</span></span></p><ul><li><span><span style="color:#000000">SIG 主页：</span></span></li><li><span><span style="color:#0052ff">https://gitee.com/openkylin/community/tree/master/sig/Cutefish</span></span></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:07:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260772</guid>
            <link>https://www.oschina.net/news/260772</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[SecZone 每日安全资讯（2023.10.08）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>环球动态<br> 1.Microsoft 将在 Windows 11 中引入密钥支持功能<br> 作为 Windows 11 重大更新的一部分，微软今天推出了密钥支持功能。用户将能使用设备 PIN 或生物识别信息登录网站和应用，而无需提供用户名和密码。【Microsoft is Rolling out Support for Passkeys in Windows 11 (thehackernews.com)】</p><p>2.黑客利用零点字体伪装成 Microsoft Outlook 诱骗显示虚假的 AV 扫描警报<br> 黑客正在利用零点字体在电子邮件中的新型技巧，使恶意邮件看起来像是 Microsoft Outlook 中的安全工具发出的扫描警报。这是首次记录到 ZeroFont 网络钓鱼技术以这种方式的使用。【针对 Microsoft 365 的钓鱼即服务平台 Greatness - FreeBuf 网络安全行业门户】</p><p>3. 谷歌为攻击中利用的 libwebp 漏洞分配了新的最高 CVE 编号<br> 谷歌已经为最近被攻击利用的 libwebp 安全漏洞分配了新的最高 CVE 编号（CVE-2023-5129）。这个零日漏洞在两周前修补过。【VMware Aria Operations for Networks 远程代码执行漏洞（CVE-2... - FreeBuf 网络安全行业门户】</p><p>4. 新的 AtlasCross 黑客冒充美国红十字会发送网络钓鱼诱饵<br> 「AtlasCross」新黑客组织冒充美国红十字会，针对有网络钓鱼诱饵的组织发送后门恶意软件。【Access denied | www.bleepingcomputer.com used Cloudflare to restrict access】</p><p>5. 苹果谷歌漏洞披露不充分，使腾讯 QQ 等数百万应用面临潜在风险<br> 安全研究员指出，苹果和谷歌近期披露的产品零日漏洞不完整，可能隐藏了一个上游开源库 libwebp 的漏洞，使腾讯 QQ 等数百万应用面临「巨大的盲点」，处于被攻击的危险之中。【苹果谷歌漏洞披露不完整，让腾讯 QQ 等数百万应用处于危险之中 - 安全内参 | 决策者的网络安全知识库 (secrss.com)】</p><p>6.科技巨头们联手成立了 PQC 联盟以推动量子密码学的应用<br> 微软、IBM Quantum、MITRE、PQShield、SandboxAQ 和滑铁卢大学等科技巨头联手启动了 PQC 联盟，旨在推动量子密码学在商业及开源领域的应用。Shor 算法作为构建所有非对称加密的基础，正受到量子计算的威胁。【Tech Giants Launch Post-Quantum Cryptography Coalition - Infosecurity Magazine (infosecurity-magazine.com)】</p><p>安全大爆料<br> 1. 加拿大的 Flair Airlines 公司在其用户数据保护方面存在严重问题<br> 根据 Cybernews 的研究团队的发现，加拿大的 Flair Airlines 公司在其用户数据保护方面存在着严重的问题。他们发现，该公司在处理敏感数据库和电子邮件地址凭据的过程中，竟然将它们保留了下来长达至少七个月的时间。这种情况无疑增加了乘客个人信息（如电子邮件、姓名或地址）被不法分子利用的风险。这不仅对乘客的个人隐私构成了威胁，也对他们的安全带来了潜在的风险。【Canadian Flair Airlines left user data leaking for months (securityaffairs.com)】</p><p>2. 科威特财政部遭.HYSIDA 勒索软件组织攻击<br> 财政部在今天黎明时分宣布，其一个系统遭到了恶意软件的黑客攻击。尽管系统和保护程序已经启动并停用，但该部仍在评估这次未遂黑客攻击的程度。此外，财政部还确认，工资转移程序不会受到这次网络攻击的影响，因为政府的财务系统是独立的。【The Rhysida ransomware group hit the Kuwait Ministry of Finance (securityaffairs.com)】</p><p>3. 3 万新生儿和孕期护理患者的数据泄露事件影响了 BORN ONTARIO<br> "BORN（更好的结果注册和网络）受到了网络安全漏洞的影响，这个漏洞是由我们使用的软件 Progress MOVEit 在执行安全文件传输时触发的全球性漏洞所导致。"【BORN Ontario data breach impacted 3.4 million newborns and pregnancy care patients (securityaffairs.com)】</p><p>4. 影子辛迪加：与 7 个勒索软件家族有关的新兴网络犯罪组织<br> 网络安全专家揭示了一个名为 ShadowSyndicate（前身为 Infra Storm）的新网络犯罪组织，该组织在过去一年中可能利用了多达七个不同的勒索软件家族。【ShadowSyndicate: A New Cybercrime Group Linked to 7 Ransomware Families (thehackernews.com)】</p><p>5. JetBrains TeamCity 的漏洞可能让攻击者获得源代码和构建管道的访问权限<br> 没有经过身份验证的攻击者可以利用 JetBrains TeamCity CI/CD 软件中的一个关键安全漏洞，在受影响的系统上远程执行代码。【Critical JetBrains TeamCity Flaw Could Expose Source Code and Build Pipelines to Attackers (thehackernews.com)】</p><p>6. 网络钓鱼者利用 Facebook 直播假货作为诱饵<br> NCC 警告称，「航海狂人」可能很容易被虚假的社交媒体帖子所诱惑，一些受害者甚至可能在不知不觉中成为了犯罪分子的新兵，以获取整齐的 Facebook 帐户详细信息。【Critical JetBrains TeamCity Flaw Could Expose Source Code and Build Pipelines to Attackers (thehackernews.com)】</p><p>前沿资讯<br> 1. macOS 平台上出现的新型信息窃密软件：MacStealer<br> 信息窃密恶意软件 MacStealer 能够对最新版本的 macOS 造成威胁，并且使用了 Telegram 作为 C&amp;C 信道来窃取受害者的敏感数据。【macOS 平台新出现的信息窃密软件：MacStealer_网络安全小肖的博客-CSDN 博客】</p><p>2. 零信任技术架构：SDP2.0 的中文改写版<br> "在零信任技术架构中，本质上没有太大的区别。在实际的客户环境中，我们需要根据具体情况有侧重点地进行建设，例如优先加强端点零信任能力（SDP 架构）、身份认证零信任能力（IAM 架构）或东西向流量的零信任能力（MSG 架构）等。"【白话零信任技术架构之 SDP2.0 - FreeBuf 网络安全行业门户】</p><p>3. 0day 审计：某微代码审计案例的中文改写版本<br> 这个方法是继承了 extends MobileAction 并通过 http 请求获取 action 参数，然后进行全局 jsp 文件搜索 SkinAction，发现通过了 jionActionUrl 方法调用，在第 2 行包含了&lt;%@ include file="/mobilemode/init.jsp"%&gt;，根据里方法构造出路径。【0day 审计之某微代码审计-腾讯云开发者社区-腾讯云 (tencent.com)】</p></div>
                                    ]]>
            </description>
            <pubDate>Sun, 08 Oct 2023 03:06:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/260771</guid>
            <link>https://www.oschina.net/news/260771</link>
            <author>
                <![CDATA[来源: 投稿]]>
            </author>
        </item>
    </channel>
</rss>
