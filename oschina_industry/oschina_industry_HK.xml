<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Fri, 24 Nov 2023 14:46:40 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 基於 Electron 的 Android 投屏工具 Escrcpy]]>
            </title>
            <description>
                <![CDATA[<div><img src="https://gitee.com/viarotel-org/escrcpy/raw/main/electron/resources/build/logo.png" alt="viarotel-escrcpy" referrerpolicy="no-referrer"></div><h1><a id="user-content-escrcpy" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#escrcpy"></a>Escrcpy</h1><p>📱 使用圖形界面的 Scrcpy 顯示和控制您的 Android 設備，由 Electron 驅動。<a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fblob%2Fmain%2FREADME.md">English Document</a></p><div><img src="https://gitee.com/viarotel-org/escrcpy/raw/main/screenshots/zh-cn/overview.jpg" alt="viarotel-escrcpy" referrerpolicy="no-referrer"></div><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Ftree%2Fmain%2Fscreenshots%2Fzh-cn">更多截圖</a></p><h2><a id="user-content-特點" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%89%B9%E7%82%B9"></a>特點</h2><ul><li>🏃 同步：得益於 Web 技術，將更快速的與 Scrcpy 保持同步</li><li>💡 定製化：支持對多個設備偏好進行獨立配置，並且能夠添加備註以及導入導出所有配置的功能</li><li>🔗 反向供網：集成了 Gnirehtet 反向供網功能</li><li>🎨 主題：支持淺色模式和深色模式，跟隨系統切換</li><li>😎 輕巧度：本機支持，僅顯示設備屏幕</li><li>⚡️ 性能：30~120 幀每秒，取決於設備</li><li>🌟 質量：1920×1080 或更高</li><li>🕒 低延遲：35~70 毫秒</li><li>🚀 快速啓動：顯示第一張圖片僅需約 1 秒鐘</li><li>🙅‍♂️ 非侵入性：不會在安卓設備上留下任何安裝文件</li><li>🤩 用户收益：無需賬户、無廣告、無需互聯網連接</li><li>🗽 自由：免費且開源軟件</li></ul><h2><a id="user-content-獲取軟件包" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%8F%96%E8%BD%AF%E4%BB%B6%E5%8C%85"></a>獲取軟件包</h2><p><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Freleases">查看發佈地址</a></p><h2><a id="user-content-快速上手" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B"></a>快速上手</h2><h3><a id="user-content-usb-連接" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#usb-%E8%BF%9E%E6%8E%A5"></a>USB 連接</h3><blockquote><p>注意：如果手機上提示調試授權請點擊允許</p></blockquote><ol><li>安卓手機需開啓開發者模式並打開 USB 調試</li><li>打開 Escrcpy 並將安卓手機連接到你的電腦</li><li>這時 Escrcpy 設備列表應該已經檢測到你的手機，點擊開始鏡像</li><li>開始享受吧</li></ol><h3><a id="user-content-wifi-連接" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#wifi-%E8%BF%9E%E6%8E%A5"></a>WIFI 連接</h3><blockquote><p>注意：如果首次無線連接失敗，你可能需要無線配對請參閲 <a href="https://gitee.com/viarotel-org/escrcpy#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">常見問題</a></p><p>注意：需同時開啓無線調試功能，並在無線調試頁面中獲取你的當前設備的無線地址（通常為你連接 WIFI 時分配的 IP 地址）及端口號（默認為 5555）</p></blockquote><ol><li>同 USB 連接中的 1-2 步驟</li><li>將獲取到的設備 IP 地址及端口號填寫到 Escrcpy 中，然後點擊連接設備</li><li>這時 Escrcpy 設備列表應該已經檢測到你的手機，點擊開始鏡像</li><li>開始享受吧</li></ol><h3><a id="user-content-macos--linux" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos--linux"></a>macOS &amp;&amp; Linux</h3><blockquote><p>注意：這些平台沒有集成 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy">Scrcpy</a> 需要手動安裝</p></blockquote><ol><li>Linux 可參閲的 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Flinux.md">安裝文檔</a></li><li>macOS 可參閲的 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Fmacos.md">安裝文檔</a></li><li>安裝上述依賴成功後步驟同 USB 連接，和 WIFI 連接</li></ol><h3><a id="user-content-gnirehtet-反向供網" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#gnirehtet-%E5%8F%8D%E5%90%91%E4%BE%9B%E7%BD%91"></a>Gnirehtet 反向供網</h3><blockquote><p>注意: macOS 內部沒有集成如需使用需要手動安裝 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fgnirehtet">安裝文檔</a></p></blockquote><p>Windows 及 Linux 端內部集成了 Gnirehtet， 用於提供 PC 到安卓設備的反向供網功能。</p><h2><a id="user-content-快捷鍵" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%BF%AB%E6%8D%B7%E9%94%AE"></a>快捷鍵</h2><p>請參閲 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2Fdoc%2Fshortcuts.md">scrcpy/doc/shortcuts</a></p><h2><a id="user-content-設備交互欄" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E4%BA%A4%E4%BA%92%E6%A0%8F"></a>設備交互欄</h2><ul><li>切換鍵</li><li>主屏幕鍵</li><li>返回鍵</li><li>通知欄</li><li>電源鍵</li><li>重啓設備</li><li>截取屏幕</li><li>安裝應用</li><li>反向供網（Gnirehtet）</li></ul><h2><a id="user-content-偏好設置" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%81%8F%E5%A5%BD%E8%AE%BE%E7%BD%AE"></a>偏好設置</h2><blockquote><p>持續完善中，目前支持以下常用配置</p></blockquote><h3><a id="user-content-通用" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%80%9A%E7%94%A8"></a>通用</h3><ul><li>Adb 路徑</li><li>Scrcpy 路徑</li><li>文件存儲路徑（音視頻錄製及設備截圖都保存在這裏）</li><li>Gnirehtet 路徑</li><li>Gnirehtet 修復</li><li>Scrcpy 追加參數</li><li>更換主題</li><li>調整語言</li><li>開啓調試</li></ul><h3><a id="user-content-視頻控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%A7%86%E9%A2%91%E6%8E%A7%E5%88%B6"></a>視頻控制</h3><ul><li>分辨率</li><li>比特率</li><li>刷新率</li><li>視頻編碼</li><li>屏幕旋轉</li><li>屏幕裁剪</li><li>顯示器</li><li>視頻緩衝</li><li>接收器 (v4l2) 緩衝</li></ul><h3><a id="user-content-設備控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E6%8E%A7%E5%88%B6"></a>設備控制</h3><ul><li>展示觸摸點</li><li>保持清醒</li><li>控制時關閉屏幕</li><li>控制結束關閉屏幕</li><li>控制時停止充電</li></ul><h3><a id="user-content-窗口控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%AA%97%E5%8F%A3%E6%8E%A7%E5%88%B6"></a>窗口控制</h3><ul><li>無邊框模式</li><li>全屏模式</li><li>始終位於頂部</li><li>禁用屏幕保護</li></ul><h3><a id="user-content-音視頻錄製" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%9F%B3%E8%A7%86%E9%A2%91%E5%BD%95%E5%88%B6"></a>音視頻錄製</h3><ul><li>錄製格式</li><li>錄製時長</li><li>錄製視頻方向</li><li>禁用視頻錄製</li><li>禁用視頻播放</li><li>禁用音頻錄製</li><li>禁用音頻播放</li></ul><h3><a id="user-content-音頻控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%9F%B3%E9%A2%91%E6%8E%A7%E5%88%B6"></a>音頻控制</h3><ul><li>音頻源</li><li>音頻編碼</li><li>音頻比特率</li><li>音頻緩衝</li><li>音頻輸出緩衝</li></ul><h3><a id="user-content-otg" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#otg"></a>OTG</h3><ul><li>啓用 OTG</li><li>僅鍵盤</li><li>僅鼠標</li></ul><h3><a id="user-content-攝像控制" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%91%84%E5%83%8F%E6%8E%A7%E5%88%B6"></a>攝像控制</h3><ul><li>啓用攝像</li><li>攝像源</li><li>攝像尺寸</li><li>攝像比例</li><li>攝像幀率</li></ul><h2><a id="user-content-下一步做什麼" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E4%B8%8B%E4%B8%80%E6%AD%A5%E5%81%9A%E4%BB%80%E4%B9%88"></a>下一步做什麼？</h2><blockquote><p>優先級從高到低</p></blockquote><ol><li>用户界面進行優化，製作合適的 Logo ✅</li><li>內置的軟件更新功能 ✅</li><li>錄製和保存音視頻 ✅</li><li>添加設備快捷交互控制欄 ✅</li><li>支持自定義 Adb 及 Scrcpy 依賴 ✅</li><li>支持自定義設備名稱，以及偏好設置的導出及導入 ✅</li><li>定製化，支持對單個設備進行獨立配置 ✅</li><li>添加 macOS 及 linux 操作系統的支持 ✅</li><li>支持國際化 ✅</li><li>對深色模式的支持 ✅</li><li>添加 Gnirehtet 反向供網功能 ✅</li><li>添加新的相機鏡像相關功能 ✅</li><li>更好的多屏協同 ✅</li><li>設備交互欄添加更多功能：文件推送、旋轉屏幕、音頻控制等功能 ✅</li><li>支持批量連接歷史設備功能 ✅</li><li>支持使用內置終端執行自定義命令 ✅</li><li>添加獨立的剪切板同步功能 🚧</li><li>支持通過界面從設備下載選中的文件 🚧</li><li>支持對設備進行分組，以及按組進行批量操作 🚧</li><li>添加對遊戲的增強功能，如遊戲鍵位映射 🚧</li></ol><h2><a id="user-content-常見問題" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98"></a>常見問題</h2><h3><a id="user-content-電腦連接設備後無法檢測到" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E8%AE%BE%E5%A4%87%E5%90%8E%E6%97%A0%E6%B3%95%E6%A3%80%E6%B5%8B%E5%88%B0"></a>電腦連接設備後無法檢測到</h3><ol><li>請重新插拔你的設備，並確認設備同意了 USB 調試授權窗口。</li><li>如果還不行，你的電腦可能缺少必要的驅動程序，請使用第三方工具，如：驅動精靈，安裝必要的驅動後重試。</li></ol><h3><a id="user-content-無法輸入中文" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87"></a>無法輸入中文</h3><p>該問題是已知的， Scrcpy 似乎並未直接對中文輸入進行測試和支持，需要在手機端安裝第三方輸入法，以下輸入法經測試可以很好支持</p><ul><li>搜狗輸入法</li><li>QQ 輸入法</li><li>谷歌拼音輸入法</li><li>Gboard</li></ul><h3><a id="user-content-無線連接提示-目標計算機積極拒絕訪問" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%97%A0%E7%BA%BF%E8%BF%9E%E6%8E%A5%E6%8F%90%E7%A4%BA-%E7%9B%AE%E6%A0%87%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%AF%E6%9E%81%E6%8B%92%E7%BB%9D%E8%AE%BF%E9%97%AE"></a>無線連接提示： 目標計算機積極拒絕訪問</h3><p>第一次無線連接可能需要配對，或 插入 USB 以保證與電腦建立連接即授權成功後方可使用</p><h3><a id="user-content-通過數據線連接後點擊無線模式沒有反應" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E7%BA%BF%E8%BF%9E%E6%8E%A5%E5%90%8E%E7%82%B9%E5%87%BB%E6%97%A0%E7%BA%BF%E6%A8%A1%E5%BC%8F%E6%B2%A1%E6%9C%89%E5%8F%8D%E5%BA%94"></a>通過數據線連接後點擊無線模式沒有反應</h3><p>請再點一次，或點擊刷新設備，一般不會超過兩次，如果還不行，請提供機型和安卓版本信息到 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">Issues</a></p><h3><a id="user-content-設備交互控制欄為什麼不設計為自動跟蹤吸附的懸浮菜單" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%AE%BE%E5%A4%87%E4%BA%A4%E4%BA%92%E6%8E%A7%E5%88%B6%E6%A0%8F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E8%AE%BE%E8%AE%A1%E4%B8%BA%E8%87%AA%E5%8A%A8%E8%B7%9F%E8%B8%AA%E5%90%B8%E9%99%84%E7%9A%84%E6%82%AC%E6%B5%AE%E8%8F%9C%E5%8D%95"></a>設備交互控制欄為什麼不設計為自動跟蹤吸附的懸浮菜單?</h3><p>採用懸浮菜單方案不可避免地會增加對 Scrcpy 的耦合性，並增加與 Scrcpy 同步更新的難度。許多類似的 ScrcpyGUI 軟件在使用此方案後不得不投入大量精力，最終因更新困難而放棄開發。因此，綜合考慮，我們決定採用現有的方案，並期待 Scrcpy 未來能夠增加原生交互控制欄的支持。</p><h3><a id="user-content-某些設備連接鏡像後可以看到畫面但是無法操作" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%9F%90%E4%BA%9B%E8%AE%BE%E5%A4%87%E8%BF%9E%E6%8E%A5%E9%95%9C%E5%83%8F%E5%90%8E%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E7%94%BB%E9%9D%A2%E4%BD%86%E6%98%AF%E6%97%A0%E6%B3%95%E6%93%8D%E4%BD%9C"></a>某些設備連接鏡像後可以看到畫面但是無法操作</h3><blockquote><p>注意：以小米手機為例，不僅需要開啓 USB 調試還需要開啓 USB 調試（安全設置）也就是允許通過 USB 調試修改權限或模擬點擊的功能</p></blockquote><p>可供參閲的詳細説明 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy%2Fblob%2Fmaster%2FFAQ.md%23mouse-and-keyboard-do-not-work">鼠標和鍵盤不工作的原因</a></p><h3><a id="user-content-下載軟件包時提示報毒導致無法正常下載" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E4%B8%8B%E8%BD%BD%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%97%B6%E6%8F%90%E7%A4%BA%E6%8A%A5%E6%AF%92%E5%AF%BC%E8%87%B4%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%B8%8B%E8%BD%BD"></a>下載軟件包時提示報毒導致無法正常下載</h3><blockquote><p>經過反饋，有時在 Windows 環境下，由於軟件包沒有進行證書籤名，可能會被 Windows Defender 誤認為有害而導致攔截提示，可以嘗試以下解決方法</p></blockquote><ol><li>打開 <code>Windows 安全中心</code>。</li><li>選擇 <code>病毒和威脅防護</code>。</li><li>在 <code>病毒和威脅防護設置</code> 下，點擊 <code>管理設置</code>。</li><li>找到 <code>實時保護</code>，如果權限允許，可以嘗試點擊關閉。如果無法關閉實時保護，請跳過此步驟。</li><li>向下滑動頁面，找到 <code>排除項</code>，點擊 <code>添加或刪除排除項</code>。</li><li>添加您下載軟件包的文件夾路徑作為排除項，即將該文件夾添加到<code>排除列表</code>中。</li></ol><h3><a id="user-content-獲取設備列表失敗或開始鏡像錄屏報錯" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%8F%96%E8%AE%BE%E5%A4%87%E5%88%97%E8%A1%A8%E5%A4%B1%E8%B4%A5%E6%88%96%E5%BC%80%E5%A7%8B%E9%95%9C%E5%83%8F%E5%BD%95%E5%B1%8F%E6%8A%A5%E9%94%99"></a>獲取設備列表失敗或開始鏡像/錄屏報錯</h3><blockquote><p>該問題一般是 <code>Adb</code> 或 <code>Scrcpy</code> 依賴路徑錯誤導致的，可以嘗試以下解決方法</p></blockquote><ol><li>在菜單中選擇 <code>偏好設置</code>，然後在 <code>Global 模式</code> 下點擊右上角的 <code>重置配置</code>。</li><li>接下來，進入 <code>設備列表</code> 頁面，並嘗試重新開啓鏡像功能。</li><li>如果問題仍然存在，請確保您已下載並安裝了最新版本的 <code>Escrcpy</code>。</li><li>按下 <code>Ctrl</code> + <code>Shift</code> + <code>I</code> 進入開發者工具，並查看是否有任何報錯信息。</li><li>如果有報錯，請截圖並在 <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">反饋問題</a> 頁面中提交您的問題。</li></ol><h3><a id="user-content-macos-關閉窗口選擇最小化到託盤後頂部右側狀態欄找不到圖標" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos-%E5%85%B3%E9%97%AD%E7%AA%97%E5%8F%A3%E9%80%89%E6%8B%A9%E6%9C%80%E5%B0%8F%E5%8C%96%E5%88%B0%E6%89%98%E7%9B%98%E5%90%8E%E9%A1%B6%E9%83%A8%E5%8F%B3%E4%BE%A7%E7%8A%B6%E6%80%81%E6%A0%8F%E6%89%BE%E4%B8%8D%E5%88%B0%E5%9B%BE%E6%A0%87"></a>macOS 關閉窗口選擇最小化到託盤後頂部右側狀態欄找不到圖標</h3><blockquote><p>這個一般是狀態欄圖標過多導致無法展示 Escrcpy 的圖標，推薦用以下工具解決</p></blockquote><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.better365.cn%2Fibar.html">iBar</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.macbartender.com%2F">Bartender</a></li></ul><h3><a id="user-content-macos-安裝成功後打開提示文件損壞" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#macos-%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F%E5%90%8E%E6%89%93%E5%BC%80%E6%8F%90%E7%A4%BA%E6%96%87%E4%BB%B6%E6%8D%9F%E5%9D%8F"></a>macOS 安裝成功後打開提示文件損壞</h3><blockquote><p>這個通常是因為軟件包本身沒有簽名導致的，可以嘗試以下解決方法</p></blockquote><ol><li>終端中執行 <code>sudo spctl --master-disable</code> 以允許任何來源</li><li>終端中執行 <code>sudo xattr -r -d com.apple.quarantine [AppPath]</code> 以嘗試修復提示軟件包損壞</li></ol><h2><a id="user-content-獲得幫助" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%8E%B7%E5%BE%97%E5%B8%AE%E5%8A%A9"></a>獲得幫助</h2><blockquote><p>因為是開源項目，全靠愛發電，所以支持有限，更新節奏不固定</p><p>注意：非 BUG 或計劃外的需求，有償處理；至於金額，根據問題難易程度，你覺得幫助了多少，看着給吧（維護這些項目已經耗費了大量精力，還要免費花時間解答問題就説不過去了吧...所以白嫖的一律不通過。）</p></blockquote><ul><li>issues: <a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fviarotel-org%2Fescrcpy%2Fissues">反饋問題</a></li><li>email: <a href="mailto:viarotel@qq.com">viarotel@qq.com</a></li><li>weixin: viarotel</li><li>qq: 523469508</li></ul><h2><a id="user-content-致謝" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E8%87%B4%E8%B0%A2"></a>致謝</h2><p>該項目的誕生離不開以下開源項目</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fscrcpy">scrcpy</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FDeviceFarmer%2Fadbkit">adbkit</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fwww.electronjs.org%2F">electron</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fvuejs.org%2F">vue</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2FGenymobile%2Fgnirehtet%2F">gnirehtet</a></li></ul><h2><a id="user-content-支持項目" class="anchor" href="https://gitee.com/viarotel-org/escrcpy#%E6%94%AF%E6%8C%81%E9%A1%B9%E7%9B%AE"></a>支持項目</h2><blockquote><p>如果該項目幫到你的話，可以請我喝杯咖啡，讓我更有精神完善該項目 😛</p></blockquote><div><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79dcbc40246743e2b6870419e88e0392~tplv-k3u1fbpfcp-watermark.image?" alt="viarotel-wepay" referrerpolicy="no-referrer"><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e5e69b83dd746deade95afd4a6864ec~tplv-k3u1fbpfcp-watermark.image?" alt="viarotel-alipay" referrerpolicy="no-referrer"></div>]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 10:57:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/viarotel-org/escrcpy</guid>
            <link>https://gitee.com/viarotel-org/escrcpy</link>
        </item>
        <item>
            <title>
                <![CDATA[KubeSphere 社區雙週報 | Fluent Operator 2.6.0 發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>KubeSphere 社區雙週報主要整理展示新增的貢獻者名單和證書、新增的講師證書以及兩週內提交過 commit 的貢獻者，並對近期重要的 PR 進行解析，同時還包含了線上/線下活動和佈道推廣等一系列社區動態。</p><p>本次雙週報涵蓋時間為：2023.11.10-2023.11.23。</p><h2>貢獻者名單</h2><p><img src="https://oscimg.oschina.net/oscnet/up-c62e63f1bf7068d8223d3ea14620688a29f.gif" alt="" referrerpolicy="no-referrer"></p><h2>新晉 KubeSphere Contributor</h2><p>兩週內共有 1 位新晉 KubeSphere Contributor，感謝對 KubeSphere 社區的貢獻！</p><p><img src="https://oscimg.oschina.net/oscnet/up-2dfcb87266c4e5068e9628e874a6a2b57e5.png" alt="" referrerpolicy="no-referrer"></p><h2>近期更新</h2><h3>Fluent Operator</h3><p>Fluent Operator 在 2023 年 11 月 22 日發佈了 v2.6.0 版本，感謝來自全球 12 位開發者的貢獻。以下是詳細信息：</p><p>新特性（Features）：</p><ul><li>新增 Fluentbit Nginx 插件 (#924)，由 @sjliu1 提交。</li><li>新增 Fluentbit Statsd 插件 (#925)，由 @sjliu1 提交。</li><li>新增 Fluentbit Syslog 插件 (#931)，由 @sjliu1 提交。</li><li>新增 Fluentbit TCP 插件 (#936)，由 @sjliu1 提交。</li><li>新增在 Fluentd 中添加 in_sample 插件以便於測試 (#937)，由 @cw-Guo 提交。</li><li>添加 fluent-plugin-prometheus 插件到 Fluentd (#966)，由 @joshuabaird 提交。</li><li>添加 Fluentd monitor_agent 輸入插件 (#967)，由 @joshuabaird 提交。</li><li>添加 Fluentd 輸入插件 CRs (#972)，由 @MisterMX 提交。</li><li>為 Fluentd 添加 readiness 和 liveness 探針 (#980)，由 @cw-Guo 提交。</li></ul><p>增強（Enhancements）：</p><ul><li>增加 Fluentbit Daemonset HostPath 切換選項 (#926)，由 @OlegVanHorst 提交。</li><li>允許為 Fluentbit 設置 dnsPolicy (#951)，由 @L1ghtman2k 提交。</li><li>默認 cri 解析器應包含 Time_Keep On，否則輸出中不存在時間標籤 (#958)，由 @JoeDerby 提交。</li><li>使用環境文件替換已經廢棄的命令 (#970)，由 @jongwooo 提交。</li><li>升級 chart-testing-action 到 v2.6.0 (#976)，由 @benjaminhuo 提交。</li><li>允許通過 helm chart 傳遞環境變量 (#977)，由 @guerzon 提交。</li><li>按 metadata.name 對自定義資源進行排序 (#988)，由 @cw-Guo 提交。</li><li>升級 Fluentbit 到 2.2.0 (#994)，由 @wenchajun 提交。</li><li>構建和依賴更新：包括 Docker、Actions/Checkout、Golang 等的依賴更新。</li></ul><p>Bug 修復（Bug Fixes）：</p><ul><li>修復 Fluentbit Splunk 的 output 文檔 (#935)，由 @Macbet 提交。</li><li>在集羣 FluentBit helm chart 中添加 parserSelector (#956)，由 @JoeDerby 提交。</li><li>修復 Fluentd record transformer 參數 (#960)，由 @cw-Guo 提交。</li><li>修復 Fluentd in_http 插件 keepalive_timeout 選項 (#968)，由 @cw-Guo 提交。</li><li>修復 Fluentd 解析器 keep_time_key (#987)，由 @cw-Guo 提交。</li></ul><h2>社區動態</h2><ul><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.io%2Fforum%2Fd%2F22875-li-ji-bao-ming-yun-yuan-sheng-ke-guan-ce-xing-meetup-yan-zhou-zhan-1125-huo-re-kai-qi" target="_blank">火熱報名中 | 雲原生 + 可觀測性 Meetup 廣州站 11.25 準時開啓！</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fask.kubesphere.io%2Fforum%2Fd%2F22924-kuai-lai-kao-shi-na-zheng-shu-kubesphere-ge-ren-ji-neng-zhuan-ye-kao-shi-ren-zheng-shang-xian-la" target="_blank">快來考試拿證書！KubeSphere 個人技能專業考試認證上線啦！</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fnews%2Fospp-2023-summary%2F" target="_blank">開源之夏 2023 KubeSphere 社區項目總結</a></li><li><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkubesphere.io%2Fzh%2Fblogs%2Fdeploy-kubesphere-on-arm-kylin-v10%2F" target="_blank">ARM 版 Kylin V10 部署 KubeSphere 3.4.0 不完全指南</a></li></ul><blockquote><p>本文由博客一文多發平台 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopenwrite.cn%3Ffrom%3Darticle_bottom" target="_blank">OpenWrite</a> 發佈！</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 10:46:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4197945/blog/10151151</guid>
            <link>https://my.oschina.net/u/4197945/blog/10151151</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[BetterGI（更好的原神） - 開源免費的原神遊戲輔助工具]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>BetterGI ， 一個基於計算機視覺技術，意圖讓原神變的更好的項目。</p><blockquote><p>BetterGI · 更好的原神 - 自動拾取 | 自動劇情 | 全自動釣魚 (AI) | 全自動七聖召喚 | 自動伐木 | 自動派遣 | 一鍵強化 | 支持雲原神</p></blockquote><h2>功能</h2><ul><li>特色：自帶一個遮罩窗口覆蓋在遊戲界面上，用於顯示日誌和圖像識別結果。</li></ul><p><a href="https://user-images.githubusercontent.com/15783049/283518643-57ab7c3c-709a-4cf3-8f64-1c78764c364c.jpg"><img alt="" src="https://static.oschina.net/uploads/img/202311/24182139_MuR8.jpg" referrerpolicy="no-referrer"></a></p><ul><li>實時任務
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E6%8B%BE%E5%8F%96">自動拾取</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E5%89%A7%E6%83%85">自動劇情</a><ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E9%A2%86%E5%8F%96%E3%80%8E%E6%AF%8F%E6%97%A5%E5%A7%94%E6%89%98%E3%80%8F%E5%A5%96%E5%8A%B1">自動領取『每日委託』獎勵</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E9%87%8D%E6%96%B0%E6%B4%BE%E9%81%A3">自動重新派遣</a></li></ul></li><li><a href="https://bgi.huiyadan.com/doc.html#%E5%85%A8%E8%87%AA%E5%8A%A8%E9%92%93%E9%B1%BC">全自動釣魚 (AI)</a></li></ul></li><li>獨立任務
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E8%87%AA%E5%8A%A8%E4%B8%83%E5%9C%A3%E5%8F%AC%E5%94%A4">自動七聖召喚</a></li><li>自動伐木（遷移中）</li></ul></li><li>操控輔助
<ul><li><a href="https://bgi.huiyadan.com/doc.html#%E7%A9%BA%E6%A0%BC%E8%BF%9E%E5%8F%91">空格連發</a></li><li><a href="https://bgi.huiyadan.com/doc.html#f%E8%BF%9E%E5%8F%91">F 連發</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E9%82%A3%E7%BB%B4%E8%8E%B1%E7%89%B9-%E8%BD%AC%E5%9C%88%E5%9C%88">那維萊特 - 轉圈圈</a></li><li><a href="https://bgi.huiyadan.com/doc.html#%E5%9C%A3%E9%81%97%E7%89%A9%E4%B8%80%E9%94%AE%E5%BC%BA%E5%8C%96">快速聖遺物強化</a></li></ul></li></ul><p><a href="https://bgi.huiyadan.com/feat.html">更多功能</a>籌備中...</p><h2>界面截圖</h2><p><a href="https://user-images.githubusercontent.com/15783049/275204566-813570c4-3816-4850-ac16-799af4f3cc5f.png"><img alt="" src="https://static.oschina.net/uploads/img/202311/24182210_I0LO.png" referrerpolicy="no-referrer"></a></p></div>
                                                                ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 10:28:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/bettergi</guid>
            <link>https://www.oschina.net/p/bettergi</link>
        </item>
        <item>
            <title>
                <![CDATA[.NET 8 極致性能優化 Non-GC Heap]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>前言</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">.NET8 裏面 JIT 引入了一個新的機制，叫做 Non-GC Heap。JIT 可以確保相關對象分配在 Non-GC Heap 上，該堆像其名稱一樣，不受 GC 管理。JIT 需要保證這個對象沒有被 GC 引用，並且在這個對象的生命週期內一直是根對象 (不會被 GC 消滅的對象) 的狀態。原文:<strong><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485594%26idx%3D1%26sn%3D77ada645af59a4e35e1d46c2694493ac%26chksm%3Dc01c4501f76bcc17384320acd082d9951ecf8a6f321ae089aa3c4430d3cdb947795ac34e8727%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.NET8 極致性能優化 Non-GC Heap</a></strong></p><span id="OSC_h2_1"></span><h2><strong>概述</strong></h2><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">為什麼要引入這種機制？先來看一段代碼:</p><div><pre><code class="language-text">public static string GetPrefix() =&gt; "https://";
static void Main(string[] args)
{
  GetPrefix ();
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">這裏的 GetPrefix 函數返回的是一個常量字符串值，它的 ASM 如下:</p><div><pre><code class="language-text">mov  rax,185CAC02068h
mov  rax,qword ptr [rax]</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">兩個 mov 指令，第一個是對象指針的指針，第二個是對象的指針。雖然是簡單的兩個指令，但是背後的邏輯卻較為複雜，基本如下:<br> 一個字符串常量值，.NET7 裏面 JIT 也會給這個字符串常量值複製到一個堆分配到字符串對象中，返回的是對象的二級指針。因為是堆對象，可能會被 GC 移動，每次都需要獲取新的地址，頻繁增加負擔。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">這裏的問題在哪兒呢？一個字符串常量值需要這麼多的步驟操作嗎？開銷是否太大，我們是否可以簡化它呢？有一個常規的很容易想到的方法，就是把這個字符串常量值的地址給它固定起來，每次需要用到這個常量值，就直接去這個固定地址讀取，這樣行不行呢？GC 堆很明顯不能硬編碼固定。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">當然可以，做法就是把這個字符串常量值放到 POH(固定對象堆) 上，不讓 GC 移動。這樣是減少了 GC 回收的時候移動的開銷，但是並沒有從根本上解決問題，因為固定對象同樣受到 GC 的管控，上面的步驟除了不能移動一樣不少，並且 POH 不會進行根對象的處理，可能會導致它們被回收，地址指向了其它的數據，進而錯誤。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>特點</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">要徹底的解決這個問題，本篇的主角:Non-GC Heap 出場了。它有三個特點:<br> 1.JIT 要保證這個對象沒有被 GC 引用<br> 2.這個對象在生命週期內一直是根對象<br> 3.它不能是可卸載上下文的一部分</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">你可以認為 GC 堆包括:小對象堆 (SOH-小於 85000 字節的對象），大對象堆 (LOH-大於 85000 字節的對象)，固定對象堆（POH）<br> 而 No-GC Heap 超脱於 GC Heap 之外的 FOH(凍結堆)。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">JIT 現在可以避免在生成的代碼中訪問該對象時的間接尋址，而是直接硬編碼對象的地址</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">GetPrefix 函數的 ASM 在.NET8 Non-GC Heap 裏面如下:</p><div><pre><code class="language-text">mov  rax,26180000218h
C3   ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">26180000218h 為對象地址,一個 mov 直接返回。看似只簡化了一個 mov,但是實際上它這種硬編碼固定模式地址，簡化的是整個字符串常量值的原理，也就是把字符串常量值分配到 FOH 裏面，而不是 GC 堆裏。性能極大的提升自不必多説。以下測量 13 倍的性能提升。</p><div><pre><code class="language-text">Method Job Mean Ratio
GetPrefix .NET 7 1.3450 ns
GetPrefix .NET 8 0.0729 ns</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>其它 Non-GC Heap 的操作</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>一:</strong>使用 typeof(T) 生成的 RuntimeType 對象</p><div><pre><code class="language-text">public Type GetTestsType() =&gt; typeof(Tests);</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>二:</strong>空數組分配到 Non-GC Heap 上，使 Array.Empty() 更加高效</p><div><pre><code class="language-text">public string[] Test() =&gt; Array.Empty&lt;string&gt;();</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">它倆在.NET8 裏面都類似於如下 ASM，一個 mov 直接返回:</p><div><pre><code class="language-text">mov rax,1A0814EAEA8
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>三:</strong>靜態值類型字段關聯的堆對象，不包含任何 GC 引用的字段</p><div><pre><code class="language-text">public partial class Tests
{
    private static readonly ConfigurationData s_config = ConfigurationData.ReadData();
    public TimeSpan GetRefreshInterval() =&gt; s_config.RefreshInterval;
    private struct ConfigurationData
    {
        public static ConfigurationData ReadData() =&gt; new ConfigurationData
        {
            Index = 0x12345,
            Id = Guid.NewGuid(),
            IsEnabled = true,
            RefreshInterval = TimeSpan.FromSeconds(100)
        };
        public int Index;
        public Guid Id;
        public bool IsEnabled;
        public TimeSpan RefreshInterval;
    }
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">RefreshInterval .NET7 如下:</p><div><pre><code class="language-text">mov       rax,13D84001F78
mov       rax,[rax]
mov       rax,[rax+20]
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">RefreshInterval .NET8 如下:</p><div><pre><code class="language-text">mov       rax,20D9853AE48
mov       rax,[rax]
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>四:</strong>代之間的 GC 引用判斷</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">代碼:</p><div><pre><code class="language-text">public class Tests
{
    public void Write()
    {
        string dst = "old";
        Write(ref dst, "new");
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Write(ref string dst, string s) =&gt; dst = s;
}</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">Write 在.NET7 和.NET8 上生成如下:</p><div><pre><code class="language-text">call      CORINFO_HELP_CHECKED_ASSIGN_REF
nop
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">CORINFO_HELP_CHECKED_ASSIGN_REF 是一個 JIT 幫助程序函數，其中包含所謂的「GC write barrier (GC 寫屏障)」，一個小代碼片段，用於讓 GC 跟蹤正在寫入的引用，因為它可能需要知道，例如，因為正在分配的對象可能是 gen0，而目標可能是 gen2。</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">微調下這個代碼:</p><div><pre><code class="language-text">public class Tests
{
    public void Write()
    {
        string dst = "old";
        Write(ref dst);
    }

    [MethodImpl(MethodImplOptions.NoInlining)]
    private static void Write(ref string dst) =&gt; dst = "new";
}</code></pre></div><ul><li>實現的功能都是一樣的，只不過 dst 直接賦值了常量字符串，記得上面常量字符串的分配是在 Non-GC Heap 嗎？.NET7 裏面還是需要幫助函數:</li></ul><div><pre><code class="language-text">mov       rdx,1FF0E4014A0
mov       rdx,[rdx]
call      CORINFO_HELP_CHECKED_ASSIGN_REF
nop
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">然.NET8 裏面則是</p><div><pre><code class="language-text">mov       rax,1B3814EAEC8
mov       [rcx],rax
ret</code></pre></div><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">因為.NET8 意識到常量字符串是在 Non-GC Heap，不需要 GC 跟蹤判斷在那個代碼，類似於 card_table 那種。所以優化掉了 CORINFO_HELP_CHECKED_ASSIGN_REF</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><strong>往期精彩回顧:</strong></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485453%26idx%3D1%26sn%3Df7c1a6198b9e24af64a6a88b80230a76%26chksm%3Dc01c4596f76bcc80ff69ce39bc691f508a118f679d64c070e12538151dde161c4f80da935724%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.NET8 JIT 核心:分層編譯的原理</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485277%26idx%3D1%26sn%3Ddfb356778d490c11986e5134d578271a%26chksm%3Dc01c4ac6f76bc3d0f1821af547af1bdb67b6a4cff3f7611203ac4690f0f400e322294128d5c6%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">新版.Net 性能有沒有達到 C++90%?</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485350%26idx%3D1%26sn%3D6a19a00f7f86bc5802d06c99556d2a19%26chksm%3Dc01c4a3df76bc32b63f8d2530a044e8e1fc82ebfd98ddeb5002799e992e3108037ed9ad52db3%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">面試官問.Net 對象賦值為 null,就會被 GC 回收嗎?</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg5NDYwNjU4MA%3D%3D%26mid%3D2247485387%26idx%3D1%26sn%3D5ea612e6590c5d19dcd95d4ec34f007c%26chksm%3Dc01c4a50f76bc3466f7b6cad8faf26473e70ef4f3ecea8b55f0a0138b8c2100eaedc956e3acb%26token%3D721014980%26lang%3Dzh_CN%23rd" target="_blank">.Net JIT 的騷操作 DNGuard HVM 原理簡析</a></p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#121212; margin-left:0; margin-right:0; text-align:start">作者:江湖評談。公眾號:<strong>jianghupt</strong>.歡迎關注。文章首發地。</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 09:13:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/5407571/blog/10150775</guid>
            <link>https://my.oschina.net/u/5407571/blog/10150775</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[中國科學院軟件所在開源自動駕駛平台建設方面取得進展]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">中國科學院軟件研究所可信智能系統團隊在開源自動駕駛（Self-driving System）平台建設方面取得進展，構建了一個開放易用且自主可控的自動駕駛算法開發、測試、仿真與驗證平台 ISS。該成果得到中國科學院穩定支持基礎研究領域青年團隊計劃「開放環境下的可信智能算法」項目支持。</span></p><p><span style="color:#000000">根據介紹，ISS 平台基於模塊化的框架並以依賴庫較少的方式實現了涵蓋自動駕駛全流程（包括感知、建圖、定位、預測、規劃與控制等）的幾十種基準算法（如圖 1 所示），使用簡單、易於擴展，可以為科研人員開展自動駕駛相關研究提供基礎平台支撐。</span></p><p><img alt="" height="329" src="https://oscimg.oschina.net/oscnet/up-bf752988659c49e05377c82e311313f3fb6.png" width="500" referrerpolicy="no-referrer"></p><p><em><span style="color:#000000">圖 1. ISS 平台架構</span></em></p><p><span style="color:#000000">ISS 平台具體實現了以下六大模塊功能。</span></p><ul><li><span style="color:#000000">傳感器模塊：基於 CARLA 仿真器支持了常用的傳感器；</span></li><li><span style="color:#000000">感知模塊：基於深度學習方法實現了 2D 檢測、2D 語義分割、Bev 地圖生成、3D 目標檢測等感知任務；</span></li><li><span style="color:#000000">預測模塊：實現了勻速運動預測和基於 Motion Transformer 的預測；</span></li><li><span style="color:#000000">定位模塊：實現了基於激光雷達、慣性測量單位、全球定位系統等的單傳感器定位和基於卡爾曼濾波器等過濾器的多傳感器融合定位；</span></li><li><span style="color:#000000">規劃模塊：實現了基於 Lanelet2 的 FloodFill 路線規劃算法、基於規則的行為規劃算法、基於 Lattice Planner 和 EM Planner 的運動規劃算法；</span></li><li><span style="color:#000000">控制模塊：實現了經典的 PID 和 MPC 控制算法。</span></li></ul><p><img alt="" height="191" src="https://oscimg.oschina.net/oscnet/up-67074db82f46cb368c7d1d3418d532cc664.png" width="500" referrerpolicy="no-referrer"></p><p><em><span style="color:#000000">圖 2. ISS 平台在 CARLA 仿真平台的 2D、3D 感知效果</span></em></p><p><span style="color:#000000">目前，已有來自國防科技大學、西南大學、奧地利數字安全實驗室、德國薩爾大學等國內外知名高校的科研團隊利用 ISS 平台進行研究。</span></p><p><span style="color:#000000">軟件所可信智能系統團隊後續將對 ISS 平台各個模塊的功能繼續進行擴展完善，包括加入自動駕駛可解釋性分析、安全性驗證、物理小車及聯合仿真等功能。ISS 平台有望成為該領域有影響力的開源基礎支撐平台，為國內外自動駕駛與可信人工智能等方向的研究團隊提供支持。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 09:03:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/268000</guid>
            <link>https://www.oschina.net/news/268000</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Blender 連續 5 天遭受大規模 DDoS 攻擊]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">Blender 發佈<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.blender.org%2Fnews%2Fcyberattack-november-2023%2F" target="_blank">公告稱</a>，blender.org 網站在 2023 年 11 月 18 日至 23 日期間持續受到 DDoS 攻擊，攻擊者通過不斷髮送請求致使網站服務器超載而癱瘓，導致網站運營嚴重中斷。除了 blender.org 主網站外，其他一些服務也無法使用。</span></p><p><span style="color:#000000">該攻擊由具有數百個 IP 地址的殭屍網絡執行，發送超過 15 億個惡意請求，峯值速率為 10 萬 rps（每秒請求）。網站斷斷續續的可用了幾天，但即使在攻擊者暫停攻擊的短時間內，Blender 的基礎設施仍然因大量待處理的合法請求而超載，導致服務器難以跟上。</span></p><p><span style="color:#000000">在經過四天的抵禦攻擊之後 (11 月 21 日) 後，Blender 決定將其網站轉移到了 CloudFlare，以減少攻擊的影響。目前尚未有人聲稱對這次襲擊負責，動機也未知。</span></p><p><span style="color:#000000">Blender 方面表示，此次攻擊的重點是拒絕服務，項目和用户數據未受影響。</span></p><p><span style="color:#000000">攻擊事件的具體時間線如下：</span></p><blockquote><ul><li><span style="color:#000000"><strong>2023-11-18&nbsp;</strong>blender.org 網站上初步展現出惡意流量的跡象，通過阻止違規地址得到緩解。</span></li><li><span style="color:#000000"><strong>2023-11-19 </strong>惡意流量加劇，導致 blender.org 網站的可用性間歇性中斷。</span></li><li><span style="color:#000000"><strong>2023-11-20 </strong>由於流量過大，blender.org 的一些服務（開發者論壇、維基等）無法使用。屏蔽 IP 範圍不再有效。</span></li><li><span style="color:#000000"><strong>2023-11-21 </strong>攻擊達到全面規模，需要完全停止 blender.org 服務。決定轉而使用專門的 DDoS 緩解服務。當日結束時，blender.org 網站恢復正常運行。</span></li><li><span style="color:#000000"><strong>2023-11-22 01:30 </strong>攻擊仍在持續，峯值為每分鐘超過 500 萬個請求。雖然 www.blender.org 的大部分功能已恢復正常，但仍存在一些問題：</span><ul><li><span style="color:#000000">用户在訪問網站之前可能會面臨一個「challenge」，以驗證自己不是機器人</span></li><li><span style="color:#000000">由於技術原因，blender.org（不帶 www）仍然無法訪問。用户想訪問 Blender.org，需確保正確輸入 www.blender.org</span></li><li><span style="color:#000000">有幾個站點仍然不可用（代碼、開發人員、文檔、devtalk、下載、wiki 等），開發人員繼續努力恢復。 </span></li></ul></li><li><span style="color:#000000"><strong>2023-11-22 10:30&nbsp;</strong>攻擊已經停止。blender 繼續致力於恢復所有其他受影響站點。</span></li><li><span style="color:#000000"><strong>2023-11-22 20:30 </strong>所有 blender.org 站點均已恢復在線並正常運行。但以此同時，另一次攻擊又已經開始。</span></li><li><span style="color:#000000"><strong>2023-11-23 20:30</strong> 攻擊已經停止。總共有超過 2.1B 個請求 (高達 100K rps) 得到了緩解。blender 認為該問題已解決，並且只有在 blender.org 上的用户體驗受到影響時才會進一步報告。</span>&nbsp;</li></ul></blockquote><p><img alt="" height="288" src="https://oscimg.oschina.net/oscnet/up-affc1ae024c2e2724c7542ba5f0d983081b.png" width="500" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><span style="color:#000000">Blender 是一款免費開源的跨平台 3D 創作套件。使用 Blender，你可以創建 3D 可視化效果，例如靜止圖像，3D 動畫，VFX 快照和視頻編輯。它非常適合那些受益於其統一管線和響應式開發過程的個人和小型工作室。與其他 3D 建模工具相比，Blender 對內存和驅動的需求更低。其界面使用 OpenGL，在所有支持的硬件與平台都能提供一致的用户體驗。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 08:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267990/blender-cyberattack-2023</guid>
            <link>https://www.oschina.net/news/267990/blender-cyberattack-2023</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[eBPF 的發展演進 --- 從石器時代到成為神（一）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h2_1"></span><h2><span><span>1. 前言</span></span></h2><div><div><span><span>技術的發展往往是積跬步而至千里的。Linux 從 92 年誕生，發展至今已經覆蓋大小各類的信息基礎設施。是什麼樣的力量，讓 Linux 能夠始終保持發展活力，又如何看待 Linux 之上出現的新的技術趨勢？</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>本文試圖通過梳理 eBPF 的演進過程，探索 Linux 內核的發展動力來源與發展軌跡，與大家一同暢想 eBPF 給內核技術、Linux 生態帶來的全新變局。</span></span></div><div>
   &nbsp; 
 </div></div><span id="OSC_h2_2"></span><h2><span><span>2. eBPF 概覽</span></span></h2><div><span><span>2.1. </span></span><strong><span>實現原理</span></strong></div><div>
  &nbsp; 
</div><div><div><span><span>大家可能都知道圖靈機，這是一個可計算理論模型，可以用來判斷計算機的計算能力。圖靈機是目前有可能實現的計算能力最強的理論模型，目前我們常用的計算機，理論上都是等價於圖靈機的。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出現，是對計算能力的渴求，其原理就是通過 IR 模擬一台 RISC 指令集的計算機嵌入到內核中，將內核內部的靜態編譯邏輯轉變為更加靈活的動態編譯邏輯，使內核獲得近似於圖靈機的動態邏輯定製能力。而從 classic BPF 到 extended BPF 的發展，是將這一計算方式進一步夯實和通用化。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>BPF 的出現乃至到 eBPF 的進一步發展，為內核帶來了巨大的改變，使內核具備了更加強大、可編程的動態變化的能力。這種能力在各種需要定製化的應用場景中，將發揮巨大的價值，既可以用於擴展功能，也可以用於優化性能。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在實現上，為適應不同業務場景的需求，使 eBPF 具備等價於一台 RISC 指令集計算機的計算能力，通過輸入參數、Map 數據存儲、Helper 幫助函數，構成了 eBPF 程序與內核交互的運行環境。eBPF 指令集的計算和控制能力、運行環境與內核的交互能力，兩者疊加構成了 eBPF 程序強大的處理能力。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>在安全方面，通過 Verifier 嚴格檢查 eBPF 程序的可完成性、數據訪問的合法性等，保證了 eBPF 程序與內核交互過程中內核不被掛起、核心數據不會被破壞。</span></span></div></div><div><div><span><span>BPF 發展過程中，由 cBPF 發展成為 eBPF 是一次大的技術升級。eBPF 在 cBPF 的基礎上重新設計了指令集、引入了 JIT、增加了輔助函數，大大擴展了複雜邏輯的設計能力。雖然 eBPF 有巨大的進步，但是基本的底層設計還是一致的，因此兩者統稱為 BPF。</span></span></div><div>
   &nbsp; 
 </div></div><div><div><span><span>由於 eBPF 兼容 cBPF，在未指定時，BPF 更多指 eBPF 所定義的內涵。後文用 BPF 泛指整個 BPF 相關的基礎機制，eBPF 特指最新的 BPF 標準。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.2. </span></span><strong><span>技術特點</span></strong></div><div><div><span><span>BPF 還在快速發展，它的計算能力和完備性也在迅速提高，前景無限。但就具體的版本而言，卻又呈現具體技術特點，主要是其支持的能力和受到的約束兩個方面。以最新的 BPF 的技術標準 (v6.1) 為藍本，介紹 BPF 的主要技術特點。</span></span></div><div>
   &nbsp; 
 </div></div><ul><li><div><span><span>RISC 指令集</span></span></div></li></ul><div><div><span><span>BPF 的核心是一個虛擬計算機，它採用類 RISC 指令集，支持跳轉、算數運算、尾調用等基本操作。在運行 BPF 程序的計算機上，BPF 指令會被內核的 JIT 編譯器動態編譯為物理機原生指令，實現運行效率的「零」損耗。在支持 BPF 卸載的設備上，BPF 程序也可以卸載到設備上執行。在 BPF 的指令集中還支持偽調用指令，可以調用到內核幫助函數。</span></span></div></div><div><div><span><span>同時，BPF 的指令的編碼空間中還有大量的儲備，未來根據需要一定還會繼續增加指令，提升 BPF 實現複雜邏輯的能力。</span></span></div></div><ul><li><div><span><span>Map</span></span></div></li></ul><div><div><span><span>基於鍵值對的數據存儲機制，可用於實現內核、用户態的數據存儲和交換。</span></span></div></div><ul><li><div><span><span>Helper 函數</span></span></div></li></ul><div><div><span><span>專用於 BPF 程序調用的函數接口，用於封裝內核中的功能，使 BPF 程序可以和內核互操作，同時保持 BPF 程序和內核的安全隔離。</span></span></div></div><ul><li><div><span><span>BPF 子程序</span></span></div></li></ul><div><div><span><span>實現了 BPF 程序之間的調用。</span></span></div></div><ul><li><div><span><span>上下文</span></span></div></li></ul><div><div><span><span>BPF 程序的語境和運行上下文，是一種內部透明的數據結構。只有在明確 BPF 程序的類型時，上下文的定義和內部數據結構才是確定的。不同的 BPF 程序類型，上下文也各不相同。</span></span></div></div><ul><li><div><span><span>CO-RE</span></span></div></li></ul><div><div><span><span>通過運行時類型支持，實現一次編譯、隨處運行。</span></span></div></div><ul><li><div><span><span>支持特權和非特權級兩類運行模式</span></span></div></li></ul><div><div><span><span>分為特權級（百萬 ins）和非特權級（4096ins）兩類運行方式。</span></span></div></div><div><div><span><span>特權級模式下 BPF 程序可以獲得更寬的權限，實現更復雜的邏輯功能。</span></span></div></div><ul><li><div><span><span>保證向後兼容</span></span></div></li></ul><div><div><span><span>這一原則對於 BPF 的推廣應用非常重要，可以保證舊標準的 BPF 程序在新標準下也可以正確執行。但同時，也對未來 BPF 發展帶來了約束，只有把握好 BPF 的發展方向，做好底層設計，才能兩者得到兼顧。</span></span></div></div><div><div><span><span>比如，從老版本遺留下來的 cBPF 程序在 eBPF 中都會被 JIT 正確翻譯和執行。</span></span></div></div><ul><li><div><span><span>穩定的 ABI</span></span></div></li></ul><div><div><span><span>BPF 穩定的 ABI 包括，BPF 程序類型對應的輸入參數定義，可調用的內核幫助函數定義，返回值定義等。使用穩定的 ABI 的 BPF 程序，可保證與不同版本的內核都是兼容的。</span></span></div></div><div><div><span><span>另外，BPF 還在快速發展中，它的功能特性需要逐步釋放，因此目前還有諸多限制，其中有些是基於安全、可靠性考慮，有些是沒有超出範圍的應用需求的保守設計等等。隨着安全機制的完善、應用程序的擴展、生態體系的成熟，相應的限制也會逐步的改變。</span></span></div></div><div><div><span><span>目前的實現中，有如下限制：</span></span></div></div><ul><li><div><span><span>總運行時間有界</span></span></div></li></ul><div><div><span><span>有界性這是基本原則，應該在比較長的時間內都不會改變。但是，在不改變有界性的前提下，根據具體需要適當調整更合理的上限，這是存在極大可能的。</span></span></div></div><ul><li><div><span><span>指令總數限制</span></span></div></li></ul><div><div><span><span>非特權用户最大指令數 4096，特權用户最大指令數 1 百萬。</span></span></div></div><ul><li><div><span><span>分支數限制</span></span></div></li><li><div><span><span>BPF 調用嵌套層次限制</span></span></div></li><li><div><span><span>Map 實例數限制</span></span></div></li><li><div><span><span>驗證狀態數限制</span></span></div></li><li><div><span><span>最大分支數限制</span></span></div></li><li><div><span><span>堆棧長度限制</span></span></div></li></ul><div><div><span><span>目前支持的堆棧最大長度為 512 字節。</span></span></div></div><ul><li><div><span><span>上下文限制</span></span></div></li></ul><div><div><span><span>每一種類型的 BPF 程序，都有其對應輸入參數定義，彼此不同。也就是説，BPF 程序只能接受特定的輸入並進行處理，不能訪問內核的全部狀態空間。</span></span></div></div><ul><li><div><span><span>輔助函數限制</span></span></div></li></ul><div><div><span><span>每一個 BPF 程序類，都有其對應的輔助函數集合。這些輔助函數，由內核各子系統提供，是 BPF 程序類上下文的一部分。它們幫助 BPF 程序與內核各子系統交互，同時又保護內核不會被破壞。</span></span></div></div><div><div><span><span>上面贅述了很多特性，大家可能會有很多疑問，比如：</span></span></div></div><div><div><span><span>為什麼採用精簡指令集呢？因為這是目前最主流的指令集類型，相對於複雜指令集，精簡指令集更有利於實現更高密度、更高吞吐量、更高主頻的處理器。因此 x86 之後出現的新型指令集系統，絕大多數都是精簡指令集，包括現在的開源指令集 RISC-V。</span></span></div></div><div><div><span><span>為什麼不採用原生的指令集呢？</span></span></div></div><div><div><span><span>為什麼 5 個參數寄存器呢？</span></span></div></div><div><div><span><span>本篇暫不深入討論，後續主題涉及到的時候再詳細講解。</span></span></div><div>
   &nbsp; 
 </div></div><div><span><span>2.3. </span></span><strong><span>應用價值</span></strong></div><div><div><span><span>BPF 的應用價值與其動態和可定製特性強相關。</span></span></div></div><div><div><span><span>內核研發中一直堅守的原則是：「機制與策略分離」，即：內核負責提供機制，將策略開放給上層。在機制與策略之間需要一層界面來進行交互。</span></span></div></div><div><div><span><span>系統調用是最初方案。它是單向發起的，缺少事件模型。</span></span></div></div><div><div><span><span>虛擬文件系統，提供了雙向的交互方式，但難以靈活定製複雜的邏輯。</span></span></div></div><div><div><span><span>由於軟件功能越來越複雜，無法用簡單規則來表達，軟件的基礎功能設施與業務邏輯，需要進行解偶。而業務邏輯部分，需要根據業務定製，因此很適合用 BPF 實現。比如：</span></span></div></div><ul><li><div><span><span>過濾器</span></span></div></li><li><div><span><span>權限檢查</span></span></div></li><li><div><span><span>模糊測試</span></span></div></li></ul><div><div><span><span>等類型的功能，比較適合用 BPF 實現。另外，視具體問題，也可以應用於：</span></span></div></div><ul><li><div><span><span>調度算法</span></span></div></li><li><div><span><span>用户態交互（替代系統調用，實現更加可變的服務邏輯）</span></span></div></li><li><div><span><span>加載器、模擬器、兼容層</span></span></div></li><li><div><span><span>輕量化內核</span></span></div></li><li><div><span><span>多態內核</span></span></div></li><li><div><span><span>啓動方式</span></span></div></li></ul><div><div><span><span>每一種業務類型都有其獨具特徵的邏輯模型，通過更形式化地定義這些業務模型，可以更好地理解它們和 BPF 的結合性，找到更好的實現方案，充分發揮 BPF 帶來的強大能力。後續篇章，我們會對典型的應用模型進行更深入的討論，以及 BPF 在這些應用場景中，應該在哪些特性方面進行加強或改進。</span></span></div></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 04:27:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4450925/blog/8685883</guid>
            <link>https://my.oschina.net/u/4450925/blog/8685883</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Bytebase 2.11.1 - 數據脱敏支持語義類型和脱敏算法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><h2>🚀 新功能</h2><ul><li>數據脱敏支持自定義脱敏算法和語義類型。 <img src="https://oscimg.oschina.net/oscnet/up-1585b72201b92b51627496f6baf9671402c.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🔔 重大變更</h2><ul><li>用户頁面的 URL 由 <code>/u/{uid}</code> 變更為 <code>/users/{email}</code>。</li><li>工作空間的所有者和開發者分別更名為：管理員和成員。 <img src="https://oscimg.oschina.net/oscnet/up-82d69e61f7501b0b1e11ac2bbd6e2f231e4.png" alt="file" referrerpolicy="no-referrer"></li></ul><h2>🎄 改進</h2><ul><li><p>SQL 編輯器支持顯示錶的 DDL 語句（MySQL, PostgreSQL 和 TiDB）。 <img src="https://oscimg.oschina.net/oscnet/up-d913361c2eae9e174893e134b791ad8493b.png" alt="file" referrerpolicy="no-referrer"></p></li><li><p>提升了啓用數據脱敏時的查詢速度。</p></li><li><p>支持在工單<strong>待發布</strong>或<strong>審批通過</strong>的時候發送 webhook 通知。</p></li><li><p>改進了 Oracle Parser 用以支持存儲過程和分區表。</p></li><li><p>優化了工單過濾功能。</p></li><li><p>優化了工單指派人功能。</p></li><li><p>優化了 Schema 編輯器的性能。</p></li></ul><p>📕 安裝及升級，參考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fbytebase%2Fbytebase%23installation" target="_blank">升級指南</a>。如果從之前版本升級，獲取新版本後，重新啓動升級即可。</p><hr><p>💡 更多資訊，請關注 Bytebase 公號：Bytebase</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/6148470/blog/10150991</guid>
            <link>https://my.oschina.net/u/6148470/blog/10150991</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌員工離職後抨擊大老闆，曾深度參與 Flutter 項目、制定 HTML 相關標準]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>伊恩·希克森 (Ian Hickson) 是在谷歌工作了 18 年的老員工，他於 2005 年 10 月加入谷歌，18 年後遞交了辭職信。上週是他在谷歌的最後一週。</p><p>離職後，希克森在個人博客發表了一封措辭嚴厲的批評信，雖然標題為<u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fln.hixie.ch%2F%3Fstart%3D1700627373" target="_blank">《回顧在 Google 的 18 年》</a></em></u>，但內容主要是抨擊谷歌「腐化的文化」，並指責首席執行官桑達爾·皮查伊 (Sundar Pichai) 「缺乏遠見」。</p><blockquote><p><img src="https://static.oschina.net/uploads/space/2023/1124/111037_IJjJ_2720166.png" referrerpolicy="no-referrer"></p></blockquote><p>來源：<em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fln.hixie.ch%2F%3Fstart%3D1700627373" target="_blank">https://ln.hixie.ch/?start=1700627373</a></u></em></p><p>希克森表示，他「非常幸運地」經歷了公司的早期成長曆程，那時的高管對員工坦誠，鼓勵他們去做雄心勃勃的實驗，但如今這家搜索巨頭的文化已經「腐化」。</p><p>希克森在谷歌的職業生涯可以分為兩部分，在頭九年裏，他致力於 HTML 和相關標準的研究，任務是打造最好的 Web——因為任何對 Web 有利的事情都會對谷歌有利；在最後九年裏<strong>，他一直致力於打造跨平台應用程序開發框架 Flutter</strong>。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a03893271e334eda0f60bd821d7ca0fd33c.png" referrerpolicy="no-referrer"></p><p>希克森寫道，Flutter 是「老谷歌人」最後推出的項目之一，屬於 Larry Page 在 Alphabet 創建前不久發起的一系列雄心勃勃的實驗的一部分。Flutter 團隊基本上也像一家初創公司一樣運作，而且在很大程度上是建立在年輕的谷歌文化基礎上。例如<strong>優先考慮內部透明度、工作/生活平衡和數據驅動決策</strong>。所以整個團隊從一開始就非常開放，這使得他們能夠積極構建一個健康的開源項目。</p><p>與此同時，谷歌的高速發展讓其公司文化受到了侵蝕。</p><p>希克森表示：「透明度消失了。以前我會迫不及待地參加每一次公司全體會議，以便了解情況。現在，我發現自己甚至能夠預測高管們所給出的每一個答案。今天，我不知道在谷歌還有誰能解釋它的願景，員工士氣也空前低落。如果你和灣區的治療師交談，他們會告訴你，他們所有的谷歌客户都對谷歌感到不滿意。」</p><p>對於今年 1 月份的<u><a href="https://www.oschina.net/news/226273/google-open-source">「大裁員」</a></u>，希克森稱這是公司非常短視的決策——目的只是為了確保股價保持季度增長，而不是遵循谷歌以前的戰略，即優先考慮長期成功，即使這會導致短期損失。</p><p>而且自那以來，谷歌一直在進行規模更小、更低調的裁員，以至於員工們現在都在一份內部文件中追蹤裁員情況。</p><p>希克森説，這些裁員對公司文化產生了「潛在」影響，可能導致員工「大幅減少冒險行為」。他寫道：「我現在在谷歌看到了很多負面現象，比如員工對管理層缺乏信任，而管理層也不再信任員工，公司制定的政策也越來越顯得空洞。」</p><p>此前曾有媒體報道稱，谷歌的普通員工和管理層之間關係緊張。比如，谷歌要求高管為員工表現進行績效打分。</p><p>希克森建議，應該努力將權力從首席財務官辦公室轉移到這樣一個人手中——他應該對如何利用谷歌廣泛的資源為用户創造價值有清晰長期的願景。</p><p>至於谷歌的文化是否可以挽救，希克森認為可以，但他稱「時間緊迫」。他寫道：「谷歌文化的腐化最終將變得不可逆轉，因為它需要充當道德指南針的那種人，而這類人在沒有道德指南針的情況下不會願意加入谷歌。」</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 03:38:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267932</guid>
            <link>https://www.oschina.net/news/267932</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[vivo 稱從 2024 年 1 月 4 日起，逐步開始清理未備案 App]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>vivo 開發者的微信公眾號發佈了<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2F7kYh9q5df1au7qWhaYCL8g" target="_blank">《關於儘快履行 App 備案手續通知及指引》</a></u>通知，要求開發者儘快完成移動應用程序（App）備案工作。</p><p><img src="https://static.oschina.net/uploads/space/2023/1124/105449_8NrG_2720166.png" referrerpolicy="no-referrer"></p><p>vivo 在公告寫道，<span style="background-color:#ffffff; color:#424242">2023 年 12 月 5 日起，未備案 App 在應用商店及手機安裝器上顯示「未備案」。</span><strong>2024 年 1 月 4 日起，逐步開始清理未備案 App。</strong></p><hr><p>延伸閲讀</p><ul><li><a href="https://www.oschina.net/question/2720166_2329768">工信部要求 APP 備案</a></li><li><a href="https://www.oschina.net/news/253058">工信部：不得為未備案 App 提供網絡接入服務</a></li><li><a href="https://www.oschina.net/news/260160">蘋果中國 App Store 將不允許未備案應用上架</a></li><li><a href="https://www.oschina.net/question/2720166_2329781">關於開展微信小程序備案的通知</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:58:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267923</guid>
            <link>https://www.oschina.net/news/267923</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[deepin V23 成功適配國產顯卡摩爾線程 MTT S80]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">deepin <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fdeepin-v23-adapts-mtt-s80%2F" target="_blank">宣佈</a>，在社區愛好者以及 deepin 研發團隊的推動下，完成了摩爾線程 MTT S80 顯卡的適配工作，成功在 deepin V23 Beta2 版本上驅動 MTT S80 顯卡。</span></p><p><span style="color:#000000">據悉，此次適配的摩爾線程 MTT S80 顯卡，於 2022 年 11 月發佈，搭載了完整的「春曉」芯片核心，內置 4096 個 MUSA 流處理核心、128 個 Tensor 張量核心，在 1.8GHz 的主頻下，能夠提供 14.4TFLOPS 的單精度浮點算力。</span></p><p><span style="color:#000000"><img alt="" height="250" src="https://oscimg.oschina.net/oscnet/up-24b90e4c555c3dce9d7c2bd8dcf255ff8c6.png" width="500" referrerpolicy="no-referrer"></span></p><p><span style="color:#000000">deepin 面向 MTT S80 的體驗版鏡像已經推出，可以下載試用。MTT S80 顯卡驅動在 deepin V23 Beta2 操作系統上運行穩定，能夠達到主流 Linux 平台顯卡水平。</span></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-bb6700d8bf04b78428d098b799746afe61d.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-21dfd2787d98251884cf766af12fa8cf84e.png" width="500" referrerpolicy="no-referrer"></p><p><img alt="" height="281" src="https://oscimg.oschina.net/oscnet/up-97a82a853f7689b89f6151579e93404022f.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">當前，該驅動程序已支持 Opengl 4.0 、Opengl ES 3.2 ，由於還是技術預覽版本，僅支持 5.15 版本內核，部分用户態驅動還未合入主線。此外，還存在一些其他問題，有待後續更新解決。因此，官方警告在生產環境中請務必謹慎使用。</span></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><span style="color:#000000"><strong>鏡像下載地址：</strong></span></p><ul><li style="text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fci.deepin.com%2Frepo%2Fdeepin%2Fdeepin-community%2Fmoore-driver%2Fcdimage%2Fdeepin-23-Beta2-for-moore-s80-amd64.iso" target="_blank">https://ci.deepin.com/repo/deepin/deepin-community/moore-driver/cdimage/deepin-23-Beta2-for-moore-s80-amd64.iso</a></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:18:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267913</guid>
            <link>https://www.oschina.net/news/267913</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[【直播預告】替代 Oracle，我們還有多長的路要走？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><p style="text-align:center"><img height="450" src="https://oscimg.oschina.net/oscnet/up-7cd126308d5a4478deb0afffc710879fd62.png" width="2400" referrerpolicy="no-referrer"></p><p>早在十多年前，就有了 「去 IOE 」 的提議。2008 年，時任阿里巴巴首席架構師的王堅提議，減少外國供應商，並用內部開發的設備和技術取而代之。</p><p>所謂減少外國供應商，主要就是要擺脱 IOE 系統——服務器 IBM，數據庫軟件 Oracle，存儲設備 EMC，三者構成了一個從軟件到硬件的企業數據庫系統，幾乎佔領了全球大部分商用數據庫系統市場份額。</p><p>原本，「去 IOE 」 只是阿里為了節省成本的一場技術革新。IBM 小型機價格從幾十萬到高達百萬級人民幣，與 Oracle 簽訂的數據庫軟件費用達數千萬，還要再加上一大筆軟硬件支付和一大筆維護費，維持 IOE 的成本太過高昂。</p><p>在我國頻頻遭遇外國技術封鎖之後，「去 IOE 」 成為了軟件行業自主可控的正面戰場之一。在信創的推波助瀾之下，國產化替代更是勢不可擋。Oracle 數據庫作為 IOE 的核心繫統，國產化替代的進程到底如何呢？</p><p>要知道，替代 Oracle 並不是一蹴而就的事情。Oracle 在數據庫領域的地位是建立在多年的技術積累和市場認可之上的。替代 Oracle 需要考慮到企業的具體需求、現有系統的遷移成本以及新技術的可行性和穩定性。同時，替代 Oracle 也需要面對數據遷移、應用兼容性、安全性和性能等方面的挑戰。</p><p>11 月 29 日 19:00，OSCHINA 直播——【開源漫談】第 6 期，將深入地聊一聊：替代 Oracle，我們還有多長的路要走？</p><p><strong>直播主題：替代 Oracle，我們還有多長的路要走？</strong></p><p style="text-align:left"><strong>直播時間：</strong>11 月 29 日（週三） 19:00-21:00</p><p style="text-align:left"><strong>直播平台：</strong>「OSC 開源社區」 視頻號</p><p><strong>主辦方：</strong>開源中國</p><p><strong>直播嘉賓：</strong></p><p><strong>馬繼超，瀚高售前總監</strong></p><p>現任浪潮集團瀚高基礎軟件股份有限公司售前總監，擁有近十年數據庫技術經驗和卓越售前經驗。曾參與多個大型項目的實施，專注於深入洞察客户需求，精心為客户打造數據庫個性化解決方案，並提供卓越的數據庫產品和服務。以其對客户業務的深刻理解，助力客户實現卓越的業務目標。</p><p><strong>吳疆，拓數派產品社區負責人</strong></p><p>深耕雲計算行業和數據庫行業十餘年，熱衷於數據庫技術的雲原生化（數據庫與雲計算技術的深度融合），致力於雲原生虛擬數倉 PieCloudDB 的產品推廣。加入拓數派（Openpie）之前，就職於 Pivotal（現 VMWare）任職大數據平台 Greenplum 資深產品經理，並曾在 EMC 和 IBM 擔任主管工程師，參與過多個大數據和雲計算相關項目。畢業於清華大學計算機系，先後獲得本科和研究生學位。</p><p><strong>趙向前，萬裏數據庫平台產品</strong></p><p>萬裏數據庫產品，有多年運營商、銀行、政企、電網行業的數據庫管理經驗，Oracle OCM、MySQL OCP、 PGCP，目前負責萬裏數據庫相關產品的功能統籌建設，通過投產項目運行數據分析，致力改進完善產品用户體驗。</p><p><strong>直播話題：</strong></p><ul><li><p>當前數據庫國產化進程情況如何？</p></li><li><p>替代 Oracle 的難點在哪裏？（技術角度和非技術角度都談一談）</p></li><li><p>有哪些能夠替代 Oracle 的國產數據庫？優勢在哪？不足之處在於？</p></li><li><p>現有國產數據庫跟 Oracle 相比，有多大的差距？</p></li><li><p>國產數據庫未來要怎麼走？</p></li></ul><p><img height="2416" src="https://oscimg.oschina.net/oscnet/up-6aa123abfaaa251c29aeaf1fc62fc04df2a.png" width="750" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left"><strong>直播福利</strong></p><ul><li><p style="margin-left:0; margin-right:0">互動抽獎：在直播評論區提問，被直播嘉賓回覆的用户可獲 OSC T 恤 1 件，名額不限。</p></li><li><p style="margin-left:0; margin-right:0">福袋抽獎：直播中將有多輪抽獎，參與就有機會獲得 OSC T 恤、筆記本、馬克杯 、前沿技術書籍等。</p></li></ul><p style="margin-left:0; margin-right:0"><img height="338" src="https://oscimg.oschina.net/oscnet/up-189c7f6fa386b87c3dda724a66c35fca104.jpg" width="600" referrerpolicy="no-referrer"></p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">我們直播間見吧～</p><hr><p style="text-align:left"><strong>另外，本次直播得到了諸多社區或組織的大力支持，在此特別表示感謝：</strong></p><p style="text-align:left"><strong>IvorySQL 開源數據庫社區</strong></p><p style="text-align:left">IvorySQL 是由浪潮集團瀚高股份主導研發的一款開源的兼容 Oracle 的 PostgreSQL，致力於為企業和開發者提供一個高性能、可擴展和安全的 Oracle 替代最佳解決方案。</p><p style="text-align:left">IvorySQL 社區以安全、兼容、易用為特色，以鏈接開發者為核心，背後由數十年的全球 PostgreSQL 開發經驗的資深專家和開發愛好者組成。</p><p style="text-align:left">自發布以來，IvorySQL 緊跟 PG 國際社區，快速進行版本迭代，保持與最新版本 PostgreSQL 數據庫內核同步，累計發佈 10 個版本，併兼容豐富的 PG 周邊工具和擴展。推出包括 Package、層級查詢、全局唯一索引、各種兼容函數和類型等 Oracle 兼容功能近百個。</p><p>官網鏈接：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.ivorysql.org%2Fzh-cn%2F" target="_blank">https://www.ivorysql.org/zh-cn/</a></u></span></p><p style="text-align:left">社區倉庫：<span style="color:#6425d0"><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FIvorySQL%2FIvorySQL" target="_blank">https://github.com/IvorySQL/IvorySQL</a></u></span></p><p>&nbsp;</p><p><strong>GreatSQL 社區 </strong></p><p style="text-align:left">GreatSQL 社區成立於 2021 年，由萬裏數據庫發起，致力於通過開放的社區合作，構建國內自主開源數據庫版本及開源數據庫技術，推動中國開源數據庫及應用生態繁榮發展。GreatSQL 是適用於金融級應用的國內自主開源數據庫，具備高性能、高可靠、高易用性、高安全等多個核心特性，可以作為 MySQL 或 Percona Server 的可選替換，用於線上生產環境，且完全免費併兼容 MySQL 或 Percona Server。</p><p style="text-align:left">官網鏈接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgreatsql.cn%2F">https://greatsql.cn/</a></span></p><p>Gitee 倉庫：<span style="color:#245bdb"><a href="https://gitee.com/GreatSQL">https://gitee.com/GreatSQL</a></span></p><p>&nbsp;</p><p><strong>拓數派（OpenPie）</strong></p><p>拓數派（OpenPie）是國內基礎數據計算領域的高科技創新企業，與雲上數據庫和數據計算領域的引領者，自成立以來專注於數據計算領域，旗下大模型數據計算系統（PieDataComputingSystem, 縮寫：πDataCS），以雲原生技術重構數據存儲和計算，一份存儲，多引擎數據計算，讓 AI 模型更大更快，全面升級大數據系統至大模型時代。</p><p>πDataCS 首款計算引擎 PieCloudDB 雲原生虛擬數倉實現了分析型數據數倉上雲虛擬化，將物理數倉整合，根據數據授權動態創建虛擬數倉，按需靈活計算，打破數據孤島，支撐更大模型所需的數據和計算。在 PieCloudDB，存儲和計算各自作為兩個獨立變量，各自在雲裏彈性伸縮，解決基於 PC 的傳統 MPP 的缺陷，不僅可實現瞬間擴縮容。還支持用户對雲中數據同時開啓多個集羣進行數據計算，並能持續將所有數據在雲中存儲，為已有的應用和未來的應用真正實現數據共享。PieCloudDB 目前提供社區版（免費下載），雲上雲版（免費試用），企業版，與一體機版本。</p><p>官網鏈接：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.openpie.com" target="_blank">www.openpie.com</a></p><p>社區公眾號：PieCloudDB 技術派</p><p>&nbsp;</p><p><strong>重慶軟件園</strong></p><p>重慶軟件園位於重慶經開區，佔地 110 萬平方米，佈局四大組團，是重慶市首批軟件產業園 (綜合型)、A 區入選重慶市軟件和信息服務業「滿天星」示範樓宇 (首批)，於 2019 年 9 月 16 日正式開園，堅持「做生態=做產業，做人才=做產業，做服務=做產業」的發展理念，建設集科技、人文、生態、智慧為一體的領軍型軟件園區。聚焦「3+2」產業佈局，實現新一代信息技術產業集羣發展。園區聚集軟件類企業近 2000 家，軟件人才近 3 萬人，已登記 4000 多項軟件著作權，研發投入超 50 億，40 餘項專利將獲得科技獎，營收上億企業近 20 家。立足南岸區、重慶經開區優質產業資源，聚焦軟件信息服務業、智能製造、綠色環保 、汽車軟件汽車電子、大健康等產業，推動軟件產業高質量發展，重慶軟件園將全面貫徹落實「滿天星」計劃，力爭到 2026 年成功建成中國軟件名園。</p><p>園區官網：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.chongqingpark.com" target="_blank">www.chongqingpark.com</a></p><p>&nbsp;</p><p style="text-align:left"><strong>渠成開源社區</strong></p><p style="text-align:left">渠成開源社區由禪道項目管理軟件團隊發起，社區的經營主體為青島渠成開源計算機網絡技術研究中心，是非營利性社會服務活動的社會組織。 渠成開源社區主要面向一線開源軟件生產者、貢獻者、組織者、贊助商和用户，以解決具體實際問題為宗旨，旨在打造以開源軟件為核心紐帶的開源生態系統，真正做到讓每一個優秀的開源軟件都能實現商業化。</p><p style="text-align:left">官網：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.qucheng.cc">www.qucheng.cc</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>愛可生開源社區</strong></p><p style="text-align:left">愛可生開源社區，一個有深度的 MySQL 開源社區。社區成立於 2017 年，以開源高質量的運維工具、日常分享技術乾貨內容、數據庫技術佈道為己任；目前開源的產品有：SQL 審核工具 SQLE、分佈式中間件 DBLE 和數據傳輸組件 DTLE。在這裏，你將收穫：高質量的技術內容，企業級數據庫工具及服務，豐富的社區活動。</p><p style="text-align:left">鏈接： <span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopensource.actionsky.com%2F">https://opensource.actionsky.com/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>AllData</strong></p><p style="text-align:left">AllData 大數據產品是可定義數據中台，以數據平台為底座，以數據中台為橋樑，以機器學習平台，GPT 平台為框架，提供全鏈路數字化解決方案。</p><p style="text-align:left">項目地址：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Falldatacenter%2Falldata">https://github.com/alldatacenter/alldata</a></span></p><p style="text-align:left">社區官網：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Falldata.readthedocs.io%2Fzh%2Fmaster%2F">https://alldata.readthedocs.io/zh/master/</a></span></p><p style="text-align:left">&nbsp;</p><p style="text-align:left"><strong>東方瑞通 </strong></p><p style="text-align:left">東方瑞通成立於 1998 年，是國內較早的 IT 高級技術培訓企業之一，擁有華為、紅帽、微軟、PMI、VMware、Oracle 等 33 餘家國際廠商授權資質，以培養 it 人才為主，目前覆蓋領域：虛擬化、操作系統、網絡、安全、數據庫、IT 管理、軟件開發等細分領域，提供線上，線下交流培訓課程與活動。</p><p style="text-align:left">官網鏈接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.easthome.com" target="_blank">www.easthome.co</a></span><a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fwww.easthome.com" target="_blank"><span style="color:#245bdb">m</span></a></p><p>&nbsp;</p><p style="text-align:left"><strong>秦派軟件</strong></p><p style="text-align:left">北京秦派軟件科技有限公司 (Pulsarware® Technologies Ltd.) 是一家致力於開發生產力工具軟件的技術公司，成立之初立志要在工具軟件領域深耕，踐行精益求精的研發精神，努力推出優質的生產力工具軟件服務國內外的開發者，提升開發者的工作效率，同時創造出商業價值和社會價值。</p><p style="text-align:left">ATOMDB™ 數據庫管理客户端是秦派軟件研發的一款服務廣大開發者的工具軟件。可以讓開發者方便地執行查詢，創建和管理數據庫，支持管理市場上主流的數據庫管理系統。例如： TIDB, PolarDB, GreatDB, 人大金倉，神舟通用，TDengine, MySQL, PostgreSQL, Microsoft SQL Server, Oracle 等等。軟件設計支持 Windows、MacOS、Linux 等操作系統，軟件採用插件擴展的方式對多數據庫進行支持。</p><p style="text-align:left">官網鏈接：<span style="color:#245bdb"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fatomdb.com" target="_blank">atomdb.com</a></span></p><p>&nbsp;</p><p><strong>墨天輪</strong></p><p>墨天輪是中國專業的數據技術社區，創建於 2019 年，目前已覆蓋國內 40 萬數據庫相關從業人員。其圍繞數據人的學習成長提供一站式的全面服務，打造集新聞資訊、技術文章、在線問答、活動直播、視頻課程、文檔閲覽、在線運維等為一體的門户網站。墨天輪致力於在新時代下打造更具創新性的學習形態、構建完整的數據知識體系，共同建設一個有温度的技術社區和全新的數據社羣聚合體。</p><p>鏈接：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.modb.pro%2F" target="_blank">https://www.modb.pro/</a></p><p>&nbsp;</p><p><strong>示説</strong></p><p>示説是音視頻互動社交 SaaS 平台,提供一站式的自動化營銷和數據分析服務,專注賦能企業在垂直領域建立產品的用户生態,成為行業用户、社區互動和分享的專業平台。</p><p>官網：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.slidestalk.com%2F" target="_blank">https://www.slidestalk.com/</a></p><p>&nbsp;</p><p><strong>盛見開源社區</strong></p><p>盛見開源社區是由盛見團隊的開源項目作者、貢獻者、維護者共同組成的開源社區，提供開源的區塊鏈框架、區塊鏈錢包、區塊鏈監控等系列開源產品及解決方案，專注區塊鏈內核模塊化和數字資產金融衍生品。 同時還進行開源技術內容發佈、開源賽事參與、開源項目共創等開源活動。</p><p>官網: <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.shengjian.net" target="_blank">https://www.shengjian.net</a></p></div></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:11:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3859945/blog/10150339</guid>
            <link>https://my.oschina.net/u/3859945/blog/10150339</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[OpenTiny Vue 開源組件庫突破 1000 Star]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>你好，我是 Kagol。</p><p>今天是感恩節，我們懷着無比激動的心情，慶祝 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 達到 1000 Star ⭐</p><p>感謝所有支持 OpenTiny 開源社區的朋友們！</p><p><img src="https://oscimg.oschina.net/oscnet/up-1992757ee39875aabd70bc8e9d462a970eb.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-87db039989ef9101d4011633ea25be16749.jpg" alt="" referrerpolicy="no-referrer"></p><p>2023 年 2 月 16 日，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">TinyVue</a> 正式開源。</p><p>和業界組件庫相比，<code>OpenTiny Vue</code> 最大的特色就是使用 Renderless 無渲染組件設計架構，實現了一套代碼同時支持 Vue2 / Vue3 / React，支持 PC / Mobile 端，並支持<code>函數級別的邏輯定製</code>和<code>全模板替換</code>，靈活性好、二次開發能力強。</p><p>我們擁有更豐富的組件，目前組件數量已經超過 100 個，除了業界常見組件之外，我們還提供了一些獨有的特色組件，如：Split 面板分割器、IpAddress IP 地址輸入框、Calendar 日曆、Crop 圖片裁切等。</p><p>經過 9 個多月的持續打磨，我們發佈了 6 個大版本，支持了更加豐富的特性，能力更強、體驗更好。</p><ul><li>完成 Monorepo 和 TypeScript 工程改造</li><li>支持 Vue2.7</li><li>支持 VitePress 服務端渲染</li><li>官網提供 Composition API 寫法的示例</li><li>提供 Playground 代碼演練場</li><li>提供 XDesign / Aurora / Infinite 3 套新主題</li><li>增加 RichTextEditor / ColorPicker / Anchor / Guide 等 13 個新組件</li></ul><p>開源不易，請給 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">OpenTiny Vue</a> 點個 Star ⭐ 鼓勵下，感謝你對我們 OpenTiny 的大力支持🌹</p><p>源碼：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><h2>1 圍繞開發者需求，不斷完善自身能力</h2><p>開源的 9 個多月以來，我們收到了非常多友好、耐心的開發者的反饋，這些寶貴的反饋意見對於我們優化 TinyVue 組件庫，打造真正有競爭力的開源項目提供了非常大的幫助，感謝所有耐心地給我們 TinyVue 提交 Issue 的開發者們🌹</p><h3>1.1 Monorepo 和 TypeScript 工程改造</h3><p>今年 2 月份剛開源時，我們的項目結構還不是 Monorepo 工程，整個組件庫分成了 4 個倉庫：</p><ul><li>tiny-vue // 組件模板</li><li>tiny-vue-renderless // 組件邏輯</li><li>tiny-theme // PC 端組件樣式</li><li>tiny-theme-mobile // 移動端組件樣式</li></ul><p>這樣會帶來以下問題：</p><ol><li>第一次 clone 代碼比較麻煩，需要 clone 4 個倉庫的代碼</li><li>clone 完代碼之後，還需要切換 develop 分支 4 次，npm i 安裝 4 次依賴包</li><li>這 4 個工程安裝的依賴包如果有重複的，會在各自的工程目錄下安裝多次，導致更多的磁盤空間佔用</li><li>增加新組件或給組件增加新特性，一般都會涉及模板/邏輯/樣式的同時修改，提交 MR 時需要在三個倉庫都提交一個 MR，不太方便</li><li>填寫 MR 的描述信息時也需要在多個倉庫填寫多次</li><li>檢視 MR 是也需要在多個倉庫進行檢視、提交檢視意見，比較分散</li></ol><p>由於我們是一個開源項目，希望能夠團結社區開發者一起共同建設，肯定希望大家參與貢獻的門檻儘可能降低，貢獻的體驗儘可能流暢，所以我們在 3 月份對項目進行了一次大改造，將原來分散在 4 個代碼倉庫的代碼集中到一個倉庫，通過 Monorepo 方式進行管理。除此之外，我們還將原來的 JavaScript 工程改造成了 TypeScript 工程，並在持續補充組件的 TypeScript 類型聲明。</p><blockquote><p>目前組件 TypeScript 類型聲明還未全部補充完，歡迎朋友們一起參與貢獻。<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></p></blockquote><h3>1.2 支持 Vue 2.7</h3><p>説來慚愧，支持 Vue 2.7 的訴求從今年 4 月份就有人提 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F141" target="_blank">#141</a>，我們在最近的大版本 v2.11.0 才正式支持。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7291598231954653240" target="_blank">OpenTiny Vue 支持 Vue2.7 啦！</a></p><p>Vue2.7 是升級 Vue3 的一個過渡版本，支持了 Composition API 寫法，相較於 Vue2.6 差異較大，並且目前是 Vue 2.x 的默認版本，在 Vue2 項目中默認會安裝 Vue 2.7.x，這時安裝和使用 TinyVue v2.x 版本，項目會報錯。</p><p>v2.11.0 版本之後將不再有這個問題，歡迎還在使用 Vue2 的朋友們體驗和使用。</p><h3>1.3 官網提供 Composition API 寫法的示例</h3><p>TinyVue 是一個能同時支持 Vue2 和 Vue3 的組件庫，但是之前我們官網的組件 Demo 只有 Options API 的版本，使用 Vue3 的開發者會覺得很不方便，拷貝 Demo 代碼之後還需要手動轉換成 Composition API 的寫法。</p><p>於是我們優化了文檔的呈現，參考 Vue 官網，增加了 Options(選項式) 和 Composition(組合式) 兩種寫法的切換。</p><p><img src="https://oscimg.oschina.net/oscnet/up-11b40155bd5aad12b5a1a5c253fbbdb557a.png" alt="" referrerpolicy="no-referrer"></p><p>歡迎朋友們到我們官網體驗：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.4 提供 Playground 代碼演練場</h3><p>早期我們的組件 Demo 代碼是可以直接在頁面上編輯，然後查看組件渲染效果的，但是編輯之後的代碼沒法通過鏈接形式分享出來。</p><p>我們缺少代碼演練場功能，這個問題 4 月份就有朋友提 Issue <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F182" target="_blank">#182</a>，8 月初，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fmengqiuleo" target="_blank">xiaoy</a> 同學給我們貢獻了 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue-playground" target="_blank">TinyVue Playground</a> 項目。</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7262349502920523833" target="_blank">但因熱愛，願迎萬難，OpenTiny 社區增加一枚前端程序媛貢獻者🎉</a></p><p>我們將這個項目集成到了 TinyVue 的官網，現在你可以在每個組件 Demo 的右上角點擊「打開演練場」的按鈕，在演練場中編輯這個 Demo，實時查看修改後的組件效果，並通過鏈接形式分享出去。</p><p>這樣提交 Issue 時，可以在 Playground 中實現最小可復現 Demo，並將鏈接貼到 Issue 描述中，大大降低了溝通成本，提升了缺陷修復的效率。</p><h3>1.5 四套主題，總有一套是你喜歡的</h3><p>為了滿足不同業務的需求，我們內置了四套主題，大家可以挑選自己喜歡的一款，如果這四套主題依然沒有一款能完全符合自己的要求，你也可以基於現有主題，修改部分主題變量，擴展出一套自己的主題，或者從 0 到 1 自定義一套主題，都是可以的。</p><p>具體如何自定義主題，可以參考以下文章：</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7235603140262838329%23heading-21" target="_blank">自定義 TinyVue 主題</a></p><p><img src="https://oscimg.oschina.net/oscnet/up-84297e83aea2a488ad2f6698221e7bdfcd9.png" alt="" referrerpolicy="no-referrer"></p><blockquote><p>温馨提醒：主題切換入口在組件頁面右上角</p></blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-381625d2749f199ea19c0f6a5dc6e0ab035.png" alt="" referrerpolicy="no-referrer"></p><p>歡迎朋友們在 TinyVue 官網體驗不同主題：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue%2Fzh-CN%2Fos-theme%2Fcomponents%2Fbutton" target="_blank">https://opentiny.design/tiny-vue/zh-CN/os-theme/components/button</a></p><h3>1.6 更加豐富的組件</h3><p>有很多開發者在 Issue 給我們提出新組件的訴求，經過仔細評估，我們實現了其中一部分通用的組件。</p><ul><li>Anchor 錨點 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fchenxi-20" target="_blank">@chenxi-20</a></li><li>CalendarView 日曆視圖 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkagol" target="_blank">@kagol</a></li><li>ColorPicker 顏色選擇器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>ConfigProvider 全局設置 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FGaoNeng-wWw" target="_blank">GaoNeng-wWw</a></li><li>Divider 分隔線 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fvaebe" target="_blank">@vaebe</a></li><li>Drawer 抽屜 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FHuangyilin19" target="_blank">@Huangyilin19</a></li><li>Guide 引導 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fyuanningning" target="_blank">@yuanningning</a></li><li>PopConfirm 確認框 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fgimmyhehe" target="_blank">@gimmyhehe</a></li><li>RichTextEditor 富文本編輯器 by <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FCaesar-ch" target="_blank">Caesar-ch</a></li><li>...</li></ul><p>還有好多組件未實現，歡迎感興趣的朋友們一起參與共建！</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到頂部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 標籤輸入框</li><li>LoadingBar 加載進度條 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 對話組件</li><li>IpSection 分段 IP 輸入框</li><li>Video 視頻播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思維導圖 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程設計器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>如果你想參與 TinyVue 項目貢獻，可以在對應的 Issue 下評論認領，並仔細閲讀我們的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">貢獻指南</a>。</p><h2>2 酒香也怕巷子深吶</h2><p>俗話説：酒香不怕巷子深，但是在前端組件庫開源方面可能不太適用，近幾年開源的前端組件庫越來越多，這其實是一件好事，百花齊放，前端人也有更多的選擇。</p><p>但是不熟悉這些組件庫的開發者會覺得這些組件庫好像都差不多，何必又要重複造輪子呢？</p><p>因此有必要做一些宣傳，讓大家瞭解 TinyVue 組件庫的核心設計理念，TinyVue 與其他組件庫的不同，有什麼競爭優勢。</p><h3>2.1 開發者大會</h3><p>從今年 4 月份開始，OpenTiny 參加了 17 場開發者大會、開源峯會、高校行活動，包括：</p><ul><li>5.13 重慶的開源未來發展峯會</li><li>5.27 上海的 GOTC</li><li>6.11 北京的<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7242676549735776314" target="_blank">開放原子全球峯會</a></li><li>⭐ 7.7 東莞的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7255138771985219639" target="_blank">HDC 大會</a></li><li>9.20 上海的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7287473826061189181" target="_blank">HC 大會</a></li><li>9.26 上海的 KubeCon China</li><li>10.24 長沙的中國程序員節</li><li>10.28 成都的中國開源年會</li><li>...</li></ul><p>通過在大會分享議題，我們能將 TinyVue 的理念傳遞給廣泛的開發者； 通過展台互動，我們可以近距離與開發者互動，給大家分享 OpenTiny 的獨特優勢，傾聽開發者的聲音，瞭解用户的痛點問題； 通過編程訓練營，可以帶着開發者一起體驗 TinyVue 組件，快速搭建 Web 應用。</p><p>值得一提的是，7 月份在東莞華為溪村的 HDC 大會真是一場開發者的盛宴，各種開發者活動非常豐富，只要你有心，可以學到很多技術知識，認識超多業界大佬，哪怕只是去「歐洲小鎮」逛一圈，我覺得也是非常值得推薦的。</p><p>雖然那幾天天氣很熱，也很累，但是卻是非常難忘的一段經歷，OpenTiny 有演講議題、展台、訓練營和挑戰賽，參加人數都非常多，開發者們都很活躍。</p><p><img src="https://oscimg.oschina.net/oscnet/up-09a594762462062dd5c2c95967aae95f29b.png" alt="" referrerpolicy="no-referrer"></p><p>非常高興，TinyVue 也是在 HDC 大會上正式進行發佈！</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fjuejin.cn%2Fpost%2F7254020450160934973" target="_blank">OpenTiny 前端組件庫正式開源啦！面向未來，為開發者而生</a></p><p>大家可以關注 <code>OpenTiny</code> 公眾號，隨時掌握 OpenTiny 最新活動動態。</p><h3>2.2 直播</h3><p>除了線下開發者大會之外，線上直播也是一種向開發者傳遞項目價值的方式，今年共做了 8 次直播。</p><ul><li>華為雲 DTT 直播 2 次</li><li>與前端知名 UP 主前端楊村長聯合直播 3 次</li><li>與 ToB Dev / Dooring 低代碼聯合直播 1 次</li><li>受邀參加中國開源社區 landscape 直播分享 1 次</li><li>自主策劃 TinyEngine 線上答疑 1 次</li></ul><p>大家感興趣可以關注 OpenTiny 的 B 站賬號，我們會將直播的錄播視頻上傳上去。</p><p>OpenTiny B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><h3>2.3 寫文章</h3><p>相比參加開發者大會和組織直播活動，寫文章相對比較容易，並且寫文章能夠更加全面、細緻地傳遞開源項目價值，也是一種細水長流的傳播方式，門檻相對也比較低，幾乎任何人都可以做。</p><p>不過寫文章並不是一件容易的事，從 4 月份我們發佈第一篇 OpenTiny 的宣傳文章至今，共發佈了 75 篇文章，平均每週 2 篇。</p><p>主要發佈在 OpenTiny 公眾號、掘金、開源中國等平台，累計閲讀量超過 50 萬。</p><p>另外我們也和多位前端 KOL 建立合作關係，如：前端早讀課、前端迷、一飛開源、前端之巔、前端進階之旅、高級前端進階、村長學前端、前端大班車、code 秘密花園、、技術胖學程序、若川視野、前端幫、前端 Q、大廠雜談、LowCode 低碼時代、華為開源、OSC 開源、ITPUB、前端開源星球、前端前沿技術等，感謝前輩們的提攜！</p><p>開源不易，寫文章也不易，推薦朋友們關注以上大佬們的公眾號，也給我們 TinyVue 開源項目點個 Star 鼓勵下🌹</p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a></p><p>感謝朋友們對 TinyVue 的支持！</p><p>如果你有一個開源項目，千萬不能抱着酒香不怕巷子深的觀念，而是積極主動地走出去，接觸廣大的開發者，不斷對外宣傳你的開源項目的價值和核心優勢，讓大家瞭解你的開源項目，讓大家評判你的開源項目，讓大家使用你的開源項目。</p><h2>3 規劃</h2><p>2024 年我們將繼續根據用户需求優化組件庫。</p><p>一方面繼續完善組件庫能力，提供更多實用組件和特性，滿足更廣泛的業務場景；</p><p>另一方面持續優化組件庫工程架構和質量，完善組件的 TypeScript 類型聲明、E2E 測試用例、單元測試用例。</p><p>以下是我們 2024 年的規劃。</p><h3>3.1 新特性</h3><p>根據用户提交的 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues" target="_blank">Issue</a> 持續修復組件缺陷、完善組件能力。</p><p>新組件：</p><ul><li>Skeleton 骨架屏 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F355" target="_blank">#355</a></li><li>BackTop 回到頂部 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F576" target="_blank">#576</a></li><li>TagInput 標籤輸入框</li><li>LoadingBar 加載進度條 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F724" target="_blank">#724</a></li><li>Card 卡片</li><li>Chat 對話組件</li><li>IpSection 分段 IP 輸入框</li><li>Video 視頻播放 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F294" target="_blank">#294</a></li><li>Mindmap 思維導圖 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F312" target="_blank">#312</a></li><li>ProcessDesigner 流程設計器 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F363" target="_blank">#363</a></li></ul><p>新特性：</p><ul><li>支持 Nuxt3 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F577" target="_blank">#577</a></li><li>支持 unplugin-vue-components <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F304" target="_blank">#304</a></li><li>支持深色主題 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F415" target="_blank">#415</a></li><li>Tree 支持虛擬滾動 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F256" target="_blank">#256</a><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F317" target="_blank">#317</a></li><li>RichTextEditor 富文本組件功能增強</li><li>CalendarView 組件功能增強</li></ul><h3>3.2 工程優化</h3><p>工程優化的目的是提升質量和效率，主要包含以下幾個方面：</p><ul><li>完善組件的 TypeScript 類型聲明 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F370" target="_blank">#370</a></li><li>優化組件的 Demo/API 文檔 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F484" target="_blank">#484</a></li><li>完善 E2E 測試用例</li><li>完善單元測試用例 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fissues%2F206" target="_blank">#206</a></li><li>Grid 組件抽離 renderless 邏輯層</li></ul><h2>3.3 生態擴展</h2><p>2023 年我們完成了 TinyReact 組件庫的基礎適配，包括基礎版本的 React 適配層、本地開發和部署流程，提供了 Button / Alert / Switch / Badge 4 個組件，併發布第一個 alpha 版本。</p><p>2024 年我們將持續擴展組件庫生態，主要包含：</p><ul><li>持續完善 TinyReact 組件庫，完善 react-common 適配層，增加更豐富的組件模板</li><li>適配 <a href="https://gitee.com/openInula/inula">openInula</a> 框架，增加 inula-common 適配層</li><li>完善移動端組件庫並部署官網，為 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-engine" target="_blank">TinyEngine</a> 低代碼引擎提供移動端組件物料</li><li>探索和擴展 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsolidjs%2Fsolid" target="_blank">Solid</a> / <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fsveltejs%2Fsvelte" target="_blank">Svelte</a> 等新興框架的組件庫</li></ul><p>歡迎廣發開發者朋友一起參與 TinyVue 開源共建！</p><p>如果你有意向參與 TinyVue 開源貢獻，請在對應的 Issue 下面評論，並在參與貢獻之前閲讀<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue%2Fblob%2Fdev%2FCONTRIBUTING.zh-CN.md" target="_blank">貢獻指南</a></p><p>最後，再一次感謝所有支持 TinyVue 的朋友們！</p><p><img src="https://oscimg.oschina.net/oscnet/up-7528c4a9c1dd5436bad2907842bfc87e831.png" alt="" referrerpolicy="no-referrer"></p><h2>聯繫我們</h2><p>GitHub：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fopentiny%2Ftiny-vue" target="_blank">https://github.com/opentiny/tiny-vue</a>（歡迎 Star ⭐）</p><p>官網：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fopentiny.design%2Ftiny-vue" target="_blank">https://opentiny.design/tiny-vue</a></p><p>B 站：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fspace.bilibili.com%2F15284299" target="_blank">https://space.bilibili.com/15284299</a></p><p>公眾號：OpenTiny</p></div>
                                    ]]>
            </description>
            <pubDate>Fri, 24 Nov 2023 02:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4863191/blog/10150927</guid>
            <link>https://my.oschina.net/u/4863191/blog/10150927</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 內核放棄支持過時的圖形驅動基礎設施]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>Linux 內核正在準備刪除支持舊的和過時的圖形驅動程序的基礎設施。</p><p>早在 Linux 6.3 內核中就已經移除了許多舊版的 DRM 驅動程序，現在的補丁進一步刪除了支持這些舊的用户空間模式設置圖形/顯示驅動程序的基礎設施。</p><p>在 Linux 6.3 內核中，ATI Rage 128、3Dfx、S3 Savage、Intel 810、SiS、VIA 和 Matrox MGA DRM 驅動程序被淘汰。這是為了清除 DRI1 時代過時 GPU 驅動程序的努力的一部分。</p><p>現在，SUSE 工程師 Thomas Zimmermann 計劃進一步刪除用户空間模式設置的基礎設施。他認為，由於 Linux 6.6 是今年的長期支持版本（LTS）內核。現在是一個很好的時機來刪除這個基礎設施。如果有人仍在使用這些舊的驅動程序或類似的驅動程序，他們可以繼續使用 Linux 6.6 LTS。</p><p>Zimmermann<u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Fdri-devel%2F20231122122449.11588-1-tzimmermann%40suse.de%2F" target="_blank">在 dri-devel 上寫道</a></u>：</p><blockquote><p>舊的用户空間模式設置驅動程序已經在 Linux v6.3 中被刪除。沒有人抱怨或要求它們的恢復。現在是時候從 DRM 核心中刪除這些驅動程序的基礎設施了。</p><p>最近的 Linux v6.6 已被指定為長期支持版本，因此任何剩餘的用户還有幾年時間來購買新的顯卡。通過簡單的 drm 仍然支持這些舊設備。將適當的驅動程序與內核模式設置合併也是一個選擇。</p><p>補丁 1 到 7 修復了在刪除驅動程序過程中被遺忘的一些微不足道的問題。</p><p>補丁 8 和 9 刪除了舊的 ioctl 接口。其中一個操作與其他操作不同，因此它有自己的補丁。</p><p>補丁 10 到 12 從 DRM 中刪除了舊的源代碼。隨着這些代碼的消失，補丁 13 中的 AGP 代碼也可以簡化。以前有一個用於用户空間模式設置的設備文件/dev/agpgart，現在已經過時了。</p><p>這 14 個補丁在直接渲染管理器子系統中消除了另外 8000 行舊代碼。如果沒有提出異議，這個舊的用户空間模式設置基礎設施的刪除可能會在新的一年的 Linux 6.8 內核週期中發生。</p></blockquote><p>這項工作主要是為了清除過時的 GPU 驅動程序，併為用户提供更好的性能和穩定性。對於依賴舊版驅動程序的用户，他們可以繼續使用 Linux 6.6 LTS，直到他們準備好升級到支持新的圖形驅動程序的版本。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:36:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267831/linux-drop-old-ums-drm-infra</guid>
            <link>https://www.oschina.net/news/267831/linux-drop-old-ums-drm-infra</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu 在新 AMD Zen 4 Threadripper 上的性能比 Windows 11 高約 20%]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Freview%2Fthreadripper-7995wx-windows-linux" target="_blank">根據 Phoronix 的報道</a></u>，對於最新的 AMD Zen 4 Threadripper 處理器，運行 Ubuntu 會比 Windows 11 獲得更好的性能，前者較後者大約提升了 20% 的性能。這項測試是在一台配置了 HP Z6 G5 A 工作站的 96 核 AMD Ryzen Threadripper PRO 7995WX 處理器上進行的。</p><p><img src="https://oscimg.oschina.net/oscnet/up-c4adb3609ed3dba446e73d67cbfe76cf0a3.png" referrerpolicy="no-referrer"></p><p>測試結果顯示，Linux 在處理高核心數處理器時的性能優勢比 Windows 更明顯。這主要歸功於 Linux 內核調度程序在處理大核心數處理器時的優秀表現。此外，Linux 在處理這類高端台式機和工作站上的性能方面也比 Windows 更出色。</p><p>測試中，HP Z6 G5 A 工作站分別運行了預裝的 Windows 11 Pro 和 Ubuntu 23.10 操作系統。在運行了一系列適用於高端台式機和工作站的基準測試後，結果顯示 Ubuntu Linux 在大部分測試中都表現出更好的性能。這表明 Ubuntu Linux 在處理高核心數處理器時能夠更好地利用硬件資源，從而提供更高的性能。</p><p>需要注意的是，這項測試是在特定硬件配置下進行的，因此結果可能會因為不同的硬件配置而有所不同。此外，這項測試只涉及到 Ubuntu 23.10 操作系統，其他 Linux 發行版的性能可能會有所不同。</p><p>總的來説，根據這項測試結果，如果你在使用 AMD Zen 4 Threadripper 處理器的高端台式機或工作站，選擇 Ubuntu Linux 作為操作系統可能會獲得更好的性能。</p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:30:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267827</guid>
            <link>https://www.oschina.net/news/267827</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Linux 6.8 將更新 Zstd 代碼以獲得更好的壓縮性能]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.phoronix.com%2Fnews%2FZstd-1.5.5-Patches-Linux-Kernel" target="_blank">根據 Phoronix 的報道</a></u>，Linux 6.8 內核計劃在明年升級其 Zstd 代碼，以提供更好的壓縮性能。</p><p>在 Linux 6.2 中，內核的 Zstd 壓縮/解壓縮代碼已經根據 Zstd 1.5 的最新狀態進行了更新。而在 Linux 6.8 內核中，計劃升級到 Zstd 1.5.5 版本，這將提供更好的壓縮性能。</p><p>這次 Zstd 升級對 Linux 內核的動力之一是英特爾希望在 Linux 內核中使用更新的 Zstd 版本，因為它公開了 Zstd 的外部匹配提供程序 API，從而允許 QuickAssist 技術（QAT）加速 LZ 匹配查找階段。這對於那些擁有 QAT 硬件或將 QAT 加速集成到 Xeon Sapphire Rapids 和即將推出的 Emerald Rapids 處理器的用户來説是個好消息。</p><p><img src="https://oscimg.oschina.net/oscnet/up-b673c0555866551114bd2e08b4c9c512046.png" referrerpolicy="no-referrer"></p><p>除了滿足英特爾的需求之外，內核中更新的 Zstd 代碼經過測試，發現在寫入+壓縮時間上可以減少約 6%。然而，讀取+解壓縮時間略有增加。Zstd 1.5.5 本身是在今年 4 月發佈的，其中包含了一些性能改進、修復和其他變更。</p><p>目前可以在郵件列表的補丁中找到適用於 Linux 內核的 Zstd 1.5.5 版本，內核維護者計劃在 Linux 6.8 合併窗口提交這項工作。</p><p>這次 Zstd 代碼的升級將為 Linux 內核帶來更好的壓縮性能，這對於文件系統驅動程序的透明文件系統壓縮/解壓縮、將各種內核資源壓縮為 Zstd 格式等方面都是有益的。</p><p>詳情查看&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flore.kernel.org%2Flkml%2F20231121010318.524570-1-nickrterrell%40gmail.com%2FT%2F%23m693429838032e235560212b8339b315dcaa02460" target="_blank">https://lore.kernel.org/lkml/</a></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 10:22:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267826/zstd-1-5-5-patches-linux-kernel</guid>
            <link>https://www.oschina.net/news/267826/zstd-1-5-5-patches-linux-kernel</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[谷歌將於 2024 年 6 月開始禁用 Manifest V2]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">谷歌<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fresuming-the-transition-to-mv3%2F" target="_blank">宣佈</a>恢復&nbsp;<span style="background-color:#ffffff">Manifest V2 的</span><span style="background-color:#ffffff">棄用時間表，以繼續向 Manifest V3 邁進從而提供更高的安全性和隱私保障。</span>計劃最早將於 2024 年 6 月開始在 Chrome 127 及更高版本的 pre-stable 版（開發版、金絲雀版和測試版）中禁用 Manifest V2 擴展。</span></p><p><span style="color:#000000">生效後，Manifest V2 擴展程序將在瀏覽器中被自動禁用，並且無法再從 Chrome 網上商城安裝 Manifest V2 擴展程序。與此同時，Manifest V2 擴展程序將失去 Chrome 網上商城中的精選徽章（如果目前有的話）。</span></p><p><img height="311" src="https://static.oschina.net/uploads/space/2023/1123/174712_jZM4_4252687.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000"><span style="background-color:#ffffff">此前谷歌曾宣佈 Chrome 瀏覽器將在 2023 年 1 月停止支持 Manifest V2 擴展，並且也不再支持更新。但後續卻因為 Bug 太多，導致</span></span><a href="https://www.oschina.net/news/221452/google-delays-chrome-manifest-v3">多次推遲發佈</a><span style="background-color:#ffffff; color:#333333"><span>&nbsp;</span></span><span style="color:#000000"><span style="background-color:#ffffff">Manifest V3 版本，延長&nbsp;Manifest V2 的使用日期，</span>並於去年 12 月宣佈暫停了 Manifest V2 的棄用計劃。</span></p><p><span style="color:#000000">在這將近一年的時間裏，項目團隊表示已根據反饋對 Manifest V3 進行了一系列修改，解決了開發人員反饋的問題併為遷移提供了更好的解決方案。</span></p><p><span style="color:#000000">該公司計劃逐步推出這一變更，同時收集用户反饋並收集數據，以確保 Chrome 瀏覽器用户充分了解詳情並尋找到可替代的擴展。預計變更從 pre-stable 版推廣到 Chrome 穩定版至少需要一個月的時間，具體時間可能會根據收集到的數據而有所不同。</span></p><p><span style="color:#000000">對於那些使用 ExtensionManifestV2Availability 策略來確保 Manifest V2 擴展在其組織中持續運行的企業，將有額外一年的時間（直到 2025 年 6 月）來遷移其組織中的 Manifest V2 擴展。在此之前，啓用了該策略的瀏覽器不會受到停用的影響。</span></p><p><span style="color:#000000"><span style="background-color:#ffffff">對於仍在發佈 Manifest V2 擴展的開發者，谷歌方面強烈建議他們在 2024 年 6 月之前完成向 Manifest V3 的遷移，並提供了一份</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fdocs%2Fextensions%2Fmigrating%2F" target="_blank">遷移指南</a>。</p><p><span style="color:#000000">更多詳情可<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdeveloper.chrome.com%2Fblog%2Fresuming-the-transition-to-mv3%2F" target="_blank">查看官方公告</a>。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:47:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267820/google-resuming-the-transition-to-mv3</guid>
            <link>https://www.oschina.net/news/267820/google-resuming-the-transition-to-mv3</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[快來查收 KCL 社區開源快訊 | 雲原生模型、語言和工具鏈更新速遞!]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img height="258" src="https://oscimg.oschina.net/oscnet/up-10a425f008580d122921fd1db5cbadc672c.jpg" width="520" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:left"><strong>雙週同步開源進展</strong></p><p style="color:#000000; text-align:left"><strong>歡迎加入 KCL 社區進行互動～</strong></p><p style="color:#000000; text-align:left">KCL 是一個&nbsp;CNCF 基金會託管的基於約束的記錄及函數語言，期望通過成熟的編程語言技術和實踐來改進對大量繁雜配置比如雲原生 Kubernetes 配置場景的編寫，致力於構建圍繞配置的更好的模塊化、擴展性和穩定性，更簡單的邏輯編寫，以及更簡單的自動化和生態工具集成。</p><p style="color:#000000; text-align:left">本欄目將會雙週更新 KCL 語言社區最新動態，包括功能、官網更新和最新的社區動態等，幫助大家更好地瞭解 KCL 社區！</p><p style="color:#000000; text-align:left"><em><strong>KCL 官網：<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io</a></strong></em></p><h2>內容概述</h2><p style="color:#000000; text-align:left">感謝所有貢獻者過去兩週 (2023 11.09 - 11.23) 的傑出工作，以下是重點內容概述</p><p style="color:#000000; text-align:left"><strong>📦 模型更新</strong></p><ul><li>KCL 模型數量新增至<span>&nbsp;</span><strong>200 個</strong>，主要新增與<span>&nbsp;</span><code>Pod</code>,<span>&nbsp;</span><code>RBAC</code><span>&nbsp;</span>相關的校驗模型及 Kubernetes 1.14-1.28 版本的模型參考文檔</li><li>可以在<span>&nbsp;</span><code>Artifact Hub</code><span>&nbsp;</span>中搜索瀏覽到所有模型的文檔及使用方式:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fartifacthub.io%2Fpackages%2Fsearch%3Forg%3Dkcl%26sort%3Drelevance%26page%3D1" target="_blank">https://artifacthub.io/packages/search?org=kcl&amp;sort=relevance&amp;page=1</a></em></li></ul><p style="color:#000000; text-align:left"><strong>💬 語言更新</strong></p><ul><li><strong>體驗改進</strong><ul><li>優化配置代碼塊的語法縮進檢查，不再強制報錯</li><li>支持通過文件路徑通配符作為編譯入口</li></ul></li><li><strong>錯誤修復</strong><ul><li>修復部分場景字典類型的類型推導錯誤</li><li>修復 Schema 參數數量的檢查</li></ul></li></ul><p style="color:#000000; text-align:left"><strong>🔧 工具鏈更新</strong></p><ul><li><strong>測試工具發佈</strong><ul><li>支持使用 KCL 函數編寫單元測試並使用工具執行測試</li><li>支持使用正則表達式過濾待測試用例</li><li>支持單元測試快速失敗功能</li></ul></li><li><strong>導入工具更新</strong><ul><li>修復 patterns 到正則匹配表達式的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F70" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/70</a></em></li><li>修復 minItems/maxItems 到字段長度校驗規則的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F69" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/69</a></em></li><li>修復 0 或空字符串為默認值的生成:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F69" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/69</a></em></li><li>修復 Kubernetes CRD 到 KCL Package 轉換中包名的生成為：<code>${apiVersion}_${kind}</code>:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-openapi%2Fpull%2F68" target="_blank">https://github.com/kcl-lang/kcl-openapi/pull/68</a></em></li></ul></li><li><strong>包管理工具更新</strong><ul><li>新增 update 命令用於自動更新本地依賴:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkpm%2Fpull%2F212" target="_blank">https://github.com/kcl-lang/kpm/pull/212</a></em></li></ul></li></ul><p style="color:#000000; text-align:left"><strong>💻 IDE 更新</strong></p><ul><li><strong>體驗改進</strong><ul><li>支持包管理工具引入的外部包依賴 import 語句補全</li></ul></li><li><strong>錯誤修復</strong><ul><li>修復函數參數未定義類型錯誤顯示位置</li></ul></li></ul><p style="color:#000000; text-align:left"><strong>🏄 API 更新</strong></p><ul><li>新增 KCL 單元測試 API:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F904" target="_blank">https://github.com/kcl-lang/kcl/pull/904</a></em></li><li>新增 KCL 符號重命名 API:<span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F890" target="_blank">https://github.com/kcl-lang/kcl/pull/890</a></em></li></ul><p style="color:#000000; text-align:left"><strong>🔥 架構升級</strong></p><ul><li>KCL 設計並重構了新的語義模型以及支持最近符號查找和符號語義信息查詢 API</li><li>IDE 補全，跳轉和懸停等功能實現遷移至新語義模型，顯著降低 IDE 功能開發難度和代碼量</li></ul><p style="color:#000000; text-align:left"><strong>🚀 性能提升</strong></p><ul><li>KCL 編譯器支持語法增量解析以及語義增量檢查，大部分場景提升 KCL 編譯構建和 IDE 插件使用性能<span>&nbsp;</span><strong>5-10 倍</strong></li></ul><h2>特別鳴謝</h2><p style="color:#000000; text-align:left">以下排名不分先後</p><ul><li>感謝 @cr7258 對 KCL 模型庫以及 KCL 文檔的貢獻 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F203" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/203</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F209" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/209</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F210" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/210</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F211" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/211</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fmodules%2Fpull%2F67" target="_blank">https://github.com/kcl-lang/modules/pull/67</a></em></li></ul></li><li>感謝 @XiaoK29 為 KCL IDE 的懸停和引用查找功能代碼架構重構以及 KCL 文檔的貢獻 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F887" target="_blank">https://github.com/kcl-lang/kcl/pull/887</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fpull%2F899" target="_blank">https://github.com/kcl-lang/kcl/pull/899</a></em></li><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl-lang.io%2Fpull%2F205" target="_blank">https://github.com/kcl-lang/kcl-lang.io/pull/205</a></em></li></ul></li><li>感謝 @MeenuyD, @negz 對&nbsp;<strong>Crossplane KCL Composition Functions</strong>&nbsp;集成的討論與支持 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues%2F885" target="_blank">https://github.com/kcl-lang/kcl/issues/885</a></em></li></ul></li><li>感謝 @kolloch 對&nbsp;<strong>Bazel KCL</strong>&nbsp;構建規則腳本的寶貴反饋 🙌 
  <ul><li><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Frules_kcl%2Fpull%2F2" target="_blank">https://github.com/kcl-lang/rules_kcl/pull/2</a></em></li></ul></li><li>感謝 @陸雲, @Even Solberg, @Prahalad Ramji @Matt Gowie, @ddh 和 @mouuii 在使用推廣 KCL 過程中的交流與寶貴反饋 🙌</li></ul><h2>精選更新</h2><h3>在 Artifact Hub 上檢索 KCL 代碼包及雲原生模型</h3><ul><li>通過 k8s 模型編寫或者校驗 Kubernetes 配置</li></ul><p style="color:#000000; text-align:left">&nbsp;</p><p><img height="413" src="https://oscimg.oschina.net/oscnet/up-be579d3f163ed2a9ef989f516169d64f9b1.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>通過 Open Application Model (OAM) 開放應用模型配合 KubeVela 控制器進行應用發佈與運維</li></ul><p style="color:#000000; text-align:left">&nbsp;</p><p><img height="770" src="https://oscimg.oschina.net/oscnet/up-8a2737b64f74b1d5a27733ce7a5a084a195.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>查找 KCL 代碼庫如&nbsp;<code>jsonpatch</code>&nbsp;進行配置操作</li></ul><p><img height="718" src="https://oscimg.oschina.net/oscnet/up-15703cf81898b8126bed226fd3e1c45141a.png" width="1080" referrerpolicy="no-referrer"></p><ul><li>通過引入 KusionStack Modules 模型生態並配合 KusionStack 增強客户端的應用交付體驗：<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FKusionStack%2Fcatalog" target="_blank">https://github.com/KusionStack/catalog</a></em></li></ul><p><img height="697" src="https://oscimg.oschina.net/oscnet/up-16ff10fe152afe1ca5321397a39a1b5b41d.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:left">想了解更多？🤔️ 後續我們會通過一系列文章講解各個模型更具體使用場景以及工作流程，敬請期待! 此外，200+ 模型的源代碼位於&nbsp;<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fmodules" target="_blank">https://github.com/kcl-lang/modules</a></em>，歡迎社區的小夥伴進行共建。❤️</p><h2>其他資源</h2><p style="color:#000000; text-align:left">❤️ 感謝所有 KCL 用户和社區小夥伴在社區中提出的寶貴反饋與建議。預計&nbsp;11 月底我們會正式發佈 KCL v0.7 新版本，敬請期待!</p><p style="color:#000000; text-align:left">更多其他資源請參考：</p><ul><li><p>KCL 網站<span>&nbsp;</span><em>:</em><span>&nbsp;</span><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2F" target="_blank">https://kcl-lang.io/</a></em></p></li><li><p>KusionStack 網站:&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkusionstack.io%2F" target="_blank">https://kusionstack.io/</a></p></li><li><p>KCL 2023 路線規劃:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fkcl-lang.io%2Fdocs%2Fcommunity%2Frelease-policy%2Froadmap" target="_blank">https://kcl-lang.io/docs/community/release-policy/roadmap</a></p></li><li><p>KCL v0.7.0 Milestone:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F7" target="_blank">https://github.com/kcl-lang/kcl/milestone/7</a></p></li><li><p>KCL v0.8.0 Milestone:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fmilestone%2F8" target="_blank">https://github.com/kcl-lang/kcl/milestone/8</a></p></li><li><p>KCL Github Issues:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fkcl%2Fissues" target="_blank">https://github.com/kcl-lang/kcl/issues</a></p></li><li><p>KCL Github Discussion:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Forgs%2Fkcl-lang%2Fdiscussions" target="_blank">https://github.com/orgs/kcl-lang/discussions</a></p></li><li><p>👉&nbsp;戳鏈接加入 KCL 社區:<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkcl-lang%2Fcommunity" target="_blank">https://github.com/kcl-lang/community</a></p></li></ul></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 09:23:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/267815</guid>
            <link>https://www.oschina.net/news/267815</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[TQUIC - 高性能輕量級跨平台 QUIC 協議庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#1f2328; text-align:start">TQUIC 是 IETF QUIC 協議的實現。它是一個高性能、輕量級、跨平台的 QUIC 庫。</p><h4 style="text-align:start"><strong>特性及優點</strong></h4><ul><li><p><strong>高性能</strong>：TQUIC 是為高性能和低延遲而設計的。相關細節可以參考<a href="https://tquic.net/zh/docs/further_readings/benchmark">基準測試結果</a>。</p></li><li><p><strong>可插拔擁塞控制</strong>：TQUIC 支持多種擁塞控制算法，包括 CUBIC，BBR，BBRv3，COPA。</p></li><li><p><strong>多路徑傳輸</strong>：TQUIC 支持多路徑，一個連接可同時使用多個路徑提高性能及可靠性。</p></li><li><p><strong>易用性</strong>：TQUIC 提供易用的接口，支持靈活的配置參數，提供豐富的可觀測性。</p></li><li><p><strong>跨平台</strong>：TQUIC 可運行在 Rust 語言支持的各種平台，同時提供了 Rust/C/C++語言接口。</p></li><li><p><strong>基於 Rust</strong>：TQUIC 基於用內存安全語言編寫，可避免緩衝區溢出漏洞和其他內存相關錯誤的影響。</p></li><li><p><strong>高質量</strong>：TQUIC 包括充分的自動化測試，包括單元測試、模糊測試、集成測試、性能基準測試、互操作性測試等。</p></li><li><p><strong>協議一致性</strong>：TQUIC 已通過基於 Ivy 的形式化規範驗證。同時通過了 IETF 互操作性測試。</p></li><li><p><strong>豐富的功能</strong>：TQUIC 支持所有 QUIC、HTTP/3 規範中的重大功能。</p></li></ul><h4><strong>架構</strong></h4><p><img height="383" src="https://static.oschina.net/uploads/space/2023/1108/104746_mwuM_4252687.png" width="500" referrerpolicy="no-referrer"></p></div>
                                                                ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 07:48:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/tquic</guid>
            <link>https://www.oschina.net/p/tquic</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | 如何做好架構設計，架構設計有章可循嗎？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>設計一個系統的過程，就是建造一座大廈的過程，架構設計的質量直接決定了大廈的質量。</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在我們進行系統的架構設計時，總是會遇到一系列的問題，比如一個大型系統的架構應該如何起步，從哪裏開始設計？系統是否應該劃分成多個模塊，應該怎麼劃分模塊才更加的合理？亦或是覺得產品提出的需求非常不合理，完全影響我們正常的架構設計！對於非功能性的需求，我們是否可以得過且過，不去重視？</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>這些問題，讓我們在剛開始架構設計時手足無措，但是隨着我們完成一個又一個的系統架構設計以後，發現架構設計是有章法可循的，只要我們學習這些章法和套路，並且在工作過程中不斷的積累與沉澱，就會行成一個完整的架構設計方法論，面對新的大型系統架構設計，也會一步一步有節奏進行，最終完成整體的架構設計。</span></span></span></p><span id="OSC_h1_1"></span><h1><span><span><span style="background-color:#b7eb8f">架構設計的原則</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計需要遵循一些原則：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">1、架構設計需要方法體系</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>架構設計並不是一個」單一的方法「，直接拿來進行架構設計，而是多個各具特色的方法，組成的「方法體系」，並且這個體系隨着新技術的發展還會不斷進化。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">2、架構設計是質疑驅動</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計是質疑驅動的過程，在」需求驅動「的基礎上，我們需要不斷的質疑我們架構設計的中間成果，進一步通過「質疑」，引入更多的「質量屬性」及更多「功能場景」。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span style="color:black">3、多階段下的多視圖</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計，是多階段還是多視圖？架構設計首先是「多階段的」，我們將架構設計劃分成多個階段，在每個階段中才會考慮」視圖「這個維度。</span></span></span></p><span id="OSC_h3_2"></span><h3><span><span><em><span>架構設計的三個階段</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>階段一、 預備階段</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>預備階段的目標：全面理解需求，把握需求特點，確定架構設計驅動力。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在預備階段，我們需要全面的梳理與理解需求，不放過任何一個需求細節。同時分析需求產生的各項質量屬性與系統約束，同時兼顧這些約束進行架構設計，才能不遺漏重大的架構屬性。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>階段二、 概念架構</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>概念架構，必須考慮包括</span></span></span><span><span><strong><span>功能</span></strong></span></span><span><span><strong><span>，</span></strong></span></span><span><span><strong><span>質量</span></strong></span></span><span><span><strong><span>，</span></strong></span></span><span><span><strong><span>約束</span></strong></span></span><span><span><span>在內的所有方面的需求。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>階段三、 細化架構</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>在細化架構階段，我們從五個不同的角度出發，設計五個視圖，完成整個系統全方位的設計。</span></span></span></p><span id="OSC_h3_3"></span><h3><span><span><em><span>架構設計的一個貫穿環節</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><strong><span>對非功能需求的考慮</span></strong></span></span><span><span><span style="color:black">：</span></span></span><span><span><span>非功能需求無法一蹴而就，因為在設計的過程當中，會有新的需求不斷的被發現，即使設計完成，在開發階段，都會有影響非功能需求的約束出現，所以在整個階段，都應該注意非功能需求。</span></span></span></p><span id="OSC_h1_4"></span><h1><span><span><span style="background-color:#b7eb8f">預備架構階段分析</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>預備架構的最重要的目標，是建立需求大局觀，把握需求特點，確定架構設計驅動力。通過對需求的詳細分析，有一個宏觀的需求感知，同時還要兼顧系統的質量要求和約束對系統設計造成的制約條件。</span></em></span></span></p><span id="OSC_h3_5"></span><h3><span><span><em><span>需求結構化</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>需求是有結構的，而不是零散的需求點，只有將分析後的需求結構化，才能宏觀的感知整個需求。可以藉助 ADMEMS 二維矩陣，將架構影響因素，梳理脈絡。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如以下矩陣分析，將需求劃分為多個維度，橫向上從」廣義功能「」，質量「」，約束「三個方面分析，廣義功能是指需求需要滿足的基本功能，及產品或業務人員的直接要求。質量維度則是系統設計時需要考慮的高併發，高可用，可拓展等技術設計維護，保證系統在滿足基本需求的同時，同時對後續系統進化發展以及極端場景（例如：用户量激增，秒殺）等的滿足。約束則是系統設計時的一些制約，例如上線日期，上線環境，開發人員技能水平等。縱向上劃分為」業務級需求「」，用户級需求「」，開發級需求「三個維護」，業務級需求「是指產品或業務人員提出的基本要求」，用户級需求「則是從系統的使用用户角度出發，發現的例如用户電腦操作水平，用户使用習慣等潛在需求，而」開發級需求「，則是從研發人員角度出發，發現的例如可拓展，可測試，技術環境等不同維度的需求。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通過將需求結構化，我們可以全面的分析整體的需求，對需求進行整體的理解，同時也可以從不同的角度發現系統制約條件，在系統設計的最開始階段就着手設計，防止遺漏重大約束導致架構設計失敗。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-21F216gXpb11EiRfhbt.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_6"></span><h3><span><span><em><span>分析約束影響</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>約束分析的幾個方面：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 來自產品或運營人員的約束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>系統的非功能需求，例如：上線時間，預算，工期要求等</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>業務領域相關的限制，例如業務規則或業務限制，相關法律，專利等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 來自</span></span></span><span><span><strong><span>用户</span></strong></span></span><span><span><span>的約束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>系統的用户，同樣會產生約束性需求，比如用户的計算機水平，年齡段，使用偏好，國家等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如用户計算機水平整體較弱的話，在開發交互方式時就不應太過複雜，同時要兼顧系統的魯棒性，防止系統被用户搞掛。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>用户使用產品時的外部環境同樣可能產生約束條件，比如訪問環境是內網或是外網，則決定了系統提供訪問鏈接不同的網絡權限。訪問環境信號強度若，則系統的性能要求則更高。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 來自</span></span></span><span><span><strong><span>開發或運維人員</span></strong></span></span><span><span><span>的約束性需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>開發團隊的技術水平，磨合程度，同樣制約着系統的開發，如果開發人員均是高級研發人員且對當前技術棧有深入的瞭解，則開發進度就會更快，如果是新團隊，且需要對技術棧進行學習才可以介入開發，則在工期或系統風險層面需要額外考慮。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 業界</span></span></span><span><span><strong><span>當前技術環境</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>當前技術環境中間件的成熟程度，編程語言及流行度，優缺點等，都會對架構設計產生約束條件。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>約束的分類：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 直接約束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：系統運行於 linux 平台。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 轉換為功能需求的約束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>對於這種約束，可以直接轉換為功能需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：供應商擁有自己的一套城市信息表 -&gt; 引出的功能需求：需要進行城市轉換</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：供應商服務器性能差，tps 最大 10 -&gt; 引出的功能需求：需要進行限流請求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 轉換為質量屬性需求的約束</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如：系統使用者計算機水平不高</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>轉換為質量屬性：易用性（否則不會用），魯棒性（系統被搞癱）</span></span></span></p><span id="OSC_h3_7"></span><h3><span><span><em><span>確定關鍵質量</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>系統的關鍵質量是需要進行取捨的，需要確認業務人員更注重那方面或在滿足需求的基礎上，確定哪些是必須的，哪些是可以適當忽略的。</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>我們需要首先確定架構重點支持哪些質量屬性，然後對於相互矛盾的質量屬性，進行權衡折中。例如當滿足性能這個質量屬性時，同時就會因為引入新的方案或組件，導致可維護性，可測試性降低；提高可拓展性時，就會對系統的性能和安全性產生影響等等，我們需要做的，就是在各個關鍵質量中進行取捨。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-22LELMr9d22zFXatK50.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h3_8"></span><h3><span><span><em><span>確定關鍵功能</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>確定關鍵功能的 4 個方面</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 核心功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 必做功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 高風險功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 獨特功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>其他常見系統不存在的功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><strong><span>注意衍生需求：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>從需求轉入設計時，因方案制定過程的複雜，會產生大量的衍生需求，衍生需求是原始需求的數倍。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>舉例：</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>原始需求：定時拉取供應商數據。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>衍生需求：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 由於供應商數量較多，需要引入分佈式定時任務，集羣併發拉取</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 由於供應商數據量大，需要分庫分表設計</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、需要快速搜索，引入存儲引擎組件等等</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-24DBopViOOSWkb7SO.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>這些衍生需求我們必須要考慮，雖然業務需求沒有體現，但缺失架構設計的關鍵影響因素。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>架構驅動力對比：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>業務需求驅動架構：</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-25pbrXAR24YnLHpXB21.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>重大需求驅動架構：</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-2511lKgKmtlkleQWxu.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>由此可以看出，通過重大需求驅動的架構，更能考慮到更關鍵的部分，設計的架構更能滿足需求的要求，架構設計成功的概率會更高。</span></span></span></p><span id="OSC_h1_9"></span><h1><span><span><span style="background-color:#b7eb8f">概念架構階段分析</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><em><span>概念架構階段，對系統進行適當的分解，而不陷入細節</span></em></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>概念架構的過程是，先根據關鍵功能進行初步設計，然後對設計的系統進行高層分割，接下來考慮非功能性需求（關鍵質量和約束），然後修改自己的初步設計，循環往復，在不斷的質疑和優化過程中，完善架構設計。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-26T7A52xvPwdCSGT7q.png" width="474" referrerpolicy="no-referrer"></div><p>&nbsp;</p><span id="OSC_h3_10"></span><h3><span><span><em><span>初步設計</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>初步設計的目標是發現職責，無需展開細節設計。基於關鍵功能，進行初步設計，</span></span></span><span><span><strong><span>基於主流程，關鍵流程，黃金流程等進行流轉圖設計，從而發現職責。</span></strong></span></span></p><span id="OSC_h3_11"></span><h3><span><span><em><span>高層分割</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>切分複雜系統，為多個二級系統。或者直接切分為具體子系統。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>高層分割的兩種方式：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 系統切分</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>切分的考慮點，包括系統功能、部署環境、語言、系統規模等</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>例如一個大型系統，切分為訂單，商品，供應鏈等系統。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 系統內切分</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>根據系統的職責、調用關係、通用性等，進行系統內部切分。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>最常見的就是分層，例如一個系統，切分為網關層，服務層，搜索模塊，man 端等。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>分層的角度</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 邏輯分層</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>邏輯分層重視職責的劃分，職責直接常常是上層使用下層的關係，上層和下層，可以是分佈在不同的機器，也可以分佈在同一台機器。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 物理分層</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>分佈在不同機器上的軟件單元。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 通用性分層</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>通用性不同的，劃分為不同的層，一般通用性越大，所處的層次越靠下。</span></span></span></p><span id="OSC_h3_12"></span><h3><span><span><em><span>考慮非功能需求</span></em></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>具體方法是：採用</span></span></span><span><span><strong><span>目標-場景-決策表</span></strong></span></span><span><span><span>，見下圖：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計是質疑驅動的，例如，質疑係統的可用性，考慮系統可能宕機，則引入集羣部署設計，考慮下游接口可能超時或出現異常，則引入接口降級的設計等。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-30khnlGt6Qe939QO21.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>考慮場景的 5 個要素</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 影響來源，來自系統內部還是系統外部</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 如何影響的</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 受影響的對象</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>4、 有什麼問題或有什麼價值</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>5、 所處的環境為何</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><strong><span>對場景的權衡因素：</span></strong></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>價值，代價，開發難度，出現幾率。對於某些場景，經過全面的權衡和思考，可以不支持，並不是所有的場景都要支持，否則可能存在過度設計。</span></span></span></p><span id="OSC_h1_13"></span><h1><span><span><span style="background-color:#b7eb8f">細化架構階段分析</span></span></span></h1><span id="OSC_h3_14"></span><h3><span><span><span style="color:black">邏輯視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>邏輯視圖是對系統的不同部分</span></span></span><span><span><strong><span>職責</span></strong></span></span><span><span><span>的劃分，根據職責不同，可以將系統進行細粒度的拆分，劃分為多個子系統。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span style="background-color:#87e8de">分層的細化</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>根據系統設計的需要，可以將系統的分層進行細化，例如展示層 -&gt; 業務層 -&gt; 數據層，可以細化為：展示層 -&gt; 控制層 -&gt; 接口層 -&gt; 接口實現層 -&gt; 數據層。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-32iq0B11mN3f32twUqC.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span style="background-color:#87e8de">分區的引入</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>分區的概念是業務流程相關的，分區的依據是：</span></span></span><span><span><strong><span>職責</span></strong></span></span><span><span><span>，比如結算流程可以作為一個分區，下單流程可以作為一個分區。將系統劃分為多個分區，一方面可以支持並行開發，另一方面也將系統劃分為多個子域，有利於業務概念和業務流程的收斂。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-33tPJdWeJMDcvCT5c.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="background-color:#87e8de">機制的提取</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>機制是指系統可以抽象的公共部分，例如公共工具，公共組件，公共流程等，提取這些公共部分，對於架構設計是至關重要的。</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>劃分子系統的原則：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1、 職責不同的單元，劃分為不同的子系統</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2、 通用性不同的單元，劃分為不同的子系統</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3、 需要不同開發技能的單元，劃分為不同的子系統兼顧工作量，進一步切分太大的系統</span></span></span></p><span id="OSC_h3_15"></span><h3><span><span><span style="color:black">開發視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>開發架構視圖的任務，是將「邏輯職責」映射為「程序單元」，例如：要自主編寫的「源程序」，可重用的庫，框架等；同時進行開發技術選型，例如：開發語言，開發工具等，然後也需要確立程序單元間的關係，project 劃分，目錄結構，編譯依賴關係等。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-37jm117lDma8m21KTOo.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span></span></span></span></p><span id="OSC_h3_16"></span><h3><span><span><span>運行視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>運行架構設計的工作內容，是確定引入哪些控制流：進程，線程等；確定每條控制流的任務，同時還要處理相關問題，例如控制流的創建，銷燬，通信機制等，控制流之間的同步關係，是否有資源爭用，是否需要加鎖等也需要考慮。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-37xeumJqiBEAkn0Su.png" width="284" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><span id="OSC_h3_17"></span><h3><span><span><span>物理視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>物理架構設計的 3 項任務</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1. 硬件的選擇與物理拓撲</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>2. 軟件到硬件的映射關係</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>3. 方案的優化</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>思維要點：「開銷」和「爭用」是核心，應避免爭用，降低開銷。</span></span></span></p><span id="OSC_h3_18"></span><h3><span><span><span>數據視圖</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>數據視圖是系統的數據存儲設計，根據對系統的分析，確定一種或多種數據策略，常見的數據分佈策略如下 6 種：</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>1、獨立的 Schema</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>不同系統應用，使用不同的數據 schema，數據完全獨立，一般界限清晰的不同系統可以採用這種方式。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-38IAcR6ctu568BXqUB.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">2</span></span></span><span><span><span style="color:black">、集中</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">不同的系統應用，使用同一個數據庫，一般具有關聯屬性的應用可以採用這種方式，比如一個系統分為服務端和管理端，但都屬於一個系統，則可以使用同一個數據庫。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-39lOCEP39j21zaVHggv.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">3</span></span></span><span><span><span style="color:black">、分區</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>水平分區</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>水平分區即我們常見的分表方案，當一個 schema 無法滿足我們的數據量要求時，可以劃分為多個分區，每個分區存儲一部分數據。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-396Zrt9eYBraZnGV0.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span style="color:black">垂直分區</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">垂直分區是分區策略的另外一個維度，當我們單庫無法承載巨大的數據量時，也可以根據數據的類別，進行垂直分區。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40EKfhbfQ13Rmif3x.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span></p><p><span><span><span>4、複製</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">多個數據庫保存相同的數據，根據制定的更新策略保證不同庫之間的數據同步，</span></span></span><span><span><span>我們常用的讀寫庫分離，即為此方案，主庫提供寫能力，從庫提供讀能力，其中從庫的數據是根據主庫數據同步而來。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40LnrTouVj21EUvpx0.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>5、子集</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span>根據一些特殊的場景要求，需要保存原數據的部分數據，例如 application1 保存全量訂單，application2 只需要部分出票成功的訂單，進行後續分析操作，則可以使用子集的策略進行數據視圖設計。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-40Moxg9UObMUth8l9.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span><span><span><span>﻿</span></span></span><span><span><span>6、重組</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:left"><span><span><span style="color:black">通過多個不同的 application 作為數據來源，異構至其他 application，用於數據的分析或後續流程使用。</span></span></span></p><div><img alt="" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2022-11-21-15-41RIaqyVykQOqcxwX.png" width="474" referrerpolicy="no-referrer"></div><p><span style="color:transparent"><span><span><span>﻿</span></span></span></span></p><span id="OSC_h1_19"></span><h1><span><span><span>總結</span></span></span></h1><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計的三個階段：預備架構階段；概念架構階段；細化架構階段</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>架構設計的四個要素：需求結構化；分析約束的影響；確定關鍵質量；確定關鍵功能</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>概念架構的三個步驟：基於關鍵功能初步設計；系統高層分割；分析非功能需求</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>細化架構的五個視圖：邏輯視圖；開發視圖；運行視圖；物理視圖；數據視圖</span></span></span></p><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:justify"><span><span><span>一個貫穿環節：非功能需求的考慮</span></span></span></p><span id="OSC_h3_20"></span><h3><span><span><span>參考資料</span></span></span></h3><p style="color:#393c5a; margin-left:0; margin-right:0; text-align:start"><span><span><span>1.《一線架構設計指南》</span></span></span></p><blockquote><p>作者：京東零售&nbsp;馮曉濤</p><p>來源：京東雲開發者社區，轉載請註明來源</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Thu, 23 Nov 2023 07:42:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10149764</guid>
            <link>https://my.oschina.net/u/4090830/blog/10149764</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
