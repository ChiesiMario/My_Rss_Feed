<?xml version="1.0" encoding="UTF-8"?>
<rss
    xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"


>
    <channel>
        <title>
            <![CDATA[開源中國-綜合資訊]]>
        </title>
        <link>https://www.oschina.net/news/industry</link>
        <atom:link href="https://rsshub.app/oschina/news/industry" rel="self" type="application/rss+xml" />
        <description>
            <![CDATA[開源中國-綜合資訊 - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)]]>
        </description>
        <generator>RSSHub</generator>
        <webMaster>i@diygod.me (DIYgod)</webMaster>
        <language>zh-cn</language>
        <lastBuildDate>Tue, 23 Jan 2024 09:56:12 GMT</lastBuildDate>
        <ttl>120</ttl>
        <item>
            <title>
                <![CDATA[開放籤電子簽章企業版，業務線功能正確使用方法]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>一、業務線功能説明</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>業務線全稱為「開放籤電子簽章業務線管理」，顧名思義業務線功能主要是圍繞用户不同業務場景下使用電子簽章的業務管理。用户可根據不同的業務場景（人力資源合同簽署、內部證明文件簽署、企業對企業簽署、企業對個人簽署等），通過業務線功能配置不同的電子簽署功能，從而更加便捷、安全的管理電子簽章的應用。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>用户可通過業務線配置電子文件簽署的業務流程，通過對業務線進行配置來確定和規範簽署文件、簽署方、簽署過程，同時也極大的簡化了簽署發起的操作。</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>二、功能特點</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>靈活規範：</strong></span></span></span></strong><span><span><span>通過業務線可快速構建出企業的各類簽約場景，並進行標準化管理。例如，人事合同簽署、內部文件審批簽字、銷售合同簽署、對外報告蓋章等場景；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>操作標準：</strong></span></span></span></strong><span><span><span>通過標準化的流程，確保各方按照一致的規範和要求進行文件簽署；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>風險控制：</strong></span></span></span></strong><span><span><span>通過業務線控制，降低簽署過程中因操作不當等帶來的風險；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>提高效率：</strong></span></span></span></strong><span><span><span>自動化和簡化發起流程，提高文件簽署的效率和速度；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>合規性：</strong></span></span></span></strong><span><span><span>確保文件簽署符合法律法規和企業內部政策；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>權限可控：</strong></span></span></span></strong><span><span><span>業務線設置各類權限，包括業務線本身的管理權、使用權，同時包括通過業務線發起的簽署業務的數據查看權限、文件下載權限；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>三、業務線功能説明</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>1、視頻講解</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>（1）業務線介紹：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1oc411x7zu%2F%3Fspm_id_from%3D888.80997.embed_other.whitelist%26t%3D43" target="_blank">視頻功能講解</a></strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>（2）業務線配置介紹：</strong></span></span></span></strong></span></span></span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.bilibili.com%2Fvideo%2FBV1Z94y1T7gB%2F%3Fspm_id_from%3D888.80997.embed_other.whitelist%26t%3D45" target="_blank"><span><span><span><span><strong><span><span><span><strong>視頻功能講解</strong></span></span></span></strong></span></span></span></span></a></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>2、文字説明</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>（1）基本信息設置</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>編號：</strong></span></span></span></strong><span><span><span>發起簽署時，可根據預設的規則自動生成文檔編號，統一一類簽署場景的編號規範，減少發起人輸入操作，編號規則支持文本、日期、流水號、時間戳，示例：KFQ-renshi-20230101-000001;</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>主題：</strong></span></span></span></strong><span><span><span>發起簽署時，可根據預設的規則自動生成文檔主題，統一一類簽署場景的主題規範，減少發起人輸入操作，主題規則支持文本、業務線名稱、日期、流水號、時間戳、發起人姓名、接收方姓名，示例：KFQ-入職相關合同（2023 版本）-20230101-000001-李四;</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>簽署方：</strong></span></span></span></strong><span><span><span>支持經辦人發起時自行設置和經辦人發起時，按照預設流程發起並簽署兩種方式。可設置簽署順序、發起方內部簽署人和外部接收方；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>抄送：</strong></span></span></span></strong><span><span><span>是否允許抄送，為該業務線設置抄送時機、抄送的用户類型、指定抄送人；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>簽約文件：</strong></span></span></span></strong><span><span><span>支持上傳本地文件和選擇在線模板，減少經辦人發起時重複上傳簽約文件。同時，可限制經辦人是否可刪除或新增簽約文件；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>附件：</strong></span></span></span></strong><span><span><span>限制經辦人發起簽署時是否可以上傳附件；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>簽署方式：</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>a、使用 CA 數字證書（符合電子簽名法）：簽署文件時，需要使用 CA 機構頒發的數字證書；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>b、使用平台防篡改證書（保護文件）（無法律效力）：簽署文件時，使用平台下發的防篡改證書，該證書非 CA 機構頒發，僅用於文件保護，避免文件被篡改，簽署後的文件不具備法律效力；</span></span></span></span></span></span></span></p><p><img height="709" src="https://oscimg.oschina.net/oscnet/up-3b855599317328959d0b6e8d2dbd23ef0d2.png" width="1280" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><span><span><span><span><span><span><span>圖一、基本信息設置</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>（2）權限管理</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>業務線管理權限：業務線的管理權限和使用權限配置；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>簽約文件權限設置：簽約數據查看權限和簽署文件下載權限配置.</span></span></span></span></span></span></span></p><p><img height="630" src="https://oscimg.oschina.net/oscnet/up-94a4f4e4dde46ddd76822def13d63575dbd.png" width="1280" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><span><span><span><span><span><span><span><span>圖二、權限管理</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>（3）簽署位置及參數設置</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>指定各簽署方的簽署位置；</span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>如果簽約文件中包含在線模板，可為模板中的各個參數指定對應的填寫方，在簽署環節時，各簽署人可根據設置完成待簽署文件的信息完善。</span></span></span></span></span></span></span></p><p><img height="708" src="https://oscimg.oschina.net/oscnet/up-921b6aa7ff79c0c801f4d5782b3d069f2a2.png" width="1280" referrerpolicy="no-referrer"></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify">&nbsp;</p><p style="margin-left:.0001pt; margin-right:0; text-align:center"><span><span><span><span><span><span><span><span>圖三、位置及參數設置</span></span></span></span></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><strong><span><span><span><strong>​四、總結</strong></span></span></span></strong></span></span></span></span></p><p style="margin-left:.0001pt; margin-right:0; text-align:justify"><span><span><span><span><span><span><span>開放籤業務線具有靈活、便捷、安全的電子簽署業務配置能力。接下來業務線將持續更新，添加更多配置功能，使開放籤電子簽章系統可以滿足更多電子籤業務場景。</span></span></span></span></span></span></span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 07:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276436</guid>
            <link>https://www.oschina.net/news/276436</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Fedora 40 計劃採用 Bpfman 作為默認 eBPF 程序管理器]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:left">Fedora 40 正在考慮採用 bpfman 作為默認 eBPF 程序管理器，以簡化 eBPF 程序的部署和管理。</p><p style="margin-left:0px; margin-right:0px; text-align:left"><img alt="" src="https://oscimg.oschina.net/oscnet/up-20aea944299992e9369a9cfe05627bf7e4d.png" referrerpolicy="no-referrer"></p><p>開發者在提案寫道：「<em>bpfman 作為 eBPF 管理器，專注於簡化 eBPF 程序的部署和管理。bpfman 是一個軟件棧，旨在使加載、卸載、修改和監控 eBPF 程序變得更加容易，無論是在單個主機還是在 Kubernetes 集羣中。我們的目標是在 Fedora 引入 bpfman，讓系統能方便地加載 eBPF 程序。</em>」</p><blockquote><p style="margin-left:0px; margin-right:0px; text-align:left"><img src="https://oscimg.oschina.net/oscnet/up-a8b461fd85c4a7a0cfae3bf419d5b9e7681.png" referrerpolicy="no-referrer"><br><u><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ffedoraproject.org%2Fwiki%2FChanges%2FDefaultBpfman" target="_blank">https://fedoraproject.org/wiki/Changes/DefaultBpfman</a></em></u></p></blockquote><p style="margin-left:0px; margin-right:0px; text-align:left">該提案目前正在等待 Fedora 工程和指導委員會 (FESCo) 的批准，很可能會在 4 月份出現在 Fedora 40 中。</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 06:16:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276433/fedora-40-bpfman-ebpf-manager</guid>
            <link>https://www.oschina.net/news/276433/fedora-40-bpfman-ebpf-manager</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Ubuntu Pro 包更新無法禁用引用户不滿]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">一名 Ubuntu 用户在 Launchpad 上提交了一份針對 update-manager 的錯誤報告，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.launchpad.net%2Fubuntu%2F%2Bsource%2Fupdate-manager%2F%2Bbug%2F2047778" target="_blank">表達</a>了自己對 Ubuntu LTS 版本的軟件更新工具 (Software Updater tool) 無法禁止顯示 Ubuntu Pro 軟件包更新的不滿。</span></p><blockquote><p><span style="color:#000000">每次調用軟件更新程序時，我都會看到一個 Ubuntu Pro 安全更新列表，底部還有一條信息，告訴我需要啓用 Ubuntu Pro 才能更新，只有一個按鈕可供選擇，那就是"Remind Me Later"。我搜索了一下 Ubuntu Pro，想知道它到底是什麼，最後得出的結論是我不需要它；但似乎沒有任何方法可以永久拒絕安裝它。每次重啓電腦，我都會再次看到同樣的文件，唯一的選擇又是啓用 Pro 或稍後提醒，而這兩個選項都不能反映我的意願和願望。這究竟是一個選項，還是必須升級？作為用户，我對此感到很困惑。</span></p></blockquote><p><img height="263" src="https://static.oschina.net/uploads/space/2024/0123/140949_wfD7_4252687.png" width="500" referrerpolicy="no-referrer"></p><p><span style="color:#000000">他表示，也許這只是一個非常拙劣且引導性的營銷伎倆，而不是軟件本身存在 bug；但無論如何，有關 Ubuntu Pro 的這一困擾表明軟件更新程序存在缺陷，官方應該提供一種能讓用户拒絕升級的方法。</span></p><p><span style="color:#000000">Canonical 於去年更新了 update-manager（又稱 Software Updater tool），無論用户系統是否啓用 Ubuntu Pro，它都會顯示可用的 Ubuntu Pro 軟件包更新列表（如果未啓用，則無法安裝）。</span></p><p><span style="color:#000000">還有人反映稱，對於一些不太懂行的人而言，此舉更加迷惑。「我接到一些客户的電話，他們不知道自己的系統出了什麼問題，在進行更新時會看到一個更新管理器窗口，裏面有一些灰色的軟件包，你無法刪除，除非你啓用 ubuntu pro。」</span></p><p><span style="color:#000000">Canonical 的 Oliver Grawert 對此進行了<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbugs.launchpad.net%2Fubuntu%2F%2Bsource%2Fupdate-manager%2F%2Bbug%2F2047778%2Fcomments%2F7" target="_blank">回覆</a>：</span></p><blockquote><p><span style="color:#000000">Pro 是一項完全免費的服務，適合個人和小型企業使用，它為用户提供了 2.5 多個附加軟件包的安全修復......為了維護這一點，canonical 安全團隊必須擴展規範的安全團隊。維護這 2.5 萬個軟件包是有成本的，canonical 在這裏所做的就是讓企業為這些額外的工作付費，然後再免費提供給社區...</span></p><p><span style="color:#000000">為了確保這些企業不會免費攫取，需要建立一個控制機制，這也是為什麼需要註冊才能獲得。</span></p></blockquote><p><span style="color:#000000">並反問用户，是更願意安全漏洞被知而不報從而被惡意行為者利用，還是更願意在更新時獲得可用修復程序的列表。此外，他還邀請有想法的用户提出解決問題的方案，項目團隊將進行考量：</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscourse.ubuntu.com%2Ft%2Fubuntu-pro-faq%2F34042" target="_blank">https://discourse.ubuntu.com/t/ubuntu-pro-faq/34042</a></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 06:08:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276430/ubuntu-pro-software-updater-issue</guid>
            <link>https://www.oschina.net/news/276430/ubuntu-pro-software-updater-issue</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[FreeBSD 也要「鏽化」？團隊稱考慮在基礎系統採用 Rust]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>FreeBSD 開發者正在考慮允許在 FreeBSD 基礎系統中使用 Rust 編程語言的好處和成本。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-a49c5ed65580e1dd715c12f8604797093fb.png" referrerpolicy="no-referrer"></p><p><em><u><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Flists.freebsd.org%2Farchives%2Ffreebsd-hackers%2F2024-January%2F002823.html" target="_blank">https://lists.freebsd.org/archives/freebsd-hackers/2024-January/002823.html</a></u></em></p></blockquote><p>郵件寫道，在 FreeBSD 基礎系統使用 Rust 的<strong>主要缺點是構建時間加倍。</strong>這是因為需要編譯基於 LLVM 的 Rustc 編譯器和 Rust 的所有附加功能，這些操作使得基礎系統的構建時間大約是當前的兩倍。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-a7d460b865a7215d966af4b4b1bd8a09b6e.png" referrerpolicy="no-referrer"></p><p>如果 FreeBSD 基礎系統採用了 Rust，開發者可以重新 Rust 重寫許多組件——而不是使用 C++，例如 ZFS 守護進程 (zfsd)、重寫 devd、WiFi 用户空間代碼也可以受益於用 Rust 編寫，等等。列舉部分如下：</p><blockquote><p>* ctl-exporter (I started this, but discovered that the CTL stats API is<br> &nbsp; unstable, so it can't live in ports. &nbsp;Instead, I had to do it in C).<br> &nbsp; https://github.com/freebsd/freebsd-src/commit/1a7f22d9c211f504f6c48a86401469181a67ec34</p><p>* fusefs tests. &nbsp;Absolutely impossible to do in C. &nbsp;I considered Rust, but went<br> &nbsp; with C++ so they could live in base. &nbsp;They are too closely coupled to<br> &nbsp; fusefs(5) to live out-of-tree.<br> &nbsp; https://github.com/freebsd/freebsd-src/tree/main/tests/sys/fs/fusefs</p><p>* devd. &nbsp;Currently C++, but imp suggested a rewrite.<br> &nbsp; https://github.com/freebsd/freebsd-src/tree/main/sbin/devd</p><p>* zfsd. &nbsp;Currently C++, but I've long pondered a rewrite. &nbsp;Using Rust would<br> &nbsp; make it more testable.<br> &nbsp; https://github.com/freebsd/freebsd-src/tree/main/cddl/usr.sbin/zfsd</p><p>* nscd. &nbsp;Currently C, but confusing and with no test coverage. &nbsp;I've<br> &nbsp; contemplated a rewrite myself, but I don't want to do it in C.<br> &nbsp; https://github.com/freebsd/freebsd-src/tree/main/usr.sbin/nscd</p><p>* The userland portion of the 802.11ac and Lightning stacks. &nbsp;scottl suggested<br> &nbsp; that these were good candidates for Rust.</p><p>* freebsd-kpi-r14-0 . &nbsp;https://crates.io/crates/freebsd-kpi-r14-0</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 05:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276426/freebsd-considers-rust-base</guid>
            <link>https://www.oschina.net/news/276426/freebsd-considers-rust-base</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[有道開源 RAG 引擎 QAnything 版本更新啦]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="208" src="https://oscimg.oschina.net/oscnet/up-67e056e24f60398bb7bf271d9d54549517a.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FQAnything" target="_blank" rel="nofollow">https://github.com/netease-youdao/QAnything</a></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><strong><span><span>近日，我們將我們的</span>RAG<span>（基於檢索增強的生成，Retrieval Augmented Generation）</span></span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzA3NDgxOTk0Nw%3D%3D%26mid%3D2247487167%26idx%3D1%26sn%3D37b169a72c023534bca4e855fb74d384%26scene%3D21%23wechat_redirect" target="_blank" rel="nofollow">引擎 QAnything 開源了</a></strong></span><strong><span><span>，用户可以傳入 doc, pdf, 圖片，ppt, excel 等各種類型的文檔，就可以基於這些文檔問答，像 "</span>chatgpt<span>" 一樣的體驗。本次開源包括了 embedding, rerank, LLM，</span></span>向量數據庫<span>等所有必要的模型和系統模塊，用户可以一鍵下載，純本地搭建大模型問答系統，馬上開始使用。</span></strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="957" src="https://oscimg.oschina.net/oscnet/up-7e9ee4cc9ff72de7100d208ace2888f68ab.png" width="1080" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center">（QAnything 引擎系統架構圖）</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><strong>QAnything 受到廣大開發者的密切關注，<strong>開源近兩週，</strong>star 迅速漲到接近 2000，昨日 QAnything 進入到了 github 的 trending 版。</strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="533" src="https://oscimg.oschina.net/oscnet/up-9edabedec54be4f3aece687806112a66d1d.png" width="800" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><span>&nbsp; &nbsp;</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:center"><img alt="" height="823" src="https://oscimg.oschina.net/oscnet/up-b90732602b9da060344c0372ed724bcc120.jpg" width="1026" referrerpolicy="no-referrer"></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:justify">&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><strong>QAnything 開源後，廣大用户給我們提了很多的意見。我們研發人員日夜不停的回答用户問題，並緊鑼密鼓的改代碼。昨日，我們發佈了一個 Release 更新：</strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span style="color:#000000"><strong>QAnything 版本 V1.1.0</strong></span><strong>，讓安裝過程更簡單，體驗更流暢。</strong></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnetease-youdao%2FQAnything%2Freleases%2Ftag%2Fv1.1.0" target="_blank" rel="nofollow"><span>https://github.com/netease-youdao/QAnything/releases/tag/v1.1.0</span></a></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left"><span><strong>Features:</strong></span></p><p><span><strong>- 安裝過程更簡單</strong></span></p><p><span><strong>&nbsp; -&nbsp;</strong>優化啓動流程，支持一鍵啓動：執行 bash run.sh 即可</span></p><p><span>&nbsp; -&nbsp;優化安裝過程的交互，提示信息更友好</span></p><p><span><strong>- 體驗更流暢</strong></span></p><p><span>&nbsp; -&nbsp;優化前端啓動速度，秒打開。感謝網友@jsoncode 的貢獻！</span></p><p><span><strong>- 部署選擇更多</strong></span></p><p><span>&nbsp; -&nbsp;優化顯存佔用，支持多 GPU 部署，目前支持單卡或雙卡部署，雙卡兩張卡顯存佔用分別為 11G，5G</span></p><p><span><strong>- 其他優化</strong></span></p><p><span><strong>&nbsp;</strong><span>&nbsp;</span>-&nbsp;向量庫佔用空間減少到原來的 1/3&nbsp;</span></p><p><span>&nbsp; -&nbsp;優化 xlsx，html 切分 chunk 時 size 過大導致的解析失敗</span></p><p><span>&nbsp; -&nbsp;優化知識庫內只有單文檔時回答的效果</span></p><p><span>&nbsp; -&nbsp;優化 pdf 解析效果，pdf 解析速度</span></p><p><span>&nbsp; -&nbsp;提供原始未修改 DockerFile</span></p><p style="color:rgba(0, 0, 0, 0.9); margin-left:0; margin-right:0; text-align:left">&nbsp;</p><p style="color:#000000; margin-left:0; margin-right:0; text-align:justify"><strong>QAnything 還在不斷迭代升級中，歡迎大家下載使用並提供寶貴反饋！</strong></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 04:20:12 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/youdaotech/blog/10894309</guid>
            <link>https://my.oschina.net/youdaotech/blog/10894309</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[飛致雲旗下開源項目 GitHub Star 數量突破 100,000 個！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#000000; text-align:start"><span><span style="color:#000000">2024 年 1 月 19 日，</span><strong><span style="color:#00355d">中國領先的開源軟件提供商 FIT2CLOUD 飛致雲宣佈，其旗下開源項目在代碼託管平台 GitHub 上所獲得的 Star 數量已經超過 100,000 個。</span></strong>與此同時，飛致雲旗下開源項目的月度新增軟件下載次數也超過 100,000 次。</span></p><p style="color:#000000; text-align:start"><img alt="" height="1080" src="https://oscimg.oschina.net/oscnet/up-e9826cd18696f364c38f706941565519335.jpg" width="1920" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span><span style="color:#000000">飛致雲的開源之旅起步於 2017 年 11 月對 JumpServer 開源堡壘機項目（</span></span><em><span><span style="color:#000000">https://github.com/jumpserver</span></span></em><span><span style="color:#000000">）的收購。此後基於長期的開源企業戰略和持續完善的社區生態，飛致雲相繼創立 MeterSphere 開源持續測試平台項目（</span></span><em><span><span style="color:#000000">https://github.com/metersphere</span></span></em><span><span style="color:#000000">）、DataEase 開源數據可視化分析平台項目（</span></span><em><span><span style="color:#000000">https://github.com/dataease</span></span></em><span><span style="color:#000000">）和 1Panel 開源面板項目（</span></span><em><span><span style="color:#000000">https://github.com/1Panel-dev</span></span></em><span><span style="color:#000000">），並且於 2021 年 1 月收購 Halo 開源建站工具項目（</span></span><em><span><span style="color:#3e3e3e"><span style="background-color:#feffff">https://github.com/halo-de</span></span><span style="color:#3e3e3e">v</span></span></em><span><span style="color:#3e3e3e"><span style="background-color:#feffff">）。</span></span></span></p><p style="color:#000000; text-align:start"><img alt="" height="574" src="https://oscimg.oschina.net/oscnet/up-a1bf6c4efe509ab85e280ab4441fdccdbc9.png" width="1396" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start">在創新與併購的雙輪驅動下，飛致雲以「為數字經濟時代創造好軟件」為使命的開源生態體系不斷髮展壯大。目前，飛致雲旗下開源項目的貢獻者超過 1,700 位，有超過 7,000 位社區用户提交 Issue，Fork 總數量超過 24,000 次，PR（(Pull Request）數量超過 43,000 次。另據不完全統計，飛致雲開源社區交流總人數已經超過 30,000 人。</p><p style="color:#000000; text-align:start">飛致雲旗下五大核心開源項目的產研體系高速迭代又彼此聯動，並且通過開源社區運營持續收集用户反饋，與廣大社區用户保持高頻的良性互動，基於用户反饋不斷優化開源軟件產品。與此同時，飛致雲的開源增值服務模式也在過去的六年間不斷髮展和優化。目前在中國市場，飛致雲的開源付費用户已經超過 2,500 家，廣泛覆蓋金融、製造、能源、交通、醫療、教育、通信、傳媒、房地產、互聯網等行業。</p><p style="color:#000000; text-align:start">軟件是支撐數字經濟時代發展的重要基石。《「十四五」軟件和信息技術服務業發展規劃》指出，「開放、平等、協作、共享的開源模式，加速軟件迭代升級，促進產用協同創新，推動產業生態完善，成為全球軟件技術和產業創新的主導模式。當前，開源已覆蓋軟件開發的全域場景，正在構建新的軟件技術創新體系，引領新一代信息技術創新發展，全球 97% 的軟件開發者和 99% 的企業使用開源軟件，基礎軟件、工業軟件、新興平台軟件大多基於開源，開源軟件已經成為軟件產業創新源泉和‘標準件庫’。同時，開源開闢了產業競爭新賽道，基於全球開發者眾研眾用眾創的開源生態正加速形成。」</p><p style="color:#000000; text-align:start">FIT2CLOUD 飛致雲 CEO 阮志敏表示：<strong><span style="color:#00355d">秉持「軟件用起來才有價值，才有改進的機會」的核心價值觀，飛致雲正在向着「成為中國數字化團隊首選的通用工具軟件提供商」的願景目標不斷前行。在開源的道路上，我們與用户、與客户共成長。</span></strong></p><p style="color:#000000; text-align:start"><img alt="" height="890" src="https://oscimg.oschina.net/oscnet/up-2505ad47bc0e6df4ad47aa0868c55b792d0.png" width="1619" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 圖 1 飛致雲開源大屏（2024 年 1 月 18 日 14:00）</span></p><p style="color:#000000; text-align:start"><img alt="" src="https://oscimg.oschina.net/oscnet/up-74c6a47084bfb41b02f7e7ccb612faf1db8.png" referrerpolicy="no-referrer"></p><p style="color:#000000; text-align:start"><span>▲ 圖 2 飛致雲公司概覽大屏（2024 年 1 月 18 日）</span></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 04:18:12 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4736111/blog/10919084</guid>
            <link>https://my.oschina.net/u/4736111/blog/10919084</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Nacos 2.3.0 正式版發佈，Nacos Controller 項目開源]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>作者：楊翊</p><h2>新版本發佈</h2><p>Nacos 2.3.0-BETA 版本經過 1 個多月的社區測試，修復了部分的問題並對部分新功能的使用進行了少量優化後，於 2023 年 12 月 7 日正式發佈。</p><p>Nacos 2.3.0 版本基於&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzUzNzYxNjAzMg%3D%3D%26mid%3D2247559032%26idx%3D1%26sn%3Dd9396e3bddc180e2bbeaea08c3286670%26chksm%3Dfae7ecb7cd9065a13b2aac2de154be3b682544b531c54fe3371fa8e78eef5953e05d6298010e%26scene%3D21%23wechat_redirect" target="_blank">2.3.0-BETA</a>&nbsp;版本為基礎，主要進行了如下更新：</p><ul><li>基於能力協商機制，支持通過 Grpc 的方式進行持久化服務實例的註冊及刪除。</li><li>Console UI 中顯示更多內容，例如部署模式等。</li><li>對參數校驗功能的實現方式進行優化。</li><li>對 TopN 指標的實現進行重構，優化準確性和內存消耗。</li></ul><p>詳細的更新日誌請查看：</p><pre><code>## Feature
[#11393] Support register or deregister persistent instance by grpc.

## Enhancement&amp;Refactor
[#11275] Enhance console ui deploy, show more information like `mode`.
[#11298] Strip groupNamePrefix of instance serviceName at register or deregister.
[#11310] Simplify the validate method for serviceinfo.
[#11342] Simplify BatchDeregister instances conditions to ip and port.
[#11343] Simplified parameters checker control logic.
[#11352] Refactor topN logic to enhance memory usage and accuracy.

## BugFix
[#10353] Handling DataIntegrityViolationException and DuplicateKeyException together.
[#11299] Fix console ui auth pagination failure.
[#11382] Fix console ui listening query pagination failure.
[#11384] Fix console ui comparing configuration failure.
[#11390] Fix Config EncryptionPluginService order problem.
[#11442] Fix listen configuration check failed without namespace.

## Dependency
[#11216] Declare httpcore as direct dependency to fix avoid conflict.
[#11396] Upgrade jackson same with spring boot dependency.
[#11439] Upgrade some UI component to solve security problem.
</code></pre><h2>Nacos Controller 項目開源</h2><p>在雲原生下，應用代碼與運行環境可以通過 Helm 或 Kustomize 等軟件進行交付、維護、CICD，但應用的 Nacos 配置依然需要手工地遷移、或使用控制枱修改發佈配置。藉助於&nbsp;Nacos Controller <strong>[</strong><strong>1]</strong> 項目，我們可以將 Nacos 配置管理下移到 Kubernetes 集羣中，又或是可以將 Kubernetes 中 ConfigMap 配置上移到 Nacos 控制枱中，從而實現統一管理能力。</p><h3>Nacos 配置下移到 Kubernetes 集羣中</h3><h4>工作機制</h4><p>Nacos Controller 監聽集羣內的 DC 資源，當 DC 資源發生變化時，Nacos Controller 將其中的配置內容同步到 Nacos Server 中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d13902a108e460eea74465f3e4c110b0598.png" alt="" referrerpolicy="no-referrer"></p><h4>簡易 Demo</h4><p>在 Nacos Controller 中，我們定義了一份 CRD：DynamicConfiguration（簡稱 DC），我們將 Nacos 配置保存在 ConfigMap 中，對配置的任何修改都通過 DC 將其中的配置同步到對應的 Nacos 服務端中。在後續的配置維護中，直接修改對應的 ConfigMap 即可。以下是一份簡易的 Demo 示例：</p><pre><code>apiVersion: nacos.io/v1
kind: DynamicConfiguration
metadata:
    name: dc-demo-cluster2server
spec:
  dataIds:
  - data-id1.properties
  - data-id2.yml
  nacosServer:
    endpoint: &lt;your-nacos-server-endpoint&gt;
    namespace: &lt;your-nacos-namespace-id&gt;
    group: &lt;your-nacos-group&gt;
    authRef:
      apiVersion: v1
      kind: Secret
      name: nacos-auth
  strategy:
    syncPolicy: Always
    syncDirection: cluster2server
    syncDeletion: true
  objectRef:
    apiVersion: v1
    kind: ConfigMap
    name: nacos-config-cm

---
apiVersion: v1
kind: ConfigMap
metadata:
    name: nacos-config-cm
    namespace: default
data:
    data-id1.properties: |
      key=value
      key2=value2
    data-id2.yml: |
      app:
        name: test

---
apiVersion: v1
kind: Secret
metadata:
    name: nacos-auth
data:
    ak: &lt;base64 ak&gt;
    sk: &lt;base64 sk&gt;
</code></pre><h3>Kubernetes 配置上移到 Nacos 控制枱</h3><h4>工作機制</h4><p>首先需要用户創建 DC 資源指定需要同步哪些 DataId，Nacos Controller 根據讀取到的 DC 配置，選擇性監聽 Nacos Server 中的相關配置並將配置改動同步到 Kubernetes 集羣中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-d736813e431613b6413591d077040fda436.png" alt="" referrerpolicy="no-referrer"></p><h4>簡易 Demo</h4><p>雲原生下，應用除了需要加載 Nacos 配置外，還可能依賴一些環境變量，比如 JVM 參數通過環境變量注入。做得比較好的方式是通過 ConfigMap 等 Kubernetes 原生方式管理配置，通過引用的方式傳遞給應用 Pod。在 Nacos Controller 中，我們可以定義一份 DC，將 Nacos 服務端中的某些 DataId 同步到 Kubernetes 集羣中的 ConfigMap 中，從而實現配置的統一管理。以下是一份示例 Demo：</p><pre><code>apiVersion: nacos.io/v1
kind: DynamicConfiguration
metadata:
    name: dc-demo-server2cluster
spec:
  dataIds:
  - APP1_JVM_PARAMS
  - APP2_JVM_PARAMS
  nacosServer:
    endpoint: &lt;your-nacos-server-endpoint&gt;
    namespace: &lt;your-nacos-namespace-id&gt;
    group: &lt;your-nacos-group&gt;
    authRef:
      apiVersion: v1
      kind: Secret
      name: nacos-auth
  strategy:
    syncPolicy: Always
    syncDirection: server2cluster
    syncDeletion: true
---
apiVersion: v1
kind: Secret
metadata:
    name: nacos-auth
data:
    ak: &lt;base64 ak&gt;
    sk: &lt;base64 sk&gt;
</code></pre><h3>雲原生下的配置管理最佳實踐</h3><p>在使用 Kubernetes 的場景下，一個微服務應用的配置被分割成兩部份，一部分存放管理在 Kubernetes 集羣中的 Secret 或 ConfigMap 中，另一部份存放管理與 Nacos 配置中心。對於運維人員，我們需要知道哪些配置是存放在何處且同時需要對兩個平台的配置管理操作均有所瞭解，一來是增加了運維人員的知識門檻，二來是增加了應用配置運維的操作成本。通過 Nacos Controller 項目，我們將應用的所有配置集中於一處管理，降低應用配置運維的門檻與複雜性。</p><p><img src="https://oscimg.oschina.net/oscnet/up-15236dda6a0b791d16c3d87a0ff0ebbd209.png" alt="" referrerpolicy="no-referrer"></p><h4>面向 Kubernetes 運維偏好的用户</h4><p>通過 Nacos Controller 項目，我們將應用與應用配置的交付和維護集中在 Kubernetes 集羣中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ab4b6aba57a492717aa28a51934ed9fdddc.png" alt="" referrerpolicy="no-referrer"></p><p>以下通過一份 Helm 應用 Chart 包説明如何集中管理。</p><pre><code>.
├── Chart.yaml
├── charts
├── conf
│   ├── application-dev.properties
│   ├── application.properties
│   ├── consumer-app.properties
│   └── provider-app.yaml
├── templates
│   ├── consumer.yaml
│   ├── dc.yaml
│   └── provider.yaml
└── values.yaml
</code></pre><p>以上是一份 Chart 包目錄結構，其中 conf 目錄存放的是 Nacos 配置，文件名即 DataId，文件內容即對應的 Content。在 templates/dc.yaml 中，我們定義一份 ConfigMap 來組裝這些配置。templates 目錄中的 consumer.yaml 與 provider.yaml 分別是應用定義。</p><pre><code>apiVersion: v1
kind: ConfigMap
metadata:
  name: nacos-config
  namespace: {{ .Release.Namespace }}
data:
  {{- range $path, $_ := .Files.Glob "conf/**" }}
  {{ $path | base }}: |-
{{ $.Files.Get $path | indent 4}}
  {{- end }}
</code></pre><p><strong>使用上述方式定義好應用與配置後，可以藉助 git 實現應用、配置的版本管理。當需要發佈應用或配置時，修改對應文件後，執行 helm upgrade 命令即可。</strong></p><h4>面向 Nacos 運維偏好的用户</h4><p>Nacos 配置管理能力使得應用可以動態調整運行配置，但對於一些特殊的參數，如 JVM 參數、特殊環境變量、特殊目錄文件等內容，Nacos 配置管理依然無法涵蓋。在 Kubernetes 集羣中，我們一般將環境變量或一些特殊文件配置寫入 ConfigMap 中，通過 envFrom 能力將內容引用到環境變量中或者 volumeMount 掛載到文件系統中。這樣的配置管理能力與 Nacos 配置管理能力是散開的，不利於統一管理。藉助於 Nacos Controller，我們將這些配置上移到 Nacos 控制枱中，進行統一管理。</p><p><img src="https://oscimg.oschina.net/oscnet/up-7f674fb17e9b9797cbd3b76836c621c638b.png" alt="" referrerpolicy="no-referrer"></p><p>以下是一份 Demo 應用，通過 Nacos 控制枱管理 JVM 啓動參數：</p><pre><code>apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: demo-app
  template:
    metadata:
      labels:
        app: demo-app
    spec:
      containers:
      - name: demo-app
        image: openjdk:8 #替換為你的應用鏡像
        command: ["/bin/sh", "-c", "java -jar ${JVM_PARAMS} /app.jar"]
        env:
        - name: JVM_PARAMS # 從 ConfigMap 中載入 JVM 參數到環境變量中
          valueFrom:
            configMapKeyRef:
              name: nacos-config
              key: APP1_JVM_PARAMS

---
apiVersion: nacos.io/v1
kind: DynamicConfiguration
metadata:
    name: nacos-config
spec:
  dataIds:
  - APP1_JVM_PARAMS
  - APP2_JVM_PARAMS
  nacosServer:
    endpoint: &lt;your-nacos-server-endpoint&gt;
    namespace: &lt;your-nacos-namespace-id&gt;
    group: &lt;your-nacos-group&gt;
    authRef:
      apiVersion: v1
      kind: Secret
      name: nacos-auth
  strategy:
    syncPolicy: Always
    syncDirection: server2cluster
    syncDeletion: true
---
apiVersion: v1
kind: Secret
metadata:
    name: nacos-auth
data:
    ak: &lt;base64 ak&gt;
    sk: &lt;base64 sk&gt;
</code></pre><p>在 Nacos 控制枱中，修改 DataId：APP1_JVM_PARAMS 後，配置將自動同步到集羣的 ConfigMap 中。只需重啓相關應用，則對應的 JVM 參數將自動變化。<strong>成功實現將應用的所有配置集中管理在 Nacos 上。</strong></p><h2>Nacos 社區新晉&nbsp;Committer</h2><p>社區中新增了 2 位 Committer&nbsp;Karsonto <strong>[</strong><strong>2]</strong> 和&nbsp;Daydreamer-ia <strong>[</strong><strong>3]</strong> 。同時，Nacos 社區又迎來了一位來自開源之夏的 Committer 同學&nbsp;Daydreamer-ia&nbsp;。</p><p><img src="https://oscimg.oschina.net/oscnet/up-cff13fc011b530801a7a7de4e3fe2b1e895.png" alt="" referrerpolicy="no-referrer"></p><h2>展望</h2><h3>2.X 後續計劃</h3><p>從 2021 年 3 月 2.0.0 正式版發佈至今，2.X 版本已經走了接近 2 年時間，如今 2.3.0 版本發佈，完成了大部分功能的插件化提煉，在之後的 2.3.X 版本中，會主要對當前版本的問題進行修復，並做出小範圍的功能優化。同時對於 2.4.0 版本，會作為一個 Nacos3.0 的過度版本，對大量代碼進行優化重構，在提升穩定性、健壯性的同時，提升易用性和可觀測性，向 Nacos3.0 版本平穩過度。</p><h3>3.0 計劃</h3><p>Nacos 社區同時也開啓了關於&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzU4NzU0MDIzOQ%3D%3D%26mid%3D2247511397%26idx%3D3%26sn%3D3ed3ef95e5ce1e396554ba4f370a0254%26scene%3D21%23wechat_redirect" target="_blank">Nacos3.0</a>&nbsp;的暢想和規劃，Nacos 將會從統一控制面、支持國產化、存儲計算分離等方向進一步演進 Nacos 的功能和架構，歡迎社區積極參與到新版本的建設中。</p><p><img src="https://oscimg.oschina.net/oscnet/up-ae6e82384f221721d25cb6bc6624f7117ac.png" alt="" referrerpolicy="no-referrer"></p><p><img src="https://oscimg.oschina.net/oscnet/up-1fba0033910e46bee9c0a01b2d4172ae33e.png" alt="" referrerpolicy="no-referrer"></p><h2>About Nacos</h2><p>Nacos 致力於幫助您發現、配置和管理微服務。Nacos 提供了一組簡單易用的特性集，幫助您快速實現動態服務發現、服務配置、服務元數據及流量管理。Nacos 幫助您更敏捷和容易地構建、交付和管理微服務平台。Nacos 是構建以「服務」為中心的現代應用架構 (例如微服務範式、雲原生範式) 的服務基礎設施。</p><p>最後歡迎大家使用釘釘搜索羣號加入 Nacos 社區羣，釘釘羣號：12810027056</p><p><strong>相關鏈接：</strong></p><p>[1]&nbsp;Nacos Controller</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fnacos-group%2Fnacos-controller" target="_blank">https://github.com/nacos-group/nacos-controller</a></em></p><p>[2]&nbsp;Karsonto</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fkarsonto" target="_blank">https://github.com/karsonto</a></em></p><p>[3]&nbsp;Daydreamer-ia</p><p><em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FDaydreamer-ia" target="_blank">https://github.com/Daydreamer-ia</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 04:17:12 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/3874284/blog/10918936</guid>
            <link>https://my.oschina.net/u/3874284/blog/10918936</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[「回看 Milvus 的 2023」：AI 熱潮中的非典型向量數據庫]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2023 年是 AI 應用開發領域的一個重要轉折點。</p><p>在這一年裏，大語言模型（LLMs）因其卓越的自然語言處理能力而廣受讚譽，極大地拓寬了機器學習應用的場景。開發者們逐漸意識到，有了 LLMs，他們可以設計出更智能、更容易互動的應用程序。與此同時，「向量數據庫」已成為業界的熱門話題，其作為大型模型長期記憶的角色得到了認可。像 RAG（檢索增強生成）模型、智能代理和多模態檢索等應用的興起生動地展示了向量數據庫在實現高效多模態數據檢索、減少大型模型的幻覺以及補充領域知識方面的巨大潛力。</p><p>此外，2023 年大模型技術的發展也帶來了另一個重要變化——嵌入提取能力的顯著提升。根據 Huggingface 上的 MTEB 排行榜數據，像 UAE、VoyageAI、CohereV3 和 bge 這樣的性能領先嵌入模型都在 2023 年發佈。它們的迅速發展進一步增強了向量檢索的有效性，為各種 AI 應用提供了更精確、更高效的數據處理能力。</p><p>當然，在這一年中，得益於應用場景的演變、資本投資和媒體炒作，向量數據庫已成為一個廣為人知的技術術語。數十家初創公司進入向量數據庫領域，許多傳統數據庫開始將向量作為一個重要的數據類型對待。然而，隨着知名度的提升，爭議也隨之而來，激起了關於專門向量數據庫必要性的辯論。無論是關係數據庫、NoSQL 還是搜索引擎，在許多情況下似乎都能替代向量數據庫。</p><p>回顧完熱鬧的 2023 年，我們來談談 2024 年。在我看來，2024 年伊始是個審視向量數據庫行業的好時機，包括在這一領域中獨樹一幟的 Milvus。</p><p>以下報告最初是為我們的 Milvus 社區內部反思而製作的，通過大模型重新整理，旨在提供對過去一年內向量數據庫領域真正進步和趨勢的清晰而詳細的視角。這將幫助 AIGC 應用開發者在技術選擇上做出更有教育意義和戰略性的決策。</p><h2>01.數據不會説謊</h2><p>Milvus 是全球第一款向量數據庫，首次開源是在 2019 年，以其高可靠性、可擴展性、搜索質量和性能而聞名。2023 年，我們見證了 AIGC 應用場景的演變所驅動一個向量數據庫重要的轉變，以下是一些最能代表 Milvus 在 2023 年進展的關鍵數據：</p><h3>0 - 滾動升級期間零停機時間</h3><p>對於許多向量數據庫的新手來説，他們選型的關注點往往更多地在功能上而非運營維護。應用開發者通常對他們的向量數據庫的穩定性的關注比對事務性數據庫的需求要低得多，因為他們的應用程序通常處於非常早期階段。然而，在 AIGC 應用領域，如果你想在生產環境中部署你的應用程序並實現最佳用户體驗，穩定性和可維護性就變得不可或缺。意識到這一點，Milvus 從 2.2.3 版本開始引入了滾動升級，通過在多個版本中持續改進，逐漸變得更加穩定，並最終實現了零停機時間的滾動升級。</p><h3>3X - 生產環境中的性能提升</h3><p>向量檢索的性能一直是向量數據庫的關注焦點。Zilliz 發佈了 VectorDB bench，以幫助測試不同場景下的向量檢索性能。與過去的方法不同，VectorDB bench 現在專注於真實世界的數據，包括更接近實際嵌入模型的數據集（如最新的 OpenAI 嵌入和 Clip 數據集）、更廣泛的測試場景（包括過濾、實時更新,刪除）和更大的測試數據集（大多數當前的測試框架針對的是小而固定的數據點，如果某些 vectordb 在數據集上作弊可能會誤導）。</p><p>目前，大多數向量檢索供應商提供的解決方案都圍繞開源 HNSW 算法的調整，這在各種生產部署中遇到顯著的性能挑戰，尤其是在涉及高過濾（超過 90%）和頻繁刪除的場景中。Milvus 在 2023 年不僅專注於最大化實驗室性能，而且轉向解決用户生產環境中的這些真實世界性能問題，在過濾、流式插入查詢等實際生產場景實現了 3 倍以上的性能提升。</p><h3>5% - Beir 數據集上的召回率提升</h3><p>Dense Embedding 雖然有效，但在某些場景中依然存在侷限性，如搜索特定名稱、對象、某些縮寫和短查詢上下文。Sparse Embeding 在這些情況下可以與 Dense Embedding 互補，結合 ReRanking，在一些數據集上實現了 5% 的 NDCG<a href="https://my.oschina.net/u/3333828">@10</a> 提升。除了搜索質量之外，Milvus 還引入了一種基於圖的 Sparse Embedding 檢索解決方案，顯著超過 WAND 等傳統搜索方法。在 NeurIPS BigANN 競賽中，Zilliz 員工王子豪提出的名為 Pyanns 的解決方案，並獲得了全球第一的成績，這個解決方案也是我們生產 Sparse Sembedding 方案的前身。隨着稀疏嵌入提取模型和 Reranker 的不斷髮展，向量數據庫中混合查詢的重要性將越來越大。（事實上，儘管 Splade 目前是最佳的稀疏向量提取模型，效果大大超過了 BM25 的檢索結果，根據我們的測試結果它可能不久後就不再是最佳的稀疏嵌入模型了。）</p><h3>10 倍 - 內存節省</h3><p>在 2023 年，檢索增強生成（RAG）模型被廣泛認為是向量數據庫的最主要應用之一。我們發現，在文檔被分割成塊之後，一個含有 500 個 Token 的 Chunk（通常 1000 字節）會轉換成一個 1536 維的 float32 向量（通常 3000 字節），這意味着向量數據的體積可能會超過原始文檔的大小，給成本帶來了重大挑戰。</p><p>作為第一個支持基於磁盤索引的開源向量數據庫，Milvus 通過磁盤混合存儲實現了五倍的內存節省。2023 年末的 Milvus 新版本允許通過內存映射文件（MMap）將標量和向量數據/索引加載到磁盤，與傳統的內存索引相比，這可以實現超過 10 倍的內存節省。特別值得注意的是，RAG 應用常展現出對冷熱數據不同的使用模式，這使得 MMap 數據緩存能力對於 RAG 應用尤其有益。</p><h3>20 次 - 版本迭代</h3><p>2023 年對 Milvus 而言是一個轉折性的年份。隨着應用場景的顯著演變，Milvus 的設計理念也相應地發生了改變。在 2.2.9 版本中引入的動態 Schema，標誌着 Milvus 從優先追求絕對性能向更強調用户友好性的轉變。我們在 2.3 版本中加入了諸如 Upsert、範圍搜索以及餘弦相似度等關鍵特性，均來自於用户的呼聲。整個年度的 20 次版本更新不僅體現了超過 300 名社區開發者的心血，也足以證明瞭社區以用户為中心的開發模式所帶來的積極成果。</p><h3>100 萬 - 單個集羣支持的租户數量</h3><p>在構建大模型應用時，多租户支持是關鍵特性，特別是在 RAG 和代理應用場景中，用户對數據隔離的要求越來越高。在面向消費者（ToC）的環境下，租户數量可能高達數百萬，這使得物理數據隔離變得不實際（在關係數據庫中創建數百萬個表是不可行的）。為應對這一挑戰，Milvus 引入了 PartitionKey 功能，使得基於 PartitionKey 的邏輯隔離和高效數據過濾成為可能。</p><p>在面向企業（ToB）的場景中，租户數量通常在數萬級別，實施物理資源隔離策略更加可行和可控。因此，在 2.3.4 版本中，Milvus 對內存管理、協程處理和 CPU 優化進行了顯著改進。這些改進使得在單個集羣中創建數萬個 Collection 變得可行，從而可以使用一個 Collection 一個租户的方式支持多租户。</p><h3>1000 萬次 - Docker 鏡像拉取</h3><p>在 2023 年的最後一天，Milvus 慶祝了一個引人注目的里程碑：達到 1000 萬次 Docker 鏡像下載。這一成就不僅凸顯了全球開發者對 Milvus 的興趣在與日俱增，也強調了 Milvus 在向量數據庫領域中日益增長的重要性。作為世界上第一個雲原生向量數據庫，Milvus 一直與 Kubernetes 和容器生態系統緊密結合。那麼未來呢？很多開發者都會好奇，向量數據庫領域的下一個熱點會是什麼？可能是無服務器架構（Serverless）嗎？這裏先賣個關子。</p><h3>100 億 - 單個 Collection 中的實體數量</h3><p>儘管在當前的 AI 熱潮中，可擴展性可能不是最吸引眼球的部分，但它仍然對業務的成功至關重要。</p><p>以一個實例來説明，我們就曾用 Milvus 幫助一個大型模型供應商從一個龐大的 100 億數據點集合中提取出深層價值。當然，並非所有用户的數據量都如此龐大，但 Milvus 以強大的可擴展性輕鬆適配不同數據體量的用户。</p><p>例如，在面對 1000 萬個數據點時，Milvus 的處理速度堪稱「如手指滑過絲綢般順滑」，為相應用户業務的持續發展打下堅實的基礎。在面對 1 億個數據點時，Milvus 可能是唯一一個能夠有序、靈活處理該規模的向量數據庫。當數據點高達 10 億時，用户往往面臨成本與性能的雙重挑戰，Milvus 則可以通過多種優化方式幫助用户解決這一困境。最後，如果大家有誰正面臨着處理 100 億數據實體的挑戰——請毫不猶豫地聯繫我們！我們可以共同探索如何支持和管理上述海量數據。</p><h2>02.向量數據庫的新認知</h2><p>除了數字上的里程碑，2023 年業務模式的改變也帶來了很多定性的認知。這些認知幫助我們深化了對向量這種數據類型的理解，也引導了我們思考向量數據庫未來的發展方向。</p><h3>大模型應用仍處於初期階段：避免重蹈智能手機時代「手電筒應用」的覆轍</h3><p>回顧移動互聯網早期，許多開發者創建瞭如手電筒或天氣預報等簡單應用，這些應用最終被整合到智能手機操作系統中。如今，大多數 AI 原生應用，例如迅速在 GitHub 上獲得 100,000 星的 AutoGPT，並未提供實際的業務價值，只是一些有價值的嘗試。這意味着 AIGC 場景對大模型和向量數據庫的應用都處於早期階段，對今年的向量數據庫使用場景可能只是 AI 原生轉型的第一波浪潮，期待真正的殺手級應用出現。</p><h3>向量數據庫持續分化</h3><p>就像數據庫發展為 OLTP、OLAP 和 NoSQL 等不同類型一樣，2023 年的向量數據庫開始顯示出多樣化的趨勢。超越傳統的在線服務範圍，離線分析領域變得更為重要，已經有專門的向量數據庫系統面向數據準備和分析領域。GPTCache 是我們在 2023 年開源的項目，旨在利用向量檢索 Cache 大模型輸出，這也為向量數據庫開拓了緩存這一全新的賽道。未來，我們滿懷希望並期待來年見證向量數據庫在更多樣化的應用場景和設計。</p><h3>向量語意的複雜性日增</h3><p>ANN 並非向量數據庫的唯一特性。許多人認為，支持最近鄰搜索就足以稱之為向量或 AI 原生數據庫。然而，向量所需的操作比想象中更為複雜。除了標量過濾和混合查詢外，為 AI 原生應用量身定製的數據庫應支持更復雜的語義能力，如 NN 過濾、KNN 聯接和集羣查詢。</p><p>對於 AI 原生應用而言，高彈性至關重要，但向量數據庫可能成為瓶頸</p><p>像 ChatGPT 這樣的 AI 應用，僅用兩個月時間月活躍用户就超過 1 億，其增長速度遠超以往任何業務。一旦業務開始加速增長，從 100 萬到 10 億數據點的快速擴展至關重要。AI 應用開發者受益於大型模型提供商提供的按需付費服務模式，顯著降低了運營成本。同樣，以符合這一模式的方式存儲向量數據對開發者有利，使他們能夠更專注於核心業務邏輯。與大型模型和其他依賴項不同，向量數據庫本質上維護狀態，這在可擴展性和彈性方面帶來了更大的挑戰。因此，在選擇向量數據庫時，彈性和可擴展性必須被視為關鍵因素。</p><h3>將機器學習應用於向量數據庫可以帶來驚人的高回報</h3><p>2023 年，我們大力投資 AI4DB，並取得了顯著的回報。與傳統數據庫相比，向量數據庫的固有不精確性使其更易於使用機器學習算法進行優化。我們引入了兩個關鍵能力：基於機器學習的自動參數調整索引 AutoIndex、基於數據聚類的數據分區策略，這兩者都顯著提高了 Milvus 企業版在雲上的搜索性能。</p><h3>開源與閉源</h3><p>在大型語言模型（LLM）領域，OpenAI 和 Claude 的閉源模型目前領先，而開源社區在沒有相當的計算資源和數據的情況下依然在苦苦掙扎。對於向量數據庫，我堅信開源最終將成為用户的首選。開源意味着更豐富的應用場景、更快的迭代和更強大的生態系統。更重要的是，數據庫是複雜的系統，不能像大型模型那樣不透明，用户必須充分理解數據庫本身才能找到最合理的使用的方式，開源的透明度對於用户來講不僅意味着自由更意味着可控。</p><h3>新的開始</h3><p>2023 年在大模型的變革中迅速流逝，而向量數據庫的故事似乎才剛剛開始。對於被認為是非典型向量數據庫的 Milvus 而言，我們的旅程並不是迷失在人工智能生成內容（AIGC）的熱潮中。</p><p>相反，我們專注於精心打造我們的產品，識別並培育最適合我們的應用場景，並致力於服務我們理想的用户羣體。我們希望對開源的承諾能夠彌合我們與用户之間的距離，讓他們即使在世界的任意一個角度都能感知到我們善意和工匠精神。</p><p>2023 年也見證了大量人工智能初創企業的成立和首輪融資。看到這些開發者的創新令人激動，這讓我想起了我最初為何投身於向量數據庫這一賽道。2024 年將是所有這些創新應用開始真正獲得關注的一年，不僅吸引融資，還會吸引真正的付費客户。這將為這些開發者帶來一系列全新的要求，因為構建一個幾乎不間斷、完全可擴展的解決方案至關重要……新的一年，我們頂峯相見！</p><p>本文作者系 Zilliz 合夥人、研發 VP 欒小凡</p><p>「你眼中的 Zilliz·2023」調研已開啓！歡迎各位在 Zilliz 微信後台私信我們，談談「過去一年你對 Zilliz 印象最深刻的一件事情是什麼？」範圍不限於 Zilliz 的單個產品，也可以談談對 Zilliz 的商業動態、線下活動、內容平台的文章等印象，字數不限，入選用户將收穫神秘禮物盲盒，歡迎來私～</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 03:52:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4209276/blog/10920789</guid>
            <link>https://my.oschina.net/u/4209276/blog/10920789</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[網易雲音樂第三方開源 API 因侵權被要求刪除]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>NeteaseCloudMusicApi 是 Node.js 編寫的非官方網易雲音樂 API，可用於獲取網易雲音樂平台的歌曲信息。該項目完全開源，在 GitHub 上的 star 數超過 3 萬。</p><p>根據公開的信息，NeteaseCloudMusicApi 主要是整理了網易雲音樂公開的網頁接口，在此基礎上進行聚合後以便其他項目進行調用。</p><blockquote><p><img src="https://oscimg.oschina.net/oscnet/up-5f0e449d6b5d2d7cbab05d8f27824a30533.png" referrerpolicy="no-referrer"></p></blockquote><p>近日，NeteaseCloudMusicApi 的開源倉庫清空了所有代碼，以及 commit 記錄等信息，並在 README 寫道：「<u><em>保護版權,此倉庫不再維護</em></u>」。</p><p><img src="https://oscimg.oschina.net/oscnet/up-a5fab4ac6b5a85c43ff9e4d4b90647baf96.png" referrerpolicy="no-referrer"></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.landiannews.com%2Farchives%2F101953.html" target="_blank">據稱</a>原因是網易雲音樂發送法律通知給 NeteaseCloudMusicApi 開發者，聲明該項目侵犯網易公司的相關版權，要求開發者立即下線該項目中<strong>盜鏈網易雲音樂的方法及內容</strong>。</p><blockquote><p>網易雲音樂由杭州網易雲音樂有限公司獨立開發運營，網易雲音樂作為國內知名的在線音樂平台，致力於為用户提供優質的音樂內容服務，我司以高額的成本採購了海量音樂作品的內容，在未我司合法授權的任何第三方均沒有權利播放由我司享有版權的音樂作品，我司有權以自己的名義或授權第三方進行維權。</p><p>我司收到用户的舉報，您開發的 NeteaseCloudMusicApi 或存在涉嫌通過非法破解網易雲音樂內容接口的方式獲取網易雲音樂享有版權的歌曲內容。</p><p>貴司未經我司授權，通過技術手段破解繞開限制直接提供網易雲音樂享有版權的音樂作品內容，該行為不僅侵犯了我司享有的音樂作品版權，亦非法攫取了網易雲音樂的用户流量構成不正當競爭，損害了我司作為權利人的合法權益。</p><p>同時貴方通過非法技術手段破解網站獲取大量歌曲內容的行為，涉嫌構成侵犯著作權罪，破壞 / 非法入侵計算機信息系統罪及 / 或提供破壞 / 非法入侵計算機信息系統工具罪。</p><p>針對上述侵權行為，根據中華人民共和國《著作權法》、《刑法》等相關法律法規規定，我司現鄭重致函：</p><p>1、立即，下線 NeteaseCloudMusicApi 上盜鏈網易雲音樂的方法及內容；</p><p>2、在未獲得我方授權的前提下，停止一切侵犯我司合法權益的行為。</p><p>請貴方充分認識到該行為的違法性和嚴重性，按照本函要求立即處理侵權行為，並將處理結果及時告知我方。若貴方怠於履行該項義務，為維護自身合法權益，我司將採取包括訴訟、投訴、舉報等在內的一切必要的法律措施確保合法權利得到有效保護。</p></blockquote></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 03:21:47 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276411</guid>
            <link>https://www.oschina.net/news/276411</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[驚訝！史上最年輕的 Apache Committer 誕生！！！]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-b74c559a04078fb6182d6af9815c351d338.png" referrerpolicy="no-referrer"></p><p>在 Apache StreamPark 被數以千計的星星和諸多榮譽的眷顧下，用户越來越多，遍佈各個行業。這一切的背後都是因為有一幫熱愛開源，願意投身開源項目建設的貢獻者。這其中有一批 「00 後」 的新星正悄然在社區嶄露頭角，他們正用自己的實際行動書寫着自己的開源故事。Apache StreamPark 社區近日迎來了兩位 「00」 後 Committer，下面讓我們一睹兩位 Committer 的風采。</p><span id="OSC_h1_1"></span><h1><strong>新晉 Committer&nbsp;之張超篇</strong></h1><hr><p><img height="648" src="https://oscimg.oschina.net/oscnet/up-63b75bc7d4a38c12ff48b29d44c7cf3bbe6.png" width="1216" referrerpolicy="no-referrer"></p><p><br><span style="background-color:#ffffff; color:rgba(0, 0, 0, 0.9)">很開心能夠被提名為 Apache StreamPark 的 Committer！非常感謝支持社區的每一位小夥伴！也感謝參與項目時社區的各位技術大拿們給予的指導和幫助！</span></p><p><iframe frameborder="no" height="400px" scrolling="no" src="https://player.bilibili.com/player.html?aid=666424225&amp;bvid=BV1Ra4y1C7EE&amp;cid=1411725695&amp;p=1" width="720px" referrerpolicy="no-referrer"></iframe></p><span id="OSC_h4_2"></span><h4>&nbsp;</h4><span id="OSC_h4_3"></span><h4><strong><strong><strong><strong><strong>主要貢獻</strong></strong></strong></strong></strong></h4><ol><li><p>Apache StreamPark 進入 Apache 孵化器期間參與從 MySQL 到 H2 數據庫的適配</p></li><li><p>變更 Mybatis-Plus 配置方式，簡化配置文件配置項</p></li><li><p>完善用户模塊刪除功能，部分前後端功能開發與適配，並追蹤後續討論、改進</p></li><li><p>參與整理、完成代碼風格和質量指南文檔，並參與相關代碼規範的推進工作</p></li><li><p>參與官網文檔的改進，完成中英文文檔編寫各 2 篇、翻譯 15&nbsp;篇以及其他文檔完善</p></li></ol><span id="OSC_h4_4"></span><h4><strong><strong><strong><strong><strong>結緣社區</strong></strong></strong></strong></strong></h4><p>對我來説，Apache 不僅僅是一個技術社區，它更像是一種信仰。在我還是個初學者的時候，提起 Apache Tomcat、Apache Maven 這樣的頂級項目，它們在我的心中就好像是編程世界的神話傳説。對於熱愛編程的我而言，Apache 代表着技術的極致、創新的精神，激勵着我不斷前行。想到有一天可能成為這個信仰的一份子，和全球的技術大牛們肩並肩，這種感覺，就像是夢想變成現實。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-7e1ecdc00c6b91bb4bab730f471cf204ac8.png" referrerpolicy="no-referrer"></p><p>我參與 Apache StreamPark 提交的第一個 PR 是處理客户端發起 GET 請求時攜帶了 「    」問題，是在 2022 年 8 月 28 日提交的，只用了一行箭頭函數的代碼就解決！持續貢獻到現在也已經一年多了。</p><p>在我印象中，那時 Apache&nbsp;StreamPark 還叫 StreamX，整個團隊都在為加入 Apache 孵化器做準備，這時項目急需對 H2 數據庫進行適配，而我正好是 Mybatis-Plus 的開發者。PMC 成員華傑哥[1]邀請我一同參與，我立馬答應了下來，然後開始從零瞭解 Apache StreamPark。即刻懷揣着興奮的心情，連夜肝代碼。第一個挑戰是 Windows 下的開發環境配置，消耗九牛二虎之力，總算終於跑通了代碼！等我抬頭一看發現天都亮了——時間真會玩，就這麼偷偷溜走了: )。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-270fbabed9d20e29eabf0f3261a698241f2.jpg" referrerpolicy="no-referrer"></p><p>後面我在陸陸續續參與開發中也遇到很多問題，記得印象很深的一次是有一天晚上在進行 Apache StreamPark 前端開發時，遇到一個前端組件的 BUG，處理了半天無果，最後求助社區的 PPMC 成員思柱哥[2]。思柱哥不僅幫我解決了問題，還手把手教我原理，真的很感謝思柱哥！這也是我切身感受到參與開源的樂趣之一，有很多技術大拿願意帶着你成長。</p><p>今年八月，我有幸去北京參加了 Apache Community Over Code 2023[3]。跟 Apache 社區的大佬們近距離接觸，真是開眼界了。Apache Way 最讓我印象深刻的就是 「社區大於代碼」 這個理念。特別是聽了 Apache Pulsar PMC 成員小狐狸小姐姐的演講後，我就豁然開朗：開源項目不僅僅是代碼，也需要一個文檔來告訴你它怎麼運作。因此我主動請纓參與文檔的完善工作，幫助社區文檔更友好！</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-02f03dc61579e20ce426bef16ae9accec92.png" referrerpolicy="no-referrer"></p><p>我每天都會堅持寫一篇博客，哪怕沒什麼可寫的技術題材，我也會堅持隨便積累一點。順帶一提我在任何地方都可以打開電腦寫代碼，譬如咖啡廳、飛機上、地鐵上等，甚至我去韓國旅遊時也在隨便找的一家咖啡廳處理 issue。</p><span id="OSC_h4_5"></span><h4><strong>社區印象</strong></h4><p>社區的大佬們真的各顯神通，在 Apache&nbsp;StreamPark 社區裏經常有熱心技術大拿願意提供幫助。並且也進一步地學習到不少開發規範和實用技巧，就比如讓代碼 「一塵不染」 的工具 Spotless、以及 Vue3 的知識點掌握等！在 Apache&nbsp;StreamPark 有一個使用登記收集的 Issue，其中有一條特別引起了我的注意：來自 「袁隆平農業高科技股份有限公司」 的使用登記。這家公司的名字源於雜交水稻之父袁隆平老先生，我為身處的社區能服務於這樣一家公司感到超級自豪。參與開源真的是一件很酷的事情！</p><span id="OSC_h4_6"></span><h4><strong>寄，語</strong></h4><p>從 Apache&nbsp;StreamPark 進入 Apache 孵化器，到現在一週年已經過去啦，期間讓人感動的瞬間數不勝數！期待更多小夥伴的加入和陪伴，咱們一同見證其從孵化器畢業，進一步為實時領域發展作出貢獻！</p><span id="OSC_h1_7"></span><h1><strong>新晉 Committer&nbsp;之蔡燦材篇</strong></h1><hr><p><img height="648" src="https://oscimg.oschina.net/oscnet/up-8120852d62a802a07553d710655b8046808.png" width="1216" referrerpolicy="no-referrer"></p><p>非常榮幸被提名為 Apache&nbsp;StreamPark 的 Committer！感謝社區的信任和肯定！感謝歷次討論、設計、協作和 review 過程中社區開發者給予的指導和幫助！</p><span id="OSC_h4_8"></span><h4><strong><strong><strong><strong><strong>主要貢獻</strong></strong></strong></strong></strong></h4><ol><li><p>參與 Kubernetes V2 Operator 重構 streampark-flink-kubernetes 模塊</p></li><li><p>測試、修復 streamp-flink-kubernetes 模塊並補充單元測試</p></li><li><p>積極參與方案討論、規範制定和代碼 Review</p></li><li><p>修復並完善官網文檔</p></li></ol><span id="OSC_h4_9"></span><h4><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>結緣社區</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></h4><p>Apache&nbsp;StreamPark 算是我第一個正式參與的開源項目,與社區結緣主要是因為 StremaPark PPMC 成員餘林穎哥[4](Al-assad)。那時候我想加入開源社區，但又覺得自己實力太菜，所以一直沒付諸行動。後面 Al-assad 就問我要不要參與 Apache&nbsp;StreamPark 社區，説有很多工作可以做，那時候我還有點怕自己會拖後腿，但大佬説有他兜底。我也就抱着試一試態度去參加了。</p><p>剛進社區，我就接下了三個 feature（真是初生牛犢不怕虎)，真實情況是因為那三個 feature 是很類似的需求，我就想一個是做，兩個也是做，那就一起接過來算了。一開始環境搭建在社區的各位大佬的幫助下，也是花了一星期時間成功搭建好了，後面就開始漫長的 debug 之旅。</p><p>在 debug 過程中，我也發現 Apache&nbsp;StreamPark 的一些問題，提了一些 PR 進行修復。令我比較驚訝的是，我的每個 PR 社區都回復的很快，並提了很多改進的意見、讓我學到了很多，也讓我更有動力。印象比較深的是：在完成第一個 feature 時，我寫的代碼其實很醜陋，幾個 PMC 成員們非凡不嫌棄還提了很多修改意見、鼓勵我慢慢改進，最後還是林穎哥出手才讓我第一個 feature 成功完成，那時候感覺自己幫了倒忙，感覺很不好意思。但 Al-assad 鼓勵我説是新人是這樣的啦，多進行嘗試就好了。在對第一個 feature 進行認真 review 代碼後，我後面兩個 feature 也順利完成了（雖然也是磕磕絆絆）。還記得最後一個 feature 合併的時候，我的心情都激動得快哭了，原來我也能做到自己曾經大學可望而可不及的事情（開源之夏）。記得之前有人看某個開源項目的時候，跟我説，你看這個人和你和你差不多大已經完成了三個 feature 了，我那時候在想什麼時候我也能這麼牛叉就好了，沒想到過了沒多久我也成為了 「這樣的人」，哈哈。</p><p>一開始，我打算搞完這三個 feature 就不參與社區了，後面認識了社區很多優秀的開發者讓我改變了這個想法，Apache&nbsp;StreamPark 社區開發者們非常的團結友善，核心貢獻者們更是犧牲休息時間投入到項目中，知道這一點的時候我十分吃驚。所以在這裏你能認識一羣真正熱愛代碼的人，我十分感謝在 Apache&nbsp;StreamPark 社區遇到每一位開發者，他們教會了我很多。在這個社區，我彷彿意識到開源精神的某種含義。</p><span id="OSC_h4_10"></span><h4><strong>寄，語</strong></h4><p>當然是希望 Apache&nbsp;StreamPark 社區越來越好啦，畢竟是我參加開源以來第一個加入的社區，期待新的小夥伴能加入進來，一起建設社區。如果是新手也不用害怕，我也是新手不也成功加入進來了嗎。祝 Apache StreamPark 能夠早日孵化成功, 祝各位 Apache&nbsp;StreamPark 社區的小夥伴都玩得開心，have fun！</p><span id="OSC_h1_11"></span><h1>**&nbsp;加，入 我，們&nbsp;**</h1><p>Apache&nbsp;StreamPark 是一個流處理應用程序開發管理框架。初衷是讓流處理更簡單，旨在輕鬆構建和管理流處理應用程序，提供使用 Apache Flink 和 Apache Spark 編寫流處理應用程序的開發框架，未來將支持更多其他引擎。同時，Apache&nbsp;StreamPark 提供了一個流處理應用管理平台，核心能力包括但不限於應用開發、調試、交互查詢、部署、運維、實時數倉等，於 2022 年 9 月通過投票正式成為 Apache 開源軟件基金會的孵化項目。</p><p>Apache&nbsp;StreamPark 社區一直以來都以用心做好一個項目為原則，高度關注項目質量，努力建設發展社區。我們時刻保持開發者謙遜樸素的本質，認真學習和遵循「The Apache Way」，秉承更加兼容幷包的心態，迎接更多的機遇與挑戰。誠摯歡迎更多的貢獻者參與到社區建設中來，和我們一道攜手共建。</p><p><img alt="" src="https://oscimg.oschina.net/oscnet/up-fb1f818f6981c4a0f1366a2ec6f60a7252e.png" referrerpolicy="no-referrer"></p><p>💻 項目地址：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fstreampark" target="_blank">https://github.com/apache/streampark</a><br> 🧐 提交問題和建議：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fstreampark%2Fissues" target="_blank">https://github.com/apache/streampark/issues</a><br> 🥁 貢獻代碼：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fapache%2Fstreampark%2Fpulls" target="_blank">https://github.com/apache/streampark/pulls</a><br> 📮 Proposal：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcwiki.apache.org%2Fconfluence%2Fdisplay%2FINCUBATOR%2FStreamPark%2BProposal" target="_blank">https://cwiki.apache.org/confluence/display/INCUBATOR/StreamPark+Proposal</a><br> 📧 訂閲社區開發郵件列表：**dev@streampark.apache.org&nbsp;<br> 💁‍♀️&nbsp;<strong>社區溝通：</strong><br><img alt="" src="https://oscimg.oschina.net/oscnet/up-d2fb1e3ea10be8a185704b27e79d83d2ad4.png" referrerpolicy="no-referrer"></p><p><strong>參考資料</strong><br> [1]&nbsp;<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwolfboys" target="_blank">https://github.com/wolfboys</a></em><br> [2]&nbsp;<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Fwangsizhu0504" target="_blank">https://github.com/wangsizhu0504</a></em><br> [3]&nbsp;<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fcommunityovercode.org" target="_blank">https://communityovercode.org</a><br> [4]&nbsp;<em><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FAl-assad" target="_blank">https://github.com/Al-assad</a></em></p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 02:29:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/streampark/blog/10890500</guid>
            <link>https://my.oschina.net/streampark/blog/10890500</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[《互聯網法律白皮書（2023 年）》發佈]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>2024 年 1 月 19 日，中國信息通信研究院（簡稱「中國信通院」）互聯網法律研究中心舉辦第七屆互聯網法律研討會，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fmp.weixin.qq.com%2Fs%2FSfy0OltG0u4n1YKNDSXmqg" target="_blank">發佈</a>《互聯網法律白皮書（2023 年）》。系統梳理過去一年國內外重要互聯網立法活動，深入分析我國互聯網立法的最新成果和國際互聯網立法進展，對未來互聯網立法工作進行了展望，希望能為社會各界瞭解互聯網領域立法情況提供有價值的參考。</p><p><strong>白皮書核心觀點</strong></p><ol><li><p>我國網絡空間法治化邁向新階段。我國加快推進互聯網立法進程，在網絡安全、數據安全、個人信息保護、互聯網平台等方面明確管理要求，為構建網絡綜合治理體系提供了法治保障。2023 年，我國互聯網法治建設繼續順應全球信息化發展大勢，立足我國互聯網發展實踐，不斷深化對依法治網的規律性認識，在保安全的基礎上向促發展邁進，查漏補缺、完善制度、細化規則。</p></li><li><p>我國互聯網法律體系日趨健全完善。我國深入貫徹落實黨中央關於網絡強國、數字中國的決策部署，積極推進互聯網立法工作，不斷完善相關法律制度規範，基本形成了具有中國特色的互聯網法律體系。網絡設施安全防護進一步加強，保障數據安全和促進數據價值釋放法律制度同步推進，互聯網平台發展的法治環境日益優化，新技術新模式發展逐步規範。</p></li><li><p>全球互聯網立法展現新趨勢新動向。2023 年，全球網絡安全立法持續推進，數據跨境流動和數據共享流通成為新的立法關注點，互聯網平台對網絡信息內容的管理義務進一步強化，全球加快對人工智能等新技術新應用的立法應對，各國加快推進互聯網立法進程為保障其國內發展、強化國際競爭提供製度保障。</p></li><li><p>構建適應數字經濟和實體經濟融合發展的互聯網法律體系。在習近平新時代中國特色社會主義思想指引下，我國需適應數字經濟發展要求，構建完善互聯網法律體系，補齊法制短板，通過分類分級制度實現精準施策。應對人工智能等新技術發展趨勢，為新技術的規範發展提供法治支撐。深入佈局研究互聯網立法前沿問題，探索構建數據基礎法律制度。進一步健全互聯網法律法規，提高我國數字經濟治理體系和治理能力現代化水平，以法治護航數字經濟行穩致遠。</p></li></ol><p><img height="280" src="https://oscimg.oschina.net/oscnet/up-2e6e5be1f936754aa5edce38c01aada886b.png" width="500" referrerpolicy="no-referrer"></p><p><img height="275" src="https://oscimg.oschina.net/oscnet/up-559d5e7fe744cce93a4ae209e492aee5880.png" width="500" referrerpolicy="no-referrer"></p><p><img height="272" src="https://oscimg.oschina.net/oscnet/up-7ae8f0a460439255c90efe36af5171f1195.png" width="500" referrerpolicy="no-referrer"></p><p><img height="271" src="https://oscimg.oschina.net/oscnet/up-ab6fa6ae131b9d94129e631761e1ee414c9.png" width="500" referrerpolicy="no-referrer"></p><p><img height="278" src="https://oscimg.oschina.net/oscnet/up-9998e54e517d56fe321f2268e243548c9f8.png" width="500" referrerpolicy="no-referrer"></p><p><img height="279" src="https://oscimg.oschina.net/oscnet/up-60418af84fcfa23ba48a3f631cff64713c5.png" width="500" referrerpolicy="no-referrer"></p><p><img height="277" src="https://oscimg.oschina.net/oscnet/up-6f1f74832bb661a34b0429d057d5aca4d93.png" width="500" referrerpolicy="no-referrer"></p><p><img height="275" src="https://oscimg.oschina.net/oscnet/up-e099e03ebfcf5a5101d332999447594f51a.png" width="500" referrerpolicy="no-referrer"></p><p><img height="285" src="https://oscimg.oschina.net/oscnet/up-ef189c3cccb8a9ec7d7e5540ddac9d9026d.png" width="500" referrerpolicy="no-referrer"></p><p><img height="284" src="https://oscimg.oschina.net/oscnet/up-9a859a2d1c378f75b300162a287fa4ffd38.png" width="500" referrerpolicy="no-referrer"></p><p><img height="284" src="https://oscimg.oschina.net/oscnet/up-39b8a71bbc15699a837a443f84672b1781c.png" width="500" referrerpolicy="no-referrer">&nbsp;</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 02:15:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276402</guid>
            <link>https://www.oschina.net/news/276402</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[2024-1 月 | WHLUG（武漢 Linux 用户組）活動回顧，這是沒有過的全新版本]]>
            </title>
            <description>
                <![CDATA[<div class="content"><div><div><div><p style="margin-left:0; margin-right:0">內容來源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Findex%2Fzh" target="_blank">deepin 社區</a></p><hr><p style="margin-left:0; margin-right:0">2024 年 1 月 20 日下午，由 deepin（深度）社區聯合 Linux 中國、龍蜥社區（OpenAnolis）、華中科技大學網絡空間安全學院開源俱樂部一起舉辦的 Linux 愛好者線下沙龍活動（WHLUG）在武漢未來科技城成功舉辦。</p></div></div><p style="margin-left:0; margin-right:0">本次活動聚集了近 40 名來自武漢地區的 Linux 愛好者線下參與，大家共同探討技術話題，分享技術經驗和見解，現場氣氛熱烈。現在就讓我們一起來回顧本次活動的精彩瞬間吧！</p></div><p style="margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="611" src="https://storage.deepin.org/thread/202401220819117663_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059112961557.png" width="825" referrerpolicy="no-referrer"></p><div><div>
  來自 deepin 團隊的研發工程師 Black desk 在會議上與參會者分享了一些 Linux 內核提供的容器相關特性的用户態接口使用方法、非 root 用户使用 Linux 容器的限制，和其他有趣的 Linux 容器技術細節，同時也深入介紹了玲瓏方案產生的背景、希望去解決的問題，以及玲瓏的優勢和目前存在的問題。
 </div></div><div>
 &nbsp;
</div><div><img alt="" height="603" src="https://storage.deepin.org/thread/202401220820237378_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059113054411.png" width="827" referrerpolicy="no-referrer"></div><div>
 &nbsp;
</div><div><div><div>
   開源已經邁入了「新生代」，我們需要資深的開發者，也需要更張揚的年輕人。在本次分享中，來自華中科技大學開放原子開源俱樂部的慕冬亮老師，便從「領路人」的視角，為大家分享了他是如何帶領學生走進 Linux 內核的世界，一同挖掘、修復 Linux 內核漏洞，並通過內部審核機制保障內核補丁正確性的故事。
  </div></div></div><div>
 &nbsp;
</div><div>
 &nbsp;
</div><div><img alt="" height="617" src="https://storage.deepin.org/thread/202401220820504191_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059113182099.png" width="825" referrerpolicy="no-referrer"></div><div>
 &nbsp;
</div><div><div><div>
   那從學生的視角來看，開源參與又會有哪些不一樣呢？來自華中科技大學的朱儁星同學結合自身從 0-1 參與開源的經歷，為大家介紹了他是如何從「發佈項目無人問津、參與項目無從下手」的小白，逐步深入探索、找到組織，並進階成為開源項目的核心貢獻者的。他強調，「開源不僅僅是開放源代碼，更是一種分享合作、共同進步的精神」，希望大家能夠拋開顧慮，勇敢嘗試。
  </div></div></div><div>
 &nbsp;
</div><div><img alt="" height="461" src="https://storage.deepin.org/thread/202401220821331561_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059113277879.png" width="826" referrerpolicy="no-referrer"></div><div>
 &nbsp;
</div><div><div><div>
   虛擬網卡是雲計算重要組成部分，目前正面臨着性能和功能的雙重挑戰。在本次活動中，來自龍蜥社區高性能網絡 SIG 的成員衡琪，向大家分享了 Anolis OS 是如何通過優化 Virtio 協議來增強網絡性能，從而解決這一挑戰。衡琪在分享中提到了一些具體的優化措施，如制定新的 Virtio 標準，包括 Inner Hash、Virtio Checksum 修復、NetDIM、Device Stats 等技術。
  </div></div><div>
  &nbsp;
 </div></div><div><img alt="" height="615" src="https://storage.deepin.org/thread/202401220822105140_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059113375653.png" width="827" referrerpolicy="no-referrer"></div><div>
 &nbsp;
</div><div><div><div><p style="margin-left:0; margin-right:0">除了主題演講之外，來自現場愛好者的閃電演講的分享，也贏得了滿堂喝彩。</p><p style="margin-left:0; margin-right:0">鍾同學為大家分享了自己在 Treeland 及窗管調優方面的經驗與探索，向大家展示了他是如何基於 Treeland 進行窗管深度客製化，以及在三個月內打造的台前調度。這個分享引發了現場觀眾的興趣和探討，大家對於鍾同學的經驗和成果表示讚賞，並積極參與了與之相關的交流和討論。</p></div></div></div><div><img alt="" height="463" src="https://storage.deepin.org/thread/202401220822396312_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059113493557.png" width="828" referrerpolicy="no-referrer"></div><div>
 &nbsp;
</div><div>
 &nbsp;
</div><div><div><div><p style="margin-left:0; margin-right:0">桑同學結合自己的工作和大家分享了有關路由器和無線網卡的相關知識，並講述了在工作中遇到的一些有趣的事情。其中，當提到客户經常將需求誤認為 BUG 並直接反饋給技術同學時，更是引發了現場從事 B 端業務的研發同學們的共鳴，並引發了一系列討論和交流。</p><p style="margin-left:0px; margin-right:0px; text-align:center"><img alt="" height="608" src="https://storage.deepin.org/thread/202401220823104278_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059113564231.png" width="822" referrerpolicy="no-referrer"></p><p style="margin-left:0; margin-right:0">&nbsp;</p></div></div></div><div><div><div><h1><strong>網上相會，何如線下相見</strong></h1><p style="margin-left:0; margin-right:0">WHLUG 的創辦希望幫助大家在武漢遇到同為 Linux 愛好者的小夥伴，一起在某個週末，交流技術，學習技術。基本的形式如下：</p></div></div></div><div><img alt="" height="217" src="https://storage.deepin.org/thread/202401220823526444_%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_17059114451088.png" width="807" referrerpolicy="no-referrer"></div><div><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">&nbsp;</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start">我們熱切的希望能夠有更多武漢當地的學校、企業、開源愛好者加入我們，共同參與到 WHLUG 活動的策劃和組織中。</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:start"><strong>所以，我們會面向核心成員招募組織人，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwj.qq.com%2Fs2%2F13816139%2F8b53%2F" target="_blank">如果您感興趣，請報名。</a>期待與您一起共建！</strong></p><p style="text-align:center"><img height="271" src="https://oscimg.oschina.net/oscnet/up-07d49751e8486d624c7c08f7166f237fa1c.png" width="276" referrerpolicy="no-referrer"></p><hr><p><strong>內容來源：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2F2024-01-whlug%2F" target="_blank">deepin 社區</a></strong></p><p><strong>瞭解 WHLUG（武漢 Linux 用户組）：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fwelcome-to-whlug%2F" target="_blank">https://www.deepin.org/zh/welcome-to-whlug/</a></strong></p><p><strong>往期 WHLUG 活動回顧：<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.deepin.org%2Fzh%2Fcategory%2Fwhlug-news%2F" target="_blank">https://www.deepin.org/zh/category/whlug-news/</a></strong></p></div></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 02:12:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276400</guid>
            <link>https://www.oschina.net/news/276400</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[Agents-Flex —— 大語言模型應用開發框架]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="margin-left:0px; margin-right:0px; text-align:left">Agents-Flex 是一個優雅的 LLM（大語言模型） 應用開發框架。其使用 Java 開發，對標 LangChain。</p><h2 style="margin-left:0; margin-right:0; text-align:left">基礎能力</h2><ul><li>LLM 的訪問能力</li><li>Prompt、Prompt Template 定義加載的能力</li><li>Function Calling 定義、調用和執行等能力</li><li>Embedding</li><li>Vector Storage</li><li>豐富的內容加載器</li><li>豐富的文本分割器</li><li>LLM Chain</li><li>Agents Chain</li></ul><h2 style="margin-left:0; margin-right:0; text-align:left">簡單對話</h2><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 OpenAi 大語言模型:</p><div style="text-align:left"><div><pre><span><strong>public</strong><strong>static</strong><strong style="color:#445588">void</strong><strong style="color:#990000">main</strong><span>(</span><strong style="color:#445588">String</strong><span>[]</span><span>args</span><span>)</span><strong>throws</strong><strong style="color:#445588">InterruptedException</strong><span>{</span></span><span><strong style="color:#445588">OpenAiConfig</strong><span>config</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">OpenAiConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200">"sk-rts5NF6n*******"</span><span>);</span></span><span><strong style="color:#445588">Llm</strong><span>llm</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">OpenAiLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong style="color:#445588">Prompt</strong><span>prompt</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SimplePrompt</strong><span>(</span><span style="color:#dd2200">"請寫一個關於小兔子戰勝大灰狼的故事。"</span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong style="color:#445588">System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200">"---&gt;"</span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong style="color:#445588">Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999">10000</span><span>);</span></span><span><span>}</span></span></pre><div style="text-align:center">&nbsp;</div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 「通義千問」 大語言模型:</p><div style="text-align:left"><div><pre><span><strong>public</strong><strong>static</strong><strong style="color:#445588">void</strong><strong style="color:#990000">main</strong><span>(</span><strong style="color:#445588">String</strong><span>[]</span><span>args</span><span>)</span><strong>throws</strong><strong style="color:#445588">InterruptedException</strong><span>{</span></span><span><strong style="color:#445588">QwenLlmConfig</strong><span>config</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">QwenLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200">"sk-28a6be3236****"</span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setModel</span><span>(</span><span style="color:#dd2200">"qwen-turbo"</span><span>);</span></span><span><strong style="color:#445588">Llm</strong><span>llm</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">QwenLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong style="color:#445588">Prompt</strong><span>prompt</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SimplePrompt</strong><span>(</span><span style="color:#dd2200">"請寫一個關於小兔子戰勝大灰狼的故事。"</span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong style="color:#445588">System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200">"---&gt;"</span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong style="color:#445588">Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999">10000</span><span>);</span></span><span><span>}</span></span></pre><div style="text-align:center">&nbsp;</div></div></div><p style="color:#40485b; margin-left:0; margin-right:0; text-align:left">使用 「訊飛星火」 大語言模型:</p><div style="text-align:left"><div><pre><span><strong>public</strong><strong>static</strong><strong style="color:#445588">void</strong><strong style="color:#990000">main</strong><span>(</span><strong style="color:#445588">String</strong><span>[]</span><span>args</span><span>)</span><strong>throws</strong><strong style="color:#445588">InterruptedException</strong><span>{</span></span><span><strong style="color:#445588">SparkLlmConfig</strong><span>config</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SparkLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setAppId</span><span>(</span><span style="color:#dd2200">"****"</span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200">"****"</span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiSecret</span><span>(</span><span style="color:#dd2200">"****"</span><span>);</span></span><span><strong style="color:#445588">Llm</strong><span>llm</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SparkLlm</strong><span>(</span><span>config</span><span>);</span></span><span><strong style="color:#445588">Prompt</strong><span>prompt</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SimplePrompt</strong><span>(</span><span style="color:#dd2200">"請寫一個關於小兔子戰勝大灰狼的故事。"</span><span>);</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>llmInstance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong style="color:#445588">System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200">"---&gt;"</span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><strong style="color:#445588">Thread</strong><span>.</span><span style="color:#008080">sleep</span><span>(</span><span style="color:#009999">10000</span><span>);</span></span><span><span>}</span></span></pre><div style="text-align:center">&nbsp;</div></div></div><h2 style="margin-left:0; margin-right:0; text-align:left">歷史對話示例</h2><div style="text-align:left"><div><pre><span><strong>public</strong><strong>static</strong><strong style="color:#445588">void</strong><strong style="color:#990000">main</strong><span>(</span><strong style="color:#445588">String</strong><span>[]</span><span>args</span><span>)</span><strong>throws</strong><strong style="color:#445588">InterruptedException</strong><span>{</span></span><span><strong style="color:#445588">SparkLlmConfig</strong><span>config</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SparkLlmConfig</strong><span>();</span></span><span><span>config</span><span>.</span><span style="color:#008080">setAppId</span><span>(</span><span style="color:#dd2200">"****"</span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiKey</span><span>(</span><span style="color:#dd2200">"****"</span><span>);</span></span><span><span>config</span><span>.</span><span style="color:#008080">setApiSecret</span><span>(</span><span style="color:#dd2200">"****"</span><span>);</span></span><span><span style="color:#888888">// 創建一個大模型</span></span><span><strong style="color:#445588">Llm</strong><span>llm</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">SparkLlm</strong><span>(</span><span>config</span><span>);</span></span><span><span style="color:#888888">//創建一個歷史對話的 prompt</span></span><span><strong style="color:#445588">HistoriesPrompt</strong><span>prompt</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">HistoriesPrompt</strong><span>();</span></span><span><strong style="color:#445588">System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200">"您想問什麼？"</span><span>);</span></span><span><strong style="color:#445588">Scanner</strong><span>scanner</span><span>=</span><strong style="color:#000000">new</strong><strong style="color:#445588">Scanner</strong><span>(</span><strong style="color:#445588">System</strong><span>.</span><span style="color:#008080">in</span><span>);</span></span><span><span style="color:#888888">//等待用户從控制枱輸入問題</span></span><span><strong style="color:#445588">String</strong><span>userInput</span><span>=</span><span>scanner</span><span>.</span><span style="color:#008080">nextLine</span><span>();</span></span><span><strong style="color:#000000">while</strong><span>(</span><span>userInput</span><span>!=</span><strong>null</strong><span>){</span></span><span><span>prompt</span><span>.</span><span style="color:#008080">addMessage</span><span>(</span><strong style="color:#000000">new</strong><strong style="color:#445588">HumanMessage</strong><span>(</span><span>userInput</span><span>));</span></span><span><span style="color:#888888">//向大模型提問</span></span><span><span>llm</span><span>.</span><span style="color:#008080">chat</span><span>(</span><span>prompt</span><span>,</span><span>(</span><span>instance</span><span>,</span><span>message</span><span>)</span><span>-&gt;</span><span>{</span></span><span><strong style="color:#445588">System</strong><span>.</span><span style="color:#008080">out</span><span>.</span><span style="color:#008080">println</span><span>(</span><span style="color:#dd2200">"&gt;&gt;&gt;&gt; "</span><span>+</span><span>message</span><span>.</span><span style="color:#008080">getContent</span><span>());</span></span><span><span>});</span></span><span><span style="color:#888888">//繼續等待用户從控制枱輸入內容</span></span><span><span>userInput</span><span>=</span><span>scanner</span><span>.</span><span style="color:#008080">nextLine</span><span>();</span></span><span><span>}</span></span><span><span>}</span></span></pre></div></div></div>
                                                                ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 02:10:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/p/agents-flex</guid>
            <link>https://www.oschina.net/p/agents-flex</link>
        </item>
        <item>
            <title>
                <![CDATA[Gitee 推薦 | 雲原生量子計算平台，量易伏]]>
            </title>
            <description>
                <![CDATA[<p>簡體中文 | <a href="https://gitee.com/baidu/qcompute/blob/master/README.md">English</a></p><h1><a id="user-content-量易伏---qcomputesdk" class="anchor" href="https://gitee.com/baidu/qcompute#%E9%87%8F%E6%98%93%E4%BC%8F---qcomputesdk"></a>量易伏 - QComputeSDK</h1><ul><li><a href="https://gitee.com/baidu/qcompute#%E7%89%B9%E8%89%B2">特色</a></li><li><a href="https://gitee.com/baidu/qcompute#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4">安裝步驟</a><ul><li><a href="https://gitee.com/baidu/qcompute#%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE">環境設置</a></li><li><a href="https://gitee.com/baidu/qcompute#%E5%AE%89%E8%A3%85-QComputeSDK">安裝 QComputeSDK</a></li><li><a href="https://gitee.com/baidu/qcompute#%E8%BF%90%E8%A1%8C">運行</a></li><li><a href="https://gitee.com/baidu/qcompute#%E9%87%8D%E5%A4%A7%E6%9B%B4%E6%96%B0">重大更新</a></li></ul></li><li><a href="https://gitee.com/baidu/qcompute#%E5%85%A5%E9%97%A8%E4%B8%8E%E5%BC%80%E5%8F%91">入門與開發</a><ul><li><a href="https://gitee.com/baidu/qcompute#%E6%A1%88%E4%BE%8B%E5%85%A5%E9%97%A8">案例入門</a></li><li><a href="https://gitee.com/baidu/qcompute#API-%E6%96%87%E6%A1%A3">API 文檔</a></li><li><a href="https://gitee.com/baidu/qcompute#%E5%BC%80%E5%8F%91">開發</a></li></ul></li><li><a href="https://gitee.com/baidu/qcompute#%E4%BA%A4%E6%B5%81%E4%B8%8E%E5%8F%8D%E9%A6%88">交流與反饋</a></li><li><a href="https://gitee.com/baidu/qcompute#%E4%BD%BF%E7%94%A8-qcomputesdk-%E7%9A%84%E5%B7%A5%E4%BD%9C">使用 QComputeSDK 的工作</a></li><li><a href="https://gitee.com/baidu/qcompute#faq">FAQ</a></li><li><a href="https://gitee.com/baidu/qcompute#copyright-and-license">Copyright and License</a></li></ul><p><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2F">Quantum Leaf (量易伏)</a> 是<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum.baidu.com%2F">百度量子計算研究所</a>旗下全球首個雲原生量子計算平台。用户可以使用量易伏進行量子編程，量子模擬和運行真實量子計算機。量易伏旨在為量子基礎設施即服務 (Quantum infrastructure as a Service, QaaS) 提供量子基礎開發環境。</p><p><img src="https://release-data.cdn.bcebos.com/github-qleaf%2F%E9%87%8F%E6%98%93%E4%BC%8F%E5%9B%BE%E6%A0%87.png" alt="" referrerpolicy="no-referrer"></p><p><a href="https://gitee.com/baidu/qcompute/blob/master/LICENSE"><img src="https://img.shields.io/badge/license-Apache%202.0-green" alt="" referrerpolicy="no-referrer"></a><img src="https://img.shields.io/badge/build-passing-green" alt="" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/Python-3.9--3.11-blue" alt="" referrerpolicy="no-referrer"><img src="https://img.shields.io/badge/release-v3.3.0-blue" alt="" referrerpolicy="no-referrer"></p><p><img src="https://img.shields.io/badge/OS-MacOS%20%7C%20Windows%20%7C%20Linux-lightgrey.svg?style=flat-square" alt="" referrerpolicy="no-referrer"></p><p>本安裝包是 QComputeSDK 的 Python 語言實現的全量量子開源計算框架。它採用經典量子混合的編程模式並預製多種先進模塊，用户不僅可以在量子環境對象 (QEnv) 下快速搭建電路，也可以將它用於各類複雜量子算法的研發。QComputeSDK 內置多類本地高性能模擬器和雲端模擬器/真機調用接口，用户可以將電路在本地模擬器快速模擬驗證也可以將電路任務進一步提交至雲端真實量子硬件（超導、離子阱）以及高性能模擬器執行。</p><h2><a id="user-content-特色" class="anchor" href="https://gitee.com/baidu/qcompute#%E7%89%B9%E8%89%B2"></a>特色</h2><ul><li>輕鬆上手
<ul><li>近 50 篇教程案例，還在不斷地增加</li><li>量子電路本地可視化</li><li>全自動調用相關計算模塊，完成預訂流程</li></ul></li><li>功能豐富
<ul><li>支持電路嵌套的量子子程序功能</li><li>本地高性能模擬器支持 32 量子比特的模擬運算</li><li>雲端高性能異構模擬器支持更大規模量子模擬</li><li>支持多種噪聲模型的模擬</li><li>基於英偉達 cuQuantum 的本地 GPU 模擬器</li><li>基於 Gaussian/Fork 態的本地光量子模擬器</li></ul></li><li>真實量子算力
<ul><li>接入百度自研超導量子計算機 QPUQian</li><li>接入中科院精密測量院離子阱量子計算機 IonAPM</li><li>接入中科院物理所超導量子計算機 IoPCAS</li></ul></li></ul><h2><a id="user-content-安裝步驟" class="anchor" href="https://gitee.com/baidu/qcompute#%E5%AE%89%E8%A3%85%E6%AD%A5%E9%AA%A4"></a>安裝步驟</h2><h3><a id="user-content-環境設置" class="anchor" href="https://gitee.com/baidu/qcompute#%E7%8E%AF%E5%A2%83%E8%AE%BE%E7%BD%AE"></a>環境設置</h3><p>推薦使用 Anaconda 創建虛擬環境，</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">conda create <span class="nt">-n</span> qcompute_env <span class="nv">python</span><span class="o">=</span>3.10</span><span id="LC2" class="line">conda activate qcompute_env</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><blockquote><p>Anaconda 請從<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.anaconda.com%2Fdownload%23downloads">官網下載</a></p></blockquote><blockquote><p>注意： 無論使用 Anaconda 還是原生 Python ，Python 版本都應 &gt;= 3.9</p></blockquote><h3><a id="user-content-安裝-qcomputesdk" class="anchor" href="https://gitee.com/baidu/qcompute#%E5%AE%89%E8%A3%85-qcomputesdk"></a>安裝 QComputeSDK</h3><p>通過 <code>pip</code> 完成安裝，</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">pip <span class="nb">install </span>qcompute</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>用户也可以選擇下載全部文件後進行本地安裝。我們推薦此種方式安裝以及二次 SDK 開發，可以方便的形成本地開發閉環，更方便調試等動作。</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">git clone https://github.com/baidu/QCompute.git</span><span id="LC2" class="line"><span class="nb">cd </span>QCompute</span><span id="LC3" class="line">pip <span class="nb">install</span><span class="nt">-e</span><span class="nb">.</span></span></pre><div class="markdown-code-block-copy-btn"></div></div></div><h3><a id="user-content-運行" class="anchor" href="https://gitee.com/baidu/qcompute#%E8%BF%90%E8%A1%8C"></a>運行</h3><p>如果用户選擇下載全部文件，現在可以試着運行一段程序來驗證是否安裝成功。這裏我們運行 QComputeSDK 提供的測試腳本，</p><div class="white"><div class="highlight markdown-code-block"><pre><span id="LC1" class="line">python <span class="nt">-m</span> Test.PostInstall.PostInstall_test</span></pre><div class="markdown-code-block-copy-btn"></div></div></div><p>該腳本中包括執行本地與雲端任務測試，雲端測試前需要在命令行輸入用户 Token ，Token 可登陸<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Ftoken">量易伏官網</a>查看。如不需要做雲端測試可運行 <code>Ctrl+c</code> 結束。</p><blockquote><p>注意：通過 pip 安裝請跳過此步。</p></blockquote><h3><a id="user-content-重大更新" class="anchor" href="https://gitee.com/baidu/qcompute#%E9%87%8D%E5%A4%A7%E6%9B%B4%E6%96%B0"></a>重大更新</h3><p>從 QComputeSDK 3.0.0 版本開始，開發者可以通過 QComputeSDK 運行百度自研超導量子計算機乾始。設備定期對外提供服務，可以從<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fservices">量易伏真機詳情頁</a>查看真機開放時間。該設備在 QComputeSDK 中的後端名為<code>CloudBaiduQPUQian</code>.</p><h2><a id="user-content-入門與開發" class="anchor" href="https://gitee.com/baidu/qcompute#%E5%85%A5%E9%97%A8%E4%B8%8E%E5%BC%80%E5%8F%91"></a>入門與開發</h2><h3><a id="user-content-案例入門" class="anchor" href="https://gitee.com/baidu/qcompute#%E6%A1%88%E4%BE%8B%E5%85%A5%E9%97%A8"></a>案例入門</h3><p>QComputeSDK 是一個實現後台接入真實量子硬件的量子計算開發框架。建立起了量子計算與量子硬件的橋樑，為量子算法和應用的研發落地提供強有力的支撐，也提供了豐富的案例供開發者學習。</p><p>在這裏，我們提供了初級、中級、高級案例供大家學習。初級案例中展示了使用 QComputeSDK 可以快速上手的簡單示例，包括量子態製備、經典量子混合編程、以及將電路任務提交到量子計算機上執行等。中級案例中是 QComputeSDK 的進階用法，包括模塊的使用、內置轉換器的使用等。高級案例中則是進階量子算法在 QComputeSDK 上的實現示例，我們為這些算法都配套了詳細的教程文檔。建議用户下載 QComputeSDK 全部文件安裝，本地運行進行實踐。</p><ul><li><p><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1">初級案例</a></p><ol><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/GHZ_Local.py">GHZ 態製備（本地）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/GHZ_Cloud.py">GHZ 態製備（雲端）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/HCNOT_Local.py">貝爾態製備（本地）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/HCNOT_Cloud.py">貝爾態製備（雲端）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Hybrid_Local.py">經典量子混合語言示例（本地）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Hybrid_Cloud.py">經典量子混合語言示例（雲端）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Interact_Local.py">經典量子信息交互示例（本地）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Interact_Cloud.py">經典量子信息交互示例（雲端）</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/QPUCase_BaiduQPUQian.py">百度量子自研超導真機運行示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/QPUCase_IonAPM.py">中科院精密測量院離子阱運行示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/QPUCase_IoPCAS.py">中科院物理所超導真機運行示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/PhotonicFookCase_local.py">基於 Fock 態的光量子線路模擬</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/PhotonicGaussianCase_local.py">基於 Gaussian 態的光量子線路模擬</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/SimulatorCase_CuQuantum_Local.py">基於 cuQuantum 的 GPU 模擬器</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Ubqc.py">盲量子計算示例</a></li></ol><ul><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Noise">量子噪聲模擬</a><ol><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Noise/AddNoise.py">對電路添加噪聲示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Noise/CompressNoiseTest.py">量子噪聲壓縮模塊示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Noise/OneQubitNoiseTest.py">一量子位電路含噪模擬</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Noise/ParallelNoiseSimulationTest.py">多進程並行的噪聲模擬</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/Noise/TwoQubitNoiseTest.py">兩量子位電路含噪模擬</a></li></ol></li></ul></li><li><p><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2">中級案例</a></p><ul><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/0_OutputFormatControl">輸出信息設置</a><ol><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/0_OutputFormatControl/Turorials/OutputFormatControl_ZH.md">教程</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/tutorials/machine_learning/QClassifier_CN.ipynb">結果打印信息設置示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/tutorials/machine_learning/VSQL_CN.ipynb">輸出文件自動清理示例</a></li></ol></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules">通用模塊</a><ol><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/Tutorials/OpenModules_ZH.md">教程</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/0_OpenModules.py">模塊使用示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/1_InverseCircuitModule.py">量子電路逆操作模塊</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/2_ReverseCircuitModule.py">量子電路反操作模塊</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/3_UnrollProcedureModule.py">子程序展開模塊</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/4_UnrollCircuitModule.py">量子門分解模塊</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/1_OpenModules/5_CompressGateModule.py">量子門壓縮模塊</a></li></ol></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors">轉換器</a><ol><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/Tutorials/OpenConvertors_ZH.md">教程</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/0_Circuit.py">電路序列化示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/1_DrawConsole.py">終端繪圖示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/2_InternalStruct.py">電路序列和反序列示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/3_JSON.py">電路轉 JSON 示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/4_QASM.py">電路轉 QASM 示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/5_Qobj.py">電路轉 QOBJ 示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/6_IonQ.py">電路轉 IonQ 示例</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_2/2_OpenConvertors/7_XanaduSF.py">電路轉 Xanadu 示例</a></li></ol></li></ul></li><li><p><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3">高級案例</a></p><ol><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/0_SuperdenseCoding/Tutorial-Superdense/Superdense_CN.md">量子超密編碼</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/1_Deutsch-Jozsa/Tutorial-DJ/Deutsch-Jozsa_CN.md">Deutsch-Jozsa 算法</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/2_PhaseEstimation/Tutorial-phase/Phase_CN.md">量子相位估計 (QPE)</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/3_Grover/Tutorial-Grover/Grover_CN.md">格羅弗搜索算法</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/4_ShorAlgorithm/tutorial/Shor_CN.md">Shor 算法</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/5_VQE/Tutorial-VQE/VQE_CN.md">變分量子基態求解器 (VQE)</a></li><li><a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_3/6_VQSD/Tutorial-VQSD/VQSD_CN.md">變分量子態對角化 (VQSD)</a></li></ol></li></ul><p>在最近的更新中，QComputeSDK 加入了本地光量子計算模擬器 (LocalBaiduSimPhotonic) 。與傳統的量子電路模型不同，光量子計算具有其獨特的運行方式。QComputeSDK 在架構上支撐起光學體系，也成為了首個集成通用量子計算與光量子計算雙體系的量子開發套件。感興趣的讀者請參見<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fpqs%2Ftutorial-introduction">光量子計算模擬器教程</a>。</p><h3><a id="user-content-api-文檔" class="anchor" href="https://gitee.com/baidu/qcompute#api-%E6%96%87%E6%A1%A3"></a>API 文檔</h3><p>瞭解更多 QComputeSDK 使用方法，請參考 <a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fdocs%2Fqcompute%2Flatest%2F">API 文檔</a>，包含了供用户使用的所有函數和類的詳細説明與用法。</p><h3><a id="user-content-開發" class="anchor" href="https://gitee.com/baidu/qcompute#%E5%BC%80%E5%8F%91"></a>開發</h3><p>QComputeSDK 中包括量子計算架構、量子模擬器、量子案例以及擴展功能等。對於需要涉及架構或模擬器源碼的開發者，建議下載全部文件並本地安裝調試。對於使用 QComputeSDK 研發算法應用的開發者或科研工作者，建議以 <a href="https://gitee.com/baidu/qcompute/blob/master/Example/Level_1/GHZ_Cloud.py">GHZ_Cloud.py</a> 作為代碼框架，修改和使用這個文件可以有效幫助熟悉本量子開發套件的語法。建議開發者熟悉 QComputeSDK 的電路模型構造，注意量子位輸出順序為高位。</p><h2><a id="user-content-交流與反饋" class="anchor" href="https://gitee.com/baidu/qcompute#%E4%BA%A4%E6%B5%81%E4%B8%8E%E5%8F%8D%E9%A6%88"></a>交流與反饋</h2><ul><li>我們非常歡迎您提交問題、報告與建議，您可以通過以下渠道反饋
<ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fgithub.com%2Fbaidu%2FQCompute%2Fissues">GitHub Issues</a> / <a href="https://gitee.com/baidu/qcompute/issues">Gitee Issues</a></li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Ffeedback">量易伏官網-意見反饋</a></li><li>量易伏官方郵箱 <a href="mailto:quantum@baidu.com">quantum@baidu.com</a></li></ul></li><li>技術交流 QQ 羣：1147781135，歡迎掃碼進羣</li></ul><p><img src="https://release-data.cdn.bcebos.com/github-qleaf%2Fqrcode.png" alt="" referrerpolicy="no-referrer"></p><h2><a id="user-content-使用-qcomputesdk-的工作" class="anchor" href="https://gitee.com/baidu/qcompute#%E4%BD%BF%E7%94%A8-qcomputesdk-%E7%9A%84%E5%B7%A5%E4%BD%9C"></a>使用 QComputeSDK 的工作</h2><p>我們非常歡迎開發者使用 QComputeSDK 進行量子應用研發，如果您的工作有使用 QComputeSDK，也非常歡迎聯繫我們。以下為基於 QComputeSDK 開發的量子應用：</p><ul><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fqep%2Ftutorial-overview">量噪 (QEP, Quantum Error Processing)</a>，百度量子計算研究所研發的量子噪聲處理工具集，主要功能包括量子性能評估、量子噪聲刻畫、量子噪聲緩釋和量子糾錯。</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fbqc%2Ftutorial-bqc">盲量子計算 (UBQC, Universal Blind Quantum Computation)</a>，百度量子計算研究所研發的基於 UBQC 協議的盲計算代理服務。</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fqapp%2Ftutorial-overview">QAPP</a> 是基於 QComputeSDK 開發的量子計算解決方案工具集，提供包括量子化學、組合優化、機器學習在內的諸多領域問題的量子計算求解服務。</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fqsvt%2Ftutorial-overview">量子奇異值變換 (QSVT, Quantum Singular Value Transformation)</a>，百度量子計算研究所研發的量子奇異值變換工具集，主要功能包括量子奇異值變換，對稱量子信號處理，以及哈密頓量模擬。</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fqfinance%2Ftutorial-option-pricing">量子金融 QFinance</a> ，百度量子計算研究所研發的量子金融庫，提供用於期權定價的量子蒙特卡羅方法。</li><li><a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fpqs%2Ftutorial-introduction">光量子計算模擬器 (PQS, Photonic Quantum Simulator)</a>，百度研究院量子計算研究所研發的光量子計算模擬器，支持基於 Gaussian 態和 Fock 態的光量子線路模擬。</li></ul><h2><a id="user-content-faq" class="anchor" href="https://gitee.com/baidu/qcompute#faq"></a>FAQ</h2><ol><li><p>問：<strong>使用 QComputeSDK 可以做什麼？它有哪些應用場景？</strong></p><p>答：QComputeSDK 是一個基於 Python 的量子計算開發框架，可以用於構建、運行和優化量子算法。我們在 QComputeSDK 建設了全面且完善的基礎設施用於支持各類量子算法的實現，因此在量子應用的研發上它具有廣泛的應用場景。具體工作可以參考但不限於 QComputeSDK 中的<a href="https://gitee.com/baidu/qcompute/blob/master/Extensions">擴展功能</a>。</p></li><li><p>問：<strong>想用 QComputeSDK 做量子編程，但對量子計算不是很瞭解，該如何入門？</strong></p><p>答：Nielsen 和 Chuang 所著的《量子計算與量子信息》是量子計算領域公認的經典入門教材。建議讀者首先學習這本書的第一、二、四章，介紹了量子計算中的基本概念、數學和物理基礎、以及量子電路模型。讀者也可以在<a href="https://gitee.com/link?target=https%3A%2F%2Fqulearn.baidu.com%2F">量易簡</a>上學習，這是一個在線量子學習知識庫，不僅包含量子計算教程，還有豐富的視頻課程。讀者還可以下載<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fqmobile">量易伏 APP</a>，APP 上的量子小調包含豐富有趣的量子樣例，幫助讀者隨時隨地的學習。</p></li><li><p>問：<strong>QComputeSDK 是否免費？</strong></p><p>答：QComputeSDK 是免費的。QComputeSDK 是開源 SDK 並攜帶多類本地模擬器，用户執行本地模擬任務是免費的。當用户通過 QComputeSDK 將任務提交給雲端模擬器或真機運行時，會扣除一定點數。詳細的扣點規則可以參考<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2FquickGuide%2Faccount">用户指南</a>。用户在創建賬户時我們會贈送點數，點數餘額可以在<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fprofile">個人中心</a>查看。</p></li><li><p>問：<strong>點數不足怎麼辦？</strong></p><p>答：點數目前僅用於資源控制。點數不足時可以從量易伏官網的<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Ffeedback">意見反饋</a>或<a href="https://gitee.com/link?target=https%3A%2F%2Fquantum-hub.baidu.com%2Fqmobile">量易伏 APP</a>的用户反饋提交點數申請。我們會在三個工作日內處理您的請求。</p></li></ol><h2><a id="user-content-copyright-and-license" class="anchor" href="https://gitee.com/baidu/qcompute#copyright-and-license"></a>Copyright and License</h2><p>QComputeSDK 使用 <a href="https://gitee.com/baidu/qcompute/blob/master/LICENSE">Apache-2.0 license</a> 許可證。</p><h2><a id="user-content-作者" class="anchor" href="https://gitee.com/baidu/qcompute#%E4%BD%9C%E8%80%85"></a>作者</h2><ul><li>劉樹森</li><li>賀暘</li><li>江雲帆</li><li>張文學</li><li>孫文贇</li><li>付永凡</li><li>陳建蕭</li><li>沈豪傑</li><li>呂申進</li><li>王友琪</li></ul>]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 02:04:00 GMT</pubDate>
            <guid isPermaLink="false">https://gitee.com/baidu/qcompute</guid>
            <link>https://gitee.com/baidu/qcompute</link>
        </item>
        <item>
            <title>
                <![CDATA[每日一博 | ElasticSearch 集羣災難：別放棄，也許能再搶救一下]]>
            </title>
            <description>
                <![CDATA[<div class="content"><span id="OSC_h1_1"></span><h1>1 前言</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">Elasticsearch 作為一個分佈式搜索引擎，自身是高可用的；但也架不住一些特殊情況的發生，如：</p><ul><li><p style="color:#222222; margin-left:0; margin-right:0">集羣超過半數的 master 節點丟失，ES 的節點無法形成一個集羣，進而導致集羣不可用；</p></li><li><p style="color:#222222; margin-left:0; margin-right:0">索引 shard 的文件損壞，分片無法被正常恢復，進而導致索引無法正常提供服務</p></li><li><p style="color:#222222; margin-left:0; margin-right:0">本地盤節點，多數據節點故障，舊節點無法再次加入集羣，數據丟失</p></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">針對上述的情況，今天來聊一聊相關的解決方案。</p><span id="OSC_h1_2"></span><h1>2 基礎知識</h1><span id="OSC_h2_3"></span><h2>2.1 集羣經典架構</h2><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">在聊解決方案之前，首先來看一看 ES 集羣層面的基本知識，es 的集羣組成通常如圖 1-1 所示<img alt="es 集羣角色.png" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2024-01-06-15-270pb9YSxO96kLhga.png" referrerpolicy="no-referrer"></p><div><p>圖 1-1 es 常用集羣架構</p> 如圖 1-1 所示，為生產環境 es 集羣的經典架構，主要由專有主節點、專有協調節點和數據節點組成： 
</div><ul><li><p style="color:#222222; margin-left:0; margin-right:0"><strong>專有主節點 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fmodules-node.html%23master-node" rel="nofollow" target="_blank">Master-eligible node</a>)</strong>: 具有 master 角色的節點，這使其有資格被選為主節點，只存儲集羣元信息包含 cluster、index、shard 級別的元數據；該種角色節點被選舉為 master 之後，將作為整個 ES 集羣的大腦，負責維護集羣層面的元信息，創建刪除索引等工作。該種節點的個數必須為奇數，通常我們固定為 3 個，如果該類節點丟失半數，es 集羣將無法維持 es 節點形成一個集羣。</p></li><li><p style="color:#222222; margin-left:0; margin-right:0"><strong>專有協調節點 (網關節點)</strong>: 該種節點不具有任何角色，僅僅用來處理 es 請求；比如（1）將寫請求的數據歸類轉發到數據所屬的節點（2）查詢請求的二次聚合計算。通常我們也會給該類節點保留<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fmodules-node.html%23node-ingest-node" rel="nofollow" target="_blank">ingest 角色</a><span>&nbsp;</span>，ingest 的主要作用是對數據進行預處理；比如：字段重命名、給數據文檔打上指紋和清洗數據等功能主要通過<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fpipeline.html" rel="nofollow" target="_blank">pipeline 能力</a>進行處理</p></li><li><p style="color:#222222; margin-left:0; margin-right:0"><strong>數據節點 (<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fmodules-node.html%23data-node" rel="nofollow" target="_blank">Data node</a>)</strong>: 存儲數據和集羣元信息，執行與數據相關的操作，如 CRUD、搜索和聚合。在數據節點上打上不同的屬性，可以使其成為 hot、warm、cold 數據節點，在 es7.9 版本之後配置略有不同，但是原理基本不變。</p></li></ul><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">如果沒有顯示設置節點角色，es 的每個節點都會含有以上三種角色。除此之後還有<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fmodules-node.html%23remote-node" rel="nofollow" target="_blank">Remote-eligible node</a><span>&nbsp;</span>、<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fmodules-node.html%23ml-node" rel="nofollow" target="_blank">ml-node</a>和<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fmodules-node.html%23transform-node" rel="nofollow" target="_blank">Transform nodes</a>等角色需要顯示的配置，節點才會有該角色。</p><span id="OSC_h2_4"></span><h2>2.2 集羣元信息</h2><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">集羣完全啓動主要包含選舉主節點、元信息、主分片、數據恢復等重要階段；如圖 2-1 所示[1]。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start"><img alt="5211704611687_.pic.jpg" src="https://s3.cn-north-1.jdcloud-oss.com/shendengbucket1/2024-01-07-15-22jRx48QjPfQUT8WnF.jpg" referrerpolicy="no-referrer"></p><div><p>圖 2-1 es 集羣啓動流程</p></div><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">主節點選舉的過程，不是本文的重點，而是集羣元信息的選舉。被選舉出的 master 和集羣元信息新舊程度沒有關係；master 節點被選舉出來之後，它所要完成的第一個任務，即是選舉集羣元信息。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">（1）Master 選舉成功之後，判斷其持有的集羣狀態中是否存在 STATE_NOT_RECOVERED_BLOCK，如果不存在，則説明元數據已<br> 經恢復，跳過 gateway 恢復過程，否則等待。<code>org.elasticsearch.gateway.GatewayService#clusterChanged</code></p><pre><code>//跳過元數據恢復
if (state.blocks().hasGlobalBlock(STATE_NOT_RECOVERED_BLOCK) == false) {
            // already recovered
            return;
 }
 //此處省略部分代碼。
 //進入 gateway 恢復過程   
performStateRecovery(enforceRecoverAfterTime, reason); 
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">（2）Master 從各個節點主動獲取元數據信息。<code>org.elasticsearch.gateway.Gateway#performStateRecovery</code></p><pre><code># 獲取元信息核心代碼
 final String[] nodesIds = clusterService.state().nodes().getMasterNodes().keys().toArray(String.class);
        logger.trace("performing state recovery from {}", Arrays.toString(nodesIds));
        final TransportNodesListGatewayMetaState.NodesGatewayMetaState nodesState = listGatewayMetaState.list(nodesIds, null).actionGet();
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">（3）從獲取的元數據信息中選擇版本號最大的作為最新元數據;元信息包括集羣級、索引級。</p><pre><code>## org.elasticsearch.gateway.Gateway#performStateRecovery

    public void performStateRecovery(final GatewayStateRecoveredListener listener) throws GatewayException {
# 省略若干行代碼

## 進入 allocation 階段；
## final Gateway.GatewayStateRecoveredListener recoveryListener = new GatewayRecoveryListener();
## listener 為 GatewayStateRecoveredListener   
 listener.onSuccess(builder.build());    
}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">（4）兩者確定之後，調用 allocation 模塊的 reroute，對未分配，的分片執行分配，主分片分配過程中會異步獲取各個 shard 級別元數據。</p><pre><code>#主要實現方法為如下方法   
#org.elasticsearch.gateway.GatewayService.GatewayRecoveryListener#onSuccess
## 主要工作是構建集羣狀態（ClusterState），其中的內容路由表，依賴 allocation 模塊協助完成，調用 allocationService.reroute 進，入下一階段：異步執行分片層元數據的恢復，以及分片分配。updateTask 線程結束.
   
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start"><strong>ES 中存儲的數據</strong>：（1）state 元數據信息；（2）index Lucene 生成的索引文件；（3）translog 事務日誌。<br><strong>元數據信息</strong>：</p><ol><li><p style="color:#222222; margin-left:0; margin-right:0">nodes/0/_state/*.st，集羣層面元信息 MetaData（clusterUUID 、 settings 、templates 等）；</p></li><li><p style="color:#222222; margin-left:0; margin-right:0">nodes/0/indices/{index_uuid}/_state/*.st，索引層面元信息 IndexMetaData（ numberOfShards 、mappings 等）；</p></li><li><p style="color:#222222; margin-left:0; margin-right:0">nodes/0/indices/{index_uuid}/0/_state/*.st，分片層面元信息 ShardStateMetaData（version 、indexUUID、primary 等）。</p></li></ol><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">上述信息被持久化到磁盤：持久化的 state 不包括某個分片存在於哪個節點這種內容路由信息，集羣完全重啓時，依靠 gateway 的 recovery 過程重建 RoutingTable 和 RoutingNode。當讀取某個文檔時， 根據路由算法確定目的分片後，再從 RoutingTable 中查找分片位於哪個節點，然後將請求轉發到目的節點[1]。</p><blockquote><p style="color:#999999; margin-left:0; margin-right:0">⚠️ 注意：在 es7.0.0 之後 es 的元信息存儲方式發生變化；<br> es7.0.0 之後元信息存儲改使用 lucene 的方式存儲，見<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F50928" rel="nofollow" target="_blank">pr50928 Move metadata storage to Lucene</a>)</p></blockquote><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">7.10.2 專有主節點，集羣元數據</p><pre><code>./
|-- _state
|   |-- _39h.cfe
|   |-- _39h.cfs
|   |-- _39h.si
|   |-- node-0.st
|   |-- segments_50d
|   `-- write.lock
`-- node.lock
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">6.8.13 專有主節點，集羣元數據</p><pre><code>./
|-- _state
|   |-- global-230.st
|   `-- node-2.st
|-- indices
|   |-- -hiy4JnoRfqUJHTJoNUt4Q
|   |   `-- _state
|   |       `-- state-4.st
|   `-- ylJKVlqISGOi8EkpxHE_2A
|       `-- _state
|           `-- state-6.st
`-- node.lock
</code></pre><span id="OSC_h1_5"></span><h1>3 災難場景與處理方法</h1><span id="OSC_h2_6"></span><h2>3.1 master 節點丟失</h2><blockquote><p style="color:#999999; margin-left:0; margin-right:0">⚠️ 注意本文所述的 master 節點個數，假設前提均為 3 個</p></blockquote><span id="OSC_h3_7"></span><h3>場景 1 master 節點丟失過半</h3><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">master 節點是控制整個集羣；當該種節點角色丟失過半，由於集羣中投票節點永遠不可能達到 quorum 無法選主，將無法維持 es 節點形成一個集羣；雖然集羣無法形成一個集羣，但所仍幸 master-eligible 節點存活,我們可以使用如下手段進行處理。</p><span id="OSC_h4_8"></span><h4>es7.0.0 版本之前</h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">1 修改剩餘節點的 elasticsearch.yaml 配置如下,修改 quorum 的個數，然後啓動剩餘的節點，形成一個新的集羣；</p><pre><code>discovery.zen.minimum_master_nodes: 1
discovery.zen.ping.unicast.hosts:
- masters-0
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">2 重建補充之前丟失的 master-eligible 節點，加入集羣之後.<br> 3 將集羣配置修改為舊的配置，再逐一重啓下集羣中的節點，先從 master-eligible 開始.</p><span id="OSC_h4_9"></span><h4>es7.0.0（包含）版本之後.</h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">在 es7.0.0 版本之後,由於 es 修改集羣的啓動配置,新增配置<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.0%2Fdiscovery-settings.html%23unicast.hosts" rel="nofollow" target="_blank">discovery.seed_hosts</a><span>&nbsp;</span>和<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.0%2Fdiscovery-settings.html%23initial_master_nodes" rel="nofollow" target="_blank">cluster.initial_master_nodes</a>；es 集羣第一次啓動時稱為 bootstrap，該過程將配置文件中的 cluster.initial_master_node 作為初始的投票節點<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.9%2Fmodules-discovery-voting.html" rel="nofollow" target="_blank">Voting configurations</a>，投票節點具有選舉 master 和 commit cluster state 的權利，超過半數以上同意即投票成功。如果在集羣健康的場景下，我們需要下線超過半數的 master-eligible；則必須首先使用投票配置排除 API 從投票配置中排除受影響的節點。</p><pre><code>POST _cluster/voting_config_exclusions?node_names={node_names}
POST _cluster/voting_config_exclusions?node_ids={node_ids}
DELETE _cluster/voting_config_exclusions
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">但是如果丟失的 master 節點超過半數，則可以使用新的集羣處理工具 elasticsearch-node unsafe-bootstrap<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F37696" rel="nofollow" target="_blank">pr37696</a><span>&nbsp;</span>和 elasticsearch-node detach-cluster<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F37979" rel="nofollow" target="_blank">pr37979</a></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">面對丟失半數 master-eligible，es7.0.0（包含）版本之後的處理步驟如下：<br> 1 使用<code>bin/elasticsearch-node unsafe-bootstrap</code>命令讓唯一主節點以不安全的方式改寫投票節點，就像重新進行 bootstrap 一樣，自己使用持久化的 cluster state 形成一個新集羣<br> 2 其他數據節點無法加入新集羣因為 UUID 不同 (es 使用 UUID 作為節點和集羣的唯一表示，每個節點都會持久化當前集羣的 UUID)，使用<code>bin/elasticsearch-node detach-cluster</code>命令讓節點離開之前的集羣<br> 3 啓動數據節點和新的 master-eligible 節點 (如下補充兩個新的 master-eligible)，他會加入新集羣中</p><pre><code>cluster.initial_master_nodes:
- {master-0}
- {new-master-1}
- {new-master-2}
discovery.seed_hosts:
- {master-ip-0}
- {new-master-ip-1}
- {new-master-ip-2}
</code></pre><span id="OSC_h3_10"></span><h3>場景 2 master 節點全部丟失</h3><span id="OSC_h4_11"></span><h4>es7.0.0 版本之前</h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">1 關閉 security 功能 (如果開啓了, 最好先關閉 security 插件功能)：<br> 1.1 因為新啓動的 master 節點, 沒有數據節點 (如果只配置了一個 master 的角色), security 插件的初始化無法完成, 各類接口不好調用<br> 1.2 如果給新啓動的 master 節點, 配置了 master and data 角色, 則 security 插件會初始化成功. 會插入 index, 但是這個 index 會和原來的 data 節點上保存的衝突. 不知道怎麼解.<br> elastic 官方<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fconfiguring-security.html" rel="nofollow" target="_blank">xpack-security</a>;關閉鑑權：<code>xpack.security.enabled:false</code><br> 2 啓動足夠的新 master-eligible 節點形成一個新集羣.</p><pre><code>discovery.zen.minimum_master_nodes: 2
discovery.zen.ping.unicast.hosts:
- {new-masters-1}
- {new-masters-2}
- {new-masters-3}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">3 修改數據節點的為新 master 的地址,並且刪除掉節點上的_state(因為新集羣的 cluster UUID 不一致)，同上<br> 4 啓動數據節點，數據被恢復加入到集羣</p><span id="OSC_h4_12"></span><h4>es7.0.0（包含）版本之後</h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">已經沒有 cluster state 了，唯一的希望是數據節點上的 index 數據；恢復方式藉助<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fnode-tool.html" rel="nofollow" target="_blank">elasticsearch-node</a><span>&nbsp;</span>工具</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">1 關閉 security 功能 (如果開啓了, 最好先關閉 security 插件功能),原因同上<br> 2 啓動足夠的新 master-eligible 節點形成一個新集羣</p><pre><code>cluster.initial_master_nodes:
- {new-master-0}
- {new-master-1}
- {new-master-2}
discovery.seed_hosts:
- {new-master-ip-0}
- {new-master-ip-1}
- {new-master-ip-2}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">3<span>&nbsp;</span><code>bin/elasticsearch-node detach-cluster</code>命令讓數據節點離開之前的集羣</p><pre><code>./bin/elasticsearch-node detach-cluster
------------------------------------------------------------------------

    WARNING: Elasticsearch MUST be stopped before running this tool.

------------------------------------------------------------------------

You should only run this tool if you have permanently lost all of the
master-eligible nodes in this cluster and you cannot restore the cluster
from a snapshot, or you have already unsafely bootstrapped a new cluster
by running `elasticsearch-node unsafe-bootstrap` on a master-eligible
node that belonged to the same cluster as this node. This tool can cause
arbitrary data loss and its use should be your last resort.

Do you want to proceed?

Confirm [y/N] y
Node was successfully detached from the cluster
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">4<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.9%2Fdangling-indices-list.html" rel="nofollow" target="_blank">查詢 dangling 索引</a>,<code>GET /_dangling</code>, 改 api 引入 es7.9 版本於<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F58176" rel="nofollow" target="_blank">pr58176</a><br> 5 啓動數據節點並使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.9%2Fdangling-index-import.html" rel="nofollow" target="_blank">Import dangling indexAPI</a>將 index 數據 import 到 cluster state 中 (官方推薦，es7.9 版本之後). 或者，配置<code>gateway.auto_import_dangling_indices: true</code>引入於 es7.6 版本<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F49174" rel="nofollow" target="_blank">pr49174</a>（es7.6.0-7.9.0 可用該配置，在 7.6 版本之前不需要配置默認加載 dangling 索引）並啓動數據節點</p><pre><code>POST /_dangling/{index-uuid}?accept_data_loss=true
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">6 導入完成之後，索引 recovery 之後即可進行讀寫</p><blockquote><blockquote><p style="color:#999999; margin-left:0; margin-right:0">注意</p></blockquote><p style="color:#999999; margin-left:0; margin-right:0"><strong>Q1</strong>: 為什麼 7.6.0 之後需要配置,才能處理懸空索引（dangling index）才能讓數據加入新集羣，7.6.0 之後沒有懸空索引嗎？<br><strong>A1</strong>: 其實也是有的，只不過在 es2 版本將配置移除（對應<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F10016" rel="nofollow" target="_blank">pr10016</a>）,默認自動加載 dangling index（es2.0-es7.6）; 具體實現於<code>org.elasticsearch.gateway.DanglingIndicesState#processDanglingIndices</code><span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F49174" rel="nofollow" target="_blank">es7.6 再次引入 dangling 配置</a>，es7.9 引入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.9%2Fdangling-index-import.html" rel="nofollow" target="_blank">dangling index rest api</a></p></blockquote><blockquote><p style="color:#999999; margin-left:0; margin-right:0"><strong>Q2</strong>: 什麼是 dangling 索引？<br><strong>A2</strong>: 當一個節點加入集羣時，如果發現存儲在其本地數據目錄中的任何分片（shard）不存在於集羣中，將認為這些分片屬於「懸空」索引。懸空索引產生的場景（1）在 Elasticsearch 節點離線時刪除了多個<code>cluster.indices.tombstones.size</code><span>&nbsp;</span>索引，節點再次加入集羣集羣 （2）master 節點丟失，數據節點重新加入新的集羣等</p></blockquote><span id="OSC_h2_13"></span><h2>3.2 數據節點故障</h2><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">數據節點災難故障之後，無法恢復加入集羣；可將數據物理複製到新的節點，然後按照 master 節點丟失的方式，將數據節點加入集羣即可。</p><span id="OSC_h2_14"></span><h2>3.3 分片不能夠自動分配</h2><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">查看索引分片為什麼無法分配，<code>POST _cluster/allocation/explain</code></p><span id="OSC_h3_15"></span><h3>3.3.1 分片正常</h3><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">如果分片數據正常，那麼我們可以嘗試重試分配分片任務;<code>POST _cluster/reroute?retry_failed</code></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">獲取索引的 shard 在那些節點上，使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.0%2Findices-shards-stores.html" rel="nofollow" target="_blank">_shard_stores api</a></p><pre><code>GET indexName1/_shard_stores
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">使用<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F7.10%2Fcluster-reroute.html" rel="nofollow" target="_blank">cluster reroute</a>重新分配</p><pre><code># 嘗試分配副本 
POST /_cluster/reroute
{
  "commands": [
    {
      "allocate_replica": {
        "index": "{indexName1}",
        "shard": {shardId},
        "node": "{nodes-9}"
      }
    }
  ]
}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">如果是主分片無法分配，可以嘗試如下命令進行分配</p><pre><code>POST /_cluster/reroute
{
  "commands": [
    {
      "allocate_stale_primary": {
        "index": "{indexName1}",
        "shard": {shardId},
        "node": {nodes-9},
        "accept_data_loss": true
      }
    }
  ]
}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">如果主分片確實是無法分配，只能選擇丟失該分片的數據，分配一個空的主分片</p><pre><code>POST /_cluster/reroute
{
  "commands": [
    {
      "allocate_empty_primary": {
        "index": "{indexName1}",
        "shard": {shardId},
        "node": "{nodes-9}",
        "accept_data_loss": true
      }
    }
  ]
}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">es5.0 版本之前參考; https://www.elastic.co/guide/en/elasticsearch/reference/2.4/cluster-reroute.html</p><span id="OSC_h3_16"></span><h3>3.3.2 分片數據損壞</h3><span id="OSC_h4_17"></span><h4>shard corrupted</h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">錯誤參考<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fdiscuss.elastic.co%2Ft%2Fcorrupted-elastic-index%2F135932" rel="nofollow" target="_blank">Corrupted elastic index</a></p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start"><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.elastic.co%2Fguide%2Fen%2Felasticsearch%2Freference%2F6.5%2Fshard-tool.html" rel="nofollow" target="_blank">shard-tool</a><span>&nbsp;</span>es6.5 版本引入，該操作需要 stop 節點<br> elasticsearch-shard 工具 es6.5 版本引入<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F33848" rel="nofollow" target="_blank">pr33848</a><br> elasticsearch-shard remove-corrupted-data 的 es7.0.0 引入<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F32281" rel="nofollow" target="_blank">pr32281</a></p><pre><code>bin/elasticsearch-shard remove-corrupted-data --index {indexName} --shard-id {shardId}
## 示列：修復索引 twitter 的 0 號分片
bin/elasticsearch-shard remove-corrupted-data --index twitter --shard-id 0

## 如果--index 和--shard-id 換成索引分片目錄參數--dir，則直接修復 data 和 translog
bin/elasticsearch-shard remove-corrupted-data --dir /var/lib/elasticsearchdata/nodes/0/indices/P45vf_YQRhqjfwLMUvSqDw/0
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">修復完成之後，啓動節點，如果分片不能夠自動分配,使用 reroute 命令進行 shard 分片</p><pre><code>POST /_cluster/reroute{
  "commands":[
    {
      "allocate_stale_primary":{
        "index":"index42",
        "shard":0,
        "node":"node-1",
        "accept_data_loss":false
      }
    }
  ]}
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">5 版本之前可以通過索引級別配置，進行修復<br> index.shard.check_on_startup: fix ，該配置在 es6.5 版本移除<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F32279" rel="nofollow" target="_blank">pr32279</a></p><span id="OSC_h4_18"></span><h4>translog 損壞</h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">修復 translog 操作，需要 stop 節點。</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">修復工具 elasticsearch-translog es5.0.0 引入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F19342" rel="nofollow" target="_blank">pr19342</a><br> elasticsearch-shard remove-corrupted-data translog 的 es7.4.1 開始引入，<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F47866" rel="nofollow" target="_blank">pr47866</a>elasticsearch-shard 可以直接清除 translog，也可以像上文中指定--dir 那樣進行修復 translog</p><pre><code>bin/elasticsearch-shard remove-corrupted-data --index  --shard-id   --truncate-clean-translog
## 示列：修復索引 twitter 的 0 號分片
bin/elasticsearch-shard remove-corrupted-data --index twitter --shard-id 0 --truncate-clean-translog
</code></pre><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">清除完成之後使用 cluster reroute 進行恢復</p><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">5 版本之前可以通過索引級別配置，進行修復<br> index.shard.check_on_startup: fix ，該配置在 es6.5 版本移除<span>&nbsp;</span><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Felastic%2Felasticsearch%2Fpull%2F32279" rel="nofollow" target="_blank">pr32279</a></p><span id="OSC_h4_19"></span><h4><code>segments_N 文件丟失</code></h4><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">該種場景的文件損壞是最難修復的；官方還未提供工具，我們正在自己調研中</p><span id="OSC_h1_20"></span><h1>4 參考</h1><p style="color:#222222; margin-left:0; margin-right:0; text-align:start">[1]<span>&nbsp;</span>elasticsearch 集羣啓動流程<br> [2]https://www.elastic.co/guide/en/elasticsearch/reference/7.9/dangling-indices-list.html<br> [3]https://www.elastic.co/guide/en/elasticsearch/reference/7.10/node-tool.html</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">作者：京東科技，楊松柏</p><p style="color:#333333; margin-left:0; margin-right:0; text-align:left">來源：京東雲開發者社區，轉載請註明來源</p></div>
                                    ]]>
            </description>
            <pubDate>Tue, 23 Jan 2024 02:01:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/u/4090830/blog/10920402</guid>
            <link>https://my.oschina.net/u/4090830/blog/10920402</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[德國程序員因報告漏洞被判罰 2.4 萬元]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p><span style="color:#000000">德國於利希地方法院近日<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.heise.de%2Fnews%2FWarum-ein-Sicherheitsforscher-im-Fall-Modern-Solution-verurteilt-wurde-9601392.html" target="_blank">宣佈</a>了一項最新判決結果，認定一名程序員因未經授權訪問第三方計算機系統和刺探數據，違反《德國刑法典》（StGB）中所謂的黑客條款 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.gesetze-im-internet.de%2Fstgb%2F__202a.html" target="_blank">202a</a> 而處以 3000 歐元的罰款（約 2.35 萬元），同時承擔所有的訴訟費用。</span></p><p><img height="203" src="https://oscimg.oschina.net/oscnet/up-1685fc08f7024fc47d741af2e54fc872cf5.png" width="700" referrerpolicy="no-referrer"></p><p><span style="color:#000000">2021 年 6 月，這位名為 Hendrik H. 的研究人員在為 IT 服務公司 Modern Solution GmbH 的一位客户排除軟件故障時發現，Modern Solution 的代碼通過 MySQL 連接至一台 MariaDB 數據庫服務器。而訪問遠程服務器的密碼則以純文本形式存儲在程序文件 MSConnect.exe 中，任何人使用簡單的文本編輯器就能打開該文件查看內容，並找到未加密的硬編碼密碼。</span></p><p><span style="color:#000000">也正是因為這個唾手可得的密碼，導致任何人都可以登錄遠程服務器訪問 Modern Solution 的客户的數據，同時還可以訪問存儲在該數據庫服務器上的供應商所有客户的數據。總的來説，這個數據庫漏洞暴露了近 70 萬條客户記錄，包括姓名、電子郵件地址、電話號碼、銀行信息、密碼以及對話和通話記錄等。</span></p><p><span style="color:#000000">在發現這一漏洞後，該程序員在一名技術博客作者 Mark Steier 的幫助下聯繫了相關公司，後者隨後修復了安全漏洞，並報警追究這名程序員的責任。2021 年 9 月，德國警方扣押了 Hendrik H. 的電腦，因為 Modern Solution 指控他是通過內部信息獲得的密碼，並聲稱他是競爭對手。</span></p><p><span style="color:#000000">2023 年 6 月，德國於利希地方法院以 Modern Solution 軟件保護不力為由，支持了 Hendrik H 的訴訟請求。但亞琛地區法院指令於利希地方法院再次審理此案，原先的裁定被推翻。2024 年 1 月 17 日，於利希地方法院最終宣判對 Hendrik H. 處以罰款，並責令其支付訴訟費用。</span></p><p><span style="color:#000000">這一判決不可避免的在廣大網絡安全專家和研究人員當中引起了爭議。Steier 發帖<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwortfilter.de%2Fentdecker-des-datenlecks-modern-solution-heute-vor-gericht%2F" target="_blank">表示</a>，這一判決從根本上就是錯誤的。「幾乎以純文本形式保存的密碼並不構成第 202 條所要求的'special security'。法官無法對此作出判斷是可以理解的，但這樣一來就必須就這個問題聽取專家的意見。遺憾的是，這並沒有發生。」</span></p><p><span style="color:#000000">不過，該判決尚未具有法律約束力。</span><span style="background-color:#ffffff; color:#323232">被告的辯護律師辯稱，即使法院判定他有罪，他的當事人的行為也是為了公眾利益。</span><span style="color:#000000">被指控的程序員已於 1 月 19 日宣佈，正在對判決提出上訴。</span></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 22 Jan 2024 09:41:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276369/germany-programmer-fined-security</guid>
            <link>https://www.oschina.net/news/276369/germany-programmer-fined-security</link>
            <author>
                <![CDATA[來源: OSCHINA]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[北京獲準向公眾開放的生成式 AI 大模型產品佔全國近半]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>北京市第十六屆人民代表大會第二次會議於日前召開，會上透露，2023,年，北京獲準向公眾開放的生成式人工智能大模型產品佔全國近一半。今年，北京將推動人工智能模型對標國際先進水平，加快在政務、醫療、工業、生活服務等領域應用。</p><p>北京市市長殷勇作政府工作報告時指出，2023 年，北京加快建設國際科技創新中心，加強科技領軍人才尤其是青年人才培養引進，實施基礎研究領先行動和關鍵核心技術攻堅戰行動，推動在京國家實驗室高質量運行，支持新型研發機構開展有組織科研，加快構建以企業為主導的產學研深度融合新範式。</p><p>北京鞏固提升高精尖產業發展優勢，出台通用人工智能、人形機器人等 30 餘項細分產業支持政策，新設 4 支政府高精尖產業基金，一批創新藥品、醫療器械獲批上市，小米智能手機工廠、理想汽車旗艦工廠提前投產。</p><p>北京精心打造全球數字經濟標杆城市，率先建成全球性能領先的區塊鏈基礎設施，新增 5G 基站 3 萬個，獲準向公眾開放的生成式人工智能大模型產品佔全國近一半，「京通」「京辦」「京智」三個智慧城市應用終端快速升級拓展，高級別自動駕駛示範區實現 160 平方公里連片運行，全國首個數據基礎制度先行區啓動建設，數字經濟增加值佔地區生產總值比重達 42.9%。</p><p>殷勇説，今年，北京將加快發展新質生產力。實施製造業重點產業鏈高質量發展行動，提升產業鏈供應鏈韌性和安全水平。加強原創新藥和高端醫療器械研發，培育生物製造等醫藥健康產業新增長點。推動新能源汽車產業高質量發展，積極佈局電機、電池、電控等關鍵零部件產業鏈。推進超高清視頻全產業鏈優化升級。促進新能源、新材料、商業航天、低空經濟等戰略性新興產業發展，開闢量子、生命科學等未來產業新賽道。優化專精特新企業梯隊培育體系，助力更多企業發展壯大。</p><p>殷勇指出，今年，北京將促進平台經濟有序競爭、創新發展，推動先進數字技術向中小企業深度普及，構建開放共享、充滿活力的創新生態。提升人工智能底層技術和基礎底座自主可控能力，推動人工智能模型對標國際先進水平，加快在政務、醫療、工業、生活服務等領域應用，保持人工智能研發應用領先水平。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 22 Jan 2024 05:55:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276347</guid>
            <link>https://www.oschina.net/news/276347</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[RustDesk 新增 2FA 雙重認證功能，增強遠程桌面訪問安全性]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p>RustDesk <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2Frustdesk%2Frustdesk%2Freleases%2Ftag%2Fnightly" target="_blank">nightly</a>&nbsp;新增 2FA 雙重認證功能，增強遠程桌面訪問安全性，歡迎大家試用反饋。</p><p><img height="1246" src="https://oscimg.oschina.net/oscnet/up-0de6626da796bb7195b23fc861ee98e2f12.jpg" width="1708" referrerpolicy="no-referrer"></p><p><img height="623" src="https://oscimg.oschina.net/oscnet/up-eef5d3bce35b2b05039bb7678d9ebbea95b.jpg" width="854" referrerpolicy="no-referrer"></p><p><img height="1270" src="https://oscimg.oschina.net/oscnet/up-d4017aeb3ba844b73de27c16d258a40944d.jpg" width="1780" referrerpolicy="no-referrer"></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 22 Jan 2024 04:20:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276342/rustdesk-2fa</guid>
            <link>https://www.oschina.net/news/276342/rustdesk-2fa</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[到底什麼樣的 Java 項目用 Solon 好？？？]]>
            </title>
            <description>
                <![CDATA[<div class="content"><p style="color:#24292e; margin-left:0; margin-right:0; text-align:start">就像華為講的，不要因為愛國而特意買華為手機。Solon 也是，<strong>有需要就用不需要就跳過</strong>（按正常的需求選擇）：</p><ul><li>信創需要國產化，應該用 Solon 或者 Solon Cloud（有案例）</li><li>軍工項目要國產化，應該用 Solon 或者 Solon Cloud（有案例）</li><li>嵌入式設備，內存有限，算力差，可以用 Solon 或者 Solon Native（有案例）</li><li>客户的希望你內存更少，可以用 Solon （有案例）</li><li>別的框架用膩了，可以用 Solon （有案例）</li><li>有新系統開發想嘗新的框架，可以用 Solon （有案例）</li><li>老系統要輕量化改造，可以用 Solon（有案例）</li></ul><p style="color:#24292e; margin-left:0; margin-right:0; text-align:start">作為後來者，大家的疑或是會多一些。有問題，可以去交流羣裏多交流。</p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 22 Jan 2024 04:14:00 GMT</pubDate>
            <guid isPermaLink="false">https://www.oschina.net/news/276341</guid>
            <link>https://www.oschina.net/news/276341</link>
            <author>
                <![CDATA[來源: 投稿]]>
            </author>
        </item>
        <item>
            <title>
                <![CDATA[如何寫好大模型提示詞？來自大賽冠軍的經驗分享（進階篇）]]>
            </title>
            <description>
                <![CDATA[<div class="content"><blockquote><p><strong>編者按</strong>：近期，如何通過 Prompt Engineering 最大程度發揮大模型的潛力已成為一個熱點話題。人們越來越關注如何通過 Prompt Engineering 技術低成本地用好大模型。</p><p>今天我們推薦的這篇文章，作者認為 Prompt Engineering 需要結合藝術與科學，需要在理解技術背景的同時，發揮創造力和戰略思維。</p><p>本系列文章詳細介紹了作者在新加坡首屆 GPT-4 Prompt Engineering 大賽中使用的策略技巧，包括：<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMTI3MTg5MQ%3D%3D%26mid%3D2247484732%26idx%3D1%26sn%3Dbb155ad71f69a8b6aefe7f8557192620%26chksm%3Dc26cc080f51b4996fbb197d6a1fbdce5a45aad000747178e06abea12c89a5601101309012e68%26scene%3D21%23wechat_redirect" target="_blank">使用 CO-STAR 框架構建提示語、使用分隔符明確語義單元</a>、利用 system prompts 添加行為約束、僅依靠 GPT-4 對數據集進行分析等。這些技巧都得到了實例驗證，證明瞭 Prompt Engineering 的重要作用。</p><p>本文屬於該系列文章的第二部分，詳細介紹適合進階使用的 Prompt Engineering 高級策略。</p></blockquote><p><strong>作者 |&nbsp;Sheila Teo</strong></p><p><strong>編譯&nbsp;|&nbsp;嶽揚</strong></p><p><strong>🚢🚢🚢歡迎小夥伴們加入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaihai-idp.yuque.com%2Fmwvla8%2Fdoc%3F%23" target="_blank">AI 技術軟件及技術交流羣</a>，追蹤前沿熱點，共探技術難題~</strong></p><p>上個月，我有幸獲得新加坡首屆 GPT-4 提示工程（Prompt Engineering）大賽相關獎項，該比賽由新加坡政府科技署（GovTech）組織，匯聚了超過 400&nbsp;位優秀的參與者。</p><p><strong>提示工程（Prompt Engineering）是一門融合了藝術和科學的學科——這門學科不僅需要理解技術，還需要一定的創造力和戰略思維。</strong> 以下是我在學習過程中學到的提示工程（Prompt Engineering）策略彙編，這些策略可以驅動任何大語言模型（LLM）精準執行需求，甚至超常發揮！</p><blockquote><p>作者注：</p><p>在撰寫本文時，我力圖摒棄已在網上廣泛討論和記錄的傳統提示工程（Prompt Engineering）技術。相反，撰寫本文的目的是給大家介紹我在實驗中學到的新見解，以及對某些技術的不同理解。希望你會喜歡閲讀這篇文章！</p></blockquote><p>本系列文章包括以下內容，其中🔵指的是適合初學者的提示語（prompt）技巧（<a href="https://www.oschina.net/action/GoToLink?url=http%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzkzMTI3MTg5MQ%3D%3D%26mid%3D2247484732%26idx%3D1%26sn%3Dbb155ad71f69a8b6aefe7f8557192620%26chksm%3Dc26cc080f51b4996fbb197d6a1fbdce5a45aad000747178e06abea12c89a5601101309012e68%26scene%3D21%23wechat_redirect" target="_blank">見基礎篇</a>），而🔴指的是高級策略（本文的重點）：</p><p>1.[🔵] 使用&nbsp;CO-STAR&nbsp;框架構建提示語</p><p>2.[🔵]&nbsp;使用分隔符（delimiters）將提示語分段</p><p><strong>3.[🔴]&nbsp;使用&nbsp;LLM guardrails&nbsp;創建&nbsp;system prompts</strong>（譯者注："guardrails"&nbsp;指的是一種保護機制或限制，用於確保大語言模型生成的內容符合特定標準或要求，防止產生不準確、不合適或有害的信息。）</p><p><strong>4.[🔴]&nbsp;僅使用&nbsp;LLM（無需插件或代碼）分析數據集——將介紹一個使用&nbsp;GPT-4&nbsp;分析真實&nbsp;Kaggle&nbsp;數據集的實踐示例</strong></p><h1><strong>01 [🔴]&nbsp;使用&nbsp;LLM guardrails&nbsp;創建&nbsp;system prompts</strong></h1><p>在進入正題之前，需要注意的是本節只適用於具有 System Prompt 功能的 LLM，而不像基礎篇和本文的其他章節那樣適用於任何 LLM。最著名的 LLM 當然是&nbsp;ChatGPT ，因此在本節中我們將以 ChatGPT 作為示例。</p><h2><strong>1.1 圍繞&nbsp;System Prompt&nbsp;的術語</strong></h2><p>首先，讓我們來理清術語，特別是關於 ChatGPT 的三種術語的使用：這三種術語在 ChatGPT 幾乎可以互換使用：&nbsp;"System Prompts"、"System Messages "和&nbsp;"Custom Instructions"。這讓很多人（包括我在內！）感到困惑，以至於&nbsp;OpenAI&nbsp;特意發佈了一篇文章來解釋這些術語。以下是其摘要：</p><ul><li><strong>"System Prompts"和"System Messages"是通過 Chat Completions API 以編程方式與 ChatGPT 進行交互時使用的術語。</strong></li><li><strong>另一方面，"Custom Instructions"是通過 <a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fchat.openai.com%2F" target="_blank">https://chat.openai.com/</a>&nbsp; 用户界面與 ChatGPT 交互時使用的術語。</strong></li></ul><p><img src="https://oscimg.oschina.net/oscnet/up-121921e25f98c551f3af8e6f70943254843.png" alt="" referrerpolicy="no-referrer"></p><p>Image from Enterprise DNA Blog</p><p>不過總的來説，這三個術語指的是同一件事，所以不要被這些術語混淆了！後續部分，本文將使用&nbsp;"System Prompts"一詞。現在，讓我們進入正題！</p><h2><strong>1.2 什麼是 System Prompts ？</strong></h2><p>System Prompts 是一種額外的提示語（prompt），我們可以在其中提供有關 LLM 行為方式的 instructions。它被認為是額外的提示語（prompt），因為它不屬於您給 LLM 的&nbsp;"正常"&nbsp;提示語（即 User Prompts）。</p><p>在聊天中，每當您給 LLM 發送新的提示語（prompt）時，System Prompts 都會像過濾器一樣，LLM 會在回答您的新提示語（prompt）之前自動應用這些提示語（prompt）。這意味着 System Prompts 在 LLM 做出回答時都會被考慮進去。</p><h2><strong>1.3 何時使用 System Prompt ？</strong></h2><p>您心中可能會想到的第一個問題是：為什麼我應該在 System Prompts 中提供 instruction，而不是在我向與 LLM 的新對話的第一個提示語（prompt）中提供 instruction，然後再與 LLM 進行更多的對話呢？</p><p>答案是，因為 LLM 的對話記憶是有限的。在後一種情況下，隨着對話的繼續，LLM 很可能會"忘記"您在聊天中提供的第一條提示語（prompt），從而使這些 instruction （指令）過時。</p><p>另一方面，如果在 System Prompts 中提供了 instruction （指令），那麼這些 System Prompts &nbsp;會與聊天中提供的每個新提示語一起發送。這可以確保 LLM 在聊天過程中繼續接收這些 instruction，無論聊天過程變得多長。</p><p>總結：</p><p>在整個聊天過程中，使用 System Prompts 提供您希望 LLM 在回答時記住的 instruction 。</p><h2><strong>1.4 System Prompt 應包括哪些內容？</strong></h2><p>System Prompt 通常應包括以下類別的 instruction ：</p><ul><li><strong>目標任務的定義（Task definition）</strong> ，這樣 LLM 在整個對話過程中都會記住它必須做什麼。</li><li><strong>輸出格式（Output format）</strong> ，這樣 LLM 在整個對話過程中都會記住它應該如何做出回答。</li><li><strong>防範措施（Guardrails）</strong> ，這樣 LLM 在整個對話過程中都會記住它不應該如何做出回答。Guardrails 是 LLM governance 中的新興領域，指的是 LLM 被允許操作的行為邊界。</li></ul><p>例如，System Prompt 可能是這樣的：</p><blockquote><p>You will answer questions using this text:&nbsp;[insert text].</p><p>You will respond with a JSON object in this format:&nbsp;{「Question」:&nbsp;「Answer」}.</p><p>If the text does not contain sufficient information to answer the question,&nbsp;do not make up information and give the answer as&nbsp;「NA」.</p><p>You are only allowed to answer questions related to&nbsp;[insert scope].&nbsp;Never answer any questions related to demographic information such as age,&nbsp;gender,&nbsp;and religion.</p></blockquote><p>各部分內容涉及的類別如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-cab48977b545bba61bf371683a3bdc105af.png" alt="" referrerpolicy="no-referrer"></p><p>Breaking down a System Prompt&nbsp;—&nbsp;Image by author</p><h2><strong>1.5 但是，"正常"的聊天提示語又是什麼呢？</strong></h2><p>現在你可能會想：聽起來 System Prompt 中已經提供了很多信息。那我應該在聊天的"正常"提示語（即 User Prompts）中寫些什麼呢？</p><p>System Prompt 概述了當前的一般任務。在上面的 System Prompt 示例中，任務已被定義為只使用一段特定的文本來回答問題，並且 LLM 被指示以{"Question":&nbsp;"Answer"}的格式進行回答。</p><blockquote><p>You will answer questions using this text:&nbsp;[insert text].</p><p>You will respond with a JSON object in this format:&nbsp;{「Question」:&nbsp;「Answer」}.</p></blockquote><p>在這種情況下，聊天過程中的每個 User Prompt 都將簡化為你希望 LLM 用文本回答的問題。例如，某個用户的提問可能是「這段文本是關於什麼的？（What is the text about?）」然後 LLM 會回答説&nbsp;{"這段文本是關於什麼的？（What is the text about?）":&nbsp;"這段文本是關於……（The text is about..）"}。</p><p>但是，讓我們進一步概括這個任務示例。在這種情況下，我們可以將上述 System Prompt &nbsp;的第一行從：</p><blockquote><p>You will answer questions using this text:&nbsp;[insert text].</p></blockquote><p>編輯為：</p><blockquote><p>You will answer questions using the provided text.</p></blockquote><p>現在，每個用户在聊天時的提示語（prompt）將包括進行問題回答的文本和要回答的問題，例如：</p><blockquote><p>&lt;text&gt;</p><p>[insert text]</p><p>&lt;/text&gt;</p><p>&lt;question&gt;</p><p>[insert question]</p><p>&lt;/question&gt;</p></blockquote><p>在這裏，還將使用 XML 標籤作為分隔符，以便以結構化的方式向 LLM 提供所需的兩個信息片段。<strong>XML 標籤中使用的名詞「text」和「question」與 System Prompt 中使用的名詞相對應，這樣 LLM 就能理解標籤與 System Prompt instructions 之間的關係。</strong></p><p>總之， System Prompt 應給出總體任務 instructions，而每個 User Prompt 應提供任務執行的具體細節。例如，在本例中，這些具體的細節是 text 和 question。</p><h2><strong>1.6 LLM guardrails&nbsp;動態化</strong></h2><p>上面通過 System Prompt 中的幾句話添加了 guardrails 。這些 guardrails 會被固定下來，在整個聊天過程中都不會改變。但是如果您希望在對話的不同階段設置不同的 guardrails ，該怎麼辦？</p><p>對於使用 ChatGPT Web 界面的用户來説，目前還沒有直接的方法來做到這一點。不過，如果您正在通過編程方式與 ChatGPT 進行交互，那你就走運了！隨着人們對構建有效的 LLM guardrail 的關注度越來越高，一些開源軟件包也應運而生，它們可以讓你以編程方式設置更詳細、更動態的 guardrail。</p><p>其中值得注意的是英偉達團隊開發的&nbsp;NeMo Guardrails[1]，它允許您配置用户和 LLM 之間預期的對話流程，從而在聊天的不同時間點設置不同的 guardrail ，實現隨着聊天進展而不斷演變的動態 guardrails 。我強烈推薦您去了解一下！</p><h1><strong>02 [🔴]&nbsp;僅使用&nbsp;LLM（無需插件或代碼）分析數據集</strong></h1><p>您可能已經聽説過 OpenAI 在 ChatGPT 的 GPT-4 中推出的高級數據分析插件，該插件僅高級（付費）賬户可以使用。它允許用户將數據集上傳到 ChatGPT，並直接在數據集上運行代碼，從而進行精確的數據分析。</p><p>但你知道嗎，使用 LLM 分析數據集並不一定需要這樣的插件？讓我們先來瞭解一下單純使用 LLMs 分析數據集的優勢和侷限性。</p><h2><strong>2.1 大語言模型不擅長的數據集分析類型</strong></h2><p>正如您可能已經知道的那樣，LLM 在進行精確數學計算方面的能力有限，因此它們不適合完成需要對數據集進行精確定量分析的任務，比如：</p><ul><li><strong>描述性統計（Descriptive Statistics）</strong> ：通過諸如均值或方差的測量來定量總結數值列。</li><li><strong>相關性分析（Correlation Analysis）</strong> ：獲取列之間精確的相關係數。</li><li><strong>統計分析（Statistical Analysis）</strong> ：比如假設檢驗（hypothesis testing），以確定各組數據點之間是否存在統計意義上的顯著差異。</li><li><strong>機器學習（Machine Learning）</strong> ：在數據集上執行預測建模，比如使用線性迴歸（linear regressions）、梯度提升樹（gradient boosted trees）或神經網絡（neural networks）。</li></ul><p>方便在數據集上執行這些定量任務正是 OpenAI 推出高級數據分析插件的原因，這樣編程語言就可以在數據集上運行代碼來執行此類任務。</p><p>那麼，為什麼有人只想使用 LLM 而不使用此類插件來分析數據集呢？</p><h2><strong>2.2 大語言模型擅長的數據集分析類型</strong></h2><p>LLM 非常擅長識別模式和趨勢（patterns and trends）。這種能力源自它們在多樣化和海量數據上的廣泛訓練，使它們能夠識別那些可能無法立即察覺的複雜模式。</p><p>這使它們非常適合執行基於數據集進行模式識別的任務，例如：</p><ul><li><strong>異常檢測（Anomaly detection）</strong> ：基於一列或多列的數值，識別偏離常規的異常數據點。</li><li><strong>聚類（Clustering）</strong> ：將具有相似特徵的數據點分組。</li><li><strong>跨列關係（Cross-Column Relationships）</strong> ：通過分析不同列之間的關係，可以揭示數據中的複雜模式和趨勢。</li><li><strong>文本分析（Textual Analysis）（針對基於文本的列）</strong> ：基於主題或情感進行分類。</li><li><strong>趨勢分析（Trend Analysis）（針對具有時間特徵的數據集）</strong> ：識別列中跨時間的模式、季節性變化或趨勢。</li></ul><p>對於這類基於模式的任務，單獨使用 LLM 可能會比使用代碼在更短的時間內獲得更好的結果！讓我們用一個例子來充分説明這一點。</p><h2><strong>2.3 僅使用&nbsp;LLM&nbsp;分析&nbsp;Kaggle&nbsp;數據集</strong></h2><p>我們將使用一個廣受歡迎的真實&nbsp;Kaggle&nbsp;數據集[2]，該數據集專為進行客户人格分析而準備，其中一家公司試圖對其客户羣體進行細分，以便更好地瞭解其客户。</p><p>為了便於之後驗證 LLM 的分析結果，我們取該數據集的 50&nbsp;行為一個子集，並只保留最相關的列。之後，用於分析的數據集將如下所示，其中每一行代表一位客户，每一列描述客户信息：</p><p><img src="https://oscimg.oschina.net/oscnet/up-7c8caf80c5954ae73d0746053b0109b7737.png" alt="" referrerpolicy="no-referrer"></p><p>First 3 rows of dataset&nbsp;—&nbsp;Image by author</p><p>假設你在公司的營銷團隊工作。你的任務是利用這些客户信息數據集來指導營銷工作。這是一項分兩步走的任務：首先，利用數據集劃分多個具有實際意義的客户細分羣體。接下來，提出如何最好地針對每個客户羣體進行創意營銷。現在，這是一個實際的商業問題，LLM 的模式發現（pattern-finding，對於步驟 1 ）能力在這個問題上確實可以大顯身手。</p><p>讓我們按照以下方式為這個任務制定提示語（prompt），將使用&nbsp;4&nbsp;種&nbsp;prompt engineering&nbsp;技術（後續會詳細介紹[3]）：</p><p><strong>1. 將複雜的任務分解為簡單的步驟</strong></p><p><strong>2. 參考每個步驟的中間輸出</strong></p><p><strong>3. 格式化 LLM 的回答</strong></p><p><strong>4. 將&nbsp;instructions&nbsp;與數據集分開</strong></p><blockquote><p>System Prompt:</p><p>I want you to act as a data scientist to analyze datasets.&nbsp;Do not make up information that is not in the dataset.&nbsp;For each analysis I ask for,&nbsp;provide me with the exact and definitive answer and do not provide me with code or instructions to do the analysis on other platforms.</p><p>Prompt:</p><p>#&nbsp;CONTEXT&nbsp;#</p><p>I sell wine.&nbsp;I have a dataset of information on my customers:&nbsp;[year of birth,&nbsp;marital status,&nbsp;income,&nbsp;number of children,&nbsp;days since last purchase,&nbsp;amount spent].</p><p>#############</p><p>#&nbsp;OBJECTIVE&nbsp;#</p><p>I want you use the dataset to cluster my customers into groups and then give me ideas on how to target my marketing efforts towards each group.&nbsp;Use this step-by-step process and do not use code:</p><p>1.&nbsp;CLUSTERS:&nbsp;Use the columns of the dataset to cluster the rows of the dataset,&nbsp;such that customers within the same cluster have similar column values while customers in different clusters have distinctly different column values.&nbsp;Ensure that each row only belongs to 1 cluster.</p><p>For each cluster found,</p><p>2.&nbsp;CLUSTER_INFORMATION:&nbsp;Describe the cluster in terms of the dataset columns.</p><p>3.&nbsp;CLUSTER_NAME:&nbsp;Interpret&nbsp;[CLUSTER_INFORMATION]&nbsp;to obtain a short name for the customer group in this cluster.</p><p>4.&nbsp;MARKETING_IDEAS:&nbsp;Generate ideas to market my product to this customer group.</p><p>5.&nbsp;RATIONALE:&nbsp;Explain why&nbsp;[MARKETING_IDEAS]&nbsp;is relevant and effective for this customer group.</p><p>#############</p><p>#&nbsp;STYLE&nbsp;#</p><p>Business analytics report</p><p>#############</p><p>#&nbsp;TONE&nbsp;#</p><p>Professional,&nbsp;technical</p><p>#############</p><p>#&nbsp;AUDIENCE&nbsp;#</p><p>My business partners.&nbsp;Convince them that your marketing strategy is well thought-out and fully backed by data.</p><p>#############</p><p>#&nbsp;RESPONSE:&nbsp;MARKDOWN REPORT&nbsp;#</p><p>&lt;For each cluster in&nbsp;[CLUSTERS]&gt;</p><p>—&nbsp;Customer Group:&nbsp;[CLUSTER_NAME]</p><p>—&nbsp;Profile:&nbsp;[CLUSTER_INFORMATION]</p><p>—&nbsp;Marketing Ideas:&nbsp;[MARKETING_IDEAS]</p><p>—&nbsp;Rationale:&nbsp;[RATIONALE]</p><p>&lt;Annex&gt;</p><p>Give a table of the list of row numbers belonging to each cluster,&nbsp;in order to back up your analysis.&nbsp;Use these table headers:&nbsp;[[CLUSTER_NAME],&nbsp;List of Rows].</p><p>#############</p><p>#&nbsp;START ANALYSIS&nbsp;#</p><p>If you understand,&nbsp;ask me for my dataset.</p></blockquote><p>GPT-4 的回答如下，接下來我們將數據集以 CSV 字符串的形式傳遞給它。</p><p><img src="https://oscimg.oschina.net/oscnet/up-e81a5f6ea27da5b058438541aa821009931.png" alt="" referrerpolicy="no-referrer"></p><p>GPT-4's response&nbsp;—&nbsp;Image by author</p><p>隨後，GPT-4 將按照我們要求的 markdown 格式回覆分析結果：</p><p><img src="https://oscimg.oschina.net/oscnet/up-72040eca14932d7eb9289119eb13af4d0a8.png" alt="" referrerpolicy="no-referrer"></p><p>GPT-4's response&nbsp;—&nbsp;Image by author</p><p><img src="https://oscimg.oschina.net/oscnet/up-03f08b1a6bfadee91b96716822f50f0c4a4.png" alt="" referrerpolicy="no-referrer"></p><p>GPT-4's response&nbsp;—&nbsp;Image by author</p><p><img src="https://oscimg.oschina.net/oscnet/up-f81c09e878806d7f71c9773c8291d3611d5.png" alt="" referrerpolicy="no-referrer"></p><p>GPT-4's response&nbsp;—&nbsp;Image by author</p><h2><strong>2.4 驗證&nbsp;LLM&nbsp;的分析結果</strong></h2><p>為了簡潔起見，我們將挑選 LLM 生成的 2 個客户羣體進行驗證，比如 Young Families 和 Discerning Enthusiasts。</p><h3><strong>2.4.1 Young Families</strong></h3><ul><li>LLM 總結的該人羣特徵：1980 年後出生，已婚或同居，收入中等偏低，有孩子，經常進行小額購買。</li><li>LLM 將數據集中的這些行聚類到了 Young Families 這個羣體中：3、4、7、10、16、20</li></ul><p>深入數據集，這些行的完整數據如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-01030fc251ada675444cc2b84f87f861ce5.png" alt="" referrerpolicy="no-referrer"></p><p>Full data for Young Families&nbsp;—&nbsp;Image by author</p><p>LLM 識別出的這部分客户資料，確實對應於所識別的客户羣體。甚至能夠在我們事先未經過預處理的情況下對具有空值的資料進行聚類！</p><h3><strong>2.4.2 Discerning Enthusiasts</strong></h3><ul><li>LLM 總結的該人羣特徵：年齡跨度廣，可能是任何婚姻狀況，高收入，子女狀況各異，購買支出高。</li><li>LLM 認為該人羣對應的數據行：2、5、18、29、34、36</li></ul><p>深入數據集，這些行的完整數據如下：</p><p><img src="https://oscimg.oschina.net/oscnet/up-2844275d166caf555082adb378ad4e1e7b6.png" alt="" referrerpolicy="no-referrer"></p><p>Full data for Discerning Enthusiasts&nbsp;—&nbsp;Image by author</p><p>再次與 LLM 識別出的人羣資料非常吻合！</p><p>這個例子展示了 LLM 在發現模式、解釋和提煉多維數據集，並將其提煉為有意義的見解方面的能力，同時確保其分析深深紮根於數據集的事實。</p><h2><strong>2.5 如果我們使用 ChatGPT 的高級數據分析插件會怎樣呢？</strong></h2><p>為了保證分析的完整性，我嘗試使用相同的提示語（prompt），並請求 ChatGPT 使用代碼執行相同的分析，這就激活了它的高級數據分析插件。這個想法是讓插件直接在數據集上運行 K-Means 等聚類算法的代碼，以獲得各個用户羣體的特徵，然後綜合每個羣體的數據來提供營銷策略。</p><p>然而，儘管數據集只有 50&nbsp;行，進行了多次嘗試都導致出現以下錯誤信息而沒有任何輸出：</p><p><img src="https://oscimg.oschina.net/oscnet/up-10c7526d7a4b7d296cef8b48699d37762a9.png" alt="" referrerpolicy="no-referrer"></p><p>Error and no output from Attempt 1&nbsp;—&nbsp;Image by author</p><p><img src="https://oscimg.oschina.net/oscnet/up-fa3318a26ba4ab2800121fb5ab4295345f5.png" alt="" referrerpolicy="no-referrer"></p><p>Error and no output from Attempt 2&nbsp;—&nbsp;Image by author</p><p>現在使用高級數據分析插件，在數據集上執行較簡單的任務（如計算描述性統計數據或創建圖表）似乎很容易實現，但需要某些計算算法的較高級任務有時可能會由於計算限制或其他原因導致錯誤或無輸出。</p><h2><strong>2.6 那麼......何時使用 LLM 分析數據集？</strong></h2><p>答案是取決於分析的數據類型。</p><p>對於需要精確數學計算或複雜的、基於規則處理的任務，傳統的編程方法仍然更勝一籌。</p><p>對於基於模式識別（pattern-recognition）的任務，使用傳統的編程或算法方式可能比較具有挑戰性或更耗時。然而，LLM 擅長此類任務，甚至可以提供額外的內容輸出，比如用來支持其分析的附件和 Markdown 格式的完整分析報告。</p><blockquote><p><strong>歸根結底，是否使用 LLM 取決於手頭任務的性質，要在 LLM 在模式識別方面的優勢與傳統編程技術提供的精確性和特異性之間取得平衡。</strong></p></blockquote><h2><strong>2.7 現在回到提示工程（prompt engineering）！</strong></h2><p><strong>在本節結束之前，讓我們回顧一下用於生成此數據集分析的提示語（prompt），並分解所使用的 prompt engineering 關鍵技術。</strong></p><blockquote><p>Prompt:</p><p>#&nbsp;CONTEXT&nbsp;#</p><p>I sell wine.&nbsp;I have a dataset of information on my customers:&nbsp;[year of birth,&nbsp;marital status,&nbsp;income,&nbsp;number of children,&nbsp;days since last purchase,&nbsp;amount spent].</p><p>#############</p><p>#&nbsp;OBJECTIVE&nbsp;#</p><p>I want you use the dataset to cluster my customers into groups and then give me ideas on how to target my marketing efforts towards each group.&nbsp;Use this step-by-step process and do not use code:</p><p>1.&nbsp;CLUSTERS:&nbsp;Use the columns of the dataset to cluster the rows of the dataset,&nbsp;such that customers within the same cluster have similar column values while customers in different clusters have distinctly different column values.&nbsp;Ensure that each row only belongs to 1 cluster.</p><p>For each cluster found,</p><p>2.&nbsp;CLUSTER_INFORMATION:&nbsp;Describe the cluster in terms of the dataset columns.</p><p>3.&nbsp;CLUSTER_NAME:&nbsp;Interpret&nbsp;[CLUSTER_INFORMATION]&nbsp;to obtain a short name for the customer group in this cluster.</p><p>4.&nbsp;MARKETING_IDEAS:&nbsp;Generate ideas to market my product to this customer group.</p><p>5.&nbsp;RATIONALE:&nbsp;Explain why&nbsp;[MARKETING_IDEAS]&nbsp;is relevant and effective for this customer group.</p><p>#############</p><p>#&nbsp;STYLE&nbsp;#</p><p>Business analytics report</p><p>#############</p><p>#&nbsp;TONE&nbsp;#</p><p>Professional,&nbsp;technical</p><p>#############</p><p>#&nbsp;AUDIENCE&nbsp;#</p><p>My business partners.&nbsp;Convince them that your marketing strategy is well thought-out and fully backed by data.</p><p>#############</p><p>#&nbsp;RESPONSE:&nbsp;MARKDOWN REPORT&nbsp;#</p><p>&lt;For each cluster in&nbsp;[CLUSTERS]&gt;</p><p>—&nbsp;Customer Group:&nbsp;[CLUSTER_NAME]</p><p>—&nbsp;Profile:&nbsp;[CLUSTER_INFORMATION]</p><p>—&nbsp;Marketing Ideas:&nbsp;[MARKETING_IDEAS]</p><p>—&nbsp;Rationale:&nbsp;[RATIONALE]</p><p>&lt;Annex&gt;</p><p>Give a table of the list of row numbers belonging to each cluster,&nbsp;in order to back up your analysis.&nbsp;Use these table headers:&nbsp;[[CLUSTER_NAME],&nbsp;List of Rows].</p><p>#############</p><p>#&nbsp;START ANALYSIS&nbsp;#</p><p>If you understand,&nbsp;ask me for my dataset.</p></blockquote><p><strong>技巧 1：將複雜任務分解為簡單步驟</strong></p><p>LLM 擅長執行簡單任務，但在複雜任務上表現一般。因此，<strong>對於像這樣的複雜任務，重要的是要把任務分解成簡單的步驟説明，讓 LLM 遵循。</strong> 這樣做的目的是向 LLM 提供你自己執行任務時會採取的步驟。</p><p>在本例中，步驟如下：</p><blockquote><p><strong>Use this step-by-step process and do not use code:</strong></p><p><strong>1.&nbsp;CLUSTERS:&nbsp;Use the columns of the dataset to cluster the rows of the dataset,&nbsp;such that customers within the same cluster have similar column values while customers in different clusters have distinctly different column values.&nbsp;Ensure that each row only belongs to 1 cluster.</strong></p><p><strong>For each cluster found,</strong></p><p><strong>2.&nbsp;CLUSTER_INFORMATION:&nbsp;Describe the cluster in terms of the dataset columns.</strong></p><p><strong>3.&nbsp;CLUSTER_NAME:&nbsp;Interpret&nbsp;[CLUSTER_INFORMATION]&nbsp;to obtain a short name for the customer group in this cluster.</strong></p><p><strong>4.&nbsp;MARKETING_IDEAS:&nbsp;Generate ideas to market my product to this customer group.</strong></p><p><strong>5.&nbsp;RATIONALE:&nbsp;Explain why&nbsp;[MARKETING_IDEAS]&nbsp;is relevant and effective for this customer group.</strong></p></blockquote><p>與簡單地將整體任務交給 LLM 相比，例如「將客户分組，然後提出針對每個羣體的營銷策略」。通過逐步説明，LLM 更有可能提供正確的結果。</p><p><strong>技巧 2：引用每個步驟的中間輸出</strong></p><p>在向 LLM 提供逐步説明時，可將每個步驟的中間輸出命名為大寫的變量名，例如 CLUSTERS、CLUSTER_INFORMATION、CLUSTER_NAME、MARKETING_IDEAS 和 RATIONALE。</p><p><strong>使用大寫字母是為了將這些變量名與給出的 instructions 內容區分開。稍後可以使用方括號引用這些中間輸出，如[VARIABLE_NAME]。</strong></p><p><strong>技巧 3：規範大模型回答的格式</strong></p><p>在這裏，要求使用 Markdown 報告格式，以美化 LLM 的回答。在這裏，中間輸出中的變量名又派上了用場，可以決定報告的結構。</p><blockquote><p>#&nbsp;RESPONSE:&nbsp;MARKDOWN REPORT&nbsp;#</p><p>&lt;For each cluster in&nbsp;[CLUSTERS]&gt;</p><p>—&nbsp;Customer Group:&nbsp;[CLUSTER_NAME]</p><p>—&nbsp;Profile:&nbsp;[CLUSTER_INFORMATION]</p><p>—&nbsp;Marketing Ideas:&nbsp;[MARKETING_IDEAS]</p><p>—&nbsp;Rationale:&nbsp;[RATIONALE]</p><p>&lt;Annex&gt;<br><strong>Give a table of the list of row numbers belonging to each cluster,&nbsp;in order to back up your analysis.&nbsp;Use these table headers:&nbsp;[[CLUSTER_NAME],&nbsp;List of Rows].</strong></p></blockquote><p>事實上，您甚至可以隨後要求 ChatGPT 將報告提供為可下載文件，這樣您就可以根據其回答來撰寫最終的報告文檔。</p><p><img src="https://oscimg.oschina.net/oscnet/up-792771629e0046fa10609d608023fce4df5.png" alt="" referrerpolicy="no-referrer"></p><p>Saving GPT-4's response as a file&nbsp;—&nbsp;Image by author</p><p><strong>技巧 4：將任務説明與數據集分開</strong></p><p>您會注意到我們在第一個提示語中並沒有將數據集提供給 LLM。相反，提示語只包含了數據集分析的任務説明，並在最後加上了以下內容：</p><blockquote><p>#&nbsp;START ANALYSIS&nbsp;#</p><p>If you understand,&nbsp;ask me for my dataset.</p></blockquote><p>ChatGPT 隨後回覆説它理解了，我們將在下一個提示語中將數據集作為 CSV 字符串傳遞給它：</p><p><img src="https://oscimg.oschina.net/oscnet/up-3b139d01a6cf26df1f930d6e67dc5b8be24.png" alt="" referrerpolicy="no-referrer"></p><p>GPT-4's response&nbsp;—&nbsp;Image by author</p><p><strong>但為什麼要將 instructions 與數據集分開呢？</strong></p><p>簡單明瞭的答案是，LLM 的上下文窗口存在限制，即在一句提示語中可以輸入的 tokens 數量存在限制。同時包含 instructions 和數據的長提示語（long prompt）可能會超過這個限制，從而導致截斷（truncation）和信息丟失（loss of information）。</p><p>更復雜的答案是，<strong>將 instructions 和數據集分開可以幫助 LLM 保持清晰的理解，降低遺漏信息的可能性。</strong> 你可能遇到過這樣的情況，即 LLM "不小心忘記了"&nbsp;你發送的較長提示語給出的某個 instruction ——例如，如果你要求給出 100&nbsp;字的回答，而 LLM 卻給了您一個較長的段落。通過先接收 instructions ，再接收 instructions 所針對的數據集，LLM 可以先消化它應該執行的任務，然後再對接下來提供的數據集執行 instructions 。</p><p>不過請注意，只有聊天型&nbsp;LLM&nbsp;才能實現&nbsp;instruction&nbsp;和數據集的分離，因為它們會保留對話記憶，而&nbsp;completion LLM&nbsp;則不會（譯者注：completion LLM 指的是一種能夠根據給定的提示語來生成完整文本或完成特定任務的語言模型。這種模型通常不具備對話記憶，而是專注於根據提示語生成連貫的文本）。</p><p><strong>Thanks for reading!</strong></p><p><strong>END</strong></p><p><strong>🚢🚢🚢歡迎小夥伴們加入<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fbaihai-idp.yuque.com%2Fmwvla8%2Fdoc%3F%23" target="_blank">AI 技術軟件及技術交流羣</a>，追蹤前沿熱點，共探技術難題~</strong></p><p><strong>參考資料</strong></p><p>[1]<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fgithub.com%2FNVIDIA%2FNeMo-Guardrails" target="_blank">https://github.com/NVIDIA/NeMo-Guardrails</a></p><p>[2]<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Fwww.kaggle.com%2Fdatasets%2Fimakash3011%2Fcustomer-personality-analysis" target="_blank">https://www.kaggle.com/datasets/imakash3011/customer-personality-analysis</a></p><p>[3]<a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41%23544b" target="_blank">https://towardsdatascience.com/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41#544b</a></p><p><strong>本文經原作者授權，由 Baihai IDP 編譯。如需轉載譯文，請聯繫獲取授權。</strong></p><p><strong>原文鏈接：</strong></p><p><a href="https://www.oschina.net/action/GoToLink?url=https%3A%2F%2Ftowardsdatascience.com%2Fhow-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41" target="_blank">https://towardsdatascience.com/how-i-won-singapores-gpt-4-prompt-engineering-competition-34c195a93d41</a></p></div>
                                    ]]>
            </description>
            <pubDate>Mon, 22 Jan 2024 03:54:00 GMT</pubDate>
            <guid isPermaLink="false">https://my.oschina.net/IDP/blog/10920438</guid>
            <link>https://my.oschina.net/IDP/blog/10920438</link>
            <author>
                <![CDATA[原創]]>
            </author>
        </item>
    </channel>
</rss>
